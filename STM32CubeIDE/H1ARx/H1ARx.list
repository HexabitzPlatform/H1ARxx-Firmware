
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019604  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003354  080196c0  080196c0  000296c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ca14  0801ca14  00030780  2**0
                  CONTENTS
  4 .ARM          00000008  0801ca14  0801ca14  0002ca14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ca1c  0801ca1c  00030780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ca1c  0801ca1c  0002ca1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ca24  0801ca24  0002ca24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801ca28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000778  20000008  0801ca30  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000067d8  20000780  0801d1a8  00030780  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006f58  0801d1a8  00036f58  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030780  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000307a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033696  00000000  00000000  000307eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000711f  00000000  00000000  00063e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001251e  00000000  00000000  0006afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001dd8  00000000  00000000  0007d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000018b7  00000000  00000000  0007f298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027614  00000000  00000000  00080b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a688  00000000  00000000  000a8163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d74  00000000  00000000  000b27ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  000b9560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000780 	.word	0x20000780
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080196a8 	.word	0x080196a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000784 	.word	0x20000784
 8000100:	080196a8 	.word	0x080196a8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fd15 	bl	8001e7c <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc65 	bl	8001d2c <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd07 	bl	8001e7c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcfd 	bl	8001e7c <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc8d 	bl	8001db0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc83 	bl	8001db0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fa4b 	bl	800095c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9d7 	bl	8000884 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa3d 	bl	800095c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa33 	bl	800095c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9e3 	bl	80008d0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f9d9 	bl	80008d0 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	0008      	movs	r0, r1
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f8bc 	bl	80006ec <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4699      	mov	r9, r3
 8000586:	0c03      	lsrs	r3, r0, #16
 8000588:	469c      	mov	ip, r3
 800058a:	0413      	lsls	r3, r2, #16
 800058c:	4647      	mov	r7, r8
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	001d      	movs	r5, r3
 8000592:	000e      	movs	r6, r1
 8000594:	4661      	mov	r1, ip
 8000596:	0404      	lsls	r4, r0, #16
 8000598:	0c24      	lsrs	r4, r4, #16
 800059a:	b580      	push	{r7, lr}
 800059c:	0007      	movs	r7, r0
 800059e:	0c10      	lsrs	r0, r2, #16
 80005a0:	434b      	muls	r3, r1
 80005a2:	4365      	muls	r5, r4
 80005a4:	4341      	muls	r1, r0
 80005a6:	4360      	muls	r0, r4
 80005a8:	0c2c      	lsrs	r4, r5, #16
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	1820      	adds	r0, r4, r0
 80005ae:	468c      	mov	ip, r1
 80005b0:	4283      	cmp	r3, r0
 80005b2:	d903      	bls.n	80005bc <__aeabi_lmul+0x3c>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	025b      	lsls	r3, r3, #9
 80005b8:	4698      	mov	r8, r3
 80005ba:	44c4      	add	ip, r8
 80005bc:	4649      	mov	r1, r9
 80005be:	4379      	muls	r1, r7
 80005c0:	4356      	muls	r6, r2
 80005c2:	0c03      	lsrs	r3, r0, #16
 80005c4:	042d      	lsls	r5, r5, #16
 80005c6:	0c2d      	lsrs	r5, r5, #16
 80005c8:	1989      	adds	r1, r1, r6
 80005ca:	4463      	add	r3, ip
 80005cc:	0400      	lsls	r0, r0, #16
 80005ce:	1940      	adds	r0, r0, r5
 80005d0:	18c9      	adds	r1, r1, r3
 80005d2:	bcc0      	pop	{r6, r7}
 80005d4:	46b9      	mov	r9, r7
 80005d6:	46b0      	mov	r8, r6
 80005d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__aeabi_f2uiz>:
 80005dc:	219e      	movs	r1, #158	; 0x9e
 80005de:	b510      	push	{r4, lr}
 80005e0:	05c9      	lsls	r1, r1, #23
 80005e2:	1c04      	adds	r4, r0, #0
 80005e4:	f7ff ff98 	bl	8000518 <__aeabi_fcmpge>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d103      	bne.n	80005f4 <__aeabi_f2uiz+0x18>
 80005ec:	1c20      	adds	r0, r4, #0
 80005ee:	f000 fce7 	bl	8000fc0 <__aeabi_f2iz>
 80005f2:	bd10      	pop	{r4, pc}
 80005f4:	219e      	movs	r1, #158	; 0x9e
 80005f6:	1c20      	adds	r0, r4, #0
 80005f8:	05c9      	lsls	r1, r1, #23
 80005fa:	f000 fb41 	bl	8000c80 <__aeabi_fsub>
 80005fe:	f000 fcdf 	bl	8000fc0 <__aeabi_f2iz>
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	061b      	lsls	r3, r3, #24
 8000606:	469c      	mov	ip, r3
 8000608:	4460      	add	r0, ip
 800060a:	e7f2      	b.n	80005f2 <__aeabi_f2uiz+0x16>

0800060c <__aeabi_d2uiz>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	2200      	movs	r2, #0
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__aeabi_d2uiz+0x38>)
 8000612:	0004      	movs	r4, r0
 8000614:	000d      	movs	r5, r1
 8000616:	f7ff ff45 	bl	80004a4 <__aeabi_dcmpge>
 800061a:	2800      	cmp	r0, #0
 800061c:	d104      	bne.n	8000628 <__aeabi_d2uiz+0x1c>
 800061e:	0020      	movs	r0, r4
 8000620:	0029      	movs	r1, r5
 8000622:	f002 faf1 	bl	8002c08 <__aeabi_d2iz>
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <__aeabi_d2uiz+0x38>)
 800062a:	2200      	movs	r2, #0
 800062c:	0020      	movs	r0, r4
 800062e:	0029      	movs	r1, r5
 8000630:	f001 ff4a 	bl	80024c8 <__aeabi_dsub>
 8000634:	f002 fae8 	bl	8002c08 <__aeabi_d2iz>
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	061b      	lsls	r3, r3, #24
 800063c:	469c      	mov	ip, r3
 800063e:	4460      	add	r0, ip
 8000640:	e7f1      	b.n	8000626 <__aeabi_d2uiz+0x1a>
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	41e00000 	.word	0x41e00000

08000648 <__aeabi_d2lz>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	0005      	movs	r5, r0
 800064c:	000c      	movs	r4, r1
 800064e:	2200      	movs	r2, #0
 8000650:	2300      	movs	r3, #0
 8000652:	0028      	movs	r0, r5
 8000654:	0021      	movs	r1, r4
 8000656:	f7ff ff07 	bl	8000468 <__aeabi_dcmplt>
 800065a:	2800      	cmp	r0, #0
 800065c:	d108      	bne.n	8000670 <__aeabi_d2lz+0x28>
 800065e:	0028      	movs	r0, r5
 8000660:	0021      	movs	r1, r4
 8000662:	f000 f80f 	bl	8000684 <__aeabi_d2ulz>
 8000666:	0002      	movs	r2, r0
 8000668:	000b      	movs	r3, r1
 800066a:	0010      	movs	r0, r2
 800066c:	0019      	movs	r1, r3
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	061b      	lsls	r3, r3, #24
 8000674:	18e1      	adds	r1, r4, r3
 8000676:	0028      	movs	r0, r5
 8000678:	f000 f804 	bl	8000684 <__aeabi_d2ulz>
 800067c:	2300      	movs	r3, #0
 800067e:	4242      	negs	r2, r0
 8000680:	418b      	sbcs	r3, r1
 8000682:	e7f2      	b.n	800066a <__aeabi_d2lz+0x22>

08000684 <__aeabi_d2ulz>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	2200      	movs	r2, #0
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <__aeabi_d2ulz+0x34>)
 800068a:	000d      	movs	r5, r1
 800068c:	0004      	movs	r4, r0
 800068e:	f001 fc59 	bl	8001f44 <__aeabi_dmul>
 8000692:	f7ff ffbb 	bl	800060c <__aeabi_d2uiz>
 8000696:	0006      	movs	r6, r0
 8000698:	f002 fb1c 	bl	8002cd4 <__aeabi_ui2d>
 800069c:	2200      	movs	r2, #0
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <__aeabi_d2ulz+0x38>)
 80006a0:	f001 fc50 	bl	8001f44 <__aeabi_dmul>
 80006a4:	0002      	movs	r2, r0
 80006a6:	000b      	movs	r3, r1
 80006a8:	0020      	movs	r0, r4
 80006aa:	0029      	movs	r1, r5
 80006ac:	f001 ff0c 	bl	80024c8 <__aeabi_dsub>
 80006b0:	f7ff ffac 	bl	800060c <__aeabi_d2uiz>
 80006b4:	0031      	movs	r1, r6
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	3df00000 	.word	0x3df00000
 80006bc:	41f00000 	.word	0x41f00000

080006c0 <__aeabi_l2d>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	0006      	movs	r6, r0
 80006c4:	0008      	movs	r0, r1
 80006c6:	f002 fad5 	bl	8002c74 <__aeabi_i2d>
 80006ca:	2200      	movs	r2, #0
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <__aeabi_l2d+0x28>)
 80006ce:	f001 fc39 	bl	8001f44 <__aeabi_dmul>
 80006d2:	000d      	movs	r5, r1
 80006d4:	0004      	movs	r4, r0
 80006d6:	0030      	movs	r0, r6
 80006d8:	f002 fafc 	bl	8002cd4 <__aeabi_ui2d>
 80006dc:	002b      	movs	r3, r5
 80006de:	0022      	movs	r2, r4
 80006e0:	f000 fcd6 	bl	8001090 <__aeabi_dadd>
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	41f00000 	.word	0x41f00000

080006ec <__udivmoddi4>:
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	4657      	mov	r7, sl
 80006f0:	464e      	mov	r6, r9
 80006f2:	4645      	mov	r5, r8
 80006f4:	46de      	mov	lr, fp
 80006f6:	b5e0      	push	{r5, r6, r7, lr}
 80006f8:	0004      	movs	r4, r0
 80006fa:	000d      	movs	r5, r1
 80006fc:	4692      	mov	sl, r2
 80006fe:	4699      	mov	r9, r3
 8000700:	b083      	sub	sp, #12
 8000702:	428b      	cmp	r3, r1
 8000704:	d830      	bhi.n	8000768 <__udivmoddi4+0x7c>
 8000706:	d02d      	beq.n	8000764 <__udivmoddi4+0x78>
 8000708:	4649      	mov	r1, r9
 800070a:	4650      	mov	r0, sl
 800070c:	f002 fbf4 	bl	8002ef8 <__clzdi2>
 8000710:	0029      	movs	r1, r5
 8000712:	0006      	movs	r6, r0
 8000714:	0020      	movs	r0, r4
 8000716:	f002 fbef 	bl	8002ef8 <__clzdi2>
 800071a:	1a33      	subs	r3, r6, r0
 800071c:	4698      	mov	r8, r3
 800071e:	3b20      	subs	r3, #32
 8000720:	d434      	bmi.n	800078c <__udivmoddi4+0xa0>
 8000722:	469b      	mov	fp, r3
 8000724:	4653      	mov	r3, sl
 8000726:	465a      	mov	r2, fp
 8000728:	4093      	lsls	r3, r2
 800072a:	4642      	mov	r2, r8
 800072c:	001f      	movs	r7, r3
 800072e:	4653      	mov	r3, sl
 8000730:	4093      	lsls	r3, r2
 8000732:	001e      	movs	r6, r3
 8000734:	42af      	cmp	r7, r5
 8000736:	d83b      	bhi.n	80007b0 <__udivmoddi4+0xc4>
 8000738:	42af      	cmp	r7, r5
 800073a:	d100      	bne.n	800073e <__udivmoddi4+0x52>
 800073c:	e079      	b.n	8000832 <__udivmoddi4+0x146>
 800073e:	465b      	mov	r3, fp
 8000740:	1ba4      	subs	r4, r4, r6
 8000742:	41bd      	sbcs	r5, r7
 8000744:	2b00      	cmp	r3, #0
 8000746:	da00      	bge.n	800074a <__udivmoddi4+0x5e>
 8000748:	e076      	b.n	8000838 <__udivmoddi4+0x14c>
 800074a:	2200      	movs	r2, #0
 800074c:	2300      	movs	r3, #0
 800074e:	9200      	str	r2, [sp, #0]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	465a      	mov	r2, fp
 8000756:	4093      	lsls	r3, r2
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	2301      	movs	r3, #1
 800075c:	4642      	mov	r2, r8
 800075e:	4093      	lsls	r3, r2
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	e029      	b.n	80007b8 <__udivmoddi4+0xcc>
 8000764:	4282      	cmp	r2, r0
 8000766:	d9cf      	bls.n	8000708 <__udivmoddi4+0x1c>
 8000768:	2200      	movs	r2, #0
 800076a:	2300      	movs	r3, #0
 800076c:	9200      	str	r2, [sp, #0]
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <__udivmoddi4+0x8e>
 8000776:	601c      	str	r4, [r3, #0]
 8000778:	605d      	str	r5, [r3, #4]
 800077a:	9800      	ldr	r0, [sp, #0]
 800077c:	9901      	ldr	r1, [sp, #4]
 800077e:	b003      	add	sp, #12
 8000780:	bcf0      	pop	{r4, r5, r6, r7}
 8000782:	46bb      	mov	fp, r7
 8000784:	46b2      	mov	sl, r6
 8000786:	46a9      	mov	r9, r5
 8000788:	46a0      	mov	r8, r4
 800078a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078c:	4642      	mov	r2, r8
 800078e:	469b      	mov	fp, r3
 8000790:	2320      	movs	r3, #32
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	4652      	mov	r2, sl
 8000796:	40da      	lsrs	r2, r3
 8000798:	4641      	mov	r1, r8
 800079a:	0013      	movs	r3, r2
 800079c:	464a      	mov	r2, r9
 800079e:	408a      	lsls	r2, r1
 80007a0:	0017      	movs	r7, r2
 80007a2:	4642      	mov	r2, r8
 80007a4:	431f      	orrs	r7, r3
 80007a6:	4653      	mov	r3, sl
 80007a8:	4093      	lsls	r3, r2
 80007aa:	001e      	movs	r6, r3
 80007ac:	42af      	cmp	r7, r5
 80007ae:	d9c3      	bls.n	8000738 <__udivmoddi4+0x4c>
 80007b0:	2200      	movs	r2, #0
 80007b2:	2300      	movs	r3, #0
 80007b4:	9200      	str	r2, [sp, #0]
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0d8      	beq.n	8000770 <__udivmoddi4+0x84>
 80007be:	07fb      	lsls	r3, r7, #31
 80007c0:	0872      	lsrs	r2, r6, #1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	4646      	mov	r6, r8
 80007c6:	087b      	lsrs	r3, r7, #1
 80007c8:	e00e      	b.n	80007e8 <__udivmoddi4+0xfc>
 80007ca:	42ab      	cmp	r3, r5
 80007cc:	d101      	bne.n	80007d2 <__udivmoddi4+0xe6>
 80007ce:	42a2      	cmp	r2, r4
 80007d0:	d80c      	bhi.n	80007ec <__udivmoddi4+0x100>
 80007d2:	1aa4      	subs	r4, r4, r2
 80007d4:	419d      	sbcs	r5, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	1924      	adds	r4, r4, r4
 80007da:	416d      	adcs	r5, r5
 80007dc:	2100      	movs	r1, #0
 80007de:	3e01      	subs	r6, #1
 80007e0:	1824      	adds	r4, r4, r0
 80007e2:	414d      	adcs	r5, r1
 80007e4:	2e00      	cmp	r6, #0
 80007e6:	d006      	beq.n	80007f6 <__udivmoddi4+0x10a>
 80007e8:	42ab      	cmp	r3, r5
 80007ea:	d9ee      	bls.n	80007ca <__udivmoddi4+0xde>
 80007ec:	3e01      	subs	r6, #1
 80007ee:	1924      	adds	r4, r4, r4
 80007f0:	416d      	adcs	r5, r5
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d1f8      	bne.n	80007e8 <__udivmoddi4+0xfc>
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	9901      	ldr	r1, [sp, #4]
 80007fa:	465b      	mov	r3, fp
 80007fc:	1900      	adds	r0, r0, r4
 80007fe:	4169      	adcs	r1, r5
 8000800:	2b00      	cmp	r3, #0
 8000802:	db24      	blt.n	800084e <__udivmoddi4+0x162>
 8000804:	002b      	movs	r3, r5
 8000806:	465a      	mov	r2, fp
 8000808:	4644      	mov	r4, r8
 800080a:	40d3      	lsrs	r3, r2
 800080c:	002a      	movs	r2, r5
 800080e:	40e2      	lsrs	r2, r4
 8000810:	001c      	movs	r4, r3
 8000812:	465b      	mov	r3, fp
 8000814:	0015      	movs	r5, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	db2a      	blt.n	8000870 <__udivmoddi4+0x184>
 800081a:	0026      	movs	r6, r4
 800081c:	409e      	lsls	r6, r3
 800081e:	0033      	movs	r3, r6
 8000820:	0026      	movs	r6, r4
 8000822:	4647      	mov	r7, r8
 8000824:	40be      	lsls	r6, r7
 8000826:	0032      	movs	r2, r6
 8000828:	1a80      	subs	r0, r0, r2
 800082a:	4199      	sbcs	r1, r3
 800082c:	9000      	str	r0, [sp, #0]
 800082e:	9101      	str	r1, [sp, #4]
 8000830:	e79e      	b.n	8000770 <__udivmoddi4+0x84>
 8000832:	42a3      	cmp	r3, r4
 8000834:	d8bc      	bhi.n	80007b0 <__udivmoddi4+0xc4>
 8000836:	e782      	b.n	800073e <__udivmoddi4+0x52>
 8000838:	4642      	mov	r2, r8
 800083a:	2320      	movs	r3, #32
 800083c:	2100      	movs	r1, #0
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	2200      	movs	r2, #0
 8000842:	9100      	str	r1, [sp, #0]
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	40da      	lsrs	r2, r3
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	e785      	b.n	800075a <__udivmoddi4+0x6e>
 800084e:	4642      	mov	r2, r8
 8000850:	2320      	movs	r3, #32
 8000852:	1a9b      	subs	r3, r3, r2
 8000854:	002a      	movs	r2, r5
 8000856:	4646      	mov	r6, r8
 8000858:	409a      	lsls	r2, r3
 800085a:	0023      	movs	r3, r4
 800085c:	40f3      	lsrs	r3, r6
 800085e:	4644      	mov	r4, r8
 8000860:	4313      	orrs	r3, r2
 8000862:	002a      	movs	r2, r5
 8000864:	40e2      	lsrs	r2, r4
 8000866:	001c      	movs	r4, r3
 8000868:	465b      	mov	r3, fp
 800086a:	0015      	movs	r5, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	dad4      	bge.n	800081a <__udivmoddi4+0x12e>
 8000870:	4642      	mov	r2, r8
 8000872:	002f      	movs	r7, r5
 8000874:	2320      	movs	r3, #32
 8000876:	0026      	movs	r6, r4
 8000878:	4097      	lsls	r7, r2
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	40de      	lsrs	r6, r3
 800087e:	003b      	movs	r3, r7
 8000880:	4333      	orrs	r3, r6
 8000882:	e7cd      	b.n	8000820 <__udivmoddi4+0x134>

08000884 <__eqsf2>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	0042      	lsls	r2, r0, #1
 8000888:	0245      	lsls	r5, r0, #9
 800088a:	024e      	lsls	r6, r1, #9
 800088c:	004c      	lsls	r4, r1, #1
 800088e:	0fc3      	lsrs	r3, r0, #31
 8000890:	0a6d      	lsrs	r5, r5, #9
 8000892:	2001      	movs	r0, #1
 8000894:	0e12      	lsrs	r2, r2, #24
 8000896:	0a76      	lsrs	r6, r6, #9
 8000898:	0e24      	lsrs	r4, r4, #24
 800089a:	0fc9      	lsrs	r1, r1, #31
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d006      	beq.n	80008ae <__eqsf2+0x2a>
 80008a0:	2cff      	cmp	r4, #255	; 0xff
 80008a2:	d003      	beq.n	80008ac <__eqsf2+0x28>
 80008a4:	42a2      	cmp	r2, r4
 80008a6:	d101      	bne.n	80008ac <__eqsf2+0x28>
 80008a8:	42b5      	cmp	r5, r6
 80008aa:	d006      	beq.n	80008ba <__eqsf2+0x36>
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d1fc      	bne.n	80008ac <__eqsf2+0x28>
 80008b2:	2cff      	cmp	r4, #255	; 0xff
 80008b4:	d1fa      	bne.n	80008ac <__eqsf2+0x28>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d1f8      	bne.n	80008ac <__eqsf2+0x28>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d006      	beq.n	80008cc <__eqsf2+0x48>
 80008be:	2001      	movs	r0, #1
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d1f3      	bne.n	80008ac <__eqsf2+0x28>
 80008c4:	0028      	movs	r0, r5
 80008c6:	1e43      	subs	r3, r0, #1
 80008c8:	4198      	sbcs	r0, r3
 80008ca:	e7ef      	b.n	80008ac <__eqsf2+0x28>
 80008cc:	2000      	movs	r0, #0
 80008ce:	e7ed      	b.n	80008ac <__eqsf2+0x28>

080008d0 <__gesf2>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	0245      	lsls	r5, r0, #9
 80008d6:	024e      	lsls	r6, r1, #9
 80008d8:	004c      	lsls	r4, r1, #1
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	0a76      	lsrs	r6, r6, #9
 80008e2:	0e24      	lsrs	r4, r4, #24
 80008e4:	0fc8      	lsrs	r0, r1, #31
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d01b      	beq.n	8000922 <__gesf2+0x52>
 80008ea:	2cff      	cmp	r4, #255	; 0xff
 80008ec:	d00e      	beq.n	800090c <__gesf2+0x3c>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d11b      	bne.n	800092a <__gesf2+0x5a>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d101      	bne.n	80008fa <__gesf2+0x2a>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d01c      	beq.n	8000934 <__gesf2+0x64>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d00c      	beq.n	8000918 <__gesf2+0x48>
 80008fe:	4283      	cmp	r3, r0
 8000900:	d01c      	beq.n	800093c <__gesf2+0x6c>
 8000902:	2102      	movs	r1, #2
 8000904:	1e58      	subs	r0, r3, #1
 8000906:	4008      	ands	r0, r1
 8000908:	3801      	subs	r0, #1
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	2e00      	cmp	r6, #0
 800090e:	d122      	bne.n	8000956 <__gesf2+0x86>
 8000910:	2a00      	cmp	r2, #0
 8000912:	d1f4      	bne.n	80008fe <__gesf2+0x2e>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d1f2      	bne.n	80008fe <__gesf2+0x2e>
 8000918:	2800      	cmp	r0, #0
 800091a:	d1f6      	bne.n	800090a <__gesf2+0x3a>
 800091c:	2001      	movs	r0, #1
 800091e:	4240      	negs	r0, r0
 8000920:	e7f3      	b.n	800090a <__gesf2+0x3a>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d117      	bne.n	8000956 <__gesf2+0x86>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d0f0      	beq.n	800090c <__gesf2+0x3c>
 800092a:	2c00      	cmp	r4, #0
 800092c:	d1e7      	bne.n	80008fe <__gesf2+0x2e>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d1e5      	bne.n	80008fe <__gesf2+0x2e>
 8000932:	e7e6      	b.n	8000902 <__gesf2+0x32>
 8000934:	2000      	movs	r0, #0
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0e7      	beq.n	800090a <__gesf2+0x3a>
 800093a:	e7e2      	b.n	8000902 <__gesf2+0x32>
 800093c:	42a2      	cmp	r2, r4
 800093e:	dc05      	bgt.n	800094c <__gesf2+0x7c>
 8000940:	dbea      	blt.n	8000918 <__gesf2+0x48>
 8000942:	42b5      	cmp	r5, r6
 8000944:	d802      	bhi.n	800094c <__gesf2+0x7c>
 8000946:	d3e7      	bcc.n	8000918 <__gesf2+0x48>
 8000948:	2000      	movs	r0, #0
 800094a:	e7de      	b.n	800090a <__gesf2+0x3a>
 800094c:	4243      	negs	r3, r0
 800094e:	4158      	adcs	r0, r3
 8000950:	0040      	lsls	r0, r0, #1
 8000952:	3801      	subs	r0, #1
 8000954:	e7d9      	b.n	800090a <__gesf2+0x3a>
 8000956:	2002      	movs	r0, #2
 8000958:	4240      	negs	r0, r0
 800095a:	e7d6      	b.n	800090a <__gesf2+0x3a>

0800095c <__lesf2>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	0042      	lsls	r2, r0, #1
 8000960:	0245      	lsls	r5, r0, #9
 8000962:	024e      	lsls	r6, r1, #9
 8000964:	004c      	lsls	r4, r1, #1
 8000966:	0fc3      	lsrs	r3, r0, #31
 8000968:	0a6d      	lsrs	r5, r5, #9
 800096a:	0e12      	lsrs	r2, r2, #24
 800096c:	0a76      	lsrs	r6, r6, #9
 800096e:	0e24      	lsrs	r4, r4, #24
 8000970:	0fc8      	lsrs	r0, r1, #31
 8000972:	2aff      	cmp	r2, #255	; 0xff
 8000974:	d00b      	beq.n	800098e <__lesf2+0x32>
 8000976:	2cff      	cmp	r4, #255	; 0xff
 8000978:	d00d      	beq.n	8000996 <__lesf2+0x3a>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d11f      	bne.n	80009be <__lesf2+0x62>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d116      	bne.n	80009b0 <__lesf2+0x54>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d114      	bne.n	80009b0 <__lesf2+0x54>
 8000986:	2000      	movs	r0, #0
 8000988:	2d00      	cmp	r5, #0
 800098a:	d010      	beq.n	80009ae <__lesf2+0x52>
 800098c:	e009      	b.n	80009a2 <__lesf2+0x46>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d10c      	bne.n	80009ac <__lesf2+0x50>
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d113      	bne.n	80009be <__lesf2+0x62>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d108      	bne.n	80009ac <__lesf2+0x50>
 800099a:	2a00      	cmp	r2, #0
 800099c:	d008      	beq.n	80009b0 <__lesf2+0x54>
 800099e:	4283      	cmp	r3, r0
 80009a0:	d012      	beq.n	80009c8 <__lesf2+0x6c>
 80009a2:	2102      	movs	r1, #2
 80009a4:	1e58      	subs	r0, r3, #1
 80009a6:	4008      	ands	r0, r1
 80009a8:	3801      	subs	r0, #1
 80009aa:	e000      	b.n	80009ae <__lesf2+0x52>
 80009ac:	2002      	movs	r0, #2
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d1f4      	bne.n	800099e <__lesf2+0x42>
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d1fa      	bne.n	80009ae <__lesf2+0x52>
 80009b8:	2001      	movs	r0, #1
 80009ba:	4240      	negs	r0, r0
 80009bc:	e7f7      	b.n	80009ae <__lesf2+0x52>
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d1ed      	bne.n	800099e <__lesf2+0x42>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d1eb      	bne.n	800099e <__lesf2+0x42>
 80009c6:	e7ec      	b.n	80009a2 <__lesf2+0x46>
 80009c8:	42a2      	cmp	r2, r4
 80009ca:	dc05      	bgt.n	80009d8 <__lesf2+0x7c>
 80009cc:	dbf2      	blt.n	80009b4 <__lesf2+0x58>
 80009ce:	42b5      	cmp	r5, r6
 80009d0:	d802      	bhi.n	80009d8 <__lesf2+0x7c>
 80009d2:	d3ef      	bcc.n	80009b4 <__lesf2+0x58>
 80009d4:	2000      	movs	r0, #0
 80009d6:	e7ea      	b.n	80009ae <__lesf2+0x52>
 80009d8:	4243      	negs	r3, r0
 80009da:	4158      	adcs	r0, r3
 80009dc:	0040      	lsls	r0, r0, #1
 80009de:	3801      	subs	r0, #1
 80009e0:	e7e5      	b.n	80009ae <__lesf2+0x52>
 80009e2:	46c0      	nop			; (mov r8, r8)

080009e4 <__aeabi_fmul>:
 80009e4:	0243      	lsls	r3, r0, #9
 80009e6:	0a5b      	lsrs	r3, r3, #9
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	464f      	mov	r7, r9
 80009ec:	4646      	mov	r6, r8
 80009ee:	4699      	mov	r9, r3
 80009f0:	46d6      	mov	lr, sl
 80009f2:	0fc3      	lsrs	r3, r0, #31
 80009f4:	0045      	lsls	r5, r0, #1
 80009f6:	4698      	mov	r8, r3
 80009f8:	b5c0      	push	{r6, r7, lr}
 80009fa:	464b      	mov	r3, r9
 80009fc:	1c0f      	adds	r7, r1, #0
 80009fe:	0e2d      	lsrs	r5, r5, #24
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fmul+0x20>
 8000a02:	e0cb      	b.n	8000b9c <__aeabi_fmul+0x1b8>
 8000a04:	2dff      	cmp	r5, #255	; 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fmul+0x26>
 8000a08:	e0cf      	b.n	8000baa <__aeabi_fmul+0x1c6>
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	431a      	orrs	r2, r3
 8000a12:	2300      	movs	r3, #0
 8000a14:	4691      	mov	r9, r2
 8000a16:	2600      	movs	r6, #0
 8000a18:	469a      	mov	sl, r3
 8000a1a:	3d7f      	subs	r5, #127	; 0x7f
 8000a1c:	027c      	lsls	r4, r7, #9
 8000a1e:	007b      	lsls	r3, r7, #1
 8000a20:	0a64      	lsrs	r4, r4, #9
 8000a22:	0e1b      	lsrs	r3, r3, #24
 8000a24:	0fff      	lsrs	r7, r7, #31
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fmul+0x48>
 8000a2a:	e0a9      	b.n	8000b80 <__aeabi_fmul+0x19c>
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	d011      	beq.n	8000a54 <__aeabi_fmul+0x70>
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	00e4      	lsls	r4, r4, #3
 8000a34:	04d2      	lsls	r2, r2, #19
 8000a36:	4314      	orrs	r4, r2
 8000a38:	4642      	mov	r2, r8
 8000a3a:	3b7f      	subs	r3, #127	; 0x7f
 8000a3c:	195b      	adds	r3, r3, r5
 8000a3e:	407a      	eors	r2, r7
 8000a40:	2000      	movs	r0, #0
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	1c5d      	adds	r5, r3, #1
 8000a46:	2e0a      	cmp	r6, #10
 8000a48:	dd13      	ble.n	8000a72 <__aeabi_fmul+0x8e>
 8000a4a:	003a      	movs	r2, r7
 8000a4c:	2e0b      	cmp	r6, #11
 8000a4e:	d047      	beq.n	8000ae0 <__aeabi_fmul+0xfc>
 8000a50:	4647      	mov	r7, r8
 8000a52:	e03f      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000a54:	002b      	movs	r3, r5
 8000a56:	33ff      	adds	r3, #255	; 0xff
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d11e      	bne.n	8000a9a <__aeabi_fmul+0xb6>
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4316      	orrs	r6, r2
 8000a60:	4642      	mov	r2, r8
 8000a62:	3501      	adds	r5, #1
 8000a64:	407a      	eors	r2, r7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	35ff      	adds	r5, #255	; 0xff
 8000a6a:	2e0a      	cmp	r6, #10
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x8c>
 8000a6e:	e0e4      	b.n	8000c3a <__aeabi_fmul+0x256>
 8000a70:	2002      	movs	r0, #2
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	dc1c      	bgt.n	8000ab0 <__aeabi_fmul+0xcc>
 8000a76:	3e01      	subs	r6, #1
 8000a78:	2e01      	cmp	r6, #1
 8000a7a:	d842      	bhi.n	8000b02 <__aeabi_fmul+0x11e>
 8000a7c:	2802      	cmp	r0, #2
 8000a7e:	d03d      	beq.n	8000afc <__aeabi_fmul+0x118>
 8000a80:	2801      	cmp	r0, #1
 8000a82:	d166      	bne.n	8000b52 <__aeabi_fmul+0x16e>
 8000a84:	2000      	movs	r0, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	05c0      	lsls	r0, r0, #23
 8000a8a:	4308      	orrs	r0, r1
 8000a8c:	07d2      	lsls	r2, r2, #31
 8000a8e:	4310      	orrs	r0, r2
 8000a90:	bce0      	pop	{r5, r6, r7}
 8000a92:	46ba      	mov	sl, r7
 8000a94:	46b1      	mov	r9, r6
 8000a96:	46a8      	mov	r8, r5
 8000a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	4316      	orrs	r6, r2
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	3501      	adds	r5, #1
 8000aa2:	407a      	eors	r2, r7
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	35ff      	adds	r5, #255	; 0xff
 8000aa8:	2e0a      	cmp	r6, #10
 8000aaa:	dd00      	ble.n	8000aae <__aeabi_fmul+0xca>
 8000aac:	e0e4      	b.n	8000c78 <__aeabi_fmul+0x294>
 8000aae:	2003      	movs	r0, #3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	26a6      	movs	r6, #166	; 0xa6
 8000ab6:	00f6      	lsls	r6, r6, #3
 8000ab8:	4231      	tst	r1, r6
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_fmul+0xee>
 8000abc:	2690      	movs	r6, #144	; 0x90
 8000abe:	00b6      	lsls	r6, r6, #2
 8000ac0:	4231      	tst	r1, r6
 8000ac2:	d116      	bne.n	8000af2 <__aeabi_fmul+0x10e>
 8000ac4:	3eb9      	subs	r6, #185	; 0xb9
 8000ac6:	3eff      	subs	r6, #255	; 0xff
 8000ac8:	420e      	tst	r6, r1
 8000aca:	d01a      	beq.n	8000b02 <__aeabi_fmul+0x11e>
 8000acc:	46a1      	mov	r9, r4
 8000ace:	4682      	mov	sl, r0
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000ad2:	0017      	movs	r7, r2
 8000ad4:	4653      	mov	r3, sl
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00f      	beq.n	8000afc <__aeabi_fmul+0x118>
 8000adc:	464c      	mov	r4, r9
 8000ade:	4650      	mov	r0, sl
 8000ae0:	2803      	cmp	r0, #3
 8000ae2:	d1cd      	bne.n	8000a80 <__aeabi_fmul+0x9c>
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	03c9      	lsls	r1, r1, #15
 8000ae8:	4321      	orrs	r1, r4
 8000aea:	0249      	lsls	r1, r1, #9
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	0a49      	lsrs	r1, r1, #9
 8000af0:	e7ca      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	2200      	movs	r2, #0
 8000af6:	20ff      	movs	r0, #255	; 0xff
 8000af8:	03c9      	lsls	r1, r1, #15
 8000afa:	e7c5      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000afc:	20ff      	movs	r0, #255	; 0xff
 8000afe:	2100      	movs	r1, #0
 8000b00:	e7c2      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	4649      	mov	r1, r9
 8000b06:	0424      	lsls	r4, r4, #16
 8000b08:	0c24      	lsrs	r4, r4, #16
 8000b0a:	0027      	movs	r7, r4
 8000b0c:	0c0e      	lsrs	r6, r1, #16
 8000b0e:	0409      	lsls	r1, r1, #16
 8000b10:	0c09      	lsrs	r1, r1, #16
 8000b12:	4374      	muls	r4, r6
 8000b14:	434f      	muls	r7, r1
 8000b16:	4346      	muls	r6, r0
 8000b18:	4348      	muls	r0, r1
 8000b1a:	0c39      	lsrs	r1, r7, #16
 8000b1c:	1900      	adds	r0, r0, r4
 8000b1e:	1809      	adds	r1, r1, r0
 8000b20:	428c      	cmp	r4, r1
 8000b22:	d903      	bls.n	8000b2c <__aeabi_fmul+0x148>
 8000b24:	2080      	movs	r0, #128	; 0x80
 8000b26:	0240      	lsls	r0, r0, #9
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4466      	add	r6, ip
 8000b2c:	043f      	lsls	r7, r7, #16
 8000b2e:	0408      	lsls	r0, r1, #16
 8000b30:	0c3f      	lsrs	r7, r7, #16
 8000b32:	19c0      	adds	r0, r0, r7
 8000b34:	0184      	lsls	r4, r0, #6
 8000b36:	1e67      	subs	r7, r4, #1
 8000b38:	41bc      	sbcs	r4, r7
 8000b3a:	0c09      	lsrs	r1, r1, #16
 8000b3c:	0e80      	lsrs	r0, r0, #26
 8000b3e:	1989      	adds	r1, r1, r6
 8000b40:	4304      	orrs	r4, r0
 8000b42:	0189      	lsls	r1, r1, #6
 8000b44:	430c      	orrs	r4, r1
 8000b46:	0109      	lsls	r1, r1, #4
 8000b48:	d571      	bpl.n	8000c2e <__aeabi_fmul+0x24a>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	0861      	lsrs	r1, r4, #1
 8000b4e:	401c      	ands	r4, r3
 8000b50:	430c      	orrs	r4, r1
 8000b52:	002b      	movs	r3, r5
 8000b54:	337f      	adds	r3, #127	; 0x7f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dd51      	ble.n	8000bfe <__aeabi_fmul+0x21a>
 8000b5a:	0761      	lsls	r1, r4, #29
 8000b5c:	d004      	beq.n	8000b68 <__aeabi_fmul+0x184>
 8000b5e:	210f      	movs	r1, #15
 8000b60:	4021      	ands	r1, r4
 8000b62:	2904      	cmp	r1, #4
 8000b64:	d000      	beq.n	8000b68 <__aeabi_fmul+0x184>
 8000b66:	3404      	adds	r4, #4
 8000b68:	0121      	lsls	r1, r4, #4
 8000b6a:	d503      	bpl.n	8000b74 <__aeabi_fmul+0x190>
 8000b6c:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <__aeabi_fmul+0x298>)
 8000b6e:	401c      	ands	r4, r3
 8000b70:	002b      	movs	r3, r5
 8000b72:	3380      	adds	r3, #128	; 0x80
 8000b74:	2bfe      	cmp	r3, #254	; 0xfe
 8000b76:	dcc1      	bgt.n	8000afc <__aeabi_fmul+0x118>
 8000b78:	01a1      	lsls	r1, r4, #6
 8000b7a:	0a49      	lsrs	r1, r1, #9
 8000b7c:	b2d8      	uxtb	r0, r3
 8000b7e:	e783      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d12c      	bne.n	8000bde <__aeabi_fmul+0x1fa>
 8000b84:	2301      	movs	r3, #1
 8000b86:	4642      	mov	r2, r8
 8000b88:	431e      	orrs	r6, r3
 8000b8a:	002b      	movs	r3, r5
 8000b8c:	407a      	eors	r2, r7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	1c5d      	adds	r5, r3, #1
 8000b94:	2e0a      	cmp	r6, #10
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_fmul+0x1b6>
 8000b98:	e757      	b.n	8000a4a <__aeabi_fmul+0x66>
 8000b9a:	e76a      	b.n	8000a72 <__aeabi_fmul+0x8e>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d110      	bne.n	8000bc2 <__aeabi_fmul+0x1de>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2604      	movs	r6, #4
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	e738      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <__aeabi_fmul+0x1d4>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	2608      	movs	r6, #8
 8000bb2:	25ff      	movs	r5, #255	; 0xff
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e731      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	260c      	movs	r6, #12
 8000bbc:	25ff      	movs	r5, #255	; 0xff
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	e72c      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	f002 f97a 	bl	8002ebc <__clzsi2>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	1f43      	subs	r3, r0, #5
 8000bcc:	2576      	movs	r5, #118	; 0x76
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	426d      	negs	r5, r5
 8000bd4:	4691      	mov	r9, r2
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	1a2d      	subs	r5, r5, r0
 8000bdc:	e71e      	b.n	8000a1c <__aeabi_fmul+0x38>
 8000bde:	0020      	movs	r0, r4
 8000be0:	f002 f96c 	bl	8002ebc <__clzsi2>
 8000be4:	4642      	mov	r2, r8
 8000be6:	1f43      	subs	r3, r0, #5
 8000be8:	409c      	lsls	r4, r3
 8000bea:	1a2b      	subs	r3, r5, r0
 8000bec:	3b76      	subs	r3, #118	; 0x76
 8000bee:	407a      	eors	r2, r7
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	1c5d      	adds	r5, r3, #1
 8000bf6:	2e0a      	cmp	r6, #10
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_fmul+0x218>
 8000bfa:	e726      	b.n	8000a4a <__aeabi_fmul+0x66>
 8000bfc:	e739      	b.n	8000a72 <__aeabi_fmul+0x8e>
 8000bfe:	2101      	movs	r1, #1
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x224>
 8000c06:	e73d      	b.n	8000a84 <__aeabi_fmul+0xa0>
 8000c08:	359e      	adds	r5, #158	; 0x9e
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	40ac      	lsls	r4, r5
 8000c0e:	40d9      	lsrs	r1, r3
 8000c10:	1e63      	subs	r3, r4, #1
 8000c12:	419c      	sbcs	r4, r3
 8000c14:	4321      	orrs	r1, r4
 8000c16:	074b      	lsls	r3, r1, #29
 8000c18:	d004      	beq.n	8000c24 <__aeabi_fmul+0x240>
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fmul+0x240>
 8000c22:	3104      	adds	r1, #4
 8000c24:	014b      	lsls	r3, r1, #5
 8000c26:	d504      	bpl.n	8000c32 <__aeabi_fmul+0x24e>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	e72c      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c2e:	001d      	movs	r5, r3
 8000c30:	e78f      	b.n	8000b52 <__aeabi_fmul+0x16e>
 8000c32:	0189      	lsls	r1, r1, #6
 8000c34:	2000      	movs	r0, #0
 8000c36:	0a49      	lsrs	r1, r1, #9
 8000c38:	e726      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	2e0f      	cmp	r6, #15
 8000c3e:	d10c      	bne.n	8000c5a <__aeabi_fmul+0x276>
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	464b      	mov	r3, r9
 8000c44:	03c9      	lsls	r1, r1, #15
 8000c46:	420b      	tst	r3, r1
 8000c48:	d00d      	beq.n	8000c66 <__aeabi_fmul+0x282>
 8000c4a:	420c      	tst	r4, r1
 8000c4c:	d10b      	bne.n	8000c66 <__aeabi_fmul+0x282>
 8000c4e:	4321      	orrs	r1, r4
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	003a      	movs	r2, r7
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	0a49      	lsrs	r1, r1, #9
 8000c58:	e716      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c5a:	2e0b      	cmp	r6, #11
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fmul+0x27c>
 8000c5e:	e6f7      	b.n	8000a50 <__aeabi_fmul+0x6c>
 8000c60:	46a1      	mov	r9, r4
 8000c62:	469a      	mov	sl, r3
 8000c64:	e736      	b.n	8000ad4 <__aeabi_fmul+0xf0>
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	464b      	mov	r3, r9
 8000c6a:	03c9      	lsls	r1, r1, #15
 8000c6c:	4319      	orrs	r1, r3
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	4642      	mov	r2, r8
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	0a49      	lsrs	r1, r1, #9
 8000c76:	e707      	b.n	8000a88 <__aeabi_fmul+0xa4>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e7df      	b.n	8000c3c <__aeabi_fmul+0x258>
 8000c7c:	f7ffffff 	.word	0xf7ffffff

08000c80 <__aeabi_fsub>:
 8000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c82:	46c6      	mov	lr, r8
 8000c84:	0243      	lsls	r3, r0, #9
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	0045      	lsls	r5, r0, #1
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	0fc4      	lsrs	r4, r0, #31
 8000c8e:	0248      	lsls	r0, r1, #9
 8000c90:	004f      	lsls	r7, r1, #1
 8000c92:	4694      	mov	ip, r2
 8000c94:	0a42      	lsrs	r2, r0, #9
 8000c96:	001e      	movs	r6, r3
 8000c98:	4690      	mov	r8, r2
 8000c9a:	b500      	push	{lr}
 8000c9c:	0e2d      	lsrs	r5, r5, #24
 8000c9e:	0e3f      	lsrs	r7, r7, #24
 8000ca0:	0fc9      	lsrs	r1, r1, #31
 8000ca2:	0980      	lsrs	r0, r0, #6
 8000ca4:	2fff      	cmp	r7, #255	; 0xff
 8000ca6:	d059      	beq.n	8000d5c <__aeabi_fsub+0xdc>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4051      	eors	r1, r2
 8000cac:	428c      	cmp	r4, r1
 8000cae:	d039      	beq.n	8000d24 <__aeabi_fsub+0xa4>
 8000cb0:	1bea      	subs	r2, r5, r7
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	dd58      	ble.n	8000d68 <__aeabi_fsub+0xe8>
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d068      	beq.n	8000d8c <__aeabi_fsub+0x10c>
 8000cba:	2dff      	cmp	r5, #255	; 0xff
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x40>
 8000cbe:	e0d1      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	04db      	lsls	r3, r3, #19
 8000cc4:	4318      	orrs	r0, r3
 8000cc6:	2a1b      	cmp	r2, #27
 8000cc8:	dc00      	bgt.n	8000ccc <__aeabi_fsub+0x4c>
 8000cca:	e0e3      	b.n	8000e94 <__aeabi_fsub+0x214>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4662      	mov	r2, ip
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	015a      	lsls	r2, r3, #5
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fsub+0x58>
 8000cd6:	e0ac      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	099e      	lsrs	r6, r3, #6
 8000cdc:	0030      	movs	r0, r6
 8000cde:	f002 f8ed 	bl	8002ebc <__clzsi2>
 8000ce2:	0033      	movs	r3, r6
 8000ce4:	3805      	subs	r0, #5
 8000ce6:	4083      	lsls	r3, r0
 8000ce8:	4285      	cmp	r5, r0
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_fsub+0x6e>
 8000cec:	e0c6      	b.n	8000e7c <__aeabi_fsub+0x1fc>
 8000cee:	4ab2      	ldr	r2, [pc, #712]	; (8000fb8 <__aeabi_fsub+0x338>)
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	075a      	lsls	r2, r3, #29
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_fsub+0x82>
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	2a04      	cmp	r2, #4
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_fsub+0x82>
 8000d00:	3304      	adds	r3, #4
 8000d02:	015a      	lsls	r2, r3, #5
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_fsub+0x88>
 8000d06:	e097      	b.n	8000e38 <__aeabi_fsub+0x1b8>
 8000d08:	1c6a      	adds	r2, r5, #1
 8000d0a:	2dfe      	cmp	r5, #254	; 0xfe
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x90>
 8000d0e:	e084      	b.n	8000e1a <__aeabi_fsub+0x19a>
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	0a5e      	lsrs	r6, r3, #9
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	05d0      	lsls	r0, r2, #23
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	07e4      	lsls	r4, r4, #31
 8000d1c:	4320      	orrs	r0, r4
 8000d1e:	bc80      	pop	{r7}
 8000d20:	46b8      	mov	r8, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	1bea      	subs	r2, r5, r7
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	dd41      	ble.n	8000dae <__aeabi_fsub+0x12e>
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d06b      	beq.n	8000e06 <__aeabi_fsub+0x186>
 8000d2e:	2dff      	cmp	r5, #255	; 0xff
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0xb4>
 8000d32:	e097      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	04db      	lsls	r3, r3, #19
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2a1b      	cmp	r2, #27
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_fsub+0xc0>
 8000d3e:	e0cc      	b.n	8000eda <__aeabi_fsub+0x25a>
 8000d40:	2301      	movs	r3, #1
 8000d42:	4463      	add	r3, ip
 8000d44:	015a      	lsls	r2, r3, #5
 8000d46:	d574      	bpl.n	8000e32 <__aeabi_fsub+0x1b2>
 8000d48:	3501      	adds	r5, #1
 8000d4a:	2dff      	cmp	r5, #255	; 0xff
 8000d4c:	d065      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000d4e:	2201      	movs	r2, #1
 8000d50:	499a      	ldr	r1, [pc, #616]	; (8000fbc <__aeabi_fsub+0x33c>)
 8000d52:	401a      	ands	r2, r3
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	400b      	ands	r3, r1
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e7cb      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d01f      	beq.n	8000da0 <__aeabi_fsub+0x120>
 8000d60:	428c      	cmp	r4, r1
 8000d62:	d022      	beq.n	8000daa <__aeabi_fsub+0x12a>
 8000d64:	002a      	movs	r2, r5
 8000d66:	3aff      	subs	r2, #255	; 0xff
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d035      	beq.n	8000dd8 <__aeabi_fsub+0x158>
 8000d6c:	1b7a      	subs	r2, r7, r5
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fsub+0xf4>
 8000d72:	e099      	b.n	8000ea8 <__aeabi_fsub+0x228>
 8000d74:	4663      	mov	r3, ip
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0xfc>
 8000d7a:	e0dd      	b.n	8000f38 <__aeabi_fsub+0x2b8>
 8000d7c:	1e53      	subs	r3, r2, #1
 8000d7e:	2a01      	cmp	r2, #1
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x104>
 8000d82:	e105      	b.n	8000f90 <__aeabi_fsub+0x310>
 8000d84:	2aff      	cmp	r2, #255	; 0xff
 8000d86:	d06b      	beq.n	8000e60 <__aeabi_fsub+0x1e0>
 8000d88:	001a      	movs	r2, r3
 8000d8a:	e094      	b.n	8000eb6 <__aeabi_fsub+0x236>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d073      	beq.n	8000e78 <__aeabi_fsub+0x1f8>
 8000d90:	1e51      	subs	r1, r2, #1
 8000d92:	2a01      	cmp	r2, #1
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x118>
 8000d96:	e0df      	b.n	8000f58 <__aeabi_fsub+0x2d8>
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d063      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	e792      	b.n	8000cc6 <__aeabi_fsub+0x46>
 8000da0:	2201      	movs	r2, #1
 8000da2:	4051      	eors	r1, r2
 8000da4:	42a1      	cmp	r1, r4
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0x12a>
 8000da8:	e782      	b.n	8000cb0 <__aeabi_fsub+0x30>
 8000daa:	002a      	movs	r2, r5
 8000dac:	3aff      	subs	r2, #255	; 0xff
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d036      	beq.n	8000e20 <__aeabi_fsub+0x1a0>
 8000db2:	1b7a      	subs	r2, r7, r5
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x13a>
 8000db8:	e0aa      	b.n	8000f10 <__aeabi_fsub+0x290>
 8000dba:	2fff      	cmp	r7, #255	; 0xff
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x140>
 8000dbe:	e0da      	b.n	8000f76 <__aeabi_fsub+0x2f6>
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	04db      	lsls	r3, r3, #19
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	468c      	mov	ip, r1
 8000dca:	2a1b      	cmp	r2, #27
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_fsub+0x150>
 8000dce:	e0d4      	b.n	8000f7a <__aeabi_fsub+0x2fa>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	003d      	movs	r5, r7
 8000dd4:	181b      	adds	r3, r3, r0
 8000dd6:	e7b5      	b.n	8000d44 <__aeabi_fsub+0xc4>
 8000dd8:	27fe      	movs	r7, #254	; 0xfe
 8000dda:	1c6a      	adds	r2, r5, #1
 8000ddc:	4217      	tst	r7, r2
 8000dde:	d171      	bne.n	8000ec4 <__aeabi_fsub+0x244>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d000      	beq.n	8000de6 <__aeabi_fsub+0x166>
 8000de4:	e09e      	b.n	8000f24 <__aeabi_fsub+0x2a4>
 8000de6:	4663      	mov	r3, ip
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x16e>
 8000dec:	e0d5      	b.n	8000f9a <__aeabi_fsub+0x31a>
 8000dee:	2200      	movs	r2, #0
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fsub+0x176>
 8000df4:	e78f      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000df6:	1a1b      	subs	r3, r3, r0
 8000df8:	015e      	lsls	r6, r3, #5
 8000dfa:	d400      	bmi.n	8000dfe <__aeabi_fsub+0x17e>
 8000dfc:	e0d6      	b.n	8000fac <__aeabi_fsub+0x32c>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	000c      	movs	r4, r1
 8000e02:	1ac3      	subs	r3, r0, r3
 8000e04:	e776      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d036      	beq.n	8000e78 <__aeabi_fsub+0x1f8>
 8000e0a:	1e51      	subs	r1, r2, #1
 8000e0c:	2a01      	cmp	r2, #1
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_fsub+0x192>
 8000e10:	e09a      	b.n	8000f48 <__aeabi_fsub+0x2c8>
 8000e12:	2aff      	cmp	r2, #255	; 0xff
 8000e14:	d026      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e16:	000a      	movs	r2, r1
 8000e18:	e78f      	b.n	8000d3a <__aeabi_fsub+0xba>
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e77a      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e20:	27fe      	movs	r7, #254	; 0xfe
 8000e22:	1c6a      	adds	r2, r5, #1
 8000e24:	4217      	tst	r7, r2
 8000e26:	d062      	beq.n	8000eee <__aeabi_fsub+0x26e>
 8000e28:	2aff      	cmp	r2, #255	; 0xff
 8000e2a:	d0f6      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	4460      	add	r0, ip
 8000e30:	0843      	lsrs	r3, r0, #1
 8000e32:	075a      	lsls	r2, r3, #29
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fsub+0x1b8>
 8000e36:	e75f      	b.n	8000cf8 <__aeabi_fsub+0x78>
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	2dff      	cmp	r5, #255	; 0xff
 8000e3c:	d012      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	0a5e      	lsrs	r6, r3, #9
 8000e42:	b2ea      	uxtb	r2, r5
 8000e44:	e767      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e46:	4662      	mov	r2, ip
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x1ce>
 8000e4c:	e093      	b.n	8000f76 <__aeabi_fsub+0x2f6>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d008      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	03d2      	lsls	r2, r2, #15
 8000e56:	4213      	tst	r3, r2
 8000e58:	d004      	beq.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e5a:	4640      	mov	r0, r8
 8000e5c:	4210      	tst	r0, r2
 8000e5e:	d101      	bne.n	8000e64 <__aeabi_fsub+0x1e4>
 8000e60:	000c      	movs	r4, r1
 8000e62:	4643      	mov	r3, r8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0d8      	beq.n	8000e1a <__aeabi_fsub+0x19a>
 8000e68:	2680      	movs	r6, #128	; 0x80
 8000e6a:	03f6      	lsls	r6, r6, #15
 8000e6c:	431e      	orrs	r6, r3
 8000e6e:	0276      	lsls	r6, r6, #9
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	0a76      	lsrs	r6, r6, #9
 8000e74:	e74f      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000e76:	4643      	mov	r3, r8
 8000e78:	0015      	movs	r5, r2
 8000e7a:	e7de      	b.n	8000e3a <__aeabi_fsub+0x1ba>
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	1b40      	subs	r0, r0, r5
 8000e80:	3001      	adds	r0, #1
 8000e82:	1a12      	subs	r2, r2, r0
 8000e84:	0019      	movs	r1, r3
 8000e86:	4093      	lsls	r3, r2
 8000e88:	40c1      	lsrs	r1, r0
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	4193      	sbcs	r3, r2
 8000e8e:	2500      	movs	r5, #0
 8000e90:	430b      	orrs	r3, r1
 8000e92:	e72f      	b.n	8000cf4 <__aeabi_fsub+0x74>
 8000e94:	2320      	movs	r3, #32
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	0001      	movs	r1, r0
 8000e9a:	4098      	lsls	r0, r3
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	40d1      	lsrs	r1, r2
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	4193      	sbcs	r3, r2
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	e712      	b.n	8000cce <__aeabi_fsub+0x4e>
 8000ea8:	2fff      	cmp	r7, #255	; 0xff
 8000eaa:	d0d9      	beq.n	8000e60 <__aeabi_fsub+0x1e0>
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	4664      	mov	r4, ip
 8000eb0:	04db      	lsls	r3, r3, #19
 8000eb2:	431c      	orrs	r4, r3
 8000eb4:	46a4      	mov	ip, r4
 8000eb6:	2a1b      	cmp	r2, #27
 8000eb8:	dd52      	ble.n	8000f60 <__aeabi_fsub+0x2e0>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	003d      	movs	r5, r7
 8000ec0:	1ac3      	subs	r3, r0, r3
 8000ec2:	e706      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	1a1e      	subs	r6, r3, r0
 8000ec8:	0173      	lsls	r3, r6, #5
 8000eca:	d439      	bmi.n	8000f40 <__aeabi_fsub+0x2c0>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_fsub+0x252>
 8000ed0:	e704      	b.n	8000cdc <__aeabi_fsub+0x5c>
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	e71d      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000eda:	2320      	movs	r3, #32
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	0001      	movs	r1, r0
 8000ee0:	4098      	lsls	r0, r3
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	40d1      	lsrs	r1, r2
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	4193      	sbcs	r3, r2
 8000eea:	430b      	orrs	r3, r1
 8000eec:	e729      	b.n	8000d42 <__aeabi_fsub+0xc2>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d1a9      	bne.n	8000e46 <__aeabi_fsub+0x1c6>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d056      	beq.n	8000fa6 <__aeabi_fsub+0x326>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x280>
 8000efe:	e70a      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000f00:	0003      	movs	r3, r0
 8000f02:	4463      	add	r3, ip
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	d594      	bpl.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <__aeabi_fsub+0x338>)
 8000f0a:	3501      	adds	r5, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	e790      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f10:	4663      	mov	r3, ip
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0af      	beq.n	8000e76 <__aeabi_fsub+0x1f6>
 8000f16:	1e53      	subs	r3, r2, #1
 8000f18:	2a01      	cmp	r2, #1
 8000f1a:	d015      	beq.n	8000f48 <__aeabi_fsub+0x2c8>
 8000f1c:	2aff      	cmp	r2, #255	; 0xff
 8000f1e:	d02a      	beq.n	8000f76 <__aeabi_fsub+0x2f6>
 8000f20:	001a      	movs	r2, r3
 8000f22:	e752      	b.n	8000dca <__aeabi_fsub+0x14a>
 8000f24:	4662      	mov	r2, ip
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d191      	bne.n	8000e4e <__aeabi_fsub+0x1ce>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d198      	bne.n	8000e60 <__aeabi_fsub+0x1e0>
 8000f2e:	2680      	movs	r6, #128	; 0x80
 8000f30:	2400      	movs	r4, #0
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	03f6      	lsls	r6, r6, #15
 8000f36:	e6ee      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000f38:	000c      	movs	r4, r1
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	0015      	movs	r5, r2
 8000f3e:	e77c      	b.n	8000e3a <__aeabi_fsub+0x1ba>
 8000f40:	4663      	mov	r3, ip
 8000f42:	000c      	movs	r4, r1
 8000f44:	1ac6      	subs	r6, r0, r3
 8000f46:	e6c9      	b.n	8000cdc <__aeabi_fsub+0x5c>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4463      	add	r3, ip
 8000f4c:	2501      	movs	r5, #1
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_fsub+0x2d4>
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000f54:	2502      	movs	r5, #2
 8000f56:	e6fa      	b.n	8000d4e <__aeabi_fsub+0xce>
 8000f58:	4663      	mov	r3, ip
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	e6b8      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000f60:	4664      	mov	r4, ip
 8000f62:	2320      	movs	r3, #32
 8000f64:	40d4      	lsrs	r4, r2
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	4193      	sbcs	r3, r2
 8000f72:	4323      	orrs	r3, r4
 8000f74:	e7a2      	b.n	8000ebc <__aeabi_fsub+0x23c>
 8000f76:	4643      	mov	r3, r8
 8000f78:	e774      	b.n	8000e64 <__aeabi_fsub+0x1e4>
 8000f7a:	4661      	mov	r1, ip
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	40d1      	lsrs	r1, r2
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	4662      	mov	r2, ip
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	4193      	sbcs	r3, r2
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	e720      	b.n	8000dd2 <__aeabi_fsub+0x152>
 8000f90:	4663      	mov	r3, ip
 8000f92:	000c      	movs	r4, r1
 8000f94:	2501      	movs	r5, #1
 8000f96:	1ac3      	subs	r3, r0, r3
 8000f98:	e69b      	b.n	8000cd2 <__aeabi_fsub+0x52>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d099      	beq.n	8000ed2 <__aeabi_fsub+0x252>
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	4646      	mov	r6, r8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	e6b7      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fa6:	4646      	mov	r6, r8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	e6b4      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x332>
 8000fb0:	e73f      	b.n	8000e32 <__aeabi_fsub+0x1b2>
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2600      	movs	r6, #0
 8000fb6:	e6ae      	b.n	8000d16 <__aeabi_fsub+0x96>
 8000fb8:	fbffffff 	.word	0xfbffffff
 8000fbc:	7dffffff 	.word	0x7dffffff

08000fc0 <__aeabi_f2iz>:
 8000fc0:	0241      	lsls	r1, r0, #9
 8000fc2:	0042      	lsls	r2, r0, #1
 8000fc4:	0fc3      	lsrs	r3, r0, #31
 8000fc6:	0a49      	lsrs	r1, r1, #9
 8000fc8:	2000      	movs	r0, #0
 8000fca:	0e12      	lsrs	r2, r2, #24
 8000fcc:	2a7e      	cmp	r2, #126	; 0x7e
 8000fce:	dd03      	ble.n	8000fd8 <__aeabi_f2iz+0x18>
 8000fd0:	2a9d      	cmp	r2, #157	; 0x9d
 8000fd2:	dd02      	ble.n	8000fda <__aeabi_f2iz+0x1a>
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <__aeabi_f2iz+0x3c>)
 8000fd6:	1898      	adds	r0, r3, r2
 8000fd8:	4770      	bx	lr
 8000fda:	2080      	movs	r0, #128	; 0x80
 8000fdc:	0400      	lsls	r0, r0, #16
 8000fde:	4301      	orrs	r1, r0
 8000fe0:	2a95      	cmp	r2, #149	; 0x95
 8000fe2:	dc07      	bgt.n	8000ff4 <__aeabi_f2iz+0x34>
 8000fe4:	2096      	movs	r0, #150	; 0x96
 8000fe6:	1a82      	subs	r2, r0, r2
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	4248      	negs	r0, r1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f3      	bne.n	8000fd8 <__aeabi_f2iz+0x18>
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	e7f1      	b.n	8000fd8 <__aeabi_f2iz+0x18>
 8000ff4:	3a96      	subs	r2, #150	; 0x96
 8000ff6:	4091      	lsls	r1, r2
 8000ff8:	e7f7      	b.n	8000fea <__aeabi_f2iz+0x2a>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	7fffffff 	.word	0x7fffffff

08001000 <__aeabi_ui2f>:
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	1e04      	subs	r4, r0, #0
 8001004:	d00e      	beq.n	8001024 <__aeabi_ui2f+0x24>
 8001006:	f001 ff59 	bl	8002ebc <__clzsi2>
 800100a:	239e      	movs	r3, #158	; 0x9e
 800100c:	0001      	movs	r1, r0
 800100e:	1a1b      	subs	r3, r3, r0
 8001010:	2b96      	cmp	r3, #150	; 0x96
 8001012:	dc0c      	bgt.n	800102e <__aeabi_ui2f+0x2e>
 8001014:	2808      	cmp	r0, #8
 8001016:	d02c      	beq.n	8001072 <__aeabi_ui2f+0x72>
 8001018:	3908      	subs	r1, #8
 800101a:	408c      	lsls	r4, r1
 800101c:	0264      	lsls	r4, r4, #9
 800101e:	0a64      	lsrs	r4, r4, #9
 8001020:	b2d8      	uxtb	r0, r3
 8001022:	e001      	b.n	8001028 <__aeabi_ui2f+0x28>
 8001024:	2000      	movs	r0, #0
 8001026:	2400      	movs	r4, #0
 8001028:	05c0      	lsls	r0, r0, #23
 800102a:	4320      	orrs	r0, r4
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	2b99      	cmp	r3, #153	; 0x99
 8001030:	dd0a      	ble.n	8001048 <__aeabi_ui2f+0x48>
 8001032:	0002      	movs	r2, r0
 8001034:	0020      	movs	r0, r4
 8001036:	321b      	adds	r2, #27
 8001038:	4090      	lsls	r0, r2
 800103a:	0002      	movs	r2, r0
 800103c:	1e50      	subs	r0, r2, #1
 800103e:	4182      	sbcs	r2, r0
 8001040:	2005      	movs	r0, #5
 8001042:	1a40      	subs	r0, r0, r1
 8001044:	40c4      	lsrs	r4, r0
 8001046:	4314      	orrs	r4, r2
 8001048:	2905      	cmp	r1, #5
 800104a:	dc16      	bgt.n	800107a <__aeabi_ui2f+0x7a>
 800104c:	0022      	movs	r2, r4
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <__aeabi_ui2f+0x8c>)
 8001050:	4002      	ands	r2, r0
 8001052:	0765      	lsls	r5, r4, #29
 8001054:	d009      	beq.n	800106a <__aeabi_ui2f+0x6a>
 8001056:	250f      	movs	r5, #15
 8001058:	402c      	ands	r4, r5
 800105a:	2c04      	cmp	r4, #4
 800105c:	d005      	beq.n	800106a <__aeabi_ui2f+0x6a>
 800105e:	3204      	adds	r2, #4
 8001060:	0154      	lsls	r4, r2, #5
 8001062:	d502      	bpl.n	800106a <__aeabi_ui2f+0x6a>
 8001064:	239f      	movs	r3, #159	; 0x9f
 8001066:	4002      	ands	r2, r0
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	0192      	lsls	r2, r2, #6
 800106c:	0a54      	lsrs	r4, r2, #9
 800106e:	b2d8      	uxtb	r0, r3
 8001070:	e7da      	b.n	8001028 <__aeabi_ui2f+0x28>
 8001072:	0264      	lsls	r4, r4, #9
 8001074:	2096      	movs	r0, #150	; 0x96
 8001076:	0a64      	lsrs	r4, r4, #9
 8001078:	e7d6      	b.n	8001028 <__aeabi_ui2f+0x28>
 800107a:	1f4a      	subs	r2, r1, #5
 800107c:	4094      	lsls	r4, r2
 800107e:	0022      	movs	r2, r4
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <__aeabi_ui2f+0x8c>)
 8001082:	4002      	ands	r2, r0
 8001084:	0765      	lsls	r5, r4, #29
 8001086:	d0f0      	beq.n	800106a <__aeabi_ui2f+0x6a>
 8001088:	e7e5      	b.n	8001056 <__aeabi_ui2f+0x56>
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	fbffffff 	.word	0xfbffffff

08001090 <__aeabi_dadd>:
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	464f      	mov	r7, r9
 8001094:	4646      	mov	r6, r8
 8001096:	46d6      	mov	lr, sl
 8001098:	0004      	movs	r4, r0
 800109a:	b5c0      	push	{r6, r7, lr}
 800109c:	001f      	movs	r7, r3
 800109e:	030b      	lsls	r3, r1, #12
 80010a0:	0010      	movs	r0, r2
 80010a2:	004e      	lsls	r6, r1, #1
 80010a4:	0a5b      	lsrs	r3, r3, #9
 80010a6:	0fcd      	lsrs	r5, r1, #31
 80010a8:	0f61      	lsrs	r1, r4, #29
 80010aa:	007a      	lsls	r2, r7, #1
 80010ac:	4319      	orrs	r1, r3
 80010ae:	00e3      	lsls	r3, r4, #3
 80010b0:	033c      	lsls	r4, r7, #12
 80010b2:	0fff      	lsrs	r7, r7, #31
 80010b4:	46bc      	mov	ip, r7
 80010b6:	0a64      	lsrs	r4, r4, #9
 80010b8:	0f47      	lsrs	r7, r0, #29
 80010ba:	4327      	orrs	r7, r4
 80010bc:	0d76      	lsrs	r6, r6, #21
 80010be:	0d52      	lsrs	r2, r2, #21
 80010c0:	00c0      	lsls	r0, r0, #3
 80010c2:	46b9      	mov	r9, r7
 80010c4:	4680      	mov	r8, r0
 80010c6:	1ab7      	subs	r7, r6, r2
 80010c8:	4565      	cmp	r5, ip
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x3e>
 80010cc:	e09b      	b.n	8001206 <__aeabi_dadd+0x176>
 80010ce:	2f00      	cmp	r7, #0
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_dadd+0x44>
 80010d2:	e084      	b.n	80011de <__aeabi_dadd+0x14e>
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dadd+0x4a>
 80010d8:	e0be      	b.n	8001258 <__aeabi_dadd+0x1c8>
 80010da:	4ac8      	ldr	r2, [pc, #800]	; (80013fc <__aeabi_dadd+0x36c>)
 80010dc:	4296      	cmp	r6, r2
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x52>
 80010e0:	e124      	b.n	800132c <__aeabi_dadd+0x29c>
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	464c      	mov	r4, r9
 80010e6:	0412      	lsls	r2, r2, #16
 80010e8:	4314      	orrs	r4, r2
 80010ea:	46a1      	mov	r9, r4
 80010ec:	2f38      	cmp	r7, #56	; 0x38
 80010ee:	dd00      	ble.n	80010f2 <__aeabi_dadd+0x62>
 80010f0:	e167      	b.n	80013c2 <__aeabi_dadd+0x332>
 80010f2:	2f1f      	cmp	r7, #31
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dadd+0x68>
 80010f6:	e1d6      	b.n	80014a6 <__aeabi_dadd+0x416>
 80010f8:	2220      	movs	r2, #32
 80010fa:	464c      	mov	r4, r9
 80010fc:	1bd2      	subs	r2, r2, r7
 80010fe:	4094      	lsls	r4, r2
 8001100:	46a2      	mov	sl, r4
 8001102:	4644      	mov	r4, r8
 8001104:	40fc      	lsrs	r4, r7
 8001106:	0020      	movs	r0, r4
 8001108:	4654      	mov	r4, sl
 800110a:	4304      	orrs	r4, r0
 800110c:	4640      	mov	r0, r8
 800110e:	4090      	lsls	r0, r2
 8001110:	1e42      	subs	r2, r0, #1
 8001112:	4190      	sbcs	r0, r2
 8001114:	464a      	mov	r2, r9
 8001116:	40fa      	lsrs	r2, r7
 8001118:	4304      	orrs	r4, r0
 800111a:	1a89      	subs	r1, r1, r2
 800111c:	1b1c      	subs	r4, r3, r4
 800111e:	42a3      	cmp	r3, r4
 8001120:	4192      	sbcs	r2, r2
 8001122:	4252      	negs	r2, r2
 8001124:	1a8b      	subs	r3, r1, r2
 8001126:	469a      	mov	sl, r3
 8001128:	4653      	mov	r3, sl
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	d400      	bmi.n	8001130 <__aeabi_dadd+0xa0>
 800112e:	e0d4      	b.n	80012da <__aeabi_dadd+0x24a>
 8001130:	4653      	mov	r3, sl
 8001132:	025a      	lsls	r2, r3, #9
 8001134:	0a53      	lsrs	r3, r2, #9
 8001136:	469a      	mov	sl, r3
 8001138:	4653      	mov	r3, sl
 800113a:	2b00      	cmp	r3, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0xb0>
 800113e:	e104      	b.n	800134a <__aeabi_dadd+0x2ba>
 8001140:	4650      	mov	r0, sl
 8001142:	f001 febb 	bl	8002ebc <__clzsi2>
 8001146:	0003      	movs	r3, r0
 8001148:	3b08      	subs	r3, #8
 800114a:	2220      	movs	r2, #32
 800114c:	0020      	movs	r0, r4
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	4651      	mov	r1, sl
 8001152:	40d0      	lsrs	r0, r2
 8001154:	4099      	lsls	r1, r3
 8001156:	0002      	movs	r2, r0
 8001158:	409c      	lsls	r4, r3
 800115a:	430a      	orrs	r2, r1
 800115c:	42b3      	cmp	r3, r6
 800115e:	da00      	bge.n	8001162 <__aeabi_dadd+0xd2>
 8001160:	e102      	b.n	8001368 <__aeabi_dadd+0x2d8>
 8001162:	1b9b      	subs	r3, r3, r6
 8001164:	1c59      	adds	r1, r3, #1
 8001166:	291f      	cmp	r1, #31
 8001168:	dd00      	ble.n	800116c <__aeabi_dadd+0xdc>
 800116a:	e0a7      	b.n	80012bc <__aeabi_dadd+0x22c>
 800116c:	2320      	movs	r3, #32
 800116e:	0010      	movs	r0, r2
 8001170:	0026      	movs	r6, r4
 8001172:	1a5b      	subs	r3, r3, r1
 8001174:	409c      	lsls	r4, r3
 8001176:	4098      	lsls	r0, r3
 8001178:	40ce      	lsrs	r6, r1
 800117a:	40ca      	lsrs	r2, r1
 800117c:	1e63      	subs	r3, r4, #1
 800117e:	419c      	sbcs	r4, r3
 8001180:	4330      	orrs	r0, r6
 8001182:	4692      	mov	sl, r2
 8001184:	2600      	movs	r6, #0
 8001186:	4304      	orrs	r4, r0
 8001188:	0763      	lsls	r3, r4, #29
 800118a:	d009      	beq.n	80011a0 <__aeabi_dadd+0x110>
 800118c:	230f      	movs	r3, #15
 800118e:	4023      	ands	r3, r4
 8001190:	2b04      	cmp	r3, #4
 8001192:	d005      	beq.n	80011a0 <__aeabi_dadd+0x110>
 8001194:	1d23      	adds	r3, r4, #4
 8001196:	42a3      	cmp	r3, r4
 8001198:	41a4      	sbcs	r4, r4
 800119a:	4264      	negs	r4, r4
 800119c:	44a2      	add	sl, r4
 800119e:	001c      	movs	r4, r3
 80011a0:	4653      	mov	r3, sl
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	d400      	bmi.n	80011a8 <__aeabi_dadd+0x118>
 80011a6:	e09b      	b.n	80012e0 <__aeabi_dadd+0x250>
 80011a8:	4b94      	ldr	r3, [pc, #592]	; (80013fc <__aeabi_dadd+0x36c>)
 80011aa:	3601      	adds	r6, #1
 80011ac:	429e      	cmp	r6, r3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x122>
 80011b0:	e0b8      	b.n	8001324 <__aeabi_dadd+0x294>
 80011b2:	4653      	mov	r3, sl
 80011b4:	4992      	ldr	r1, [pc, #584]	; (8001400 <__aeabi_dadd+0x370>)
 80011b6:	08e4      	lsrs	r4, r4, #3
 80011b8:	400b      	ands	r3, r1
 80011ba:	0019      	movs	r1, r3
 80011bc:	075b      	lsls	r3, r3, #29
 80011be:	4323      	orrs	r3, r4
 80011c0:	0572      	lsls	r2, r6, #21
 80011c2:	024c      	lsls	r4, r1, #9
 80011c4:	0b24      	lsrs	r4, r4, #12
 80011c6:	0d52      	lsrs	r2, r2, #21
 80011c8:	0512      	lsls	r2, r2, #20
 80011ca:	07ed      	lsls	r5, r5, #31
 80011cc:	4322      	orrs	r2, r4
 80011ce:	432a      	orrs	r2, r5
 80011d0:	0018      	movs	r0, r3
 80011d2:	0011      	movs	r1, r2
 80011d4:	bce0      	pop	{r5, r6, r7}
 80011d6:	46ba      	mov	sl, r7
 80011d8:	46b1      	mov	r9, r6
 80011da:	46a8      	mov	r8, r5
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	2f00      	cmp	r7, #0
 80011e0:	d048      	beq.n	8001274 <__aeabi_dadd+0x1e4>
 80011e2:	1b97      	subs	r7, r2, r6
 80011e4:	2e00      	cmp	r6, #0
 80011e6:	d000      	beq.n	80011ea <__aeabi_dadd+0x15a>
 80011e8:	e10e      	b.n	8001408 <__aeabi_dadd+0x378>
 80011ea:	000c      	movs	r4, r1
 80011ec:	431c      	orrs	r4, r3
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x162>
 80011f0:	e1b7      	b.n	8001562 <__aeabi_dadd+0x4d2>
 80011f2:	1e7c      	subs	r4, r7, #1
 80011f4:	2f01      	cmp	r7, #1
 80011f6:	d100      	bne.n	80011fa <__aeabi_dadd+0x16a>
 80011f8:	e226      	b.n	8001648 <__aeabi_dadd+0x5b8>
 80011fa:	4d80      	ldr	r5, [pc, #512]	; (80013fc <__aeabi_dadd+0x36c>)
 80011fc:	42af      	cmp	r7, r5
 80011fe:	d100      	bne.n	8001202 <__aeabi_dadd+0x172>
 8001200:	e1d5      	b.n	80015ae <__aeabi_dadd+0x51e>
 8001202:	0027      	movs	r7, r4
 8001204:	e107      	b.n	8001416 <__aeabi_dadd+0x386>
 8001206:	2f00      	cmp	r7, #0
 8001208:	dc00      	bgt.n	800120c <__aeabi_dadd+0x17c>
 800120a:	e0b2      	b.n	8001372 <__aeabi_dadd+0x2e2>
 800120c:	2a00      	cmp	r2, #0
 800120e:	d047      	beq.n	80012a0 <__aeabi_dadd+0x210>
 8001210:	4a7a      	ldr	r2, [pc, #488]	; (80013fc <__aeabi_dadd+0x36c>)
 8001212:	4296      	cmp	r6, r2
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x188>
 8001216:	e089      	b.n	800132c <__aeabi_dadd+0x29c>
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	464c      	mov	r4, r9
 800121c:	0412      	lsls	r2, r2, #16
 800121e:	4314      	orrs	r4, r2
 8001220:	46a1      	mov	r9, r4
 8001222:	2f38      	cmp	r7, #56	; 0x38
 8001224:	dc6b      	bgt.n	80012fe <__aeabi_dadd+0x26e>
 8001226:	2f1f      	cmp	r7, #31
 8001228:	dc00      	bgt.n	800122c <__aeabi_dadd+0x19c>
 800122a:	e16e      	b.n	800150a <__aeabi_dadd+0x47a>
 800122c:	003a      	movs	r2, r7
 800122e:	4648      	mov	r0, r9
 8001230:	3a20      	subs	r2, #32
 8001232:	40d0      	lsrs	r0, r2
 8001234:	4684      	mov	ip, r0
 8001236:	2f20      	cmp	r7, #32
 8001238:	d007      	beq.n	800124a <__aeabi_dadd+0x1ba>
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	4648      	mov	r0, r9
 800123e:	1bd2      	subs	r2, r2, r7
 8001240:	4090      	lsls	r0, r2
 8001242:	0002      	movs	r2, r0
 8001244:	4640      	mov	r0, r8
 8001246:	4310      	orrs	r0, r2
 8001248:	4680      	mov	r8, r0
 800124a:	4640      	mov	r0, r8
 800124c:	1e42      	subs	r2, r0, #1
 800124e:	4190      	sbcs	r0, r2
 8001250:	4662      	mov	r2, ip
 8001252:	0004      	movs	r4, r0
 8001254:	4314      	orrs	r4, r2
 8001256:	e057      	b.n	8001308 <__aeabi_dadd+0x278>
 8001258:	464a      	mov	r2, r9
 800125a:	4302      	orrs	r2, r0
 800125c:	d100      	bne.n	8001260 <__aeabi_dadd+0x1d0>
 800125e:	e103      	b.n	8001468 <__aeabi_dadd+0x3d8>
 8001260:	1e7a      	subs	r2, r7, #1
 8001262:	2f01      	cmp	r7, #1
 8001264:	d100      	bne.n	8001268 <__aeabi_dadd+0x1d8>
 8001266:	e193      	b.n	8001590 <__aeabi_dadd+0x500>
 8001268:	4c64      	ldr	r4, [pc, #400]	; (80013fc <__aeabi_dadd+0x36c>)
 800126a:	42a7      	cmp	r7, r4
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x1e0>
 800126e:	e18a      	b.n	8001586 <__aeabi_dadd+0x4f6>
 8001270:	0017      	movs	r7, r2
 8001272:	e73b      	b.n	80010ec <__aeabi_dadd+0x5c>
 8001274:	4c63      	ldr	r4, [pc, #396]	; (8001404 <__aeabi_dadd+0x374>)
 8001276:	1c72      	adds	r2, r6, #1
 8001278:	4222      	tst	r2, r4
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x1ee>
 800127c:	e0e0      	b.n	8001440 <__aeabi_dadd+0x3b0>
 800127e:	000a      	movs	r2, r1
 8001280:	431a      	orrs	r2, r3
 8001282:	2e00      	cmp	r6, #0
 8001284:	d000      	beq.n	8001288 <__aeabi_dadd+0x1f8>
 8001286:	e174      	b.n	8001572 <__aeabi_dadd+0x4e2>
 8001288:	2a00      	cmp	r2, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x1fe>
 800128c:	e1d0      	b.n	8001630 <__aeabi_dadd+0x5a0>
 800128e:	464a      	mov	r2, r9
 8001290:	4302      	orrs	r2, r0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x206>
 8001294:	e1e3      	b.n	800165e <__aeabi_dadd+0x5ce>
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	4313      	orrs	r3, r2
 800129c:	08c9      	lsrs	r1, r1, #3
 800129e:	e029      	b.n	80012f4 <__aeabi_dadd+0x264>
 80012a0:	464a      	mov	r2, r9
 80012a2:	4302      	orrs	r2, r0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dadd+0x218>
 80012a6:	e17d      	b.n	80015a4 <__aeabi_dadd+0x514>
 80012a8:	1e7a      	subs	r2, r7, #1
 80012aa:	2f01      	cmp	r7, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dadd+0x220>
 80012ae:	e0e0      	b.n	8001472 <__aeabi_dadd+0x3e2>
 80012b0:	4c52      	ldr	r4, [pc, #328]	; (80013fc <__aeabi_dadd+0x36c>)
 80012b2:	42a7      	cmp	r7, r4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x228>
 80012b6:	e166      	b.n	8001586 <__aeabi_dadd+0x4f6>
 80012b8:	0017      	movs	r7, r2
 80012ba:	e7b2      	b.n	8001222 <__aeabi_dadd+0x192>
 80012bc:	0010      	movs	r0, r2
 80012be:	3b1f      	subs	r3, #31
 80012c0:	40d8      	lsrs	r0, r3
 80012c2:	2920      	cmp	r1, #32
 80012c4:	d003      	beq.n	80012ce <__aeabi_dadd+0x23e>
 80012c6:	2340      	movs	r3, #64	; 0x40
 80012c8:	1a5b      	subs	r3, r3, r1
 80012ca:	409a      	lsls	r2, r3
 80012cc:	4314      	orrs	r4, r2
 80012ce:	1e63      	subs	r3, r4, #1
 80012d0:	419c      	sbcs	r4, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	2600      	movs	r6, #0
 80012d6:	469a      	mov	sl, r3
 80012d8:	4304      	orrs	r4, r0
 80012da:	0763      	lsls	r3, r4, #29
 80012dc:	d000      	beq.n	80012e0 <__aeabi_dadd+0x250>
 80012de:	e755      	b.n	800118c <__aeabi_dadd+0xfc>
 80012e0:	4652      	mov	r2, sl
 80012e2:	08e3      	lsrs	r3, r4, #3
 80012e4:	0752      	lsls	r2, r2, #29
 80012e6:	4313      	orrs	r3, r2
 80012e8:	4652      	mov	r2, sl
 80012ea:	0037      	movs	r7, r6
 80012ec:	08d1      	lsrs	r1, r2, #3
 80012ee:	4a43      	ldr	r2, [pc, #268]	; (80013fc <__aeabi_dadd+0x36c>)
 80012f0:	4297      	cmp	r7, r2
 80012f2:	d01f      	beq.n	8001334 <__aeabi_dadd+0x2a4>
 80012f4:	0309      	lsls	r1, r1, #12
 80012f6:	057a      	lsls	r2, r7, #21
 80012f8:	0b0c      	lsrs	r4, r1, #12
 80012fa:	0d52      	lsrs	r2, r2, #21
 80012fc:	e764      	b.n	80011c8 <__aeabi_dadd+0x138>
 80012fe:	4642      	mov	r2, r8
 8001300:	464c      	mov	r4, r9
 8001302:	4314      	orrs	r4, r2
 8001304:	1e62      	subs	r2, r4, #1
 8001306:	4194      	sbcs	r4, r2
 8001308:	18e4      	adds	r4, r4, r3
 800130a:	429c      	cmp	r4, r3
 800130c:	4192      	sbcs	r2, r2
 800130e:	4252      	negs	r2, r2
 8001310:	4692      	mov	sl, r2
 8001312:	448a      	add	sl, r1
 8001314:	4653      	mov	r3, sl
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	d5df      	bpl.n	80012da <__aeabi_dadd+0x24a>
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <__aeabi_dadd+0x36c>)
 800131c:	3601      	adds	r6, #1
 800131e:	429e      	cmp	r6, r3
 8001320:	d000      	beq.n	8001324 <__aeabi_dadd+0x294>
 8001322:	e0b3      	b.n	800148c <__aeabi_dadd+0x3fc>
 8001324:	0032      	movs	r2, r6
 8001326:	2400      	movs	r4, #0
 8001328:	2300      	movs	r3, #0
 800132a:	e74d      	b.n	80011c8 <__aeabi_dadd+0x138>
 800132c:	074a      	lsls	r2, r1, #29
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	4313      	orrs	r3, r2
 8001332:	08c9      	lsrs	r1, r1, #3
 8001334:	001a      	movs	r2, r3
 8001336:	430a      	orrs	r2, r1
 8001338:	d100      	bne.n	800133c <__aeabi_dadd+0x2ac>
 800133a:	e200      	b.n	800173e <__aeabi_dadd+0x6ae>
 800133c:	2480      	movs	r4, #128	; 0x80
 800133e:	0324      	lsls	r4, r4, #12
 8001340:	430c      	orrs	r4, r1
 8001342:	0324      	lsls	r4, r4, #12
 8001344:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <__aeabi_dadd+0x36c>)
 8001346:	0b24      	lsrs	r4, r4, #12
 8001348:	e73e      	b.n	80011c8 <__aeabi_dadd+0x138>
 800134a:	0020      	movs	r0, r4
 800134c:	f001 fdb6 	bl	8002ebc <__clzsi2>
 8001350:	0003      	movs	r3, r0
 8001352:	3318      	adds	r3, #24
 8001354:	2b1f      	cmp	r3, #31
 8001356:	dc00      	bgt.n	800135a <__aeabi_dadd+0x2ca>
 8001358:	e6f7      	b.n	800114a <__aeabi_dadd+0xba>
 800135a:	0022      	movs	r2, r4
 800135c:	3808      	subs	r0, #8
 800135e:	4082      	lsls	r2, r0
 8001360:	2400      	movs	r4, #0
 8001362:	42b3      	cmp	r3, r6
 8001364:	db00      	blt.n	8001368 <__aeabi_dadd+0x2d8>
 8001366:	e6fc      	b.n	8001162 <__aeabi_dadd+0xd2>
 8001368:	1af6      	subs	r6, r6, r3
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <__aeabi_dadd+0x370>)
 800136c:	401a      	ands	r2, r3
 800136e:	4692      	mov	sl, r2
 8001370:	e70a      	b.n	8001188 <__aeabi_dadd+0xf8>
 8001372:	2f00      	cmp	r7, #0
 8001374:	d02b      	beq.n	80013ce <__aeabi_dadd+0x33e>
 8001376:	1b97      	subs	r7, r2, r6
 8001378:	2e00      	cmp	r6, #0
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x2ee>
 800137c:	e0b8      	b.n	80014f0 <__aeabi_dadd+0x460>
 800137e:	4c1f      	ldr	r4, [pc, #124]	; (80013fc <__aeabi_dadd+0x36c>)
 8001380:	42a2      	cmp	r2, r4
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x2f6>
 8001384:	e11c      	b.n	80015c0 <__aeabi_dadd+0x530>
 8001386:	2480      	movs	r4, #128	; 0x80
 8001388:	0424      	lsls	r4, r4, #16
 800138a:	4321      	orrs	r1, r4
 800138c:	2f38      	cmp	r7, #56	; 0x38
 800138e:	dd00      	ble.n	8001392 <__aeabi_dadd+0x302>
 8001390:	e11e      	b.n	80015d0 <__aeabi_dadd+0x540>
 8001392:	2f1f      	cmp	r7, #31
 8001394:	dd00      	ble.n	8001398 <__aeabi_dadd+0x308>
 8001396:	e19e      	b.n	80016d6 <__aeabi_dadd+0x646>
 8001398:	2620      	movs	r6, #32
 800139a:	000c      	movs	r4, r1
 800139c:	1bf6      	subs	r6, r6, r7
 800139e:	0018      	movs	r0, r3
 80013a0:	40b3      	lsls	r3, r6
 80013a2:	40b4      	lsls	r4, r6
 80013a4:	40f8      	lsrs	r0, r7
 80013a6:	1e5e      	subs	r6, r3, #1
 80013a8:	41b3      	sbcs	r3, r6
 80013aa:	40f9      	lsrs	r1, r7
 80013ac:	4304      	orrs	r4, r0
 80013ae:	431c      	orrs	r4, r3
 80013b0:	4489      	add	r9, r1
 80013b2:	4444      	add	r4, r8
 80013b4:	4544      	cmp	r4, r8
 80013b6:	419b      	sbcs	r3, r3
 80013b8:	425b      	negs	r3, r3
 80013ba:	444b      	add	r3, r9
 80013bc:	469a      	mov	sl, r3
 80013be:	0016      	movs	r6, r2
 80013c0:	e7a8      	b.n	8001314 <__aeabi_dadd+0x284>
 80013c2:	4642      	mov	r2, r8
 80013c4:	464c      	mov	r4, r9
 80013c6:	4314      	orrs	r4, r2
 80013c8:	1e62      	subs	r2, r4, #1
 80013ca:	4194      	sbcs	r4, r2
 80013cc:	e6a6      	b.n	800111c <__aeabi_dadd+0x8c>
 80013ce:	4c0d      	ldr	r4, [pc, #52]	; (8001404 <__aeabi_dadd+0x374>)
 80013d0:	1c72      	adds	r2, r6, #1
 80013d2:	4222      	tst	r2, r4
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dadd+0x348>
 80013d6:	e0a8      	b.n	800152a <__aeabi_dadd+0x49a>
 80013d8:	000a      	movs	r2, r1
 80013da:	431a      	orrs	r2, r3
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d000      	beq.n	80013e2 <__aeabi_dadd+0x352>
 80013e0:	e10a      	b.n	80015f8 <__aeabi_dadd+0x568>
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dadd+0x358>
 80013e6:	e15e      	b.n	80016a6 <__aeabi_dadd+0x616>
 80013e8:	464a      	mov	r2, r9
 80013ea:	4302      	orrs	r2, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dadd+0x360>
 80013ee:	e161      	b.n	80016b4 <__aeabi_dadd+0x624>
 80013f0:	074a      	lsls	r2, r1, #29
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	08c9      	lsrs	r1, r1, #3
 80013f8:	e77c      	b.n	80012f4 <__aeabi_dadd+0x264>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff
 8001404:	000007fe 	.word	0x000007fe
 8001408:	4ccf      	ldr	r4, [pc, #828]	; (8001748 <__aeabi_dadd+0x6b8>)
 800140a:	42a2      	cmp	r2, r4
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x380>
 800140e:	e0ce      	b.n	80015ae <__aeabi_dadd+0x51e>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	0424      	lsls	r4, r4, #16
 8001414:	4321      	orrs	r1, r4
 8001416:	2f38      	cmp	r7, #56	; 0x38
 8001418:	dc5b      	bgt.n	80014d2 <__aeabi_dadd+0x442>
 800141a:	2f1f      	cmp	r7, #31
 800141c:	dd00      	ble.n	8001420 <__aeabi_dadd+0x390>
 800141e:	e0dc      	b.n	80015da <__aeabi_dadd+0x54a>
 8001420:	2520      	movs	r5, #32
 8001422:	000c      	movs	r4, r1
 8001424:	1bed      	subs	r5, r5, r7
 8001426:	001e      	movs	r6, r3
 8001428:	40ab      	lsls	r3, r5
 800142a:	40ac      	lsls	r4, r5
 800142c:	40fe      	lsrs	r6, r7
 800142e:	1e5d      	subs	r5, r3, #1
 8001430:	41ab      	sbcs	r3, r5
 8001432:	4334      	orrs	r4, r6
 8001434:	40f9      	lsrs	r1, r7
 8001436:	431c      	orrs	r4, r3
 8001438:	464b      	mov	r3, r9
 800143a:	1a5b      	subs	r3, r3, r1
 800143c:	4699      	mov	r9, r3
 800143e:	e04c      	b.n	80014da <__aeabi_dadd+0x44a>
 8001440:	464a      	mov	r2, r9
 8001442:	1a1c      	subs	r4, r3, r0
 8001444:	1a88      	subs	r0, r1, r2
 8001446:	42a3      	cmp	r3, r4
 8001448:	4192      	sbcs	r2, r2
 800144a:	4252      	negs	r2, r2
 800144c:	4692      	mov	sl, r2
 800144e:	0002      	movs	r2, r0
 8001450:	4650      	mov	r0, sl
 8001452:	1a12      	subs	r2, r2, r0
 8001454:	4692      	mov	sl, r2
 8001456:	0212      	lsls	r2, r2, #8
 8001458:	d478      	bmi.n	800154c <__aeabi_dadd+0x4bc>
 800145a:	4653      	mov	r3, sl
 800145c:	4323      	orrs	r3, r4
 800145e:	d000      	beq.n	8001462 <__aeabi_dadd+0x3d2>
 8001460:	e66a      	b.n	8001138 <__aeabi_dadd+0xa8>
 8001462:	2100      	movs	r1, #0
 8001464:	2500      	movs	r5, #0
 8001466:	e745      	b.n	80012f4 <__aeabi_dadd+0x264>
 8001468:	074a      	lsls	r2, r1, #29
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	4313      	orrs	r3, r2
 800146e:	08c9      	lsrs	r1, r1, #3
 8001470:	e73d      	b.n	80012ee <__aeabi_dadd+0x25e>
 8001472:	181c      	adds	r4, r3, r0
 8001474:	429c      	cmp	r4, r3
 8001476:	419b      	sbcs	r3, r3
 8001478:	4449      	add	r1, r9
 800147a:	468a      	mov	sl, r1
 800147c:	425b      	negs	r3, r3
 800147e:	449a      	add	sl, r3
 8001480:	4653      	mov	r3, sl
 8001482:	2601      	movs	r6, #1
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	d400      	bmi.n	800148a <__aeabi_dadd+0x3fa>
 8001488:	e727      	b.n	80012da <__aeabi_dadd+0x24a>
 800148a:	2602      	movs	r6, #2
 800148c:	4652      	mov	r2, sl
 800148e:	4baf      	ldr	r3, [pc, #700]	; (800174c <__aeabi_dadd+0x6bc>)
 8001490:	2101      	movs	r1, #1
 8001492:	401a      	ands	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	4021      	ands	r1, r4
 8001498:	0862      	lsrs	r2, r4, #1
 800149a:	430a      	orrs	r2, r1
 800149c:	07dc      	lsls	r4, r3, #31
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	469a      	mov	sl, r3
 80014a2:	4314      	orrs	r4, r2
 80014a4:	e670      	b.n	8001188 <__aeabi_dadd+0xf8>
 80014a6:	003a      	movs	r2, r7
 80014a8:	464c      	mov	r4, r9
 80014aa:	3a20      	subs	r2, #32
 80014ac:	40d4      	lsrs	r4, r2
 80014ae:	46a4      	mov	ip, r4
 80014b0:	2f20      	cmp	r7, #32
 80014b2:	d007      	beq.n	80014c4 <__aeabi_dadd+0x434>
 80014b4:	2240      	movs	r2, #64	; 0x40
 80014b6:	4648      	mov	r0, r9
 80014b8:	1bd2      	subs	r2, r2, r7
 80014ba:	4090      	lsls	r0, r2
 80014bc:	0002      	movs	r2, r0
 80014be:	4640      	mov	r0, r8
 80014c0:	4310      	orrs	r0, r2
 80014c2:	4680      	mov	r8, r0
 80014c4:	4640      	mov	r0, r8
 80014c6:	1e42      	subs	r2, r0, #1
 80014c8:	4190      	sbcs	r0, r2
 80014ca:	4662      	mov	r2, ip
 80014cc:	0004      	movs	r4, r0
 80014ce:	4314      	orrs	r4, r2
 80014d0:	e624      	b.n	800111c <__aeabi_dadd+0x8c>
 80014d2:	4319      	orrs	r1, r3
 80014d4:	000c      	movs	r4, r1
 80014d6:	1e63      	subs	r3, r4, #1
 80014d8:	419c      	sbcs	r4, r3
 80014da:	4643      	mov	r3, r8
 80014dc:	1b1c      	subs	r4, r3, r4
 80014de:	45a0      	cmp	r8, r4
 80014e0:	419b      	sbcs	r3, r3
 80014e2:	4649      	mov	r1, r9
 80014e4:	425b      	negs	r3, r3
 80014e6:	1acb      	subs	r3, r1, r3
 80014e8:	469a      	mov	sl, r3
 80014ea:	4665      	mov	r5, ip
 80014ec:	0016      	movs	r6, r2
 80014ee:	e61b      	b.n	8001128 <__aeabi_dadd+0x98>
 80014f0:	000c      	movs	r4, r1
 80014f2:	431c      	orrs	r4, r3
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x468>
 80014f6:	e0c7      	b.n	8001688 <__aeabi_dadd+0x5f8>
 80014f8:	1e7c      	subs	r4, r7, #1
 80014fa:	2f01      	cmp	r7, #1
 80014fc:	d100      	bne.n	8001500 <__aeabi_dadd+0x470>
 80014fe:	e0f9      	b.n	80016f4 <__aeabi_dadd+0x664>
 8001500:	4e91      	ldr	r6, [pc, #580]	; (8001748 <__aeabi_dadd+0x6b8>)
 8001502:	42b7      	cmp	r7, r6
 8001504:	d05c      	beq.n	80015c0 <__aeabi_dadd+0x530>
 8001506:	0027      	movs	r7, r4
 8001508:	e740      	b.n	800138c <__aeabi_dadd+0x2fc>
 800150a:	2220      	movs	r2, #32
 800150c:	464c      	mov	r4, r9
 800150e:	4640      	mov	r0, r8
 8001510:	1bd2      	subs	r2, r2, r7
 8001512:	4094      	lsls	r4, r2
 8001514:	40f8      	lsrs	r0, r7
 8001516:	4304      	orrs	r4, r0
 8001518:	4640      	mov	r0, r8
 800151a:	4090      	lsls	r0, r2
 800151c:	1e42      	subs	r2, r0, #1
 800151e:	4190      	sbcs	r0, r2
 8001520:	464a      	mov	r2, r9
 8001522:	40fa      	lsrs	r2, r7
 8001524:	4304      	orrs	r4, r0
 8001526:	1889      	adds	r1, r1, r2
 8001528:	e6ee      	b.n	8001308 <__aeabi_dadd+0x278>
 800152a:	4c87      	ldr	r4, [pc, #540]	; (8001748 <__aeabi_dadd+0x6b8>)
 800152c:	42a2      	cmp	r2, r4
 800152e:	d100      	bne.n	8001532 <__aeabi_dadd+0x4a2>
 8001530:	e6f9      	b.n	8001326 <__aeabi_dadd+0x296>
 8001532:	1818      	adds	r0, r3, r0
 8001534:	4298      	cmp	r0, r3
 8001536:	419b      	sbcs	r3, r3
 8001538:	4449      	add	r1, r9
 800153a:	425b      	negs	r3, r3
 800153c:	18cb      	adds	r3, r1, r3
 800153e:	07dc      	lsls	r4, r3, #31
 8001540:	0840      	lsrs	r0, r0, #1
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	469a      	mov	sl, r3
 8001546:	0016      	movs	r6, r2
 8001548:	4304      	orrs	r4, r0
 800154a:	e6c6      	b.n	80012da <__aeabi_dadd+0x24a>
 800154c:	4642      	mov	r2, r8
 800154e:	1ad4      	subs	r4, r2, r3
 8001550:	45a0      	cmp	r8, r4
 8001552:	4180      	sbcs	r0, r0
 8001554:	464b      	mov	r3, r9
 8001556:	4240      	negs	r0, r0
 8001558:	1a59      	subs	r1, r3, r1
 800155a:	1a0b      	subs	r3, r1, r0
 800155c:	469a      	mov	sl, r3
 800155e:	4665      	mov	r5, ip
 8001560:	e5ea      	b.n	8001138 <__aeabi_dadd+0xa8>
 8001562:	464b      	mov	r3, r9
 8001564:	464a      	mov	r2, r9
 8001566:	08c0      	lsrs	r0, r0, #3
 8001568:	075b      	lsls	r3, r3, #29
 800156a:	4665      	mov	r5, ip
 800156c:	4303      	orrs	r3, r0
 800156e:	08d1      	lsrs	r1, r2, #3
 8001570:	e6bd      	b.n	80012ee <__aeabi_dadd+0x25e>
 8001572:	2a00      	cmp	r2, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_dadd+0x4e8>
 8001576:	e08e      	b.n	8001696 <__aeabi_dadd+0x606>
 8001578:	464b      	mov	r3, r9
 800157a:	4303      	orrs	r3, r0
 800157c:	d117      	bne.n	80015ae <__aeabi_dadd+0x51e>
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	2500      	movs	r5, #0
 8001582:	0309      	lsls	r1, r1, #12
 8001584:	e6da      	b.n	800133c <__aeabi_dadd+0x2ac>
 8001586:	074a      	lsls	r2, r1, #29
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	08c9      	lsrs	r1, r1, #3
 800158e:	e6d1      	b.n	8001334 <__aeabi_dadd+0x2a4>
 8001590:	1a1c      	subs	r4, r3, r0
 8001592:	464a      	mov	r2, r9
 8001594:	42a3      	cmp	r3, r4
 8001596:	419b      	sbcs	r3, r3
 8001598:	1a89      	subs	r1, r1, r2
 800159a:	425b      	negs	r3, r3
 800159c:	1acb      	subs	r3, r1, r3
 800159e:	469a      	mov	sl, r3
 80015a0:	2601      	movs	r6, #1
 80015a2:	e5c1      	b.n	8001128 <__aeabi_dadd+0x98>
 80015a4:	074a      	lsls	r2, r1, #29
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	08c9      	lsrs	r1, r1, #3
 80015ac:	e69f      	b.n	80012ee <__aeabi_dadd+0x25e>
 80015ae:	4643      	mov	r3, r8
 80015b0:	08d8      	lsrs	r0, r3, #3
 80015b2:	464b      	mov	r3, r9
 80015b4:	464a      	mov	r2, r9
 80015b6:	075b      	lsls	r3, r3, #29
 80015b8:	4665      	mov	r5, ip
 80015ba:	4303      	orrs	r3, r0
 80015bc:	08d1      	lsrs	r1, r2, #3
 80015be:	e6b9      	b.n	8001334 <__aeabi_dadd+0x2a4>
 80015c0:	4643      	mov	r3, r8
 80015c2:	08d8      	lsrs	r0, r3, #3
 80015c4:	464b      	mov	r3, r9
 80015c6:	464a      	mov	r2, r9
 80015c8:	075b      	lsls	r3, r3, #29
 80015ca:	4303      	orrs	r3, r0
 80015cc:	08d1      	lsrs	r1, r2, #3
 80015ce:	e6b1      	b.n	8001334 <__aeabi_dadd+0x2a4>
 80015d0:	4319      	orrs	r1, r3
 80015d2:	000c      	movs	r4, r1
 80015d4:	1e63      	subs	r3, r4, #1
 80015d6:	419c      	sbcs	r4, r3
 80015d8:	e6eb      	b.n	80013b2 <__aeabi_dadd+0x322>
 80015da:	003c      	movs	r4, r7
 80015dc:	000d      	movs	r5, r1
 80015de:	3c20      	subs	r4, #32
 80015e0:	40e5      	lsrs	r5, r4
 80015e2:	2f20      	cmp	r7, #32
 80015e4:	d003      	beq.n	80015ee <__aeabi_dadd+0x55e>
 80015e6:	2440      	movs	r4, #64	; 0x40
 80015e8:	1be4      	subs	r4, r4, r7
 80015ea:	40a1      	lsls	r1, r4
 80015ec:	430b      	orrs	r3, r1
 80015ee:	001c      	movs	r4, r3
 80015f0:	1e63      	subs	r3, r4, #1
 80015f2:	419c      	sbcs	r4, r3
 80015f4:	432c      	orrs	r4, r5
 80015f6:	e770      	b.n	80014da <__aeabi_dadd+0x44a>
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	d0e1      	beq.n	80015c0 <__aeabi_dadd+0x530>
 80015fc:	464a      	mov	r2, r9
 80015fe:	4302      	orrs	r2, r0
 8001600:	d0c1      	beq.n	8001586 <__aeabi_dadd+0x4f6>
 8001602:	074a      	lsls	r2, r1, #29
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	08c9      	lsrs	r1, r1, #3
 800160c:	0312      	lsls	r2, r2, #12
 800160e:	4211      	tst	r1, r2
 8001610:	d008      	beq.n	8001624 <__aeabi_dadd+0x594>
 8001612:	4648      	mov	r0, r9
 8001614:	08c4      	lsrs	r4, r0, #3
 8001616:	4214      	tst	r4, r2
 8001618:	d104      	bne.n	8001624 <__aeabi_dadd+0x594>
 800161a:	4643      	mov	r3, r8
 800161c:	0021      	movs	r1, r4
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	0742      	lsls	r2, r0, #29
 8001622:	4313      	orrs	r3, r2
 8001624:	0f5a      	lsrs	r2, r3, #29
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	0752      	lsls	r2, r2, #29
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	4313      	orrs	r3, r2
 800162e:	e681      	b.n	8001334 <__aeabi_dadd+0x2a4>
 8001630:	464b      	mov	r3, r9
 8001632:	4303      	orrs	r3, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x5a8>
 8001636:	e714      	b.n	8001462 <__aeabi_dadd+0x3d2>
 8001638:	464b      	mov	r3, r9
 800163a:	464a      	mov	r2, r9
 800163c:	08c0      	lsrs	r0, r0, #3
 800163e:	075b      	lsls	r3, r3, #29
 8001640:	4665      	mov	r5, ip
 8001642:	4303      	orrs	r3, r0
 8001644:	08d1      	lsrs	r1, r2, #3
 8001646:	e655      	b.n	80012f4 <__aeabi_dadd+0x264>
 8001648:	1ac4      	subs	r4, r0, r3
 800164a:	45a0      	cmp	r8, r4
 800164c:	4180      	sbcs	r0, r0
 800164e:	464b      	mov	r3, r9
 8001650:	4240      	negs	r0, r0
 8001652:	1a59      	subs	r1, r3, r1
 8001654:	1a0b      	subs	r3, r1, r0
 8001656:	469a      	mov	sl, r3
 8001658:	4665      	mov	r5, ip
 800165a:	2601      	movs	r6, #1
 800165c:	e564      	b.n	8001128 <__aeabi_dadd+0x98>
 800165e:	1a1c      	subs	r4, r3, r0
 8001660:	464a      	mov	r2, r9
 8001662:	42a3      	cmp	r3, r4
 8001664:	4180      	sbcs	r0, r0
 8001666:	1a8a      	subs	r2, r1, r2
 8001668:	4240      	negs	r0, r0
 800166a:	1a12      	subs	r2, r2, r0
 800166c:	4692      	mov	sl, r2
 800166e:	0212      	lsls	r2, r2, #8
 8001670:	d549      	bpl.n	8001706 <__aeabi_dadd+0x676>
 8001672:	4642      	mov	r2, r8
 8001674:	1ad4      	subs	r4, r2, r3
 8001676:	45a0      	cmp	r8, r4
 8001678:	4180      	sbcs	r0, r0
 800167a:	464b      	mov	r3, r9
 800167c:	4240      	negs	r0, r0
 800167e:	1a59      	subs	r1, r3, r1
 8001680:	1a0b      	subs	r3, r1, r0
 8001682:	469a      	mov	sl, r3
 8001684:	4665      	mov	r5, ip
 8001686:	e57f      	b.n	8001188 <__aeabi_dadd+0xf8>
 8001688:	464b      	mov	r3, r9
 800168a:	464a      	mov	r2, r9
 800168c:	08c0      	lsrs	r0, r0, #3
 800168e:	075b      	lsls	r3, r3, #29
 8001690:	4303      	orrs	r3, r0
 8001692:	08d1      	lsrs	r1, r2, #3
 8001694:	e62b      	b.n	80012ee <__aeabi_dadd+0x25e>
 8001696:	464a      	mov	r2, r9
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	4302      	orrs	r2, r0
 800169c:	d138      	bne.n	8001710 <__aeabi_dadd+0x680>
 800169e:	074a      	lsls	r2, r1, #29
 80016a0:	4313      	orrs	r3, r2
 80016a2:	08c9      	lsrs	r1, r1, #3
 80016a4:	e646      	b.n	8001334 <__aeabi_dadd+0x2a4>
 80016a6:	464b      	mov	r3, r9
 80016a8:	464a      	mov	r2, r9
 80016aa:	08c0      	lsrs	r0, r0, #3
 80016ac:	075b      	lsls	r3, r3, #29
 80016ae:	4303      	orrs	r3, r0
 80016b0:	08d1      	lsrs	r1, r2, #3
 80016b2:	e61f      	b.n	80012f4 <__aeabi_dadd+0x264>
 80016b4:	181c      	adds	r4, r3, r0
 80016b6:	429c      	cmp	r4, r3
 80016b8:	419b      	sbcs	r3, r3
 80016ba:	4449      	add	r1, r9
 80016bc:	468a      	mov	sl, r1
 80016be:	425b      	negs	r3, r3
 80016c0:	449a      	add	sl, r3
 80016c2:	4653      	mov	r3, sl
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	d400      	bmi.n	80016ca <__aeabi_dadd+0x63a>
 80016c8:	e607      	b.n	80012da <__aeabi_dadd+0x24a>
 80016ca:	4652      	mov	r2, sl
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <__aeabi_dadd+0x6bc>)
 80016ce:	2601      	movs	r6, #1
 80016d0:	401a      	ands	r2, r3
 80016d2:	4692      	mov	sl, r2
 80016d4:	e601      	b.n	80012da <__aeabi_dadd+0x24a>
 80016d6:	003c      	movs	r4, r7
 80016d8:	000e      	movs	r6, r1
 80016da:	3c20      	subs	r4, #32
 80016dc:	40e6      	lsrs	r6, r4
 80016de:	2f20      	cmp	r7, #32
 80016e0:	d003      	beq.n	80016ea <__aeabi_dadd+0x65a>
 80016e2:	2440      	movs	r4, #64	; 0x40
 80016e4:	1be4      	subs	r4, r4, r7
 80016e6:	40a1      	lsls	r1, r4
 80016e8:	430b      	orrs	r3, r1
 80016ea:	001c      	movs	r4, r3
 80016ec:	1e63      	subs	r3, r4, #1
 80016ee:	419c      	sbcs	r4, r3
 80016f0:	4334      	orrs	r4, r6
 80016f2:	e65e      	b.n	80013b2 <__aeabi_dadd+0x322>
 80016f4:	4443      	add	r3, r8
 80016f6:	4283      	cmp	r3, r0
 80016f8:	4180      	sbcs	r0, r0
 80016fa:	4449      	add	r1, r9
 80016fc:	468a      	mov	sl, r1
 80016fe:	4240      	negs	r0, r0
 8001700:	001c      	movs	r4, r3
 8001702:	4482      	add	sl, r0
 8001704:	e6bc      	b.n	8001480 <__aeabi_dadd+0x3f0>
 8001706:	4653      	mov	r3, sl
 8001708:	4323      	orrs	r3, r4
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x67e>
 800170c:	e6a9      	b.n	8001462 <__aeabi_dadd+0x3d2>
 800170e:	e5e4      	b.n	80012da <__aeabi_dadd+0x24a>
 8001710:	074a      	lsls	r2, r1, #29
 8001712:	4313      	orrs	r3, r2
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	08c9      	lsrs	r1, r1, #3
 8001718:	0312      	lsls	r2, r2, #12
 800171a:	4211      	tst	r1, r2
 800171c:	d009      	beq.n	8001732 <__aeabi_dadd+0x6a2>
 800171e:	4648      	mov	r0, r9
 8001720:	08c4      	lsrs	r4, r0, #3
 8001722:	4214      	tst	r4, r2
 8001724:	d105      	bne.n	8001732 <__aeabi_dadd+0x6a2>
 8001726:	4643      	mov	r3, r8
 8001728:	4665      	mov	r5, ip
 800172a:	0021      	movs	r1, r4
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	0742      	lsls	r2, r0, #29
 8001730:	4313      	orrs	r3, r2
 8001732:	0f5a      	lsrs	r2, r3, #29
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	0752      	lsls	r2, r2, #29
 800173a:	4313      	orrs	r3, r2
 800173c:	e5fa      	b.n	8001334 <__aeabi_dadd+0x2a4>
 800173e:	2300      	movs	r3, #0
 8001740:	4a01      	ldr	r2, [pc, #4]	; (8001748 <__aeabi_dadd+0x6b8>)
 8001742:	001c      	movs	r4, r3
 8001744:	e540      	b.n	80011c8 <__aeabi_dadd+0x138>
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	000007ff 	.word	0x000007ff
 800174c:	ff7fffff 	.word	0xff7fffff

08001750 <__aeabi_ddiv>:
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	4657      	mov	r7, sl
 8001754:	464e      	mov	r6, r9
 8001756:	4645      	mov	r5, r8
 8001758:	46de      	mov	lr, fp
 800175a:	b5e0      	push	{r5, r6, r7, lr}
 800175c:	030c      	lsls	r4, r1, #12
 800175e:	001f      	movs	r7, r3
 8001760:	004b      	lsls	r3, r1, #1
 8001762:	4681      	mov	r9, r0
 8001764:	4692      	mov	sl, r2
 8001766:	0005      	movs	r5, r0
 8001768:	b085      	sub	sp, #20
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	0d5b      	lsrs	r3, r3, #21
 800176e:	0fce      	lsrs	r6, r1, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0x26>
 8001774:	e152      	b.n	8001a1c <__aeabi_ddiv+0x2cc>
 8001776:	4ad2      	ldr	r2, [pc, #840]	; (8001ac0 <__aeabi_ddiv+0x370>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d100      	bne.n	800177e <__aeabi_ddiv+0x2e>
 800177c:	e16e      	b.n	8001a5c <__aeabi_ddiv+0x30c>
 800177e:	0f42      	lsrs	r2, r0, #29
 8001780:	00e4      	lsls	r4, r4, #3
 8001782:	4314      	orrs	r4, r2
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0412      	lsls	r2, r2, #16
 8001788:	4322      	orrs	r2, r4
 800178a:	4690      	mov	r8, r2
 800178c:	4acd      	ldr	r2, [pc, #820]	; (8001ac4 <__aeabi_ddiv+0x374>)
 800178e:	00c5      	lsls	r5, r0, #3
 8001790:	4693      	mov	fp, r2
 8001792:	449b      	add	fp, r3
 8001794:	2300      	movs	r3, #0
 8001796:	4699      	mov	r9, r3
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	033c      	lsls	r4, r7, #12
 800179c:	007b      	lsls	r3, r7, #1
 800179e:	4650      	mov	r0, sl
 80017a0:	0b24      	lsrs	r4, r4, #12
 80017a2:	0d5b      	lsrs	r3, r3, #21
 80017a4:	0fff      	lsrs	r7, r7, #31
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d100      	bne.n	80017ac <__aeabi_ddiv+0x5c>
 80017aa:	e11a      	b.n	80019e2 <__aeabi_ddiv+0x292>
 80017ac:	4ac4      	ldr	r2, [pc, #784]	; (8001ac0 <__aeabi_ddiv+0x370>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d100      	bne.n	80017b4 <__aeabi_ddiv+0x64>
 80017b2:	e15e      	b.n	8001a72 <__aeabi_ddiv+0x322>
 80017b4:	0f42      	lsrs	r2, r0, #29
 80017b6:	00e4      	lsls	r4, r4, #3
 80017b8:	4322      	orrs	r2, r4
 80017ba:	2480      	movs	r4, #128	; 0x80
 80017bc:	0424      	lsls	r4, r4, #16
 80017be:	4314      	orrs	r4, r2
 80017c0:	4ac0      	ldr	r2, [pc, #768]	; (8001ac4 <__aeabi_ddiv+0x374>)
 80017c2:	00c1      	lsls	r1, r0, #3
 80017c4:	4694      	mov	ip, r2
 80017c6:	465a      	mov	r2, fp
 80017c8:	4463      	add	r3, ip
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	469b      	mov	fp, r3
 80017ce:	2000      	movs	r0, #0
 80017d0:	0033      	movs	r3, r6
 80017d2:	407b      	eors	r3, r7
 80017d4:	469a      	mov	sl, r3
 80017d6:	464b      	mov	r3, r9
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d827      	bhi.n	800182c <__aeabi_ddiv+0xdc>
 80017dc:	4aba      	ldr	r2, [pc, #744]	; (8001ac8 <__aeabi_ddiv+0x378>)
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	58d3      	ldr	r3, [r2, r3]
 80017e2:	469f      	mov	pc, r3
 80017e4:	46b2      	mov	sl, r6
 80017e6:	9b00      	ldr	r3, [sp, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d016      	beq.n	800181a <__aeabi_ddiv+0xca>
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0xa2>
 80017f0:	e287      	b.n	8001d02 <__aeabi_ddiv+0x5b2>
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d000      	beq.n	80017f8 <__aeabi_ddiv+0xa8>
 80017f6:	e0d5      	b.n	80019a4 <__aeabi_ddiv+0x254>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2200      	movs	r2, #0
 80017fc:	2500      	movs	r5, #0
 80017fe:	051b      	lsls	r3, r3, #20
 8001800:	4313      	orrs	r3, r2
 8001802:	4652      	mov	r2, sl
 8001804:	07d2      	lsls	r2, r2, #31
 8001806:	4313      	orrs	r3, r2
 8001808:	0028      	movs	r0, r5
 800180a:	0019      	movs	r1, r3
 800180c:	b005      	add	sp, #20
 800180e:	bcf0      	pop	{r4, r5, r6, r7}
 8001810:	46bb      	mov	fp, r7
 8001812:	46b2      	mov	sl, r6
 8001814:	46a9      	mov	r9, r5
 8001816:	46a0      	mov	r8, r4
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181a:	2200      	movs	r2, #0
 800181c:	2500      	movs	r5, #0
 800181e:	4ba8      	ldr	r3, [pc, #672]	; (8001ac0 <__aeabi_ddiv+0x370>)
 8001820:	e7ed      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001822:	46ba      	mov	sl, r7
 8001824:	46a0      	mov	r8, r4
 8001826:	000d      	movs	r5, r1
 8001828:	9000      	str	r0, [sp, #0]
 800182a:	e7dc      	b.n	80017e6 <__aeabi_ddiv+0x96>
 800182c:	4544      	cmp	r4, r8
 800182e:	d200      	bcs.n	8001832 <__aeabi_ddiv+0xe2>
 8001830:	e1c4      	b.n	8001bbc <__aeabi_ddiv+0x46c>
 8001832:	d100      	bne.n	8001836 <__aeabi_ddiv+0xe6>
 8001834:	e1bf      	b.n	8001bb6 <__aeabi_ddiv+0x466>
 8001836:	2301      	movs	r3, #1
 8001838:	425b      	negs	r3, r3
 800183a:	469c      	mov	ip, r3
 800183c:	002e      	movs	r6, r5
 800183e:	4640      	mov	r0, r8
 8001840:	2500      	movs	r5, #0
 8001842:	44e3      	add	fp, ip
 8001844:	0223      	lsls	r3, r4, #8
 8001846:	0e0c      	lsrs	r4, r1, #24
 8001848:	431c      	orrs	r4, r3
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	4699      	mov	r9, r3
 800184e:	0423      	lsls	r3, r4, #16
 8001850:	020a      	lsls	r2, r1, #8
 8001852:	0c1f      	lsrs	r7, r3, #16
 8001854:	4649      	mov	r1, r9
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	9701      	str	r7, [sp, #4]
 800185a:	f7fe fcff 	bl	800025c <__aeabi_uidivmod>
 800185e:	0002      	movs	r2, r0
 8001860:	437a      	muls	r2, r7
 8001862:	040b      	lsls	r3, r1, #16
 8001864:	0c31      	lsrs	r1, r6, #16
 8001866:	4680      	mov	r8, r0
 8001868:	4319      	orrs	r1, r3
 800186a:	428a      	cmp	r2, r1
 800186c:	d907      	bls.n	800187e <__aeabi_ddiv+0x12e>
 800186e:	2301      	movs	r3, #1
 8001870:	425b      	negs	r3, r3
 8001872:	469c      	mov	ip, r3
 8001874:	1909      	adds	r1, r1, r4
 8001876:	44e0      	add	r8, ip
 8001878:	428c      	cmp	r4, r1
 800187a:	d800      	bhi.n	800187e <__aeabi_ddiv+0x12e>
 800187c:	e201      	b.n	8001c82 <__aeabi_ddiv+0x532>
 800187e:	1a88      	subs	r0, r1, r2
 8001880:	4649      	mov	r1, r9
 8001882:	f7fe fceb 	bl	800025c <__aeabi_uidivmod>
 8001886:	9a01      	ldr	r2, [sp, #4]
 8001888:	0436      	lsls	r6, r6, #16
 800188a:	4342      	muls	r2, r0
 800188c:	0409      	lsls	r1, r1, #16
 800188e:	0c36      	lsrs	r6, r6, #16
 8001890:	0003      	movs	r3, r0
 8001892:	430e      	orrs	r6, r1
 8001894:	42b2      	cmp	r2, r6
 8001896:	d904      	bls.n	80018a2 <__aeabi_ddiv+0x152>
 8001898:	1936      	adds	r6, r6, r4
 800189a:	3b01      	subs	r3, #1
 800189c:	42b4      	cmp	r4, r6
 800189e:	d800      	bhi.n	80018a2 <__aeabi_ddiv+0x152>
 80018a0:	e1e9      	b.n	8001c76 <__aeabi_ddiv+0x526>
 80018a2:	1ab0      	subs	r0, r6, r2
 80018a4:	4642      	mov	r2, r8
 80018a6:	9e00      	ldr	r6, [sp, #0]
 80018a8:	0412      	lsls	r2, r2, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	0c33      	lsrs	r3, r6, #16
 80018ae:	001f      	movs	r7, r3
 80018b0:	0c11      	lsrs	r1, r2, #16
 80018b2:	4690      	mov	r8, r2
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	0413      	lsls	r3, r2, #16
 80018b8:	0432      	lsls	r2, r6, #16
 80018ba:	0c16      	lsrs	r6, r2, #16
 80018bc:	0032      	movs	r2, r6
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	435a      	muls	r2, r3
 80018c2:	9603      	str	r6, [sp, #12]
 80018c4:	437b      	muls	r3, r7
 80018c6:	434e      	muls	r6, r1
 80018c8:	4379      	muls	r1, r7
 80018ca:	0c17      	lsrs	r7, r2, #16
 80018cc:	46bc      	mov	ip, r7
 80018ce:	199b      	adds	r3, r3, r6
 80018d0:	4463      	add	r3, ip
 80018d2:	429e      	cmp	r6, r3
 80018d4:	d903      	bls.n	80018de <__aeabi_ddiv+0x18e>
 80018d6:	2680      	movs	r6, #128	; 0x80
 80018d8:	0276      	lsls	r6, r6, #9
 80018da:	46b4      	mov	ip, r6
 80018dc:	4461      	add	r1, ip
 80018de:	0c1e      	lsrs	r6, r3, #16
 80018e0:	1871      	adds	r1, r6, r1
 80018e2:	0416      	lsls	r6, r2, #16
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	0c36      	lsrs	r6, r6, #16
 80018e8:	199e      	adds	r6, r3, r6
 80018ea:	4288      	cmp	r0, r1
 80018ec:	d302      	bcc.n	80018f4 <__aeabi_ddiv+0x1a4>
 80018ee:	d112      	bne.n	8001916 <__aeabi_ddiv+0x1c6>
 80018f0:	42b5      	cmp	r5, r6
 80018f2:	d210      	bcs.n	8001916 <__aeabi_ddiv+0x1c6>
 80018f4:	4643      	mov	r3, r8
 80018f6:	1e5a      	subs	r2, r3, #1
 80018f8:	9b00      	ldr	r3, [sp, #0]
 80018fa:	469c      	mov	ip, r3
 80018fc:	4465      	add	r5, ip
 80018fe:	001f      	movs	r7, r3
 8001900:	429d      	cmp	r5, r3
 8001902:	419b      	sbcs	r3, r3
 8001904:	425b      	negs	r3, r3
 8001906:	191b      	adds	r3, r3, r4
 8001908:	18c0      	adds	r0, r0, r3
 800190a:	4284      	cmp	r4, r0
 800190c:	d200      	bcs.n	8001910 <__aeabi_ddiv+0x1c0>
 800190e:	e19e      	b.n	8001c4e <__aeabi_ddiv+0x4fe>
 8001910:	d100      	bne.n	8001914 <__aeabi_ddiv+0x1c4>
 8001912:	e199      	b.n	8001c48 <__aeabi_ddiv+0x4f8>
 8001914:	4690      	mov	r8, r2
 8001916:	1bae      	subs	r6, r5, r6
 8001918:	42b5      	cmp	r5, r6
 800191a:	41ad      	sbcs	r5, r5
 800191c:	1a40      	subs	r0, r0, r1
 800191e:	426d      	negs	r5, r5
 8001920:	1b40      	subs	r0, r0, r5
 8001922:	4284      	cmp	r4, r0
 8001924:	d100      	bne.n	8001928 <__aeabi_ddiv+0x1d8>
 8001926:	e1d2      	b.n	8001cce <__aeabi_ddiv+0x57e>
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe fc97 	bl	800025c <__aeabi_uidivmod>
 800192e:	9a01      	ldr	r2, [sp, #4]
 8001930:	040b      	lsls	r3, r1, #16
 8001932:	4342      	muls	r2, r0
 8001934:	0c31      	lsrs	r1, r6, #16
 8001936:	0005      	movs	r5, r0
 8001938:	4319      	orrs	r1, r3
 800193a:	428a      	cmp	r2, r1
 800193c:	d900      	bls.n	8001940 <__aeabi_ddiv+0x1f0>
 800193e:	e16c      	b.n	8001c1a <__aeabi_ddiv+0x4ca>
 8001940:	1a88      	subs	r0, r1, r2
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe fc8a 	bl	800025c <__aeabi_uidivmod>
 8001948:	9a01      	ldr	r2, [sp, #4]
 800194a:	0436      	lsls	r6, r6, #16
 800194c:	4342      	muls	r2, r0
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	0c36      	lsrs	r6, r6, #16
 8001952:	0003      	movs	r3, r0
 8001954:	430e      	orrs	r6, r1
 8001956:	42b2      	cmp	r2, r6
 8001958:	d900      	bls.n	800195c <__aeabi_ddiv+0x20c>
 800195a:	e153      	b.n	8001c04 <__aeabi_ddiv+0x4b4>
 800195c:	9803      	ldr	r0, [sp, #12]
 800195e:	1ab6      	subs	r6, r6, r2
 8001960:	0002      	movs	r2, r0
 8001962:	042d      	lsls	r5, r5, #16
 8001964:	431d      	orrs	r5, r3
 8001966:	9f02      	ldr	r7, [sp, #8]
 8001968:	042b      	lsls	r3, r5, #16
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	435a      	muls	r2, r3
 800196e:	437b      	muls	r3, r7
 8001970:	469c      	mov	ip, r3
 8001972:	0c29      	lsrs	r1, r5, #16
 8001974:	4348      	muls	r0, r1
 8001976:	0c13      	lsrs	r3, r2, #16
 8001978:	4484      	add	ip, r0
 800197a:	4463      	add	r3, ip
 800197c:	4379      	muls	r1, r7
 800197e:	4298      	cmp	r0, r3
 8001980:	d903      	bls.n	800198a <__aeabi_ddiv+0x23a>
 8001982:	2080      	movs	r0, #128	; 0x80
 8001984:	0240      	lsls	r0, r0, #9
 8001986:	4684      	mov	ip, r0
 8001988:	4461      	add	r1, ip
 800198a:	0c18      	lsrs	r0, r3, #16
 800198c:	0412      	lsls	r2, r2, #16
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c12      	lsrs	r2, r2, #16
 8001992:	1840      	adds	r0, r0, r1
 8001994:	189b      	adds	r3, r3, r2
 8001996:	4286      	cmp	r6, r0
 8001998:	d200      	bcs.n	800199c <__aeabi_ddiv+0x24c>
 800199a:	e100      	b.n	8001b9e <__aeabi_ddiv+0x44e>
 800199c:	d100      	bne.n	80019a0 <__aeabi_ddiv+0x250>
 800199e:	e0fb      	b.n	8001b98 <__aeabi_ddiv+0x448>
 80019a0:	2301      	movs	r3, #1
 80019a2:	431d      	orrs	r5, r3
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <__aeabi_ddiv+0x37c>)
 80019a6:	445b      	add	r3, fp
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_ddiv+0x25e>
 80019ac:	e0aa      	b.n	8001b04 <__aeabi_ddiv+0x3b4>
 80019ae:	076a      	lsls	r2, r5, #29
 80019b0:	d000      	beq.n	80019b4 <__aeabi_ddiv+0x264>
 80019b2:	e13d      	b.n	8001c30 <__aeabi_ddiv+0x4e0>
 80019b4:	08e9      	lsrs	r1, r5, #3
 80019b6:	4642      	mov	r2, r8
 80019b8:	01d2      	lsls	r2, r2, #7
 80019ba:	d506      	bpl.n	80019ca <__aeabi_ddiv+0x27a>
 80019bc:	4642      	mov	r2, r8
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <__aeabi_ddiv+0x380>)
 80019c0:	401a      	ands	r2, r3
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	4690      	mov	r8, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	445b      	add	r3, fp
 80019ca:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <__aeabi_ddiv+0x384>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_ddiv+0x282>
 80019d0:	e723      	b.n	800181a <__aeabi_ddiv+0xca>
 80019d2:	4642      	mov	r2, r8
 80019d4:	055b      	lsls	r3, r3, #21
 80019d6:	0755      	lsls	r5, r2, #29
 80019d8:	0252      	lsls	r2, r2, #9
 80019da:	430d      	orrs	r5, r1
 80019dc:	0b12      	lsrs	r2, r2, #12
 80019de:	0d5b      	lsrs	r3, r3, #21
 80019e0:	e70d      	b.n	80017fe <__aeabi_ddiv+0xae>
 80019e2:	4651      	mov	r1, sl
 80019e4:	4321      	orrs	r1, r4
 80019e6:	d100      	bne.n	80019ea <__aeabi_ddiv+0x29a>
 80019e8:	e07c      	b.n	8001ae4 <__aeabi_ddiv+0x394>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_ddiv+0x2a0>
 80019ee:	e0fb      	b.n	8001be8 <__aeabi_ddiv+0x498>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f001 fa63 	bl	8002ebc <__clzsi2>
 80019f6:	0002      	movs	r2, r0
 80019f8:	3a0b      	subs	r2, #11
 80019fa:	231d      	movs	r3, #29
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	4652      	mov	r2, sl
 8001a00:	0001      	movs	r1, r0
 8001a02:	40da      	lsrs	r2, r3
 8001a04:	4653      	mov	r3, sl
 8001a06:	3908      	subs	r1, #8
 8001a08:	408b      	lsls	r3, r1
 8001a0a:	408c      	lsls	r4, r1
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	4314      	orrs	r4, r2
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <__aeabi_ddiv+0x388>)
 8001a12:	4458      	add	r0, fp
 8001a14:	469b      	mov	fp, r3
 8001a16:	4483      	add	fp, r0
 8001a18:	2000      	movs	r0, #0
 8001a1a:	e6d9      	b.n	80017d0 <__aeabi_ddiv+0x80>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	4698      	mov	r8, r3
 8001a22:	d044      	beq.n	8001aae <__aeabi_ddiv+0x35e>
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x2da>
 8001a28:	e0cf      	b.n	8001bca <__aeabi_ddiv+0x47a>
 8001a2a:	0020      	movs	r0, r4
 8001a2c:	f001 fa46 	bl	8002ebc <__clzsi2>
 8001a30:	0001      	movs	r1, r0
 8001a32:	0002      	movs	r2, r0
 8001a34:	390b      	subs	r1, #11
 8001a36:	231d      	movs	r3, #29
 8001a38:	1a5b      	subs	r3, r3, r1
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	40d9      	lsrs	r1, r3
 8001a40:	3808      	subs	r0, #8
 8001a42:	4084      	lsls	r4, r0
 8001a44:	000b      	movs	r3, r1
 8001a46:	464d      	mov	r5, r9
 8001a48:	4323      	orrs	r3, r4
 8001a4a:	4698      	mov	r8, r3
 8001a4c:	4085      	lsls	r5, r0
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <__aeabi_ddiv+0x38c>)
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	469b      	mov	fp, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	4699      	mov	r9, r3
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	e69e      	b.n	800179a <__aeabi_ddiv+0x4a>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	4322      	orrs	r2, r4
 8001a60:	4690      	mov	r8, r2
 8001a62:	d11d      	bne.n	8001aa0 <__aeabi_ddiv+0x350>
 8001a64:	2208      	movs	r2, #8
 8001a66:	469b      	mov	fp, r3
 8001a68:	2302      	movs	r3, #2
 8001a6a:	2500      	movs	r5, #0
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e693      	b.n	800179a <__aeabi_ddiv+0x4a>
 8001a72:	4651      	mov	r1, sl
 8001a74:	4321      	orrs	r1, r4
 8001a76:	d109      	bne.n	8001a8c <__aeabi_ddiv+0x33c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	464a      	mov	r2, r9
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <__aeabi_ddiv+0x390>)
 8001a80:	4691      	mov	r9, r2
 8001a82:	469c      	mov	ip, r3
 8001a84:	2400      	movs	r4, #0
 8001a86:	2002      	movs	r0, #2
 8001a88:	44e3      	add	fp, ip
 8001a8a:	e6a1      	b.n	80017d0 <__aeabi_ddiv+0x80>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	464a      	mov	r2, r9
 8001a90:	431a      	orrs	r2, r3
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <__aeabi_ddiv+0x390>)
 8001a94:	4691      	mov	r9, r2
 8001a96:	469c      	mov	ip, r3
 8001a98:	4651      	mov	r1, sl
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	44e3      	add	fp, ip
 8001a9e:	e697      	b.n	80017d0 <__aeabi_ddiv+0x80>
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	469b      	mov	fp, r3
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	4691      	mov	r9, r2
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	e675      	b.n	800179a <__aeabi_ddiv+0x4a>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	469b      	mov	fp, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	2500      	movs	r5, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	e66d      	b.n	800179a <__aeabi_ddiv+0x4a>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff
 8001ac4:	fffffc01 	.word	0xfffffc01
 8001ac8:	08019d44 	.word	0x08019d44
 8001acc:	000003ff 	.word	0x000003ff
 8001ad0:	feffffff 	.word	0xfeffffff
 8001ad4:	000007fe 	.word	0x000007fe
 8001ad8:	000003f3 	.word	0x000003f3
 8001adc:	fffffc0d 	.word	0xfffffc0d
 8001ae0:	fffff801 	.word	0xfffff801
 8001ae4:	464a      	mov	r2, r9
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	4691      	mov	r9, r2
 8001aec:	2400      	movs	r4, #0
 8001aee:	2001      	movs	r0, #1
 8001af0:	e66e      	b.n	80017d0 <__aeabi_ddiv+0x80>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	469a      	mov	sl, r3
 8001af8:	2500      	movs	r5, #0
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <__aeabi_ddiv+0x5cc>)
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	e67e      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001b00:	2501      	movs	r5, #1
 8001b02:	426d      	negs	r5, r5
 8001b04:	2201      	movs	r2, #1
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	2a38      	cmp	r2, #56	; 0x38
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_ddiv+0x3be>
 8001b0c:	e674      	b.n	80017f8 <__aeabi_ddiv+0xa8>
 8001b0e:	2a1f      	cmp	r2, #31
 8001b10:	dc00      	bgt.n	8001b14 <__aeabi_ddiv+0x3c4>
 8001b12:	e0bd      	b.n	8001c90 <__aeabi_ddiv+0x540>
 8001b14:	211f      	movs	r1, #31
 8001b16:	4249      	negs	r1, r1
 8001b18:	1acb      	subs	r3, r1, r3
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	40d9      	lsrs	r1, r3
 8001b1e:	000b      	movs	r3, r1
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d004      	beq.n	8001b2e <__aeabi_ddiv+0x3de>
 8001b24:	4641      	mov	r1, r8
 8001b26:	4a7e      	ldr	r2, [pc, #504]	; (8001d20 <__aeabi_ddiv+0x5d0>)
 8001b28:	445a      	add	r2, fp
 8001b2a:	4091      	lsls	r1, r2
 8001b2c:	430d      	orrs	r5, r1
 8001b2e:	0029      	movs	r1, r5
 8001b30:	1e4a      	subs	r2, r1, #1
 8001b32:	4191      	sbcs	r1, r2
 8001b34:	4319      	orrs	r1, r3
 8001b36:	2307      	movs	r3, #7
 8001b38:	001d      	movs	r5, r3
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	400d      	ands	r5, r1
 8001b3e:	420b      	tst	r3, r1
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x3f4>
 8001b42:	e0d0      	b.n	8001ce6 <__aeabi_ddiv+0x596>
 8001b44:	220f      	movs	r2, #15
 8001b46:	2300      	movs	r3, #0
 8001b48:	400a      	ands	r2, r1
 8001b4a:	2a04      	cmp	r2, #4
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0x400>
 8001b4e:	e0c7      	b.n	8001ce0 <__aeabi_ddiv+0x590>
 8001b50:	1d0a      	adds	r2, r1, #4
 8001b52:	428a      	cmp	r2, r1
 8001b54:	4189      	sbcs	r1, r1
 8001b56:	4249      	negs	r1, r1
 8001b58:	185b      	adds	r3, r3, r1
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	021a      	lsls	r2, r3, #8
 8001b5e:	d400      	bmi.n	8001b62 <__aeabi_ddiv+0x412>
 8001b60:	e0be      	b.n	8001ce0 <__aeabi_ddiv+0x590>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	2500      	movs	r5, #0
 8001b68:	e649      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	4643      	mov	r3, r8
 8001b6e:	0312      	lsls	r2, r2, #12
 8001b70:	4213      	tst	r3, r2
 8001b72:	d008      	beq.n	8001b86 <__aeabi_ddiv+0x436>
 8001b74:	4214      	tst	r4, r2
 8001b76:	d106      	bne.n	8001b86 <__aeabi_ddiv+0x436>
 8001b78:	4322      	orrs	r2, r4
 8001b7a:	0312      	lsls	r2, r2, #12
 8001b7c:	46ba      	mov	sl, r7
 8001b7e:	000d      	movs	r5, r1
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <__aeabi_ddiv+0x5cc>)
 8001b82:	0b12      	lsrs	r2, r2, #12
 8001b84:	e63b      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	4643      	mov	r3, r8
 8001b8a:	0312      	lsls	r2, r2, #12
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	0312      	lsls	r2, r2, #12
 8001b90:	46b2      	mov	sl, r6
 8001b92:	4b62      	ldr	r3, [pc, #392]	; (8001d1c <__aeabi_ddiv+0x5cc>)
 8001b94:	0b12      	lsrs	r2, r2, #12
 8001b96:	e632      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_ddiv+0x44e>
 8001b9c:	e702      	b.n	80019a4 <__aeabi_ddiv+0x254>
 8001b9e:	19a6      	adds	r6, r4, r6
 8001ba0:	1e6a      	subs	r2, r5, #1
 8001ba2:	42a6      	cmp	r6, r4
 8001ba4:	d200      	bcs.n	8001ba8 <__aeabi_ddiv+0x458>
 8001ba6:	e089      	b.n	8001cbc <__aeabi_ddiv+0x56c>
 8001ba8:	4286      	cmp	r6, r0
 8001baa:	d200      	bcs.n	8001bae <__aeabi_ddiv+0x45e>
 8001bac:	e09f      	b.n	8001cee <__aeabi_ddiv+0x59e>
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_ddiv+0x462>
 8001bb0:	e0af      	b.n	8001d12 <__aeabi_ddiv+0x5c2>
 8001bb2:	0015      	movs	r5, r2
 8001bb4:	e6f4      	b.n	80019a0 <__aeabi_ddiv+0x250>
 8001bb6:	42a9      	cmp	r1, r5
 8001bb8:	d900      	bls.n	8001bbc <__aeabi_ddiv+0x46c>
 8001bba:	e63c      	b.n	8001836 <__aeabi_ddiv+0xe6>
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	07de      	lsls	r6, r3, #31
 8001bc0:	0858      	lsrs	r0, r3, #1
 8001bc2:	086b      	lsrs	r3, r5, #1
 8001bc4:	431e      	orrs	r6, r3
 8001bc6:	07ed      	lsls	r5, r5, #31
 8001bc8:	e63c      	b.n	8001844 <__aeabi_ddiv+0xf4>
 8001bca:	f001 f977 	bl	8002ebc <__clzsi2>
 8001bce:	0001      	movs	r1, r0
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	3115      	adds	r1, #21
 8001bd4:	3220      	adds	r2, #32
 8001bd6:	291c      	cmp	r1, #28
 8001bd8:	dc00      	bgt.n	8001bdc <__aeabi_ddiv+0x48c>
 8001bda:	e72c      	b.n	8001a36 <__aeabi_ddiv+0x2e6>
 8001bdc:	464b      	mov	r3, r9
 8001bde:	3808      	subs	r0, #8
 8001be0:	4083      	lsls	r3, r0
 8001be2:	2500      	movs	r5, #0
 8001be4:	4698      	mov	r8, r3
 8001be6:	e732      	b.n	8001a4e <__aeabi_ddiv+0x2fe>
 8001be8:	f001 f968 	bl	8002ebc <__clzsi2>
 8001bec:	0003      	movs	r3, r0
 8001bee:	001a      	movs	r2, r3
 8001bf0:	3215      	adds	r2, #21
 8001bf2:	3020      	adds	r0, #32
 8001bf4:	2a1c      	cmp	r2, #28
 8001bf6:	dc00      	bgt.n	8001bfa <__aeabi_ddiv+0x4aa>
 8001bf8:	e6ff      	b.n	80019fa <__aeabi_ddiv+0x2aa>
 8001bfa:	4654      	mov	r4, sl
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	2100      	movs	r1, #0
 8001c00:	409c      	lsls	r4, r3
 8001c02:	e705      	b.n	8001a10 <__aeabi_ddiv+0x2c0>
 8001c04:	1936      	adds	r6, r6, r4
 8001c06:	3b01      	subs	r3, #1
 8001c08:	42b4      	cmp	r4, r6
 8001c0a:	d900      	bls.n	8001c0e <__aeabi_ddiv+0x4be>
 8001c0c:	e6a6      	b.n	800195c <__aeabi_ddiv+0x20c>
 8001c0e:	42b2      	cmp	r2, r6
 8001c10:	d800      	bhi.n	8001c14 <__aeabi_ddiv+0x4c4>
 8001c12:	e6a3      	b.n	800195c <__aeabi_ddiv+0x20c>
 8001c14:	1e83      	subs	r3, r0, #2
 8001c16:	1936      	adds	r6, r6, r4
 8001c18:	e6a0      	b.n	800195c <__aeabi_ddiv+0x20c>
 8001c1a:	1909      	adds	r1, r1, r4
 8001c1c:	3d01      	subs	r5, #1
 8001c1e:	428c      	cmp	r4, r1
 8001c20:	d900      	bls.n	8001c24 <__aeabi_ddiv+0x4d4>
 8001c22:	e68d      	b.n	8001940 <__aeabi_ddiv+0x1f0>
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d800      	bhi.n	8001c2a <__aeabi_ddiv+0x4da>
 8001c28:	e68a      	b.n	8001940 <__aeabi_ddiv+0x1f0>
 8001c2a:	1e85      	subs	r5, r0, #2
 8001c2c:	1909      	adds	r1, r1, r4
 8001c2e:	e687      	b.n	8001940 <__aeabi_ddiv+0x1f0>
 8001c30:	220f      	movs	r2, #15
 8001c32:	402a      	ands	r2, r5
 8001c34:	2a04      	cmp	r2, #4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0x4ea>
 8001c38:	e6bc      	b.n	80019b4 <__aeabi_ddiv+0x264>
 8001c3a:	1d29      	adds	r1, r5, #4
 8001c3c:	42a9      	cmp	r1, r5
 8001c3e:	41ad      	sbcs	r5, r5
 8001c40:	426d      	negs	r5, r5
 8001c42:	08c9      	lsrs	r1, r1, #3
 8001c44:	44a8      	add	r8, r5
 8001c46:	e6b6      	b.n	80019b6 <__aeabi_ddiv+0x266>
 8001c48:	42af      	cmp	r7, r5
 8001c4a:	d900      	bls.n	8001c4e <__aeabi_ddiv+0x4fe>
 8001c4c:	e662      	b.n	8001914 <__aeabi_ddiv+0x1c4>
 8001c4e:	4281      	cmp	r1, r0
 8001c50:	d804      	bhi.n	8001c5c <__aeabi_ddiv+0x50c>
 8001c52:	d000      	beq.n	8001c56 <__aeabi_ddiv+0x506>
 8001c54:	e65e      	b.n	8001914 <__aeabi_ddiv+0x1c4>
 8001c56:	42ae      	cmp	r6, r5
 8001c58:	d800      	bhi.n	8001c5c <__aeabi_ddiv+0x50c>
 8001c5a:	e65b      	b.n	8001914 <__aeabi_ddiv+0x1c4>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	425b      	negs	r3, r3
 8001c60:	469c      	mov	ip, r3
 8001c62:	9b00      	ldr	r3, [sp, #0]
 8001c64:	44e0      	add	r8, ip
 8001c66:	469c      	mov	ip, r3
 8001c68:	4465      	add	r5, ip
 8001c6a:	429d      	cmp	r5, r3
 8001c6c:	419b      	sbcs	r3, r3
 8001c6e:	425b      	negs	r3, r3
 8001c70:	191b      	adds	r3, r3, r4
 8001c72:	18c0      	adds	r0, r0, r3
 8001c74:	e64f      	b.n	8001916 <__aeabi_ddiv+0x1c6>
 8001c76:	42b2      	cmp	r2, r6
 8001c78:	d800      	bhi.n	8001c7c <__aeabi_ddiv+0x52c>
 8001c7a:	e612      	b.n	80018a2 <__aeabi_ddiv+0x152>
 8001c7c:	1e83      	subs	r3, r0, #2
 8001c7e:	1936      	adds	r6, r6, r4
 8001c80:	e60f      	b.n	80018a2 <__aeabi_ddiv+0x152>
 8001c82:	428a      	cmp	r2, r1
 8001c84:	d800      	bhi.n	8001c88 <__aeabi_ddiv+0x538>
 8001c86:	e5fa      	b.n	800187e <__aeabi_ddiv+0x12e>
 8001c88:	1e83      	subs	r3, r0, #2
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	1909      	adds	r1, r1, r4
 8001c8e:	e5f6      	b.n	800187e <__aeabi_ddiv+0x12e>
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <__aeabi_ddiv+0x5d4>)
 8001c92:	0028      	movs	r0, r5
 8001c94:	445b      	add	r3, fp
 8001c96:	4641      	mov	r1, r8
 8001c98:	409d      	lsls	r5, r3
 8001c9a:	4099      	lsls	r1, r3
 8001c9c:	40d0      	lsrs	r0, r2
 8001c9e:	1e6b      	subs	r3, r5, #1
 8001ca0:	419d      	sbcs	r5, r3
 8001ca2:	4643      	mov	r3, r8
 8001ca4:	4301      	orrs	r1, r0
 8001ca6:	4329      	orrs	r1, r5
 8001ca8:	40d3      	lsrs	r3, r2
 8001caa:	074a      	lsls	r2, r1, #29
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x560>
 8001cae:	e755      	b.n	8001b5c <__aeabi_ddiv+0x40c>
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	2a04      	cmp	r2, #4
 8001cb6:	d000      	beq.n	8001cba <__aeabi_ddiv+0x56a>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_ddiv+0x400>
 8001cba:	e74f      	b.n	8001b5c <__aeabi_ddiv+0x40c>
 8001cbc:	0015      	movs	r5, r2
 8001cbe:	4286      	cmp	r6, r0
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_ddiv+0x574>
 8001cc2:	e66d      	b.n	80019a0 <__aeabi_ddiv+0x250>
 8001cc4:	9a00      	ldr	r2, [sp, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d000      	beq.n	8001ccc <__aeabi_ddiv+0x57c>
 8001cca:	e669      	b.n	80019a0 <__aeabi_ddiv+0x250>
 8001ccc:	e66a      	b.n	80019a4 <__aeabi_ddiv+0x254>
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <__aeabi_ddiv+0x5d8>)
 8001cd0:	445b      	add	r3, fp
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dc00      	bgt.n	8001cd8 <__aeabi_ddiv+0x588>
 8001cd6:	e713      	b.n	8001b00 <__aeabi_ddiv+0x3b0>
 8001cd8:	2501      	movs	r5, #1
 8001cda:	2100      	movs	r1, #0
 8001cdc:	44a8      	add	r8, r5
 8001cde:	e66a      	b.n	80019b6 <__aeabi_ddiv+0x266>
 8001ce0:	075d      	lsls	r5, r3, #29
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	0b1a      	lsrs	r2, r3, #12
 8001ce6:	08c9      	lsrs	r1, r1, #3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	430d      	orrs	r5, r1
 8001cec:	e587      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001cee:	9900      	ldr	r1, [sp, #0]
 8001cf0:	3d02      	subs	r5, #2
 8001cf2:	004a      	lsls	r2, r1, #1
 8001cf4:	428a      	cmp	r2, r1
 8001cf6:	41bf      	sbcs	r7, r7
 8001cf8:	427f      	negs	r7, r7
 8001cfa:	193f      	adds	r7, r7, r4
 8001cfc:	19f6      	adds	r6, r6, r7
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	e7dd      	b.n	8001cbe <__aeabi_ddiv+0x56e>
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	4643      	mov	r3, r8
 8001d06:	0312      	lsls	r2, r2, #12
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <__aeabi_ddiv+0x5cc>)
 8001d0e:	0b12      	lsrs	r2, r2, #12
 8001d10:	e575      	b.n	80017fe <__aeabi_ddiv+0xae>
 8001d12:	9900      	ldr	r1, [sp, #0]
 8001d14:	4299      	cmp	r1, r3
 8001d16:	d3ea      	bcc.n	8001cee <__aeabi_ddiv+0x59e>
 8001d18:	0015      	movs	r5, r2
 8001d1a:	e7d3      	b.n	8001cc4 <__aeabi_ddiv+0x574>
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	0000043e 	.word	0x0000043e
 8001d24:	0000041e 	.word	0x0000041e
 8001d28:	000003ff 	.word	0x000003ff

08001d2c <__eqdf2>:
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	464e      	mov	r6, r9
 8001d30:	4645      	mov	r5, r8
 8001d32:	46de      	mov	lr, fp
 8001d34:	4657      	mov	r7, sl
 8001d36:	4690      	mov	r8, r2
 8001d38:	b5e0      	push	{r5, r6, r7, lr}
 8001d3a:	0017      	movs	r7, r2
 8001d3c:	031a      	lsls	r2, r3, #12
 8001d3e:	0b12      	lsrs	r2, r2, #12
 8001d40:	0005      	movs	r5, r0
 8001d42:	4684      	mov	ip, r0
 8001d44:	4819      	ldr	r0, [pc, #100]	; (8001dac <__eqdf2+0x80>)
 8001d46:	030e      	lsls	r6, r1, #12
 8001d48:	004c      	lsls	r4, r1, #1
 8001d4a:	4691      	mov	r9, r2
 8001d4c:	005a      	lsls	r2, r3, #1
 8001d4e:	0fdb      	lsrs	r3, r3, #31
 8001d50:	469b      	mov	fp, r3
 8001d52:	0b36      	lsrs	r6, r6, #12
 8001d54:	0d64      	lsrs	r4, r4, #21
 8001d56:	0fc9      	lsrs	r1, r1, #31
 8001d58:	0d52      	lsrs	r2, r2, #21
 8001d5a:	4284      	cmp	r4, r0
 8001d5c:	d019      	beq.n	8001d92 <__eqdf2+0x66>
 8001d5e:	4282      	cmp	r2, r0
 8001d60:	d010      	beq.n	8001d84 <__eqdf2+0x58>
 8001d62:	2001      	movs	r0, #1
 8001d64:	4294      	cmp	r4, r2
 8001d66:	d10e      	bne.n	8001d86 <__eqdf2+0x5a>
 8001d68:	454e      	cmp	r6, r9
 8001d6a:	d10c      	bne.n	8001d86 <__eqdf2+0x5a>
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	45c4      	cmp	ip, r8
 8001d70:	d109      	bne.n	8001d86 <__eqdf2+0x5a>
 8001d72:	4559      	cmp	r1, fp
 8001d74:	d017      	beq.n	8001da6 <__eqdf2+0x7a>
 8001d76:	2c00      	cmp	r4, #0
 8001d78:	d105      	bne.n	8001d86 <__eqdf2+0x5a>
 8001d7a:	0030      	movs	r0, r6
 8001d7c:	4328      	orrs	r0, r5
 8001d7e:	1e43      	subs	r3, r0, #1
 8001d80:	4198      	sbcs	r0, r3
 8001d82:	e000      	b.n	8001d86 <__eqdf2+0x5a>
 8001d84:	2001      	movs	r0, #1
 8001d86:	bcf0      	pop	{r4, r5, r6, r7}
 8001d88:	46bb      	mov	fp, r7
 8001d8a:	46b2      	mov	sl, r6
 8001d8c:	46a9      	mov	r9, r5
 8001d8e:	46a0      	mov	r8, r4
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d92:	0033      	movs	r3, r6
 8001d94:	2001      	movs	r0, #1
 8001d96:	432b      	orrs	r3, r5
 8001d98:	d1f5      	bne.n	8001d86 <__eqdf2+0x5a>
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d1f3      	bne.n	8001d86 <__eqdf2+0x5a>
 8001d9e:	464b      	mov	r3, r9
 8001da0:	433b      	orrs	r3, r7
 8001da2:	d1f0      	bne.n	8001d86 <__eqdf2+0x5a>
 8001da4:	e7e2      	b.n	8001d6c <__eqdf2+0x40>
 8001da6:	2000      	movs	r0, #0
 8001da8:	e7ed      	b.n	8001d86 <__eqdf2+0x5a>
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	000007ff 	.word	0x000007ff

08001db0 <__gedf2>:
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	4647      	mov	r7, r8
 8001db4:	46ce      	mov	lr, r9
 8001db6:	0004      	movs	r4, r0
 8001db8:	0018      	movs	r0, r3
 8001dba:	0016      	movs	r6, r2
 8001dbc:	031b      	lsls	r3, r3, #12
 8001dbe:	0b1b      	lsrs	r3, r3, #12
 8001dc0:	4d2d      	ldr	r5, [pc, #180]	; (8001e78 <__gedf2+0xc8>)
 8001dc2:	004a      	lsls	r2, r1, #1
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	0043      	lsls	r3, r0, #1
 8001dca:	030f      	lsls	r7, r1, #12
 8001dcc:	46a4      	mov	ip, r4
 8001dce:	46b0      	mov	r8, r6
 8001dd0:	0b3f      	lsrs	r7, r7, #12
 8001dd2:	0d52      	lsrs	r2, r2, #21
 8001dd4:	0fc9      	lsrs	r1, r1, #31
 8001dd6:	0d5b      	lsrs	r3, r3, #21
 8001dd8:	0fc0      	lsrs	r0, r0, #31
 8001dda:	42aa      	cmp	r2, r5
 8001ddc:	d021      	beq.n	8001e22 <__gedf2+0x72>
 8001dde:	42ab      	cmp	r3, r5
 8001de0:	d013      	beq.n	8001e0a <__gedf2+0x5a>
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d122      	bne.n	8001e2c <__gedf2+0x7c>
 8001de6:	433c      	orrs	r4, r7
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <__gedf2+0x42>
 8001dec:	464d      	mov	r5, r9
 8001dee:	432e      	orrs	r6, r5
 8001df0:	d022      	beq.n	8001e38 <__gedf2+0x88>
 8001df2:	2c00      	cmp	r4, #0
 8001df4:	d010      	beq.n	8001e18 <__gedf2+0x68>
 8001df6:	4281      	cmp	r1, r0
 8001df8:	d022      	beq.n	8001e40 <__gedf2+0x90>
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	3901      	subs	r1, #1
 8001dfe:	4008      	ands	r0, r1
 8001e00:	3801      	subs	r0, #1
 8001e02:	bcc0      	pop	{r6, r7}
 8001e04:	46b9      	mov	r9, r7
 8001e06:	46b0      	mov	r8, r6
 8001e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0a:	464d      	mov	r5, r9
 8001e0c:	432e      	orrs	r6, r5
 8001e0e:	d129      	bne.n	8001e64 <__gedf2+0xb4>
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	d1f0      	bne.n	8001df6 <__gedf2+0x46>
 8001e14:	433c      	orrs	r4, r7
 8001e16:	d1ee      	bne.n	8001df6 <__gedf2+0x46>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d1f2      	bne.n	8001e02 <__gedf2+0x52>
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	4240      	negs	r0, r0
 8001e20:	e7ef      	b.n	8001e02 <__gedf2+0x52>
 8001e22:	003d      	movs	r5, r7
 8001e24:	4325      	orrs	r5, r4
 8001e26:	d11d      	bne.n	8001e64 <__gedf2+0xb4>
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d0ee      	beq.n	8001e0a <__gedf2+0x5a>
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e2      	bne.n	8001df6 <__gedf2+0x46>
 8001e30:	464c      	mov	r4, r9
 8001e32:	4326      	orrs	r6, r4
 8001e34:	d1df      	bne.n	8001df6 <__gedf2+0x46>
 8001e36:	e7e0      	b.n	8001dfa <__gedf2+0x4a>
 8001e38:	2000      	movs	r0, #0
 8001e3a:	2c00      	cmp	r4, #0
 8001e3c:	d0e1      	beq.n	8001e02 <__gedf2+0x52>
 8001e3e:	e7dc      	b.n	8001dfa <__gedf2+0x4a>
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dc0a      	bgt.n	8001e5a <__gedf2+0xaa>
 8001e44:	dbe8      	blt.n	8001e18 <__gedf2+0x68>
 8001e46:	454f      	cmp	r7, r9
 8001e48:	d8d7      	bhi.n	8001dfa <__gedf2+0x4a>
 8001e4a:	d00e      	beq.n	8001e6a <__gedf2+0xba>
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	454f      	cmp	r7, r9
 8001e50:	d2d7      	bcs.n	8001e02 <__gedf2+0x52>
 8001e52:	2900      	cmp	r1, #0
 8001e54:	d0e2      	beq.n	8001e1c <__gedf2+0x6c>
 8001e56:	0008      	movs	r0, r1
 8001e58:	e7d3      	b.n	8001e02 <__gedf2+0x52>
 8001e5a:	4243      	negs	r3, r0
 8001e5c:	4158      	adcs	r0, r3
 8001e5e:	0040      	lsls	r0, r0, #1
 8001e60:	3801      	subs	r0, #1
 8001e62:	e7ce      	b.n	8001e02 <__gedf2+0x52>
 8001e64:	2002      	movs	r0, #2
 8001e66:	4240      	negs	r0, r0
 8001e68:	e7cb      	b.n	8001e02 <__gedf2+0x52>
 8001e6a:	45c4      	cmp	ip, r8
 8001e6c:	d8c5      	bhi.n	8001dfa <__gedf2+0x4a>
 8001e6e:	2000      	movs	r0, #0
 8001e70:	45c4      	cmp	ip, r8
 8001e72:	d2c6      	bcs.n	8001e02 <__gedf2+0x52>
 8001e74:	e7ed      	b.n	8001e52 <__gedf2+0xa2>
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff

08001e7c <__ledf2>:
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	4647      	mov	r7, r8
 8001e80:	46ce      	mov	lr, r9
 8001e82:	0004      	movs	r4, r0
 8001e84:	0018      	movs	r0, r3
 8001e86:	0016      	movs	r6, r2
 8001e88:	031b      	lsls	r3, r3, #12
 8001e8a:	0b1b      	lsrs	r3, r3, #12
 8001e8c:	4d2c      	ldr	r5, [pc, #176]	; (8001f40 <__ledf2+0xc4>)
 8001e8e:	004a      	lsls	r2, r1, #1
 8001e90:	4699      	mov	r9, r3
 8001e92:	b580      	push	{r7, lr}
 8001e94:	0043      	lsls	r3, r0, #1
 8001e96:	030f      	lsls	r7, r1, #12
 8001e98:	46a4      	mov	ip, r4
 8001e9a:	46b0      	mov	r8, r6
 8001e9c:	0b3f      	lsrs	r7, r7, #12
 8001e9e:	0d52      	lsrs	r2, r2, #21
 8001ea0:	0fc9      	lsrs	r1, r1, #31
 8001ea2:	0d5b      	lsrs	r3, r3, #21
 8001ea4:	0fc0      	lsrs	r0, r0, #31
 8001ea6:	42aa      	cmp	r2, r5
 8001ea8:	d00d      	beq.n	8001ec6 <__ledf2+0x4a>
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	d010      	beq.n	8001ed0 <__ledf2+0x54>
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d127      	bne.n	8001f02 <__ledf2+0x86>
 8001eb2:	433c      	orrs	r4, r7
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <__ledf2+0x60>
 8001eb8:	464d      	mov	r5, r9
 8001eba:	432e      	orrs	r6, r5
 8001ebc:	d10e      	bne.n	8001edc <__ledf2+0x60>
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	2c00      	cmp	r4, #0
 8001ec2:	d015      	beq.n	8001ef0 <__ledf2+0x74>
 8001ec4:	e00e      	b.n	8001ee4 <__ledf2+0x68>
 8001ec6:	003d      	movs	r5, r7
 8001ec8:	4325      	orrs	r5, r4
 8001eca:	d110      	bne.n	8001eee <__ledf2+0x72>
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d118      	bne.n	8001f02 <__ledf2+0x86>
 8001ed0:	464d      	mov	r5, r9
 8001ed2:	432e      	orrs	r6, r5
 8001ed4:	d10b      	bne.n	8001eee <__ledf2+0x72>
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	d102      	bne.n	8001ee0 <__ledf2+0x64>
 8001eda:	433c      	orrs	r4, r7
 8001edc:	2c00      	cmp	r4, #0
 8001ede:	d00b      	beq.n	8001ef8 <__ledf2+0x7c>
 8001ee0:	4281      	cmp	r1, r0
 8001ee2:	d014      	beq.n	8001f0e <__ledf2+0x92>
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	3901      	subs	r1, #1
 8001ee8:	4008      	ands	r0, r1
 8001eea:	3801      	subs	r0, #1
 8001eec:	e000      	b.n	8001ef0 <__ledf2+0x74>
 8001eee:	2002      	movs	r0, #2
 8001ef0:	bcc0      	pop	{r6, r7}
 8001ef2:	46b9      	mov	r9, r7
 8001ef4:	46b0      	mov	r8, r6
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d1f9      	bne.n	8001ef0 <__ledf2+0x74>
 8001efc:	2001      	movs	r0, #1
 8001efe:	4240      	negs	r0, r0
 8001f00:	e7f6      	b.n	8001ef0 <__ledf2+0x74>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ec      	bne.n	8001ee0 <__ledf2+0x64>
 8001f06:	464c      	mov	r4, r9
 8001f08:	4326      	orrs	r6, r4
 8001f0a:	d1e9      	bne.n	8001ee0 <__ledf2+0x64>
 8001f0c:	e7ea      	b.n	8001ee4 <__ledf2+0x68>
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dd04      	ble.n	8001f1c <__ledf2+0xa0>
 8001f12:	4243      	negs	r3, r0
 8001f14:	4158      	adcs	r0, r3
 8001f16:	0040      	lsls	r0, r0, #1
 8001f18:	3801      	subs	r0, #1
 8001f1a:	e7e9      	b.n	8001ef0 <__ledf2+0x74>
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbeb      	blt.n	8001ef8 <__ledf2+0x7c>
 8001f20:	454f      	cmp	r7, r9
 8001f22:	d8df      	bhi.n	8001ee4 <__ledf2+0x68>
 8001f24:	d006      	beq.n	8001f34 <__ledf2+0xb8>
 8001f26:	2000      	movs	r0, #0
 8001f28:	454f      	cmp	r7, r9
 8001f2a:	d2e1      	bcs.n	8001ef0 <__ledf2+0x74>
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	d0e5      	beq.n	8001efc <__ledf2+0x80>
 8001f30:	0008      	movs	r0, r1
 8001f32:	e7dd      	b.n	8001ef0 <__ledf2+0x74>
 8001f34:	45c4      	cmp	ip, r8
 8001f36:	d8d5      	bhi.n	8001ee4 <__ledf2+0x68>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	45c4      	cmp	ip, r8
 8001f3c:	d2d8      	bcs.n	8001ef0 <__ledf2+0x74>
 8001f3e:	e7f5      	b.n	8001f2c <__ledf2+0xb0>
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__aeabi_dmul>:
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	4645      	mov	r5, r8
 8001f48:	46de      	mov	lr, fp
 8001f4a:	4657      	mov	r7, sl
 8001f4c:	464e      	mov	r6, r9
 8001f4e:	b5e0      	push	{r5, r6, r7, lr}
 8001f50:	001f      	movs	r7, r3
 8001f52:	030b      	lsls	r3, r1, #12
 8001f54:	0b1b      	lsrs	r3, r3, #12
 8001f56:	469b      	mov	fp, r3
 8001f58:	004d      	lsls	r5, r1, #1
 8001f5a:	0fcb      	lsrs	r3, r1, #31
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	4691      	mov	r9, r2
 8001f60:	4698      	mov	r8, r3
 8001f62:	b087      	sub	sp, #28
 8001f64:	0d6d      	lsrs	r5, r5, #21
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dmul+0x26>
 8001f68:	e1cd      	b.n	8002306 <__aeabi_dmul+0x3c2>
 8001f6a:	4bce      	ldr	r3, [pc, #824]	; (80022a4 <__aeabi_dmul+0x360>)
 8001f6c:	429d      	cmp	r5, r3
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dmul+0x2e>
 8001f70:	e1e9      	b.n	8002346 <__aeabi_dmul+0x402>
 8001f72:	465a      	mov	r2, fp
 8001f74:	0f43      	lsrs	r3, r0, #29
 8001f76:	00d2      	lsls	r2, r2, #3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0412      	lsls	r2, r2, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	00c3      	lsls	r3, r0, #3
 8001f82:	469a      	mov	sl, r3
 8001f84:	4bc8      	ldr	r3, [pc, #800]	; (80022a8 <__aeabi_dmul+0x364>)
 8001f86:	4693      	mov	fp, r2
 8001f88:	469c      	mov	ip, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	4465      	add	r5, ip
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	033c      	lsls	r4, r7, #12
 8001f94:	007b      	lsls	r3, r7, #1
 8001f96:	4648      	mov	r0, r9
 8001f98:	0b24      	lsrs	r4, r4, #12
 8001f9a:	0d5b      	lsrs	r3, r3, #21
 8001f9c:	0fff      	lsrs	r7, r7, #31
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dmul+0x60>
 8001fa2:	e189      	b.n	80022b8 <__aeabi_dmul+0x374>
 8001fa4:	4abf      	ldr	r2, [pc, #764]	; (80022a4 <__aeabi_dmul+0x360>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <__aeabi_dmul+0x9a>
 8001faa:	0f42      	lsrs	r2, r0, #29
 8001fac:	00e4      	lsls	r4, r4, #3
 8001fae:	4322      	orrs	r2, r4
 8001fb0:	2480      	movs	r4, #128	; 0x80
 8001fb2:	0424      	lsls	r4, r4, #16
 8001fb4:	4314      	orrs	r4, r2
 8001fb6:	4abc      	ldr	r2, [pc, #752]	; (80022a8 <__aeabi_dmul+0x364>)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4694      	mov	ip, r2
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	4463      	add	r3, ip
 8001fc0:	195b      	adds	r3, r3, r5
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	407a      	eors	r2, r7
 8001fc8:	3301      	adds	r3, #1
 8001fca:	00c0      	lsls	r0, r0, #3
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	2e0a      	cmp	r6, #10
 8001fd2:	dd1c      	ble.n	800200e <__aeabi_dmul+0xca>
 8001fd4:	003a      	movs	r2, r7
 8001fd6:	2e0b      	cmp	r6, #11
 8001fd8:	d05e      	beq.n	8002098 <__aeabi_dmul+0x154>
 8001fda:	4647      	mov	r7, r8
 8001fdc:	e056      	b.n	800208c <__aeabi_dmul+0x148>
 8001fde:	4649      	mov	r1, r9
 8001fe0:	4bb0      	ldr	r3, [pc, #704]	; (80022a4 <__aeabi_dmul+0x360>)
 8001fe2:	4321      	orrs	r1, r4
 8001fe4:	18eb      	adds	r3, r5, r3
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	d12a      	bne.n	8002042 <__aeabi_dmul+0xfe>
 8001fec:	2080      	movs	r0, #128	; 0x80
 8001fee:	2202      	movs	r2, #2
 8001ff0:	0100      	lsls	r0, r0, #4
 8001ff2:	002b      	movs	r3, r5
 8001ff4:	4684      	mov	ip, r0
 8001ff6:	4316      	orrs	r6, r2
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	4463      	add	r3, ip
 8001ffc:	407a      	eors	r2, r7
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	2e0a      	cmp	r6, #10
 8002004:	dd00      	ble.n	8002008 <__aeabi_dmul+0xc4>
 8002006:	e231      	b.n	800246c <__aeabi_dmul+0x528>
 8002008:	2000      	movs	r0, #0
 800200a:	2400      	movs	r4, #0
 800200c:	2102      	movs	r1, #2
 800200e:	2e02      	cmp	r6, #2
 8002010:	dc26      	bgt.n	8002060 <__aeabi_dmul+0x11c>
 8002012:	3e01      	subs	r6, #1
 8002014:	2e01      	cmp	r6, #1
 8002016:	d852      	bhi.n	80020be <__aeabi_dmul+0x17a>
 8002018:	2902      	cmp	r1, #2
 800201a:	d04c      	beq.n	80020b6 <__aeabi_dmul+0x172>
 800201c:	2901      	cmp	r1, #1
 800201e:	d000      	beq.n	8002022 <__aeabi_dmul+0xde>
 8002020:	e118      	b.n	8002254 <__aeabi_dmul+0x310>
 8002022:	2300      	movs	r3, #0
 8002024:	2400      	movs	r4, #0
 8002026:	2500      	movs	r5, #0
 8002028:	051b      	lsls	r3, r3, #20
 800202a:	4323      	orrs	r3, r4
 800202c:	07d2      	lsls	r2, r2, #31
 800202e:	4313      	orrs	r3, r2
 8002030:	0028      	movs	r0, r5
 8002032:	0019      	movs	r1, r3
 8002034:	b007      	add	sp, #28
 8002036:	bcf0      	pop	{r4, r5, r6, r7}
 8002038:	46bb      	mov	fp, r7
 800203a:	46b2      	mov	sl, r6
 800203c:	46a9      	mov	r9, r5
 800203e:	46a0      	mov	r8, r4
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	2203      	movs	r2, #3
 8002046:	0109      	lsls	r1, r1, #4
 8002048:	002b      	movs	r3, r5
 800204a:	468c      	mov	ip, r1
 800204c:	4316      	orrs	r6, r2
 800204e:	4642      	mov	r2, r8
 8002050:	4463      	add	r3, ip
 8002052:	407a      	eors	r2, r7
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	2e0a      	cmp	r6, #10
 800205a:	dd00      	ble.n	800205e <__aeabi_dmul+0x11a>
 800205c:	e228      	b.n	80024b0 <__aeabi_dmul+0x56c>
 800205e:	2103      	movs	r1, #3
 8002060:	2501      	movs	r5, #1
 8002062:	40b5      	lsls	r5, r6
 8002064:	46ac      	mov	ip, r5
 8002066:	26a6      	movs	r6, #166	; 0xa6
 8002068:	4663      	mov	r3, ip
 800206a:	00f6      	lsls	r6, r6, #3
 800206c:	4035      	ands	r5, r6
 800206e:	4233      	tst	r3, r6
 8002070:	d10b      	bne.n	800208a <__aeabi_dmul+0x146>
 8002072:	2690      	movs	r6, #144	; 0x90
 8002074:	00b6      	lsls	r6, r6, #2
 8002076:	4233      	tst	r3, r6
 8002078:	d118      	bne.n	80020ac <__aeabi_dmul+0x168>
 800207a:	3eb9      	subs	r6, #185	; 0xb9
 800207c:	3eff      	subs	r6, #255	; 0xff
 800207e:	421e      	tst	r6, r3
 8002080:	d01d      	beq.n	80020be <__aeabi_dmul+0x17a>
 8002082:	46a3      	mov	fp, r4
 8002084:	4682      	mov	sl, r0
 8002086:	9100      	str	r1, [sp, #0]
 8002088:	e000      	b.n	800208c <__aeabi_dmul+0x148>
 800208a:	0017      	movs	r7, r2
 800208c:	9900      	ldr	r1, [sp, #0]
 800208e:	003a      	movs	r2, r7
 8002090:	2902      	cmp	r1, #2
 8002092:	d010      	beq.n	80020b6 <__aeabi_dmul+0x172>
 8002094:	465c      	mov	r4, fp
 8002096:	4650      	mov	r0, sl
 8002098:	2903      	cmp	r1, #3
 800209a:	d1bf      	bne.n	800201c <__aeabi_dmul+0xd8>
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	031b      	lsls	r3, r3, #12
 80020a0:	431c      	orrs	r4, r3
 80020a2:	0324      	lsls	r4, r4, #12
 80020a4:	0005      	movs	r5, r0
 80020a6:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <__aeabi_dmul+0x360>)
 80020a8:	0b24      	lsrs	r4, r4, #12
 80020aa:	e7bd      	b.n	8002028 <__aeabi_dmul+0xe4>
 80020ac:	2480      	movs	r4, #128	; 0x80
 80020ae:	2200      	movs	r2, #0
 80020b0:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <__aeabi_dmul+0x360>)
 80020b2:	0324      	lsls	r4, r4, #12
 80020b4:	e7b8      	b.n	8002028 <__aeabi_dmul+0xe4>
 80020b6:	2400      	movs	r4, #0
 80020b8:	2500      	movs	r5, #0
 80020ba:	4b7a      	ldr	r3, [pc, #488]	; (80022a4 <__aeabi_dmul+0x360>)
 80020bc:	e7b4      	b.n	8002028 <__aeabi_dmul+0xe4>
 80020be:	4653      	mov	r3, sl
 80020c0:	041e      	lsls	r6, r3, #16
 80020c2:	0c36      	lsrs	r6, r6, #16
 80020c4:	0c1f      	lsrs	r7, r3, #16
 80020c6:	0033      	movs	r3, r6
 80020c8:	0c01      	lsrs	r1, r0, #16
 80020ca:	0400      	lsls	r0, r0, #16
 80020cc:	0c00      	lsrs	r0, r0, #16
 80020ce:	4343      	muls	r3, r0
 80020d0:	4698      	mov	r8, r3
 80020d2:	0003      	movs	r3, r0
 80020d4:	437b      	muls	r3, r7
 80020d6:	4699      	mov	r9, r3
 80020d8:	0033      	movs	r3, r6
 80020da:	434b      	muls	r3, r1
 80020dc:	469c      	mov	ip, r3
 80020de:	4643      	mov	r3, r8
 80020e0:	000d      	movs	r5, r1
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	469a      	mov	sl, r3
 80020e6:	437d      	muls	r5, r7
 80020e8:	44cc      	add	ip, r9
 80020ea:	44d4      	add	ip, sl
 80020ec:	9500      	str	r5, [sp, #0]
 80020ee:	45e1      	cmp	r9, ip
 80020f0:	d904      	bls.n	80020fc <__aeabi_dmul+0x1b8>
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	025b      	lsls	r3, r3, #9
 80020f6:	4699      	mov	r9, r3
 80020f8:	444d      	add	r5, r9
 80020fa:	9500      	str	r5, [sp, #0]
 80020fc:	4663      	mov	r3, ip
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	001d      	movs	r5, r3
 8002102:	4663      	mov	r3, ip
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	469c      	mov	ip, r3
 8002108:	4643      	mov	r3, r8
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	4698      	mov	r8, r3
 8002110:	4663      	mov	r3, ip
 8002112:	4443      	add	r3, r8
 8002114:	9303      	str	r3, [sp, #12]
 8002116:	0c23      	lsrs	r3, r4, #16
 8002118:	4698      	mov	r8, r3
 800211a:	0033      	movs	r3, r6
 800211c:	0424      	lsls	r4, r4, #16
 800211e:	0c24      	lsrs	r4, r4, #16
 8002120:	4363      	muls	r3, r4
 8002122:	469c      	mov	ip, r3
 8002124:	0023      	movs	r3, r4
 8002126:	437b      	muls	r3, r7
 8002128:	4699      	mov	r9, r3
 800212a:	4643      	mov	r3, r8
 800212c:	435e      	muls	r6, r3
 800212e:	435f      	muls	r7, r3
 8002130:	444e      	add	r6, r9
 8002132:	4663      	mov	r3, ip
 8002134:	46b2      	mov	sl, r6
 8002136:	0c1e      	lsrs	r6, r3, #16
 8002138:	4456      	add	r6, sl
 800213a:	45b1      	cmp	r9, r6
 800213c:	d903      	bls.n	8002146 <__aeabi_dmul+0x202>
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	4699      	mov	r9, r3
 8002144:	444f      	add	r7, r9
 8002146:	0c33      	lsrs	r3, r6, #16
 8002148:	4699      	mov	r9, r3
 800214a:	003b      	movs	r3, r7
 800214c:	444b      	add	r3, r9
 800214e:	9305      	str	r3, [sp, #20]
 8002150:	4663      	mov	r3, ip
 8002152:	46ac      	mov	ip, r5
 8002154:	041f      	lsls	r7, r3, #16
 8002156:	0c3f      	lsrs	r7, r7, #16
 8002158:	0436      	lsls	r6, r6, #16
 800215a:	19f6      	adds	r6, r6, r7
 800215c:	44b4      	add	ip, r6
 800215e:	4663      	mov	r3, ip
 8002160:	9304      	str	r3, [sp, #16]
 8002162:	465b      	mov	r3, fp
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	469c      	mov	ip, r3
 8002168:	465b      	mov	r3, fp
 800216a:	041f      	lsls	r7, r3, #16
 800216c:	0c3f      	lsrs	r7, r7, #16
 800216e:	003b      	movs	r3, r7
 8002170:	4343      	muls	r3, r0
 8002172:	4699      	mov	r9, r3
 8002174:	4663      	mov	r3, ip
 8002176:	4343      	muls	r3, r0
 8002178:	469a      	mov	sl, r3
 800217a:	464b      	mov	r3, r9
 800217c:	4660      	mov	r0, ip
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	469b      	mov	fp, r3
 8002182:	4348      	muls	r0, r1
 8002184:	4379      	muls	r1, r7
 8002186:	4451      	add	r1, sl
 8002188:	4459      	add	r1, fp
 800218a:	458a      	cmp	sl, r1
 800218c:	d903      	bls.n	8002196 <__aeabi_dmul+0x252>
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	469a      	mov	sl, r3
 8002194:	4450      	add	r0, sl
 8002196:	0c0b      	lsrs	r3, r1, #16
 8002198:	469a      	mov	sl, r3
 800219a:	464b      	mov	r3, r9
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	4699      	mov	r9, r3
 80021a2:	003b      	movs	r3, r7
 80021a4:	4363      	muls	r3, r4
 80021a6:	0409      	lsls	r1, r1, #16
 80021a8:	4645      	mov	r5, r8
 80021aa:	4449      	add	r1, r9
 80021ac:	4699      	mov	r9, r3
 80021ae:	4663      	mov	r3, ip
 80021b0:	435c      	muls	r4, r3
 80021b2:	436b      	muls	r3, r5
 80021b4:	469c      	mov	ip, r3
 80021b6:	464b      	mov	r3, r9
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	4698      	mov	r8, r3
 80021bc:	436f      	muls	r7, r5
 80021be:	193f      	adds	r7, r7, r4
 80021c0:	4447      	add	r7, r8
 80021c2:	4450      	add	r0, sl
 80021c4:	42bc      	cmp	r4, r7
 80021c6:	d903      	bls.n	80021d0 <__aeabi_dmul+0x28c>
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	025b      	lsls	r3, r3, #9
 80021cc:	4698      	mov	r8, r3
 80021ce:	44c4      	add	ip, r8
 80021d0:	9b04      	ldr	r3, [sp, #16]
 80021d2:	9d00      	ldr	r5, [sp, #0]
 80021d4:	4698      	mov	r8, r3
 80021d6:	4445      	add	r5, r8
 80021d8:	42b5      	cmp	r5, r6
 80021da:	41b6      	sbcs	r6, r6
 80021dc:	4273      	negs	r3, r6
 80021de:	4698      	mov	r8, r3
 80021e0:	464b      	mov	r3, r9
 80021e2:	041e      	lsls	r6, r3, #16
 80021e4:	9b05      	ldr	r3, [sp, #20]
 80021e6:	043c      	lsls	r4, r7, #16
 80021e8:	4699      	mov	r9, r3
 80021ea:	0c36      	lsrs	r6, r6, #16
 80021ec:	19a4      	adds	r4, r4, r6
 80021ee:	444c      	add	r4, r9
 80021f0:	46a1      	mov	r9, r4
 80021f2:	4683      	mov	fp, r0
 80021f4:	186e      	adds	r6, r5, r1
 80021f6:	44c1      	add	r9, r8
 80021f8:	428e      	cmp	r6, r1
 80021fa:	4189      	sbcs	r1, r1
 80021fc:	44cb      	add	fp, r9
 80021fe:	465d      	mov	r5, fp
 8002200:	4249      	negs	r1, r1
 8002202:	186d      	adds	r5, r5, r1
 8002204:	429c      	cmp	r4, r3
 8002206:	41a4      	sbcs	r4, r4
 8002208:	45c1      	cmp	r9, r8
 800220a:	419b      	sbcs	r3, r3
 800220c:	4583      	cmp	fp, r0
 800220e:	4180      	sbcs	r0, r0
 8002210:	428d      	cmp	r5, r1
 8002212:	4189      	sbcs	r1, r1
 8002214:	425b      	negs	r3, r3
 8002216:	4264      	negs	r4, r4
 8002218:	431c      	orrs	r4, r3
 800221a:	4240      	negs	r0, r0
 800221c:	9b03      	ldr	r3, [sp, #12]
 800221e:	4249      	negs	r1, r1
 8002220:	4301      	orrs	r1, r0
 8002222:	0270      	lsls	r0, r6, #9
 8002224:	0c3f      	lsrs	r7, r7, #16
 8002226:	4318      	orrs	r0, r3
 8002228:	19e4      	adds	r4, r4, r7
 800222a:	1e47      	subs	r7, r0, #1
 800222c:	41b8      	sbcs	r0, r7
 800222e:	1864      	adds	r4, r4, r1
 8002230:	4464      	add	r4, ip
 8002232:	0df6      	lsrs	r6, r6, #23
 8002234:	0261      	lsls	r1, r4, #9
 8002236:	4330      	orrs	r0, r6
 8002238:	0dec      	lsrs	r4, r5, #23
 800223a:	026e      	lsls	r6, r5, #9
 800223c:	430c      	orrs	r4, r1
 800223e:	4330      	orrs	r0, r6
 8002240:	01c9      	lsls	r1, r1, #7
 8002242:	d400      	bmi.n	8002246 <__aeabi_dmul+0x302>
 8002244:	e0f1      	b.n	800242a <__aeabi_dmul+0x4e6>
 8002246:	2101      	movs	r1, #1
 8002248:	0843      	lsrs	r3, r0, #1
 800224a:	4001      	ands	r1, r0
 800224c:	430b      	orrs	r3, r1
 800224e:	07e0      	lsls	r0, r4, #31
 8002250:	4318      	orrs	r0, r3
 8002252:	0864      	lsrs	r4, r4, #1
 8002254:	4915      	ldr	r1, [pc, #84]	; (80022ac <__aeabi_dmul+0x368>)
 8002256:	9b02      	ldr	r3, [sp, #8]
 8002258:	468c      	mov	ip, r1
 800225a:	4463      	add	r3, ip
 800225c:	2b00      	cmp	r3, #0
 800225e:	dc00      	bgt.n	8002262 <__aeabi_dmul+0x31e>
 8002260:	e097      	b.n	8002392 <__aeabi_dmul+0x44e>
 8002262:	0741      	lsls	r1, r0, #29
 8002264:	d009      	beq.n	800227a <__aeabi_dmul+0x336>
 8002266:	210f      	movs	r1, #15
 8002268:	4001      	ands	r1, r0
 800226a:	2904      	cmp	r1, #4
 800226c:	d005      	beq.n	800227a <__aeabi_dmul+0x336>
 800226e:	1d01      	adds	r1, r0, #4
 8002270:	4281      	cmp	r1, r0
 8002272:	4180      	sbcs	r0, r0
 8002274:	4240      	negs	r0, r0
 8002276:	1824      	adds	r4, r4, r0
 8002278:	0008      	movs	r0, r1
 800227a:	01e1      	lsls	r1, r4, #7
 800227c:	d506      	bpl.n	800228c <__aeabi_dmul+0x348>
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	00c9      	lsls	r1, r1, #3
 8002282:	468c      	mov	ip, r1
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <__aeabi_dmul+0x36c>)
 8002286:	401c      	ands	r4, r3
 8002288:	9b02      	ldr	r3, [sp, #8]
 800228a:	4463      	add	r3, ip
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <__aeabi_dmul+0x370>)
 800228e:	428b      	cmp	r3, r1
 8002290:	dd00      	ble.n	8002294 <__aeabi_dmul+0x350>
 8002292:	e710      	b.n	80020b6 <__aeabi_dmul+0x172>
 8002294:	0761      	lsls	r1, r4, #29
 8002296:	08c5      	lsrs	r5, r0, #3
 8002298:	0264      	lsls	r4, r4, #9
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	430d      	orrs	r5, r1
 800229e:	0b24      	lsrs	r4, r4, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e6c1      	b.n	8002028 <__aeabi_dmul+0xe4>
 80022a4:	000007ff 	.word	0x000007ff
 80022a8:	fffffc01 	.word	0xfffffc01
 80022ac:	000003ff 	.word	0x000003ff
 80022b0:	feffffff 	.word	0xfeffffff
 80022b4:	000007fe 	.word	0x000007fe
 80022b8:	464b      	mov	r3, r9
 80022ba:	4323      	orrs	r3, r4
 80022bc:	d059      	beq.n	8002372 <__aeabi_dmul+0x42e>
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dmul+0x380>
 80022c2:	e0a3      	b.n	800240c <__aeabi_dmul+0x4c8>
 80022c4:	0020      	movs	r0, r4
 80022c6:	f000 fdf9 	bl	8002ebc <__clzsi2>
 80022ca:	0001      	movs	r1, r0
 80022cc:	0003      	movs	r3, r0
 80022ce:	390b      	subs	r1, #11
 80022d0:	221d      	movs	r2, #29
 80022d2:	1a52      	subs	r2, r2, r1
 80022d4:	4649      	mov	r1, r9
 80022d6:	0018      	movs	r0, r3
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	464a      	mov	r2, r9
 80022dc:	3808      	subs	r0, #8
 80022de:	4082      	lsls	r2, r0
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0010      	movs	r0, r2
 80022e4:	430c      	orrs	r4, r1
 80022e6:	4a74      	ldr	r2, [pc, #464]	; (80024b8 <__aeabi_dmul+0x574>)
 80022e8:	1aeb      	subs	r3, r5, r3
 80022ea:	4694      	mov	ip, r2
 80022ec:	4642      	mov	r2, r8
 80022ee:	4463      	add	r3, ip
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	9b01      	ldr	r3, [sp, #4]
 80022f4:	407a      	eors	r2, r7
 80022f6:	3301      	adds	r3, #1
 80022f8:	2100      	movs	r1, #0
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	2e0a      	cmp	r6, #10
 8002300:	dd00      	ble.n	8002304 <__aeabi_dmul+0x3c0>
 8002302:	e667      	b.n	8001fd4 <__aeabi_dmul+0x90>
 8002304:	e683      	b.n	800200e <__aeabi_dmul+0xca>
 8002306:	465b      	mov	r3, fp
 8002308:	4303      	orrs	r3, r0
 800230a:	469a      	mov	sl, r3
 800230c:	d02a      	beq.n	8002364 <__aeabi_dmul+0x420>
 800230e:	465b      	mov	r3, fp
 8002310:	2b00      	cmp	r3, #0
 8002312:	d06d      	beq.n	80023f0 <__aeabi_dmul+0x4ac>
 8002314:	4658      	mov	r0, fp
 8002316:	f000 fdd1 	bl	8002ebc <__clzsi2>
 800231a:	0001      	movs	r1, r0
 800231c:	0003      	movs	r3, r0
 800231e:	390b      	subs	r1, #11
 8002320:	221d      	movs	r2, #29
 8002322:	1a52      	subs	r2, r2, r1
 8002324:	0021      	movs	r1, r4
 8002326:	0018      	movs	r0, r3
 8002328:	465d      	mov	r5, fp
 800232a:	40d1      	lsrs	r1, r2
 800232c:	3808      	subs	r0, #8
 800232e:	4085      	lsls	r5, r0
 8002330:	000a      	movs	r2, r1
 8002332:	4084      	lsls	r4, r0
 8002334:	432a      	orrs	r2, r5
 8002336:	4693      	mov	fp, r2
 8002338:	46a2      	mov	sl, r4
 800233a:	4d5f      	ldr	r5, [pc, #380]	; (80024b8 <__aeabi_dmul+0x574>)
 800233c:	2600      	movs	r6, #0
 800233e:	1aed      	subs	r5, r5, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	e625      	b.n	8001f92 <__aeabi_dmul+0x4e>
 8002346:	465b      	mov	r3, fp
 8002348:	4303      	orrs	r3, r0
 800234a:	469a      	mov	sl, r3
 800234c:	d105      	bne.n	800235a <__aeabi_dmul+0x416>
 800234e:	2300      	movs	r3, #0
 8002350:	469b      	mov	fp, r3
 8002352:	3302      	adds	r3, #2
 8002354:	2608      	movs	r6, #8
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	e61b      	b.n	8001f92 <__aeabi_dmul+0x4e>
 800235a:	2303      	movs	r3, #3
 800235c:	4682      	mov	sl, r0
 800235e:	260c      	movs	r6, #12
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	e616      	b.n	8001f92 <__aeabi_dmul+0x4e>
 8002364:	2300      	movs	r3, #0
 8002366:	469b      	mov	fp, r3
 8002368:	3301      	adds	r3, #1
 800236a:	2604      	movs	r6, #4
 800236c:	2500      	movs	r5, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	e60f      	b.n	8001f92 <__aeabi_dmul+0x4e>
 8002372:	4642      	mov	r2, r8
 8002374:	3301      	adds	r3, #1
 8002376:	9501      	str	r5, [sp, #4]
 8002378:	431e      	orrs	r6, r3
 800237a:	9b01      	ldr	r3, [sp, #4]
 800237c:	407a      	eors	r2, r7
 800237e:	3301      	adds	r3, #1
 8002380:	2400      	movs	r4, #0
 8002382:	2000      	movs	r0, #0
 8002384:	2101      	movs	r1, #1
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	2e0a      	cmp	r6, #10
 800238c:	dd00      	ble.n	8002390 <__aeabi_dmul+0x44c>
 800238e:	e621      	b.n	8001fd4 <__aeabi_dmul+0x90>
 8002390:	e63d      	b.n	800200e <__aeabi_dmul+0xca>
 8002392:	2101      	movs	r1, #1
 8002394:	1ac9      	subs	r1, r1, r3
 8002396:	2938      	cmp	r1, #56	; 0x38
 8002398:	dd00      	ble.n	800239c <__aeabi_dmul+0x458>
 800239a:	e642      	b.n	8002022 <__aeabi_dmul+0xde>
 800239c:	291f      	cmp	r1, #31
 800239e:	dd47      	ble.n	8002430 <__aeabi_dmul+0x4ec>
 80023a0:	261f      	movs	r6, #31
 80023a2:	0025      	movs	r5, r4
 80023a4:	4276      	negs	r6, r6
 80023a6:	1af3      	subs	r3, r6, r3
 80023a8:	40dd      	lsrs	r5, r3
 80023aa:	002b      	movs	r3, r5
 80023ac:	2920      	cmp	r1, #32
 80023ae:	d005      	beq.n	80023bc <__aeabi_dmul+0x478>
 80023b0:	4942      	ldr	r1, [pc, #264]	; (80024bc <__aeabi_dmul+0x578>)
 80023b2:	9d02      	ldr	r5, [sp, #8]
 80023b4:	468c      	mov	ip, r1
 80023b6:	4465      	add	r5, ip
 80023b8:	40ac      	lsls	r4, r5
 80023ba:	4320      	orrs	r0, r4
 80023bc:	1e41      	subs	r1, r0, #1
 80023be:	4188      	sbcs	r0, r1
 80023c0:	4318      	orrs	r0, r3
 80023c2:	2307      	movs	r3, #7
 80023c4:	001d      	movs	r5, r3
 80023c6:	2400      	movs	r4, #0
 80023c8:	4005      	ands	r5, r0
 80023ca:	4203      	tst	r3, r0
 80023cc:	d04a      	beq.n	8002464 <__aeabi_dmul+0x520>
 80023ce:	230f      	movs	r3, #15
 80023d0:	2400      	movs	r4, #0
 80023d2:	4003      	ands	r3, r0
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d042      	beq.n	800245e <__aeabi_dmul+0x51a>
 80023d8:	1d03      	adds	r3, r0, #4
 80023da:	4283      	cmp	r3, r0
 80023dc:	4180      	sbcs	r0, r0
 80023de:	4240      	negs	r0, r0
 80023e0:	1824      	adds	r4, r4, r0
 80023e2:	0018      	movs	r0, r3
 80023e4:	0223      	lsls	r3, r4, #8
 80023e6:	d53a      	bpl.n	800245e <__aeabi_dmul+0x51a>
 80023e8:	2301      	movs	r3, #1
 80023ea:	2400      	movs	r4, #0
 80023ec:	2500      	movs	r5, #0
 80023ee:	e61b      	b.n	8002028 <__aeabi_dmul+0xe4>
 80023f0:	f000 fd64 	bl	8002ebc <__clzsi2>
 80023f4:	0001      	movs	r1, r0
 80023f6:	0003      	movs	r3, r0
 80023f8:	3115      	adds	r1, #21
 80023fa:	3320      	adds	r3, #32
 80023fc:	291c      	cmp	r1, #28
 80023fe:	dd8f      	ble.n	8002320 <__aeabi_dmul+0x3dc>
 8002400:	3808      	subs	r0, #8
 8002402:	2200      	movs	r2, #0
 8002404:	4084      	lsls	r4, r0
 8002406:	4692      	mov	sl, r2
 8002408:	46a3      	mov	fp, r4
 800240a:	e796      	b.n	800233a <__aeabi_dmul+0x3f6>
 800240c:	f000 fd56 	bl	8002ebc <__clzsi2>
 8002410:	0001      	movs	r1, r0
 8002412:	0003      	movs	r3, r0
 8002414:	3115      	adds	r1, #21
 8002416:	3320      	adds	r3, #32
 8002418:	291c      	cmp	r1, #28
 800241a:	dc00      	bgt.n	800241e <__aeabi_dmul+0x4da>
 800241c:	e758      	b.n	80022d0 <__aeabi_dmul+0x38c>
 800241e:	0002      	movs	r2, r0
 8002420:	464c      	mov	r4, r9
 8002422:	3a08      	subs	r2, #8
 8002424:	2000      	movs	r0, #0
 8002426:	4094      	lsls	r4, r2
 8002428:	e75d      	b.n	80022e6 <__aeabi_dmul+0x3a2>
 800242a:	9b01      	ldr	r3, [sp, #4]
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	e711      	b.n	8002254 <__aeabi_dmul+0x310>
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <__aeabi_dmul+0x57c>)
 8002432:	0026      	movs	r6, r4
 8002434:	469c      	mov	ip, r3
 8002436:	0003      	movs	r3, r0
 8002438:	9d02      	ldr	r5, [sp, #8]
 800243a:	40cb      	lsrs	r3, r1
 800243c:	4465      	add	r5, ip
 800243e:	40ae      	lsls	r6, r5
 8002440:	431e      	orrs	r6, r3
 8002442:	0003      	movs	r3, r0
 8002444:	40ab      	lsls	r3, r5
 8002446:	1e58      	subs	r0, r3, #1
 8002448:	4183      	sbcs	r3, r0
 800244a:	0030      	movs	r0, r6
 800244c:	4318      	orrs	r0, r3
 800244e:	40cc      	lsrs	r4, r1
 8002450:	0743      	lsls	r3, r0, #29
 8002452:	d0c7      	beq.n	80023e4 <__aeabi_dmul+0x4a0>
 8002454:	230f      	movs	r3, #15
 8002456:	4003      	ands	r3, r0
 8002458:	2b04      	cmp	r3, #4
 800245a:	d1bd      	bne.n	80023d8 <__aeabi_dmul+0x494>
 800245c:	e7c2      	b.n	80023e4 <__aeabi_dmul+0x4a0>
 800245e:	0765      	lsls	r5, r4, #29
 8002460:	0264      	lsls	r4, r4, #9
 8002462:	0b24      	lsrs	r4, r4, #12
 8002464:	08c0      	lsrs	r0, r0, #3
 8002466:	2300      	movs	r3, #0
 8002468:	4305      	orrs	r5, r0
 800246a:	e5dd      	b.n	8002028 <__aeabi_dmul+0xe4>
 800246c:	2500      	movs	r5, #0
 800246e:	2302      	movs	r3, #2
 8002470:	2e0f      	cmp	r6, #15
 8002472:	d10c      	bne.n	800248e <__aeabi_dmul+0x54a>
 8002474:	2480      	movs	r4, #128	; 0x80
 8002476:	465b      	mov	r3, fp
 8002478:	0324      	lsls	r4, r4, #12
 800247a:	4223      	tst	r3, r4
 800247c:	d00e      	beq.n	800249c <__aeabi_dmul+0x558>
 800247e:	4221      	tst	r1, r4
 8002480:	d10c      	bne.n	800249c <__aeabi_dmul+0x558>
 8002482:	430c      	orrs	r4, r1
 8002484:	0324      	lsls	r4, r4, #12
 8002486:	003a      	movs	r2, r7
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <__aeabi_dmul+0x580>)
 800248a:	0b24      	lsrs	r4, r4, #12
 800248c:	e5cc      	b.n	8002028 <__aeabi_dmul+0xe4>
 800248e:	2e0b      	cmp	r6, #11
 8002490:	d000      	beq.n	8002494 <__aeabi_dmul+0x550>
 8002492:	e5a2      	b.n	8001fda <__aeabi_dmul+0x96>
 8002494:	468b      	mov	fp, r1
 8002496:	46aa      	mov	sl, r5
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	e5f7      	b.n	800208c <__aeabi_dmul+0x148>
 800249c:	2480      	movs	r4, #128	; 0x80
 800249e:	465b      	mov	r3, fp
 80024a0:	0324      	lsls	r4, r4, #12
 80024a2:	431c      	orrs	r4, r3
 80024a4:	0324      	lsls	r4, r4, #12
 80024a6:	4642      	mov	r2, r8
 80024a8:	4655      	mov	r5, sl
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <__aeabi_dmul+0x580>)
 80024ac:	0b24      	lsrs	r4, r4, #12
 80024ae:	e5bb      	b.n	8002028 <__aeabi_dmul+0xe4>
 80024b0:	464d      	mov	r5, r9
 80024b2:	0021      	movs	r1, r4
 80024b4:	2303      	movs	r3, #3
 80024b6:	e7db      	b.n	8002470 <__aeabi_dmul+0x52c>
 80024b8:	fffffc0d 	.word	0xfffffc0d
 80024bc:	0000043e 	.word	0x0000043e
 80024c0:	0000041e 	.word	0x0000041e
 80024c4:	000007ff 	.word	0x000007ff

080024c8 <__aeabi_dsub>:
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	4657      	mov	r7, sl
 80024cc:	464e      	mov	r6, r9
 80024ce:	4645      	mov	r5, r8
 80024d0:	46de      	mov	lr, fp
 80024d2:	b5e0      	push	{r5, r6, r7, lr}
 80024d4:	000d      	movs	r5, r1
 80024d6:	0004      	movs	r4, r0
 80024d8:	0019      	movs	r1, r3
 80024da:	0010      	movs	r0, r2
 80024dc:	032b      	lsls	r3, r5, #12
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	0f62      	lsrs	r2, r4, #29
 80024e2:	431a      	orrs	r2, r3
 80024e4:	00e3      	lsls	r3, r4, #3
 80024e6:	030c      	lsls	r4, r1, #12
 80024e8:	0a64      	lsrs	r4, r4, #9
 80024ea:	0f47      	lsrs	r7, r0, #29
 80024ec:	4327      	orrs	r7, r4
 80024ee:	4cd0      	ldr	r4, [pc, #832]	; (8002830 <__aeabi_dsub+0x368>)
 80024f0:	006e      	lsls	r6, r5, #1
 80024f2:	4691      	mov	r9, r2
 80024f4:	b083      	sub	sp, #12
 80024f6:	004a      	lsls	r2, r1, #1
 80024f8:	00c0      	lsls	r0, r0, #3
 80024fa:	4698      	mov	r8, r3
 80024fc:	46a2      	mov	sl, r4
 80024fe:	0d76      	lsrs	r6, r6, #21
 8002500:	0fed      	lsrs	r5, r5, #31
 8002502:	0d52      	lsrs	r2, r2, #21
 8002504:	0fc9      	lsrs	r1, r1, #31
 8002506:	9001      	str	r0, [sp, #4]
 8002508:	42a2      	cmp	r2, r4
 800250a:	d100      	bne.n	800250e <__aeabi_dsub+0x46>
 800250c:	e0b9      	b.n	8002682 <__aeabi_dsub+0x1ba>
 800250e:	2401      	movs	r4, #1
 8002510:	4061      	eors	r1, r4
 8002512:	468b      	mov	fp, r1
 8002514:	428d      	cmp	r5, r1
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x52>
 8002518:	e08d      	b.n	8002636 <__aeabi_dsub+0x16e>
 800251a:	1ab4      	subs	r4, r6, r2
 800251c:	46a4      	mov	ip, r4
 800251e:	2c00      	cmp	r4, #0
 8002520:	dc00      	bgt.n	8002524 <__aeabi_dsub+0x5c>
 8002522:	e0b7      	b.n	8002694 <__aeabi_dsub+0x1cc>
 8002524:	2a00      	cmp	r2, #0
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x62>
 8002528:	e0cb      	b.n	80026c2 <__aeabi_dsub+0x1fa>
 800252a:	4ac1      	ldr	r2, [pc, #772]	; (8002830 <__aeabi_dsub+0x368>)
 800252c:	4296      	cmp	r6, r2
 800252e:	d100      	bne.n	8002532 <__aeabi_dsub+0x6a>
 8002530:	e186      	b.n	8002840 <__aeabi_dsub+0x378>
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	0412      	lsls	r2, r2, #16
 8002536:	4317      	orrs	r7, r2
 8002538:	4662      	mov	r2, ip
 800253a:	2a38      	cmp	r2, #56	; 0x38
 800253c:	dd00      	ble.n	8002540 <__aeabi_dsub+0x78>
 800253e:	e1a4      	b.n	800288a <__aeabi_dsub+0x3c2>
 8002540:	2a1f      	cmp	r2, #31
 8002542:	dd00      	ble.n	8002546 <__aeabi_dsub+0x7e>
 8002544:	e21d      	b.n	8002982 <__aeabi_dsub+0x4ba>
 8002546:	4661      	mov	r1, ip
 8002548:	2220      	movs	r2, #32
 800254a:	003c      	movs	r4, r7
 800254c:	1a52      	subs	r2, r2, r1
 800254e:	0001      	movs	r1, r0
 8002550:	4090      	lsls	r0, r2
 8002552:	4094      	lsls	r4, r2
 8002554:	1e42      	subs	r2, r0, #1
 8002556:	4190      	sbcs	r0, r2
 8002558:	4662      	mov	r2, ip
 800255a:	46a0      	mov	r8, r4
 800255c:	4664      	mov	r4, ip
 800255e:	40d7      	lsrs	r7, r2
 8002560:	464a      	mov	r2, r9
 8002562:	40e1      	lsrs	r1, r4
 8002564:	4644      	mov	r4, r8
 8002566:	1bd2      	subs	r2, r2, r7
 8002568:	4691      	mov	r9, r2
 800256a:	430c      	orrs	r4, r1
 800256c:	4304      	orrs	r4, r0
 800256e:	1b1c      	subs	r4, r3, r4
 8002570:	42a3      	cmp	r3, r4
 8002572:	4192      	sbcs	r2, r2
 8002574:	464b      	mov	r3, r9
 8002576:	4252      	negs	r2, r2
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	469a      	mov	sl, r3
 800257c:	4653      	mov	r3, sl
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	d400      	bmi.n	8002584 <__aeabi_dsub+0xbc>
 8002582:	e12b      	b.n	80027dc <__aeabi_dsub+0x314>
 8002584:	4653      	mov	r3, sl
 8002586:	025a      	lsls	r2, r3, #9
 8002588:	0a53      	lsrs	r3, r2, #9
 800258a:	469a      	mov	sl, r3
 800258c:	4653      	mov	r3, sl
 800258e:	2b00      	cmp	r3, #0
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0xcc>
 8002592:	e166      	b.n	8002862 <__aeabi_dsub+0x39a>
 8002594:	4650      	mov	r0, sl
 8002596:	f000 fc91 	bl	8002ebc <__clzsi2>
 800259a:	0003      	movs	r3, r0
 800259c:	3b08      	subs	r3, #8
 800259e:	2220      	movs	r2, #32
 80025a0:	0020      	movs	r0, r4
 80025a2:	1ad2      	subs	r2, r2, r3
 80025a4:	4651      	mov	r1, sl
 80025a6:	40d0      	lsrs	r0, r2
 80025a8:	4099      	lsls	r1, r3
 80025aa:	0002      	movs	r2, r0
 80025ac:	409c      	lsls	r4, r3
 80025ae:	430a      	orrs	r2, r1
 80025b0:	429e      	cmp	r6, r3
 80025b2:	dd00      	ble.n	80025b6 <__aeabi_dsub+0xee>
 80025b4:	e164      	b.n	8002880 <__aeabi_dsub+0x3b8>
 80025b6:	1b9b      	subs	r3, r3, r6
 80025b8:	1c59      	adds	r1, r3, #1
 80025ba:	291f      	cmp	r1, #31
 80025bc:	dd00      	ble.n	80025c0 <__aeabi_dsub+0xf8>
 80025be:	e0fe      	b.n	80027be <__aeabi_dsub+0x2f6>
 80025c0:	2320      	movs	r3, #32
 80025c2:	0010      	movs	r0, r2
 80025c4:	0026      	movs	r6, r4
 80025c6:	1a5b      	subs	r3, r3, r1
 80025c8:	409c      	lsls	r4, r3
 80025ca:	4098      	lsls	r0, r3
 80025cc:	40ce      	lsrs	r6, r1
 80025ce:	40ca      	lsrs	r2, r1
 80025d0:	1e63      	subs	r3, r4, #1
 80025d2:	419c      	sbcs	r4, r3
 80025d4:	4330      	orrs	r0, r6
 80025d6:	4692      	mov	sl, r2
 80025d8:	2600      	movs	r6, #0
 80025da:	4304      	orrs	r4, r0
 80025dc:	0763      	lsls	r3, r4, #29
 80025de:	d009      	beq.n	80025f4 <__aeabi_dsub+0x12c>
 80025e0:	230f      	movs	r3, #15
 80025e2:	4023      	ands	r3, r4
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d005      	beq.n	80025f4 <__aeabi_dsub+0x12c>
 80025e8:	1d23      	adds	r3, r4, #4
 80025ea:	42a3      	cmp	r3, r4
 80025ec:	41a4      	sbcs	r4, r4
 80025ee:	4264      	negs	r4, r4
 80025f0:	44a2      	add	sl, r4
 80025f2:	001c      	movs	r4, r3
 80025f4:	4653      	mov	r3, sl
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	d400      	bmi.n	80025fc <__aeabi_dsub+0x134>
 80025fa:	e0f2      	b.n	80027e2 <__aeabi_dsub+0x31a>
 80025fc:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <__aeabi_dsub+0x368>)
 80025fe:	3601      	adds	r6, #1
 8002600:	429e      	cmp	r6, r3
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x13e>
 8002604:	e10f      	b.n	8002826 <__aeabi_dsub+0x35e>
 8002606:	4653      	mov	r3, sl
 8002608:	498a      	ldr	r1, [pc, #552]	; (8002834 <__aeabi_dsub+0x36c>)
 800260a:	08e4      	lsrs	r4, r4, #3
 800260c:	400b      	ands	r3, r1
 800260e:	0019      	movs	r1, r3
 8002610:	075b      	lsls	r3, r3, #29
 8002612:	4323      	orrs	r3, r4
 8002614:	0572      	lsls	r2, r6, #21
 8002616:	024c      	lsls	r4, r1, #9
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	0d52      	lsrs	r2, r2, #21
 800261c:	0512      	lsls	r2, r2, #20
 800261e:	4322      	orrs	r2, r4
 8002620:	07ed      	lsls	r5, r5, #31
 8002622:	432a      	orrs	r2, r5
 8002624:	0018      	movs	r0, r3
 8002626:	0011      	movs	r1, r2
 8002628:	b003      	add	sp, #12
 800262a:	bcf0      	pop	{r4, r5, r6, r7}
 800262c:	46bb      	mov	fp, r7
 800262e:	46b2      	mov	sl, r6
 8002630:	46a9      	mov	r9, r5
 8002632:	46a0      	mov	r8, r4
 8002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002636:	1ab4      	subs	r4, r6, r2
 8002638:	46a4      	mov	ip, r4
 800263a:	2c00      	cmp	r4, #0
 800263c:	dd59      	ble.n	80026f2 <__aeabi_dsub+0x22a>
 800263e:	2a00      	cmp	r2, #0
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x17c>
 8002642:	e0b0      	b.n	80027a6 <__aeabi_dsub+0x2de>
 8002644:	4556      	cmp	r6, sl
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x182>
 8002648:	e0fa      	b.n	8002840 <__aeabi_dsub+0x378>
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0412      	lsls	r2, r2, #16
 800264e:	4317      	orrs	r7, r2
 8002650:	4662      	mov	r2, ip
 8002652:	2a38      	cmp	r2, #56	; 0x38
 8002654:	dd00      	ble.n	8002658 <__aeabi_dsub+0x190>
 8002656:	e0d4      	b.n	8002802 <__aeabi_dsub+0x33a>
 8002658:	2a1f      	cmp	r2, #31
 800265a:	dc00      	bgt.n	800265e <__aeabi_dsub+0x196>
 800265c:	e1c0      	b.n	80029e0 <__aeabi_dsub+0x518>
 800265e:	0039      	movs	r1, r7
 8002660:	3a20      	subs	r2, #32
 8002662:	40d1      	lsrs	r1, r2
 8002664:	4662      	mov	r2, ip
 8002666:	2a20      	cmp	r2, #32
 8002668:	d006      	beq.n	8002678 <__aeabi_dsub+0x1b0>
 800266a:	4664      	mov	r4, ip
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	1b12      	subs	r2, r2, r4
 8002670:	003c      	movs	r4, r7
 8002672:	4094      	lsls	r4, r2
 8002674:	4304      	orrs	r4, r0
 8002676:	9401      	str	r4, [sp, #4]
 8002678:	9c01      	ldr	r4, [sp, #4]
 800267a:	1e62      	subs	r2, r4, #1
 800267c:	4194      	sbcs	r4, r2
 800267e:	430c      	orrs	r4, r1
 8002680:	e0c3      	b.n	800280a <__aeabi_dsub+0x342>
 8002682:	003c      	movs	r4, r7
 8002684:	4304      	orrs	r4, r0
 8002686:	d02b      	beq.n	80026e0 <__aeabi_dsub+0x218>
 8002688:	468b      	mov	fp, r1
 800268a:	428d      	cmp	r5, r1
 800268c:	d02e      	beq.n	80026ec <__aeabi_dsub+0x224>
 800268e:	4c6a      	ldr	r4, [pc, #424]	; (8002838 <__aeabi_dsub+0x370>)
 8002690:	46a4      	mov	ip, r4
 8002692:	44b4      	add	ip, r6
 8002694:	4664      	mov	r4, ip
 8002696:	2c00      	cmp	r4, #0
 8002698:	d05f      	beq.n	800275a <__aeabi_dsub+0x292>
 800269a:	1b94      	subs	r4, r2, r6
 800269c:	46a4      	mov	ip, r4
 800269e:	2e00      	cmp	r6, #0
 80026a0:	d000      	beq.n	80026a4 <__aeabi_dsub+0x1dc>
 80026a2:	e120      	b.n	80028e6 <__aeabi_dsub+0x41e>
 80026a4:	464c      	mov	r4, r9
 80026a6:	431c      	orrs	r4, r3
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x1e4>
 80026aa:	e1c7      	b.n	8002a3c <__aeabi_dsub+0x574>
 80026ac:	4661      	mov	r1, ip
 80026ae:	1e4c      	subs	r4, r1, #1
 80026b0:	2901      	cmp	r1, #1
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x1ee>
 80026b4:	e223      	b.n	8002afe <__aeabi_dsub+0x636>
 80026b6:	4d5e      	ldr	r5, [pc, #376]	; (8002830 <__aeabi_dsub+0x368>)
 80026b8:	45ac      	cmp	ip, r5
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0x1f6>
 80026bc:	e1d8      	b.n	8002a70 <__aeabi_dsub+0x5a8>
 80026be:	46a4      	mov	ip, r4
 80026c0:	e11a      	b.n	80028f8 <__aeabi_dsub+0x430>
 80026c2:	003a      	movs	r2, r7
 80026c4:	4302      	orrs	r2, r0
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x202>
 80026c8:	e0e4      	b.n	8002894 <__aeabi_dsub+0x3cc>
 80026ca:	0022      	movs	r2, r4
 80026cc:	3a01      	subs	r2, #1
 80026ce:	2c01      	cmp	r4, #1
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dsub+0x20c>
 80026d2:	e1c3      	b.n	8002a5c <__aeabi_dsub+0x594>
 80026d4:	4956      	ldr	r1, [pc, #344]	; (8002830 <__aeabi_dsub+0x368>)
 80026d6:	428c      	cmp	r4, r1
 80026d8:	d100      	bne.n	80026dc <__aeabi_dsub+0x214>
 80026da:	e0b1      	b.n	8002840 <__aeabi_dsub+0x378>
 80026dc:	4694      	mov	ip, r2
 80026de:	e72b      	b.n	8002538 <__aeabi_dsub+0x70>
 80026e0:	2401      	movs	r4, #1
 80026e2:	4061      	eors	r1, r4
 80026e4:	468b      	mov	fp, r1
 80026e6:	428d      	cmp	r5, r1
 80026e8:	d000      	beq.n	80026ec <__aeabi_dsub+0x224>
 80026ea:	e716      	b.n	800251a <__aeabi_dsub+0x52>
 80026ec:	4952      	ldr	r1, [pc, #328]	; (8002838 <__aeabi_dsub+0x370>)
 80026ee:	468c      	mov	ip, r1
 80026f0:	44b4      	add	ip, r6
 80026f2:	4664      	mov	r4, ip
 80026f4:	2c00      	cmp	r4, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x232>
 80026f8:	e0d3      	b.n	80028a2 <__aeabi_dsub+0x3da>
 80026fa:	1b91      	subs	r1, r2, r6
 80026fc:	468c      	mov	ip, r1
 80026fe:	2e00      	cmp	r6, #0
 8002700:	d100      	bne.n	8002704 <__aeabi_dsub+0x23c>
 8002702:	e15e      	b.n	80029c2 <__aeabi_dsub+0x4fa>
 8002704:	494a      	ldr	r1, [pc, #296]	; (8002830 <__aeabi_dsub+0x368>)
 8002706:	428a      	cmp	r2, r1
 8002708:	d100      	bne.n	800270c <__aeabi_dsub+0x244>
 800270a:	e1be      	b.n	8002a8a <__aeabi_dsub+0x5c2>
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	464c      	mov	r4, r9
 8002710:	0409      	lsls	r1, r1, #16
 8002712:	430c      	orrs	r4, r1
 8002714:	46a1      	mov	r9, r4
 8002716:	4661      	mov	r1, ip
 8002718:	2938      	cmp	r1, #56	; 0x38
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0x256>
 800271c:	e1ba      	b.n	8002a94 <__aeabi_dsub+0x5cc>
 800271e:	291f      	cmp	r1, #31
 8002720:	dd00      	ble.n	8002724 <__aeabi_dsub+0x25c>
 8002722:	e227      	b.n	8002b74 <__aeabi_dsub+0x6ac>
 8002724:	2420      	movs	r4, #32
 8002726:	1a64      	subs	r4, r4, r1
 8002728:	4649      	mov	r1, r9
 800272a:	40a1      	lsls	r1, r4
 800272c:	001e      	movs	r6, r3
 800272e:	4688      	mov	r8, r1
 8002730:	4661      	mov	r1, ip
 8002732:	40a3      	lsls	r3, r4
 8002734:	40ce      	lsrs	r6, r1
 8002736:	4641      	mov	r1, r8
 8002738:	1e5c      	subs	r4, r3, #1
 800273a:	41a3      	sbcs	r3, r4
 800273c:	4331      	orrs	r1, r6
 800273e:	4319      	orrs	r1, r3
 8002740:	000c      	movs	r4, r1
 8002742:	4663      	mov	r3, ip
 8002744:	4649      	mov	r1, r9
 8002746:	40d9      	lsrs	r1, r3
 8002748:	187f      	adds	r7, r7, r1
 800274a:	1824      	adds	r4, r4, r0
 800274c:	4284      	cmp	r4, r0
 800274e:	419b      	sbcs	r3, r3
 8002750:	425b      	negs	r3, r3
 8002752:	469a      	mov	sl, r3
 8002754:	0016      	movs	r6, r2
 8002756:	44ba      	add	sl, r7
 8002758:	e05d      	b.n	8002816 <__aeabi_dsub+0x34e>
 800275a:	4c38      	ldr	r4, [pc, #224]	; (800283c <__aeabi_dsub+0x374>)
 800275c:	1c72      	adds	r2, r6, #1
 800275e:	4222      	tst	r2, r4
 8002760:	d000      	beq.n	8002764 <__aeabi_dsub+0x29c>
 8002762:	e0df      	b.n	8002924 <__aeabi_dsub+0x45c>
 8002764:	464a      	mov	r2, r9
 8002766:	431a      	orrs	r2, r3
 8002768:	2e00      	cmp	r6, #0
 800276a:	d000      	beq.n	800276e <__aeabi_dsub+0x2a6>
 800276c:	e15c      	b.n	8002a28 <__aeabi_dsub+0x560>
 800276e:	2a00      	cmp	r2, #0
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x2ac>
 8002772:	e1cf      	b.n	8002b14 <__aeabi_dsub+0x64c>
 8002774:	003a      	movs	r2, r7
 8002776:	4302      	orrs	r2, r0
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x2b4>
 800277a:	e17f      	b.n	8002a7c <__aeabi_dsub+0x5b4>
 800277c:	1a1c      	subs	r4, r3, r0
 800277e:	464a      	mov	r2, r9
 8002780:	42a3      	cmp	r3, r4
 8002782:	4189      	sbcs	r1, r1
 8002784:	1bd2      	subs	r2, r2, r7
 8002786:	4249      	negs	r1, r1
 8002788:	1a52      	subs	r2, r2, r1
 800278a:	4692      	mov	sl, r2
 800278c:	0212      	lsls	r2, r2, #8
 800278e:	d400      	bmi.n	8002792 <__aeabi_dsub+0x2ca>
 8002790:	e20a      	b.n	8002ba8 <__aeabi_dsub+0x6e0>
 8002792:	1ac4      	subs	r4, r0, r3
 8002794:	42a0      	cmp	r0, r4
 8002796:	4180      	sbcs	r0, r0
 8002798:	464b      	mov	r3, r9
 800279a:	4240      	negs	r0, r0
 800279c:	1aff      	subs	r7, r7, r3
 800279e:	1a3b      	subs	r3, r7, r0
 80027a0:	469a      	mov	sl, r3
 80027a2:	465d      	mov	r5, fp
 80027a4:	e71a      	b.n	80025dc <__aeabi_dsub+0x114>
 80027a6:	003a      	movs	r2, r7
 80027a8:	4302      	orrs	r2, r0
 80027aa:	d073      	beq.n	8002894 <__aeabi_dsub+0x3cc>
 80027ac:	0022      	movs	r2, r4
 80027ae:	3a01      	subs	r2, #1
 80027b0:	2c01      	cmp	r4, #1
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x2ee>
 80027b4:	e0cb      	b.n	800294e <__aeabi_dsub+0x486>
 80027b6:	4554      	cmp	r4, sl
 80027b8:	d042      	beq.n	8002840 <__aeabi_dsub+0x378>
 80027ba:	4694      	mov	ip, r2
 80027bc:	e748      	b.n	8002650 <__aeabi_dsub+0x188>
 80027be:	0010      	movs	r0, r2
 80027c0:	3b1f      	subs	r3, #31
 80027c2:	40d8      	lsrs	r0, r3
 80027c4:	2920      	cmp	r1, #32
 80027c6:	d003      	beq.n	80027d0 <__aeabi_dsub+0x308>
 80027c8:	2340      	movs	r3, #64	; 0x40
 80027ca:	1a5b      	subs	r3, r3, r1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	4314      	orrs	r4, r2
 80027d0:	1e63      	subs	r3, r4, #1
 80027d2:	419c      	sbcs	r4, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	2600      	movs	r6, #0
 80027d8:	469a      	mov	sl, r3
 80027da:	4304      	orrs	r4, r0
 80027dc:	0763      	lsls	r3, r4, #29
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x31a>
 80027e0:	e6fe      	b.n	80025e0 <__aeabi_dsub+0x118>
 80027e2:	4652      	mov	r2, sl
 80027e4:	08e3      	lsrs	r3, r4, #3
 80027e6:	0752      	lsls	r2, r2, #29
 80027e8:	4313      	orrs	r3, r2
 80027ea:	4652      	mov	r2, sl
 80027ec:	46b4      	mov	ip, r6
 80027ee:	08d2      	lsrs	r2, r2, #3
 80027f0:	490f      	ldr	r1, [pc, #60]	; (8002830 <__aeabi_dsub+0x368>)
 80027f2:	458c      	cmp	ip, r1
 80027f4:	d02a      	beq.n	800284c <__aeabi_dsub+0x384>
 80027f6:	0312      	lsls	r2, r2, #12
 80027f8:	0b14      	lsrs	r4, r2, #12
 80027fa:	4662      	mov	r2, ip
 80027fc:	0552      	lsls	r2, r2, #21
 80027fe:	0d52      	lsrs	r2, r2, #21
 8002800:	e70c      	b.n	800261c <__aeabi_dsub+0x154>
 8002802:	003c      	movs	r4, r7
 8002804:	4304      	orrs	r4, r0
 8002806:	1e62      	subs	r2, r4, #1
 8002808:	4194      	sbcs	r4, r2
 800280a:	18e4      	adds	r4, r4, r3
 800280c:	429c      	cmp	r4, r3
 800280e:	4192      	sbcs	r2, r2
 8002810:	4252      	negs	r2, r2
 8002812:	444a      	add	r2, r9
 8002814:	4692      	mov	sl, r2
 8002816:	4653      	mov	r3, sl
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	d5df      	bpl.n	80027dc <__aeabi_dsub+0x314>
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__aeabi_dsub+0x368>)
 800281e:	3601      	adds	r6, #1
 8002820:	429e      	cmp	r6, r3
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x35e>
 8002824:	e0a0      	b.n	8002968 <__aeabi_dsub+0x4a0>
 8002826:	0032      	movs	r2, r6
 8002828:	2400      	movs	r4, #0
 800282a:	2300      	movs	r3, #0
 800282c:	e6f6      	b.n	800261c <__aeabi_dsub+0x154>
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	000007ff 	.word	0x000007ff
 8002834:	ff7fffff 	.word	0xff7fffff
 8002838:	fffff801 	.word	0xfffff801
 800283c:	000007fe 	.word	0x000007fe
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	464a      	mov	r2, r9
 8002844:	0752      	lsls	r2, r2, #29
 8002846:	4313      	orrs	r3, r2
 8002848:	464a      	mov	r2, r9
 800284a:	08d2      	lsrs	r2, r2, #3
 800284c:	0019      	movs	r1, r3
 800284e:	4311      	orrs	r1, r2
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x38c>
 8002852:	e1b5      	b.n	8002bc0 <__aeabi_dsub+0x6f8>
 8002854:	2480      	movs	r4, #128	; 0x80
 8002856:	0324      	lsls	r4, r4, #12
 8002858:	4314      	orrs	r4, r2
 800285a:	0324      	lsls	r4, r4, #12
 800285c:	4ad5      	ldr	r2, [pc, #852]	; (8002bb4 <__aeabi_dsub+0x6ec>)
 800285e:	0b24      	lsrs	r4, r4, #12
 8002860:	e6dc      	b.n	800261c <__aeabi_dsub+0x154>
 8002862:	0020      	movs	r0, r4
 8002864:	f000 fb2a 	bl	8002ebc <__clzsi2>
 8002868:	0003      	movs	r3, r0
 800286a:	3318      	adds	r3, #24
 800286c:	2b1f      	cmp	r3, #31
 800286e:	dc00      	bgt.n	8002872 <__aeabi_dsub+0x3aa>
 8002870:	e695      	b.n	800259e <__aeabi_dsub+0xd6>
 8002872:	0022      	movs	r2, r4
 8002874:	3808      	subs	r0, #8
 8002876:	4082      	lsls	r2, r0
 8002878:	2400      	movs	r4, #0
 800287a:	429e      	cmp	r6, r3
 800287c:	dc00      	bgt.n	8002880 <__aeabi_dsub+0x3b8>
 800287e:	e69a      	b.n	80025b6 <__aeabi_dsub+0xee>
 8002880:	1af6      	subs	r6, r6, r3
 8002882:	4bcd      	ldr	r3, [pc, #820]	; (8002bb8 <__aeabi_dsub+0x6f0>)
 8002884:	401a      	ands	r2, r3
 8002886:	4692      	mov	sl, r2
 8002888:	e6a8      	b.n	80025dc <__aeabi_dsub+0x114>
 800288a:	003c      	movs	r4, r7
 800288c:	4304      	orrs	r4, r0
 800288e:	1e62      	subs	r2, r4, #1
 8002890:	4194      	sbcs	r4, r2
 8002892:	e66c      	b.n	800256e <__aeabi_dsub+0xa6>
 8002894:	464a      	mov	r2, r9
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	0752      	lsls	r2, r2, #29
 800289a:	4313      	orrs	r3, r2
 800289c:	464a      	mov	r2, r9
 800289e:	08d2      	lsrs	r2, r2, #3
 80028a0:	e7a6      	b.n	80027f0 <__aeabi_dsub+0x328>
 80028a2:	4cc6      	ldr	r4, [pc, #792]	; (8002bbc <__aeabi_dsub+0x6f4>)
 80028a4:	1c72      	adds	r2, r6, #1
 80028a6:	4222      	tst	r2, r4
 80028a8:	d000      	beq.n	80028ac <__aeabi_dsub+0x3e4>
 80028aa:	e0ac      	b.n	8002a06 <__aeabi_dsub+0x53e>
 80028ac:	464a      	mov	r2, r9
 80028ae:	431a      	orrs	r2, r3
 80028b0:	2e00      	cmp	r6, #0
 80028b2:	d000      	beq.n	80028b6 <__aeabi_dsub+0x3ee>
 80028b4:	e105      	b.n	8002ac2 <__aeabi_dsub+0x5fa>
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x3f4>
 80028ba:	e156      	b.n	8002b6a <__aeabi_dsub+0x6a2>
 80028bc:	003a      	movs	r2, r7
 80028be:	4302      	orrs	r2, r0
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dsub+0x3fc>
 80028c2:	e0db      	b.n	8002a7c <__aeabi_dsub+0x5b4>
 80028c4:	181c      	adds	r4, r3, r0
 80028c6:	429c      	cmp	r4, r3
 80028c8:	419b      	sbcs	r3, r3
 80028ca:	444f      	add	r7, r9
 80028cc:	46ba      	mov	sl, r7
 80028ce:	425b      	negs	r3, r3
 80028d0:	449a      	add	sl, r3
 80028d2:	4653      	mov	r3, sl
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	d400      	bmi.n	80028da <__aeabi_dsub+0x412>
 80028d8:	e780      	b.n	80027dc <__aeabi_dsub+0x314>
 80028da:	4652      	mov	r2, sl
 80028dc:	4bb6      	ldr	r3, [pc, #728]	; (8002bb8 <__aeabi_dsub+0x6f0>)
 80028de:	2601      	movs	r6, #1
 80028e0:	401a      	ands	r2, r3
 80028e2:	4692      	mov	sl, r2
 80028e4:	e77a      	b.n	80027dc <__aeabi_dsub+0x314>
 80028e6:	4cb3      	ldr	r4, [pc, #716]	; (8002bb4 <__aeabi_dsub+0x6ec>)
 80028e8:	42a2      	cmp	r2, r4
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x426>
 80028ec:	e0c0      	b.n	8002a70 <__aeabi_dsub+0x5a8>
 80028ee:	2480      	movs	r4, #128	; 0x80
 80028f0:	464d      	mov	r5, r9
 80028f2:	0424      	lsls	r4, r4, #16
 80028f4:	4325      	orrs	r5, r4
 80028f6:	46a9      	mov	r9, r5
 80028f8:	4664      	mov	r4, ip
 80028fa:	2c38      	cmp	r4, #56	; 0x38
 80028fc:	dc53      	bgt.n	80029a6 <__aeabi_dsub+0x4de>
 80028fe:	4661      	mov	r1, ip
 8002900:	2c1f      	cmp	r4, #31
 8002902:	dd00      	ble.n	8002906 <__aeabi_dsub+0x43e>
 8002904:	e0cd      	b.n	8002aa2 <__aeabi_dsub+0x5da>
 8002906:	2520      	movs	r5, #32
 8002908:	001e      	movs	r6, r3
 800290a:	1b2d      	subs	r5, r5, r4
 800290c:	464c      	mov	r4, r9
 800290e:	40ab      	lsls	r3, r5
 8002910:	40ac      	lsls	r4, r5
 8002912:	40ce      	lsrs	r6, r1
 8002914:	1e5d      	subs	r5, r3, #1
 8002916:	41ab      	sbcs	r3, r5
 8002918:	4334      	orrs	r4, r6
 800291a:	4323      	orrs	r3, r4
 800291c:	464c      	mov	r4, r9
 800291e:	40cc      	lsrs	r4, r1
 8002920:	1b3f      	subs	r7, r7, r4
 8002922:	e045      	b.n	80029b0 <__aeabi_dsub+0x4e8>
 8002924:	464a      	mov	r2, r9
 8002926:	1a1c      	subs	r4, r3, r0
 8002928:	1bd1      	subs	r1, r2, r7
 800292a:	42a3      	cmp	r3, r4
 800292c:	4192      	sbcs	r2, r2
 800292e:	4252      	negs	r2, r2
 8002930:	4692      	mov	sl, r2
 8002932:	000a      	movs	r2, r1
 8002934:	4651      	mov	r1, sl
 8002936:	1a52      	subs	r2, r2, r1
 8002938:	4692      	mov	sl, r2
 800293a:	0212      	lsls	r2, r2, #8
 800293c:	d500      	bpl.n	8002940 <__aeabi_dsub+0x478>
 800293e:	e083      	b.n	8002a48 <__aeabi_dsub+0x580>
 8002940:	4653      	mov	r3, sl
 8002942:	4323      	orrs	r3, r4
 8002944:	d000      	beq.n	8002948 <__aeabi_dsub+0x480>
 8002946:	e621      	b.n	800258c <__aeabi_dsub+0xc4>
 8002948:	2200      	movs	r2, #0
 800294a:	2500      	movs	r5, #0
 800294c:	e753      	b.n	80027f6 <__aeabi_dsub+0x32e>
 800294e:	181c      	adds	r4, r3, r0
 8002950:	429c      	cmp	r4, r3
 8002952:	419b      	sbcs	r3, r3
 8002954:	444f      	add	r7, r9
 8002956:	46ba      	mov	sl, r7
 8002958:	425b      	negs	r3, r3
 800295a:	449a      	add	sl, r3
 800295c:	4653      	mov	r3, sl
 800295e:	2601      	movs	r6, #1
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	d400      	bmi.n	8002966 <__aeabi_dsub+0x49e>
 8002964:	e73a      	b.n	80027dc <__aeabi_dsub+0x314>
 8002966:	2602      	movs	r6, #2
 8002968:	4652      	mov	r2, sl
 800296a:	4b93      	ldr	r3, [pc, #588]	; (8002bb8 <__aeabi_dsub+0x6f0>)
 800296c:	2101      	movs	r1, #1
 800296e:	401a      	ands	r2, r3
 8002970:	0013      	movs	r3, r2
 8002972:	4021      	ands	r1, r4
 8002974:	0862      	lsrs	r2, r4, #1
 8002976:	430a      	orrs	r2, r1
 8002978:	07dc      	lsls	r4, r3, #31
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	469a      	mov	sl, r3
 800297e:	4314      	orrs	r4, r2
 8002980:	e62c      	b.n	80025dc <__aeabi_dsub+0x114>
 8002982:	0039      	movs	r1, r7
 8002984:	3a20      	subs	r2, #32
 8002986:	40d1      	lsrs	r1, r2
 8002988:	4662      	mov	r2, ip
 800298a:	2a20      	cmp	r2, #32
 800298c:	d006      	beq.n	800299c <__aeabi_dsub+0x4d4>
 800298e:	4664      	mov	r4, ip
 8002990:	2240      	movs	r2, #64	; 0x40
 8002992:	1b12      	subs	r2, r2, r4
 8002994:	003c      	movs	r4, r7
 8002996:	4094      	lsls	r4, r2
 8002998:	4304      	orrs	r4, r0
 800299a:	9401      	str	r4, [sp, #4]
 800299c:	9c01      	ldr	r4, [sp, #4]
 800299e:	1e62      	subs	r2, r4, #1
 80029a0:	4194      	sbcs	r4, r2
 80029a2:	430c      	orrs	r4, r1
 80029a4:	e5e3      	b.n	800256e <__aeabi_dsub+0xa6>
 80029a6:	4649      	mov	r1, r9
 80029a8:	4319      	orrs	r1, r3
 80029aa:	000b      	movs	r3, r1
 80029ac:	1e5c      	subs	r4, r3, #1
 80029ae:	41a3      	sbcs	r3, r4
 80029b0:	1ac4      	subs	r4, r0, r3
 80029b2:	42a0      	cmp	r0, r4
 80029b4:	419b      	sbcs	r3, r3
 80029b6:	425b      	negs	r3, r3
 80029b8:	1afb      	subs	r3, r7, r3
 80029ba:	469a      	mov	sl, r3
 80029bc:	465d      	mov	r5, fp
 80029be:	0016      	movs	r6, r2
 80029c0:	e5dc      	b.n	800257c <__aeabi_dsub+0xb4>
 80029c2:	4649      	mov	r1, r9
 80029c4:	4319      	orrs	r1, r3
 80029c6:	d100      	bne.n	80029ca <__aeabi_dsub+0x502>
 80029c8:	e0ae      	b.n	8002b28 <__aeabi_dsub+0x660>
 80029ca:	4661      	mov	r1, ip
 80029cc:	4664      	mov	r4, ip
 80029ce:	3901      	subs	r1, #1
 80029d0:	2c01      	cmp	r4, #1
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x50e>
 80029d4:	e0e0      	b.n	8002b98 <__aeabi_dsub+0x6d0>
 80029d6:	4c77      	ldr	r4, [pc, #476]	; (8002bb4 <__aeabi_dsub+0x6ec>)
 80029d8:	45a4      	cmp	ip, r4
 80029da:	d056      	beq.n	8002a8a <__aeabi_dsub+0x5c2>
 80029dc:	468c      	mov	ip, r1
 80029de:	e69a      	b.n	8002716 <__aeabi_dsub+0x24e>
 80029e0:	4661      	mov	r1, ip
 80029e2:	2220      	movs	r2, #32
 80029e4:	003c      	movs	r4, r7
 80029e6:	1a52      	subs	r2, r2, r1
 80029e8:	4094      	lsls	r4, r2
 80029ea:	0001      	movs	r1, r0
 80029ec:	4090      	lsls	r0, r2
 80029ee:	46a0      	mov	r8, r4
 80029f0:	4664      	mov	r4, ip
 80029f2:	1e42      	subs	r2, r0, #1
 80029f4:	4190      	sbcs	r0, r2
 80029f6:	4662      	mov	r2, ip
 80029f8:	40e1      	lsrs	r1, r4
 80029fa:	4644      	mov	r4, r8
 80029fc:	40d7      	lsrs	r7, r2
 80029fe:	430c      	orrs	r4, r1
 8002a00:	4304      	orrs	r4, r0
 8002a02:	44b9      	add	r9, r7
 8002a04:	e701      	b.n	800280a <__aeabi_dsub+0x342>
 8002a06:	496b      	ldr	r1, [pc, #428]	; (8002bb4 <__aeabi_dsub+0x6ec>)
 8002a08:	428a      	cmp	r2, r1
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x546>
 8002a0c:	e70c      	b.n	8002828 <__aeabi_dsub+0x360>
 8002a0e:	1818      	adds	r0, r3, r0
 8002a10:	4298      	cmp	r0, r3
 8002a12:	419b      	sbcs	r3, r3
 8002a14:	444f      	add	r7, r9
 8002a16:	425b      	negs	r3, r3
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	07dc      	lsls	r4, r3, #31
 8002a1c:	0840      	lsrs	r0, r0, #1
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	469a      	mov	sl, r3
 8002a22:	0016      	movs	r6, r2
 8002a24:	4304      	orrs	r4, r0
 8002a26:	e6d9      	b.n	80027dc <__aeabi_dsub+0x314>
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d000      	beq.n	8002a2e <__aeabi_dsub+0x566>
 8002a2c:	e081      	b.n	8002b32 <__aeabi_dsub+0x66a>
 8002a2e:	003b      	movs	r3, r7
 8002a30:	4303      	orrs	r3, r0
 8002a32:	d11d      	bne.n	8002a70 <__aeabi_dsub+0x5a8>
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	2500      	movs	r5, #0
 8002a38:	0312      	lsls	r2, r2, #12
 8002a3a:	e70b      	b.n	8002854 <__aeabi_dsub+0x38c>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6d3      	b.n	80027f0 <__aeabi_dsub+0x328>
 8002a48:	1ac4      	subs	r4, r0, r3
 8002a4a:	42a0      	cmp	r0, r4
 8002a4c:	4180      	sbcs	r0, r0
 8002a4e:	464b      	mov	r3, r9
 8002a50:	4240      	negs	r0, r0
 8002a52:	1aff      	subs	r7, r7, r3
 8002a54:	1a3b      	subs	r3, r7, r0
 8002a56:	469a      	mov	sl, r3
 8002a58:	465d      	mov	r5, fp
 8002a5a:	e597      	b.n	800258c <__aeabi_dsub+0xc4>
 8002a5c:	1a1c      	subs	r4, r3, r0
 8002a5e:	464a      	mov	r2, r9
 8002a60:	42a3      	cmp	r3, r4
 8002a62:	419b      	sbcs	r3, r3
 8002a64:	1bd7      	subs	r7, r2, r7
 8002a66:	425b      	negs	r3, r3
 8002a68:	1afb      	subs	r3, r7, r3
 8002a6a:	469a      	mov	sl, r3
 8002a6c:	2601      	movs	r6, #1
 8002a6e:	e585      	b.n	800257c <__aeabi_dsub+0xb4>
 8002a70:	08c0      	lsrs	r0, r0, #3
 8002a72:	077b      	lsls	r3, r7, #29
 8002a74:	465d      	mov	r5, fp
 8002a76:	4303      	orrs	r3, r0
 8002a78:	08fa      	lsrs	r2, r7, #3
 8002a7a:	e6e7      	b.n	800284c <__aeabi_dsub+0x384>
 8002a7c:	464a      	mov	r2, r9
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	0752      	lsls	r2, r2, #29
 8002a82:	4313      	orrs	r3, r2
 8002a84:	464a      	mov	r2, r9
 8002a86:	08d2      	lsrs	r2, r2, #3
 8002a88:	e6b5      	b.n	80027f6 <__aeabi_dsub+0x32e>
 8002a8a:	08c0      	lsrs	r0, r0, #3
 8002a8c:	077b      	lsls	r3, r7, #29
 8002a8e:	4303      	orrs	r3, r0
 8002a90:	08fa      	lsrs	r2, r7, #3
 8002a92:	e6db      	b.n	800284c <__aeabi_dsub+0x384>
 8002a94:	4649      	mov	r1, r9
 8002a96:	4319      	orrs	r1, r3
 8002a98:	000b      	movs	r3, r1
 8002a9a:	1e59      	subs	r1, r3, #1
 8002a9c:	418b      	sbcs	r3, r1
 8002a9e:	001c      	movs	r4, r3
 8002aa0:	e653      	b.n	800274a <__aeabi_dsub+0x282>
 8002aa2:	464d      	mov	r5, r9
 8002aa4:	3c20      	subs	r4, #32
 8002aa6:	40e5      	lsrs	r5, r4
 8002aa8:	2920      	cmp	r1, #32
 8002aaa:	d005      	beq.n	8002ab8 <__aeabi_dsub+0x5f0>
 8002aac:	2440      	movs	r4, #64	; 0x40
 8002aae:	1a64      	subs	r4, r4, r1
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	40a1      	lsls	r1, r4
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	4698      	mov	r8, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	1e5c      	subs	r4, r3, #1
 8002abc:	41a3      	sbcs	r3, r4
 8002abe:	432b      	orrs	r3, r5
 8002ac0:	e776      	b.n	80029b0 <__aeabi_dsub+0x4e8>
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d0e1      	beq.n	8002a8a <__aeabi_dsub+0x5c2>
 8002ac6:	003a      	movs	r2, r7
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	4302      	orrs	r2, r0
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x608>
 8002ace:	e6b8      	b.n	8002842 <__aeabi_dsub+0x37a>
 8002ad0:	464a      	mov	r2, r9
 8002ad2:	0752      	lsls	r2, r2, #29
 8002ad4:	2480      	movs	r4, #128	; 0x80
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	464a      	mov	r2, r9
 8002ada:	0324      	lsls	r4, r4, #12
 8002adc:	08d2      	lsrs	r2, r2, #3
 8002ade:	4222      	tst	r2, r4
 8002ae0:	d007      	beq.n	8002af2 <__aeabi_dsub+0x62a>
 8002ae2:	08fe      	lsrs	r6, r7, #3
 8002ae4:	4226      	tst	r6, r4
 8002ae6:	d104      	bne.n	8002af2 <__aeabi_dsub+0x62a>
 8002ae8:	465d      	mov	r5, fp
 8002aea:	0032      	movs	r2, r6
 8002aec:	08c3      	lsrs	r3, r0, #3
 8002aee:	077f      	lsls	r7, r7, #29
 8002af0:	433b      	orrs	r3, r7
 8002af2:	0f59      	lsrs	r1, r3, #29
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	0749      	lsls	r1, r1, #29
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	430b      	orrs	r3, r1
 8002afc:	e6a6      	b.n	800284c <__aeabi_dsub+0x384>
 8002afe:	1ac4      	subs	r4, r0, r3
 8002b00:	42a0      	cmp	r0, r4
 8002b02:	4180      	sbcs	r0, r0
 8002b04:	464b      	mov	r3, r9
 8002b06:	4240      	negs	r0, r0
 8002b08:	1aff      	subs	r7, r7, r3
 8002b0a:	1a3b      	subs	r3, r7, r0
 8002b0c:	469a      	mov	sl, r3
 8002b0e:	465d      	mov	r5, fp
 8002b10:	2601      	movs	r6, #1
 8002b12:	e533      	b.n	800257c <__aeabi_dsub+0xb4>
 8002b14:	003b      	movs	r3, r7
 8002b16:	4303      	orrs	r3, r0
 8002b18:	d100      	bne.n	8002b1c <__aeabi_dsub+0x654>
 8002b1a:	e715      	b.n	8002948 <__aeabi_dsub+0x480>
 8002b1c:	08c0      	lsrs	r0, r0, #3
 8002b1e:	077b      	lsls	r3, r7, #29
 8002b20:	465d      	mov	r5, fp
 8002b22:	4303      	orrs	r3, r0
 8002b24:	08fa      	lsrs	r2, r7, #3
 8002b26:	e666      	b.n	80027f6 <__aeabi_dsub+0x32e>
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	077b      	lsls	r3, r7, #29
 8002b2c:	4303      	orrs	r3, r0
 8002b2e:	08fa      	lsrs	r2, r7, #3
 8002b30:	e65e      	b.n	80027f0 <__aeabi_dsub+0x328>
 8002b32:	003a      	movs	r2, r7
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	4302      	orrs	r2, r0
 8002b38:	d100      	bne.n	8002b3c <__aeabi_dsub+0x674>
 8002b3a:	e682      	b.n	8002842 <__aeabi_dsub+0x37a>
 8002b3c:	464a      	mov	r2, r9
 8002b3e:	0752      	lsls	r2, r2, #29
 8002b40:	2480      	movs	r4, #128	; 0x80
 8002b42:	4313      	orrs	r3, r2
 8002b44:	464a      	mov	r2, r9
 8002b46:	0324      	lsls	r4, r4, #12
 8002b48:	08d2      	lsrs	r2, r2, #3
 8002b4a:	4222      	tst	r2, r4
 8002b4c:	d007      	beq.n	8002b5e <__aeabi_dsub+0x696>
 8002b4e:	08fe      	lsrs	r6, r7, #3
 8002b50:	4226      	tst	r6, r4
 8002b52:	d104      	bne.n	8002b5e <__aeabi_dsub+0x696>
 8002b54:	465d      	mov	r5, fp
 8002b56:	0032      	movs	r2, r6
 8002b58:	08c3      	lsrs	r3, r0, #3
 8002b5a:	077f      	lsls	r7, r7, #29
 8002b5c:	433b      	orrs	r3, r7
 8002b5e:	0f59      	lsrs	r1, r3, #29
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	0749      	lsls	r1, r1, #29
 8002b66:	430b      	orrs	r3, r1
 8002b68:	e670      	b.n	800284c <__aeabi_dsub+0x384>
 8002b6a:	08c0      	lsrs	r0, r0, #3
 8002b6c:	077b      	lsls	r3, r7, #29
 8002b6e:	4303      	orrs	r3, r0
 8002b70:	08fa      	lsrs	r2, r7, #3
 8002b72:	e640      	b.n	80027f6 <__aeabi_dsub+0x32e>
 8002b74:	464c      	mov	r4, r9
 8002b76:	3920      	subs	r1, #32
 8002b78:	40cc      	lsrs	r4, r1
 8002b7a:	4661      	mov	r1, ip
 8002b7c:	2920      	cmp	r1, #32
 8002b7e:	d006      	beq.n	8002b8e <__aeabi_dsub+0x6c6>
 8002b80:	4666      	mov	r6, ip
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	1b89      	subs	r1, r1, r6
 8002b86:	464e      	mov	r6, r9
 8002b88:	408e      	lsls	r6, r1
 8002b8a:	4333      	orrs	r3, r6
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	4643      	mov	r3, r8
 8002b90:	1e59      	subs	r1, r3, #1
 8002b92:	418b      	sbcs	r3, r1
 8002b94:	431c      	orrs	r4, r3
 8002b96:	e5d8      	b.n	800274a <__aeabi_dsub+0x282>
 8002b98:	181c      	adds	r4, r3, r0
 8002b9a:	4284      	cmp	r4, r0
 8002b9c:	4180      	sbcs	r0, r0
 8002b9e:	444f      	add	r7, r9
 8002ba0:	46ba      	mov	sl, r7
 8002ba2:	4240      	negs	r0, r0
 8002ba4:	4482      	add	sl, r0
 8002ba6:	e6d9      	b.n	800295c <__aeabi_dsub+0x494>
 8002ba8:	4653      	mov	r3, sl
 8002baa:	4323      	orrs	r3, r4
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x6e8>
 8002bae:	e6cb      	b.n	8002948 <__aeabi_dsub+0x480>
 8002bb0:	e614      	b.n	80027dc <__aeabi_dsub+0x314>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	000007ff 	.word	0x000007ff
 8002bb8:	ff7fffff 	.word	0xff7fffff
 8002bbc:	000007fe 	.word	0x000007fe
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4a01      	ldr	r2, [pc, #4]	; (8002bc8 <__aeabi_dsub+0x700>)
 8002bc4:	001c      	movs	r4, r3
 8002bc6:	e529      	b.n	800261c <__aeabi_dsub+0x154>
 8002bc8:	000007ff 	.word	0x000007ff

08002bcc <__aeabi_dcmpun>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	0005      	movs	r5, r0
 8002bd0:	480c      	ldr	r0, [pc, #48]	; (8002c04 <__aeabi_dcmpun+0x38>)
 8002bd2:	031c      	lsls	r4, r3, #12
 8002bd4:	0016      	movs	r6, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	030a      	lsls	r2, r1, #12
 8002bda:	0049      	lsls	r1, r1, #1
 8002bdc:	0b12      	lsrs	r2, r2, #12
 8002bde:	0d49      	lsrs	r1, r1, #21
 8002be0:	0b24      	lsrs	r4, r4, #12
 8002be2:	0d5b      	lsrs	r3, r3, #21
 8002be4:	4281      	cmp	r1, r0
 8002be6:	d008      	beq.n	8002bfa <__aeabi_dcmpun+0x2e>
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <__aeabi_dcmpun+0x38>)
 8002bea:	2000      	movs	r0, #0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <__aeabi_dcmpun+0x2c>
 8002bf0:	0020      	movs	r0, r4
 8002bf2:	4330      	orrs	r0, r6
 8002bf4:	1e43      	subs	r3, r0, #1
 8002bf6:	4198      	sbcs	r0, r3
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	432a      	orrs	r2, r5
 8002bfe:	d1fb      	bne.n	8002bf8 <__aeabi_dcmpun+0x2c>
 8002c00:	e7f2      	b.n	8002be8 <__aeabi_dcmpun+0x1c>
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	000007ff 	.word	0x000007ff

08002c08 <__aeabi_d2iz>:
 8002c08:	000a      	movs	r2, r1
 8002c0a:	b530      	push	{r4, r5, lr}
 8002c0c:	4c13      	ldr	r4, [pc, #76]	; (8002c5c <__aeabi_d2iz+0x54>)
 8002c0e:	0053      	lsls	r3, r2, #1
 8002c10:	0309      	lsls	r1, r1, #12
 8002c12:	0005      	movs	r5, r0
 8002c14:	0b09      	lsrs	r1, r1, #12
 8002c16:	2000      	movs	r0, #0
 8002c18:	0d5b      	lsrs	r3, r3, #21
 8002c1a:	0fd2      	lsrs	r2, r2, #31
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	dd04      	ble.n	8002c2a <__aeabi_d2iz+0x22>
 8002c20:	480f      	ldr	r0, [pc, #60]	; (8002c60 <__aeabi_d2iz+0x58>)
 8002c22:	4283      	cmp	r3, r0
 8002c24:	dd02      	ble.n	8002c2c <__aeabi_d2iz+0x24>
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <__aeabi_d2iz+0x5c>)
 8002c28:	18d0      	adds	r0, r2, r3
 8002c2a:	bd30      	pop	{r4, r5, pc}
 8002c2c:	2080      	movs	r0, #128	; 0x80
 8002c2e:	0340      	lsls	r0, r0, #13
 8002c30:	4301      	orrs	r1, r0
 8002c32:	480d      	ldr	r0, [pc, #52]	; (8002c68 <__aeabi_d2iz+0x60>)
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	281f      	cmp	r0, #31
 8002c38:	dd08      	ble.n	8002c4c <__aeabi_d2iz+0x44>
 8002c3a:	480c      	ldr	r0, [pc, #48]	; (8002c6c <__aeabi_d2iz+0x64>)
 8002c3c:	1ac3      	subs	r3, r0, r3
 8002c3e:	40d9      	lsrs	r1, r3
 8002c40:	000b      	movs	r3, r1
 8002c42:	4258      	negs	r0, r3
 8002c44:	2a00      	cmp	r2, #0
 8002c46:	d1f0      	bne.n	8002c2a <__aeabi_d2iz+0x22>
 8002c48:	0018      	movs	r0, r3
 8002c4a:	e7ee      	b.n	8002c2a <__aeabi_d2iz+0x22>
 8002c4c:	4c08      	ldr	r4, [pc, #32]	; (8002c70 <__aeabi_d2iz+0x68>)
 8002c4e:	40c5      	lsrs	r5, r0
 8002c50:	46a4      	mov	ip, r4
 8002c52:	4463      	add	r3, ip
 8002c54:	4099      	lsls	r1, r3
 8002c56:	000b      	movs	r3, r1
 8002c58:	432b      	orrs	r3, r5
 8002c5a:	e7f2      	b.n	8002c42 <__aeabi_d2iz+0x3a>
 8002c5c:	000003fe 	.word	0x000003fe
 8002c60:	0000041d 	.word	0x0000041d
 8002c64:	7fffffff 	.word	0x7fffffff
 8002c68:	00000433 	.word	0x00000433
 8002c6c:	00000413 	.word	0x00000413
 8002c70:	fffffbed 	.word	0xfffffbed

08002c74 <__aeabi_i2d>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d016      	beq.n	8002ca8 <__aeabi_i2d+0x34>
 8002c7a:	17c3      	asrs	r3, r0, #31
 8002c7c:	18c5      	adds	r5, r0, r3
 8002c7e:	405d      	eors	r5, r3
 8002c80:	0fc4      	lsrs	r4, r0, #31
 8002c82:	0028      	movs	r0, r5
 8002c84:	f000 f91a 	bl	8002ebc <__clzsi2>
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <__aeabi_i2d+0x5c>)
 8002c8a:	1a1b      	subs	r3, r3, r0
 8002c8c:	280a      	cmp	r0, #10
 8002c8e:	dc16      	bgt.n	8002cbe <__aeabi_i2d+0x4a>
 8002c90:	0002      	movs	r2, r0
 8002c92:	002e      	movs	r6, r5
 8002c94:	3215      	adds	r2, #21
 8002c96:	4096      	lsls	r6, r2
 8002c98:	220b      	movs	r2, #11
 8002c9a:	1a12      	subs	r2, r2, r0
 8002c9c:	40d5      	lsrs	r5, r2
 8002c9e:	055b      	lsls	r3, r3, #21
 8002ca0:	032d      	lsls	r5, r5, #12
 8002ca2:	0b2d      	lsrs	r5, r5, #12
 8002ca4:	0d5b      	lsrs	r3, r3, #21
 8002ca6:	e003      	b.n	8002cb0 <__aeabi_i2d+0x3c>
 8002ca8:	2400      	movs	r4, #0
 8002caa:	2300      	movs	r3, #0
 8002cac:	2500      	movs	r5, #0
 8002cae:	2600      	movs	r6, #0
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	432b      	orrs	r3, r5
 8002cb4:	07e4      	lsls	r4, r4, #31
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	0030      	movs	r0, r6
 8002cba:	0019      	movs	r1, r3
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	380b      	subs	r0, #11
 8002cc0:	4085      	lsls	r5, r0
 8002cc2:	055b      	lsls	r3, r3, #21
 8002cc4:	032d      	lsls	r5, r5, #12
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	0b2d      	lsrs	r5, r5, #12
 8002cca:	0d5b      	lsrs	r3, r3, #21
 8002ccc:	e7f0      	b.n	8002cb0 <__aeabi_i2d+0x3c>
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	0000041e 	.word	0x0000041e

08002cd4 <__aeabi_ui2d>:
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	1e04      	subs	r4, r0, #0
 8002cd8:	d010      	beq.n	8002cfc <__aeabi_ui2d+0x28>
 8002cda:	f000 f8ef 	bl	8002ebc <__clzsi2>
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <__aeabi_ui2d+0x48>)
 8002ce0:	1a1b      	subs	r3, r3, r0
 8002ce2:	280a      	cmp	r0, #10
 8002ce4:	dc11      	bgt.n	8002d0a <__aeabi_ui2d+0x36>
 8002ce6:	220b      	movs	r2, #11
 8002ce8:	0021      	movs	r1, r4
 8002cea:	1a12      	subs	r2, r2, r0
 8002cec:	40d1      	lsrs	r1, r2
 8002cee:	3015      	adds	r0, #21
 8002cf0:	030a      	lsls	r2, r1, #12
 8002cf2:	055b      	lsls	r3, r3, #21
 8002cf4:	4084      	lsls	r4, r0
 8002cf6:	0b12      	lsrs	r2, r2, #12
 8002cf8:	0d5b      	lsrs	r3, r3, #21
 8002cfa:	e001      	b.n	8002d00 <__aeabi_ui2d+0x2c>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2200      	movs	r2, #0
 8002d00:	051b      	lsls	r3, r3, #20
 8002d02:	4313      	orrs	r3, r2
 8002d04:	0020      	movs	r0, r4
 8002d06:	0019      	movs	r1, r3
 8002d08:	bd10      	pop	{r4, pc}
 8002d0a:	0022      	movs	r2, r4
 8002d0c:	380b      	subs	r0, #11
 8002d0e:	4082      	lsls	r2, r0
 8002d10:	055b      	lsls	r3, r3, #21
 8002d12:	0312      	lsls	r2, r2, #12
 8002d14:	2400      	movs	r4, #0
 8002d16:	0b12      	lsrs	r2, r2, #12
 8002d18:	0d5b      	lsrs	r3, r3, #21
 8002d1a:	e7f1      	b.n	8002d00 <__aeabi_ui2d+0x2c>
 8002d1c:	0000041e 	.word	0x0000041e

08002d20 <__aeabi_f2d>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	0242      	lsls	r2, r0, #9
 8002d24:	0043      	lsls	r3, r0, #1
 8002d26:	0fc4      	lsrs	r4, r0, #31
 8002d28:	20fe      	movs	r0, #254	; 0xfe
 8002d2a:	0e1b      	lsrs	r3, r3, #24
 8002d2c:	1c59      	adds	r1, r3, #1
 8002d2e:	0a55      	lsrs	r5, r2, #9
 8002d30:	4208      	tst	r0, r1
 8002d32:	d00c      	beq.n	8002d4e <__aeabi_f2d+0x2e>
 8002d34:	21e0      	movs	r1, #224	; 0xe0
 8002d36:	0089      	lsls	r1, r1, #2
 8002d38:	468c      	mov	ip, r1
 8002d3a:	076d      	lsls	r5, r5, #29
 8002d3c:	0b12      	lsrs	r2, r2, #12
 8002d3e:	4463      	add	r3, ip
 8002d40:	051b      	lsls	r3, r3, #20
 8002d42:	4313      	orrs	r3, r2
 8002d44:	07e4      	lsls	r4, r4, #31
 8002d46:	4323      	orrs	r3, r4
 8002d48:	0028      	movs	r0, r5
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <__aeabi_f2d+0x5c>
 8002d52:	2d00      	cmp	r5, #0
 8002d54:	d01b      	beq.n	8002d8e <__aeabi_f2d+0x6e>
 8002d56:	0028      	movs	r0, r5
 8002d58:	f000 f8b0 	bl	8002ebc <__clzsi2>
 8002d5c:	280a      	cmp	r0, #10
 8002d5e:	dc1c      	bgt.n	8002d9a <__aeabi_f2d+0x7a>
 8002d60:	230b      	movs	r3, #11
 8002d62:	002a      	movs	r2, r5
 8002d64:	1a1b      	subs	r3, r3, r0
 8002d66:	40da      	lsrs	r2, r3
 8002d68:	0003      	movs	r3, r0
 8002d6a:	3315      	adds	r3, #21
 8002d6c:	409d      	lsls	r5, r3
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <__aeabi_f2d+0x88>)
 8002d70:	0312      	lsls	r2, r2, #12
 8002d72:	1a1b      	subs	r3, r3, r0
 8002d74:	055b      	lsls	r3, r3, #21
 8002d76:	0b12      	lsrs	r2, r2, #12
 8002d78:	0d5b      	lsrs	r3, r3, #21
 8002d7a:	e7e1      	b.n	8002d40 <__aeabi_f2d+0x20>
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	d009      	beq.n	8002d94 <__aeabi_f2d+0x74>
 8002d80:	0b13      	lsrs	r3, r2, #12
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	0312      	lsls	r2, r2, #12
 8002d86:	431a      	orrs	r2, r3
 8002d88:	076d      	lsls	r5, r5, #29
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <__aeabi_f2d+0x8c>)
 8002d8c:	e7d8      	b.n	8002d40 <__aeabi_f2d+0x20>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2200      	movs	r2, #0
 8002d92:	e7d5      	b.n	8002d40 <__aeabi_f2d+0x20>
 8002d94:	2200      	movs	r2, #0
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <__aeabi_f2d+0x8c>)
 8002d98:	e7d2      	b.n	8002d40 <__aeabi_f2d+0x20>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	002a      	movs	r2, r5
 8002d9e:	3b0b      	subs	r3, #11
 8002da0:	409a      	lsls	r2, r3
 8002da2:	2500      	movs	r5, #0
 8002da4:	e7e3      	b.n	8002d6e <__aeabi_f2d+0x4e>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	00000389 	.word	0x00000389
 8002dac:	000007ff 	.word	0x000007ff

08002db0 <__aeabi_d2f>:
 8002db0:	0002      	movs	r2, r0
 8002db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db4:	004b      	lsls	r3, r1, #1
 8002db6:	030d      	lsls	r5, r1, #12
 8002db8:	0f40      	lsrs	r0, r0, #29
 8002dba:	0d5b      	lsrs	r3, r3, #21
 8002dbc:	0fcc      	lsrs	r4, r1, #31
 8002dbe:	0a6d      	lsrs	r5, r5, #9
 8002dc0:	493a      	ldr	r1, [pc, #232]	; (8002eac <__aeabi_d2f+0xfc>)
 8002dc2:	4305      	orrs	r5, r0
 8002dc4:	1c58      	adds	r0, r3, #1
 8002dc6:	00d7      	lsls	r7, r2, #3
 8002dc8:	4208      	tst	r0, r1
 8002dca:	d00a      	beq.n	8002de2 <__aeabi_d2f+0x32>
 8002dcc:	4938      	ldr	r1, [pc, #224]	; (8002eb0 <__aeabi_d2f+0x100>)
 8002dce:	1859      	adds	r1, r3, r1
 8002dd0:	29fe      	cmp	r1, #254	; 0xfe
 8002dd2:	dd16      	ble.n	8002e02 <__aeabi_d2f+0x52>
 8002dd4:	20ff      	movs	r0, #255	; 0xff
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	05c0      	lsls	r0, r0, #23
 8002dda:	4310      	orrs	r0, r2
 8002ddc:	07e4      	lsls	r4, r4, #31
 8002dde:	4320      	orrs	r0, r4
 8002de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <__aeabi_d2f+0x44>
 8002de6:	433d      	orrs	r5, r7
 8002de8:	d026      	beq.n	8002e38 <__aeabi_d2f+0x88>
 8002dea:	2205      	movs	r2, #5
 8002dec:	0192      	lsls	r2, r2, #6
 8002dee:	0a52      	lsrs	r2, r2, #9
 8002df0:	b2d8      	uxtb	r0, r3
 8002df2:	e7f1      	b.n	8002dd8 <__aeabi_d2f+0x28>
 8002df4:	432f      	orrs	r7, r5
 8002df6:	d0ed      	beq.n	8002dd4 <__aeabi_d2f+0x24>
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	03d2      	lsls	r2, r2, #15
 8002dfc:	20ff      	movs	r0, #255	; 0xff
 8002dfe:	432a      	orrs	r2, r5
 8002e00:	e7ea      	b.n	8002dd8 <__aeabi_d2f+0x28>
 8002e02:	2900      	cmp	r1, #0
 8002e04:	dd1b      	ble.n	8002e3e <__aeabi_d2f+0x8e>
 8002e06:	0192      	lsls	r2, r2, #6
 8002e08:	1e50      	subs	r0, r2, #1
 8002e0a:	4182      	sbcs	r2, r0
 8002e0c:	00ed      	lsls	r5, r5, #3
 8002e0e:	0f7f      	lsrs	r7, r7, #29
 8002e10:	432a      	orrs	r2, r5
 8002e12:	433a      	orrs	r2, r7
 8002e14:	0753      	lsls	r3, r2, #29
 8002e16:	d047      	beq.n	8002ea8 <__aeabi_d2f+0xf8>
 8002e18:	230f      	movs	r3, #15
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d000      	beq.n	8002e22 <__aeabi_d2f+0x72>
 8002e20:	3204      	adds	r2, #4
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	04db      	lsls	r3, r3, #19
 8002e26:	4013      	ands	r3, r2
 8002e28:	d03e      	beq.n	8002ea8 <__aeabi_d2f+0xf8>
 8002e2a:	1c48      	adds	r0, r1, #1
 8002e2c:	29fe      	cmp	r1, #254	; 0xfe
 8002e2e:	d0d1      	beq.n	8002dd4 <__aeabi_d2f+0x24>
 8002e30:	0192      	lsls	r2, r2, #6
 8002e32:	0a52      	lsrs	r2, r2, #9
 8002e34:	b2c0      	uxtb	r0, r0
 8002e36:	e7cf      	b.n	8002dd8 <__aeabi_d2f+0x28>
 8002e38:	2000      	movs	r0, #0
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	e7cc      	b.n	8002dd8 <__aeabi_d2f+0x28>
 8002e3e:	000a      	movs	r2, r1
 8002e40:	3217      	adds	r2, #23
 8002e42:	db2f      	blt.n	8002ea4 <__aeabi_d2f+0xf4>
 8002e44:	2680      	movs	r6, #128	; 0x80
 8002e46:	0436      	lsls	r6, r6, #16
 8002e48:	432e      	orrs	r6, r5
 8002e4a:	251e      	movs	r5, #30
 8002e4c:	1a6d      	subs	r5, r5, r1
 8002e4e:	2d1f      	cmp	r5, #31
 8002e50:	dd11      	ble.n	8002e76 <__aeabi_d2f+0xc6>
 8002e52:	2202      	movs	r2, #2
 8002e54:	4252      	negs	r2, r2
 8002e56:	1a52      	subs	r2, r2, r1
 8002e58:	0031      	movs	r1, r6
 8002e5a:	40d1      	lsrs	r1, r2
 8002e5c:	2d20      	cmp	r5, #32
 8002e5e:	d004      	beq.n	8002e6a <__aeabi_d2f+0xba>
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <__aeabi_d2f+0x104>)
 8002e62:	4694      	mov	ip, r2
 8002e64:	4463      	add	r3, ip
 8002e66:	409e      	lsls	r6, r3
 8002e68:	4337      	orrs	r7, r6
 8002e6a:	003a      	movs	r2, r7
 8002e6c:	1e53      	subs	r3, r2, #1
 8002e6e:	419a      	sbcs	r2, r3
 8002e70:	430a      	orrs	r2, r1
 8002e72:	2100      	movs	r1, #0
 8002e74:	e7ce      	b.n	8002e14 <__aeabi_d2f+0x64>
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <__aeabi_d2f+0x108>)
 8002e78:	0038      	movs	r0, r7
 8002e7a:	4694      	mov	ip, r2
 8002e7c:	4463      	add	r3, ip
 8002e7e:	4098      	lsls	r0, r3
 8002e80:	003a      	movs	r2, r7
 8002e82:	1e41      	subs	r1, r0, #1
 8002e84:	4188      	sbcs	r0, r1
 8002e86:	409e      	lsls	r6, r3
 8002e88:	40ea      	lsrs	r2, r5
 8002e8a:	4330      	orrs	r0, r6
 8002e8c:	4302      	orrs	r2, r0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	0753      	lsls	r3, r2, #29
 8002e92:	d1c1      	bne.n	8002e18 <__aeabi_d2f+0x68>
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	0013      	movs	r3, r2
 8002e98:	04c9      	lsls	r1, r1, #19
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	420a      	tst	r2, r1
 8002ea0:	d1c6      	bne.n	8002e30 <__aeabi_d2f+0x80>
 8002ea2:	e7a3      	b.n	8002dec <__aeabi_d2f+0x3c>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e7a0      	b.n	8002dea <__aeabi_d2f+0x3a>
 8002ea8:	000b      	movs	r3, r1
 8002eaa:	e79f      	b.n	8002dec <__aeabi_d2f+0x3c>
 8002eac:	000007fe 	.word	0x000007fe
 8002eb0:	fffffc80 	.word	0xfffffc80
 8002eb4:	fffffca2 	.word	0xfffffca2
 8002eb8:	fffffc82 	.word	0xfffffc82

08002ebc <__clzsi2>:
 8002ebc:	211c      	movs	r1, #28
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	4298      	cmp	r0, r3
 8002ec4:	d301      	bcc.n	8002eca <__clzsi2+0xe>
 8002ec6:	0c00      	lsrs	r0, r0, #16
 8002ec8:	3910      	subs	r1, #16
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	4298      	cmp	r0, r3
 8002ece:	d301      	bcc.n	8002ed4 <__clzsi2+0x18>
 8002ed0:	0a00      	lsrs	r0, r0, #8
 8002ed2:	3908      	subs	r1, #8
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d301      	bcc.n	8002ede <__clzsi2+0x22>
 8002eda:	0900      	lsrs	r0, r0, #4
 8002edc:	3904      	subs	r1, #4
 8002ede:	a202      	add	r2, pc, #8	; (adr r2, 8002ee8 <__clzsi2+0x2c>)
 8002ee0:	5c10      	ldrb	r0, [r2, r0]
 8002ee2:	1840      	adds	r0, r0, r1
 8002ee4:	4770      	bx	lr
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	02020304 	.word	0x02020304
 8002eec:	01010101 	.word	0x01010101
	...

08002ef8 <__clzdi2>:
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	2900      	cmp	r1, #0
 8002efc:	d103      	bne.n	8002f06 <__clzdi2+0xe>
 8002efe:	f7ff ffdd 	bl	8002ebc <__clzsi2>
 8002f02:	3020      	adds	r0, #32
 8002f04:	e002      	b.n	8002f0c <__clzdi2+0x14>
 8002f06:	0008      	movs	r0, r1
 8002f08:	f7ff ffd8 	bl	8002ebc <__clzsi2>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)

08002f10 <Processor_type>:


 // Function To find  type of MCU
char Processor_type(uint8_t module_name)
{
	if( module_name==_H1AR2 || module_name==_H23R3 || module_name==_H10R4||
 8002f10:	281b      	cmp	r0, #27
 8002f12:	d805      	bhi.n	8002f20 <Processor_type+0x10>
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <Processor_type+0x18>)
 8002f16:	40c3      	lsrs	r3, r0
 8002f18:	07db      	lsls	r3, r3, #31
 8002f1a:	d503      	bpl.n	8002f24 <Processor_type+0x14>
{
 8002f1c:	2046      	movs	r0, #70	; 0x46
      }
    else
      {
	  return 'G';
	  }
}
 8002f1e:	4770      	bx	lr
	  return 'G';
 8002f20:	2047      	movs	r0, #71	; 0x47
 8002f22:	e7fc      	b.n	8002f1e <Processor_type+0xe>
 8002f24:	2047      	movs	r0, #71	; 0x47
 8002f26:	e7fa      	b.n	8002f1e <Processor_type+0xe>
 8002f28:	0f8ac7e0 	.word	0x0f8ac7e0

08002f2c <Get_Module_Name>:

//Function To find Name of Module
uint8_t Get_Module_Name(uint8_t dst)
{
	 return array[dst-1][0];
 8002f2c:	1e42      	subs	r2, r0, #1
 8002f2e:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <Get_Module_Name+0xc>)
 8002f30:	2016      	movs	r0, #22
 8002f32:	4350      	muls	r0, r2
 8002f34:	5c18      	ldrb	r0, [r3, r0]
}
 8002f36:	4770      	bx	lr
 8002f38:	20000c7c 	.word	0x20000c7c

08002f3c <Send_BOS_Message>:

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout,uint8_t dst)
{
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	46c6      	mov	lr, r8
 8002f40:	b500      	push	{lr}
 8002f42:	0007      	movs	r7, r0
 8002f44:	000d      	movs	r5, r1
 8002f46:	4690      	mov	r8, r2
 8002f48:	001c      	movs	r4, r3
 8002f4a:	ab06      	add	r3, sp, #24
 8002f4c:	7818      	ldrb	r0, [r3, #0]
	uint8_t module_name=Get_Module_Name(dst);
 8002f4e:	f7ff ffed 	bl	8002f2c <Get_Module_Name>
 8002f52:	0006      	movs	r6, r0
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL)
 8002f54:	0038      	movs	r0, r7
 8002f56:	f00a ffa5 	bl	800dea4 <GetUart>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d02a      	beq.n	8002fb4 <Send_BOS_Message+0x78>
	{
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK)
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <Send_BOS_Message+0x8c>)
 8002f60:	00ba      	lsls	r2, r7, #2
 8002f62:	58d0      	ldr	r0, [r2, r3]
 8002f64:	0021      	movs	r1, r4
 8002f66:	f00b f963 	bl	800e230 <osSemaphoreWait>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d12a      	bne.n	8002fc4 <Send_BOS_Message+0x88>
		{
			if(Processor_type(module_name)=='G')
 8002f6e:	0030      	movs	r0, r6
 8002f70:	f7ff ffce 	bl	8002f10 <Processor_type>
 8002f74:	2847      	cmp	r0, #71	; 0x47
 8002f76:	d002      	beq.n	8002f7e <Send_BOS_Message+0x42>
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
			}
			else
			{
			for(uint8_t i=0;i<n;i++)
 8002f78:	2400      	movs	r4, #0
	HAL_StatusTypeDef result =HAL_ERROR;
 8002f7a:	2601      	movs	r6, #1
 8002f7c:	e016      	b.n	8002fac <Send_BOS_Message+0x70>
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
 8002f7e:	0038      	movs	r0, r7
 8002f80:	f00a ff90 	bl	800dea4 <GetUart>
 8002f84:	4642      	mov	r2, r8
 8002f86:	0029      	movs	r1, r5
 8002f88:	f00f fb63 	bl	8012652 <HAL_UART_Transmit_IT>
 8002f8c:	0006      	movs	r6, r0
 8002f8e:	e012      	b.n	8002fb6 <Send_BOS_Message+0x7a>
			  {
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002f90:	0038      	movs	r0, r7
 8002f92:	f00a ff87 	bl	800dea4 <GetUart>
 8002f96:	2201      	movs	r2, #1
 8002f98:	0029      	movs	r1, r5
 8002f9a:	f00f fb5a 	bl	8012652 <HAL_UART_Transmit_IT>
 8002f9e:	0006      	movs	r6, r0
				buffer++;
 8002fa0:	3501      	adds	r5, #1
				//Delay_us(500);
			 	Delay_ms(2);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f00d f820 	bl	800ffe8 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002fa8:	3401      	adds	r4, #1
 8002faa:	b2e4      	uxtb	r4, r4
 8002fac:	b2a3      	uxth	r3, r4
 8002fae:	4543      	cmp	r3, r8
 8002fb0:	d3ee      	bcc.n	8002f90 <Send_BOS_Message+0x54>
 8002fb2:	e000      	b.n	8002fb6 <Send_BOS_Message+0x7a>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002fb4:	2601      	movs	r6, #1
			  }
			}
		}
	}

	Delay_ms(10);// Delay Between Sending Two Messages.
 8002fb6:	200a      	movs	r0, #10
 8002fb8:	f00d f816 	bl	800ffe8 <HAL_Delay>
	return result;
}
 8002fbc:	0030      	movs	r0, r6
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	46b8      	mov	r8, r7
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef result =HAL_ERROR;
 8002fc4:	2601      	movs	r6, #1
 8002fc6:	e7f6      	b.n	8002fb6 <Send_BOS_Message+0x7a>
 8002fc8:	20001b48 	.word	0x20001b48

08002fcc <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <LoadROtopology+0x88>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002fd6:	4a20      	ldr	r2, [pc, #128]	; (8003058 <LoadROtopology+0x8c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <LoadROtopology+0x28>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002fdc:	0a1a      	lsrs	r2, r3, #8
 8002fde:	491f      	ldr	r1, [pc, #124]	; (800305c <LoadROtopology+0x90>)
 8002fe0:	700a      	strb	r2, [r1, #0]
		if(N == 0)
 8002fe2:	d102      	bne.n	8002fea <LoadROtopology+0x1e>
			N =1;
 8002fe4:	000a      	movs	r2, r1
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <LoadROtopology+0x94>)
 8002fec:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002fee:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002ff0:	2002      	movs	r0, #2
		for(uint8_t i =1; i <= N; i++){
 8002ff2:	e023      	b.n	800303c <LoadROtopology+0x70>
		N =1;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <LoadROtopology+0x90>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002ffa:	4b19      	ldr	r3, [pc, #100]	; (8003060 <LoadROtopology+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003000:	20fa      	movs	r0, #250	; 0xfa
 8003002:	e024      	b.n	800304e <LoadROtopology+0x82>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <LoadROtopology+0x88>)
 8003006:	18c3      	adds	r3, r0, r3
 8003008:	1e67      	subs	r7, r4, #1
 800300a:	466a      	mov	r2, sp
 800300c:	79d5      	ldrb	r5, [r2, #7]
 800300e:	881e      	ldrh	r6, [r3, #0]
 8003010:	4914      	ldr	r1, [pc, #80]	; (8003064 <LoadROtopology+0x98>)
 8003012:	00bb      	lsls	r3, r7, #2
 8003014:	19db      	adds	r3, r3, r7
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	19db      	adds	r3, r3, r7
 800301a:	18eb      	adds	r3, r5, r3
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	52ce      	strh	r6, [r1, r3]
				add +=2;
 8003020:	3002      	adds	r0, #2
 8003022:	b280      	uxth	r0, r0
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003024:	79d3      	ldrb	r3, [r2, #7]
 8003026:	3301      	adds	r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	71d3      	strb	r3, [r2, #7]
 800302c:	466b      	mov	r3, sp
 800302e:	3307      	adds	r3, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b0a      	cmp	r3, #10
 8003036:	d9e5      	bls.n	8003004 <LoadROtopology+0x38>
		for(uint8_t i =1; i <= N; i++){
 8003038:	3401      	adds	r4, #1
 800303a:	b2e4      	uxtb	r4, r4
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <LoadROtopology+0x90>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	42a3      	cmp	r3, r4
 8003042:	d303      	bcc.n	800304c <LoadROtopology+0x80>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003044:	466b      	mov	r3, sp
 8003046:	2200      	movs	r2, #0
 8003048:	71da      	strb	r2, [r3, #7]
 800304a:	e7ef      	b.n	800302c <LoadROtopology+0x60>
			}
		}
	}
	
	return result;
 800304c:	2000      	movs	r0, #0
}
 800304e:	b003      	add	sp, #12
 8003050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	0801d800 	.word	0x0801d800
 8003058:	0000ffff 	.word	0x0000ffff
 800305c:	20000008 	.word	0x20000008
 8003060:	200007a0 	.word	0x200007a0
 8003064:	20000c7c 	.word	0x20000c7c

08003068 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8003068:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800306a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800306c:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 800306e:	e001      	b.n	8003074 <LoadEEportsDir+0xc>
 8003070:	3401      	adds	r4, #1
 8003072:	b2e4      	uxtb	r4, r4
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <LoadEEportsDir+0x30>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	42a3      	cmp	r3, r4
 800307a:	d30a      	bcc.n	8003092 <LoadEEportsDir+0x2a>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800307c:	1e61      	subs	r1, r4, #1
 800307e:	0049      	lsls	r1, r1, #1
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <LoadEEportsDir+0x34>)
 8003082:	18c9      	adds	r1, r1, r3
 8003084:	1c60      	adds	r0, r4, #1
 8003086:	f008 fcdb 	bl	800ba40 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800308a:	2c19      	cmp	r4, #25
 800308c:	d9f0      	bls.n	8003070 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 800308e:	250a      	movs	r5, #10
 8003090:	e7ee      	b.n	8003070 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 8003092:	0028      	movs	r0, r5
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	20000008 	.word	0x20000008
 800309c:	20002870 	.word	0x20002870

080030a0 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80030a4:	466b      	mov	r3, sp
 80030a6:	2200      	movs	r2, #0
 80030a8:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030aa:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80030ac:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ae:	e026      	b.n	80030fe <LoadEEalias+0x5e>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80030b0:	0028      	movs	r0, r5
 80030b2:	301c      	adds	r0, #28
 80030b4:	b280      	uxth	r0, r0
 80030b6:	466b      	mov	r3, sp
 80030b8:	1d99      	adds	r1, r3, #6
 80030ba:	f008 fcc1 	bl	800ba40 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80030be:	466b      	mov	r3, sp
 80030c0:	88d8      	ldrh	r0, [r3, #6]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	469c      	mov	ip, r3
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <LoadEEalias+0x70>)
 80030c8:	00b2      	lsls	r2, r6, #2
 80030ca:	1997      	adds	r7, r2, r6
 80030cc:	0079      	lsls	r1, r7, #1
 80030ce:	1859      	adds	r1, r3, r1
 80030d0:	4667      	mov	r7, ip
 80030d2:	550f      	strb	r7, [r1, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80030d4:	1e67      	subs	r7, r4, #1
 80030d6:	0a01      	lsrs	r1, r0, #8
 80030d8:	1992      	adds	r2, r2, r6
 80030da:	0050      	lsls	r0, r2, #1
 80030dc:	181b      	adds	r3, r3, r0
 80030de:	55d9      	strb	r1, [r3, r7]
			add++;
 80030e0:	3501      	adds	r5, #1
 80030e2:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030e4:	3402      	adds	r4, #2
 80030e6:	b2e4      	uxtb	r4, r4
 80030e8:	2c09      	cmp	r4, #9
 80030ea:	d9e1      	bls.n	80030b0 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <LoadEEalias+0x70>)
 80030ee:	00b2      	lsls	r2, r6, #2
 80030f0:	1992      	adds	r2, r2, r6
 80030f2:	0051      	lsls	r1, r2, #1
 80030f4:	185b      	adds	r3, r3, r1
 80030f6:	2200      	movs	r2, #0
 80030f8:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030fa:	3601      	adds	r6, #1
 80030fc:	b2f6      	uxtb	r6, r6
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <LoadEEalias+0x74>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	42b3      	cmp	r3, r6
 8003104:	d301      	bcc.n	800310a <LoadEEalias+0x6a>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003106:	2401      	movs	r4, #1
 8003108:	e7ee      	b.n	80030e8 <LoadEEalias+0x48>
	}
	
	return result;
}
 800310a:	2000      	movs	r0, #0
 800310c:	b003      	add	sp, #12
 800310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003110:	20000b6c 	.word	0x20000b6c
 8003114:	20000008 	.word	0x20000008

08003118 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	46ce      	mov	lr, r9
 800311c:	4647      	mov	r7, r8
 800311e:	b580      	push	{r7, lr}
 8003120:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003122:	466b      	mov	r3, sp
 8003124:	2200      	movs	r2, #0
 8003126:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003128:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 800312a:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 800312c:	e00c      	b.n	8003148 <LoadEEgroup+0x30>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800312e:	4926      	ldr	r1, [pc, #152]	; (80031c8 <LoadEEgroup+0xb0>)
 8003130:	3104      	adds	r1, #4
 8003132:	0063      	lsls	r3, r4, #1
 8003134:	18c9      	adds	r1, r1, r3
 8003136:	0028      	movs	r0, r5
 8003138:	30cb      	adds	r0, #203	; 0xcb
 800313a:	b280      	uxth	r0, r0
 800313c:	f008 fc80 	bl	800ba40 <EE_ReadVariable>
		add++;
 8003140:	3501      	adds	r5, #1
 8003142:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003144:	3401      	adds	r4, #1
 8003146:	b2e4      	uxtb	r4, r4
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <LoadEEgroup+0xb4>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	42a3      	cmp	r3, r4
 800314e:	d8ee      	bhi.n	800312e <LoadEEgroup+0x16>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003150:	2600      	movs	r6, #0
 8003152:	e02e      	b.n	80031b2 <LoadEEgroup+0x9a>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003154:	0028      	movs	r0, r5
 8003156:	3099      	adds	r0, #153	; 0x99
 8003158:	b280      	uxth	r0, r0
 800315a:	466b      	mov	r3, sp
 800315c:	1d99      	adds	r1, r3, #6
 800315e:	f008 fc6f 	bl	800ba40 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8003162:	466b      	mov	r3, sp
 8003164:	88db      	ldrh	r3, [r3, #6]
 8003166:	4699      	mov	r9, r3
 8003168:	466b      	mov	r3, sp
 800316a:	799b      	ldrb	r3, [r3, #6]
 800316c:	4698      	mov	r8, r3
 800316e:	2038      	movs	r0, #56	; 0x38
 8003170:	00b1      	lsls	r1, r6, #2
 8003172:	198b      	adds	r3, r1, r6
 8003174:	005a      	lsls	r2, r3, #1
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <LoadEEgroup+0xb0>)
 8003178:	189a      	adds	r2, r3, r2
 800317a:	1912      	adds	r2, r2, r4
 800317c:	4647      	mov	r7, r8
 800317e:	5417      	strb	r7, [r2, r0]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003180:	1e62      	subs	r2, r4, #1
 8003182:	4694      	mov	ip, r2
 8003184:	464a      	mov	r2, r9
 8003186:	0a17      	lsrs	r7, r2, #8
 8003188:	198a      	adds	r2, r1, r6
 800318a:	0051      	lsls	r1, r2, #1
 800318c:	185b      	adds	r3, r3, r1
 800318e:	4463      	add	r3, ip
 8003190:	541f      	strb	r7, [r3, r0]
			add++;
 8003192:	3501      	adds	r5, #1
 8003194:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003196:	3402      	adds	r4, #2
 8003198:	b2e4      	uxtb	r4, r4
 800319a:	2c09      	cmp	r4, #9
 800319c:	d9da      	bls.n	8003154 <LoadEEgroup+0x3c>
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <LoadEEgroup+0xb0>)
 80031a0:	00b2      	lsls	r2, r6, #2
 80031a2:	1992      	adds	r2, r2, r6
 80031a4:	0051      	lsls	r1, r2, #1
 80031a6:	185b      	adds	r3, r3, r1
 80031a8:	3341      	adds	r3, #65	; 0x41
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80031ae:	3601      	adds	r6, #1
 80031b0:	b2f6      	uxtb	r6, r6
 80031b2:	2e09      	cmp	r6, #9
 80031b4:	d801      	bhi.n	80031ba <LoadEEgroup+0xa2>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80031b6:	2401      	movs	r4, #1
 80031b8:	e7ef      	b.n	800319a <LoadEEgroup+0x82>
	}
	
	return result;
}
 80031ba:	2000      	movs	r0, #0
 80031bc:	b003      	add	sp, #12
 80031be:	bcc0      	pop	{r6, r7}
 80031c0:	46b9      	mov	r9, r7
 80031c2:	46b0      	mov	r8, r6
 80031c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	200007a0 	.word	0x200007a0
 80031cc:	20000008 	.word	0x20000008

080031d0 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031d4:	210e      	movs	r1, #14
 80031d6:	4469      	add	r1, sp
 80031d8:	2300      	movs	r3, #0
 80031da:	800b      	strh	r3, [r1, #0]
 80031dc:	aa03      	add	r2, sp, #12
 80031de:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031e0:	20e4      	movs	r0, #228	; 0xe4
 80031e2:	f008 fc2d 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d000      	beq.n	80031ec <LoadEEstreams+0x1c>
 80031ea:	e076      	b.n	80032da <LoadEEstreams+0x10a>
		direction =(uint8_t )temp1;
 80031ec:	230e      	movs	r3, #14
 80031ee:	446b      	add	r3, sp
 80031f0:	781d      	ldrb	r5, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80031f2:	210e      	movs	r1, #14
 80031f4:	4469      	add	r1, sp
 80031f6:	20e5      	movs	r0, #229	; 0xe5
 80031f8:	f008 fc22 	bl	800ba40 <EE_ReadVariable>
 80031fc:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80031fe:	a903      	add	r1, sp, #12
 8003200:	20e6      	movs	r0, #230	; 0xe6
 8003202:	f008 fc1d 	bl	800ba40 <EE_ReadVariable>
	if(!status1 && !status2){
 8003206:	4304      	orrs	r4, r0
 8003208:	b2a4      	uxth	r4, r4
 800320a:	2c00      	cmp	r4, #0
 800320c:	d000      	beq.n	8003210 <LoadEEstreams+0x40>
 800320e:	e066      	b.n	80032de <LoadEEstreams+0x10e>
		count =((uint32_t )temp1 << 16) + temp2;
 8003210:	230e      	movs	r3, #14
 8003212:	446b      	add	r3, sp
 8003214:	881e      	ldrh	r6, [r3, #0]
 8003216:	0436      	lsls	r6, r6, #16
 8003218:	ab03      	add	r3, sp, #12
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 800321e:	210e      	movs	r1, #14
 8003220:	4469      	add	r1, sp
 8003222:	20e7      	movs	r0, #231	; 0xe7
 8003224:	f008 fc0c 	bl	800ba40 <EE_ReadVariable>
 8003228:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 800322a:	a903      	add	r1, sp, #12
 800322c:	20e8      	movs	r0, #232	; 0xe8
 800322e:	f008 fc07 	bl	800ba40 <EE_ReadVariable>
	if(!status1 && !status2){
 8003232:	4304      	orrs	r4, r0
 8003234:	b2a4      	uxth	r4, r4
 8003236:	2c00      	cmp	r4, #0
 8003238:	d153      	bne.n	80032e2 <LoadEEstreams+0x112>
		timeout =((uint32_t )temp1 << 16) + temp2;
 800323a:	230e      	movs	r3, #14
 800323c:	446b      	add	r3, sp
 800323e:	881c      	ldrh	r4, [r3, #0]
 8003240:	0424      	lsls	r4, r4, #16
 8003242:	ab03      	add	r3, sp, #12
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003248:	210e      	movs	r1, #14
 800324a:	4469      	add	r1, sp
 800324c:	20e9      	movs	r0, #233	; 0xe9
 800324e:	f008 fbf7 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 8003252:	2800      	cmp	r0, #0
 8003254:	d106      	bne.n	8003264 <LoadEEstreams+0x94>
		src1 =(uint8_t )(temp1 >> 8);
 8003256:	230e      	movs	r3, #14
 8003258:	446b      	add	r3, sp
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	0a11      	lsrs	r1, r2, #8
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <LoadEEstreams+0x140>)
 8003260:	7719      	strb	r1, [r3, #28]
		dst1 =(uint8_t )temp1;
 8003262:	775a      	strb	r2, [r3, #29]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003264:	210e      	movs	r1, #14
 8003266:	4469      	add	r1, sp
 8003268:	20ea      	movs	r0, #234	; 0xea
 800326a:	f008 fbe9 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 800326e:	2800      	cmp	r0, #0
 8003270:	d106      	bne.n	8003280 <LoadEEstreams+0xb0>
		src2 =(uint8_t )(temp1 >> 8);
 8003272:	230e      	movs	r3, #14
 8003274:	446b      	add	r3, sp
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	0a11      	lsrs	r1, r2, #8
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <LoadEEstreams+0x140>)
 800327c:	7799      	strb	r1, [r3, #30]
		dst2 =(uint8_t )temp1;
 800327e:	77da      	strb	r2, [r3, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003280:	210e      	movs	r1, #14
 8003282:	4469      	add	r1, sp
 8003284:	20eb      	movs	r0, #235	; 0xeb
 8003286:	f008 fbdb 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 800328a:	2800      	cmp	r0, #0
 800328c:	d108      	bne.n	80032a0 <LoadEEstreams+0xd0>
		src3 =(uint8_t )(temp1 >> 8);
 800328e:	230e      	movs	r3, #14
 8003290:	446b      	add	r3, sp
 8003292:	881a      	ldrh	r2, [r3, #0]
 8003294:	0a10      	lsrs	r0, r2, #8
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <LoadEEstreams+0x140>)
 8003298:	2120      	movs	r1, #32
 800329a:	5458      	strb	r0, [r3, r1]
		dst3 =(uint8_t )temp1;
 800329c:	3101      	adds	r1, #1
 800329e:	545a      	strb	r2, [r3, r1]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <LoadEEstreams+0x140>)
 80032a2:	7f1b      	ldrb	r3, [r3, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <LoadEEstreams+0xe0>
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <LoadEEstreams+0x140>)
 80032aa:	7f52      	ldrb	r2, [r2, #29]
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d11a      	bne.n	80032e6 <LoadEEstreams+0x116>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <LoadEEstreams+0x140>)
 80032b2:	7f9b      	ldrb	r3, [r3, #30]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <LoadEEstreams+0xf0>
 80032b8:	4a15      	ldr	r2, [pc, #84]	; (8003310 <LoadEEstreams+0x140>)
 80032ba:	7fd2      	ldrb	r2, [r2, #31]
 80032bc:	2a00      	cmp	r2, #0
 80032be:	d119      	bne.n	80032f4 <LoadEEstreams+0x124>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <LoadEEstreams+0x140>)
 80032c2:	2220      	movs	r2, #32
 80032c4:	5c9b      	ldrb	r3, [r3, r2]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <LoadEEstreams+0x104>
 80032ca:	4a11      	ldr	r2, [pc, #68]	; (8003310 <LoadEEstreams+0x140>)
 80032cc:	2121      	movs	r1, #33	; 0x21
 80032ce:	5c52      	ldrb	r2, [r2, r1]
 80032d0:	2a00      	cmp	r2, #0
 80032d2:	d116      	bne.n	8003302 <LoadEEstreams+0x132>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 80032d4:	2000      	movs	r0, #0
 80032d6:	b004      	add	sp, #16
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 80032da:	2500      	movs	r5, #0
 80032dc:	e789      	b.n	80031f2 <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 80032de:	2600      	movs	r6, #0
 80032e0:	e79d      	b.n	800321e <LoadEEstreams+0x4e>
 80032e2:	2400      	movs	r4, #0
 80032e4:	e7b0      	b.n	8003248 <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80032e6:	9200      	str	r2, [sp, #0]
 80032e8:	0022      	movs	r2, r4
 80032ea:	0031      	movs	r1, r6
 80032ec:	0028      	movs	r0, r5
 80032ee:	f004 fdcf 	bl	8007e90 <SetupDMAStreams>
 80032f2:	e7dd      	b.n	80032b0 <LoadEEstreams+0xe0>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	0022      	movs	r2, r4
 80032f8:	0031      	movs	r1, r6
 80032fa:	0028      	movs	r0, r5
 80032fc:	f004 fdc8 	bl	8007e90 <SetupDMAStreams>
 8003300:	e7de      	b.n	80032c0 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003302:	9200      	str	r2, [sp, #0]
 8003304:	0022      	movs	r2, r4
 8003306:	0031      	movs	r1, r6
 8003308:	0028      	movs	r0, r5
 800330a:	f004 fdc1 	bl	8007e90 <SetupDMAStreams>
 800330e:	e7e1      	b.n	80032d4 <LoadEEstreams+0x104>
 8003310:	20000820 	.word	0x20000820

08003314 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 8003314:	b510      	push	{r4, lr}
 8003316:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003318:	208a      	movs	r0, #138	; 0x8a
 800331a:	466b      	mov	r3, sp
 800331c:	1d99      	adds	r1, r3, #6
 800331e:	0040      	lsls	r0, r0, #1
 8003320:	f008 fb8e 	bl	800ba40 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003324:	2800      	cmp	r0, #0
 8003326:	d000      	beq.n	800332a <LoadEEparams+0x16>
 8003328:	e07f      	b.n	800342a <LoadEEparams+0x116>
		BOSMessaging.response =(uint8_t )temp1;
 800332a:	466b      	mov	r3, sp
 800332c:	88da      	ldrh	r2, [r3, #6]
 800332e:	7998      	ldrb	r0, [r3, #6]
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <LoadEEparams+0x198>)
 8003332:	2124      	movs	r1, #36	; 0x24
 8003334:	5458      	strb	r0, [r3, r1]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003336:	0a12      	lsrs	r2, r2, #8
 8003338:	3324      	adds	r3, #36	; 0x24
 800333a:	705a      	strb	r2, [r3, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800333c:	208e      	movs	r0, #142	; 0x8e
 800333e:	466b      	mov	r3, sp
 8003340:	1d99      	adds	r1, r3, #6
 8003342:	0040      	lsls	r0, r0, #1
 8003344:	f008 fb7c 	bl	800ba40 <EE_ReadVariable>

	if(!status1){
 8003348:	2800      	cmp	r0, #0
 800334a:	d000      	beq.n	800334e <LoadEEparams+0x3a>
 800334c:	e076      	b.n	800343c <LoadEEparams+0x128>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800334e:	466b      	mov	r3, sp
 8003350:	88db      	ldrh	r3, [r3, #6]
 8003352:	0bda      	lsrs	r2, r3, #15
 8003354:	4955      	ldr	r1, [pc, #340]	; (80034ac <LoadEEparams+0x198>)
 8003356:	0008      	movs	r0, r1
 8003358:	3024      	adds	r0, #36	; 0x24
 800335a:	7102      	strb	r2, [r0, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	854b      	strh	r3, [r1, #42]	; 0x2a
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003360:	2016      	movs	r0, #22
 8003362:	466b      	mov	r3, sp
 8003364:	1d99      	adds	r1, r3, #6
 8003366:	30ff      	adds	r0, #255	; 0xff
 8003368:	f008 fb6a 	bl	800ba40 <EE_ReadVariable>
	if(!status1)
 800336c:	2800      	cmp	r0, #0
 800336e:	d000      	beq.n	8003372 <LoadEEparams+0x5e>
 8003370:	e06d      	b.n	800344e <LoadEEparams+0x13a>
		BOS.buttons.debounce =temp1;
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <LoadEEparams+0x198>)
 8003374:	466a      	mov	r2, sp
 8003376:	3206      	adds	r2, #6
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	859a      	strh	r2, [r3, #44]	; 0x2c
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800337c:	208b      	movs	r0, #139	; 0x8b
 800337e:	466b      	mov	r3, sp
 8003380:	1d99      	adds	r1, r3, #6
 8003382:	0040      	lsls	r0, r0, #1
 8003384:	f008 fb5c 	bl	800ba40 <EE_ReadVariable>
	if(!status1)
 8003388:	2800      	cmp	r0, #0
 800338a:	d000      	beq.n	800338e <LoadEEparams+0x7a>
 800338c:	e064      	b.n	8003458 <LoadEEparams+0x144>
		BOS.buttons.singleClickTime =temp1;
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <LoadEEparams+0x198>)
 8003390:	466a      	mov	r2, sp
 8003392:	3206      	adds	r2, #6
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	85da      	strh	r2, [r3, #46]	; 0x2e
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003398:	2018      	movs	r0, #24
 800339a:	466b      	mov	r3, sp
 800339c:	1d99      	adds	r1, r3, #6
 800339e:	30ff      	adds	r0, #255	; 0xff
 80033a0:	f008 fb4e 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d15c      	bne.n	8003462 <LoadEEparams+0x14e>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80033a8:	466b      	mov	r3, sp
 80033aa:	88da      	ldrh	r2, [r3, #6]
 80033ac:	7999      	ldrb	r1, [r3, #6]
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <LoadEEparams+0x198>)
 80033b0:	332c      	adds	r3, #44	; 0x2c
 80033b2:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80033b4:	0a12      	lsrs	r2, r2, #8
 80033b6:	715a      	strb	r2, [r3, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80033b8:	208c      	movs	r0, #140	; 0x8c
 80033ba:	466b      	mov	r3, sp
 80033bc:	1d99      	adds	r1, r3, #6
 80033be:	0040      	lsls	r0, r0, #1
 80033c0:	f008 fb3e 	bl	800ba40 <EE_ReadVariable>
 80033c4:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80033c6:	201a      	movs	r0, #26
 80033c8:	a901      	add	r1, sp, #4
 80033ca:	30ff      	adds	r0, #255	; 0xff
 80033cc:	f008 fb38 	bl	800ba40 <EE_ReadVariable>
	if(!status1 && !status2){
 80033d0:	4304      	orrs	r4, r0
 80033d2:	b2a4      	uxth	r4, r4
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d14c      	bne.n	8003472 <LoadEEparams+0x15e>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80033d8:	466b      	mov	r3, sp
 80033da:	3306      	adds	r3, #6
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	aa01      	add	r2, sp, #4
 80033e0:	8812      	ldrh	r2, [r2, #0]
 80033e2:	0412      	lsls	r2, r2, #16
 80033e4:	4313      	orrs	r3, r2
 80033e6:	4a31      	ldr	r2, [pc, #196]	; (80034ac <LoadEEparams+0x198>)
 80033e8:	6353      	str	r3, [r2, #52]	; 0x34
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80033ea:	208d      	movs	r0, #141	; 0x8d
 80033ec:	466b      	mov	r3, sp
 80033ee:	1d99      	adds	r1, r3, #6
 80033f0:	0040      	lsls	r0, r0, #1
 80033f2:	f008 fb25 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d14a      	bne.n	8003490 <LoadEEparams+0x17c>
		BOS.daylightsaving =(int8_t )temp1;
 80033fa:	466b      	mov	r3, sp
 80033fc:	88da      	ldrh	r2, [r3, #6]
 80033fe:	7999      	ldrb	r1, [r3, #6]
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <LoadEEparams+0x198>)
 8003402:	332c      	adds	r3, #44	; 0x2c
 8003404:	7319      	strb	r1, [r3, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 8003406:	0a12      	lsrs	r2, r2, #8
 8003408:	735a      	strb	r2, [r3, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800340a:	201c      	movs	r0, #28
 800340c:	466b      	mov	r3, sp
 800340e:	1d99      	adds	r1, r3, #6
 8003410:	30ff      	adds	r0, #255	; 0xff
 8003412:	f008 fb15 	bl	800ba40 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003416:	2800      	cmp	r0, #0
 8003418:	d141      	bne.n	800349e <LoadEEparams+0x18a>
		BOS.disableCLI =(uint8_t )temp1;
 800341a:	466b      	mov	r3, sp
 800341c:	799a      	ldrb	r2, [r3, #6]
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <LoadEEparams+0x198>)
 8003420:	332c      	adds	r3, #44	; 0x2c
 8003422:	769a      	strb	r2, [r3, #26]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 8003424:	2000      	movs	r0, #0
 8003426:	b002      	add	sp, #8
 8003428:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 800342a:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <LoadEEparams+0x19c>)
 800342c:	7910      	ldrb	r0, [r2, #4]
 800342e:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <LoadEEparams+0x198>)
 8003430:	2124      	movs	r1, #36	; 0x24
 8003432:	5458      	strb	r0, [r3, r1]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003434:	7952      	ldrb	r2, [r2, #5]
 8003436:	3324      	adds	r3, #36	; 0x24
 8003438:	705a      	strb	r2, [r3, #1]
 800343a:	e77f      	b.n	800333c <LoadEEparams+0x28>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <LoadEEparams+0x19c>)
 800343e:	7a10      	ldrb	r0, [r2, #8]
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <LoadEEparams+0x198>)
 8003442:	0019      	movs	r1, r3
 8003444:	3124      	adds	r1, #36	; 0x24
 8003446:	7108      	strb	r0, [r1, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 8003448:	8952      	ldrh	r2, [r2, #10]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800344c:	e788      	b.n	8003360 <LoadEEparams+0x4c>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <LoadEEparams+0x19c>)
 8003450:	899a      	ldrh	r2, [r3, #12]
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <LoadEEparams+0x198>)
 8003454:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003456:	e791      	b.n	800337c <LoadEEparams+0x68>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <LoadEEparams+0x19c>)
 800345a:	89da      	ldrh	r2, [r3, #14]
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <LoadEEparams+0x198>)
 800345e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003460:	e79a      	b.n	8003398 <LoadEEparams+0x84>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <LoadEEparams+0x19c>)
 8003464:	7c11      	ldrb	r1, [r2, #16]
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <LoadEEparams+0x198>)
 8003468:	332c      	adds	r3, #44	; 0x2c
 800346a:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800346c:	7c52      	ldrb	r2, [r2, #17]
 800346e:	715a      	strb	r2, [r3, #5]
 8003470:	e7a2      	b.n	80033b8 <LoadEEparams+0xa4>
	else if(CLI_LOW_Baudrate_Flag)
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <LoadEEparams+0x198>)
 8003474:	2248      	movs	r2, #72	; 0x48
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <LoadEEparams+0x172>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <LoadEEparams+0x198>)
 800347e:	22e1      	movs	r2, #225	; 0xe1
 8003480:	0252      	lsls	r2, r2, #9
 8003482:	635a      	str	r2, [r3, #52]	; 0x34
 8003484:	e7b1      	b.n	80033ea <LoadEEparams+0xd6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <LoadEEparams+0x19c>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <LoadEEparams+0x198>)
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
 800348e:	e7ac      	b.n	80033ea <LoadEEparams+0xd6>
		BOS.hourformat =24;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <LoadEEparams+0x198>)
 8003492:	332c      	adds	r3, #44	; 0x2c
 8003494:	2218      	movs	r2, #24
 8003496:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003498:	2200      	movs	r2, #0
 800349a:	731a      	strb	r2, [r3, #12]
 800349c:	e7b5      	b.n	800340a <LoadEEparams+0xf6>
		BOS.disableCLI =BOS_default.disableCLI;
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <LoadEEparams+0x19c>)
 80034a0:	2226      	movs	r2, #38	; 0x26
 80034a2:	5c9a      	ldrb	r2, [r3, r2]
 80034a4:	4b01      	ldr	r3, [pc, #4]	; (80034ac <LoadEEparams+0x198>)
 80034a6:	332c      	adds	r3, #44	; 0x2c
 80034a8:	769a      	strb	r2, [r3, #26]
 80034aa:	e7bb      	b.n	8003424 <LoadEEparams+0x110>
 80034ac:	20000820 	.word	0x20000820
 80034b0:	20000008 	.word	0x20000008

080034b4 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80034b8:	231e      	movs	r3, #30
 80034ba:	446b      	add	r3, sp
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80034c0:	2400      	movs	r4, #0
 80034c2:	e001      	b.n	80034c8 <LoadEEbuttons+0x14>
 80034c4:	3401      	adds	r4, #1
 80034c6:	b2e4      	uxtb	r4, r4
 80034c8:	2c05      	cmp	r4, #5
 80034ca:	d85d      	bhi.n	8003588 <LoadEEbuttons+0xd4>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80034cc:	0025      	movs	r5, r4
 80034ce:	353b      	adds	r5, #59	; 0x3b
 80034d0:	00ad      	lsls	r5, r5, #2
 80034d2:	b2ad      	uxth	r5, r5
 80034d4:	211e      	movs	r1, #30
 80034d6:	4469      	add	r1, sp
 80034d8:	0028      	movs	r0, r5
 80034da:	f008 fab1 	bl	800ba40 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 80034de:	2800      	cmp	r0, #0
 80034e0:	d1f0      	bne.n	80034c4 <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 80034e2:	231e      	movs	r3, #30
 80034e4:	446b      	add	r3, sp
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	0a18      	lsrs	r0, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80034ea:	0b19      	lsrs	r1, r3, #12
 80034ec:	1c62      	adds	r2, r4, #1
 80034ee:	4291      	cmp	r1, r2
 80034f0:	d1e8      	bne.n	80034c4 <LoadEEbuttons+0x10>
 80034f2:	210f      	movs	r1, #15
 80034f4:	000f      	movs	r7, r1
 80034f6:	4007      	ands	r7, r0
 80034f8:	4201      	tst	r1, r0
 80034fa:	d0e3      	beq.n	80034c4 <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 80034fc:	4e24      	ldr	r6, [pc, #144]	; (8003590 <LoadEEbuttons+0xdc>)
 80034fe:	00d1      	lsls	r1, r2, #3
 8003500:	188a      	adds	r2, r1, r2
 8003502:	18b6      	adds	r6, r6, r2
 8003504:	7077      	strb	r7, [r6, #1]
				button[i + 1].events =(uint8_t )temp16;
 8003506:	7233      	strb	r3, [r6, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003508:	1c68      	adds	r0, r5, #1
 800350a:	b280      	uxth	r0, r0
 800350c:	231e      	movs	r3, #30
 800350e:	446b      	add	r3, sp
 8003510:	0019      	movs	r1, r3
 8003512:	f008 fa95 	bl	800ba40 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003516:	466b      	mov	r3, sp
 8003518:	8bdb      	ldrh	r3, [r3, #30]
 800351a:	0a1a      	lsrs	r2, r3, #8
 800351c:	70b2      	strb	r2, [r6, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 800351e:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003520:	1ca8      	adds	r0, r5, #2
 8003522:	b280      	uxth	r0, r0
 8003524:	231e      	movs	r3, #30
 8003526:	446b      	add	r3, sp
 8003528:	0019      	movs	r1, r3
 800352a:	f008 fa89 	bl	800ba40 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800352e:	466b      	mov	r3, sp
 8003530:	8bdb      	ldrh	r3, [r3, #30]
 8003532:	0a1a      	lsrs	r2, r3, #8
 8003534:	70f2      	strb	r2, [r6, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003536:	71b3      	strb	r3, [r6, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003538:	3503      	adds	r5, #3
 800353a:	b2a8      	uxth	r0, r5
 800353c:	231e      	movs	r3, #30
 800353e:	446b      	add	r3, sp
 8003540:	0019      	movs	r1, r3
 8003542:	f008 fa7d 	bl	800ba40 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003546:	466b      	mov	r3, sp
 8003548:	8bdb      	ldrh	r3, [r3, #30]
 800354a:	0a1a      	lsrs	r2, r3, #8
 800354c:	7132      	strb	r2, [r6, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800354e:	71f3      	strb	r3, [r6, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003550:	1c65      	adds	r5, r4, #1
 8003552:	b2ed      	uxtb	r5, r5
 8003554:	7870      	ldrb	r0, [r6, #1]
 8003556:	0029      	movs	r1, r5
 8003558:	f008 ff02 	bl	800c360 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800355c:	7a31      	ldrb	r1, [r6, #8]
 800355e:	084a      	lsrs	r2, r1, #1
 8003560:	78b3      	ldrb	r3, [r6, #2]
 8003562:	2001      	movs	r0, #1
 8003564:	4002      	ands	r2, r0
 8003566:	4001      	ands	r1, r0
 8003568:	2000      	movs	r0, #0
 800356a:	9005      	str	r0, [sp, #20]
 800356c:	79f0      	ldrb	r0, [r6, #7]
 800356e:	9004      	str	r0, [sp, #16]
 8003570:	79b0      	ldrb	r0, [r6, #6]
 8003572:	9003      	str	r0, [sp, #12]
 8003574:	7970      	ldrb	r0, [r6, #5]
 8003576:	9002      	str	r0, [sp, #8]
 8003578:	7930      	ldrb	r0, [r6, #4]
 800357a:	9001      	str	r0, [sp, #4]
 800357c:	78f0      	ldrb	r0, [r6, #3]
 800357e:	9000      	str	r0, [sp, #0]
 8003580:	0028      	movs	r0, r5
 8003582:	f009 f807 	bl	800c594 <SetButtonEvents>
 8003586:	e79d      	b.n	80034c4 <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 8003588:	2000      	movs	r0, #0
 800358a:	b009      	add	sp, #36	; 0x24
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	2000269c 	.word	0x2000269c

08003594 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	46d6      	mov	lr, sl
 8003598:	464f      	mov	r7, r9
 800359a:	b580      	push	{r7, lr}
 800359c:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800359e:	2032      	movs	r0, #50	; 0x32
 80035a0:	f00f fdac 	bl	80130fc <malloc>
 80035a4:	1e06      	subs	r6, r0, #0
	if(snipBuffer == NULL)
 80035a6:	d068      	beq.n	800367a <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <LoadROsnippets+0xf0>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2bfe      	cmp	r3, #254	; 0xfe
 80035ae:	d166      	bne.n	800367e <LoadROsnippets+0xea>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80035b0:	2700      	movs	r7, #0
	int currentAdd = RO_MID_ADDRESS;
 80035b2:	4c34      	ldr	r4, [pc, #208]	; (8003684 <LoadROsnippets+0xf0>)
 80035b4:	e04a      	b.n	800364c <LoadROsnippets+0xb8>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80035b6:	7822      	ldrb	r2, [r4, #0]
 80035b8:	54f2      	strb	r2, [r6, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 80035ba:	3301      	adds	r3, #1
 80035bc:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80035be:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80035c0:	2b13      	cmp	r3, #19
 80035c2:	d9f8      	bls.n	80035b6 <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80035c4:	46ba      	mov	sl, r7
 80035c6:	00bb      	lsls	r3, r7, #2
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <LoadROsnippets+0xf4>)
 80035ce:	4699      	mov	r9, r3
 80035d0:	4491      	add	r9, r2
 80035d2:	1c71      	adds	r1, r6, #1
 80035d4:	2214      	movs	r2, #20
 80035d6:	4648      	mov	r0, r9
 80035d8:	f011 fad1 	bl	8014b7e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80035dc:	2214      	movs	r2, #20
 80035de:	2100      	movs	r1, #0
 80035e0:	0030      	movs	r0, r6
 80035e2:	f011 f9a0 	bl	8014926 <memset>
		i =0;
		// Load commands until you get next 0xFE
		currentAdd=currentAdd+20;
 80035e6:	3414      	adds	r4, #20
		i =0;
 80035e8:	2500      	movs	r5, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035ea:	e003      	b.n	80035f4 <LoadROsnippets+0x60>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80035ec:	5573      	strb	r3, [r6, r5]
			++currentAdd;
 80035ee:	3401      	adds	r4, #1
			++i;
 80035f0:	3501      	adds	r5, #1
 80035f2:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80035f4:	9401      	str	r4, [sp, #4]
 80035f6:	7823      	ldrb	r3, [r4, #0]
 80035f8:	2bfd      	cmp	r3, #253	; 0xfd
 80035fa:	d801      	bhi.n	8003600 <LoadROsnippets+0x6c>
 80035fc:	2d31      	cmp	r5, #49	; 0x31
 80035fe:	d9f5      	bls.n	80035ec <LoadROsnippets+0x58>
		}
		if(snipBuffer[i - 1] != 0)
 8003600:	1973      	adds	r3, r6, r5
 8003602:	3b01      	subs	r3, #1
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <LoadROsnippets+0x7a>
			++i;	// String termination char was not recorded, then add one
 800360a:	3501      	adds	r5, #1
 800360c:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 800360e:	0028      	movs	r0, r5
 8003610:	f00f fd74 	bl	80130fc <malloc>
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <LoadROsnippets+0xf4>)
 8003616:	4652      	mov	r2, sl
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4452      	add	r2, sl
 800361c:	0092      	lsls	r2, r2, #2
 800361e:	189b      	adds	r3, r3, r2
 8003620:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003622:	2800      	cmp	r0, #0
 8003624:	d016      	beq.n	8003654 <LoadROsnippets+0xc0>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003626:	002a      	movs	r2, r5
 8003628:	0031      	movs	r1, r6
 800362a:	f011 faa8 	bl	8014b7e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <LoadROsnippets+0xf8>)
 8003630:	7813      	ldrb	r3, [r2, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003636:	002a      	movs	r2, r5
 8003638:	2100      	movs	r1, #0
 800363a:	0030      	movs	r0, r6
 800363c:	f011 f973 	bl	8014926 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2bfe      	cmp	r3, #254	; 0xfe
 8003646:	d10f      	bne.n	8003668 <LoadROsnippets+0xd4>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003648:	3701      	adds	r7, #1
 800364a:	b2ff      	uxtb	r7, r7
 800364c:	2f04      	cmp	r7, #4
 800364e:	d80b      	bhi.n	8003668 <LoadROsnippets+0xd4>
		for(i =0; i < sizeof(snippet_t); i++)
 8003650:	2300      	movs	r3, #0
 8003652:	e7b5      	b.n	80035c0 <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003654:	2214      	movs	r2, #20
 8003656:	2100      	movs	r1, #0
 8003658:	4648      	mov	r0, r9
 800365a:	f011 f964 	bl	8014926 <memset>
			free(snipBuffer);
 800365e:	0030      	movs	r0, r6
 8003660:	f00f fd56 	bl	8013110 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003664:	200e      	movs	r0, #14
 8003666:	e003      	b.n	8003670 <LoadROsnippets+0xdc>
			break;
	}
	
	free(snipBuffer);
 8003668:	0030      	movs	r0, r6
 800366a:	f00f fd51 	bl	8013110 <free>
	return BOS_OK;
 800366e:	2000      	movs	r0, #0
}
 8003670:	b003      	add	sp, #12
 8003672:	bcc0      	pop	{r6, r7}
 8003674:	46ba      	mov	sl, r7
 8003676:	46b1      	mov	r9, r6
 8003678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 800367a:	20fb      	movs	r0, #251	; 0xfb
 800367c:	e7f8      	b.n	8003670 <LoadROsnippets+0xdc>
		return BOS_ERROR;
 800367e:	20ff      	movs	r0, #255	; 0xff
 8003680:	e7f6      	b.n	8003670 <LoadROsnippets+0xdc>
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	0801dc00 	.word	0x0801dc00
 8003688:	200014a8 	.word	0x200014a8
 800368c:	200014a4 	.word	0x200014a4

08003690 <LoadEEvars>:
void LoadEEvars(void){
 8003690:	b510      	push	{r4, lr}
	LoadROtopology();
 8003692:	f7ff fc9b 	bl	8002fcc <LoadROtopology>
	LoadEEportsDir();
 8003696:	f7ff fce7 	bl	8003068 <LoadEEportsDir>
	LoadEEalias();
 800369a:	f7ff fd01 	bl	80030a0 <LoadEEalias>
	LoadEEgroup();
 800369e:	f7ff fd3b 	bl	8003118 <LoadEEgroup>
	LoadEEstreams();
 80036a2:	f7ff fd95 	bl	80031d0 <LoadEEstreams>
	LoadEEparams();
 80036a6:	f7ff fe35 	bl	8003314 <LoadEEparams>
	LoadEEbuttons();
 80036aa:	f7ff ff03 	bl	80034b4 <LoadEEbuttons>
	LoadROsnippets();
 80036ae:	f7ff ff71 	bl	8003594 <LoadROsnippets>
}
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80036b4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80036b6:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80036b8:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 80036ba:	e005      	b.n	80036c8 <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036bc:	1c60      	adds	r0, r4, #1
 80036be:	f008 fa71 	bl	800bba4 <EE_WriteVariable>
 80036c2:	e00b      	b.n	80036dc <SaveEEportsDir+0x28>
	for(uint8_t i =1; i <= N; i++){
 80036c4:	3401      	adds	r4, #1
 80036c6:	b2e4      	uxtb	r4, r4
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <SaveEEportsDir+0x34>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	d309      	bcc.n	80036e4 <SaveEEportsDir+0x30>
		if(arrayPortsDir[i - 1])
 80036d0:	1e63      	subs	r3, r4, #1
 80036d2:	4a06      	ldr	r2, [pc, #24]	; (80036ec <SaveEEportsDir+0x38>)
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	5a99      	ldrh	r1, [r3, r2]
 80036d8:	2900      	cmp	r1, #0
 80036da:	d1ef      	bne.n	80036bc <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036dc:	2c19      	cmp	r4, #25
 80036de:	d9f1      	bls.n	80036c4 <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 80036e0:	250a      	movs	r5, #10
 80036e2:	e7ef      	b.n	80036c4 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 80036e4:	0028      	movs	r0, r5
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	20000008 	.word	0x20000008
 80036ec:	20002870 	.word	0x20002870

080036f0 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80036f2:	2500      	movs	r5, #0
	uint16_t add =0, temp =0;
 80036f4:	2600      	movs	r6, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80036f6:	e017      	b.n	8003728 <SaveEEalias+0x38>
	    {
		if(moduleAlias[i][0]){
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80036f8:	1e60      	subs	r0, r4, #1
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <SaveEEalias+0x58>)
 80036fc:	00ba      	lsls	r2, r7, #2
 80036fe:	19d2      	adds	r2, r2, r7
 8003700:	0051      	lsls	r1, r2, #1
 8003702:	185b      	adds	r3, r3, r1
 8003704:	5c19      	ldrb	r1, [r3, r0]
 8003706:	0209      	lsls	r1, r1, #8
 8003708:	5d1b      	ldrb	r3, [r3, r4]
 800370a:	18c9      	adds	r1, r1, r3
 800370c:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800370e:	0030      	movs	r0, r6
 8003710:	301c      	adds	r0, #28
 8003712:	b280      	uxth	r0, r0
 8003714:	f008 fa46 	bl	800bba4 <EE_WriteVariable>
				add++;
 8003718:	3601      	adds	r6, #1
 800371a:	b2b6      	uxth	r6, r6
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800371c:	3402      	adds	r4, #2
 800371e:	b2e4      	uxtb	r4, r4
 8003720:	2c09      	cmp	r4, #9
 8003722:	d9e9      	bls.n	80036f8 <SaveEEalias+0x8>
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003724:	3501      	adds	r5, #1
 8003726:	b2ed      	uxtb	r5, r5
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SaveEEalias+0x5c>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	42ab      	cmp	r3, r5
 800372e:	d309      	bcc.n	8003744 <SaveEEalias+0x54>
		if(moduleAlias[i][0]){
 8003730:	002f      	movs	r7, r5
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <SaveEEalias+0x58>)
 8003734:	00ab      	lsls	r3, r5, #2
 8003736:	195b      	adds	r3, r3, r5
 8003738:	0059      	lsls	r1, r3, #1
 800373a:	5c8b      	ldrb	r3, [r1, r2]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f1      	beq.n	8003724 <SaveEEalias+0x34>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003740:	2401      	movs	r4, #1
 8003742:	e7ed      	b.n	8003720 <SaveEEalias+0x30>
			}
		}
	}
	
	return result;
}
 8003744:	2000      	movs	r0, #0
 8003746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003748:	20000b6c 	.word	0x20000b6c
 800374c:	20000008 	.word	0x20000008

08003750 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	46de      	mov	lr, fp
 8003754:	4657      	mov	r7, sl
 8003756:	464e      	mov	r6, r9
 8003758:	4645      	mov	r5, r8
 800375a:	b5e0      	push	{r5, r6, r7, lr}
 800375c:	000f      	movs	r7, r1
 800375e:	0016      	movs	r6, r2
 8003760:	001c      	movs	r4, r3
 8003762:	ab0a      	add	r3, sp, #40	; 0x28
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	469b      	mov	fp, r3
 8003768:	ab0b      	add	r3, sp, #44	; 0x2c
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	469a      	mov	sl, r3
 800376e:	ab0c      	add	r3, sp, #48	; 0x30
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4699      	mov	r9, r3
 8003774:	ab0d      	add	r3, sp, #52	; 0x34
 8003776:	781d      	ldrb	r5, [r3, #0]
 8003778:	ab0e      	add	r3, sp, #56	; 0x38
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800377e:	0001      	movs	r1, r0
 8003780:	20e4      	movs	r0, #228	; 0xe4
 8003782:	f008 fa0f 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003786:	0a39      	lsrs	r1, r7, #8
 8003788:	b289      	uxth	r1, r1
 800378a:	20e5      	movs	r0, #229	; 0xe5
 800378c:	f008 fa0a 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003790:	b2b9      	uxth	r1, r7
 8003792:	20e6      	movs	r0, #230	; 0xe6
 8003794:	f008 fa06 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003798:	0a31      	lsrs	r1, r6, #8
 800379a:	b289      	uxth	r1, r1
 800379c:	20e7      	movs	r0, #231	; 0xe7
 800379e:	f008 fa01 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037a2:	b2b1      	uxth	r1, r6
 80037a4:	20e8      	movs	r0, #232	; 0xe8
 80037a6:	f008 f9fd 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037aa:	0221      	lsls	r1, r4, #8
 80037ac:	4459      	add	r1, fp
 80037ae:	b289      	uxth	r1, r1
 80037b0:	20e9      	movs	r0, #233	; 0xe9
 80037b2:	f008 f9f7 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037b6:	4653      	mov	r3, sl
 80037b8:	0219      	lsls	r1, r3, #8
 80037ba:	4449      	add	r1, r9
 80037bc:	b289      	uxth	r1, r1
 80037be:	20ea      	movs	r0, #234	; 0xea
 80037c0:	f008 f9f0 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80037c4:	0229      	lsls	r1, r5, #8
 80037c6:	4441      	add	r1, r8
 80037c8:	b289      	uxth	r1, r1
 80037ca:	20eb      	movs	r0, #235	; 0xeb
 80037cc:	f008 f9ea 	bl	800bba4 <EE_WriteVariable>
	
	return result;
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	bcf0      	pop	{r4, r5, r6, r7}
 80037d4:	46bb      	mov	fp, r7
 80037d6:	46b2      	mov	sl, r6
 80037d8:	46a9      	mov	r9, r5
 80037da:	46a0      	mov	r8, r4
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037e0 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80037e0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80037e2:	4c21      	ldr	r4, [pc, #132]	; (8003868 <SaveEEparams+0x88>)
 80037e4:	0025      	movs	r5, r4
 80037e6:	3524      	adds	r5, #36	; 0x24
 80037e8:	786b      	ldrb	r3, [r5, #1]
 80037ea:	015b      	lsls	r3, r3, #5
 80037ec:	2224      	movs	r2, #36	; 0x24
 80037ee:	5ca1      	ldrb	r1, [r4, r2]
 80037f0:	4319      	orrs	r1, r3
 80037f2:	208a      	movs	r0, #138	; 0x8a
 80037f4:	0040      	lsls	r0, r0, #1
 80037f6:	f008 f9d5 	bl	800bba4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80037fa:	792b      	ldrb	r3, [r5, #4]
 80037fc:	03db      	lsls	r3, r3, #15
 80037fe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003800:	4319      	orrs	r1, r3
 8003802:	b289      	uxth	r1, r1
 8003804:	208e      	movs	r0, #142	; 0x8e
 8003806:	0040      	lsls	r0, r0, #1
 8003808:	f008 f9cc 	bl	800bba4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 800380c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800380e:	2016      	movs	r0, #22
 8003810:	30ff      	adds	r0, #255	; 0xff
 8003812:	f008 f9c7 	bl	800bba4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003816:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003818:	208b      	movs	r0, #139	; 0x8b
 800381a:	0040      	lsls	r0, r0, #1
 800381c:	f008 f9c2 	bl	800bba4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003820:	0025      	movs	r5, r4
 8003822:	352c      	adds	r5, #44	; 0x2c
 8003824:	796b      	ldrb	r3, [r5, #5]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	7b29      	ldrb	r1, [r5, #12]
 800382a:	4319      	orrs	r1, r3
 800382c:	2018      	movs	r0, #24
 800382e:	30ff      	adds	r0, #255	; 0xff
 8003830:	f008 f9b8 	bl	800bba4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003834:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003836:	208c      	movs	r0, #140	; 0x8c
 8003838:	0040      	lsls	r0, r0, #1
 800383a:	f008 f9b3 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800383e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003840:	201a      	movs	r0, #26
 8003842:	30ff      	adds	r0, #255	; 0xff
 8003844:	f008 f9ae 	bl	800bba4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003848:	7b6b      	ldrb	r3, [r5, #13]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	7929      	ldrb	r1, [r5, #4]
 800384e:	4319      	orrs	r1, r3
 8003850:	208d      	movs	r0, #141	; 0x8d
 8003852:	0040      	lsls	r0, r0, #1
 8003854:	f008 f9a6 	bl	800bba4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003858:	7ea9      	ldrb	r1, [r5, #26]
 800385a:	201c      	movs	r0, #28
 800385c:	30ff      	adds	r0, #255	; 0xff
 800385e:	f008 f9a1 	bl	800bba4 <EE_WriteVariable>
	
	return result;
}
 8003862:	2000      	movs	r0, #0
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	20000820 	.word	0x20000820

0800386c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800386c:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800386e:	480f      	ldr	r0, [pc, #60]	; (80038ac <ClearEEportsDir+0x40>)
 8003870:	2234      	movs	r2, #52	; 0x34
 8003872:	2100      	movs	r1, #0
 8003874:	f011 f857 	bl	8014926 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003878:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800387a:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 800387c:	e005      	b.n	800388a <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800387e:	1c60      	adds	r0, r4, #1
 8003880:	f008 f990 	bl	800bba4 <EE_WriteVariable>
 8003884:	e00b      	b.n	800389e <ClearEEportsDir+0x32>
	for(uint8_t i =1; i <= N; i++){
 8003886:	3401      	adds	r4, #1
 8003888:	b2e4      	uxtb	r4, r4
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <ClearEEportsDir+0x44>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	42a3      	cmp	r3, r4
 8003890:	d309      	bcc.n	80038a6 <ClearEEportsDir+0x3a>
		if(arrayPortsDir[i - 1])
 8003892:	1e63      	subs	r3, r4, #1
 8003894:	4a05      	ldr	r2, [pc, #20]	; (80038ac <ClearEEportsDir+0x40>)
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	5a99      	ldrh	r1, [r3, r2]
 800389a:	2900      	cmp	r1, #0
 800389c:	d1ef      	bne.n	800387e <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800389e:	2c19      	cmp	r4, #25
 80038a0:	d9f1      	bls.n	8003886 <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 80038a2:	250a      	movs	r5, #10
 80038a4:	e7ef      	b.n	8003886 <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 80038a6:	0028      	movs	r0, r5
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	20002870 	.word	0x20002870
 80038b0:	20000008 	.word	0x20000008

080038b4 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 80038b4:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <EE_FormatForFactoryReset+0x20>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <EE_FormatForFactoryReset+0x24>)
 80038bc:	429a      	cmp	r2, r3
 80038be:	d100      	bne.n	80038c2 <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
		}
	}
	
}
 80038c0:	bd10      	pop	{r4, pc}
		if(EE_Format() == HAL_OK){
 80038c2:	f008 f985 	bl	800bbd0 <EE_Format>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d1fa      	bne.n	80038c0 <EE_FormatForFactoryReset+0xc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80038ca:	4b02      	ldr	r3, [pc, #8]	; (80038d4 <EE_FormatForFactoryReset+0x20>)
 80038cc:	4a02      	ldr	r2, [pc, #8]	; (80038d8 <EE_FormatForFactoryReset+0x24>)
 80038ce:	601a      	str	r2, [r3, #0]
}
 80038d0:	e7f6      	b.n	80038c0 <EE_FormatForFactoryReset+0xc>
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	20007ff0 	.word	0x20007ff0
 80038d8:	beefdead 	.word	0xbeefdead

080038dc <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 80038dc:	b530      	push	{r4, r5, lr}
 80038de:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80038e0:	ab04      	add	r3, sp, #16
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	ab07      	add	r3, sp, #28
 80038e6:	2212      	movs	r2, #18
 80038e8:	446a      	add	r2, sp
 80038ea:	a908      	add	r1, sp, #32
 80038ec:	2001      	movs	r0, #1
 80038ee:	f008 fbf5 	bl	800c0dc <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80038f2:	ad03      	add	r5, sp, #12
 80038f4:	9500      	str	r5, [sp, #0]
 80038f6:	ab05      	add	r3, sp, #20
 80038f8:	220e      	movs	r2, #14
 80038fa:	446a      	add	r2, sp
 80038fc:	a906      	add	r1, sp, #24
 80038fe:	2002      	movs	r0, #2
 8003900:	f008 fbec 	bl	800c0dc <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	2301      	movs	r3, #1
 8003906:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2400      	movs	r4, #0
 800390a:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 800390c:	466b      	mov	r3, sp
 800390e:	8a5b      	ldrh	r3, [r3, #18]
 8003910:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003912:	9808      	ldr	r0, [sp, #32]
 8003914:	a909      	add	r1, sp, #36	; 0x24
 8003916:	f00d fdc5 	bl	80114a4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800391a:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800391c:	2302      	movs	r3, #2
 800391e:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003920:	882b      	ldrh	r3, [r5, #0]
 8003922:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003924:	9805      	ldr	r0, [sp, #20]
 8003926:	a909      	add	r1, sp, #36	; 0x24
 8003928:	f00d fdbc 	bl	80114a4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800392c:	466b      	mov	r3, sp
 800392e:	8a59      	ldrh	r1, [r3, #18]
 8003930:	9808      	ldr	r0, [sp, #32]
 8003932:	2200      	movs	r2, #0
 8003934:	f00d ff0b 	bl	801174e <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003938:	2005      	movs	r0, #5
 800393a:	f00a f8e3 	bl	800db04 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800393e:	8829      	ldrh	r1, [r5, #0]
 8003940:	9805      	ldr	r0, [sp, #20]
 8003942:	f00d fefd 	bl	8011740 <HAL_GPIO_ReadPin>
 8003946:	1e04      	subs	r4, r0, #0
 8003948:	d003      	beq.n	8003952 <IsLowerCLIbaud+0x76>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800394a:	2400      	movs	r4, #0
}
 800394c:	0020      	movs	r0, r4
 800394e:	b00f      	add	sp, #60	; 0x3c
 8003950:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003952:	2312      	movs	r3, #18
 8003954:	446b      	add	r3, sp
 8003956:	8819      	ldrh	r1, [r3, #0]
 8003958:	9808      	ldr	r0, [sp, #32]
 800395a:	2201      	movs	r2, #1
 800395c:	f00d fef7 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003960:	2005      	movs	r0, #5
 8003962:	f00a f8cf 	bl	800db04 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003966:	8829      	ldrh	r1, [r5, #0]
 8003968:	9805      	ldr	r0, [sp, #20]
 800396a:	f00d fee9 	bl	8011740 <HAL_GPIO_ReadPin>
 800396e:	2801      	cmp	r0, #1
 8003970:	d1ec      	bne.n	800394c <IsLowerCLIbaud+0x70>
			return 1;
 8003972:	0004      	movs	r4, r0
 8003974:	e7ea      	b.n	800394c <IsLowerCLIbaud+0x70>
	...

08003978 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 800397c:	2400      	movs	r4, #0
 800397e:	2c00      	cmp	r4, #0
 8003980:	d001      	beq.n	8003986 <IsModuleParameter+0xe>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
			return i + 1;
	}
	return 0;
 8003982:	2000      	movs	r0, #0
}
 8003984:	bd70      	pop	{r4, r5, r6, pc}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <IsModuleParameter+0x30>)
 8003988:	0062      	lsls	r2, r4, #1
 800398a:	1912      	adds	r2, r2, r4
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	189b      	adds	r3, r3, r2
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	0028      	movs	r0, r5
 8003994:	f7fc fbb6 	bl	8000104 <strcmp>
 8003998:	2800      	cmp	r0, #0
 800399a:	d002      	beq.n	80039a2 <IsModuleParameter+0x2a>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 800399c:	3401      	adds	r4, #1
 800399e:	b2e4      	uxtb	r4, r4
 80039a0:	e7ed      	b.n	800397e <IsModuleParameter+0x6>
			return i + 1;
 80039a2:	3401      	adds	r4, #1
 80039a4:	b2e0      	uxtb	r0, r4
 80039a6:	e7ed      	b.n	8003984 <IsModuleParameter+0xc>
 80039a8:	20000094 	.word	0x20000094

080039ac <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80039b0:	2500      	movs	r5, #0
 80039b2:	2d05      	cmp	r5, #5
 80039b4:	d826      	bhi.n	8003a04 <IsMathOperator+0x58>
		if(!strcmp(string,"="))
 80039b6:	491a      	ldr	r1, [pc, #104]	; (8003a20 <IsMathOperator+0x74>)
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fc fba3 	bl	8000104 <strcmp>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d022      	beq.n	8003a08 <IsMathOperator+0x5c>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80039c2:	4918      	ldr	r1, [pc, #96]	; (8003a24 <IsMathOperator+0x78>)
 80039c4:	0020      	movs	r0, r4
 80039c6:	f7fc fb9d 	bl	8000104 <strcmp>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d01e      	beq.n	8003a0c <IsMathOperator+0x60>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80039ce:	4916      	ldr	r1, [pc, #88]	; (8003a28 <IsMathOperator+0x7c>)
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc fb97 	bl	8000104 <strcmp>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d01a      	beq.n	8003a10 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80039da:	4914      	ldr	r1, [pc, #80]	; (8003a2c <IsMathOperator+0x80>)
 80039dc:	0020      	movs	r0, r4
 80039de:	f7fc fb91 	bl	8000104 <strcmp>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d016      	beq.n	8003a14 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80039e6:	4912      	ldr	r1, [pc, #72]	; (8003a30 <IsMathOperator+0x84>)
 80039e8:	0020      	movs	r0, r4
 80039ea:	f7fc fb8b 	bl	8000104 <strcmp>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d012      	beq.n	8003a18 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80039f2:	4910      	ldr	r1, [pc, #64]	; (8003a34 <IsMathOperator+0x88>)
 80039f4:	0020      	movs	r0, r4
 80039f6:	f7fc fb85 	bl	8000104 <strcmp>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d00e      	beq.n	8003a1c <IsMathOperator+0x70>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80039fe:	3501      	adds	r5, #1
 8003a00:	b2ed      	uxtb	r5, r5
 8003a02:	e7d6      	b.n	80039b2 <IsMathOperator+0x6>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003a04:	2000      	movs	r0, #0
}
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e7fc      	b.n	8003a06 <IsMathOperator+0x5a>
			return MATH_GREATER;
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	e7fa      	b.n	8003a06 <IsMathOperator+0x5a>
			return MATH_SMALLER;
 8003a10:	2003      	movs	r0, #3
 8003a12:	e7f8      	b.n	8003a06 <IsMathOperator+0x5a>
			return MATH_GREATER_EQUAL;
 8003a14:	2004      	movs	r0, #4
 8003a16:	e7f6      	b.n	8003a06 <IsMathOperator+0x5a>
			return MATH_SMALLER_EQUAL;
 8003a18:	2005      	movs	r0, #5
 8003a1a:	e7f4      	b.n	8003a06 <IsMathOperator+0x5a>
			return MATH_NOT_EQUAL;
 8003a1c:	2006      	movs	r0, #6
 8003a1e:	e7f2      	b.n	8003a06 <IsMathOperator+0x5a>
 8003a20:	08019d84 	.word	0x08019d84
 8003a24:	08019d88 	.word	0x08019d88
 8003a28:	08019d8c 	.word	0x08019d8c
 8003a2c:	08019d90 	.word	0x08019d90
 8003a30:	08019d94 	.word	0x08019d94
 8003a34:	08019d98 	.word	0x08019d98

08003a38 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003a38:	b510      	push	{r4, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003a3a:	f009 ff15 	bl	800d868 <RTC_Init>
	GetTimeDate();
 8003a3e:	f009 ffb9 	bl	800d9b4 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 8003a42:	f008 f929 	bl	800bc98 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003a46:	f008 fb13 	bl	800c070 <GPIO_Init>
	DMA_Init();
 8003a4a:	f007 f8f1 	bl	800ac30 <DMA_Init>
	TIM_USEC_Init();
 8003a4e:	f009 ffe3 	bl	800da18 <TIM_USEC_Init>
	CRC_Init();
 8003a52:	f007 ff03 	bl	800b85c <CRC_Init>
	TIM_MSEC_Init();
 8003a56:	f00a f811 	bl	800da7c <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003a5a:	f008 fb9b 	bl	800c194 <IsFactoryReset>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d111      	bne.n	8003a86 <BOS_Init+0x4e>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 8003a62:	f7ff ff3b 	bl	80038dc <IsLowerCLIbaud>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d042      	beq.n	8003af0 <BOS_Init+0xb8>
		CLI_LOW_Baudrate_Flag =1;
 8003a6a:	4c35      	ldr	r4, [pc, #212]	; (8003b40 <BOS_Init+0x108>)
 8003a6c:	2348      	movs	r3, #72	; 0x48
 8003a6e:	2201      	movs	r2, #1
 8003a70:	54e2      	strb	r2, [r4, r3]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a72:	2032      	movs	r0, #50	; 0x32
 8003a74:	f00a f846 	bl	800db04 <StartMilliDelay>
		Module_Peripheral_Init();
 8003a78:	f007 f80e 	bl	800aa98 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003a7c:	23e1      	movs	r3, #225	; 0xe1
 8003a7e:	025b      	lsls	r3, r3, #9
 8003a80:	6363      	str	r3, [r4, #52]	; 0x34
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a82:	2401      	movs	r4, #1
 8003a84:	e011      	b.n	8003aaa <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8003a86:	f7ff ff15 	bl	80038b4 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a8a:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <BOS_Init+0x10c>)
 8003a90:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <BOS_Init+0x110>)
 8003a92:	60da      	str	r2, [r3, #12]
 8003a94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	e7fd      	b.n	8003a98 <BOS_Init+0x60>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <BOS_Init+0x108>)
 8003a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa0:	0020      	movs	r0, r4
 8003aa2:	f00a fa6d 	bl	800df80 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003aa6:	3401      	adds	r4, #1
 8003aa8:	b2e4      	uxtb	r4, r4
 8003aaa:	2c05      	cmp	r4, #5
 8003aac:	d9f6      	bls.n	8003a9c <BOS_Init+0x64>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003aae:	f7ff fdef 	bl	8003690 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003ab2:	f00a faf5 	bl	800e0a0 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003ab6:	f007 fe35 	bl	800b724 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <BOS_Init+0x114>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11c      	bne.n	8003afc <BOS_Init+0xc4>
	{
		IND_ON();
 8003ac2:	2490      	movs	r4, #144	; 0x90
 8003ac4:	05e4      	lsls	r4, r4, #23
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	0020      	movs	r0, r4
 8003acc:	f00d fe3f 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003ad0:	20fa      	movs	r0, #250	; 0xfa
 8003ad2:	0040      	lsls	r0, r0, #1
 8003ad4:	f00a f816 	bl	800db04 <StartMilliDelay>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2140      	movs	r1, #64	; 0x40
 8003adc:	0020      	movs	r0, r4
 8003ade:	f00d fe36 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
		IND_OFF();
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003ae2:	f003 fe9f 	bl	8007824 <ResetUartORE>
	
	BOS_initialized =1;
 8003ae6:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <BOS_Init+0x108>)
 8003ae8:	2249      	movs	r2, #73	; 0x49
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]
}
 8003aee:	bd10      	pop	{r4, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003af0:	2032      	movs	r0, #50	; 0x32
 8003af2:	f00a f807 	bl	800db04 <StartMilliDelay>
		Module_Peripheral_Init();
 8003af6:	f006 ffcf 	bl	800aa98 <Module_Peripheral_Init>
 8003afa:	e7d8      	b.n	8003aae <BOS_Init+0x76>
		IND_ON();
 8003afc:	2490      	movs	r4, #144	; 0x90
 8003afe:	05e4      	lsls	r4, r4, #23
 8003b00:	2201      	movs	r2, #1
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	0020      	movs	r0, r4
 8003b06:	f00d fe22 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003b0a:	20fa      	movs	r0, #250	; 0xfa
 8003b0c:	0040      	lsls	r0, r0, #1
 8003b0e:	f009 fff9 	bl	800db04 <StartMilliDelay>
		IND_OFF();
 8003b12:	2200      	movs	r2, #0
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	0020      	movs	r0, r4
 8003b18:	f00d fe19 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003b1c:	2064      	movs	r0, #100	; 0x64
 8003b1e:	f009 fff1 	bl	800db04 <StartMilliDelay>
		IND_ON();
 8003b22:	2201      	movs	r2, #1
 8003b24:	2140      	movs	r1, #64	; 0x40
 8003b26:	0020      	movs	r0, r4
 8003b28:	f00d fe11 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003b2c:	2064      	movs	r0, #100	; 0x64
 8003b2e:	f009 ffe9 	bl	800db04 <StartMilliDelay>
		IND_OFF();
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	0020      	movs	r0, r4
 8003b38:	f00d fe09 	bl	801174e <HAL_GPIO_WritePin>
 8003b3c:	e7d1      	b.n	8003ae2 <BOS_Init+0xaa>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000820 	.word	0x20000820
 8003b44:	e000ed00 	.word	0xe000ed00
 8003b48:	05fa0004 	.word	0x05fa0004
 8003b4c:	200007a0 	.word	0x200007a0

08003b50 <Module_Init>:
void Module_Init(void){
 8003b50:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003b52:	f00c fa2b 	bl	800ffac <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003b56:	f006 fdc7 	bl	800a6e8 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003b5a:	f7ff ff6d 	bl	8003a38 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003b5e:	f003 fe81 	bl	8007864 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003b62:	f00a fb42 	bl	800e1ea <osKernelStart>
}
 8003b66:	bd10      	pop	{r4, pc}

08003b68 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003b68:	b530      	push	{r4, r5, lr}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b6e:	2401      	movs	r4, #1
 8003b70:	e015      	b.n	8003b9e <ExploreNeighbors+0x36>
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <ExploreNeighbors+0x48>)
 8003b74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003b76:	0a10      	lsrs	r0, r2, #8
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <ExploreNeighbors+0x4c>)
 8003b7a:	214c      	movs	r1, #76	; 0x4c
 8003b7c:	5458      	strb	r0, [r3, r1]
			messageParams[1] =(uint8_t )myPN;
 8003b7e:	334c      	adds	r3, #76	; 0x4c
 8003b80:	705a      	strb	r2, [r3, #1]
			messageParams[2] =port;
 8003b82:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003b84:	2303      	movs	r3, #3
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	3307      	adds	r3, #7
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	0020      	movs	r0, r4
 8003b90:	f004 fa94 	bl	80080bc <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003b94:	200a      	movs	r0, #10
 8003b96:	f00a fb2d 	bl	800e1f4 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	b2e4      	uxtb	r4, r4
 8003b9e:	2c05      	cmp	r4, #5
 8003ba0:	d802      	bhi.n	8003ba8 <ExploreNeighbors+0x40>
		if(port != ignore){
 8003ba2:	42ac      	cmp	r4, r5
 8003ba4:	d1e5      	bne.n	8003b72 <ExploreNeighbors+0xa>
 8003ba6:	e7f8      	b.n	8003b9a <ExploreNeighbors+0x32>
		}
	}
	
	return result;
}
 8003ba8:	2000      	movs	r0, #0
 8003baa:	b003      	add	sp, #12
 8003bac:	bd30      	pop	{r4, r5, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	20000008 	.word	0x20000008
 8003bb4:	20000820 	.word	0x20000820

08003bb8 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	46de      	mov	lr, fp
 8003bbc:	4657      	mov	r7, sl
 8003bbe:	464e      	mov	r6, r9
 8003bc0:	4645      	mov	r5, r8
 8003bc2:	b5e0      	push	{r5, r6, r7, lr}
 8003bc4:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <FindBroadcastRoutes+0x128>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3307      	adds	r3, #7
 8003bcc:	08db      	lsrs	r3, r3, #3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	466a      	mov	r2, sp
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	469d      	mov	sp, r3
 8003bd6:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e008      	b.n	8003bee <FindBroadcastRoutes+0x36>
		modules[m] =0;
 8003bdc:	2100      	movs	r1, #0
 8003bde:	54f1      	strb	r1, [r6, r3]
		bcastRoutes[m] =0;
 8003be0:	4a40      	ldr	r2, [pc, #256]	; (8003ce4 <FindBroadcastRoutes+0x12c>)
 8003be2:	005c      	lsls	r4, r3, #1
 8003be4:	1912      	adds	r2, r2, r4
 8003be6:	247c      	movs	r4, #124	; 0x7c
 8003be8:	5311      	strh	r1, [r2, r4]
	for(m =0; m < N; m++){
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	4a3c      	ldr	r2, [pc, #240]	; (8003ce0 <FindBroadcastRoutes+0x128>)
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d8f2      	bhi.n	8003bdc <FindBroadcastRoutes+0x24>
	}
	modules[src - 1] =++level;					// Tag the source
 8003bf6:	3801      	subs	r0, #1
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	5433      	strb	r3, [r6, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	e001      	b.n	8003c04 <FindBroadcastRoutes+0x4c>
 8003c00:	3101      	adds	r1, #1
 8003c02:	b2c9      	uxtb	r1, r1
 8003c04:	2906      	cmp	r1, #6
 8003c06:	d81b      	bhi.n	8003c40 <FindBroadcastRoutes+0x88>
		if(array[src - 1][p]){
 8003c08:	4a37      	ldr	r2, [pc, #220]	; (8003ce8 <FindBroadcastRoutes+0x130>)
 8003c0a:	0083      	lsls	r3, r0, #2
 8003c0c:	181b      	adds	r3, r3, r0
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	181b      	adds	r3, r3, r0
 8003c12:	185b      	adds	r3, r3, r1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	5a9b      	ldrh	r3, [r3, r2]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f1      	beq.n	8003c00 <FindBroadcastRoutes+0x48>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c1c:	1e4a      	subs	r2, r1, #1
 8003c1e:	2501      	movs	r5, #1
 8003c20:	4095      	lsls	r5, r2
 8003c22:	4a30      	ldr	r2, [pc, #192]	; (8003ce4 <FindBroadcastRoutes+0x12c>)
 8003c24:	247c      	movs	r4, #124	; 0x7c
 8003c26:	46a4      	mov	ip, r4
 8003c28:	0044      	lsls	r4, r0, #1
 8003c2a:	1912      	adds	r2, r2, r4
 8003c2c:	4664      	mov	r4, ip
 8003c2e:	5b14      	ldrh	r4, [r2, r4]
 8003c30:	432c      	orrs	r4, r5
 8003c32:	4665      	mov	r5, ip
 8003c34:	5354      	strh	r4, [r2, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	54f2      	strb	r2, [r6, r3]
 8003c3e:	e7df      	b.n	8003c00 <FindBroadcastRoutes+0x48>
	++level;												// Move one level
 8003c40:	2302      	movs	r3, #2
 8003c42:	469c      	mov	ip, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 8003c44:	4663      	mov	r3, ip
 8003c46:	3301      	adds	r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	469c      	mov	ip, r3
		untaged =0;								// Reset the untaged counter
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4698      	mov	r8, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c50:	2200      	movs	r2, #0
 8003c52:	e02d      	b.n	8003cb0 <FindBroadcastRoutes+0xf8>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003c54:	3401      	adds	r4, #1
 8003c56:	b2e4      	uxtb	r4, r4
 8003c58:	2c06      	cmp	r4, #6
 8003c5a:	d827      	bhi.n	8003cac <FindBroadcastRoutes+0xf4>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003c5c:	0020      	movs	r0, r4
 8003c5e:	4922      	ldr	r1, [pc, #136]	; (8003ce8 <FindBroadcastRoutes+0x130>)
 8003c60:	00ab      	lsls	r3, r5, #2
 8003c62:	195b      	adds	r3, r3, r5
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	195b      	adds	r3, r3, r5
 8003c68:	191b      	adds	r3, r3, r4
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	5a5b      	ldrh	r3, [r3, r1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <FindBroadcastRoutes+0x9c>
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	469b      	mov	fp, r3
 8003c78:	5cf1      	ldrb	r1, [r6, r3]
 8003c7a:	2900      	cmp	r1, #0
 8003c7c:	d1ea      	bne.n	8003c54 <FindBroadcastRoutes+0x9c>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003c7e:	3801      	subs	r0, #1
 8003c80:	3101      	adds	r1, #1
 8003c82:	4081      	lsls	r1, r0
 8003c84:	000b      	movs	r3, r1
 8003c86:	4917      	ldr	r1, [pc, #92]	; (8003ce4 <FindBroadcastRoutes+0x12c>)
 8003c88:	207c      	movs	r0, #124	; 0x7c
 8003c8a:	4681      	mov	r9, r0
 8003c8c:	0068      	lsls	r0, r5, #1
 8003c8e:	4682      	mov	sl, r0
 8003c90:	4451      	add	r1, sl
 8003c92:	4648      	mov	r0, r9
 8003c94:	5a08      	ldrh	r0, [r1, r0]
 8003c96:	4318      	orrs	r0, r3
 8003c98:	464b      	mov	r3, r9
 8003c9a:	52c8      	strh	r0, [r1, r3]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003c9c:	4663      	mov	r3, ip
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	5473      	strb	r3, [r6, r1]
						++untaged;
 8003ca2:	4643      	mov	r3, r8
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4698      	mov	r8, r3
 8003caa:	e7d3      	b.n	8003c54 <FindBroadcastRoutes+0x9c>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003cac:	3201      	adds	r2, #1
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <FindBroadcastRoutes+0x128>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d907      	bls.n	8003cc8 <FindBroadcastRoutes+0x110>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003cb8:	0015      	movs	r5, r2
 8003cba:	5cb1      	ldrb	r1, [r6, r2]
 8003cbc:	4663      	mov	r3, ip
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4299      	cmp	r1, r3
 8003cc2:	d1f3      	bne.n	8003cac <FindBroadcastRoutes+0xf4>
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003cc4:	2401      	movs	r4, #1
 8003cc6:	e7c7      	b.n	8003c58 <FindBroadcastRoutes+0xa0>
					}
				}
			}
		}
	} while(untaged);
 8003cc8:	4643      	mov	r3, r8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ba      	bne.n	8003c44 <FindBroadcastRoutes+0x8c>
	
	return result;
}
 8003cce:	2000      	movs	r0, #0
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8003cd4:	46bb      	mov	fp, r7
 8003cd6:	46b2      	mov	sl, r6
 8003cd8:	46a9      	mov	r9, r5
 8003cda:	46a0      	mov	r8, r4
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	20000008 	.word	0x20000008
 8003ce4:	20000820 	.word	0x20000820
 8003ce8:	20000c7c 	.word	0x20000c7c

08003cec <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	0004      	movs	r4, r0
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003cf0:	780b      	ldrb	r3, [r1, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <minArr+0x12>
		smallest =arr[0];
 8003cf6:	7805      	ldrb	r5, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e002      	b.n	8003d04 <minArr+0x18>
	uint8_t smallest =0xFF;
 8003cfe:	25ff      	movs	r5, #255	; 0xff
 8003d00:	e7fa      	b.n	8003cf8 <minArr+0xc>
	for(int i =0; i < N; i++){
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a06      	ldr	r2, [pc, #24]	; (8003d20 <minArr+0x34>)
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dd08      	ble.n	8003d1e <minArr+0x32>
		if((arr[i] < smallest) && !Q[i]){
 8003d0c:	5ce2      	ldrb	r2, [r4, r3]
 8003d0e:	42aa      	cmp	r2, r5
 8003d10:	d2f7      	bcs.n	8003d02 <minArr+0x16>
 8003d12:	5cce      	ldrb	r6, [r1, r3]
 8003d14:	2e00      	cmp	r6, #0
 8003d16:	d1f4      	bne.n	8003d02 <minArr+0x16>
			index =i;
 8003d18:	b2d8      	uxtb	r0, r3
			smallest =arr[i];
 8003d1a:	0015      	movs	r5, r2
 8003d1c:	e7f1      	b.n	8003d02 <minArr+0x16>
		}
	}
	
	return index;
}
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	20000008 	.word	0x20000008

08003d24 <QnotEmpty>:

/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
 8003d24:	0001      	movs	r1, r0
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003d26:	2300      	movs	r3, #0
	char temp =1;
 8003d28:	2001      	movs	r0, #1
	for(int i =0; i < N; i++){
 8003d2a:	e002      	b.n	8003d32 <QnotEmpty+0xe>
		temp &=Q[i];
 8003d2c:	5cca      	ldrb	r2, [r1, r3]
 8003d2e:	4010      	ands	r0, r2
	for(int i =0; i < N; i++){
 8003d30:	3301      	adds	r3, #1
 8003d32:	4a02      	ldr	r2, [pc, #8]	; (8003d3c <QnotEmpty+0x18>)
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	dcf8      	bgt.n	8003d2c <QnotEmpty+0x8>
	}
	
	return temp;
}
 8003d3a:	4770      	bx	lr
 8003d3c:	20000008 	.word	0x20000008

08003d40 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	46c6      	mov	lr, r8
 8003d44:	b500      	push	{lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	0005      	movs	r5, r0
 8003d4a:	4688      	mov	r8, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003d4c:	2400      	movs	r4, #0
 8003d4e:	9401      	str	r4, [sp, #4]
 8003d50:	222e      	movs	r2, #46	; 0x2e
 8003d52:	2100      	movs	r1, #0
 8003d54:	a802      	add	r0, sp, #8
 8003d56:	f010 fde6 	bl	8014926 <memset>
	memset(route,0,sizeof(route));
 8003d5a:	4854      	ldr	r0, [pc, #336]	; (8003eac <FindRoute+0x16c>)
 8003d5c:	221a      	movs	r2, #26
 8003d5e:	2100      	movs	r1, #0
 8003d60:	f010 fde1 	bl	8014926 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003d64:	0029      	movs	r1, r5
 8003d66:	3d01      	subs	r5, #1
 8003d68:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <FindRoute+0x170>)
 8003d6a:	195b      	adds	r3, r3, r5
 8003d6c:	2230      	movs	r2, #48	; 0x30
 8003d6e:	549c      	strb	r4, [r3, r2]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003d70:	321c      	adds	r2, #28
 8003d72:	549c      	strb	r4, [r3, r2]
	for(int col =1; col <= 6; col++){
 8003d74:	2001      	movs	r0, #1
 8003d76:	e000      	b.n	8003d7a <FindRoute+0x3a>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	2806      	cmp	r0, #6
 8003d7c:	dc1d      	bgt.n	8003dba <FindRoute+0x7a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003d7e:	4a4d      	ldr	r2, [pc, #308]	; (8003eb4 <FindRoute+0x174>)
 8003d80:	00ab      	lsls	r3, r5, #2
 8003d82:	195b      	adds	r3, r3, r5
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	195b      	adds	r3, r3, r5
 8003d88:	181b      	adds	r3, r3, r0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	5a9b      	ldrh	r3, [r3, r2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f2      	beq.n	8003d78 <FindRoute+0x38>
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	4642      	mov	r2, r8
 8003d96:	b292      	uxth	r2, r2
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d1ed      	bne.n	8003d78 <FindRoute+0x38>
			routeDist[desID - 1] =1;
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <FindRoute+0x170>)
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	2230      	movs	r2, #48	; 0x30
 8003da6:	2101      	movs	r1, #1
 8003da8:	5499      	strb	r1, [r3, r2]
			route[0] =desID;
 8003daa:	4b40      	ldr	r3, [pc, #256]	; (8003eac <FindRoute+0x16c>)
 8003dac:	4642      	mov	r2, r8
 8003dae:	701a      	strb	r2, [r3, #0]
			return col;
 8003db0:	b2c0      	uxtb	r0, r0
}
 8003db2:	b00e      	add	sp, #56	; 0x38
 8003db4:	bc80      	pop	{r7}
 8003db6:	46b8      	mov	r8, r7
 8003db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <FindRoute+0x80>
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <FindRoute+0x178>)
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	db0b      	blt.n	8003de0 <FindRoute+0xa0>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003dc8:	4299      	cmp	r1, r3
 8003dca:	d0f8      	beq.n	8003dbe <FindRoute+0x7e>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003dcc:	1e58      	subs	r0, r3, #1
 8003dce:	4a38      	ldr	r2, [pc, #224]	; (8003eb0 <FindRoute+0x170>)
 8003dd0:	1812      	adds	r2, r2, r0
 8003dd2:	2030      	movs	r0, #48	; 0x30
 8003dd4:	24ff      	movs	r4, #255	; 0xff
 8003dd6:	5414      	strb	r4, [r2, r0]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003dd8:	301c      	adds	r0, #28
 8003dda:	2400      	movs	r4, #0
 8003ddc:	5414      	strb	r4, [r2, r0]
 8003dde:	e7ee      	b.n	8003dbe <FindRoute+0x7e>
	uint8_t u =0;
 8003de0:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 8003de2:	a801      	add	r0, sp, #4
 8003de4:	f7ff ff9e 	bl	8003d24 <QnotEmpty>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d10e      	bne.n	8003e0a <FindRoute+0xca>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003dec:	4830      	ldr	r0, [pc, #192]	; (8003eb0 <FindRoute+0x170>)
 8003dee:	3030      	adds	r0, #48	; 0x30
 8003df0:	a901      	add	r1, sp, #4
 8003df2:	f7ff ff7b 	bl	8003cec <minArr>
 8003df6:	3001      	adds	r0, #1
 8003df8:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003dfa:	4544      	cmp	r4, r8
 8003dfc:	d005      	beq.n	8003e0a <FindRoute+0xca>
			Q[u - 1] =1;									// Remove u from Q
 8003dfe:	1e60      	subs	r0, r4, #1
 8003e00:	ab01      	add	r3, sp, #4
 8003e02:	2201      	movs	r2, #1
 8003e04:	541a      	strb	r2, [r3, r0]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003e06:	2101      	movs	r1, #1
 8003e08:	e003      	b.n	8003e12 <FindRoute+0xd2>
	uint8_t u =0;
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	e02a      	b.n	8003e64 <FindRoute+0x124>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003e0e:	3101      	adds	r1, #1
 8003e10:	b2c9      	uxtb	r1, r1
 8003e12:	2906      	cmp	r1, #6
 8003e14:	d8e5      	bhi.n	8003de2 <FindRoute+0xa2>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003e16:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <FindRoute+0x174>)
 8003e18:	0083      	lsls	r3, r0, #2
 8003e1a:	181b      	adds	r3, r3, r0
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	181b      	adds	r3, r3, r0
 8003e20:	185b      	adds	r3, r3, r1
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	5a9b      	ldrh	r3, [r3, r2]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f1      	beq.n	8003e0e <FindRoute+0xce>
				v =(array[u - 1][n] >> 3);
 8003e2a:	08db      	lsrs	r3, r3, #3
 8003e2c:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	aa01      	add	r2, sp, #4
 8003e32:	5cd2      	ldrb	r2, [r2, r3]
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1ea      	bne.n	8003e0e <FindRoute+0xce>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <FindRoute+0x170>)
 8003e3a:	2630      	movs	r6, #48	; 0x30
 8003e3c:	1817      	adds	r7, r2, r0
 8003e3e:	5dbf      	ldrb	r7, [r7, r6]
 8003e40:	3701      	adds	r7, #1
 8003e42:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e44:	18d2      	adds	r2, r2, r3
 8003e46:	5d92      	ldrb	r2, [r2, r6]
 8003e48:	42ba      	cmp	r2, r7
 8003e4a:	d9e0      	bls.n	8003e0e <FindRoute+0xce>
						routeDist[v - 1] =alt;
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <FindRoute+0x170>)
 8003e4e:	18d3      	adds	r3, r2, r3
 8003e50:	2230      	movs	r2, #48	; 0x30
 8003e52:	549f      	strb	r7, [r3, r2]
						routePrev[v - 1] =u;
 8003e54:	321c      	adds	r2, #28
 8003e56:	549c      	strb	r4, [r3, r2]
 8003e58:	e7d9      	b.n	8003e0e <FindRoute+0xce>
		route[j++] =u;          			// Push the vertex onto the stack
 8003e5a:	1c4b      	adds	r3, r1, #1
 8003e5c:	4a13      	ldr	r2, [pc, #76]	; (8003eac <FindRoute+0x16c>)
 8003e5e:	5454      	strb	r4, [r2, r1]
 8003e60:	b2d9      	uxtb	r1, r3
		u =routePrev[u - 1];           		// Traverse from target to source
 8003e62:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003e64:	1e62      	subs	r2, r4, #1
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <FindRoute+0x170>)
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	224c      	movs	r2, #76	; 0x4c
 8003e6c:	5c98      	ldrb	r0, [r3, r2]
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d1f3      	bne.n	8003e5a <FindRoute+0x11a>
	for(int col =1; col <= 6; col++){
 8003e72:	2101      	movs	r1, #1
 8003e74:	e000      	b.n	8003e78 <FindRoute+0x138>
 8003e76:	3101      	adds	r1, #1
 8003e78:	2906      	cmp	r1, #6
 8003e7a:	dc9a      	bgt.n	8003db2 <FindRoute+0x72>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <FindRoute+0x174>)
 8003e7e:	00ab      	lsls	r3, r5, #2
 8003e80:	195b      	adds	r3, r3, r5
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	195b      	adds	r3, r3, r5
 8003e86:	185b      	adds	r3, r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	5a9b      	ldrh	r3, [r3, r2]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f2      	beq.n	8003e76 <FindRoute+0x136>
 8003e90:	08db      	lsrs	r3, r3, #3
 8003e92:	4642      	mov	r2, r8
 8003e94:	1e54      	subs	r4, r2, #1
 8003e96:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <FindRoute+0x170>)
 8003e98:	1912      	adds	r2, r2, r4
 8003e9a:	2430      	movs	r4, #48	; 0x30
 8003e9c:	5d12      	ldrb	r2, [r2, r4]
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	4c02      	ldr	r4, [pc, #8]	; (8003eac <FindRoute+0x16c>)
 8003ea2:	5ca2      	ldrb	r2, [r4, r2]
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d1e6      	bne.n	8003e76 <FindRoute+0x136>
			return col;
 8003ea8:	b2c8      	uxtb	r0, r1
 8003eaa:	e782      	b.n	8003db2 <FindRoute+0x72>
 8003eac:	20001c60 	.word	0x20001c60
 8003eb0:	200008a0 	.word	0x200008a0
 8003eb4:	20000c7c 	.word	0x20000c7c
 8003eb8:	20000008 	.word	0x20000008

08003ebc <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	46c6      	mov	lr, r8
 8003ec0:	b500      	push	{lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	0006      	movs	r6, r0
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ec6:	4c5b      	ldr	r4, [pc, #364]	; (8004034 <DisplayTopology+0x178>)
 8003ec8:	3468      	adds	r4, #104	; 0x68
 8003eca:	4b5b      	ldr	r3, [pc, #364]	; (8004038 <DisplayTopology+0x17c>)
 8003ecc:	0022      	movs	r2, r4
 8003ece:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ed0:	c223      	stmia	r2!, {r0, r1, r5}
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	889b      	ldrh	r3, [r3, #4]
 8003ed8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003eda:	0020      	movs	r0, r4
 8003edc:	f7fc f91c 	bl	8000118 <strlen>
 8003ee0:	b282      	uxth	r2, r0
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	425b      	negs	r3, r3
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	3333      	adds	r3, #51	; 0x33
 8003eea:	0021      	movs	r1, r4
 8003eec:	0030      	movs	r0, r6
 8003eee:	f009 fff7 	bl	800dee0 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003ef2:	2401      	movs	r4, #1
 8003ef4:	e014      	b.n	8003f20 <DisplayTopology+0x64>
		sprintf(pcUserMessage,"P%d\t",i);
 8003ef6:	4951      	ldr	r1, [pc, #324]	; (800403c <DisplayTopology+0x180>)
 8003ef8:	4d4e      	ldr	r5, [pc, #312]	; (8004034 <DisplayTopology+0x178>)
 8003efa:	3568      	adds	r5, #104	; 0x68
 8003efc:	0022      	movs	r2, r4
 8003efe:	0028      	movs	r0, r5
 8003f00:	f010 fc84 	bl	801480c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f04:	0028      	movs	r0, r5
 8003f06:	f7fc f907 	bl	8000118 <strlen>
 8003f0a:	b282      	uxth	r2, r0
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	425b      	negs	r3, r3
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	3333      	adds	r3, #51	; 0x33
 8003f14:	0029      	movs	r1, r5
 8003f16:	0030      	movs	r0, r6
 8003f18:	f009 ffe2 	bl	800dee0 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f1c:	3401      	adds	r4, #1
 8003f1e:	b2e4      	uxtb	r4, r4
 8003f20:	2c05      	cmp	r4, #5
 8003f22:	d9e8      	bls.n	8003ef6 <DisplayTopology+0x3a>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003f24:	4946      	ldr	r1, [pc, #280]	; (8004040 <DisplayTopology+0x184>)
 8003f26:	2301      	movs	r3, #1
 8003f28:	425b      	negs	r3, r3
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	3333      	adds	r3, #51	; 0x33
 8003f2e:	2203      	movs	r2, #3
 8003f30:	0030      	movs	r0, r6
 8003f32:	f009 ffd5 	bl	800dee0 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003f36:	2700      	movs	r7, #0
 8003f38:	e036      	b.n	8003fa8 <DisplayTopology+0xec>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003f3a:	2307      	movs	r3, #7
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	08d2      	lsrs	r2, r2, #3
 8003f40:	4940      	ldr	r1, [pc, #256]	; (8004044 <DisplayTopology+0x188>)
 8003f42:	483c      	ldr	r0, [pc, #240]	; (8004034 <DisplayTopology+0x178>)
 8003f44:	3068      	adds	r0, #104	; 0x68
 8003f46:	f010 fc61 	bl	801480c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f4a:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <DisplayTopology+0x178>)
 8003f4c:	2268      	movs	r2, #104	; 0x68
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4498      	add	r8, r3
 8003f52:	4640      	mov	r0, r8
 8003f54:	f7fc f8e0 	bl	8000118 <strlen>
 8003f58:	b282      	uxth	r2, r0
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	3333      	adds	r3, #51	; 0x33
 8003f62:	4641      	mov	r1, r8
 8003f64:	0030      	movs	r0, r6
 8003f66:	f009 ffbb 	bl	800dee0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003f6a:	3401      	adds	r4, #1
 8003f6c:	b2e4      	uxtb	r4, r4
 8003f6e:	2c05      	cmp	r4, #5
 8003f70:	d80f      	bhi.n	8003f92 <DisplayTopology+0xd6>
			if(!array[row][col])
 8003f72:	4a35      	ldr	r2, [pc, #212]	; (8004048 <DisplayTopology+0x18c>)
 8003f74:	00ab      	lsls	r3, r5, #2
 8003f76:	195b      	adds	r3, r3, r5
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	195b      	adds	r3, r3, r5
 8003f7c:	191b      	adds	r3, r3, r4
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	5a9a      	ldrh	r2, [r3, r2]
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	d1d9      	bne.n	8003f3a <DisplayTopology+0x7e>
				sprintf(pcUserMessage,"%d\t",0);
 8003f86:	4931      	ldr	r1, [pc, #196]	; (800404c <DisplayTopology+0x190>)
 8003f88:	482a      	ldr	r0, [pc, #168]	; (8004034 <DisplayTopology+0x178>)
 8003f8a:	3068      	adds	r0, #104	; 0x68
 8003f8c:	f010 fc3e 	bl	801480c <sprintf>
 8003f90:	e7db      	b.n	8003f4a <DisplayTopology+0x8e>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003f92:	492f      	ldr	r1, [pc, #188]	; (8004050 <DisplayTopology+0x194>)
 8003f94:	2301      	movs	r3, #1
 8003f96:	425b      	negs	r3, r3
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	3333      	adds	r3, #51	; 0x33
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	0030      	movs	r0, r6
 8003fa0:	f009 ff9e 	bl	800dee0 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003fa4:	3701      	adds	r7, #1
 8003fa6:	b2ff      	uxtb	r7, r7
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <DisplayTopology+0x198>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	42bb      	cmp	r3, r7
 8003fae:	d933      	bls.n	8004018 <DisplayTopology+0x15c>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003fb0:	003d      	movs	r5, r7
 8003fb2:	1c7a      	adds	r2, r7, #1
 8003fb4:	4928      	ldr	r1, [pc, #160]	; (8004058 <DisplayTopology+0x19c>)
 8003fb6:	4c1f      	ldr	r4, [pc, #124]	; (8004034 <DisplayTopology+0x178>)
 8003fb8:	3468      	adds	r4, #104	; 0x68
 8003fba:	0020      	movs	r0, r4
 8003fbc:	f010 fc26 	bl	801480c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fc0:	0020      	movs	r0, r4
 8003fc2:	f7fc f8a9 	bl	8000118 <strlen>
 8003fc6:	b282      	uxth	r2, r0
 8003fc8:	2301      	movs	r3, #1
 8003fca:	425b      	negs	r3, r3
 8003fcc:	4698      	mov	r8, r3
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	3333      	adds	r3, #51	; 0x33
 8003fd2:	0021      	movs	r1, r4
 8003fd4:	0030      	movs	r0, r6
 8003fd6:	f009 ff83 	bl	800dee0 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <DisplayTopology+0x18c>)
 8003fdc:	2216      	movs	r2, #22
 8003fde:	437a      	muls	r2, r7
 8003fe0:	5ad3      	ldrh	r3, [r2, r3]
 8003fe2:	0059      	lsls	r1, r3, #1
 8003fe4:	18c9      	adds	r1, r1, r3
 8003fe6:	0049      	lsls	r1, r1, #1
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <DisplayTopology+0x1a0>)
 8003fea:	18c9      	adds	r1, r1, r3
 8003fec:	2205      	movs	r2, #5
 8003fee:	0020      	movs	r0, r4
 8003ff0:	f010 fccd 	bl	801498e <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003ff4:	4643      	mov	r3, r8
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	3333      	adds	r3, #51	; 0x33
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	0021      	movs	r1, r4
 8003ffe:	0030      	movs	r0, r6
 8004000:	f009 ff6e 	bl	800dee0 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <DisplayTopology+0x1a4>)
 8004006:	4643      	mov	r3, r8
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	3333      	adds	r3, #51	; 0x33
 800400c:	2201      	movs	r2, #1
 800400e:	0030      	movs	r0, r6
 8004010:	f009 ff66 	bl	800dee0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004014:	2401      	movs	r4, #1
 8004016:	e7aa      	b.n	8003f6e <DisplayTopology+0xb2>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004018:	4912      	ldr	r1, [pc, #72]	; (8004064 <DisplayTopology+0x1a8>)
 800401a:	2301      	movs	r3, #1
 800401c:	425b      	negs	r3, r3
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	3333      	adds	r3, #51	; 0x33
 8004022:	2201      	movs	r2, #1
 8004024:	0030      	movs	r0, r6
 8004026:	f009 ff5b 	bl	800dee0 <writePxMutex>
}
 800402a:	b002      	add	sp, #8
 800402c:	bc80      	pop	{r7}
 800402e:	46b8      	mov	r8, r7
 8004030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	200008a0 	.word	0x200008a0
 8004038:	08019d9c 	.word	0x08019d9c
 800403c:	08019db0 	.word	0x08019db0
 8004040:	0801aca0 	.word	0x0801aca0
 8004044:	08019dc8 	.word	0x08019dc8
 8004048:	20000c7c 	.word	0x20000c7c
 800404c:	08019dc4 	.word	0x08019dc4
 8004050:	08019ed4 	.word	0x08019ed4
 8004054:	20000008 	.word	0x20000008
 8004058:	08019db8 	.word	0x08019db8
 800405c:	0801976c 	.word	0x0801976c
 8004060:	08019dac 	.word	0x08019dac
 8004064:	0801b6b4 	.word	0x0801b6b4

08004068 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b083      	sub	sp, #12
 800406c:	0006      	movs	r6, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800406e:	4c2d      	ldr	r4, [pc, #180]	; (8004124 <DisplayPortsDir+0xbc>)
 8004070:	3468      	adds	r4, #104	; 0x68
 8004072:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <DisplayPortsDir+0xc0>)
 8004074:	0022      	movs	r2, r4
 8004076:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004078:	c223      	stmia	r2!, {r0, r1, r5}
 800407a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800407c:	c223      	stmia	r2!, {r0, r1, r5}
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004082:	0020      	movs	r0, r4
 8004084:	f7fc f848 	bl	8000118 <strlen>
 8004088:	b282      	uxth	r2, r0
 800408a:	2301      	movs	r3, #1
 800408c:	425b      	negs	r3, r3
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	3333      	adds	r3, #51	; 0x33
 8004092:	0021      	movs	r1, r4
 8004094:	0030      	movs	r0, r6
 8004096:	f009 ff23 	bl	800dee0 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 800409a:	2501      	movs	r5, #1
 800409c:	e024      	b.n	80040e8 <DisplayPortsDir+0x80>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800409e:	3401      	adds	r4, #1
 80040a0:	b2e4      	uxtb	r4, r4
 80040a2:	2c0a      	cmp	r4, #10
 80040a4:	d81e      	bhi.n	80040e4 <DisplayPortsDir+0x7c>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a6:	1e6b      	subs	r3, r5, #1
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <DisplayPortsDir+0xc4>)
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	5a9a      	ldrh	r2, [r3, r2]
 80040ae:	1e61      	subs	r1, r4, #1
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	410b      	asrs	r3, r1
 80040b6:	4213      	tst	r3, r2
 80040b8:	d0f1      	beq.n	800409e <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 80040ba:	491d      	ldr	r1, [pc, #116]	; (8004130 <DisplayPortsDir+0xc8>)
 80040bc:	4f19      	ldr	r7, [pc, #100]	; (8004124 <DisplayPortsDir+0xbc>)
 80040be:	3768      	adds	r7, #104	; 0x68
 80040c0:	0023      	movs	r3, r4
 80040c2:	002a      	movs	r2, r5
 80040c4:	0038      	movs	r0, r7
 80040c6:	f010 fba1 	bl	801480c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 80040ca:	0038      	movs	r0, r7
 80040cc:	f7fc f824 	bl	8000118 <strlen>
 80040d0:	b282      	uxth	r2, r0
 80040d2:	2301      	movs	r3, #1
 80040d4:	425b      	negs	r3, r3
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	3333      	adds	r3, #51	; 0x33
 80040da:	0039      	movs	r1, r7
 80040dc:	0030      	movs	r0, r6
 80040de:	f009 feff 	bl	800dee0 <writePxMutex>
 80040e2:	e7dc      	b.n	800409e <DisplayPortsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 80040e4:	3501      	adds	r5, #1
 80040e6:	b2ed      	uxtb	r5, r5
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <DisplayPortsDir+0xcc>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	42ab      	cmp	r3, r5
 80040ee:	d301      	bcc.n	80040f4 <DisplayPortsDir+0x8c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80040f0:	2401      	movs	r4, #1
 80040f2:	e7d6      	b.n	80040a2 <DisplayPortsDir+0x3a>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 80040f4:	4c0b      	ldr	r4, [pc, #44]	; (8004124 <DisplayPortsDir+0xbc>)
 80040f6:	3468      	adds	r4, #104	; 0x68
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <DisplayPortsDir+0xd0>)
 80040fa:	0022      	movs	r2, r4
 80040fc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80040fe:	c223      	stmia	r2!, {r0, r1, r5}
 8004100:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004102:	c223      	stmia	r2!, {r0, r1, r5}
 8004104:	cb03      	ldmia	r3!, {r0, r1}
 8004106:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004108:	0020      	movs	r0, r4
 800410a:	f7fc f805 	bl	8000118 <strlen>
 800410e:	b282      	uxth	r2, r0
 8004110:	2301      	movs	r3, #1
 8004112:	425b      	negs	r3, r3
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	3333      	adds	r3, #51	; 0x33
 8004118:	0021      	movs	r1, r4
 800411a:	0030      	movs	r0, r6
 800411c:	f009 fee0 	bl	800dee0 <writePxMutex>
	HAL_MAX_DELAY);
}
 8004120:	b003      	add	sp, #12
 8004122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004124:	200008a0 	.word	0x200008a0
 8004128:	08019dd0 	.word	0x08019dd0
 800412c:	20002870 	.word	0x20002870
 8004130:	08019dec 	.word	0x08019dec
 8004134:	20000008 	.word	0x20000008
 8004138:	08019e00 	.word	0x08019e00

0800413c <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413e:	46c6      	mov	lr, r8
 8004140:	b500      	push	{lr}
 8004142:	b082      	sub	sp, #8
 8004144:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004146:	f00a f973 	bl	800e430 <FreeRTOS_CLIGetOutputBuffer>
 800414a:	0006      	movs	r6, r0
	
	strcpy((char* )pcOutputString,"");
 800414c:	2300      	movs	r3, #0
 800414e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004150:	4b99      	ldr	r3, [pc, #612]	; (80043b8 <DisplayModuleStatus+0x27c>)
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	4999      	ldr	r1, [pc, #612]	; (80043bc <DisplayModuleStatus+0x280>)
 8004156:	4c9a      	ldr	r4, [pc, #616]	; (80043c0 <DisplayModuleStatus+0x284>)
 8004158:	3468      	adds	r4, #104	; 0x68
 800415a:	0020      	movs	r0, r4
 800415c:	f010 fb56 	bl	801480c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004160:	0021      	movs	r1, r4
 8004162:	0030      	movs	r0, r6
 8004164:	f010 fbe7 	bl	8014936 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004168:	4b96      	ldr	r3, [pc, #600]	; (80043c4 <DisplayModuleStatus+0x288>)
 800416a:	2238      	movs	r2, #56	; 0x38
 800416c:	5c9a      	ldrb	r2, [r3, r2]
 800416e:	4996      	ldr	r1, [pc, #600]	; (80043c8 <DisplayModuleStatus+0x28c>)
 8004170:	0020      	movs	r0, r4
 8004172:	f010 fb4b 	bl	801480c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004176:	0021      	movs	r1, r4
 8004178:	0030      	movs	r0, r6
 800417a:	f010 fbdc 	bl	8014936 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 800417e:	4993      	ldr	r1, [pc, #588]	; (80043cc <DisplayModuleStatus+0x290>)
 8004180:	2306      	movs	r3, #6
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	3b04      	subs	r3, #4
 8004186:	2200      	movs	r2, #0
 8004188:	0020      	movs	r0, r4
 800418a:	f010 fb3f 	bl	801480c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 800418e:	0021      	movs	r1, r4
 8004190:	0030      	movs	r0, r6
 8004192:	f010 fbd0 	bl	8014936 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8004196:	4a8e      	ldr	r2, [pc, #568]	; (80043d0 <DisplayModuleStatus+0x294>)
 8004198:	498e      	ldr	r1, [pc, #568]	; (80043d4 <DisplayModuleStatus+0x298>)
 800419a:	0020      	movs	r0, r4
 800419c:	f010 fb36 	bl	801480c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041a0:	0021      	movs	r1, r4
 80041a2:	0030      	movs	r0, r6
 80041a4:	f010 fbc7 	bl	8014936 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80041a8:	4a8b      	ldr	r2, [pc, #556]	; (80043d8 <DisplayModuleStatus+0x29c>)
 80041aa:	498c      	ldr	r1, [pc, #560]	; (80043dc <DisplayModuleStatus+0x2a0>)
 80041ac:	0020      	movs	r0, r4
 80041ae:	f010 fb2d 	bl	801480c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041b2:	0021      	movs	r1, r4
 80041b4:	0030      	movs	r0, r6
 80041b6:	f010 fbbe 	bl	8014936 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80041ba:	4b89      	ldr	r3, [pc, #548]	; (80043e0 <DisplayModuleStatus+0x2a4>)
 80041bc:	0022      	movs	r2, r4
 80041be:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041c0:	c223      	stmia	r2!, {r0, r1, r5}
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	8899      	ldrh	r1, [r3, #4]
 80041c8:	8091      	strh	r1, [r2, #4]
 80041ca:	799b      	ldrb	r3, [r3, #6]
 80041cc:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80041ce:	0021      	movs	r1, r4
 80041d0:	0030      	movs	r0, r6
 80041d2:	f010 fbb0 	bl	8014936 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80041d6:	2401      	movs	r4, #1
 80041d8:	e010      	b.n	80041fc <DisplayModuleStatus+0xc0>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 80041da:	4979      	ldr	r1, [pc, #484]	; (80043c0 <DisplayModuleStatus+0x284>)
 80041dc:	000a      	movs	r2, r1
 80041de:	3268      	adds	r2, #104	; 0x68
 80041e0:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <DisplayModuleStatus+0x2a8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	6688      	str	r0, [r1, #104]	; 0x68
 80041e6:	8899      	ldrh	r1, [r3, #4]
 80041e8:	8091      	strh	r1, [r2, #4]
 80041ea:	799b      	ldrb	r3, [r3, #6]
 80041ec:	7193      	strb	r3, [r2, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 80041ee:	4974      	ldr	r1, [pc, #464]	; (80043c0 <DisplayModuleStatus+0x284>)
 80041f0:	3168      	adds	r1, #104	; 0x68
 80041f2:	0030      	movs	r0, r6
 80041f4:	f010 fb9f 	bl	8014936 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80041f8:	3401      	adds	r4, #1
 80041fa:	b2e4      	uxtb	r4, r4
 80041fc:	2c05      	cmp	r4, #5
 80041fe:	d83f      	bhi.n	8004280 <DisplayModuleStatus+0x144>
		sprintf(pcUserMessage,"P%d: ",i);
 8004200:	4979      	ldr	r1, [pc, #484]	; (80043e8 <DisplayModuleStatus+0x2ac>)
 8004202:	4d6f      	ldr	r5, [pc, #444]	; (80043c0 <DisplayModuleStatus+0x284>)
 8004204:	3568      	adds	r5, #104	; 0x68
 8004206:	0022      	movs	r2, r4
 8004208:	0028      	movs	r0, r5
 800420a:	f010 faff 	bl	801480c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 800420e:	0029      	movs	r1, r5
 8004210:	0030      	movs	r0, r6
 8004212:	f010 fb90 	bl	8014936 <strcat>
		switch(portStatus[i]){
 8004216:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <DisplayModuleStatus+0x288>)
 8004218:	191b      	adds	r3, r3, r4
 800421a:	223c      	movs	r2, #60	; 0x3c
 800421c:	5c9b      	ldrb	r3, [r3, r2]
 800421e:	2b04      	cmp	r3, #4
 8004220:	d8e5      	bhi.n	80041ee <DisplayModuleStatus+0xb2>
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4a71      	ldr	r2, [pc, #452]	; (80043ec <DisplayModuleStatus+0x2b0>)
 8004226:	58d3      	ldr	r3, [r2, r3]
 8004228:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800422a:	4a65      	ldr	r2, [pc, #404]	; (80043c0 <DisplayModuleStatus+0x284>)
 800422c:	3268      	adds	r2, #104	; 0x68
 800422e:	4b70      	ldr	r3, [pc, #448]	; (80043f0 <DisplayModuleStatus+0x2b4>)
 8004230:	cba1      	ldmia	r3!, {r0, r5, r7}
 8004232:	c2a1      	stmia	r2!, {r0, r5, r7}
 8004234:	0011      	movs	r1, r2
 8004236:	cb05      	ldmia	r3!, {r0, r2}
 8004238:	c105      	stmia	r1!, {r0, r2}
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	700b      	strb	r3, [r1, #0]
				break;
 800423e:	e7d6      	b.n	80041ee <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004240:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <DisplayModuleStatus+0x284>)
 8004242:	3368      	adds	r3, #104	; 0x68
 8004244:	4a6b      	ldr	r2, [pc, #428]	; (80043f4 <DisplayModuleStatus+0x2b8>)
 8004246:	caa1      	ldmia	r2!, {r0, r5, r7}
 8004248:	c3a1      	stmia	r3!, {r0, r5, r7}
				break;
 800424a:	e7d0      	b.n	80041ee <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800424c:	495c      	ldr	r1, [pc, #368]	; (80043c0 <DisplayModuleStatus+0x284>)
 800424e:	3168      	adds	r1, #104	; 0x68
 8004250:	4b69      	ldr	r3, [pc, #420]	; (80043f8 <DisplayModuleStatus+0x2bc>)
 8004252:	000a      	movs	r2, r1
 8004254:	cba1      	ldmia	r3!, {r0, r5, r7}
 8004256:	c2a1      	stmia	r2!, {r0, r5, r7}
 8004258:	cb23      	ldmia	r3!, {r0, r1, r5}
 800425a:	c223      	stmia	r2!, {r0, r1, r5}
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	8013      	strh	r3, [r2, #0]
				break;
 8004260:	e7c5      	b.n	80041ee <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004262:	4a57      	ldr	r2, [pc, #348]	; (80043c0 <DisplayModuleStatus+0x284>)
 8004264:	3268      	adds	r2, #104	; 0x68
 8004266:	4b65      	ldr	r3, [pc, #404]	; (80043fc <DisplayModuleStatus+0x2c0>)
 8004268:	cba1      	ldmia	r3!, {r0, r5, r7}
 800426a:	c2a1      	stmia	r2!, {r0, r5, r7}
 800426c:	0011      	movs	r1, r2
 800426e:	cb25      	ldmia	r3!, {r0, r2, r5}
 8004270:	c125      	stmia	r1!, {r0, r2, r5}
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	600a      	str	r2, [r1, #0]
 8004276:	889a      	ldrh	r2, [r3, #4]
 8004278:	808a      	strh	r2, [r1, #4]
 800427a:	799b      	ldrb	r3, [r3, #6]
 800427c:	718b      	strb	r3, [r1, #6]
				break;
 800427e:	e7b6      	b.n	80041ee <DisplayModuleStatus+0xb2>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004280:	494f      	ldr	r1, [pc, #316]	; (80043c0 <DisplayModuleStatus+0x284>)
 8004282:	3168      	adds	r1, #104	; 0x68
 8004284:	4b5e      	ldr	r3, [pc, #376]	; (8004400 <DisplayModuleStatus+0x2c4>)
 8004286:	000a      	movs	r2, r1
 8004288:	cb31      	ldmia	r3!, {r0, r4, r5}
 800428a:	c231      	stmia	r2!, {r0, r4, r5}
 800428c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800428e:	c231      	stmia	r2!, {r0, r4, r5}
	strcat((char* )pcOutputString,pcUserMessage);
 8004290:	0030      	movs	r0, r6
 8004292:	f010 fb50 	bl	8014936 <strcat>
	for(char i =1; i <= 6; i++){
 8004296:	2401      	movs	r4, #1
 8004298:	e01c      	b.n	80042d4 <DisplayModuleStatus+0x198>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800429a:	4b5a      	ldr	r3, [pc, #360]	; (8004404 <DisplayModuleStatus+0x2c8>)
 800429c:	00ea      	lsls	r2, r5, #3
 800429e:	1b52      	subs	r2, r2, r5
 80042a0:	00d2      	lsls	r2, r2, #3
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042a6:	f006 fc1d 	bl	800aae4 <GetPort>
 80042aa:	0007      	movs	r7, r0
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <DisplayModuleStatus+0x2cc>)
 80042ae:	00ad      	lsls	r5, r5, #2
 80042b0:	58e8      	ldr	r0, [r5, r3]
 80042b2:	f006 fc17 	bl	800aae4 <GetPort>
 80042b6:	4955      	ldr	r1, [pc, #340]	; (800440c <DisplayModuleStatus+0x2d0>)
 80042b8:	4d41      	ldr	r5, [pc, #260]	; (80043c0 <DisplayModuleStatus+0x284>)
 80042ba:	3568      	adds	r5, #104	; 0x68
 80042bc:	9000      	str	r0, [sp, #0]
 80042be:	003b      	movs	r3, r7
 80042c0:	0022      	movs	r2, r4
 80042c2:	0028      	movs	r0, r5
 80042c4:	f010 faa2 	bl	801480c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80042c8:	0029      	movs	r1, r5
 80042ca:	0030      	movs	r0, r6
 80042cc:	f010 fb33 	bl	8014936 <strcat>
	for(char i =1; i <= 6; i++){
 80042d0:	3401      	adds	r4, #1
 80042d2:	b2e4      	uxtb	r4, r4
 80042d4:	2c06      	cmp	r4, #6
 80042d6:	d813      	bhi.n	8004300 <DisplayModuleStatus+0x1c4>
		if(streamDMA[i - 1].Instance == 0){
 80042d8:	1e65      	subs	r5, r4, #1
 80042da:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <DisplayModuleStatus+0x2c8>)
 80042dc:	00eb      	lsls	r3, r5, #3
 80042de:	1b5b      	subs	r3, r3, r5
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	589b      	ldr	r3, [r3, r2]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1d8      	bne.n	800429a <DisplayModuleStatus+0x15e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80042e8:	4949      	ldr	r1, [pc, #292]	; (8004410 <DisplayModuleStatus+0x2d4>)
 80042ea:	4d35      	ldr	r5, [pc, #212]	; (80043c0 <DisplayModuleStatus+0x284>)
 80042ec:	3568      	adds	r5, #104	; 0x68
 80042ee:	0022      	movs	r2, r4
 80042f0:	0028      	movs	r0, r5
 80042f2:	f010 fa8b 	bl	801480c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80042f6:	0029      	movs	r1, r5
 80042f8:	0030      	movs	r0, r6
 80042fa:	f010 fb1c 	bl	8014936 <strcat>
 80042fe:	e7e7      	b.n	80042d0 <DisplayModuleStatus+0x194>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004300:	0030      	movs	r0, r6
 8004302:	f7fb ff09 	bl	8000118 <strlen>
 8004306:	1830      	adds	r0, r6, r0
 8004308:	4942      	ldr	r1, [pc, #264]	; (8004414 <DisplayModuleStatus+0x2d8>)
 800430a:	2203      	movs	r2, #3
 800430c:	f010 fc37 	bl	8014b7e <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004310:	0030      	movs	r0, r6
 8004312:	f7fb ff01 	bl	8000118 <strlen>
 8004316:	1830      	adds	r0, r6, r0
 8004318:	493f      	ldr	r1, [pc, #252]	; (8004418 <DisplayModuleStatus+0x2dc>)
 800431a:	221d      	movs	r2, #29
 800431c:	f010 fc2f 	bl	8014b7e <memcpy>
	temp =strlen((char* )pcOutputString);
 8004320:	0030      	movs	r0, r6
 8004322:	f7fb fef9 	bl	8000118 <strlen>
 8004326:	0007      	movs	r7, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004328:	2401      	movs	r4, #1
 800432a:	e001      	b.n	8004330 <DisplayModuleStatus+0x1f4>
 800432c:	3401      	adds	r4, #1
 800432e:	b2e4      	uxtb	r4, r4
 8004330:	2c05      	cmp	r4, #5
 8004332:	d817      	bhi.n	8004364 <DisplayModuleStatus+0x228>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <DisplayModuleStatus+0x27c>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <DisplayModuleStatus+0x2e0>)
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	5a9a      	ldrh	r2, [r3, r2]
 8004340:	1e61      	subs	r1, r4, #1
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	410b      	asrs	r3, r1
 8004348:	4213      	tst	r3, r2
 800434a:	d0ef      	beq.n	800432c <DisplayModuleStatus+0x1f0>
		{
			sprintf(pcUserMessage,"P%d ",p);
 800434c:	4934      	ldr	r1, [pc, #208]	; (8004420 <DisplayModuleStatus+0x2e4>)
 800434e:	4d1c      	ldr	r5, [pc, #112]	; (80043c0 <DisplayModuleStatus+0x284>)
 8004350:	3568      	adds	r5, #104	; 0x68
 8004352:	0022      	movs	r2, r4
 8004354:	0028      	movs	r0, r5
 8004356:	f010 fa59 	bl	801480c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800435a:	0029      	movs	r1, r5
 800435c:	0030      	movs	r0, r6
 800435e:	f010 faea 	bl	8014936 <strcat>
 8004362:	e7e3      	b.n	800432c <DisplayModuleStatus+0x1f0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004364:	0030      	movs	r0, r6
 8004366:	f7fb fed7 	bl	8000118 <strlen>
 800436a:	043d      	lsls	r5, r7, #16
 800436c:	0c2d      	lsrs	r5, r5, #16
 800436e:	42a8      	cmp	r0, r5
 8004370:	d00e      	beq.n	8004390 <DisplayModuleStatus+0x254>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004372:	0030      	movs	r0, r6
 8004374:	f7fb fed0 	bl	8000118 <strlen>
 8004378:	1830      	adds	r0, r6, r0
 800437a:	4926      	ldr	r1, [pc, #152]	; (8004414 <DisplayModuleStatus+0x2d8>)
 800437c:	2203      	movs	r2, #3
 800437e:	f010 fbfe 	bl	8014b7e <memcpy>
	
	/* Display output */
	if(port)
 8004382:	4643      	mov	r3, r8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <DisplayModuleStatus+0x260>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8004388:	b002      	add	sp, #8
 800438a:	bc80      	pop	{r7}
 800438c:	46b8      	mov	r8, r7
 800438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004390:	1830      	adds	r0, r6, r0
 8004392:	4924      	ldr	r1, [pc, #144]	; (8004424 <DisplayModuleStatus+0x2e8>)
 8004394:	2205      	movs	r2, #5
 8004396:	f010 fbf2 	bl	8014b7e <memcpy>
 800439a:	e7ea      	b.n	8004372 <DisplayModuleStatus+0x236>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800439c:	0030      	movs	r0, r6
 800439e:	f7fb febb 	bl	8000118 <strlen>
 80043a2:	b282      	uxth	r2, r0
 80043a4:	2301      	movs	r3, #1
 80043a6:	425b      	negs	r3, r3
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	3333      	adds	r3, #51	; 0x33
 80043ac:	0031      	movs	r1, r6
 80043ae:	4640      	mov	r0, r8
 80043b0:	f009 fd96 	bl	800dee0 <writePxMutex>
}
 80043b4:	e7e8      	b.n	8004388 <DisplayModuleStatus+0x24c>
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	200007a0 	.word	0x200007a0
 80043bc:	08019e20 	.word	0x08019e20
 80043c0:	200008a0 	.word	0x200008a0
 80043c4:	20000920 	.word	0x20000920
 80043c8:	08019e3c 	.word	0x08019e3c
 80043cc:	08019e58 	.word	0x08019e58
 80043d0:	08019e78 	.word	0x08019e78
 80043d4:	08019e84 	.word	0x08019e84
 80043d8:	08019e9c 	.word	0x08019e9c
 80043dc:	08019ea8 	.word	0x08019ea8
 80043e0:	08019ec4 	.word	0x08019ec4
 80043e4:	08019ee0 	.word	0x08019ee0
 80043e8:	08019ed8 	.word	0x08019ed8
 80043ec:	080196c0 	.word	0x080196c0
 80043f0:	08019ee8 	.word	0x08019ee8
 80043f4:	08019f00 	.word	0x08019f00
 80043f8:	08019f0c 	.word	0x08019f0c
 80043fc:	08019f28 	.word	0x08019f28
 8004400:	08019f48 	.word	0x08019f48
 8004404:	20002350 	.word	0x20002350
 8004408:	200016bc 	.word	0x200016bc
 800440c:	08019f7c 	.word	0x08019f7c
 8004410:	08019f60 	.word	0x08019f60
 8004414:	08019ed4 	.word	0x08019ed4
 8004418:	08019fac 	.word	0x08019fac
 800441c:	20002870 	.word	0x20002870
 8004420:	08019fcc 	.word	0x08019fcc
 8004424:	08019fd4 	.word	0x08019fd4

08004428 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	0006      	movs	r6, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 800442c:	492a      	ldr	r1, [pc, #168]	; (80044d8 <GetID+0xb0>)
 800442e:	f7fb fe69 	bl	8000104 <strcmp>
 8004432:	2800      	cmp	r0, #0
 8004434:	d00a      	beq.n	800444c <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 8004436:	4929      	ldr	r1, [pc, #164]	; (80044dc <GetID+0xb4>)
 8004438:	0030      	movs	r0, r6
 800443a:	f7fb fe63 	bl	8000104 <strcmp>
 800443e:	2800      	cmp	r0, #0
 8004440:	d047      	beq.n	80044d2 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004442:	7835      	ldrb	r5, [r6, #0]
 8004444:	2d23      	cmp	r5, #35	; 0x23
 8004446:	d004      	beq.n	8004452 <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004448:	2400      	movs	r4, #0
 800444a:	e018      	b.n	800447e <GetID+0x56>
		return myID;
 800444c:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <GetID+0xb8>)
 800444e:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004450:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 8004452:	1c70      	adds	r0, r6, #1
 8004454:	f00e fe4b 	bl	80130ee <atol>
 8004458:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 800445a:	2800      	cmp	r0, #0
 800445c:	d003      	beq.n	8004466 <GetID+0x3e>
 800445e:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <GetID+0xbc>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	4283      	cmp	r3, r0
 8004464:	d205      	bcs.n	8004472 <GetID+0x4a>
		else if(id == myID)
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <GetID+0xb8>)
 8004468:	781c      	ldrb	r4, [r3, #0]
 800446a:	4284      	cmp	r4, r0
 800446c:	d003      	beq.n	8004476 <GetID+0x4e>
			return BOS_ERR_WrongID;
 800446e:	2066      	movs	r0, #102	; 0x66
 8004470:	e7ee      	b.n	8004450 <GetID+0x28>
			return id;
 8004472:	b200      	sxth	r0, r0
 8004474:	e7ec      	b.n	8004450 <GetID+0x28>
			return myID;
 8004476:	b220      	sxth	r0, r4
 8004478:	e7ea      	b.n	8004450 <GetID+0x28>
		for(i =0; i < N; i++){
 800447a:	3401      	adds	r4, #1
 800447c:	b2e4      	uxtb	r4, r4
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <GetID+0xbc>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	42a3      	cmp	r3, r4
 8004484:	d90d      	bls.n	80044a2 <GetID+0x7a>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004486:	00a1      	lsls	r1, r4, #2
 8004488:	1909      	adds	r1, r1, r4
 800448a:	0049      	lsls	r1, r1, #1
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <GetID+0xc0>)
 800448e:	18c9      	adds	r1, r1, r3
 8004490:	0030      	movs	r0, r6
 8004492:	f7fb fe37 	bl	8000104 <strcmp>
 8004496:	2800      	cmp	r0, #0
 8004498:	d1ef      	bne.n	800447a <GetID+0x52>
 800449a:	2d00      	cmp	r5, #0
 800449c:	d0ed      	beq.n	800447a <GetID+0x52>
				return (i);
 800449e:	b220      	sxth	r0, r4
 80044a0:	e7d6      	b.n	8004450 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 80044a2:	2500      	movs	r5, #0
 80044a4:	2d09      	cmp	r5, #9
 80044a6:	d812      	bhi.n	80044ce <GetID+0xa6>
			if(!strcmp(string,groupAlias[i]))
 80044a8:	490d      	ldr	r1, [pc, #52]	; (80044e0 <GetID+0xb8>)
 80044aa:	3138      	adds	r1, #56	; 0x38
 80044ac:	00ab      	lsls	r3, r5, #2
 80044ae:	195b      	adds	r3, r3, r5
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	18c9      	adds	r1, r1, r3
 80044b4:	0030      	movs	r0, r6
 80044b6:	f7fb fe25 	bl	8000104 <strcmp>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d002      	beq.n	80044c4 <GetID+0x9c>
		for(i =0; i < MaxNumOfGroups; i++){
 80044be:	3501      	adds	r5, #1
 80044c0:	b2ed      	uxtb	r5, r5
 80044c2:	e7ef      	b.n	80044a4 <GetID+0x7c>
				return (BOS_MULTICAST | (i << 8));
 80044c4:	022c      	lsls	r4, r5, #8
 80044c6:	23fe      	movs	r3, #254	; 0xfe
 80044c8:	431c      	orrs	r4, r3
 80044ca:	b220      	sxth	r0, r4
 80044cc:	e7c0      	b.n	8004450 <GetID+0x28>
		return BOS_ERR_WrongName;
 80044ce:	2064      	movs	r0, #100	; 0x64
 80044d0:	e7be      	b.n	8004450 <GetID+0x28>
		return BOS_BROADCAST;
 80044d2:	20ff      	movs	r0, #255	; 0xff
 80044d4:	e7bc      	b.n	8004450 <GetID+0x28>
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	08019fdc 	.word	0x08019fdc
 80044dc:	08019fe0 	.word	0x08019fe0
 80044e0:	200007a0 	.word	0x200007a0
 80044e4:	20000008 	.word	0x20000008
 80044e8:	20000b6c 	.word	0x20000b6c

080044ec <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	0004      	movs	r4, r0
 80044f0:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 80044f2:	2500      	movs	r5, #0
 80044f4:	2d03      	cmp	r5, #3
 80044f6:	dc09      	bgt.n	800450c <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 80044f8:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <NameModule+0xb8>)
 80044fa:	00aa      	lsls	r2, r5, #2
 80044fc:	1899      	adds	r1, r3, r2
 80044fe:	0030      	movs	r0, r6
 8004500:	f7fb fe00 	bl	8000104 <strcmp>
 8004504:	2800      	cmp	r0, #0
 8004506:	d046      	beq.n	8004596 <NameModule+0xaa>
	for(i =0; i < NumOfKeywords; i++){
 8004508:	3501      	adds	r5, #1
 800450a:	e7f3      	b.n	80044f4 <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800450c:	2501      	movs	r5, #1
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <NameModule+0xbc>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	42ab      	cmp	r3, r5
 8004514:	dd0b      	ble.n	800452e <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 8004516:	00a9      	lsls	r1, r5, #2
 8004518:	1949      	adds	r1, r1, r5
 800451a:	0049      	lsls	r1, r1, #1
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <NameModule+0xc0>)
 800451e:	18c9      	adds	r1, r1, r3
 8004520:	0030      	movs	r0, r6
 8004522:	f7fb fdef 	bl	8000104 <strcmp>
 8004526:	2800      	cmp	r0, #0
 8004528:	d037      	beq.n	800459a <NameModule+0xae>
	for(i =1; i < N; i++){
 800452a:	3501      	adds	r5, #1
 800452c:	e7ef      	b.n	800450e <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 800452e:	2500      	movs	r5, #0
 8004530:	e000      	b.n	8004534 <NameModule+0x48>
 8004532:	3501      	adds	r5, #1
 8004534:	2d09      	cmp	r5, #9
 8004536:	dc0c      	bgt.n	8004552 <NameModule+0x66>
		if(!strcmp(alias,groupAlias[i]))
 8004538:	491d      	ldr	r1, [pc, #116]	; (80045b0 <NameModule+0xc4>)
 800453a:	3138      	adds	r1, #56	; 0x38
 800453c:	00ab      	lsls	r3, r5, #2
 800453e:	195b      	adds	r3, r3, r5
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	18c9      	adds	r1, r1, r3
 8004544:	0030      	movs	r0, r6
 8004546:	f7fb fddd 	bl	8000104 <strcmp>
 800454a:	2800      	cmp	r0, #0
 800454c:	d1f1      	bne.n	8004532 <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
 800454e:	2007      	movs	r0, #7
 8004550:	e024      	b.n	800459c <NameModule+0xb0>
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <NameModule+0xc8>)
 8004554:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <NameModule+0xcc>)
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
 8004558:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <NameModule+0xc8>)
 800455a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800455c:	2d00      	cmp	r5, #0
 800455e:	d00f      	beq.n	8004580 <NameModule+0x94>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004564:	0038      	movs	r0, r7
 8004566:	f7fb fdd7 	bl	8000118 <strlen>
 800456a:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800456c:	0039      	movs	r1, r7
 800456e:	0030      	movs	r0, r6
 8004570:	f010 f9fc 	bl	801496c <strncmp>
 8004574:	2800      	cmp	r0, #0
 8004576:	d012      	beq.n	800459e <NameModule+0xb2>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004578:	686a      	ldr	r2, [r5, #4]
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <NameModule+0xc8>)
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
 800457e:	e7eb      	b.n	8004558 <NameModule+0x6c>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8004580:	00a0      	lsls	r0, r4, #2
 8004582:	1900      	adds	r0, r0, r4
 8004584:	0040      	lsls	r0, r0, #1
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <NameModule+0xc0>)
 8004588:	18c0      	adds	r0, r0, r3
 800458a:	0031      	movs	r1, r6
 800458c:	f010 faef 	bl	8014b6e <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004590:	f7ff f8ae 	bl	80036f0 <SaveEEalias>
	
	return result;
 8004594:	e002      	b.n	800459c <NameModule+0xb0>
			return BOS_ERR_Keyword;
 8004596:	2006      	movs	r0, #6
 8004598:	e000      	b.n	800459c <NameModule+0xb0>
			return BOS_ERR_ExistingAlias;
 800459a:	2007      	movs	r0, #7
}
 800459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingCmd;
 800459e:	2008      	movs	r0, #8
 80045a0:	e7fc      	b.n	800459c <NameModule+0xb0>
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	0801971c 	.word	0x0801971c
 80045a8:	20000008 	.word	0x20000008
 80045ac:	20000b6c 	.word	0x20000b6c
 80045b0:	200007a0 	.word	0x200007a0
 80045b4:	20000920 	.word	0x20000920
 80045b8:	200000bc 	.word	0x200000bc

080045bc <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	0004      	movs	r4, r0
 80045c0:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80045c2:	2500      	movs	r5, #0
 80045c4:	2d09      	cmp	r5, #9
 80045c6:	dc16      	bgt.n	80045f6 <AddModuleToGroup+0x3a>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80045c8:	4939      	ldr	r1, [pc, #228]	; (80046b0 <AddModuleToGroup+0xf4>)
 80045ca:	3138      	adds	r1, #56	; 0x38
 80045cc:	00ab      	lsls	r3, r5, #2
 80045ce:	195b      	adds	r3, r3, r5
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	18c9      	adds	r1, r1, r3
 80045d4:	0030      	movs	r0, r6
 80045d6:	f7fb fd95 	bl	8000104 <strcmp>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d001      	beq.n	80045e2 <AddModuleToGroup+0x26>
	for(i =0; i < MaxNumOfGroups; i++){
 80045de:	3501      	adds	r5, #1
 80045e0:	e7f0      	b.n	80045c4 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 80045e2:	3c01      	subs	r4, #1
 80045e4:	2101      	movs	r1, #1
 80045e6:	40a9      	lsls	r1, r5
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <AddModuleToGroup+0xf4>)
 80045ea:	0064      	lsls	r4, r4, #1
 80045ec:	191b      	adds	r3, r3, r4
 80045ee:	889a      	ldrh	r2, [r3, #4]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	809a      	strh	r2, [r3, #4]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80045f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 80045f6:	2500      	movs	r5, #0
 80045f8:	2d03      	cmp	r5, #3
 80045fa:	dc09      	bgt.n	8004610 <AddModuleToGroup+0x54>
		if(!strcmp(group,BOSkeywords[j]))
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <AddModuleToGroup+0xf8>)
 80045fe:	00aa      	lsls	r2, r5, #2
 8004600:	1899      	adds	r1, r3, r2
 8004602:	0030      	movs	r0, r6
 8004604:	f7fb fd7e 	bl	8000104 <strcmp>
 8004608:	2800      	cmp	r0, #0
 800460a:	d04a      	beq.n	80046a2 <AddModuleToGroup+0xe6>
	for(j =0; j < NumOfKeywords; j++){
 800460c:	3501      	adds	r5, #1
 800460e:	e7f3      	b.n	80045f8 <AddModuleToGroup+0x3c>
	for(j =1; j < N; j++){
 8004610:	2501      	movs	r5, #1
 8004612:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <AddModuleToGroup+0xfc>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	42ab      	cmp	r3, r5
 8004618:	dd0b      	ble.n	8004632 <AddModuleToGroup+0x76>
		if(!strcmp(group,moduleAlias[j]))
 800461a:	00a9      	lsls	r1, r5, #2
 800461c:	1949      	adds	r1, r1, r5
 800461e:	0049      	lsls	r1, r1, #1
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <AddModuleToGroup+0x100>)
 8004622:	18c9      	adds	r1, r1, r3
 8004624:	0030      	movs	r0, r6
 8004626:	f7fb fd6d 	bl	8000104 <strcmp>
 800462a:	2800      	cmp	r0, #0
 800462c:	d03b      	beq.n	80046a6 <AddModuleToGroup+0xea>
	for(j =1; j < N; j++){
 800462e:	3501      	adds	r5, #1
 8004630:	e7ef      	b.n	8004612 <AddModuleToGroup+0x56>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004632:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <AddModuleToGroup+0x104>)
 8004634:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <AddModuleToGroup+0x108>)
 8004636:	649a      	str	r2, [r3, #72]	; 0x48
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <AddModuleToGroup+0x104>)
 800463a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800463c:	2d00      	cmp	r5, #0
 800463e:	d023      	beq.n	8004688 <AddModuleToGroup+0xcc>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004644:	0038      	movs	r0, r7
 8004646:	f7fb fd67 	bl	8000118 <strlen>
 800464a:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800464c:	0039      	movs	r1, r7
 800464e:	0030      	movs	r0, r6
 8004650:	f010 f98c 	bl	801496c <strncmp>
 8004654:	2800      	cmp	r0, #0
 8004656:	d028      	beq.n	80046aa <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004658:	686a      	ldr	r2, [r5, #4]
 800465a:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <AddModuleToGroup+0x104>)
 800465c:	649a      	str	r2, [r3, #72]	; 0x48
 800465e:	e7eb      	b.n	8004638 <AddModuleToGroup+0x7c>
			strcpy(groupAlias[i],group);
 8004660:	4813      	ldr	r0, [pc, #76]	; (80046b0 <AddModuleToGroup+0xf4>)
 8004662:	3038      	adds	r0, #56	; 0x38
 8004664:	00ab      	lsls	r3, r5, #2
 8004666:	195b      	adds	r3, r3, r5
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	18c0      	adds	r0, r0, r3
 800466c:	0031      	movs	r1, r6
 800466e:	f010 fa7e 	bl	8014b6e <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 8004672:	3c01      	subs	r4, #1
 8004674:	2101      	movs	r1, #1
 8004676:	40a9      	lsls	r1, r5
 8004678:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <AddModuleToGroup+0xf4>)
 800467a:	0064      	lsls	r4, r4, #1
 800467c:	191b      	adds	r3, r3, r4
 800467e:	889a      	ldrh	r2, [r3, #4]
 8004680:	430a      	orrs	r2, r1
 8004682:	809a      	strh	r2, [r3, #4]
	return result;
 8004684:	2000      	movs	r0, #0
 8004686:	e7b5      	b.n	80045f4 <AddModuleToGroup+0x38>
	for(i =0; i < MaxNumOfGroups; i++){
 8004688:	2d09      	cmp	r5, #9
 800468a:	dcf2      	bgt.n	8004672 <AddModuleToGroup+0xb6>
		if(!groupAlias[i][0]){
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <AddModuleToGroup+0xf4>)
 800468e:	00aa      	lsls	r2, r5, #2
 8004690:	1952      	adds	r2, r2, r5
 8004692:	0052      	lsls	r2, r2, #1
 8004694:	189b      	adds	r3, r3, r2
 8004696:	2238      	movs	r2, #56	; 0x38
 8004698:	5c9b      	ldrb	r3, [r3, r2]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0e0      	beq.n	8004660 <AddModuleToGroup+0xa4>
	for(i =0; i < MaxNumOfGroups; i++){
 800469e:	3501      	adds	r5, #1
 80046a0:	e7f2      	b.n	8004688 <AddModuleToGroup+0xcc>
			return BOS_ERR_Keyword;
 80046a2:	2006      	movs	r0, #6
 80046a4:	e7a6      	b.n	80045f4 <AddModuleToGroup+0x38>
			return BOS_ERR_ExistingAlias;
 80046a6:	2007      	movs	r0, #7
 80046a8:	e7a4      	b.n	80045f4 <AddModuleToGroup+0x38>
			return BOS_ERR_ExistingCmd;
 80046aa:	2008      	movs	r0, #8
 80046ac:	e7a2      	b.n	80045f4 <AddModuleToGroup+0x38>
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	200007a0 	.word	0x200007a0
 80046b4:	0801971c 	.word	0x0801971c
 80046b8:	20000008 	.word	0x20000008
 80046bc:	20000b6c 	.word	0x20000b6c
 80046c0:	20000920 	.word	0x20000920
 80046c4:	200000bc 	.word	0x200000bc

080046c8 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80046c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ca:	46d6      	mov	lr, sl
 80046cc:	464f      	mov	r7, r9
 80046ce:	4646      	mov	r6, r8
 80046d0:	b5c0      	push	{r6, r7, lr}
 80046d2:	4682      	mov	sl, r0
 80046d4:	000f      	movs	r7, r1
 80046d6:	a908      	add	r1, sp, #32
 80046d8:	c920      	ldmia	r1!, {r5}
 80046da:	7809      	ldrb	r1, [r1, #0]
 80046dc:	4689      	mov	r9, r1
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 80046de:	499d      	ldr	r1, [pc, #628]	; (8004954 <WriteToRemote+0x28c>)
 80046e0:	2624      	movs	r6, #36	; 0x24
 80046e2:	5d8e      	ldrb	r6, [r1, r6]
	if(timeout)
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	d01b      	beq.n	8004720 <WriteToRemote+0x58>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 80046e8:	2024      	movs	r0, #36	; 0x24
 80046ea:	4684      	mov	ip, r0
 80046ec:	3804      	subs	r0, #4
 80046ee:	4680      	mov	r8, r0
 80046f0:	4660      	mov	r0, ip
 80046f2:	4644      	mov	r4, r8
 80046f4:	540c      	strb	r4, [r1, r0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
 80046f6:	4649      	mov	r1, r9
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d01a      	beq.n	8004732 <WriteToRemote+0x6a>
		code = CODE_WRITE_REMOTE_FORCE;
 80046fc:	2122      	movs	r1, #34	; 0x22
 80046fe:	4689      	mov	r9, r1
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004700:	2480      	movs	r4, #128	; 0x80
 8004702:	0524      	lsls	r4, r4, #20
 8004704:	42a2      	cmp	r2, r4
 8004706:	d300      	bcc.n	800470a <WriteToRemote+0x42>
 8004708:	e08e      	b.n	8004828 <WriteToRemote+0x160>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 800470a:	4992      	ldr	r1, [pc, #584]	; (8004954 <WriteToRemote+0x28c>)
 800470c:	244c      	movs	r4, #76	; 0x4c
 800470e:	550a      	strb	r2, [r1, r4]
		messageParams[1] =format;						// Send local format
 8004710:	314c      	adds	r1, #76	; 0x4c
 8004712:	704b      	strb	r3, [r1, #1]
		/* Send variable value based on local format */
		switch(format){
 8004714:	2b08      	cmp	r3, #8
 8004716:	d818      	bhi.n	800474a <WriteToRemote+0x82>
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a8f      	ldr	r2, [pc, #572]	; (8004958 <WriteToRemote+0x290>)
 800471c:	58d3      	ldr	r3, [r2, r3]
 800471e:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 8004720:	498c      	ldr	r1, [pc, #560]	; (8004954 <WriteToRemote+0x28c>)
 8004722:	2024      	movs	r0, #36	; 0x24
 8004724:	4684      	mov	ip, r0
 8004726:	2000      	movs	r0, #0
 8004728:	4680      	mov	r8, r0
 800472a:	4660      	mov	r0, ip
 800472c:	4644      	mov	r4, r8
 800472e:	540c      	strb	r4, [r1, r0]
 8004730:	e7e1      	b.n	80046f6 <WriteToRemote+0x2e>
		code = CODE_WRITE_REMOTE;
 8004732:	2120      	movs	r1, #32
 8004734:	4689      	mov	r9, r1
 8004736:	e7e3      	b.n	8004700 <WriteToRemote+0x38>
			case FMT_BOOL:
			case FMT_UINT8:
				messageParams[2] =*(__IO uint8_t* )localAddress;
 8004738:	783a      	ldrb	r2, [r7, #0]
 800473a:	4b86      	ldr	r3, [pc, #536]	; (8004954 <WriteToRemote+0x28c>)
 800473c:	334c      	adds	r3, #76	; 0x4c
 800473e:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004740:	2203      	movs	r2, #3
 8004742:	2120      	movs	r1, #32
 8004744:	4650      	mov	r0, sl
 8004746:	f003 ff0d 	bl	8008564 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <WriteToRemote+0x28c>)
 800474c:	2224      	movs	r2, #36	; 0x24
 800474e:	549e      	strb	r6, [r3, r2]
	
	/* If confirmation is requested, wait for it until timeout */
	if(timeout){
 8004750:	2d00      	cmp	r5, #0
 8004752:	d000      	beq.n	8004756 <WriteToRemote+0x8e>
 8004754:	e0ed      	b.n	8004932 <WriteToRemote+0x26a>
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004756:	2000      	movs	r0, #0
}
 8004758:	bce0      	pop	{r5, r6, r7}
 800475a:	46ba      	mov	sl, r7
 800475c:	46b1      	mov	r9, r6
 800475e:	46a8      	mov	r8, r5
 8004760:	bdf0      	pop	{r4, r5, r6, r7, pc}
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004762:	783a      	ldrb	r2, [r7, #0]
 8004764:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <WriteToRemote+0x28c>)
 8004766:	334c      	adds	r3, #76	; 0x4c
 8004768:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 800476a:	2203      	movs	r2, #3
 800476c:	2120      	movs	r1, #32
 800476e:	4650      	mov	r0, sl
 8004770:	f003 fef8 	bl	8008564 <SendMessageToModule>
				break;
 8004774:	e7e9      	b.n	800474a <WriteToRemote+0x82>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004776:	883a      	ldrh	r2, [r7, #0]
 8004778:	4b76      	ldr	r3, [pc, #472]	; (8004954 <WriteToRemote+0x28c>)
 800477a:	334c      	adds	r3, #76	; 0x4c
 800477c:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 800477e:	883a      	ldrh	r2, [r7, #0]
 8004780:	0a12      	lsrs	r2, r2, #8
 8004782:	70da      	strb	r2, [r3, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004784:	2204      	movs	r2, #4
 8004786:	2120      	movs	r1, #32
 8004788:	4650      	mov	r0, sl
 800478a:	f003 feeb 	bl	8008564 <SendMessageToModule>
				break;
 800478e:	e7dc      	b.n	800474a <WriteToRemote+0x82>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004790:	883b      	ldrh	r3, [r7, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	; (8004954 <WriteToRemote+0x28c>)
 8004794:	324c      	adds	r2, #76	; 0x4c
 8004796:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004798:	883b      	ldrh	r3, [r7, #0]
 800479a:	b21b      	sxth	r3, r3
 800479c:	121b      	asrs	r3, r3, #8
 800479e:	70d3      	strb	r3, [r2, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80047a0:	2204      	movs	r2, #4
 80047a2:	2120      	movs	r1, #32
 80047a4:	4650      	mov	r0, sl
 80047a6:	f003 fedd 	bl	8008564 <SendMessageToModule>
				break;
 80047aa:	e7ce      	b.n	800474a <WriteToRemote+0x82>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	4b69      	ldr	r3, [pc, #420]	; (8004954 <WriteToRemote+0x28c>)
 80047b0:	334c      	adds	r3, #76	; 0x4c
 80047b2:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	0a12      	lsrs	r2, r2, #8
 80047b8:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	0c12      	lsrs	r2, r2, #16
 80047be:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	0e12      	lsrs	r2, r2, #24
 80047c4:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80047c6:	2206      	movs	r2, #6
 80047c8:	2120      	movs	r1, #32
 80047ca:	4650      	mov	r0, sl
 80047cc:	f003 feca 	bl	8008564 <SendMessageToModule>
				break;
 80047d0:	e7bb      	b.n	800474a <WriteToRemote+0x82>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4b5f      	ldr	r3, [pc, #380]	; (8004954 <WriteToRemote+0x28c>)
 80047d6:	334c      	adds	r3, #76	; 0x4c
 80047d8:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	1212      	asrs	r2, r2, #8
 80047de:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	1412      	asrs	r2, r2, #16
 80047e4:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	0e12      	lsrs	r2, r2, #24
 80047ea:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80047ec:	2206      	movs	r2, #6
 80047ee:	2120      	movs	r1, #32
 80047f0:	4650      	mov	r0, sl
 80047f2:	f003 feb7 	bl	8008564 <SendMessageToModule>
				break;
 80047f6:	e7a8      	b.n	800474a <WriteToRemote+0x82>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 80047f8:	783a      	ldrb	r2, [r7, #0]
 80047fa:	4b56      	ldr	r3, [pc, #344]	; (8004954 <WriteToRemote+0x28c>)
 80047fc:	334c      	adds	r3, #76	; 0x4c
 80047fe:	709a      	strb	r2, [r3, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004800:	787a      	ldrb	r2, [r7, #1]
 8004802:	70da      	strb	r2, [r3, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004804:	78ba      	ldrb	r2, [r7, #2]
 8004806:	711a      	strb	r2, [r3, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	715a      	strb	r2, [r3, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 800480c:	793a      	ldrb	r2, [r7, #4]
 800480e:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004810:	797a      	ldrb	r2, [r7, #5]
 8004812:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004814:	79ba      	ldrb	r2, [r7, #6]
 8004816:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004818:	79fa      	ldrb	r2, [r7, #7]
 800481a:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800481c:	220a      	movs	r2, #10
 800481e:	2120      	movs	r1, #32
 8004820:	4650      	mov	r0, sl
 8004822:	f003 fe9f 	bl	8008564 <SendMessageToModule>
				break;
 8004826:	e790      	b.n	800474a <WriteToRemote+0x82>
		messageParams[0] =0;
 8004828:	4c4a      	ldr	r4, [pc, #296]	; (8004954 <WriteToRemote+0x28c>)
 800482a:	204c      	movs	r0, #76	; 0x4c
 800482c:	4684      	mov	ip, r0
 800482e:	2000      	movs	r0, #0
 8004830:	4680      	mov	r8, r0
 8004832:	4660      	mov	r0, ip
 8004834:	4641      	mov	r1, r8
 8004836:	5421      	strb	r1, [r4, r0]
		messageParams[1] =format;							// Local format
 8004838:	344c      	adds	r4, #76	; 0x4c
 800483a:	7063      	strb	r3, [r4, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 800483c:	0e11      	lsrs	r1, r2, #24
 800483e:	70a1      	strb	r1, [r4, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004840:	0c11      	lsrs	r1, r2, #16
 8004842:	70e1      	strb	r1, [r4, #3]
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 8004844:	0a11      	lsrs	r1, r2, #8
 8004846:	7121      	strb	r1, [r4, #4]
		messageParams[5] =(uint8_t )remoteAddress;
 8004848:	7162      	strb	r2, [r4, #5]
		switch(format){
 800484a:	2b08      	cmp	r3, #8
 800484c:	d900      	bls.n	8004850 <WriteToRemote+0x188>
 800484e:	e77c      	b.n	800474a <WriteToRemote+0x82>
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4a42      	ldr	r2, [pc, #264]	; (800495c <WriteToRemote+0x294>)
 8004854:	58d3      	ldr	r3, [r2, r3]
 8004856:	469f      	mov	pc, r3
				messageParams[6] =*(__IO uint8_t* )localAddress;
 8004858:	783a      	ldrb	r2, [r7, #0]
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <WriteToRemote+0x28c>)
 800485c:	334c      	adds	r3, #76	; 0x4c
 800485e:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 8004860:	2207      	movs	r2, #7
 8004862:	4649      	mov	r1, r9
 8004864:	4650      	mov	r0, sl
 8004866:	f003 fe7d 	bl	8008564 <SendMessageToModule>
				break;
 800486a:	e76e      	b.n	800474a <WriteToRemote+0x82>
				messageParams[6] =*(__IO int8_t* )localAddress;
 800486c:	783a      	ldrb	r2, [r7, #0]
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <WriteToRemote+0x28c>)
 8004870:	334c      	adds	r3, #76	; 0x4c
 8004872:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 8004874:	2207      	movs	r2, #7
 8004876:	4649      	mov	r1, r9
 8004878:	4650      	mov	r0, sl
 800487a:	f003 fe73 	bl	8008564 <SendMessageToModule>
				break;
 800487e:	e764      	b.n	800474a <WriteToRemote+0x82>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004880:	883a      	ldrh	r2, [r7, #0]
 8004882:	4b34      	ldr	r3, [pc, #208]	; (8004954 <WriteToRemote+0x28c>)
 8004884:	334c      	adds	r3, #76	; 0x4c
 8004886:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004888:	883a      	ldrh	r2, [r7, #0]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	71da      	strb	r2, [r3, #7]
				SendMessageToModule(module,code,8);
 800488e:	2208      	movs	r2, #8
 8004890:	4649      	mov	r1, r9
 8004892:	4650      	mov	r0, sl
 8004894:	f003 fe66 	bl	8008564 <SendMessageToModule>
				break;
 8004898:	e757      	b.n	800474a <WriteToRemote+0x82>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 800489a:	883b      	ldrh	r3, [r7, #0]
 800489c:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <WriteToRemote+0x28c>)
 800489e:	324c      	adds	r2, #76	; 0x4c
 80048a0:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048a2:	883b      	ldrh	r3, [r7, #0]
 80048a4:	b21b      	sxth	r3, r3
 80048a6:	121b      	asrs	r3, r3, #8
 80048a8:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 80048aa:	2208      	movs	r2, #8
 80048ac:	4649      	mov	r1, r9
 80048ae:	4650      	mov	r0, sl
 80048b0:	f003 fe58 	bl	8008564 <SendMessageToModule>
				break;
 80048b4:	e749      	b.n	800474a <WriteToRemote+0x82>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <WriteToRemote+0x28c>)
 80048ba:	334c      	adds	r3, #76	; 0x4c
 80048bc:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	0c12      	lsrs	r2, r2, #16
 80048c8:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	0e12      	lsrs	r2, r2, #24
 80048ce:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 80048d0:	220a      	movs	r2, #10
 80048d2:	4649      	mov	r1, r9
 80048d4:	4650      	mov	r0, sl
 80048d6:	f003 fe45 	bl	8008564 <SendMessageToModule>
				break;
 80048da:	e736      	b.n	800474a <WriteToRemote+0x82>
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <WriteToRemote+0x28c>)
 80048e0:	334c      	adds	r3, #76	; 0x4c
 80048e2:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	1212      	asrs	r2, r2, #8
 80048e8:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	1412      	asrs	r2, r2, #16
 80048ee:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	0e12      	lsrs	r2, r2, #24
 80048f4:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 80048f6:	220a      	movs	r2, #10
 80048f8:	4649      	mov	r1, r9
 80048fa:	4650      	mov	r0, sl
 80048fc:	f003 fe32 	bl	8008564 <SendMessageToModule>
				break;
 8004900:	e723      	b.n	800474a <WriteToRemote+0x82>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004902:	783a      	ldrb	r2, [r7, #0]
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <WriteToRemote+0x28c>)
 8004906:	334c      	adds	r3, #76	; 0x4c
 8004908:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800490a:	787a      	ldrb	r2, [r7, #1]
 800490c:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 800490e:	78ba      	ldrb	r2, [r7, #2]
 8004910:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	725a      	strb	r2, [r3, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004916:	793a      	ldrb	r2, [r7, #4]
 8004918:	729a      	strb	r2, [r3, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800491a:	797a      	ldrb	r2, [r7, #5]
 800491c:	72da      	strb	r2, [r3, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800491e:	79ba      	ldrb	r2, [r7, #6]
 8004920:	731a      	strb	r2, [r3, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004922:	79fa      	ldrb	r2, [r7, #7]
 8004924:	735a      	strb	r2, [r3, #13]
				SendMessageToModule(module,code,14);
 8004926:	220e      	movs	r2, #14
 8004928:	4649      	mov	r1, r9
 800492a:	4650      	mov	r0, sl
 800492c:	f003 fe1a 	bl	8008564 <SendMessageToModule>
				break;
 8004930:	e70b      	b.n	800474a <WriteToRemote+0x82>
		uint32_t t0 =HAL_GetTick();
 8004932:	f00b fb53 	bl	800ffdc <HAL_GetTick>
 8004936:	0004      	movs	r4, r0
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <WriteToRemote+0x298>)
 800493a:	224c      	movs	r2, #76	; 0x4c
 800493c:	5c9b      	ldrb	r3, [r3, r2]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <WriteToRemote+0x284>
 8004942:	f00b fb4b 	bl	800ffdc <HAL_GetTick>
 8004946:	1b00      	subs	r0, r0, r4
 8004948:	42a8      	cmp	r0, r5
 800494a:	d3f5      	bcc.n	8004938 <WriteToRemote+0x270>
		return responseStatus;
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <WriteToRemote+0x298>)
 800494e:	224c      	movs	r2, #76	; 0x4c
 8004950:	5c98      	ldrb	r0, [r3, r2]
 8004952:	e701      	b.n	8004758 <WriteToRemote+0x90>
 8004954:	20000820 	.word	0x20000820
 8004958:	080196d4 	.word	0x080196d4
 800495c:	080196f8 	.word	0x080196f8
 8004960:	20000920 	.word	0x20000920

08004964 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004964:	b530      	push	{r4, r5, lr}
 8004966:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004968:	201e      	movs	r0, #30
 800496a:	f00e fbc7 	bl	80130fc <malloc>
 800496e:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004970:	221e      	movs	r2, #30
 8004972:	2100      	movs	r1, #0
 8004974:	f00f ffd7 	bl	8014926 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004978:	480a      	ldr	r0, [pc, #40]	; (80049a4 <GetDateString+0x40>)
 800497a:	0001      	movs	r1, r0
 800497c:	312c      	adds	r1, #44	; 0x2c
 800497e:	7d0a      	ldrb	r2, [r1, #20]
 8004980:	3a01      	subs	r2, #1
 8004982:	7d8b      	ldrb	r3, [r1, #22]
 8004984:	7d4d      	ldrb	r5, [r1, #21]
 8004986:	2144      	movs	r1, #68	; 0x44
 8004988:	5a40      	ldrh	r0, [r0, r1]
 800498a:	4907      	ldr	r1, [pc, #28]	; (80049a8 <GetDateString+0x44>)
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	188a      	adds	r2, r1, r2
 8004990:	6912      	ldr	r2, [r2, #16]
 8004992:	312c      	adds	r1, #44	; 0x2c
 8004994:	9001      	str	r0, [sp, #4]
 8004996:	9500      	str	r5, [sp, #0]
 8004998:	0020      	movs	r0, r4
 800499a:	f00f ff37 	bl	801480c <sprintf>
	return buffer;
}
 800499e:	0020      	movs	r0, r4
 80049a0:	b003      	add	sp, #12
 80049a2:	bd30      	pop	{r4, r5, pc}
 80049a4:	20000820 	.word	0x20000820
 80049a8:	0801971c 	.word	0x0801971c

080049ac <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 80049ac:	b500      	push	{lr}
 80049ae:	b085      	sub	sp, #20
 80049b0:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <Bridge+0x24>)
 80049b4:	7819      	ldrb	r1, [r3, #0]
 80049b6:	2301      	movs	r3, #1
 80049b8:	9303      	str	r3, [sp, #12]
 80049ba:	3b02      	subs	r3, #2
 80049bc:	9302      	str	r3, [sp, #8]
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	3303      	adds	r3, #3
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	000b      	movs	r3, r1
 80049c6:	f003 fdf3 	bl	80085b0 <StartScastDMAStream>
}
 80049ca:	b005      	add	sp, #20
 80049cc:	bd00      	pop	{pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	200007a0 	.word	0x200007a0

080049d4 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80049d4:	b530      	push	{r4, r5, lr}
 80049d6:	b087      	sub	sp, #28
 80049d8:	0005      	movs	r5, r0
 80049da:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049dc:	2300      	movs	r3, #0
 80049de:	9304      	str	r3, [sp, #16]
 80049e0:	9303      	str	r3, [sp, #12]
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2100      	movs	r1, #0
 80049ec:	2000      	movs	r0, #0
 80049ee:	f7fe feaf 	bl	8003750 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049f2:	1e69      	subs	r1, r5, #1
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <Unbridge+0x7c>)
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	1a5b      	subs	r3, r3, r1
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	5899      	ldr	r1, [r3, r2]
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d006      	beq.n	8004a10 <Unbridge+0x3c>
 8004a02:	1e60      	subs	r0, r4, #1
 8004a04:	00c3      	lsls	r3, r0, #3
 8004a06:	1a1b      	subs	r3, r3, r0
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	589b      	ldr	r3, [r3, r2]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10f      	bne.n	8004a30 <Unbridge+0x5c>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d115      	bne.n	8004a40 <Unbridge+0x6c>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 8004a14:	1e61      	subs	r1, r4, #1
 8004a16:	4a0e      	ldr	r2, [pc, #56]	; (8004a50 <Unbridge+0x7c>)
 8004a18:	00cb      	lsls	r3, r1, #3
 8004a1a:	1a5b      	subs	r3, r3, r1
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	589b      	ldr	r3, [r3, r2]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d012      	beq.n	8004a4a <Unbridge+0x76>
		SwitchStreamDMAToMsg(port2);
 8004a24:	0020      	movs	r0, r4
 8004a26:	f006 fec3 	bl	800b7b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004a2a:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004a2c:	b007      	add	sp, #28
 8004a2e:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004a30:	0028      	movs	r0, r5
 8004a32:	f006 febd 	bl	800b7b0 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004a36:	0020      	movs	r0, r4
 8004a38:	f006 feba 	bl	800b7b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e7f5      	b.n	8004a2c <Unbridge+0x58>
		SwitchStreamDMAToMsg(port1);
 8004a40:	0028      	movs	r0, r5
 8004a42:	f006 feb5 	bl	800b7b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004a46:	2000      	movs	r0, #0
 8004a48:	e7f0      	b.n	8004a2c <Unbridge+0x58>
		return BOS_ERR_WrongValue;
 8004a4a:	2068      	movs	r0, #104	; 0x68
 8004a4c:	e7ee      	b.n	8004a2c <Unbridge+0x58>
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	20002350 	.word	0x20002350

08004a54 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004a54:	b530      	push	{r4, r5, lr}
	for(int i =0; string[i]; i++){
 8004a56:	2200      	movs	r2, #0
 8004a58:	e001      	b.n	8004a5e <StringToLowerCase+0xa>
		string[i] =tolower(string[i]);
 8004a5a:	7023      	strb	r3, [r4, #0]
	for(int i =0; string[i]; i++){
 8004a5c:	3201      	adds	r2, #1
 8004a5e:	1884      	adds	r4, r0, r2
 8004a60:	5c83      	ldrb	r3, [r0, r2]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <StringToLowerCase+0x22>
		string[i] =tolower(string[i]);
 8004a66:	4904      	ldr	r1, [pc, #16]	; (8004a78 <StringToLowerCase+0x24>)
 8004a68:	5ccd      	ldrb	r5, [r1, r3]
 8004a6a:	2103      	movs	r1, #3
 8004a6c:	4029      	ands	r1, r5
 8004a6e:	2901      	cmp	r1, #1
 8004a70:	d1f3      	bne.n	8004a5a <StringToLowerCase+0x6>
 8004a72:	3320      	adds	r3, #32
 8004a74:	e7f1      	b.n	8004a5a <StringToLowerCase+0x6>
	}
}
 8004a76:	bd30      	pop	{r4, r5, pc}
 8004a78:	0801c629 	.word	0x0801c629

08004a7c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	46ce      	mov	lr, r9
 8004a80:	4647      	mov	r7, r8
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b089      	sub	sp, #36	; 0x24
 8004a86:	0004      	movs	r4, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004a88:	4bd9      	ldr	r3, [pc, #868]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004a8a:	781d      	ldrb	r5, [r3, #0]
 8004a8c:	2d05      	cmp	r5, #5
 8004a8e:	d100      	bne.n	8004a92 <ParseSnippetCondition+0x16>
 8004a90:	e209      	b.n	8004ea6 <ParseSnippetCondition+0x42a>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004a92:	00aa      	lsls	r2, r5, #2
 8004a94:	1951      	adds	r1, r2, r5
 8004a96:	0089      	lsls	r1, r1, #2
 8004a98:	1859      	adds	r1, r3, r1
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	7108      	strb	r0, [r1, #4]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004a9e:	7148      	strb	r0, [r1, #5]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004aa0:	1d18      	adds	r0, r3, #4
 8004aa2:	1952      	adds	r2, r2, r5
 8004aa4:	0092      	lsls	r2, r2, #2
 8004aa6:	1880      	adds	r0, r0, r2
 8004aa8:	3002      	adds	r0, #2
 8004aaa:	2204      	movs	r2, #4
 8004aac:	2100      	movs	r1, #0
 8004aae:	f00f ff3a 	bl	8014926 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004ab2:	7823      	ldrb	r3, [r4, #0]
 8004ab4:	2b62      	cmp	r3, #98	; 0x62
 8004ab6:	d102      	bne.n	8004abe <ParseSnippetCondition+0x42>
 8004ab8:	78a3      	ldrb	r3, [r4, #2]
 8004aba:	2b2e      	cmp	r3, #46	; 0x2e
 8004abc:	d053      	beq.n	8004b66 <ParseSnippetCondition+0xea>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004abe:	4dcc      	ldr	r5, [pc, #816]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004ac0:	3568      	adds	r5, #104	; 0x68
 8004ac2:	0021      	movs	r1, r4
 8004ac4:	0028      	movs	r0, r5
 8004ac6:	f010 f852 	bl	8014b6e <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004aca:	4eca      	ldr	r6, [pc, #808]	; (8004df4 <ParseSnippetCondition+0x378>)
 8004acc:	0031      	movs	r1, r6
 8004ace:	0028      	movs	r0, r5
 8004ad0:	f00f ff72 	bl	80149b8 <strtok>
 8004ad4:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 8004ad6:	0031      	movs	r1, r6
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f00f ff6d 	bl	80149b8 <strtok>
 8004ade:	0005      	movs	r5, r0
		thirdPart =strtok( NULL," ");
 8004ae0:	0031      	movs	r1, r6
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f00f ff68 	bl	80149b8 <strtok>
 8004ae8:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	d100      	bne.n	8004af0 <ParseSnippetCondition+0x74>
 8004aee:	e1de      	b.n	8004eae <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004af0:	0020      	movs	r0, r4
 8004af2:	f7fe ff41 	bl	8003978 <IsModuleParameter>
 8004af6:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004af8:	d002      	beq.n	8004b00 <ParseSnippetCondition+0x84>
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	d100      	bne.n	8004b00 <ParseSnippetCondition+0x84>
 8004afe:	e1a8      	b.n	8004e52 <ParseSnippetCondition+0x3d6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b00:	2d00      	cmp	r5, #0
 8004b02:	d100      	bne.n	8004b06 <ParseSnippetCondition+0x8a>
 8004b04:	e1d5      	b.n	8004eb2 <ParseSnippetCondition+0x436>
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d100      	bne.n	8004b0c <ParseSnippetCondition+0x90>
 8004b0a:	e1d4      	b.n	8004eb6 <ParseSnippetCondition+0x43a>
				modPar2 =IsModuleParameter(thirdPart);
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	f7fe ff33 	bl	8003978 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d100      	bne.n	8004b18 <ParseSnippetCondition+0x9c>
 8004b16:	e1ab      	b.n	8004e70 <ParseSnippetCondition+0x3f4>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b18:	49b5      	ldr	r1, [pc, #724]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004b1a:	780e      	ldrb	r6, [r1, #0]
 8004b1c:	00b3      	lsls	r3, r6, #2
 8004b1e:	199a      	adds	r2, r3, r6
 8004b20:	0092      	lsls	r2, r2, #2
 8004b22:	188a      	adds	r2, r1, r2
 8004b24:	2704      	movs	r7, #4
 8004b26:	7117      	strb	r7, [r2, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b28:	71d4      	strb	r4, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b2a:	72d0      	strb	r0, [r2, #11]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b2c:	4cb0      	ldr	r4, [pc, #704]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004b2e:	7826      	ldrb	r6, [r4, #0]
 8004b30:	0028      	movs	r0, r5
 8004b32:	f7fe ff3b 	bl	80039ac <IsMathOperator>
 8004b36:	00b3      	lsls	r3, r6, #2
 8004b38:	199b      	adds	r3, r3, r6
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	18e3      	adds	r3, r4, r3
 8004b3e:	7158      	strb	r0, [r3, #5]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b40:	7822      	ldrb	r2, [r4, #0]
 8004b42:	0093      	lsls	r3, r2, #2
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	18e4      	adds	r4, r4, r3
 8004b4a:	7963      	ldrb	r3, [r4, #5]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d100      	bne.n	8004b52 <ParseSnippetCondition+0xd6>
 8004b50:	e1b3      	b.n	8004eba <ParseSnippetCondition+0x43e>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004b52:	4ba7      	ldr	r3, [pc, #668]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004b54:	3201      	adds	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004b58:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004b5a:	0030      	movs	r0, r6
 8004b5c:	b009      	add	sp, #36	; 0x24
 8004b5e:	bcc0      	pop	{r6, r7}
 8004b60:	46b9      	mov	r9, r7
 8004b62:	46b0      	mov	r8, r6
 8004b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004b66:	7867      	ldrb	r7, [r4, #1]
 8004b68:	3f30      	subs	r7, #48	; 0x30
 8004b6a:	b2ff      	uxtb	r7, r7
 8004b6c:	2f05      	cmp	r7, #5
 8004b6e:	d900      	bls.n	8004b72 <ParseSnippetCondition+0xf6>
 8004b70:	e19b      	b.n	8004eaa <ParseSnippetCondition+0x42e>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004b72:	4b9f      	ldr	r3, [pc, #636]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004b74:	00aa      	lsls	r2, r5, #2
 8004b76:	1952      	adds	r2, r2, r5
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	711a      	strb	r2, [r3, #4]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004b80:	2200      	movs	r2, #0
 8004b82:	715a      	strb	r2, [r3, #5]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004b84:	719f      	strb	r7, [r3, #6]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004b86:	1ce6      	adds	r6, r4, #3
 8004b88:	499b      	ldr	r1, [pc, #620]	; (8004df8 <ParseSnippetCondition+0x37c>)
 8004b8a:	3207      	adds	r2, #7
 8004b8c:	0030      	movs	r0, r6
 8004b8e:	f00f feed 	bl	801496c <strncmp>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d124      	bne.n	8004be0 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004b96:	4b96      	ldr	r3, [pc, #600]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004b98:	00aa      	lsls	r2, r5, #2
 8004b9a:	1952      	adds	r2, r2, r5
 8004b9c:	0092      	lsls	r2, r2, #2
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	2205      	movs	r2, #5
 8004ba2:	71da      	strb	r2, [r3, #7]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004ba4:	4b95      	ldr	r3, [pc, #596]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004ba6:	00fa      	lsls	r2, r7, #3
 8004ba8:	19d2      	adds	r2, r2, r7
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	7a1b      	ldrb	r3, [r3, #8]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	0016      	movs	r6, r2
 8004bb2:	401e      	ands	r6, r3
 8004bb4:	421a      	tst	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <ParseSnippetCondition+0x148>
				status =BOS_OK;
 8004bb8:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004bba:	4a8d      	ldr	r2, [pc, #564]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004bbc:	7813      	ldrb	r3, [r2, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	7013      	strb	r3, [r2, #0]
 8004bc2:	e7ca      	b.n	8004b5a <ParseSnippetCondition+0xde>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9305      	str	r3, [sp, #20]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	9303      	str	r3, [sp, #12]
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	0038      	movs	r0, r7
 8004bda:	f007 fcdb 	bl	800c594 <SetButtonEvents>
 8004bde:	e7ec      	b.n	8004bba <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004be0:	4987      	ldr	r1, [pc, #540]	; (8004e00 <ParseSnippetCondition+0x384>)
 8004be2:	220e      	movs	r2, #14
 8004be4:	0030      	movs	r0, r6
 8004be6:	f00f fec1 	bl	801496c <strncmp>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d120      	bne.n	8004c30 <ParseSnippetCondition+0x1b4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004bee:	4b80      	ldr	r3, [pc, #512]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004bf0:	00aa      	lsls	r2, r5, #2
 8004bf2:	1952      	adds	r2, r2, r5
 8004bf4:	0092      	lsls	r2, r2, #2
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	2206      	movs	r2, #6
 8004bfa:	71da      	strb	r2, [r3, #7]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004bfc:	4b7f      	ldr	r3, [pc, #508]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004bfe:	00fa      	lsls	r2, r7, #3
 8004c00:	19d2      	adds	r2, r2, r7
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	7a1b      	ldrb	r3, [r3, #8]
 8004c06:	2202      	movs	r2, #2
 8004c08:	0016      	movs	r6, r2
 8004c0a:	401e      	ands	r6, r3
 8004c0c:	421a      	tst	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <ParseSnippetCondition+0x198>
				status =BOS_OK;
 8004c10:	2600      	movs	r6, #0
 8004c12:	e7d2      	b.n	8004bba <ParseSnippetCondition+0x13e>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c14:	2301      	movs	r3, #1
 8004c16:	9305      	str	r3, [sp, #20]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9304      	str	r3, [sp, #16]
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	3a01      	subs	r2, #1
 8004c26:	2100      	movs	r1, #0
 8004c28:	0038      	movs	r0, r7
 8004c2a:	f007 fcb3 	bl	800c594 <SetButtonEvents>
 8004c2e:	e7c4      	b.n	8004bba <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004c30:	4974      	ldr	r1, [pc, #464]	; (8004e04 <ParseSnippetCondition+0x388>)
 8004c32:	220c      	movs	r2, #12
 8004c34:	0030      	movs	r0, r6
 8004c36:	f00f fe99 	bl	801496c <strncmp>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d178      	bne.n	8004d30 <ParseSnippetCondition+0x2b4>
				if(!button[port].pressedX1Sec){
 8004c3e:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004c40:	00fa      	lsls	r2, r7, #3
 8004c42:	19d2      	adds	r2, r2, r7
 8004c44:	189b      	adds	r3, r3, r2
 8004c46:	789e      	ldrb	r6, [r3, #2]
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	d00f      	beq.n	8004c6c <ParseSnippetCondition+0x1f0>
				else if(!button[port].pressedX2Sec){
 8004c4c:	4b6b      	ldr	r3, [pc, #428]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004c4e:	00fa      	lsls	r2, r7, #3
 8004c50:	19d2      	adds	r2, r2, r7
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	78de      	ldrb	r6, [r3, #3]
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d028      	beq.n	8004cac <ParseSnippetCondition+0x230>
				else if(!button[port].pressedX3Sec){
 8004c5a:	4b68      	ldr	r3, [pc, #416]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004c5c:	00fa      	lsls	r2, r7, #3
 8004c5e:	19d2      	adds	r2, r2, r7
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	791e      	ldrb	r6, [r3, #4]
 8004c64:	2e00      	cmp	r6, #0
 8004c66:	d042      	beq.n	8004cee <ParseSnippetCondition+0x272>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004c68:	260c      	movs	r6, #12
 8004c6a:	e7a6      	b.n	8004bba <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004c6c:	4a60      	ldr	r2, [pc, #384]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004c6e:	00ab      	lsls	r3, r5, #2
 8004c70:	195b      	adds	r3, r3, r5
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	0015      	movs	r5, r2
 8004c76:	18d3      	adds	r3, r2, r3
 8004c78:	2209      	movs	r2, #9
 8004c7a:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c7c:	0020      	movs	r0, r4
 8004c7e:	300f      	adds	r0, #15
 8004c80:	f00e fa2f 	bl	80130e2 <atoi>
 8004c84:	7829      	ldrb	r1, [r5, #0]
 8004c86:	b2c3      	uxtb	r3, r0
 8004c88:	008a      	lsls	r2, r1, #2
 8004c8a:	1852      	adds	r2, r2, r1
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	18ad      	adds	r5, r5, r2
 8004c90:	722b      	strb	r3, [r5, #8]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c92:	2201      	movs	r2, #1
 8004c94:	9205      	str	r2, [sp, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	9204      	str	r2, [sp, #16]
 8004c9a:	9203      	str	r2, [sp, #12]
 8004c9c:	9202      	str	r2, [sp, #8]
 8004c9e:	9201      	str	r2, [sp, #4]
 8004ca0:	9200      	str	r2, [sp, #0]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	0038      	movs	r0, r7
 8004ca6:	f007 fc75 	bl	800c594 <SetButtonEvents>
					status =BOS_OK;
 8004caa:	e786      	b.n	8004bba <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004cac:	4a50      	ldr	r2, [pc, #320]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004cae:	00ab      	lsls	r3, r5, #2
 8004cb0:	195b      	adds	r3, r3, r5
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	0015      	movs	r5, r2
 8004cb6:	18d3      	adds	r3, r2, r3
 8004cb8:	220a      	movs	r2, #10
 8004cba:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004cbc:	0020      	movs	r0, r4
 8004cbe:	300f      	adds	r0, #15
 8004cc0:	f00e fa0f 	bl	80130e2 <atoi>
 8004cc4:	782a      	ldrb	r2, [r5, #0]
 8004cc6:	b2c0      	uxtb	r0, r0
 8004cc8:	0093      	lsls	r3, r2, #2
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	18ed      	adds	r5, r5, r3
 8004cd0:	7228      	strb	r0, [r5, #8]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	9305      	str	r3, [sp, #20]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9304      	str	r3, [sp, #16]
 8004cda:	9303      	str	r3, [sp, #12]
 8004cdc:	9302      	str	r3, [sp, #8]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	9000      	str	r0, [sp, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	0038      	movs	r0, r7
 8004ce8:	f007 fc54 	bl	800c594 <SetButtonEvents>
					status =BOS_OK;
 8004cec:	e765      	b.n	8004bba <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004cee:	4a40      	ldr	r2, [pc, #256]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004cf0:	00ab      	lsls	r3, r5, #2
 8004cf2:	195b      	adds	r3, r3, r5
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	0015      	movs	r5, r2
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	220b      	movs	r2, #11
 8004cfc:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004cfe:	0020      	movs	r0, r4
 8004d00:	300f      	adds	r0, #15
 8004d02:	f00e f9ee 	bl	80130e2 <atoi>
 8004d06:	782a      	ldrb	r2, [r5, #0]
 8004d08:	b2c0      	uxtb	r0, r0
 8004d0a:	0093      	lsls	r3, r2, #2
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	18ed      	adds	r5, r5, r3
 8004d12:	7228      	strb	r0, [r5, #8]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d14:	2301      	movs	r3, #1
 8004d16:	9305      	str	r3, [sp, #20]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	9001      	str	r0, [sp, #4]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	0038      	movs	r0, r7
 8004d2a:	f007 fc33 	bl	800c594 <SetButtonEvents>
					status =BOS_OK;
 8004d2e:	e744      	b.n	8004bba <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d30:	4935      	ldr	r1, [pc, #212]	; (8004e08 <ParseSnippetCondition+0x38c>)
 8004d32:	220d      	movs	r2, #13
 8004d34:	0030      	movs	r0, r6
 8004d36:	f00f fe19 	bl	801496c <strncmp>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d000      	beq.n	8004d40 <ParseSnippetCondition+0x2c4>
 8004d3e:	e086      	b.n	8004e4e <ParseSnippetCondition+0x3d2>
				if(!button[port].releasedY1Sec){
 8004d40:	4b2e      	ldr	r3, [pc, #184]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004d42:	00fa      	lsls	r2, r7, #3
 8004d44:	19d2      	adds	r2, r2, r7
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	795e      	ldrb	r6, [r3, #5]
 8004d4a:	2e00      	cmp	r6, #0
 8004d4c:	d00f      	beq.n	8004d6e <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004d4e:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004d50:	00fa      	lsls	r2, r7, #3
 8004d52:	19d2      	adds	r2, r2, r7
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	799e      	ldrb	r6, [r3, #6]
 8004d58:	2e00      	cmp	r6, #0
 8004d5a:	d029      	beq.n	8004db0 <ParseSnippetCondition+0x334>
				else if(!button[port].releasedY3Sec){
 8004d5c:	4b27      	ldr	r3, [pc, #156]	; (8004dfc <ParseSnippetCondition+0x380>)
 8004d5e:	00fa      	lsls	r2, r7, #3
 8004d60:	19d2      	adds	r2, r2, r7
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	79de      	ldrb	r6, [r3, #7]
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	d050      	beq.n	8004e0c <ParseSnippetCondition+0x390>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d6a:	260d      	movs	r6, #13
 8004d6c:	e725      	b.n	8004bba <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004d6e:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004d70:	00ab      	lsls	r3, r5, #2
 8004d72:	195b      	adds	r3, r3, r5
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	0015      	movs	r5, r2
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	220c      	movs	r2, #12
 8004d7c:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d7e:	0020      	movs	r0, r4
 8004d80:	3010      	adds	r0, #16
 8004d82:	f00e f9ae 	bl	80130e2 <atoi>
 8004d86:	782a      	ldrb	r2, [r5, #0]
 8004d88:	b2c0      	uxtb	r0, r0
 8004d8a:	0093      	lsls	r3, r2, #2
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	18ed      	adds	r5, r5, r3
 8004d92:	7228      	strb	r0, [r5, #8]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004d94:	2301      	movs	r3, #1
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9304      	str	r3, [sp, #16]
 8004d9c:	9303      	str	r3, [sp, #12]
 8004d9e:	9002      	str	r0, [sp, #8]
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2100      	movs	r1, #0
 8004da8:	0038      	movs	r0, r7
 8004daa:	f007 fbf3 	bl	800c594 <SetButtonEvents>
					status =BOS_OK;
 8004dae:	e704      	b.n	8004bba <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004db0:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <ParseSnippetCondition+0x374>)
 8004db2:	2314      	movs	r3, #20
 8004db4:	4698      	mov	r8, r3
 8004db6:	436b      	muls	r3, r5
 8004db8:	0015      	movs	r5, r2
 8004dba:	18d3      	adds	r3, r2, r3
 8004dbc:	220d      	movs	r2, #13
 8004dbe:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004dc0:	0020      	movs	r0, r4
 8004dc2:	3010      	adds	r0, #16
 8004dc4:	f00e f98d 	bl	80130e2 <atoi>
 8004dc8:	782b      	ldrb	r3, [r5, #0]
 8004dca:	b2c0      	uxtb	r0, r0
 8004dcc:	4642      	mov	r2, r8
 8004dce:	4353      	muls	r3, r2
 8004dd0:	18ed      	adds	r5, r5, r3
 8004dd2:	7228      	strb	r0, [r5, #8]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	9104      	str	r1, [sp, #16]
 8004ddc:	9003      	str	r0, [sp, #12]
 8004dde:	9102      	str	r1, [sp, #8]
 8004de0:	9101      	str	r1, [sp, #4]
 8004de2:	9100      	str	r1, [sp, #0]
 8004de4:	000b      	movs	r3, r1
 8004de6:	000a      	movs	r2, r1
 8004de8:	0038      	movs	r0, r7
 8004dea:	f007 fbd3 	bl	800c594 <SetButtonEvents>
					status =BOS_OK;
 8004dee:	e6e4      	b.n	8004bba <ParseSnippetCondition+0x13e>
 8004df0:	200014a4 	.word	0x200014a4
 8004df4:	08019edc 	.word	0x08019edc
 8004df8:	0801acd4 	.word	0x0801acd4
 8004dfc:	2000269c 	.word	0x2000269c
 8004e00:	0801a4a4 	.word	0x0801a4a4
 8004e04:	0801a4b4 	.word	0x0801a4b4
 8004e08:	0801a4c4 	.word	0x0801a4c4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004e0c:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <ParseSnippetCondition+0x444>)
 8004e0e:	2214      	movs	r2, #20
 8004e10:	4691      	mov	r9, r2
 8004e12:	4355      	muls	r5, r2
 8004e14:	4698      	mov	r8, r3
 8004e16:	4445      	add	r5, r8
 8004e18:	230e      	movs	r3, #14
 8004e1a:	71eb      	strb	r3, [r5, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e1c:	0020      	movs	r0, r4
 8004e1e:	3010      	adds	r0, #16
 8004e20:	f00e f95f 	bl	80130e2 <atoi>
 8004e24:	4643      	mov	r3, r8
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b2c0      	uxtb	r0, r0
 8004e2a:	464a      	mov	r2, r9
 8004e2c:	4353      	muls	r3, r2
 8004e2e:	4443      	add	r3, r8
 8004e30:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004e32:	2301      	movs	r3, #1
 8004e34:	9305      	str	r3, [sp, #20]
 8004e36:	9004      	str	r0, [sp, #16]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	9103      	str	r1, [sp, #12]
 8004e3c:	9102      	str	r1, [sp, #8]
 8004e3e:	9101      	str	r1, [sp, #4]
 8004e40:	9100      	str	r1, [sp, #0]
 8004e42:	000b      	movs	r3, r1
 8004e44:	000a      	movs	r2, r1
 8004e46:	0038      	movs	r0, r7
 8004e48:	f007 fba4 	bl	800c594 <SetButtonEvents>
					status =BOS_OK;
 8004e4c:	e6b5      	b.n	8004bba <ParseSnippetCondition+0x13e>
	BOS_Status status =BOS_OK;
 8004e4e:	2600      	movs	r6, #0
 8004e50:	e6b3      	b.n	8004bba <ParseSnippetCondition+0x13e>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	d000      	beq.n	8004e58 <ParseSnippetCondition+0x3dc>
 8004e56:	e653      	b.n	8004b00 <ParseSnippetCondition+0x84>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004e58:	4819      	ldr	r0, [pc, #100]	; (8004ec0 <ParseSnippetCondition+0x444>)
 8004e5a:	7802      	ldrb	r2, [r0, #0]
 8004e5c:	0093      	lsls	r3, r2, #2
 8004e5e:	1899      	adds	r1, r3, r2
 8004e60:	0089      	lsls	r1, r1, #2
 8004e62:	1841      	adds	r1, r0, r1
 8004e64:	3502      	adds	r5, #2
 8004e66:	710d      	strb	r5, [r1, #4]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004e68:	71cc      	strb	r4, [r1, #7]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004e6a:	3201      	adds	r2, #1
 8004e6c:	7002      	strb	r2, [r0, #0]
				return BOS_OK;
 8004e6e:	e674      	b.n	8004b5a <ParseSnippetCondition+0xde>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004e70:	4f13      	ldr	r7, [pc, #76]	; (8004ec0 <ParseSnippetCondition+0x444>)
 8004e72:	7839      	ldrb	r1, [r7, #0]
 8004e74:	008b      	lsls	r3, r1, #2
 8004e76:	185a      	adds	r2, r3, r1
 8004e78:	0092      	lsls	r2, r2, #2
 8004e7a:	18ba      	adds	r2, r7, r2
 8004e7c:	2003      	movs	r0, #3
 8004e7e:	7110      	strb	r0, [r2, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004e80:	71d4      	strb	r4, [r2, #7]
					float constant =atof(thirdPart);
 8004e82:	0030      	movs	r0, r6
 8004e84:	f00e f928 	bl	80130d8 <atof>
 8004e88:	f7fd ff92 	bl	8002db0 <__aeabi_d2f>
 8004e8c:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004e8e:	1d38      	adds	r0, r7, #4
 8004e90:	783a      	ldrb	r2, [r7, #0]
 8004e92:	0093      	lsls	r3, r2, #2
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	18c0      	adds	r0, r0, r3
 8004e9a:	3006      	adds	r0, #6
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	a907      	add	r1, sp, #28
 8004ea0:	f00f fe6d 	bl	8014b7e <memcpy>
 8004ea4:	e642      	b.n	8004b2c <ParseSnippetCondition+0xb0>
		return BOS_ERR_SNIP_MEM_FULL;
 8004ea6:	260e      	movs	r6, #14
 8004ea8:	e657      	b.n	8004b5a <ParseSnippetCondition+0xde>
	BOS_Status status =BOS_OK;
 8004eaa:	2600      	movs	r6, #0
 8004eac:	e655      	b.n	8004b5a <ParseSnippetCondition+0xde>
			return BOS_ERR_WrongParam;
 8004eae:	2667      	movs	r6, #103	; 0x67
 8004eb0:	e653      	b.n	8004b5a <ParseSnippetCondition+0xde>
				return BOS_ERR_WrongParam;
 8004eb2:	2667      	movs	r6, #103	; 0x67
 8004eb4:	e651      	b.n	8004b5a <ParseSnippetCondition+0xde>
 8004eb6:	2667      	movs	r6, #103	; 0x67
 8004eb8:	e64f      	b.n	8004b5a <ParseSnippetCondition+0xde>
					return BOS_ERR_WrongParam;
 8004eba:	2667      	movs	r6, #103	; 0x67
 8004ebc:	e64d      	b.n	8004b5a <ParseSnippetCondition+0xde>
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	200014a4 	.word	0x200014a4

08004ec4 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	000c      	movs	r4, r1
	switch(code){
 8004ec8:	2802      	cmp	r0, #2
 8004eca:	d016      	beq.n	8004efa <AddSnippet+0x36>
 8004ecc:	2803      	cmp	r0, #3
 8004ece:	d003      	beq.n	8004ed8 <AddSnippet+0x14>
 8004ed0:	2801      	cmp	r0, #1
 8004ed2:	d00e      	beq.n	8004ef2 <AddSnippet+0x2e>
 8004ed4:	2000      	movs	r0, #0
}
 8004ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets - 1].state = true;
 8004ed8:	4a35      	ldr	r2, [pc, #212]	; (8004fb0 <AddSnippet+0xec>)
 8004eda:	7811      	ldrb	r1, [r2, #0]
 8004edc:	3901      	subs	r1, #1
 8004ede:	008b      	lsls	r3, r1, #2
 8004ee0:	185b      	adds	r3, r3, r1
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	18d2      	adds	r2, r2, r3
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	7513      	strb	r3, [r2, #20]
			SaveToRO();
 8004eea:	f005 fc55 	bl	800a798 <SaveToRO>
	return BOS_OK;
 8004eee:	2000      	movs	r0, #0
			break;
 8004ef0:	e7f1      	b.n	8004ed6 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004ef2:	0008      	movs	r0, r1
 8004ef4:	f7ff fdc2 	bl	8004a7c <ParseSnippetCondition>
 8004ef8:	e7ed      	b.n	8004ed6 <AddSnippet+0x12>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004efa:	4a2d      	ldr	r2, [pc, #180]	; (8004fb0 <AddSnippet+0xec>)
 8004efc:	7815      	ldrb	r5, [r2, #0]
 8004efe:	3d01      	subs	r5, #1
 8004f00:	00ab      	lsls	r3, r5, #2
 8004f02:	195b      	adds	r3, r3, r5
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	18d2      	adds	r2, r2, r3
 8004f08:	6917      	ldr	r7, [r2, #16]
 8004f0a:	2f00      	cmp	r7, #0
 8004f0c:	d033      	beq.n	8004f76 <AddSnippet+0xb2>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004f0e:	0038      	movs	r0, r7
 8004f10:	f7fb f902 	bl	8000118 <strlen>
 8004f14:	0006      	movs	r6, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004f16:	0020      	movs	r0, r4
 8004f18:	f7fb f8fe 	bl	8000118 <strlen>
 8004f1c:	1831      	adds	r1, r6, r0
 8004f1e:	3102      	adds	r1, #2
 8004f20:	0038      	movs	r0, r7
 8004f22:	f00e fb3d 	bl	80135a0 <realloc>
 8004f26:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <AddSnippet+0xec>)
 8004f28:	00ab      	lsls	r3, r5, #2
 8004f2a:	195b      	adds	r3, r3, r5
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	0015      	movs	r5, r2
 8004f30:	18d3      	adds	r3, r2, r3
 8004f32:	6118      	str	r0, [r3, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	3a01      	subs	r2, #1
 8004f38:	0093      	lsls	r3, r2, #2
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	18eb      	adds	r3, r5, r3
 8004f40:	6918      	ldr	r0, [r3, #16]
 8004f42:	1c73      	adds	r3, r6, #1
 8004f44:	18c0      	adds	r0, r0, r3
 8004f46:	0021      	movs	r1, r4
 8004f48:	f00f fe11 	bl	8014b6e <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004f4c:	782a      	ldrb	r2, [r5, #0]
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	0093      	lsls	r3, r2, #2
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	18ed      	adds	r5, r5, r3
 8004f58:	692b      	ldr	r3, [r5, #16]
 8004f5a:	2213      	movs	r2, #19
 8004f5c:	559a      	strb	r2, [r3, r6]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004f5e:	4914      	ldr	r1, [pc, #80]	; (8004fb0 <AddSnippet+0xec>)
 8004f60:	780a      	ldrb	r2, [r1, #0]
 8004f62:	3a01      	subs	r2, #1
 8004f64:	0093      	lsls	r3, r2, #2
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	18c9      	adds	r1, r1, r3
 8004f6c:	690b      	ldr	r3, [r1, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <AddSnippet+0xd2>
	return BOS_OK;
 8004f72:	2000      	movs	r0, #0
 8004f74:	e7af      	b.n	8004ed6 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004f76:	0008      	movs	r0, r1
 8004f78:	f7fb f8ce 	bl	8000118 <strlen>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f00e f8bd 	bl	80130fc <malloc>
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <AddSnippet+0xec>)
 8004f84:	00aa      	lsls	r2, r5, #2
 8004f86:	1952      	adds	r2, r2, r5
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	6118      	str	r0, [r3, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004f8e:	0021      	movs	r1, r4
 8004f90:	f00f fded 	bl	8014b6e <strcpy>
 8004f94:	e7e3      	b.n	8004f5e <AddSnippet+0x9a>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004f96:	4806      	ldr	r0, [pc, #24]	; (8004fb0 <AddSnippet+0xec>)
 8004f98:	3004      	adds	r0, #4
 8004f9a:	0093      	lsls	r3, r2, #2
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	18c0      	adds	r0, r0, r3
 8004fa2:	2214      	movs	r2, #20
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	f00f fcbe 	bl	8014926 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004faa:	200e      	movs	r0, #14
 8004fac:	e793      	b.n	8004ed6 <AddSnippet+0x12>
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	200014a4 	.word	0x200014a4

08004fb4 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb6:	46de      	mov	lr, fp
 8004fb8:	4657      	mov	r7, sl
 8004fba:	464e      	mov	r6, r9
 8004fbc:	4645      	mov	r5, r8
 8004fbe:	b5e0      	push	{r5, r6, r7, lr}
 8004fc0:	b089      	sub	sp, #36	; 0x24
 8004fc2:	4681      	mov	r9, r0
 8004fc4:	4688      	mov	r8, r1
 8004fc6:	0015      	movs	r5, r2
 8004fc8:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9305      	str	r3, [sp, #20]
 8004fce:	2205      	movs	r2, #5
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	a806      	add	r0, sp, #24
 8004fd4:	f00f fca7 	bl	8014926 <memset>
 8004fd8:	e12a      	b.n	8005230 <CLI_CommandParser+0x27c>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004fda:	1ce9      	adds	r1, r5, #3
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f7ff ff71 	bl	8004ec4 <AddSnippet>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d106      	bne.n	8004ff4 <CLI_CommandParser+0x40>
				recordSnippet = SNIPPET_COMMANDS;
 8004fe6:	4bd2      	ldr	r3, [pc, #840]	; (8005330 <CLI_CommandParser+0x37c>)
 8004fe8:	2202      	movs	r2, #2
 8004fea:	769a      	strb	r2, [r3, #26]
				pcOutputString[0] ='\r';
 8004fec:	230d      	movs	r3, #13
 8004fee:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004ff0:	4657      	mov	r7, sl
 8004ff2:	e10c      	b.n	800520e <CLI_CommandParser+0x25a>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004ff4:	49cf      	ldr	r1, [pc, #828]	; (8005334 <CLI_CommandParser+0x380>)
 8004ff6:	2252      	movs	r2, #82	; 0x52
 8004ff8:	0020      	movs	r0, r4
 8004ffa:	f00f fdc0 	bl	8014b7e <memcpy>
				recordSnippet =0;
 8004ffe:	4bcc      	ldr	r3, [pc, #816]	; (8005330 <CLI_CommandParser+0x37c>)
 8005000:	2200      	movs	r2, #0
 8005002:	769a      	strb	r2, [r3, #26]
			xReturned = pdFALSE;
 8005004:	4657      	mov	r7, sl
 8005006:	e102      	b.n	800520e <CLI_CommandParser+0x25a>
			recordSnippet =0;
 8005008:	4bc9      	ldr	r3, [pc, #804]	; (8005330 <CLI_CommandParser+0x37c>)
 800500a:	2200      	movs	r2, #0
 800500c:	769a      	strb	r2, [r3, #26]
			AddSnippet(SNIPPET_ACTIVATE,"");
 800500e:	49ca      	ldr	r1, [pc, #808]	; (8005338 <CLI_CommandParser+0x384>)
 8005010:	2003      	movs	r0, #3
 8005012:	f7ff ff57 	bl	8004ec4 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8005016:	49c9      	ldr	r1, [pc, #804]	; (800533c <CLI_CommandParser+0x388>)
 8005018:	2241      	movs	r2, #65	; 0x41
 800501a:	0020      	movs	r0, r4
 800501c:	f00f fdaf 	bl	8014b7e <memcpy>
			xReturned = pdFALSE;
 8005020:	4657      	mov	r7, sl
 8005022:	e0f4      	b.n	800520e <CLI_CommandParser+0x25a>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8005024:	0029      	movs	r1, r5
 8005026:	2002      	movs	r0, #2
 8005028:	f7ff ff4c 	bl	8004ec4 <AddSnippet>
 800502c:	2800      	cmp	r0, #0
 800502e:	d103      	bne.n	8005038 <CLI_CommandParser+0x84>
				pcOutputString[0] ='\r';
 8005030:	230d      	movs	r3, #13
 8005032:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8005034:	2700      	movs	r7, #0
 8005036:	e0ea      	b.n	800520e <CLI_CommandParser+0x25a>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005038:	49be      	ldr	r1, [pc, #760]	; (8005334 <CLI_CommandParser+0x380>)
 800503a:	2252      	movs	r2, #82	; 0x52
 800503c:	0020      	movs	r0, r4
 800503e:	f00f fd9e 	bl	8014b7e <memcpy>
			xReturned = pdFALSE;
 8005042:	2700      	movs	r7, #0
 8005044:	e0e3      	b.n	800520e <CLI_CommandParser+0x25a>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005046:	1c70      	adds	r0, r6, #1
 8005048:	2299      	movs	r2, #153	; 0x99
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	0021      	movs	r1, r4
 800504e:	f009 f985 	bl	800e35c <FreeRTOS_CLIProcessCommand>
 8005052:	0007      	movs	r7, r0
 8005054:	e0db      	b.n	800520e <CLI_CommandParser+0x25a>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8005056:	49ba      	ldr	r1, [pc, #744]	; (8005340 <CLI_CommandParser+0x38c>)
 8005058:	2227      	movs	r2, #39	; 0x27
 800505a:	0020      	movs	r0, r4
 800505c:	f00f fd8f 	bl	8014b7e <memcpy>
					xReturned = pdFALSE;
 8005060:	2700      	movs	r7, #0
 8005062:	e0d4      	b.n	800520e <CLI_CommandParser+0x25a>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8005064:	49b7      	ldr	r1, [pc, #732]	; (8005344 <CLI_CommandParser+0x390>)
 8005066:	2225      	movs	r2, #37	; 0x25
 8005068:	0020      	movs	r0, r4
 800506a:	f00f fd88 	bl	8014b7e <memcpy>
					xReturned = pdFALSE;
 800506e:	2700      	movs	r7, #0
 8005070:	e0cd      	b.n	800520e <CLI_CommandParser+0x25a>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005072:	48b5      	ldr	r0, [pc, #724]	; (8005348 <CLI_CommandParser+0x394>)
 8005074:	221a      	movs	r2, #26
 8005076:	2100      	movs	r1, #0
 8005078:	f00f fc55 	bl	8014926 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800507c:	3601      	adds	r6, #1
 800507e:	0028      	movs	r0, r5
 8005080:	f7fb f84a 	bl	8000118 <strlen>
 8005084:	0007      	movs	r7, r0
 8005086:	a805      	add	r0, sp, #20
 8005088:	f7fb f846 	bl	8000118 <strlen>
 800508c:	1a3a      	subs	r2, r7, r0
 800508e:	3a01      	subs	r2, #1
 8005090:	48ae      	ldr	r0, [pc, #696]	; (800534c <CLI_CommandParser+0x398>)
 8005092:	0031      	movs	r1, r6
 8005094:	f00f fc7b 	bl	801498e <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005098:	0028      	movs	r0, r5
 800509a:	f7fb f83d 	bl	8000118 <strlen>
 800509e:	0007      	movs	r7, r0
 80050a0:	a805      	add	r0, sp, #20
 80050a2:	f7fb f839 	bl	8000118 <strlen>
 80050a6:	1a3b      	subs	r3, r7, r0
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2217      	movs	r2, #23
 80050ac:	21ff      	movs	r1, #255	; 0xff
 80050ae:	4650      	mov	r0, sl
 80050b0:	f003 fa30 	bl	8008514 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050b4:	2299      	movs	r2, #153	; 0x99
 80050b6:	0092      	lsls	r2, r2, #2
 80050b8:	0021      	movs	r1, r4
 80050ba:	0030      	movs	r0, r6
 80050bc:	f009 f94e 	bl	800e35c <FreeRTOS_CLIProcessCommand>
 80050c0:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80050c2:	0020      	movs	r0, r4
 80050c4:	f7fb f828 	bl	8000118 <strlen>
 80050c8:	1820      	adds	r0, r4, r0
 80050ca:	49a1      	ldr	r1, [pc, #644]	; (8005350 <CLI_CommandParser+0x39c>)
 80050cc:	221d      	movs	r2, #29
 80050ce:	f00f fd56 	bl	8014b7e <memcpy>
 80050d2:	e09c      	b.n	800520e <CLI_CommandParser+0x25a>
					group =id >> 8;
 80050d4:	9b02      	ldr	r3, [sp, #8]
 80050d6:	121b      	asrs	r3, r3, #8
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	469b      	mov	fp, r3
 80050dc:	4b94      	ldr	r3, [pc, #592]	; (8005330 <CLI_CommandParser+0x37c>)
 80050de:	9303      	str	r3, [sp, #12]
 80050e0:	4659      	mov	r1, fp
 80050e2:	76d9      	strb	r1, [r3, #27]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80050e4:	4898      	ldr	r0, [pc, #608]	; (8005348 <CLI_CommandParser+0x394>)
 80050e6:	221a      	movs	r2, #26
 80050e8:	2100      	movs	r1, #0
 80050ea:	f00f fc1c 	bl	8014926 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050ee:	1c71      	adds	r1, r6, #1
 80050f0:	9102      	str	r1, [sp, #8]
 80050f2:	0028      	movs	r0, r5
 80050f4:	f7fb f810 	bl	8000118 <strlen>
 80050f8:	0006      	movs	r6, r0
 80050fa:	a805      	add	r0, sp, #20
 80050fc:	f7fb f80c 	bl	8000118 <strlen>
 8005100:	1a32      	subs	r2, r6, r0
 8005102:	3a01      	subs	r2, #1
 8005104:	4891      	ldr	r0, [pc, #580]	; (800534c <CLI_CommandParser+0x398>)
 8005106:	9902      	ldr	r1, [sp, #8]
 8005108:	f00f fc41 	bl	801498e <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800510c:	0028      	movs	r0, r5
 800510e:	f7fb f803 	bl	8000118 <strlen>
 8005112:	0006      	movs	r6, r0
 8005114:	a805      	add	r0, sp, #20
 8005116:	f7fa ffff 	bl	8000118 <strlen>
 800511a:	1a33      	subs	r3, r6, r0
 800511c:	b29b      	uxth	r3, r3
 800511e:	2217      	movs	r2, #23
 8005120:	4659      	mov	r1, fp
 8005122:	4650      	mov	r0, sl
 8005124:	f003 f9f6 	bl	8008514 <BroadcastMessage>
					if(InGroup(myID,group))
 8005128:	4b8a      	ldr	r3, [pc, #552]	; (8005354 <CLI_CommandParser+0x3a0>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	4a8a      	ldr	r2, [pc, #552]	; (8005358 <CLI_CommandParser+0x3a4>)
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	5a9b      	ldrh	r3, [r3, r2]
 8005134:	9a03      	ldr	r2, [sp, #12]
 8005136:	7ed2      	ldrb	r2, [r2, #27]
 8005138:	4113      	asrs	r3, r2
 800513a:	07db      	lsls	r3, r3, #31
 800513c:	d406      	bmi.n	800514c <CLI_CommandParser+0x198>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 800513e:	4987      	ldr	r1, [pc, #540]	; (800535c <CLI_CommandParser+0x3a8>)
 8005140:	ab05      	add	r3, sp, #20
 8005142:	0022      	movs	r2, r4
 8005144:	0020      	movs	r0, r4
 8005146:	f00f fb61 	bl	801480c <sprintf>
 800514a:	e060      	b.n	800520e <CLI_CommandParser+0x25a>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800514c:	2299      	movs	r2, #153	; 0x99
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	0021      	movs	r1, r4
 8005152:	9802      	ldr	r0, [sp, #8]
 8005154:	f009 f902 	bl	800e35c <FreeRTOS_CLIProcessCommand>
 8005158:	0007      	movs	r7, r0
 800515a:	e7f0      	b.n	800513e <CLI_CommandParser+0x18a>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800515c:	0028      	movs	r0, r5
 800515e:	f7fa ffdb 	bl	8000118 <strlen>
 8005162:	0007      	movs	r7, r0
 8005164:	a805      	add	r0, sp, #20
 8005166:	f7fa ffd7 	bl	8000118 <strlen>
 800516a:	1a3a      	subs	r2, r7, r0
 800516c:	3a01      	subs	r2, #1
 800516e:	4877      	ldr	r0, [pc, #476]	; (800534c <CLI_CommandParser+0x398>)
 8005170:	0031      	movs	r1, r6
 8005172:	f00f fc0c 	bl	801498e <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005176:	0028      	movs	r0, r5
 8005178:	f7fa ffce 	bl	8000118 <strlen>
 800517c:	0006      	movs	r6, r0
 800517e:	a805      	add	r0, sp, #20
 8005180:	f7fa ffca 	bl	8000118 <strlen>
 8005184:	1a32      	subs	r2, r6, r0
 8005186:	b292      	uxth	r2, r2
 8005188:	3a01      	subs	r2, #1
 800518a:	b292      	uxth	r2, r2
 800518c:	2117      	movs	r1, #23
 800518e:	4658      	mov	r0, fp
 8005190:	f003 f9e8 	bl	8008564 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005194:	4972      	ldr	r1, [pc, #456]	; (8005360 <CLI_CommandParser+0x3ac>)
 8005196:	9a02      	ldr	r2, [sp, #8]
 8005198:	0020      	movs	r0, r4
 800519a:	f00f fb37 	bl	801480c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800519e:	7823      	ldrb	r3, [r4, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <CLI_CommandParser+0x1f6>
 80051a4:	4643      	mov	r3, r8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d108      	bne.n	80051bc <CLI_CommandParser+0x208>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80051aa:	0020      	movs	r0, r4
 80051ac:	f7fa ffb4 	bl	8000118 <strlen>
 80051b0:	0002      	movs	r2, r0
 80051b2:	2100      	movs	r1, #0
 80051b4:	0020      	movs	r0, r4
 80051b6:	f00f fbb6 	bl	8014926 <memset>
 80051ba:	e0a2      	b.n	8005302 <CLI_CommandParser+0x34e>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 80051bc:	0020      	movs	r0, r4
 80051be:	f7fa ffab 	bl	8000118 <strlen>
 80051c2:	b282      	uxth	r2, r0
 80051c4:	2301      	movs	r3, #1
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	3331      	adds	r3, #49	; 0x31
 80051ca:	0021      	movs	r1, r4
 80051cc:	4648      	mov	r0, r9
 80051ce:	f008 fe87 	bl	800dee0 <writePxMutex>
 80051d2:	e7ea      	b.n	80051aa <CLI_CommandParser+0x1f6>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051d4:	21fa      	movs	r1, #250	; 0xfa
 80051d6:	0089      	lsls	r1, r1, #2
 80051d8:	2001      	movs	r0, #1
 80051da:	f00a faef 	bl	800f7bc <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051de:	4b61      	ldr	r3, [pc, #388]	; (8005364 <CLI_CommandParser+0x3b0>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d100      	bne.n	80051e8 <CLI_CommandParser+0x234>
 80051e6:	e093      	b.n	8005310 <CLI_CommandParser+0x35c>
							++timedoutMsg;
 80051e8:	4a5f      	ldr	r2, [pc, #380]	; (8005368 <CLI_CommandParser+0x3b4>)
 80051ea:	8813      	ldrh	r3, [r2, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051f0:	495e      	ldr	r1, [pc, #376]	; (800536c <CLI_CommandParser+0x3b8>)
 80051f2:	9b02      	ldr	r3, [sp, #8]
 80051f4:	0022      	movs	r2, r4
 80051f6:	0020      	movs	r0, r4
 80051f8:	f00f fb08 	bl	801480c <sprintf>
					xReturned = pdFALSE;
 80051fc:	2700      	movs	r7, #0
 80051fe:	e006      	b.n	800520e <CLI_CommandParser+0x25a>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005200:	2299      	movs	r2, #153	; 0x99
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	0021      	movs	r1, r4
 8005206:	0028      	movs	r0, r5
 8005208:	f009 f8a8 	bl	800e35c <FreeRTOS_CLIProcessCommand>
 800520c:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800520e:	7823      	ldrb	r3, [r4, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <CLI_CommandParser+0x266>
 8005214:	4643      	mov	r3, r8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d17c      	bne.n	8005314 <CLI_CommandParser+0x360>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800521a:	0020      	movs	r0, r4
 800521c:	f7fa ff7c 	bl	8000118 <strlen>
 8005220:	0002      	movs	r2, r0
 8005222:	2100      	movs	r1, #0
 8005224:	0020      	movs	r0, r4
 8005226:	f00f fb7e 	bl	8014926 <memset>
	} while(xReturned != pdFALSE);
 800522a:	2f00      	cmp	r7, #0
 800522c:	d100      	bne.n	8005230 <CLI_CommandParser+0x27c>
 800522e:	e0ad      	b.n	800538c <CLI_CommandParser+0x3d8>
		StringToLowerCase((char* )cInputString);
 8005230:	0028      	movs	r0, r5
 8005232:	f7ff fc0f 	bl	8004a54 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005236:	4b3e      	ldr	r3, [pc, #248]	; (8005330 <CLI_CommandParser+0x37c>)
 8005238:	7e9e      	ldrb	r6, [r3, #26]
 800523a:	2e00      	cmp	r6, #0
 800523c:	d108      	bne.n	8005250 <CLI_CommandParser+0x29c>
 800523e:	494c      	ldr	r1, [pc, #304]	; (8005370 <CLI_CommandParser+0x3bc>)
 8005240:	2203      	movs	r2, #3
 8005242:	0028      	movs	r0, r5
 8005244:	f00f fb92 	bl	801496c <strncmp>
 8005248:	4682      	mov	sl, r0
 800524a:	2800      	cmp	r0, #0
 800524c:	d100      	bne.n	8005250 <CLI_CommandParser+0x29c>
 800524e:	e6c4      	b.n	8004fda <CLI_CommandParser+0x26>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8005250:	2e00      	cmp	r6, #0
 8005252:	d008      	beq.n	8005266 <CLI_CommandParser+0x2b2>
 8005254:	4947      	ldr	r1, [pc, #284]	; (8005374 <CLI_CommandParser+0x3c0>)
 8005256:	2206      	movs	r2, #6
 8005258:	0028      	movs	r0, r5
 800525a:	f00f fb87 	bl	801496c <strncmp>
 800525e:	4682      	mov	sl, r0
 8005260:	2800      	cmp	r0, #0
 8005262:	d100      	bne.n	8005266 <CLI_CommandParser+0x2b2>
 8005264:	e6d0      	b.n	8005008 <CLI_CommandParser+0x54>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8005266:	2e02      	cmp	r6, #2
 8005268:	d100      	bne.n	800526c <CLI_CommandParser+0x2b8>
 800526a:	e6db      	b.n	8005024 <CLI_CommandParser+0x70>
			loc =strchr((char* )cInputString,'.');
 800526c:	212e      	movs	r1, #46	; 0x2e
 800526e:	0028      	movs	r0, r5
 8005270:	f00f fb6e 	bl	8014950 <strchr>
 8005274:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005276:	d0c3      	beq.n	8005200 <CLI_CommandParser+0x24c>
 8005278:	3803      	subs	r0, #3
 800527a:	493f      	ldr	r1, [pc, #252]	; (8005378 <CLI_CommandParser+0x3c4>)
 800527c:	2203      	movs	r2, #3
 800527e:	f00f fb75 	bl	801496c <strncmp>
 8005282:	2800      	cmp	r0, #0
 8005284:	d0bc      	beq.n	8005200 <CLI_CommandParser+0x24c>
 8005286:	7873      	ldrb	r3, [r6, #1]
 8005288:	4a3c      	ldr	r2, [pc, #240]	; (800537c <CLI_CommandParser+0x3c8>)
 800528a:	5cd3      	ldrb	r3, [r2, r3]
 800528c:	075b      	lsls	r3, r3, #29
 800528e:	d4b7      	bmi.n	8005200 <CLI_CommandParser+0x24c>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005290:	1b72      	subs	r2, r6, r5
 8005292:	0029      	movs	r1, r5
 8005294:	a805      	add	r0, sp, #20
 8005296:	f00f fb7a 	bl	801498e <strncpy>
				id =GetID(idString);
 800529a:	a805      	add	r0, sp, #20
 800529c:	f7ff f8c4 	bl	8004428 <GetID>
 80052a0:	9002      	str	r0, [sp, #8]
				if(id == myID){
 80052a2:	4a2c      	ldr	r2, [pc, #176]	; (8005354 <CLI_CommandParser+0x3a0>)
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	4692      	mov	sl, r2
 80052a8:	4290      	cmp	r0, r2
 80052aa:	d100      	bne.n	80052ae <CLI_CommandParser+0x2fa>
 80052ac:	e6cb      	b.n	8005046 <CLI_CommandParser+0x92>
				else if(id == BOS_ERR_WrongName){
 80052ae:	2864      	cmp	r0, #100	; 0x64
 80052b0:	d100      	bne.n	80052b4 <CLI_CommandParser+0x300>
 80052b2:	e6d0      	b.n	8005056 <CLI_CommandParser+0xa2>
				else if(id == BOS_ERR_WrongID){
 80052b4:	2866      	cmp	r0, #102	; 0x66
 80052b6:	d100      	bne.n	80052ba <CLI_CommandParser+0x306>
 80052b8:	e6d4      	b.n	8005064 <CLI_CommandParser+0xb0>
				else if(id == BOS_BROADCAST){
 80052ba:	28ff      	cmp	r0, #255	; 0xff
 80052bc:	d100      	bne.n	80052c0 <CLI_CommandParser+0x30c>
 80052be:	e6d8      	b.n	8005072 <CLI_CommandParser+0xbe>
				else if((uint8_t )id == BOS_MULTICAST){
 80052c0:	466b      	mov	r3, sp
 80052c2:	7a1b      	ldrb	r3, [r3, #8]
 80052c4:	469b      	mov	fp, r3
 80052c6:	2bfe      	cmp	r3, #254	; 0xfe
 80052c8:	d100      	bne.n	80052cc <CLI_CommandParser+0x318>
 80052ca:	e703      	b.n	80050d4 <CLI_CommandParser+0x120>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 80052cc:	3601      	adds	r6, #1
 80052ce:	492c      	ldr	r1, [pc, #176]	; (8005380 <CLI_CommandParser+0x3cc>)
 80052d0:	2206      	movs	r2, #6
 80052d2:	0030      	movs	r0, r6
 80052d4:	f00f fb4a 	bl	801496c <strncmp>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d000      	beq.n	80052de <CLI_CommandParser+0x32a>
 80052dc:	e73e      	b.n	800515c <CLI_CommandParser+0x1a8>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <CLI_CommandParser+0x3d0>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 80052e4:	2119      	movs	r1, #25
 80052e6:	4658      	mov	r0, fp
 80052e8:	f003 f93c 	bl	8008564 <SendMessageToModule>
						osDelay(100);
 80052ec:	2064      	movs	r0, #100	; 0x64
 80052ee:	f008 ff81 	bl	800e1f4 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 80052f2:	4b25      	ldr	r3, [pc, #148]	; (8005388 <CLI_CommandParser+0x3d4>)
 80052f4:	781a      	ldrb	r2, [r3, #0]
 80052f6:	4b17      	ldr	r3, [pc, #92]	; (8005354 <CLI_CommandParser+0x3a0>)
 80052f8:	7818      	ldrb	r0, [r3, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	4659      	mov	r1, fp
 80052fe:	f005 fb6f 	bl	800a9e0 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <CLI_CommandParser+0x3d0>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b60      	cmp	r3, #96	; 0x60
 8005308:	d100      	bne.n	800530c <CLI_CommandParser+0x358>
 800530a:	e763      	b.n	80051d4 <CLI_CommandParser+0x220>
					xReturned = pdFALSE;
 800530c:	2700      	movs	r7, #0
 800530e:	e77e      	b.n	800520e <CLI_CommandParser+0x25a>
 8005310:	2700      	movs	r7, #0
 8005312:	e77c      	b.n	800520e <CLI_CommandParser+0x25a>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8005314:	0020      	movs	r0, r4
 8005316:	f7fa feff 	bl	8000118 <strlen>
 800531a:	b282      	uxth	r2, r0
 800531c:	2301      	movs	r3, #1
 800531e:	425b      	negs	r3, r3
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	3333      	adds	r3, #51	; 0x33
 8005324:	0021      	movs	r1, r4
 8005326:	4648      	mov	r0, r9
 8005328:	f008 fdda 	bl	800dee0 <writePxMutex>
 800532c:	e775      	b.n	800521a <CLI_CommandParser+0x266>
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	20001524 	.word	0x20001524
 8005334:	0801a4d8 	.word	0x0801a4d8
 8005338:	08019db4 	.word	0x08019db4
 800533c:	0801a534 	.word	0x0801a534
 8005340:	0801a57c 	.word	0x0801a57c
 8005344:	0801a5a4 	.word	0x0801a5a4
 8005348:	20000b50 	.word	0x20000b50
 800534c:	2000086c 	.word	0x2000086c
 8005350:	0801a5cc 	.word	0x0801a5cc
 8005354:	200007a0 	.word	0x200007a0
 8005358:	200007a4 	.word	0x200007a4
 800535c:	0801a5ec 	.word	0x0801a5ec
 8005360:	0801a620 	.word	0x0801a620
 8005364:	2000096c 	.word	0x2000096c
 8005368:	20001ed0 	.word	0x20001ed0
 800536c:	0801a644 	.word	0x0801a644
 8005370:	0801a4d4 	.word	0x0801a4d4
 8005374:	0801a52c 	.word	0x0801a52c
 8005378:	0801a578 	.word	0x0801a578
 800537c:	0801c629 	.word	0x0801c629
 8005380:	0801a618 	.word	0x0801a618
 8005384:	20000844 	.word	0x20000844
 8005388:	20000958 	.word	0x20000958
	memset(idString,0x00,MaxLengthOfAlias);
 800538c:	2209      	movs	r2, #9
 800538e:	2100      	movs	r1, #0
 8005390:	a805      	add	r0, sp, #20
 8005392:	f00f fac8 	bl	8014926 <memset>
	if(!recordSnippet && enableOutput)
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <CLI_CommandParser+0x414>)
 8005398:	7e9b      	ldrb	r3, [r3, #26]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <CLI_CommandParser+0x3f0>
 800539e:	4643      	mov	r3, r8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <CLI_CommandParser+0x3fe>
}
 80053a4:	b009      	add	sp, #36	; 0x24
 80053a6:	bcf0      	pop	{r4, r5, r6, r7}
 80053a8:	46bb      	mov	fp, r7
 80053aa:	46b2      	mov	sl, r6
 80053ac:	46a9      	mov	r9, r5
 80053ae:	46a0      	mov	r8, r4
 80053b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80053b2:	4906      	ldr	r1, [pc, #24]	; (80053cc <CLI_CommandParser+0x418>)
 80053b4:	2301      	movs	r3, #1
 80053b6:	425b      	negs	r3, r3
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	3333      	adds	r3, #51	; 0x33
 80053bc:	2238      	movs	r2, #56	; 0x38
 80053be:	4648      	mov	r0, r9
 80053c0:	f008 fd8e 	bl	800dee0 <writePxMutex>
}
 80053c4:	e7ee      	b.n	80053a4 <CLI_CommandParser+0x3f0>
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	20001524 	.word	0x20001524
 80053cc:	0801a664 	.word	0x0801a664

080053d0 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	b084      	sub	sp, #16
	char cRxedChar ='\0';
 80053d4:	230f      	movs	r3, #15
 80053d6:	446b      	add	r3, sp
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80053dc:	2101      	movs	r1, #1
 80053de:	4249      	negs	r1, r1
 80053e0:	2001      	movs	r0, #1
 80053e2:	f00a f9eb 	bl	800f7bc <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053e6:	f009 f823 	bl	800e430 <FreeRTOS_CLIGetOutputBuffer>
 80053ea:	0005      	movs	r5, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80053ec:	4b54      	ldr	r3, [pc, #336]	; (8005540 <prvCLITask+0x170>)
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	23e1      	movs	r3, #225	; 0xe1
 80053f2:	031b      	lsls	r3, r3, #12
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d00f      	beq.n	8005418 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80053f8:	2401      	movs	r4, #1
 80053fa:	e001      	b.n	8005400 <prvCLITask+0x30>
 80053fc:	3401      	adds	r4, #1
 80053fe:	b2e4      	uxtb	r4, r4
 8005400:	2c05      	cmp	r4, #5
 8005402:	d809      	bhi.n	8005418 <prvCLITask+0x48>
			if(port != PcPort)
 8005404:	4b4f      	ldr	r3, [pc, #316]	; (8005544 <prvCLITask+0x174>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	42a3      	cmp	r3, r4
 800540a:	d0f7      	beq.n	80053fc <prvCLITask+0x2c>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800540c:	21e1      	movs	r1, #225	; 0xe1
 800540e:	0309      	lsls	r1, r1, #12
 8005410:	0020      	movs	r0, r4
 8005412:	f008 fdb5 	bl	800df80 <UpdateBaudrate>
 8005416:	e7f1      	b.n	80053fc <prvCLITask+0x2c>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005418:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <prvCLITask+0x178>)
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	0053      	lsls	r3, r2, #1
 800541e:	189b      	adds	r3, r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4a4a      	ldr	r2, [pc, #296]	; (800554c <prvCLITask+0x17c>)
 8005424:	189b      	adds	r3, r3, r2
 8005426:	4a4a      	ldr	r2, [pc, #296]	; (8005550 <prvCLITask+0x180>)
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	494a      	ldr	r1, [pc, #296]	; (8005554 <prvCLITask+0x184>)
 800542c:	4c4a      	ldr	r4, [pc, #296]	; (8005558 <prvCLITask+0x188>)
 800542e:	341c      	adds	r4, #28
 8005430:	4e44      	ldr	r6, [pc, #272]	; (8005544 <prvCLITask+0x174>)
 8005432:	7830      	ldrb	r0, [r6, #0]
 8005434:	9000      	str	r0, [sp, #0]
 8005436:	0020      	movs	r0, r4
 8005438:	f00f f9e8 	bl	801480c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800543c:	22a4      	movs	r2, #164	; 0xa4
 800543e:	4947      	ldr	r1, [pc, #284]	; (800555c <prvCLITask+0x18c>)
 8005440:	7830      	ldrb	r0, [r6, #0]
 8005442:	230a      	movs	r3, #10
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	f008 fd7b 	bl	800df40 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800544a:	0020      	movs	r0, r4
 800544c:	f7fa fe64 	bl	8000118 <strlen>
 8005450:	b282      	uxth	r2, r0
 8005452:	7830      	ldrb	r0, [r6, #0]
 8005454:	230a      	movs	r3, #10
 8005456:	0021      	movs	r1, r4
 8005458:	f008 fd72 	bl	800df40 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 800545c:	2400      	movs	r4, #0
 800545e:	e027      	b.n	80054b0 <prvCLITask+0xe0>
				cRxedChar = CLI_Data;
 8005460:	4b3f      	ldr	r3, [pc, #252]	; (8005560 <prvCLITask+0x190>)
 8005462:	7819      	ldrb	r1, [r3, #0]
 8005464:	220f      	movs	r2, #15
 8005466:	446a      	add	r2, sp
 8005468:	7011      	strb	r1, [r2, #0]
				CLI_Data = 0;
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e033      	b.n	80054d8 <prvCLITask+0x108>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005470:	493c      	ldr	r1, [pc, #240]	; (8005564 <prvCLITask+0x194>)
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <prvCLITask+0x174>)
 8005474:	7818      	ldrb	r0, [r3, #0]
 8005476:	230a      	movs	r3, #10
 8005478:	3a0b      	subs	r2, #11
 800547a:	f008 fd61 	bl	800df40 <writePxITMutex>
				if(cInputIndex == 0){
 800547e:	2c00      	cmp	r4, #0
 8005480:	d04d      	beq.n	800551e <prvCLITask+0x14e>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005482:	4c35      	ldr	r4, [pc, #212]	; (8005558 <prvCLITask+0x188>)
 8005484:	0026      	movs	r6, r4
 8005486:	3678      	adds	r6, #120	; 0x78
 8005488:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <prvCLITask+0x174>)
 800548a:	7818      	ldrb	r0, [r3, #0]
 800548c:	002b      	movs	r3, r5
 800548e:	0032      	movs	r2, r6
 8005490:	2101      	movs	r1, #1
 8005492:	f7ff fd8f 	bl	8004fb4 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005496:	0020      	movs	r0, r4
 8005498:	3044      	adds	r0, #68	; 0x44
 800549a:	0031      	movs	r1, r6
 800549c:	f00f fb67 	bl	8014b6e <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80054a0:	2232      	movs	r2, #50	; 0x32
 80054a2:	2100      	movs	r1, #0
 80054a4:	0030      	movs	r0, r6
 80054a6:	f00f fa3e 	bl	8014926 <memset>
				cInputIndex =0;
 80054aa:	2400      	movs	r4, #0
		taskYIELD();
 80054ac:	f00a fc3a 	bl	800fd24 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 80054b0:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <prvCLITask+0x198>)
 80054b2:	7812      	ldrb	r2, [r2, #0]
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	d1f9      	bne.n	80054ac <prvCLITask+0xdc>
			if(Processor_type(myPN)=='G')
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <prvCLITask+0x178>)
 80054ba:	7818      	ldrb	r0, [r3, #0]
 80054bc:	f7fd fd28 	bl	8002f10 <Processor_type>
 80054c0:	2847      	cmp	r0, #71	; 0x47
 80054c2:	d0cd      	beq.n	8005460 <prvCLITask+0x90>
				cRxedChar = Rx_Data[PcPort - 1];
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <prvCLITask+0x174>)
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	3a01      	subs	r2, #1
 80054ca:	4b28      	ldr	r3, [pc, #160]	; (800556c <prvCLITask+0x19c>)
 80054cc:	5c98      	ldrb	r0, [r3, r2]
 80054ce:	210f      	movs	r1, #15
 80054d0:	4469      	add	r1, sp
 80054d2:	7008      	strb	r0, [r1, #0]
				Rx_Data[PcPort - 1] = 0;
 80054d4:	2100      	movs	r1, #0
 80054d6:	5499      	strb	r1, [r3, r2]
			Read_In_CLI_Task_Flag = 0;
 80054d8:	4a23      	ldr	r2, [pc, #140]	; (8005568 <prvCLITask+0x198>)
 80054da:	2300      	movs	r3, #0
 80054dc:	7013      	strb	r3, [r2, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80054de:	260f      	movs	r6, #15
 80054e0:	446e      	add	r6, sp
 80054e2:	4b18      	ldr	r3, [pc, #96]	; (8005544 <prvCLITask+0x174>)
 80054e4:	7818      	ldrb	r0, [r3, #0]
 80054e6:	230a      	movs	r3, #10
 80054e8:	2201      	movs	r2, #1
 80054ea:	0031      	movs	r1, r6
 80054ec:	f008 fd28 	bl	800df40 <writePxITMutex>
			if(cRxedChar == '\r'){
 80054f0:	7832      	ldrb	r2, [r6, #0]
 80054f2:	2a0d      	cmp	r2, #13
 80054f4:	d0bc      	beq.n	8005470 <prvCLITask+0xa0>
				if(cRxedChar == '\n'){
 80054f6:	2a0a      	cmp	r2, #10
 80054f8:	d0d8      	beq.n	80054ac <prvCLITask+0xdc>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80054fa:	2a08      	cmp	r2, #8
 80054fc:	d016      	beq.n	800552c <prvCLITask+0x15c>
 80054fe:	2a7f      	cmp	r2, #127	; 0x7f
 8005500:	d014      	beq.n	800552c <prvCLITask+0x15c>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005502:	0013      	movs	r3, r2
 8005504:	3b20      	subs	r3, #32
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b5e      	cmp	r3, #94	; 0x5e
 800550a:	d8cf      	bhi.n	80054ac <prvCLITask+0xdc>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 800550c:	2c31      	cmp	r4, #49	; 0x31
 800550e:	dccd      	bgt.n	80054ac <prvCLITask+0xdc>
							cInputString[cInputIndex] =cRxedChar;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <prvCLITask+0x188>)
 8005512:	191b      	adds	r3, r3, r4
 8005514:	2178      	movs	r1, #120	; 0x78
 8005516:	545a      	strb	r2, [r3, r1]
							cInputIndex++;
 8005518:	3401      	adds	r4, #1
 800551a:	b264      	sxtb	r4, r4
 800551c:	e7c6      	b.n	80054ac <prvCLITask+0xdc>
					strcpy((char* )cInputString,(char* )cLastInputString);
 800551e:	480e      	ldr	r0, [pc, #56]	; (8005558 <prvCLITask+0x188>)
 8005520:	0001      	movs	r1, r0
 8005522:	3144      	adds	r1, #68	; 0x44
 8005524:	3078      	adds	r0, #120	; 0x78
 8005526:	f00f fb22 	bl	8014b6e <strcpy>
 800552a:	e7aa      	b.n	8005482 <prvCLITask+0xb2>
					if(cInputIndex > 0){
 800552c:	2c00      	cmp	r4, #0
 800552e:	ddbd      	ble.n	80054ac <prvCLITask+0xdc>
						cInputIndex--;
 8005530:	3c01      	subs	r4, #1
 8005532:	b264      	sxtb	r4, r4
						cInputString[cInputIndex] ='\0';
 8005534:	4b08      	ldr	r3, [pc, #32]	; (8005558 <prvCLITask+0x188>)
 8005536:	191b      	adds	r3, r3, r4
 8005538:	2278      	movs	r2, #120	; 0x78
 800553a:	2100      	movs	r1, #0
 800553c:	5499      	strb	r1, [r3, r2]
 800553e:	e7b5      	b.n	80054ac <prvCLITask+0xdc>
 8005540:	2000084c 	.word	0x2000084c
 8005544:	20000958 	.word	0x20000958
 8005548:	20000030 	.word	0x20000030
 800554c:	0801976c 	.word	0x0801976c
 8005550:	200007a0 	.word	0x200007a0
 8005554:	0801a6a0 	.word	0x0801a6a0
 8005558:	20001524 	.word	0x20001524
 800555c:	0801a6cc 	.word	0x0801a6cc
 8005560:	20000ee9 	.word	0x20000ee9
 8005564:	0801c3e0 	.word	0x0801c3e0
 8005568:	200014a1 	.word	0x200014a1
 800556c:	20001b00 	.word	0x20001b00

08005570 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005574:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <ParseSnippetCommand+0x7c>)
 8005576:	7811      	ldrb	r1, [r2, #0]
 8005578:	3901      	subs	r1, #1
 800557a:	008b      	lsls	r3, r1, #2
 800557c:	185b      	adds	r3, r3, r1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	18d2      	adds	r2, r2, r3
 8005582:	6913      	ldr	r3, [r2, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02e      	beq.n	80055e6 <ParseSnippetCommand+0x76>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <ParseSnippetCommand+0x80>)
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d016      	beq.n	80055be <ParseSnippetCommand+0x4e>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005590:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <ParseSnippetCommand+0x80>)
 8005592:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005594:	7833      	ldrb	r3, [r6, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d014      	beq.n	80055c4 <ParseSnippetCommand+0x54>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 800559a:	2113      	movs	r1, #19
 800559c:	0030      	movs	r0, r6
 800559e:	f00f f9d7 	bl	8014950 <strchr>
 80055a2:	1e05      	subs	r5, r0, #0
 80055a4:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <ParseSnippetCommand+0x80>)
 80055a6:	6318      	str	r0, [r3, #48]	; 0x30
	if(ptrEnd != NULL){
 80055a8:	d011      	beq.n	80055ce <ParseSnippetCommand+0x5e>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80055aa:	1b82      	subs	r2, r0, r6
 80055ac:	0031      	movs	r1, r6
 80055ae:	0020      	movs	r0, r4
 80055b0:	f00f f9ed 	bl	801498e <strncpy>
		ptrStart =ptrEnd + 1;
 80055b4:	3501      	adds	r5, #1
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <ParseSnippetCommand+0x80>)
 80055b8:	62dd      	str	r5, [r3, #44]	; 0x2c
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80055ba:	2001      	movs	r0, #1
}
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
		ptrStart =snippetBuffer;
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <ParseSnippetCommand+0x80>)
 80055c0:	62d8      	str	r0, [r3, #44]	; 0x2c
 80055c2:	e7e5      	b.n	8005590 <ParseSnippetCommand+0x20>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <ParseSnippetCommand+0x80>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
		return false;
 80055ca:	2000      	movs	r0, #0
 80055cc:	e7f6      	b.n	80055bc <ParseSnippetCommand+0x4c>
		strcpy((char* )cliBuffer,ptrStart);
 80055ce:	0031      	movs	r1, r6
 80055d0:	0020      	movs	r0, r4
 80055d2:	f00f facc 	bl	8014b6e <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80055d6:	0020      	movs	r0, r4
 80055d8:	f7fa fd9e 	bl	8000118 <strlen>
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <ParseSnippetCommand+0x80>)
 80055de:	1836      	adds	r6, r6, r0
 80055e0:	62de      	str	r6, [r3, #44]	; 0x2c
	return true;
 80055e2:	2001      	movs	r0, #1
 80055e4:	e7ea      	b.n	80055bc <ParseSnippetCommand+0x4c>
		return false;
 80055e6:	2000      	movs	r0, #0
 80055e8:	e7e8      	b.n	80055bc <ParseSnippetCommand+0x4c>
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	200014a4 	.word	0x200014a4
 80055f0:	200015a4 	.word	0x200015a4

080055f4 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80055f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f6:	b083      	sub	sp, #12
 80055f8:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80055fa:	4b48      	ldr	r3, [pc, #288]	; (800571c <CheckSnippetCondition+0x128>)
 80055fc:	0082      	lsls	r2, r0, #2
 80055fe:	1812      	adds	r2, r2, r0
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	189b      	adds	r3, r3, r2
 8005604:	791b      	ldrb	r3, [r3, #4]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d004      	beq.n	8005614 <CheckSnippetCondition+0x20>
 800560a:	2b03      	cmp	r3, #3
 800560c:	d016      	beq.n	800563c <CheckSnippetCondition+0x48>
 800560e:	2000      	movs	r0, #0
		default:
			break;
	}
	
	return false;
}
 8005610:	b003      	add	sp, #12
 8005612:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <CheckSnippetCondition+0x128>)
 8005616:	0082      	lsls	r2, r0, #2
 8005618:	1811      	adds	r1, r2, r0
 800561a:	0089      	lsls	r1, r1, #2
 800561c:	1859      	adds	r1, r3, r1
 800561e:	7989      	ldrb	r1, [r1, #6]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005620:	1812      	adds	r2, r2, r0
 8005622:	0092      	lsls	r2, r2, #2
 8005624:	189b      	adds	r3, r3, r2
 8005626:	79d8      	ldrb	r0, [r3, #7]
 8005628:	4b3d      	ldr	r3, [pc, #244]	; (8005720 <CheckSnippetCondition+0x12c>)
 800562a:	00ca      	lsls	r2, r1, #3
 800562c:	1852      	adds	r2, r2, r1
 800562e:	5cd3      	ldrb	r3, [r2, r3]
 8005630:	4298      	cmp	r0, r3
 8005632:	d001      	beq.n	8005638 <CheckSnippetCondition+0x44>
				return false;
 8005634:	2000      	movs	r0, #0
 8005636:	e7eb      	b.n	8005610 <CheckSnippetCondition+0x1c>
				return true;
 8005638:	2001      	movs	r0, #1
 800563a:	e7e9      	b.n	8005610 <CheckSnippetCondition+0x1c>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800563c:	4d37      	ldr	r5, [pc, #220]	; (800571c <CheckSnippetCondition+0x128>)
 800563e:	0086      	lsls	r6, r0, #2
 8005640:	1833      	adds	r3, r6, r0
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	18eb      	adds	r3, r5, r3
 8005646:	79da      	ldrb	r2, [r3, #7]
 8005648:	3a01      	subs	r2, #1
 800564a:	4936      	ldr	r1, [pc, #216]	; (8005724 <CheckSnippetCondition+0x130>)
 800564c:	0053      	lsls	r3, r2, #1
 800564e:	189b      	adds	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	585b      	ldr	r3, [r3, r1]
 8005654:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005656:	1d29      	adds	r1, r5, #4
 8005658:	1833      	adds	r3, r6, r0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	18c9      	adds	r1, r1, r3
 800565e:	3106      	adds	r1, #6
 8005660:	2204      	movs	r2, #4
 8005662:	a801      	add	r0, sp, #4
 8005664:	f00f fa8b 	bl	8014b7e <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005668:	1936      	adds	r6, r6, r4
 800566a:	00b6      	lsls	r6, r6, #2
 800566c:	19ad      	adds	r5, r5, r6
 800566e:	796b      	ldrb	r3, [r5, #5]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d845      	bhi.n	8005700 <CheckSnippetCondition+0x10c>
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4a2c      	ldr	r2, [pc, #176]	; (8005728 <CheckSnippetCondition+0x134>)
 8005678:	58d3      	ldr	r3, [r2, r3]
 800567a:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800567c:	9801      	ldr	r0, [sp, #4]
 800567e:	1c39      	adds	r1, r7, #0
 8005680:	f7fa ff26 	bl	80004d0 <__aeabi_fcmpeq>
 8005684:	2800      	cmp	r0, #0
 8005686:	d0c3      	beq.n	8005610 <CheckSnippetCondition+0x1c>
						return true;
 8005688:	2001      	movs	r0, #1
 800568a:	e7c1      	b.n	8005610 <CheckSnippetCondition+0x1c>
					if(flt1 > flt2)
 800568c:	9801      	ldr	r0, [sp, #4]
 800568e:	1c39      	adds	r1, r7, #0
 8005690:	f7fa ff24 	bl	80004dc <__aeabi_fcmplt>
 8005694:	2800      	cmp	r0, #0
 8005696:	d0bb      	beq.n	8005610 <CheckSnippetCondition+0x1c>
						return true;
 8005698:	2001      	movs	r0, #1
 800569a:	e7b9      	b.n	8005610 <CheckSnippetCondition+0x1c>
					if(flt1 < flt2 && flt1 != 0.0f)
 800569c:	9801      	ldr	r0, [sp, #4]
 800569e:	1c39      	adds	r1, r7, #0
 80056a0:	f7fa ff30 	bl	8000504 <__aeabi_fcmpgt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d02d      	beq.n	8005704 <CheckSnippetCondition+0x110>
 80056a8:	2100      	movs	r1, #0
 80056aa:	1c38      	adds	r0, r7, #0
 80056ac:	f7fa ff10 	bl	80004d0 <__aeabi_fcmpeq>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d029      	beq.n	8005708 <CheckSnippetCondition+0x114>
	return false;
 80056b4:	2000      	movs	r0, #0
 80056b6:	e7ab      	b.n	8005610 <CheckSnippetCondition+0x1c>
					if(flt1 >= flt2)
 80056b8:	9801      	ldr	r0, [sp, #4]
 80056ba:	1c39      	adds	r1, r7, #0
 80056bc:	f7fa ff18 	bl	80004f0 <__aeabi_fcmple>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d0a5      	beq.n	8005610 <CheckSnippetCondition+0x1c>
						return true;
 80056c4:	2001      	movs	r0, #1
 80056c6:	e7a3      	b.n	8005610 <CheckSnippetCondition+0x1c>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80056c8:	9801      	ldr	r0, [sp, #4]
 80056ca:	1c39      	adds	r1, r7, #0
 80056cc:	f7fa ff24 	bl	8000518 <__aeabi_fcmpge>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d01b      	beq.n	800570c <CheckSnippetCondition+0x118>
 80056d4:	2100      	movs	r1, #0
 80056d6:	1c38      	adds	r0, r7, #0
 80056d8:	f7fa fefa 	bl	80004d0 <__aeabi_fcmpeq>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d017      	beq.n	8005710 <CheckSnippetCondition+0x11c>
	return false;
 80056e0:	2000      	movs	r0, #0
 80056e2:	e795      	b.n	8005610 <CheckSnippetCondition+0x1c>
					if(flt1 != flt2 && flt1 != 0.0f)
 80056e4:	9801      	ldr	r0, [sp, #4]
 80056e6:	1c39      	adds	r1, r7, #0
 80056e8:	f7fa fef2 	bl	80004d0 <__aeabi_fcmpeq>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d111      	bne.n	8005714 <CheckSnippetCondition+0x120>
 80056f0:	2100      	movs	r1, #0
 80056f2:	1c38      	adds	r0, r7, #0
 80056f4:	f7fa feec 	bl	80004d0 <__aeabi_fcmpeq>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d00d      	beq.n	8005718 <CheckSnippetCondition+0x124>
	return false;
 80056fc:	2000      	movs	r0, #0
 80056fe:	e787      	b.n	8005610 <CheckSnippetCondition+0x1c>
 8005700:	2000      	movs	r0, #0
 8005702:	e785      	b.n	8005610 <CheckSnippetCondition+0x1c>
 8005704:	2000      	movs	r0, #0
 8005706:	e783      	b.n	8005610 <CheckSnippetCondition+0x1c>
						return true;
 8005708:	2001      	movs	r0, #1
 800570a:	e781      	b.n	8005610 <CheckSnippetCondition+0x1c>
	return false;
 800570c:	2000      	movs	r0, #0
 800570e:	e77f      	b.n	8005610 <CheckSnippetCondition+0x1c>
						return true;
 8005710:	2001      	movs	r0, #1
 8005712:	e77d      	b.n	8005610 <CheckSnippetCondition+0x1c>
	return false;
 8005714:	2000      	movs	r0, #0
 8005716:	e77b      	b.n	8005610 <CheckSnippetCondition+0x1c>
						return true;
 8005718:	2001      	movs	r0, #1
 800571a:	e779      	b.n	8005610 <CheckSnippetCondition+0x1c>
 800571c:	200014a4 	.word	0x200014a4
 8005720:	2000269c 	.word	0x2000269c
 8005724:	20000094 	.word	0x20000094
 8005728:	08019850 	.word	0x08019850

0800572c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800572c:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800572e:	f008 fe7f 	bl	800e430 <FreeRTOS_CLIGetOutputBuffer>
 8005732:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005734:	2400      	movs	r4, #0
 8005736:	e01d      	b.n	8005774 <ExecuteSnippet+0x48>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005738:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <ExecuteSnippet+0x78>)
 800573a:	3234      	adds	r2, #52	; 0x34
 800573c:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <ExecuteSnippet+0x7c>)
 800573e:	7818      	ldrb	r0, [r3, #0]
 8005740:	0033      	movs	r3, r6
 8005742:	2100      	movs	r1, #0
 8005744:	f7ff fc36 	bl	8004fb4 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005748:	0030      	movs	r0, r6
 800574a:	f7fa fce5 	bl	8000118 <strlen>
 800574e:	0002      	movs	r2, r0
 8005750:	2100      	movs	r1, #0
 8005752:	0030      	movs	r0, r6
 8005754:	f00f f8e7 	bl	8014926 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005758:	4912      	ldr	r1, [pc, #72]	; (80057a4 <ExecuteSnippet+0x78>)
 800575a:	3134      	adds	r1, #52	; 0x34
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <ExecuteSnippet+0x80>)
 800575e:	00aa      	lsls	r2, r5, #2
 8005760:	1952      	adds	r2, r2, r5
 8005762:	0092      	lsls	r2, r2, #2
 8005764:	189b      	adds	r3, r3, r2
 8005766:	6918      	ldr	r0, [r3, #16]
 8005768:	f7ff ff02 	bl	8005570 <ParseSnippetCommand>
 800576c:	2800      	cmp	r0, #0
 800576e:	d1e3      	bne.n	8005738 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005770:	3401      	adds	r4, #1
 8005772:	b2a4      	uxth	r4, r4
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <ExecuteSnippet+0x80>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	42a3      	cmp	r3, r4
 800577a:	d911      	bls.n	80057a0 <ExecuteSnippet+0x74>
		if(snippets[s].state)								// Check for activated Snippets
 800577c:	0025      	movs	r5, r4
 800577e:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <ExecuteSnippet+0x80>)
 8005780:	00a1      	lsls	r1, r4, #2
 8005782:	1909      	adds	r1, r1, r4
 8005784:	0089      	lsls	r1, r1, #2
 8005786:	1852      	adds	r2, r2, r1
 8005788:	7d13      	ldrb	r3, [r2, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <ExecuteSnippet+0x44>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800578e:	b2e0      	uxtb	r0, r4
 8005790:	f7ff ff30 	bl	80055f4 <CheckSnippetCondition>
 8005794:	2800      	cmp	r0, #0
 8005796:	d0eb      	beq.n	8005770 <ExecuteSnippet+0x44>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <ExecuteSnippet+0x84>)
 800579a:	2220      	movs	r2, #32
 800579c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800579e:	e7db      	b.n	8005758 <ExecuteSnippet+0x2c>
			}
		}
	}
	
	return result;
}
 80057a0:	2000      	movs	r0, #0
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	200015a4 	.word	0x200015a4
 80057a8:	20000958 	.word	0x20000958
 80057ac:	200014a4 	.word	0x200014a4
 80057b0:	20000844 	.word	0x20000844

080057b4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <NVIC_SystemReset+0x14>)
 80057ba:	4a04      	ldr	r2, [pc, #16]	; (80057cc <NVIC_SystemReset+0x18>)
 80057bc:	60da      	str	r2, [r3, #12]
 80057be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	e7fd      	b.n	80057c2 <NVIC_SystemReset+0xe>
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	e000ed00 	.word	0xe000ed00
 80057cc:	05fa0004 	.word	0x05fa0004

080057d0 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80057d0:	2000      	movs	r0, #0
 80057d2:	4770      	bx	lr

080057d4 <resetCommand>:
#endif

/*-----------------------------------------------------------*/

static portBASE_TYPE resetCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d4:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )pcCommandString;
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	NVIC_SystemReset();
 80057d6:	f7ff ffed 	bl	80057b4 <NVIC_SystemReset>
	...

080057dc <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057de:	b083      	sub	sp, #12
 80057e0:	0006      	movs	r6, r0
 80057e2:	0014      	movs	r4, r2
 80057e4:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80057e6:	9501      	str	r5, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 80057e8:	9500      	str	r5, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ea:	aa01      	add	r2, sp, #4
 80057ec:	2101      	movs	r1, #1
 80057ee:	0020      	movs	r0, r4
 80057f0:	f008 fe22 	bl	800e438 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80057f4:	2300      	movs	r3, #0
 80057f6:	56c3      	ldrsb	r3, [r0, r3]
 80057f8:	2b70      	cmp	r3, #112	; 0x70
 80057fa:	d017      	beq.n	800582c <setBaudrateCommand+0x50>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 80057fc:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057fe:	466a      	mov	r2, sp
 8005800:	2102      	movs	r1, #2
 8005802:	0020      	movs	r0, r4
 8005804:	f008 fe18 	bl	800e438 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005808:	f00d fc71 	bl	80130ee <atol>
 800580c:	0004      	movs	r4, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 800580e:	2f68      	cmp	r7, #104	; 0x68
 8005810:	d012      	beq.n	8005838 <setBaudrateCommand+0x5c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 8005812:	0001      	movs	r1, r0
 8005814:	0028      	movs	r0, r5
 8005816:	f008 fbb3 	bl	800df80 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800581a:	490a      	ldr	r1, [pc, #40]	; (8005844 <setBaudrateCommand+0x68>)
 800581c:	002b      	movs	r3, r5
 800581e:	0022      	movs	r2, r4
 8005820:	0030      	movs	r0, r6
 8005822:	f00e fff3 	bl	801480c <sprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005826:	2000      	movs	r0, #0
 8005828:	b003      	add	sp, #12
 800582a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800582c:	3001      	adds	r0, #1
 800582e:	f00d fc5e 	bl	80130ee <atol>
 8005832:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005834:	2700      	movs	r7, #0
 8005836:	e7e2      	b.n	80057fe <setBaudrateCommand+0x22>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <setBaudrateCommand+0x6c>)
 800583a:	2213      	movs	r2, #19
 800583c:	0030      	movs	r0, r6
 800583e:	f00f f99e 	bl	8014b7e <memcpy>
 8005842:	e7f0      	b.n	8005826 <setBaudrateCommand+0x4a>
 8005844:	0801a974 	.word	0x0801a974
 8005848:	0801a960 	.word	0x0801a960

0800584c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800584c:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800584e:	4b04      	ldr	r3, [pc, #16]	; (8005860 <flashsizeCommand+0x14>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	0412      	lsls	r2, r2, #16
 8005854:	0c12      	lsrs	r2, r2, #16
 8005856:	4903      	ldr	r1, [pc, #12]	; (8005864 <flashsizeCommand+0x18>)
 8005858:	f00e ffd8 	bl	801480c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800585c:	2000      	movs	r0, #0
 800585e:	bd10      	pop	{r4, pc}
 8005860:	1ffff7cc 	.word	0x1ffff7cc
 8005864:	0801a99c 	.word	0x0801a99c

08005868 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005868:	b510      	push	{r4, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	0004      	movs	r4, r0
 800586e:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005870:	2300      	movs	r3, #0
 8005872:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005874:	2300      	movs	r3, #0
 8005876:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005878:	aa01      	add	r2, sp, #4
 800587a:	2101      	movs	r1, #1
 800587c:	f008 fddc 	bl	800e438 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005880:	2300      	movs	r3, #0
 8005882:	56c3      	ldrsb	r3, [r0, r3]
 8005884:	3b32      	subs	r3, #50	; 0x32
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d907      	bls.n	800589c <GetReadPrecentageCommand+0x34>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800588c:	490b      	ldr	r1, [pc, #44]	; (80058bc <GetReadPrecentageCommand+0x54>)
 800588e:	2215      	movs	r2, #21
 8005890:	0020      	movs	r0, r4
 8005892:	f00f f974 	bl	8014b7e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005896:	2000      	movs	r0, #0
 8005898:	b002      	add	sp, #8
 800589a:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800589c:	f00d fc27 	bl	80130ee <atol>
 80058a0:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80058a2:	4669      	mov	r1, sp
 80058a4:	f007 f962 	bl	800cb6c <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80058a8:	9800      	ldr	r0, [sp, #0]
 80058aa:	f7fd fa39 	bl	8002d20 <__aeabi_f2d>
 80058ae:	0002      	movs	r2, r0
 80058b0:	000b      	movs	r3, r1
 80058b2:	4903      	ldr	r1, [pc, #12]	; (80058c0 <GetReadPrecentageCommand+0x58>)
 80058b4:	0020      	movs	r0, r4
 80058b6:	f00e ffa9 	bl	801480c <sprintf>
 80058ba:	e7ec      	b.n	8005896 <GetReadPrecentageCommand+0x2e>
 80058bc:	0801a9e0 	.word	0x0801a9e0
 80058c0:	0801a9bc 	.word	0x0801a9bc

080058c4 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058c4:	b510      	push	{r4, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80058d0:	4669      	mov	r1, sp
 80058d2:	a801      	add	r0, sp, #4
 80058d4:	f007 f880 	bl	800c9d8 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80058d8:	a901      	add	r1, sp, #4
 80058da:	0020      	movs	r0, r4
 80058dc:	f00f f947 	bl	8014b6e <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80058e0:	9800      	ldr	r0, [sp, #0]
 80058e2:	f7fd fa1d 	bl	8002d20 <__aeabi_f2d>
 80058e6:	0002      	movs	r2, r0
 80058e8:	000b      	movs	r3, r1
 80058ea:	4903      	ldr	r1, [pc, #12]	; (80058f8 <ReadVrefCommand+0x34>)
 80058ec:	0020      	movs	r0, r4
 80058ee:	f00e ff8d 	bl	801480c <sprintf>
}
 80058f2:	2000      	movs	r0, #0
 80058f4:	b002      	add	sp, #8
 80058f6:	bd10      	pop	{r4, pc}
 80058f8:	0801a9f8 	.word	0x0801a9f8

080058fc <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058fc:	b510      	push	{r4, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005902:	2300      	movs	r3, #0
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005908:	4669      	mov	r1, sp
 800590a:	a801      	add	r0, sp, #4
 800590c:	f007 f864 	bl	800c9d8 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005910:	a901      	add	r1, sp, #4
 8005912:	0020      	movs	r0, r4
 8005914:	f00f f92b 	bl	8014b6e <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005918:	9801      	ldr	r0, [sp, #4]
 800591a:	f7fd fa01 	bl	8002d20 <__aeabi_f2d>
 800591e:	0002      	movs	r2, r0
 8005920:	000b      	movs	r3, r1
 8005922:	4903      	ldr	r1, [pc, #12]	; (8005930 <ReadTempCommand+0x34>)
 8005924:	0020      	movs	r0, r4
 8005926:	f00e ff71 	bl	801480c <sprintf>
}
 800592a:	2000      	movs	r0, #0
 800592c:	b002      	add	sp, #8
 800592e:	bd10      	pop	{r4, pc}
 8005930:	0801aa20 	.word	0x0801aa20

08005934 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	0006      	movs	r6, r0
 800593a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800593c:	2300      	movs	r3, #0
 800593e:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005940:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005942:	2300      	movs	r3, #0
 8005944:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005946:	aa03      	add	r2, sp, #12
 8005948:	2101      	movs	r1, #1
 800594a:	0020      	movs	r0, r4
 800594c:	f008 fd74 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8005950:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005952:	aa02      	add	r2, sp, #8
 8005954:	2102      	movs	r1, #2
 8005956:	0020      	movs	r0, r4
 8005958:	f008 fd6e 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800595c:	0004      	movs	r4, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800595e:	2300      	movs	r3, #0
 8005960:	56eb      	ldrsb	r3, [r5, r3]
 8005962:	3b32      	subs	r3, #50	; 0x32
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d907      	bls.n	800597a <ADCReadCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800596a:	491a      	ldr	r1, [pc, #104]	; (80059d4 <ADCReadCommand+0xa0>)
 800596c:	2215      	movs	r2, #21
 800596e:	0030      	movs	r0, r6
 8005970:	f00f f905 	bl	8014b7e <memcpy>
}
 8005974:	2000      	movs	r0, #0
 8005976:	b004      	add	sp, #16
 8005978:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800597a:	0028      	movs	r0, r5
 800597c:	f00d fbb7 	bl	80130ee <atol>
 8005980:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005982:	4915      	ldr	r1, [pc, #84]	; (80059d8 <ADCReadCommand+0xa4>)
 8005984:	0020      	movs	r0, r4
 8005986:	f7fa fbbd 	bl	8000104 <strcmp>
 800598a:	2800      	cmp	r0, #0
 800598c:	d005      	beq.n	800599a <ADCReadCommand+0x66>
 800598e:	4913      	ldr	r1, [pc, #76]	; (80059dc <ADCReadCommand+0xa8>)
 8005990:	0020      	movs	r0, r4
 8005992:	f7fa fbb7 	bl	8000104 <strcmp>
 8005996:	2800      	cmp	r0, #0
 8005998:	d116      	bne.n	80059c8 <ADCReadCommand+0x94>
			ADCSelectChannel(ADCports,ADC_Side);
 800599a:	4c0f      	ldr	r4, [pc, #60]	; (80059d8 <ADCReadCommand+0xa4>)
 800599c:	0021      	movs	r1, r4
 800599e:	0028      	movs	r0, r5
 80059a0:	f007 f9cc 	bl	800cd3c <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80059a4:	aa01      	add	r2, sp, #4
 80059a6:	0021      	movs	r1, r4
 80059a8:	0028      	movs	r0, r5
 80059aa:	f007 f9f7 	bl	800cd9c <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80059ae:	a901      	add	r1, sp, #4
 80059b0:	0030      	movs	r0, r6
 80059b2:	f00f f8dc 	bl	8014b6e <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80059b6:	9801      	ldr	r0, [sp, #4]
 80059b8:	f7fa fe10 	bl	80005dc <__aeabi_f2uiz>
 80059bc:	b282      	uxth	r2, r0
 80059be:	4908      	ldr	r1, [pc, #32]	; (80059e0 <ADCReadCommand+0xac>)
 80059c0:	0030      	movs	r0, r6
 80059c2:	f00e ff23 	bl	801480c <sprintf>
 80059c6:	e7d5      	b.n	8005974 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059c8:	4906      	ldr	r1, [pc, #24]	; (80059e4 <ADCReadCommand+0xb0>)
 80059ca:	2212      	movs	r2, #18
 80059cc:	0030      	movs	r0, r6
 80059ce:	f00f f8d6 	bl	8014b7e <memcpy>
 80059d2:	e7cf      	b.n	8005974 <ADCReadCommand+0x40>
 80059d4:	0801a9e0 	.word	0x0801a9e0
 80059d8:	0801aa44 	.word	0x0801aa44
 80059dc:	0801aa48 	.word	0x0801aa48
 80059e0:	0801aa50 	.word	0x0801aa50
 80059e4:	0801aa60 	.word	0x0801aa60

080059e8 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	0005      	movs	r5, r0
 80059ee:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80059f4:	4b5e      	ldr	r3, [pc, #376]	; (8005b70 <testportCommand+0x188>)
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	ab02      	add	r3, sp, #8
 80059fa:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059fc:	aa03      	add	r2, sp, #12
 80059fe:	2101      	movs	r1, #1
 8005a00:	f008 fd1a 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8005a04:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005a06:	495b      	ldr	r1, [pc, #364]	; (8005b74 <testportCommand+0x18c>)
 8005a08:	f7fa fb7c 	bl	8000104 <strcmp>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d169      	bne.n	8005ae4 <testportCommand+0xfc>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005a10:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <testportCommand+0x190>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	4a59      	ldr	r2, [pc, #356]	; (8005b7c <testportCommand+0x194>)
 8005a18:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 8005a1a:	2401      	movs	r4, #1
 8005a1c:	e023      	b.n	8005a66 <testportCommand+0x7e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005a1e:	4958      	ldr	r1, [pc, #352]	; (8005b80 <testportCommand+0x198>)
 8005a20:	0022      	movs	r2, r4
 8005a22:	0028      	movs	r0, r5
 8005a24:	f00e fef2 	bl	801480c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a28:	0028      	movs	r0, r5
 8005a2a:	f7fa fb75 	bl	8000118 <strlen>
 8005a2e:	b282      	uxth	r2, r0
 8005a30:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <testportCommand+0x190>)
 8005a32:	7818      	ldrb	r0, [r3, #0]
 8005a34:	2364      	movs	r3, #100	; 0x64
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	3b5a      	subs	r3, #90	; 0x5a
 8005a3a:	0029      	movs	r1, r5
 8005a3c:	f008 fa50 	bl	800dee0 <writePxMutex>
 8005a40:	e03e      	b.n	8005ac0 <testportCommand+0xd8>
					Delay_ms(1);
 8005a42:	2001      	movs	r0, #1
 8005a44:	f00a fad0 	bl	800ffe8 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005a48:	4b4b      	ldr	r3, [pc, #300]	; (8005b78 <testportCommand+0x190>)
 8005a4a:	7819      	ldrb	r1, [r3, #0]
 8005a4c:	3901      	subs	r1, #1
 8005a4e:	1c70      	adds	r0, r6, #1
 8005a50:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <testportCommand+0x19c>)
 8005a52:	004a      	lsls	r2, r1, #1
 8005a54:	1852      	adds	r2, r2, r1
 8005a56:	0192      	lsls	r2, r2, #6
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	5c1b      	ldrb	r3, [r3, r0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <testportCommand+0x5a>
				LastEnter++;
 8005a60:	0006      	movs	r6, r0
		for(ports =1; ports <= NumOfPorts; ports++){
 8005a62:	3401      	adds	r4, #1
 8005a64:	b2e4      	uxtb	r4, r4
 8005a66:	2c05      	cmp	r4, #5
 8005a68:	d845      	bhi.n	8005af6 <testportCommand+0x10e>
			if(PcPort != ports){
 8005a6a:	4b43      	ldr	r3, [pc, #268]	; (8005b78 <testportCommand+0x190>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	d0f7      	beq.n	8005a62 <testportCommand+0x7a>
				WriteVaule[0] =rand();
 8005a72:	f00d fd7b 	bl	801356c <rand>
 8005a76:	466b      	mov	r3, sp
 8005a78:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005a7a:	2364      	movs	r3, #100	; 0x64
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	3b5a      	subs	r3, #90	; 0x5a
 8005a80:	2201      	movs	r2, #1
 8005a82:	a902      	add	r1, sp, #8
 8005a84:	0020      	movs	r0, r4
 8005a86:	f008 fa2b 	bl	800dee0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005a8a:	0020      	movs	r0, r4
 8005a8c:	f008 fa0a 	bl	800dea4 <GetUart>
 8005a90:	6803      	ldr	r3, [r0, #0]
 8005a92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a94:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 8005a96:	466a      	mov	r2, sp
 8005a98:	7a12      	ldrb	r2, [r2, #8]
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d0bf      	beq.n	8005a1e <testportCommand+0x36>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005a9e:	493a      	ldr	r1, [pc, #232]	; (8005b88 <testportCommand+0x1a0>)
 8005aa0:	0022      	movs	r2, r4
 8005aa2:	0028      	movs	r0, r5
 8005aa4:	f00e feb2 	bl	801480c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005aa8:	0028      	movs	r0, r5
 8005aaa:	f7fa fb35 	bl	8000118 <strlen>
 8005aae:	b282      	uxth	r2, r0
 8005ab0:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <testportCommand+0x190>)
 8005ab2:	7818      	ldrb	r0, [r3, #0]
 8005ab4:	2364      	movs	r3, #100	; 0x64
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	3b5a      	subs	r3, #90	; 0x5a
 8005aba:	0029      	movs	r1, r5
 8005abc:	f008 fa10 	bl	800dee0 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005ac0:	4932      	ldr	r1, [pc, #200]	; (8005b8c <testportCommand+0x1a4>)
 8005ac2:	2254      	movs	r2, #84	; 0x54
 8005ac4:	0028      	movs	r0, r5
 8005ac6:	f00f f85a 	bl	8014b7e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005aca:	0028      	movs	r0, r5
 8005acc:	f7fa fb24 	bl	8000118 <strlen>
 8005ad0:	b282      	uxth	r2, r0
 8005ad2:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <testportCommand+0x190>)
 8005ad4:	7818      	ldrb	r0, [r3, #0]
 8005ad6:	2364      	movs	r3, #100	; 0x64
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	3b5a      	subs	r3, #90	; 0x5a
 8005adc:	0029      	movs	r1, r5
 8005ade:	f008 f9ff 	bl	800dee0 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005ae2:	e7b1      	b.n	8005a48 <testportCommand+0x60>
	else if(pcParameterString1[0] == 'p'){
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	56e3      	ldrsb	r3, [r4, r3]
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d007      	beq.n	8005afc <testportCommand+0x114>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005aec:	4928      	ldr	r1, [pc, #160]	; (8005b90 <testportCommand+0x1a8>)
 8005aee:	220f      	movs	r2, #15
 8005af0:	0028      	movs	r0, r5
 8005af2:	f00f f844 	bl	8014b7e <memcpy>
}
 8005af6:	2000      	movs	r0, #0
 8005af8:	b004      	add	sp, #16
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005afc:	1c60      	adds	r0, r4, #1
 8005afe:	f00d faf6 	bl	80130ee <atol>
 8005b02:	0004      	movs	r4, r0
 8005b04:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005b06:	1e73      	subs	r3, r6, #1
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d90b      	bls.n	8005b26 <testportCommand+0x13e>
			result =BOS_ERR_WrongID;
 8005b0e:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 8005b10:	2b66      	cmp	r3, #102	; 0x66
 8005b12:	d027      	beq.n	8005b64 <testportCommand+0x17c>
		else if(result == BOS_ERR_Keyword)
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d1ee      	bne.n	8005af6 <testportCommand+0x10e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	4022      	ands	r2, r4
 8005b1c:	491a      	ldr	r1, [pc, #104]	; (8005b88 <testportCommand+0x1a0>)
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f00e fe74 	bl	801480c <sprintf>
 8005b24:	e7e7      	b.n	8005af6 <testportCommand+0x10e>
				WriteVaule[0] =rand();
 8005b26:	f00d fd21 	bl	801356c <rand>
 8005b2a:	466b      	mov	r3, sp
 8005b2c:	7218      	strb	r0, [r3, #8]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005b2e:	2364      	movs	r3, #100	; 0x64
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	3b32      	subs	r3, #50	; 0x32
 8005b34:	2201      	movs	r2, #1
 8005b36:	a902      	add	r1, sp, #8
 8005b38:	0030      	movs	r0, r6
 8005b3a:	f008 f9d1 	bl	800dee0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f008 f9b0 	bl	800dea4 <GetUart>
 8005b44:	6803      	ldr	r3, [r0, #0]
 8005b46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b48:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 8005b4a:	466a      	mov	r2, sp
 8005b4c:	7a12      	ldrb	r2, [r2, #8]
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d001      	beq.n	8005b56 <testportCommand+0x16e>
				result =BOS_ERR_Keyword;
 8005b52:	2306      	movs	r3, #6
 8005b54:	e7dc      	b.n	8005b10 <testportCommand+0x128>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005b56:	22ff      	movs	r2, #255	; 0xff
 8005b58:	4022      	ands	r2, r4
 8005b5a:	4909      	ldr	r1, [pc, #36]	; (8005b80 <testportCommand+0x198>)
 8005b5c:	0028      	movs	r0, r5
 8005b5e:	f00e fe55 	bl	801480c <sprintf>
 8005b62:	e7c8      	b.n	8005af6 <testportCommand+0x10e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005b64:	490b      	ldr	r1, [pc, #44]	; (8005b94 <testportCommand+0x1ac>)
 8005b66:	221b      	movs	r2, #27
 8005b68:	0028      	movs	r0, r5
 8005b6a:	f00f f808 	bl	8014b7e <memcpy>
 8005b6e:	e7c2      	b.n	8005af6 <testportCommand+0x10e>
 8005b70:	0801ab24 	.word	0x0801ab24
 8005b74:	08019fe0 	.word	0x08019fe0
 8005b78:	20000958 	.word	0x20000958
 8005b7c:	20001700 	.word	0x20001700
 8005b80:	0801aa74 	.word	0x0801aa74
 8005b84:	20001740 	.word	0x20001740
 8005b88:	0801aa90 	.word	0x0801aa90
 8005b8c:	0801aaa4 	.word	0x0801aaa4
 8005b90:	0801ab14 	.word	0x0801ab14
 8005b94:	0801aaf8 	.word	0x0801aaf8

08005b98 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9a:	46c6      	mov	lr, r8
 8005b9c:	b500      	push	{lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	0005      	movs	r5, r0
 8005ba2:	0014      	movs	r4, r2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	2700      	movs	r7, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005ba8:	9601      	str	r6, [sp, #4]
 8005baa:	9600      	str	r6, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bac:	aa01      	add	r2, sp, #4
 8005bae:	2101      	movs	r1, #1
 8005bb0:	0020      	movs	r0, r4
 8005bb2:	f008 fc41 	bl	800e438 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	56c3      	ldrsb	r3, [r0, r3]
 8005bba:	2b70      	cmp	r3, #112	; 0x70
 8005bbc:	d019      	beq.n	8005bf2 <unbridgeCommand+0x5a>
		result =BOS_ERR_WrongParam;
 8005bbe:	2367      	movs	r3, #103	; 0x67
 8005bc0:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bc2:	466a      	mov	r2, sp
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	0020      	movs	r0, r4
 8005bc8:	f008 fc36 	bl	800e438 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bcc:	2300      	movs	r3, #0
 8005bce:	56c3      	ldrsb	r3, [r0, r3]
 8005bd0:	2b70      	cmp	r3, #112	; 0x70
 8005bd2:	d015      	beq.n	8005c00 <unbridgeCommand+0x68>
		result =BOS_ERR_WrongParam;
 8005bd4:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d020      	beq.n	8005c1c <unbridgeCommand+0x84>
	else if(result == BOS_ERR_WrongParam)
 8005bda:	2867      	cmp	r0, #103	; 0x67
 8005bdc:	d025      	beq.n	8005c2a <unbridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005bde:	4916      	ldr	r1, [pc, #88]	; (8005c38 <unbridgeCommand+0xa0>)
 8005be0:	2219      	movs	r2, #25
 8005be2:	0028      	movs	r0, r5
 8005be4:	f00e ffcb 	bl	8014b7e <memcpy>
}
 8005be8:	2000      	movs	r0, #0
 8005bea:	b002      	add	sp, #8
 8005bec:	bc80      	pop	{r7}
 8005bee:	46b8      	mov	r8, r7
 8005bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f00d fa7b 	bl	80130ee <atol>
 8005bf8:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4698      	mov	r8, r3
 8005bfe:	e7e0      	b.n	8005bc2 <unbridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005c00:	3001      	adds	r0, #1
 8005c02:	f00d fa74 	bl	80130ee <atol>
 8005c06:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 8005c08:	4643      	mov	r3, r8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <unbridgeCommand+0x7a>
		result =BOS_ERR_WrongParam;
 8005c0e:	2067      	movs	r0, #103	; 0x67
 8005c10:	e7e3      	b.n	8005bda <unbridgeCommand+0x42>
		result =Unbridge(port1,port2);
 8005c12:	0039      	movs	r1, r7
 8005c14:	0030      	movs	r0, r6
 8005c16:	f7fe fedd 	bl	80049d4 <Unbridge>
 8005c1a:	e7dc      	b.n	8005bd6 <unbridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005c1c:	4907      	ldr	r1, [pc, #28]	; (8005c3c <unbridgeCommand+0xa4>)
 8005c1e:	003b      	movs	r3, r7
 8005c20:	0032      	movs	r2, r6
 8005c22:	0028      	movs	r0, r5
 8005c24:	f00e fdf2 	bl	801480c <sprintf>
 8005c28:	e7de      	b.n	8005be8 <unbridgeCommand+0x50>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c2a:	4905      	ldr	r1, [pc, #20]	; (8005c40 <unbridgeCommand+0xa8>)
 8005c2c:	220f      	movs	r2, #15
 8005c2e:	0028      	movs	r0, r5
 8005c30:	f00e ffa5 	bl	8014b7e <memcpy>
 8005c34:	e7d8      	b.n	8005be8 <unbridgeCommand+0x50>
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	0801ab48 	.word	0x0801ab48
 8005c3c:	0801ab28 	.word	0x0801ab28
 8005c40:	0801ab14 	.word	0x0801ab14

08005c44 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	46c6      	mov	lr, r8
 8005c48:	b500      	push	{lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	0005      	movs	r5, r0
 8005c4e:	0014      	movs	r4, r2
 8005c50:	2600      	movs	r6, #0
 8005c52:	2700      	movs	r7, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005c54:	9601      	str	r6, [sp, #4]
 8005c56:	9600      	str	r6, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c58:	aa01      	add	r2, sp, #4
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	0020      	movs	r0, r4
 8005c5e:	f008 fbeb 	bl	800e438 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005c62:	2300      	movs	r3, #0
 8005c64:	56c3      	ldrsb	r3, [r0, r3]
 8005c66:	2b70      	cmp	r3, #112	; 0x70
 8005c68:	d019      	beq.n	8005c9e <bridgeCommand+0x5a>
		result =BOS_ERR_WrongParam;
 8005c6a:	2367      	movs	r3, #103	; 0x67
 8005c6c:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005c6e:	466a      	mov	r2, sp
 8005c70:	2102      	movs	r1, #2
 8005c72:	0020      	movs	r0, r4
 8005c74:	f008 fbe0 	bl	800e438 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005c78:	2300      	movs	r3, #0
 8005c7a:	56c3      	ldrsb	r3, [r0, r3]
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d015      	beq.n	8005cac <bridgeCommand+0x68>
		result =BOS_ERR_WrongParam;
 8005c80:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d020      	beq.n	8005cc8 <bridgeCommand+0x84>
	else if(result == BOS_ERR_WrongParam)
 8005c86:	2867      	cmp	r0, #103	; 0x67
 8005c88:	d025      	beq.n	8005cd6 <bridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005c8a:	4916      	ldr	r1, [pc, #88]	; (8005ce4 <bridgeCommand+0xa0>)
 8005c8c:	2217      	movs	r2, #23
 8005c8e:	0028      	movs	r0, r5
 8005c90:	f00e ff75 	bl	8014b7e <memcpy>
}
 8005c94:	2000      	movs	r0, #0
 8005c96:	b002      	add	sp, #8
 8005c98:	bc80      	pop	{r7}
 8005c9a:	46b8      	mov	r8, r7
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f00d fa25 	bl	80130ee <atol>
 8005ca4:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4698      	mov	r8, r3
 8005caa:	e7e0      	b.n	8005c6e <bridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005cac:	3001      	adds	r0, #1
 8005cae:	f00d fa1e 	bl	80130ee <atol>
 8005cb2:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <bridgeCommand+0x7a>
		result =BOS_ERR_WrongParam;
 8005cba:	2067      	movs	r0, #103	; 0x67
 8005cbc:	e7e3      	b.n	8005c86 <bridgeCommand+0x42>
		result =Bridge(port1,port2);
 8005cbe:	0039      	movs	r1, r7
 8005cc0:	0030      	movs	r0, r6
 8005cc2:	f7fe fe73 	bl	80049ac <Bridge>
 8005cc6:	e7dc      	b.n	8005c82 <bridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005cc8:	4907      	ldr	r1, [pc, #28]	; (8005ce8 <bridgeCommand+0xa4>)
 8005cca:	003b      	movs	r3, r7
 8005ccc:	0032      	movs	r2, r6
 8005cce:	0028      	movs	r0, r5
 8005cd0:	f00e fd9c 	bl	801480c <sprintf>
 8005cd4:	e7de      	b.n	8005c94 <bridgeCommand+0x50>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005cd6:	4905      	ldr	r1, [pc, #20]	; (8005cec <bridgeCommand+0xa8>)
 8005cd8:	220f      	movs	r2, #15
 8005cda:	0028      	movs	r0, r5
 8005cdc:	f00e ff4f 	bl	8014b7e <memcpy>
 8005ce0:	e7d8      	b.n	8005c94 <bridgeCommand+0x50>
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	0801ab88 	.word	0x0801ab88
 8005ce8:	0801ab64 	.word	0x0801ab64
 8005cec:	0801ab14 	.word	0x0801ab14

08005cf0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf2:	46d6      	mov	lr, sl
 8005cf4:	464f      	mov	r7, r9
 8005cf6:	4646      	mov	r6, r8
 8005cf8:	b5c0      	push	{r6, r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	0005      	movs	r5, r0
 8005cfe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d04:	aa01      	add	r2, sp, #4
 8005d06:	2101      	movs	r1, #1
 8005d08:	f008 fb96 	bl	800e438 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d0c:	f00d f9e9 	bl	80130e2 <atoi>
 8005d10:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	d049      	beq.n	8005daa <delSnipCommand+0xba>
 8005d16:	4b2f      	ldr	r3, [pc, #188]	; (8005dd4 <delSnipCommand+0xe4>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d201      	bcs.n	8005d22 <delSnipCommand+0x32>
		result =BOS_ERROR;
 8005d1e:	23ff      	movs	r3, #255	; 0xff
 8005d20:	e044      	b.n	8005dac <delSnipCommand+0xbc>
		snippets[index - 1].cond.conditionType =0;
 8005d22:	26ff      	movs	r6, #255	; 0xff
 8005d24:	4006      	ands	r6, r0
 8005d26:	3e01      	subs	r6, #1
 8005d28:	4a2b      	ldr	r2, [pc, #172]	; (8005dd8 <delSnipCommand+0xe8>)
 8005d2a:	00b3      	lsls	r3, r6, #2
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	199b      	adds	r3, r3, r6
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	2100      	movs	r1, #0
 8005d34:	468a      	mov	sl, r1
 8005d36:	4690      	mov	r8, r2
 8005d38:	5499      	strb	r1, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	199f      	adds	r7, r3, r6
 8005d3e:	00bf      	lsls	r7, r7, #2
 8005d40:	4447      	add	r7, r8
 8005d42:	7079      	strb	r1, [r7, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005d44:	1cb8      	adds	r0, r7, #2
 8005d46:	2204      	movs	r2, #4
 8005d48:	f00e fded 	bl	8014926 <memset>
		snippets[index - 1].state = false;
 8005d4c:	4653      	mov	r3, sl
 8005d4e:	743b      	strb	r3, [r7, #16]
		free(snippets[index - 1].cmd);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f00d f9dd 	bl	8013110 <free>
		snippets[index - 1].cmd = NULL;
 8005d56:	4652      	mov	r2, sl
 8005d58:	60fa      	str	r2, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005d5a:	e001      	b.n	8005d60 <delSnipCommand+0x70>
 8005d5c:	3401      	adds	r4, #1
 8005d5e:	b2e4      	uxtb	r4, r4
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <delSnipCommand+0xe4>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d919      	bls.n	8005d9c <delSnipCommand+0xac>
			if(snippets[s].cond.conditionType){
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <delSnipCommand+0xe8>)
 8005d6a:	00a3      	lsls	r3, r4, #2
 8005d6c:	191b      	adds	r3, r3, r4
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	5c9b      	ldrb	r3, [r3, r2]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f2      	beq.n	8005d5c <delSnipCommand+0x6c>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005d76:	1e63      	subs	r3, r4, #1
 8005d78:	0098      	lsls	r0, r3, #2
 8005d7a:	18c0      	adds	r0, r0, r3
 8005d7c:	0080      	lsls	r0, r0, #2
 8005d7e:	1880      	adds	r0, r0, r2
 8005d80:	00a6      	lsls	r6, r4, #2
 8005d82:	1936      	adds	r6, r6, r4
 8005d84:	00b6      	lsls	r6, r6, #2
 8005d86:	18b6      	adds	r6, r6, r2
 8005d88:	2214      	movs	r2, #20
 8005d8a:	0031      	movs	r1, r6
 8005d8c:	f00e fef7 	bl	8014b7e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005d90:	2214      	movs	r2, #20
 8005d92:	2100      	movs	r1, #0
 8005d94:	0030      	movs	r0, r6
 8005d96:	f00e fdc6 	bl	8014926 <memset>
 8005d9a:	e7df      	b.n	8005d5c <delSnipCommand+0x6c>
		--numOfRecordedSnippets;
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <delSnipCommand+0xe4>)
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005da2:	f004 fcf9 	bl	800a798 <SaveToRO>
	BOS_Status result =BOS_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <delSnipCommand+0xbc>
		result =BOS_ERROR;
 8005daa:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <delSnipCommand+0xd8>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005db0:	490a      	ldr	r1, [pc, #40]	; (8005ddc <delSnipCommand+0xec>)
 8005db2:	2236      	movs	r2, #54	; 0x36
 8005db4:	0028      	movs	r0, r5
 8005db6:	f00e fee2 	bl	8014b7e <memcpy>
}
 8005dba:	2000      	movs	r0, #0
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bce0      	pop	{r5, r6, r7}
 8005dc0:	46ba      	mov	sl, r7
 8005dc2:	46b1      	mov	r9, r6
 8005dc4:	46a8      	mov	r8, r5
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005dc8:	4905      	ldr	r1, [pc, #20]	; (8005de0 <delSnipCommand+0xf0>)
 8005dca:	2223      	movs	r2, #35	; 0x23
 8005dcc:	0028      	movs	r0, r5
 8005dce:	f00e fed6 	bl	8014b7e <memcpy>
 8005dd2:	e7f2      	b.n	8005dba <delSnipCommand+0xca>
 8005dd4:	200014a4 	.word	0x200014a4
 8005dd8:	200014a8 	.word	0x200014a8
 8005ddc:	0801aba0 	.word	0x0801aba0
 8005de0:	0801abd8 	.word	0x0801abd8

08005de4 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de4:	b510      	push	{r4, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	0004      	movs	r4, r0
 8005dea:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005df0:	aa01      	add	r2, sp, #4
 8005df2:	2101      	movs	r1, #1
 8005df4:	f008 fb20 	bl	800e438 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005df8:	f00d f973 	bl	80130e2 <atoi>
 8005dfc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <pauseSnipCommand+0x26>
 8005e02:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <pauseSnipCommand+0x5c>)
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d207      	bcs.n	8005e1a <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e0a:	490e      	ldr	r1, [pc, #56]	; (8005e44 <pauseSnipCommand+0x60>)
 8005e0c:	2223      	movs	r2, #35	; 0x23
 8005e0e:	0020      	movs	r0, r4
 8005e10:	f00e feb5 	bl	8014b7e <memcpy>
}
 8005e14:	2000      	movs	r0, #0
 8005e16:	b002      	add	sp, #8
 8005e18:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005e1a:	23ff      	movs	r3, #255	; 0xff
 8005e1c:	4003      	ands	r3, r0
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <pauseSnipCommand+0x64>)
 8005e22:	0099      	lsls	r1, r3, #2
 8005e24:	18cb      	adds	r3, r1, r3
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	18d2      	adds	r2, r2, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	7413      	strb	r3, [r2, #16]
		SaveToRO();
 8005e2e:	f004 fcb3 	bl	800a798 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005e32:	4906      	ldr	r1, [pc, #24]	; (8005e4c <pauseSnipCommand+0x68>)
 8005e34:	2235      	movs	r2, #53	; 0x35
 8005e36:	0020      	movs	r0, r4
 8005e38:	f00e fea1 	bl	8014b7e <memcpy>
 8005e3c:	e7ea      	b.n	8005e14 <pauseSnipCommand+0x30>
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	200014a4 	.word	0x200014a4
 8005e44:	0801abd8 	.word	0x0801abd8
 8005e48:	200014a8 	.word	0x200014a8
 8005e4c:	0801abfc 	.word	0x0801abfc

08005e50 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e50:	b510      	push	{r4, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	0004      	movs	r4, r0
 8005e56:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e5c:	aa01      	add	r2, sp, #4
 8005e5e:	2101      	movs	r1, #1
 8005e60:	f008 faea 	bl	800e438 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005e64:	f00d f93d 	bl	80130e2 <atoi>
 8005e68:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <actSnipCommand+0x26>
 8005e6e:	4a0f      	ldr	r2, [pc, #60]	; (8005eac <actSnipCommand+0x5c>)
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d207      	bcs.n	8005e86 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e76:	490e      	ldr	r1, [pc, #56]	; (8005eb0 <actSnipCommand+0x60>)
 8005e78:	2223      	movs	r2, #35	; 0x23
 8005e7a:	0020      	movs	r0, r4
 8005e7c:	f00e fe7f 	bl	8014b7e <memcpy>
}
 8005e80:	2000      	movs	r0, #0
 8005e82:	b002      	add	sp, #8
 8005e84:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005e86:	23ff      	movs	r3, #255	; 0xff
 8005e88:	4003      	ands	r3, r0
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <actSnipCommand+0x64>)
 8005e8e:	0099      	lsls	r1, r3, #2
 8005e90:	18cb      	adds	r3, r1, r3
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	18d2      	adds	r2, r2, r3
 8005e96:	2301      	movs	r3, #1
 8005e98:	7413      	strb	r3, [r2, #16]
		SaveToRO();
 8005e9a:	f004 fc7d 	bl	800a798 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005e9e:	4906      	ldr	r1, [pc, #24]	; (8005eb8 <actSnipCommand+0x68>)
 8005ea0:	2238      	movs	r2, #56	; 0x38
 8005ea2:	0020      	movs	r0, r4
 8005ea4:	f00e fe6b 	bl	8014b7e <memcpy>
 8005ea8:	e7ea      	b.n	8005e80 <actSnipCommand+0x30>
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	200014a4 	.word	0x200014a4
 8005eb0:	0801abd8 	.word	0x0801abd8
 8005eb4:	200014a8 	.word	0x200014a8
 8005eb8:	0801ac34 	.word	0x0801ac34

08005ebc <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ebe:	46d6      	mov	lr, sl
 8005ec0:	464f      	mov	r7, r9
 8005ec2:	4646      	mov	r6, r8
 8005ec4:	b5c0      	push	{r6, r7, lr}
 8005ec6:	b08a      	sub	sp, #40	; 0x28
 8005ec8:	0005      	movs	r5, r0
	char status[2][7] ={"Paused", "Active"};
 8005eca:	aa06      	add	r2, sp, #24
 8005ecc:	4b79      	ldr	r3, [pc, #484]	; (80060b4 <snipCommand+0x1f8>)
 8005ece:	cb51      	ldmia	r3!, {r0, r4, r6}
 8005ed0:	c251      	stmia	r2!, {r0, r4, r6}
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005ed6:	4978      	ldr	r1, [pc, #480]	; (80060b8 <snipCommand+0x1fc>)
 8005ed8:	4b78      	ldr	r3, [pc, #480]	; (80060bc <snipCommand+0x200>)
 8005eda:	7818      	ldrb	r0, [r3, #0]
 8005edc:	2301      	movs	r3, #1
 8005ede:	425b      	negs	r3, r3
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	3333      	adds	r3, #51	; 0x33
 8005ee4:	2237      	movs	r2, #55	; 0x37
 8005ee6:	f007 fffb 	bl	800dee0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005eea:	2600      	movs	r6, #0
	uint8_t count =1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005ef0:	e093      	b.n	800601a <snipCommand+0x15e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005ef2:	0013      	movs	r3, r2
 8005ef4:	00b2      	lsls	r2, r6, #2
 8005ef6:	1992      	adds	r2, r2, r6
 8005ef8:	0092      	lsls	r2, r2, #2
 8005efa:	189b      	adds	r3, r3, r2
 8005efc:	7c1a      	ldrb	r2, [r3, #16]
 8005efe:	00d3      	lsls	r3, r2, #3
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	aa06      	add	r2, sp, #24
 8005f04:	4694      	mov	ip, r2
 8005f06:	4463      	add	r3, ip
 8005f08:	496d      	ldr	r1, [pc, #436]	; (80060c0 <snipCommand+0x204>)
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	f00e fc7d 	bl	801480c <sprintf>
 8005f12:	e08f      	b.n	8006034 <snipCommand+0x178>
				switch(snippets[s].cond.buffer1[1]){
 8005f14:	4b6b      	ldr	r3, [pc, #428]	; (80060c4 <snipCommand+0x208>)
 8005f16:	00a2      	lsls	r2, r4, #2
 8005f18:	1912      	adds	r2, r2, r4
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	189b      	adds	r3, r3, r2
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b0b      	cmp	r3, #11
 8005f22:	d813      	bhi.n	8005f4c <snipCommand+0x90>
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d233      	bcs.n	8005f90 <snipCommand+0xd4>
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d023      	beq.n	8005f74 <snipCommand+0xb8>
 8005f2c:	2b06      	cmp	r3, #6
 8005f2e:	d14e      	bne.n	8005fce <snipCommand+0x112>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f30:	4a64      	ldr	r2, [pc, #400]	; (80060c4 <snipCommand+0x208>)
 8005f32:	00a3      	lsls	r3, r4, #2
 8005f34:	191b      	adds	r3, r3, r4
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	18d2      	adds	r2, r2, r3
 8005f3a:	7893      	ldrb	r3, [r2, #2]
 8005f3c:	4962      	ldr	r1, [pc, #392]	; (80060c8 <snipCommand+0x20c>)
 8005f3e:	68d2      	ldr	r2, [r2, #12]
 8005f40:	9200      	str	r2, [sp, #0]
 8005f42:	002a      	movs	r2, r5
 8005f44:	0028      	movs	r0, r5
 8005f46:	f00e fc61 	bl	801480c <sprintf>
						break;
 8005f4a:	e040      	b.n	8005fce <snipCommand+0x112>
 8005f4c:	3b0c      	subs	r3, #12
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d83c      	bhi.n	8005fce <snipCommand+0x112>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f54:	4a5b      	ldr	r2, [pc, #364]	; (80060c4 <snipCommand+0x208>)
 8005f56:	00a3      	lsls	r3, r4, #2
 8005f58:	191b      	adds	r3, r3, r4
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	18d2      	adds	r2, r2, r3
 8005f5e:	7893      	ldrb	r3, [r2, #2]
 8005f60:	7910      	ldrb	r0, [r2, #4]
 8005f62:	495a      	ldr	r1, [pc, #360]	; (80060cc <snipCommand+0x210>)
 8005f64:	68d2      	ldr	r2, [r2, #12]
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9000      	str	r0, [sp, #0]
 8005f6a:	002a      	movs	r2, r5
 8005f6c:	0028      	movs	r0, r5
 8005f6e:	f00e fc4d 	bl	801480c <sprintf>
						break;
 8005f72:	e02c      	b.n	8005fce <snipCommand+0x112>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f74:	4a53      	ldr	r2, [pc, #332]	; (80060c4 <snipCommand+0x208>)
 8005f76:	00a3      	lsls	r3, r4, #2
 8005f78:	191b      	adds	r3, r3, r4
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	18d2      	adds	r2, r2, r3
 8005f7e:	7893      	ldrb	r3, [r2, #2]
 8005f80:	4953      	ldr	r1, [pc, #332]	; (80060d0 <snipCommand+0x214>)
 8005f82:	68d2      	ldr	r2, [r2, #12]
 8005f84:	9200      	str	r2, [sp, #0]
 8005f86:	002a      	movs	r2, r5
 8005f88:	0028      	movs	r0, r5
 8005f8a:	f00e fc3f 	bl	801480c <sprintf>
						break;
 8005f8e:	e01e      	b.n	8005fce <snipCommand+0x112>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f90:	4a4c      	ldr	r2, [pc, #304]	; (80060c4 <snipCommand+0x208>)
 8005f92:	00a3      	lsls	r3, r4, #2
 8005f94:	191b      	adds	r3, r3, r4
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	18d2      	adds	r2, r2, r3
 8005f9a:	7893      	ldrb	r3, [r2, #2]
 8005f9c:	7910      	ldrb	r0, [r2, #4]
 8005f9e:	494d      	ldr	r1, [pc, #308]	; (80060d4 <snipCommand+0x218>)
 8005fa0:	68d2      	ldr	r2, [r2, #12]
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	9000      	str	r0, [sp, #0]
 8005fa6:	002a      	movs	r2, r5
 8005fa8:	0028      	movs	r0, r5
 8005faa:	f00e fc2f 	bl	801480c <sprintf>
						break;
 8005fae:	e00e      	b.n	8005fce <snipCommand+0x112>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005fb0:	4f49      	ldr	r7, [pc, #292]	; (80060d8 <snipCommand+0x21c>)
 8005fb2:	494a      	ldr	r1, [pc, #296]	; (80060dc <snipCommand+0x220>)
 8005fb4:	003b      	movs	r3, r7
 8005fb6:	002a      	movs	r2, r5
 8005fb8:	0028      	movs	r0, r5
 8005fba:	f00e fc27 	bl	801480c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005fbe:	0038      	movs	r0, r7
 8005fc0:	f7fa f8aa 	bl	8000118 <strlen>
 8005fc4:	0002      	movs	r2, r0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	0038      	movs	r0, r7
 8005fca:	f00e fcac 	bl	8014926 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005fce:	4942      	ldr	r1, [pc, #264]	; (80060d8 <snipCommand+0x21c>)
 8005fd0:	4b3c      	ldr	r3, [pc, #240]	; (80060c4 <snipCommand+0x208>)
 8005fd2:	00a2      	lsls	r2, r4, #2
 8005fd4:	1912      	adds	r2, r2, r4
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	189b      	adds	r3, r3, r2
 8005fda:	68d8      	ldr	r0, [r3, #12]
 8005fdc:	f7ff fac8 	bl	8005570 <ParseSnippetCommand>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <snipCommand+0xf4>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	f7fa f897 	bl	8000118 <strlen>
 8005fea:	1828      	adds	r0, r5, r0
 8005fec:	493c      	ldr	r1, [pc, #240]	; (80060e0 <snipCommand+0x224>)
 8005fee:	220c      	movs	r2, #12
 8005ff0:	f00e fdc5 	bl	8014b7e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	f7fa f88f 	bl	8000118 <strlen>
 8005ffa:	b282      	uxth	r2, r0
 8005ffc:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <snipCommand+0x200>)
 8005ffe:	7818      	ldrb	r0, [r3, #0]
 8006000:	2301      	movs	r3, #1
 8006002:	425b      	negs	r3, r3
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	3333      	adds	r3, #51	; 0x33
 8006008:	0029      	movs	r1, r5
 800600a:	f007 ff69 	bl	800dee0 <writePxMutex>
		++count;
 800600e:	4643      	mov	r3, r8
 8006010:	3301      	adds	r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006016:	3601      	adds	r6, #1
 8006018:	b2f6      	uxtb	r6, r6
 800601a:	4b32      	ldr	r3, [pc, #200]	; (80060e4 <snipCommand+0x228>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	42b3      	cmp	r3, r6
 8006020:	d93c      	bls.n	800609c <snipCommand+0x1e0>
		if(snippets[s].cond.conditionType)
 8006022:	0034      	movs	r4, r6
 8006024:	4a27      	ldr	r2, [pc, #156]	; (80060c4 <snipCommand+0x208>)
 8006026:	00b3      	lsls	r3, r6, #2
 8006028:	199b      	adds	r3, r3, r6
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	5c9b      	ldrb	r3, [r3, r2]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d000      	beq.n	8006034 <snipCommand+0x178>
 8006032:	e75e      	b.n	8005ef2 <snipCommand+0x36>
		switch(snippets[s].cond.conditionType){
 8006034:	4a23      	ldr	r2, [pc, #140]	; (80060c4 <snipCommand+0x208>)
 8006036:	00a3      	lsls	r3, r4, #2
 8006038:	191b      	adds	r3, r3, r4
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	5c9b      	ldrb	r3, [r3, r2]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d100      	bne.n	8006044 <snipCommand+0x188>
 8006042:	e767      	b.n	8005f14 <snipCommand+0x58>
 8006044:	2b03      	cmp	r3, #3
 8006046:	d1c2      	bne.n	8005fce <snipCommand+0x112>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8006048:	00a7      	lsls	r7, r4, #2
 800604a:	193f      	adds	r7, r7, r4
 800604c:	00bf      	lsls	r7, r7, #2
 800604e:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <snipCommand+0x208>)
 8006050:	18ff      	adds	r7, r7, r3
 8006052:	1db9      	adds	r1, r7, #6
 8006054:	2204      	movs	r2, #4
 8006056:	a805      	add	r0, sp, #20
 8006058:	f00e fd91 	bl	8014b7e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 800605c:	78f9      	ldrb	r1, [r7, #3]
 800605e:	3901      	subs	r1, #1
 8006060:	787b      	ldrb	r3, [r7, #1]
 8006062:	3b01      	subs	r3, #1
 8006064:	4813      	ldr	r0, [pc, #76]	; (80060b4 <snipCommand+0x1f8>)
 8006066:	3010      	adds	r0, #16
 8006068:	005a      	lsls	r2, r3, #1
 800606a:	18d3      	adds	r3, r2, r3
 800606c:	4681      	mov	r9, r0
 800606e:	4499      	add	r9, r3
 8006070:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <snipCommand+0x22c>)
 8006072:	004a      	lsls	r2, r1, #1
 8006074:	1852      	adds	r2, r2, r1
 8006076:	0092      	lsls	r2, r2, #2
 8006078:	189b      	adds	r3, r3, r2
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	469a      	mov	sl, r3
 800607e:	4f1b      	ldr	r7, [pc, #108]	; (80060ec <snipCommand+0x230>)
 8006080:	9805      	ldr	r0, [sp, #20]
 8006082:	f7fc fe4d 	bl	8002d20 <__aeabi_f2d>
 8006086:	9002      	str	r0, [sp, #8]
 8006088:	9103      	str	r1, [sp, #12]
 800608a:	464b      	mov	r3, r9
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4653      	mov	r3, sl
 8006090:	002a      	movs	r2, r5
 8006092:	0039      	movs	r1, r7
 8006094:	0028      	movs	r0, r5
 8006096:	f00e fbb9 	bl	801480c <sprintf>
				break;
 800609a:	e798      	b.n	8005fce <snipCommand+0x112>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 800609c:	4914      	ldr	r1, [pc, #80]	; (80060f0 <snipCommand+0x234>)
 800609e:	22b5      	movs	r2, #181	; 0xb5
 80060a0:	0028      	movs	r0, r5
 80060a2:	f00e fd6c 	bl	8014b7e <memcpy>
}
 80060a6:	2000      	movs	r0, #0
 80060a8:	b00a      	add	sp, #40	; 0x28
 80060aa:	bce0      	pop	{r5, r6, r7}
 80060ac:	46ba      	mov	sl, r7
 80060ae:	46b1      	mov	r9, r6
 80060b0:	46a8      	mov	r8, r5
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b4:	08019890 	.word	0x08019890
 80060b8:	0801ac6c 	.word	0x0801ac6c
 80060bc:	20000958 	.word	0x20000958
 80060c0:	0801aca4 	.word	0x0801aca4
 80060c4:	200014a8 	.word	0x200014a8
 80060c8:	0801acc4 	.word	0x0801acc4
 80060cc:	0801acf4 	.word	0x0801acf4
 80060d0:	0801acb0 	.word	0x0801acb0
 80060d4:	0801acdc 	.word	0x0801acdc
 80060d8:	2000160c 	.word	0x2000160c
 80060dc:	0801ad20 	.word	0x0801ad20
 80060e0:	0801ad28 	.word	0x0801ad28
 80060e4:	200014a4 	.word	0x200014a4
 80060e8:	20000094 	.word	0x20000094
 80060ec:	0801ad10 	.word	0x0801ad10
 80060f0:	0801ad34 	.word	0x0801ad34

080060f4 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060f4:	b510      	push	{r4, lr}
 80060f6:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 80060f8:	f009 ff8a 	bl	8010010 <HAL_GetDEVID>
	switch(dev){
 80060fc:	0403      	lsls	r3, r0, #16
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	4a1a      	ldr	r2, [pc, #104]	; (800616c <idcodeCommand+0x78>)
 8006102:	4694      	mov	ip, r2
 8006104:	4463      	add	r3, ip
 8006106:	2b08      	cmp	r3, #8
 8006108:	d82a      	bhi.n	8006160 <idcodeCommand+0x6c>
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a18      	ldr	r2, [pc, #96]	; (8006170 <idcodeCommand+0x7c>)
 800610e:	58d3      	ldr	r3, [r2, r3]
 8006110:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <idcodeCommand+0x80>)
 8006114:	4918      	ldr	r1, [pc, #96]	; (8006178 <idcodeCommand+0x84>)
 8006116:	0020      	movs	r0, r4
 8006118:	f00e fb78 	bl	801480c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800611c:	f009 ff72 	bl	8010004 <HAL_GetREVID>
 8006120:	0b03      	lsrs	r3, r0, #12
 8006122:	4916      	ldr	r1, [pc, #88]	; (800617c <idcodeCommand+0x88>)
 8006124:	0022      	movs	r2, r4
 8006126:	0020      	movs	r0, r4
 8006128:	f00e fb70 	bl	801480c <sprintf>
}
 800612c:	2000      	movs	r0, #0
 800612e:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8006130:	4a13      	ldr	r2, [pc, #76]	; (8006180 <idcodeCommand+0x8c>)
 8006132:	4911      	ldr	r1, [pc, #68]	; (8006178 <idcodeCommand+0x84>)
 8006134:	0020      	movs	r0, r4
 8006136:	f00e fb69 	bl	801480c <sprintf>
			break;
 800613a:	e7ef      	b.n	800611c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800613c:	4a11      	ldr	r2, [pc, #68]	; (8006184 <idcodeCommand+0x90>)
 800613e:	490e      	ldr	r1, [pc, #56]	; (8006178 <idcodeCommand+0x84>)
 8006140:	0020      	movs	r0, r4
 8006142:	f00e fb63 	bl	801480c <sprintf>
			break;
 8006146:	e7e9      	b.n	800611c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8006148:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <idcodeCommand+0x94>)
 800614a:	490b      	ldr	r1, [pc, #44]	; (8006178 <idcodeCommand+0x84>)
 800614c:	0020      	movs	r0, r4
 800614e:	f00e fb5d 	bl	801480c <sprintf>
			break;
 8006152:	e7e3      	b.n	800611c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <idcodeCommand+0x98>)
 8006156:	4908      	ldr	r1, [pc, #32]	; (8006178 <idcodeCommand+0x84>)
 8006158:	0020      	movs	r0, r4
 800615a:	f00e fb57 	bl	801480c <sprintf>
			break;
 800615e:	e7dd      	b.n	800611c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006160:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <idcodeCommand+0x9c>)
 8006162:	4905      	ldr	r1, [pc, #20]	; (8006178 <idcodeCommand+0x84>)
 8006164:	0020      	movs	r0, r4
 8006166:	f00e fb51 	bl	801480c <sprintf>
			break;
 800616a:	e7d7      	b.n	800611c <idcodeCommand+0x28>
 800616c:	fffffbc0 	.word	0xfffffbc0
 8006170:	0801986c 	.word	0x0801986c
 8006174:	0801adec 	.word	0x0801adec
 8006178:	0801adf8 	.word	0x0801adf8
 800617c:	0801ae44 	.word	0x0801ae44
 8006180:	0801ae0c 	.word	0x0801ae0c
 8006184:	0801ae18 	.word	0x0801ae18
 8006188:	0801ae24 	.word	0x0801ae24
 800618c:	0801ae30 	.word	0x0801ae30
 8006190:	0801ae3c 	.word	0x0801ae3c

08006194 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8006198:	490e      	ldr	r1, [pc, #56]	; (80061d4 <uuidCommand+0x40>)
 800619a:	220e      	movs	r2, #14
 800619c:	f00e fcef 	bl	8014b7e <memcpy>
	for(uint8_t i =0; i < 3; i++){
 80061a0:	2400      	movs	r4, #0
 80061a2:	e00a      	b.n	80061ba <uuidCommand+0x26>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <uuidCommand+0x44>)
 80061a6:	18e3      	adds	r3, r4, r3
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	490b      	ldr	r1, [pc, #44]	; (80061dc <uuidCommand+0x48>)
 80061ae:	002a      	movs	r2, r5
 80061b0:	0028      	movs	r0, r5
 80061b2:	f00e fb2b 	bl	801480c <sprintf>
	for(uint8_t i =0; i < 3; i++){
 80061b6:	3401      	adds	r4, #1
 80061b8:	b2e4      	uxtb	r4, r4
 80061ba:	2c02      	cmp	r4, #2
 80061bc:	d9f2      	bls.n	80061a4 <uuidCommand+0x10>
	strcat((char* )pcWriteBuffer,"\r\n");
 80061be:	0028      	movs	r0, r5
 80061c0:	f7f9 ffaa 	bl	8000118 <strlen>
 80061c4:	1828      	adds	r0, r5, r0
 80061c6:	4906      	ldr	r1, [pc, #24]	; (80061e0 <uuidCommand+0x4c>)
 80061c8:	2203      	movs	r2, #3
 80061ca:	f00e fcd8 	bl	8014b7e <memcpy>
}
 80061ce:	2000      	movs	r0, #0
 80061d0:	bd70      	pop	{r4, r5, r6, pc}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	0801ae5c 	.word	0x0801ae5c
 80061d8:	07fffdeb 	.word	0x07fffdeb
 80061dc:	0801ae6c 	.word	0x0801ae6c
 80061e0:	0801c3e0 	.word	0x0801c3e0

080061e4 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	0004      	movs	r4, r0
	GetTimeDate();
 80061ea:	f007 fbe3 	bl	800d9b4 <GetTimeDate>
	if(BOS.hourformat == 24)
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <timeCommand+0x78>)
 80061f0:	7b5b      	ldrb	r3, [r3, #13]
 80061f2:	2b18      	cmp	r3, #24
 80061f4:	d004      	beq.n	8006200 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d00e      	beq.n	8006218 <timeCommand+0x34>
}
 80061fa:	2000      	movs	r0, #0
 80061fc:	b004      	add	sp, #16
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8006200:	4916      	ldr	r1, [pc, #88]	; (800625c <timeCommand+0x78>)
 8006202:	7c8a      	ldrb	r2, [r1, #18]
 8006204:	7c4b      	ldrb	r3, [r1, #17]
 8006206:	7c08      	ldrb	r0, [r1, #16]
 8006208:	89cd      	ldrh	r5, [r1, #14]
 800620a:	4915      	ldr	r1, [pc, #84]	; (8006260 <timeCommand+0x7c>)
 800620c:	9501      	str	r5, [sp, #4]
 800620e:	9000      	str	r0, [sp, #0]
 8006210:	0020      	movs	r0, r4
 8006212:	f00e fafb 	bl	801480c <sprintf>
 8006216:	e7f0      	b.n	80061fa <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8006218:	4b10      	ldr	r3, [pc, #64]	; (800625c <timeCommand+0x78>)
 800621a:	7cdb      	ldrb	r3, [r3, #19]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d00f      	beq.n	8006240 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8006220:	2b02      	cmp	r3, #2
 8006222:	d1ea      	bne.n	80061fa <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8006224:	490d      	ldr	r1, [pc, #52]	; (800625c <timeCommand+0x78>)
 8006226:	7c8a      	ldrb	r2, [r1, #18]
 8006228:	7c4b      	ldrb	r3, [r1, #17]
 800622a:	7c08      	ldrb	r0, [r1, #16]
 800622c:	89cd      	ldrh	r5, [r1, #14]
 800622e:	490d      	ldr	r1, [pc, #52]	; (8006264 <timeCommand+0x80>)
 8006230:	4e0d      	ldr	r6, [pc, #52]	; (8006268 <timeCommand+0x84>)
 8006232:	9602      	str	r6, [sp, #8]
 8006234:	9501      	str	r5, [sp, #4]
 8006236:	9000      	str	r0, [sp, #0]
 8006238:	0020      	movs	r0, r4
 800623a:	f00e fae7 	bl	801480c <sprintf>
 800623e:	e7dc      	b.n	80061fa <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8006240:	4906      	ldr	r1, [pc, #24]	; (800625c <timeCommand+0x78>)
 8006242:	7c8a      	ldrb	r2, [r1, #18]
 8006244:	7c4b      	ldrb	r3, [r1, #17]
 8006246:	7c08      	ldrb	r0, [r1, #16]
 8006248:	89cd      	ldrh	r5, [r1, #14]
 800624a:	4906      	ldr	r1, [pc, #24]	; (8006264 <timeCommand+0x80>)
 800624c:	4e07      	ldr	r6, [pc, #28]	; (800626c <timeCommand+0x88>)
 800624e:	9602      	str	r6, [sp, #8]
 8006250:	9501      	str	r5, [sp, #4]
 8006252:	9000      	str	r0, [sp, #0]
 8006254:	0020      	movs	r0, r4
 8006256:	f00e fad9 	bl	801480c <sprintf>
 800625a:	e7ce      	b.n	80061fa <timeCommand+0x16>
 800625c:	2000084c 	.word	0x2000084c
 8006260:	0801ae74 	.word	0x0801ae74
 8006264:	0801ae9c 	.word	0x0801ae9c
 8006268:	0801aecc 	.word	0x0801aecc
 800626c:	0801aec8 	.word	0x0801aec8

08006270 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006270:	b510      	push	{r4, lr}
 8006272:	0004      	movs	r4, r0
	GetTimeDate();
 8006274:	f007 fb9e 	bl	800d9b4 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006278:	f7fe fb74 	bl	8004964 <GetDateString>
 800627c:	0002      	movs	r2, r0
 800627e:	4903      	ldr	r1, [pc, #12]	; (800628c <dateCommand+0x1c>)
 8006280:	0020      	movs	r0, r4
 8006282:	f00e fac3 	bl	801480c <sprintf>
}
 8006286:	2000      	movs	r0, #0
 8006288:	bd10      	pop	{r4, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	0801aed0 	.word	0x0801aed0

08006290 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006292:	b083      	sub	sp, #12
 8006294:	0006      	movs	r6, r0
 8006296:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006298:	2300      	movs	r3, #0
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800629e:	aa01      	add	r2, sp, #4
 80062a0:	2101      	movs	r1, #1
 80062a2:	0028      	movs	r0, r5
 80062a4:	f008 f8c8 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80062a8:	0004      	movs	r4, r0
 80062aa:	4b7c      	ldr	r3, [pc, #496]	; (800649c <getCommand+0x20c>)
 80062ac:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80062ae:	497c      	ldr	r1, [pc, #496]	; (80064a0 <getCommand+0x210>)
 80062b0:	2204      	movs	r2, #4
 80062b2:	f00e fb5b 	bl	801496c <strncmp>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d000      	beq.n	80062bc <getCommand+0x2c>
 80062ba:	e097      	b.n	80063ec <getCommand+0x15c>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80062bc:	3404      	adds	r4, #4
 80062be:	9d01      	ldr	r5, [sp, #4]
 80062c0:	3d04      	subs	r5, #4
 80062c2:	4978      	ldr	r1, [pc, #480]	; (80064a4 <getCommand+0x214>)
 80062c4:	002a      	movs	r2, r5
 80062c6:	0020      	movs	r0, r4
 80062c8:	f00e fb50 	bl	801496c <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d11d      	bne.n	800630c <getCommand+0x7c>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 80062d0:	4b75      	ldr	r3, [pc, #468]	; (80064a8 <getCommand+0x218>)
 80062d2:	781c      	ldrb	r4, [r3, #0]
 80062d4:	2c60      	cmp	r4, #96	; 0x60
 80062d6:	d005      	beq.n	80062e4 <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 80062d8:	2c20      	cmp	r4, #32
 80062da:	d00a      	beq.n	80062f2 <getCommand+0x62>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 80062dc:	2c00      	cmp	r4, #0
 80062de:	d00f      	beq.n	8006300 <getCommand+0x70>
				result =BOS_ERR_WrongValue;
 80062e0:	2468      	movs	r4, #104	; 0x68
 80062e2:	e0ce      	b.n	8006482 <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80062e4:	4a71      	ldr	r2, [pc, #452]	; (80064ac <getCommand+0x21c>)
 80062e6:	4972      	ldr	r1, [pc, #456]	; (80064b0 <getCommand+0x220>)
 80062e8:	0030      	movs	r0, r6
 80062ea:	f00e fa8f 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80062ee:	2400      	movs	r4, #0
 80062f0:	e0c7      	b.n	8006482 <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80062f2:	4a70      	ldr	r2, [pc, #448]	; (80064b4 <getCommand+0x224>)
 80062f4:	496e      	ldr	r1, [pc, #440]	; (80064b0 <getCommand+0x220>)
 80062f6:	0030      	movs	r0, r6
 80062f8:	f00e fa88 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80062fc:	2400      	movs	r4, #0
 80062fe:	e0c0      	b.n	8006482 <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006300:	4a6d      	ldr	r2, [pc, #436]	; (80064b8 <getCommand+0x228>)
 8006302:	496b      	ldr	r1, [pc, #428]	; (80064b0 <getCommand+0x220>)
 8006304:	0030      	movs	r0, r6
 8006306:	f00e fa81 	bl	801480c <sprintf>
	if(result == BOS_ERR_WrongParam)
 800630a:	e0ba      	b.n	8006482 <getCommand+0x1f2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800630c:	496b      	ldr	r1, [pc, #428]	; (80064bc <getCommand+0x22c>)
 800630e:	002a      	movs	r2, r5
 8006310:	0020      	movs	r0, r4
 8006312:	f00e fb2b 	bl	801496c <strncmp>
 8006316:	2800      	cmp	r0, #0
 8006318:	d11d      	bne.n	8006356 <getCommand+0xc6>
			if(BOSMessaging.trace == TRACE_BOTH)
 800631a:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <getCommand+0x218>)
 800631c:	785c      	ldrb	r4, [r3, #1]
 800631e:	2c03      	cmp	r4, #3
 8006320:	d005      	beq.n	800632e <getCommand+0x9e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006322:	2c01      	cmp	r4, #1
 8006324:	d00a      	beq.n	800633c <getCommand+0xac>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006326:	2c00      	cmp	r4, #0
 8006328:	d00f      	beq.n	800634a <getCommand+0xba>
				result =BOS_ERR_WrongValue;
 800632a:	2468      	movs	r4, #104	; 0x68
 800632c:	e0a9      	b.n	8006482 <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800632e:	4a5f      	ldr	r2, [pc, #380]	; (80064ac <getCommand+0x21c>)
 8006330:	495f      	ldr	r1, [pc, #380]	; (80064b0 <getCommand+0x220>)
 8006332:	0030      	movs	r0, r6
 8006334:	f00e fa6a 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 8006338:	2400      	movs	r4, #0
 800633a:	e0a2      	b.n	8006482 <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800633c:	4a5d      	ldr	r2, [pc, #372]	; (80064b4 <getCommand+0x224>)
 800633e:	495c      	ldr	r1, [pc, #368]	; (80064b0 <getCommand+0x220>)
 8006340:	0030      	movs	r0, r6
 8006342:	f00e fa63 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 8006346:	2400      	movs	r4, #0
 8006348:	e09b      	b.n	8006482 <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800634a:	4a5b      	ldr	r2, [pc, #364]	; (80064b8 <getCommand+0x228>)
 800634c:	4958      	ldr	r1, [pc, #352]	; (80064b0 <getCommand+0x220>)
 800634e:	0030      	movs	r0, r6
 8006350:	f00e fa5c 	bl	801480c <sprintf>
	if(result == BOS_ERR_WrongParam)
 8006354:	e095      	b.n	8006482 <getCommand+0x1f2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006356:	495a      	ldr	r1, [pc, #360]	; (80064c0 <getCommand+0x230>)
 8006358:	002a      	movs	r2, r5
 800635a:	0020      	movs	r0, r4
 800635c:	f00e fb06 	bl	801496c <strncmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	d023      	beq.n	80063ac <getCommand+0x11c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006364:	4957      	ldr	r1, [pc, #348]	; (80064c4 <getCommand+0x234>)
 8006366:	002a      	movs	r2, r5
 8006368:	0020      	movs	r0, r4
 800636a:	f00e faff 	bl	801496c <strncmp>
 800636e:	2800      	cmp	r0, #0
 8006370:	d024      	beq.n	80063bc <getCommand+0x12c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006372:	4955      	ldr	r1, [pc, #340]	; (80064c8 <getCommand+0x238>)
 8006374:	002a      	movs	r2, r5
 8006376:	0020      	movs	r0, r4
 8006378:	f00e faf8 	bl	801496c <strncmp>
 800637c:	2800      	cmp	r0, #0
 800637e:	d025      	beq.n	80063cc <getCommand+0x13c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006380:	4952      	ldr	r1, [pc, #328]	; (80064cc <getCommand+0x23c>)
 8006382:	002a      	movs	r2, r5
 8006384:	0020      	movs	r0, r4
 8006386:	f00e faf1 	bl	801496c <strncmp>
 800638a:	2800      	cmp	r0, #0
 800638c:	d026      	beq.n	80063dc <getCommand+0x14c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800638e:	4950      	ldr	r1, [pc, #320]	; (80064d0 <getCommand+0x240>)
 8006390:	002a      	movs	r2, r5
 8006392:	0020      	movs	r0, r4
 8006394:	f00e faea 	bl	801496c <strncmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	d12e      	bne.n	80063fa <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800639c:	4b4d      	ldr	r3, [pc, #308]	; (80064d4 <getCommand+0x244>)
 800639e:	795a      	ldrb	r2, [r3, #5]
 80063a0:	494d      	ldr	r1, [pc, #308]	; (80064d8 <getCommand+0x248>)
 80063a2:	0030      	movs	r0, r6
 80063a4:	f00e fa32 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80063a8:	2400      	movs	r4, #0
 80063aa:	e06a      	b.n	8006482 <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80063ac:	4b49      	ldr	r3, [pc, #292]	; (80064d4 <getCommand+0x244>)
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	4949      	ldr	r1, [pc, #292]	; (80064d8 <getCommand+0x248>)
 80063b2:	0030      	movs	r0, r6
 80063b4:	f00e fa2a 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80063b8:	2400      	movs	r4, #0
 80063ba:	e062      	b.n	8006482 <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80063bc:	4b45      	ldr	r3, [pc, #276]	; (80064d4 <getCommand+0x244>)
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	4945      	ldr	r1, [pc, #276]	; (80064d8 <getCommand+0x248>)
 80063c2:	0030      	movs	r0, r6
 80063c4:	f00e fa22 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80063c8:	2400      	movs	r4, #0
 80063ca:	e05a      	b.n	8006482 <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 80063cc:	4b41      	ldr	r3, [pc, #260]	; (80064d4 <getCommand+0x244>)
 80063ce:	885a      	ldrh	r2, [r3, #2]
 80063d0:	4941      	ldr	r1, [pc, #260]	; (80064d8 <getCommand+0x248>)
 80063d2:	0030      	movs	r0, r6
 80063d4:	f00e fa1a 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80063d8:	2400      	movs	r4, #0
 80063da:	e052      	b.n	8006482 <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80063dc:	4b3d      	ldr	r3, [pc, #244]	; (80064d4 <getCommand+0x244>)
 80063de:	791a      	ldrb	r2, [r3, #4]
 80063e0:	493d      	ldr	r1, [pc, #244]	; (80064d8 <getCommand+0x248>)
 80063e2:	0030      	movs	r0, r6
 80063e4:	f00e fa12 	bl	801480c <sprintf>
	BOS_Status result =BOS_OK;
 80063e8:	2400      	movs	r4, #0
 80063ea:	e04a      	b.n	8006482 <getCommand+0x1f2>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80063ec:	493b      	ldr	r1, [pc, #236]	; (80064dc <getCommand+0x24c>)
 80063ee:	2205      	movs	r2, #5
 80063f0:	0020      	movs	r0, r4
 80063f2:	f00e fabb 	bl	801496c <strncmp>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d005      	beq.n	8006406 <getCommand+0x176>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80063fa:	4939      	ldr	r1, [pc, #228]	; (80064e0 <getCommand+0x250>)
 80063fc:	2213      	movs	r2, #19
 80063fe:	0030      	movs	r0, r6
 8006400:	f00e fbbd 	bl	8014b7e <memcpy>
 8006404:	e03f      	b.n	8006486 <getCommand+0x1f6>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006406:	466a      	mov	r2, sp
 8006408:	2102      	movs	r1, #2
 800640a:	0028      	movs	r0, r5
 800640c:	f008 f814 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006410:	0007      	movs	r7, r0
 8006412:	4b22      	ldr	r3, [pc, #136]	; (800649c <getCommand+0x20c>)
 8006414:	6398      	str	r0, [r3, #56]	; 0x38
		for(i =0; i < MaxNumOfGroups; i++){
 8006416:	2400      	movs	r4, #0
 8006418:	e001      	b.n	800641e <getCommand+0x18e>
 800641a:	3401      	adds	r4, #1
 800641c:	b2e4      	uxtb	r4, r4
 800641e:	2c09      	cmp	r4, #9
 8006420:	d80b      	bhi.n	800643a <getCommand+0x1aa>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006422:	00a1      	lsls	r1, r4, #2
 8006424:	1909      	adds	r1, r1, r4
 8006426:	0049      	lsls	r1, r1, #1
 8006428:	4b2e      	ldr	r3, [pc, #184]	; (80064e4 <getCommand+0x254>)
 800642a:	18c9      	adds	r1, r1, r3
 800642c:	0038      	movs	r0, r7
 800642e:	f7f9 fe69 	bl	8000104 <strcmp>
 8006432:	2800      	cmp	r0, #0
 8006434:	d1f1      	bne.n	800641a <getCommand+0x18a>
				temp8 =1;
 8006436:	2501      	movs	r5, #1
 8006438:	e000      	b.n	800643c <getCommand+0x1ac>
		temp8 =0;
 800643a:	2500      	movs	r5, #0
		if(!temp8){
 800643c:	2d00      	cmp	r5, #0
 800643e:	d005      	beq.n	800644c <getCommand+0x1bc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006440:	4929      	ldr	r1, [pc, #164]	; (80064e8 <getCommand+0x258>)
 8006442:	003a      	movs	r2, r7
 8006444:	0030      	movs	r0, r6
 8006446:	f00e f9e1 	bl	801480c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800644a:	e007      	b.n	800645c <getCommand+0x1cc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 800644c:	4927      	ldr	r1, [pc, #156]	; (80064ec <getCommand+0x25c>)
 800644e:	003a      	movs	r2, r7
 8006450:	0030      	movs	r0, r6
 8006452:	f00e f9db 	bl	801480c <sprintf>
			return pdFALSE;
 8006456:	e016      	b.n	8006486 <getCommand+0x1f6>
			for(j =1; j <= N; j++)						// N modules
 8006458:	3501      	adds	r5, #1
 800645a:	b2ed      	uxtb	r5, r5
 800645c:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <getCommand+0x260>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	42ab      	cmp	r3, r5
 8006462:	d30d      	bcc.n	8006480 <getCommand+0x1f0>
				if(InGroup(j,i)){
 8006464:	1e6b      	subs	r3, r5, #1
 8006466:	4a23      	ldr	r2, [pc, #140]	; (80064f4 <getCommand+0x264>)
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	5a9b      	ldrh	r3, [r3, r2]
 800646c:	4123      	asrs	r3, r4
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d5f2      	bpl.n	8006458 <getCommand+0x1c8>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006472:	4921      	ldr	r1, [pc, #132]	; (80064f8 <getCommand+0x268>)
 8006474:	002b      	movs	r3, r5
 8006476:	0032      	movs	r2, r6
 8006478:	0030      	movs	r0, r6
 800647a:	f00e f9c7 	bl	801480c <sprintf>
 800647e:	e7eb      	b.n	8006458 <getCommand+0x1c8>
	BOS_Status result =BOS_OK;
 8006480:	2400      	movs	r4, #0
	else if(result == BOS_ERR_WrongValue)
 8006482:	2c68      	cmp	r4, #104	; 0x68
 8006484:	d002      	beq.n	800648c <getCommand+0x1fc>
}
 8006486:	2000      	movs	r0, #0
 8006488:	b003      	add	sp, #12
 800648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <getCommand+0x20c>)
 800648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006490:	491a      	ldr	r1, [pc, #104]	; (80064fc <getCommand+0x26c>)
 8006492:	0030      	movs	r0, r6
 8006494:	f00e f9ba 	bl	801480c <sprintf>
 8006498:	e7f5      	b.n	8006486 <getCommand+0x1f6>
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	2000160c 	.word	0x2000160c
 80064a0:	0801aee8 	.word	0x0801aee8
 80064a4:	0801aef0 	.word	0x0801aef0
 80064a8:	20000844 	.word	0x20000844
 80064ac:	08019fe0 	.word	0x08019fe0
 80064b0:	08019ebc 	.word	0x08019ebc
 80064b4:	0801aefc 	.word	0x0801aefc
 80064b8:	0801af00 	.word	0x0801af00
 80064bc:	0801af08 	.word	0x0801af08
 80064c0:	0801af10 	.word	0x0801af10
 80064c4:	0801af1c 	.word	0x0801af1c
 80064c8:	0801af28 	.word	0x0801af28
 80064cc:	0801af38 	.word	0x0801af38
 80064d0:	0801af4c 	.word	0x0801af4c
 80064d4:	2000084c 	.word	0x2000084c
 80064d8:	0801a63c 	.word	0x0801a63c
 80064dc:	0801af60 	.word	0x0801af60
 80064e0:	0801afa0 	.word	0x0801afa0
 80064e4:	200007d8 	.word	0x200007d8
 80064e8:	0801af84 	.word	0x0801af84
 80064ec:	0801af68 	.word	0x0801af68
 80064f0:	20000008 	.word	0x20000008
 80064f4:	200007a4 	.word	0x200007a4
 80064f8:	0801af98 	.word	0x0801af98
 80064fc:	0801afb4 	.word	0x0801afb4

08006500 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	0005      	movs	r5, r0
 8006506:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006508:	2300      	movs	r3, #0
 800650a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800650c:	aa01      	add	r2, sp, #4
 800650e:	2101      	movs	r1, #1
 8006510:	f007 ff92 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006514:	0004      	movs	r4, r0
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <defaultCommand+0x98>)
 8006518:	63d8      	str	r0, [r3, #60]	; 0x3c
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800651a:	9e01      	ldr	r6, [sp, #4]
 800651c:	491f      	ldr	r1, [pc, #124]	; (800659c <defaultCommand+0x9c>)
 800651e:	0032      	movs	r2, r6
 8006520:	f00e fa24 	bl	801496c <strncmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	d00e      	beq.n	8006546 <defaultCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006528:	491d      	ldr	r1, [pc, #116]	; (80065a0 <defaultCommand+0xa0>)
 800652a:	0032      	movs	r2, r6
 800652c:	0020      	movs	r0, r4
 800652e:	f00e fa1d 	bl	801496c <strncmp>
 8006532:	2800      	cmp	r0, #0
 8006534:	d018      	beq.n	8006568 <defaultCommand+0x68>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006536:	491b      	ldr	r1, [pc, #108]	; (80065a4 <defaultCommand+0xa4>)
 8006538:	220f      	movs	r2, #15
 800653a:	0028      	movs	r0, r5
 800653c:	f00e fb1f 	bl	8014b7e <memcpy>
}
 8006540:	2000      	movs	r0, #0
 8006542:	b002      	add	sp, #8
 8006544:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006546:	4918      	ldr	r1, [pc, #96]	; (80065a8 <defaultCommand+0xa8>)
 8006548:	4b18      	ldr	r3, [pc, #96]	; (80065ac <defaultCommand+0xac>)
 800654a:	000a      	movs	r2, r1
 800654c:	cb51      	ldmia	r3!, {r0, r4, r6}
 800654e:	c251      	stmia	r2!, {r0, r4, r6}
 8006550:	cb13      	ldmia	r3!, {r0, r1, r4}
 8006552:	c213      	stmia	r2!, {r0, r1, r4}
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006558:	f7fd f942 	bl	80037e0 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 800655c:	4914      	ldr	r1, [pc, #80]	; (80065b0 <defaultCommand+0xb0>)
 800655e:	2227      	movs	r2, #39	; 0x27
 8006560:	0028      	movs	r0, r5
 8006562:	f00e fb0c 	bl	8014b7e <memcpy>
	if(result == BOS_ERR_WrongValue)
 8006566:	e7eb      	b.n	8006540 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006568:	2200      	movs	r2, #0
 800656a:	2116      	movs	r1, #22
 800656c:	20ff      	movs	r0, #255	; 0xff
 800656e:	f001 fff9 	bl	8008564 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <defaultCommand+0xb4>)
 8006574:	2202      	movs	r2, #2
 8006576:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006578:	2064      	movs	r0, #100	; 0x64
 800657a:	f007 fe3b 	bl	800e1f4 <osDelay>
		ClearEEportsDir();
 800657e:	f7fd f975 	bl	800386c <ClearEEportsDir>
		ClearROtopology();
 8006582:	f004 fa01 	bl	800a988 <ClearROtopology>
		osDelay(100);
 8006586:	2064      	movs	r0, #100	; 0x64
 8006588:	f007 fe34 	bl	800e1f4 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800658c:	490a      	ldr	r1, [pc, #40]	; (80065b8 <defaultCommand+0xb8>)
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	0028      	movs	r0, r5
 8006592:	f00e faf4 	bl	8014b7e <memcpy>
	if(result == BOS_ERR_WrongValue)
 8006596:	e7d3      	b.n	8006540 <defaultCommand+0x40>
 8006598:	2000160c 	.word	0x2000160c
 800659c:	0801afd4 	.word	0x0801afd4
 80065a0:	0801b004 	.word	0x0801b004
 80065a4:	0801b00c 	.word	0x0801b00c
 80065a8:	2000084c 	.word	0x2000084c
 80065ac:	20000014 	.word	0x20000014
 80065b0:	0801afdc 	.word	0x0801afdc
 80065b4:	20000ee7 	.word	0x20000ee7
 80065b8:	0801b01c 	.word	0x0801b01c

080065bc <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80065bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065be:	46ce      	mov	lr, r9
 80065c0:	4647      	mov	r7, r8
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b08d      	sub	sp, #52	; 0x34
 80065c6:	0007      	movs	r7, r0
 80065c8:	0016      	movs	r6, r2
 80065ca:	2400      	movs	r4, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4698      	mov	r8, r3
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80065d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80065d2:	940a      	str	r4, [sp, #40]	; 0x28
 80065d4:	9409      	str	r4, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80065d6:	9408      	str	r4, [sp, #32]
 80065d8:	9407      	str	r4, [sp, #28]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80065da:	aa0b      	add	r2, sp, #44	; 0x2c
 80065dc:	2101      	movs	r1, #1
 80065de:	0030      	movs	r0, r6
 80065e0:	f007 ff2a 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80065e4:	0005      	movs	r5, r0
 80065e6:	4bb8      	ldr	r3, [pc, #736]	; (80068c8 <setCommand+0x30c>)
 80065e8:	6418      	str	r0, [r3, #64]	; 0x40
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80065ea:	49b8      	ldr	r1, [pc, #736]	; (80068cc <setCommand+0x310>)
 80065ec:	2204      	movs	r2, #4
 80065ee:	f00e f9bd 	bl	801496c <strncmp>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d01e      	beq.n	8006634 <setCommand+0x78>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80065f6:	49b6      	ldr	r1, [pc, #728]	; (80068d0 <setCommand+0x314>)
 80065f8:	2204      	movs	r2, #4
 80065fa:	0028      	movs	r0, r5
 80065fc:	f00e f9b6 	bl	801496c <strncmp>
 8006600:	2800      	cmp	r0, #0
 8006602:	d100      	bne.n	8006606 <setCommand+0x4a>
 8006604:	e182      	b.n	800690c <setCommand+0x350>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006606:	49b3      	ldr	r1, [pc, #716]	; (80068d4 <setCommand+0x318>)
 8006608:	2204      	movs	r2, #4
 800660a:	0028      	movs	r0, r5
 800660c:	f00e f9ae 	bl	801496c <strncmp>
 8006610:	2800      	cmp	r0, #0
 8006612:	d100      	bne.n	8006616 <setCommand+0x5a>
 8006614:	e1d6      	b.n	80069c4 <setCommand+0x408>
		result =BOS_ERR_WrongParam;
 8006616:	2567      	movs	r5, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8006618:	2d67      	cmp	r5, #103	; 0x67
 800661a:	d101      	bne.n	8006620 <setCommand+0x64>
 800661c:	f000 fbef 	bl	8006dfe <setCommand+0x842>
	else if(result == BOS_ERR_WrongValue)
 8006620:	2d68      	cmp	r5, #104	; 0x68
 8006622:	d101      	bne.n	8006628 <setCommand+0x6c>
 8006624:	f000 fbf2 	bl	8006e0c <setCommand+0x850>
}
 8006628:	2000      	movs	r0, #0
 800662a:	b00d      	add	sp, #52	; 0x34
 800662c:	bcc0      	pop	{r6, r7}
 800662e:	46b9      	mov	r9, r7
 8006630:	46b0      	mov	r8, r6
 8006632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006634:	aa0a      	add	r2, sp, #40	; 0x28
 8006636:	2102      	movs	r1, #2
 8006638:	0030      	movs	r0, r6
 800663a:	f007 fefd 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800663e:	0004      	movs	r4, r0
 8006640:	4ba1      	ldr	r3, [pc, #644]	; (80068c8 <setCommand+0x30c>)
 8006642:	6458      	str	r0, [r3, #68]	; 0x44
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006644:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006646:	3504      	adds	r5, #4
 8006648:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800664a:	3e04      	subs	r6, #4
 800664c:	49a2      	ldr	r1, [pc, #648]	; (80068d8 <setCommand+0x31c>)
 800664e:	0032      	movs	r2, r6
 8006650:	0028      	movs	r0, r5
 8006652:	f00e f98b 	bl	801496c <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d156      	bne.n	8006708 <setCommand+0x14c>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800665a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800665c:	499f      	ldr	r1, [pc, #636]	; (80068dc <setCommand+0x320>)
 800665e:	002a      	movs	r2, r5
 8006660:	0020      	movs	r0, r4
 8006662:	f00e f983 	bl	801496c <strncmp>
 8006666:	2800      	cmp	r0, #0
 8006668:	d016      	beq.n	8006698 <setCommand+0xdc>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800666a:	499d      	ldr	r1, [pc, #628]	; (80068e0 <setCommand+0x324>)
 800666c:	002a      	movs	r2, r5
 800666e:	0020      	movs	r0, r4
 8006670:	f00e f97c 	bl	801496c <strncmp>
 8006674:	2800      	cmp	r0, #0
 8006676:	d01e      	beq.n	80066b6 <setCommand+0xfa>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006678:	499a      	ldr	r1, [pc, #616]	; (80068e4 <setCommand+0x328>)
 800667a:	002a      	movs	r2, r5
 800667c:	0020      	movs	r0, r4
 800667e:	f00e f975 	bl	801496c <strncmp>
 8006682:	2800      	cmp	r0, #0
 8006684:	d026      	beq.n	80066d4 <setCommand+0x118>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006686:	4998      	ldr	r1, [pc, #608]	; (80068e8 <setCommand+0x32c>)
 8006688:	002a      	movs	r2, r5
 800668a:	0020      	movs	r0, r4
 800668c:	f00e f96e 	bl	801496c <strncmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	d02e      	beq.n	80066f2 <setCommand+0x136>
				result =BOS_ERR_WrongValue;
 8006694:	2568      	movs	r5, #104	; 0x68
 8006696:	e7bf      	b.n	8006618 <setCommand+0x5c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006698:	4b94      	ldr	r3, [pc, #592]	; (80068ec <setCommand+0x330>)
 800669a:	2260      	movs	r2, #96	; 0x60
 800669c:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800669e:	7859      	ldrb	r1, [r3, #1]
 80066a0:	0209      	lsls	r1, r1, #8
 80066a2:	2360      	movs	r3, #96	; 0x60
 80066a4:	4319      	orrs	r1, r3
 80066a6:	b209      	sxth	r1, r1
 80066a8:	b289      	uxth	r1, r1
 80066aa:	308a      	adds	r0, #138	; 0x8a
 80066ac:	0040      	lsls	r0, r0, #1
 80066ae:	f005 fa79 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80066b2:	2500      	movs	r5, #0
 80066b4:	e376      	b.n	8006da4 <setCommand+0x7e8>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066b6:	4b8d      	ldr	r3, [pc, #564]	; (80068ec <setCommand+0x330>)
 80066b8:	2220      	movs	r2, #32
 80066ba:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066bc:	7859      	ldrb	r1, [r3, #1]
 80066be:	0209      	lsls	r1, r1, #8
 80066c0:	2320      	movs	r3, #32
 80066c2:	4319      	orrs	r1, r3
 80066c4:	b209      	sxth	r1, r1
 80066c6:	b289      	uxth	r1, r1
 80066c8:	308a      	adds	r0, #138	; 0x8a
 80066ca:	0040      	lsls	r0, r0, #1
 80066cc:	f005 fa6a 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80066d0:	2500      	movs	r5, #0
 80066d2:	e367      	b.n	8006da4 <setCommand+0x7e8>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066d4:	4b85      	ldr	r3, [pc, #532]	; (80068ec <setCommand+0x330>)
 80066d6:	2240      	movs	r2, #64	; 0x40
 80066d8:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066da:	7859      	ldrb	r1, [r3, #1]
 80066dc:	0209      	lsls	r1, r1, #8
 80066de:	2340      	movs	r3, #64	; 0x40
 80066e0:	4319      	orrs	r1, r3
 80066e2:	b209      	sxth	r1, r1
 80066e4:	b289      	uxth	r1, r1
 80066e6:	308a      	adds	r0, #138	; 0x8a
 80066e8:	0040      	lsls	r0, r0, #1
 80066ea:	f005 fa5b 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80066ee:	2500      	movs	r5, #0
 80066f0:	e358      	b.n	8006da4 <setCommand+0x7e8>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80066f2:	4b7e      	ldr	r3, [pc, #504]	; (80068ec <setCommand+0x330>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066f8:	7859      	ldrb	r1, [r3, #1]
 80066fa:	0209      	lsls	r1, r1, #8
 80066fc:	308a      	adds	r0, #138	; 0x8a
 80066fe:	0040      	lsls	r0, r0, #1
 8006700:	f005 fa50 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006704:	2500      	movs	r5, #0
 8006706:	e34d      	b.n	8006da4 <setCommand+0x7e8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006708:	4979      	ldr	r1, [pc, #484]	; (80068f0 <setCommand+0x334>)
 800670a:	0032      	movs	r2, r6
 800670c:	0028      	movs	r0, r5
 800670e:	f00e f92d 	bl	801496c <strncmp>
 8006712:	2800      	cmp	r0, #0
 8006714:	d14f      	bne.n	80067b6 <setCommand+0x1fa>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006716:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006718:	4970      	ldr	r1, [pc, #448]	; (80068dc <setCommand+0x320>)
 800671a:	002a      	movs	r2, r5
 800671c:	0020      	movs	r0, r4
 800671e:	f00e f925 	bl	801496c <strncmp>
 8006722:	2800      	cmp	r0, #0
 8006724:	d016      	beq.n	8006754 <setCommand+0x198>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006726:	496e      	ldr	r1, [pc, #440]	; (80068e0 <setCommand+0x324>)
 8006728:	002a      	movs	r2, r5
 800672a:	0020      	movs	r0, r4
 800672c:	f00e f91e 	bl	801496c <strncmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	d01c      	beq.n	800676e <setCommand+0x1b2>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006734:	4968      	ldr	r1, [pc, #416]	; (80068d8 <setCommand+0x31c>)
 8006736:	002a      	movs	r2, r5
 8006738:	0020      	movs	r0, r4
 800673a:	f00e f917 	bl	801496c <strncmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	d022      	beq.n	8006788 <setCommand+0x1cc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006742:	4969      	ldr	r1, [pc, #420]	; (80068e8 <setCommand+0x32c>)
 8006744:	002a      	movs	r2, r5
 8006746:	0020      	movs	r0, r4
 8006748:	f00e f910 	bl	801496c <strncmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	d028      	beq.n	80067a2 <setCommand+0x1e6>
				result =BOS_ERR_WrongValue;
 8006750:	2568      	movs	r5, #104	; 0x68
 8006752:	e761      	b.n	8006618 <setCommand+0x5c>
				BOSMessaging.trace =TRACE_BOTH;
 8006754:	4b65      	ldr	r3, [pc, #404]	; (80068ec <setCommand+0x330>)
 8006756:	2203      	movs	r2, #3
 8006758:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	21c0      	movs	r1, #192	; 0xc0
 800675e:	0089      	lsls	r1, r1, #2
 8006760:	4319      	orrs	r1, r3
 8006762:	308a      	adds	r0, #138	; 0x8a
 8006764:	0040      	lsls	r0, r0, #1
 8006766:	f005 fa1d 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800676a:	2500      	movs	r5, #0
 800676c:	e31a      	b.n	8006da4 <setCommand+0x7e8>
				BOSMessaging.trace =TRACE_MESSAGE;
 800676e:	4b5f      	ldr	r3, [pc, #380]	; (80068ec <setCommand+0x330>)
 8006770:	2201      	movs	r2, #1
 8006772:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	0049      	lsls	r1, r1, #1
 800677a:	4319      	orrs	r1, r3
 800677c:	308a      	adds	r0, #138	; 0x8a
 800677e:	0040      	lsls	r0, r0, #1
 8006780:	f005 fa10 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006784:	2500      	movs	r5, #0
 8006786:	e30d      	b.n	8006da4 <setCommand+0x7e8>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006788:	4b58      	ldr	r3, [pc, #352]	; (80068ec <setCommand+0x330>)
 800678a:	2202      	movs	r2, #2
 800678c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2180      	movs	r1, #128	; 0x80
 8006792:	0089      	lsls	r1, r1, #2
 8006794:	4319      	orrs	r1, r3
 8006796:	308a      	adds	r0, #138	; 0x8a
 8006798:	0040      	lsls	r0, r0, #1
 800679a:	f005 fa03 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800679e:	2500      	movs	r5, #0
 80067a0:	e300      	b.n	8006da4 <setCommand+0x7e8>
				BOSMessaging.trace =TRACE_NONE;
 80067a2:	4b52      	ldr	r3, [pc, #328]	; (80068ec <setCommand+0x330>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	308a      	adds	r0, #138	; 0x8a
 80067ac:	0040      	lsls	r0, r0, #1
 80067ae:	f005 f9f9 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80067b2:	2500      	movs	r5, #0
 80067b4:	e2f6      	b.n	8006da4 <setCommand+0x7e8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80067b6:	494f      	ldr	r1, [pc, #316]	; (80068f4 <setCommand+0x338>)
 80067b8:	0032      	movs	r2, r6
 80067ba:	0028      	movs	r0, r5
 80067bc:	f00e f8d6 	bl	801496c <strncmp>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d01d      	beq.n	8006800 <setCommand+0x244>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80067c4:	494c      	ldr	r1, [pc, #304]	; (80068f8 <setCommand+0x33c>)
 80067c6:	0032      	movs	r2, r6
 80067c8:	0028      	movs	r0, r5
 80067ca:	f00e f8cf 	bl	801496c <strncmp>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d02d      	beq.n	800682e <setCommand+0x272>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80067d2:	494a      	ldr	r1, [pc, #296]	; (80068fc <setCommand+0x340>)
 80067d4:	0032      	movs	r2, r6
 80067d6:	0028      	movs	r0, r5
 80067d8:	f00e f8c8 	bl	801496c <strncmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d036      	beq.n	800684e <setCommand+0x292>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80067e0:	4947      	ldr	r1, [pc, #284]	; (8006900 <setCommand+0x344>)
 80067e2:	0032      	movs	r2, r6
 80067e4:	0028      	movs	r0, r5
 80067e6:	f00e f8c1 	bl	801496c <strncmp>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d03f      	beq.n	800686e <setCommand+0x2b2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80067ee:	4945      	ldr	r1, [pc, #276]	; (8006904 <setCommand+0x348>)
 80067f0:	0032      	movs	r2, r6
 80067f2:	0028      	movs	r0, r5
 80067f4:	f00e f8ba 	bl	801496c <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d04e      	beq.n	800689a <setCommand+0x2de>
			result =BOS_ERR_WrongParam;
 80067fc:	2567      	movs	r5, #103	; 0x67
 80067fe:	e70b      	b.n	8006618 <setCommand+0x5c>
			temp2 =atoi((const char* )pcParameterString2);
 8006800:	0020      	movs	r0, r4
 8006802:	f00c fc6e 	bl	80130e2 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006806:	23e1      	movs	r3, #225	; 0xe1
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	4298      	cmp	r0, r3
 800680c:	d901      	bls.n	8006812 <setCommand+0x256>
				result =BOS_ERR_WrongValue;
 800680e:	2568      	movs	r5, #104	; 0x68
 8006810:	e702      	b.n	8006618 <setCommand+0x5c>
				BOS.clibaudrate =temp2;
 8006812:	4c3d      	ldr	r4, [pc, #244]	; (8006908 <setCommand+0x34c>)
 8006814:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006816:	b281      	uxth	r1, r0
 8006818:	208c      	movs	r0, #140	; 0x8c
 800681a:	0040      	lsls	r0, r0, #1
 800681c:	f005 f9c2 	bl	800bba4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006820:	8961      	ldrh	r1, [r4, #10]
 8006822:	201a      	movs	r0, #26
 8006824:	30ff      	adds	r0, #255	; 0xff
 8006826:	f005 f9bd 	bl	800bba4 <EE_WriteVariable>
				extraMessage =1;
 800682a:	2501      	movs	r5, #1
 800682c:	e2ba      	b.n	8006da4 <setCommand+0x7e8>
			temp16 =atoi((const char* )pcParameterString2);
 800682e:	0020      	movs	r0, r4
 8006830:	f00c fc57 	bl	80130e2 <atoi>
 8006834:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006836:	2900      	cmp	r1, #0
 8006838:	d101      	bne.n	800683e <setCommand+0x282>
				result =BOS_ERR_WrongValue;
 800683a:	2568      	movs	r5, #104	; 0x68
 800683c:	e6ec      	b.n	8006618 <setCommand+0x5c>
				BOS.buttons.debounce =temp16;
 800683e:	4b32      	ldr	r3, [pc, #200]	; (8006908 <setCommand+0x34c>)
 8006840:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006842:	2016      	movs	r0, #22
 8006844:	30ff      	adds	r0, #255	; 0xff
 8006846:	f005 f9ad 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800684a:	2500      	movs	r5, #0
 800684c:	e2aa      	b.n	8006da4 <setCommand+0x7e8>
			temp16 =atoi((const char* )pcParameterString2);
 800684e:	0020      	movs	r0, r4
 8006850:	f00c fc47 	bl	80130e2 <atoi>
 8006854:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006856:	2900      	cmp	r1, #0
 8006858:	d101      	bne.n	800685e <setCommand+0x2a2>
				result =BOS_ERR_WrongValue;
 800685a:	2568      	movs	r5, #104	; 0x68
 800685c:	e6dc      	b.n	8006618 <setCommand+0x5c>
				BOS.buttons.singleClickTime =temp16;
 800685e:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <setCommand+0x34c>)
 8006860:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006862:	208b      	movs	r0, #139	; 0x8b
 8006864:	0040      	lsls	r0, r0, #1
 8006866:	f005 f99d 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800686a:	2500      	movs	r5, #0
 800686c:	e29a      	b.n	8006da4 <setCommand+0x7e8>
			temp16 =atoi((const char* )pcParameterString2);
 800686e:	0020      	movs	r0, r4
 8006870:	f00c fc37 	bl	80130e2 <atoi>
 8006874:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006876:	3b01      	subs	r3, #1
 8006878:	b29b      	uxth	r3, r3
 800687a:	2bfe      	cmp	r3, #254	; 0xfe
 800687c:	d901      	bls.n	8006882 <setCommand+0x2c6>
				result =BOS_ERR_WrongValue;
 800687e:	2568      	movs	r5, #104	; 0x68
 8006880:	e6ca      	b.n	8006618 <setCommand+0x5c>
				BOS.buttons.minInterClickTime =temp16;
 8006882:	b2c0      	uxtb	r0, r0
 8006884:	4b20      	ldr	r3, [pc, #128]	; (8006908 <setCommand+0x34c>)
 8006886:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006888:	7959      	ldrb	r1, [r3, #5]
 800688a:	0209      	lsls	r1, r1, #8
 800688c:	4301      	orrs	r1, r0
 800688e:	2018      	movs	r0, #24
 8006890:	30ff      	adds	r0, #255	; 0xff
 8006892:	f005 f987 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006896:	2500      	movs	r5, #0
 8006898:	e284      	b.n	8006da4 <setCommand+0x7e8>
			temp16 =atoi((const char* )pcParameterString2);
 800689a:	0020      	movs	r0, r4
 800689c:	f00c fc21 	bl	80130e2 <atoi>
 80068a0:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2bfe      	cmp	r3, #254	; 0xfe
 80068a8:	d901      	bls.n	80068ae <setCommand+0x2f2>
				result =BOS_ERR_WrongValue;
 80068aa:	2568      	movs	r5, #104	; 0x68
 80068ac:	e6b4      	b.n	8006618 <setCommand+0x5c>
				BOS.buttons.maxInterClickTime =temp16;
 80068ae:	b2c0      	uxtb	r0, r0
 80068b0:	4b15      	ldr	r3, [pc, #84]	; (8006908 <setCommand+0x34c>)
 80068b2:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80068b4:	0200      	lsls	r0, r0, #8
 80068b6:	7919      	ldrb	r1, [r3, #4]
 80068b8:	4301      	orrs	r1, r0
 80068ba:	2018      	movs	r0, #24
 80068bc:	30ff      	adds	r0, #255	; 0xff
 80068be:	f005 f971 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80068c2:	2500      	movs	r5, #0
 80068c4:	e26e      	b.n	8006da4 <setCommand+0x7e8>
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	2000160c 	.word	0x2000160c
 80068cc:	0801aee8 	.word	0x0801aee8
 80068d0:	0801b068 	.word	0x0801b068
 80068d4:	0801b078 	.word	0x0801b078
 80068d8:	0801aef0 	.word	0x0801aef0
 80068dc:	08019fe0 	.word	0x08019fe0
 80068e0:	0801b05c 	.word	0x0801b05c
 80068e4:	0801b064 	.word	0x0801b064
 80068e8:	0801af00 	.word	0x0801af00
 80068ec:	20000844 	.word	0x20000844
 80068f0:	0801af08 	.word	0x0801af08
 80068f4:	0801af10 	.word	0x0801af10
 80068f8:	0801af1c 	.word	0x0801af1c
 80068fc:	0801af28 	.word	0x0801af28
 8006900:	0801af38 	.word	0x0801af38
 8006904:	0801af4c 	.word	0x0801af4c
 8006908:	2000084c 	.word	0x2000084c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800690c:	aa0a      	add	r2, sp, #40	; 0x28
 800690e:	2102      	movs	r1, #2
 8006910:	0030      	movs	r0, r6
 8006912:	f007 fd91 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006916:	4cdd      	ldr	r4, [pc, #884]	; (8006c8c <setCommand+0x6d0>)
 8006918:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800691a:	aa09      	add	r2, sp, #36	; 0x24
 800691c:	2103      	movs	r1, #3
 800691e:	0030      	movs	r0, r6
 8006920:	f007 fd8a 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006924:	64a0      	str	r0, [r4, #72]	; 0x48
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006926:	aa08      	add	r2, sp, #32
 8006928:	2104      	movs	r1, #4
 800692a:	0030      	movs	r0, r6
 800692c:	f007 fd84 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006930:	64e0      	str	r0, [r4, #76]	; 0x4c
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006932:	aa07      	add	r2, sp, #28
 8006934:	2105      	movs	r1, #5
 8006936:	0030      	movs	r0, r6
 8006938:	f007 fd7e 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800693c:	6520      	str	r0, [r4, #80]	; 0x50
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800693e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006940:	f00c fbcf 	bl	80130e2 <atoi>
 8006944:	b2c5      	uxtb	r5, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006946:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006948:	f00c fbcb 	bl	80130e2 <atoi>
 800694c:	b2c6      	uxtb	r6, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800694e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006950:	f00c fbc7 	bl	80130e2 <atoi>
 8006954:	b2c3      	uxtb	r3, r0
 8006956:	4699      	mov	r9, r3
		if(pcParameterString5 != NULL){
 8006958:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800695a:	2c00      	cmp	r4, #0
 800695c:	d013      	beq.n	8006986 <setCommand+0x3ca>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800695e:	49cc      	ldr	r1, [pc, #816]	; (8006c90 <setCommand+0x6d4>)
 8006960:	2202      	movs	r2, #2
 8006962:	0020      	movs	r0, r4
 8006964:	f00e f802 	bl	801496c <strncmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	d00a      	beq.n	8006982 <setCommand+0x3c6>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800696c:	49c9      	ldr	r1, [pc, #804]	; (8006c94 <setCommand+0x6d8>)
 800696e:	2202      	movs	r2, #2
 8006970:	0020      	movs	r0, r4
 8006972:	f00d fffb 	bl	801496c <strncmp>
 8006976:	2800      	cmp	r0, #0
 8006978:	d000      	beq.n	800697c <setCommand+0x3c0>
 800697a:	e20f      	b.n	8006d9c <setCommand+0x7e0>
				temp84 =RTC_PM;
 800697c:	2302      	movs	r3, #2
 800697e:	4698      	mov	r8, r3
 8006980:	e001      	b.n	8006986 <setCommand+0x3ca>
				temp84 =RTC_AM;
 8006982:	2301      	movs	r3, #1
 8006984:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006986:	2d17      	cmp	r5, #23
 8006988:	d900      	bls.n	800698c <setCommand+0x3d0>
 800698a:	e22c      	b.n	8006de6 <setCommand+0x82a>
 800698c:	2e3b      	cmp	r6, #59	; 0x3b
 800698e:	d900      	bls.n	8006992 <setCommand+0x3d6>
 8006990:	e22c      	b.n	8006dec <setCommand+0x830>
 8006992:	464b      	mov	r3, r9
 8006994:	2b3b      	cmp	r3, #59	; 0x3b
 8006996:	d901      	bls.n	800699c <setCommand+0x3e0>
				result =BOS_ERR_WrongValue;
 8006998:	2568      	movs	r5, #104	; 0x68
 800699a:	e63d      	b.n	8006618 <setCommand+0x5c>
				GetTimeDate();
 800699c:	f007 f80a 	bl	800d9b4 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80069a0:	4cbd      	ldr	r4, [pc, #756]	; (8006c98 <setCommand+0x6dc>)
 80069a2:	7d23      	ldrb	r3, [r4, #20]
 80069a4:	8b22      	ldrh	r2, [r4, #24]
 80069a6:	7d61      	ldrb	r1, [r4, #21]
 80069a8:	7da0      	ldrb	r0, [r4, #22]
 80069aa:	7b24      	ldrb	r4, [r4, #12]
 80069ac:	b264      	sxtb	r4, r4
 80069ae:	9404      	str	r4, [sp, #16]
 80069b0:	4644      	mov	r4, r8
 80069b2:	9403      	str	r4, [sp, #12]
 80069b4:	9502      	str	r5, [sp, #8]
 80069b6:	9601      	str	r6, [sp, #4]
 80069b8:	464c      	mov	r4, r9
 80069ba:	9400      	str	r4, [sp, #0]
 80069bc:	f006 ff9a 	bl	800d8f4 <BOS_CalendarConfig>
 80069c0:	0005      	movs	r5, r0
 80069c2:	e1ec      	b.n	8006d9e <setCommand+0x7e2>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80069c4:	aa0a      	add	r2, sp, #40	; 0x28
 80069c6:	2102      	movs	r1, #2
 80069c8:	0030      	movs	r0, r6
 80069ca:	f007 fd35 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80069ce:	4daf      	ldr	r5, [pc, #700]	; (8006c8c <setCommand+0x6d0>)
 80069d0:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80069d2:	aa09      	add	r2, sp, #36	; 0x24
 80069d4:	2103      	movs	r1, #3
 80069d6:	0030      	movs	r0, r6
 80069d8:	f007 fd2e 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80069dc:	64a8      	str	r0, [r5, #72]	; 0x48
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80069de:	aa08      	add	r2, sp, #32
 80069e0:	2104      	movs	r1, #4
 80069e2:	0030      	movs	r0, r6
 80069e4:	f007 fd28 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80069e8:	64e8      	str	r0, [r5, #76]	; 0x4c
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80069ea:	aa07      	add	r2, sp, #28
 80069ec:	2105      	movs	r1, #5
 80069ee:	0030      	movs	r0, r6
 80069f0:	f007 fd22 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80069f4:	6528      	str	r0, [r5, #80]	; 0x50
		temp83 =atoi((const char* )pcParameterString4);		// day
 80069f6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80069f8:	f00c fb73 	bl	80130e2 <atoi>
 80069fc:	b2c6      	uxtb	r6, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80069fe:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006a00:	f00c fb6f 	bl	80130e2 <atoi>
 8006a04:	b283      	uxth	r3, r0
 8006a06:	4698      	mov	r8, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006a08:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8006a0a:	49a4      	ldr	r1, [pc, #656]	; (8006c9c <setCommand+0x6e0>)
 8006a0c:	2206      	movs	r2, #6
 8006a0e:	0028      	movs	r0, r5
 8006a10:	f00d ffac 	bl	801496c <strncmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d032      	beq.n	8006a7e <setCommand+0x4c2>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006a18:	49a1      	ldr	r1, [pc, #644]	; (8006ca0 <setCommand+0x6e4>)
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	0028      	movs	r0, r5
 8006a1e:	f00d ffa5 	bl	801496c <strncmp>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d100      	bne.n	8006a28 <setCommand+0x46c>
 8006a26:	e0f2      	b.n	8006c0e <setCommand+0x652>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006a28:	499e      	ldr	r1, [pc, #632]	; (8006ca4 <setCommand+0x6e8>)
 8006a2a:	2209      	movs	r2, #9
 8006a2c:	0028      	movs	r0, r5
 8006a2e:	f00d ff9d 	bl	801496c <strncmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d100      	bne.n	8006a38 <setCommand+0x47c>
 8006a36:	e0ed      	b.n	8006c14 <setCommand+0x658>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006a38:	499b      	ldr	r1, [pc, #620]	; (8006ca8 <setCommand+0x6ec>)
 8006a3a:	2208      	movs	r2, #8
 8006a3c:	0028      	movs	r0, r5
 8006a3e:	f00d ff95 	bl	801496c <strncmp>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d100      	bne.n	8006a48 <setCommand+0x48c>
 8006a46:	e0e8      	b.n	8006c1a <setCommand+0x65e>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006a48:	4998      	ldr	r1, [pc, #608]	; (8006cac <setCommand+0x6f0>)
 8006a4a:	2206      	movs	r2, #6
 8006a4c:	0028      	movs	r0, r5
 8006a4e:	f00d ff8d 	bl	801496c <strncmp>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d100      	bne.n	8006a58 <setCommand+0x49c>
 8006a56:	e0e3      	b.n	8006c20 <setCommand+0x664>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006a58:	4995      	ldr	r1, [pc, #596]	; (8006cb0 <setCommand+0x6f4>)
 8006a5a:	2208      	movs	r2, #8
 8006a5c:	0028      	movs	r0, r5
 8006a5e:	f00d ff85 	bl	801496c <strncmp>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d100      	bne.n	8006a68 <setCommand+0x4ac>
 8006a66:	e0de      	b.n	8006c26 <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006a68:	4992      	ldr	r1, [pc, #584]	; (8006cb4 <setCommand+0x6f8>)
 8006a6a:	2206      	movs	r2, #6
 8006a6c:	0028      	movs	r0, r5
 8006a6e:	f00d ff7d 	bl	801496c <strncmp>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d000      	beq.n	8006a78 <setCommand+0x4bc>
 8006a76:	e0d9      	b.n	8006c2c <setCommand+0x670>
			temp81 =SUNDAY;
 8006a78:	2407      	movs	r4, #7
	BOS_Status result =BOS_OK;
 8006a7a:	2500      	movs	r5, #0
 8006a7c:	e001      	b.n	8006a82 <setCommand+0x4c6>
			temp81 =MONDAY;
 8006a7e:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8006a80:	2500      	movs	r5, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006a82:	4b82      	ldr	r3, [pc, #520]	; (8006c8c <setCommand+0x6d0>)
 8006a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a86:	4699      	mov	r9, r3
 8006a88:	498b      	ldr	r1, [pc, #556]	; (8006cb8 <setCommand+0x6fc>)
 8006a8a:	2207      	movs	r2, #7
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f00d ff6d 	bl	801496c <strncmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d100      	bne.n	8006a98 <setCommand+0x4dc>
 8006a96:	e0cb      	b.n	8006c30 <setCommand+0x674>
 8006a98:	4988      	ldr	r1, [pc, #544]	; (8006cbc <setCommand+0x700>)
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	4648      	mov	r0, r9
 8006a9e:	f00d ff65 	bl	801496c <strncmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d100      	bne.n	8006aa8 <setCommand+0x4ec>
 8006aa6:	e0d8      	b.n	8006c5a <setCommand+0x69e>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006aa8:	4985      	ldr	r1, [pc, #532]	; (8006cc0 <setCommand+0x704>)
 8006aaa:	2208      	movs	r2, #8
 8006aac:	4648      	mov	r0, r9
 8006aae:	f00d ff5d 	bl	801496c <strncmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d100      	bne.n	8006ab8 <setCommand+0x4fc>
 8006ab6:	e0d3      	b.n	8006c60 <setCommand+0x6a4>
 8006ab8:	4982      	ldr	r1, [pc, #520]	; (8006cc4 <setCommand+0x708>)
 8006aba:	2202      	movs	r2, #2
 8006abc:	4648      	mov	r0, r9
 8006abe:	f00d ff55 	bl	801496c <strncmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d100      	bne.n	8006ac8 <setCommand+0x50c>
 8006ac6:	e0ce      	b.n	8006c66 <setCommand+0x6aa>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006ac8:	497f      	ldr	r1, [pc, #508]	; (8006cc8 <setCommand+0x70c>)
 8006aca:	2205      	movs	r2, #5
 8006acc:	4648      	mov	r0, r9
 8006ace:	f00d ff4d 	bl	801496c <strncmp>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d100      	bne.n	8006ad8 <setCommand+0x51c>
 8006ad6:	e0c9      	b.n	8006c6c <setCommand+0x6b0>
 8006ad8:	497c      	ldr	r1, [pc, #496]	; (8006ccc <setCommand+0x710>)
 8006ada:	2202      	movs	r2, #2
 8006adc:	4648      	mov	r0, r9
 8006ade:	f00d ff45 	bl	801496c <strncmp>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d100      	bne.n	8006ae8 <setCommand+0x52c>
 8006ae6:	e0c4      	b.n	8006c72 <setCommand+0x6b6>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006ae8:	4979      	ldr	r1, [pc, #484]	; (8006cd0 <setCommand+0x714>)
 8006aea:	2205      	movs	r2, #5
 8006aec:	4648      	mov	r0, r9
 8006aee:	f00d ff3d 	bl	801496c <strncmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d100      	bne.n	8006af8 <setCommand+0x53c>
 8006af6:	e0bf      	b.n	8006c78 <setCommand+0x6bc>
 8006af8:	4976      	ldr	r1, [pc, #472]	; (8006cd4 <setCommand+0x718>)
 8006afa:	2202      	movs	r2, #2
 8006afc:	4648      	mov	r0, r9
 8006afe:	f00d ff35 	bl	801496c <strncmp>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d100      	bne.n	8006b08 <setCommand+0x54c>
 8006b06:	e0ba      	b.n	8006c7e <setCommand+0x6c2>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006b08:	4973      	ldr	r1, [pc, #460]	; (8006cd8 <setCommand+0x71c>)
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	f00d ff2d 	bl	801496c <strncmp>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d100      	bne.n	8006b18 <setCommand+0x55c>
 8006b16:	e0b5      	b.n	8006c84 <setCommand+0x6c8>
 8006b18:	4970      	ldr	r1, [pc, #448]	; (8006cdc <setCommand+0x720>)
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4648      	mov	r0, r9
 8006b1e:	f00d ff25 	bl	801496c <strncmp>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d100      	bne.n	8006b28 <setCommand+0x56c>
 8006b26:	e0f9      	b.n	8006d1c <setCommand+0x760>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006b28:	496d      	ldr	r1, [pc, #436]	; (8006ce0 <setCommand+0x724>)
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	4648      	mov	r0, r9
 8006b2e:	f00d ff1d 	bl	801496c <strncmp>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d100      	bne.n	8006b38 <setCommand+0x57c>
 8006b36:	e0f4      	b.n	8006d22 <setCommand+0x766>
 8006b38:	496a      	ldr	r1, [pc, #424]	; (8006ce4 <setCommand+0x728>)
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	f00d ff15 	bl	801496c <strncmp>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d100      	bne.n	8006b48 <setCommand+0x58c>
 8006b46:	e0ef      	b.n	8006d28 <setCommand+0x76c>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006b48:	4967      	ldr	r1, [pc, #412]	; (8006ce8 <setCommand+0x72c>)
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	4648      	mov	r0, r9
 8006b4e:	f00d ff0d 	bl	801496c <strncmp>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d100      	bne.n	8006b58 <setCommand+0x59c>
 8006b56:	e0ea      	b.n	8006d2e <setCommand+0x772>
 8006b58:	4964      	ldr	r1, [pc, #400]	; (8006cec <setCommand+0x730>)
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	4648      	mov	r0, r9
 8006b5e:	f00d ff05 	bl	801496c <strncmp>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d100      	bne.n	8006b68 <setCommand+0x5ac>
 8006b66:	e0e5      	b.n	8006d34 <setCommand+0x778>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006b68:	4961      	ldr	r1, [pc, #388]	; (8006cf0 <setCommand+0x734>)
 8006b6a:	2205      	movs	r2, #5
 8006b6c:	4648      	mov	r0, r9
 8006b6e:	f00d fefd 	bl	801496c <strncmp>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d100      	bne.n	8006b78 <setCommand+0x5bc>
 8006b76:	e0e0      	b.n	8006d3a <setCommand+0x77e>
 8006b78:	495e      	ldr	r1, [pc, #376]	; (8006cf4 <setCommand+0x738>)
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	4648      	mov	r0, r9
 8006b7e:	f00d fef5 	bl	801496c <strncmp>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d100      	bne.n	8006b88 <setCommand+0x5cc>
 8006b86:	e0db      	b.n	8006d40 <setCommand+0x784>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006b88:	495b      	ldr	r1, [pc, #364]	; (8006cf8 <setCommand+0x73c>)
 8006b8a:	2209      	movs	r2, #9
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	f00d feed 	bl	801496c <strncmp>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d100      	bne.n	8006b98 <setCommand+0x5dc>
 8006b96:	e0d6      	b.n	8006d46 <setCommand+0x78a>
 8006b98:	4958      	ldr	r1, [pc, #352]	; (8006cfc <setCommand+0x740>)
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	4648      	mov	r0, r9
 8006b9e:	f00d fee5 	bl	801496c <strncmp>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d100      	bne.n	8006ba8 <setCommand+0x5ec>
 8006ba6:	e0d1      	b.n	8006d4c <setCommand+0x790>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006ba8:	4955      	ldr	r1, [pc, #340]	; (8006d00 <setCommand+0x744>)
 8006baa:	2207      	movs	r2, #7
 8006bac:	4648      	mov	r0, r9
 8006bae:	f00d fedd 	bl	801496c <strncmp>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d100      	bne.n	8006bb8 <setCommand+0x5fc>
 8006bb6:	e0cc      	b.n	8006d52 <setCommand+0x796>
 8006bb8:	4952      	ldr	r1, [pc, #328]	; (8006d04 <setCommand+0x748>)
 8006bba:	2202      	movs	r2, #2
 8006bbc:	4648      	mov	r0, r9
 8006bbe:	f00d fed5 	bl	801496c <strncmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d100      	bne.n	8006bc8 <setCommand+0x60c>
 8006bc6:	e0c7      	b.n	8006d58 <setCommand+0x79c>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006bc8:	494f      	ldr	r1, [pc, #316]	; (8006d08 <setCommand+0x74c>)
 8006bca:	2208      	movs	r2, #8
 8006bcc:	4648      	mov	r0, r9
 8006bce:	f00d fecd 	bl	801496c <strncmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d100      	bne.n	8006bd8 <setCommand+0x61c>
 8006bd6:	e0c2      	b.n	8006d5e <setCommand+0x7a2>
 8006bd8:	494c      	ldr	r1, [pc, #304]	; (8006d0c <setCommand+0x750>)
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4648      	mov	r0, r9
 8006bde:	f00d fec5 	bl	801496c <strncmp>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d100      	bne.n	8006be8 <setCommand+0x62c>
 8006be6:	e0bd      	b.n	8006d64 <setCommand+0x7a8>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006be8:	4949      	ldr	r1, [pc, #292]	; (8006d10 <setCommand+0x754>)
 8006bea:	2208      	movs	r2, #8
 8006bec:	4648      	mov	r0, r9
 8006bee:	f00d febd 	bl	801496c <strncmp>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d100      	bne.n	8006bf8 <setCommand+0x63c>
 8006bf6:	e0b8      	b.n	8006d6a <setCommand+0x7ae>
 8006bf8:	4946      	ldr	r1, [pc, #280]	; (8006d14 <setCommand+0x758>)
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	4648      	mov	r0, r9
 8006bfe:	f00d feb5 	bl	801496c <strncmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d000      	beq.n	8006c08 <setCommand+0x64c>
 8006c06:	e0ec      	b.n	8006de2 <setCommand+0x826>
			temp82 =DECEMBER;
 8006c08:	230c      	movs	r3, #12
 8006c0a:	4699      	mov	r9, r3
 8006c0c:	e012      	b.n	8006c34 <setCommand+0x678>
			temp81 =TUESDAY;
 8006c0e:	2402      	movs	r4, #2
	BOS_Status result =BOS_OK;
 8006c10:	2500      	movs	r5, #0
 8006c12:	e736      	b.n	8006a82 <setCommand+0x4c6>
			temp81 =WEDNESDAY;
 8006c14:	2403      	movs	r4, #3
	BOS_Status result =BOS_OK;
 8006c16:	2500      	movs	r5, #0
 8006c18:	e733      	b.n	8006a82 <setCommand+0x4c6>
			temp81 =THURSDAY;
 8006c1a:	2404      	movs	r4, #4
	BOS_Status result =BOS_OK;
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	e730      	b.n	8006a82 <setCommand+0x4c6>
			temp81 =FRIDAY;
 8006c20:	2405      	movs	r4, #5
	BOS_Status result =BOS_OK;
 8006c22:	2500      	movs	r5, #0
 8006c24:	e72d      	b.n	8006a82 <setCommand+0x4c6>
			temp81 =SATURDAY;
 8006c26:	2406      	movs	r4, #6
	BOS_Status result =BOS_OK;
 8006c28:	2500      	movs	r5, #0
 8006c2a:	e72a      	b.n	8006a82 <setCommand+0x4c6>
			result =BOS_ERR_WrongValue;
 8006c2c:	2568      	movs	r5, #104	; 0x68
 8006c2e:	e728      	b.n	8006a82 <setCommand+0x4c6>
			temp82 =JANUARY;
 8006c30:	2301      	movs	r3, #1
 8006c32:	4699      	mov	r9, r3
		if(result == BOS_OK){
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	d000      	beq.n	8006c3a <setCommand+0x67e>
 8006c38:	e0b1      	b.n	8006d9e <setCommand+0x7e2>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006c3a:	1e73      	subs	r3, r6, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b1e      	cmp	r3, #30
 8006c40:	d900      	bls.n	8006c44 <setCommand+0x688>
 8006c42:	e0d6      	b.n	8006df2 <setCommand+0x836>
 8006c44:	23fa      	movs	r3, #250	; 0xfa
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4598      	cmp	r8, r3
 8006c4a:	d200      	bcs.n	8006c4e <setCommand+0x692>
 8006c4c:	e0d4      	b.n	8006df8 <setCommand+0x83c>
 8006c4e:	4b32      	ldr	r3, [pc, #200]	; (8006d18 <setCommand+0x75c>)
 8006c50:	4598      	cmp	r8, r3
 8006c52:	d800      	bhi.n	8006c56 <setCommand+0x69a>
 8006c54:	e08c      	b.n	8006d70 <setCommand+0x7b4>
				result =BOS_ERR_WrongValue;
 8006c56:	2568      	movs	r5, #104	; 0x68
 8006c58:	e4de      	b.n	8006618 <setCommand+0x5c>
			temp82 =JANUARY;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4699      	mov	r9, r3
 8006c5e:	e7e9      	b.n	8006c34 <setCommand+0x678>
			temp82 =FEBRUARY;
 8006c60:	2302      	movs	r3, #2
 8006c62:	4699      	mov	r9, r3
 8006c64:	e7e6      	b.n	8006c34 <setCommand+0x678>
 8006c66:	2302      	movs	r3, #2
 8006c68:	4699      	mov	r9, r3
 8006c6a:	e7e3      	b.n	8006c34 <setCommand+0x678>
			temp82 =MARCH;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	4699      	mov	r9, r3
 8006c70:	e7e0      	b.n	8006c34 <setCommand+0x678>
 8006c72:	2303      	movs	r3, #3
 8006c74:	4699      	mov	r9, r3
 8006c76:	e7dd      	b.n	8006c34 <setCommand+0x678>
			temp82 =APRIL;
 8006c78:	2304      	movs	r3, #4
 8006c7a:	4699      	mov	r9, r3
 8006c7c:	e7da      	b.n	8006c34 <setCommand+0x678>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	4699      	mov	r9, r3
 8006c82:	e7d7      	b.n	8006c34 <setCommand+0x678>
			temp82 =MAY;
 8006c84:	2305      	movs	r3, #5
 8006c86:	4699      	mov	r9, r3
 8006c88:	e7d4      	b.n	8006c34 <setCommand+0x678>
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	2000160c 	.word	0x2000160c
 8006c90:	0801b070 	.word	0x0801b070
 8006c94:	0801b074 	.word	0x0801b074
 8006c98:	2000084c 	.word	0x2000084c
 8006c9c:	0801b080 	.word	0x0801b080
 8006ca0:	0801b088 	.word	0x0801b088
 8006ca4:	0801b090 	.word	0x0801b090
 8006ca8:	0801b09c 	.word	0x0801b09c
 8006cac:	0801b0a8 	.word	0x0801b0a8
 8006cb0:	0801b0b0 	.word	0x0801b0b0
 8006cb4:	0801b0bc 	.word	0x0801b0bc
 8006cb8:	0801b0c4 	.word	0x0801b0c4
 8006cbc:	0801b0cc 	.word	0x0801b0cc
 8006cc0:	0801b0d0 	.word	0x0801b0d0
 8006cc4:	0801b0dc 	.word	0x0801b0dc
 8006cc8:	0801b0e0 	.word	0x0801b0e0
 8006ccc:	0801b0e8 	.word	0x0801b0e8
 8006cd0:	0801b0ec 	.word	0x0801b0ec
 8006cd4:	0801b0f4 	.word	0x0801b0f4
 8006cd8:	0801b0f8 	.word	0x0801b0f8
 8006cdc:	0801b0fc 	.word	0x0801b0fc
 8006ce0:	0801b100 	.word	0x0801b100
 8006ce4:	0801b108 	.word	0x0801b108
 8006ce8:	0801b10c 	.word	0x0801b10c
 8006cec:	0801b114 	.word	0x0801b114
 8006cf0:	0801b118 	.word	0x0801b118
 8006cf4:	0801b120 	.word	0x0801b120
 8006cf8:	0801b124 	.word	0x0801b124
 8006cfc:	0801b130 	.word	0x0801b130
 8006d00:	0801b134 	.word	0x0801b134
 8006d04:	0801b13c 	.word	0x0801b13c
 8006d08:	0801b140 	.word	0x0801b140
 8006d0c:	0801b14c 	.word	0x0801b14c
 8006d10:	0801b150 	.word	0x0801b150
 8006d14:	0801b15c 	.word	0x0801b15c
 8006d18:	00000834 	.word	0x00000834
 8006d1c:	2305      	movs	r3, #5
 8006d1e:	4699      	mov	r9, r3
 8006d20:	e788      	b.n	8006c34 <setCommand+0x678>
			temp82 =JUNE;
 8006d22:	2306      	movs	r3, #6
 8006d24:	4699      	mov	r9, r3
 8006d26:	e785      	b.n	8006c34 <setCommand+0x678>
 8006d28:	2306      	movs	r3, #6
 8006d2a:	4699      	mov	r9, r3
 8006d2c:	e782      	b.n	8006c34 <setCommand+0x678>
			temp82 =JULY;
 8006d2e:	2307      	movs	r3, #7
 8006d30:	4699      	mov	r9, r3
 8006d32:	e77f      	b.n	8006c34 <setCommand+0x678>
 8006d34:	2307      	movs	r3, #7
 8006d36:	4699      	mov	r9, r3
 8006d38:	e77c      	b.n	8006c34 <setCommand+0x678>
			temp82 =AUGUST;
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	e779      	b.n	8006c34 <setCommand+0x678>
 8006d40:	2308      	movs	r3, #8
 8006d42:	4699      	mov	r9, r3
 8006d44:	e776      	b.n	8006c34 <setCommand+0x678>
			temp82 =SEPTEMBER;
 8006d46:	2309      	movs	r3, #9
 8006d48:	4699      	mov	r9, r3
 8006d4a:	e773      	b.n	8006c34 <setCommand+0x678>
 8006d4c:	2309      	movs	r3, #9
 8006d4e:	4699      	mov	r9, r3
 8006d50:	e770      	b.n	8006c34 <setCommand+0x678>
			temp82 =OCTOBER;
 8006d52:	230a      	movs	r3, #10
 8006d54:	4699      	mov	r9, r3
 8006d56:	e76d      	b.n	8006c34 <setCommand+0x678>
 8006d58:	230a      	movs	r3, #10
 8006d5a:	4699      	mov	r9, r3
 8006d5c:	e76a      	b.n	8006c34 <setCommand+0x678>
			temp82 =NOVEMBER;
 8006d5e:	230b      	movs	r3, #11
 8006d60:	4699      	mov	r9, r3
 8006d62:	e767      	b.n	8006c34 <setCommand+0x678>
 8006d64:	230b      	movs	r3, #11
 8006d66:	4699      	mov	r9, r3
 8006d68:	e764      	b.n	8006c34 <setCommand+0x678>
			temp82 =DECEMBER;
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	4699      	mov	r9, r3
 8006d6e:	e761      	b.n	8006c34 <setCommand+0x678>
				GetTimeDate();
 8006d70:	f006 fe20 	bl	800d9b4 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006d74:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <setCommand+0x860>)
 8006d76:	220c      	movs	r2, #12
 8006d78:	569a      	ldrsb	r2, [r3, r2]
 8006d7a:	9204      	str	r2, [sp, #16]
 8006d7c:	7cda      	ldrb	r2, [r3, #19]
 8006d7e:	9203      	str	r2, [sp, #12]
 8006d80:	7c9a      	ldrb	r2, [r3, #18]
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	7c5a      	ldrb	r2, [r3, #17]
 8006d86:	9201      	str	r2, [sp, #4]
 8006d88:	7c1b      	ldrb	r3, [r3, #16]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	0023      	movs	r3, r4
 8006d8e:	4642      	mov	r2, r8
 8006d90:	0031      	movs	r1, r6
 8006d92:	4648      	mov	r0, r9
 8006d94:	f006 fdae 	bl	800d8f4 <BOS_CalendarConfig>
 8006d98:	0005      	movs	r5, r0
 8006d9a:	e000      	b.n	8006d9e <setCommand+0x7e2>
				result =BOS_ERR_WrongValue;
 8006d9c:	2568      	movs	r5, #104	; 0x68
	if(result == BOS_OK){
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	d000      	beq.n	8006da4 <setCommand+0x7e8>
 8006da2:	e439      	b.n	8006618 <setCommand+0x5c>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006da4:	491e      	ldr	r1, [pc, #120]	; (8006e20 <setCommand+0x864>)
 8006da6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006daa:	18d3      	adds	r3, r2, r3
 8006dac:	2000      	movs	r0, #0
 8006dae:	7018      	strb	r0, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006db0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006db2:	491c      	ldr	r1, [pc, #112]	; (8006e24 <setCommand+0x868>)
 8006db4:	0038      	movs	r0, r7
 8006db6:	f00d fd29 	bl	801480c <sprintf>
		if(extraMessage == 1){
 8006dba:	2d01      	cmp	r5, #1
 8006dbc:	d000      	beq.n	8006dc0 <setCommand+0x804>
 8006dbe:	e433      	b.n	8006628 <setCommand+0x6c>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006dc0:	0038      	movs	r0, r7
 8006dc2:	f7f9 f9a9 	bl	8000118 <strlen>
 8006dc6:	1838      	adds	r0, r7, r0
 8006dc8:	4917      	ldr	r1, [pc, #92]	; (8006e28 <setCommand+0x86c>)
 8006dca:	2230      	movs	r2, #48	; 0x30
 8006dcc:	f00d fed7 	bl	8014b7e <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006dd0:	0038      	movs	r0, r7
 8006dd2:	f7f9 f9a1 	bl	8000118 <strlen>
 8006dd6:	1838      	adds	r0, r7, r0
 8006dd8:	4914      	ldr	r1, [pc, #80]	; (8006e2c <setCommand+0x870>)
 8006dda:	22b2      	movs	r2, #178	; 0xb2
 8006ddc:	f00d fecf 	bl	8014b7e <memcpy>
 8006de0:	e422      	b.n	8006628 <setCommand+0x6c>
			result =BOS_ERR_WrongValue;
 8006de2:	2568      	movs	r5, #104	; 0x68
 8006de4:	e7db      	b.n	8006d9e <setCommand+0x7e2>
				result =BOS_ERR_WrongValue;
 8006de6:	2568      	movs	r5, #104	; 0x68
 8006de8:	f7ff fc16 	bl	8006618 <setCommand+0x5c>
 8006dec:	2568      	movs	r5, #104	; 0x68
 8006dee:	f7ff fc13 	bl	8006618 <setCommand+0x5c>
				result =BOS_ERR_WrongValue;
 8006df2:	2568      	movs	r5, #104	; 0x68
 8006df4:	f7ff fc10 	bl	8006618 <setCommand+0x5c>
 8006df8:	2568      	movs	r5, #104	; 0x68
 8006dfa:	f7ff fc0d 	bl	8006618 <setCommand+0x5c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006dfe:	490c      	ldr	r1, [pc, #48]	; (8006e30 <setCommand+0x874>)
 8006e00:	2213      	movs	r2, #19
 8006e02:	0038      	movs	r0, r7
 8006e04:	f00d febb 	bl	8014b7e <memcpy>
 8006e08:	f7ff fc0e 	bl	8006628 <setCommand+0x6c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006e0c:	4909      	ldr	r1, [pc, #36]	; (8006e34 <setCommand+0x878>)
 8006e0e:	220f      	movs	r2, #15
 8006e10:	0038      	movs	r0, r7
 8006e12:	f00d feb4 	bl	8014b7e <memcpy>
 8006e16:	f7ff fc07 	bl	8006628 <setCommand+0x6c>
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	2000084c 	.word	0x2000084c
 8006e20:	2000160c 	.word	0x2000160c
 8006e24:	0801b160 	.word	0x0801b160
 8006e28:	0801b174 	.word	0x0801b174
 8006e2c:	0801b1a4 	.word	0x0801b1a4
 8006e30:	0801afa0 	.word	0x0801afa0
 8006e34:	0801b00c 	.word	0x0801b00c

08006e38 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e38:	b530      	push	{r4, r5, lr}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	0004      	movs	r4, r0
 8006e3e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e44:	aa01      	add	r2, sp, #4
 8006e46:	2101      	movs	r1, #1
 8006e48:	f007 faf6 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006e4c:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <removebuttonCommand+0x4c>)
 8006e4e:	6558      	str	r0, [r3, #84]	; 0x54
	if(pcParameterString1[0] == 'p'){
 8006e50:	2300      	movs	r3, #0
 8006e52:	56c3      	ldrsb	r3, [r0, r3]
 8006e54:	2b70      	cmp	r3, #112	; 0x70
 8006e56:	d008      	beq.n	8006e6a <removebuttonCommand+0x32>
	uint8_t port =0;
 8006e58:	2500      	movs	r5, #0
	result =RemovePortButton(port);
 8006e5a:	0028      	movs	r0, r5
 8006e5c:	f005 fb12 	bl	800c484 <RemovePortButton>
	if(result == BOS_OK){
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d007      	beq.n	8006e74 <removebuttonCommand+0x3c>
}
 8006e64:	2000      	movs	r0, #0
 8006e66:	b003      	add	sp, #12
 8006e68:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f00c f93f 	bl	80130ee <atol>
 8006e70:	b2c5      	uxtb	r5, r0
 8006e72:	e7f2      	b.n	8006e5a <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006e74:	4904      	ldr	r1, [pc, #16]	; (8006e88 <removebuttonCommand+0x50>)
 8006e76:	002b      	movs	r3, r5
 8006e78:	002a      	movs	r2, r5
 8006e7a:	0020      	movs	r0, r4
 8006e7c:	f00d fcc6 	bl	801480c <sprintf>
 8006e80:	e7f0      	b.n	8006e64 <removebuttonCommand+0x2c>
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	2000160c 	.word	0x2000160c
 8006e88:	0801b258 	.word	0x0801b258

08006e8c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	0005      	movs	r5, r0
 8006e92:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	9303      	str	r3, [sp, #12]
 8006e98:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e9a:	aa03      	add	r2, sp, #12
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	0030      	movs	r0, r6
 8006ea0:	f007 faca 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006ea4:	0004      	movs	r4, r0
 8006ea6:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <addbuttonCommand+0xb8>)
 8006ea8:	6598      	str	r0, [r3, #88]	; 0x58
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006eaa:	9f03      	ldr	r7, [sp, #12]
 8006eac:	4926      	ldr	r1, [pc, #152]	; (8006f48 <addbuttonCommand+0xbc>)
 8006eae:	003a      	movs	r2, r7
 8006eb0:	f00d fd5c 	bl	801496c <strncmp>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d016      	beq.n	8006ee6 <addbuttonCommand+0x5a>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006eb8:	4924      	ldr	r1, [pc, #144]	; (8006f4c <addbuttonCommand+0xc0>)
 8006eba:	003a      	movs	r2, r7
 8006ebc:	0020      	movs	r0, r4
 8006ebe:	f00d fd55 	bl	801496c <strncmp>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d025      	beq.n	8006f12 <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006ec6:	4922      	ldr	r1, [pc, #136]	; (8006f50 <addbuttonCommand+0xc4>)
 8006ec8:	003a      	movs	r2, r7
 8006eca:	0020      	movs	r0, r4
 8006ecc:	f00d fd4e 	bl	801496c <strncmp>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d020      	beq.n	8006f16 <addbuttonCommand+0x8a>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006ed4:	491f      	ldr	r1, [pc, #124]	; (8006f54 <addbuttonCommand+0xc8>)
 8006ed6:	003a      	movs	r2, r7
 8006ed8:	0020      	movs	r0, r4
 8006eda:	f00d fd47 	bl	801496c <strncmp>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d01b      	beq.n	8006f1a <addbuttonCommand+0x8e>
	uint8_t port =0, type =0;
 8006ee2:	2700      	movs	r7, #0
 8006ee4:	e000      	b.n	8006ee8 <addbuttonCommand+0x5c>
		type =MOMENTARY_NO;
 8006ee6:	2701      	movs	r7, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006ee8:	aa02      	add	r2, sp, #8
 8006eea:	2102      	movs	r1, #2
 8006eec:	0030      	movs	r0, r6
 8006eee:	f007 faa3 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <addbuttonCommand+0xb8>)
 8006ef4:	65d8      	str	r0, [r3, #92]	; 0x5c
	if(pcParameterString2[0] == 'p'){
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	56c3      	ldrsb	r3, [r0, r3]
 8006efa:	2b70      	cmp	r3, #112	; 0x70
 8006efc:	d00f      	beq.n	8006f1e <addbuttonCommand+0x92>
	uint8_t port =0, type =0;
 8006efe:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 8006f00:	0021      	movs	r1, r4
 8006f02:	0038      	movs	r0, r7
 8006f04:	f005 fa2c 	bl	800c360 <AddPortButton>
	if(result == BOS_OK){
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d00d      	beq.n	8006f28 <addbuttonCommand+0x9c>
}
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	b005      	add	sp, #20
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 8006f12:	2702      	movs	r7, #2
 8006f14:	e7e8      	b.n	8006ee8 <addbuttonCommand+0x5c>
		type =ONOFF_NO;
 8006f16:	2703      	movs	r7, #3
 8006f18:	e7e6      	b.n	8006ee8 <addbuttonCommand+0x5c>
		type =ONOFF_NC;
 8006f1a:	2704      	movs	r7, #4
 8006f1c:	e7e4      	b.n	8006ee8 <addbuttonCommand+0x5c>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f00c f8e5 	bl	80130ee <atol>
 8006f24:	b2c4      	uxtb	r4, r0
 8006f26:	e7eb      	b.n	8006f00 <addbuttonCommand+0x74>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <addbuttonCommand+0xb8>)
 8006f2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	18d3      	adds	r3, r2, r3
 8006f30:	2100      	movs	r1, #0
 8006f32:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006f34:	4908      	ldr	r1, [pc, #32]	; (8006f58 <addbuttonCommand+0xcc>)
 8006f36:	9400      	str	r4, [sp, #0]
 8006f38:	0023      	movs	r3, r4
 8006f3a:	0028      	movs	r0, r5
 8006f3c:	f00d fc66 	bl	801480c <sprintf>
 8006f40:	e7e4      	b.n	8006f0c <addbuttonCommand+0x80>
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	2000160c 	.word	0x2000160c
 8006f48:	0801b280 	.word	0x0801b280
 8006f4c:	0801b290 	.word	0x0801b290
 8006f50:	0801b2a0 	.word	0x0801b2a0
 8006f54:	0801b2ac 	.word	0x0801b2ac
 8006f58:	0801b2b8 	.word	0x0801b2b8

08006f5c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5e:	46de      	mov	lr, fp
 8006f60:	4657      	mov	r7, sl
 8006f62:	464e      	mov	r6, r9
 8006f64:	4645      	mov	r5, r8
 8006f66:	b5e0      	push	{r5, r6, r7, lr}
 8006f68:	b099      	sub	sp, #100	; 0x64
 8006f6a:	9007      	str	r0, [sp, #28]
 8006f6c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006f6e:	2500      	movs	r5, #0
 8006f70:	9517      	str	r5, [sp, #92]	; 0x5c
 8006f72:	9516      	str	r5, [sp, #88]	; 0x58
 8006f74:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006f76:	9514      	str	r5, [sp, #80]	; 0x50
 8006f78:	9513      	str	r5, [sp, #76]	; 0x4c
 8006f7a:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006f7c:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006f7e:	950e      	str	r5, [sp, #56]	; 0x38
 8006f80:	2206      	movs	r2, #6
 8006f82:	2100      	movs	r1, #0
 8006f84:	a80f      	add	r0, sp, #60	; 0x3c
 8006f86:	f00d fcce 	bl	8014926 <memset>
 8006f8a:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	2100      	movs	r1, #0
 8006f90:	a80c      	add	r0, sp, #48	; 0x30
 8006f92:	f00d fcc8 	bl	8014926 <memset>
 8006f96:	9508      	str	r5, [sp, #32]
 8006f98:	2206      	movs	r2, #6
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	a809      	add	r0, sp, #36	; 0x24
 8006f9e:	f00d fcc2 	bl	8014926 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fa2:	aa17      	add	r2, sp, #92	; 0x5c
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	0020      	movs	r0, r4
 8006fa8:	f007 fa46 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006fac:	4b54      	ldr	r3, [pc, #336]	; (8007100 <scastCommand+0x1a4>)
 8006fae:	6618      	str	r0, [r3, #96]	; 0x60
	if(pcParameterString1[0] == 'P'){
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	56c3      	ldrsb	r3, [r0, r3]
 8006fb4:	2b50      	cmp	r3, #80	; 0x50
 8006fb6:	d04f      	beq.n	8007058 <scastCommand+0xfc>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006fbc:	aa16      	add	r2, sp, #88	; 0x58
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	0020      	movs	r0, r4
 8006fc2:	f007 fa39 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006fc6:	0001      	movs	r1, r0
 8006fc8:	4d4d      	ldr	r5, [pc, #308]	; (8007100 <scastCommand+0x1a4>)
 8006fca:	6668      	str	r0, [r5, #100]	; 0x64
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006fcc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fce:	a80e      	add	r0, sp, #56	; 0x38
 8006fd0:	f00d fcdd 	bl	801498e <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006fd4:	a80e      	add	r0, sp, #56	; 0x38
 8006fd6:	f7fd fa27 	bl	8004428 <GetID>
 8006fda:	b2c6      	uxtb	r6, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006fdc:	aa15      	add	r2, sp, #84	; 0x54
 8006fde:	2103      	movs	r1, #3
 8006fe0:	0020      	movs	r0, r4
 8006fe2:	f007 fa29 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006fe6:	66a8      	str	r0, [r5, #104]	; 0x68
	if(pcParameterString3[0] == 'p'){
 8006fe8:	2300      	movs	r3, #0
 8006fea:	56c3      	ldrsb	r3, [r0, r3]
 8006fec:	2b70      	cmp	r3, #112	; 0x70
 8006fee:	d039      	beq.n	8007064 <scastCommand+0x108>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4699      	mov	r9, r3
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006ff4:	aa14      	add	r2, sp, #80	; 0x50
 8006ff6:	2104      	movs	r1, #4
 8006ff8:	0020      	movs	r0, r4
 8006ffa:	f007 fa1d 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8006ffe:	0001      	movs	r1, r0
 8007000:	4b3f      	ldr	r3, [pc, #252]	; (8007100 <scastCommand+0x1a4>)
 8007002:	469a      	mov	sl, r3
 8007004:	66d8      	str	r0, [r3, #108]	; 0x6c
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8007006:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007008:	a80b      	add	r0, sp, #44	; 0x2c
 800700a:	f00d fcc0 	bl	801498e <strncpy>
	dstM =(uint8_t )GetID(par2);
 800700e:	a80b      	add	r0, sp, #44	; 0x2c
 8007010:	f7fd fa0a 	bl	8004428 <GetID>
 8007014:	b2c7      	uxtb	r7, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8007016:	aa13      	add	r2, sp, #76	; 0x4c
 8007018:	2105      	movs	r1, #5
 800701a:	0020      	movs	r0, r4
 800701c:	f007 fa0c 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8007020:	0005      	movs	r5, r0
 8007022:	4653      	mov	r3, sl
 8007024:	6718      	str	r0, [r3, #112]	; 0x70
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8007026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007028:	469b      	mov	fp, r3
 800702a:	4936      	ldr	r1, [pc, #216]	; (8007104 <scastCommand+0x1a8>)
 800702c:	001a      	movs	r2, r3
 800702e:	f00d fc9d 	bl	801496c <strncmp>
 8007032:	2800      	cmp	r0, #0
 8007034:	d01c      	beq.n	8007070 <scastCommand+0x114>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8007036:	4934      	ldr	r1, [pc, #208]	; (8007108 <scastCommand+0x1ac>)
 8007038:	465a      	mov	r2, fp
 800703a:	0028      	movs	r0, r5
 800703c:	f00d fc96 	bl	801496c <strncmp>
 8007040:	2800      	cmp	r0, #0
 8007042:	d046      	beq.n	80070d2 <scastCommand+0x176>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8007044:	4931      	ldr	r1, [pc, #196]	; (800710c <scastCommand+0x1b0>)
 8007046:	465a      	mov	r2, fp
 8007048:	0028      	movs	r0, r5
 800704a:	f00d fc8f 	bl	801496c <strncmp>
 800704e:	2800      	cmp	r0, #0
 8007050:	d042      	beq.n	80070d8 <scastCommand+0x17c>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007052:	2300      	movs	r3, #0
 8007054:	469a      	mov	sl, r3
 8007056:	e00d      	b.n	8007074 <scastCommand+0x118>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007058:	3001      	adds	r0, #1
 800705a:	f00c f848 	bl	80130ee <atol>
 800705e:	b2c3      	uxtb	r3, r0
 8007060:	4698      	mov	r8, r3
 8007062:	e7ab      	b.n	8006fbc <scastCommand+0x60>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007064:	3001      	adds	r0, #1
 8007066:	f00c f842 	bl	80130ee <atol>
 800706a:	b2c3      	uxtb	r3, r0
 800706c:	4699      	mov	r9, r3
 800706e:	e7c1      	b.n	8006ff4 <scastCommand+0x98>
		direction =FORWARD;
 8007070:	2300      	movs	r3, #0
 8007072:	469a      	mov	sl, r3
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8007074:	465a      	mov	r2, fp
 8007076:	0029      	movs	r1, r5
 8007078:	a808      	add	r0, sp, #32
 800707a:	f00d fc88 	bl	801498e <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 800707e:	aa12      	add	r2, sp, #72	; 0x48
 8007080:	2106      	movs	r1, #6
 8007082:	0020      	movs	r0, r4
 8007084:	f007 f9d8 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8007088:	4d1d      	ldr	r5, [pc, #116]	; (8007100 <scastCommand+0x1a4>)
 800708a:	6768      	str	r0, [r5, #116]	; 0x74
	count =(uint32_t )atol((char* )pcParameterString6);
 800708c:	f00c f82f 	bl	80130ee <atol>
 8007090:	4683      	mov	fp, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8007092:	aa11      	add	r2, sp, #68	; 0x44
 8007094:	2107      	movs	r1, #7
 8007096:	0020      	movs	r0, r4
 8007098:	f007 f9ce 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800709c:	67a8      	str	r0, [r5, #120]	; 0x78
	timeout =(uint32_t )atol((char* )pcParameterString7);
 800709e:	f00c f826 	bl	80130ee <atol>
 80070a2:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 80070a4:	2300      	movs	r3, #0
 80070a6:	9303      	str	r3, [sp, #12]
 80070a8:	9002      	str	r0, [sp, #8]
 80070aa:	465b      	mov	r3, fp
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	4653      	mov	r3, sl
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	003b      	movs	r3, r7
 80070b4:	464a      	mov	r2, r9
 80070b6:	0031      	movs	r1, r6
 80070b8:	4640      	mov	r0, r8
 80070ba:	f001 fa79 	bl	80085b0 <StartScastDMAStream>
	if(result == BOS_OK){
 80070be:	2800      	cmp	r0, #0
 80070c0:	d00d      	beq.n	80070de <scastCommand+0x182>
}
 80070c2:	2000      	movs	r0, #0
 80070c4:	b019      	add	sp, #100	; 0x64
 80070c6:	bcf0      	pop	{r4, r5, r6, r7}
 80070c8:	46bb      	mov	fp, r7
 80070ca:	46b2      	mov	sl, r6
 80070cc:	46a9      	mov	r9, r5
 80070ce:	46a0      	mov	r8, r4
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 80070d2:	2301      	movs	r3, #1
 80070d4:	469a      	mov	sl, r3
 80070d6:	e7cd      	b.n	8007074 <scastCommand+0x118>
		direction =BIDIRECTIONAL;
 80070d8:	2302      	movs	r3, #2
 80070da:	469a      	mov	sl, r3
 80070dc:	e7ca      	b.n	8007074 <scastCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 80070de:	490c      	ldr	r1, [pc, #48]	; (8007110 <scastCommand+0x1b4>)
 80070e0:	9404      	str	r4, [sp, #16]
 80070e2:	465b      	mov	r3, fp
 80070e4:	9303      	str	r3, [sp, #12]
 80070e6:	ab0b      	add	r3, sp, #44	; 0x2c
 80070e8:	9302      	str	r3, [sp, #8]
 80070ea:	464b      	mov	r3, r9
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	ab0e      	add	r3, sp, #56	; 0x38
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4643      	mov	r3, r8
 80070f4:	aa08      	add	r2, sp, #32
 80070f6:	9807      	ldr	r0, [sp, #28]
 80070f8:	f00d fb88 	bl	801480c <sprintf>
 80070fc:	e7e1      	b.n	80070c2 <scastCommand+0x166>
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	2000160c 	.word	0x2000160c
 8007104:	0801b2ec 	.word	0x0801b2ec
 8007108:	0801b2f4 	.word	0x0801b2f4
 800710c:	0801b300 	.word	0x0801b300
 8007110:	0801b310 	.word	0x0801b310

08007114 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	b083      	sub	sp, #12
 8007118:	0004      	movs	r4, r0
	if(N > 1)
 800711a:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <infoCommand+0xa0>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d832      	bhi.n	8007188 <infoCommand+0x74>
	BOS_Status result =BOS_OK;
 8007122:	2700      	movs	r7, #0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8007124:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <infoCommand+0xa0>)
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	4923      	ldr	r1, [pc, #140]	; (80071b8 <infoCommand+0xa4>)
 800712a:	0020      	movs	r0, r4
 800712c:	f00d fb6e 	bl	801480c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007130:	0020      	movs	r0, r4
 8007132:	f7f8 fff1 	bl	8000118 <strlen>
 8007136:	b282      	uxth	r2, r0
 8007138:	4d20      	ldr	r5, [pc, #128]	; (80071bc <infoCommand+0xa8>)
 800713a:	7828      	ldrb	r0, [r5, #0]
 800713c:	2601      	movs	r6, #1
 800713e:	4276      	negs	r6, r6
 8007140:	9600      	str	r6, [sp, #0]
 8007142:	2332      	movs	r3, #50	; 0x32
 8007144:	0021      	movs	r1, r4
 8007146:	f006 fecb 	bl	800dee0 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 800714a:	491d      	ldr	r1, [pc, #116]	; (80071c0 <infoCommand+0xac>)
 800714c:	2213      	movs	r2, #19
 800714e:	0020      	movs	r0, r4
 8007150:	f00d fd15 	bl	8014b7e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007154:	0020      	movs	r0, r4
 8007156:	f7f8 ffdf 	bl	8000118 <strlen>
 800715a:	b282      	uxth	r2, r0
 800715c:	7828      	ldrb	r0, [r5, #0]
 800715e:	9600      	str	r6, [sp, #0]
 8007160:	2332      	movs	r3, #50	; 0x32
 8007162:	0021      	movs	r1, r4
 8007164:	f006 febc 	bl	800dee0 <writePxMutex>
	DisplayTopology(PcPort);
 8007168:	7828      	ldrb	r0, [r5, #0]
 800716a:	f7fc fea7 	bl	8003ebc <DisplayTopology>
	DisplayPortsDir(PcPort);
 800716e:	7828      	ldrb	r0, [r5, #0]
 8007170:	f7fc ff7a 	bl	8004068 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8007174:	2f02      	cmp	r7, #2
 8007176:	d00b      	beq.n	8007190 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8007178:	4912      	ldr	r1, [pc, #72]	; (80071c4 <infoCommand+0xb0>)
 800717a:	2202      	movs	r2, #2
 800717c:	0020      	movs	r0, r4
 800717e:	f00d fcfe 	bl	8014b7e <memcpy>
}
 8007182:	2000      	movs	r0, #0
 8007184:	b003      	add	sp, #12
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8007188:	f006 ff40 	bl	800e00c <ReadPortsDir>
 800718c:	0007      	movs	r7, r0
 800718e:	e7c9      	b.n	8007124 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8007190:	490d      	ldr	r1, [pc, #52]	; (80071c8 <infoCommand+0xb4>)
 8007192:	2244      	movs	r2, #68	; 0x44
 8007194:	0020      	movs	r0, r4
 8007196:	f00d fcf2 	bl	8014b7e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800719a:	0020      	movs	r0, r4
 800719c:	f7f8 ffbc 	bl	8000118 <strlen>
 80071a0:	b282      	uxth	r2, r0
 80071a2:	4b06      	ldr	r3, [pc, #24]	; (80071bc <infoCommand+0xa8>)
 80071a4:	7818      	ldrb	r0, [r3, #0]
 80071a6:	0033      	movs	r3, r6
 80071a8:	9600      	str	r6, [sp, #0]
 80071aa:	3333      	adds	r3, #51	; 0x33
 80071ac:	0021      	movs	r1, r4
 80071ae:	f006 fe97 	bl	800dee0 <writePxMutex>
 80071b2:	e7e1      	b.n	8007178 <infoCommand+0x64>
 80071b4:	20000008 	.word	0x20000008
 80071b8:	0801b398 	.word	0x0801b398
 80071bc:	20000958 	.word	0x20000958
 80071c0:	0801b3b4 	.word	0x0801b3b4
 80071c4:	08019edc 	.word	0x08019edc
 80071c8:	0801b3c8 	.word	0x0801b3c8

080071cc <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071cc:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 80071ce:	2000      	movs	r0, #0
 80071d0:	f7fc ffb4 	bl	800413c <DisplayModuleStatus>
}
 80071d4:	2000      	movs	r0, #0
 80071d6:	bd10      	pop	{r4, pc}

080071d8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071da:	46ce      	mov	lr, r9
 80071dc:	4647      	mov	r7, r8
 80071de:	b580      	push	{r7, lr}
 80071e0:	b08f      	sub	sp, #60	; 0x3c
 80071e2:	0007      	movs	r7, r0
 80071e4:	4690      	mov	r8, r2
	char module[MaxLengthOfAlias + 30] ={0};
 80071e6:	2400      	movs	r4, #0
 80071e8:	9404      	str	r4, [sp, #16]
 80071ea:	2223      	movs	r2, #35	; 0x23
 80071ec:	2100      	movs	r1, #0
 80071ee:	a805      	add	r0, sp, #20
 80071f0:	f00d fb99 	bl	8014926 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 80071f4:	9401      	str	r4, [sp, #4]
 80071f6:	2206      	movs	r2, #6
 80071f8:	2100      	movs	r1, #0
 80071fa:	a802      	add	r0, sp, #8
 80071fc:	f00d fb93 	bl	8014926 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007200:	4c5b      	ldr	r4, [pc, #364]	; (8007370 <groupCommand+0x198>)
 8007202:	0022      	movs	r2, r4
 8007204:	327c      	adds	r2, #124	; 0x7c
 8007206:	2101      	movs	r1, #1
 8007208:	4640      	mov	r0, r8
 800720a:	f007 f915 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800720e:	0001      	movs	r1, r0
 8007210:	4b58      	ldr	r3, [pc, #352]	; (8007374 <groupCommand+0x19c>)
 8007212:	6018      	str	r0, [r3, #0]
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8007214:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007216:	a801      	add	r0, sp, #4
 8007218:	f00d fbb9 	bl	801498e <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 800721c:	2400      	movs	r4, #0
 800721e:	2c09      	cmp	r4, #9
 8007220:	d80c      	bhi.n	800723c <groupCommand+0x64>
		if(!strcmp(alias,groupAlias[i])){
 8007222:	00a1      	lsls	r1, r4, #2
 8007224:	1909      	adds	r1, r1, r4
 8007226:	0049      	lsls	r1, r1, #1
 8007228:	4b53      	ldr	r3, [pc, #332]	; (8007378 <groupCommand+0x1a0>)
 800722a:	18c9      	adds	r1, r1, r3
 800722c:	a801      	add	r0, sp, #4
 800722e:	f7f8 ff69 	bl	8000104 <strcmp>
 8007232:	2800      	cmp	r0, #0
 8007234:	d016      	beq.n	8007264 <groupCommand+0x8c>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8007236:	3401      	adds	r4, #1
 8007238:	b2e4      	uxtb	r4, r4
 800723a:	e7f0      	b.n	800721e <groupCommand+0x46>
	type =1;
 800723c:	2301      	movs	r3, #1
 800723e:	4699      	mov	r9, r3
	count =2;
 8007240:	4c4c      	ldr	r4, [pc, #304]	; (8007374 <groupCommand+0x19c>)
 8007242:	2302      	movs	r3, #2
 8007244:	7123      	strb	r3, [r4, #4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8007246:	494d      	ldr	r1, [pc, #308]	; (800737c <groupCommand+0x1a4>)
 8007248:	220a      	movs	r2, #10
 800724a:	0038      	movs	r0, r7
 800724c:	f00d fc97 	bl	8014b7e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8007250:	0022      	movs	r2, r4
 8007252:	3208      	adds	r2, #8
 8007254:	2102      	movs	r1, #2
 8007256:	4640      	mov	r0, r8
 8007258:	f007 f8ee 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800725c:	60e0      	str	r0, [r4, #12]
	int16_t modID =0, type =0;
 800725e:	2600      	movs	r6, #0
	BOS_Status result =BOS_OK;
 8007260:	2500      	movs	r5, #0
	while(pcParameterString != NULL){
 8007262:	e010      	b.n	8007286 <groupCommand+0xae>
			type =0;
 8007264:	2300      	movs	r3, #0
 8007266:	4699      	mov	r9, r3
 8007268:	e7ea      	b.n	8007240 <groupCommand+0x68>
		strcat((char* )pcWriteBuffer,module);
 800726a:	a904      	add	r1, sp, #16
 800726c:	0038      	movs	r0, r7
 800726e:	f00d fb62 	bl	8014936 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8007272:	3401      	adds	r4, #1
 8007274:	b261      	sxtb	r1, r4
 8007276:	4c3f      	ldr	r4, [pc, #252]	; (8007374 <groupCommand+0x19c>)
 8007278:	7121      	strb	r1, [r4, #4]
 800727a:	0022      	movs	r2, r4
 800727c:	3208      	adds	r2, #8
 800727e:	4640      	mov	r0, r8
 8007280:	f007 f8da 	bl	800e438 <FreeRTOS_CLIGetParameter>
 8007284:	60e0      	str	r0, [r4, #12]
	while(pcParameterString != NULL){
 8007286:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <groupCommand+0x19c>)
 8007288:	68d9      	ldr	r1, [r3, #12]
 800728a:	2900      	cmp	r1, #0
 800728c:	d021      	beq.n	80072d2 <groupCommand+0xfa>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 800728e:	4b39      	ldr	r3, [pc, #228]	; (8007374 <groupCommand+0x19c>)
 8007290:	689e      	ldr	r6, [r3, #8]
 8007292:	ac04      	add	r4, sp, #16
 8007294:	0032      	movs	r2, r6
 8007296:	0020      	movs	r0, r4
 8007298:	f00d fb79 	bl	801498e <strncpy>
		module[xParameterStringLength] ='\0';
 800729c:	2300      	movs	r3, #0
 800729e:	55a3      	strb	r3, [r4, r6]
		modID =GetID(module);
 80072a0:	0020      	movs	r0, r4
 80072a2:	f7fd f8c1 	bl	8004428 <GetID>
 80072a6:	1e06      	subs	r6, r0, #0
		if(modID < 0)
 80072a8:	db13      	blt.n	80072d2 <groupCommand+0xfa>
		result =AddModuleToGroup(modID,alias);
 80072aa:	b2c0      	uxtb	r0, r0
 80072ac:	a901      	add	r1, sp, #4
 80072ae:	f7fd f985 	bl	80045bc <AddModuleToGroup>
 80072b2:	1e05      	subs	r5, r0, #0
		if(result != BOS_OK)
 80072b4:	d10d      	bne.n	80072d2 <groupCommand+0xfa>
		if(count > 2)
 80072b6:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <groupCommand+0x19c>)
 80072b8:	2404      	movs	r4, #4
 80072ba:	571c      	ldrsb	r4, [r3, r4]
 80072bc:	2c02      	cmp	r4, #2
 80072be:	ddd4      	ble.n	800726a <groupCommand+0x92>
			strcat((char* )pcWriteBuffer,", ");
 80072c0:	0038      	movs	r0, r7
 80072c2:	f7f8 ff29 	bl	8000118 <strlen>
 80072c6:	1838      	adds	r0, r7, r0
 80072c8:	492d      	ldr	r1, [pc, #180]	; (8007380 <groupCommand+0x1a8>)
 80072ca:	2203      	movs	r2, #3
 80072cc:	f00d fc57 	bl	8014b7e <memcpy>
 80072d0:	e7cb      	b.n	800726a <groupCommand+0x92>
	if(modID < 0)
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	db1a      	blt.n	800730c <groupCommand+0x134>
	else if(count == 2)
 80072d6:	4b27      	ldr	r3, [pc, #156]	; (8007374 <groupCommand+0x19c>)
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	b25b      	sxtb	r3, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d020      	beq.n	8007322 <groupCommand+0x14a>
	else if(result == BOS_OK && type){
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d102      	bne.n	80072ea <groupCommand+0x112>
 80072e4:	464b      	mov	r3, r9
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d121      	bne.n	800732e <groupCommand+0x156>
	else if(result == BOS_OK && !type){
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	d102      	bne.n	80072f4 <groupCommand+0x11c>
 80072ee:	464b      	mov	r3, r9
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d026      	beq.n	8007342 <groupCommand+0x16a>
	else if(result == BOS_ERR_Keyword)
 80072f4:	2d06      	cmp	r5, #6
 80072f6:	d02e      	beq.n	8007356 <groupCommand+0x17e>
	else if(result == BOS_ERR_ExistingAlias)
 80072f8:	2d07      	cmp	r5, #7
 80072fa:	d032      	beq.n	8007362 <groupCommand+0x18a>
	else if(result == BOS_ERR_ExistingCmd)
 80072fc:	2d08      	cmp	r5, #8
 80072fe:	d10a      	bne.n	8007316 <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007300:	4920      	ldr	r1, [pc, #128]	; (8007384 <groupCommand+0x1ac>)
 8007302:	aa01      	add	r2, sp, #4
 8007304:	0038      	movs	r0, r7
 8007306:	f00d fa81 	bl	801480c <sprintf>
 800730a:	e004      	b.n	8007316 <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 800730c:	491e      	ldr	r1, [pc, #120]	; (8007388 <groupCommand+0x1b0>)
 800730e:	aa04      	add	r2, sp, #16
 8007310:	0038      	movs	r0, r7
 8007312:	f00d fa7b 	bl	801480c <sprintf>
}
 8007316:	2000      	movs	r0, #0
 8007318:	b00f      	add	sp, #60	; 0x3c
 800731a:	bcc0      	pop	{r6, r7}
 800731c:	46b9      	mov	r9, r7
 800731e:	46b0      	mov	r8, r6
 8007320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007322:	491a      	ldr	r1, [pc, #104]	; (800738c <groupCommand+0x1b4>)
 8007324:	aa01      	add	r2, sp, #4
 8007326:	0038      	movs	r0, r7
 8007328:	f00d fa70 	bl	801480c <sprintf>
 800732c:	e7f3      	b.n	8007316 <groupCommand+0x13e>
		sprintf(module,(char* )pcMessageOKnew,alias);
 800732e:	4918      	ldr	r1, [pc, #96]	; (8007390 <groupCommand+0x1b8>)
 8007330:	aa01      	add	r2, sp, #4
 8007332:	a804      	add	r0, sp, #16
 8007334:	f00d fa6a 	bl	801480c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007338:	a904      	add	r1, sp, #16
 800733a:	0038      	movs	r0, r7
 800733c:	f00d fafb 	bl	8014936 <strcat>
 8007340:	e7e9      	b.n	8007316 <groupCommand+0x13e>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007342:	4914      	ldr	r1, [pc, #80]	; (8007394 <groupCommand+0x1bc>)
 8007344:	aa01      	add	r2, sp, #4
 8007346:	a804      	add	r0, sp, #16
 8007348:	f00d fa60 	bl	801480c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800734c:	a904      	add	r1, sp, #16
 800734e:	0038      	movs	r0, r7
 8007350:	f00d faf1 	bl	8014936 <strcat>
 8007354:	e7df      	b.n	8007316 <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007356:	4910      	ldr	r1, [pc, #64]	; (8007398 <groupCommand+0x1c0>)
 8007358:	aa01      	add	r2, sp, #4
 800735a:	0038      	movs	r0, r7
 800735c:	f00d fa56 	bl	801480c <sprintf>
 8007360:	e7d9      	b.n	8007316 <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007362:	490e      	ldr	r1, [pc, #56]	; (800739c <groupCommand+0x1c4>)
 8007364:	aa01      	add	r2, sp, #4
 8007366:	0038      	movs	r0, r7
 8007368:	f00d fa50 	bl	801480c <sprintf>
 800736c:	e7d3      	b.n	8007316 <groupCommand+0x13e>
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	2000160c 	.word	0x2000160c
 8007374:	2000168c 	.word	0x2000168c
 8007378:	200007d8 	.word	0x200007d8
 800737c:	0801b40c 	.word	0x0801b40c
 8007380:	0801b418 	.word	0x0801b418
 8007384:	0801b51c 	.word	0x0801b51c
 8007388:	0801b41c 	.word	0x0801b41c
 800738c:	0801b440 	.word	0x0801b440
 8007390:	0801b46c 	.word	0x0801b46c
 8007394:	0801b488 	.word	0x0801b488
 8007398:	0801b4a8 	.word	0x0801b4a8
 800739c:	0801b4e8 	.word	0x0801b4e8

080073a0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	0004      	movs	r4, r0
 80073a4:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073a6:	4d1c      	ldr	r5, [pc, #112]	; (8007418 <nameCommand+0x78>)
 80073a8:	002a      	movs	r2, r5
 80073aa:	3210      	adds	r2, #16
 80073ac:	2101      	movs	r1, #1
 80073ae:	f007 f843 	bl	800e438 <FreeRTOS_CLIGetParameter>
 80073b2:	0001      	movs	r1, r0
 80073b4:	6168      	str	r0, [r5, #20]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80073b6:	692b      	ldr	r3, [r5, #16]
 80073b8:	2b09      	cmp	r3, #9
 80073ba:	dd01      	ble.n	80073c0 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80073bc:	2300      	movs	r3, #0
 80073be:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80073c0:	4b16      	ldr	r3, [pc, #88]	; (800741c <nameCommand+0x7c>)
 80073c2:	7818      	ldrb	r0, [r3, #0]
 80073c4:	f7fd f892 	bl	80044ec <NameModule>
	if(result == BOS_OK)
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d007      	beq.n	80073dc <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 80073cc:	2806      	cmp	r0, #6
 80073ce:	d00e      	beq.n	80073ee <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 80073d0:	2807      	cmp	r0, #7
 80073d2:	d013      	beq.n	80073fc <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 80073d4:	2808      	cmp	r0, #8
 80073d6:	d018      	beq.n	800740a <nameCommand+0x6a>
}
 80073d8:	2000      	movs	r0, #0
 80073da:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <nameCommand+0x78>)
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	4a0e      	ldr	r2, [pc, #56]	; (800741c <nameCommand+0x7c>)
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	490e      	ldr	r1, [pc, #56]	; (8007420 <nameCommand+0x80>)
 80073e6:	0020      	movs	r0, r4
 80073e8:	f00d fa10 	bl	801480c <sprintf>
 80073ec:	e7f4      	b.n	80073d8 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <nameCommand+0x78>)
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	490c      	ldr	r1, [pc, #48]	; (8007424 <nameCommand+0x84>)
 80073f4:	0020      	movs	r0, r4
 80073f6:	f00d fa09 	bl	801480c <sprintf>
 80073fa:	e7ed      	b.n	80073d8 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <nameCommand+0x78>)
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	4909      	ldr	r1, [pc, #36]	; (8007428 <nameCommand+0x88>)
 8007402:	0020      	movs	r0, r4
 8007404:	f00d fa02 	bl	801480c <sprintf>
 8007408:	e7e6      	b.n	80073d8 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <nameCommand+0x78>)
 800740c:	695a      	ldr	r2, [r3, #20]
 800740e:	4907      	ldr	r1, [pc, #28]	; (800742c <nameCommand+0x8c>)
 8007410:	0020      	movs	r0, r4
 8007412:	f00d f9fb 	bl	801480c <sprintf>
 8007416:	e7df      	b.n	80073d8 <nameCommand+0x38>
 8007418:	2000168c 	.word	0x2000168c
 800741c:	200007a0 	.word	0x200007a0
 8007420:	0801b55c 	.word	0x0801b55c
 8007424:	0801b4a8 	.word	0x0801b4a8
 8007428:	0801b4e8 	.word	0x0801b4e8
 800742c:	0801b51c 	.word	0x0801b51c

08007430 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	b085      	sub	sp, #20
 8007434:	9003      	str	r0, [sp, #12]
 8007436:	0014      	movs	r4, r2
 8007438:	2600      	movs	r6, #0
 800743a:	2700      	movs	r7, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800743c:	4d49      	ldr	r5, [pc, #292]	; (8007564 <bootloaderUpdateCommand+0x134>)
 800743e:	002a      	movs	r2, r5
 8007440:	3218      	adds	r2, #24
 8007442:	2101      	movs	r1, #1
 8007444:	0020      	movs	r0, r4
 8007446:	f006 fff7 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800744a:	61e8      	str	r0, [r5, #28]
	if(pcParameterString1 == NULL){
 800744c:	2800      	cmp	r0, #0
 800744e:	d045      	beq.n	80074dc <bootloaderUpdateCommand+0xac>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007450:	4b44      	ldr	r3, [pc, #272]	; (8007564 <bootloaderUpdateCommand+0x134>)
 8007452:	699a      	ldr	r2, [r3, #24]
 8007454:	4944      	ldr	r1, [pc, #272]	; (8007568 <bootloaderUpdateCommand+0x138>)
 8007456:	f00d fa89 	bl	801496c <strncmp>
 800745a:	2800      	cmp	r0, #0
 800745c:	d136      	bne.n	80074cc <bootloaderUpdateCommand+0x9c>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800745e:	4d41      	ldr	r5, [pc, #260]	; (8007564 <bootloaderUpdateCommand+0x134>)
 8007460:	002a      	movs	r2, r5
 8007462:	3220      	adds	r2, #32
 8007464:	2102      	movs	r1, #2
 8007466:	0020      	movs	r0, r4
 8007468:	f006 ffe6 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800746c:	6268      	str	r0, [r5, #36]	; 0x24
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800746e:	002a      	movs	r2, r5
 8007470:	3228      	adds	r2, #40	; 0x28
 8007472:	2103      	movs	r1, #3
 8007474:	0020      	movs	r0, r4
 8007476:	f006 ffdf 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800747a:	62e8      	str	r0, [r5, #44]	; 0x2c
			if(pcParameterString2[0] == '#'){
 800747c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800747e:	2300      	movs	r3, #0
 8007480:	56c3      	ldrsb	r3, [r0, r3]
 8007482:	2b23      	cmp	r3, #35	; 0x23
 8007484:	d04e      	beq.n	8007524 <bootloaderUpdateCommand+0xf4>
				result =BOS_ERR_WrongValue;
 8007486:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 8007488:	4b36      	ldr	r3, [pc, #216]	; (8007564 <bootloaderUpdateCommand+0x134>)
 800748a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800748c:	2300      	movs	r3, #0
 800748e:	56c3      	ldrsb	r3, [r0, r3]
 8007490:	2b70      	cmp	r3, #112	; 0x70
 8007492:	d04d      	beq.n	8007530 <bootloaderUpdateCommand+0x100>
				result =BOS_ERR_WrongValue;
 8007494:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 8007496:	4b35      	ldr	r3, [pc, #212]	; (800756c <bootloaderUpdateCommand+0x13c>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	42b3      	cmp	r3, r6
 800749c:	d04d      	beq.n	800753a <bootloaderUpdateCommand+0x10a>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800749e:	4b34      	ldr	r3, [pc, #208]	; (8007570 <bootloaderUpdateCommand+0x140>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80074a4:	4b33      	ldr	r3, [pc, #204]	; (8007574 <bootloaderUpdateCommand+0x144>)
 80074a6:	701f      	strb	r7, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80074a8:	3201      	adds	r2, #1
 80074aa:	211a      	movs	r1, #26
 80074ac:	0030      	movs	r0, r6
 80074ae:	f001 f859 	bl	8008564 <SendMessageToModule>
				osDelay(100);
 80074b2:	2064      	movs	r0, #100	; 0x64
 80074b4:	f006 fe9e 	bl	800e1f4 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80074b8:	4b2f      	ldr	r3, [pc, #188]	; (8007578 <bootloaderUpdateCommand+0x148>)
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	4b2b      	ldr	r3, [pc, #172]	; (800756c <bootloaderUpdateCommand+0x13c>)
 80074be:	7818      	ldrb	r0, [r3, #0]
 80074c0:	003b      	movs	r3, r7
 80074c2:	0031      	movs	r1, r6
 80074c4:	f003 fa8c 	bl	800a9e0 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80074c8:	2c68      	cmp	r4, #104	; 0x68
 80074ca:	d104      	bne.n	80074d6 <bootloaderUpdateCommand+0xa6>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80074cc:	492b      	ldr	r1, [pc, #172]	; (800757c <bootloaderUpdateCommand+0x14c>)
 80074ce:	220f      	movs	r2, #15
 80074d0:	9803      	ldr	r0, [sp, #12]
 80074d2:	f00d fb54 	bl	8014b7e <memcpy>
}
 80074d6:	2000      	movs	r0, #0
 80074d8:	b005      	add	sp, #20
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80074dc:	4b23      	ldr	r3, [pc, #140]	; (800756c <bootloaderUpdateCommand+0x13c>)
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	4927      	ldr	r1, [pc, #156]	; (8007580 <bootloaderUpdateCommand+0x150>)
 80074e2:	9c03      	ldr	r4, [sp, #12]
 80074e4:	0020      	movs	r0, r4
 80074e6:	f00d f991 	bl	801480c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80074ea:	4b26      	ldr	r3, [pc, #152]	; (8007584 <bootloaderUpdateCommand+0x154>)
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	0020      	movs	r0, r4
 80074f0:	f00d fa21 	bl	8014936 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80074f4:	0020      	movs	r0, r4
 80074f6:	f7f8 fe0f 	bl	8000118 <strlen>
 80074fa:	b282      	uxth	r2, r0
 80074fc:	4b1e      	ldr	r3, [pc, #120]	; (8007578 <bootloaderUpdateCommand+0x148>)
 80074fe:	7818      	ldrb	r0, [r3, #0]
 8007500:	2301      	movs	r3, #1
 8007502:	425b      	negs	r3, r3
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	3333      	adds	r3, #51	; 0x33
 8007508:	0021      	movs	r1, r4
 800750a:	f006 fce9 	bl	800dee0 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800750e:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <bootloaderUpdateCommand+0x158>)
 8007510:	4a1e      	ldr	r2, [pc, #120]	; (800758c <bootloaderUpdateCommand+0x15c>)
 8007512:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007514:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <bootloaderUpdateCommand+0x160>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 800751a:	200a      	movs	r0, #10
 800751c:	f006 fe6a 	bl	800e1f4 <osDelay>
		NVIC_SystemReset();
 8007520:	f7fe f948 	bl	80057b4 <NVIC_SystemReset>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007524:	3001      	adds	r0, #1
 8007526:	f00b fde2 	bl	80130ee <atol>
 800752a:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 800752c:	2400      	movs	r4, #0
 800752e:	e7ab      	b.n	8007488 <bootloaderUpdateCommand+0x58>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007530:	3001      	adds	r0, #1
 8007532:	f00b fddc 	bl	80130ee <atol>
 8007536:	b2c7      	uxtb	r7, r0
 8007538:	e7ad      	b.n	8007496 <bootloaderUpdateCommand+0x66>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 800753a:	2300      	movs	r3, #0
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	3319      	adds	r3, #25
 8007540:	2200      	movs	r2, #0
 8007542:	2100      	movs	r1, #0
 8007544:	0038      	movs	r0, r7
 8007546:	f000 fdb9 	bl	80080bc <SendMessageFromPort>
				osDelay(100);
 800754a:	2064      	movs	r0, #100	; 0x64
 800754c:	f006 fe52 	bl	800e1f4 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <bootloaderUpdateCommand+0x13c>)
 8007552:	7818      	ldrb	r0, [r3, #0]
 8007554:	4b08      	ldr	r3, [pc, #32]	; (8007578 <bootloaderUpdateCommand+0x148>)
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	003b      	movs	r3, r7
 800755a:	0001      	movs	r1, r0
 800755c:	f003 fa40 	bl	800a9e0 <remoteBootloaderUpdate>
 8007560:	e7b2      	b.n	80074c8 <bootloaderUpdateCommand+0x98>
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	2000168c 	.word	0x2000168c
 8007568:	0801b594 	.word	0x0801b594
 800756c:	200007a0 	.word	0x200007a0
 8007570:	20000844 	.word	0x20000844
 8007574:	2000086c 	.word	0x2000086c
 8007578:	20000958 	.word	0x20000958
 800757c:	0801b00c 	.word	0x0801b00c
 8007580:	0801b574 	.word	0x0801b574
 8007584:	20000060 	.word	0x20000060
 8007588:	20007ff0 	.word	0x20007ff0
 800758c:	deadbeef 	.word	0xdeadbeef
 8007590:	20000ee7 	.word	0x20000ee7

08007594 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007594:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <pingCommand+0x50>)
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	4913      	ldr	r1, [pc, #76]	; (80075e8 <pingCommand+0x54>)
 800759c:	0093      	lsls	r3, r2, #2
 800759e:	189b      	adds	r3, r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	5c5b      	ldrb	r3, [r3, r1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d113      	bne.n	80075d0 <pingCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80075a8:	4910      	ldr	r1, [pc, #64]	; (80075ec <pingCommand+0x58>)
 80075aa:	f00d f92f 	bl	801480c <sprintf>
	RTOS_IND_blink(200);
 80075ae:	2490      	movs	r4, #144	; 0x90
 80075b0:	05e4      	lsls	r4, r4, #23
 80075b2:	2201      	movs	r2, #1
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	0020      	movs	r0, r4
 80075b8:	f00a f8c9 	bl	801174e <HAL_GPIO_WritePin>
 80075bc:	20c8      	movs	r0, #200	; 0xc8
 80075be:	f006 fe19 	bl	800e1f4 <osDelay>
 80075c2:	2200      	movs	r2, #0
 80075c4:	2140      	movs	r1, #64	; 0x40
 80075c6:	0020      	movs	r0, r4
 80075c8:	f00a f8c1 	bl	801174e <HAL_GPIO_WritePin>
}
 80075cc:	2000      	movs	r0, #0
 80075ce:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80075d0:	0093      	lsls	r3, r2, #2
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	4904      	ldr	r1, [pc, #16]	; (80075e8 <pingCommand+0x54>)
 80075d8:	185b      	adds	r3, r3, r1
 80075da:	4905      	ldr	r1, [pc, #20]	; (80075f0 <pingCommand+0x5c>)
 80075dc:	f00d f916 	bl	801480c <sprintf>
 80075e0:	e7e5      	b.n	80075ae <pingCommand+0x1a>
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	200007a0 	.word	0x200007a0
 80075e8:	20000b6c 	.word	0x20000b6c
 80075ec:	0801b598 	.word	0x0801b598
 80075f0:	0801b5ac 	.word	0x0801b5ac

080075f4 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80075f4:	b510      	push	{r4, lr}
 80075f6:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <prvRunTimeStatsCommand+0x18>)
 80075fa:	2241      	movs	r2, #65	; 0x41
 80075fc:	f00d fabf 	bl	8014b7e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007600:	0020      	movs	r0, r4
 8007602:	3040      	adds	r0, #64	; 0x40
 8007604:	f008 f874 	bl	800f6f0 <vTaskGetRunTimeStats>
}
 8007608:	2000      	movs	r0, #0
 800760a:	bd10      	pop	{r4, pc}
 800760c:	0801b5c8 	.word	0x0801b5c8

08007610 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007610:	b510      	push	{r4, lr}
 8007612:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <prvTaskStatsCommand+0x18>)
 8007616:	2250      	movs	r2, #80	; 0x50
 8007618:	f00d fab1 	bl	8014b7e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800761c:	0020      	movs	r0, r4
 800761e:	304f      	adds	r0, #79	; 0x4f
 8007620:	f008 f808 	bl	800f634 <vTaskList>
}
 8007624:	2000      	movs	r0, #0
 8007626:	bd10      	pop	{r4, pc}
 8007628:	0801b60c 	.word	0x0801b60c

0800762c <RegisterUserCLICommands>:
}
 800762c:	4770      	bx	lr
	...

08007630 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007630:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007632:	4c47      	ldr	r4, [pc, #284]	; (8007750 <vRegisterCLICommands+0x120>)
 8007634:	0020      	movs	r0, r4
 8007636:	3024      	adds	r0, #36	; 0x24
 8007638:	f006 fe78 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 800763c:	0020      	movs	r0, r4
 800763e:	3034      	adds	r0, #52	; 0x34
 8007640:	f006 fe74 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007644:	0020      	movs	r0, r4
 8007646:	3044      	adds	r0, #68	; 0x44
 8007648:	f006 fe70 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800764c:	0020      	movs	r0, r4
 800764e:	3054      	adds	r0, #84	; 0x54
 8007650:	f006 fe6c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007654:	0020      	movs	r0, r4
 8007656:	3064      	adds	r0, #100	; 0x64
 8007658:	f006 fe68 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800765c:	0020      	movs	r0, r4
 800765e:	3074      	adds	r0, #116	; 0x74
 8007660:	f006 fe64 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007664:	4c3b      	ldr	r4, [pc, #236]	; (8007754 <vRegisterCLICommands+0x124>)
 8007666:	1d20      	adds	r0, r4, #4
 8007668:	f006 fe60 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 800766c:	0020      	movs	r0, r4
 800766e:	3014      	adds	r0, #20
 8007670:	f006 fe5c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007674:	0020      	movs	r0, r4
 8007676:	3024      	adds	r0, #36	; 0x24
 8007678:	f006 fe58 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 800767c:	0020      	movs	r0, r4
 800767e:	3034      	adds	r0, #52	; 0x34
 8007680:	f006 fe54 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007684:	0020      	movs	r0, r4
 8007686:	3044      	adds	r0, #68	; 0x44
 8007688:	f006 fe50 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800768c:	0020      	movs	r0, r4
 800768e:	3054      	adds	r0, #84	; 0x54
 8007690:	f006 fe4c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007694:	0020      	movs	r0, r4
 8007696:	3064      	adds	r0, #100	; 0x64
 8007698:	f006 fe48 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800769c:	0020      	movs	r0, r4
 800769e:	3074      	adds	r0, #116	; 0x74
 80076a0:	f006 fe44 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80076a4:	4c2c      	ldr	r4, [pc, #176]	; (8007758 <vRegisterCLICommands+0x128>)
 80076a6:	1d20      	adds	r0, r4, #4
 80076a8:	f006 fe40 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80076ac:	0020      	movs	r0, r4
 80076ae:	3014      	adds	r0, #20
 80076b0:	f006 fe3c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80076b4:	0020      	movs	r0, r4
 80076b6:	3024      	adds	r0, #36	; 0x24
 80076b8:	f006 fe38 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80076bc:	0020      	movs	r0, r4
 80076be:	3034      	adds	r0, #52	; 0x34
 80076c0:	f006 fe34 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80076c4:	0020      	movs	r0, r4
 80076c6:	3044      	adds	r0, #68	; 0x44
 80076c8:	f006 fe30 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80076cc:	0020      	movs	r0, r4
 80076ce:	3054      	adds	r0, #84	; 0x54
 80076d0:	f006 fe2c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80076d4:	0020      	movs	r0, r4
 80076d6:	3064      	adds	r0, #100	; 0x64
 80076d8:	f006 fe28 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80076dc:	0020      	movs	r0, r4
 80076de:	3074      	adds	r0, #116	; 0x74
 80076e0:	f006 fe24 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80076e4:	4c1d      	ldr	r4, [pc, #116]	; (800775c <vRegisterCLICommands+0x12c>)
 80076e6:	1d20      	adds	r0, r4, #4
 80076e8:	f006 fe20 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80076ec:	0020      	movs	r0, r4
 80076ee:	3014      	adds	r0, #20
 80076f0:	f006 fe1c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80076f4:	0020      	movs	r0, r4
 80076f6:	3024      	adds	r0, #36	; 0x24
 80076f8:	f006 fe18 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80076fc:	0020      	movs	r0, r4
 80076fe:	3034      	adds	r0, #52	; 0x34
 8007700:	f006 fe14 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007704:	0020      	movs	r0, r4
 8007706:	3044      	adds	r0, #68	; 0x44
 8007708:	f006 fe10 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800770c:	0020      	movs	r0, r4
 800770e:	3054      	adds	r0, #84	; 0x54
 8007710:	f006 fe0c 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007714:	0020      	movs	r0, r4
 8007716:	3064      	adds	r0, #100	; 0x64
 8007718:	f006 fe08 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800771c:	0020      	movs	r0, r4
 800771e:	3074      	adds	r0, #116	; 0x74
 8007720:	f006 fe04 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007724:	4c0e      	ldr	r4, [pc, #56]	; (8007760 <vRegisterCLICommands+0x130>)
 8007726:	1d20      	adds	r0, r4, #4
 8007728:	f006 fe00 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 800772c:	0020      	movs	r0, r4
 800772e:	3014      	adds	r0, #20
 8007730:	f006 fdfc 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8007734:	0020      	movs	r0, r4
 8007736:	3024      	adds	r0, #36	; 0x24
 8007738:	f006 fdf8 	bl	800e32c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =34;			// Add "help" command
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <vRegisterCLICommands+0x134>)
 800773e:	2222      	movs	r2, #34	; 0x22
 8007740:	701a      	strb	r2, [r3, #0]
	numOfBosCommands =35;
 8007742:	3201      	adds	r2, #1
 8007744:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007746:	f003 f9c5 	bl	800aad4 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800774a:	f7ff ff6f 	bl	800762c <RegisterUserCLICommands>
}
 800774e:	bd10      	pop	{r4, pc}
 8007750:	08019890 	.word	0x08019890
 8007754:	08019910 	.word	0x08019910
 8007758:	08019990 	.word	0x08019990
 800775c:	08019a10 	.word	0x08019a10
 8007760:	08019a90 	.word	0x08019a90
 8007764:	20000ee4 	.word	0x20000ee4

08007768 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	0005      	movs	r5, r0
 800776c:	000e      	movs	r6, r1
 800776e:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007770:	f003 f9b8 	bl	800aae4 <GetPort>
 8007774:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007776:	4b0e      	ldr	r3, [pc, #56]	; (80077b0 <StartDMAstream+0x48>)
 8007778:	5c1b      	ldrb	r3, [r3, r0]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d903      	bls.n	8007786 <StartDMAstream+0x1e>
 800777e:	2b03      	cmp	r3, #3
 8007780:	d001      	beq.n	8007786 <StartDMAstream+0x1e>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007782:	2017      	movs	r0, #23
 8007784:	e012      	b.n	80077ac <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 8007786:	0020      	movs	r0, r4
 8007788:	f003 fae2 	bl	800ad50 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 800778c:	1e62      	subs	r2, r4, #1
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <StartDMAstream+0x4c>)
 8007790:	0092      	lsls	r2, r2, #2
 8007792:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007794:	4906      	ldr	r1, [pc, #24]	; (80077b0 <StartDMAstream+0x48>)
 8007796:	2002      	movs	r0, #2
 8007798:	5508      	strb	r0, [r1, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 800779a:	189b      	adds	r3, r3, r2
 800779c:	2200      	movs	r2, #0
 800779e:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80077a0:	003a      	movs	r2, r7
 80077a2:	0031      	movs	r1, r6
 80077a4:	0028      	movs	r0, r5
 80077a6:	f004 f839 	bl	800b81c <DMA_STREAM_Setup>
	
	return BOS_OK;
 80077aa:	2000      	movs	r0, #0
}
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	2000095c 	.word	0x2000095c
 80077b4:	200016bc 	.word	0x200016bc

080077b8 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80077bc:	4b15      	ldr	r3, [pc, #84]	; (8007814 <DMA_IRQHandler+0x5c>)
 80077be:	5c1b      	ldrb	r3, [r3, r0]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d008      	beq.n	80077d6 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80077c4:	3c01      	subs	r4, #1
 80077c6:	00e0      	lsls	r0, r4, #3
 80077c8:	1b00      	subs	r0, r0, r4
 80077ca:	00c0      	lsls	r0, r0, #3
 80077cc:	4b12      	ldr	r3, [pc, #72]	; (8007818 <DMA_IRQHandler+0x60>)
 80077ce:	18c0      	adds	r0, r0, r3
 80077d0:	f009 f90c 	bl	80109ec <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80077d6:	1e45      	subs	r5, r0, #1
 80077d8:	00e8      	lsls	r0, r5, #3
 80077da:	1b40      	subs	r0, r0, r5
 80077dc:	00c0      	lsls	r0, r0, #3
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <DMA_IRQHandler+0x64>)
 80077e0:	18c0      	adds	r0, r0, r3
 80077e2:	f009 f903 	bl	80109ec <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80077e6:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <DMA_IRQHandler+0x68>)
 80077e8:	00aa      	lsls	r2, r5, #2
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d005      	beq.n	80077fe <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <DMA_IRQHandler+0x68>)
 80077f4:	00a9      	lsls	r1, r5, #2
 80077f6:	185b      	adds	r3, r3, r1
 80077f8:	6959      	ldr	r1, [r3, #20]
 80077fa:	3101      	adds	r1, #1
 80077fc:	6159      	str	r1, [r3, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <DMA_IRQHandler+0x68>)
 8007800:	00ad      	lsls	r5, r5, #2
 8007802:	195b      	adds	r3, r3, r5
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	429a      	cmp	r2, r3
 8007808:	d8e4      	bhi.n	80077d4 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800780a:	0020      	movs	r0, r4
 800780c:	f003 fa74 	bl	800acf8 <StopStreamDMA>
}
 8007810:	e7e0      	b.n	80077d4 <DMA_IRQHandler+0x1c>
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	2000095c 	.word	0x2000095c
 8007818:	20002548 	.word	0x20002548
 800781c:	20002350 	.word	0x20002350
 8007820:	200016bc 	.word	0x200016bc

08007824 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007824:	4b09      	ldr	r3, [pc, #36]	; (800784c <ResetUartORE+0x28>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	2308      	movs	r3, #8
 800782a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800782c:	4a08      	ldr	r2, [pc, #32]	; (8007850 <ResetUartORE+0x2c>)
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007832:	4a08      	ldr	r2, [pc, #32]	; (8007854 <ResetUartORE+0x30>)
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007838:	4a07      	ldr	r2, [pc, #28]	; (8007858 <ResetUartORE+0x34>)
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800783e:	4a07      	ldr	r2, [pc, #28]	; (800785c <ResetUartORE+0x38>)
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007844:	4a06      	ldr	r2, [pc, #24]	; (8007860 <ResetUartORE+0x3c>)
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	6213      	str	r3, [r2, #32]
#endif
}
 800784a:	4770      	bx	lr
 800784c:	20001ed8 	.word	0x20001ed8
 8007850:	20002214 	.word	0x20002214
 8007854:	200021a4 	.word	0x200021a4
 8007858:	20002134 	.word	0x20002134
 800785c:	200020c4 	.word	0x200020c4
 8007860:	20002054 	.word	0x20002054

08007864 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007866:	b08f      	sub	sp, #60	; 0x3c
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007868:	4957      	ldr	r1, [pc, #348]	; (80079c8 <MX_FREERTOS_Init+0x164>)
 800786a:	4858      	ldr	r0, [pc, #352]	; (80079cc <MX_FREERTOS_Init+0x168>)
 800786c:	2400      	movs	r4, #0
 800786e:	9403      	str	r4, [sp, #12]
 8007870:	9402      	str	r4, [sp, #8]
 8007872:	4d57      	ldr	r5, [pc, #348]	; (80079d0 <MX_FREERTOS_Init+0x16c>)
 8007874:	9501      	str	r5, [sp, #4]
 8007876:	2603      	movs	r6, #3
 8007878:	9600      	str	r6, [sp, #0]
 800787a:	2300      	movs	r3, #0
 800787c:	22f0      	movs	r2, #240	; 0xf0
 800787e:	f007 fab9 	bl	800edf4 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007882:	4954      	ldr	r1, [pc, #336]	; (80079d4 <MX_FREERTOS_Init+0x170>)
 8007884:	4854      	ldr	r0, [pc, #336]	; (80079d8 <MX_FREERTOS_Init+0x174>)
 8007886:	9403      	str	r4, [sp, #12]
 8007888:	9402      	str	r4, [sp, #8]
 800788a:	1d2b      	adds	r3, r5, #4
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	9600      	str	r6, [sp, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	22f0      	movs	r2, #240	; 0xf0
 8007894:	f007 faae 	bl	800edf4 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007898:	4950      	ldr	r1, [pc, #320]	; (80079dc <MX_FREERTOS_Init+0x178>)
 800789a:	4851      	ldr	r0, [pc, #324]	; (80079e0 <MX_FREERTOS_Init+0x17c>)
 800789c:	9403      	str	r4, [sp, #12]
 800789e:	9402      	str	r4, [sp, #8]
 80078a0:	002b      	movs	r3, r5
 80078a2:	3308      	adds	r3, #8
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	9600      	str	r6, [sp, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	22f0      	movs	r2, #240	; 0xf0
 80078ac:	f007 faa2 	bl	800edf4 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 80078b0:	f7ff febe 	bl	8007630 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80078b4:	228c      	movs	r2, #140	; 0x8c
 80078b6:	494b      	ldr	r1, [pc, #300]	; (80079e4 <MX_FREERTOS_Init+0x180>)
 80078b8:	484b      	ldr	r0, [pc, #300]	; (80079e8 <MX_FREERTOS_Init+0x184>)
 80078ba:	9403      	str	r4, [sp, #12]
 80078bc:	9402      	str	r4, [sp, #8]
 80078be:	002b      	movs	r3, r5
 80078c0:	330c      	adds	r3, #12
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	9600      	str	r6, [sp, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	0052      	lsls	r2, r2, #1
 80078ca:	f007 fa93 	bl	800edf4 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80078ce:	4947      	ldr	r1, [pc, #284]	; (80079ec <MX_FREERTOS_Init+0x188>)
 80078d0:	4e47      	ldr	r6, [pc, #284]	; (80079f0 <MX_FREERTOS_Init+0x18c>)
 80078d2:	9403      	str	r4, [sp, #12]
 80078d4:	9402      	str	r4, [sp, #8]
 80078d6:	002b      	movs	r3, r5
 80078d8:	3310      	adds	r3, #16
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	2704      	movs	r7, #4
 80078de:	9700      	str	r7, [sp, #0]
 80078e0:	2301      	movs	r3, #1
 80078e2:	22f0      	movs	r2, #240	; 0xf0
 80078e4:	0030      	movs	r0, r6
 80078e6:	f007 fa85 	bl	800edf4 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80078ea:	4942      	ldr	r1, [pc, #264]	; (80079f4 <MX_FREERTOS_Init+0x190>)
 80078ec:	9403      	str	r4, [sp, #12]
 80078ee:	9402      	str	r4, [sp, #8]
 80078f0:	002b      	movs	r3, r5
 80078f2:	3314      	adds	r3, #20
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	9700      	str	r7, [sp, #0]
 80078f8:	2302      	movs	r3, #2
 80078fa:	22f0      	movs	r2, #240	; 0xf0
 80078fc:	0030      	movs	r0, r6
 80078fe:	f007 fa79 	bl	800edf4 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007902:	493d      	ldr	r1, [pc, #244]	; (80079f8 <MX_FREERTOS_Init+0x194>)
 8007904:	9403      	str	r4, [sp, #12]
 8007906:	9402      	str	r4, [sp, #8]
 8007908:	002b      	movs	r3, r5
 800790a:	3318      	adds	r3, #24
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	9700      	str	r7, [sp, #0]
 8007910:	2303      	movs	r3, #3
 8007912:	22f0      	movs	r2, #240	; 0xf0
 8007914:	0030      	movs	r0, r6
 8007916:	f007 fa6d 	bl	800edf4 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 800791a:	4938      	ldr	r1, [pc, #224]	; (80079fc <MX_FREERTOS_Init+0x198>)
 800791c:	9403      	str	r4, [sp, #12]
 800791e:	9402      	str	r4, [sp, #8]
 8007920:	002b      	movs	r3, r5
 8007922:	331c      	adds	r3, #28
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	9700      	str	r7, [sp, #0]
 8007928:	2304      	movs	r3, #4
 800792a:	22f0      	movs	r2, #240	; 0xf0
 800792c:	0030      	movs	r0, r6
 800792e:	f007 fa61 	bl	800edf4 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007932:	4933      	ldr	r1, [pc, #204]	; (8007a00 <MX_FREERTOS_Init+0x19c>)
 8007934:	9403      	str	r4, [sp, #12]
 8007936:	9402      	str	r4, [sp, #8]
 8007938:	002b      	movs	r3, r5
 800793a:	3320      	adds	r3, #32
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	9700      	str	r7, [sp, #0]
 8007940:	2305      	movs	r3, #5
 8007942:	22f0      	movs	r2, #240	; 0xf0
 8007944:	0030      	movs	r0, r6
 8007946:	f007 fa55 	bl	800edf4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 800794a:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 800794c:	2101      	movs	r1, #1
 800794e:	a80d      	add	r0, sp, #52	; 0x34
 8007950:	f006 fc58 	bl	800e204 <osSemaphoreCreate>
 8007954:	62a8      	str	r0, [r5, #40]	; 0x28
	osSemaphoreDef(SemaphoreP2);
 8007956:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007958:	2101      	movs	r1, #1
 800795a:	a80c      	add	r0, sp, #48	; 0x30
 800795c:	f006 fc52 	bl	800e204 <osSemaphoreCreate>
 8007960:	6468      	str	r0, [r5, #68]	; 0x44
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007962:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007964:	2101      	movs	r1, #1
 8007966:	a80b      	add	r0, sp, #44	; 0x2c
 8007968:	f006 fc4c 	bl	800e204 <osSemaphoreCreate>
 800796c:	62e8      	str	r0, [r5, #44]	; 0x2c
	osSemaphoreDef(SemaphoreP4);
 800796e:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007970:	2101      	movs	r1, #1
 8007972:	a80a      	add	r0, sp, #40	; 0x28
 8007974:	f006 fc46 	bl	800e204 <osSemaphoreCreate>
 8007978:	64a8      	str	r0, [r5, #72]	; 0x48
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 800797a:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800797c:	2101      	movs	r1, #1
 800797e:	a809      	add	r0, sp, #36	; 0x24
 8007980:	f006 fc40 	bl	800e204 <osSemaphoreCreate>
 8007984:	6328      	str	r0, [r5, #48]	; 0x30
	osSemaphoreDef(SemaphoreP6);
 8007986:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007988:	2101      	movs	r1, #1
 800798a:	a808      	add	r0, sp, #32
 800798c:	f006 fc3a 	bl	800e204 <osSemaphoreCreate>
 8007990:	64e8      	str	r0, [r5, #76]	; 0x4c
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 8007992:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007994:	2101      	movs	r1, #1
 8007996:	a807      	add	r0, sp, #28
 8007998:	f006 fc34 	bl	800e204 <osSemaphoreCreate>
 800799c:	6368      	str	r0, [r5, #52]	; 0x34
	osSemaphoreDef(SemaphoreP8);
 800799e:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80079a0:	2101      	movs	r1, #1
 80079a2:	a806      	add	r0, sp, #24
 80079a4:	f006 fc2e 	bl	800e204 <osSemaphoreCreate>
 80079a8:	6528      	str	r0, [r5, #80]	; 0x50
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 80079aa:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 80079ac:	2101      	movs	r1, #1
 80079ae:	a805      	add	r0, sp, #20
 80079b0:	f006 fc28 	bl	800e204 <osSemaphoreCreate>
 80079b4:	63a8      	str	r0, [r5, #56]	; 0x38
	osSemaphoreDef(SemaphoreP10);
 80079b6:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80079b8:	2101      	movs	r1, #1
 80079ba:	a804      	add	r0, sp, #16
 80079bc:	f006 fc22 	bl	800e204 <osSemaphoreCreate>
 80079c0:	6568      	str	r0, [r5, #84]	; 0x54
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 80079c2:	b00f      	add	sp, #60	; 0x3c
 80079c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	0801c2d8 	.word	0x0801c2d8
 80079cc:	08007d59 	.word	0x08007d59
 80079d0:	20001b08 	.word	0x20001b08
 80079d4:	0801c2e4 	.word	0x0801c2e4
 80079d8:	0800875d 	.word	0x0800875d
 80079dc:	0801c2f0 	.word	0x0801c2f0
 80079e0:	080130d7 	.word	0x080130d7
 80079e4:	0801c2fc 	.word	0x0801c2fc
 80079e8:	080053d1 	.word	0x080053d1
 80079ec:	0801c304 	.word	0x0801c304
 80079f0:	08008af5 	.word	0x08008af5
 80079f4:	0801c310 	.word	0x0801c310
 80079f8:	0801c31c 	.word	0x0801c31c
 80079fc:	0801c328 	.word	0x0801c328
 8007a00:	0801c334 	.word	0x0801c334

08007a04 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007a06:	4bce      	ldr	r3, [pc, #824]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d000      	beq.n	8007a10 <ExecuteMonitor+0xc>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Monitor_time =0;
 8007a10:	4bcb      	ldr	r3, [pc, #812]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
	flag=0;
 8007a16:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007a18:	3220      	adds	r2, #32
 8007a1a:	715a      	strb	r2, [r3, #5]
 8007a1c:	e05f      	b.n	8007ade <ExecuteMonitor+0xda>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007a1e:	4bc9      	ldr	r3, [pc, #804]	; (8007d44 <ExecuteMonitor+0x340>)
 8007a20:	205c      	movs	r0, #92	; 0x5c
 8007a22:	5c19      	ldrb	r1, [r3, r0]
 8007a24:	1c4c      	adds	r4, r1, #1
 8007a26:	541c      	strb	r4, [r3, r0]
 8007a28:	1859      	adds	r1, r3, r1
 8007a2a:	3004      	adds	r0, #4
 8007a2c:	540a      	strb	r2, [r1, r0]
								perviousCharacter=currentCharacter;
 8007a2e:	215d      	movs	r1, #93	; 0x5d
 8007a30:	545a      	strb	r2, [r3, r1]
								currentCharacter= INTIAL_VALUE;
 8007a32:	4bc3      	ldr	r3, [pc, #780]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007a34:	2203      	movs	r2, #3
 8007a36:	715a      	strb	r2, [r3, #5]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007a38:	4bc2      	ldr	r3, [pc, #776]	; (8007d44 <ExecuteMonitor+0x340>)
 8007a3a:	225d      	movs	r2, #93	; 0x5d
 8007a3c:	5c9b      	ldrb	r3, [r3, r2]
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d014      	beq.n	8007a6c <ExecuteMonitor+0x68>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d012      	beq.n	8007a6c <ExecuteMonitor+0x68>
 8007a46:	4bbe      	ldr	r3, [pc, #760]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d00e      	beq.n	8007a6c <ExecuteMonitor+0x68>
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d00c      	beq.n	8007a6c <ExecuteMonitor+0x68>
		            	    perviousCharacter= INTIAL_VALUE;
 8007a52:	4cbc      	ldr	r4, [pc, #752]	; (8007d44 <ExecuteMonitor+0x340>)
 8007a54:	255d      	movs	r5, #93	; 0x5d
 8007a56:	2303      	movs	r3, #3
 8007a58:	5563      	strb	r3, [r4, r5]
		            	    Delay_us(100);
 8007a5a:	2064      	movs	r0, #100	; 0x64
 8007a5c:	f006 f840 	bl	800dae0 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007a60:	4bb7      	ldr	r3, [pc, #732]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007a62:	795a      	ldrb	r2, [r3, #5]
 8007a64:	5d63      	ldrb	r3, [r4, r5]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d1d9      	bne.n	8007a1e <ExecuteMonitor+0x1a>
 8007a6a:	e7e5      	b.n	8007a38 <ExecuteMonitor+0x34>
                   if(flag == NonActive)
 8007a6c:	4bb4      	ldr	r3, [pc, #720]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007a6e:	791e      	ldrb	r6, [r3, #4]
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	d12c      	bne.n	8007ace <ExecuteMonitor+0xca>
                	   nonProcessingParameterIndex=0;
 8007a74:	4bb3      	ldr	r3, [pc, #716]	; (8007d44 <ExecuteMonitor+0x340>)
 8007a76:	225c      	movs	r2, #92	; 0x5c
 8007a78:	2100      	movs	r1, #0
 8007a7a:	5499      	strb	r1, [r3, r2]
 		            if(FirstCharacterInParameter == '[')
 8007a7c:	3204      	adds	r2, #4
 8007a7e:	5c9b      	ldrb	r3, [r3, r2]
 8007a80:	2b5b      	cmp	r3, #91	; 0x5b
 8007a82:	d031      	beq.n	8007ae8 <ExecuteMonitor+0xe4>
 		            else if(FirstCharacterInParameter == '#')
 8007a84:	2b23      	cmp	r3, #35	; 0x23
 8007a86:	d070      	beq.n	8007b6a <ExecuteMonitor+0x166>
 		            else if(FirstCharacterInParameter == '=')
 8007a88:	2b3d      	cmp	r3, #61	; 0x3d
 8007a8a:	d100      	bne.n	8007a8e <ExecuteMonitor+0x8a>
 8007a8c:	e084      	b.n	8007b98 <ExecuteMonitor+0x194>
               	   desiredArray=ParameterLocationIn2dArray;
 8007a8e:	4cad      	ldr	r4, [pc, #692]	; (8007d44 <ExecuteMonitor+0x340>)
 8007a90:	2378      	movs	r3, #120	; 0x78
 8007a92:	5ce2      	ldrb	r2, [r4, r3]
 8007a94:	4dac      	ldr	r5, [pc, #688]	; (8007d48 <ExecuteMonitor+0x344>)
 8007a96:	73aa      	strb	r2, [r5, #14]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007a98:	3510      	adds	r5, #16
 8007a9a:	0113      	lsls	r3, r2, #4
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	18ed      	adds	r5, r5, r3
 8007aa0:	220f      	movs	r2, #15
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	0028      	movs	r0, r5
 8007aa6:	f00c ff3e 	bl	8014926 <memset>
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007aaa:	0027      	movs	r7, r4
 8007aac:	3778      	adds	r7, #120	; 0x78
 8007aae:	220f      	movs	r2, #15
 8007ab0:	0039      	movs	r1, r7
 8007ab2:	0028      	movs	r0, r5
 8007ab4:	f00d f863 	bl	8014b7e <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007ab8:	0020      	movs	r0, r4
 8007aba:	3060      	adds	r0, #96	; 0x60
 8007abc:	2214      	movs	r2, #20
 8007abe:	2100      	movs	r1, #0
 8007ac0:	f00c ff31 	bl	8014926 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007ac4:	2214      	movs	r2, #20
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	0038      	movs	r0, r7
 8007aca:	f00c ff2c 	bl	8014926 <memset>
                   if(flag == RUN_FOR_ONCE)
 8007ace:	2e01      	cmp	r6, #1
 8007ad0:	d100      	bne.n	8007ad4 <ExecuteMonitor+0xd0>
 8007ad2:	e083      	b.n	8007bdc <ExecuteMonitor+0x1d8>
                   if(flag == CONTINUOUS_RUN)
 8007ad4:	4b9a      	ldr	r3, [pc, #616]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007ad6:	791b      	ldrb	r3, [r3, #4]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d100      	bne.n	8007ade <ExecuteMonitor+0xda>
 8007adc:	e0d0      	b.n	8007c80 <ExecuteMonitor+0x27c>
		                    nonProcessingParameterIndex=0;
 8007ade:	4b99      	ldr	r3, [pc, #612]	; (8007d44 <ExecuteMonitor+0x340>)
 8007ae0:	225c      	movs	r2, #92	; 0x5c
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	5499      	strb	r1, [r3, r2]
 8007ae6:	e7b4      	b.n	8007a52 <ExecuteMonitor+0x4e>
 		            	nonProcessingParameterIndex++;
 8007ae8:	4b96      	ldr	r3, [pc, #600]	; (8007d44 <ExecuteMonitor+0x340>)
 8007aea:	3a04      	subs	r2, #4
 8007aec:	3101      	adds	r1, #1
 8007aee:	5499      	strb	r1, [r3, r2]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007af0:	4c94      	ldr	r4, [pc, #592]	; (8007d44 <ExecuteMonitor+0x340>)
 8007af2:	235c      	movs	r3, #92	; 0x5c
 8007af4:	5ce5      	ldrb	r5, [r4, r3]
 8007af6:	1962      	adds	r2, r4, r5
 8007af8:	3304      	adds	r3, #4
 8007afa:	5cd0      	ldrb	r0, [r2, r3]
 8007afc:	210a      	movs	r1, #10
 8007afe:	f7f8 fbad 	bl	800025c <__aeabi_uidivmod>
 8007b02:	b2c9      	uxtb	r1, r1
 8007b04:	2374      	movs	r3, #116	; 0x74
 8007b06:	5ce3      	ldrb	r3, [r4, r3]
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	d004      	beq.n	8007b16 <ExecuteMonitor+0x112>
 		            			nonProcessingParameterIndex+=2;
 8007b0c:	4b8d      	ldr	r3, [pc, #564]	; (8007d44 <ExecuteMonitor+0x340>)
 8007b0e:	3502      	adds	r5, #2
 8007b10:	225c      	movs	r2, #92	; 0x5c
 8007b12:	549d      	strb	r5, [r3, r2]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007b14:	e7ec      	b.n	8007af0 <ExecuteMonitor+0xec>
 		            			nonProcessingParameterIndex++;
 8007b16:	3501      	adds	r5, #1
 8007b18:	b2ed      	uxtb	r5, r5
 8007b1a:	235c      	movs	r3, #92	; 0x5c
 8007b1c:	54e5      	strb	r5, [r4, r3]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007b1e:	1965      	adds	r5, r4, r5
 8007b20:	3304      	adds	r3, #4
 8007b22:	5ce8      	ldrb	r0, [r5, r3]
 8007b24:	210a      	movs	r1, #10
 8007b26:	f7f8 fb99 	bl	800025c <__aeabi_uidivmod>
 8007b2a:	2378      	movs	r3, #120	; 0x78
 8007b2c:	54e1      	strb	r1, [r4, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007b2e:	e003      	b.n	8007b38 <ExecuteMonitor+0x134>
 		            		nonProcessingParameterIndex++;
 8007b30:	4b84      	ldr	r3, [pc, #528]	; (8007d44 <ExecuteMonitor+0x340>)
 8007b32:	3201      	adds	r2, #1
 8007b34:	215c      	movs	r1, #92	; 0x5c
 8007b36:	545a      	strb	r2, [r3, r1]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007b38:	4b82      	ldr	r3, [pc, #520]	; (8007d44 <ExecuteMonitor+0x340>)
 8007b3a:	225c      	movs	r2, #92	; 0x5c
 8007b3c:	5c9a      	ldrb	r2, [r3, r2]
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	2160      	movs	r1, #96	; 0x60
 8007b42:	5c5b      	ldrb	r3, [r3, r1]
 8007b44:	2b5d      	cmp	r3, #93	; 0x5d
 8007b46:	d1f3      	bne.n	8007b30 <ExecuteMonitor+0x12c>
 		            	nonProcessingParameterIndex++;
 8007b48:	3201      	adds	r2, #1
 8007b4a:	b2d3      	uxtb	r3, r2
 8007b4c:	487d      	ldr	r0, [pc, #500]	; (8007d44 <ExecuteMonitor+0x340>)
 8007b4e:	225c      	movs	r2, #92	; 0x5c
 8007b50:	5483      	strb	r3, [r0, r2]
 		            	processingParameterIndex=1;
 8007b52:	4a7d      	ldr	r2, [pc, #500]	; (8007d48 <ExecuteMonitor+0x344>)
 8007b54:	395f      	subs	r1, #95	; 0x5f
 8007b56:	7311      	strb	r1, [r2, #12]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b58:	0001      	movs	r1, r0
 8007b5a:	3160      	adds	r1, #96	; 0x60
 8007b5c:	18c9      	adds	r1, r1, r3
 8007b5e:	2214      	movs	r2, #20
 8007b60:	1ad2      	subs	r2, r2, r3
 8007b62:	3079      	adds	r0, #121	; 0x79
 8007b64:	f00d f80b 	bl	8014b7e <memcpy>
 8007b68:	e791      	b.n	8007a8e <ExecuteMonitor+0x8a>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007b6a:	4c76      	ldr	r4, [pc, #472]	; (8007d44 <ExecuteMonitor+0x340>)
 8007b6c:	0023      	movs	r3, r4
 8007b6e:	3360      	adds	r3, #96	; 0x60
 8007b70:	7858      	ldrb	r0, [r3, #1]
 8007b72:	210a      	movs	r1, #10
 8007b74:	f7f8 fb72 	bl	800025c <__aeabi_uidivmod>
 8007b78:	2378      	movs	r3, #120	; 0x78
 8007b7a:	54e1      	strb	r1, [r4, r3]
 		            	nonProcessingParameterIndex=2;
 8007b7c:	3b1c      	subs	r3, #28
 8007b7e:	2202      	movs	r2, #2
 8007b80:	54e2      	strb	r2, [r4, r3]
 		            	processingParameterIndex=1;
 8007b82:	4b71      	ldr	r3, [pc, #452]	; (8007d48 <ExecuteMonitor+0x344>)
 8007b84:	3a01      	subs	r2, #1
 8007b86:	731a      	strb	r2, [r3, #12]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b88:	0020      	movs	r0, r4
 8007b8a:	3079      	adds	r0, #121	; 0x79
 8007b8c:	0021      	movs	r1, r4
 8007b8e:	3162      	adds	r1, #98	; 0x62
 8007b90:	3211      	adds	r2, #17
 8007b92:	f00c fff4 	bl	8014b7e <memcpy>
 8007b96:	e77a      	b.n	8007a8e <ExecuteMonitor+0x8a>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007b98:	4c6a      	ldr	r4, [pc, #424]	; (8007d44 <ExecuteMonitor+0x340>)
 8007b9a:	0027      	movs	r7, r4
 8007b9c:	3760      	adds	r7, #96	; 0x60
 8007b9e:	7878      	ldrb	r0, [r7, #1]
 8007ba0:	210a      	movs	r1, #10
 8007ba2:	f7f8 fb5b 	bl	800025c <__aeabi_uidivmod>
 8007ba6:	2374      	movs	r3, #116	; 0x74
 8007ba8:	54e1      	strb	r1, [r4, r3]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007baa:	78b8      	ldrb	r0, [r7, #2]
 8007bac:	4d66      	ldr	r5, [pc, #408]	; (8007d48 <ExecuteMonitor+0x344>)
 8007bae:	210a      	movs	r1, #10
 8007bb0:	f7f8 fb54 	bl	800025c <__aeabi_uidivmod>
 8007bb4:	7369      	strb	r1, [r5, #13]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007bb6:	78f8      	ldrb	r0, [r7, #3]
 8007bb8:	210a      	movs	r1, #10
 8007bba:	f7f8 fb4f 	bl	800025c <__aeabi_uidivmod>
 8007bbe:	2378      	movs	r3, #120	; 0x78
 8007bc0:	54e1      	strb	r1, [r4, r3]
                	    nonProcessingParameterIndex=4;
 8007bc2:	3b1c      	subs	r3, #28
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	54e2      	strb	r2, [r4, r3]
                	    processingParameterIndex=1;
 8007bc8:	3b5b      	subs	r3, #91	; 0x5b
 8007bca:	732b      	strb	r3, [r5, #12]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007bcc:	0020      	movs	r0, r4
 8007bce:	3079      	adds	r0, #121	; 0x79
 8007bd0:	0021      	movs	r1, r4
 8007bd2:	3164      	adds	r1, #100	; 0x64
 8007bd4:	320c      	adds	r2, #12
 8007bd6:	f00c ffd2 	bl	8014b7e <memcpy>
 8007bda:	e758      	b.n	8007a8e <ExecuteMonitor+0x8a>
                	finalMatrixIndex=0;
 8007bdc:	4b5b      	ldr	r3, [pc, #364]	; (8007d4c <ExecuteMonitor+0x348>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	721a      	strb	r2, [r3, #8]
                	twoDMatrixIndex=1;
 8007be2:	2101      	movs	r1, #1
 8007be4:	7259      	strb	r1, [r3, #9]
		          	counter=0;
 8007be6:	729a      	strb	r2, [r3, #10]
		           while(counter != numCommandParameters)
 8007be8:	e005      	b.n	8007bf6 <ExecuteMonitor+0x1f2>
		                   counter++;
 8007bea:	4b58      	ldr	r3, [pc, #352]	; (8007d4c <ExecuteMonitor+0x348>)
 8007bec:	7a9a      	ldrb	r2, [r3, #10]
 8007bee:	3201      	adds	r2, #1
 8007bf0:	729a      	strb	r2, [r3, #10]
		                   twoDMatrixIndex=1;
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	725a      	strb	r2, [r3, #9]
		           while(counter != numCommandParameters)
 8007bf6:	4a55      	ldr	r2, [pc, #340]	; (8007d4c <ExecuteMonitor+0x348>)
 8007bf8:	4b53      	ldr	r3, [pc, #332]	; (8007d48 <ExecuteMonitor+0x344>)
 8007bfa:	7a92      	ldrb	r2, [r2, #10]
 8007bfc:	7b5b      	ldrb	r3, [r3, #13]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d01b      	beq.n	8007c3a <ExecuteMonitor+0x236>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007c02:	4c52      	ldr	r4, [pc, #328]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c04:	7aa5      	ldrb	r5, [r4, #10]
 8007c06:	7a60      	ldrb	r0, [r4, #9]
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	7263      	strb	r3, [r4, #9]
 8007c0c:	7a22      	ldrb	r2, [r4, #8]
 8007c0e:	1c53      	adds	r3, r2, #1
 8007c10:	7223      	strb	r3, [r4, #8]
 8007c12:	4b4d      	ldr	r3, [pc, #308]	; (8007d48 <ExecuteMonitor+0x344>)
 8007c14:	0129      	lsls	r1, r5, #4
 8007c16:	1b49      	subs	r1, r1, r5
 8007c18:	185b      	adds	r3, r3, r1
 8007c1a:	181b      	adds	r3, r3, r0
 8007c1c:	7c1b      	ldrb	r3, [r3, #16]
 8007c1e:	18a2      	adds	r2, r4, r2
 8007c20:	7313      	strb	r3, [r2, #12]
		            	Delay_ms(1);
 8007c22:	2001      	movs	r0, #1
 8007c24:	f008 f9e0 	bl	800ffe8 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007c28:	7a23      	ldrb	r3, [r4, #8]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	18e4      	adds	r4, r4, r3
 8007c2e:	7b23      	ldrb	r3, [r4, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0da      	beq.n	8007bea <ExecuteMonitor+0x1e6>
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d1e4      	bne.n	8007c02 <ExecuteMonitor+0x1fe>
 8007c38:	e7d7      	b.n	8007bea <ExecuteMonitor+0x1e6>
		          		   flag=0;
 8007c3a:	4a41      	ldr	r2, [pc, #260]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007c40:	4a42      	ldr	r2, [pc, #264]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c42:	7293      	strb	r3, [r2, #10]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007c44:	214c      	movs	r1, #76	; 0x4c
 8007c46:	5453      	strb	r3, [r2, r1]
 8007c48:	e00e      	b.n	8007c68 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007c4a:	4c40      	ldr	r4, [pc, #256]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c4c:	18a3      	adds	r3, r4, r2
 8007c4e:	7b19      	ldrb	r1, [r3, #12]
 8007c50:	4b3f      	ldr	r3, [pc, #252]	; (8007d50 <ExecuteMonitor+0x34c>)
 8007c52:	189b      	adds	r3, r3, r2
 8007c54:	3381      	adds	r3, #129	; 0x81
 8007c56:	33ff      	adds	r3, #255	; 0xff
 8007c58:	7019      	strb	r1, [r3, #0]
		          			Delay_ms(1);
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	f008 f9c4 	bl	800ffe8 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007c60:	224c      	movs	r2, #76	; 0x4c
 8007c62:	5ca3      	ldrb	r3, [r4, r2]
 8007c64:	3301      	adds	r3, #1
 8007c66:	54a3      	strb	r3, [r4, r2]
 8007c68:	4b38      	ldr	r3, [pc, #224]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c6a:	224c      	movs	r2, #76	; 0x4c
 8007c6c:	5c9a      	ldrb	r2, [r3, r2]
 8007c6e:	2a3f      	cmp	r2, #63	; 0x3f
 8007c70:	d9eb      	bls.n	8007c4a <ExecuteMonitor+0x246>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007c72:	0018      	movs	r0, r3
 8007c74:	300c      	adds	r0, #12
 8007c76:	2240      	movs	r2, #64	; 0x40
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f00c fe54 	bl	8014926 <memset>
 8007c7e:	e729      	b.n	8007ad4 <ExecuteMonitor+0xd0>
                	finalMatrixIndex=0;
 8007c80:	4b32      	ldr	r3, [pc, #200]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	721a      	strb	r2, [r3, #8]
                	twoDMatrixIndex=1;
 8007c86:	2101      	movs	r1, #1
 8007c88:	7259      	strb	r1, [r3, #9]
   		          	counter=0;
 8007c8a:	729a      	strb	r2, [r3, #10]
   		           while(counter != numCommandParameters)
 8007c8c:	e005      	b.n	8007c9a <ExecuteMonitor+0x296>
   		             counter++;
 8007c8e:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c90:	7a9a      	ldrb	r2, [r3, #10]
 8007c92:	3201      	adds	r2, #1
 8007c94:	729a      	strb	r2, [r3, #10]
   		             twoDMatrixIndex=1;
 8007c96:	2201      	movs	r2, #1
 8007c98:	725a      	strb	r2, [r3, #9]
   		           while(counter != numCommandParameters)
 8007c9a:	4a2c      	ldr	r2, [pc, #176]	; (8007d4c <ExecuteMonitor+0x348>)
 8007c9c:	4b2a      	ldr	r3, [pc, #168]	; (8007d48 <ExecuteMonitor+0x344>)
 8007c9e:	7a92      	ldrb	r2, [r2, #10]
 8007ca0:	7b5b      	ldrb	r3, [r3, #13]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d01b      	beq.n	8007cde <ExecuteMonitor+0x2da>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007ca6:	4c29      	ldr	r4, [pc, #164]	; (8007d4c <ExecuteMonitor+0x348>)
 8007ca8:	7aa5      	ldrb	r5, [r4, #10]
 8007caa:	7a60      	ldrb	r0, [r4, #9]
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	7263      	strb	r3, [r4, #9]
 8007cb0:	7a22      	ldrb	r2, [r4, #8]
 8007cb2:	1c53      	adds	r3, r2, #1
 8007cb4:	7223      	strb	r3, [r4, #8]
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <ExecuteMonitor+0x344>)
 8007cb8:	0129      	lsls	r1, r5, #4
 8007cba:	1b49      	subs	r1, r1, r5
 8007cbc:	185b      	adds	r3, r3, r1
 8007cbe:	181b      	adds	r3, r3, r0
 8007cc0:	7c1b      	ldrb	r3, [r3, #16]
 8007cc2:	18a2      	adds	r2, r4, r2
 8007cc4:	7313      	strb	r3, [r2, #12]
   		            	Delay_ms(1);
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	f008 f98e 	bl	800ffe8 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007ccc:	7a23      	ldrb	r3, [r4, #8]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	18e4      	adds	r4, r4, r3
 8007cd2:	7b23      	ldrb	r3, [r4, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0da      	beq.n	8007c8e <ExecuteMonitor+0x28a>
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d1e4      	bne.n	8007ca6 <ExecuteMonitor+0x2a2>
 8007cdc:	e7d7      	b.n	8007c8e <ExecuteMonitor+0x28a>
		            counter=0;
 8007cde:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <ExecuteMonitor+0x348>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	729a      	strb	r2, [r3, #10]
                  while(flag != NonActive)
 8007ce4:	e017      	b.n	8007d16 <ExecuteMonitor+0x312>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007ce6:	4c19      	ldr	r4, [pc, #100]	; (8007d4c <ExecuteMonitor+0x348>)
 8007ce8:	18a3      	adds	r3, r4, r2
 8007cea:	7b19      	ldrb	r1, [r3, #12]
 8007cec:	4b18      	ldr	r3, [pc, #96]	; (8007d50 <ExecuteMonitor+0x34c>)
 8007cee:	189b      	adds	r3, r3, r2
 8007cf0:	3381      	adds	r3, #129	; 0x81
 8007cf2:	33ff      	adds	r3, #255	; 0xff
 8007cf4:	7019      	strb	r1, [r3, #0]
		          			Delay_us(200);
 8007cf6:	20c8      	movs	r0, #200	; 0xc8
 8007cf8:	f005 fef2 	bl	800dae0 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007cfc:	224c      	movs	r2, #76	; 0x4c
 8007cfe:	5ca3      	ldrb	r3, [r4, r2]
 8007d00:	3301      	adds	r3, #1
 8007d02:	54a3      	strb	r3, [r4, r2]
 8007d04:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <ExecuteMonitor+0x348>)
 8007d06:	224c      	movs	r2, #76	; 0x4c
 8007d08:	5c9a      	ldrb	r2, [r3, r2]
 8007d0a:	2a3f      	cmp	r2, #63	; 0x3f
 8007d0c:	d9eb      	bls.n	8007ce6 <ExecuteMonitor+0x2e2>
  	          		 Delay_ms(Monitor_time);
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f008 f969 	bl	800ffe8 <HAL_Delay>
                  while(flag != NonActive)
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <ExecuteMonitor+0x33c>)
 8007d18:	791b      	ldrb	r3, [r3, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <ExecuteMonitor+0x324>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <ExecuteMonitor+0x348>)
 8007d20:	224c      	movs	r2, #76	; 0x4c
 8007d22:	2100      	movs	r1, #0
 8007d24:	5499      	strb	r1, [r3, r2]
 8007d26:	e7ed      	b.n	8007d04 <ExecuteMonitor+0x300>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007d28:	4808      	ldr	r0, [pc, #32]	; (8007d4c <ExecuteMonitor+0x348>)
 8007d2a:	300c      	adds	r0, #12
 8007d2c:	2240      	movs	r2, #64	; 0x40
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f00c fdf9 	bl	8014926 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007d34:	4807      	ldr	r0, [pc, #28]	; (8007d54 <ExecuteMonitor+0x350>)
 8007d36:	22c0      	movs	r2, #192	; 0xc0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f00c fdf4 	bl	8014926 <memset>
 8007d3e:	e6ce      	b.n	8007ade <ExecuteMonitor+0xda>
 8007d40:	20000000 	.word	0x20000000
 8007d44:	20001b08 	.word	0x20001b08
 8007d48:	20001b88 	.word	0x20001b88
 8007d4c:	20001c08 	.word	0x20001c08
 8007d50:	20001740 	.word	0x20001740
 8007d54:	200018c0 	.word	0x200018c0

08007d58 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	e020      	b.n	8007d9e <StartDefaultTask+0x46>
				RTOS_IND_blink(100);
 8007d5c:	2490      	movs	r4, #144	; 0x90
 8007d5e:	05e4      	lsls	r4, r4, #23
 8007d60:	2201      	movs	r2, #1
 8007d62:	2140      	movs	r1, #64	; 0x40
 8007d64:	0020      	movs	r0, r4
 8007d66:	f009 fcf2 	bl	801174e <HAL_GPIO_WritePin>
 8007d6a:	2064      	movs	r0, #100	; 0x64
 8007d6c:	f006 fa42 	bl	800e1f4 <osDelay>
 8007d70:	2200      	movs	r2, #0
 8007d72:	2140      	movs	r1, #64	; 0x40
 8007d74:	0020      	movs	r0, r4
 8007d76:	f009 fcea 	bl	801174e <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007d7a:	4b20      	ldr	r3, [pc, #128]	; (8007dfc <StartDefaultTask+0xa4>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007d80:	f005 f87a 	bl	800ce78 <CheckAttachedButtons>
		ExecuteSnippet();
 8007d84:	f7fd fcd2 	bl	800572c <ExecuteSnippet>
		ExecuteMonitor();
 8007d88:	f7ff fe3c 	bl	8007a04 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007d8c:	4b1c      	ldr	r3, [pc, #112]	; (8007e00 <StartDefaultTask+0xa8>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <StartDefaultTask+0x42>
			delayButtonStateReset = false;
 8007d94:	4b1b      	ldr	r3, [pc, #108]	; (8007e04 <StartDefaultTask+0xac>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007d9a:	f007 ffc3 	bl	800fd24 <vPortYield>
		switch(indMode){
 8007d9e:	4b17      	ldr	r3, [pc, #92]	; (8007dfc <StartDefaultTask+0xa4>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d0da      	beq.n	8007d5c <StartDefaultTask+0x4>
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d014      	beq.n	8007dd4 <StartDefaultTask+0x7c>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d1e8      	bne.n	8007d80 <StartDefaultTask+0x28>
				RTOS_IND_blink(200);
 8007dae:	2490      	movs	r4, #144	; 0x90
 8007db0:	05e4      	lsls	r4, r4, #23
 8007db2:	2201      	movs	r2, #1
 8007db4:	2140      	movs	r1, #64	; 0x40
 8007db6:	0020      	movs	r0, r4
 8007db8:	f009 fcc9 	bl	801174e <HAL_GPIO_WritePin>
 8007dbc:	20c8      	movs	r0, #200	; 0xc8
 8007dbe:	f006 fa19 	bl	800e1f4 <osDelay>
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2140      	movs	r1, #64	; 0x40
 8007dc6:	0020      	movs	r0, r4
 8007dc8:	f009 fcc1 	bl	801174e <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <StartDefaultTask+0xa4>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
				break;
 8007dd2:	e7d5      	b.n	8007d80 <StartDefaultTask+0x28>
				RTOS_IND_blink(30);
 8007dd4:	2490      	movs	r4, #144	; 0x90
 8007dd6:	05e4      	lsls	r4, r4, #23
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2140      	movs	r1, #64	; 0x40
 8007ddc:	0020      	movs	r0, r4
 8007dde:	f009 fcb6 	bl	801174e <HAL_GPIO_WritePin>
 8007de2:	201e      	movs	r0, #30
 8007de4:	f006 fa06 	bl	800e1f4 <osDelay>
 8007de8:	2200      	movs	r2, #0
 8007dea:	2140      	movs	r1, #64	; 0x40
 8007dec:	0020      	movs	r0, r4
 8007dee:	f009 fcae 	bl	801174e <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007df2:	4b02      	ldr	r3, [pc, #8]	; (8007dfc <StartDefaultTask+0xa4>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
				break;
 8007df8:	e7c2      	b.n	8007d80 <StartDefaultTask+0x28>
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	20000ee7 	.word	0x20000ee7
 8007e00:	2000278a 	.word	0x2000278a
 8007e04:	20002780 	.word	0x20002780

08007e08 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007e08:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007e0a:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <vMainConfigureTimerForRunTimeStats+0x14>)
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	4904      	ldr	r1, [pc, #16]	; (8007e20 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007e10:	f7f8 f99e 	bl	8000150 <__udivsi3>
 8007e14:	4b03      	ldr	r3, [pc, #12]	; (8007e24 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007e16:	6518      	str	r0, [r3, #80]	; 0x50
}
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	200000a4 	.word	0x200000a4
 8007e20:	00002710 	.word	0x00002710
 8007e24:	20001c08 	.word	0x20001c08

08007e28 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007e28:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007e2a:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <ulMainGetRunTimeCounterValue+0x40>)
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	21fa      	movs	r1, #250	; 0xfa
 8007e30:	0089      	lsls	r1, r1, #2
 8007e32:	f7f8 f98d 	bl	8000150 <__udivsi3>
 8007e36:	1e44      	subs	r4, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <ulMainGetRunTimeCounterValue+0x44>)
 8007e3a:	681d      	ldr	r5, [r3, #0]
 8007e3c:	1b65      	subs	r5, r4, r5
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007e3e:	f007 f8f5 	bl	800f02c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007e42:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <ulMainGetRunTimeCounterValue+0x48>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	015b      	lsls	r3, r3, #5
 8007e48:	d503      	bpl.n	8007e52 <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007e4a:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <ulMainGetRunTimeCounterValue+0x44>)
 8007e4e:	681d      	ldr	r5, [r3, #0]
 8007e50:	1b65      	subs	r5, r4, r5
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007e52:	0084      	lsls	r4, r0, #2
 8007e54:	1824      	adds	r4, r4, r0
 8007e56:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <ulMainGetRunTimeCounterValue+0x4c>)
 8007e5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007e5c:	0028      	movs	r0, r5
 8007e5e:	f7f8 f977 	bl	8000150 <__udivsi3>
 8007e62:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	200000a4 	.word	0x200000a4
 8007e6c:	e000e018 	.word	0xe000e018
 8007e70:	e000ed04 	.word	0xe000ed04
 8007e74:	20001c08 	.word	0x20001c08

08007e78 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007e78:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007e7a:	f007 fef6 	bl	800fc6a <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007e7e:	b2c4      	uxtb	r4, r0
 8007e80:	0020      	movs	r0, r4
 8007e82:	f002 ff39 	bl	800acf8 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007e86:	0020      	movs	r0, r4
 8007e88:	f003 fc92 	bl	800b7b0 <SwitchStreamDMAToMsg>
}
 8007e8c:	bd10      	pop	{r4, pc}
	...

08007e90 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	0004      	movs	r4, r0
 8007e96:	000e      	movs	r6, r1
 8007e98:	0015      	movs	r5, r2
 8007e9a:	220f      	movs	r2, #15
 8007e9c:	446a      	add	r2, sp
 8007e9e:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007ea0:	b2d8      	uxtb	r0, r3
 8007ea2:	ab08      	add	r3, sp, #32
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	4298      	cmp	r0, r3
 8007ea8:	d00d      	beq.n	8007ec6 <SetupDMAStreams+0x36>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d100      	bne.n	8007eb0 <SetupDMAStreams+0x20>
 8007eae:	e0ba      	b.n	8008026 <SetupDMAStreams+0x196>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d100      	bne.n	8007eb6 <SetupDMAStreams+0x26>
 8007eb4:	e0ba      	b.n	800802c <SetupDMAStreams+0x19c>
	if(direction == FORWARD){
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d00a      	beq.n	8007ed0 <SetupDMAStreams+0x40>
	else if(direction == BACKWARD){
 8007eba:	2c01      	cmp	r4, #1
 8007ebc:	d041      	beq.n	8007f42 <SetupDMAStreams+0xb2>
	else if(direction == BIDIRECTIONAL){
 8007ebe:	2c02      	cmp	r4, #2
 8007ec0:	d06a      	beq.n	8007f98 <SetupDMAStreams+0x108>
		return BOS_ERR_WrongParam;
 8007ec2:	2067      	movs	r0, #103	; 0x67
 8007ec4:	e0b0      	b.n	8008028 <SetupDMAStreams+0x198>
		portStatus[src] =STREAM;
 8007ec6:	4b5b      	ldr	r3, [pc, #364]	; (8008034 <SetupDMAStreams+0x1a4>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 8007ecc:	2067      	movs	r0, #103	; 0x67
 8007ece:	e0ab      	b.n	8008028 <SetupDMAStreams+0x198>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007ed0:	f005 ffe8 	bl	800dea4 <GetUart>
 8007ed4:	0004      	movs	r4, r0
 8007ed6:	ab08      	add	r3, sp, #32
 8007ed8:	7818      	ldrb	r0, [r3, #0]
 8007eda:	f005 ffe3 	bl	800dea4 <GetUart>
 8007ede:	0001      	movs	r1, r0
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	0020      	movs	r0, r4
 8007ee4:	f7ff fc40 	bl	8007768 <StartDMAstream>
 8007ee8:	2817      	cmp	r0, #23
 8007eea:	d100      	bne.n	8007eee <SetupDMAStreams+0x5e>
 8007eec:	e09c      	b.n	8008028 <SetupDMAStreams+0x198>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007eee:	0168      	lsls	r0, r5, #5
 8007ef0:	1b40      	subs	r0, r0, r5
 8007ef2:	0080      	lsls	r0, r0, #2
 8007ef4:	1940      	adds	r0, r0, r5
 8007ef6:	00c0      	lsls	r0, r0, #3
 8007ef8:	250f      	movs	r5, #15
 8007efa:	446d      	add	r5, sp
 8007efc:	21fa      	movs	r1, #250	; 0xfa
 8007efe:	0089      	lsls	r1, r1, #2
 8007f00:	f7f8 f926 	bl	8000150 <__udivsi3>
 8007f04:	0001      	movs	r1, r0
 8007f06:	4c4c      	ldr	r4, [pc, #304]	; (8008038 <SetupDMAStreams+0x1a8>)
 8007f08:	4b4c      	ldr	r3, [pc, #304]	; (800803c <SetupDMAStreams+0x1ac>)
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	002b      	movs	r3, r5
 8007f0e:	2200      	movs	r2, #0
 8007f10:	0020      	movs	r0, r4
 8007f12:	f007 fd69 	bl	800f9e8 <xTimerCreate>
 8007f16:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007f18:	782b      	ldrb	r3, [r5, #0]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	4a48      	ldr	r2, [pc, #288]	; (8008040 <SetupDMAStreams+0x1b0>)
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	509e      	str	r6, [r3, r2]
	if(xTimerStream != NULL)
 8007f22:	2c00      	cmp	r4, #0
 8007f24:	d100      	bne.n	8007f28 <SetupDMAStreams+0x98>
 8007f26:	e083      	b.n	8008030 <SetupDMAStreams+0x1a0>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007f28:	f007 f87a 	bl	800f020 <xTaskGetTickCount>
 8007f2c:	0002      	movs	r2, r0
 8007f2e:	2301      	movs	r3, #1
 8007f30:	425b      	negs	r3, r3
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	2101      	movs	r1, #1
 8007f38:	0020      	movs	r0, r4
 8007f3a:	f007 fd73 	bl	800fa24 <xTimerGenericCommand>
	return BOS_OK;
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e072      	b.n	8008028 <SetupDMAStreams+0x198>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007f42:	0018      	movs	r0, r3
 8007f44:	f005 ffae 	bl	800dea4 <GetUart>
 8007f48:	0004      	movs	r4, r0
 8007f4a:	230f      	movs	r3, #15
 8007f4c:	446b      	add	r3, sp
 8007f4e:	7818      	ldrb	r0, [r3, #0]
 8007f50:	f005 ffa8 	bl	800dea4 <GetUart>
 8007f54:	0001      	movs	r1, r0
 8007f56:	2201      	movs	r2, #1
 8007f58:	0020      	movs	r0, r4
 8007f5a:	f7ff fc05 	bl	8007768 <StartDMAstream>
 8007f5e:	2817      	cmp	r0, #23
 8007f60:	d062      	beq.n	8008028 <SetupDMAStreams+0x198>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007f62:	0168      	lsls	r0, r5, #5
 8007f64:	1b40      	subs	r0, r0, r5
 8007f66:	0080      	lsls	r0, r0, #2
 8007f68:	1940      	adds	r0, r0, r5
 8007f6a:	00c0      	lsls	r0, r0, #3
 8007f6c:	21fa      	movs	r1, #250	; 0xfa
 8007f6e:	0089      	lsls	r1, r1, #2
 8007f70:	f7f8 f8ee 	bl	8000150 <__udivsi3>
 8007f74:	0001      	movs	r1, r0
 8007f76:	4c30      	ldr	r4, [pc, #192]	; (8008038 <SetupDMAStreams+0x1a8>)
 8007f78:	4b30      	ldr	r3, [pc, #192]	; (800803c <SetupDMAStreams+0x1ac>)
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	ab08      	add	r3, sp, #32
 8007f7e:	2200      	movs	r2, #0
 8007f80:	0020      	movs	r0, r4
 8007f82:	f007 fd31 	bl	800f9e8 <xTimerCreate>
 8007f86:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007f88:	230f      	movs	r3, #15
 8007f8a:	446b      	add	r3, sp
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4a2b      	ldr	r2, [pc, #172]	; (8008040 <SetupDMAStreams+0x1b0>)
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	509e      	str	r6, [r3, r2]
 8007f96:	e7c4      	b.n	8007f22 <SetupDMAStreams+0x92>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007f98:	f005 ff84 	bl	800dea4 <GetUart>
 8007f9c:	0004      	movs	r4, r0
 8007f9e:	ab08      	add	r3, sp, #32
 8007fa0:	7818      	ldrb	r0, [r3, #0]
 8007fa2:	f005 ff7f 	bl	800dea4 <GetUart>
 8007fa6:	0001      	movs	r1, r0
 8007fa8:	2201      	movs	r2, #1
 8007faa:	0020      	movs	r0, r4
 8007fac:	f7ff fbdc 	bl	8007768 <StartDMAstream>
 8007fb0:	2817      	cmp	r0, #23
 8007fb2:	d039      	beq.n	8008028 <SetupDMAStreams+0x198>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007fb4:	0168      	lsls	r0, r5, #5
 8007fb6:	1b40      	subs	r0, r0, r5
 8007fb8:	0080      	lsls	r0, r0, #2
 8007fba:	1940      	adds	r0, r0, r5
 8007fbc:	00c0      	lsls	r0, r0, #3
 8007fbe:	21fa      	movs	r1, #250	; 0xfa
 8007fc0:	0089      	lsls	r1, r1, #2
 8007fc2:	f7f8 f8c5 	bl	8000150 <__udivsi3>
 8007fc6:	0004      	movs	r4, r0
 8007fc8:	481b      	ldr	r0, [pc, #108]	; (8008038 <SetupDMAStreams+0x1a8>)
 8007fca:	4b1c      	ldr	r3, [pc, #112]	; (800803c <SetupDMAStreams+0x1ac>)
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	230f      	movs	r3, #15
 8007fd0:	446b      	add	r3, sp
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	0021      	movs	r1, r4
 8007fd6:	f007 fd07 	bl	800f9e8 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007fda:	466b      	mov	r3, sp
 8007fdc:	7bdb      	ldrb	r3, [r3, #15]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4a17      	ldr	r2, [pc, #92]	; (8008040 <SetupDMAStreams+0x1b0>)
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	509e      	str	r6, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007fe6:	ab08      	add	r3, sp, #32
 8007fe8:	7818      	ldrb	r0, [r3, #0]
 8007fea:	f005 ff5b 	bl	800dea4 <GetUart>
 8007fee:	0005      	movs	r5, r0
 8007ff0:	466b      	mov	r3, sp
 8007ff2:	7bd8      	ldrb	r0, [r3, #15]
 8007ff4:	f005 ff56 	bl	800dea4 <GetUart>
 8007ff8:	0001      	movs	r1, r0
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	0028      	movs	r0, r5
 8007ffe:	f7ff fbb3 	bl	8007768 <StartDMAstream>
 8008002:	2817      	cmp	r0, #23
 8008004:	d010      	beq.n	8008028 <SetupDMAStreams+0x198>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8008006:	480c      	ldr	r0, [pc, #48]	; (8008038 <SetupDMAStreams+0x1a8>)
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <SetupDMAStreams+0x1ac>)
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	ab08      	add	r3, sp, #32
 800800e:	2200      	movs	r2, #0
 8008010:	0021      	movs	r1, r4
 8008012:	f007 fce9 	bl	800f9e8 <xTimerCreate>
 8008016:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8008018:	ab08      	add	r3, sp, #32
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	3b01      	subs	r3, #1
 800801e:	4a08      	ldr	r2, [pc, #32]	; (8008040 <SetupDMAStreams+0x1b0>)
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	509e      	str	r6, [r3, r2]
 8008024:	e77d      	b.n	8007f22 <SetupDMAStreams+0x92>
		return BOS_ERR_WrongParam;
 8008026:	2067      	movs	r0, #103	; 0x67
}
 8008028:	b004      	add	sp, #16
 800802a:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 800802c:	2067      	movs	r0, #103	; 0x67
 800802e:	e7fb      	b.n	8008028 <SetupDMAStreams+0x198>
	return BOS_OK;
 8008030:	2000      	movs	r0, #0
 8008032:	e7f9      	b.n	8008028 <SetupDMAStreams+0x198>
 8008034:	2000095c 	.word	0x2000095c
 8008038:	0801c340 	.word	0x0801c340
 800803c:	08007e79 	.word	0x08007e79
 8008040:	200016e4 	.word	0x200016e4

08008044 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8008044:	b510      	push	{r4, lr}
	switch(port){
 8008046:	2805      	cmp	r0, #5
 8008048:	d80a      	bhi.n	8008060 <NotifyMessagingTask+0x1c>
 800804a:	0080      	lsls	r0, r0, #2
 800804c:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <NotifyMessagingTask+0x60>)
 800804e:	581b      	ldr	r3, [r3, r0]
 8008050:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8008052:	4b15      	ldr	r3, [pc, #84]	; (80080a8 <NotifyMessagingTask+0x64>)
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	2202      	movs	r2, #2
 800805a:	2100      	movs	r1, #0
 800805c:	f007 fbf4 	bl	800f848 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8008060:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <NotifyMessagingTask+0x68>)
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	2300      	movs	r3, #0
 8008068:	2202      	movs	r2, #2
 800806a:	2100      	movs	r1, #0
 800806c:	f007 fbec 	bl	800f848 <xTaskGenericNotify>
			break;
 8008070:	e7f6      	b.n	8008060 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <NotifyMessagingTask+0x6c>)
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	2202      	movs	r2, #2
 800807a:	2100      	movs	r1, #0
 800807c:	f007 fbe4 	bl	800f848 <xTaskGenericNotify>
			break;
 8008080:	e7ee      	b.n	8008060 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <NotifyMessagingTask+0x70>)
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	2300      	movs	r3, #0
 8008088:	2202      	movs	r2, #2
 800808a:	2100      	movs	r1, #0
 800808c:	f007 fbdc 	bl	800f848 <xTaskGenericNotify>
			break;
 8008090:	e7e6      	b.n	8008060 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <NotifyMessagingTask+0x74>)
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	2300      	movs	r3, #0
 8008098:	2202      	movs	r2, #2
 800809a:	2100      	movs	r1, #0
 800809c:	f007 fbd4 	bl	800f848 <xTaskGenericNotify>
}
 80080a0:	e7de      	b.n	8008060 <NotifyMessagingTask+0x1c>
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	08019ac4 	.word	0x08019ac4
 80080a8:	20001b18 	.word	0x20001b18
 80080ac:	20001b1c 	.word	0x20001b1c
 80080b0:	20001b20 	.word	0x20001b20
 80080b4:	20001b24 	.word	0x20001b24
 80080b8:	20001b28 	.word	0x20001b28

080080bc <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80080bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080be:	46de      	mov	lr, fp
 80080c0:	4657      	mov	r7, sl
 80080c2:	464e      	mov	r6, r9
 80080c4:	4645      	mov	r5, r8
 80080c6:	b5e0      	push	{r5, r6, r7, lr}
 80080c8:	b085      	sub	sp, #20
 80080ca:	0005      	movs	r5, r0
 80080cc:	4688      	mov	r8, r1
 80080ce:	0014      	movs	r4, r2
 80080d0:	9302      	str	r3, [sp, #8]
 80080d2:	ab0e      	add	r3, sp, #56	; 0x38
 80080d4:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80080d6:	0003      	movs	r3, r0
 80080d8:	4313      	orrs	r3, r2
 80080da:	d100      	bne.n	80080de <SendMessageFromPort+0x22>
 80080dc:	e1a9      	b.n	8008432 <SendMessageFromPort+0x376>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d104      	bne.n	80080ec <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80080e2:	2aff      	cmp	r2, #255	; 0xff
 80080e4:	d002      	beq.n	80080ec <SendMessageFromPort+0x30>
 80080e6:	2afe      	cmp	r2, #254	; 0xfe
 80080e8:	d000      	beq.n	80080ec <SendMessageFromPort+0x30>
 80080ea:	e1a4      	b.n	8008436 <SendMessageFromPort+0x37a>
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	d005      	beq.n	80080fc <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80080f0:	4643      	mov	r3, r8
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <SendMessageFromPort+0x40>
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	d100      	bne.n	80080fc <SendMessageFromPort+0x40>
 80080fa:	e19e      	b.n	800843a <SendMessageFromPort+0x37e>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80080fc:	2000      	movs	r0, #0
 80080fe:	f006 fef3 	bl	800eee8 <uxTaskPriorityGet>
 8008102:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8008104:	2105      	movs	r1, #5
 8008106:	2000      	movs	r0, #0
 8008108:	f006 fefe 	bl	800ef08 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 800810c:	4bcd      	ldr	r3, [pc, #820]	; (8008444 <SendMessageFromPort+0x388>)
 800810e:	2248      	movs	r2, #72	; 0x48
 8008110:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8008112:	3212      	adds	r2, #18
 8008114:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008116:	4643      	mov	r3, r8
 8008118:	432b      	orrs	r3, r5
 800811a:	d101      	bne.n	8008120 <SendMessageFromPort+0x64>
 800811c:	2cfd      	cmp	r4, #253	; 0xfd
 800811e:	d802      	bhi.n	8008126 <SendMessageFromPort+0x6a>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d130      	bne.n	8008188 <SendMessageFromPort+0xcc>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8008126:	3f01      	subs	r7, #1
 8008128:	4ac7      	ldr	r2, [pc, #796]	; (8008448 <SendMessageFromPort+0x38c>)
 800812a:	5dd6      	ldrb	r6, [r2, r7]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 800812c:	00f9      	lsls	r1, r7, #3
 800812e:	1bc9      	subs	r1, r1, r7
 8008130:	00c9      	lsls	r1, r1, #3
 8008132:	4bc6      	ldr	r3, [pc, #792]	; (800844c <SendMessageFromPort+0x390>)
 8008134:	18c9      	adds	r1, r1, r3
 8008136:	48c6      	ldr	r0, [pc, #792]	; (8008450 <SendMessageFromPort+0x394>)
 8008138:	0032      	movs	r2, r6
 800813a:	f00c fd20 	bl	8014b7e <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 800813e:	4bc1      	ldr	r3, [pc, #772]	; (8008444 <SendMessageFromPort+0x388>)
 8008140:	469b      	mov	fp, r3
 8008142:	709e      	strb	r6, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8008144:	1cf3      	adds	r3, r6, #3
 8008146:	4699      	mov	r9, r3
 8008148:	4bc2      	ldr	r3, [pc, #776]	; (8008454 <SendMessageFromPort+0x398>)
 800814a:	464a      	mov	r2, r9
 800814c:	4659      	mov	r1, fp
 800814e:	001f      	movs	r7, r3
 8008150:	0018      	movs	r0, r3
 8008152:	f00c fd14 	bl	8014b7e <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8008156:	b2b3      	uxth	r3, r6
 8008158:	469a      	mov	sl, r3
 800815a:	4649      	mov	r1, r9
 800815c:	0038      	movs	r0, r7
 800815e:	f003 fb9f 	bl	800b8a0 <CalculateCRC8>
 8008162:	465b      	mov	r3, fp
 8008164:	464a      	mov	r2, r9
 8008166:	5498      	strb	r0, [r3, r2]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8008168:	2238      	movs	r2, #56	; 0x38
 800816a:	2100      	movs	r1, #0
 800816c:	0038      	movs	r0, r7
 800816e:	f00c fbda 	bl	8014926 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8008172:	2cfd      	cmp	r4, #253	; 0xfd
 8008174:	d900      	bls.n	8008178 <SendMessageFromPort+0xbc>
 8008176:	e121      	b.n	80083bc <SendMessageFromPort+0x300>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8008178:	9f02      	ldr	r7, [sp, #8]
 800817a:	3f2c      	subs	r7, #44	; 0x2c
 800817c:	b2bf      	uxth	r7, r7
 800817e:	2f01      	cmp	r7, #1
 8008180:	d800      	bhi.n	8008184 <SendMessageFromPort+0xc8>
 8008182:	e0da      	b.n	800833a <SendMessageFromPort+0x27e>
			Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8008184:	2600      	movs	r6, #0
 8008186:	e0f7      	b.n	8008378 <SendMessageFromPort+0x2bc>
		if(src == 0)
 8008188:	4643      	mov	r3, r8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <SendMessageFromPort+0xd8>
			src =myID;
 800818e:	4bb2      	ldr	r3, [pc, #712]	; (8008458 <SendMessageFromPort+0x39c>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4698      	mov	r8, r3
		if(code > 0xFF)
 8008194:	9b02      	ldr	r3, [sp, #8]
 8008196:	2bff      	cmp	r3, #255	; 0xff
 8008198:	d81f      	bhi.n	80081da <SendMessageFromPort+0x11e>
	bool extendOptions = false, extendCode = false;
 800819a:	2100      	movs	r1, #0
		message[2] =length;
 800819c:	4aa9      	ldr	r2, [pc, #676]	; (8008444 <SendMessageFromPort+0x388>)
 800819e:	2300      	movs	r3, #0
 80081a0:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 80081a2:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 80081a4:	4643      	mov	r3, r8
 80081a6:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80081a8:	48ac      	ldr	r0, [pc, #688]	; (800845c <SendMessageFromPort+0x3a0>)
 80081aa:	2300      	movs	r3, #0
 80081ac:	56c3      	ldrsb	r3, [r0, r3]
 80081ae:	7906      	ldrb	r6, [r0, #4]
 80081b0:	0136      	lsls	r6, r6, #4
 80081b2:	4333      	orrs	r3, r6
 80081b4:	b25b      	sxtb	r3, r3
 80081b6:	7840      	ldrb	r0, [r0, #1]
 80081b8:	0080      	lsls	r0, r0, #2
 80081ba:	4303      	orrs	r3, r0
 80081bc:	b25b      	sxtb	r3, r3
 80081be:	0048      	lsls	r0, r1, #1
 80081c0:	4303      	orrs	r3, r0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 80081c6:	9802      	ldr	r0, [sp, #8]
 80081c8:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d007      	beq.n	80081de <SendMessageFromPort+0x122>
			message[6 + shift] =(uint8_t )(code >> 8);
 80081ce:	0a02      	lsrs	r2, r0, #8
 80081d0:	499c      	ldr	r1, [pc, #624]	; (8008444 <SendMessageFromPort+0x388>)
 80081d2:	71ca      	strb	r2, [r1, #7]
			++shift;
 80081d4:	2201      	movs	r2, #1
 80081d6:	4693      	mov	fp, r2
 80081d8:	e003      	b.n	80081e2 <SendMessageFromPort+0x126>
			extendCode = true;
 80081da:	2101      	movs	r1, #1
 80081dc:	e7de      	b.n	800819c <SendMessageFromPort+0xe0>
 80081de:	2200      	movs	r2, #0
 80081e0:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 80081e2:	2f2e      	cmp	r7, #46	; 0x2e
 80081e4:	d909      	bls.n	80081fa <SendMessageFromPort+0x13e>
			message[5] |=0x80;
 80081e6:	4a97      	ldr	r2, [pc, #604]	; (8008444 <SendMessageFromPort+0x388>)
 80081e8:	2180      	movs	r1, #128	; 0x80
 80081ea:	4249      	negs	r1, r1
 80081ec:	430b      	orrs	r3, r1
 80081ee:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80081f0:	4b9b      	ldr	r3, [pc, #620]	; (8008460 <SendMessageFromPort+0x3a4>)
 80081f2:	805f      	strh	r7, [r3, #2]
	uint8_t length =0, shift =0;
 80081f4:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80081f6:	272e      	movs	r7, #46	; 0x2e
			while(totalNumberOfParams != 0){
 80081f8:	e033      	b.n	8008262 <SendMessageFromPort+0x1a6>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80081fa:	465b      	mov	r3, fp
 80081fc:	3307      	adds	r3, #7
 80081fe:	4891      	ldr	r0, [pc, #580]	; (8008444 <SendMessageFromPort+0x388>)
 8008200:	1818      	adds	r0, r3, r0
 8008202:	4b97      	ldr	r3, [pc, #604]	; (8008460 <SendMessageFromPort+0x3a4>)
 8008204:	8819      	ldrh	r1, [r3, #0]
 8008206:	4b97      	ldr	r3, [pc, #604]	; (8008464 <SendMessageFromPort+0x3a8>)
 8008208:	18c9      	adds	r1, r1, r3
 800820a:	003a      	movs	r2, r7
 800820c:	f00c fcb7 	bl	8014b7e <memcpy>
			length =numberOfParams + shift + 4;
 8008210:	465b      	mov	r3, fp
 8008212:	19de      	adds	r6, r3, r7
 8008214:	b2f6      	uxtb	r6, r6
 8008216:	3604      	adds	r6, #4
 8008218:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 800821a:	4b93      	ldr	r3, [pc, #588]	; (8008468 <SendMessageFromPort+0x3ac>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d08d      	beq.n	800813e <SendMessageFromPort+0x82>
			if(dstGroupID < BOS_BROADCAST){
 8008222:	4b92      	ldr	r3, [pc, #584]	; (800846c <SendMessageFromPort+0x3b0>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	469c      	mov	ip, r3
 8008228:	2bff      	cmp	r3, #255	; 0xff
 800822a:	d033      	beq.n	8008294 <SendMessageFromPort+0x1d8>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800822c:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 800822e:	2000      	movs	r0, #0
 8008230:	e034      	b.n	800829c <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8008232:	4b84      	ldr	r3, [pc, #528]	; (8008444 <SendMessageFromPort+0x388>)
 8008234:	7959      	ldrb	r1, [r3, #5]
 8008236:	227f      	movs	r2, #127	; 0x7f
 8008238:	400a      	ands	r2, r1
 800823a:	715a      	strb	r2, [r3, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800823c:	465a      	mov	r2, fp
 800823e:	1dd0      	adds	r0, r2, #7
 8008240:	18c0      	adds	r0, r0, r3
 8008242:	4e87      	ldr	r6, [pc, #540]	; (8008460 <SendMessageFromPort+0x3a4>)
 8008244:	8831      	ldrh	r1, [r6, #0]
 8008246:	4b87      	ldr	r3, [pc, #540]	; (8008464 <SendMessageFromPort+0x3a8>)
 8008248:	18c9      	adds	r1, r1, r3
 800824a:	4652      	mov	r2, sl
 800824c:	f00c fc97 	bl	8014b7e <memcpy>
					ptrShift =0;
 8008250:	2300      	movs	r3, #0
 8008252:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8008254:	8073      	strh	r3, [r6, #2]
					length =numberOfParams + shift + 4;
 8008256:	465e      	mov	r6, fp
 8008258:	4456      	add	r6, sl
 800825a:	b2f6      	uxtb	r6, r6
 800825c:	3604      	adds	r6, #4
 800825e:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 8008260:	4657      	mov	r7, sl
			while(totalNumberOfParams != 0){
 8008262:	4b7f      	ldr	r3, [pc, #508]	; (8008460 <SendMessageFromPort+0x3a4>)
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	469a      	mov	sl, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0d6      	beq.n	800821a <SendMessageFromPort+0x15e>
				if((totalNumberOfParams / numberOfParams) >= 1){
 800826c:	45ba      	cmp	sl, r7
 800826e:	d3e0      	bcc.n	8008232 <SendMessageFromPort+0x176>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8008270:	9700      	str	r7, [sp, #0]
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	0022      	movs	r2, r4
 8008276:	4641      	mov	r1, r8
 8008278:	0028      	movs	r0, r5
 800827a:	f7ff ff1f 	bl	80080bc <SendMessageFromPort>
					osDelay(10);
 800827e:	200a      	movs	r0, #10
 8008280:	f005 ffb8 	bl	800e1f4 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8008284:	4b76      	ldr	r3, [pc, #472]	; (8008460 <SendMessageFromPort+0x3a4>)
 8008286:	885a      	ldrh	r2, [r3, #2]
 8008288:	1bd2      	subs	r2, r2, r7
 800828a:	805a      	strh	r2, [r3, #2]
					ptrShift +=numberOfParams;
 800828c:	881a      	ldrh	r2, [r3, #0]
 800828e:	18ba      	adds	r2, r7, r2
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e7e6      	b.n	8008262 <SendMessageFromPort+0x1a6>
			uint8_t groupMembers =0;
 8008294:	2000      	movs	r0, #0
 8008296:	e021      	b.n	80082dc <SendMessageFromPort+0x220>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008298:	3301      	adds	r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	4a74      	ldr	r2, [pc, #464]	; (8008470 <SendMessageFromPort+0x3b4>)
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d315      	bcc.n	80082d0 <SendMessageFromPort+0x214>
					if(InGroup(i,dstGroupID)){
 80082a4:	1e5a      	subs	r2, r3, #1
 80082a6:	4973      	ldr	r1, [pc, #460]	; (8008474 <SendMessageFromPort+0x3b8>)
 80082a8:	0052      	lsls	r2, r2, #1
 80082aa:	5a52      	ldrh	r2, [r2, r1]
 80082ac:	4661      	mov	r1, ip
 80082ae:	410a      	asrs	r2, r1
 80082b0:	07d2      	lsls	r2, r2, #31
 80082b2:	d5f1      	bpl.n	8008298 <SendMessageFromPort+0x1dc>
						++groupMembers;							// Add this member
 80082b4:	3001      	adds	r0, #1
 80082b6:	b2c0      	uxtb	r0, r0
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80082b8:	183a      	adds	r2, r7, r0
 80082ba:	2a2c      	cmp	r2, #44	; 0x2c
 80082bc:	dd00      	ble.n	80082c0 <SendMessageFromPort+0x204>
 80082be:	e0be      	b.n	800843e <SendMessageFromPort+0x382>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80082c0:	465a      	mov	r2, fp
 80082c2:	3207      	adds	r2, #7
 80082c4:	18ba      	adds	r2, r7, r2
 80082c6:	1882      	adds	r2, r0, r2
 80082c8:	3a01      	subs	r2, #1
 80082ca:	495e      	ldr	r1, [pc, #376]	; (8008444 <SendMessageFromPort+0x388>)
 80082cc:	548b      	strb	r3, [r1, r2]
 80082ce:	e7e3      	b.n	8008298 <SendMessageFromPort+0x1dc>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80082d0:	465b      	mov	r3, fp
 80082d2:	3307      	adds	r3, #7
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	18c3      	adds	r3, r0, r3
 80082d8:	4a5a      	ldr	r2, [pc, #360]	; (8008444 <SendMessageFromPort+0x388>)
 80082da:	54d0      	strb	r0, [r2, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80082dc:	4663      	mov	r3, ip
 80082de:	2bff      	cmp	r3, #255	; 0xff
 80082e0:	d01b      	beq.n	800831a <SendMessageFromPort+0x25e>
			else if(dstGroupID == BOS_BROADCAST)
 80082e2:	4663      	mov	r3, ip
 80082e4:	2bff      	cmp	r3, #255	; 0xff
 80082e6:	d100      	bne.n	80082ea <SendMessageFromPort+0x22e>
 80082e8:	e0d0      	b.n	800848c <SendMessageFromPort+0x3d0>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80082ea:	183b      	adds	r3, r7, r0
 80082ec:	2b2b      	cmp	r3, #43	; 0x2b
 80082ee:	dd00      	ble.n	80082f2 <SendMessageFromPort+0x236>
 80082f0:	e0ce      	b.n	8008490 <SendMessageFromPort+0x3d4>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80082f2:	4b61      	ldr	r3, [pc, #388]	; (8008478 <SendMessageFromPort+0x3bc>)
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	3201      	adds	r2, #1
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	465b      	mov	r3, fp
 80082fe:	3307      	adds	r3, #7
 8008300:	18fb      	adds	r3, r7, r3
 8008302:	18c3      	adds	r3, r0, r3
 8008304:	3301      	adds	r3, #1
 8008306:	494f      	ldr	r1, [pc, #316]	; (8008444 <SendMessageFromPort+0x388>)
 8008308:	54ca      	strb	r2, [r1, r3]
			if(dstGroupID == BOS_BROADCAST)
 800830a:	4663      	mov	r3, ip
 800830c:	2bff      	cmp	r3, #255	; 0xff
 800830e:	d011      	beq.n	8008334 <SendMessageFromPort+0x278>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008310:	1830      	adds	r0, r6, r0
 8008312:	b2c0      	uxtb	r0, r0
 8008314:	3002      	adds	r0, #2
 8008316:	b2c6      	uxtb	r6, r0
 8008318:	e711      	b.n	800813e <SendMessageFromPort+0x82>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800831a:	2f2c      	cmp	r7, #44	; 0x2c
 800831c:	d8e1      	bhi.n	80082e2 <SendMessageFromPort+0x226>
				message[7 + shift + numberOfParams] =++bcastID;
 800831e:	4a56      	ldr	r2, [pc, #344]	; (8008478 <SendMessageFromPort+0x3bc>)
 8008320:	7813      	ldrb	r3, [r2, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	b2db      	uxtb	r3, r3
 8008326:	7013      	strb	r3, [r2, #0]
 8008328:	465a      	mov	r2, fp
 800832a:	3207      	adds	r2, #7
 800832c:	18ba      	adds	r2, r7, r2
 800832e:	4945      	ldr	r1, [pc, #276]	; (8008444 <SendMessageFromPort+0x388>)
 8008330:	548b      	strb	r3, [r1, r2]
 8008332:	e7ea      	b.n	800830a <SendMessageFromPort+0x24e>
				length +=1;		// + bcastID
 8008334:	3601      	adds	r6, #1
 8008336:	b2f6      	uxtb	r6, r6
 8008338:	e701      	b.n	800813e <SendMessageFromPort+0x82>
			Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 800833a:	4652      	mov	r2, sl
 800833c:	3204      	adds	r2, #4
 800833e:	b292      	uxth	r2, r2
 8008340:	4940      	ldr	r1, [pc, #256]	; (8008444 <SendMessageFromPort+0x388>)
 8008342:	9400      	str	r4, [sp, #0]
 8008344:	2332      	movs	r3, #50	; 0x32
 8008346:	0028      	movs	r0, r5
 8008348:	f7fa fdf8 	bl	8002f3c <Send_BOS_Message>
					break;
				if(rejected_FLAG == true)
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
			}
		}
		ACK_FLAG =false; rejected_FLAG=false;
 800834c:	4b4b      	ldr	r3, [pc, #300]	; (800847c <SendMessageFromPort+0x3c0>)
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	4b4b      	ldr	r3, [pc, #300]	; (8008480 <SendMessageFromPort+0x3c4>)
 8008354:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8008356:	9903      	ldr	r1, [sp, #12]
 8008358:	2000      	movs	r0, #0
 800835a:	f006 fdd5 	bl	800ef08 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 800835e:	4b49      	ldr	r3, [pc, #292]	; (8008484 <SendMessageFromPort+0x3c8>)
 8008360:	2202      	movs	r2, #2
 8008362:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008364:	2000      	movs	r0, #0
}
 8008366:	b005      	add	sp, #20
 8008368:	bcf0      	pop	{r4, r5, r6, r7}
 800836a:	46bb      	mov	fp, r7
 800836c:	46b2      	mov	sl, r6
 800836e:	46a9      	mov	r9, r5
 8008370:	46a0      	mov	r8, r4
 8008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8008374:	3601      	adds	r6, #1
 8008376:	b2f6      	uxtb	r6, r6
 8008378:	4b38      	ldr	r3, [pc, #224]	; (800845c <SendMessageFromPort+0x3a0>)
 800837a:	88db      	ldrh	r3, [r3, #6]
 800837c:	b2b2      	uxth	r2, r6
 800837e:	429a      	cmp	r2, r3
 8008380:	d2e4      	bcs.n	800834c <SendMessageFromPort+0x290>
				Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8008382:	4653      	mov	r3, sl
 8008384:	1d1f      	adds	r7, r3, #4
 8008386:	b2bf      	uxth	r7, r7
 8008388:	492e      	ldr	r1, [pc, #184]	; (8008444 <SendMessageFromPort+0x388>)
 800838a:	9400      	str	r4, [sp, #0]
 800838c:	2332      	movs	r3, #50	; 0x32
 800838e:	003a      	movs	r2, r7
 8008390:	0028      	movs	r0, r5
 8008392:	f7fa fdd3 	bl	8002f3c <Send_BOS_Message>
				osDelay(200);
 8008396:	20c8      	movs	r0, #200	; 0xc8
 8008398:	f005 ff2c 	bl	800e1f4 <osDelay>
				if(ACK_FLAG == true)
 800839c:	4b37      	ldr	r3, [pc, #220]	; (800847c <SendMessageFromPort+0x3c0>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1d3      	bne.n	800834c <SendMessageFromPort+0x290>
				if(rejected_FLAG == true)
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <SendMessageFromPort+0x3c4>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0e3      	beq.n	8008374 <SendMessageFromPort+0x2b8>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 80083ac:	4925      	ldr	r1, [pc, #148]	; (8008444 <SendMessageFromPort+0x388>)
 80083ae:	9400      	str	r4, [sp, #0]
 80083b0:	2332      	movs	r3, #50	; 0x32
 80083b2:	003a      	movs	r2, r7
 80083b4:	0028      	movs	r0, r5
 80083b6:	f7fa fdc1 	bl	8002f3c <Send_BOS_Message>
 80083ba:	e7db      	b.n	8008374 <SendMessageFromPort+0x2b8>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80083bc:	9b02      	ldr	r3, [sp, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <SendMessageFromPort+0x312>
 80083c2:	4643      	mov	r3, r8
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <SendMessageFromPort+0x312>
			src =message[4];
 80083c8:	4b1e      	ldr	r3, [pc, #120]	; (8008444 <SendMessageFromPort+0x388>)
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	4698      	mov	r8, r3
		FindBroadcastRoutes(src);
 80083ce:	4640      	mov	r0, r8
 80083d0:	f7fb fbf2 	bl	8003bb8 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80083d4:	2601      	movs	r6, #1
 80083d6:	e007      	b.n	80083e8 <SendMessageFromPort+0x32c>
			rejected_FLAG=false;
 80083d8:	4b29      	ldr	r3, [pc, #164]	; (8008480 <SendMessageFromPort+0x3c4>)
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 80083de:	200a      	movs	r0, #10
 80083e0:	f005 fb7e 	bl	800dae0 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80083e4:	3601      	adds	r6, #1
 80083e6:	b2f6      	uxtb	r6, r6
 80083e8:	2e05      	cmp	r6, #5
 80083ea:	d8b4      	bhi.n	8008356 <SendMessageFromPort+0x29a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80083ec:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <SendMessageFromPort+0x39c>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	4a25      	ldr	r2, [pc, #148]	; (8008488 <SendMessageFromPort+0x3cc>)
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	5a9b      	ldrh	r3, [r3, r2]
 80083f8:	1e72      	subs	r2, r6, #1
 80083fa:	4113      	asrs	r3, r2
 80083fc:	07db      	lsls	r3, r3, #31
 80083fe:	d5eb      	bpl.n	80083d8 <SendMessageFromPort+0x31c>
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008400:	4653      	mov	r3, sl
 8008402:	1d1f      	adds	r7, r3, #4
 8008404:	b2bf      	uxth	r7, r7
 8008406:	490f      	ldr	r1, [pc, #60]	; (8008444 <SendMessageFromPort+0x388>)
 8008408:	9400      	str	r4, [sp, #0]
 800840a:	2332      	movs	r3, #50	; 0x32
 800840c:	003a      	movs	r2, r7
 800840e:	0030      	movs	r0, r6
 8008410:	f7fa fd94 	bl	8002f3c <Send_BOS_Message>
				osDelay(200);
 8008414:	20c8      	movs	r0, #200	; 0xc8
 8008416:	f005 feed 	bl	800e1f4 <osDelay>
				if(rejected_FLAG == true)
 800841a:	4b19      	ldr	r3, [pc, #100]	; (8008480 <SendMessageFromPort+0x3c4>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0da      	beq.n	80083d8 <SendMessageFromPort+0x31c>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8008422:	4908      	ldr	r1, [pc, #32]	; (8008444 <SendMessageFromPort+0x388>)
 8008424:	9400      	str	r4, [sp, #0]
 8008426:	2332      	movs	r3, #50	; 0x32
 8008428:	003a      	movs	r2, r7
 800842a:	0028      	movs	r0, r5
 800842c:	f7fa fd86 	bl	8002f3c <Send_BOS_Message>
 8008430:	e7d2      	b.n	80083d8 <SendMessageFromPort+0x31c>
		return BOS_ERR_WrongParam;
 8008432:	2067      	movs	r0, #103	; 0x67
 8008434:	e797      	b.n	8008366 <SendMessageFromPort+0x2aa>
 8008436:	2067      	movs	r0, #103	; 0x67
 8008438:	e795      	b.n	8008366 <SendMessageFromPort+0x2aa>
 800843a:	2067      	movs	r0, #103	; 0x67
 800843c:	e793      	b.n	8008366 <SendMessageFromPort+0x2aa>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800843e:	2069      	movs	r0, #105	; 0x69
 8008440:	e791      	b.n	8008366 <SendMessageFromPort+0x2aa>
 8008442:	46c0      	nop			; (mov r8, r8)
 8008444:	20000a00 	.word	0x20000a00
 8008448:	200009f8 	.word	0x200009f8
 800844c:	20000a38 	.word	0x20000a38
 8008450:	20000a03 	.word	0x20000a03
 8008454:	20001708 	.word	0x20001708
 8008458:	200007a0 	.word	0x200007a0
 800845c:	20000844 	.word	0x20000844
 8008460:	20001c5c 	.word	0x20001c5c
 8008464:	2000086c 	.word	0x2000086c
 8008468:	20000eb8 	.word	0x20000eb8
 800846c:	20000050 	.word	0x20000050
 8008470:	20000008 	.word	0x20000008
 8008474:	200007a4 	.word	0x200007a4
 8008478:	200009f0 	.word	0x200009f0
 800847c:	20000ee6 	.word	0x20000ee6
 8008480:	20000ee5 	.word	0x20000ee5
 8008484:	2000096c 	.word	0x2000096c
 8008488:	2000089c 	.word	0x2000089c
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800848c:	2069      	movs	r0, #105	; 0x69
 800848e:	e76a      	b.n	8008366 <SendMessageFromPort+0x2aa>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008490:	2069      	movs	r0, #105	; 0x69
 8008492:	e768      	b.n	8008366 <SendMessageFromPort+0x2aa>

08008494 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008494:	b530      	push	{r4, r5, lr}
 8008496:	b083      	sub	sp, #12
 8008498:	0004      	movs	r4, r0
	AddBcastPayload = false;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <ForwardReceivedMessage+0x34>)
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80084a0:	1e41      	subs	r1, r0, #1
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <ForwardReceivedMessage+0x38>)
 80084a4:	00cb      	lsls	r3, r1, #3
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	5c9d      	ldrb	r5, [r3, r2]
		port =FindRoute(myID,dst);
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <ForwardReceivedMessage+0x3c>)
 80084ae:	7818      	ldrb	r0, [r3, #0]
 80084b0:	0029      	movs	r1, r5
 80084b2:	f7fb fc45 	bl	8003d40 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80084b6:	9400      	str	r4, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	002a      	movs	r2, r5
 80084bc:	2100      	movs	r1, #0
 80084be:	f7ff fdfd 	bl	80080bc <SendMessageFromPort>
}
 80084c2:	2000      	movs	r0, #0
 80084c4:	b003      	add	sp, #12
 80084c6:	bd30      	pop	{r4, r5, pc}
 80084c8:	20000eb8 	.word	0x20000eb8
 80084cc:	20000a38 	.word	0x20000a38
 80084d0:	200007a0 	.word	0x200007a0

080084d4 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80084d4:	b500      	push	{lr}
 80084d6:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80084d8:	4b0c      	ldr	r3, [pc, #48]	; (800850c <BroadcastReceivedMessage+0x38>)
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <BroadcastReceivedMessage+0x3c>)
 80084e0:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80084e2:	28ff      	cmp	r0, #255	; 0xff
 80084e4:	d009      	beq.n	80084fa <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 80084e6:	9100      	str	r1, [sp, #0]
 80084e8:	2300      	movs	r3, #0
 80084ea:	22fe      	movs	r2, #254	; 0xfe
 80084ec:	2100      	movs	r1, #0
 80084ee:	2000      	movs	r0, #0
 80084f0:	f7ff fde4 	bl	80080bc <SendMessageFromPort>
}
 80084f4:	2000      	movs	r0, #0
 80084f6:	b003      	add	sp, #12
 80084f8:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 80084fa:	9100      	str	r1, [sp, #0]
 80084fc:	2300      	movs	r3, #0
 80084fe:	32ff      	adds	r2, #255	; 0xff
 8008500:	2100      	movs	r1, #0
 8008502:	2000      	movs	r0, #0
 8008504:	f7ff fdda 	bl	80080bc <SendMessageFromPort>
 8008508:	e7f4      	b.n	80084f4 <BroadcastReceivedMessage+0x20>
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	20000eb8 	.word	0x20000eb8
 8008510:	20000050 	.word	0x20000050

08008514 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008514:	b530      	push	{r4, r5, lr}
 8008516:	b083      	sub	sp, #12
 8008518:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800851a:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <BroadcastMessage+0x44>)
 800851c:	2501      	movs	r5, #1
 800851e:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8008520:	4b0e      	ldr	r3, [pc, #56]	; (800855c <BroadcastMessage+0x48>)
 8008522:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008524:	29ff      	cmp	r1, #255	; 0xff
 8008526:	d00e      	beq.n	8008546 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8008528:	9400      	str	r4, [sp, #0]
 800852a:	0013      	movs	r3, r2
 800852c:	22fe      	movs	r2, #254	; 0xfe
 800852e:	0001      	movs	r1, r0
 8008530:	2000      	movs	r0, #0
 8008532:	f7ff fdc3 	bl	80080bc <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8008536:	480a      	ldr	r0, [pc, #40]	; (8008560 <BroadcastMessage+0x4c>)
 8008538:	0022      	movs	r2, r4
 800853a:	2100      	movs	r1, #0
 800853c:	f00c f9f3 	bl	8014926 <memset>
}
 8008540:	2000      	movs	r0, #0
 8008542:	b003      	add	sp, #12
 8008544:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8008546:	9400      	str	r4, [sp, #0]
 8008548:	0013      	movs	r3, r2
 800854a:	22ff      	movs	r2, #255	; 0xff
 800854c:	0001      	movs	r1, r0
 800854e:	2000      	movs	r0, #0
 8008550:	f7ff fdb4 	bl	80080bc <SendMessageFromPort>
 8008554:	e7ef      	b.n	8008536 <BroadcastMessage+0x22>
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	20000eb8 	.word	0x20000eb8
 800855c:	20000050 	.word	0x20000050
 8008560:	2000086c 	.word	0x2000086c

08008564 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008566:	b083      	sub	sp, #12
 8008568:	0004      	movs	r4, r0
 800856a:	000e      	movs	r6, r1
 800856c:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 800856e:	28ff      	cmp	r0, #255	; 0xff
 8008570:	d012      	beq.n	8008598 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 8008572:	4f0d      	ldr	r7, [pc, #52]	; (80085a8 <SendMessageToModule+0x44>)
 8008574:	7838      	ldrb	r0, [r7, #0]
 8008576:	0021      	movs	r1, r4
 8008578:	f7fb fbe2 	bl	8003d40 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 800857c:	7839      	ldrb	r1, [r7, #0]
 800857e:	9500      	str	r5, [sp, #0]
 8008580:	0033      	movs	r3, r6
 8008582:	0022      	movs	r2, r4
 8008584:	f7ff fd9a 	bl	80080bc <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <SendMessageToModule+0x48>)
 800858a:	002a      	movs	r2, r5
 800858c:	2100      	movs	r1, #0
 800858e:	f00c f9ca 	bl	8014926 <memset>
}
 8008592:	2000      	movs	r0, #0
 8008594:	b003      	add	sp, #12
 8008596:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008598:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <SendMessageToModule+0x44>)
 800859a:	7818      	ldrb	r0, [r3, #0]
 800859c:	0013      	movs	r3, r2
 800859e:	000a      	movs	r2, r1
 80085a0:	21ff      	movs	r1, #255	; 0xff
 80085a2:	f7ff ffb7 	bl	8008514 <BroadcastMessage>
 80085a6:	e7f4      	b.n	8008592 <SendMessageToModule+0x2e>
 80085a8:	200007a0 	.word	0x200007a0
 80085ac:	2000086c 	.word	0x2000086c

080085b0 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b2:	46de      	mov	lr, fp
 80085b4:	4657      	mov	r7, sl
 80085b6:	464e      	mov	r6, r9
 80085b8:	4645      	mov	r5, r8
 80085ba:	b5e0      	push	{r5, r6, r7, lr}
 80085bc:	b08b      	sub	sp, #44	; 0x2c
 80085be:	9009      	str	r0, [sp, #36]	; 0x24
 80085c0:	000e      	movs	r6, r1
 80085c2:	9208      	str	r2, [sp, #32]
 80085c4:	001d      	movs	r5, r3
 80085c6:	ab14      	add	r3, sp, #80	; 0x50
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	469b      	mov	fp, r3
 80085cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ce:	4698      	mov	r8, r3
 80085d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085d2:	4699      	mov	r9, r3
 80085d4:	ab17      	add	r3, sp, #92	; 0x5c
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80085da:	4b56      	ldr	r3, [pc, #344]	; (8008734 <StartScastDMAStream+0x184>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	428b      	cmp	r3, r1
 80085e0:	d101      	bne.n	80085e6 <StartScastDMAStream+0x36>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 80085e2:	2400      	movs	r4, #0
 80085e4:	e060      	b.n	80086a8 <StartScastDMAStream+0xf8>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80085e6:	4643      	mov	r3, r8
 80085e8:	0e1a      	lsrs	r2, r3, #24
 80085ea:	4b53      	ldr	r3, [pc, #332]	; (8008738 <StartScastDMAStream+0x188>)
 80085ec:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 80085ee:	4642      	mov	r2, r8
 80085f0:	0c12      	lsrs	r2, r2, #16
 80085f2:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 80085f4:	4642      	mov	r2, r8
 80085f6:	0a12      	lsrs	r2, r2, #8
 80085f8:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80085fa:	4642      	mov	r2, r8
 80085fc:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80085fe:	464a      	mov	r2, r9
 8008600:	0e12      	lsrs	r2, r2, #24
 8008602:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8008604:	464a      	mov	r2, r9
 8008606:	0c12      	lsrs	r2, r2, #16
 8008608:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800860a:	464a      	mov	r2, r9
 800860c:	0a12      	lsrs	r2, r2, #8
 800860e:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008610:	464a      	mov	r2, r9
 8008612:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8008614:	465a      	mov	r2, fp
 8008616:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8008618:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 800861a:	729d      	strb	r5, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 800861c:	9a08      	ldr	r2, [sp, #32]
 800861e:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8008620:	4652      	mov	r2, sl
 8008622:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008624:	220d      	movs	r2, #13
 8008626:	211c      	movs	r1, #28
 8008628:	0030      	movs	r0, r6
 800862a:	f7ff ff9b 	bl	8008564 <SendMessageToModule>
		return result;
 800862e:	e065      	b.n	80086fc <StartScastDMAStream+0x14c>
			/* Find out the inport and outport to this module from previous one */
			if(route[i + 1]){
				temp1 =FindRoute(route[i],route[i + 1]);
			}
			else{
				temp1 =FindRoute(route[i],srcM);
 8008630:	0031      	movs	r1, r6
 8008632:	f7fb fb85 	bl	8003d40 <FindRoute>
 8008636:	9007      	str	r0, [sp, #28]
			}
			FindRoute(srcM,dstM);
 8008638:	0029      	movs	r1, r5
 800863a:	0030      	movs	r0, r6
 800863c:	f7fb fb80 	bl	8003d40 <FindRoute>
			if(route[i] == dstM){
 8008640:	4b3e      	ldr	r3, [pc, #248]	; (800873c <StartScastDMAStream+0x18c>)
 8008642:	19db      	adds	r3, r3, r7
 8008644:	7918      	ldrb	r0, [r3, #4]
 8008646:	42a8      	cmp	r0, r5
 8008648:	d144      	bne.n	80086d4 <StartScastDMAStream+0x124>
				temp2 =dstP;
 800864a:	9808      	ldr	r0, [sp, #32]
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800864c:	4643      	mov	r3, r8
 800864e:	0e1a      	lsrs	r2, r3, #24
 8008650:	4b39      	ldr	r3, [pc, #228]	; (8008738 <StartScastDMAStream+0x188>)
 8008652:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008654:	4642      	mov	r2, r8
 8008656:	0c12      	lsrs	r2, r2, #16
 8008658:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 800865a:	4642      	mov	r2, r8
 800865c:	0a12      	lsrs	r2, r2, #8
 800865e:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8008660:	4642      	mov	r2, r8
 8008662:	70da      	strb	r2, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008664:	464a      	mov	r2, r9
 8008666:	0e12      	lsrs	r2, r2, #24
 8008668:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 800866a:	464a      	mov	r2, r9
 800866c:	0c12      	lsrs	r2, r2, #16
 800866e:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008670:	464a      	mov	r2, r9
 8008672:	0a12      	lsrs	r2, r2, #8
 8008674:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 8008676:	464a      	mov	r2, r9
 8008678:	71da      	strb	r2, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 800867a:	465a      	mov	r2, fp
 800867c:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 800867e:	9a07      	ldr	r2, [sp, #28]
 8008680:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 8008682:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8008684:	4652      	mov	r2, sl
 8008686:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 8008688:	0029      	movs	r1, r5
 800868a:	0030      	movs	r0, r6
 800868c:	f7fb fb58 	bl	8003d40 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008690:	4b2a      	ldr	r3, [pc, #168]	; (800873c <StartScastDMAStream+0x18c>)
 8008692:	19db      	adds	r3, r3, r7
 8008694:	7918      	ldrb	r0, [r3, #4]
 8008696:	220c      	movs	r2, #12
 8008698:	211b      	movs	r1, #27
 800869a:	f7ff ff63 	bl	8008564 <SendMessageToModule>
			osDelay(10);
 800869e:	200a      	movs	r0, #10
 80086a0:	f005 fda8 	bl	800e1f4 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 80086a4:	3401      	adds	r4, #1
 80086a6:	b2e4      	uxtb	r4, r4
 80086a8:	2c19      	cmp	r4, #25
 80086aa:	d81a      	bhi.n	80086e2 <StartScastDMAStream+0x132>
		FindRoute(srcM,dstM);
 80086ac:	0029      	movs	r1, r5
 80086ae:	0030      	movs	r0, r6
 80086b0:	f7fb fb46 	bl	8003d40 <FindRoute>
		if(route[i]){
 80086b4:	0027      	movs	r7, r4
 80086b6:	4b21      	ldr	r3, [pc, #132]	; (800873c <StartScastDMAStream+0x18c>)
 80086b8:	191b      	adds	r3, r3, r4
 80086ba:	7918      	ldrb	r0, [r3, #4]
 80086bc:	2800      	cmp	r0, #0
 80086be:	d0f1      	beq.n	80086a4 <StartScastDMAStream+0xf4>
			if(route[i + 1]){
 80086c0:	1c62      	adds	r2, r4, #1
 80086c2:	4b1e      	ldr	r3, [pc, #120]	; (800873c <StartScastDMAStream+0x18c>)
 80086c4:	189b      	adds	r3, r3, r2
 80086c6:	7919      	ldrb	r1, [r3, #4]
 80086c8:	2900      	cmp	r1, #0
 80086ca:	d0b1      	beq.n	8008630 <StartScastDMAStream+0x80>
				temp1 =FindRoute(route[i],route[i + 1]);
 80086cc:	f7fb fb38 	bl	8003d40 <FindRoute>
 80086d0:	9007      	str	r0, [sp, #28]
 80086d2:	e7b1      	b.n	8008638 <StartScastDMAStream+0x88>
				temp2 =FindRoute(route[i],route[i - 1]);
 80086d4:	1e7a      	subs	r2, r7, #1
 80086d6:	4b19      	ldr	r3, [pc, #100]	; (800873c <StartScastDMAStream+0x18c>)
 80086d8:	189b      	adds	r3, r3, r2
 80086da:	7919      	ldrb	r1, [r3, #4]
 80086dc:	f7fb fb30 	bl	8003d40 <FindRoute>
 80086e0:	e7b4      	b.n	800864c <StartScastDMAStream+0x9c>
		}
	}
	
	if(srcM == dstM)
 80086e2:	42ae      	cmp	r6, r5
 80086e4:	d112      	bne.n	800870c <StartScastDMAStream+0x15c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ec:	464a      	mov	r2, r9
 80086ee:	4641      	mov	r1, r8
 80086f0:	4658      	mov	r0, fp
 80086f2:	f7ff fbcd 	bl	8007e90 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 80086f6:	4653      	mov	r3, sl
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10d      	bne.n	8008718 <StartScastDMAStream+0x168>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80086fc:	2000      	movs	r0, #0
 80086fe:	b00b      	add	sp, #44	; 0x2c
 8008700:	bcf0      	pop	{r4, r5, r6, r7}
 8008702:	46bb      	mov	fp, r7
 8008704:	46b2      	mov	sl, r6
 8008706:	46a9      	mov	r9, r5
 8008708:	46a0      	mov	r8, r4
 800870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 800870c:	0029      	movs	r1, r5
 800870e:	0030      	movs	r0, r6
 8008710:	f7fb fb16 	bl	8003d40 <FindRoute>
 8008714:	9008      	str	r0, [sp, #32]
 8008716:	e7e6      	b.n	80086e6 <StartScastDMAStream+0x136>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8008718:	2300      	movs	r3, #0
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	9303      	str	r3, [sp, #12]
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	9b08      	ldr	r3, [sp, #32]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008728:	464a      	mov	r2, r9
 800872a:	4641      	mov	r1, r8
 800872c:	4658      	mov	r0, fp
 800872e:	f7fb f80f 	bl	8003750 <SaveEEstreams>
 8008732:	e7e3      	b.n	80086fc <StartScastDMAStream+0x14c>
 8008734:	200007a0 	.word	0x200007a0
 8008738:	2000086c 	.word	0x2000086c
 800873c:	20001c5c 	.word	0x20001c5c

08008740 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	4b03      	ldr	r3, [pc, #12]	; (8008754 <NVIC_SystemReset+0x14>)
 8008746:	4a04      	ldr	r2, [pc, #16]	; (8008758 <NVIC_SystemReset+0x18>)
 8008748:	60da      	str	r2, [r3, #12]
 800874a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	e7fd      	b.n	800874e <NVIC_SystemReset+0xe>
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	e000ed00 	.word	0xe000ed00
 8008758:	05fa0004 	.word	0x05fa0004

0800875c <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 800875c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875e:	46de      	mov	lr, fp
 8008760:	4657      	mov	r7, sl
 8008762:	464e      	mov	r6, r9
 8008764:	4645      	mov	r5, r8
 8008766:	b5e0      	push	{r5, r6, r7, lr}
 8008768:	b087      	sub	sp, #28

	uint8_t calculated_crc,port_number,length,port_index;

			uint8_t temp_length[NumOfPorts] = {0};
 800876a:	2300      	movs	r3, #0
 800876c:	9304      	str	r3, [sp, #16]
 800876e:	aa04      	add	r2, sp, #16
 8008770:	7113      	strb	r3, [r2, #4]
			uint8_t temp_index[NumOfPorts] = {0};
 8008772:	9302      	str	r3, [sp, #8]
 8008774:	aa02      	add	r2, sp, #8
 8008776:	7113      	strb	r3, [r2, #4]
 8008778:	e08b      	b.n	8008892 <BackEndTask+0x136>

	for(;;)
	{
       for(port_DMA=0;port_DMA<NumOfPorts;)
       {port_index=port_DMA;
		index_input[port_DMA]=MSG_RX_BUF_SIZE-(*index_dma[port_DMA]);
 800877a:	4ac8      	ldr	r2, [pc, #800]	; (8008a9c <BackEndTask+0x340>)
 800877c:	0099      	lsls	r1, r3, #2
 800877e:	588a      	ldr	r2, [r1, r2]
 8008780:	6811      	ldr	r1, [r2, #0]
 8008782:	2240      	movs	r2, #64	; 0x40
 8008784:	4252      	negs	r2, r2
 8008786:	1a52      	subs	r2, r2, r1
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	49c5      	ldr	r1, [pc, #788]	; (8008aa0 <BackEndTask+0x344>)
 800878c:	54ca      	strb	r2, [r1, r3]

		if(index_input[port_DMA] !=index_process[port_DMA])
 800878e:	49c5      	ldr	r1, [pc, #788]	; (8008aa4 <BackEndTask+0x348>)
 8008790:	5ccc      	ldrb	r4, [r1, r3]
 8008792:	42a2      	cmp	r2, r4
 8008794:	d100      	bne.n	8008798 <BackEndTask+0x3c>
 8008796:	e0e6      	b.n	8008966 <BackEndTask+0x20a>
		{ port_number =port_DMA+1;
 8008798:	1c58      	adds	r0, r3, #1
 800879a:	b2c0      	uxtb	r0, r0
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 800879c:	1e45      	subs	r5, r0, #1
 800879e:	4ac2      	ldr	r2, [pc, #776]	; (8008aa8 <BackEndTask+0x34c>)
 80087a0:	0069      	lsls	r1, r5, #1
 80087a2:	1949      	adds	r1, r1, r5
 80087a4:	0189      	lsls	r1, r1, #6
 80087a6:	1852      	adds	r2, r2, r1
 80087a8:	5d12      	ldrb	r2, [r2, r4]
 80087aa:	2a0d      	cmp	r2, #13
 80087ac:	d02b      	beq.n	8008806 <BackEndTask+0xaa>

				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
				Activate_CLI_For_First_Time_Flag = 1;

			}
			else if(portStatus[port_number] == CLI)
 80087ae:	49bf      	ldr	r1, [pc, #764]	; (8008aac <BackEndTask+0x350>)
 80087b0:	5c09      	ldrb	r1, [r1, r0]
 80087b2:	2903      	cmp	r1, #3
 80087b4:	d052      	beq.n	800885c <BackEndTask+0x100>
			{
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
				Read_In_CLI_Task_Flag = 1;
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 80087b6:	2a48      	cmp	r2, #72	; 0x48
 80087b8:	d06f      	beq.n	800889a <BackEndTask+0x13e>
			{
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'Z' && portStatus[port_number] == H_Status)
 80087ba:	2a5a      	cmp	r2, #90	; 0x5a
 80087bc:	d073      	beq.n	80088a6 <BackEndTask+0x14a>
			{
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  != 'Z' && portStatus[port_number] == H_Status)
 80087be:	2a5a      	cmp	r2, #90	; 0x5a
 80087c0:	d001      	beq.n	80087c6 <BackEndTask+0x6a>
 80087c2:	2907      	cmp	r1, #7
 80087c4:	d075      	beq.n	80088b2 <BackEndTask+0x156>
			{
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
			}

			else if(portStatus[port_number] == Z_Status)
 80087c6:	2908      	cmp	r1, #8
 80087c8:	d077      	beq.n	80088ba <BackEndTask+0x15e>
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
				temp_index[port_index] = 3;
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
			}

			else if(portStatus[port_number] == MSG)
 80087ca:	2901      	cmp	r1, #1
 80087cc:	d14b      	bne.n	8008866 <BackEndTask+0x10a>
			{
				if(temp_length[port_index] > 1)
 80087ce:	a904      	add	r1, sp, #16
 80087d0:	5cc9      	ldrb	r1, [r1, r3]
 80087d2:	2901      	cmp	r1, #1
 80087d4:	d800      	bhi.n	80087d8 <BackEndTask+0x7c>
 80087d6:	e088      	b.n	80088ea <BackEndTask+0x18e>
				{
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80087d8:	48b5      	ldr	r0, [pc, #724]	; (8008ab0 <BackEndTask+0x354>)
 80087da:	5cc5      	ldrb	r5, [r0, r3]
 80087dc:	a802      	add	r0, sp, #8
 80087de:	5cc6      	ldrb	r6, [r0, r3]
 80087e0:	4cb4      	ldr	r4, [pc, #720]	; (8008ab4 <BackEndTask+0x358>)
 80087e2:	00e8      	lsls	r0, r5, #3
 80087e4:	1b40      	subs	r0, r0, r5
 80087e6:	00c0      	lsls	r0, r0, #3
 80087e8:	009f      	lsls	r7, r3, #2
 80087ea:	18ff      	adds	r7, r7, r3
 80087ec:	00fd      	lsls	r5, r7, #3
 80087ee:	1bed      	subs	r5, r5, r7
 80087f0:	00ed      	lsls	r5, r5, #3
 80087f2:	1940      	adds	r0, r0, r5
 80087f4:	1824      	adds	r4, r4, r0
 80087f6:	55a2      	strb	r2, [r4, r6]
					temp_index[port_index]++;
 80087f8:	3601      	adds	r6, #1
 80087fa:	aa02      	add	r2, sp, #8
 80087fc:	54d6      	strb	r6, [r2, r3]
					temp_length[port_index]--;
 80087fe:	3901      	subs	r1, #1
 8008800:	aa04      	add	r2, sp, #16
 8008802:	54d1      	strb	r1, [r2, r3]
 8008804:	e02f      	b.n	8008866 <BackEndTask+0x10a>
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 8008806:	49a9      	ldr	r1, [pc, #676]	; (8008aac <BackEndTask+0x350>)
 8008808:	5c09      	ldrb	r1, [r1, r0]
 800880a:	2900      	cmp	r1, #0
 800880c:	d1cf      	bne.n	80087ae <BackEndTask+0x52>
				for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800880e:	2300      	movs	r3, #0
 8008810:	e000      	b.n	8008814 <BackEndTask+0xb8>
 8008812:	3301      	adds	r3, #1
 8008814:	2b05      	cmp	r3, #5
 8008816:	dc07      	bgt.n	8008828 <BackEndTask+0xcc>
					if(portStatus[i] == CLI)
 8008818:	49a4      	ldr	r1, [pc, #656]	; (8008aac <BackEndTask+0x350>)
 800881a:	5cc9      	ldrb	r1, [r1, r3]
 800881c:	2903      	cmp	r1, #3
 800881e:	d1f8      	bne.n	8008812 <BackEndTask+0xb6>
						portStatus[i] = FREE;
 8008820:	49a2      	ldr	r1, [pc, #648]	; (8008aac <BackEndTask+0x350>)
 8008822:	2400      	movs	r4, #0
 8008824:	54cc      	strb	r4, [r1, r3]
 8008826:	e7f4      	b.n	8008812 <BackEndTask+0xb6>
				portStatus[port_number] =CLI; // Continue the CLI session on this port
 8008828:	4ba0      	ldr	r3, [pc, #640]	; (8008aac <BackEndTask+0x350>)
 800882a:	2103      	movs	r1, #3
 800882c:	5419      	strb	r1, [r3, r0]
				PcPort = port_number;
 800882e:	4ba2      	ldr	r3, [pc, #648]	; (8008ab8 <BackEndTask+0x35c>)
 8008830:	7018      	strb	r0, [r3, #0]
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 8008832:	4ba2      	ldr	r3, [pc, #648]	; (8008abc <BackEndTask+0x360>)
 8008834:	701a      	strb	r2, [r3, #0]
				xTaskNotifyGive(xCommandConsoleTaskHandle);
 8008836:	4ba2      	ldr	r3, [pc, #648]	; (8008ac0 <BackEndTask+0x364>)
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	2202      	movs	r2, #2
 800883e:	2100      	movs	r1, #0
 8008840:	f007 f802 	bl	800f848 <xTaskGenericNotify>
				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 8008844:	4b9f      	ldr	r3, [pc, #636]	; (8008ac4 <BackEndTask+0x368>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d003      	beq.n	8008854 <BackEndTask+0xf8>
				Activate_CLI_For_First_Time_Flag = 1;
 800884c:	4b9d      	ldr	r3, [pc, #628]	; (8008ac4 <BackEndTask+0x368>)
 800884e:	2201      	movs	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	e008      	b.n	8008866 <BackEndTask+0x10a>
				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 8008854:	4b9c      	ldr	r3, [pc, #624]	; (8008ac8 <BackEndTask+0x36c>)
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	e7f7      	b.n	800884c <BackEndTask+0xf0>
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 800885c:	4b97      	ldr	r3, [pc, #604]	; (8008abc <BackEndTask+0x360>)
 800885e:	701a      	strb	r2, [r3, #0]
				Read_In_CLI_Task_Flag = 1;
 8008860:	4b99      	ldr	r3, [pc, #612]	; (8008ac8 <BackEndTask+0x36c>)
 8008862:	2201      	movs	r2, #1
 8008864:	701a      	strb	r2, [r3, #0]
					Process_Message_Buffer_Index_End++;
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
					portStatus[port_number] =FREE; // End of receiving message.
				}
			}
			index_process[port_DMA]++;
 8008866:	4b99      	ldr	r3, [pc, #612]	; (8008acc <BackEndTask+0x370>)
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	498e      	ldr	r1, [pc, #568]	; (8008aa4 <BackEndTask+0x348>)
 800886c:	5c8b      	ldrb	r3, [r1, r2]
 800886e:	3301      	adds	r3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	548b      	strb	r3, [r1, r2]
			if(index_process[port_DMA]==MSG_RX_BUF_SIZE)
 8008874:	2bc0      	cmp	r3, #192	; 0xc0
 8008876:	d072      	beq.n	800895e <BackEndTask+0x202>
		else if(index_input[port_DMA] ==index_process[port_DMA])
		   {
			port_DMA++;
			}

		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008878:	4b95      	ldr	r3, [pc, #596]	; (8008ad0 <BackEndTask+0x374>)
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	4b95      	ldr	r3, [pc, #596]	; (8008ad4 <BackEndTask+0x378>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d174      	bne.n	800896e <BackEndTask+0x212>

			Process_Message_Buffer_Index_Start++;
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
		}

		taskYIELD();
 8008884:	f007 fa4e 	bl	800fd24 <vPortYield>
       for(port_DMA=0;port_DMA<NumOfPorts;)
 8008888:	4b90      	ldr	r3, [pc, #576]	; (8008acc <BackEndTask+0x370>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b04      	cmp	r3, #4
 800888e:	d800      	bhi.n	8008892 <BackEndTask+0x136>
 8008890:	e773      	b.n	800877a <BackEndTask+0x1e>
 8008892:	4b8e      	ldr	r3, [pc, #568]	; (8008acc <BackEndTask+0x370>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	e7f6      	b.n	8008888 <BackEndTask+0x12c>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 800889a:	2900      	cmp	r1, #0
 800889c:	d18d      	bne.n	80087ba <BackEndTask+0x5e>
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800889e:	4b83      	ldr	r3, [pc, #524]	; (8008aac <BackEndTask+0x350>)
 80088a0:	3a41      	subs	r2, #65	; 0x41
 80088a2:	541a      	strb	r2, [r3, r0]
 80088a4:	e7df      	b.n	8008866 <BackEndTask+0x10a>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'Z' && portStatus[port_number] == H_Status)
 80088a6:	2907      	cmp	r1, #7
 80088a8:	d189      	bne.n	80087be <BackEndTask+0x62>
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 80088aa:	4b80      	ldr	r3, [pc, #512]	; (8008aac <BackEndTask+0x350>)
 80088ac:	3a52      	subs	r2, #82	; 0x52
 80088ae:	541a      	strb	r2, [r3, r0]
 80088b0:	e7d9      	b.n	8008866 <BackEndTask+0x10a>
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 80088b2:	4b7e      	ldr	r3, [pc, #504]	; (8008aac <BackEndTask+0x350>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	541a      	strb	r2, [r3, r0]
 80088b8:	e7d5      	b.n	8008866 <BackEndTask+0x10a>
				portStatus[port_number] =MSG; // Receive length byte.
 80088ba:	497c      	ldr	r1, [pc, #496]	; (8008aac <BackEndTask+0x350>)
 80088bc:	2401      	movs	r4, #1
 80088be:	540c      	strb	r4, [r1, r0]
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80088c0:	497b      	ldr	r1, [pc, #492]	; (8008ab0 <BackEndTask+0x354>)
 80088c2:	5ccc      	ldrb	r4, [r1, r3]
 80088c4:	487b      	ldr	r0, [pc, #492]	; (8008ab4 <BackEndTask+0x358>)
 80088c6:	00e1      	lsls	r1, r4, #3
 80088c8:	1b09      	subs	r1, r1, r4
 80088ca:	00c9      	lsls	r1, r1, #3
 80088cc:	009d      	lsls	r5, r3, #2
 80088ce:	18ed      	adds	r5, r5, r3
 80088d0:	00ec      	lsls	r4, r5, #3
 80088d2:	1b64      	subs	r4, r4, r5
 80088d4:	00e4      	lsls	r4, r4, #3
 80088d6:	1909      	adds	r1, r1, r4
 80088d8:	1840      	adds	r0, r0, r1
 80088da:	7082      	strb	r2, [r0, #2]
				temp_index[port_index] = 3;
 80088dc:	2103      	movs	r1, #3
 80088de:	a802      	add	r0, sp, #8
 80088e0:	54c1      	strb	r1, [r0, r3]
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
 80088e2:	3201      	adds	r2, #1
 80088e4:	a904      	add	r1, sp, #16
 80088e6:	54ca      	strb	r2, [r1, r3]
 80088e8:	e7bd      	b.n	8008866 <BackEndTask+0x10a>
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80088ea:	4f71      	ldr	r7, [pc, #452]	; (8008ab0 <BackEndTask+0x354>)
 80088ec:	5cfc      	ldrb	r4, [r7, r3]
 80088ee:	ad02      	add	r5, sp, #8
 80088f0:	5ced      	ldrb	r5, [r5, r3]
 80088f2:	46a8      	mov	r8, r5
 80088f4:	4d6f      	ldr	r5, [pc, #444]	; (8008ab4 <BackEndTask+0x358>)
 80088f6:	9501      	str	r5, [sp, #4]
 80088f8:	00e5      	lsls	r5, r4, #3
 80088fa:	1b2d      	subs	r5, r5, r4
 80088fc:	00ed      	lsls	r5, r5, #3
 80088fe:	46aa      	mov	sl, r5
 8008900:	009d      	lsls	r5, r3, #2
 8008902:	46a9      	mov	r9, r5
 8008904:	4499      	add	r9, r3
 8008906:	464d      	mov	r5, r9
 8008908:	00ed      	lsls	r5, r5, #3
 800890a:	464e      	mov	r6, r9
 800890c:	1bad      	subs	r5, r5, r6
 800890e:	00ed      	lsls	r5, r5, #3
 8008910:	46ac      	mov	ip, r5
 8008912:	44e2      	add	sl, ip
 8008914:	4655      	mov	r5, sl
 8008916:	9e01      	ldr	r6, [sp, #4]
 8008918:	1976      	adds	r6, r6, r5
 800891a:	4645      	mov	r5, r8
 800891c:	5572      	strb	r2, [r6, r5]
					temp_index[port_index]++;
 800891e:	4642      	mov	r2, r8
 8008920:	3201      	adds	r2, #1
 8008922:	ad02      	add	r5, sp, #8
 8008924:	54ea      	strb	r2, [r5, r3]
					temp_length[port_index]--;
 8008926:	3901      	subs	r1, #1
 8008928:	aa04      	add	r2, sp, #16
 800892a:	54d1      	strb	r1, [r2, r3]
					MSG_Buffer_Index_End[port_index]++;
 800892c:	3401      	adds	r4, #1
 800892e:	b2e4      	uxtb	r4, r4
 8008930:	54fc      	strb	r4, [r7, r3]
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 8008932:	2c05      	cmp	r4, #5
 8008934:	d00c      	beq.n	8008950 <BackEndTask+0x1f4>
					Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 8008936:	4a66      	ldr	r2, [pc, #408]	; (8008ad0 <BackEndTask+0x374>)
 8008938:	7813      	ldrb	r3, [r2, #0]
 800893a:	4967      	ldr	r1, [pc, #412]	; (8008ad8 <BackEndTask+0x37c>)
 800893c:	54c8      	strb	r0, [r1, r3]
					Process_Message_Buffer_Index_End++;
 800893e:	3301      	adds	r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	7013      	strb	r3, [r2, #0]
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008944:	2b05      	cmp	r3, #5
 8008946:	d006      	beq.n	8008956 <BackEndTask+0x1fa>
					portStatus[port_number] =FREE; // End of receiving message.
 8008948:	4b58      	ldr	r3, [pc, #352]	; (8008aac <BackEndTask+0x350>)
 800894a:	2200      	movs	r2, #0
 800894c:	541a      	strb	r2, [r3, r0]
 800894e:	e78a      	b.n	8008866 <BackEndTask+0x10a>
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 8008950:	2100      	movs	r1, #0
 8008952:	54f9      	strb	r1, [r7, r3]
 8008954:	e7ef      	b.n	8008936 <BackEndTask+0x1da>
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008956:	0013      	movs	r3, r2
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e7f4      	b.n	8008948 <BackEndTask+0x1ec>
				{index_process[port_DMA]=0;}
 800895e:	000b      	movs	r3, r1
 8008960:	2100      	movs	r1, #0
 8008962:	5499      	strb	r1, [r3, r2]
 8008964:	e788      	b.n	8008878 <BackEndTask+0x11c>
			port_DMA++;
 8008966:	4a59      	ldr	r2, [pc, #356]	; (8008acc <BackEndTask+0x370>)
 8008968:	3301      	adds	r3, #1
 800896a:	7013      	strb	r3, [r2, #0]
 800896c:	e784      	b.n	8008878 <BackEndTask+0x11c>
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800896e:	4a5a      	ldr	r2, [pc, #360]	; (8008ad8 <BackEndTask+0x37c>)
 8008970:	5cd3      	ldrb	r3, [r2, r3]
 8008972:	469a      	mov	sl, r3
			port_index = port_number - 1;
 8008974:	1e5c      	subs	r4, r3, #1
 8008976:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008978:	4b58      	ldr	r3, [pc, #352]	; (8008adc <BackEndTask+0x380>)
 800897a:	5d1f      	ldrb	r7, [r3, r4]
 800897c:	4a4d      	ldr	r2, [pc, #308]	; (8008ab4 <BackEndTask+0x358>)
 800897e:	00fb      	lsls	r3, r7, #3
 8008980:	1bdb      	subs	r3, r3, r7
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	00a0      	lsls	r0, r4, #2
 8008986:	1900      	adds	r0, r0, r4
 8008988:	00c1      	lsls	r1, r0, #3
 800898a:	1a09      	subs	r1, r1, r0
 800898c:	00c9      	lsls	r1, r1, #3
 800898e:	185b      	adds	r3, r3, r1
 8008990:	2148      	movs	r1, #72	; 0x48
 8008992:	5499      	strb	r1, [r3, r2]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	225a      	movs	r2, #90	; 0x5a
 8008998:	705a      	strb	r2, [r3, #1]
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800899a:	789b      	ldrb	r3, [r3, #2]
 800899c:	469b      	mov	fp, r3
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800899e:	4b50      	ldr	r3, [pc, #320]	; (8008ae0 <BackEndTask+0x384>)
 80089a0:	7019      	strb	r1, [r3, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 80089a2:	705a      	strb	r2, [r3, #1]
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80089a4:	465a      	mov	r2, fp
 80089a6:	709a      	strb	r2, [r3, #2]
			for(int i=0;i<length;i++)
 80089a8:	2100      	movs	r1, #0
 80089aa:	e00f      	b.n	80089cc <BackEndTask+0x270>
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 80089ac:	1cc8      	adds	r0, r1, #3
 80089ae:	4a41      	ldr	r2, [pc, #260]	; (8008ab4 <BackEndTask+0x358>)
 80089b0:	00fb      	lsls	r3, r7, #3
 80089b2:	1bdb      	subs	r3, r3, r7
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	00a6      	lsls	r6, r4, #2
 80089b8:	1936      	adds	r6, r6, r4
 80089ba:	00f5      	lsls	r5, r6, #3
 80089bc:	1bae      	subs	r6, r5, r6
 80089be:	00f6      	lsls	r6, r6, #3
 80089c0:	199b      	adds	r3, r3, r6
 80089c2:	18d2      	adds	r2, r2, r3
 80089c4:	5c12      	ldrb	r2, [r2, r0]
 80089c6:	4b46      	ldr	r3, [pc, #280]	; (8008ae0 <BackEndTask+0x384>)
 80089c8:	541a      	strb	r2, [r3, r0]
			for(int i=0;i<length;i++)
 80089ca:	3101      	adds	r1, #1
 80089cc:	458b      	cmp	fp, r1
 80089ce:	dced      	bgt.n	80089ac <BackEndTask+0x250>
			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,length + 3);
 80089d0:	465b      	mov	r3, fp
 80089d2:	1cd9      	adds	r1, r3, #3
 80089d4:	4f42      	ldr	r7, [pc, #264]	; (8008ae0 <BackEndTask+0x384>)
 80089d6:	0038      	movs	r0, r7
 80089d8:	f002 ff62 	bl	800b8a0 <CalculateCRC8>
			Message_counter++;
 80089dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80089de:	3301      	adds	r3, #1
 80089e0:	873b      	strh	r3, [r7, #56]	; 0x38
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 80089e2:	4b3e      	ldr	r3, [pc, #248]	; (8008adc <BackEndTask+0x380>)
 80089e4:	5d1f      	ldrb	r7, [r3, r4]
 80089e6:	465b      	mov	r3, fp
 80089e8:	1cd9      	adds	r1, r3, #3
 80089ea:	4a32      	ldr	r2, [pc, #200]	; (8008ab4 <BackEndTask+0x358>)
 80089ec:	00fb      	lsls	r3, r7, #3
 80089ee:	1bdb      	subs	r3, r3, r7
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	00a5      	lsls	r5, r4, #2
 80089f4:	46a8      	mov	r8, r5
 80089f6:	44a0      	add	r8, r4
 80089f8:	4645      	mov	r5, r8
 80089fa:	00ed      	lsls	r5, r5, #3
 80089fc:	4646      	mov	r6, r8
 80089fe:	1bad      	subs	r5, r5, r6
 8008a00:	00ed      	lsls	r5, r5, #3
 8008a02:	46ac      	mov	ip, r5
 8008a04:	4463      	add	r3, ip
 8008a06:	18d2      	adds	r2, r2, r3
 8008a08:	5c53      	ldrb	r3, [r2, r1]
 8008a0a:	4283      	cmp	r3, r0
 8008a0c:	d016      	beq.n	8008a3c <BackEndTask+0x2e0>
				Rejected_Messages++;
 8008a0e:	4a34      	ldr	r2, [pc, #208]	; (8008ae0 <BackEndTask+0x384>)
 8008a10:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8008a12:	3301      	adds	r3, #1
 8008a14:	8793      	strh	r3, [r2, #60]	; 0x3c
			MSG_Buffer_Index_Start[port_index]++;
 8008a16:	4a31      	ldr	r2, [pc, #196]	; (8008adc <BackEndTask+0x380>)
 8008a18:	5d13      	ldrb	r3, [r2, r4]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	5513      	strb	r3, [r2, r4]
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008a20:	2b05      	cmp	r3, #5
 8008a22:	d037      	beq.n	8008a94 <BackEndTask+0x338>
			Process_Message_Buffer_Index_Start++;
 8008a24:	4a2b      	ldr	r2, [pc, #172]	; (8008ad4 <BackEndTask+0x378>)
 8008a26:	7813      	ldrb	r3, [r2, #0]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d000      	beq.n	8008a34 <BackEndTask+0x2d8>
 8008a32:	e727      	b.n	8008884 <BackEndTask+0x128>
 8008a34:	0013      	movs	r3, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	e723      	b.n	8008884 <BackEndTask+0x128>
				Accepted_Messages++;
 8008a3c:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <BackEndTask+0x384>)
 8008a3e:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 8008a40:	3301      	adds	r3, #1
 8008a42:	8753      	strh	r3, [r2, #58]	; 0x3a
				messageLength[port_index] =length;
 8008a44:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <BackEndTask+0x388>)
 8008a46:	465a      	mov	r2, fp
 8008a48:	551a      	strb	r2, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008a4a:	00e3      	lsls	r3, r4, #3
 8008a4c:	4698      	mov	r8, r3
 8008a4e:	1b18      	subs	r0, r3, r4
 8008a50:	00c0      	lsls	r0, r0, #3
 8008a52:	4b25      	ldr	r3, [pc, #148]	; (8008ae8 <BackEndTask+0x38c>)
 8008a54:	4699      	mov	r9, r3
 8008a56:	4448      	add	r0, r9
 8008a58:	00f9      	lsls	r1, r7, #3
 8008a5a:	1bc9      	subs	r1, r1, r7
 8008a5c:	00c9      	lsls	r1, r1, #3
 8008a5e:	1949      	adds	r1, r1, r5
 8008a60:	3103      	adds	r1, #3
 8008a62:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <BackEndTask+0x358>)
 8008a64:	18c9      	adds	r1, r1, r3
 8008a66:	f00c f88a 	bl	8014b7e <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008a6a:	4643      	mov	r3, r8
 8008a6c:	1b1b      	subs	r3, r3, r4
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	464a      	mov	r2, r9
 8008a72:	5c9b      	ldrb	r3, [r3, r2]
 8008a74:	4a1d      	ldr	r2, [pc, #116]	; (8008aec <BackEndTask+0x390>)
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <BackEndTask+0x328>
 8008a7c:	2bff      	cmp	r3, #255	; 0xff
 8008a7e:	d001      	beq.n	8008a84 <BackEndTask+0x328>
 8008a80:	2bfe      	cmp	r3, #254	; 0xfe
 8008a82:	d103      	bne.n	8008a8c <BackEndTask+0x330>
					NotifyMessagingTask(port_number);
 8008a84:	4650      	mov	r0, sl
 8008a86:	f7ff fadd 	bl	8008044 <NotifyMessagingTask>
 8008a8a:	e7c4      	b.n	8008a16 <BackEndTask+0x2ba>
					ForwardReceivedMessage(port_number);
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	f7ff fd01 	bl	8008494 <ForwardReceivedMessage>
 8008a92:	e7c0      	b.n	8008a16 <BackEndTask+0x2ba>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008a94:	0013      	movs	r3, r2
 8008a96:	2200      	movs	r2, #0
 8008a98:	551a      	strb	r2, [r3, r4]
 8008a9a:	e7c3      	b.n	8008a24 <BackEndTask+0x2c8>
 8008a9c:	20000eec 	.word	0x20000eec
 8008aa0:	20000f0c 	.word	0x20000f0c
 8008aa4:	20000f04 	.word	0x20000f04
 8008aa8:	20001740 	.word	0x20001740
 8008aac:	2000095c 	.word	0x2000095c
 8008ab0:	20001494 	.word	0x20001494
 8008ab4:	20000f1c 	.word	0x20000f1c
 8008ab8:	20000958 	.word	0x20000958
 8008abc:	20000ee9 	.word	0x20000ee9
 8008ac0:	20001b14 	.word	0x20001b14
 8008ac4:	200014a2 	.word	0x200014a2
 8008ac8:	200014a1 	.word	0x200014a1
 8008acc:	20000ee8 	.word	0x20000ee8
 8008ad0:	20000f12 	.word	0x20000f12
 8008ad4:	20000f13 	.word	0x20000f13
 8008ad8:	20000f14 	.word	0x20000f14
 8008adc:	2000149c 	.word	0x2000149c
 8008ae0:	20001c80 	.word	0x20001c80
 8008ae4:	200009f8 	.word	0x200009f8
 8008ae8:	20000a38 	.word	0x20000a38
 8008aec:	200007a0 	.word	0x200007a0

08008af0 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008af0:	2001      	movs	r0, #1
 8008af2:	4770      	bx	lr

08008af4 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af6:	46de      	mov	lr, fp
 8008af8:	4657      	mov	r7, sl
 8008afa:	464e      	mov	r6, r9
 8008afc:	4645      	mov	r5, r8
 8008afe:	b5e0      	push	{r5, r6, r7, lr}
 8008b00:	b08f      	sub	sp, #60	; 0x3c
 8008b02:	2300      	movs	r3, #0
 8008b04:	469b      	mov	fp, r3
 8008b06:	9307      	str	r3, [sp, #28]
	port =(int8_t )(unsigned )argument;
 8008b08:	b2c3      	uxtb	r3, r0
 8008b0a:	9306      	str	r3, [sp, #24]
	HAL_StatusTypeDef status =HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
 8008b10:	4699      	mov	r9, r3
 8008b12:	4682      	mov	sl, r0
 8008b14:	e064      	b.n	8008be0 <PxMessagingTask+0xec>
				longMessage =1;
 8008b16:	4aba      	ldr	r2, [pc, #744]	; (8008e00 <PxMessagingTask+0x30c>)
 8008b18:	2101      	movs	r1, #1
 8008b1a:	7011      	strb	r1, [r2, #0]
 8008b1c:	e07a      	b.n	8008c14 <PxMessagingTask+0x120>
				code =cMessage[port - 1][3 + shift];
 8008b1e:	4643      	mov	r3, r8
 8008b20:	1cd9      	adds	r1, r3, #3
 8008b22:	4bb8      	ldr	r3, [pc, #736]	; (8008e04 <PxMessagingTask+0x310>)
 8008b24:	00e8      	lsls	r0, r5, #3
 8008b26:	1b40      	subs	r0, r0, r5
 8008b28:	00c0      	lsls	r0, r0, #3
 8008b2a:	181b      	adds	r3, r3, r0
 8008b2c:	5c5f      	ldrb	r7, [r3, r1]
 8008b2e:	e0a4      	b.n	8008c7a <PxMessagingTask+0x186>
				BOSMessaging.Acknowledgment =false;
 8008b30:	4bb5      	ldr	r3, [pc, #724]	; (8008e08 <PxMessagingTask+0x314>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008b36:	212c      	movs	r1, #44	; 0x2c
 8008b38:	4658      	mov	r0, fp
 8008b3a:	f7ff fd13 	bl	8008564 <SendMessageToModule>
 8008b3e:	e09f      	b.n	8008c80 <PxMessagingTask+0x18c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008b40:	2bfc      	cmp	r3, #252	; 0xfc
 8008b42:	d805      	bhi.n	8008b50 <PxMessagingTask+0x5c>
 8008b44:	4bb1      	ldr	r3, [pc, #708]	; (8008e0c <PxMessagingTask+0x318>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	42b3      	cmp	r3, r6
 8008b4a:	d001      	beq.n	8008b50 <PxMessagingTask+0x5c>
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d022      	beq.n	8008b96 <PxMessagingTask+0xa2>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008b50:	2eff      	cmp	r6, #255	; 0xff
 8008b52:	d100      	bne.n	8008b56 <PxMessagingTask+0x62>
 8008b54:	e0c7      	b.n	8008ce6 <PxMessagingTask+0x1f2>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008b56:	2eff      	cmp	r6, #255	; 0xff
 8008b58:	d100      	bne.n	8008b5c <PxMessagingTask+0x68>
 8008b5a:	e0e8      	b.n	8008d2e <PxMessagingTask+0x23a>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008b5c:	2efe      	cmp	r6, #254	; 0xfe
 8008b5e:	d100      	bne.n	8008b62 <PxMessagingTask+0x6e>
 8008b60:	e0f7      	b.n	8008d52 <PxMessagingTask+0x25e>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008b62:	2efe      	cmp	r6, #254	; 0xfe
 8008b64:	d100      	bne.n	8008b68 <PxMessagingTask+0x74>
 8008b66:	e133      	b.n	8008dd0 <PxMessagingTask+0x2dc>
				shift +=4;
 8008b68:	4643      	mov	r3, r8
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	4698      	mov	r8, r3
				numOfParams =messageLength[port - 1] - shift;
 8008b70:	4ba7      	ldr	r3, [pc, #668]	; (8008e10 <PxMessagingTask+0x31c>)
 8008b72:	5d5b      	ldrb	r3, [r3, r5]
 8008b74:	4642      	mov	r2, r8
 8008b76:	1a9a      	subs	r2, r3, r2
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	9205      	str	r2, [sp, #20]
				if(result == BOS_OK){
 8008b7c:	464a      	mov	r2, r9
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	d112      	bne.n	8008ba8 <PxMessagingTask+0xb4>
					switch(code){
 8008b82:	2f2d      	cmp	r7, #45	; 0x2d
 8008b84:	d900      	bls.n	8008b88 <PxMessagingTask+0x94>
 8008b86:	e14f      	b.n	8008e28 <PxMessagingTask+0x334>
 8008b88:	d901      	bls.n	8008b8e <PxMessagingTask+0x9a>
 8008b8a:	f001 fd79 	bl	800a680 <PxMessagingTask+0x1b8c>
 8008b8e:	00ba      	lsls	r2, r7, #2
 8008b90:	49a0      	ldr	r1, [pc, #640]	; (8008e14 <PxMessagingTask+0x320>)
 8008b92:	588a      	ldr	r2, [r1, r2]
 8008b94:	4697      	mov	pc, r2
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008b96:	2f10      	cmp	r7, #16
 8008b98:	d17f      	bne.n	8008c9a <PxMessagingTask+0x1a6>
 8008b9a:	e7d9      	b.n	8008b50 <PxMessagingTask+0x5c>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008b9c:	2f19      	cmp	r7, #25
 8008b9e:	d100      	bne.n	8008ba2 <PxMessagingTask+0xae>
 8008ba0:	e087      	b.n	8008cb2 <PxMessagingTask+0x1be>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008ba2:	2f1a      	cmp	r7, #26
 8008ba4:	d100      	bne.n	8008ba8 <PxMessagingTask+0xb4>
 8008ba6:	e08e      	b.n	8008cc6 <PxMessagingTask+0x1d2>
		if(result == BOS_ERR_UnknownMessage){
 8008ba8:	464b      	mov	r3, r9
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <PxMessagingTask+0xbe>
 8008bae:	f001 fd7f 	bl	800a6b0 <PxMessagingTask+0x1bbc>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008bb2:	00e8      	lsls	r0, r5, #3
 8008bb4:	1b40      	subs	r0, r0, r5
 8008bb6:	00c0      	lsls	r0, r0, #3
 8008bb8:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <PxMessagingTask+0x310>)
 8008bba:	18c0      	adds	r0, r0, r3
 8008bbc:	4e94      	ldr	r6, [pc, #592]	; (8008e10 <PxMessagingTask+0x31c>)
 8008bbe:	5d72      	ldrb	r2, [r6, r5]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	f00b feb0 	bl	8014926 <memset>
		messageLength[port - 1] =0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	5573      	strb	r3, [r6, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008bca:	4b93      	ldr	r3, [pc, #588]	; (8008e18 <PxMessagingTask+0x324>)
 8008bcc:	5d1b      	ldrb	r3, [r3, r4]
 8008bce:	3b02      	subs	r3, #2
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d902      	bls.n	8008bdc <PxMessagingTask+0xe8>
			portStatus[port] =FREE;
 8008bd6:	4b90      	ldr	r3, [pc, #576]	; (8008e18 <PxMessagingTask+0x324>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	551a      	strb	r2, [r3, r4]
		taskYIELD();
 8008bdc:	f007 f8a2 	bl	800fd24 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008be0:	2101      	movs	r1, #1
 8008be2:	4249      	negs	r1, r1
 8008be4:	2001      	movs	r0, #1
 8008be6:	f006 fde9 	bl	800f7bc <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008bea:	24ff      	movs	r4, #255	; 0xff
 8008bec:	4653      	mov	r3, sl
 8008bee:	401c      	ands	r4, r3
 8008bf0:	1e65      	subs	r5, r4, #1
 8008bf2:	4b87      	ldr	r3, [pc, #540]	; (8008e10 <PxMessagingTask+0x31c>)
 8008bf4:	5d5b      	ldrb	r3, [r3, r5]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0d6      	beq.n	8008ba8 <PxMessagingTask+0xb4>
			if(cMessage[port - 1][2] >> 7){
 8008bfa:	4a82      	ldr	r2, [pc, #520]	; (8008e04 <PxMessagingTask+0x310>)
 8008bfc:	00eb      	lsls	r3, r5, #3
 8008bfe:	1b5b      	subs	r3, r3, r5
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	18d2      	adds	r2, r2, r3
 8008c04:	7893      	ldrb	r3, [r2, #2]
 8008c06:	7892      	ldrb	r2, [r2, #2]
 8008c08:	b252      	sxtb	r2, r2
 8008c0a:	2a00      	cmp	r2, #0
 8008c0c:	db83      	blt.n	8008b16 <PxMessagingTask+0x22>
				longMessage =0;
 8008c0e:	4a7c      	ldr	r2, [pc, #496]	; (8008e00 <PxMessagingTask+0x30c>)
 8008c10:	2100      	movs	r1, #0
 8008c12:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 8008c14:	4a7b      	ldr	r2, [pc, #492]	; (8008e04 <PxMessagingTask+0x310>)
 8008c16:	00e9      	lsls	r1, r5, #3
 8008c18:	1b48      	subs	r0, r1, r5
 8008c1a:	00c0      	lsls	r0, r0, #3
 8008c1c:	5c86      	ldrb	r6, [r0, r2]
			src =cMessage[port - 1][1];
 8008c1e:	1812      	adds	r2, r2, r0
 8008c20:	7852      	ldrb	r2, [r2, #1]
 8008c22:	4693      	mov	fp, r2
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8008c24:	2201      	movs	r2, #1
 8008c26:	0011      	movs	r1, r2
 8008c28:	4019      	ands	r1, r3
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	421a      	tst	r2, r3
 8008c2e:	d000      	beq.n	8008c32 <PxMessagingTask+0x13e>
				++shift;
 8008c30:	4690      	mov	r8, r2
			extendCode =(cMessage[port - 1][2] >> 1) & 0x01; 					// 2nd bit Extended code
 8008c32:	085a      	lsrs	r2, r3, #1
 8008c34:	4694      	mov	ip, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008c36:	0899      	lsrs	r1, r3, #2
 8008c38:	2203      	movs	r2, #3
 8008c3a:	400a      	ands	r2, r1
 8008c3c:	4972      	ldr	r1, [pc, #456]	; (8008e08 <PxMessagingTask+0x314>)
 8008c3e:	704a      	strb	r2, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008c40:	091a      	lsrs	r2, r3, #4
 8008c42:	2701      	movs	r7, #1
 8008c44:	403a      	ands	r2, r7
 8008c46:	70ca      	strb	r2, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008c48:	2060      	movs	r0, #96	; 0x60
 8008c4a:	4018      	ands	r0, r3
 8008c4c:	7008      	strb	r0, [r1, #0]
			if(extendCode == true){
 8008c4e:	4663      	mov	r3, ip
 8008c50:	421f      	tst	r7, r3
 8008c52:	d100      	bne.n	8008c56 <PxMessagingTask+0x162>
 8008c54:	e763      	b.n	8008b1e <PxMessagingTask+0x2a>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008c56:	4643      	mov	r3, r8
 8008c58:	1d18      	adds	r0, r3, #4
 8008c5a:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <PxMessagingTask+0x310>)
 8008c5c:	00e9      	lsls	r1, r5, #3
 8008c5e:	1b49      	subs	r1, r1, r5
 8008c60:	00c9      	lsls	r1, r1, #3
 8008c62:	185b      	adds	r3, r3, r1
 8008c64:	5c1f      	ldrb	r7, [r3, r0]
 8008c66:	023f      	lsls	r7, r7, #8
 8008c68:	4641      	mov	r1, r8
 8008c6a:	3103      	adds	r1, #3
 8008c6c:	5c5b      	ldrb	r3, [r3, r1]
 8008c6e:	18ff      	adds	r7, r7, r3
 8008c70:	b2bf      	uxth	r7, r7
				++shift;
 8008c72:	4643      	mov	r3, r8
 8008c74:	3301      	adds	r3, #1
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4698      	mov	r8, r3
			if(true == BOSMessaging.received_Acknowledgment){
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	d000      	beq.n	8008c80 <PxMessagingTask+0x18c>
 8008c7e:	e757      	b.n	8008b30 <PxMessagingTask+0x3c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008c80:	1e73      	subs	r3, r6, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2bfc      	cmp	r3, #252	; 0xfc
 8008c86:	d900      	bls.n	8008c8a <PxMessagingTask+0x196>
 8008c88:	e75a      	b.n	8008b40 <PxMessagingTask+0x4c>
 8008c8a:	4a60      	ldr	r2, [pc, #384]	; (8008e0c <PxMessagingTask+0x318>)
 8008c8c:	7812      	ldrb	r2, [r2, #0]
 8008c8e:	42b2      	cmp	r2, r6
 8008c90:	d100      	bne.n	8008c94 <PxMessagingTask+0x1a0>
 8008c92:	e755      	b.n	8008b40 <PxMessagingTask+0x4c>
 8008c94:	2a01      	cmp	r2, #1
 8008c96:	d100      	bne.n	8008c9a <PxMessagingTask+0x1a6>
 8008c98:	e752      	b.n	8008b40 <PxMessagingTask+0x4c>
				ForwardReceivedMessage(port);
 8008c9a:	9806      	ldr	r0, [sp, #24]
 8008c9c:	f7ff fbfa 	bl	8008494 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008ca0:	4b59      	ldr	r3, [pc, #356]	; (8008e08 <PxMessagingTask+0x314>)
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d100      	bne.n	8008caa <PxMessagingTask+0x1b6>
 8008ca8:	e778      	b.n	8008b9c <PxMessagingTask+0xa8>
					indMode =IND_SHORT_BLINK;
 8008caa:	4b5c      	ldr	r3, [pc, #368]	; (8008e1c <PxMessagingTask+0x328>)
 8008cac:	2203      	movs	r2, #3
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e774      	b.n	8008b9c <PxMessagingTask+0xa8>
					Delay_ms(100);
 8008cb2:	2064      	movs	r0, #100	; 0x64
 8008cb4:	f007 f998 	bl	800ffe8 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9a06      	ldr	r2, [sp, #24]
 8008cbc:	0031      	movs	r1, r6
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	f001 fe8e 	bl	800a9e0 <remoteBootloaderUpdate>
 8008cc4:	e770      	b.n	8008ba8 <PxMessagingTask+0xb4>
					Delay_ms(100);
 8008cc6:	2064      	movs	r0, #100	; 0x64
 8008cc8:	f007 f98e 	bl	800ffe8 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008ccc:	4b4d      	ldr	r3, [pc, #308]	; (8008e04 <PxMessagingTask+0x310>)
 8008cce:	00ea      	lsls	r2, r5, #3
 8008cd0:	1b52      	subs	r2, r2, r5
 8008cd2:	00d2      	lsls	r2, r2, #3
 8008cd4:	189b      	adds	r3, r3, r2
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	5c9b      	ldrb	r3, [r3, r2]
 8008cda:	9a06      	ldr	r2, [sp, #24]
 8008cdc:	0031      	movs	r1, r6
 8008cde:	4658      	mov	r0, fp
 8008ce0:	f001 fe7e 	bl	800a9e0 <remoteBootloaderUpdate>
 8008ce4:	e760      	b.n	8008ba8 <PxMessagingTask+0xb4>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ce6:	4b4a      	ldr	r3, [pc, #296]	; (8008e10 <PxMessagingTask+0x31c>)
 8008ce8:	5d59      	ldrb	r1, [r3, r5]
 8008cea:	3901      	subs	r1, #1
 8008cec:	4b45      	ldr	r3, [pc, #276]	; (8008e04 <PxMessagingTask+0x310>)
 8008cee:	00ea      	lsls	r2, r5, #3
 8008cf0:	1b52      	subs	r2, r2, r5
 8008cf2:	00d2      	lsls	r2, r2, #3
 8008cf4:	189b      	adds	r3, r3, r2
 8008cf6:	5c5a      	ldrb	r2, [r3, r1]
 8008cf8:	4b49      	ldr	r3, [pc, #292]	; (8008e20 <PxMessagingTask+0x32c>)
 8008cfa:	213e      	movs	r1, #62	; 0x3e
 8008cfc:	5c5b      	ldrb	r3, [r3, r1]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d100      	bne.n	8008d04 <PxMessagingTask+0x210>
 8008d02:	e728      	b.n	8008b56 <PxMessagingTask+0x62>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008d04:	4b46      	ldr	r3, [pc, #280]	; (8008e20 <PxMessagingTask+0x32c>)
 8008d06:	545a      	strb	r2, [r3, r1]
 8008d08:	4b46      	ldr	r3, [pc, #280]	; (8008e24 <PxMessagingTask+0x330>)
 8008d0a:	701a      	strb	r2, [r3, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008d0c:	9906      	ldr	r1, [sp, #24]
 8008d0e:	20ff      	movs	r0, #255	; 0xff
 8008d10:	f7ff fbe0 	bl	80084d4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008d14:	4b3e      	ldr	r3, [pc, #248]	; (8008e10 <PxMessagingTask+0x31c>)
 8008d16:	5d59      	ldrb	r1, [r3, r5]
 8008d18:	3901      	subs	r1, #1
 8008d1a:	4b3a      	ldr	r3, [pc, #232]	; (8008e04 <PxMessagingTask+0x310>)
 8008d1c:	00ea      	lsls	r2, r5, #3
 8008d1e:	1b52      	subs	r2, r2, r5
 8008d20:	00d2      	lsls	r2, r2, #3
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	2200      	movs	r2, #0
 8008d26:	545a      	strb	r2, [r3, r1]
					result =BOS_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4699      	mov	r9, r3
 8008d2c:	e716      	b.n	8008b5c <PxMessagingTask+0x68>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008d2e:	4b38      	ldr	r3, [pc, #224]	; (8008e10 <PxMessagingTask+0x31c>)
 8008d30:	5d59      	ldrb	r1, [r3, r5]
 8008d32:	3901      	subs	r1, #1
 8008d34:	4b33      	ldr	r3, [pc, #204]	; (8008e04 <PxMessagingTask+0x310>)
 8008d36:	00ea      	lsls	r2, r5, #3
 8008d38:	1b52      	subs	r2, r2, r5
 8008d3a:	00d2      	lsls	r2, r2, #3
 8008d3c:	189b      	adds	r3, r3, r2
 8008d3e:	5c5a      	ldrb	r2, [r3, r1]
 8008d40:	4b37      	ldr	r3, [pc, #220]	; (8008e20 <PxMessagingTask+0x32c>)
 8008d42:	213e      	movs	r1, #62	; 0x3e
 8008d44:	5c5b      	ldrb	r3, [r3, r1]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d000      	beq.n	8008d4c <PxMessagingTask+0x258>
 8008d4a:	e707      	b.n	8008b5c <PxMessagingTask+0x68>
					result =BOS_ERR_MSG_Reflection;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	4699      	mov	r9, r3
 8008d50:	e704      	b.n	8008b5c <PxMessagingTask+0x68>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008d52:	4b2f      	ldr	r3, [pc, #188]	; (8008e10 <PxMessagingTask+0x31c>)
 8008d54:	5d59      	ldrb	r1, [r3, r5]
 8008d56:	3901      	subs	r1, #1
 8008d58:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <PxMessagingTask+0x310>)
 8008d5a:	00ea      	lsls	r2, r5, #3
 8008d5c:	1b52      	subs	r2, r2, r5
 8008d5e:	00d2      	lsls	r2, r2, #3
 8008d60:	189b      	adds	r3, r3, r2
 8008d62:	5c5a      	ldrb	r2, [r3, r1]
 8008d64:	4b2e      	ldr	r3, [pc, #184]	; (8008e20 <PxMessagingTask+0x32c>)
 8008d66:	213e      	movs	r1, #62	; 0x3e
 8008d68:	5c5b      	ldrb	r3, [r3, r1]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d100      	bne.n	8008d70 <PxMessagingTask+0x27c>
 8008d6e:	e6f8      	b.n	8008b62 <PxMessagingTask+0x6e>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008d70:	4b2b      	ldr	r3, [pc, #172]	; (8008e20 <PxMessagingTask+0x32c>)
 8008d72:	545a      	strb	r2, [r3, r1]
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <PxMessagingTask+0x330>)
 8008d76:	701a      	strb	r2, [r3, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008d78:	9906      	ldr	r1, [sp, #24]
 8008d7a:	20fe      	movs	r0, #254	; 0xfe
 8008d7c:	f7ff fbaa 	bl	80084d4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008d80:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <PxMessagingTask+0x31c>)
 8008d82:	5d58      	ldrb	r0, [r3, r5]
 8008d84:	1e42      	subs	r2, r0, #1
 8008d86:	4b1f      	ldr	r3, [pc, #124]	; (8008e04 <PxMessagingTask+0x310>)
 8008d88:	00e9      	lsls	r1, r5, #3
 8008d8a:	1b49      	subs	r1, r1, r5
 8008d8c:	00c9      	lsls	r1, r1, #3
 8008d8e:	185b      	adds	r3, r3, r1
 8008d90:	2100      	movs	r1, #0
 8008d92:	5499      	strb	r1, [r3, r2]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008d94:	3802      	subs	r0, #2
 8008d96:	5c1b      	ldrb	r3, [r3, r0]
 8008d98:	9307      	str	r3, [sp, #28]
					for(i =0; i < temp; i++){
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	46a4      	mov	ip, r4
 8008d9e:	0004      	movs	r4, r0
 8008da0:	0018      	movs	r0, r3
 8008da2:	46b1      	mov	r9, r6
 8008da4:	4282      	cmp	r2, r0
 8008da6:	d20e      	bcs.n	8008dc6 <PxMessagingTask+0x2d2>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008da8:	1a21      	subs	r1, r4, r0
 8008daa:	1851      	adds	r1, r2, r1
 8008dac:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <PxMessagingTask+0x310>)
 8008dae:	00ee      	lsls	r6, r5, #3
 8008db0:	1b76      	subs	r6, r6, r5
 8008db2:	00f6      	lsls	r6, r6, #3
 8008db4:	199b      	adds	r3, r3, r6
 8008db6:	5c59      	ldrb	r1, [r3, r1]
 8008db8:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <PxMessagingTask+0x318>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	d019      	beq.n	8008df4 <PxMessagingTask+0x300>
					for(i =0; i < temp; i++){
 8008dc0:	3201      	adds	r2, #1
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	e7ee      	b.n	8008da4 <PxMessagingTask+0x2b0>
					result =BOS_ERR_WrongID;
 8008dc6:	4664      	mov	r4, ip
 8008dc8:	464e      	mov	r6, r9
 8008dca:	2366      	movs	r3, #102	; 0x66
 8008dcc:	4699      	mov	r9, r3
 8008dce:	e6cb      	b.n	8008b68 <PxMessagingTask+0x74>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008dd0:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <PxMessagingTask+0x31c>)
 8008dd2:	5d59      	ldrb	r1, [r3, r5]
 8008dd4:	3901      	subs	r1, #1
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <PxMessagingTask+0x310>)
 8008dd8:	00ea      	lsls	r2, r5, #3
 8008dda:	1b52      	subs	r2, r2, r5
 8008ddc:	00d2      	lsls	r2, r2, #3
 8008dde:	189b      	adds	r3, r3, r2
 8008de0:	5c5a      	ldrb	r2, [r3, r1]
 8008de2:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <PxMessagingTask+0x32c>)
 8008de4:	213e      	movs	r1, #62	; 0x3e
 8008de6:	5c5b      	ldrb	r3, [r3, r1]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d000      	beq.n	8008dee <PxMessagingTask+0x2fa>
 8008dec:	e6bc      	b.n	8008b68 <PxMessagingTask+0x74>
					result =BOS_ERR_MSG_Reflection;
 8008dee:	2303      	movs	r3, #3
 8008df0:	4699      	mov	r9, r3
 8008df2:	e6b9      	b.n	8008b68 <PxMessagingTask+0x74>
							result =BOS_OK;
 8008df4:	4664      	mov	r4, ip
 8008df6:	464e      	mov	r6, r9
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	e6b4      	b.n	8008b68 <PxMessagingTask+0x74>
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	200009f4 	.word	0x200009f4
 8008e04:	20000a38 	.word	0x20000a38
 8008e08:	20000844 	.word	0x20000844
 8008e0c:	200007a0 	.word	0x200007a0
 8008e10:	200009f8 	.word	0x200009f8
 8008e14:	08019adc 	.word	0x08019adc
 8008e18:	2000095c 	.word	0x2000095c
 8008e1c:	20000ee7 	.word	0x20000ee7
 8008e20:	20001c80 	.word	0x20001c80
 8008e24:	200009f0 	.word	0x200009f0
					switch(code){
 8008e28:	4be4      	ldr	r3, [pc, #912]	; (80091bc <PxMessagingTask+0x6c8>)
 8008e2a:	429f      	cmp	r7, r3
 8008e2c:	d001      	beq.n	8008e32 <PxMessagingTask+0x33e>
 8008e2e:	f001 fc27 	bl	800a680 <PxMessagingTask+0x1b8c>
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008e32:	4be3      	ldr	r3, [pc, #908]	; (80091c0 <PxMessagingTask+0x6cc>)
 8008e34:	2238      	movs	r2, #56	; 0x38
 8008e36:	436a      	muls	r2, r5
 8008e38:	189b      	adds	r3, r3, r2
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	5c99      	ldrb	r1, [r3, r2]
 8008e3e:	4ae1      	ldr	r2, [pc, #900]	; (80091c4 <PxMessagingTask+0x6d0>)
 8008e40:	7411      	strb	r1, [r2, #16]
							defalt_data.Local_mac_addr[1]= cMessage[port - 1][1 + shift];
 8008e42:	4641      	mov	r1, r8
 8008e44:	3101      	adds	r1, #1
 8008e46:	5c59      	ldrb	r1, [r3, r1]
 8008e48:	7451      	strb	r1, [r2, #17]
							defalt_data.Local_mac_addr[2]= cMessage[port - 1][2 + shift];
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	3102      	adds	r1, #2
 8008e4e:	5c59      	ldrb	r1, [r3, r1]
 8008e50:	7491      	strb	r1, [r2, #18]
							defalt_data.Local_mac_addr[3]= cMessage[port - 1][3 + shift];
 8008e52:	4641      	mov	r1, r8
 8008e54:	3103      	adds	r1, #3
 8008e56:	5c59      	ldrb	r1, [r3, r1]
 8008e58:	74d1      	strb	r1, [r2, #19]
							defalt_data.Local_mac_addr[4]= cMessage[port - 1][4 + shift];
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	3104      	adds	r1, #4
 8008e5e:	5c59      	ldrb	r1, [r3, r1]
 8008e60:	7511      	strb	r1, [r2, #20]
							defalt_data.Local_mac_addr[5]= cMessage[port - 1][5 + shift];
 8008e62:	4641      	mov	r1, r8
 8008e64:	3105      	adds	r1, #5
 8008e66:	5c59      	ldrb	r1, [r3, r1]
 8008e68:	7551      	strb	r1, [r2, #21]
							defalt_data.Remote_mac_addr[0]= cMessage[port - 1][6 + shift];
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	3106      	adds	r1, #6
 8008e6e:	5c59      	ldrb	r1, [r3, r1]
 8008e70:	7591      	strb	r1, [r2, #22]
							defalt_data.Remote_mac_addr[1]= cMessage[port - 1][7 + shift];
 8008e72:	4641      	mov	r1, r8
 8008e74:	3107      	adds	r1, #7
 8008e76:	5c59      	ldrb	r1, [r3, r1]
 8008e78:	75d1      	strb	r1, [r2, #23]
							defalt_data.Remote_mac_addr[2]= cMessage[port - 1][8 + shift];
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	3108      	adds	r1, #8
 8008e7e:	5c59      	ldrb	r1, [r3, r1]
 8008e80:	7611      	strb	r1, [r2, #24]
							defalt_data.Remote_mac_addr[3]= cMessage[port - 1][9 + shift];
 8008e82:	4641      	mov	r1, r8
 8008e84:	3109      	adds	r1, #9
 8008e86:	5c59      	ldrb	r1, [r3, r1]
 8008e88:	7651      	strb	r1, [r2, #25]
							defalt_data.Remote_mac_addr[4]= cMessage[port - 1][10 + shift];
 8008e8a:	4641      	mov	r1, r8
 8008e8c:	310a      	adds	r1, #10
 8008e8e:	5c59      	ldrb	r1, [r3, r1]
 8008e90:	7691      	strb	r1, [r2, #26]
							defalt_data.Remote_mac_addr[5]= cMessage[port - 1][11 + shift];
 8008e92:	4641      	mov	r1, r8
 8008e94:	310b      	adds	r1, #11
 8008e96:	5c59      	ldrb	r1, [r3, r1]
 8008e98:	76d1      	strb	r1, [r2, #27]
							defalt_data.Local_IP[0]= cMessage[port - 1][12 + shift];
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	310c      	adds	r1, #12
 8008e9e:	5c59      	ldrb	r1, [r3, r1]
 8008ea0:	7711      	strb	r1, [r2, #28]
							defalt_data.Local_IP[1]= cMessage[port - 1][13 + shift];
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	310d      	adds	r1, #13
 8008ea6:	5c59      	ldrb	r1, [r3, r1]
 8008ea8:	7751      	strb	r1, [r2, #29]
							defalt_data.Local_IP[2]= cMessage[port - 1][14 + shift];
 8008eaa:	4641      	mov	r1, r8
 8008eac:	310e      	adds	r1, #14
 8008eae:	5c59      	ldrb	r1, [r3, r1]
 8008eb0:	7791      	strb	r1, [r2, #30]
							defalt_data.Local_IP[3]= cMessage[port - 1][15 + shift];
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	310f      	adds	r1, #15
 8008eb6:	5c59      	ldrb	r1, [r3, r1]
 8008eb8:	77d1      	strb	r1, [r2, #31]
							defalt_data.Remote_IP[0]= cMessage[port - 1][16 + shift];
 8008eba:	4641      	mov	r1, r8
 8008ebc:	3110      	adds	r1, #16
 8008ebe:	5c58      	ldrb	r0, [r3, r1]
 8008ec0:	2120      	movs	r1, #32
 8008ec2:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_IP[1]= cMessage[port - 1][17 + shift];
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	3111      	adds	r1, #17
 8008ec8:	5c58      	ldrb	r0, [r3, r1]
 8008eca:	2121      	movs	r1, #33	; 0x21
 8008ecc:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_IP[2]= cMessage[port - 1][18 + shift];
 8008ece:	4641      	mov	r1, r8
 8008ed0:	3112      	adds	r1, #18
 8008ed2:	5c58      	ldrb	r0, [r3, r1]
 8008ed4:	2122      	movs	r1, #34	; 0x22
 8008ed6:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_IP[3]= cMessage[port - 1][19 + shift];
 8008ed8:	4641      	mov	r1, r8
 8008eda:	3113      	adds	r1, #19
 8008edc:	5c58      	ldrb	r0, [r3, r1]
 8008ede:	2123      	movs	r1, #35	; 0x23
 8008ee0:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[0]= cMessage[port - 1][20 + shift];
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	3114      	adds	r1, #20
 8008ee6:	5c58      	ldrb	r0, [r3, r1]
 8008ee8:	2124      	movs	r1, #36	; 0x24
 8008eea:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[1]= cMessage[port - 1][21 + shift];
 8008eec:	4641      	mov	r1, r8
 8008eee:	3115      	adds	r1, #21
 8008ef0:	5c58      	ldrb	r0, [r3, r1]
 8008ef2:	2125      	movs	r1, #37	; 0x25
 8008ef4:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[2]= cMessage[port - 1][22 + shift];
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	3116      	adds	r1, #22
 8008efa:	5c58      	ldrb	r0, [r3, r1]
 8008efc:	2126      	movs	r1, #38	; 0x26
 8008efe:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[3]= cMessage[port - 1][23 + shift];
 8008f00:	4641      	mov	r1, r8
 8008f02:	3117      	adds	r1, #23
 8008f04:	5c58      	ldrb	r0, [r3, r1]
 8008f06:	2127      	movs	r1, #39	; 0x27
 8008f08:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[0]= cMessage[port - 1][24 + shift];
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	3118      	adds	r1, #24
 8008f0e:	5c58      	ldrb	r0, [r3, r1]
 8008f10:	2128      	movs	r1, #40	; 0x28
 8008f12:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[1]= cMessage[port - 1][25 + shift];
 8008f14:	4641      	mov	r1, r8
 8008f16:	3119      	adds	r1, #25
 8008f18:	5c58      	ldrb	r0, [r3, r1]
 8008f1a:	2129      	movs	r1, #41	; 0x29
 8008f1c:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[2]= cMessage[port - 1][26 + shift];
 8008f1e:	4641      	mov	r1, r8
 8008f20:	311a      	adds	r1, #26
 8008f22:	5c58      	ldrb	r0, [r3, r1]
 8008f24:	212a      	movs	r1, #42	; 0x2a
 8008f26:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[3]= cMessage[port - 1][27 + shift];
 8008f28:	4641      	mov	r1, r8
 8008f2a:	311b      	adds	r1, #27
 8008f2c:	5c58      	ldrb	r0, [r3, r1]
 8008f2e:	212b      	movs	r1, #43	; 0x2b
 8008f30:	5450      	strb	r0, [r2, r1]
							defalt_data.Local_PORT= cMessage[port - 1][28 + shift];
 8008f32:	4641      	mov	r1, r8
 8008f34:	311c      	adds	r1, #28
 8008f36:	5c58      	ldrb	r0, [r3, r1]
 8008f38:	212c      	movs	r1, #44	; 0x2c
 8008f3a:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_PORT= cMessage[port - 1][29 + shift];
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	311d      	adds	r1, #29
 8008f40:	5c59      	ldrb	r1, [r3, r1]
 8008f42:	232d      	movs	r3, #45	; 0x2d
 8008f44:	54d1      	strb	r1, [r2, r3]
							break;
 8008f46:	e62f      	b.n	8008ba8 <PxMessagingTask+0xb4>
							indMode =IND_PING;
 8008f48:	4b9f      	ldr	r3, [pc, #636]	; (80091c8 <PxMessagingTask+0x6d4>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008f4e:	200a      	movs	r0, #10
 8008f50:	f005 f950 	bl	800e1f4 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008f54:	4b9d      	ldr	r3, [pc, #628]	; (80091cc <PxMessagingTask+0x6d8>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b60      	cmp	r3, #96	; 0x60
 8008f5a:	d002      	beq.n	8008f62 <PxMessagingTask+0x46e>
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d000      	beq.n	8008f62 <PxMessagingTask+0x46e>
 8008f60:	e622      	b.n	8008ba8 <PxMessagingTask+0xb4>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008f62:	2200      	movs	r2, #0
 8008f64:	2102      	movs	r1, #2
 8008f66:	4658      	mov	r0, fp
 8008f68:	f7ff fafc 	bl	8008564 <SendMessageToModule>
 8008f6c:	e61c      	b.n	8008ba8 <PxMessagingTask+0xb4>
							if(!moduleAlias[myID][0])
 8008f6e:	4b98      	ldr	r3, [pc, #608]	; (80091d0 <PxMessagingTask+0x6dc>)
 8008f70:	4a98      	ldr	r2, [pc, #608]	; (80091d4 <PxMessagingTask+0x6e0>)
 8008f72:	7811      	ldrb	r1, [r2, #0]
 8008f74:	220a      	movs	r2, #10
 8008f76:	434a      	muls	r2, r1
 8008f78:	5cd3      	ldrb	r3, [r2, r3]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d118      	bne.n	8008fb0 <PxMessagingTask+0x4bc>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008f7e:	4996      	ldr	r1, [pc, #600]	; (80091d8 <PxMessagingTask+0x6e4>)
 8008f80:	4896      	ldr	r0, [pc, #600]	; (80091dc <PxMessagingTask+0x6e8>)
 8008f82:	3040      	adds	r0, #64	; 0x40
 8008f84:	465a      	mov	r2, fp
 8008f86:	f00b fc41 	bl	801480c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008f8a:	4e94      	ldr	r6, [pc, #592]	; (80091dc <PxMessagingTask+0x6e8>)
 8008f8c:	3640      	adds	r6, #64	; 0x40
 8008f8e:	0030      	movs	r0, r6
 8008f90:	f7f7 f8c2 	bl	8000118 <strlen>
 8008f94:	b282      	uxth	r2, r0
 8008f96:	4b92      	ldr	r3, [pc, #584]	; (80091e0 <PxMessagingTask+0x6ec>)
 8008f98:	7818      	ldrb	r0, [r3, #0]
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	3333      	adds	r3, #51	; 0x33
 8008fa2:	0031      	movs	r1, r6
 8008fa4:	f004 ff9c 	bl	800dee0 <writePxMutex>
							responseStatus =BOS_OK;
 8008fa8:	4b8e      	ldr	r3, [pc, #568]	; (80091e4 <PxMessagingTask+0x6f0>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]
							break;
 8008fae:	e5fb      	b.n	8008ba8 <PxMessagingTask+0xb4>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8008fb0:	230a      	movs	r3, #10
 8008fb2:	465a      	mov	r2, fp
 8008fb4:	4353      	muls	r3, r2
 8008fb6:	4a86      	ldr	r2, [pc, #536]	; (80091d0 <PxMessagingTask+0x6dc>)
 8008fb8:	189b      	adds	r3, r3, r2
 8008fba:	498b      	ldr	r1, [pc, #556]	; (80091e8 <PxMessagingTask+0x6f4>)
 8008fbc:	4887      	ldr	r0, [pc, #540]	; (80091dc <PxMessagingTask+0x6e8>)
 8008fbe:	3040      	adds	r0, #64	; 0x40
 8008fc0:	465a      	mov	r2, fp
 8008fc2:	f00b fc23 	bl	801480c <sprintf>
 8008fc6:	e7e0      	b.n	8008f8a <PxMessagingTask+0x496>
							IND_ON();
 8008fc8:	2090      	movs	r0, #144	; 0x90
 8008fca:	2201      	movs	r2, #1
 8008fcc:	2140      	movs	r1, #64	; 0x40
 8008fce:	05c0      	lsls	r0, r0, #23
 8008fd0:	f008 fbbd 	bl	801174e <HAL_GPIO_WritePin>
							break;
 8008fd4:	e5e8      	b.n	8008ba8 <PxMessagingTask+0xb4>
							IND_OFF();
 8008fd6:	2090      	movs	r0, #144	; 0x90
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2140      	movs	r1, #64	; 0x40
 8008fdc:	05c0      	lsls	r0, r0, #23
 8008fde:	f008 fbb6 	bl	801174e <HAL_GPIO_WritePin>
							break;
 8008fe2:	e5e1      	b.n	8008ba8 <PxMessagingTask+0xb4>
							IND_toggle();
 8008fe4:	2090      	movs	r0, #144	; 0x90
 8008fe6:	2140      	movs	r1, #64	; 0x40
 8008fe8:	05c0      	lsls	r0, r0, #23
 8008fea:	f008 fbb6 	bl	801175a <HAL_GPIO_TogglePin>
							break;
 8008fee:	e5db      	b.n	8008ba8 <PxMessagingTask+0xb4>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	021b      	lsls	r3, r3, #8
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	1c90      	adds	r0, r2, #2
 8008ff8:	4a71      	ldr	r2, [pc, #452]	; (80091c0 <PxMessagingTask+0x6cc>)
 8008ffa:	2138      	movs	r1, #56	; 0x38
 8008ffc:	4369      	muls	r1, r5
 8008ffe:	1852      	adds	r2, r2, r1
 8009000:	5c11      	ldrb	r1, [r2, r0]
 8009002:	185b      	adds	r3, r3, r1
 8009004:	4979      	ldr	r1, [pc, #484]	; (80091ec <PxMessagingTask+0x6f8>)
 8009006:	00a8      	lsls	r0, r5, #2
 8009008:	520b      	strh	r3, [r1, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800900a:	4643      	mov	r3, r8
 800900c:	5cd3      	ldrb	r3, [r2, r3]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	4646      	mov	r6, r8
 8009012:	3601      	adds	r6, #1
 8009014:	5d92      	ldrb	r2, [r2, r6]
 8009016:	189a      	adds	r2, r3, r2
 8009018:	1809      	adds	r1, r1, r0
 800901a:	804a      	strh	r2, [r1, #2]
							messageParams[1] =(uint8_t )myPN;
 800901c:	4b74      	ldr	r3, [pc, #464]	; (80091f0 <PxMessagingTask+0x6fc>)
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	4a74      	ldr	r2, [pc, #464]	; (80091f4 <PxMessagingTask+0x700>)
 8009022:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8009024:	0a1b      	lsrs	r3, r3, #8
 8009026:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8009028:	9e06      	ldr	r6, [sp, #24]
 800902a:	7096      	strb	r6, [r2, #2]
							osDelay(2);
 800902c:	2002      	movs	r0, #2
 800902e:	f005 f8e1 	bl	800e1f4 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009032:	2303      	movs	r3, #3
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	2200      	movs	r2, #0
 800903a:	0011      	movs	r1, r2
 800903c:	0030      	movs	r0, r6
 800903e:	f7ff f83d 	bl	80080bc <SendMessageFromPort>
							break;
 8009042:	e5b1      	b.n	8008ba8 <PxMessagingTask+0xb4>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009044:	465b      	mov	r3, fp
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	4642      	mov	r2, r8
 800904a:	1c90      	adds	r0, r2, #2
 800904c:	4a5c      	ldr	r2, [pc, #368]	; (80091c0 <PxMessagingTask+0x6cc>)
 800904e:	2138      	movs	r1, #56	; 0x38
 8009050:	4369      	muls	r1, r5
 8009052:	1852      	adds	r2, r2, r1
 8009054:	5c11      	ldrb	r1, [r2, r0]
 8009056:	185b      	adds	r3, r3, r1
 8009058:	4964      	ldr	r1, [pc, #400]	; (80091ec <PxMessagingTask+0x6f8>)
 800905a:	00a8      	lsls	r0, r5, #2
 800905c:	520b      	strh	r3, [r1, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800905e:	4643      	mov	r3, r8
 8009060:	5cd3      	ldrb	r3, [r2, r3]
 8009062:	021b      	lsls	r3, r3, #8
 8009064:	4646      	mov	r6, r8
 8009066:	3601      	adds	r6, #1
 8009068:	5d92      	ldrb	r2, [r2, r6]
 800906a:	189a      	adds	r2, r3, r2
 800906c:	1809      	adds	r1, r1, r0
 800906e:	804a      	strh	r2, [r1, #2]
							responseStatus =BOS_OK;
 8009070:	4b5c      	ldr	r3, [pc, #368]	; (80091e4 <PxMessagingTask+0x6f0>)
 8009072:	2200      	movs	r2, #0
 8009074:	701a      	strb	r2, [r3, #0]
							break;
 8009076:	e597      	b.n	8008ba8 <PxMessagingTask+0xb4>
							ExploreNeighbors(port);
 8009078:	9806      	ldr	r0, [sp, #24]
 800907a:	f7fa fd75 	bl	8003b68 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800907e:	4b52      	ldr	r3, [pc, #328]	; (80091c8 <PxMessagingTask+0x6d4>)
 8009080:	2202      	movs	r2, #2
 8009082:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009084:	200a      	movs	r0, #10
 8009086:	f005 f8b5 	bl	800e1f4 <osDelay>
							temp =0;
 800908a:	464f      	mov	r7, r9
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800908c:	2601      	movs	r6, #1
 800908e:	e001      	b.n	8009094 <PxMessagingTask+0x5a0>
 8009090:	3601      	adds	r6, #1
 8009092:	b2f6      	uxtb	r6, r6
 8009094:	2e05      	cmp	r6, #5
 8009096:	d811      	bhi.n	80090bc <PxMessagingTask+0x5c8>
								if(neighbors[p - 1][0]){
 8009098:	1e72      	subs	r2, r6, #1
 800909a:	4b54      	ldr	r3, [pc, #336]	; (80091ec <PxMessagingTask+0x6f8>)
 800909c:	0091      	lsls	r1, r2, #2
 800909e:	5acb      	ldrh	r3, [r1, r3]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0f5      	beq.n	8009090 <PxMessagingTask+0x59c>
									messageParams[temp] =p;
 80090a4:	4b53      	ldr	r3, [pc, #332]	; (80091f4 <PxMessagingTask+0x700>)
 80090a6:	55de      	strb	r6, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80090a8:	1c78      	adds	r0, r7, #1
 80090aa:	4a50      	ldr	r2, [pc, #320]	; (80091ec <PxMessagingTask+0x6f8>)
 80090ac:	1889      	adds	r1, r1, r2
 80090ae:	18c0      	adds	r0, r0, r3
 80090b0:	2204      	movs	r2, #4
 80090b2:	f00b fd64 	bl	8014b7e <memcpy>
									temp +=5;
 80090b6:	3705      	adds	r7, #5
 80090b8:	b2ff      	uxtb	r7, r7
 80090ba:	e7e9      	b.n	8009090 <PxMessagingTask+0x59c>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 80090bc:	9707      	str	r7, [sp, #28]
 80090be:	b2ba      	uxth	r2, r7
 80090c0:	210d      	movs	r1, #13
 80090c2:	4658      	mov	r0, fp
 80090c4:	f7ff fa4e 	bl	8008564 <SendMessageToModule>
							break;
 80090c8:	e56e      	b.n	8008ba8 <PxMessagingTask+0xb4>
							temp =numOfParams / 5;
 80090ca:	2105      	movs	r1, #5
 80090cc:	9805      	ldr	r0, [sp, #20]
 80090ce:	f7f7 f83f 	bl	8000150 <__udivsi3>
 80090d2:	b2c3      	uxtb	r3, r0
 80090d4:	9307      	str	r3, [sp, #28]
							for(uint8_t k =0; k < temp; k++){
 80090d6:	464e      	mov	r6, r9
 80090d8:	4647      	mov	r7, r8
 80090da:	46a0      	mov	r8, r4
 80090dc:	e017      	b.n	800910e <PxMessagingTask+0x61a>
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 80090de:	00b4      	lsls	r4, r6, #2
 80090e0:	19a4      	adds	r4, r4, r6
 80090e2:	1938      	adds	r0, r7, r4
 80090e4:	4936      	ldr	r1, [pc, #216]	; (80091c0 <PxMessagingTask+0x6cc>)
 80090e6:	00eb      	lsls	r3, r5, #3
 80090e8:	1b5a      	subs	r2, r3, r5
 80090ea:	00d2      	lsls	r2, r2, #3
 80090ec:	188a      	adds	r2, r1, r2
 80090ee:	5c10      	ldrb	r0, [r2, r0]
 80090f0:	3801      	subs	r0, #1
 80090f2:	0080      	lsls	r0, r0, #2
 80090f4:	4a40      	ldr	r2, [pc, #256]	; (80091f8 <PxMessagingTask+0x704>)
 80090f6:	1880      	adds	r0, r0, r2
 80090f8:	1c7a      	adds	r2, r7, #1
 80090fa:	18a2      	adds	r2, r4, r2
 80090fc:	1b5b      	subs	r3, r3, r5
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	189b      	adds	r3, r3, r2
 8009102:	1859      	adds	r1, r3, r1
 8009104:	2204      	movs	r2, #4
 8009106:	f00b fd3a 	bl	8014b7e <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800910a:	3601      	adds	r6, #1
 800910c:	b2f6      	uxtb	r6, r6
 800910e:	9b07      	ldr	r3, [sp, #28]
 8009110:	429e      	cmp	r6, r3
 8009112:	d3e4      	bcc.n	80090de <PxMessagingTask+0x5ea>
							responseStatus =BOS_OK;
 8009114:	4644      	mov	r4, r8
 8009116:	4b33      	ldr	r3, [pc, #204]	; (80091e4 <PxMessagingTask+0x6f0>)
 8009118:	2200      	movs	r2, #0
 800911a:	701a      	strb	r2, [r3, #0]
							break;
 800911c:	e544      	b.n	8008ba8 <PxMessagingTask+0xb4>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800911e:	3601      	adds	r6, #1
 8009120:	b2f6      	uxtb	r6, r6
 8009122:	2e05      	cmp	r6, #5
 8009124:	d813      	bhi.n	800914e <PxMessagingTask+0x65a>
								if(p != port)
 8009126:	42be      	cmp	r6, r7
 8009128:	d0f9      	beq.n	800911e <PxMessagingTask+0x62a>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800912a:	0030      	movs	r0, r6
 800912c:	f004 feba 	bl	800dea4 <GetUart>
 8009130:	4643      	mov	r3, r8
 8009132:	199a      	adds	r2, r3, r6
 8009134:	3a01      	subs	r2, #1
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <PxMessagingTask+0x6cc>)
 8009138:	00e9      	lsls	r1, r5, #3
 800913a:	1b49      	subs	r1, r1, r5
 800913c:	00c9      	lsls	r1, r1, #3
 800913e:	185b      	adds	r3, r3, r1
 8009140:	5c99      	ldrb	r1, [r3, r2]
 8009142:	f004 ff27 	bl	800df94 <SwapUartPins>
 8009146:	e7ea      	b.n	800911e <PxMessagingTask+0x62a>
					switch(code){
 8009148:	2601      	movs	r6, #1
 800914a:	9f06      	ldr	r7, [sp, #24]
 800914c:	e7e9      	b.n	8009122 <PxMessagingTask+0x62e>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800914e:	9806      	ldr	r0, [sp, #24]
 8009150:	f004 fea8 	bl	800dea4 <GetUart>
 8009154:	4641      	mov	r1, r8
 8009156:	310a      	adds	r1, #10
 8009158:	4b19      	ldr	r3, [pc, #100]	; (80091c0 <PxMessagingTask+0x6cc>)
 800915a:	2238      	movs	r2, #56	; 0x38
 800915c:	436a      	muls	r2, r5
 800915e:	189b      	adds	r3, r3, r2
 8009160:	5c59      	ldrb	r1, [r3, r1]
 8009162:	f004 ff17 	bl	800df94 <SwapUartPins>
							break;
 8009166:	e51f      	b.n	8008ba8 <PxMessagingTask+0xb4>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8009168:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <PxMessagingTask+0x6cc>)
 800916a:	2238      	movs	r2, #56	; 0x38
 800916c:	436a      	muls	r2, r5
 800916e:	189b      	adds	r3, r3, r2
 8009170:	4642      	mov	r2, r8
 8009172:	5c9b      	ldrb	r3, [r3, r2]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <PxMessagingTask+0x698>
								myID =cMessage[port - 1][1 + shift];
 8009178:	4641      	mov	r1, r8
 800917a:	3101      	adds	r1, #1
 800917c:	4b10      	ldr	r3, [pc, #64]	; (80091c0 <PxMessagingTask+0x6cc>)
 800917e:	2238      	movs	r2, #56	; 0x38
 8009180:	436a      	muls	r2, r5
 8009182:	189b      	adds	r3, r3, r2
 8009184:	5c5a      	ldrb	r2, [r3, r1]
 8009186:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <PxMessagingTask+0x6e0>)
 8009188:	701a      	strb	r2, [r3, #0]
 800918a:	e50d      	b.n	8008ba8 <PxMessagingTask+0xb4>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800918c:	2b01      	cmp	r3, #1
 800918e:	d000      	beq.n	8009192 <PxMessagingTask+0x69e>
 8009190:	e50a      	b.n	8008ba8 <PxMessagingTask+0xb4>
								messageParams[0] =0; /* change own ID */
 8009192:	4818      	ldr	r0, [pc, #96]	; (80091f4 <PxMessagingTask+0x700>)
 8009194:	2100      	movs	r1, #0
 8009196:	7001      	strb	r1, [r0, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009198:	3201      	adds	r2, #1
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <PxMessagingTask+0x6cc>)
 800919c:	2638      	movs	r6, #56	; 0x38
 800919e:	436e      	muls	r6, r5
 80091a0:	199b      	adds	r3, r3, r6
 80091a2:	5c9a      	ldrb	r2, [r3, r2]
 80091a4:	7042      	strb	r2, [r0, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80091a6:	4642      	mov	r2, r8
 80091a8:	3202      	adds	r2, #2
 80091aa:	5c98      	ldrb	r0, [r3, r2]
 80091ac:	2303      	movs	r3, #3
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	330d      	adds	r3, #13
 80091b2:	000a      	movs	r2, r1
 80091b4:	f7fe ff82 	bl	80080bc <SendMessageFromPort>
 80091b8:	e4f6      	b.n	8008ba8 <PxMessagingTask+0xb4>
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	000005b3 	.word	0x000005b3
 80091c0:	20000a38 	.word	0x20000a38
 80091c4:	20001d00 	.word	0x20001d00
 80091c8:	20000ee7 	.word	0x20000ee7
 80091cc:	20000844 	.word	0x20000844
 80091d0:	20000b6c 	.word	0x20000b6c
 80091d4:	200007a0 	.word	0x200007a0
 80091d8:	0801b598 	.word	0x0801b598
 80091dc:	20001c80 	.word	0x20001c80
 80091e0:	20000958 	.word	0x20000958
 80091e4:	2000096c 	.word	0x2000096c
 80091e8:	0801b5ac 	.word	0x0801b5ac
 80091ec:	20000ed0 	.word	0x20000ed0
 80091f0:	20000030 	.word	0x20000030
 80091f4:	2000086c 	.word	0x2000086c
 80091f8:	20000ebc 	.word	0x20000ebc
							if(longMessage){
 80091fc:	4bbe      	ldr	r3, [pc, #760]	; (80094f8 <PxMessagingTask+0xa04>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d011      	beq.n	8009228 <PxMessagingTask+0x734>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009204:	4ebd      	ldr	r6, [pc, #756]	; (80094fc <PxMessagingTask+0xa08>)
 8009206:	8830      	ldrh	r0, [r6, #0]
 8009208:	4bbd      	ldr	r3, [pc, #756]	; (8009500 <PxMessagingTask+0xa0c>)
 800920a:	18c0      	adds	r0, r0, r3
 800920c:	2138      	movs	r1, #56	; 0x38
 800920e:	4369      	muls	r1, r5
 8009210:	4441      	add	r1, r8
 8009212:	4bbc      	ldr	r3, [pc, #752]	; (8009504 <PxMessagingTask+0xa10>)
 8009214:	18c9      	adds	r1, r1, r3
 8009216:	9f05      	ldr	r7, [sp, #20]
 8009218:	003a      	movs	r2, r7
 800921a:	f00b fcb0 	bl	8014b7e <memcpy>
								longMessageLastPtr +=numOfParams;
 800921e:	8833      	ldrh	r3, [r6, #0]
 8009220:	46bc      	mov	ip, r7
 8009222:	4463      	add	r3, ip
 8009224:	8033      	strh	r3, [r6, #0]
 8009226:	e4bf      	b.n	8008ba8 <PxMessagingTask+0xb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009228:	4eb4      	ldr	r6, [pc, #720]	; (80094fc <PxMessagingTask+0xa08>)
 800922a:	8830      	ldrh	r0, [r6, #0]
 800922c:	4bb4      	ldr	r3, [pc, #720]	; (8009500 <PxMessagingTask+0xa0c>)
 800922e:	9309      	str	r3, [sp, #36]	; 0x24
 8009230:	469c      	mov	ip, r3
 8009232:	4460      	add	r0, ip
 8009234:	2138      	movs	r1, #56	; 0x38
 8009236:	4369      	muls	r1, r5
 8009238:	4441      	add	r1, r8
 800923a:	4bb2      	ldr	r3, [pc, #712]	; (8009504 <PxMessagingTask+0xa10>)
 800923c:	18c9      	adds	r1, r1, r3
 800923e:	9b05      	ldr	r3, [sp, #20]
 8009240:	4698      	mov	r8, r3
 8009242:	001a      	movs	r2, r3
 8009244:	f00b fc9b 	bl	8014b7e <memcpy>
								longMessageLastPtr +=numOfParams;
 8009248:	8837      	ldrh	r7, [r6, #0]
 800924a:	4447      	add	r7, r8
 800924c:	b2bf      	uxth	r7, r7
 800924e:	8037      	strh	r7, [r6, #0]
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009250:	2116      	movs	r1, #22
 8009252:	0038      	movs	r0, r7
 8009254:	f7f6 ff7c 	bl	8000150 <__udivsi3>
 8009258:	4bab      	ldr	r3, [pc, #684]	; (8009508 <PxMessagingTask+0xa14>)
 800925a:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800925c:	48ab      	ldr	r0, [pc, #684]	; (800950c <PxMessagingTask+0xa18>)
 800925e:	003a      	movs	r2, r7
 8009260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009262:	f00b fc8c 	bl	8014b7e <memcpy>
								longMessageLastPtr =0;
 8009266:	2300      	movs	r3, #0
 8009268:	8033      	strh	r3, [r6, #0]
 800926a:	e49d      	b.n	8008ba8 <PxMessagingTask+0xb4>
							ReadPortsDirMSG(src);
 800926c:	4658      	mov	r0, fp
 800926e:	f004 fef7 	bl	800e060 <ReadPortsDirMSG>
								break;
 8009272:	e499      	b.n	8008ba8 <PxMessagingTask+0xb4>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009274:	1e73      	subs	r3, r6, #1
 8009276:	18bc      	adds	r4, r7, r2
 8009278:	49a2      	ldr	r1, [pc, #648]	; (8009504 <PxMessagingTask+0xa10>)
 800927a:	00e8      	lsls	r0, r5, #3
 800927c:	1b40      	subs	r0, r0, r5
 800927e:	00c0      	lsls	r0, r0, #3
 8009280:	1809      	adds	r1, r1, r0
 8009282:	5d09      	ldrb	r1, [r1, r4]
 8009284:	3901      	subs	r1, #1
 8009286:	2080      	movs	r0, #128	; 0x80
 8009288:	0200      	lsls	r0, r0, #8
 800928a:	4108      	asrs	r0, r1
 800928c:	4680      	mov	r8, r0
 800928e:	49a0      	ldr	r1, [pc, #640]	; (8009510 <PxMessagingTask+0xa1c>)
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	5a58      	ldrh	r0, [r3, r1]
 8009294:	4684      	mov	ip, r0
 8009296:	4640      	mov	r0, r8
 8009298:	4664      	mov	r4, ip
 800929a:	4320      	orrs	r0, r4
 800929c:	5258      	strh	r0, [r3, r1]
							for(p =0; p < numOfParams; p++){
 800929e:	3201      	adds	r2, #1
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	9b05      	ldr	r3, [sp, #20]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d3e5      	bcc.n	8009274 <PxMessagingTask+0x780>
							responseStatus =BOS_OK;
 80092a8:	465c      	mov	r4, fp
 80092aa:	46b3      	mov	fp, r6
 80092ac:	4b99      	ldr	r3, [pc, #612]	; (8009514 <PxMessagingTask+0xa20>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
							break;
 80092b2:	e479      	b.n	8008ba8 <PxMessagingTask+0xb4>
					switch(code){
 80092b4:	464a      	mov	r2, r9
 80092b6:	465e      	mov	r6, fp
 80092b8:	46a3      	mov	fp, r4
 80092ba:	4647      	mov	r7, r8
 80092bc:	e7f1      	b.n	80092a2 <PxMessagingTask+0x7ae>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80092be:	4b91      	ldr	r3, [pc, #580]	; (8009504 <PxMessagingTask+0xa10>)
 80092c0:	2238      	movs	r2, #56	; 0x38
 80092c2:	436a      	muls	r2, r5
 80092c4:	189b      	adds	r3, r3, r2
 80092c6:	4642      	mov	r2, r8
 80092c8:	5c9a      	ldrb	r2, [r3, r2]
 80092ca:	0612      	lsls	r2, r2, #24
 80092cc:	4641      	mov	r1, r8
 80092ce:	3101      	adds	r1, #1
 80092d0:	5c59      	ldrb	r1, [r3, r1]
 80092d2:	0409      	lsls	r1, r1, #16
 80092d4:	1852      	adds	r2, r2, r1
 80092d6:	4641      	mov	r1, r8
 80092d8:	3102      	adds	r1, #2
 80092da:	5c59      	ldrb	r1, [r3, r1]
 80092dc:	0209      	lsls	r1, r1, #8
 80092de:	1852      	adds	r2, r2, r1
 80092e0:	4641      	mov	r1, r8
 80092e2:	3103      	adds	r1, #3
 80092e4:	5c59      	ldrb	r1, [r3, r1]
 80092e6:	1852      	adds	r2, r2, r1
 80092e8:	9207      	str	r2, [sp, #28]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80092ea:	4642      	mov	r2, r8
 80092ec:	1d17      	adds	r7, r2, #4
 80092ee:	5ddb      	ldrb	r3, [r3, r7]
 80092f0:	2bff      	cmp	r3, #255	; 0xff
 80092f2:	d00f      	beq.n	8009314 <PxMessagingTask+0x820>
								for(p =0; p < numOfParams; p++){
 80092f4:	464e      	mov	r6, r9
 80092f6:	46a0      	mov	r8, r4
 80092f8:	003c      	movs	r4, r7
 80092fa:	464f      	mov	r7, r9
 80092fc:	e013      	b.n	8009326 <PxMessagingTask+0x832>
									UpdateBaudrate(p,temp32);
 80092fe:	0039      	movs	r1, r7
 8009300:	0030      	movs	r0, r6
 8009302:	f004 fe3d 	bl	800df80 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009306:	3601      	adds	r6, #1
 8009308:	b2f6      	uxtb	r6, r6
 800930a:	2e05      	cmp	r6, #5
 800930c:	d9f7      	bls.n	80092fe <PxMessagingTask+0x80a>
							temp =temp32 =0;
 800930e:	464b      	mov	r3, r9
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	e449      	b.n	8008ba8 <PxMessagingTask+0xb4>
								for(p =1; p <= NumOfPorts; p++){
 8009314:	2601      	movs	r6, #1
 8009316:	9f07      	ldr	r7, [sp, #28]
 8009318:	e7f7      	b.n	800930a <PxMessagingTask+0x816>
										UpdateBaudrate(temp,temp32);
 800931a:	9907      	ldr	r1, [sp, #28]
 800931c:	0038      	movs	r0, r7
 800931e:	f004 fe2f 	bl	800df80 <UpdateBaudrate>
								for(p =0; p < numOfParams; p++){
 8009322:	3601      	adds	r6, #1
 8009324:	b2f6      	uxtb	r6, r6
 8009326:	9b05      	ldr	r3, [sp, #20]
 8009328:	429e      	cmp	r6, r3
 800932a:	d20b      	bcs.n	8009344 <PxMessagingTask+0x850>
									temp =cMessage[port - 1][4 + shift + p];
 800932c:	1932      	adds	r2, r6, r4
 800932e:	4b75      	ldr	r3, [pc, #468]	; (8009504 <PxMessagingTask+0xa10>)
 8009330:	00e9      	lsls	r1, r5, #3
 8009332:	1b49      	subs	r1, r1, r5
 8009334:	00c9      	lsls	r1, r1, #3
 8009336:	185b      	adds	r3, r3, r1
 8009338:	5c9f      	ldrb	r7, [r3, r2]
									if(temp > 0 && temp <= NumOfPorts){
 800933a:	1e7b      	subs	r3, r7, #1
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b04      	cmp	r3, #4
 8009340:	d8ef      	bhi.n	8009322 <PxMessagingTask+0x82e>
 8009342:	e7ea      	b.n	800931a <PxMessagingTask+0x826>
 8009344:	9707      	str	r7, [sp, #28]
 8009346:	4644      	mov	r4, r8
 8009348:	e42e      	b.n	8008ba8 <PxMessagingTask+0xb4>
							SaveToRO();
 800934a:	f001 fa25 	bl	800a798 <SaveToRO>
							SaveEEportsDir();
 800934e:	f7fa f9b1 	bl	80036b4 <SaveEEportsDir>
							indMode =IND_PING;
 8009352:	4b71      	ldr	r3, [pc, #452]	; (8009518 <PxMessagingTask+0xa24>)
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
							break;
 8009358:	e426      	b.n	8008ba8 <PxMessagingTask+0xb4>
							ClearEEportsDir();
 800935a:	f7fa fa87 	bl	800386c <ClearEEportsDir>
							ClearROtopology();
 800935e:	f001 fb13 	bl	800a988 <ClearROtopology>
							osDelay(100);
 8009362:	2064      	movs	r0, #100	; 0x64
 8009364:	f004 ff46 	bl	800e1f4 <osDelay>
							indMode =IND_TOPOLOGY;
 8009368:	4b6b      	ldr	r3, [pc, #428]	; (8009518 <PxMessagingTask+0xa24>)
 800936a:	2202      	movs	r2, #2
 800936c:	701a      	strb	r2, [r3, #0]
							break;
 800936e:	e41b      	b.n	8008ba8 <PxMessagingTask+0xb4>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009370:	f005 f85e 	bl	800e430 <FreeRTOS_CLIGetOutputBuffer>
 8009374:	0007      	movs	r7, r0
							if(dst == BOS_BROADCAST)
 8009376:	2eff      	cmp	r6, #255	; 0xff
 8009378:	d00f      	beq.n	800939a <PxMessagingTask+0x8a6>
							else if(dst == BOS_MULTICAST)
 800937a:	2efe      	cmp	r6, #254	; 0xfe
 800937c:	d01c      	beq.n	80093b8 <PxMessagingTask+0x8c4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800937e:	2138      	movs	r1, #56	; 0x38
 8009380:	4369      	muls	r1, r5
 8009382:	4441      	add	r1, r8
 8009384:	4b5f      	ldr	r3, [pc, #380]	; (8009504 <PxMessagingTask+0xa10>)
 8009386:	18c9      	adds	r1, r1, r3
 8009388:	4864      	ldr	r0, [pc, #400]	; (800951c <PxMessagingTask+0xa28>)
 800938a:	3030      	adds	r0, #48	; 0x30
 800938c:	9a05      	ldr	r2, [sp, #20]
 800938e:	f00b fbf6 	bl	8014b7e <memcpy>
 8009392:	9505      	str	r5, [sp, #20]
 8009394:	46a0      	mov	r8, r4
 8009396:	003c      	movs	r4, r7
 8009398:	e021      	b.n	80093de <PxMessagingTask+0x8ea>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800939a:	2138      	movs	r1, #56	; 0x38
 800939c:	4369      	muls	r1, r5
 800939e:	4441      	add	r1, r8
 80093a0:	4b58      	ldr	r3, [pc, #352]	; (8009504 <PxMessagingTask+0xa10>)
 80093a2:	18c9      	adds	r1, r1, r3
 80093a4:	9a05      	ldr	r2, [sp, #20]
 80093a6:	3a01      	subs	r2, #1
 80093a8:	485c      	ldr	r0, [pc, #368]	; (800951c <PxMessagingTask+0xa28>)
 80093aa:	3030      	adds	r0, #48	; 0x30
 80093ac:	f00b fbe7 	bl	8014b7e <memcpy>
 80093b0:	9505      	str	r5, [sp, #20]
 80093b2:	46a0      	mov	r8, r4
 80093b4:	003c      	movs	r4, r7
 80093b6:	e012      	b.n	80093de <PxMessagingTask+0x8ea>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 80093b8:	2338      	movs	r3, #56	; 0x38
 80093ba:	436b      	muls	r3, r5
 80093bc:	4443      	add	r3, r8
 80093be:	4951      	ldr	r1, [pc, #324]	; (8009504 <PxMessagingTask+0xa10>)
 80093c0:	1859      	adds	r1, r3, r1
 80093c2:	9b05      	ldr	r3, [sp, #20]
 80093c4:	9a07      	ldr	r2, [sp, #28]
 80093c6:	1a9a      	subs	r2, r3, r2
 80093c8:	3a02      	subs	r2, #2
 80093ca:	4854      	ldr	r0, [pc, #336]	; (800951c <PxMessagingTask+0xa28>)
 80093cc:	3030      	adds	r0, #48	; 0x30
 80093ce:	f00b fbd6 	bl	8014b7e <memcpy>
 80093d2:	9505      	str	r5, [sp, #20]
 80093d4:	46a0      	mov	r8, r4
 80093d6:	003c      	movs	r4, r7
 80093d8:	e001      	b.n	80093de <PxMessagingTask+0x8ea>
							} while(xReturned != pdFALSE);
 80093da:	2d00      	cmp	r5, #0
 80093dc:	d025      	beq.n	800942a <PxMessagingTask+0x936>
								temp =PcPort;
 80093de:	4e50      	ldr	r6, [pc, #320]	; (8009520 <PxMessagingTask+0xa2c>)
 80093e0:	7837      	ldrb	r7, [r6, #0]
								PcPort =port;
 80093e2:	9b06      	ldr	r3, [sp, #24]
 80093e4:	7033      	strb	r3, [r6, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80093e6:	2299      	movs	r2, #153	; 0x99
 80093e8:	484c      	ldr	r0, [pc, #304]	; (800951c <PxMessagingTask+0xa28>)
 80093ea:	3030      	adds	r0, #48	; 0x30
 80093ec:	0092      	lsls	r2, r2, #2
 80093ee:	0021      	movs	r1, r4
 80093f0:	f004 ffb4 	bl	800e35c <FreeRTOS_CLIProcessCommand>
 80093f4:	0005      	movs	r5, r0
								PcPort =temp;
 80093f6:	7037      	strb	r7, [r6, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 80093f8:	4b4a      	ldr	r3, [pc, #296]	; (8009524 <PxMessagingTask+0xa30>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b60      	cmp	r3, #96	; 0x60
 80093fe:	d1ec      	bne.n	80093da <PxMessagingTask+0x8e6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8009400:	0020      	movs	r0, r4
 8009402:	f7f6 fe89 	bl	8000118 <strlen>
 8009406:	0002      	movs	r2, r0
 8009408:	4b47      	ldr	r3, [pc, #284]	; (8009528 <PxMessagingTask+0xa34>)
 800940a:	0021      	movs	r1, r4
 800940c:	0018      	movs	r0, r3
 800940e:	f00b fbb6 	bl	8014b7e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8009412:	0020      	movs	r0, r4
 8009414:	f7f6 fe80 	bl	8000118 <strlen>
 8009418:	b282      	uxth	r2, r0
 800941a:	2118      	movs	r1, #24
 800941c:	4658      	mov	r0, fp
 800941e:	f7ff f8a1 	bl	8008564 <SendMessageToModule>
									osDelay(10);
 8009422:	200a      	movs	r0, #10
 8009424:	f004 fee6 	bl	800e1f4 <osDelay>
 8009428:	e7d7      	b.n	80093da <PxMessagingTask+0x8e6>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800942a:	9d05      	ldr	r5, [sp, #20]
 800942c:	9707      	str	r7, [sp, #28]
 800942e:	4644      	mov	r4, r8
 8009430:	483a      	ldr	r0, [pc, #232]	; (800951c <PxMessagingTask+0xa28>)
 8009432:	3030      	adds	r0, #48	; 0x30
 8009434:	2232      	movs	r2, #50	; 0x32
 8009436:	2100      	movs	r1, #0
 8009438:	f00b fa75 	bl	8014926 <memset>
							break;
 800943c:	f7ff fbb4 	bl	8008ba8 <PxMessagingTask+0xb4>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009440:	f004 fff6 	bl	800e430 <FreeRTOS_CLIGetOutputBuffer>
 8009444:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8009446:	f7f6 fe67 	bl	8000118 <strlen>
 800944a:	0002      	movs	r2, r0
 800944c:	2100      	movs	r1, #0
 800944e:	0030      	movs	r0, r6
 8009450:	f00b fa69 	bl	8014926 <memset>
							if(longMessage){
 8009454:	4b28      	ldr	r3, [pc, #160]	; (80094f8 <PxMessagingTask+0xa04>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d011      	beq.n	8009480 <PxMessagingTask+0x98c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800945c:	4f27      	ldr	r7, [pc, #156]	; (80094fc <PxMessagingTask+0xa08>)
 800945e:	8838      	ldrh	r0, [r7, #0]
 8009460:	1830      	adds	r0, r6, r0
 8009462:	2138      	movs	r1, #56	; 0x38
 8009464:	4369      	muls	r1, r5
 8009466:	4441      	add	r1, r8
 8009468:	4b26      	ldr	r3, [pc, #152]	; (8009504 <PxMessagingTask+0xa10>)
 800946a:	18c9      	adds	r1, r1, r3
 800946c:	9e05      	ldr	r6, [sp, #20]
 800946e:	0032      	movs	r2, r6
 8009470:	f00b fb85 	bl	8014b7e <memcpy>
								longMessageLastPtr +=numOfParams;
 8009474:	883b      	ldrh	r3, [r7, #0]
 8009476:	46b4      	mov	ip, r6
 8009478:	4463      	add	r3, ip
 800947a:	803b      	strh	r3, [r7, #0]
 800947c:	f7ff fb94 	bl	8008ba8 <PxMessagingTask+0xb4>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009480:	4f1e      	ldr	r7, [pc, #120]	; (80094fc <PxMessagingTask+0xa08>)
 8009482:	8838      	ldrh	r0, [r7, #0]
 8009484:	1830      	adds	r0, r6, r0
 8009486:	2138      	movs	r1, #56	; 0x38
 8009488:	4369      	muls	r1, r5
 800948a:	4441      	add	r1, r8
 800948c:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <PxMessagingTask+0xa10>)
 800948e:	18c9      	adds	r1, r1, r3
 8009490:	9a05      	ldr	r2, [sp, #20]
 8009492:	f00b fb74 	bl	8014b7e <memcpy>
								longMessageLastPtr =0;
 8009496:	2100      	movs	r1, #0
 8009498:	8039      	strh	r1, [r7, #0]
								responseStatus =BOS_OK;
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <PxMessagingTask+0xa20>)
 800949c:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800949e:	4823      	ldr	r0, [pc, #140]	; (800952c <PxMessagingTask+0xa38>)
 80094a0:	000b      	movs	r3, r1
 80094a2:	000a      	movs	r2, r1
 80094a4:	6800      	ldr	r0, [r0, #0]
 80094a6:	f006 f9cf 	bl	800f848 <xTaskGenericNotify>
 80094aa:	f7ff fb7d 	bl	8008ba8 <PxMessagingTask+0xb4>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80094ae:	4b20      	ldr	r3, [pc, #128]	; (8009530 <PxMessagingTask+0xa3c>)
 80094b0:	4a20      	ldr	r2, [pc, #128]	; (8009534 <PxMessagingTask+0xa40>)
 80094b2:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 80094b4:	4b18      	ldr	r3, [pc, #96]	; (8009518 <PxMessagingTask+0xa24>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 80094ba:	200a      	movs	r0, #10
 80094bc:	f004 fe9a 	bl	800e1f4 <osDelay>
							NVIC_SystemReset();
 80094c0:	f7ff f93e 	bl	8008740 <NVIC_SystemReset>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 80094c4:	4e0f      	ldr	r6, [pc, #60]	; (8009504 <PxMessagingTask+0xa10>)
 80094c6:	2338      	movs	r3, #56	; 0x38
 80094c8:	436b      	muls	r3, r5
 80094ca:	18f6      	adds	r6, r6, r3
 80094cc:	4643      	mov	r3, r8
 80094ce:	5cf0      	ldrb	r0, [r6, r3]
 80094d0:	2100      	movs	r1, #0
 80094d2:	9100      	str	r1, [sp, #0]
 80094d4:	2319      	movs	r3, #25
 80094d6:	000a      	movs	r2, r1
 80094d8:	f7fe fdf0 	bl	80080bc <SendMessageFromPort>
							osDelay(100);
 80094dc:	2064      	movs	r0, #100	; 0x64
 80094de:	f004 fe89 	bl	800e1f4 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 80094e2:	4643      	mov	r3, r8
 80094e4:	5cf3      	ldrb	r3, [r6, r3]
 80094e6:	4a14      	ldr	r2, [pc, #80]	; (8009538 <PxMessagingTask+0xa44>)
 80094e8:	7811      	ldrb	r1, [r2, #0]
 80094ea:	9a06      	ldr	r2, [sp, #24]
 80094ec:	4658      	mov	r0, fp
 80094ee:	f001 fa77 	bl	800a9e0 <remoteBootloaderUpdate>
							break;
 80094f2:	f7ff fb59 	bl	8008ba8 <PxMessagingTask+0xb4>
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	200009f4 	.word	0x200009f4
 80094fc:	200009f2 	.word	0x200009f2
 8009500:	20001d9c 	.word	0x20001d9c
 8009504:	20000a38 	.word	0x20000a38
 8009508:	20000008 	.word	0x20000008
 800950c:	20000c7c 	.word	0x20000c7c
 8009510:	20002870 	.word	0x20002870
 8009514:	2000096c 	.word	0x2000096c
 8009518:	20000ee7 	.word	0x20000ee7
 800951c:	20001d00 	.word	0x20001d00
 8009520:	20000958 	.word	0x20000958
 8009524:	20000844 	.word	0x20000844
 8009528:	2000086c 	.word	0x2000086c
 800952c:	20001b14 	.word	0x20001b14
 8009530:	20007ff0 	.word	0x20007ff0
 8009534:	deadbeef 	.word	0xdeadbeef
 8009538:	200007a0 	.word	0x200007a0
							temp =cMessage[port - 1][11 + shift];
 800953c:	4646      	mov	r6, r8
 800953e:	360b      	adds	r6, #11
 8009540:	4be6      	ldr	r3, [pc, #920]	; (80098dc <PxMessagingTask+0xde8>)
 8009542:	2238      	movs	r2, #56	; 0x38
 8009544:	436a      	muls	r2, r5
 8009546:	189b      	adds	r3, r3, r2
 8009548:	5d9b      	ldrb	r3, [r3, r6]
 800954a:	9307      	str	r3, [sp, #28]
							if(numOfParams == 15)
 800954c:	9b05      	ldr	r3, [sp, #20]
 800954e:	2b0f      	cmp	r3, #15
 8009550:	d078      	beq.n	8009644 <PxMessagingTask+0xb50>
							if(numOfParams == 17)
 8009552:	9b05      	ldr	r3, [sp, #20]
 8009554:	2b11      	cmp	r3, #17
 8009556:	d07e      	beq.n	8009656 <PxMessagingTask+0xb62>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009558:	4be0      	ldr	r3, [pc, #896]	; (80098dc <PxMessagingTask+0xde8>)
 800955a:	2238      	movs	r2, #56	; 0x38
 800955c:	436a      	muls	r2, r5
 800955e:	189b      	adds	r3, r3, r2
 8009560:	4642      	mov	r2, r8
 8009562:	5c9a      	ldrb	r2, [r3, r2]
 8009564:	0612      	lsls	r2, r2, #24
 8009566:	4641      	mov	r1, r8
 8009568:	3101      	adds	r1, #1
 800956a:	910a      	str	r1, [sp, #40]	; 0x28
 800956c:	5c59      	ldrb	r1, [r3, r1]
 800956e:	0409      	lsls	r1, r1, #16
 8009570:	1852      	adds	r2, r2, r1
 8009572:	4641      	mov	r1, r8
 8009574:	3102      	adds	r1, #2
 8009576:	910b      	str	r1, [sp, #44]	; 0x2c
 8009578:	5c59      	ldrb	r1, [r3, r1]
 800957a:	0209      	lsls	r1, r1, #8
 800957c:	1852      	adds	r2, r2, r1
 800957e:	4641      	mov	r1, r8
 8009580:	3103      	adds	r1, #3
 8009582:	910c      	str	r1, [sp, #48]	; 0x30
 8009584:	5c59      	ldrb	r1, [r3, r1]
 8009586:	1852      	adds	r2, r2, r1
 8009588:	9209      	str	r2, [sp, #36]	; 0x24
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800958a:	4642      	mov	r2, r8
 800958c:	3204      	adds	r2, #4
 800958e:	920d      	str	r2, [sp, #52]	; 0x34
 8009590:	5c9f      	ldrb	r7, [r3, r2]
 8009592:	063f      	lsls	r7, r7, #24
 8009594:	4642      	mov	r2, r8
 8009596:	1d51      	adds	r1, r2, #5
 8009598:	5c5a      	ldrb	r2, [r3, r1]
 800959a:	0412      	lsls	r2, r2, #16
 800959c:	18bf      	adds	r7, r7, r2
 800959e:	4642      	mov	r2, r8
 80095a0:	1d90      	adds	r0, r2, #6
 80095a2:	5c1a      	ldrb	r2, [r3, r0]
 80095a4:	0212      	lsls	r2, r2, #8
 80095a6:	18ba      	adds	r2, r7, r2
 80095a8:	2707      	movs	r7, #7
 80095aa:	4447      	add	r7, r8
 80095ac:	46bc      	mov	ip, r7
 80095ae:	5ddf      	ldrb	r7, [r3, r7]
 80095b0:	19d7      	adds	r7, r2, r7
							if(temp == false){
 80095b2:	9b07      	ldr	r3, [sp, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d173      	bne.n	80096a0 <PxMessagingTask+0xbac>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 80095b8:	4bc8      	ldr	r3, [pc, #800]	; (80098dc <PxMessagingTask+0xde8>)
 80095ba:	2238      	movs	r2, #56	; 0x38
 80095bc:	436a      	muls	r2, r5
 80095be:	189b      	adds	r3, r3, r2
 80095c0:	4642      	mov	r2, r8
 80095c2:	3209      	adds	r2, #9
 80095c4:	5c9b      	ldrb	r3, [r3, r2]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d008      	beq.n	80095dc <PxMessagingTask+0xae8>
 80095ca:	4ac4      	ldr	r2, [pc, #784]	; (80098dc <PxMessagingTask+0xde8>)
 80095cc:	2138      	movs	r1, #56	; 0x38
 80095ce:	4369      	muls	r1, r5
 80095d0:	1852      	adds	r2, r2, r1
 80095d2:	4641      	mov	r1, r8
 80095d4:	310a      	adds	r1, #10
 80095d6:	5c51      	ldrb	r1, [r2, r1]
 80095d8:	2900      	cmp	r1, #0
 80095da:	d145      	bne.n	8009668 <PxMessagingTask+0xb74>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 80095dc:	4bbf      	ldr	r3, [pc, #764]	; (80098dc <PxMessagingTask+0xde8>)
 80095de:	2238      	movs	r2, #56	; 0x38
 80095e0:	436a      	muls	r2, r5
 80095e2:	189b      	adds	r3, r3, r2
 80095e4:	5d9b      	ldrb	r3, [r3, r6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d008      	beq.n	80095fc <PxMessagingTask+0xb08>
 80095ea:	4641      	mov	r1, r8
 80095ec:	310c      	adds	r1, #12
 80095ee:	4abb      	ldr	r2, [pc, #748]	; (80098dc <PxMessagingTask+0xde8>)
 80095f0:	2038      	movs	r0, #56	; 0x38
 80095f2:	4368      	muls	r0, r5
 80095f4:	1812      	adds	r2, r2, r0
 80095f6:	5c51      	ldrb	r1, [r2, r1]
 80095f8:	2900      	cmp	r1, #0
 80095fa:	d144      	bne.n	8009686 <PxMessagingTask+0xb92>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 80095fc:	4bb7      	ldr	r3, [pc, #732]	; (80098dc <PxMessagingTask+0xde8>)
 80095fe:	2238      	movs	r2, #56	; 0x38
 8009600:	436a      	muls	r2, r5
 8009602:	189b      	adds	r3, r3, r2
 8009604:	4642      	mov	r2, r8
 8009606:	320d      	adds	r2, #13
 8009608:	5c9b      	ldrb	r3, [r3, r2]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <PxMessagingTask+0xb1e>
 800960e:	f7ff facb 	bl	8008ba8 <PxMessagingTask+0xb4>
 8009612:	4ab2      	ldr	r2, [pc, #712]	; (80098dc <PxMessagingTask+0xde8>)
 8009614:	2138      	movs	r1, #56	; 0x38
 8009616:	4369      	muls	r1, r5
 8009618:	1852      	adds	r2, r2, r1
 800961a:	4641      	mov	r1, r8
 800961c:	310e      	adds	r1, #14
 800961e:	5c51      	ldrb	r1, [r2, r1]
 8009620:	2900      	cmp	r1, #0
 8009622:	d101      	bne.n	8009628 <PxMessagingTask+0xb34>
 8009624:	f7ff fac0 	bl	8008ba8 <PxMessagingTask+0xb4>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8009628:	4640      	mov	r0, r8
 800962a:	3008      	adds	r0, #8
 800962c:	4aab      	ldr	r2, [pc, #684]	; (80098dc <PxMessagingTask+0xde8>)
 800962e:	2638      	movs	r6, #56	; 0x38
 8009630:	436e      	muls	r6, r5
 8009632:	1992      	adds	r2, r2, r6
 8009634:	5c10      	ldrb	r0, [r2, r0]
 8009636:	9100      	str	r1, [sp, #0]
 8009638:	003a      	movs	r2, r7
 800963a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800963c:	f7fe fc28 	bl	8007e90 <SetupDMAStreams>
 8009640:	f7ff fab2 	bl	8008ba8 <PxMessagingTask+0xb4>
								temp =cMessage[port - 1][13 + shift];
 8009644:	4ba5      	ldr	r3, [pc, #660]	; (80098dc <PxMessagingTask+0xde8>)
 8009646:	2238      	movs	r2, #56	; 0x38
 8009648:	436a      	muls	r2, r5
 800964a:	189b      	adds	r3, r3, r2
 800964c:	4642      	mov	r2, r8
 800964e:	320d      	adds	r2, #13
 8009650:	5c9b      	ldrb	r3, [r3, r2]
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	e77d      	b.n	8009552 <PxMessagingTask+0xa5e>
								temp =cMessage[port - 1][15 + shift];
 8009656:	4ba1      	ldr	r3, [pc, #644]	; (80098dc <PxMessagingTask+0xde8>)
 8009658:	2238      	movs	r2, #56	; 0x38
 800965a:	436a      	muls	r2, r5
 800965c:	189b      	adds	r3, r3, r2
 800965e:	4642      	mov	r2, r8
 8009660:	320f      	adds	r2, #15
 8009662:	5c9b      	ldrb	r3, [r3, r2]
 8009664:	9307      	str	r3, [sp, #28]
 8009666:	e777      	b.n	8009558 <PxMessagingTask+0xa64>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8009668:	3002      	adds	r0, #2
 800966a:	4a9c      	ldr	r2, [pc, #624]	; (80098dc <PxMessagingTask+0xde8>)
 800966c:	9205      	str	r2, [sp, #20]
 800966e:	2238      	movs	r2, #56	; 0x38
 8009670:	436a      	muls	r2, r5
 8009672:	4694      	mov	ip, r2
 8009674:	9a05      	ldr	r2, [sp, #20]
 8009676:	4462      	add	r2, ip
 8009678:	5c10      	ldrb	r0, [r2, r0]
 800967a:	9100      	str	r1, [sp, #0]
 800967c:	003a      	movs	r2, r7
 800967e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009680:	f7fe fc06 	bl	8007e90 <SetupDMAStreams>
 8009684:	e7aa      	b.n	80095dc <PxMessagingTask+0xae8>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8009686:	4640      	mov	r0, r8
 8009688:	3008      	adds	r0, #8
 800968a:	4a94      	ldr	r2, [pc, #592]	; (80098dc <PxMessagingTask+0xde8>)
 800968c:	2638      	movs	r6, #56	; 0x38
 800968e:	436e      	muls	r6, r5
 8009690:	1992      	adds	r2, r2, r6
 8009692:	5c10      	ldrb	r0, [r2, r0]
 8009694:	9100      	str	r1, [sp, #0]
 8009696:	003a      	movs	r2, r7
 8009698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800969a:	f7fe fbf9 	bl	8007e90 <SetupDMAStreams>
 800969e:	e7ad      	b.n	80095fc <PxMessagingTask+0xb08>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 80096a0:	46b2      	mov	sl, r6
 80096a2:	468b      	mov	fp, r1
 80096a4:	4681      	mov	r9, r0
 80096a6:	4667      	mov	r7, ip
 80096a8:	9e05      	ldr	r6, [sp, #20]
 80096aa:	4643      	mov	r3, r8
 80096ac:	3308      	adds	r3, #8
 80096ae:	498b      	ldr	r1, [pc, #556]	; (80098dc <PxMessagingTask+0xde8>)
 80096b0:	2238      	movs	r2, #56	; 0x38
 80096b2:	436a      	muls	r2, r5
 80096b4:	188c      	adds	r4, r1, r2
 80096b6:	5ce1      	ldrb	r1, [r4, r3]
 80096b8:	20e4      	movs	r0, #228	; 0xe4
 80096ba:	f002 fa73 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 80096be:	4643      	mov	r3, r8
 80096c0:	5ce1      	ldrb	r1, [r4, r3]
 80096c2:	0209      	lsls	r1, r1, #8
 80096c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c6:	5ce3      	ldrb	r3, [r4, r3]
 80096c8:	18c9      	adds	r1, r1, r3
 80096ca:	b289      	uxth	r1, r1
 80096cc:	20e5      	movs	r0, #229	; 0xe5
 80096ce:	f002 fa69 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 80096d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d4:	5ce1      	ldrb	r1, [r4, r3]
 80096d6:	0209      	lsls	r1, r1, #8
 80096d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096da:	5ce3      	ldrb	r3, [r4, r3]
 80096dc:	18c9      	adds	r1, r1, r3
 80096de:	b289      	uxth	r1, r1
 80096e0:	20e6      	movs	r0, #230	; 0xe6
 80096e2:	f002 fa5f 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80096e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096e8:	5ce1      	ldrb	r1, [r4, r3]
 80096ea:	0209      	lsls	r1, r1, #8
 80096ec:	465b      	mov	r3, fp
 80096ee:	5ce3      	ldrb	r3, [r4, r3]
 80096f0:	18c9      	adds	r1, r1, r3
 80096f2:	b289      	uxth	r1, r1
 80096f4:	20e7      	movs	r0, #231	; 0xe7
 80096f6:	f002 fa55 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80096fa:	464b      	mov	r3, r9
 80096fc:	5ce1      	ldrb	r1, [r4, r3]
 80096fe:	0209      	lsls	r1, r1, #8
 8009700:	5de3      	ldrb	r3, [r4, r7]
 8009702:	18c9      	adds	r1, r1, r3
 8009704:	b289      	uxth	r1, r1
 8009706:	20e8      	movs	r0, #232	; 0xe8
 8009708:	f002 fa4c 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800970c:	4643      	mov	r3, r8
 800970e:	3309      	adds	r3, #9
 8009710:	5ce1      	ldrb	r1, [r4, r3]
 8009712:	0209      	lsls	r1, r1, #8
 8009714:	3301      	adds	r3, #1
 8009716:	5ce3      	ldrb	r3, [r4, r3]
 8009718:	18c9      	adds	r1, r1, r3
 800971a:	b289      	uxth	r1, r1
 800971c:	20e9      	movs	r0, #233	; 0xe9
 800971e:	f002 fa41 	bl	800bba4 <EE_WriteVariable>
								if(numOfParams == 19)
 8009722:	2e13      	cmp	r6, #19
 8009724:	d003      	beq.n	800972e <PxMessagingTask+0xc3a>
								if(numOfParams == 21)
 8009726:	2e15      	cmp	r6, #21
 8009728:	d011      	beq.n	800974e <PxMessagingTask+0xc5a>
								NVIC_SystemReset();
 800972a:	f7ff f809 	bl	8008740 <NVIC_SystemReset>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800972e:	4b6b      	ldr	r3, [pc, #428]	; (80098dc <PxMessagingTask+0xde8>)
 8009730:	2238      	movs	r2, #56	; 0x38
 8009732:	436a      	muls	r2, r5
 8009734:	189b      	adds	r3, r3, r2
 8009736:	4652      	mov	r2, sl
 8009738:	5c99      	ldrb	r1, [r3, r2]
 800973a:	0209      	lsls	r1, r1, #8
 800973c:	4642      	mov	r2, r8
 800973e:	320c      	adds	r2, #12
 8009740:	5c9b      	ldrb	r3, [r3, r2]
 8009742:	18c9      	adds	r1, r1, r3
 8009744:	b289      	uxth	r1, r1
 8009746:	20ea      	movs	r0, #234	; 0xea
 8009748:	f002 fa2c 	bl	800bba4 <EE_WriteVariable>
 800974c:	e7eb      	b.n	8009726 <PxMessagingTask+0xc32>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800974e:	4641      	mov	r1, r8
 8009750:	310d      	adds	r1, #13
 8009752:	4b62      	ldr	r3, [pc, #392]	; (80098dc <PxMessagingTask+0xde8>)
 8009754:	2238      	movs	r2, #56	; 0x38
 8009756:	436a      	muls	r2, r5
 8009758:	189a      	adds	r2, r3, r2
 800975a:	5c51      	ldrb	r1, [r2, r1]
 800975c:	0209      	lsls	r1, r1, #8
 800975e:	4643      	mov	r3, r8
 8009760:	330e      	adds	r3, #14
 8009762:	5cd3      	ldrb	r3, [r2, r3]
 8009764:	18c9      	adds	r1, r1, r3
 8009766:	b289      	uxth	r1, r1
 8009768:	20eb      	movs	r0, #235	; 0xeb
 800976a:	f002 fa1b 	bl	800bba4 <EE_WriteVariable>
 800976e:	e7dc      	b.n	800972a <PxMessagingTask+0xc36>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009770:	4e5a      	ldr	r6, [pc, #360]	; (80098dc <PxMessagingTask+0xde8>)
 8009772:	2338      	movs	r3, #56	; 0x38
 8009774:	436b      	muls	r3, r5
 8009776:	18f6      	adds	r6, r6, r3
 8009778:	4643      	mov	r3, r8
 800977a:	5cf3      	ldrb	r3, [r6, r3]
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	4642      	mov	r2, r8
 8009780:	3201      	adds	r2, #1
 8009782:	5cb2      	ldrb	r2, [r6, r2]
 8009784:	0412      	lsls	r2, r2, #16
 8009786:	189b      	adds	r3, r3, r2
 8009788:	4642      	mov	r2, r8
 800978a:	3202      	adds	r2, #2
 800978c:	5cb2      	ldrb	r2, [r6, r2]
 800978e:	0212      	lsls	r2, r2, #8
 8009790:	189b      	adds	r3, r3, r2
 8009792:	4642      	mov	r2, r8
 8009794:	3203      	adds	r2, #3
 8009796:	5cb2      	ldrb	r2, [r6, r2]
 8009798:	189b      	adds	r3, r3, r2
 800979a:	9305      	str	r3, [sp, #20]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800979c:	4642      	mov	r2, r8
 800979e:	1d13      	adds	r3, r2, #4
 80097a0:	5cf3      	ldrb	r3, [r6, r3]
 80097a2:	061b      	lsls	r3, r3, #24
 80097a4:	3205      	adds	r2, #5
 80097a6:	5cb2      	ldrb	r2, [r6, r2]
 80097a8:	0412      	lsls	r2, r2, #16
 80097aa:	189b      	adds	r3, r3, r2
 80097ac:	4642      	mov	r2, r8
 80097ae:	3206      	adds	r2, #6
 80097b0:	5cb2      	ldrb	r2, [r6, r2]
 80097b2:	0212      	lsls	r2, r2, #8
 80097b4:	189b      	adds	r3, r3, r2
 80097b6:	4642      	mov	r2, r8
 80097b8:	3207      	adds	r2, #7
 80097ba:	5cb2      	ldrb	r2, [r6, r2]
 80097bc:	189a      	adds	r2, r3, r2
 80097be:	9209      	str	r2, [sp, #36]	; 0x24
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80097c0:	4640      	mov	r0, r8
 80097c2:	3009      	adds	r0, #9
 80097c4:	4642      	mov	r2, r8
 80097c6:	320b      	adds	r2, #11
 80097c8:	4643      	mov	r3, r8
 80097ca:	330a      	adds	r3, #10
 80097cc:	2108      	movs	r1, #8
 80097ce:	4441      	add	r1, r8
 80097d0:	468c      	mov	ip, r1
 80097d2:	3104      	adds	r1, #4
 80097d4:	5c77      	ldrb	r7, [r6, r1]
 80097d6:	5cf3      	ldrb	r3, [r6, r3]
 80097d8:	5cb2      	ldrb	r2, [r6, r2]
 80097da:	4941      	ldr	r1, [pc, #260]	; (80098e0 <PxMessagingTask+0xdec>)
 80097dc:	7809      	ldrb	r1, [r1, #0]
 80097de:	4688      	mov	r8, r1
 80097e0:	5c30      	ldrb	r0, [r6, r0]
 80097e2:	1e79      	subs	r1, r7, #1
 80097e4:	418f      	sbcs	r7, r1
 80097e6:	9703      	str	r7, [sp, #12]
 80097e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097ea:	9702      	str	r7, [sp, #8]
 80097ec:	9f05      	ldr	r7, [sp, #20]
 80097ee:	9701      	str	r7, [sp, #4]
 80097f0:	4667      	mov	r7, ip
 80097f2:	5df6      	ldrb	r6, [r6, r7]
 80097f4:	9600      	str	r6, [sp, #0]
 80097f6:	4641      	mov	r1, r8
 80097f8:	f7fe feda 	bl	80085b0 <StartScastDMAStream>
							break;
 80097fc:	f7ff f9d4 	bl	8008ba8 <PxMessagingTask+0xb4>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8009800:	4a36      	ldr	r2, [pc, #216]	; (80098dc <PxMessagingTask+0xde8>)
 8009802:	2138      	movs	r1, #56	; 0x38
 8009804:	4369      	muls	r1, r5
 8009806:	1852      	adds	r2, r2, r1
 8009808:	4641      	mov	r1, r8
 800980a:	5c52      	ldrb	r2, [r2, r1]
 800980c:	2a00      	cmp	r2, #0
 800980e:	d000      	beq.n	8009812 <PxMessagingTask+0xd1e>
 8009810:	e08f      	b.n	8009932 <PxMessagingTask+0xe3e>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009812:	3102      	adds	r1, #2
 8009814:	4a31      	ldr	r2, [pc, #196]	; (80098dc <PxMessagingTask+0xde8>)
 8009816:	2338      	movs	r3, #56	; 0x38
 8009818:	436b      	muls	r3, r5
 800981a:	18d2      	adds	r2, r2, r3
 800981c:	5c53      	ldrb	r3, [r2, r1]
 800981e:	061b      	lsls	r3, r3, #24
 8009820:	4641      	mov	r1, r8
 8009822:	3103      	adds	r1, #3
 8009824:	5c51      	ldrb	r1, [r2, r1]
 8009826:	0409      	lsls	r1, r1, #16
 8009828:	185b      	adds	r3, r3, r1
 800982a:	4641      	mov	r1, r8
 800982c:	3104      	adds	r1, #4
 800982e:	5c51      	ldrb	r1, [r2, r1]
 8009830:	0209      	lsls	r1, r1, #8
 8009832:	185b      	adds	r3, r3, r1
 8009834:	4641      	mov	r1, r8
 8009836:	3105      	adds	r1, #5
 8009838:	5c51      	ldrb	r1, [r2, r1]
 800983a:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 800983c:	4641      	mov	r1, r8
 800983e:	3101      	adds	r1, #1
 8009840:	5c52      	ldrb	r2, [r2, r1]
 8009842:	3a01      	subs	r2, #1
 8009844:	b2d1      	uxtb	r1, r2
 8009846:	2907      	cmp	r1, #7
 8009848:	d901      	bls.n	800984e <PxMessagingTask+0xd5a>
 800984a:	f7ff f9ad 	bl	8008ba8 <PxMessagingTask+0xb4>
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	0092      	lsls	r2, r2, #2
 8009852:	4924      	ldr	r1, [pc, #144]	; (80098e4 <PxMessagingTask+0xdf0>)
 8009854:	588a      	ldr	r2, [r1, r2]
 8009856:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	4b23      	ldr	r3, [pc, #140]	; (80098e8 <PxMessagingTask+0xdf4>)
 800985c:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800985e:	2201      	movs	r2, #1
 8009860:	211f      	movs	r1, #31
 8009862:	4658      	mov	r0, fp
 8009864:	f7fe fe7e 	bl	8008564 <SendMessageToModule>
										break;
 8009868:	f7ff f99e 	bl	8008ba8 <PxMessagingTask+0xb4>
										messageParams[0] =*(__IO int8_t* )temp32;
 800986c:	781a      	ldrb	r2, [r3, #0]
 800986e:	4b1e      	ldr	r3, [pc, #120]	; (80098e8 <PxMessagingTask+0xdf4>)
 8009870:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009872:	2201      	movs	r2, #1
 8009874:	211f      	movs	r1, #31
 8009876:	4658      	mov	r0, fp
 8009878:	f7fe fe74 	bl	8008564 <SendMessageToModule>
										break;
 800987c:	f7ff f994 	bl	8008ba8 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009880:	8819      	ldrh	r1, [r3, #0]
 8009882:	4a19      	ldr	r2, [pc, #100]	; (80098e8 <PxMessagingTask+0xdf4>)
 8009884:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	0a1b      	lsrs	r3, r3, #8
 800988a:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800988c:	2202      	movs	r2, #2
 800988e:	211f      	movs	r1, #31
 8009890:	4658      	mov	r0, fp
 8009892:	f7fe fe67 	bl	8008564 <SendMessageToModule>
										break;
 8009896:	f7ff f987 	bl	8008ba8 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800989a:	8819      	ldrh	r1, [r3, #0]
 800989c:	4a12      	ldr	r2, [pc, #72]	; (80098e8 <PxMessagingTask+0xdf4>)
 800989e:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	121b      	asrs	r3, r3, #8
 80098a6:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 80098a8:	2202      	movs	r2, #2
 80098aa:	211f      	movs	r1, #31
 80098ac:	4658      	mov	r0, fp
 80098ae:	f7fe fe59 	bl	8008564 <SendMessageToModule>
										break;
 80098b2:	f7ff f979 	bl	8008ba8 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80098b6:	6819      	ldr	r1, [r3, #0]
 80098b8:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <PxMessagingTask+0xdf4>)
 80098ba:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80098bc:	6819      	ldr	r1, [r3, #0]
 80098be:	0a09      	lsrs	r1, r1, #8
 80098c0:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	0c09      	lsrs	r1, r1, #16
 80098c6:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	0e1b      	lsrs	r3, r3, #24
 80098cc:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80098ce:	2204      	movs	r2, #4
 80098d0:	211f      	movs	r1, #31
 80098d2:	4658      	mov	r0, fp
 80098d4:	f7fe fe46 	bl	8008564 <SendMessageToModule>
										break;
 80098d8:	f7ff f966 	bl	8008ba8 <PxMessagingTask+0xb4>
 80098dc:	20000a38 	.word	0x20000a38
 80098e0:	200007a0 	.word	0x200007a0
 80098e4:	08019b94 	.word	0x08019b94
 80098e8:	2000086c 	.word	0x2000086c
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80098ec:	6819      	ldr	r1, [r3, #0]
 80098ee:	4aeb      	ldr	r2, [pc, #940]	; (8009c9c <PxMessagingTask+0x11a8>)
 80098f0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80098f2:	6819      	ldr	r1, [r3, #0]
 80098f4:	1209      	asrs	r1, r1, #8
 80098f6:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80098f8:	6819      	ldr	r1, [r3, #0]
 80098fa:	1409      	asrs	r1, r1, #16
 80098fc:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	0e1b      	lsrs	r3, r3, #24
 8009902:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009904:	2204      	movs	r2, #4
 8009906:	211f      	movs	r1, #31
 8009908:	4658      	mov	r0, fp
 800990a:	f7fe fe2b 	bl	8008564 <SendMessageToModule>
										break;
 800990e:	f7ff f94b 	bl	8008ba8 <PxMessagingTask+0xb4>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009912:	7819      	ldrb	r1, [r3, #0]
 8009914:	4ae1      	ldr	r2, [pc, #900]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009916:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009918:	7859      	ldrb	r1, [r3, #1]
 800991a:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800991c:	7899      	ldrb	r1, [r3, #2]
 800991e:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009920:	78db      	ldrb	r3, [r3, #3]
 8009922:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009924:	2208      	movs	r2, #8
 8009926:	211f      	movs	r1, #31
 8009928:	4658      	mov	r0, fp
 800992a:	f7fe fe1b 	bl	8008564 <SendMessageToModule>
										break; // You cannot bitwise floats
 800992e:	f7ff f93b 	bl	8008ba8 <PxMessagingTask+0xb4>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8009932:	2a02      	cmp	r2, #2
 8009934:	d01b      	beq.n	800996e <PxMessagingTask+0xe7a>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8009936:	d801      	bhi.n	800993c <PxMessagingTask+0xe48>
 8009938:	f7ff f936 	bl	8008ba8 <PxMessagingTask+0xb4>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800993c:	3a04      	subs	r2, #4
 800993e:	4bd8      	ldr	r3, [pc, #864]	; (8009ca0 <PxMessagingTask+0x11ac>)
 8009940:	0092      	lsls	r2, r2, #2
 8009942:	58d1      	ldr	r1, [r2, r3]
 8009944:	220f      	movs	r2, #15
 8009946:	400a      	ands	r2, r1
 8009948:	4bd4      	ldr	r3, [pc, #848]	; (8009c9c <PxMessagingTask+0x11a8>)
 800994a:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800994c:	d100      	bne.n	8009950 <PxMessagingTask+0xe5c>
 800994e:	e09e      	b.n	8009a8e <PxMessagingTask+0xf9a>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009950:	0c09      	lsrs	r1, r1, #16
 8009952:	2380      	movs	r3, #128	; 0x80
 8009954:	059b      	lsls	r3, r3, #22
 8009956:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8009958:	3a01      	subs	r2, #1
 800995a:	b2d0      	uxtb	r0, r2
 800995c:	2807      	cmp	r0, #7
 800995e:	d901      	bls.n	8009964 <PxMessagingTask+0xe70>
 8009960:	f7ff f922 	bl	8008ba8 <PxMessagingTask+0xb4>
 8009964:	b2d2      	uxtb	r2, r2
 8009966:	0092      	lsls	r2, r2, #2
 8009968:	48ce      	ldr	r0, [pc, #824]	; (8009ca4 <PxMessagingTask+0x11b0>)
 800996a:	5882      	ldr	r2, [r0, r2]
 800996c:	4697      	mov	pc, r2
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800996e:	3b01      	subs	r3, #1
 8009970:	49cd      	ldr	r1, [pc, #820]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009972:	3236      	adds	r2, #54	; 0x36
 8009974:	436a      	muls	r2, r5
 8009976:	1888      	adds	r0, r1, r2
 8009978:	2600      	movs	r6, #0
 800997a:	54c6      	strb	r6, [r0, r3]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800997c:	4643      	mov	r3, r8
 800997e:	3301      	adds	r3, #1
 8009980:	18d2      	adds	r2, r2, r3
 8009982:	1850      	adds	r0, r2, r1
 8009984:	f7f9 fff8 	bl	8003978 <IsModuleParameter>
 8009988:	9007      	str	r0, [sp, #28]
								if(temp == 0){ // Parameter does not exist
 800998a:	42b0      	cmp	r0, r6
 800998c:	d013      	beq.n	80099b6 <PxMessagingTask+0xec2>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800998e:	3801      	subs	r0, #1
 8009990:	4ac6      	ldr	r2, [pc, #792]	; (8009cac <PxMessagingTask+0x11b8>)
 8009992:	210c      	movs	r1, #12
 8009994:	4341      	muls	r1, r0
 8009996:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009998:	1852      	adds	r2, r2, r1
 800999a:	7912      	ldrb	r2, [r2, #4]
 800999c:	49bf      	ldr	r1, [pc, #764]	; (8009c9c <PxMessagingTask+0x11a8>)
 800999e:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 80099a0:	3a01      	subs	r2, #1
 80099a2:	b2d1      	uxtb	r1, r2
 80099a4:	2907      	cmp	r1, #7
 80099a6:	d901      	bls.n	80099ac <PxMessagingTask+0xeb8>
 80099a8:	f7ff f8fe 	bl	8008ba8 <PxMessagingTask+0xb4>
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	0092      	lsls	r2, r2, #2
 80099b0:	49bf      	ldr	r1, [pc, #764]	; (8009cb0 <PxMessagingTask+0x11bc>)
 80099b2:	588a      	ldr	r2, [r1, r2]
 80099b4:	4697      	mov	pc, r2
									SendMessageToModule(src,
 80099b6:	2201      	movs	r2, #1
 80099b8:	211f      	movs	r1, #31
 80099ba:	4658      	mov	r0, fp
 80099bc:	f7fe fdd2 	bl	8008564 <SendMessageToModule>
 80099c0:	f7ff f8f2 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )temp32;
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	4bb5      	ldr	r3, [pc, #724]	; (8009c9c <PxMessagingTask+0x11a8>)
 80099c8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80099ca:	2202      	movs	r2, #2
 80099cc:	211f      	movs	r1, #31
 80099ce:	4658      	mov	r0, fp
 80099d0:	f7fe fdc8 	bl	8008564 <SendMessageToModule>
											break;
 80099d4:	f7ff f8e8 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO int8_t* )temp32;
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	4bb0      	ldr	r3, [pc, #704]	; (8009c9c <PxMessagingTask+0x11a8>)
 80099dc:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80099de:	2202      	movs	r2, #2
 80099e0:	211f      	movs	r1, #31
 80099e2:	4658      	mov	r0, fp
 80099e4:	f7fe fdbe 	bl	8008564 <SendMessageToModule>
											break;
 80099e8:	f7ff f8de 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80099ec:	8819      	ldrh	r1, [r3, #0]
 80099ee:	4aab      	ldr	r2, [pc, #684]	; (8009c9c <PxMessagingTask+0x11a8>)
 80099f0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	0a1b      	lsrs	r3, r3, #8
 80099f6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80099f8:	2203      	movs	r2, #3
 80099fa:	211f      	movs	r1, #31
 80099fc:	4658      	mov	r0, fp
 80099fe:	f7fe fdb1 	bl	8008564 <SendMessageToModule>
											break;
 8009a02:	f7ff f8d1 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009a06:	8819      	ldrh	r1, [r3, #0]
 8009a08:	4aa4      	ldr	r2, [pc, #656]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009a0a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	121b      	asrs	r3, r3, #8
 8009a12:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009a14:	2203      	movs	r2, #3
 8009a16:	211f      	movs	r1, #31
 8009a18:	4658      	mov	r0, fp
 8009a1a:	f7fe fda3 	bl	8008564 <SendMessageToModule>
											break;
 8009a1e:	f7ff f8c3 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	4a9d      	ldr	r2, [pc, #628]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009a26:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009a28:	6819      	ldr	r1, [r3, #0]
 8009a2a:	0a09      	lsrs	r1, r1, #8
 8009a2c:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	0c09      	lsrs	r1, r1, #16
 8009a32:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	0e1b      	lsrs	r3, r3, #24
 8009a38:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009a3a:	2205      	movs	r2, #5
 8009a3c:	211f      	movs	r1, #31
 8009a3e:	4658      	mov	r0, fp
 8009a40:	f7fe fd90 	bl	8008564 <SendMessageToModule>
											break;
 8009a44:	f7ff f8b0 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	4a94      	ldr	r2, [pc, #592]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009a4c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	1209      	asrs	r1, r1, #8
 8009a52:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009a54:	6819      	ldr	r1, [r3, #0]
 8009a56:	1409      	asrs	r1, r1, #16
 8009a58:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	0e1b      	lsrs	r3, r3, #24
 8009a5e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009a60:	2205      	movs	r2, #5
 8009a62:	211f      	movs	r1, #31
 8009a64:	4658      	mov	r0, fp
 8009a66:	f7fe fd7d 	bl	8008564 <SendMessageToModule>
											break;
 8009a6a:	f7ff f89d 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009a6e:	7819      	ldrb	r1, [r3, #0]
 8009a70:	4a8a      	ldr	r2, [pc, #552]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009a72:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009a74:	7859      	ldrb	r1, [r3, #1]
 8009a76:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009a78:	7899      	ldrb	r1, [r3, #2]
 8009a7a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009a7c:	78db      	ldrb	r3, [r3, #3]
 8009a7e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009a80:	2209      	movs	r2, #9
 8009a82:	211f      	movs	r1, #31
 8009a84:	4658      	mov	r0, fp
 8009a86:	f7fe fd6d 	bl	8008564 <SendMessageToModule>
											break;
 8009a8a:	f7ff f88d 	bl	8008ba8 <PxMessagingTask+0xb4>
									SendMessageToModule(src,
 8009a8e:	3201      	adds	r2, #1
 8009a90:	211f      	movs	r1, #31
 8009a92:	4658      	mov	r0, fp
 8009a94:	f7fe fd66 	bl	8008564 <SendMessageToModule>
 8009a98:	f7ff f886 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009a9c:	781a      	ldrb	r2, [r3, #0]
 8009a9e:	4b7f      	ldr	r3, [pc, #508]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009aa0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	211f      	movs	r1, #31
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	f7fe fd5c 	bl	8008564 <SendMessageToModule>
											break;
 8009aac:	f7ff f87c 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009ab0:	781a      	ldrb	r2, [r3, #0]
 8009ab2:	4b7a      	ldr	r3, [pc, #488]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009ab4:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	211f      	movs	r1, #31
 8009aba:	4658      	mov	r0, fp
 8009abc:	f7fe fd52 	bl	8008564 <SendMessageToModule>
											break;
 8009ac0:	f7ff f872 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009ac4:	8819      	ldrh	r1, [r3, #0]
 8009ac6:	4a75      	ldr	r2, [pc, #468]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009ac8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	0a1b      	lsrs	r3, r3, #8
 8009ace:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009ad0:	2203      	movs	r2, #3
 8009ad2:	211f      	movs	r1, #31
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	f7fe fd45 	bl	8008564 <SendMessageToModule>
											break;
 8009ada:	f7ff f865 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009ade:	8819      	ldrh	r1, [r3, #0]
 8009ae0:	4a6e      	ldr	r2, [pc, #440]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009ae2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	b21b      	sxth	r3, r3
 8009ae8:	121b      	asrs	r3, r3, #8
 8009aea:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009aec:	2203      	movs	r2, #3
 8009aee:	211f      	movs	r1, #31
 8009af0:	4658      	mov	r0, fp
 8009af2:	f7fe fd37 	bl	8008564 <SendMessageToModule>
											break;
 8009af6:	f7ff f857 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	4a67      	ldr	r2, [pc, #412]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009afe:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009b00:	6819      	ldr	r1, [r3, #0]
 8009b02:	0a09      	lsrs	r1, r1, #8
 8009b04:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009b06:	6819      	ldr	r1, [r3, #0]
 8009b08:	0c09      	lsrs	r1, r1, #16
 8009b0a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	0e1b      	lsrs	r3, r3, #24
 8009b10:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009b12:	2205      	movs	r2, #5
 8009b14:	211f      	movs	r1, #31
 8009b16:	4658      	mov	r0, fp
 8009b18:	f7fe fd24 	bl	8008564 <SendMessageToModule>
											break;
 8009b1c:	f7ff f844 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009b20:	6819      	ldr	r1, [r3, #0]
 8009b22:	4a5e      	ldr	r2, [pc, #376]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009b24:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009b26:	6819      	ldr	r1, [r3, #0]
 8009b28:	1209      	asrs	r1, r1, #8
 8009b2a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009b2c:	6819      	ldr	r1, [r3, #0]
 8009b2e:	1409      	asrs	r1, r1, #16
 8009b30:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	0e1b      	lsrs	r3, r3, #24
 8009b36:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009b38:	2205      	movs	r2, #5
 8009b3a:	211f      	movs	r1, #31
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	f7fe fd11 	bl	8008564 <SendMessageToModule>
											break;
 8009b42:	f7ff f831 	bl	8008ba8 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009b46:	781a      	ldrb	r2, [r3, #0]
 8009b48:	4b54      	ldr	r3, [pc, #336]	; (8009c9c <PxMessagingTask+0x11a8>)
 8009b4a:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009b4c:	4a59      	ldr	r2, [pc, #356]	; (8009cb4 <PxMessagingTask+0x11c0>)
 8009b4e:	188a      	adds	r2, r1, r2
 8009b50:	7812      	ldrb	r2, [r2, #0]
 8009b52:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009b54:	4a58      	ldr	r2, [pc, #352]	; (8009cb8 <PxMessagingTask+0x11c4>)
 8009b56:	188a      	adds	r2, r1, r2
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009b5c:	4a57      	ldr	r2, [pc, #348]	; (8009cbc <PxMessagingTask+0x11c8>)
 8009b5e:	4694      	mov	ip, r2
 8009b60:	4461      	add	r1, ip
 8009b62:	780a      	ldrb	r2, [r1, #0]
 8009b64:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 8009b66:	2209      	movs	r2, #9
 8009b68:	211f      	movs	r1, #31
 8009b6a:	4658      	mov	r0, fp
 8009b6c:	f7fe fcfa 	bl	8008564 <SendMessageToModule>
											break;
 8009b70:	f7ff f81a 	bl	8008ba8 <PxMessagingTask+0xb4>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009b74:	4b52      	ldr	r3, [pc, #328]	; (8009cc0 <PxMessagingTask+0x11cc>)
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	6859      	ldr	r1, [r3, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	4252      	negs	r2, r2
 8009b7e:	17d3      	asrs	r3, r2, #31
 8009b80:	1812      	adds	r2, r2, r0
 8009b82:	414b      	adcs	r3, r1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d014      	beq.n	8009bb2 <PxMessagingTask+0x10be>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 8009b88:	0003      	movs	r3, r0
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	d126      	bne.n	8009bdc <PxMessagingTask+0x10e8>
								switch(remoteBuffer) // Requested format
 8009b8e:	2601      	movs	r6, #1
 8009b90:	4276      	negs	r6, r6
 8009b92:	17f7      	asrs	r7, r6, #31
 8009b94:	1836      	adds	r6, r6, r0
 8009b96:	414f      	adcs	r7, r1
 8009b98:	2207      	movs	r2, #7
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	0030      	movs	r0, r6
 8009b9e:	0039      	movs	r1, r7
 8009ba0:	f7f6 fcc4 	bl	800052c <__aeabi_ulcmp>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	2801      	cmp	r0, #1
 8009ba8:	d818      	bhi.n	8009bdc <PxMessagingTask+0x10e8>
 8009baa:	00b6      	lsls	r6, r6, #2
 8009bac:	4b45      	ldr	r3, [pc, #276]	; (8009cc4 <PxMessagingTask+0x11d0>)
 8009bae:	599b      	ldr	r3, [r3, r6]
 8009bb0:	469f      	mov	pc, r3
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <PxMessagingTask+0x10c6>
 8009bb6:	2a01      	cmp	r2, #1
 8009bb8:	d8e6      	bhi.n	8009b88 <PxMessagingTask+0x1094>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009bba:	4b3b      	ldr	r3, [pc, #236]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009bbc:	2238      	movs	r2, #56	; 0x38
 8009bbe:	436a      	muls	r2, r5
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	5c9b      	ldrb	r3, [r3, r2]
 8009bc6:	4a40      	ldr	r2, [pc, #256]	; (8009cc8 <PxMessagingTask+0x11d4>)
 8009bc8:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	d806      	bhi.n	8009bdc <PxMessagingTask+0x10e8>
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4a3e      	ldr	r2, [pc, #248]	; (8009ccc <PxMessagingTask+0x11d8>)
 8009bd2:	58d3      	ldr	r3, [r2, r3]
 8009bd4:	469f      	mov	pc, r3
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009bd6:	4b3e      	ldr	r3, [pc, #248]	; (8009cd0 <PxMessagingTask+0x11dc>)
 8009bd8:	2210      	movs	r2, #16
 8009bda:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009bdc:	4b3c      	ldr	r3, [pc, #240]	; (8009cd0 <PxMessagingTask+0x11dc>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d101      	bne.n	8009be8 <PxMessagingTask+0x10f4>
 8009be4:	f7fe ffe0 	bl	8008ba8 <PxMessagingTask+0xb4>
								responseStatus =BOS_OK;
 8009be8:	4b39      	ldr	r3, [pc, #228]	; (8009cd0 <PxMessagingTask+0x11dc>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	f7fe ffdb 	bl	8008ba8 <PxMessagingTask+0xb4>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	3101      	adds	r1, #1
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009bf8:	2238      	movs	r2, #56	; 0x38
 8009bfa:	436a      	muls	r2, r5
 8009bfc:	189b      	adds	r3, r3, r2
 8009bfe:	5c5a      	ldrb	r2, [r3, r1]
 8009c00:	4b2f      	ldr	r3, [pc, #188]	; (8009cc0 <PxMessagingTask+0x11cc>)
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	605a      	str	r2, [r3, #4]
										break;
 8009c08:	e7e8      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009c0a:	4641      	mov	r1, r8
 8009c0c:	3101      	adds	r1, #1
 8009c0e:	4b26      	ldr	r3, [pc, #152]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009c10:	2238      	movs	r2, #56	; 0x38
 8009c12:	436a      	muls	r2, r5
 8009c14:	189b      	adds	r3, r3, r2
 8009c16:	565a      	ldrsb	r2, [r3, r1]
 8009c18:	17d1      	asrs	r1, r2, #31
 8009c1a:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <PxMessagingTask+0x11cc>)
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	6059      	str	r1, [r3, #4]
										break;
 8009c20:	e7dc      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 8009c22:	4643      	mov	r3, r8
 8009c24:	1c59      	adds	r1, r3, #1
 8009c26:	4b20      	ldr	r3, [pc, #128]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009c28:	2238      	movs	r2, #56	; 0x38
 8009c2a:	436a      	muls	r2, r5
 8009c2c:	189b      	adds	r3, r3, r2
 8009c2e:	5c5a      	ldrb	r2, [r3, r1]
 8009c30:	4641      	mov	r1, r8
 8009c32:	3102      	adds	r1, #2
 8009c34:	5c5b      	ldrb	r3, [r3, r1]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	18d3      	adds	r3, r2, r3
 8009c3a:	4a21      	ldr	r2, [pc, #132]	; (8009cc0 <PxMessagingTask+0x11cc>)
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6053      	str	r3, [r2, #4]
										break;
 8009c42:	e7cb      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009c44:	4643      	mov	r3, r8
 8009c46:	1c59      	adds	r1, r3, #1
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009c4a:	2238      	movs	r2, #56	; 0x38
 8009c4c:	436a      	muls	r2, r5
 8009c4e:	189b      	adds	r3, r3, r2
 8009c50:	5c5a      	ldrb	r2, [r3, r1]
 8009c52:	4641      	mov	r1, r8
 8009c54:	3102      	adds	r1, #2
 8009c56:	5c5b      	ldrb	r3, [r3, r1]
 8009c58:	021b      	lsls	r3, r3, #8
 8009c5a:	18d3      	adds	r3, r2, r3
 8009c5c:	4a18      	ldr	r2, [pc, #96]	; (8009cc0 <PxMessagingTask+0x11cc>)
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	6053      	str	r3, [r2, #4]
										break;
 8009c64:	e7ba      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009c66:	4643      	mov	r3, r8
 8009c68:	1c59      	adds	r1, r3, #1
 8009c6a:	4a0f      	ldr	r2, [pc, #60]	; (8009ca8 <PxMessagingTask+0x11b4>)
 8009c6c:	2338      	movs	r3, #56	; 0x38
 8009c6e:	436b      	muls	r3, r5
 8009c70:	18d2      	adds	r2, r2, r3
 8009c72:	5c53      	ldrb	r3, [r2, r1]
 8009c74:	4641      	mov	r1, r8
 8009c76:	3102      	adds	r1, #2
 8009c78:	5c51      	ldrb	r1, [r2, r1]
 8009c7a:	0209      	lsls	r1, r1, #8
 8009c7c:	185b      	adds	r3, r3, r1
 8009c7e:	4641      	mov	r1, r8
 8009c80:	3103      	adds	r1, #3
 8009c82:	5c51      	ldrb	r1, [r2, r1]
 8009c84:	0409      	lsls	r1, r1, #16
 8009c86:	185b      	adds	r3, r3, r1
 8009c88:	4641      	mov	r1, r8
 8009c8a:	3104      	adds	r1, #4
 8009c8c:	5c52      	ldrb	r2, [r2, r1]
 8009c8e:	0612      	lsls	r2, r2, #24
 8009c90:	189b      	adds	r3, r3, r2
 8009c92:	4a0b      	ldr	r2, [pc, #44]	; (8009cc0 <PxMessagingTask+0x11cc>)
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	2300      	movs	r3, #0
 8009c98:	6053      	str	r3, [r2, #4]
										break;
 8009c9a:	e79f      	b.n	8009bdc <PxMessagingTask+0x10e8>
 8009c9c:	2000086c 	.word	0x2000086c
 8009ca0:	20000978 	.word	0x20000978
 8009ca4:	08019bb4 	.word	0x08019bb4
 8009ca8:	20000a38 	.word	0x20000a38
 8009cac:	20000094 	.word	0x20000094
 8009cb0:	08019bd4 	.word	0x08019bd4
 8009cb4:	20000001 	.word	0x20000001
 8009cb8:	20000002 	.word	0x20000002
 8009cbc:	20000003 	.word	0x20000003
 8009cc0:	20000970 	.word	0x20000970
 8009cc4:	08019bf4 	.word	0x08019bf4
 8009cc8:	20000032 	.word	0x20000032
 8009ccc:	08019c14 	.word	0x08019c14
 8009cd0:	2000096c 	.word	0x2000096c
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009cd4:	4643      	mov	r3, r8
 8009cd6:	1c59      	adds	r1, r3, #1
 8009cd8:	4ad6      	ldr	r2, [pc, #856]	; (800a034 <PxMessagingTask+0x1540>)
 8009cda:	2338      	movs	r3, #56	; 0x38
 8009cdc:	436b      	muls	r3, r5
 8009cde:	18d2      	adds	r2, r2, r3
 8009ce0:	5c53      	ldrb	r3, [r2, r1]
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	3102      	adds	r1, #2
 8009ce6:	5c51      	ldrb	r1, [r2, r1]
 8009ce8:	0209      	lsls	r1, r1, #8
 8009cea:	185b      	adds	r3, r3, r1
 8009cec:	4641      	mov	r1, r8
 8009cee:	3103      	adds	r1, #3
 8009cf0:	5c51      	ldrb	r1, [r2, r1]
 8009cf2:	0409      	lsls	r1, r1, #16
 8009cf4:	185b      	adds	r3, r3, r1
 8009cf6:	4641      	mov	r1, r8
 8009cf8:	3104      	adds	r1, #4
 8009cfa:	5c52      	ldrb	r2, [r2, r1]
 8009cfc:	0612      	lsls	r2, r2, #24
 8009cfe:	189b      	adds	r3, r3, r2
 8009d00:	17d9      	asrs	r1, r3, #31
 8009d02:	4acd      	ldr	r2, [pc, #820]	; (800a038 <PxMessagingTask+0x1544>)
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	6051      	str	r1, [r2, #4]
										break;
 8009d08:	e768      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009d0a:	4643      	mov	r3, r8
 8009d0c:	1c59      	adds	r1, r3, #1
 8009d0e:	4ac9      	ldr	r2, [pc, #804]	; (800a034 <PxMessagingTask+0x1540>)
 8009d10:	2338      	movs	r3, #56	; 0x38
 8009d12:	436b      	muls	r3, r5
 8009d14:	18d2      	adds	r2, r2, r3
 8009d16:	5c53      	ldrb	r3, [r2, r1]
 8009d18:	4641      	mov	r1, r8
 8009d1a:	3102      	adds	r1, #2
 8009d1c:	5c51      	ldrb	r1, [r2, r1]
 8009d1e:	0209      	lsls	r1, r1, #8
 8009d20:	185b      	adds	r3, r3, r1
 8009d22:	4641      	mov	r1, r8
 8009d24:	3103      	adds	r1, #3
 8009d26:	5c51      	ldrb	r1, [r2, r1]
 8009d28:	0409      	lsls	r1, r1, #16
 8009d2a:	185b      	adds	r3, r3, r1
 8009d2c:	4641      	mov	r1, r8
 8009d2e:	3104      	adds	r1, #4
 8009d30:	5c52      	ldrb	r2, [r2, r1]
 8009d32:	0612      	lsls	r2, r2, #24
 8009d34:	189b      	adds	r3, r3, r2
 8009d36:	4ac0      	ldr	r2, [pc, #768]	; (800a038 <PxMessagingTask+0x1544>)
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6053      	str	r3, [r2, #4]
										break;
 8009d3e:	e74d      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =cMessage[port - 1][shift];
 8009d40:	4bbc      	ldr	r3, [pc, #752]	; (800a034 <PxMessagingTask+0x1540>)
 8009d42:	2238      	movs	r2, #56	; 0x38
 8009d44:	436a      	muls	r2, r5
 8009d46:	189b      	adds	r3, r3, r2
 8009d48:	4642      	mov	r2, r8
 8009d4a:	5c9a      	ldrb	r2, [r3, r2]
 8009d4c:	4bba      	ldr	r3, [pc, #744]	; (800a038 <PxMessagingTask+0x1544>)
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	2200      	movs	r2, #0
 8009d52:	605a      	str	r2, [r3, #4]
										break;
 8009d54:	e742      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 8009d56:	4bb7      	ldr	r3, [pc, #732]	; (800a034 <PxMessagingTask+0x1540>)
 8009d58:	2238      	movs	r2, #56	; 0x38
 8009d5a:	436a      	muls	r2, r5
 8009d5c:	189b      	adds	r3, r3, r2
 8009d5e:	4642      	mov	r2, r8
 8009d60:	569a      	ldrsb	r2, [r3, r2]
 8009d62:	17d1      	asrs	r1, r2, #31
 8009d64:	4bb4      	ldr	r3, [pc, #720]	; (800a038 <PxMessagingTask+0x1544>)
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	6059      	str	r1, [r3, #4]
										break;
 8009d6a:	e737      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 8009d6c:	4bb1      	ldr	r3, [pc, #708]	; (800a034 <PxMessagingTask+0x1540>)
 8009d6e:	2238      	movs	r2, #56	; 0x38
 8009d70:	436a      	muls	r2, r5
 8009d72:	189b      	adds	r3, r3, r2
 8009d74:	4642      	mov	r2, r8
 8009d76:	5c9a      	ldrb	r2, [r3, r2]
 8009d78:	4641      	mov	r1, r8
 8009d7a:	3101      	adds	r1, #1
 8009d7c:	5c5b      	ldrb	r3, [r3, r1]
 8009d7e:	021b      	lsls	r3, r3, #8
 8009d80:	18d3      	adds	r3, r2, r3
 8009d82:	4aad      	ldr	r2, [pc, #692]	; (800a038 <PxMessagingTask+0x1544>)
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	2300      	movs	r3, #0
 8009d88:	6053      	str	r3, [r2, #4]
										break;
 8009d8a:	e727      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 8009d8c:	4ba9      	ldr	r3, [pc, #676]	; (800a034 <PxMessagingTask+0x1540>)
 8009d8e:	2238      	movs	r2, #56	; 0x38
 8009d90:	436a      	muls	r2, r5
 8009d92:	189b      	adds	r3, r3, r2
 8009d94:	4642      	mov	r2, r8
 8009d96:	5c9a      	ldrb	r2, [r3, r2]
 8009d98:	4641      	mov	r1, r8
 8009d9a:	3101      	adds	r1, #1
 8009d9c:	5c5b      	ldrb	r3, [r3, r1]
 8009d9e:	021b      	lsls	r3, r3, #8
 8009da0:	18d3      	adds	r3, r2, r3
 8009da2:	4aa5      	ldr	r2, [pc, #660]	; (800a038 <PxMessagingTask+0x1544>)
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6053      	str	r3, [r2, #4]
										break;
 8009daa:	e717      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 8009dac:	4aa1      	ldr	r2, [pc, #644]	; (800a034 <PxMessagingTask+0x1540>)
 8009dae:	2338      	movs	r3, #56	; 0x38
 8009db0:	436b      	muls	r3, r5
 8009db2:	18d2      	adds	r2, r2, r3
 8009db4:	4643      	mov	r3, r8
 8009db6:	5cd3      	ldrb	r3, [r2, r3]
 8009db8:	4641      	mov	r1, r8
 8009dba:	3101      	adds	r1, #1
 8009dbc:	5c51      	ldrb	r1, [r2, r1]
 8009dbe:	0209      	lsls	r1, r1, #8
 8009dc0:	185b      	adds	r3, r3, r1
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	3102      	adds	r1, #2
 8009dc6:	5c51      	ldrb	r1, [r2, r1]
 8009dc8:	0409      	lsls	r1, r1, #16
 8009dca:	185b      	adds	r3, r3, r1
 8009dcc:	4641      	mov	r1, r8
 8009dce:	3103      	adds	r1, #3
 8009dd0:	5c52      	ldrb	r2, [r2, r1]
 8009dd2:	0612      	lsls	r2, r2, #24
 8009dd4:	189b      	adds	r3, r3, r2
 8009dd6:	4a98      	ldr	r2, [pc, #608]	; (800a038 <PxMessagingTask+0x1544>)
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6053      	str	r3, [r2, #4]
										break;
 8009dde:	e6fd      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 8009de0:	4a94      	ldr	r2, [pc, #592]	; (800a034 <PxMessagingTask+0x1540>)
 8009de2:	2338      	movs	r3, #56	; 0x38
 8009de4:	436b      	muls	r3, r5
 8009de6:	18d2      	adds	r2, r2, r3
 8009de8:	4643      	mov	r3, r8
 8009dea:	5cd3      	ldrb	r3, [r2, r3]
 8009dec:	4641      	mov	r1, r8
 8009dee:	3101      	adds	r1, #1
 8009df0:	5c51      	ldrb	r1, [r2, r1]
 8009df2:	0209      	lsls	r1, r1, #8
 8009df4:	185b      	adds	r3, r3, r1
 8009df6:	4641      	mov	r1, r8
 8009df8:	3102      	adds	r1, #2
 8009dfa:	5c51      	ldrb	r1, [r2, r1]
 8009dfc:	0409      	lsls	r1, r1, #16
 8009dfe:	185b      	adds	r3, r3, r1
 8009e00:	4641      	mov	r1, r8
 8009e02:	3103      	adds	r1, #3
 8009e04:	5c52      	ldrb	r2, [r2, r1]
 8009e06:	0612      	lsls	r2, r2, #24
 8009e08:	189b      	adds	r3, r3, r2
 8009e0a:	17d9      	asrs	r1, r3, #31
 8009e0c:	4a8a      	ldr	r2, [pc, #552]	; (800a038 <PxMessagingTask+0x1544>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	6051      	str	r1, [r2, #4]
										break;
 8009e12:	e6e3      	b.n	8009bdc <PxMessagingTask+0x10e8>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 8009e14:	4a87      	ldr	r2, [pc, #540]	; (800a034 <PxMessagingTask+0x1540>)
 8009e16:	2338      	movs	r3, #56	; 0x38
 8009e18:	436b      	muls	r3, r5
 8009e1a:	18d2      	adds	r2, r2, r3
 8009e1c:	4643      	mov	r3, r8
 8009e1e:	5cd3      	ldrb	r3, [r2, r3]
 8009e20:	4641      	mov	r1, r8
 8009e22:	3101      	adds	r1, #1
 8009e24:	5c51      	ldrb	r1, [r2, r1]
 8009e26:	0209      	lsls	r1, r1, #8
 8009e28:	185b      	adds	r3, r3, r1
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	3102      	adds	r1, #2
 8009e2e:	5c51      	ldrb	r1, [r2, r1]
 8009e30:	0409      	lsls	r1, r1, #16
 8009e32:	185b      	adds	r3, r3, r1
 8009e34:	4641      	mov	r1, r8
 8009e36:	3103      	adds	r1, #3
 8009e38:	5c52      	ldrb	r2, [r2, r1]
 8009e3a:	0612      	lsls	r2, r2, #24
 8009e3c:	189b      	adds	r3, r3, r2
 8009e3e:	4a7e      	ldr	r2, [pc, #504]	; (800a038 <PxMessagingTask+0x1544>)
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	2300      	movs	r3, #0
 8009e44:	6053      	str	r3, [r2, #4]
										break;
 8009e46:	e6c9      	b.n	8009bdc <PxMessagingTask+0x10e8>
							responseStatus =BOS_OK; // Initialize response
 8009e48:	4b7c      	ldr	r3, [pc, #496]	; (800a03c <PxMessagingTask+0x1548>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8009e4e:	4b79      	ldr	r3, [pc, #484]	; (800a034 <PxMessagingTask+0x1540>)
 8009e50:	3238      	adds	r2, #56	; 0x38
 8009e52:	436a      	muls	r2, r5
 8009e54:	189b      	adds	r3, r3, r2
 8009e56:	4642      	mov	r2, r8
 8009e58:	5c9b      	ldrb	r3, [r3, r2]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d100      	bne.n	8009e60 <PxMessagingTask+0x136c>
 8009e5e:	e16d      	b.n	800a13c <PxMessagingTask+0x1648>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8009e60:	2b1e      	cmp	r3, #30
 8009e62:	d900      	bls.n	8009e66 <PxMessagingTask+0x1372>
 8009e64:	e154      	b.n	800a110 <PxMessagingTask+0x161c>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE+0x10000; // Get var memory addres
 8009e66:	1e5f      	subs	r7, r3, #1
 8009e68:	4b75      	ldr	r3, [pc, #468]	; (800a040 <PxMessagingTask+0x154c>)
 8009e6a:	00ba      	lsls	r2, r7, #2
 8009e6c:	58d3      	ldr	r3, [r2, r3]
 8009e6e:	0c1a      	lsrs	r2, r3, #16
 8009e70:	4974      	ldr	r1, [pc, #464]	; (800a044 <PxMessagingTask+0x1550>)
 8009e72:	468c      	mov	ip, r1
 8009e74:	4462      	add	r2, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 8009e76:	4641      	mov	r1, r8
 8009e78:	1c4e      	adds	r6, r1, #1
 8009e7a:	9605      	str	r6, [sp, #20]
 8009e7c:	496d      	ldr	r1, [pc, #436]	; (800a034 <PxMessagingTask+0x1540>)
 8009e7e:	2038      	movs	r0, #56	; 0x38
 8009e80:	4368      	muls	r0, r5
 8009e82:	1809      	adds	r1, r1, r0
 8009e84:	5d8e      	ldrb	r6, [r1, r6]
 8009e86:	1e71      	subs	r1, r6, #1
 8009e88:	b2c8      	uxtb	r0, r1
 8009e8a:	2807      	cmp	r0, #7
 8009e8c:	d812      	bhi.n	8009eb4 <PxMessagingTask+0x13c0>
 8009e8e:	b2c9      	uxtb	r1, r1
 8009e90:	0089      	lsls	r1, r1, #2
 8009e92:	486d      	ldr	r0, [pc, #436]	; (800a048 <PxMessagingTask+0x1554>)
 8009e94:	5841      	ldr	r1, [r0, r1]
 8009e96:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009e98:	071b      	lsls	r3, r3, #28
 8009e9a:	d027      	beq.n	8009eec <PxMessagingTask+0x13f8>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009e9c:	4b67      	ldr	r3, [pc, #412]	; (800a03c <PxMessagingTask+0x1548>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b12      	cmp	r3, #18
 8009ea2:	d007      	beq.n	8009eb4 <PxMessagingTask+0x13c0>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	1c99      	adds	r1, r3, #2
 8009ea8:	4b62      	ldr	r3, [pc, #392]	; (800a034 <PxMessagingTask+0x1540>)
 8009eaa:	2038      	movs	r0, #56	; 0x38
 8009eac:	4368      	muls	r0, r5
 8009eae:	181b      	adds	r3, r3, r0
 8009eb0:	5c5b      	ldrb	r3, [r3, r1]
 8009eb2:	7013      	strb	r3, [r2, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009eb4:	4b5f      	ldr	r3, [pc, #380]	; (800a034 <PxMessagingTask+0x1540>)
 8009eb6:	2238      	movs	r2, #56	; 0x38
 8009eb8:	436a      	muls	r2, r5
 8009eba:	189b      	adds	r3, r3, r2
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	5c9a      	ldrb	r2, [r3, r2]
 8009ec0:	3a01      	subs	r2, #1
 8009ec2:	495f      	ldr	r1, [pc, #380]	; (800a040 <PxMessagingTask+0x154c>)
 8009ec4:	0090      	lsls	r0, r2, #2
 8009ec6:	5841      	ldr	r1, [r0, r1]
 8009ec8:	200f      	movs	r0, #15
 8009eca:	4008      	ands	r0, r1
 8009ecc:	9e05      	ldr	r6, [sp, #20]
 8009ece:	5d9b      	ldrb	r3, [r3, r6]
 8009ed0:	4298      	cmp	r0, r3
 8009ed2:	d100      	bne.n	8009ed6 <PxMessagingTask+0x13e2>
 8009ed4:	e11f      	b.n	800a116 <PxMessagingTask+0x1622>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009ed6:	485d      	ldr	r0, [pc, #372]	; (800a04c <PxMessagingTask+0x1558>)
 8009ed8:	4684      	mov	ip, r0
 8009eda:	4463      	add	r3, ip
 8009edc:	4858      	ldr	r0, [pc, #352]	; (800a040 <PxMessagingTask+0x154c>)
 8009ede:	0092      	lsls	r2, r2, #2
 8009ee0:	400b      	ands	r3, r1
 8009ee2:	5013      	str	r3, [r2, r0]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009ee4:	4b55      	ldr	r3, [pc, #340]	; (800a03c <PxMessagingTask+0x1548>)
 8009ee6:	2214      	movs	r2, #20
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e114      	b.n	800a116 <PxMessagingTask+0x1622>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009eec:	2001      	movs	r0, #1
 8009eee:	f009 f905 	bl	80130fc <malloc>
 8009ef2:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 8009ef4:	d005      	beq.n	8009f02 <PxMessagingTask+0x140e>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009ef6:	0400      	lsls	r0, r0, #16
 8009ef8:	1980      	adds	r0, r0, r6
 8009efa:	4b51      	ldr	r3, [pc, #324]	; (800a040 <PxMessagingTask+0x154c>)
 8009efc:	00bf      	lsls	r7, r7, #2
 8009efe:	50f8      	str	r0, [r7, r3]
 8009f00:	e7cc      	b.n	8009e9c <PxMessagingTask+0x13a8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009f02:	4b4e      	ldr	r3, [pc, #312]	; (800a03c <PxMessagingTask+0x1548>)
 8009f04:	2112      	movs	r1, #18
 8009f06:	7019      	strb	r1, [r3, #0]
 8009f08:	e7c8      	b.n	8009e9c <PxMessagingTask+0x13a8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009f0a:	071b      	lsls	r3, r3, #28
 8009f0c:	d00c      	beq.n	8009f28 <PxMessagingTask+0x1434>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009f0e:	4b4b      	ldr	r3, [pc, #300]	; (800a03c <PxMessagingTask+0x1548>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	2b12      	cmp	r3, #18
 8009f14:	d0ce      	beq.n	8009eb4 <PxMessagingTask+0x13c0>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009f16:	4643      	mov	r3, r8
 8009f18:	1c99      	adds	r1, r3, #2
 8009f1a:	4b46      	ldr	r3, [pc, #280]	; (800a034 <PxMessagingTask+0x1540>)
 8009f1c:	2038      	movs	r0, #56	; 0x38
 8009f1e:	4368      	muls	r0, r5
 8009f20:	181b      	adds	r3, r3, r0
 8009f22:	565b      	ldrsb	r3, [r3, r1]
 8009f24:	7013      	strb	r3, [r2, #0]
 8009f26:	e7c5      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009f28:	2001      	movs	r0, #1
 8009f2a:	f009 f8e7 	bl	80130fc <malloc>
 8009f2e:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 8009f30:	d005      	beq.n	8009f3e <PxMessagingTask+0x144a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009f32:	0400      	lsls	r0, r0, #16
 8009f34:	1980      	adds	r0, r0, r6
 8009f36:	4b42      	ldr	r3, [pc, #264]	; (800a040 <PxMessagingTask+0x154c>)
 8009f38:	00bf      	lsls	r7, r7, #2
 8009f3a:	50f8      	str	r0, [r7, r3]
 8009f3c:	e7e7      	b.n	8009f0e <PxMessagingTask+0x141a>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009f3e:	4b3f      	ldr	r3, [pc, #252]	; (800a03c <PxMessagingTask+0x1548>)
 8009f40:	2112      	movs	r1, #18
 8009f42:	7019      	strb	r1, [r3, #0]
 8009f44:	e7e3      	b.n	8009f0e <PxMessagingTask+0x141a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009f46:	071b      	lsls	r3, r3, #28
 8009f48:	d012      	beq.n	8009f70 <PxMessagingTask+0x147c>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009f4a:	4b3c      	ldr	r3, [pc, #240]	; (800a03c <PxMessagingTask+0x1548>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b12      	cmp	r3, #18
 8009f50:	d0b0      	beq.n	8009eb4 <PxMessagingTask+0x13c0>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009f52:	4643      	mov	r3, r8
 8009f54:	1c99      	adds	r1, r3, #2
 8009f56:	4b37      	ldr	r3, [pc, #220]	; (800a034 <PxMessagingTask+0x1540>)
 8009f58:	2038      	movs	r0, #56	; 0x38
 8009f5a:	4368      	muls	r0, r5
 8009f5c:	181b      	adds	r3, r3, r0
 8009f5e:	5c58      	ldrb	r0, [r3, r1]
 8009f60:	4641      	mov	r1, r8
 8009f62:	3103      	adds	r1, #3
 8009f64:	5c59      	ldrb	r1, [r3, r1]
 8009f66:	0209      	lsls	r1, r1, #8
 8009f68:	1843      	adds	r3, r0, r1
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]
 8009f6e:	e7a1      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009f70:	2002      	movs	r0, #2
 8009f72:	f009 f8c3 	bl	80130fc <malloc>
 8009f76:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 8009f78:	d005      	beq.n	8009f86 <PxMessagingTask+0x1492>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009f7a:	0400      	lsls	r0, r0, #16
 8009f7c:	1980      	adds	r0, r0, r6
 8009f7e:	4b30      	ldr	r3, [pc, #192]	; (800a040 <PxMessagingTask+0x154c>)
 8009f80:	00bf      	lsls	r7, r7, #2
 8009f82:	50f8      	str	r0, [r7, r3]
 8009f84:	e7e1      	b.n	8009f4a <PxMessagingTask+0x1456>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009f86:	4b2d      	ldr	r3, [pc, #180]	; (800a03c <PxMessagingTask+0x1548>)
 8009f88:	2112      	movs	r1, #18
 8009f8a:	7019      	strb	r1, [r3, #0]
 8009f8c:	e7dd      	b.n	8009f4a <PxMessagingTask+0x1456>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009f8e:	071b      	lsls	r3, r3, #28
 8009f90:	d012      	beq.n	8009fb8 <PxMessagingTask+0x14c4>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009f92:	4b2a      	ldr	r3, [pc, #168]	; (800a03c <PxMessagingTask+0x1548>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b12      	cmp	r3, #18
 8009f98:	d08c      	beq.n	8009eb4 <PxMessagingTask+0x13c0>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009f9a:	4643      	mov	r3, r8
 8009f9c:	1c99      	adds	r1, r3, #2
 8009f9e:	4b25      	ldr	r3, [pc, #148]	; (800a034 <PxMessagingTask+0x1540>)
 8009fa0:	2038      	movs	r0, #56	; 0x38
 8009fa2:	4368      	muls	r0, r5
 8009fa4:	181b      	adds	r3, r3, r0
 8009fa6:	5c58      	ldrb	r0, [r3, r1]
 8009fa8:	4641      	mov	r1, r8
 8009faa:	3103      	adds	r1, #3
 8009fac:	5c59      	ldrb	r1, [r3, r1]
 8009fae:	0209      	lsls	r1, r1, #8
 8009fb0:	1843      	adds	r3, r0, r1
 8009fb2:	b21b      	sxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]
 8009fb6:	e77d      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009fb8:	2002      	movs	r0, #2
 8009fba:	f009 f89f 	bl	80130fc <malloc>
 8009fbe:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 8009fc0:	d005      	beq.n	8009fce <PxMessagingTask+0x14da>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009fc2:	0400      	lsls	r0, r0, #16
 8009fc4:	1980      	adds	r0, r0, r6
 8009fc6:	4b1e      	ldr	r3, [pc, #120]	; (800a040 <PxMessagingTask+0x154c>)
 8009fc8:	00bf      	lsls	r7, r7, #2
 8009fca:	50f8      	str	r0, [r7, r3]
 8009fcc:	e7e1      	b.n	8009f92 <PxMessagingTask+0x149e>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009fce:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <PxMessagingTask+0x1548>)
 8009fd0:	2112      	movs	r1, #18
 8009fd2:	7019      	strb	r1, [r3, #0]
 8009fd4:	e7dd      	b.n	8009f92 <PxMessagingTask+0x149e>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009fd6:	071b      	lsls	r3, r3, #28
 8009fd8:	d01c      	beq.n	800a014 <PxMessagingTask+0x1520>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009fda:	4b18      	ldr	r3, [pc, #96]	; (800a03c <PxMessagingTask+0x1548>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b12      	cmp	r3, #18
 8009fe0:	d100      	bne.n	8009fe4 <PxMessagingTask+0x14f0>
 8009fe2:	e767      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009fe4:	4643      	mov	r3, r8
 8009fe6:	1c99      	adds	r1, r3, #2
 8009fe8:	4b12      	ldr	r3, [pc, #72]	; (800a034 <PxMessagingTask+0x1540>)
 8009fea:	2038      	movs	r0, #56	; 0x38
 8009fec:	4368      	muls	r0, r5
 8009fee:	181b      	adds	r3, r3, r0
 8009ff0:	5c59      	ldrb	r1, [r3, r1]
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	3003      	adds	r0, #3
 8009ff6:	5c18      	ldrb	r0, [r3, r0]
 8009ff8:	0200      	lsls	r0, r0, #8
 8009ffa:	1809      	adds	r1, r1, r0
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	3004      	adds	r0, #4
 800a000:	5c18      	ldrb	r0, [r3, r0]
 800a002:	0400      	lsls	r0, r0, #16
 800a004:	1809      	adds	r1, r1, r0
 800a006:	4640      	mov	r0, r8
 800a008:	3005      	adds	r0, #5
 800a00a:	5c1b      	ldrb	r3, [r3, r0]
 800a00c:	061b      	lsls	r3, r3, #24
 800a00e:	18cb      	adds	r3, r1, r3
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	e74f      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800a014:	2004      	movs	r0, #4
 800a016:	f009 f871 	bl	80130fc <malloc>
 800a01a:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 800a01c:	d005      	beq.n	800a02a <PxMessagingTask+0x1536>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a01e:	0400      	lsls	r0, r0, #16
 800a020:	1980      	adds	r0, r0, r6
 800a022:	4b07      	ldr	r3, [pc, #28]	; (800a040 <PxMessagingTask+0x154c>)
 800a024:	00bf      	lsls	r7, r7, #2
 800a026:	50f8      	str	r0, [r7, r3]
 800a028:	e7d7      	b.n	8009fda <PxMessagingTask+0x14e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a02a:	4b04      	ldr	r3, [pc, #16]	; (800a03c <PxMessagingTask+0x1548>)
 800a02c:	2112      	movs	r1, #18
 800a02e:	7019      	strb	r1, [r3, #0]
 800a030:	e7d3      	b.n	8009fda <PxMessagingTask+0x14e6>
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	20000a38 	.word	0x20000a38
 800a038:	20000970 	.word	0x20000970
 800a03c:	2000096c 	.word	0x2000096c
 800a040:	20000978 	.word	0x20000978
 800a044:	20010000 	.word	0x20010000
 800a048:	08019c38 	.word	0x08019c38
 800a04c:	0000fff0 	.word	0x0000fff0
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800a050:	071b      	lsls	r3, r3, #28
 800a052:	d01c      	beq.n	800a08e <PxMessagingTask+0x159a>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800a054:	4bd9      	ldr	r3, [pc, #868]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b12      	cmp	r3, #18
 800a05a:	d100      	bne.n	800a05e <PxMessagingTask+0x156a>
 800a05c:	e72a      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800a05e:	4643      	mov	r3, r8
 800a060:	1c99      	adds	r1, r3, #2
 800a062:	4bd7      	ldr	r3, [pc, #860]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a064:	2038      	movs	r0, #56	; 0x38
 800a066:	4368      	muls	r0, r5
 800a068:	181b      	adds	r3, r3, r0
 800a06a:	5c59      	ldrb	r1, [r3, r1]
 800a06c:	4640      	mov	r0, r8
 800a06e:	3003      	adds	r0, #3
 800a070:	5c18      	ldrb	r0, [r3, r0]
 800a072:	0200      	lsls	r0, r0, #8
 800a074:	1809      	adds	r1, r1, r0
 800a076:	4640      	mov	r0, r8
 800a078:	3004      	adds	r0, #4
 800a07a:	5c18      	ldrb	r0, [r3, r0]
 800a07c:	0400      	lsls	r0, r0, #16
 800a07e:	1809      	adds	r1, r1, r0
 800a080:	4640      	mov	r0, r8
 800a082:	3005      	adds	r0, #5
 800a084:	5c1b      	ldrb	r3, [r3, r0]
 800a086:	061b      	lsls	r3, r3, #24
 800a088:	18cb      	adds	r3, r1, r3
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	e712      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800a08e:	2004      	movs	r0, #4
 800a090:	f009 f834 	bl	80130fc <malloc>
 800a094:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 800a096:	d005      	beq.n	800a0a4 <PxMessagingTask+0x15b0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a098:	0400      	lsls	r0, r0, #16
 800a09a:	1980      	adds	r0, r0, r6
 800a09c:	4bc9      	ldr	r3, [pc, #804]	; (800a3c4 <PxMessagingTask+0x18d0>)
 800a09e:	00bf      	lsls	r7, r7, #2
 800a0a0:	50f8      	str	r0, [r7, r3]
 800a0a2:	e7d7      	b.n	800a054 <PxMessagingTask+0x1560>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a0a4:	4bc5      	ldr	r3, [pc, #788]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a0a6:	2112      	movs	r1, #18
 800a0a8:	7019      	strb	r1, [r3, #0]
 800a0aa:	e7d3      	b.n	800a054 <PxMessagingTask+0x1560>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800a0ac:	071b      	lsls	r3, r3, #28
 800a0ae:	d020      	beq.n	800a0f2 <PxMessagingTask+0x15fe>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 800a0b0:	4bc2      	ldr	r3, [pc, #776]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b12      	cmp	r3, #18
 800a0b6:	d100      	bne.n	800a0ba <PxMessagingTask+0x15c6>
 800a0b8:	e6fc      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800a0ba:	4643      	mov	r3, r8
 800a0bc:	3302      	adds	r3, #2
 800a0be:	49c0      	ldr	r1, [pc, #768]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a0c0:	2038      	movs	r0, #56	; 0x38
 800a0c2:	4368      	muls	r0, r5
 800a0c4:	1809      	adds	r1, r1, r0
 800a0c6:	5ccb      	ldrb	r3, [r1, r3]
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	3003      	adds	r0, #3
 800a0cc:	5c08      	ldrb	r0, [r1, r0]
 800a0ce:	0200      	lsls	r0, r0, #8
 800a0d0:	181b      	adds	r3, r3, r0
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	3004      	adds	r0, #4
 800a0d6:	5c08      	ldrb	r0, [r1, r0]
 800a0d8:	0400      	lsls	r0, r0, #16
 800a0da:	181b      	adds	r3, r3, r0
 800a0dc:	4640      	mov	r0, r8
 800a0de:	3005      	adds	r0, #5
 800a0e0:	5c09      	ldrb	r1, [r1, r0]
 800a0e2:	0609      	lsls	r1, r1, #24
 800a0e4:	185b      	adds	r3, r3, r1
 800a0e6:	49b8      	ldr	r1, [pc, #736]	; (800a3c8 <PxMessagingTask+0x18d4>)
 800a0e8:	600b      	str	r3, [r1, #0]
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	e6e0      	b.n	8009eb4 <PxMessagingTask+0x13c0>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800a0f2:	2004      	movs	r0, #4
 800a0f4:	f009 f802 	bl	80130fc <malloc>
 800a0f8:	1e02      	subs	r2, r0, #0
												if(temp32 != 0){
 800a0fa:	d005      	beq.n	800a108 <PxMessagingTask+0x1614>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a0fc:	0400      	lsls	r0, r0, #16
 800a0fe:	1980      	adds	r0, r0, r6
 800a100:	4bb0      	ldr	r3, [pc, #704]	; (800a3c4 <PxMessagingTask+0x18d0>)
 800a102:	00bf      	lsls	r7, r7, #2
 800a104:	50f8      	str	r0, [r7, r3]
 800a106:	e7d3      	b.n	800a0b0 <PxMessagingTask+0x15bc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a108:	4bac      	ldr	r3, [pc, #688]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a10a:	2112      	movs	r1, #18
 800a10c:	7019      	strb	r1, [r3, #0]
 800a10e:	e7cf      	b.n	800a0b0 <PxMessagingTask+0x15bc>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800a110:	4baa      	ldr	r3, [pc, #680]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a112:	2213      	movs	r2, #19
 800a114:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800a116:	4bad      	ldr	r3, [pc, #692]	; (800a3cc <PxMessagingTask+0x18d8>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	2b60      	cmp	r3, #96	; 0x60
 800a11c:	d003      	beq.n	800a126 <PxMessagingTask+0x1632>
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d001      	beq.n	800a126 <PxMessagingTask+0x1632>
 800a122:	f7fe fd41 	bl	8008ba8 <PxMessagingTask+0xb4>
								messageParams[0] =responseStatus;
 800a126:	4baa      	ldr	r3, [pc, #680]	; (800a3d0 <PxMessagingTask+0x18dc>)
 800a128:	4aa4      	ldr	r2, [pc, #656]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a12e:	2201      	movs	r2, #1
 800a130:	2121      	movs	r1, #33	; 0x21
 800a132:	4658      	mov	r0, fp
 800a134:	f7fe fa16 	bl	8008564 <SendMessageToModule>
 800a138:	f7fe fd36 	bl	8008ba8 <PxMessagingTask+0xb4>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a13c:	3202      	adds	r2, #2
 800a13e:	4ba0      	ldr	r3, [pc, #640]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a140:	2138      	movs	r1, #56	; 0x38
 800a142:	4369      	muls	r1, r5
 800a144:	185b      	adds	r3, r3, r1
 800a146:	5c9e      	ldrb	r6, [r3, r2]
 800a148:	0636      	lsls	r6, r6, #24
 800a14a:	4642      	mov	r2, r8
 800a14c:	3203      	adds	r2, #3
 800a14e:	5c9a      	ldrb	r2, [r3, r2]
 800a150:	0412      	lsls	r2, r2, #16
 800a152:	18b6      	adds	r6, r6, r2
 800a154:	4642      	mov	r2, r8
 800a156:	3204      	adds	r2, #4
 800a158:	5c9a      	ldrb	r2, [r3, r2]
 800a15a:	0212      	lsls	r2, r2, #8
 800a15c:	18b6      	adds	r6, r6, r2
 800a15e:	4642      	mov	r2, r8
 800a160:	3205      	adds	r2, #5
 800a162:	5c9b      	ldrb	r3, [r3, r2]
 800a164:	18f6      	adds	r6, r6, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800a166:	23e0      	movs	r3, #224	; 0xe0
 800a168:	061b      	lsls	r3, r3, #24
 800a16a:	18f2      	adds	r2, r6, r3
 800a16c:	2380      	movs	r3, #128	; 0x80
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	429a      	cmp	r2, r3
 800a172:	d300      	bcc.n	800a176 <PxMessagingTask+0x1682>
 800a174:	e08b      	b.n	800a28e <PxMessagingTask+0x179a>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800a176:	4643      	mov	r3, r8
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	4b91      	ldr	r3, [pc, #580]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a17c:	2138      	movs	r1, #56	; 0x38
 800a17e:	4369      	muls	r1, r5
 800a180:	185b      	adds	r3, r3, r1
 800a182:	5c9b      	ldrb	r3, [r3, r2]
 800a184:	3b01      	subs	r3, #1
 800a186:	b2da      	uxtb	r2, r3
 800a188:	2a07      	cmp	r2, #7
 800a18a:	d8c4      	bhi.n	800a116 <PxMessagingTask+0x1622>
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4a90      	ldr	r2, [pc, #576]	; (800a3d4 <PxMessagingTask+0x18e0>)
 800a192:	58d3      	ldr	r3, [r2, r3]
 800a194:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800a196:	4641      	mov	r1, r8
 800a198:	3106      	adds	r1, #6
 800a19a:	4b89      	ldr	r3, [pc, #548]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a19c:	2238      	movs	r2, #56	; 0x38
 800a19e:	436a      	muls	r2, r5
 800a1a0:	189b      	adds	r3, r3, r2
 800a1a2:	5c5b      	ldrb	r3, [r3, r1]
 800a1a4:	7033      	strb	r3, [r6, #0]
											break;
 800a1a6:	e7b6      	b.n	800a116 <PxMessagingTask+0x1622>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800a1a8:	4641      	mov	r1, r8
 800a1aa:	3106      	adds	r1, #6
 800a1ac:	4b84      	ldr	r3, [pc, #528]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a1ae:	2238      	movs	r2, #56	; 0x38
 800a1b0:	436a      	muls	r2, r5
 800a1b2:	189b      	adds	r3, r3, r2
 800a1b4:	565b      	ldrsb	r3, [r3, r1]
 800a1b6:	7033      	strb	r3, [r6, #0]
											break;
 800a1b8:	e7ad      	b.n	800a116 <PxMessagingTask+0x1622>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800a1ba:	4643      	mov	r3, r8
 800a1bc:	1d99      	adds	r1, r3, #6
 800a1be:	4b80      	ldr	r3, [pc, #512]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a1c0:	2238      	movs	r2, #56	; 0x38
 800a1c2:	436a      	muls	r2, r5
 800a1c4:	189b      	adds	r3, r3, r2
 800a1c6:	5c5a      	ldrb	r2, [r3, r1]
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	3107      	adds	r1, #7
 800a1cc:	5c5b      	ldrb	r3, [r3, r1]
 800a1ce:	021b      	lsls	r3, r3, #8
 800a1d0:	18d3      	adds	r3, r2, r3
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	8033      	strh	r3, [r6, #0]
											break;
 800a1d6:	e79e      	b.n	800a116 <PxMessagingTask+0x1622>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800a1d8:	4643      	mov	r3, r8
 800a1da:	1d99      	adds	r1, r3, #6
 800a1dc:	4b78      	ldr	r3, [pc, #480]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a1de:	2238      	movs	r2, #56	; 0x38
 800a1e0:	436a      	muls	r2, r5
 800a1e2:	189b      	adds	r3, r3, r2
 800a1e4:	5c5a      	ldrb	r2, [r3, r1]
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	3107      	adds	r1, #7
 800a1ea:	5c5b      	ldrb	r3, [r3, r1]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	18d3      	adds	r3, r2, r3
 800a1f0:	b21b      	sxth	r3, r3
 800a1f2:	8033      	strh	r3, [r6, #0]
											break;
 800a1f4:	e78f      	b.n	800a116 <PxMessagingTask+0x1622>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a1f6:	4643      	mov	r3, r8
 800a1f8:	1d99      	adds	r1, r3, #6
 800a1fa:	4a71      	ldr	r2, [pc, #452]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a1fc:	2338      	movs	r3, #56	; 0x38
 800a1fe:	436b      	muls	r3, r5
 800a200:	18d2      	adds	r2, r2, r3
 800a202:	5c53      	ldrb	r3, [r2, r1]
 800a204:	4641      	mov	r1, r8
 800a206:	3107      	adds	r1, #7
 800a208:	5c51      	ldrb	r1, [r2, r1]
 800a20a:	0209      	lsls	r1, r1, #8
 800a20c:	185b      	adds	r3, r3, r1
 800a20e:	4641      	mov	r1, r8
 800a210:	3108      	adds	r1, #8
 800a212:	5c51      	ldrb	r1, [r2, r1]
 800a214:	0409      	lsls	r1, r1, #16
 800a216:	185b      	adds	r3, r3, r1
 800a218:	4641      	mov	r1, r8
 800a21a:	3109      	adds	r1, #9
 800a21c:	5c52      	ldrb	r2, [r2, r1]
 800a21e:	0612      	lsls	r2, r2, #24
 800a220:	189b      	adds	r3, r3, r2
 800a222:	6033      	str	r3, [r6, #0]
											break;
 800a224:	e777      	b.n	800a116 <PxMessagingTask+0x1622>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800a226:	4643      	mov	r3, r8
 800a228:	1d99      	adds	r1, r3, #6
 800a22a:	4a65      	ldr	r2, [pc, #404]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a22c:	2338      	movs	r3, #56	; 0x38
 800a22e:	436b      	muls	r3, r5
 800a230:	18d2      	adds	r2, r2, r3
 800a232:	5c53      	ldrb	r3, [r2, r1]
 800a234:	4641      	mov	r1, r8
 800a236:	3107      	adds	r1, #7
 800a238:	5c51      	ldrb	r1, [r2, r1]
 800a23a:	0209      	lsls	r1, r1, #8
 800a23c:	185b      	adds	r3, r3, r1
 800a23e:	4641      	mov	r1, r8
 800a240:	3108      	adds	r1, #8
 800a242:	5c51      	ldrb	r1, [r2, r1]
 800a244:	0409      	lsls	r1, r1, #16
 800a246:	185b      	adds	r3, r3, r1
 800a248:	4641      	mov	r1, r8
 800a24a:	3109      	adds	r1, #9
 800a24c:	5c52      	ldrb	r2, [r2, r1]
 800a24e:	0612      	lsls	r2, r2, #24
 800a250:	189b      	adds	r3, r3, r2
 800a252:	6033      	str	r3, [r6, #0]
											break;
 800a254:	e75f      	b.n	800a116 <PxMessagingTask+0x1622>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a256:	4643      	mov	r3, r8
 800a258:	1d99      	adds	r1, r3, #6
 800a25a:	4a59      	ldr	r2, [pc, #356]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a25c:	2338      	movs	r3, #56	; 0x38
 800a25e:	436b      	muls	r3, r5
 800a260:	18d2      	adds	r2, r2, r3
 800a262:	5c53      	ldrb	r3, [r2, r1]
 800a264:	4641      	mov	r1, r8
 800a266:	3107      	adds	r1, #7
 800a268:	5c51      	ldrb	r1, [r2, r1]
 800a26a:	0209      	lsls	r1, r1, #8
 800a26c:	185b      	adds	r3, r3, r1
 800a26e:	4641      	mov	r1, r8
 800a270:	3108      	adds	r1, #8
 800a272:	5c51      	ldrb	r1, [r2, r1]
 800a274:	0409      	lsls	r1, r1, #16
 800a276:	185b      	adds	r3, r3, r1
 800a278:	4641      	mov	r1, r8
 800a27a:	3109      	adds	r1, #9
 800a27c:	5c52      	ldrb	r2, [r2, r1]
 800a27e:	0612      	lsls	r2, r2, #24
 800a280:	189b      	adds	r3, r3, r2
 800a282:	4a51      	ldr	r2, [pc, #324]	; (800a3c8 <PxMessagingTask+0x18d4>)
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	2100      	movs	r1, #0
 800a288:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800a28a:	6033      	str	r3, [r6, #0]
											break;
 800a28c:	e743      	b.n	800a116 <PxMessagingTask+0x1622>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800a28e:	2280      	movs	r2, #128	; 0x80
 800a290:	0292      	lsls	r2, r2, #10
 800a292:	23f8      	movs	r3, #248	; 0xf8
 800a294:	061b      	lsls	r3, r3, #24
 800a296:	18f3      	adds	r3, r6, r3
 800a298:	4293      	cmp	r3, r2
 800a29a:	d303      	bcc.n	800a2a4 <PxMessagingTask+0x17b0>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a29c:	4b47      	ldr	r3, [pc, #284]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a29e:	2215      	movs	r2, #21
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e738      	b.n	800a116 <PxMessagingTask+0x1622>
									HAL_FLASH_Unlock();
 800a2a4:	f006 ffee 	bl	8011284 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800a2a8:	2f22      	cmp	r7, #34	; 0x22
 800a2aa:	d013      	beq.n	800a2d4 <PxMessagingTask+0x17e0>
									if(responseStatus == BOS_OK){
 800a2ac:	4b43      	ldr	r3, [pc, #268]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11b      	bne.n	800a2ec <PxMessagingTask+0x17f8>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800a2b4:	4643      	mov	r3, r8
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	4b41      	ldr	r3, [pc, #260]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a2ba:	2138      	movs	r1, #56	; 0x38
 800a2bc:	4369      	muls	r1, r5
 800a2be:	185b      	adds	r3, r3, r1
 800a2c0:	5c9b      	ldrb	r3, [r3, r2]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	2a07      	cmp	r2, #7
 800a2c8:	d810      	bhi.n	800a2ec <PxMessagingTask+0x17f8>
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4a42      	ldr	r2, [pc, #264]	; (800a3d8 <PxMessagingTask+0x18e4>)
 800a2d0:	58d3      	ldr	r3, [r2, r3]
 800a2d2:	469f      	mov	pc, r3
										EraseSector(temp32);
 800a2d4:	0030      	movs	r0, r6
 800a2d6:	f001 fea1 	bl	800c01c <EraseSector>
 800a2da:	e7e7      	b.n	800a2ac <PxMessagingTask+0x17b8>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800a2dc:	8833      	ldrh	r3, [r6, #0]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4a3e      	ldr	r2, [pc, #248]	; (800a3dc <PxMessagingTask+0x18e8>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d00c      	beq.n	800a300 <PxMessagingTask+0x180c>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a2e6:	4b35      	ldr	r3, [pc, #212]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a2e8:	2216      	movs	r2, #22
 800a2ea:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a2ec:	f006 ffde 	bl	80112ac <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800a2f0:	9b08      	ldr	r3, [sp, #32]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d100      	bne.n	800a2f8 <PxMessagingTask+0x1804>
 800a2f6:	e70e      	b.n	800a116 <PxMessagingTask+0x1622>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a2f8:	4b30      	ldr	r3, [pc, #192]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a2fa:	2216      	movs	r2, #22
 800a2fc:	701a      	strb	r2, [r3, #0]
 800a2fe:	e70a      	b.n	800a116 <PxMessagingTask+0x1622>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800a300:	4641      	mov	r1, r8
 800a302:	3106      	adds	r1, #6
 800a304:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a306:	2238      	movs	r2, #56	; 0x38
 800a308:	436a      	muls	r2, r5
 800a30a:	189b      	adds	r3, r3, r2
 800a30c:	5c5a      	ldrb	r2, [r3, r1]
 800a30e:	2300      	movs	r3, #0
 800a310:	492d      	ldr	r1, [pc, #180]	; (800a3c8 <PxMessagingTask+0x18d4>)
 800a312:	600a      	str	r2, [r1, #0]
 800a314:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a316:	0031      	movs	r1, r6
 800a318:	2001      	movs	r0, #1
 800a31a:	f006 fffd 	bl	8011318 <HAL_FLASH_Program>
 800a31e:	9008      	str	r0, [sp, #32]
													break;
 800a320:	e7e4      	b.n	800a2ec <PxMessagingTask+0x17f8>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800a322:	8833      	ldrh	r3, [r6, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	4a2d      	ldr	r2, [pc, #180]	; (800a3dc <PxMessagingTask+0x18e8>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d003      	beq.n	800a334 <PxMessagingTask+0x1840>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a32c:	4b23      	ldr	r3, [pc, #140]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a32e:	2216      	movs	r2, #22
 800a330:	701a      	strb	r2, [r3, #0]
													break;
 800a332:	e7db      	b.n	800a2ec <PxMessagingTask+0x17f8>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800a334:	4643      	mov	r3, r8
 800a336:	1d99      	adds	r1, r3, #6
 800a338:	4b21      	ldr	r3, [pc, #132]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a33a:	2238      	movs	r2, #56	; 0x38
 800a33c:	436a      	muls	r2, r5
 800a33e:	189b      	adds	r3, r3, r2
 800a340:	5c5a      	ldrb	r2, [r3, r1]
 800a342:	4641      	mov	r1, r8
 800a344:	3107      	adds	r1, #7
 800a346:	5c5b      	ldrb	r3, [r3, r1]
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	18d2      	adds	r2, r2, r3
 800a34c:	2300      	movs	r3, #0
 800a34e:	491e      	ldr	r1, [pc, #120]	; (800a3c8 <PxMessagingTask+0x18d4>)
 800a350:	600a      	str	r2, [r1, #0]
 800a352:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a354:	0031      	movs	r1, r6
 800a356:	2001      	movs	r0, #1
 800a358:	f006 ffde 	bl	8011318 <HAL_FLASH_Program>
 800a35c:	9008      	str	r0, [sp, #32]
													break;
 800a35e:	e7c5      	b.n	800a2ec <PxMessagingTask+0x17f8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800a360:	6833      	ldr	r3, [r6, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	d003      	beq.n	800a36e <PxMessagingTask+0x187a>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a366:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a368:	2216      	movs	r2, #22
 800a36a:	701a      	strb	r2, [r3, #0]
													break;
 800a36c:	e7be      	b.n	800a2ec <PxMessagingTask+0x17f8>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 800a36e:	4643      	mov	r3, r8
 800a370:	1d99      	adds	r1, r3, #6
 800a372:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <PxMessagingTask+0x18cc>)
 800a374:	2238      	movs	r2, #56	; 0x38
 800a376:	436a      	muls	r2, r5
 800a378:	189b      	adds	r3, r3, r2
 800a37a:	5c5a      	ldrb	r2, [r3, r1]
 800a37c:	4641      	mov	r1, r8
 800a37e:	3107      	adds	r1, #7
 800a380:	5c59      	ldrb	r1, [r3, r1]
 800a382:	0209      	lsls	r1, r1, #8
 800a384:	1852      	adds	r2, r2, r1
 800a386:	4641      	mov	r1, r8
 800a388:	3108      	adds	r1, #8
 800a38a:	5c59      	ldrb	r1, [r3, r1]
 800a38c:	0409      	lsls	r1, r1, #16
 800a38e:	1852      	adds	r2, r2, r1
 800a390:	4641      	mov	r1, r8
 800a392:	3109      	adds	r1, #9
 800a394:	5c5b      	ldrb	r3, [r3, r1]
 800a396:	061b      	lsls	r3, r3, #24
 800a398:	18d2      	adds	r2, r2, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	490a      	ldr	r1, [pc, #40]	; (800a3c8 <PxMessagingTask+0x18d4>)
 800a39e:	600a      	str	r2, [r1, #0]
 800a3a0:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a3a2:	0031      	movs	r1, r6
 800a3a4:	2002      	movs	r0, #2
 800a3a6:	f006 ffb7 	bl	8011318 <HAL_FLASH_Program>
 800a3aa:	9008      	str	r0, [sp, #32]
													break;
 800a3ac:	e79e      	b.n	800a2ec <PxMessagingTask+0x17f8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800a3ae:	6833      	ldr	r3, [r6, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	d015      	beq.n	800a3e0 <PxMessagingTask+0x18ec>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a3b4:	4b01      	ldr	r3, [pc, #4]	; (800a3bc <PxMessagingTask+0x18c8>)
 800a3b6:	2216      	movs	r2, #22
 800a3b8:	701a      	strb	r2, [r3, #0]
													break;
 800a3ba:	e797      	b.n	800a2ec <PxMessagingTask+0x17f8>
 800a3bc:	2000096c 	.word	0x2000096c
 800a3c0:	20000a38 	.word	0x20000a38
 800a3c4:	20000978 	.word	0x20000978
 800a3c8:	20000970 	.word	0x20000970
 800a3cc:	20000844 	.word	0x20000844
 800a3d0:	2000086c 	.word	0x2000086c
 800a3d4:	08019c58 	.word	0x08019c58
 800a3d8:	08019c78 	.word	0x08019c78
 800a3dc:	0000ffff 	.word	0x0000ffff
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a3e0:	4643      	mov	r3, r8
 800a3e2:	1d99      	adds	r1, r3, #6
 800a3e4:	4bb7      	ldr	r3, [pc, #732]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a3e6:	2238      	movs	r2, #56	; 0x38
 800a3e8:	436a      	muls	r2, r5
 800a3ea:	189b      	adds	r3, r3, r2
 800a3ec:	5c5a      	ldrb	r2, [r3, r1]
 800a3ee:	4641      	mov	r1, r8
 800a3f0:	3107      	adds	r1, #7
 800a3f2:	5c59      	ldrb	r1, [r3, r1]
 800a3f4:	0209      	lsls	r1, r1, #8
 800a3f6:	1852      	adds	r2, r2, r1
 800a3f8:	4641      	mov	r1, r8
 800a3fa:	3108      	adds	r1, #8
 800a3fc:	5c59      	ldrb	r1, [r3, r1]
 800a3fe:	0409      	lsls	r1, r1, #16
 800a400:	1852      	adds	r2, r2, r1
 800a402:	4641      	mov	r1, r8
 800a404:	3109      	adds	r1, #9
 800a406:	5c5b      	ldrb	r3, [r3, r1]
 800a408:	061b      	lsls	r3, r3, #24
 800a40a:	18d2      	adds	r2, r2, r3
 800a40c:	2300      	movs	r3, #0
 800a40e:	49ae      	ldr	r1, [pc, #696]	; (800a6c8 <PxMessagingTask+0x1bd4>)
 800a410:	600a      	str	r2, [r1, #0]
 800a412:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a414:	0031      	movs	r1, r6
 800a416:	2003      	movs	r0, #3
 800a418:	f006 ff7e 	bl	8011318 <HAL_FLASH_Program>
 800a41c:	9008      	str	r0, [sp, #32]
													break;
 800a41e:	e765      	b.n	800a2ec <PxMessagingTask+0x17f8>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a420:	4ba8      	ldr	r3, [pc, #672]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a422:	2238      	movs	r2, #56	; 0x38
 800a424:	436a      	muls	r2, r5
 800a426:	189b      	adds	r3, r3, r2
 800a428:	4642      	mov	r2, r8
 800a42a:	5c9a      	ldrb	r2, [r3, r2]
 800a42c:	4ba7      	ldr	r3, [pc, #668]	; (800a6cc <PxMessagingTask+0x1bd8>)
 800a42e:	701a      	strb	r2, [r3, #0]
							break;
 800a430:	f7fe fbba 	bl	8008ba8 <PxMessagingTask+0xb4>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a434:	4643      	mov	r3, r8
 800a436:	1c59      	adds	r1, r3, #1
 800a438:	2038      	movs	r0, #56	; 0x38
 800a43a:	4368      	muls	r0, r5
 800a43c:	1841      	adds	r1, r0, r1
 800a43e:	4ba1      	ldr	r3, [pc, #644]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a440:	18c9      	adds	r1, r1, r3
 800a442:	9a05      	ldr	r2, [sp, #20]
 800a444:	3a01      	subs	r2, #1
 800a446:	b292      	uxth	r2, r2
 800a448:	181b      	adds	r3, r3, r0
 800a44a:	4640      	mov	r0, r8
 800a44c:	5c18      	ldrb	r0, [r3, r0]
 800a44e:	230a      	movs	r3, #10
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	f003 fd45 	bl	800dee0 <writePxMutex>
							break;
 800a456:	f7fe fba7 	bl	8008ba8 <PxMessagingTask+0xb4>
							switch(cMessage[port - 1][0 + shift]){
 800a45a:	4b9a      	ldr	r3, [pc, #616]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a45c:	2238      	movs	r2, #56	; 0x38
 800a45e:	436a      	muls	r2, r5
 800a460:	189b      	adds	r3, r3, r2
 800a462:	4642      	mov	r2, r8
 800a464:	5c9b      	ldrb	r3, [r3, r2]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d100      	bne.n	800a46c <PxMessagingTask+0x1978>
 800a46a:	e091      	b.n	800a590 <PxMessagingTask+0x1a9c>
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d100      	bne.n	800a472 <PxMessagingTask+0x197e>
 800a470:	e0cb      	b.n	800a60a <PxMessagingTask+0x1b16>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d04f      	beq.n	800a516 <PxMessagingTask+0x1a22>
							ADCPort =cMessage[port - 1][shift];
 800a476:	4b93      	ldr	r3, [pc, #588]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a478:	00ea      	lsls	r2, r5, #3
 800a47a:	1b52      	subs	r2, r2, r5
 800a47c:	00d2      	lsls	r2, r2, #3
 800a47e:	189b      	adds	r3, r3, r2
 800a480:	4642      	mov	r2, r8
 800a482:	5c98      	ldrb	r0, [r3, r2]
 800a484:	4a92      	ldr	r2, [pc, #584]	; (800a6d0 <PxMessagingTask+0x1bdc>)
 800a486:	8110      	strh	r0, [r2, #8]
							ADCSide =cMessage[port - 1][shift + 1];
 800a488:	4641      	mov	r1, r8
 800a48a:	3101      	adds	r1, #1
 800a48c:	5c5b      	ldrb	r3, [r3, r1]
 800a48e:	8153      	strh	r3, [r2, #10]
							if(0 == ADCSide){
 800a490:	2b00      	cmp	r3, #0
 800a492:	d100      	bne.n	800a496 <PxMessagingTask+0x19a2>
 800a494:	e0d2      	b.n	800a63c <PxMessagingTask+0x1b48>
							else if(1 == ADCSide){
 800a496:	2b01      	cmp	r3, #1
 800a498:	d100      	bne.n	800a49c <PxMessagingTask+0x19a8>
 800a49a:	e0db      	b.n	800a654 <PxMessagingTask+0x1b60>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a49c:	488c      	ldr	r0, [pc, #560]	; (800a6d0 <PxMessagingTask+0x1bdc>)
 800a49e:	0001      	movs	r1, r0
 800a4a0:	3110      	adds	r1, #16
 800a4a2:	3014      	adds	r0, #20
 800a4a4:	f002 fa98 	bl	800c9d8 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 800a4a8:	4e86      	ldr	r6, [pc, #536]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a4aa:	00eb      	lsls	r3, r5, #3
 800a4ac:	1b5b      	subs	r3, r3, r5
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	18f6      	adds	r6, r6, r3
 800a4b2:	4643      	mov	r3, r8
 800a4b4:	5cf0      	ldrb	r0, [r6, r3]
 800a4b6:	4986      	ldr	r1, [pc, #536]	; (800a6d0 <PxMessagingTask+0x1bdc>)
 800a4b8:	8108      	strh	r0, [r1, #8]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 800a4ba:	3118      	adds	r1, #24
 800a4bc:	f002 fb56 	bl	800cb6c <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a4c0:	4643      	mov	r3, r8
 800a4c2:	3305      	adds	r3, #5
 800a4c4:	5cf3      	ldrb	r3, [r6, r3]
 800a4c6:	4642      	mov	r2, r8
 800a4c8:	3206      	adds	r2, #6
 800a4ca:	5cb2      	ldrb	r2, [r6, r2]
 800a4cc:	0212      	lsls	r2, r2, #8
 800a4ce:	189b      	adds	r3, r3, r2
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	3207      	adds	r2, #7
 800a4d4:	5cb2      	ldrb	r2, [r6, r2]
 800a4d6:	0412      	lsls	r2, r2, #16
 800a4d8:	189b      	adds	r3, r3, r2
 800a4da:	4642      	mov	r2, r8
 800a4dc:	3208      	adds	r2, #8
 800a4de:	5cb2      	ldrb	r2, [r6, r2]
 800a4e0:	0612      	lsls	r2, r2, #24
 800a4e2:	189b      	adds	r3, r3, r2
 800a4e4:	4a7b      	ldr	r2, [pc, #492]	; (800a6d4 <PxMessagingTask+0x1be0>)
 800a4e6:	2180      	movs	r1, #128	; 0x80
 800a4e8:	5053      	str	r3, [r2, r1]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a4ea:	4643      	mov	r3, r8
 800a4ec:	3309      	adds	r3, #9
 800a4ee:	5cf3      	ldrb	r3, [r6, r3]
 800a4f0:	4641      	mov	r1, r8
 800a4f2:	310a      	adds	r1, #10
 800a4f4:	5c71      	ldrb	r1, [r6, r1]
 800a4f6:	0209      	lsls	r1, r1, #8
 800a4f8:	185b      	adds	r3, r3, r1
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	310b      	adds	r1, #11
 800a4fe:	5c71      	ldrb	r1, [r6, r1]
 800a500:	0409      	lsls	r1, r1, #16
 800a502:	185b      	adds	r3, r3, r1
 800a504:	4641      	mov	r1, r8
 800a506:	310c      	adds	r1, #12
 800a508:	5c71      	ldrb	r1, [r6, r1]
 800a50a:	0609      	lsls	r1, r1, #24
 800a50c:	185b      	adds	r3, r3, r1
 800a50e:	2184      	movs	r1, #132	; 0x84
 800a510:	5053      	str	r3, [r2, r1]
							break;
 800a512:	f7fe fb49 	bl	8008ba8 <PxMessagingTask+0xb4>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a516:	3201      	adds	r2, #1
 800a518:	4b6a      	ldr	r3, [pc, #424]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a51a:	2138      	movs	r1, #56	; 0x38
 800a51c:	4369      	muls	r1, r5
 800a51e:	185b      	adds	r3, r3, r1
 800a520:	5c9a      	ldrb	r2, [r3, r2]
 800a522:	4641      	mov	r1, r8
 800a524:	3102      	adds	r1, #2
 800a526:	5c59      	ldrb	r1, [r3, r1]
 800a528:	0209      	lsls	r1, r1, #8
 800a52a:	1852      	adds	r2, r2, r1
 800a52c:	4641      	mov	r1, r8
 800a52e:	3103      	adds	r1, #3
 800a530:	5c59      	ldrb	r1, [r3, r1]
 800a532:	0409      	lsls	r1, r1, #16
 800a534:	1852      	adds	r2, r2, r1
 800a536:	4641      	mov	r1, r8
 800a538:	3104      	adds	r1, #4
 800a53a:	5c59      	ldrb	r1, [r3, r1]
 800a53c:	0609      	lsls	r1, r1, #24
 800a53e:	1852      	adds	r2, r2, r1
 800a540:	4964      	ldr	r1, [pc, #400]	; (800a6d4 <PxMessagingTask+0x1be0>)
 800a542:	664a      	str	r2, [r1, #100]	; 0x64
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a544:	4642      	mov	r2, r8
 800a546:	3205      	adds	r2, #5
 800a548:	5c98      	ldrb	r0, [r3, r2]
 800a54a:	4642      	mov	r2, r8
 800a54c:	3206      	adds	r2, #6
 800a54e:	5c9a      	ldrb	r2, [r3, r2]
 800a550:	0212      	lsls	r2, r2, #8
 800a552:	1882      	adds	r2, r0, r2
 800a554:	4640      	mov	r0, r8
 800a556:	3007      	adds	r0, #7
 800a558:	5c18      	ldrb	r0, [r3, r0]
 800a55a:	0400      	lsls	r0, r0, #16
 800a55c:	1812      	adds	r2, r2, r0
 800a55e:	4640      	mov	r0, r8
 800a560:	3008      	adds	r0, #8
 800a562:	5c18      	ldrb	r0, [r3, r0]
 800a564:	0600      	lsls	r0, r0, #24
 800a566:	1812      	adds	r2, r2, r0
 800a568:	668a      	str	r2, [r1, #104]	; 0x68
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a56a:	4642      	mov	r2, r8
 800a56c:	3209      	adds	r2, #9
 800a56e:	5c98      	ldrb	r0, [r3, r2]
 800a570:	3201      	adds	r2, #1
 800a572:	5c9a      	ldrb	r2, [r3, r2]
 800a574:	0212      	lsls	r2, r2, #8
 800a576:	1880      	adds	r0, r0, r2
 800a578:	4642      	mov	r2, r8
 800a57a:	320b      	adds	r2, #11
 800a57c:	5c9a      	ldrb	r2, [r3, r2]
 800a57e:	0412      	lsls	r2, r2, #16
 800a580:	1880      	adds	r0, r0, r2
 800a582:	4642      	mov	r2, r8
 800a584:	320c      	adds	r2, #12
 800a586:	5c9a      	ldrb	r2, [r3, r2]
 800a588:	0612      	lsls	r2, r2, #24
 800a58a:	1882      	adds	r2, r0, r2
 800a58c:	66ca      	str	r2, [r1, #108]	; 0x6c
									break;
 800a58e:	e772      	b.n	800a476 <PxMessagingTask+0x1982>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a590:	3201      	adds	r2, #1
 800a592:	4b4c      	ldr	r3, [pc, #304]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a594:	2138      	movs	r1, #56	; 0x38
 800a596:	4369      	muls	r1, r5
 800a598:	185b      	adds	r3, r3, r1
 800a59a:	5c9a      	ldrb	r2, [r3, r2]
 800a59c:	4641      	mov	r1, r8
 800a59e:	3102      	adds	r1, #2
 800a5a0:	5c59      	ldrb	r1, [r3, r1]
 800a5a2:	0209      	lsls	r1, r1, #8
 800a5a4:	1852      	adds	r2, r2, r1
 800a5a6:	4641      	mov	r1, r8
 800a5a8:	3103      	adds	r1, #3
 800a5aa:	5c59      	ldrb	r1, [r3, r1]
 800a5ac:	0409      	lsls	r1, r1, #16
 800a5ae:	1852      	adds	r2, r2, r1
 800a5b0:	4641      	mov	r1, r8
 800a5b2:	3104      	adds	r1, #4
 800a5b4:	5c59      	ldrb	r1, [r3, r1]
 800a5b6:	0609      	lsls	r1, r1, #24
 800a5b8:	1852      	adds	r2, r2, r1
 800a5ba:	4946      	ldr	r1, [pc, #280]	; (800a6d4 <PxMessagingTask+0x1be0>)
 800a5bc:	670a      	str	r2, [r1, #112]	; 0x70
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a5be:	4642      	mov	r2, r8
 800a5c0:	3205      	adds	r2, #5
 800a5c2:	5c98      	ldrb	r0, [r3, r2]
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	3206      	adds	r2, #6
 800a5c8:	5c9a      	ldrb	r2, [r3, r2]
 800a5ca:	0212      	lsls	r2, r2, #8
 800a5cc:	1882      	adds	r2, r0, r2
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	3007      	adds	r0, #7
 800a5d2:	5c18      	ldrb	r0, [r3, r0]
 800a5d4:	0400      	lsls	r0, r0, #16
 800a5d6:	1812      	adds	r2, r2, r0
 800a5d8:	4640      	mov	r0, r8
 800a5da:	3008      	adds	r0, #8
 800a5dc:	5c18      	ldrb	r0, [r3, r0]
 800a5de:	0600      	lsls	r0, r0, #24
 800a5e0:	1812      	adds	r2, r2, r0
 800a5e2:	674a      	str	r2, [r1, #116]	; 0x74
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a5e4:	4642      	mov	r2, r8
 800a5e6:	3209      	adds	r2, #9
 800a5e8:	5c98      	ldrb	r0, [r3, r2]
 800a5ea:	3201      	adds	r2, #1
 800a5ec:	5c9a      	ldrb	r2, [r3, r2]
 800a5ee:	0212      	lsls	r2, r2, #8
 800a5f0:	1880      	adds	r0, r0, r2
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	320b      	adds	r2, #11
 800a5f6:	5c9a      	ldrb	r2, [r3, r2]
 800a5f8:	0412      	lsls	r2, r2, #16
 800a5fa:	1880      	adds	r0, r0, r2
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	320c      	adds	r2, #12
 800a600:	5c9a      	ldrb	r2, [r3, r2]
 800a602:	0612      	lsls	r2, r2, #24
 800a604:	1882      	adds	r2, r0, r2
 800a606:	678a      	str	r2, [r1, #120]	; 0x78
									break;
 800a608:	e735      	b.n	800a476 <PxMessagingTask+0x1982>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a60a:	4643      	mov	r3, r8
 800a60c:	3301      	adds	r3, #1
 800a60e:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <PxMessagingTask+0x1bd0>)
 800a610:	2138      	movs	r1, #56	; 0x38
 800a612:	4369      	muls	r1, r5
 800a614:	1852      	adds	r2, r2, r1
 800a616:	5cd3      	ldrb	r3, [r2, r3]
 800a618:	4641      	mov	r1, r8
 800a61a:	3102      	adds	r1, #2
 800a61c:	5c51      	ldrb	r1, [r2, r1]
 800a61e:	0209      	lsls	r1, r1, #8
 800a620:	185b      	adds	r3, r3, r1
 800a622:	4641      	mov	r1, r8
 800a624:	3103      	adds	r1, #3
 800a626:	5c51      	ldrb	r1, [r2, r1]
 800a628:	0409      	lsls	r1, r1, #16
 800a62a:	185b      	adds	r3, r3, r1
 800a62c:	4641      	mov	r1, r8
 800a62e:	3104      	adds	r1, #4
 800a630:	5c52      	ldrb	r2, [r2, r1]
 800a632:	0612      	lsls	r2, r2, #24
 800a634:	189b      	adds	r3, r3, r2
 800a636:	4a27      	ldr	r2, [pc, #156]	; (800a6d4 <PxMessagingTask+0x1be0>)
 800a638:	67d3      	str	r3, [r2, #124]	; 0x7c
 800a63a:	e71c      	b.n	800a476 <PxMessagingTask+0x1982>
								ADCSelectChannel(ADCPort,"top");
 800a63c:	4e26      	ldr	r6, [pc, #152]	; (800a6d8 <PxMessagingTask+0x1be4>)
 800a63e:	0031      	movs	r1, r6
 800a640:	f002 fb7c 	bl	800cd3c <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 800a644:	4b22      	ldr	r3, [pc, #136]	; (800a6d0 <PxMessagingTask+0x1bdc>)
 800a646:	001a      	movs	r2, r3
 800a648:	320c      	adds	r2, #12
 800a64a:	7a18      	ldrb	r0, [r3, #8]
 800a64c:	0031      	movs	r1, r6
 800a64e:	f002 fba5 	bl	800cd9c <ReadADCChannel>
 800a652:	e723      	b.n	800a49c <PxMessagingTask+0x19a8>
								ADCSelectChannel(ADCPort,"bottom");
 800a654:	4e21      	ldr	r6, [pc, #132]	; (800a6dc <PxMessagingTask+0x1be8>)
 800a656:	0031      	movs	r1, r6
 800a658:	f002 fb70 	bl	800cd3c <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a65c:	4b1c      	ldr	r3, [pc, #112]	; (800a6d0 <PxMessagingTask+0x1bdc>)
 800a65e:	001a      	movs	r2, r3
 800a660:	320c      	adds	r2, #12
 800a662:	7a18      	ldrb	r0, [r3, #8]
 800a664:	0031      	movs	r1, r6
 800a666:	f002 fb99 	bl	800cd9c <ReadADCChannel>
 800a66a:	e717      	b.n	800a49c <PxMessagingTask+0x19a8>
							ACK_FLAG =1;
 800a66c:	4b1c      	ldr	r3, [pc, #112]	; (800a6e0 <PxMessagingTask+0x1bec>)
 800a66e:	2201      	movs	r2, #1
 800a670:	701a      	strb	r2, [r3, #0]
							break;
 800a672:	f7fe fa99 	bl	8008ba8 <PxMessagingTask+0xb4>
							rejected_FLAG =1;
 800a676:	4b1b      	ldr	r3, [pc, #108]	; (800a6e4 <PxMessagingTask+0x1bf0>)
 800a678:	2201      	movs	r2, #1
 800a67a:	701a      	strb	r2, [r3, #0]
							break;
 800a67c:	f7fe fa94 	bl	8008ba8 <PxMessagingTask+0xb4>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a680:	4643      	mov	r3, r8
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	0033      	movs	r3, r6
 800a686:	465a      	mov	r2, fp
 800a688:	9906      	ldr	r1, [sp, #24]
 800a68a:	0038      	movs	r0, r7
 800a68c:	f7fe fa30 	bl	8008af0 <User_MessagingParser>
 800a690:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 800a692:	2801      	cmp	r0, #1
 800a694:	d001      	beq.n	800a69a <PxMessagingTask+0x1ba6>
 800a696:	f7fe fa87 	bl	8008ba8 <PxMessagingTask+0xb4>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800a69a:	4643      	mov	r3, r8
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	0033      	movs	r3, r6
 800a6a0:	465a      	mov	r2, fp
 800a6a2:	9906      	ldr	r1, [sp, #24]
 800a6a4:	0038      	movs	r0, r7
 800a6a6:	f000 fa59 	bl	800ab5c <Module_MessagingTask>
 800a6aa:	4681      	mov	r9, r0
 800a6ac:	f7fe fa7c 	bl	8008ba8 <PxMessagingTask+0xb4>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4658      	mov	r0, fp
 800a6b6:	f7fd ff55 	bl	8008564 <SendMessageToModule>
			result =BOS_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	4699      	mov	r9, r3
 800a6be:	f7fe fa78 	bl	8008bb2 <PxMessagingTask+0xbe>
 800a6c2:	46c0      	nop			; (mov r8, r8)
 800a6c4:	20000a38 	.word	0x20000a38
 800a6c8:	20000970 	.word	0x20000970
 800a6cc:	2000096c 	.word	0x2000096c
 800a6d0:	20001d80 	.word	0x20001d80
 800a6d4:	20001d00 	.word	0x20001d00
 800a6d8:	0801aa44 	.word	0x0801aa44
 800a6dc:	0801aa48 	.word	0x0801aa48
 800a6e0:	20000ee6 	.word	0x20000ee6
 800a6e4:	20000ee5 	.word	0x20000ee5

0800a6e8 <SystemClock_Config>:
	|												 Private Functions	 														|
   ----------------------------------------------------------------------- 
*/

void SystemClock_Config(void)
{
 800a6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ea:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a6ec:	2401      	movs	r4, #1
 800a6ee:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a6f0:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a6f2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a6f8:	2702      	movs	r7, #2
 800a6fa:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a6fc:	2680      	movs	r6, #128	; 0x80
 800a6fe:	0276      	lsls	r6, r6, #9
 800a700:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a702:	2380      	movs	r3, #128	; 0x80
 800a704:	035b      	lsls	r3, r3, #13
 800a706:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a708:	2500      	movs	r5, #0
 800a70a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a70c:	a80d      	add	r0, sp, #52	; 0x34
 800a70e:	f007 f833 	bl	8011778 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800a712:	2307      	movs	r3, #7
 800a714:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a716:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a718:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a71a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a71c:	2101      	movs	r1, #1
 800a71e:	a809      	add	r0, sp, #36	; 0x24
 800a720:	f007 fad0 	bl	8011cc4 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800a724:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <SystemClock_Config+0xa8>)
 800a726:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a728:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a72a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a72c:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a72e:	a802      	add	r0, sp, #8
 800a730:	f007 fc5e 	bl	8011ff0 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800a734:	4d17      	ldr	r5, [pc, #92]	; (800a794 <SystemClock_Config+0xac>)
 800a736:	69eb      	ldr	r3, [r5, #28]
 800a738:	2280      	movs	r2, #128	; 0x80
 800a73a:	0552      	lsls	r2, r2, #21
 800a73c:	4313      	orrs	r3, r2
 800a73e:	61eb      	str	r3, [r5, #28]
 800a740:	69eb      	ldr	r3, [r5, #28]
 800a742:	4013      	ands	r3, r2
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800a748:	f007 f80c 	bl	8011764 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a74c:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a74e:	23c0      	movs	r3, #192	; 0xc0
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a754:	a802      	add	r0, sp, #8
 800a756:	f007 fc4b 	bl	8011ff0 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a75a:	f007 fc25 	bl	8011fa8 <HAL_RCC_GetHCLKFreq>
 800a75e:	21fa      	movs	r1, #250	; 0xfa
 800a760:	0089      	lsls	r1, r1, #2
 800a762:	f7f5 fcf5 	bl	8000150 <__udivsi3>
 800a766:	f005 ff67 	bl	8010638 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a76a:	2004      	movs	r0, #4
 800a76c:	f005 ff80 	bl	8010670 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800a770:	69ab      	ldr	r3, [r5, #24]
 800a772:	4323      	orrs	r3, r4
 800a774:	61ab      	str	r3, [r5, #24]
 800a776:	69ab      	ldr	r3, [r5, #24]
 800a778:	401c      	ands	r4, r3
 800a77a:	9401      	str	r4, [sp, #4]
 800a77c:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a77e:	2001      	movs	r0, #1
 800a780:	2200      	movs	r2, #0
 800a782:	2100      	movs	r1, #0
 800a784:	4240      	negs	r0, r0
 800a786:	f005 ff13 	bl	80105b0 <HAL_NVIC_SetPriority>
	
}
 800a78a:	b01b      	add	sp, #108	; 0x6c
 800a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	00040003 	.word	0x00040003
 800a794:	40021000 	.word	0x40021000

0800a798 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800a798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79a:	46ce      	mov	lr, r9
 800a79c:	4647      	mov	r7, r8
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9302      	str	r3, [sp, #8]
 800a7a6:	2211      	movs	r2, #17
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	a803      	add	r0, sp, #12
 800a7ac:	f00a f8bb 	bl	8014926 <memset>
	
	HAL_FLASH_Unlock();
 800a7b0:	f006 fd68 	bl	8011284 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800a7b4:	486a      	ldr	r0, [pc, #424]	; (800a960 <SaveToRO+0x1c8>)
 800a7b6:	f006 fe13 	bl	80113e0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a7ba:	486a      	ldr	r0, [pc, #424]	; (800a964 <SaveToRO+0x1cc>)
 800a7bc:	f006 fd80 	bl	80112c0 <FLASH_WaitForLastOperation>
 800a7c0:	9001      	str	r0, [sp, #4]
 800a7c2:	4680      	mov	r8, r0
	if(FlashStatus != HAL_OK) {
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d10b      	bne.n	800a7e0 <SaveToRO+0x48>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a7c8:	4a67      	ldr	r2, [pc, #412]	; (800a968 <SaveToRO+0x1d0>)
 800a7ca:	6913      	ldr	r3, [r2, #16]
 800a7cc:	2102      	movs	r1, #2
 800a7ce:	438b      	bics	r3, r1
 800a7d0:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800a7d2:	4b66      	ldr	r3, [pc, #408]	; (800a96c <SaveToRO+0x1d4>)
 800a7d4:	781a      	ldrb	r2, [r3, #0]
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	d10c      	bne.n	800a7f4 <SaveToRO+0x5c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
					currentAdd += 2;
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a7da:	9c01      	ldr	r4, [sp, #4]
 800a7dc:	4e64      	ldr	r6, [pc, #400]	; (800a970 <SaveToRO+0x1d8>)
 800a7de:	e089      	b.n	800a8f4 <SaveToRO+0x15c>
		return pFlash.ErrorCode;
 800a7e0:	4b64      	ldr	r3, [pc, #400]	; (800a974 <SaveToRO+0x1dc>)
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	4698      	mov	r8, r3
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	b009      	add	sp, #36	; 0x24
 800a7ec:	bcc0      	pop	{r6, r7}
 800a7ee:	46b9      	mov	r9, r7
 800a7f0:	46b0      	mov	r8, r6
 800a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800a7f4:	4b60      	ldr	r3, [pc, #384]	; (800a978 <SaveToRO+0x1e0>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	18d2      	adds	r2, r2, r3
 800a7fc:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a7fe:	2300      	movs	r3, #0
 800a800:	4957      	ldr	r1, [pc, #348]	; (800a960 <SaveToRO+0x1c8>)
 800a802:	2001      	movs	r0, #1
 800a804:	f006 fd88 	bl	8011318 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a808:	4856      	ldr	r0, [pc, #344]	; (800a964 <SaveToRO+0x1cc>)
 800a80a:	f006 fd59 	bl	80112c0 <FLASH_WaitForLastOperation>
 800a80e:	1e06      	subs	r6, r0, #0
		if (FlashStatus != HAL_OK) {
 800a810:	d107      	bne.n	800a822 <SaveToRO+0x8a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a812:	4a55      	ldr	r2, [pc, #340]	; (800a968 <SaveToRO+0x1d0>)
 800a814:	6913      	ldr	r3, [r2, #16]
 800a816:	2101      	movs	r1, #1
 800a818:	438b      	bics	r3, r1
 800a81a:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800a81c:	2501      	movs	r5, #1
	uint16_t add = 2, temp = 0;
 800a81e:	2702      	movs	r7, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800a820:	e031      	b.n	800a886 <SaveToRO+0xee>
			return pFlash.ErrorCode;
 800a822:	4b54      	ldr	r3, [pc, #336]	; (800a974 <SaveToRO+0x1dc>)
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	4698      	mov	r8, r3
 800a82a:	e7dd      	b.n	800a7e8 <SaveToRO+0x50>
						return pFlash.ErrorCode;
 800a82c:	4b51      	ldr	r3, [pc, #324]	; (800a974 <SaveToRO+0x1dc>)
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	4698      	mov	r8, r3
 800a834:	e7d8      	b.n	800a7e8 <SaveToRO+0x50>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a836:	3401      	adds	r4, #1
 800a838:	b2e4      	uxtb	r4, r4
 800a83a:	2c0a      	cmp	r4, #10
 800a83c:	d821      	bhi.n	800a882 <SaveToRO+0xea>
				if (array[i-1][0]) {
 800a83e:	1e69      	subs	r1, r5, #1
 800a840:	4b4e      	ldr	r3, [pc, #312]	; (800a97c <SaveToRO+0x1e4>)
 800a842:	2216      	movs	r2, #22
 800a844:	434a      	muls	r2, r1
 800a846:	5ad3      	ldrh	r3, [r2, r3]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0f4      	beq.n	800a836 <SaveToRO+0x9e>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800a84c:	4a4b      	ldr	r2, [pc, #300]	; (800a97c <SaveToRO+0x1e4>)
 800a84e:	008b      	lsls	r3, r1, #2
 800a850:	185b      	adds	r3, r3, r1
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	185b      	adds	r3, r3, r1
 800a856:	191b      	adds	r3, r3, r4
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	5a9a      	ldrh	r2, [r3, r2]
 800a85c:	4b40      	ldr	r3, [pc, #256]	; (800a960 <SaveToRO+0x1c8>)
 800a85e:	18f9      	adds	r1, r7, r3
 800a860:	2300      	movs	r3, #0
 800a862:	2001      	movs	r0, #1
 800a864:	f006 fd58 	bl	8011318 <HAL_FLASH_Program>
					add += 2;
 800a868:	3702      	adds	r7, #2
 800a86a:	b2bf      	uxth	r7, r7
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a86c:	483d      	ldr	r0, [pc, #244]	; (800a964 <SaveToRO+0x1cc>)
 800a86e:	f006 fd27 	bl	80112c0 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a872:	2800      	cmp	r0, #0
 800a874:	d1da      	bne.n	800a82c <SaveToRO+0x94>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a876:	4a3c      	ldr	r2, [pc, #240]	; (800a968 <SaveToRO+0x1d0>)
 800a878:	6913      	ldr	r3, [r2, #16]
 800a87a:	2101      	movs	r1, #1
 800a87c:	438b      	bics	r3, r1
 800a87e:	6113      	str	r3, [r2, #16]
 800a880:	e7d9      	b.n	800a836 <SaveToRO+0x9e>
		for(uint8_t i=1 ; i<=N ; i++)
 800a882:	3501      	adds	r5, #1
 800a884:	b2ed      	uxtb	r5, r5
 800a886:	4b3c      	ldr	r3, [pc, #240]	; (800a978 <SaveToRO+0x1e0>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	42ab      	cmp	r3, r5
 800a88c:	d3a5      	bcc.n	800a7da <SaveToRO+0x42>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a88e:	0034      	movs	r4, r6
 800a890:	e7d3      	b.n	800a83a <SaveToRO+0xa2>
					return pFlash.ErrorCode;
 800a892:	4b38      	ldr	r3, [pc, #224]	; (800a974 <SaveToRO+0x1dc>)
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	b2db      	uxtb	r3, r3
 800a898:	4698      	mov	r8, r3
 800a89a:	e7a5      	b.n	800a7e8 <SaveToRO+0x50>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a89c:	4645      	mov	r5, r8
 800a89e:	4b38      	ldr	r3, [pc, #224]	; (800a980 <SaveToRO+0x1e8>)
 800a8a0:	00ba      	lsls	r2, r7, #2
 800a8a2:	19d2      	adds	r2, r2, r7
 800a8a4:	0092      	lsls	r2, r2, #2
 800a8a6:	189b      	adds	r3, r3, r2
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	4699      	mov	r9, r3
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f7f5 fc33 	bl	8000118 <strlen>
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	0840      	lsrs	r0, r0, #1
 800a8b6:	4285      	cmp	r5, r0
 800a8b8:	d21a      	bcs.n	800a8f0 <SaveToRO+0x158>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800a8ba:	006b      	lsls	r3, r5, #1
 800a8bc:	464a      	mov	r2, r9
 800a8be:	5ad2      	ldrh	r2, [r2, r3]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	0031      	movs	r1, r6
 800a8c4:	2001      	movs	r0, #1
 800a8c6:	f006 fd27 	bl	8011318 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a8ca:	4826      	ldr	r0, [pc, #152]	; (800a964 <SaveToRO+0x1cc>)
 800a8cc:	f006 fcf8 	bl	80112c0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d108      	bne.n	800a8e6 <SaveToRO+0x14e>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a8d4:	4a24      	ldr	r2, [pc, #144]	; (800a968 <SaveToRO+0x1d0>)
 800a8d6:	6913      	ldr	r3, [r2, #16]
 800a8d8:	2101      	movs	r1, #1
 800a8da:	438b      	bics	r3, r1
 800a8dc:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a8de:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	b2ed      	uxtb	r5, r5
 800a8e4:	e7db      	b.n	800a89e <SaveToRO+0x106>
					return pFlash.ErrorCode;
 800a8e6:	4b23      	ldr	r3, [pc, #140]	; (800a974 <SaveToRO+0x1dc>)
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	4698      	mov	r8, r3
 800a8ee:	e77b      	b.n	800a7e8 <SaveToRO+0x50>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a8f0:	3401      	adds	r4, #1
 800a8f2:	b2e4      	uxtb	r4, r4
 800a8f4:	4b23      	ldr	r3, [pc, #140]	; (800a984 <SaveToRO+0x1ec>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d92d      	bls.n	800a958 <SaveToRO+0x1c0>
		if (snippets[s].cond.conditionType) 
 800a8fc:	0027      	movs	r7, r4
 800a8fe:	4a20      	ldr	r2, [pc, #128]	; (800a980 <SaveToRO+0x1e8>)
 800a900:	00a3      	lsls	r3, r4, #2
 800a902:	191b      	adds	r3, r3, r4
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	5c9b      	ldrb	r3, [r3, r2]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0f1      	beq.n	800a8f0 <SaveToRO+0x158>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a90c:	23fe      	movs	r3, #254	; 0xfe
 800a90e:	aa02      	add	r2, sp, #8
 800a910:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800a912:	00a1      	lsls	r1, r4, #2
 800a914:	1909      	adds	r1, r1, r4
 800a916:	0089      	lsls	r1, r1, #2
 800a918:	4b19      	ldr	r3, [pc, #100]	; (800a980 <SaveToRO+0x1e8>)
 800a91a:	18c9      	adds	r1, r1, r3
 800a91c:	2214      	movs	r2, #20
 800a91e:	ab02      	add	r3, sp, #8
 800a920:	1c58      	adds	r0, r3, #1
 800a922:	f00a f92c 	bl	8014b7e <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a926:	4645      	mov	r5, r8
 800a928:	2d09      	cmp	r5, #9
 800a92a:	d8b7      	bhi.n	800a89c <SaveToRO+0x104>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a92c:	006b      	lsls	r3, r5, #1
 800a92e:	aa02      	add	r2, sp, #8
 800a930:	5ad2      	ldrh	r2, [r2, r3]
 800a932:	2300      	movs	r3, #0
 800a934:	0031      	movs	r1, r6
 800a936:	2001      	movs	r0, #1
 800a938:	f006 fcee 	bl	8011318 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <SaveToRO+0x1cc>)
 800a93e:	f006 fcbf 	bl	80112c0 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a942:	2800      	cmp	r0, #0
 800a944:	d1a5      	bne.n	800a892 <SaveToRO+0xfa>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a946:	4a08      	ldr	r2, [pc, #32]	; (800a968 <SaveToRO+0x1d0>)
 800a948:	6913      	ldr	r3, [r2, #16]
 800a94a:	2101      	movs	r1, #1
 800a94c:	438b      	bics	r3, r1
 800a94e:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a950:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a952:	3501      	adds	r5, #1
 800a954:	b2ed      	uxtb	r5, r5
 800a956:	e7e7      	b.n	800a928 <SaveToRO+0x190>
	HAL_FLASH_Lock();
 800a958:	f006 fca8 	bl	80112ac <HAL_FLASH_Lock>
	return result;
 800a95c:	e744      	b.n	800a7e8 <SaveToRO+0x50>
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	0801d800 	.word	0x0801d800
 800a964:	0000c350 	.word	0x0000c350
 800a968:	40022000 	.word	0x40022000
 800a96c:	200007a0 	.word	0x200007a0
 800a970:	0801dc00 	.word	0x0801dc00
 800a974:	20006c28 	.word	0x20006c28
 800a978:	20000008 	.word	0x20000008
 800a97c:	20000c7c 	.word	0x20000c7c
 800a980:	200014a8 	.word	0x200014a8
 800a984:	200014a4 	.word	0x200014a4

0800a988 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800a988:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800a98a:	4807      	ldr	r0, [pc, #28]	; (800a9a8 <ClearROtopology+0x20>)
 800a98c:	228f      	movs	r2, #143	; 0x8f
 800a98e:	0092      	lsls	r2, r2, #2
 800a990:	2100      	movs	r1, #0
 800a992:	f009 ffc8 	bl	8014926 <memset>
	N = 1; myID = 0;
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <ClearROtopology+0x24>)
 800a998:	2201      	movs	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <ClearROtopology+0x28>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800a9a2:	f7ff fef9 	bl	800a798 <SaveToRO>
}
 800a9a6:	bd10      	pop	{r4, pc}
 800a9a8:	20000c7c 	.word	0x20000c7c
 800a9ac:	20000008 	.word	0x20000008
 800a9b0:	200007a0 	.word	0x200007a0

0800a9b4 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a9b4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a9b6:	f003 fa75 	bl	800dea4 <GetUart>
 800a9ba:	0004      	movs	r4, r0

	huart->Init.BaudRate =57600;
 800a9bc:	23e1      	movs	r3, #225	; 0xe1
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a9c2:	2380      	movs	r3, #128	; 0x80
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a9c8:	2380      	movs	r3, #128	; 0x80
 800a9ca:	015b      	lsls	r3, r3, #5
 800a9cc:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a9ce:	f008 fa27 	bl	8012e20 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	6813      	ldr	r3, [r2, #0]
 800a9d6:	2120      	movs	r1, #32
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	6013      	str	r3, [r2, #0]
}
 800a9dc:	bd10      	pop	{r4, pc}
	...

0800a9e0 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e2:	46c6      	mov	lr, r8
 800a9e4:	b500      	push	{lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	000e      	movs	r6, r1
 800a9ec:	0014      	movs	r4, r2
 800a9ee:	001f      	movs	r7, r3
	myOutport =FindRoute(myID,dst);
 800a9f0:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <remoteBootloaderUpdate+0xa8>)
 800a9f2:	7818      	ldrb	r0, [r3, #0]
 800a9f4:	f7f9 f9a4 	bl	8003d40 <FindRoute>
 800a9f8:	0005      	movs	r5, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a9fa:	2f00      	cmp	r7, #0
 800a9fc:	d003      	beq.n	800aa06 <remoteBootloaderUpdate+0x26>
 800a9fe:	4b22      	ldr	r3, [pc, #136]	; (800aa88 <remoteBootloaderUpdate+0xa8>)
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	42b3      	cmp	r3, r6
 800aa04:	d01b      	beq.n	800aa3e <remoteBootloaderUpdate+0x5e>
	if(src == myID){
 800aa06:	4b20      	ldr	r3, [pc, #128]	; (800aa88 <remoteBootloaderUpdate+0xa8>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	4543      	cmp	r3, r8
 800aa0c:	d019      	beq.n	800aa42 <remoteBootloaderUpdate+0x62>
	SetupPortForRemoteBootloaderUpdate(inport);
 800aa0e:	0020      	movs	r0, r4
 800aa10:	f7ff ffd0 	bl	800a9b4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800aa14:	0028      	movs	r0, r5
 800aa16:	f7ff ffcd 	bl	800a9b4 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800aa1a:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <remoteBootloaderUpdate+0xa8>)
 800aa1c:	7819      	ldrb	r1, [r3, #0]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	9302      	str	r3, [sp, #8]
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	3303      	adds	r3, #3
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	000b      	movs	r3, r1
 800aa2e:	002a      	movs	r2, r5
 800aa30:	0020      	movs	r0, r4
 800aa32:	f7fd fdbd 	bl	80085b0 <StartScastDMAStream>
}
 800aa36:	b004      	add	sp, #16
 800aa38:	bc80      	pop	{r7}
 800aa3a:	46b8      	mov	r8, r7
 800aa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		myOutport =outport;
 800aa3e:	003d      	movs	r5, r7
 800aa40:	e7e1      	b.n	800aa06 <remoteBootloaderUpdate+0x26>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800aa42:	f003 fcf5 	bl	800e430 <FreeRTOS_CLIGetOutputBuffer>
 800aa46:	4680      	mov	r8, r0
		if(outport == 0)		// This is a remote module update
 800aa48:	2f00      	cmp	r7, #0
 800aa4a:	d116      	bne.n	800aa7a <remoteBootloaderUpdate+0x9a>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <remoteBootloaderUpdate+0xac>)
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	0032      	movs	r2, r6
 800aa52:	f009 fedb 	bl	801480c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800aa56:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <remoteBootloaderUpdate+0xb0>)
 800aa58:	6819      	ldr	r1, [r3, #0]
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f009 ff6b 	bl	8014936 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800aa60:	4640      	mov	r0, r8
 800aa62:	f7f5 fb59 	bl	8000118 <strlen>
 800aa66:	b282      	uxth	r2, r0
 800aa68:	2332      	movs	r3, #50	; 0x32
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	0020      	movs	r0, r4
 800aa6e:	f003 fa67 	bl	800df40 <writePxITMutex>
		Delay_ms(100);
 800aa72:	2064      	movs	r0, #100	; 0x64
 800aa74:	f005 fab8 	bl	800ffe8 <HAL_Delay>
 800aa78:	e7c9      	b.n	800aa0e <remoteBootloaderUpdate+0x2e>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800aa7a:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <remoteBootloaderUpdate+0xb4>)
 800aa7c:	6819      	ldr	r1, [r3, #0]
 800aa7e:	003b      	movs	r3, r7
 800aa80:	0032      	movs	r2, r6
 800aa82:	f009 fec3 	bl	801480c <sprintf>
 800aa86:	e7e6      	b.n	800aa56 <remoteBootloaderUpdate+0x76>
 800aa88:	200007a0 	.word	0x200007a0
 800aa8c:	2000005c 	.word	0x2000005c
 800aa90:	20000054 	.word	0x20000054
 800aa94:	20000058 	.word	0x20000058

0800aa98 <Module_Peripheral_Init>:

/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800aa98:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART2_UART_Init();
 800aa9a:	f003 f85d 	bl	800db58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800aa9e:	f003 f873 	bl	800db88 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800aaa2:	f003 f889 	bl	800dbb8 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800aaa6:	f003 f89f 	bl	800dbe8 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800aaaa:	f003 f8b5 	bl	800dc18 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART1_UART_Init();
 800aaae:	f003 f83b 	bl	800db28 <MX_USART1_UART_Init>

  HAL_UART_Receive_DMA(&huart1, UserBufferData, sizeof(UserBufferData));
 800aab2:	2280      	movs	r2, #128	; 0x80
 800aab4:	4904      	ldr	r1, [pc, #16]	; (800aac8 <Module_Peripheral_Init+0x30>)
 800aab6:	4c05      	ldr	r4, [pc, #20]	; (800aacc <Module_Peripheral_Init+0x34>)
 800aab8:	0052      	lsls	r2, r2, #1
 800aaba:	0020      	movs	r0, r4
 800aabc:	f007 fe78 	bl	80127b0 <HAL_UART_Receive_DMA>
  DMACountUserDataBuffer=&(DMA2_Channel3->CNDTR);
 800aac0:	4b03      	ldr	r3, [pc, #12]	; (800aad0 <Module_Peripheral_Init+0x38>)
 800aac2:	6723      	str	r3, [r4, #112]	; 0x70
	
}
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	20001f54 	.word	0x20001f54
 800aacc:	20001ed8 	.word	0x20001ed8
 800aad0:	40020434 	.word	0x40020434

0800aad4 <RegisterModuleCLICommands>:
/*-----------------------------------------------------------*/

/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{
 800aad4:	b510      	push	{r4, lr}
	 FreeRTOS_CLIRegisterCommand(&CLI_Transmit_DataCommandDefinition);
 800aad6:	4802      	ldr	r0, [pc, #8]	; (800aae0 <RegisterModuleCLICommands+0xc>)
 800aad8:	f003 fc28 	bl	800e32c <FreeRTOS_CLIRegisterCommand>

}
 800aadc:	bd10      	pop	{r4, pc}
 800aade:	46c0      	nop			; (mov r8, r8)
 800aae0:	08019c98 	.word	0x08019c98

0800aae4 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800aae4:	6803      	ldr	r3, [r0, #0]
 800aae6:	4a0d      	ldr	r2, [pc, #52]	; (800ab1c <GetPort+0x38>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00d      	beq.n	800ab08 <GetPort+0x24>
			return P1;
	else if (huart->Instance == USART6)
 800aaec:	4a0c      	ldr	r2, [pc, #48]	; (800ab20 <GetPort+0x3c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00c      	beq.n	800ab0c <GetPort+0x28>
			return P2;
	else if (huart->Instance == USART3)
 800aaf2:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <GetPort+0x40>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00b      	beq.n	800ab10 <GetPort+0x2c>
			return P3;
	else if (huart->Instance == USART4)
 800aaf8:	4a0b      	ldr	r2, [pc, #44]	; (800ab28 <GetPort+0x44>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00a      	beq.n	800ab14 <GetPort+0x30>
			return P4;
	else if (huart->Instance == USART5)
 800aafe:	4a0b      	ldr	r2, [pc, #44]	; (800ab2c <GetPort+0x48>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d009      	beq.n	800ab18 <GetPort+0x34>
			return P5;
	return 0;
 800ab04:	2000      	movs	r0, #0
}
 800ab06:	4770      	bx	lr
			return P1;
 800ab08:	2001      	movs	r0, #1
 800ab0a:	e7fc      	b.n	800ab06 <GetPort+0x22>
			return P2;
 800ab0c:	2002      	movs	r0, #2
 800ab0e:	e7fa      	b.n	800ab06 <GetPort+0x22>
			return P3;
 800ab10:	2003      	movs	r0, #3
 800ab12:	e7f8      	b.n	800ab06 <GetPort+0x22>
			return P4;
 800ab14:	2004      	movs	r0, #4
 800ab16:	e7f6      	b.n	800ab06 <GetPort+0x22>
			return P5;
 800ab18:	2005      	movs	r0, #5
 800ab1a:	e7f4      	b.n	800ab06 <GetPort+0x22>
 800ab1c:	40004400 	.word	0x40004400
 800ab20:	40011400 	.word	0x40011400
 800ab24:	40004800 	.word	0x40004800
 800ab28:	40004c00 	.word	0x40004c00
 800ab2c:	40005000 	.word	0x40005000

0800ab30 <TransmitData>:

/* -----------------------------------------------------------------------
	|																APIs	 																 	|
   ----------------------------------------------------------------------- 
*/
Module_Status TransmitData(uint8_t* data,uint16_t Size){
 800ab30:	b510      	push	{r4, lr}
 800ab32:	000a      	movs	r2, r1
	Module_Status status=H1AR0_OK;

	if(data!=NULL && Size!=0)
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d00c      	beq.n	800ab52 <TransmitData+0x22>
 800ab38:	2900      	cmp	r1, #0
 800ab3a:	d101      	bne.n	800ab40 <TransmitData+0x10>
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);

	}
	else
	{
		status=H1AR0_ERROR;
 800ab3c:	20ff      	movs	r0, #255	; 0xff

	}

	return status;
}
 800ab3e:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);
 800ab40:	2301      	movs	r3, #1
 800ab42:	4c05      	ldr	r4, [pc, #20]	; (800ab58 <TransmitData+0x28>)
 800ab44:	425b      	negs	r3, r3
 800ab46:	0001      	movs	r1, r0
 800ab48:	0020      	movs	r0, r4
 800ab4a:	f008 f8bf 	bl	8012ccc <HAL_UART_Transmit>
	Module_Status status=H1AR0_OK;
 800ab4e:	2000      	movs	r0, #0
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);
 800ab50:	e7f5      	b.n	800ab3e <TransmitData+0xe>
		status=H1AR0_ERROR;
 800ab52:	20ff      	movs	r0, #255	; 0xff
 800ab54:	e7f3      	b.n	800ab3e <TransmitData+0xe>
 800ab56:	46c0      	nop			; (mov r8, r8)
 800ab58:	20001ed8 	.word	0x20001ed8

0800ab5c <Module_MessagingTask>:
{
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	ab04      	add	r3, sp, #16
 800ab60:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800ab62:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <Module_MessagingTask+0x34>)
 800ab64:	4298      	cmp	r0, r3
 800ab66:	d001      	beq.n	800ab6c <Module_MessagingTask+0x10>
			result = H1AR0_ERR_UnknownMessage;
 800ab68:	2001      	movs	r0, #1
}
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
		Size=(uint16_t)cMessage[port - 1][shift];
 800ab6c:	3901      	subs	r1, #1
 800ab6e:	4c09      	ldr	r4, [pc, #36]	; (800ab94 <Module_MessagingTask+0x38>)
 800ab70:	00cb      	lsls	r3, r1, #3
 800ab72:	1a58      	subs	r0, r3, r1
 800ab74:	00c0      	lsls	r0, r0, #3
 800ab76:	1820      	adds	r0, r4, r0
 800ab78:	5c85      	ldrb	r5, [r0, r2]
		TransmitData(&cMessage[port - 1][1+shift],Size);
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	1a58      	subs	r0, r3, r1
 800ab7e:	00c0      	lsls	r0, r0, #3
 800ab80:	1880      	adds	r0, r0, r2
 800ab82:	1900      	adds	r0, r0, r4
 800ab84:	0029      	movs	r1, r5
 800ab86:	f7ff ffd3 	bl	800ab30 <TransmitData>
	Module_Status result = H1AR0_OK;
 800ab8a:	2000      	movs	r0, #0
		break;
 800ab8c:	e7ed      	b.n	800ab6a <Module_MessagingTask+0xe>
 800ab8e:	46c0      	nop			; (mov r8, r8)
 800ab90:	00000514 	.word	0x00000514
 800ab94:	20000a38 	.word	0x20000a38

0800ab98 <CLI_Transmit_DataCommand>:

/* -----------------------------------------------------------------------
	|															Commands																 	|
   ----------------------------------------------------------------------- 
*/
portBASE_TYPE CLI_Transmit_DataCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	0004      	movs	r4, r0
 800ab9e:	0010      	movs	r0, r2
	Module_Status status = H1AR0_OK;;



	static int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	9301      	str	r3, [sp, #4]


	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 800aba4:	aa01      	add	r2, sp, #4
 800aba6:	2101      	movs	r1, #1
 800aba8:	f003 fc46 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800abac:	4b0c      	ldr	r3, [pc, #48]	; (800abe0 <CLI_Transmit_DataCommand+0x48>)
 800abae:	6758      	str	r0, [r3, #116]	; 0x74


	status=TransmitData(pcParameterString1, xParameterStringLength1);
 800abb0:	9901      	ldr	r1, [sp, #4]
 800abb2:	b289      	uxth	r1, r1
 800abb4:	f7ff ffbc 	bl	800ab30 <TransmitData>
	if(status == H1AR0_OK)
 800abb8:	2800      	cmp	r0, #0
 800abba:	d004      	beq.n	800abc6 <CLI_Transmit_DataCommand+0x2e>
	{
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);

	}

	else if(status == H1AR0_ERROR)
 800abbc:	28ff      	cmp	r0, #255	; 0xff
 800abbe:	d009      	beq.n	800abd4 <CLI_Transmit_DataCommand+0x3c>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);



	return pdFALSE;
}
 800abc0:	2000      	movs	r0, #0
 800abc2:	b002      	add	sp, #8
 800abc4:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);
 800abc6:	4b06      	ldr	r3, [pc, #24]	; (800abe0 <CLI_Transmit_DataCommand+0x48>)
 800abc8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800abca:	4906      	ldr	r1, [pc, #24]	; (800abe4 <CLI_Transmit_DataCommand+0x4c>)
 800abcc:	0020      	movs	r0, r4
 800abce:	f009 fe1d 	bl	801480c <sprintf>
 800abd2:	e7f5      	b.n	800abc0 <CLI_Transmit_DataCommand+0x28>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);
 800abd4:	4904      	ldr	r1, [pc, #16]	; (800abe8 <CLI_Transmit_DataCommand+0x50>)
 800abd6:	2210      	movs	r2, #16
 800abd8:	0020      	movs	r0, r4
 800abda:	f009 ffd0 	bl	8014b7e <memcpy>
 800abde:	e7ef      	b.n	800abc0 <CLI_Transmit_DataCommand+0x28>
 800abe0:	20001ed8 	.word	0x20001ed8
 800abe4:	0801c34c 	.word	0x0801c34c
 800abe8:	0801c374 	.word	0x0801c374

0800abec <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800abec:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800abee:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abf0:	2300      	movs	r3, #0
 800abf2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800abf4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800abf6:	2280      	movs	r2, #128	; 0x80
 800abf8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abfa:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abfc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800abfe:	3320      	adds	r3, #32
 800ac00:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac02:	2380      	movs	r3, #128	; 0x80
 800ac04:	019b      	lsls	r3, r3, #6
 800ac06:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ac08:	f005 fe74 	bl	80108f4 <HAL_DMA_Init>
}
 800ac0c:	bd10      	pop	{r4, pc}

0800ac0e <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ac0e:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ac10:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac12:	2310      	movs	r3, #16
 800ac14:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ac16:	2300      	movs	r3, #0
 800ac18:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ac1a:	2280      	movs	r2, #128	; 0x80
 800ac1c:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac1e:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac20:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ac22:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	019b      	lsls	r3, r3, #6
 800ac28:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ac2a:	f005 fe63 	bl	80108f4 <HAL_DMA_Init>
}
 800ac2e:	bd10      	pop	{r4, pc}

0800ac30 <DMA_Init>:
{
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800ac34:	4b1d      	ldr	r3, [pc, #116]	; (800acac <DMA_Init+0x7c>)
 800ac36:	6959      	ldr	r1, [r3, #20]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4311      	orrs	r1, r2
 800ac3c:	6159      	str	r1, [r3, #20]
 800ac3e:	6959      	ldr	r1, [r3, #20]
 800ac40:	400a      	ands	r2, r1
 800ac42:	9200      	str	r2, [sp, #0]
 800ac44:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ac46:	6959      	ldr	r1, [r3, #20]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	4311      	orrs	r1, r2
 800ac4c:	6159      	str	r1, [r3, #20]
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	401a      	ands	r2, r3
 800ac52:	9201      	str	r2, [sp, #4]
 800ac54:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800ac56:	4c16      	ldr	r4, [pc, #88]	; (800acb0 <DMA_Init+0x80>)
 800ac58:	4916      	ldr	r1, [pc, #88]	; (800acb4 <DMA_Init+0x84>)
 800ac5a:	0020      	movs	r0, r4
 800ac5c:	f7ff ffc6 	bl	800abec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800ac60:	0020      	movs	r0, r4
 800ac62:	3038      	adds	r0, #56	; 0x38
 800ac64:	4914      	ldr	r1, [pc, #80]	; (800acb8 <DMA_Init+0x88>)
 800ac66:	f7ff ffc1 	bl	800abec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA2_Channel2);
 800ac6a:	0020      	movs	r0, r4
 800ac6c:	3070      	adds	r0, #112	; 0x70
 800ac6e:	4913      	ldr	r1, [pc, #76]	; (800acbc <DMA_Init+0x8c>)
 800ac70:	f7ff ffbc 	bl	800abec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel5);
 800ac74:	0020      	movs	r0, r4
 800ac76:	30a8      	adds	r0, #168	; 0xa8
 800ac78:	4911      	ldr	r1, [pc, #68]	; (800acc0 <DMA_Init+0x90>)
 800ac7a:	f7ff ffb7 	bl	800abec <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel3);
 800ac7e:	0020      	movs	r0, r4
 800ac80:	30e0      	adds	r0, #224	; 0xe0
 800ac82:	4910      	ldr	r1, [pc, #64]	; (800acc4 <DMA_Init+0x94>)
 800ac84:	f7ff ffb2 	bl	800abec <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800ac88:	4c0f      	ldr	r4, [pc, #60]	; (800acc8 <DMA_Init+0x98>)
 800ac8a:	4910      	ldr	r1, [pc, #64]	; (800accc <DMA_Init+0x9c>)
 800ac8c:	0020      	movs	r0, r4
 800ac8e:	f7ff ffbe 	bl	800ac0e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800ac92:	0020      	movs	r0, r4
 800ac94:	3038      	adds	r0, #56	; 0x38
 800ac96:	490e      	ldr	r1, [pc, #56]	; (800acd0 <DMA_Init+0xa0>)
 800ac98:	f7ff ffb9 	bl	800ac0e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800ac9c:	0020      	movs	r0, r4
 800ac9e:	3070      	adds	r0, #112	; 0x70
 800aca0:	490c      	ldr	r1, [pc, #48]	; (800acd4 <DMA_Init+0xa4>)
 800aca2:	f7ff ffb4 	bl	800ac0e <DMA_MSG_TX_CH_Init>
}
 800aca6:	b002      	add	sp, #8
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	40021000 	.word	0x40021000
 800acb0:	20002548 	.word	0x20002548
 800acb4:	40020008 	.word	0x40020008
 800acb8:	40020030 	.word	0x40020030
 800acbc:	4002041c 	.word	0x4002041c
 800acc0:	40020058 	.word	0x40020058
 800acc4:	40020430 	.word	0x40020430
 800acc8:	200024a0 	.word	0x200024a0
 800accc:	4002001c 	.word	0x4002001c
 800acd0:	40020044 	.word	0x40020044
 800acd4:	40020080 	.word	0x40020080

0800acd8 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800acd8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800acda:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acdc:	2300      	movs	r3, #0
 800acde:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ace0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800ace2:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ace4:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ace6:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ace8:	3320      	adds	r3, #32
 800acea:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800acec:	2380      	movs	r3, #128	; 0x80
 800acee:	015b      	lsls	r3, r3, #5
 800acf0:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800acf2:	f005 fdff 	bl	80108f4 <HAL_DMA_Init>
}
 800acf6:	bd10      	pop	{r4, pc}

0800acf8 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800acf8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800acfa:	1e44      	subs	r4, r0, #1
 800acfc:	00e5      	lsls	r5, r4, #3
 800acfe:	1b28      	subs	r0, r5, r4
 800ad00:	00c0      	lsls	r0, r0, #3
 800ad02:	4e07      	ldr	r6, [pc, #28]	; (800ad20 <StopStreamDMA+0x28>)
 800ad04:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800ad06:	f005 fe48 	bl	801099a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800ad0a:	1b2d      	subs	r5, r5, r4
 800ad0c:	00ed      	lsls	r5, r5, #3
 800ad0e:	59aa      	ldr	r2, [r5, r6]
 800ad10:	2300      	movs	r3, #0
 800ad12:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800ad14:	4a03      	ldr	r2, [pc, #12]	; (800ad24 <StopStreamDMA+0x2c>)
 800ad16:	00a4      	lsls	r4, r4, #2
 800ad18:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800ad1a:	4a03      	ldr	r2, [pc, #12]	; (800ad28 <StopStreamDMA+0x30>)
 800ad1c:	50a3      	str	r3, [r4, r2]

}
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	20002350 	.word	0x20002350
 800ad24:	200016d0 	.word	0x200016d0
 800ad28:	200016e4 	.word	0x200016e4

0800ad2c <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800ad2c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800ad2e:	1e45      	subs	r5, r0, #1
 800ad30:	00ec      	lsls	r4, r5, #3
 800ad32:	1b60      	subs	r0, r4, r5
 800ad34:	00c0      	lsls	r0, r0, #3
 800ad36:	4e05      	ldr	r6, [pc, #20]	; (800ad4c <StopMsgDMA+0x20>)
 800ad38:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800ad3a:	f005 fe2e 	bl	801099a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800ad3e:	1b64      	subs	r4, r4, r5
 800ad40:	00e4      	lsls	r4, r4, #3
 800ad42:	59a3      	ldr	r3, [r4, r6]
 800ad44:	2200      	movs	r2, #0
 800ad46:	605a      	str	r2, [r3, #4]
}
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	20002548 	.word	0x20002548

0800ad50 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800ad50:	b510      	push	{r4, lr}
 800ad52:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800ad54:	f7ff ffea 	bl	800ad2c <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800ad58:	3c01      	subs	r4, #1
 800ad5a:	4a06      	ldr	r2, [pc, #24]	; (800ad74 <SwitchMsgDMAToStream+0x24>)
 800ad5c:	00e0      	lsls	r0, r4, #3
 800ad5e:	1b01      	subs	r1, r0, r4
 800ad60:	00c9      	lsls	r1, r1, #3
 800ad62:	5889      	ldr	r1, [r1, r2]
 800ad64:	1b00      	subs	r0, r0, r4
 800ad66:	00c0      	lsls	r0, r0, #3
 800ad68:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <SwitchMsgDMAToStream+0x28>)
 800ad6a:	18c0      	adds	r0, r0, r3
 800ad6c:	f7ff ffb4 	bl	800acd8 <DMA_STREAM_CH_Init>
}
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	46c0      	nop			; (mov r8, r8)
 800ad74:	20002548 	.word	0x20002548
 800ad78:	20002350 	.word	0x20002350

0800ad7c <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800ad7c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ad7e:	6803      	ldr	r3, [r0, #0]
 800ad80:	4a10      	ldr	r2, [pc, #64]	; (800adc4 <SetupDMAInterrupts+0x48>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d015      	beq.n	800adb2 <SetupDMAInterrupts+0x36>
 800ad86:	d80a      	bhi.n	800ad9e <SetupDMAInterrupts+0x22>
 800ad88:	4a0f      	ldr	r2, [pc, #60]	; (800adc8 <SetupDMAInterrupts+0x4c>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d110      	bne.n	800adb0 <SetupDMAInterrupts+0x34>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2009      	movs	r0, #9
 800ad92:	f005 fc0d 	bl	80105b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800ad96:	2009      	movs	r0, #9
 800ad98:	f005 fc3a 	bl	8010610 <HAL_NVIC_EnableIRQ>
			break;
 800ad9c:	e008      	b.n	800adb0 <SetupDMAInterrupts+0x34>
	switch ((uint32_t)hDMA->Instance)
 800ad9e:	4a0b      	ldr	r2, [pc, #44]	; (800adcc <SetupDMAInterrupts+0x50>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d006      	beq.n	800adb2 <SetupDMAInterrupts+0x36>
 800ada4:	4a0a      	ldr	r2, [pc, #40]	; (800add0 <SetupDMAInterrupts+0x54>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d003      	beq.n	800adb2 <SetupDMAInterrupts+0x36>
 800adaa:	4a0a      	ldr	r2, [pc, #40]	; (800add4 <SetupDMAInterrupts+0x58>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d000      	beq.n	800adb2 <SetupDMAInterrupts+0x36>
			break;
		
		default:
			break;
	}			
}
 800adb0:	bd10      	pop	{r4, pc}
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800adb2:	2200      	movs	r2, #0
 800adb4:	200a      	movs	r0, #10
 800adb6:	f005 fbfb 	bl	80105b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800adba:	200a      	movs	r0, #10
 800adbc:	f005 fc28 	bl	8010610 <HAL_NVIC_EnableIRQ>
}
 800adc0:	e7f6      	b.n	800adb0 <SetupDMAInterrupts+0x34>
 800adc2:	46c0      	nop			; (mov r8, r8)
 800adc4:	4002001c 	.word	0x4002001c
 800adc8:	40020008 	.word	0x40020008
 800adcc:	40020408 	.word	0x40020408
 800add0:	4002041c 	.word	0x4002041c
 800add4:	40020030 	.word	0x40020030

0800add8 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800add8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	4a1b      	ldr	r2, [pc, #108]	; (800ae4c <UnSetupDMAInterrupts+0x74>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d02f      	beq.n	800ae42 <UnSetupDMAInterrupts+0x6a>
 800ade2:	d90e      	bls.n	800ae02 <UnSetupDMAInterrupts+0x2a>
 800ade4:	4a1a      	ldr	r2, [pc, #104]	; (800ae50 <UnSetupDMAInterrupts+0x78>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d02b      	beq.n	800ae42 <UnSetupDMAInterrupts+0x6a>
 800adea:	d915      	bls.n	800ae18 <UnSetupDMAInterrupts+0x40>
 800adec:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <UnSetupDMAInterrupts+0x7c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d020      	beq.n	800ae34 <UnSetupDMAInterrupts+0x5c>
 800adf2:	d923      	bls.n	800ae3c <UnSetupDMAInterrupts+0x64>
 800adf4:	4a18      	ldr	r2, [pc, #96]	; (800ae58 <UnSetupDMAInterrupts+0x80>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d01c      	beq.n	800ae34 <UnSetupDMAInterrupts+0x5c>
 800adfa:	4a18      	ldr	r2, [pc, #96]	; (800ae5c <UnSetupDMAInterrupts+0x84>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d019      	beq.n	800ae34 <UnSetupDMAInterrupts+0x5c>
 800ae00:	e009      	b.n	800ae16 <UnSetupDMAInterrupts+0x3e>
 800ae02:	4a17      	ldr	r2, [pc, #92]	; (800ae60 <UnSetupDMAInterrupts+0x88>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d103      	bne.n	800ae10 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ae08:	2009      	movs	r0, #9
 800ae0a:	f005 fc0b 	bl	8010624 <HAL_NVIC_DisableIRQ>
			break;
 800ae0e:	e002      	b.n	800ae16 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ae10:	4a14      	ldr	r2, [pc, #80]	; (800ae64 <UnSetupDMAInterrupts+0x8c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d015      	beq.n	800ae42 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800ae16:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ae18:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <UnSetupDMAInterrupts+0x90>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00a      	beq.n	800ae34 <UnSetupDMAInterrupts+0x5c>
 800ae1e:	d903      	bls.n	800ae28 <UnSetupDMAInterrupts+0x50>
 800ae20:	4a12      	ldr	r2, [pc, #72]	; (800ae6c <UnSetupDMAInterrupts+0x94>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d006      	beq.n	800ae34 <UnSetupDMAInterrupts+0x5c>
 800ae26:	e7f6      	b.n	800ae16 <UnSetupDMAInterrupts+0x3e>
 800ae28:	4a11      	ldr	r2, [pc, #68]	; (800ae70 <UnSetupDMAInterrupts+0x98>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d002      	beq.n	800ae34 <UnSetupDMAInterrupts+0x5c>
 800ae2e:	4a11      	ldr	r2, [pc, #68]	; (800ae74 <UnSetupDMAInterrupts+0x9c>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d1f0      	bne.n	800ae16 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ae34:	200b      	movs	r0, #11
 800ae36:	f005 fbf5 	bl	8010624 <HAL_NVIC_DisableIRQ>
}
 800ae3a:	e7ec      	b.n	800ae16 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ae3c:	4a0e      	ldr	r2, [pc, #56]	; (800ae78 <UnSetupDMAInterrupts+0xa0>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d1e9      	bne.n	800ae16 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ae42:	200a      	movs	r0, #10
 800ae44:	f005 fbee 	bl	8010624 <HAL_NVIC_DisableIRQ>
			break;
 800ae48:	e7e5      	b.n	800ae16 <UnSetupDMAInterrupts+0x3e>
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	40020030 	.word	0x40020030
 800ae50:	40020408 	.word	0x40020408
 800ae54:	40020430 	.word	0x40020430
 800ae58:	40020444 	.word	0x40020444
 800ae5c:	40020458 	.word	0x40020458
 800ae60:	40020008 	.word	0x40020008
 800ae64:	4002001c 	.word	0x4002001c
 800ae68:	4002006c 	.word	0x4002006c
 800ae6c:	40020080 	.word	0x40020080
 800ae70:	40020044 	.word	0x40020044
 800ae74:	40020058 	.word	0x40020058
 800ae78:	4002041c 	.word	0x4002041c

0800ae7c <DMA_MSG_TX_UnSetup>:
{	
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ae80:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ae82:	f7ff ffa9 	bl	800add8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ae86:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ae88:	2300      	movs	r3, #0
 800ae8a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ae8c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ae8e:	bd10      	pop	{r4, pc}

0800ae90 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ae90:	b530      	push	{r4, r5, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ae92:	6803      	ldr	r3, [r0, #0]
 800ae94:	4acc      	ldr	r2, [pc, #816]	; (800b1c8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d100      	bne.n	800ae9c <RemapAndLinkDMAtoUARTRx+0xc>
 800ae9a:	e0ca      	b.n	800b032 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800ae9c:	4aca      	ldr	r2, [pc, #808]	; (800b1c8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d100      	bne.n	800aea4 <RemapAndLinkDMAtoUARTRx+0x14>
 800aea2:	e0d8      	b.n	800b056 <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800aea4:	4ac8      	ldr	r2, [pc, #800]	; (800b1c8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d100      	bne.n	800aeac <RemapAndLinkDMAtoUARTRx+0x1c>
 800aeaa:	e0e5      	b.n	800b078 <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800aeac:	4ac6      	ldr	r2, [pc, #792]	; (800b1c8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d100      	bne.n	800aeb4 <RemapAndLinkDMAtoUARTRx+0x24>
 800aeb2:	e0f2      	b.n	800b09a <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800aeb4:	4ac4      	ldr	r2, [pc, #784]	; (800b1c8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d100      	bne.n	800aebc <RemapAndLinkDMAtoUARTRx+0x2c>
 800aeba:	e0ff      	b.n	800b0bc <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	}
	else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800aebc:	4ac2      	ldr	r2, [pc, #776]	; (800b1c8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d100      	bne.n	800aec4 <RemapAndLinkDMAtoUARTRx+0x34>
 800aec2:	e10b      	b.n	800b0dc <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
	// USART 2
	}
	else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800aec4:	4ac1      	ldr	r2, [pc, #772]	; (800b1cc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d100      	bne.n	800aecc <RemapAndLinkDMAtoUARTRx+0x3c>
 800aeca:	e118      	b.n	800b0fe <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800aecc:	4abf      	ldr	r2, [pc, #764]	; (800b1cc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d100      	bne.n	800aed4 <RemapAndLinkDMAtoUARTRx+0x44>
 800aed2:	e124      	b.n	800b11e <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800aed4:	4abd      	ldr	r2, [pc, #756]	; (800b1cc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d100      	bne.n	800aedc <RemapAndLinkDMAtoUARTRx+0x4c>
 800aeda:	e131      	b.n	800b140 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800aedc:	4abb      	ldr	r2, [pc, #748]	; (800b1cc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d100      	bne.n	800aee4 <RemapAndLinkDMAtoUARTRx+0x54>
 800aee2:	e13e      	b.n	800b162 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800aee4:	4ab9      	ldr	r2, [pc, #740]	; (800b1cc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d100      	bne.n	800aeec <RemapAndLinkDMAtoUARTRx+0x5c>
 800aeea:	e14b      	b.n	800b184 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	}
	else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800aeec:	4ab7      	ldr	r2, [pc, #732]	; (800b1cc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d100      	bne.n	800aef4 <RemapAndLinkDMAtoUARTRx+0x64>
 800aef2:	e157      	b.n	800b1a4 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
	// USART 3
	}
	else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800aef4:	4ab6      	ldr	r2, [pc, #728]	; (800b1d0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d100      	bne.n	800aefc <RemapAndLinkDMAtoUARTRx+0x6c>
 800aefa:	e18b      	b.n	800b214 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800aefc:	4ab4      	ldr	r2, [pc, #720]	; (800b1d0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d100      	bne.n	800af04 <RemapAndLinkDMAtoUARTRx+0x74>
 800af02:	e197      	b.n	800b234 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800af04:	4ab2      	ldr	r2, [pc, #712]	; (800b1d0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d100      	bne.n	800af0c <RemapAndLinkDMAtoUARTRx+0x7c>
 800af0a:	e1a4      	b.n	800b256 <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800af0c:	4ab0      	ldr	r2, [pc, #704]	; (800b1d0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d100      	bne.n	800af14 <RemapAndLinkDMAtoUARTRx+0x84>
 800af12:	e1b1      	b.n	800b278 <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800af14:	4aae      	ldr	r2, [pc, #696]	; (800b1d0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d100      	bne.n	800af1c <RemapAndLinkDMAtoUARTRx+0x8c>
 800af1a:	e1be      	b.n	800b29a <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	}
	else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800af1c:	4aac      	ldr	r2, [pc, #688]	; (800b1d0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d100      	bne.n	800af24 <RemapAndLinkDMAtoUARTRx+0x94>
 800af22:	e1ca      	b.n	800b2ba <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);
	// USART 4
	}
	else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800af24:	4aab      	ldr	r2, [pc, #684]	; (800b1d4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d100      	bne.n	800af2c <RemapAndLinkDMAtoUARTRx+0x9c>
 800af2a:	e1d7      	b.n	800b2dc <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800af2c:	4aa9      	ldr	r2, [pc, #676]	; (800b1d4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d100      	bne.n	800af34 <RemapAndLinkDMAtoUARTRx+0xa4>
 800af32:	e1e3      	b.n	800b2fc <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800af34:	4aa7      	ldr	r2, [pc, #668]	; (800b1d4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d100      	bne.n	800af3c <RemapAndLinkDMAtoUARTRx+0xac>
 800af3a:	e1f0      	b.n	800b31e <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800af3c:	4aa5      	ldr	r2, [pc, #660]	; (800b1d4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d100      	bne.n	800af44 <RemapAndLinkDMAtoUARTRx+0xb4>
 800af42:	e1fd      	b.n	800b340 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800af44:	4aa3      	ldr	r2, [pc, #652]	; (800b1d4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d100      	bne.n	800af4c <RemapAndLinkDMAtoUARTRx+0xbc>
 800af4a:	e20a      	b.n	800b362 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	}
	else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800af4c:	4aa1      	ldr	r2, [pc, #644]	; (800b1d4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d100      	bne.n	800af54 <RemapAndLinkDMAtoUARTRx+0xc4>
 800af52:	e216      	b.n	800b382 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);
	// USART 5
	}
	else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800af54:	4aa0      	ldr	r2, [pc, #640]	; (800b1d8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d100      	bne.n	800af5c <RemapAndLinkDMAtoUARTRx+0xcc>
 800af5a:	e223      	b.n	800b3a4 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800af5c:	4a9e      	ldr	r2, [pc, #632]	; (800b1d8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d100      	bne.n	800af64 <RemapAndLinkDMAtoUARTRx+0xd4>
 800af62:	e22f      	b.n	800b3c4 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800af64:	4a9c      	ldr	r2, [pc, #624]	; (800b1d8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d100      	bne.n	800af6c <RemapAndLinkDMAtoUARTRx+0xdc>
 800af6a:	e23c      	b.n	800b3e6 <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800af6c:	4a9a      	ldr	r2, [pc, #616]	; (800b1d8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d100      	bne.n	800af74 <RemapAndLinkDMAtoUARTRx+0xe4>
 800af72:	e249      	b.n	800b408 <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800af74:	4a98      	ldr	r2, [pc, #608]	; (800b1d8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d100      	bne.n	800af7c <RemapAndLinkDMAtoUARTRx+0xec>
 800af7a:	e256      	b.n	800b42a <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	}
	else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800af7c:	4a96      	ldr	r2, [pc, #600]	; (800b1d8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d100      	bne.n	800af84 <RemapAndLinkDMAtoUARTRx+0xf4>
 800af82:	e262      	b.n	800b44a <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);
	// USART 6
	}
	else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800af84:	4a95      	ldr	r2, [pc, #596]	; (800b1dc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d100      	bne.n	800af8c <RemapAndLinkDMAtoUARTRx+0xfc>
 800af8a:	e26f      	b.n	800b46c <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800af8c:	4a93      	ldr	r2, [pc, #588]	; (800b1dc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d100      	bne.n	800af94 <RemapAndLinkDMAtoUARTRx+0x104>
 800af92:	e27b      	b.n	800b48c <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800af94:	4a91      	ldr	r2, [pc, #580]	; (800b1dc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d100      	bne.n	800af9c <RemapAndLinkDMAtoUARTRx+0x10c>
 800af9a:	e288      	b.n	800b4ae <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800af9c:	4a8f      	ldr	r2, [pc, #572]	; (800b1dc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d100      	bne.n	800afa4 <RemapAndLinkDMAtoUARTRx+0x114>
 800afa2:	e295      	b.n	800b4d0 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800afa4:	4a8d      	ldr	r2, [pc, #564]	; (800b1dc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d100      	bne.n	800afac <RemapAndLinkDMAtoUARTRx+0x11c>
 800afaa:	e2a2      	b.n	800b4f2 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	}
	else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800afac:	4a8b      	ldr	r2, [pc, #556]	; (800b1dc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d100      	bne.n	800afb4 <RemapAndLinkDMAtoUARTRx+0x124>
 800afb2:	e2ae      	b.n	800b512 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
	// USART 7
	}
	else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800afb4:	4a8a      	ldr	r2, [pc, #552]	; (800b1e0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d100      	bne.n	800afbc <RemapAndLinkDMAtoUARTRx+0x12c>
 800afba:	e2bb      	b.n	800b534 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800afbc:	4a88      	ldr	r2, [pc, #544]	; (800b1e0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d100      	bne.n	800afc4 <RemapAndLinkDMAtoUARTRx+0x134>
 800afc2:	e2c7      	b.n	800b554 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800afc4:	4a86      	ldr	r2, [pc, #536]	; (800b1e0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d100      	bne.n	800afcc <RemapAndLinkDMAtoUARTRx+0x13c>
 800afca:	e2d4      	b.n	800b576 <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800afcc:	4a84      	ldr	r2, [pc, #528]	; (800b1e0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d100      	bne.n	800afd4 <RemapAndLinkDMAtoUARTRx+0x144>
 800afd2:	e2f7      	b.n	800b5c4 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800afd4:	4a82      	ldr	r2, [pc, #520]	; (800b1e0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d100      	bne.n	800afdc <RemapAndLinkDMAtoUARTRx+0x14c>
 800afda:	e304      	b.n	800b5e6 <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	}
	else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800afdc:	4a80      	ldr	r2, [pc, #512]	; (800b1e0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d100      	bne.n	800afe4 <RemapAndLinkDMAtoUARTRx+0x154>
 800afe2:	e310      	b.n	800b606 <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);
	// USART 8
	}
	else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800afe4:	4a7f      	ldr	r2, [pc, #508]	; (800b1e4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d100      	bne.n	800afec <RemapAndLinkDMAtoUARTRx+0x15c>
 800afea:	e31d      	b.n	800b628 <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800afec:	4a7d      	ldr	r2, [pc, #500]	; (800b1e4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d100      	bne.n	800aff4 <RemapAndLinkDMAtoUARTRx+0x164>
 800aff2:	e328      	b.n	800b646 <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800aff4:	4a7b      	ldr	r2, [pc, #492]	; (800b1e4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d100      	bne.n	800affc <RemapAndLinkDMAtoUARTRx+0x16c>
 800affa:	e335      	b.n	800b668 <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800affc:	4a79      	ldr	r2, [pc, #484]	; (800b1e4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d100      	bne.n	800b004 <RemapAndLinkDMAtoUARTRx+0x174>
 800b002:	e342      	b.n	800b68a <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b004:	4a77      	ldr	r2, [pc, #476]	; (800b1e4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d100      	bne.n	800b00c <RemapAndLinkDMAtoUARTRx+0x17c>
 800b00a:	e34f      	b.n	800b6ac <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	}
	else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b00c:	4a75      	ldr	r2, [pc, #468]	; (800b1e4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d11e      	bne.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b012:	680a      	ldr	r2, [r1, #0]
 800b014:	4b74      	ldr	r3, [pc, #464]	; (800b1e8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b016:	429a      	cmp	r2, r3
 800b018:	d11a      	bne.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);
 800b01a:	4a74      	ldr	r2, [pc, #464]	; (800b1ec <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b01c:	23a8      	movs	r3, #168	; 0xa8
 800b01e:	58d4      	ldr	r4, [r2, r3]
 800b020:	4d73      	ldr	r5, [pc, #460]	; (800b1f0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b022:	402c      	ands	r4, r5
 800b024:	50d4      	str	r4, [r2, r3]
 800b026:	58d5      	ldr	r5, [r2, r3]
 800b028:	24f0      	movs	r4, #240	; 0xf0
 800b02a:	0124      	lsls	r4, r4, #4
 800b02c:	432c      	orrs	r4, r5
 800b02e:	50d4      	str	r4, [r2, r3]
 800b030:	e00e      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b032:	680c      	ldr	r4, [r1, #0]
 800b034:	4a6f      	ldr	r2, [pc, #444]	; (800b1f4 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b036:	4294      	cmp	r4, r2
 800b038:	d000      	beq.n	800b03c <RemapAndLinkDMAtoUARTRx+0x1ac>
 800b03a:	e72f      	b.n	800ae9c <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b03c:	4a6e      	ldr	r2, [pc, #440]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b03e:	23a8      	movs	r3, #168	; 0xa8
 800b040:	58d4      	ldr	r4, [r2, r3]
 800b042:	250f      	movs	r5, #15
 800b044:	43ac      	bics	r4, r5
 800b046:	50d4      	str	r4, [r2, r3]
 800b048:	58d4      	ldr	r4, [r2, r3]
 800b04a:	3d07      	subs	r5, #7
 800b04c:	432c      	orrs	r4, r5
 800b04e:	50d4      	str	r4, [r2, r3]
	}
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b050:	6641      	str	r1, [r0, #100]	; 0x64
 800b052:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b054:	bd30      	pop	{r4, r5, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b056:	680c      	ldr	r4, [r1, #0]
 800b058:	4a68      	ldr	r2, [pc, #416]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b05a:	4294      	cmp	r4, r2
 800b05c:	d000      	beq.n	800b060 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800b05e:	e721      	b.n	800aea4 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b060:	4a65      	ldr	r2, [pc, #404]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b062:	23a8      	movs	r3, #168	; 0xa8
 800b064:	58d4      	ldr	r4, [r2, r3]
 800b066:	4d62      	ldr	r5, [pc, #392]	; (800b1f0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b068:	402c      	ands	r4, r5
 800b06a:	50d4      	str	r4, [r2, r3]
 800b06c:	58d5      	ldr	r5, [r2, r3]
 800b06e:	2480      	movs	r4, #128	; 0x80
 800b070:	0124      	lsls	r4, r4, #4
 800b072:	432c      	orrs	r4, r5
 800b074:	50d4      	str	r4, [r2, r3]
 800b076:	e7eb      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b078:	680c      	ldr	r4, [r1, #0]
 800b07a:	4a61      	ldr	r2, [pc, #388]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x370>)
 800b07c:	4294      	cmp	r4, r2
 800b07e:	d000      	beq.n	800b082 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800b080:	e714      	b.n	800aeac <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b082:	4a5d      	ldr	r2, [pc, #372]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b084:	23a8      	movs	r3, #168	; 0xa8
 800b086:	58d4      	ldr	r4, [r2, r3]
 800b088:	4d5e      	ldr	r5, [pc, #376]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x374>)
 800b08a:	402c      	ands	r4, r5
 800b08c:	50d4      	str	r4, [r2, r3]
 800b08e:	58d5      	ldr	r5, [r2, r3]
 800b090:	2480      	movs	r4, #128	; 0x80
 800b092:	0324      	lsls	r4, r4, #12
 800b094:	432c      	orrs	r4, r5
 800b096:	50d4      	str	r4, [r2, r3]
 800b098:	e7da      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b09a:	680c      	ldr	r4, [r1, #0]
 800b09c:	4a5a      	ldr	r2, [pc, #360]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x378>)
 800b09e:	4294      	cmp	r4, r2
 800b0a0:	d000      	beq.n	800b0a4 <RemapAndLinkDMAtoUARTRx+0x214>
 800b0a2:	e707      	b.n	800aeb4 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b0a4:	4a54      	ldr	r2, [pc, #336]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b0a6:	23a8      	movs	r3, #168	; 0xa8
 800b0a8:	58d4      	ldr	r4, [r2, r3]
 800b0aa:	4d58      	ldr	r5, [pc, #352]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x37c>)
 800b0ac:	402c      	ands	r4, r5
 800b0ae:	50d4      	str	r4, [r2, r3]
 800b0b0:	58d5      	ldr	r5, [r2, r3]
 800b0b2:	2480      	movs	r4, #128	; 0x80
 800b0b4:	0424      	lsls	r4, r4, #16
 800b0b6:	432c      	orrs	r4, r5
 800b0b8:	50d4      	str	r4, [r2, r3]
 800b0ba:	e7c9      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b0bc:	680c      	ldr	r4, [r1, #0]
 800b0be:	4a54      	ldr	r2, [pc, #336]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x380>)
 800b0c0:	4294      	cmp	r4, r2
 800b0c2:	d000      	beq.n	800b0c6 <RemapAndLinkDMAtoUARTRx+0x236>
 800b0c4:	e6fa      	b.n	800aebc <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b0c6:	4a49      	ldr	r2, [pc, #292]	; (800b1ec <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0c8:	23a8      	movs	r3, #168	; 0xa8
 800b0ca:	58d4      	ldr	r4, [r2, r3]
 800b0cc:	25f0      	movs	r5, #240	; 0xf0
 800b0ce:	43ac      	bics	r4, r5
 800b0d0:	50d4      	str	r4, [r2, r3]
 800b0d2:	58d4      	ldr	r4, [r2, r3]
 800b0d4:	3d70      	subs	r5, #112	; 0x70
 800b0d6:	432c      	orrs	r4, r5
 800b0d8:	50d4      	str	r4, [r2, r3]
 800b0da:	e7b9      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b0dc:	680c      	ldr	r4, [r1, #0]
 800b0de:	4a42      	ldr	r2, [pc, #264]	; (800b1e8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b0e0:	4294      	cmp	r4, r2
 800b0e2:	d000      	beq.n	800b0e6 <RemapAndLinkDMAtoUARTRx+0x256>
 800b0e4:	e6ee      	b.n	800aec4 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
 800b0e6:	4a41      	ldr	r2, [pc, #260]	; (800b1ec <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0e8:	23a8      	movs	r3, #168	; 0xa8
 800b0ea:	58d4      	ldr	r4, [r2, r3]
 800b0ec:	4d40      	ldr	r5, [pc, #256]	; (800b1f0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b0ee:	402c      	ands	r4, r5
 800b0f0:	50d4      	str	r4, [r2, r3]
 800b0f2:	58d5      	ldr	r5, [r2, r3]
 800b0f4:	2480      	movs	r4, #128	; 0x80
 800b0f6:	0124      	lsls	r4, r4, #4
 800b0f8:	432c      	orrs	r4, r5
 800b0fa:	50d4      	str	r4, [r2, r3]
 800b0fc:	e7a8      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b0fe:	680c      	ldr	r4, [r1, #0]
 800b100:	4a3c      	ldr	r2, [pc, #240]	; (800b1f4 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b102:	4294      	cmp	r4, r2
 800b104:	d000      	beq.n	800b108 <RemapAndLinkDMAtoUARTRx+0x278>
 800b106:	e6e1      	b.n	800aecc <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b108:	4a3b      	ldr	r2, [pc, #236]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b10a:	23a8      	movs	r3, #168	; 0xa8
 800b10c:	58d4      	ldr	r4, [r2, r3]
 800b10e:	250f      	movs	r5, #15
 800b110:	43ac      	bics	r4, r5
 800b112:	50d4      	str	r4, [r2, r3]
 800b114:	58d4      	ldr	r4, [r2, r3]
 800b116:	3d06      	subs	r5, #6
 800b118:	432c      	orrs	r4, r5
 800b11a:	50d4      	str	r4, [r2, r3]
 800b11c:	e798      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b11e:	680c      	ldr	r4, [r1, #0]
 800b120:	4a36      	ldr	r2, [pc, #216]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b122:	4294      	cmp	r4, r2
 800b124:	d000      	beq.n	800b128 <RemapAndLinkDMAtoUARTRx+0x298>
 800b126:	e6d5      	b.n	800aed4 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b128:	4a33      	ldr	r2, [pc, #204]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b12a:	23a8      	movs	r3, #168	; 0xa8
 800b12c:	58d4      	ldr	r4, [r2, r3]
 800b12e:	4d30      	ldr	r5, [pc, #192]	; (800b1f0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b130:	402c      	ands	r4, r5
 800b132:	50d4      	str	r4, [r2, r3]
 800b134:	58d5      	ldr	r5, [r2, r3]
 800b136:	2490      	movs	r4, #144	; 0x90
 800b138:	0124      	lsls	r4, r4, #4
 800b13a:	432c      	orrs	r4, r5
 800b13c:	50d4      	str	r4, [r2, r3]
 800b13e:	e787      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b140:	680c      	ldr	r4, [r1, #0]
 800b142:	4a2f      	ldr	r2, [pc, #188]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x370>)
 800b144:	4294      	cmp	r4, r2
 800b146:	d000      	beq.n	800b14a <RemapAndLinkDMAtoUARTRx+0x2ba>
 800b148:	e6c8      	b.n	800aedc <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b14a:	4a2b      	ldr	r2, [pc, #172]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b14c:	23a8      	movs	r3, #168	; 0xa8
 800b14e:	58d4      	ldr	r4, [r2, r3]
 800b150:	4d2c      	ldr	r5, [pc, #176]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x374>)
 800b152:	402c      	ands	r4, r5
 800b154:	50d4      	str	r4, [r2, r3]
 800b156:	58d5      	ldr	r5, [r2, r3]
 800b158:	2490      	movs	r4, #144	; 0x90
 800b15a:	0324      	lsls	r4, r4, #12
 800b15c:	432c      	orrs	r4, r5
 800b15e:	50d4      	str	r4, [r2, r3]
 800b160:	e776      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b162:	680c      	ldr	r4, [r1, #0]
 800b164:	4a28      	ldr	r2, [pc, #160]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x378>)
 800b166:	4294      	cmp	r4, r2
 800b168:	d000      	beq.n	800b16c <RemapAndLinkDMAtoUARTRx+0x2dc>
 800b16a:	e6bb      	b.n	800aee4 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b16c:	4a22      	ldr	r2, [pc, #136]	; (800b1f8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800b16e:	23a8      	movs	r3, #168	; 0xa8
 800b170:	58d4      	ldr	r4, [r2, r3]
 800b172:	4d26      	ldr	r5, [pc, #152]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x37c>)
 800b174:	402c      	ands	r4, r5
 800b176:	50d4      	str	r4, [r2, r3]
 800b178:	58d5      	ldr	r5, [r2, r3]
 800b17a:	2490      	movs	r4, #144	; 0x90
 800b17c:	0424      	lsls	r4, r4, #16
 800b17e:	432c      	orrs	r4, r5
 800b180:	50d4      	str	r4, [r2, r3]
 800b182:	e765      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b184:	680c      	ldr	r4, [r1, #0]
 800b186:	4a22      	ldr	r2, [pc, #136]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x380>)
 800b188:	4294      	cmp	r4, r2
 800b18a:	d000      	beq.n	800b18e <RemapAndLinkDMAtoUARTRx+0x2fe>
 800b18c:	e6ae      	b.n	800aeec <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b18e:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b190:	23a8      	movs	r3, #168	; 0xa8
 800b192:	58d4      	ldr	r4, [r2, r3]
 800b194:	25f0      	movs	r5, #240	; 0xf0
 800b196:	43ac      	bics	r4, r5
 800b198:	50d4      	str	r4, [r2, r3]
 800b19a:	58d4      	ldr	r4, [r2, r3]
 800b19c:	3d60      	subs	r5, #96	; 0x60
 800b19e:	432c      	orrs	r4, r5
 800b1a0:	50d4      	str	r4, [r2, r3]
 800b1a2:	e755      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b1a4:	680c      	ldr	r4, [r1, #0]
 800b1a6:	4a10      	ldr	r2, [pc, #64]	; (800b1e8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b1a8:	4294      	cmp	r4, r2
 800b1aa:	d000      	beq.n	800b1ae <RemapAndLinkDMAtoUARTRx+0x31e>
 800b1ac:	e6a2      	b.n	800aef4 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
 800b1ae:	4a0f      	ldr	r2, [pc, #60]	; (800b1ec <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b1b0:	23a8      	movs	r3, #168	; 0xa8
 800b1b2:	58d4      	ldr	r4, [r2, r3]
 800b1b4:	4d0e      	ldr	r5, [pc, #56]	; (800b1f0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b1b6:	402c      	ands	r4, r5
 800b1b8:	50d4      	str	r4, [r2, r3]
 800b1ba:	58d5      	ldr	r5, [r2, r3]
 800b1bc:	2490      	movs	r4, #144	; 0x90
 800b1be:	0124      	lsls	r4, r4, #4
 800b1c0:	432c      	orrs	r4, r5
 800b1c2:	50d4      	str	r4, [r2, r3]
 800b1c4:	e744      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	40013800 	.word	0x40013800
 800b1cc:	40004400 	.word	0x40004400
 800b1d0:	40004800 	.word	0x40004800
 800b1d4:	40004c00 	.word	0x40004c00
 800b1d8:	40005000 	.word	0x40005000
 800b1dc:	40011400 	.word	0x40011400
 800b1e0:	40011800 	.word	0x40011800
 800b1e4:	40011c00 	.word	0x40011c00
 800b1e8:	40020430 	.word	0x40020430
 800b1ec:	40020400 	.word	0x40020400
 800b1f0:	fffff0ff 	.word	0xfffff0ff
 800b1f4:	40020008 	.word	0x40020008
 800b1f8:	40020000 	.word	0x40020000
 800b1fc:	40020030 	.word	0x40020030
 800b200:	40020058 	.word	0x40020058
 800b204:	fff0ffff 	.word	0xfff0ffff
 800b208:	4002006c 	.word	0x4002006c
 800b20c:	ff0fffff 	.word	0xff0fffff
 800b210:	4002041c 	.word	0x4002041c
	else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b214:	680c      	ldr	r4, [r1, #0]
 800b216:	4ae0      	ldr	r2, [pc, #896]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x708>)
 800b218:	4294      	cmp	r4, r2
 800b21a:	d000      	beq.n	800b21e <RemapAndLinkDMAtoUARTRx+0x38e>
 800b21c:	e66e      	b.n	800aefc <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b21e:	4adf      	ldr	r2, [pc, #892]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b220:	23a8      	movs	r3, #168	; 0xa8
 800b222:	58d4      	ldr	r4, [r2, r3]
 800b224:	250f      	movs	r5, #15
 800b226:	43ac      	bics	r4, r5
 800b228:	50d4      	str	r4, [r2, r3]
 800b22a:	58d4      	ldr	r4, [r2, r3]
 800b22c:	3d05      	subs	r5, #5
 800b22e:	432c      	orrs	r4, r5
 800b230:	50d4      	str	r4, [r2, r3]
 800b232:	e70d      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b234:	680c      	ldr	r4, [r1, #0]
 800b236:	4ada      	ldr	r2, [pc, #872]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b238:	4294      	cmp	r4, r2
 800b23a:	d000      	beq.n	800b23e <RemapAndLinkDMAtoUARTRx+0x3ae>
 800b23c:	e662      	b.n	800af04 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b23e:	4ad7      	ldr	r2, [pc, #860]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b240:	23a8      	movs	r3, #168	; 0xa8
 800b242:	58d4      	ldr	r4, [r2, r3]
 800b244:	4dd7      	ldr	r5, [pc, #860]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b246:	402c      	ands	r4, r5
 800b248:	50d4      	str	r4, [r2, r3]
 800b24a:	58d5      	ldr	r5, [r2, r3]
 800b24c:	24a0      	movs	r4, #160	; 0xa0
 800b24e:	0124      	lsls	r4, r4, #4
 800b250:	432c      	orrs	r4, r5
 800b252:	50d4      	str	r4, [r2, r3]
 800b254:	e6fc      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b256:	680c      	ldr	r4, [r1, #0]
 800b258:	4ad3      	ldr	r2, [pc, #844]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x718>)
 800b25a:	4294      	cmp	r4, r2
 800b25c:	d000      	beq.n	800b260 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800b25e:	e655      	b.n	800af0c <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b260:	4ace      	ldr	r2, [pc, #824]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b262:	23a8      	movs	r3, #168	; 0xa8
 800b264:	58d4      	ldr	r4, [r2, r3]
 800b266:	4dd1      	ldr	r5, [pc, #836]	; (800b5ac <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b268:	402c      	ands	r4, r5
 800b26a:	50d4      	str	r4, [r2, r3]
 800b26c:	58d5      	ldr	r5, [r2, r3]
 800b26e:	24a0      	movs	r4, #160	; 0xa0
 800b270:	0324      	lsls	r4, r4, #12
 800b272:	432c      	orrs	r4, r5
 800b274:	50d4      	str	r4, [r2, r3]
 800b276:	e6eb      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b278:	680c      	ldr	r4, [r1, #0]
 800b27a:	4acd      	ldr	r2, [pc, #820]	; (800b5b0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b27c:	4294      	cmp	r4, r2
 800b27e:	d000      	beq.n	800b282 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800b280:	e648      	b.n	800af14 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b282:	4ac6      	ldr	r2, [pc, #792]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b284:	23a8      	movs	r3, #168	; 0xa8
 800b286:	58d4      	ldr	r4, [r2, r3]
 800b288:	4dca      	ldr	r5, [pc, #808]	; (800b5b4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b28a:	402c      	ands	r4, r5
 800b28c:	50d4      	str	r4, [r2, r3]
 800b28e:	58d5      	ldr	r5, [r2, r3]
 800b290:	24a0      	movs	r4, #160	; 0xa0
 800b292:	0424      	lsls	r4, r4, #16
 800b294:	432c      	orrs	r4, r5
 800b296:	50d4      	str	r4, [r2, r3]
 800b298:	e6da      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b29a:	680c      	ldr	r4, [r1, #0]
 800b29c:	4ac6      	ldr	r2, [pc, #792]	; (800b5b8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800b29e:	4294      	cmp	r4, r2
 800b2a0:	d000      	beq.n	800b2a4 <RemapAndLinkDMAtoUARTRx+0x414>
 800b2a2:	e63b      	b.n	800af1c <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b2a4:	4ac5      	ldr	r2, [pc, #788]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b2a6:	23a8      	movs	r3, #168	; 0xa8
 800b2a8:	58d4      	ldr	r4, [r2, r3]
 800b2aa:	25f0      	movs	r5, #240	; 0xf0
 800b2ac:	43ac      	bics	r4, r5
 800b2ae:	50d4      	str	r4, [r2, r3]
 800b2b0:	58d4      	ldr	r4, [r2, r3]
 800b2b2:	3d50      	subs	r5, #80	; 0x50
 800b2b4:	432c      	orrs	r4, r5
 800b2b6:	50d4      	str	r4, [r2, r3]
 800b2b8:	e6ca      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b2ba:	680c      	ldr	r4, [r1, #0]
 800b2bc:	4ac0      	ldr	r2, [pc, #768]	; (800b5c0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b2be:	4294      	cmp	r4, r2
 800b2c0:	d000      	beq.n	800b2c4 <RemapAndLinkDMAtoUARTRx+0x434>
 800b2c2:	e62f      	b.n	800af24 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);
 800b2c4:	4abd      	ldr	r2, [pc, #756]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b2c6:	23a8      	movs	r3, #168	; 0xa8
 800b2c8:	58d4      	ldr	r4, [r2, r3]
 800b2ca:	4db6      	ldr	r5, [pc, #728]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b2cc:	402c      	ands	r4, r5
 800b2ce:	50d4      	str	r4, [r2, r3]
 800b2d0:	58d5      	ldr	r5, [r2, r3]
 800b2d2:	24a0      	movs	r4, #160	; 0xa0
 800b2d4:	0124      	lsls	r4, r4, #4
 800b2d6:	432c      	orrs	r4, r5
 800b2d8:	50d4      	str	r4, [r2, r3]
 800b2da:	e6b9      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b2dc:	680c      	ldr	r4, [r1, #0]
 800b2de:	4aae      	ldr	r2, [pc, #696]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x708>)
 800b2e0:	4294      	cmp	r4, r2
 800b2e2:	d000      	beq.n	800b2e6 <RemapAndLinkDMAtoUARTRx+0x456>
 800b2e4:	e622      	b.n	800af2c <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b2e6:	4aad      	ldr	r2, [pc, #692]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b2e8:	23a8      	movs	r3, #168	; 0xa8
 800b2ea:	58d4      	ldr	r4, [r2, r3]
 800b2ec:	250f      	movs	r5, #15
 800b2ee:	43ac      	bics	r4, r5
 800b2f0:	50d4      	str	r4, [r2, r3]
 800b2f2:	58d4      	ldr	r4, [r2, r3]
 800b2f4:	3d04      	subs	r5, #4
 800b2f6:	432c      	orrs	r4, r5
 800b2f8:	50d4      	str	r4, [r2, r3]
 800b2fa:	e6a9      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b2fc:	680c      	ldr	r4, [r1, #0]
 800b2fe:	4aa8      	ldr	r2, [pc, #672]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b300:	4294      	cmp	r4, r2
 800b302:	d000      	beq.n	800b306 <RemapAndLinkDMAtoUARTRx+0x476>
 800b304:	e616      	b.n	800af34 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b306:	4aa5      	ldr	r2, [pc, #660]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b308:	23a8      	movs	r3, #168	; 0xa8
 800b30a:	58d4      	ldr	r4, [r2, r3]
 800b30c:	4da5      	ldr	r5, [pc, #660]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b30e:	402c      	ands	r4, r5
 800b310:	50d4      	str	r4, [r2, r3]
 800b312:	58d5      	ldr	r5, [r2, r3]
 800b314:	24b0      	movs	r4, #176	; 0xb0
 800b316:	0124      	lsls	r4, r4, #4
 800b318:	432c      	orrs	r4, r5
 800b31a:	50d4      	str	r4, [r2, r3]
 800b31c:	e698      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b31e:	680c      	ldr	r4, [r1, #0]
 800b320:	4aa1      	ldr	r2, [pc, #644]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x718>)
 800b322:	4294      	cmp	r4, r2
 800b324:	d000      	beq.n	800b328 <RemapAndLinkDMAtoUARTRx+0x498>
 800b326:	e609      	b.n	800af3c <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b328:	4a9c      	ldr	r2, [pc, #624]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b32a:	23a8      	movs	r3, #168	; 0xa8
 800b32c:	58d4      	ldr	r4, [r2, r3]
 800b32e:	4d9f      	ldr	r5, [pc, #636]	; (800b5ac <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b330:	402c      	ands	r4, r5
 800b332:	50d4      	str	r4, [r2, r3]
 800b334:	58d5      	ldr	r5, [r2, r3]
 800b336:	24b0      	movs	r4, #176	; 0xb0
 800b338:	0324      	lsls	r4, r4, #12
 800b33a:	432c      	orrs	r4, r5
 800b33c:	50d4      	str	r4, [r2, r3]
 800b33e:	e687      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b340:	680c      	ldr	r4, [r1, #0]
 800b342:	4a9b      	ldr	r2, [pc, #620]	; (800b5b0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b344:	4294      	cmp	r4, r2
 800b346:	d000      	beq.n	800b34a <RemapAndLinkDMAtoUARTRx+0x4ba>
 800b348:	e5fc      	b.n	800af44 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b34a:	4a94      	ldr	r2, [pc, #592]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b34c:	23a8      	movs	r3, #168	; 0xa8
 800b34e:	58d4      	ldr	r4, [r2, r3]
 800b350:	4d98      	ldr	r5, [pc, #608]	; (800b5b4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b352:	402c      	ands	r4, r5
 800b354:	50d4      	str	r4, [r2, r3]
 800b356:	58d5      	ldr	r5, [r2, r3]
 800b358:	24b0      	movs	r4, #176	; 0xb0
 800b35a:	0424      	lsls	r4, r4, #16
 800b35c:	432c      	orrs	r4, r5
 800b35e:	50d4      	str	r4, [r2, r3]
 800b360:	e676      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b362:	680c      	ldr	r4, [r1, #0]
 800b364:	4a94      	ldr	r2, [pc, #592]	; (800b5b8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800b366:	4294      	cmp	r4, r2
 800b368:	d000      	beq.n	800b36c <RemapAndLinkDMAtoUARTRx+0x4dc>
 800b36a:	e5ef      	b.n	800af4c <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b36c:	4a93      	ldr	r2, [pc, #588]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b36e:	23a8      	movs	r3, #168	; 0xa8
 800b370:	58d4      	ldr	r4, [r2, r3]
 800b372:	25f0      	movs	r5, #240	; 0xf0
 800b374:	43ac      	bics	r4, r5
 800b376:	50d4      	str	r4, [r2, r3]
 800b378:	58d4      	ldr	r4, [r2, r3]
 800b37a:	3d40      	subs	r5, #64	; 0x40
 800b37c:	432c      	orrs	r4, r5
 800b37e:	50d4      	str	r4, [r2, r3]
 800b380:	e666      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b382:	680c      	ldr	r4, [r1, #0]
 800b384:	4a8e      	ldr	r2, [pc, #568]	; (800b5c0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b386:	4294      	cmp	r4, r2
 800b388:	d000      	beq.n	800b38c <RemapAndLinkDMAtoUARTRx+0x4fc>
 800b38a:	e5e3      	b.n	800af54 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);
 800b38c:	4a8b      	ldr	r2, [pc, #556]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b38e:	23a8      	movs	r3, #168	; 0xa8
 800b390:	58d4      	ldr	r4, [r2, r3]
 800b392:	4d84      	ldr	r5, [pc, #528]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b394:	402c      	ands	r4, r5
 800b396:	50d4      	str	r4, [r2, r3]
 800b398:	58d5      	ldr	r5, [r2, r3]
 800b39a:	24b0      	movs	r4, #176	; 0xb0
 800b39c:	0124      	lsls	r4, r4, #4
 800b39e:	432c      	orrs	r4, r5
 800b3a0:	50d4      	str	r4, [r2, r3]
 800b3a2:	e655      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b3a4:	680c      	ldr	r4, [r1, #0]
 800b3a6:	4a7c      	ldr	r2, [pc, #496]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x708>)
 800b3a8:	4294      	cmp	r4, r2
 800b3aa:	d000      	beq.n	800b3ae <RemapAndLinkDMAtoUARTRx+0x51e>
 800b3ac:	e5d6      	b.n	800af5c <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b3ae:	4a7b      	ldr	r2, [pc, #492]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3b0:	23a8      	movs	r3, #168	; 0xa8
 800b3b2:	58d4      	ldr	r4, [r2, r3]
 800b3b4:	250f      	movs	r5, #15
 800b3b6:	43ac      	bics	r4, r5
 800b3b8:	50d4      	str	r4, [r2, r3]
 800b3ba:	58d4      	ldr	r4, [r2, r3]
 800b3bc:	3d03      	subs	r5, #3
 800b3be:	432c      	orrs	r4, r5
 800b3c0:	50d4      	str	r4, [r2, r3]
 800b3c2:	e645      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b3c4:	680c      	ldr	r4, [r1, #0]
 800b3c6:	4a76      	ldr	r2, [pc, #472]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b3c8:	4294      	cmp	r4, r2
 800b3ca:	d000      	beq.n	800b3ce <RemapAndLinkDMAtoUARTRx+0x53e>
 800b3cc:	e5ca      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b3ce:	4a73      	ldr	r2, [pc, #460]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3d0:	23a8      	movs	r3, #168	; 0xa8
 800b3d2:	58d4      	ldr	r4, [r2, r3]
 800b3d4:	4d73      	ldr	r5, [pc, #460]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b3d6:	402c      	ands	r4, r5
 800b3d8:	50d4      	str	r4, [r2, r3]
 800b3da:	58d5      	ldr	r5, [r2, r3]
 800b3dc:	24c0      	movs	r4, #192	; 0xc0
 800b3de:	0124      	lsls	r4, r4, #4
 800b3e0:	432c      	orrs	r4, r5
 800b3e2:	50d4      	str	r4, [r2, r3]
 800b3e4:	e634      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b3e6:	680c      	ldr	r4, [r1, #0]
 800b3e8:	4a6f      	ldr	r2, [pc, #444]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x718>)
 800b3ea:	4294      	cmp	r4, r2
 800b3ec:	d000      	beq.n	800b3f0 <RemapAndLinkDMAtoUARTRx+0x560>
 800b3ee:	e5bd      	b.n	800af6c <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b3f0:	4a6a      	ldr	r2, [pc, #424]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3f2:	23a8      	movs	r3, #168	; 0xa8
 800b3f4:	58d4      	ldr	r4, [r2, r3]
 800b3f6:	4d6d      	ldr	r5, [pc, #436]	; (800b5ac <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b3f8:	402c      	ands	r4, r5
 800b3fa:	50d4      	str	r4, [r2, r3]
 800b3fc:	58d5      	ldr	r5, [r2, r3]
 800b3fe:	24c0      	movs	r4, #192	; 0xc0
 800b400:	0324      	lsls	r4, r4, #12
 800b402:	432c      	orrs	r4, r5
 800b404:	50d4      	str	r4, [r2, r3]
 800b406:	e623      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b408:	680c      	ldr	r4, [r1, #0]
 800b40a:	4a69      	ldr	r2, [pc, #420]	; (800b5b0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b40c:	4294      	cmp	r4, r2
 800b40e:	d000      	beq.n	800b412 <RemapAndLinkDMAtoUARTRx+0x582>
 800b410:	e5b0      	b.n	800af74 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b412:	4a62      	ldr	r2, [pc, #392]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b414:	23a8      	movs	r3, #168	; 0xa8
 800b416:	58d4      	ldr	r4, [r2, r3]
 800b418:	4d66      	ldr	r5, [pc, #408]	; (800b5b4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b41a:	402c      	ands	r4, r5
 800b41c:	50d4      	str	r4, [r2, r3]
 800b41e:	58d5      	ldr	r5, [r2, r3]
 800b420:	24c0      	movs	r4, #192	; 0xc0
 800b422:	0424      	lsls	r4, r4, #16
 800b424:	432c      	orrs	r4, r5
 800b426:	50d4      	str	r4, [r2, r3]
 800b428:	e612      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b42a:	680c      	ldr	r4, [r1, #0]
 800b42c:	4a62      	ldr	r2, [pc, #392]	; (800b5b8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800b42e:	4294      	cmp	r4, r2
 800b430:	d000      	beq.n	800b434 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800b432:	e5a3      	b.n	800af7c <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b434:	4a61      	ldr	r2, [pc, #388]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b436:	23a8      	movs	r3, #168	; 0xa8
 800b438:	58d4      	ldr	r4, [r2, r3]
 800b43a:	25f0      	movs	r5, #240	; 0xf0
 800b43c:	43ac      	bics	r4, r5
 800b43e:	50d4      	str	r4, [r2, r3]
 800b440:	58d4      	ldr	r4, [r2, r3]
 800b442:	3d30      	subs	r5, #48	; 0x30
 800b444:	432c      	orrs	r4, r5
 800b446:	50d4      	str	r4, [r2, r3]
 800b448:	e602      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b44a:	680c      	ldr	r4, [r1, #0]
 800b44c:	4a5c      	ldr	r2, [pc, #368]	; (800b5c0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b44e:	4294      	cmp	r4, r2
 800b450:	d000      	beq.n	800b454 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800b452:	e597      	b.n	800af84 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);
 800b454:	4a59      	ldr	r2, [pc, #356]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b456:	23a8      	movs	r3, #168	; 0xa8
 800b458:	58d4      	ldr	r4, [r2, r3]
 800b45a:	4d52      	ldr	r5, [pc, #328]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b45c:	402c      	ands	r4, r5
 800b45e:	50d4      	str	r4, [r2, r3]
 800b460:	58d5      	ldr	r5, [r2, r3]
 800b462:	24c0      	movs	r4, #192	; 0xc0
 800b464:	0124      	lsls	r4, r4, #4
 800b466:	432c      	orrs	r4, r5
 800b468:	50d4      	str	r4, [r2, r3]
 800b46a:	e5f1      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b46c:	680c      	ldr	r4, [r1, #0]
 800b46e:	4a4a      	ldr	r2, [pc, #296]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x708>)
 800b470:	4294      	cmp	r4, r2
 800b472:	d000      	beq.n	800b476 <RemapAndLinkDMAtoUARTRx+0x5e6>
 800b474:	e58a      	b.n	800af8c <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b476:	4a49      	ldr	r2, [pc, #292]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b478:	23a8      	movs	r3, #168	; 0xa8
 800b47a:	58d4      	ldr	r4, [r2, r3]
 800b47c:	250f      	movs	r5, #15
 800b47e:	43ac      	bics	r4, r5
 800b480:	50d4      	str	r4, [r2, r3]
 800b482:	58d4      	ldr	r4, [r2, r3]
 800b484:	3d02      	subs	r5, #2
 800b486:	432c      	orrs	r4, r5
 800b488:	50d4      	str	r4, [r2, r3]
 800b48a:	e5e1      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b48c:	680c      	ldr	r4, [r1, #0]
 800b48e:	4a44      	ldr	r2, [pc, #272]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b490:	4294      	cmp	r4, r2
 800b492:	d000      	beq.n	800b496 <RemapAndLinkDMAtoUARTRx+0x606>
 800b494:	e57e      	b.n	800af94 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b496:	4a41      	ldr	r2, [pc, #260]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b498:	23a8      	movs	r3, #168	; 0xa8
 800b49a:	58d4      	ldr	r4, [r2, r3]
 800b49c:	4d41      	ldr	r5, [pc, #260]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b49e:	402c      	ands	r4, r5
 800b4a0:	50d4      	str	r4, [r2, r3]
 800b4a2:	58d5      	ldr	r5, [r2, r3]
 800b4a4:	24d0      	movs	r4, #208	; 0xd0
 800b4a6:	0124      	lsls	r4, r4, #4
 800b4a8:	432c      	orrs	r4, r5
 800b4aa:	50d4      	str	r4, [r2, r3]
 800b4ac:	e5d0      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b4ae:	680c      	ldr	r4, [r1, #0]
 800b4b0:	4a3d      	ldr	r2, [pc, #244]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x718>)
 800b4b2:	4294      	cmp	r4, r2
 800b4b4:	d000      	beq.n	800b4b8 <RemapAndLinkDMAtoUARTRx+0x628>
 800b4b6:	e571      	b.n	800af9c <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b4b8:	4a38      	ldr	r2, [pc, #224]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b4ba:	23a8      	movs	r3, #168	; 0xa8
 800b4bc:	58d4      	ldr	r4, [r2, r3]
 800b4be:	4d3b      	ldr	r5, [pc, #236]	; (800b5ac <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b4c0:	402c      	ands	r4, r5
 800b4c2:	50d4      	str	r4, [r2, r3]
 800b4c4:	58d5      	ldr	r5, [r2, r3]
 800b4c6:	24d0      	movs	r4, #208	; 0xd0
 800b4c8:	0324      	lsls	r4, r4, #12
 800b4ca:	432c      	orrs	r4, r5
 800b4cc:	50d4      	str	r4, [r2, r3]
 800b4ce:	e5bf      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b4d0:	680c      	ldr	r4, [r1, #0]
 800b4d2:	4a37      	ldr	r2, [pc, #220]	; (800b5b0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b4d4:	4294      	cmp	r4, r2
 800b4d6:	d000      	beq.n	800b4da <RemapAndLinkDMAtoUARTRx+0x64a>
 800b4d8:	e564      	b.n	800afa4 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b4da:	4a30      	ldr	r2, [pc, #192]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b4dc:	23a8      	movs	r3, #168	; 0xa8
 800b4de:	58d4      	ldr	r4, [r2, r3]
 800b4e0:	4d34      	ldr	r5, [pc, #208]	; (800b5b4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b4e2:	402c      	ands	r4, r5
 800b4e4:	50d4      	str	r4, [r2, r3]
 800b4e6:	58d5      	ldr	r5, [r2, r3]
 800b4e8:	24d0      	movs	r4, #208	; 0xd0
 800b4ea:	0424      	lsls	r4, r4, #16
 800b4ec:	432c      	orrs	r4, r5
 800b4ee:	50d4      	str	r4, [r2, r3]
 800b4f0:	e5ae      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b4f2:	680c      	ldr	r4, [r1, #0]
 800b4f4:	4a30      	ldr	r2, [pc, #192]	; (800b5b8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800b4f6:	4294      	cmp	r4, r2
 800b4f8:	d000      	beq.n	800b4fc <RemapAndLinkDMAtoUARTRx+0x66c>
 800b4fa:	e557      	b.n	800afac <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b4fc:	4a2f      	ldr	r2, [pc, #188]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b4fe:	23a8      	movs	r3, #168	; 0xa8
 800b500:	58d4      	ldr	r4, [r2, r3]
 800b502:	25f0      	movs	r5, #240	; 0xf0
 800b504:	43ac      	bics	r4, r5
 800b506:	50d4      	str	r4, [r2, r3]
 800b508:	58d4      	ldr	r4, [r2, r3]
 800b50a:	3d20      	subs	r5, #32
 800b50c:	432c      	orrs	r4, r5
 800b50e:	50d4      	str	r4, [r2, r3]
 800b510:	e59e      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b512:	680c      	ldr	r4, [r1, #0]
 800b514:	4a2a      	ldr	r2, [pc, #168]	; (800b5c0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b516:	4294      	cmp	r4, r2
 800b518:	d000      	beq.n	800b51c <RemapAndLinkDMAtoUARTRx+0x68c>
 800b51a:	e54b      	b.n	800afb4 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
 800b51c:	4a27      	ldr	r2, [pc, #156]	; (800b5bc <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b51e:	23a8      	movs	r3, #168	; 0xa8
 800b520:	58d4      	ldr	r4, [r2, r3]
 800b522:	4d20      	ldr	r5, [pc, #128]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b524:	402c      	ands	r4, r5
 800b526:	50d4      	str	r4, [r2, r3]
 800b528:	58d5      	ldr	r5, [r2, r3]
 800b52a:	24d0      	movs	r4, #208	; 0xd0
 800b52c:	0124      	lsls	r4, r4, #4
 800b52e:	432c      	orrs	r4, r5
 800b530:	50d4      	str	r4, [r2, r3]
 800b532:	e58d      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b534:	680c      	ldr	r4, [r1, #0]
 800b536:	4a18      	ldr	r2, [pc, #96]	; (800b598 <RemapAndLinkDMAtoUARTRx+0x708>)
 800b538:	4294      	cmp	r4, r2
 800b53a:	d000      	beq.n	800b53e <RemapAndLinkDMAtoUARTRx+0x6ae>
 800b53c:	e53e      	b.n	800afbc <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b53e:	4a17      	ldr	r2, [pc, #92]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b540:	23a8      	movs	r3, #168	; 0xa8
 800b542:	58d4      	ldr	r4, [r2, r3]
 800b544:	250f      	movs	r5, #15
 800b546:	43ac      	bics	r4, r5
 800b548:	50d4      	str	r4, [r2, r3]
 800b54a:	58d4      	ldr	r4, [r2, r3]
 800b54c:	3d01      	subs	r5, #1
 800b54e:	432c      	orrs	r4, r5
 800b550:	50d4      	str	r4, [r2, r3]
 800b552:	e57d      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b554:	680c      	ldr	r4, [r1, #0]
 800b556:	4a12      	ldr	r2, [pc, #72]	; (800b5a0 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b558:	4294      	cmp	r4, r2
 800b55a:	d000      	beq.n	800b55e <RemapAndLinkDMAtoUARTRx+0x6ce>
 800b55c:	e532      	b.n	800afc4 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b55e:	4a0f      	ldr	r2, [pc, #60]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b560:	23a8      	movs	r3, #168	; 0xa8
 800b562:	58d4      	ldr	r4, [r2, r3]
 800b564:	4d0f      	ldr	r5, [pc, #60]	; (800b5a4 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b566:	402c      	ands	r4, r5
 800b568:	50d4      	str	r4, [r2, r3]
 800b56a:	58d5      	ldr	r5, [r2, r3]
 800b56c:	24e0      	movs	r4, #224	; 0xe0
 800b56e:	0124      	lsls	r4, r4, #4
 800b570:	432c      	orrs	r4, r5
 800b572:	50d4      	str	r4, [r2, r3]
 800b574:	e56c      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b576:	680c      	ldr	r4, [r1, #0]
 800b578:	4a0b      	ldr	r2, [pc, #44]	; (800b5a8 <RemapAndLinkDMAtoUARTRx+0x718>)
 800b57a:	4294      	cmp	r4, r2
 800b57c:	d000      	beq.n	800b580 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800b57e:	e525      	b.n	800afcc <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b580:	4a06      	ldr	r2, [pc, #24]	; (800b59c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b582:	23a8      	movs	r3, #168	; 0xa8
 800b584:	58d4      	ldr	r4, [r2, r3]
 800b586:	4d09      	ldr	r5, [pc, #36]	; (800b5ac <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b588:	402c      	ands	r4, r5
 800b58a:	50d4      	str	r4, [r2, r3]
 800b58c:	58d5      	ldr	r5, [r2, r3]
 800b58e:	24e0      	movs	r4, #224	; 0xe0
 800b590:	0324      	lsls	r4, r4, #12
 800b592:	432c      	orrs	r4, r5
 800b594:	50d4      	str	r4, [r2, r3]
 800b596:	e55b      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b598:	40020008 	.word	0x40020008
 800b59c:	40020000 	.word	0x40020000
 800b5a0:	40020030 	.word	0x40020030
 800b5a4:	fffff0ff 	.word	0xfffff0ff
 800b5a8:	40020058 	.word	0x40020058
 800b5ac:	fff0ffff 	.word	0xfff0ffff
 800b5b0:	4002006c 	.word	0x4002006c
 800b5b4:	ff0fffff 	.word	0xff0fffff
 800b5b8:	4002041c 	.word	0x4002041c
 800b5bc:	40020400 	.word	0x40020400
 800b5c0:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b5c4:	680c      	ldr	r4, [r1, #0]
 800b5c6:	4a41      	ldr	r2, [pc, #260]	; (800b6cc <RemapAndLinkDMAtoUARTRx+0x83c>)
 800b5c8:	4294      	cmp	r4, r2
 800b5ca:	d000      	beq.n	800b5ce <RemapAndLinkDMAtoUARTRx+0x73e>
 800b5cc:	e502      	b.n	800afd4 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b5ce:	4a40      	ldr	r2, [pc, #256]	; (800b6d0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b5d0:	23a8      	movs	r3, #168	; 0xa8
 800b5d2:	58d4      	ldr	r4, [r2, r3]
 800b5d4:	4d3f      	ldr	r5, [pc, #252]	; (800b6d4 <RemapAndLinkDMAtoUARTRx+0x844>)
 800b5d6:	402c      	ands	r4, r5
 800b5d8:	50d4      	str	r4, [r2, r3]
 800b5da:	58d5      	ldr	r5, [r2, r3]
 800b5dc:	24e0      	movs	r4, #224	; 0xe0
 800b5de:	0424      	lsls	r4, r4, #16
 800b5e0:	432c      	orrs	r4, r5
 800b5e2:	50d4      	str	r4, [r2, r3]
 800b5e4:	e534      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b5e6:	680c      	ldr	r4, [r1, #0]
 800b5e8:	4a3b      	ldr	r2, [pc, #236]	; (800b6d8 <RemapAndLinkDMAtoUARTRx+0x848>)
 800b5ea:	4294      	cmp	r4, r2
 800b5ec:	d000      	beq.n	800b5f0 <RemapAndLinkDMAtoUARTRx+0x760>
 800b5ee:	e4f5      	b.n	800afdc <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b5f0:	4a3a      	ldr	r2, [pc, #232]	; (800b6dc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b5f2:	23a8      	movs	r3, #168	; 0xa8
 800b5f4:	58d4      	ldr	r4, [r2, r3]
 800b5f6:	25f0      	movs	r5, #240	; 0xf0
 800b5f8:	43ac      	bics	r4, r5
 800b5fa:	50d4      	str	r4, [r2, r3]
 800b5fc:	58d4      	ldr	r4, [r2, r3]
 800b5fe:	3d10      	subs	r5, #16
 800b600:	432c      	orrs	r4, r5
 800b602:	50d4      	str	r4, [r2, r3]
 800b604:	e524      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b606:	680c      	ldr	r4, [r1, #0]
 800b608:	4a35      	ldr	r2, [pc, #212]	; (800b6e0 <RemapAndLinkDMAtoUARTRx+0x850>)
 800b60a:	4294      	cmp	r4, r2
 800b60c:	d000      	beq.n	800b610 <RemapAndLinkDMAtoUARTRx+0x780>
 800b60e:	e4e9      	b.n	800afe4 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);
 800b610:	4a32      	ldr	r2, [pc, #200]	; (800b6dc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b612:	23a8      	movs	r3, #168	; 0xa8
 800b614:	58d4      	ldr	r4, [r2, r3]
 800b616:	4d33      	ldr	r5, [pc, #204]	; (800b6e4 <RemapAndLinkDMAtoUARTRx+0x854>)
 800b618:	402c      	ands	r4, r5
 800b61a:	50d4      	str	r4, [r2, r3]
 800b61c:	58d5      	ldr	r5, [r2, r3]
 800b61e:	24e0      	movs	r4, #224	; 0xe0
 800b620:	0124      	lsls	r4, r4, #4
 800b622:	432c      	orrs	r4, r5
 800b624:	50d4      	str	r4, [r2, r3]
 800b626:	e513      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b628:	680c      	ldr	r4, [r1, #0]
 800b62a:	4a2f      	ldr	r2, [pc, #188]	; (800b6e8 <RemapAndLinkDMAtoUARTRx+0x858>)
 800b62c:	4294      	cmp	r4, r2
 800b62e:	d000      	beq.n	800b632 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800b630:	e4dc      	b.n	800afec <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b632:	4a27      	ldr	r2, [pc, #156]	; (800b6d0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b634:	23a8      	movs	r3, #168	; 0xa8
 800b636:	58d4      	ldr	r4, [r2, r3]
 800b638:	250f      	movs	r5, #15
 800b63a:	43ac      	bics	r4, r5
 800b63c:	50d4      	str	r4, [r2, r3]
 800b63e:	58d4      	ldr	r4, [r2, r3]
 800b640:	432c      	orrs	r4, r5
 800b642:	50d4      	str	r4, [r2, r3]
 800b644:	e504      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b646:	680c      	ldr	r4, [r1, #0]
 800b648:	4a28      	ldr	r2, [pc, #160]	; (800b6ec <RemapAndLinkDMAtoUARTRx+0x85c>)
 800b64a:	4294      	cmp	r4, r2
 800b64c:	d000      	beq.n	800b650 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800b64e:	e4d1      	b.n	800aff4 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b650:	4a1f      	ldr	r2, [pc, #124]	; (800b6d0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b652:	23a8      	movs	r3, #168	; 0xa8
 800b654:	58d4      	ldr	r4, [r2, r3]
 800b656:	4d23      	ldr	r5, [pc, #140]	; (800b6e4 <RemapAndLinkDMAtoUARTRx+0x854>)
 800b658:	402c      	ands	r4, r5
 800b65a:	50d4      	str	r4, [r2, r3]
 800b65c:	58d5      	ldr	r5, [r2, r3]
 800b65e:	24f0      	movs	r4, #240	; 0xf0
 800b660:	0124      	lsls	r4, r4, #4
 800b662:	432c      	orrs	r4, r5
 800b664:	50d4      	str	r4, [r2, r3]
 800b666:	e4f3      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b668:	680c      	ldr	r4, [r1, #0]
 800b66a:	4a21      	ldr	r2, [pc, #132]	; (800b6f0 <RemapAndLinkDMAtoUARTRx+0x860>)
 800b66c:	4294      	cmp	r4, r2
 800b66e:	d000      	beq.n	800b672 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800b670:	e4c4      	b.n	800affc <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b672:	4a17      	ldr	r2, [pc, #92]	; (800b6d0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b674:	23a8      	movs	r3, #168	; 0xa8
 800b676:	58d4      	ldr	r4, [r2, r3]
 800b678:	4d1e      	ldr	r5, [pc, #120]	; (800b6f4 <RemapAndLinkDMAtoUARTRx+0x864>)
 800b67a:	402c      	ands	r4, r5
 800b67c:	50d4      	str	r4, [r2, r3]
 800b67e:	58d5      	ldr	r5, [r2, r3]
 800b680:	24f0      	movs	r4, #240	; 0xf0
 800b682:	0324      	lsls	r4, r4, #12
 800b684:	432c      	orrs	r4, r5
 800b686:	50d4      	str	r4, [r2, r3]
 800b688:	e4e2      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b68a:	680c      	ldr	r4, [r1, #0]
 800b68c:	4a0f      	ldr	r2, [pc, #60]	; (800b6cc <RemapAndLinkDMAtoUARTRx+0x83c>)
 800b68e:	4294      	cmp	r4, r2
 800b690:	d000      	beq.n	800b694 <RemapAndLinkDMAtoUARTRx+0x804>
 800b692:	e4b7      	b.n	800b004 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b694:	4a0e      	ldr	r2, [pc, #56]	; (800b6d0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b696:	23a8      	movs	r3, #168	; 0xa8
 800b698:	58d4      	ldr	r4, [r2, r3]
 800b69a:	4d0e      	ldr	r5, [pc, #56]	; (800b6d4 <RemapAndLinkDMAtoUARTRx+0x844>)
 800b69c:	402c      	ands	r4, r5
 800b69e:	50d4      	str	r4, [r2, r3]
 800b6a0:	58d5      	ldr	r5, [r2, r3]
 800b6a2:	24f0      	movs	r4, #240	; 0xf0
 800b6a4:	0424      	lsls	r4, r4, #16
 800b6a6:	432c      	orrs	r4, r5
 800b6a8:	50d4      	str	r4, [r2, r3]
 800b6aa:	e4d1      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b6ac:	680c      	ldr	r4, [r1, #0]
 800b6ae:	4a0a      	ldr	r2, [pc, #40]	; (800b6d8 <RemapAndLinkDMAtoUARTRx+0x848>)
 800b6b0:	4294      	cmp	r4, r2
 800b6b2:	d000      	beq.n	800b6b6 <RemapAndLinkDMAtoUARTRx+0x826>
 800b6b4:	e4aa      	b.n	800b00c <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b6b6:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b6b8:	23a8      	movs	r3, #168	; 0xa8
 800b6ba:	58d4      	ldr	r4, [r2, r3]
 800b6bc:	25f0      	movs	r5, #240	; 0xf0
 800b6be:	43ac      	bics	r4, r5
 800b6c0:	50d4      	str	r4, [r2, r3]
 800b6c2:	58d4      	ldr	r4, [r2, r3]
 800b6c4:	432c      	orrs	r4, r5
 800b6c6:	50d4      	str	r4, [r2, r3]
 800b6c8:	e4c2      	b.n	800b050 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	4002006c 	.word	0x4002006c
 800b6d0:	40020000 	.word	0x40020000
 800b6d4:	ff0fffff 	.word	0xff0fffff
 800b6d8:	4002041c 	.word	0x4002041c
 800b6dc:	40020400 	.word	0x40020400
 800b6e0:	40020430 	.word	0x40020430
 800b6e4:	fffff0ff 	.word	0xfffff0ff
 800b6e8:	40020008 	.word	0x40020008
 800b6ec:	40020030 	.word	0x40020030
 800b6f0:	40020058 	.word	0x40020058
 800b6f4:	fff0ffff 	.word	0xfff0ffff

0800b6f8 <DMA_MSG_RX_Setup>:
{	
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	0004      	movs	r4, r0
 800b6fc:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b6fe:	f7ff fbc7 	bl	800ae90 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b702:	2100      	movs	r1, #0
 800b704:	0028      	movs	r0, r5
 800b706:	f7ff fb39 	bl	800ad7c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800b70a:	0020      	movs	r0, r4
 800b70c:	f7ff f9ea 	bl	800aae4 <GetPort>
 800b710:	1e41      	subs	r1, r0, #1
 800b712:	4b03      	ldr	r3, [pc, #12]	; (800b720 <DMA_MSG_RX_Setup+0x28>)
 800b714:	18c9      	adds	r1, r1, r3
 800b716:	2201      	movs	r2, #1
 800b718:	0020      	movs	r0, r4
 800b71a:	f007 f849 	bl	80127b0 <HAL_UART_Receive_DMA>
}
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	20001b00 	.word	0x20001b00

0800b724 <SetupMessagingRxDMAs>:
{	
 800b724:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b726:	4b17      	ldr	r3, [pc, #92]	; (800b784 <SetupMessagingRxDMAs+0x60>)
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d010      	beq.n	800b750 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <SetupMessagingRxDMAs+0x60>)
 800b730:	789b      	ldrb	r3, [r3, #2]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d011      	beq.n	800b75a <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800b736:	4b13      	ldr	r3, [pc, #76]	; (800b784 <SetupMessagingRxDMAs+0x60>)
 800b738:	78db      	ldrb	r3, [r3, #3]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d012      	beq.n	800b764 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800b73e:	4b11      	ldr	r3, [pc, #68]	; (800b784 <SetupMessagingRxDMAs+0x60>)
 800b740:	791b      	ldrb	r3, [r3, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d013      	beq.n	800b76e <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800b746:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <SetupMessagingRxDMAs+0x60>)
 800b748:	795b      	ldrb	r3, [r3, #5]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d014      	beq.n	800b778 <SetupMessagingRxDMAs+0x54>
}
 800b74e:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b750:	490d      	ldr	r1, [pc, #52]	; (800b788 <SetupMessagingRxDMAs+0x64>)
 800b752:	480e      	ldr	r0, [pc, #56]	; (800b78c <SetupMessagingRxDMAs+0x68>)
 800b754:	f7ff ffd0 	bl	800b6f8 <DMA_MSG_RX_Setup>
 800b758:	e7e9      	b.n	800b72e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b75a:	490d      	ldr	r1, [pc, #52]	; (800b790 <SetupMessagingRxDMAs+0x6c>)
 800b75c:	480d      	ldr	r0, [pc, #52]	; (800b794 <SetupMessagingRxDMAs+0x70>)
 800b75e:	f7ff ffcb 	bl	800b6f8 <DMA_MSG_RX_Setup>
 800b762:	e7e8      	b.n	800b736 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b764:	490c      	ldr	r1, [pc, #48]	; (800b798 <SetupMessagingRxDMAs+0x74>)
 800b766:	480d      	ldr	r0, [pc, #52]	; (800b79c <SetupMessagingRxDMAs+0x78>)
 800b768:	f7ff ffc6 	bl	800b6f8 <DMA_MSG_RX_Setup>
 800b76c:	e7e7      	b.n	800b73e <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b76e:	490c      	ldr	r1, [pc, #48]	; (800b7a0 <SetupMessagingRxDMAs+0x7c>)
 800b770:	480c      	ldr	r0, [pc, #48]	; (800b7a4 <SetupMessagingRxDMAs+0x80>)
 800b772:	f7ff ffc1 	bl	800b6f8 <DMA_MSG_RX_Setup>
 800b776:	e7e6      	b.n	800b746 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b778:	490b      	ldr	r1, [pc, #44]	; (800b7a8 <SetupMessagingRxDMAs+0x84>)
 800b77a:	480c      	ldr	r0, [pc, #48]	; (800b7ac <SetupMessagingRxDMAs+0x88>)
 800b77c:	f7ff ffbc 	bl	800b6f8 <DMA_MSG_RX_Setup>
}
 800b780:	e7e5      	b.n	800b74e <SetupMessagingRxDMAs+0x2a>
 800b782:	46c0      	nop			; (mov r8, r8)
 800b784:	2000095c 	.word	0x2000095c
 800b788:	20002548 	.word	0x20002548
 800b78c:	20002214 	.word	0x20002214
 800b790:	20002580 	.word	0x20002580
 800b794:	20002054 	.word	0x20002054
 800b798:	200025b8 	.word	0x200025b8
 800b79c:	200021a4 	.word	0x200021a4
 800b7a0:	200025f0 	.word	0x200025f0
 800b7a4:	20002134 	.word	0x20002134
 800b7a8:	20002628 	.word	0x20002628
 800b7ac:	200020c4 	.word	0x200020c4

0800b7b0 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b2:	46c6      	mov	lr, r8
 800b7b4:	b500      	push	{lr}
 800b7b6:	0007      	movs	r7, r0
	StopStreamDMA(port);
 800b7b8:	f7ff fa9e 	bl	800acf8 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b7bc:	1e7c      	subs	r4, r7, #1
 800b7be:	00e5      	lsls	r5, r4, #3
 800b7c0:	1b2e      	subs	r6, r5, r4
 800b7c2:	00f6      	lsls	r6, r6, #3
 800b7c4:	4b11      	ldr	r3, [pc, #68]	; (800b80c <SwitchStreamDMAToMsg+0x5c>)
 800b7c6:	18f6      	adds	r6, r6, r3
 800b7c8:	4a11      	ldr	r2, [pc, #68]	; (800b810 <SwitchStreamDMAToMsg+0x60>)
 800b7ca:	1b2b      	subs	r3, r5, r4
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	4690      	mov	r8, r2
 800b7d0:	5899      	ldr	r1, [r3, r2]
 800b7d2:	0030      	movs	r0, r6
 800b7d4:	f7ff fa0a 	bl	800abec <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b7d8:	1b2b      	subs	r3, r5, r4
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	4443      	add	r3, r8
 800b7de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b7e0:	f7ff f980 	bl	800aae4 <GetPort>
 800b7e4:	4b0b      	ldr	r3, [pc, #44]	; (800b814 <SwitchStreamDMAToMsg+0x64>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	541a      	strb	r2, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800b7ea:	1b2d      	subs	r5, r5, r4
 800b7ec:	00ed      	lsls	r5, r5, #3
 800b7ee:	4643      	mov	r3, r8
 800b7f0:	50ea      	str	r2, [r5, r3]
	dmaStreamDst[port - 1] = 0;
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <SwitchStreamDMAToMsg+0x68>)
 800b7f4:	00a4      	lsls	r4, r4, #2
 800b7f6:	50e2      	str	r2, [r4, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b7f8:	0038      	movs	r0, r7
 800b7fa:	f002 fb53 	bl	800dea4 <GetUart>
 800b7fe:	0031      	movs	r1, r6
 800b800:	f7ff ff7a 	bl	800b6f8 <DMA_MSG_RX_Setup>
}
 800b804:	bc80      	pop	{r7}
 800b806:	46b8      	mov	r8, r7
 800b808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	20002548 	.word	0x20002548
 800b810:	20002350 	.word	0x20002350
 800b814:	2000095c 	.word	0x2000095c
 800b818:	200016bc 	.word	0x200016bc

0800b81c <DMA_STREAM_Setup>:
{	
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	0005      	movs	r5, r0
 800b820:	000f      	movs	r7, r1
 800b822:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b824:	f7ff f95e 	bl	800aae4 <GetPort>
	hDMA = &streamDMA[port-1];
 800b828:	3801      	subs	r0, #1
 800b82a:	00c4      	lsls	r4, r0, #3
 800b82c:	1a24      	subs	r4, r4, r0
 800b82e:	00e4      	lsls	r4, r4, #3
 800b830:	4b09      	ldr	r3, [pc, #36]	; (800b858 <DMA_STREAM_Setup+0x3c>)
 800b832:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b834:	0021      	movs	r1, r4
 800b836:	0028      	movs	r0, r5
 800b838:	f7ff fb2a 	bl	800ae90 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b83c:	2101      	movs	r1, #1
 800b83e:	0020      	movs	r0, r4
 800b840:	f7ff fa9c 	bl	800ad7c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b844:	2369      	movs	r3, #105	; 0x69
 800b846:	2201      	movs	r2, #1
 800b848:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	3128      	adds	r1, #40	; 0x28
 800b84e:	0032      	movs	r2, r6
 800b850:	0028      	movs	r0, r5
 800b852:	f006 ffad 	bl	80127b0 <HAL_UART_Receive_DMA>
}
 800b856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b858:	20002350 	.word	0x20002350

0800b85c <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b85c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b85e:	4807      	ldr	r0, [pc, #28]	; (800b87c <CRC_Init+0x20>)
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <CRC_Init+0x24>)
 800b862:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b864:	2310      	movs	r3, #16
 800b866:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800b868:	2300      	movs	r3, #0
 800b86a:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b86c:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b86e:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b870:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b872:	3303      	adds	r3, #3
 800b874:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b876:	f004 ff60 	bl	801073a <HAL_CRC_Init>
}
 800b87a:	bd10      	pop	{r4, pc}
 800b87c:	20002284 	.word	0x20002284
 800b880:	40023000 	.word	0x40023000

0800b884 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b884:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b886:	4a05      	ldr	r2, [pc, #20]	; (800b89c <HAL_CRC_MspInit+0x18>)
 800b888:	6951      	ldr	r1, [r2, #20]
 800b88a:	2340      	movs	r3, #64	; 0x40
 800b88c:	4319      	orrs	r1, r3
 800b88e:	6151      	str	r1, [r2, #20]
 800b890:	6952      	ldr	r2, [r2, #20]
 800b892:	4013      	ands	r3, r2
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	9b01      	ldr	r3, [sp, #4]
}
 800b898:	b002      	add	sp, #8
 800b89a:	4770      	bx	lr
 800b89c:	40021000 	.word	0x40021000

0800b8a0 <CalculateCRC8>:
/*
 * calculate CRC8 byte for a data buffer
 */

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800b8a0:	b530      	push	{r4, r5, lr}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	0005      	movs	r5, r0
 800b8a6:	000c      	movs	r4, r1
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9301      	str	r3, [sp, #4]

  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d03d      	beq.n	800b92c <CalculateCRC8+0x8c>
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	d03d      	beq.n	800b930 <CalculateCRC8+0x90>
  {
	if(size < 4)
 800b8b4:	2903      	cmp	r1, #3
 800b8b6:	d816      	bhi.n	800b8e6 <CalculateCRC8+0x46>
	{
		temp_index = 0;
		for(int i=0; i<4; i++)
 800b8b8:	2300      	movs	r3, #0
		temp_index = 0;
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	e001      	b.n	800b8c2 <CalculateCRC8+0x22>
		for(int i=0; i<4; i++)
 800b8be:	3301      	adds	r3, #1
		{
			temp_buffer[i] = pBuffer[temp_index++];
 800b8c0:	0011      	movs	r1, r2
		for(int i=0; i<4; i++)
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	dc08      	bgt.n	800b8d8 <CalculateCRC8+0x38>
			temp_buffer[i] = pBuffer[temp_index++];
 800b8c6:	1c4a      	adds	r2, r1, #1
 800b8c8:	b2d2      	uxtb	r2, r2
 800b8ca:	5c68      	ldrb	r0, [r5, r1]
 800b8cc:	a901      	add	r1, sp, #4
 800b8ce:	54c8      	strb	r0, [r1, r3]
			if(--size == 0) break;
 800b8d0:	3c01      	subs	r4, #1
 800b8d2:	b2a4      	uxth	r4, r4
 800b8d4:	2c00      	cmp	r4, #0
 800b8d6:	d1f2      	bne.n	800b8be <CalculateCRC8+0x1e>
		}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b8d8:	4817      	ldr	r0, [pc, #92]	; (800b938 <CalculateCRC8+0x98>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	a901      	add	r1, sp, #4
 800b8de:	f004 ff87 	bl	80107f0 <HAL_CRC_Calculate>
 800b8e2:	b2c0      	uxtb	r0, r0
 800b8e4:	e025      	b.n	800b932 <CalculateCRC8+0x92>

	}

	else
	{
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b8e6:	088a      	lsrs	r2, r1, #2
 800b8e8:	4813      	ldr	r0, [pc, #76]	; (800b938 <CalculateCRC8+0x98>)
 800b8ea:	0029      	movs	r1, r5
 800b8ec:	f004 ff80 	bl	80107f0 <HAL_CRC_Calculate>
 800b8f0:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	0013      	movs	r3, r2
 800b8f6:	4023      	ands	r3, r4
 800b8f8:	4222      	tst	r2, r4
 800b8fa:	d01a      	beq.n	800b932 <CalculateCRC8+0x92>
		{
			temp_index = size - (size%4);
 800b8fc:	b2e4      	uxtb	r4, r4
 800b8fe:	4394      	bics	r4, r2
			size %= 4;
			for(int i=0; i<4; i++)
 800b900:	2200      	movs	r2, #0
 800b902:	2a03      	cmp	r2, #3
 800b904:	dc0b      	bgt.n	800b91e <CalculateCRC8+0x7e>
			{
				temp_buffer[i] = pBuffer[temp_index++];
 800b906:	1c61      	adds	r1, r4, #1
 800b908:	b2c9      	uxtb	r1, r1
 800b90a:	5d2c      	ldrb	r4, [r5, r4]
 800b90c:	a801      	add	r0, sp, #4
 800b90e:	5484      	strb	r4, [r0, r2]
				if(--size == 0) break;
 800b910:	3b01      	subs	r3, #1
 800b912:	b29b      	uxth	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <CalculateCRC8+0x7e>
			for(int i=0; i<4; i++)
 800b918:	3201      	adds	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b91a:	000c      	movs	r4, r1
 800b91c:	e7f1      	b.n	800b902 <CalculateCRC8+0x62>
			}
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b91e:	4806      	ldr	r0, [pc, #24]	; (800b938 <CalculateCRC8+0x98>)
 800b920:	2201      	movs	r2, #1
 800b922:	a901      	add	r1, sp, #4
 800b924:	f004 ff3a 	bl	801079c <HAL_CRC_Accumulate>
 800b928:	b2c0      	uxtb	r0, r0

		}
	}

	return pTemp;
 800b92a:	e002      	b.n	800b932 <CalculateCRC8+0x92>
  }
  
else
	return 0;
 800b92c:	2000      	movs	r0, #0
 800b92e:	e000      	b.n	800b932 <CalculateCRC8+0x92>
 800b930:	2000      	movs	r0, #0
}
 800b932:	b003      	add	sp, #12
 800b934:	bd30      	pop	{r4, r5, pc}
 800b936:	46c0      	nop			; (mov r8, r8)
 800b938:	20002284 	.word	0x20002284

0800b93c <EE_FindValidPage>:
 *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 * @retval Valid page number (PAGEA or PAGEB) or NO_VALID_PAGE in case
 *   of no valid page was found
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
 800b93c:	0002      	movs	r2, r0
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b93e:	4b13      	ldr	r3, [pc, #76]	; (800b98c <EE_FindValidPage+0x50>)
 800b940:	8818      	ldrh	r0, [r3, #0]
 800b942:	b280      	uxth	r0, r0
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b944:	4b12      	ldr	r3, [pc, #72]	; (800b990 <EE_FindValidPage+0x54>)
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	b29b      	uxth	r3, r3
	
	/* Write or read operation */
	switch(Operation){
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d011      	beq.n	800b972 <EE_FindValidPage+0x36>
 800b94e:	2a01      	cmp	r2, #1
 800b950:	d115      	bne.n	800b97e <EE_FindValidPage+0x42>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 800b952:	2b00      	cmp	r3, #0
 800b954:	d106      	bne.n	800b964 <EE_FindValidPage+0x28>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 800b956:	4a0f      	ldr	r2, [pc, #60]	; (800b994 <EE_FindValidPage+0x58>)
 800b958:	4290      	cmp	r0, r2
 800b95a:	d001      	beq.n	800b960 <EE_FindValidPage+0x24>
					return PAGEA; /* PageA valid */
				}
				else{
					return PAGEB; /* PageB valid */
 800b95c:	2002      	movs	r0, #2
 800b95e:	e00f      	b.n	800b980 <EE_FindValidPage+0x44>
					return PAGEA; /* PageA valid */
 800b960:	0018      	movs	r0, r3
 800b962:	e00d      	b.n	800b980 <EE_FindValidPage+0x44>
				}
			}
			else if(PageStatusA == VALID_PAGE){
 800b964:	2800      	cmp	r0, #0
 800b966:	d10c      	bne.n	800b982 <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 800b968:	4a0a      	ldr	r2, [pc, #40]	; (800b994 <EE_FindValidPage+0x58>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d108      	bne.n	800b980 <EE_FindValidPage+0x44>
					return PAGEB; /* PageB valid */
 800b96e:	3002      	adds	r0, #2
 800b970:	e006      	b.n	800b980 <EE_FindValidPage+0x44>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 800b972:	2800      	cmp	r0, #0
 800b974:	d004      	beq.n	800b980 <EE_FindValidPage+0x44>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 800b976:	2b00      	cmp	r3, #0
 800b978:	d105      	bne.n	800b986 <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 800b97a:	2002      	movs	r0, #2
 800b97c:	e000      	b.n	800b980 <EE_FindValidPage+0x44>
	switch(Operation){
 800b97e:	2000      	movs	r0, #0
			}
			
		default:
			return PAGEA; /* PageA valid */
	}
}
 800b980:	4770      	bx	lr
				return NO_VALID_PAGE; /* No valid Page */
 800b982:	20ab      	movs	r0, #171	; 0xab
 800b984:	e7fc      	b.n	800b980 <EE_FindValidPage+0x44>
				return NO_VALID_PAGE; /* No valid Page */
 800b986:	20ab      	movs	r0, #171	; 0xab
 800b988:	e7fa      	b.n	800b980 <EE_FindValidPage+0x44>
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	0801e000 	.word	0x0801e000
 800b990:	0801f000 	.word	0x0801f000
 800b994:	0000eeee 	.word	0x0000eeee

0800b998 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	0005      	movs	r5, r0
 800b99c:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b99e:	f005 fc71 	bl	8011284 <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	f7ff ffca 	bl	800b93c <EE_FindValidPage>
 800b9a8:	0002      	movs	r2, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 800b9aa:	28ab      	cmp	r0, #171	; 0xab
 800b9ac:	d03d      	beq.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b9ae:	4b1f      	ldr	r3, [pc, #124]	; (800ba2c <EE_VerifyPageFullWriteVariable+0x94>)
 800b9b0:	18c4      	adds	r4, r0, r3
 800b9b2:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b9b4:	3202      	adds	r2, #2
 800b9b6:	02d2      	lsls	r2, r2, #11
 800b9b8:	4b1d      	ldr	r3, [pc, #116]	; (800ba30 <EE_VerifyPageFullWriteVariable+0x98>)
 800b9ba:	469c      	mov	ip, r3
 800b9bc:	4462      	add	r2, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 800b9be:	4294      	cmp	r4, r2
 800b9c0:	d230      	bcs.n	800ba24 <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	d001      	beq.n	800b9cc <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b9c8:	3404      	adds	r4, #4
 800b9ca:	e7f8      	b.n	800b9be <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b9cc:	0032      	movs	r2, r6
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	0021      	movs	r1, r4
 800b9d2:	2001      	movs	r0, #1
 800b9d4:	f005 fca0 	bl	8011318 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9d8:	4816      	ldr	r0, [pc, #88]	; (800ba34 <EE_VerifyPageFullWriteVariable+0x9c>)
 800b9da:	f005 fc71 	bl	80112c0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d003      	beq.n	800b9ea <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 800b9e2:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <EE_VerifyPageFullWriteVariable+0xa0>)
 800b9e4:	69d8      	ldr	r0, [r3, #28]
 800b9e6:	b280      	uxth	r0, r0
 800b9e8:	e01f      	b.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9ea:	4a14      	ldr	r2, [pc, #80]	; (800ba3c <EE_VerifyPageFullWriteVariable+0xa4>)
 800b9ec:	6913      	ldr	r3, [r2, #16]
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	438b      	bics	r3, r1
 800b9f2:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b9f4:	1ca1      	adds	r1, r4, #2
 800b9f6:	002a      	movs	r2, r5
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	f005 fc8c 	bl	8011318 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba00:	480c      	ldr	r0, [pc, #48]	; (800ba34 <EE_VerifyPageFullWriteVariable+0x9c>)
 800ba02:	f005 fc5d 	bl	80112c0 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d003      	beq.n	800ba12 <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 800ba0a:	4b0b      	ldr	r3, [pc, #44]	; (800ba38 <EE_VerifyPageFullWriteVariable+0xa0>)
 800ba0c:	69d8      	ldr	r0, [r3, #28]
 800ba0e:	b280      	uxth	r0, r0
 800ba10:	e00b      	b.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba12:	4a0a      	ldr	r2, [pc, #40]	; (800ba3c <EE_VerifyPageFullWriteVariable+0xa4>)
 800ba14:	6913      	ldr	r3, [r2, #16]
 800ba16:	2101      	movs	r1, #1
 800ba18:	438b      	bics	r3, r1
 800ba1a:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800ba1c:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <EE_VerifyPageFullWriteVariable+0xa0>)
 800ba1e:	69d8      	ldr	r0, [r3, #28]
 800ba20:	b280      	uxth	r0, r0
 800ba22:	e002      	b.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 800ba24:	f005 fc42 	bl	80112ac <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800ba28:	2080      	movs	r0, #128	; 0x80
}
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	0001003c 	.word	0x0001003c
 800ba30:	0801dffe 	.word	0x0801dffe
 800ba34:	0000c350 	.word	0x0000c350
 800ba38:	20006c28 	.word	0x20006c28
 800ba3c:	40022000 	.word	0x40022000

0800ba40 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	0005      	movs	r5, r0
 800ba44:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800ba46:	2000      	movs	r0, #0
 800ba48:	f7ff ff78 	bl	800b93c <EE_FindValidPage>
 800ba4c:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 800ba4e:	28ab      	cmp	r0, #171	; 0xab
 800ba50:	d016      	beq.n	800ba80 <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800ba52:	4a0c      	ldr	r2, [pc, #48]	; (800ba84 <EE_ReadVariable+0x44>)
 800ba54:	1881      	adds	r1, r0, r2
 800ba56:	02c9      	lsls	r1, r1, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800ba58:	3302      	adds	r3, #2
 800ba5a:	02db      	lsls	r3, r3, #11
 800ba5c:	4a0a      	ldr	r2, [pc, #40]	; (800ba88 <EE_ReadVariable+0x48>)
 800ba5e:	4694      	mov	ip, r2
 800ba60:	4463      	add	r3, ip
	while(Address > (PageStartAddress + 2)){
 800ba62:	1c8a      	adds	r2, r1, #2
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d20a      	bcs.n	800ba7e <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 800ba68:	881a      	ldrh	r2, [r3, #0]
 800ba6a:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800ba6c:	42aa      	cmp	r2, r5
 800ba6e:	d001      	beq.n	800ba74 <EE_ReadVariable+0x34>
			Address =Address - 4;
 800ba70:	3b04      	subs	r3, #4
 800ba72:	e7f6      	b.n	800ba62 <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800ba74:	3b02      	subs	r3, #2
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 800ba7a:	2000      	movs	r0, #0
			break;
 800ba7c:	e000      	b.n	800ba80 <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800ba7e:	2001      	movs	r0, #1
}
 800ba80:	bd70      	pop	{r4, r5, r6, pc}
 800ba82:	46c0      	nop			; (mov r8, r8)
 800ba84:	0001003c 	.word	0x0001003c
 800ba88:	0801dffe 	.word	0x0801dffe

0800ba8c <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8e:	0005      	movs	r5, r0
 800ba90:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800ba92:	f005 fbf7 	bl	8011284 <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800ba96:	2000      	movs	r0, #0
 800ba98:	f7ff ff50 	bl	800b93c <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 800ba9c:	2802      	cmp	r0, #2
 800ba9e:	d013      	beq.n	800bac8 <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d000      	beq.n	800baa6 <EE_PageTransfer+0x1a>
 800baa4:	e06d      	b.n	800bb82 <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800baa6:	4f38      	ldr	r7, [pc, #224]	; (800bb88 <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800baa8:	4e38      	ldr	r6, [pc, #224]	; (800bb8c <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800baaa:	4a39      	ldr	r2, [pc, #228]	; (800bb90 <EE_PageTransfer+0x104>)
 800baac:	2300      	movs	r3, #0
 800baae:	0031      	movs	r1, r6
 800bab0:	2001      	movs	r0, #1
 800bab2:	f005 fc31 	bl	8011318 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bab6:	4837      	ldr	r0, [pc, #220]	; (800bb94 <EE_PageTransfer+0x108>)
 800bab8:	f005 fc02 	bl	80112c0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800babc:	2800      	cmp	r0, #0
 800babe:	d006      	beq.n	800bace <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 800bac0:	4b35      	ldr	r3, [pc, #212]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bac2:	69d8      	ldr	r0, [r3, #28]
 800bac4:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 800bac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800bac8:	4f30      	ldr	r7, [pc, #192]	; (800bb8c <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800baca:	4e2f      	ldr	r6, [pc, #188]	; (800bb88 <EE_PageTransfer+0xfc>)
 800bacc:	e7ed      	b.n	800baaa <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bace:	4a33      	ldr	r2, [pc, #204]	; (800bb9c <EE_PageTransfer+0x110>)
 800bad0:	6913      	ldr	r3, [r2, #16]
 800bad2:	2101      	movs	r1, #1
 800bad4:	438b      	bics	r3, r1
 800bad6:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bad8:	0021      	movs	r1, r4
 800bada:	0028      	movs	r0, r5
 800badc:	f7ff ff5c 	bl	800b998 <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d1f0      	bne.n	800bac6 <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bae4:	2401      	movs	r4, #1
 800bae6:	e001      	b.n	800baec <EE_PageTransfer+0x60>
 800bae8:	3401      	adds	r4, #1
 800baea:	b2a4      	uxth	r4, r4
 800baec:	2380      	movs	r3, #128	; 0x80
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d80f      	bhi.n	800bb14 <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800baf4:	42ac      	cmp	r4, r5
 800baf6:	d0f7      	beq.n	800bae8 <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800baf8:	4929      	ldr	r1, [pc, #164]	; (800bba0 <EE_PageTransfer+0x114>)
 800bafa:	0020      	movs	r0, r4
 800bafc:	f7ff ffa0 	bl	800ba40 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800bb00:	2801      	cmp	r0, #1
 800bb02:	d0f1      	beq.n	800bae8 <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bb04:	4b26      	ldr	r3, [pc, #152]	; (800bba0 <EE_PageTransfer+0x114>)
 800bb06:	8819      	ldrh	r1, [r3, #0]
 800bb08:	0020      	movs	r0, r4
 800bb0a:	f7ff ff45 	bl	800b998 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d0ea      	beq.n	800bae8 <EE_PageTransfer+0x5c>
 800bb12:	e7d8      	b.n	800bac6 <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 800bb14:	0038      	movs	r0, r7
 800bb16:	f005 fc63 	bl	80113e0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb1a:	481e      	ldr	r0, [pc, #120]	; (800bb94 <EE_PageTransfer+0x108>)
 800bb1c:	f005 fbd0 	bl	80112c0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d003      	beq.n	800bb2c <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 800bb24:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bb26:	69d8      	ldr	r0, [r3, #28]
 800bb28:	b280      	uxth	r0, r0
 800bb2a:	e7cc      	b.n	800bac6 <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800bb2c:	2380      	movs	r3, #128	; 0x80
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	18f8      	adds	r0, r7, r3
 800bb32:	f005 fc55 	bl	80113e0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb36:	4817      	ldr	r0, [pc, #92]	; (800bb94 <EE_PageTransfer+0x108>)
 800bb38:	f005 fbc2 	bl	80112c0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d003      	beq.n	800bb48 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 800bb40:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bb42:	69d8      	ldr	r0, [r3, #28]
 800bb44:	b280      	uxth	r0, r0
 800bb46:	e7be      	b.n	800bac6 <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb48:	4a14      	ldr	r2, [pc, #80]	; (800bb9c <EE_PageTransfer+0x110>)
 800bb4a:	6913      	ldr	r3, [r2, #16]
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	438b      	bics	r3, r1
 800bb50:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800bb52:	2200      	movs	r2, #0
 800bb54:	2300      	movs	r3, #0
 800bb56:	0031      	movs	r1, r6
 800bb58:	2001      	movs	r0, #1
 800bb5a:	f005 fbdd 	bl	8011318 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb5e:	480d      	ldr	r0, [pc, #52]	; (800bb94 <EE_PageTransfer+0x108>)
 800bb60:	f005 fbae 	bl	80112c0 <FLASH_WaitForLastOperation>
 800bb64:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 800bb66:	d003      	beq.n	800bb70 <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 800bb68:	4b0b      	ldr	r3, [pc, #44]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bb6a:	69d8      	ldr	r0, [r3, #28]
 800bb6c:	b280      	uxth	r0, r0
 800bb6e:	e7aa      	b.n	800bac6 <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb70:	4a0a      	ldr	r2, [pc, #40]	; (800bb9c <EE_PageTransfer+0x110>)
 800bb72:	6913      	ldr	r3, [r2, #16]
 800bb74:	2101      	movs	r1, #1
 800bb76:	438b      	bics	r3, r1
 800bb78:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800bb7a:	f005 fb97 	bl	80112ac <HAL_FLASH_Lock>
	return FlashStatus;
 800bb7e:	b2a0      	uxth	r0, r4
 800bb80:	e7a1      	b.n	800bac6 <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 800bb82:	20ab      	movs	r0, #171	; 0xab
 800bb84:	e79f      	b.n	800bac6 <EE_PageTransfer+0x3a>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	0801e000 	.word	0x0801e000
 800bb8c:	0801f000 	.word	0x0801f000
 800bb90:	0000eeee 	.word	0x0000eeee
 800bb94:	0000c350 	.word	0x0000c350
 800bb98:	20006c28 	.word	0x20006c28
 800bb9c:	40022000 	.word	0x40022000
 800bba0:	20002698 	.word	0x20002698

0800bba4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	0005      	movs	r5, r0
 800bba8:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800bbaa:	f005 fb6b 	bl	8011284 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bbae:	0031      	movs	r1, r6
 800bbb0:	0028      	movs	r0, r5
 800bbb2:	f7ff fef1 	bl	800b998 <EE_VerifyPageFullWriteVariable>
 800bbb6:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800bbb8:	2880      	cmp	r0, #128	; 0x80
 800bbba:	d003      	beq.n	800bbc4 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 800bbbc:	f005 fb76 	bl	80112ac <HAL_FLASH_Lock>
}
 800bbc0:	0020      	movs	r0, r4
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 800bbc4:	0031      	movs	r1, r6
 800bbc6:	0028      	movs	r0, r5
 800bbc8:	f7ff ff60 	bl	800ba8c <EE_PageTransfer>
 800bbcc:	0004      	movs	r4, r0
 800bbce:	e7f5      	b.n	800bbbc <EE_WriteVariable+0x18>

0800bbd0 <EE_Format>:
uint16_t EE_Format(void){
 800bbd0:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800bbd2:	f005 fb57 	bl	8011284 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bbd6:	4829      	ldr	r0, [pc, #164]	; (800bc7c <EE_Format+0xac>)
 800bbd8:	f005 fc02 	bl	80113e0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbdc:	4828      	ldr	r0, [pc, #160]	; (800bc80 <EE_Format+0xb0>)
 800bbde:	f005 fb6f 	bl	80112c0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d003      	beq.n	800bbee <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800bbe6:	4b27      	ldr	r3, [pc, #156]	; (800bc84 <EE_Format+0xb4>)
 800bbe8:	69d8      	ldr	r0, [r3, #28]
 800bbea:	b280      	uxth	r0, r0
}
 800bbec:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bbee:	4826      	ldr	r0, [pc, #152]	; (800bc88 <EE_Format+0xb8>)
 800bbf0:	f005 fbf6 	bl	80113e0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbf4:	4822      	ldr	r0, [pc, #136]	; (800bc80 <EE_Format+0xb0>)
 800bbf6:	f005 fb63 	bl	80112c0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d003      	beq.n	800bc06 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800bbfe:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <EE_Format+0xb4>)
 800bc00:	69d8      	ldr	r0, [r3, #28]
 800bc02:	b280      	uxth	r0, r0
 800bc04:	e7f2      	b.n	800bbec <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bc06:	4a21      	ldr	r2, [pc, #132]	; (800bc8c <EE_Format+0xbc>)
 800bc08:	6913      	ldr	r3, [r2, #16]
 800bc0a:	2102      	movs	r1, #2
 800bc0c:	438b      	bics	r3, r1
 800bc0e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bc10:	2200      	movs	r2, #0
 800bc12:	2300      	movs	r3, #0
 800bc14:	4919      	ldr	r1, [pc, #100]	; (800bc7c <EE_Format+0xac>)
 800bc16:	2001      	movs	r0, #1
 800bc18:	f005 fb7e 	bl	8011318 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc1c:	4818      	ldr	r0, [pc, #96]	; (800bc80 <EE_Format+0xb0>)
 800bc1e:	f005 fb4f 	bl	80112c0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d003      	beq.n	800bc2e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800bc26:	4b17      	ldr	r3, [pc, #92]	; (800bc84 <EE_Format+0xb4>)
 800bc28:	69d8      	ldr	r0, [r3, #28]
 800bc2a:	b280      	uxth	r0, r0
 800bc2c:	e7de      	b.n	800bbec <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc2e:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <EE_Format+0xbc>)
 800bc30:	6913      	ldr	r3, [r2, #16]
 800bc32:	2101      	movs	r1, #1
 800bc34:	438b      	bics	r3, r1
 800bc36:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bc38:	4815      	ldr	r0, [pc, #84]	; (800bc90 <EE_Format+0xc0>)
 800bc3a:	f005 fbd1 	bl	80113e0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc3e:	4810      	ldr	r0, [pc, #64]	; (800bc80 <EE_Format+0xb0>)
 800bc40:	f005 fb3e 	bl	80112c0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d003      	beq.n	800bc50 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800bc48:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <EE_Format+0xb4>)
 800bc4a:	69d8      	ldr	r0, [r3, #28]
 800bc4c:	b280      	uxth	r0, r0
 800bc4e:	e7cd      	b.n	800bbec <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bc50:	4810      	ldr	r0, [pc, #64]	; (800bc94 <EE_Format+0xc4>)
 800bc52:	f005 fbc5 	bl	80113e0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc56:	480a      	ldr	r0, [pc, #40]	; (800bc80 <EE_Format+0xb0>)
 800bc58:	f005 fb32 	bl	80112c0 <FLASH_WaitForLastOperation>
 800bc5c:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 800bc5e:	d003      	beq.n	800bc68 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800bc60:	4b08      	ldr	r3, [pc, #32]	; (800bc84 <EE_Format+0xb4>)
 800bc62:	69d8      	ldr	r0, [r3, #28]
 800bc64:	b280      	uxth	r0, r0
 800bc66:	e7c1      	b.n	800bbec <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc68:	4a08      	ldr	r2, [pc, #32]	; (800bc8c <EE_Format+0xbc>)
 800bc6a:	6913      	ldr	r3, [r2, #16]
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	438b      	bics	r3, r1
 800bc70:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800bc72:	f005 fb1b 	bl	80112ac <HAL_FLASH_Lock>
	return FlashStatus;
 800bc76:	b2a0      	uxth	r0, r4
 800bc78:	e7b8      	b.n	800bbec <EE_Format+0x1c>
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	0801e000 	.word	0x0801e000
 800bc80:	0000c350 	.word	0x0000c350
 800bc84:	20006c28 	.word	0x20006c28
 800bc88:	0801e800 	.word	0x0801e800
 800bc8c:	40022000 	.word	0x40022000
 800bc90:	0801f000 	.word	0x0801f000
 800bc94:	0801f800 	.word	0x0801f800

0800bc98 <EE_Init>:
uint16_t EE_Init(void){
 800bc98:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800bc9a:	f005 faf3 	bl	8011284 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bc9e:	4bbc      	ldr	r3, [pc, #752]	; (800bf90 <EE_Init+0x2f8>)
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bca4:	4abb      	ldr	r2, [pc, #748]	; (800bf94 <EE_Init+0x2fc>)
 800bca6:	8812      	ldrh	r2, [r2, #0]
 800bca8:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800bcaa:	49bb      	ldr	r1, [pc, #748]	; (800bf98 <EE_Init+0x300>)
 800bcac:	428b      	cmp	r3, r1
 800bcae:	d100      	bne.n	800bcb2 <EE_Init+0x1a>
 800bcb0:	e072      	b.n	800bd98 <EE_Init+0x100>
 800bcb2:	49ba      	ldr	r1, [pc, #744]	; (800bf9c <EE_Init+0x304>)
 800bcb4:	428b      	cmp	r3, r1
 800bcb6:	d00f      	beq.n	800bcd8 <EE_Init+0x40>
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d100      	bne.n	800bcbe <EE_Init+0x26>
 800bcbc:	e106      	b.n	800becc <EE_Init+0x234>
			FlashStatus =EE_Format();
 800bcbe:	f7ff ff87 	bl	800bbd0 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcc2:	48b7      	ldr	r0, [pc, #732]	; (800bfa0 <EE_Init+0x308>)
 800bcc4:	f005 fafc 	bl	80112c0 <FLASH_WaitForLastOperation>
 800bcc8:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800bcca:	2d00      	cmp	r5, #0
 800bccc:	d102      	bne.n	800bcd4 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 800bcce:	f005 faed 	bl	80112ac <HAL_FLASH_Lock>
	return HAL_OK;
 800bcd2:	2500      	movs	r5, #0
}
 800bcd4:	0028      	movs	r0, r5
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800bcd8:	2a00      	cmp	r2, #0
 800bcda:	d00d      	beq.n	800bcf8 <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800bcdc:	4bae      	ldr	r3, [pc, #696]	; (800bf98 <EE_Init+0x300>)
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d028      	beq.n	800bd34 <EE_Init+0x9c>
				FlashStatus =EE_Format();
 800bce2:	f7ff ff75 	bl	800bbd0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bce6:	48ae      	ldr	r0, [pc, #696]	; (800bfa0 <EE_Init+0x308>)
 800bce8:	f005 faea 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0ee      	beq.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bcf0:	4bac      	ldr	r3, [pc, #688]	; (800bfa4 <EE_Init+0x30c>)
 800bcf2:	69dd      	ldr	r5, [r3, #28]
 800bcf4:	b2ad      	uxth	r5, r5
 800bcf6:	e7ed      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bcf8:	48a5      	ldr	r0, [pc, #660]	; (800bf90 <EE_Init+0x2f8>)
 800bcfa:	f005 fb71 	bl	80113e0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcfe:	48a8      	ldr	r0, [pc, #672]	; (800bfa0 <EE_Init+0x308>)
 800bd00:	f005 fade 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d003      	beq.n	800bd10 <EE_Init+0x78>
					return pFlash.ErrorCode;
 800bd08:	4ba6      	ldr	r3, [pc, #664]	; (800bfa4 <EE_Init+0x30c>)
 800bd0a:	69dd      	ldr	r5, [r3, #28]
 800bd0c:	b2ad      	uxth	r5, r5
 800bd0e:	e7e1      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd10:	48a5      	ldr	r0, [pc, #660]	; (800bfa8 <EE_Init+0x310>)
 800bd12:	f005 fb65 	bl	80113e0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd16:	48a2      	ldr	r0, [pc, #648]	; (800bfa0 <EE_Init+0x308>)
 800bd18:	f005 fad2 	bl	80112c0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d105      	bne.n	800bd2c <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd20:	4aa2      	ldr	r2, [pc, #648]	; (800bfac <EE_Init+0x314>)
 800bd22:	6913      	ldr	r3, [r2, #16]
 800bd24:	2102      	movs	r1, #2
 800bd26:	438b      	bics	r3, r1
 800bd28:	6113      	str	r3, [r2, #16]
 800bd2a:	e7d0      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bd2c:	4b9d      	ldr	r3, [pc, #628]	; (800bfa4 <EE_Init+0x30c>)
 800bd2e:	69dd      	ldr	r5, [r3, #28]
 800bd30:	b2ad      	uxth	r5, r5
 800bd32:	e7cf      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd34:	4896      	ldr	r0, [pc, #600]	; (800bf90 <EE_Init+0x2f8>)
 800bd36:	f005 fb53 	bl	80113e0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd3a:	4899      	ldr	r0, [pc, #612]	; (800bfa0 <EE_Init+0x308>)
 800bd3c:	f005 fac0 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d003      	beq.n	800bd4c <EE_Init+0xb4>
					return pFlash.ErrorCode;
 800bd44:	4b97      	ldr	r3, [pc, #604]	; (800bfa4 <EE_Init+0x30c>)
 800bd46:	69dd      	ldr	r5, [r3, #28]
 800bd48:	b2ad      	uxth	r5, r5
 800bd4a:	e7c3      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd4c:	4896      	ldr	r0, [pc, #600]	; (800bfa8 <EE_Init+0x310>)
 800bd4e:	f005 fb47 	bl	80113e0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd52:	4893      	ldr	r0, [pc, #588]	; (800bfa0 <EE_Init+0x308>)
 800bd54:	f005 fab4 	bl	80112c0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d003      	beq.n	800bd64 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 800bd5c:	4b91      	ldr	r3, [pc, #580]	; (800bfa4 <EE_Init+0x30c>)
 800bd5e:	69dd      	ldr	r5, [r3, #28]
 800bd60:	b2ad      	uxth	r5, r5
 800bd62:	e7b7      	b.n	800bcd4 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd64:	4a91      	ldr	r2, [pc, #580]	; (800bfac <EE_Init+0x314>)
 800bd66:	6913      	ldr	r3, [r2, #16]
 800bd68:	2102      	movs	r1, #2
 800bd6a:	438b      	bics	r3, r1
 800bd6c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2300      	movs	r3, #0
 800bd72:	4988      	ldr	r1, [pc, #544]	; (800bf94 <EE_Init+0x2fc>)
 800bd74:	2001      	movs	r0, #1
 800bd76:	f005 facf 	bl	8011318 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd7a:	4889      	ldr	r0, [pc, #548]	; (800bfa0 <EE_Init+0x308>)
 800bd7c:	f005 faa0 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d105      	bne.n	800bd90 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd84:	4a89      	ldr	r2, [pc, #548]	; (800bfac <EE_Init+0x314>)
 800bd86:	6913      	ldr	r3, [r2, #16]
 800bd88:	2101      	movs	r1, #1
 800bd8a:	438b      	bics	r3, r1
 800bd8c:	6113      	str	r3, [r2, #16]
 800bd8e:	e79e      	b.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bd90:	4b84      	ldr	r3, [pc, #528]	; (800bfa4 <EE_Init+0x30c>)
 800bd92:	69dd      	ldr	r5, [r3, #28]
 800bd94:	b2ad      	uxth	r5, r5
 800bd96:	e79d      	b.n	800bcd4 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	d02f      	beq.n	800bdfc <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800bd9c:	4b7f      	ldr	r3, [pc, #508]	; (800bf9c <EE_Init+0x304>)
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d062      	beq.n	800be68 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 800bda2:	f7ff ff15 	bl	800bbd0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bda6:	487e      	ldr	r0, [pc, #504]	; (800bfa0 <EE_Init+0x308>)
 800bda8:	f005 fa8a 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d100      	bne.n	800bdb2 <EE_Init+0x11a>
 800bdb0:	e78d      	b.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bdb2:	4b7c      	ldr	r3, [pc, #496]	; (800bfa4 <EE_Init+0x30c>)
 800bdb4:	69dd      	ldr	r5, [r3, #28]
 800bdb6:	b2ad      	uxth	r5, r5
 800bdb8:	e78c      	b.n	800bcd4 <EE_Init+0x3c>
						x =VarIdx;
 800bdba:	b226      	sxth	r6, r4
 800bdbc:	e00a      	b.n	800bdd4 <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	b2a4      	uxth	r4, r4
 800bdc2:	2380      	movs	r3, #128	; 0x80
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	429c      	cmp	r4, r3
 800bdc8:	d81c      	bhi.n	800be04 <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bdca:	4b79      	ldr	r3, [pc, #484]	; (800bfb0 <EE_Init+0x318>)
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	d0f2      	beq.n	800bdba <EE_Init+0x122>
					if(VarIdx != x){
 800bdd4:	42b4      	cmp	r4, r6
 800bdd6:	d0f2      	beq.n	800bdbe <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bdd8:	4976      	ldr	r1, [pc, #472]	; (800bfb4 <EE_Init+0x31c>)
 800bdda:	0020      	movs	r0, r4
 800bddc:	f7ff fe30 	bl	800ba40 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bde0:	2801      	cmp	r0, #1
 800bde2:	d0ec      	beq.n	800bdbe <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bde4:	4b73      	ldr	r3, [pc, #460]	; (800bfb4 <EE_Init+0x31c>)
 800bde6:	8819      	ldrh	r1, [r3, #0]
 800bde8:	0020      	movs	r0, r4
 800bdea:	f7ff fdd5 	bl	800b998 <EE_VerifyPageFullWriteVariable>
 800bdee:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdf0:	486b      	ldr	r0, [pc, #428]	; (800bfa0 <EE_Init+0x308>)
 800bdf2:	f005 fa65 	bl	80112c0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0e1      	beq.n	800bdbe <EE_Init+0x126>
 800bdfa:	e76b      	b.n	800bcd4 <EE_Init+0x3c>
	int16_t x =-1;
 800bdfc:	2601      	movs	r6, #1
 800bdfe:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800be00:	2401      	movs	r4, #1
 800be02:	e7de      	b.n	800bdc2 <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800be04:	2200      	movs	r2, #0
 800be06:	2300      	movs	r3, #0
 800be08:	4961      	ldr	r1, [pc, #388]	; (800bf90 <EE_Init+0x2f8>)
 800be0a:	2001      	movs	r0, #1
 800be0c:	f005 fa84 	bl	8011318 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be10:	4863      	ldr	r0, [pc, #396]	; (800bfa0 <EE_Init+0x308>)
 800be12:	f005 fa55 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be16:	2800      	cmp	r0, #0
 800be18:	d003      	beq.n	800be22 <EE_Init+0x18a>
					return pFlash.ErrorCode;
 800be1a:	4b62      	ldr	r3, [pc, #392]	; (800bfa4 <EE_Init+0x30c>)
 800be1c:	69dd      	ldr	r5, [r3, #28]
 800be1e:	b2ad      	uxth	r5, r5
 800be20:	e758      	b.n	800bcd4 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800be22:	4a62      	ldr	r2, [pc, #392]	; (800bfac <EE_Init+0x314>)
 800be24:	6913      	ldr	r3, [r2, #16]
 800be26:	2101      	movs	r1, #1
 800be28:	438b      	bics	r3, r1
 800be2a:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800be2c:	4859      	ldr	r0, [pc, #356]	; (800bf94 <EE_Init+0x2fc>)
 800be2e:	f005 fad7 	bl	80113e0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be32:	485b      	ldr	r0, [pc, #364]	; (800bfa0 <EE_Init+0x308>)
 800be34:	f005 fa44 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be38:	2800      	cmp	r0, #0
 800be3a:	d003      	beq.n	800be44 <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 800be3c:	4b59      	ldr	r3, [pc, #356]	; (800bfa4 <EE_Init+0x30c>)
 800be3e:	69dd      	ldr	r5, [r3, #28]
 800be40:	b2ad      	uxth	r5, r5
 800be42:	e747      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800be44:	485c      	ldr	r0, [pc, #368]	; (800bfb8 <EE_Init+0x320>)
 800be46:	f005 facb 	bl	80113e0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be4a:	4855      	ldr	r0, [pc, #340]	; (800bfa0 <EE_Init+0x308>)
 800be4c:	f005 fa38 	bl	80112c0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be50:	2800      	cmp	r0, #0
 800be52:	d105      	bne.n	800be60 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be54:	4a55      	ldr	r2, [pc, #340]	; (800bfac <EE_Init+0x314>)
 800be56:	6913      	ldr	r3, [r2, #16]
 800be58:	2102      	movs	r1, #2
 800be5a:	438b      	bics	r3, r1
 800be5c:	6113      	str	r3, [r2, #16]
 800be5e:	e736      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800be60:	4b50      	ldr	r3, [pc, #320]	; (800bfa4 <EE_Init+0x30c>)
 800be62:	69dd      	ldr	r5, [r3, #28]
 800be64:	b2ad      	uxth	r5, r5
 800be66:	e735      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800be68:	484a      	ldr	r0, [pc, #296]	; (800bf94 <EE_Init+0x2fc>)
 800be6a:	f005 fab9 	bl	80113e0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be6e:	484c      	ldr	r0, [pc, #304]	; (800bfa0 <EE_Init+0x308>)
 800be70:	f005 fa26 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be74:	2800      	cmp	r0, #0
 800be76:	d003      	beq.n	800be80 <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 800be78:	4b4a      	ldr	r3, [pc, #296]	; (800bfa4 <EE_Init+0x30c>)
 800be7a:	69dd      	ldr	r5, [r3, #28]
 800be7c:	b2ad      	uxth	r5, r5
 800be7e:	e729      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800be80:	484d      	ldr	r0, [pc, #308]	; (800bfb8 <EE_Init+0x320>)
 800be82:	f005 faad 	bl	80113e0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be86:	4846      	ldr	r0, [pc, #280]	; (800bfa0 <EE_Init+0x308>)
 800be88:	f005 fa1a 	bl	80112c0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d003      	beq.n	800be98 <EE_Init+0x200>
						return pFlash.ErrorCode;
 800be90:	4b44      	ldr	r3, [pc, #272]	; (800bfa4 <EE_Init+0x30c>)
 800be92:	69dd      	ldr	r5, [r3, #28]
 800be94:	b2ad      	uxth	r5, r5
 800be96:	e71d      	b.n	800bcd4 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be98:	4a44      	ldr	r2, [pc, #272]	; (800bfac <EE_Init+0x314>)
 800be9a:	6913      	ldr	r3, [r2, #16]
 800be9c:	2102      	movs	r1, #2
 800be9e:	438b      	bics	r3, r1
 800bea0:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bea2:	2200      	movs	r2, #0
 800bea4:	2300      	movs	r3, #0
 800bea6:	493a      	ldr	r1, [pc, #232]	; (800bf90 <EE_Init+0x2f8>)
 800bea8:	2001      	movs	r0, #1
 800beaa:	f005 fa35 	bl	8011318 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800beae:	483c      	ldr	r0, [pc, #240]	; (800bfa0 <EE_Init+0x308>)
 800beb0:	f005 fa06 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d105      	bne.n	800bec4 <EE_Init+0x22c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800beb8:	4a3c      	ldr	r2, [pc, #240]	; (800bfac <EE_Init+0x314>)
 800beba:	6913      	ldr	r3, [r2, #16]
 800bebc:	2101      	movs	r1, #1
 800bebe:	438b      	bics	r3, r1
 800bec0:	6113      	str	r3, [r2, #16]
 800bec2:	e704      	b.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bec4:	4b37      	ldr	r3, [pc, #220]	; (800bfa4 <EE_Init+0x30c>)
 800bec6:	69dd      	ldr	r5, [r3, #28]
 800bec8:	b2ad      	uxth	r5, r5
 800beca:	e703      	b.n	800bcd4 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800becc:	2a00      	cmp	r2, #0
 800bece:	d006      	beq.n	800bede <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800bed0:	4b32      	ldr	r3, [pc, #200]	; (800bf9c <EE_Init+0x304>)
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d00d      	beq.n	800bef2 <EE_Init+0x25a>
	int16_t x =-1;
 800bed6:	2601      	movs	r6, #1
 800bed8:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800beda:	2401      	movs	r4, #1
 800bedc:	e02b      	b.n	800bf36 <EE_Init+0x29e>
				FlashStatus =EE_Format();
 800bede:	f7ff fe77 	bl	800bbd0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bee2:	482f      	ldr	r0, [pc, #188]	; (800bfa0 <EE_Init+0x308>)
 800bee4:	f005 f9ec 	bl	80112c0 <FLASH_WaitForLastOperation>
 800bee8:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 800beea:	2d00      	cmp	r5, #0
 800beec:	d100      	bne.n	800bef0 <EE_Init+0x258>
 800beee:	e6ee      	b.n	800bcce <EE_Init+0x36>
 800bef0:	e6f0      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bef2:	4828      	ldr	r0, [pc, #160]	; (800bf94 <EE_Init+0x2fc>)
 800bef4:	f005 fa74 	bl	80113e0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bef8:	4829      	ldr	r0, [pc, #164]	; (800bfa0 <EE_Init+0x308>)
 800befa:	f005 f9e1 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800befe:	2800      	cmp	r0, #0
 800bf00:	d003      	beq.n	800bf0a <EE_Init+0x272>
					return pFlash.ErrorCode;
 800bf02:	4b28      	ldr	r3, [pc, #160]	; (800bfa4 <EE_Init+0x30c>)
 800bf04:	69dd      	ldr	r5, [r3, #28]
 800bf06:	b2ad      	uxth	r5, r5
 800bf08:	e6e4      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bf0a:	482b      	ldr	r0, [pc, #172]	; (800bfb8 <EE_Init+0x320>)
 800bf0c:	f005 fa68 	bl	80113e0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf10:	4823      	ldr	r0, [pc, #140]	; (800bfa0 <EE_Init+0x308>)
 800bf12:	f005 f9d5 	bl	80112c0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d105      	bne.n	800bf26 <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bf1a:	4a24      	ldr	r2, [pc, #144]	; (800bfac <EE_Init+0x314>)
 800bf1c:	6913      	ldr	r3, [r2, #16]
 800bf1e:	2102      	movs	r1, #2
 800bf20:	438b      	bics	r3, r1
 800bf22:	6113      	str	r3, [r2, #16]
 800bf24:	e6d3      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bf26:	4b1f      	ldr	r3, [pc, #124]	; (800bfa4 <EE_Init+0x30c>)
 800bf28:	69dd      	ldr	r5, [r3, #28]
 800bf2a:	b2ad      	uxth	r5, r5
 800bf2c:	e6d2      	b.n	800bcd4 <EE_Init+0x3c>
						x =VarIdx;
 800bf2e:	b226      	sxth	r6, r4
 800bf30:	e00a      	b.n	800bf48 <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bf32:	3401      	adds	r4, #1
 800bf34:	b2a4      	uxth	r4, r4
 800bf36:	2380      	movs	r3, #128	; 0x80
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d818      	bhi.n	800bf70 <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	; (800bfbc <EE_Init+0x324>)
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d0f2      	beq.n	800bf2e <EE_Init+0x296>
					if(VarIdx != x){
 800bf48:	42b4      	cmp	r4, r6
 800bf4a:	d0f2      	beq.n	800bf32 <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bf4c:	4919      	ldr	r1, [pc, #100]	; (800bfb4 <EE_Init+0x31c>)
 800bf4e:	0020      	movs	r0, r4
 800bf50:	f7ff fd76 	bl	800ba40 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bf54:	2801      	cmp	r0, #1
 800bf56:	d0ec      	beq.n	800bf32 <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bf58:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <EE_Init+0x31c>)
 800bf5a:	8819      	ldrh	r1, [r3, #0]
 800bf5c:	0020      	movs	r0, r4
 800bf5e:	f7ff fd1b 	bl	800b998 <EE_VerifyPageFullWriteVariable>
 800bf62:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf64:	480e      	ldr	r0, [pc, #56]	; (800bfa0 <EE_Init+0x308>)
 800bf66:	f005 f9ab 	bl	80112c0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d0e1      	beq.n	800bf32 <EE_Init+0x29a>
 800bf6e:	e6b1      	b.n	800bcd4 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bf70:	2200      	movs	r2, #0
 800bf72:	2300      	movs	r3, #0
 800bf74:	4907      	ldr	r1, [pc, #28]	; (800bf94 <EE_Init+0x2fc>)
 800bf76:	2001      	movs	r0, #1
 800bf78:	f005 f9ce 	bl	8011318 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf7c:	4808      	ldr	r0, [pc, #32]	; (800bfa0 <EE_Init+0x308>)
 800bf7e:	f005 f99f 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d01c      	beq.n	800bfc0 <EE_Init+0x328>
					return pFlash.ErrorCode;
 800bf86:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <EE_Init+0x30c>)
 800bf88:	69dd      	ldr	r5, [r3, #28]
 800bf8a:	b2ad      	uxth	r5, r5
 800bf8c:	e6a2      	b.n	800bcd4 <EE_Init+0x3c>
 800bf8e:	46c0      	nop			; (mov r8, r8)
 800bf90:	0801e000 	.word	0x0801e000
 800bf94:	0801f000 	.word	0x0801f000
 800bf98:	0000eeee 	.word	0x0000eeee
 800bf9c:	0000ffff 	.word	0x0000ffff
 800bfa0:	0000c350 	.word	0x0000c350
 800bfa4:	20006c28 	.word	0x20006c28
 800bfa8:	0801e800 	.word	0x0801e800
 800bfac:	40022000 	.word	0x40022000
 800bfb0:	0801e006 	.word	0x0801e006
 800bfb4:	20002698 	.word	0x20002698
 800bfb8:	0801f800 	.word	0x0801f800
 800bfbc:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bfc0:	4a11      	ldr	r2, [pc, #68]	; (800c008 <EE_Init+0x370>)
 800bfc2:	6913      	ldr	r3, [r2, #16]
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	438b      	bics	r3, r1
 800bfc8:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bfca:	4810      	ldr	r0, [pc, #64]	; (800c00c <EE_Init+0x374>)
 800bfcc:	f005 fa08 	bl	80113e0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bfd0:	480f      	ldr	r0, [pc, #60]	; (800c010 <EE_Init+0x378>)
 800bfd2:	f005 f975 	bl	80112c0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d003      	beq.n	800bfe2 <EE_Init+0x34a>
					return pFlash.ErrorCode;
 800bfda:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <EE_Init+0x37c>)
 800bfdc:	69dd      	ldr	r5, [r3, #28]
 800bfde:	b2ad      	uxth	r5, r5
 800bfe0:	e678      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bfe2:	480d      	ldr	r0, [pc, #52]	; (800c018 <EE_Init+0x380>)
 800bfe4:	f005 f9fc 	bl	80113e0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bfe8:	4809      	ldr	r0, [pc, #36]	; (800c010 <EE_Init+0x378>)
 800bfea:	f005 f969 	bl	80112c0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d105      	bne.n	800bffe <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bff2:	4a05      	ldr	r2, [pc, #20]	; (800c008 <EE_Init+0x370>)
 800bff4:	6913      	ldr	r3, [r2, #16]
 800bff6:	2102      	movs	r1, #2
 800bff8:	438b      	bics	r3, r1
 800bffa:	6113      	str	r3, [r2, #16]
 800bffc:	e667      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <EE_Init+0x37c>)
 800c000:	69dd      	ldr	r5, [r3, #28]
 800c002:	b2ad      	uxth	r5, r5
 800c004:	e666      	b.n	800bcd4 <EE_Init+0x3c>
 800c006:	46c0      	nop			; (mov r8, r8)
 800c008:	40022000 	.word	0x40022000
 800c00c:	0801e000 	.word	0x0801e000
 800c010:	0000c350 	.word	0x0000c350
 800c014:	20006c28 	.word	0x20006c28
 800c018:	0801e800 	.word	0x0801e800

0800c01c <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800c01c:	b500      	push	{lr}
 800c01e:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800c020:	2300      	movs	r3, #0
 800c022:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800c024:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800c026:	3301      	adds	r3, #1
 800c028:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800c02a:	4669      	mov	r1, sp
 800c02c:	a801      	add	r0, sp, #4
 800c02e:	f005 f9e9 	bl	8011404 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800c032:	2800      	cmp	r0, #0
 800c034:	d102      	bne.n	800c03c <EraseSector+0x20>
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	d002      	beq.n	800c042 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800c03c:	4b02      	ldr	r3, [pc, #8]	; (800c048 <EraseSector+0x2c>)
 800c03e:	2216      	movs	r2, #22
 800c040:	701a      	strb	r2, [r3, #0]

	return result;
}
 800c042:	2000      	movs	r0, #0
 800c044:	b005      	add	sp, #20
 800c046:	bd00      	pop	{pc}
 800c048:	2000096c 	.word	0x2000096c

0800c04c <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800c04c:	b500      	push	{lr}
 800c04e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c050:	2340      	movs	r3, #64	; 0x40
 800c052:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c054:	3b3f      	subs	r3, #63	; 0x3f
 800c056:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c05c:	3303      	adds	r3, #3
 800c05e:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c060:	2090      	movs	r0, #144	; 0x90
 800c062:	a901      	add	r1, sp, #4
 800c064:	05c0      	lsls	r0, r0, #23
 800c066:	f005 fa1d 	bl	80114a4 <HAL_GPIO_Init>
}
 800c06a:	b007      	add	sp, #28
 800c06c:	bd00      	pop	{pc}
	...

0800c070 <GPIO_Init>:
{
 800c070:	b500      	push	{lr}
 800c072:	b087      	sub	sp, #28
    __GPIOC_CLK_ENABLE();
 800c074:	4b18      	ldr	r3, [pc, #96]	; (800c0d8 <GPIO_Init+0x68>)
 800c076:	695a      	ldr	r2, [r3, #20]
 800c078:	2180      	movs	r1, #128	; 0x80
 800c07a:	0309      	lsls	r1, r1, #12
 800c07c:	430a      	orrs	r2, r1
 800c07e:	615a      	str	r2, [r3, #20]
 800c080:	695a      	ldr	r2, [r3, #20]
 800c082:	400a      	ands	r2, r1
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	9a01      	ldr	r2, [sp, #4]
    __GPIOA_CLK_ENABLE();
 800c088:	695a      	ldr	r2, [r3, #20]
 800c08a:	2180      	movs	r1, #128	; 0x80
 800c08c:	0289      	lsls	r1, r1, #10
 800c08e:	430a      	orrs	r2, r1
 800c090:	615a      	str	r2, [r3, #20]
 800c092:	695a      	ldr	r2, [r3, #20]
 800c094:	400a      	ands	r2, r1
 800c096:	9202      	str	r2, [sp, #8]
 800c098:	9a02      	ldr	r2, [sp, #8]
    __GPIOD_CLK_ENABLE();
 800c09a:	695a      	ldr	r2, [r3, #20]
 800c09c:	2180      	movs	r1, #128	; 0x80
 800c09e:	0349      	lsls	r1, r1, #13
 800c0a0:	430a      	orrs	r2, r1
 800c0a2:	615a      	str	r2, [r3, #20]
 800c0a4:	695a      	ldr	r2, [r3, #20]
 800c0a6:	400a      	ands	r2, r1
 800c0a8:	9203      	str	r2, [sp, #12]
 800c0aa:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800c0ac:	695a      	ldr	r2, [r3, #20]
 800c0ae:	2180      	movs	r1, #128	; 0x80
 800c0b0:	02c9      	lsls	r1, r1, #11
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	615a      	str	r2, [r3, #20]
 800c0b6:	695a      	ldr	r2, [r3, #20]
 800c0b8:	400a      	ands	r2, r1
 800c0ba:	9204      	str	r2, [sp, #16]
 800c0bc:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c0be:	695a      	ldr	r2, [r3, #20]
 800c0c0:	2180      	movs	r1, #128	; 0x80
 800c0c2:	03c9      	lsls	r1, r1, #15
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	615a      	str	r2, [r3, #20]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	400b      	ands	r3, r1
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c0d0:	f7ff ffbc 	bl	800c04c <IND_LED_Init>
}
 800c0d4:	b007      	add	sp, #28
 800c0d6:	bd00      	pop	{pc}
 800c0d8:	40021000 	.word	0x40021000

0800c0dc <GetPortGPIOs>:


/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	000e      	movs	r6, r1
 800c0e0:	0017      	movs	r7, r2
 800c0e2:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c0e4:	f001 fede 	bl	800dea4 <GetUart>
	
	if (huart == &huart1) 
 800c0e8:	4c24      	ldr	r4, [pc, #144]	; (800c17c <GetPortGPIOs+0xa0>)
 800c0ea:	42a0      	cmp	r0, r4
 800c0ec:	d00d      	beq.n	800c10a <GetPortGPIOs+0x2e>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c0ee:	4b24      	ldr	r3, [pc, #144]	; (800c180 <GetPortGPIOs+0xa4>)
 800c0f0:	4298      	cmp	r0, r3
 800c0f2:	d017      	beq.n	800c124 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c0f4:	4b23      	ldr	r3, [pc, #140]	; (800c184 <GetPortGPIOs+0xa8>)
 800c0f6:	4298      	cmp	r0, r3
 800c0f8:	d01f      	beq.n	800c13a <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c0fa:	4b23      	ldr	r3, [pc, #140]	; (800c188 <GetPortGPIOs+0xac>)
 800c0fc:	4298      	cmp	r0, r3
 800c0fe:	d028      	beq.n	800c152 <GetPortGPIOs+0x76>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c100:	4b22      	ldr	r3, [pc, #136]	; (800c18c <GetPortGPIOs+0xb0>)
 800c102:	4298      	cmp	r0, r3
 800c104:	d030      	beq.n	800c168 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c106:	20ff      	movs	r0, #255	; 0xff
 800c108:	e00b      	b.n	800c122 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c10a:	2390      	movs	r3, #144	; 0x90
 800c10c:	05db      	lsls	r3, r3, #23
 800c10e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c110:	2280      	movs	r2, #128	; 0x80
 800c112:	0092      	lsls	r2, r2, #2
 800c114:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c116:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART1_RX_PIN;
 800c118:	2380      	movs	r3, #128	; 0x80
 800c11a:	00db      	lsls	r3, r3, #3
 800c11c:	9a06      	ldr	r2, [sp, #24]
 800c11e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c120:	2000      	movs	r0, #0
	
	return result;	
}
 800c122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c124:	2390      	movs	r3, #144	; 0x90
 800c126:	05db      	lsls	r3, r3, #23
 800c128:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c12a:	2204      	movs	r2, #4
 800c12c:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c12e:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800c130:	2308      	movs	r3, #8
 800c132:	9a06      	ldr	r2, [sp, #24]
 800c134:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c136:	2000      	movs	r0, #0
 800c138:	e7f3      	b.n	800c122 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c13a:	4b15      	ldr	r3, [pc, #84]	; (800c190 <GetPortGPIOs+0xb4>)
 800c13c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c13e:	2280      	movs	r2, #128	; 0x80
 800c140:	00d2      	lsls	r2, r2, #3
 800c142:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c144:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800c146:	2380      	movs	r3, #128	; 0x80
 800c148:	011b      	lsls	r3, r3, #4
 800c14a:	9a06      	ldr	r2, [sp, #24]
 800c14c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c14e:	2000      	movs	r0, #0
 800c150:	e7e7      	b.n	800c122 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c152:	2390      	movs	r3, #144	; 0x90
 800c154:	05db      	lsls	r3, r3, #23
 800c156:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c158:	2201      	movs	r2, #1
 800c15a:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c15c:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART4_RX_PIN;
 800c15e:	2302      	movs	r3, #2
 800c160:	9a06      	ldr	r2, [sp, #24]
 800c162:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c164:	2000      	movs	r0, #0
 800c166:	e7dc      	b.n	800c122 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c168:	4b09      	ldr	r3, [pc, #36]	; (800c190 <GetPortGPIOs+0xb4>)
 800c16a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c16c:	2208      	movs	r2, #8
 800c16e:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c170:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800c172:	2310      	movs	r3, #16
 800c174:	9a06      	ldr	r2, [sp, #24]
 800c176:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c178:	2000      	movs	r0, #0
 800c17a:	e7d2      	b.n	800c122 <GetPortGPIOs+0x46>
 800c17c:	20001ed8 	.word	0x20001ed8
 800c180:	20002214 	.word	0x20002214
 800c184:	200021a4 	.word	0x200021a4
 800c188:	20002134 	.word	0x20002134
 800c18c:	200020c4 	.word	0x200020c4
 800c190:	48000400 	.word	0x48000400

0800c194 <IsFactoryReset>:
				- P1 TXD is connected to last port RXD    
*/


uint8_t IsFactoryReset(void)
{
 800c194:	b530      	push	{r4, r5, lr}
 800c196:	b093      	sub	sp, #76	; 0x4c
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800c198:	4b38      	ldr	r3, [pc, #224]	; (800c27c <IsFactoryReset+0xe8>)
 800c19a:	695a      	ldr	r2, [r3, #20]
 800c19c:	2180      	movs	r1, #128	; 0x80
 800c19e:	0289      	lsls	r1, r1, #10
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	615a      	str	r2, [r3, #20]
 800c1a4:	695a      	ldr	r2, [r3, #20]
 800c1a6:	400a      	ands	r2, r1
 800c1a8:	9203      	str	r2, [sp, #12]
 800c1aa:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c1ac:	695a      	ldr	r2, [r3, #20]
 800c1ae:	2180      	movs	r1, #128	; 0x80
 800c1b0:	02c9      	lsls	r1, r1, #11
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	615a      	str	r2, [r3, #20]
 800c1b6:	695a      	ldr	r2, [r3, #20]
 800c1b8:	400a      	ands	r2, r1
 800c1ba:	9204      	str	r2, [sp, #16]
 800c1bc:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c1be:	695a      	ldr	r2, [r3, #20]
 800c1c0:	2180      	movs	r1, #128	; 0x80
 800c1c2:	0309      	lsls	r1, r1, #12
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	615a      	str	r2, [r3, #20]
 800c1c8:	695a      	ldr	r2, [r3, #20]
 800c1ca:	400a      	ands	r2, r1
 800c1cc:	9205      	str	r2, [sp, #20]
 800c1ce:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800c1d0:	695a      	ldr	r2, [r3, #20]
 800c1d2:	2180      	movs	r1, #128	; 0x80
 800c1d4:	0349      	lsls	r1, r1, #13
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	615a      	str	r2, [r3, #20]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	400b      	ands	r3, r1
 800c1de:	9306      	str	r3, [sp, #24]
 800c1e0:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c1e2:	ab08      	add	r3, sp, #32
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	ab0b      	add	r3, sp, #44	; 0x2c
 800c1e8:	2222      	movs	r2, #34	; 0x22
 800c1ea:	446a      	add	r2, sp
 800c1ec:	a90c      	add	r1, sp, #48	; 0x30
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	f7ff ff74 	bl	800c0dc <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c1f4:	ac07      	add	r4, sp, #28
 800c1f6:	9400      	str	r4, [sp, #0]
 800c1f8:	ab09      	add	r3, sp, #36	; 0x24
 800c1fa:	221e      	movs	r2, #30
 800c1fc:	446a      	add	r2, sp
 800c1fe:	a90a      	add	r1, sp, #40	; 0x28
 800c200:	2005      	movs	r0, #5
 800c202:	f7ff ff6b 	bl	800c0dc <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c206:	2301      	movs	r3, #1
 800c208:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c20a:	2500      	movs	r5, #0
 800c20c:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c20e:	466b      	mov	r3, sp
 800c210:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c212:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c214:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c216:	a90d      	add	r1, sp, #52	; 0x34
 800c218:	f005 f944 	bl	80114a4 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c21c:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c21e:	2302      	movs	r3, #2
 800c220:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c222:	8823      	ldrh	r3, [r4, #0]
 800c224:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c226:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c228:	a90d      	add	r1, sp, #52	; 0x34
 800c22a:	f005 f93b 	bl	80114a4 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c22e:	466b      	mov	r3, sp
 800c230:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800c232:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c234:	2200      	movs	r2, #0
 800c236:	f005 fa8a 	bl	801174e <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c23a:	2005      	movs	r0, #5
 800c23c:	f001 fc62 	bl	800db04 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c240:	8821      	ldrh	r1, [r4, #0]
 800c242:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c244:	f005 fa7c 	bl	8011740 <HAL_GPIO_ReadPin>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d006      	beq.n	800c25a <IsFactoryReset+0xc6>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c24c:	4b0c      	ldr	r3, [pc, #48]	; (800c280 <IsFactoryReset+0xec>)
 800c24e:	2201      	movs	r2, #1
 800c250:	4252      	negs	r2, r2
 800c252:	601a      	str	r2, [r3, #0]
	
	return 0;
 800c254:	2000      	movs	r0, #0
}
 800c256:	b013      	add	sp, #76	; 0x4c
 800c258:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c25a:	2322      	movs	r3, #34	; 0x22
 800c25c:	446b      	add	r3, sp
 800c25e:	8819      	ldrh	r1, [r3, #0]
 800c260:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c262:	2201      	movs	r2, #1
 800c264:	f005 fa73 	bl	801174e <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c268:	2005      	movs	r0, #5
 800c26a:	f001 fc4b 	bl	800db04 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c26e:	8821      	ldrh	r1, [r4, #0]
 800c270:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c272:	f005 fa65 	bl	8011740 <HAL_GPIO_ReadPin>
 800c276:	2801      	cmp	r0, #1
 800c278:	d1e8      	bne.n	800c24c <IsFactoryReset+0xb8>
 800c27a:	e7ec      	b.n	800c256 <IsFactoryReset+0xc2>
 800c27c:	40021000 	.word	0x40021000
 800c280:	20007ff0 	.word	0x20007ff0

0800c284 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800c284:	4770      	bx	lr
	...

0800c288 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800c288:	b530      	push	{r4, r5, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c28a:	4c19      	ldr	r4, [pc, #100]	; (800c2f0 <CheckForTimedButtonPress+0x68>)
 800c28c:	00c3      	lsls	r3, r0, #3
 800c28e:	181b      	adds	r3, r3, r0
 800c290:	18e3      	adds	r3, r4, r3
 800c292:	789a      	ldrb	r2, [r3, #2]
 800c294:	78d9      	ldrb	r1, [r3, #3]
			t3 = button[port].pressedX3Sec;
 800c296:	791d      	ldrb	r5, [r3, #4]

	/* Convert to ms */
	t1 *= 1000;
 800c298:	0153      	lsls	r3, r2, #5
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	189b      	adds	r3, r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
	t2 *= 1000;
 800c2a2:	014a      	lsls	r2, r1, #5
 800c2a4:	1a52      	subs	r2, r2, r1
 800c2a6:	0092      	lsls	r2, r2, #2
 800c2a8:	1852      	adds	r2, r2, r1
 800c2aa:	00d2      	lsls	r2, r2, #3
	t3 *= 1000;
 800c2ac:	0169      	lsls	r1, r5, #5
 800c2ae:	1b49      	subs	r1, r1, r5
 800c2b0:	0089      	lsls	r1, r1, #2
 800c2b2:	1949      	adds	r1, r1, r5
 800c2b4:	00c9      	lsls	r1, r1, #3

	if (pressCounter[port] == t1) {
 800c2b6:	0085      	lsls	r5, r0, #2
 800c2b8:	1964      	adds	r4, r4, r5
 800c2ba:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c2bc:	429c      	cmp	r4, r3
 800c2be:	d009      	beq.n	800c2d4 <CheckForTimedButtonPress+0x4c>
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800c2c0:	4294      	cmp	r4, r2
 800c2c2:	d00e      	beq.n	800c2e2 <CheckForTimedButtonPress+0x5a>
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800c2c4:	428c      	cmp	r4, r1
 800c2c6:	d10a      	bne.n	800c2de <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c2c8:	4b09      	ldr	r3, [pc, #36]	; (800c2f0 <CheckForTimedButtonPress+0x68>)
 800c2ca:	00c2      	lsls	r2, r0, #3
 800c2cc:	1812      	adds	r2, r2, r0
 800c2ce:	210a      	movs	r1, #10
 800c2d0:	54d1      	strb	r1, [r2, r3]
 800c2d2:	e004      	b.n	800c2de <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c2d4:	4b06      	ldr	r3, [pc, #24]	; (800c2f0 <CheckForTimedButtonPress+0x68>)
 800c2d6:	00c2      	lsls	r2, r0, #3
 800c2d8:	1812      	adds	r2, r2, r0
 800c2da:	2109      	movs	r1, #9
 800c2dc:	54d1      	strb	r1, [r2, r3]
	}

	return result;
}
 800c2de:	2000      	movs	r0, #0
 800c2e0:	bd30      	pop	{r4, r5, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800c2e2:	4b03      	ldr	r3, [pc, #12]	; (800c2f0 <CheckForTimedButtonPress+0x68>)
 800c2e4:	00c2      	lsls	r2, r0, #3
 800c2e6:	1812      	adds	r2, r2, r0
 800c2e8:	210a      	movs	r1, #10
 800c2ea:	54d1      	strb	r1, [r2, r3]
 800c2ec:	e7f7      	b.n	800c2de <CheckForTimedButtonPress+0x56>
 800c2ee:	46c0      	nop			; (mov r8, r8)
 800c2f0:	2000269c 	.word	0x2000269c

0800c2f4 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800c2f4:	b530      	push	{r4, r5, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c2f6:	4c19      	ldr	r4, [pc, #100]	; (800c35c <CheckForTimedButtonRelease+0x68>)
 800c2f8:	00c3      	lsls	r3, r0, #3
 800c2fa:	181b      	adds	r3, r3, r0
 800c2fc:	18e3      	adds	r3, r4, r3
 800c2fe:	795a      	ldrb	r2, [r3, #5]
 800c300:	7999      	ldrb	r1, [r3, #6]
			t3 = button[port].releasedY3Sec;
 800c302:	79dd      	ldrb	r5, [r3, #7]

	/* Convert to ms */
	t1 *= 1000;
 800c304:	0153      	lsls	r3, r2, #5
 800c306:	1a9b      	subs	r3, r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	189b      	adds	r3, r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
	t2 *= 1000;
 800c30e:	014a      	lsls	r2, r1, #5
 800c310:	1a52      	subs	r2, r2, r1
 800c312:	0092      	lsls	r2, r2, #2
 800c314:	1852      	adds	r2, r2, r1
 800c316:	00d2      	lsls	r2, r2, #3
	t3 *= 1000;
 800c318:	0169      	lsls	r1, r5, #5
 800c31a:	1b49      	subs	r1, r1, r5
 800c31c:	0089      	lsls	r1, r1, #2
 800c31e:	1949      	adds	r1, r1, r5
 800c320:	00c9      	lsls	r1, r1, #3

	if (releaseCounter[port] == t1) {
 800c322:	0085      	lsls	r5, r0, #2
 800c324:	1964      	adds	r4, r4, r5
 800c326:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800c328:	429c      	cmp	r4, r3
 800c32a:	d009      	beq.n	800c340 <CheckForTimedButtonRelease+0x4c>
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800c32c:	4294      	cmp	r4, r2
 800c32e:	d00e      	beq.n	800c34e <CheckForTimedButtonRelease+0x5a>
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800c330:	428c      	cmp	r4, r1
 800c332:	d10a      	bne.n	800c34a <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c334:	4b09      	ldr	r3, [pc, #36]	; (800c35c <CheckForTimedButtonRelease+0x68>)
 800c336:	00c2      	lsls	r2, r0, #3
 800c338:	1812      	adds	r2, r2, r0
 800c33a:	210d      	movs	r1, #13
 800c33c:	54d1      	strb	r1, [r2, r3]
 800c33e:	e004      	b.n	800c34a <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <CheckForTimedButtonRelease+0x68>)
 800c342:	00c2      	lsls	r2, r0, #3
 800c344:	1812      	adds	r2, r2, r0
 800c346:	210c      	movs	r1, #12
 800c348:	54d1      	strb	r1, [r2, r3]
	}

	return result;
}
 800c34a:	2000      	movs	r0, #0
 800c34c:	bd30      	pop	{r4, r5, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c34e:	4b03      	ldr	r3, [pc, #12]	; (800c35c <CheckForTimedButtonRelease+0x68>)
 800c350:	00c2      	lsls	r2, r0, #3
 800c352:	1812      	adds	r2, r2, r0
 800c354:	210d      	movs	r1, #13
 800c356:	54d1      	strb	r1, [r2, r3]
 800c358:	e7f7      	b.n	800c34a <CheckForTimedButtonRelease+0x56>
 800c35a:	46c0      	nop			; (mov r8, r8)
 800c35c:	2000269c 	.word	0x2000269c

0800c360 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c362:	b08d      	sub	sp, #52	; 0x34
 800c364:	0006      	movs	r6, r0
 800c366:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800c368:	4b41      	ldr	r3, [pc, #260]	; (800c470 <AddPortButton+0x110>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d157      	bne.n	800c420 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800c370:	4b40      	ldr	r3, [pc, #256]	; (800c474 <AddPortButton+0x114>)
 800c372:	2204      	movs	r2, #4
 800c374:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800c376:	4b3e      	ldr	r3, [pc, #248]	; (800c470 <AddPortButton+0x110>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d15a      	bne.n	800c434 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c37e:	2512      	movs	r5, #18
 800c380:	446d      	add	r5, sp
 800c382:	af04      	add	r7, sp, #16
 800c384:	9700      	str	r7, [sp, #0]
 800c386:	ab05      	add	r3, sp, #20
 800c388:	002a      	movs	r2, r5
 800c38a:	a906      	add	r1, sp, #24
 800c38c:	0020      	movs	r0, r4
 800c38e:	f7ff fea5 	bl	800c0dc <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800c392:	882b      	ldrh	r3, [r5, #0]
 800c394:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c396:	2301      	movs	r3, #1
 800c398:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c39a:	2500      	movs	r5, #0
 800c39c:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c39e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c3a0:	9806      	ldr	r0, [sp, #24]
 800c3a2:	a907      	add	r1, sp, #28
 800c3a4:	f005 f87e 	bl	80114a4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800c3a8:	883b      	ldrh	r3, [r7, #0]
 800c3aa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3ac:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c3b2:	9805      	ldr	r0, [sp, #20]
 800c3b4:	a907      	add	r1, sp, #28
 800c3b6:	f005 f875 	bl	80114a4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800c3ba:	4b2f      	ldr	r3, [pc, #188]	; (800c478 <AddPortButton+0x118>)
 800c3bc:	00e2      	lsls	r2, r4, #3
 800c3be:	1912      	adds	r2, r2, r4
 800c3c0:	189b      	adds	r3, r3, r2
 800c3c2:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c3c4:	0025      	movs	r5, r4
 800c3c6:	353a      	adds	r5, #58	; 0x3a
 800c3c8:	00ad      	lsls	r5, r5, #2
 800c3ca:	210e      	movs	r1, #14
 800c3cc:	4469      	add	r1, sp
 800c3ce:	0028      	movs	r0, r5
 800c3d0:	f7ff fb36 	bl	800ba40 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d133      	bne.n	800c440 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800c3d8:	230e      	movs	r3, #14
 800c3da:	446b      	add	r3, sp
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	0a1a      	lsrs	r2, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800c3e0:	0b1b      	lsrs	r3, r3, #12
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	d103      	bne.n	800c3ee <AddPortButton+0x8e>
 800c3e6:	230f      	movs	r3, #15
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	42b3      	cmp	r3, r6
 800c3ec:	d015      	beq.n	800c41a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c3ee:	0321      	lsls	r1, r4, #12
 800c3f0:	0236      	lsls	r6, r6, #8
 800c3f2:	4331      	orrs	r1, r6
 800c3f4:	b289      	uxth	r1, r1
 800c3f6:	230e      	movs	r3, #14
 800c3f8:	446b      	add	r3, sp
 800c3fa:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c3fc:	0028      	movs	r0, r5
 800c3fe:	f7ff fbd1 	bl	800bba4 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c402:	1c68      	adds	r0, r5, #1
 800c404:	2100      	movs	r1, #0
 800c406:	f7ff fbcd 	bl	800bba4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c40a:	1ca8      	adds	r0, r5, #2
 800c40c:	2100      	movs	r1, #0
 800c40e:	f7ff fbc9 	bl	800bba4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c412:	1ce8      	adds	r0, r5, #3
 800c414:	2100      	movs	r1, #0
 800c416:	f7ff fbc5 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800c41a:	2000      	movs	r0, #0
 800c41c:	b00d      	add	sp, #52	; 0x34
 800c41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800c420:	4b16      	ldr	r3, [pc, #88]	; (800c47c <AddPortButton+0x11c>)
 800c422:	008d      	lsls	r5, r1, #2
 800c424:	58e8      	ldr	r0, [r5, r3]
 800c426:	f001 ff33 	bl	800e290 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c42a:	4b15      	ldr	r3, [pc, #84]	; (800c480 <AddPortButton+0x120>)
 800c42c:	58e8      	ldr	r0, [r5, r3]
 800c42e:	f001 ff2f 	bl	800e290 <osSemaphoreRelease>
 800c432:	e79d      	b.n	800c370 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800c434:	0020      	movs	r0, r4
 800c436:	f001 fd35 	bl	800dea4 <GetUart>
 800c43a:	f006 f8ee 	bl	801261a <HAL_UART_DeInit>
 800c43e:	e79e      	b.n	800c37e <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c440:	0321      	lsls	r1, r4, #12
 800c442:	0236      	lsls	r6, r6, #8
 800c444:	4331      	orrs	r1, r6
 800c446:	b289      	uxth	r1, r1
 800c448:	230e      	movs	r3, #14
 800c44a:	446b      	add	r3, sp
 800c44c:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c44e:	0028      	movs	r0, r5
 800c450:	f7ff fba8 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c454:	1c68      	adds	r0, r5, #1
 800c456:	2100      	movs	r1, #0
 800c458:	f7ff fba4 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c45c:	1ca8      	adds	r0, r5, #2
 800c45e:	2100      	movs	r1, #0
 800c460:	f7ff fba0 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c464:	1ce8      	adds	r0, r5, #3
 800c466:	2100      	movs	r1, #0
 800c468:	f7ff fb9c 	bl	800bba4 <EE_WriteVariable>
 800c46c:	e7d5      	b.n	800c41a <AddPortButton+0xba>
 800c46e:	46c0      	nop			; (mov r8, r8)
 800c470:	20000869 	.word	0x20000869
 800c474:	2000095c 	.word	0x2000095c
 800c478:	2000269c 	.word	0x2000269c
 800c47c:	20001b2c 	.word	0x20001b2c
 800c480:	20001b48 	.word	0x20001b48

0800c484 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c48a:	4937      	ldr	r1, [pc, #220]	; (800c568 <RemovePortButton+0xe4>)
 800c48c:	00c0      	lsls	r0, r0, #3
 800c48e:	1900      	adds	r0, r0, r4
 800c490:	180a      	adds	r2, r1, r0
 800c492:	2300      	movs	r3, #0
 800c494:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800c496:	5443      	strb	r3, [r0, r1]
	button[port].events = 0;
 800c498:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c49a:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c49c:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c49e:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c4a0:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c4a2:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c4a4:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c4a6:	0025      	movs	r5, r4
 800c4a8:	353a      	adds	r5, #58	; 0x3a
 800c4aa:	00ad      	lsls	r5, r5, #2
 800c4ac:	466b      	mov	r3, sp
 800c4ae:	1d99      	adds	r1, r3, #6
 800c4b0:	0028      	movs	r0, r5
 800c4b2:	f7ff fac5 	bl	800ba40 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d01e      	beq.n	800c4f8 <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c4ba:	0020      	movs	r0, r4
 800c4bc:	f001 fcf2 	bl	800dea4 <GetUart>
 800c4c0:	0005      	movs	r5, r0

	if (huart->Instance == USART1) {
 800c4c2:	6803      	ldr	r3, [r0, #0]
 800c4c4:	4a29      	ldr	r2, [pc, #164]	; (800c56c <RemovePortButton+0xe8>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d027      	beq.n	800c51a <RemovePortButton+0x96>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c4ca:	4a29      	ldr	r2, [pc, #164]	; (800c570 <RemovePortButton+0xec>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d032      	beq.n	800c536 <RemovePortButton+0xb2>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c4d0:	4a28      	ldr	r2, [pc, #160]	; (800c574 <RemovePortButton+0xf0>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d033      	beq.n	800c53e <RemovePortButton+0xba>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c4d6:	4a28      	ldr	r2, [pc, #160]	; (800c578 <RemovePortButton+0xf4>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d034      	beq.n	800c546 <RemovePortButton+0xc2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c4dc:	4a27      	ldr	r2, [pc, #156]	; (800c57c <RemovePortButton+0xf8>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d035      	beq.n	800c54e <RemovePortButton+0xca>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c4e2:	4a27      	ldr	r2, [pc, #156]	; (800c580 <RemovePortButton+0xfc>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d036      	beq.n	800c556 <RemovePortButton+0xd2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c4e8:	4a26      	ldr	r2, [pc, #152]	; (800c584 <RemovePortButton+0x100>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d039      	beq.n	800c562 <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c4ee:	4a26      	ldr	r2, [pc, #152]	; (800c588 <RemovePortButton+0x104>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d034      	beq.n	800c55e <RemovePortButton+0xda>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} else
		result = BOS_ERROR;
 800c4f4:	26ff      	movs	r6, #255	; 0xff
 800c4f6:	e013      	b.n	800c520 <RemovePortButton+0x9c>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	0028      	movs	r0, r5
 800c4fc:	f7ff fb52 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c500:	1c68      	adds	r0, r5, #1
 800c502:	2100      	movs	r1, #0
 800c504:	f7ff fb4e 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c508:	1ca8      	adds	r0, r5, #2
 800c50a:	2100      	movs	r1, #0
 800c50c:	f7ff fb4a 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c510:	1ce8      	adds	r0, r5, #3
 800c512:	2100      	movs	r1, #0
 800c514:	f7ff fb46 	bl	800bba4 <EE_WriteVariable>
 800c518:	e7cf      	b.n	800c4ba <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800c51a:	f001 fb05 	bl	800db28 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c51e:	2600      	movs	r6, #0

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c520:	4b1a      	ldr	r3, [pc, #104]	; (800c58c <RemovePortButton+0x108>)
 800c522:	2200      	movs	r2, #0
 800c524:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c526:	491a      	ldr	r1, [pc, #104]	; (800c590 <RemovePortButton+0x10c>)
 800c528:	3201      	adds	r2, #1
 800c52a:	0028      	movs	r0, r5
 800c52c:	f006 f8ce 	bl	80126cc <HAL_UART_Receive_IT>

	return result;
}
 800c530:	0030      	movs	r0, r6
 800c532:	b002      	add	sp, #8
 800c534:	bd70      	pop	{r4, r5, r6, pc}
		MX_USART2_UART_Init();
 800c536:	f001 fb0f 	bl	800db58 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c53a:	2600      	movs	r6, #0
 800c53c:	e7f0      	b.n	800c520 <RemovePortButton+0x9c>
		MX_USART3_UART_Init();
 800c53e:	f001 fb23 	bl	800db88 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c542:	2600      	movs	r6, #0
 800c544:	e7ec      	b.n	800c520 <RemovePortButton+0x9c>
		MX_USART4_UART_Init();
 800c546:	f001 fb37 	bl	800dbb8 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800c54a:	2600      	movs	r6, #0
 800c54c:	e7e8      	b.n	800c520 <RemovePortButton+0x9c>
		MX_USART5_UART_Init();
 800c54e:	f001 fb4b 	bl	800dbe8 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800c552:	2600      	movs	r6, #0
 800c554:	e7e4      	b.n	800c520 <RemovePortButton+0x9c>
		MX_USART6_UART_Init();
 800c556:	f001 fb5f 	bl	800dc18 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c55a:	2600      	movs	r6, #0
 800c55c:	e7e0      	b.n	800c520 <RemovePortButton+0x9c>
 800c55e:	2600      	movs	r6, #0
 800c560:	e7de      	b.n	800c520 <RemovePortButton+0x9c>
 800c562:	2600      	movs	r6, #0
 800c564:	e7dc      	b.n	800c520 <RemovePortButton+0x9c>
 800c566:	46c0      	nop			; (mov r8, r8)
 800c568:	2000269c 	.word	0x2000269c
 800c56c:	40013800 	.word	0x40013800
 800c570:	40004400 	.word	0x40004400
 800c574:	40004800 	.word	0x40004800
 800c578:	40004c00 	.word	0x40004c00
 800c57c:	40005000 	.word	0x40005000
 800c580:	40011400 	.word	0x40011400
 800c584:	40011800 	.word	0x40011800
 800c588:	40011c00 	.word	0x40011c00
 800c58c:	2000095c 	.word	0x2000095c
 800c590:	200009f5 	.word	0x200009f5

0800c594 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c596:	46de      	mov	lr, fp
 800c598:	4657      	mov	r7, sl
 800c59a:	464e      	mov	r6, r9
 800c59c:	4645      	mov	r5, r8
 800c59e:	b5e0      	push	{r5, r6, r7, lr}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	0004      	movs	r4, r0
 800c5a4:	469c      	mov	ip, r3
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	ab0e      	add	r3, sp, #56	; 0x38
 800c5aa:	781f      	ldrb	r7, [r3, #0]
 800c5ac:	ab0f      	add	r3, sp, #60	; 0x3c
 800c5ae:	781e      	ldrb	r6, [r3, #0]
 800c5b0:	ab10      	add	r3, sp, #64	; 0x40
 800c5b2:	7818      	ldrb	r0, [r3, #0]
 800c5b4:	4682      	mov	sl, r0
 800c5b6:	ab11      	add	r3, sp, #68	; 0x44
 800c5b8:	7818      	ldrb	r0, [r3, #0]
 800c5ba:	4681      	mov	r9, r0
 800c5bc:	ab12      	add	r3, sp, #72	; 0x48
 800c5be:	7818      	ldrb	r0, [r3, #0]
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	ab13      	add	r3, sp, #76	; 0x4c
 800c5c4:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c5c6:	48b9      	ldr	r0, [pc, #740]	; (800c8ac <SetButtonEvents+0x318>)
 800c5c8:	00e5      	lsls	r5, r4, #3
 800c5ca:	192d      	adds	r5, r5, r4
 800c5cc:	1940      	adds	r0, r0, r5
 800c5ce:	7840      	ldrb	r0, [r0, #1]
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d100      	bne.n	800c5d6 <SetButtonEvents+0x42>
 800c5d4:	e166      	b.n	800c8a4 <SetButtonEvents+0x310>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c5d6:	48b5      	ldr	r0, [pc, #724]	; (800c8ac <SetButtonEvents+0x318>)
 800c5d8:	00e5      	lsls	r5, r4, #3
 800c5da:	192d      	adds	r5, r5, r4
 800c5dc:	1940      	adds	r0, r0, r5
 800c5de:	4665      	mov	r5, ip
 800c5e0:	7085      	strb	r5, [r0, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c5e2:	70c7      	strb	r7, [r0, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c5e4:	7106      	strb	r6, [r0, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c5e6:	4655      	mov	r5, sl
 800c5e8:	7145      	strb	r5, [r0, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c5ea:	464d      	mov	r5, r9
 800c5ec:	7185      	strb	r5, [r0, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c5ee:	4645      	mov	r5, r8
 800c5f0:	71c5      	strb	r5, [r0, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d005      	beq.n	800c602 <SetButtonEvents+0x6e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d000      	beq.n	800c5fc <SetButtonEvents+0x68>
 800c5fa:	e0d2      	b.n	800c7a2 <SetButtonEvents+0x20e>
 800c5fc:	2900      	cmp	r1, #0
 800c5fe:	d100      	bne.n	800c602 <SetButtonEvents+0x6e>
 800c600:	e0cf      	b.n	800c7a2 <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c602:	49aa      	ldr	r1, [pc, #680]	; (800c8ac <SetButtonEvents+0x318>)
 800c604:	00e0      	lsls	r0, r4, #3
 800c606:	1900      	adds	r0, r0, r4
 800c608:	1809      	adds	r1, r1, r0
 800c60a:	7a08      	ldrb	r0, [r1, #8]
 800c60c:	2501      	movs	r5, #1
 800c60e:	4328      	orrs	r0, r5
 800c610:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c612:	2b01      	cmp	r3, #1
 800c614:	d005      	beq.n	800c622 <SetButtonEvents+0x8e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c616:	2b00      	cmp	r3, #0
 800c618:	d000      	beq.n	800c61c <SetButtonEvents+0x88>
 800c61a:	e0ce      	b.n	800c7ba <SetButtonEvents+0x226>
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	d100      	bne.n	800c622 <SetButtonEvents+0x8e>
 800c620:	e0cb      	b.n	800c7ba <SetButtonEvents+0x226>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c622:	4aa2      	ldr	r2, [pc, #648]	; (800c8ac <SetButtonEvents+0x318>)
 800c624:	00e1      	lsls	r1, r4, #3
 800c626:	1909      	adds	r1, r1, r4
 800c628:	1852      	adds	r2, r2, r1
 800c62a:	7a11      	ldrb	r1, [r2, #8]
 800c62c:	2002      	movs	r0, #2
 800c62e:	4301      	orrs	r1, r0
 800c630:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c632:	2b01      	cmp	r3, #1
 800c634:	d006      	beq.n	800c644 <SetButtonEvents+0xb0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c636:	2b00      	cmp	r3, #0
 800c638:	d000      	beq.n	800c63c <SetButtonEvents+0xa8>
 800c63a:	e0ca      	b.n	800c7d2 <SetButtonEvents+0x23e>
 800c63c:	9a01      	ldr	r2, [sp, #4]
 800c63e:	2a00      	cmp	r2, #0
 800c640:	d100      	bne.n	800c644 <SetButtonEvents+0xb0>
 800c642:	e0c6      	b.n	800c7d2 <SetButtonEvents+0x23e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c644:	4a99      	ldr	r2, [pc, #612]	; (800c8ac <SetButtonEvents+0x318>)
 800c646:	00e1      	lsls	r1, r4, #3
 800c648:	1909      	adds	r1, r1, r4
 800c64a:	1852      	adds	r2, r2, r1
 800c64c:	7a11      	ldrb	r1, [r2, #8]
 800c64e:	2004      	movs	r0, #4
 800c650:	4301      	orrs	r1, r0
 800c652:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c654:	2b01      	cmp	r3, #1
 800c656:	d005      	beq.n	800c664 <SetButtonEvents+0xd0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d000      	beq.n	800c65e <SetButtonEvents+0xca>
 800c65c:	e0c6      	b.n	800c7ec <SetButtonEvents+0x258>
 800c65e:	2f00      	cmp	r7, #0
 800c660:	d100      	bne.n	800c664 <SetButtonEvents+0xd0>
 800c662:	e0c3      	b.n	800c7ec <SetButtonEvents+0x258>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c664:	4a91      	ldr	r2, [pc, #580]	; (800c8ac <SetButtonEvents+0x318>)
 800c666:	00e1      	lsls	r1, r4, #3
 800c668:	1909      	adds	r1, r1, r4
 800c66a:	1852      	adds	r2, r2, r1
 800c66c:	7a11      	ldrb	r1, [r2, #8]
 800c66e:	2008      	movs	r0, #8
 800c670:	4301      	orrs	r1, r0
 800c672:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c674:	2b01      	cmp	r3, #1
 800c676:	d005      	beq.n	800c684 <SetButtonEvents+0xf0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d000      	beq.n	800c67e <SetButtonEvents+0xea>
 800c67c:	e0c3      	b.n	800c806 <SetButtonEvents+0x272>
 800c67e:	2e00      	cmp	r6, #0
 800c680:	d100      	bne.n	800c684 <SetButtonEvents+0xf0>
 800c682:	e0c0      	b.n	800c806 <SetButtonEvents+0x272>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c684:	4a89      	ldr	r2, [pc, #548]	; (800c8ac <SetButtonEvents+0x318>)
 800c686:	00e1      	lsls	r1, r4, #3
 800c688:	1909      	adds	r1, r1, r4
 800c68a:	1852      	adds	r2, r2, r1
 800c68c:	7a11      	ldrb	r1, [r2, #8]
 800c68e:	2010      	movs	r0, #16
 800c690:	4301      	orrs	r1, r0
 800c692:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c694:	2b01      	cmp	r3, #1
 800c696:	d006      	beq.n	800c6a6 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d000      	beq.n	800c69e <SetButtonEvents+0x10a>
 800c69c:	e0c0      	b.n	800c820 <SetButtonEvents+0x28c>
 800c69e:	4652      	mov	r2, sl
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	d100      	bne.n	800c6a6 <SetButtonEvents+0x112>
 800c6a4:	e0bc      	b.n	800c820 <SetButtonEvents+0x28c>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c6a6:	4a81      	ldr	r2, [pc, #516]	; (800c8ac <SetButtonEvents+0x318>)
 800c6a8:	00e1      	lsls	r1, r4, #3
 800c6aa:	1909      	adds	r1, r1, r4
 800c6ac:	1852      	adds	r2, r2, r1
 800c6ae:	7a11      	ldrb	r1, [r2, #8]
 800c6b0:	2020      	movs	r0, #32
 800c6b2:	4301      	orrs	r1, r0
 800c6b4:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d006      	beq.n	800c6c8 <SetButtonEvents+0x134>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d000      	beq.n	800c6c0 <SetButtonEvents+0x12c>
 800c6be:	e0bc      	b.n	800c83a <SetButtonEvents+0x2a6>
 800c6c0:	464a      	mov	r2, r9
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	d100      	bne.n	800c6c8 <SetButtonEvents+0x134>
 800c6c6:	e0b8      	b.n	800c83a <SetButtonEvents+0x2a6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c6c8:	4a78      	ldr	r2, [pc, #480]	; (800c8ac <SetButtonEvents+0x318>)
 800c6ca:	00e1      	lsls	r1, r4, #3
 800c6cc:	1909      	adds	r1, r1, r4
 800c6ce:	1852      	adds	r2, r2, r1
 800c6d0:	7a11      	ldrb	r1, [r2, #8]
 800c6d2:	2040      	movs	r0, #64	; 0x40
 800c6d4:	4301      	orrs	r1, r0
 800c6d6:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d006      	beq.n	800c6ea <SetButtonEvents+0x156>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d000      	beq.n	800c6e2 <SetButtonEvents+0x14e>
 800c6e0:	e0b8      	b.n	800c854 <SetButtonEvents+0x2c0>
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	d100      	bne.n	800c6ea <SetButtonEvents+0x156>
 800c6e8:	e0b4      	b.n	800c854 <SetButtonEvents+0x2c0>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c6ea:	4b70      	ldr	r3, [pc, #448]	; (800c8ac <SetButtonEvents+0x318>)
 800c6ec:	00e2      	lsls	r2, r4, #3
 800c6ee:	1912      	adds	r2, r2, r4
 800c6f0:	189b      	adds	r3, r3, r2
 800c6f2:	7a19      	ldrb	r1, [r3, #8]
 800c6f4:	2280      	movs	r2, #128	; 0x80
 800c6f6:	4252      	negs	r2, r2
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}

	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c6fc:	0025      	movs	r5, r4
 800c6fe:	353a      	adds	r5, #58	; 0x3a
 800c700:	00ad      	lsls	r5, r5, #2
 800c702:	ab02      	add	r3, sp, #8
 800c704:	1d99      	adds	r1, r3, #6
 800c706:	0028      	movs	r0, r5
 800c708:	f7ff f99a 	bl	800ba40 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d000      	beq.n	800c712 <SetButtonEvents+0x17e>
 800c710:	e0ca      	b.n	800c8a8 <SetButtonEvents+0x314>
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800c712:	ab02      	add	r3, sp, #8
 800c714:	88da      	ldrh	r2, [r3, #6]
 800c716:	0a10      	lsrs	r0, r2, #8
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c718:	b2d2      	uxtb	r2, r2
 800c71a:	4b64      	ldr	r3, [pc, #400]	; (800c8ac <SetButtonEvents+0x318>)
 800c71c:	00e1      	lsls	r1, r4, #3
 800c71e:	1909      	adds	r1, r1, r4
 800c720:	185b      	adds	r3, r3, r1
 800c722:	7a19      	ldrb	r1, [r3, #8]
 800c724:	428a      	cmp	r2, r1
 800c726:	d000      	beq.n	800c72a <SetButtonEvents+0x196>
 800c728:	e0a1      	b.n	800c86e <SetButtonEvents+0x2da>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
		}

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c72a:	1c6a      	adds	r2, r5, #1
 800c72c:	0014      	movs	r4, r2
 800c72e:	2306      	movs	r3, #6
 800c730:	aa02      	add	r2, sp, #8
 800c732:	4694      	mov	ip, r2
 800c734:	4463      	add	r3, ip
 800c736:	469b      	mov	fp, r3
 800c738:	0019      	movs	r1, r3
 800c73a:	0020      	movs	r0, r4
 800c73c:	f7ff f980 	bl	800ba40 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c740:	465b      	mov	r3, fp
 800c742:	881a      	ldrh	r2, [r3, #0]
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	0219      	lsls	r1, r3, #8
 800c748:	4653      	mov	r3, sl
 800c74a:	430b      	orrs	r3, r1
		if (temp16
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d000      	beq.n	800c752 <SetButtonEvents+0x1be>
 800c750:	e095      	b.n	800c87e <SetButtonEvents+0x2ea>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
					((uint16_t) pressed_x1sec << 8)
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c752:	1cac      	adds	r4, r5, #2
 800c754:	2306      	movs	r3, #6
 800c756:	aa02      	add	r2, sp, #8
 800c758:	4694      	mov	ip, r2
 800c75a:	4463      	add	r3, ip
 800c75c:	469a      	mov	sl, r3
 800c75e:	0019      	movs	r1, r3
 800c760:	0020      	movs	r0, r4
 800c762:	f7ff f96d 	bl	800ba40 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c766:	4653      	mov	r3, sl
 800c768:	881a      	ldrh	r2, [r3, #0]
 800c76a:	0239      	lsls	r1, r7, #8
 800c76c:	464b      	mov	r3, r9
 800c76e:	430b      	orrs	r3, r1
		if (temp16
 800c770:	429a      	cmp	r2, r3
 800c772:	d000      	beq.n	800c776 <SetButtonEvents+0x1e2>
 800c774:	e089      	b.n	800c88a <SetButtonEvents+0x2f6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
					((uint16_t) pressed_x2sec << 8)
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c776:	3503      	adds	r5, #3
 800c778:	ab02      	add	r3, sp, #8
 800c77a:	1d9c      	adds	r4, r3, #6
 800c77c:	0021      	movs	r1, r4
 800c77e:	0028      	movs	r0, r5
 800c780:	f7ff f95e 	bl	800ba40 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c784:	8822      	ldrh	r2, [r4, #0]
 800c786:	0231      	lsls	r1, r6, #8
 800c788:	4643      	mov	r3, r8
 800c78a:	430b      	orrs	r3, r1
		if (temp16
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d000      	beq.n	800c792 <SetButtonEvents+0x1fe>
 800c790:	e081      	b.n	800c896 <SetButtonEvents+0x302>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800c792:	2000      	movs	r0, #0
}
 800c794:	b005      	add	sp, #20
 800c796:	bcf0      	pop	{r4, r5, r6, r7}
 800c798:	46bb      	mov	fp, r7
 800c79a:	46b2      	mov	sl, r6
 800c79c:	46a9      	mov	r9, r5
 800c79e:	46a0      	mov	r8, r4
 800c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 800c7a2:	4319      	orrs	r1, r3
 800c7a4:	d000      	beq.n	800c7a8 <SetButtonEvents+0x214>
 800c7a6:	e734      	b.n	800c612 <SetButtonEvents+0x7e>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c7a8:	4940      	ldr	r1, [pc, #256]	; (800c8ac <SetButtonEvents+0x318>)
 800c7aa:	00e0      	lsls	r0, r4, #3
 800c7ac:	1900      	adds	r0, r0, r4
 800c7ae:	1809      	adds	r1, r1, r0
 800c7b0:	7a08      	ldrb	r0, [r1, #8]
 800c7b2:	2501      	movs	r5, #1
 800c7b4:	43a8      	bics	r0, r5
 800c7b6:	7208      	strb	r0, [r1, #8]
 800c7b8:	e72b      	b.n	800c612 <SetButtonEvents+0x7e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	d000      	beq.n	800c7c0 <SetButtonEvents+0x22c>
 800c7be:	e738      	b.n	800c632 <SetButtonEvents+0x9e>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c7c0:	4a3a      	ldr	r2, [pc, #232]	; (800c8ac <SetButtonEvents+0x318>)
 800c7c2:	00e1      	lsls	r1, r4, #3
 800c7c4:	1909      	adds	r1, r1, r4
 800c7c6:	1852      	adds	r2, r2, r1
 800c7c8:	7a11      	ldrb	r1, [r2, #8]
 800c7ca:	2002      	movs	r0, #2
 800c7cc:	4381      	bics	r1, r0
 800c7ce:	7211      	strb	r1, [r2, #8]
 800c7d0:	e72f      	b.n	800c632 <SetButtonEvents+0x9e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 800c7d2:	9a01      	ldr	r2, [sp, #4]
 800c7d4:	431a      	orrs	r2, r3
 800c7d6:	d000      	beq.n	800c7da <SetButtonEvents+0x246>
 800c7d8:	e73c      	b.n	800c654 <SetButtonEvents+0xc0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c7da:	4a34      	ldr	r2, [pc, #208]	; (800c8ac <SetButtonEvents+0x318>)
 800c7dc:	00e1      	lsls	r1, r4, #3
 800c7de:	1909      	adds	r1, r1, r4
 800c7e0:	1852      	adds	r2, r2, r1
 800c7e2:	7a11      	ldrb	r1, [r2, #8]
 800c7e4:	2004      	movs	r0, #4
 800c7e6:	4381      	bics	r1, r0
 800c7e8:	7211      	strb	r1, [r2, #8]
 800c7ea:	e733      	b.n	800c654 <SetButtonEvents+0xc0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 800c7ec:	003a      	movs	r2, r7
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	d000      	beq.n	800c7f4 <SetButtonEvents+0x260>
 800c7f2:	e73f      	b.n	800c674 <SetButtonEvents+0xe0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c7f4:	4a2d      	ldr	r2, [pc, #180]	; (800c8ac <SetButtonEvents+0x318>)
 800c7f6:	00e1      	lsls	r1, r4, #3
 800c7f8:	1909      	adds	r1, r1, r4
 800c7fa:	1852      	adds	r2, r2, r1
 800c7fc:	7a11      	ldrb	r1, [r2, #8]
 800c7fe:	2008      	movs	r0, #8
 800c800:	4381      	bics	r1, r0
 800c802:	7211      	strb	r1, [r2, #8]
 800c804:	e736      	b.n	800c674 <SetButtonEvents+0xe0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 800c806:	0032      	movs	r2, r6
 800c808:	431a      	orrs	r2, r3
 800c80a:	d000      	beq.n	800c80e <SetButtonEvents+0x27a>
 800c80c:	e742      	b.n	800c694 <SetButtonEvents+0x100>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c80e:	4a27      	ldr	r2, [pc, #156]	; (800c8ac <SetButtonEvents+0x318>)
 800c810:	00e1      	lsls	r1, r4, #3
 800c812:	1909      	adds	r1, r1, r4
 800c814:	1852      	adds	r2, r2, r1
 800c816:	7a11      	ldrb	r1, [r2, #8]
 800c818:	2010      	movs	r0, #16
 800c81a:	4381      	bics	r1, r0
 800c81c:	7211      	strb	r1, [r2, #8]
 800c81e:	e739      	b.n	800c694 <SetButtonEvents+0x100>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 800c820:	4652      	mov	r2, sl
 800c822:	431a      	orrs	r2, r3
 800c824:	d000      	beq.n	800c828 <SetButtonEvents+0x294>
 800c826:	e746      	b.n	800c6b6 <SetButtonEvents+0x122>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c828:	4a20      	ldr	r2, [pc, #128]	; (800c8ac <SetButtonEvents+0x318>)
 800c82a:	00e1      	lsls	r1, r4, #3
 800c82c:	1909      	adds	r1, r1, r4
 800c82e:	1852      	adds	r2, r2, r1
 800c830:	7a11      	ldrb	r1, [r2, #8]
 800c832:	2020      	movs	r0, #32
 800c834:	4381      	bics	r1, r0
 800c836:	7211      	strb	r1, [r2, #8]
 800c838:	e73d      	b.n	800c6b6 <SetButtonEvents+0x122>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 800c83a:	464a      	mov	r2, r9
 800c83c:	431a      	orrs	r2, r3
 800c83e:	d000      	beq.n	800c842 <SetButtonEvents+0x2ae>
 800c840:	e74a      	b.n	800c6d8 <SetButtonEvents+0x144>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c842:	4a1a      	ldr	r2, [pc, #104]	; (800c8ac <SetButtonEvents+0x318>)
 800c844:	00e1      	lsls	r1, r4, #3
 800c846:	1909      	adds	r1, r1, r4
 800c848:	1852      	adds	r2, r2, r1
 800c84a:	7a11      	ldrb	r1, [r2, #8]
 800c84c:	2040      	movs	r0, #64	; 0x40
 800c84e:	4381      	bics	r1, r0
 800c850:	7211      	strb	r1, [r2, #8]
 800c852:	e741      	b.n	800c6d8 <SetButtonEvents+0x144>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 800c854:	4642      	mov	r2, r8
 800c856:	4313      	orrs	r3, r2
 800c858:	d000      	beq.n	800c85c <SetButtonEvents+0x2c8>
 800c85a:	e74f      	b.n	800c6fc <SetButtonEvents+0x168>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c85c:	4b13      	ldr	r3, [pc, #76]	; (800c8ac <SetButtonEvents+0x318>)
 800c85e:	00e2      	lsls	r2, r4, #3
 800c860:	1912      	adds	r2, r2, r4
 800c862:	189b      	adds	r3, r3, r2
 800c864:	7a19      	ldrb	r1, [r3, #8]
 800c866:	227f      	movs	r2, #127	; 0x7f
 800c868:	400a      	ands	r2, r1
 800c86a:	721a      	strb	r2, [r3, #8]
 800c86c:	e746      	b.n	800c6fc <SetButtonEvents+0x168>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c86e:	0200      	lsls	r0, r0, #8
 800c870:	4301      	orrs	r1, r0
 800c872:	ab02      	add	r3, sp, #8
 800c874:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c876:	0028      	movs	r0, r5
 800c878:	f7ff f994 	bl	800bba4 <EE_WriteVariable>
 800c87c:	e755      	b.n	800c72a <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c87e:	4653      	mov	r3, sl
 800c880:	4319      	orrs	r1, r3
 800c882:	0020      	movs	r0, r4
 800c884:	f7ff f98e 	bl	800bba4 <EE_WriteVariable>
 800c888:	e763      	b.n	800c752 <SetButtonEvents+0x1be>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c88a:	464b      	mov	r3, r9
 800c88c:	4319      	orrs	r1, r3
 800c88e:	0020      	movs	r0, r4
 800c890:	f7ff f988 	bl	800bba4 <EE_WriteVariable>
 800c894:	e76f      	b.n	800c776 <SetButtonEvents+0x1e2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c896:	4643      	mov	r3, r8
 800c898:	4319      	orrs	r1, r3
 800c89a:	0028      	movs	r0, r5
 800c89c:	f7ff f982 	bl	800bba4 <EE_WriteVariable>
	return result;
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e777      	b.n	800c794 <SetButtonEvents+0x200>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c8a4:	200b      	movs	r0, #11
 800c8a6:	e775      	b.n	800c794 <SetButtonEvents+0x200>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c8a8:	200b      	movs	r0, #11
 800c8aa:	e773      	b.n	800c794 <SetButtonEvents+0x200>
 800c8ac:	2000269c 	.word	0x2000269c

0800c8b0 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c8b0:	b500      	push	{lr}
 800c8b2:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c8b4:	2214      	movs	r2, #20
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	a803      	add	r0, sp, #12
 800c8ba:	f008 f834 	bl	8014926 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c8be:	4b12      	ldr	r3, [pc, #72]	; (800c908 <HAL_ADC_MspInit+0x58>)
 800c8c0:	699a      	ldr	r2, [r3, #24]
 800c8c2:	2180      	movs	r1, #128	; 0x80
 800c8c4:	0089      	lsls	r1, r1, #2
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	619a      	str	r2, [r3, #24]
 800c8ca:	699a      	ldr	r2, [r3, #24]
 800c8cc:	400a      	ands	r2, r1
 800c8ce:	9201      	str	r2, [sp, #4]
 800c8d0:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c8d2:	695a      	ldr	r2, [r3, #20]
 800c8d4:	2180      	movs	r1, #128	; 0x80
 800c8d6:	0289      	lsls	r1, r1, #10
 800c8d8:	430a      	orrs	r2, r1
 800c8da:	615a      	str	r2, [r3, #20]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	400b      	ands	r3, r1
 800c8e0:	9302      	str	r3, [sp, #8]
 800c8e2:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800c8e4:	4b09      	ldr	r3, [pc, #36]	; (800c90c <HAL_ADC_MspInit+0x5c>)
 800c8e6:	2268      	movs	r2, #104	; 0x68
 800c8e8:	5c9b      	ldrb	r3, [r3, r2]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d001      	beq.n	800c8f2 <HAL_ADC_MspInit+0x42>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800c8ee:	b009      	add	sp, #36	; 0x24
 800c8f0:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c8f2:	333b      	adds	r3, #59	; 0x3b
 800c8f4:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8f6:	3b39      	subs	r3, #57	; 0x39
 800c8f8:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c8fa:	2090      	movs	r0, #144	; 0x90
 800c8fc:	a903      	add	r1, sp, #12
 800c8fe:	05c0      	lsls	r0, r0, #23
 800c900:	f004 fdd0 	bl	80114a4 <HAL_GPIO_Init>
}
 800c904:	e7f3      	b.n	800c8ee <HAL_ADC_MspInit+0x3e>
 800c906:	46c0      	nop			; (mov r8, r8)
 800c908:	40021000 	.word	0x40021000
 800c90c:	2000269c 	.word	0x2000269c

0800c910 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800c910:	6803      	ldr	r3, [r0, #0]
 800c912:	4a10      	ldr	r2, [pc, #64]	; (800c954 <Get_channel+0x44>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d009      	beq.n	800c92c <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
 800c918:	4a0e      	ldr	r2, [pc, #56]	; (800c954 <Get_channel+0x44>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d00b      	beq.n	800c936 <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800c91e:	4a0e      	ldr	r2, [pc, #56]	; (800c958 <Get_channel+0x48>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d00d      	beq.n	800c940 <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
 800c924:	4a0c      	ldr	r2, [pc, #48]	; (800c958 <Get_channel+0x48>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d00f      	beq.n	800c94a <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 800c92a:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800c92c:	4a0b      	ldr	r2, [pc, #44]	; (800c95c <Get_channel+0x4c>)
 800c92e:	4291      	cmp	r1, r2
 800c930:	d1f2      	bne.n	800c918 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 800c932:	2002      	movs	r0, #2
 800c934:	e7f9      	b.n	800c92a <Get_channel+0x1a>
	else if (huart->Instance == USART2 && side == "bottom")
 800c936:	4a0a      	ldr	r2, [pc, #40]	; (800c960 <Get_channel+0x50>)
 800c938:	4291      	cmp	r1, r2
 800c93a:	d1f0      	bne.n	800c91e <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800c93c:	2003      	movs	r0, #3
 800c93e:	e7f4      	b.n	800c92a <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "top")
 800c940:	4a06      	ldr	r2, [pc, #24]	; (800c95c <Get_channel+0x4c>)
 800c942:	4291      	cmp	r1, r2
 800c944:	d1ee      	bne.n	800c924 <Get_channel+0x14>
		return ADC_CHANNEL_4;
 800c946:	2004      	movs	r0, #4
 800c948:	e7ef      	b.n	800c92a <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "bottom")
 800c94a:	4b05      	ldr	r3, [pc, #20]	; (800c960 <Get_channel+0x50>)
 800c94c:	4299      	cmp	r1, r3
 800c94e:	d1ec      	bne.n	800c92a <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 800c950:	2005      	movs	r0, #5
 800c952:	e7ea      	b.n	800c92a <Get_channel+0x1a>
 800c954:	40004400 	.word	0x40004400
 800c958:	40011400 	.word	0x40011400
 800c95c:	0801aa44 	.word	0x0801aa44
 800c960:	0801aa48 	.word	0x0801aa48

0800c964 <Error_Handler>:

void Error_Handler(void) {
 800c964:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800c966:	2064      	movs	r0, #100	; 0x64
 800c968:	f003 fb3e 	bl	800ffe8 <HAL_Delay>

}
 800c96c:	bd10      	pop	{r4, pc}
	...

0800c970 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800c970:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c972:	4816      	ldr	r0, [pc, #88]	; (800c9cc <MX_ADC_Init+0x5c>)
 800c974:	4b16      	ldr	r3, [pc, #88]	; (800c9d0 <MX_ADC_Init+0x60>)
 800c976:	66c3      	str	r3, [r0, #108]	; 0x6c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c978:	2380      	movs	r3, #128	; 0x80
 800c97a:	061b      	lsls	r3, r3, #24
 800c97c:	6703      	str	r3, [r0, #112]	; 0x70
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c97e:	2300      	movs	r3, #0
 800c980:	6743      	str	r3, [r0, #116]	; 0x74
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c982:	6783      	str	r3, [r0, #120]	; 0x78
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c984:	2201      	movs	r2, #1
 800c986:	67c2      	str	r2, [r0, #124]	; 0x7c
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c988:	2180      	movs	r1, #128	; 0x80
 800c98a:	2404      	movs	r4, #4
 800c98c:	5044      	str	r4, [r0, r1]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c98e:	3104      	adds	r1, #4
 800c990:	5043      	str	r3, [r0, r1]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c992:	3104      	adds	r1, #4
 800c994:	5043      	str	r3, [r0, r1]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c996:	3104      	adds	r1, #4
 800c998:	5042      	str	r2, [r0, r1]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c99a:	3104      	adds	r1, #4
 800c99c:	5043      	str	r3, [r0, r1]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c99e:	3104      	adds	r1, #4
 800c9a0:	24c2      	movs	r4, #194	; 0xc2
 800c9a2:	34ff      	adds	r4, #255	; 0xff
 800c9a4:	5044      	str	r4, [r0, r1]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c9a6:	3104      	adds	r1, #4
 800c9a8:	5043      	str	r3, [r0, r1]
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c9aa:	3104      	adds	r1, #4
 800c9ac:	5043      	str	r3, [r0, r1]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c9ae:	33a0      	adds	r3, #160	; 0xa0
 800c9b0:	50c2      	str	r2, [r0, r3]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c9b2:	306c      	adds	r0, #108	; 0x6c
 800c9b4:	f003 fbf2 	bl	801019c <HAL_ADC_Init>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d104      	bne.n	800c9c6 <MX_ADC_Init+0x56>
	ADC_flag = 1;
 800c9bc:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <MX_ADC_Init+0x64>)
 800c9be:	2238      	movs	r2, #56	; 0x38
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	5499      	strb	r1, [r3, r2]
}
 800c9c4:	bd10      	pop	{r4, pc}
		Error_Handler();
 800c9c6:	f7ff ffcd 	bl	800c964 <Error_Handler>
 800c9ca:	e7f7      	b.n	800c9bc <MX_ADC_Init+0x4c>
 800c9cc:	2000269c 	.word	0x2000269c
 800c9d0:	40012400 	.word	0x40012400
 800c9d4:	2000271c 	.word	0x2000271c

0800c9d8 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	46ce      	mov	lr, r9
 800c9dc:	4647      	mov	r7, r8
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	0007      	movs	r7, r0
 800c9e2:	000d      	movs	r5, r1
	if (0 == ADC_flag)
 800c9e4:	4b55      	ldr	r3, [pc, #340]	; (800cb3c <ReadTempAndVref+0x164>)
 800c9e6:	2238      	movs	r2, #56	; 0x38
 800c9e8:	5c9b      	ldrb	r3, [r3, r2]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d100      	bne.n	800c9f0 <ReadTempAndVref+0x18>
 800c9ee:	e096      	b.n	800cb1e <ReadTempAndVref+0x146>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c9f0:	4952      	ldr	r1, [pc, #328]	; (800cb3c <ReadTempAndVref+0x164>)
 800c9f2:	2310      	movs	r3, #16
 800c9f4:	63cb      	str	r3, [r1, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c9f6:	2380      	movs	r3, #128	; 0x80
 800c9f8:	015b      	lsls	r3, r3, #5
 800c9fa:	640b      	str	r3, [r1, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	644b      	str	r3, [r1, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca00:	313c      	adds	r1, #60	; 0x3c
 800ca02:	484f      	ldr	r0, [pc, #316]	; (800cb40 <ReadTempAndVref+0x168>)
 800ca04:	306c      	adds	r0, #108	; 0x6c
 800ca06:	f003 fd37 	bl	8010478 <HAL_ADC_ConfigChannel>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d000      	beq.n	800ca10 <ReadTempAndVref+0x38>
 800ca0e:	e089      	b.n	800cb24 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 800ca10:	4e4b      	ldr	r6, [pc, #300]	; (800cb40 <ReadTempAndVref+0x168>)
 800ca12:	366c      	adds	r6, #108	; 0x6c
 800ca14:	0030      	movs	r0, r6
 800ca16:	f003 fc77 	bl	8010308 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800ca1a:	2164      	movs	r1, #100	; 0x64
 800ca1c:	0030      	movs	r0, r6
 800ca1e:	f003 fcc5 	bl	80103ac <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800ca22:	0030      	movs	r0, r6
 800ca24:	f003 fd22 	bl	801046c <HAL_ADC_GetValue>
 800ca28:	b280      	uxth	r0, r0
 800ca2a:	4c44      	ldr	r4, [pc, #272]	; (800cb3c <ReadTempAndVref+0x164>)
 800ca2c:	2348      	movs	r3, #72	; 0x48
 800ca2e:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800ca30:	f7f6 f920 	bl	8002c74 <__aeabi_i2d>
 800ca34:	4a43      	ldr	r2, [pc, #268]	; (800cb44 <ReadTempAndVref+0x16c>)
 800ca36:	4b44      	ldr	r3, [pc, #272]	; (800cb48 <ReadTempAndVref+0x170>)
 800ca38:	f7f5 fa84 	bl	8001f44 <__aeabi_dmul>
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4b43      	ldr	r3, [pc, #268]	; (800cb4c <ReadTempAndVref+0x174>)
 800ca40:	f7f4 fe86 	bl	8001750 <__aeabi_ddiv>
 800ca44:	4a42      	ldr	r2, [pc, #264]	; (800cb50 <ReadTempAndVref+0x178>)
 800ca46:	4b43      	ldr	r3, [pc, #268]	; (800cb54 <ReadTempAndVref+0x17c>)
 800ca48:	f7f5 fd3e 	bl	80024c8 <__aeabi_dsub>
 800ca4c:	4a42      	ldr	r2, [pc, #264]	; (800cb58 <ReadTempAndVref+0x180>)
 800ca4e:	4b43      	ldr	r3, [pc, #268]	; (800cb5c <ReadTempAndVref+0x184>)
 800ca50:	f7f4 fe7e 	bl	8001750 <__aeabi_ddiv>
 800ca54:	2200      	movs	r2, #0
 800ca56:	4b42      	ldr	r3, [pc, #264]	; (800cb60 <ReadTempAndVref+0x188>)
 800ca58:	f7f4 fb1a 	bl	8001090 <__aeabi_dadd>
 800ca5c:	f7f6 f9a8 	bl	8002db0 <__aeabi_d2f>
 800ca60:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800ca62:	0030      	movs	r0, r6
 800ca64:	f003 fc80 	bl	8010368 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800ca68:	2310      	movs	r3, #16
 800ca6a:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_NONE;
 800ca6c:	4b3d      	ldr	r3, [pc, #244]	; (800cb64 <ReadTempAndVref+0x18c>)
 800ca6e:	6423      	str	r3, [r4, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ca70:	2301      	movs	r3, #1
 800ca72:	6463      	str	r3, [r4, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca74:	0021      	movs	r1, r4
 800ca76:	313c      	adds	r1, #60	; 0x3c
 800ca78:	0030      	movs	r0, r6
 800ca7a:	f003 fcfd 	bl	8010478 <HAL_ADC_ConfigChannel>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d153      	bne.n	800cb2a <ReadTempAndVref+0x152>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800ca82:	4b2e      	ldr	r3, [pc, #184]	; (800cb3c <ReadTempAndVref+0x164>)
 800ca84:	2211      	movs	r2, #17
 800ca86:	63da      	str	r2, [r3, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ca88:	2280      	movs	r2, #128	; 0x80
 800ca8a:	0152      	lsls	r2, r2, #5
 800ca8c:	641a      	str	r2, [r3, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800ca8e:	2205      	movs	r2, #5
 800ca90:	645a      	str	r2, [r3, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca92:	333c      	adds	r3, #60	; 0x3c
 800ca94:	0019      	movs	r1, r3
 800ca96:	482a      	ldr	r0, [pc, #168]	; (800cb40 <ReadTempAndVref+0x168>)
 800ca98:	306c      	adds	r0, #108	; 0x6c
 800ca9a:	f003 fced 	bl	8010478 <HAL_ADC_ConfigChannel>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d146      	bne.n	800cb30 <ReadTempAndVref+0x158>
	HAL_ADC_Start(&hadc);
 800caa2:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <ReadTempAndVref+0x168>)
 800caa4:	226c      	movs	r2, #108	; 0x6c
 800caa6:	4690      	mov	r8, r2
 800caa8:	4498      	add	r8, r3
 800caaa:	4640      	mov	r0, r8
 800caac:	f003 fc2c 	bl	8010308 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800cab0:	2164      	movs	r1, #100	; 0x64
 800cab2:	4640      	mov	r0, r8
 800cab4:	f003 fc7a 	bl	80103ac <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800cab8:	4640      	mov	r0, r8
 800caba:	f003 fcd7 	bl	801046c <HAL_ADC_GetValue>
 800cabe:	b283      	uxth	r3, r0
 800cac0:	4699      	mov	r9, r3
 800cac2:	4c1e      	ldr	r4, [pc, #120]	; (800cb3c <ReadTempAndVref+0x164>)
 800cac4:	234a      	movs	r3, #74	; 0x4a
 800cac6:	464a      	mov	r2, r9
 800cac8:	52e2      	strh	r2, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800caca:	4b27      	ldr	r3, [pc, #156]	; (800cb68 <ReadTempAndVref+0x190>)
 800cacc:	8818      	ldrh	r0, [r3, #0]
 800cace:	f7f6 f8d1 	bl	8002c74 <__aeabi_i2d>
 800cad2:	4a1c      	ldr	r2, [pc, #112]	; (800cb44 <ReadTempAndVref+0x16c>)
 800cad4:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <ReadTempAndVref+0x170>)
 800cad6:	f7f5 fa35 	bl	8001f44 <__aeabi_dmul>
 800cada:	0006      	movs	r6, r0
 800cadc:	000f      	movs	r7, r1
 800cade:	4648      	mov	r0, r9
 800cae0:	f7f6 f8c8 	bl	8002c74 <__aeabi_i2d>
 800cae4:	0002      	movs	r2, r0
 800cae6:	000b      	movs	r3, r1
 800cae8:	0030      	movs	r0, r6
 800caea:	0039      	movs	r1, r7
 800caec:	f7f4 fe30 	bl	8001750 <__aeabi_ddiv>
 800caf0:	f7f6 f95e 	bl	8002db0 <__aeabi_d2f>
 800caf4:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800caf6:	4640      	mov	r0, r8
 800caf8:	f003 fc36 	bl	8010368 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800cafc:	2311      	movs	r3, #17
 800cafe:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_NONE;
 800cb00:	4b18      	ldr	r3, [pc, #96]	; (800cb64 <ReadTempAndVref+0x18c>)
 800cb02:	6423      	str	r3, [r4, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cb04:	2301      	movs	r3, #1
 800cb06:	6463      	str	r3, [r4, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb08:	0021      	movs	r1, r4
 800cb0a:	313c      	adds	r1, #60	; 0x3c
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	f003 fcb3 	bl	8010478 <HAL_ADC_ConfigChannel>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d10f      	bne.n	800cb36 <ReadTempAndVref+0x15e>
}
 800cb16:	bcc0      	pop	{r6, r7}
 800cb18:	46b9      	mov	r9, r7
 800cb1a:	46b0      	mov	r8, r6
 800cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800cb1e:	f7ff ff27 	bl	800c970 <MX_ADC_Init>
 800cb22:	e765      	b.n	800c9f0 <ReadTempAndVref+0x18>
		Error_Handler();
 800cb24:	f7ff ff1e 	bl	800c964 <Error_Handler>
 800cb28:	e772      	b.n	800ca10 <ReadTempAndVref+0x38>
		Error_Handler();
 800cb2a:	f7ff ff1b 	bl	800c964 <Error_Handler>
 800cb2e:	e7a8      	b.n	800ca82 <ReadTempAndVref+0xaa>
		Error_Handler();
 800cb30:	f7ff ff18 	bl	800c964 <Error_Handler>
 800cb34:	e7b5      	b.n	800caa2 <ReadTempAndVref+0xca>
		Error_Handler();
 800cb36:	f7ff ff15 	bl	800c964 <Error_Handler>
}
 800cb3a:	e7ec      	b.n	800cb16 <ReadTempAndVref+0x13e>
 800cb3c:	2000271c 	.word	0x2000271c
 800cb40:	2000269c 	.word	0x2000269c
 800cb44:	66666666 	.word	0x66666666
 800cb48:	400a6666 	.word	0x400a6666
 800cb4c:	40affe00 	.word	0x40affe00
 800cb50:	28f5c28f 	.word	0x28f5c28f
 800cb54:	3ff68f5c 	.word	0x3ff68f5c
 800cb58:	33333333 	.word	0x33333333
 800cb5c:	40113333 	.word	0x40113333
 800cb60:	40390000 	.word	0x40390000
 800cb64:	00001001 	.word	0x00001001
 800cb68:	1ffff7ba 	.word	0x1ffff7ba

0800cb6c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	0004      	movs	r4, r0
 800cb72:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800cb74:	1e83      	subs	r3, r0, #2
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d901      	bls.n	800cb80 <GetReadPrecentage+0x14>
}
 800cb7c:	b006      	add	sp, #24
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800cb80:	4b4c      	ldr	r3, [pc, #304]	; (800ccb4 <GetReadPrecentage+0x148>)
 800cb82:	2238      	movs	r2, #56	; 0x38
 800cb84:	5c9b      	ldrb	r3, [r3, r2]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d054      	beq.n	800cc34 <GetReadPrecentage+0xc8>
		Channel = Get_channel(GetUart(port), "bottom");
 800cb8a:	0020      	movs	r0, r4
 800cb8c:	f001 f98a 	bl	800dea4 <GetUart>
 800cb90:	4949      	ldr	r1, [pc, #292]	; (800ccb8 <GetReadPrecentage+0x14c>)
 800cb92:	f7ff febd 	bl	800c910 <Get_channel>
 800cb96:	4b47      	ldr	r3, [pc, #284]	; (800ccb4 <GetReadPrecentage+0x148>)
 800cb98:	224c      	movs	r2, #76	; 0x4c
 800cb9a:	5498      	strb	r0, [r3, r2]
		sConfig.Channel = Channel;
 800cb9c:	63d8      	str	r0, [r3, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cb9e:	2280      	movs	r2, #128	; 0x80
 800cba0:	0152      	lsls	r2, r2, #5
 800cba2:	641a      	str	r2, [r3, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cba4:	2201      	movs	r2, #1
 800cba6:	645a      	str	r2, [r3, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cba8:	333c      	adds	r3, #60	; 0x3c
 800cbaa:	0019      	movs	r1, r3
 800cbac:	4843      	ldr	r0, [pc, #268]	; (800ccbc <GetReadPrecentage+0x150>)
 800cbae:	306c      	adds	r0, #108	; 0x6c
 800cbb0:	f003 fc62 	bl	8010478 <HAL_ADC_ConfigChannel>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d17a      	bne.n	800ccae <GetReadPrecentage+0x142>
		HAL_ADC_Start(&hadc);
 800cbb8:	4c40      	ldr	r4, [pc, #256]	; (800ccbc <GetReadPrecentage+0x150>)
 800cbba:	346c      	adds	r4, #108	; 0x6c
 800cbbc:	0020      	movs	r0, r4
 800cbbe:	f003 fba3 	bl	8010308 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cbc2:	2164      	movs	r1, #100	; 0x64
 800cbc4:	0020      	movs	r0, r4
 800cbc6:	f003 fbf1 	bl	80103ac <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800cbca:	0020      	movs	r0, r4
 800cbcc:	f003 fc4e 	bl	801046c <HAL_ADC_GetValue>
 800cbd0:	f7f4 fa16 	bl	8001000 <__aeabi_ui2f>
 800cbd4:	4e37      	ldr	r6, [pc, #220]	; (800ccb4 <GetReadPrecentage+0x148>)
 800cbd6:	6530      	str	r0, [r6, #80]	; 0x50
		percentage = 3.3 * percentage / 4095;
 800cbd8:	f7f6 f8a2 	bl	8002d20 <__aeabi_f2d>
 800cbdc:	4a38      	ldr	r2, [pc, #224]	; (800ccc0 <GetReadPrecentage+0x154>)
 800cbde:	4b39      	ldr	r3, [pc, #228]	; (800ccc4 <GetReadPrecentage+0x158>)
 800cbe0:	f7f5 f9b0 	bl	8001f44 <__aeabi_dmul>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4b38      	ldr	r3, [pc, #224]	; (800ccc8 <GetReadPrecentage+0x15c>)
 800cbe8:	f7f4 fdb2 	bl	8001750 <__aeabi_ddiv>
 800cbec:	f7f6 f8e0 	bl	8002db0 <__aeabi_d2f>
 800cbf0:	6530      	str	r0, [r6, #80]	; 0x50
		current = (100 * percentage) / 3.3;
 800cbf2:	4936      	ldr	r1, [pc, #216]	; (800cccc <GetReadPrecentage+0x160>)
 800cbf4:	f7f3 fef6 	bl	80009e4 <__aeabi_fmul>
 800cbf8:	f7f6 f892 	bl	8002d20 <__aeabi_f2d>
 800cbfc:	4a30      	ldr	r2, [pc, #192]	; (800ccc0 <GetReadPrecentage+0x154>)
 800cbfe:	4b31      	ldr	r3, [pc, #196]	; (800ccc4 <GetReadPrecentage+0x158>)
 800cc00:	f7f4 fda6 	bl	8001750 <__aeabi_ddiv>
 800cc04:	f7f6 f8d4 	bl	8002db0 <__aeabi_d2f>
 800cc08:	6570      	str	r0, [r6, #84]	; 0x54
		*precentageValue = current;
 800cc0a:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800cc0c:	0020      	movs	r0, r4
 800cc0e:	f003 fbab 	bl	8010368 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cc12:	234c      	movs	r3, #76	; 0x4c
 800cc14:	5cf3      	ldrb	r3, [r6, r3]
 800cc16:	63f3      	str	r3, [r6, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_NONE;
 800cc18:	4b2d      	ldr	r3, [pc, #180]	; (800ccd0 <GetReadPrecentage+0x164>)
 800cc1a:	6433      	str	r3, [r6, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	6473      	str	r3, [r6, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cc20:	0031      	movs	r1, r6
 800cc22:	313c      	adds	r1, #60	; 0x3c
 800cc24:	0020      	movs	r0, r4
 800cc26:	f003 fc27 	bl	8010478 <HAL_ADC_ConfigChannel>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d0a6      	beq.n	800cb7c <GetReadPrecentage+0x10>
			Error_Handler();
 800cc2e:	f7ff fe99 	bl	800c964 <Error_Handler>
 800cc32:	e7a3      	b.n	800cb7c <GetReadPrecentage+0x10>
			MX_ADC_Init();
 800cc34:	f7ff fe9c 	bl	800c970 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800cc38:	0020      	movs	r0, r4
 800cc3a:	f001 f933 	bl	800dea4 <GetUart>
 800cc3e:	f005 fcec 	bl	801261a <HAL_UART_DeInit>
			if (port == 3) {
 800cc42:	2c03      	cmp	r4, #3
 800cc44:	d019      	beq.n	800cc7a <GetReadPrecentage+0x10e>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800cc46:	2690      	movs	r6, #144	; 0x90
 800cc48:	05f6      	lsls	r6, r6, #23
 800cc4a:	2104      	movs	r1, #4
 800cc4c:	0030      	movs	r0, r6
 800cc4e:	f004 fcf5 	bl	801163c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cc52:	2304      	movs	r3, #4
 800cc54:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc56:	3b03      	subs	r3, #3
 800cc58:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc5a:	3302      	adds	r3, #2
 800cc5c:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc5e:	a901      	add	r1, sp, #4
 800cc60:	0030      	movs	r0, r6
 800cc62:	f004 fc1f 	bl	80114a4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800cc66:	1e63      	subs	r3, r4, #1
 800cc68:	4a1a      	ldr	r2, [pc, #104]	; (800ccd4 <GetReadPrecentage+0x168>)
 800cc6a:	2106      	movs	r1, #6
 800cc6c:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800cc6e:	2201      	movs	r2, #1
 800cc70:	3902      	subs	r1, #2
 800cc72:	0030      	movs	r0, r6
 800cc74:	f004 fd6b 	bl	801174e <HAL_GPIO_WritePin>
 800cc78:	e787      	b.n	800cb8a <GetReadPrecentage+0x1e>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800cc7a:	2690      	movs	r6, #144	; 0x90
 800cc7c:	05f6      	lsls	r6, r6, #23
 800cc7e:	2110      	movs	r1, #16
 800cc80:	0030      	movs	r0, r6
 800cc82:	f004 fcdb 	bl	801163c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800cc86:	2310      	movs	r3, #16
 800cc88:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc8a:	3b0f      	subs	r3, #15
 800cc8c:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc8e:	3302      	adds	r3, #2
 800cc90:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc92:	a901      	add	r1, sp, #4
 800cc94:	0030      	movs	r0, r6
 800cc96:	f004 fc05 	bl	80114a4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800cc9a:	1e63      	subs	r3, r4, #1
 800cc9c:	4a0d      	ldr	r2, [pc, #52]	; (800ccd4 <GetReadPrecentage+0x168>)
 800cc9e:	2106      	movs	r1, #6
 800cca0:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800cca2:	2201      	movs	r2, #1
 800cca4:	310a      	adds	r1, #10
 800cca6:	0030      	movs	r0, r6
 800cca8:	f004 fd51 	bl	801174e <HAL_GPIO_WritePin>
 800ccac:	e76d      	b.n	800cb8a <GetReadPrecentage+0x1e>
			Error_Handler();
 800ccae:	f7ff fe59 	bl	800c964 <Error_Handler>
 800ccb2:	e781      	b.n	800cbb8 <GetReadPrecentage+0x4c>
 800ccb4:	2000271c 	.word	0x2000271c
 800ccb8:	0801aa48 	.word	0x0801aa48
 800ccbc:	2000269c 	.word	0x2000269c
 800ccc0:	66666666 	.word	0x66666666
 800ccc4:	400a6666 	.word	0x400a6666
 800ccc8:	40affe00 	.word	0x40affe00
 800cccc:	42c80000 	.word	0x42c80000
 800ccd0:	00001001 	.word	0x00001001
 800ccd4:	2000095c 	.word	0x2000095c

0800ccd8 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800ccd8:	2802      	cmp	r0, #2
 800ccda:	d009      	beq.n	800ccf0 <Get_Rank+0x18>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
 800ccdc:	2802      	cmp	r0, #2
 800ccde:	d00f      	beq.n	800cd00 <Get_Rank+0x28>
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800cce0:	2803      	cmp	r0, #3
 800cce2:	d015      	beq.n	800cd10 <Get_Rank+0x38>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
 800cce4:	2803      	cmp	r0, #3
 800cce6:	d01b      	beq.n	800cd20 <Get_Rank+0x48>
		Rank_t = 3;
	return Rank_t;
 800cce8:	4b11      	ldr	r3, [pc, #68]	; (800cd30 <Get_Rank+0x58>)
 800ccea:	2258      	movs	r2, #88	; 0x58
 800ccec:	5c98      	ldrb	r0, [r3, r2]
}
 800ccee:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800ccf0:	4b10      	ldr	r3, [pc, #64]	; (800cd34 <Get_Rank+0x5c>)
 800ccf2:	4299      	cmp	r1, r3
 800ccf4:	d1f2      	bne.n	800ccdc <Get_Rank+0x4>
		Rank_t = 0;
 800ccf6:	4b0e      	ldr	r3, [pc, #56]	; (800cd30 <Get_Rank+0x58>)
 800ccf8:	2258      	movs	r2, #88	; 0x58
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	5499      	strb	r1, [r3, r2]
 800ccfe:	e7f3      	b.n	800cce8 <Get_Rank+0x10>
	else if (Port == 2 && side == "bottom")
 800cd00:	4b0d      	ldr	r3, [pc, #52]	; (800cd38 <Get_Rank+0x60>)
 800cd02:	4299      	cmp	r1, r3
 800cd04:	d1ec      	bne.n	800cce0 <Get_Rank+0x8>
		Rank_t = 1;
 800cd06:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <Get_Rank+0x58>)
 800cd08:	2258      	movs	r2, #88	; 0x58
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	5499      	strb	r1, [r3, r2]
 800cd0e:	e7eb      	b.n	800cce8 <Get_Rank+0x10>
	else if (Port == 3 && side == "top")
 800cd10:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <Get_Rank+0x5c>)
 800cd12:	4299      	cmp	r1, r3
 800cd14:	d1e6      	bne.n	800cce4 <Get_Rank+0xc>
		Rank_t = 2;
 800cd16:	4b06      	ldr	r3, [pc, #24]	; (800cd30 <Get_Rank+0x58>)
 800cd18:	2258      	movs	r2, #88	; 0x58
 800cd1a:	2102      	movs	r1, #2
 800cd1c:	5499      	strb	r1, [r3, r2]
 800cd1e:	e7e3      	b.n	800cce8 <Get_Rank+0x10>
	else if (Port == 3 && side == "bottom")
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <Get_Rank+0x60>)
 800cd22:	4299      	cmp	r1, r3
 800cd24:	d1e0      	bne.n	800cce8 <Get_Rank+0x10>
		Rank_t = 3;
 800cd26:	4b02      	ldr	r3, [pc, #8]	; (800cd30 <Get_Rank+0x58>)
 800cd28:	2258      	movs	r2, #88	; 0x58
 800cd2a:	2103      	movs	r1, #3
 800cd2c:	5499      	strb	r1, [r3, r2]
 800cd2e:	e7db      	b.n	800cce8 <Get_Rank+0x10>
 800cd30:	2000271c 	.word	0x2000271c
 800cd34:	0801aa44 	.word	0x0801aa44
 800cd38:	0801aa48 	.word	0x0801aa48

0800cd3c <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	0004      	movs	r4, r0
 800cd40:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800cd42:	1e83      	subs	r3, r0, #2
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d900      	bls.n	800cd4c <ADCSelectChannel+0x10>
}
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800cd4c:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <ADCSelectChannel+0x54>)
 800cd4e:	2268      	movs	r2, #104	; 0x68
 800cd50:	2101      	movs	r1, #1
 800cd52:	5499      	strb	r1, [r3, r2]
		HAL_UART_DeInit(GetUart(ADC_port));
 800cd54:	f001 f8a6 	bl	800dea4 <GetUart>
 800cd58:	f005 fc5f 	bl	801261a <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800cd5c:	1e62      	subs	r2, r4, #1
 800cd5e:	4b0d      	ldr	r3, [pc, #52]	; (800cd94 <ADCSelectChannel+0x58>)
 800cd60:	2106      	movs	r1, #6
 800cd62:	5499      	strb	r1, [r3, r2]
		Channel = Get_channel(GetUart(ADC_port), side);
 800cd64:	0020      	movs	r0, r4
 800cd66:	f001 f89d 	bl	800dea4 <GetUart>
 800cd6a:	0029      	movs	r1, r5
 800cd6c:	f7ff fdd0 	bl	800c910 <Get_channel>
 800cd70:	4e09      	ldr	r6, [pc, #36]	; (800cd98 <ADCSelectChannel+0x5c>)
 800cd72:	234c      	movs	r3, #76	; 0x4c
 800cd74:	54f0      	strb	r0, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800cd76:	0029      	movs	r1, r5
 800cd78:	0020      	movs	r0, r4
 800cd7a:	f7ff ffad 	bl	800ccd8 <Get_Rank>
 800cd7e:	2358      	movs	r3, #88	; 0x58
 800cd80:	54f0      	strb	r0, [r6, r3]
		if (ADC_flag == 0)
 800cd82:	3b20      	subs	r3, #32
 800cd84:	5cf3      	ldrb	r3, [r6, r3]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1df      	bne.n	800cd4a <ADCSelectChannel+0xe>
			MX_ADC_Init();
 800cd8a:	f7ff fdf1 	bl	800c970 <MX_ADC_Init>
}
 800cd8e:	e7dc      	b.n	800cd4a <ADCSelectChannel+0xe>
 800cd90:	2000269c 	.word	0x2000269c
 800cd94:	2000095c 	.word	0x2000095c
 800cd98:	2000271c 	.word	0x2000271c

0800cd9c <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd9e:	46c6      	mov	lr, r8
 800cda0:	b500      	push	{lr}
 800cda2:	0005      	movs	r5, r0
 800cda4:	000e      	movs	r6, r1
 800cda6:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800cda8:	4b2d      	ldr	r3, [pc, #180]	; (800ce60 <ReadADCChannel+0xc4>)
 800cdaa:	2238      	movs	r2, #56	; 0x38
 800cdac:	5c9b      	ldrb	r3, [r3, r2]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d00c      	beq.n	800cdcc <ReadADCChannel+0x30>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800cdb2:	4b2b      	ldr	r3, [pc, #172]	; (800ce60 <ReadADCChannel+0xc4>)
 800cdb4:	2258      	movs	r2, #88	; 0x58
 800cdb6:	5c9a      	ldrb	r2, [r3, r2]
 800cdb8:	0052      	lsls	r2, r2, #1
 800cdba:	189b      	adds	r3, r3, r2
 800cdbc:	225c      	movs	r2, #92	; 0x5c
 800cdbe:	5a98      	ldrh	r0, [r3, r2]
 800cdc0:	f7f4 f91e 	bl	8001000 <__aeabi_ui2f>
 800cdc4:	6020      	str	r0, [r4, #0]
}
 800cdc6:	bc80      	pop	{r7}
 800cdc8:	46b8      	mov	r8, r7
 800cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800cdcc:	f001 f86a 	bl	800dea4 <GetUart>
 800cdd0:	0031      	movs	r1, r6
 800cdd2:	f7ff fd9d 	bl	800c910 <Get_channel>
 800cdd6:	4f22      	ldr	r7, [pc, #136]	; (800ce60 <ReadADCChannel+0xc4>)
 800cdd8:	234c      	movs	r3, #76	; 0x4c
 800cdda:	4698      	mov	r8, r3
 800cddc:	54f8      	strb	r0, [r7, r3]
		Rank_t = Get_Rank(Port, side);
 800cdde:	0031      	movs	r1, r6
 800cde0:	0028      	movs	r0, r5
 800cde2:	f7ff ff79 	bl	800ccd8 <Get_Rank>
 800cde6:	2358      	movs	r3, #88	; 0x58
 800cde8:	54f8      	strb	r0, [r7, r3]
		sConfig.Channel = Channel;
 800cdea:	4643      	mov	r3, r8
 800cdec:	5cfb      	ldrb	r3, [r7, r3]
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cdf0:	2380      	movs	r3, #128	; 0x80
 800cdf2:	015b      	lsls	r3, r3, #5
 800cdf4:	643b      	str	r3, [r7, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cdfa:	0039      	movs	r1, r7
 800cdfc:	313c      	adds	r1, #60	; 0x3c
 800cdfe:	4819      	ldr	r0, [pc, #100]	; (800ce64 <ReadADCChannel+0xc8>)
 800ce00:	306c      	adds	r0, #108	; 0x6c
 800ce02:	f003 fb39 	bl	8010478 <HAL_ADC_ConfigChannel>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d126      	bne.n	800ce58 <ReadADCChannel+0xbc>
		HAL_ADC_Start(&hadc);
 800ce0a:	4e16      	ldr	r6, [pc, #88]	; (800ce64 <ReadADCChannel+0xc8>)
 800ce0c:	366c      	adds	r6, #108	; 0x6c
 800ce0e:	0030      	movs	r0, r6
 800ce10:	f003 fa7a 	bl	8010308 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800ce14:	2164      	movs	r1, #100	; 0x64
 800ce16:	0030      	movs	r0, r6
 800ce18:	f003 fac8 	bl	80103ac <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800ce1c:	0030      	movs	r0, r6
 800ce1e:	f003 fb25 	bl	801046c <HAL_ADC_GetValue>
 800ce22:	4d0f      	ldr	r5, [pc, #60]	; (800ce60 <ReadADCChannel+0xc4>)
 800ce24:	2358      	movs	r3, #88	; 0x58
 800ce26:	5ceb      	ldrb	r3, [r5, r3]
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	18eb      	adds	r3, r5, r3
 800ce2c:	225c      	movs	r2, #92	; 0x5c
 800ce2e:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800ce30:	0030      	movs	r0, r6
 800ce32:	f003 fa99 	bl	8010368 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800ce36:	234c      	movs	r3, #76	; 0x4c
 800ce38:	5ceb      	ldrb	r3, [r5, r3]
 800ce3a:	63eb      	str	r3, [r5, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_NONE;
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <ReadADCChannel+0xcc>)
 800ce3e:	642b      	str	r3, [r5, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800ce40:	2303      	movs	r3, #3
 800ce42:	646b      	str	r3, [r5, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ce44:	0029      	movs	r1, r5
 800ce46:	313c      	adds	r1, #60	; 0x3c
 800ce48:	0030      	movs	r0, r6
 800ce4a:	f003 fb15 	bl	8010478 <HAL_ADC_ConfigChannel>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d0af      	beq.n	800cdb2 <ReadADCChannel+0x16>
			Error_Handler();
 800ce52:	f7ff fd87 	bl	800c964 <Error_Handler>
 800ce56:	e7ac      	b.n	800cdb2 <ReadADCChannel+0x16>
			Error_Handler();
 800ce58:	f7ff fd84 	bl	800c964 <Error_Handler>
 800ce5c:	e7d5      	b.n	800ce0a <ReadADCChannel+0x6e>
 800ce5e:	46c0      	nop			; (mov r8, r8)
 800ce60:	2000271c 	.word	0x2000271c
 800ce64:	2000269c 	.word	0x2000269c
 800ce68:	00001001 	.word	0x00001001

0800ce6c <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800ce6c:	4770      	bx	lr

0800ce6e <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800ce6e:	4770      	bx	lr

0800ce70 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800ce70:	4770      	bx	lr

0800ce72 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800ce72:	4770      	bx	lr

0800ce74 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800ce74:	4770      	bx	lr
	...

0800ce78 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800ce78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce7a:	46ce      	mov	lr, r9
 800ce7c:	4647      	mov	r7, r8
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b087      	sub	sp, #28
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800ce82:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800ce84:	2600      	movs	r6, #0
 800ce86:	2300      	movs	r3, #0
 800ce88:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800ce8a:	e13d      	b.n	800d108 <CheckAttachedButtons+0x290>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800ce8c:	464b      	mov	r3, r9
 800ce8e:	8819      	ldrh	r1, [r3, #0]
 800ce90:	9805      	ldr	r0, [sp, #20]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f004 fc5b 	bl	801174e <HAL_GPIO_WritePin>
				Delay_us(10);
 800ce98:	200a      	movs	r0, #10
 800ce9a:	f000 fe21 	bl	800dae0 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800ce9e:	8839      	ldrh	r1, [r7, #0]
 800cea0:	9804      	ldr	r0, [sp, #16]
 800cea2:	f004 fc4d 	bl	8011740 <HAL_GPIO_ReadPin>
 800cea6:	4680      	mov	r8, r0
 800cea8:	e15e      	b.n	800d168 <CheckAttachedButtons+0x2f0>
			switch (button[i].type) {
 800ceaa:	2b04      	cmp	r3, #4
 800ceac:	d10b      	bne.n	800cec6 <CheckAttachedButtons+0x4e>
				if (connected == GPIO_PIN_SET)
 800ceae:	4643      	mov	r3, r8
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d047      	beq.n	800cf44 <CheckAttachedButtons+0xcc>
				else if (connected == GPIO_PIN_RESET)
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <CheckAttachedButtons+0x4e>
					state = ON;
 800ceb8:	2602      	movs	r6, #2
 800ceba:	e006      	b.n	800ceca <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800cebc:	4643      	mov	r3, r8
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d042      	beq.n	800cf48 <CheckAttachedButtons+0xd0>
				else if (connected == GPIO_PIN_RESET)
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d03a      	beq.n	800cf3c <CheckAttachedButtons+0xc4>
			if (state == CLOSED || state == ON) {
 800cec6:	2e04      	cmp	r6, #4
 800cec8:	d03f      	beq.n	800cf4a <CheckAttachedButtons+0xd2>
 800ceca:	2e02      	cmp	r6, #2
 800cecc:	d03d      	beq.n	800cf4a <CheckAttachedButtons+0xd2>
			if (state == OPEN || state == OFF) {
 800cece:	2e03      	cmp	r6, #3
 800ced0:	d050      	beq.n	800cf74 <CheckAttachedButtons+0xfc>
 800ced2:	2e01      	cmp	r6, #1
 800ced4:	d04e      	beq.n	800cf74 <CheckAttachedButtons+0xfc>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800ced6:	4bc3      	ldr	r3, [pc, #780]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800ced8:	00aa      	lsls	r2, r5, #2
 800ceda:	189b      	adds	r3, r3, r2
 800cedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cede:	4ac2      	ldr	r2, [pc, #776]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800cee0:	8812      	ldrh	r2, [r2, #0]
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d200      	bcs.n	800cee8 <CheckAttachedButtons+0x70>
 800cee6:	e0ab      	b.n	800d040 <CheckAttachedButtons+0x1c8>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800cee8:	d079      	beq.n	800cfde <CheckAttachedButtons+0x166>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800ceea:	4bbe      	ldr	r3, [pc, #760]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800ceec:	00a9      	lsls	r1, r5, #2
 800ceee:	185b      	adds	r3, r3, r1
 800cef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d203      	bcs.n	800cefe <CheckAttachedButtons+0x86>
					releaseCounter[i] = 0;
 800cef6:	4bbb      	ldr	r3, [pc, #748]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cef8:	185b      	adds	r3, r3, r1
 800cefa:	2200      	movs	r2, #0
 800cefc:	651a      	str	r2, [r3, #80]	; 0x50
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800cefe:	4bb9      	ldr	r3, [pc, #740]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cf00:	00aa      	lsls	r2, r5, #2
 800cf02:	189b      	adds	r3, r3, r2
 800cf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf06:	4ab8      	ldr	r2, [pc, #736]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800cf08:	8852      	ldrh	r2, [r2, #2]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d800      	bhi.n	800cf10 <CheckAttachedButtons+0x98>
 800cf0e:	e087      	b.n	800d020 <CheckAttachedButtons+0x1a8>
						&& pressCounter[i] < 500) {
 800cf10:	22fa      	movs	r2, #250	; 0xfa
 800cf12:	0052      	lsls	r2, r2, #1
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d300      	bcc.n	800cf1a <CheckAttachedButtons+0xa2>
 800cf18:	e082      	b.n	800d020 <CheckAttachedButtons+0x1a8>
					if (clicked == 0)
 800cf1a:	4bb4      	ldr	r3, [pc, #720]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cf1c:	3a90      	subs	r2, #144	; 0x90
 800cf1e:	3aff      	subs	r2, #255	; 0xff
 800cf20:	5c9b      	ldrb	r3, [r3, r2]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d165      	bne.n	800cff2 <CheckAttachedButtons+0x17a>
						clicked = 1;		// Record a possible single click
 800cf26:	4bb1      	ldr	r3, [pc, #708]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cf28:	2101      	movs	r1, #1
 800cf2a:	5499      	strb	r1, [r3, r2]
 800cf2c:	e088      	b.n	800d040 <CheckAttachedButtons+0x1c8>
				if (connected == GPIO_PIN_SET)
 800cf2e:	4643      	mov	r3, r8
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d005      	beq.n	800cf40 <CheckAttachedButtons+0xc8>
				else if (connected == GPIO_PIN_RESET)
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1c6      	bne.n	800cec6 <CheckAttachedButtons+0x4e>
					state = OFF;
 800cf38:	2601      	movs	r6, #1
 800cf3a:	e7c6      	b.n	800ceca <CheckAttachedButtons+0x52>
					state = OPEN;
 800cf3c:	2603      	movs	r6, #3
 800cf3e:	e7c4      	b.n	800ceca <CheckAttachedButtons+0x52>
					state = ON;
 800cf40:	2602      	movs	r6, #2
 800cf42:	e7c2      	b.n	800ceca <CheckAttachedButtons+0x52>
					state = OFF;
 800cf44:	4646      	mov	r6, r8
 800cf46:	e7c0      	b.n	800ceca <CheckAttachedButtons+0x52>
					state = CLOSED;
 800cf48:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)
 800cf4a:	4ba6      	ldr	r3, [pc, #664]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cf4c:	00aa      	lsls	r2, r5, #2
 800cf4e:	189b      	adds	r3, r3, r2
 800cf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf52:	4aa7      	ldr	r2, [pc, #668]	; (800d1f0 <CheckAttachedButtons+0x378>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d807      	bhi.n	800cf68 <CheckAttachedButtons+0xf0>
					++pressCounter[i];			// Advance the debounce counter
 800cf58:	4aa2      	ldr	r2, [pc, #648]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cf5a:	00a9      	lsls	r1, r5, #2
 800cf5c:	1852      	adds	r2, r2, r1
 800cf5e:	3301      	adds	r3, #1
 800cf60:	6393      	str	r3, [r2, #56]	; 0x38
 800cf62:	e7b4      	b.n	800cece <CheckAttachedButtons+0x56>
					state = CLOSED;
 800cf64:	2604      	movs	r6, #4
 800cf66:	e7f0      	b.n	800cf4a <CheckAttachedButtons+0xd2>
					pressCounter[i] = 0;			// Reset debounce counter
 800cf68:	4b9e      	ldr	r3, [pc, #632]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cf6a:	00aa      	lsls	r2, r5, #2
 800cf6c:	189b      	adds	r3, r3, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
 800cf72:	e7ac      	b.n	800cece <CheckAttachedButtons+0x56>
				if (releaseCounter[i] < 0xFFFF)
 800cf74:	4b9b      	ldr	r3, [pc, #620]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cf76:	00aa      	lsls	r2, r5, #2
 800cf78:	189b      	adds	r3, r3, r2
 800cf7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7c:	4a9c      	ldr	r2, [pc, #624]	; (800d1f0 <CheckAttachedButtons+0x378>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d819      	bhi.n	800cfb6 <CheckAttachedButtons+0x13e>
					++releaseCounter[i];		// Advance the debounce counter
 800cf82:	4a98      	ldr	r2, [pc, #608]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cf84:	00a9      	lsls	r1, r5, #2
 800cf86:	1852      	adds	r2, r2, r1
 800cf88:	3301      	adds	r3, #1
 800cf8a:	6513      	str	r3, [r2, #80]	; 0x50
				if (clicked == 2
 800cf8c:	4b97      	ldr	r3, [pc, #604]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cf8e:	2265      	movs	r2, #101	; 0x65
 800cf90:	5c9b      	ldrb	r3, [r3, r2]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d015      	beq.n	800cfc2 <CheckAttachedButtons+0x14a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800cf96:	4b95      	ldr	r3, [pc, #596]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cf98:	195b      	adds	r3, r3, r5
 800cf9a:	2268      	movs	r2, #104	; 0x68
 800cf9c:	5c9a      	ldrb	r2, [r3, r2]
 800cf9e:	4b92      	ldr	r3, [pc, #584]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800cfa0:	795b      	ldrb	r3, [r3, #5]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d997      	bls.n	800ced6 <CheckAttachedButtons+0x5e>
					clicked = 0;
 800cfa6:	4b91      	ldr	r3, [pc, #580]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	2165      	movs	r1, #101	; 0x65
 800cfac:	545a      	strb	r2, [r3, r1]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800cfae:	195b      	adds	r3, r3, r5
 800cfb0:	3103      	adds	r1, #3
 800cfb2:	545a      	strb	r2, [r3, r1]
 800cfb4:	e78f      	b.n	800ced6 <CheckAttachedButtons+0x5e>
					releaseCounter[i] = 0;		// Reset debounce counter
 800cfb6:	4b8b      	ldr	r3, [pc, #556]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cfb8:	00aa      	lsls	r2, r5, #2
 800cfba:	189b      	adds	r3, r3, r2
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	651a      	str	r2, [r3, #80]	; 0x50
 800cfc0:	e7e4      	b.n	800cf8c <CheckAttachedButtons+0x114>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800cfc2:	4b8a      	ldr	r3, [pc, #552]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cfc4:	195b      	adds	r3, r3, r5
 800cfc6:	3203      	adds	r2, #3
 800cfc8:	5c9b      	ldrb	r3, [r3, r2]
 800cfca:	4a87      	ldr	r2, [pc, #540]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800cfcc:	7952      	ldrb	r2, [r2, #5]
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d8e1      	bhi.n	800cf96 <CheckAttachedButtons+0x11e>
					++dblCounter[i];
 800cfd2:	4a86      	ldr	r2, [pc, #536]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cfd4:	1952      	adds	r2, r2, r5
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	2168      	movs	r1, #104	; 0x68
 800cfda:	5453      	strb	r3, [r2, r1]
 800cfdc:	e77b      	b.n	800ced6 <CheckAttachedButtons+0x5e>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800cfde:	4981      	ldr	r1, [pc, #516]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800cfe0:	00e8      	lsls	r0, r5, #3
 800cfe2:	1940      	adds	r0, r0, r5
 800cfe4:	2707      	movs	r7, #7
 800cfe6:	5447      	strb	r7, [r0, r1]
					++pressCounter[i];
 800cfe8:	00a8      	lsls	r0, r5, #2
 800cfea:	1809      	adds	r1, r1, r0
 800cfec:	3301      	adds	r3, #1
 800cfee:	638b      	str	r3, [r1, #56]	; 0x38
 800cff0:	e77b      	b.n	800ceea <CheckAttachedButtons+0x72>
					else if (clicked == 2) {
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d124      	bne.n	800d040 <CheckAttachedButtons+0x1c8>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800cff6:	4b7d      	ldr	r3, [pc, #500]	; (800d1ec <CheckAttachedButtons+0x374>)
 800cff8:	195b      	adds	r3, r3, r5
 800cffa:	2268      	movs	r2, #104	; 0x68
 800cffc:	5c9b      	ldrb	r3, [r3, r2]
 800cffe:	4a7a      	ldr	r2, [pc, #488]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800d000:	7912      	ldrb	r2, [r2, #4]
 800d002:	4293      	cmp	r3, r2
 800d004:	d91c      	bls.n	800d040 <CheckAttachedButtons+0x1c8>
										< BOS.buttons.maxInterClickTime) {
 800d006:	4a78      	ldr	r2, [pc, #480]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800d008:	7952      	ldrb	r2, [r2, #5]
								&& dblCounter[i]
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d218      	bcs.n	800d040 <CheckAttachedButtons+0x1c8>
							clicked = 3;	// Record a possible double click
 800d00e:	4b77      	ldr	r3, [pc, #476]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d010:	2265      	movs	r2, #101	; 0x65
 800d012:	2103      	movs	r1, #3
 800d014:	5499      	strb	r1, [r3, r2]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800d016:	195b      	adds	r3, r3, r5
 800d018:	3203      	adds	r2, #3
 800d01a:	2100      	movs	r1, #0
 800d01c:	5499      	strb	r1, [r3, r2]
 800d01e:	e00f      	b.n	800d040 <CheckAttachedButtons+0x1c8>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800d020:	3bf5      	subs	r3, #245	; 0xf5
 800d022:	3bff      	subs	r3, #255	; 0xff
 800d024:	4a73      	ldr	r2, [pc, #460]	; (800d1f4 <CheckAttachedButtons+0x37c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d80a      	bhi.n	800d040 <CheckAttachedButtons+0x1c8>
					if (clicked)
 800d02a:	4b70      	ldr	r3, [pc, #448]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d02c:	2265      	movs	r2, #101	; 0x65
 800d02e:	5c9b      	ldrb	r3, [r3, r2]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <CheckAttachedButtons+0x1c2>
						clicked = 0;						// Cannot be a click
 800d034:	4b6d      	ldr	r3, [pc, #436]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d036:	2100      	movs	r1, #0
 800d038:	5499      	strb	r1, [r3, r2]
					CheckForTimedButtonPress(i);
 800d03a:	0020      	movs	r0, r4
 800d03c:	f7ff f924 	bl	800c288 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800d040:	4b68      	ldr	r3, [pc, #416]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d042:	00aa      	lsls	r2, r5, #2
 800d044:	189b      	adds	r3, r3, r2
 800d046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d048:	4a67      	ldr	r2, [pc, #412]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800d04a:	8812      	ldrh	r2, [r2, #0]
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d341      	bcc.n	800d0d4 <CheckAttachedButtons+0x25c>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800d050:	d027      	beq.n	800d0a2 <CheckAttachedButtons+0x22a>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800d052:	4b64      	ldr	r3, [pc, #400]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d054:	00a9      	lsls	r1, r5, #2
 800d056:	185b      	adds	r3, r3, r1
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d203      	bcs.n	800d066 <CheckAttachedButtons+0x1ee>
					pressCounter[i] = 0;
 800d05e:	4b61      	ldr	r3, [pc, #388]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d060:	185b      	adds	r3, r3, r1
 800d062:	2200      	movs	r2, #0
 800d064:	639a      	str	r2, [r3, #56]	; 0x38
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800d066:	4b5f      	ldr	r3, [pc, #380]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d068:	00aa      	lsls	r2, r5, #2
 800d06a:	189b      	adds	r3, r3, r2
 800d06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06e:	4a5e      	ldr	r2, [pc, #376]	; (800d1e8 <CheckAttachedButtons+0x370>)
 800d070:	8852      	ldrh	r2, [r2, #2]
 800d072:	4293      	cmp	r3, r2
 800d074:	d929      	bls.n	800d0ca <CheckAttachedButtons+0x252>
						&& releaseCounter[i] < 500) {
 800d076:	22fa      	movs	r2, #250	; 0xfa
 800d078:	0052      	lsls	r2, r2, #1
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d225      	bcs.n	800d0ca <CheckAttachedButtons+0x252>
					if (clicked == 1) {
 800d07e:	4b5b      	ldr	r3, [pc, #364]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d080:	3a90      	subs	r2, #144	; 0x90
 800d082:	3aff      	subs	r2, #255	; 0xff
 800d084:	5c9b      	ldrb	r3, [r3, r2]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d015      	beq.n	800d0b6 <CheckAttachedButtons+0x23e>
					} else if (clicked == 3) {
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d122      	bne.n	800d0d4 <CheckAttachedButtons+0x25c>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800d08e:	4b55      	ldr	r3, [pc, #340]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d090:	00ea      	lsls	r2, r5, #3
 800d092:	1952      	adds	r2, r2, r5
 800d094:	2106      	movs	r1, #6
 800d096:	54d1      	strb	r1, [r2, r3]
						clicked = 0;			// Prepare for a single click
 800d098:	4b54      	ldr	r3, [pc, #336]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d09a:	2265      	movs	r2, #101	; 0x65
 800d09c:	2100      	movs	r1, #0
 800d09e:	5499      	strb	r1, [r3, r2]
 800d0a0:	e018      	b.n	800d0d4 <CheckAttachedButtons+0x25c>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800d0a2:	4950      	ldr	r1, [pc, #320]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d0a4:	00e8      	lsls	r0, r5, #3
 800d0a6:	1940      	adds	r0, r0, r5
 800d0a8:	2708      	movs	r7, #8
 800d0aa:	5447      	strb	r7, [r0, r1]
					++releaseCounter[i];
 800d0ac:	00a8      	lsls	r0, r5, #2
 800d0ae:	1809      	adds	r1, r1, r0
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	650b      	str	r3, [r1, #80]	; 0x50
 800d0b4:	e7cd      	b.n	800d052 <CheckAttachedButtons+0x1da>
						button[i].state = CLICKED;// Record a single button click event
 800d0b6:	4b4b      	ldr	r3, [pc, #300]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d0b8:	00ea      	lsls	r2, r5, #3
 800d0ba:	1952      	adds	r2, r2, r5
 800d0bc:	2105      	movs	r1, #5
 800d0be:	54d1      	strb	r1, [r2, r3]
						clicked = 2;			// Prepare for a double click
 800d0c0:	4b4a      	ldr	r3, [pc, #296]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d0c2:	2265      	movs	r2, #101	; 0x65
 800d0c4:	3903      	subs	r1, #3
 800d0c6:	5499      	strb	r1, [r3, r2]
 800d0c8:	e004      	b.n	800d0d4 <CheckAttachedButtons+0x25c>
						&& releaseCounter[i] < 0xFFFF) {
 800d0ca:	3bf5      	subs	r3, #245	; 0xf5
 800d0cc:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800d0ce:	4a49      	ldr	r2, [pc, #292]	; (800d1f4 <CheckAttachedButtons+0x37c>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d90b      	bls.n	800d0ec <CheckAttachedButtons+0x274>
			switch (button[i].state) {
 800d0d4:	4b43      	ldr	r3, [pc, #268]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d0d6:	00ea      	lsls	r2, r5, #3
 800d0d8:	1952      	adds	r2, r2, r5
 800d0da:	5cd3      	ldrb	r3, [r2, r3]
 800d0dc:	3b05      	subs	r3, #5
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	2a09      	cmp	r2, #9
 800d0e2:	d80f      	bhi.n	800d104 <CheckAttachedButtons+0x28c>
 800d0e4:	0093      	lsls	r3, r2, #2
 800d0e6:	4a44      	ldr	r2, [pc, #272]	; (800d1f8 <CheckAttachedButtons+0x380>)
 800d0e8:	58d3      	ldr	r3, [r2, r3]
 800d0ea:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800d0ec:	0020      	movs	r0, r4
 800d0ee:	f7ff f901 	bl	800c2f4 <CheckForTimedButtonRelease>
 800d0f2:	e7ef      	b.n	800d0d4 <CheckAttachedButtons+0x25c>
				buttonPressedCallback(i);
 800d0f4:	0020      	movs	r0, r4
 800d0f6:	f7ff f8c5 	bl	800c284 <buttonPressedCallback>
				button[i].state = NONE;
 800d0fa:	4b3a      	ldr	r3, [pc, #232]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d0fc:	00ea      	lsls	r2, r5, #3
 800d0fe:	1952      	adds	r2, r2, r5
 800d100:	2100      	movs	r1, #0
 800d102:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800d104:	3401      	adds	r4, #1
 800d106:	b2e4      	uxtb	r4, r4
 800d108:	2c05      	cmp	r4, #5
 800d10a:	d900      	bls.n	800d10e <CheckAttachedButtons+0x296>
 800d10c:	e115      	b.n	800d33a <CheckAttachedButtons+0x4c2>
		if (button[i].type)			// Only check defined butons
 800d10e:	0025      	movs	r5, r4
 800d110:	4b34      	ldr	r3, [pc, #208]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d112:	00e2      	lsls	r2, r4, #3
 800d114:	1912      	adds	r2, r2, r4
 800d116:	189b      	adds	r3, r3, r2
 800d118:	785b      	ldrb	r3, [r3, #1]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0f2      	beq.n	800d104 <CheckAttachedButtons+0x28c>
			if (delayButtonStateReset == false)
 800d11e:	4b33      	ldr	r3, [pc, #204]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d120:	2264      	movs	r2, #100	; 0x64
 800d122:	5c9b      	ldrb	r3, [r3, r2]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d104      	bne.n	800d132 <CheckAttachedButtons+0x2ba>
				button[i].state = NONE;
 800d128:	4b2e      	ldr	r3, [pc, #184]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d12a:	00e2      	lsls	r2, r4, #3
 800d12c:	1912      	adds	r2, r2, r4
 800d12e:	2100      	movs	r1, #0
 800d130:	54d1      	strb	r1, [r2, r3]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800d132:	230e      	movs	r3, #14
 800d134:	446b      	add	r3, sp
 800d136:	4699      	mov	r9, r3
 800d138:	af03      	add	r7, sp, #12
 800d13a:	9700      	str	r7, [sp, #0]
 800d13c:	ab04      	add	r3, sp, #16
 800d13e:	464a      	mov	r2, r9
 800d140:	a905      	add	r1, sp, #20
 800d142:	0020      	movs	r0, r4
 800d144:	f7fe ffca 	bl	800c0dc <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d148:	464b      	mov	r3, r9
 800d14a:	8819      	ldrh	r1, [r3, #0]
 800d14c:	9805      	ldr	r0, [sp, #20]
 800d14e:	2200      	movs	r2, #0
 800d150:	f004 fafd 	bl	801174e <HAL_GPIO_WritePin>
			Delay_us(10);
 800d154:	200a      	movs	r0, #10
 800d156:	f000 fcc3 	bl	800dae0 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800d15a:	8839      	ldrh	r1, [r7, #0]
 800d15c:	9804      	ldr	r0, [sp, #16]
 800d15e:	f004 faef 	bl	8011740 <HAL_GPIO_ReadPin>
 800d162:	2800      	cmp	r0, #0
 800d164:	d100      	bne.n	800d168 <CheckAttachedButtons+0x2f0>
 800d166:	e691      	b.n	800ce8c <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d168:	230e      	movs	r3, #14
 800d16a:	446b      	add	r3, sp
 800d16c:	8819      	ldrh	r1, [r3, #0]
 800d16e:	9805      	ldr	r0, [sp, #20]
 800d170:	2200      	movs	r2, #0
 800d172:	f004 faec 	bl	801174e <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800d176:	4b1b      	ldr	r3, [pc, #108]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d178:	00ea      	lsls	r2, r5, #3
 800d17a:	1952      	adds	r2, r2, r5
 800d17c:	189b      	adds	r3, r3, r2
 800d17e:	785b      	ldrb	r3, [r3, #1]
 800d180:	2b03      	cmp	r3, #3
 800d182:	d100      	bne.n	800d186 <CheckAttachedButtons+0x30e>
 800d184:	e6d3      	b.n	800cf2e <CheckAttachedButtons+0xb6>
 800d186:	d900      	bls.n	800d18a <CheckAttachedButtons+0x312>
 800d188:	e68f      	b.n	800ceaa <CheckAttachedButtons+0x32>
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d100      	bne.n	800d190 <CheckAttachedButtons+0x318>
 800d18e:	e695      	b.n	800cebc <CheckAttachedButtons+0x44>
 800d190:	2b02      	cmp	r3, #2
 800d192:	d000      	beq.n	800d196 <CheckAttachedButtons+0x31e>
 800d194:	e697      	b.n	800cec6 <CheckAttachedButtons+0x4e>
				if (connected == GPIO_PIN_SET)
 800d196:	4643      	mov	r3, r8
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d100      	bne.n	800d19e <CheckAttachedButtons+0x326>
 800d19c:	e6e2      	b.n	800cf64 <CheckAttachedButtons+0xec>
				else if (connected == GPIO_PIN_RESET)
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d000      	beq.n	800d1a4 <CheckAttachedButtons+0x32c>
 800d1a2:	e690      	b.n	800cec6 <CheckAttachedButtons+0x4e>
					state = OPEN;
 800d1a4:	2603      	movs	r6, #3
 800d1a6:	e690      	b.n	800ceca <CheckAttachedButtons+0x52>
				buttonReleasedCallback(i);
 800d1a8:	0020      	movs	r0, r4
 800d1aa:	f7ff fe5f 	bl	800ce6c <buttonReleasedCallback>
				button[i].state = NONE;
 800d1ae:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d1b0:	00ea      	lsls	r2, r5, #3
 800d1b2:	1952      	adds	r2, r2, r5
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	54d1      	strb	r1, [r2, r3]
				break;
 800d1b8:	e7a4      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d1ba:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d1bc:	2264      	movs	r2, #100	; 0x64
 800d1be:	5c9b      	ldrb	r3, [r3, r2]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d19f      	bne.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800d1c4:	4b07      	ldr	r3, [pc, #28]	; (800d1e4 <CheckAttachedButtons+0x36c>)
 800d1c6:	00ea      	lsls	r2, r5, #3
 800d1c8:	1952      	adds	r2, r2, r5
 800d1ca:	189b      	adds	r3, r3, r2
 800d1cc:	7a1b      	ldrb	r3, [r3, #8]
 800d1ce:	07db      	lsls	r3, r3, #31
 800d1d0:	d598      	bpl.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d1d2:	4b06      	ldr	r3, [pc, #24]	; (800d1ec <CheckAttachedButtons+0x374>)
 800d1d4:	2264      	movs	r2, #100	; 0x64
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	5499      	strb	r1, [r3, r2]
					buttonClickedCallback(i);
 800d1da:	0020      	movs	r0, r4
 800d1dc:	f7ff fe47 	bl	800ce6e <buttonClickedCallback>
 800d1e0:	e790      	b.n	800d104 <CheckAttachedButtons+0x28c>
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	2000269c 	.word	0x2000269c
 800d1e8:	2000084c 	.word	0x2000084c
 800d1ec:	2000271c 	.word	0x2000271c
 800d1f0:	0000fffe 	.word	0x0000fffe
 800d1f4:	0000fe0a 	.word	0x0000fe0a
 800d1f8:	08019ca8 	.word	0x08019ca8
				if (!delayButtonStateReset
 800d1fc:	4b51      	ldr	r3, [pc, #324]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d1fe:	2264      	movs	r2, #100	; 0x64
 800d200:	5c9b      	ldrb	r3, [r3, r2]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d000      	beq.n	800d208 <CheckAttachedButtons+0x390>
 800d206:	e77d      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800d208:	4b4f      	ldr	r3, [pc, #316]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d20a:	00ea      	lsls	r2, r5, #3
 800d20c:	1952      	adds	r2, r2, r5
 800d20e:	189b      	adds	r3, r3, r2
 800d210:	7a1b      	ldrb	r3, [r3, #8]
 800d212:	079b      	lsls	r3, r3, #30
 800d214:	d400      	bmi.n	800d218 <CheckAttachedButtons+0x3a0>
 800d216:	e775      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d218:	4b4a      	ldr	r3, [pc, #296]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d21a:	2264      	movs	r2, #100	; 0x64
 800d21c:	2101      	movs	r1, #1
 800d21e:	5499      	strb	r1, [r3, r2]
					buttonDblClickedCallback(i);
 800d220:	0020      	movs	r0, r4
 800d222:	f7ff fe25 	bl	800ce70 <buttonDblClickedCallback>
 800d226:	e76d      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d228:	4b46      	ldr	r3, [pc, #280]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d22a:	2264      	movs	r2, #100	; 0x64
 800d22c:	5c9b      	ldrb	r3, [r3, r2]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d000      	beq.n	800d234 <CheckAttachedButtons+0x3bc>
 800d232:	e767      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800d234:	4b44      	ldr	r3, [pc, #272]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d236:	00ea      	lsls	r2, r5, #3
 800d238:	1952      	adds	r2, r2, r5
 800d23a:	189b      	adds	r3, r3, r2
 800d23c:	7a1b      	ldrb	r3, [r3, #8]
 800d23e:	075b      	lsls	r3, r3, #29
 800d240:	d400      	bmi.n	800d244 <CheckAttachedButtons+0x3cc>
 800d242:	e75f      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d244:	4b3f      	ldr	r3, [pc, #252]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d246:	2264      	movs	r2, #100	; 0x64
 800d248:	2101      	movs	r1, #1
 800d24a:	5499      	strb	r1, [r3, r2]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d24c:	0020      	movs	r0, r4
 800d24e:	f7ff fe10 	bl	800ce72 <buttonPressedForXCallback>
 800d252:	e757      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d254:	4b3b      	ldr	r3, [pc, #236]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d256:	2264      	movs	r2, #100	; 0x64
 800d258:	5c9b      	ldrb	r3, [r3, r2]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d000      	beq.n	800d260 <CheckAttachedButtons+0x3e8>
 800d25e:	e751      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800d260:	4b39      	ldr	r3, [pc, #228]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d262:	00ea      	lsls	r2, r5, #3
 800d264:	1952      	adds	r2, r2, r5
 800d266:	189b      	adds	r3, r3, r2
 800d268:	7a1b      	ldrb	r3, [r3, #8]
 800d26a:	071b      	lsls	r3, r3, #28
 800d26c:	d400      	bmi.n	800d270 <CheckAttachedButtons+0x3f8>
 800d26e:	e749      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d270:	4b34      	ldr	r3, [pc, #208]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d272:	2264      	movs	r2, #100	; 0x64
 800d274:	2101      	movs	r1, #1
 800d276:	5499      	strb	r1, [r3, r2]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800d278:	3101      	adds	r1, #1
 800d27a:	0020      	movs	r0, r4
 800d27c:	f7ff fdf9 	bl	800ce72 <buttonPressedForXCallback>
 800d280:	e740      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d282:	4b30      	ldr	r3, [pc, #192]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d284:	2264      	movs	r2, #100	; 0x64
 800d286:	5c9b      	ldrb	r3, [r3, r2]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d000      	beq.n	800d28e <CheckAttachedButtons+0x416>
 800d28c:	e73a      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800d28e:	4b2e      	ldr	r3, [pc, #184]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d290:	00ea      	lsls	r2, r5, #3
 800d292:	1952      	adds	r2, r2, r5
 800d294:	189b      	adds	r3, r3, r2
 800d296:	7a1b      	ldrb	r3, [r3, #8]
 800d298:	06db      	lsls	r3, r3, #27
 800d29a:	d400      	bmi.n	800d29e <CheckAttachedButtons+0x426>
 800d29c:	e732      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d29e:	4b29      	ldr	r3, [pc, #164]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d2a0:	2264      	movs	r2, #100	; 0x64
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	5499      	strb	r1, [r3, r2]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800d2a6:	3102      	adds	r1, #2
 800d2a8:	0020      	movs	r0, r4
 800d2aa:	f7ff fde2 	bl	800ce72 <buttonPressedForXCallback>
 800d2ae:	e729      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d2b0:	4b24      	ldr	r3, [pc, #144]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d2b2:	2264      	movs	r2, #100	; 0x64
 800d2b4:	5c9b      	ldrb	r3, [r3, r2]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d000      	beq.n	800d2bc <CheckAttachedButtons+0x444>
 800d2ba:	e723      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800d2bc:	4b22      	ldr	r3, [pc, #136]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d2be:	00ea      	lsls	r2, r5, #3
 800d2c0:	1952      	adds	r2, r2, r5
 800d2c2:	189b      	adds	r3, r3, r2
 800d2c4:	7a1b      	ldrb	r3, [r3, #8]
 800d2c6:	069b      	lsls	r3, r3, #26
 800d2c8:	d400      	bmi.n	800d2cc <CheckAttachedButtons+0x454>
 800d2ca:	e71b      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d2cc:	4b1d      	ldr	r3, [pc, #116]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d2ce:	2264      	movs	r2, #100	; 0x64
 800d2d0:	2101      	movs	r1, #1
 800d2d2:	5499      	strb	r1, [r3, r2]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d2d4:	0020      	movs	r0, r4
 800d2d6:	f7ff fdcd 	bl	800ce74 <buttonReleasedForYCallback>
 800d2da:	e713      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d2dc:	4b19      	ldr	r3, [pc, #100]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d2de:	2264      	movs	r2, #100	; 0x64
 800d2e0:	5c9b      	ldrb	r3, [r3, r2]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d000      	beq.n	800d2e8 <CheckAttachedButtons+0x470>
 800d2e6:	e70d      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800d2e8:	4b17      	ldr	r3, [pc, #92]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d2ea:	00ea      	lsls	r2, r5, #3
 800d2ec:	1952      	adds	r2, r2, r5
 800d2ee:	189b      	adds	r3, r3, r2
 800d2f0:	7a1b      	ldrb	r3, [r3, #8]
 800d2f2:	065b      	lsls	r3, r3, #25
 800d2f4:	d400      	bmi.n	800d2f8 <CheckAttachedButtons+0x480>
 800d2f6:	e705      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d2f8:	4b12      	ldr	r3, [pc, #72]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d2fa:	2264      	movs	r2, #100	; 0x64
 800d2fc:	2101      	movs	r1, #1
 800d2fe:	5499      	strb	r1, [r3, r2]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800d300:	3101      	adds	r1, #1
 800d302:	0020      	movs	r0, r4
 800d304:	f7ff fdb6 	bl	800ce74 <buttonReleasedForYCallback>
 800d308:	e6fc      	b.n	800d104 <CheckAttachedButtons+0x28c>
				if (!delayButtonStateReset
 800d30a:	4b0e      	ldr	r3, [pc, #56]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d30c:	2264      	movs	r2, #100	; 0x64
 800d30e:	5c9b      	ldrb	r3, [r3, r2]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d000      	beq.n	800d316 <CheckAttachedButtons+0x49e>
 800d314:	e6f6      	b.n	800d104 <CheckAttachedButtons+0x28c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800d316:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <CheckAttachedButtons+0x4d0>)
 800d318:	00ea      	lsls	r2, r5, #3
 800d31a:	1952      	adds	r2, r2, r5
 800d31c:	189b      	adds	r3, r3, r2
 800d31e:	7a1b      	ldrb	r3, [r3, #8]
 800d320:	b25b      	sxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	db00      	blt.n	800d328 <CheckAttachedButtons+0x4b0>
 800d326:	e6ed      	b.n	800d104 <CheckAttachedButtons+0x28c>
					delayButtonStateReset = true;
 800d328:	4b06      	ldr	r3, [pc, #24]	; (800d344 <CheckAttachedButtons+0x4cc>)
 800d32a:	2264      	movs	r2, #100	; 0x64
 800d32c:	2101      	movs	r1, #1
 800d32e:	5499      	strb	r1, [r3, r2]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800d330:	3102      	adds	r1, #2
 800d332:	0020      	movs	r0, r4
 800d334:	f7ff fd9e 	bl	800ce74 <buttonReleasedForYCallback>
 800d338:	e6e4      	b.n	800d104 <CheckAttachedButtons+0x28c>
}
 800d33a:	b007      	add	sp, #28
 800d33c:	bcc0      	pop	{r6, r7}
 800d33e:	46b9      	mov	r9, r7
 800d340:	46b0      	mov	r8, r6
 800d342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d344:	2000271c 	.word	0x2000271c
 800d348:	2000269c 	.word	0x2000269c

0800d34c <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	4b03      	ldr	r3, [pc, #12]	; (800d360 <NVIC_SystemReset+0x14>)
 800d352:	4a04      	ldr	r2, [pc, #16]	; (800d364 <NVIC_SystemReset+0x18>)
 800d354:	60da      	str	r2, [r3, #12]
 800d356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800d35a:	46c0      	nop			; (mov r8, r8)
 800d35c:	e7fd      	b.n	800d35a <NVIC_SystemReset+0xe>
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	e000ed00 	.word	0xe000ed00
 800d364:	05fa0004 	.word	0x05fa0004

0800d368 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d368:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d36a:	f002 fe2f 	bl	800ffcc <HAL_IncTick>
  osSystickHandler();  
 800d36e:	f000 ffbb 	bl	800e2e8 <osSystickHandler>

}
 800d372:	bd10      	pop	{r4, pc}

0800d374 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d374:	b530      	push	{r4, r5, lr}
 800d376:	b083      	sub	sp, #12
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d378:	4909      	ldr	r1, [pc, #36]	; (800d3a0 <HardFault_Handler+0x2c>)
 800d37a:	4d0a      	ldr	r5, [pc, #40]	; (800d3a4 <HardFault_Handler+0x30>)
 800d37c:	7828      	ldrb	r0, [r5, #0]
 800d37e:	24ff      	movs	r4, #255	; 0xff
 800d380:	9400      	str	r4, [sp, #0]
 800d382:	23ff      	movs	r3, #255	; 0xff
 800d384:	2211      	movs	r2, #17
 800d386:	f000 fdab 	bl	800dee0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d38a:	4b07      	ldr	r3, [pc, #28]	; (800d3a8 <HardFault_Handler+0x34>)
 800d38c:	6819      	ldr	r1, [r3, #0]
 800d38e:	7828      	ldrb	r0, [r5, #0]
 800d390:	9400      	str	r4, [sp, #0]
 800d392:	23ff      	movs	r3, #255	; 0xff
 800d394:	220f      	movs	r2, #15
 800d396:	f000 fda3 	bl	800dee0 <writePxMutex>
	NVIC_SystemReset();
 800d39a:	f7ff ffd7 	bl	800d34c <NVIC_SystemReset>
 800d39e:	46c0      	nop			; (mov r8, r8)
 800d3a0:	0801c3e4 	.word	0x0801c3e4
 800d3a4:	20000958 	.word	0x20000958
 800d3a8:	200000a0 	.word	0x200000a0

0800d3ac <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d3ac:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d3ae:	4802      	ldr	r0, [pc, #8]	; (800d3b8 <USART1_IRQHandler+0xc>)
 800d3b0:	f005 fe0f 	bl	8012fd2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d3b4:	bd10      	pop	{r4, pc}
 800d3b6:	46c0      	nop			; (mov r8, r8)
 800d3b8:	20001ed8 	.word	0x20001ed8

0800d3bc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d3bc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d3be:	4802      	ldr	r0, [pc, #8]	; (800d3c8 <USART2_IRQHandler+0xc>)
 800d3c0:	f005 fe07 	bl	8012fd2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d3c4:	bd10      	pop	{r4, pc}
 800d3c6:	46c0      	nop			; (mov r8, r8)
 800d3c8:	20002214 	.word	0x20002214

0800d3cc <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d3cc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d3ce:	4806      	ldr	r0, [pc, #24]	; (800d3e8 <USART3_8_IRQHandler+0x1c>)
 800d3d0:	f005 fdff 	bl	8012fd2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d3d4:	4805      	ldr	r0, [pc, #20]	; (800d3ec <USART3_8_IRQHandler+0x20>)
 800d3d6:	f005 fdfc 	bl	8012fd2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d3da:	4805      	ldr	r0, [pc, #20]	; (800d3f0 <USART3_8_IRQHandler+0x24>)
 800d3dc:	f005 fdf9 	bl	8012fd2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d3e0:	4804      	ldr	r0, [pc, #16]	; (800d3f4 <USART3_8_IRQHandler+0x28>)
 800d3e2:	f005 fdf6 	bl	8012fd2 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d3e6:	bd10      	pop	{r4, pc}
 800d3e8:	200021a4 	.word	0x200021a4
 800d3ec:	20002134 	.word	0x20002134
 800d3f0:	200020c4 	.word	0x200020c4
 800d3f4:	20002054 	.word	0x20002054

0800d3f8 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d3f8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	f7fa f9dc 	bl	80077b8 <DMA_IRQHandler>
	
}
 800d400:	bd10      	pop	{r4, pc}
	...

0800d404 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d404:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d406:	4b0c      	ldr	r3, [pc, #48]	; (800d438 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	06db      	lsls	r3, r3, #27
 800d40c:	d40b      	bmi.n	800d426 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d40e:	4b0b      	ldr	r3, [pc, #44]	; (800d43c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	05db      	lsls	r3, r3, #23
 800d414:	d40b      	bmi.n	800d42e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d416:	4b09      	ldr	r3, [pc, #36]	; (800d43c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	06db      	lsls	r3, r3, #27
 800d41c:	d506      	bpl.n	800d42c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d41e:	4808      	ldr	r0, [pc, #32]	; (800d440 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d420:	f003 fae4 	bl	80109ec <HAL_DMA_IRQHandler>
	}
}
 800d424:	e002      	b.n	800d42c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P3);
 800d426:	2003      	movs	r0, #3
 800d428:	f7fa f9c6 	bl	80077b8 <DMA_IRQHandler>
}
 800d42c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d42e:	2002      	movs	r0, #2
 800d430:	f7fa f9c2 	bl	80077b8 <DMA_IRQHandler>
 800d434:	e7fa      	b.n	800d42c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800d436:	46c0      	nop			; (mov r8, r8)
 800d438:	40020400 	.word	0x40020400
 800d43c:	40020000 	.word	0x40020000
 800d440:	200024a0 	.word	0x200024a0

0800d444 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d444:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d446:	4b10      	ldr	r3, [pc, #64]	; (800d488 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	05db      	lsls	r3, r3, #23
 800d44c:	d40f      	bmi.n	800d46e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d44e:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	03db      	lsls	r3, r3, #15
 800d454:	d40f      	bmi.n	800d476 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);

	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d456:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	04db      	lsls	r3, r3, #19
 800d45c:	d40f      	bmi.n	800d47e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d45e:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	01db      	lsls	r3, r3, #7
 800d464:	d506      	bpl.n	800d474 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d466:	480a      	ldr	r0, [pc, #40]	; (800d490 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
 800d468:	f003 fac0 	bl	80109ec <HAL_DMA_IRQHandler>
	}
}
 800d46c:	e002      	b.n	800d474 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
		DMA_IRQHandler(P5);
 800d46e:	2005      	movs	r0, #5
 800d470:	f7fa f9a2 	bl	80077b8 <DMA_IRQHandler>
}
 800d474:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d476:	2004      	movs	r0, #4
 800d478:	f7fa f99e 	bl	80077b8 <DMA_IRQHandler>
 800d47c:	e7fa      	b.n	800d474 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d47e:	4805      	ldr	r0, [pc, #20]	; (800d494 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800d480:	f003 fab4 	bl	80109ec <HAL_DMA_IRQHandler>
 800d484:	e7f6      	b.n	800d474 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	40020400 	.word	0x40020400
 800d48c:	40020000 	.word	0x40020000
 800d490:	20002510 	.word	0x20002510
 800d494:	200024d8 	.word	0x200024d8

0800d498 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d498:	b510      	push	{r4, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d4a2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d4a8:	f7fd fce8 	bl	800ae7c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d4ac:	0020      	movs	r0, r4
 800d4ae:	f7fd fb19 	bl	800aae4 <GetPort>
 800d4b2:	4b04      	ldr	r3, [pc, #16]	; (800d4c4 <HAL_UART_TxCpltCallback+0x2c>)
 800d4b4:	0080      	lsls	r0, r0, #2
 800d4b6:	58c0      	ldr	r0, [r0, r3]
 800d4b8:	a901      	add	r1, sp, #4
 800d4ba:	f001 fa59 	bl	800e970 <xQueueGiveFromISR>
}
 800d4be:	b002      	add	sp, #8
 800d4c0:	bd10      	pop	{r4, pc}
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	20001b48 	.word	0x20001b48

0800d4c8 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d4cc:	2369      	movs	r3, #105	; 0x69
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d4d2:	f7fd fb07 	bl	800aae4 <GetPort>
	if (portStatus[port] == STREAM) {
 800d4d6:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <HAL_UART_ErrorCallback+0x3c>)
 800d4d8:	5c1b      	ldrb	r3, [r3, r0]
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d004      	beq.n	800d4e8 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d4de:	3801      	subs	r0, #1
 800d4e0:	4b09      	ldr	r3, [pc, #36]	; (800d508 <HAL_UART_ErrorCallback+0x40>)
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	541a      	strb	r2, [r3, r0]
	}	
}
 800d4e6:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d4e8:	3801      	subs	r0, #1
 800d4ea:	4a08      	ldr	r2, [pc, #32]	; (800d50c <HAL_UART_ErrorCallback+0x44>)
 800d4ec:	0083      	lsls	r3, r0, #2
 800d4ee:	589b      	ldr	r3, [r3, r2]
 800d4f0:	6819      	ldr	r1, [r3, #0]
 800d4f2:	3128      	adds	r1, #40	; 0x28
 800d4f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	b292      	uxth	r2, r2
 800d4fc:	0020      	movs	r0, r4
 800d4fe:	f005 f957 	bl	80127b0 <HAL_UART_Receive_DMA>
 800d502:	e7f0      	b.n	800d4e6 <HAL_UART_ErrorCallback+0x1e>
 800d504:	2000095c 	.word	0x2000095c
 800d508:	200016f8 	.word	0x200016f8
 800d50c:	200016bc 	.word	0x200016bc

0800d510 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800d510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d512:	46de      	mov	lr, fp
 800d514:	4657      	mov	r7, sl
 800d516:	464e      	mov	r6, r9
 800d518:	4645      	mov	r5, r8
 800d51a:	b5e0      	push	{r5, r6, r7, lr}
 800d51c:	b083      	sub	sp, #12
 800d51e:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800d520:	f7fd fae0 	bl	800aae4 <GetPort>
	uint8_t port_index = port_number - 1;
 800d524:	1e42      	subs	r2, r0, #1
 800d526:	b2d2      	uxtb	r2, r2
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d528:	4b68      	ldr	r3, [pc, #416]	; (800d6cc <HAL_UART_RxCpltCallback+0x1bc>)
 800d52a:	5c99      	ldrb	r1, [r3, r2]
 800d52c:	290d      	cmp	r1, #13
 800d52e:	d031      	beq.n	800d594 <HAL_UART_RxCpltCallback+0x84>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800d530:	4b67      	ldr	r3, [pc, #412]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d532:	5c1b      	ldrb	r3, [r3, r0]
 800d534:	2b03      	cmp	r3, #3
 800d536:	d051      	beq.n	800d5dc <HAL_UART_RxCpltCallback+0xcc>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d538:	2948      	cmp	r1, #72	; 0x48
 800d53a:	d063      	beq.n	800d604 <HAL_UART_RxCpltCallback+0xf4>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d53c:	295a      	cmp	r1, #90	; 0x5a
 800d53e:	d067      	beq.n	800d610 <HAL_UART_RxCpltCallback+0x100>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
	}

	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d540:	295a      	cmp	r1, #90	; 0x5a
 800d542:	d001      	beq.n	800d548 <HAL_UART_RxCpltCallback+0x38>
 800d544:	2b07      	cmp	r3, #7
 800d546:	d069      	beq.n	800d61c <HAL_UART_RxCpltCallback+0x10c>
	{
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
	}

	else if(portStatus[port_number] == Z_Status)
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d06b      	beq.n	800d624 <HAL_UART_RxCpltCallback+0x114>
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
		temp_index[port_index] = 3;
		temp_length[port_index] = Rx_Data[port_index] + 1;
	}

	else if(portStatus[port_number] == MSG)
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d148      	bne.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
	{
		if(temp_length[port_index] > 1)
 800d550:	4b60      	ldr	r3, [pc, #384]	; (800d6d4 <HAL_UART_RxCpltCallback+0x1c4>)
 800d552:	189b      	adds	r3, r3, r2
 800d554:	7a1b      	ldrb	r3, [r3, #8]
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d800      	bhi.n	800d55e <HAL_UART_RxCpltCallback+0x4e>
 800d55c:	e07a      	b.n	800d654 <HAL_UART_RxCpltCallback+0x144>
		{
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d55e:	485e      	ldr	r0, [pc, #376]	; (800d6d8 <HAL_UART_RxCpltCallback+0x1c8>)
 800d560:	5c85      	ldrb	r5, [r0, r2]
 800d562:	4e5c      	ldr	r6, [pc, #368]	; (800d6d4 <HAL_UART_RxCpltCallback+0x1c4>)
 800d564:	5cb7      	ldrb	r7, [r6, r2]
 800d566:	00e8      	lsls	r0, r5, #3
 800d568:	1b40      	subs	r0, r0, r5
 800d56a:	00c0      	lsls	r0, r0, #3
 800d56c:	0095      	lsls	r5, r2, #2
 800d56e:	46a8      	mov	r8, r5
 800d570:	4490      	add	r8, r2
 800d572:	4645      	mov	r5, r8
 800d574:	00ed      	lsls	r5, r5, #3
 800d576:	4643      	mov	r3, r8
 800d578:	1aed      	subs	r5, r5, r3
 800d57a:	00eb      	lsls	r3, r5, #3
 800d57c:	469c      	mov	ip, r3
 800d57e:	4460      	add	r0, ip
 800d580:	4d56      	ldr	r5, [pc, #344]	; (800d6dc <HAL_UART_RxCpltCallback+0x1cc>)
 800d582:	182d      	adds	r5, r5, r0
 800d584:	55e9      	strb	r1, [r5, r7]
			temp_index[port_index]++;
 800d586:	3701      	adds	r7, #1
 800d588:	54b7      	strb	r7, [r6, r2]
			temp_length[port_index]--;
 800d58a:	18b6      	adds	r6, r6, r2
 800d58c:	9b00      	ldr	r3, [sp, #0]
 800d58e:	3b01      	subs	r3, #1
 800d590:	7233      	strb	r3, [r6, #8]
 800d592:	e026      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d594:	4b4e      	ldr	r3, [pc, #312]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d596:	5c1b      	ldrb	r3, [r3, r0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1c9      	bne.n	800d530 <HAL_UART_RxCpltCallback+0x20>
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800d59c:	2300      	movs	r3, #0
 800d59e:	e003      	b.n	800d5a8 <HAL_UART_RxCpltCallback+0x98>
 800d5a0:	4a4b      	ldr	r2, [pc, #300]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	54d1      	strb	r1, [r2, r3]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	2b05      	cmp	r3, #5
 800d5aa:	ddf9      	ble.n	800d5a0 <HAL_UART_RxCpltCallback+0x90>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800d5ac:	4b48      	ldr	r3, [pc, #288]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d5ae:	2203      	movs	r2, #3
 800d5b0:	541a      	strb	r2, [r3, r0]
		PcPort = port_number;
 800d5b2:	4b4b      	ldr	r3, [pc, #300]	; (800d6e0 <HAL_UART_RxCpltCallback+0x1d0>)
 800d5b4:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d5b6:	4b4b      	ldr	r3, [pc, #300]	; (800d6e4 <HAL_UART_RxCpltCallback+0x1d4>)
 800d5b8:	6818      	ldr	r0, [r3, #0]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	3a01      	subs	r2, #1
 800d5be:	2100      	movs	r1, #0
 800d5c0:	f002 f942 	bl	800f848 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d5c4:	4b48      	ldr	r3, [pc, #288]	; (800d6e8 <HAL_UART_RxCpltCallback+0x1d8>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d003      	beq.n	800d5d4 <HAL_UART_RxCpltCallback+0xc4>
		Activate_CLI_For_First_Time_Flag = 1;
 800d5cc:	4b46      	ldr	r3, [pc, #280]	; (800d6e8 <HAL_UART_RxCpltCallback+0x1d8>)
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	701a      	strb	r2, [r3, #0]
 800d5d2:	e006      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d5d4:	4b45      	ldr	r3, [pc, #276]	; (800d6ec <HAL_UART_RxCpltCallback+0x1dc>)
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	e7f7      	b.n	800d5cc <HAL_UART_RxCpltCallback+0xbc>
		Read_In_CLI_Task_Flag = 1;
 800d5dc:	4b43      	ldr	r3, [pc, #268]	; (800d6ec <HAL_UART_RxCpltCallback+0x1dc>)
 800d5de:	2201      	movs	r2, #1
 800d5e0:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d5e2:	0020      	movs	r0, r4
 800d5e4:	f7fd fa7e 	bl	800aae4 <GetPort>
 800d5e8:	1e41      	subs	r1, r0, #1
 800d5ea:	4b38      	ldr	r3, [pc, #224]	; (800d6cc <HAL_UART_RxCpltCallback+0x1bc>)
 800d5ec:	18c9      	adds	r1, r1, r3
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	0020      	movs	r0, r4
 800d5f2:	f005 f8dd 	bl	80127b0 <HAL_UART_Receive_DMA>
}
 800d5f6:	b003      	add	sp, #12
 800d5f8:	bcf0      	pop	{r4, r5, r6, r7}
 800d5fa:	46bb      	mov	fp, r7
 800d5fc:	46b2      	mov	sl, r6
 800d5fe:	46a9      	mov	r9, r5
 800d600:	46a0      	mov	r8, r4
 800d602:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d604:	2b00      	cmp	r3, #0
 800d606:	d199      	bne.n	800d53c <HAL_UART_RxCpltCallback+0x2c>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d608:	4b31      	ldr	r3, [pc, #196]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d60a:	2207      	movs	r2, #7
 800d60c:	541a      	strb	r2, [r3, r0]
 800d60e:	e7e8      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d610:	2b07      	cmp	r3, #7
 800d612:	d195      	bne.n	800d540 <HAL_UART_RxCpltCallback+0x30>
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800d614:	4b2e      	ldr	r3, [pc, #184]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d616:	2208      	movs	r2, #8
 800d618:	541a      	strb	r2, [r3, r0]
 800d61a:	e7e2      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800d61c:	4b2c      	ldr	r3, [pc, #176]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d61e:	2200      	movs	r2, #0
 800d620:	541a      	strb	r2, [r3, r0]
 800d622:	e7de      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
		portStatus[port_number] =MSG; // Receive length byte.
 800d624:	4b2a      	ldr	r3, [pc, #168]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d626:	2501      	movs	r5, #1
 800d628:	541d      	strb	r5, [r3, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d62a:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <HAL_UART_RxCpltCallback+0x1c8>)
 800d62c:	5c9d      	ldrb	r5, [r3, r2]
 800d62e:	482b      	ldr	r0, [pc, #172]	; (800d6dc <HAL_UART_RxCpltCallback+0x1cc>)
 800d630:	00eb      	lsls	r3, r5, #3
 800d632:	1b5b      	subs	r3, r3, r5
 800d634:	00db      	lsls	r3, r3, #3
 800d636:	0096      	lsls	r6, r2, #2
 800d638:	18b6      	adds	r6, r6, r2
 800d63a:	00f5      	lsls	r5, r6, #3
 800d63c:	1bad      	subs	r5, r5, r6
 800d63e:	00ed      	lsls	r5, r5, #3
 800d640:	195b      	adds	r3, r3, r5
 800d642:	18c0      	adds	r0, r0, r3
 800d644:	7081      	strb	r1, [r0, #2]
		temp_index[port_index] = 3;
 800d646:	4b23      	ldr	r3, [pc, #140]	; (800d6d4 <HAL_UART_RxCpltCallback+0x1c4>)
 800d648:	2003      	movs	r0, #3
 800d64a:	5498      	strb	r0, [r3, r2]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d64c:	3101      	adds	r1, #1
 800d64e:	189b      	adds	r3, r3, r2
 800d650:	7219      	strb	r1, [r3, #8]
 800d652:	e7c6      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d654:	4b20      	ldr	r3, [pc, #128]	; (800d6d8 <HAL_UART_RxCpltCallback+0x1c8>)
 800d656:	4698      	mov	r8, r3
 800d658:	5c9d      	ldrb	r5, [r3, r2]
 800d65a:	4b1e      	ldr	r3, [pc, #120]	; (800d6d4 <HAL_UART_RxCpltCallback+0x1c4>)
 800d65c:	469c      	mov	ip, r3
 800d65e:	5c9b      	ldrb	r3, [r3, r2]
 800d660:	4699      	mov	r9, r3
 800d662:	4f1e      	ldr	r7, [pc, #120]	; (800d6dc <HAL_UART_RxCpltCallback+0x1cc>)
 800d664:	00ee      	lsls	r6, r5, #3
 800d666:	1b76      	subs	r6, r6, r5
 800d668:	00f6      	lsls	r6, r6, #3
 800d66a:	9601      	str	r6, [sp, #4]
 800d66c:	0093      	lsls	r3, r2, #2
 800d66e:	469b      	mov	fp, r3
 800d670:	4493      	add	fp, r2
 800d672:	465b      	mov	r3, fp
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	465e      	mov	r6, fp
 800d678:	1b9b      	subs	r3, r3, r6
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	469a      	mov	sl, r3
 800d67e:	9e01      	ldr	r6, [sp, #4]
 800d680:	4456      	add	r6, sl
 800d682:	19bf      	adds	r7, r7, r6
 800d684:	464b      	mov	r3, r9
 800d686:	54f9      	strb	r1, [r7, r3]
			temp_index[port_index]++;
 800d688:	1c59      	adds	r1, r3, #1
 800d68a:	4663      	mov	r3, ip
 800d68c:	5499      	strb	r1, [r3, r2]
			temp_length[port_index]--;
 800d68e:	1899      	adds	r1, r3, r2
 800d690:	9b00      	ldr	r3, [sp, #0]
 800d692:	3b01      	subs	r3, #1
 800d694:	720b      	strb	r3, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800d696:	3501      	adds	r5, #1
 800d698:	b2ed      	uxtb	r5, r5
 800d69a:	4643      	mov	r3, r8
 800d69c:	549d      	strb	r5, [r3, r2]
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d69e:	2d05      	cmp	r5, #5
 800d6a0:	d00c      	beq.n	800d6bc <HAL_UART_RxCpltCallback+0x1ac>
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d6a2:	4a13      	ldr	r2, [pc, #76]	; (800d6f0 <HAL_UART_RxCpltCallback+0x1e0>)
 800d6a4:	7813      	ldrb	r3, [r2, #0]
 800d6a6:	4913      	ldr	r1, [pc, #76]	; (800d6f4 <HAL_UART_RxCpltCallback+0x1e4>)
 800d6a8:	54c8      	strb	r0, [r1, r3]
			Process_Message_Buffer_Index_End++;
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d6b0:	2b05      	cmp	r3, #5
 800d6b2:	d006      	beq.n	800d6c2 <HAL_UART_RxCpltCallback+0x1b2>
			portStatus[port_number] =FREE; // End of receiving message.
 800d6b4:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	541a      	strb	r2, [r3, r0]
 800d6ba:	e792      	b.n	800d5e2 <HAL_UART_RxCpltCallback+0xd2>
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d6bc:	2100      	movs	r1, #0
 800d6be:	5499      	strb	r1, [r3, r2]
 800d6c0:	e7ef      	b.n	800d6a2 <HAL_UART_RxCpltCallback+0x192>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d6c2:	0013      	movs	r3, r2
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	701a      	strb	r2, [r3, #0]
 800d6c8:	e7f4      	b.n	800d6b4 <HAL_UART_RxCpltCallback+0x1a4>
 800d6ca:	46c0      	nop			; (mov r8, r8)
 800d6cc:	20001b00 	.word	0x20001b00
 800d6d0:	2000095c 	.word	0x2000095c
 800d6d4:	2000278c 	.word	0x2000278c
 800d6d8:	20001494 	.word	0x20001494
 800d6dc:	20000f1c 	.word	0x20000f1c
 800d6e0:	20000958 	.word	0x20000958
 800d6e4:	20001b14 	.word	0x20001b14
 800d6e8:	200014a2 	.word	0x200014a2
 800d6ec:	200014a1 	.word	0x200014a1
 800d6f0:	20000f12 	.word	0x20000f12
 800d6f4:	20000f14 	.word	0x20000f14

0800d6f8 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d6f8:	b530      	push	{r4, r5, lr}
 800d6fa:	b083      	sub	sp, #12
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d6fc:	4909      	ldr	r1, [pc, #36]	; (800d724 <vApplicationStackOverflowHook+0x2c>)
 800d6fe:	4d0a      	ldr	r5, [pc, #40]	; (800d728 <vApplicationStackOverflowHook+0x30>)
 800d700:	7828      	ldrb	r0, [r5, #0]
 800d702:	24ff      	movs	r4, #255	; 0xff
 800d704:	9400      	str	r4, [sp, #0]
 800d706:	23ff      	movs	r3, #255	; 0xff
 800d708:	2210      	movs	r2, #16
 800d70a:	f000 fbe9 	bl	800dee0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d70e:	4b07      	ldr	r3, [pc, #28]	; (800d72c <vApplicationStackOverflowHook+0x34>)
 800d710:	6819      	ldr	r1, [r3, #0]
 800d712:	7828      	ldrb	r0, [r5, #0]
 800d714:	9400      	str	r4, [sp, #0]
 800d716:	23ff      	movs	r3, #255	; 0xff
 800d718:	220f      	movs	r2, #15
 800d71a:	f000 fbe1 	bl	800dee0 <writePxMutex>
	NVIC_SystemReset();
 800d71e:	f7ff fe15 	bl	800d34c <NVIC_SystemReset>
 800d722:	46c0      	nop			; (mov r8, r8)
 800d724:	0801c3f8 	.word	0x0801c3f8
 800d728:	20000958 	.word	0x20000958
 800d72c:	200000a0 	.word	0x200000a0

0800d730 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800d730:	b530      	push	{r4, r5, lr}
 800d732:	b083      	sub	sp, #12
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d734:	4909      	ldr	r1, [pc, #36]	; (800d75c <vApplicationMallocFailedHook+0x2c>)
 800d736:	4d0a      	ldr	r5, [pc, #40]	; (800d760 <vApplicationMallocFailedHook+0x30>)
 800d738:	7828      	ldrb	r0, [r5, #0]
 800d73a:	24ff      	movs	r4, #255	; 0xff
 800d73c:	9400      	str	r4, [sp, #0]
 800d73e:	23ff      	movs	r3, #255	; 0xff
 800d740:	2214      	movs	r2, #20
 800d742:	f000 fbcd 	bl	800dee0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d746:	4b07      	ldr	r3, [pc, #28]	; (800d764 <vApplicationMallocFailedHook+0x34>)
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	7828      	ldrb	r0, [r5, #0]
 800d74c:	9400      	str	r4, [sp, #0]
 800d74e:	23ff      	movs	r3, #255	; 0xff
 800d750:	220f      	movs	r2, #15
 800d752:	f000 fbc5 	bl	800dee0 <writePxMutex>
	NVIC_SystemReset();
 800d756:	f7ff fdf9 	bl	800d34c <NVIC_SystemReset>
 800d75a:	46c0      	nop			; (mov r8, r8)
 800d75c:	0801c40c 	.word	0x0801c40c
 800d760:	20000958 	.word	0x20000958
 800d764:	200000a0 	.word	0x200000a0

0800d768 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76a:	46d6      	mov	lr, sl
 800d76c:	464f      	mov	r7, r9
 800d76e:	4646      	mov	r6, r8
 800d770:	b5c0      	push	{r6, r7, lr}
 800d772:	b08c      	sub	sp, #48	; 0x30
 800d774:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d776:	ac03      	add	r4, sp, #12
 800d778:	4b35      	ldr	r3, [pc, #212]	; (800d850 <RTC_CalendarConfig+0xe8>)
 800d77a:	0022      	movs	r2, r4
 800d77c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d77e:	c243      	stmia	r2!, {r0, r1, r6}
 800d780:	466a      	mov	r2, sp
 800d782:	4b34      	ldr	r3, [pc, #208]	; (800d854 <RTC_CalendarConfig+0xec>)
 800d784:	cb41      	ldmia	r3!, {r0, r6}
 800d786:	c241      	stmia	r2!, {r0, r6}
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d78c:	2015      	movs	r0, #21
 800d78e:	4468      	add	r0, sp
 800d790:	f005 fca7 	bl	80130e2 <atoi>
 800d794:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800d796:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800d798:	a804      	add	r0, sp, #16
 800d79a:	f005 fca2 	bl	80130e2 <atoi>
 800d79e:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800d7a0:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d7a2:	2400      	movs	r4, #0
 800d7a4:	e001      	b.n	800d7aa <RTC_CalendarConfig+0x42>
 800d7a6:	3401      	adds	r4, #1
 800d7a8:	b2e4      	uxtb	r4, r4
 800d7aa:	2c0b      	cmp	r4, #11
 800d7ac:	d80a      	bhi.n	800d7c4 <RTC_CalendarConfig+0x5c>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d7ae:	4b2a      	ldr	r3, [pc, #168]	; (800d858 <RTC_CalendarConfig+0xf0>)
 800d7b0:	00a2      	lsls	r2, r4, #2
 800d7b2:	58d1      	ldr	r1, [r2, r3]
 800d7b4:	a803      	add	r0, sp, #12
 800d7b6:	f7f2 fca5 	bl	8000104 <strcmp>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d1f3      	bne.n	800d7a6 <RTC_CalendarConfig+0x3e>
			month = i + 1;
 800d7be:	1c65      	adds	r5, r4, #1
 800d7c0:	b2ed      	uxtb	r5, r5
 800d7c2:	e7f0      	b.n	800d7a6 <RTC_CalendarConfig+0x3e>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d7c4:	466b      	mov	r3, sp
 800d7c6:	1d98      	adds	r0, r3, #6
 800d7c8:	f005 fc8b 	bl	80130e2 <atoi>
 800d7cc:	b2c3      	uxtb	r3, r0
 800d7ce:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800d7d0:	ac03      	add	r4, sp, #12
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	469a      	mov	sl, r3
 800d7d6:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800d7d8:	466b      	mov	r3, sp
 800d7da:	1cd8      	adds	r0, r3, #3
 800d7dc:	f005 fc81 	bl	80130e2 <atoi>
 800d7e0:	b2c3      	uxtb	r3, r0
 800d7e2:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800d7e4:	4653      	mov	r3, sl
 800d7e6:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800d7e8:	4668      	mov	r0, sp
 800d7ea:	f005 fc7a 	bl	80130e2 <atoi>
 800d7ee:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d7f0:	a90b      	add	r1, sp, #44	; 0x2c
 800d7f2:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800d7f4:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d7f6:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d7fc:	4817      	ldr	r0, [pc, #92]	; (800d85c <RTC_CalendarConfig+0xf4>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	f004 fda0 	bl	8012344 <HAL_RTC_SetDate>
 800d804:	2800      	cmp	r0, #0
 800d806:	d11e      	bne.n	800d846 <RTC_CalendarConfig+0xde>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d808:	a906      	add	r1, sp, #24
 800d80a:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d80c:	464b      	mov	r3, r9
 800d80e:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d810:	4643      	mov	r3, r8
 800d812:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d814:	2300      	movs	r3, #0
 800d816:	720b      	strb	r3, [r1, #8]
 800d818:	4a11      	ldr	r2, [pc, #68]	; (800d860 <RTC_CalendarConfig+0xf8>)
 800d81a:	3018      	adds	r0, #24
 800d81c:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d81e:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d820:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d822:	480e      	ldr	r0, [pc, #56]	; (800d85c <RTC_CalendarConfig+0xf4>)
 800d824:	2200      	movs	r2, #0
 800d826:	f004 fd0f 	bl	8012248 <HAL_RTC_SetTime>
 800d82a:	1e04      	subs	r4, r0, #0
 800d82c:	d10d      	bne.n	800d84a <RTC_CalendarConfig+0xe2>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d82e:	480b      	ldr	r0, [pc, #44]	; (800d85c <RTC_CalendarConfig+0xf4>)
 800d830:	4a0c      	ldr	r2, [pc, #48]	; (800d864 <RTC_CalendarConfig+0xfc>)
 800d832:	2101      	movs	r1, #1
 800d834:	f004 fe48 	bl	80124c8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d838:	0020      	movs	r0, r4
 800d83a:	b00c      	add	sp, #48	; 0x30
 800d83c:	bce0      	pop	{r5, r6, r7}
 800d83e:	46ba      	mov	sl, r7
 800d840:	46b1      	mov	r9, r6
 800d842:	46a8      	mov	r8, r5
 800d844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d846:	24ff      	movs	r4, #255	; 0xff
 800d848:	e7f6      	b.n	800d838 <RTC_CalendarConfig+0xd0>
		return BOS_ERROR;
 800d84a:	24ff      	movs	r4, #255	; 0xff
 800d84c:	e7f4      	b.n	800d838 <RTC_CalendarConfig+0xd0>
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	08019e78 	.word	0x08019e78
 800d854:	0801c434 	.word	0x0801c434
 800d858:	20000064 	.word	0x20000064
 800d85c:	2000279c 	.word	0x2000279c
 800d860:	2000084c 	.word	0x2000084c
 800d864:	000032f2 	.word	0x000032f2

0800d868 <RTC_Init>:
{
 800d868:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d86a:	4a1d      	ldr	r2, [pc, #116]	; (800d8e0 <RTC_Init+0x78>)
 800d86c:	6a11      	ldr	r1, [r2, #32]
 800d86e:	2380      	movs	r3, #128	; 0x80
 800d870:	021b      	lsls	r3, r3, #8
 800d872:	430b      	orrs	r3, r1
 800d874:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d876:	481b      	ldr	r0, [pc, #108]	; (800d8e4 <RTC_Init+0x7c>)
 800d878:	4b1b      	ldr	r3, [pc, #108]	; (800d8e8 <RTC_Init+0x80>)
 800d87a:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d87c:	2300      	movs	r3, #0
 800d87e:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d880:	227c      	movs	r2, #124	; 0x7c
 800d882:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d884:	4a19      	ldr	r2, [pc, #100]	; (800d8ec <RTC_Init+0x84>)
 800d886:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d888:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d88a:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d88c:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d88e:	f004 fc7f 	bl	8012190 <HAL_RTC_Init>
 800d892:	1e04      	subs	r4, r0, #0
 800d894:	d121      	bne.n	800d8da <RTC_Init+0x72>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d896:	4813      	ldr	r0, [pc, #76]	; (800d8e4 <RTC_Init+0x7c>)
 800d898:	2101      	movs	r1, #1
 800d89a:	f004 fe1b 	bl	80124d4 <HAL_RTCEx_BKUPRead>
 800d89e:	4b14      	ldr	r3, [pc, #80]	; (800d8f0 <RTC_Init+0x88>)
 800d8a0:	4298      	cmp	r0, r3
 800d8a2:	d110      	bne.n	800d8c6 <RTC_Init+0x5e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d8a4:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <RTC_Init+0x78>)
 800d8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a8:	011b      	lsls	r3, r3, #4
 800d8aa:	d503      	bpl.n	800d8b4 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d8ac:	4b0d      	ldr	r3, [pc, #52]	; (800d8e4 <RTC_Init+0x7c>)
 800d8ae:	2220      	movs	r2, #32
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	5499      	strb	r1, [r3, r2]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	; (800d8e0 <RTC_Init+0x78>)
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	015b      	lsls	r3, r3, #5
 800d8ba:	d506      	bpl.n	800d8ca <RTC_Init+0x62>
			bootStatus = RESET_BOOT;
 800d8bc:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <RTC_Init+0x7c>)
 800d8be:	2220      	movs	r2, #32
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	5499      	strb	r1, [r3, r2]
 800d8c4:	e001      	b.n	800d8ca <RTC_Init+0x62>
    RTC_CalendarConfig();
 800d8c6:	f7ff ff4f 	bl	800d768 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d8ca:	4a05      	ldr	r2, [pc, #20]	; (800d8e0 <RTC_Init+0x78>)
 800d8cc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d8ce:	2380      	movs	r3, #128	; 0x80
 800d8d0:	045b      	lsls	r3, r3, #17
 800d8d2:	430b      	orrs	r3, r1
 800d8d4:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d8d6:	0020      	movs	r0, r4
 800d8d8:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d8da:	24ff      	movs	r4, #255	; 0xff
 800d8dc:	e7fb      	b.n	800d8d6 <RTC_Init+0x6e>
 800d8de:	46c0      	nop			; (mov r8, r8)
 800d8e0:	40021000 	.word	0x40021000
 800d8e4:	2000279c 	.word	0x2000279c
 800d8e8:	40002800 	.word	0x40002800
 800d8ec:	000007cf 	.word	0x000007cf
 800d8f0:	000032f2 	.word	0x000032f2

0800d8f4 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8f6:	46c6      	mov	lr, r8
 800d8f8:	b500      	push	{lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	ac0c      	add	r4, sp, #48	; 0x30
 800d8fe:	7827      	ldrb	r7, [r4, #0]
 800d900:	ac0d      	add	r4, sp, #52	; 0x34
 800d902:	7824      	ldrb	r4, [r4, #0]
 800d904:	46a0      	mov	r8, r4
 800d906:	ac0e      	add	r4, sp, #56	; 0x38
 800d908:	7825      	ldrb	r5, [r4, #0]
 800d90a:	ac0f      	add	r4, sp, #60	; 0x3c
 800d90c:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d90e:	3230      	adds	r2, #48	; 0x30
 800d910:	ac05      	add	r4, sp, #20
 800d912:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d914:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d916:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d918:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d91a:	4823      	ldr	r0, [pc, #140]	; (800d9a8 <BOS_CalendarConfig+0xb4>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	0021      	movs	r1, r4
 800d920:	f004 fd10 	bl	8012344 <HAL_RTC_SetDate>
 800d924:	2800      	cmp	r0, #0
 800d926:	d13a      	bne.n	800d99e <BOS_CalendarConfig+0xaa>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d928:	466b      	mov	r3, sp
 800d92a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d92c:	4642      	mov	r2, r8
 800d92e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d930:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d932:	2300      	movs	r3, #0
 800d934:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800d936:	2d0c      	cmp	r5, #12
 800d938:	d902      	bls.n	800d940 <BOS_CalendarConfig+0x4c>
 800d93a:	4b1c      	ldr	r3, [pc, #112]	; (800d9ac <BOS_CalendarConfig+0xb8>)
 800d93c:	2218      	movs	r2, #24
 800d93e:	735a      	strb	r2, [r3, #13]
	
	if (AMPM == RTC_AM) {
 800d940:	2e01      	cmp	r6, #1
 800d942:	d01e      	beq.n	800d982 <BOS_CalendarConfig+0x8e>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d944:	2e02      	cmp	r6, #2
 800d946:	d023      	beq.n	800d990 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d948:	4b18      	ldr	r3, [pc, #96]	; (800d9ac <BOS_CalendarConfig+0xb8>)
 800d94a:	2218      	movs	r2, #24
 800d94c:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d94e:	4816      	ldr	r0, [pc, #88]	; (800d9a8 <BOS_CalendarConfig+0xb4>)
 800d950:	2200      	movs	r2, #0
 800d952:	4669      	mov	r1, sp
 800d954:	f004 fc78 	bl	8012248 <HAL_RTC_SetTime>
 800d958:	1e04      	subs	r4, r0, #0
 800d95a:	d122      	bne.n	800d9a2 <BOS_CalendarConfig+0xae>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d95c:	4a13      	ldr	r2, [pc, #76]	; (800d9ac <BOS_CalendarConfig+0xb8>)
 800d95e:	7b53      	ldrb	r3, [r2, #13]
 800d960:	021b      	lsls	r3, r3, #8
 800d962:	7911      	ldrb	r1, [r2, #4]
 800d964:	4319      	orrs	r1, r3
 800d966:	208d      	movs	r0, #141	; 0x8d
 800d968:	0040      	lsls	r0, r0, #1
 800d96a:	f7fe f91b 	bl	800bba4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d96e:	480e      	ldr	r0, [pc, #56]	; (800d9a8 <BOS_CalendarConfig+0xb4>)
 800d970:	4a0f      	ldr	r2, [pc, #60]	; (800d9b0 <BOS_CalendarConfig+0xbc>)
 800d972:	2101      	movs	r1, #1
 800d974:	f004 fda8 	bl	80124c8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d978:	0020      	movs	r0, r4
 800d97a:	b006      	add	sp, #24
 800d97c:	bc80      	pop	{r7}
 800d97e:	46b8      	mov	r8, r7
 800d980:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d982:	2300      	movs	r3, #0
 800d984:	466a      	mov	r2, sp
 800d986:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d988:	4b08      	ldr	r3, [pc, #32]	; (800d9ac <BOS_CalendarConfig+0xb8>)
 800d98a:	220c      	movs	r2, #12
 800d98c:	735a      	strb	r2, [r3, #13]
 800d98e:	e7de      	b.n	800d94e <BOS_CalendarConfig+0x5a>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d990:	2340      	movs	r3, #64	; 0x40
 800d992:	466a      	mov	r2, sp
 800d994:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d996:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <BOS_CalendarConfig+0xb8>)
 800d998:	220c      	movs	r2, #12
 800d99a:	735a      	strb	r2, [r3, #13]
 800d99c:	e7d7      	b.n	800d94e <BOS_CalendarConfig+0x5a>
		return BOS_ERROR;
 800d99e:	24ff      	movs	r4, #255	; 0xff
 800d9a0:	e7ea      	b.n	800d978 <BOS_CalendarConfig+0x84>
		return BOS_ERROR;
 800d9a2:	24ff      	movs	r4, #255	; 0xff
 800d9a4:	e7e8      	b.n	800d978 <BOS_CalendarConfig+0x84>
 800d9a6:	46c0      	nop			; (mov r8, r8)
 800d9a8:	2000279c 	.word	0x2000279c
 800d9ac:	2000084c 	.word	0x2000084c
 800d9b0:	000032f2 	.word	0x000032f2

0800d9b4 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d9b4:	b530      	push	{r4, r5, lr}
 800d9b6:	b087      	sub	sp, #28
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d9b8:	4d15      	ldr	r5, [pc, #84]	; (800da10 <GetTimeDate+0x5c>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4669      	mov	r1, sp
 800d9be:	0028      	movs	r0, r5
 800d9c0:	f004 fd36 	bl	8012430 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d9c4:	ac05      	add	r4, sp, #20
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	0021      	movs	r1, r4
 800d9ca:	0028      	movs	r0, r5
 800d9cc:	f004 fd58 	bl	8012480 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d9d0:	466b      	mov	r3, sp
 800d9d2:	7a1a      	ldrb	r2, [r3, #8]
 800d9d4:	09d2      	lsrs	r2, r2, #7
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	4b0e      	ldr	r3, [pc, #56]	; (800da14 <GetTimeDate+0x60>)
 800d9da:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d9dc:	9a01      	ldr	r2, [sp, #4]
 800d9de:	0852      	lsrs	r2, r2, #1
 800d9e0:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d9e2:	466a      	mov	r2, sp
 800d9e4:	7892      	ldrb	r2, [r2, #2]
 800d9e6:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d9e8:	466a      	mov	r2, sp
 800d9ea:	7852      	ldrb	r2, [r2, #1]
 800d9ec:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d9ee:	466a      	mov	r2, sp
 800d9f0:	7812      	ldrb	r2, [r2, #0]
 800d9f2:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d9f4:	78a2      	ldrb	r2, [r4, #2]
 800d9f6:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d9f8:	7862      	ldrb	r2, [r4, #1]
 800d9fa:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d9fc:	7822      	ldrb	r2, [r4, #0]
 800d9fe:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800da00:	78e2      	ldrb	r2, [r4, #3]
 800da02:	21fa      	movs	r1, #250	; 0xfa
 800da04:	00c9      	lsls	r1, r1, #3
 800da06:	468c      	mov	ip, r1
 800da08:	4462      	add	r2, ip
 800da0a:	831a      	strh	r2, [r3, #24]
}
 800da0c:	b007      	add	sp, #28
 800da0e:	bd30      	pop	{r4, r5, pc}
 800da10:	2000279c 	.word	0x2000279c
 800da14:	2000084c 	.word	0x2000084c

0800da18 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800da1c:	4b12      	ldr	r3, [pc, #72]	; (800da68 <TIM_USEC_Init+0x50>)
 800da1e:	69da      	ldr	r2, [r3, #28]
 800da20:	2180      	movs	r1, #128	; 0x80
 800da22:	0049      	lsls	r1, r1, #1
 800da24:	430a      	orrs	r2, r1
 800da26:	61da      	str	r2, [r3, #28]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	400b      	ands	r3, r1
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800da30:	4c0e      	ldr	r4, [pc, #56]	; (800da6c <TIM_USEC_Init+0x54>)
 800da32:	4b0f      	ldr	r3, [pc, #60]	; (800da70 <TIM_USEC_Init+0x58>)
 800da34:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800da36:	f004 facb 	bl	8011fd0 <HAL_RCC_GetPCLK1Freq>
 800da3a:	490e      	ldr	r1, [pc, #56]	; (800da74 <TIM_USEC_Init+0x5c>)
 800da3c:	f7f2 fb88 	bl	8000150 <__udivsi3>
 800da40:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da42:	2500      	movs	r5, #0
 800da44:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800da46:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <TIM_USEC_Init+0x60>)
 800da48:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800da4a:	0020      	movs	r0, r4
 800da4c:	f004 fda4 	bl	8012598 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da50:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da52:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800da54:	a902      	add	r1, sp, #8
 800da56:	0020      	movs	r0, r4
 800da58:	f004 fdb8 	bl	80125cc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800da5c:	0020      	movs	r0, r4
 800da5e:	f004 fd40 	bl	80124e2 <HAL_TIM_Base_Start>
}
 800da62:	b005      	add	sp, #20
 800da64:	bd30      	pop	{r4, r5, pc}
 800da66:	46c0      	nop			; (mov r8, r8)
 800da68:	40021000 	.word	0x40021000
 800da6c:	200027c0 	.word	0x200027c0
 800da70:	40002000 	.word	0x40002000
 800da74:	000f4240 	.word	0x000f4240
 800da78:	0000ffff 	.word	0x0000ffff

0800da7c <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800da7c:	b530      	push	{r4, r5, lr}
 800da7e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800da80:	4b13      	ldr	r3, [pc, #76]	; (800dad0 <TIM_MSEC_Init+0x54>)
 800da82:	699a      	ldr	r2, [r3, #24]
 800da84:	2180      	movs	r1, #128	; 0x80
 800da86:	0249      	lsls	r1, r1, #9
 800da88:	430a      	orrs	r2, r1
 800da8a:	619a      	str	r2, [r3, #24]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	400b      	ands	r3, r1
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800da94:	4c0f      	ldr	r4, [pc, #60]	; (800dad4 <TIM_MSEC_Init+0x58>)
 800da96:	4b10      	ldr	r3, [pc, #64]	; (800dad8 <TIM_MSEC_Init+0x5c>)
 800da98:	63e3      	str	r3, [r4, #60]	; 0x3c
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800da9a:	f004 fa99 	bl	8011fd0 <HAL_RCC_GetPCLK1Freq>
 800da9e:	21fa      	movs	r1, #250	; 0xfa
 800daa0:	0089      	lsls	r1, r1, #2
 800daa2:	f7f2 fb55 	bl	8000150 <__udivsi3>
 800daa6:	6420      	str	r0, [r4, #64]	; 0x40
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800daa8:	2500      	movs	r5, #0
 800daaa:	6465      	str	r5, [r4, #68]	; 0x44
  htim15.Init.Period = 0xFFFF;
 800daac:	4b0b      	ldr	r3, [pc, #44]	; (800dadc <TIM_MSEC_Init+0x60>)
 800daae:	64a3      	str	r3, [r4, #72]	; 0x48
  HAL_TIM_Base_Init(&htim15);
 800dab0:	343c      	adds	r4, #60	; 0x3c
 800dab2:	0020      	movs	r0, r4
 800dab4:	f004 fd70 	bl	8012598 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dab8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800daba:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dabc:	a902      	add	r1, sp, #8
 800dabe:	0020      	movs	r0, r4
 800dac0:	f004 fd84 	bl	80125cc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dac4:	0020      	movs	r0, r4
 800dac6:	f004 fd0c 	bl	80124e2 <HAL_TIM_Base_Start>
}
 800daca:	b005      	add	sp, #20
 800dacc:	bd30      	pop	{r4, r5, pc}
 800dace:	46c0      	nop			; (mov r8, r8)
 800dad0:	40021000 	.word	0x40021000
 800dad4:	200027c0 	.word	0x200027c0
 800dad8:	40014000 	.word	0x40014000
 800dadc:	0000ffff 	.word	0x0000ffff

0800dae0 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dae0:	b510      	push	{r4, lr}
 800dae2:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800dae4:	f002 f92a 	bl	800fd3c <vPortEnterCritical>
	
	if (Delay)
 800dae8:	2c00      	cmp	r4, #0
 800daea:	d006      	beq.n	800dafa <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800daec:	4b04      	ldr	r3, [pc, #16]	; (800db00 <StartMicroDelay+0x20>)
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800daf2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800daf4:	1a5b      	subs	r3, r3, r1
 800daf6:	42a3      	cmp	r3, r4
 800daf8:	d9fb      	bls.n	800daf2 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dafa:	f002 f92b 	bl	800fd54 <vPortExitCritical>
}
 800dafe:	bd10      	pop	{r4, pc}
 800db00:	200027c0 	.word	0x200027c0

0800db04 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800db04:	b510      	push	{r4, lr}
 800db06:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800db08:	f002 f918 	bl	800fd3c <vPortEnterCritical>
	
	if (Delay)
 800db0c:	2c00      	cmp	r4, #0
 800db0e:	d006      	beq.n	800db1e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800db10:	4b04      	ldr	r3, [pc, #16]	; (800db24 <StartMilliDelay+0x20>)
 800db12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db14:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800db16:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800db18:	1a5b      	subs	r3, r3, r1
 800db1a:	42a3      	cmp	r3, r4
 800db1c:	d9fb      	bls.n	800db16 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db1e:	f002 f919 	bl	800fd54 <vPortExitCritical>
}
 800db22:	bd10      	pop	{r4, pc}
 800db24:	200027c0 	.word	0x200027c0

0800db28 <MX_USART1_UART_Init>:
/* USART1 init function */
DMA_HandleTypeDef hdma_usart1_rx;
#ifdef _Usart1

void MX_USART1_UART_Init(void)
{
 800db28:	b510      	push	{r4, lr}
	  huart1.Instance = USART1;
 800db2a:	4809      	ldr	r0, [pc, #36]	; (800db50 <MX_USART1_UART_Init+0x28>)
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <MX_USART1_UART_Init+0x2c>)
 800db2e:	6003      	str	r3, [r0, #0]
	  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db30:	23e1      	movs	r3, #225	; 0xe1
 800db32:	031b      	lsls	r3, r3, #12
 800db34:	6043      	str	r3, [r0, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800db36:	2300      	movs	r3, #0
 800db38:	6083      	str	r3, [r0, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800db3a:	60c3      	str	r3, [r0, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800db3c:	6103      	str	r3, [r0, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800db3e:	220c      	movs	r2, #12
 800db40:	6142      	str	r2, [r0, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db42:	6183      	str	r3, [r0, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800db44:	61c3      	str	r3, [r0, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800db46:	6203      	str	r3, [r0, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db48:	6243      	str	r3, [r0, #36]	; 0x24
	  HAL_UART_Init(&huart1);
 800db4a:	f005 f969 	bl	8012e20 <HAL_UART_Init>
}
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	20001ed8 	.word	0x20001ed8
 800db54:	40013800 	.word	0x40013800

0800db58 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800db58:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800db5a:	4809      	ldr	r0, [pc, #36]	; (800db80 <MX_USART2_UART_Init+0x28>)
 800db5c:	4b09      	ldr	r3, [pc, #36]	; (800db84 <MX_USART2_UART_Init+0x2c>)
 800db5e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db60:	23e1      	movs	r3, #225	; 0xe1
 800db62:	031b      	lsls	r3, r3, #12
 800db64:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800db66:	2300      	movs	r3, #0
 800db68:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800db6a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800db6c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800db6e:	220c      	movs	r2, #12
 800db70:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db72:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800db74:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db76:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db78:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800db7a:	f005 f951 	bl	8012e20 <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800db7e:	bd10      	pop	{r4, pc}
 800db80:	20002214 	.word	0x20002214
 800db84:	40004400 	.word	0x40004400

0800db88 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800db88:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800db8a:	4809      	ldr	r0, [pc, #36]	; (800dbb0 <MX_USART3_UART_Init+0x28>)
 800db8c:	4b09      	ldr	r3, [pc, #36]	; (800dbb4 <MX_USART3_UART_Init+0x2c>)
 800db8e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db90:	23e1      	movs	r3, #225	; 0xe1
 800db92:	031b      	lsls	r3, r3, #12
 800db94:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800db96:	2300      	movs	r3, #0
 800db98:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800db9a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800db9c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800db9e:	220c      	movs	r2, #12
 800dba0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dba2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dba4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dba6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dba8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dbaa:	f005 f939 	bl	8012e20 <HAL_UART_Init>
	#if _P5pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dbae:	bd10      	pop	{r4, pc}
 800dbb0:	200021a4 	.word	0x200021a4
 800dbb4:	40004800 	.word	0x40004800

0800dbb8 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dbb8:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dbba:	4809      	ldr	r0, [pc, #36]	; (800dbe0 <MX_USART4_UART_Init+0x28>)
 800dbbc:	4b09      	ldr	r3, [pc, #36]	; (800dbe4 <MX_USART4_UART_Init+0x2c>)
 800dbbe:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbc0:	23e1      	movs	r3, #225	; 0xe1
 800dbc2:	031b      	lsls	r3, r3, #12
 800dbc4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dbca:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dbcc:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dbce:	220c      	movs	r2, #12
 800dbd0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbd2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbd4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbd6:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbd8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dbda:	f005 f921 	bl	8012e20 <HAL_UART_Init>
	#if _P4pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800dbde:	bd10      	pop	{r4, pc}
 800dbe0:	20002134 	.word	0x20002134
 800dbe4:	40004c00 	.word	0x40004c00

0800dbe8 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dbe8:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dbea:	4809      	ldr	r0, [pc, #36]	; (800dc10 <MX_USART5_UART_Init+0x28>)
 800dbec:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <MX_USART5_UART_Init+0x2c>)
 800dbee:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbf0:	23e1      	movs	r3, #225	; 0xe1
 800dbf2:	031b      	lsls	r3, r3, #12
 800dbf4:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dbfa:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dbfc:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dbfe:	220c      	movs	r2, #12
 800dc00:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc02:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc04:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc06:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc08:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dc0a:	f005 f909 	bl	8012e20 <HAL_UART_Init>
	#if _P3pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800dc0e:	bd10      	pop	{r4, pc}
 800dc10:	200020c4 	.word	0x200020c4
 800dc14:	40005000 	.word	0x40005000

0800dc18 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800dc18:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800dc1a:	4809      	ldr	r0, [pc, #36]	; (800dc40 <MX_USART6_UART_Init+0x28>)
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <MX_USART6_UART_Init+0x2c>)
 800dc1e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc20:	23e1      	movs	r3, #225	; 0xe1
 800dc22:	031b      	lsls	r3, r3, #12
 800dc24:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dc26:	2300      	movs	r3, #0
 800dc28:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800dc2a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800dc2c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dc2e:	220c      	movs	r2, #12
 800dc30:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc32:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc34:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc36:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc38:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800dc3a:	f005 f8f1 	bl	8012e20 <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800dc3e:	bd10      	pop	{r4, pc}
 800dc40:	20002054 	.word	0x20002054
 800dc44:	40011400 	.word	0x40011400

0800dc48 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc4a:	46c6      	mov	lr, r8
 800dc4c:	b500      	push	{lr}
 800dc4e:	b090      	sub	sp, #64	; 0x40
 800dc50:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800dc52:	6803      	ldr	r3, [r0, #0]
 800dc54:	4a88      	ldr	r2, [pc, #544]	; (800de78 <HAL_UART_MspInit+0x230>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d012      	beq.n	800dc80 <HAL_UART_MspInit+0x38>
	    	__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);


	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
  }
  else if(huart->Instance==USART2)
 800dc5a:	4a88      	ldr	r2, [pc, #544]	; (800de7c <HAL_UART_MspInit+0x234>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d053      	beq.n	800dd08 <HAL_UART_MspInit+0xc0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800dc60:	4a87      	ldr	r2, [pc, #540]	; (800de80 <HAL_UART_MspInit+0x238>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d100      	bne.n	800dc68 <HAL_UART_MspInit+0x20>
 800dc66:	e07b      	b.n	800dd60 <HAL_UART_MspInit+0x118>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800dc68:	4a86      	ldr	r2, [pc, #536]	; (800de84 <HAL_UART_MspInit+0x23c>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d100      	bne.n	800dc70 <HAL_UART_MspInit+0x28>
 800dc6e:	e0a7      	b.n	800ddc0 <HAL_UART_MspInit+0x178>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800dc70:	4a85      	ldr	r2, [pc, #532]	; (800de88 <HAL_UART_MspInit+0x240>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d100      	bne.n	800dc78 <HAL_UART_MspInit+0x30>
 800dc76:	e0d0      	b.n	800de1a <HAL_UART_MspInit+0x1d2>
    /* Peripheral interrupt init*/
//    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
//    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
//	#endif
//  }
}
 800dc78:	b010      	add	sp, #64	; 0x40
 800dc7a:	bc80      	pop	{r7}
 800dc7c:	46b8      	mov	r8, r7
 800dc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc80:	2214      	movs	r2, #20
 800dc82:	2100      	movs	r1, #0
 800dc84:	a806      	add	r0, sp, #24
 800dc86:	f006 fe4e 	bl	8014926 <memset>
	    __HAL_RCC_USART1_CLK_ENABLE();
 800dc8a:	4b80      	ldr	r3, [pc, #512]	; (800de8c <HAL_UART_MspInit+0x244>)
 800dc8c:	699a      	ldr	r2, [r3, #24]
 800dc8e:	2180      	movs	r1, #128	; 0x80
 800dc90:	01c9      	lsls	r1, r1, #7
 800dc92:	430a      	orrs	r2, r1
 800dc94:	619a      	str	r2, [r3, #24]
 800dc96:	699a      	ldr	r2, [r3, #24]
 800dc98:	400a      	ands	r2, r1
 800dc9a:	9201      	str	r2, [sp, #4]
 800dc9c:	9a01      	ldr	r2, [sp, #4]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc9e:	695a      	ldr	r2, [r3, #20]
 800dca0:	2180      	movs	r1, #128	; 0x80
 800dca2:	0289      	lsls	r1, r1, #10
 800dca4:	430a      	orrs	r2, r1
 800dca6:	615a      	str	r2, [r3, #20]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	400b      	ands	r3, r1
 800dcac:	9302      	str	r3, [sp, #8]
 800dcae:	9b02      	ldr	r3, [sp, #8]
	    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800dcb0:	23c0      	movs	r3, #192	; 0xc0
 800dcb2:	00db      	lsls	r3, r3, #3
 800dcb4:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	9307      	str	r3, [sp, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcba:	3301      	adds	r3, #1
 800dcbc:	9309      	str	r3, [sp, #36]	; 0x24
	    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800dcbe:	3b02      	subs	r3, #2
 800dcc0:	930a      	str	r3, [sp, #40]	; 0x28
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcc2:	2090      	movs	r0, #144	; 0x90
 800dcc4:	a906      	add	r1, sp, #24
 800dcc6:	05c0      	lsls	r0, r0, #23
 800dcc8:	f003 fbec 	bl	80114a4 <HAL_GPIO_Init>
	    hdma_usart1_rx.Instance = DMA2_Channel3;
 800dccc:	4d70      	ldr	r5, [pc, #448]	; (800de90 <HAL_UART_MspInit+0x248>)
 800dcce:	4b71      	ldr	r3, [pc, #452]	; (800de94 <HAL_UART_MspInit+0x24c>)
 800dcd0:	602b      	str	r3, [r5, #0]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	606b      	str	r3, [r5, #4]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dcd6:	60ab      	str	r3, [r5, #8]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800dcd8:	2280      	movs	r2, #128	; 0x80
 800dcda:	60ea      	str	r2, [r5, #12]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dcdc:	612b      	str	r3, [r5, #16]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dcde:	616b      	str	r3, [r5, #20]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800dce0:	3a60      	subs	r2, #96	; 0x60
 800dce2:	61aa      	str	r2, [r5, #24]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800dce4:	61eb      	str	r3, [r5, #28]
	    HAL_DMA_Init(&hdma_usart1_rx);
 800dce6:	0028      	movs	r0, r5
 800dce8:	f002 fe04 	bl	80108f4 <HAL_DMA_Init>
	    	__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
 800dcec:	4a6a      	ldr	r2, [pc, #424]	; (800de98 <HAL_UART_MspInit+0x250>)
 800dcee:	23a8      	movs	r3, #168	; 0xa8
 800dcf0:	58d1      	ldr	r1, [r2, r3]
 800dcf2:	486a      	ldr	r0, [pc, #424]	; (800de9c <HAL_UART_MspInit+0x254>)
 800dcf4:	4001      	ands	r1, r0
 800dcf6:	50d1      	str	r1, [r2, r3]
 800dcf8:	58d0      	ldr	r0, [r2, r3]
 800dcfa:	2180      	movs	r1, #128	; 0x80
 800dcfc:	0109      	lsls	r1, r1, #4
 800dcfe:	4301      	orrs	r1, r0
 800dd00:	50d1      	str	r1, [r2, r3]
	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800dd02:	6665      	str	r5, [r4, #100]	; 0x64
 800dd04:	626c      	str	r4, [r5, #36]	; 0x24
 800dd06:	e7b7      	b.n	800dc78 <HAL_UART_MspInit+0x30>
    __USART2_CLK_ENABLE();
 800dd08:	4b60      	ldr	r3, [pc, #384]	; (800de8c <HAL_UART_MspInit+0x244>)
 800dd0a:	69da      	ldr	r2, [r3, #28]
 800dd0c:	2180      	movs	r1, #128	; 0x80
 800dd0e:	0289      	lsls	r1, r1, #10
 800dd10:	430a      	orrs	r2, r1
 800dd12:	61da      	str	r2, [r3, #28]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	400b      	ands	r3, r1
 800dd18:	9303      	str	r3, [sp, #12]
 800dd1a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dd1c:	2304      	movs	r3, #4
 800dd1e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd20:	2702      	movs	r7, #2
 800dd22:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd24:	2401      	movs	r4, #1
 800dd26:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd28:	2603      	movs	r6, #3
 800dd2a:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dd2c:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dd2e:	2590      	movs	r5, #144	; 0x90
 800dd30:	05ed      	lsls	r5, r5, #23
 800dd32:	a90b      	add	r1, sp, #44	; 0x2c
 800dd34:	0028      	movs	r0, r5
 800dd36:	f003 fbb5 	bl	80114a4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dd3a:	2308      	movs	r3, #8
 800dd3c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd3e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd40:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd42:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART2_AF;
 800dd44:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dd46:	a90b      	add	r1, sp, #44	; 0x2c
 800dd48:	0028      	movs	r0, r5
 800dd4a:	f003 fbab 	bl	80114a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2101      	movs	r1, #1
 800dd52:	201c      	movs	r0, #28
 800dd54:	f002 fc2c 	bl	80105b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dd58:	201c      	movs	r0, #28
 800dd5a:	f002 fc59 	bl	8010610 <HAL_NVIC_EnableIRQ>
 800dd5e:	e78b      	b.n	800dc78 <HAL_UART_MspInit+0x30>
    __USART3_CLK_ENABLE();
 800dd60:	4b4a      	ldr	r3, [pc, #296]	; (800de8c <HAL_UART_MspInit+0x244>)
 800dd62:	69da      	ldr	r2, [r3, #28]
 800dd64:	2180      	movs	r1, #128	; 0x80
 800dd66:	02c9      	lsls	r1, r1, #11
 800dd68:	430a      	orrs	r2, r1
 800dd6a:	61da      	str	r2, [r3, #28]
 800dd6c:	69db      	ldr	r3, [r3, #28]
 800dd6e:	400b      	ands	r3, r1
 800dd70:	9304      	str	r3, [sp, #16]
 800dd72:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800dd74:	2380      	movs	r3, #128	; 0x80
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	4698      	mov	r8, r3
 800dd7e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd80:	2701      	movs	r7, #1
 800dd82:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd84:	2603      	movs	r6, #3
 800dd86:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART3_AF;	
 800dd88:	2504      	movs	r5, #4
 800dd8a:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800dd8c:	4c44      	ldr	r4, [pc, #272]	; (800dea0 <HAL_UART_MspInit+0x258>)
 800dd8e:	a90b      	add	r1, sp, #44	; 0x2c
 800dd90:	0020      	movs	r0, r4
 800dd92:	f003 fb87 	bl	80114a4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dd96:	2380      	movs	r3, #128	; 0x80
 800dd98:	011b      	lsls	r3, r3, #4
 800dd9a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd9c:	4643      	mov	r3, r8
 800dd9e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dda0:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dda2:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART3_AF;
 800dda4:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dda6:	a90b      	add	r1, sp, #44	; 0x2c
 800dda8:	0020      	movs	r0, r4
 800ddaa:	f003 fb7b 	bl	80114a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	201d      	movs	r0, #29
 800ddb4:	f002 fbfc 	bl	80105b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ddb8:	201d      	movs	r0, #29
 800ddba:	f002 fc29 	bl	8010610 <HAL_NVIC_EnableIRQ>
 800ddbe:	e75b      	b.n	800dc78 <HAL_UART_MspInit+0x30>
    __USART4_CLK_ENABLE();
 800ddc0:	4b32      	ldr	r3, [pc, #200]	; (800de8c <HAL_UART_MspInit+0x244>)
 800ddc2:	69da      	ldr	r2, [r3, #28]
 800ddc4:	2180      	movs	r1, #128	; 0x80
 800ddc6:	0309      	lsls	r1, r1, #12
 800ddc8:	430a      	orrs	r2, r1
 800ddca:	61da      	str	r2, [r3, #28]
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	400b      	ands	r3, r1
 800ddd0:	9305      	str	r3, [sp, #20]
 800ddd2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800ddd4:	2401      	movs	r4, #1
 800ddd6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddd8:	2502      	movs	r5, #2
 800ddda:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dddc:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddde:	2303      	movs	r3, #3
 800dde0:	4698      	mov	r8, r3
 800dde2:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART4_AF;	
 800dde4:	2704      	movs	r7, #4
 800dde6:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800dde8:	2690      	movs	r6, #144	; 0x90
 800ddea:	05f6      	lsls	r6, r6, #23
 800ddec:	a90b      	add	r1, sp, #44	; 0x2c
 800ddee:	0030      	movs	r0, r6
 800ddf0:	f003 fb58 	bl	80114a4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800ddf4:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddf6:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddf8:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddfa:	4643      	mov	r3, r8
 800ddfc:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART4_AF;
 800ddfe:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800de00:	a90b      	add	r1, sp, #44	; 0x2c
 800de02:	0030      	movs	r0, r6
 800de04:	f003 fb4e 	bl	80114a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de08:	2200      	movs	r2, #0
 800de0a:	2101      	movs	r1, #1
 800de0c:	201d      	movs	r0, #29
 800de0e:	f002 fbcf 	bl	80105b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de12:	201d      	movs	r0, #29
 800de14:	f002 fbfc 	bl	8010610 <HAL_NVIC_EnableIRQ>
 800de18:	e72e      	b.n	800dc78 <HAL_UART_MspInit+0x30>
    __USART5_CLK_ENABLE();
 800de1a:	4b1c      	ldr	r3, [pc, #112]	; (800de8c <HAL_UART_MspInit+0x244>)
 800de1c:	69da      	ldr	r2, [r3, #28]
 800de1e:	2180      	movs	r1, #128	; 0x80
 800de20:	0349      	lsls	r1, r1, #13
 800de22:	430a      	orrs	r2, r1
 800de24:	61da      	str	r2, [r3, #28]
 800de26:	69db      	ldr	r3, [r3, #28]
 800de28:	400b      	ands	r3, r1
 800de2a:	9306      	str	r3, [sp, #24]
 800de2c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800de2e:	2308      	movs	r3, #8
 800de30:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de32:	3b06      	subs	r3, #6
 800de34:	4698      	mov	r8, r3
 800de36:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de38:	2701      	movs	r7, #1
 800de3a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de3c:	2603      	movs	r6, #3
 800de3e:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART5_AF;	
 800de40:	2504      	movs	r5, #4
 800de42:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800de44:	4c16      	ldr	r4, [pc, #88]	; (800dea0 <HAL_UART_MspInit+0x258>)
 800de46:	a90b      	add	r1, sp, #44	; 0x2c
 800de48:	0020      	movs	r0, r4
 800de4a:	f003 fb2b 	bl	80114a4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800de4e:	2310      	movs	r3, #16
 800de50:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de52:	4643      	mov	r3, r8
 800de54:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de56:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de58:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART5_AF;
 800de5a:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800de5c:	a90b      	add	r1, sp, #44	; 0x2c
 800de5e:	0020      	movs	r0, r4
 800de60:	f003 fb20 	bl	80114a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de64:	2200      	movs	r2, #0
 800de66:	2101      	movs	r1, #1
 800de68:	201d      	movs	r0, #29
 800de6a:	f002 fba1 	bl	80105b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de6e:	201d      	movs	r0, #29
 800de70:	f002 fbce 	bl	8010610 <HAL_NVIC_EnableIRQ>
}
 800de74:	e700      	b.n	800dc78 <HAL_UART_MspInit+0x30>
 800de76:	46c0      	nop			; (mov r8, r8)
 800de78:	40013800 	.word	0x40013800
 800de7c:	40004400 	.word	0x40004400
 800de80:	40004800 	.word	0x40004800
 800de84:	40004c00 	.word	0x40004c00
 800de88:	40005000 	.word	0x40005000
 800de8c:	40021000 	.word	0x40021000
 800de90:	20002838 	.word	0x20002838
 800de94:	40020430 	.word	0x40020430
 800de98:	40020400 	.word	0x40020400
 800de9c:	fffff0ff 	.word	0xfffff0ff
 800dea0:	48000400 	.word	0x48000400

0800dea4 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800dea4:	2805      	cmp	r0, #5
 800dea6:	d80b      	bhi.n	800dec0 <GetUart+0x1c>
 800dea8:	0080      	lsls	r0, r0, #2
 800deaa:	4b07      	ldr	r3, [pc, #28]	; (800dec8 <GetUart+0x24>)
 800deac:	581b      	ldr	r3, [r3, r0]
 800deae:	469f      	mov	pc, r3
 800deb0:	4806      	ldr	r0, [pc, #24]	; (800decc <GetUart+0x28>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800deb2:	4770      	bx	lr
			return P3uart;
 800deb4:	4806      	ldr	r0, [pc, #24]	; (800ded0 <GetUart+0x2c>)
 800deb6:	e7fc      	b.n	800deb2 <GetUart+0xe>
			return P4uart;
 800deb8:	4806      	ldr	r0, [pc, #24]	; (800ded4 <GetUart+0x30>)
 800deba:	e7fa      	b.n	800deb2 <GetUart+0xe>
			return P5uart;
 800debc:	4806      	ldr	r0, [pc, #24]	; (800ded8 <GetUart+0x34>)
 800debe:	e7f8      	b.n	800deb2 <GetUart+0xe>
			return 0;
 800dec0:	2000      	movs	r0, #0
 800dec2:	e7f6      	b.n	800deb2 <GetUart+0xe>
			return P2uart;
 800dec4:	4805      	ldr	r0, [pc, #20]	; (800dedc <GetUart+0x38>)
 800dec6:	e7f4      	b.n	800deb2 <GetUart+0xe>
 800dec8:	08019cd0 	.word	0x08019cd0
 800decc:	20002214 	.word	0x20002214
 800ded0:	200021a4 	.word	0x200021a4
 800ded4:	20002134 	.word	0x20002134
 800ded8:	200020c4 	.word	0x200020c4
 800dedc:	20002054 	.word	0x20002054

0800dee0 <writePxMutex>:
{
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	46c6      	mov	lr, r8
 800dee4:	b500      	push	{lr}
 800dee6:	0006      	movs	r6, r0
 800dee8:	000f      	movs	r7, r1
 800deea:	4690      	mov	r8, r2
 800deec:	001c      	movs	r4, r3
	if (GetUart(port) != NULL) {
 800deee:	f7ff ffd9 	bl	800dea4 <GetUart>
 800def2:	1e05      	subs	r5, r0, #0
 800def4:	d01c      	beq.n	800df30 <writePxMutex+0x50>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800def6:	4b11      	ldr	r3, [pc, #68]	; (800df3c <writePxMutex+0x5c>)
 800def8:	00b2      	lsls	r2, r6, #2
 800defa:	58d0      	ldr	r0, [r2, r3]
 800defc:	0021      	movs	r1, r4
 800defe:	f000 f997 	bl	800e230 <osSemaphoreWait>
 800df02:	2800      	cmp	r0, #0
 800df04:	d012      	beq.n	800df2c <writePxMutex+0x4c>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df06:	2401      	movs	r4, #1
 800df08:	e013      	b.n	800df32 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800df0a:	9b06      	ldr	r3, [sp, #24]
 800df0c:	4642      	mov	r2, r8
 800df0e:	0039      	movs	r1, r7
 800df10:	0028      	movs	r0, r5
 800df12:	f004 fedb 	bl	8012ccc <HAL_UART_Transmit>
 800df16:	0004      	movs	r4, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800df18:	2c00      	cmp	r4, #0
 800df1a:	d001      	beq.n	800df20 <writePxMutex+0x40>
 800df1c:	2c03      	cmp	r4, #3
 800df1e:	d1f4      	bne.n	800df0a <writePxMutex+0x2a>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800df20:	4b06      	ldr	r3, [pc, #24]	; (800df3c <writePxMutex+0x5c>)
 800df22:	00b6      	lsls	r6, r6, #2
 800df24:	58f0      	ldr	r0, [r6, r3]
 800df26:	f000 f9b3 	bl	800e290 <osSemaphoreRelease>
 800df2a:	e002      	b.n	800df32 <writePxMutex+0x52>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df2c:	2401      	movs	r4, #1
 800df2e:	e7f3      	b.n	800df18 <writePxMutex+0x38>
 800df30:	2401      	movs	r4, #1
}
 800df32:	0020      	movs	r0, r4
 800df34:	bc80      	pop	{r7}
 800df36:	46b8      	mov	r8, r7
 800df38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3a:	46c0      	nop			; (mov r8, r8)
 800df3c:	20001b48 	.word	0x20001b48

0800df40 <writePxITMutex>:
{
 800df40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df42:	b083      	sub	sp, #12
 800df44:	0004      	movs	r4, r0
 800df46:	9101      	str	r1, [sp, #4]
 800df48:	0017      	movs	r7, r2
 800df4a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800df4c:	f7ff ffaa 	bl	800dea4 <GetUart>
 800df50:	1e06      	subs	r6, r0, #0
 800df52:	d00f      	beq.n	800df74 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df54:	4b09      	ldr	r3, [pc, #36]	; (800df7c <writePxITMutex+0x3c>)
 800df56:	00a4      	lsls	r4, r4, #2
 800df58:	58e0      	ldr	r0, [r4, r3]
 800df5a:	0029      	movs	r1, r5
 800df5c:	f000 f968 	bl	800e230 <osSemaphoreWait>
 800df60:	2800      	cmp	r0, #0
 800df62:	d001      	beq.n	800df68 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800df64:	2001      	movs	r0, #1
 800df66:	e006      	b.n	800df76 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800df68:	003a      	movs	r2, r7
 800df6a:	9901      	ldr	r1, [sp, #4]
 800df6c:	0030      	movs	r0, r6
 800df6e:	f004 fb70 	bl	8012652 <HAL_UART_Transmit_IT>
 800df72:	e000      	b.n	800df76 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800df74:	2001      	movs	r0, #1
}
 800df76:	b003      	add	sp, #12
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	46c0      	nop			; (mov r8, r8)
 800df7c:	20001b48 	.word	0x20001b48

0800df80 <UpdateBaudrate>:
{
 800df80:	b510      	push	{r4, lr}
 800df82:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800df84:	f7ff ff8e 	bl	800dea4 <GetUart>
	huart->Init.BaudRate = baudrate;
 800df88:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800df8a:	f004 ff49 	bl	8012e20 <HAL_UART_Init>
}
 800df8e:	2000      	movs	r0, #0
 800df90:	bd10      	pop	{r4, pc}
	...

0800df94 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800df94:	b510      	push	{r4, lr}
 800df96:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800df98:	d003      	beq.n	800dfa2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800df9a:	2901      	cmp	r1, #1
 800df9c:	d002      	beq.n	800dfa4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800df9e:	2900      	cmp	r1, #0
 800dfa0:	d018      	beq.n	800dfd4 <SwapUartPins+0x40>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800dfa2:	bd10      	pop	{r4, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dfa4:	f7fc fd9e 	bl	800aae4 <GetPort>
 800dfa8:	3801      	subs	r0, #1
 800dfaa:	2180      	movs	r1, #128	; 0x80
 800dfac:	0209      	lsls	r1, r1, #8
 800dfae:	000b      	movs	r3, r1
 800dfb0:	4103      	asrs	r3, r0
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	4b12      	ldr	r3, [pc, #72]	; (800e000 <SwapUartPins+0x6c>)
 800dfb6:	781a      	ldrb	r2, [r3, #0]
 800dfb8:	3a01      	subs	r2, #1
 800dfba:	4b12      	ldr	r3, [pc, #72]	; (800e004 <SwapUartPins+0x70>)
 800dfbc:	0052      	lsls	r2, r2, #1
 800dfbe:	189b      	adds	r3, r3, r2
 800dfc0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800dfc2:	4302      	orrs	r2, r0
 800dfc4:	871a      	strh	r2, [r3, #56]	; 0x38
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dfc6:	2308      	movs	r3, #8
 800dfc8:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dfca:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800dfcc:	0020      	movs	r0, r4
 800dfce:	f004 ff27 	bl	8012e20 <HAL_UART_Init>
 800dfd2:	e7e6      	b.n	800dfa2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dfd4:	f7fc fd86 	bl	800aae4 <GetPort>
 800dfd8:	3801      	subs	r0, #1
 800dfda:	4a0b      	ldr	r2, [pc, #44]	; (800e008 <SwapUartPins+0x74>)
 800dfdc:	4102      	asrs	r2, r0
 800dfde:	4b08      	ldr	r3, [pc, #32]	; (800e000 <SwapUartPins+0x6c>)
 800dfe0:	7819      	ldrb	r1, [r3, #0]
 800dfe2:	3901      	subs	r1, #1
 800dfe4:	4b07      	ldr	r3, [pc, #28]	; (800e004 <SwapUartPins+0x70>)
 800dfe6:	0049      	lsls	r1, r1, #1
 800dfe8:	185b      	adds	r3, r3, r1
 800dfea:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800dfec:	400a      	ands	r2, r1
 800dfee:	871a      	strh	r2, [r3, #56]	; 0x38
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dff0:	2308      	movs	r3, #8
 800dff2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800dff4:	2300      	movs	r3, #0
 800dff6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800dff8:	0020      	movs	r0, r4
 800dffa:	f004 ff11 	bl	8012e20 <HAL_UART_Init>
}
 800dffe:	e7d0      	b.n	800dfa2 <SwapUartPins+0xe>
 800e000:	200007a0 	.word	0x200007a0
 800e004:	20002838 	.word	0x20002838
 800e008:	ffff7fff 	.word	0xffff7fff

0800e00c <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800e00c:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800e00e:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800e010:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 800e012:	e005      	b.n	800e020 <ReadPortsDir+0x14>
			if (responseStatus != BOS_OK) {
				result = BOS_ERR_NoResponse;
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800e014:	3301      	adds	r3, #1
 800e016:	b2db      	uxtb	r3, r3
 800e018:	2b05      	cmp	r3, #5
 800e01a:	d9fb      	bls.n	800e014 <ReadPortsDir+0x8>
	for (uint8_t i = 1; i <= N; i++) {
 800e01c:	3401      	adds	r4, #1
 800e01e:	b2e4      	uxtb	r4, r4
 800e020:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <ReadPortsDir+0x48>)
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	42a3      	cmp	r3, r4
 800e026:	d313      	bcc.n	800e050 <ReadPortsDir+0x44>
		if (i != myID) {
 800e028:	4b0b      	ldr	r3, [pc, #44]	; (800e058 <ReadPortsDir+0x4c>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d00d      	beq.n	800e04c <ReadPortsDir+0x40>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800e030:	2200      	movs	r2, #0
 800e032:	2113      	movs	r1, #19
 800e034:	0020      	movs	r0, r4
 800e036:	f7fa fa95 	bl	8008564 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800e03a:	2032      	movs	r0, #50	; 0x32
 800e03c:	f7ff fd62 	bl	800db04 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800e040:	4b06      	ldr	r3, [pc, #24]	; (800e05c <ReadPortsDir+0x50>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0e9      	beq.n	800e01c <ReadPortsDir+0x10>
				result = BOS_ERR_NoResponse;
 800e048:	2502      	movs	r5, #2
 800e04a:	e7e7      	b.n	800e01c <ReadPortsDir+0x10>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800e04c:	2301      	movs	r3, #1
 800e04e:	e7e3      	b.n	800e018 <ReadPortsDir+0xc>
			}
		}
	}

	return result;
}
 800e050:	0028      	movs	r0, r5
 800e052:	bd70      	pop	{r4, r5, r6, pc}
 800e054:	20000008 	.word	0x20000008
 800e058:	200007a0 	.word	0x200007a0
 800e05c:	2000096c 	.word	0x2000096c

0800e060 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800e064:	2401      	movs	r4, #1
	uint16_t temp =0;
 800e066:	2600      	movs	r6, #0
	for (int p = 1; p <= NumOfPorts; p++) {
 800e068:	e000      	b.n	800e06c <ReadPortsDirMSG+0xc>
 800e06a:	3401      	adds	r4, #1
 800e06c:	2c05      	cmp	r4, #5
 800e06e:	dc0d      	bgt.n	800e08c <ReadPortsDirMSG+0x2c>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e070:	b2e5      	uxtb	r5, r4
 800e072:	0028      	movs	r0, r5
 800e074:	f7ff ff16 	bl	800dea4 <GetUart>
 800e078:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e07a:	2380      	movs	r3, #128	; 0x80
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	429a      	cmp	r2, r3
 800e080:	d1f3      	bne.n	800e06a <ReadPortsDirMSG+0xa>
			messageParams[temp++] = p;
 800e082:	1c73      	adds	r3, r6, #1
 800e084:	4a05      	ldr	r2, [pc, #20]	; (800e09c <ReadPortsDirMSG+0x3c>)
 800e086:	5595      	strb	r5, [r2, r6]
 800e088:	b29e      	uxth	r6, r3
 800e08a:	e7ee      	b.n	800e06a <ReadPortsDirMSG+0xa>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800e08c:	0032      	movs	r2, r6
 800e08e:	2114      	movs	r1, #20
 800e090:	0038      	movs	r0, r7
 800e092:	f7fa fa67 	bl	8008564 <SendMessageToModule>
	return result;
}
 800e096:	2000      	movs	r0, #0
 800e098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e09a:	46c0      	nop			; (mov r8, r8)
 800e09c:	2000086c 	.word	0x2000086c

0800e0a0 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800e0a0:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e0a2:	2401      	movs	r4, #1
 800e0a4:	e007      	b.n	800e0b6 <UpdateMyPortsDir+0x16>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800e0a6:	0020      	movs	r0, r4
 800e0a8:	f7ff fefc 	bl	800dea4 <GetUart>
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	f7ff ff71 	bl	800df94 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	b2e4      	uxtb	r4, r4
 800e0b6:	2c05      	cmp	r4, #5
 800e0b8:	d813      	bhi.n	800e0e2 <UpdateMyPortsDir+0x42>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e0ba:	4b0b      	ldr	r3, [pc, #44]	; (800e0e8 <UpdateMyPortsDir+0x48>)
 800e0bc:	781a      	ldrb	r2, [r3, #0]
 800e0be:	3a01      	subs	r2, #1
 800e0c0:	4b0a      	ldr	r3, [pc, #40]	; (800e0ec <UpdateMyPortsDir+0x4c>)
 800e0c2:	0052      	lsls	r2, r2, #1
 800e0c4:	189b      	adds	r3, r3, r2
 800e0c6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800e0c8:	1e61      	subs	r1, r4, #1
 800e0ca:	2380      	movs	r3, #128	; 0x80
 800e0cc:	021b      	lsls	r3, r3, #8
 800e0ce:	410b      	asrs	r3, r1
 800e0d0:	4213      	tst	r3, r2
 800e0d2:	d1e8      	bne.n	800e0a6 <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p), NORMAL);
 800e0d4:	0020      	movs	r0, r4
 800e0d6:	f7ff fee5 	bl	800dea4 <GetUart>
 800e0da:	2100      	movs	r1, #0
 800e0dc:	f7ff ff5a 	bl	800df94 <SwapUartPins>
 800e0e0:	e7e7      	b.n	800e0b2 <UpdateMyPortsDir+0x12>
		}
	}

	return result;
}
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	200007a0 	.word	0x200007a0
 800e0ec:	20002838 	.word	0x20002838

0800e0f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e0f0:	4816      	ldr	r0, [pc, #88]	; (800e14c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e0f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e0f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e0f6:	e003      	b.n	800e100 <LoopCopyDataInit>

0800e0f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e0f8:	4b15      	ldr	r3, [pc, #84]	; (800e150 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e0fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e0fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e0fe:	3104      	adds	r1, #4

0800e100 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e100:	4814      	ldr	r0, [pc, #80]	; (800e154 <LoopForever+0xc>)
  ldr r3, =_edata
 800e102:	4b15      	ldr	r3, [pc, #84]	; (800e158 <LoopForever+0x10>)
  adds r2, r0, r1
 800e104:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e106:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e108:	d3f6      	bcc.n	800e0f8 <CopyDataInit>
  ldr r2, =_sbss
 800e10a:	4a14      	ldr	r2, [pc, #80]	; (800e15c <LoopForever+0x14>)
  b LoopFillZerobss
 800e10c:	e002      	b.n	800e114 <LoopFillZerobss>

0800e10e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e10e:	2300      	movs	r3, #0
  str  r3, [r2]
 800e110:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e112:	3204      	adds	r2, #4

0800e114 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e114:	4b12      	ldr	r3, [pc, #72]	; (800e160 <LoopForever+0x18>)
  cmp r2, r3
 800e116:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e118:	d3f9      	bcc.n	800e10e <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e11a:	4812      	ldr	r0, [pc, #72]	; (800e164 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e11c:	4912      	ldr	r1, [pc, #72]	; (800e168 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e11e:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e120:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e122:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e124:	d005      	beq.n	800e132 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e126:	f000 f82b 	bl	800e180 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e12a:	f006 fced 	bl	8014b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e12e:	f004 ffce 	bl	80130ce <main>

0800e132 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e132:	480e      	ldr	r0, [pc, #56]	; (800e16c <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e134:	490e      	ldr	r1, [pc, #56]	; (800e170 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e136:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e138:	480e      	ldr	r0, [pc, #56]	; (800e174 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e13a:	490d      	ldr	r1, [pc, #52]	; (800e170 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e13c:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e13e:	480e      	ldr	r0, [pc, #56]	; (800e178 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e140:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e142:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e144:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e146:	4700      	bx	r0

0800e148 <LoopForever>:


LoopForever:
    b LoopForever
 800e148:	e7fe      	b.n	800e148 <LoopForever>
 800e14a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e14c:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e150:	0801ca30 	.word	0x0801ca30
  ldr r0, =_sdata
 800e154:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800e158:	20000780 	.word	0x20000780
  ldr r2, =_sbss
 800e15c:	20000780 	.word	0x20000780
  ldr r3, = _ebss
 800e160:	20006f58 	.word	0x20006f58
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e164:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e168:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e16c:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e170:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e174:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e178:	1fffd800 	.word	0x1fffd800

0800e17c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e17c:	e7fe      	b.n	800e17c <ADC1_COMP_IRQHandler>
	...

0800e180 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e180:	4b11      	ldr	r3, [pc, #68]	; (800e1c8 <SystemInit+0x48>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	2101      	movs	r1, #1
 800e186:	430a      	orrs	r2, r1
 800e188:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	480f      	ldr	r0, [pc, #60]	; (800e1cc <SystemInit+0x4c>)
 800e18e:	4002      	ands	r2, r0
 800e190:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	480e      	ldr	r0, [pc, #56]	; (800e1d0 <SystemInit+0x50>)
 800e196:	4002      	ands	r2, r0
 800e198:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	480d      	ldr	r0, [pc, #52]	; (800e1d4 <SystemInit+0x54>)
 800e19e:	4002      	ands	r2, r0
 800e1a0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	480c      	ldr	r0, [pc, #48]	; (800e1d8 <SystemInit+0x58>)
 800e1a6:	4002      	ands	r2, r0
 800e1a8:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ac:	200f      	movs	r0, #15
 800e1ae:	4382      	bics	r2, r0
 800e1b0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1b4:	4809      	ldr	r0, [pc, #36]	; (800e1dc <SystemInit+0x5c>)
 800e1b6:	4002      	ands	r2, r0
 800e1b8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1bc:	438a      	bics	r2, r1
 800e1be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	609a      	str	r2, [r3, #8]

}
 800e1c4:	4770      	bx	lr
 800e1c6:	46c0      	nop			; (mov r8, r8)
 800e1c8:	40021000 	.word	0x40021000
 800e1cc:	08ffb80c 	.word	0x08ffb80c
 800e1d0:	fef6ffff 	.word	0xfef6ffff
 800e1d4:	fffbffff 	.word	0xfffbffff
 800e1d8:	ffc0ffff 	.word	0xffc0ffff
 800e1dc:	fff0feac 	.word	0xfff0feac

0800e1e0 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1e0:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800e1e4:	1e43      	subs	r3, r0, #1
 800e1e6:	4198      	sbcs	r0, r3
}
 800e1e8:	4770      	bx	lr

0800e1ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e1ea:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e1ec:	f000 feea 	bl	800efc4 <vTaskStartScheduler>
  
  return osOK;
}
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	bd10      	pop	{r4, pc}

0800e1f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e1f4:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d100      	bne.n	800e1fc <osDelay+0x8>
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	f000 fff2 	bl	800f1e4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e200:	2000      	movs	r0, #0
 800e202:	bd10      	pop	{r4, pc}

0800e204 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e204:	b510      	push	{r4, lr}
 800e206:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e208:	2901      	cmp	r1, #1
 800e20a:	d005      	beq.n	800e218 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e20c:	2100      	movs	r1, #0
 800e20e:	f000 faf9 	bl	800e804 <xQueueCreateCountingSemaphore>
 800e212:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e214:	0020      	movs	r0, r4
 800e216:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e218:	2203      	movs	r2, #3
 800e21a:	2100      	movs	r1, #0
 800e21c:	f000 fad2 	bl	800e7c4 <xQueueGenericCreate>
 800e220:	1e04      	subs	r4, r0, #0
 800e222:	d0f7      	beq.n	800e214 <osSemaphoreCreate+0x10>
 800e224:	2300      	movs	r3, #0
 800e226:	2200      	movs	r2, #0
 800e228:	2100      	movs	r1, #0
 800e22a:	f000 faf5 	bl	800e818 <xQueueGenericSend>
    return sema;
 800e22e:	e7f1      	b.n	800e214 <osSemaphoreCreate+0x10>

0800e230 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e230:	b570      	push	{r4, r5, r6, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	0005      	movs	r5, r0
 800e236:	000e      	movs	r6, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e238:	2300      	movs	r3, #0
 800e23a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d01e      	beq.n	800e27e <osSemaphoreWait+0x4e>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e240:	f7ff ffce 	bl	800e1e0 <inHandlerMode>
 800e244:	1e04      	subs	r4, r0, #0
 800e246:	d00f      	beq.n	800e268 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e248:	aa01      	add	r2, sp, #4
 800e24a:	2100      	movs	r1, #0
 800e24c:	0028      	movs	r0, r5
 800e24e:	f000 fc4e 	bl	800eaee <xQueueReceiveFromISR>
 800e252:	2801      	cmp	r0, #1
 800e254:	d115      	bne.n	800e282 <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e256:	9c01      	ldr	r4, [sp, #4]
 800e258:	2c00      	cmp	r4, #0
 800e25a:	d00d      	beq.n	800e278 <osSemaphoreWait+0x48>
 800e25c:	4b0b      	ldr	r3, [pc, #44]	; (800e28c <osSemaphoreWait+0x5c>)
 800e25e:	2280      	movs	r2, #128	; 0x80
 800e260:	0552      	lsls	r2, r2, #21
 800e262:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e264:	2400      	movs	r4, #0
 800e266:	e007      	b.n	800e278 <osSemaphoreWait+0x48>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e268:	2300      	movs	r3, #0
 800e26a:	0032      	movs	r2, r6
 800e26c:	2100      	movs	r1, #0
 800e26e:	0028      	movs	r0, r5
 800e270:	f000 fbae 	bl	800e9d0 <xQueueGenericReceive>
 800e274:	2801      	cmp	r0, #1
 800e276:	d106      	bne.n	800e286 <osSemaphoreWait+0x56>
}
 800e278:	0020      	movs	r0, r4
 800e27a:	b002      	add	sp, #8
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 800e27e:	2480      	movs	r4, #128	; 0x80
 800e280:	e7fa      	b.n	800e278 <osSemaphoreWait+0x48>
      return osErrorOS;
 800e282:	24ff      	movs	r4, #255	; 0xff
 800e284:	e7f8      	b.n	800e278 <osSemaphoreWait+0x48>
    return osErrorOS;
 800e286:	24ff      	movs	r4, #255	; 0xff
 800e288:	e7f6      	b.n	800e278 <osSemaphoreWait+0x48>
 800e28a:	46c0      	nop			; (mov r8, r8)
 800e28c:	e000ed04 	.word	0xe000ed04

0800e290 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e290:	b510      	push	{r4, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e296:	2300      	movs	r3, #0
 800e298:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800e29a:	f7ff ffa1 	bl	800e1e0 <inHandlerMode>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d00e      	beq.n	800e2c0 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e2a2:	a901      	add	r1, sp, #4
 800e2a4:	0020      	movs	r0, r4
 800e2a6:	f000 fb63 	bl	800e970 <xQueueGiveFromISR>
 800e2aa:	2801      	cmp	r0, #1
 800e2ac:	d115      	bne.n	800e2da <osSemaphoreRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d014      	beq.n	800e2de <osSemaphoreRelease+0x4e>
 800e2b4:	4b0b      	ldr	r3, [pc, #44]	; (800e2e4 <osSemaphoreRelease+0x54>)
 800e2b6:	2280      	movs	r2, #128	; 0x80
 800e2b8:	0552      	lsls	r2, r2, #21
 800e2ba:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800e2bc:	2000      	movs	r0, #0
 800e2be:	e008      	b.n	800e2d2 <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	0020      	movs	r0, r4
 800e2c8:	f000 faa6 	bl	800e818 <xQueueGenericSend>
 800e2cc:	2801      	cmp	r0, #1
 800e2ce:	d002      	beq.n	800e2d6 <osSemaphoreRelease+0x46>
      result = osErrorOS;
 800e2d0:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e2d2:	b002      	add	sp, #8
 800e2d4:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	e7fb      	b.n	800e2d2 <osSemaphoreRelease+0x42>
      return osErrorOS;
 800e2da:	20ff      	movs	r0, #255	; 0xff
 800e2dc:	e7f9      	b.n	800e2d2 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e7f7      	b.n	800e2d2 <osSemaphoreRelease+0x42>
 800e2e2:	46c0      	nop			; (mov r8, r8)
 800e2e4:	e000ed04 	.word	0xe000ed04

0800e2e8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e2e8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e2ea:	f001 f923 	bl	800f534 <xTaskGetSchedulerState>
 800e2ee:	2801      	cmp	r0, #1
 800e2f0:	d100      	bne.n	800e2f4 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e2f2:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e2f4:	f001 fd62 	bl	800fdbc <xPortSysTickHandler>
}
 800e2f8:	e7fb      	b.n	800e2f2 <osSystickHandler+0xa>

0800e2fa <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800e2fa:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e2fc:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800e2fe:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e300:	e005      	b.n	800e30e <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800e302:	2901      	cmp	r1, #1
 800e304:	d002      	beq.n	800e30c <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800e306:	3001      	adds	r0, #1
 800e308:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800e30a:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800e30c:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800e30e:	2200      	movs	r2, #0
 800e310:	569a      	ldrsb	r2, [r3, r2]
 800e312:	2a00      	cmp	r2, #0
 800e314:	d003      	beq.n	800e31e <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800e316:	2a20      	cmp	r2, #32
 800e318:	d0f3      	beq.n	800e302 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800e31a:	2100      	movs	r1, #0
 800e31c:	e7f6      	b.n	800e30c <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e31e:	2901      	cmp	r1, #1
 800e320:	d000      	beq.n	800e324 <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800e322:	4770      	bx	lr
		cParameters--;
 800e324:	3801      	subs	r0, #1
 800e326:	b240      	sxtb	r0, r0
 800e328:	e7fb      	b.n	800e322 <prvGetNumberOfParameters+0x28>
	...

0800e32c <FreeRTOS_CLIRegisterCommand>:
{
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	0005      	movs	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e330:	2008      	movs	r0, #8
 800e332:	f001 fda5 	bl	800fe80 <pvPortMalloc>
 800e336:	1e04      	subs	r4, r0, #0
	if( pxNewListItem != NULL )
 800e338:	d00c      	beq.n	800e354 <FreeRTOS_CLIRegisterCommand+0x28>
		taskENTER_CRITICAL();
 800e33a:	f001 fcff 	bl	800fd3c <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e33e:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800e340:	2300      	movs	r3, #0
 800e342:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e344:	4b04      	ldr	r3, [pc, #16]	; (800e358 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800e34a:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800e34c:	f001 fd02 	bl	800fd54 <vPortExitCritical>
		xReturn = pdPASS;
 800e350:	2001      	movs	r0, #1
}
 800e352:	bd70      	pop	{r4, r5, r6, pc}
portBASE_TYPE xReturn = pdFAIL;
 800e354:	2000      	movs	r0, #0
	return xReturn;
 800e356:	e7fc      	b.n	800e352 <FreeRTOS_CLIRegisterCommand+0x26>
 800e358:	200000b8 	.word	0x200000b8

0800e35c <FreeRTOS_CLIProcessCommand>:
{
 800e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35e:	46ce      	mov	lr, r9
 800e360:	4647      	mov	r7, r8
 800e362:	b580      	push	{r7, lr}
 800e364:	0006      	movs	r6, r0
 800e366:	4688      	mov	r8, r1
 800e368:	4691      	mov	r9, r2
	if( pxCommand == NULL )
 800e36a:	4b2d      	ldr	r3, [pc, #180]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d018      	beq.n	800e3a4 <FreeRTOS_CLIProcessCommand+0x48>
portBASE_TYPE xReturn = pdTRUE;
 800e372:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e374:	4b2a      	ldr	r3, [pc, #168]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <FreeRTOS_CLIProcessCommand+0x24>
 800e37c:	2c00      	cmp	r4, #0
 800e37e:	d03e      	beq.n	800e3fe <FreeRTOS_CLIProcessCommand+0xa2>
	else if( pxCommand != NULL )
 800e380:	2b00      	cmp	r3, #0
 800e382:	d045      	beq.n	800e410 <FreeRTOS_CLIProcessCommand+0xb4>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	0032      	movs	r2, r6
 800e38a:	4649      	mov	r1, r9
 800e38c:	4640      	mov	r0, r8
 800e38e:	4798      	blx	r3
 800e390:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800e392:	d102      	bne.n	800e39a <FreeRTOS_CLIProcessCommand+0x3e>
			pxCommand = NULL;
 800e394:	4b22      	ldr	r3, [pc, #136]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
}
 800e39a:	0020      	movs	r0, r4
 800e39c:	bcc0      	pop	{r6, r7}
 800e39e:	46b9      	mov	r9, r7
 800e3a0:	46b0      	mov	r8, r6
 800e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e3a4:	4b1e      	ldr	r3, [pc, #120]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e3a6:	4a1f      	ldr	r2, [pc, #124]	; (800e424 <FreeRTOS_CLIProcessCommand+0xc8>)
 800e3a8:	3204      	adds	r2, #4
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e008      	b.n	800e3c0 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e3ae:	0021      	movs	r1, r4
 800e3b0:	0030      	movs	r0, r6
 800e3b2:	f006 fadb 	bl	801496c <strncmp>
 800e3b6:	1e04      	subs	r4, r0, #0
 800e3b8:	d012      	beq.n	800e3e0 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e3ba:	686a      	ldr	r2, [r5, #4]
 800e3bc:	4b18      	ldr	r3, [pc, #96]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	4b17      	ldr	r3, [pc, #92]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e3c2:	681d      	ldr	r5, [r3, #0]
 800e3c4:	2d00      	cmp	r5, #0
 800e3c6:	d018      	beq.n	800e3fa <FreeRTOS_CLIProcessCommand+0x9e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e3c8:	682f      	ldr	r7, [r5, #0]
 800e3ca:	683c      	ldr	r4, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e3cc:	0020      	movs	r0, r4
 800e3ce:	f7f1 fea3 	bl	8000118 <strlen>
 800e3d2:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e3d4:	5633      	ldrsb	r3, [r6, r0]
 800e3d6:	2b20      	cmp	r3, #32
 800e3d8:	d0e9      	beq.n	800e3ae <FreeRTOS_CLIProcessCommand+0x52>
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1ed      	bne.n	800e3ba <FreeRTOS_CLIProcessCommand+0x5e>
 800e3de:	e7e6      	b.n	800e3ae <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e3e0:	250c      	movs	r5, #12
 800e3e2:	577d      	ldrsb	r5, [r7, r5]
 800e3e4:	2d00      	cmp	r5, #0
 800e3e6:	da01      	bge.n	800e3ec <FreeRTOS_CLIProcessCommand+0x90>
portBASE_TYPE xReturn = pdTRUE;
 800e3e8:	2401      	movs	r4, #1
 800e3ea:	e7c3      	b.n	800e374 <FreeRTOS_CLIProcessCommand+0x18>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e3ec:	0030      	movs	r0, r6
 800e3ee:	f7ff ff84 	bl	800e2fa <prvGetNumberOfParameters>
 800e3f2:	4285      	cmp	r5, r0
 800e3f4:	d1be      	bne.n	800e374 <FreeRTOS_CLIProcessCommand+0x18>
portBASE_TYPE xReturn = pdTRUE;
 800e3f6:	3401      	adds	r4, #1
 800e3f8:	e7bc      	b.n	800e374 <FreeRTOS_CLIProcessCommand+0x18>
 800e3fa:	2401      	movs	r4, #1
 800e3fc:	e7ba      	b.n	800e374 <FreeRTOS_CLIProcessCommand+0x18>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e3fe:	490a      	ldr	r1, [pc, #40]	; (800e428 <FreeRTOS_CLIProcessCommand+0xcc>)
 800e400:	464a      	mov	r2, r9
 800e402:	4640      	mov	r0, r8
 800e404:	f006 fac3 	bl	801498e <strncpy>
		pxCommand = NULL;
 800e408:	4b05      	ldr	r3, [pc, #20]	; (800e420 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	e7c4      	b.n	800e39a <FreeRTOS_CLIProcessCommand+0x3e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e410:	4906      	ldr	r1, [pc, #24]	; (800e42c <FreeRTOS_CLIProcessCommand+0xd0>)
 800e412:	464a      	mov	r2, r9
 800e414:	4640      	mov	r0, r8
 800e416:	f006 faba 	bl	801498e <strncpy>
		xReturn = pdFALSE;
 800e41a:	2400      	movs	r4, #0
	return xReturn;
 800e41c:	e7bd      	b.n	800e39a <FreeRTOS_CLIProcessCommand+0x3e>
 800e41e:	46c0      	nop			; (mov r8, r8)
 800e420:	200028a8 	.word	0x200028a8
 800e424:	200000b8 	.word	0x200000b8
 800e428:	0801c440 	.word	0x0801c440
 800e42c:	0801c498 	.word	0x0801c498

0800e430 <FreeRTOS_CLIGetOutputBuffer>:
	return cOutputBuffer;
 800e430:	4800      	ldr	r0, [pc, #0]	; (800e434 <FreeRTOS_CLIGetOutputBuffer+0x4>)
}
 800e432:	4770      	bx	lr
 800e434:	200028bc 	.word	0x200028bc

0800e438 <FreeRTOS_CLIGetParameter>:
{
 800e438:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e43e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e440:	e011      	b.n	800e466 <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800e442:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e444:	2300      	movs	r3, #0
 800e446:	56c3      	ldrsb	r3, [r0, r3]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <FreeRTOS_CLIGetParameter+0x18>
 800e44c:	2b20      	cmp	r3, #32
 800e44e:	d1f8      	bne.n	800e442 <FreeRTOS_CLIGetParameter+0xa>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e450:	2300      	movs	r3, #0
 800e452:	56c3      	ldrsb	r3, [r0, r3]
 800e454:	2b20      	cmp	r3, #32
 800e456:	d101      	bne.n	800e45c <FreeRTOS_CLIGetParameter+0x24>
			pcCommandString++;
 800e458:	3001      	adds	r0, #1
 800e45a:	e7f9      	b.n	800e450 <FreeRTOS_CLIGetParameter+0x18>
		if( *pcCommandString != 0x00 )
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d017      	beq.n	800e490 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800e460:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e462:	42a1      	cmp	r1, r4
 800e464:	d012      	beq.n	800e48c <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800e466:	428c      	cmp	r4, r1
 800e468:	d3ec      	bcc.n	800e444 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800e46a:	2000      	movs	r0, #0
}
 800e46c:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800e46e:	6813      	ldr	r3, [r2, #0]
 800e470:	3301      	adds	r3, #1
 800e472:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e474:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e476:	2300      	movs	r3, #0
 800e478:	56cb      	ldrsb	r3, [r1, r3]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <FreeRTOS_CLIGetParameter+0x4a>
 800e47e:	2b20      	cmp	r3, #32
 800e480:	d1f5      	bne.n	800e46e <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800e482:	6813      	ldr	r3, [r2, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1f1      	bne.n	800e46c <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800e488:	2000      	movs	r0, #0
	return pcReturn;
 800e48a:	e7ef      	b.n	800e46c <FreeRTOS_CLIGetParameter+0x34>
 800e48c:	0001      	movs	r1, r0
 800e48e:	e7f2      	b.n	800e476 <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800e490:	2000      	movs	r0, #0
 800e492:	e7eb      	b.n	800e46c <FreeRTOS_CLIGetParameter+0x34>

0800e494 <prvHelpCommand>:
{
 800e494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e496:	b083      	sub	sp, #12
 800e498:	0007      	movs	r7, r0
 800e49a:	000e      	movs	r6, r1
 800e49c:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e4a2:	aa01      	add	r2, sp, #4
 800e4a4:	2101      	movs	r1, #1
 800e4a6:	f7ff ffc7 	bl	800e438 <FreeRTOS_CLIGetParameter>
 800e4aa:	1e04      	subs	r4, r0, #0
 800e4ac:	4b31      	ldr	r3, [pc, #196]	; (800e574 <prvHelpCommand+0xe0>)
 800e4ae:	6058      	str	r0, [r3, #4]
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e4b0:	d021      	beq.n	800e4f6 <prvHelpCommand+0x62>
 800e4b2:	4931      	ldr	r1, [pc, #196]	; (800e578 <prvHelpCommand+0xe4>)
 800e4b4:	2206      	movs	r2, #6
 800e4b6:	f006 fa59 	bl	801496c <strncmp>
 800e4ba:	1e05      	subs	r5, r0, #0
 800e4bc:	d11b      	bne.n	800e4f6 <prvHelpCommand+0x62>
		if( str == NumOfParamsHelpStrings )
 800e4be:	4b2d      	ldr	r3, [pc, #180]	; (800e574 <prvHelpCommand+0xe0>)
 800e4c0:	7a1b      	ldrb	r3, [r3, #8]
 800e4c2:	2b07      	cmp	r3, #7
 800e4c4:	d00f      	beq.n	800e4e6 <prvHelpCommand+0x52>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e4c6:	4a2b      	ldr	r2, [pc, #172]	; (800e574 <prvHelpCommand+0xe0>)
 800e4c8:	7a13      	ldrb	r3, [r2, #8]
 800e4ca:	1c5c      	adds	r4, r3, #1
 800e4cc:	b2e4      	uxtb	r4, r4
 800e4ce:	7214      	strb	r4, [r2, #8]
 800e4d0:	4a2a      	ldr	r2, [pc, #168]	; (800e57c <prvHelpCommand+0xe8>)
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	5899      	ldr	r1, [r3, r2]
 800e4d6:	0032      	movs	r2, r6
 800e4d8:	0038      	movs	r0, r7
 800e4da:	f006 fa58 	bl	801498e <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e4de:	2c07      	cmp	r4, #7
 800e4e0:	d005      	beq.n	800e4ee <prvHelpCommand+0x5a>
			xReturn = pdTRUE;
 800e4e2:	2501      	movs	r5, #1
 800e4e4:	e009      	b.n	800e4fa <prvHelpCommand+0x66>
			str = 0;
 800e4e6:	4b23      	ldr	r3, [pc, #140]	; (800e574 <prvHelpCommand+0xe0>)
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	721a      	strb	r2, [r3, #8]
 800e4ec:	e7eb      	b.n	800e4c6 <prvHelpCommand+0x32>
			xReturn = pdFALSE; str = 0;
 800e4ee:	4b21      	ldr	r3, [pc, #132]	; (800e574 <prvHelpCommand+0xe0>)
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	721a      	strb	r2, [r3, #8]
 800e4f4:	e001      	b.n	800e4fa <prvHelpCommand+0x66>
	else if (pcParameterString1 == NULL)
 800e4f6:	2c00      	cmp	r4, #0
 800e4f8:	d002      	beq.n	800e500 <prvHelpCommand+0x6c>
}
 800e4fa:	0028      	movs	r0, r5
 800e4fc:	b003      	add	sp, #12
 800e4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e500:	4b1c      	ldr	r3, [pc, #112]	; (800e574 <prvHelpCommand+0xe0>)
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d023      	beq.n	800e550 <prvHelpCommand+0xbc>
		if (counter > numOfBosCommands) {
 800e508:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <prvHelpCommand+0xe0>)
 800e50a:	7c1c      	ldrb	r4, [r3, #16]
 800e50c:	4b1c      	ldr	r3, [pc, #112]	; (800e580 <prvHelpCommand+0xec>)
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	429c      	cmp	r4, r3
 800e512:	d924      	bls.n	800e55e <prvHelpCommand+0xca>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e514:	4b17      	ldr	r3, [pc, #92]	; (800e574 <prvHelpCommand+0xe0>)
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	6859      	ldr	r1, [r3, #4]
 800e51c:	0032      	movs	r2, r6
 800e51e:	3a08      	subs	r2, #8
 800e520:	0038      	movs	r0, r7
 800e522:	3008      	adds	r0, #8
 800e524:	f006 fa33 	bl	801498e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e528:	4916      	ldr	r1, [pc, #88]	; (800e584 <prvHelpCommand+0xf0>)
 800e52a:	1c78      	adds	r0, r7, #1
 800e52c:	f006 fb1f 	bl	8014b6e <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e530:	2328      	movs	r3, #40	; 0x28
 800e532:	703b      	strb	r3, [r7, #0]
 800e534:	3301      	adds	r3, #1
 800e536:	71bb      	strb	r3, [r7, #6]
 800e538:	3b09      	subs	r3, #9
 800e53a:	71fb      	strb	r3, [r7, #7]
		pxCommand = pxCommand->pxNext;
 800e53c:	4b0d      	ldr	r3, [pc, #52]	; (800e574 <prvHelpCommand+0xe0>)
 800e53e:	68da      	ldr	r2, [r3, #12]
 800e540:	6852      	ldr	r2, [r2, #4]
 800e542:	60da      	str	r2, [r3, #12]
		counter++;
 800e544:	3401      	adds	r4, #1
 800e546:	741c      	strb	r4, [r3, #16]
		if( pxCommand == NULL )
 800e548:	2a00      	cmp	r2, #0
 800e54a:	d011      	beq.n	800e570 <prvHelpCommand+0xdc>
			xReturn = pdTRUE;
 800e54c:	2501      	movs	r5, #1
	return xReturn;
 800e54e:	e7d4      	b.n	800e4fa <prvHelpCommand+0x66>
			pxCommand = &xRegisteredCommands;
 800e550:	4b08      	ldr	r3, [pc, #32]	; (800e574 <prvHelpCommand+0xe0>)
 800e552:	4a0d      	ldr	r2, [pc, #52]	; (800e588 <prvHelpCommand+0xf4>)
 800e554:	3204      	adds	r2, #4
 800e556:	60da      	str	r2, [r3, #12]
			counter = 1;
 800e558:	2201      	movs	r2, #1
 800e55a:	741a      	strb	r2, [r3, #16]
 800e55c:	e7d4      	b.n	800e508 <prvHelpCommand+0x74>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e55e:	4b05      	ldr	r3, [pc, #20]	; (800e574 <prvHelpCommand+0xe0>)
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6859      	ldr	r1, [r3, #4]
 800e566:	0032      	movs	r2, r6
 800e568:	0038      	movs	r0, r7
 800e56a:	f006 fa10 	bl	801498e <strncpy>
 800e56e:	e7e5      	b.n	800e53c <prvHelpCommand+0xa8>
			xReturn = pdFALSE;
 800e570:	2500      	movs	r5, #0
 800e572:	e7c2      	b.n	800e4fa <prvHelpCommand+0x66>
 800e574:	200028a8 	.word	0x200028a8
 800e578:	0801afd4 	.word	0x0801afd4
 800e57c:	20000034 	.word	0x20000034
 800e580:	20000ee4 	.word	0x20000ee4
 800e584:	080197d2 	.word	0x080197d2
 800e588:	200000b8 	.word	0x200000b8

0800e58c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e58c:	0003      	movs	r3, r0
 800e58e:	3308      	adds	r3, #8
 800e590:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e592:	2201      	movs	r2, #1
 800e594:	4252      	negs	r2, r2
 800e596:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e598:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e59a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e59c:	2300      	movs	r3, #0
 800e59e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5a0:	4770      	bx	lr

0800e5a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e5a6:	4770      	bx	lr

0800e5a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e5aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5ac:	689a      	ldr	r2, [r3, #8]
 800e5ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5b0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5b2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e5b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e5b6:	6803      	ldr	r3, [r0, #0]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	6003      	str	r3, [r0, #0]
}
 800e5bc:	4770      	bx	lr

0800e5be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5be:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5c0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e5c2:	1c6b      	adds	r3, r5, #1
 800e5c4:	d010      	beq.n	800e5e8 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5c6:	0003      	movs	r3, r0
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	001c      	movs	r4, r3
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	42aa      	cmp	r2, r5
 800e5d2:	d9fa      	bls.n	800e5ca <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5d4:	6863      	ldr	r3, [r4, #4]
 800e5d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5d8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e5da:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e5dc:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e5de:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e5e0:	6803      	ldr	r3, [r0, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	6003      	str	r3, [r0, #0]
}
 800e5e6:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5e8:	6904      	ldr	r4, [r0, #16]
 800e5ea:	e7f3      	b.n	800e5d4 <vListInsert+0x16>

0800e5ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e5ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5ee:	6841      	ldr	r1, [r0, #4]
 800e5f0:	6882      	ldr	r2, [r0, #8]
 800e5f2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e5f4:	6841      	ldr	r1, [r0, #4]
 800e5f6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e5f8:	685a      	ldr	r2, [r3, #4]
 800e5fa:	4282      	cmp	r2, r0
 800e5fc:	d005      	beq.n	800e60a <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e5fe:	2200      	movs	r2, #0
 800e600:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	3801      	subs	r0, #1
 800e606:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e608:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e60a:	6882      	ldr	r2, [r0, #8]
 800e60c:	605a      	str	r2, [r3, #4]
 800e60e:	e7f6      	b.n	800e5fe <uxListRemove+0x12>

0800e610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e610:	b510      	push	{r4, lr}
 800e612:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e614:	f001 fb92 	bl	800fd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e618:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e61a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d004      	beq.n	800e62a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800e620:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800e622:	f001 fb97 	bl	800fd54 <vPortExitCritical>

	return xReturn;
}
 800e626:	0020      	movs	r0, r4
 800e628:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e62a:	2401      	movs	r4, #1
 800e62c:	e7f9      	b.n	800e622 <prvIsQueueFull+0x12>

0800e62e <prvIsQueueEmpty>:
{
 800e62e:	b510      	push	{r4, lr}
 800e630:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e632:	f001 fb83 	bl	800fd3c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d104      	bne.n	800e646 <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 800e63c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800e63e:	f001 fb89 	bl	800fd54 <vPortExitCritical>
}
 800e642:	0020      	movs	r0, r4
 800e644:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800e646:	2400      	movs	r4, #0
 800e648:	e7f9      	b.n	800e63e <prvIsQueueEmpty+0x10>

0800e64a <prvCopyDataToQueue>:
{
 800e64a:	b570      	push	{r4, r5, r6, lr}
 800e64c:	0004      	movs	r4, r0
 800e64e:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e650:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e652:	2a00      	cmp	r2, #0
 800e654:	d10d      	bne.n	800e672 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e656:	6803      	ldr	r3, [r0, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d004      	beq.n	800e666 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800e65c:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800e65e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e660:	3301      	adds	r3, #1
 800e662:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e664:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e666:	6840      	ldr	r0, [r0, #4]
 800e668:	f000 ffb4 	bl	800f5d4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e66c:	2300      	movs	r3, #0
 800e66e:	6063      	str	r3, [r4, #4]
 800e670:	e7f5      	b.n	800e65e <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e672:	2d00      	cmp	r5, #0
 800e674:	d10d      	bne.n	800e692 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e676:	6880      	ldr	r0, [r0, #8]
 800e678:	f006 fa81 	bl	8014b7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e67c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e67e:	68a3      	ldr	r3, [r4, #8]
 800e680:	189b      	adds	r3, r3, r2
 800e682:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e684:	6862      	ldr	r2, [r4, #4]
 800e686:	4293      	cmp	r3, r2
 800e688:	d31d      	bcc.n	800e6c6 <prvCopyDataToQueue+0x7c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e68a:	6823      	ldr	r3, [r4, #0]
 800e68c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e68e:	0028      	movs	r0, r5
 800e690:	e7e5      	b.n	800e65e <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e692:	68c0      	ldr	r0, [r0, #12]
 800e694:	f006 fa73 	bl	8014b7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e698:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e69a:	4251      	negs	r1, r2
 800e69c:	68e3      	ldr	r3, [r4, #12]
 800e69e:	1a9b      	subs	r3, r3, r2
 800e6a0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6a2:	6822      	ldr	r2, [r4, #0]
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d202      	bcs.n	800e6ae <prvCopyDataToQueue+0x64>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e6a8:	6863      	ldr	r3, [r4, #4]
 800e6aa:	185b      	adds	r3, r3, r1
 800e6ac:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e6ae:	2d02      	cmp	r5, #2
 800e6b0:	d001      	beq.n	800e6b6 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	e7d3      	b.n	800e65e <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d006      	beq.n	800e6ca <prvCopyDataToQueue+0x80>
				--( pxQueue->uxMessagesWaiting );
 800e6bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e7cb      	b.n	800e65e <prvCopyDataToQueue+0x14>
 800e6c6:	0028      	movs	r0, r5
 800e6c8:	e7c9      	b.n	800e65e <prvCopyDataToQueue+0x14>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	e7c7      	b.n	800e65e <prvCopyDataToQueue+0x14>

0800e6ce <prvCopyDataFromQueue>:
{
 800e6ce:	b510      	push	{r4, lr}
 800e6d0:	0003      	movs	r3, r0
 800e6d2:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6d6:	2a00      	cmp	r2, #0
 800e6d8:	d00a      	beq.n	800e6f0 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e6da:	68dc      	ldr	r4, [r3, #12]
 800e6dc:	18a4      	adds	r4, r4, r2
 800e6de:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6e0:	6859      	ldr	r1, [r3, #4]
 800e6e2:	428c      	cmp	r4, r1
 800e6e4:	d301      	bcc.n	800e6ea <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e6e6:	6819      	ldr	r1, [r3, #0]
 800e6e8:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e6ea:	68d9      	ldr	r1, [r3, #12]
 800e6ec:	f006 fa47 	bl	8014b7e <memcpy>
}
 800e6f0:	bd10      	pop	{r4, pc}

0800e6f2 <prvUnlockQueue>:
{
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e6f6:	f001 fb21 	bl	800fd3c <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e6fa:	e002      	b.n	800e702 <prvUnlockQueue+0x10>
			--( pxQueue->xTxLock );
 800e6fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e6fe:	3b01      	subs	r3, #1
 800e700:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e702:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e704:	2b00      	cmp	r3, #0
 800e706:	dd0b      	ble.n	800e720 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d008      	beq.n	800e720 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e70e:	0020      	movs	r0, r4
 800e710:	3024      	adds	r0, #36	; 0x24
 800e712:	f000 fe99 	bl	800f448 <xTaskRemoveFromEventList>
 800e716:	2800      	cmp	r0, #0
 800e718:	d0f0      	beq.n	800e6fc <prvUnlockQueue+0xa>
						vTaskMissedYield();
 800e71a:	f000 ff05 	bl	800f528 <vTaskMissedYield>
 800e71e:	e7ed      	b.n	800e6fc <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800e720:	2301      	movs	r3, #1
 800e722:	425b      	negs	r3, r3
 800e724:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800e726:	f001 fb15 	bl	800fd54 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e72a:	f001 fb07 	bl	800fd3c <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e72e:	e002      	b.n	800e736 <prvUnlockQueue+0x44>
				--( pxQueue->xRxLock );
 800e730:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e732:	3b01      	subs	r3, #1
 800e734:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e736:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e738:	2b00      	cmp	r3, #0
 800e73a:	dd0b      	ble.n	800e754 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e73c:	6923      	ldr	r3, [r4, #16]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d008      	beq.n	800e754 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e742:	0020      	movs	r0, r4
 800e744:	3010      	adds	r0, #16
 800e746:	f000 fe7f 	bl	800f448 <xTaskRemoveFromEventList>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d0f0      	beq.n	800e730 <prvUnlockQueue+0x3e>
					vTaskMissedYield();
 800e74e:	f000 feeb 	bl	800f528 <vTaskMissedYield>
 800e752:	e7ed      	b.n	800e730 <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800e754:	2301      	movs	r3, #1
 800e756:	425b      	negs	r3, r3
 800e758:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800e75a:	f001 fafb 	bl	800fd54 <vPortExitCritical>
}
 800e75e:	bd10      	pop	{r4, pc}

0800e760 <xQueueGenericReset>:
{
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	0004      	movs	r4, r0
 800e764:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800e766:	f001 fae9 	bl	800fd3c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e76a:	6822      	ldr	r2, [r4, #0]
 800e76c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e76e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e770:	0001      	movs	r1, r0
 800e772:	4359      	muls	r1, r3
 800e774:	1851      	adds	r1, r2, r1
 800e776:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e778:	2100      	movs	r1, #0
 800e77a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e77c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e77e:	3b01      	subs	r3, #1
 800e780:	4343      	muls	r3, r0
 800e782:	18d2      	adds	r2, r2, r3
 800e784:	60e2      	str	r2, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e786:	2301      	movs	r3, #1
 800e788:	425b      	negs	r3, r3
 800e78a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e78c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e78e:	2d00      	cmp	r5, #0
 800e790:	d10f      	bne.n	800e7b2 <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e792:	6923      	ldr	r3, [r4, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d103      	bne.n	800e7a0 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
 800e798:	f001 fadc 	bl	800fd54 <vPortExitCritical>
}
 800e79c:	2001      	movs	r0, #1
 800e79e:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e7a0:	0020      	movs	r0, r4
 800e7a2:	3010      	adds	r0, #16
 800e7a4:	f000 fe50 	bl	800f448 <xTaskRemoveFromEventList>
 800e7a8:	2801      	cmp	r0, #1
 800e7aa:	d1f5      	bne.n	800e798 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800e7ac:	f001 faba 	bl	800fd24 <vPortYield>
 800e7b0:	e7f2      	b.n	800e798 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e7b2:	0020      	movs	r0, r4
 800e7b4:	3010      	adds	r0, #16
 800e7b6:	f7ff fee9 	bl	800e58c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e7ba:	0020      	movs	r0, r4
 800e7bc:	3024      	adds	r0, #36	; 0x24
 800e7be:	f7ff fee5 	bl	800e58c <vListInitialise>
 800e7c2:	e7e9      	b.n	800e798 <xQueueGenericReset+0x38>

0800e7c4 <xQueueGenericCreate>:
{
 800e7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c6:	0006      	movs	r6, r0
 800e7c8:	000d      	movs	r5, r1
 800e7ca:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	d013      	beq.n	800e7f8 <xQueueGenericCreate+0x34>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7d0:	4348      	muls	r0, r1
 800e7d2:	3001      	adds	r0, #1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e7d4:	3054      	adds	r0, #84	; 0x54
 800e7d6:	f001 fb53 	bl	800fe80 <pvPortMalloc>
 800e7da:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e7dc:	d00a      	beq.n	800e7f4 <xQueueGenericCreate+0x30>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	d10c      	bne.n	800e7fc <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e7e2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e7e4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e7e6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	0020      	movs	r0, r4
 800e7ec:	f7ff ffb8 	bl	800e760 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e7f0:	2350      	movs	r3, #80	; 0x50
 800e7f2:	54e7      	strb	r7, [r4, r3]
}
 800e7f4:	0020      	movs	r0, r4
 800e7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xQueueSizeInBytes = ( size_t ) 0;
 800e7f8:	0008      	movs	r0, r1
 800e7fa:	e7eb      	b.n	800e7d4 <xQueueGenericCreate+0x10>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e7fc:	0003      	movs	r3, r0
 800e7fe:	3354      	adds	r3, #84	; 0x54
 800e800:	6003      	str	r3, [r0, #0]
 800e802:	e7ef      	b.n	800e7e4 <xQueueGenericCreate+0x20>

0800e804 <xQueueCreateCountingSemaphore>:
	{
 800e804:	b510      	push	{r4, lr}
 800e806:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e808:	2202      	movs	r2, #2
 800e80a:	2100      	movs	r1, #0
 800e80c:	f7ff ffda 	bl	800e7c4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e810:	2800      	cmp	r0, #0
 800e812:	d000      	beq.n	800e816 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e814:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e816:	bd10      	pop	{r4, pc}

0800e818 <xQueueGenericSend>:
{
 800e818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e81a:	b085      	sub	sp, #20
 800e81c:	0004      	movs	r4, r0
 800e81e:	000d      	movs	r5, r1
 800e820:	9201      	str	r2, [sp, #4]
 800e822:	001e      	movs	r6, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e824:	2700      	movs	r7, #0
 800e826:	e02e      	b.n	800e886 <xQueueGenericSend+0x6e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e828:	0032      	movs	r2, r6
 800e82a:	0029      	movs	r1, r5
 800e82c:	0020      	movs	r0, r4
 800e82e:	f7ff ff0c 	bl	800e64a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e834:	2b00      	cmp	r3, #0
 800e836:	d106      	bne.n	800e846 <xQueueGenericSend+0x2e>
					else if( xYieldRequired != pdFALSE )
 800e838:	2800      	cmp	r0, #0
 800e83a:	d10d      	bne.n	800e858 <xQueueGenericSend+0x40>
				taskEXIT_CRITICAL();
 800e83c:	f001 fa8a 	bl	800fd54 <vPortExitCritical>
				return pdPASS;
 800e840:	2001      	movs	r0, #1
}
 800e842:	b005      	add	sp, #20
 800e844:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e846:	0020      	movs	r0, r4
 800e848:	3024      	adds	r0, #36	; 0x24
 800e84a:	f000 fdfd 	bl	800f448 <xTaskRemoveFromEventList>
 800e84e:	2801      	cmp	r0, #1
 800e850:	d1f4      	bne.n	800e83c <xQueueGenericSend+0x24>
							queueYIELD_IF_USING_PREEMPTION();
 800e852:	f001 fa67 	bl	800fd24 <vPortYield>
 800e856:	e7f1      	b.n	800e83c <xQueueGenericSend+0x24>
						queueYIELD_IF_USING_PREEMPTION();
 800e858:	f001 fa64 	bl	800fd24 <vPortYield>
 800e85c:	e7ee      	b.n	800e83c <xQueueGenericSend+0x24>
					taskEXIT_CRITICAL();
 800e85e:	f001 fa79 	bl	800fd54 <vPortExitCritical>
					return errQUEUE_FULL;
 800e862:	2000      	movs	r0, #0
 800e864:	e7ed      	b.n	800e842 <xQueueGenericSend+0x2a>
					vTaskSetTimeOutState( &xTimeOut );
 800e866:	a802      	add	r0, sp, #8
 800e868:	f000 fe26 	bl	800f4b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e86c:	3701      	adds	r7, #1
 800e86e:	e017      	b.n	800e8a0 <xQueueGenericSend+0x88>
		prvLockQueue( pxQueue );
 800e870:	2300      	movs	r3, #0
 800e872:	6463      	str	r3, [r4, #68]	; 0x44
 800e874:	e01d      	b.n	800e8b2 <xQueueGenericSend+0x9a>
 800e876:	2300      	movs	r3, #0
 800e878:	64a3      	str	r3, [r4, #72]	; 0x48
 800e87a:	e01d      	b.n	800e8b8 <xQueueGenericSend+0xa0>
				prvUnlockQueue( pxQueue );
 800e87c:	0020      	movs	r0, r4
 800e87e:	f7ff ff38 	bl	800e6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e882:	f000 fc4d 	bl	800f120 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e886:	f001 fa59 	bl	800fd3c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e88a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e88c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e88e:	429a      	cmp	r2, r3
 800e890:	d3ca      	bcc.n	800e828 <xQueueGenericSend+0x10>
 800e892:	2e02      	cmp	r6, #2
 800e894:	d0c8      	beq.n	800e828 <xQueueGenericSend+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d0e0      	beq.n	800e85e <xQueueGenericSend+0x46>
				else if( xEntryTimeSet == pdFALSE )
 800e89c:	2f00      	cmp	r7, #0
 800e89e:	d0e2      	beq.n	800e866 <xQueueGenericSend+0x4e>
		taskEXIT_CRITICAL();
 800e8a0:	f001 fa58 	bl	800fd54 <vPortExitCritical>
		vTaskSuspendAll();
 800e8a4:	f000 fbb4 	bl	800f010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8a8:	f001 fa48 	bl	800fd3c <vPortEnterCritical>
 800e8ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e8ae:	3101      	adds	r1, #1
 800e8b0:	d0de      	beq.n	800e870 <xQueueGenericSend+0x58>
 800e8b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	d0de      	beq.n	800e876 <xQueueGenericSend+0x5e>
 800e8b8:	f001 fa4c 	bl	800fd54 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8bc:	a901      	add	r1, sp, #4
 800e8be:	a802      	add	r0, sp, #8
 800e8c0:	f000 fe06 	bl	800f4d0 <xTaskCheckForTimeOut>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d113      	bne.n	800e8f0 <xQueueGenericSend+0xd8>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e8c8:	0020      	movs	r0, r4
 800e8ca:	f7ff fea1 	bl	800e610 <prvIsQueueFull>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d0d4      	beq.n	800e87c <xQueueGenericSend+0x64>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e8d2:	9901      	ldr	r1, [sp, #4]
 800e8d4:	0020      	movs	r0, r4
 800e8d6:	3010      	adds	r0, #16
 800e8d8:	f000 fd88 	bl	800f3ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8dc:	0020      	movs	r0, r4
 800e8de:	f7ff ff08 	bl	800e6f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8e2:	f000 fc1d 	bl	800f120 <xTaskResumeAll>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d1cd      	bne.n	800e886 <xQueueGenericSend+0x6e>
					portYIELD_WITHIN_API();
 800e8ea:	f001 fa1b 	bl	800fd24 <vPortYield>
 800e8ee:	e7ca      	b.n	800e886 <xQueueGenericSend+0x6e>
			prvUnlockQueue( pxQueue );
 800e8f0:	0020      	movs	r0, r4
 800e8f2:	f7ff fefe 	bl	800e6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8f6:	f000 fc13 	bl	800f120 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	e7a1      	b.n	800e842 <xQueueGenericSend+0x2a>

0800e8fe <xQueueGenericSendFromISR>:
{
 800e8fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e900:	b083      	sub	sp, #12
 800e902:	0004      	movs	r4, r0
 800e904:	000e      	movs	r6, r1
 800e906:	9201      	str	r2, [sp, #4]
 800e908:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e90a:	f001 fa2d 	bl	800fd68 <ulSetInterruptMaskFromISR>
 800e90e:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e914:	429a      	cmp	r2, r3
 800e916:	d308      	bcc.n	800e92a <xQueueGenericSendFromISR+0x2c>
 800e918:	2d02      	cmp	r5, #2
 800e91a:	d006      	beq.n	800e92a <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800e91c:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e91e:	0038      	movs	r0, r7
 800e920:	f001 fa27 	bl	800fd72 <vClearInterruptMaskFromISR>
}
 800e924:	0020      	movs	r0, r4
 800e926:	b003      	add	sp, #12
 800e928:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e92a:	002a      	movs	r2, r5
 800e92c:	0031      	movs	r1, r6
 800e92e:	0020      	movs	r0, r4
 800e930:	f7ff fe8b 	bl	800e64a <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e934:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e936:	3301      	adds	r3, #1
 800e938:	d004      	beq.n	800e944 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800e93a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e93c:	3301      	adds	r3, #1
 800e93e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e940:	2401      	movs	r4, #1
 800e942:	e7ec      	b.n	800e91e <xQueueGenericSendFromISR+0x20>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e946:	2b00      	cmp	r3, #0
 800e948:	d101      	bne.n	800e94e <xQueueGenericSendFromISR+0x50>
			xReturn = pdPASS;
 800e94a:	2401      	movs	r4, #1
 800e94c:	e7e7      	b.n	800e91e <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e94e:	0020      	movs	r0, r4
 800e950:	3024      	adds	r0, #36	; 0x24
 800e952:	f000 fd79 	bl	800f448 <xTaskRemoveFromEventList>
 800e956:	2800      	cmp	r0, #0
 800e958:	d006      	beq.n	800e968 <xQueueGenericSendFromISR+0x6a>
							if( pxHigherPriorityTaskWoken != NULL )
 800e95a:	9a01      	ldr	r2, [sp, #4]
 800e95c:	2a00      	cmp	r2, #0
 800e95e:	d005      	beq.n	800e96c <xQueueGenericSendFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e960:	2301      	movs	r3, #1
 800e962:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 800e964:	2401      	movs	r4, #1
 800e966:	e7da      	b.n	800e91e <xQueueGenericSendFromISR+0x20>
 800e968:	2401      	movs	r4, #1
 800e96a:	e7d8      	b.n	800e91e <xQueueGenericSendFromISR+0x20>
 800e96c:	2401      	movs	r4, #1
 800e96e:	e7d6      	b.n	800e91e <xQueueGenericSendFromISR+0x20>

0800e970 <xQueueGiveFromISR>:
{
 800e970:	b570      	push	{r4, r5, r6, lr}
 800e972:	0004      	movs	r4, r0
 800e974:	000e      	movs	r6, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e976:	f001 f9f7 	bl	800fd68 <ulSetInterruptMaskFromISR>
 800e97a:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e97c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e97e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e980:	429a      	cmp	r2, r3
 800e982:	d21b      	bcs.n	800e9bc <xQueueGiveFromISR+0x4c>
			++( pxQueue->uxMessagesWaiting );
 800e984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e986:	3301      	adds	r3, #1
 800e988:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e98a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e98c:	3301      	adds	r3, #1
 800e98e:	d004      	beq.n	800e99a <xQueueGiveFromISR+0x2a>
				++( pxQueue->xTxLock );
 800e990:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e992:	3301      	adds	r3, #1
 800e994:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e996:	2401      	movs	r4, #1
 800e998:	e011      	b.n	800e9be <xQueueGiveFromISR+0x4e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <xQueueGiveFromISR+0x34>
			xReturn = pdPASS;
 800e9a0:	2401      	movs	r4, #1
 800e9a2:	e00c      	b.n	800e9be <xQueueGiveFromISR+0x4e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9a4:	0020      	movs	r0, r4
 800e9a6:	3024      	adds	r0, #36	; 0x24
 800e9a8:	f000 fd4e 	bl	800f448 <xTaskRemoveFromEventList>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d00b      	beq.n	800e9c8 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 800e9b0:	2e00      	cmp	r6, #0
 800e9b2:	d00b      	beq.n	800e9cc <xQueueGiveFromISR+0x5c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800e9b8:	2401      	movs	r4, #1
 800e9ba:	e000      	b.n	800e9be <xQueueGiveFromISR+0x4e>
			xReturn = errQUEUE_FULL;
 800e9bc:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e9be:	0028      	movs	r0, r5
 800e9c0:	f001 f9d7 	bl	800fd72 <vClearInterruptMaskFromISR>
}
 800e9c4:	0020      	movs	r0, r4
 800e9c6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800e9c8:	2401      	movs	r4, #1
 800e9ca:	e7f8      	b.n	800e9be <xQueueGiveFromISR+0x4e>
 800e9cc:	2401      	movs	r4, #1
 800e9ce:	e7f6      	b.n	800e9be <xQueueGiveFromISR+0x4e>

0800e9d0 <xQueueGenericReceive>:
{
 800e9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	0004      	movs	r4, r0
 800e9d6:	000e      	movs	r6, r1
 800e9d8:	9201      	str	r2, [sp, #4]
 800e9da:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800e9dc:	2700      	movs	r7, #0
 800e9de:	e04a      	b.n	800ea76 <xQueueGenericReceive+0xa6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e9e0:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9e2:	0031      	movs	r1, r6
 800e9e4:	0020      	movs	r0, r4
 800e9e6:	f7ff fe72 	bl	800e6ce <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e9ea:	2d00      	cmp	r5, #0
 800e9ec:	d11a      	bne.n	800ea24 <xQueueGenericReceive+0x54>
					--( pxQueue->uxMessagesWaiting );
 800e9ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d007      	beq.n	800ea0a <xQueueGenericReceive+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9fa:	6923      	ldr	r3, [r4, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d108      	bne.n	800ea12 <xQueueGenericReceive+0x42>
				taskEXIT_CRITICAL();
 800ea00:	f001 f9a8 	bl	800fd54 <vPortExitCritical>
				return pdPASS;
 800ea04:	2001      	movs	r0, #1
}
 800ea06:	b005      	add	sp, #20
 800ea08:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ea0a:	f000 fec9 	bl	800f7a0 <pvTaskIncrementMutexHeldCount>
 800ea0e:	6060      	str	r0, [r4, #4]
 800ea10:	e7f3      	b.n	800e9fa <xQueueGenericReceive+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ea12:	0020      	movs	r0, r4
 800ea14:	3010      	adds	r0, #16
 800ea16:	f000 fd17 	bl	800f448 <xTaskRemoveFromEventList>
 800ea1a:	2801      	cmp	r0, #1
 800ea1c:	d1f0      	bne.n	800ea00 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800ea1e:	f001 f981 	bl	800fd24 <vPortYield>
 800ea22:	e7ed      	b.n	800ea00 <xQueueGenericReceive+0x30>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ea24:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d0e9      	beq.n	800ea00 <xQueueGenericReceive+0x30>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea2c:	0020      	movs	r0, r4
 800ea2e:	3024      	adds	r0, #36	; 0x24
 800ea30:	f000 fd0a 	bl	800f448 <xTaskRemoveFromEventList>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d0e3      	beq.n	800ea00 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800ea38:	f001 f974 	bl	800fd24 <vPortYield>
 800ea3c:	e7e0      	b.n	800ea00 <xQueueGenericReceive+0x30>
					taskEXIT_CRITICAL();
 800ea3e:	f001 f989 	bl	800fd54 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ea42:	2000      	movs	r0, #0
 800ea44:	e7df      	b.n	800ea06 <xQueueGenericReceive+0x36>
					vTaskSetTimeOutState( &xTimeOut );
 800ea46:	a802      	add	r0, sp, #8
 800ea48:	f000 fd36 	bl	800f4b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea4c:	3701      	adds	r7, #1
 800ea4e:	e01c      	b.n	800ea8a <xQueueGenericReceive+0xba>
		prvLockQueue( pxQueue );
 800ea50:	2300      	movs	r3, #0
 800ea52:	6463      	str	r3, [r4, #68]	; 0x44
 800ea54:	e022      	b.n	800ea9c <xQueueGenericReceive+0xcc>
 800ea56:	2300      	movs	r3, #0
 800ea58:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea5a:	e022      	b.n	800eaa2 <xQueueGenericReceive+0xd2>
						taskENTER_CRITICAL();
 800ea5c:	f001 f96e 	bl	800fd3c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ea60:	6860      	ldr	r0, [r4, #4]
 800ea62:	f000 fd79 	bl	800f558 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ea66:	f001 f975 	bl	800fd54 <vPortExitCritical>
 800ea6a:	e02a      	b.n	800eac2 <xQueueGenericReceive+0xf2>
				prvUnlockQueue( pxQueue );
 800ea6c:	0020      	movs	r0, r4
 800ea6e:	f7ff fe40 	bl	800e6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea72:	f000 fb55 	bl	800f120 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ea76:	f001 f961 	bl	800fd3c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1af      	bne.n	800e9e0 <xQueueGenericReceive+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0db      	beq.n	800ea3e <xQueueGenericReceive+0x6e>
				else if( xEntryTimeSet == pdFALSE )
 800ea86:	2f00      	cmp	r7, #0
 800ea88:	d0dd      	beq.n	800ea46 <xQueueGenericReceive+0x76>
		taskEXIT_CRITICAL();
 800ea8a:	f001 f963 	bl	800fd54 <vPortExitCritical>
		vTaskSuspendAll();
 800ea8e:	f000 fabf 	bl	800f010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea92:	f001 f953 	bl	800fd3c <vPortEnterCritical>
 800ea96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea98:	3301      	adds	r3, #1
 800ea9a:	d0d9      	beq.n	800ea50 <xQueueGenericReceive+0x80>
 800ea9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ea9e:	3201      	adds	r2, #1
 800eaa0:	d0d9      	beq.n	800ea56 <xQueueGenericReceive+0x86>
 800eaa2:	f001 f957 	bl	800fd54 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eaa6:	a901      	add	r1, sp, #4
 800eaa8:	a802      	add	r0, sp, #8
 800eaaa:	f000 fd11 	bl	800f4d0 <xTaskCheckForTimeOut>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d116      	bne.n	800eae0 <xQueueGenericReceive+0x110>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eab2:	0020      	movs	r0, r4
 800eab4:	f7ff fdbb 	bl	800e62e <prvIsQueueEmpty>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d0d7      	beq.n	800ea6c <xQueueGenericReceive+0x9c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0cc      	beq.n	800ea5c <xQueueGenericReceive+0x8c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eac2:	9901      	ldr	r1, [sp, #4]
 800eac4:	0020      	movs	r0, r4
 800eac6:	3024      	adds	r0, #36	; 0x24
 800eac8:	f000 fc90 	bl	800f3ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eacc:	0020      	movs	r0, r4
 800eace:	f7ff fe10 	bl	800e6f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ead2:	f000 fb25 	bl	800f120 <xTaskResumeAll>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d1cd      	bne.n	800ea76 <xQueueGenericReceive+0xa6>
					portYIELD_WITHIN_API();
 800eada:	f001 f923 	bl	800fd24 <vPortYield>
 800eade:	e7ca      	b.n	800ea76 <xQueueGenericReceive+0xa6>
			prvUnlockQueue( pxQueue );
 800eae0:	0020      	movs	r0, r4
 800eae2:	f7ff fe06 	bl	800e6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eae6:	f000 fb1b 	bl	800f120 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800eaea:	2000      	movs	r0, #0
 800eaec:	e78b      	b.n	800ea06 <xQueueGenericReceive+0x36>

0800eaee <xQueueReceiveFromISR>:
{
 800eaee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf0:	0004      	movs	r4, r0
 800eaf2:	000e      	movs	r6, r1
 800eaf4:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaf6:	f001 f937 	bl	800fd68 <ulSetInterruptMaskFromISR>
 800eafa:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eafc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d105      	bne.n	800eb0e <xQueueReceiveFromISR+0x20>
			xReturn = pdFAIL;
 800eb02:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eb04:	0028      	movs	r0, r5
 800eb06:	f001 f934 	bl	800fd72 <vClearInterruptMaskFromISR>
}
 800eb0a:	0020      	movs	r0, r4
 800eb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb0e:	0031      	movs	r1, r6
 800eb10:	0020      	movs	r0, r4
 800eb12:	f7ff fddc 	bl	800e6ce <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800eb16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800eb1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb1e:	3301      	adds	r3, #1
 800eb20:	d004      	beq.n	800eb2c <xQueueReceiveFromISR+0x3e>
				++( pxQueue->xRxLock );
 800eb22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb24:	3301      	adds	r3, #1
 800eb26:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800eb28:	2401      	movs	r4, #1
 800eb2a:	e7eb      	b.n	800eb04 <xQueueReceiveFromISR+0x16>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb2c:	6923      	ldr	r3, [r4, #16]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <xQueueReceiveFromISR+0x48>
			xReturn = pdPASS;
 800eb32:	2401      	movs	r4, #1
 800eb34:	e7e6      	b.n	800eb04 <xQueueReceiveFromISR+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb36:	0020      	movs	r0, r4
 800eb38:	3010      	adds	r0, #16
 800eb3a:	f000 fc85 	bl	800f448 <xTaskRemoveFromEventList>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d005      	beq.n	800eb4e <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800eb42:	2f00      	cmp	r7, #0
 800eb44:	d005      	beq.n	800eb52 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eb46:	2301      	movs	r3, #1
 800eb48:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800eb4a:	2401      	movs	r4, #1
 800eb4c:	e7da      	b.n	800eb04 <xQueueReceiveFromISR+0x16>
 800eb4e:	2401      	movs	r4, #1
 800eb50:	e7d8      	b.n	800eb04 <xQueueReceiveFromISR+0x16>
 800eb52:	2401      	movs	r4, #1
 800eb54:	e7d6      	b.n	800eb04 <xQueueReceiveFromISR+0x16>
	...

0800eb58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb58:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	2b07      	cmp	r3, #7
 800eb5e:	d80a      	bhi.n	800eb76 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb60:	4a05      	ldr	r2, [pc, #20]	; (800eb78 <vQueueAddToRegistry+0x20>)
 800eb62:	00dc      	lsls	r4, r3, #3
 800eb64:	58a2      	ldr	r2, [r4, r2]
 800eb66:	2a00      	cmp	r2, #0
 800eb68:	d001      	beq.n	800eb6e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	e7f6      	b.n	800eb5c <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb6e:	4a02      	ldr	r2, [pc, #8]	; (800eb78 <vQueueAddToRegistry+0x20>)
 800eb70:	50a1      	str	r1, [r4, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb72:	1912      	adds	r2, r2, r4
 800eb74:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb76:	bd10      	pop	{r4, pc}
 800eb78:	20002b20 	.word	0x20002b20

0800eb7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	0004      	movs	r4, r0
 800eb80:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb82:	f001 f8db 	bl	800fd3c <vPortEnterCritical>
 800eb86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb88:	3301      	adds	r3, #1
 800eb8a:	d00b      	beq.n	800eba4 <vQueueWaitForMessageRestricted+0x28>
 800eb8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb8e:	3301      	adds	r3, #1
 800eb90:	d00b      	beq.n	800ebaa <vQueueWaitForMessageRestricted+0x2e>
 800eb92:	f001 f8df 	bl	800fd54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d009      	beq.n	800ebb0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb9c:	0020      	movs	r0, r4
 800eb9e:	f7ff fda8 	bl	800e6f2 <prvUnlockQueue>
	}
 800eba2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800eba4:	2300      	movs	r3, #0
 800eba6:	6463      	str	r3, [r4, #68]	; 0x44
 800eba8:	e7f0      	b.n	800eb8c <vQueueWaitForMessageRestricted+0x10>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	64a3      	str	r3, [r4, #72]	; 0x48
 800ebae:	e7f0      	b.n	800eb92 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebb0:	0020      	movs	r0, r4
 800ebb2:	3024      	adds	r0, #36	; 0x24
 800ebb4:	0029      	movs	r1, r5
 800ebb6:	f000 fc35 	bl	800f424 <vTaskPlaceOnEventListRestricted>
 800ebba:	e7ef      	b.n	800eb9c <vQueueWaitForMessageRestricted+0x20>

0800ebbc <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800ebbc:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebbe:	e001      	b.n	800ebc4 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ebc0:	3001      	adds	r0, #1
			ulCount++;
 800ebc2:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebc4:	7802      	ldrb	r2, [r0, #0]
 800ebc6:	2aa5      	cmp	r2, #165	; 0xa5
 800ebc8:	d0fa      	beq.n	800ebc0 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ebca:	0898      	lsrs	r0, r3, #2

		return ( uint16_t ) ulCount;
 800ebcc:	b280      	uxth	r0, r0
	}
 800ebce:	4770      	bx	lr

0800ebd0 <prvListTaskWithinSingleList>:
	{
 800ebd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd2:	46de      	mov	lr, fp
 800ebd4:	4657      	mov	r7, sl
 800ebd6:	464e      	mov	r6, r9
 800ebd8:	4645      	mov	r5, r8
 800ebda:	b5e0      	push	{r5, r6, r7, lr}
 800ebdc:	4681      	mov	r9, r0
 800ebde:	000e      	movs	r6, r1
 800ebe0:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ebe2:	680f      	ldr	r7, [r1, #0]
 800ebe4:	2f00      	cmp	r7, #0
 800ebe6:	d039      	beq.n	800ec5c <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ebe8:	684b      	ldr	r3, [r1, #4]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	604b      	str	r3, [r1, #4]
 800ebee:	2208      	movs	r2, #8
 800ebf0:	4692      	mov	sl, r2
 800ebf2:	448a      	add	sl, r1
 800ebf4:	4553      	cmp	r3, sl
 800ebf6:	d004      	beq.n	800ec02 <prvListTaskWithinSingleList+0x32>
 800ebf8:	6873      	ldr	r3, [r6, #4]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800ebfe:	2700      	movs	r7, #0
 800ec00:	e010      	b.n	800ec24 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	604b      	str	r3, [r1, #4]
 800ec06:	e7f7      	b.n	800ebf8 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	6073      	str	r3, [r6, #4]
 800ec0c:	e00f      	b.n	800ec2e <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ec0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ec10:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ec12:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ec14:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ec16:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800ec18:	f7ff ffd0 	bl	800ebbc <prvTaskCheckFreeStackSpace>
 800ec1c:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800ec1e:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800ec20:	45ab      	cmp	fp, r5
 800ec22:	d01b      	beq.n	800ec5c <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ec24:	6873      	ldr	r3, [r6, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	6073      	str	r3, [r6, #4]
 800ec2a:	459a      	cmp	sl, r3
 800ec2c:	d0ec      	beq.n	800ec08 <prvListTaskWithinSingleList+0x38>
 800ec2e:	6873      	ldr	r3, [r6, #4]
 800ec30:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ec32:	017c      	lsls	r4, r7, #5
 800ec34:	444c      	add	r4, r9
 800ec36:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ec38:	002b      	movs	r3, r5
 800ec3a:	3334      	adds	r3, #52	; 0x34
 800ec3c:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ec3e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ec40:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ec42:	4643      	mov	r3, r8
 800ec44:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ec46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec48:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800ec4a:	4643      	mov	r3, r8
 800ec4c:	2b03      	cmp	r3, #3
 800ec4e:	d1de      	bne.n	800ec0e <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ec50:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d0db      	beq.n	800ec0e <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ec56:	2302      	movs	r3, #2
 800ec58:	7323      	strb	r3, [r4, #12]
 800ec5a:	e7d8      	b.n	800ec0e <prvListTaskWithinSingleList+0x3e>
	}
 800ec5c:	0038      	movs	r0, r7
 800ec5e:	bcf0      	pop	{r4, r5, r6, r7}
 800ec60:	46bb      	mov	fp, r7
 800ec62:	46b2      	mov	sl, r6
 800ec64:	46a9      	mov	r9, r5
 800ec66:	46a0      	mov	r8, r4
 800ec68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec6c:	4b08      	ldr	r3, [pc, #32]	; (800ec90 <prvResetNextTaskUnblockTime+0x24>)
 800ec6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d104      	bne.n	800ec80 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <prvResetNextTaskUnblockTime+0x28>)
 800ec78:	2201      	movs	r2, #1
 800ec7a:	4252      	negs	r2, r2
 800ec7c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800ec7e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ec80:	4b03      	ldr	r3, [pc, #12]	; (800ec90 <prvResetNextTaskUnblockTime+0x24>)
 800ec82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ec88:	685a      	ldr	r2, [r3, #4]
 800ec8a:	4b02      	ldr	r3, [pc, #8]	; (800ec94 <prvResetNextTaskUnblockTime+0x28>)
 800ec8c:	601a      	str	r2, [r3, #0]
}
 800ec8e:	e7f6      	b.n	800ec7e <prvResetNextTaskUnblockTime+0x12>
 800ec90:	20002b60 	.word	0x20002b60
 800ec94:	200000c4 	.word	0x200000c4

0800ec98 <prvDeleteTCB>:
	{
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800ec9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ec9e:	f001 f953 	bl	800ff48 <vPortFree>
		vPortFree( pxTCB );
 800eca2:	0020      	movs	r0, r4
 800eca4:	f001 f950 	bl	800ff48 <vPortFree>
	}
 800eca8:	bd10      	pop	{r4, pc}

0800ecaa <prvAllocateTCBAndStack>:
{
 800ecaa:	b570      	push	{r4, r5, r6, lr}
 800ecac:	0005      	movs	r5, r0
 800ecae:	1e0c      	subs	r4, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb0:	d010      	beq.n	800ecd4 <prvAllocateTCBAndStack+0x2a>
		if( pxStack != NULL )
 800ecb2:	2c00      	cmp	r4, #0
 800ecb4:	d017      	beq.n	800ece6 <prvAllocateTCBAndStack+0x3c>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ecb6:	2060      	movs	r0, #96	; 0x60
 800ecb8:	f001 f8e2 	bl	800fe80 <pvPortMalloc>
 800ecbc:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800ecbe:	d00e      	beq.n	800ecde <prvAllocateTCBAndStack+0x34>
				pxNewTCB->pxStack = pxStack;
 800ecc0:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800ecc2:	2e00      	cmp	r6, #0
 800ecc4:	d004      	beq.n	800ecd0 <prvAllocateTCBAndStack+0x26>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ecc6:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800ecc8:	00aa      	lsls	r2, r5, #2
 800ecca:	21a5      	movs	r1, #165	; 0xa5
 800eccc:	f005 fe2b 	bl	8014926 <memset>
}
 800ecd0:	0030      	movs	r0, r6
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecd4:	0080      	lsls	r0, r0, #2
 800ecd6:	f001 f8d3 	bl	800fe80 <pvPortMalloc>
 800ecda:	0004      	movs	r4, r0
 800ecdc:	e7e9      	b.n	800ecb2 <prvAllocateTCBAndStack+0x8>
				vPortFree( pxStack );
 800ecde:	0020      	movs	r0, r4
 800ece0:	f001 f932 	bl	800ff48 <vPortFree>
 800ece4:	e7ed      	b.n	800ecc2 <prvAllocateTCBAndStack+0x18>
			pxNewTCB = NULL;
 800ece6:	0026      	movs	r6, r4
	return pxNewTCB;
 800ece8:	e7f2      	b.n	800ecd0 <prvAllocateTCBAndStack+0x26>

0800ecea <prvInitialiseTCBVariables>:
{
 800ecea:	b570      	push	{r4, r5, r6, lr}
 800ecec:	0005      	movs	r5, r0
 800ecee:	0016      	movs	r6, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	2b0c      	cmp	r3, #12
 800ecf4:	d807      	bhi.n	800ed06 <prvInitialiseTCBVariables+0x1c>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ecf6:	5cc8      	ldrb	r0, [r1, r3]
 800ecf8:	18ec      	adds	r4, r5, r3
 800ecfa:	3434      	adds	r4, #52	; 0x34
 800ecfc:	7020      	strb	r0, [r4, #0]
		if( pcName[ x ] == 0x00 )
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d001      	beq.n	800ed06 <prvInitialiseTCBVariables+0x1c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed02:	3301      	adds	r3, #1
 800ed04:	e7f5      	b.n	800ecf2 <prvInitialiseTCBVariables+0x8>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed06:	2340      	movs	r3, #64	; 0x40
 800ed08:	2200      	movs	r2, #0
 800ed0a:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed0c:	2e06      	cmp	r6, #6
 800ed0e:	d900      	bls.n	800ed12 <prvInitialiseTCBVariables+0x28>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed10:	2606      	movs	r6, #6
	pxTCB->uxPriority = uxPriority;
 800ed12:	62ee      	str	r6, [r5, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ed14:	64ee      	str	r6, [r5, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ed16:	2400      	movs	r4, #0
 800ed18:	652c      	str	r4, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ed1a:	1d28      	adds	r0, r5, #4
 800ed1c:	f7ff fc41 	bl	800e5a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ed20:	0028      	movs	r0, r5
 800ed22:	3018      	adds	r0, #24
 800ed24:	f7ff fc3d 	bl	800e5a2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ed28:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed2a:	2307      	movs	r3, #7
 800ed2c:	1b9b      	subs	r3, r3, r6
 800ed2e:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ed30:	626d      	str	r5, [r5, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ed32:	656c      	str	r4, [r5, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ed34:	65ac      	str	r4, [r5, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ed36:	235c      	movs	r3, #92	; 0x5c
 800ed38:	54ec      	strb	r4, [r5, r3]
}
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}

0800ed3c <prvInitialiseTaskLists>:
{
 800ed3c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed3e:	2400      	movs	r4, #0
 800ed40:	e007      	b.n	800ed52 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed42:	00a3      	lsls	r3, r4, #2
 800ed44:	191b      	adds	r3, r3, r4
 800ed46:	0098      	lsls	r0, r3, #2
 800ed48:	4b0f      	ldr	r3, [pc, #60]	; (800ed88 <prvInitialiseTaskLists+0x4c>)
 800ed4a:	18c0      	adds	r0, r0, r3
 800ed4c:	f7ff fc1e 	bl	800e58c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed50:	3401      	adds	r4, #1
 800ed52:	2c06      	cmp	r4, #6
 800ed54:	d9f5      	bls.n	800ed42 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800ed56:	4c0d      	ldr	r4, [pc, #52]	; (800ed8c <prvInitialiseTaskLists+0x50>)
 800ed58:	0026      	movs	r6, r4
 800ed5a:	362c      	adds	r6, #44	; 0x2c
 800ed5c:	0030      	movs	r0, r6
 800ed5e:	f7ff fc15 	bl	800e58c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed62:	0025      	movs	r5, r4
 800ed64:	3540      	adds	r5, #64	; 0x40
 800ed66:	0028      	movs	r0, r5
 800ed68:	f7ff fc10 	bl	800e58c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed6c:	0020      	movs	r0, r4
 800ed6e:	3014      	adds	r0, #20
 800ed70:	f7ff fc0c 	bl	800e58c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ed74:	0020      	movs	r0, r4
 800ed76:	3054      	adds	r0, #84	; 0x54
 800ed78:	f7ff fc08 	bl	800e58c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ed7c:	0020      	movs	r0, r4
 800ed7e:	f7ff fc05 	bl	800e58c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed82:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed84:	66a5      	str	r5, [r4, #104]	; 0x68
}
 800ed86:	bd70      	pop	{r4, r5, r6, pc}
 800ed88:	20002c00 	.word	0x20002c00
 800ed8c:	20002b60 	.word	0x20002b60

0800ed90 <prvAddCurrentTaskToDelayedList>:
{
 800ed90:	b510      	push	{r4, lr}
 800ed92:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800ed94:	4b0c      	ldr	r3, [pc, #48]	; (800edc8 <prvAddCurrentTaskToDelayedList+0x38>)
 800ed96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ed98:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800ed9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed9c:	4283      	cmp	r3, r0
 800ed9e:	d906      	bls.n	800edae <prvAddCurrentTaskToDelayedList+0x1e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eda0:	4b09      	ldr	r3, [pc, #36]	; (800edc8 <prvAddCurrentTaskToDelayedList+0x38>)
 800eda2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800eda4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eda6:	3104      	adds	r1, #4
 800eda8:	f7ff fc09 	bl	800e5be <vListInsert>
}
 800edac:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800edae:	4b06      	ldr	r3, [pc, #24]	; (800edc8 <prvAddCurrentTaskToDelayedList+0x38>)
 800edb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800edb2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800edb4:	3104      	adds	r1, #4
 800edb6:	f7ff fc02 	bl	800e5be <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800edba:	4b04      	ldr	r3, [pc, #16]	; (800edcc <prvAddCurrentTaskToDelayedList+0x3c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	d9f4      	bls.n	800edac <prvAddCurrentTaskToDelayedList+0x1c>
			xNextTaskUnblockTime = xTimeToWake;
 800edc2:	4b02      	ldr	r3, [pc, #8]	; (800edcc <prvAddCurrentTaskToDelayedList+0x3c>)
 800edc4:	601c      	str	r4, [r3, #0]
}
 800edc6:	e7f1      	b.n	800edac <prvAddCurrentTaskToDelayedList+0x1c>
 800edc8:	20002b60 	.word	0x20002b60
 800edcc:	200000c4 	.word	0x200000c4

0800edd0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800edd0:	b510      	push	{r4, lr}
 800edd2:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800edd4:	f005 fecb 	bl	8014b6e <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800edd8:	0020      	movs	r0, r4
 800edda:	f7f1 f99d 	bl	8000118 <strlen>
 800edde:	e002      	b.n	800ede6 <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 800ede0:	2320      	movs	r3, #32
 800ede2:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ede4:	3001      	adds	r0, #1
 800ede6:	280b      	cmp	r0, #11
 800ede8:	ddfa      	ble.n	800ede0 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800edea:	1820      	adds	r0, r4, r0
 800edec:	2300      	movs	r3, #0
 800edee:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800edf0:	bd10      	pop	{r4, pc}
	...

0800edf4 <xTaskGenericCreate>:
{
 800edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf6:	46ce      	mov	lr, r9
 800edf8:	b500      	push	{lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	9003      	str	r0, [sp, #12]
 800edfe:	000f      	movs	r7, r1
 800ee00:	0015      	movs	r5, r2
 800ee02:	001e      	movs	r6, r3
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800ee04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee06:	0010      	movs	r0, r2
 800ee08:	f7ff ff4f 	bl	800ecaa <prvAllocateTCBAndStack>
 800ee0c:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
 800ee0e:	d05b      	beq.n	800eec8 <xTaskGenericCreate+0xd4>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ee10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ee12:	4a31      	ldr	r2, [pc, #196]	; (800eed8 <xTaskGenericCreate+0xe4>)
 800ee14:	18aa      	adds	r2, r5, r2
 800ee16:	0092      	lsls	r2, r2, #2
 800ee18:	189b      	adds	r3, r3, r2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ee1a:	2207      	movs	r2, #7
 800ee1c:	4393      	bics	r3, r2
 800ee1e:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800ee20:	9500      	str	r5, [sp, #0]
 800ee22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee26:	0039      	movs	r1, r7
 800ee28:	f7ff ff5f 	bl	800ecea <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee2c:	0032      	movs	r2, r6
 800ee2e:	9903      	ldr	r1, [sp, #12]
 800ee30:	4648      	mov	r0, r9
 800ee32:	f000 ff49 	bl	800fcc8 <pxPortInitialiseStack>
 800ee36:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ee38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d000      	beq.n	800ee40 <xTaskGenericCreate+0x4c>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee3e:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ee40:	f000 ff7c 	bl	800fd3c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ee44:	4b25      	ldr	r3, [pc, #148]	; (800eedc <xTaskGenericCreate+0xe8>)
 800ee46:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ee48:	3201      	adds	r2, #1
 800ee4a:	675a      	str	r2, [r3, #116]	; 0x74
			if( pxCurrentTCB == NULL )
 800ee4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00c      	beq.n	800ee6c <xTaskGenericCreate+0x78>
				if( xSchedulerRunning == pdFALSE )
 800ee52:	4b22      	ldr	r3, [pc, #136]	; (800eedc <xTaskGenericCreate+0xe8>)
 800ee54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d10d      	bne.n	800ee76 <xTaskGenericCreate+0x82>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ee5a:	4b20      	ldr	r3, [pc, #128]	; (800eedc <xTaskGenericCreate+0xe8>)
 800ee5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d807      	bhi.n	800ee76 <xTaskGenericCreate+0x82>
						pxCurrentTCB = pxNewTCB;
 800ee66:	4b1d      	ldr	r3, [pc, #116]	; (800eedc <xTaskGenericCreate+0xe8>)
 800ee68:	66dc      	str	r4, [r3, #108]	; 0x6c
 800ee6a:	e004      	b.n	800ee76 <xTaskGenericCreate+0x82>
				pxCurrentTCB =  pxNewTCB;
 800ee6c:	4b1b      	ldr	r3, [pc, #108]	; (800eedc <xTaskGenericCreate+0xe8>)
 800ee6e:	66dc      	str	r4, [r3, #108]	; 0x6c
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d021      	beq.n	800eeba <xTaskGenericCreate+0xc6>
			uxTaskNumber++;
 800ee76:	4a19      	ldr	r2, [pc, #100]	; (800eedc <xTaskGenericCreate+0xe8>)
 800ee78:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	67d3      	str	r3, [r2, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee7e:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800ee80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ee82:	4a17      	ldr	r2, [pc, #92]	; (800eee0 <xTaskGenericCreate+0xec>)
 800ee84:	6812      	ldr	r2, [r2, #0]
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d901      	bls.n	800ee8e <xTaskGenericCreate+0x9a>
 800ee8a:	4a15      	ldr	r2, [pc, #84]	; (800eee0 <xTaskGenericCreate+0xec>)
 800ee8c:	6013      	str	r3, [r2, #0]
 800ee8e:	1d21      	adds	r1, r4, #4
 800ee90:	0098      	lsls	r0, r3, #2
 800ee92:	18c0      	adds	r0, r0, r3
 800ee94:	0080      	lsls	r0, r0, #2
 800ee96:	4b13      	ldr	r3, [pc, #76]	; (800eee4 <xTaskGenericCreate+0xf0>)
 800ee98:	18c0      	adds	r0, r0, r3
 800ee9a:	f7ff fb85 	bl	800e5a8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800ee9e:	f000 ff59 	bl	800fd54 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800eea2:	4b0e      	ldr	r3, [pc, #56]	; (800eedc <xTaskGenericCreate+0xe8>)
 800eea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d014      	beq.n	800eed4 <xTaskGenericCreate+0xe0>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800eeaa:	4b0c      	ldr	r3, [pc, #48]	; (800eedc <xTaskGenericCreate+0xe8>)
 800eeac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d304      	bcc.n	800eec0 <xTaskGenericCreate+0xcc>
			xReturn = pdPASS;
 800eeb6:	2001      	movs	r0, #1
	return xReturn;
 800eeb8:	e008      	b.n	800eecc <xTaskGenericCreate+0xd8>
					prvInitialiseTaskLists();
 800eeba:	f7ff ff3f 	bl	800ed3c <prvInitialiseTaskLists>
 800eebe:	e7da      	b.n	800ee76 <xTaskGenericCreate+0x82>
				taskYIELD_IF_USING_PREEMPTION();
 800eec0:	f000 ff30 	bl	800fd24 <vPortYield>
			xReturn = pdPASS;
 800eec4:	2001      	movs	r0, #1
 800eec6:	e001      	b.n	800eecc <xTaskGenericCreate+0xd8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eec8:	2001      	movs	r0, #1
 800eeca:	4240      	negs	r0, r0
}
 800eecc:	b004      	add	sp, #16
 800eece:	bc80      	pop	{r7}
 800eed0:	46b9      	mov	r9, r7
 800eed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800eed4:	2001      	movs	r0, #1
 800eed6:	e7f9      	b.n	800eecc <xTaskGenericCreate+0xd8>
 800eed8:	3fffffff 	.word	0x3fffffff
 800eedc:	20002b60 	.word	0x20002b60
 800eee0:	20002be0 	.word	0x20002be0
 800eee4:	20002c00 	.word	0x20002c00

0800eee8 <uxTaskPriorityGet>:
	{
 800eee8:	b510      	push	{r4, lr}
 800eeea:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800eeec:	f000 ff26 	bl	800fd3c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800eef0:	2c00      	cmp	r4, #0
 800eef2:	d004      	beq.n	800eefe <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800eef4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800eef6:	f000 ff2d 	bl	800fd54 <vPortExitCritical>
	}
 800eefa:	0020      	movs	r0, r4
 800eefc:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800eefe:	4b01      	ldr	r3, [pc, #4]	; (800ef04 <uxTaskPriorityGet+0x1c>)
 800ef00:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800ef02:	e7f7      	b.n	800eef4 <uxTaskPriorityGet+0xc>
 800ef04:	20002b60 	.word	0x20002b60

0800ef08 <vTaskPrioritySet>:
	{
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	0004      	movs	r4, r0
 800ef0c:	000d      	movs	r5, r1
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef0e:	2906      	cmp	r1, #6
 800ef10:	d900      	bls.n	800ef14 <vTaskPrioritySet+0xc>
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef12:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800ef14:	f000 ff12 	bl	800fd3c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ef18:	2c00      	cmp	r4, #0
 800ef1a:	d00e      	beq.n	800ef3a <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ef1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ef1e:	429d      	cmp	r5, r3
 800ef20:	d027      	beq.n	800ef72 <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800ef22:	d90d      	bls.n	800ef40 <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800ef24:	4a24      	ldr	r2, [pc, #144]	; (800efb8 <vTaskPrioritySet+0xb0>)
 800ef26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ef28:	42a2      	cmp	r2, r4
 800ef2a:	d025      	beq.n	800ef78 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ef2c:	4a22      	ldr	r2, [pc, #136]	; (800efb8 <vTaskPrioritySet+0xb0>)
 800ef2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ef30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ef32:	42aa      	cmp	r2, r5
 800ef34:	d922      	bls.n	800ef7c <vTaskPrioritySet+0x74>
	BaseType_t xYieldRequired = pdFALSE;
 800ef36:	2600      	movs	r6, #0
 800ef38:	e007      	b.n	800ef4a <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ef3a:	4b1f      	ldr	r3, [pc, #124]	; (800efb8 <vTaskPrioritySet+0xb0>)
 800ef3c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800ef3e:	e7ed      	b.n	800ef1c <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800ef40:	4a1d      	ldr	r2, [pc, #116]	; (800efb8 <vTaskPrioritySet+0xb0>)
 800ef42:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ef44:	42a2      	cmp	r2, r4
 800ef46:	d01b      	beq.n	800ef80 <vTaskPrioritySet+0x78>
	BaseType_t xYieldRequired = pdFALSE;
 800ef48:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d019      	beq.n	800ef84 <vTaskPrioritySet+0x7c>
					pxTCB->uxBasePriority = uxNewPriority;
 800ef50:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef52:	69a3      	ldr	r3, [r4, #24]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	db02      	blt.n	800ef5e <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef58:	2307      	movs	r3, #7
 800ef5a:	1b5b      	subs	r3, r3, r5
 800ef5c:	61a3      	str	r3, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ef5e:	6961      	ldr	r1, [r4, #20]
 800ef60:	0093      	lsls	r3, r2, #2
 800ef62:	189b      	adds	r3, r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4a15      	ldr	r2, [pc, #84]	; (800efbc <vTaskPrioritySet+0xb4>)
 800ef68:	189b      	adds	r3, r3, r2
 800ef6a:	4299      	cmp	r1, r3
 800ef6c:	d00c      	beq.n	800ef88 <vTaskPrioritySet+0x80>
				if( xYieldRequired == pdTRUE )
 800ef6e:	2e01      	cmp	r6, #1
 800ef70:	d01e      	beq.n	800efb0 <vTaskPrioritySet+0xa8>
		taskEXIT_CRITICAL();
 800ef72:	f000 feef 	bl	800fd54 <vPortExitCritical>
	}
 800ef76:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800ef78:	2600      	movs	r6, #0
 800ef7a:	e7e6      	b.n	800ef4a <vTaskPrioritySet+0x42>
							xYieldRequired = pdTRUE;
 800ef7c:	2601      	movs	r6, #1
 800ef7e:	e7e4      	b.n	800ef4a <vTaskPrioritySet+0x42>
					xYieldRequired = pdTRUE;
 800ef80:	2601      	movs	r6, #1
 800ef82:	e7e2      	b.n	800ef4a <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800ef84:	62e5      	str	r5, [r4, #44]	; 0x2c
 800ef86:	e7e3      	b.n	800ef50 <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ef88:	1d25      	adds	r5, r4, #4
 800ef8a:	0028      	movs	r0, r5
 800ef8c:	f7ff fb2e 	bl	800e5ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef92:	4a0b      	ldr	r2, [pc, #44]	; (800efc0 <vTaskPrioritySet+0xb8>)
 800ef94:	6812      	ldr	r2, [r2, #0]
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d901      	bls.n	800ef9e <vTaskPrioritySet+0x96>
 800ef9a:	4a09      	ldr	r2, [pc, #36]	; (800efc0 <vTaskPrioritySet+0xb8>)
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	0098      	lsls	r0, r3, #2
 800efa0:	18c0      	adds	r0, r0, r3
 800efa2:	0080      	lsls	r0, r0, #2
 800efa4:	4b05      	ldr	r3, [pc, #20]	; (800efbc <vTaskPrioritySet+0xb4>)
 800efa6:	18c0      	adds	r0, r0, r3
 800efa8:	0029      	movs	r1, r5
 800efaa:	f7ff fafd 	bl	800e5a8 <vListInsertEnd>
 800efae:	e7de      	b.n	800ef6e <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800efb0:	f000 feb8 	bl	800fd24 <vPortYield>
 800efb4:	e7dd      	b.n	800ef72 <vTaskPrioritySet+0x6a>
 800efb6:	46c0      	nop			; (mov r8, r8)
 800efb8:	20002b60 	.word	0x20002b60
 800efbc:	20002c00 	.word	0x20002c00
 800efc0:	20002be0 	.word	0x20002be0

0800efc4 <vTaskStartScheduler>:
{
 800efc4:	b500      	push	{lr}
 800efc6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800efc8:	490e      	ldr	r1, [pc, #56]	; (800f004 <vTaskStartScheduler+0x40>)
 800efca:	480f      	ldr	r0, [pc, #60]	; (800f008 <vTaskStartScheduler+0x44>)
 800efcc:	2300      	movs	r3, #0
 800efce:	9303      	str	r3, [sp, #12]
 800efd0:	9302      	str	r3, [sp, #8]
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	2296      	movs	r2, #150	; 0x96
 800efd8:	f7ff ff0c 	bl	800edf4 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800efdc:	2801      	cmp	r0, #1
 800efde:	d003      	beq.n	800efe8 <vTaskStartScheduler+0x24>
	if( xReturn == pdPASS )
 800efe0:	2801      	cmp	r0, #1
 800efe2:	d004      	beq.n	800efee <vTaskStartScheduler+0x2a>
}
 800efe4:	b005      	add	sp, #20
 800efe6:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800efe8:	f000 fce0 	bl	800f9ac <xTimerCreateTimerTask>
 800efec:	e7f8      	b.n	800efe0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800efee:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800eff0:	4b06      	ldr	r3, [pc, #24]	; (800f00c <vTaskStartScheduler+0x48>)
 800eff2:	2201      	movs	r2, #1
 800eff4:	679a      	str	r2, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800eff6:	2200      	movs	r2, #0
 800eff8:	671a      	str	r2, [r3, #112]	; 0x70
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800effa:	f7f8 ff05 	bl	8007e08 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800effe:	f000 fe77 	bl	800fcf0 <xPortStartScheduler>
}
 800f002:	e7ef      	b.n	800efe4 <vTaskStartScheduler+0x20>
 800f004:	0801c56c 	.word	0x0801c56c
 800f008:	0800f265 	.word	0x0800f265
 800f00c:	20002b60 	.word	0x20002b60

0800f010 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f010:	4a02      	ldr	r2, [pc, #8]	; (800f01c <vTaskSuspendAll+0xc>)
 800f012:	6893      	ldr	r3, [r2, #8]
 800f014:	3301      	adds	r3, #1
 800f016:	6093      	str	r3, [r2, #8]
}
 800f018:	4770      	bx	lr
 800f01a:	46c0      	nop			; (mov r8, r8)
 800f01c:	20002be0 	.word	0x20002be0

0800f020 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f020:	4b01      	ldr	r3, [pc, #4]	; (800f028 <xTaskGetTickCount+0x8>)
 800f022:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800f024:	4770      	bx	lr
 800f026:	46c0      	nop			; (mov r8, r8)
 800f028:	20002b60 	.word	0x20002b60

0800f02c <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f02c:	4b01      	ldr	r3, [pc, #4]	; (800f034 <xTaskGetTickCountFromISR+0x8>)
 800f02e:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800f030:	4770      	bx	lr
 800f032:	46c0      	nop			; (mov r8, r8)
 800f034:	20002b60 	.word	0x20002b60

0800f038 <xTaskIncrementTick>:
{
 800f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f03a:	4b35      	ldr	r3, [pc, #212]	; (800f110 <xTaskIncrementTick+0xd8>)
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d15a      	bne.n	800f0f8 <xTaskIncrementTick+0xc0>
		++xTickCount;
 800f042:	4b34      	ldr	r3, [pc, #208]	; (800f114 <xTaskIncrementTick+0xdc>)
 800f044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f046:	3201      	adds	r2, #1
 800f048:	671a      	str	r2, [r3, #112]	; 0x70
			const TickType_t xConstTickCount = xTickCount;
 800f04a:	6f1f      	ldr	r7, [r3, #112]	; 0x70
			if( xConstTickCount == ( TickType_t ) 0U )
 800f04c:	2f00      	cmp	r7, #0
 800f04e:	d010      	beq.n	800f072 <xTaskIncrementTick+0x3a>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f050:	4b31      	ldr	r3, [pc, #196]	; (800f118 <xTaskIncrementTick+0xe0>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	42bb      	cmp	r3, r7
 800f056:	d945      	bls.n	800f0e4 <xTaskIncrementTick+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 800f058:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f05a:	4b2e      	ldr	r3, [pc, #184]	; (800f114 <xTaskIncrementTick+0xdc>)
 800f05c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f060:	4a2e      	ldr	r2, [pc, #184]	; (800f11c <xTaskIncrementTick+0xe4>)
 800f062:	008b      	lsls	r3, r1, #2
 800f064:	185b      	adds	r3, r3, r1
 800f066:	0099      	lsls	r1, r3, #2
 800f068:	588b      	ldr	r3, [r1, r2]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d949      	bls.n	800f102 <xTaskIncrementTick+0xca>
				xSwitchRequired = pdTRUE;
 800f06e:	2601      	movs	r6, #1
 800f070:	e047      	b.n	800f102 <xTaskIncrementTick+0xca>
				taskSWITCH_DELAYED_LISTS();
 800f072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f074:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800f076:	6299      	str	r1, [r3, #40]	; 0x28
 800f078:	669a      	str	r2, [r3, #104]	; 0x68
 800f07a:	4a25      	ldr	r2, [pc, #148]	; (800f110 <xTaskIncrementTick+0xd8>)
 800f07c:	68d3      	ldr	r3, [r2, #12]
 800f07e:	3301      	adds	r3, #1
 800f080:	60d3      	str	r3, [r2, #12]
 800f082:	f7ff fdf3 	bl	800ec6c <prvResetNextTaskUnblockTime>
 800f086:	e7e3      	b.n	800f050 <xTaskIncrementTick+0x18>
								xSwitchRequired = pdTRUE;
 800f088:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f08a:	4b22      	ldr	r3, [pc, #136]	; (800f114 <xTaskIncrementTick+0xdc>)
 800f08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d029      	beq.n	800f0e8 <xTaskIncrementTick+0xb0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f094:	4b1f      	ldr	r3, [pc, #124]	; (800f114 <xTaskIncrementTick+0xdc>)
 800f096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f09c:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f09e:	429f      	cmp	r7, r3
 800f0a0:	d327      	bcc.n	800f0f2 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f0a2:	1d25      	adds	r5, r4, #4
 800f0a4:	0028      	movs	r0, r5
 800f0a6:	f7ff faa1 	bl	800e5ec <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <xTaskIncrementTick+0x80>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0b0:	0020      	movs	r0, r4
 800f0b2:	3018      	adds	r0, #24
 800f0b4:	f7ff fa9a 	bl	800e5ec <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f0b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f0ba:	4b15      	ldr	r3, [pc, #84]	; (800f110 <xTaskIncrementTick+0xd8>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d901      	bls.n	800f0c6 <xTaskIncrementTick+0x8e>
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <xTaskIncrementTick+0xd8>)
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	0093      	lsls	r3, r2, #2
 800f0c8:	189b      	adds	r3, r3, r2
 800f0ca:	0098      	lsls	r0, r3, #2
 800f0cc:	4b13      	ldr	r3, [pc, #76]	; (800f11c <xTaskIncrementTick+0xe4>)
 800f0ce:	18c0      	adds	r0, r0, r3
 800f0d0:	0029      	movs	r1, r5
 800f0d2:	f7ff fa69 	bl	800e5a8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f0d8:	4b0e      	ldr	r3, [pc, #56]	; (800f114 <xTaskIncrementTick+0xdc>)
 800f0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d2d2      	bcs.n	800f088 <xTaskIncrementTick+0x50>
 800f0e2:	e7d2      	b.n	800f08a <xTaskIncrementTick+0x52>
BaseType_t xSwitchRequired = pdFALSE;
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	e7d0      	b.n	800f08a <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f0e8:	4b0b      	ldr	r3, [pc, #44]	; (800f118 <xTaskIncrementTick+0xe0>)
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	4252      	negs	r2, r2
 800f0ee:	601a      	str	r2, [r3, #0]
						break;
 800f0f0:	e7b3      	b.n	800f05a <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800f0f2:	4a09      	ldr	r2, [pc, #36]	; (800f118 <xTaskIncrementTick+0xe0>)
 800f0f4:	6013      	str	r3, [r2, #0]
							break;
 800f0f6:	e7b0      	b.n	800f05a <xTaskIncrementTick+0x22>
		++uxPendedTicks;
 800f0f8:	4a05      	ldr	r2, [pc, #20]	; (800f110 <xTaskIncrementTick+0xd8>)
 800f0fa:	6913      	ldr	r3, [r2, #16]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	6113      	str	r3, [r2, #16]
BaseType_t xSwitchRequired = pdFALSE;
 800f100:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800f102:	4b03      	ldr	r3, [pc, #12]	; (800f110 <xTaskIncrementTick+0xd8>)
 800f104:	695b      	ldr	r3, [r3, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d000      	beq.n	800f10c <xTaskIncrementTick+0xd4>
			xSwitchRequired = pdTRUE;
 800f10a:	2601      	movs	r6, #1
}
 800f10c:	0030      	movs	r0, r6
 800f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f110:	20002be0 	.word	0x20002be0
 800f114:	20002b60 	.word	0x20002b60
 800f118:	200000c4 	.word	0x200000c4
 800f11c:	20002c00 	.word	0x20002c00

0800f120 <xTaskResumeAll>:
{
 800f120:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800f122:	f000 fe0b 	bl	800fd3c <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f126:	4b2c      	ldr	r3, [pc, #176]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	3a01      	subs	r2, #1
 800f12c:	609a      	str	r2, [r3, #8]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d14b      	bne.n	800f1cc <xTaskResumeAll+0xac>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f134:	4b29      	ldr	r3, [pc, #164]	; (800f1dc <xTaskResumeAll+0xbc>)
 800f136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10f      	bne.n	800f15c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800f13c:	2400      	movs	r4, #0
 800f13e:	e046      	b.n	800f1ce <xTaskResumeAll+0xae>
					prvAddTaskToReadyList( pxTCB );
 800f140:	0098      	lsls	r0, r3, #2
 800f142:	18c0      	adds	r0, r0, r3
 800f144:	0080      	lsls	r0, r0, #2
 800f146:	4b26      	ldr	r3, [pc, #152]	; (800f1e0 <xTaskResumeAll+0xc0>)
 800f148:	18c0      	adds	r0, r0, r3
 800f14a:	0029      	movs	r1, r5
 800f14c:	f7ff fa2c 	bl	800e5a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f150:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f152:	4b22      	ldr	r3, [pc, #136]	; (800f1dc <xTaskResumeAll+0xbc>)
 800f154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f158:	429a      	cmp	r2, r3
 800f15a:	d216      	bcs.n	800f18a <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f15c:	4b1f      	ldr	r3, [pc, #124]	; (800f1dc <xTaskResumeAll+0xbc>)
 800f15e:	695b      	ldr	r3, [r3, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d016      	beq.n	800f192 <xTaskResumeAll+0x72>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f164:	4b1d      	ldr	r3, [pc, #116]	; (800f1dc <xTaskResumeAll+0xbc>)
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f16a:	0020      	movs	r0, r4
 800f16c:	3018      	adds	r0, #24
 800f16e:	f7ff fa3d 	bl	800e5ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f172:	1d25      	adds	r5, r4, #4
 800f174:	0028      	movs	r0, r5
 800f176:	f7ff fa39 	bl	800e5ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f17a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f17c:	4a16      	ldr	r2, [pc, #88]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f17e:	6812      	ldr	r2, [r2, #0]
 800f180:	4293      	cmp	r3, r2
 800f182:	d9dd      	bls.n	800f140 <xTaskResumeAll+0x20>
 800f184:	4a14      	ldr	r2, [pc, #80]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	e7da      	b.n	800f140 <xTaskResumeAll+0x20>
						xYieldPending = pdTRUE;
 800f18a:	4b13      	ldr	r3, [pc, #76]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f18c:	2201      	movs	r2, #1
 800f18e:	615a      	str	r2, [r3, #20]
 800f190:	e7e4      	b.n	800f15c <xTaskResumeAll+0x3c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f192:	4b11      	ldr	r3, [pc, #68]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d109      	bne.n	800f1ae <xTaskResumeAll+0x8e>
				if( xYieldPending == pdTRUE )
 800f19a:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f19c:	695c      	ldr	r4, [r3, #20]
 800f19e:	2c01      	cmp	r4, #1
 800f1a0:	d011      	beq.n	800f1c6 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 800f1a2:	2400      	movs	r4, #0
 800f1a4:	e013      	b.n	800f1ce <xTaskResumeAll+0xae>
						--uxPendedTicks;
 800f1a6:	4a0c      	ldr	r2, [pc, #48]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f1a8:	6913      	ldr	r3, [r2, #16]
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	6113      	str	r3, [r2, #16]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f1ae:	4b0a      	ldr	r3, [pc, #40]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d0f1      	beq.n	800f19a <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800f1b6:	f7ff ff3f 	bl	800f038 <xTaskIncrementTick>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d0f3      	beq.n	800f1a6 <xTaskResumeAll+0x86>
							xYieldPending = pdTRUE;
 800f1be:	4b06      	ldr	r3, [pc, #24]	; (800f1d8 <xTaskResumeAll+0xb8>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	615a      	str	r2, [r3, #20]
 800f1c4:	e7ef      	b.n	800f1a6 <xTaskResumeAll+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f1c6:	f000 fdad 	bl	800fd24 <vPortYield>
 800f1ca:	e000      	b.n	800f1ce <xTaskResumeAll+0xae>
BaseType_t xAlreadyYielded = pdFALSE;
 800f1cc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f1ce:	f000 fdc1 	bl	800fd54 <vPortExitCritical>
}
 800f1d2:	0020      	movs	r0, r4
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	46c0      	nop			; (mov r8, r8)
 800f1d8:	20002be0 	.word	0x20002be0
 800f1dc:	20002b60 	.word	0x20002b60
 800f1e0:	20002c00 	.word	0x20002c00

0800f1e4 <vTaskDelay>:
	{
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f1e8:	d00f      	beq.n	800f20a <vTaskDelay+0x26>
			vTaskSuspendAll();
 800f1ea:	f7ff ff11 	bl	800f010 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f1ee:	4a08      	ldr	r2, [pc, #32]	; (800f210 <vTaskDelay+0x2c>)
 800f1f0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f1f2:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f1f4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800f1f6:	3004      	adds	r0, #4
 800f1f8:	f7ff f9f8 	bl	800e5ec <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f1fc:	0020      	movs	r0, r4
 800f1fe:	f7ff fdc7 	bl	800ed90 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f202:	f7ff ff8d 	bl	800f120 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f206:	2800      	cmp	r0, #0
 800f208:	d101      	bne.n	800f20e <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 800f20a:	f000 fd8b 	bl	800fd24 <vPortYield>
	}
 800f20e:	bd10      	pop	{r4, pc}
 800f210:	20002b60 	.word	0x20002b60

0800f214 <prvCheckTasksWaitingTermination>:
{
 800f214:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f216:	4b11      	ldr	r3, [pc, #68]	; (800f25c <prvCheckTasksWaitingTermination+0x48>)
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d01c      	beq.n	800f258 <prvCheckTasksWaitingTermination+0x44>
			vTaskSuspendAll();
 800f21e:	f7ff fef7 	bl	800f010 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f222:	4b0f      	ldr	r3, [pc, #60]	; (800f260 <prvCheckTasksWaitingTermination+0x4c>)
 800f224:	6d5c      	ldr	r4, [r3, #84]	; 0x54
			( void ) xTaskResumeAll();
 800f226:	f7ff ff7b 	bl	800f120 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	d0f3      	beq.n	800f216 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800f22e:	f000 fd85 	bl	800fd3c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f232:	4c0b      	ldr	r4, [pc, #44]	; (800f260 <prvCheckTasksWaitingTermination+0x4c>)
 800f234:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f236:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f238:	1d28      	adds	r0, r5, #4
 800f23a:	f7ff f9d7 	bl	800e5ec <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f23e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f240:	3b01      	subs	r3, #1
 800f242:	6763      	str	r3, [r4, #116]	; 0x74
					--uxTasksDeleted;
 800f244:	4a05      	ldr	r2, [pc, #20]	; (800f25c <prvCheckTasksWaitingTermination+0x48>)
 800f246:	6853      	ldr	r3, [r2, #4]
 800f248:	3b01      	subs	r3, #1
 800f24a:	6053      	str	r3, [r2, #4]
				taskEXIT_CRITICAL();
 800f24c:	f000 fd82 	bl	800fd54 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800f250:	0028      	movs	r0, r5
 800f252:	f7ff fd21 	bl	800ec98 <prvDeleteTCB>
 800f256:	e7de      	b.n	800f216 <prvCheckTasksWaitingTermination+0x2>
}
 800f258:	bd70      	pop	{r4, r5, r6, pc}
 800f25a:	46c0      	nop			; (mov r8, r8)
 800f25c:	20002be0 	.word	0x20002be0
 800f260:	20002b60 	.word	0x20002b60

0800f264 <prvIdleTask>:
{
 800f264:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800f266:	f7ff ffd5 	bl	800f214 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f26a:	4b03      	ldr	r3, [pc, #12]	; (800f278 <prvIdleTask+0x14>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d9f9      	bls.n	800f266 <prvIdleTask+0x2>
				taskYIELD();
 800f272:	f000 fd57 	bl	800fd24 <vPortYield>
 800f276:	e7f6      	b.n	800f266 <prvIdleTask+0x2>
 800f278:	20002c00 	.word	0x20002c00

0800f27c <uxTaskGetSystemState>:
	{
 800f27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27e:	0006      	movs	r6, r0
 800f280:	000c      	movs	r4, r1
 800f282:	0015      	movs	r5, r2
		vTaskSuspendAll();
 800f284:	f7ff fec4 	bl	800f010 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f288:	4b1e      	ldr	r3, [pc, #120]	; (800f304 <uxTaskGetSystemState+0x88>)
 800f28a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f28c:	42a3      	cmp	r3, r4
 800f28e:	d833      	bhi.n	800f2f8 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f290:	2707      	movs	r7, #7
 800f292:	2400      	movs	r4, #0
					uxQueue--;
 800f294:	3f01      	subs	r7, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f296:	0160      	lsls	r0, r4, #5
 800f298:	1830      	adds	r0, r6, r0
 800f29a:	00b9      	lsls	r1, r7, #2
 800f29c:	19c9      	adds	r1, r1, r7
 800f29e:	0089      	lsls	r1, r1, #2
 800f2a0:	4b19      	ldr	r3, [pc, #100]	; (800f308 <uxTaskGetSystemState+0x8c>)
 800f2a2:	18c9      	adds	r1, r1, r3
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f7ff fc93 	bl	800ebd0 <prvListTaskWithinSingleList>
 800f2aa:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ac:	2f00      	cmp	r7, #0
 800f2ae:	d1f1      	bne.n	800f294 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f2b0:	0160      	lsls	r0, r4, #5
 800f2b2:	1830      	adds	r0, r6, r0
 800f2b4:	4f13      	ldr	r7, [pc, #76]	; (800f304 <uxTaskGetSystemState+0x88>)
 800f2b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	f7ff fc89 	bl	800ebd0 <prvListTaskWithinSingleList>
 800f2be:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f2c0:	0160      	lsls	r0, r4, #5
 800f2c2:	1830      	adds	r0, r6, r0
 800f2c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	f7ff fc82 	bl	800ebd0 <prvListTaskWithinSingleList>
 800f2cc:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f2ce:	0160      	lsls	r0, r4, #5
 800f2d0:	1830      	adds	r0, r6, r0
 800f2d2:	0039      	movs	r1, r7
 800f2d4:	3154      	adds	r1, #84	; 0x54
 800f2d6:	2204      	movs	r2, #4
 800f2d8:	f7ff fc7a 	bl	800ebd0 <prvListTaskWithinSingleList>
 800f2dc:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f2de:	0160      	lsls	r0, r4, #5
 800f2e0:	1830      	adds	r0, r6, r0
 800f2e2:	2203      	movs	r2, #3
 800f2e4:	0039      	movs	r1, r7
 800f2e6:	f7ff fc73 	bl	800ebd0 <prvListTaskWithinSingleList>
 800f2ea:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f2ec:	2d00      	cmp	r5, #0
 800f2ee:	d004      	beq.n	800f2fa <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f2f0:	f7f8 fd9a 	bl	8007e28 <ulMainGetRunTimeCounterValue>
 800f2f4:	6028      	str	r0, [r5, #0]
 800f2f6:	e000      	b.n	800f2fa <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f2f8:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800f2fa:	f7ff ff11 	bl	800f120 <xTaskResumeAll>
	}
 800f2fe:	0020      	movs	r0, r4
 800f300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f302:	46c0      	nop			; (mov r8, r8)
 800f304:	20002b60 	.word	0x20002b60
 800f308:	20002c00 	.word	0x20002c00

0800f30c <vTaskSwitchContext>:
{
 800f30c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f30e:	4b33      	ldr	r3, [pc, #204]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f316:	4b31      	ldr	r3, [pc, #196]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f318:	2201      	movs	r2, #1
 800f31a:	615a      	str	r2, [r3, #20]
}
 800f31c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f31e:	4c2f      	ldr	r4, [pc, #188]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f320:	2300      	movs	r3, #0
 800f322:	6163      	str	r3, [r4, #20]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f324:	f7f8 fd80 	bl	8007e28 <ulMainGetRunTimeCounterValue>
 800f328:	61a0      	str	r0, [r4, #24]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f32a:	69e3      	ldr	r3, [r4, #28]
 800f32c:	4298      	cmp	r0, r3
 800f32e:	d905      	bls.n	800f33c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f330:	4a2b      	ldr	r2, [pc, #172]	; (800f3e0 <vTaskSwitchContext+0xd4>)
 800f332:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 800f334:	1ac3      	subs	r3, r0, r3
 800f336:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800f338:	18d3      	adds	r3, r2, r3
 800f33a:	654b      	str	r3, [r1, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f33c:	4b27      	ldr	r3, [pc, #156]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f33e:	61d8      	str	r0, [r3, #28]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f340:	4b27      	ldr	r3, [pc, #156]	; (800f3e0 <vTaskSwitchContext+0xd4>)
 800f342:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f344:	6812      	ldr	r2, [r2, #0]
 800f346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d90f      	bls.n	800f36e <vTaskSwitchContext+0x62>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f34e:	4b24      	ldr	r3, [pc, #144]	; (800f3e0 <vTaskSwitchContext+0xd4>)
 800f350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f352:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f354:	4923      	ldr	r1, [pc, #140]	; (800f3e4 <vTaskSwitchContext+0xd8>)
 800f356:	2214      	movs	r2, #20
 800f358:	f005 fac4 	bl	80148e4 <memcmp>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d011      	beq.n	800f384 <vTaskSwitchContext+0x78>
 800f360:	4b1f      	ldr	r3, [pc, #124]	; (800f3e0 <vTaskSwitchContext+0xd4>)
 800f362:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f364:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f366:	3134      	adds	r1, #52	; 0x34
 800f368:	f7fe f9c6 	bl	800d6f8 <vApplicationStackOverflowHook>
 800f36c:	e00a      	b.n	800f384 <vTaskSwitchContext+0x78>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f36e:	4b1c      	ldr	r3, [pc, #112]	; (800f3e0 <vTaskSwitchContext+0xd4>)
 800f370:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f372:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f374:	3134      	adds	r1, #52	; 0x34
 800f376:	f7fe f9bf 	bl	800d6f8 <vApplicationStackOverflowHook>
 800f37a:	e7e8      	b.n	800f34e <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f37c:	4a17      	ldr	r2, [pc, #92]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f37e:	6813      	ldr	r3, [r2, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	6013      	str	r3, [r2, #0]
 800f384:	4b15      	ldr	r3, [pc, #84]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f386:	6819      	ldr	r1, [r3, #0]
 800f388:	4a17      	ldr	r2, [pc, #92]	; (800f3e8 <vTaskSwitchContext+0xdc>)
 800f38a:	008b      	lsls	r3, r1, #2
 800f38c:	185b      	adds	r3, r3, r1
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	589b      	ldr	r3, [r3, r2]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0f2      	beq.n	800f37c <vTaskSwitchContext+0x70>
 800f396:	4b11      	ldr	r3, [pc, #68]	; (800f3dc <vTaskSwitchContext+0xd0>)
 800f398:	6819      	ldr	r1, [r3, #0]
 800f39a:	0010      	movs	r0, r2
 800f39c:	008b      	lsls	r3, r1, #2
 800f39e:	185a      	adds	r2, r3, r1
 800f3a0:	0092      	lsls	r2, r2, #2
 800f3a2:	1882      	adds	r2, r0, r2
 800f3a4:	6854      	ldr	r4, [r2, #4]
 800f3a6:	6864      	ldr	r4, [r4, #4]
 800f3a8:	6054      	str	r4, [r2, #4]
 800f3aa:	185b      	adds	r3, r3, r1
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	3308      	adds	r3, #8
 800f3b0:	181b      	adds	r3, r3, r0
 800f3b2:	429c      	cmp	r4, r3
 800f3b4:	d009      	beq.n	800f3ca <vTaskSwitchContext+0xbe>
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <vTaskSwitchContext+0xdc>)
 800f3b8:	008a      	lsls	r2, r1, #2
 800f3ba:	1852      	adds	r2, r2, r1
 800f3bc:	0092      	lsls	r2, r2, #2
 800f3be:	189b      	adds	r3, r3, r2
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	68da      	ldr	r2, [r3, #12]
 800f3c4:	4b06      	ldr	r3, [pc, #24]	; (800f3e0 <vTaskSwitchContext+0xd4>)
 800f3c6:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800f3c8:	e7a8      	b.n	800f31c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f3ca:	6860      	ldr	r0, [r4, #4]
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <vTaskSwitchContext+0xdc>)
 800f3ce:	008a      	lsls	r2, r1, #2
 800f3d0:	1852      	adds	r2, r2, r1
 800f3d2:	0092      	lsls	r2, r2, #2
 800f3d4:	189b      	adds	r3, r3, r2
 800f3d6:	6058      	str	r0, [r3, #4]
 800f3d8:	e7ed      	b.n	800f3b6 <vTaskSwitchContext+0xaa>
 800f3da:	46c0      	nop			; (mov r8, r8)
 800f3dc:	20002be0 	.word	0x20002be0
 800f3e0:	20002b60 	.word	0x20002b60
 800f3e4:	08019cf8 	.word	0x08019cf8
 800f3e8:	20002c00 	.word	0x20002c00

0800f3ec <vTaskPlaceOnEventList>:
{
 800f3ec:	b570      	push	{r4, r5, r6, lr}
 800f3ee:	000c      	movs	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3f0:	4d0b      	ldr	r5, [pc, #44]	; (800f420 <vTaskPlaceOnEventList+0x34>)
 800f3f2:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800f3f4:	3118      	adds	r1, #24
 800f3f6:	f7ff f8e2 	bl	800e5be <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f3fa:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800f3fc:	3004      	adds	r0, #4
 800f3fe:	f7ff f8f5 	bl	800e5ec <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f402:	1c63      	adds	r3, r4, #1
 800f404:	d005      	beq.n	800f412 <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800f406:	4b06      	ldr	r3, [pc, #24]	; (800f420 <vTaskPlaceOnEventList+0x34>)
 800f408:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f40a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f40c:	f7ff fcc0 	bl	800ed90 <prvAddCurrentTaskToDelayedList>
}
 800f410:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f412:	4803      	ldr	r0, [pc, #12]	; (800f420 <vTaskPlaceOnEventList+0x34>)
 800f414:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800f416:	3104      	adds	r1, #4
 800f418:	f7ff f8c6 	bl	800e5a8 <vListInsertEnd>
 800f41c:	e7f8      	b.n	800f410 <vTaskPlaceOnEventList+0x24>
 800f41e:	46c0      	nop			; (mov r8, r8)
 800f420:	20002b60 	.word	0x20002b60

0800f424 <vTaskPlaceOnEventListRestricted>:
	{
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	000c      	movs	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f428:	4d06      	ldr	r5, [pc, #24]	; (800f444 <vTaskPlaceOnEventListRestricted+0x20>)
 800f42a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800f42c:	3118      	adds	r1, #24
 800f42e:	f7ff f8bb 	bl	800e5a8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f432:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800f434:	3004      	adds	r0, #4
 800f436:	f7ff f8d9 	bl	800e5ec <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f43a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800f43c:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f43e:	f7ff fca7 	bl	800ed90 <prvAddCurrentTaskToDelayedList>
	}
 800f442:	bd70      	pop	{r4, r5, r6, pc}
 800f444:	20002b60 	.word	0x20002b60

0800f448 <xTaskRemoveFromEventList>:
{
 800f448:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f44a:	68c3      	ldr	r3, [r0, #12]
 800f44c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f44e:	0025      	movs	r5, r4
 800f450:	3518      	adds	r5, #24
 800f452:	0028      	movs	r0, r5
 800f454:	f7ff f8ca 	bl	800e5ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f458:	4b14      	ldr	r3, [pc, #80]	; (800f4ac <xTaskRemoveFromEventList+0x64>)
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d11d      	bne.n	800f49c <xTaskRemoveFromEventList+0x54>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f460:	1d25      	adds	r5, r4, #4
 800f462:	0028      	movs	r0, r5
 800f464:	f7ff f8c2 	bl	800e5ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f46a:	4a10      	ldr	r2, [pc, #64]	; (800f4ac <xTaskRemoveFromEventList+0x64>)
 800f46c:	6812      	ldr	r2, [r2, #0]
 800f46e:	4293      	cmp	r3, r2
 800f470:	d901      	bls.n	800f476 <xTaskRemoveFromEventList+0x2e>
 800f472:	4a0e      	ldr	r2, [pc, #56]	; (800f4ac <xTaskRemoveFromEventList+0x64>)
 800f474:	6013      	str	r3, [r2, #0]
 800f476:	0098      	lsls	r0, r3, #2
 800f478:	18c0      	adds	r0, r0, r3
 800f47a:	0080      	lsls	r0, r0, #2
 800f47c:	4b0c      	ldr	r3, [pc, #48]	; (800f4b0 <xTaskRemoveFromEventList+0x68>)
 800f47e:	18c0      	adds	r0, r0, r3
 800f480:	0029      	movs	r1, r5
 800f482:	f7ff f891 	bl	800e5a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f486:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f488:	4b0a      	ldr	r3, [pc, #40]	; (800f4b4 <xTaskRemoveFromEventList+0x6c>)
 800f48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48e:	429a      	cmp	r2, r3
 800f490:	d90a      	bls.n	800f4a8 <xTaskRemoveFromEventList+0x60>
		xYieldPending = pdTRUE;
 800f492:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <xTaskRemoveFromEventList+0x64>)
 800f494:	2201      	movs	r2, #1
 800f496:	615a      	str	r2, [r3, #20]
		xReturn = pdTRUE;
 800f498:	2001      	movs	r0, #1
}
 800f49a:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f49c:	4805      	ldr	r0, [pc, #20]	; (800f4b4 <xTaskRemoveFromEventList+0x6c>)
 800f49e:	3014      	adds	r0, #20
 800f4a0:	0029      	movs	r1, r5
 800f4a2:	f7ff f881 	bl	800e5a8 <vListInsertEnd>
 800f4a6:	e7ee      	b.n	800f486 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800f4a8:	2000      	movs	r0, #0
	return xReturn;
 800f4aa:	e7f6      	b.n	800f49a <xTaskRemoveFromEventList+0x52>
 800f4ac:	20002be0 	.word	0x20002be0
 800f4b0:	20002c00 	.word	0x20002c00
 800f4b4:	20002b60 	.word	0x20002b60

0800f4b8 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4b8:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <vTaskSetTimeOutState+0x10>)
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4be:	4b03      	ldr	r3, [pc, #12]	; (800f4cc <vTaskSetTimeOutState+0x14>)
 800f4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c2:	6043      	str	r3, [r0, #4]
}
 800f4c4:	4770      	bx	lr
 800f4c6:	46c0      	nop			; (mov r8, r8)
 800f4c8:	20002be0 	.word	0x20002be0
 800f4cc:	20002b60 	.word	0x20002b60

0800f4d0 <xTaskCheckForTimeOut>:
{
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	0004      	movs	r4, r0
 800f4d4:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800f4d6:	f000 fc31 	bl	800fd3c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f4da:	4b11      	ldr	r3, [pc, #68]	; (800f520 <xTaskCheckForTimeOut+0x50>)
 800f4dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
			if( *pxTicksToWait == portMAX_DELAY )
 800f4de:	682b      	ldr	r3, [r5, #0]
 800f4e0:	1c59      	adds	r1, r3, #1
 800f4e2:	d015      	beq.n	800f510 <xTaskCheckForTimeOut+0x40>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f4e4:	6820      	ldr	r0, [r4, #0]
 800f4e6:	490f      	ldr	r1, [pc, #60]	; (800f524 <xTaskCheckForTimeOut+0x54>)
 800f4e8:	68c9      	ldr	r1, [r1, #12]
 800f4ea:	4288      	cmp	r0, r1
 800f4ec:	d002      	beq.n	800f4f4 <xTaskCheckForTimeOut+0x24>
 800f4ee:	6861      	ldr	r1, [r4, #4]
 800f4f0:	4291      	cmp	r1, r2
 800f4f2:	d912      	bls.n	800f51a <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f4f4:	6861      	ldr	r1, [r4, #4]
 800f4f6:	1a50      	subs	r0, r2, r1
 800f4f8:	4283      	cmp	r3, r0
 800f4fa:	d801      	bhi.n	800f500 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800f4fc:	2401      	movs	r4, #1
 800f4fe:	e008      	b.n	800f512 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f500:	1a89      	subs	r1, r1, r2
 800f502:	18c9      	adds	r1, r1, r3
 800f504:	6029      	str	r1, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f506:	0020      	movs	r0, r4
 800f508:	f7ff ffd6 	bl	800f4b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f50c:	2400      	movs	r4, #0
 800f50e:	e000      	b.n	800f512 <xTaskCheckForTimeOut+0x42>
				xReturn = pdFALSE;
 800f510:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f512:	f000 fc1f 	bl	800fd54 <vPortExitCritical>
}
 800f516:	0020      	movs	r0, r4
 800f518:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800f51a:	2401      	movs	r4, #1
 800f51c:	e7f9      	b.n	800f512 <xTaskCheckForTimeOut+0x42>
 800f51e:	46c0      	nop			; (mov r8, r8)
 800f520:	20002b60 	.word	0x20002b60
 800f524:	20002be0 	.word	0x20002be0

0800f528 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f528:	4b01      	ldr	r3, [pc, #4]	; (800f530 <vTaskMissedYield+0x8>)
 800f52a:	2201      	movs	r2, #1
 800f52c:	615a      	str	r2, [r3, #20]
}
 800f52e:	4770      	bx	lr
 800f530:	20002be0 	.word	0x20002be0

0800f534 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f534:	4b06      	ldr	r3, [pc, #24]	; (800f550 <xTaskGetSchedulerState+0x1c>)
 800f536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d007      	beq.n	800f54c <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f53c:	4b05      	ldr	r3, [pc, #20]	; (800f554 <xTaskGetSchedulerState+0x20>)
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f544:	2000      	movs	r0, #0
		return xReturn;
 800f546:	e002      	b.n	800f54e <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800f548:	2002      	movs	r0, #2
 800f54a:	e000      	b.n	800f54e <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f54c:	2001      	movs	r0, #1
	}
 800f54e:	4770      	bx	lr
 800f550:	20002b60 	.word	0x20002b60
 800f554:	20002be0 	.word	0x20002be0

0800f558 <vTaskPriorityInherit>:
	{
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f55c:	d01a      	beq.n	800f594 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f55e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f560:	4b19      	ldr	r3, [pc, #100]	; (800f5c8 <vTaskPriorityInherit+0x70>)
 800f562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f566:	429a      	cmp	r2, r3
 800f568:	d214      	bcs.n	800f594 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f56a:	6983      	ldr	r3, [r0, #24]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	db05      	blt.n	800f57c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f570:	4b15      	ldr	r3, [pc, #84]	; (800f5c8 <vTaskPriorityInherit+0x70>)
 800f572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f576:	2307      	movs	r3, #7
 800f578:	1a5b      	subs	r3, r3, r1
 800f57a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f57c:	6961      	ldr	r1, [r4, #20]
 800f57e:	0093      	lsls	r3, r2, #2
 800f580:	189b      	adds	r3, r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4a11      	ldr	r2, [pc, #68]	; (800f5cc <vTaskPriorityInherit+0x74>)
 800f586:	189b      	adds	r3, r3, r2
 800f588:	4299      	cmp	r1, r3
 800f58a:	d004      	beq.n	800f596 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f58c:	4b0e      	ldr	r3, [pc, #56]	; (800f5c8 <vTaskPriorityInherit+0x70>)
 800f58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f592:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f594:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f596:	1d25      	adds	r5, r4, #4
 800f598:	0028      	movs	r0, r5
 800f59a:	f7ff f827 	bl	800e5ec <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f59e:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <vTaskPriorityInherit+0x70>)
 800f5a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f5a6:	4a0a      	ldr	r2, [pc, #40]	; (800f5d0 <vTaskPriorityInherit+0x78>)
 800f5a8:	6812      	ldr	r2, [r2, #0]
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d808      	bhi.n	800f5c0 <vTaskPriorityInherit+0x68>
 800f5ae:	0098      	lsls	r0, r3, #2
 800f5b0:	18c0      	adds	r0, r0, r3
 800f5b2:	0080      	lsls	r0, r0, #2
 800f5b4:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <vTaskPriorityInherit+0x74>)
 800f5b6:	18c0      	adds	r0, r0, r3
 800f5b8:	0029      	movs	r1, r5
 800f5ba:	f7fe fff5 	bl	800e5a8 <vListInsertEnd>
	}
 800f5be:	e7e9      	b.n	800f594 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f5c0:	4a03      	ldr	r2, [pc, #12]	; (800f5d0 <vTaskPriorityInherit+0x78>)
 800f5c2:	6013      	str	r3, [r2, #0]
 800f5c4:	e7f3      	b.n	800f5ae <vTaskPriorityInherit+0x56>
 800f5c6:	46c0      	nop			; (mov r8, r8)
 800f5c8:	20002b60 	.word	0x20002b60
 800f5cc:	20002c00 	.word	0x20002c00
 800f5d0:	20002be0 	.word	0x20002be0

0800f5d4 <xTaskPriorityDisinherit>:
	{
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f5d8:	d023      	beq.n	800f622 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f5da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f5e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800f5e2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800f5e4:	4291      	cmp	r1, r2
 800f5e6:	d01e      	beq.n	800f626 <xTaskPriorityDisinherit+0x52>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d001      	beq.n	800f5f0 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800f5ec:	2000      	movs	r0, #0
	}
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f5f0:	1d05      	adds	r5, r0, #4
 800f5f2:	0028      	movs	r0, r5
 800f5f4:	f7fe fffa 	bl	800e5ec <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f5f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f5fa:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5fc:	2207      	movs	r2, #7
 800f5fe:	1ad2      	subs	r2, r2, r3
 800f600:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f602:	4a0a      	ldr	r2, [pc, #40]	; (800f62c <xTaskPriorityDisinherit+0x58>)
 800f604:	6812      	ldr	r2, [r2, #0]
 800f606:	4293      	cmp	r3, r2
 800f608:	d901      	bls.n	800f60e <xTaskPriorityDisinherit+0x3a>
 800f60a:	4a08      	ldr	r2, [pc, #32]	; (800f62c <xTaskPriorityDisinherit+0x58>)
 800f60c:	6013      	str	r3, [r2, #0]
 800f60e:	0098      	lsls	r0, r3, #2
 800f610:	18c0      	adds	r0, r0, r3
 800f612:	0080      	lsls	r0, r0, #2
 800f614:	4b06      	ldr	r3, [pc, #24]	; (800f630 <xTaskPriorityDisinherit+0x5c>)
 800f616:	18c0      	adds	r0, r0, r3
 800f618:	0029      	movs	r1, r5
 800f61a:	f7fe ffc5 	bl	800e5a8 <vListInsertEnd>
					xReturn = pdTRUE;
 800f61e:	2001      	movs	r0, #1
 800f620:	e7e5      	b.n	800f5ee <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800f622:	2000      	movs	r0, #0
 800f624:	e7e3      	b.n	800f5ee <xTaskPriorityDisinherit+0x1a>
 800f626:	2000      	movs	r0, #0
 800f628:	e7e1      	b.n	800f5ee <xTaskPriorityDisinherit+0x1a>
 800f62a:	46c0      	nop			; (mov r8, r8)
 800f62c:	20002be0 	.word	0x20002be0
 800f630:	20002c00 	.word	0x20002c00

0800f634 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f634:	b570      	push	{r4, r5, r6, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	0005      	movs	r5, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f63a:	2300      	movs	r3, #0
 800f63c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f63e:	4b2a      	ldr	r3, [pc, #168]	; (800f6e8 <vTaskList+0xb4>)
 800f640:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800f642:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f644:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f646:	0140      	lsls	r0, r0, #5
 800f648:	f000 fc1a 	bl	800fe80 <pvPortMalloc>
 800f64c:	1e04      	subs	r4, r0, #0

		if( pxTaskStatusArray != NULL )
 800f64e:	d048      	beq.n	800f6e2 <vTaskList+0xae>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f650:	9903      	ldr	r1, [sp, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	f7ff fe12 	bl	800f27c <uxTaskGetSystemState>
 800f658:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f65a:	2300      	movs	r3, #0
 800f65c:	9302      	str	r3, [sp, #8]
 800f65e:	e024      	b.n	800f6aa <vTaskList+0x76>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f660:	2b02      	cmp	r3, #2
 800f662:	d137      	bne.n	800f6d4 <vTaskList+0xa0>
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f664:	2642      	movs	r6, #66	; 0x42
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f666:	9b02      	ldr	r3, [sp, #8]
 800f668:	015b      	lsls	r3, r3, #5
 800f66a:	18e3      	adds	r3, r4, r3
 800f66c:	6859      	ldr	r1, [r3, #4]
 800f66e:	0028      	movs	r0, r5
 800f670:	f7ff fbae 	bl	800edd0 <prvWriteNameToBuffer>
 800f674:	0005      	movs	r5, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f676:	9b02      	ldr	r3, [sp, #8]
 800f678:	015b      	lsls	r3, r3, #5
 800f67a:	18e3      	adds	r3, r4, r3
 800f67c:	691b      	ldr	r3, [r3, #16]
 800f67e:	9a02      	ldr	r2, [sp, #8]
 800f680:	0152      	lsls	r2, r2, #5
 800f682:	18a2      	adds	r2, r4, r2
 800f684:	8b90      	ldrh	r0, [r2, #28]
 800f686:	9a02      	ldr	r2, [sp, #8]
 800f688:	0152      	lsls	r2, r2, #5
 800f68a:	18a2      	adds	r2, r4, r2
 800f68c:	6892      	ldr	r2, [r2, #8]
 800f68e:	4917      	ldr	r1, [pc, #92]	; (800f6ec <vTaskList+0xb8>)
 800f690:	9201      	str	r2, [sp, #4]
 800f692:	9000      	str	r0, [sp, #0]
 800f694:	0032      	movs	r2, r6
 800f696:	0028      	movs	r0, r5
 800f698:	f005 f8b8 	bl	801480c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f69c:	0028      	movs	r0, r5
 800f69e:	f7f0 fd3b 	bl	8000118 <strlen>
 800f6a2:	182d      	adds	r5, r5, r0
			for( x = 0; x < uxArraySize; x++ )
 800f6a4:	9b02      	ldr	r3, [sp, #8]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	9302      	str	r3, [sp, #8]
 800f6aa:	9a02      	ldr	r2, [sp, #8]
 800f6ac:	9b03      	ldr	r3, [sp, #12]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d214      	bcs.n	800f6dc <vTaskList+0xa8>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	015b      	lsls	r3, r3, #5
 800f6b6:	18e3      	adds	r3, r4, r3
 800f6b8:	7b1b      	ldrb	r3, [r3, #12]
 800f6ba:	2b03      	cmp	r3, #3
 800f6bc:	d008      	beq.n	800f6d0 <vTaskList+0x9c>
 800f6be:	d803      	bhi.n	800f6c8 <vTaskList+0x94>
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d1cd      	bne.n	800f660 <vTaskList+0x2c>
 800f6c4:	2652      	movs	r6, #82	; 0x52
 800f6c6:	e7ce      	b.n	800f666 <vTaskList+0x32>
 800f6c8:	2b04      	cmp	r3, #4
 800f6ca:	d105      	bne.n	800f6d8 <vTaskList+0xa4>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f6cc:	2644      	movs	r6, #68	; 0x44
 800f6ce:	e7ca      	b.n	800f666 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f6d0:	2653      	movs	r6, #83	; 0x53
 800f6d2:	e7c8      	b.n	800f666 <vTaskList+0x32>
										cStatus = 0x00;
 800f6d4:	2600      	movs	r6, #0
 800f6d6:	e7c6      	b.n	800f666 <vTaskList+0x32>
 800f6d8:	2600      	movs	r6, #0
 800f6da:	e7c4      	b.n	800f666 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f6dc:	0020      	movs	r0, r4
 800f6de:	f000 fc33 	bl	800ff48 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6e2:	b004      	add	sp, #16
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	46c0      	nop			; (mov r8, r8)
 800f6e8:	20002b60 	.word	0x20002b60
 800f6ec:	0801c574 	.word	0x0801c574

0800f6f0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f6fa:	4b26      	ldr	r3, [pc, #152]	; (800f794 <vTaskGetRunTimeStats+0xa4>)
 800f6fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800f6fe:	9205      	str	r2, [sp, #20]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f700:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f702:	0140      	lsls	r0, r0, #5
 800f704:	f000 fbbc 	bl	800fe80 <pvPortMalloc>
 800f708:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f70a:	d040      	beq.n	800f78e <vTaskGetRunTimeStats+0x9e>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f70c:	9905      	ldr	r1, [sp, #20]
 800f70e:	aa03      	add	r2, sp, #12
 800f710:	f7ff fdb4 	bl	800f27c <uxTaskGetSystemState>
 800f714:	9005      	str	r0, [sp, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f716:	9803      	ldr	r0, [sp, #12]
 800f718:	2164      	movs	r1, #100	; 0x64
 800f71a:	f7f0 fd19 	bl	8000150 <__udivsi3>
 800f71e:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f720:	2800      	cmp	r0, #0
 800f722:	d031      	beq.n	800f788 <vTaskGetRunTimeStats+0x98>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f724:	2300      	movs	r3, #0
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	e00d      	b.n	800f746 <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f72a:	9b04      	ldr	r3, [sp, #16]
 800f72c:	015b      	lsls	r3, r3, #5
 800f72e:	18f3      	adds	r3, r6, r3
 800f730:	699a      	ldr	r2, [r3, #24]
 800f732:	4919      	ldr	r1, [pc, #100]	; (800f798 <vTaskGetRunTimeStats+0xa8>)
 800f734:	f005 f86a 	bl	801480c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f738:	0020      	movs	r0, r4
 800f73a:	f7f0 fced 	bl	8000118 <strlen>
 800f73e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f740:	9b04      	ldr	r3, [sp, #16]
 800f742:	3301      	adds	r3, #1
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	9a04      	ldr	r2, [sp, #16]
 800f748:	9b05      	ldr	r3, [sp, #20]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d21c      	bcs.n	800f788 <vTaskGetRunTimeStats+0x98>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f74e:	9b04      	ldr	r3, [sp, #16]
 800f750:	015b      	lsls	r3, r3, #5
 800f752:	18f3      	adds	r3, r6, r3
 800f754:	699d      	ldr	r5, [r3, #24]
 800f756:	9f03      	ldr	r7, [sp, #12]
 800f758:	0039      	movs	r1, r7
 800f75a:	0028      	movs	r0, r5
 800f75c:	f7f0 fcf8 	bl	8000150 <__udivsi3>
 800f760:	9001      	str	r0, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f762:	9a04      	ldr	r2, [sp, #16]
 800f764:	0152      	lsls	r2, r2, #5
 800f766:	18b2      	adds	r2, r6, r2
 800f768:	6851      	ldr	r1, [r2, #4]
 800f76a:	0020      	movs	r0, r4
 800f76c:	f7ff fb30 	bl	800edd0 <prvWriteNameToBuffer>
 800f770:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f772:	42bd      	cmp	r5, r7
 800f774:	d3d9      	bcc.n	800f72a <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f776:	9b04      	ldr	r3, [sp, #16]
 800f778:	015b      	lsls	r3, r3, #5
 800f77a:	18f3      	adds	r3, r6, r3
 800f77c:	699a      	ldr	r2, [r3, #24]
 800f77e:	4907      	ldr	r1, [pc, #28]	; (800f79c <vTaskGetRunTimeStats+0xac>)
 800f780:	9b01      	ldr	r3, [sp, #4]
 800f782:	f005 f843 	bl	801480c <sprintf>
 800f786:	e7d7      	b.n	800f738 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f788:	0030      	movs	r0, r6
 800f78a:	f000 fbdd 	bl	800ff48 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f78e:	b007      	add	sp, #28
 800f790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f792:	46c0      	nop			; (mov r8, r8)
 800f794:	20002b60 	.word	0x20002b60
 800f798:	0801c590 	.word	0x0801c590
 800f79c:	0801c584 	.word	0x0801c584

0800f7a0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f7a0:	4b05      	ldr	r3, [pc, #20]	; (800f7b8 <pvTaskIncrementMutexHeldCount+0x18>)
 800f7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d004      	beq.n	800f7b2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f7a8:	4b03      	ldr	r3, [pc, #12]	; (800f7b8 <pvTaskIncrementMutexHeldCount+0x18>)
 800f7aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f7ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f7b2:	4b01      	ldr	r3, [pc, #4]	; (800f7b8 <pvTaskIncrementMutexHeldCount+0x18>)
 800f7b4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	}
 800f7b6:	4770      	bx	lr
 800f7b8:	20002b60 	.word	0x20002b60

0800f7bc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f7bc:	b570      	push	{r4, r5, r6, lr}
 800f7be:	0004      	movs	r4, r0
 800f7c0:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f7c2:	f000 fabb 	bl	800fd3c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f7c6:	4b1f      	ldr	r3, [pc, #124]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f7c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d106      	bne.n	800f7de <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f7d0:	4b1c      	ldr	r3, [pc, #112]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f7d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f7d4:	235c      	movs	r3, #92	; 0x5c
 800f7d6:	2101      	movs	r1, #1
 800f7d8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f7da:	2d00      	cmp	r5, #0
 800f7dc:	d117      	bne.n	800f80e <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f7de:	f000 fab9 	bl	800fd54 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f7e2:	f000 faab 	bl	800fd3c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f7e6:	4b17      	ldr	r3, [pc, #92]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ea:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f7ec:	2d00      	cmp	r5, #0
 800f7ee:	d005      	beq.n	800f7fc <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800f7f0:	2c00      	cmp	r4, #0
 800f7f2:	d021      	beq.n	800f838 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f7f4:	4b13      	ldr	r3, [pc, #76]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f7fc:	4b11      	ldr	r3, [pc, #68]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f7fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f800:	235c      	movs	r3, #92	; 0x5c
 800f802:	2100      	movs	r1, #0
 800f804:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f806:	f000 faa5 	bl	800fd54 <vPortExitCritical>

		return ulReturn;
	}
 800f80a:	0028      	movs	r0, r5
 800f80c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f80e:	4b0d      	ldr	r3, [pc, #52]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f810:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f812:	3004      	adds	r0, #4
 800f814:	f7fe feea 	bl	800e5ec <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f818:	1c6b      	adds	r3, r5, #1
 800f81a:	d007      	beq.n	800f82c <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800f81c:	4b09      	ldr	r3, [pc, #36]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f81e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f820:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f822:	f7ff fab5 	bl	800ed90 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f826:	f000 fa7d 	bl	800fd24 <vPortYield>
 800f82a:	e7d8      	b.n	800f7de <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f82c:	4805      	ldr	r0, [pc, #20]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f82e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800f830:	3104      	adds	r1, #4
 800f832:	f7fe feb9 	bl	800e5a8 <vListInsertEnd>
 800f836:	e7f6      	b.n	800f826 <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800f838:	4b02      	ldr	r3, [pc, #8]	; (800f844 <ulTaskNotifyTake+0x88>)
 800f83a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f83c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f83e:	3b01      	subs	r3, #1
 800f840:	6593      	str	r3, [r2, #88]	; 0x58
 800f842:	e7db      	b.n	800f7fc <ulTaskNotifyTake+0x40>
 800f844:	20002b60 	.word	0x20002b60

0800f848 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	0005      	movs	r5, r0
 800f84c:	000f      	movs	r7, r1
 800f84e:	0014      	movs	r4, r2
 800f850:	001e      	movs	r6, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f852:	f000 fa73 	bl	800fd3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f856:	2e00      	cmp	r6, #0
 800f858:	d001      	beq.n	800f85e <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f85a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f85c:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f85e:	225c      	movs	r2, #92	; 0x5c
 800f860:	5cab      	ldrb	r3, [r5, r2]
 800f862:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f864:	2102      	movs	r1, #2
 800f866:	54a9      	strb	r1, [r5, r2]

			switch( eAction )
 800f868:	2c03      	cmp	r4, #3
 800f86a:	d01e      	beq.n	800f8aa <xTaskGenericNotify+0x62>
 800f86c:	d80a      	bhi.n	800f884 <xTaskGenericNotify+0x3c>
 800f86e:	2c01      	cmp	r4, #1
 800f870:	d016      	beq.n	800f8a0 <xTaskGenericNotify+0x58>
 800f872:	2c02      	cmp	r4, #2
 800f874:	d104      	bne.n	800f880 <xTaskGenericNotify+0x38>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f876:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f878:	3201      	adds	r2, #1
 800f87a:	65aa      	str	r2, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f87c:	2401      	movs	r4, #1
					break;
 800f87e:	e009      	b.n	800f894 <xTaskGenericNotify+0x4c>
			switch( eAction )
 800f880:	2401      	movs	r4, #1
 800f882:	e007      	b.n	800f894 <xTaskGenericNotify+0x4c>
 800f884:	2c04      	cmp	r4, #4
 800f886:	d104      	bne.n	800f892 <xTaskGenericNotify+0x4a>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d011      	beq.n	800f8b0 <xTaskGenericNotify+0x68>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f88c:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f88e:	2401      	movs	r4, #1
 800f890:	e000      	b.n	800f894 <xTaskGenericNotify+0x4c>
			switch( eAction )
 800f892:	2401      	movs	r4, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f894:	2b01      	cmp	r3, #1
 800f896:	d00d      	beq.n	800f8b4 <xTaskGenericNotify+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f898:	f000 fa5c 	bl	800fd54 <vPortExitCritical>

		return xReturn;
	}
 800f89c:	0020      	movs	r0, r4
 800f89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800f8a0:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f8a2:	433a      	orrs	r2, r7
 800f8a4:	65aa      	str	r2, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f8a6:	2401      	movs	r4, #1
					break;
 800f8a8:	e7f4      	b.n	800f894 <xTaskGenericNotify+0x4c>
					pxTCB->ulNotifiedValue = ulValue;
 800f8aa:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f8ac:	2401      	movs	r4, #1
					break;
 800f8ae:	e7f1      	b.n	800f894 <xTaskGenericNotify+0x4c>
						xReturn = pdFAIL;
 800f8b0:	2400      	movs	r4, #0
 800f8b2:	e7ef      	b.n	800f894 <xTaskGenericNotify+0x4c>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f8b4:	1d2e      	adds	r6, r5, #4
 800f8b6:	0030      	movs	r0, r6
 800f8b8:	f7fe fe98 	bl	800e5ec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f8bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f8be:	4a0b      	ldr	r2, [pc, #44]	; (800f8ec <xTaskGenericNotify+0xa4>)
 800f8c0:	6812      	ldr	r2, [r2, #0]
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d901      	bls.n	800f8ca <xTaskGenericNotify+0x82>
 800f8c6:	4a09      	ldr	r2, [pc, #36]	; (800f8ec <xTaskGenericNotify+0xa4>)
 800f8c8:	6013      	str	r3, [r2, #0]
 800f8ca:	0098      	lsls	r0, r3, #2
 800f8cc:	18c0      	adds	r0, r0, r3
 800f8ce:	0080      	lsls	r0, r0, #2
 800f8d0:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <xTaskGenericNotify+0xa8>)
 800f8d2:	18c0      	adds	r0, r0, r3
 800f8d4:	0031      	movs	r1, r6
 800f8d6:	f7fe fe67 	bl	800e5a8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f8dc:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <xTaskGenericNotify+0xac>)
 800f8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d9d8      	bls.n	800f898 <xTaskGenericNotify+0x50>
					taskYIELD_IF_USING_PREEMPTION();
 800f8e6:	f000 fa1d 	bl	800fd24 <vPortYield>
 800f8ea:	e7d5      	b.n	800f898 <xTaskGenericNotify+0x50>
 800f8ec:	20002be0 	.word	0x20002be0
 800f8f0:	20002c00 	.word	0x20002c00
 800f8f4:	20002b60 	.word	0x20002b60

0800f8f8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f8f8:	4b06      	ldr	r3, [pc, #24]	; (800f914 <prvGetNextExpireTime+0x1c>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	6813      	ldr	r3, [r2, #0]
 800f8fe:	4259      	negs	r1, r3
 800f900:	414b      	adcs	r3, r1
 800f902:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f904:	2b00      	cmp	r3, #0
 800f906:	d102      	bne.n	800f90e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f908:	68d3      	ldr	r3, [r2, #12]
 800f90a:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 800f90c:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 800f90e:	2000      	movs	r0, #0
	return xNextExpireTime;
 800f910:	e7fc      	b.n	800f90c <prvGetNextExpireTime+0x14>
 800f912:	46c0      	nop			; (mov r8, r8)
 800f914:	20002c8c 	.word	0x20002c8c

0800f918 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f918:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f91a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f91c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f91e:	4291      	cmp	r1, r2
 800f920:	d80c      	bhi.n	800f93c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f922:	1ad2      	subs	r2, r2, r3
 800f924:	6983      	ldr	r3, [r0, #24]
 800f926:	429a      	cmp	r2, r3
 800f928:	d301      	bcc.n	800f92e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f92a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800f92c:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f92e:	1d01      	adds	r1, r0, #4
 800f930:	4b09      	ldr	r3, [pc, #36]	; (800f958 <prvInsertTimerInActiveList+0x40>)
 800f932:	6858      	ldr	r0, [r3, #4]
 800f934:	f7fe fe43 	bl	800e5be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f938:	2000      	movs	r0, #0
 800f93a:	e7f7      	b.n	800f92c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d201      	bcs.n	800f944 <prvInsertTimerInActiveList+0x2c>
 800f940:	4299      	cmp	r1, r3
 800f942:	d206      	bcs.n	800f952 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f944:	1d01      	adds	r1, r0, #4
 800f946:	4b04      	ldr	r3, [pc, #16]	; (800f958 <prvInsertTimerInActiveList+0x40>)
 800f948:	6818      	ldr	r0, [r3, #0]
 800f94a:	f7fe fe38 	bl	800e5be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f94e:	2000      	movs	r0, #0
 800f950:	e7ec      	b.n	800f92c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800f952:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f954:	e7ea      	b.n	800f92c <prvInsertTimerInActiveList+0x14>
 800f956:	46c0      	nop			; (mov r8, r8)
 800f958:	20002c8c 	.word	0x20002c8c

0800f95c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f95c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f95e:	f000 f9ed 	bl	800fd3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f962:	4b10      	ldr	r3, [pc, #64]	; (800f9a4 <prvCheckForValidListAndQueue+0x48>)
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f96a:	f000 f9f3 	bl	800fd54 <vPortExitCritical>
}
 800f96e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f970:	4c0c      	ldr	r4, [pc, #48]	; (800f9a4 <prvCheckForValidListAndQueue+0x48>)
 800f972:	0026      	movs	r6, r4
 800f974:	360c      	adds	r6, #12
 800f976:	0030      	movs	r0, r6
 800f978:	f7fe fe08 	bl	800e58c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f97c:	0025      	movs	r5, r4
 800f97e:	3520      	adds	r5, #32
 800f980:	0028      	movs	r0, r5
 800f982:	f7fe fe03 	bl	800e58c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f986:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f988:	6065      	str	r5, [r4, #4]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f98a:	2200      	movs	r2, #0
 800f98c:	2110      	movs	r1, #16
 800f98e:	2004      	movs	r0, #4
 800f990:	f7fe ff18 	bl	800e7c4 <xQueueGenericCreate>
 800f994:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 800f996:	2800      	cmp	r0, #0
 800f998:	d0e7      	beq.n	800f96a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f99a:	4903      	ldr	r1, [pc, #12]	; (800f9a8 <prvCheckForValidListAndQueue+0x4c>)
 800f99c:	f7ff f8dc 	bl	800eb58 <vQueueAddToRegistry>
 800f9a0:	e7e3      	b.n	800f96a <prvCheckForValidListAndQueue+0xe>
 800f9a2:	46c0      	nop			; (mov r8, r8)
 800f9a4:	20002c8c 	.word	0x20002c8c
 800f9a8:	0801c59c 	.word	0x0801c59c

0800f9ac <xTimerCreateTimerTask>:
{
 800f9ac:	b500      	push	{lr}
 800f9ae:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f9b0:	f7ff ffd4 	bl	800f95c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f9b4:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <xTimerCreateTimerTask+0x30>)
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00d      	beq.n	800f9d8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f9bc:	4908      	ldr	r1, [pc, #32]	; (800f9e0 <xTimerCreateTimerTask+0x34>)
 800f9be:	4809      	ldr	r0, [pc, #36]	; (800f9e4 <xTimerCreateTimerTask+0x38>)
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	9303      	str	r3, [sp, #12]
 800f9c4:	9302      	str	r3, [sp, #8]
 800f9c6:	9301      	str	r3, [sp, #4]
 800f9c8:	3303      	adds	r3, #3
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	2296      	movs	r2, #150	; 0x96
 800f9d0:	f7ff fa10 	bl	800edf4 <xTaskGenericCreate>
}
 800f9d4:	b005      	add	sp, #20
 800f9d6:	bd00      	pop	{pc}
BaseType_t xReturn = pdFAIL;
 800f9d8:	2000      	movs	r0, #0
	return xReturn;
 800f9da:	e7fb      	b.n	800f9d4 <xTimerCreateTimerTask+0x28>
 800f9dc:	20002c8c 	.word	0x20002c8c
 800f9e0:	0801c5a4 	.word	0x0801c5a4
 800f9e4:	0800fc55 	.word	0x0800fc55

0800f9e8 <xTimerCreate>:
{
 800f9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	0007      	movs	r7, r0
 800f9ee:	000d      	movs	r5, r1
 800f9f0:	0016      	movs	r6, r2
 800f9f2:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f9f4:	2900      	cmp	r1, #0
 800f9f6:	d011      	beq.n	800fa1c <xTimerCreate+0x34>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f9f8:	202c      	movs	r0, #44	; 0x2c
 800f9fa:	f000 fa41 	bl	800fe80 <pvPortMalloc>
 800f9fe:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fa00:	d00d      	beq.n	800fa1e <xTimerCreate+0x36>
			prvCheckForValidListAndQueue();
 800fa02:	f7ff ffab 	bl	800f95c <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fa06:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fa08:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fa0a:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fa0c:	9b01      	ldr	r3, [sp, #4]
 800fa0e:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fa10:	9b08      	ldr	r3, [sp, #32]
 800fa12:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fa14:	1d20      	adds	r0, r4, #4
 800fa16:	f7fe fdc4 	bl	800e5a2 <vListInitialiseItem>
			traceTIMER_CREATE( pxNewTimer );
 800fa1a:	e000      	b.n	800fa1e <xTimerCreate+0x36>
		pxNewTimer = NULL;
 800fa1c:	2400      	movs	r4, #0
}
 800fa1e:	0020      	movs	r0, r4
 800fa20:	b003      	add	sp, #12
 800fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa24 <xTimerGenericCommand>:
{
 800fa24:	b530      	push	{r4, r5, lr}
 800fa26:	b085      	sub	sp, #20
 800fa28:	0004      	movs	r4, r0
 800fa2a:	0015      	movs	r5, r2
 800fa2c:	001a      	movs	r2, r3
	if( xTimerQueue != NULL )
 800fa2e:	4b12      	ldr	r3, [pc, #72]	; (800fa78 <xTimerGenericCommand+0x54>)
 800fa30:	6898      	ldr	r0, [r3, #8]
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d01e      	beq.n	800fa74 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fa36:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa38:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fa3a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa3c:	2905      	cmp	r1, #5
 800fa3e:	dc13      	bgt.n	800fa68 <xTimerGenericCommand+0x44>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa40:	f7ff fd78 	bl	800f534 <xTaskGetSchedulerState>
 800fa44:	2802      	cmp	r0, #2
 800fa46:	d007      	beq.n	800fa58 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa48:	4b0b      	ldr	r3, [pc, #44]	; (800fa78 <xTimerGenericCommand+0x54>)
 800fa4a:	6898      	ldr	r0, [r3, #8]
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	2200      	movs	r2, #0
 800fa50:	4669      	mov	r1, sp
 800fa52:	f7fe fee1 	bl	800e818 <xQueueGenericSend>
 800fa56:	e00b      	b.n	800fa70 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa58:	4b07      	ldr	r3, [pc, #28]	; (800fa78 <xTimerGenericCommand+0x54>)
 800fa5a:	6898      	ldr	r0, [r3, #8]
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	9a08      	ldr	r2, [sp, #32]
 800fa60:	4669      	mov	r1, sp
 800fa62:	f7fe fed9 	bl	800e818 <xQueueGenericSend>
 800fa66:	e003      	b.n	800fa70 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa68:	2300      	movs	r3, #0
 800fa6a:	4669      	mov	r1, sp
 800fa6c:	f7fe ff47 	bl	800e8fe <xQueueGenericSendFromISR>
}
 800fa70:	b005      	add	sp, #20
 800fa72:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fa74:	2000      	movs	r0, #0
	return xReturn;
 800fa76:	e7fb      	b.n	800fa70 <xTimerGenericCommand+0x4c>
 800fa78:	20002c8c 	.word	0x20002c8c

0800fa7c <prvSwitchTimerLists>:
{
 800fa7c:	b570      	push	{r4, r5, r6, lr}
 800fa7e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa80:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <prvSwitchTimerLists+0x5c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	2a00      	cmp	r2, #0
 800fa88:	d020      	beq.n	800facc <prvSwitchTimerLists+0x50>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa8e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa90:	1d25      	adds	r5, r4, #4
 800fa92:	0028      	movs	r0, r5
 800fa94:	f7fe fdaa 	bl	800e5ec <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa9a:	0020      	movs	r0, r4
 800fa9c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fa9e:	69e3      	ldr	r3, [r4, #28]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d1ed      	bne.n	800fa80 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800faa4:	69a3      	ldr	r3, [r4, #24]
 800faa6:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 800faa8:	429e      	cmp	r6, r3
 800faaa:	d207      	bcs.n	800fabc <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800faac:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800faae:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fab0:	4b09      	ldr	r3, [pc, #36]	; (800fad8 <prvSwitchTimerLists+0x5c>)
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	0029      	movs	r1, r5
 800fab6:	f7fe fd82 	bl	800e5be <vListInsert>
 800faba:	e7e1      	b.n	800fa80 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fabc:	2300      	movs	r3, #0
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	0032      	movs	r2, r6
 800fac2:	2100      	movs	r1, #0
 800fac4:	0020      	movs	r0, r4
 800fac6:	f7ff ffad 	bl	800fa24 <xTimerGenericCommand>
 800faca:	e7d9      	b.n	800fa80 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
 800facc:	4a02      	ldr	r2, [pc, #8]	; (800fad8 <prvSwitchTimerLists+0x5c>)
 800face:	6851      	ldr	r1, [r2, #4]
 800fad0:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fad2:	6053      	str	r3, [r2, #4]
}
 800fad4:	b002      	add	sp, #8
 800fad6:	bd70      	pop	{r4, r5, r6, pc}
 800fad8:	20002c8c 	.word	0x20002c8c

0800fadc <prvSampleTimeNow>:
{
 800fadc:	b570      	push	{r4, r5, r6, lr}
 800fade:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 800fae0:	f7ff fa9e 	bl	800f020 <xTaskGetTickCount>
 800fae4:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800fae6:	4b07      	ldr	r3, [pc, #28]	; (800fb04 <prvSampleTimeNow+0x28>)
 800fae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faea:	4283      	cmp	r3, r0
 800faec:	d805      	bhi.n	800fafa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800faee:	2300      	movs	r3, #0
 800faf0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800faf2:	4b04      	ldr	r3, [pc, #16]	; (800fb04 <prvSampleTimeNow+0x28>)
 800faf4:	635c      	str	r4, [r3, #52]	; 0x34
}
 800faf6:	0020      	movs	r0, r4
 800faf8:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 800fafa:	f7ff ffbf 	bl	800fa7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fafe:	2301      	movs	r3, #1
 800fb00:	602b      	str	r3, [r5, #0]
 800fb02:	e7f6      	b.n	800faf2 <prvSampleTimeNow+0x16>
 800fb04:	20002c8c 	.word	0x20002c8c

0800fb08 <prvProcessExpiredTimer>:
{
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	0005      	movs	r5, r0
 800fb0e:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb10:	4b0f      	ldr	r3, [pc, #60]	; (800fb50 <prvProcessExpiredTimer+0x48>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb18:	1d20      	adds	r0, r4, #4
 800fb1a:	f7fe fd67 	bl	800e5ec <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fb1e:	69e3      	ldr	r3, [r4, #28]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d004      	beq.n	800fb2e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb26:	0020      	movs	r0, r4
 800fb28:	4798      	blx	r3
}
 800fb2a:	b002      	add	sp, #8
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800fb2e:	69a1      	ldr	r1, [r4, #24]
 800fb30:	1949      	adds	r1, r1, r5
 800fb32:	002b      	movs	r3, r5
 800fb34:	0032      	movs	r2, r6
 800fb36:	0020      	movs	r0, r4
 800fb38:	f7ff feee 	bl	800f918 <prvInsertTimerInActiveList>
 800fb3c:	2801      	cmp	r0, #1
 800fb3e:	d1f1      	bne.n	800fb24 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb40:	2300      	movs	r3, #0
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	002a      	movs	r2, r5
 800fb46:	2100      	movs	r1, #0
 800fb48:	0020      	movs	r0, r4
 800fb4a:	f7ff ff6b 	bl	800fa24 <xTimerGenericCommand>
			( void ) xResult;
 800fb4e:	e7e9      	b.n	800fb24 <prvProcessExpiredTimer+0x1c>
 800fb50:	20002c8c 	.word	0x20002c8c

0800fb54 <prvProcessTimerOrBlockTask>:
{
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	0004      	movs	r4, r0
 800fb5a:	000e      	movs	r6, r1
	vTaskSuspendAll();
 800fb5c:	f7ff fa58 	bl	800f010 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb60:	a801      	add	r0, sp, #4
 800fb62:	f7ff ffbb 	bl	800fadc <prvSampleTimeNow>
 800fb66:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fb68:	9b01      	ldr	r3, [sp, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d118      	bne.n	800fba0 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	d101      	bne.n	800fb76 <prvProcessTimerOrBlockTask+0x22>
 800fb72:	42a0      	cmp	r0, r4
 800fb74:	d20a      	bcs.n	800fb8c <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fb76:	1b61      	subs	r1, r4, r5
 800fb78:	4b0b      	ldr	r3, [pc, #44]	; (800fba8 <prvProcessTimerOrBlockTask+0x54>)
 800fb7a:	6898      	ldr	r0, [r3, #8]
 800fb7c:	f7fe fffe 	bl	800eb7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb80:	f7ff face 	bl	800f120 <xTaskResumeAll>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	d008      	beq.n	800fb9a <prvProcessTimerOrBlockTask+0x46>
}
 800fb88:	b002      	add	sp, #8
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 800fb8c:	f7ff fac8 	bl	800f120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb90:	0029      	movs	r1, r5
 800fb92:	0020      	movs	r0, r4
 800fb94:	f7ff ffb8 	bl	800fb08 <prvProcessExpiredTimer>
 800fb98:	e7f6      	b.n	800fb88 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 800fb9a:	f000 f8c3 	bl	800fd24 <vPortYield>
 800fb9e:	e7f3      	b.n	800fb88 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 800fba0:	f7ff fabe 	bl	800f120 <xTaskResumeAll>
}
 800fba4:	e7f0      	b.n	800fb88 <prvProcessTimerOrBlockTask+0x34>
 800fba6:	46c0      	nop			; (mov r8, r8)
 800fba8:	20002c8c 	.word	0x20002c8c

0800fbac <prvProcessReceivedCommands>:
{
 800fbac:	b510      	push	{r4, lr}
 800fbae:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fbb0:	e002      	b.n	800fbb8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fbb2:	9b04      	ldr	r3, [sp, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	da10      	bge.n	800fbda <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fbb8:	4b24      	ldr	r3, [pc, #144]	; (800fc4c <prvProcessReceivedCommands+0xa0>)
 800fbba:	6898      	ldr	r0, [r3, #8]
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	a904      	add	r1, sp, #16
 800fbc2:	f7fe ff05 	bl	800e9d0 <xQueueGenericReceive>
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d03d      	beq.n	800fc46 <prvProcessReceivedCommands+0x9a>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fbca:	9b04      	ldr	r3, [sp, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	daf0      	bge.n	800fbb2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fbd0:	9b05      	ldr	r3, [sp, #20]
 800fbd2:	9806      	ldr	r0, [sp, #24]
 800fbd4:	9907      	ldr	r1, [sp, #28]
 800fbd6:	4798      	blx	r3
 800fbd8:	e7eb      	b.n	800fbb2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fbda:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fbdc:	6963      	ldr	r3, [r4, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d002      	beq.n	800fbe8 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbe2:	1d20      	adds	r0, r4, #4
 800fbe4:	f7fe fd02 	bl	800e5ec <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbe8:	a803      	add	r0, sp, #12
 800fbea:	f7ff ff77 	bl	800fadc <prvSampleTimeNow>
 800fbee:	0002      	movs	r2, r0
			switch( xMessage.xMessageID )
 800fbf0:	9904      	ldr	r1, [sp, #16]
 800fbf2:	2909      	cmp	r1, #9
 800fbf4:	d8e0      	bhi.n	800fbb8 <prvProcessReceivedCommands+0xc>
 800fbf6:	0089      	lsls	r1, r1, #2
 800fbf8:	4b15      	ldr	r3, [pc, #84]	; (800fc50 <prvProcessReceivedCommands+0xa4>)
 800fbfa:	585b      	ldr	r3, [r3, r1]
 800fbfc:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fbfe:	9b05      	ldr	r3, [sp, #20]
 800fc00:	69a1      	ldr	r1, [r4, #24]
 800fc02:	1859      	adds	r1, r3, r1
 800fc04:	0020      	movs	r0, r4
 800fc06:	f7ff fe87 	bl	800f918 <prvInsertTimerInActiveList>
 800fc0a:	2801      	cmp	r0, #1
 800fc0c:	d1d4      	bne.n	800fbb8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc10:	0020      	movs	r0, r4
 800fc12:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fc14:	69e3      	ldr	r3, [r4, #28]
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d1ce      	bne.n	800fbb8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc1a:	9a05      	ldr	r2, [sp, #20]
 800fc1c:	69a3      	ldr	r3, [r4, #24]
 800fc1e:	18d2      	adds	r2, r2, r3
 800fc20:	2300      	movs	r3, #0
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	2100      	movs	r1, #0
 800fc26:	0020      	movs	r0, r4
 800fc28:	f7ff fefc 	bl	800fa24 <xTimerGenericCommand>
							( void ) xResult;
 800fc2c:	e7c4      	b.n	800fbb8 <prvProcessReceivedCommands+0xc>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc2e:	9905      	ldr	r1, [sp, #20]
 800fc30:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc32:	1809      	adds	r1, r1, r0
 800fc34:	0003      	movs	r3, r0
 800fc36:	0020      	movs	r0, r4
 800fc38:	f7ff fe6e 	bl	800f918 <prvInsertTimerInActiveList>
					break;
 800fc3c:	e7bc      	b.n	800fbb8 <prvProcessReceivedCommands+0xc>
					vPortFree( pxTimer );
 800fc3e:	0020      	movs	r0, r4
 800fc40:	f000 f982 	bl	800ff48 <vPortFree>
					break;
 800fc44:	e7b8      	b.n	800fbb8 <prvProcessReceivedCommands+0xc>
}
 800fc46:	b008      	add	sp, #32
 800fc48:	bd10      	pop	{r4, pc}
 800fc4a:	46c0      	nop			; (mov r8, r8)
 800fc4c:	20002c8c 	.word	0x20002c8c
 800fc50:	08019d0c 	.word	0x08019d0c

0800fc54 <prvTimerTask>:
{
 800fc54:	b500      	push	{lr}
 800fc56:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc58:	a801      	add	r0, sp, #4
 800fc5a:	f7ff fe4d 	bl	800f8f8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc5e:	9901      	ldr	r1, [sp, #4]
 800fc60:	f7ff ff78 	bl	800fb54 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800fc64:	f7ff ffa2 	bl	800fbac <prvProcessReceivedCommands>
	for( ;; )
 800fc68:	e7f6      	b.n	800fc58 <prvTimerTask+0x4>

0800fc6a <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800fc6e:	f000 f865 	bl	800fd3c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fc72:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fc74:	f000 f86e 	bl	800fd54 <vPortExitCritical>

	return pvReturn;
}
 800fc78:	0020      	movs	r0, r4
 800fc7a:	bd10      	pop	{r4, pc}

0800fc7c <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800fc7c:	b672      	cpsid	i
	for( ;; );
 800fc7e:	e7fe      	b.n	800fc7e <prvTaskExitError+0x2>

0800fc80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fc80:	4a06      	ldr	r2, [pc, #24]	; (800fc9c <pxCurrentTCBConst2>)
 800fc82:	6813      	ldr	r3, [r2, #0]
 800fc84:	6818      	ldr	r0, [r3, #0]
 800fc86:	3020      	adds	r0, #32
 800fc88:	f380 8809 	msr	PSP, r0
 800fc8c:	2002      	movs	r0, #2
 800fc8e:	f380 8814 	msr	CONTROL, r0
 800fc92:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fc94:	46ae      	mov	lr, r5
 800fc96:	b662      	cpsie	i
 800fc98:	bd00      	pop	{pc}
 800fc9a:	46c0      	nop			; (mov r8, r8)

0800fc9c <pxCurrentTCBConst2>:
 800fc9c:	20002bcc 	.word	0x20002bcc

0800fca0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800fca0:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fca2:	4b06      	ldr	r3, [pc, #24]	; (800fcbc <prvSetupTimerInterrupt+0x1c>)
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	21fa      	movs	r1, #250	; 0xfa
 800fca8:	0089      	lsls	r1, r1, #2
 800fcaa:	f7f0 fa51 	bl	8000150 <__udivsi3>
 800fcae:	3801      	subs	r0, #1
 800fcb0:	4b03      	ldr	r3, [pc, #12]	; (800fcc0 <prvSetupTimerInterrupt+0x20>)
 800fcb2:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fcb4:	4b03      	ldr	r3, [pc, #12]	; (800fcc4 <prvSetupTimerInterrupt+0x24>)
 800fcb6:	2207      	movs	r2, #7
 800fcb8:	601a      	str	r2, [r3, #0]
}
 800fcba:	bd10      	pop	{r4, pc}
 800fcbc:	200000a4 	.word	0x200000a4
 800fcc0:	e000e014 	.word	0xe000e014
 800fcc4:	e000e010 	.word	0xe000e010

0800fcc8 <pxPortInitialiseStack>:
{
 800fcc8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fcca:	1f03      	subs	r3, r0, #4
 800fccc:	2480      	movs	r4, #128	; 0x80
 800fcce:	0464      	lsls	r4, r4, #17
 800fcd0:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fcd2:	3b04      	subs	r3, #4
 800fcd4:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fcd6:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <pxPortInitialiseStack+0x20>)
 800fcd8:	0001      	movs	r1, r0
 800fcda:	390c      	subs	r1, #12
 800fcdc:	600b      	str	r3, [r1, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcde:	0003      	movs	r3, r0
 800fce0:	3b20      	subs	r3, #32
 800fce2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fce4:	3840      	subs	r0, #64	; 0x40
}
 800fce6:	bd10      	pop	{r4, pc}
 800fce8:	0800fc7d 	.word	0x0800fc7d

0800fcec <SVC_Handler>:
}
 800fcec:	4770      	bx	lr
	...

0800fcf0 <xPortStartScheduler>:
{
 800fcf0:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800fcf2:	4b0a      	ldr	r3, [pc, #40]	; (800fd1c <xPortStartScheduler+0x2c>)
 800fcf4:	6819      	ldr	r1, [r3, #0]
 800fcf6:	22ff      	movs	r2, #255	; 0xff
 800fcf8:	0412      	lsls	r2, r2, #16
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fcfe:	6819      	ldr	r1, [r3, #0]
 800fd00:	22ff      	movs	r2, #255	; 0xff
 800fd02:	0612      	lsls	r2, r2, #24
 800fd04:	430a      	orrs	r2, r1
 800fd06:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 800fd08:	f7ff ffca 	bl	800fca0 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fd0c:	4b04      	ldr	r3, [pc, #16]	; (800fd20 <xPortStartScheduler+0x30>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800fd12:	f7ff ffb5 	bl	800fc80 <vPortStartFirstTask>
	prvTaskExitError();
 800fd16:	f7ff ffb1 	bl	800fc7c <prvTaskExitError>
 800fd1a:	46c0      	nop			; (mov r8, r8)
 800fd1c:	e000ed20 	.word	0xe000ed20
 800fd20:	200000c8 	.word	0x200000c8

0800fd24 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800fd24:	4b04      	ldr	r3, [pc, #16]	; (800fd38 <vPortYield+0x14>)
 800fd26:	2280      	movs	r2, #128	; 0x80
 800fd28:	0552      	lsls	r2, r2, #21
 800fd2a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800fd2c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fd30:	f3bf 8f6f 	isb	sy
}
 800fd34:	4770      	bx	lr
 800fd36:	46c0      	nop			; (mov r8, r8)
 800fd38:	e000ed04 	.word	0xe000ed04

0800fd3c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800fd3c:	b672      	cpsid	i
    uxCriticalNesting++;
 800fd3e:	4a04      	ldr	r2, [pc, #16]	; (800fd50 <vPortEnterCritical+0x14>)
 800fd40:	6813      	ldr	r3, [r2, #0]
 800fd42:	3301      	adds	r3, #1
 800fd44:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800fd46:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fd4a:	f3bf 8f6f 	isb	sy
}
 800fd4e:	4770      	bx	lr
 800fd50:	200000c8 	.word	0x200000c8

0800fd54 <vPortExitCritical>:
    uxCriticalNesting--;
 800fd54:	4a03      	ldr	r2, [pc, #12]	; (800fd64 <vPortExitCritical+0x10>)
 800fd56:	6813      	ldr	r3, [r2, #0]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d100      	bne.n	800fd62 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800fd60:	b662      	cpsie	i
}
 800fd62:	4770      	bx	lr
 800fd64:	200000c8 	.word	0x200000c8

0800fd68 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800fd68:	f3ef 8010 	mrs	r0, PRIMASK
 800fd6c:	b672      	cpsid	i
 800fd6e:	4770      	bx	lr
}
 800fd70:	2000      	movs	r0, #0

0800fd72 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800fd72:	f380 8810 	msr	PRIMASK, r0
 800fd76:	4770      	bx	lr

0800fd78 <PendSV_Handler>:
	__asm volatile
 800fd78:	f3ef 8009 	mrs	r0, PSP
 800fd7c:	4b0e      	ldr	r3, [pc, #56]	; (800fdb8 <pxCurrentTCBConst>)
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	3820      	subs	r0, #32
 800fd82:	6010      	str	r0, [r2, #0]
 800fd84:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fd86:	4644      	mov	r4, r8
 800fd88:	464d      	mov	r5, r9
 800fd8a:	4656      	mov	r6, sl
 800fd8c:	465f      	mov	r7, fp
 800fd8e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fd90:	b508      	push	{r3, lr}
 800fd92:	b672      	cpsid	i
 800fd94:	f7ff faba 	bl	800f30c <vTaskSwitchContext>
 800fd98:	b662      	cpsie	i
 800fd9a:	bc0c      	pop	{r2, r3}
 800fd9c:	6811      	ldr	r1, [r2, #0]
 800fd9e:	6808      	ldr	r0, [r1, #0]
 800fda0:	3010      	adds	r0, #16
 800fda2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fda4:	46a0      	mov	r8, r4
 800fda6:	46a9      	mov	r9, r5
 800fda8:	46b2      	mov	sl, r6
 800fdaa:	46bb      	mov	fp, r7
 800fdac:	f380 8809 	msr	PSP, r0
 800fdb0:	3820      	subs	r0, #32
 800fdb2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fdb4:	4718      	bx	r3
 800fdb6:	46c0      	nop			; (mov r8, r8)

0800fdb8 <pxCurrentTCBConst>:
 800fdb8:	20002bcc 	.word	0x20002bcc

0800fdbc <xPortSysTickHandler>:
{
 800fdbc:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdbe:	f7ff ffd3 	bl	800fd68 <ulSetInterruptMaskFromISR>
 800fdc2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800fdc4:	f7ff f938 	bl	800f038 <xTaskIncrementTick>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d003      	beq.n	800fdd4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800fdcc:	4b03      	ldr	r3, [pc, #12]	; (800fddc <xPortSysTickHandler+0x20>)
 800fdce:	2280      	movs	r2, #128	; 0x80
 800fdd0:	0552      	lsls	r2, r2, #21
 800fdd2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fdd4:	0020      	movs	r0, r4
 800fdd6:	f7ff ffcc 	bl	800fd72 <vClearInterruptMaskFromISR>
}
 800fdda:	bd10      	pop	{r4, pc}
 800fddc:	e000ed04 	.word	0xe000ed04

0800fde0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fde0:	b510      	push	{r4, lr}
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 800fde2:	4a10      	ldr	r2, [pc, #64]	; (800fe24 <prvHeapInit+0x44>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fde4:	0753      	lsls	r3, r2, #29
 800fde6:	d01a      	beq.n	800fe1e <prvHeapInit+0x3e>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fde8:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fdea:	2307      	movs	r3, #7
 800fdec:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800fdee:	4b0e      	ldr	r3, [pc, #56]	; (800fe28 <prvHeapInit+0x48>)
 800fdf0:	1a5b      	subs	r3, r3, r1
 800fdf2:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fdf4:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdf6:	490d      	ldr	r1, [pc, #52]	; (800fe2c <prvHeapInit+0x4c>)
 800fdf8:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdfe:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800fe00:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fe02:	2407      	movs	r4, #7
 800fe04:	43a3      	bics	r3, r4
	pxEnd = ( void * ) ulAddress;
 800fe06:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800fe08:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe0a:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fe0c:	1a98      	subs	r0, r3, r2
 800fe0e:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe10:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe12:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe14:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe16:	2380      	movs	r3, #128	; 0x80
 800fe18:	061b      	lsls	r3, r3, #24
 800fe1a:	614b      	str	r3, [r1, #20]
}
 800fe1c:	bd10      	pop	{r4, pc}
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe1e:	4b02      	ldr	r3, [pc, #8]	; (800fe28 <prvHeapInit+0x48>)
 800fe20:	e7e9      	b.n	800fdf6 <prvHeapInit+0x16>
 800fe22:	46c0      	nop			; (mov r8, r8)
 800fe24:	20002cdc 	.word	0x20002cdc
 800fe28:	00003f48 	.word	0x00003f48
 800fe2c:	20002cc4 	.word	0x20002cc4

0800fe30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe30:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe32:	4b12      	ldr	r3, [pc, #72]	; (800fe7c <prvInsertBlockIntoFreeList+0x4c>)
 800fe34:	001a      	movs	r2, r3
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4283      	cmp	r3, r0
 800fe3a:	d3fb      	bcc.n	800fe34 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe3c:	6851      	ldr	r1, [r2, #4]
 800fe3e:	1854      	adds	r4, r2, r1
 800fe40:	4284      	cmp	r4, r0
 800fe42:	d008      	beq.n	800fe56 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe44:	6841      	ldr	r1, [r0, #4]
 800fe46:	1844      	adds	r4, r0, r1
 800fe48:	42a3      	cmp	r3, r4
 800fe4a:	d009      	beq.n	800fe60 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe4c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe4e:	4290      	cmp	r0, r2
 800fe50:	d000      	beq.n	800fe54 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe52:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe54:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe56:	6840      	ldr	r0, [r0, #4]
 800fe58:	1809      	adds	r1, r1, r0
 800fe5a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800fe5c:	0010      	movs	r0, r2
 800fe5e:	e7f1      	b.n	800fe44 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe60:	4c06      	ldr	r4, [pc, #24]	; (800fe7c <prvInsertBlockIntoFreeList+0x4c>)
 800fe62:	68a4      	ldr	r4, [r4, #8]
 800fe64:	42a3      	cmp	r3, r4
 800fe66:	d006      	beq.n	800fe76 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	18c9      	adds	r1, r1, r3
 800fe6c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe6e:	6813      	ldr	r3, [r2, #0]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	6003      	str	r3, [r0, #0]
 800fe74:	e7eb      	b.n	800fe4e <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe76:	6004      	str	r4, [r0, #0]
 800fe78:	e7e9      	b.n	800fe4e <prvInsertBlockIntoFreeList+0x1e>
 800fe7a:	46c0      	nop			; (mov r8, r8)
 800fe7c:	20002cc4 	.word	0x20002cc4

0800fe80 <pvPortMalloc>:
{
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800fe84:	f7ff f8c4 	bl	800f010 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fe88:	4b2e      	ldr	r3, [pc, #184]	; (800ff44 <pvPortMalloc+0xc4>)
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d014      	beq.n	800feba <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe90:	4b2c      	ldr	r3, [pc, #176]	; (800ff44 <pvPortMalloc+0xc4>)
 800fe92:	695b      	ldr	r3, [r3, #20]
 800fe94:	422b      	tst	r3, r5
 800fe96:	d113      	bne.n	800fec0 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800fe98:	2d00      	cmp	r5, #0
 800fe9a:	d005      	beq.n	800fea8 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 800fe9c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe9e:	076b      	lsls	r3, r5, #29
 800fea0:	d002      	beq.n	800fea8 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fea2:	2307      	movs	r3, #7
 800fea4:	439d      	bics	r5, r3
 800fea6:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	d010      	beq.n	800fece <pvPortMalloc+0x4e>
 800feac:	4b25      	ldr	r3, [pc, #148]	; (800ff44 <pvPortMalloc+0xc4>)
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	42ab      	cmp	r3, r5
 800feb2:	d310      	bcc.n	800fed6 <pvPortMalloc+0x56>
				pxBlock = xStart.pxNextFreeBlock;
 800feb4:	4a23      	ldr	r2, [pc, #140]	; (800ff44 <pvPortMalloc+0xc4>)
 800feb6:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800feb8:	e013      	b.n	800fee2 <pvPortMalloc+0x62>
			prvHeapInit();
 800feba:	f7ff ff91 	bl	800fde0 <prvHeapInit>
 800febe:	e7e7      	b.n	800fe90 <pvPortMalloc+0x10>
	( void ) xTaskResumeAll();
 800fec0:	f7ff f92e 	bl	800f120 <xTaskResumeAll>
void *pvReturn = NULL;
 800fec4:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800fec6:	f7fd fc33 	bl	800d730 <vApplicationMallocFailedHook>
}
 800feca:	0030      	movs	r0, r6
 800fecc:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
 800fece:	f7ff f927 	bl	800f120 <xTaskResumeAll>
void *pvReturn = NULL;
 800fed2:	2600      	movs	r6, #0
 800fed4:	e7f7      	b.n	800fec6 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800fed6:	f7ff f923 	bl	800f120 <xTaskResumeAll>
void *pvReturn = NULL;
 800feda:	2600      	movs	r6, #0
 800fedc:	e7f3      	b.n	800fec6 <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800fede:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800fee0:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fee2:	6863      	ldr	r3, [r4, #4]
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	d202      	bcs.n	800feee <pvPortMalloc+0x6e>
 800fee8:	6823      	ldr	r3, [r4, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1f7      	bne.n	800fede <pvPortMalloc+0x5e>
				if( pxBlock != pxEnd )
 800feee:	4b15      	ldr	r3, [pc, #84]	; (800ff44 <pvPortMalloc+0xc4>)
 800fef0:	689b      	ldr	r3, [r3, #8]
 800fef2:	42a3      	cmp	r3, r4
 800fef4:	d01c      	beq.n	800ff30 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fef6:	6816      	ldr	r6, [r2, #0]
 800fef8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fefe:	6863      	ldr	r3, [r4, #4]
 800ff00:	1b5b      	subs	r3, r3, r5
 800ff02:	2b10      	cmp	r3, #16
 800ff04:	d818      	bhi.n	800ff38 <pvPortMalloc+0xb8>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff06:	6861      	ldr	r1, [r4, #4]
 800ff08:	4a0e      	ldr	r2, [pc, #56]	; (800ff44 <pvPortMalloc+0xc4>)
 800ff0a:	6913      	ldr	r3, [r2, #16]
 800ff0c:	1a5b      	subs	r3, r3, r1
 800ff0e:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff10:	68d2      	ldr	r2, [r2, #12]
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d201      	bcs.n	800ff1a <pvPortMalloc+0x9a>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff16:	4a0b      	ldr	r2, [pc, #44]	; (800ff44 <pvPortMalloc+0xc4>)
 800ff18:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff1a:	4b0a      	ldr	r3, [pc, #40]	; (800ff44 <pvPortMalloc+0xc4>)
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	430b      	orrs	r3, r1
 800ff20:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800ff26:	f7ff f8fb 	bl	800f120 <xTaskResumeAll>
		if( pvReturn == NULL )
 800ff2a:	2e00      	cmp	r6, #0
 800ff2c:	d1cd      	bne.n	800feca <pvPortMalloc+0x4a>
 800ff2e:	e7ca      	b.n	800fec6 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800ff30:	f7ff f8f6 	bl	800f120 <xTaskResumeAll>
void *pvReturn = NULL;
 800ff34:	2600      	movs	r6, #0
 800ff36:	e7c6      	b.n	800fec6 <pvPortMalloc+0x46>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff38:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff3a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff3c:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ff3e:	f7ff ff77 	bl	800fe30 <prvInsertBlockIntoFreeList>
 800ff42:	e7e0      	b.n	800ff06 <pvPortMalloc+0x86>
 800ff44:	20002cc4 	.word	0x20002cc4

0800ff48 <vPortFree>:
{
 800ff48:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d009      	beq.n	800ff62 <vPortFree+0x1a>
		puc -= xHeapStructSize;
 800ff4e:	0005      	movs	r5, r0
 800ff50:	3d08      	subs	r5, #8
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff52:	686b      	ldr	r3, [r5, #4]
 800ff54:	4a0b      	ldr	r2, [pc, #44]	; (800ff84 <vPortFree+0x3c>)
 800ff56:	6952      	ldr	r2, [r2, #20]
 800ff58:	421a      	tst	r2, r3
 800ff5a:	d002      	beq.n	800ff62 <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800ff5c:	6829      	ldr	r1, [r5, #0]
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	d000      	beq.n	800ff64 <vPortFree+0x1c>
}
 800ff62:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff64:	4393      	bics	r3, r2
 800ff66:	606b      	str	r3, [r5, #4]
				vTaskSuspendAll();
 800ff68:	f7ff f852 	bl	800f010 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff6c:	6869      	ldr	r1, [r5, #4]
 800ff6e:	4a05      	ldr	r2, [pc, #20]	; (800ff84 <vPortFree+0x3c>)
 800ff70:	6913      	ldr	r3, [r2, #16]
 800ff72:	185b      	adds	r3, r3, r1
 800ff74:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff76:	0028      	movs	r0, r5
 800ff78:	f7ff ff5a 	bl	800fe30 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ff7c:	f7ff f8d0 	bl	800f120 <xTaskResumeAll>
}
 800ff80:	e7ef      	b.n	800ff62 <vPortFree+0x1a>
 800ff82:	46c0      	nop			; (mov r8, r8)
 800ff84:	20002cc4 	.word	0x20002cc4

0800ff88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ff88:	b510      	push	{r4, lr}
 800ff8a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ff8c:	f002 f80c 	bl	8011fa8 <HAL_RCC_GetHCLKFreq>
 800ff90:	21fa      	movs	r1, #250	; 0xfa
 800ff92:	0089      	lsls	r1, r1, #2
 800ff94:	f7f0 f8dc 	bl	8000150 <__udivsi3>
 800ff98:	f000 fb4e 	bl	8010638 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ff9c:	2001      	movs	r0, #1
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	0021      	movs	r1, r4
 800ffa2:	4240      	negs	r0, r0
 800ffa4:	f000 fb04 	bl	80105b0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	bd10      	pop	{r4, pc}

0800ffac <HAL_Init>:
{
 800ffac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ffae:	4a06      	ldr	r2, [pc, #24]	; (800ffc8 <HAL_Init+0x1c>)
 800ffb0:	6813      	ldr	r3, [r2, #0]
 800ffb2:	2110      	movs	r1, #16
 800ffb4:	430b      	orrs	r3, r1
 800ffb6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ffb8:	2000      	movs	r0, #0
 800ffba:	f7ff ffe5 	bl	800ff88 <HAL_InitTick>
  HAL_MspInit();
 800ffbe:	f001 fbd0 	bl	8011762 <HAL_MspInit>
}
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	bd10      	pop	{r4, pc}
 800ffc6:	46c0      	nop			; (mov r8, r8)
 800ffc8:	40022000 	.word	0x40022000

0800ffcc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ffcc:	4a02      	ldr	r2, [pc, #8]	; (800ffd8 <HAL_IncTick+0xc>)
 800ffce:	6813      	ldr	r3, [r2, #0]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	6013      	str	r3, [r2, #0]
}
 800ffd4:	4770      	bx	lr
 800ffd6:	46c0      	nop			; (mov r8, r8)
 800ffd8:	20006c24 	.word	0x20006c24

0800ffdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ffdc:	4b01      	ldr	r3, [pc, #4]	; (800ffe4 <HAL_GetTick+0x8>)
 800ffde:	6818      	ldr	r0, [r3, #0]
}
 800ffe0:	4770      	bx	lr
 800ffe2:	46c0      	nop			; (mov r8, r8)
 800ffe4:	20006c24 	.word	0x20006c24

0800ffe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ffe8:	b510      	push	{r4, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ffee:	f7ff fff5 	bl	800ffdc <HAL_GetTick>
 800fff2:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fff4:	f7ff fff2 	bl	800ffdc <HAL_GetTick>
 800fff8:	1b00      	subs	r0, r0, r4
 800fffa:	9b01      	ldr	r3, [sp, #4]
 800fffc:	4298      	cmp	r0, r3
 800fffe:	d3f9      	bcc.n	800fff4 <HAL_Delay+0xc>
  {
  }
}
 8010000:	b002      	add	sp, #8
 8010002:	bd10      	pop	{r4, pc}

08010004 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010004:	4b01      	ldr	r3, [pc, #4]	; (801000c <HAL_GetREVID+0x8>)
 8010006:	6818      	ldr	r0, [r3, #0]
 8010008:	0c00      	lsrs	r0, r0, #16
}
 801000a:	4770      	bx	lr
 801000c:	40015800 	.word	0x40015800

08010010 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010010:	4b02      	ldr	r3, [pc, #8]	; (801001c <HAL_GetDEVID+0xc>)
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	0500      	lsls	r0, r0, #20
 8010016:	0d00      	lsrs	r0, r0, #20
}
 8010018:	4770      	bx	lr
 801001a:	46c0      	nop			; (mov r8, r8)
 801001c:	40015800 	.word	0x40015800

08010020 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010024:	6802      	ldr	r2, [r0, #0]
 8010026:	6893      	ldr	r3, [r2, #8]
 8010028:	075b      	lsls	r3, r3, #29
 801002a:	d521      	bpl.n	8010070 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801002c:	6893      	ldr	r3, [r2, #8]
 801002e:	075b      	lsls	r3, r3, #29
 8010030:	d506      	bpl.n	8010040 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010032:	6893      	ldr	r3, [r2, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010034:	079b      	lsls	r3, r3, #30
 8010036:	d403      	bmi.n	8010040 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010038:	6893      	ldr	r3, [r2, #8]
 801003a:	2110      	movs	r1, #16
 801003c:	430b      	orrs	r3, r1
 801003e:	6093      	str	r3, [r2, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8010040:	f7ff ffcc 	bl	800ffdc <HAL_GetTick>
 8010044:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010046:	6823      	ldr	r3, [r4, #0]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	075b      	lsls	r3, r3, #29
 801004c:	d50e      	bpl.n	801006c <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801004e:	f7ff ffc5 	bl	800ffdc <HAL_GetTick>
 8010052:	1b40      	subs	r0, r0, r5
 8010054:	2802      	cmp	r0, #2
 8010056:	d9f6      	bls.n	8010046 <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010058:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801005a:	2210      	movs	r2, #16
 801005c:	4313      	orrs	r3, r2
 801005e:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010060:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010062:	3a0f      	subs	r2, #15
 8010064:	4313      	orrs	r3, r2
 8010066:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8010068:	2001      	movs	r0, #1
 801006a:	e002      	b.n	8010072 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 801006c:	2000      	movs	r0, #0
 801006e:	e000      	b.n	8010072 <ADC_ConversionStop+0x52>
 8010070:	2000      	movs	r0, #0
}
 8010072:	bd70      	pop	{r4, r5, r6, pc}

08010074 <ADC_Disable>:
{
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010078:	6802      	ldr	r2, [r0, #0]
 801007a:	6891      	ldr	r1, [r2, #8]
 801007c:	2303      	movs	r3, #3
 801007e:	400b      	ands	r3, r1
 8010080:	2b01      	cmp	r3, #1
 8010082:	d001      	beq.n	8010088 <ADC_Disable+0x14>
  return HAL_OK;
 8010084:	2000      	movs	r0, #0
}
 8010086:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010088:	6813      	ldr	r3, [r2, #0]
 801008a:	07db      	lsls	r3, r3, #31
 801008c:	d402      	bmi.n	8010094 <ADC_Disable+0x20>
 801008e:	68d3      	ldr	r3, [r2, #12]
 8010090:	041b      	lsls	r3, r3, #16
 8010092:	d52d      	bpl.n	80100f0 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8010094:	6891      	ldr	r1, [r2, #8]
 8010096:	2305      	movs	r3, #5
 8010098:	400b      	ands	r3, r1
 801009a:	2b01      	cmp	r3, #1
 801009c:	d009      	beq.n	80100b2 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801009e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80100a0:	2210      	movs	r2, #16
 80100a2:	4313      	orrs	r3, r2
 80100a4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80100a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80100a8:	3a0f      	subs	r2, #15
 80100aa:	4313      	orrs	r3, r2
 80100ac:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80100ae:	2001      	movs	r0, #1
 80100b0:	e7e9      	b.n	8010086 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80100b2:	6893      	ldr	r3, [r2, #8]
 80100b4:	2102      	movs	r1, #2
 80100b6:	430b      	orrs	r3, r1
 80100b8:	6093      	str	r3, [r2, #8]
 80100ba:	6823      	ldr	r3, [r4, #0]
 80100bc:	2203      	movs	r2, #3
 80100be:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80100c0:	f7ff ff8c 	bl	800ffdc <HAL_GetTick>
 80100c4:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80100c6:	6823      	ldr	r3, [r4, #0]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	07db      	lsls	r3, r3, #31
 80100cc:	d50e      	bpl.n	80100ec <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80100ce:	f7ff ff85 	bl	800ffdc <HAL_GetTick>
 80100d2:	1b40      	subs	r0, r0, r5
 80100d4:	2802      	cmp	r0, #2
 80100d6:	d9f6      	bls.n	80100c6 <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80100d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80100da:	2210      	movs	r2, #16
 80100dc:	4313      	orrs	r3, r2
 80100de:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80100e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80100e2:	3a0f      	subs	r2, #15
 80100e4:	4313      	orrs	r3, r2
 80100e6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80100e8:	2001      	movs	r0, #1
 80100ea:	e7cc      	b.n	8010086 <ADC_Disable+0x12>
  return HAL_OK;
 80100ec:	2000      	movs	r0, #0
 80100ee:	e7ca      	b.n	8010086 <ADC_Disable+0x12>
 80100f0:	2000      	movs	r0, #0
 80100f2:	e7c8      	b.n	8010086 <ADC_Disable+0x12>

080100f4 <ADC_Enable>:
{
 80100f4:	b530      	push	{r4, r5, lr}
 80100f6:	b083      	sub	sp, #12
 80100f8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80100fe:	6803      	ldr	r3, [r0, #0]
 8010100:	6899      	ldr	r1, [r3, #8]
 8010102:	2203      	movs	r2, #3
 8010104:	400a      	ands	r2, r1
 8010106:	2a01      	cmp	r2, #1
 8010108:	d014      	beq.n	8010134 <ADC_Enable+0x40>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801010a:	6899      	ldr	r1, [r3, #8]
 801010c:	4a20      	ldr	r2, [pc, #128]	; (8010190 <ADC_Enable+0x9c>)
 801010e:	4211      	tst	r1, r2
 8010110:	d118      	bne.n	8010144 <ADC_Enable+0x50>
    __HAL_ADC_ENABLE(hadc);
 8010112:	689a      	ldr	r2, [r3, #8]
 8010114:	2101      	movs	r1, #1
 8010116:	430a      	orrs	r2, r1
 8010118:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801011a:	4b1e      	ldr	r3, [pc, #120]	; (8010194 <ADC_Enable+0xa0>)
 801011c:	6818      	ldr	r0, [r3, #0]
 801011e:	491e      	ldr	r1, [pc, #120]	; (8010198 <ADC_Enable+0xa4>)
 8010120:	f7f0 f816 	bl	8000150 <__udivsi3>
 8010124:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010126:	9b01      	ldr	r3, [sp, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d016      	beq.n	801015a <ADC_Enable+0x66>
      wait_loop_index--;
 801012c:	9b01      	ldr	r3, [sp, #4]
 801012e:	3b01      	subs	r3, #1
 8010130:	9301      	str	r3, [sp, #4]
 8010132:	e7f8      	b.n	8010126 <ADC_Enable+0x32>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	07d2      	lsls	r2, r2, #31
 8010138:	d427      	bmi.n	801018a <ADC_Enable+0x96>
 801013a:	68da      	ldr	r2, [r3, #12]
 801013c:	0412      	lsls	r2, r2, #16
 801013e:	d5e4      	bpl.n	801010a <ADC_Enable+0x16>
  return HAL_OK;
 8010140:	2000      	movs	r0, #0
 8010142:	e008      	b.n	8010156 <ADC_Enable+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010144:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010146:	2210      	movs	r2, #16
 8010148:	4313      	orrs	r3, r2
 801014a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801014c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801014e:	3a0f      	subs	r2, #15
 8010150:	4313      	orrs	r3, r2
 8010152:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010154:	2001      	movs	r0, #1
}
 8010156:	b003      	add	sp, #12
 8010158:	bd30      	pop	{r4, r5, pc}
    tickstart = HAL_GetTick();
 801015a:	f7ff ff3f 	bl	800ffdc <HAL_GetTick>
 801015e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	07db      	lsls	r3, r3, #31
 8010166:	d40e      	bmi.n	8010186 <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010168:	f7ff ff38 	bl	800ffdc <HAL_GetTick>
 801016c:	1b40      	subs	r0, r0, r5
 801016e:	2802      	cmp	r0, #2
 8010170:	d9f6      	bls.n	8010160 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010172:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010174:	2210      	movs	r2, #16
 8010176:	4313      	orrs	r3, r2
 8010178:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801017a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801017c:	3a0f      	subs	r2, #15
 801017e:	4313      	orrs	r3, r2
 8010180:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010182:	2001      	movs	r0, #1
 8010184:	e7e7      	b.n	8010156 <ADC_Enable+0x62>
  return HAL_OK;
 8010186:	2000      	movs	r0, #0
 8010188:	e7e5      	b.n	8010156 <ADC_Enable+0x62>
 801018a:	2000      	movs	r0, #0
 801018c:	e7e3      	b.n	8010156 <ADC_Enable+0x62>
 801018e:	46c0      	nop			; (mov r8, r8)
 8010190:	80000017 	.word	0x80000017
 8010194:	200000a4 	.word	0x200000a4
 8010198:	000f4240 	.word	0x000f4240

0801019c <HAL_ADC_Init>:
{
 801019c:	b570      	push	{r4, r5, r6, lr}
 801019e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80101a0:	d100      	bne.n	80101a4 <HAL_ADC_Init+0x8>
 80101a2:	e0a9      	b.n	80102f8 <HAL_ADC_Init+0x15c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80101a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d07f      	beq.n	80102aa <HAL_ADC_Init+0x10e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80101aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101ac:	06db      	lsls	r3, r3, #27
 80101ae:	d500      	bpl.n	80101b2 <HAL_ADC_Init+0x16>
 80101b0:	e09c      	b.n	80102ec <HAL_ADC_Init+0x150>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	689a      	ldr	r2, [r3, #8]
 80101b6:	2104      	movs	r1, #4
 80101b8:	0008      	movs	r0, r1
 80101ba:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80101bc:	4211      	tst	r1, r2
 80101be:	d000      	beq.n	80101c2 <HAL_ADC_Init+0x26>
 80101c0:	e094      	b.n	80102ec <HAL_ADC_Init+0x150>
    ADC_STATE_CLR_SET(hadc->State,
 80101c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80101c4:	494d      	ldr	r1, [pc, #308]	; (80102fc <HAL_ADC_Init+0x160>)
 80101c6:	400a      	ands	r2, r1
 80101c8:	3106      	adds	r1, #6
 80101ca:	31ff      	adds	r1, #255	; 0xff
 80101cc:	430a      	orrs	r2, r1
 80101ce:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80101d0:	6899      	ldr	r1, [r3, #8]
 80101d2:	2203      	movs	r2, #3
 80101d4:	400a      	ands	r2, r1
 80101d6:	2a01      	cmp	r2, #1
 80101d8:	d06d      	beq.n	80102b6 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->CFGR1,
 80101da:	68da      	ldr	r2, [r3, #12]
 80101dc:	2118      	movs	r1, #24
 80101de:	438a      	bics	r2, r1
 80101e0:	68a1      	ldr	r1, [r4, #8]
 80101e2:	430a      	orrs	r2, r1
 80101e4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80101e6:	6822      	ldr	r2, [r4, #0]
 80101e8:	6913      	ldr	r3, [r2, #16]
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	089b      	lsrs	r3, r3, #2
 80101ee:	6861      	ldr	r1, [r4, #4]
 80101f0:	430b      	orrs	r3, r1
 80101f2:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80101f4:	6822      	ldr	r2, [r4, #0]
 80101f6:	68d3      	ldr	r3, [r2, #12]
 80101f8:	4941      	ldr	r1, [pc, #260]	; (8010300 <HAL_ADC_Init+0x164>)
 80101fa:	400b      	ands	r3, r1
 80101fc:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80101fe:	69a3      	ldr	r3, [r4, #24]
 8010200:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010202:	69e2      	ldr	r2, [r4, #28]
 8010204:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010206:	4313      	orrs	r3, r2
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010208:	6a21      	ldr	r1, [r4, #32]
 801020a:	034a      	lsls	r2, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801020c:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801020e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010210:	2a01      	cmp	r2, #1
 8010212:	d057      	beq.n	80102c4 <HAL_ADC_Init+0x128>
 8010214:	2280      	movs	r2, #128	; 0x80
 8010216:	0152      	lsls	r2, r2, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010218:	4313      	orrs	r3, r2
                 hadc->Init.DataAlign                                   |
 801021a:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801021c:	4313      	orrs	r3, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801021e:	6922      	ldr	r2, [r4, #16]
 8010220:	2a02      	cmp	r2, #2
 8010222:	d051      	beq.n	80102c8 <HAL_ADC_Init+0x12c>
                 hadc->Init.DataAlign                                   |
 8010224:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010226:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010228:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801022a:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801022c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801022e:	2a01      	cmp	r2, #1
 8010230:	d04c      	beq.n	80102cc <HAL_ADC_Init+0x130>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010234:	21c2      	movs	r1, #194	; 0xc2
 8010236:	31ff      	adds	r1, #255	; 0xff
 8010238:	428a      	cmp	r2, r1
 801023a:	d002      	beq.n	8010242 <HAL_ADC_Init+0xa6>
                    hadc->Init.ExternalTrigConvEdge );
 801023c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 801023e:	430a      	orrs	r2, r1
 8010240:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010242:	6821      	ldr	r1, [r4, #0]
 8010244:	68ca      	ldr	r2, [r1, #12]
 8010246:	431a      	orrs	r2, r3
 8010248:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801024a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801024c:	2180      	movs	r1, #128	; 0x80
 801024e:	0549      	lsls	r1, r1, #21
 8010250:	428a      	cmp	r2, r1
 8010252:	d00d      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 8010254:	2a01      	cmp	r2, #1
 8010256:	d00b      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 8010258:	2a02      	cmp	r2, #2
 801025a:	d009      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 801025c:	2a03      	cmp	r2, #3
 801025e:	d007      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 8010260:	2a04      	cmp	r2, #4
 8010262:	d005      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 8010264:	2a05      	cmp	r2, #5
 8010266:	d003      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 8010268:	2a06      	cmp	r2, #6
 801026a:	d001      	beq.n	8010270 <HAL_ADC_Init+0xd4>
 801026c:	2a07      	cmp	r2, #7
 801026e:	d10a      	bne.n	8010286 <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010270:	6820      	ldr	r0, [r4, #0]
 8010272:	6941      	ldr	r1, [r0, #20]
 8010274:	2207      	movs	r2, #7
 8010276:	4391      	bics	r1, r2
 8010278:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 801027a:	6820      	ldr	r0, [r4, #0]
 801027c:	6941      	ldr	r1, [r0, #20]
 801027e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010280:	402a      	ands	r2, r5
 8010282:	430a      	orrs	r2, r1
 8010284:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010286:	6822      	ldr	r2, [r4, #0]
 8010288:	68d2      	ldr	r2, [r2, #12]
 801028a:	491e      	ldr	r1, [pc, #120]	; (8010304 <HAL_ADC_Init+0x168>)
 801028c:	400a      	ands	r2, r1
 801028e:	429a      	cmp	r2, r3
 8010290:	d022      	beq.n	80102d8 <HAL_ADC_Init+0x13c>
      ADC_STATE_CLR_SET(hadc->State,
 8010292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010294:	2212      	movs	r2, #18
 8010296:	4393      	bics	r3, r2
 8010298:	3a02      	subs	r2, #2
 801029a:	4313      	orrs	r3, r2
 801029c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801029e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80102a0:	3a0f      	subs	r2, #15
 80102a2:	4313      	orrs	r3, r2
 80102a4:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80102a6:	2001      	movs	r0, #1
 80102a8:	e025      	b.n	80102f6 <HAL_ADC_Init+0x15a>
    ADC_CLEAR_ERRORCODE(hadc);
 80102aa:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80102ac:	2240      	movs	r2, #64	; 0x40
 80102ae:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80102b0:	f7fc fafe 	bl	800c8b0 <HAL_ADC_MspInit>
 80102b4:	e779      	b.n	80101aa <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	07d2      	lsls	r2, r2, #31
 80102ba:	d49b      	bmi.n	80101f4 <HAL_ADC_Init+0x58>
 80102bc:	68da      	ldr	r2, [r3, #12]
 80102be:	0412      	lsls	r2, r2, #16
 80102c0:	d498      	bmi.n	80101f4 <HAL_ADC_Init+0x58>
 80102c2:	e78a      	b.n	80101da <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80102c4:	0002      	movs	r2, r0
 80102c6:	e7a7      	b.n	8010218 <HAL_ADC_Init+0x7c>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80102c8:	2004      	movs	r0, #4
 80102ca:	e7ab      	b.n	8010224 <HAL_ADC_Init+0x88>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80102cc:	2900      	cmp	r1, #0
 80102ce:	d1b0      	bne.n	8010232 <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80102d0:	2280      	movs	r2, #128	; 0x80
 80102d2:	0252      	lsls	r2, r2, #9
 80102d4:	4313      	orrs	r3, r2
 80102d6:	e7ac      	b.n	8010232 <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 80102d8:	2300      	movs	r3, #0
 80102da:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80102dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102de:	2203      	movs	r2, #3
 80102e0:	4393      	bics	r3, r2
 80102e2:	3a02      	subs	r2, #2
 80102e4:	4313      	orrs	r3, r2
 80102e6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80102e8:	2000      	movs	r0, #0
 80102ea:	e004      	b.n	80102f6 <HAL_ADC_Init+0x15a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102ee:	2210      	movs	r2, #16
 80102f0:	4313      	orrs	r3, r2
 80102f2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80102f4:	2001      	movs	r0, #1
}
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80102f8:	2001      	movs	r0, #1
 80102fa:	e7fc      	b.n	80102f6 <HAL_ADC_Init+0x15a>
 80102fc:	fffffefd 	.word	0xfffffefd
 8010300:	fffe0219 	.word	0xfffe0219
 8010304:	833fffe7 	.word	0x833fffe7

08010308 <HAL_ADC_Start>:
{
 8010308:	b510      	push	{r4, lr}
 801030a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801030c:	6803      	ldr	r3, [r0, #0]
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	075b      	lsls	r3, r3, #29
 8010312:	d423      	bmi.n	801035c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010314:	2340      	movs	r3, #64	; 0x40
 8010316:	5cc3      	ldrb	r3, [r0, r3]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d021      	beq.n	8010360 <HAL_ADC_Start+0x58>
 801031c:	2340      	movs	r3, #64	; 0x40
 801031e:	2201      	movs	r2, #1
 8010320:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010322:	69c3      	ldr	r3, [r0, #28]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d114      	bne.n	8010352 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010328:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 801032a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801032c:	4b0d      	ldr	r3, [pc, #52]	; (8010364 <HAL_ADC_Start+0x5c>)
 801032e:	401a      	ands	r2, r3
 8010330:	2380      	movs	r3, #128	; 0x80
 8010332:	005b      	lsls	r3, r3, #1
 8010334:	4313      	orrs	r3, r2
 8010336:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010338:	2300      	movs	r3, #0
 801033a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801033c:	2240      	movs	r2, #64	; 0x40
 801033e:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010340:	6823      	ldr	r3, [r4, #0]
 8010342:	3a24      	subs	r2, #36	; 0x24
 8010344:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010346:	6822      	ldr	r2, [r4, #0]
 8010348:	6893      	ldr	r3, [r2, #8]
 801034a:	2104      	movs	r1, #4
 801034c:	430b      	orrs	r3, r1
 801034e:	6093      	str	r3, [r2, #8]
}
 8010350:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010352:	f7ff fecf 	bl	80100f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010356:	2800      	cmp	r0, #0
 8010358:	d1fa      	bne.n	8010350 <HAL_ADC_Start+0x48>
 801035a:	e7e6      	b.n	801032a <HAL_ADC_Start+0x22>
    tmp_hal_status = HAL_BUSY;
 801035c:	2002      	movs	r0, #2
 801035e:	e7f7      	b.n	8010350 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010360:	2002      	movs	r0, #2
 8010362:	e7f5      	b.n	8010350 <HAL_ADC_Start+0x48>
 8010364:	fffff0fe 	.word	0xfffff0fe

08010368 <HAL_ADC_Stop>:
{ 
 8010368:	b510      	push	{r4, lr}
 801036a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 801036c:	2340      	movs	r3, #64	; 0x40
 801036e:	5cc3      	ldrb	r3, [r0, r3]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d017      	beq.n	80103a4 <HAL_ADC_Stop+0x3c>
 8010374:	2340      	movs	r3, #64	; 0x40
 8010376:	2201      	movs	r2, #1
 8010378:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 801037a:	f7ff fe51 	bl	8010020 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801037e:	2800      	cmp	r0, #0
 8010380:	d003      	beq.n	801038a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010382:	2340      	movs	r3, #64	; 0x40
 8010384:	2200      	movs	r2, #0
 8010386:	54e2      	strb	r2, [r4, r3]
}
 8010388:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 801038a:	0020      	movs	r0, r4
 801038c:	f7ff fe72 	bl	8010074 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010390:	2800      	cmp	r0, #0
 8010392:	d1f6      	bne.n	8010382 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010394:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010396:	4a04      	ldr	r2, [pc, #16]	; (80103a8 <HAL_ADC_Stop+0x40>)
 8010398:	4013      	ands	r3, r2
 801039a:	3204      	adds	r2, #4
 801039c:	32ff      	adds	r2, #255	; 0xff
 801039e:	4313      	orrs	r3, r2
 80103a0:	6463      	str	r3, [r4, #68]	; 0x44
 80103a2:	e7ee      	b.n	8010382 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80103a4:	2002      	movs	r0, #2
 80103a6:	e7ef      	b.n	8010388 <HAL_ADC_Stop+0x20>
 80103a8:	fffffefe 	.word	0xfffffefe

080103ac <HAL_ADC_PollForConversion>:
{
 80103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ae:	0004      	movs	r4, r0
 80103b0:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80103b2:	6946      	ldr	r6, [r0, #20]
 80103b4:	2e08      	cmp	r6, #8
 80103b6:	d004      	beq.n	80103c2 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80103b8:	6803      	ldr	r3, [r0, #0]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	07db      	lsls	r3, r3, #31
 80103be:	d419      	bmi.n	80103f4 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80103c0:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 80103c2:	f7ff fe0b 	bl	800ffdc <HAL_GetTick>
 80103c6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	4216      	tst	r6, r2
 80103ce:	d11a      	bne.n	8010406 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 80103d0:	1c6b      	adds	r3, r5, #1
 80103d2:	d0f9      	beq.n	80103c8 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80103d4:	2d00      	cmp	r5, #0
 80103d6:	d004      	beq.n	80103e2 <HAL_ADC_PollForConversion+0x36>
 80103d8:	f7ff fe00 	bl	800ffdc <HAL_GetTick>
 80103dc:	1bc0      	subs	r0, r0, r7
 80103de:	42a8      	cmp	r0, r5
 80103e0:	d9f2      	bls.n	80103c8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80103e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103e4:	2204      	movs	r2, #4
 80103e6:	4313      	orrs	r3, r2
 80103e8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80103ea:	2340      	movs	r3, #64	; 0x40
 80103ec:	2200      	movs	r2, #0
 80103ee:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80103f0:	2003      	movs	r0, #3
 80103f2:	e02d      	b.n	8010450 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80103f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80103f6:	2220      	movs	r2, #32
 80103f8:	4313      	orrs	r3, r2
 80103fa:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80103fc:	2340      	movs	r3, #64	; 0x40
 80103fe:	2200      	movs	r2, #0
 8010400:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010402:	2001      	movs	r0, #1
 8010404:	e024      	b.n	8010450 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010406:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010408:	2280      	movs	r2, #128	; 0x80
 801040a:	0092      	lsls	r2, r2, #2
 801040c:	430a      	orrs	r2, r1
 801040e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010410:	68d9      	ldr	r1, [r3, #12]
 8010412:	22c0      	movs	r2, #192	; 0xc0
 8010414:	0112      	lsls	r2, r2, #4
 8010416:	4211      	tst	r1, r2
 8010418:	d113      	bne.n	8010442 <HAL_ADC_PollForConversion+0x96>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 801041a:	6a22      	ldr	r2, [r4, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 801041c:	2a00      	cmp	r2, #0
 801041e:	d110      	bne.n	8010442 <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	0712      	lsls	r2, r2, #28
 8010424:	d50d      	bpl.n	8010442 <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010426:	689a      	ldr	r2, [r3, #8]
 8010428:	0752      	lsls	r2, r2, #29
 801042a:	d412      	bmi.n	8010452 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	210c      	movs	r1, #12
 8010430:	438a      	bics	r2, r1
 8010432:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010436:	4a0c      	ldr	r2, [pc, #48]	; (8010468 <HAL_ADC_PollForConversion+0xbc>)
 8010438:	4013      	ands	r3, r2
 801043a:	3204      	adds	r2, #4
 801043c:	32ff      	adds	r2, #255	; 0xff
 801043e:	4313      	orrs	r3, r2
 8010440:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010442:	69a3      	ldr	r3, [r4, #24]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10d      	bne.n	8010464 <HAL_ADC_PollForConversion+0xb8>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010448:	6823      	ldr	r3, [r4, #0]
 801044a:	220c      	movs	r2, #12
 801044c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801044e:	2000      	movs	r0, #0
}
 8010450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010452:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010454:	2220      	movs	r2, #32
 8010456:	4313      	orrs	r3, r2
 8010458:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801045a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801045c:	3a1f      	subs	r2, #31
 801045e:	4313      	orrs	r3, r2
 8010460:	64a3      	str	r3, [r4, #72]	; 0x48
 8010462:	e7ee      	b.n	8010442 <HAL_ADC_PollForConversion+0x96>
  return HAL_OK;
 8010464:	2000      	movs	r0, #0
 8010466:	e7f3      	b.n	8010450 <HAL_ADC_PollForConversion+0xa4>
 8010468:	fffffefe 	.word	0xfffffefe

0801046c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801046c:	6803      	ldr	r3, [r0, #0]
 801046e:	2208      	movs	r2, #8
 8010470:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010472:	6803      	ldr	r3, [r0, #0]
 8010474:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010476:	4770      	bx	lr

08010478 <HAL_ADC_ConfigChannel>:
{
 8010478:	b530      	push	{r4, r5, lr}
 801047a:	b083      	sub	sp, #12
 801047c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801047e:	2300      	movs	r3, #0
 8010480:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010482:	3340      	adds	r3, #64	; 0x40
 8010484:	5cc3      	ldrb	r3, [r0, r3]
 8010486:	2b01      	cmp	r3, #1
 8010488:	d100      	bne.n	801048c <HAL_ADC_ConfigChannel+0x14>
 801048a:	e080      	b.n	801058e <HAL_ADC_ConfigChannel+0x116>
 801048c:	2340      	movs	r3, #64	; 0x40
 801048e:	2201      	movs	r2, #1
 8010490:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010492:	6802      	ldr	r2, [r0, #0]
 8010494:	6893      	ldr	r3, [r2, #8]
 8010496:	075b      	lsls	r3, r3, #29
 8010498:	d46b      	bmi.n	8010572 <HAL_ADC_ConfigChannel+0xfa>
    if (sConfig->Rank != ADC_RANK_NONE)
 801049a:	6848      	ldr	r0, [r1, #4]
 801049c:	4b3d      	ldr	r3, [pc, #244]	; (8010594 <HAL_ADC_ConfigChannel+0x11c>)
 801049e:	4298      	cmp	r0, r3
 80104a0:	d04c      	beq.n	801053c <HAL_ADC_ConfigChannel+0xc4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80104a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80104a4:	680d      	ldr	r5, [r1, #0]
 80104a6:	2001      	movs	r0, #1
 80104a8:	40a8      	lsls	r0, r5
 80104aa:	4303      	orrs	r3, r0
 80104ac:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80104ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104b0:	2280      	movs	r2, #128	; 0x80
 80104b2:	0552      	lsls	r2, r2, #21
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d013      	beq.n	80104e0 <HAL_ADC_ConfigChannel+0x68>
 80104b8:	3b01      	subs	r3, #1
 80104ba:	2b06      	cmp	r3, #6
 80104bc:	d910      	bls.n	80104e0 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80104be:	6888      	ldr	r0, [r1, #8]
 80104c0:	6822      	ldr	r2, [r4, #0]
 80104c2:	6955      	ldr	r5, [r2, #20]
 80104c4:	2307      	movs	r3, #7
 80104c6:	402b      	ands	r3, r5
 80104c8:	4298      	cmp	r0, r3
 80104ca:	d009      	beq.n	80104e0 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80104cc:	6950      	ldr	r0, [r2, #20]
 80104ce:	2307      	movs	r3, #7
 80104d0:	4398      	bics	r0, r3
 80104d2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80104d4:	6820      	ldr	r0, [r4, #0]
 80104d6:	6942      	ldr	r2, [r0, #20]
 80104d8:	688d      	ldr	r5, [r1, #8]
 80104da:	402b      	ands	r3, r5
 80104dc:	4313      	orrs	r3, r2
 80104de:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80104e0:	680b      	ldr	r3, [r1, #0]
 80104e2:	001a      	movs	r2, r3
 80104e4:	3a10      	subs	r2, #16
 80104e6:	2a02      	cmp	r2, #2
 80104e8:	d84d      	bhi.n	8010586 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80104ea:	4a2b      	ldr	r2, [pc, #172]	; (8010598 <HAL_ADC_ConfigChannel+0x120>)
 80104ec:	6812      	ldr	r2, [r2, #0]
 80104ee:	2b10      	cmp	r3, #16
 80104f0:	d00e      	beq.n	8010510 <HAL_ADC_ConfigChannel+0x98>
 80104f2:	2b11      	cmp	r3, #17
 80104f4:	d009      	beq.n	801050a <HAL_ADC_ConfigChannel+0x92>
 80104f6:	2380      	movs	r3, #128	; 0x80
 80104f8:	045b      	lsls	r3, r3, #17
 80104fa:	4313      	orrs	r3, r2
 80104fc:	4a26      	ldr	r2, [pc, #152]	; (8010598 <HAL_ADC_ConfigChannel+0x120>)
 80104fe:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010500:	680b      	ldr	r3, [r1, #0]
 8010502:	2b10      	cmp	r3, #16
 8010504:	d007      	beq.n	8010516 <HAL_ADC_ConfigChannel+0x9e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010506:	2000      	movs	r0, #0
 8010508:	e038      	b.n	801057c <HAL_ADC_ConfigChannel+0x104>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801050a:	2380      	movs	r3, #128	; 0x80
 801050c:	03db      	lsls	r3, r3, #15
 801050e:	e7f4      	b.n	80104fa <HAL_ADC_ConfigChannel+0x82>
 8010510:	2380      	movs	r3, #128	; 0x80
 8010512:	041b      	lsls	r3, r3, #16
 8010514:	e7f1      	b.n	80104fa <HAL_ADC_ConfigChannel+0x82>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010516:	4b21      	ldr	r3, [pc, #132]	; (801059c <HAL_ADC_ConfigChannel+0x124>)
 8010518:	6818      	ldr	r0, [r3, #0]
 801051a:	4921      	ldr	r1, [pc, #132]	; (80105a0 <HAL_ADC_ConfigChannel+0x128>)
 801051c:	f7ef fe18 	bl	8000150 <__udivsi3>
 8010520:	0003      	movs	r3, r0
 8010522:	0080      	lsls	r0, r0, #2
 8010524:	18c0      	adds	r0, r0, r3
 8010526:	0040      	lsls	r0, r0, #1
 8010528:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 801052a:	e002      	b.n	8010532 <HAL_ADC_ConfigChannel+0xba>
            wait_loop_index--;
 801052c:	9b01      	ldr	r3, [sp, #4]
 801052e:	3b01      	subs	r3, #1
 8010530:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010532:	9b01      	ldr	r3, [sp, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1f9      	bne.n	801052c <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010538:	2000      	movs	r0, #0
 801053a:	e01f      	b.n	801057c <HAL_ADC_ConfigChannel+0x104>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 801053c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801053e:	680d      	ldr	r5, [r1, #0]
 8010540:	2001      	movs	r0, #1
 8010542:	40a8      	lsls	r0, r5
 8010544:	4383      	bics	r3, r0
 8010546:	6293      	str	r3, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010548:	680b      	ldr	r3, [r1, #0]
 801054a:	001a      	movs	r2, r3
 801054c:	3a10      	subs	r2, #16
 801054e:	2a02      	cmp	r2, #2
 8010550:	d81b      	bhi.n	801058a <HAL_ADC_ConfigChannel+0x112>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010552:	4a11      	ldr	r2, [pc, #68]	; (8010598 <HAL_ADC_ConfigChannel+0x120>)
 8010554:	6812      	ldr	r2, [r2, #0]
 8010556:	2b10      	cmp	r3, #16
 8010558:	d009      	beq.n	801056e <HAL_ADC_ConfigChannel+0xf6>
 801055a:	2b11      	cmp	r3, #17
 801055c:	d005      	beq.n	801056a <HAL_ADC_ConfigChannel+0xf2>
 801055e:	4b11      	ldr	r3, [pc, #68]	; (80105a4 <HAL_ADC_ConfigChannel+0x12c>)
 8010560:	4013      	ands	r3, r2
 8010562:	4a0d      	ldr	r2, [pc, #52]	; (8010598 <HAL_ADC_ConfigChannel+0x120>)
 8010564:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010566:	2000      	movs	r0, #0
 8010568:	e008      	b.n	801057c <HAL_ADC_ConfigChannel+0x104>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801056a:	4b0f      	ldr	r3, [pc, #60]	; (80105a8 <HAL_ADC_ConfigChannel+0x130>)
 801056c:	e7f8      	b.n	8010560 <HAL_ADC_ConfigChannel+0xe8>
 801056e:	4b0f      	ldr	r3, [pc, #60]	; (80105ac <HAL_ADC_ConfigChannel+0x134>)
 8010570:	e7f6      	b.n	8010560 <HAL_ADC_ConfigChannel+0xe8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010572:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010574:	2220      	movs	r2, #32
 8010576:	4313      	orrs	r3, r2
 8010578:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 801057a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 801057c:	2340      	movs	r3, #64	; 0x40
 801057e:	2200      	movs	r2, #0
 8010580:	54e2      	strb	r2, [r4, r3]
}
 8010582:	b003      	add	sp, #12
 8010584:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010586:	2000      	movs	r0, #0
 8010588:	e7f8      	b.n	801057c <HAL_ADC_ConfigChannel+0x104>
 801058a:	2000      	movs	r0, #0
 801058c:	e7f6      	b.n	801057c <HAL_ADC_ConfigChannel+0x104>
  __HAL_LOCK(hadc);
 801058e:	2002      	movs	r0, #2
 8010590:	e7f7      	b.n	8010582 <HAL_ADC_ConfigChannel+0x10a>
 8010592:	46c0      	nop			; (mov r8, r8)
 8010594:	00001001 	.word	0x00001001
 8010598:	40012708 	.word	0x40012708
 801059c:	200000a4 	.word	0x200000a4
 80105a0:	000f4240 	.word	0x000f4240
 80105a4:	feffffff 	.word	0xfeffffff
 80105a8:	ffbfffff 	.word	0xffbfffff
 80105ac:	ff7fffff 	.word	0xff7fffff

080105b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80105b0:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 80105b2:	2800      	cmp	r0, #0
 80105b4:	db11      	blt.n	80105da <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80105b6:	0883      	lsrs	r3, r0, #2
 80105b8:	4d13      	ldr	r5, [pc, #76]	; (8010608 <HAL_NVIC_SetPriority+0x58>)
 80105ba:	33c0      	adds	r3, #192	; 0xc0
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	595c      	ldr	r4, [r3, r5]
 80105c0:	2203      	movs	r2, #3
 80105c2:	4010      	ands	r0, r2
 80105c4:	00c0      	lsls	r0, r0, #3
 80105c6:	32fc      	adds	r2, #252	; 0xfc
 80105c8:	0016      	movs	r6, r2
 80105ca:	4086      	lsls	r6, r0
 80105cc:	43b4      	bics	r4, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80105ce:	0189      	lsls	r1, r1, #6
 80105d0:	400a      	ands	r2, r1
 80105d2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80105d4:	4322      	orrs	r2, r4
 80105d6:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80105d8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80105da:	230f      	movs	r3, #15
 80105dc:	4003      	ands	r3, r0
 80105de:	3b08      	subs	r3, #8
 80105e0:	089b      	lsrs	r3, r3, #2
 80105e2:	3306      	adds	r3, #6
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4a09      	ldr	r2, [pc, #36]	; (801060c <HAL_NVIC_SetPriority+0x5c>)
 80105e8:	4694      	mov	ip, r2
 80105ea:	4463      	add	r3, ip
 80105ec:	685c      	ldr	r4, [r3, #4]
 80105ee:	2203      	movs	r2, #3
 80105f0:	4010      	ands	r0, r2
 80105f2:	00c0      	lsls	r0, r0, #3
 80105f4:	32fc      	adds	r2, #252	; 0xfc
 80105f6:	0015      	movs	r5, r2
 80105f8:	4085      	lsls	r5, r0
 80105fa:	43ac      	bics	r4, r5
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80105fc:	0189      	lsls	r1, r1, #6
 80105fe:	400a      	ands	r2, r1
 8010600:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010602:	4322      	orrs	r2, r4
 8010604:	605a      	str	r2, [r3, #4]
 8010606:	e7e7      	b.n	80105d8 <HAL_NVIC_SetPriority+0x28>
 8010608:	e000e100 	.word	0xe000e100
 801060c:	e000ed00 	.word	0xe000ed00

08010610 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010610:	231f      	movs	r3, #31
 8010612:	4018      	ands	r0, r3
 8010614:	3b1e      	subs	r3, #30
 8010616:	4083      	lsls	r3, r0
 8010618:	4a01      	ldr	r2, [pc, #4]	; (8010620 <HAL_NVIC_EnableIRQ+0x10>)
 801061a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801061c:	4770      	bx	lr
 801061e:	46c0      	nop			; (mov r8, r8)
 8010620:	e000e100 	.word	0xe000e100

08010624 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010624:	231f      	movs	r3, #31
 8010626:	4018      	ands	r0, r3
 8010628:	3b1e      	subs	r3, #30
 801062a:	4083      	lsls	r3, r0
 801062c:	4901      	ldr	r1, [pc, #4]	; (8010634 <HAL_NVIC_DisableIRQ+0x10>)
 801062e:	2280      	movs	r2, #128	; 0x80
 8010630:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010632:	4770      	bx	lr
 8010634:	e000e100 	.word	0xe000e100

08010638 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010638:	3801      	subs	r0, #1
 801063a:	2380      	movs	r3, #128	; 0x80
 801063c:	045b      	lsls	r3, r3, #17
 801063e:	4298      	cmp	r0, r3
 8010640:	d20f      	bcs.n	8010662 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010642:	4a09      	ldr	r2, [pc, #36]	; (8010668 <HAL_SYSTICK_Config+0x30>)
 8010644:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010646:	4809      	ldr	r0, [pc, #36]	; (801066c <HAL_SYSTICK_Config+0x34>)
 8010648:	6a03      	ldr	r3, [r0, #32]
 801064a:	021b      	lsls	r3, r3, #8
 801064c:	0a1b      	lsrs	r3, r3, #8
 801064e:	21c0      	movs	r1, #192	; 0xc0
 8010650:	0609      	lsls	r1, r1, #24
 8010652:	430b      	orrs	r3, r1
 8010654:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010656:	2300      	movs	r3, #0
 8010658:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801065a:	3307      	adds	r3, #7
 801065c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801065e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010660:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010662:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8010664:	e7fc      	b.n	8010660 <HAL_SYSTICK_Config+0x28>
 8010666:	46c0      	nop			; (mov r8, r8)
 8010668:	e000e010 	.word	0xe000e010
 801066c:	e000ed00 	.word	0xe000ed00

08010670 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010670:	2804      	cmp	r0, #4
 8010672:	d005      	beq.n	8010680 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010674:	4a05      	ldr	r2, [pc, #20]	; (801068c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010676:	6813      	ldr	r3, [r2, #0]
 8010678:	2104      	movs	r1, #4
 801067a:	438b      	bics	r3, r1
 801067c:	6013      	str	r3, [r2, #0]
  }
}
 801067e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010680:	4a02      	ldr	r2, [pc, #8]	; (801068c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010682:	6813      	ldr	r3, [r2, #0]
 8010684:	2104      	movs	r1, #4
 8010686:	430b      	orrs	r3, r1
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	e7f8      	b.n	801067e <HAL_SYSTICK_CLKSourceConfig+0xe>
 801068c:	e000e010 	.word	0xe000e010

08010690 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010690:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010692:	2500      	movs	r5, #0
 8010694:	e00e      	b.n	80106b4 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010696:	00ac      	lsls	r4, r5, #2
 8010698:	5d0b      	ldrb	r3, [r1, r4]
 801069a:	061b      	lsls	r3, r3, #24
 801069c:	190c      	adds	r4, r1, r4
 801069e:	7866      	ldrb	r6, [r4, #1]
 80106a0:	0436      	lsls	r6, r6, #16
 80106a2:	4333      	orrs	r3, r6
 80106a4:	78a6      	ldrb	r6, [r4, #2]
 80106a6:	0236      	lsls	r6, r6, #8
 80106a8:	4333      	orrs	r3, r6
 80106aa:	78e6      	ldrb	r6, [r4, #3]
 80106ac:	6804      	ldr	r4, [r0, #0]
 80106ae:	4333      	orrs	r3, r6
 80106b0:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 80106b2:	3501      	adds	r5, #1
 80106b4:	0893      	lsrs	r3, r2, #2
 80106b6:	42ab      	cmp	r3, r5
 80106b8:	d8ed      	bhi.n	8010696 <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80106ba:	2303      	movs	r3, #3
 80106bc:	001c      	movs	r4, r3
 80106be:	4014      	ands	r4, r2
 80106c0:	4213      	tst	r3, r2
 80106c2:	d005      	beq.n	80106d0 <CRC_Handle_8+0x40>
   {
     if  (BufferLength%4 == 1)
 80106c4:	2c01      	cmp	r4, #1
 80106c6:	d006      	beq.n	80106d6 <CRC_Handle_8+0x46>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80106c8:	2c02      	cmp	r4, #2
 80106ca:	d009      	beq.n	80106e0 <CRC_Handle_8+0x50>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 80106cc:	2c03      	cmp	r4, #3
 80106ce:	d010      	beq.n	80106f2 <CRC_Handle_8+0x62>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80106d0:	6803      	ldr	r3, [r0, #0]
 80106d2:	6818      	ldr	r0, [r3, #0]
}
 80106d4:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80106d6:	00ab      	lsls	r3, r5, #2
 80106d8:	6802      	ldr	r2, [r0, #0]
 80106da:	5ccb      	ldrb	r3, [r1, r3]
 80106dc:	7013      	strb	r3, [r2, #0]
 80106de:	e7f3      	b.n	80106c8 <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80106e0:	00ab      	lsls	r3, r5, #2
 80106e2:	5cca      	ldrb	r2, [r1, r3]
 80106e4:	0212      	lsls	r2, r2, #8
 80106e6:	18cb      	adds	r3, r1, r3
 80106e8:	785b      	ldrb	r3, [r3, #1]
 80106ea:	6806      	ldr	r6, [r0, #0]
 80106ec:	4313      	orrs	r3, r2
 80106ee:	8033      	strh	r3, [r6, #0]
 80106f0:	e7ec      	b.n	80106cc <CRC_Handle_8+0x3c>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80106f2:	00ad      	lsls	r5, r5, #2
 80106f4:	5d4a      	ldrb	r2, [r1, r5]
 80106f6:	0212      	lsls	r2, r2, #8
 80106f8:	1949      	adds	r1, r1, r5
 80106fa:	784b      	ldrb	r3, [r1, #1]
 80106fc:	6804      	ldr	r4, [r0, #0]
 80106fe:	4313      	orrs	r3, r2
 8010700:	8023      	strh	r3, [r4, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010702:	6803      	ldr	r3, [r0, #0]
 8010704:	788a      	ldrb	r2, [r1, #2]
 8010706:	701a      	strb	r2, [r3, #0]
 8010708:	e7e2      	b.n	80106d0 <CRC_Handle_8+0x40>

0801070a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 801070a:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 801070c:	2500      	movs	r5, #0
 801070e:	e008      	b.n	8010722 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010710:	00ac      	lsls	r4, r5, #2
 8010712:	5b0b      	ldrh	r3, [r1, r4]
 8010714:	041b      	lsls	r3, r3, #16
 8010716:	190c      	adds	r4, r1, r4
 8010718:	8866      	ldrh	r6, [r4, #2]
 801071a:	6804      	ldr	r4, [r0, #0]
 801071c:	4333      	orrs	r3, r6
 801071e:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010720:	3501      	adds	r5, #1
 8010722:	0853      	lsrs	r3, r2, #1
 8010724:	42ab      	cmp	r3, r5
 8010726:	d8f3      	bhi.n	8010710 <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 8010728:	07d2      	lsls	r2, r2, #31
 801072a:	d503      	bpl.n	8010734 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801072c:	6803      	ldr	r3, [r0, #0]
 801072e:	00ad      	lsls	r5, r5, #2
 8010730:	5a6a      	ldrh	r2, [r5, r1]
 8010732:	801a      	strh	r2, [r3, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010734:	6803      	ldr	r3, [r0, #0]
 8010736:	6818      	ldr	r0, [r3, #0]
}
 8010738:	bd70      	pop	{r4, r5, r6, pc}

0801073a <HAL_CRC_Init>:
{
 801073a:	b510      	push	{r4, lr}
 801073c:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 801073e:	d029      	beq.n	8010794 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010740:	7f43      	ldrb	r3, [r0, #29]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d01e      	beq.n	8010784 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010746:	2302      	movs	r3, #2
 8010748:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801074a:	0020      	movs	r0, r4
 801074c:	f000 f8a8 	bl	80108a0 <HAL_CRCEx_Init>
 8010750:	2800      	cmp	r0, #0
 8010752:	d121      	bne.n	8010798 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010754:	7963      	ldrb	r3, [r4, #5]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d118      	bne.n	801078c <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801075a:	6823      	ldr	r3, [r4, #0]
 801075c:	2201      	movs	r2, #1
 801075e:	4252      	negs	r2, r2
 8010760:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010762:	6822      	ldr	r2, [r4, #0]
 8010764:	6893      	ldr	r3, [r2, #8]
 8010766:	2160      	movs	r1, #96	; 0x60
 8010768:	438b      	bics	r3, r1
 801076a:	6961      	ldr	r1, [r4, #20]
 801076c:	430b      	orrs	r3, r1
 801076e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010770:	6822      	ldr	r2, [r4, #0]
 8010772:	6893      	ldr	r3, [r2, #8]
 8010774:	2180      	movs	r1, #128	; 0x80
 8010776:	438b      	bics	r3, r1
 8010778:	69a1      	ldr	r1, [r4, #24]
 801077a:	430b      	orrs	r3, r1
 801077c:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 801077e:	2301      	movs	r3, #1
 8010780:	7763      	strb	r3, [r4, #29]
}
 8010782:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010784:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010786:	f7fb f87d 	bl	800b884 <HAL_CRC_MspInit>
 801078a:	e7dc      	b.n	8010746 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	6922      	ldr	r2, [r4, #16]
 8010790:	611a      	str	r2, [r3, #16]
 8010792:	e7e6      	b.n	8010762 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010794:	2001      	movs	r0, #1
 8010796:	e7f4      	b.n	8010782 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010798:	2001      	movs	r0, #1
 801079a:	e7f2      	b.n	8010782 <HAL_CRC_Init+0x48>

0801079c <HAL_CRC_Accumulate>:
{
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80107a0:	7f03      	ldrb	r3, [r0, #28]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d022      	beq.n	80107ec <HAL_CRC_Accumulate+0x50>
 80107a6:	2301      	movs	r3, #1
 80107a8:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80107aa:	3301      	adds	r3, #1
 80107ac:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80107ae:	6a03      	ldr	r3, [r0, #32]
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d018      	beq.n	80107e6 <HAL_CRC_Accumulate+0x4a>
 80107b4:	2b03      	cmp	r3, #3
 80107b6:	d011      	beq.n	80107dc <HAL_CRC_Accumulate+0x40>
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d011      	beq.n	80107e0 <HAL_CRC_Accumulate+0x44>
 80107bc:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 80107be:	2301      	movs	r3, #1
 80107c0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80107c2:	2300      	movs	r3, #0
 80107c4:	7723      	strb	r3, [r4, #28]
}
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 80107c8:	6820      	ldr	r0, [r4, #0]
 80107ca:	009d      	lsls	r5, r3, #2
 80107cc:	586d      	ldr	r5, [r5, r1]
 80107ce:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80107d0:	3301      	adds	r3, #1
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d3f8      	bcc.n	80107c8 <HAL_CRC_Accumulate+0x2c>
      temp = hcrc->Instance->DR;
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	6818      	ldr	r0, [r3, #0]
      break;
 80107da:	e7f0      	b.n	80107be <HAL_CRC_Accumulate+0x22>
  switch (hcrc->InputDataFormat)
 80107dc:	2300      	movs	r3, #0
 80107de:	e7f8      	b.n	80107d2 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80107e0:	f7ff ff56 	bl	8010690 <CRC_Handle_8>
      break;
 80107e4:	e7eb      	b.n	80107be <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80107e6:	f7ff ff90 	bl	801070a <CRC_Handle_16>
      break;
 80107ea:	e7e8      	b.n	80107be <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80107ec:	2002      	movs	r0, #2
 80107ee:	e7ea      	b.n	80107c6 <HAL_CRC_Accumulate+0x2a>

080107f0 <HAL_CRC_Calculate>:
{
 80107f0:	b570      	push	{r4, r5, r6, lr}
 80107f2:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80107f4:	7f03      	ldrb	r3, [r0, #28]
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d028      	beq.n	801084c <HAL_CRC_Calculate+0x5c>
 80107fa:	2501      	movs	r5, #1
 80107fc:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80107fe:	2302      	movs	r3, #2
 8010800:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010802:	6800      	ldr	r0, [r0, #0]
 8010804:	6883      	ldr	r3, [r0, #8]
 8010806:	432b      	orrs	r3, r5
 8010808:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801080a:	6a23      	ldr	r3, [r4, #32]
 801080c:	2b02      	cmp	r3, #2
 801080e:	d019      	beq.n	8010844 <HAL_CRC_Calculate+0x54>
 8010810:	2b03      	cmp	r3, #3
 8010812:	d011      	beq.n	8010838 <HAL_CRC_Calculate+0x48>
 8010814:	2b01      	cmp	r3, #1
 8010816:	d011      	beq.n	801083c <HAL_CRC_Calculate+0x4c>
 8010818:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801081a:	2301      	movs	r3, #1
 801081c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801081e:	2300      	movs	r3, #0
 8010820:	7723      	strb	r3, [r4, #28]
}
 8010822:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8010824:	6820      	ldr	r0, [r4, #0]
 8010826:	009d      	lsls	r5, r3, #2
 8010828:	586d      	ldr	r5, [r5, r1]
 801082a:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 801082c:	3301      	adds	r3, #1
 801082e:	4293      	cmp	r3, r2
 8010830:	d3f8      	bcc.n	8010824 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	6818      	ldr	r0, [r3, #0]
      break;
 8010836:	e7f0      	b.n	801081a <HAL_CRC_Calculate+0x2a>
  switch (hcrc->InputDataFormat)
 8010838:	2300      	movs	r3, #0
 801083a:	e7f8      	b.n	801082e <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801083c:	0020      	movs	r0, r4
 801083e:	f7ff ff27 	bl	8010690 <CRC_Handle_8>
      break;
 8010842:	e7ea      	b.n	801081a <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010844:	0020      	movs	r0, r4
 8010846:	f7ff ff60 	bl	801070a <CRC_Handle_16>
      break;
 801084a:	e7e6      	b.n	801081a <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 801084c:	2002      	movs	r0, #2
 801084e:	e7e8      	b.n	8010822 <HAL_CRC_Calculate+0x32>

08010850 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010850:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010852:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010854:	e000      	b.n	8010858 <HAL_CRCEx_Polynomial_Set+0x8>
 8010856:	001c      	movs	r4, r3
 8010858:	2301      	movs	r3, #1
 801085a:	40a3      	lsls	r3, r4
 801085c:	4219      	tst	r1, r3
 801085e:	d103      	bne.n	8010868 <HAL_CRCEx_Polynomial_Set+0x18>
 8010860:	1e63      	subs	r3, r4, #1
 8010862:	2c00      	cmp	r4, #0
 8010864:	d1f7      	bne.n	8010856 <HAL_CRCEx_Polynomial_Set+0x6>
 8010866:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8010868:	2a10      	cmp	r2, #16
 801086a:	d011      	beq.n	8010890 <HAL_CRCEx_Polynomial_Set+0x40>
 801086c:	2a18      	cmp	r2, #24
 801086e:	d00b      	beq.n	8010888 <HAL_CRCEx_Polynomial_Set+0x38>
 8010870:	2a08      	cmp	r2, #8
 8010872:	d011      	beq.n	8010898 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010874:	6803      	ldr	r3, [r0, #0]
 8010876:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010878:	6801      	ldr	r1, [r0, #0]
 801087a:	688b      	ldr	r3, [r1, #8]
 801087c:	2018      	movs	r0, #24
 801087e:	4383      	bics	r3, r0
 8010880:	4313      	orrs	r3, r2
 8010882:	608b      	str	r3, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010884:	2000      	movs	r0, #0
}
 8010886:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010888:	2c06      	cmp	r4, #6
 801088a:	d9f3      	bls.n	8010874 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801088c:	2001      	movs	r0, #1
 801088e:	e7fa      	b.n	8010886 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010890:	2c07      	cmp	r4, #7
 8010892:	d9ef      	bls.n	8010874 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010894:	2001      	movs	r0, #1
 8010896:	e7f6      	b.n	8010886 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010898:	2c0f      	cmp	r4, #15
 801089a:	d9eb      	bls.n	8010874 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801089c:	2001      	movs	r0, #1
 801089e:	e7f2      	b.n	8010886 <HAL_CRCEx_Polynomial_Set+0x36>

080108a0 <HAL_CRCEx_Init>:
{
 80108a0:	b510      	push	{r4, lr}
 80108a2:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80108a4:	7900      	ldrb	r0, [r0, #4]
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d108      	bne.n	80108bc <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	4908      	ldr	r1, [pc, #32]	; (80108d0 <HAL_CRCEx_Init+0x30>)
 80108ae:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	6893      	ldr	r3, [r2, #8]
 80108b4:	2118      	movs	r1, #24
 80108b6:	438b      	bics	r3, r1
 80108b8:	6093      	str	r3, [r2, #8]
}
 80108ba:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80108bc:	68da      	ldr	r2, [r3, #12]
 80108be:	6899      	ldr	r1, [r3, #8]
 80108c0:	0018      	movs	r0, r3
 80108c2:	f7ff ffc5 	bl	8010850 <HAL_CRCEx_Polynomial_Set>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	d0f7      	beq.n	80108ba <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 80108ca:	2001      	movs	r0, #1
 80108cc:	e7f5      	b.n	80108ba <HAL_CRCEx_Init+0x1a>
 80108ce:	46c0      	nop			; (mov r8, r8)
 80108d0:	04c11db7 	.word	0x04c11db7

080108d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80108d4:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80108d6:	6804      	ldr	r4, [r0, #0]
 80108d8:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80108da:	6843      	ldr	r3, [r0, #4]
 80108dc:	2b10      	cmp	r3, #16
 80108de:	d004      	beq.n	80108ea <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80108e0:	6803      	ldr	r3, [r0, #0]
 80108e2:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80108e4:	6803      	ldr	r3, [r0, #0]
 80108e6:	60da      	str	r2, [r3, #12]
  }
}
 80108e8:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 80108ea:	6803      	ldr	r3, [r0, #0]
 80108ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80108ee:	6803      	ldr	r3, [r0, #0]
 80108f0:	60d9      	str	r1, [r3, #12]
 80108f2:	e7f9      	b.n	80108e8 <DMA_SetConfig+0x14>

080108f4 <HAL_DMA_Init>:
{ 
 80108f4:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d022      	beq.n	8010940 <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 80108fa:	2321      	movs	r3, #33	; 0x21
 80108fc:	5cc3      	ldrb	r3, [r0, r3]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d102      	bne.n	8010908 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 8010902:	3320      	adds	r3, #32
 8010904:	2200      	movs	r2, #0
 8010906:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8010908:	2121      	movs	r1, #33	; 0x21
 801090a:	2302      	movs	r3, #2
 801090c:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 801090e:	6804      	ldr	r4, [r0, #0]
 8010910:	6822      	ldr	r2, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010912:	4b0c      	ldr	r3, [pc, #48]	; (8010944 <HAL_DMA_Init+0x50>)
 8010914:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010916:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010918:	6885      	ldr	r5, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 801091a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801091c:	68c5      	ldr	r5, [r0, #12]
 801091e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010920:	6905      	ldr	r5, [r0, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010922:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010924:	6945      	ldr	r5, [r0, #20]
 8010926:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010928:	6985      	ldr	r5, [r0, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801092a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801092c:	69c5      	ldr	r5, [r0, #28]
 801092e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010930:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8010932:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010934:	2300      	movs	r3, #0
 8010936:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 8010938:	3301      	adds	r3, #1
 801093a:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 801093c:	2000      	movs	r0, #0
}  
 801093e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010940:	2001      	movs	r0, #1
 8010942:	e7fc      	b.n	801093e <HAL_DMA_Init+0x4a>
 8010944:	ffffc00f 	.word	0xffffc00f

08010948 <HAL_DMA_Start_IT>:
{
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 801094c:	2020      	movs	r0, #32
 801094e:	5c20      	ldrb	r0, [r4, r0]
 8010950:	2801      	cmp	r0, #1
 8010952:	d020      	beq.n	8010996 <HAL_DMA_Start_IT+0x4e>
 8010954:	2501      	movs	r5, #1
 8010956:	2020      	movs	r0, #32
 8010958:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 801095a:	2602      	movs	r6, #2
 801095c:	3001      	adds	r0, #1
 801095e:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 8010960:	6827      	ldr	r7, [r4, #0]
 8010962:	6838      	ldr	r0, [r7, #0]
 8010964:	43a8      	bics	r0, r5
 8010966:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010968:	0020      	movs	r0, r4
 801096a:	f7ff ffb3 	bl	80108d4 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801096e:	6822      	ldr	r2, [r4, #0]
 8010970:	6813      	ldr	r3, [r2, #0]
 8010972:	4333      	orrs	r3, r6
 8010974:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010976:	6822      	ldr	r2, [r4, #0]
 8010978:	6813      	ldr	r3, [r2, #0]
 801097a:	2104      	movs	r1, #4
 801097c:	430b      	orrs	r3, r1
 801097e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010980:	6822      	ldr	r2, [r4, #0]
 8010982:	6813      	ldr	r3, [r2, #0]
 8010984:	3104      	adds	r1, #4
 8010986:	430b      	orrs	r3, r1
 8010988:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801098a:	6822      	ldr	r2, [r4, #0]
 801098c:	6813      	ldr	r3, [r2, #0]
 801098e:	432b      	orrs	r3, r5
 8010990:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010992:	2000      	movs	r0, #0
} 
 8010994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8010996:	2002      	movs	r0, #2
 8010998:	e7fc      	b.n	8010994 <HAL_DMA_Start_IT+0x4c>

0801099a <HAL_DMA_Abort>:
{
 801099a:	b570      	push	{r4, r5, r6, lr}
 801099c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801099e:	6802      	ldr	r2, [r0, #0]
 80109a0:	6813      	ldr	r3, [r2, #0]
 80109a2:	2101      	movs	r1, #1
 80109a4:	438b      	bics	r3, r1
 80109a6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80109a8:	f7ff fb18 	bl	800ffdc <HAL_GetTick>
 80109ac:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	07db      	lsls	r3, r3, #31
 80109b4:	d511      	bpl.n	80109da <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80109b6:	f7ff fb11 	bl	800ffdc <HAL_GetTick>
 80109ba:	1b40      	subs	r0, r0, r5
 80109bc:	23fa      	movs	r3, #250	; 0xfa
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	4298      	cmp	r0, r3
 80109c2:	d9f4      	bls.n	80109ae <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80109c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109c6:	2220      	movs	r2, #32
 80109c8:	4313      	orrs	r3, r2
 80109ca:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80109cc:	2321      	movs	r3, #33	; 0x21
 80109ce:	2103      	movs	r1, #3
 80109d0:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80109d2:	2300      	movs	r3, #0
 80109d4:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80109d6:	2003      	movs	r0, #3
 80109d8:	e006      	b.n	80109e8 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 80109da:	2321      	movs	r3, #33	; 0x21
 80109dc:	2201      	movs	r2, #1
 80109de:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80109e0:	3b01      	subs	r3, #1
 80109e2:	2200      	movs	r2, #0
 80109e4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80109e6:	2000      	movs	r0, #0
}
 80109e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080109ec <HAL_DMA_IRQHandler>:
{        
 80109ec:	b510      	push	{r4, lr}
 80109ee:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80109f0:	6802      	ldr	r2, [r0, #0]
 80109f2:	4bb6      	ldr	r3, [pc, #728]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d800      	bhi.n	80109fa <HAL_DMA_IRQHandler+0xe>
 80109f8:	e083      	b.n	8010b02 <HAL_DMA_IRQHandler+0x116>
 80109fa:	4bb5      	ldr	r3, [pc, #724]	; (8010cd0 <HAL_DMA_IRQHandler+0x2e4>)
 80109fc:	6819      	ldr	r1, [r3, #0]
 80109fe:	4bb5      	ldr	r3, [pc, #724]	; (8010cd4 <HAL_DMA_IRQHandler+0x2e8>)
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d023      	beq.n	8010a4c <HAL_DMA_IRQHandler+0x60>
 8010a04:	4bb4      	ldr	r3, [pc, #720]	; (8010cd8 <HAL_DMA_IRQHandler+0x2ec>)
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d063      	beq.n	8010ad2 <HAL_DMA_IRQHandler+0xe6>
 8010a0a:	4bb4      	ldr	r3, [pc, #720]	; (8010cdc <HAL_DMA_IRQHandler+0x2f0>)
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d062      	beq.n	8010ad6 <HAL_DMA_IRQHandler+0xea>
 8010a10:	4bb3      	ldr	r3, [pc, #716]	; (8010ce0 <HAL_DMA_IRQHandler+0x2f4>)
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d062      	beq.n	8010adc <HAL_DMA_IRQHandler+0xf0>
 8010a16:	4bb3      	ldr	r3, [pc, #716]	; (8010ce4 <HAL_DMA_IRQHandler+0x2f8>)
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d062      	beq.n	8010ae2 <HAL_DMA_IRQHandler+0xf6>
 8010a1c:	4bb2      	ldr	r3, [pc, #712]	; (8010ce8 <HAL_DMA_IRQHandler+0x2fc>)
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d062      	beq.n	8010ae8 <HAL_DMA_IRQHandler+0xfc>
 8010a22:	4baa      	ldr	r3, [pc, #680]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d062      	beq.n	8010aee <HAL_DMA_IRQHandler+0x102>
 8010a28:	4bb0      	ldr	r3, [pc, #704]	; (8010cec <HAL_DMA_IRQHandler+0x300>)
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d062      	beq.n	8010af4 <HAL_DMA_IRQHandler+0x108>
 8010a2e:	4bb0      	ldr	r3, [pc, #704]	; (8010cf0 <HAL_DMA_IRQHandler+0x304>)
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d061      	beq.n	8010af8 <HAL_DMA_IRQHandler+0x10c>
 8010a34:	4baf      	ldr	r3, [pc, #700]	; (8010cf4 <HAL_DMA_IRQHandler+0x308>)
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d060      	beq.n	8010afc <HAL_DMA_IRQHandler+0x110>
 8010a3a:	4baf      	ldr	r3, [pc, #700]	; (8010cf8 <HAL_DMA_IRQHandler+0x30c>)
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d002      	beq.n	8010a46 <HAL_DMA_IRQHandler+0x5a>
 8010a40:	2380      	movs	r3, #128	; 0x80
 8010a42:	031b      	lsls	r3, r3, #12
 8010a44:	e003      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010a46:	2380      	movs	r3, #128	; 0x80
 8010a48:	021b      	lsls	r3, r3, #8
 8010a4a:	e000      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010a4c:	2308      	movs	r3, #8
 8010a4e:	400b      	ands	r3, r1
 8010a50:	1e59      	subs	r1, r3, #1
 8010a52:	418b      	sbcs	r3, r1
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d100      	bne.n	8010a5c <HAL_DMA_IRQHandler+0x70>
 8010a5a:	e0ae      	b.n	8010bba <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010a5c:	6813      	ldr	r3, [r2, #0]
 8010a5e:	071b      	lsls	r3, r3, #28
 8010a60:	d400      	bmi.n	8010a64 <HAL_DMA_IRQHandler+0x78>
 8010a62:	e0aa      	b.n	8010bba <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010a64:	6813      	ldr	r3, [r2, #0]
 8010a66:	2108      	movs	r1, #8
 8010a68:	438b      	bics	r3, r1
 8010a6a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a6c:	6823      	ldr	r3, [r4, #0]
 8010a6e:	4a97      	ldr	r2, [pc, #604]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d800      	bhi.n	8010a76 <HAL_DMA_IRQHandler+0x8a>
 8010a74:	e0ee      	b.n	8010c54 <HAL_DMA_IRQHandler+0x268>
 8010a76:	4a97      	ldr	r2, [pc, #604]	; (8010cd4 <HAL_DMA_IRQHandler+0x2e8>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d100      	bne.n	8010a7e <HAL_DMA_IRQHandler+0x92>
 8010a7c:	e08b      	b.n	8010b96 <HAL_DMA_IRQHandler+0x1aa>
 8010a7e:	4a96      	ldr	r2, [pc, #600]	; (8010cd8 <HAL_DMA_IRQHandler+0x2ec>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d100      	bne.n	8010a86 <HAL_DMA_IRQHandler+0x9a>
 8010a84:	e0ce      	b.n	8010c24 <HAL_DMA_IRQHandler+0x238>
 8010a86:	4a95      	ldr	r2, [pc, #596]	; (8010cdc <HAL_DMA_IRQHandler+0x2f0>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d100      	bne.n	8010a8e <HAL_DMA_IRQHandler+0xa2>
 8010a8c:	e0cc      	b.n	8010c28 <HAL_DMA_IRQHandler+0x23c>
 8010a8e:	4a94      	ldr	r2, [pc, #592]	; (8010ce0 <HAL_DMA_IRQHandler+0x2f4>)
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d100      	bne.n	8010a96 <HAL_DMA_IRQHandler+0xaa>
 8010a94:	e0cb      	b.n	8010c2e <HAL_DMA_IRQHandler+0x242>
 8010a96:	4a93      	ldr	r2, [pc, #588]	; (8010ce4 <HAL_DMA_IRQHandler+0x2f8>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d100      	bne.n	8010a9e <HAL_DMA_IRQHandler+0xb2>
 8010a9c:	e0ca      	b.n	8010c34 <HAL_DMA_IRQHandler+0x248>
 8010a9e:	4a92      	ldr	r2, [pc, #584]	; (8010ce8 <HAL_DMA_IRQHandler+0x2fc>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d100      	bne.n	8010aa6 <HAL_DMA_IRQHandler+0xba>
 8010aa4:	e0c9      	b.n	8010c3a <HAL_DMA_IRQHandler+0x24e>
 8010aa6:	4a89      	ldr	r2, [pc, #548]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d100      	bne.n	8010aae <HAL_DMA_IRQHandler+0xc2>
 8010aac:	e0c8      	b.n	8010c40 <HAL_DMA_IRQHandler+0x254>
 8010aae:	4a8f      	ldr	r2, [pc, #572]	; (8010cec <HAL_DMA_IRQHandler+0x300>)
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d100      	bne.n	8010ab6 <HAL_DMA_IRQHandler+0xca>
 8010ab4:	e0c7      	b.n	8010c46 <HAL_DMA_IRQHandler+0x25a>
 8010ab6:	4a8e      	ldr	r2, [pc, #568]	; (8010cf0 <HAL_DMA_IRQHandler+0x304>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d100      	bne.n	8010abe <HAL_DMA_IRQHandler+0xd2>
 8010abc:	e0c5      	b.n	8010c4a <HAL_DMA_IRQHandler+0x25e>
 8010abe:	4a8d      	ldr	r2, [pc, #564]	; (8010cf4 <HAL_DMA_IRQHandler+0x308>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d100      	bne.n	8010ac6 <HAL_DMA_IRQHandler+0xda>
 8010ac4:	e0c3      	b.n	8010c4e <HAL_DMA_IRQHandler+0x262>
 8010ac6:	4a8c      	ldr	r2, [pc, #560]	; (8010cf8 <HAL_DMA_IRQHandler+0x30c>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d061      	beq.n	8010b90 <HAL_DMA_IRQHandler+0x1a4>
 8010acc:	2280      	movs	r2, #128	; 0x80
 8010ace:	0312      	lsls	r2, r2, #12
 8010ad0:	e062      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010ad2:	2380      	movs	r3, #128	; 0x80
 8010ad4:	e7bb      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010ad6:	2380      	movs	r3, #128	; 0x80
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	e7b8      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010adc:	2380      	movs	r3, #128	; 0x80
 8010ade:	021b      	lsls	r3, r3, #8
 8010ae0:	e7b5      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010ae2:	2380      	movs	r3, #128	; 0x80
 8010ae4:	031b      	lsls	r3, r3, #12
 8010ae6:	e7b2      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010ae8:	2380      	movs	r3, #128	; 0x80
 8010aea:	041b      	lsls	r3, r3, #16
 8010aec:	e7af      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010aee:	2380      	movs	r3, #128	; 0x80
 8010af0:	051b      	lsls	r3, r3, #20
 8010af2:	e7ac      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010af4:	2308      	movs	r3, #8
 8010af6:	e7aa      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010af8:	2380      	movs	r3, #128	; 0x80
 8010afa:	e7a8      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010afc:	2380      	movs	r3, #128	; 0x80
 8010afe:	011b      	lsls	r3, r3, #4
 8010b00:	e7a5      	b.n	8010a4e <HAL_DMA_IRQHandler+0x62>
 8010b02:	4b7e      	ldr	r3, [pc, #504]	; (8010cfc <HAL_DMA_IRQHandler+0x310>)
 8010b04:	6819      	ldr	r1, [r3, #0]
 8010b06:	4b73      	ldr	r3, [pc, #460]	; (8010cd4 <HAL_DMA_IRQHandler+0x2e8>)
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d023      	beq.n	8010b54 <HAL_DMA_IRQHandler+0x168>
 8010b0c:	4b72      	ldr	r3, [pc, #456]	; (8010cd8 <HAL_DMA_IRQHandler+0x2ec>)
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d026      	beq.n	8010b60 <HAL_DMA_IRQHandler+0x174>
 8010b12:	4b72      	ldr	r3, [pc, #456]	; (8010cdc <HAL_DMA_IRQHandler+0x2f0>)
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d025      	beq.n	8010b64 <HAL_DMA_IRQHandler+0x178>
 8010b18:	4b71      	ldr	r3, [pc, #452]	; (8010ce0 <HAL_DMA_IRQHandler+0x2f4>)
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d025      	beq.n	8010b6a <HAL_DMA_IRQHandler+0x17e>
 8010b1e:	4b71      	ldr	r3, [pc, #452]	; (8010ce4 <HAL_DMA_IRQHandler+0x2f8>)
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d025      	beq.n	8010b70 <HAL_DMA_IRQHandler+0x184>
 8010b24:	4b70      	ldr	r3, [pc, #448]	; (8010ce8 <HAL_DMA_IRQHandler+0x2fc>)
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d025      	beq.n	8010b76 <HAL_DMA_IRQHandler+0x18a>
 8010b2a:	4b68      	ldr	r3, [pc, #416]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d025      	beq.n	8010b7c <HAL_DMA_IRQHandler+0x190>
 8010b30:	4b6e      	ldr	r3, [pc, #440]	; (8010cec <HAL_DMA_IRQHandler+0x300>)
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d025      	beq.n	8010b82 <HAL_DMA_IRQHandler+0x196>
 8010b36:	4b6e      	ldr	r3, [pc, #440]	; (8010cf0 <HAL_DMA_IRQHandler+0x304>)
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d024      	beq.n	8010b86 <HAL_DMA_IRQHandler+0x19a>
 8010b3c:	4b6d      	ldr	r3, [pc, #436]	; (8010cf4 <HAL_DMA_IRQHandler+0x308>)
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d023      	beq.n	8010b8a <HAL_DMA_IRQHandler+0x19e>
 8010b42:	4b6d      	ldr	r3, [pc, #436]	; (8010cf8 <HAL_DMA_IRQHandler+0x30c>)
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d002      	beq.n	8010b4e <HAL_DMA_IRQHandler+0x162>
 8010b48:	2380      	movs	r3, #128	; 0x80
 8010b4a:	031b      	lsls	r3, r3, #12
 8010b4c:	e003      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b4e:	2380      	movs	r3, #128	; 0x80
 8010b50:	021b      	lsls	r3, r3, #8
 8010b52:	e000      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b54:	2308      	movs	r3, #8
 8010b56:	400b      	ands	r3, r1
 8010b58:	1e59      	subs	r1, r3, #1
 8010b5a:	418b      	sbcs	r3, r1
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	e77a      	b.n	8010a56 <HAL_DMA_IRQHandler+0x6a>
 8010b60:	2380      	movs	r3, #128	; 0x80
 8010b62:	e7f8      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b64:	2380      	movs	r3, #128	; 0x80
 8010b66:	011b      	lsls	r3, r3, #4
 8010b68:	e7f5      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b6a:	2380      	movs	r3, #128	; 0x80
 8010b6c:	021b      	lsls	r3, r3, #8
 8010b6e:	e7f2      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b70:	2380      	movs	r3, #128	; 0x80
 8010b72:	031b      	lsls	r3, r3, #12
 8010b74:	e7ef      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b76:	2380      	movs	r3, #128	; 0x80
 8010b78:	041b      	lsls	r3, r3, #16
 8010b7a:	e7ec      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b7c:	2380      	movs	r3, #128	; 0x80
 8010b7e:	051b      	lsls	r3, r3, #20
 8010b80:	e7e9      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b82:	2308      	movs	r3, #8
 8010b84:	e7e7      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b86:	2380      	movs	r3, #128	; 0x80
 8010b88:	e7e5      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
 8010b8a:	2380      	movs	r3, #128	; 0x80
 8010b8c:	011b      	lsls	r3, r3, #4
 8010b8e:	e7e2      	b.n	8010b56 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b90:	2280      	movs	r2, #128	; 0x80
 8010b92:	0212      	lsls	r2, r2, #8
 8010b94:	e000      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010b96:	2208      	movs	r2, #8
 8010b98:	4b4d      	ldr	r3, [pc, #308]	; (8010cd0 <HAL_DMA_IRQHandler+0x2e4>)
 8010b9a:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010ba4:	2321      	movs	r3, #33	; 0x21
 8010ba6:	3203      	adds	r2, #3
 8010ba8:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010baa:	3b01      	subs	r3, #1
 8010bac:	2200      	movs	r2, #0
 8010bae:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010bb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d001      	beq.n	8010bba <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8010bb6:	0020      	movs	r0, r4
 8010bb8:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010bba:	6822      	ldr	r2, [r4, #0]
 8010bbc:	4b43      	ldr	r3, [pc, #268]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d800      	bhi.n	8010bc4 <HAL_DMA_IRQHandler+0x1d8>
 8010bc2:	e105      	b.n	8010dd0 <HAL_DMA_IRQHandler+0x3e4>
 8010bc4:	4b42      	ldr	r3, [pc, #264]	; (8010cd0 <HAL_DMA_IRQHandler+0x2e4>)
 8010bc6:	6819      	ldr	r1, [r3, #0]
 8010bc8:	4b42      	ldr	r3, [pc, #264]	; (8010cd4 <HAL_DMA_IRQHandler+0x2e8>)
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d100      	bne.n	8010bd0 <HAL_DMA_IRQHandler+0x1e4>
 8010bce:	e0a1      	b.n	8010d14 <HAL_DMA_IRQHandler+0x328>
 8010bd0:	4b41      	ldr	r3, [pc, #260]	; (8010cd8 <HAL_DMA_IRQHandler+0x2ec>)
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d100      	bne.n	8010bd8 <HAL_DMA_IRQHandler+0x1ec>
 8010bd6:	e0e3      	b.n	8010da0 <HAL_DMA_IRQHandler+0x3b4>
 8010bd8:	4b40      	ldr	r3, [pc, #256]	; (8010cdc <HAL_DMA_IRQHandler+0x2f0>)
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d100      	bne.n	8010be0 <HAL_DMA_IRQHandler+0x1f4>
 8010bde:	e0e1      	b.n	8010da4 <HAL_DMA_IRQHandler+0x3b8>
 8010be0:	4b3f      	ldr	r3, [pc, #252]	; (8010ce0 <HAL_DMA_IRQHandler+0x2f4>)
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d100      	bne.n	8010be8 <HAL_DMA_IRQHandler+0x1fc>
 8010be6:	e0e0      	b.n	8010daa <HAL_DMA_IRQHandler+0x3be>
 8010be8:	4b3e      	ldr	r3, [pc, #248]	; (8010ce4 <HAL_DMA_IRQHandler+0x2f8>)
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d100      	bne.n	8010bf0 <HAL_DMA_IRQHandler+0x204>
 8010bee:	e0df      	b.n	8010db0 <HAL_DMA_IRQHandler+0x3c4>
 8010bf0:	4b3d      	ldr	r3, [pc, #244]	; (8010ce8 <HAL_DMA_IRQHandler+0x2fc>)
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d100      	bne.n	8010bf8 <HAL_DMA_IRQHandler+0x20c>
 8010bf6:	e0de      	b.n	8010db6 <HAL_DMA_IRQHandler+0x3ca>
 8010bf8:	4b34      	ldr	r3, [pc, #208]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d100      	bne.n	8010c00 <HAL_DMA_IRQHandler+0x214>
 8010bfe:	e0dd      	b.n	8010dbc <HAL_DMA_IRQHandler+0x3d0>
 8010c00:	4b3a      	ldr	r3, [pc, #232]	; (8010cec <HAL_DMA_IRQHandler+0x300>)
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d100      	bne.n	8010c08 <HAL_DMA_IRQHandler+0x21c>
 8010c06:	e0dc      	b.n	8010dc2 <HAL_DMA_IRQHandler+0x3d6>
 8010c08:	4b39      	ldr	r3, [pc, #228]	; (8010cf0 <HAL_DMA_IRQHandler+0x304>)
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d100      	bne.n	8010c10 <HAL_DMA_IRQHandler+0x224>
 8010c0e:	e0da      	b.n	8010dc6 <HAL_DMA_IRQHandler+0x3da>
 8010c10:	4b38      	ldr	r3, [pc, #224]	; (8010cf4 <HAL_DMA_IRQHandler+0x308>)
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d100      	bne.n	8010c18 <HAL_DMA_IRQHandler+0x22c>
 8010c16:	e0d8      	b.n	8010dca <HAL_DMA_IRQHandler+0x3de>
 8010c18:	4b37      	ldr	r3, [pc, #220]	; (8010cf8 <HAL_DMA_IRQHandler+0x30c>)
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d077      	beq.n	8010d0e <HAL_DMA_IRQHandler+0x322>
 8010c1e:	2380      	movs	r3, #128	; 0x80
 8010c20:	02db      	lsls	r3, r3, #11
 8010c22:	e078      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c24:	2280      	movs	r2, #128	; 0x80
 8010c26:	e7b7      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c28:	2280      	movs	r2, #128	; 0x80
 8010c2a:	0112      	lsls	r2, r2, #4
 8010c2c:	e7b4      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c2e:	2280      	movs	r2, #128	; 0x80
 8010c30:	0212      	lsls	r2, r2, #8
 8010c32:	e7b1      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c34:	2280      	movs	r2, #128	; 0x80
 8010c36:	0312      	lsls	r2, r2, #12
 8010c38:	e7ae      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c3a:	2280      	movs	r2, #128	; 0x80
 8010c3c:	0412      	lsls	r2, r2, #16
 8010c3e:	e7ab      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c40:	2280      	movs	r2, #128	; 0x80
 8010c42:	0512      	lsls	r2, r2, #20
 8010c44:	e7a8      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c46:	2208      	movs	r2, #8
 8010c48:	e7a6      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c4a:	2280      	movs	r2, #128	; 0x80
 8010c4c:	e7a4      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c4e:	2280      	movs	r2, #128	; 0x80
 8010c50:	0112      	lsls	r2, r2, #4
 8010c52:	e7a1      	b.n	8010b98 <HAL_DMA_IRQHandler+0x1ac>
 8010c54:	4a1f      	ldr	r2, [pc, #124]	; (8010cd4 <HAL_DMA_IRQHandler+0x2e8>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d023      	beq.n	8010ca2 <HAL_DMA_IRQHandler+0x2b6>
 8010c5a:	4a1f      	ldr	r2, [pc, #124]	; (8010cd8 <HAL_DMA_IRQHandler+0x2ec>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d024      	beq.n	8010caa <HAL_DMA_IRQHandler+0x2be>
 8010c60:	4a1e      	ldr	r2, [pc, #120]	; (8010cdc <HAL_DMA_IRQHandler+0x2f0>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d023      	beq.n	8010cae <HAL_DMA_IRQHandler+0x2c2>
 8010c66:	4a1e      	ldr	r2, [pc, #120]	; (8010ce0 <HAL_DMA_IRQHandler+0x2f4>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d023      	beq.n	8010cb4 <HAL_DMA_IRQHandler+0x2c8>
 8010c6c:	4a1d      	ldr	r2, [pc, #116]	; (8010ce4 <HAL_DMA_IRQHandler+0x2f8>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d023      	beq.n	8010cba <HAL_DMA_IRQHandler+0x2ce>
 8010c72:	4a1d      	ldr	r2, [pc, #116]	; (8010ce8 <HAL_DMA_IRQHandler+0x2fc>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d023      	beq.n	8010cc0 <HAL_DMA_IRQHandler+0x2d4>
 8010c78:	4a14      	ldr	r2, [pc, #80]	; (8010ccc <HAL_DMA_IRQHandler+0x2e0>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d023      	beq.n	8010cc6 <HAL_DMA_IRQHandler+0x2da>
 8010c7e:	4a1b      	ldr	r2, [pc, #108]	; (8010cec <HAL_DMA_IRQHandler+0x300>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d03d      	beq.n	8010d00 <HAL_DMA_IRQHandler+0x314>
 8010c84:	4a1a      	ldr	r2, [pc, #104]	; (8010cf0 <HAL_DMA_IRQHandler+0x304>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d03c      	beq.n	8010d04 <HAL_DMA_IRQHandler+0x318>
 8010c8a:	4a1a      	ldr	r2, [pc, #104]	; (8010cf4 <HAL_DMA_IRQHandler+0x308>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d03b      	beq.n	8010d08 <HAL_DMA_IRQHandler+0x31c>
 8010c90:	4a19      	ldr	r2, [pc, #100]	; (8010cf8 <HAL_DMA_IRQHandler+0x30c>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d002      	beq.n	8010c9c <HAL_DMA_IRQHandler+0x2b0>
 8010c96:	2280      	movs	r2, #128	; 0x80
 8010c98:	0312      	lsls	r2, r2, #12
 8010c9a:	e003      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010c9c:	2280      	movs	r2, #128	; 0x80
 8010c9e:	0212      	lsls	r2, r2, #8
 8010ca0:	e000      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010ca2:	2208      	movs	r2, #8
 8010ca4:	4b15      	ldr	r3, [pc, #84]	; (8010cfc <HAL_DMA_IRQHandler+0x310>)
 8010ca6:	605a      	str	r2, [r3, #4]
 8010ca8:	e778      	b.n	8010b9c <HAL_DMA_IRQHandler+0x1b0>
 8010caa:	2280      	movs	r2, #128	; 0x80
 8010cac:	e7fa      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010cae:	2280      	movs	r2, #128	; 0x80
 8010cb0:	0112      	lsls	r2, r2, #4
 8010cb2:	e7f7      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010cb4:	2280      	movs	r2, #128	; 0x80
 8010cb6:	0212      	lsls	r2, r2, #8
 8010cb8:	e7f4      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010cba:	2280      	movs	r2, #128	; 0x80
 8010cbc:	0312      	lsls	r2, r2, #12
 8010cbe:	e7f1      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010cc0:	2280      	movs	r2, #128	; 0x80
 8010cc2:	0412      	lsls	r2, r2, #16
 8010cc4:	e7ee      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010cc6:	2280      	movs	r2, #128	; 0x80
 8010cc8:	0512      	lsls	r2, r2, #20
 8010cca:	e7eb      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010ccc:	40020080 	.word	0x40020080
 8010cd0:	40020400 	.word	0x40020400
 8010cd4:	40020008 	.word	0x40020008
 8010cd8:	4002001c 	.word	0x4002001c
 8010cdc:	40020030 	.word	0x40020030
 8010ce0:	40020044 	.word	0x40020044
 8010ce4:	40020058 	.word	0x40020058
 8010ce8:	4002006c 	.word	0x4002006c
 8010cec:	40020408 	.word	0x40020408
 8010cf0:	4002041c 	.word	0x4002041c
 8010cf4:	40020430 	.word	0x40020430
 8010cf8:	40020444 	.word	0x40020444
 8010cfc:	40020000 	.word	0x40020000
 8010d00:	2208      	movs	r2, #8
 8010d02:	e7cf      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010d04:	2280      	movs	r2, #128	; 0x80
 8010d06:	e7cd      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
 8010d08:	2280      	movs	r2, #128	; 0x80
 8010d0a:	0112      	lsls	r2, r2, #4
 8010d0c:	e7ca      	b.n	8010ca4 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d0e:	2380      	movs	r3, #128	; 0x80
 8010d10:	01db      	lsls	r3, r3, #7
 8010d12:	e000      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010d14:	2304      	movs	r3, #4
 8010d16:	400b      	ands	r3, r1
 8010d18:	1e59      	subs	r1, r3, #1
 8010d1a:	418b      	sbcs	r3, r1
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d100      	bne.n	8010d24 <HAL_DMA_IRQHandler+0x338>
 8010d22:	e0aa      	b.n	8010e7a <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010d24:	6813      	ldr	r3, [r2, #0]
 8010d26:	075b      	lsls	r3, r3, #29
 8010d28:	d400      	bmi.n	8010d2c <HAL_DMA_IRQHandler+0x340>
 8010d2a:	e0a6      	b.n	8010e7a <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010d2c:	6813      	ldr	r3, [r2, #0]
 8010d2e:	069b      	lsls	r3, r3, #26
 8010d30:	d403      	bmi.n	8010d3a <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010d32:	6813      	ldr	r3, [r2, #0]
 8010d34:	2104      	movs	r1, #4
 8010d36:	438b      	bics	r3, r1
 8010d38:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	4a98      	ldr	r2, [pc, #608]	; (8010fa0 <HAL_DMA_IRQHandler+0x5b4>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d800      	bhi.n	8010d44 <HAL_DMA_IRQHandler+0x358>
 8010d42:	e0e7      	b.n	8010f14 <HAL_DMA_IRQHandler+0x528>
 8010d44:	4a97      	ldr	r2, [pc, #604]	; (8010fa4 <HAL_DMA_IRQHandler+0x5b8>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d100      	bne.n	8010d4c <HAL_DMA_IRQHandler+0x360>
 8010d4a:	e08b      	b.n	8010e64 <HAL_DMA_IRQHandler+0x478>
 8010d4c:	4a96      	ldr	r2, [pc, #600]	; (8010fa8 <HAL_DMA_IRQHandler+0x5bc>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d100      	bne.n	8010d54 <HAL_DMA_IRQHandler+0x368>
 8010d52:	e0c7      	b.n	8010ee4 <HAL_DMA_IRQHandler+0x4f8>
 8010d54:	4a95      	ldr	r2, [pc, #596]	; (8010fac <HAL_DMA_IRQHandler+0x5c0>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d100      	bne.n	8010d5c <HAL_DMA_IRQHandler+0x370>
 8010d5a:	e0c5      	b.n	8010ee8 <HAL_DMA_IRQHandler+0x4fc>
 8010d5c:	4a94      	ldr	r2, [pc, #592]	; (8010fb0 <HAL_DMA_IRQHandler+0x5c4>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d100      	bne.n	8010d64 <HAL_DMA_IRQHandler+0x378>
 8010d62:	e0c4      	b.n	8010eee <HAL_DMA_IRQHandler+0x502>
 8010d64:	4a93      	ldr	r2, [pc, #588]	; (8010fb4 <HAL_DMA_IRQHandler+0x5c8>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d100      	bne.n	8010d6c <HAL_DMA_IRQHandler+0x380>
 8010d6a:	e0c3      	b.n	8010ef4 <HAL_DMA_IRQHandler+0x508>
 8010d6c:	4a92      	ldr	r2, [pc, #584]	; (8010fb8 <HAL_DMA_IRQHandler+0x5cc>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d100      	bne.n	8010d74 <HAL_DMA_IRQHandler+0x388>
 8010d72:	e0c2      	b.n	8010efa <HAL_DMA_IRQHandler+0x50e>
 8010d74:	4a8a      	ldr	r2, [pc, #552]	; (8010fa0 <HAL_DMA_IRQHandler+0x5b4>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d100      	bne.n	8010d7c <HAL_DMA_IRQHandler+0x390>
 8010d7a:	e0c1      	b.n	8010f00 <HAL_DMA_IRQHandler+0x514>
 8010d7c:	4a8f      	ldr	r2, [pc, #572]	; (8010fbc <HAL_DMA_IRQHandler+0x5d0>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d100      	bne.n	8010d84 <HAL_DMA_IRQHandler+0x398>
 8010d82:	e0c0      	b.n	8010f06 <HAL_DMA_IRQHandler+0x51a>
 8010d84:	4a8e      	ldr	r2, [pc, #568]	; (8010fc0 <HAL_DMA_IRQHandler+0x5d4>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d100      	bne.n	8010d8c <HAL_DMA_IRQHandler+0x3a0>
 8010d8a:	e0be      	b.n	8010f0a <HAL_DMA_IRQHandler+0x51e>
 8010d8c:	4a8d      	ldr	r2, [pc, #564]	; (8010fc4 <HAL_DMA_IRQHandler+0x5d8>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d100      	bne.n	8010d94 <HAL_DMA_IRQHandler+0x3a8>
 8010d92:	e0bc      	b.n	8010f0e <HAL_DMA_IRQHandler+0x522>
 8010d94:	4a8c      	ldr	r2, [pc, #560]	; (8010fc8 <HAL_DMA_IRQHandler+0x5dc>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d061      	beq.n	8010e5e <HAL_DMA_IRQHandler+0x472>
 8010d9a:	2280      	movs	r2, #128	; 0x80
 8010d9c:	02d2      	lsls	r2, r2, #11
 8010d9e:	e062      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010da0:	2340      	movs	r3, #64	; 0x40
 8010da2:	e7b8      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010da4:	2380      	movs	r3, #128	; 0x80
 8010da6:	00db      	lsls	r3, r3, #3
 8010da8:	e7b5      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010daa:	2380      	movs	r3, #128	; 0x80
 8010dac:	01db      	lsls	r3, r3, #7
 8010dae:	e7b2      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010db0:	2380      	movs	r3, #128	; 0x80
 8010db2:	02db      	lsls	r3, r3, #11
 8010db4:	e7af      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010db6:	2380      	movs	r3, #128	; 0x80
 8010db8:	03db      	lsls	r3, r3, #15
 8010dba:	e7ac      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010dbc:	2380      	movs	r3, #128	; 0x80
 8010dbe:	04db      	lsls	r3, r3, #19
 8010dc0:	e7a9      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010dc2:	2304      	movs	r3, #4
 8010dc4:	e7a7      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010dc6:	2340      	movs	r3, #64	; 0x40
 8010dc8:	e7a5      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010dca:	2380      	movs	r3, #128	; 0x80
 8010dcc:	00db      	lsls	r3, r3, #3
 8010dce:	e7a2      	b.n	8010d16 <HAL_DMA_IRQHandler+0x32a>
 8010dd0:	4b7e      	ldr	r3, [pc, #504]	; (8010fcc <HAL_DMA_IRQHandler+0x5e0>)
 8010dd2:	6819      	ldr	r1, [r3, #0]
 8010dd4:	4b73      	ldr	r3, [pc, #460]	; (8010fa4 <HAL_DMA_IRQHandler+0x5b8>)
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d023      	beq.n	8010e22 <HAL_DMA_IRQHandler+0x436>
 8010dda:	4b73      	ldr	r3, [pc, #460]	; (8010fa8 <HAL_DMA_IRQHandler+0x5bc>)
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d026      	beq.n	8010e2e <HAL_DMA_IRQHandler+0x442>
 8010de0:	4b72      	ldr	r3, [pc, #456]	; (8010fac <HAL_DMA_IRQHandler+0x5c0>)
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d025      	beq.n	8010e32 <HAL_DMA_IRQHandler+0x446>
 8010de6:	4b72      	ldr	r3, [pc, #456]	; (8010fb0 <HAL_DMA_IRQHandler+0x5c4>)
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d025      	beq.n	8010e38 <HAL_DMA_IRQHandler+0x44c>
 8010dec:	4b71      	ldr	r3, [pc, #452]	; (8010fb4 <HAL_DMA_IRQHandler+0x5c8>)
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d025      	beq.n	8010e3e <HAL_DMA_IRQHandler+0x452>
 8010df2:	4b71      	ldr	r3, [pc, #452]	; (8010fb8 <HAL_DMA_IRQHandler+0x5cc>)
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d025      	beq.n	8010e44 <HAL_DMA_IRQHandler+0x458>
 8010df8:	4b69      	ldr	r3, [pc, #420]	; (8010fa0 <HAL_DMA_IRQHandler+0x5b4>)
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d025      	beq.n	8010e4a <HAL_DMA_IRQHandler+0x45e>
 8010dfe:	4b6f      	ldr	r3, [pc, #444]	; (8010fbc <HAL_DMA_IRQHandler+0x5d0>)
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d025      	beq.n	8010e50 <HAL_DMA_IRQHandler+0x464>
 8010e04:	4b6e      	ldr	r3, [pc, #440]	; (8010fc0 <HAL_DMA_IRQHandler+0x5d4>)
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d024      	beq.n	8010e54 <HAL_DMA_IRQHandler+0x468>
 8010e0a:	4b6e      	ldr	r3, [pc, #440]	; (8010fc4 <HAL_DMA_IRQHandler+0x5d8>)
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d023      	beq.n	8010e58 <HAL_DMA_IRQHandler+0x46c>
 8010e10:	4b6d      	ldr	r3, [pc, #436]	; (8010fc8 <HAL_DMA_IRQHandler+0x5dc>)
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d002      	beq.n	8010e1c <HAL_DMA_IRQHandler+0x430>
 8010e16:	2380      	movs	r3, #128	; 0x80
 8010e18:	02db      	lsls	r3, r3, #11
 8010e1a:	e003      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e1c:	2380      	movs	r3, #128	; 0x80
 8010e1e:	01db      	lsls	r3, r3, #7
 8010e20:	e000      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e22:	2304      	movs	r3, #4
 8010e24:	400b      	ands	r3, r1
 8010e26:	1e59      	subs	r1, r3, #1
 8010e28:	418b      	sbcs	r3, r1
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	e777      	b.n	8010d1e <HAL_DMA_IRQHandler+0x332>
 8010e2e:	2340      	movs	r3, #64	; 0x40
 8010e30:	e7f8      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e32:	2380      	movs	r3, #128	; 0x80
 8010e34:	00db      	lsls	r3, r3, #3
 8010e36:	e7f5      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e38:	2380      	movs	r3, #128	; 0x80
 8010e3a:	01db      	lsls	r3, r3, #7
 8010e3c:	e7f2      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e3e:	2380      	movs	r3, #128	; 0x80
 8010e40:	02db      	lsls	r3, r3, #11
 8010e42:	e7ef      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e44:	2380      	movs	r3, #128	; 0x80
 8010e46:	03db      	lsls	r3, r3, #15
 8010e48:	e7ec      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e4a:	2380      	movs	r3, #128	; 0x80
 8010e4c:	04db      	lsls	r3, r3, #19
 8010e4e:	e7e9      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e50:	2304      	movs	r3, #4
 8010e52:	e7e7      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e54:	2340      	movs	r3, #64	; 0x40
 8010e56:	e7e5      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
 8010e58:	2380      	movs	r3, #128	; 0x80
 8010e5a:	00db      	lsls	r3, r3, #3
 8010e5c:	e7e2      	b.n	8010e24 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e5e:	2280      	movs	r2, #128	; 0x80
 8010e60:	01d2      	lsls	r2, r2, #7
 8010e62:	e000      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010e64:	2204      	movs	r2, #4
 8010e66:	4b5a      	ldr	r3, [pc, #360]	; (8010fd0 <HAL_DMA_IRQHandler+0x5e4>)
 8010e68:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010e6a:	2321      	movs	r3, #33	; 0x21
 8010e6c:	2211      	movs	r2, #17
 8010e6e:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8010e76:	0020      	movs	r0, r4
 8010e78:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010e7a:	6822      	ldr	r2, [r4, #0]
 8010e7c:	4b48      	ldr	r3, [pc, #288]	; (8010fa0 <HAL_DMA_IRQHandler+0x5b4>)
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d800      	bhi.n	8010e84 <HAL_DMA_IRQHandler+0x498>
 8010e82:	e105      	b.n	8011090 <HAL_DMA_IRQHandler+0x6a4>
 8010e84:	4b52      	ldr	r3, [pc, #328]	; (8010fd0 <HAL_DMA_IRQHandler+0x5e4>)
 8010e86:	6819      	ldr	r1, [r3, #0]
 8010e88:	4b46      	ldr	r3, [pc, #280]	; (8010fa4 <HAL_DMA_IRQHandler+0x5b8>)
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d100      	bne.n	8010e90 <HAL_DMA_IRQHandler+0x4a4>
 8010e8e:	e0a1      	b.n	8010fd4 <HAL_DMA_IRQHandler+0x5e8>
 8010e90:	4b45      	ldr	r3, [pc, #276]	; (8010fa8 <HAL_DMA_IRQHandler+0x5bc>)
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d100      	bne.n	8010e98 <HAL_DMA_IRQHandler+0x4ac>
 8010e96:	e0e3      	b.n	8011060 <HAL_DMA_IRQHandler+0x674>
 8010e98:	4b44      	ldr	r3, [pc, #272]	; (8010fac <HAL_DMA_IRQHandler+0x5c0>)
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d100      	bne.n	8010ea0 <HAL_DMA_IRQHandler+0x4b4>
 8010e9e:	e0e1      	b.n	8011064 <HAL_DMA_IRQHandler+0x678>
 8010ea0:	4b43      	ldr	r3, [pc, #268]	; (8010fb0 <HAL_DMA_IRQHandler+0x5c4>)
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d100      	bne.n	8010ea8 <HAL_DMA_IRQHandler+0x4bc>
 8010ea6:	e0e0      	b.n	801106a <HAL_DMA_IRQHandler+0x67e>
 8010ea8:	4b42      	ldr	r3, [pc, #264]	; (8010fb4 <HAL_DMA_IRQHandler+0x5c8>)
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d100      	bne.n	8010eb0 <HAL_DMA_IRQHandler+0x4c4>
 8010eae:	e0df      	b.n	8011070 <HAL_DMA_IRQHandler+0x684>
 8010eb0:	4b41      	ldr	r3, [pc, #260]	; (8010fb8 <HAL_DMA_IRQHandler+0x5cc>)
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d100      	bne.n	8010eb8 <HAL_DMA_IRQHandler+0x4cc>
 8010eb6:	e0de      	b.n	8011076 <HAL_DMA_IRQHandler+0x68a>
 8010eb8:	4b39      	ldr	r3, [pc, #228]	; (8010fa0 <HAL_DMA_IRQHandler+0x5b4>)
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d100      	bne.n	8010ec0 <HAL_DMA_IRQHandler+0x4d4>
 8010ebe:	e0dd      	b.n	801107c <HAL_DMA_IRQHandler+0x690>
 8010ec0:	4b3e      	ldr	r3, [pc, #248]	; (8010fbc <HAL_DMA_IRQHandler+0x5d0>)
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d100      	bne.n	8010ec8 <HAL_DMA_IRQHandler+0x4dc>
 8010ec6:	e0dc      	b.n	8011082 <HAL_DMA_IRQHandler+0x696>
 8010ec8:	4b3d      	ldr	r3, [pc, #244]	; (8010fc0 <HAL_DMA_IRQHandler+0x5d4>)
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d100      	bne.n	8010ed0 <HAL_DMA_IRQHandler+0x4e4>
 8010ece:	e0da      	b.n	8011086 <HAL_DMA_IRQHandler+0x69a>
 8010ed0:	4b3c      	ldr	r3, [pc, #240]	; (8010fc4 <HAL_DMA_IRQHandler+0x5d8>)
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d100      	bne.n	8010ed8 <HAL_DMA_IRQHandler+0x4ec>
 8010ed6:	e0d8      	b.n	801108a <HAL_DMA_IRQHandler+0x69e>
 8010ed8:	4b3b      	ldr	r3, [pc, #236]	; (8010fc8 <HAL_DMA_IRQHandler+0x5dc>)
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d05d      	beq.n	8010f9a <HAL_DMA_IRQHandler+0x5ae>
 8010ede:	2380      	movs	r3, #128	; 0x80
 8010ee0:	029b      	lsls	r3, r3, #10
 8010ee2:	e078      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010ee4:	2240      	movs	r2, #64	; 0x40
 8010ee6:	e7be      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010ee8:	2280      	movs	r2, #128	; 0x80
 8010eea:	00d2      	lsls	r2, r2, #3
 8010eec:	e7bb      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010eee:	2280      	movs	r2, #128	; 0x80
 8010ef0:	01d2      	lsls	r2, r2, #7
 8010ef2:	e7b8      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010ef4:	2280      	movs	r2, #128	; 0x80
 8010ef6:	02d2      	lsls	r2, r2, #11
 8010ef8:	e7b5      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010efa:	2280      	movs	r2, #128	; 0x80
 8010efc:	03d2      	lsls	r2, r2, #15
 8010efe:	e7b2      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010f00:	2280      	movs	r2, #128	; 0x80
 8010f02:	04d2      	lsls	r2, r2, #19
 8010f04:	e7af      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010f06:	2204      	movs	r2, #4
 8010f08:	e7ad      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010f0a:	2240      	movs	r2, #64	; 0x40
 8010f0c:	e7ab      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010f0e:	2280      	movs	r2, #128	; 0x80
 8010f10:	00d2      	lsls	r2, r2, #3
 8010f12:	e7a8      	b.n	8010e66 <HAL_DMA_IRQHandler+0x47a>
 8010f14:	4a23      	ldr	r2, [pc, #140]	; (8010fa4 <HAL_DMA_IRQHandler+0x5b8>)
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d023      	beq.n	8010f62 <HAL_DMA_IRQHandler+0x576>
 8010f1a:	4a23      	ldr	r2, [pc, #140]	; (8010fa8 <HAL_DMA_IRQHandler+0x5bc>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d024      	beq.n	8010f6a <HAL_DMA_IRQHandler+0x57e>
 8010f20:	4a22      	ldr	r2, [pc, #136]	; (8010fac <HAL_DMA_IRQHandler+0x5c0>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d023      	beq.n	8010f6e <HAL_DMA_IRQHandler+0x582>
 8010f26:	4a22      	ldr	r2, [pc, #136]	; (8010fb0 <HAL_DMA_IRQHandler+0x5c4>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d023      	beq.n	8010f74 <HAL_DMA_IRQHandler+0x588>
 8010f2c:	4a21      	ldr	r2, [pc, #132]	; (8010fb4 <HAL_DMA_IRQHandler+0x5c8>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d023      	beq.n	8010f7a <HAL_DMA_IRQHandler+0x58e>
 8010f32:	4a21      	ldr	r2, [pc, #132]	; (8010fb8 <HAL_DMA_IRQHandler+0x5cc>)
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d023      	beq.n	8010f80 <HAL_DMA_IRQHandler+0x594>
 8010f38:	4a19      	ldr	r2, [pc, #100]	; (8010fa0 <HAL_DMA_IRQHandler+0x5b4>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d023      	beq.n	8010f86 <HAL_DMA_IRQHandler+0x59a>
 8010f3e:	4a1f      	ldr	r2, [pc, #124]	; (8010fbc <HAL_DMA_IRQHandler+0x5d0>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d023      	beq.n	8010f8c <HAL_DMA_IRQHandler+0x5a0>
 8010f44:	4a1e      	ldr	r2, [pc, #120]	; (8010fc0 <HAL_DMA_IRQHandler+0x5d4>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d022      	beq.n	8010f90 <HAL_DMA_IRQHandler+0x5a4>
 8010f4a:	4a1e      	ldr	r2, [pc, #120]	; (8010fc4 <HAL_DMA_IRQHandler+0x5d8>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d021      	beq.n	8010f94 <HAL_DMA_IRQHandler+0x5a8>
 8010f50:	4a1d      	ldr	r2, [pc, #116]	; (8010fc8 <HAL_DMA_IRQHandler+0x5dc>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d002      	beq.n	8010f5c <HAL_DMA_IRQHandler+0x570>
 8010f56:	2280      	movs	r2, #128	; 0x80
 8010f58:	02d2      	lsls	r2, r2, #11
 8010f5a:	e003      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f5c:	2280      	movs	r2, #128	; 0x80
 8010f5e:	01d2      	lsls	r2, r2, #7
 8010f60:	e000      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f62:	2204      	movs	r2, #4
 8010f64:	4b19      	ldr	r3, [pc, #100]	; (8010fcc <HAL_DMA_IRQHandler+0x5e0>)
 8010f66:	605a      	str	r2, [r3, #4]
 8010f68:	e77f      	b.n	8010e6a <HAL_DMA_IRQHandler+0x47e>
 8010f6a:	2240      	movs	r2, #64	; 0x40
 8010f6c:	e7fa      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f6e:	2280      	movs	r2, #128	; 0x80
 8010f70:	00d2      	lsls	r2, r2, #3
 8010f72:	e7f7      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f74:	2280      	movs	r2, #128	; 0x80
 8010f76:	01d2      	lsls	r2, r2, #7
 8010f78:	e7f4      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f7a:	2280      	movs	r2, #128	; 0x80
 8010f7c:	02d2      	lsls	r2, r2, #11
 8010f7e:	e7f1      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f80:	2280      	movs	r2, #128	; 0x80
 8010f82:	03d2      	lsls	r2, r2, #15
 8010f84:	e7ee      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f86:	2280      	movs	r2, #128	; 0x80
 8010f88:	04d2      	lsls	r2, r2, #19
 8010f8a:	e7eb      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f8c:	2204      	movs	r2, #4
 8010f8e:	e7e9      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f90:	2240      	movs	r2, #64	; 0x40
 8010f92:	e7e7      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
 8010f94:	2280      	movs	r2, #128	; 0x80
 8010f96:	00d2      	lsls	r2, r2, #3
 8010f98:	e7e4      	b.n	8010f64 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010f9a:	2380      	movs	r3, #128	; 0x80
 8010f9c:	019b      	lsls	r3, r3, #6
 8010f9e:	e01a      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8010fa0:	40020080 	.word	0x40020080
 8010fa4:	40020008 	.word	0x40020008
 8010fa8:	4002001c 	.word	0x4002001c
 8010fac:	40020030 	.word	0x40020030
 8010fb0:	40020044 	.word	0x40020044
 8010fb4:	40020058 	.word	0x40020058
 8010fb8:	4002006c 	.word	0x4002006c
 8010fbc:	40020408 	.word	0x40020408
 8010fc0:	4002041c 	.word	0x4002041c
 8010fc4:	40020430 	.word	0x40020430
 8010fc8:	40020444 	.word	0x40020444
 8010fcc:	40020000 	.word	0x40020000
 8010fd0:	40020400 	.word	0x40020400
 8010fd4:	2302      	movs	r3, #2
 8010fd6:	400b      	ands	r3, r1
 8010fd8:	1e59      	subs	r1, r3, #1
 8010fda:	418b      	sbcs	r3, r1
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d100      	bne.n	8010fe4 <HAL_DMA_IRQHandler+0x5f8>
 8010fe2:	e0af      	b.n	8011144 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010fe4:	6813      	ldr	r3, [r2, #0]
 8010fe6:	079b      	lsls	r3, r3, #30
 8010fe8:	d400      	bmi.n	8010fec <HAL_DMA_IRQHandler+0x600>
 8010fea:	e0ab      	b.n	8011144 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010fec:	6813      	ldr	r3, [r2, #0]
 8010fee:	069b      	lsls	r3, r3, #26
 8010ff0:	d403      	bmi.n	8010ffa <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010ff2:	6813      	ldr	r3, [r2, #0]
 8010ff4:	2102      	movs	r1, #2
 8010ff6:	438b      	bics	r3, r1
 8010ff8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	4a7f      	ldr	r2, [pc, #508]	; (80111fc <HAL_DMA_IRQHandler+0x810>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d800      	bhi.n	8011004 <HAL_DMA_IRQHandler+0x618>
 8011002:	e0b8      	b.n	8011176 <HAL_DMA_IRQHandler+0x78a>
 8011004:	4a7e      	ldr	r2, [pc, #504]	; (8011200 <HAL_DMA_IRQHandler+0x814>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d100      	bne.n	801100c <HAL_DMA_IRQHandler+0x620>
 801100a:	e08b      	b.n	8011124 <HAL_DMA_IRQHandler+0x738>
 801100c:	4a7d      	ldr	r2, [pc, #500]	; (8011204 <HAL_DMA_IRQHandler+0x818>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d100      	bne.n	8011014 <HAL_DMA_IRQHandler+0x628>
 8011012:	e098      	b.n	8011146 <HAL_DMA_IRQHandler+0x75a>
 8011014:	4a7c      	ldr	r2, [pc, #496]	; (8011208 <HAL_DMA_IRQHandler+0x81c>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d100      	bne.n	801101c <HAL_DMA_IRQHandler+0x630>
 801101a:	e096      	b.n	801114a <HAL_DMA_IRQHandler+0x75e>
 801101c:	4a7b      	ldr	r2, [pc, #492]	; (801120c <HAL_DMA_IRQHandler+0x820>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d100      	bne.n	8011024 <HAL_DMA_IRQHandler+0x638>
 8011022:	e095      	b.n	8011150 <HAL_DMA_IRQHandler+0x764>
 8011024:	4a7a      	ldr	r2, [pc, #488]	; (8011210 <HAL_DMA_IRQHandler+0x824>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d100      	bne.n	801102c <HAL_DMA_IRQHandler+0x640>
 801102a:	e094      	b.n	8011156 <HAL_DMA_IRQHandler+0x76a>
 801102c:	4a79      	ldr	r2, [pc, #484]	; (8011214 <HAL_DMA_IRQHandler+0x828>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d100      	bne.n	8011034 <HAL_DMA_IRQHandler+0x648>
 8011032:	e093      	b.n	801115c <HAL_DMA_IRQHandler+0x770>
 8011034:	4a71      	ldr	r2, [pc, #452]	; (80111fc <HAL_DMA_IRQHandler+0x810>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d100      	bne.n	801103c <HAL_DMA_IRQHandler+0x650>
 801103a:	e092      	b.n	8011162 <HAL_DMA_IRQHandler+0x776>
 801103c:	4a76      	ldr	r2, [pc, #472]	; (8011218 <HAL_DMA_IRQHandler+0x82c>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d100      	bne.n	8011044 <HAL_DMA_IRQHandler+0x658>
 8011042:	e091      	b.n	8011168 <HAL_DMA_IRQHandler+0x77c>
 8011044:	4a75      	ldr	r2, [pc, #468]	; (801121c <HAL_DMA_IRQHandler+0x830>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d100      	bne.n	801104c <HAL_DMA_IRQHandler+0x660>
 801104a:	e08f      	b.n	801116c <HAL_DMA_IRQHandler+0x780>
 801104c:	4a74      	ldr	r2, [pc, #464]	; (8011220 <HAL_DMA_IRQHandler+0x834>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d100      	bne.n	8011054 <HAL_DMA_IRQHandler+0x668>
 8011052:	e08d      	b.n	8011170 <HAL_DMA_IRQHandler+0x784>
 8011054:	4a73      	ldr	r2, [pc, #460]	; (8011224 <HAL_DMA_IRQHandler+0x838>)
 8011056:	4293      	cmp	r3, r2
 8011058:	d061      	beq.n	801111e <HAL_DMA_IRQHandler+0x732>
 801105a:	2280      	movs	r2, #128	; 0x80
 801105c:	0292      	lsls	r2, r2, #10
 801105e:	e062      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011060:	2320      	movs	r3, #32
 8011062:	e7b8      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	009b      	lsls	r3, r3, #2
 8011068:	e7b5      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 801106a:	2380      	movs	r3, #128	; 0x80
 801106c:	019b      	lsls	r3, r3, #6
 801106e:	e7b2      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8011070:	2380      	movs	r3, #128	; 0x80
 8011072:	029b      	lsls	r3, r3, #10
 8011074:	e7af      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8011076:	2380      	movs	r3, #128	; 0x80
 8011078:	039b      	lsls	r3, r3, #14
 801107a:	e7ac      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 801107c:	2380      	movs	r3, #128	; 0x80
 801107e:	049b      	lsls	r3, r3, #18
 8011080:	e7a9      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8011082:	2302      	movs	r3, #2
 8011084:	e7a7      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8011086:	2320      	movs	r3, #32
 8011088:	e7a5      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 801108a:	2380      	movs	r3, #128	; 0x80
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	e7a2      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x5ea>
 8011090:	4b65      	ldr	r3, [pc, #404]	; (8011228 <HAL_DMA_IRQHandler+0x83c>)
 8011092:	6819      	ldr	r1, [r3, #0]
 8011094:	4b5a      	ldr	r3, [pc, #360]	; (8011200 <HAL_DMA_IRQHandler+0x814>)
 8011096:	429a      	cmp	r2, r3
 8011098:	d023      	beq.n	80110e2 <HAL_DMA_IRQHandler+0x6f6>
 801109a:	4b5a      	ldr	r3, [pc, #360]	; (8011204 <HAL_DMA_IRQHandler+0x818>)
 801109c:	429a      	cmp	r2, r3
 801109e:	d026      	beq.n	80110ee <HAL_DMA_IRQHandler+0x702>
 80110a0:	4b59      	ldr	r3, [pc, #356]	; (8011208 <HAL_DMA_IRQHandler+0x81c>)
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d025      	beq.n	80110f2 <HAL_DMA_IRQHandler+0x706>
 80110a6:	4b59      	ldr	r3, [pc, #356]	; (801120c <HAL_DMA_IRQHandler+0x820>)
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d025      	beq.n	80110f8 <HAL_DMA_IRQHandler+0x70c>
 80110ac:	4b58      	ldr	r3, [pc, #352]	; (8011210 <HAL_DMA_IRQHandler+0x824>)
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d025      	beq.n	80110fe <HAL_DMA_IRQHandler+0x712>
 80110b2:	4b58      	ldr	r3, [pc, #352]	; (8011214 <HAL_DMA_IRQHandler+0x828>)
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d025      	beq.n	8011104 <HAL_DMA_IRQHandler+0x718>
 80110b8:	4b50      	ldr	r3, [pc, #320]	; (80111fc <HAL_DMA_IRQHandler+0x810>)
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d025      	beq.n	801110a <HAL_DMA_IRQHandler+0x71e>
 80110be:	4b56      	ldr	r3, [pc, #344]	; (8011218 <HAL_DMA_IRQHandler+0x82c>)
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d025      	beq.n	8011110 <HAL_DMA_IRQHandler+0x724>
 80110c4:	4b55      	ldr	r3, [pc, #340]	; (801121c <HAL_DMA_IRQHandler+0x830>)
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d024      	beq.n	8011114 <HAL_DMA_IRQHandler+0x728>
 80110ca:	4b55      	ldr	r3, [pc, #340]	; (8011220 <HAL_DMA_IRQHandler+0x834>)
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d023      	beq.n	8011118 <HAL_DMA_IRQHandler+0x72c>
 80110d0:	4b54      	ldr	r3, [pc, #336]	; (8011224 <HAL_DMA_IRQHandler+0x838>)
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d002      	beq.n	80110dc <HAL_DMA_IRQHandler+0x6f0>
 80110d6:	2380      	movs	r3, #128	; 0x80
 80110d8:	029b      	lsls	r3, r3, #10
 80110da:	e003      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 80110dc:	2380      	movs	r3, #128	; 0x80
 80110de:	019b      	lsls	r3, r3, #6
 80110e0:	e000      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 80110e2:	2302      	movs	r3, #2
 80110e4:	400b      	ands	r3, r1
 80110e6:	1e59      	subs	r1, r3, #1
 80110e8:	418b      	sbcs	r3, r1
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	e777      	b.n	8010fde <HAL_DMA_IRQHandler+0x5f2>
 80110ee:	2320      	movs	r3, #32
 80110f0:	e7f8      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 80110f2:	2380      	movs	r3, #128	; 0x80
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	e7f5      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 80110f8:	2380      	movs	r3, #128	; 0x80
 80110fa:	019b      	lsls	r3, r3, #6
 80110fc:	e7f2      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 80110fe:	2380      	movs	r3, #128	; 0x80
 8011100:	029b      	lsls	r3, r3, #10
 8011102:	e7ef      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 8011104:	2380      	movs	r3, #128	; 0x80
 8011106:	039b      	lsls	r3, r3, #14
 8011108:	e7ec      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 801110a:	2380      	movs	r3, #128	; 0x80
 801110c:	049b      	lsls	r3, r3, #18
 801110e:	e7e9      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 8011110:	2302      	movs	r3, #2
 8011112:	e7e7      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 8011114:	2320      	movs	r3, #32
 8011116:	e7e5      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
 8011118:	2380      	movs	r3, #128	; 0x80
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	e7e2      	b.n	80110e4 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801111e:	2280      	movs	r2, #128	; 0x80
 8011120:	0192      	lsls	r2, r2, #6
 8011122:	e000      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011124:	2202      	movs	r2, #2
 8011126:	4b41      	ldr	r3, [pc, #260]	; (801122c <HAL_DMA_IRQHandler+0x840>)
 8011128:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801112a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801112c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801112e:	2321      	movs	r3, #33	; 0x21
 8011130:	2201      	movs	r2, #1
 8011132:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011134:	3b01      	subs	r3, #1
 8011136:	2200      	movs	r2, #0
 8011138:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801113a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801113c:	2b00      	cmp	r3, #0
 801113e:	d001      	beq.n	8011144 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 8011140:	0020      	movs	r0, r4
 8011142:	4798      	blx	r3
}  
 8011144:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011146:	2220      	movs	r2, #32
 8011148:	e7ed      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 801114a:	2280      	movs	r2, #128	; 0x80
 801114c:	0092      	lsls	r2, r2, #2
 801114e:	e7ea      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011150:	2280      	movs	r2, #128	; 0x80
 8011152:	0192      	lsls	r2, r2, #6
 8011154:	e7e7      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011156:	2280      	movs	r2, #128	; 0x80
 8011158:	0292      	lsls	r2, r2, #10
 801115a:	e7e4      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 801115c:	2280      	movs	r2, #128	; 0x80
 801115e:	0392      	lsls	r2, r2, #14
 8011160:	e7e1      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011162:	2280      	movs	r2, #128	; 0x80
 8011164:	0492      	lsls	r2, r2, #18
 8011166:	e7de      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011168:	2202      	movs	r2, #2
 801116a:	e7dc      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 801116c:	2220      	movs	r2, #32
 801116e:	e7da      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011170:	2280      	movs	r2, #128	; 0x80
 8011172:	0092      	lsls	r2, r2, #2
 8011174:	e7d7      	b.n	8011126 <HAL_DMA_IRQHandler+0x73a>
 8011176:	4a22      	ldr	r2, [pc, #136]	; (8011200 <HAL_DMA_IRQHandler+0x814>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d023      	beq.n	80111c4 <HAL_DMA_IRQHandler+0x7d8>
 801117c:	4a21      	ldr	r2, [pc, #132]	; (8011204 <HAL_DMA_IRQHandler+0x818>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d024      	beq.n	80111cc <HAL_DMA_IRQHandler+0x7e0>
 8011182:	4a21      	ldr	r2, [pc, #132]	; (8011208 <HAL_DMA_IRQHandler+0x81c>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d023      	beq.n	80111d0 <HAL_DMA_IRQHandler+0x7e4>
 8011188:	4a20      	ldr	r2, [pc, #128]	; (801120c <HAL_DMA_IRQHandler+0x820>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d023      	beq.n	80111d6 <HAL_DMA_IRQHandler+0x7ea>
 801118e:	4a20      	ldr	r2, [pc, #128]	; (8011210 <HAL_DMA_IRQHandler+0x824>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d023      	beq.n	80111dc <HAL_DMA_IRQHandler+0x7f0>
 8011194:	4a1f      	ldr	r2, [pc, #124]	; (8011214 <HAL_DMA_IRQHandler+0x828>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d023      	beq.n	80111e2 <HAL_DMA_IRQHandler+0x7f6>
 801119a:	4a18      	ldr	r2, [pc, #96]	; (80111fc <HAL_DMA_IRQHandler+0x810>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d023      	beq.n	80111e8 <HAL_DMA_IRQHandler+0x7fc>
 80111a0:	4a1d      	ldr	r2, [pc, #116]	; (8011218 <HAL_DMA_IRQHandler+0x82c>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d023      	beq.n	80111ee <HAL_DMA_IRQHandler+0x802>
 80111a6:	4a1d      	ldr	r2, [pc, #116]	; (801121c <HAL_DMA_IRQHandler+0x830>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d022      	beq.n	80111f2 <HAL_DMA_IRQHandler+0x806>
 80111ac:	4a1c      	ldr	r2, [pc, #112]	; (8011220 <HAL_DMA_IRQHandler+0x834>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d021      	beq.n	80111f6 <HAL_DMA_IRQHandler+0x80a>
 80111b2:	4a1c      	ldr	r2, [pc, #112]	; (8011224 <HAL_DMA_IRQHandler+0x838>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d002      	beq.n	80111be <HAL_DMA_IRQHandler+0x7d2>
 80111b8:	2280      	movs	r2, #128	; 0x80
 80111ba:	0292      	lsls	r2, r2, #10
 80111bc:	e003      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111be:	2280      	movs	r2, #128	; 0x80
 80111c0:	0192      	lsls	r2, r2, #6
 80111c2:	e000      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111c4:	2202      	movs	r2, #2
 80111c6:	4b18      	ldr	r3, [pc, #96]	; (8011228 <HAL_DMA_IRQHandler+0x83c>)
 80111c8:	605a      	str	r2, [r3, #4]
 80111ca:	e7ae      	b.n	801112a <HAL_DMA_IRQHandler+0x73e>
 80111cc:	2220      	movs	r2, #32
 80111ce:	e7fa      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111d0:	2280      	movs	r2, #128	; 0x80
 80111d2:	0092      	lsls	r2, r2, #2
 80111d4:	e7f7      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111d6:	2280      	movs	r2, #128	; 0x80
 80111d8:	0192      	lsls	r2, r2, #6
 80111da:	e7f4      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111dc:	2280      	movs	r2, #128	; 0x80
 80111de:	0292      	lsls	r2, r2, #10
 80111e0:	e7f1      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111e2:	2280      	movs	r2, #128	; 0x80
 80111e4:	0392      	lsls	r2, r2, #14
 80111e6:	e7ee      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111e8:	2280      	movs	r2, #128	; 0x80
 80111ea:	0492      	lsls	r2, r2, #18
 80111ec:	e7eb      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111ee:	2202      	movs	r2, #2
 80111f0:	e7e9      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111f2:	2220      	movs	r2, #32
 80111f4:	e7e7      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111f6:	2280      	movs	r2, #128	; 0x80
 80111f8:	0092      	lsls	r2, r2, #2
 80111fa:	e7e4      	b.n	80111c6 <HAL_DMA_IRQHandler+0x7da>
 80111fc:	40020080 	.word	0x40020080
 8011200:	40020008 	.word	0x40020008
 8011204:	4002001c 	.word	0x4002001c
 8011208:	40020030 	.word	0x40020030
 801120c:	40020044 	.word	0x40020044
 8011210:	40020058 	.word	0x40020058
 8011214:	4002006c 	.word	0x4002006c
 8011218:	40020408 	.word	0x40020408
 801121c:	4002041c 	.word	0x4002041c
 8011220:	40020430 	.word	0x40020430
 8011224:	40020444 	.word	0x40020444
 8011228:	40020000 	.word	0x40020000
 801122c:	40020400 	.word	0x40020400

08011230 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011230:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011232:	4b05      	ldr	r3, [pc, #20]	; (8011248 <FLASH_Program_HalfWord+0x18>)
 8011234:	2200      	movs	r2, #0
 8011236:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011238:	4a04      	ldr	r2, [pc, #16]	; (801124c <FLASH_Program_HalfWord+0x1c>)
 801123a:	6913      	ldr	r3, [r2, #16]
 801123c:	2401      	movs	r4, #1
 801123e:	4323      	orrs	r3, r4
 8011240:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8011242:	8001      	strh	r1, [r0, #0]
}
 8011244:	bd10      	pop	{r4, pc}
 8011246:	46c0      	nop			; (mov r8, r8)
 8011248:	20006c28 	.word	0x20006c28
 801124c:	40022000 	.word	0x40022000

08011250 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011250:	4b0a      	ldr	r3, [pc, #40]	; (801127c <FLASH_SetErrorCode+0x2c>)
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	06db      	lsls	r3, r3, #27
 8011256:	d504      	bpl.n	8011262 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011258:	4a09      	ldr	r2, [pc, #36]	; (8011280 <FLASH_SetErrorCode+0x30>)
 801125a:	69d3      	ldr	r3, [r2, #28]
 801125c:	2102      	movs	r1, #2
 801125e:	430b      	orrs	r3, r1
 8011260:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011262:	4b06      	ldr	r3, [pc, #24]	; (801127c <FLASH_SetErrorCode+0x2c>)
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	075b      	lsls	r3, r3, #29
 8011268:	d504      	bpl.n	8011274 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801126a:	4a05      	ldr	r2, [pc, #20]	; (8011280 <FLASH_SetErrorCode+0x30>)
 801126c:	69d3      	ldr	r3, [r2, #28]
 801126e:	2101      	movs	r1, #1
 8011270:	430b      	orrs	r3, r1
 8011272:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011274:	4b01      	ldr	r3, [pc, #4]	; (801127c <FLASH_SetErrorCode+0x2c>)
 8011276:	2214      	movs	r2, #20
 8011278:	60da      	str	r2, [r3, #12]
}  
 801127a:	4770      	bx	lr
 801127c:	40022000 	.word	0x40022000
 8011280:	20006c28 	.word	0x20006c28

08011284 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011284:	4b06      	ldr	r3, [pc, #24]	; (80112a0 <HAL_FLASH_Unlock+0x1c>)
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	061b      	lsls	r3, r3, #24
 801128a:	d506      	bpl.n	801129a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801128c:	4b04      	ldr	r3, [pc, #16]	; (80112a0 <HAL_FLASH_Unlock+0x1c>)
 801128e:	4a05      	ldr	r2, [pc, #20]	; (80112a4 <HAL_FLASH_Unlock+0x20>)
 8011290:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011292:	4a05      	ldr	r2, [pc, #20]	; (80112a8 <HAL_FLASH_Unlock+0x24>)
 8011294:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011296:	2000      	movs	r0, #0
}
 8011298:	4770      	bx	lr
    return HAL_ERROR;
 801129a:	2001      	movs	r0, #1
 801129c:	e7fc      	b.n	8011298 <HAL_FLASH_Unlock+0x14>
 801129e:	46c0      	nop			; (mov r8, r8)
 80112a0:	40022000 	.word	0x40022000
 80112a4:	45670123 	.word	0x45670123
 80112a8:	cdef89ab 	.word	0xcdef89ab

080112ac <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80112ac:	4a03      	ldr	r2, [pc, #12]	; (80112bc <HAL_FLASH_Lock+0x10>)
 80112ae:	6913      	ldr	r3, [r2, #16]
 80112b0:	2180      	movs	r1, #128	; 0x80
 80112b2:	430b      	orrs	r3, r1
 80112b4:	6113      	str	r3, [r2, #16]
}
 80112b6:	2000      	movs	r0, #0
 80112b8:	4770      	bx	lr
 80112ba:	46c0      	nop			; (mov r8, r8)
 80112bc:	40022000 	.word	0x40022000

080112c0 <FLASH_WaitForLastOperation>:
{
 80112c0:	b570      	push	{r4, r5, r6, lr}
 80112c2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80112c4:	f7fe fe8a 	bl	800ffdc <HAL_GetTick>
 80112c8:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80112ca:	4b12      	ldr	r3, [pc, #72]	; (8011314 <FLASH_WaitForLastOperation+0x54>)
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	07db      	lsls	r3, r3, #31
 80112d0:	d50a      	bpl.n	80112e8 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 80112d2:	1c63      	adds	r3, r4, #1
 80112d4:	d0f9      	beq.n	80112ca <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80112d6:	2c00      	cmp	r4, #0
 80112d8:	d004      	beq.n	80112e4 <FLASH_WaitForLastOperation+0x24>
 80112da:	f7fe fe7f 	bl	800ffdc <HAL_GetTick>
 80112de:	1b40      	subs	r0, r0, r5
 80112e0:	42a0      	cmp	r0, r4
 80112e2:	d9f2      	bls.n	80112ca <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 80112e4:	2003      	movs	r0, #3
 80112e6:	e00f      	b.n	8011308 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80112e8:	4b0a      	ldr	r3, [pc, #40]	; (8011314 <FLASH_WaitForLastOperation+0x54>)
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	069b      	lsls	r3, r3, #26
 80112ee:	d502      	bpl.n	80112f6 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80112f0:	4b08      	ldr	r3, [pc, #32]	; (8011314 <FLASH_WaitForLastOperation+0x54>)
 80112f2:	2220      	movs	r2, #32
 80112f4:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80112f6:	4b07      	ldr	r3, [pc, #28]	; (8011314 <FLASH_WaitForLastOperation+0x54>)
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	06db      	lsls	r3, r3, #27
 80112fc:	d405      	bmi.n	801130a <FLASH_WaitForLastOperation+0x4a>
 80112fe:	4b05      	ldr	r3, [pc, #20]	; (8011314 <FLASH_WaitForLastOperation+0x54>)
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	075b      	lsls	r3, r3, #29
 8011304:	d401      	bmi.n	801130a <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 8011306:	2000      	movs	r0, #0
}
 8011308:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 801130a:	f7ff ffa1 	bl	8011250 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801130e:	2001      	movs	r0, #1
 8011310:	e7fa      	b.n	8011308 <FLASH_WaitForLastOperation+0x48>
 8011312:	46c0      	nop			; (mov r8, r8)
 8011314:	40022000 	.word	0x40022000

08011318 <HAL_FLASH_Program>:
{
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131a:	46ce      	mov	lr, r9
 801131c:	4647      	mov	r7, r8
 801131e:	b580      	push	{r7, lr}
 8011320:	0005      	movs	r5, r0
 8011322:	000e      	movs	r6, r1
 8011324:	4690      	mov	r8, r2
 8011326:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8011328:	4b21      	ldr	r3, [pc, #132]	; (80113b0 <HAL_FLASH_Program+0x98>)
 801132a:	7e1b      	ldrb	r3, [r3, #24]
 801132c:	2b01      	cmp	r3, #1
 801132e:	d03d      	beq.n	80113ac <HAL_FLASH_Program+0x94>
 8011330:	4b1f      	ldr	r3, [pc, #124]	; (80113b0 <HAL_FLASH_Program+0x98>)
 8011332:	2201      	movs	r2, #1
 8011334:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011336:	481f      	ldr	r0, [pc, #124]	; (80113b4 <HAL_FLASH_Program+0x9c>)
 8011338:	f7ff ffc2 	bl	80112c0 <FLASH_WaitForLastOperation>
 801133c:	1e04      	subs	r4, r0, #0
  if(status == HAL_OK)
 801133e:	d12e      	bne.n	801139e <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011340:	2d01      	cmp	r5, #1
 8011342:	d007      	beq.n	8011354 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011344:	2d02      	cmp	r5, #2
 8011346:	d002      	beq.n	801134e <HAL_FLASH_Program+0x36>
      nbiterations = 4;
 8011348:	2304      	movs	r3, #4
 801134a:	4699      	mov	r9, r3
    for (index = 0; index < nbiterations; index++)
 801134c:	e01d      	b.n	801138a <HAL_FLASH_Program+0x72>
      nbiterations = 2;
 801134e:	2302      	movs	r3, #2
 8011350:	4699      	mov	r9, r3
 8011352:	e01a      	b.n	801138a <HAL_FLASH_Program+0x72>
      nbiterations = 1;
 8011354:	2301      	movs	r3, #1
 8011356:	4699      	mov	r9, r3
 8011358:	e017      	b.n	801138a <HAL_FLASH_Program+0x72>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801135a:	2220      	movs	r2, #32
 801135c:	1ad2      	subs	r2, r2, r3
 801135e:	0039      	movs	r1, r7
 8011360:	4091      	lsls	r1, r2
 8011362:	000a      	movs	r2, r1
 8011364:	4641      	mov	r1, r8
 8011366:	40d9      	lsrs	r1, r3
 8011368:	4311      	orrs	r1, r2
 801136a:	b289      	uxth	r1, r1
 801136c:	1980      	adds	r0, r0, r6
 801136e:	f7ff ff5f 	bl	8011230 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011372:	4810      	ldr	r0, [pc, #64]	; (80113b4 <HAL_FLASH_Program+0x9c>)
 8011374:	f7ff ffa4 	bl	80112c0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011378:	4a0f      	ldr	r2, [pc, #60]	; (80113b8 <HAL_FLASH_Program+0xa0>)
 801137a:	6913      	ldr	r3, [r2, #16]
 801137c:	2101      	movs	r1, #1
 801137e:	438b      	bics	r3, r1
 8011380:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8011382:	2800      	cmp	r0, #0
 8011384:	d10b      	bne.n	801139e <HAL_FLASH_Program+0x86>
    for (index = 0; index < nbiterations; index++)
 8011386:	3401      	adds	r4, #1
 8011388:	b2e4      	uxtb	r4, r4
 801138a:	454c      	cmp	r4, r9
 801138c:	d207      	bcs.n	801139e <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801138e:	0060      	lsls	r0, r4, #1
 8011390:	0123      	lsls	r3, r4, #4
 8011392:	001a      	movs	r2, r3
 8011394:	3a20      	subs	r2, #32
 8011396:	d4e0      	bmi.n	801135a <HAL_FLASH_Program+0x42>
 8011398:	0039      	movs	r1, r7
 801139a:	40d1      	lsrs	r1, r2
 801139c:	e7e5      	b.n	801136a <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 801139e:	4b04      	ldr	r3, [pc, #16]	; (80113b0 <HAL_FLASH_Program+0x98>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	761a      	strb	r2, [r3, #24]
}
 80113a4:	bcc0      	pop	{r6, r7}
 80113a6:	46b9      	mov	r9, r7
 80113a8:	46b0      	mov	r8, r6
 80113aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80113ac:	2002      	movs	r0, #2
 80113ae:	e7f9      	b.n	80113a4 <HAL_FLASH_Program+0x8c>
 80113b0:	20006c28 	.word	0x20006c28
 80113b4:	0000c350 	.word	0x0000c350
 80113b8:	40022000 	.word	0x40022000

080113bc <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80113bc:	4b06      	ldr	r3, [pc, #24]	; (80113d8 <FLASH_MassErase+0x1c>)
 80113be:	2200      	movs	r2, #0
 80113c0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80113c2:	4b06      	ldr	r3, [pc, #24]	; (80113dc <FLASH_MassErase+0x20>)
 80113c4:	691a      	ldr	r2, [r3, #16]
 80113c6:	2104      	movs	r1, #4
 80113c8:	430a      	orrs	r2, r1
 80113ca:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80113cc:	691a      	ldr	r2, [r3, #16]
 80113ce:	313c      	adds	r1, #60	; 0x3c
 80113d0:	430a      	orrs	r2, r1
 80113d2:	611a      	str	r2, [r3, #16]
}
 80113d4:	4770      	bx	lr
 80113d6:	46c0      	nop			; (mov r8, r8)
 80113d8:	20006c28 	.word	0x20006c28
 80113dc:	40022000 	.word	0x40022000

080113e0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80113e0:	4b06      	ldr	r3, [pc, #24]	; (80113fc <FLASH_PageErase+0x1c>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80113e6:	4b06      	ldr	r3, [pc, #24]	; (8011400 <FLASH_PageErase+0x20>)
 80113e8:	691a      	ldr	r2, [r3, #16]
 80113ea:	2102      	movs	r1, #2
 80113ec:	430a      	orrs	r2, r1
 80113ee:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80113f0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80113f2:	691a      	ldr	r2, [r3, #16]
 80113f4:	313e      	adds	r1, #62	; 0x3e
 80113f6:	430a      	orrs	r2, r1
 80113f8:	611a      	str	r2, [r3, #16]
}
 80113fa:	4770      	bx	lr
 80113fc:	20006c28 	.word	0x20006c28
 8011400:	40022000 	.word	0x40022000

08011404 <HAL_FLASHEx_Erase>:
{
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	0005      	movs	r5, r0
 8011408:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801140a:	4b23      	ldr	r3, [pc, #140]	; (8011498 <HAL_FLASHEx_Erase+0x94>)
 801140c:	7e1b      	ldrb	r3, [r3, #24]
 801140e:	2b01      	cmp	r3, #1
 8011410:	d040      	beq.n	8011494 <HAL_FLASHEx_Erase+0x90>
 8011412:	4b21      	ldr	r3, [pc, #132]	; (8011498 <HAL_FLASHEx_Erase+0x94>)
 8011414:	2201      	movs	r2, #1
 8011416:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011418:	6803      	ldr	r3, [r0, #0]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d021      	beq.n	8011462 <HAL_FLASHEx_Erase+0x5e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801141e:	481f      	ldr	r0, [pc, #124]	; (801149c <HAL_FLASHEx_Erase+0x98>)
 8011420:	f7ff ff4e 	bl	80112c0 <FLASH_WaitForLastOperation>
 8011424:	2800      	cmp	r0, #0
 8011426:	d130      	bne.n	801148a <HAL_FLASHEx_Erase+0x86>
        *PageError = 0xFFFFFFFF;
 8011428:	2301      	movs	r3, #1
 801142a:	425b      	negs	r3, r3
 801142c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 801142e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011430:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011432:	686b      	ldr	r3, [r5, #4]
 8011434:	68aa      	ldr	r2, [r5, #8]
 8011436:	02d2      	lsls	r2, r2, #11
 8011438:	189b      	adds	r3, r3, r2
 801143a:	42a3      	cmp	r3, r4
 801143c:	d926      	bls.n	801148c <HAL_FLASHEx_Erase+0x88>
          FLASH_PageErase(address);
 801143e:	0020      	movs	r0, r4
 8011440:	f7ff ffce 	bl	80113e0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011444:	4815      	ldr	r0, [pc, #84]	; (801149c <HAL_FLASHEx_Erase+0x98>)
 8011446:	f7ff ff3b 	bl	80112c0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801144a:	4a15      	ldr	r2, [pc, #84]	; (80114a0 <HAL_FLASHEx_Erase+0x9c>)
 801144c:	6913      	ldr	r3, [r2, #16]
 801144e:	2102      	movs	r1, #2
 8011450:	438b      	bics	r3, r1
 8011452:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8011454:	2800      	cmp	r0, #0
 8011456:	d116      	bne.n	8011486 <HAL_FLASHEx_Erase+0x82>
            address += FLASH_PAGE_SIZE)
 8011458:	2380      	movs	r3, #128	; 0x80
 801145a:	011b      	lsls	r3, r3, #4
 801145c:	469c      	mov	ip, r3
 801145e:	4464      	add	r4, ip
 8011460:	e7e7      	b.n	8011432 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011462:	480e      	ldr	r0, [pc, #56]	; (801149c <HAL_FLASHEx_Erase+0x98>)
 8011464:	f7ff ff2c 	bl	80112c0 <FLASH_WaitForLastOperation>
 8011468:	2800      	cmp	r0, #0
 801146a:	d001      	beq.n	8011470 <HAL_FLASHEx_Erase+0x6c>
  HAL_StatusTypeDef status = HAL_ERROR;
 801146c:	2001      	movs	r0, #1
 801146e:	e00d      	b.n	801148c <HAL_FLASHEx_Erase+0x88>
        FLASH_MassErase();
 8011470:	f7ff ffa4 	bl	80113bc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011474:	4809      	ldr	r0, [pc, #36]	; (801149c <HAL_FLASHEx_Erase+0x98>)
 8011476:	f7ff ff23 	bl	80112c0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801147a:	4a09      	ldr	r2, [pc, #36]	; (80114a0 <HAL_FLASHEx_Erase+0x9c>)
 801147c:	6913      	ldr	r3, [r2, #16]
 801147e:	2104      	movs	r1, #4
 8011480:	438b      	bics	r3, r1
 8011482:	6113      	str	r3, [r2, #16]
 8011484:	e002      	b.n	801148c <HAL_FLASHEx_Erase+0x88>
            *PageError = address;
 8011486:	6034      	str	r4, [r6, #0]
            break;
 8011488:	e000      	b.n	801148c <HAL_FLASHEx_Erase+0x88>
  HAL_StatusTypeDef status = HAL_ERROR;
 801148a:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 801148c:	4b02      	ldr	r3, [pc, #8]	; (8011498 <HAL_FLASHEx_Erase+0x94>)
 801148e:	2200      	movs	r2, #0
 8011490:	761a      	strb	r2, [r3, #24]
}
 8011492:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8011494:	2002      	movs	r0, #2
 8011496:	e7fc      	b.n	8011492 <HAL_FLASHEx_Erase+0x8e>
 8011498:	20006c28 	.word	0x20006c28
 801149c:	0000c350 	.word	0x0000c350
 80114a0:	40022000 	.word	0x40022000

080114a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80114a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a6:	46c6      	mov	lr, r8
 80114a8:	b500      	push	{lr}
 80114aa:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 80114ac:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80114ae:	e033      	b.n	8011518 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80114b0:	2604      	movs	r6, #4
 80114b2:	e000      	b.n	80114b6 <HAL_GPIO_Init+0x12>
 80114b4:	2600      	movs	r6, #0
 80114b6:	40a6      	lsls	r6, r4
 80114b8:	0034      	movs	r4, r6
 80114ba:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80114bc:	3202      	adds	r2, #2
 80114be:	0092      	lsls	r2, r2, #2
 80114c0:	4e57      	ldr	r6, [pc, #348]	; (8011620 <HAL_GPIO_Init+0x17c>)
 80114c2:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80114c4:	4a57      	ldr	r2, [pc, #348]	; (8011624 <HAL_GPIO_Init+0x180>)
 80114c6:	6817      	ldr	r7, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80114c8:	43ea      	mvns	r2, r5
 80114ca:	003e      	movs	r6, r7
 80114cc:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80114ce:	684c      	ldr	r4, [r1, #4]
 80114d0:	03e4      	lsls	r4, r4, #15
 80114d2:	d501      	bpl.n	80114d8 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 80114d4:	003e      	movs	r6, r7
 80114d6:	432e      	orrs	r6, r5
        }
        EXTI->IMR = temp;
 80114d8:	4c52      	ldr	r4, [pc, #328]	; (8011624 <HAL_GPIO_Init+0x180>)
 80114da:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80114dc:	6867      	ldr	r7, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80114de:	003e      	movs	r6, r7
 80114e0:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80114e2:	684c      	ldr	r4, [r1, #4]
 80114e4:	03a4      	lsls	r4, r4, #14
 80114e6:	d501      	bpl.n	80114ec <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 80114e8:	003e      	movs	r6, r7
 80114ea:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80114ec:	4c4d      	ldr	r4, [pc, #308]	; (8011624 <HAL_GPIO_Init+0x180>)
 80114ee:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80114f0:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80114f2:	003e      	movs	r6, r7
 80114f4:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80114f6:	684c      	ldr	r4, [r1, #4]
 80114f8:	02e4      	lsls	r4, r4, #11
 80114fa:	d501      	bpl.n	8011500 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 80114fc:	003e      	movs	r6, r7
 80114fe:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 8011500:	4c48      	ldr	r4, [pc, #288]	; (8011624 <HAL_GPIO_Init+0x180>)
 8011502:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8011504:	68e6      	ldr	r6, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011506:	4032      	ands	r2, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011508:	684c      	ldr	r4, [r1, #4]
 801150a:	02a4      	lsls	r4, r4, #10
 801150c:	d501      	bpl.n	8011512 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 801150e:	002a      	movs	r2, r5
 8011510:	4332      	orrs	r2, r6
        }
        EXTI->FTSR = temp;
 8011512:	4c44      	ldr	r4, [pc, #272]	; (8011624 <HAL_GPIO_Init+0x180>)
 8011514:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011516:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011518:	680c      	ldr	r4, [r1, #0]
 801151a:	0022      	movs	r2, r4
 801151c:	40da      	lsrs	r2, r3
 801151e:	d07a      	beq.n	8011616 <HAL_GPIO_Init+0x172>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011520:	2201      	movs	r2, #1
 8011522:	409a      	lsls	r2, r3
 8011524:	0025      	movs	r5, r4
 8011526:	4015      	ands	r5, r2
    if(iocurrent)
 8011528:	4214      	tst	r4, r2
 801152a:	d0f4      	beq.n	8011516 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801152c:	684a      	ldr	r2, [r1, #4]
 801152e:	2a02      	cmp	r2, #2
 8011530:	d001      	beq.n	8011536 <HAL_GPIO_Init+0x92>
 8011532:	2a12      	cmp	r2, #18
 8011534:	d10e      	bne.n	8011554 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3];
 8011536:	08da      	lsrs	r2, r3, #3
 8011538:	3208      	adds	r2, #8
 801153a:	0092      	lsls	r2, r2, #2
 801153c:	5817      	ldr	r7, [r2, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801153e:	2407      	movs	r4, #7
 8011540:	401c      	ands	r4, r3
 8011542:	00a4      	lsls	r4, r4, #2
 8011544:	260f      	movs	r6, #15
 8011546:	40a6      	lsls	r6, r4
 8011548:	43b7      	bics	r7, r6
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801154a:	690e      	ldr	r6, [r1, #16]
 801154c:	40a6      	lsls	r6, r4
 801154e:	0034      	movs	r4, r6
 8011550:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8011552:	5014      	str	r4, [r2, r0]
      temp = GPIOx->MODER;
 8011554:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011556:	005c      	lsls	r4, r3, #1
 8011558:	2203      	movs	r2, #3
 801155a:	0016      	movs	r6, r2
 801155c:	40a6      	lsls	r6, r4
 801155e:	46b4      	mov	ip, r6
 8011560:	43f6      	mvns	r6, r6
 8011562:	46b0      	mov	r8, r6
 8011564:	4666      	mov	r6, ip
 8011566:	43b7      	bics	r7, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011568:	684e      	ldr	r6, [r1, #4]
 801156a:	4032      	ands	r2, r6
 801156c:	40a2      	lsls	r2, r4
 801156e:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8011570:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011572:	684a      	ldr	r2, [r1, #4]
 8011574:	1e57      	subs	r7, r2, #1
 8011576:	2f01      	cmp	r7, #1
 8011578:	d903      	bls.n	8011582 <HAL_GPIO_Init+0xde>
 801157a:	2a11      	cmp	r2, #17
 801157c:	d001      	beq.n	8011582 <HAL_GPIO_Init+0xde>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801157e:	2a12      	cmp	r2, #18
 8011580:	d111      	bne.n	80115a6 <HAL_GPIO_Init+0x102>
        temp = GPIOx->OSPEEDR; 
 8011582:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011584:	4642      	mov	r2, r8
 8011586:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011588:	68ca      	ldr	r2, [r1, #12]
 801158a:	40a2      	lsls	r2, r4
 801158c:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 801158e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8011590:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011592:	2201      	movs	r2, #1
 8011594:	0016      	movs	r6, r2
 8011596:	409e      	lsls	r6, r3
 8011598:	43b7      	bics	r7, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801159a:	684e      	ldr	r6, [r1, #4]
 801159c:	0936      	lsrs	r6, r6, #4
 801159e:	4032      	ands	r2, r6
 80115a0:	409a      	lsls	r2, r3
 80115a2:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 80115a4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80115a6:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80115a8:	4646      	mov	r6, r8
 80115aa:	4016      	ands	r6, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80115ac:	688a      	ldr	r2, [r1, #8]
 80115ae:	40a2      	lsls	r2, r4
 80115b0:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80115b2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80115b4:	684a      	ldr	r2, [r1, #4]
 80115b6:	00d2      	lsls	r2, r2, #3
 80115b8:	d5ad      	bpl.n	8011516 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80115ba:	4c1b      	ldr	r4, [pc, #108]	; (8011628 <HAL_GPIO_Init+0x184>)
 80115bc:	69a6      	ldr	r6, [r4, #24]
 80115be:	2201      	movs	r2, #1
 80115c0:	4316      	orrs	r6, r2
 80115c2:	61a6      	str	r6, [r4, #24]
 80115c4:	69a4      	ldr	r4, [r4, #24]
 80115c6:	4022      	ands	r2, r4
 80115c8:	9201      	str	r2, [sp, #4]
 80115ca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80115cc:	089a      	lsrs	r2, r3, #2
 80115ce:	1c94      	adds	r4, r2, #2
 80115d0:	00a4      	lsls	r4, r4, #2
 80115d2:	4e13      	ldr	r6, [pc, #76]	; (8011620 <HAL_GPIO_Init+0x17c>)
 80115d4:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80115d6:	2403      	movs	r4, #3
 80115d8:	401c      	ands	r4, r3
 80115da:	00a4      	lsls	r4, r4, #2
 80115dc:	260f      	movs	r6, #15
 80115de:	40a6      	lsls	r6, r4
 80115e0:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80115e2:	2690      	movs	r6, #144	; 0x90
 80115e4:	05f6      	lsls	r6, r6, #23
 80115e6:	42b0      	cmp	r0, r6
 80115e8:	d100      	bne.n	80115ec <HAL_GPIO_Init+0x148>
 80115ea:	e763      	b.n	80114b4 <HAL_GPIO_Init+0x10>
 80115ec:	4e0f      	ldr	r6, [pc, #60]	; (801162c <HAL_GPIO_Init+0x188>)
 80115ee:	42b0      	cmp	r0, r6
 80115f0:	d00b      	beq.n	801160a <HAL_GPIO_Init+0x166>
 80115f2:	4e0f      	ldr	r6, [pc, #60]	; (8011630 <HAL_GPIO_Init+0x18c>)
 80115f4:	42b0      	cmp	r0, r6
 80115f6:	d00a      	beq.n	801160e <HAL_GPIO_Init+0x16a>
 80115f8:	4e0e      	ldr	r6, [pc, #56]	; (8011634 <HAL_GPIO_Init+0x190>)
 80115fa:	42b0      	cmp	r0, r6
 80115fc:	d009      	beq.n	8011612 <HAL_GPIO_Init+0x16e>
 80115fe:	4e0e      	ldr	r6, [pc, #56]	; (8011638 <HAL_GPIO_Init+0x194>)
 8011600:	42b0      	cmp	r0, r6
 8011602:	d100      	bne.n	8011606 <HAL_GPIO_Init+0x162>
 8011604:	e754      	b.n	80114b0 <HAL_GPIO_Init+0xc>
 8011606:	2605      	movs	r6, #5
 8011608:	e755      	b.n	80114b6 <HAL_GPIO_Init+0x12>
 801160a:	2601      	movs	r6, #1
 801160c:	e753      	b.n	80114b6 <HAL_GPIO_Init+0x12>
 801160e:	2602      	movs	r6, #2
 8011610:	e751      	b.n	80114b6 <HAL_GPIO_Init+0x12>
 8011612:	2603      	movs	r6, #3
 8011614:	e74f      	b.n	80114b6 <HAL_GPIO_Init+0x12>
  } 
}
 8011616:	b002      	add	sp, #8
 8011618:	bc80      	pop	{r7}
 801161a:	46b8      	mov	r8, r7
 801161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801161e:	46c0      	nop			; (mov r8, r8)
 8011620:	40010000 	.word	0x40010000
 8011624:	40010400 	.word	0x40010400
 8011628:	40021000 	.word	0x40021000
 801162c:	48000400 	.word	0x48000400
 8011630:	48000800 	.word	0x48000800
 8011634:	48000c00 	.word	0x48000c00
 8011638:	48001000 	.word	0x48001000

0801163c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801163e:	46ce      	mov	lr, r9
 8011640:	4647      	mov	r7, r8
 8011642:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 8011644:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011646:	e006      	b.n	8011656 <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011648:	2604      	movs	r6, #4
 801164a:	e000      	b.n	801164e <HAL_GPIO_DeInit+0x12>
 801164c:	2600      	movs	r6, #0
 801164e:	4096      	lsls	r6, r2
 8011650:	42a6      	cmp	r6, r4
 8011652:	d050      	beq.n	80116f6 <HAL_GPIO_DeInit+0xba>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011654:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011656:	000a      	movs	r2, r1
 8011658:	40da      	lsrs	r2, r3
 801165a:	d061      	beq.n	8011720 <HAL_GPIO_DeInit+0xe4>
    iocurrent = (GPIO_Pin) & (1 << position);
 801165c:	2201      	movs	r2, #1
 801165e:	409a      	lsls	r2, r3
 8011660:	000f      	movs	r7, r1
 8011662:	4017      	ands	r7, r2
    if (iocurrent)
 8011664:	4211      	tst	r1, r2
 8011666:	d0f5      	beq.n	8011654 <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011668:	6804      	ldr	r4, [r0, #0]
 801166a:	005d      	lsls	r5, r3, #1
 801166c:	2203      	movs	r2, #3
 801166e:	4691      	mov	r9, r2
 8011670:	0016      	movs	r6, r2
 8011672:	40ae      	lsls	r6, r5
 8011674:	46b4      	mov	ip, r6
 8011676:	43b4      	bics	r4, r6
 8011678:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801167a:	08dd      	lsrs	r5, r3, #3
 801167c:	3508      	adds	r5, #8
 801167e:	00ad      	lsls	r5, r5, #2
 8011680:	582a      	ldr	r2, [r5, r0]
 8011682:	4690      	mov	r8, r2
 8011684:	2407      	movs	r4, #7
 8011686:	401c      	ands	r4, r3
 8011688:	00a4      	lsls	r4, r4, #2
 801168a:	260f      	movs	r6, #15
 801168c:	0032      	movs	r2, r6
 801168e:	40a2      	lsls	r2, r4
 8011690:	0014      	movs	r4, r2
 8011692:	4642      	mov	r2, r8
 8011694:	43a2      	bics	r2, r4
 8011696:	502a      	str	r2, [r5, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011698:	6884      	ldr	r4, [r0, #8]
 801169a:	4662      	mov	r2, ip
 801169c:	4394      	bics	r4, r2
 801169e:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80116a0:	6844      	ldr	r4, [r0, #4]
 80116a2:	2501      	movs	r5, #1
 80116a4:	409d      	lsls	r5, r3
 80116a6:	43ac      	bics	r4, r5
 80116a8:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80116aa:	68c4      	ldr	r4, [r0, #12]
 80116ac:	4394      	bics	r4, r2
 80116ae:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 80116b0:	089d      	lsrs	r5, r3, #2
 80116b2:	1cac      	adds	r4, r5, #2
 80116b4:	00a4      	lsls	r4, r4, #2
 80116b6:	4a1c      	ldr	r2, [pc, #112]	; (8011728 <HAL_GPIO_DeInit+0xec>)
 80116b8:	58a4      	ldr	r4, [r4, r2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80116ba:	464a      	mov	r2, r9
 80116bc:	401a      	ands	r2, r3
 80116be:	0092      	lsls	r2, r2, #2
 80116c0:	4096      	lsls	r6, r2
 80116c2:	46b4      	mov	ip, r6
 80116c4:	4034      	ands	r4, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80116c6:	2690      	movs	r6, #144	; 0x90
 80116c8:	05f6      	lsls	r6, r6, #23
 80116ca:	42b0      	cmp	r0, r6
 80116cc:	d0be      	beq.n	801164c <HAL_GPIO_DeInit+0x10>
 80116ce:	4e17      	ldr	r6, [pc, #92]	; (801172c <HAL_GPIO_DeInit+0xf0>)
 80116d0:	42b0      	cmp	r0, r6
 80116d2:	d00a      	beq.n	80116ea <HAL_GPIO_DeInit+0xae>
 80116d4:	4e16      	ldr	r6, [pc, #88]	; (8011730 <HAL_GPIO_DeInit+0xf4>)
 80116d6:	42b0      	cmp	r0, r6
 80116d8:	d009      	beq.n	80116ee <HAL_GPIO_DeInit+0xb2>
 80116da:	4e16      	ldr	r6, [pc, #88]	; (8011734 <HAL_GPIO_DeInit+0xf8>)
 80116dc:	42b0      	cmp	r0, r6
 80116de:	d008      	beq.n	80116f2 <HAL_GPIO_DeInit+0xb6>
 80116e0:	4e15      	ldr	r6, [pc, #84]	; (8011738 <HAL_GPIO_DeInit+0xfc>)
 80116e2:	42b0      	cmp	r0, r6
 80116e4:	d0b0      	beq.n	8011648 <HAL_GPIO_DeInit+0xc>
 80116e6:	2605      	movs	r6, #5
 80116e8:	e7b1      	b.n	801164e <HAL_GPIO_DeInit+0x12>
 80116ea:	2601      	movs	r6, #1
 80116ec:	e7af      	b.n	801164e <HAL_GPIO_DeInit+0x12>
 80116ee:	2602      	movs	r6, #2
 80116f0:	e7ad      	b.n	801164e <HAL_GPIO_DeInit+0x12>
 80116f2:	2603      	movs	r6, #3
 80116f4:	e7ab      	b.n	801164e <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80116f6:	4e0c      	ldr	r6, [pc, #48]	; (8011728 <HAL_GPIO_DeInit+0xec>)
 80116f8:	3502      	adds	r5, #2
 80116fa:	00aa      	lsls	r2, r5, #2
 80116fc:	5994      	ldr	r4, [r2, r6]
 80116fe:	4665      	mov	r5, ip
 8011700:	43ac      	bics	r4, r5
 8011702:	5194      	str	r4, [r2, r6]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011704:	4a0d      	ldr	r2, [pc, #52]	; (801173c <HAL_GPIO_DeInit+0x100>)
 8011706:	6814      	ldr	r4, [r2, #0]
 8011708:	43bc      	bics	r4, r7
 801170a:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 801170c:	6854      	ldr	r4, [r2, #4]
 801170e:	43bc      	bics	r4, r7
 8011710:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011712:	6894      	ldr	r4, [r2, #8]
 8011714:	43bc      	bics	r4, r7
 8011716:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011718:	68d4      	ldr	r4, [r2, #12]
 801171a:	43bc      	bics	r4, r7
 801171c:	60d4      	str	r4, [r2, #12]
 801171e:	e799      	b.n	8011654 <HAL_GPIO_DeInit+0x18>
  }
}
 8011720:	bcc0      	pop	{r6, r7}
 8011722:	46b9      	mov	r9, r7
 8011724:	46b0      	mov	r8, r6
 8011726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011728:	40010000 	.word	0x40010000
 801172c:	48000400 	.word	0x48000400
 8011730:	48000800 	.word	0x48000800
 8011734:	48000c00 	.word	0x48000c00
 8011738:	48001000 	.word	0x48001000
 801173c:	40010400 	.word	0x40010400

08011740 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011740:	6903      	ldr	r3, [r0, #16]
 8011742:	420b      	tst	r3, r1
 8011744:	d001      	beq.n	801174a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8011746:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8011748:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 801174a:	2000      	movs	r0, #0
 801174c:	e7fc      	b.n	8011748 <HAL_GPIO_ReadPin+0x8>

0801174e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801174e:	2a00      	cmp	r2, #0
 8011750:	d001      	beq.n	8011756 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011752:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011754:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011756:	6281      	str	r1, [r0, #40]	; 0x28
}
 8011758:	e7fc      	b.n	8011754 <HAL_GPIO_WritePin+0x6>

0801175a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801175a:	6943      	ldr	r3, [r0, #20]
 801175c:	4059      	eors	r1, r3
 801175e:	6141      	str	r1, [r0, #20]
}
 8011760:	4770      	bx	lr

08011762 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011762:	4770      	bx	lr

08011764 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011764:	4a03      	ldr	r2, [pc, #12]	; (8011774 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011766:	6811      	ldr	r1, [r2, #0]
 8011768:	2380      	movs	r3, #128	; 0x80
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	430b      	orrs	r3, r1
 801176e:	6013      	str	r3, [r2, #0]
}
 8011770:	4770      	bx	lr
 8011772:	46c0      	nop			; (mov r8, r8)
 8011774:	40007000 	.word	0x40007000

08011778 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011778:	b530      	push	{r4, r5, lr}
 801177a:	b083      	sub	sp, #12
 801177c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801177e:	6803      	ldr	r3, [r0, #0]
 8011780:	07db      	lsls	r3, r3, #31
 8011782:	d534      	bpl.n	80117ee <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011784:	4bc1      	ldr	r3, [pc, #772]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011786:	685a      	ldr	r2, [r3, #4]
 8011788:	230c      	movs	r3, #12
 801178a:	4013      	ands	r3, r2
 801178c:	2b04      	cmp	r3, #4
 801178e:	d026      	beq.n	80117de <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011790:	4bbe      	ldr	r3, [pc, #760]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	230c      	movs	r3, #12
 8011796:	4013      	ands	r3, r2
 8011798:	2b08      	cmp	r3, #8
 801179a:	d108      	bne.n	80117ae <HAL_RCC_OscConfig+0x36>
 801179c:	4bbb      	ldr	r3, [pc, #748]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	22c0      	movs	r2, #192	; 0xc0
 80117a2:	0252      	lsls	r2, r2, #9
 80117a4:	4013      	ands	r3, r2
 80117a6:	2280      	movs	r2, #128	; 0x80
 80117a8:	0252      	lsls	r2, r2, #9
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d017      	beq.n	80117de <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80117ae:	4bb7      	ldr	r3, [pc, #732]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	49b7      	ldr	r1, [pc, #732]	; (8011a90 <HAL_RCC_OscConfig+0x318>)
 80117b4:	400a      	ands	r2, r1
 80117b6:	601a      	str	r2, [r3, #0]
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	49b6      	ldr	r1, [pc, #728]	; (8011a94 <HAL_RCC_OscConfig+0x31c>)
 80117bc:	400a      	ands	r2, r1
 80117be:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80117c0:	f7fe fc0c 	bl	800ffdc <HAL_GetTick>
 80117c4:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80117c6:	4bb1      	ldr	r3, [pc, #708]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	039b      	lsls	r3, r3, #14
 80117cc:	d536      	bpl.n	801183c <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117ce:	f7fe fc05 	bl	800ffdc <HAL_GetTick>
 80117d2:	1b40      	subs	r0, r0, r5
 80117d4:	2864      	cmp	r0, #100	; 0x64
 80117d6:	d9f6      	bls.n	80117c6 <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 80117d8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80117da:	b003      	add	sp, #12
 80117dc:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80117de:	4bab      	ldr	r3, [pc, #684]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	039b      	lsls	r3, r3, #14
 80117e4:	d503      	bpl.n	80117ee <HAL_RCC_OscConfig+0x76>
 80117e6:	6863      	ldr	r3, [r4, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d100      	bne.n	80117ee <HAL_RCC_OscConfig+0x76>
 80117ec:	e256      	b.n	8011c9c <HAL_RCC_OscConfig+0x524>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80117ee:	6823      	ldr	r3, [r4, #0]
 80117f0:	079b      	lsls	r3, r3, #30
 80117f2:	d400      	bmi.n	80117f6 <HAL_RCC_OscConfig+0x7e>
 80117f4:	e087      	b.n	8011906 <HAL_RCC_OscConfig+0x18e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80117f6:	4ba5      	ldr	r3, [pc, #660]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	220c      	movs	r2, #12
 80117fc:	421a      	tst	r2, r3
 80117fe:	d072      	beq.n	80118e6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011800:	4ba2      	ldr	r3, [pc, #648]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011802:	685a      	ldr	r2, [r3, #4]
 8011804:	230c      	movs	r3, #12
 8011806:	4013      	ands	r3, r2
 8011808:	2b08      	cmp	r3, #8
 801180a:	d063      	beq.n	80118d4 <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801180c:	68e3      	ldr	r3, [r4, #12]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d100      	bne.n	8011814 <HAL_RCC_OscConfig+0x9c>
 8011812:	e09a      	b.n	801194a <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_ENABLE();
 8011814:	4a9d      	ldr	r2, [pc, #628]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011816:	6813      	ldr	r3, [r2, #0]
 8011818:	2101      	movs	r1, #1
 801181a:	430b      	orrs	r3, r1
 801181c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801181e:	f7fe fbdd 	bl	800ffdc <HAL_GetTick>
 8011822:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011824:	4b99      	ldr	r3, [pc, #612]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	079b      	lsls	r3, r3, #30
 801182a:	d500      	bpl.n	801182e <HAL_RCC_OscConfig+0xb6>
 801182c:	e084      	b.n	8011938 <HAL_RCC_OscConfig+0x1c0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801182e:	f7fe fbd5 	bl	800ffdc <HAL_GetTick>
 8011832:	1b40      	subs	r0, r0, r5
 8011834:	2864      	cmp	r0, #100	; 0x64
 8011836:	d9f5      	bls.n	8011824 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 8011838:	2003      	movs	r0, #3
 801183a:	e7ce      	b.n	80117da <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801183c:	6863      	ldr	r3, [r4, #4]
 801183e:	2b01      	cmp	r3, #1
 8011840:	d00b      	beq.n	801185a <HAL_RCC_OscConfig+0xe2>
 8011842:	2b00      	cmp	r3, #0
 8011844:	d120      	bne.n	8011888 <HAL_RCC_OscConfig+0x110>
 8011846:	4b91      	ldr	r3, [pc, #580]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	4991      	ldr	r1, [pc, #580]	; (8011a90 <HAL_RCC_OscConfig+0x318>)
 801184c:	400a      	ands	r2, r1
 801184e:	601a      	str	r2, [r3, #0]
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	4990      	ldr	r1, [pc, #576]	; (8011a94 <HAL_RCC_OscConfig+0x31c>)
 8011854:	400a      	ands	r2, r1
 8011856:	601a      	str	r2, [r3, #0]
 8011858:	e005      	b.n	8011866 <HAL_RCC_OscConfig+0xee>
 801185a:	4a8c      	ldr	r2, [pc, #560]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 801185c:	6811      	ldr	r1, [r2, #0]
 801185e:	2380      	movs	r3, #128	; 0x80
 8011860:	025b      	lsls	r3, r3, #9
 8011862:	430b      	orrs	r3, r1
 8011864:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011866:	6863      	ldr	r3, [r4, #4]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d025      	beq.n	80118b8 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 801186c:	f7fe fbb6 	bl	800ffdc <HAL_GetTick>
 8011870:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011872:	4b86      	ldr	r3, [pc, #536]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	039b      	lsls	r3, r3, #14
 8011878:	d4b9      	bmi.n	80117ee <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801187a:	f7fe fbaf 	bl	800ffdc <HAL_GetTick>
 801187e:	1b40      	subs	r0, r0, r5
 8011880:	2864      	cmp	r0, #100	; 0x64
 8011882:	d9f6      	bls.n	8011872 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8011884:	2003      	movs	r0, #3
 8011886:	e7a8      	b.n	80117da <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011888:	2b05      	cmp	r3, #5
 801188a:	d009      	beq.n	80118a0 <HAL_RCC_OscConfig+0x128>
 801188c:	4b7f      	ldr	r3, [pc, #508]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	497f      	ldr	r1, [pc, #508]	; (8011a90 <HAL_RCC_OscConfig+0x318>)
 8011892:	400a      	ands	r2, r1
 8011894:	601a      	str	r2, [r3, #0]
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	497e      	ldr	r1, [pc, #504]	; (8011a94 <HAL_RCC_OscConfig+0x31c>)
 801189a:	400a      	ands	r2, r1
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	e7e2      	b.n	8011866 <HAL_RCC_OscConfig+0xee>
 80118a0:	4b7a      	ldr	r3, [pc, #488]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80118a2:	6819      	ldr	r1, [r3, #0]
 80118a4:	2280      	movs	r2, #128	; 0x80
 80118a6:	02d2      	lsls	r2, r2, #11
 80118a8:	430a      	orrs	r2, r1
 80118aa:	601a      	str	r2, [r3, #0]
 80118ac:	6819      	ldr	r1, [r3, #0]
 80118ae:	2280      	movs	r2, #128	; 0x80
 80118b0:	0252      	lsls	r2, r2, #9
 80118b2:	430a      	orrs	r2, r1
 80118b4:	601a      	str	r2, [r3, #0]
 80118b6:	e7d6      	b.n	8011866 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80118b8:	f7fe fb90 	bl	800ffdc <HAL_GetTick>
 80118bc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80118be:	4b73      	ldr	r3, [pc, #460]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	039b      	lsls	r3, r3, #14
 80118c4:	d593      	bpl.n	80117ee <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80118c6:	f7fe fb89 	bl	800ffdc <HAL_GetTick>
 80118ca:	1b40      	subs	r0, r0, r5
 80118cc:	2864      	cmp	r0, #100	; 0x64
 80118ce:	d9f6      	bls.n	80118be <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 80118d0:	2003      	movs	r0, #3
 80118d2:	e782      	b.n	80117da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80118d4:	4b6d      	ldr	r3, [pc, #436]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	22c0      	movs	r2, #192	; 0xc0
 80118da:	0252      	lsls	r2, r2, #9
 80118dc:	4013      	ands	r3, r2
 80118de:	2280      	movs	r2, #128	; 0x80
 80118e0:	0212      	lsls	r2, r2, #8
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d192      	bne.n	801180c <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80118e6:	4b69      	ldr	r3, [pc, #420]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	079b      	lsls	r3, r3, #30
 80118ec:	d503      	bpl.n	80118f6 <HAL_RCC_OscConfig+0x17e>
 80118ee:	68e3      	ldr	r3, [r4, #12]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d000      	beq.n	80118f6 <HAL_RCC_OscConfig+0x17e>
 80118f4:	e1d4      	b.n	8011ca0 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80118f6:	4965      	ldr	r1, [pc, #404]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80118f8:	680b      	ldr	r3, [r1, #0]
 80118fa:	22f8      	movs	r2, #248	; 0xf8
 80118fc:	4393      	bics	r3, r2
 80118fe:	6922      	ldr	r2, [r4, #16]
 8011900:	00d2      	lsls	r2, r2, #3
 8011902:	4313      	orrs	r3, r2
 8011904:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011906:	6823      	ldr	r3, [r4, #0]
 8011908:	071b      	lsls	r3, r3, #28
 801190a:	d544      	bpl.n	8011996 <HAL_RCC_OscConfig+0x21e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801190c:	6a23      	ldr	r3, [r4, #32]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d02e      	beq.n	8011970 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 8011912:	4a5e      	ldr	r2, [pc, #376]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011914:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011916:	2101      	movs	r1, #1
 8011918:	430b      	orrs	r3, r1
 801191a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801191c:	f7fe fb5e 	bl	800ffdc <HAL_GetTick>
 8011920:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011922:	4b5a      	ldr	r3, [pc, #360]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011926:	079b      	lsls	r3, r3, #30
 8011928:	d435      	bmi.n	8011996 <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801192a:	f7fe fb57 	bl	800ffdc <HAL_GetTick>
 801192e:	1b40      	subs	r0, r0, r5
 8011930:	2864      	cmp	r0, #100	; 0x64
 8011932:	d9f6      	bls.n	8011922 <HAL_RCC_OscConfig+0x1aa>
          return HAL_TIMEOUT;
 8011934:	2003      	movs	r0, #3
 8011936:	e750      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011938:	4954      	ldr	r1, [pc, #336]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 801193a:	680b      	ldr	r3, [r1, #0]
 801193c:	22f8      	movs	r2, #248	; 0xf8
 801193e:	4393      	bics	r3, r2
 8011940:	6922      	ldr	r2, [r4, #16]
 8011942:	00d2      	lsls	r2, r2, #3
 8011944:	4313      	orrs	r3, r2
 8011946:	600b      	str	r3, [r1, #0]
 8011948:	e7dd      	b.n	8011906 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_DISABLE();
 801194a:	4a50      	ldr	r2, [pc, #320]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 801194c:	6813      	ldr	r3, [r2, #0]
 801194e:	2101      	movs	r1, #1
 8011950:	438b      	bics	r3, r1
 8011952:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011954:	f7fe fb42 	bl	800ffdc <HAL_GetTick>
 8011958:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801195a:	4b4c      	ldr	r3, [pc, #304]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	079b      	lsls	r3, r3, #30
 8011960:	d5d1      	bpl.n	8011906 <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011962:	f7fe fb3b 	bl	800ffdc <HAL_GetTick>
 8011966:	1b40      	subs	r0, r0, r5
 8011968:	2864      	cmp	r0, #100	; 0x64
 801196a:	d9f6      	bls.n	801195a <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 801196c:	2003      	movs	r0, #3
 801196e:	e734      	b.n	80117da <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 8011970:	4a46      	ldr	r2, [pc, #280]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011972:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011974:	2101      	movs	r1, #1
 8011976:	438b      	bics	r3, r1
 8011978:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801197a:	f7fe fb2f 	bl	800ffdc <HAL_GetTick>
 801197e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011980:	4b42      	ldr	r3, [pc, #264]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011984:	079b      	lsls	r3, r3, #30
 8011986:	d506      	bpl.n	8011996 <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011988:	f7fe fb28 	bl	800ffdc <HAL_GetTick>
 801198c:	1b40      	subs	r0, r0, r5
 801198e:	2864      	cmp	r0, #100	; 0x64
 8011990:	d9f6      	bls.n	8011980 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8011992:	2003      	movs	r0, #3
 8011994:	e721      	b.n	80117da <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011996:	6823      	ldr	r3, [r4, #0]
 8011998:	075b      	lsls	r3, r3, #29
 801199a:	d440      	bmi.n	8011a1e <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801199c:	6823      	ldr	r3, [r4, #0]
 801199e:	06db      	lsls	r3, r3, #27
 80119a0:	d512      	bpl.n	80119c8 <HAL_RCC_OscConfig+0x250>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80119a2:	6963      	ldr	r3, [r4, #20]
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d100      	bne.n	80119aa <HAL_RCC_OscConfig+0x232>
 80119a8:	e0c7      	b.n	8011b3a <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80119aa:	3305      	adds	r3, #5
 80119ac:	d000      	beq.n	80119b0 <HAL_RCC_OscConfig+0x238>
 80119ae:	e0e4      	b.n	8011b7a <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 80119b0:	4a36      	ldr	r2, [pc, #216]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80119b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80119b4:	2104      	movs	r1, #4
 80119b6:	438b      	bics	r3, r1
 80119b8:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80119ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80119bc:	31f4      	adds	r1, #244	; 0xf4
 80119be:	438b      	bics	r3, r1
 80119c0:	69a1      	ldr	r1, [r4, #24]
 80119c2:	00c9      	lsls	r1, r1, #3
 80119c4:	430b      	orrs	r3, r1
 80119c6:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	069b      	lsls	r3, r3, #26
 80119cc:	d400      	bmi.n	80119d0 <HAL_RCC_OscConfig+0x258>
 80119ce:	e0fb      	b.n	8011bc8 <HAL_RCC_OscConfig+0x450>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80119d0:	4b2e      	ldr	r3, [pc, #184]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80119d2:	685a      	ldr	r2, [r3, #4]
 80119d4:	230c      	movs	r3, #12
 80119d6:	4013      	ands	r3, r2
 80119d8:	2b0c      	cmp	r3, #12
 80119da:	d100      	bne.n	80119de <HAL_RCC_OscConfig+0x266>
 80119dc:	e0ed      	b.n	8011bba <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80119de:	4b2b      	ldr	r3, [pc, #172]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80119e0:	685a      	ldr	r2, [r3, #4]
 80119e2:	230c      	movs	r3, #12
 80119e4:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80119e6:	2b08      	cmp	r3, #8
 80119e8:	d100      	bne.n	80119ec <HAL_RCC_OscConfig+0x274>
 80119ea:	e0de      	b.n	8011baa <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80119ec:	69e3      	ldr	r3, [r4, #28]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d100      	bne.n	80119f4 <HAL_RCC_OscConfig+0x27c>
 80119f2:	e107      	b.n	8011c04 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_HSI48_ENABLE();
 80119f4:	4a25      	ldr	r2, [pc, #148]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 80119f6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80119f8:	2380      	movs	r3, #128	; 0x80
 80119fa:	025b      	lsls	r3, r3, #9
 80119fc:	430b      	orrs	r3, r1
 80119fe:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011a00:	f7fe faec 	bl	800ffdc <HAL_GetTick>
 8011a04:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011a06:	4b21      	ldr	r3, [pc, #132]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a0a:	03db      	lsls	r3, r3, #15
 8011a0c:	d500      	bpl.n	8011a10 <HAL_RCC_OscConfig+0x298>
 8011a0e:	e0db      	b.n	8011bc8 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011a10:	f7fe fae4 	bl	800ffdc <HAL_GetTick>
 8011a14:	1b40      	subs	r0, r0, r5
 8011a16:	2864      	cmp	r0, #100	; 0x64
 8011a18:	d9f5      	bls.n	8011a06 <HAL_RCC_OscConfig+0x28e>
            return HAL_TIMEOUT;
 8011a1a:	2003      	movs	r0, #3
 8011a1c:	e6dd      	b.n	80117da <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011a1e:	4b1b      	ldr	r3, [pc, #108]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011a20:	69da      	ldr	r2, [r3, #28]
 8011a22:	2180      	movs	r1, #128	; 0x80
 8011a24:	0549      	lsls	r1, r1, #21
 8011a26:	430a      	orrs	r2, r1
 8011a28:	61da      	str	r2, [r3, #28]
 8011a2a:	69db      	ldr	r3, [r3, #28]
 8011a2c:	400b      	ands	r3, r1
 8011a2e:	9301      	str	r3, [sp, #4]
 8011a30:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011a32:	4a19      	ldr	r2, [pc, #100]	; (8011a98 <HAL_RCC_OscConfig+0x320>)
 8011a34:	6811      	ldr	r1, [r2, #0]
 8011a36:	2380      	movs	r3, #128	; 0x80
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	430b      	orrs	r3, r1
 8011a3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011a3e:	f7fe facd 	bl	800ffdc <HAL_GetTick>
 8011a42:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011a44:	4b14      	ldr	r3, [pc, #80]	; (8011a98 <HAL_RCC_OscConfig+0x320>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	05db      	lsls	r3, r3, #23
 8011a4a:	d406      	bmi.n	8011a5a <HAL_RCC_OscConfig+0x2e2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011a4c:	f7fe fac6 	bl	800ffdc <HAL_GetTick>
 8011a50:	1b40      	subs	r0, r0, r5
 8011a52:	2864      	cmp	r0, #100	; 0x64
 8011a54:	d9f6      	bls.n	8011a44 <HAL_RCC_OscConfig+0x2cc>
        return HAL_TIMEOUT;
 8011a56:	2003      	movs	r0, #3
 8011a58:	e6bf      	b.n	80117da <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011a5a:	4b0c      	ldr	r3, [pc, #48]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011a5c:	6a1a      	ldr	r2, [r3, #32]
 8011a5e:	2101      	movs	r1, #1
 8011a60:	438a      	bics	r2, r1
 8011a62:	621a      	str	r2, [r3, #32]
 8011a64:	6a1a      	ldr	r2, [r3, #32]
 8011a66:	3103      	adds	r1, #3
 8011a68:	438a      	bics	r2, r1
 8011a6a:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8011a6c:	f7fe fab6 	bl	800ffdc <HAL_GetTick>
 8011a70:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a72:	4b06      	ldr	r3, [pc, #24]	; (8011a8c <HAL_RCC_OscConfig+0x314>)
 8011a74:	6a1b      	ldr	r3, [r3, #32]
 8011a76:	079b      	lsls	r3, r3, #30
 8011a78:	d512      	bpl.n	8011aa0 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a7a:	f7fe faaf 	bl	800ffdc <HAL_GetTick>
 8011a7e:	1b40      	subs	r0, r0, r5
 8011a80:	4b06      	ldr	r3, [pc, #24]	; (8011a9c <HAL_RCC_OscConfig+0x324>)
 8011a82:	4298      	cmp	r0, r3
 8011a84:	d9f5      	bls.n	8011a72 <HAL_RCC_OscConfig+0x2fa>
        return HAL_TIMEOUT;
 8011a86:	2003      	movs	r0, #3
 8011a88:	e6a7      	b.n	80117da <HAL_RCC_OscConfig+0x62>
 8011a8a:	46c0      	nop			; (mov r8, r8)
 8011a8c:	40021000 	.word	0x40021000
 8011a90:	fffeffff 	.word	0xfffeffff
 8011a94:	fffbffff 	.word	0xfffbffff
 8011a98:	40007000 	.word	0x40007000
 8011a9c:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011aa0:	68a3      	ldr	r3, [r4, #8]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d00b      	beq.n	8011abe <HAL_RCC_OscConfig+0x346>
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d121      	bne.n	8011aee <HAL_RCC_OscConfig+0x376>
 8011aaa:	4b81      	ldr	r3, [pc, #516]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011aac:	6a1a      	ldr	r2, [r3, #32]
 8011aae:	2101      	movs	r1, #1
 8011ab0:	438a      	bics	r2, r1
 8011ab2:	621a      	str	r2, [r3, #32]
 8011ab4:	6a1a      	ldr	r2, [r3, #32]
 8011ab6:	3103      	adds	r1, #3
 8011ab8:	438a      	bics	r2, r1
 8011aba:	621a      	str	r2, [r3, #32]
 8011abc:	e004      	b.n	8011ac8 <HAL_RCC_OscConfig+0x350>
 8011abe:	4a7c      	ldr	r2, [pc, #496]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011ac0:	6a13      	ldr	r3, [r2, #32]
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	430b      	orrs	r3, r1
 8011ac6:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011ac8:	68a3      	ldr	r3, [r4, #8]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d025      	beq.n	8011b1a <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8011ace:	f7fe fa85 	bl	800ffdc <HAL_GetTick>
 8011ad2:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011ad4:	4b76      	ldr	r3, [pc, #472]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011ad6:	6a1b      	ldr	r3, [r3, #32]
 8011ad8:	079b      	lsls	r3, r3, #30
 8011ada:	d500      	bpl.n	8011ade <HAL_RCC_OscConfig+0x366>
 8011adc:	e75e      	b.n	801199c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011ade:	f7fe fa7d 	bl	800ffdc <HAL_GetTick>
 8011ae2:	1b40      	subs	r0, r0, r5
 8011ae4:	4b73      	ldr	r3, [pc, #460]	; (8011cb4 <HAL_RCC_OscConfig+0x53c>)
 8011ae6:	4298      	cmp	r0, r3
 8011ae8:	d9f4      	bls.n	8011ad4 <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8011aea:	2003      	movs	r0, #3
 8011aec:	e675      	b.n	80117da <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011aee:	2b05      	cmp	r3, #5
 8011af0:	d009      	beq.n	8011b06 <HAL_RCC_OscConfig+0x38e>
 8011af2:	4b6f      	ldr	r3, [pc, #444]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011af4:	6a1a      	ldr	r2, [r3, #32]
 8011af6:	2101      	movs	r1, #1
 8011af8:	438a      	bics	r2, r1
 8011afa:	621a      	str	r2, [r3, #32]
 8011afc:	6a1a      	ldr	r2, [r3, #32]
 8011afe:	3103      	adds	r1, #3
 8011b00:	438a      	bics	r2, r1
 8011b02:	621a      	str	r2, [r3, #32]
 8011b04:	e7e0      	b.n	8011ac8 <HAL_RCC_OscConfig+0x350>
 8011b06:	4b6a      	ldr	r3, [pc, #424]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b08:	6a1a      	ldr	r2, [r3, #32]
 8011b0a:	2104      	movs	r1, #4
 8011b0c:	430a      	orrs	r2, r1
 8011b0e:	621a      	str	r2, [r3, #32]
 8011b10:	6a1a      	ldr	r2, [r3, #32]
 8011b12:	3903      	subs	r1, #3
 8011b14:	430a      	orrs	r2, r1
 8011b16:	621a      	str	r2, [r3, #32]
 8011b18:	e7d6      	b.n	8011ac8 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8011b1a:	f7fe fa5f 	bl	800ffdc <HAL_GetTick>
 8011b1e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011b20:	4b63      	ldr	r3, [pc, #396]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b22:	6a1b      	ldr	r3, [r3, #32]
 8011b24:	079b      	lsls	r3, r3, #30
 8011b26:	d400      	bmi.n	8011b2a <HAL_RCC_OscConfig+0x3b2>
 8011b28:	e738      	b.n	801199c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b2a:	f7fe fa57 	bl	800ffdc <HAL_GetTick>
 8011b2e:	1b40      	subs	r0, r0, r5
 8011b30:	4b60      	ldr	r3, [pc, #384]	; (8011cb4 <HAL_RCC_OscConfig+0x53c>)
 8011b32:	4298      	cmp	r0, r3
 8011b34:	d9f4      	bls.n	8011b20 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8011b36:	2003      	movs	r0, #3
 8011b38:	e64f      	b.n	80117da <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011b3a:	4b5d      	ldr	r3, [pc, #372]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b3e:	2104      	movs	r1, #4
 8011b40:	430a      	orrs	r2, r1
 8011b42:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b46:	3903      	subs	r1, #3
 8011b48:	430a      	orrs	r2, r1
 8011b4a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011b4c:	f7fe fa46 	bl	800ffdc <HAL_GetTick>
 8011b50:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011b52:	4b57      	ldr	r3, [pc, #348]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b56:	079b      	lsls	r3, r3, #30
 8011b58:	d406      	bmi.n	8011b68 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011b5a:	f7fe fa3f 	bl	800ffdc <HAL_GetTick>
 8011b5e:	1b40      	subs	r0, r0, r5
 8011b60:	2864      	cmp	r0, #100	; 0x64
 8011b62:	d9f6      	bls.n	8011b52 <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8011b64:	2003      	movs	r0, #3
 8011b66:	e638      	b.n	80117da <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011b68:	4951      	ldr	r1, [pc, #324]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b6a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011b6c:	22f8      	movs	r2, #248	; 0xf8
 8011b6e:	4393      	bics	r3, r2
 8011b70:	69a2      	ldr	r2, [r4, #24]
 8011b72:	00d2      	lsls	r2, r2, #3
 8011b74:	4313      	orrs	r3, r2
 8011b76:	634b      	str	r3, [r1, #52]	; 0x34
 8011b78:	e726      	b.n	80119c8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011b7a:	4b4d      	ldr	r3, [pc, #308]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b7e:	2104      	movs	r1, #4
 8011b80:	430a      	orrs	r2, r1
 8011b82:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b86:	3903      	subs	r1, #3
 8011b88:	438a      	bics	r2, r1
 8011b8a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011b8c:	f7fe fa26 	bl	800ffdc <HAL_GetTick>
 8011b90:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011b92:	4b47      	ldr	r3, [pc, #284]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b96:	079b      	lsls	r3, r3, #30
 8011b98:	d400      	bmi.n	8011b9c <HAL_RCC_OscConfig+0x424>
 8011b9a:	e715      	b.n	80119c8 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011b9c:	f7fe fa1e 	bl	800ffdc <HAL_GetTick>
 8011ba0:	1b40      	subs	r0, r0, r5
 8011ba2:	2864      	cmp	r0, #100	; 0x64
 8011ba4:	d9f5      	bls.n	8011b92 <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 8011ba6:	2003      	movs	r0, #3
 8011ba8:	e617      	b.n	80117da <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011baa:	4b41      	ldr	r3, [pc, #260]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	22c0      	movs	r2, #192	; 0xc0
 8011bb0:	0252      	lsls	r2, r2, #9
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d000      	beq.n	8011bba <HAL_RCC_OscConfig+0x442>
 8011bb8:	e718      	b.n	80119ec <HAL_RCC_OscConfig+0x274>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011bba:	4b3d      	ldr	r3, [pc, #244]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bbe:	03db      	lsls	r3, r3, #15
 8011bc0:	d502      	bpl.n	8011bc8 <HAL_RCC_OscConfig+0x450>
 8011bc2:	69e3      	ldr	r3, [r4, #28]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d16d      	bne.n	8011ca4 <HAL_RCC_OscConfig+0x52c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d06c      	beq.n	8011ca8 <HAL_RCC_OscConfig+0x530>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011bce:	4a38      	ldr	r2, [pc, #224]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011bd0:	6851      	ldr	r1, [r2, #4]
 8011bd2:	220c      	movs	r2, #12
 8011bd4:	400a      	ands	r2, r1
 8011bd6:	2a08      	cmp	r2, #8
 8011bd8:	d068      	beq.n	8011cac <HAL_RCC_OscConfig+0x534>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d025      	beq.n	8011c2a <HAL_RCC_OscConfig+0x4b2>
        __HAL_RCC_PLL_DISABLE();
 8011bde:	4a34      	ldr	r2, [pc, #208]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011be0:	6813      	ldr	r3, [r2, #0]
 8011be2:	4935      	ldr	r1, [pc, #212]	; (8011cb8 <HAL_RCC_OscConfig+0x540>)
 8011be4:	400b      	ands	r3, r1
 8011be6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011be8:	f7fe f9f8 	bl	800ffdc <HAL_GetTick>
 8011bec:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011bee:	4b30      	ldr	r3, [pc, #192]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	019b      	lsls	r3, r3, #6
 8011bf4:	d550      	bpl.n	8011c98 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011bf6:	f7fe f9f1 	bl	800ffdc <HAL_GetTick>
 8011bfa:	1b00      	subs	r0, r0, r4
 8011bfc:	2864      	cmp	r0, #100	; 0x64
 8011bfe:	d9f6      	bls.n	8011bee <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 8011c00:	2003      	movs	r0, #3
 8011c02:	e5ea      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8011c04:	4a2a      	ldr	r2, [pc, #168]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011c06:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011c08:	492c      	ldr	r1, [pc, #176]	; (8011cbc <HAL_RCC_OscConfig+0x544>)
 8011c0a:	400b      	ands	r3, r1
 8011c0c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011c0e:	f7fe f9e5 	bl	800ffdc <HAL_GetTick>
 8011c12:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011c14:	4b26      	ldr	r3, [pc, #152]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c18:	03db      	lsls	r3, r3, #15
 8011c1a:	d5d5      	bpl.n	8011bc8 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011c1c:	f7fe f9de 	bl	800ffdc <HAL_GetTick>
 8011c20:	1b40      	subs	r0, r0, r5
 8011c22:	2864      	cmp	r0, #100	; 0x64
 8011c24:	d9f6      	bls.n	8011c14 <HAL_RCC_OscConfig+0x49c>
            return HAL_TIMEOUT;
 8011c26:	2003      	movs	r0, #3
 8011c28:	e5d7      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8011c2a:	4a21      	ldr	r2, [pc, #132]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011c2c:	6813      	ldr	r3, [r2, #0]
 8011c2e:	4922      	ldr	r1, [pc, #136]	; (8011cb8 <HAL_RCC_OscConfig+0x540>)
 8011c30:	400b      	ands	r3, r1
 8011c32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011c34:	f7fe f9d2 	bl	800ffdc <HAL_GetTick>
 8011c38:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011c3a:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	019b      	lsls	r3, r3, #6
 8011c40:	d506      	bpl.n	8011c50 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c42:	f7fe f9cb 	bl	800ffdc <HAL_GetTick>
 8011c46:	1b40      	subs	r0, r0, r5
 8011c48:	2864      	cmp	r0, #100	; 0x64
 8011c4a:	d9f6      	bls.n	8011c3a <HAL_RCC_OscConfig+0x4c2>
            return HAL_TIMEOUT;
 8011c4c:	2003      	movs	r0, #3
 8011c4e:	e5c4      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011c50:	4b17      	ldr	r3, [pc, #92]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c54:	210f      	movs	r1, #15
 8011c56:	438a      	bics	r2, r1
 8011c58:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011c5a:	430a      	orrs	r2, r1
 8011c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c5e:	685a      	ldr	r2, [r3, #4]
 8011c60:	4917      	ldr	r1, [pc, #92]	; (8011cc0 <HAL_RCC_OscConfig+0x548>)
 8011c62:	400a      	ands	r2, r1
 8011c64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011c66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011c68:	4301      	orrs	r1, r0
 8011c6a:	430a      	orrs	r2, r1
 8011c6c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8011c6e:	6819      	ldr	r1, [r3, #0]
 8011c70:	2280      	movs	r2, #128	; 0x80
 8011c72:	0452      	lsls	r2, r2, #17
 8011c74:	430a      	orrs	r2, r1
 8011c76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011c78:	f7fe f9b0 	bl	800ffdc <HAL_GetTick>
 8011c7c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011c7e:	4b0c      	ldr	r3, [pc, #48]	; (8011cb0 <HAL_RCC_OscConfig+0x538>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	019b      	lsls	r3, r3, #6
 8011c84:	d406      	bmi.n	8011c94 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c86:	f7fe f9a9 	bl	800ffdc <HAL_GetTick>
 8011c8a:	1b00      	subs	r0, r0, r4
 8011c8c:	2864      	cmp	r0, #100	; 0x64
 8011c8e:	d9f6      	bls.n	8011c7e <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 8011c90:	2003      	movs	r0, #3
 8011c92:	e5a2      	b.n	80117da <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011c94:	2000      	movs	r0, #0
 8011c96:	e5a0      	b.n	80117da <HAL_RCC_OscConfig+0x62>
 8011c98:	2000      	movs	r0, #0
 8011c9a:	e59e      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	e59c      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	e59a      	b.n	80117da <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011ca4:	2001      	movs	r0, #1
 8011ca6:	e598      	b.n	80117da <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011ca8:	2000      	movs	r0, #0
 8011caa:	e596      	b.n	80117da <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8011cac:	2001      	movs	r0, #1
 8011cae:	e594      	b.n	80117da <HAL_RCC_OscConfig+0x62>
 8011cb0:	40021000 	.word	0x40021000
 8011cb4:	00001388 	.word	0x00001388
 8011cb8:	feffffff 	.word	0xfeffffff
 8011cbc:	fffeffff 	.word	0xfffeffff
 8011cc0:	ffc27fff 	.word	0xffc27fff

08011cc4 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011cc4:	b570      	push	{r4, r5, r6, lr}
 8011cc6:	0004      	movs	r4, r0
 8011cc8:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011cca:	4b8e      	ldr	r3, [pc, #568]	; (8011f04 <HAL_RCC_ClockConfig+0x240>)
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	2301      	movs	r3, #1
 8011cd0:	4013      	ands	r3, r2
 8011cd2:	428b      	cmp	r3, r1
 8011cd4:	d300      	bcc.n	8011cd8 <HAL_RCC_ClockConfig+0x14>
 8011cd6:	e081      	b.n	8011ddc <HAL_RCC_ClockConfig+0x118>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011cd8:	498a      	ldr	r1, [pc, #552]	; (8011f04 <HAL_RCC_ClockConfig+0x240>)
 8011cda:	680b      	ldr	r3, [r1, #0]
 8011cdc:	2201      	movs	r2, #1
 8011cde:	4393      	bics	r3, r2
 8011ce0:	432b      	orrs	r3, r5
 8011ce2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011ce4:	680b      	ldr	r3, [r1, #0]
 8011ce6:	401a      	ands	r2, r3
 8011ce8:	42aa      	cmp	r2, r5
 8011cea:	d000      	beq.n	8011cee <HAL_RCC_ClockConfig+0x2a>
 8011cec:	e101      	b.n	8011ef2 <HAL_RCC_ClockConfig+0x22e>
    {
      return HAL_ERROR;
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011cee:	6803      	ldr	r3, [r0, #0]
 8011cf0:	079b      	lsls	r3, r3, #30
 8011cf2:	d506      	bpl.n	8011d02 <HAL_RCC_ClockConfig+0x3e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011cf4:	4a84      	ldr	r2, [pc, #528]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011cf6:	6853      	ldr	r3, [r2, #4]
 8011cf8:	21f0      	movs	r1, #240	; 0xf0
 8011cfa:	438b      	bics	r3, r1
 8011cfc:	6881      	ldr	r1, [r0, #8]
 8011cfe:	430b      	orrs	r3, r1
 8011d00:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d02:	6823      	ldr	r3, [r4, #0]
 8011d04:	07db      	lsls	r3, r3, #31
 8011d06:	d400      	bmi.n	8011d0a <HAL_RCC_ClockConfig+0x46>
 8011d08:	e0e4      	b.n	8011ed4 <HAL_RCC_ClockConfig+0x210>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d0a:	6863      	ldr	r3, [r4, #4]
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d009      	beq.n	8011d24 <HAL_RCC_ClockConfig+0x60>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d10:	2b02      	cmp	r3, #2
 8011d12:	d02a      	beq.n	8011d6a <HAL_RCC_ClockConfig+0xa6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011d14:	2b03      	cmp	r3, #3
 8011d16:	d02e      	beq.n	8011d76 <HAL_RCC_ClockConfig+0xb2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d18:	4a7b      	ldr	r2, [pc, #492]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d1a:	6812      	ldr	r2, [r2, #0]
 8011d1c:	0792      	lsls	r2, r2, #30
 8011d1e:	d406      	bmi.n	8011d2e <HAL_RCC_ClockConfig+0x6a>
        {
          return HAL_ERROR;
 8011d20:	2001      	movs	r0, #1
 8011d22:	e0e5      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d24:	4a78      	ldr	r2, [pc, #480]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d26:	6812      	ldr	r2, [r2, #0]
 8011d28:	0392      	lsls	r2, r2, #14
 8011d2a:	d400      	bmi.n	8011d2e <HAL_RCC_ClockConfig+0x6a>
 8011d2c:	e0e3      	b.n	8011ef6 <HAL_RCC_ClockConfig+0x232>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011d2e:	4976      	ldr	r1, [pc, #472]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d30:	684a      	ldr	r2, [r1, #4]
 8011d32:	2003      	movs	r0, #3
 8011d34:	4382      	bics	r2, r0
 8011d36:	4313      	orrs	r3, r2
 8011d38:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011d3a:	f7fe f94f 	bl	800ffdc <HAL_GetTick>
 8011d3e:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d40:	6863      	ldr	r3, [r4, #4]
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d01d      	beq.n	8011d82 <HAL_RCC_ClockConfig+0xbe>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	d02a      	beq.n	8011da0 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d037      	beq.n	8011dbe <HAL_RCC_ClockConfig+0xfa>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011d4e:	4b6e      	ldr	r3, [pc, #440]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	220c      	movs	r2, #12
 8011d54:	421a      	tst	r2, r3
 8011d56:	d100      	bne.n	8011d5a <HAL_RCC_ClockConfig+0x96>
 8011d58:	e0bc      	b.n	8011ed4 <HAL_RCC_ClockConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d5a:	f7fe f93f 	bl	800ffdc <HAL_GetTick>
 8011d5e:	1b40      	subs	r0, r0, r5
 8011d60:	4b6a      	ldr	r3, [pc, #424]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011d62:	4298      	cmp	r0, r3
 8011d64:	d9f3      	bls.n	8011d4e <HAL_RCC_ClockConfig+0x8a>
          {
            return HAL_TIMEOUT;
 8011d66:	2003      	movs	r0, #3
 8011d68:	e0c2      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d6a:	4a67      	ldr	r2, [pc, #412]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d6c:	6812      	ldr	r2, [r2, #0]
 8011d6e:	0192      	lsls	r2, r2, #6
 8011d70:	d4dd      	bmi.n	8011d2e <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 8011d72:	2001      	movs	r0, #1
 8011d74:	e0bc      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d76:	4a64      	ldr	r2, [pc, #400]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011d7a:	03d2      	lsls	r2, r2, #15
 8011d7c:	d4d7      	bmi.n	8011d2e <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 8011d7e:	2001      	movs	r0, #1
 8011d80:	e0b6      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d82:	4b61      	ldr	r3, [pc, #388]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011d84:	685a      	ldr	r2, [r3, #4]
 8011d86:	230c      	movs	r3, #12
 8011d88:	4013      	ands	r3, r2
 8011d8a:	2b04      	cmp	r3, #4
 8011d8c:	d100      	bne.n	8011d90 <HAL_RCC_ClockConfig+0xcc>
 8011d8e:	e0a1      	b.n	8011ed4 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d90:	f7fe f924 	bl	800ffdc <HAL_GetTick>
 8011d94:	1b40      	subs	r0, r0, r5
 8011d96:	4a5d      	ldr	r2, [pc, #372]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011d98:	4290      	cmp	r0, r2
 8011d9a:	d9f2      	bls.n	8011d82 <HAL_RCC_ClockConfig+0xbe>
            return HAL_TIMEOUT;
 8011d9c:	2003      	movs	r0, #3
 8011d9e:	e0a7      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011da0:	4b59      	ldr	r3, [pc, #356]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011da2:	685a      	ldr	r2, [r3, #4]
 8011da4:	230c      	movs	r3, #12
 8011da6:	4013      	ands	r3, r2
 8011da8:	2b08      	cmp	r3, #8
 8011daa:	d100      	bne.n	8011dae <HAL_RCC_ClockConfig+0xea>
 8011dac:	e092      	b.n	8011ed4 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dae:	f7fe f915 	bl	800ffdc <HAL_GetTick>
 8011db2:	1b40      	subs	r0, r0, r5
 8011db4:	4b55      	ldr	r3, [pc, #340]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011db6:	4298      	cmp	r0, r3
 8011db8:	d9f2      	bls.n	8011da0 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
 8011dba:	2003      	movs	r0, #3
 8011dbc:	e098      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011dbe:	4b52      	ldr	r3, [pc, #328]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011dc0:	685a      	ldr	r2, [r3, #4]
 8011dc2:	230c      	movs	r3, #12
 8011dc4:	4013      	ands	r3, r2
 8011dc6:	2b0c      	cmp	r3, #12
 8011dc8:	d100      	bne.n	8011dcc <HAL_RCC_ClockConfig+0x108>
 8011dca:	e083      	b.n	8011ed4 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dcc:	f7fe f906 	bl	800ffdc <HAL_GetTick>
 8011dd0:	1b40      	subs	r0, r0, r5
 8011dd2:	4b4e      	ldr	r3, [pc, #312]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011dd4:	4298      	cmp	r0, r3
 8011dd6:	d9f2      	bls.n	8011dbe <HAL_RCC_ClockConfig+0xfa>
            return HAL_TIMEOUT;
 8011dd8:	2003      	movs	r0, #3
 8011dda:	e089      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ddc:	6803      	ldr	r3, [r0, #0]
 8011dde:	079b      	lsls	r3, r3, #30
 8011de0:	d506      	bpl.n	8011df0 <HAL_RCC_ClockConfig+0x12c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011de2:	4a49      	ldr	r2, [pc, #292]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011de4:	6853      	ldr	r3, [r2, #4]
 8011de6:	21f0      	movs	r1, #240	; 0xf0
 8011de8:	438b      	bics	r3, r1
 8011dea:	6881      	ldr	r1, [r0, #8]
 8011dec:	430b      	orrs	r3, r1
 8011dee:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011df0:	6823      	ldr	r3, [r4, #0]
 8011df2:	07db      	lsls	r3, r3, #31
 8011df4:	d564      	bpl.n	8011ec0 <HAL_RCC_ClockConfig+0x1fc>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011df6:	6863      	ldr	r3, [r4, #4]
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d009      	beq.n	8011e10 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d029      	beq.n	8011e54 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011e00:	2b03      	cmp	r3, #3
 8011e02:	d02d      	beq.n	8011e60 <HAL_RCC_ClockConfig+0x19c>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011e04:	4a40      	ldr	r2, [pc, #256]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e06:	6812      	ldr	r2, [r2, #0]
 8011e08:	0792      	lsls	r2, r2, #30
 8011e0a:	d406      	bmi.n	8011e1a <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_ERROR;
 8011e0c:	2001      	movs	r0, #1
 8011e0e:	e06f      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011e10:	4a3d      	ldr	r2, [pc, #244]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e12:	6812      	ldr	r2, [r2, #0]
 8011e14:	0392      	lsls	r2, r2, #14
 8011e16:	d400      	bmi.n	8011e1a <HAL_RCC_ClockConfig+0x156>
 8011e18:	e06f      	b.n	8011efa <HAL_RCC_ClockConfig+0x236>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011e1a:	493b      	ldr	r1, [pc, #236]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e1c:	684a      	ldr	r2, [r1, #4]
 8011e1e:	2003      	movs	r0, #3
 8011e20:	4382      	bics	r2, r0
 8011e22:	4313      	orrs	r3, r2
 8011e24:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e26:	f7fe f8d9 	bl	800ffdc <HAL_GetTick>
 8011e2a:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e2c:	6863      	ldr	r3, [r4, #4]
 8011e2e:	2b01      	cmp	r3, #1
 8011e30:	d01c      	beq.n	8011e6c <HAL_RCC_ClockConfig+0x1a8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e32:	2b02      	cmp	r3, #2
 8011e34:	d028      	beq.n	8011e88 <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011e36:	2b03      	cmp	r3, #3
 8011e38:	d034      	beq.n	8011ea4 <HAL_RCC_ClockConfig+0x1e0>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011e3a:	4b33      	ldr	r3, [pc, #204]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	220c      	movs	r2, #12
 8011e40:	421a      	tst	r2, r3
 8011e42:	d03d      	beq.n	8011ec0 <HAL_RCC_ClockConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e44:	f7fe f8ca 	bl	800ffdc <HAL_GetTick>
 8011e48:	1b80      	subs	r0, r0, r6
 8011e4a:	4b30      	ldr	r3, [pc, #192]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011e4c:	4298      	cmp	r0, r3
 8011e4e:	d9f4      	bls.n	8011e3a <HAL_RCC_ClockConfig+0x176>
          {
            return HAL_TIMEOUT;
 8011e50:	2003      	movs	r0, #3
 8011e52:	e04d      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011e54:	4a2c      	ldr	r2, [pc, #176]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e56:	6812      	ldr	r2, [r2, #0]
 8011e58:	0192      	lsls	r2, r2, #6
 8011e5a:	d4de      	bmi.n	8011e1a <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011e5c:	2001      	movs	r0, #1
 8011e5e:	e047      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011e60:	4a29      	ldr	r2, [pc, #164]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011e64:	03d2      	lsls	r2, r2, #15
 8011e66:	d4d8      	bmi.n	8011e1a <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011e68:	2001      	movs	r0, #1
 8011e6a:	e041      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011e6c:	4b26      	ldr	r3, [pc, #152]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e6e:	685a      	ldr	r2, [r3, #4]
 8011e70:	230c      	movs	r3, #12
 8011e72:	4013      	ands	r3, r2
 8011e74:	2b04      	cmp	r3, #4
 8011e76:	d023      	beq.n	8011ec0 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e78:	f7fe f8b0 	bl	800ffdc <HAL_GetTick>
 8011e7c:	1b80      	subs	r0, r0, r6
 8011e7e:	4a23      	ldr	r2, [pc, #140]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011e80:	4290      	cmp	r0, r2
 8011e82:	d9f3      	bls.n	8011e6c <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8011e84:	2003      	movs	r0, #3
 8011e86:	e033      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011e88:	4b1f      	ldr	r3, [pc, #124]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011e8a:	685a      	ldr	r2, [r3, #4]
 8011e8c:	230c      	movs	r3, #12
 8011e8e:	4013      	ands	r3, r2
 8011e90:	2b08      	cmp	r3, #8
 8011e92:	d015      	beq.n	8011ec0 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e94:	f7fe f8a2 	bl	800ffdc <HAL_GetTick>
 8011e98:	1b80      	subs	r0, r0, r6
 8011e9a:	4b1c      	ldr	r3, [pc, #112]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011e9c:	4298      	cmp	r0, r3
 8011e9e:	d9f3      	bls.n	8011e88 <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8011ea0:	2003      	movs	r0, #3
 8011ea2:	e025      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011ea4:	4b18      	ldr	r3, [pc, #96]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011ea6:	685a      	ldr	r2, [r3, #4]
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	4013      	ands	r3, r2
 8011eac:	2b0c      	cmp	r3, #12
 8011eae:	d007      	beq.n	8011ec0 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011eb0:	f7fe f894 	bl	800ffdc <HAL_GetTick>
 8011eb4:	1b80      	subs	r0, r0, r6
 8011eb6:	4b15      	ldr	r3, [pc, #84]	; (8011f0c <HAL_RCC_ClockConfig+0x248>)
 8011eb8:	4298      	cmp	r0, r3
 8011eba:	d9f3      	bls.n	8011ea4 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8011ebc:	2003      	movs	r0, #3
 8011ebe:	e017      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011ec0:	4910      	ldr	r1, [pc, #64]	; (8011f04 <HAL_RCC_ClockConfig+0x240>)
 8011ec2:	680b      	ldr	r3, [r1, #0]
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	4393      	bics	r3, r2
 8011ec8:	432b      	orrs	r3, r5
 8011eca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011ecc:	680b      	ldr	r3, [r1, #0]
 8011ece:	401a      	ands	r2, r3
 8011ed0:	42aa      	cmp	r2, r5
 8011ed2:	d114      	bne.n	8011efe <HAL_RCC_ClockConfig+0x23a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011ed4:	6823      	ldr	r3, [r4, #0]
 8011ed6:	075b      	lsls	r3, r3, #29
 8011ed8:	d506      	bpl.n	8011ee8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011eda:	4a0b      	ldr	r2, [pc, #44]	; (8011f08 <HAL_RCC_ClockConfig+0x244>)
 8011edc:	6853      	ldr	r3, [r2, #4]
 8011ede:	490c      	ldr	r1, [pc, #48]	; (8011f10 <HAL_RCC_ClockConfig+0x24c>)
 8011ee0:	400b      	ands	r3, r1
 8011ee2:	68e1      	ldr	r1, [r4, #12]
 8011ee4:	430b      	orrs	r3, r1
 8011ee6:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8011ee8:	2000      	movs	r0, #0
 8011eea:	f7fe f84d 	bl	800ff88 <HAL_InitTick>
  
  return HAL_OK;
 8011eee:	2000      	movs	r0, #0
}
 8011ef0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011ef2:	2001      	movs	r0, #1
 8011ef4:	e7fc      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 8011ef6:	2001      	movs	r0, #1
 8011ef8:	e7fa      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 8011efa:	2001      	movs	r0, #1
 8011efc:	e7f8      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
      return HAL_ERROR;
 8011efe:	2001      	movs	r0, #1
 8011f00:	e7f6      	b.n	8011ef0 <HAL_RCC_ClockConfig+0x22c>
 8011f02:	46c0      	nop			; (mov r8, r8)
 8011f04:	40022000 	.word	0x40022000
 8011f08:	40021000 	.word	0x40021000
 8011f0c:	00001388 	.word	0x00001388
 8011f10:	fffff8ff 	.word	0xfffff8ff

08011f14 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011f14:	b530      	push	{r4, r5, lr}
 8011f16:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011f18:	aa04      	add	r2, sp, #16
 8011f1a:	4b1e      	ldr	r3, [pc, #120]	; (8011f94 <HAL_RCC_GetSysClockFreq+0x80>)
 8011f1c:	cb31      	ldmia	r3!, {r0, r4, r5}
 8011f1e:	c231      	stmia	r2!, {r0, r4, r5}
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011f24:	466a      	mov	r2, sp
 8011f26:	4b1c      	ldr	r3, [pc, #112]	; (8011f98 <HAL_RCC_GetSysClockFreq+0x84>)
 8011f28:	cb31      	ldmia	r3!, {r0, r4, r5}
 8011f2a:	c231      	stmia	r2!, {r0, r4, r5}
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011f30:	4b1a      	ldr	r3, [pc, #104]	; (8011f9c <HAL_RCC_GetSysClockFreq+0x88>)
 8011f32:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011f34:	230c      	movs	r3, #12
 8011f36:	4013      	ands	r3, r2
 8011f38:	2b08      	cmp	r3, #8
 8011f3a:	d004      	beq.n	8011f46 <HAL_RCC_GetSysClockFreq+0x32>
 8011f3c:	2b0c      	cmp	r3, #12
 8011f3e:	d126      	bne.n	8011f8e <HAL_RCC_GetSysClockFreq+0x7a>
      break;
    }
#if defined(RCC_CR2_HSI48ON)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8011f40:	4817      	ldr	r0, [pc, #92]	; (8011fa0 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011f42:	b009      	add	sp, #36	; 0x24
 8011f44:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011f46:	0c91      	lsrs	r1, r2, #18
 8011f48:	230f      	movs	r3, #15
 8011f4a:	4019      	ands	r1, r3
 8011f4c:	a804      	add	r0, sp, #16
 8011f4e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011f50:	4912      	ldr	r1, [pc, #72]	; (8011f9c <HAL_RCC_GetSysClockFreq+0x88>)
 8011f52:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011f54:	400b      	ands	r3, r1
 8011f56:	4669      	mov	r1, sp
 8011f58:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011f5a:	23c0      	movs	r3, #192	; 0xc0
 8011f5c:	025b      	lsls	r3, r3, #9
 8011f5e:	401a      	ands	r2, r3
 8011f60:	2380      	movs	r3, #128	; 0x80
 8011f62:	025b      	lsls	r3, r3, #9
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d008      	beq.n	8011f7a <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011f68:	23c0      	movs	r3, #192	; 0xc0
 8011f6a:	025b      	lsls	r3, r3, #9
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d009      	beq.n	8011f84 <HAL_RCC_GetSysClockFreq+0x70>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011f70:	480c      	ldr	r0, [pc, #48]	; (8011fa4 <HAL_RCC_GetSysClockFreq+0x90>)
 8011f72:	f7ee f8ed 	bl	8000150 <__udivsi3>
 8011f76:	4360      	muls	r0, r4
 8011f78:	e7e3      	b.n	8011f42 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011f7a:	480a      	ldr	r0, [pc, #40]	; (8011fa4 <HAL_RCC_GetSysClockFreq+0x90>)
 8011f7c:	f7ee f8e8 	bl	8000150 <__udivsi3>
 8011f80:	4360      	muls	r0, r4
 8011f82:	e7de      	b.n	8011f42 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011f84:	4806      	ldr	r0, [pc, #24]	; (8011fa0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011f86:	f7ee f8e3 	bl	8000150 <__udivsi3>
 8011f8a:	4360      	muls	r0, r4
 8011f8c:	e7d9      	b.n	8011f42 <HAL_RCC_GetSysClockFreq+0x2e>
  switch (tmpreg & RCC_CFGR_SWS)
 8011f8e:	4805      	ldr	r0, [pc, #20]	; (8011fa4 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8011f90:	e7d7      	b.n	8011f42 <HAL_RCC_GetSysClockFreq+0x2e>
 8011f92:	46c0      	nop			; (mov r8, r8)
 8011f94:	0801c5ac 	.word	0x0801c5ac
 8011f98:	0801c5c0 	.word	0x0801c5c0
 8011f9c:	40021000 	.word	0x40021000
 8011fa0:	02dc6c00 	.word	0x02dc6c00
 8011fa4:	007a1200 	.word	0x007a1200

08011fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011fa8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011faa:	f7ff ffb3 	bl	8011f14 <HAL_RCC_GetSysClockFreq>
 8011fae:	4b05      	ldr	r3, [pc, #20]	; (8011fc4 <HAL_RCC_GetHCLKFreq+0x1c>)
 8011fb0:	685a      	ldr	r2, [r3, #4]
 8011fb2:	0912      	lsrs	r2, r2, #4
 8011fb4:	230f      	movs	r3, #15
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	4a03      	ldr	r2, [pc, #12]	; (8011fc8 <HAL_RCC_GetHCLKFreq+0x20>)
 8011fba:	5cd3      	ldrb	r3, [r2, r3]
 8011fbc:	40d8      	lsrs	r0, r3
 8011fbe:	4b03      	ldr	r3, [pc, #12]	; (8011fcc <HAL_RCC_GetHCLKFreq+0x24>)
 8011fc0:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011fc2:	bd10      	pop	{r4, pc}
 8011fc4:	40021000 	.word	0x40021000
 8011fc8:	08019d34 	.word	0x08019d34
 8011fcc:	200000a4 	.word	0x200000a4

08011fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011fd0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011fd2:	f7ff ffe9 	bl	8011fa8 <HAL_RCC_GetHCLKFreq>
 8011fd6:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011fd8:	685a      	ldr	r2, [r3, #4]
 8011fda:	0a12      	lsrs	r2, r2, #8
 8011fdc:	2307      	movs	r3, #7
 8011fde:	4013      	ands	r3, r2
 8011fe0:	4a02      	ldr	r2, [pc, #8]	; (8011fec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011fe2:	5cd3      	ldrb	r3, [r2, r3]
 8011fe4:	40d8      	lsrs	r0, r3
}    
 8011fe6:	bd10      	pop	{r4, pc}
 8011fe8:	40021000 	.word	0x40021000
 8011fec:	08019d34 	.word	0x08019d34

08011ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011ff0:	b530      	push	{r4, r5, lr}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011ff6:	6803      	ldr	r3, [r0, #0]
 8011ff8:	03db      	lsls	r3, r3, #15
 8011ffa:	d507      	bpl.n	801200c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011ffc:	4b41      	ldr	r3, [pc, #260]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011ffe:	6a1b      	ldr	r3, [r3, #32]
 8012000:	6842      	ldr	r2, [r0, #4]
 8012002:	4053      	eors	r3, r2
 8012004:	22c0      	movs	r2, #192	; 0xc0
 8012006:	0092      	lsls	r2, r2, #2
 8012008:	4213      	tst	r3, r2
 801200a:	d134      	bne.n	8012076 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	07db      	lsls	r3, r3, #31
 8012010:	d506      	bpl.n	8012020 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012012:	4a3c      	ldr	r2, [pc, #240]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012014:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012016:	2103      	movs	r1, #3
 8012018:	438b      	bics	r3, r1
 801201a:	68a1      	ldr	r1, [r4, #8]
 801201c:	430b      	orrs	r3, r1
 801201e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	079b      	lsls	r3, r3, #30
 8012024:	d506      	bpl.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012026:	4a37      	ldr	r2, [pc, #220]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012028:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801202a:	4937      	ldr	r1, [pc, #220]	; (8012108 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 801202c:	400b      	ands	r3, r1
 801202e:	68e1      	ldr	r1, [r4, #12]
 8012030:	430b      	orrs	r3, r1
 8012032:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012034:	6823      	ldr	r3, [r4, #0]
 8012036:	035b      	lsls	r3, r3, #13
 8012038:	d506      	bpl.n	8012048 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801203a:	4a32      	ldr	r2, [pc, #200]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801203c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801203e:	4933      	ldr	r1, [pc, #204]	; (801210c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8012040:	400b      	ands	r3, r1
 8012042:	6921      	ldr	r1, [r4, #16]
 8012044:	430b      	orrs	r3, r1
 8012046:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	069b      	lsls	r3, r3, #26
 801204c:	d506      	bpl.n	801205c <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801204e:	4a2d      	ldr	r2, [pc, #180]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012050:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012052:	2110      	movs	r1, #16
 8012054:	438b      	bics	r3, r1
 8012056:	6961      	ldr	r1, [r4, #20]
 8012058:	430b      	orrs	r3, r1
 801205a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801205c:	6823      	ldr	r3, [r4, #0]
 801205e:	055b      	lsls	r3, r3, #21
 8012060:	d54e      	bpl.n	8012100 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012062:	4a28      	ldr	r2, [pc, #160]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012064:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012066:	2140      	movs	r1, #64	; 0x40
 8012068:	438b      	bics	r3, r1
 801206a:	69a1      	ldr	r1, [r4, #24]
 801206c:	430b      	orrs	r3, r1
 801206e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012070:	2000      	movs	r0, #0
}
 8012072:	b003      	add	sp, #12
 8012074:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012076:	4b23      	ldr	r3, [pc, #140]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012078:	69da      	ldr	r2, [r3, #28]
 801207a:	2180      	movs	r1, #128	; 0x80
 801207c:	0549      	lsls	r1, r1, #21
 801207e:	430a      	orrs	r2, r1
 8012080:	61da      	str	r2, [r3, #28]
 8012082:	69db      	ldr	r3, [r3, #28]
 8012084:	400b      	ands	r3, r1
 8012086:	9301      	str	r3, [sp, #4]
 8012088:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801208a:	4a21      	ldr	r2, [pc, #132]	; (8012110 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801208c:	6811      	ldr	r1, [r2, #0]
 801208e:	2380      	movs	r3, #128	; 0x80
 8012090:	005b      	lsls	r3, r3, #1
 8012092:	430b      	orrs	r3, r1
 8012094:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012096:	f7fd ffa1 	bl	800ffdc <HAL_GetTick>
 801209a:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 801209c:	4b1c      	ldr	r3, [pc, #112]	; (8012110 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	05db      	lsls	r3, r3, #23
 80120a2:	d406      	bmi.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80120a4:	f7fd ff9a 	bl	800ffdc <HAL_GetTick>
 80120a8:	1b40      	subs	r0, r0, r5
 80120aa:	2864      	cmp	r0, #100	; 0x64
 80120ac:	d9f6      	bls.n	801209c <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 80120ae:	2003      	movs	r0, #3
 80120b0:	e7df      	b.n	8012072 <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80120b2:	4b14      	ldr	r3, [pc, #80]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80120b4:	6a1a      	ldr	r2, [r3, #32]
 80120b6:	4917      	ldr	r1, [pc, #92]	; (8012114 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80120b8:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80120ba:	6a1d      	ldr	r5, [r3, #32]
 80120bc:	2080      	movs	r0, #128	; 0x80
 80120be:	0240      	lsls	r0, r0, #9
 80120c0:	4328      	orrs	r0, r5
 80120c2:	6218      	str	r0, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80120c4:	6a18      	ldr	r0, [r3, #32]
 80120c6:	4d14      	ldr	r5, [pc, #80]	; (8012118 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80120c8:	4028      	ands	r0, r5
 80120ca:	6218      	str	r0, [r3, #32]
      RCC->BDCR = temp_reg;
 80120cc:	6219      	str	r1, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80120ce:	0792      	lsls	r2, r2, #30
 80120d0:	d407      	bmi.n	80120e2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80120d2:	4a0c      	ldr	r2, [pc, #48]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80120d4:	6a13      	ldr	r3, [r2, #32]
 80120d6:	490f      	ldr	r1, [pc, #60]	; (8012114 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80120d8:	400b      	ands	r3, r1
 80120da:	6861      	ldr	r1, [r4, #4]
 80120dc:	430b      	orrs	r3, r1
 80120de:	6213      	str	r3, [r2, #32]
 80120e0:	e794      	b.n	801200c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 80120e2:	f7fd ff7b 	bl	800ffdc <HAL_GetTick>
 80120e6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80120e8:	4b06      	ldr	r3, [pc, #24]	; (8012104 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80120ea:	6a1b      	ldr	r3, [r3, #32]
 80120ec:	079b      	lsls	r3, r3, #30
 80120ee:	d4f0      	bmi.n	80120d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80120f0:	f7fd ff74 	bl	800ffdc <HAL_GetTick>
 80120f4:	1b40      	subs	r0, r0, r5
 80120f6:	4b09      	ldr	r3, [pc, #36]	; (801211c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80120f8:	4298      	cmp	r0, r3
 80120fa:	d9f5      	bls.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 80120fc:	2003      	movs	r0, #3
 80120fe:	e7b8      	b.n	8012072 <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8012100:	2000      	movs	r0, #0
 8012102:	e7b6      	b.n	8012072 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8012104:	40021000 	.word	0x40021000
 8012108:	fffcffff 	.word	0xfffcffff
 801210c:	fff3ffff 	.word	0xfff3ffff
 8012110:	40007000 	.word	0x40007000
 8012114:	fffffcff 	.word	0xfffffcff
 8012118:	fffeffff 	.word	0xfffeffff
 801211c:	00001388 	.word	0x00001388

08012120 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012120:	4770      	bx	lr

08012122 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012122:	b570      	push	{r4, r5, r6, lr}
 8012124:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012126:	6802      	ldr	r2, [r0, #0]
 8012128:	68d3      	ldr	r3, [r2, #12]
 801212a:	21a0      	movs	r1, #160	; 0xa0
 801212c:	438b      	bics	r3, r1
 801212e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012130:	f7fd ff54 	bl	800ffdc <HAL_GetTick>
 8012134:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012136:	6823      	ldr	r3, [r4, #0]
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	069b      	lsls	r3, r3, #26
 801213c:	d408      	bmi.n	8012150 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801213e:	f7fd ff4d 	bl	800ffdc <HAL_GetTick>
 8012142:	1b40      	subs	r0, r0, r5
 8012144:	23fa      	movs	r3, #250	; 0xfa
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	4298      	cmp	r0, r3
 801214a:	d9f4      	bls.n	8012136 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 801214c:	2003      	movs	r0, #3
 801214e:	e000      	b.n	8012152 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8012150:	2000      	movs	r0, #0
}
 8012152:	bd70      	pop	{r4, r5, r6, pc}

08012154 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012158:	6802      	ldr	r2, [r0, #0]
 801215a:	68d3      	ldr	r3, [r2, #12]
 801215c:	065b      	lsls	r3, r3, #25
 801215e:	d501      	bpl.n	8012164 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012160:	2000      	movs	r0, #0
}
 8012162:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012164:	2301      	movs	r3, #1
 8012166:	425b      	negs	r3, r3
 8012168:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 801216a:	f7fd ff37 	bl	800ffdc <HAL_GetTick>
 801216e:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012170:	6823      	ldr	r3, [r4, #0]
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	065b      	lsls	r3, r3, #25
 8012176:	d408      	bmi.n	801218a <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012178:	f7fd ff30 	bl	800ffdc <HAL_GetTick>
 801217c:	1b40      	subs	r0, r0, r5
 801217e:	22fa      	movs	r2, #250	; 0xfa
 8012180:	0092      	lsls	r2, r2, #2
 8012182:	4290      	cmp	r0, r2
 8012184:	d9f4      	bls.n	8012170 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8012186:	2003      	movs	r0, #3
 8012188:	e7eb      	b.n	8012162 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 801218a:	2000      	movs	r0, #0
 801218c:	e7e9      	b.n	8012162 <RTC_EnterInitMode+0xe>
	...

08012190 <HAL_RTC_Init>:
{
 8012190:	b570      	push	{r4, r5, r6, lr}
 8012192:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012194:	d046      	beq.n	8012224 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012196:	7f43      	ldrb	r3, [r0, #29]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d013      	beq.n	80121c4 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801219c:	2302      	movs	r3, #2
 801219e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80121a0:	6823      	ldr	r3, [r4, #0]
 80121a2:	22ca      	movs	r2, #202	; 0xca
 80121a4:	625a      	str	r2, [r3, #36]	; 0x24
 80121a6:	6823      	ldr	r3, [r4, #0]
 80121a8:	3a77      	subs	r2, #119	; 0x77
 80121aa:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80121ac:	0020      	movs	r0, r4
 80121ae:	f7ff ffd1 	bl	8012154 <RTC_EnterInitMode>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d00a      	beq.n	80121cc <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80121b6:	6823      	ldr	r3, [r4, #0]
 80121b8:	22ff      	movs	r2, #255	; 0xff
 80121ba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80121bc:	2304      	movs	r3, #4
 80121be:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80121c0:	2001      	movs	r0, #1
}
 80121c2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80121c4:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80121c6:	f7ff ffab 	bl	8012120 <HAL_RTC_MspInit>
 80121ca:	e7e7      	b.n	801219c <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80121cc:	6822      	ldr	r2, [r4, #0]
 80121ce:	6893      	ldr	r3, [r2, #8]
 80121d0:	4915      	ldr	r1, [pc, #84]	; (8012228 <HAL_RTC_Init+0x98>)
 80121d2:	400b      	ands	r3, r1
 80121d4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80121d6:	6821      	ldr	r1, [r4, #0]
 80121d8:	688a      	ldr	r2, [r1, #8]
 80121da:	6863      	ldr	r3, [r4, #4]
 80121dc:	6925      	ldr	r5, [r4, #16]
 80121de:	432b      	orrs	r3, r5
 80121e0:	6965      	ldr	r5, [r4, #20]
 80121e2:	432b      	orrs	r3, r5
 80121e4:	4313      	orrs	r3, r2
 80121e6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	68e2      	ldr	r2, [r4, #12]
 80121ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80121ee:	6821      	ldr	r1, [r4, #0]
 80121f0:	690b      	ldr	r3, [r1, #16]
 80121f2:	68a2      	ldr	r2, [r4, #8]
 80121f4:	0412      	lsls	r2, r2, #16
 80121f6:	4313      	orrs	r3, r2
 80121f8:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80121fa:	6822      	ldr	r2, [r4, #0]
 80121fc:	68d3      	ldr	r3, [r2, #12]
 80121fe:	2180      	movs	r1, #128	; 0x80
 8012200:	438b      	bics	r3, r1
 8012202:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012204:	6822      	ldr	r2, [r4, #0]
 8012206:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012208:	4908      	ldr	r1, [pc, #32]	; (801222c <HAL_RTC_Init+0x9c>)
 801220a:	400b      	ands	r3, r1
 801220c:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 801220e:	6822      	ldr	r2, [r4, #0]
 8012210:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012212:	69a1      	ldr	r1, [r4, #24]
 8012214:	430b      	orrs	r3, r1
 8012216:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	22ff      	movs	r2, #255	; 0xff
 801221c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 801221e:	2301      	movs	r3, #1
 8012220:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8012222:	e7ce      	b.n	80121c2 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8012224:	2001      	movs	r0, #1
 8012226:	e7cc      	b.n	80121c2 <HAL_RTC_Init+0x32>
 8012228:	ff8fffbf 	.word	0xff8fffbf
 801222c:	fffbffff 	.word	0xfffbffff

08012230 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8012230:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8012232:	e002      	b.n	801223a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8012234:	3301      	adds	r3, #1
    Value -= 10;
 8012236:	380a      	subs	r0, #10
 8012238:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 801223a:	2809      	cmp	r0, #9
 801223c:	d8fa      	bhi.n	8012234 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 801223e:	011b      	lsls	r3, r3, #4
 8012240:	b2db      	uxtb	r3, r3
 8012242:	4318      	orrs	r0, r3
}
 8012244:	4770      	bx	lr
	...

08012248 <HAL_RTC_SetTime>:
{
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224a:	0004      	movs	r4, r0
 801224c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 801224e:	7f03      	ldrb	r3, [r0, #28]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d100      	bne.n	8012256 <HAL_RTC_SetTime+0xe>
 8012254:	e070      	b.n	8012338 <HAL_RTC_SetTime+0xf0>
 8012256:	2301      	movs	r3, #1
 8012258:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801225a:	3301      	adds	r3, #1
 801225c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801225e:	2a00      	cmp	r2, #0
 8012260:	d142      	bne.n	80122e8 <HAL_RTC_SetTime+0xa0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012262:	6803      	ldr	r3, [r0, #0]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	065b      	lsls	r3, r3, #25
 8012268:	d401      	bmi.n	801226e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 801226a:	2300      	movs	r3, #0
 801226c:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801226e:	7830      	ldrb	r0, [r6, #0]
 8012270:	f7ff ffde 	bl	8012230 <RTC_ByteToBcd2>
 8012274:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012276:	7870      	ldrb	r0, [r6, #1]
 8012278:	f7ff ffda 	bl	8012230 <RTC_ByteToBcd2>
 801227c:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801227e:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012280:	78b0      	ldrb	r0, [r6, #2]
 8012282:	f7ff ffd5 	bl	8012230 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012286:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012288:	7a33      	ldrb	r3, [r6, #8]
 801228a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801228c:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	22ca      	movs	r2, #202	; 0xca
 8012292:	625a      	str	r2, [r3, #36]	; 0x24
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	3a77      	subs	r2, #119	; 0x77
 8012298:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801229a:	0020      	movs	r0, r4
 801229c:	f7ff ff5a 	bl	8012154 <RTC_EnterInitMode>
 80122a0:	1e07      	subs	r7, r0, #0
 80122a2:	d132      	bne.n	801230a <HAL_RTC_SetTime+0xc2>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	4a25      	ldr	r2, [pc, #148]	; (801233c <HAL_RTC_SetTime+0xf4>)
 80122a8:	4015      	ands	r5, r2
 80122aa:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80122ac:	6822      	ldr	r2, [r4, #0]
 80122ae:	6893      	ldr	r3, [r2, #8]
 80122b0:	4923      	ldr	r1, [pc, #140]	; (8012340 <HAL_RTC_SetTime+0xf8>)
 80122b2:	400b      	ands	r3, r1
 80122b4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80122b6:	6821      	ldr	r1, [r4, #0]
 80122b8:	688b      	ldr	r3, [r1, #8]
 80122ba:	68f2      	ldr	r2, [r6, #12]
 80122bc:	6930      	ldr	r0, [r6, #16]
 80122be:	4302      	orrs	r2, r0
 80122c0:	4313      	orrs	r3, r2
 80122c2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80122c4:	6822      	ldr	r2, [r4, #0]
 80122c6:	68d3      	ldr	r3, [r2, #12]
 80122c8:	2180      	movs	r1, #128	; 0x80
 80122ca:	438b      	bics	r3, r1
 80122cc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80122ce:	6823      	ldr	r3, [r4, #0]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	069b      	lsls	r3, r3, #26
 80122d4:	d522      	bpl.n	801231c <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	22ff      	movs	r2, #255	; 0xff
 80122da:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80122dc:	2301      	movs	r3, #1
 80122de:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80122e0:	2300      	movs	r3, #0
 80122e2:	7723      	strb	r3, [r4, #28]
}
 80122e4:	0038      	movs	r0, r7
 80122e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80122e8:	6803      	ldr	r3, [r0, #0]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	065b      	lsls	r3, r3, #25
 80122ee:	d401      	bmi.n	80122f4 <HAL_RTC_SetTime+0xac>
      sTime->TimeFormat = 0x00;
 80122f0:	2300      	movs	r3, #0
 80122f2:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80122f4:	7835      	ldrb	r5, [r6, #0]
 80122f6:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80122f8:	7873      	ldrb	r3, [r6, #1]
 80122fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80122fc:	431d      	orrs	r5, r3
              ((uint32_t)sTime->Seconds) | \
 80122fe:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012300:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012302:	7a33      	ldrb	r3, [r6, #8]
 8012304:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012306:	431d      	orrs	r5, r3
 8012308:	e7c1      	b.n	801228e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	22ff      	movs	r2, #255	; 0xff
 801230e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012310:	2304      	movs	r3, #4
 8012312:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012314:	2300      	movs	r3, #0
 8012316:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012318:	2701      	movs	r7, #1
 801231a:	e7e3      	b.n	80122e4 <HAL_RTC_SetTime+0x9c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801231c:	0020      	movs	r0, r4
 801231e:	f7ff ff00 	bl	8012122 <HAL_RTC_WaitForSynchro>
 8012322:	2800      	cmp	r0, #0
 8012324:	d0d7      	beq.n	80122d6 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012326:	6823      	ldr	r3, [r4, #0]
 8012328:	22ff      	movs	r2, #255	; 0xff
 801232a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801232c:	2304      	movs	r3, #4
 801232e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012330:	2300      	movs	r3, #0
 8012332:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012334:	2701      	movs	r7, #1
 8012336:	e7d5      	b.n	80122e4 <HAL_RTC_SetTime+0x9c>
  __HAL_LOCK(hrtc);
 8012338:	2702      	movs	r7, #2
 801233a:	e7d3      	b.n	80122e4 <HAL_RTC_SetTime+0x9c>
 801233c:	007f7f7f 	.word	0x007f7f7f
 8012340:	fffbffff 	.word	0xfffbffff

08012344 <HAL_RTC_SetDate>:
{
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	0004      	movs	r4, r0
 8012348:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801234a:	7f03      	ldrb	r3, [r0, #28]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d061      	beq.n	8012414 <HAL_RTC_SetDate+0xd0>
 8012350:	2301      	movs	r3, #1
 8012352:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012354:	3301      	adds	r3, #1
 8012356:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012358:	2a00      	cmp	r2, #0
 801235a:	d106      	bne.n	801236a <HAL_RTC_SetDate+0x26>
 801235c:	784b      	ldrb	r3, [r1, #1]
 801235e:	06d9      	lsls	r1, r3, #27
 8012360:	d503      	bpl.n	801236a <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012362:	2110      	movs	r1, #16
 8012364:	438b      	bics	r3, r1
 8012366:	330a      	adds	r3, #10
 8012368:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 801236a:	2a00      	cmp	r2, #0
 801236c:	d130      	bne.n	80123d0 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801236e:	78f0      	ldrb	r0, [r6, #3]
 8012370:	f7ff ff5e 	bl	8012230 <RTC_ByteToBcd2>
 8012374:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012376:	7870      	ldrb	r0, [r6, #1]
 8012378:	f7ff ff5a 	bl	8012230 <RTC_ByteToBcd2>
 801237c:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801237e:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012380:	78b0      	ldrb	r0, [r6, #2]
 8012382:	f7ff ff55 	bl	8012230 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012386:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8012388:	7833      	ldrb	r3, [r6, #0]
 801238a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801238c:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801238e:	6823      	ldr	r3, [r4, #0]
 8012390:	22ca      	movs	r2, #202	; 0xca
 8012392:	625a      	str	r2, [r3, #36]	; 0x24
 8012394:	6823      	ldr	r3, [r4, #0]
 8012396:	3a77      	subs	r2, #119	; 0x77
 8012398:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801239a:	0020      	movs	r0, r4
 801239c:	f7ff feda 	bl	8012154 <RTC_EnterInitMode>
 80123a0:	1e06      	subs	r6, r0, #0
 80123a2:	d120      	bne.n	80123e6 <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	4a1c      	ldr	r2, [pc, #112]	; (8012418 <HAL_RTC_SetDate+0xd4>)
 80123a8:	4015      	ands	r5, r2
 80123aa:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80123ac:	6822      	ldr	r2, [r4, #0]
 80123ae:	68d3      	ldr	r3, [r2, #12]
 80123b0:	2180      	movs	r1, #128	; 0x80
 80123b2:	438b      	bics	r3, r1
 80123b4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80123b6:	6823      	ldr	r3, [r4, #0]
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	069b      	lsls	r3, r3, #26
 80123bc:	d51c      	bpl.n	80123f8 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	22ff      	movs	r2, #255	; 0xff
 80123c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80123c4:	2301      	movs	r3, #1
 80123c6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80123c8:	2300      	movs	r3, #0
 80123ca:	7723      	strb	r3, [r4, #28]
}
 80123cc:	0030      	movs	r0, r6
 80123ce:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80123d0:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80123d2:	78b2      	ldrb	r2, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80123d4:	78f5      	ldrb	r5, [r6, #3]
 80123d6:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80123d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80123da:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 80123dc:	4315      	orrs	r5, r2
                  (((uint32_t)sDate->WeekDay) << 13));  
 80123de:	7833      	ldrb	r3, [r6, #0]
 80123e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80123e2:	431d      	orrs	r5, r3
 80123e4:	e7d3      	b.n	801238e <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80123e6:	6823      	ldr	r3, [r4, #0]
 80123e8:	22ff      	movs	r2, #255	; 0xff
 80123ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80123ec:	2304      	movs	r3, #4
 80123ee:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80123f0:	2300      	movs	r3, #0
 80123f2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80123f4:	2601      	movs	r6, #1
 80123f6:	e7e9      	b.n	80123cc <HAL_RTC_SetDate+0x88>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80123f8:	0020      	movs	r0, r4
 80123fa:	f7ff fe92 	bl	8012122 <HAL_RTC_WaitForSynchro>
 80123fe:	2800      	cmp	r0, #0
 8012400:	d0dd      	beq.n	80123be <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012402:	6823      	ldr	r3, [r4, #0]
 8012404:	22ff      	movs	r2, #255	; 0xff
 8012406:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012408:	2304      	movs	r3, #4
 801240a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801240c:	2300      	movs	r3, #0
 801240e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012410:	2601      	movs	r6, #1
 8012412:	e7db      	b.n	80123cc <HAL_RTC_SetDate+0x88>
 __HAL_LOCK(hrtc);
 8012414:	2602      	movs	r6, #2
 8012416:	e7d9      	b.n	80123cc <HAL_RTC_SetDate+0x88>
 8012418:	00ffff3f 	.word	0x00ffff3f

0801241c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801241c:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801241e:	0901      	lsrs	r1, r0, #4
 8012420:	008b      	lsls	r3, r1, #2
 8012422:	185b      	adds	r3, r3, r1
 8012424:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012426:	200f      	movs	r0, #15
 8012428:	4010      	ands	r0, r2
 801242a:	18c0      	adds	r0, r0, r3
 801242c:	b2c0      	uxtb	r0, r0
}
 801242e:	4770      	bx	lr

08012430 <HAL_RTC_GetTime>:
{
 8012430:	b570      	push	{r4, r5, r6, lr}
 8012432:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012434:	6803      	ldr	r3, [r0, #0]
 8012436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012438:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801243a:	6803      	ldr	r3, [r0, #0]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	490f      	ldr	r1, [pc, #60]	; (801247c <HAL_RTC_GetTime+0x4c>)
 8012440:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012442:	0c19      	lsrs	r1, r3, #16
 8012444:	203f      	movs	r0, #63	; 0x3f
 8012446:	4008      	ands	r0, r1
 8012448:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801244a:	0a1e      	lsrs	r6, r3, #8
 801244c:	257f      	movs	r5, #127	; 0x7f
 801244e:	402e      	ands	r6, r5
 8012450:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012452:	401d      	ands	r5, r3
 8012454:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012456:	2340      	movs	r3, #64	; 0x40
 8012458:	400b      	ands	r3, r1
 801245a:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 801245c:	2a00      	cmp	r2, #0
 801245e:	d10a      	bne.n	8012476 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012460:	f7ff ffdc 	bl	801241c <RTC_Bcd2ToByte>
 8012464:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012466:	0030      	movs	r0, r6
 8012468:	f7ff ffd8 	bl	801241c <RTC_Bcd2ToByte>
 801246c:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 801246e:	0028      	movs	r0, r5
 8012470:	f7ff ffd4 	bl	801241c <RTC_Bcd2ToByte>
 8012474:	70a0      	strb	r0, [r4, #2]
}
 8012476:	2000      	movs	r0, #0
 8012478:	bd70      	pop	{r4, r5, r6, pc}
 801247a:	46c0      	nop			; (mov r8, r8)
 801247c:	007f7f7f 	.word	0x007f7f7f

08012480 <HAL_RTC_GetDate>:
{
 8012480:	b570      	push	{r4, r5, r6, lr}
 8012482:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012484:	6803      	ldr	r3, [r0, #0]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	490e      	ldr	r1, [pc, #56]	; (80124c4 <HAL_RTC_GetDate+0x44>)
 801248a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801248c:	0c18      	lsrs	r0, r3, #16
 801248e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012490:	0a19      	lsrs	r1, r3, #8
 8012492:	261f      	movs	r6, #31
 8012494:	400e      	ands	r6, r1
 8012496:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012498:	253f      	movs	r5, #63	; 0x3f
 801249a:	401d      	ands	r5, r3
 801249c:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801249e:	0b5b      	lsrs	r3, r3, #13
 80124a0:	2107      	movs	r1, #7
 80124a2:	400b      	ands	r3, r1
 80124a4:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80124a6:	2a00      	cmp	r2, #0
 80124a8:	d10a      	bne.n	80124c0 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80124aa:	f7ff ffb7 	bl	801241c <RTC_Bcd2ToByte>
 80124ae:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80124b0:	0030      	movs	r0, r6
 80124b2:	f7ff ffb3 	bl	801241c <RTC_Bcd2ToByte>
 80124b6:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80124b8:	0028      	movs	r0, r5
 80124ba:	f7ff ffaf 	bl	801241c <RTC_Bcd2ToByte>
 80124be:	70a0      	strb	r0, [r4, #2]
}
 80124c0:	2000      	movs	r0, #0
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	00ffff3f 	.word	0x00ffff3f

080124c8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80124c8:	6803      	ldr	r3, [r0, #0]
 80124ca:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80124cc:	0089      	lsls	r1, r1, #2
 80124ce:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80124d0:	600a      	str	r2, [r1, #0]
}
 80124d2:	4770      	bx	lr

080124d4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80124d4:	6803      	ldr	r3, [r0, #0]
 80124d6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80124d8:	0089      	lsls	r1, r1, #2
 80124da:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80124dc:	6808      	ldr	r0, [r1, #0]
}
 80124de:	4770      	bx	lr

080124e0 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80124e0:	4770      	bx	lr

080124e2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80124e2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80124e4:	2239      	movs	r2, #57	; 0x39
 80124e6:	2302      	movs	r3, #2
 80124e8:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80124ea:	6804      	ldr	r4, [r0, #0]
 80124ec:	6823      	ldr	r3, [r4, #0]
 80124ee:	2101      	movs	r1, #1
 80124f0:	430b      	orrs	r3, r1
 80124f2:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80124f4:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80124f6:	2000      	movs	r0, #0
 80124f8:	bd10      	pop	{r4, pc}
	...

080124fc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80124fc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80124fe:	4a1f      	ldr	r2, [pc, #124]	; (801257c <TIM_Base_SetConfig+0x80>)
 8012500:	4290      	cmp	r0, r2
 8012502:	d006      	beq.n	8012512 <TIM_Base_SetConfig+0x16>
 8012504:	2280      	movs	r2, #128	; 0x80
 8012506:	05d2      	lsls	r2, r2, #23
 8012508:	4290      	cmp	r0, r2
 801250a:	d002      	beq.n	8012512 <TIM_Base_SetConfig+0x16>
 801250c:	4a1c      	ldr	r2, [pc, #112]	; (8012580 <TIM_Base_SetConfig+0x84>)
 801250e:	4290      	cmp	r0, r2
 8012510:	d103      	bne.n	801251a <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012512:	2270      	movs	r2, #112	; 0x70
 8012514:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012516:	684a      	ldr	r2, [r1, #4]
 8012518:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801251a:	4a18      	ldr	r2, [pc, #96]	; (801257c <TIM_Base_SetConfig+0x80>)
 801251c:	4290      	cmp	r0, r2
 801251e:	d012      	beq.n	8012546 <TIM_Base_SetConfig+0x4a>
 8012520:	2280      	movs	r2, #128	; 0x80
 8012522:	05d2      	lsls	r2, r2, #23
 8012524:	4290      	cmp	r0, r2
 8012526:	d00e      	beq.n	8012546 <TIM_Base_SetConfig+0x4a>
 8012528:	4a15      	ldr	r2, [pc, #84]	; (8012580 <TIM_Base_SetConfig+0x84>)
 801252a:	4290      	cmp	r0, r2
 801252c:	d00b      	beq.n	8012546 <TIM_Base_SetConfig+0x4a>
 801252e:	4a15      	ldr	r2, [pc, #84]	; (8012584 <TIM_Base_SetConfig+0x88>)
 8012530:	4290      	cmp	r0, r2
 8012532:	d008      	beq.n	8012546 <TIM_Base_SetConfig+0x4a>
 8012534:	4a14      	ldr	r2, [pc, #80]	; (8012588 <TIM_Base_SetConfig+0x8c>)
 8012536:	4290      	cmp	r0, r2
 8012538:	d005      	beq.n	8012546 <TIM_Base_SetConfig+0x4a>
 801253a:	4a14      	ldr	r2, [pc, #80]	; (801258c <TIM_Base_SetConfig+0x90>)
 801253c:	4290      	cmp	r0, r2
 801253e:	d002      	beq.n	8012546 <TIM_Base_SetConfig+0x4a>
 8012540:	4a13      	ldr	r2, [pc, #76]	; (8012590 <TIM_Base_SetConfig+0x94>)
 8012542:	4290      	cmp	r0, r2
 8012544:	d103      	bne.n	801254e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012546:	4a13      	ldr	r2, [pc, #76]	; (8012594 <TIM_Base_SetConfig+0x98>)
 8012548:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801254a:	68cb      	ldr	r3, [r1, #12]
 801254c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 801254e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012550:	688b      	ldr	r3, [r1, #8]
 8012552:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012554:	680b      	ldr	r3, [r1, #0]
 8012556:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012558:	4b08      	ldr	r3, [pc, #32]	; (801257c <TIM_Base_SetConfig+0x80>)
 801255a:	4298      	cmp	r0, r3
 801255c:	d008      	beq.n	8012570 <TIM_Base_SetConfig+0x74>
 801255e:	4b0a      	ldr	r3, [pc, #40]	; (8012588 <TIM_Base_SetConfig+0x8c>)
 8012560:	4298      	cmp	r0, r3
 8012562:	d005      	beq.n	8012570 <TIM_Base_SetConfig+0x74>
 8012564:	4b09      	ldr	r3, [pc, #36]	; (801258c <TIM_Base_SetConfig+0x90>)
 8012566:	4298      	cmp	r0, r3
 8012568:	d002      	beq.n	8012570 <TIM_Base_SetConfig+0x74>
 801256a:	4b09      	ldr	r3, [pc, #36]	; (8012590 <TIM_Base_SetConfig+0x94>)
 801256c:	4298      	cmp	r0, r3
 801256e:	d101      	bne.n	8012574 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012570:	690b      	ldr	r3, [r1, #16]
 8012572:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012574:	2301      	movs	r3, #1
 8012576:	6143      	str	r3, [r0, #20]
}
 8012578:	4770      	bx	lr
 801257a:	46c0      	nop			; (mov r8, r8)
 801257c:	40012c00 	.word	0x40012c00
 8012580:	40000400 	.word	0x40000400
 8012584:	40002000 	.word	0x40002000
 8012588:	40014000 	.word	0x40014000
 801258c:	40014400 	.word	0x40014400
 8012590:	40014800 	.word	0x40014800
 8012594:	fffffcff 	.word	0xfffffcff

08012598 <HAL_TIM_Base_Init>:
{
 8012598:	b570      	push	{r4, r5, r6, lr}
 801259a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 801259c:	d014      	beq.n	80125c8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801259e:	2339      	movs	r3, #57	; 0x39
 80125a0:	5cc3      	ldrb	r3, [r0, r3]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00a      	beq.n	80125bc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80125a6:	2539      	movs	r5, #57	; 0x39
 80125a8:	2302      	movs	r3, #2
 80125aa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125ac:	0021      	movs	r1, r4
 80125ae:	c901      	ldmia	r1!, {r0}
 80125b0:	f7ff ffa4 	bl	80124fc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80125b4:	2301      	movs	r3, #1
 80125b6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80125b8:	2000      	movs	r0, #0
}
 80125ba:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80125bc:	3338      	adds	r3, #56	; 0x38
 80125be:	2200      	movs	r2, #0
 80125c0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80125c2:	f7ff ff8d 	bl	80124e0 <HAL_TIM_Base_MspInit>
 80125c6:	e7ee      	b.n	80125a6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80125c8:	2001      	movs	r0, #1
 80125ca:	e7f6      	b.n	80125ba <HAL_TIM_Base_Init+0x22>

080125cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80125cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80125ce:	2338      	movs	r3, #56	; 0x38
 80125d0:	5cc3      	ldrb	r3, [r0, r3]
 80125d2:	2b01      	cmp	r3, #1
 80125d4:	d01e      	beq.n	8012614 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80125d6:	2238      	movs	r2, #56	; 0x38
 80125d8:	2501      	movs	r5, #1
 80125da:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80125dc:	2439      	movs	r4, #57	; 0x39
 80125de:	2302      	movs	r3, #2
 80125e0:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80125e2:	6806      	ldr	r6, [r0, #0]
 80125e4:	6873      	ldr	r3, [r6, #4]
 80125e6:	2770      	movs	r7, #112	; 0x70
 80125e8:	43bb      	bics	r3, r7
 80125ea:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80125ec:	6806      	ldr	r6, [r0, #0]
 80125ee:	6873      	ldr	r3, [r6, #4]
 80125f0:	680f      	ldr	r7, [r1, #0]
 80125f2:	433b      	orrs	r3, r7
 80125f4:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80125f6:	6806      	ldr	r6, [r0, #0]
 80125f8:	68b3      	ldr	r3, [r6, #8]
 80125fa:	2780      	movs	r7, #128	; 0x80
 80125fc:	43bb      	bics	r3, r7
 80125fe:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012600:	6806      	ldr	r6, [r0, #0]
 8012602:	68b3      	ldr	r3, [r6, #8]
 8012604:	6849      	ldr	r1, [r1, #4]
 8012606:	430b      	orrs	r3, r1
 8012608:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 801260a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 801260c:	2300      	movs	r3, #0
 801260e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012610:	2000      	movs	r0, #0
}
 8012612:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012614:	2002      	movs	r0, #2
 8012616:	e7fc      	b.n	8012612 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012618 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012618:	4770      	bx	lr

0801261a <HAL_UART_DeInit>:
{
 801261a:	b570      	push	{r4, r5, r6, lr}
 801261c:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801261e:	d016      	beq.n	801264e <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012620:	2669      	movs	r6, #105	; 0x69
 8012622:	2302      	movs	r3, #2
 8012624:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012626:	6802      	ldr	r2, [r0, #0]
 8012628:	6813      	ldr	r3, [r2, #0]
 801262a:	2101      	movs	r1, #1
 801262c:	438b      	bics	r3, r1
 801262e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012630:	6803      	ldr	r3, [r0, #0]
 8012632:	2500      	movs	r5, #0
 8012634:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012636:	6803      	ldr	r3, [r0, #0]
 8012638:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801263a:	6803      	ldr	r3, [r0, #0]
 801263c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801263e:	f7ff ffeb 	bl	8012618 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012642:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012644:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012646:	2368      	movs	r3, #104	; 0x68
 8012648:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801264a:	2000      	movs	r0, #0
}
 801264c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 801264e:	2001      	movs	r0, #1
 8012650:	e7fc      	b.n	801264c <HAL_UART_DeInit+0x32>

08012652 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012652:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012654:	2369      	movs	r3, #105	; 0x69
 8012656:	5cc3      	ldrb	r3, [r0, r3]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d003      	beq.n	8012664 <HAL_UART_Transmit_IT+0x12>
 801265c:	2369      	movs	r3, #105	; 0x69
 801265e:	5cc3      	ldrb	r3, [r0, r3]
 8012660:	2b22      	cmp	r3, #34	; 0x22
 8012662:	d12b      	bne.n	80126bc <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8012664:	2900      	cmp	r1, #0
 8012666:	d02b      	beq.n	80126c0 <HAL_UART_Transmit_IT+0x6e>
 8012668:	2a00      	cmp	r2, #0
 801266a:	d02b      	beq.n	80126c4 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801266c:	2368      	movs	r3, #104	; 0x68
 801266e:	5cc3      	ldrb	r3, [r0, r3]
 8012670:	2b01      	cmp	r3, #1
 8012672:	d029      	beq.n	80126c8 <HAL_UART_Transmit_IT+0x76>
 8012674:	2368      	movs	r3, #104	; 0x68
 8012676:	2401      	movs	r4, #1
 8012678:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 801267a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 801267c:	3b18      	subs	r3, #24
 801267e:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012680:	3302      	adds	r3, #2
 8012682:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012684:	2300      	movs	r3, #0
 8012686:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012688:	3369      	adds	r3, #105	; 0x69
 801268a:	5cc3      	ldrb	r3, [r0, r3]
 801268c:	2b22      	cmp	r3, #34	; 0x22
 801268e:	d011      	beq.n	80126b4 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012690:	2369      	movs	r3, #105	; 0x69
 8012692:	2212      	movs	r2, #18
 8012694:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012696:	6802      	ldr	r2, [r0, #0]
 8012698:	6893      	ldr	r3, [r2, #8]
 801269a:	2101      	movs	r1, #1
 801269c:	430b      	orrs	r3, r1
 801269e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80126a0:	2368      	movs	r3, #104	; 0x68
 80126a2:	2200      	movs	r2, #0
 80126a4:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80126a6:	6802      	ldr	r2, [r0, #0]
 80126a8:	6813      	ldr	r3, [r2, #0]
 80126aa:	317f      	adds	r1, #127	; 0x7f
 80126ac:	430b      	orrs	r3, r1
 80126ae:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80126b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80126b2:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80126b4:	3347      	adds	r3, #71	; 0x47
 80126b6:	2232      	movs	r2, #50	; 0x32
 80126b8:	54c2      	strb	r2, [r0, r3]
 80126ba:	e7ec      	b.n	8012696 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 80126bc:	2002      	movs	r0, #2
 80126be:	e7f8      	b.n	80126b2 <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 80126c0:	2001      	movs	r0, #1
 80126c2:	e7f6      	b.n	80126b2 <HAL_UART_Transmit_IT+0x60>
 80126c4:	2001      	movs	r0, #1
 80126c6:	e7f4      	b.n	80126b2 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 80126c8:	2002      	movs	r0, #2
 80126ca:	e7f2      	b.n	80126b2 <HAL_UART_Transmit_IT+0x60>

080126cc <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80126cc:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80126ce:	2369      	movs	r3, #105	; 0x69
 80126d0:	5cc3      	ldrb	r3, [r0, r3]
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d003      	beq.n	80126de <HAL_UART_Receive_IT+0x12>
 80126d6:	2369      	movs	r3, #105	; 0x69
 80126d8:	5cc3      	ldrb	r3, [r0, r3]
 80126da:	2b12      	cmp	r3, #18
 80126dc:	d15d      	bne.n	801279a <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 80126de:	2900      	cmp	r1, #0
 80126e0:	d05d      	beq.n	801279e <HAL_UART_Receive_IT+0xd2>
 80126e2:	2a00      	cmp	r2, #0
 80126e4:	d05d      	beq.n	80127a2 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80126e6:	2368      	movs	r3, #104	; 0x68
 80126e8:	5cc3      	ldrb	r3, [r0, r3]
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d05b      	beq.n	80127a6 <HAL_UART_Receive_IT+0xda>
 80126ee:	2368      	movs	r3, #104	; 0x68
 80126f0:	2401      	movs	r4, #1
 80126f2:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 80126f4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80126f6:	3b10      	subs	r3, #16
 80126f8:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80126fa:	3302      	adds	r3, #2
 80126fc:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80126fe:	6883      	ldr	r3, [r0, #8]
 8012700:	2280      	movs	r2, #128	; 0x80
 8012702:	0152      	lsls	r2, r2, #5
 8012704:	4293      	cmp	r3, r2
 8012706:	d008      	beq.n	801271a <HAL_UART_Receive_IT+0x4e>
 8012708:	2b00      	cmp	r3, #0
 801270a:	d115      	bne.n	8012738 <HAL_UART_Receive_IT+0x6c>
 801270c:	6903      	ldr	r3, [r0, #16]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d10e      	bne.n	8012730 <HAL_UART_Receive_IT+0x64>
 8012712:	335c      	adds	r3, #92	; 0x5c
 8012714:	22ff      	movs	r2, #255	; 0xff
 8012716:	52c2      	strh	r2, [r0, r3]
 8012718:	e012      	b.n	8012740 <HAL_UART_Receive_IT+0x74>
 801271a:	6903      	ldr	r3, [r0, #16]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d103      	bne.n	8012728 <HAL_UART_Receive_IT+0x5c>
 8012720:	335c      	adds	r3, #92	; 0x5c
 8012722:	4a22      	ldr	r2, [pc, #136]	; (80127ac <HAL_UART_Receive_IT+0xe0>)
 8012724:	52c2      	strh	r2, [r0, r3]
 8012726:	e00b      	b.n	8012740 <HAL_UART_Receive_IT+0x74>
 8012728:	235c      	movs	r3, #92	; 0x5c
 801272a:	22ff      	movs	r2, #255	; 0xff
 801272c:	52c2      	strh	r2, [r0, r3]
 801272e:	e007      	b.n	8012740 <HAL_UART_Receive_IT+0x74>
 8012730:	235c      	movs	r3, #92	; 0x5c
 8012732:	227f      	movs	r2, #127	; 0x7f
 8012734:	52c2      	strh	r2, [r0, r3]
 8012736:	e003      	b.n	8012740 <HAL_UART_Receive_IT+0x74>
 8012738:	2280      	movs	r2, #128	; 0x80
 801273a:	0552      	lsls	r2, r2, #21
 801273c:	4293      	cmp	r3, r2
 801273e:	d01d      	beq.n	801277c <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012740:	2300      	movs	r3, #0
 8012742:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012744:	3369      	adds	r3, #105	; 0x69
 8012746:	5cc3      	ldrb	r3, [r0, r3]
 8012748:	2b12      	cmp	r3, #18
 801274a:	d022      	beq.n	8012792 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 801274c:	2369      	movs	r3, #105	; 0x69
 801274e:	2222      	movs	r2, #34	; 0x22
 8012750:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012752:	6802      	ldr	r2, [r0, #0]
 8012754:	6811      	ldr	r1, [r2, #0]
 8012756:	2380      	movs	r3, #128	; 0x80
 8012758:	005b      	lsls	r3, r3, #1
 801275a:	430b      	orrs	r3, r1
 801275c:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801275e:	6802      	ldr	r2, [r0, #0]
 8012760:	6893      	ldr	r3, [r2, #8]
 8012762:	2101      	movs	r1, #1
 8012764:	430b      	orrs	r3, r1
 8012766:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012768:	2368      	movs	r3, #104	; 0x68
 801276a:	2200      	movs	r2, #0
 801276c:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801276e:	6802      	ldr	r2, [r0, #0]
 8012770:	6813      	ldr	r3, [r2, #0]
 8012772:	311f      	adds	r1, #31
 8012774:	430b      	orrs	r3, r1
 8012776:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012778:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801277a:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 801277c:	6903      	ldr	r3, [r0, #16]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d103      	bne.n	801278a <HAL_UART_Receive_IT+0xbe>
 8012782:	335c      	adds	r3, #92	; 0x5c
 8012784:	227f      	movs	r2, #127	; 0x7f
 8012786:	52c2      	strh	r2, [r0, r3]
 8012788:	e7da      	b.n	8012740 <HAL_UART_Receive_IT+0x74>
 801278a:	235c      	movs	r3, #92	; 0x5c
 801278c:	223f      	movs	r2, #63	; 0x3f
 801278e:	52c2      	strh	r2, [r0, r3]
 8012790:	e7d6      	b.n	8012740 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012792:	3357      	adds	r3, #87	; 0x57
 8012794:	2232      	movs	r2, #50	; 0x32
 8012796:	54c2      	strb	r2, [r0, r3]
 8012798:	e7db      	b.n	8012752 <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 801279a:	2002      	movs	r0, #2
 801279c:	e7ed      	b.n	801277a <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 801279e:	2001      	movs	r0, #1
 80127a0:	e7eb      	b.n	801277a <HAL_UART_Receive_IT+0xae>
 80127a2:	2001      	movs	r0, #1
 80127a4:	e7e9      	b.n	801277a <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 80127a6:	2002      	movs	r0, #2
 80127a8:	e7e7      	b.n	801277a <HAL_UART_Receive_IT+0xae>
 80127aa:	46c0      	nop			; (mov r8, r8)
 80127ac:	000001ff 	.word	0x000001ff

080127b0 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	0004      	movs	r4, r0
 80127b4:	000d      	movs	r5, r1
 80127b6:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80127b8:	2269      	movs	r2, #105	; 0x69
 80127ba:	5c82      	ldrb	r2, [r0, r2]
 80127bc:	2a01      	cmp	r2, #1
 80127be:	d003      	beq.n	80127c8 <HAL_UART_Receive_DMA+0x18>
 80127c0:	2269      	movs	r2, #105	; 0x69
 80127c2:	5c82      	ldrb	r2, [r0, r2]
 80127c4:	2a12      	cmp	r2, #18
 80127c6:	d133      	bne.n	8012830 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 80127c8:	2d00      	cmp	r5, #0
 80127ca:	d033      	beq.n	8012834 <HAL_UART_Receive_DMA+0x84>
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d033      	beq.n	8012838 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80127d0:	2268      	movs	r2, #104	; 0x68
 80127d2:	5ca2      	ldrb	r2, [r4, r2]
 80127d4:	2a01      	cmp	r2, #1
 80127d6:	d031      	beq.n	801283c <HAL_UART_Receive_DMA+0x8c>
 80127d8:	2268      	movs	r2, #104	; 0x68
 80127da:	2101      	movs	r1, #1
 80127dc:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 80127de:	6565      	str	r5, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80127e0:	3a10      	subs	r2, #16
 80127e2:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127e4:	2200      	movs	r2, #0
 80127e6:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80127e8:	3269      	adds	r2, #105	; 0x69
 80127ea:	5ca2      	ldrb	r2, [r4, r2]
 80127ec:	2a12      	cmp	r2, #18
 80127ee:	d01b      	beq.n	8012828 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80127f0:	2269      	movs	r2, #105	; 0x69
 80127f2:	2122      	movs	r1, #34	; 0x22
 80127f4:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80127f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127f8:	4911      	ldr	r1, [pc, #68]	; (8012840 <HAL_UART_Receive_DMA+0x90>)
 80127fa:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80127fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127fe:	4911      	ldr	r1, [pc, #68]	; (8012844 <HAL_UART_Receive_DMA+0x94>)
 8012800:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012804:	4910      	ldr	r1, [pc, #64]	; (8012848 <HAL_UART_Receive_DMA+0x98>)
 8012806:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012808:	6821      	ldr	r1, [r4, #0]
 801280a:	3124      	adds	r1, #36	; 0x24
 801280c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801280e:	002a      	movs	r2, r5
 8012810:	f7fe f89a 	bl	8010948 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012814:	6822      	ldr	r2, [r4, #0]
 8012816:	6893      	ldr	r3, [r2, #8]
 8012818:	2140      	movs	r1, #64	; 0x40
 801281a:	430b      	orrs	r3, r1
 801281c:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 801281e:	2368      	movs	r3, #104	; 0x68
 8012820:	2200      	movs	r2, #0
 8012822:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012824:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012826:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012828:	3257      	adds	r2, #87	; 0x57
 801282a:	3131      	adds	r1, #49	; 0x31
 801282c:	54a1      	strb	r1, [r4, r2]
 801282e:	e7e2      	b.n	80127f6 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8012830:	2002      	movs	r0, #2
 8012832:	e7f8      	b.n	8012826 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8012834:	2001      	movs	r0, #1
 8012836:	e7f6      	b.n	8012826 <HAL_UART_Receive_DMA+0x76>
 8012838:	2001      	movs	r0, #1
 801283a:	e7f4      	b.n	8012826 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 801283c:	2002      	movs	r0, #2
 801283e:	e7f2      	b.n	8012826 <HAL_UART_Receive_DMA+0x76>
 8012840:	0801284d 	.word	0x0801284d
 8012844:	08012889 	.word	0x08012889
 8012848:	08012893 	.word	0x08012893

0801284c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801284c:	b510      	push	{r4, lr}
 801284e:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012850:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	069b      	lsls	r3, r3, #26
 8012858:	d40e      	bmi.n	8012878 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 801285a:	235a      	movs	r3, #90	; 0x5a
 801285c:	2200      	movs	r2, #0
 801285e:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012860:	6802      	ldr	r2, [r0, #0]
 8012862:	6893      	ldr	r3, [r2, #8]
 8012864:	2140      	movs	r1, #64	; 0x40
 8012866:	438b      	bics	r3, r1
 8012868:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801286a:	2369      	movs	r3, #105	; 0x69
 801286c:	5cc3      	ldrb	r3, [r0, r3]
 801286e:	2b32      	cmp	r3, #50	; 0x32
 8012870:	d005      	beq.n	801287e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012872:	2369      	movs	r3, #105	; 0x69
 8012874:	2201      	movs	r2, #1
 8012876:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012878:	f7fa fe4a 	bl	800d510 <HAL_UART_RxCpltCallback>
}
 801287c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801287e:	3337      	adds	r3, #55	; 0x37
 8012880:	2212      	movs	r2, #18
 8012882:	54c2      	strb	r2, [r0, r3]
 8012884:	e7f8      	b.n	8012878 <UART_DMAReceiveCplt+0x2c>

08012886 <HAL_UART_RxHalfCpltCallback>:
}
 8012886:	4770      	bx	lr

08012888 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012888:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 801288a:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 801288c:	f7ff fffb 	bl	8012886 <HAL_UART_RxHalfCpltCallback>
}
 8012890:	bd10      	pop	{r4, pc}

08012892 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012892:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012894:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8012896:	2300      	movs	r3, #0
 8012898:	225a      	movs	r2, #90	; 0x5a
 801289a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801289c:	3a08      	subs	r2, #8
 801289e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80128a0:	3369      	adds	r3, #105	; 0x69
 80128a2:	3a51      	subs	r2, #81	; 0x51
 80128a4:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80128a6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80128a8:	320f      	adds	r2, #15
 80128aa:	4313      	orrs	r3, r2
 80128ac:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80128ae:	f7fa fe0b 	bl	800d4c8 <HAL_UART_ErrorCallback>
}
 80128b2:	bd10      	pop	{r4, pc}

080128b4 <UART_SetConfig>:
{
 80128b4:	b570      	push	{r4, r5, r6, lr}
 80128b6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128b8:	6883      	ldr	r3, [r0, #8]
 80128ba:	6902      	ldr	r2, [r0, #16]
 80128bc:	4313      	orrs	r3, r2
 80128be:	6942      	ldr	r2, [r0, #20]
 80128c0:	4313      	orrs	r3, r2
 80128c2:	69c2      	ldr	r2, [r0, #28]
 80128c4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80128c6:	6801      	ldr	r1, [r0, #0]
 80128c8:	680a      	ldr	r2, [r1, #0]
 80128ca:	4886      	ldr	r0, [pc, #536]	; (8012ae4 <UART_SetConfig+0x230>)
 80128cc:	4002      	ands	r2, r0
 80128ce:	4313      	orrs	r3, r2
 80128d0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80128d2:	6822      	ldr	r2, [r4, #0]
 80128d4:	6853      	ldr	r3, [r2, #4]
 80128d6:	4984      	ldr	r1, [pc, #528]	; (8012ae8 <UART_SetConfig+0x234>)
 80128d8:	400b      	ands	r3, r1
 80128da:	68e1      	ldr	r1, [r4, #12]
 80128dc:	430b      	orrs	r3, r1
 80128de:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80128e0:	69a2      	ldr	r2, [r4, #24]
 80128e2:	6a23      	ldr	r3, [r4, #32]
 80128e4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80128e6:	6821      	ldr	r1, [r4, #0]
 80128e8:	688b      	ldr	r3, [r1, #8]
 80128ea:	4880      	ldr	r0, [pc, #512]	; (8012aec <UART_SetConfig+0x238>)
 80128ec:	4003      	ands	r3, r0
 80128ee:	4313      	orrs	r3, r2
 80128f0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80128f2:	6826      	ldr	r6, [r4, #0]
 80128f4:	4b7e      	ldr	r3, [pc, #504]	; (8012af0 <UART_SetConfig+0x23c>)
 80128f6:	429e      	cmp	r6, r3
 80128f8:	d01a      	beq.n	8012930 <UART_SetConfig+0x7c>
 80128fa:	4b7e      	ldr	r3, [pc, #504]	; (8012af4 <UART_SetConfig+0x240>)
 80128fc:	429e      	cmp	r6, r3
 80128fe:	d040      	beq.n	8012982 <UART_SetConfig+0xce>
 8012900:	4b7d      	ldr	r3, [pc, #500]	; (8012af8 <UART_SetConfig+0x244>)
 8012902:	429e      	cmp	r6, r3
 8012904:	d055      	beq.n	80129b2 <UART_SetConfig+0xfe>
 8012906:	4b7d      	ldr	r3, [pc, #500]	; (8012afc <UART_SetConfig+0x248>)
 8012908:	429e      	cmp	r6, r3
 801290a:	d100      	bne.n	801290e <UART_SetConfig+0x5a>
 801290c:	e083      	b.n	8012a16 <UART_SetConfig+0x162>
 801290e:	4b7c      	ldr	r3, [pc, #496]	; (8012b00 <UART_SetConfig+0x24c>)
 8012910:	429e      	cmp	r6, r3
 8012912:	d100      	bne.n	8012916 <UART_SetConfig+0x62>
 8012914:	e081      	b.n	8012a1a <UART_SetConfig+0x166>
 8012916:	4b7b      	ldr	r3, [pc, #492]	; (8012b04 <UART_SetConfig+0x250>)
 8012918:	429e      	cmp	r6, r3
 801291a:	d100      	bne.n	801291e <UART_SetConfig+0x6a>
 801291c:	e07f      	b.n	8012a1e <UART_SetConfig+0x16a>
 801291e:	4b7a      	ldr	r3, [pc, #488]	; (8012b08 <UART_SetConfig+0x254>)
 8012920:	429e      	cmp	r6, r3
 8012922:	d100      	bne.n	8012926 <UART_SetConfig+0x72>
 8012924:	e07d      	b.n	8012a22 <UART_SetConfig+0x16e>
 8012926:	4b79      	ldr	r3, [pc, #484]	; (8012b0c <UART_SetConfig+0x258>)
 8012928:	429e      	cmp	r6, r3
 801292a:	d05a      	beq.n	80129e2 <UART_SetConfig+0x12e>
 801292c:	2510      	movs	r5, #16
 801292e:	e00b      	b.n	8012948 <UART_SetConfig+0x94>
 8012930:	4b77      	ldr	r3, [pc, #476]	; (8012b10 <UART_SetConfig+0x25c>)
 8012932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012934:	2303      	movs	r3, #3
 8012936:	4013      	ands	r3, r2
 8012938:	2b02      	cmp	r3, #2
 801293a:	d054      	beq.n	80129e6 <UART_SetConfig+0x132>
 801293c:	d81d      	bhi.n	801297a <UART_SetConfig+0xc6>
 801293e:	2b00      	cmp	r3, #0
 8012940:	d053      	beq.n	80129ea <UART_SetConfig+0x136>
 8012942:	2b01      	cmp	r3, #1
 8012944:	d153      	bne.n	80129ee <UART_SetConfig+0x13a>
 8012946:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012948:	69e2      	ldr	r2, [r4, #28]
 801294a:	2380      	movs	r3, #128	; 0x80
 801294c:	021b      	lsls	r3, r3, #8
 801294e:	429a      	cmp	r2, r3
 8012950:	d069      	beq.n	8012a26 <UART_SetConfig+0x172>
    switch (clocksource)
 8012952:	2d04      	cmp	r5, #4
 8012954:	d100      	bne.n	8012958 <UART_SetConfig+0xa4>
 8012956:	e0b9      	b.n	8012acc <UART_SetConfig+0x218>
 8012958:	d900      	bls.n	801295c <UART_SetConfig+0xa8>
 801295a:	e09f      	b.n	8012a9c <UART_SetConfig+0x1e8>
 801295c:	2d00      	cmp	r5, #0
 801295e:	d100      	bne.n	8012962 <UART_SetConfig+0xae>
 8012960:	e0aa      	b.n	8012ab8 <UART_SetConfig+0x204>
 8012962:	2d02      	cmp	r5, #2
 8012964:	d000      	beq.n	8012968 <UART_SetConfig+0xb4>
 8012966:	e097      	b.n	8012a98 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012968:	6861      	ldr	r1, [r4, #4]
 801296a:	486a      	ldr	r0, [pc, #424]	; (8012b14 <UART_SetConfig+0x260>)
 801296c:	f7ed fbf0 	bl	8000150 <__udivsi3>
 8012970:	0400      	lsls	r0, r0, #16
 8012972:	0c00      	lsrs	r0, r0, #16
 8012974:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012976:	2500      	movs	r5, #0
        break;
 8012978:	e07b      	b.n	8012a72 <UART_SetConfig+0x1be>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801297a:	2b03      	cmp	r3, #3
 801297c:	d139      	bne.n	80129f2 <UART_SetConfig+0x13e>
 801297e:	2502      	movs	r5, #2
 8012980:	e7e2      	b.n	8012948 <UART_SetConfig+0x94>
 8012982:	4b63      	ldr	r3, [pc, #396]	; (8012b10 <UART_SetConfig+0x25c>)
 8012984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012986:	22c0      	movs	r2, #192	; 0xc0
 8012988:	0292      	lsls	r2, r2, #10
 801298a:	4013      	ands	r3, r2
 801298c:	2280      	movs	r2, #128	; 0x80
 801298e:	0292      	lsls	r2, r2, #10
 8012990:	4293      	cmp	r3, r2
 8012992:	d030      	beq.n	80129f6 <UART_SetConfig+0x142>
 8012994:	d807      	bhi.n	80129a6 <UART_SetConfig+0xf2>
 8012996:	2b00      	cmp	r3, #0
 8012998:	d02f      	beq.n	80129fa <UART_SetConfig+0x146>
 801299a:	2280      	movs	r2, #128	; 0x80
 801299c:	0252      	lsls	r2, r2, #9
 801299e:	4293      	cmp	r3, r2
 80129a0:	d12d      	bne.n	80129fe <UART_SetConfig+0x14a>
 80129a2:	2504      	movs	r5, #4
 80129a4:	e7d0      	b.n	8012948 <UART_SetConfig+0x94>
 80129a6:	22c0      	movs	r2, #192	; 0xc0
 80129a8:	0292      	lsls	r2, r2, #10
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d129      	bne.n	8012a02 <UART_SetConfig+0x14e>
 80129ae:	2502      	movs	r5, #2
 80129b0:	e7ca      	b.n	8012948 <UART_SetConfig+0x94>
 80129b2:	4b57      	ldr	r3, [pc, #348]	; (8012b10 <UART_SetConfig+0x25c>)
 80129b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129b6:	22c0      	movs	r2, #192	; 0xc0
 80129b8:	0312      	lsls	r2, r2, #12
 80129ba:	4013      	ands	r3, r2
 80129bc:	2280      	movs	r2, #128	; 0x80
 80129be:	0312      	lsls	r2, r2, #12
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d020      	beq.n	8012a06 <UART_SetConfig+0x152>
 80129c4:	d807      	bhi.n	80129d6 <UART_SetConfig+0x122>
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d01f      	beq.n	8012a0a <UART_SetConfig+0x156>
 80129ca:	2280      	movs	r2, #128	; 0x80
 80129cc:	02d2      	lsls	r2, r2, #11
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d11d      	bne.n	8012a0e <UART_SetConfig+0x15a>
 80129d2:	2504      	movs	r5, #4
 80129d4:	e7b8      	b.n	8012948 <UART_SetConfig+0x94>
 80129d6:	22c0      	movs	r2, #192	; 0xc0
 80129d8:	0312      	lsls	r2, r2, #12
 80129da:	4293      	cmp	r3, r2
 80129dc:	d119      	bne.n	8012a12 <UART_SetConfig+0x15e>
 80129de:	2502      	movs	r5, #2
 80129e0:	e7b2      	b.n	8012948 <UART_SetConfig+0x94>
 80129e2:	2500      	movs	r5, #0
 80129e4:	e7b0      	b.n	8012948 <UART_SetConfig+0x94>
 80129e6:	2508      	movs	r5, #8
 80129e8:	e7ae      	b.n	8012948 <UART_SetConfig+0x94>
 80129ea:	2500      	movs	r5, #0
 80129ec:	e7ac      	b.n	8012948 <UART_SetConfig+0x94>
 80129ee:	2510      	movs	r5, #16
 80129f0:	e7aa      	b.n	8012948 <UART_SetConfig+0x94>
 80129f2:	2510      	movs	r5, #16
 80129f4:	e7a8      	b.n	8012948 <UART_SetConfig+0x94>
 80129f6:	2508      	movs	r5, #8
 80129f8:	e7a6      	b.n	8012948 <UART_SetConfig+0x94>
 80129fa:	2500      	movs	r5, #0
 80129fc:	e7a4      	b.n	8012948 <UART_SetConfig+0x94>
 80129fe:	2510      	movs	r5, #16
 8012a00:	e7a2      	b.n	8012948 <UART_SetConfig+0x94>
 8012a02:	2510      	movs	r5, #16
 8012a04:	e7a0      	b.n	8012948 <UART_SetConfig+0x94>
 8012a06:	2508      	movs	r5, #8
 8012a08:	e79e      	b.n	8012948 <UART_SetConfig+0x94>
 8012a0a:	2500      	movs	r5, #0
 8012a0c:	e79c      	b.n	8012948 <UART_SetConfig+0x94>
 8012a0e:	2510      	movs	r5, #16
 8012a10:	e79a      	b.n	8012948 <UART_SetConfig+0x94>
 8012a12:	2510      	movs	r5, #16
 8012a14:	e798      	b.n	8012948 <UART_SetConfig+0x94>
 8012a16:	2500      	movs	r5, #0
 8012a18:	e796      	b.n	8012948 <UART_SetConfig+0x94>
 8012a1a:	2500      	movs	r5, #0
 8012a1c:	e794      	b.n	8012948 <UART_SetConfig+0x94>
 8012a1e:	2500      	movs	r5, #0
 8012a20:	e792      	b.n	8012948 <UART_SetConfig+0x94>
 8012a22:	2500      	movs	r5, #0
 8012a24:	e790      	b.n	8012948 <UART_SetConfig+0x94>
    switch (clocksource)
 8012a26:	2d04      	cmp	r5, #4
 8012a28:	d02d      	beq.n	8012a86 <UART_SetConfig+0x1d2>
 8012a2a:	d80d      	bhi.n	8012a48 <UART_SetConfig+0x194>
 8012a2c:	2d00      	cmp	r5, #0
 8012a2e:	d022      	beq.n	8012a76 <UART_SetConfig+0x1c2>
 8012a30:	2d02      	cmp	r5, #2
 8012a32:	d106      	bne.n	8012a42 <UART_SetConfig+0x18e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012a34:	6861      	ldr	r1, [r4, #4]
 8012a36:	4838      	ldr	r0, [pc, #224]	; (8012b18 <UART_SetConfig+0x264>)
 8012a38:	f7ed fb8a 	bl	8000150 <__udivsi3>
 8012a3c:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a3e:	2500      	movs	r5, #0
        break;
 8012a40:	e00e      	b.n	8012a60 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012a42:	2501      	movs	r5, #1
 8012a44:	2000      	movs	r0, #0
 8012a46:	e00b      	b.n	8012a60 <UART_SetConfig+0x1ac>
 8012a48:	2d08      	cmp	r5, #8
 8012a4a:	d107      	bne.n	8012a5c <UART_SetConfig+0x1a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012a4c:	6861      	ldr	r1, [r4, #4]
 8012a4e:	2080      	movs	r0, #128	; 0x80
 8012a50:	0240      	lsls	r0, r0, #9
 8012a52:	f7ed fb7d 	bl	8000150 <__udivsi3>
 8012a56:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a58:	2500      	movs	r5, #0
        break;
 8012a5a:	e001      	b.n	8012a60 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012a5c:	2501      	movs	r5, #1
 8012a5e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012a60:	230f      	movs	r3, #15
 8012a62:	0002      	movs	r2, r0
 8012a64:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8012a66:	1040      	asrs	r0, r0, #1
 8012a68:	3b08      	subs	r3, #8
 8012a6a:	4003      	ands	r3, r0
 8012a6c:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8012a6e:	6822      	ldr	r2, [r4, #0]
 8012a70:	60d3      	str	r3, [r2, #12]
}
 8012a72:	0028      	movs	r0, r5
 8012a74:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012a76:	f7ff faab 	bl	8011fd0 <HAL_RCC_GetPCLK1Freq>
 8012a7a:	0040      	lsls	r0, r0, #1
 8012a7c:	6861      	ldr	r1, [r4, #4]
 8012a7e:	f7ed fb67 	bl	8000150 <__udivsi3>
 8012a82:	b280      	uxth	r0, r0
        break;
 8012a84:	e7ec      	b.n	8012a60 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012a86:	f7ff fa45 	bl	8011f14 <HAL_RCC_GetSysClockFreq>
 8012a8a:	0040      	lsls	r0, r0, #1
 8012a8c:	6861      	ldr	r1, [r4, #4]
 8012a8e:	f7ed fb5f 	bl	8000150 <__udivsi3>
 8012a92:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a94:	2500      	movs	r5, #0
        break;
 8012a96:	e7e3      	b.n	8012a60 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012a98:	2501      	movs	r5, #1
 8012a9a:	e7ea      	b.n	8012a72 <UART_SetConfig+0x1be>
 8012a9c:	2d08      	cmp	r5, #8
 8012a9e:	d109      	bne.n	8012ab4 <UART_SetConfig+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012aa0:	6861      	ldr	r1, [r4, #4]
 8012aa2:	2080      	movs	r0, #128	; 0x80
 8012aa4:	0200      	lsls	r0, r0, #8
 8012aa6:	f7ed fb53 	bl	8000150 <__udivsi3>
 8012aaa:	0400      	lsls	r0, r0, #16
 8012aac:	0c00      	lsrs	r0, r0, #16
 8012aae:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ab0:	2500      	movs	r5, #0
        break;
 8012ab2:	e7de      	b.n	8012a72 <UART_SetConfig+0x1be>
    switch (clocksource)
 8012ab4:	2501      	movs	r5, #1
 8012ab6:	e7dc      	b.n	8012a72 <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012ab8:	f7ff fa8a 	bl	8011fd0 <HAL_RCC_GetPCLK1Freq>
 8012abc:	6861      	ldr	r1, [r4, #4]
 8012abe:	f7ed fb47 	bl	8000150 <__udivsi3>
 8012ac2:	6823      	ldr	r3, [r4, #0]
 8012ac4:	0400      	lsls	r0, r0, #16
 8012ac6:	0c00      	lsrs	r0, r0, #16
 8012ac8:	60d8      	str	r0, [r3, #12]
        break;
 8012aca:	e7d2      	b.n	8012a72 <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012acc:	f7ff fa22 	bl	8011f14 <HAL_RCC_GetSysClockFreq>
 8012ad0:	6861      	ldr	r1, [r4, #4]
 8012ad2:	f7ed fb3d 	bl	8000150 <__udivsi3>
 8012ad6:	6823      	ldr	r3, [r4, #0]
 8012ad8:	0400      	lsls	r0, r0, #16
 8012ada:	0c00      	lsrs	r0, r0, #16
 8012adc:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ade:	2500      	movs	r5, #0
        break;
 8012ae0:	e7c7      	b.n	8012a72 <UART_SetConfig+0x1be>
 8012ae2:	46c0      	nop			; (mov r8, r8)
 8012ae4:	efff69f3 	.word	0xefff69f3
 8012ae8:	ffffcfff 	.word	0xffffcfff
 8012aec:	fffff4ff 	.word	0xfffff4ff
 8012af0:	40013800 	.word	0x40013800
 8012af4:	40004400 	.word	0x40004400
 8012af8:	40004800 	.word	0x40004800
 8012afc:	40004c00 	.word	0x40004c00
 8012b00:	40005000 	.word	0x40005000
 8012b04:	40011400 	.word	0x40011400
 8012b08:	40011800 	.word	0x40011800
 8012b0c:	40011c00 	.word	0x40011c00
 8012b10:	40021000 	.word	0x40021000
 8012b14:	007a1200 	.word	0x007a1200
 8012b18:	00f42400 	.word	0x00f42400

08012b1c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012b1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b1e:	07db      	lsls	r3, r3, #31
 8012b20:	d506      	bpl.n	8012b30 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012b22:	6802      	ldr	r2, [r0, #0]
 8012b24:	6853      	ldr	r3, [r2, #4]
 8012b26:	492c      	ldr	r1, [pc, #176]	; (8012bd8 <UART_AdvFeatureConfig+0xbc>)
 8012b28:	400b      	ands	r3, r1
 8012b2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012b2c:	430b      	orrs	r3, r1
 8012b2e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b32:	079b      	lsls	r3, r3, #30
 8012b34:	d506      	bpl.n	8012b44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012b36:	6802      	ldr	r2, [r0, #0]
 8012b38:	6853      	ldr	r3, [r2, #4]
 8012b3a:	4928      	ldr	r1, [pc, #160]	; (8012bdc <UART_AdvFeatureConfig+0xc0>)
 8012b3c:	400b      	ands	r3, r1
 8012b3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012b40:	430b      	orrs	r3, r1
 8012b42:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012b44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b46:	075b      	lsls	r3, r3, #29
 8012b48:	d506      	bpl.n	8012b58 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012b4a:	6802      	ldr	r2, [r0, #0]
 8012b4c:	6853      	ldr	r3, [r2, #4]
 8012b4e:	4924      	ldr	r1, [pc, #144]	; (8012be0 <UART_AdvFeatureConfig+0xc4>)
 8012b50:	400b      	ands	r3, r1
 8012b52:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012b54:	430b      	orrs	r3, r1
 8012b56:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012b58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b5a:	071b      	lsls	r3, r3, #28
 8012b5c:	d506      	bpl.n	8012b6c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012b5e:	6802      	ldr	r2, [r0, #0]
 8012b60:	6853      	ldr	r3, [r2, #4]
 8012b62:	4920      	ldr	r1, [pc, #128]	; (8012be4 <UART_AdvFeatureConfig+0xc8>)
 8012b64:	400b      	ands	r3, r1
 8012b66:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012b68:	430b      	orrs	r3, r1
 8012b6a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012b6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b6e:	06db      	lsls	r3, r3, #27
 8012b70:	d506      	bpl.n	8012b80 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012b72:	6802      	ldr	r2, [r0, #0]
 8012b74:	6893      	ldr	r3, [r2, #8]
 8012b76:	491c      	ldr	r1, [pc, #112]	; (8012be8 <UART_AdvFeatureConfig+0xcc>)
 8012b78:	400b      	ands	r3, r1
 8012b7a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012b7c:	430b      	orrs	r3, r1
 8012b7e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012b80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b82:	069b      	lsls	r3, r3, #26
 8012b84:	d506      	bpl.n	8012b94 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012b86:	6802      	ldr	r2, [r0, #0]
 8012b88:	6893      	ldr	r3, [r2, #8]
 8012b8a:	4918      	ldr	r1, [pc, #96]	; (8012bec <UART_AdvFeatureConfig+0xd0>)
 8012b8c:	400b      	ands	r3, r1
 8012b8e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012b90:	430b      	orrs	r3, r1
 8012b92:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012b94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b96:	065b      	lsls	r3, r3, #25
 8012b98:	d50b      	bpl.n	8012bb2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012b9a:	6802      	ldr	r2, [r0, #0]
 8012b9c:	6853      	ldr	r3, [r2, #4]
 8012b9e:	4914      	ldr	r1, [pc, #80]	; (8012bf0 <UART_AdvFeatureConfig+0xd4>)
 8012ba0:	400b      	ands	r3, r1
 8012ba2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012ba4:	430b      	orrs	r3, r1
 8012ba6:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012ba8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012baa:	2380      	movs	r3, #128	; 0x80
 8012bac:	035b      	lsls	r3, r3, #13
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d00a      	beq.n	8012bc8 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012bb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012bb4:	061b      	lsls	r3, r3, #24
 8012bb6:	d506      	bpl.n	8012bc6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012bb8:	6802      	ldr	r2, [r0, #0]
 8012bba:	6853      	ldr	r3, [r2, #4]
 8012bbc:	490d      	ldr	r1, [pc, #52]	; (8012bf4 <UART_AdvFeatureConfig+0xd8>)
 8012bbe:	400b      	ands	r3, r1
 8012bc0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012bc2:	430b      	orrs	r3, r1
 8012bc4:	6053      	str	r3, [r2, #4]
}
 8012bc6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012bc8:	6802      	ldr	r2, [r0, #0]
 8012bca:	6853      	ldr	r3, [r2, #4]
 8012bcc:	490a      	ldr	r1, [pc, #40]	; (8012bf8 <UART_AdvFeatureConfig+0xdc>)
 8012bce:	400b      	ands	r3, r1
 8012bd0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012bd2:	430b      	orrs	r3, r1
 8012bd4:	6053      	str	r3, [r2, #4]
 8012bd6:	e7ec      	b.n	8012bb2 <UART_AdvFeatureConfig+0x96>
 8012bd8:	fffdffff 	.word	0xfffdffff
 8012bdc:	fffeffff 	.word	0xfffeffff
 8012be0:	fffbffff 	.word	0xfffbffff
 8012be4:	ffff7fff 	.word	0xffff7fff
 8012be8:	ffffefff 	.word	0xffffefff
 8012bec:	ffffdfff 	.word	0xffffdfff
 8012bf0:	ffefffff 	.word	0xffefffff
 8012bf4:	fff7ffff 	.word	0xfff7ffff
 8012bf8:	ff9fffff 	.word	0xff9fffff

08012bfc <UART_WaitOnFlagUntilTimeout>:
{
 8012bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bfe:	46c6      	mov	lr, r8
 8012c00:	b500      	push	{lr}
 8012c02:	0007      	movs	r7, r0
 8012c04:	000c      	movs	r4, r1
 8012c06:	0016      	movs	r6, r2
 8012c08:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012c0a:	f7fd f9e7 	bl	800ffdc <HAL_GetTick>
 8012c0e:	4680      	mov	r8, r0
  if(Status == RESET)
 8012c10:	2e00      	cmp	r6, #0
 8012c12:	d029      	beq.n	8012c68 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	69da      	ldr	r2, [r3, #28]
 8012c18:	4022      	ands	r2, r4
 8012c1a:	42a2      	cmp	r2, r4
 8012c1c:	d152      	bne.n	8012cc4 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012c1e:	1c6b      	adds	r3, r5, #1
 8012c20:	d0f8      	beq.n	8012c14 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012c22:	2d00      	cmp	r5, #0
 8012c24:	d005      	beq.n	8012c32 <UART_WaitOnFlagUntilTimeout+0x36>
 8012c26:	f7fd f9d9 	bl	800ffdc <HAL_GetTick>
 8012c2a:	4643      	mov	r3, r8
 8012c2c:	1ac0      	subs	r0, r0, r3
 8012c2e:	42a8      	cmp	r0, r5
 8012c30:	d9f0      	bls.n	8012c14 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	6813      	ldr	r3, [r2, #0]
 8012c36:	2180      	movs	r1, #128	; 0x80
 8012c38:	438b      	bics	r3, r1
 8012c3a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012c3c:	683a      	ldr	r2, [r7, #0]
 8012c3e:	6813      	ldr	r3, [r2, #0]
 8012c40:	3960      	subs	r1, #96	; 0x60
 8012c42:	438b      	bics	r3, r1
 8012c44:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	6813      	ldr	r3, [r2, #0]
 8012c4a:	491f      	ldr	r1, [pc, #124]	; (8012cc8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012c4c:	400b      	ands	r3, r1
 8012c4e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012c50:	6839      	ldr	r1, [r7, #0]
 8012c52:	688b      	ldr	r3, [r1, #8]
 8012c54:	2201      	movs	r2, #1
 8012c56:	4393      	bics	r3, r2
 8012c58:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012c5a:	2369      	movs	r3, #105	; 0x69
 8012c5c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8012c5e:	3b01      	subs	r3, #1
 8012c60:	2200      	movs	r2, #0
 8012c62:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8012c64:	2003      	movs	r0, #3
 8012c66:	e02a      	b.n	8012cbe <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	69d9      	ldr	r1, [r3, #28]
 8012c6c:	4021      	ands	r1, r4
 8012c6e:	42a1      	cmp	r1, r4
 8012c70:	d024      	beq.n	8012cbc <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012c72:	1c6b      	adds	r3, r5, #1
 8012c74:	d0f8      	beq.n	8012c68 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012c76:	2d00      	cmp	r5, #0
 8012c78:	d005      	beq.n	8012c86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8012c7a:	f7fd f9af 	bl	800ffdc <HAL_GetTick>
 8012c7e:	4643      	mov	r3, r8
 8012c80:	1ac0      	subs	r0, r0, r3
 8012c82:	42a8      	cmp	r0, r5
 8012c84:	d9f0      	bls.n	8012c68 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	6813      	ldr	r3, [r2, #0]
 8012c8a:	2180      	movs	r1, #128	; 0x80
 8012c8c:	438b      	bics	r3, r1
 8012c8e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012c90:	683a      	ldr	r2, [r7, #0]
 8012c92:	6813      	ldr	r3, [r2, #0]
 8012c94:	3960      	subs	r1, #96	; 0x60
 8012c96:	438b      	bics	r3, r1
 8012c98:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	6813      	ldr	r3, [r2, #0]
 8012c9e:	490a      	ldr	r1, [pc, #40]	; (8012cc8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012ca0:	400b      	ands	r3, r1
 8012ca2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012ca4:	6839      	ldr	r1, [r7, #0]
 8012ca6:	688b      	ldr	r3, [r1, #8]
 8012ca8:	2201      	movs	r2, #1
 8012caa:	4393      	bics	r3, r2
 8012cac:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012cae:	2369      	movs	r3, #105	; 0x69
 8012cb0:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8012cb8:	2003      	movs	r0, #3
 8012cba:	e000      	b.n	8012cbe <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012cbc:	0030      	movs	r0, r6
}
 8012cbe:	bc80      	pop	{r7}
 8012cc0:	46b8      	mov	r8, r7
 8012cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	e7fa      	b.n	8012cbe <UART_WaitOnFlagUntilTimeout+0xc2>
 8012cc8:	fffffeff 	.word	0xfffffeff

08012ccc <HAL_UART_Transmit>:
{
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	0004      	movs	r4, r0
 8012cd0:	000d      	movs	r5, r1
 8012cd2:	001e      	movs	r6, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012cd4:	2369      	movs	r3, #105	; 0x69
 8012cd6:	5cc3      	ldrb	r3, [r0, r3]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d003      	beq.n	8012ce4 <HAL_UART_Transmit+0x18>
 8012cdc:	2369      	movs	r3, #105	; 0x69
 8012cde:	5cc3      	ldrb	r3, [r0, r3]
 8012ce0:	2b22      	cmp	r3, #34	; 0x22
 8012ce2:	d154      	bne.n	8012d8e <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8012ce4:	2d00      	cmp	r5, #0
 8012ce6:	d054      	beq.n	8012d92 <HAL_UART_Transmit+0xc6>
 8012ce8:	2a00      	cmp	r2, #0
 8012cea:	d054      	beq.n	8012d96 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8012cec:	2368      	movs	r3, #104	; 0x68
 8012cee:	5ce3      	ldrb	r3, [r4, r3]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d052      	beq.n	8012d9a <HAL_UART_Transmit+0xce>
 8012cf4:	2368      	movs	r3, #104	; 0x68
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012cfe:	3369      	adds	r3, #105	; 0x69
 8012d00:	5ce3      	ldrb	r3, [r4, r3]
 8012d02:	2b22      	cmp	r3, #34	; 0x22
 8012d04:	d007      	beq.n	8012d16 <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012d06:	2369      	movs	r3, #105	; 0x69
 8012d08:	2112      	movs	r1, #18
 8012d0a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012d0c:	2350      	movs	r3, #80	; 0x50
 8012d0e:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012d10:	3302      	adds	r3, #2
 8012d12:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8012d14:	e007      	b.n	8012d26 <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012d16:	3347      	adds	r3, #71	; 0x47
 8012d18:	3131      	adds	r1, #49	; 0x31
 8012d1a:	54e1      	strb	r1, [r4, r3]
 8012d1c:	e7f6      	b.n	8012d0c <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	782a      	ldrb	r2, [r5, #0]
 8012d22:	851a      	strh	r2, [r3, #40]	; 0x28
 8012d24:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 8012d26:	2252      	movs	r2, #82	; 0x52
 8012d28:	5aa2      	ldrh	r2, [r4, r2]
 8012d2a:	2a00      	cmp	r2, #0
 8012d2c:	d019      	beq.n	8012d62 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8012d2e:	3a01      	subs	r2, #1
 8012d30:	2152      	movs	r1, #82	; 0x52
 8012d32:	5262      	strh	r2, [r4, r1]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012d34:	0033      	movs	r3, r6
 8012d36:	2200      	movs	r2, #0
 8012d38:	312e      	adds	r1, #46	; 0x2e
 8012d3a:	0020      	movs	r0, r4
 8012d3c:	f7ff ff5e 	bl	8012bfc <UART_WaitOnFlagUntilTimeout>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	d12c      	bne.n	8012d9e <HAL_UART_Transmit+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d44:	68a2      	ldr	r2, [r4, #8]
 8012d46:	2380      	movs	r3, #128	; 0x80
 8012d48:	015b      	lsls	r3, r3, #5
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d1e7      	bne.n	8012d1e <HAL_UART_Transmit+0x52>
 8012d4e:	6923      	ldr	r3, [r4, #16]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1e4      	bne.n	8012d1e <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012d54:	882b      	ldrh	r3, [r5, #0]
 8012d56:	6822      	ldr	r2, [r4, #0]
 8012d58:	05db      	lsls	r3, r3, #23
 8012d5a:	0ddb      	lsrs	r3, r3, #23
 8012d5c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012d5e:	3502      	adds	r5, #2
 8012d60:	e7e1      	b.n	8012d26 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012d62:	0033      	movs	r3, r6
 8012d64:	2140      	movs	r1, #64	; 0x40
 8012d66:	0020      	movs	r0, r4
 8012d68:	f7ff ff48 	bl	8012bfc <UART_WaitOnFlagUntilTimeout>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d118      	bne.n	8012da2 <HAL_UART_Transmit+0xd6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012d70:	2369      	movs	r3, #105	; 0x69
 8012d72:	5ce3      	ldrb	r3, [r4, r3]
 8012d74:	2b32      	cmp	r3, #50	; 0x32
 8012d76:	d006      	beq.n	8012d86 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012d78:	2369      	movs	r3, #105	; 0x69
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012d7e:	2368      	movs	r3, #104	; 0x68
 8012d80:	2200      	movs	r2, #0
 8012d82:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012d84:	e004      	b.n	8012d90 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012d86:	3337      	adds	r3, #55	; 0x37
 8012d88:	2222      	movs	r2, #34	; 0x22
 8012d8a:	54e2      	strb	r2, [r4, r3]
 8012d8c:	e7f7      	b.n	8012d7e <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8012d8e:	2002      	movs	r0, #2
}
 8012d90:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8012d92:	2001      	movs	r0, #1
 8012d94:	e7fc      	b.n	8012d90 <HAL_UART_Transmit+0xc4>
 8012d96:	2001      	movs	r0, #1
 8012d98:	e7fa      	b.n	8012d90 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8012d9a:	2002      	movs	r0, #2
 8012d9c:	e7f8      	b.n	8012d90 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012d9e:	2003      	movs	r0, #3
 8012da0:	e7f6      	b.n	8012d90 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012da2:	2003      	movs	r0, #3
 8012da4:	e7f4      	b.n	8012d90 <HAL_UART_Transmit+0xc4>
	...

08012da8 <UART_CheckIdleState>:
{
 8012da8:	b510      	push	{r4, lr}
 8012daa:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dac:	2300      	movs	r3, #0
 8012dae:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012db0:	6803      	ldr	r3, [r0, #0]
 8012db2:	4a18      	ldr	r2, [pc, #96]	; (8012e14 <UART_CheckIdleState+0x6c>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d005      	beq.n	8012dc4 <UART_CheckIdleState+0x1c>
 8012db8:	4a17      	ldr	r2, [pc, #92]	; (8012e18 <UART_CheckIdleState+0x70>)
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d002      	beq.n	8012dc4 <UART_CheckIdleState+0x1c>
 8012dbe:	4a17      	ldr	r2, [pc, #92]	; (8012e1c <UART_CheckIdleState+0x74>)
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d106      	bne.n	8012dd2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	071b      	lsls	r3, r3, #28
 8012dc8:	d40b      	bmi.n	8012de2 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012dca:	6823      	ldr	r3, [r4, #0]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	075b      	lsls	r3, r3, #29
 8012dd0:	d413      	bmi.n	8012dfa <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012dd2:	2369      	movs	r3, #105	; 0x69
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012dd8:	3b01      	subs	r3, #1
 8012dda:	2200      	movs	r2, #0
 8012ddc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012dde:	2000      	movs	r0, #0
}
 8012de0:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012de2:	23fa      	movs	r3, #250	; 0xfa
 8012de4:	2180      	movs	r1, #128	; 0x80
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	2200      	movs	r2, #0
 8012dea:	0389      	lsls	r1, r1, #14
 8012dec:	0020      	movs	r0, r4
 8012dee:	f7ff ff05 	bl	8012bfc <UART_WaitOnFlagUntilTimeout>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d0e9      	beq.n	8012dca <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012df6:	2003      	movs	r0, #3
 8012df8:	e7f2      	b.n	8012de0 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012dfa:	23fa      	movs	r3, #250	; 0xfa
 8012dfc:	2180      	movs	r1, #128	; 0x80
 8012dfe:	009b      	lsls	r3, r3, #2
 8012e00:	2200      	movs	r2, #0
 8012e02:	03c9      	lsls	r1, r1, #15
 8012e04:	0020      	movs	r0, r4
 8012e06:	f7ff fef9 	bl	8012bfc <UART_WaitOnFlagUntilTimeout>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	d0e1      	beq.n	8012dd2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8012e0e:	2003      	movs	r0, #3
 8012e10:	e7e6      	b.n	8012de0 <UART_CheckIdleState+0x38>
 8012e12:	46c0      	nop			; (mov r8, r8)
 8012e14:	40013800 	.word	0x40013800
 8012e18:	40004400 	.word	0x40004400
 8012e1c:	40004800 	.word	0x40004800

08012e20 <HAL_UART_Init>:
{
 8012e20:	b510      	push	{r4, lr}
 8012e22:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012e24:	d030      	beq.n	8012e88 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012e26:	2369      	movs	r3, #105	; 0x69
 8012e28:	5cc3      	ldrb	r3, [r0, r3]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d022      	beq.n	8012e74 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8012e2e:	2369      	movs	r3, #105	; 0x69
 8012e30:	2202      	movs	r2, #2
 8012e32:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012e34:	6822      	ldr	r2, [r4, #0]
 8012e36:	6813      	ldr	r3, [r2, #0]
 8012e38:	2101      	movs	r1, #1
 8012e3a:	438b      	bics	r3, r1
 8012e3c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012e3e:	0020      	movs	r0, r4
 8012e40:	f7ff fd38 	bl	80128b4 <UART_SetConfig>
 8012e44:	2801      	cmp	r0, #1
 8012e46:	d014      	beq.n	8012e72 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d118      	bne.n	8012e80 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012e4e:	6822      	ldr	r2, [r4, #0]
 8012e50:	6853      	ldr	r3, [r2, #4]
 8012e52:	490e      	ldr	r1, [pc, #56]	; (8012e8c <HAL_UART_Init+0x6c>)
 8012e54:	400b      	ands	r3, r1
 8012e56:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012e58:	6822      	ldr	r2, [r4, #0]
 8012e5a:	6893      	ldr	r3, [r2, #8]
 8012e5c:	212a      	movs	r1, #42	; 0x2a
 8012e5e:	438b      	bics	r3, r1
 8012e60:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012e62:	6822      	ldr	r2, [r4, #0]
 8012e64:	6813      	ldr	r3, [r2, #0]
 8012e66:	3929      	subs	r1, #41	; 0x29
 8012e68:	430b      	orrs	r3, r1
 8012e6a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012e6c:	0020      	movs	r0, r4
 8012e6e:	f7ff ff9b 	bl	8012da8 <UART_CheckIdleState>
}
 8012e72:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012e74:	3368      	adds	r3, #104	; 0x68
 8012e76:	2200      	movs	r2, #0
 8012e78:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012e7a:	f7fa fee5 	bl	800dc48 <HAL_UART_MspInit>
 8012e7e:	e7d6      	b.n	8012e2e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012e80:	0020      	movs	r0, r4
 8012e82:	f7ff fe4b 	bl	8012b1c <UART_AdvFeatureConfig>
 8012e86:	e7e2      	b.n	8012e4e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012e88:	2001      	movs	r0, #1
 8012e8a:	e7f2      	b.n	8012e72 <HAL_UART_Init+0x52>
 8012e8c:	ffffb7ff 	.word	0xffffb7ff

08012e90 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012e90:	2369      	movs	r3, #105	; 0x69
 8012e92:	5cc3      	ldrb	r3, [r0, r3]
 8012e94:	2b12      	cmp	r3, #18
 8012e96:	d003      	beq.n	8012ea0 <UART_Transmit_IT+0x10>
 8012e98:	2369      	movs	r3, #105	; 0x69
 8012e9a:	5cc3      	ldrb	r3, [r0, r3]
 8012e9c:	2b32      	cmp	r3, #50	; 0x32
 8012e9e:	d12d      	bne.n	8012efc <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8012ea0:	2352      	movs	r3, #82	; 0x52
 8012ea2:	5ac3      	ldrh	r3, [r0, r3]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10b      	bne.n	8012ec0 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012ea8:	6802      	ldr	r2, [r0, #0]
 8012eaa:	6813      	ldr	r3, [r2, #0]
 8012eac:	2180      	movs	r1, #128	; 0x80
 8012eae:	438b      	bics	r3, r1
 8012eb0:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012eb2:	6802      	ldr	r2, [r0, #0]
 8012eb4:	6813      	ldr	r3, [r2, #0]
 8012eb6:	3940      	subs	r1, #64	; 0x40
 8012eb8:	430b      	orrs	r3, r1
 8012eba:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8012ebc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012ebe:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ec0:	6882      	ldr	r2, [r0, #8]
 8012ec2:	2380      	movs	r3, #128	; 0x80
 8012ec4:	015b      	lsls	r3, r3, #5
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d00b      	beq.n	8012ee2 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012eca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012ecc:	1c5a      	adds	r2, r3, #1
 8012ece:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012ed0:	6802      	ldr	r2, [r0, #0]
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8012ed6:	2252      	movs	r2, #82	; 0x52
 8012ed8:	5a83      	ldrh	r3, [r0, r2]
 8012eda:	3b01      	subs	r3, #1
 8012edc:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012ede:	2000      	movs	r0, #0
 8012ee0:	e7ed      	b.n	8012ebe <UART_Transmit_IT+0x2e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ee2:	6903      	ldr	r3, [r0, #16]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d1f0      	bne.n	8012eca <UART_Transmit_IT+0x3a>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8012ee8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012eea:	881b      	ldrh	r3, [r3, #0]
 8012eec:	6802      	ldr	r2, [r0, #0]
 8012eee:	05db      	lsls	r3, r3, #23
 8012ef0:	0ddb      	lsrs	r3, r3, #23
 8012ef2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012ef4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012ef6:	3302      	adds	r3, #2
 8012ef8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012efa:	e7ec      	b.n	8012ed6 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8012efc:	2002      	movs	r0, #2
 8012efe:	e7de      	b.n	8012ebe <UART_Transmit_IT+0x2e>

08012f00 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012f00:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012f02:	6802      	ldr	r2, [r0, #0]
 8012f04:	6813      	ldr	r3, [r2, #0]
 8012f06:	2140      	movs	r1, #64	; 0x40
 8012f08:	438b      	bics	r3, r1
 8012f0a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012f0c:	2369      	movs	r3, #105	; 0x69
 8012f0e:	5cc3      	ldrb	r3, [r0, r3]
 8012f10:	2b32      	cmp	r3, #50	; 0x32
 8012f12:	d00a      	beq.n	8012f2a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012f14:	6801      	ldr	r1, [r0, #0]
 8012f16:	688b      	ldr	r3, [r1, #8]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	4393      	bics	r3, r2
 8012f1c:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8012f1e:	2369      	movs	r3, #105	; 0x69
 8012f20:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012f22:	f7fa fab9 	bl	800d498 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012f26:	2000      	movs	r0, #0
 8012f28:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012f2a:	3337      	adds	r3, #55	; 0x37
 8012f2c:	2222      	movs	r2, #34	; 0x22
 8012f2e:	54c2      	strb	r2, [r0, r3]
 8012f30:	e7f7      	b.n	8012f22 <UART_EndTransmit_IT+0x22>
	...

08012f34 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012f34:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8012f36:	235c      	movs	r3, #92	; 0x5c
 8012f38:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012f3a:	2269      	movs	r2, #105	; 0x69
 8012f3c:	5c82      	ldrb	r2, [r0, r2]
 8012f3e:	2a22      	cmp	r2, #34	; 0x22
 8012f40:	d003      	beq.n	8012f4a <UART_Receive_IT+0x16>
 8012f42:	2269      	movs	r2, #105	; 0x69
 8012f44:	5c82      	ldrb	r2, [r0, r2]
 8012f46:	2a32      	cmp	r2, #50	; 0x32
 8012f48:	d13c      	bne.n	8012fc4 <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f4a:	6881      	ldr	r1, [r0, #8]
 8012f4c:	2280      	movs	r2, #128	; 0x80
 8012f4e:	0152      	lsls	r2, r2, #5
 8012f50:	4291      	cmp	r1, r2
 8012f52:	d027      	beq.n	8012fa4 <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012f54:	6802      	ldr	r2, [r0, #0]
 8012f56:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8012f5c:	1c4c      	adds	r4, r1, #1
 8012f5e:	6544      	str	r4, [r0, #84]	; 0x54
 8012f60:	4013      	ands	r3, r2
 8012f62:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8012f64:	225a      	movs	r2, #90	; 0x5a
 8012f66:	5a83      	ldrh	r3, [r0, r2]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	5283      	strh	r3, [r0, r2]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d12a      	bne.n	8012fc8 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012f72:	6802      	ldr	r2, [r0, #0]
 8012f74:	6813      	ldr	r3, [r2, #0]
 8012f76:	2120      	movs	r1, #32
 8012f78:	438b      	bics	r3, r1
 8012f7a:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012f7c:	2369      	movs	r3, #105	; 0x69
 8012f7e:	5cc3      	ldrb	r3, [r0, r3]
 8012f80:	2b32      	cmp	r3, #50	; 0x32
 8012f82:	d01b      	beq.n	8012fbc <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012f84:	6802      	ldr	r2, [r0, #0]
 8012f86:	6813      	ldr	r3, [r2, #0]
 8012f88:	4910      	ldr	r1, [pc, #64]	; (8012fcc <UART_Receive_IT+0x98>)
 8012f8a:	400b      	ands	r3, r1
 8012f8c:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012f8e:	6801      	ldr	r1, [r0, #0]
 8012f90:	688b      	ldr	r3, [r1, #8]
 8012f92:	2201      	movs	r2, #1
 8012f94:	4393      	bics	r3, r2
 8012f96:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8012f98:	2369      	movs	r3, #105	; 0x69
 8012f9a:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8012f9c:	f7fa fab8 	bl	800d510 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8012fa0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012fa2:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012fa4:	6902      	ldr	r2, [r0, #16]
 8012fa6:	2a00      	cmp	r2, #0
 8012fa8:	d1d4      	bne.n	8012f54 <UART_Receive_IT+0x20>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8012faa:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012fac:	6802      	ldr	r2, [r0, #0]
 8012fae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	800b      	strh	r3, [r1, #0]
      huart->pRxBuffPtr +=2;
 8012fb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012fb6:	3302      	adds	r3, #2
 8012fb8:	6543      	str	r3, [r0, #84]	; 0x54
 8012fba:	e7d3      	b.n	8012f64 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012fbc:	3337      	adds	r3, #55	; 0x37
 8012fbe:	2212      	movs	r2, #18
 8012fc0:	54c2      	strb	r2, [r0, r3]
 8012fc2:	e7eb      	b.n	8012f9c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8012fc4:	2002      	movs	r0, #2
 8012fc6:	e7ec      	b.n	8012fa2 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8012fc8:	2000      	movs	r0, #0
 8012fca:	e7ea      	b.n	8012fa2 <UART_Receive_IT+0x6e>
 8012fcc:	fffffeff 	.word	0xfffffeff

08012fd0 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012fd0:	4770      	bx	lr

08012fd2 <HAL_UART_IRQHandler>:
{
 8012fd2:	b510      	push	{r4, lr}
 8012fd4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012fd6:	6802      	ldr	r2, [r0, #0]
 8012fd8:	69d3      	ldr	r3, [r2, #28]
 8012fda:	07db      	lsls	r3, r3, #31
 8012fdc:	d509      	bpl.n	8012ff2 <HAL_UART_IRQHandler+0x20>
 8012fde:	6813      	ldr	r3, [r2, #0]
 8012fe0:	05db      	lsls	r3, r3, #23
 8012fe2:	d506      	bpl.n	8012ff2 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	6213      	str	r3, [r2, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012fe8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8012fea:	431a      	orrs	r2, r3
 8012fec:	66c2      	str	r2, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012fee:	2269      	movs	r2, #105	; 0x69
 8012ff0:	5483      	strb	r3, [r0, r2]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012ff2:	6822      	ldr	r2, [r4, #0]
 8012ff4:	69d3      	ldr	r3, [r2, #28]
 8012ff6:	079b      	lsls	r3, r3, #30
 8012ff8:	d50b      	bpl.n	8013012 <HAL_UART_IRQHandler+0x40>
 8012ffa:	6893      	ldr	r3, [r2, #8]
 8012ffc:	07db      	lsls	r3, r3, #31
 8012ffe:	d508      	bpl.n	8013012 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013000:	2302      	movs	r3, #2
 8013002:	6213      	str	r3, [r2, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013004:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013006:	2204      	movs	r2, #4
 8013008:	4313      	orrs	r3, r2
 801300a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801300c:	2369      	movs	r3, #105	; 0x69
 801300e:	3a03      	subs	r2, #3
 8013010:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013012:	6822      	ldr	r2, [r4, #0]
 8013014:	69d3      	ldr	r3, [r2, #28]
 8013016:	075b      	lsls	r3, r3, #29
 8013018:	d50b      	bpl.n	8013032 <HAL_UART_IRQHandler+0x60>
 801301a:	6893      	ldr	r3, [r2, #8]
 801301c:	07db      	lsls	r3, r3, #31
 801301e:	d508      	bpl.n	8013032 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013020:	2304      	movs	r3, #4
 8013022:	6213      	str	r3, [r2, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013024:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013026:	2202      	movs	r2, #2
 8013028:	4313      	orrs	r3, r2
 801302a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801302c:	2369      	movs	r3, #105	; 0x69
 801302e:	3a01      	subs	r2, #1
 8013030:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013032:	6822      	ldr	r2, [r4, #0]
 8013034:	69d3      	ldr	r3, [r2, #28]
 8013036:	071b      	lsls	r3, r3, #28
 8013038:	d50a      	bpl.n	8013050 <HAL_UART_IRQHandler+0x7e>
 801303a:	6893      	ldr	r3, [r2, #8]
 801303c:	07db      	lsls	r3, r3, #31
 801303e:	d507      	bpl.n	8013050 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013040:	2108      	movs	r1, #8
 8013042:	6211      	str	r1, [r2, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013044:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013046:	430b      	orrs	r3, r1
 8013048:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801304a:	2369      	movs	r3, #105	; 0x69
 801304c:	2201      	movs	r2, #1
 801304e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013050:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013052:	2b00      	cmp	r3, #0
 8013054:	d11c      	bne.n	8013090 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013056:	6822      	ldr	r2, [r4, #0]
 8013058:	69d3      	ldr	r3, [r2, #28]
 801305a:	02db      	lsls	r3, r3, #11
 801305c:	d502      	bpl.n	8013064 <HAL_UART_IRQHandler+0x92>
 801305e:	6893      	ldr	r3, [r2, #8]
 8013060:	025b      	lsls	r3, r3, #9
 8013062:	d419      	bmi.n	8013098 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013064:	6822      	ldr	r2, [r4, #0]
 8013066:	69d3      	ldr	r3, [r2, #28]
 8013068:	069b      	lsls	r3, r3, #26
 801306a:	d502      	bpl.n	8013072 <HAL_UART_IRQHandler+0xa0>
 801306c:	6813      	ldr	r3, [r2, #0]
 801306e:	069b      	lsls	r3, r3, #26
 8013070:	d41c      	bmi.n	80130ac <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013072:	6822      	ldr	r2, [r4, #0]
 8013074:	69d3      	ldr	r3, [r2, #28]
 8013076:	061b      	lsls	r3, r3, #24
 8013078:	d502      	bpl.n	8013080 <HAL_UART_IRQHandler+0xae>
 801307a:	6813      	ldr	r3, [r2, #0]
 801307c:	061b      	lsls	r3, r3, #24
 801307e:	d41e      	bmi.n	80130be <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013080:	6822      	ldr	r2, [r4, #0]
 8013082:	69d3      	ldr	r3, [r2, #28]
 8013084:	065b      	lsls	r3, r3, #25
 8013086:	d502      	bpl.n	801308e <HAL_UART_IRQHandler+0xbc>
 8013088:	6813      	ldr	r3, [r2, #0]
 801308a:	065b      	lsls	r3, r3, #25
 801308c:	d41b      	bmi.n	80130c6 <HAL_UART_IRQHandler+0xf4>
}
 801308e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013090:	0020      	movs	r0, r4
 8013092:	f7fa fa19 	bl	800d4c8 <HAL_UART_ErrorCallback>
 8013096:	e7de      	b.n	8013056 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013098:	2380      	movs	r3, #128	; 0x80
 801309a:	035b      	lsls	r3, r3, #13
 801309c:	6213      	str	r3, [r2, #32]
    huart->State = HAL_UART_STATE_READY;
 801309e:	2369      	movs	r3, #105	; 0x69
 80130a0:	2201      	movs	r2, #1
 80130a2:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80130a4:	0020      	movs	r0, r4
 80130a6:	f7ff ff93 	bl	8012fd0 <HAL_UARTEx_WakeupCallback>
 80130aa:	e7db      	b.n	8013064 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80130ac:	0020      	movs	r0, r4
 80130ae:	f7ff ff41 	bl	8012f34 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80130b2:	6822      	ldr	r2, [r4, #0]
 80130b4:	6993      	ldr	r3, [r2, #24]
 80130b6:	2108      	movs	r1, #8
 80130b8:	430b      	orrs	r3, r1
 80130ba:	6193      	str	r3, [r2, #24]
 80130bc:	e7d9      	b.n	8013072 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 80130be:	0020      	movs	r0, r4
 80130c0:	f7ff fee6 	bl	8012e90 <UART_Transmit_IT>
 80130c4:	e7dc      	b.n	8013080 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 80130c6:	0020      	movs	r0, r4
 80130c8:	f7ff ff1a 	bl	8012f00 <UART_EndTransmit_IT>
}
 80130cc:	e7df      	b.n	801308e <HAL_UART_IRQHandler+0xbc>

080130ce <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 80130ce:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 80130d0:	f7f0 fd3e 	bl	8003b50 <Module_Init>

	//Don't place your code here.
	for(;;){}
 80130d4:	e7fe      	b.n	80130d4 <main+0x6>

080130d6 <UserTask>:

/* User Task */
void UserTask(void *argument){

	// put your code here, to run repeatedly.
	while(1){
 80130d6:	e7fe      	b.n	80130d6 <UserTask>

080130d8 <atof>:
 80130d8:	b510      	push	{r4, lr}
 80130da:	2100      	movs	r1, #0
 80130dc:	f001 fa32 	bl	8014544 <strtod>
 80130e0:	bd10      	pop	{r4, pc}

080130e2 <atoi>:
 80130e2:	b510      	push	{r4, lr}
 80130e4:	220a      	movs	r2, #10
 80130e6:	2100      	movs	r1, #0
 80130e8:	f001 fac0 	bl	801466c <strtol>
 80130ec:	bd10      	pop	{r4, pc}

080130ee <atol>:
 80130ee:	b510      	push	{r4, lr}
 80130f0:	220a      	movs	r2, #10
 80130f2:	2100      	movs	r1, #0
 80130f4:	f001 faba 	bl	801466c <strtol>
 80130f8:	bd10      	pop	{r4, pc}
	...

080130fc <malloc>:
 80130fc:	b510      	push	{r4, lr}
 80130fe:	4b03      	ldr	r3, [pc, #12]	; (801310c <malloc+0x10>)
 8013100:	0001      	movs	r1, r0
 8013102:	6818      	ldr	r0, [r3, #0]
 8013104:	f000 f80e 	bl	8013124 <_malloc_r>
 8013108:	bd10      	pop	{r4, pc}
 801310a:	46c0      	nop			; (mov r8, r8)
 801310c:	20000778 	.word	0x20000778

08013110 <free>:
 8013110:	b510      	push	{r4, lr}
 8013112:	4b03      	ldr	r3, [pc, #12]	; (8013120 <free+0x10>)
 8013114:	0001      	movs	r1, r0
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	f001 fda8 	bl	8014c6c <_free_r>
 801311c:	bd10      	pop	{r4, pc}
 801311e:	46c0      	nop			; (mov r8, r8)
 8013120:	20000778 	.word	0x20000778

08013124 <_malloc_r>:
 8013124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013126:	000d      	movs	r5, r1
 8013128:	b087      	sub	sp, #28
 801312a:	350b      	adds	r5, #11
 801312c:	9001      	str	r0, [sp, #4]
 801312e:	2d16      	cmp	r5, #22
 8013130:	d908      	bls.n	8013144 <_malloc_r+0x20>
 8013132:	2207      	movs	r2, #7
 8013134:	4395      	bics	r5, r2
 8013136:	d506      	bpl.n	8013146 <_malloc_r+0x22>
 8013138:	230c      	movs	r3, #12
 801313a:	9a01      	ldr	r2, [sp, #4]
 801313c:	6013      	str	r3, [r2, #0]
 801313e:	2000      	movs	r0, #0
 8013140:	b007      	add	sp, #28
 8013142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013144:	2510      	movs	r5, #16
 8013146:	42a9      	cmp	r1, r5
 8013148:	d8f6      	bhi.n	8013138 <_malloc_r+0x14>
 801314a:	9801      	ldr	r0, [sp, #4]
 801314c:	f000 f9fe 	bl	801354c <__malloc_lock>
 8013150:	23fc      	movs	r3, #252	; 0xfc
 8013152:	4ebe      	ldr	r6, [pc, #760]	; (801344c <_malloc_r+0x328>)
 8013154:	005b      	lsls	r3, r3, #1
 8013156:	429d      	cmp	r5, r3
 8013158:	d219      	bcs.n	801318e <_malloc_r+0x6a>
 801315a:	002a      	movs	r2, r5
 801315c:	3208      	adds	r2, #8
 801315e:	18b2      	adds	r2, r6, r2
 8013160:	0011      	movs	r1, r2
 8013162:	6854      	ldr	r4, [r2, #4]
 8013164:	3908      	subs	r1, #8
 8013166:	08eb      	lsrs	r3, r5, #3
 8013168:	428c      	cmp	r4, r1
 801316a:	d103      	bne.n	8013174 <_malloc_r+0x50>
 801316c:	68d4      	ldr	r4, [r2, #12]
 801316e:	3302      	adds	r3, #2
 8013170:	42a2      	cmp	r2, r4
 8013172:	d022      	beq.n	80131ba <_malloc_r+0x96>
 8013174:	2203      	movs	r2, #3
 8013176:	6863      	ldr	r3, [r4, #4]
 8013178:	68a1      	ldr	r1, [r4, #8]
 801317a:	4393      	bics	r3, r2
 801317c:	68e2      	ldr	r2, [r4, #12]
 801317e:	18e3      	adds	r3, r4, r3
 8013180:	60ca      	str	r2, [r1, #12]
 8013182:	6091      	str	r1, [r2, #8]
 8013184:	2201      	movs	r2, #1
 8013186:	6859      	ldr	r1, [r3, #4]
 8013188:	430a      	orrs	r2, r1
 801318a:	605a      	str	r2, [r3, #4]
 801318c:	e02a      	b.n	80131e4 <_malloc_r+0xc0>
 801318e:	233f      	movs	r3, #63	; 0x3f
 8013190:	0a6a      	lsrs	r2, r5, #9
 8013192:	d003      	beq.n	801319c <_malloc_r+0x78>
 8013194:	2a04      	cmp	r2, #4
 8013196:	d82b      	bhi.n	80131f0 <_malloc_r+0xcc>
 8013198:	09ab      	lsrs	r3, r5, #6
 801319a:	3338      	adds	r3, #56	; 0x38
 801319c:	2203      	movs	r2, #3
 801319e:	4694      	mov	ip, r2
 80131a0:	00d9      	lsls	r1, r3, #3
 80131a2:	1989      	adds	r1, r1, r6
 80131a4:	68cc      	ldr	r4, [r1, #12]
 80131a6:	428c      	cmp	r4, r1
 80131a8:	d006      	beq.n	80131b8 <_malloc_r+0x94>
 80131aa:	4660      	mov	r0, ip
 80131ac:	6862      	ldr	r2, [r4, #4]
 80131ae:	4382      	bics	r2, r0
 80131b0:	1b57      	subs	r7, r2, r5
 80131b2:	2f0f      	cmp	r7, #15
 80131b4:	dd34      	ble.n	8013220 <_malloc_r+0xfc>
 80131b6:	3b01      	subs	r3, #1
 80131b8:	3301      	adds	r3, #1
 80131ba:	6934      	ldr	r4, [r6, #16]
 80131bc:	49a4      	ldr	r1, [pc, #656]	; (8013450 <_malloc_r+0x32c>)
 80131be:	428c      	cmp	r4, r1
 80131c0:	d055      	beq.n	801326e <_malloc_r+0x14a>
 80131c2:	2003      	movs	r0, #3
 80131c4:	6862      	ldr	r2, [r4, #4]
 80131c6:	4382      	bics	r2, r0
 80131c8:	1b50      	subs	r0, r2, r5
 80131ca:	280f      	cmp	r0, #15
 80131cc:	dd36      	ble.n	801323c <_malloc_r+0x118>
 80131ce:	2301      	movs	r3, #1
 80131d0:	1967      	adds	r7, r4, r5
 80131d2:	431d      	orrs	r5, r3
 80131d4:	4303      	orrs	r3, r0
 80131d6:	6065      	str	r5, [r4, #4]
 80131d8:	6177      	str	r7, [r6, #20]
 80131da:	6137      	str	r7, [r6, #16]
 80131dc:	60f9      	str	r1, [r7, #12]
 80131de:	60b9      	str	r1, [r7, #8]
 80131e0:	607b      	str	r3, [r7, #4]
 80131e2:	50a0      	str	r0, [r4, r2]
 80131e4:	9801      	ldr	r0, [sp, #4]
 80131e6:	f000 f9b9 	bl	801355c <__malloc_unlock>
 80131ea:	0020      	movs	r0, r4
 80131ec:	3008      	adds	r0, #8
 80131ee:	e7a7      	b.n	8013140 <_malloc_r+0x1c>
 80131f0:	2a14      	cmp	r2, #20
 80131f2:	d802      	bhi.n	80131fa <_malloc_r+0xd6>
 80131f4:	0013      	movs	r3, r2
 80131f6:	335b      	adds	r3, #91	; 0x5b
 80131f8:	e7d0      	b.n	801319c <_malloc_r+0x78>
 80131fa:	2a54      	cmp	r2, #84	; 0x54
 80131fc:	d802      	bhi.n	8013204 <_malloc_r+0xe0>
 80131fe:	0b2b      	lsrs	r3, r5, #12
 8013200:	336e      	adds	r3, #110	; 0x6e
 8013202:	e7cb      	b.n	801319c <_malloc_r+0x78>
 8013204:	23aa      	movs	r3, #170	; 0xaa
 8013206:	005b      	lsls	r3, r3, #1
 8013208:	429a      	cmp	r2, r3
 801320a:	d802      	bhi.n	8013212 <_malloc_r+0xee>
 801320c:	0beb      	lsrs	r3, r5, #15
 801320e:	3377      	adds	r3, #119	; 0x77
 8013210:	e7c4      	b.n	801319c <_malloc_r+0x78>
 8013212:	4990      	ldr	r1, [pc, #576]	; (8013454 <_malloc_r+0x330>)
 8013214:	237e      	movs	r3, #126	; 0x7e
 8013216:	428a      	cmp	r2, r1
 8013218:	d8c0      	bhi.n	801319c <_malloc_r+0x78>
 801321a:	0cab      	lsrs	r3, r5, #18
 801321c:	337c      	adds	r3, #124	; 0x7c
 801321e:	e7bd      	b.n	801319c <_malloc_r+0x78>
 8013220:	68e0      	ldr	r0, [r4, #12]
 8013222:	2f00      	cmp	r7, #0
 8013224:	db08      	blt.n	8013238 <_malloc_r+0x114>
 8013226:	68a3      	ldr	r3, [r4, #8]
 8013228:	60d8      	str	r0, [r3, #12]
 801322a:	6083      	str	r3, [r0, #8]
 801322c:	2301      	movs	r3, #1
 801322e:	18a2      	adds	r2, r4, r2
 8013230:	6851      	ldr	r1, [r2, #4]
 8013232:	430b      	orrs	r3, r1
 8013234:	6053      	str	r3, [r2, #4]
 8013236:	e7d5      	b.n	80131e4 <_malloc_r+0xc0>
 8013238:	0004      	movs	r4, r0
 801323a:	e7b4      	b.n	80131a6 <_malloc_r+0x82>
 801323c:	6171      	str	r1, [r6, #20]
 801323e:	6131      	str	r1, [r6, #16]
 8013240:	2800      	cmp	r0, #0
 8013242:	daf3      	bge.n	801322c <_malloc_r+0x108>
 8013244:	6871      	ldr	r1, [r6, #4]
 8013246:	468c      	mov	ip, r1
 8013248:	2180      	movs	r1, #128	; 0x80
 801324a:	0089      	lsls	r1, r1, #2
 801324c:	428a      	cmp	r2, r1
 801324e:	d300      	bcc.n	8013252 <_malloc_r+0x12e>
 8013250:	e08c      	b.n	801336c <_malloc_r+0x248>
 8013252:	08d1      	lsrs	r1, r2, #3
 8013254:	0950      	lsrs	r0, r2, #5
 8013256:	2201      	movs	r2, #1
 8013258:	4082      	lsls	r2, r0
 801325a:	4660      	mov	r0, ip
 801325c:	4302      	orrs	r2, r0
 801325e:	6072      	str	r2, [r6, #4]
 8013260:	00ca      	lsls	r2, r1, #3
 8013262:	1992      	adds	r2, r2, r6
 8013264:	6891      	ldr	r1, [r2, #8]
 8013266:	60e2      	str	r2, [r4, #12]
 8013268:	60a1      	str	r1, [r4, #8]
 801326a:	6094      	str	r4, [r2, #8]
 801326c:	60cc      	str	r4, [r1, #12]
 801326e:	2201      	movs	r2, #1
 8013270:	4876      	ldr	r0, [pc, #472]	; (801344c <_malloc_r+0x328>)
 8013272:	1099      	asrs	r1, r3, #2
 8013274:	408a      	lsls	r2, r1
 8013276:	6841      	ldr	r1, [r0, #4]
 8013278:	4291      	cmp	r1, r2
 801327a:	d328      	bcc.n	80132ce <_malloc_r+0x1aa>
 801327c:	420a      	tst	r2, r1
 801327e:	d105      	bne.n	801328c <_malloc_r+0x168>
 8013280:	2403      	movs	r4, #3
 8013282:	43a3      	bics	r3, r4
 8013284:	0052      	lsls	r2, r2, #1
 8013286:	3304      	adds	r3, #4
 8013288:	420a      	tst	r2, r1
 801328a:	d0fb      	beq.n	8013284 <_malloc_r+0x160>
 801328c:	496f      	ldr	r1, [pc, #444]	; (801344c <_malloc_r+0x328>)
 801328e:	9104      	str	r1, [sp, #16]
 8013290:	00d9      	lsls	r1, r3, #3
 8013292:	1841      	adds	r1, r0, r1
 8013294:	468c      	mov	ip, r1
 8013296:	000f      	movs	r7, r1
 8013298:	9302      	str	r3, [sp, #8]
 801329a:	68fc      	ldr	r4, [r7, #12]
 801329c:	42bc      	cmp	r4, r7
 801329e:	d000      	beq.n	80132a2 <_malloc_r+0x17e>
 80132a0:	e09b      	b.n	80133da <_malloc_r+0x2b6>
 80132a2:	2403      	movs	r4, #3
 80132a4:	9902      	ldr	r1, [sp, #8]
 80132a6:	3708      	adds	r7, #8
 80132a8:	3101      	adds	r1, #1
 80132aa:	9102      	str	r1, [sp, #8]
 80132ac:	4221      	tst	r1, r4
 80132ae:	d1f4      	bne.n	801329a <_malloc_r+0x176>
 80132b0:	2103      	movs	r1, #3
 80132b2:	420b      	tst	r3, r1
 80132b4:	d000      	beq.n	80132b8 <_malloc_r+0x194>
 80132b6:	e0b7      	b.n	8013428 <_malloc_r+0x304>
 80132b8:	6843      	ldr	r3, [r0, #4]
 80132ba:	4393      	bics	r3, r2
 80132bc:	6043      	str	r3, [r0, #4]
 80132be:	9b04      	ldr	r3, [sp, #16]
 80132c0:	0052      	lsls	r2, r2, #1
 80132c2:	6859      	ldr	r1, [r3, #4]
 80132c4:	4291      	cmp	r1, r2
 80132c6:	d302      	bcc.n	80132ce <_malloc_r+0x1aa>
 80132c8:	2a00      	cmp	r2, #0
 80132ca:	d000      	beq.n	80132ce <_malloc_r+0x1aa>
 80132cc:	e0bb      	b.n	8013446 <_malloc_r+0x322>
 80132ce:	2203      	movs	r2, #3
 80132d0:	6883      	ldr	r3, [r0, #8]
 80132d2:	9302      	str	r3, [sp, #8]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	4393      	bics	r3, r2
 80132d8:	9303      	str	r3, [sp, #12]
 80132da:	42ab      	cmp	r3, r5
 80132dc:	d303      	bcc.n	80132e6 <_malloc_r+0x1c2>
 80132de:	1b59      	subs	r1, r3, r5
 80132e0:	290f      	cmp	r1, #15
 80132e2:	dd00      	ble.n	80132e6 <_malloc_r+0x1c2>
 80132e4:	e123      	b.n	801352e <_malloc_r+0x40a>
 80132e6:	9b02      	ldr	r3, [sp, #8]
 80132e8:	9a03      	ldr	r2, [sp, #12]
 80132ea:	2008      	movs	r0, #8
 80132ec:	189e      	adds	r6, r3, r2
 80132ee:	4b5a      	ldr	r3, [pc, #360]	; (8013458 <_malloc_r+0x334>)
 80132f0:	681f      	ldr	r7, [r3, #0]
 80132f2:	f001 fc31 	bl	8014b58 <sysconf>
 80132f6:	4b59      	ldr	r3, [pc, #356]	; (801345c <_malloc_r+0x338>)
 80132f8:	3710      	adds	r7, #16
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	197f      	adds	r7, r7, r5
 80132fe:	9004      	str	r0, [sp, #16]
 8013300:	3301      	adds	r3, #1
 8013302:	d003      	beq.n	801330c <_malloc_r+0x1e8>
 8013304:	1e7b      	subs	r3, r7, #1
 8013306:	181b      	adds	r3, r3, r0
 8013308:	4247      	negs	r7, r0
 801330a:	401f      	ands	r7, r3
 801330c:	0039      	movs	r1, r7
 801330e:	9801      	ldr	r0, [sp, #4]
 8013310:	f001 fbce 	bl	8014ab0 <_sbrk_r>
 8013314:	0004      	movs	r4, r0
 8013316:	1c43      	adds	r3, r0, #1
 8013318:	d100      	bne.n	801331c <_malloc_r+0x1f8>
 801331a:	e0de      	b.n	80134da <_malloc_r+0x3b6>
 801331c:	4286      	cmp	r6, r0
 801331e:	d904      	bls.n	801332a <_malloc_r+0x206>
 8013320:	4b4a      	ldr	r3, [pc, #296]	; (801344c <_malloc_r+0x328>)
 8013322:	9a02      	ldr	r2, [sp, #8]
 8013324:	429a      	cmp	r2, r3
 8013326:	d000      	beq.n	801332a <_malloc_r+0x206>
 8013328:	e0d7      	b.n	80134da <_malloc_r+0x3b6>
 801332a:	4a4d      	ldr	r2, [pc, #308]	; (8013460 <_malloc_r+0x33c>)
 801332c:	6813      	ldr	r3, [r2, #0]
 801332e:	18fb      	adds	r3, r7, r3
 8013330:	6013      	str	r3, [r2, #0]
 8013332:	9a04      	ldr	r2, [sp, #16]
 8013334:	3a01      	subs	r2, #1
 8013336:	42a6      	cmp	r6, r4
 8013338:	d000      	beq.n	801333c <_malloc_r+0x218>
 801333a:	e097      	b.n	801346c <_malloc_r+0x348>
 801333c:	4216      	tst	r6, r2
 801333e:	d000      	beq.n	8013342 <_malloc_r+0x21e>
 8013340:	e094      	b.n	801346c <_malloc_r+0x348>
 8013342:	4b42      	ldr	r3, [pc, #264]	; (801344c <_malloc_r+0x328>)
 8013344:	689a      	ldr	r2, [r3, #8]
 8013346:	9b03      	ldr	r3, [sp, #12]
 8013348:	19df      	adds	r7, r3, r7
 801334a:	2301      	movs	r3, #1
 801334c:	433b      	orrs	r3, r7
 801334e:	6053      	str	r3, [r2, #4]
 8013350:	4b43      	ldr	r3, [pc, #268]	; (8013460 <_malloc_r+0x33c>)
 8013352:	4a44      	ldr	r2, [pc, #272]	; (8013464 <_malloc_r+0x340>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	6811      	ldr	r1, [r2, #0]
 8013358:	428b      	cmp	r3, r1
 801335a:	d900      	bls.n	801335e <_malloc_r+0x23a>
 801335c:	6013      	str	r3, [r2, #0]
 801335e:	4a42      	ldr	r2, [pc, #264]	; (8013468 <_malloc_r+0x344>)
 8013360:	6811      	ldr	r1, [r2, #0]
 8013362:	428b      	cmp	r3, r1
 8013364:	d800      	bhi.n	8013368 <_malloc_r+0x244>
 8013366:	e0b8      	b.n	80134da <_malloc_r+0x3b6>
 8013368:	6013      	str	r3, [r2, #0]
 801336a:	e0b6      	b.n	80134da <_malloc_r+0x3b6>
 801336c:	0a50      	lsrs	r0, r2, #9
 801336e:	2804      	cmp	r0, #4
 8013370:	d811      	bhi.n	8013396 <_malloc_r+0x272>
 8013372:	0991      	lsrs	r1, r2, #6
 8013374:	3138      	adds	r1, #56	; 0x38
 8013376:	00cf      	lsls	r7, r1, #3
 8013378:	19bf      	adds	r7, r7, r6
 801337a:	68b8      	ldr	r0, [r7, #8]
 801337c:	4287      	cmp	r7, r0
 801337e:	d125      	bne.n	80133cc <_malloc_r+0x2a8>
 8013380:	2201      	movs	r2, #1
 8013382:	1089      	asrs	r1, r1, #2
 8013384:	408a      	lsls	r2, r1
 8013386:	4661      	mov	r1, ip
 8013388:	430a      	orrs	r2, r1
 801338a:	6072      	str	r2, [r6, #4]
 801338c:	60e7      	str	r7, [r4, #12]
 801338e:	60a0      	str	r0, [r4, #8]
 8013390:	60bc      	str	r4, [r7, #8]
 8013392:	60c4      	str	r4, [r0, #12]
 8013394:	e76b      	b.n	801326e <_malloc_r+0x14a>
 8013396:	2814      	cmp	r0, #20
 8013398:	d802      	bhi.n	80133a0 <_malloc_r+0x27c>
 801339a:	0001      	movs	r1, r0
 801339c:	315b      	adds	r1, #91	; 0x5b
 801339e:	e7ea      	b.n	8013376 <_malloc_r+0x252>
 80133a0:	2854      	cmp	r0, #84	; 0x54
 80133a2:	d802      	bhi.n	80133aa <_malloc_r+0x286>
 80133a4:	0b11      	lsrs	r1, r2, #12
 80133a6:	316e      	adds	r1, #110	; 0x6e
 80133a8:	e7e5      	b.n	8013376 <_malloc_r+0x252>
 80133aa:	21aa      	movs	r1, #170	; 0xaa
 80133ac:	0049      	lsls	r1, r1, #1
 80133ae:	4288      	cmp	r0, r1
 80133b0:	d802      	bhi.n	80133b8 <_malloc_r+0x294>
 80133b2:	0bd1      	lsrs	r1, r2, #15
 80133b4:	3177      	adds	r1, #119	; 0x77
 80133b6:	e7de      	b.n	8013376 <_malloc_r+0x252>
 80133b8:	4f26      	ldr	r7, [pc, #152]	; (8013454 <_malloc_r+0x330>)
 80133ba:	217e      	movs	r1, #126	; 0x7e
 80133bc:	42b8      	cmp	r0, r7
 80133be:	d8da      	bhi.n	8013376 <_malloc_r+0x252>
 80133c0:	0c91      	lsrs	r1, r2, #18
 80133c2:	317c      	adds	r1, #124	; 0x7c
 80133c4:	e7d7      	b.n	8013376 <_malloc_r+0x252>
 80133c6:	6880      	ldr	r0, [r0, #8]
 80133c8:	4287      	cmp	r7, r0
 80133ca:	d004      	beq.n	80133d6 <_malloc_r+0x2b2>
 80133cc:	2603      	movs	r6, #3
 80133ce:	6841      	ldr	r1, [r0, #4]
 80133d0:	43b1      	bics	r1, r6
 80133d2:	4291      	cmp	r1, r2
 80133d4:	d8f7      	bhi.n	80133c6 <_malloc_r+0x2a2>
 80133d6:	68c7      	ldr	r7, [r0, #12]
 80133d8:	e7d8      	b.n	801338c <_malloc_r+0x268>
 80133da:	2603      	movs	r6, #3
 80133dc:	6861      	ldr	r1, [r4, #4]
 80133de:	43b1      	bics	r1, r6
 80133e0:	9103      	str	r1, [sp, #12]
 80133e2:	68e6      	ldr	r6, [r4, #12]
 80133e4:	1b49      	subs	r1, r1, r5
 80133e6:	290f      	cmp	r1, #15
 80133e8:	dd10      	ble.n	801340c <_malloc_r+0x2e8>
 80133ea:	2201      	movs	r2, #1
 80133ec:	1963      	adds	r3, r4, r5
 80133ee:	4315      	orrs	r5, r2
 80133f0:	6065      	str	r5, [r4, #4]
 80133f2:	68a5      	ldr	r5, [r4, #8]
 80133f4:	430a      	orrs	r2, r1
 80133f6:	60ee      	str	r6, [r5, #12]
 80133f8:	60b5      	str	r5, [r6, #8]
 80133fa:	6143      	str	r3, [r0, #20]
 80133fc:	6103      	str	r3, [r0, #16]
 80133fe:	4814      	ldr	r0, [pc, #80]	; (8013450 <_malloc_r+0x32c>)
 8013400:	605a      	str	r2, [r3, #4]
 8013402:	60d8      	str	r0, [r3, #12]
 8013404:	6098      	str	r0, [r3, #8]
 8013406:	9b03      	ldr	r3, [sp, #12]
 8013408:	50e1      	str	r1, [r4, r3]
 801340a:	e6eb      	b.n	80131e4 <_malloc_r+0xc0>
 801340c:	2900      	cmp	r1, #0
 801340e:	db09      	blt.n	8013424 <_malloc_r+0x300>
 8013410:	9b03      	ldr	r3, [sp, #12]
 8013412:	18e1      	adds	r1, r4, r3
 8013414:	2301      	movs	r3, #1
 8013416:	684a      	ldr	r2, [r1, #4]
 8013418:	4313      	orrs	r3, r2
 801341a:	604b      	str	r3, [r1, #4]
 801341c:	68a3      	ldr	r3, [r4, #8]
 801341e:	60de      	str	r6, [r3, #12]
 8013420:	60b3      	str	r3, [r6, #8]
 8013422:	e6df      	b.n	80131e4 <_malloc_r+0xc0>
 8013424:	0034      	movs	r4, r6
 8013426:	e739      	b.n	801329c <_malloc_r+0x178>
 8013428:	2108      	movs	r1, #8
 801342a:	4249      	negs	r1, r1
 801342c:	448c      	add	ip, r1
 801342e:	4661      	mov	r1, ip
 8013430:	6889      	ldr	r1, [r1, #8]
 8013432:	3b01      	subs	r3, #1
 8013434:	4561      	cmp	r1, ip
 8013436:	d100      	bne.n	801343a <_malloc_r+0x316>
 8013438:	e73a      	b.n	80132b0 <_malloc_r+0x18c>
 801343a:	e740      	b.n	80132be <_malloc_r+0x19a>
 801343c:	3304      	adds	r3, #4
 801343e:	0052      	lsls	r2, r2, #1
 8013440:	420a      	tst	r2, r1
 8013442:	d0fb      	beq.n	801343c <_malloc_r+0x318>
 8013444:	e724      	b.n	8013290 <_malloc_r+0x16c>
 8013446:	9b02      	ldr	r3, [sp, #8]
 8013448:	e7fa      	b.n	8013440 <_malloc_r+0x31c>
 801344a:	46c0      	nop			; (mov r8, r8)
 801344c:	200000cc 	.word	0x200000cc
 8013450:	200000d4 	.word	0x200000d4
 8013454:	00000554 	.word	0x00000554
 8013458:	20006c78 	.word	0x20006c78
 801345c:	200004d4 	.word	0x200004d4
 8013460:	20006c48 	.word	0x20006c48
 8013464:	20006c70 	.word	0x20006c70
 8013468:	20006c74 	.word	0x20006c74
 801346c:	4934      	ldr	r1, [pc, #208]	; (8013540 <_malloc_r+0x41c>)
 801346e:	6808      	ldr	r0, [r1, #0]
 8013470:	3001      	adds	r0, #1
 8013472:	d140      	bne.n	80134f6 <_malloc_r+0x3d2>
 8013474:	600c      	str	r4, [r1, #0]
 8013476:	2107      	movs	r1, #7
 8013478:	0026      	movs	r6, r4
 801347a:	2300      	movs	r3, #0
 801347c:	400e      	ands	r6, r1
 801347e:	420c      	tst	r4, r1
 8013480:	d002      	beq.n	8013488 <_malloc_r+0x364>
 8013482:	3308      	adds	r3, #8
 8013484:	1b9b      	subs	r3, r3, r6
 8013486:	18e4      	adds	r4, r4, r3
 8013488:	19e1      	adds	r1, r4, r7
 801348a:	9105      	str	r1, [sp, #20]
 801348c:	9f05      	ldr	r7, [sp, #20]
 801348e:	9904      	ldr	r1, [sp, #16]
 8013490:	4017      	ands	r7, r2
 8013492:	18cb      	adds	r3, r1, r3
 8013494:	1bdf      	subs	r7, r3, r7
 8013496:	4017      	ands	r7, r2
 8013498:	0039      	movs	r1, r7
 801349a:	9801      	ldr	r0, [sp, #4]
 801349c:	f001 fb08 	bl	8014ab0 <_sbrk_r>
 80134a0:	1c43      	adds	r3, r0, #1
 80134a2:	d107      	bne.n	80134b4 <_malloc_r+0x390>
 80134a4:	1e37      	subs	r7, r6, #0
 80134a6:	9805      	ldr	r0, [sp, #20]
 80134a8:	d004      	beq.n	80134b4 <_malloc_r+0x390>
 80134aa:	0030      	movs	r0, r6
 80134ac:	2700      	movs	r7, #0
 80134ae:	9b05      	ldr	r3, [sp, #20]
 80134b0:	3808      	subs	r0, #8
 80134b2:	1818      	adds	r0, r3, r0
 80134b4:	4a23      	ldr	r2, [pc, #140]	; (8013544 <_malloc_r+0x420>)
 80134b6:	1b00      	subs	r0, r0, r4
 80134b8:	6813      	ldr	r3, [r2, #0]
 80134ba:	19c0      	adds	r0, r0, r7
 80134bc:	19db      	adds	r3, r3, r7
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	2201      	movs	r2, #1
 80134c2:	4b21      	ldr	r3, [pc, #132]	; (8013548 <_malloc_r+0x424>)
 80134c4:	9902      	ldr	r1, [sp, #8]
 80134c6:	4310      	orrs	r0, r2
 80134c8:	609c      	str	r4, [r3, #8]
 80134ca:	6060      	str	r0, [r4, #4]
 80134cc:	4299      	cmp	r1, r3
 80134ce:	d100      	bne.n	80134d2 <_malloc_r+0x3ae>
 80134d0:	e73e      	b.n	8013350 <_malloc_r+0x22c>
 80134d2:	9b03      	ldr	r3, [sp, #12]
 80134d4:	2b0f      	cmp	r3, #15
 80134d6:	d813      	bhi.n	8013500 <_malloc_r+0x3dc>
 80134d8:	6062      	str	r2, [r4, #4]
 80134da:	2203      	movs	r2, #3
 80134dc:	4b1a      	ldr	r3, [pc, #104]	; (8013548 <_malloc_r+0x424>)
 80134de:	689b      	ldr	r3, [r3, #8]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	4393      	bics	r3, r2
 80134e4:	1b59      	subs	r1, r3, r5
 80134e6:	42ab      	cmp	r3, r5
 80134e8:	d301      	bcc.n	80134ee <_malloc_r+0x3ca>
 80134ea:	290f      	cmp	r1, #15
 80134ec:	dc1f      	bgt.n	801352e <_malloc_r+0x40a>
 80134ee:	9801      	ldr	r0, [sp, #4]
 80134f0:	f000 f834 	bl	801355c <__malloc_unlock>
 80134f4:	e623      	b.n	801313e <_malloc_r+0x1a>
 80134f6:	4913      	ldr	r1, [pc, #76]	; (8013544 <_malloc_r+0x420>)
 80134f8:	1ba6      	subs	r6, r4, r6
 80134fa:	18f6      	adds	r6, r6, r3
 80134fc:	600e      	str	r6, [r1, #0]
 80134fe:	e7ba      	b.n	8013476 <_malloc_r+0x352>
 8013500:	2107      	movs	r1, #7
 8013502:	9b03      	ldr	r3, [sp, #12]
 8013504:	3b0c      	subs	r3, #12
 8013506:	438b      	bics	r3, r1
 8013508:	9902      	ldr	r1, [sp, #8]
 801350a:	6849      	ldr	r1, [r1, #4]
 801350c:	400a      	ands	r2, r1
 801350e:	9902      	ldr	r1, [sp, #8]
 8013510:	431a      	orrs	r2, r3
 8013512:	604a      	str	r2, [r1, #4]
 8013514:	18ca      	adds	r2, r1, r3
 8013516:	2105      	movs	r1, #5
 8013518:	6051      	str	r1, [r2, #4]
 801351a:	6091      	str	r1, [r2, #8]
 801351c:	2b0f      	cmp	r3, #15
 801351e:	d800      	bhi.n	8013522 <_malloc_r+0x3fe>
 8013520:	e716      	b.n	8013350 <_malloc_r+0x22c>
 8013522:	9902      	ldr	r1, [sp, #8]
 8013524:	9801      	ldr	r0, [sp, #4]
 8013526:	3108      	adds	r1, #8
 8013528:	f001 fba0 	bl	8014c6c <_free_r>
 801352c:	e710      	b.n	8013350 <_malloc_r+0x22c>
 801352e:	2201      	movs	r2, #1
 8013530:	0013      	movs	r3, r2
 8013532:	4805      	ldr	r0, [pc, #20]	; (8013548 <_malloc_r+0x424>)
 8013534:	432b      	orrs	r3, r5
 8013536:	6884      	ldr	r4, [r0, #8]
 8013538:	6063      	str	r3, [r4, #4]
 801353a:	1963      	adds	r3, r4, r5
 801353c:	6083      	str	r3, [r0, #8]
 801353e:	e623      	b.n	8013188 <_malloc_r+0x64>
 8013540:	200004d4 	.word	0x200004d4
 8013544:	20006c48 	.word	0x20006c48
 8013548:	200000cc 	.word	0x200000cc

0801354c <__malloc_lock>:
 801354c:	b510      	push	{r4, lr}
 801354e:	4802      	ldr	r0, [pc, #8]	; (8013558 <__malloc_lock+0xc>)
 8013550:	f001 fb00 	bl	8014b54 <__retarget_lock_acquire_recursive>
 8013554:	bd10      	pop	{r4, pc}
 8013556:	46c0      	nop			; (mov r8, r8)
 8013558:	20006dbd 	.word	0x20006dbd

0801355c <__malloc_unlock>:
 801355c:	b510      	push	{r4, lr}
 801355e:	4802      	ldr	r0, [pc, #8]	; (8013568 <__malloc_unlock+0xc>)
 8013560:	f001 faf9 	bl	8014b56 <__retarget_lock_release_recursive>
 8013564:	bd10      	pop	{r4, pc}
 8013566:	46c0      	nop			; (mov r8, r8)
 8013568:	20006dbd 	.word	0x20006dbd

0801356c <rand>:
 801356c:	4b09      	ldr	r3, [pc, #36]	; (8013594 <rand+0x28>)
 801356e:	b510      	push	{r4, lr}
 8013570:	681c      	ldr	r4, [r3, #0]
 8013572:	4a09      	ldr	r2, [pc, #36]	; (8013598 <rand+0x2c>)
 8013574:	3498      	adds	r4, #152	; 0x98
 8013576:	6820      	ldr	r0, [r4, #0]
 8013578:	6861      	ldr	r1, [r4, #4]
 801357a:	4b08      	ldr	r3, [pc, #32]	; (801359c <rand+0x30>)
 801357c:	f7ed f800 	bl	8000580 <__aeabi_lmul>
 8013580:	2201      	movs	r2, #1
 8013582:	2300      	movs	r3, #0
 8013584:	1880      	adds	r0, r0, r2
 8013586:	4159      	adcs	r1, r3
 8013588:	6020      	str	r0, [r4, #0]
 801358a:	6061      	str	r1, [r4, #4]
 801358c:	0048      	lsls	r0, r1, #1
 801358e:	0840      	lsrs	r0, r0, #1
 8013590:	bd10      	pop	{r4, pc}
 8013592:	46c0      	nop			; (mov r8, r8)
 8013594:	20000778 	.word	0x20000778
 8013598:	4c957f2d 	.word	0x4c957f2d
 801359c:	5851f42d 	.word	0x5851f42d

080135a0 <realloc>:
 80135a0:	b510      	push	{r4, lr}
 80135a2:	4b03      	ldr	r3, [pc, #12]	; (80135b0 <realloc+0x10>)
 80135a4:	000a      	movs	r2, r1
 80135a6:	0001      	movs	r1, r0
 80135a8:	6818      	ldr	r0, [r3, #0]
 80135aa:	f000 f803 	bl	80135b4 <_realloc_r>
 80135ae:	bd10      	pop	{r4, pc}
 80135b0:	20000778 	.word	0x20000778

080135b4 <_realloc_r>:
 80135b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135b6:	b087      	sub	sp, #28
 80135b8:	1e0c      	subs	r4, r1, #0
 80135ba:	9001      	str	r0, [sp, #4]
 80135bc:	9205      	str	r2, [sp, #20]
 80135be:	d106      	bne.n	80135ce <_realloc_r+0x1a>
 80135c0:	0011      	movs	r1, r2
 80135c2:	f7ff fdaf 	bl	8013124 <_malloc_r>
 80135c6:	0007      	movs	r7, r0
 80135c8:	0038      	movs	r0, r7
 80135ca:	b007      	add	sp, #28
 80135cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ce:	9801      	ldr	r0, [sp, #4]
 80135d0:	f7ff ffbc 	bl	801354c <__malloc_lock>
 80135d4:	0023      	movs	r3, r4
 80135d6:	3b08      	subs	r3, #8
 80135d8:	685f      	ldr	r7, [r3, #4]
 80135da:	9304      	str	r3, [sp, #16]
 80135dc:	9b05      	ldr	r3, [sp, #20]
 80135de:	330b      	adds	r3, #11
 80135e0:	2b16      	cmp	r3, #22
 80135e2:	d908      	bls.n	80135f6 <_realloc_r+0x42>
 80135e4:	2207      	movs	r2, #7
 80135e6:	4393      	bics	r3, r2
 80135e8:	9300      	str	r3, [sp, #0]
 80135ea:	d506      	bpl.n	80135fa <_realloc_r+0x46>
 80135ec:	230c      	movs	r3, #12
 80135ee:	9a01      	ldr	r2, [sp, #4]
 80135f0:	2700      	movs	r7, #0
 80135f2:	6013      	str	r3, [r2, #0]
 80135f4:	e7e8      	b.n	80135c8 <_realloc_r+0x14>
 80135f6:	2310      	movs	r3, #16
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	9b00      	ldr	r3, [sp, #0]
 80135fc:	9a05      	ldr	r2, [sp, #20]
 80135fe:	4293      	cmp	r3, r2
 8013600:	d3f4      	bcc.n	80135ec <_realloc_r+0x38>
 8013602:	9b04      	ldr	r3, [sp, #16]
 8013604:	003a      	movs	r2, r7
 8013606:	9302      	str	r3, [sp, #8]
 8013608:	2303      	movs	r3, #3
 801360a:	439a      	bics	r2, r3
 801360c:	9b00      	ldr	r3, [sp, #0]
 801360e:	9203      	str	r2, [sp, #12]
 8013610:	4293      	cmp	r3, r2
 8013612:	dc00      	bgt.n	8013616 <_realloc_r+0x62>
 8013614:	e169      	b.n	80138ea <_realloc_r+0x336>
 8013616:	9b04      	ldr	r3, [sp, #16]
 8013618:	48b8      	ldr	r0, [pc, #736]	; (80138fc <_realloc_r+0x348>)
 801361a:	189b      	adds	r3, r3, r2
 801361c:	6882      	ldr	r2, [r0, #8]
 801361e:	4694      	mov	ip, r2
 8013620:	685a      	ldr	r2, [r3, #4]
 8013622:	459c      	cmp	ip, r3
 8013624:	d006      	beq.n	8013634 <_realloc_r+0x80>
 8013626:	2501      	movs	r5, #1
 8013628:	0011      	movs	r1, r2
 801362a:	43a9      	bics	r1, r5
 801362c:	1859      	adds	r1, r3, r1
 801362e:	6849      	ldr	r1, [r1, #4]
 8013630:	4229      	tst	r1, r5
 8013632:	d144      	bne.n	80136be <_realloc_r+0x10a>
 8013634:	2103      	movs	r1, #3
 8013636:	438a      	bics	r2, r1
 8013638:	9903      	ldr	r1, [sp, #12]
 801363a:	188e      	adds	r6, r1, r2
 801363c:	9900      	ldr	r1, [sp, #0]
 801363e:	459c      	cmp	ip, r3
 8013640:	d117      	bne.n	8013672 <_realloc_r+0xbe>
 8013642:	3110      	adds	r1, #16
 8013644:	42b1      	cmp	r1, r6
 8013646:	dc3c      	bgt.n	80136c2 <_realloc_r+0x10e>
 8013648:	9a00      	ldr	r2, [sp, #0]
 801364a:	2101      	movs	r1, #1
 801364c:	4694      	mov	ip, r2
 801364e:	1ab6      	subs	r6, r6, r2
 8013650:	0022      	movs	r2, r4
 8013652:	9b04      	ldr	r3, [sp, #16]
 8013654:	430e      	orrs	r6, r1
 8013656:	4463      	add	r3, ip
 8013658:	6083      	str	r3, [r0, #8]
 801365a:	3a08      	subs	r2, #8
 801365c:	605e      	str	r6, [r3, #4]
 801365e:	6853      	ldr	r3, [r2, #4]
 8013660:	9801      	ldr	r0, [sp, #4]
 8013662:	400b      	ands	r3, r1
 8013664:	4661      	mov	r1, ip
 8013666:	430b      	orrs	r3, r1
 8013668:	6053      	str	r3, [r2, #4]
 801366a:	f7ff ff77 	bl	801355c <__malloc_unlock>
 801366e:	0027      	movs	r7, r4
 8013670:	e7aa      	b.n	80135c8 <_realloc_r+0x14>
 8013672:	42b1      	cmp	r1, r6
 8013674:	dc25      	bgt.n	80136c2 <_realloc_r+0x10e>
 8013676:	68da      	ldr	r2, [r3, #12]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	60da      	str	r2, [r3, #12]
 801367c:	6093      	str	r3, [r2, #8]
 801367e:	9b00      	ldr	r3, [sp, #0]
 8013680:	9a02      	ldr	r2, [sp, #8]
 8013682:	1af4      	subs	r4, r6, r3
 8013684:	9b02      	ldr	r3, [sp, #8]
 8013686:	1992      	adds	r2, r2, r6
 8013688:	6858      	ldr	r0, [r3, #4]
 801368a:	2301      	movs	r3, #1
 801368c:	4018      	ands	r0, r3
 801368e:	2c0f      	cmp	r4, #15
 8013690:	d800      	bhi.n	8013694 <_realloc_r+0xe0>
 8013692:	e12c      	b.n	80138ee <_realloc_r+0x33a>
 8013694:	9d00      	ldr	r5, [sp, #0]
 8013696:	9902      	ldr	r1, [sp, #8]
 8013698:	4328      	orrs	r0, r5
 801369a:	1949      	adds	r1, r1, r5
 801369c:	9d02      	ldr	r5, [sp, #8]
 801369e:	431c      	orrs	r4, r3
 80136a0:	6068      	str	r0, [r5, #4]
 80136a2:	604c      	str	r4, [r1, #4]
 80136a4:	6850      	ldr	r0, [r2, #4]
 80136a6:	3108      	adds	r1, #8
 80136a8:	4303      	orrs	r3, r0
 80136aa:	6053      	str	r3, [r2, #4]
 80136ac:	9801      	ldr	r0, [sp, #4]
 80136ae:	f001 fadd 	bl	8014c6c <_free_r>
 80136b2:	9801      	ldr	r0, [sp, #4]
 80136b4:	f7ff ff52 	bl	801355c <__malloc_unlock>
 80136b8:	9f02      	ldr	r7, [sp, #8]
 80136ba:	3708      	adds	r7, #8
 80136bc:	e784      	b.n	80135c8 <_realloc_r+0x14>
 80136be:	2200      	movs	r2, #0
 80136c0:	0013      	movs	r3, r2
 80136c2:	07ff      	lsls	r7, r7, #31
 80136c4:	d500      	bpl.n	80136c8 <_realloc_r+0x114>
 80136c6:	e0c6      	b.n	8013856 <_realloc_r+0x2a2>
 80136c8:	0021      	movs	r1, r4
 80136ca:	2003      	movs	r0, #3
 80136cc:	3908      	subs	r1, #8
 80136ce:	680d      	ldr	r5, [r1, #0]
 80136d0:	9904      	ldr	r1, [sp, #16]
 80136d2:	1b4d      	subs	r5, r1, r5
 80136d4:	6869      	ldr	r1, [r5, #4]
 80136d6:	4381      	bics	r1, r0
 80136d8:	9803      	ldr	r0, [sp, #12]
 80136da:	180f      	adds	r7, r1, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d100      	bne.n	80136e2 <_realloc_r+0x12e>
 80136e0:	e084      	b.n	80137ec <_realloc_r+0x238>
 80136e2:	19d6      	adds	r6, r2, r7
 80136e4:	459c      	cmp	ip, r3
 80136e6:	d148      	bne.n	801377a <_realloc_r+0x1c6>
 80136e8:	9b00      	ldr	r3, [sp, #0]
 80136ea:	3310      	adds	r3, #16
 80136ec:	42b3      	cmp	r3, r6
 80136ee:	dc7d      	bgt.n	80137ec <_realloc_r+0x238>
 80136f0:	68aa      	ldr	r2, [r5, #8]
 80136f2:	68eb      	ldr	r3, [r5, #12]
 80136f4:	002f      	movs	r7, r5
 80136f6:	60d3      	str	r3, [r2, #12]
 80136f8:	609a      	str	r2, [r3, #8]
 80136fa:	0002      	movs	r2, r0
 80136fc:	3a04      	subs	r2, #4
 80136fe:	3708      	adds	r7, #8
 8013700:	2a24      	cmp	r2, #36	; 0x24
 8013702:	d835      	bhi.n	8013770 <_realloc_r+0x1bc>
 8013704:	003b      	movs	r3, r7
 8013706:	2a13      	cmp	r2, #19
 8013708:	d908      	bls.n	801371c <_realloc_r+0x168>
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	60ab      	str	r3, [r5, #8]
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	60eb      	str	r3, [r5, #12]
 8013712:	2a1b      	cmp	r2, #27
 8013714:	d81a      	bhi.n	801374c <_realloc_r+0x198>
 8013716:	002b      	movs	r3, r5
 8013718:	3408      	adds	r4, #8
 801371a:	3310      	adds	r3, #16
 801371c:	6822      	ldr	r2, [r4, #0]
 801371e:	601a      	str	r2, [r3, #0]
 8013720:	6862      	ldr	r2, [r4, #4]
 8013722:	605a      	str	r2, [r3, #4]
 8013724:	68a2      	ldr	r2, [r4, #8]
 8013726:	609a      	str	r2, [r3, #8]
 8013728:	9b00      	ldr	r3, [sp, #0]
 801372a:	4a74      	ldr	r2, [pc, #464]	; (80138fc <_realloc_r+0x348>)
 801372c:	18eb      	adds	r3, r5, r3
 801372e:	6093      	str	r3, [r2, #8]
 8013730:	9a00      	ldr	r2, [sp, #0]
 8013732:	1ab6      	subs	r6, r6, r2
 8013734:	2201      	movs	r2, #1
 8013736:	4316      	orrs	r6, r2
 8013738:	605e      	str	r6, [r3, #4]
 801373a:	686b      	ldr	r3, [r5, #4]
 801373c:	4013      	ands	r3, r2
 801373e:	9a00      	ldr	r2, [sp, #0]
 8013740:	4313      	orrs	r3, r2
 8013742:	606b      	str	r3, [r5, #4]
 8013744:	9801      	ldr	r0, [sp, #4]
 8013746:	f7ff ff09 	bl	801355c <__malloc_unlock>
 801374a:	e73d      	b.n	80135c8 <_realloc_r+0x14>
 801374c:	68a3      	ldr	r3, [r4, #8]
 801374e:	612b      	str	r3, [r5, #16]
 8013750:	68e3      	ldr	r3, [r4, #12]
 8013752:	616b      	str	r3, [r5, #20]
 8013754:	2a24      	cmp	r2, #36	; 0x24
 8013756:	d003      	beq.n	8013760 <_realloc_r+0x1ac>
 8013758:	002b      	movs	r3, r5
 801375a:	3410      	adds	r4, #16
 801375c:	3318      	adds	r3, #24
 801375e:	e7dd      	b.n	801371c <_realloc_r+0x168>
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	61ab      	str	r3, [r5, #24]
 8013764:	002b      	movs	r3, r5
 8013766:	6962      	ldr	r2, [r4, #20]
 8013768:	3320      	adds	r3, #32
 801376a:	61ea      	str	r2, [r5, #28]
 801376c:	3418      	adds	r4, #24
 801376e:	e7d5      	b.n	801371c <_realloc_r+0x168>
 8013770:	0021      	movs	r1, r4
 8013772:	0038      	movs	r0, r7
 8013774:	f001 f8c4 	bl	8014900 <memmove>
 8013778:	e7d6      	b.n	8013728 <_realloc_r+0x174>
 801377a:	9a00      	ldr	r2, [sp, #0]
 801377c:	42b2      	cmp	r2, r6
 801377e:	dc35      	bgt.n	80137ec <_realloc_r+0x238>
 8013780:	0028      	movs	r0, r5
 8013782:	68da      	ldr	r2, [r3, #12]
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	3008      	adds	r0, #8
 8013788:	60da      	str	r2, [r3, #12]
 801378a:	6093      	str	r3, [r2, #8]
 801378c:	68aa      	ldr	r2, [r5, #8]
 801378e:	68eb      	ldr	r3, [r5, #12]
 8013790:	60d3      	str	r3, [r2, #12]
 8013792:	609a      	str	r2, [r3, #8]
 8013794:	9a03      	ldr	r2, [sp, #12]
 8013796:	3a04      	subs	r2, #4
 8013798:	2a24      	cmp	r2, #36	; 0x24
 801379a:	d823      	bhi.n	80137e4 <_realloc_r+0x230>
 801379c:	2a13      	cmp	r2, #19
 801379e:	d907      	bls.n	80137b0 <_realloc_r+0x1fc>
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	60ab      	str	r3, [r5, #8]
 80137a4:	6863      	ldr	r3, [r4, #4]
 80137a6:	60eb      	str	r3, [r5, #12]
 80137a8:	2a1b      	cmp	r2, #27
 80137aa:	d809      	bhi.n	80137c0 <_realloc_r+0x20c>
 80137ac:	3408      	adds	r4, #8
 80137ae:	3008      	adds	r0, #8
 80137b0:	6823      	ldr	r3, [r4, #0]
 80137b2:	6003      	str	r3, [r0, #0]
 80137b4:	6863      	ldr	r3, [r4, #4]
 80137b6:	6043      	str	r3, [r0, #4]
 80137b8:	68a3      	ldr	r3, [r4, #8]
 80137ba:	6083      	str	r3, [r0, #8]
 80137bc:	9502      	str	r5, [sp, #8]
 80137be:	e75e      	b.n	801367e <_realloc_r+0xca>
 80137c0:	68a3      	ldr	r3, [r4, #8]
 80137c2:	612b      	str	r3, [r5, #16]
 80137c4:	68e3      	ldr	r3, [r4, #12]
 80137c6:	616b      	str	r3, [r5, #20]
 80137c8:	2a24      	cmp	r2, #36	; 0x24
 80137ca:	d003      	beq.n	80137d4 <_realloc_r+0x220>
 80137cc:	0028      	movs	r0, r5
 80137ce:	3410      	adds	r4, #16
 80137d0:	3018      	adds	r0, #24
 80137d2:	e7ed      	b.n	80137b0 <_realloc_r+0x1fc>
 80137d4:	0028      	movs	r0, r5
 80137d6:	6923      	ldr	r3, [r4, #16]
 80137d8:	3020      	adds	r0, #32
 80137da:	61ab      	str	r3, [r5, #24]
 80137dc:	6963      	ldr	r3, [r4, #20]
 80137de:	3418      	adds	r4, #24
 80137e0:	61eb      	str	r3, [r5, #28]
 80137e2:	e7e5      	b.n	80137b0 <_realloc_r+0x1fc>
 80137e4:	0021      	movs	r1, r4
 80137e6:	f001 f88b 	bl	8014900 <memmove>
 80137ea:	e7e7      	b.n	80137bc <_realloc_r+0x208>
 80137ec:	9b00      	ldr	r3, [sp, #0]
 80137ee:	42bb      	cmp	r3, r7
 80137f0:	dc31      	bgt.n	8013856 <_realloc_r+0x2a2>
 80137f2:	0028      	movs	r0, r5
 80137f4:	68aa      	ldr	r2, [r5, #8]
 80137f6:	68eb      	ldr	r3, [r5, #12]
 80137f8:	3008      	adds	r0, #8
 80137fa:	60d3      	str	r3, [r2, #12]
 80137fc:	609a      	str	r2, [r3, #8]
 80137fe:	9a03      	ldr	r2, [sp, #12]
 8013800:	3a04      	subs	r2, #4
 8013802:	2a24      	cmp	r2, #36	; 0x24
 8013804:	d823      	bhi.n	801384e <_realloc_r+0x29a>
 8013806:	2a13      	cmp	r2, #19
 8013808:	d907      	bls.n	801381a <_realloc_r+0x266>
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	60ab      	str	r3, [r5, #8]
 801380e:	6863      	ldr	r3, [r4, #4]
 8013810:	60eb      	str	r3, [r5, #12]
 8013812:	2a1b      	cmp	r2, #27
 8013814:	d809      	bhi.n	801382a <_realloc_r+0x276>
 8013816:	3408      	adds	r4, #8
 8013818:	3008      	adds	r0, #8
 801381a:	6823      	ldr	r3, [r4, #0]
 801381c:	6003      	str	r3, [r0, #0]
 801381e:	6863      	ldr	r3, [r4, #4]
 8013820:	6043      	str	r3, [r0, #4]
 8013822:	68a3      	ldr	r3, [r4, #8]
 8013824:	6083      	str	r3, [r0, #8]
 8013826:	003e      	movs	r6, r7
 8013828:	e7c8      	b.n	80137bc <_realloc_r+0x208>
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	612b      	str	r3, [r5, #16]
 801382e:	68e3      	ldr	r3, [r4, #12]
 8013830:	616b      	str	r3, [r5, #20]
 8013832:	2a24      	cmp	r2, #36	; 0x24
 8013834:	d003      	beq.n	801383e <_realloc_r+0x28a>
 8013836:	0028      	movs	r0, r5
 8013838:	3410      	adds	r4, #16
 801383a:	3018      	adds	r0, #24
 801383c:	e7ed      	b.n	801381a <_realloc_r+0x266>
 801383e:	0028      	movs	r0, r5
 8013840:	6923      	ldr	r3, [r4, #16]
 8013842:	3020      	adds	r0, #32
 8013844:	61ab      	str	r3, [r5, #24]
 8013846:	6963      	ldr	r3, [r4, #20]
 8013848:	3418      	adds	r4, #24
 801384a:	61eb      	str	r3, [r5, #28]
 801384c:	e7e5      	b.n	801381a <_realloc_r+0x266>
 801384e:	0021      	movs	r1, r4
 8013850:	f001 f856 	bl	8014900 <memmove>
 8013854:	e7e7      	b.n	8013826 <_realloc_r+0x272>
 8013856:	9905      	ldr	r1, [sp, #20]
 8013858:	9801      	ldr	r0, [sp, #4]
 801385a:	f7ff fc63 	bl	8013124 <_malloc_r>
 801385e:	1e07      	subs	r7, r0, #0
 8013860:	d100      	bne.n	8013864 <_realloc_r+0x2b0>
 8013862:	e76f      	b.n	8013744 <_realloc_r+0x190>
 8013864:	0023      	movs	r3, r4
 8013866:	2201      	movs	r2, #1
 8013868:	3b08      	subs	r3, #8
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	4393      	bics	r3, r2
 801386e:	9a04      	ldr	r2, [sp, #16]
 8013870:	18d3      	adds	r3, r2, r3
 8013872:	0002      	movs	r2, r0
 8013874:	3a08      	subs	r2, #8
 8013876:	4293      	cmp	r3, r2
 8013878:	d105      	bne.n	8013886 <_realloc_r+0x2d2>
 801387a:	685e      	ldr	r6, [r3, #4]
 801387c:	2303      	movs	r3, #3
 801387e:	439e      	bics	r6, r3
 8013880:	9b03      	ldr	r3, [sp, #12]
 8013882:	18f6      	adds	r6, r6, r3
 8013884:	e6fb      	b.n	801367e <_realloc_r+0xca>
 8013886:	9a03      	ldr	r2, [sp, #12]
 8013888:	3a04      	subs	r2, #4
 801388a:	2a24      	cmp	r2, #36	; 0x24
 801388c:	d829      	bhi.n	80138e2 <_realloc_r+0x32e>
 801388e:	0003      	movs	r3, r0
 8013890:	0021      	movs	r1, r4
 8013892:	2a13      	cmp	r2, #19
 8013894:	d908      	bls.n	80138a8 <_realloc_r+0x2f4>
 8013896:	6823      	ldr	r3, [r4, #0]
 8013898:	6003      	str	r3, [r0, #0]
 801389a:	6863      	ldr	r3, [r4, #4]
 801389c:	6043      	str	r3, [r0, #4]
 801389e:	2a1b      	cmp	r2, #27
 80138a0:	d80d      	bhi.n	80138be <_realloc_r+0x30a>
 80138a2:	0003      	movs	r3, r0
 80138a4:	3108      	adds	r1, #8
 80138a6:	3308      	adds	r3, #8
 80138a8:	680a      	ldr	r2, [r1, #0]
 80138aa:	601a      	str	r2, [r3, #0]
 80138ac:	684a      	ldr	r2, [r1, #4]
 80138ae:	605a      	str	r2, [r3, #4]
 80138b0:	688a      	ldr	r2, [r1, #8]
 80138b2:	609a      	str	r2, [r3, #8]
 80138b4:	0021      	movs	r1, r4
 80138b6:	9801      	ldr	r0, [sp, #4]
 80138b8:	f001 f9d8 	bl	8014c6c <_free_r>
 80138bc:	e742      	b.n	8013744 <_realloc_r+0x190>
 80138be:	68a3      	ldr	r3, [r4, #8]
 80138c0:	6083      	str	r3, [r0, #8]
 80138c2:	68e3      	ldr	r3, [r4, #12]
 80138c4:	60c3      	str	r3, [r0, #12]
 80138c6:	2a24      	cmp	r2, #36	; 0x24
 80138c8:	d003      	beq.n	80138d2 <_realloc_r+0x31e>
 80138ca:	0003      	movs	r3, r0
 80138cc:	3110      	adds	r1, #16
 80138ce:	3310      	adds	r3, #16
 80138d0:	e7ea      	b.n	80138a8 <_realloc_r+0x2f4>
 80138d2:	6923      	ldr	r3, [r4, #16]
 80138d4:	3118      	adds	r1, #24
 80138d6:	6103      	str	r3, [r0, #16]
 80138d8:	0003      	movs	r3, r0
 80138da:	6962      	ldr	r2, [r4, #20]
 80138dc:	3318      	adds	r3, #24
 80138de:	6142      	str	r2, [r0, #20]
 80138e0:	e7e2      	b.n	80138a8 <_realloc_r+0x2f4>
 80138e2:	0021      	movs	r1, r4
 80138e4:	f001 f80c 	bl	8014900 <memmove>
 80138e8:	e7e4      	b.n	80138b4 <_realloc_r+0x300>
 80138ea:	9e03      	ldr	r6, [sp, #12]
 80138ec:	e6c7      	b.n	801367e <_realloc_r+0xca>
 80138ee:	9902      	ldr	r1, [sp, #8]
 80138f0:	4306      	orrs	r6, r0
 80138f2:	604e      	str	r6, [r1, #4]
 80138f4:	6851      	ldr	r1, [r2, #4]
 80138f6:	430b      	orrs	r3, r1
 80138f8:	6053      	str	r3, [r2, #4]
 80138fa:	e6da      	b.n	80136b2 <_realloc_r+0xfe>
 80138fc:	200000cc 	.word	0x200000cc

08013900 <sulp>:
 8013900:	b570      	push	{r4, r5, r6, lr}
 8013902:	0016      	movs	r6, r2
 8013904:	000d      	movs	r5, r1
 8013906:	f002 f907 	bl	8015b18 <__ulp>
 801390a:	2e00      	cmp	r6, #0
 801390c:	d00d      	beq.n	801392a <sulp+0x2a>
 801390e:	236b      	movs	r3, #107	; 0x6b
 8013910:	006a      	lsls	r2, r5, #1
 8013912:	0d52      	lsrs	r2, r2, #21
 8013914:	1a9b      	subs	r3, r3, r2
 8013916:	2b00      	cmp	r3, #0
 8013918:	dd07      	ble.n	801392a <sulp+0x2a>
 801391a:	2400      	movs	r4, #0
 801391c:	4a03      	ldr	r2, [pc, #12]	; (801392c <sulp+0x2c>)
 801391e:	051b      	lsls	r3, r3, #20
 8013920:	189d      	adds	r5, r3, r2
 8013922:	002b      	movs	r3, r5
 8013924:	0022      	movs	r2, r4
 8013926:	f7ee fb0d 	bl	8001f44 <__aeabi_dmul>
 801392a:	bd70      	pop	{r4, r5, r6, pc}
 801392c:	3ff00000 	.word	0x3ff00000

08013930 <_strtod_l>:
 8013930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013932:	b0a1      	sub	sp, #132	; 0x84
 8013934:	9219      	str	r2, [sp, #100]	; 0x64
 8013936:	2200      	movs	r2, #0
 8013938:	2600      	movs	r6, #0
 801393a:	2700      	movs	r7, #0
 801393c:	9004      	str	r0, [sp, #16]
 801393e:	9107      	str	r1, [sp, #28]
 8013940:	921c      	str	r2, [sp, #112]	; 0x70
 8013942:	911b      	str	r1, [sp, #108]	; 0x6c
 8013944:	780a      	ldrb	r2, [r1, #0]
 8013946:	2a2b      	cmp	r2, #43	; 0x2b
 8013948:	d055      	beq.n	80139f6 <_strtod_l+0xc6>
 801394a:	d841      	bhi.n	80139d0 <_strtod_l+0xa0>
 801394c:	2a0d      	cmp	r2, #13
 801394e:	d83b      	bhi.n	80139c8 <_strtod_l+0x98>
 8013950:	2a08      	cmp	r2, #8
 8013952:	d83b      	bhi.n	80139cc <_strtod_l+0x9c>
 8013954:	2a00      	cmp	r2, #0
 8013956:	d044      	beq.n	80139e2 <_strtod_l+0xb2>
 8013958:	2200      	movs	r2, #0
 801395a:	920f      	str	r2, [sp, #60]	; 0x3c
 801395c:	2100      	movs	r1, #0
 801395e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013960:	9109      	str	r1, [sp, #36]	; 0x24
 8013962:	782a      	ldrb	r2, [r5, #0]
 8013964:	2a30      	cmp	r2, #48	; 0x30
 8013966:	d000      	beq.n	801396a <_strtod_l+0x3a>
 8013968:	e085      	b.n	8013a76 <_strtod_l+0x146>
 801396a:	786a      	ldrb	r2, [r5, #1]
 801396c:	3120      	adds	r1, #32
 801396e:	438a      	bics	r2, r1
 8013970:	2a58      	cmp	r2, #88	; 0x58
 8013972:	d000      	beq.n	8013976 <_strtod_l+0x46>
 8013974:	e075      	b.n	8013a62 <_strtod_l+0x132>
 8013976:	9302      	str	r3, [sp, #8]
 8013978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801397a:	4a97      	ldr	r2, [pc, #604]	; (8013bd8 <_strtod_l+0x2a8>)
 801397c:	9301      	str	r3, [sp, #4]
 801397e:	ab1c      	add	r3, sp, #112	; 0x70
 8013980:	9300      	str	r3, [sp, #0]
 8013982:	9804      	ldr	r0, [sp, #16]
 8013984:	ab1d      	add	r3, sp, #116	; 0x74
 8013986:	a91b      	add	r1, sp, #108	; 0x6c
 8013988:	f001 fa8c 	bl	8014ea4 <__gethex>
 801398c:	230f      	movs	r3, #15
 801398e:	0002      	movs	r2, r0
 8013990:	401a      	ands	r2, r3
 8013992:	0004      	movs	r4, r0
 8013994:	9205      	str	r2, [sp, #20]
 8013996:	4218      	tst	r0, r3
 8013998:	d005      	beq.n	80139a6 <_strtod_l+0x76>
 801399a:	2a06      	cmp	r2, #6
 801399c:	d12d      	bne.n	80139fa <_strtod_l+0xca>
 801399e:	1c6b      	adds	r3, r5, #1
 80139a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80139a2:	2300      	movs	r3, #0
 80139a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80139a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d002      	beq.n	80139b2 <_strtod_l+0x82>
 80139ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80139b0:	6013      	str	r3, [r2, #0]
 80139b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d01b      	beq.n	80139f0 <_strtod_l+0xc0>
 80139b8:	2380      	movs	r3, #128	; 0x80
 80139ba:	0032      	movs	r2, r6
 80139bc:	061b      	lsls	r3, r3, #24
 80139be:	18fb      	adds	r3, r7, r3
 80139c0:	0010      	movs	r0, r2
 80139c2:	0019      	movs	r1, r3
 80139c4:	b021      	add	sp, #132	; 0x84
 80139c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139c8:	2a20      	cmp	r2, #32
 80139ca:	d1c5      	bne.n	8013958 <_strtod_l+0x28>
 80139cc:	3101      	adds	r1, #1
 80139ce:	e7b8      	b.n	8013942 <_strtod_l+0x12>
 80139d0:	2a2d      	cmp	r2, #45	; 0x2d
 80139d2:	d1c1      	bne.n	8013958 <_strtod_l+0x28>
 80139d4:	3a2c      	subs	r2, #44	; 0x2c
 80139d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80139d8:	1c4a      	adds	r2, r1, #1
 80139da:	921b      	str	r2, [sp, #108]	; 0x6c
 80139dc:	784a      	ldrb	r2, [r1, #1]
 80139de:	2a00      	cmp	r2, #0
 80139e0:	d1bc      	bne.n	801395c <_strtod_l+0x2c>
 80139e2:	9b07      	ldr	r3, [sp, #28]
 80139e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80139e6:	2300      	movs	r3, #0
 80139e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80139ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d1dd      	bne.n	80139ac <_strtod_l+0x7c>
 80139f0:	0032      	movs	r2, r6
 80139f2:	003b      	movs	r3, r7
 80139f4:	e7e4      	b.n	80139c0 <_strtod_l+0x90>
 80139f6:	2200      	movs	r2, #0
 80139f8:	e7ed      	b.n	80139d6 <_strtod_l+0xa6>
 80139fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80139fc:	2a00      	cmp	r2, #0
 80139fe:	d007      	beq.n	8013a10 <_strtod_l+0xe0>
 8013a00:	2135      	movs	r1, #53	; 0x35
 8013a02:	a81e      	add	r0, sp, #120	; 0x78
 8013a04:	f002 f979 	bl	8015cfa <__copybits>
 8013a08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a0a:	9804      	ldr	r0, [sp, #16]
 8013a0c:	f001 fd76 	bl	80154fc <_Bfree>
 8013a10:	9805      	ldr	r0, [sp, #20]
 8013a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a14:	3801      	subs	r0, #1
 8013a16:	2804      	cmp	r0, #4
 8013a18:	d806      	bhi.n	8013a28 <_strtod_l+0xf8>
 8013a1a:	f7ec fb85 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013a1e:	0312      	.short	0x0312
 8013a20:	1e1c      	.short	0x1e1c
 8013a22:	12          	.byte	0x12
 8013a23:	00          	.byte	0x00
 8013a24:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8013a26:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8013a28:	05e4      	lsls	r4, r4, #23
 8013a2a:	d502      	bpl.n	8013a32 <_strtod_l+0x102>
 8013a2c:	2380      	movs	r3, #128	; 0x80
 8013a2e:	061b      	lsls	r3, r3, #24
 8013a30:	431f      	orrs	r7, r3
 8013a32:	4b6a      	ldr	r3, [pc, #424]	; (8013bdc <_strtod_l+0x2ac>)
 8013a34:	423b      	tst	r3, r7
 8013a36:	d1b6      	bne.n	80139a6 <_strtod_l+0x76>
 8013a38:	f001 f860 	bl	8014afc <__errno>
 8013a3c:	2322      	movs	r3, #34	; 0x22
 8013a3e:	6003      	str	r3, [r0, #0]
 8013a40:	e7b1      	b.n	80139a6 <_strtod_l+0x76>
 8013a42:	4967      	ldr	r1, [pc, #412]	; (8013be0 <_strtod_l+0x2b0>)
 8013a44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a46:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8013a48:	400a      	ands	r2, r1
 8013a4a:	4966      	ldr	r1, [pc, #408]	; (8013be4 <_strtod_l+0x2b4>)
 8013a4c:	185b      	adds	r3, r3, r1
 8013a4e:	051b      	lsls	r3, r3, #20
 8013a50:	431a      	orrs	r2, r3
 8013a52:	0017      	movs	r7, r2
 8013a54:	e7e8      	b.n	8013a28 <_strtod_l+0xf8>
 8013a56:	4f61      	ldr	r7, [pc, #388]	; (8013bdc <_strtod_l+0x2ac>)
 8013a58:	e7e6      	b.n	8013a28 <_strtod_l+0xf8>
 8013a5a:	2601      	movs	r6, #1
 8013a5c:	4f62      	ldr	r7, [pc, #392]	; (8013be8 <_strtod_l+0x2b8>)
 8013a5e:	4276      	negs	r6, r6
 8013a60:	e7e2      	b.n	8013a28 <_strtod_l+0xf8>
 8013a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a64:	1c5a      	adds	r2, r3, #1
 8013a66:	921b      	str	r2, [sp, #108]	; 0x6c
 8013a68:	785b      	ldrb	r3, [r3, #1]
 8013a6a:	2b30      	cmp	r3, #48	; 0x30
 8013a6c:	d0f9      	beq.n	8013a62 <_strtod_l+0x132>
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d099      	beq.n	80139a6 <_strtod_l+0x76>
 8013a72:	2301      	movs	r3, #1
 8013a74:	9309      	str	r3, [sp, #36]	; 0x24
 8013a76:	2500      	movs	r5, #0
 8013a78:	220a      	movs	r2, #10
 8013a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a7c:	950d      	str	r5, [sp, #52]	; 0x34
 8013a7e:	9310      	str	r3, [sp, #64]	; 0x40
 8013a80:	9508      	str	r5, [sp, #32]
 8013a82:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013a84:	7804      	ldrb	r4, [r0, #0]
 8013a86:	0023      	movs	r3, r4
 8013a88:	3b30      	subs	r3, #48	; 0x30
 8013a8a:	b2d9      	uxtb	r1, r3
 8013a8c:	2909      	cmp	r1, #9
 8013a8e:	d927      	bls.n	8013ae0 <_strtod_l+0x1b0>
 8013a90:	2201      	movs	r2, #1
 8013a92:	4956      	ldr	r1, [pc, #344]	; (8013bec <_strtod_l+0x2bc>)
 8013a94:	f000 ff6a 	bl	801496c <strncmp>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d031      	beq.n	8013b00 <_strtod_l+0x1d0>
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	0023      	movs	r3, r4
 8013aa0:	4684      	mov	ip, r0
 8013aa2:	9a08      	ldr	r2, [sp, #32]
 8013aa4:	900c      	str	r0, [sp, #48]	; 0x30
 8013aa6:	9205      	str	r2, [sp, #20]
 8013aa8:	2220      	movs	r2, #32
 8013aaa:	0019      	movs	r1, r3
 8013aac:	4391      	bics	r1, r2
 8013aae:	000a      	movs	r2, r1
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	9106      	str	r1, [sp, #24]
 8013ab4:	2a45      	cmp	r2, #69	; 0x45
 8013ab6:	d000      	beq.n	8013aba <_strtod_l+0x18a>
 8013ab8:	e0c2      	b.n	8013c40 <_strtod_l+0x310>
 8013aba:	9b05      	ldr	r3, [sp, #20]
 8013abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013abe:	4303      	orrs	r3, r0
 8013ac0:	4313      	orrs	r3, r2
 8013ac2:	428b      	cmp	r3, r1
 8013ac4:	d08d      	beq.n	80139e2 <_strtod_l+0xb2>
 8013ac6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ac8:	9307      	str	r3, [sp, #28]
 8013aca:	3301      	adds	r3, #1
 8013acc:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ace:	9b07      	ldr	r3, [sp, #28]
 8013ad0:	785b      	ldrb	r3, [r3, #1]
 8013ad2:	2b2b      	cmp	r3, #43	; 0x2b
 8013ad4:	d071      	beq.n	8013bba <_strtod_l+0x28a>
 8013ad6:	000c      	movs	r4, r1
 8013ad8:	2b2d      	cmp	r3, #45	; 0x2d
 8013ada:	d174      	bne.n	8013bc6 <_strtod_l+0x296>
 8013adc:	2401      	movs	r4, #1
 8013ade:	e06d      	b.n	8013bbc <_strtod_l+0x28c>
 8013ae0:	9908      	ldr	r1, [sp, #32]
 8013ae2:	2908      	cmp	r1, #8
 8013ae4:	dc09      	bgt.n	8013afa <_strtod_l+0x1ca>
 8013ae6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ae8:	4351      	muls	r1, r2
 8013aea:	185b      	adds	r3, r3, r1
 8013aec:	930d      	str	r3, [sp, #52]	; 0x34
 8013aee:	9b08      	ldr	r3, [sp, #32]
 8013af0:	3001      	adds	r0, #1
 8013af2:	3301      	adds	r3, #1
 8013af4:	9308      	str	r3, [sp, #32]
 8013af6:	901b      	str	r0, [sp, #108]	; 0x6c
 8013af8:	e7c3      	b.n	8013a82 <_strtod_l+0x152>
 8013afa:	4355      	muls	r5, r2
 8013afc:	195d      	adds	r5, r3, r5
 8013afe:	e7f6      	b.n	8013aee <_strtod_l+0x1be>
 8013b00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b02:	1c5a      	adds	r2, r3, #1
 8013b04:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b06:	9a08      	ldr	r2, [sp, #32]
 8013b08:	785b      	ldrb	r3, [r3, #1]
 8013b0a:	2a00      	cmp	r2, #0
 8013b0c:	d03a      	beq.n	8013b84 <_strtod_l+0x254>
 8013b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8013b10:	9205      	str	r2, [sp, #20]
 8013b12:	001a      	movs	r2, r3
 8013b14:	3a30      	subs	r2, #48	; 0x30
 8013b16:	2a09      	cmp	r2, #9
 8013b18:	d912      	bls.n	8013b40 <_strtod_l+0x210>
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	4694      	mov	ip, r2
 8013b1e:	e7c3      	b.n	8013aa8 <_strtod_l+0x178>
 8013b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b22:	3001      	adds	r0, #1
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b28:	785b      	ldrb	r3, [r3, #1]
 8013b2a:	2b30      	cmp	r3, #48	; 0x30
 8013b2c:	d0f8      	beq.n	8013b20 <_strtod_l+0x1f0>
 8013b2e:	001a      	movs	r2, r3
 8013b30:	3a31      	subs	r2, #49	; 0x31
 8013b32:	2a08      	cmp	r2, #8
 8013b34:	d83c      	bhi.n	8013bb0 <_strtod_l+0x280>
 8013b36:	900c      	str	r0, [sp, #48]	; 0x30
 8013b38:	2000      	movs	r0, #0
 8013b3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013b3c:	9005      	str	r0, [sp, #20]
 8013b3e:	9210      	str	r2, [sp, #64]	; 0x40
 8013b40:	001a      	movs	r2, r3
 8013b42:	1c41      	adds	r1, r0, #1
 8013b44:	3a30      	subs	r2, #48	; 0x30
 8013b46:	2b30      	cmp	r3, #48	; 0x30
 8013b48:	d016      	beq.n	8013b78 <_strtod_l+0x248>
 8013b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b4c:	185b      	adds	r3, r3, r1
 8013b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8013b50:	9b05      	ldr	r3, [sp, #20]
 8013b52:	210a      	movs	r1, #10
 8013b54:	469c      	mov	ip, r3
 8013b56:	4484      	add	ip, r0
 8013b58:	4563      	cmp	r3, ip
 8013b5a:	d115      	bne.n	8013b88 <_strtod_l+0x258>
 8013b5c:	9905      	ldr	r1, [sp, #20]
 8013b5e:	9b05      	ldr	r3, [sp, #20]
 8013b60:	3101      	adds	r1, #1
 8013b62:	1809      	adds	r1, r1, r0
 8013b64:	181b      	adds	r3, r3, r0
 8013b66:	9105      	str	r1, [sp, #20]
 8013b68:	2b08      	cmp	r3, #8
 8013b6a:	dc19      	bgt.n	8013ba0 <_strtod_l+0x270>
 8013b6c:	230a      	movs	r3, #10
 8013b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b70:	434b      	muls	r3, r1
 8013b72:	2100      	movs	r1, #0
 8013b74:	18d3      	adds	r3, r2, r3
 8013b76:	930d      	str	r3, [sp, #52]	; 0x34
 8013b78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b7a:	0008      	movs	r0, r1
 8013b7c:	1c5a      	adds	r2, r3, #1
 8013b7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b80:	785b      	ldrb	r3, [r3, #1]
 8013b82:	e7c6      	b.n	8013b12 <_strtod_l+0x1e2>
 8013b84:	9808      	ldr	r0, [sp, #32]
 8013b86:	e7d0      	b.n	8013b2a <_strtod_l+0x1fa>
 8013b88:	1c5c      	adds	r4, r3, #1
 8013b8a:	2b08      	cmp	r3, #8
 8013b8c:	dc04      	bgt.n	8013b98 <_strtod_l+0x268>
 8013b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b90:	434b      	muls	r3, r1
 8013b92:	930d      	str	r3, [sp, #52]	; 0x34
 8013b94:	0023      	movs	r3, r4
 8013b96:	e7df      	b.n	8013b58 <_strtod_l+0x228>
 8013b98:	2c10      	cmp	r4, #16
 8013b9a:	dcfb      	bgt.n	8013b94 <_strtod_l+0x264>
 8013b9c:	434d      	muls	r5, r1
 8013b9e:	e7f9      	b.n	8013b94 <_strtod_l+0x264>
 8013ba0:	9b05      	ldr	r3, [sp, #20]
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	2b10      	cmp	r3, #16
 8013ba6:	dce7      	bgt.n	8013b78 <_strtod_l+0x248>
 8013ba8:	230a      	movs	r3, #10
 8013baa:	435d      	muls	r5, r3
 8013bac:	1955      	adds	r5, r2, r5
 8013bae:	e7e3      	b.n	8013b78 <_strtod_l+0x248>
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	920c      	str	r2, [sp, #48]	; 0x30
 8013bb4:	9205      	str	r2, [sp, #20]
 8013bb6:	3201      	adds	r2, #1
 8013bb8:	e7b0      	b.n	8013b1c <_strtod_l+0x1ec>
 8013bba:	2400      	movs	r4, #0
 8013bbc:	9b07      	ldr	r3, [sp, #28]
 8013bbe:	3302      	adds	r3, #2
 8013bc0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bc2:	9b07      	ldr	r3, [sp, #28]
 8013bc4:	789b      	ldrb	r3, [r3, #2]
 8013bc6:	001a      	movs	r2, r3
 8013bc8:	3a30      	subs	r2, #48	; 0x30
 8013bca:	2a09      	cmp	r2, #9
 8013bcc:	d914      	bls.n	8013bf8 <_strtod_l+0x2c8>
 8013bce:	9a07      	ldr	r2, [sp, #28]
 8013bd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	e033      	b.n	8013c3e <_strtod_l+0x30e>
 8013bd6:	46c0      	nop			; (mov r8, r8)
 8013bd8:	0801c5d4 	.word	0x0801c5d4
 8013bdc:	7ff00000 	.word	0x7ff00000
 8013be0:	ffefffff 	.word	0xffefffff
 8013be4:	00000433 	.word	0x00000433
 8013be8:	7fffffff 	.word	0x7fffffff
 8013bec:	0801c5d1 	.word	0x0801c5d1
 8013bf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	921b      	str	r2, [sp, #108]	; 0x6c
 8013bf6:	785b      	ldrb	r3, [r3, #1]
 8013bf8:	2b30      	cmp	r3, #48	; 0x30
 8013bfa:	d0f9      	beq.n	8013bf0 <_strtod_l+0x2c0>
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	9206      	str	r2, [sp, #24]
 8013c00:	001a      	movs	r2, r3
 8013c02:	3a31      	subs	r2, #49	; 0x31
 8013c04:	2a08      	cmp	r2, #8
 8013c06:	d81b      	bhi.n	8013c40 <_strtod_l+0x310>
 8013c08:	3b30      	subs	r3, #48	; 0x30
 8013c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8013c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c0e:	9306      	str	r3, [sp, #24]
 8013c10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c12:	1c59      	adds	r1, r3, #1
 8013c14:	911b      	str	r1, [sp, #108]	; 0x6c
 8013c16:	785b      	ldrb	r3, [r3, #1]
 8013c18:	001a      	movs	r2, r3
 8013c1a:	3a30      	subs	r2, #48	; 0x30
 8013c1c:	2a09      	cmp	r2, #9
 8013c1e:	d93a      	bls.n	8013c96 <_strtod_l+0x366>
 8013c20:	9a06      	ldr	r2, [sp, #24]
 8013c22:	1a8a      	subs	r2, r1, r2
 8013c24:	49b2      	ldr	r1, [pc, #712]	; (8013ef0 <_strtod_l+0x5c0>)
 8013c26:	9106      	str	r1, [sp, #24]
 8013c28:	2a08      	cmp	r2, #8
 8013c2a:	dc04      	bgt.n	8013c36 <_strtod_l+0x306>
 8013c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c2e:	9206      	str	r2, [sp, #24]
 8013c30:	428a      	cmp	r2, r1
 8013c32:	dd00      	ble.n	8013c36 <_strtod_l+0x306>
 8013c34:	9106      	str	r1, [sp, #24]
 8013c36:	2c00      	cmp	r4, #0
 8013c38:	d002      	beq.n	8013c40 <_strtod_l+0x310>
 8013c3a:	9a06      	ldr	r2, [sp, #24]
 8013c3c:	4252      	negs	r2, r2
 8013c3e:	9206      	str	r2, [sp, #24]
 8013c40:	9a05      	ldr	r2, [sp, #20]
 8013c42:	2a00      	cmp	r2, #0
 8013c44:	d14d      	bne.n	8013ce2 <_strtod_l+0x3b2>
 8013c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c48:	4310      	orrs	r0, r2
 8013c4a:	d000      	beq.n	8013c4e <_strtod_l+0x31e>
 8013c4c:	e6ab      	b.n	80139a6 <_strtod_l+0x76>
 8013c4e:	4662      	mov	r2, ip
 8013c50:	2a00      	cmp	r2, #0
 8013c52:	d000      	beq.n	8013c56 <_strtod_l+0x326>
 8013c54:	e6c5      	b.n	80139e2 <_strtod_l+0xb2>
 8013c56:	2b69      	cmp	r3, #105	; 0x69
 8013c58:	d027      	beq.n	8013caa <_strtod_l+0x37a>
 8013c5a:	dc23      	bgt.n	8013ca4 <_strtod_l+0x374>
 8013c5c:	2b49      	cmp	r3, #73	; 0x49
 8013c5e:	d024      	beq.n	8013caa <_strtod_l+0x37a>
 8013c60:	2b4e      	cmp	r3, #78	; 0x4e
 8013c62:	d000      	beq.n	8013c66 <_strtod_l+0x336>
 8013c64:	e6bd      	b.n	80139e2 <_strtod_l+0xb2>
 8013c66:	49a3      	ldr	r1, [pc, #652]	; (8013ef4 <_strtod_l+0x5c4>)
 8013c68:	a81b      	add	r0, sp, #108	; 0x6c
 8013c6a:	f001 fb51 	bl	8015310 <__match>
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d100      	bne.n	8013c74 <_strtod_l+0x344>
 8013c72:	e6b6      	b.n	80139e2 <_strtod_l+0xb2>
 8013c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	2b28      	cmp	r3, #40	; 0x28
 8013c7a:	d12c      	bne.n	8013cd6 <_strtod_l+0x3a6>
 8013c7c:	499e      	ldr	r1, [pc, #632]	; (8013ef8 <_strtod_l+0x5c8>)
 8013c7e:	aa1e      	add	r2, sp, #120	; 0x78
 8013c80:	a81b      	add	r0, sp, #108	; 0x6c
 8013c82:	f001 fb59 	bl	8015338 <__hexnan>
 8013c86:	2805      	cmp	r0, #5
 8013c88:	d125      	bne.n	8013cd6 <_strtod_l+0x3a6>
 8013c8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013c8c:	4a9b      	ldr	r2, [pc, #620]	; (8013efc <_strtod_l+0x5cc>)
 8013c8e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8013c90:	431a      	orrs	r2, r3
 8013c92:	0017      	movs	r7, r2
 8013c94:	e687      	b.n	80139a6 <_strtod_l+0x76>
 8013c96:	220a      	movs	r2, #10
 8013c98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013c9a:	434a      	muls	r2, r1
 8013c9c:	18d2      	adds	r2, r2, r3
 8013c9e:	3a30      	subs	r2, #48	; 0x30
 8013ca0:	920e      	str	r2, [sp, #56]	; 0x38
 8013ca2:	e7b5      	b.n	8013c10 <_strtod_l+0x2e0>
 8013ca4:	2b6e      	cmp	r3, #110	; 0x6e
 8013ca6:	d0de      	beq.n	8013c66 <_strtod_l+0x336>
 8013ca8:	e69b      	b.n	80139e2 <_strtod_l+0xb2>
 8013caa:	4995      	ldr	r1, [pc, #596]	; (8013f00 <_strtod_l+0x5d0>)
 8013cac:	a81b      	add	r0, sp, #108	; 0x6c
 8013cae:	f001 fb2f 	bl	8015310 <__match>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d100      	bne.n	8013cb8 <_strtod_l+0x388>
 8013cb6:	e694      	b.n	80139e2 <_strtod_l+0xb2>
 8013cb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cba:	4992      	ldr	r1, [pc, #584]	; (8013f04 <_strtod_l+0x5d4>)
 8013cbc:	3b01      	subs	r3, #1
 8013cbe:	a81b      	add	r0, sp, #108	; 0x6c
 8013cc0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cc2:	f001 fb25 	bl	8015310 <__match>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d102      	bne.n	8013cd0 <_strtod_l+0x3a0>
 8013cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ccc:	3301      	adds	r3, #1
 8013cce:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cd0:	2600      	movs	r6, #0
 8013cd2:	4f8a      	ldr	r7, [pc, #552]	; (8013efc <_strtod_l+0x5cc>)
 8013cd4:	e667      	b.n	80139a6 <_strtod_l+0x76>
 8013cd6:	488c      	ldr	r0, [pc, #560]	; (8013f08 <_strtod_l+0x5d8>)
 8013cd8:	f000 ff5a 	bl	8014b90 <nan>
 8013cdc:	0006      	movs	r6, r0
 8013cde:	000f      	movs	r7, r1
 8013ce0:	e661      	b.n	80139a6 <_strtod_l+0x76>
 8013ce2:	9b06      	ldr	r3, [sp, #24]
 8013ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ce6:	1a9b      	subs	r3, r3, r2
 8013ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8013cea:	9b08      	ldr	r3, [sp, #32]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <_strtod_l+0x3c4>
 8013cf0:	9b05      	ldr	r3, [sp, #20]
 8013cf2:	9308      	str	r3, [sp, #32]
 8013cf4:	9c05      	ldr	r4, [sp, #20]
 8013cf6:	2c10      	cmp	r4, #16
 8013cf8:	dd00      	ble.n	8013cfc <_strtod_l+0x3cc>
 8013cfa:	2410      	movs	r4, #16
 8013cfc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013cfe:	f7ee ffe9 	bl	8002cd4 <__aeabi_ui2d>
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	0006      	movs	r6, r0
 8013d06:	000f      	movs	r7, r1
 8013d08:	2b09      	cmp	r3, #9
 8013d0a:	dd15      	ble.n	8013d38 <_strtod_l+0x408>
 8013d0c:	0022      	movs	r2, r4
 8013d0e:	4b7f      	ldr	r3, [pc, #508]	; (8013f0c <_strtod_l+0x5dc>)
 8013d10:	3a09      	subs	r2, #9
 8013d12:	00d2      	lsls	r2, r2, #3
 8013d14:	189b      	adds	r3, r3, r2
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	f7ee f913 	bl	8001f44 <__aeabi_dmul>
 8013d1e:	0006      	movs	r6, r0
 8013d20:	0028      	movs	r0, r5
 8013d22:	000f      	movs	r7, r1
 8013d24:	f7ee ffd6 	bl	8002cd4 <__aeabi_ui2d>
 8013d28:	0002      	movs	r2, r0
 8013d2a:	000b      	movs	r3, r1
 8013d2c:	0030      	movs	r0, r6
 8013d2e:	0039      	movs	r1, r7
 8013d30:	f7ed f9ae 	bl	8001090 <__aeabi_dadd>
 8013d34:	0006      	movs	r6, r0
 8013d36:	000f      	movs	r7, r1
 8013d38:	9b05      	ldr	r3, [sp, #20]
 8013d3a:	2b0f      	cmp	r3, #15
 8013d3c:	dc39      	bgt.n	8013db2 <_strtod_l+0x482>
 8013d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d100      	bne.n	8013d46 <_strtod_l+0x416>
 8013d44:	e62f      	b.n	80139a6 <_strtod_l+0x76>
 8013d46:	dd24      	ble.n	8013d92 <_strtod_l+0x462>
 8013d48:	2b16      	cmp	r3, #22
 8013d4a:	dc09      	bgt.n	8013d60 <_strtod_l+0x430>
 8013d4c:	496f      	ldr	r1, [pc, #444]	; (8013f0c <_strtod_l+0x5dc>)
 8013d4e:	00db      	lsls	r3, r3, #3
 8013d50:	18c9      	adds	r1, r1, r3
 8013d52:	0032      	movs	r2, r6
 8013d54:	6808      	ldr	r0, [r1, #0]
 8013d56:	6849      	ldr	r1, [r1, #4]
 8013d58:	003b      	movs	r3, r7
 8013d5a:	f7ee f8f3 	bl	8001f44 <__aeabi_dmul>
 8013d5e:	e7bd      	b.n	8013cdc <_strtod_l+0x3ac>
 8013d60:	2325      	movs	r3, #37	; 0x25
 8013d62:	9a05      	ldr	r2, [sp, #20]
 8013d64:	1a9b      	subs	r3, r3, r2
 8013d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	db22      	blt.n	8013db2 <_strtod_l+0x482>
 8013d6c:	240f      	movs	r4, #15
 8013d6e:	9b05      	ldr	r3, [sp, #20]
 8013d70:	4d66      	ldr	r5, [pc, #408]	; (8013f0c <_strtod_l+0x5dc>)
 8013d72:	1ae4      	subs	r4, r4, r3
 8013d74:	00e1      	lsls	r1, r4, #3
 8013d76:	1869      	adds	r1, r5, r1
 8013d78:	0032      	movs	r2, r6
 8013d7a:	6808      	ldr	r0, [r1, #0]
 8013d7c:	6849      	ldr	r1, [r1, #4]
 8013d7e:	003b      	movs	r3, r7
 8013d80:	f7ee f8e0 	bl	8001f44 <__aeabi_dmul>
 8013d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d86:	1b1c      	subs	r4, r3, r4
 8013d88:	00e4      	lsls	r4, r4, #3
 8013d8a:	192d      	adds	r5, r5, r4
 8013d8c:	682a      	ldr	r2, [r5, #0]
 8013d8e:	686b      	ldr	r3, [r5, #4]
 8013d90:	e7e3      	b.n	8013d5a <_strtod_l+0x42a>
 8013d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d94:	3316      	adds	r3, #22
 8013d96:	db0c      	blt.n	8013db2 <_strtod_l+0x482>
 8013d98:	9906      	ldr	r1, [sp, #24]
 8013d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d9c:	4b5b      	ldr	r3, [pc, #364]	; (8013f0c <_strtod_l+0x5dc>)
 8013d9e:	1a52      	subs	r2, r2, r1
 8013da0:	00d2      	lsls	r2, r2, #3
 8013da2:	189b      	adds	r3, r3, r2
 8013da4:	0030      	movs	r0, r6
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	0039      	movs	r1, r7
 8013dac:	f7ed fcd0 	bl	8001750 <__aeabi_ddiv>
 8013db0:	e794      	b.n	8013cdc <_strtod_l+0x3ac>
 8013db2:	9b05      	ldr	r3, [sp, #20]
 8013db4:	1b1c      	subs	r4, r3, r4
 8013db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db8:	18e4      	adds	r4, r4, r3
 8013dba:	2c00      	cmp	r4, #0
 8013dbc:	dd72      	ble.n	8013ea4 <_strtod_l+0x574>
 8013dbe:	220f      	movs	r2, #15
 8013dc0:	0023      	movs	r3, r4
 8013dc2:	4013      	ands	r3, r2
 8013dc4:	4214      	tst	r4, r2
 8013dc6:	d00a      	beq.n	8013dde <_strtod_l+0x4ae>
 8013dc8:	4950      	ldr	r1, [pc, #320]	; (8013f0c <_strtod_l+0x5dc>)
 8013dca:	00db      	lsls	r3, r3, #3
 8013dcc:	18c9      	adds	r1, r1, r3
 8013dce:	0032      	movs	r2, r6
 8013dd0:	6808      	ldr	r0, [r1, #0]
 8013dd2:	6849      	ldr	r1, [r1, #4]
 8013dd4:	003b      	movs	r3, r7
 8013dd6:	f7ee f8b5 	bl	8001f44 <__aeabi_dmul>
 8013dda:	0006      	movs	r6, r0
 8013ddc:	000f      	movs	r7, r1
 8013dde:	230f      	movs	r3, #15
 8013de0:	439c      	bics	r4, r3
 8013de2:	d04a      	beq.n	8013e7a <_strtod_l+0x54a>
 8013de4:	3326      	adds	r3, #38	; 0x26
 8013de6:	33ff      	adds	r3, #255	; 0xff
 8013de8:	429c      	cmp	r4, r3
 8013dea:	dd22      	ble.n	8013e32 <_strtod_l+0x502>
 8013dec:	2300      	movs	r3, #0
 8013dee:	9305      	str	r3, [sp, #20]
 8013df0:	9306      	str	r3, [sp, #24]
 8013df2:	930d      	str	r3, [sp, #52]	; 0x34
 8013df4:	9308      	str	r3, [sp, #32]
 8013df6:	2322      	movs	r3, #34	; 0x22
 8013df8:	2600      	movs	r6, #0
 8013dfa:	9a04      	ldr	r2, [sp, #16]
 8013dfc:	4f3f      	ldr	r7, [pc, #252]	; (8013efc <_strtod_l+0x5cc>)
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e02:	42b3      	cmp	r3, r6
 8013e04:	d100      	bne.n	8013e08 <_strtod_l+0x4d8>
 8013e06:	e5ce      	b.n	80139a6 <_strtod_l+0x76>
 8013e08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e0a:	9804      	ldr	r0, [sp, #16]
 8013e0c:	f001 fb76 	bl	80154fc <_Bfree>
 8013e10:	9908      	ldr	r1, [sp, #32]
 8013e12:	9804      	ldr	r0, [sp, #16]
 8013e14:	f001 fb72 	bl	80154fc <_Bfree>
 8013e18:	9906      	ldr	r1, [sp, #24]
 8013e1a:	9804      	ldr	r0, [sp, #16]
 8013e1c:	f001 fb6e 	bl	80154fc <_Bfree>
 8013e20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e22:	9804      	ldr	r0, [sp, #16]
 8013e24:	f001 fb6a 	bl	80154fc <_Bfree>
 8013e28:	9905      	ldr	r1, [sp, #20]
 8013e2a:	9804      	ldr	r0, [sp, #16]
 8013e2c:	f001 fb66 	bl	80154fc <_Bfree>
 8013e30:	e5b9      	b.n	80139a6 <_strtod_l+0x76>
 8013e32:	2300      	movs	r3, #0
 8013e34:	0030      	movs	r0, r6
 8013e36:	0039      	movs	r1, r7
 8013e38:	4d35      	ldr	r5, [pc, #212]	; (8013f10 <_strtod_l+0x5e0>)
 8013e3a:	1124      	asrs	r4, r4, #4
 8013e3c:	9307      	str	r3, [sp, #28]
 8013e3e:	2c01      	cmp	r4, #1
 8013e40:	dc1e      	bgt.n	8013e80 <_strtod_l+0x550>
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d001      	beq.n	8013e4a <_strtod_l+0x51a>
 8013e46:	0006      	movs	r6, r0
 8013e48:	000f      	movs	r7, r1
 8013e4a:	4b32      	ldr	r3, [pc, #200]	; (8013f14 <_strtod_l+0x5e4>)
 8013e4c:	9a07      	ldr	r2, [sp, #28]
 8013e4e:	18ff      	adds	r7, r7, r3
 8013e50:	4b2f      	ldr	r3, [pc, #188]	; (8013f10 <_strtod_l+0x5e0>)
 8013e52:	00d2      	lsls	r2, r2, #3
 8013e54:	189d      	adds	r5, r3, r2
 8013e56:	6828      	ldr	r0, [r5, #0]
 8013e58:	6869      	ldr	r1, [r5, #4]
 8013e5a:	0032      	movs	r2, r6
 8013e5c:	003b      	movs	r3, r7
 8013e5e:	f7ee f871 	bl	8001f44 <__aeabi_dmul>
 8013e62:	4b26      	ldr	r3, [pc, #152]	; (8013efc <_strtod_l+0x5cc>)
 8013e64:	4a2c      	ldr	r2, [pc, #176]	; (8013f18 <_strtod_l+0x5e8>)
 8013e66:	0006      	movs	r6, r0
 8013e68:	400b      	ands	r3, r1
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d8be      	bhi.n	8013dec <_strtod_l+0x4bc>
 8013e6e:	4a2b      	ldr	r2, [pc, #172]	; (8013f1c <_strtod_l+0x5ec>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d913      	bls.n	8013e9c <_strtod_l+0x56c>
 8013e74:	2601      	movs	r6, #1
 8013e76:	4f2a      	ldr	r7, [pc, #168]	; (8013f20 <_strtod_l+0x5f0>)
 8013e78:	4276      	negs	r6, r6
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9307      	str	r3, [sp, #28]
 8013e7e:	e088      	b.n	8013f92 <_strtod_l+0x662>
 8013e80:	2201      	movs	r2, #1
 8013e82:	4214      	tst	r4, r2
 8013e84:	d004      	beq.n	8013e90 <_strtod_l+0x560>
 8013e86:	682a      	ldr	r2, [r5, #0]
 8013e88:	686b      	ldr	r3, [r5, #4]
 8013e8a:	f7ee f85b 	bl	8001f44 <__aeabi_dmul>
 8013e8e:	2301      	movs	r3, #1
 8013e90:	9a07      	ldr	r2, [sp, #28]
 8013e92:	1064      	asrs	r4, r4, #1
 8013e94:	3201      	adds	r2, #1
 8013e96:	9207      	str	r2, [sp, #28]
 8013e98:	3508      	adds	r5, #8
 8013e9a:	e7d0      	b.n	8013e3e <_strtod_l+0x50e>
 8013e9c:	23d4      	movs	r3, #212	; 0xd4
 8013e9e:	049b      	lsls	r3, r3, #18
 8013ea0:	18cf      	adds	r7, r1, r3
 8013ea2:	e7ea      	b.n	8013e7a <_strtod_l+0x54a>
 8013ea4:	2c00      	cmp	r4, #0
 8013ea6:	d0e8      	beq.n	8013e7a <_strtod_l+0x54a>
 8013ea8:	4264      	negs	r4, r4
 8013eaa:	230f      	movs	r3, #15
 8013eac:	0022      	movs	r2, r4
 8013eae:	401a      	ands	r2, r3
 8013eb0:	421c      	tst	r4, r3
 8013eb2:	d00a      	beq.n	8013eca <_strtod_l+0x59a>
 8013eb4:	4b15      	ldr	r3, [pc, #84]	; (8013f0c <_strtod_l+0x5dc>)
 8013eb6:	00d2      	lsls	r2, r2, #3
 8013eb8:	189b      	adds	r3, r3, r2
 8013eba:	0030      	movs	r0, r6
 8013ebc:	681a      	ldr	r2, [r3, #0]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	0039      	movs	r1, r7
 8013ec2:	f7ed fc45 	bl	8001750 <__aeabi_ddiv>
 8013ec6:	0006      	movs	r6, r0
 8013ec8:	000f      	movs	r7, r1
 8013eca:	1124      	asrs	r4, r4, #4
 8013ecc:	d0d5      	beq.n	8013e7a <_strtod_l+0x54a>
 8013ece:	2c1f      	cmp	r4, #31
 8013ed0:	dd28      	ble.n	8013f24 <_strtod_l+0x5f4>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	9305      	str	r3, [sp, #20]
 8013ed6:	9306      	str	r3, [sp, #24]
 8013ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8013eda:	9308      	str	r3, [sp, #32]
 8013edc:	2322      	movs	r3, #34	; 0x22
 8013ede:	9a04      	ldr	r2, [sp, #16]
 8013ee0:	2600      	movs	r6, #0
 8013ee2:	6013      	str	r3, [r2, #0]
 8013ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ee6:	2700      	movs	r7, #0
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d18d      	bne.n	8013e08 <_strtod_l+0x4d8>
 8013eec:	e55b      	b.n	80139a6 <_strtod_l+0x76>
 8013eee:	46c0      	nop			; (mov r8, r8)
 8013ef0:	00004e1f 	.word	0x00004e1f
 8013ef4:	0801c909 	.word	0x0801c909
 8013ef8:	0801c5e8 	.word	0x0801c5e8
 8013efc:	7ff00000 	.word	0x7ff00000
 8013f00:	0801c901 	.word	0x0801c901
 8013f04:	0801c98f 	.word	0x0801c98f
 8013f08:	0801c98b 	.word	0x0801c98b
 8013f0c:	0801c828 	.word	0x0801c828
 8013f10:	0801c800 	.word	0x0801c800
 8013f14:	fcb00000 	.word	0xfcb00000
 8013f18:	7ca00000 	.word	0x7ca00000
 8013f1c:	7c900000 	.word	0x7c900000
 8013f20:	7fefffff 	.word	0x7fefffff
 8013f24:	2310      	movs	r3, #16
 8013f26:	0022      	movs	r2, r4
 8013f28:	401a      	ands	r2, r3
 8013f2a:	9207      	str	r2, [sp, #28]
 8013f2c:	421c      	tst	r4, r3
 8013f2e:	d001      	beq.n	8013f34 <_strtod_l+0x604>
 8013f30:	335a      	adds	r3, #90	; 0x5a
 8013f32:	9307      	str	r3, [sp, #28]
 8013f34:	0030      	movs	r0, r6
 8013f36:	0039      	movs	r1, r7
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4dc4      	ldr	r5, [pc, #784]	; (801424c <_strtod_l+0x91c>)
 8013f3c:	2201      	movs	r2, #1
 8013f3e:	4214      	tst	r4, r2
 8013f40:	d004      	beq.n	8013f4c <_strtod_l+0x61c>
 8013f42:	682a      	ldr	r2, [r5, #0]
 8013f44:	686b      	ldr	r3, [r5, #4]
 8013f46:	f7ed fffd 	bl	8001f44 <__aeabi_dmul>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	1064      	asrs	r4, r4, #1
 8013f4e:	3508      	adds	r5, #8
 8013f50:	2c00      	cmp	r4, #0
 8013f52:	d1f3      	bne.n	8013f3c <_strtod_l+0x60c>
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d001      	beq.n	8013f5c <_strtod_l+0x62c>
 8013f58:	0006      	movs	r6, r0
 8013f5a:	000f      	movs	r7, r1
 8013f5c:	9b07      	ldr	r3, [sp, #28]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d00f      	beq.n	8013f82 <_strtod_l+0x652>
 8013f62:	236b      	movs	r3, #107	; 0x6b
 8013f64:	007a      	lsls	r2, r7, #1
 8013f66:	0d52      	lsrs	r2, r2, #21
 8013f68:	0039      	movs	r1, r7
 8013f6a:	1a9b      	subs	r3, r3, r2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	dd08      	ble.n	8013f82 <_strtod_l+0x652>
 8013f70:	2b1f      	cmp	r3, #31
 8013f72:	dc00      	bgt.n	8013f76 <_strtod_l+0x646>
 8013f74:	e121      	b.n	80141ba <_strtod_l+0x88a>
 8013f76:	2600      	movs	r6, #0
 8013f78:	2b34      	cmp	r3, #52	; 0x34
 8013f7a:	dc00      	bgt.n	8013f7e <_strtod_l+0x64e>
 8013f7c:	e116      	b.n	80141ac <_strtod_l+0x87c>
 8013f7e:	27dc      	movs	r7, #220	; 0xdc
 8013f80:	04bf      	lsls	r7, r7, #18
 8013f82:	2200      	movs	r2, #0
 8013f84:	2300      	movs	r3, #0
 8013f86:	0030      	movs	r0, r6
 8013f88:	0039      	movs	r1, r7
 8013f8a:	f7ec fa67 	bl	800045c <__aeabi_dcmpeq>
 8013f8e:	2800      	cmp	r0, #0
 8013f90:	d19f      	bne.n	8013ed2 <_strtod_l+0x5a2>
 8013f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f94:	9a08      	ldr	r2, [sp, #32]
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013f9a:	9b05      	ldr	r3, [sp, #20]
 8013f9c:	9804      	ldr	r0, [sp, #16]
 8013f9e:	f001 fafb 	bl	8015598 <__s2b>
 8013fa2:	900d      	str	r0, [sp, #52]	; 0x34
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	d100      	bne.n	8013faa <_strtod_l+0x67a>
 8013fa8:	e720      	b.n	8013dec <_strtod_l+0x4bc>
 8013faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fac:	9906      	ldr	r1, [sp, #24]
 8013fae:	17da      	asrs	r2, r3, #31
 8013fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fb2:	1a5b      	subs	r3, r3, r1
 8013fb4:	401a      	ands	r2, r3
 8013fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fb8:	9215      	str	r2, [sp, #84]	; 0x54
 8013fba:	43db      	mvns	r3, r3
 8013fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fbe:	17db      	asrs	r3, r3, #31
 8013fc0:	401a      	ands	r2, r3
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	9218      	str	r2, [sp, #96]	; 0x60
 8013fc6:	9305      	str	r3, [sp, #20]
 8013fc8:	9306      	str	r3, [sp, #24]
 8013fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fcc:	9804      	ldr	r0, [sp, #16]
 8013fce:	6859      	ldr	r1, [r3, #4]
 8013fd0:	f001 fa6c 	bl	80154ac <_Balloc>
 8013fd4:	9008      	str	r0, [sp, #32]
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	d100      	bne.n	8013fdc <_strtod_l+0x6ac>
 8013fda:	e70c      	b.n	8013df6 <_strtod_l+0x4c6>
 8013fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fde:	300c      	adds	r0, #12
 8013fe0:	0019      	movs	r1, r3
 8013fe2:	691a      	ldr	r2, [r3, #16]
 8013fe4:	310c      	adds	r1, #12
 8013fe6:	3202      	adds	r2, #2
 8013fe8:	0092      	lsls	r2, r2, #2
 8013fea:	f000 fdc8 	bl	8014b7e <memcpy>
 8013fee:	ab1e      	add	r3, sp, #120	; 0x78
 8013ff0:	9301      	str	r3, [sp, #4]
 8013ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8013ff4:	9300      	str	r3, [sp, #0]
 8013ff6:	0032      	movs	r2, r6
 8013ff8:	003b      	movs	r3, r7
 8013ffa:	9804      	ldr	r0, [sp, #16]
 8013ffc:	9610      	str	r6, [sp, #64]	; 0x40
 8013ffe:	9711      	str	r7, [sp, #68]	; 0x44
 8014000:	f001 fdf2 	bl	8015be8 <__d2b>
 8014004:	901c      	str	r0, [sp, #112]	; 0x70
 8014006:	2800      	cmp	r0, #0
 8014008:	d100      	bne.n	801400c <_strtod_l+0x6dc>
 801400a:	e6f4      	b.n	8013df6 <_strtod_l+0x4c6>
 801400c:	2101      	movs	r1, #1
 801400e:	9804      	ldr	r0, [sp, #16]
 8014010:	f001 fb56 	bl	80156c0 <__i2b>
 8014014:	9006      	str	r0, [sp, #24]
 8014016:	2800      	cmp	r0, #0
 8014018:	d100      	bne.n	801401c <_strtod_l+0x6ec>
 801401a:	e6ec      	b.n	8013df6 <_strtod_l+0x4c6>
 801401c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801401e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014020:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014022:	1ad4      	subs	r4, r2, r3
 8014024:	2b00      	cmp	r3, #0
 8014026:	db01      	blt.n	801402c <_strtod_l+0x6fc>
 8014028:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801402a:	195d      	adds	r5, r3, r5
 801402c:	9907      	ldr	r1, [sp, #28]
 801402e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014030:	1a5b      	subs	r3, r3, r1
 8014032:	2136      	movs	r1, #54	; 0x36
 8014034:	189b      	adds	r3, r3, r2
 8014036:	1a8a      	subs	r2, r1, r2
 8014038:	4985      	ldr	r1, [pc, #532]	; (8014250 <_strtod_l+0x920>)
 801403a:	2001      	movs	r0, #1
 801403c:	468c      	mov	ip, r1
 801403e:	2100      	movs	r1, #0
 8014040:	3b01      	subs	r3, #1
 8014042:	9114      	str	r1, [sp, #80]	; 0x50
 8014044:	9012      	str	r0, [sp, #72]	; 0x48
 8014046:	4563      	cmp	r3, ip
 8014048:	da07      	bge.n	801405a <_strtod_l+0x72a>
 801404a:	4661      	mov	r1, ip
 801404c:	1ac9      	subs	r1, r1, r3
 801404e:	1a52      	subs	r2, r2, r1
 8014050:	291f      	cmp	r1, #31
 8014052:	dd00      	ble.n	8014056 <_strtod_l+0x726>
 8014054:	e0b6      	b.n	80141c4 <_strtod_l+0x894>
 8014056:	4088      	lsls	r0, r1
 8014058:	9012      	str	r0, [sp, #72]	; 0x48
 801405a:	18ab      	adds	r3, r5, r2
 801405c:	930c      	str	r3, [sp, #48]	; 0x30
 801405e:	18a4      	adds	r4, r4, r2
 8014060:	9b07      	ldr	r3, [sp, #28]
 8014062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014064:	191c      	adds	r4, r3, r4
 8014066:	002b      	movs	r3, r5
 8014068:	4295      	cmp	r5, r2
 801406a:	dd00      	ble.n	801406e <_strtod_l+0x73e>
 801406c:	0013      	movs	r3, r2
 801406e:	42a3      	cmp	r3, r4
 8014070:	dd00      	ble.n	8014074 <_strtod_l+0x744>
 8014072:	0023      	movs	r3, r4
 8014074:	2b00      	cmp	r3, #0
 8014076:	dd04      	ble.n	8014082 <_strtod_l+0x752>
 8014078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801407a:	1ae4      	subs	r4, r4, r3
 801407c:	1ad2      	subs	r2, r2, r3
 801407e:	920c      	str	r2, [sp, #48]	; 0x30
 8014080:	1aed      	subs	r5, r5, r3
 8014082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014084:	2b00      	cmp	r3, #0
 8014086:	dd17      	ble.n	80140b8 <_strtod_l+0x788>
 8014088:	001a      	movs	r2, r3
 801408a:	9906      	ldr	r1, [sp, #24]
 801408c:	9804      	ldr	r0, [sp, #16]
 801408e:	f001 fbdf 	bl	8015850 <__pow5mult>
 8014092:	9006      	str	r0, [sp, #24]
 8014094:	2800      	cmp	r0, #0
 8014096:	d100      	bne.n	801409a <_strtod_l+0x76a>
 8014098:	e6ad      	b.n	8013df6 <_strtod_l+0x4c6>
 801409a:	0001      	movs	r1, r0
 801409c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801409e:	9804      	ldr	r0, [sp, #16]
 80140a0:	f001 fb26 	bl	80156f0 <__multiply>
 80140a4:	900e      	str	r0, [sp, #56]	; 0x38
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d100      	bne.n	80140ac <_strtod_l+0x77c>
 80140aa:	e6a4      	b.n	8013df6 <_strtod_l+0x4c6>
 80140ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80140ae:	9804      	ldr	r0, [sp, #16]
 80140b0:	f001 fa24 	bl	80154fc <_Bfree>
 80140b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140b6:	931c      	str	r3, [sp, #112]	; 0x70
 80140b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	dd00      	ble.n	80140c0 <_strtod_l+0x790>
 80140be:	e087      	b.n	80141d0 <_strtod_l+0x8a0>
 80140c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	dd08      	ble.n	80140d8 <_strtod_l+0x7a8>
 80140c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80140c8:	9908      	ldr	r1, [sp, #32]
 80140ca:	9804      	ldr	r0, [sp, #16]
 80140cc:	f001 fbc0 	bl	8015850 <__pow5mult>
 80140d0:	9008      	str	r0, [sp, #32]
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d100      	bne.n	80140d8 <_strtod_l+0x7a8>
 80140d6:	e68e      	b.n	8013df6 <_strtod_l+0x4c6>
 80140d8:	2c00      	cmp	r4, #0
 80140da:	dd08      	ble.n	80140ee <_strtod_l+0x7be>
 80140dc:	0022      	movs	r2, r4
 80140de:	9908      	ldr	r1, [sp, #32]
 80140e0:	9804      	ldr	r0, [sp, #16]
 80140e2:	f001 fbf7 	bl	80158d4 <__lshift>
 80140e6:	9008      	str	r0, [sp, #32]
 80140e8:	2800      	cmp	r0, #0
 80140ea:	d100      	bne.n	80140ee <_strtod_l+0x7be>
 80140ec:	e683      	b.n	8013df6 <_strtod_l+0x4c6>
 80140ee:	2d00      	cmp	r5, #0
 80140f0:	dd08      	ble.n	8014104 <_strtod_l+0x7d4>
 80140f2:	002a      	movs	r2, r5
 80140f4:	9906      	ldr	r1, [sp, #24]
 80140f6:	9804      	ldr	r0, [sp, #16]
 80140f8:	f001 fbec 	bl	80158d4 <__lshift>
 80140fc:	9006      	str	r0, [sp, #24]
 80140fe:	2800      	cmp	r0, #0
 8014100:	d100      	bne.n	8014104 <_strtod_l+0x7d4>
 8014102:	e678      	b.n	8013df6 <_strtod_l+0x4c6>
 8014104:	9a08      	ldr	r2, [sp, #32]
 8014106:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014108:	9804      	ldr	r0, [sp, #16]
 801410a:	f001 fc6d 	bl	80159e8 <__mdiff>
 801410e:	9005      	str	r0, [sp, #20]
 8014110:	2800      	cmp	r0, #0
 8014112:	d100      	bne.n	8014116 <_strtod_l+0x7e6>
 8014114:	e66f      	b.n	8013df6 <_strtod_l+0x4c6>
 8014116:	2200      	movs	r2, #0
 8014118:	68c3      	ldr	r3, [r0, #12]
 801411a:	9906      	ldr	r1, [sp, #24]
 801411c:	60c2      	str	r2, [r0, #12]
 801411e:	930c      	str	r3, [sp, #48]	; 0x30
 8014120:	f001 fc46 	bl	80159b0 <__mcmp>
 8014124:	2800      	cmp	r0, #0
 8014126:	da5d      	bge.n	80141e4 <_strtod_l+0x8b4>
 8014128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801412a:	4333      	orrs	r3, r6
 801412c:	d000      	beq.n	8014130 <_strtod_l+0x800>
 801412e:	e088      	b.n	8014242 <_strtod_l+0x912>
 8014130:	033b      	lsls	r3, r7, #12
 8014132:	d000      	beq.n	8014136 <_strtod_l+0x806>
 8014134:	e085      	b.n	8014242 <_strtod_l+0x912>
 8014136:	22d6      	movs	r2, #214	; 0xd6
 8014138:	4b46      	ldr	r3, [pc, #280]	; (8014254 <_strtod_l+0x924>)
 801413a:	04d2      	lsls	r2, r2, #19
 801413c:	403b      	ands	r3, r7
 801413e:	4293      	cmp	r3, r2
 8014140:	d97f      	bls.n	8014242 <_strtod_l+0x912>
 8014142:	9b05      	ldr	r3, [sp, #20]
 8014144:	695b      	ldr	r3, [r3, #20]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d103      	bne.n	8014152 <_strtod_l+0x822>
 801414a:	9b05      	ldr	r3, [sp, #20]
 801414c:	691b      	ldr	r3, [r3, #16]
 801414e:	2b01      	cmp	r3, #1
 8014150:	dd77      	ble.n	8014242 <_strtod_l+0x912>
 8014152:	9905      	ldr	r1, [sp, #20]
 8014154:	2201      	movs	r2, #1
 8014156:	9804      	ldr	r0, [sp, #16]
 8014158:	f001 fbbc 	bl	80158d4 <__lshift>
 801415c:	9906      	ldr	r1, [sp, #24]
 801415e:	9005      	str	r0, [sp, #20]
 8014160:	f001 fc26 	bl	80159b0 <__mcmp>
 8014164:	2800      	cmp	r0, #0
 8014166:	dd6c      	ble.n	8014242 <_strtod_l+0x912>
 8014168:	9907      	ldr	r1, [sp, #28]
 801416a:	003b      	movs	r3, r7
 801416c:	4a39      	ldr	r2, [pc, #228]	; (8014254 <_strtod_l+0x924>)
 801416e:	2900      	cmp	r1, #0
 8014170:	d100      	bne.n	8014174 <_strtod_l+0x844>
 8014172:	e094      	b.n	801429e <_strtod_l+0x96e>
 8014174:	0011      	movs	r1, r2
 8014176:	20d6      	movs	r0, #214	; 0xd6
 8014178:	4039      	ands	r1, r7
 801417a:	04c0      	lsls	r0, r0, #19
 801417c:	4281      	cmp	r1, r0
 801417e:	dd00      	ble.n	8014182 <_strtod_l+0x852>
 8014180:	e08d      	b.n	801429e <_strtod_l+0x96e>
 8014182:	23dc      	movs	r3, #220	; 0xdc
 8014184:	049b      	lsls	r3, r3, #18
 8014186:	4299      	cmp	r1, r3
 8014188:	dc00      	bgt.n	801418c <_strtod_l+0x85c>
 801418a:	e6a7      	b.n	8013edc <_strtod_l+0x5ac>
 801418c:	0030      	movs	r0, r6
 801418e:	0039      	movs	r1, r7
 8014190:	4b31      	ldr	r3, [pc, #196]	; (8014258 <_strtod_l+0x928>)
 8014192:	2200      	movs	r2, #0
 8014194:	f7ed fed6 	bl	8001f44 <__aeabi_dmul>
 8014198:	4b2e      	ldr	r3, [pc, #184]	; (8014254 <_strtod_l+0x924>)
 801419a:	0006      	movs	r6, r0
 801419c:	000f      	movs	r7, r1
 801419e:	420b      	tst	r3, r1
 80141a0:	d000      	beq.n	80141a4 <_strtod_l+0x874>
 80141a2:	e631      	b.n	8013e08 <_strtod_l+0x4d8>
 80141a4:	2322      	movs	r3, #34	; 0x22
 80141a6:	9a04      	ldr	r2, [sp, #16]
 80141a8:	6013      	str	r3, [r2, #0]
 80141aa:	e62d      	b.n	8013e08 <_strtod_l+0x4d8>
 80141ac:	234b      	movs	r3, #75	; 0x4b
 80141ae:	1a9a      	subs	r2, r3, r2
 80141b0:	3b4c      	subs	r3, #76	; 0x4c
 80141b2:	4093      	lsls	r3, r2
 80141b4:	4019      	ands	r1, r3
 80141b6:	000f      	movs	r7, r1
 80141b8:	e6e3      	b.n	8013f82 <_strtod_l+0x652>
 80141ba:	2201      	movs	r2, #1
 80141bc:	4252      	negs	r2, r2
 80141be:	409a      	lsls	r2, r3
 80141c0:	4016      	ands	r6, r2
 80141c2:	e6de      	b.n	8013f82 <_strtod_l+0x652>
 80141c4:	4925      	ldr	r1, [pc, #148]	; (801425c <_strtod_l+0x92c>)
 80141c6:	1acb      	subs	r3, r1, r3
 80141c8:	0001      	movs	r1, r0
 80141ca:	4099      	lsls	r1, r3
 80141cc:	9114      	str	r1, [sp, #80]	; 0x50
 80141ce:	e743      	b.n	8014058 <_strtod_l+0x728>
 80141d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80141d4:	9804      	ldr	r0, [sp, #16]
 80141d6:	f001 fb7d 	bl	80158d4 <__lshift>
 80141da:	901c      	str	r0, [sp, #112]	; 0x70
 80141dc:	2800      	cmp	r0, #0
 80141de:	d000      	beq.n	80141e2 <_strtod_l+0x8b2>
 80141e0:	e76e      	b.n	80140c0 <_strtod_l+0x790>
 80141e2:	e608      	b.n	8013df6 <_strtod_l+0x4c6>
 80141e4:	970e      	str	r7, [sp, #56]	; 0x38
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d177      	bne.n	80142da <_strtod_l+0x9aa>
 80141ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141ec:	033b      	lsls	r3, r7, #12
 80141ee:	0b1b      	lsrs	r3, r3, #12
 80141f0:	2a00      	cmp	r2, #0
 80141f2:	d039      	beq.n	8014268 <_strtod_l+0x938>
 80141f4:	4a1a      	ldr	r2, [pc, #104]	; (8014260 <_strtod_l+0x930>)
 80141f6:	4293      	cmp	r3, r2
 80141f8:	d139      	bne.n	801426e <_strtod_l+0x93e>
 80141fa:	2101      	movs	r1, #1
 80141fc:	9b07      	ldr	r3, [sp, #28]
 80141fe:	4249      	negs	r1, r1
 8014200:	0032      	movs	r2, r6
 8014202:	0008      	movs	r0, r1
 8014204:	2b00      	cmp	r3, #0
 8014206:	d00b      	beq.n	8014220 <_strtod_l+0x8f0>
 8014208:	24d4      	movs	r4, #212	; 0xd4
 801420a:	4b12      	ldr	r3, [pc, #72]	; (8014254 <_strtod_l+0x924>)
 801420c:	0008      	movs	r0, r1
 801420e:	403b      	ands	r3, r7
 8014210:	04e4      	lsls	r4, r4, #19
 8014212:	42a3      	cmp	r3, r4
 8014214:	d804      	bhi.n	8014220 <_strtod_l+0x8f0>
 8014216:	306c      	adds	r0, #108	; 0x6c
 8014218:	0d1b      	lsrs	r3, r3, #20
 801421a:	1ac3      	subs	r3, r0, r3
 801421c:	4099      	lsls	r1, r3
 801421e:	0008      	movs	r0, r1
 8014220:	4282      	cmp	r2, r0
 8014222:	d124      	bne.n	801426e <_strtod_l+0x93e>
 8014224:	4b0f      	ldr	r3, [pc, #60]	; (8014264 <_strtod_l+0x934>)
 8014226:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014228:	4299      	cmp	r1, r3
 801422a:	d102      	bne.n	8014232 <_strtod_l+0x902>
 801422c:	3201      	adds	r2, #1
 801422e:	d100      	bne.n	8014232 <_strtod_l+0x902>
 8014230:	e5e1      	b.n	8013df6 <_strtod_l+0x4c6>
 8014232:	4b08      	ldr	r3, [pc, #32]	; (8014254 <_strtod_l+0x924>)
 8014234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014236:	2600      	movs	r6, #0
 8014238:	401a      	ands	r2, r3
 801423a:	0013      	movs	r3, r2
 801423c:	2280      	movs	r2, #128	; 0x80
 801423e:	0352      	lsls	r2, r2, #13
 8014240:	189f      	adds	r7, r3, r2
 8014242:	9b07      	ldr	r3, [sp, #28]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d1a1      	bne.n	801418c <_strtod_l+0x85c>
 8014248:	e5de      	b.n	8013e08 <_strtod_l+0x4d8>
 801424a:	46c0      	nop			; (mov r8, r8)
 801424c:	0801c600 	.word	0x0801c600
 8014250:	fffffc02 	.word	0xfffffc02
 8014254:	7ff00000 	.word	0x7ff00000
 8014258:	39500000 	.word	0x39500000
 801425c:	fffffbe2 	.word	0xfffffbe2
 8014260:	000fffff 	.word	0x000fffff
 8014264:	7fefffff 	.word	0x7fefffff
 8014268:	4333      	orrs	r3, r6
 801426a:	d100      	bne.n	801426e <_strtod_l+0x93e>
 801426c:	e77c      	b.n	8014168 <_strtod_l+0x838>
 801426e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014270:	2b00      	cmp	r3, #0
 8014272:	d01d      	beq.n	80142b0 <_strtod_l+0x980>
 8014274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014276:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014278:	4213      	tst	r3, r2
 801427a:	d0e2      	beq.n	8014242 <_strtod_l+0x912>
 801427c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801427e:	0030      	movs	r0, r6
 8014280:	0039      	movs	r1, r7
 8014282:	9a07      	ldr	r2, [sp, #28]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d017      	beq.n	80142b8 <_strtod_l+0x988>
 8014288:	f7ff fb3a 	bl	8013900 <sulp>
 801428c:	0002      	movs	r2, r0
 801428e:	000b      	movs	r3, r1
 8014290:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014292:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014294:	f7ec fefc 	bl	8001090 <__aeabi_dadd>
 8014298:	0006      	movs	r6, r0
 801429a:	000f      	movs	r7, r1
 801429c:	e7d1      	b.n	8014242 <_strtod_l+0x912>
 801429e:	2601      	movs	r6, #1
 80142a0:	4013      	ands	r3, r2
 80142a2:	4a98      	ldr	r2, [pc, #608]	; (8014504 <_strtod_l+0xbd4>)
 80142a4:	4276      	negs	r6, r6
 80142a6:	189b      	adds	r3, r3, r2
 80142a8:	4a97      	ldr	r2, [pc, #604]	; (8014508 <_strtod_l+0xbd8>)
 80142aa:	431a      	orrs	r2, r3
 80142ac:	0017      	movs	r7, r2
 80142ae:	e7c8      	b.n	8014242 <_strtod_l+0x912>
 80142b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142b2:	4233      	tst	r3, r6
 80142b4:	d0c5      	beq.n	8014242 <_strtod_l+0x912>
 80142b6:	e7e1      	b.n	801427c <_strtod_l+0x94c>
 80142b8:	f7ff fb22 	bl	8013900 <sulp>
 80142bc:	0002      	movs	r2, r0
 80142be:	000b      	movs	r3, r1
 80142c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80142c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80142c4:	f7ee f900 	bl	80024c8 <__aeabi_dsub>
 80142c8:	2200      	movs	r2, #0
 80142ca:	2300      	movs	r3, #0
 80142cc:	0006      	movs	r6, r0
 80142ce:	000f      	movs	r7, r1
 80142d0:	f7ec f8c4 	bl	800045c <__aeabi_dcmpeq>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d0b4      	beq.n	8014242 <_strtod_l+0x912>
 80142d8:	e600      	b.n	8013edc <_strtod_l+0x5ac>
 80142da:	9906      	ldr	r1, [sp, #24]
 80142dc:	9805      	ldr	r0, [sp, #20]
 80142de:	f001 fce3 	bl	8015ca8 <__ratio>
 80142e2:	2380      	movs	r3, #128	; 0x80
 80142e4:	2200      	movs	r2, #0
 80142e6:	05db      	lsls	r3, r3, #23
 80142e8:	0004      	movs	r4, r0
 80142ea:	000d      	movs	r5, r1
 80142ec:	f7ec f8c6 	bl	800047c <__aeabi_dcmple>
 80142f0:	2800      	cmp	r0, #0
 80142f2:	d06d      	beq.n	80143d0 <_strtod_l+0xaa0>
 80142f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d000      	beq.n	80142fc <_strtod_l+0x9cc>
 80142fa:	e07e      	b.n	80143fa <_strtod_l+0xaca>
 80142fc:	2e00      	cmp	r6, #0
 80142fe:	d158      	bne.n	80143b2 <_strtod_l+0xa82>
 8014300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014302:	031b      	lsls	r3, r3, #12
 8014304:	d000      	beq.n	8014308 <_strtod_l+0x9d8>
 8014306:	e07f      	b.n	8014408 <_strtod_l+0xad8>
 8014308:	2200      	movs	r2, #0
 801430a:	0020      	movs	r0, r4
 801430c:	0029      	movs	r1, r5
 801430e:	4b7f      	ldr	r3, [pc, #508]	; (801450c <_strtod_l+0xbdc>)
 8014310:	f7ec f8aa 	bl	8000468 <__aeabi_dcmplt>
 8014314:	2800      	cmp	r0, #0
 8014316:	d158      	bne.n	80143ca <_strtod_l+0xa9a>
 8014318:	0020      	movs	r0, r4
 801431a:	0029      	movs	r1, r5
 801431c:	2200      	movs	r2, #0
 801431e:	4b7c      	ldr	r3, [pc, #496]	; (8014510 <_strtod_l+0xbe0>)
 8014320:	f7ed fe10 	bl	8001f44 <__aeabi_dmul>
 8014324:	0004      	movs	r4, r0
 8014326:	000d      	movs	r5, r1
 8014328:	2380      	movs	r3, #128	; 0x80
 801432a:	061b      	lsls	r3, r3, #24
 801432c:	940a      	str	r4, [sp, #40]	; 0x28
 801432e:	18eb      	adds	r3, r5, r3
 8014330:	930b      	str	r3, [sp, #44]	; 0x2c
 8014332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014336:	9212      	str	r2, [sp, #72]	; 0x48
 8014338:	9313      	str	r3, [sp, #76]	; 0x4c
 801433a:	4a76      	ldr	r2, [pc, #472]	; (8014514 <_strtod_l+0xbe4>)
 801433c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801433e:	4013      	ands	r3, r2
 8014340:	9314      	str	r3, [sp, #80]	; 0x50
 8014342:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014344:	4b74      	ldr	r3, [pc, #464]	; (8014518 <_strtod_l+0xbe8>)
 8014346:	429a      	cmp	r2, r3
 8014348:	d000      	beq.n	801434c <_strtod_l+0xa1c>
 801434a:	e091      	b.n	8014470 <_strtod_l+0xb40>
 801434c:	4a73      	ldr	r2, [pc, #460]	; (801451c <_strtod_l+0xbec>)
 801434e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014350:	4694      	mov	ip, r2
 8014352:	4463      	add	r3, ip
 8014354:	001f      	movs	r7, r3
 8014356:	0030      	movs	r0, r6
 8014358:	0019      	movs	r1, r3
 801435a:	f001 fbdd 	bl	8015b18 <__ulp>
 801435e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014362:	f7ed fdef 	bl	8001f44 <__aeabi_dmul>
 8014366:	0032      	movs	r2, r6
 8014368:	003b      	movs	r3, r7
 801436a:	f7ec fe91 	bl	8001090 <__aeabi_dadd>
 801436e:	4a69      	ldr	r2, [pc, #420]	; (8014514 <_strtod_l+0xbe4>)
 8014370:	4b6b      	ldr	r3, [pc, #428]	; (8014520 <_strtod_l+0xbf0>)
 8014372:	0006      	movs	r6, r0
 8014374:	400a      	ands	r2, r1
 8014376:	429a      	cmp	r2, r3
 8014378:	d949      	bls.n	801440e <_strtod_l+0xade>
 801437a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801437c:	4b69      	ldr	r3, [pc, #420]	; (8014524 <_strtod_l+0xbf4>)
 801437e:	429a      	cmp	r2, r3
 8014380:	d103      	bne.n	801438a <_strtod_l+0xa5a>
 8014382:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014384:	3301      	adds	r3, #1
 8014386:	d100      	bne.n	801438a <_strtod_l+0xa5a>
 8014388:	e535      	b.n	8013df6 <_strtod_l+0x4c6>
 801438a:	2601      	movs	r6, #1
 801438c:	4f65      	ldr	r7, [pc, #404]	; (8014524 <_strtod_l+0xbf4>)
 801438e:	4276      	negs	r6, r6
 8014390:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014392:	9804      	ldr	r0, [sp, #16]
 8014394:	f001 f8b2 	bl	80154fc <_Bfree>
 8014398:	9908      	ldr	r1, [sp, #32]
 801439a:	9804      	ldr	r0, [sp, #16]
 801439c:	f001 f8ae 	bl	80154fc <_Bfree>
 80143a0:	9906      	ldr	r1, [sp, #24]
 80143a2:	9804      	ldr	r0, [sp, #16]
 80143a4:	f001 f8aa 	bl	80154fc <_Bfree>
 80143a8:	9905      	ldr	r1, [sp, #20]
 80143aa:	9804      	ldr	r0, [sp, #16]
 80143ac:	f001 f8a6 	bl	80154fc <_Bfree>
 80143b0:	e60b      	b.n	8013fca <_strtod_l+0x69a>
 80143b2:	2e01      	cmp	r6, #1
 80143b4:	d103      	bne.n	80143be <_strtod_l+0xa8e>
 80143b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d100      	bne.n	80143be <_strtod_l+0xa8e>
 80143bc:	e58e      	b.n	8013edc <_strtod_l+0x5ac>
 80143be:	2300      	movs	r3, #0
 80143c0:	4c59      	ldr	r4, [pc, #356]	; (8014528 <_strtod_l+0xbf8>)
 80143c2:	930a      	str	r3, [sp, #40]	; 0x28
 80143c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80143c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80143c8:	e01c      	b.n	8014404 <_strtod_l+0xad4>
 80143ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80143cc:	4d50      	ldr	r5, [pc, #320]	; (8014510 <_strtod_l+0xbe0>)
 80143ce:	e7ab      	b.n	8014328 <_strtod_l+0x9f8>
 80143d0:	2200      	movs	r2, #0
 80143d2:	0020      	movs	r0, r4
 80143d4:	0029      	movs	r1, r5
 80143d6:	4b4e      	ldr	r3, [pc, #312]	; (8014510 <_strtod_l+0xbe0>)
 80143d8:	f7ed fdb4 	bl	8001f44 <__aeabi_dmul>
 80143dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143de:	0004      	movs	r4, r0
 80143e0:	000b      	movs	r3, r1
 80143e2:	000d      	movs	r5, r1
 80143e4:	2a00      	cmp	r2, #0
 80143e6:	d104      	bne.n	80143f2 <_strtod_l+0xac2>
 80143e8:	2280      	movs	r2, #128	; 0x80
 80143ea:	0612      	lsls	r2, r2, #24
 80143ec:	900a      	str	r0, [sp, #40]	; 0x28
 80143ee:	188b      	adds	r3, r1, r2
 80143f0:	e79e      	b.n	8014330 <_strtod_l+0xa00>
 80143f2:	0002      	movs	r2, r0
 80143f4:	920a      	str	r2, [sp, #40]	; 0x28
 80143f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80143f8:	e79b      	b.n	8014332 <_strtod_l+0xa02>
 80143fa:	2300      	movs	r3, #0
 80143fc:	4c43      	ldr	r4, [pc, #268]	; (801450c <_strtod_l+0xbdc>)
 80143fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014400:	940b      	str	r4, [sp, #44]	; 0x2c
 8014402:	2400      	movs	r4, #0
 8014404:	4d41      	ldr	r5, [pc, #260]	; (801450c <_strtod_l+0xbdc>)
 8014406:	e794      	b.n	8014332 <_strtod_l+0xa02>
 8014408:	2300      	movs	r3, #0
 801440a:	4c47      	ldr	r4, [pc, #284]	; (8014528 <_strtod_l+0xbf8>)
 801440c:	e7f7      	b.n	80143fe <_strtod_l+0xace>
 801440e:	23d4      	movs	r3, #212	; 0xd4
 8014410:	049b      	lsls	r3, r3, #18
 8014412:	18cf      	adds	r7, r1, r3
 8014414:	9b07      	ldr	r3, [sp, #28]
 8014416:	970e      	str	r7, [sp, #56]	; 0x38
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1b9      	bne.n	8014390 <_strtod_l+0xa60>
 801441c:	4b3d      	ldr	r3, [pc, #244]	; (8014514 <_strtod_l+0xbe4>)
 801441e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014420:	403b      	ands	r3, r7
 8014422:	429a      	cmp	r2, r3
 8014424:	d1b4      	bne.n	8014390 <_strtod_l+0xa60>
 8014426:	0020      	movs	r0, r4
 8014428:	0029      	movs	r1, r5
 801442a:	f7ec f90d 	bl	8000648 <__aeabi_d2lz>
 801442e:	f7ec f947 	bl	80006c0 <__aeabi_l2d>
 8014432:	0002      	movs	r2, r0
 8014434:	000b      	movs	r3, r1
 8014436:	0020      	movs	r0, r4
 8014438:	0029      	movs	r1, r5
 801443a:	f7ee f845 	bl	80024c8 <__aeabi_dsub>
 801443e:	033b      	lsls	r3, r7, #12
 8014440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014442:	0b1b      	lsrs	r3, r3, #12
 8014444:	4333      	orrs	r3, r6
 8014446:	4313      	orrs	r3, r2
 8014448:	0004      	movs	r4, r0
 801444a:	000d      	movs	r5, r1
 801444c:	4a37      	ldr	r2, [pc, #220]	; (801452c <_strtod_l+0xbfc>)
 801444e:	2b00      	cmp	r3, #0
 8014450:	d054      	beq.n	80144fc <_strtod_l+0xbcc>
 8014452:	4b37      	ldr	r3, [pc, #220]	; (8014530 <_strtod_l+0xc00>)
 8014454:	f7ec f808 	bl	8000468 <__aeabi_dcmplt>
 8014458:	2800      	cmp	r0, #0
 801445a:	d000      	beq.n	801445e <_strtod_l+0xb2e>
 801445c:	e4d4      	b.n	8013e08 <_strtod_l+0x4d8>
 801445e:	0020      	movs	r0, r4
 8014460:	0029      	movs	r1, r5
 8014462:	4a34      	ldr	r2, [pc, #208]	; (8014534 <_strtod_l+0xc04>)
 8014464:	4b2a      	ldr	r3, [pc, #168]	; (8014510 <_strtod_l+0xbe0>)
 8014466:	f7ec f813 	bl	8000490 <__aeabi_dcmpgt>
 801446a:	2800      	cmp	r0, #0
 801446c:	d090      	beq.n	8014390 <_strtod_l+0xa60>
 801446e:	e4cb      	b.n	8013e08 <_strtod_l+0x4d8>
 8014470:	9b07      	ldr	r3, [sp, #28]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d02b      	beq.n	80144ce <_strtod_l+0xb9e>
 8014476:	23d4      	movs	r3, #212	; 0xd4
 8014478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801447a:	04db      	lsls	r3, r3, #19
 801447c:	429a      	cmp	r2, r3
 801447e:	d826      	bhi.n	80144ce <_strtod_l+0xb9e>
 8014480:	0020      	movs	r0, r4
 8014482:	0029      	movs	r1, r5
 8014484:	4a2c      	ldr	r2, [pc, #176]	; (8014538 <_strtod_l+0xc08>)
 8014486:	4b2d      	ldr	r3, [pc, #180]	; (801453c <_strtod_l+0xc0c>)
 8014488:	f7eb fff8 	bl	800047c <__aeabi_dcmple>
 801448c:	2800      	cmp	r0, #0
 801448e:	d017      	beq.n	80144c0 <_strtod_l+0xb90>
 8014490:	0020      	movs	r0, r4
 8014492:	0029      	movs	r1, r5
 8014494:	f7ec f8ba 	bl	800060c <__aeabi_d2uiz>
 8014498:	2800      	cmp	r0, #0
 801449a:	d100      	bne.n	801449e <_strtod_l+0xb6e>
 801449c:	3001      	adds	r0, #1
 801449e:	f7ee fc19 	bl	8002cd4 <__aeabi_ui2d>
 80144a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144a4:	0004      	movs	r4, r0
 80144a6:	000b      	movs	r3, r1
 80144a8:	000d      	movs	r5, r1
 80144aa:	2a00      	cmp	r2, #0
 80144ac:	d122      	bne.n	80144f4 <_strtod_l+0xbc4>
 80144ae:	2280      	movs	r2, #128	; 0x80
 80144b0:	0612      	lsls	r2, r2, #24
 80144b2:	188b      	adds	r3, r1, r2
 80144b4:	9016      	str	r0, [sp, #88]	; 0x58
 80144b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80144b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80144ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144bc:	9212      	str	r2, [sp, #72]	; 0x48
 80144be:	9313      	str	r3, [sp, #76]	; 0x4c
 80144c0:	22d6      	movs	r2, #214	; 0xd6
 80144c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144c4:	04d2      	lsls	r2, r2, #19
 80144c6:	189b      	adds	r3, r3, r2
 80144c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80144ca:	1a9b      	subs	r3, r3, r2
 80144cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80144ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80144d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80144d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80144d4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80144d6:	f001 fb1f 	bl	8015b18 <__ulp>
 80144da:	0002      	movs	r2, r0
 80144dc:	000b      	movs	r3, r1
 80144de:	0030      	movs	r0, r6
 80144e0:	0039      	movs	r1, r7
 80144e2:	f7ed fd2f 	bl	8001f44 <__aeabi_dmul>
 80144e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80144e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80144ea:	f7ec fdd1 	bl	8001090 <__aeabi_dadd>
 80144ee:	0006      	movs	r6, r0
 80144f0:	000f      	movs	r7, r1
 80144f2:	e78f      	b.n	8014414 <_strtod_l+0xae4>
 80144f4:	0002      	movs	r2, r0
 80144f6:	9216      	str	r2, [sp, #88]	; 0x58
 80144f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80144fa:	e7dd      	b.n	80144b8 <_strtod_l+0xb88>
 80144fc:	4b10      	ldr	r3, [pc, #64]	; (8014540 <_strtod_l+0xc10>)
 80144fe:	f7eb ffb3 	bl	8000468 <__aeabi_dcmplt>
 8014502:	e7b2      	b.n	801446a <_strtod_l+0xb3a>
 8014504:	fff00000 	.word	0xfff00000
 8014508:	000fffff 	.word	0x000fffff
 801450c:	3ff00000 	.word	0x3ff00000
 8014510:	3fe00000 	.word	0x3fe00000
 8014514:	7ff00000 	.word	0x7ff00000
 8014518:	7fe00000 	.word	0x7fe00000
 801451c:	fcb00000 	.word	0xfcb00000
 8014520:	7c9fffff 	.word	0x7c9fffff
 8014524:	7fefffff 	.word	0x7fefffff
 8014528:	bff00000 	.word	0xbff00000
 801452c:	94a03595 	.word	0x94a03595
 8014530:	3fdfffff 	.word	0x3fdfffff
 8014534:	35afe535 	.word	0x35afe535
 8014538:	ffc00000 	.word	0xffc00000
 801453c:	41dfffff 	.word	0x41dfffff
 8014540:	3fcfffff 	.word	0x3fcfffff

08014544 <strtod>:
 8014544:	b510      	push	{r4, lr}
 8014546:	4c04      	ldr	r4, [pc, #16]	; (8014558 <strtod+0x14>)
 8014548:	000a      	movs	r2, r1
 801454a:	0001      	movs	r1, r0
 801454c:	4b03      	ldr	r3, [pc, #12]	; (801455c <strtod+0x18>)
 801454e:	6820      	ldr	r0, [r4, #0]
 8014550:	f7ff f9ee 	bl	8013930 <_strtod_l>
 8014554:	bd10      	pop	{r4, pc}
 8014556:	46c0      	nop			; (mov r8, r8)
 8014558:	20000778 	.word	0x20000778
 801455c:	200004e8 	.word	0x200004e8

08014560 <_strtol_l.constprop.0>:
 8014560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014562:	b087      	sub	sp, #28
 8014564:	001e      	movs	r6, r3
 8014566:	9005      	str	r0, [sp, #20]
 8014568:	9101      	str	r1, [sp, #4]
 801456a:	9202      	str	r2, [sp, #8]
 801456c:	2b01      	cmp	r3, #1
 801456e:	d048      	beq.n	8014602 <_strtol_l.constprop.0+0xa2>
 8014570:	000b      	movs	r3, r1
 8014572:	2e24      	cmp	r6, #36	; 0x24
 8014574:	d845      	bhi.n	8014602 <_strtol_l.constprop.0+0xa2>
 8014576:	4a3b      	ldr	r2, [pc, #236]	; (8014664 <_strtol_l.constprop.0+0x104>)
 8014578:	2108      	movs	r1, #8
 801457a:	4694      	mov	ip, r2
 801457c:	001a      	movs	r2, r3
 801457e:	4660      	mov	r0, ip
 8014580:	7814      	ldrb	r4, [r2, #0]
 8014582:	3301      	adds	r3, #1
 8014584:	5d00      	ldrb	r0, [r0, r4]
 8014586:	001d      	movs	r5, r3
 8014588:	0007      	movs	r7, r0
 801458a:	400f      	ands	r7, r1
 801458c:	4208      	tst	r0, r1
 801458e:	d1f5      	bne.n	801457c <_strtol_l.constprop.0+0x1c>
 8014590:	2c2d      	cmp	r4, #45	; 0x2d
 8014592:	d13d      	bne.n	8014610 <_strtol_l.constprop.0+0xb0>
 8014594:	2701      	movs	r7, #1
 8014596:	781c      	ldrb	r4, [r3, #0]
 8014598:	1c95      	adds	r5, r2, #2
 801459a:	2e00      	cmp	r6, #0
 801459c:	d05e      	beq.n	801465c <_strtol_l.constprop.0+0xfc>
 801459e:	2e10      	cmp	r6, #16
 80145a0:	d109      	bne.n	80145b6 <_strtol_l.constprop.0+0x56>
 80145a2:	2c30      	cmp	r4, #48	; 0x30
 80145a4:	d107      	bne.n	80145b6 <_strtol_l.constprop.0+0x56>
 80145a6:	2220      	movs	r2, #32
 80145a8:	782b      	ldrb	r3, [r5, #0]
 80145aa:	4393      	bics	r3, r2
 80145ac:	2b58      	cmp	r3, #88	; 0x58
 80145ae:	d150      	bne.n	8014652 <_strtol_l.constprop.0+0xf2>
 80145b0:	2610      	movs	r6, #16
 80145b2:	786c      	ldrb	r4, [r5, #1]
 80145b4:	3502      	adds	r5, #2
 80145b6:	4b2c      	ldr	r3, [pc, #176]	; (8014668 <_strtol_l.constprop.0+0x108>)
 80145b8:	0031      	movs	r1, r6
 80145ba:	18fb      	adds	r3, r7, r3
 80145bc:	0018      	movs	r0, r3
 80145be:	9303      	str	r3, [sp, #12]
 80145c0:	f7eb fe4c 	bl	800025c <__aeabi_uidivmod>
 80145c4:	2200      	movs	r2, #0
 80145c6:	9104      	str	r1, [sp, #16]
 80145c8:	2101      	movs	r1, #1
 80145ca:	4684      	mov	ip, r0
 80145cc:	0010      	movs	r0, r2
 80145ce:	4249      	negs	r1, r1
 80145d0:	0023      	movs	r3, r4
 80145d2:	3b30      	subs	r3, #48	; 0x30
 80145d4:	2b09      	cmp	r3, #9
 80145d6:	d903      	bls.n	80145e0 <_strtol_l.constprop.0+0x80>
 80145d8:	3b11      	subs	r3, #17
 80145da:	2b19      	cmp	r3, #25
 80145dc:	d81d      	bhi.n	801461a <_strtol_l.constprop.0+0xba>
 80145de:	330a      	adds	r3, #10
 80145e0:	429e      	cmp	r6, r3
 80145e2:	dd1e      	ble.n	8014622 <_strtol_l.constprop.0+0xc2>
 80145e4:	1c54      	adds	r4, r2, #1
 80145e6:	d009      	beq.n	80145fc <_strtol_l.constprop.0+0x9c>
 80145e8:	000a      	movs	r2, r1
 80145ea:	4584      	cmp	ip, r0
 80145ec:	d306      	bcc.n	80145fc <_strtol_l.constprop.0+0x9c>
 80145ee:	d102      	bne.n	80145f6 <_strtol_l.constprop.0+0x96>
 80145f0:	9c04      	ldr	r4, [sp, #16]
 80145f2:	429c      	cmp	r4, r3
 80145f4:	db02      	blt.n	80145fc <_strtol_l.constprop.0+0x9c>
 80145f6:	2201      	movs	r2, #1
 80145f8:	4370      	muls	r0, r6
 80145fa:	1818      	adds	r0, r3, r0
 80145fc:	782c      	ldrb	r4, [r5, #0]
 80145fe:	3501      	adds	r5, #1
 8014600:	e7e6      	b.n	80145d0 <_strtol_l.constprop.0+0x70>
 8014602:	f000 fa7b 	bl	8014afc <__errno>
 8014606:	2316      	movs	r3, #22
 8014608:	6003      	str	r3, [r0, #0]
 801460a:	2000      	movs	r0, #0
 801460c:	b007      	add	sp, #28
 801460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014610:	2c2b      	cmp	r4, #43	; 0x2b
 8014612:	d1c2      	bne.n	801459a <_strtol_l.constprop.0+0x3a>
 8014614:	781c      	ldrb	r4, [r3, #0]
 8014616:	1c95      	adds	r5, r2, #2
 8014618:	e7bf      	b.n	801459a <_strtol_l.constprop.0+0x3a>
 801461a:	0023      	movs	r3, r4
 801461c:	3b61      	subs	r3, #97	; 0x61
 801461e:	2b19      	cmp	r3, #25
 8014620:	d9dd      	bls.n	80145de <_strtol_l.constprop.0+0x7e>
 8014622:	1c53      	adds	r3, r2, #1
 8014624:	d109      	bne.n	801463a <_strtol_l.constprop.0+0xda>
 8014626:	2322      	movs	r3, #34	; 0x22
 8014628:	9a05      	ldr	r2, [sp, #20]
 801462a:	9803      	ldr	r0, [sp, #12]
 801462c:	6013      	str	r3, [r2, #0]
 801462e:	9b02      	ldr	r3, [sp, #8]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d0eb      	beq.n	801460c <_strtol_l.constprop.0+0xac>
 8014634:	1e6b      	subs	r3, r5, #1
 8014636:	9301      	str	r3, [sp, #4]
 8014638:	e007      	b.n	801464a <_strtol_l.constprop.0+0xea>
 801463a:	2f00      	cmp	r7, #0
 801463c:	d000      	beq.n	8014640 <_strtol_l.constprop.0+0xe0>
 801463e:	4240      	negs	r0, r0
 8014640:	9b02      	ldr	r3, [sp, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d0e2      	beq.n	801460c <_strtol_l.constprop.0+0xac>
 8014646:	2a00      	cmp	r2, #0
 8014648:	d1f4      	bne.n	8014634 <_strtol_l.constprop.0+0xd4>
 801464a:	9b02      	ldr	r3, [sp, #8]
 801464c:	9a01      	ldr	r2, [sp, #4]
 801464e:	601a      	str	r2, [r3, #0]
 8014650:	e7dc      	b.n	801460c <_strtol_l.constprop.0+0xac>
 8014652:	2430      	movs	r4, #48	; 0x30
 8014654:	2e00      	cmp	r6, #0
 8014656:	d1ae      	bne.n	80145b6 <_strtol_l.constprop.0+0x56>
 8014658:	3608      	adds	r6, #8
 801465a:	e7ac      	b.n	80145b6 <_strtol_l.constprop.0+0x56>
 801465c:	2c30      	cmp	r4, #48	; 0x30
 801465e:	d0a2      	beq.n	80145a6 <_strtol_l.constprop.0+0x46>
 8014660:	260a      	movs	r6, #10
 8014662:	e7a8      	b.n	80145b6 <_strtol_l.constprop.0+0x56>
 8014664:	0801c629 	.word	0x0801c629
 8014668:	7fffffff 	.word	0x7fffffff

0801466c <strtol>:
 801466c:	b510      	push	{r4, lr}
 801466e:	4c04      	ldr	r4, [pc, #16]	; (8014680 <strtol+0x14>)
 8014670:	0013      	movs	r3, r2
 8014672:	000a      	movs	r2, r1
 8014674:	0001      	movs	r1, r0
 8014676:	6820      	ldr	r0, [r4, #0]
 8014678:	f7ff ff72 	bl	8014560 <_strtol_l.constprop.0>
 801467c:	bd10      	pop	{r4, pc}
 801467e:	46c0      	nop			; (mov r8, r8)
 8014680:	20000778 	.word	0x20000778

08014684 <std>:
 8014684:	2300      	movs	r3, #0
 8014686:	b510      	push	{r4, lr}
 8014688:	0004      	movs	r4, r0
 801468a:	6003      	str	r3, [r0, #0]
 801468c:	6043      	str	r3, [r0, #4]
 801468e:	6083      	str	r3, [r0, #8]
 8014690:	8181      	strh	r1, [r0, #12]
 8014692:	6643      	str	r3, [r0, #100]	; 0x64
 8014694:	81c2      	strh	r2, [r0, #14]
 8014696:	6103      	str	r3, [r0, #16]
 8014698:	6143      	str	r3, [r0, #20]
 801469a:	6183      	str	r3, [r0, #24]
 801469c:	0019      	movs	r1, r3
 801469e:	2208      	movs	r2, #8
 80146a0:	305c      	adds	r0, #92	; 0x5c
 80146a2:	f000 f940 	bl	8014926 <memset>
 80146a6:	4b0b      	ldr	r3, [pc, #44]	; (80146d4 <std+0x50>)
 80146a8:	61e4      	str	r4, [r4, #28]
 80146aa:	6223      	str	r3, [r4, #32]
 80146ac:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <std+0x54>)
 80146ae:	6263      	str	r3, [r4, #36]	; 0x24
 80146b0:	4b0a      	ldr	r3, [pc, #40]	; (80146dc <std+0x58>)
 80146b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80146b4:	4b0a      	ldr	r3, [pc, #40]	; (80146e0 <std+0x5c>)
 80146b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146b8:	4b0a      	ldr	r3, [pc, #40]	; (80146e4 <std+0x60>)
 80146ba:	429c      	cmp	r4, r3
 80146bc:	d005      	beq.n	80146ca <std+0x46>
 80146be:	4b0a      	ldr	r3, [pc, #40]	; (80146e8 <std+0x64>)
 80146c0:	429c      	cmp	r4, r3
 80146c2:	d002      	beq.n	80146ca <std+0x46>
 80146c4:	4b09      	ldr	r3, [pc, #36]	; (80146ec <std+0x68>)
 80146c6:	429c      	cmp	r4, r3
 80146c8:	d103      	bne.n	80146d2 <std+0x4e>
 80146ca:	0020      	movs	r0, r4
 80146cc:	3058      	adds	r0, #88	; 0x58
 80146ce:	f000 fa3f 	bl	8014b50 <__retarget_lock_init_recursive>
 80146d2:	bd10      	pop	{r4, pc}
 80146d4:	0801484d 	.word	0x0801484d
 80146d8:	08014875 	.word	0x08014875
 80146dc:	080148ad 	.word	0x080148ad
 80146e0:	080148d9 	.word	0x080148d9
 80146e4:	20006c7c 	.word	0x20006c7c
 80146e8:	20006ce4 	.word	0x20006ce4
 80146ec:	20006d4c 	.word	0x20006d4c

080146f0 <stdio_exit_handler>:
 80146f0:	b510      	push	{r4, lr}
 80146f2:	4a03      	ldr	r2, [pc, #12]	; (8014700 <stdio_exit_handler+0x10>)
 80146f4:	4903      	ldr	r1, [pc, #12]	; (8014704 <stdio_exit_handler+0x14>)
 80146f6:	4804      	ldr	r0, [pc, #16]	; (8014708 <stdio_exit_handler+0x18>)
 80146f8:	f000 f86c 	bl	80147d4 <_fwalk_sglue>
 80146fc:	bd10      	pop	{r4, pc}
 80146fe:	46c0      	nop			; (mov r8, r8)
 8014700:	200004dc 	.word	0x200004dc
 8014704:	08017221 	.word	0x08017221
 8014708:	20000658 	.word	0x20000658

0801470c <cleanup_stdio>:
 801470c:	6841      	ldr	r1, [r0, #4]
 801470e:	4b0b      	ldr	r3, [pc, #44]	; (801473c <cleanup_stdio+0x30>)
 8014710:	b510      	push	{r4, lr}
 8014712:	0004      	movs	r4, r0
 8014714:	4299      	cmp	r1, r3
 8014716:	d001      	beq.n	801471c <cleanup_stdio+0x10>
 8014718:	f002 fd82 	bl	8017220 <_fclose_r>
 801471c:	68a1      	ldr	r1, [r4, #8]
 801471e:	4b08      	ldr	r3, [pc, #32]	; (8014740 <cleanup_stdio+0x34>)
 8014720:	4299      	cmp	r1, r3
 8014722:	d002      	beq.n	801472a <cleanup_stdio+0x1e>
 8014724:	0020      	movs	r0, r4
 8014726:	f002 fd7b 	bl	8017220 <_fclose_r>
 801472a:	68e1      	ldr	r1, [r4, #12]
 801472c:	4b05      	ldr	r3, [pc, #20]	; (8014744 <cleanup_stdio+0x38>)
 801472e:	4299      	cmp	r1, r3
 8014730:	d002      	beq.n	8014738 <cleanup_stdio+0x2c>
 8014732:	0020      	movs	r0, r4
 8014734:	f002 fd74 	bl	8017220 <_fclose_r>
 8014738:	bd10      	pop	{r4, pc}
 801473a:	46c0      	nop			; (mov r8, r8)
 801473c:	20006c7c 	.word	0x20006c7c
 8014740:	20006ce4 	.word	0x20006ce4
 8014744:	20006d4c 	.word	0x20006d4c

08014748 <global_stdio_init.part.0>:
 8014748:	b510      	push	{r4, lr}
 801474a:	4b09      	ldr	r3, [pc, #36]	; (8014770 <global_stdio_init.part.0+0x28>)
 801474c:	4a09      	ldr	r2, [pc, #36]	; (8014774 <global_stdio_init.part.0+0x2c>)
 801474e:	2104      	movs	r1, #4
 8014750:	601a      	str	r2, [r3, #0]
 8014752:	4809      	ldr	r0, [pc, #36]	; (8014778 <global_stdio_init.part.0+0x30>)
 8014754:	2200      	movs	r2, #0
 8014756:	f7ff ff95 	bl	8014684 <std>
 801475a:	2201      	movs	r2, #1
 801475c:	2109      	movs	r1, #9
 801475e:	4807      	ldr	r0, [pc, #28]	; (801477c <global_stdio_init.part.0+0x34>)
 8014760:	f7ff ff90 	bl	8014684 <std>
 8014764:	2202      	movs	r2, #2
 8014766:	2112      	movs	r1, #18
 8014768:	4805      	ldr	r0, [pc, #20]	; (8014780 <global_stdio_init.part.0+0x38>)
 801476a:	f7ff ff8b 	bl	8014684 <std>
 801476e:	bd10      	pop	{r4, pc}
 8014770:	20006db4 	.word	0x20006db4
 8014774:	080146f1 	.word	0x080146f1
 8014778:	20006c7c 	.word	0x20006c7c
 801477c:	20006ce4 	.word	0x20006ce4
 8014780:	20006d4c 	.word	0x20006d4c

08014784 <__sfp_lock_acquire>:
 8014784:	b510      	push	{r4, lr}
 8014786:	4802      	ldr	r0, [pc, #8]	; (8014790 <__sfp_lock_acquire+0xc>)
 8014788:	f000 f9e4 	bl	8014b54 <__retarget_lock_acquire_recursive>
 801478c:	bd10      	pop	{r4, pc}
 801478e:	46c0      	nop			; (mov r8, r8)
 8014790:	20006dbe 	.word	0x20006dbe

08014794 <__sfp_lock_release>:
 8014794:	b510      	push	{r4, lr}
 8014796:	4802      	ldr	r0, [pc, #8]	; (80147a0 <__sfp_lock_release+0xc>)
 8014798:	f000 f9dd 	bl	8014b56 <__retarget_lock_release_recursive>
 801479c:	bd10      	pop	{r4, pc}
 801479e:	46c0      	nop			; (mov r8, r8)
 80147a0:	20006dbe 	.word	0x20006dbe

080147a4 <__sinit>:
 80147a4:	b510      	push	{r4, lr}
 80147a6:	0004      	movs	r4, r0
 80147a8:	f7ff ffec 	bl	8014784 <__sfp_lock_acquire>
 80147ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d002      	beq.n	80147b8 <__sinit+0x14>
 80147b2:	f7ff ffef 	bl	8014794 <__sfp_lock_release>
 80147b6:	bd10      	pop	{r4, pc}
 80147b8:	4b04      	ldr	r3, [pc, #16]	; (80147cc <__sinit+0x28>)
 80147ba:	6363      	str	r3, [r4, #52]	; 0x34
 80147bc:	4b04      	ldr	r3, [pc, #16]	; (80147d0 <__sinit+0x2c>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d1f6      	bne.n	80147b2 <__sinit+0xe>
 80147c4:	f7ff ffc0 	bl	8014748 <global_stdio_init.part.0>
 80147c8:	e7f3      	b.n	80147b2 <__sinit+0xe>
 80147ca:	46c0      	nop			; (mov r8, r8)
 80147cc:	0801470d 	.word	0x0801470d
 80147d0:	20006db4 	.word	0x20006db4

080147d4 <_fwalk_sglue>:
 80147d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147d6:	0014      	movs	r4, r2
 80147d8:	2600      	movs	r6, #0
 80147da:	9000      	str	r0, [sp, #0]
 80147dc:	9101      	str	r1, [sp, #4]
 80147de:	68a5      	ldr	r5, [r4, #8]
 80147e0:	6867      	ldr	r7, [r4, #4]
 80147e2:	3f01      	subs	r7, #1
 80147e4:	d504      	bpl.n	80147f0 <_fwalk_sglue+0x1c>
 80147e6:	6824      	ldr	r4, [r4, #0]
 80147e8:	2c00      	cmp	r4, #0
 80147ea:	d1f8      	bne.n	80147de <_fwalk_sglue+0xa>
 80147ec:	0030      	movs	r0, r6
 80147ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80147f0:	89ab      	ldrh	r3, [r5, #12]
 80147f2:	2b01      	cmp	r3, #1
 80147f4:	d908      	bls.n	8014808 <_fwalk_sglue+0x34>
 80147f6:	220e      	movs	r2, #14
 80147f8:	5eab      	ldrsh	r3, [r5, r2]
 80147fa:	3301      	adds	r3, #1
 80147fc:	d004      	beq.n	8014808 <_fwalk_sglue+0x34>
 80147fe:	0029      	movs	r1, r5
 8014800:	9800      	ldr	r0, [sp, #0]
 8014802:	9b01      	ldr	r3, [sp, #4]
 8014804:	4798      	blx	r3
 8014806:	4306      	orrs	r6, r0
 8014808:	3568      	adds	r5, #104	; 0x68
 801480a:	e7ea      	b.n	80147e2 <_fwalk_sglue+0xe>

0801480c <sprintf>:
 801480c:	b40e      	push	{r1, r2, r3}
 801480e:	b500      	push	{lr}
 8014810:	490b      	ldr	r1, [pc, #44]	; (8014840 <sprintf+0x34>)
 8014812:	b09c      	sub	sp, #112	; 0x70
 8014814:	ab1d      	add	r3, sp, #116	; 0x74
 8014816:	9002      	str	r0, [sp, #8]
 8014818:	9006      	str	r0, [sp, #24]
 801481a:	9107      	str	r1, [sp, #28]
 801481c:	9104      	str	r1, [sp, #16]
 801481e:	4809      	ldr	r0, [pc, #36]	; (8014844 <sprintf+0x38>)
 8014820:	4909      	ldr	r1, [pc, #36]	; (8014848 <sprintf+0x3c>)
 8014822:	cb04      	ldmia	r3!, {r2}
 8014824:	9105      	str	r1, [sp, #20]
 8014826:	6800      	ldr	r0, [r0, #0]
 8014828:	a902      	add	r1, sp, #8
 801482a:	9301      	str	r3, [sp, #4]
 801482c:	f001 fab6 	bl	8015d9c <_svfprintf_r>
 8014830:	2200      	movs	r2, #0
 8014832:	9b02      	ldr	r3, [sp, #8]
 8014834:	701a      	strb	r2, [r3, #0]
 8014836:	b01c      	add	sp, #112	; 0x70
 8014838:	bc08      	pop	{r3}
 801483a:	b003      	add	sp, #12
 801483c:	4718      	bx	r3
 801483e:	46c0      	nop			; (mov r8, r8)
 8014840:	7fffffff 	.word	0x7fffffff
 8014844:	20000778 	.word	0x20000778
 8014848:	ffff0208 	.word	0xffff0208

0801484c <__sread>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	000c      	movs	r4, r1
 8014850:	250e      	movs	r5, #14
 8014852:	5f49      	ldrsh	r1, [r1, r5]
 8014854:	f000 f918 	bl	8014a88 <_read_r>
 8014858:	2800      	cmp	r0, #0
 801485a:	db03      	blt.n	8014864 <__sread+0x18>
 801485c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801485e:	181b      	adds	r3, r3, r0
 8014860:	6523      	str	r3, [r4, #80]	; 0x50
 8014862:	bd70      	pop	{r4, r5, r6, pc}
 8014864:	89a3      	ldrh	r3, [r4, #12]
 8014866:	4a02      	ldr	r2, [pc, #8]	; (8014870 <__sread+0x24>)
 8014868:	4013      	ands	r3, r2
 801486a:	81a3      	strh	r3, [r4, #12]
 801486c:	e7f9      	b.n	8014862 <__sread+0x16>
 801486e:	46c0      	nop			; (mov r8, r8)
 8014870:	ffffefff 	.word	0xffffefff

08014874 <__swrite>:
 8014874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014876:	001f      	movs	r7, r3
 8014878:	898b      	ldrh	r3, [r1, #12]
 801487a:	0005      	movs	r5, r0
 801487c:	000c      	movs	r4, r1
 801487e:	0016      	movs	r6, r2
 8014880:	05db      	lsls	r3, r3, #23
 8014882:	d505      	bpl.n	8014890 <__swrite+0x1c>
 8014884:	230e      	movs	r3, #14
 8014886:	5ec9      	ldrsh	r1, [r1, r3]
 8014888:	2200      	movs	r2, #0
 801488a:	2302      	movs	r3, #2
 801488c:	f000 f8e8 	bl	8014a60 <_lseek_r>
 8014890:	89a3      	ldrh	r3, [r4, #12]
 8014892:	4a05      	ldr	r2, [pc, #20]	; (80148a8 <__swrite+0x34>)
 8014894:	0028      	movs	r0, r5
 8014896:	4013      	ands	r3, r2
 8014898:	81a3      	strh	r3, [r4, #12]
 801489a:	0032      	movs	r2, r6
 801489c:	230e      	movs	r3, #14
 801489e:	5ee1      	ldrsh	r1, [r4, r3]
 80148a0:	003b      	movs	r3, r7
 80148a2:	f000 f917 	bl	8014ad4 <_write_r>
 80148a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148a8:	ffffefff 	.word	0xffffefff

080148ac <__sseek>:
 80148ac:	b570      	push	{r4, r5, r6, lr}
 80148ae:	000c      	movs	r4, r1
 80148b0:	250e      	movs	r5, #14
 80148b2:	5f49      	ldrsh	r1, [r1, r5]
 80148b4:	f000 f8d4 	bl	8014a60 <_lseek_r>
 80148b8:	89a3      	ldrh	r3, [r4, #12]
 80148ba:	1c42      	adds	r2, r0, #1
 80148bc:	d103      	bne.n	80148c6 <__sseek+0x1a>
 80148be:	4a05      	ldr	r2, [pc, #20]	; (80148d4 <__sseek+0x28>)
 80148c0:	4013      	ands	r3, r2
 80148c2:	81a3      	strh	r3, [r4, #12]
 80148c4:	bd70      	pop	{r4, r5, r6, pc}
 80148c6:	2280      	movs	r2, #128	; 0x80
 80148c8:	0152      	lsls	r2, r2, #5
 80148ca:	4313      	orrs	r3, r2
 80148cc:	81a3      	strh	r3, [r4, #12]
 80148ce:	6520      	str	r0, [r4, #80]	; 0x50
 80148d0:	e7f8      	b.n	80148c4 <__sseek+0x18>
 80148d2:	46c0      	nop			; (mov r8, r8)
 80148d4:	ffffefff 	.word	0xffffefff

080148d8 <__sclose>:
 80148d8:	b510      	push	{r4, lr}
 80148da:	230e      	movs	r3, #14
 80148dc:	5ec9      	ldrsh	r1, [r1, r3]
 80148de:	f000 f8ad 	bl	8014a3c <_close_r>
 80148e2:	bd10      	pop	{r4, pc}

080148e4 <memcmp>:
 80148e4:	b530      	push	{r4, r5, lr}
 80148e6:	2400      	movs	r4, #0
 80148e8:	3901      	subs	r1, #1
 80148ea:	42a2      	cmp	r2, r4
 80148ec:	d101      	bne.n	80148f2 <memcmp+0xe>
 80148ee:	2000      	movs	r0, #0
 80148f0:	e005      	b.n	80148fe <memcmp+0x1a>
 80148f2:	5d03      	ldrb	r3, [r0, r4]
 80148f4:	3401      	adds	r4, #1
 80148f6:	5d0d      	ldrb	r5, [r1, r4]
 80148f8:	42ab      	cmp	r3, r5
 80148fa:	d0f6      	beq.n	80148ea <memcmp+0x6>
 80148fc:	1b58      	subs	r0, r3, r5
 80148fe:	bd30      	pop	{r4, r5, pc}

08014900 <memmove>:
 8014900:	b510      	push	{r4, lr}
 8014902:	4288      	cmp	r0, r1
 8014904:	d902      	bls.n	801490c <memmove+0xc>
 8014906:	188b      	adds	r3, r1, r2
 8014908:	4298      	cmp	r0, r3
 801490a:	d303      	bcc.n	8014914 <memmove+0x14>
 801490c:	2300      	movs	r3, #0
 801490e:	e007      	b.n	8014920 <memmove+0x20>
 8014910:	5c8b      	ldrb	r3, [r1, r2]
 8014912:	5483      	strb	r3, [r0, r2]
 8014914:	3a01      	subs	r2, #1
 8014916:	d2fb      	bcs.n	8014910 <memmove+0x10>
 8014918:	bd10      	pop	{r4, pc}
 801491a:	5ccc      	ldrb	r4, [r1, r3]
 801491c:	54c4      	strb	r4, [r0, r3]
 801491e:	3301      	adds	r3, #1
 8014920:	429a      	cmp	r2, r3
 8014922:	d1fa      	bne.n	801491a <memmove+0x1a>
 8014924:	e7f8      	b.n	8014918 <memmove+0x18>

08014926 <memset>:
 8014926:	0003      	movs	r3, r0
 8014928:	1882      	adds	r2, r0, r2
 801492a:	4293      	cmp	r3, r2
 801492c:	d100      	bne.n	8014930 <memset+0xa>
 801492e:	4770      	bx	lr
 8014930:	7019      	strb	r1, [r3, #0]
 8014932:	3301      	adds	r3, #1
 8014934:	e7f9      	b.n	801492a <memset+0x4>

08014936 <strcat>:
 8014936:	0002      	movs	r2, r0
 8014938:	b510      	push	{r4, lr}
 801493a:	7813      	ldrb	r3, [r2, #0]
 801493c:	0014      	movs	r4, r2
 801493e:	3201      	adds	r2, #1
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1fa      	bne.n	801493a <strcat+0x4>
 8014944:	5cca      	ldrb	r2, [r1, r3]
 8014946:	54e2      	strb	r2, [r4, r3]
 8014948:	3301      	adds	r3, #1
 801494a:	2a00      	cmp	r2, #0
 801494c:	d1fa      	bne.n	8014944 <strcat+0xe>
 801494e:	bd10      	pop	{r4, pc}

08014950 <strchr>:
 8014950:	b2c9      	uxtb	r1, r1
 8014952:	7803      	ldrb	r3, [r0, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d004      	beq.n	8014962 <strchr+0x12>
 8014958:	428b      	cmp	r3, r1
 801495a:	d100      	bne.n	801495e <strchr+0xe>
 801495c:	4770      	bx	lr
 801495e:	3001      	adds	r0, #1
 8014960:	e7f7      	b.n	8014952 <strchr+0x2>
 8014962:	424b      	negs	r3, r1
 8014964:	4159      	adcs	r1, r3
 8014966:	4249      	negs	r1, r1
 8014968:	4008      	ands	r0, r1
 801496a:	e7f7      	b.n	801495c <strchr+0xc>

0801496c <strncmp>:
 801496c:	b530      	push	{r4, r5, lr}
 801496e:	0005      	movs	r5, r0
 8014970:	1e10      	subs	r0, r2, #0
 8014972:	d00b      	beq.n	801498c <strncmp+0x20>
 8014974:	2400      	movs	r4, #0
 8014976:	3a01      	subs	r2, #1
 8014978:	5d2b      	ldrb	r3, [r5, r4]
 801497a:	5d08      	ldrb	r0, [r1, r4]
 801497c:	4283      	cmp	r3, r0
 801497e:	d104      	bne.n	801498a <strncmp+0x1e>
 8014980:	42a2      	cmp	r2, r4
 8014982:	d002      	beq.n	801498a <strncmp+0x1e>
 8014984:	3401      	adds	r4, #1
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1f6      	bne.n	8014978 <strncmp+0xc>
 801498a:	1a18      	subs	r0, r3, r0
 801498c:	bd30      	pop	{r4, r5, pc}

0801498e <strncpy>:
 801498e:	0003      	movs	r3, r0
 8014990:	b530      	push	{r4, r5, lr}
 8014992:	001d      	movs	r5, r3
 8014994:	2a00      	cmp	r2, #0
 8014996:	d006      	beq.n	80149a6 <strncpy+0x18>
 8014998:	780c      	ldrb	r4, [r1, #0]
 801499a:	3a01      	subs	r2, #1
 801499c:	3301      	adds	r3, #1
 801499e:	702c      	strb	r4, [r5, #0]
 80149a0:	3101      	adds	r1, #1
 80149a2:	2c00      	cmp	r4, #0
 80149a4:	d1f5      	bne.n	8014992 <strncpy+0x4>
 80149a6:	2100      	movs	r1, #0
 80149a8:	189a      	adds	r2, r3, r2
 80149aa:	4293      	cmp	r3, r2
 80149ac:	d100      	bne.n	80149b0 <strncpy+0x22>
 80149ae:	bd30      	pop	{r4, r5, pc}
 80149b0:	7019      	strb	r1, [r3, #0]
 80149b2:	3301      	adds	r3, #1
 80149b4:	e7f9      	b.n	80149aa <strncpy+0x1c>
	...

080149b8 <strtok>:
 80149b8:	4b03      	ldr	r3, [pc, #12]	; (80149c8 <strtok+0x10>)
 80149ba:	b510      	push	{r4, lr}
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	2301      	movs	r3, #1
 80149c0:	3250      	adds	r2, #80	; 0x50
 80149c2:	f000 f803 	bl	80149cc <__strtok_r>
 80149c6:	bd10      	pop	{r4, pc}
 80149c8:	20000778 	.word	0x20000778

080149cc <__strtok_r>:
 80149cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d102      	bne.n	80149d8 <__strtok_r+0xc>
 80149d2:	6810      	ldr	r0, [r2, #0]
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d013      	beq.n	8014a00 <__strtok_r+0x34>
 80149d8:	0004      	movs	r4, r0
 80149da:	0020      	movs	r0, r4
 80149dc:	000e      	movs	r6, r1
 80149de:	7805      	ldrb	r5, [r0, #0]
 80149e0:	3401      	adds	r4, #1
 80149e2:	7837      	ldrb	r7, [r6, #0]
 80149e4:	2f00      	cmp	r7, #0
 80149e6:	d104      	bne.n	80149f2 <__strtok_r+0x26>
 80149e8:	2d00      	cmp	r5, #0
 80149ea:	d10f      	bne.n	8014a0c <__strtok_r+0x40>
 80149ec:	0028      	movs	r0, r5
 80149ee:	6015      	str	r5, [r2, #0]
 80149f0:	e006      	b.n	8014a00 <__strtok_r+0x34>
 80149f2:	3601      	adds	r6, #1
 80149f4:	42bd      	cmp	r5, r7
 80149f6:	d1f4      	bne.n	80149e2 <__strtok_r+0x16>
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d1ee      	bne.n	80149da <__strtok_r+0xe>
 80149fc:	6014      	str	r4, [r2, #0]
 80149fe:	7003      	strb	r3, [r0, #0]
 8014a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a02:	002f      	movs	r7, r5
 8014a04:	e00f      	b.n	8014a26 <__strtok_r+0x5a>
 8014a06:	3301      	adds	r3, #1
 8014a08:	2e00      	cmp	r6, #0
 8014a0a:	d104      	bne.n	8014a16 <__strtok_r+0x4a>
 8014a0c:	0023      	movs	r3, r4
 8014a0e:	3401      	adds	r4, #1
 8014a10:	781d      	ldrb	r5, [r3, #0]
 8014a12:	0027      	movs	r7, r4
 8014a14:	000b      	movs	r3, r1
 8014a16:	781e      	ldrb	r6, [r3, #0]
 8014a18:	42b5      	cmp	r5, r6
 8014a1a:	d1f4      	bne.n	8014a06 <__strtok_r+0x3a>
 8014a1c:	2d00      	cmp	r5, #0
 8014a1e:	d0f0      	beq.n	8014a02 <__strtok_r+0x36>
 8014a20:	2300      	movs	r3, #0
 8014a22:	3c01      	subs	r4, #1
 8014a24:	7023      	strb	r3, [r4, #0]
 8014a26:	6017      	str	r7, [r2, #0]
 8014a28:	e7ea      	b.n	8014a00 <__strtok_r+0x34>
	...

08014a2c <__locale_mb_cur_max>:
 8014a2c:	2294      	movs	r2, #148	; 0x94
 8014a2e:	4b02      	ldr	r3, [pc, #8]	; (8014a38 <__locale_mb_cur_max+0xc>)
 8014a30:	0052      	lsls	r2, r2, #1
 8014a32:	5c98      	ldrb	r0, [r3, r2]
 8014a34:	4770      	bx	lr
 8014a36:	46c0      	nop			; (mov r8, r8)
 8014a38:	200004e8 	.word	0x200004e8

08014a3c <_close_r>:
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	b570      	push	{r4, r5, r6, lr}
 8014a40:	4d06      	ldr	r5, [pc, #24]	; (8014a5c <_close_r+0x20>)
 8014a42:	0004      	movs	r4, r0
 8014a44:	0008      	movs	r0, r1
 8014a46:	602b      	str	r3, [r5, #0]
 8014a48:	f004 fddc 	bl	8019604 <_close>
 8014a4c:	1c43      	adds	r3, r0, #1
 8014a4e:	d103      	bne.n	8014a58 <_close_r+0x1c>
 8014a50:	682b      	ldr	r3, [r5, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d000      	beq.n	8014a58 <_close_r+0x1c>
 8014a56:	6023      	str	r3, [r4, #0]
 8014a58:	bd70      	pop	{r4, r5, r6, pc}
 8014a5a:	46c0      	nop			; (mov r8, r8)
 8014a5c:	20006db8 	.word	0x20006db8

08014a60 <_lseek_r>:
 8014a60:	b570      	push	{r4, r5, r6, lr}
 8014a62:	0004      	movs	r4, r0
 8014a64:	0008      	movs	r0, r1
 8014a66:	0011      	movs	r1, r2
 8014a68:	001a      	movs	r2, r3
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	4d05      	ldr	r5, [pc, #20]	; (8014a84 <_lseek_r+0x24>)
 8014a6e:	602b      	str	r3, [r5, #0]
 8014a70:	f004 fdf0 	bl	8019654 <_lseek>
 8014a74:	1c43      	adds	r3, r0, #1
 8014a76:	d103      	bne.n	8014a80 <_lseek_r+0x20>
 8014a78:	682b      	ldr	r3, [r5, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d000      	beq.n	8014a80 <_lseek_r+0x20>
 8014a7e:	6023      	str	r3, [r4, #0]
 8014a80:	bd70      	pop	{r4, r5, r6, pc}
 8014a82:	46c0      	nop			; (mov r8, r8)
 8014a84:	20006db8 	.word	0x20006db8

08014a88 <_read_r>:
 8014a88:	b570      	push	{r4, r5, r6, lr}
 8014a8a:	0004      	movs	r4, r0
 8014a8c:	0008      	movs	r0, r1
 8014a8e:	0011      	movs	r1, r2
 8014a90:	001a      	movs	r2, r3
 8014a92:	2300      	movs	r3, #0
 8014a94:	4d05      	ldr	r5, [pc, #20]	; (8014aac <_read_r+0x24>)
 8014a96:	602b      	str	r3, [r5, #0]
 8014a98:	f004 fde4 	bl	8019664 <_read>
 8014a9c:	1c43      	adds	r3, r0, #1
 8014a9e:	d103      	bne.n	8014aa8 <_read_r+0x20>
 8014aa0:	682b      	ldr	r3, [r5, #0]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d000      	beq.n	8014aa8 <_read_r+0x20>
 8014aa6:	6023      	str	r3, [r4, #0]
 8014aa8:	bd70      	pop	{r4, r5, r6, pc}
 8014aaa:	46c0      	nop			; (mov r8, r8)
 8014aac:	20006db8 	.word	0x20006db8

08014ab0 <_sbrk_r>:
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	b570      	push	{r4, r5, r6, lr}
 8014ab4:	4d06      	ldr	r5, [pc, #24]	; (8014ad0 <_sbrk_r+0x20>)
 8014ab6:	0004      	movs	r4, r0
 8014ab8:	0008      	movs	r0, r1
 8014aba:	602b      	str	r3, [r5, #0]
 8014abc:	f004 fdda 	bl	8019674 <_sbrk>
 8014ac0:	1c43      	adds	r3, r0, #1
 8014ac2:	d103      	bne.n	8014acc <_sbrk_r+0x1c>
 8014ac4:	682b      	ldr	r3, [r5, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d000      	beq.n	8014acc <_sbrk_r+0x1c>
 8014aca:	6023      	str	r3, [r4, #0]
 8014acc:	bd70      	pop	{r4, r5, r6, pc}
 8014ace:	46c0      	nop			; (mov r8, r8)
 8014ad0:	20006db8 	.word	0x20006db8

08014ad4 <_write_r>:
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	0004      	movs	r4, r0
 8014ad8:	0008      	movs	r0, r1
 8014ada:	0011      	movs	r1, r2
 8014adc:	001a      	movs	r2, r3
 8014ade:	2300      	movs	r3, #0
 8014ae0:	4d05      	ldr	r5, [pc, #20]	; (8014af8 <_write_r+0x24>)
 8014ae2:	602b      	str	r3, [r5, #0]
 8014ae4:	f004 fdd6 	bl	8019694 <_write>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	d103      	bne.n	8014af4 <_write_r+0x20>
 8014aec:	682b      	ldr	r3, [r5, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d000      	beq.n	8014af4 <_write_r+0x20>
 8014af2:	6023      	str	r3, [r4, #0]
 8014af4:	bd70      	pop	{r4, r5, r6, pc}
 8014af6:	46c0      	nop			; (mov r8, r8)
 8014af8:	20006db8 	.word	0x20006db8

08014afc <__errno>:
 8014afc:	4b01      	ldr	r3, [pc, #4]	; (8014b04 <__errno+0x8>)
 8014afe:	6818      	ldr	r0, [r3, #0]
 8014b00:	4770      	bx	lr
 8014b02:	46c0      	nop			; (mov r8, r8)
 8014b04:	20000778 	.word	0x20000778

08014b08 <__libc_init_array>:
 8014b08:	b570      	push	{r4, r5, r6, lr}
 8014b0a:	2600      	movs	r6, #0
 8014b0c:	4c0c      	ldr	r4, [pc, #48]	; (8014b40 <__libc_init_array+0x38>)
 8014b0e:	4d0d      	ldr	r5, [pc, #52]	; (8014b44 <__libc_init_array+0x3c>)
 8014b10:	1b64      	subs	r4, r4, r5
 8014b12:	10a4      	asrs	r4, r4, #2
 8014b14:	42a6      	cmp	r6, r4
 8014b16:	d109      	bne.n	8014b2c <__libc_init_array+0x24>
 8014b18:	2600      	movs	r6, #0
 8014b1a:	f004 fdc5 	bl	80196a8 <_init>
 8014b1e:	4c0a      	ldr	r4, [pc, #40]	; (8014b48 <__libc_init_array+0x40>)
 8014b20:	4d0a      	ldr	r5, [pc, #40]	; (8014b4c <__libc_init_array+0x44>)
 8014b22:	1b64      	subs	r4, r4, r5
 8014b24:	10a4      	asrs	r4, r4, #2
 8014b26:	42a6      	cmp	r6, r4
 8014b28:	d105      	bne.n	8014b36 <__libc_init_array+0x2e>
 8014b2a:	bd70      	pop	{r4, r5, r6, pc}
 8014b2c:	00b3      	lsls	r3, r6, #2
 8014b2e:	58eb      	ldr	r3, [r5, r3]
 8014b30:	4798      	blx	r3
 8014b32:	3601      	adds	r6, #1
 8014b34:	e7ee      	b.n	8014b14 <__libc_init_array+0xc>
 8014b36:	00b3      	lsls	r3, r6, #2
 8014b38:	58eb      	ldr	r3, [r5, r3]
 8014b3a:	4798      	blx	r3
 8014b3c:	3601      	adds	r6, #1
 8014b3e:	e7f2      	b.n	8014b26 <__libc_init_array+0x1e>
 8014b40:	0801ca1c 	.word	0x0801ca1c
 8014b44:	0801ca1c 	.word	0x0801ca1c
 8014b48:	0801ca24 	.word	0x0801ca24
 8014b4c:	0801ca1c 	.word	0x0801ca1c

08014b50 <__retarget_lock_init_recursive>:
 8014b50:	4770      	bx	lr

08014b52 <__retarget_lock_close_recursive>:
 8014b52:	4770      	bx	lr

08014b54 <__retarget_lock_acquire_recursive>:
 8014b54:	4770      	bx	lr

08014b56 <__retarget_lock_release_recursive>:
 8014b56:	4770      	bx	lr

08014b58 <sysconf>:
 8014b58:	2380      	movs	r3, #128	; 0x80
 8014b5a:	b510      	push	{r4, lr}
 8014b5c:	2808      	cmp	r0, #8
 8014b5e:	d004      	beq.n	8014b6a <sysconf+0x12>
 8014b60:	f7ff ffcc 	bl	8014afc <__errno>
 8014b64:	2316      	movs	r3, #22
 8014b66:	6003      	str	r3, [r0, #0]
 8014b68:	3b17      	subs	r3, #23
 8014b6a:	0018      	movs	r0, r3
 8014b6c:	bd10      	pop	{r4, pc}

08014b6e <strcpy>:
 8014b6e:	0003      	movs	r3, r0
 8014b70:	780a      	ldrb	r2, [r1, #0]
 8014b72:	3101      	adds	r1, #1
 8014b74:	701a      	strb	r2, [r3, #0]
 8014b76:	3301      	adds	r3, #1
 8014b78:	2a00      	cmp	r2, #0
 8014b7a:	d1f9      	bne.n	8014b70 <strcpy+0x2>
 8014b7c:	4770      	bx	lr

08014b7e <memcpy>:
 8014b7e:	2300      	movs	r3, #0
 8014b80:	b510      	push	{r4, lr}
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d100      	bne.n	8014b88 <memcpy+0xa>
 8014b86:	bd10      	pop	{r4, pc}
 8014b88:	5ccc      	ldrb	r4, [r1, r3]
 8014b8a:	54c4      	strb	r4, [r0, r3]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	e7f8      	b.n	8014b82 <memcpy+0x4>

08014b90 <nan>:
 8014b90:	2000      	movs	r0, #0
 8014b92:	4901      	ldr	r1, [pc, #4]	; (8014b98 <nan+0x8>)
 8014b94:	4770      	bx	lr
 8014b96:	46c0      	nop			; (mov r8, r8)
 8014b98:	7ff80000 	.word	0x7ff80000

08014b9c <register_fini>:
 8014b9c:	4b03      	ldr	r3, [pc, #12]	; (8014bac <register_fini+0x10>)
 8014b9e:	b510      	push	{r4, lr}
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d002      	beq.n	8014baa <register_fini+0xe>
 8014ba4:	4802      	ldr	r0, [pc, #8]	; (8014bb0 <register_fini+0x14>)
 8014ba6:	f000 f805 	bl	8014bb4 <atexit>
 8014baa:	bd10      	pop	{r4, pc}
 8014bac:	00000000 	.word	0x00000000
 8014bb0:	08017461 	.word	0x08017461

08014bb4 <atexit>:
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	b510      	push	{r4, lr}
 8014bb8:	0001      	movs	r1, r0
 8014bba:	001a      	movs	r2, r3
 8014bbc:	0018      	movs	r0, r3
 8014bbe:	f002 fca1 	bl	8017504 <__register_exitproc>
 8014bc2:	bd10      	pop	{r4, pc}

08014bc4 <_malloc_trim_r>:
 8014bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014bc6:	0004      	movs	r4, r0
 8014bc8:	2008      	movs	r0, #8
 8014bca:	000d      	movs	r5, r1
 8014bcc:	f7ff ffc4 	bl	8014b58 <sysconf>
 8014bd0:	0006      	movs	r6, r0
 8014bd2:	0020      	movs	r0, r4
 8014bd4:	f7fe fcba 	bl	801354c <__malloc_lock>
 8014bd8:	2203      	movs	r2, #3
 8014bda:	4f21      	ldr	r7, [pc, #132]	; (8014c60 <_malloc_trim_r+0x9c>)
 8014bdc:	0031      	movs	r1, r6
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	4393      	bics	r3, r2
 8014be4:	1b58      	subs	r0, r3, r5
 8014be6:	3811      	subs	r0, #17
 8014be8:	1980      	adds	r0, r0, r6
 8014bea:	9301      	str	r3, [sp, #4]
 8014bec:	f7eb fab0 	bl	8000150 <__udivsi3>
 8014bf0:	1e45      	subs	r5, r0, #1
 8014bf2:	4375      	muls	r5, r6
 8014bf4:	42ae      	cmp	r6, r5
 8014bf6:	dd04      	ble.n	8014c02 <_malloc_trim_r+0x3e>
 8014bf8:	0020      	movs	r0, r4
 8014bfa:	f7fe fcaf 	bl	801355c <__malloc_unlock>
 8014bfe:	2000      	movs	r0, #0
 8014c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014c02:	2100      	movs	r1, #0
 8014c04:	0020      	movs	r0, r4
 8014c06:	f7ff ff53 	bl	8014ab0 <_sbrk_r>
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	9a01      	ldr	r2, [sp, #4]
 8014c0e:	189b      	adds	r3, r3, r2
 8014c10:	4298      	cmp	r0, r3
 8014c12:	d1f1      	bne.n	8014bf8 <_malloc_trim_r+0x34>
 8014c14:	0020      	movs	r0, r4
 8014c16:	4269      	negs	r1, r5
 8014c18:	f7ff ff4a 	bl	8014ab0 <_sbrk_r>
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	d110      	bne.n	8014c42 <_malloc_trim_r+0x7e>
 8014c20:	2100      	movs	r1, #0
 8014c22:	0020      	movs	r0, r4
 8014c24:	f7ff ff44 	bl	8014ab0 <_sbrk_r>
 8014c28:	68ba      	ldr	r2, [r7, #8]
 8014c2a:	1a81      	subs	r1, r0, r2
 8014c2c:	290f      	cmp	r1, #15
 8014c2e:	dde3      	ble.n	8014bf8 <_malloc_trim_r+0x34>
 8014c30:	4d0c      	ldr	r5, [pc, #48]	; (8014c64 <_malloc_trim_r+0xa0>)
 8014c32:	4b0d      	ldr	r3, [pc, #52]	; (8014c68 <_malloc_trim_r+0xa4>)
 8014c34:	682d      	ldr	r5, [r5, #0]
 8014c36:	1b40      	subs	r0, r0, r5
 8014c38:	6018      	str	r0, [r3, #0]
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	430b      	orrs	r3, r1
 8014c3e:	6053      	str	r3, [r2, #4]
 8014c40:	e7da      	b.n	8014bf8 <_malloc_trim_r+0x34>
 8014c42:	2601      	movs	r6, #1
 8014c44:	9b01      	ldr	r3, [sp, #4]
 8014c46:	68ba      	ldr	r2, [r7, #8]
 8014c48:	1b5b      	subs	r3, r3, r5
 8014c4a:	4333      	orrs	r3, r6
 8014c4c:	6053      	str	r3, [r2, #4]
 8014c4e:	4a06      	ldr	r2, [pc, #24]	; (8014c68 <_malloc_trim_r+0xa4>)
 8014c50:	0020      	movs	r0, r4
 8014c52:	6813      	ldr	r3, [r2, #0]
 8014c54:	1b5b      	subs	r3, r3, r5
 8014c56:	6013      	str	r3, [r2, #0]
 8014c58:	f7fe fc80 	bl	801355c <__malloc_unlock>
 8014c5c:	0030      	movs	r0, r6
 8014c5e:	e7cf      	b.n	8014c00 <_malloc_trim_r+0x3c>
 8014c60:	200000cc 	.word	0x200000cc
 8014c64:	200004d4 	.word	0x200004d4
 8014c68:	20006c48 	.word	0x20006c48

08014c6c <_free_r>:
 8014c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c6e:	1e0d      	subs	r5, r1, #0
 8014c70:	9001      	str	r0, [sp, #4]
 8014c72:	d02d      	beq.n	8014cd0 <_free_r+0x64>
 8014c74:	f7fe fc6a 	bl	801354c <__malloc_lock>
 8014c78:	2301      	movs	r3, #1
 8014c7a:	0029      	movs	r1, r5
 8014c7c:	469c      	mov	ip, r3
 8014c7e:	3908      	subs	r1, #8
 8014c80:	684f      	ldr	r7, [r1, #4]
 8014c82:	4662      	mov	r2, ip
 8014c84:	003b      	movs	r3, r7
 8014c86:	4664      	mov	r4, ip
 8014c88:	4393      	bics	r3, r2
 8014c8a:	18c8      	adds	r0, r1, r3
 8014c8c:	6845      	ldr	r5, [r0, #4]
 8014c8e:	3202      	adds	r2, #2
 8014c90:	4395      	bics	r5, r2
 8014c92:	4a4a      	ldr	r2, [pc, #296]	; (8014dbc <_free_r+0x150>)
 8014c94:	4027      	ands	r7, r4
 8014c96:	6896      	ldr	r6, [r2, #8]
 8014c98:	4286      	cmp	r6, r0
 8014c9a:	d11a      	bne.n	8014cd2 <_free_r+0x66>
 8014c9c:	195b      	adds	r3, r3, r5
 8014c9e:	2f00      	cmp	r7, #0
 8014ca0:	d106      	bne.n	8014cb0 <_free_r+0x44>
 8014ca2:	6808      	ldr	r0, [r1, #0]
 8014ca4:	1a09      	subs	r1, r1, r0
 8014ca6:	688d      	ldr	r5, [r1, #8]
 8014ca8:	181b      	adds	r3, r3, r0
 8014caa:	68c8      	ldr	r0, [r1, #12]
 8014cac:	60e8      	str	r0, [r5, #12]
 8014cae:	6085      	str	r5, [r0, #8]
 8014cb0:	2001      	movs	r0, #1
 8014cb2:	4318      	orrs	r0, r3
 8014cb4:	6048      	str	r0, [r1, #4]
 8014cb6:	6091      	str	r1, [r2, #8]
 8014cb8:	4a41      	ldr	r2, [pc, #260]	; (8014dc0 <_free_r+0x154>)
 8014cba:	6812      	ldr	r2, [r2, #0]
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	d804      	bhi.n	8014cca <_free_r+0x5e>
 8014cc0:	4b40      	ldr	r3, [pc, #256]	; (8014dc4 <_free_r+0x158>)
 8014cc2:	9801      	ldr	r0, [sp, #4]
 8014cc4:	6819      	ldr	r1, [r3, #0]
 8014cc6:	f7ff ff7d 	bl	8014bc4 <_malloc_trim_r>
 8014cca:	9801      	ldr	r0, [sp, #4]
 8014ccc:	f7fe fc46 	bl	801355c <__malloc_unlock>
 8014cd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014cd2:	2600      	movs	r6, #0
 8014cd4:	6045      	str	r5, [r0, #4]
 8014cd6:	42b7      	cmp	r7, r6
 8014cd8:	d109      	bne.n	8014cee <_free_r+0x82>
 8014cda:	680f      	ldr	r7, [r1, #0]
 8014cdc:	4c3a      	ldr	r4, [pc, #232]	; (8014dc8 <_free_r+0x15c>)
 8014cde:	1bc9      	subs	r1, r1, r7
 8014ce0:	19db      	adds	r3, r3, r7
 8014ce2:	688f      	ldr	r7, [r1, #8]
 8014ce4:	42a7      	cmp	r7, r4
 8014ce6:	d02c      	beq.n	8014d42 <_free_r+0xd6>
 8014ce8:	68cc      	ldr	r4, [r1, #12]
 8014cea:	60fc      	str	r4, [r7, #12]
 8014cec:	60a7      	str	r7, [r4, #8]
 8014cee:	1947      	adds	r7, r0, r5
 8014cf0:	687c      	ldr	r4, [r7, #4]
 8014cf2:	2701      	movs	r7, #1
 8014cf4:	423c      	tst	r4, r7
 8014cf6:	d10b      	bne.n	8014d10 <_free_r+0xa4>
 8014cf8:	195b      	adds	r3, r3, r5
 8014cfa:	6885      	ldr	r5, [r0, #8]
 8014cfc:	2e00      	cmp	r6, #0
 8014cfe:	d122      	bne.n	8014d46 <_free_r+0xda>
 8014d00:	4c31      	ldr	r4, [pc, #196]	; (8014dc8 <_free_r+0x15c>)
 8014d02:	42a5      	cmp	r5, r4
 8014d04:	d11f      	bne.n	8014d46 <_free_r+0xda>
 8014d06:	003e      	movs	r6, r7
 8014d08:	6151      	str	r1, [r2, #20]
 8014d0a:	6111      	str	r1, [r2, #16]
 8014d0c:	60cd      	str	r5, [r1, #12]
 8014d0e:	608d      	str	r5, [r1, #8]
 8014d10:	2501      	movs	r5, #1
 8014d12:	0028      	movs	r0, r5
 8014d14:	4318      	orrs	r0, r3
 8014d16:	6048      	str	r0, [r1, #4]
 8014d18:	50cb      	str	r3, [r1, r3]
 8014d1a:	2e00      	cmp	r6, #0
 8014d1c:	d1d5      	bne.n	8014cca <_free_r+0x5e>
 8014d1e:	2080      	movs	r0, #128	; 0x80
 8014d20:	0080      	lsls	r0, r0, #2
 8014d22:	4283      	cmp	r3, r0
 8014d24:	d213      	bcs.n	8014d4e <_free_r+0xe2>
 8014d26:	08d8      	lsrs	r0, r3, #3
 8014d28:	095b      	lsrs	r3, r3, #5
 8014d2a:	409d      	lsls	r5, r3
 8014d2c:	6853      	ldr	r3, [r2, #4]
 8014d2e:	431d      	orrs	r5, r3
 8014d30:	00c3      	lsls	r3, r0, #3
 8014d32:	189b      	adds	r3, r3, r2
 8014d34:	6055      	str	r5, [r2, #4]
 8014d36:	689a      	ldr	r2, [r3, #8]
 8014d38:	60cb      	str	r3, [r1, #12]
 8014d3a:	608a      	str	r2, [r1, #8]
 8014d3c:	6099      	str	r1, [r3, #8]
 8014d3e:	60d1      	str	r1, [r2, #12]
 8014d40:	e7c3      	b.n	8014cca <_free_r+0x5e>
 8014d42:	4666      	mov	r6, ip
 8014d44:	e7d3      	b.n	8014cee <_free_r+0x82>
 8014d46:	68c0      	ldr	r0, [r0, #12]
 8014d48:	60e8      	str	r0, [r5, #12]
 8014d4a:	6085      	str	r5, [r0, #8]
 8014d4c:	e7e0      	b.n	8014d10 <_free_r+0xa4>
 8014d4e:	0a5d      	lsrs	r5, r3, #9
 8014d50:	2d04      	cmp	r5, #4
 8014d52:	d812      	bhi.n	8014d7a <_free_r+0x10e>
 8014d54:	0998      	lsrs	r0, r3, #6
 8014d56:	3038      	adds	r0, #56	; 0x38
 8014d58:	00c6      	lsls	r6, r0, #3
 8014d5a:	18b6      	adds	r6, r6, r2
 8014d5c:	68b5      	ldr	r5, [r6, #8]
 8014d5e:	2703      	movs	r7, #3
 8014d60:	42ae      	cmp	r6, r5
 8014d62:	d125      	bne.n	8014db0 <_free_r+0x144>
 8014d64:	2301      	movs	r3, #1
 8014d66:	1080      	asrs	r0, r0, #2
 8014d68:	4083      	lsls	r3, r0
 8014d6a:	6850      	ldr	r0, [r2, #4]
 8014d6c:	4303      	orrs	r3, r0
 8014d6e:	6053      	str	r3, [r2, #4]
 8014d70:	60ce      	str	r6, [r1, #12]
 8014d72:	608d      	str	r5, [r1, #8]
 8014d74:	60b1      	str	r1, [r6, #8]
 8014d76:	60e9      	str	r1, [r5, #12]
 8014d78:	e7a7      	b.n	8014cca <_free_r+0x5e>
 8014d7a:	2d14      	cmp	r5, #20
 8014d7c:	d802      	bhi.n	8014d84 <_free_r+0x118>
 8014d7e:	0028      	movs	r0, r5
 8014d80:	305b      	adds	r0, #91	; 0x5b
 8014d82:	e7e9      	b.n	8014d58 <_free_r+0xec>
 8014d84:	2d54      	cmp	r5, #84	; 0x54
 8014d86:	d802      	bhi.n	8014d8e <_free_r+0x122>
 8014d88:	0b18      	lsrs	r0, r3, #12
 8014d8a:	306e      	adds	r0, #110	; 0x6e
 8014d8c:	e7e4      	b.n	8014d58 <_free_r+0xec>
 8014d8e:	20aa      	movs	r0, #170	; 0xaa
 8014d90:	0040      	lsls	r0, r0, #1
 8014d92:	4285      	cmp	r5, r0
 8014d94:	d802      	bhi.n	8014d9c <_free_r+0x130>
 8014d96:	0bd8      	lsrs	r0, r3, #15
 8014d98:	3077      	adds	r0, #119	; 0x77
 8014d9a:	e7dd      	b.n	8014d58 <_free_r+0xec>
 8014d9c:	4e0b      	ldr	r6, [pc, #44]	; (8014dcc <_free_r+0x160>)
 8014d9e:	207e      	movs	r0, #126	; 0x7e
 8014da0:	42b5      	cmp	r5, r6
 8014da2:	d8d9      	bhi.n	8014d58 <_free_r+0xec>
 8014da4:	0c98      	lsrs	r0, r3, #18
 8014da6:	307c      	adds	r0, #124	; 0x7c
 8014da8:	e7d6      	b.n	8014d58 <_free_r+0xec>
 8014daa:	68ad      	ldr	r5, [r5, #8]
 8014dac:	42ae      	cmp	r6, r5
 8014dae:	d003      	beq.n	8014db8 <_free_r+0x14c>
 8014db0:	686a      	ldr	r2, [r5, #4]
 8014db2:	43ba      	bics	r2, r7
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d8f8      	bhi.n	8014daa <_free_r+0x13e>
 8014db8:	68ee      	ldr	r6, [r5, #12]
 8014dba:	e7d9      	b.n	8014d70 <_free_r+0x104>
 8014dbc:	200000cc 	.word	0x200000cc
 8014dc0:	200004d8 	.word	0x200004d8
 8014dc4:	20006c78 	.word	0x20006c78
 8014dc8:	200000d4 	.word	0x200000d4
 8014dcc:	00000554 	.word	0x00000554

08014dd0 <rshift>:
 8014dd0:	0002      	movs	r2, r0
 8014dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dd4:	6904      	ldr	r4, [r0, #16]
 8014dd6:	114b      	asrs	r3, r1, #5
 8014dd8:	b085      	sub	sp, #20
 8014dda:	3214      	adds	r2, #20
 8014ddc:	9302      	str	r3, [sp, #8]
 8014dde:	114d      	asrs	r5, r1, #5
 8014de0:	0013      	movs	r3, r2
 8014de2:	42ac      	cmp	r4, r5
 8014de4:	dd32      	ble.n	8014e4c <rshift+0x7c>
 8014de6:	261f      	movs	r6, #31
 8014de8:	000f      	movs	r7, r1
 8014dea:	114b      	asrs	r3, r1, #5
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	00a5      	lsls	r5, r4, #2
 8014df0:	18d3      	adds	r3, r2, r3
 8014df2:	4037      	ands	r7, r6
 8014df4:	1955      	adds	r5, r2, r5
 8014df6:	9300      	str	r3, [sp, #0]
 8014df8:	9701      	str	r7, [sp, #4]
 8014dfa:	4231      	tst	r1, r6
 8014dfc:	d10d      	bne.n	8014e1a <rshift+0x4a>
 8014dfe:	0016      	movs	r6, r2
 8014e00:	0019      	movs	r1, r3
 8014e02:	428d      	cmp	r5, r1
 8014e04:	d836      	bhi.n	8014e74 <rshift+0xa4>
 8014e06:	9900      	ldr	r1, [sp, #0]
 8014e08:	2300      	movs	r3, #0
 8014e0a:	3903      	subs	r1, #3
 8014e0c:	428d      	cmp	r5, r1
 8014e0e:	d302      	bcc.n	8014e16 <rshift+0x46>
 8014e10:	9b02      	ldr	r3, [sp, #8]
 8014e12:	1ae4      	subs	r4, r4, r3
 8014e14:	00a3      	lsls	r3, r4, #2
 8014e16:	18d3      	adds	r3, r2, r3
 8014e18:	e018      	b.n	8014e4c <rshift+0x7c>
 8014e1a:	2120      	movs	r1, #32
 8014e1c:	9e01      	ldr	r6, [sp, #4]
 8014e1e:	9f01      	ldr	r7, [sp, #4]
 8014e20:	1b89      	subs	r1, r1, r6
 8014e22:	9e00      	ldr	r6, [sp, #0]
 8014e24:	9103      	str	r1, [sp, #12]
 8014e26:	ce02      	ldmia	r6!, {r1}
 8014e28:	4694      	mov	ip, r2
 8014e2a:	40f9      	lsrs	r1, r7
 8014e2c:	42b5      	cmp	r5, r6
 8014e2e:	d816      	bhi.n	8014e5e <rshift+0x8e>
 8014e30:	9e00      	ldr	r6, [sp, #0]
 8014e32:	2300      	movs	r3, #0
 8014e34:	3601      	adds	r6, #1
 8014e36:	42b5      	cmp	r5, r6
 8014e38:	d303      	bcc.n	8014e42 <rshift+0x72>
 8014e3a:	9b02      	ldr	r3, [sp, #8]
 8014e3c:	1ae3      	subs	r3, r4, r3
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	3b04      	subs	r3, #4
 8014e42:	18d3      	adds	r3, r2, r3
 8014e44:	6019      	str	r1, [r3, #0]
 8014e46:	2900      	cmp	r1, #0
 8014e48:	d000      	beq.n	8014e4c <rshift+0x7c>
 8014e4a:	3304      	adds	r3, #4
 8014e4c:	1a99      	subs	r1, r3, r2
 8014e4e:	1089      	asrs	r1, r1, #2
 8014e50:	6101      	str	r1, [r0, #16]
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d101      	bne.n	8014e5a <rshift+0x8a>
 8014e56:	2300      	movs	r3, #0
 8014e58:	6143      	str	r3, [r0, #20]
 8014e5a:	b005      	add	sp, #20
 8014e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e5e:	6837      	ldr	r7, [r6, #0]
 8014e60:	9b03      	ldr	r3, [sp, #12]
 8014e62:	409f      	lsls	r7, r3
 8014e64:	430f      	orrs	r7, r1
 8014e66:	4661      	mov	r1, ip
 8014e68:	c180      	stmia	r1!, {r7}
 8014e6a:	468c      	mov	ip, r1
 8014e6c:	9b01      	ldr	r3, [sp, #4]
 8014e6e:	ce02      	ldmia	r6!, {r1}
 8014e70:	40d9      	lsrs	r1, r3
 8014e72:	e7db      	b.n	8014e2c <rshift+0x5c>
 8014e74:	c980      	ldmia	r1!, {r7}
 8014e76:	c680      	stmia	r6!, {r7}
 8014e78:	e7c3      	b.n	8014e02 <rshift+0x32>

08014e7a <__hexdig_fun>:
 8014e7a:	0002      	movs	r2, r0
 8014e7c:	3a30      	subs	r2, #48	; 0x30
 8014e7e:	0003      	movs	r3, r0
 8014e80:	2a09      	cmp	r2, #9
 8014e82:	d802      	bhi.n	8014e8a <__hexdig_fun+0x10>
 8014e84:	3b20      	subs	r3, #32
 8014e86:	b2d8      	uxtb	r0, r3
 8014e88:	4770      	bx	lr
 8014e8a:	0002      	movs	r2, r0
 8014e8c:	3a61      	subs	r2, #97	; 0x61
 8014e8e:	2a05      	cmp	r2, #5
 8014e90:	d801      	bhi.n	8014e96 <__hexdig_fun+0x1c>
 8014e92:	3b47      	subs	r3, #71	; 0x47
 8014e94:	e7f7      	b.n	8014e86 <__hexdig_fun+0xc>
 8014e96:	001a      	movs	r2, r3
 8014e98:	3a41      	subs	r2, #65	; 0x41
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	2a05      	cmp	r2, #5
 8014e9e:	d8f3      	bhi.n	8014e88 <__hexdig_fun+0xe>
 8014ea0:	3b27      	subs	r3, #39	; 0x27
 8014ea2:	e7f0      	b.n	8014e86 <__hexdig_fun+0xc>

08014ea4 <__gethex>:
 8014ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ea6:	b089      	sub	sp, #36	; 0x24
 8014ea8:	9307      	str	r3, [sp, #28]
 8014eaa:	2302      	movs	r3, #2
 8014eac:	9201      	str	r2, [sp, #4]
 8014eae:	680a      	ldr	r2, [r1, #0]
 8014eb0:	425b      	negs	r3, r3
 8014eb2:	9003      	str	r0, [sp, #12]
 8014eb4:	9106      	str	r1, [sp, #24]
 8014eb6:	1c96      	adds	r6, r2, #2
 8014eb8:	1a9b      	subs	r3, r3, r2
 8014eba:	199a      	adds	r2, r3, r6
 8014ebc:	9600      	str	r6, [sp, #0]
 8014ebe:	9205      	str	r2, [sp, #20]
 8014ec0:	9a00      	ldr	r2, [sp, #0]
 8014ec2:	3601      	adds	r6, #1
 8014ec4:	7810      	ldrb	r0, [r2, #0]
 8014ec6:	2830      	cmp	r0, #48	; 0x30
 8014ec8:	d0f7      	beq.n	8014eba <__gethex+0x16>
 8014eca:	f7ff ffd6 	bl	8014e7a <__hexdig_fun>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	001d      	movs	r5, r3
 8014ed2:	9302      	str	r3, [sp, #8]
 8014ed4:	4298      	cmp	r0, r3
 8014ed6:	d11d      	bne.n	8014f14 <__gethex+0x70>
 8014ed8:	2201      	movs	r2, #1
 8014eda:	49a6      	ldr	r1, [pc, #664]	; (8015174 <__gethex+0x2d0>)
 8014edc:	9800      	ldr	r0, [sp, #0]
 8014ede:	f7ff fd45 	bl	801496c <strncmp>
 8014ee2:	0007      	movs	r7, r0
 8014ee4:	42a8      	cmp	r0, r5
 8014ee6:	d169      	bne.n	8014fbc <__gethex+0x118>
 8014ee8:	9b00      	ldr	r3, [sp, #0]
 8014eea:	0034      	movs	r4, r6
 8014eec:	7858      	ldrb	r0, [r3, #1]
 8014eee:	f7ff ffc4 	bl	8014e7a <__hexdig_fun>
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	9302      	str	r3, [sp, #8]
 8014ef6:	42a8      	cmp	r0, r5
 8014ef8:	d02f      	beq.n	8014f5a <__gethex+0xb6>
 8014efa:	9600      	str	r6, [sp, #0]
 8014efc:	9b00      	ldr	r3, [sp, #0]
 8014efe:	7818      	ldrb	r0, [r3, #0]
 8014f00:	2830      	cmp	r0, #48	; 0x30
 8014f02:	d009      	beq.n	8014f18 <__gethex+0x74>
 8014f04:	f7ff ffb9 	bl	8014e7a <__hexdig_fun>
 8014f08:	4242      	negs	r2, r0
 8014f0a:	4142      	adcs	r2, r0
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	0035      	movs	r5, r6
 8014f10:	9202      	str	r2, [sp, #8]
 8014f12:	9305      	str	r3, [sp, #20]
 8014f14:	9c00      	ldr	r4, [sp, #0]
 8014f16:	e004      	b.n	8014f22 <__gethex+0x7e>
 8014f18:	9b00      	ldr	r3, [sp, #0]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	9300      	str	r3, [sp, #0]
 8014f1e:	e7ed      	b.n	8014efc <__gethex+0x58>
 8014f20:	3401      	adds	r4, #1
 8014f22:	7820      	ldrb	r0, [r4, #0]
 8014f24:	f7ff ffa9 	bl	8014e7a <__hexdig_fun>
 8014f28:	1e07      	subs	r7, r0, #0
 8014f2a:	d1f9      	bne.n	8014f20 <__gethex+0x7c>
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	0020      	movs	r0, r4
 8014f30:	4990      	ldr	r1, [pc, #576]	; (8015174 <__gethex+0x2d0>)
 8014f32:	f7ff fd1b 	bl	801496c <strncmp>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	d10d      	bne.n	8014f56 <__gethex+0xb2>
 8014f3a:	2d00      	cmp	r5, #0
 8014f3c:	d106      	bne.n	8014f4c <__gethex+0xa8>
 8014f3e:	3401      	adds	r4, #1
 8014f40:	0025      	movs	r5, r4
 8014f42:	7820      	ldrb	r0, [r4, #0]
 8014f44:	f7ff ff99 	bl	8014e7a <__hexdig_fun>
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	d102      	bne.n	8014f52 <__gethex+0xae>
 8014f4c:	1b2d      	subs	r5, r5, r4
 8014f4e:	00af      	lsls	r7, r5, #2
 8014f50:	e003      	b.n	8014f5a <__gethex+0xb6>
 8014f52:	3401      	adds	r4, #1
 8014f54:	e7f5      	b.n	8014f42 <__gethex+0x9e>
 8014f56:	2d00      	cmp	r5, #0
 8014f58:	d1f8      	bne.n	8014f4c <__gethex+0xa8>
 8014f5a:	2220      	movs	r2, #32
 8014f5c:	7823      	ldrb	r3, [r4, #0]
 8014f5e:	0026      	movs	r6, r4
 8014f60:	4393      	bics	r3, r2
 8014f62:	2b50      	cmp	r3, #80	; 0x50
 8014f64:	d11d      	bne.n	8014fa2 <__gethex+0xfe>
 8014f66:	7863      	ldrb	r3, [r4, #1]
 8014f68:	2b2b      	cmp	r3, #43	; 0x2b
 8014f6a:	d02c      	beq.n	8014fc6 <__gethex+0x122>
 8014f6c:	2b2d      	cmp	r3, #45	; 0x2d
 8014f6e:	d02e      	beq.n	8014fce <__gethex+0x12a>
 8014f70:	2300      	movs	r3, #0
 8014f72:	1c66      	adds	r6, r4, #1
 8014f74:	9304      	str	r3, [sp, #16]
 8014f76:	7830      	ldrb	r0, [r6, #0]
 8014f78:	f7ff ff7f 	bl	8014e7a <__hexdig_fun>
 8014f7c:	1e43      	subs	r3, r0, #1
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	2b18      	cmp	r3, #24
 8014f82:	d82b      	bhi.n	8014fdc <__gethex+0x138>
 8014f84:	3810      	subs	r0, #16
 8014f86:	0005      	movs	r5, r0
 8014f88:	7870      	ldrb	r0, [r6, #1]
 8014f8a:	f7ff ff76 	bl	8014e7a <__hexdig_fun>
 8014f8e:	1e43      	subs	r3, r0, #1
 8014f90:	b2db      	uxtb	r3, r3
 8014f92:	3601      	adds	r6, #1
 8014f94:	2b18      	cmp	r3, #24
 8014f96:	d91c      	bls.n	8014fd2 <__gethex+0x12e>
 8014f98:	9b04      	ldr	r3, [sp, #16]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d000      	beq.n	8014fa0 <__gethex+0xfc>
 8014f9e:	426d      	negs	r5, r5
 8014fa0:	197f      	adds	r7, r7, r5
 8014fa2:	9b06      	ldr	r3, [sp, #24]
 8014fa4:	601e      	str	r6, [r3, #0]
 8014fa6:	9b02      	ldr	r3, [sp, #8]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d019      	beq.n	8014fe0 <__gethex+0x13c>
 8014fac:	2600      	movs	r6, #0
 8014fae:	9b05      	ldr	r3, [sp, #20]
 8014fb0:	42b3      	cmp	r3, r6
 8014fb2:	d100      	bne.n	8014fb6 <__gethex+0x112>
 8014fb4:	3606      	adds	r6, #6
 8014fb6:	0030      	movs	r0, r6
 8014fb8:	b009      	add	sp, #36	; 0x24
 8014fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	2700      	movs	r7, #0
 8014fc0:	9c00      	ldr	r4, [sp, #0]
 8014fc2:	9302      	str	r3, [sp, #8]
 8014fc4:	e7c9      	b.n	8014f5a <__gethex+0xb6>
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	9304      	str	r3, [sp, #16]
 8014fca:	1ca6      	adds	r6, r4, #2
 8014fcc:	e7d3      	b.n	8014f76 <__gethex+0xd2>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	e7fa      	b.n	8014fc8 <__gethex+0x124>
 8014fd2:	230a      	movs	r3, #10
 8014fd4:	435d      	muls	r5, r3
 8014fd6:	182d      	adds	r5, r5, r0
 8014fd8:	3d10      	subs	r5, #16
 8014fda:	e7d5      	b.n	8014f88 <__gethex+0xe4>
 8014fdc:	0026      	movs	r6, r4
 8014fde:	e7e0      	b.n	8014fa2 <__gethex+0xfe>
 8014fe0:	9b00      	ldr	r3, [sp, #0]
 8014fe2:	9902      	ldr	r1, [sp, #8]
 8014fe4:	1ae3      	subs	r3, r4, r3
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	2b07      	cmp	r3, #7
 8014fea:	dc0a      	bgt.n	8015002 <__gethex+0x15e>
 8014fec:	9803      	ldr	r0, [sp, #12]
 8014fee:	f000 fa5d 	bl	80154ac <_Balloc>
 8014ff2:	1e05      	subs	r5, r0, #0
 8014ff4:	d108      	bne.n	8015008 <__gethex+0x164>
 8014ff6:	002a      	movs	r2, r5
 8014ff8:	21e4      	movs	r1, #228	; 0xe4
 8014ffa:	4b5f      	ldr	r3, [pc, #380]	; (8015178 <__gethex+0x2d4>)
 8014ffc:	485f      	ldr	r0, [pc, #380]	; (801517c <__gethex+0x2d8>)
 8014ffe:	f002 fac1 	bl	8017584 <__assert_func>
 8015002:	3101      	adds	r1, #1
 8015004:	105b      	asrs	r3, r3, #1
 8015006:	e7ef      	b.n	8014fe8 <__gethex+0x144>
 8015008:	0003      	movs	r3, r0
 801500a:	3314      	adds	r3, #20
 801500c:	9302      	str	r3, [sp, #8]
 801500e:	9305      	str	r3, [sp, #20]
 8015010:	2300      	movs	r3, #0
 8015012:	001e      	movs	r6, r3
 8015014:	9304      	str	r3, [sp, #16]
 8015016:	9b00      	ldr	r3, [sp, #0]
 8015018:	42a3      	cmp	r3, r4
 801501a:	d33f      	bcc.n	801509c <__gethex+0x1f8>
 801501c:	9c05      	ldr	r4, [sp, #20]
 801501e:	9b02      	ldr	r3, [sp, #8]
 8015020:	c440      	stmia	r4!, {r6}
 8015022:	1ae4      	subs	r4, r4, r3
 8015024:	10a4      	asrs	r4, r4, #2
 8015026:	0030      	movs	r0, r6
 8015028:	612c      	str	r4, [r5, #16]
 801502a:	f000 fb01 	bl	8015630 <__hi0bits>
 801502e:	9b01      	ldr	r3, [sp, #4]
 8015030:	0164      	lsls	r4, r4, #5
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	1a26      	subs	r6, r4, r0
 8015036:	9300      	str	r3, [sp, #0]
 8015038:	429e      	cmp	r6, r3
 801503a:	dd51      	ble.n	80150e0 <__gethex+0x23c>
 801503c:	1af6      	subs	r6, r6, r3
 801503e:	0031      	movs	r1, r6
 8015040:	0028      	movs	r0, r5
 8015042:	f000 fe7b 	bl	8015d3c <__any_on>
 8015046:	1e04      	subs	r4, r0, #0
 8015048:	d016      	beq.n	8015078 <__gethex+0x1d4>
 801504a:	2401      	movs	r4, #1
 801504c:	231f      	movs	r3, #31
 801504e:	0020      	movs	r0, r4
 8015050:	1e72      	subs	r2, r6, #1
 8015052:	4013      	ands	r3, r2
 8015054:	4098      	lsls	r0, r3
 8015056:	0003      	movs	r3, r0
 8015058:	1151      	asrs	r1, r2, #5
 801505a:	9802      	ldr	r0, [sp, #8]
 801505c:	0089      	lsls	r1, r1, #2
 801505e:	5809      	ldr	r1, [r1, r0]
 8015060:	4219      	tst	r1, r3
 8015062:	d009      	beq.n	8015078 <__gethex+0x1d4>
 8015064:	42a2      	cmp	r2, r4
 8015066:	dd06      	ble.n	8015076 <__gethex+0x1d2>
 8015068:	0028      	movs	r0, r5
 801506a:	1eb1      	subs	r1, r6, #2
 801506c:	f000 fe66 	bl	8015d3c <__any_on>
 8015070:	3402      	adds	r4, #2
 8015072:	2800      	cmp	r0, #0
 8015074:	d100      	bne.n	8015078 <__gethex+0x1d4>
 8015076:	2402      	movs	r4, #2
 8015078:	0031      	movs	r1, r6
 801507a:	0028      	movs	r0, r5
 801507c:	f7ff fea8 	bl	8014dd0 <rshift>
 8015080:	19bf      	adds	r7, r7, r6
 8015082:	9b01      	ldr	r3, [sp, #4]
 8015084:	689b      	ldr	r3, [r3, #8]
 8015086:	42bb      	cmp	r3, r7
 8015088:	da3a      	bge.n	8015100 <__gethex+0x25c>
 801508a:	0029      	movs	r1, r5
 801508c:	9803      	ldr	r0, [sp, #12]
 801508e:	f000 fa35 	bl	80154fc <_Bfree>
 8015092:	2300      	movs	r3, #0
 8015094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015096:	26a3      	movs	r6, #163	; 0xa3
 8015098:	6013      	str	r3, [r2, #0]
 801509a:	e78c      	b.n	8014fb6 <__gethex+0x112>
 801509c:	3c01      	subs	r4, #1
 801509e:	7823      	ldrb	r3, [r4, #0]
 80150a0:	2b2e      	cmp	r3, #46	; 0x2e
 80150a2:	d012      	beq.n	80150ca <__gethex+0x226>
 80150a4:	9b04      	ldr	r3, [sp, #16]
 80150a6:	2b20      	cmp	r3, #32
 80150a8:	d104      	bne.n	80150b4 <__gethex+0x210>
 80150aa:	9b05      	ldr	r3, [sp, #20]
 80150ac:	c340      	stmia	r3!, {r6}
 80150ae:	2600      	movs	r6, #0
 80150b0:	9305      	str	r3, [sp, #20]
 80150b2:	9604      	str	r6, [sp, #16]
 80150b4:	7820      	ldrb	r0, [r4, #0]
 80150b6:	f7ff fee0 	bl	8014e7a <__hexdig_fun>
 80150ba:	230f      	movs	r3, #15
 80150bc:	4018      	ands	r0, r3
 80150be:	9b04      	ldr	r3, [sp, #16]
 80150c0:	4098      	lsls	r0, r3
 80150c2:	3304      	adds	r3, #4
 80150c4:	4306      	orrs	r6, r0
 80150c6:	9304      	str	r3, [sp, #16]
 80150c8:	e7a5      	b.n	8015016 <__gethex+0x172>
 80150ca:	9b00      	ldr	r3, [sp, #0]
 80150cc:	42a3      	cmp	r3, r4
 80150ce:	d8e9      	bhi.n	80150a4 <__gethex+0x200>
 80150d0:	2201      	movs	r2, #1
 80150d2:	0020      	movs	r0, r4
 80150d4:	4927      	ldr	r1, [pc, #156]	; (8015174 <__gethex+0x2d0>)
 80150d6:	f7ff fc49 	bl	801496c <strncmp>
 80150da:	2800      	cmp	r0, #0
 80150dc:	d1e2      	bne.n	80150a4 <__gethex+0x200>
 80150de:	e79a      	b.n	8015016 <__gethex+0x172>
 80150e0:	9b00      	ldr	r3, [sp, #0]
 80150e2:	2400      	movs	r4, #0
 80150e4:	429e      	cmp	r6, r3
 80150e6:	dacc      	bge.n	8015082 <__gethex+0x1de>
 80150e8:	1b9e      	subs	r6, r3, r6
 80150ea:	0029      	movs	r1, r5
 80150ec:	0032      	movs	r2, r6
 80150ee:	9803      	ldr	r0, [sp, #12]
 80150f0:	f000 fbf0 	bl	80158d4 <__lshift>
 80150f4:	0003      	movs	r3, r0
 80150f6:	3314      	adds	r3, #20
 80150f8:	0005      	movs	r5, r0
 80150fa:	1bbf      	subs	r7, r7, r6
 80150fc:	9302      	str	r3, [sp, #8]
 80150fe:	e7c0      	b.n	8015082 <__gethex+0x1de>
 8015100:	9b01      	ldr	r3, [sp, #4]
 8015102:	685e      	ldr	r6, [r3, #4]
 8015104:	42be      	cmp	r6, r7
 8015106:	dd70      	ble.n	80151ea <__gethex+0x346>
 8015108:	9b00      	ldr	r3, [sp, #0]
 801510a:	1bf6      	subs	r6, r6, r7
 801510c:	42b3      	cmp	r3, r6
 801510e:	dc37      	bgt.n	8015180 <__gethex+0x2dc>
 8015110:	9b01      	ldr	r3, [sp, #4]
 8015112:	68db      	ldr	r3, [r3, #12]
 8015114:	2b02      	cmp	r3, #2
 8015116:	d024      	beq.n	8015162 <__gethex+0x2be>
 8015118:	2b03      	cmp	r3, #3
 801511a:	d026      	beq.n	801516a <__gethex+0x2c6>
 801511c:	2b01      	cmp	r3, #1
 801511e:	d117      	bne.n	8015150 <__gethex+0x2ac>
 8015120:	9b00      	ldr	r3, [sp, #0]
 8015122:	42b3      	cmp	r3, r6
 8015124:	d114      	bne.n	8015150 <__gethex+0x2ac>
 8015126:	2b01      	cmp	r3, #1
 8015128:	d10b      	bne.n	8015142 <__gethex+0x29e>
 801512a:	9b01      	ldr	r3, [sp, #4]
 801512c:	9a07      	ldr	r2, [sp, #28]
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	2662      	movs	r6, #98	; 0x62
 8015132:	6013      	str	r3, [r2, #0]
 8015134:	2301      	movs	r3, #1
 8015136:	9a02      	ldr	r2, [sp, #8]
 8015138:	612b      	str	r3, [r5, #16]
 801513a:	6013      	str	r3, [r2, #0]
 801513c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801513e:	601d      	str	r5, [r3, #0]
 8015140:	e739      	b.n	8014fb6 <__gethex+0x112>
 8015142:	9900      	ldr	r1, [sp, #0]
 8015144:	0028      	movs	r0, r5
 8015146:	3901      	subs	r1, #1
 8015148:	f000 fdf8 	bl	8015d3c <__any_on>
 801514c:	2800      	cmp	r0, #0
 801514e:	d1ec      	bne.n	801512a <__gethex+0x286>
 8015150:	0029      	movs	r1, r5
 8015152:	9803      	ldr	r0, [sp, #12]
 8015154:	f000 f9d2 	bl	80154fc <_Bfree>
 8015158:	2300      	movs	r3, #0
 801515a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801515c:	2650      	movs	r6, #80	; 0x50
 801515e:	6013      	str	r3, [r2, #0]
 8015160:	e729      	b.n	8014fb6 <__gethex+0x112>
 8015162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015164:	2b00      	cmp	r3, #0
 8015166:	d1f3      	bne.n	8015150 <__gethex+0x2ac>
 8015168:	e7df      	b.n	801512a <__gethex+0x286>
 801516a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801516c:	2b00      	cmp	r3, #0
 801516e:	d1dc      	bne.n	801512a <__gethex+0x286>
 8015170:	e7ee      	b.n	8015150 <__gethex+0x2ac>
 8015172:	46c0      	nop			; (mov r8, r8)
 8015174:	0801c5d1 	.word	0x0801c5d1
 8015178:	0801c731 	.word	0x0801c731
 801517c:	0801c742 	.word	0x0801c742
 8015180:	1e77      	subs	r7, r6, #1
 8015182:	2c00      	cmp	r4, #0
 8015184:	d12f      	bne.n	80151e6 <__gethex+0x342>
 8015186:	2f00      	cmp	r7, #0
 8015188:	d004      	beq.n	8015194 <__gethex+0x2f0>
 801518a:	0039      	movs	r1, r7
 801518c:	0028      	movs	r0, r5
 801518e:	f000 fdd5 	bl	8015d3c <__any_on>
 8015192:	0004      	movs	r4, r0
 8015194:	231f      	movs	r3, #31
 8015196:	117a      	asrs	r2, r7, #5
 8015198:	401f      	ands	r7, r3
 801519a:	3b1e      	subs	r3, #30
 801519c:	40bb      	lsls	r3, r7
 801519e:	9902      	ldr	r1, [sp, #8]
 80151a0:	0092      	lsls	r2, r2, #2
 80151a2:	5852      	ldr	r2, [r2, r1]
 80151a4:	421a      	tst	r2, r3
 80151a6:	d001      	beq.n	80151ac <__gethex+0x308>
 80151a8:	2302      	movs	r3, #2
 80151aa:	431c      	orrs	r4, r3
 80151ac:	9b00      	ldr	r3, [sp, #0]
 80151ae:	0031      	movs	r1, r6
 80151b0:	1b9b      	subs	r3, r3, r6
 80151b2:	2602      	movs	r6, #2
 80151b4:	0028      	movs	r0, r5
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	f7ff fe0a 	bl	8014dd0 <rshift>
 80151bc:	9b01      	ldr	r3, [sp, #4]
 80151be:	685f      	ldr	r7, [r3, #4]
 80151c0:	2c00      	cmp	r4, #0
 80151c2:	d041      	beq.n	8015248 <__gethex+0x3a4>
 80151c4:	9b01      	ldr	r3, [sp, #4]
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	2b02      	cmp	r3, #2
 80151ca:	d010      	beq.n	80151ee <__gethex+0x34a>
 80151cc:	2b03      	cmp	r3, #3
 80151ce:	d012      	beq.n	80151f6 <__gethex+0x352>
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	d106      	bne.n	80151e2 <__gethex+0x33e>
 80151d4:	07a2      	lsls	r2, r4, #30
 80151d6:	d504      	bpl.n	80151e2 <__gethex+0x33e>
 80151d8:	9a02      	ldr	r2, [sp, #8]
 80151da:	6812      	ldr	r2, [r2, #0]
 80151dc:	4314      	orrs	r4, r2
 80151de:	421c      	tst	r4, r3
 80151e0:	d10c      	bne.n	80151fc <__gethex+0x358>
 80151e2:	2310      	movs	r3, #16
 80151e4:	e02f      	b.n	8015246 <__gethex+0x3a2>
 80151e6:	2401      	movs	r4, #1
 80151e8:	e7d4      	b.n	8015194 <__gethex+0x2f0>
 80151ea:	2601      	movs	r6, #1
 80151ec:	e7e8      	b.n	80151c0 <__gethex+0x31c>
 80151ee:	2301      	movs	r3, #1
 80151f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151f2:	1a9b      	subs	r3, r3, r2
 80151f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80151f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d0f2      	beq.n	80151e2 <__gethex+0x33e>
 80151fc:	692b      	ldr	r3, [r5, #16]
 80151fe:	2000      	movs	r0, #0
 8015200:	9302      	str	r3, [sp, #8]
 8015202:	009b      	lsls	r3, r3, #2
 8015204:	9304      	str	r3, [sp, #16]
 8015206:	002b      	movs	r3, r5
 8015208:	9a04      	ldr	r2, [sp, #16]
 801520a:	3314      	adds	r3, #20
 801520c:	1899      	adds	r1, r3, r2
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	1c54      	adds	r4, r2, #1
 8015212:	d01e      	beq.n	8015252 <__gethex+0x3ae>
 8015214:	3201      	adds	r2, #1
 8015216:	601a      	str	r2, [r3, #0]
 8015218:	002b      	movs	r3, r5
 801521a:	3314      	adds	r3, #20
 801521c:	2e02      	cmp	r6, #2
 801521e:	d141      	bne.n	80152a4 <__gethex+0x400>
 8015220:	9a01      	ldr	r2, [sp, #4]
 8015222:	9900      	ldr	r1, [sp, #0]
 8015224:	6812      	ldr	r2, [r2, #0]
 8015226:	3a01      	subs	r2, #1
 8015228:	428a      	cmp	r2, r1
 801522a:	d10b      	bne.n	8015244 <__gethex+0x3a0>
 801522c:	221f      	movs	r2, #31
 801522e:	9800      	ldr	r0, [sp, #0]
 8015230:	1149      	asrs	r1, r1, #5
 8015232:	4002      	ands	r2, r0
 8015234:	2001      	movs	r0, #1
 8015236:	0004      	movs	r4, r0
 8015238:	4094      	lsls	r4, r2
 801523a:	0089      	lsls	r1, r1, #2
 801523c:	58cb      	ldr	r3, [r1, r3]
 801523e:	4223      	tst	r3, r4
 8015240:	d000      	beq.n	8015244 <__gethex+0x3a0>
 8015242:	2601      	movs	r6, #1
 8015244:	2320      	movs	r3, #32
 8015246:	431e      	orrs	r6, r3
 8015248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801524a:	601d      	str	r5, [r3, #0]
 801524c:	9b07      	ldr	r3, [sp, #28]
 801524e:	601f      	str	r7, [r3, #0]
 8015250:	e6b1      	b.n	8014fb6 <__gethex+0x112>
 8015252:	c301      	stmia	r3!, {r0}
 8015254:	4299      	cmp	r1, r3
 8015256:	d8da      	bhi.n	801520e <__gethex+0x36a>
 8015258:	68ab      	ldr	r3, [r5, #8]
 801525a:	9a02      	ldr	r2, [sp, #8]
 801525c:	429a      	cmp	r2, r3
 801525e:	db18      	blt.n	8015292 <__gethex+0x3ee>
 8015260:	6869      	ldr	r1, [r5, #4]
 8015262:	9803      	ldr	r0, [sp, #12]
 8015264:	3101      	adds	r1, #1
 8015266:	f000 f921 	bl	80154ac <_Balloc>
 801526a:	1e04      	subs	r4, r0, #0
 801526c:	d104      	bne.n	8015278 <__gethex+0x3d4>
 801526e:	0022      	movs	r2, r4
 8015270:	2184      	movs	r1, #132	; 0x84
 8015272:	4b1c      	ldr	r3, [pc, #112]	; (80152e4 <__gethex+0x440>)
 8015274:	481c      	ldr	r0, [pc, #112]	; (80152e8 <__gethex+0x444>)
 8015276:	e6c2      	b.n	8014ffe <__gethex+0x15a>
 8015278:	0029      	movs	r1, r5
 801527a:	692a      	ldr	r2, [r5, #16]
 801527c:	310c      	adds	r1, #12
 801527e:	3202      	adds	r2, #2
 8015280:	0092      	lsls	r2, r2, #2
 8015282:	300c      	adds	r0, #12
 8015284:	f7ff fc7b 	bl	8014b7e <memcpy>
 8015288:	0029      	movs	r1, r5
 801528a:	9803      	ldr	r0, [sp, #12]
 801528c:	f000 f936 	bl	80154fc <_Bfree>
 8015290:	0025      	movs	r5, r4
 8015292:	692b      	ldr	r3, [r5, #16]
 8015294:	1c5a      	adds	r2, r3, #1
 8015296:	612a      	str	r2, [r5, #16]
 8015298:	2201      	movs	r2, #1
 801529a:	3304      	adds	r3, #4
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	18eb      	adds	r3, r5, r3
 80152a0:	605a      	str	r2, [r3, #4]
 80152a2:	e7b9      	b.n	8015218 <__gethex+0x374>
 80152a4:	692a      	ldr	r2, [r5, #16]
 80152a6:	9902      	ldr	r1, [sp, #8]
 80152a8:	428a      	cmp	r2, r1
 80152aa:	dd09      	ble.n	80152c0 <__gethex+0x41c>
 80152ac:	2101      	movs	r1, #1
 80152ae:	0028      	movs	r0, r5
 80152b0:	f7ff fd8e 	bl	8014dd0 <rshift>
 80152b4:	9b01      	ldr	r3, [sp, #4]
 80152b6:	3701      	adds	r7, #1
 80152b8:	689b      	ldr	r3, [r3, #8]
 80152ba:	42bb      	cmp	r3, r7
 80152bc:	dac1      	bge.n	8015242 <__gethex+0x39e>
 80152be:	e6e4      	b.n	801508a <__gethex+0x1e6>
 80152c0:	221f      	movs	r2, #31
 80152c2:	9c00      	ldr	r4, [sp, #0]
 80152c4:	9900      	ldr	r1, [sp, #0]
 80152c6:	2601      	movs	r6, #1
 80152c8:	4014      	ands	r4, r2
 80152ca:	4211      	tst	r1, r2
 80152cc:	d0ba      	beq.n	8015244 <__gethex+0x3a0>
 80152ce:	9a04      	ldr	r2, [sp, #16]
 80152d0:	189b      	adds	r3, r3, r2
 80152d2:	3b04      	subs	r3, #4
 80152d4:	6818      	ldr	r0, [r3, #0]
 80152d6:	f000 f9ab 	bl	8015630 <__hi0bits>
 80152da:	2320      	movs	r3, #32
 80152dc:	1b1b      	subs	r3, r3, r4
 80152de:	4298      	cmp	r0, r3
 80152e0:	dbe4      	blt.n	80152ac <__gethex+0x408>
 80152e2:	e7af      	b.n	8015244 <__gethex+0x3a0>
 80152e4:	0801c731 	.word	0x0801c731
 80152e8:	0801c742 	.word	0x0801c742

080152ec <L_shift>:
 80152ec:	2308      	movs	r3, #8
 80152ee:	b570      	push	{r4, r5, r6, lr}
 80152f0:	2520      	movs	r5, #32
 80152f2:	1a9a      	subs	r2, r3, r2
 80152f4:	0092      	lsls	r2, r2, #2
 80152f6:	1aad      	subs	r5, r5, r2
 80152f8:	6843      	ldr	r3, [r0, #4]
 80152fa:	6804      	ldr	r4, [r0, #0]
 80152fc:	001e      	movs	r6, r3
 80152fe:	40ae      	lsls	r6, r5
 8015300:	40d3      	lsrs	r3, r2
 8015302:	4334      	orrs	r4, r6
 8015304:	6004      	str	r4, [r0, #0]
 8015306:	6043      	str	r3, [r0, #4]
 8015308:	3004      	adds	r0, #4
 801530a:	4288      	cmp	r0, r1
 801530c:	d3f4      	bcc.n	80152f8 <L_shift+0xc>
 801530e:	bd70      	pop	{r4, r5, r6, pc}

08015310 <__match>:
 8015310:	b530      	push	{r4, r5, lr}
 8015312:	6803      	ldr	r3, [r0, #0]
 8015314:	780c      	ldrb	r4, [r1, #0]
 8015316:	3301      	adds	r3, #1
 8015318:	2c00      	cmp	r4, #0
 801531a:	d102      	bne.n	8015322 <__match+0x12>
 801531c:	6003      	str	r3, [r0, #0]
 801531e:	2001      	movs	r0, #1
 8015320:	bd30      	pop	{r4, r5, pc}
 8015322:	781a      	ldrb	r2, [r3, #0]
 8015324:	0015      	movs	r5, r2
 8015326:	3d41      	subs	r5, #65	; 0x41
 8015328:	2d19      	cmp	r5, #25
 801532a:	d800      	bhi.n	801532e <__match+0x1e>
 801532c:	3220      	adds	r2, #32
 801532e:	3101      	adds	r1, #1
 8015330:	42a2      	cmp	r2, r4
 8015332:	d0ef      	beq.n	8015314 <__match+0x4>
 8015334:	2000      	movs	r0, #0
 8015336:	e7f3      	b.n	8015320 <__match+0x10>

08015338 <__hexnan>:
 8015338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801533a:	680b      	ldr	r3, [r1, #0]
 801533c:	b08b      	sub	sp, #44	; 0x2c
 801533e:	9201      	str	r2, [sp, #4]
 8015340:	9901      	ldr	r1, [sp, #4]
 8015342:	115a      	asrs	r2, r3, #5
 8015344:	0092      	lsls	r2, r2, #2
 8015346:	188a      	adds	r2, r1, r2
 8015348:	9202      	str	r2, [sp, #8]
 801534a:	0019      	movs	r1, r3
 801534c:	221f      	movs	r2, #31
 801534e:	4011      	ands	r1, r2
 8015350:	9008      	str	r0, [sp, #32]
 8015352:	9106      	str	r1, [sp, #24]
 8015354:	4213      	tst	r3, r2
 8015356:	d002      	beq.n	801535e <__hexnan+0x26>
 8015358:	9b02      	ldr	r3, [sp, #8]
 801535a:	3304      	adds	r3, #4
 801535c:	9302      	str	r3, [sp, #8]
 801535e:	9b02      	ldr	r3, [sp, #8]
 8015360:	2500      	movs	r5, #0
 8015362:	1f1f      	subs	r7, r3, #4
 8015364:	003e      	movs	r6, r7
 8015366:	003c      	movs	r4, r7
 8015368:	9b08      	ldr	r3, [sp, #32]
 801536a:	603d      	str	r5, [r7, #0]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	9507      	str	r5, [sp, #28]
 8015370:	9305      	str	r3, [sp, #20]
 8015372:	9503      	str	r5, [sp, #12]
 8015374:	9b05      	ldr	r3, [sp, #20]
 8015376:	3301      	adds	r3, #1
 8015378:	9309      	str	r3, [sp, #36]	; 0x24
 801537a:	9b05      	ldr	r3, [sp, #20]
 801537c:	785b      	ldrb	r3, [r3, #1]
 801537e:	9304      	str	r3, [sp, #16]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d028      	beq.n	80153d6 <__hexnan+0x9e>
 8015384:	9804      	ldr	r0, [sp, #16]
 8015386:	f7ff fd78 	bl	8014e7a <__hexdig_fun>
 801538a:	2800      	cmp	r0, #0
 801538c:	d154      	bne.n	8015438 <__hexnan+0x100>
 801538e:	9b04      	ldr	r3, [sp, #16]
 8015390:	2b20      	cmp	r3, #32
 8015392:	d819      	bhi.n	80153c8 <__hexnan+0x90>
 8015394:	9b03      	ldr	r3, [sp, #12]
 8015396:	9a07      	ldr	r2, [sp, #28]
 8015398:	4293      	cmp	r3, r2
 801539a:	dd12      	ble.n	80153c2 <__hexnan+0x8a>
 801539c:	42b4      	cmp	r4, r6
 801539e:	d206      	bcs.n	80153ae <__hexnan+0x76>
 80153a0:	2d07      	cmp	r5, #7
 80153a2:	dc04      	bgt.n	80153ae <__hexnan+0x76>
 80153a4:	002a      	movs	r2, r5
 80153a6:	0031      	movs	r1, r6
 80153a8:	0020      	movs	r0, r4
 80153aa:	f7ff ff9f 	bl	80152ec <L_shift>
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	2508      	movs	r5, #8
 80153b2:	429c      	cmp	r4, r3
 80153b4:	d905      	bls.n	80153c2 <__hexnan+0x8a>
 80153b6:	1f26      	subs	r6, r4, #4
 80153b8:	2500      	movs	r5, #0
 80153ba:	0034      	movs	r4, r6
 80153bc:	9b03      	ldr	r3, [sp, #12]
 80153be:	6035      	str	r5, [r6, #0]
 80153c0:	9307      	str	r3, [sp, #28]
 80153c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c4:	9305      	str	r3, [sp, #20]
 80153c6:	e7d5      	b.n	8015374 <__hexnan+0x3c>
 80153c8:	9b04      	ldr	r3, [sp, #16]
 80153ca:	2b29      	cmp	r3, #41	; 0x29
 80153cc:	d159      	bne.n	8015482 <__hexnan+0x14a>
 80153ce:	9b05      	ldr	r3, [sp, #20]
 80153d0:	9a08      	ldr	r2, [sp, #32]
 80153d2:	3302      	adds	r3, #2
 80153d4:	6013      	str	r3, [r2, #0]
 80153d6:	9b03      	ldr	r3, [sp, #12]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d052      	beq.n	8015482 <__hexnan+0x14a>
 80153dc:	42b4      	cmp	r4, r6
 80153de:	d206      	bcs.n	80153ee <__hexnan+0xb6>
 80153e0:	2d07      	cmp	r5, #7
 80153e2:	dc04      	bgt.n	80153ee <__hexnan+0xb6>
 80153e4:	002a      	movs	r2, r5
 80153e6:	0031      	movs	r1, r6
 80153e8:	0020      	movs	r0, r4
 80153ea:	f7ff ff7f 	bl	80152ec <L_shift>
 80153ee:	9b01      	ldr	r3, [sp, #4]
 80153f0:	429c      	cmp	r4, r3
 80153f2:	d935      	bls.n	8015460 <__hexnan+0x128>
 80153f4:	001a      	movs	r2, r3
 80153f6:	0023      	movs	r3, r4
 80153f8:	cb02      	ldmia	r3!, {r1}
 80153fa:	c202      	stmia	r2!, {r1}
 80153fc:	429f      	cmp	r7, r3
 80153fe:	d2fb      	bcs.n	80153f8 <__hexnan+0xc0>
 8015400:	9b02      	ldr	r3, [sp, #8]
 8015402:	1c62      	adds	r2, r4, #1
 8015404:	1ed9      	subs	r1, r3, #3
 8015406:	2304      	movs	r3, #4
 8015408:	4291      	cmp	r1, r2
 801540a:	d305      	bcc.n	8015418 <__hexnan+0xe0>
 801540c:	9b02      	ldr	r3, [sp, #8]
 801540e:	3b04      	subs	r3, #4
 8015410:	1b1b      	subs	r3, r3, r4
 8015412:	089b      	lsrs	r3, r3, #2
 8015414:	3301      	adds	r3, #1
 8015416:	009b      	lsls	r3, r3, #2
 8015418:	9a01      	ldr	r2, [sp, #4]
 801541a:	18d3      	adds	r3, r2, r3
 801541c:	2200      	movs	r2, #0
 801541e:	c304      	stmia	r3!, {r2}
 8015420:	429f      	cmp	r7, r3
 8015422:	d2fc      	bcs.n	801541e <__hexnan+0xe6>
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d104      	bne.n	8015434 <__hexnan+0xfc>
 801542a:	9b01      	ldr	r3, [sp, #4]
 801542c:	429f      	cmp	r7, r3
 801542e:	d126      	bne.n	801547e <__hexnan+0x146>
 8015430:	2301      	movs	r3, #1
 8015432:	603b      	str	r3, [r7, #0]
 8015434:	2005      	movs	r0, #5
 8015436:	e025      	b.n	8015484 <__hexnan+0x14c>
 8015438:	9b03      	ldr	r3, [sp, #12]
 801543a:	3501      	adds	r5, #1
 801543c:	3301      	adds	r3, #1
 801543e:	9303      	str	r3, [sp, #12]
 8015440:	2d08      	cmp	r5, #8
 8015442:	dd06      	ble.n	8015452 <__hexnan+0x11a>
 8015444:	9b01      	ldr	r3, [sp, #4]
 8015446:	429c      	cmp	r4, r3
 8015448:	d9bb      	bls.n	80153c2 <__hexnan+0x8a>
 801544a:	2300      	movs	r3, #0
 801544c:	2501      	movs	r5, #1
 801544e:	3c04      	subs	r4, #4
 8015450:	6023      	str	r3, [r4, #0]
 8015452:	220f      	movs	r2, #15
 8015454:	6823      	ldr	r3, [r4, #0]
 8015456:	4010      	ands	r0, r2
 8015458:	011b      	lsls	r3, r3, #4
 801545a:	4303      	orrs	r3, r0
 801545c:	6023      	str	r3, [r4, #0]
 801545e:	e7b0      	b.n	80153c2 <__hexnan+0x8a>
 8015460:	9b06      	ldr	r3, [sp, #24]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d0de      	beq.n	8015424 <__hexnan+0xec>
 8015466:	2320      	movs	r3, #32
 8015468:	9a06      	ldr	r2, [sp, #24]
 801546a:	9902      	ldr	r1, [sp, #8]
 801546c:	1a9b      	subs	r3, r3, r2
 801546e:	2201      	movs	r2, #1
 8015470:	4252      	negs	r2, r2
 8015472:	40da      	lsrs	r2, r3
 8015474:	3904      	subs	r1, #4
 8015476:	680b      	ldr	r3, [r1, #0]
 8015478:	4013      	ands	r3, r2
 801547a:	600b      	str	r3, [r1, #0]
 801547c:	e7d2      	b.n	8015424 <__hexnan+0xec>
 801547e:	3f04      	subs	r7, #4
 8015480:	e7d0      	b.n	8015424 <__hexnan+0xec>
 8015482:	2004      	movs	r0, #4
 8015484:	b00b      	add	sp, #44	; 0x2c
 8015486:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015488 <__ascii_mbtowc>:
 8015488:	b082      	sub	sp, #8
 801548a:	2900      	cmp	r1, #0
 801548c:	d100      	bne.n	8015490 <__ascii_mbtowc+0x8>
 801548e:	a901      	add	r1, sp, #4
 8015490:	1e10      	subs	r0, r2, #0
 8015492:	d006      	beq.n	80154a2 <__ascii_mbtowc+0x1a>
 8015494:	2b00      	cmp	r3, #0
 8015496:	d006      	beq.n	80154a6 <__ascii_mbtowc+0x1e>
 8015498:	7813      	ldrb	r3, [r2, #0]
 801549a:	600b      	str	r3, [r1, #0]
 801549c:	7810      	ldrb	r0, [r2, #0]
 801549e:	1e43      	subs	r3, r0, #1
 80154a0:	4198      	sbcs	r0, r3
 80154a2:	b002      	add	sp, #8
 80154a4:	4770      	bx	lr
 80154a6:	2002      	movs	r0, #2
 80154a8:	4240      	negs	r0, r0
 80154aa:	e7fa      	b.n	80154a2 <__ascii_mbtowc+0x1a>

080154ac <_Balloc>:
 80154ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80154ae:	b570      	push	{r4, r5, r6, lr}
 80154b0:	0006      	movs	r6, r0
 80154b2:	000c      	movs	r4, r1
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d012      	beq.n	80154de <_Balloc+0x32>
 80154b8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80154ba:	00a2      	lsls	r2, r4, #2
 80154bc:	189b      	adds	r3, r3, r2
 80154be:	6818      	ldr	r0, [r3, #0]
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d115      	bne.n	80154f0 <_Balloc+0x44>
 80154c4:	2101      	movs	r1, #1
 80154c6:	000d      	movs	r5, r1
 80154c8:	40a5      	lsls	r5, r4
 80154ca:	1d6a      	adds	r2, r5, #5
 80154cc:	0030      	movs	r0, r6
 80154ce:	0092      	lsls	r2, r2, #2
 80154d0:	f002 f876 	bl	80175c0 <_calloc_r>
 80154d4:	2800      	cmp	r0, #0
 80154d6:	d009      	beq.n	80154ec <_Balloc+0x40>
 80154d8:	6044      	str	r4, [r0, #4]
 80154da:	6085      	str	r5, [r0, #8]
 80154dc:	e00a      	b.n	80154f4 <_Balloc+0x48>
 80154de:	2221      	movs	r2, #33	; 0x21
 80154e0:	2104      	movs	r1, #4
 80154e2:	f002 f86d 	bl	80175c0 <_calloc_r>
 80154e6:	6470      	str	r0, [r6, #68]	; 0x44
 80154e8:	2800      	cmp	r0, #0
 80154ea:	d1e5      	bne.n	80154b8 <_Balloc+0xc>
 80154ec:	2000      	movs	r0, #0
 80154ee:	bd70      	pop	{r4, r5, r6, pc}
 80154f0:	6802      	ldr	r2, [r0, #0]
 80154f2:	601a      	str	r2, [r3, #0]
 80154f4:	2300      	movs	r3, #0
 80154f6:	6103      	str	r3, [r0, #16]
 80154f8:	60c3      	str	r3, [r0, #12]
 80154fa:	e7f8      	b.n	80154ee <_Balloc+0x42>

080154fc <_Bfree>:
 80154fc:	2900      	cmp	r1, #0
 80154fe:	d006      	beq.n	801550e <_Bfree+0x12>
 8015500:	684a      	ldr	r2, [r1, #4]
 8015502:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8015504:	0092      	lsls	r2, r2, #2
 8015506:	189b      	adds	r3, r3, r2
 8015508:	681a      	ldr	r2, [r3, #0]
 801550a:	600a      	str	r2, [r1, #0]
 801550c:	6019      	str	r1, [r3, #0]
 801550e:	4770      	bx	lr

08015510 <__multadd>:
 8015510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015512:	000e      	movs	r6, r1
 8015514:	9001      	str	r0, [sp, #4]
 8015516:	000c      	movs	r4, r1
 8015518:	001d      	movs	r5, r3
 801551a:	2000      	movs	r0, #0
 801551c:	690f      	ldr	r7, [r1, #16]
 801551e:	3614      	adds	r6, #20
 8015520:	6833      	ldr	r3, [r6, #0]
 8015522:	3001      	adds	r0, #1
 8015524:	b299      	uxth	r1, r3
 8015526:	4351      	muls	r1, r2
 8015528:	0c1b      	lsrs	r3, r3, #16
 801552a:	4353      	muls	r3, r2
 801552c:	1949      	adds	r1, r1, r5
 801552e:	0c0d      	lsrs	r5, r1, #16
 8015530:	195b      	adds	r3, r3, r5
 8015532:	0c1d      	lsrs	r5, r3, #16
 8015534:	b289      	uxth	r1, r1
 8015536:	041b      	lsls	r3, r3, #16
 8015538:	185b      	adds	r3, r3, r1
 801553a:	c608      	stmia	r6!, {r3}
 801553c:	4287      	cmp	r7, r0
 801553e:	dcef      	bgt.n	8015520 <__multadd+0x10>
 8015540:	2d00      	cmp	r5, #0
 8015542:	d022      	beq.n	801558a <__multadd+0x7a>
 8015544:	68a3      	ldr	r3, [r4, #8]
 8015546:	42bb      	cmp	r3, r7
 8015548:	dc19      	bgt.n	801557e <__multadd+0x6e>
 801554a:	6861      	ldr	r1, [r4, #4]
 801554c:	9801      	ldr	r0, [sp, #4]
 801554e:	3101      	adds	r1, #1
 8015550:	f7ff ffac 	bl	80154ac <_Balloc>
 8015554:	1e06      	subs	r6, r0, #0
 8015556:	d105      	bne.n	8015564 <__multadd+0x54>
 8015558:	0032      	movs	r2, r6
 801555a:	21ba      	movs	r1, #186	; 0xba
 801555c:	4b0c      	ldr	r3, [pc, #48]	; (8015590 <__multadd+0x80>)
 801555e:	480d      	ldr	r0, [pc, #52]	; (8015594 <__multadd+0x84>)
 8015560:	f002 f810 	bl	8017584 <__assert_func>
 8015564:	0021      	movs	r1, r4
 8015566:	6922      	ldr	r2, [r4, #16]
 8015568:	310c      	adds	r1, #12
 801556a:	3202      	adds	r2, #2
 801556c:	0092      	lsls	r2, r2, #2
 801556e:	300c      	adds	r0, #12
 8015570:	f7ff fb05 	bl	8014b7e <memcpy>
 8015574:	0021      	movs	r1, r4
 8015576:	9801      	ldr	r0, [sp, #4]
 8015578:	f7ff ffc0 	bl	80154fc <_Bfree>
 801557c:	0034      	movs	r4, r6
 801557e:	1d3b      	adds	r3, r7, #4
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	18e3      	adds	r3, r4, r3
 8015584:	605d      	str	r5, [r3, #4]
 8015586:	1c7b      	adds	r3, r7, #1
 8015588:	6123      	str	r3, [r4, #16]
 801558a:	0020      	movs	r0, r4
 801558c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801558e:	46c0      	nop			; (mov r8, r8)
 8015590:	0801c731 	.word	0x0801c731
 8015594:	0801c7a2 	.word	0x0801c7a2

08015598 <__s2b>:
 8015598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801559a:	0006      	movs	r6, r0
 801559c:	0018      	movs	r0, r3
 801559e:	000c      	movs	r4, r1
 80155a0:	3008      	adds	r0, #8
 80155a2:	2109      	movs	r1, #9
 80155a4:	9301      	str	r3, [sp, #4]
 80155a6:	0015      	movs	r5, r2
 80155a8:	f7ea fe5c 	bl	8000264 <__divsi3>
 80155ac:	2301      	movs	r3, #1
 80155ae:	2100      	movs	r1, #0
 80155b0:	4283      	cmp	r3, r0
 80155b2:	db0a      	blt.n	80155ca <__s2b+0x32>
 80155b4:	0030      	movs	r0, r6
 80155b6:	f7ff ff79 	bl	80154ac <_Balloc>
 80155ba:	1e01      	subs	r1, r0, #0
 80155bc:	d108      	bne.n	80155d0 <__s2b+0x38>
 80155be:	000a      	movs	r2, r1
 80155c0:	4b19      	ldr	r3, [pc, #100]	; (8015628 <__s2b+0x90>)
 80155c2:	481a      	ldr	r0, [pc, #104]	; (801562c <__s2b+0x94>)
 80155c4:	31d3      	adds	r1, #211	; 0xd3
 80155c6:	f001 ffdd 	bl	8017584 <__assert_func>
 80155ca:	005b      	lsls	r3, r3, #1
 80155cc:	3101      	adds	r1, #1
 80155ce:	e7ef      	b.n	80155b0 <__s2b+0x18>
 80155d0:	9b08      	ldr	r3, [sp, #32]
 80155d2:	6143      	str	r3, [r0, #20]
 80155d4:	2301      	movs	r3, #1
 80155d6:	6103      	str	r3, [r0, #16]
 80155d8:	2d09      	cmp	r5, #9
 80155da:	dd18      	ble.n	801560e <__s2b+0x76>
 80155dc:	0023      	movs	r3, r4
 80155de:	3309      	adds	r3, #9
 80155e0:	001f      	movs	r7, r3
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	1964      	adds	r4, r4, r5
 80155e6:	783b      	ldrb	r3, [r7, #0]
 80155e8:	220a      	movs	r2, #10
 80155ea:	0030      	movs	r0, r6
 80155ec:	3b30      	subs	r3, #48	; 0x30
 80155ee:	f7ff ff8f 	bl	8015510 <__multadd>
 80155f2:	3701      	adds	r7, #1
 80155f4:	0001      	movs	r1, r0
 80155f6:	42a7      	cmp	r7, r4
 80155f8:	d1f5      	bne.n	80155e6 <__s2b+0x4e>
 80155fa:	002c      	movs	r4, r5
 80155fc:	9b00      	ldr	r3, [sp, #0]
 80155fe:	3c08      	subs	r4, #8
 8015600:	191c      	adds	r4, r3, r4
 8015602:	002f      	movs	r7, r5
 8015604:	9b01      	ldr	r3, [sp, #4]
 8015606:	429f      	cmp	r7, r3
 8015608:	db04      	blt.n	8015614 <__s2b+0x7c>
 801560a:	0008      	movs	r0, r1
 801560c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801560e:	2509      	movs	r5, #9
 8015610:	340a      	adds	r4, #10
 8015612:	e7f6      	b.n	8015602 <__s2b+0x6a>
 8015614:	1b63      	subs	r3, r4, r5
 8015616:	5ddb      	ldrb	r3, [r3, r7]
 8015618:	220a      	movs	r2, #10
 801561a:	0030      	movs	r0, r6
 801561c:	3b30      	subs	r3, #48	; 0x30
 801561e:	f7ff ff77 	bl	8015510 <__multadd>
 8015622:	3701      	adds	r7, #1
 8015624:	0001      	movs	r1, r0
 8015626:	e7ed      	b.n	8015604 <__s2b+0x6c>
 8015628:	0801c731 	.word	0x0801c731
 801562c:	0801c7a2 	.word	0x0801c7a2

08015630 <__hi0bits>:
 8015630:	0003      	movs	r3, r0
 8015632:	0c02      	lsrs	r2, r0, #16
 8015634:	2000      	movs	r0, #0
 8015636:	4282      	cmp	r2, r0
 8015638:	d101      	bne.n	801563e <__hi0bits+0xe>
 801563a:	041b      	lsls	r3, r3, #16
 801563c:	3010      	adds	r0, #16
 801563e:	0e1a      	lsrs	r2, r3, #24
 8015640:	d101      	bne.n	8015646 <__hi0bits+0x16>
 8015642:	3008      	adds	r0, #8
 8015644:	021b      	lsls	r3, r3, #8
 8015646:	0f1a      	lsrs	r2, r3, #28
 8015648:	d101      	bne.n	801564e <__hi0bits+0x1e>
 801564a:	3004      	adds	r0, #4
 801564c:	011b      	lsls	r3, r3, #4
 801564e:	0f9a      	lsrs	r2, r3, #30
 8015650:	d101      	bne.n	8015656 <__hi0bits+0x26>
 8015652:	3002      	adds	r0, #2
 8015654:	009b      	lsls	r3, r3, #2
 8015656:	2b00      	cmp	r3, #0
 8015658:	db03      	blt.n	8015662 <__hi0bits+0x32>
 801565a:	3001      	adds	r0, #1
 801565c:	005b      	lsls	r3, r3, #1
 801565e:	d400      	bmi.n	8015662 <__hi0bits+0x32>
 8015660:	2020      	movs	r0, #32
 8015662:	4770      	bx	lr

08015664 <__lo0bits>:
 8015664:	6803      	ldr	r3, [r0, #0]
 8015666:	0001      	movs	r1, r0
 8015668:	2207      	movs	r2, #7
 801566a:	0018      	movs	r0, r3
 801566c:	4010      	ands	r0, r2
 801566e:	4213      	tst	r3, r2
 8015670:	d00d      	beq.n	801568e <__lo0bits+0x2a>
 8015672:	3a06      	subs	r2, #6
 8015674:	2000      	movs	r0, #0
 8015676:	4213      	tst	r3, r2
 8015678:	d105      	bne.n	8015686 <__lo0bits+0x22>
 801567a:	3002      	adds	r0, #2
 801567c:	4203      	tst	r3, r0
 801567e:	d003      	beq.n	8015688 <__lo0bits+0x24>
 8015680:	40d3      	lsrs	r3, r2
 8015682:	0010      	movs	r0, r2
 8015684:	600b      	str	r3, [r1, #0]
 8015686:	4770      	bx	lr
 8015688:	089b      	lsrs	r3, r3, #2
 801568a:	600b      	str	r3, [r1, #0]
 801568c:	e7fb      	b.n	8015686 <__lo0bits+0x22>
 801568e:	b29a      	uxth	r2, r3
 8015690:	2a00      	cmp	r2, #0
 8015692:	d101      	bne.n	8015698 <__lo0bits+0x34>
 8015694:	2010      	movs	r0, #16
 8015696:	0c1b      	lsrs	r3, r3, #16
 8015698:	b2da      	uxtb	r2, r3
 801569a:	2a00      	cmp	r2, #0
 801569c:	d101      	bne.n	80156a2 <__lo0bits+0x3e>
 801569e:	3008      	adds	r0, #8
 80156a0:	0a1b      	lsrs	r3, r3, #8
 80156a2:	071a      	lsls	r2, r3, #28
 80156a4:	d101      	bne.n	80156aa <__lo0bits+0x46>
 80156a6:	3004      	adds	r0, #4
 80156a8:	091b      	lsrs	r3, r3, #4
 80156aa:	079a      	lsls	r2, r3, #30
 80156ac:	d101      	bne.n	80156b2 <__lo0bits+0x4e>
 80156ae:	3002      	adds	r0, #2
 80156b0:	089b      	lsrs	r3, r3, #2
 80156b2:	07da      	lsls	r2, r3, #31
 80156b4:	d4e9      	bmi.n	801568a <__lo0bits+0x26>
 80156b6:	3001      	adds	r0, #1
 80156b8:	085b      	lsrs	r3, r3, #1
 80156ba:	d1e6      	bne.n	801568a <__lo0bits+0x26>
 80156bc:	2020      	movs	r0, #32
 80156be:	e7e2      	b.n	8015686 <__lo0bits+0x22>

080156c0 <__i2b>:
 80156c0:	b510      	push	{r4, lr}
 80156c2:	000c      	movs	r4, r1
 80156c4:	2101      	movs	r1, #1
 80156c6:	f7ff fef1 	bl	80154ac <_Balloc>
 80156ca:	2800      	cmp	r0, #0
 80156cc:	d107      	bne.n	80156de <__i2b+0x1e>
 80156ce:	2146      	movs	r1, #70	; 0x46
 80156d0:	4c05      	ldr	r4, [pc, #20]	; (80156e8 <__i2b+0x28>)
 80156d2:	0002      	movs	r2, r0
 80156d4:	4b05      	ldr	r3, [pc, #20]	; (80156ec <__i2b+0x2c>)
 80156d6:	0020      	movs	r0, r4
 80156d8:	31ff      	adds	r1, #255	; 0xff
 80156da:	f001 ff53 	bl	8017584 <__assert_func>
 80156de:	2301      	movs	r3, #1
 80156e0:	6144      	str	r4, [r0, #20]
 80156e2:	6103      	str	r3, [r0, #16]
 80156e4:	bd10      	pop	{r4, pc}
 80156e6:	46c0      	nop			; (mov r8, r8)
 80156e8:	0801c7a2 	.word	0x0801c7a2
 80156ec:	0801c731 	.word	0x0801c731

080156f0 <__multiply>:
 80156f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156f2:	0015      	movs	r5, r2
 80156f4:	690a      	ldr	r2, [r1, #16]
 80156f6:	692b      	ldr	r3, [r5, #16]
 80156f8:	000c      	movs	r4, r1
 80156fa:	b08b      	sub	sp, #44	; 0x2c
 80156fc:	429a      	cmp	r2, r3
 80156fe:	da01      	bge.n	8015704 <__multiply+0x14>
 8015700:	002c      	movs	r4, r5
 8015702:	000d      	movs	r5, r1
 8015704:	6927      	ldr	r7, [r4, #16]
 8015706:	692e      	ldr	r6, [r5, #16]
 8015708:	6861      	ldr	r1, [r4, #4]
 801570a:	19bb      	adds	r3, r7, r6
 801570c:	9303      	str	r3, [sp, #12]
 801570e:	68a3      	ldr	r3, [r4, #8]
 8015710:	19ba      	adds	r2, r7, r6
 8015712:	4293      	cmp	r3, r2
 8015714:	da00      	bge.n	8015718 <__multiply+0x28>
 8015716:	3101      	adds	r1, #1
 8015718:	f7ff fec8 	bl	80154ac <_Balloc>
 801571c:	9002      	str	r0, [sp, #8]
 801571e:	2800      	cmp	r0, #0
 8015720:	d106      	bne.n	8015730 <__multiply+0x40>
 8015722:	21b1      	movs	r1, #177	; 0xb1
 8015724:	4b48      	ldr	r3, [pc, #288]	; (8015848 <__multiply+0x158>)
 8015726:	4849      	ldr	r0, [pc, #292]	; (801584c <__multiply+0x15c>)
 8015728:	9a02      	ldr	r2, [sp, #8]
 801572a:	0049      	lsls	r1, r1, #1
 801572c:	f001 ff2a 	bl	8017584 <__assert_func>
 8015730:	9b02      	ldr	r3, [sp, #8]
 8015732:	2200      	movs	r2, #0
 8015734:	3314      	adds	r3, #20
 8015736:	469c      	mov	ip, r3
 8015738:	19bb      	adds	r3, r7, r6
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	4463      	add	r3, ip
 801573e:	9304      	str	r3, [sp, #16]
 8015740:	4663      	mov	r3, ip
 8015742:	9904      	ldr	r1, [sp, #16]
 8015744:	428b      	cmp	r3, r1
 8015746:	d32a      	bcc.n	801579e <__multiply+0xae>
 8015748:	0023      	movs	r3, r4
 801574a:	00bf      	lsls	r7, r7, #2
 801574c:	3314      	adds	r3, #20
 801574e:	3514      	adds	r5, #20
 8015750:	9308      	str	r3, [sp, #32]
 8015752:	00b6      	lsls	r6, r6, #2
 8015754:	19db      	adds	r3, r3, r7
 8015756:	9305      	str	r3, [sp, #20]
 8015758:	19ab      	adds	r3, r5, r6
 801575a:	9309      	str	r3, [sp, #36]	; 0x24
 801575c:	2304      	movs	r3, #4
 801575e:	9306      	str	r3, [sp, #24]
 8015760:	0023      	movs	r3, r4
 8015762:	9a05      	ldr	r2, [sp, #20]
 8015764:	3315      	adds	r3, #21
 8015766:	9501      	str	r5, [sp, #4]
 8015768:	429a      	cmp	r2, r3
 801576a:	d305      	bcc.n	8015778 <__multiply+0x88>
 801576c:	1b13      	subs	r3, r2, r4
 801576e:	3b15      	subs	r3, #21
 8015770:	089b      	lsrs	r3, r3, #2
 8015772:	3301      	adds	r3, #1
 8015774:	009b      	lsls	r3, r3, #2
 8015776:	9306      	str	r3, [sp, #24]
 8015778:	9b01      	ldr	r3, [sp, #4]
 801577a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801577c:	4293      	cmp	r3, r2
 801577e:	d310      	bcc.n	80157a2 <__multiply+0xb2>
 8015780:	9b03      	ldr	r3, [sp, #12]
 8015782:	2b00      	cmp	r3, #0
 8015784:	dd05      	ble.n	8015792 <__multiply+0xa2>
 8015786:	9b04      	ldr	r3, [sp, #16]
 8015788:	3b04      	subs	r3, #4
 801578a:	9304      	str	r3, [sp, #16]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d056      	beq.n	8015840 <__multiply+0x150>
 8015792:	9b02      	ldr	r3, [sp, #8]
 8015794:	9a03      	ldr	r2, [sp, #12]
 8015796:	0018      	movs	r0, r3
 8015798:	611a      	str	r2, [r3, #16]
 801579a:	b00b      	add	sp, #44	; 0x2c
 801579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801579e:	c304      	stmia	r3!, {r2}
 80157a0:	e7cf      	b.n	8015742 <__multiply+0x52>
 80157a2:	9b01      	ldr	r3, [sp, #4]
 80157a4:	6818      	ldr	r0, [r3, #0]
 80157a6:	b280      	uxth	r0, r0
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d01e      	beq.n	80157ea <__multiply+0xfa>
 80157ac:	4667      	mov	r7, ip
 80157ae:	2500      	movs	r5, #0
 80157b0:	9e08      	ldr	r6, [sp, #32]
 80157b2:	ce02      	ldmia	r6!, {r1}
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	9307      	str	r3, [sp, #28]
 80157b8:	b28b      	uxth	r3, r1
 80157ba:	4343      	muls	r3, r0
 80157bc:	001a      	movs	r2, r3
 80157be:	466b      	mov	r3, sp
 80157c0:	8b9b      	ldrh	r3, [r3, #28]
 80157c2:	18d3      	adds	r3, r2, r3
 80157c4:	195b      	adds	r3, r3, r5
 80157c6:	0c0d      	lsrs	r5, r1, #16
 80157c8:	4345      	muls	r5, r0
 80157ca:	9a07      	ldr	r2, [sp, #28]
 80157cc:	0c11      	lsrs	r1, r2, #16
 80157ce:	1869      	adds	r1, r5, r1
 80157d0:	0c1a      	lsrs	r2, r3, #16
 80157d2:	188a      	adds	r2, r1, r2
 80157d4:	b29b      	uxth	r3, r3
 80157d6:	0c15      	lsrs	r5, r2, #16
 80157d8:	0412      	lsls	r2, r2, #16
 80157da:	431a      	orrs	r2, r3
 80157dc:	9b05      	ldr	r3, [sp, #20]
 80157de:	c704      	stmia	r7!, {r2}
 80157e0:	42b3      	cmp	r3, r6
 80157e2:	d8e6      	bhi.n	80157b2 <__multiply+0xc2>
 80157e4:	4663      	mov	r3, ip
 80157e6:	9a06      	ldr	r2, [sp, #24]
 80157e8:	509d      	str	r5, [r3, r2]
 80157ea:	9b01      	ldr	r3, [sp, #4]
 80157ec:	6818      	ldr	r0, [r3, #0]
 80157ee:	0c00      	lsrs	r0, r0, #16
 80157f0:	d020      	beq.n	8015834 <__multiply+0x144>
 80157f2:	4663      	mov	r3, ip
 80157f4:	0025      	movs	r5, r4
 80157f6:	4661      	mov	r1, ip
 80157f8:	2700      	movs	r7, #0
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	3514      	adds	r5, #20
 80157fe:	682a      	ldr	r2, [r5, #0]
 8015800:	680e      	ldr	r6, [r1, #0]
 8015802:	b292      	uxth	r2, r2
 8015804:	4342      	muls	r2, r0
 8015806:	0c36      	lsrs	r6, r6, #16
 8015808:	1992      	adds	r2, r2, r6
 801580a:	19d2      	adds	r2, r2, r7
 801580c:	0416      	lsls	r6, r2, #16
 801580e:	b29b      	uxth	r3, r3
 8015810:	431e      	orrs	r6, r3
 8015812:	600e      	str	r6, [r1, #0]
 8015814:	cd40      	ldmia	r5!, {r6}
 8015816:	684b      	ldr	r3, [r1, #4]
 8015818:	0c36      	lsrs	r6, r6, #16
 801581a:	4346      	muls	r6, r0
 801581c:	b29b      	uxth	r3, r3
 801581e:	0c12      	lsrs	r2, r2, #16
 8015820:	18f3      	adds	r3, r6, r3
 8015822:	189b      	adds	r3, r3, r2
 8015824:	9a05      	ldr	r2, [sp, #20]
 8015826:	0c1f      	lsrs	r7, r3, #16
 8015828:	3104      	adds	r1, #4
 801582a:	42aa      	cmp	r2, r5
 801582c:	d8e7      	bhi.n	80157fe <__multiply+0x10e>
 801582e:	4662      	mov	r2, ip
 8015830:	9906      	ldr	r1, [sp, #24]
 8015832:	5053      	str	r3, [r2, r1]
 8015834:	9b01      	ldr	r3, [sp, #4]
 8015836:	3304      	adds	r3, #4
 8015838:	9301      	str	r3, [sp, #4]
 801583a:	2304      	movs	r3, #4
 801583c:	449c      	add	ip, r3
 801583e:	e79b      	b.n	8015778 <__multiply+0x88>
 8015840:	9b03      	ldr	r3, [sp, #12]
 8015842:	3b01      	subs	r3, #1
 8015844:	9303      	str	r3, [sp, #12]
 8015846:	e79b      	b.n	8015780 <__multiply+0x90>
 8015848:	0801c731 	.word	0x0801c731
 801584c:	0801c7a2 	.word	0x0801c7a2

08015850 <__pow5mult>:
 8015850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015852:	2303      	movs	r3, #3
 8015854:	0015      	movs	r5, r2
 8015856:	0007      	movs	r7, r0
 8015858:	000e      	movs	r6, r1
 801585a:	401a      	ands	r2, r3
 801585c:	421d      	tst	r5, r3
 801585e:	d008      	beq.n	8015872 <__pow5mult+0x22>
 8015860:	491a      	ldr	r1, [pc, #104]	; (80158cc <__pow5mult+0x7c>)
 8015862:	3a01      	subs	r2, #1
 8015864:	0092      	lsls	r2, r2, #2
 8015866:	5852      	ldr	r2, [r2, r1]
 8015868:	2300      	movs	r3, #0
 801586a:	0031      	movs	r1, r6
 801586c:	f7ff fe50 	bl	8015510 <__multadd>
 8015870:	0006      	movs	r6, r0
 8015872:	10ad      	asrs	r5, r5, #2
 8015874:	d027      	beq.n	80158c6 <__pow5mult+0x76>
 8015876:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8015878:	2c00      	cmp	r4, #0
 801587a:	d107      	bne.n	801588c <__pow5mult+0x3c>
 801587c:	0038      	movs	r0, r7
 801587e:	4914      	ldr	r1, [pc, #80]	; (80158d0 <__pow5mult+0x80>)
 8015880:	f7ff ff1e 	bl	80156c0 <__i2b>
 8015884:	2300      	movs	r3, #0
 8015886:	0004      	movs	r4, r0
 8015888:	6438      	str	r0, [r7, #64]	; 0x40
 801588a:	6003      	str	r3, [r0, #0]
 801588c:	2301      	movs	r3, #1
 801588e:	421d      	tst	r5, r3
 8015890:	d00a      	beq.n	80158a8 <__pow5mult+0x58>
 8015892:	0031      	movs	r1, r6
 8015894:	0022      	movs	r2, r4
 8015896:	0038      	movs	r0, r7
 8015898:	f7ff ff2a 	bl	80156f0 <__multiply>
 801589c:	0031      	movs	r1, r6
 801589e:	9001      	str	r0, [sp, #4]
 80158a0:	0038      	movs	r0, r7
 80158a2:	f7ff fe2b 	bl	80154fc <_Bfree>
 80158a6:	9e01      	ldr	r6, [sp, #4]
 80158a8:	106d      	asrs	r5, r5, #1
 80158aa:	d00c      	beq.n	80158c6 <__pow5mult+0x76>
 80158ac:	6820      	ldr	r0, [r4, #0]
 80158ae:	2800      	cmp	r0, #0
 80158b0:	d107      	bne.n	80158c2 <__pow5mult+0x72>
 80158b2:	0022      	movs	r2, r4
 80158b4:	0021      	movs	r1, r4
 80158b6:	0038      	movs	r0, r7
 80158b8:	f7ff ff1a 	bl	80156f0 <__multiply>
 80158bc:	2300      	movs	r3, #0
 80158be:	6020      	str	r0, [r4, #0]
 80158c0:	6003      	str	r3, [r0, #0]
 80158c2:	0004      	movs	r4, r0
 80158c4:	e7e2      	b.n	801588c <__pow5mult+0x3c>
 80158c6:	0030      	movs	r0, r6
 80158c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80158ca:	46c0      	nop			; (mov r8, r8)
 80158cc:	0801c8f0 	.word	0x0801c8f0
 80158d0:	00000271 	.word	0x00000271

080158d4 <__lshift>:
 80158d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158d6:	000c      	movs	r4, r1
 80158d8:	0017      	movs	r7, r2
 80158da:	6923      	ldr	r3, [r4, #16]
 80158dc:	1155      	asrs	r5, r2, #5
 80158de:	b087      	sub	sp, #28
 80158e0:	18eb      	adds	r3, r5, r3
 80158e2:	9302      	str	r3, [sp, #8]
 80158e4:	3301      	adds	r3, #1
 80158e6:	9301      	str	r3, [sp, #4]
 80158e8:	6849      	ldr	r1, [r1, #4]
 80158ea:	68a3      	ldr	r3, [r4, #8]
 80158ec:	9004      	str	r0, [sp, #16]
 80158ee:	9a01      	ldr	r2, [sp, #4]
 80158f0:	4293      	cmp	r3, r2
 80158f2:	db10      	blt.n	8015916 <__lshift+0x42>
 80158f4:	9804      	ldr	r0, [sp, #16]
 80158f6:	f7ff fdd9 	bl	80154ac <_Balloc>
 80158fa:	2300      	movs	r3, #0
 80158fc:	0002      	movs	r2, r0
 80158fe:	0006      	movs	r6, r0
 8015900:	0019      	movs	r1, r3
 8015902:	3214      	adds	r2, #20
 8015904:	4298      	cmp	r0, r3
 8015906:	d10c      	bne.n	8015922 <__lshift+0x4e>
 8015908:	31df      	adds	r1, #223	; 0xdf
 801590a:	0032      	movs	r2, r6
 801590c:	4b26      	ldr	r3, [pc, #152]	; (80159a8 <__lshift+0xd4>)
 801590e:	4827      	ldr	r0, [pc, #156]	; (80159ac <__lshift+0xd8>)
 8015910:	31ff      	adds	r1, #255	; 0xff
 8015912:	f001 fe37 	bl	8017584 <__assert_func>
 8015916:	3101      	adds	r1, #1
 8015918:	005b      	lsls	r3, r3, #1
 801591a:	e7e8      	b.n	80158ee <__lshift+0x1a>
 801591c:	0098      	lsls	r0, r3, #2
 801591e:	5011      	str	r1, [r2, r0]
 8015920:	3301      	adds	r3, #1
 8015922:	42ab      	cmp	r3, r5
 8015924:	dbfa      	blt.n	801591c <__lshift+0x48>
 8015926:	43eb      	mvns	r3, r5
 8015928:	17db      	asrs	r3, r3, #31
 801592a:	401d      	ands	r5, r3
 801592c:	211f      	movs	r1, #31
 801592e:	0023      	movs	r3, r4
 8015930:	0038      	movs	r0, r7
 8015932:	00ad      	lsls	r5, r5, #2
 8015934:	1955      	adds	r5, r2, r5
 8015936:	6922      	ldr	r2, [r4, #16]
 8015938:	3314      	adds	r3, #20
 801593a:	0092      	lsls	r2, r2, #2
 801593c:	4008      	ands	r0, r1
 801593e:	4684      	mov	ip, r0
 8015940:	189a      	adds	r2, r3, r2
 8015942:	420f      	tst	r7, r1
 8015944:	d02a      	beq.n	801599c <__lshift+0xc8>
 8015946:	3101      	adds	r1, #1
 8015948:	1a09      	subs	r1, r1, r0
 801594a:	9105      	str	r1, [sp, #20]
 801594c:	2100      	movs	r1, #0
 801594e:	9503      	str	r5, [sp, #12]
 8015950:	4667      	mov	r7, ip
 8015952:	6818      	ldr	r0, [r3, #0]
 8015954:	40b8      	lsls	r0, r7
 8015956:	4308      	orrs	r0, r1
 8015958:	9903      	ldr	r1, [sp, #12]
 801595a:	c101      	stmia	r1!, {r0}
 801595c:	9103      	str	r1, [sp, #12]
 801595e:	9805      	ldr	r0, [sp, #20]
 8015960:	cb02      	ldmia	r3!, {r1}
 8015962:	40c1      	lsrs	r1, r0
 8015964:	429a      	cmp	r2, r3
 8015966:	d8f3      	bhi.n	8015950 <__lshift+0x7c>
 8015968:	0020      	movs	r0, r4
 801596a:	3015      	adds	r0, #21
 801596c:	2304      	movs	r3, #4
 801596e:	4282      	cmp	r2, r0
 8015970:	d304      	bcc.n	801597c <__lshift+0xa8>
 8015972:	1b13      	subs	r3, r2, r4
 8015974:	3b15      	subs	r3, #21
 8015976:	089b      	lsrs	r3, r3, #2
 8015978:	3301      	adds	r3, #1
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	50e9      	str	r1, [r5, r3]
 801597e:	2900      	cmp	r1, #0
 8015980:	d002      	beq.n	8015988 <__lshift+0xb4>
 8015982:	9b02      	ldr	r3, [sp, #8]
 8015984:	3302      	adds	r3, #2
 8015986:	9301      	str	r3, [sp, #4]
 8015988:	9b01      	ldr	r3, [sp, #4]
 801598a:	9804      	ldr	r0, [sp, #16]
 801598c:	3b01      	subs	r3, #1
 801598e:	0021      	movs	r1, r4
 8015990:	6133      	str	r3, [r6, #16]
 8015992:	f7ff fdb3 	bl	80154fc <_Bfree>
 8015996:	0030      	movs	r0, r6
 8015998:	b007      	add	sp, #28
 801599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801599c:	cb02      	ldmia	r3!, {r1}
 801599e:	c502      	stmia	r5!, {r1}
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d8fb      	bhi.n	801599c <__lshift+0xc8>
 80159a4:	e7f0      	b.n	8015988 <__lshift+0xb4>
 80159a6:	46c0      	nop			; (mov r8, r8)
 80159a8:	0801c731 	.word	0x0801c731
 80159ac:	0801c7a2 	.word	0x0801c7a2

080159b0 <__mcmp>:
 80159b0:	b530      	push	{r4, r5, lr}
 80159b2:	690b      	ldr	r3, [r1, #16]
 80159b4:	6904      	ldr	r4, [r0, #16]
 80159b6:	0002      	movs	r2, r0
 80159b8:	1ae0      	subs	r0, r4, r3
 80159ba:	429c      	cmp	r4, r3
 80159bc:	d10e      	bne.n	80159dc <__mcmp+0x2c>
 80159be:	3214      	adds	r2, #20
 80159c0:	009b      	lsls	r3, r3, #2
 80159c2:	3114      	adds	r1, #20
 80159c4:	0014      	movs	r4, r2
 80159c6:	18c9      	adds	r1, r1, r3
 80159c8:	18d2      	adds	r2, r2, r3
 80159ca:	3a04      	subs	r2, #4
 80159cc:	3904      	subs	r1, #4
 80159ce:	6815      	ldr	r5, [r2, #0]
 80159d0:	680b      	ldr	r3, [r1, #0]
 80159d2:	429d      	cmp	r5, r3
 80159d4:	d003      	beq.n	80159de <__mcmp+0x2e>
 80159d6:	2001      	movs	r0, #1
 80159d8:	429d      	cmp	r5, r3
 80159da:	d303      	bcc.n	80159e4 <__mcmp+0x34>
 80159dc:	bd30      	pop	{r4, r5, pc}
 80159de:	4294      	cmp	r4, r2
 80159e0:	d3f3      	bcc.n	80159ca <__mcmp+0x1a>
 80159e2:	e7fb      	b.n	80159dc <__mcmp+0x2c>
 80159e4:	4240      	negs	r0, r0
 80159e6:	e7f9      	b.n	80159dc <__mcmp+0x2c>

080159e8 <__mdiff>:
 80159e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ea:	000e      	movs	r6, r1
 80159ec:	0007      	movs	r7, r0
 80159ee:	0011      	movs	r1, r2
 80159f0:	0030      	movs	r0, r6
 80159f2:	b087      	sub	sp, #28
 80159f4:	0014      	movs	r4, r2
 80159f6:	f7ff ffdb 	bl	80159b0 <__mcmp>
 80159fa:	1e05      	subs	r5, r0, #0
 80159fc:	d110      	bne.n	8015a20 <__mdiff+0x38>
 80159fe:	0001      	movs	r1, r0
 8015a00:	0038      	movs	r0, r7
 8015a02:	f7ff fd53 	bl	80154ac <_Balloc>
 8015a06:	1e02      	subs	r2, r0, #0
 8015a08:	d104      	bne.n	8015a14 <__mdiff+0x2c>
 8015a0a:	4b3f      	ldr	r3, [pc, #252]	; (8015b08 <__mdiff+0x120>)
 8015a0c:	483f      	ldr	r0, [pc, #252]	; (8015b0c <__mdiff+0x124>)
 8015a0e:	4940      	ldr	r1, [pc, #256]	; (8015b10 <__mdiff+0x128>)
 8015a10:	f001 fdb8 	bl	8017584 <__assert_func>
 8015a14:	2301      	movs	r3, #1
 8015a16:	6145      	str	r5, [r0, #20]
 8015a18:	6103      	str	r3, [r0, #16]
 8015a1a:	0010      	movs	r0, r2
 8015a1c:	b007      	add	sp, #28
 8015a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a20:	2301      	movs	r3, #1
 8015a22:	9301      	str	r3, [sp, #4]
 8015a24:	2800      	cmp	r0, #0
 8015a26:	db04      	blt.n	8015a32 <__mdiff+0x4a>
 8015a28:	0023      	movs	r3, r4
 8015a2a:	0034      	movs	r4, r6
 8015a2c:	001e      	movs	r6, r3
 8015a2e:	2300      	movs	r3, #0
 8015a30:	9301      	str	r3, [sp, #4]
 8015a32:	0038      	movs	r0, r7
 8015a34:	6861      	ldr	r1, [r4, #4]
 8015a36:	f7ff fd39 	bl	80154ac <_Balloc>
 8015a3a:	1e02      	subs	r2, r0, #0
 8015a3c:	d103      	bne.n	8015a46 <__mdiff+0x5e>
 8015a3e:	4b32      	ldr	r3, [pc, #200]	; (8015b08 <__mdiff+0x120>)
 8015a40:	4832      	ldr	r0, [pc, #200]	; (8015b0c <__mdiff+0x124>)
 8015a42:	4934      	ldr	r1, [pc, #208]	; (8015b14 <__mdiff+0x12c>)
 8015a44:	e7e4      	b.n	8015a10 <__mdiff+0x28>
 8015a46:	9b01      	ldr	r3, [sp, #4]
 8015a48:	2700      	movs	r7, #0
 8015a4a:	60c3      	str	r3, [r0, #12]
 8015a4c:	6920      	ldr	r0, [r4, #16]
 8015a4e:	3414      	adds	r4, #20
 8015a50:	0083      	lsls	r3, r0, #2
 8015a52:	18e3      	adds	r3, r4, r3
 8015a54:	0021      	movs	r1, r4
 8015a56:	9401      	str	r4, [sp, #4]
 8015a58:	0034      	movs	r4, r6
 8015a5a:	9302      	str	r3, [sp, #8]
 8015a5c:	6933      	ldr	r3, [r6, #16]
 8015a5e:	3414      	adds	r4, #20
 8015a60:	009b      	lsls	r3, r3, #2
 8015a62:	18e3      	adds	r3, r4, r3
 8015a64:	9303      	str	r3, [sp, #12]
 8015a66:	0013      	movs	r3, r2
 8015a68:	3314      	adds	r3, #20
 8015a6a:	469c      	mov	ip, r3
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	9104      	str	r1, [sp, #16]
 8015a70:	9b04      	ldr	r3, [sp, #16]
 8015a72:	cc02      	ldmia	r4!, {r1}
 8015a74:	cb20      	ldmia	r3!, {r5}
 8015a76:	9304      	str	r3, [sp, #16]
 8015a78:	b2ab      	uxth	r3, r5
 8015a7a:	19df      	adds	r7, r3, r7
 8015a7c:	b28b      	uxth	r3, r1
 8015a7e:	1afb      	subs	r3, r7, r3
 8015a80:	0c09      	lsrs	r1, r1, #16
 8015a82:	0c2d      	lsrs	r5, r5, #16
 8015a84:	1a6d      	subs	r5, r5, r1
 8015a86:	1419      	asrs	r1, r3, #16
 8015a88:	1869      	adds	r1, r5, r1
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	140f      	asrs	r7, r1, #16
 8015a8e:	0409      	lsls	r1, r1, #16
 8015a90:	4319      	orrs	r1, r3
 8015a92:	4663      	mov	r3, ip
 8015a94:	c302      	stmia	r3!, {r1}
 8015a96:	469c      	mov	ip, r3
 8015a98:	9b03      	ldr	r3, [sp, #12]
 8015a9a:	42a3      	cmp	r3, r4
 8015a9c:	d8e8      	bhi.n	8015a70 <__mdiff+0x88>
 8015a9e:	0031      	movs	r1, r6
 8015aa0:	9c03      	ldr	r4, [sp, #12]
 8015aa2:	3115      	adds	r1, #21
 8015aa4:	2304      	movs	r3, #4
 8015aa6:	428c      	cmp	r4, r1
 8015aa8:	d304      	bcc.n	8015ab4 <__mdiff+0xcc>
 8015aaa:	1ba3      	subs	r3, r4, r6
 8015aac:	3b15      	subs	r3, #21
 8015aae:	089b      	lsrs	r3, r3, #2
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	9901      	ldr	r1, [sp, #4]
 8015ab6:	18cd      	adds	r5, r1, r3
 8015ab8:	9905      	ldr	r1, [sp, #20]
 8015aba:	002e      	movs	r6, r5
 8015abc:	18cb      	adds	r3, r1, r3
 8015abe:	469c      	mov	ip, r3
 8015ac0:	9902      	ldr	r1, [sp, #8]
 8015ac2:	428e      	cmp	r6, r1
 8015ac4:	d310      	bcc.n	8015ae8 <__mdiff+0x100>
 8015ac6:	9e02      	ldr	r6, [sp, #8]
 8015ac8:	1ee9      	subs	r1, r5, #3
 8015aca:	2400      	movs	r4, #0
 8015acc:	428e      	cmp	r6, r1
 8015ace:	d304      	bcc.n	8015ada <__mdiff+0xf2>
 8015ad0:	0031      	movs	r1, r6
 8015ad2:	3103      	adds	r1, #3
 8015ad4:	1b49      	subs	r1, r1, r5
 8015ad6:	0889      	lsrs	r1, r1, #2
 8015ad8:	008c      	lsls	r4, r1, #2
 8015ada:	191b      	adds	r3, r3, r4
 8015adc:	3b04      	subs	r3, #4
 8015ade:	6819      	ldr	r1, [r3, #0]
 8015ae0:	2900      	cmp	r1, #0
 8015ae2:	d00f      	beq.n	8015b04 <__mdiff+0x11c>
 8015ae4:	6110      	str	r0, [r2, #16]
 8015ae6:	e798      	b.n	8015a1a <__mdiff+0x32>
 8015ae8:	ce02      	ldmia	r6!, {r1}
 8015aea:	b28c      	uxth	r4, r1
 8015aec:	19e4      	adds	r4, r4, r7
 8015aee:	0c0f      	lsrs	r7, r1, #16
 8015af0:	1421      	asrs	r1, r4, #16
 8015af2:	1879      	adds	r1, r7, r1
 8015af4:	b2a4      	uxth	r4, r4
 8015af6:	140f      	asrs	r7, r1, #16
 8015af8:	0409      	lsls	r1, r1, #16
 8015afa:	4321      	orrs	r1, r4
 8015afc:	4664      	mov	r4, ip
 8015afe:	c402      	stmia	r4!, {r1}
 8015b00:	46a4      	mov	ip, r4
 8015b02:	e7dd      	b.n	8015ac0 <__mdiff+0xd8>
 8015b04:	3801      	subs	r0, #1
 8015b06:	e7e9      	b.n	8015adc <__mdiff+0xf4>
 8015b08:	0801c731 	.word	0x0801c731
 8015b0c:	0801c7a2 	.word	0x0801c7a2
 8015b10:	00000237 	.word	0x00000237
 8015b14:	00000245 	.word	0x00000245

08015b18 <__ulp>:
 8015b18:	2000      	movs	r0, #0
 8015b1a:	4b0b      	ldr	r3, [pc, #44]	; (8015b48 <__ulp+0x30>)
 8015b1c:	4019      	ands	r1, r3
 8015b1e:	4b0b      	ldr	r3, [pc, #44]	; (8015b4c <__ulp+0x34>)
 8015b20:	18c9      	adds	r1, r1, r3
 8015b22:	4281      	cmp	r1, r0
 8015b24:	dc06      	bgt.n	8015b34 <__ulp+0x1c>
 8015b26:	4249      	negs	r1, r1
 8015b28:	150b      	asrs	r3, r1, #20
 8015b2a:	2b13      	cmp	r3, #19
 8015b2c:	dc03      	bgt.n	8015b36 <__ulp+0x1e>
 8015b2e:	2180      	movs	r1, #128	; 0x80
 8015b30:	0309      	lsls	r1, r1, #12
 8015b32:	4119      	asrs	r1, r3
 8015b34:	4770      	bx	lr
 8015b36:	3b14      	subs	r3, #20
 8015b38:	2001      	movs	r0, #1
 8015b3a:	2b1e      	cmp	r3, #30
 8015b3c:	dc02      	bgt.n	8015b44 <__ulp+0x2c>
 8015b3e:	2080      	movs	r0, #128	; 0x80
 8015b40:	0600      	lsls	r0, r0, #24
 8015b42:	40d8      	lsrs	r0, r3
 8015b44:	2100      	movs	r1, #0
 8015b46:	e7f5      	b.n	8015b34 <__ulp+0x1c>
 8015b48:	7ff00000 	.word	0x7ff00000
 8015b4c:	fcc00000 	.word	0xfcc00000

08015b50 <__b2d>:
 8015b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b52:	0006      	movs	r6, r0
 8015b54:	6903      	ldr	r3, [r0, #16]
 8015b56:	3614      	adds	r6, #20
 8015b58:	009b      	lsls	r3, r3, #2
 8015b5a:	18f3      	adds	r3, r6, r3
 8015b5c:	1f1d      	subs	r5, r3, #4
 8015b5e:	682c      	ldr	r4, [r5, #0]
 8015b60:	000f      	movs	r7, r1
 8015b62:	0020      	movs	r0, r4
 8015b64:	9301      	str	r3, [sp, #4]
 8015b66:	f7ff fd63 	bl	8015630 <__hi0bits>
 8015b6a:	2220      	movs	r2, #32
 8015b6c:	1a12      	subs	r2, r2, r0
 8015b6e:	603a      	str	r2, [r7, #0]
 8015b70:	0003      	movs	r3, r0
 8015b72:	4a1c      	ldr	r2, [pc, #112]	; (8015be4 <__b2d+0x94>)
 8015b74:	280a      	cmp	r0, #10
 8015b76:	dc15      	bgt.n	8015ba4 <__b2d+0x54>
 8015b78:	210b      	movs	r1, #11
 8015b7a:	0027      	movs	r7, r4
 8015b7c:	1a09      	subs	r1, r1, r0
 8015b7e:	40cf      	lsrs	r7, r1
 8015b80:	433a      	orrs	r2, r7
 8015b82:	468c      	mov	ip, r1
 8015b84:	0011      	movs	r1, r2
 8015b86:	2200      	movs	r2, #0
 8015b88:	42ae      	cmp	r6, r5
 8015b8a:	d202      	bcs.n	8015b92 <__b2d+0x42>
 8015b8c:	9a01      	ldr	r2, [sp, #4]
 8015b8e:	3a08      	subs	r2, #8
 8015b90:	6812      	ldr	r2, [r2, #0]
 8015b92:	3315      	adds	r3, #21
 8015b94:	409c      	lsls	r4, r3
 8015b96:	4663      	mov	r3, ip
 8015b98:	0027      	movs	r7, r4
 8015b9a:	40da      	lsrs	r2, r3
 8015b9c:	4317      	orrs	r7, r2
 8015b9e:	0038      	movs	r0, r7
 8015ba0:	b003      	add	sp, #12
 8015ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ba4:	2700      	movs	r7, #0
 8015ba6:	42ae      	cmp	r6, r5
 8015ba8:	d202      	bcs.n	8015bb0 <__b2d+0x60>
 8015baa:	9d01      	ldr	r5, [sp, #4]
 8015bac:	3d08      	subs	r5, #8
 8015bae:	682f      	ldr	r7, [r5, #0]
 8015bb0:	210b      	movs	r1, #11
 8015bb2:	4249      	negs	r1, r1
 8015bb4:	468c      	mov	ip, r1
 8015bb6:	449c      	add	ip, r3
 8015bb8:	2b0b      	cmp	r3, #11
 8015bba:	d010      	beq.n	8015bde <__b2d+0x8e>
 8015bbc:	4661      	mov	r1, ip
 8015bbe:	2320      	movs	r3, #32
 8015bc0:	408c      	lsls	r4, r1
 8015bc2:	1a5b      	subs	r3, r3, r1
 8015bc4:	0039      	movs	r1, r7
 8015bc6:	40d9      	lsrs	r1, r3
 8015bc8:	430c      	orrs	r4, r1
 8015bca:	4322      	orrs	r2, r4
 8015bcc:	0011      	movs	r1, r2
 8015bce:	2200      	movs	r2, #0
 8015bd0:	42b5      	cmp	r5, r6
 8015bd2:	d901      	bls.n	8015bd8 <__b2d+0x88>
 8015bd4:	3d04      	subs	r5, #4
 8015bd6:	682a      	ldr	r2, [r5, #0]
 8015bd8:	4664      	mov	r4, ip
 8015bda:	40a7      	lsls	r7, r4
 8015bdc:	e7dd      	b.n	8015b9a <__b2d+0x4a>
 8015bde:	4322      	orrs	r2, r4
 8015be0:	0011      	movs	r1, r2
 8015be2:	e7dc      	b.n	8015b9e <__b2d+0x4e>
 8015be4:	3ff00000 	.word	0x3ff00000

08015be8 <__d2b>:
 8015be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bea:	2101      	movs	r1, #1
 8015bec:	0014      	movs	r4, r2
 8015bee:	001d      	movs	r5, r3
 8015bf0:	9f08      	ldr	r7, [sp, #32]
 8015bf2:	f7ff fc5b 	bl	80154ac <_Balloc>
 8015bf6:	1e06      	subs	r6, r0, #0
 8015bf8:	d105      	bne.n	8015c06 <__d2b+0x1e>
 8015bfa:	0032      	movs	r2, r6
 8015bfc:	4b24      	ldr	r3, [pc, #144]	; (8015c90 <__d2b+0xa8>)
 8015bfe:	4825      	ldr	r0, [pc, #148]	; (8015c94 <__d2b+0xac>)
 8015c00:	4925      	ldr	r1, [pc, #148]	; (8015c98 <__d2b+0xb0>)
 8015c02:	f001 fcbf 	bl	8017584 <__assert_func>
 8015c06:	032b      	lsls	r3, r5, #12
 8015c08:	006d      	lsls	r5, r5, #1
 8015c0a:	0b1b      	lsrs	r3, r3, #12
 8015c0c:	0d6d      	lsrs	r5, r5, #21
 8015c0e:	d125      	bne.n	8015c5c <__d2b+0x74>
 8015c10:	9301      	str	r3, [sp, #4]
 8015c12:	2c00      	cmp	r4, #0
 8015c14:	d028      	beq.n	8015c68 <__d2b+0x80>
 8015c16:	4668      	mov	r0, sp
 8015c18:	9400      	str	r4, [sp, #0]
 8015c1a:	f7ff fd23 	bl	8015664 <__lo0bits>
 8015c1e:	9b01      	ldr	r3, [sp, #4]
 8015c20:	9900      	ldr	r1, [sp, #0]
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d01e      	beq.n	8015c64 <__d2b+0x7c>
 8015c26:	2220      	movs	r2, #32
 8015c28:	001c      	movs	r4, r3
 8015c2a:	1a12      	subs	r2, r2, r0
 8015c2c:	4094      	lsls	r4, r2
 8015c2e:	0022      	movs	r2, r4
 8015c30:	40c3      	lsrs	r3, r0
 8015c32:	430a      	orrs	r2, r1
 8015c34:	6172      	str	r2, [r6, #20]
 8015c36:	9301      	str	r3, [sp, #4]
 8015c38:	9c01      	ldr	r4, [sp, #4]
 8015c3a:	61b4      	str	r4, [r6, #24]
 8015c3c:	1e63      	subs	r3, r4, #1
 8015c3e:	419c      	sbcs	r4, r3
 8015c40:	3401      	adds	r4, #1
 8015c42:	6134      	str	r4, [r6, #16]
 8015c44:	2d00      	cmp	r5, #0
 8015c46:	d017      	beq.n	8015c78 <__d2b+0x90>
 8015c48:	2435      	movs	r4, #53	; 0x35
 8015c4a:	4b14      	ldr	r3, [pc, #80]	; (8015c9c <__d2b+0xb4>)
 8015c4c:	18ed      	adds	r5, r5, r3
 8015c4e:	182d      	adds	r5, r5, r0
 8015c50:	603d      	str	r5, [r7, #0]
 8015c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c54:	1a24      	subs	r4, r4, r0
 8015c56:	601c      	str	r4, [r3, #0]
 8015c58:	0030      	movs	r0, r6
 8015c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015c5c:	2280      	movs	r2, #128	; 0x80
 8015c5e:	0352      	lsls	r2, r2, #13
 8015c60:	4313      	orrs	r3, r2
 8015c62:	e7d5      	b.n	8015c10 <__d2b+0x28>
 8015c64:	6171      	str	r1, [r6, #20]
 8015c66:	e7e7      	b.n	8015c38 <__d2b+0x50>
 8015c68:	a801      	add	r0, sp, #4
 8015c6a:	f7ff fcfb 	bl	8015664 <__lo0bits>
 8015c6e:	9b01      	ldr	r3, [sp, #4]
 8015c70:	2401      	movs	r4, #1
 8015c72:	6173      	str	r3, [r6, #20]
 8015c74:	3020      	adds	r0, #32
 8015c76:	e7e4      	b.n	8015c42 <__d2b+0x5a>
 8015c78:	4b09      	ldr	r3, [pc, #36]	; (8015ca0 <__d2b+0xb8>)
 8015c7a:	18c0      	adds	r0, r0, r3
 8015c7c:	4b09      	ldr	r3, [pc, #36]	; (8015ca4 <__d2b+0xbc>)
 8015c7e:	6038      	str	r0, [r7, #0]
 8015c80:	18e3      	adds	r3, r4, r3
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	18f3      	adds	r3, r6, r3
 8015c86:	6958      	ldr	r0, [r3, #20]
 8015c88:	f7ff fcd2 	bl	8015630 <__hi0bits>
 8015c8c:	0164      	lsls	r4, r4, #5
 8015c8e:	e7e0      	b.n	8015c52 <__d2b+0x6a>
 8015c90:	0801c731 	.word	0x0801c731
 8015c94:	0801c7a2 	.word	0x0801c7a2
 8015c98:	0000030f 	.word	0x0000030f
 8015c9c:	fffffbcd 	.word	0xfffffbcd
 8015ca0:	fffffbce 	.word	0xfffffbce
 8015ca4:	3fffffff 	.word	0x3fffffff

08015ca8 <__ratio>:
 8015ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015caa:	b087      	sub	sp, #28
 8015cac:	000f      	movs	r7, r1
 8015cae:	a904      	add	r1, sp, #16
 8015cb0:	0006      	movs	r6, r0
 8015cb2:	f7ff ff4d 	bl	8015b50 <__b2d>
 8015cb6:	9000      	str	r0, [sp, #0]
 8015cb8:	9101      	str	r1, [sp, #4]
 8015cba:	9c00      	ldr	r4, [sp, #0]
 8015cbc:	9d01      	ldr	r5, [sp, #4]
 8015cbe:	0038      	movs	r0, r7
 8015cc0:	a905      	add	r1, sp, #20
 8015cc2:	f7ff ff45 	bl	8015b50 <__b2d>
 8015cc6:	9002      	str	r0, [sp, #8]
 8015cc8:	9103      	str	r1, [sp, #12]
 8015cca:	9a02      	ldr	r2, [sp, #8]
 8015ccc:	9b03      	ldr	r3, [sp, #12]
 8015cce:	6930      	ldr	r0, [r6, #16]
 8015cd0:	6939      	ldr	r1, [r7, #16]
 8015cd2:	9e04      	ldr	r6, [sp, #16]
 8015cd4:	1a40      	subs	r0, r0, r1
 8015cd6:	9905      	ldr	r1, [sp, #20]
 8015cd8:	0140      	lsls	r0, r0, #5
 8015cda:	1a71      	subs	r1, r6, r1
 8015cdc:	1841      	adds	r1, r0, r1
 8015cde:	0508      	lsls	r0, r1, #20
 8015ce0:	2900      	cmp	r1, #0
 8015ce2:	dd07      	ble.n	8015cf4 <__ratio+0x4c>
 8015ce4:	9901      	ldr	r1, [sp, #4]
 8015ce6:	1845      	adds	r5, r0, r1
 8015ce8:	0020      	movs	r0, r4
 8015cea:	0029      	movs	r1, r5
 8015cec:	f7eb fd30 	bl	8001750 <__aeabi_ddiv>
 8015cf0:	b007      	add	sp, #28
 8015cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf4:	9903      	ldr	r1, [sp, #12]
 8015cf6:	1a0b      	subs	r3, r1, r0
 8015cf8:	e7f6      	b.n	8015ce8 <__ratio+0x40>

08015cfa <__copybits>:
 8015cfa:	b570      	push	{r4, r5, r6, lr}
 8015cfc:	0014      	movs	r4, r2
 8015cfe:	0005      	movs	r5, r0
 8015d00:	3901      	subs	r1, #1
 8015d02:	6913      	ldr	r3, [r2, #16]
 8015d04:	1149      	asrs	r1, r1, #5
 8015d06:	3101      	adds	r1, #1
 8015d08:	0089      	lsls	r1, r1, #2
 8015d0a:	3414      	adds	r4, #20
 8015d0c:	009b      	lsls	r3, r3, #2
 8015d0e:	1841      	adds	r1, r0, r1
 8015d10:	18e3      	adds	r3, r4, r3
 8015d12:	42a3      	cmp	r3, r4
 8015d14:	d80d      	bhi.n	8015d32 <__copybits+0x38>
 8015d16:	0014      	movs	r4, r2
 8015d18:	3411      	adds	r4, #17
 8015d1a:	2500      	movs	r5, #0
 8015d1c:	429c      	cmp	r4, r3
 8015d1e:	d803      	bhi.n	8015d28 <__copybits+0x2e>
 8015d20:	1a9b      	subs	r3, r3, r2
 8015d22:	3b11      	subs	r3, #17
 8015d24:	089b      	lsrs	r3, r3, #2
 8015d26:	009d      	lsls	r5, r3, #2
 8015d28:	2300      	movs	r3, #0
 8015d2a:	1940      	adds	r0, r0, r5
 8015d2c:	4281      	cmp	r1, r0
 8015d2e:	d803      	bhi.n	8015d38 <__copybits+0x3e>
 8015d30:	bd70      	pop	{r4, r5, r6, pc}
 8015d32:	cc40      	ldmia	r4!, {r6}
 8015d34:	c540      	stmia	r5!, {r6}
 8015d36:	e7ec      	b.n	8015d12 <__copybits+0x18>
 8015d38:	c008      	stmia	r0!, {r3}
 8015d3a:	e7f7      	b.n	8015d2c <__copybits+0x32>

08015d3c <__any_on>:
 8015d3c:	0002      	movs	r2, r0
 8015d3e:	6900      	ldr	r0, [r0, #16]
 8015d40:	b510      	push	{r4, lr}
 8015d42:	3214      	adds	r2, #20
 8015d44:	114b      	asrs	r3, r1, #5
 8015d46:	4298      	cmp	r0, r3
 8015d48:	db13      	blt.n	8015d72 <__any_on+0x36>
 8015d4a:	dd0c      	ble.n	8015d66 <__any_on+0x2a>
 8015d4c:	241f      	movs	r4, #31
 8015d4e:	0008      	movs	r0, r1
 8015d50:	4020      	ands	r0, r4
 8015d52:	4221      	tst	r1, r4
 8015d54:	d007      	beq.n	8015d66 <__any_on+0x2a>
 8015d56:	0099      	lsls	r1, r3, #2
 8015d58:	588c      	ldr	r4, [r1, r2]
 8015d5a:	0021      	movs	r1, r4
 8015d5c:	40c1      	lsrs	r1, r0
 8015d5e:	4081      	lsls	r1, r0
 8015d60:	2001      	movs	r0, #1
 8015d62:	428c      	cmp	r4, r1
 8015d64:	d104      	bne.n	8015d70 <__any_on+0x34>
 8015d66:	009b      	lsls	r3, r3, #2
 8015d68:	18d3      	adds	r3, r2, r3
 8015d6a:	4293      	cmp	r3, r2
 8015d6c:	d803      	bhi.n	8015d76 <__any_on+0x3a>
 8015d6e:	2000      	movs	r0, #0
 8015d70:	bd10      	pop	{r4, pc}
 8015d72:	0003      	movs	r3, r0
 8015d74:	e7f7      	b.n	8015d66 <__any_on+0x2a>
 8015d76:	3b04      	subs	r3, #4
 8015d78:	6819      	ldr	r1, [r3, #0]
 8015d7a:	2900      	cmp	r1, #0
 8015d7c:	d0f5      	beq.n	8015d6a <__any_on+0x2e>
 8015d7e:	2001      	movs	r0, #1
 8015d80:	e7f6      	b.n	8015d70 <__any_on+0x34>

08015d82 <__ascii_wctomb>:
 8015d82:	0003      	movs	r3, r0
 8015d84:	1e08      	subs	r0, r1, #0
 8015d86:	d005      	beq.n	8015d94 <__ascii_wctomb+0x12>
 8015d88:	2aff      	cmp	r2, #255	; 0xff
 8015d8a:	d904      	bls.n	8015d96 <__ascii_wctomb+0x14>
 8015d8c:	228a      	movs	r2, #138	; 0x8a
 8015d8e:	2001      	movs	r0, #1
 8015d90:	601a      	str	r2, [r3, #0]
 8015d92:	4240      	negs	r0, r0
 8015d94:	4770      	bx	lr
 8015d96:	2001      	movs	r0, #1
 8015d98:	700a      	strb	r2, [r1, #0]
 8015d9a:	e7fb      	b.n	8015d94 <__ascii_wctomb+0x12>

08015d9c <_svfprintf_r>:
 8015d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d9e:	b0d9      	sub	sp, #356	; 0x164
 8015da0:	001c      	movs	r4, r3
 8015da2:	910b      	str	r1, [sp, #44]	; 0x2c
 8015da4:	9208      	str	r2, [sp, #32]
 8015da6:	900a      	str	r0, [sp, #40]	; 0x28
 8015da8:	f001 fb56 	bl	8017458 <_localeconv_r>
 8015dac:	6803      	ldr	r3, [r0, #0]
 8015dae:	0018      	movs	r0, r3
 8015db0:	931c      	str	r3, [sp, #112]	; 0x70
 8015db2:	f7ea f9b1 	bl	8000118 <strlen>
 8015db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015db8:	9016      	str	r0, [sp, #88]	; 0x58
 8015dba:	899b      	ldrh	r3, [r3, #12]
 8015dbc:	061b      	lsls	r3, r3, #24
 8015dbe:	d517      	bpl.n	8015df0 <_svfprintf_r+0x54>
 8015dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dc2:	691b      	ldr	r3, [r3, #16]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d113      	bne.n	8015df0 <_svfprintf_r+0x54>
 8015dc8:	2140      	movs	r1, #64	; 0x40
 8015dca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015dcc:	f7fd f9aa 	bl	8013124 <_malloc_r>
 8015dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dd2:	6018      	str	r0, [r3, #0]
 8015dd4:	6118      	str	r0, [r3, #16]
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	d107      	bne.n	8015dea <_svfprintf_r+0x4e>
 8015dda:	230c      	movs	r3, #12
 8015ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dde:	6013      	str	r3, [r2, #0]
 8015de0:	3b0d      	subs	r3, #13
 8015de2:	9317      	str	r3, [sp, #92]	; 0x5c
 8015de4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015de6:	b059      	add	sp, #356	; 0x164
 8015de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dea:	2340      	movs	r3, #64	; 0x40
 8015dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015dee:	6153      	str	r3, [r2, #20]
 8015df0:	2300      	movs	r3, #0
 8015df2:	2200      	movs	r2, #0
 8015df4:	932e      	str	r3, [sp, #184]	; 0xb8
 8015df6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015df8:	930e      	str	r3, [sp, #56]	; 0x38
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	9214      	str	r2, [sp, #80]	; 0x50
 8015dfe:	9315      	str	r3, [sp, #84]	; 0x54
 8015e00:	2300      	movs	r3, #0
 8015e02:	af2f      	add	r7, sp, #188	; 0xbc
 8015e04:	972c      	str	r7, [sp, #176]	; 0xb0
 8015e06:	931f      	str	r3, [sp, #124]	; 0x7c
 8015e08:	931e      	str	r3, [sp, #120]	; 0x78
 8015e0a:	9312      	str	r3, [sp, #72]	; 0x48
 8015e0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e0e:	931d      	str	r3, [sp, #116]	; 0x74
 8015e10:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e12:	9d08      	ldr	r5, [sp, #32]
 8015e14:	782b      	ldrb	r3, [r5, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d002      	beq.n	8015e20 <_svfprintf_r+0x84>
 8015e1a:	2b25      	cmp	r3, #37	; 0x25
 8015e1c:	d000      	beq.n	8015e20 <_svfprintf_r+0x84>
 8015e1e:	e091      	b.n	8015f44 <_svfprintf_r+0x1a8>
 8015e20:	9b08      	ldr	r3, [sp, #32]
 8015e22:	1aee      	subs	r6, r5, r3
 8015e24:	429d      	cmp	r5, r3
 8015e26:	d016      	beq.n	8015e56 <_svfprintf_r+0xba>
 8015e28:	603b      	str	r3, [r7, #0]
 8015e2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015e2c:	607e      	str	r6, [r7, #4]
 8015e2e:	199b      	adds	r3, r3, r6
 8015e30:	932e      	str	r3, [sp, #184]	; 0xb8
 8015e32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e34:	3708      	adds	r7, #8
 8015e36:	3301      	adds	r3, #1
 8015e38:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e3a:	2b07      	cmp	r3, #7
 8015e3c:	dd08      	ble.n	8015e50 <_svfprintf_r+0xb4>
 8015e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e42:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e44:	f002 fa9e 	bl	8018384 <__ssprint_r>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d000      	beq.n	8015e4e <_svfprintf_r+0xb2>
 8015e4c:	e1cf      	b.n	80161ee <_svfprintf_r+0x452>
 8015e4e:	af2f      	add	r7, sp, #188	; 0xbc
 8015e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e52:	199b      	adds	r3, r3, r6
 8015e54:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e56:	782b      	ldrb	r3, [r5, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d101      	bne.n	8015e60 <_svfprintf_r+0xc4>
 8015e5c:	f001 f99e 	bl	801719c <_svfprintf_r+0x1400>
 8015e60:	221b      	movs	r2, #27
 8015e62:	2300      	movs	r3, #0
 8015e64:	a91e      	add	r1, sp, #120	; 0x78
 8015e66:	1852      	adds	r2, r2, r1
 8015e68:	7013      	strb	r3, [r2, #0]
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	001e      	movs	r6, r3
 8015e6e:	4252      	negs	r2, r2
 8015e70:	3501      	adds	r5, #1
 8015e72:	9209      	str	r2, [sp, #36]	; 0x24
 8015e74:	9318      	str	r3, [sp, #96]	; 0x60
 8015e76:	1c6b      	adds	r3, r5, #1
 8015e78:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e7a:	782b      	ldrb	r3, [r5, #0]
 8015e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015e80:	3820      	subs	r0, #32
 8015e82:	285a      	cmp	r0, #90	; 0x5a
 8015e84:	d901      	bls.n	8015e8a <_svfprintf_r+0xee>
 8015e86:	f000 fe20 	bl	8016aca <_svfprintf_r+0xd2e>
 8015e8a:	f7ea f957 	bl	800013c <__gnu_thumb1_case_uhi>
 8015e8e:	0078      	.short	0x0078
 8015e90:	061e061e 	.word	0x061e061e
 8015e94:	061e0082 	.word	0x061e0082
 8015e98:	061e061e 	.word	0x061e061e
 8015e9c:	061e005d 	.word	0x061e005d
 8015ea0:	0084061e 	.word	0x0084061e
 8015ea4:	061e008c 	.word	0x061e008c
 8015ea8:	0091008a 	.word	0x0091008a
 8015eac:	00b2061e 	.word	0x00b2061e
 8015eb0:	00b400b4 	.word	0x00b400b4
 8015eb4:	00b400b4 	.word	0x00b400b4
 8015eb8:	00b400b4 	.word	0x00b400b4
 8015ebc:	00b400b4 	.word	0x00b400b4
 8015ec0:	061e00b4 	.word	0x061e00b4
 8015ec4:	061e061e 	.word	0x061e061e
 8015ec8:	061e061e 	.word	0x061e061e
 8015ecc:	061e061e 	.word	0x061e061e
 8015ed0:	061e013b 	.word	0x061e013b
 8015ed4:	00f400e0 	.word	0x00f400e0
 8015ed8:	013b013b 	.word	0x013b013b
 8015edc:	061e013b 	.word	0x061e013b
 8015ee0:	061e061e 	.word	0x061e061e
 8015ee4:	00c7061e 	.word	0x00c7061e
 8015ee8:	061e061e 	.word	0x061e061e
 8015eec:	061e04c7 	.word	0x061e04c7
 8015ef0:	061e061e 	.word	0x061e061e
 8015ef4:	061e050a 	.word	0x061e050a
 8015ef8:	061e052a 	.word	0x061e052a
 8015efc:	055c061e 	.word	0x055c061e
 8015f00:	061e061e 	.word	0x061e061e
 8015f04:	061e061e 	.word	0x061e061e
 8015f08:	061e061e 	.word	0x061e061e
 8015f0c:	061e061e 	.word	0x061e061e
 8015f10:	061e013b 	.word	0x061e013b
 8015f14:	00f600e0 	.word	0x00f600e0
 8015f18:	013b013b 	.word	0x013b013b
 8015f1c:	00c9013b 	.word	0x00c9013b
 8015f20:	00dc00f6 	.word	0x00dc00f6
 8015f24:	00d5061e 	.word	0x00d5061e
 8015f28:	04a7061e 	.word	0x04a7061e
 8015f2c:	04fa04c9 	.word	0x04fa04c9
 8015f30:	061e00dc 	.word	0x061e00dc
 8015f34:	0080050a 	.word	0x0080050a
 8015f38:	061e052c 	.word	0x061e052c
 8015f3c:	057c061e 	.word	0x057c061e
 8015f40:	0080061e 	.word	0x0080061e
 8015f44:	3501      	adds	r5, #1
 8015f46:	e765      	b.n	8015e14 <_svfprintf_r+0x78>
 8015f48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f4a:	f001 fa85 	bl	8017458 <_localeconv_r>
 8015f4e:	6843      	ldr	r3, [r0, #4]
 8015f50:	0018      	movs	r0, r3
 8015f52:	931d      	str	r3, [sp, #116]	; 0x74
 8015f54:	f7ea f8e0 	bl	8000118 <strlen>
 8015f58:	901b      	str	r0, [sp, #108]	; 0x6c
 8015f5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f5c:	f001 fa7c 	bl	8017458 <_localeconv_r>
 8015f60:	6883      	ldr	r3, [r0, #8]
 8015f62:	9312      	str	r3, [sp, #72]	; 0x48
 8015f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d011      	beq.n	8015f8e <_svfprintf_r+0x1f2>
 8015f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d00e      	beq.n	8015f8e <_svfprintf_r+0x1f2>
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d00b      	beq.n	8015f8e <_svfprintf_r+0x1f2>
 8015f76:	2380      	movs	r3, #128	; 0x80
 8015f78:	00db      	lsls	r3, r3, #3
 8015f7a:	431e      	orrs	r6, r3
 8015f7c:	e007      	b.n	8015f8e <_svfprintf_r+0x1f2>
 8015f7e:	231b      	movs	r3, #27
 8015f80:	aa1e      	add	r2, sp, #120	; 0x78
 8015f82:	189b      	adds	r3, r3, r2
 8015f84:	781a      	ldrb	r2, [r3, #0]
 8015f86:	2a00      	cmp	r2, #0
 8015f88:	d101      	bne.n	8015f8e <_svfprintf_r+0x1f2>
 8015f8a:	3220      	adds	r2, #32
 8015f8c:	701a      	strb	r2, [r3, #0]
 8015f8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015f90:	e771      	b.n	8015e76 <_svfprintf_r+0xda>
 8015f92:	2301      	movs	r3, #1
 8015f94:	e7f1      	b.n	8015f7a <_svfprintf_r+0x1de>
 8015f96:	cc08      	ldmia	r4!, {r3}
 8015f98:	9318      	str	r3, [sp, #96]	; 0x60
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	daf7      	bge.n	8015f8e <_svfprintf_r+0x1f2>
 8015f9e:	425b      	negs	r3, r3
 8015fa0:	9318      	str	r3, [sp, #96]	; 0x60
 8015fa2:	2304      	movs	r3, #4
 8015fa4:	e7e9      	b.n	8015f7a <_svfprintf_r+0x1de>
 8015fa6:	231b      	movs	r3, #27
 8015fa8:	aa1e      	add	r2, sp, #120	; 0x78
 8015faa:	189b      	adds	r3, r3, r2
 8015fac:	222b      	movs	r2, #43	; 0x2b
 8015fae:	e7ed      	b.n	8015f8c <_svfprintf_r+0x1f0>
 8015fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015fb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015fb4:	7812      	ldrb	r2, [r2, #0]
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	920f      	str	r2, [sp, #60]	; 0x3c
 8015fba:	2a2a      	cmp	r2, #42	; 0x2a
 8015fbc:	d010      	beq.n	8015fe0 <_svfprintf_r+0x244>
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8015fc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8015fc6:	3a30      	subs	r2, #48	; 0x30
 8015fc8:	2a09      	cmp	r2, #9
 8015fca:	d900      	bls.n	8015fce <_svfprintf_r+0x232>
 8015fcc:	e757      	b.n	8015e7e <_svfprintf_r+0xe2>
 8015fce:	200a      	movs	r0, #10
 8015fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015fd2:	4341      	muls	r1, r0
 8015fd4:	188a      	adds	r2, r1, r2
 8015fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8015fd8:	781a      	ldrb	r2, [r3, #0]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	920f      	str	r2, [sp, #60]	; 0x3c
 8015fde:	e7f0      	b.n	8015fc2 <_svfprintf_r+0x226>
 8015fe0:	cc04      	ldmia	r4!, {r2}
 8015fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8015fe4:	2a00      	cmp	r2, #0
 8015fe6:	da02      	bge.n	8015fee <_svfprintf_r+0x252>
 8015fe8:	2201      	movs	r2, #1
 8015fea:	4252      	negs	r2, r2
 8015fec:	9209      	str	r2, [sp, #36]	; 0x24
 8015fee:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ff0:	e7cd      	b.n	8015f8e <_svfprintf_r+0x1f2>
 8015ff2:	2380      	movs	r3, #128	; 0x80
 8015ff4:	e7c1      	b.n	8015f7a <_svfprintf_r+0x1de>
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ffa:	9218      	str	r2, [sp, #96]	; 0x60
 8015ffc:	210a      	movs	r1, #10
 8015ffe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016000:	434a      	muls	r2, r1
 8016002:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016004:	3930      	subs	r1, #48	; 0x30
 8016006:	188a      	adds	r2, r1, r2
 8016008:	9218      	str	r2, [sp, #96]	; 0x60
 801600a:	001a      	movs	r2, r3
 801600c:	7812      	ldrb	r2, [r2, #0]
 801600e:	3301      	adds	r3, #1
 8016010:	920f      	str	r2, [sp, #60]	; 0x3c
 8016012:	3a30      	subs	r2, #48	; 0x30
 8016014:	9313      	str	r3, [sp, #76]	; 0x4c
 8016016:	2a09      	cmp	r2, #9
 8016018:	d9f0      	bls.n	8015ffc <_svfprintf_r+0x260>
 801601a:	e730      	b.n	8015e7e <_svfprintf_r+0xe2>
 801601c:	2308      	movs	r3, #8
 801601e:	e7ac      	b.n	8015f7a <_svfprintf_r+0x1de>
 8016020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	2b68      	cmp	r3, #104	; 0x68
 8016026:	d105      	bne.n	8016034 <_svfprintf_r+0x298>
 8016028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801602a:	3301      	adds	r3, #1
 801602c:	9313      	str	r3, [sp, #76]	; 0x4c
 801602e:	2380      	movs	r3, #128	; 0x80
 8016030:	009b      	lsls	r3, r3, #2
 8016032:	e7a2      	b.n	8015f7a <_svfprintf_r+0x1de>
 8016034:	2340      	movs	r3, #64	; 0x40
 8016036:	e7a0      	b.n	8015f7a <_svfprintf_r+0x1de>
 8016038:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	2b6c      	cmp	r3, #108	; 0x6c
 801603e:	d104      	bne.n	801604a <_svfprintf_r+0x2ae>
 8016040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016042:	3301      	adds	r3, #1
 8016044:	9313      	str	r3, [sp, #76]	; 0x4c
 8016046:	2320      	movs	r3, #32
 8016048:	e797      	b.n	8015f7a <_svfprintf_r+0x1de>
 801604a:	2310      	movs	r3, #16
 801604c:	e795      	b.n	8015f7a <_svfprintf_r+0x1de>
 801604e:	0021      	movs	r1, r4
 8016050:	c904      	ldmia	r1!, {r2}
 8016052:	ab3f      	add	r3, sp, #252	; 0xfc
 8016054:	910d      	str	r1, [sp, #52]	; 0x34
 8016056:	211b      	movs	r1, #27
 8016058:	701a      	strb	r2, [r3, #0]
 801605a:	2200      	movs	r2, #0
 801605c:	a81e      	add	r0, sp, #120	; 0x78
 801605e:	1809      	adds	r1, r1, r0
 8016060:	700a      	strb	r2, [r1, #0]
 8016062:	920c      	str	r2, [sp, #48]	; 0x30
 8016064:	3201      	adds	r2, #1
 8016066:	9209      	str	r2, [sp, #36]	; 0x24
 8016068:	2200      	movs	r2, #0
 801606a:	9308      	str	r3, [sp, #32]
 801606c:	0015      	movs	r5, r2
 801606e:	9219      	str	r2, [sp, #100]	; 0x64
 8016070:	9210      	str	r2, [sp, #64]	; 0x40
 8016072:	9211      	str	r2, [sp, #68]	; 0x44
 8016074:	e1f1      	b.n	801645a <_svfprintf_r+0x6be>
 8016076:	2310      	movs	r3, #16
 8016078:	431e      	orrs	r6, r3
 801607a:	06b3      	lsls	r3, r6, #26
 801607c:	d531      	bpl.n	80160e2 <_svfprintf_r+0x346>
 801607e:	2307      	movs	r3, #7
 8016080:	3407      	adds	r4, #7
 8016082:	439c      	bics	r4, r3
 8016084:	0022      	movs	r2, r4
 8016086:	ca18      	ldmia	r2!, {r3, r4}
 8016088:	9306      	str	r3, [sp, #24]
 801608a:	9407      	str	r4, [sp, #28]
 801608c:	920d      	str	r2, [sp, #52]	; 0x34
 801608e:	9a07      	ldr	r2, [sp, #28]
 8016090:	2301      	movs	r3, #1
 8016092:	2a00      	cmp	r2, #0
 8016094:	da0b      	bge.n	80160ae <_svfprintf_r+0x312>
 8016096:	9c06      	ldr	r4, [sp, #24]
 8016098:	9d07      	ldr	r5, [sp, #28]
 801609a:	2200      	movs	r2, #0
 801609c:	4261      	negs	r1, r4
 801609e:	41aa      	sbcs	r2, r5
 80160a0:	9106      	str	r1, [sp, #24]
 80160a2:	9207      	str	r2, [sp, #28]
 80160a4:	221b      	movs	r2, #27
 80160a6:	a91e      	add	r1, sp, #120	; 0x78
 80160a8:	1852      	adds	r2, r2, r1
 80160aa:	212d      	movs	r1, #45	; 0x2d
 80160ac:	7011      	strb	r1, [r2, #0]
 80160ae:	9907      	ldr	r1, [sp, #28]
 80160b0:	9a06      	ldr	r2, [sp, #24]
 80160b2:	430a      	orrs	r2, r1
 80160b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160b6:	3101      	adds	r1, #1
 80160b8:	d101      	bne.n	80160be <_svfprintf_r+0x322>
 80160ba:	f001 f87b 	bl	80171b4 <_svfprintf_r+0x1418>
 80160be:	2180      	movs	r1, #128	; 0x80
 80160c0:	0034      	movs	r4, r6
 80160c2:	438c      	bics	r4, r1
 80160c4:	2a00      	cmp	r2, #0
 80160c6:	d001      	beq.n	80160cc <_svfprintf_r+0x330>
 80160c8:	f001 f879 	bl	80171be <_svfprintf_r+0x1422>
 80160cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160ce:	2a00      	cmp	r2, #0
 80160d0:	d101      	bne.n	80160d6 <_svfprintf_r+0x33a>
 80160d2:	f000 fcef 	bl	8016ab4 <_svfprintf_r+0xd18>
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d001      	beq.n	80160de <_svfprintf_r+0x342>
 80160da:	f001 f874 	bl	80171c6 <_svfprintf_r+0x142a>
 80160de:	f000 fc79 	bl	80169d4 <_svfprintf_r+0xc38>
 80160e2:	0022      	movs	r2, r4
 80160e4:	ca08      	ldmia	r2!, {r3}
 80160e6:	920d      	str	r2, [sp, #52]	; 0x34
 80160e8:	06f2      	lsls	r2, r6, #27
 80160ea:	d503      	bpl.n	80160f4 <_svfprintf_r+0x358>
 80160ec:	9306      	str	r3, [sp, #24]
 80160ee:	17db      	asrs	r3, r3, #31
 80160f0:	9307      	str	r3, [sp, #28]
 80160f2:	e7cc      	b.n	801608e <_svfprintf_r+0x2f2>
 80160f4:	0672      	lsls	r2, r6, #25
 80160f6:	d501      	bpl.n	80160fc <_svfprintf_r+0x360>
 80160f8:	b21b      	sxth	r3, r3
 80160fa:	e7f7      	b.n	80160ec <_svfprintf_r+0x350>
 80160fc:	05b2      	lsls	r2, r6, #22
 80160fe:	d5f5      	bpl.n	80160ec <_svfprintf_r+0x350>
 8016100:	b25b      	sxtb	r3, r3
 8016102:	e7f3      	b.n	80160ec <_svfprintf_r+0x350>
 8016104:	2307      	movs	r3, #7
 8016106:	3407      	adds	r4, #7
 8016108:	439c      	bics	r4, r3
 801610a:	0022      	movs	r2, r4
 801610c:	ca18      	ldmia	r2!, {r3, r4}
 801610e:	920d      	str	r2, [sp, #52]	; 0x34
 8016110:	2201      	movs	r2, #1
 8016112:	9314      	str	r3, [sp, #80]	; 0x50
 8016114:	9415      	str	r4, [sp, #84]	; 0x54
 8016116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016118:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801611a:	005c      	lsls	r4, r3, #1
 801611c:	0864      	lsrs	r4, r4, #1
 801611e:	0028      	movs	r0, r5
 8016120:	0021      	movs	r1, r4
 8016122:	4b3e      	ldr	r3, [pc, #248]	; (801621c <_svfprintf_r+0x480>)
 8016124:	4252      	negs	r2, r2
 8016126:	f7ec fd51 	bl	8002bcc <__aeabi_dcmpun>
 801612a:	2800      	cmp	r0, #0
 801612c:	d126      	bne.n	801617c <_svfprintf_r+0x3e0>
 801612e:	2201      	movs	r2, #1
 8016130:	0028      	movs	r0, r5
 8016132:	0021      	movs	r1, r4
 8016134:	4b39      	ldr	r3, [pc, #228]	; (801621c <_svfprintf_r+0x480>)
 8016136:	4252      	negs	r2, r2
 8016138:	f7ea f9a0 	bl	800047c <__aeabi_dcmple>
 801613c:	2800      	cmp	r0, #0
 801613e:	d11d      	bne.n	801617c <_svfprintf_r+0x3e0>
 8016140:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016142:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016144:	2200      	movs	r2, #0
 8016146:	2300      	movs	r3, #0
 8016148:	f7ea f98e 	bl	8000468 <__aeabi_dcmplt>
 801614c:	2800      	cmp	r0, #0
 801614e:	d004      	beq.n	801615a <_svfprintf_r+0x3be>
 8016150:	231b      	movs	r3, #27
 8016152:	aa1e      	add	r2, sp, #120	; 0x78
 8016154:	189b      	adds	r3, r3, r2
 8016156:	222d      	movs	r2, #45	; 0x2d
 8016158:	701a      	strb	r2, [r3, #0]
 801615a:	4b31      	ldr	r3, [pc, #196]	; (8016220 <_svfprintf_r+0x484>)
 801615c:	9308      	str	r3, [sp, #32]
 801615e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016160:	2b47      	cmp	r3, #71	; 0x47
 8016162:	dd01      	ble.n	8016168 <_svfprintf_r+0x3cc>
 8016164:	4b2f      	ldr	r3, [pc, #188]	; (8016224 <_svfprintf_r+0x488>)
 8016166:	9308      	str	r3, [sp, #32]
 8016168:	2380      	movs	r3, #128	; 0x80
 801616a:	439e      	bics	r6, r3
 801616c:	2300      	movs	r3, #0
 801616e:	930c      	str	r3, [sp, #48]	; 0x30
 8016170:	3303      	adds	r3, #3
 8016172:	9309      	str	r3, [sp, #36]	; 0x24
 8016174:	2300      	movs	r3, #0
 8016176:	9319      	str	r3, [sp, #100]	; 0x64
 8016178:	f000 fc78 	bl	8016a6c <_svfprintf_r+0xcd0>
 801617c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801617e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016180:	0010      	movs	r0, r2
 8016182:	0019      	movs	r1, r3
 8016184:	f7ec fd22 	bl	8002bcc <__aeabi_dcmpun>
 8016188:	2800      	cmp	r0, #0
 801618a:	d00e      	beq.n	80161aa <_svfprintf_r+0x40e>
 801618c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801618e:	2b00      	cmp	r3, #0
 8016190:	da04      	bge.n	801619c <_svfprintf_r+0x400>
 8016192:	231b      	movs	r3, #27
 8016194:	aa1e      	add	r2, sp, #120	; 0x78
 8016196:	189b      	adds	r3, r3, r2
 8016198:	222d      	movs	r2, #45	; 0x2d
 801619a:	701a      	strb	r2, [r3, #0]
 801619c:	4b22      	ldr	r3, [pc, #136]	; (8016228 <_svfprintf_r+0x48c>)
 801619e:	9308      	str	r3, [sp, #32]
 80161a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161a2:	2b47      	cmp	r3, #71	; 0x47
 80161a4:	dde0      	ble.n	8016168 <_svfprintf_r+0x3cc>
 80161a6:	4b21      	ldr	r3, [pc, #132]	; (801622c <_svfprintf_r+0x490>)
 80161a8:	e7dd      	b.n	8016166 <_svfprintf_r+0x3ca>
 80161aa:	2320      	movs	r3, #32
 80161ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161ae:	439a      	bics	r2, r3
 80161b0:	9210      	str	r2, [sp, #64]	; 0x40
 80161b2:	2a41      	cmp	r2, #65	; 0x41
 80161b4:	d123      	bne.n	80161fe <_svfprintf_r+0x462>
 80161b6:	2230      	movs	r2, #48	; 0x30
 80161b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80161ba:	ab25      	add	r3, sp, #148	; 0x94
 80161bc:	701a      	strb	r2, [r3, #0]
 80161be:	3248      	adds	r2, #72	; 0x48
 80161c0:	2961      	cmp	r1, #97	; 0x61
 80161c2:	d000      	beq.n	80161c6 <_svfprintf_r+0x42a>
 80161c4:	3a20      	subs	r2, #32
 80161c6:	705a      	strb	r2, [r3, #1]
 80161c8:	2302      	movs	r3, #2
 80161ca:	431e      	orrs	r6, r3
 80161cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ce:	2b63      	cmp	r3, #99	; 0x63
 80161d0:	dd2e      	ble.n	8016230 <_svfprintf_r+0x494>
 80161d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161d4:	1c59      	adds	r1, r3, #1
 80161d6:	f7fc ffa5 	bl	8013124 <_malloc_r>
 80161da:	9008      	str	r0, [sp, #32]
 80161dc:	2800      	cmp	r0, #0
 80161de:	d000      	beq.n	80161e2 <_svfprintf_r+0x446>
 80161e0:	e216      	b.n	8016610 <_svfprintf_r+0x874>
 80161e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161e4:	899a      	ldrh	r2, [r3, #12]
 80161e6:	2340      	movs	r3, #64	; 0x40
 80161e8:	4313      	orrs	r3, r2
 80161ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80161ec:	8193      	strh	r3, [r2, #12]
 80161ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161f0:	899b      	ldrh	r3, [r3, #12]
 80161f2:	065b      	lsls	r3, r3, #25
 80161f4:	d400      	bmi.n	80161f8 <_svfprintf_r+0x45c>
 80161f6:	e5f5      	b.n	8015de4 <_svfprintf_r+0x48>
 80161f8:	2301      	movs	r3, #1
 80161fa:	425b      	negs	r3, r3
 80161fc:	e5f1      	b.n	8015de2 <_svfprintf_r+0x46>
 80161fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016200:	900c      	str	r0, [sp, #48]	; 0x30
 8016202:	3301      	adds	r3, #1
 8016204:	d100      	bne.n	8016208 <_svfprintf_r+0x46c>
 8016206:	e206      	b.n	8016616 <_svfprintf_r+0x87a>
 8016208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801620a:	2b47      	cmp	r3, #71	; 0x47
 801620c:	d114      	bne.n	8016238 <_svfprintf_r+0x49c>
 801620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016210:	2b00      	cmp	r3, #0
 8016212:	d111      	bne.n	8016238 <_svfprintf_r+0x49c>
 8016214:	3301      	adds	r3, #1
 8016216:	9309      	str	r3, [sp, #36]	; 0x24
 8016218:	e00e      	b.n	8016238 <_svfprintf_r+0x49c>
 801621a:	46c0      	nop			; (mov r8, r8)
 801621c:	7fefffff 	.word	0x7fefffff
 8016220:	0801c8fc 	.word	0x0801c8fc
 8016224:	0801c900 	.word	0x0801c900
 8016228:	0801c904 	.word	0x0801c904
 801622c:	0801c908 	.word	0x0801c908
 8016230:	2300      	movs	r3, #0
 8016232:	930c      	str	r3, [sp, #48]	; 0x30
 8016234:	ab3f      	add	r3, sp, #252	; 0xfc
 8016236:	9308      	str	r3, [sp, #32]
 8016238:	2380      	movs	r3, #128	; 0x80
 801623a:	005b      	lsls	r3, r3, #1
 801623c:	4333      	orrs	r3, r6
 801623e:	931a      	str	r3, [sp, #104]	; 0x68
 8016240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016242:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016244:	2b00      	cmp	r3, #0
 8016246:	db00      	blt.n	801624a <_svfprintf_r+0x4ae>
 8016248:	e1e7      	b.n	801661a <_svfprintf_r+0x87e>
 801624a:	2280      	movs	r2, #128	; 0x80
 801624c:	0612      	lsls	r2, r2, #24
 801624e:	4694      	mov	ip, r2
 8016250:	4463      	add	r3, ip
 8016252:	930e      	str	r3, [sp, #56]	; 0x38
 8016254:	232d      	movs	r3, #45	; 0x2d
 8016256:	9322      	str	r3, [sp, #136]	; 0x88
 8016258:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801625a:	2b41      	cmp	r3, #65	; 0x41
 801625c:	d000      	beq.n	8016260 <_svfprintf_r+0x4c4>
 801625e:	e1f5      	b.n	801664c <_svfprintf_r+0x8b0>
 8016260:	0028      	movs	r0, r5
 8016262:	aa26      	add	r2, sp, #152	; 0x98
 8016264:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016266:	f001 f91b 	bl	80174a0 <frexp>
 801626a:	23ff      	movs	r3, #255	; 0xff
 801626c:	2200      	movs	r2, #0
 801626e:	059b      	lsls	r3, r3, #22
 8016270:	f7eb fe68 	bl	8001f44 <__aeabi_dmul>
 8016274:	2200      	movs	r2, #0
 8016276:	2300      	movs	r3, #0
 8016278:	0004      	movs	r4, r0
 801627a:	000d      	movs	r5, r1
 801627c:	f7ea f8ee 	bl	800045c <__aeabi_dcmpeq>
 8016280:	2800      	cmp	r0, #0
 8016282:	d001      	beq.n	8016288 <_svfprintf_r+0x4ec>
 8016284:	2301      	movs	r3, #1
 8016286:	9326      	str	r3, [sp, #152]	; 0x98
 8016288:	4bda      	ldr	r3, [pc, #872]	; (80165f4 <_svfprintf_r+0x858>)
 801628a:	9319      	str	r3, [sp, #100]	; 0x64
 801628c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801628e:	2b61      	cmp	r3, #97	; 0x61
 8016290:	d001      	beq.n	8016296 <_svfprintf_r+0x4fa>
 8016292:	4bd9      	ldr	r3, [pc, #868]	; (80165f8 <_svfprintf_r+0x85c>)
 8016294:	9319      	str	r3, [sp, #100]	; 0x64
 8016296:	9b08      	ldr	r3, [sp, #32]
 8016298:	930e      	str	r3, [sp, #56]	; 0x38
 801629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801629c:	3b01      	subs	r3, #1
 801629e:	9311      	str	r3, [sp, #68]	; 0x44
 80162a0:	2200      	movs	r2, #0
 80162a2:	4bd6      	ldr	r3, [pc, #856]	; (80165fc <_svfprintf_r+0x860>)
 80162a4:	0020      	movs	r0, r4
 80162a6:	0029      	movs	r1, r5
 80162a8:	f7eb fe4c 	bl	8001f44 <__aeabi_dmul>
 80162ac:	000d      	movs	r5, r1
 80162ae:	0004      	movs	r4, r0
 80162b0:	f7ec fcaa 	bl	8002c08 <__aeabi_d2iz>
 80162b4:	9021      	str	r0, [sp, #132]	; 0x84
 80162b6:	f7ec fcdd 	bl	8002c74 <__aeabi_i2d>
 80162ba:	0002      	movs	r2, r0
 80162bc:	000b      	movs	r3, r1
 80162be:	0020      	movs	r0, r4
 80162c0:	0029      	movs	r1, r5
 80162c2:	f7ec f901 	bl	80024c8 <__aeabi_dsub>
 80162c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162c8:	000d      	movs	r5, r1
 80162ca:	001a      	movs	r2, r3
 80162cc:	3201      	adds	r2, #1
 80162ce:	9921      	ldr	r1, [sp, #132]	; 0x84
 80162d0:	920e      	str	r2, [sp, #56]	; 0x38
 80162d2:	9223      	str	r2, [sp, #140]	; 0x8c
 80162d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80162d6:	0004      	movs	r4, r0
 80162d8:	5c52      	ldrb	r2, [r2, r1]
 80162da:	701a      	strb	r2, [r3, #0]
 80162dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80162de:	9320      	str	r3, [sp, #128]	; 0x80
 80162e0:	3301      	adds	r3, #1
 80162e2:	d00a      	beq.n	80162fa <_svfprintf_r+0x55e>
 80162e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80162e6:	2200      	movs	r2, #0
 80162e8:	3b01      	subs	r3, #1
 80162ea:	9311      	str	r3, [sp, #68]	; 0x44
 80162ec:	0020      	movs	r0, r4
 80162ee:	2300      	movs	r3, #0
 80162f0:	0029      	movs	r1, r5
 80162f2:	f7ea f8b3 	bl	800045c <__aeabi_dcmpeq>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	d0d2      	beq.n	80162a0 <_svfprintf_r+0x504>
 80162fa:	2200      	movs	r2, #0
 80162fc:	0020      	movs	r0, r4
 80162fe:	0029      	movs	r1, r5
 8016300:	4bbf      	ldr	r3, [pc, #764]	; (8016600 <_svfprintf_r+0x864>)
 8016302:	f7ea f8c5 	bl	8000490 <__aeabi_dcmpgt>
 8016306:	2800      	cmp	r0, #0
 8016308:	d10c      	bne.n	8016324 <_svfprintf_r+0x588>
 801630a:	2200      	movs	r2, #0
 801630c:	0020      	movs	r0, r4
 801630e:	0029      	movs	r1, r5
 8016310:	4bbb      	ldr	r3, [pc, #748]	; (8016600 <_svfprintf_r+0x864>)
 8016312:	f7ea f8a3 	bl	800045c <__aeabi_dcmpeq>
 8016316:	2800      	cmp	r0, #0
 8016318:	d100      	bne.n	801631c <_svfprintf_r+0x580>
 801631a:	e191      	b.n	8016640 <_svfprintf_r+0x8a4>
 801631c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801631e:	07db      	lsls	r3, r3, #31
 8016320:	d400      	bmi.n	8016324 <_svfprintf_r+0x588>
 8016322:	e18d      	b.n	8016640 <_svfprintf_r+0x8a4>
 8016324:	2030      	movs	r0, #48	; 0x30
 8016326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016328:	932a      	str	r3, [sp, #168]	; 0xa8
 801632a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801632c:	7bdb      	ldrb	r3, [r3, #15]
 801632e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016330:	3a01      	subs	r2, #1
 8016332:	922a      	str	r2, [sp, #168]	; 0xa8
 8016334:	7811      	ldrb	r1, [r2, #0]
 8016336:	4299      	cmp	r1, r3
 8016338:	d100      	bne.n	801633c <_svfprintf_r+0x5a0>
 801633a:	e171      	b.n	8016620 <_svfprintf_r+0x884>
 801633c:	1c4b      	adds	r3, r1, #1
 801633e:	b2db      	uxtb	r3, r3
 8016340:	2939      	cmp	r1, #57	; 0x39
 8016342:	d101      	bne.n	8016348 <_svfprintf_r+0x5ac>
 8016344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016346:	7a9b      	ldrb	r3, [r3, #10]
 8016348:	7013      	strb	r3, [r2, #0]
 801634a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801634c:	9a08      	ldr	r2, [sp, #32]
 801634e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8016350:	1a9b      	subs	r3, r3, r2
 8016352:	930e      	str	r3, [sp, #56]	; 0x38
 8016354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016356:	2b47      	cmp	r3, #71	; 0x47
 8016358:	d000      	beq.n	801635c <_svfprintf_r+0x5c0>
 801635a:	e1c4      	b.n	80166e6 <_svfprintf_r+0x94a>
 801635c:	1ceb      	adds	r3, r5, #3
 801635e:	db03      	blt.n	8016368 <_svfprintf_r+0x5cc>
 8016360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016362:	42ab      	cmp	r3, r5
 8016364:	db00      	blt.n	8016368 <_svfprintf_r+0x5cc>
 8016366:	e1e6      	b.n	8016736 <_svfprintf_r+0x99a>
 8016368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801636a:	3b02      	subs	r3, #2
 801636c:	930f      	str	r3, [sp, #60]	; 0x3c
 801636e:	223c      	movs	r2, #60	; 0x3c
 8016370:	466b      	mov	r3, sp
 8016372:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016374:	189b      	adds	r3, r3, r2
 8016376:	1e6c      	subs	r4, r5, #1
 8016378:	3a1c      	subs	r2, #28
 801637a:	2000      	movs	r0, #0
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	9426      	str	r4, [sp, #152]	; 0x98
 8016380:	4391      	bics	r1, r2
 8016382:	2941      	cmp	r1, #65	; 0x41
 8016384:	d102      	bne.n	801638c <_svfprintf_r+0x5f0>
 8016386:	330f      	adds	r3, #15
 8016388:	b2db      	uxtb	r3, r3
 801638a:	3001      	adds	r0, #1
 801638c:	a928      	add	r1, sp, #160	; 0xa0
 801638e:	700b      	strb	r3, [r1, #0]
 8016390:	232b      	movs	r3, #43	; 0x2b
 8016392:	2c00      	cmp	r4, #0
 8016394:	da02      	bge.n	801639c <_svfprintf_r+0x600>
 8016396:	2401      	movs	r4, #1
 8016398:	3302      	adds	r3, #2
 801639a:	1b64      	subs	r4, r4, r5
 801639c:	704b      	strb	r3, [r1, #1]
 801639e:	2c09      	cmp	r4, #9
 80163a0:	dc00      	bgt.n	80163a4 <_svfprintf_r+0x608>
 80163a2:	e1ba      	b.n	801671a <_svfprintf_r+0x97e>
 80163a4:	2337      	movs	r3, #55	; 0x37
 80163a6:	250a      	movs	r5, #10
 80163a8:	aa1e      	add	r2, sp, #120	; 0x78
 80163aa:	189b      	adds	r3, r3, r2
 80163ac:	9310      	str	r3, [sp, #64]	; 0x40
 80163ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163b0:	0020      	movs	r0, r4
 80163b2:	9309      	str	r3, [sp, #36]	; 0x24
 80163b4:	0029      	movs	r1, r5
 80163b6:	3b01      	subs	r3, #1
 80163b8:	9310      	str	r3, [sp, #64]	; 0x40
 80163ba:	f7ea f839 	bl	8000430 <__aeabi_idivmod>
 80163be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163c0:	3130      	adds	r1, #48	; 0x30
 80163c2:	7019      	strb	r1, [r3, #0]
 80163c4:	0020      	movs	r0, r4
 80163c6:	0029      	movs	r1, r5
 80163c8:	9411      	str	r4, [sp, #68]	; 0x44
 80163ca:	f7e9 ff4b 	bl	8000264 <__divsi3>
 80163ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163d0:	0004      	movs	r4, r0
 80163d2:	2b63      	cmp	r3, #99	; 0x63
 80163d4:	dceb      	bgt.n	80163ae <_svfprintf_r+0x612>
 80163d6:	222a      	movs	r2, #42	; 0x2a
 80163d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163da:	a81e      	add	r0, sp, #120	; 0x78
 80163dc:	1e99      	subs	r1, r3, #2
 80163de:	1812      	adds	r2, r2, r0
 80163e0:	2037      	movs	r0, #55	; 0x37
 80163e2:	000b      	movs	r3, r1
 80163e4:	3430      	adds	r4, #48	; 0x30
 80163e6:	700c      	strb	r4, [r1, #0]
 80163e8:	ac1e      	add	r4, sp, #120	; 0x78
 80163ea:	1900      	adds	r0, r0, r4
 80163ec:	4283      	cmp	r3, r0
 80163ee:	d200      	bcs.n	80163f2 <_svfprintf_r+0x656>
 80163f0:	e18e      	b.n	8016710 <_svfprintf_r+0x974>
 80163f2:	2300      	movs	r3, #0
 80163f4:	4281      	cmp	r1, r0
 80163f6:	d804      	bhi.n	8016402 <_svfprintf_r+0x666>
 80163f8:	aa1e      	add	r2, sp, #120	; 0x78
 80163fa:	3339      	adds	r3, #57	; 0x39
 80163fc:	189b      	adds	r3, r3, r2
 80163fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016400:	1a9b      	subs	r3, r3, r2
 8016402:	222a      	movs	r2, #42	; 0x2a
 8016404:	a91e      	add	r1, sp, #120	; 0x78
 8016406:	1852      	adds	r2, r2, r1
 8016408:	18d3      	adds	r3, r2, r3
 801640a:	aa28      	add	r2, sp, #160	; 0xa0
 801640c:	1a9b      	subs	r3, r3, r2
 801640e:	931e      	str	r3, [sp, #120]	; 0x78
 8016410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016414:	4694      	mov	ip, r2
 8016416:	4463      	add	r3, ip
 8016418:	9309      	str	r3, [sp, #36]	; 0x24
 801641a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801641c:	2b01      	cmp	r3, #1
 801641e:	dc01      	bgt.n	8016424 <_svfprintf_r+0x688>
 8016420:	07f3      	lsls	r3, r6, #31
 8016422:	d504      	bpl.n	801642e <_svfprintf_r+0x692>
 8016424:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016428:	4694      	mov	ip, r2
 801642a:	4463      	add	r3, ip
 801642c:	9309      	str	r3, [sp, #36]	; 0x24
 801642e:	2280      	movs	r2, #128	; 0x80
 8016430:	4b74      	ldr	r3, [pc, #464]	; (8016604 <_svfprintf_r+0x868>)
 8016432:	0052      	lsls	r2, r2, #1
 8016434:	4033      	ands	r3, r6
 8016436:	431a      	orrs	r2, r3
 8016438:	2300      	movs	r3, #0
 801643a:	001d      	movs	r5, r3
 801643c:	921a      	str	r2, [sp, #104]	; 0x68
 801643e:	9310      	str	r3, [sp, #64]	; 0x40
 8016440:	9311      	str	r3, [sp, #68]	; 0x44
 8016442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016444:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016446:	9319      	str	r3, [sp, #100]	; 0x64
 8016448:	2b00      	cmp	r3, #0
 801644a:	d006      	beq.n	801645a <_svfprintf_r+0x6be>
 801644c:	231b      	movs	r3, #27
 801644e:	aa1e      	add	r2, sp, #120	; 0x78
 8016450:	189b      	adds	r3, r3, r2
 8016452:	222d      	movs	r2, #45	; 0x2d
 8016454:	701a      	strb	r2, [r3, #0]
 8016456:	2300      	movs	r3, #0
 8016458:	9319      	str	r3, [sp, #100]	; 0x64
 801645a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801645c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801645e:	931a      	str	r3, [sp, #104]	; 0x68
 8016460:	4293      	cmp	r3, r2
 8016462:	da00      	bge.n	8016466 <_svfprintf_r+0x6ca>
 8016464:	921a      	str	r2, [sp, #104]	; 0x68
 8016466:	231b      	movs	r3, #27
 8016468:	aa1e      	add	r2, sp, #120	; 0x78
 801646a:	189b      	adds	r3, r3, r2
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	1e5a      	subs	r2, r3, #1
 8016470:	4193      	sbcs	r3, r2
 8016472:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016474:	18d3      	adds	r3, r2, r3
 8016476:	931a      	str	r3, [sp, #104]	; 0x68
 8016478:	0032      	movs	r2, r6
 801647a:	2302      	movs	r3, #2
 801647c:	401a      	ands	r2, r3
 801647e:	9220      	str	r2, [sp, #128]	; 0x80
 8016480:	421e      	tst	r6, r3
 8016482:	d002      	beq.n	801648a <_svfprintf_r+0x6ee>
 8016484:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016486:	3302      	adds	r3, #2
 8016488:	931a      	str	r3, [sp, #104]	; 0x68
 801648a:	2384      	movs	r3, #132	; 0x84
 801648c:	0032      	movs	r2, r6
 801648e:	401a      	ands	r2, r3
 8016490:	9221      	str	r2, [sp, #132]	; 0x84
 8016492:	421e      	tst	r6, r3
 8016494:	d11f      	bne.n	80164d6 <_svfprintf_r+0x73a>
 8016496:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016498:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801649a:	1a9c      	subs	r4, r3, r2
 801649c:	2c00      	cmp	r4, #0
 801649e:	dd1a      	ble.n	80164d6 <_svfprintf_r+0x73a>
 80164a0:	0039      	movs	r1, r7
 80164a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164a4:	4858      	ldr	r0, [pc, #352]	; (8016608 <_svfprintf_r+0x86c>)
 80164a6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80164a8:	3301      	adds	r3, #1
 80164aa:	3108      	adds	r1, #8
 80164ac:	6038      	str	r0, [r7, #0]
 80164ae:	2c10      	cmp	r4, #16
 80164b0:	dd00      	ble.n	80164b4 <_svfprintf_r+0x718>
 80164b2:	e31c      	b.n	8016aee <_svfprintf_r+0xd52>
 80164b4:	607c      	str	r4, [r7, #4]
 80164b6:	18a4      	adds	r4, r4, r2
 80164b8:	000f      	movs	r7, r1
 80164ba:	942e      	str	r4, [sp, #184]	; 0xb8
 80164bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80164be:	2b07      	cmp	r3, #7
 80164c0:	dd09      	ble.n	80164d6 <_svfprintf_r+0x73a>
 80164c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80164c8:	f001 ff5c 	bl	8018384 <__ssprint_r>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d001      	beq.n	80164d4 <_svfprintf_r+0x738>
 80164d0:	f000 fe43 	bl	801715a <_svfprintf_r+0x13be>
 80164d4:	af2f      	add	r7, sp, #188	; 0xbc
 80164d6:	221b      	movs	r2, #27
 80164d8:	a91e      	add	r1, sp, #120	; 0x78
 80164da:	1852      	adds	r2, r2, r1
 80164dc:	7811      	ldrb	r1, [r2, #0]
 80164de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80164e0:	2900      	cmp	r1, #0
 80164e2:	d014      	beq.n	801650e <_svfprintf_r+0x772>
 80164e4:	603a      	str	r2, [r7, #0]
 80164e6:	2201      	movs	r2, #1
 80164e8:	189b      	adds	r3, r3, r2
 80164ea:	932e      	str	r3, [sp, #184]	; 0xb8
 80164ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164ee:	607a      	str	r2, [r7, #4]
 80164f0:	189b      	adds	r3, r3, r2
 80164f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80164f4:	3708      	adds	r7, #8
 80164f6:	2b07      	cmp	r3, #7
 80164f8:	dd09      	ble.n	801650e <_svfprintf_r+0x772>
 80164fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8016500:	f001 ff40 	bl	8018384 <__ssprint_r>
 8016504:	2800      	cmp	r0, #0
 8016506:	d001      	beq.n	801650c <_svfprintf_r+0x770>
 8016508:	f000 fe27 	bl	801715a <_svfprintf_r+0x13be>
 801650c:	af2f      	add	r7, sp, #188	; 0xbc
 801650e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016510:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016512:	2a00      	cmp	r2, #0
 8016514:	d015      	beq.n	8016542 <_svfprintf_r+0x7a6>
 8016516:	aa25      	add	r2, sp, #148	; 0x94
 8016518:	603a      	str	r2, [r7, #0]
 801651a:	2202      	movs	r2, #2
 801651c:	189b      	adds	r3, r3, r2
 801651e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016520:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016522:	607a      	str	r2, [r7, #4]
 8016524:	3301      	adds	r3, #1
 8016526:	932d      	str	r3, [sp, #180]	; 0xb4
 8016528:	3708      	adds	r7, #8
 801652a:	2b07      	cmp	r3, #7
 801652c:	dd09      	ble.n	8016542 <_svfprintf_r+0x7a6>
 801652e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016530:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016532:	aa2c      	add	r2, sp, #176	; 0xb0
 8016534:	f001 ff26 	bl	8018384 <__ssprint_r>
 8016538:	2800      	cmp	r0, #0
 801653a:	d001      	beq.n	8016540 <_svfprintf_r+0x7a4>
 801653c:	f000 fe0d 	bl	801715a <_svfprintf_r+0x13be>
 8016540:	af2f      	add	r7, sp, #188	; 0xbc
 8016542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016544:	2b80      	cmp	r3, #128	; 0x80
 8016546:	d11f      	bne.n	8016588 <_svfprintf_r+0x7ec>
 8016548:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801654a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801654c:	1a9c      	subs	r4, r3, r2
 801654e:	2c00      	cmp	r4, #0
 8016550:	dd1a      	ble.n	8016588 <_svfprintf_r+0x7ec>
 8016552:	0039      	movs	r1, r7
 8016554:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016556:	482d      	ldr	r0, [pc, #180]	; (801660c <_svfprintf_r+0x870>)
 8016558:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801655a:	3301      	adds	r3, #1
 801655c:	3108      	adds	r1, #8
 801655e:	6038      	str	r0, [r7, #0]
 8016560:	2c10      	cmp	r4, #16
 8016562:	dd00      	ble.n	8016566 <_svfprintf_r+0x7ca>
 8016564:	e2d6      	b.n	8016b14 <_svfprintf_r+0xd78>
 8016566:	607c      	str	r4, [r7, #4]
 8016568:	18a4      	adds	r4, r4, r2
 801656a:	000f      	movs	r7, r1
 801656c:	942e      	str	r4, [sp, #184]	; 0xb8
 801656e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016570:	2b07      	cmp	r3, #7
 8016572:	dd09      	ble.n	8016588 <_svfprintf_r+0x7ec>
 8016574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016576:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016578:	aa2c      	add	r2, sp, #176	; 0xb0
 801657a:	f001 ff03 	bl	8018384 <__ssprint_r>
 801657e:	2800      	cmp	r0, #0
 8016580:	d001      	beq.n	8016586 <_svfprintf_r+0x7ea>
 8016582:	f000 fdea 	bl	801715a <_svfprintf_r+0x13be>
 8016586:	af2f      	add	r7, sp, #188	; 0xbc
 8016588:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801658a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801658c:	1a9c      	subs	r4, r3, r2
 801658e:	2c00      	cmp	r4, #0
 8016590:	dd1a      	ble.n	80165c8 <_svfprintf_r+0x82c>
 8016592:	0039      	movs	r1, r7
 8016594:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016596:	481d      	ldr	r0, [pc, #116]	; (801660c <_svfprintf_r+0x870>)
 8016598:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801659a:	3301      	adds	r3, #1
 801659c:	3108      	adds	r1, #8
 801659e:	6038      	str	r0, [r7, #0]
 80165a0:	2c10      	cmp	r4, #16
 80165a2:	dd00      	ble.n	80165a6 <_svfprintf_r+0x80a>
 80165a4:	e2c9      	b.n	8016b3a <_svfprintf_r+0xd9e>
 80165a6:	18a2      	adds	r2, r4, r2
 80165a8:	607c      	str	r4, [r7, #4]
 80165aa:	922e      	str	r2, [sp, #184]	; 0xb8
 80165ac:	000f      	movs	r7, r1
 80165ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80165b0:	2b07      	cmp	r3, #7
 80165b2:	dd09      	ble.n	80165c8 <_svfprintf_r+0x82c>
 80165b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80165ba:	f001 fee3 	bl	8018384 <__ssprint_r>
 80165be:	2800      	cmp	r0, #0
 80165c0:	d001      	beq.n	80165c6 <_svfprintf_r+0x82a>
 80165c2:	f000 fdca 	bl	801715a <_svfprintf_r+0x13be>
 80165c6:	af2f      	add	r7, sp, #188	; 0xbc
 80165c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165ca:	9319      	str	r3, [sp, #100]	; 0x64
 80165cc:	05f3      	lsls	r3, r6, #23
 80165ce:	d500      	bpl.n	80165d2 <_svfprintf_r+0x836>
 80165d0:	e2ce      	b.n	8016b70 <_svfprintf_r+0xdd4>
 80165d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165d4:	9b08      	ldr	r3, [sp, #32]
 80165d6:	4694      	mov	ip, r2
 80165d8:	603b      	str	r3, [r7, #0]
 80165da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165dc:	607b      	str	r3, [r7, #4]
 80165de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80165e0:	4463      	add	r3, ip
 80165e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80165e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165e6:	3301      	adds	r3, #1
 80165e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80165ea:	2b07      	cmp	r3, #7
 80165ec:	dd00      	ble.n	80165f0 <_svfprintf_r+0x854>
 80165ee:	e3a3      	b.n	8016d38 <_svfprintf_r+0xf9c>
 80165f0:	3708      	adds	r7, #8
 80165f2:	e301      	b.n	8016bf8 <_svfprintf_r+0xe5c>
 80165f4:	0801c90c 	.word	0x0801c90c
 80165f8:	0801c91d 	.word	0x0801c91d
 80165fc:	40300000 	.word	0x40300000
 8016600:	3fe00000 	.word	0x3fe00000
 8016604:	fffffbff 	.word	0xfffffbff
 8016608:	0801c930 	.word	0x0801c930
 801660c:	0801c940 	.word	0x0801c940
 8016610:	9b08      	ldr	r3, [sp, #32]
 8016612:	930c      	str	r3, [sp, #48]	; 0x30
 8016614:	e610      	b.n	8016238 <_svfprintf_r+0x49c>
 8016616:	2306      	movs	r3, #6
 8016618:	e5fd      	b.n	8016216 <_svfprintf_r+0x47a>
 801661a:	930e      	str	r3, [sp, #56]	; 0x38
 801661c:	2300      	movs	r3, #0
 801661e:	e61a      	b.n	8016256 <_svfprintf_r+0x4ba>
 8016620:	7010      	strb	r0, [r2, #0]
 8016622:	e684      	b.n	801632e <_svfprintf_r+0x592>
 8016624:	7018      	strb	r0, [r3, #0]
 8016626:	3301      	adds	r3, #1
 8016628:	1aca      	subs	r2, r1, r3
 801662a:	d5fb      	bpl.n	8016624 <_svfprintf_r+0x888>
 801662c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801662e:	2300      	movs	r3, #0
 8016630:	3201      	adds	r2, #1
 8016632:	db01      	blt.n	8016638 <_svfprintf_r+0x89c>
 8016634:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016636:	3301      	adds	r3, #1
 8016638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801663a:	18d3      	adds	r3, r2, r3
 801663c:	9323      	str	r3, [sp, #140]	; 0x8c
 801663e:	e684      	b.n	801634a <_svfprintf_r+0x5ae>
 8016640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016642:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016644:	2030      	movs	r0, #48	; 0x30
 8016646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016648:	1851      	adds	r1, r2, r1
 801664a:	e7ed      	b.n	8016628 <_svfprintf_r+0x88c>
 801664c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801664e:	2303      	movs	r3, #3
 8016650:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016652:	2a46      	cmp	r2, #70	; 0x46
 8016654:	d006      	beq.n	8016664 <_svfprintf_r+0x8c8>
 8016656:	0014      	movs	r4, r2
 8016658:	3c45      	subs	r4, #69	; 0x45
 801665a:	4262      	negs	r2, r4
 801665c:	4154      	adcs	r4, r2
 801665e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016660:	3b01      	subs	r3, #1
 8016662:	1914      	adds	r4, r2, r4
 8016664:	aa2a      	add	r2, sp, #168	; 0xa8
 8016666:	9204      	str	r2, [sp, #16]
 8016668:	aa27      	add	r2, sp, #156	; 0x9c
 801666a:	9203      	str	r2, [sp, #12]
 801666c:	aa26      	add	r2, sp, #152	; 0x98
 801666e:	9202      	str	r2, [sp, #8]
 8016670:	9300      	str	r3, [sp, #0]
 8016672:	002a      	movs	r2, r5
 8016674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016676:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016678:	9401      	str	r4, [sp, #4]
 801667a:	f001 f87f 	bl	801777c <_dtoa_r>
 801667e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016680:	9008      	str	r0, [sp, #32]
 8016682:	2b47      	cmp	r3, #71	; 0x47
 8016684:	d103      	bne.n	801668e <_svfprintf_r+0x8f2>
 8016686:	07f3      	lsls	r3, r6, #31
 8016688:	d401      	bmi.n	801668e <_svfprintf_r+0x8f2>
 801668a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801668c:	e65e      	b.n	801634c <_svfprintf_r+0x5b0>
 801668e:	9b08      	ldr	r3, [sp, #32]
 8016690:	191b      	adds	r3, r3, r4
 8016692:	9311      	str	r3, [sp, #68]	; 0x44
 8016694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016696:	2b46      	cmp	r3, #70	; 0x46
 8016698:	d112      	bne.n	80166c0 <_svfprintf_r+0x924>
 801669a:	9b08      	ldr	r3, [sp, #32]
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	2b30      	cmp	r3, #48	; 0x30
 80166a0:	d10a      	bne.n	80166b8 <_svfprintf_r+0x91c>
 80166a2:	2200      	movs	r2, #0
 80166a4:	2300      	movs	r3, #0
 80166a6:	0028      	movs	r0, r5
 80166a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80166aa:	f7e9 fed7 	bl	800045c <__aeabi_dcmpeq>
 80166ae:	2800      	cmp	r0, #0
 80166b0:	d102      	bne.n	80166b8 <_svfprintf_r+0x91c>
 80166b2:	2301      	movs	r3, #1
 80166b4:	1b1b      	subs	r3, r3, r4
 80166b6:	9326      	str	r3, [sp, #152]	; 0x98
 80166b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80166ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80166bc:	18d3      	adds	r3, r2, r3
 80166be:	9311      	str	r3, [sp, #68]	; 0x44
 80166c0:	2200      	movs	r2, #0
 80166c2:	2300      	movs	r3, #0
 80166c4:	0028      	movs	r0, r5
 80166c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80166c8:	f7e9 fec8 	bl	800045c <__aeabi_dcmpeq>
 80166cc:	2800      	cmp	r0, #0
 80166ce:	d001      	beq.n	80166d4 <_svfprintf_r+0x938>
 80166d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166d2:	932a      	str	r3, [sp, #168]	; 0xa8
 80166d4:	2230      	movs	r2, #48	; 0x30
 80166d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80166d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80166da:	4299      	cmp	r1, r3
 80166dc:	d9d5      	bls.n	801668a <_svfprintf_r+0x8ee>
 80166de:	1c59      	adds	r1, r3, #1
 80166e0:	912a      	str	r1, [sp, #168]	; 0xa8
 80166e2:	701a      	strb	r2, [r3, #0]
 80166e4:	e7f7      	b.n	80166d6 <_svfprintf_r+0x93a>
 80166e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166e8:	2b46      	cmp	r3, #70	; 0x46
 80166ea:	d000      	beq.n	80166ee <_svfprintf_r+0x952>
 80166ec:	e63f      	b.n	801636e <_svfprintf_r+0x5d2>
 80166ee:	2201      	movs	r2, #1
 80166f0:	0033      	movs	r3, r6
 80166f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80166f4:	4013      	ands	r3, r2
 80166f6:	430b      	orrs	r3, r1
 80166f8:	2d00      	cmp	r5, #0
 80166fa:	dd2c      	ble.n	8016756 <_svfprintf_r+0x9ba>
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d046      	beq.n	801678e <_svfprintf_r+0x9f2>
 8016700:	000a      	movs	r2, r1
 8016702:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016704:	18eb      	adds	r3, r5, r3
 8016706:	18d3      	adds	r3, r2, r3
 8016708:	9309      	str	r3, [sp, #36]	; 0x24
 801670a:	2366      	movs	r3, #102	; 0x66
 801670c:	930f      	str	r3, [sp, #60]	; 0x3c
 801670e:	e030      	b.n	8016772 <_svfprintf_r+0x9d6>
 8016710:	781c      	ldrb	r4, [r3, #0]
 8016712:	3301      	adds	r3, #1
 8016714:	7014      	strb	r4, [r2, #0]
 8016716:	3201      	adds	r2, #1
 8016718:	e668      	b.n	80163ec <_svfprintf_r+0x650>
 801671a:	222a      	movs	r2, #42	; 0x2a
 801671c:	ab1e      	add	r3, sp, #120	; 0x78
 801671e:	18d2      	adds	r2, r2, r3
 8016720:	2800      	cmp	r0, #0
 8016722:	d104      	bne.n	801672e <_svfprintf_r+0x992>
 8016724:	2330      	movs	r3, #48	; 0x30
 8016726:	222b      	movs	r2, #43	; 0x2b
 8016728:	708b      	strb	r3, [r1, #2]
 801672a:	ab1e      	add	r3, sp, #120	; 0x78
 801672c:	18d2      	adds	r2, r2, r3
 801672e:	3430      	adds	r4, #48	; 0x30
 8016730:	1c53      	adds	r3, r2, #1
 8016732:	7014      	strb	r4, [r2, #0]
 8016734:	e669      	b.n	801640a <_svfprintf_r+0x66e>
 8016736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016738:	42ab      	cmp	r3, r5
 801673a:	dd12      	ble.n	8016762 <_svfprintf_r+0x9c6>
 801673c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801673e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016740:	4694      	mov	ip, r2
 8016742:	4463      	add	r3, ip
 8016744:	9309      	str	r3, [sp, #36]	; 0x24
 8016746:	2367      	movs	r3, #103	; 0x67
 8016748:	930f      	str	r3, [sp, #60]	; 0x3c
 801674a:	2d00      	cmp	r5, #0
 801674c:	dc11      	bgt.n	8016772 <_svfprintf_r+0x9d6>
 801674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016750:	1b5b      	subs	r3, r3, r5
 8016752:	3301      	adds	r3, #1
 8016754:	e00c      	b.n	8016770 <_svfprintf_r+0x9d4>
 8016756:	2b00      	cmp	r3, #0
 8016758:	d01b      	beq.n	8016792 <_svfprintf_r+0x9f6>
 801675a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801675c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801675e:	3301      	adds	r3, #1
 8016760:	e7d1      	b.n	8016706 <_svfprintf_r+0x96a>
 8016762:	2367      	movs	r3, #103	; 0x67
 8016764:	9509      	str	r5, [sp, #36]	; 0x24
 8016766:	930f      	str	r3, [sp, #60]	; 0x3c
 8016768:	07f3      	lsls	r3, r6, #31
 801676a:	d502      	bpl.n	8016772 <_svfprintf_r+0x9d6>
 801676c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801676e:	18eb      	adds	r3, r5, r3
 8016770:	9309      	str	r3, [sp, #36]	; 0x24
 8016772:	2380      	movs	r3, #128	; 0x80
 8016774:	0032      	movs	r2, r6
 8016776:	00db      	lsls	r3, r3, #3
 8016778:	401a      	ands	r2, r3
 801677a:	9211      	str	r2, [sp, #68]	; 0x44
 801677c:	2200      	movs	r2, #0
 801677e:	9210      	str	r2, [sp, #64]	; 0x40
 8016780:	421e      	tst	r6, r3
 8016782:	d100      	bne.n	8016786 <_svfprintf_r+0x9ea>
 8016784:	e65d      	b.n	8016442 <_svfprintf_r+0x6a6>
 8016786:	4295      	cmp	r5, r2
 8016788:	dc25      	bgt.n	80167d6 <_svfprintf_r+0xa3a>
 801678a:	9211      	str	r2, [sp, #68]	; 0x44
 801678c:	e659      	b.n	8016442 <_svfprintf_r+0x6a6>
 801678e:	9509      	str	r5, [sp, #36]	; 0x24
 8016790:	e7bb      	b.n	801670a <_svfprintf_r+0x96e>
 8016792:	2366      	movs	r3, #102	; 0x66
 8016794:	9209      	str	r2, [sp, #36]	; 0x24
 8016796:	930f      	str	r3, [sp, #60]	; 0x3c
 8016798:	e7eb      	b.n	8016772 <_svfprintf_r+0x9d6>
 801679a:	42ab      	cmp	r3, r5
 801679c:	da0e      	bge.n	80167bc <_svfprintf_r+0xa20>
 801679e:	1aed      	subs	r5, r5, r3
 80167a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167a2:	785b      	ldrb	r3, [r3, #1]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d012      	beq.n	80167ce <_svfprintf_r+0xa32>
 80167a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167aa:	3301      	adds	r3, #1
 80167ac:	9311      	str	r3, [sp, #68]	; 0x44
 80167ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167b0:	3301      	adds	r3, #1
 80167b2:	9312      	str	r3, [sp, #72]	; 0x48
 80167b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	2bff      	cmp	r3, #255	; 0xff
 80167ba:	d1ee      	bne.n	801679a <_svfprintf_r+0x9fe>
 80167bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80167be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167c0:	189b      	adds	r3, r3, r2
 80167c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80167c4:	4353      	muls	r3, r2
 80167c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167c8:	189b      	adds	r3, r3, r2
 80167ca:	9309      	str	r3, [sp, #36]	; 0x24
 80167cc:	e639      	b.n	8016442 <_svfprintf_r+0x6a6>
 80167ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167d0:	3301      	adds	r3, #1
 80167d2:	9310      	str	r3, [sp, #64]	; 0x40
 80167d4:	e7ee      	b.n	80167b4 <_svfprintf_r+0xa18>
 80167d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167d8:	9311      	str	r3, [sp, #68]	; 0x44
 80167da:	e7eb      	b.n	80167b4 <_svfprintf_r+0xa18>
 80167dc:	1d23      	adds	r3, r4, #4
 80167de:	930d      	str	r3, [sp, #52]	; 0x34
 80167e0:	06b3      	lsls	r3, r6, #26
 80167e2:	d509      	bpl.n	80167f8 <_svfprintf_r+0xa5c>
 80167e4:	6823      	ldr	r3, [r4, #0]
 80167e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80167e8:	601a      	str	r2, [r3, #0]
 80167ea:	17d2      	asrs	r2, r2, #31
 80167ec:	605a      	str	r2, [r3, #4]
 80167ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80167f2:	9308      	str	r3, [sp, #32]
 80167f4:	f7ff fb0d 	bl	8015e12 <_svfprintf_r+0x76>
 80167f8:	06f3      	lsls	r3, r6, #27
 80167fa:	d503      	bpl.n	8016804 <_svfprintf_r+0xa68>
 80167fc:	6823      	ldr	r3, [r4, #0]
 80167fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016800:	601a      	str	r2, [r3, #0]
 8016802:	e7f4      	b.n	80167ee <_svfprintf_r+0xa52>
 8016804:	0673      	lsls	r3, r6, #25
 8016806:	d503      	bpl.n	8016810 <_svfprintf_r+0xa74>
 8016808:	6823      	ldr	r3, [r4, #0]
 801680a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801680c:	801a      	strh	r2, [r3, #0]
 801680e:	e7ee      	b.n	80167ee <_svfprintf_r+0xa52>
 8016810:	05b6      	lsls	r6, r6, #22
 8016812:	d5f3      	bpl.n	80167fc <_svfprintf_r+0xa60>
 8016814:	6823      	ldr	r3, [r4, #0]
 8016816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016818:	701a      	strb	r2, [r3, #0]
 801681a:	e7e8      	b.n	80167ee <_svfprintf_r+0xa52>
 801681c:	2310      	movs	r3, #16
 801681e:	431e      	orrs	r6, r3
 8016820:	2320      	movs	r3, #32
 8016822:	0030      	movs	r0, r6
 8016824:	4018      	ands	r0, r3
 8016826:	421e      	tst	r6, r3
 8016828:	d00f      	beq.n	801684a <_svfprintf_r+0xaae>
 801682a:	3b19      	subs	r3, #25
 801682c:	3407      	adds	r4, #7
 801682e:	439c      	bics	r4, r3
 8016830:	0022      	movs	r2, r4
 8016832:	ca18      	ldmia	r2!, {r3, r4}
 8016834:	9306      	str	r3, [sp, #24]
 8016836:	9407      	str	r4, [sp, #28]
 8016838:	920d      	str	r2, [sp, #52]	; 0x34
 801683a:	4bc9      	ldr	r3, [pc, #804]	; (8016b60 <_svfprintf_r+0xdc4>)
 801683c:	401e      	ands	r6, r3
 801683e:	2300      	movs	r3, #0
 8016840:	221b      	movs	r2, #27
 8016842:	a91e      	add	r1, sp, #120	; 0x78
 8016844:	1852      	adds	r2, r2, r1
 8016846:	2100      	movs	r1, #0
 8016848:	e430      	b.n	80160ac <_svfprintf_r+0x310>
 801684a:	0022      	movs	r2, r4
 801684c:	ca08      	ldmia	r2!, {r3}
 801684e:	0031      	movs	r1, r6
 8016850:	920d      	str	r2, [sp, #52]	; 0x34
 8016852:	2210      	movs	r2, #16
 8016854:	4011      	ands	r1, r2
 8016856:	4216      	tst	r6, r2
 8016858:	d002      	beq.n	8016860 <_svfprintf_r+0xac4>
 801685a:	9306      	str	r3, [sp, #24]
 801685c:	9007      	str	r0, [sp, #28]
 801685e:	e7ec      	b.n	801683a <_svfprintf_r+0xa9e>
 8016860:	2240      	movs	r2, #64	; 0x40
 8016862:	0030      	movs	r0, r6
 8016864:	4010      	ands	r0, r2
 8016866:	4216      	tst	r6, r2
 8016868:	d003      	beq.n	8016872 <_svfprintf_r+0xad6>
 801686a:	b29b      	uxth	r3, r3
 801686c:	9306      	str	r3, [sp, #24]
 801686e:	9107      	str	r1, [sp, #28]
 8016870:	e7e3      	b.n	801683a <_svfprintf_r+0xa9e>
 8016872:	2280      	movs	r2, #128	; 0x80
 8016874:	0031      	movs	r1, r6
 8016876:	0092      	lsls	r2, r2, #2
 8016878:	4011      	ands	r1, r2
 801687a:	4216      	tst	r6, r2
 801687c:	d0f6      	beq.n	801686c <_svfprintf_r+0xad0>
 801687e:	b2db      	uxtb	r3, r3
 8016880:	e7eb      	b.n	801685a <_svfprintf_r+0xabe>
 8016882:	0023      	movs	r3, r4
 8016884:	cb04      	ldmia	r3!, {r2}
 8016886:	49b7      	ldr	r1, [pc, #732]	; (8016b64 <_svfprintf_r+0xdc8>)
 8016888:	9206      	str	r2, [sp, #24]
 801688a:	aa25      	add	r2, sp, #148	; 0x94
 801688c:	8011      	strh	r1, [r2, #0]
 801688e:	4ab6      	ldr	r2, [pc, #728]	; (8016b68 <_svfprintf_r+0xdcc>)
 8016890:	930d      	str	r3, [sp, #52]	; 0x34
 8016892:	2300      	movs	r3, #0
 8016894:	921f      	str	r2, [sp, #124]	; 0x7c
 8016896:	2278      	movs	r2, #120	; 0x78
 8016898:	9307      	str	r3, [sp, #28]
 801689a:	3302      	adds	r3, #2
 801689c:	431e      	orrs	r6, r3
 801689e:	920f      	str	r2, [sp, #60]	; 0x3c
 80168a0:	e7ce      	b.n	8016840 <_svfprintf_r+0xaa4>
 80168a2:	0023      	movs	r3, r4
 80168a4:	cb04      	ldmia	r3!, {r2}
 80168a6:	2400      	movs	r4, #0
 80168a8:	930d      	str	r3, [sp, #52]	; 0x34
 80168aa:	231b      	movs	r3, #27
 80168ac:	9208      	str	r2, [sp, #32]
 80168ae:	aa1e      	add	r2, sp, #120	; 0x78
 80168b0:	189b      	adds	r3, r3, r2
 80168b2:	701c      	strb	r4, [r3, #0]
 80168b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b6:	3301      	adds	r3, #1
 80168b8:	d00e      	beq.n	80168d8 <_svfprintf_r+0xb3c>
 80168ba:	0021      	movs	r1, r4
 80168bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168be:	9808      	ldr	r0, [sp, #32]
 80168c0:	f000 fde2 	bl	8017488 <memchr>
 80168c4:	900c      	str	r0, [sp, #48]	; 0x30
 80168c6:	42a0      	cmp	r0, r4
 80168c8:	d100      	bne.n	80168cc <_svfprintf_r+0xb30>
 80168ca:	e10d      	b.n	8016ae8 <_svfprintf_r+0xd4c>
 80168cc:	9a08      	ldr	r2, [sp, #32]
 80168ce:	1a83      	subs	r3, r0, r2
 80168d0:	9309      	str	r3, [sp, #36]	; 0x24
 80168d2:	0023      	movs	r3, r4
 80168d4:	940c      	str	r4, [sp, #48]	; 0x30
 80168d6:	e44e      	b.n	8016176 <_svfprintf_r+0x3da>
 80168d8:	9808      	ldr	r0, [sp, #32]
 80168da:	f7e9 fc1d 	bl	8000118 <strlen>
 80168de:	9009      	str	r0, [sp, #36]	; 0x24
 80168e0:	e7f7      	b.n	80168d2 <_svfprintf_r+0xb36>
 80168e2:	2310      	movs	r3, #16
 80168e4:	431e      	orrs	r6, r3
 80168e6:	2320      	movs	r3, #32
 80168e8:	0030      	movs	r0, r6
 80168ea:	4018      	ands	r0, r3
 80168ec:	421e      	tst	r6, r3
 80168ee:	d009      	beq.n	8016904 <_svfprintf_r+0xb68>
 80168f0:	3b19      	subs	r3, #25
 80168f2:	3407      	adds	r4, #7
 80168f4:	439c      	bics	r4, r3
 80168f6:	0022      	movs	r2, r4
 80168f8:	ca18      	ldmia	r2!, {r3, r4}
 80168fa:	9306      	str	r3, [sp, #24]
 80168fc:	9407      	str	r4, [sp, #28]
 80168fe:	920d      	str	r2, [sp, #52]	; 0x34
 8016900:	2301      	movs	r3, #1
 8016902:	e79d      	b.n	8016840 <_svfprintf_r+0xaa4>
 8016904:	0023      	movs	r3, r4
 8016906:	cb04      	ldmia	r3!, {r2}
 8016908:	0031      	movs	r1, r6
 801690a:	930d      	str	r3, [sp, #52]	; 0x34
 801690c:	2310      	movs	r3, #16
 801690e:	4019      	ands	r1, r3
 8016910:	421e      	tst	r6, r3
 8016912:	d003      	beq.n	801691c <_svfprintf_r+0xb80>
 8016914:	9206      	str	r2, [sp, #24]
 8016916:	9007      	str	r0, [sp, #28]
 8016918:	3b0f      	subs	r3, #15
 801691a:	e791      	b.n	8016840 <_svfprintf_r+0xaa4>
 801691c:	2340      	movs	r3, #64	; 0x40
 801691e:	0030      	movs	r0, r6
 8016920:	4018      	ands	r0, r3
 8016922:	421e      	tst	r6, r3
 8016924:	d003      	beq.n	801692e <_svfprintf_r+0xb92>
 8016926:	b293      	uxth	r3, r2
 8016928:	9306      	str	r3, [sp, #24]
 801692a:	9107      	str	r1, [sp, #28]
 801692c:	e7e8      	b.n	8016900 <_svfprintf_r+0xb64>
 801692e:	2380      	movs	r3, #128	; 0x80
 8016930:	0031      	movs	r1, r6
 8016932:	009b      	lsls	r3, r3, #2
 8016934:	4019      	ands	r1, r3
 8016936:	421e      	tst	r6, r3
 8016938:	d003      	beq.n	8016942 <_svfprintf_r+0xba6>
 801693a:	b2d3      	uxtb	r3, r2
 801693c:	9306      	str	r3, [sp, #24]
 801693e:	9007      	str	r0, [sp, #28]
 8016940:	e7de      	b.n	8016900 <_svfprintf_r+0xb64>
 8016942:	9206      	str	r2, [sp, #24]
 8016944:	e7f1      	b.n	801692a <_svfprintf_r+0xb8e>
 8016946:	4b89      	ldr	r3, [pc, #548]	; (8016b6c <_svfprintf_r+0xdd0>)
 8016948:	0030      	movs	r0, r6
 801694a:	931f      	str	r3, [sp, #124]	; 0x7c
 801694c:	2320      	movs	r3, #32
 801694e:	4018      	ands	r0, r3
 8016950:	421e      	tst	r6, r3
 8016952:	d01a      	beq.n	801698a <_svfprintf_r+0xbee>
 8016954:	3b19      	subs	r3, #25
 8016956:	3407      	adds	r4, #7
 8016958:	439c      	bics	r4, r3
 801695a:	0022      	movs	r2, r4
 801695c:	ca18      	ldmia	r2!, {r3, r4}
 801695e:	9306      	str	r3, [sp, #24]
 8016960:	9407      	str	r4, [sp, #28]
 8016962:	920d      	str	r2, [sp, #52]	; 0x34
 8016964:	07f3      	lsls	r3, r6, #31
 8016966:	d50a      	bpl.n	801697e <_svfprintf_r+0xbe2>
 8016968:	9b06      	ldr	r3, [sp, #24]
 801696a:	9a07      	ldr	r2, [sp, #28]
 801696c:	4313      	orrs	r3, r2
 801696e:	d006      	beq.n	801697e <_svfprintf_r+0xbe2>
 8016970:	2230      	movs	r2, #48	; 0x30
 8016972:	ab25      	add	r3, sp, #148	; 0x94
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016978:	705a      	strb	r2, [r3, #1]
 801697a:	2302      	movs	r3, #2
 801697c:	431e      	orrs	r6, r3
 801697e:	4b78      	ldr	r3, [pc, #480]	; (8016b60 <_svfprintf_r+0xdc4>)
 8016980:	401e      	ands	r6, r3
 8016982:	2302      	movs	r3, #2
 8016984:	e75c      	b.n	8016840 <_svfprintf_r+0xaa4>
 8016986:	4b78      	ldr	r3, [pc, #480]	; (8016b68 <_svfprintf_r+0xdcc>)
 8016988:	e7de      	b.n	8016948 <_svfprintf_r+0xbac>
 801698a:	0023      	movs	r3, r4
 801698c:	cb04      	ldmia	r3!, {r2}
 801698e:	0031      	movs	r1, r6
 8016990:	930d      	str	r3, [sp, #52]	; 0x34
 8016992:	2310      	movs	r3, #16
 8016994:	4019      	ands	r1, r3
 8016996:	421e      	tst	r6, r3
 8016998:	d002      	beq.n	80169a0 <_svfprintf_r+0xc04>
 801699a:	9206      	str	r2, [sp, #24]
 801699c:	9007      	str	r0, [sp, #28]
 801699e:	e7e1      	b.n	8016964 <_svfprintf_r+0xbc8>
 80169a0:	2340      	movs	r3, #64	; 0x40
 80169a2:	0030      	movs	r0, r6
 80169a4:	4018      	ands	r0, r3
 80169a6:	421e      	tst	r6, r3
 80169a8:	d003      	beq.n	80169b2 <_svfprintf_r+0xc16>
 80169aa:	b293      	uxth	r3, r2
 80169ac:	9306      	str	r3, [sp, #24]
 80169ae:	9107      	str	r1, [sp, #28]
 80169b0:	e7d8      	b.n	8016964 <_svfprintf_r+0xbc8>
 80169b2:	2380      	movs	r3, #128	; 0x80
 80169b4:	0031      	movs	r1, r6
 80169b6:	009b      	lsls	r3, r3, #2
 80169b8:	4019      	ands	r1, r3
 80169ba:	421e      	tst	r6, r3
 80169bc:	d002      	beq.n	80169c4 <_svfprintf_r+0xc28>
 80169be:	b2d3      	uxtb	r3, r2
 80169c0:	9306      	str	r3, [sp, #24]
 80169c2:	e7eb      	b.n	801699c <_svfprintf_r+0xc00>
 80169c4:	9206      	str	r2, [sp, #24]
 80169c6:	e7f2      	b.n	80169ae <_svfprintf_r+0xc12>
 80169c8:	9b07      	ldr	r3, [sp, #28]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d10a      	bne.n	80169e4 <_svfprintf_r+0xc48>
 80169ce:	9b06      	ldr	r3, [sp, #24]
 80169d0:	2b09      	cmp	r3, #9
 80169d2:	d807      	bhi.n	80169e4 <_svfprintf_r+0xc48>
 80169d4:	23e7      	movs	r3, #231	; 0xe7
 80169d6:	aa1e      	add	r2, sp, #120	; 0x78
 80169d8:	189b      	adds	r3, r3, r2
 80169da:	9a06      	ldr	r2, [sp, #24]
 80169dc:	3230      	adds	r2, #48	; 0x30
 80169de:	701a      	strb	r2, [r3, #0]
 80169e0:	f000 fc18 	bl	8017214 <_svfprintf_r+0x1478>
 80169e4:	2680      	movs	r6, #128	; 0x80
 80169e6:	2300      	movs	r3, #0
 80169e8:	00f6      	lsls	r6, r6, #3
 80169ea:	930e      	str	r3, [sp, #56]	; 0x38
 80169ec:	ad58      	add	r5, sp, #352	; 0x160
 80169ee:	4026      	ands	r6, r4
 80169f0:	220a      	movs	r2, #10
 80169f2:	9806      	ldr	r0, [sp, #24]
 80169f4:	9907      	ldr	r1, [sp, #28]
 80169f6:	2300      	movs	r3, #0
 80169f8:	f7e9 fda2 	bl	8000540 <__aeabi_uldivmod>
 80169fc:	1e6b      	subs	r3, r5, #1
 80169fe:	3230      	adds	r2, #48	; 0x30
 8016a00:	9308      	str	r3, [sp, #32]
 8016a02:	701a      	strb	r2, [r3, #0]
 8016a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a06:	900c      	str	r0, [sp, #48]	; 0x30
 8016a08:	3301      	adds	r3, #1
 8016a0a:	9110      	str	r1, [sp, #64]	; 0x40
 8016a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8016a0e:	2e00      	cmp	r6, #0
 8016a10:	d01d      	beq.n	8016a4e <_svfprintf_r+0xcb2>
 8016a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a16:	781b      	ldrb	r3, [r3, #0]
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d118      	bne.n	8016a4e <_svfprintf_r+0xcb2>
 8016a1c:	2aff      	cmp	r2, #255	; 0xff
 8016a1e:	d016      	beq.n	8016a4e <_svfprintf_r+0xcb2>
 8016a20:	9b07      	ldr	r3, [sp, #28]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d102      	bne.n	8016a2c <_svfprintf_r+0xc90>
 8016a26:	9b06      	ldr	r3, [sp, #24]
 8016a28:	2b09      	cmp	r3, #9
 8016a2a:	d910      	bls.n	8016a4e <_svfprintf_r+0xcb2>
 8016a2c:	9b08      	ldr	r3, [sp, #32]
 8016a2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a30:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016a32:	1a9b      	subs	r3, r3, r2
 8016a34:	0018      	movs	r0, r3
 8016a36:	9308      	str	r3, [sp, #32]
 8016a38:	f7fd ffa9 	bl	801498e <strncpy>
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a40:	920e      	str	r2, [sp, #56]	; 0x38
 8016a42:	785b      	ldrb	r3, [r3, #1]
 8016a44:	1e5a      	subs	r2, r3, #1
 8016a46:	4193      	sbcs	r3, r2
 8016a48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a4a:	18d3      	adds	r3, r2, r3
 8016a4c:	9312      	str	r3, [sp, #72]	; 0x48
 8016a4e:	9b07      	ldr	r3, [sp, #28]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d10f      	bne.n	8016a74 <_svfprintf_r+0xcd8>
 8016a54:	9b06      	ldr	r3, [sp, #24]
 8016a56:	2b09      	cmp	r3, #9
 8016a58:	d80c      	bhi.n	8016a74 <_svfprintf_r+0xcd8>
 8016a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a5c:	9a08      	ldr	r2, [sp, #32]
 8016a5e:	9319      	str	r3, [sp, #100]	; 0x64
 8016a60:	ab58      	add	r3, sp, #352	; 0x160
 8016a62:	1a9b      	subs	r3, r3, r2
 8016a64:	9309      	str	r3, [sp, #36]	; 0x24
 8016a66:	2300      	movs	r3, #0
 8016a68:	0026      	movs	r6, r4
 8016a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8016a6c:	001d      	movs	r5, r3
 8016a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8016a70:	9311      	str	r3, [sp, #68]	; 0x44
 8016a72:	e4f2      	b.n	801645a <_svfprintf_r+0x6be>
 8016a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a76:	9d08      	ldr	r5, [sp, #32]
 8016a78:	9306      	str	r3, [sp, #24]
 8016a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a7c:	9307      	str	r3, [sp, #28]
 8016a7e:	e7b7      	b.n	80169f0 <_svfprintf_r+0xc54>
 8016a80:	200f      	movs	r0, #15
 8016a82:	ab58      	add	r3, sp, #352	; 0x160
 8016a84:	9308      	str	r3, [sp, #32]
 8016a86:	9b08      	ldr	r3, [sp, #32]
 8016a88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	9308      	str	r3, [sp, #32]
 8016a8e:	9b06      	ldr	r3, [sp, #24]
 8016a90:	4003      	ands	r3, r0
 8016a92:	5cd3      	ldrb	r3, [r2, r3]
 8016a94:	9a08      	ldr	r2, [sp, #32]
 8016a96:	7013      	strb	r3, [r2, #0]
 8016a98:	9b07      	ldr	r3, [sp, #28]
 8016a9a:	0719      	lsls	r1, r3, #28
 8016a9c:	9b06      	ldr	r3, [sp, #24]
 8016a9e:	091a      	lsrs	r2, r3, #4
 8016aa0:	9b07      	ldr	r3, [sp, #28]
 8016aa2:	4311      	orrs	r1, r2
 8016aa4:	091b      	lsrs	r3, r3, #4
 8016aa6:	9307      	str	r3, [sp, #28]
 8016aa8:	000b      	movs	r3, r1
 8016aaa:	9a07      	ldr	r2, [sp, #28]
 8016aac:	9106      	str	r1, [sp, #24]
 8016aae:	4313      	orrs	r3, r2
 8016ab0:	d1e9      	bne.n	8016a86 <_svfprintf_r+0xcea>
 8016ab2:	e7d2      	b.n	8016a5a <_svfprintf_r+0xcbe>
 8016ab4:	aa58      	add	r2, sp, #352	; 0x160
 8016ab6:	9208      	str	r2, [sp, #32]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d1ce      	bne.n	8016a5a <_svfprintf_r+0xcbe>
 8016abc:	07f6      	lsls	r6, r6, #31
 8016abe:	d5cc      	bpl.n	8016a5a <_svfprintf_r+0xcbe>
 8016ac0:	aa1e      	add	r2, sp, #120	; 0x78
 8016ac2:	33e7      	adds	r3, #231	; 0xe7
 8016ac4:	189b      	adds	r3, r3, r2
 8016ac6:	2230      	movs	r2, #48	; 0x30
 8016ac8:	e789      	b.n	80169de <_svfprintf_r+0xc42>
 8016aca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d100      	bne.n	8016ad2 <_svfprintf_r+0xd36>
 8016ad0:	e364      	b.n	801719c <_svfprintf_r+0x1400>
 8016ad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ad4:	211b      	movs	r1, #27
 8016ad6:	ab3f      	add	r3, sp, #252	; 0xfc
 8016ad8:	701a      	strb	r2, [r3, #0]
 8016ada:	2200      	movs	r2, #0
 8016adc:	a81e      	add	r0, sp, #120	; 0x78
 8016ade:	1809      	adds	r1, r1, r0
 8016ae0:	700a      	strb	r2, [r1, #0]
 8016ae2:	940d      	str	r4, [sp, #52]	; 0x34
 8016ae4:	f7ff fabd 	bl	8016062 <_svfprintf_r+0x2c6>
 8016ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016aea:	f7ff fb44 	bl	8016176 <_svfprintf_r+0x3da>
 8016aee:	2010      	movs	r0, #16
 8016af0:	1812      	adds	r2, r2, r0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	922e      	str	r2, [sp, #184]	; 0xb8
 8016af6:	932d      	str	r3, [sp, #180]	; 0xb4
 8016af8:	2b07      	cmp	r3, #7
 8016afa:	dd08      	ble.n	8016b0e <_svfprintf_r+0xd72>
 8016afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016afe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b00:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b02:	f001 fc3f 	bl	8018384 <__ssprint_r>
 8016b06:	2800      	cmp	r0, #0
 8016b08:	d000      	beq.n	8016b0c <_svfprintf_r+0xd70>
 8016b0a:	e326      	b.n	801715a <_svfprintf_r+0x13be>
 8016b0c:	a92f      	add	r1, sp, #188	; 0xbc
 8016b0e:	000f      	movs	r7, r1
 8016b10:	3c10      	subs	r4, #16
 8016b12:	e4c5      	b.n	80164a0 <_svfprintf_r+0x704>
 8016b14:	2010      	movs	r0, #16
 8016b16:	1812      	adds	r2, r2, r0
 8016b18:	6078      	str	r0, [r7, #4]
 8016b1a:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b1c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b1e:	2b07      	cmp	r3, #7
 8016b20:	dd08      	ble.n	8016b34 <_svfprintf_r+0xd98>
 8016b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b26:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b28:	f001 fc2c 	bl	8018384 <__ssprint_r>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d000      	beq.n	8016b32 <_svfprintf_r+0xd96>
 8016b30:	e313      	b.n	801715a <_svfprintf_r+0x13be>
 8016b32:	a92f      	add	r1, sp, #188	; 0xbc
 8016b34:	000f      	movs	r7, r1
 8016b36:	3c10      	subs	r4, #16
 8016b38:	e50b      	b.n	8016552 <_svfprintf_r+0x7b6>
 8016b3a:	2010      	movs	r0, #16
 8016b3c:	1812      	adds	r2, r2, r0
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b42:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b44:	2b07      	cmp	r3, #7
 8016b46:	dd08      	ble.n	8016b5a <_svfprintf_r+0xdbe>
 8016b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b4c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b4e:	f001 fc19 	bl	8018384 <__ssprint_r>
 8016b52:	2800      	cmp	r0, #0
 8016b54:	d000      	beq.n	8016b58 <_svfprintf_r+0xdbc>
 8016b56:	e300      	b.n	801715a <_svfprintf_r+0x13be>
 8016b58:	a92f      	add	r1, sp, #188	; 0xbc
 8016b5a:	000f      	movs	r7, r1
 8016b5c:	3c10      	subs	r4, #16
 8016b5e:	e518      	b.n	8016592 <_svfprintf_r+0x7f6>
 8016b60:	fffffbff 	.word	0xfffffbff
 8016b64:	00007830 	.word	0x00007830
 8016b68:	0801c90c 	.word	0x0801c90c
 8016b6c:	0801c91d 	.word	0x0801c91d
 8016b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b72:	2b65      	cmp	r3, #101	; 0x65
 8016b74:	dc00      	bgt.n	8016b78 <_svfprintf_r+0xddc>
 8016b76:	e241      	b.n	8016ffc <_svfprintf_r+0x1260>
 8016b78:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016b7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	2300      	movs	r3, #0
 8016b80:	f7e9 fc6c 	bl	800045c <__aeabi_dcmpeq>
 8016b84:	2800      	cmp	r0, #0
 8016b86:	d077      	beq.n	8016c78 <_svfprintf_r+0xedc>
 8016b88:	4bca      	ldr	r3, [pc, #808]	; (8016eb4 <_svfprintf_r+0x1118>)
 8016b8a:	603b      	str	r3, [r7, #0]
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	607b      	str	r3, [r7, #4]
 8016b90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016b92:	3708      	adds	r7, #8
 8016b94:	3301      	adds	r3, #1
 8016b96:	932e      	str	r3, [sp, #184]	; 0xb8
 8016b98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b9a:	3301      	adds	r3, #1
 8016b9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b9e:	2b07      	cmp	r3, #7
 8016ba0:	dd08      	ble.n	8016bb4 <_svfprintf_r+0xe18>
 8016ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ba4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ba6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ba8:	f001 fbec 	bl	8018384 <__ssprint_r>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	d000      	beq.n	8016bb2 <_svfprintf_r+0xe16>
 8016bb0:	e2d3      	b.n	801715a <_svfprintf_r+0x13be>
 8016bb2:	af2f      	add	r7, sp, #188	; 0xbc
 8016bb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bb8:	4293      	cmp	r3, r2
 8016bba:	db01      	blt.n	8016bc0 <_svfprintf_r+0xe24>
 8016bbc:	07f3      	lsls	r3, r6, #31
 8016bbe:	d51b      	bpl.n	8016bf8 <_svfprintf_r+0xe5c>
 8016bc0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016bc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016bc4:	603b      	str	r3, [r7, #0]
 8016bc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016bc8:	607b      	str	r3, [r7, #4]
 8016bca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016bcc:	3708      	adds	r7, #8
 8016bce:	189b      	adds	r3, r3, r2
 8016bd0:	932e      	str	r3, [sp, #184]	; 0xb8
 8016bd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016bd4:	3301      	adds	r3, #1
 8016bd6:	932d      	str	r3, [sp, #180]	; 0xb4
 8016bd8:	2b07      	cmp	r3, #7
 8016bda:	dd08      	ble.n	8016bee <_svfprintf_r+0xe52>
 8016bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016be0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016be2:	f001 fbcf 	bl	8018384 <__ssprint_r>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	d000      	beq.n	8016bec <_svfprintf_r+0xe50>
 8016bea:	e2b6      	b.n	801715a <_svfprintf_r+0x13be>
 8016bec:	af2f      	add	r7, sp, #188	; 0xbc
 8016bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bf0:	2510      	movs	r5, #16
 8016bf2:	1e5c      	subs	r4, r3, #1
 8016bf4:	2c00      	cmp	r4, #0
 8016bf6:	dc2e      	bgt.n	8016c56 <_svfprintf_r+0xeba>
 8016bf8:	0776      	lsls	r6, r6, #29
 8016bfa:	d500      	bpl.n	8016bfe <_svfprintf_r+0xe62>
 8016bfc:	e290      	b.n	8017120 <_svfprintf_r+0x1384>
 8016bfe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016c00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016c02:	4293      	cmp	r3, r2
 8016c04:	da00      	bge.n	8016c08 <_svfprintf_r+0xe6c>
 8016c06:	0013      	movs	r3, r2
 8016c08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016c0a:	18d3      	adds	r3, r2, r3
 8016c0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d007      	beq.n	8016c24 <_svfprintf_r+0xe88>
 8016c14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c18:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c1a:	f001 fbb3 	bl	8018384 <__ssprint_r>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d000      	beq.n	8016c24 <_svfprintf_r+0xe88>
 8016c22:	e29a      	b.n	801715a <_svfprintf_r+0x13be>
 8016c24:	2300      	movs	r3, #0
 8016c26:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d000      	beq.n	8016c30 <_svfprintf_r+0xe94>
 8016c2e:	e2b0      	b.n	8017192 <_svfprintf_r+0x13f6>
 8016c30:	af2f      	add	r7, sp, #188	; 0xbc
 8016c32:	e5dc      	b.n	80167ee <_svfprintf_r+0xa52>
 8016c34:	3210      	adds	r2, #16
 8016c36:	607d      	str	r5, [r7, #4]
 8016c38:	922e      	str	r2, [sp, #184]	; 0xb8
 8016c3a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c3c:	2b07      	cmp	r3, #7
 8016c3e:	dd08      	ble.n	8016c52 <_svfprintf_r+0xeb6>
 8016c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c44:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c46:	f001 fb9d 	bl	8018384 <__ssprint_r>
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	d000      	beq.n	8016c50 <_svfprintf_r+0xeb4>
 8016c4e:	e284      	b.n	801715a <_svfprintf_r+0x13be>
 8016c50:	a92f      	add	r1, sp, #188	; 0xbc
 8016c52:	000f      	movs	r7, r1
 8016c54:	3c10      	subs	r4, #16
 8016c56:	0039      	movs	r1, r7
 8016c58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c5a:	4897      	ldr	r0, [pc, #604]	; (8016eb8 <_svfprintf_r+0x111c>)
 8016c5c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c5e:	3301      	adds	r3, #1
 8016c60:	3108      	adds	r1, #8
 8016c62:	6038      	str	r0, [r7, #0]
 8016c64:	2c10      	cmp	r4, #16
 8016c66:	dce5      	bgt.n	8016c34 <_svfprintf_r+0xe98>
 8016c68:	607c      	str	r4, [r7, #4]
 8016c6a:	18a4      	adds	r4, r4, r2
 8016c6c:	942e      	str	r4, [sp, #184]	; 0xb8
 8016c6e:	000f      	movs	r7, r1
 8016c70:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c72:	2b07      	cmp	r3, #7
 8016c74:	ddc0      	ble.n	8016bf8 <_svfprintf_r+0xe5c>
 8016c76:	e05f      	b.n	8016d38 <_svfprintf_r+0xf9c>
 8016c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	dc78      	bgt.n	8016d70 <_svfprintf_r+0xfd4>
 8016c7e:	4b8d      	ldr	r3, [pc, #564]	; (8016eb4 <_svfprintf_r+0x1118>)
 8016c80:	603b      	str	r3, [r7, #0]
 8016c82:	2301      	movs	r3, #1
 8016c84:	607b      	str	r3, [r7, #4]
 8016c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c88:	3708      	adds	r7, #8
 8016c8a:	3301      	adds	r3, #1
 8016c8c:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c90:	3301      	adds	r3, #1
 8016c92:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c94:	2b07      	cmp	r3, #7
 8016c96:	dd08      	ble.n	8016caa <_svfprintf_r+0xf0e>
 8016c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c9c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c9e:	f001 fb71 	bl	8018384 <__ssprint_r>
 8016ca2:	2800      	cmp	r0, #0
 8016ca4:	d000      	beq.n	8016ca8 <_svfprintf_r+0xf0c>
 8016ca6:	e258      	b.n	801715a <_svfprintf_r+0x13be>
 8016ca8:	af2f      	add	r7, sp, #188	; 0xbc
 8016caa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016cac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016cae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016cb0:	430b      	orrs	r3, r1
 8016cb2:	2101      	movs	r1, #1
 8016cb4:	4031      	ands	r1, r6
 8016cb6:	430b      	orrs	r3, r1
 8016cb8:	d09e      	beq.n	8016bf8 <_svfprintf_r+0xe5c>
 8016cba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016cbc:	603b      	str	r3, [r7, #0]
 8016cbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016cc0:	607b      	str	r3, [r7, #4]
 8016cc2:	189a      	adds	r2, r3, r2
 8016cc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016cc6:	922e      	str	r2, [sp, #184]	; 0xb8
 8016cc8:	3301      	adds	r3, #1
 8016cca:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ccc:	3708      	adds	r7, #8
 8016cce:	2b07      	cmp	r3, #7
 8016cd0:	dd08      	ble.n	8016ce4 <_svfprintf_r+0xf48>
 8016cd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cd6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cd8:	f001 fb54 	bl	8018384 <__ssprint_r>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d000      	beq.n	8016ce2 <_svfprintf_r+0xf46>
 8016ce0:	e23b      	b.n	801715a <_svfprintf_r+0x13be>
 8016ce2:	af2f      	add	r7, sp, #188	; 0xbc
 8016ce4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016ce6:	2c00      	cmp	r4, #0
 8016ce8:	da19      	bge.n	8016d1e <_svfprintf_r+0xf82>
 8016cea:	0038      	movs	r0, r7
 8016cec:	2510      	movs	r5, #16
 8016cee:	4264      	negs	r4, r4
 8016cf0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016cf2:	4a71      	ldr	r2, [pc, #452]	; (8016eb8 <_svfprintf_r+0x111c>)
 8016cf4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016cf6:	3101      	adds	r1, #1
 8016cf8:	3708      	adds	r7, #8
 8016cfa:	6002      	str	r2, [r0, #0]
 8016cfc:	2c10      	cmp	r4, #16
 8016cfe:	dc25      	bgt.n	8016d4c <_svfprintf_r+0xfb0>
 8016d00:	6044      	str	r4, [r0, #4]
 8016d02:	18e4      	adds	r4, r4, r3
 8016d04:	942e      	str	r4, [sp, #184]	; 0xb8
 8016d06:	912d      	str	r1, [sp, #180]	; 0xb4
 8016d08:	2907      	cmp	r1, #7
 8016d0a:	dd08      	ble.n	8016d1e <_svfprintf_r+0xf82>
 8016d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d10:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d12:	f001 fb37 	bl	8018384 <__ssprint_r>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d000      	beq.n	8016d1c <_svfprintf_r+0xf80>
 8016d1a:	e21e      	b.n	801715a <_svfprintf_r+0x13be>
 8016d1c:	af2f      	add	r7, sp, #188	; 0xbc
 8016d1e:	9b08      	ldr	r3, [sp, #32]
 8016d20:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016d22:	603b      	str	r3, [r7, #0]
 8016d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d26:	18d2      	adds	r2, r2, r3
 8016d28:	922e      	str	r2, [sp, #184]	; 0xb8
 8016d2a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016d2c:	607b      	str	r3, [r7, #4]
 8016d2e:	3201      	adds	r2, #1
 8016d30:	922d      	str	r2, [sp, #180]	; 0xb4
 8016d32:	2a07      	cmp	r2, #7
 8016d34:	dc00      	bgt.n	8016d38 <_svfprintf_r+0xf9c>
 8016d36:	e45b      	b.n	80165f0 <_svfprintf_r+0x854>
 8016d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d3c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d3e:	f001 fb21 	bl	8018384 <__ssprint_r>
 8016d42:	2800      	cmp	r0, #0
 8016d44:	d000      	beq.n	8016d48 <_svfprintf_r+0xfac>
 8016d46:	e208      	b.n	801715a <_svfprintf_r+0x13be>
 8016d48:	af2f      	add	r7, sp, #188	; 0xbc
 8016d4a:	e755      	b.n	8016bf8 <_svfprintf_r+0xe5c>
 8016d4c:	3310      	adds	r3, #16
 8016d4e:	6045      	str	r5, [r0, #4]
 8016d50:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d52:	912d      	str	r1, [sp, #180]	; 0xb4
 8016d54:	2907      	cmp	r1, #7
 8016d56:	dd08      	ble.n	8016d6a <_svfprintf_r+0xfce>
 8016d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d5c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d5e:	f001 fb11 	bl	8018384 <__ssprint_r>
 8016d62:	2800      	cmp	r0, #0
 8016d64:	d000      	beq.n	8016d68 <_svfprintf_r+0xfcc>
 8016d66:	e1f8      	b.n	801715a <_svfprintf_r+0x13be>
 8016d68:	af2f      	add	r7, sp, #188	; 0xbc
 8016d6a:	0038      	movs	r0, r7
 8016d6c:	3c10      	subs	r4, #16
 8016d6e:	e7bf      	b.n	8016cf0 <_svfprintf_r+0xf54>
 8016d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d72:	002c      	movs	r4, r5
 8016d74:	429d      	cmp	r5, r3
 8016d76:	dd00      	ble.n	8016d7a <_svfprintf_r+0xfde>
 8016d78:	001c      	movs	r4, r3
 8016d7a:	2c00      	cmp	r4, #0
 8016d7c:	dd14      	ble.n	8016da8 <_svfprintf_r+0x100c>
 8016d7e:	9b08      	ldr	r3, [sp, #32]
 8016d80:	607c      	str	r4, [r7, #4]
 8016d82:	603b      	str	r3, [r7, #0]
 8016d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d86:	3708      	adds	r7, #8
 8016d88:	18e3      	adds	r3, r4, r3
 8016d8a:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d8e:	3301      	adds	r3, #1
 8016d90:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d92:	2b07      	cmp	r3, #7
 8016d94:	dd08      	ble.n	8016da8 <_svfprintf_r+0x100c>
 8016d96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d9a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d9c:	f001 faf2 	bl	8018384 <__ssprint_r>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d000      	beq.n	8016da6 <_svfprintf_r+0x100a>
 8016da4:	e1d9      	b.n	801715a <_svfprintf_r+0x13be>
 8016da6:	af2f      	add	r7, sp, #188	; 0xbc
 8016da8:	43e3      	mvns	r3, r4
 8016daa:	17db      	asrs	r3, r3, #31
 8016dac:	401c      	ands	r4, r3
 8016dae:	1b2c      	subs	r4, r5, r4
 8016db0:	2c00      	cmp	r4, #0
 8016db2:	dd18      	ble.n	8016de6 <_svfprintf_r+0x104a>
 8016db4:	0039      	movs	r1, r7
 8016db6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016db8:	483f      	ldr	r0, [pc, #252]	; (8016eb8 <_svfprintf_r+0x111c>)
 8016dba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	3108      	adds	r1, #8
 8016dc0:	6038      	str	r0, [r7, #0]
 8016dc2:	2c10      	cmp	r4, #16
 8016dc4:	dc7a      	bgt.n	8016ebc <_svfprintf_r+0x1120>
 8016dc6:	607c      	str	r4, [r7, #4]
 8016dc8:	18a4      	adds	r4, r4, r2
 8016dca:	000f      	movs	r7, r1
 8016dcc:	942e      	str	r4, [sp, #184]	; 0xb8
 8016dce:	932d      	str	r3, [sp, #180]	; 0xb4
 8016dd0:	2b07      	cmp	r3, #7
 8016dd2:	dd08      	ble.n	8016de6 <_svfprintf_r+0x104a>
 8016dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016dd8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016dda:	f001 fad3 	bl	8018384 <__ssprint_r>
 8016dde:	2800      	cmp	r0, #0
 8016de0:	d000      	beq.n	8016de4 <_svfprintf_r+0x1048>
 8016de2:	e1ba      	b.n	801715a <_svfprintf_r+0x13be>
 8016de4:	af2f      	add	r7, sp, #188	; 0xbc
 8016de6:	9b08      	ldr	r3, [sp, #32]
 8016de8:	195d      	adds	r5, r3, r5
 8016dea:	0573      	lsls	r3, r6, #21
 8016dec:	d50b      	bpl.n	8016e06 <_svfprintf_r+0x106a>
 8016dee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d176      	bne.n	8016ee2 <_svfprintf_r+0x1146>
 8016df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d176      	bne.n	8016ee8 <_svfprintf_r+0x114c>
 8016dfa:	9b08      	ldr	r3, [sp, #32]
 8016dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016dfe:	189b      	adds	r3, r3, r2
 8016e00:	429d      	cmp	r5, r3
 8016e02:	d900      	bls.n	8016e06 <_svfprintf_r+0x106a>
 8016e04:	001d      	movs	r5, r3
 8016e06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e0a:	4293      	cmp	r3, r2
 8016e0c:	db01      	blt.n	8016e12 <_svfprintf_r+0x1076>
 8016e0e:	07f3      	lsls	r3, r6, #31
 8016e10:	d516      	bpl.n	8016e40 <_svfprintf_r+0x10a4>
 8016e12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016e14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016e16:	603b      	str	r3, [r7, #0]
 8016e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016e1a:	607b      	str	r3, [r7, #4]
 8016e1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e1e:	3708      	adds	r7, #8
 8016e20:	189b      	adds	r3, r3, r2
 8016e22:	932e      	str	r3, [sp, #184]	; 0xb8
 8016e24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e26:	3301      	adds	r3, #1
 8016e28:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e2a:	2b07      	cmp	r3, #7
 8016e2c:	dd08      	ble.n	8016e40 <_svfprintf_r+0x10a4>
 8016e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e32:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e34:	f001 faa6 	bl	8018384 <__ssprint_r>
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	d000      	beq.n	8016e3e <_svfprintf_r+0x10a2>
 8016e3c:	e18d      	b.n	801715a <_svfprintf_r+0x13be>
 8016e3e:	af2f      	add	r7, sp, #188	; 0xbc
 8016e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e42:	9b08      	ldr	r3, [sp, #32]
 8016e44:	4694      	mov	ip, r2
 8016e46:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016e48:	4463      	add	r3, ip
 8016e4a:	1b5b      	subs	r3, r3, r5
 8016e4c:	1b14      	subs	r4, r2, r4
 8016e4e:	429c      	cmp	r4, r3
 8016e50:	dd00      	ble.n	8016e54 <_svfprintf_r+0x10b8>
 8016e52:	001c      	movs	r4, r3
 8016e54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e56:	2c00      	cmp	r4, #0
 8016e58:	dd12      	ble.n	8016e80 <_svfprintf_r+0x10e4>
 8016e5a:	18e3      	adds	r3, r4, r3
 8016e5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8016e5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e60:	603d      	str	r5, [r7, #0]
 8016e62:	3301      	adds	r3, #1
 8016e64:	607c      	str	r4, [r7, #4]
 8016e66:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e68:	3708      	adds	r7, #8
 8016e6a:	2b07      	cmp	r3, #7
 8016e6c:	dd08      	ble.n	8016e80 <_svfprintf_r+0x10e4>
 8016e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e72:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e74:	f001 fa86 	bl	8018384 <__ssprint_r>
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	d000      	beq.n	8016e7e <_svfprintf_r+0x10e2>
 8016e7c:	e16d      	b.n	801715a <_svfprintf_r+0x13be>
 8016e7e:	af2f      	add	r7, sp, #188	; 0xbc
 8016e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016e84:	2510      	movs	r5, #16
 8016e86:	1ad3      	subs	r3, r2, r3
 8016e88:	43e2      	mvns	r2, r4
 8016e8a:	17d2      	asrs	r2, r2, #31
 8016e8c:	4014      	ands	r4, r2
 8016e8e:	1b1c      	subs	r4, r3, r4
 8016e90:	2c00      	cmp	r4, #0
 8016e92:	dc00      	bgt.n	8016e96 <_svfprintf_r+0x10fa>
 8016e94:	e6b0      	b.n	8016bf8 <_svfprintf_r+0xe5c>
 8016e96:	0039      	movs	r1, r7
 8016e98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e9a:	4807      	ldr	r0, [pc, #28]	; (8016eb8 <_svfprintf_r+0x111c>)
 8016e9c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	3108      	adds	r1, #8
 8016ea2:	6038      	str	r0, [r7, #0]
 8016ea4:	2c10      	cmp	r4, #16
 8016ea6:	dd00      	ble.n	8016eaa <_svfprintf_r+0x110e>
 8016ea8:	e096      	b.n	8016fd8 <_svfprintf_r+0x123c>
 8016eaa:	1912      	adds	r2, r2, r4
 8016eac:	607c      	str	r4, [r7, #4]
 8016eae:	922e      	str	r2, [sp, #184]	; 0xb8
 8016eb0:	e6dd      	b.n	8016c6e <_svfprintf_r+0xed2>
 8016eb2:	46c0      	nop			; (mov r8, r8)
 8016eb4:	0801c92e 	.word	0x0801c92e
 8016eb8:	0801c940 	.word	0x0801c940
 8016ebc:	2010      	movs	r0, #16
 8016ebe:	1812      	adds	r2, r2, r0
 8016ec0:	6078      	str	r0, [r7, #4]
 8016ec2:	922e      	str	r2, [sp, #184]	; 0xb8
 8016ec4:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ec6:	2b07      	cmp	r3, #7
 8016ec8:	dd08      	ble.n	8016edc <_svfprintf_r+0x1140>
 8016eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ece:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ed0:	f001 fa58 	bl	8018384 <__ssprint_r>
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	d000      	beq.n	8016eda <_svfprintf_r+0x113e>
 8016ed8:	e13f      	b.n	801715a <_svfprintf_r+0x13be>
 8016eda:	a92f      	add	r1, sp, #188	; 0xbc
 8016edc:	000f      	movs	r7, r1
 8016ede:	3c10      	subs	r4, #16
 8016ee0:	e768      	b.n	8016db4 <_svfprintf_r+0x1018>
 8016ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d05d      	beq.n	8016fa4 <_svfprintf_r+0x1208>
 8016ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016eea:	3b01      	subs	r3, #1
 8016eec:	9310      	str	r3, [sp, #64]	; 0x40
 8016eee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ef0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ef2:	603b      	str	r3, [r7, #0]
 8016ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ef6:	607b      	str	r3, [r7, #4]
 8016ef8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016efa:	3708      	adds	r7, #8
 8016efc:	189b      	adds	r3, r3, r2
 8016efe:	932e      	str	r3, [sp, #184]	; 0xb8
 8016f00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f02:	3301      	adds	r3, #1
 8016f04:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f06:	2b07      	cmp	r3, #7
 8016f08:	dd08      	ble.n	8016f1c <_svfprintf_r+0x1180>
 8016f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f10:	f001 fa38 	bl	8018384 <__ssprint_r>
 8016f14:	2800      	cmp	r0, #0
 8016f16:	d000      	beq.n	8016f1a <_svfprintf_r+0x117e>
 8016f18:	e11f      	b.n	801715a <_svfprintf_r+0x13be>
 8016f1a:	af2f      	add	r7, sp, #188	; 0xbc
 8016f1c:	9b08      	ldr	r3, [sp, #32]
 8016f1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f20:	189c      	adds	r4, r3, r2
 8016f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f24:	1b64      	subs	r4, r4, r5
 8016f26:	781b      	ldrb	r3, [r3, #0]
 8016f28:	429c      	cmp	r4, r3
 8016f2a:	dd00      	ble.n	8016f2e <_svfprintf_r+0x1192>
 8016f2c:	001c      	movs	r4, r3
 8016f2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f30:	2c00      	cmp	r4, #0
 8016f32:	dd12      	ble.n	8016f5a <_svfprintf_r+0x11be>
 8016f34:	18e3      	adds	r3, r4, r3
 8016f36:	932e      	str	r3, [sp, #184]	; 0xb8
 8016f38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f3a:	603d      	str	r5, [r7, #0]
 8016f3c:	3301      	adds	r3, #1
 8016f3e:	607c      	str	r4, [r7, #4]
 8016f40:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f42:	3708      	adds	r7, #8
 8016f44:	2b07      	cmp	r3, #7
 8016f46:	dd08      	ble.n	8016f5a <_svfprintf_r+0x11be>
 8016f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f4c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f4e:	f001 fa19 	bl	8018384 <__ssprint_r>
 8016f52:	2800      	cmp	r0, #0
 8016f54:	d000      	beq.n	8016f58 <_svfprintf_r+0x11bc>
 8016f56:	e100      	b.n	801715a <_svfprintf_r+0x13be>
 8016f58:	af2f      	add	r7, sp, #188	; 0xbc
 8016f5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f5c:	781a      	ldrb	r2, [r3, #0]
 8016f5e:	43e3      	mvns	r3, r4
 8016f60:	17db      	asrs	r3, r3, #31
 8016f62:	401c      	ands	r4, r3
 8016f64:	1b14      	subs	r4, r2, r4
 8016f66:	2c00      	cmp	r4, #0
 8016f68:	dd18      	ble.n	8016f9c <_svfprintf_r+0x1200>
 8016f6a:	0039      	movs	r1, r7
 8016f6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f6e:	48aa      	ldr	r0, [pc, #680]	; (8017218 <_svfprintf_r+0x147c>)
 8016f70:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016f72:	3301      	adds	r3, #1
 8016f74:	3108      	adds	r1, #8
 8016f76:	6038      	str	r0, [r7, #0]
 8016f78:	2c10      	cmp	r4, #16
 8016f7a:	dc1a      	bgt.n	8016fb2 <_svfprintf_r+0x1216>
 8016f7c:	1912      	adds	r2, r2, r4
 8016f7e:	607c      	str	r4, [r7, #4]
 8016f80:	922e      	str	r2, [sp, #184]	; 0xb8
 8016f82:	000f      	movs	r7, r1
 8016f84:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f86:	2b07      	cmp	r3, #7
 8016f88:	dd08      	ble.n	8016f9c <_svfprintf_r+0x1200>
 8016f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f8e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f90:	f001 f9f8 	bl	8018384 <__ssprint_r>
 8016f94:	2800      	cmp	r0, #0
 8016f96:	d000      	beq.n	8016f9a <_svfprintf_r+0x11fe>
 8016f98:	e0df      	b.n	801715a <_svfprintf_r+0x13be>
 8016f9a:	af2f      	add	r7, sp, #188	; 0xbc
 8016f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	18ed      	adds	r5, r5, r3
 8016fa2:	e724      	b.n	8016dee <_svfprintf_r+0x1052>
 8016fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016fa6:	3b01      	subs	r3, #1
 8016fa8:	9312      	str	r3, [sp, #72]	; 0x48
 8016faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fac:	3b01      	subs	r3, #1
 8016fae:	9311      	str	r3, [sp, #68]	; 0x44
 8016fb0:	e79d      	b.n	8016eee <_svfprintf_r+0x1152>
 8016fb2:	2010      	movs	r0, #16
 8016fb4:	1812      	adds	r2, r2, r0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	922e      	str	r2, [sp, #184]	; 0xb8
 8016fba:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fbc:	2b07      	cmp	r3, #7
 8016fbe:	dd08      	ble.n	8016fd2 <_svfprintf_r+0x1236>
 8016fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fc4:	aa2c      	add	r2, sp, #176	; 0xb0
 8016fc6:	f001 f9dd 	bl	8018384 <__ssprint_r>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d000      	beq.n	8016fd0 <_svfprintf_r+0x1234>
 8016fce:	e0c4      	b.n	801715a <_svfprintf_r+0x13be>
 8016fd0:	a92f      	add	r1, sp, #188	; 0xbc
 8016fd2:	000f      	movs	r7, r1
 8016fd4:	3c10      	subs	r4, #16
 8016fd6:	e7c8      	b.n	8016f6a <_svfprintf_r+0x11ce>
 8016fd8:	3210      	adds	r2, #16
 8016fda:	607d      	str	r5, [r7, #4]
 8016fdc:	922e      	str	r2, [sp, #184]	; 0xb8
 8016fde:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fe0:	2b07      	cmp	r3, #7
 8016fe2:	dd08      	ble.n	8016ff6 <_svfprintf_r+0x125a>
 8016fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fe6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fe8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016fea:	f001 f9cb 	bl	8018384 <__ssprint_r>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d000      	beq.n	8016ff4 <_svfprintf_r+0x1258>
 8016ff2:	e0b2      	b.n	801715a <_svfprintf_r+0x13be>
 8016ff4:	a92f      	add	r1, sp, #188	; 0xbc
 8016ff6:	000f      	movs	r7, r1
 8016ff8:	3c10      	subs	r4, #16
 8016ffa:	e74c      	b.n	8016e96 <_svfprintf_r+0x10fa>
 8016ffc:	003c      	movs	r4, r7
 8016ffe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017000:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017004:	3101      	adds	r1, #1
 8017006:	3301      	adds	r3, #1
 8017008:	3408      	adds	r4, #8
 801700a:	2a01      	cmp	r2, #1
 801700c:	dc03      	bgt.n	8017016 <_svfprintf_r+0x127a>
 801700e:	2201      	movs	r2, #1
 8017010:	4216      	tst	r6, r2
 8017012:	d100      	bne.n	8017016 <_svfprintf_r+0x127a>
 8017014:	e07f      	b.n	8017116 <_svfprintf_r+0x137a>
 8017016:	9a08      	ldr	r2, [sp, #32]
 8017018:	912e      	str	r1, [sp, #184]	; 0xb8
 801701a:	603a      	str	r2, [r7, #0]
 801701c:	2201      	movs	r2, #1
 801701e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017020:	607a      	str	r2, [r7, #4]
 8017022:	2b07      	cmp	r3, #7
 8017024:	dd08      	ble.n	8017038 <_svfprintf_r+0x129c>
 8017026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017028:	980a      	ldr	r0, [sp, #40]	; 0x28
 801702a:	aa2c      	add	r2, sp, #176	; 0xb0
 801702c:	f001 f9aa 	bl	8018384 <__ssprint_r>
 8017030:	2800      	cmp	r0, #0
 8017032:	d000      	beq.n	8017036 <_svfprintf_r+0x129a>
 8017034:	e091      	b.n	801715a <_svfprintf_r+0x13be>
 8017036:	ac2f      	add	r4, sp, #188	; 0xbc
 8017038:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801703a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801703c:	6023      	str	r3, [r4, #0]
 801703e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017040:	6063      	str	r3, [r4, #4]
 8017042:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017044:	3408      	adds	r4, #8
 8017046:	189b      	adds	r3, r3, r2
 8017048:	932e      	str	r3, [sp, #184]	; 0xb8
 801704a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801704c:	3301      	adds	r3, #1
 801704e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017050:	2b07      	cmp	r3, #7
 8017052:	dd07      	ble.n	8017064 <_svfprintf_r+0x12c8>
 8017054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017058:	aa2c      	add	r2, sp, #176	; 0xb0
 801705a:	f001 f993 	bl	8018384 <__ssprint_r>
 801705e:	2800      	cmp	r0, #0
 8017060:	d17b      	bne.n	801715a <_svfprintf_r+0x13be>
 8017062:	ac2f      	add	r4, sp, #188	; 0xbc
 8017064:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017066:	2200      	movs	r2, #0
 8017068:	9814      	ldr	r0, [sp, #80]	; 0x50
 801706a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801706c:	9309      	str	r3, [sp, #36]	; 0x24
 801706e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017070:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017072:	1e5d      	subs	r5, r3, #1
 8017074:	2300      	movs	r3, #0
 8017076:	f7e9 f9f1 	bl	800045c <__aeabi_dcmpeq>
 801707a:	2800      	cmp	r0, #0
 801707c:	d126      	bne.n	80170cc <_svfprintf_r+0x1330>
 801707e:	9b08      	ldr	r3, [sp, #32]
 8017080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017082:	3301      	adds	r3, #1
 8017084:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017086:	6023      	str	r3, [r4, #0]
 8017088:	1e7b      	subs	r3, r7, #1
 801708a:	3201      	adds	r2, #1
 801708c:	185b      	adds	r3, r3, r1
 801708e:	6065      	str	r5, [r4, #4]
 8017090:	932e      	str	r3, [sp, #184]	; 0xb8
 8017092:	922d      	str	r2, [sp, #180]	; 0xb4
 8017094:	3408      	adds	r4, #8
 8017096:	2a07      	cmp	r2, #7
 8017098:	dd07      	ble.n	80170aa <_svfprintf_r+0x130e>
 801709a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801709c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801709e:	aa2c      	add	r2, sp, #176	; 0xb0
 80170a0:	f001 f970 	bl	8018384 <__ssprint_r>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	d158      	bne.n	801715a <_svfprintf_r+0x13be>
 80170a8:	ac2f      	add	r4, sp, #188	; 0xbc
 80170aa:	ab28      	add	r3, sp, #160	; 0xa0
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80170b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80170b2:	6063      	str	r3, [r4, #4]
 80170b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80170b6:	189b      	adds	r3, r3, r2
 80170b8:	932e      	str	r3, [sp, #184]	; 0xb8
 80170ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170bc:	3301      	adds	r3, #1
 80170be:	932d      	str	r3, [sp, #180]	; 0xb4
 80170c0:	2b07      	cmp	r3, #7
 80170c2:	dd00      	ble.n	80170c6 <_svfprintf_r+0x132a>
 80170c4:	e638      	b.n	8016d38 <_svfprintf_r+0xf9c>
 80170c6:	3408      	adds	r4, #8
 80170c8:	0027      	movs	r7, r4
 80170ca:	e595      	b.n	8016bf8 <_svfprintf_r+0xe5c>
 80170cc:	2710      	movs	r7, #16
 80170ce:	2d00      	cmp	r5, #0
 80170d0:	ddeb      	ble.n	80170aa <_svfprintf_r+0x130e>
 80170d2:	0021      	movs	r1, r4
 80170d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170d6:	4850      	ldr	r0, [pc, #320]	; (8017218 <_svfprintf_r+0x147c>)
 80170d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80170da:	3301      	adds	r3, #1
 80170dc:	3108      	adds	r1, #8
 80170de:	6020      	str	r0, [r4, #0]
 80170e0:	2d10      	cmp	r5, #16
 80170e2:	dc07      	bgt.n	80170f4 <_svfprintf_r+0x1358>
 80170e4:	6065      	str	r5, [r4, #4]
 80170e6:	000c      	movs	r4, r1
 80170e8:	18ad      	adds	r5, r5, r2
 80170ea:	952e      	str	r5, [sp, #184]	; 0xb8
 80170ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80170ee:	2b07      	cmp	r3, #7
 80170f0:	dddb      	ble.n	80170aa <_svfprintf_r+0x130e>
 80170f2:	e7d2      	b.n	801709a <_svfprintf_r+0x12fe>
 80170f4:	3210      	adds	r2, #16
 80170f6:	6067      	str	r7, [r4, #4]
 80170f8:	922e      	str	r2, [sp, #184]	; 0xb8
 80170fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80170fc:	2b07      	cmp	r3, #7
 80170fe:	dd07      	ble.n	8017110 <_svfprintf_r+0x1374>
 8017100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017102:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017104:	aa2c      	add	r2, sp, #176	; 0xb0
 8017106:	f001 f93d 	bl	8018384 <__ssprint_r>
 801710a:	2800      	cmp	r0, #0
 801710c:	d125      	bne.n	801715a <_svfprintf_r+0x13be>
 801710e:	a92f      	add	r1, sp, #188	; 0xbc
 8017110:	000c      	movs	r4, r1
 8017112:	3d10      	subs	r5, #16
 8017114:	e7dd      	b.n	80170d2 <_svfprintf_r+0x1336>
 8017116:	9808      	ldr	r0, [sp, #32]
 8017118:	912e      	str	r1, [sp, #184]	; 0xb8
 801711a:	c705      	stmia	r7!, {r0, r2}
 801711c:	932d      	str	r3, [sp, #180]	; 0xb4
 801711e:	e7e6      	b.n	80170ee <_svfprintf_r+0x1352>
 8017120:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017122:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017124:	2510      	movs	r5, #16
 8017126:	1a9c      	subs	r4, r3, r2
 8017128:	2c00      	cmp	r4, #0
 801712a:	dc00      	bgt.n	801712e <_svfprintf_r+0x1392>
 801712c:	e567      	b.n	8016bfe <_svfprintf_r+0xe62>
 801712e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017130:	493a      	ldr	r1, [pc, #232]	; (801721c <_svfprintf_r+0x1480>)
 8017132:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017134:	3301      	adds	r3, #1
 8017136:	6039      	str	r1, [r7, #0]
 8017138:	2c10      	cmp	r4, #16
 801713a:	dc19      	bgt.n	8017170 <_svfprintf_r+0x13d4>
 801713c:	607c      	str	r4, [r7, #4]
 801713e:	18a4      	adds	r4, r4, r2
 8017140:	942e      	str	r4, [sp, #184]	; 0xb8
 8017142:	932d      	str	r3, [sp, #180]	; 0xb4
 8017144:	2b07      	cmp	r3, #7
 8017146:	dc00      	bgt.n	801714a <_svfprintf_r+0x13ae>
 8017148:	e559      	b.n	8016bfe <_svfprintf_r+0xe62>
 801714a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801714c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801714e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017150:	f001 f918 	bl	8018384 <__ssprint_r>
 8017154:	2800      	cmp	r0, #0
 8017156:	d100      	bne.n	801715a <_svfprintf_r+0x13be>
 8017158:	e551      	b.n	8016bfe <_svfprintf_r+0xe62>
 801715a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801715c:	2b00      	cmp	r3, #0
 801715e:	d101      	bne.n	8017164 <_svfprintf_r+0x13c8>
 8017160:	f7ff f845 	bl	80161ee <_svfprintf_r+0x452>
 8017164:	0019      	movs	r1, r3
 8017166:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017168:	f7fd fd80 	bl	8014c6c <_free_r>
 801716c:	f7ff f83f 	bl	80161ee <_svfprintf_r+0x452>
 8017170:	3210      	adds	r2, #16
 8017172:	607d      	str	r5, [r7, #4]
 8017174:	922e      	str	r2, [sp, #184]	; 0xb8
 8017176:	932d      	str	r3, [sp, #180]	; 0xb4
 8017178:	3708      	adds	r7, #8
 801717a:	2b07      	cmp	r3, #7
 801717c:	dd07      	ble.n	801718e <_svfprintf_r+0x13f2>
 801717e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017180:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017182:	aa2c      	add	r2, sp, #176	; 0xb0
 8017184:	f001 f8fe 	bl	8018384 <__ssprint_r>
 8017188:	2800      	cmp	r0, #0
 801718a:	d1e6      	bne.n	801715a <_svfprintf_r+0x13be>
 801718c:	af2f      	add	r7, sp, #188	; 0xbc
 801718e:	3c10      	subs	r4, #16
 8017190:	e7cd      	b.n	801712e <_svfprintf_r+0x1392>
 8017192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017194:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017196:	f7fd fd69 	bl	8014c6c <_free_r>
 801719a:	e549      	b.n	8016c30 <_svfprintf_r+0xe94>
 801719c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d101      	bne.n	80171a6 <_svfprintf_r+0x140a>
 80171a2:	f7ff f824 	bl	80161ee <_svfprintf_r+0x452>
 80171a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80171ac:	f001 f8ea 	bl	8018384 <__ssprint_r>
 80171b0:	f7ff f81d 	bl	80161ee <_svfprintf_r+0x452>
 80171b4:	0034      	movs	r4, r6
 80171b6:	2a00      	cmp	r2, #0
 80171b8:	d101      	bne.n	80171be <_svfprintf_r+0x1422>
 80171ba:	f7fe ff8c 	bl	80160d6 <_svfprintf_r+0x33a>
 80171be:	2b01      	cmp	r3, #1
 80171c0:	d101      	bne.n	80171c6 <_svfprintf_r+0x142a>
 80171c2:	f7ff fc01 	bl	80169c8 <_svfprintf_r+0xc2c>
 80171c6:	2b02      	cmp	r3, #2
 80171c8:	d100      	bne.n	80171cc <_svfprintf_r+0x1430>
 80171ca:	e459      	b.n	8016a80 <_svfprintf_r+0xce4>
 80171cc:	2507      	movs	r5, #7
 80171ce:	ab58      	add	r3, sp, #352	; 0x160
 80171d0:	9308      	str	r3, [sp, #32]
 80171d2:	9a08      	ldr	r2, [sp, #32]
 80171d4:	0013      	movs	r3, r2
 80171d6:	3b01      	subs	r3, #1
 80171d8:	9308      	str	r3, [sp, #32]
 80171da:	9b06      	ldr	r3, [sp, #24]
 80171dc:	9908      	ldr	r1, [sp, #32]
 80171de:	402b      	ands	r3, r5
 80171e0:	3330      	adds	r3, #48	; 0x30
 80171e2:	700b      	strb	r3, [r1, #0]
 80171e4:	9907      	ldr	r1, [sp, #28]
 80171e6:	074e      	lsls	r6, r1, #29
 80171e8:	9906      	ldr	r1, [sp, #24]
 80171ea:	08c8      	lsrs	r0, r1, #3
 80171ec:	9907      	ldr	r1, [sp, #28]
 80171ee:	4306      	orrs	r6, r0
 80171f0:	08c9      	lsrs	r1, r1, #3
 80171f2:	9107      	str	r1, [sp, #28]
 80171f4:	0031      	movs	r1, r6
 80171f6:	9807      	ldr	r0, [sp, #28]
 80171f8:	9606      	str	r6, [sp, #24]
 80171fa:	4301      	orrs	r1, r0
 80171fc:	d1e9      	bne.n	80171d2 <_svfprintf_r+0x1436>
 80171fe:	07e1      	lsls	r1, r4, #31
 8017200:	d400      	bmi.n	8017204 <_svfprintf_r+0x1468>
 8017202:	e42a      	b.n	8016a5a <_svfprintf_r+0xcbe>
 8017204:	2b30      	cmp	r3, #48	; 0x30
 8017206:	d100      	bne.n	801720a <_svfprintf_r+0x146e>
 8017208:	e427      	b.n	8016a5a <_svfprintf_r+0xcbe>
 801720a:	2130      	movs	r1, #48	; 0x30
 801720c:	9b08      	ldr	r3, [sp, #32]
 801720e:	3b01      	subs	r3, #1
 8017210:	7019      	strb	r1, [r3, #0]
 8017212:	1e93      	subs	r3, r2, #2
 8017214:	9308      	str	r3, [sp, #32]
 8017216:	e420      	b.n	8016a5a <_svfprintf_r+0xcbe>
 8017218:	0801c940 	.word	0x0801c940
 801721c:	0801c930 	.word	0x0801c930

08017220 <_fclose_r>:
 8017220:	b570      	push	{r4, r5, r6, lr}
 8017222:	0005      	movs	r5, r0
 8017224:	1e0c      	subs	r4, r1, #0
 8017226:	d102      	bne.n	801722e <_fclose_r+0xe>
 8017228:	2600      	movs	r6, #0
 801722a:	0030      	movs	r0, r6
 801722c:	bd70      	pop	{r4, r5, r6, pc}
 801722e:	2800      	cmp	r0, #0
 8017230:	d004      	beq.n	801723c <_fclose_r+0x1c>
 8017232:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017234:	2b00      	cmp	r3, #0
 8017236:	d101      	bne.n	801723c <_fclose_r+0x1c>
 8017238:	f7fd fab4 	bl	80147a4 <__sinit>
 801723c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801723e:	07db      	lsls	r3, r3, #31
 8017240:	d405      	bmi.n	801724e <_fclose_r+0x2e>
 8017242:	89a3      	ldrh	r3, [r4, #12]
 8017244:	059b      	lsls	r3, r3, #22
 8017246:	d402      	bmi.n	801724e <_fclose_r+0x2e>
 8017248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801724a:	f7fd fc83 	bl	8014b54 <__retarget_lock_acquire_recursive>
 801724e:	220c      	movs	r2, #12
 8017250:	5ea3      	ldrsh	r3, [r4, r2]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d109      	bne.n	801726a <_fclose_r+0x4a>
 8017256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017258:	3301      	adds	r3, #1
 801725a:	0016      	movs	r6, r2
 801725c:	401e      	ands	r6, r3
 801725e:	421a      	tst	r2, r3
 8017260:	d1e2      	bne.n	8017228 <_fclose_r+0x8>
 8017262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017264:	f7fd fc77 	bl	8014b56 <__retarget_lock_release_recursive>
 8017268:	e7df      	b.n	801722a <_fclose_r+0xa>
 801726a:	0021      	movs	r1, r4
 801726c:	0028      	movs	r0, r5
 801726e:	f000 f837 	bl	80172e0 <__sflush_r>
 8017272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017274:	0006      	movs	r6, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d006      	beq.n	8017288 <_fclose_r+0x68>
 801727a:	0028      	movs	r0, r5
 801727c:	69e1      	ldr	r1, [r4, #28]
 801727e:	4798      	blx	r3
 8017280:	2800      	cmp	r0, #0
 8017282:	da01      	bge.n	8017288 <_fclose_r+0x68>
 8017284:	2601      	movs	r6, #1
 8017286:	4276      	negs	r6, r6
 8017288:	89a3      	ldrh	r3, [r4, #12]
 801728a:	061b      	lsls	r3, r3, #24
 801728c:	d503      	bpl.n	8017296 <_fclose_r+0x76>
 801728e:	0028      	movs	r0, r5
 8017290:	6921      	ldr	r1, [r4, #16]
 8017292:	f7fd fceb 	bl	8014c6c <_free_r>
 8017296:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017298:	2900      	cmp	r1, #0
 801729a:	d008      	beq.n	80172ae <_fclose_r+0x8e>
 801729c:	0023      	movs	r3, r4
 801729e:	3340      	adds	r3, #64	; 0x40
 80172a0:	4299      	cmp	r1, r3
 80172a2:	d002      	beq.n	80172aa <_fclose_r+0x8a>
 80172a4:	0028      	movs	r0, r5
 80172a6:	f7fd fce1 	bl	8014c6c <_free_r>
 80172aa:	2300      	movs	r3, #0
 80172ac:	6323      	str	r3, [r4, #48]	; 0x30
 80172ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80172b0:	2900      	cmp	r1, #0
 80172b2:	d004      	beq.n	80172be <_fclose_r+0x9e>
 80172b4:	0028      	movs	r0, r5
 80172b6:	f7fd fcd9 	bl	8014c6c <_free_r>
 80172ba:	2300      	movs	r3, #0
 80172bc:	6463      	str	r3, [r4, #68]	; 0x44
 80172be:	f7fd fa61 	bl	8014784 <__sfp_lock_acquire>
 80172c2:	2300      	movs	r3, #0
 80172c4:	81a3      	strh	r3, [r4, #12]
 80172c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172c8:	07db      	lsls	r3, r3, #31
 80172ca:	d402      	bmi.n	80172d2 <_fclose_r+0xb2>
 80172cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172ce:	f7fd fc42 	bl	8014b56 <__retarget_lock_release_recursive>
 80172d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172d4:	f7fd fc3d 	bl	8014b52 <__retarget_lock_close_recursive>
 80172d8:	f7fd fa5c 	bl	8014794 <__sfp_lock_release>
 80172dc:	e7a5      	b.n	801722a <_fclose_r+0xa>
	...

080172e0 <__sflush_r>:
 80172e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172e2:	230c      	movs	r3, #12
 80172e4:	5eca      	ldrsh	r2, [r1, r3]
 80172e6:	000c      	movs	r4, r1
 80172e8:	0005      	movs	r5, r0
 80172ea:	b291      	uxth	r1, r2
 80172ec:	0713      	lsls	r3, r2, #28
 80172ee:	d464      	bmi.n	80173ba <__sflush_r+0xda>
 80172f0:	2380      	movs	r3, #128	; 0x80
 80172f2:	011b      	lsls	r3, r3, #4
 80172f4:	4313      	orrs	r3, r2
 80172f6:	6862      	ldr	r2, [r4, #4]
 80172f8:	81a3      	strh	r3, [r4, #12]
 80172fa:	2a00      	cmp	r2, #0
 80172fc:	dc04      	bgt.n	8017308 <__sflush_r+0x28>
 80172fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017300:	2a00      	cmp	r2, #0
 8017302:	dc01      	bgt.n	8017308 <__sflush_r+0x28>
 8017304:	2000      	movs	r0, #0
 8017306:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017308:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801730a:	2f00      	cmp	r7, #0
 801730c:	d0fa      	beq.n	8017304 <__sflush_r+0x24>
 801730e:	2200      	movs	r2, #0
 8017310:	2080      	movs	r0, #128	; 0x80
 8017312:	682e      	ldr	r6, [r5, #0]
 8017314:	602a      	str	r2, [r5, #0]
 8017316:	001a      	movs	r2, r3
 8017318:	0140      	lsls	r0, r0, #5
 801731a:	69e1      	ldr	r1, [r4, #28]
 801731c:	4002      	ands	r2, r0
 801731e:	4203      	tst	r3, r0
 8017320:	d038      	beq.n	8017394 <__sflush_r+0xb4>
 8017322:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017324:	89a3      	ldrh	r3, [r4, #12]
 8017326:	075b      	lsls	r3, r3, #29
 8017328:	d506      	bpl.n	8017338 <__sflush_r+0x58>
 801732a:	6863      	ldr	r3, [r4, #4]
 801732c:	1ac0      	subs	r0, r0, r3
 801732e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017330:	2b00      	cmp	r3, #0
 8017332:	d001      	beq.n	8017338 <__sflush_r+0x58>
 8017334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017336:	1ac0      	subs	r0, r0, r3
 8017338:	0002      	movs	r2, r0
 801733a:	2300      	movs	r3, #0
 801733c:	0028      	movs	r0, r5
 801733e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8017340:	69e1      	ldr	r1, [r4, #28]
 8017342:	47b8      	blx	r7
 8017344:	89a2      	ldrh	r2, [r4, #12]
 8017346:	1c43      	adds	r3, r0, #1
 8017348:	d106      	bne.n	8017358 <__sflush_r+0x78>
 801734a:	6829      	ldr	r1, [r5, #0]
 801734c:	291d      	cmp	r1, #29
 801734e:	d830      	bhi.n	80173b2 <__sflush_r+0xd2>
 8017350:	4b2c      	ldr	r3, [pc, #176]	; (8017404 <__sflush_r+0x124>)
 8017352:	410b      	asrs	r3, r1
 8017354:	07db      	lsls	r3, r3, #31
 8017356:	d42c      	bmi.n	80173b2 <__sflush_r+0xd2>
 8017358:	4b2b      	ldr	r3, [pc, #172]	; (8017408 <__sflush_r+0x128>)
 801735a:	4013      	ands	r3, r2
 801735c:	2200      	movs	r2, #0
 801735e:	6062      	str	r2, [r4, #4]
 8017360:	6922      	ldr	r2, [r4, #16]
 8017362:	b21b      	sxth	r3, r3
 8017364:	81a3      	strh	r3, [r4, #12]
 8017366:	6022      	str	r2, [r4, #0]
 8017368:	04db      	lsls	r3, r3, #19
 801736a:	d505      	bpl.n	8017378 <__sflush_r+0x98>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <__sflush_r+0x96>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d100      	bne.n	8017378 <__sflush_r+0x98>
 8017376:	6520      	str	r0, [r4, #80]	; 0x50
 8017378:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801737a:	602e      	str	r6, [r5, #0]
 801737c:	2900      	cmp	r1, #0
 801737e:	d0c1      	beq.n	8017304 <__sflush_r+0x24>
 8017380:	0023      	movs	r3, r4
 8017382:	3340      	adds	r3, #64	; 0x40
 8017384:	4299      	cmp	r1, r3
 8017386:	d002      	beq.n	801738e <__sflush_r+0xae>
 8017388:	0028      	movs	r0, r5
 801738a:	f7fd fc6f 	bl	8014c6c <_free_r>
 801738e:	2000      	movs	r0, #0
 8017390:	6320      	str	r0, [r4, #48]	; 0x30
 8017392:	e7b8      	b.n	8017306 <__sflush_r+0x26>
 8017394:	2301      	movs	r3, #1
 8017396:	0028      	movs	r0, r5
 8017398:	47b8      	blx	r7
 801739a:	1c43      	adds	r3, r0, #1
 801739c:	d1c2      	bne.n	8017324 <__sflush_r+0x44>
 801739e:	682b      	ldr	r3, [r5, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d0bf      	beq.n	8017324 <__sflush_r+0x44>
 80173a4:	2b1d      	cmp	r3, #29
 80173a6:	d001      	beq.n	80173ac <__sflush_r+0xcc>
 80173a8:	2b16      	cmp	r3, #22
 80173aa:	d101      	bne.n	80173b0 <__sflush_r+0xd0>
 80173ac:	602e      	str	r6, [r5, #0]
 80173ae:	e7a9      	b.n	8017304 <__sflush_r+0x24>
 80173b0:	89a2      	ldrh	r2, [r4, #12]
 80173b2:	2340      	movs	r3, #64	; 0x40
 80173b4:	4313      	orrs	r3, r2
 80173b6:	81a3      	strh	r3, [r4, #12]
 80173b8:	e7a5      	b.n	8017306 <__sflush_r+0x26>
 80173ba:	6926      	ldr	r6, [r4, #16]
 80173bc:	2e00      	cmp	r6, #0
 80173be:	d0a1      	beq.n	8017304 <__sflush_r+0x24>
 80173c0:	6827      	ldr	r7, [r4, #0]
 80173c2:	6026      	str	r6, [r4, #0]
 80173c4:	1bbb      	subs	r3, r7, r6
 80173c6:	9301      	str	r3, [sp, #4]
 80173c8:	2300      	movs	r3, #0
 80173ca:	0789      	lsls	r1, r1, #30
 80173cc:	d100      	bne.n	80173d0 <__sflush_r+0xf0>
 80173ce:	6963      	ldr	r3, [r4, #20]
 80173d0:	60a3      	str	r3, [r4, #8]
 80173d2:	9b01      	ldr	r3, [sp, #4]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	dc00      	bgt.n	80173da <__sflush_r+0xfa>
 80173d8:	e794      	b.n	8017304 <__sflush_r+0x24>
 80173da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173dc:	0032      	movs	r2, r6
 80173de:	001f      	movs	r7, r3
 80173e0:	0028      	movs	r0, r5
 80173e2:	9b01      	ldr	r3, [sp, #4]
 80173e4:	69e1      	ldr	r1, [r4, #28]
 80173e6:	47b8      	blx	r7
 80173e8:	2800      	cmp	r0, #0
 80173ea:	dc06      	bgt.n	80173fa <__sflush_r+0x11a>
 80173ec:	2340      	movs	r3, #64	; 0x40
 80173ee:	2001      	movs	r0, #1
 80173f0:	89a2      	ldrh	r2, [r4, #12]
 80173f2:	4240      	negs	r0, r0
 80173f4:	4313      	orrs	r3, r2
 80173f6:	81a3      	strh	r3, [r4, #12]
 80173f8:	e785      	b.n	8017306 <__sflush_r+0x26>
 80173fa:	9b01      	ldr	r3, [sp, #4]
 80173fc:	1836      	adds	r6, r6, r0
 80173fe:	1a1b      	subs	r3, r3, r0
 8017400:	9301      	str	r3, [sp, #4]
 8017402:	e7e6      	b.n	80173d2 <__sflush_r+0xf2>
 8017404:	dfbffffe 	.word	0xdfbffffe
 8017408:	fffff7ff 	.word	0xfffff7ff

0801740c <_fflush_r>:
 801740c:	b570      	push	{r4, r5, r6, lr}
 801740e:	0005      	movs	r5, r0
 8017410:	000c      	movs	r4, r1
 8017412:	2800      	cmp	r0, #0
 8017414:	d004      	beq.n	8017420 <_fflush_r+0x14>
 8017416:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017418:	2b00      	cmp	r3, #0
 801741a:	d101      	bne.n	8017420 <_fflush_r+0x14>
 801741c:	f7fd f9c2 	bl	80147a4 <__sinit>
 8017420:	220c      	movs	r2, #12
 8017422:	5ea3      	ldrsh	r3, [r4, r2]
 8017424:	1e1e      	subs	r6, r3, #0
 8017426:	d015      	beq.n	8017454 <_fflush_r+0x48>
 8017428:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801742a:	07d2      	lsls	r2, r2, #31
 801742c:	d404      	bmi.n	8017438 <_fflush_r+0x2c>
 801742e:	059b      	lsls	r3, r3, #22
 8017430:	d402      	bmi.n	8017438 <_fflush_r+0x2c>
 8017432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017434:	f7fd fb8e 	bl	8014b54 <__retarget_lock_acquire_recursive>
 8017438:	0021      	movs	r1, r4
 801743a:	0028      	movs	r0, r5
 801743c:	f7ff ff50 	bl	80172e0 <__sflush_r>
 8017440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017442:	0006      	movs	r6, r0
 8017444:	07db      	lsls	r3, r3, #31
 8017446:	d405      	bmi.n	8017454 <_fflush_r+0x48>
 8017448:	89a3      	ldrh	r3, [r4, #12]
 801744a:	059b      	lsls	r3, r3, #22
 801744c:	d402      	bmi.n	8017454 <_fflush_r+0x48>
 801744e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017450:	f7fd fb81 	bl	8014b56 <__retarget_lock_release_recursive>
 8017454:	0030      	movs	r0, r6
 8017456:	bd70      	pop	{r4, r5, r6, pc}

08017458 <_localeconv_r>:
 8017458:	4800      	ldr	r0, [pc, #0]	; (801745c <_localeconv_r+0x4>)
 801745a:	4770      	bx	lr
 801745c:	200005d8 	.word	0x200005d8

08017460 <__libc_fini_array>:
 8017460:	b570      	push	{r4, r5, r6, lr}
 8017462:	4c07      	ldr	r4, [pc, #28]	; (8017480 <__libc_fini_array+0x20>)
 8017464:	4d07      	ldr	r5, [pc, #28]	; (8017484 <__libc_fini_array+0x24>)
 8017466:	1b64      	subs	r4, r4, r5
 8017468:	10a4      	asrs	r4, r4, #2
 801746a:	2c00      	cmp	r4, #0
 801746c:	d102      	bne.n	8017474 <__libc_fini_array+0x14>
 801746e:	f002 f921 	bl	80196b4 <_fini>
 8017472:	bd70      	pop	{r4, r5, r6, pc}
 8017474:	3c01      	subs	r4, #1
 8017476:	00a3      	lsls	r3, r4, #2
 8017478:	58eb      	ldr	r3, [r5, r3]
 801747a:	4798      	blx	r3
 801747c:	e7f5      	b.n	801746a <__libc_fini_array+0xa>
 801747e:	46c0      	nop			; (mov r8, r8)
 8017480:	0801ca28 	.word	0x0801ca28
 8017484:	0801ca24 	.word	0x0801ca24

08017488 <memchr>:
 8017488:	b2c9      	uxtb	r1, r1
 801748a:	1882      	adds	r2, r0, r2
 801748c:	4290      	cmp	r0, r2
 801748e:	d101      	bne.n	8017494 <memchr+0xc>
 8017490:	2000      	movs	r0, #0
 8017492:	4770      	bx	lr
 8017494:	7803      	ldrb	r3, [r0, #0]
 8017496:	428b      	cmp	r3, r1
 8017498:	d0fb      	beq.n	8017492 <memchr+0xa>
 801749a:	3001      	adds	r0, #1
 801749c:	e7f6      	b.n	801748c <memchr+0x4>
	...

080174a0 <frexp>:
 80174a0:	b570      	push	{r4, r5, r6, lr}
 80174a2:	0014      	movs	r4, r2
 80174a4:	2500      	movs	r5, #0
 80174a6:	6025      	str	r5, [r4, #0]
 80174a8:	4d10      	ldr	r5, [pc, #64]	; (80174ec <frexp+0x4c>)
 80174aa:	004b      	lsls	r3, r1, #1
 80174ac:	000a      	movs	r2, r1
 80174ae:	085b      	lsrs	r3, r3, #1
 80174b0:	42ab      	cmp	r3, r5
 80174b2:	dc1a      	bgt.n	80174ea <frexp+0x4a>
 80174b4:	001d      	movs	r5, r3
 80174b6:	4305      	orrs	r5, r0
 80174b8:	d017      	beq.n	80174ea <frexp+0x4a>
 80174ba:	4d0d      	ldr	r5, [pc, #52]	; (80174f0 <frexp+0x50>)
 80174bc:	4229      	tst	r1, r5
 80174be:	d109      	bne.n	80174d4 <frexp+0x34>
 80174c0:	2200      	movs	r2, #0
 80174c2:	4b0c      	ldr	r3, [pc, #48]	; (80174f4 <frexp+0x54>)
 80174c4:	f7ea fd3e 	bl	8001f44 <__aeabi_dmul>
 80174c8:	2536      	movs	r5, #54	; 0x36
 80174ca:	000a      	movs	r2, r1
 80174cc:	004b      	lsls	r3, r1, #1
 80174ce:	426d      	negs	r5, r5
 80174d0:	085b      	lsrs	r3, r3, #1
 80174d2:	6025      	str	r5, [r4, #0]
 80174d4:	4d08      	ldr	r5, [pc, #32]	; (80174f8 <frexp+0x58>)
 80174d6:	151b      	asrs	r3, r3, #20
 80174d8:	195b      	adds	r3, r3, r5
 80174da:	6825      	ldr	r5, [r4, #0]
 80174dc:	18eb      	adds	r3, r5, r3
 80174de:	6023      	str	r3, [r4, #0]
 80174e0:	4b06      	ldr	r3, [pc, #24]	; (80174fc <frexp+0x5c>)
 80174e2:	401a      	ands	r2, r3
 80174e4:	4b06      	ldr	r3, [pc, #24]	; (8017500 <frexp+0x60>)
 80174e6:	4313      	orrs	r3, r2
 80174e8:	0019      	movs	r1, r3
 80174ea:	bd70      	pop	{r4, r5, r6, pc}
 80174ec:	7fefffff 	.word	0x7fefffff
 80174f0:	7ff00000 	.word	0x7ff00000
 80174f4:	43500000 	.word	0x43500000
 80174f8:	fffffc02 	.word	0xfffffc02
 80174fc:	800fffff 	.word	0x800fffff
 8017500:	3fe00000 	.word	0x3fe00000

08017504 <__register_exitproc>:
 8017504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017506:	4f1c      	ldr	r7, [pc, #112]	; (8017578 <__register_exitproc+0x74>)
 8017508:	0004      	movs	r4, r0
 801750a:	6838      	ldr	r0, [r7, #0]
 801750c:	0016      	movs	r6, r2
 801750e:	9301      	str	r3, [sp, #4]
 8017510:	9100      	str	r1, [sp, #0]
 8017512:	f7fd fb1f 	bl	8014b54 <__retarget_lock_acquire_recursive>
 8017516:	4a19      	ldr	r2, [pc, #100]	; (801757c <__register_exitproc+0x78>)
 8017518:	6813      	ldr	r3, [r2, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d101      	bne.n	8017522 <__register_exitproc+0x1e>
 801751e:	4b18      	ldr	r3, [pc, #96]	; (8017580 <__register_exitproc+0x7c>)
 8017520:	6013      	str	r3, [r2, #0]
 8017522:	685a      	ldr	r2, [r3, #4]
 8017524:	6838      	ldr	r0, [r7, #0]
 8017526:	2a1f      	cmp	r2, #31
 8017528:	dd04      	ble.n	8017534 <__register_exitproc+0x30>
 801752a:	f7fd fb14 	bl	8014b56 <__retarget_lock_release_recursive>
 801752e:	2001      	movs	r0, #1
 8017530:	4240      	negs	r0, r0
 8017532:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017534:	2c00      	cmp	r4, #0
 8017536:	d014      	beq.n	8017562 <__register_exitproc+0x5e>
 8017538:	0091      	lsls	r1, r2, #2
 801753a:	1859      	adds	r1, r3, r1
 801753c:	000f      	movs	r7, r1
 801753e:	3788      	adds	r7, #136	; 0x88
 8017540:	603e      	str	r6, [r7, #0]
 8017542:	2701      	movs	r7, #1
 8017544:	001e      	movs	r6, r3
 8017546:	4097      	lsls	r7, r2
 8017548:	3685      	adds	r6, #133	; 0x85
 801754a:	36ff      	adds	r6, #255	; 0xff
 801754c:	6875      	ldr	r5, [r6, #4]
 801754e:	31fc      	adds	r1, #252	; 0xfc
 8017550:	433d      	orrs	r5, r7
 8017552:	6075      	str	r5, [r6, #4]
 8017554:	9d01      	ldr	r5, [sp, #4]
 8017556:	60cd      	str	r5, [r1, #12]
 8017558:	2c02      	cmp	r4, #2
 801755a:	d102      	bne.n	8017562 <__register_exitproc+0x5e>
 801755c:	68b1      	ldr	r1, [r6, #8]
 801755e:	4339      	orrs	r1, r7
 8017560:	60b1      	str	r1, [r6, #8]
 8017562:	1c51      	adds	r1, r2, #1
 8017564:	6059      	str	r1, [r3, #4]
 8017566:	3202      	adds	r2, #2
 8017568:	9900      	ldr	r1, [sp, #0]
 801756a:	0092      	lsls	r2, r2, #2
 801756c:	50d1      	str	r1, [r2, r3]
 801756e:	f7fd faf2 	bl	8014b56 <__retarget_lock_release_recursive>
 8017572:	2000      	movs	r0, #0
 8017574:	e7dd      	b.n	8017532 <__register_exitproc+0x2e>
 8017576:	46c0      	nop			; (mov r8, r8)
 8017578:	2000077c 	.word	0x2000077c
 801757c:	20006dc0 	.word	0x20006dc0
 8017580:	20006dc4 	.word	0x20006dc4

08017584 <__assert_func>:
 8017584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017586:	0014      	movs	r4, r2
 8017588:	001a      	movs	r2, r3
 801758a:	4b09      	ldr	r3, [pc, #36]	; (80175b0 <__assert_func+0x2c>)
 801758c:	0005      	movs	r5, r0
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	000e      	movs	r6, r1
 8017592:	68d8      	ldr	r0, [r3, #12]
 8017594:	4b07      	ldr	r3, [pc, #28]	; (80175b4 <__assert_func+0x30>)
 8017596:	2c00      	cmp	r4, #0
 8017598:	d101      	bne.n	801759e <__assert_func+0x1a>
 801759a:	4b07      	ldr	r3, [pc, #28]	; (80175b8 <__assert_func+0x34>)
 801759c:	001c      	movs	r4, r3
 801759e:	4907      	ldr	r1, [pc, #28]	; (80175bc <__assert_func+0x38>)
 80175a0:	9301      	str	r3, [sp, #4]
 80175a2:	9402      	str	r4, [sp, #8]
 80175a4:	002b      	movs	r3, r5
 80175a6:	9600      	str	r6, [sp, #0]
 80175a8:	f000 fedc 	bl	8018364 <fiprintf>
 80175ac:	f001 fedd 	bl	801936a <abort>
 80175b0:	20000778 	.word	0x20000778
 80175b4:	0801c950 	.word	0x0801c950
 80175b8:	0801c98b 	.word	0x0801c98b
 80175bc:	0801c95d 	.word	0x0801c95d

080175c0 <_calloc_r>:
 80175c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175c2:	2400      	movs	r4, #0
 80175c4:	0c0b      	lsrs	r3, r1, #16
 80175c6:	0c16      	lsrs	r6, r2, #16
 80175c8:	42a3      	cmp	r3, r4
 80175ca:	d133      	bne.n	8017634 <_calloc_r+0x74>
 80175cc:	42a6      	cmp	r6, r4
 80175ce:	d121      	bne.n	8017614 <_calloc_r+0x54>
 80175d0:	b28b      	uxth	r3, r1
 80175d2:	b291      	uxth	r1, r2
 80175d4:	4359      	muls	r1, r3
 80175d6:	f7fb fda5 	bl	8013124 <_malloc_r>
 80175da:	1e05      	subs	r5, r0, #0
 80175dc:	d033      	beq.n	8017646 <_calloc_r+0x86>
 80175de:	0003      	movs	r3, r0
 80175e0:	3b08      	subs	r3, #8
 80175e2:	685a      	ldr	r2, [r3, #4]
 80175e4:	2303      	movs	r3, #3
 80175e6:	439a      	bics	r2, r3
 80175e8:	3a04      	subs	r2, #4
 80175ea:	2a24      	cmp	r2, #36	; 0x24
 80175ec:	d832      	bhi.n	8017654 <_calloc_r+0x94>
 80175ee:	0003      	movs	r3, r0
 80175f0:	2a13      	cmp	r2, #19
 80175f2:	d90a      	bls.n	801760a <_calloc_r+0x4a>
 80175f4:	6004      	str	r4, [r0, #0]
 80175f6:	6044      	str	r4, [r0, #4]
 80175f8:	3308      	adds	r3, #8
 80175fa:	2a1b      	cmp	r2, #27
 80175fc:	d905      	bls.n	801760a <_calloc_r+0x4a>
 80175fe:	6084      	str	r4, [r0, #8]
 8017600:	60c4      	str	r4, [r0, #12]
 8017602:	2a24      	cmp	r2, #36	; 0x24
 8017604:	d021      	beq.n	801764a <_calloc_r+0x8a>
 8017606:	0003      	movs	r3, r0
 8017608:	3310      	adds	r3, #16
 801760a:	2200      	movs	r2, #0
 801760c:	601a      	str	r2, [r3, #0]
 801760e:	605a      	str	r2, [r3, #4]
 8017610:	609a      	str	r2, [r3, #8]
 8017612:	e018      	b.n	8017646 <_calloc_r+0x86>
 8017614:	1c33      	adds	r3, r6, #0
 8017616:	1c0d      	adds	r5, r1, #0
 8017618:	b289      	uxth	r1, r1
 801761a:	b292      	uxth	r2, r2
 801761c:	434a      	muls	r2, r1
 801761e:	b2ad      	uxth	r5, r5
 8017620:	b299      	uxth	r1, r3
 8017622:	4369      	muls	r1, r5
 8017624:	0c13      	lsrs	r3, r2, #16
 8017626:	18c9      	adds	r1, r1, r3
 8017628:	0c0b      	lsrs	r3, r1, #16
 801762a:	d107      	bne.n	801763c <_calloc_r+0x7c>
 801762c:	0409      	lsls	r1, r1, #16
 801762e:	b292      	uxth	r2, r2
 8017630:	4311      	orrs	r1, r2
 8017632:	e7d0      	b.n	80175d6 <_calloc_r+0x16>
 8017634:	2e00      	cmp	r6, #0
 8017636:	d101      	bne.n	801763c <_calloc_r+0x7c>
 8017638:	1c15      	adds	r5, r2, #0
 801763a:	e7ed      	b.n	8017618 <_calloc_r+0x58>
 801763c:	f7fd fa5e 	bl	8014afc <__errno>
 8017640:	230c      	movs	r3, #12
 8017642:	2500      	movs	r5, #0
 8017644:	6003      	str	r3, [r0, #0]
 8017646:	0028      	movs	r0, r5
 8017648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801764a:	0003      	movs	r3, r0
 801764c:	6104      	str	r4, [r0, #16]
 801764e:	3318      	adds	r3, #24
 8017650:	6144      	str	r4, [r0, #20]
 8017652:	e7da      	b.n	801760a <_calloc_r+0x4a>
 8017654:	2100      	movs	r1, #0
 8017656:	f7fd f966 	bl	8014926 <memset>
 801765a:	e7f4      	b.n	8017646 <_calloc_r+0x86>

0801765c <quorem>:
 801765c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801765e:	6902      	ldr	r2, [r0, #16]
 8017660:	690b      	ldr	r3, [r1, #16]
 8017662:	b089      	sub	sp, #36	; 0x24
 8017664:	0007      	movs	r7, r0
 8017666:	9104      	str	r1, [sp, #16]
 8017668:	2000      	movs	r0, #0
 801766a:	429a      	cmp	r2, r3
 801766c:	db69      	blt.n	8017742 <quorem+0xe6>
 801766e:	3b01      	subs	r3, #1
 8017670:	009c      	lsls	r4, r3, #2
 8017672:	9301      	str	r3, [sp, #4]
 8017674:	000b      	movs	r3, r1
 8017676:	3314      	adds	r3, #20
 8017678:	9306      	str	r3, [sp, #24]
 801767a:	191b      	adds	r3, r3, r4
 801767c:	9305      	str	r3, [sp, #20]
 801767e:	003b      	movs	r3, r7
 8017680:	3314      	adds	r3, #20
 8017682:	9303      	str	r3, [sp, #12]
 8017684:	191c      	adds	r4, r3, r4
 8017686:	9b05      	ldr	r3, [sp, #20]
 8017688:	6826      	ldr	r6, [r4, #0]
 801768a:	681d      	ldr	r5, [r3, #0]
 801768c:	0030      	movs	r0, r6
 801768e:	3501      	adds	r5, #1
 8017690:	0029      	movs	r1, r5
 8017692:	f7e8 fd5d 	bl	8000150 <__udivsi3>
 8017696:	9002      	str	r0, [sp, #8]
 8017698:	42ae      	cmp	r6, r5
 801769a:	d329      	bcc.n	80176f0 <quorem+0x94>
 801769c:	9b06      	ldr	r3, [sp, #24]
 801769e:	2600      	movs	r6, #0
 80176a0:	469c      	mov	ip, r3
 80176a2:	9d03      	ldr	r5, [sp, #12]
 80176a4:	9606      	str	r6, [sp, #24]
 80176a6:	4662      	mov	r2, ip
 80176a8:	ca08      	ldmia	r2!, {r3}
 80176aa:	6828      	ldr	r0, [r5, #0]
 80176ac:	4694      	mov	ip, r2
 80176ae:	9a02      	ldr	r2, [sp, #8]
 80176b0:	b299      	uxth	r1, r3
 80176b2:	4351      	muls	r1, r2
 80176b4:	0c1b      	lsrs	r3, r3, #16
 80176b6:	4353      	muls	r3, r2
 80176b8:	1989      	adds	r1, r1, r6
 80176ba:	0c0a      	lsrs	r2, r1, #16
 80176bc:	189b      	adds	r3, r3, r2
 80176be:	9307      	str	r3, [sp, #28]
 80176c0:	0c1e      	lsrs	r6, r3, #16
 80176c2:	9b06      	ldr	r3, [sp, #24]
 80176c4:	b282      	uxth	r2, r0
 80176c6:	18d2      	adds	r2, r2, r3
 80176c8:	466b      	mov	r3, sp
 80176ca:	b289      	uxth	r1, r1
 80176cc:	8b9b      	ldrh	r3, [r3, #28]
 80176ce:	1a52      	subs	r2, r2, r1
 80176d0:	0c01      	lsrs	r1, r0, #16
 80176d2:	1ac9      	subs	r1, r1, r3
 80176d4:	1413      	asrs	r3, r2, #16
 80176d6:	18cb      	adds	r3, r1, r3
 80176d8:	1419      	asrs	r1, r3, #16
 80176da:	b292      	uxth	r2, r2
 80176dc:	041b      	lsls	r3, r3, #16
 80176de:	4313      	orrs	r3, r2
 80176e0:	c508      	stmia	r5!, {r3}
 80176e2:	9b05      	ldr	r3, [sp, #20]
 80176e4:	9106      	str	r1, [sp, #24]
 80176e6:	4563      	cmp	r3, ip
 80176e8:	d2dd      	bcs.n	80176a6 <quorem+0x4a>
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d030      	beq.n	8017752 <quorem+0xf6>
 80176f0:	0038      	movs	r0, r7
 80176f2:	9904      	ldr	r1, [sp, #16]
 80176f4:	f7fe f95c 	bl	80159b0 <__mcmp>
 80176f8:	2800      	cmp	r0, #0
 80176fa:	db21      	blt.n	8017740 <quorem+0xe4>
 80176fc:	0038      	movs	r0, r7
 80176fe:	2600      	movs	r6, #0
 8017700:	9b02      	ldr	r3, [sp, #8]
 8017702:	9c04      	ldr	r4, [sp, #16]
 8017704:	3301      	adds	r3, #1
 8017706:	9302      	str	r3, [sp, #8]
 8017708:	3014      	adds	r0, #20
 801770a:	3414      	adds	r4, #20
 801770c:	6803      	ldr	r3, [r0, #0]
 801770e:	cc02      	ldmia	r4!, {r1}
 8017710:	b29d      	uxth	r5, r3
 8017712:	19ad      	adds	r5, r5, r6
 8017714:	b28a      	uxth	r2, r1
 8017716:	1aaa      	subs	r2, r5, r2
 8017718:	0c09      	lsrs	r1, r1, #16
 801771a:	0c1b      	lsrs	r3, r3, #16
 801771c:	1a5b      	subs	r3, r3, r1
 801771e:	1411      	asrs	r1, r2, #16
 8017720:	185b      	adds	r3, r3, r1
 8017722:	141e      	asrs	r6, r3, #16
 8017724:	b292      	uxth	r2, r2
 8017726:	041b      	lsls	r3, r3, #16
 8017728:	4313      	orrs	r3, r2
 801772a:	c008      	stmia	r0!, {r3}
 801772c:	9b05      	ldr	r3, [sp, #20]
 801772e:	42a3      	cmp	r3, r4
 8017730:	d2ec      	bcs.n	801770c <quorem+0xb0>
 8017732:	9b01      	ldr	r3, [sp, #4]
 8017734:	9a03      	ldr	r2, [sp, #12]
 8017736:	009b      	lsls	r3, r3, #2
 8017738:	18d3      	adds	r3, r2, r3
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	2a00      	cmp	r2, #0
 801773e:	d015      	beq.n	801776c <quorem+0x110>
 8017740:	9802      	ldr	r0, [sp, #8]
 8017742:	b009      	add	sp, #36	; 0x24
 8017744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d106      	bne.n	801775a <quorem+0xfe>
 801774c:	9b01      	ldr	r3, [sp, #4]
 801774e:	3b01      	subs	r3, #1
 8017750:	9301      	str	r3, [sp, #4]
 8017752:	9b03      	ldr	r3, [sp, #12]
 8017754:	3c04      	subs	r4, #4
 8017756:	42a3      	cmp	r3, r4
 8017758:	d3f5      	bcc.n	8017746 <quorem+0xea>
 801775a:	9b01      	ldr	r3, [sp, #4]
 801775c:	613b      	str	r3, [r7, #16]
 801775e:	e7c7      	b.n	80176f0 <quorem+0x94>
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	2a00      	cmp	r2, #0
 8017764:	d106      	bne.n	8017774 <quorem+0x118>
 8017766:	9a01      	ldr	r2, [sp, #4]
 8017768:	3a01      	subs	r2, #1
 801776a:	9201      	str	r2, [sp, #4]
 801776c:	9a03      	ldr	r2, [sp, #12]
 801776e:	3b04      	subs	r3, #4
 8017770:	429a      	cmp	r2, r3
 8017772:	d3f5      	bcc.n	8017760 <quorem+0x104>
 8017774:	9b01      	ldr	r3, [sp, #4]
 8017776:	613b      	str	r3, [r7, #16]
 8017778:	e7e2      	b.n	8017740 <quorem+0xe4>
	...

0801777c <_dtoa_r>:
 801777c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801777e:	0014      	movs	r4, r2
 8017780:	001d      	movs	r5, r3
 8017782:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8017784:	b09d      	sub	sp, #116	; 0x74
 8017786:	9408      	str	r4, [sp, #32]
 8017788:	9509      	str	r5, [sp, #36]	; 0x24
 801778a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801778c:	9004      	str	r0, [sp, #16]
 801778e:	2900      	cmp	r1, #0
 8017790:	d009      	beq.n	80177a6 <_dtoa_r+0x2a>
 8017792:	2301      	movs	r3, #1
 8017794:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017796:	4093      	lsls	r3, r2
 8017798:	604a      	str	r2, [r1, #4]
 801779a:	608b      	str	r3, [r1, #8]
 801779c:	f7fd feae 	bl	80154fc <_Bfree>
 80177a0:	2300      	movs	r3, #0
 80177a2:	9a04      	ldr	r2, [sp, #16]
 80177a4:	6393      	str	r3, [r2, #56]	; 0x38
 80177a6:	2d00      	cmp	r5, #0
 80177a8:	da1e      	bge.n	80177e8 <_dtoa_r+0x6c>
 80177aa:	2301      	movs	r3, #1
 80177ac:	6033      	str	r3, [r6, #0]
 80177ae:	006b      	lsls	r3, r5, #1
 80177b0:	085b      	lsrs	r3, r3, #1
 80177b2:	9309      	str	r3, [sp, #36]	; 0x24
 80177b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80177b6:	4bb5      	ldr	r3, [pc, #724]	; (8017a8c <_dtoa_r+0x310>)
 80177b8:	4ab4      	ldr	r2, [pc, #720]	; (8017a8c <_dtoa_r+0x310>)
 80177ba:	403b      	ands	r3, r7
 80177bc:	4293      	cmp	r3, r2
 80177be:	d116      	bne.n	80177ee <_dtoa_r+0x72>
 80177c0:	4bb3      	ldr	r3, [pc, #716]	; (8017a90 <_dtoa_r+0x314>)
 80177c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80177c4:	6013      	str	r3, [r2, #0]
 80177c6:	033b      	lsls	r3, r7, #12
 80177c8:	0b1b      	lsrs	r3, r3, #12
 80177ca:	4323      	orrs	r3, r4
 80177cc:	d101      	bne.n	80177d2 <_dtoa_r+0x56>
 80177ce:	f000 fdb2 	bl	8018336 <_dtoa_r+0xbba>
 80177d2:	4bb0      	ldr	r3, [pc, #704]	; (8017a94 <_dtoa_r+0x318>)
 80177d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80177d6:	9306      	str	r3, [sp, #24]
 80177d8:	2a00      	cmp	r2, #0
 80177da:	d002      	beq.n	80177e2 <_dtoa_r+0x66>
 80177dc:	4bae      	ldr	r3, [pc, #696]	; (8017a98 <_dtoa_r+0x31c>)
 80177de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80177e0:	6013      	str	r3, [r2, #0]
 80177e2:	9806      	ldr	r0, [sp, #24]
 80177e4:	b01d      	add	sp, #116	; 0x74
 80177e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177e8:	2300      	movs	r3, #0
 80177ea:	6033      	str	r3, [r6, #0]
 80177ec:	e7e2      	b.n	80177b4 <_dtoa_r+0x38>
 80177ee:	9a08      	ldr	r2, [sp, #32]
 80177f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177f2:	9210      	str	r2, [sp, #64]	; 0x40
 80177f4:	9311      	str	r3, [sp, #68]	; 0x44
 80177f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80177f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80177fa:	2200      	movs	r2, #0
 80177fc:	2300      	movs	r3, #0
 80177fe:	f7e8 fe2d 	bl	800045c <__aeabi_dcmpeq>
 8017802:	1e06      	subs	r6, r0, #0
 8017804:	d009      	beq.n	801781a <_dtoa_r+0x9e>
 8017806:	2301      	movs	r3, #1
 8017808:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801780a:	6013      	str	r3, [r2, #0]
 801780c:	4ba3      	ldr	r3, [pc, #652]	; (8017a9c <_dtoa_r+0x320>)
 801780e:	9306      	str	r3, [sp, #24]
 8017810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017812:	2b00      	cmp	r3, #0
 8017814:	d0e5      	beq.n	80177e2 <_dtoa_r+0x66>
 8017816:	4ba2      	ldr	r3, [pc, #648]	; (8017aa0 <_dtoa_r+0x324>)
 8017818:	e7e1      	b.n	80177de <_dtoa_r+0x62>
 801781a:	ab1a      	add	r3, sp, #104	; 0x68
 801781c:	9301      	str	r3, [sp, #4]
 801781e:	ab1b      	add	r3, sp, #108	; 0x6c
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	9804      	ldr	r0, [sp, #16]
 8017824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017828:	f7fe f9de 	bl	8015be8 <__d2b>
 801782c:	007a      	lsls	r2, r7, #1
 801782e:	9005      	str	r0, [sp, #20]
 8017830:	0d52      	lsrs	r2, r2, #21
 8017832:	d100      	bne.n	8017836 <_dtoa_r+0xba>
 8017834:	e07b      	b.n	801792e <_dtoa_r+0x1b2>
 8017836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017838:	9617      	str	r6, [sp, #92]	; 0x5c
 801783a:	0319      	lsls	r1, r3, #12
 801783c:	4b99      	ldr	r3, [pc, #612]	; (8017aa4 <_dtoa_r+0x328>)
 801783e:	0b09      	lsrs	r1, r1, #12
 8017840:	430b      	orrs	r3, r1
 8017842:	4999      	ldr	r1, [pc, #612]	; (8017aa8 <_dtoa_r+0x32c>)
 8017844:	1857      	adds	r7, r2, r1
 8017846:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017848:	9911      	ldr	r1, [sp, #68]	; 0x44
 801784a:	0019      	movs	r1, r3
 801784c:	2200      	movs	r2, #0
 801784e:	4b97      	ldr	r3, [pc, #604]	; (8017aac <_dtoa_r+0x330>)
 8017850:	f7ea fe3a 	bl	80024c8 <__aeabi_dsub>
 8017854:	4a96      	ldr	r2, [pc, #600]	; (8017ab0 <_dtoa_r+0x334>)
 8017856:	4b97      	ldr	r3, [pc, #604]	; (8017ab4 <_dtoa_r+0x338>)
 8017858:	f7ea fb74 	bl	8001f44 <__aeabi_dmul>
 801785c:	4a96      	ldr	r2, [pc, #600]	; (8017ab8 <_dtoa_r+0x33c>)
 801785e:	4b97      	ldr	r3, [pc, #604]	; (8017abc <_dtoa_r+0x340>)
 8017860:	f7e9 fc16 	bl	8001090 <__aeabi_dadd>
 8017864:	0004      	movs	r4, r0
 8017866:	0038      	movs	r0, r7
 8017868:	000d      	movs	r5, r1
 801786a:	f7eb fa03 	bl	8002c74 <__aeabi_i2d>
 801786e:	4a94      	ldr	r2, [pc, #592]	; (8017ac0 <_dtoa_r+0x344>)
 8017870:	4b94      	ldr	r3, [pc, #592]	; (8017ac4 <_dtoa_r+0x348>)
 8017872:	f7ea fb67 	bl	8001f44 <__aeabi_dmul>
 8017876:	0002      	movs	r2, r0
 8017878:	000b      	movs	r3, r1
 801787a:	0020      	movs	r0, r4
 801787c:	0029      	movs	r1, r5
 801787e:	f7e9 fc07 	bl	8001090 <__aeabi_dadd>
 8017882:	0004      	movs	r4, r0
 8017884:	000d      	movs	r5, r1
 8017886:	f7eb f9bf 	bl	8002c08 <__aeabi_d2iz>
 801788a:	2200      	movs	r2, #0
 801788c:	9003      	str	r0, [sp, #12]
 801788e:	2300      	movs	r3, #0
 8017890:	0020      	movs	r0, r4
 8017892:	0029      	movs	r1, r5
 8017894:	f7e8 fde8 	bl	8000468 <__aeabi_dcmplt>
 8017898:	2800      	cmp	r0, #0
 801789a:	d00b      	beq.n	80178b4 <_dtoa_r+0x138>
 801789c:	9803      	ldr	r0, [sp, #12]
 801789e:	f7eb f9e9 	bl	8002c74 <__aeabi_i2d>
 80178a2:	002b      	movs	r3, r5
 80178a4:	0022      	movs	r2, r4
 80178a6:	f7e8 fdd9 	bl	800045c <__aeabi_dcmpeq>
 80178aa:	4243      	negs	r3, r0
 80178ac:	4158      	adcs	r0, r3
 80178ae:	9b03      	ldr	r3, [sp, #12]
 80178b0:	1a1b      	subs	r3, r3, r0
 80178b2:	9303      	str	r3, [sp, #12]
 80178b4:	2301      	movs	r3, #1
 80178b6:	9316      	str	r3, [sp, #88]	; 0x58
 80178b8:	9b03      	ldr	r3, [sp, #12]
 80178ba:	2b16      	cmp	r3, #22
 80178bc:	d810      	bhi.n	80178e0 <_dtoa_r+0x164>
 80178be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80178c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80178c2:	9a03      	ldr	r2, [sp, #12]
 80178c4:	4b80      	ldr	r3, [pc, #512]	; (8017ac8 <_dtoa_r+0x34c>)
 80178c6:	00d2      	lsls	r2, r2, #3
 80178c8:	189b      	adds	r3, r3, r2
 80178ca:	681a      	ldr	r2, [r3, #0]
 80178cc:	685b      	ldr	r3, [r3, #4]
 80178ce:	f7e8 fdcb 	bl	8000468 <__aeabi_dcmplt>
 80178d2:	2800      	cmp	r0, #0
 80178d4:	d047      	beq.n	8017966 <_dtoa_r+0x1ea>
 80178d6:	9b03      	ldr	r3, [sp, #12]
 80178d8:	3b01      	subs	r3, #1
 80178da:	9303      	str	r3, [sp, #12]
 80178dc:	2300      	movs	r3, #0
 80178de:	9316      	str	r3, [sp, #88]	; 0x58
 80178e0:	2200      	movs	r2, #0
 80178e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80178e4:	920a      	str	r2, [sp, #40]	; 0x28
 80178e6:	1bdb      	subs	r3, r3, r7
 80178e8:	1e5a      	subs	r2, r3, #1
 80178ea:	d53e      	bpl.n	801796a <_dtoa_r+0x1ee>
 80178ec:	2201      	movs	r2, #1
 80178ee:	1ad3      	subs	r3, r2, r3
 80178f0:	930a      	str	r3, [sp, #40]	; 0x28
 80178f2:	2300      	movs	r3, #0
 80178f4:	930c      	str	r3, [sp, #48]	; 0x30
 80178f6:	9b03      	ldr	r3, [sp, #12]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	db38      	blt.n	801796e <_dtoa_r+0x1f2>
 80178fc:	9a03      	ldr	r2, [sp, #12]
 80178fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017900:	4694      	mov	ip, r2
 8017902:	4463      	add	r3, ip
 8017904:	930c      	str	r3, [sp, #48]	; 0x30
 8017906:	2300      	movs	r3, #0
 8017908:	9213      	str	r2, [sp, #76]	; 0x4c
 801790a:	930d      	str	r3, [sp, #52]	; 0x34
 801790c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801790e:	2401      	movs	r4, #1
 8017910:	2b09      	cmp	r3, #9
 8017912:	d867      	bhi.n	80179e4 <_dtoa_r+0x268>
 8017914:	2b05      	cmp	r3, #5
 8017916:	dd02      	ble.n	801791e <_dtoa_r+0x1a2>
 8017918:	2400      	movs	r4, #0
 801791a:	3b04      	subs	r3, #4
 801791c:	9322      	str	r3, [sp, #136]	; 0x88
 801791e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017920:	1e98      	subs	r0, r3, #2
 8017922:	2803      	cmp	r0, #3
 8017924:	d867      	bhi.n	80179f6 <_dtoa_r+0x27a>
 8017926:	f7e8 fbff 	bl	8000128 <__gnu_thumb1_case_uqi>
 801792a:	3a2b      	.short	0x3a2b
 801792c:	5b38      	.short	0x5b38
 801792e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017930:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017932:	18f6      	adds	r6, r6, r3
 8017934:	4b65      	ldr	r3, [pc, #404]	; (8017acc <_dtoa_r+0x350>)
 8017936:	18f2      	adds	r2, r6, r3
 8017938:	2a20      	cmp	r2, #32
 801793a:	dd0f      	ble.n	801795c <_dtoa_r+0x1e0>
 801793c:	2340      	movs	r3, #64	; 0x40
 801793e:	1a9b      	subs	r3, r3, r2
 8017940:	409f      	lsls	r7, r3
 8017942:	4b63      	ldr	r3, [pc, #396]	; (8017ad0 <_dtoa_r+0x354>)
 8017944:	0038      	movs	r0, r7
 8017946:	18f3      	adds	r3, r6, r3
 8017948:	40dc      	lsrs	r4, r3
 801794a:	4320      	orrs	r0, r4
 801794c:	f7eb f9c2 	bl	8002cd4 <__aeabi_ui2d>
 8017950:	2201      	movs	r2, #1
 8017952:	4b60      	ldr	r3, [pc, #384]	; (8017ad4 <_dtoa_r+0x358>)
 8017954:	1e77      	subs	r7, r6, #1
 8017956:	18cb      	adds	r3, r1, r3
 8017958:	9217      	str	r2, [sp, #92]	; 0x5c
 801795a:	e776      	b.n	801784a <_dtoa_r+0xce>
 801795c:	2320      	movs	r3, #32
 801795e:	0020      	movs	r0, r4
 8017960:	1a9b      	subs	r3, r3, r2
 8017962:	4098      	lsls	r0, r3
 8017964:	e7f2      	b.n	801794c <_dtoa_r+0x1d0>
 8017966:	9016      	str	r0, [sp, #88]	; 0x58
 8017968:	e7ba      	b.n	80178e0 <_dtoa_r+0x164>
 801796a:	920c      	str	r2, [sp, #48]	; 0x30
 801796c:	e7c3      	b.n	80178f6 <_dtoa_r+0x17a>
 801796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017970:	9a03      	ldr	r2, [sp, #12]
 8017972:	1a9b      	subs	r3, r3, r2
 8017974:	930a      	str	r3, [sp, #40]	; 0x28
 8017976:	4253      	negs	r3, r2
 8017978:	930d      	str	r3, [sp, #52]	; 0x34
 801797a:	2300      	movs	r3, #0
 801797c:	9313      	str	r3, [sp, #76]	; 0x4c
 801797e:	e7c5      	b.n	801790c <_dtoa_r+0x190>
 8017980:	2300      	movs	r3, #0
 8017982:	930f      	str	r3, [sp, #60]	; 0x3c
 8017984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017986:	930b      	str	r3, [sp, #44]	; 0x2c
 8017988:	9307      	str	r3, [sp, #28]
 801798a:	2b00      	cmp	r3, #0
 801798c:	dc13      	bgt.n	80179b6 <_dtoa_r+0x23a>
 801798e:	2301      	movs	r3, #1
 8017990:	001a      	movs	r2, r3
 8017992:	930b      	str	r3, [sp, #44]	; 0x2c
 8017994:	9307      	str	r3, [sp, #28]
 8017996:	9223      	str	r2, [sp, #140]	; 0x8c
 8017998:	e00d      	b.n	80179b6 <_dtoa_r+0x23a>
 801799a:	2301      	movs	r3, #1
 801799c:	e7f1      	b.n	8017982 <_dtoa_r+0x206>
 801799e:	2300      	movs	r3, #0
 80179a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80179a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80179a4:	4694      	mov	ip, r2
 80179a6:	9b03      	ldr	r3, [sp, #12]
 80179a8:	4463      	add	r3, ip
 80179aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80179ac:	3301      	adds	r3, #1
 80179ae:	9307      	str	r3, [sp, #28]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	dc00      	bgt.n	80179b6 <_dtoa_r+0x23a>
 80179b4:	2301      	movs	r3, #1
 80179b6:	2100      	movs	r1, #0
 80179b8:	2204      	movs	r2, #4
 80179ba:	0010      	movs	r0, r2
 80179bc:	3014      	adds	r0, #20
 80179be:	4298      	cmp	r0, r3
 80179c0:	d91d      	bls.n	80179fe <_dtoa_r+0x282>
 80179c2:	9b04      	ldr	r3, [sp, #16]
 80179c4:	0018      	movs	r0, r3
 80179c6:	63d9      	str	r1, [r3, #60]	; 0x3c
 80179c8:	f7fd fd70 	bl	80154ac <_Balloc>
 80179cc:	9006      	str	r0, [sp, #24]
 80179ce:	2800      	cmp	r0, #0
 80179d0:	d118      	bne.n	8017a04 <_dtoa_r+0x288>
 80179d2:	21b0      	movs	r1, #176	; 0xb0
 80179d4:	4b40      	ldr	r3, [pc, #256]	; (8017ad8 <_dtoa_r+0x35c>)
 80179d6:	4841      	ldr	r0, [pc, #260]	; (8017adc <_dtoa_r+0x360>)
 80179d8:	9a06      	ldr	r2, [sp, #24]
 80179da:	31ff      	adds	r1, #255	; 0xff
 80179dc:	f7ff fdd2 	bl	8017584 <__assert_func>
 80179e0:	2301      	movs	r3, #1
 80179e2:	e7dd      	b.n	80179a0 <_dtoa_r+0x224>
 80179e4:	2300      	movs	r3, #0
 80179e6:	940f      	str	r4, [sp, #60]	; 0x3c
 80179e8:	9322      	str	r3, [sp, #136]	; 0x88
 80179ea:	3b01      	subs	r3, #1
 80179ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80179ee:	9307      	str	r3, [sp, #28]
 80179f0:	2200      	movs	r2, #0
 80179f2:	3313      	adds	r3, #19
 80179f4:	e7cf      	b.n	8017996 <_dtoa_r+0x21a>
 80179f6:	2301      	movs	r3, #1
 80179f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80179fa:	3b02      	subs	r3, #2
 80179fc:	e7f6      	b.n	80179ec <_dtoa_r+0x270>
 80179fe:	3101      	adds	r1, #1
 8017a00:	0052      	lsls	r2, r2, #1
 8017a02:	e7da      	b.n	80179ba <_dtoa_r+0x23e>
 8017a04:	9b04      	ldr	r3, [sp, #16]
 8017a06:	9a06      	ldr	r2, [sp, #24]
 8017a08:	639a      	str	r2, [r3, #56]	; 0x38
 8017a0a:	9b07      	ldr	r3, [sp, #28]
 8017a0c:	2b0e      	cmp	r3, #14
 8017a0e:	d900      	bls.n	8017a12 <_dtoa_r+0x296>
 8017a10:	e0e3      	b.n	8017bda <_dtoa_r+0x45e>
 8017a12:	2c00      	cmp	r4, #0
 8017a14:	d100      	bne.n	8017a18 <_dtoa_r+0x29c>
 8017a16:	e0e0      	b.n	8017bda <_dtoa_r+0x45e>
 8017a18:	9b03      	ldr	r3, [sp, #12]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	dd62      	ble.n	8017ae4 <_dtoa_r+0x368>
 8017a1e:	210f      	movs	r1, #15
 8017a20:	9a03      	ldr	r2, [sp, #12]
 8017a22:	4b29      	ldr	r3, [pc, #164]	; (8017ac8 <_dtoa_r+0x34c>)
 8017a24:	400a      	ands	r2, r1
 8017a26:	00d2      	lsls	r2, r2, #3
 8017a28:	189b      	adds	r3, r3, r2
 8017a2a:	681e      	ldr	r6, [r3, #0]
 8017a2c:	685f      	ldr	r7, [r3, #4]
 8017a2e:	9b03      	ldr	r3, [sp, #12]
 8017a30:	2402      	movs	r4, #2
 8017a32:	111d      	asrs	r5, r3, #4
 8017a34:	05db      	lsls	r3, r3, #23
 8017a36:	d50a      	bpl.n	8017a4e <_dtoa_r+0x2d2>
 8017a38:	4b29      	ldr	r3, [pc, #164]	; (8017ae0 <_dtoa_r+0x364>)
 8017a3a:	400d      	ands	r5, r1
 8017a3c:	6a1a      	ldr	r2, [r3, #32]
 8017a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017a42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017a44:	f7e9 fe84 	bl	8001750 <__aeabi_ddiv>
 8017a48:	9008      	str	r0, [sp, #32]
 8017a4a:	9109      	str	r1, [sp, #36]	; 0x24
 8017a4c:	3401      	adds	r4, #1
 8017a4e:	4b24      	ldr	r3, [pc, #144]	; (8017ae0 <_dtoa_r+0x364>)
 8017a50:	930e      	str	r3, [sp, #56]	; 0x38
 8017a52:	2d00      	cmp	r5, #0
 8017a54:	d108      	bne.n	8017a68 <_dtoa_r+0x2ec>
 8017a56:	9808      	ldr	r0, [sp, #32]
 8017a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a5a:	0032      	movs	r2, r6
 8017a5c:	003b      	movs	r3, r7
 8017a5e:	f7e9 fe77 	bl	8001750 <__aeabi_ddiv>
 8017a62:	9008      	str	r0, [sp, #32]
 8017a64:	9109      	str	r1, [sp, #36]	; 0x24
 8017a66:	e058      	b.n	8017b1a <_dtoa_r+0x39e>
 8017a68:	2301      	movs	r3, #1
 8017a6a:	421d      	tst	r5, r3
 8017a6c:	d009      	beq.n	8017a82 <_dtoa_r+0x306>
 8017a6e:	18e4      	adds	r4, r4, r3
 8017a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a72:	0030      	movs	r0, r6
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	685b      	ldr	r3, [r3, #4]
 8017a78:	0039      	movs	r1, r7
 8017a7a:	f7ea fa63 	bl	8001f44 <__aeabi_dmul>
 8017a7e:	0006      	movs	r6, r0
 8017a80:	000f      	movs	r7, r1
 8017a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a84:	106d      	asrs	r5, r5, #1
 8017a86:	3308      	adds	r3, #8
 8017a88:	e7e2      	b.n	8017a50 <_dtoa_r+0x2d4>
 8017a8a:	46c0      	nop			; (mov r8, r8)
 8017a8c:	7ff00000 	.word	0x7ff00000
 8017a90:	0000270f 	.word	0x0000270f
 8017a94:	0801c995 	.word	0x0801c995
 8017a98:	0801c998 	.word	0x0801c998
 8017a9c:	0801c92e 	.word	0x0801c92e
 8017aa0:	0801c92f 	.word	0x0801c92f
 8017aa4:	3ff00000 	.word	0x3ff00000
 8017aa8:	fffffc01 	.word	0xfffffc01
 8017aac:	3ff80000 	.word	0x3ff80000
 8017ab0:	636f4361 	.word	0x636f4361
 8017ab4:	3fd287a7 	.word	0x3fd287a7
 8017ab8:	8b60c8b3 	.word	0x8b60c8b3
 8017abc:	3fc68a28 	.word	0x3fc68a28
 8017ac0:	509f79fb 	.word	0x509f79fb
 8017ac4:	3fd34413 	.word	0x3fd34413
 8017ac8:	0801c828 	.word	0x0801c828
 8017acc:	00000432 	.word	0x00000432
 8017ad0:	00000412 	.word	0x00000412
 8017ad4:	fe100000 	.word	0xfe100000
 8017ad8:	0801c731 	.word	0x0801c731
 8017adc:	0801c999 	.word	0x0801c999
 8017ae0:	0801c800 	.word	0x0801c800
 8017ae4:	9b03      	ldr	r3, [sp, #12]
 8017ae6:	2402      	movs	r4, #2
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d016      	beq.n	8017b1a <_dtoa_r+0x39e>
 8017aec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017aee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017af0:	220f      	movs	r2, #15
 8017af2:	425d      	negs	r5, r3
 8017af4:	402a      	ands	r2, r5
 8017af6:	4bdd      	ldr	r3, [pc, #884]	; (8017e6c <_dtoa_r+0x6f0>)
 8017af8:	00d2      	lsls	r2, r2, #3
 8017afa:	189b      	adds	r3, r3, r2
 8017afc:	681a      	ldr	r2, [r3, #0]
 8017afe:	685b      	ldr	r3, [r3, #4]
 8017b00:	f7ea fa20 	bl	8001f44 <__aeabi_dmul>
 8017b04:	2701      	movs	r7, #1
 8017b06:	2300      	movs	r3, #0
 8017b08:	9008      	str	r0, [sp, #32]
 8017b0a:	9109      	str	r1, [sp, #36]	; 0x24
 8017b0c:	4ed8      	ldr	r6, [pc, #864]	; (8017e70 <_dtoa_r+0x6f4>)
 8017b0e:	112d      	asrs	r5, r5, #4
 8017b10:	2d00      	cmp	r5, #0
 8017b12:	d000      	beq.n	8017b16 <_dtoa_r+0x39a>
 8017b14:	e091      	b.n	8017c3a <_dtoa_r+0x4be>
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d1a3      	bne.n	8017a62 <_dtoa_r+0x2e6>
 8017b1a:	9e08      	ldr	r6, [sp, #32]
 8017b1c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017b1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d100      	bne.n	8017b26 <_dtoa_r+0x3aa>
 8017b24:	e094      	b.n	8017c50 <_dtoa_r+0x4d4>
 8017b26:	2200      	movs	r2, #0
 8017b28:	0030      	movs	r0, r6
 8017b2a:	0039      	movs	r1, r7
 8017b2c:	4bd1      	ldr	r3, [pc, #836]	; (8017e74 <_dtoa_r+0x6f8>)
 8017b2e:	f7e8 fc9b 	bl	8000468 <__aeabi_dcmplt>
 8017b32:	2800      	cmp	r0, #0
 8017b34:	d100      	bne.n	8017b38 <_dtoa_r+0x3bc>
 8017b36:	e08b      	b.n	8017c50 <_dtoa_r+0x4d4>
 8017b38:	9b07      	ldr	r3, [sp, #28]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d100      	bne.n	8017b40 <_dtoa_r+0x3c4>
 8017b3e:	e087      	b.n	8017c50 <_dtoa_r+0x4d4>
 8017b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	dd45      	ble.n	8017bd2 <_dtoa_r+0x456>
 8017b46:	9b03      	ldr	r3, [sp, #12]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	3b01      	subs	r3, #1
 8017b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8017b4e:	0030      	movs	r0, r6
 8017b50:	4bc9      	ldr	r3, [pc, #804]	; (8017e78 <_dtoa_r+0x6fc>)
 8017b52:	0039      	movs	r1, r7
 8017b54:	f7ea f9f6 	bl	8001f44 <__aeabi_dmul>
 8017b58:	9008      	str	r0, [sp, #32]
 8017b5a:	9109      	str	r1, [sp, #36]	; 0x24
 8017b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b5e:	3401      	adds	r4, #1
 8017b60:	0020      	movs	r0, r4
 8017b62:	9e08      	ldr	r6, [sp, #32]
 8017b64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017b66:	9312      	str	r3, [sp, #72]	; 0x48
 8017b68:	f7eb f884 	bl	8002c74 <__aeabi_i2d>
 8017b6c:	0032      	movs	r2, r6
 8017b6e:	003b      	movs	r3, r7
 8017b70:	f7ea f9e8 	bl	8001f44 <__aeabi_dmul>
 8017b74:	2200      	movs	r2, #0
 8017b76:	4bc1      	ldr	r3, [pc, #772]	; (8017e7c <_dtoa_r+0x700>)
 8017b78:	f7e9 fa8a 	bl	8001090 <__aeabi_dadd>
 8017b7c:	4ac0      	ldr	r2, [pc, #768]	; (8017e80 <_dtoa_r+0x704>)
 8017b7e:	9014      	str	r0, [sp, #80]	; 0x50
 8017b80:	9115      	str	r1, [sp, #84]	; 0x54
 8017b82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b84:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017b86:	4694      	mov	ip, r2
 8017b88:	9308      	str	r3, [sp, #32]
 8017b8a:	9409      	str	r4, [sp, #36]	; 0x24
 8017b8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b8e:	4463      	add	r3, ip
 8017b90:	9318      	str	r3, [sp, #96]	; 0x60
 8017b92:	9309      	str	r3, [sp, #36]	; 0x24
 8017b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d15e      	bne.n	8017c58 <_dtoa_r+0x4dc>
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	4bb9      	ldr	r3, [pc, #740]	; (8017e84 <_dtoa_r+0x708>)
 8017b9e:	0030      	movs	r0, r6
 8017ba0:	0039      	movs	r1, r7
 8017ba2:	f7ea fc91 	bl	80024c8 <__aeabi_dsub>
 8017ba6:	9a08      	ldr	r2, [sp, #32]
 8017ba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017baa:	0004      	movs	r4, r0
 8017bac:	000d      	movs	r5, r1
 8017bae:	f7e8 fc6f 	bl	8000490 <__aeabi_dcmpgt>
 8017bb2:	2800      	cmp	r0, #0
 8017bb4:	d000      	beq.n	8017bb8 <_dtoa_r+0x43c>
 8017bb6:	e2b3      	b.n	8018120 <_dtoa_r+0x9a4>
 8017bb8:	48b3      	ldr	r0, [pc, #716]	; (8017e88 <_dtoa_r+0x70c>)
 8017bba:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017bbc:	4684      	mov	ip, r0
 8017bbe:	4461      	add	r1, ip
 8017bc0:	000b      	movs	r3, r1
 8017bc2:	0020      	movs	r0, r4
 8017bc4:	0029      	movs	r1, r5
 8017bc6:	9a08      	ldr	r2, [sp, #32]
 8017bc8:	f7e8 fc4e 	bl	8000468 <__aeabi_dcmplt>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	d000      	beq.n	8017bd2 <_dtoa_r+0x456>
 8017bd0:	e2a3      	b.n	801811a <_dtoa_r+0x99e>
 8017bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017bd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017bd6:	9308      	str	r3, [sp, #32]
 8017bd8:	9409      	str	r4, [sp, #36]	; 0x24
 8017bda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	da00      	bge.n	8017be2 <_dtoa_r+0x466>
 8017be0:	e179      	b.n	8017ed6 <_dtoa_r+0x75a>
 8017be2:	9a03      	ldr	r2, [sp, #12]
 8017be4:	2a0e      	cmp	r2, #14
 8017be6:	dd00      	ble.n	8017bea <_dtoa_r+0x46e>
 8017be8:	e175      	b.n	8017ed6 <_dtoa_r+0x75a>
 8017bea:	4ba0      	ldr	r3, [pc, #640]	; (8017e6c <_dtoa_r+0x6f0>)
 8017bec:	00d2      	lsls	r2, r2, #3
 8017bee:	189b      	adds	r3, r3, r2
 8017bf0:	681e      	ldr	r6, [r3, #0]
 8017bf2:	685f      	ldr	r7, [r3, #4]
 8017bf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	db00      	blt.n	8017bfc <_dtoa_r+0x480>
 8017bfa:	e0e5      	b.n	8017dc8 <_dtoa_r+0x64c>
 8017bfc:	9b07      	ldr	r3, [sp, #28]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	dd00      	ble.n	8017c04 <_dtoa_r+0x488>
 8017c02:	e0e1      	b.n	8017dc8 <_dtoa_r+0x64c>
 8017c04:	d000      	beq.n	8017c08 <_dtoa_r+0x48c>
 8017c06:	e288      	b.n	801811a <_dtoa_r+0x99e>
 8017c08:	2200      	movs	r2, #0
 8017c0a:	0030      	movs	r0, r6
 8017c0c:	0039      	movs	r1, r7
 8017c0e:	4b9d      	ldr	r3, [pc, #628]	; (8017e84 <_dtoa_r+0x708>)
 8017c10:	f7ea f998 	bl	8001f44 <__aeabi_dmul>
 8017c14:	9a08      	ldr	r2, [sp, #32]
 8017c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c18:	f7e8 fc44 	bl	80004a4 <__aeabi_dcmpge>
 8017c1c:	9e07      	ldr	r6, [sp, #28]
 8017c1e:	0037      	movs	r7, r6
 8017c20:	2800      	cmp	r0, #0
 8017c22:	d000      	beq.n	8017c26 <_dtoa_r+0x4aa>
 8017c24:	e25f      	b.n	80180e6 <_dtoa_r+0x96a>
 8017c26:	9b06      	ldr	r3, [sp, #24]
 8017c28:	9a06      	ldr	r2, [sp, #24]
 8017c2a:	3301      	adds	r3, #1
 8017c2c:	9308      	str	r3, [sp, #32]
 8017c2e:	2331      	movs	r3, #49	; 0x31
 8017c30:	7013      	strb	r3, [r2, #0]
 8017c32:	9b03      	ldr	r3, [sp, #12]
 8017c34:	3301      	adds	r3, #1
 8017c36:	9303      	str	r3, [sp, #12]
 8017c38:	e25a      	b.n	80180f0 <_dtoa_r+0x974>
 8017c3a:	423d      	tst	r5, r7
 8017c3c:	d005      	beq.n	8017c4a <_dtoa_r+0x4ce>
 8017c3e:	6832      	ldr	r2, [r6, #0]
 8017c40:	6873      	ldr	r3, [r6, #4]
 8017c42:	f7ea f97f 	bl	8001f44 <__aeabi_dmul>
 8017c46:	003b      	movs	r3, r7
 8017c48:	3401      	adds	r4, #1
 8017c4a:	106d      	asrs	r5, r5, #1
 8017c4c:	3608      	adds	r6, #8
 8017c4e:	e75f      	b.n	8017b10 <_dtoa_r+0x394>
 8017c50:	9b03      	ldr	r3, [sp, #12]
 8017c52:	930e      	str	r3, [sp, #56]	; 0x38
 8017c54:	9b07      	ldr	r3, [sp, #28]
 8017c56:	e783      	b.n	8017b60 <_dtoa_r+0x3e4>
 8017c58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c5a:	4b84      	ldr	r3, [pc, #528]	; (8017e6c <_dtoa_r+0x6f0>)
 8017c5c:	3a01      	subs	r2, #1
 8017c5e:	00d2      	lsls	r2, r2, #3
 8017c60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017c62:	189b      	adds	r3, r3, r2
 8017c64:	9c08      	ldr	r4, [sp, #32]
 8017c66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	2900      	cmp	r1, #0
 8017c6e:	d051      	beq.n	8017d14 <_dtoa_r+0x598>
 8017c70:	2000      	movs	r0, #0
 8017c72:	4986      	ldr	r1, [pc, #536]	; (8017e8c <_dtoa_r+0x710>)
 8017c74:	f7e9 fd6c 	bl	8001750 <__aeabi_ddiv>
 8017c78:	0022      	movs	r2, r4
 8017c7a:	002b      	movs	r3, r5
 8017c7c:	f7ea fc24 	bl	80024c8 <__aeabi_dsub>
 8017c80:	9a06      	ldr	r2, [sp, #24]
 8017c82:	0004      	movs	r4, r0
 8017c84:	4694      	mov	ip, r2
 8017c86:	000d      	movs	r5, r1
 8017c88:	9b06      	ldr	r3, [sp, #24]
 8017c8a:	9314      	str	r3, [sp, #80]	; 0x50
 8017c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c8e:	4463      	add	r3, ip
 8017c90:	9318      	str	r3, [sp, #96]	; 0x60
 8017c92:	0039      	movs	r1, r7
 8017c94:	0030      	movs	r0, r6
 8017c96:	f7ea ffb7 	bl	8002c08 <__aeabi_d2iz>
 8017c9a:	9012      	str	r0, [sp, #72]	; 0x48
 8017c9c:	f7ea ffea 	bl	8002c74 <__aeabi_i2d>
 8017ca0:	0002      	movs	r2, r0
 8017ca2:	000b      	movs	r3, r1
 8017ca4:	0030      	movs	r0, r6
 8017ca6:	0039      	movs	r1, r7
 8017ca8:	f7ea fc0e 	bl	80024c8 <__aeabi_dsub>
 8017cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	9308      	str	r3, [sp, #32]
 8017cb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017cb6:	0006      	movs	r6, r0
 8017cb8:	3330      	adds	r3, #48	; 0x30
 8017cba:	7013      	strb	r3, [r2, #0]
 8017cbc:	0022      	movs	r2, r4
 8017cbe:	002b      	movs	r3, r5
 8017cc0:	000f      	movs	r7, r1
 8017cc2:	f7e8 fbd1 	bl	8000468 <__aeabi_dcmplt>
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	d174      	bne.n	8017db4 <_dtoa_r+0x638>
 8017cca:	0032      	movs	r2, r6
 8017ccc:	003b      	movs	r3, r7
 8017cce:	2000      	movs	r0, #0
 8017cd0:	4968      	ldr	r1, [pc, #416]	; (8017e74 <_dtoa_r+0x6f8>)
 8017cd2:	f7ea fbf9 	bl	80024c8 <__aeabi_dsub>
 8017cd6:	0022      	movs	r2, r4
 8017cd8:	002b      	movs	r3, r5
 8017cda:	f7e8 fbc5 	bl	8000468 <__aeabi_dcmplt>
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	d000      	beq.n	8017ce4 <_dtoa_r+0x568>
 8017ce2:	e0d7      	b.n	8017e94 <_dtoa_r+0x718>
 8017ce4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017ce6:	9a08      	ldr	r2, [sp, #32]
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d100      	bne.n	8017cee <_dtoa_r+0x572>
 8017cec:	e771      	b.n	8017bd2 <_dtoa_r+0x456>
 8017cee:	2200      	movs	r2, #0
 8017cf0:	0020      	movs	r0, r4
 8017cf2:	0029      	movs	r1, r5
 8017cf4:	4b60      	ldr	r3, [pc, #384]	; (8017e78 <_dtoa_r+0x6fc>)
 8017cf6:	f7ea f925 	bl	8001f44 <__aeabi_dmul>
 8017cfa:	4b5f      	ldr	r3, [pc, #380]	; (8017e78 <_dtoa_r+0x6fc>)
 8017cfc:	0004      	movs	r4, r0
 8017cfe:	000d      	movs	r5, r1
 8017d00:	0030      	movs	r0, r6
 8017d02:	0039      	movs	r1, r7
 8017d04:	2200      	movs	r2, #0
 8017d06:	f7ea f91d 	bl	8001f44 <__aeabi_dmul>
 8017d0a:	9b08      	ldr	r3, [sp, #32]
 8017d0c:	0006      	movs	r6, r0
 8017d0e:	000f      	movs	r7, r1
 8017d10:	9314      	str	r3, [sp, #80]	; 0x50
 8017d12:	e7be      	b.n	8017c92 <_dtoa_r+0x516>
 8017d14:	0020      	movs	r0, r4
 8017d16:	0029      	movs	r1, r5
 8017d18:	f7ea f914 	bl	8001f44 <__aeabi_dmul>
 8017d1c:	9a06      	ldr	r2, [sp, #24]
 8017d1e:	9b06      	ldr	r3, [sp, #24]
 8017d20:	4694      	mov	ip, r2
 8017d22:	9308      	str	r3, [sp, #32]
 8017d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d26:	9014      	str	r0, [sp, #80]	; 0x50
 8017d28:	9115      	str	r1, [sp, #84]	; 0x54
 8017d2a:	4463      	add	r3, ip
 8017d2c:	9319      	str	r3, [sp, #100]	; 0x64
 8017d2e:	0030      	movs	r0, r6
 8017d30:	0039      	movs	r1, r7
 8017d32:	f7ea ff69 	bl	8002c08 <__aeabi_d2iz>
 8017d36:	9018      	str	r0, [sp, #96]	; 0x60
 8017d38:	f7ea ff9c 	bl	8002c74 <__aeabi_i2d>
 8017d3c:	0002      	movs	r2, r0
 8017d3e:	000b      	movs	r3, r1
 8017d40:	0030      	movs	r0, r6
 8017d42:	0039      	movs	r1, r7
 8017d44:	f7ea fbc0 	bl	80024c8 <__aeabi_dsub>
 8017d48:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8017d4a:	9b08      	ldr	r3, [sp, #32]
 8017d4c:	3630      	adds	r6, #48	; 0x30
 8017d4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017d50:	701e      	strb	r6, [r3, #0]
 8017d52:	3301      	adds	r3, #1
 8017d54:	0004      	movs	r4, r0
 8017d56:	000d      	movs	r5, r1
 8017d58:	9308      	str	r3, [sp, #32]
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d12d      	bne.n	8017dba <_dtoa_r+0x63e>
 8017d5e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017d60:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017d62:	9a06      	ldr	r2, [sp, #24]
 8017d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d66:	4694      	mov	ip, r2
 8017d68:	4463      	add	r3, ip
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	9308      	str	r3, [sp, #32]
 8017d6e:	4b47      	ldr	r3, [pc, #284]	; (8017e8c <_dtoa_r+0x710>)
 8017d70:	f7e9 f98e 	bl	8001090 <__aeabi_dadd>
 8017d74:	0002      	movs	r2, r0
 8017d76:	000b      	movs	r3, r1
 8017d78:	0020      	movs	r0, r4
 8017d7a:	0029      	movs	r1, r5
 8017d7c:	f7e8 fb88 	bl	8000490 <__aeabi_dcmpgt>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d000      	beq.n	8017d86 <_dtoa_r+0x60a>
 8017d84:	e086      	b.n	8017e94 <_dtoa_r+0x718>
 8017d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d8a:	2000      	movs	r0, #0
 8017d8c:	493f      	ldr	r1, [pc, #252]	; (8017e8c <_dtoa_r+0x710>)
 8017d8e:	f7ea fb9b 	bl	80024c8 <__aeabi_dsub>
 8017d92:	0002      	movs	r2, r0
 8017d94:	000b      	movs	r3, r1
 8017d96:	0020      	movs	r0, r4
 8017d98:	0029      	movs	r1, r5
 8017d9a:	f7e8 fb65 	bl	8000468 <__aeabi_dcmplt>
 8017d9e:	2800      	cmp	r0, #0
 8017da0:	d100      	bne.n	8017da4 <_dtoa_r+0x628>
 8017da2:	e716      	b.n	8017bd2 <_dtoa_r+0x456>
 8017da4:	9b08      	ldr	r3, [sp, #32]
 8017da6:	001a      	movs	r2, r3
 8017da8:	3a01      	subs	r2, #1
 8017daa:	9208      	str	r2, [sp, #32]
 8017dac:	7812      	ldrb	r2, [r2, #0]
 8017dae:	2a30      	cmp	r2, #48	; 0x30
 8017db0:	d0f8      	beq.n	8017da4 <_dtoa_r+0x628>
 8017db2:	9308      	str	r3, [sp, #32]
 8017db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017db6:	9303      	str	r3, [sp, #12]
 8017db8:	e046      	b.n	8017e48 <_dtoa_r+0x6cc>
 8017dba:	2200      	movs	r2, #0
 8017dbc:	4b2e      	ldr	r3, [pc, #184]	; (8017e78 <_dtoa_r+0x6fc>)
 8017dbe:	f7ea f8c1 	bl	8001f44 <__aeabi_dmul>
 8017dc2:	0006      	movs	r6, r0
 8017dc4:	000f      	movs	r7, r1
 8017dc6:	e7b2      	b.n	8017d2e <_dtoa_r+0x5b2>
 8017dc8:	9b06      	ldr	r3, [sp, #24]
 8017dca:	9a06      	ldr	r2, [sp, #24]
 8017dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8017dce:	9b07      	ldr	r3, [sp, #28]
 8017dd0:	9c08      	ldr	r4, [sp, #32]
 8017dd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017dd4:	3b01      	subs	r3, #1
 8017dd6:	189b      	adds	r3, r3, r2
 8017dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dda:	0032      	movs	r2, r6
 8017ddc:	003b      	movs	r3, r7
 8017dde:	0020      	movs	r0, r4
 8017de0:	0029      	movs	r1, r5
 8017de2:	f7e9 fcb5 	bl	8001750 <__aeabi_ddiv>
 8017de6:	f7ea ff0f 	bl	8002c08 <__aeabi_d2iz>
 8017dea:	9007      	str	r0, [sp, #28]
 8017dec:	f7ea ff42 	bl	8002c74 <__aeabi_i2d>
 8017df0:	0032      	movs	r2, r6
 8017df2:	003b      	movs	r3, r7
 8017df4:	f7ea f8a6 	bl	8001f44 <__aeabi_dmul>
 8017df8:	0002      	movs	r2, r0
 8017dfa:	000b      	movs	r3, r1
 8017dfc:	0020      	movs	r0, r4
 8017dfe:	0029      	movs	r1, r5
 8017e00:	f7ea fb62 	bl	80024c8 <__aeabi_dsub>
 8017e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e06:	001a      	movs	r2, r3
 8017e08:	3201      	adds	r2, #1
 8017e0a:	920a      	str	r2, [sp, #40]	; 0x28
 8017e0c:	9208      	str	r2, [sp, #32]
 8017e0e:	9a07      	ldr	r2, [sp, #28]
 8017e10:	3230      	adds	r2, #48	; 0x30
 8017e12:	701a      	strb	r2, [r3, #0]
 8017e14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d14f      	bne.n	8017eba <_dtoa_r+0x73e>
 8017e1a:	0002      	movs	r2, r0
 8017e1c:	000b      	movs	r3, r1
 8017e1e:	f7e9 f937 	bl	8001090 <__aeabi_dadd>
 8017e22:	0032      	movs	r2, r6
 8017e24:	003b      	movs	r3, r7
 8017e26:	0004      	movs	r4, r0
 8017e28:	000d      	movs	r5, r1
 8017e2a:	f7e8 fb31 	bl	8000490 <__aeabi_dcmpgt>
 8017e2e:	2800      	cmp	r0, #0
 8017e30:	d12e      	bne.n	8017e90 <_dtoa_r+0x714>
 8017e32:	0032      	movs	r2, r6
 8017e34:	003b      	movs	r3, r7
 8017e36:	0020      	movs	r0, r4
 8017e38:	0029      	movs	r1, r5
 8017e3a:	f7e8 fb0f 	bl	800045c <__aeabi_dcmpeq>
 8017e3e:	2800      	cmp	r0, #0
 8017e40:	d002      	beq.n	8017e48 <_dtoa_r+0x6cc>
 8017e42:	9b07      	ldr	r3, [sp, #28]
 8017e44:	07de      	lsls	r6, r3, #31
 8017e46:	d423      	bmi.n	8017e90 <_dtoa_r+0x714>
 8017e48:	9905      	ldr	r1, [sp, #20]
 8017e4a:	9804      	ldr	r0, [sp, #16]
 8017e4c:	f7fd fb56 	bl	80154fc <_Bfree>
 8017e50:	2300      	movs	r3, #0
 8017e52:	9a08      	ldr	r2, [sp, #32]
 8017e54:	7013      	strb	r3, [r2, #0]
 8017e56:	9b03      	ldr	r3, [sp, #12]
 8017e58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	6013      	str	r3, [r2, #0]
 8017e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d100      	bne.n	8017e66 <_dtoa_r+0x6ea>
 8017e64:	e4bd      	b.n	80177e2 <_dtoa_r+0x66>
 8017e66:	9a08      	ldr	r2, [sp, #32]
 8017e68:	601a      	str	r2, [r3, #0]
 8017e6a:	e4ba      	b.n	80177e2 <_dtoa_r+0x66>
 8017e6c:	0801c828 	.word	0x0801c828
 8017e70:	0801c800 	.word	0x0801c800
 8017e74:	3ff00000 	.word	0x3ff00000
 8017e78:	40240000 	.word	0x40240000
 8017e7c:	401c0000 	.word	0x401c0000
 8017e80:	fcc00000 	.word	0xfcc00000
 8017e84:	40140000 	.word	0x40140000
 8017e88:	7cc00000 	.word	0x7cc00000
 8017e8c:	3fe00000 	.word	0x3fe00000
 8017e90:	9b03      	ldr	r3, [sp, #12]
 8017e92:	930e      	str	r3, [sp, #56]	; 0x38
 8017e94:	9b08      	ldr	r3, [sp, #32]
 8017e96:	9308      	str	r3, [sp, #32]
 8017e98:	3b01      	subs	r3, #1
 8017e9a:	781a      	ldrb	r2, [r3, #0]
 8017e9c:	2a39      	cmp	r2, #57	; 0x39
 8017e9e:	d108      	bne.n	8017eb2 <_dtoa_r+0x736>
 8017ea0:	9a06      	ldr	r2, [sp, #24]
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d1f7      	bne.n	8017e96 <_dtoa_r+0x71a>
 8017ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ea8:	9906      	ldr	r1, [sp, #24]
 8017eaa:	3201      	adds	r2, #1
 8017eac:	920e      	str	r2, [sp, #56]	; 0x38
 8017eae:	2230      	movs	r2, #48	; 0x30
 8017eb0:	700a      	strb	r2, [r1, #0]
 8017eb2:	781a      	ldrb	r2, [r3, #0]
 8017eb4:	3201      	adds	r2, #1
 8017eb6:	701a      	strb	r2, [r3, #0]
 8017eb8:	e77c      	b.n	8017db4 <_dtoa_r+0x638>
 8017eba:	2200      	movs	r2, #0
 8017ebc:	4ba9      	ldr	r3, [pc, #676]	; (8018164 <_dtoa_r+0x9e8>)
 8017ebe:	f7ea f841 	bl	8001f44 <__aeabi_dmul>
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	0004      	movs	r4, r0
 8017ec8:	000d      	movs	r5, r1
 8017eca:	f7e8 fac7 	bl	800045c <__aeabi_dcmpeq>
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	d100      	bne.n	8017ed4 <_dtoa_r+0x758>
 8017ed2:	e782      	b.n	8017dda <_dtoa_r+0x65e>
 8017ed4:	e7b8      	b.n	8017e48 <_dtoa_r+0x6cc>
 8017ed6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017ed8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017eda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017edc:	2f00      	cmp	r7, #0
 8017ede:	d012      	beq.n	8017f06 <_dtoa_r+0x78a>
 8017ee0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017ee2:	2a01      	cmp	r2, #1
 8017ee4:	dc6e      	bgt.n	8017fc4 <_dtoa_r+0x848>
 8017ee6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017ee8:	2a00      	cmp	r2, #0
 8017eea:	d065      	beq.n	8017fb8 <_dtoa_r+0x83c>
 8017eec:	4a9e      	ldr	r2, [pc, #632]	; (8018168 <_dtoa_r+0x9ec>)
 8017eee:	189b      	adds	r3, r3, r2
 8017ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ef2:	2101      	movs	r1, #1
 8017ef4:	18d2      	adds	r2, r2, r3
 8017ef6:	920a      	str	r2, [sp, #40]	; 0x28
 8017ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017efa:	9804      	ldr	r0, [sp, #16]
 8017efc:	18d3      	adds	r3, r2, r3
 8017efe:	930c      	str	r3, [sp, #48]	; 0x30
 8017f00:	f7fd fbde 	bl	80156c0 <__i2b>
 8017f04:	0007      	movs	r7, r0
 8017f06:	2c00      	cmp	r4, #0
 8017f08:	d00e      	beq.n	8017f28 <_dtoa_r+0x7ac>
 8017f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	dd0b      	ble.n	8017f28 <_dtoa_r+0x7ac>
 8017f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f12:	0023      	movs	r3, r4
 8017f14:	4294      	cmp	r4, r2
 8017f16:	dd00      	ble.n	8017f1a <_dtoa_r+0x79e>
 8017f18:	0013      	movs	r3, r2
 8017f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f1c:	1ae4      	subs	r4, r4, r3
 8017f1e:	1ad2      	subs	r2, r2, r3
 8017f20:	920a      	str	r2, [sp, #40]	; 0x28
 8017f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f24:	1ad3      	subs	r3, r2, r3
 8017f26:	930c      	str	r3, [sp, #48]	; 0x30
 8017f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d01e      	beq.n	8017f6c <_dtoa_r+0x7f0>
 8017f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d05c      	beq.n	8017fee <_dtoa_r+0x872>
 8017f34:	2d00      	cmp	r5, #0
 8017f36:	dd10      	ble.n	8017f5a <_dtoa_r+0x7de>
 8017f38:	0039      	movs	r1, r7
 8017f3a:	002a      	movs	r2, r5
 8017f3c:	9804      	ldr	r0, [sp, #16]
 8017f3e:	f7fd fc87 	bl	8015850 <__pow5mult>
 8017f42:	9a05      	ldr	r2, [sp, #20]
 8017f44:	0001      	movs	r1, r0
 8017f46:	0007      	movs	r7, r0
 8017f48:	9804      	ldr	r0, [sp, #16]
 8017f4a:	f7fd fbd1 	bl	80156f0 <__multiply>
 8017f4e:	0006      	movs	r6, r0
 8017f50:	9905      	ldr	r1, [sp, #20]
 8017f52:	9804      	ldr	r0, [sp, #16]
 8017f54:	f7fd fad2 	bl	80154fc <_Bfree>
 8017f58:	9605      	str	r6, [sp, #20]
 8017f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f5c:	1b5a      	subs	r2, r3, r5
 8017f5e:	42ab      	cmp	r3, r5
 8017f60:	d004      	beq.n	8017f6c <_dtoa_r+0x7f0>
 8017f62:	9905      	ldr	r1, [sp, #20]
 8017f64:	9804      	ldr	r0, [sp, #16]
 8017f66:	f7fd fc73 	bl	8015850 <__pow5mult>
 8017f6a:	9005      	str	r0, [sp, #20]
 8017f6c:	2101      	movs	r1, #1
 8017f6e:	9804      	ldr	r0, [sp, #16]
 8017f70:	f7fd fba6 	bl	80156c0 <__i2b>
 8017f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f76:	0006      	movs	r6, r0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	dd3a      	ble.n	8017ff2 <_dtoa_r+0x876>
 8017f7c:	001a      	movs	r2, r3
 8017f7e:	0001      	movs	r1, r0
 8017f80:	9804      	ldr	r0, [sp, #16]
 8017f82:	f7fd fc65 	bl	8015850 <__pow5mult>
 8017f86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f88:	0006      	movs	r6, r0
 8017f8a:	2500      	movs	r5, #0
 8017f8c:	2b01      	cmp	r3, #1
 8017f8e:	dc38      	bgt.n	8018002 <_dtoa_r+0x886>
 8017f90:	2500      	movs	r5, #0
 8017f92:	9b08      	ldr	r3, [sp, #32]
 8017f94:	42ab      	cmp	r3, r5
 8017f96:	d130      	bne.n	8017ffa <_dtoa_r+0x87e>
 8017f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f9a:	031b      	lsls	r3, r3, #12
 8017f9c:	42ab      	cmp	r3, r5
 8017f9e:	d12c      	bne.n	8017ffa <_dtoa_r+0x87e>
 8017fa0:	4b72      	ldr	r3, [pc, #456]	; (801816c <_dtoa_r+0x9f0>)
 8017fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fa4:	4213      	tst	r3, r2
 8017fa6:	d028      	beq.n	8017ffa <_dtoa_r+0x87e>
 8017fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017faa:	3501      	adds	r5, #1
 8017fac:	3301      	adds	r3, #1
 8017fae:	930a      	str	r3, [sp, #40]	; 0x28
 8017fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fb2:	3301      	adds	r3, #1
 8017fb4:	930c      	str	r3, [sp, #48]	; 0x30
 8017fb6:	e020      	b.n	8017ffa <_dtoa_r+0x87e>
 8017fb8:	2336      	movs	r3, #54	; 0x36
 8017fba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017fbc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017fbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017fc0:	1a9b      	subs	r3, r3, r2
 8017fc2:	e795      	b.n	8017ef0 <_dtoa_r+0x774>
 8017fc4:	9b07      	ldr	r3, [sp, #28]
 8017fc6:	1e5d      	subs	r5, r3, #1
 8017fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fca:	42ab      	cmp	r3, r5
 8017fcc:	db07      	blt.n	8017fde <_dtoa_r+0x862>
 8017fce:	1b5d      	subs	r5, r3, r5
 8017fd0:	9b07      	ldr	r3, [sp, #28]
 8017fd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	da8b      	bge.n	8017ef0 <_dtoa_r+0x774>
 8017fd8:	1ae4      	subs	r4, r4, r3
 8017fda:	2300      	movs	r3, #0
 8017fdc:	e788      	b.n	8017ef0 <_dtoa_r+0x774>
 8017fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017fe2:	1aeb      	subs	r3, r5, r3
 8017fe4:	18d3      	adds	r3, r2, r3
 8017fe6:	950d      	str	r5, [sp, #52]	; 0x34
 8017fe8:	9313      	str	r3, [sp, #76]	; 0x4c
 8017fea:	2500      	movs	r5, #0
 8017fec:	e7f0      	b.n	8017fd0 <_dtoa_r+0x854>
 8017fee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ff0:	e7b7      	b.n	8017f62 <_dtoa_r+0x7e6>
 8017ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017ff4:	2500      	movs	r5, #0
 8017ff6:	2b01      	cmp	r3, #1
 8017ff8:	ddca      	ble.n	8017f90 <_dtoa_r+0x814>
 8017ffa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ffc:	2001      	movs	r0, #1
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d008      	beq.n	8018014 <_dtoa_r+0x898>
 8018002:	6933      	ldr	r3, [r6, #16]
 8018004:	3303      	adds	r3, #3
 8018006:	009b      	lsls	r3, r3, #2
 8018008:	18f3      	adds	r3, r6, r3
 801800a:	6858      	ldr	r0, [r3, #4]
 801800c:	f7fd fb10 	bl	8015630 <__hi0bits>
 8018010:	2320      	movs	r3, #32
 8018012:	1a18      	subs	r0, r3, r0
 8018014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018016:	1818      	adds	r0, r3, r0
 8018018:	0002      	movs	r2, r0
 801801a:	231f      	movs	r3, #31
 801801c:	401a      	ands	r2, r3
 801801e:	4218      	tst	r0, r3
 8018020:	d047      	beq.n	80180b2 <_dtoa_r+0x936>
 8018022:	3301      	adds	r3, #1
 8018024:	1a9b      	subs	r3, r3, r2
 8018026:	2b04      	cmp	r3, #4
 8018028:	dd3f      	ble.n	80180aa <_dtoa_r+0x92e>
 801802a:	231c      	movs	r3, #28
 801802c:	1a9b      	subs	r3, r3, r2
 801802e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018030:	18e4      	adds	r4, r4, r3
 8018032:	18d2      	adds	r2, r2, r3
 8018034:	920a      	str	r2, [sp, #40]	; 0x28
 8018036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018038:	18d3      	adds	r3, r2, r3
 801803a:	930c      	str	r3, [sp, #48]	; 0x30
 801803c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801803e:	2b00      	cmp	r3, #0
 8018040:	dd05      	ble.n	801804e <_dtoa_r+0x8d2>
 8018042:	001a      	movs	r2, r3
 8018044:	9905      	ldr	r1, [sp, #20]
 8018046:	9804      	ldr	r0, [sp, #16]
 8018048:	f7fd fc44 	bl	80158d4 <__lshift>
 801804c:	9005      	str	r0, [sp, #20]
 801804e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018050:	2b00      	cmp	r3, #0
 8018052:	dd05      	ble.n	8018060 <_dtoa_r+0x8e4>
 8018054:	0031      	movs	r1, r6
 8018056:	001a      	movs	r2, r3
 8018058:	9804      	ldr	r0, [sp, #16]
 801805a:	f7fd fc3b 	bl	80158d4 <__lshift>
 801805e:	0006      	movs	r6, r0
 8018060:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018062:	2b00      	cmp	r3, #0
 8018064:	d027      	beq.n	80180b6 <_dtoa_r+0x93a>
 8018066:	0031      	movs	r1, r6
 8018068:	9805      	ldr	r0, [sp, #20]
 801806a:	f7fd fca1 	bl	80159b0 <__mcmp>
 801806e:	2800      	cmp	r0, #0
 8018070:	da21      	bge.n	80180b6 <_dtoa_r+0x93a>
 8018072:	9b03      	ldr	r3, [sp, #12]
 8018074:	220a      	movs	r2, #10
 8018076:	3b01      	subs	r3, #1
 8018078:	9303      	str	r3, [sp, #12]
 801807a:	9905      	ldr	r1, [sp, #20]
 801807c:	2300      	movs	r3, #0
 801807e:	9804      	ldr	r0, [sp, #16]
 8018080:	f7fd fa46 	bl	8015510 <__multadd>
 8018084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018086:	9005      	str	r0, [sp, #20]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d100      	bne.n	801808e <_dtoa_r+0x912>
 801808c:	e15d      	b.n	801834a <_dtoa_r+0xbce>
 801808e:	2300      	movs	r3, #0
 8018090:	0039      	movs	r1, r7
 8018092:	220a      	movs	r2, #10
 8018094:	9804      	ldr	r0, [sp, #16]
 8018096:	f7fd fa3b 	bl	8015510 <__multadd>
 801809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801809c:	0007      	movs	r7, r0
 801809e:	2b00      	cmp	r3, #0
 80180a0:	dc49      	bgt.n	8018136 <_dtoa_r+0x9ba>
 80180a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80180a4:	2b02      	cmp	r3, #2
 80180a6:	dc0e      	bgt.n	80180c6 <_dtoa_r+0x94a>
 80180a8:	e045      	b.n	8018136 <_dtoa_r+0x9ba>
 80180aa:	2b04      	cmp	r3, #4
 80180ac:	d0c6      	beq.n	801803c <_dtoa_r+0x8c0>
 80180ae:	331c      	adds	r3, #28
 80180b0:	e7bd      	b.n	801802e <_dtoa_r+0x8b2>
 80180b2:	0013      	movs	r3, r2
 80180b4:	e7fb      	b.n	80180ae <_dtoa_r+0x932>
 80180b6:	9b07      	ldr	r3, [sp, #28]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	dc36      	bgt.n	801812a <_dtoa_r+0x9ae>
 80180bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80180be:	2b02      	cmp	r3, #2
 80180c0:	dd33      	ble.n	801812a <_dtoa_r+0x9ae>
 80180c2:	9b07      	ldr	r3, [sp, #28]
 80180c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80180c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d10c      	bne.n	80180e6 <_dtoa_r+0x96a>
 80180cc:	0031      	movs	r1, r6
 80180ce:	2205      	movs	r2, #5
 80180d0:	9804      	ldr	r0, [sp, #16]
 80180d2:	f7fd fa1d 	bl	8015510 <__multadd>
 80180d6:	0006      	movs	r6, r0
 80180d8:	0001      	movs	r1, r0
 80180da:	9805      	ldr	r0, [sp, #20]
 80180dc:	f7fd fc68 	bl	80159b0 <__mcmp>
 80180e0:	2800      	cmp	r0, #0
 80180e2:	dd00      	ble.n	80180e6 <_dtoa_r+0x96a>
 80180e4:	e59f      	b.n	8017c26 <_dtoa_r+0x4aa>
 80180e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80180e8:	43db      	mvns	r3, r3
 80180ea:	9303      	str	r3, [sp, #12]
 80180ec:	9b06      	ldr	r3, [sp, #24]
 80180ee:	9308      	str	r3, [sp, #32]
 80180f0:	2500      	movs	r5, #0
 80180f2:	0031      	movs	r1, r6
 80180f4:	9804      	ldr	r0, [sp, #16]
 80180f6:	f7fd fa01 	bl	80154fc <_Bfree>
 80180fa:	2f00      	cmp	r7, #0
 80180fc:	d100      	bne.n	8018100 <_dtoa_r+0x984>
 80180fe:	e6a3      	b.n	8017e48 <_dtoa_r+0x6cc>
 8018100:	2d00      	cmp	r5, #0
 8018102:	d005      	beq.n	8018110 <_dtoa_r+0x994>
 8018104:	42bd      	cmp	r5, r7
 8018106:	d003      	beq.n	8018110 <_dtoa_r+0x994>
 8018108:	0029      	movs	r1, r5
 801810a:	9804      	ldr	r0, [sp, #16]
 801810c:	f7fd f9f6 	bl	80154fc <_Bfree>
 8018110:	0039      	movs	r1, r7
 8018112:	9804      	ldr	r0, [sp, #16]
 8018114:	f7fd f9f2 	bl	80154fc <_Bfree>
 8018118:	e696      	b.n	8017e48 <_dtoa_r+0x6cc>
 801811a:	2600      	movs	r6, #0
 801811c:	0037      	movs	r7, r6
 801811e:	e7e2      	b.n	80180e6 <_dtoa_r+0x96a>
 8018120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018122:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018124:	9303      	str	r3, [sp, #12]
 8018126:	0037      	movs	r7, r6
 8018128:	e57d      	b.n	8017c26 <_dtoa_r+0x4aa>
 801812a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801812c:	2b00      	cmp	r3, #0
 801812e:	d100      	bne.n	8018132 <_dtoa_r+0x9b6>
 8018130:	e0c3      	b.n	80182ba <_dtoa_r+0xb3e>
 8018132:	9b07      	ldr	r3, [sp, #28]
 8018134:	930b      	str	r3, [sp, #44]	; 0x2c
 8018136:	2c00      	cmp	r4, #0
 8018138:	dd05      	ble.n	8018146 <_dtoa_r+0x9ca>
 801813a:	0039      	movs	r1, r7
 801813c:	0022      	movs	r2, r4
 801813e:	9804      	ldr	r0, [sp, #16]
 8018140:	f7fd fbc8 	bl	80158d4 <__lshift>
 8018144:	0007      	movs	r7, r0
 8018146:	0038      	movs	r0, r7
 8018148:	2d00      	cmp	r5, #0
 801814a:	d024      	beq.n	8018196 <_dtoa_r+0xa1a>
 801814c:	6879      	ldr	r1, [r7, #4]
 801814e:	9804      	ldr	r0, [sp, #16]
 8018150:	f7fd f9ac 	bl	80154ac <_Balloc>
 8018154:	1e04      	subs	r4, r0, #0
 8018156:	d111      	bne.n	801817c <_dtoa_r+0xa00>
 8018158:	0022      	movs	r2, r4
 801815a:	4b05      	ldr	r3, [pc, #20]	; (8018170 <_dtoa_r+0x9f4>)
 801815c:	4805      	ldr	r0, [pc, #20]	; (8018174 <_dtoa_r+0x9f8>)
 801815e:	4906      	ldr	r1, [pc, #24]	; (8018178 <_dtoa_r+0x9fc>)
 8018160:	e43c      	b.n	80179dc <_dtoa_r+0x260>
 8018162:	46c0      	nop			; (mov r8, r8)
 8018164:	40240000 	.word	0x40240000
 8018168:	00000433 	.word	0x00000433
 801816c:	7ff00000 	.word	0x7ff00000
 8018170:	0801c731 	.word	0x0801c731
 8018174:	0801c999 	.word	0x0801c999
 8018178:	000002ef 	.word	0x000002ef
 801817c:	0039      	movs	r1, r7
 801817e:	693a      	ldr	r2, [r7, #16]
 8018180:	310c      	adds	r1, #12
 8018182:	3202      	adds	r2, #2
 8018184:	0092      	lsls	r2, r2, #2
 8018186:	300c      	adds	r0, #12
 8018188:	f7fc fcf9 	bl	8014b7e <memcpy>
 801818c:	2201      	movs	r2, #1
 801818e:	0021      	movs	r1, r4
 8018190:	9804      	ldr	r0, [sp, #16]
 8018192:	f7fd fb9f 	bl	80158d4 <__lshift>
 8018196:	9b06      	ldr	r3, [sp, #24]
 8018198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801819a:	9307      	str	r3, [sp, #28]
 801819c:	3b01      	subs	r3, #1
 801819e:	189b      	adds	r3, r3, r2
 80181a0:	2201      	movs	r2, #1
 80181a2:	003d      	movs	r5, r7
 80181a4:	0007      	movs	r7, r0
 80181a6:	930e      	str	r3, [sp, #56]	; 0x38
 80181a8:	9b08      	ldr	r3, [sp, #32]
 80181aa:	4013      	ands	r3, r2
 80181ac:	930d      	str	r3, [sp, #52]	; 0x34
 80181ae:	0031      	movs	r1, r6
 80181b0:	9805      	ldr	r0, [sp, #20]
 80181b2:	f7ff fa53 	bl	801765c <quorem>
 80181b6:	0029      	movs	r1, r5
 80181b8:	0004      	movs	r4, r0
 80181ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80181bc:	9805      	ldr	r0, [sp, #20]
 80181be:	f7fd fbf7 	bl	80159b0 <__mcmp>
 80181c2:	003a      	movs	r2, r7
 80181c4:	900c      	str	r0, [sp, #48]	; 0x30
 80181c6:	0031      	movs	r1, r6
 80181c8:	9804      	ldr	r0, [sp, #16]
 80181ca:	f7fd fc0d 	bl	80159e8 <__mdiff>
 80181ce:	2201      	movs	r2, #1
 80181d0:	68c3      	ldr	r3, [r0, #12]
 80181d2:	3430      	adds	r4, #48	; 0x30
 80181d4:	9008      	str	r0, [sp, #32]
 80181d6:	920a      	str	r2, [sp, #40]	; 0x28
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d104      	bne.n	80181e6 <_dtoa_r+0xa6a>
 80181dc:	0001      	movs	r1, r0
 80181de:	9805      	ldr	r0, [sp, #20]
 80181e0:	f7fd fbe6 	bl	80159b0 <__mcmp>
 80181e4:	900a      	str	r0, [sp, #40]	; 0x28
 80181e6:	9908      	ldr	r1, [sp, #32]
 80181e8:	9804      	ldr	r0, [sp, #16]
 80181ea:	f7fd f987 	bl	80154fc <_Bfree>
 80181ee:	9b07      	ldr	r3, [sp, #28]
 80181f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181f2:	3301      	adds	r3, #1
 80181f4:	9308      	str	r3, [sp, #32]
 80181f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80181f8:	4313      	orrs	r3, r2
 80181fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80181fc:	4313      	orrs	r3, r2
 80181fe:	d109      	bne.n	8018214 <_dtoa_r+0xa98>
 8018200:	2c39      	cmp	r4, #57	; 0x39
 8018202:	d022      	beq.n	801824a <_dtoa_r+0xace>
 8018204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018206:	2b00      	cmp	r3, #0
 8018208:	dd01      	ble.n	801820e <_dtoa_r+0xa92>
 801820a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801820c:	3431      	adds	r4, #49	; 0x31
 801820e:	9b07      	ldr	r3, [sp, #28]
 8018210:	701c      	strb	r4, [r3, #0]
 8018212:	e76e      	b.n	80180f2 <_dtoa_r+0x976>
 8018214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018216:	2b00      	cmp	r3, #0
 8018218:	db04      	blt.n	8018224 <_dtoa_r+0xaa8>
 801821a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801821c:	4313      	orrs	r3, r2
 801821e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018220:	4313      	orrs	r3, r2
 8018222:	d11e      	bne.n	8018262 <_dtoa_r+0xae6>
 8018224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018226:	2b00      	cmp	r3, #0
 8018228:	ddf1      	ble.n	801820e <_dtoa_r+0xa92>
 801822a:	9905      	ldr	r1, [sp, #20]
 801822c:	2201      	movs	r2, #1
 801822e:	9804      	ldr	r0, [sp, #16]
 8018230:	f7fd fb50 	bl	80158d4 <__lshift>
 8018234:	0031      	movs	r1, r6
 8018236:	9005      	str	r0, [sp, #20]
 8018238:	f7fd fbba 	bl	80159b0 <__mcmp>
 801823c:	2800      	cmp	r0, #0
 801823e:	dc02      	bgt.n	8018246 <_dtoa_r+0xaca>
 8018240:	d1e5      	bne.n	801820e <_dtoa_r+0xa92>
 8018242:	07e3      	lsls	r3, r4, #31
 8018244:	d5e3      	bpl.n	801820e <_dtoa_r+0xa92>
 8018246:	2c39      	cmp	r4, #57	; 0x39
 8018248:	d1df      	bne.n	801820a <_dtoa_r+0xa8e>
 801824a:	2339      	movs	r3, #57	; 0x39
 801824c:	9a07      	ldr	r2, [sp, #28]
 801824e:	7013      	strb	r3, [r2, #0]
 8018250:	9b08      	ldr	r3, [sp, #32]
 8018252:	9308      	str	r3, [sp, #32]
 8018254:	3b01      	subs	r3, #1
 8018256:	781a      	ldrb	r2, [r3, #0]
 8018258:	2a39      	cmp	r2, #57	; 0x39
 801825a:	d063      	beq.n	8018324 <_dtoa_r+0xba8>
 801825c:	3201      	adds	r2, #1
 801825e:	701a      	strb	r2, [r3, #0]
 8018260:	e747      	b.n	80180f2 <_dtoa_r+0x976>
 8018262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018264:	2b00      	cmp	r3, #0
 8018266:	dd03      	ble.n	8018270 <_dtoa_r+0xaf4>
 8018268:	2c39      	cmp	r4, #57	; 0x39
 801826a:	d0ee      	beq.n	801824a <_dtoa_r+0xace>
 801826c:	3401      	adds	r4, #1
 801826e:	e7ce      	b.n	801820e <_dtoa_r+0xa92>
 8018270:	9b07      	ldr	r3, [sp, #28]
 8018272:	9a07      	ldr	r2, [sp, #28]
 8018274:	701c      	strb	r4, [r3, #0]
 8018276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018278:	4293      	cmp	r3, r2
 801827a:	d03e      	beq.n	80182fa <_dtoa_r+0xb7e>
 801827c:	2300      	movs	r3, #0
 801827e:	220a      	movs	r2, #10
 8018280:	9905      	ldr	r1, [sp, #20]
 8018282:	9804      	ldr	r0, [sp, #16]
 8018284:	f7fd f944 	bl	8015510 <__multadd>
 8018288:	2300      	movs	r3, #0
 801828a:	9005      	str	r0, [sp, #20]
 801828c:	220a      	movs	r2, #10
 801828e:	0029      	movs	r1, r5
 8018290:	9804      	ldr	r0, [sp, #16]
 8018292:	42bd      	cmp	r5, r7
 8018294:	d106      	bne.n	80182a4 <_dtoa_r+0xb28>
 8018296:	f7fd f93b 	bl	8015510 <__multadd>
 801829a:	0005      	movs	r5, r0
 801829c:	0007      	movs	r7, r0
 801829e:	9b08      	ldr	r3, [sp, #32]
 80182a0:	9307      	str	r3, [sp, #28]
 80182a2:	e784      	b.n	80181ae <_dtoa_r+0xa32>
 80182a4:	f7fd f934 	bl	8015510 <__multadd>
 80182a8:	0039      	movs	r1, r7
 80182aa:	0005      	movs	r5, r0
 80182ac:	2300      	movs	r3, #0
 80182ae:	220a      	movs	r2, #10
 80182b0:	9804      	ldr	r0, [sp, #16]
 80182b2:	f7fd f92d 	bl	8015510 <__multadd>
 80182b6:	0007      	movs	r7, r0
 80182b8:	e7f1      	b.n	801829e <_dtoa_r+0xb22>
 80182ba:	9b07      	ldr	r3, [sp, #28]
 80182bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80182be:	2500      	movs	r5, #0
 80182c0:	0031      	movs	r1, r6
 80182c2:	9805      	ldr	r0, [sp, #20]
 80182c4:	f7ff f9ca 	bl	801765c <quorem>
 80182c8:	9b06      	ldr	r3, [sp, #24]
 80182ca:	3030      	adds	r0, #48	; 0x30
 80182cc:	5558      	strb	r0, [r3, r5]
 80182ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182d0:	3501      	adds	r5, #1
 80182d2:	0004      	movs	r4, r0
 80182d4:	42ab      	cmp	r3, r5
 80182d6:	dd07      	ble.n	80182e8 <_dtoa_r+0xb6c>
 80182d8:	2300      	movs	r3, #0
 80182da:	220a      	movs	r2, #10
 80182dc:	9905      	ldr	r1, [sp, #20]
 80182de:	9804      	ldr	r0, [sp, #16]
 80182e0:	f7fd f916 	bl	8015510 <__multadd>
 80182e4:	9005      	str	r0, [sp, #20]
 80182e6:	e7eb      	b.n	80182c0 <_dtoa_r+0xb44>
 80182e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182ea:	2301      	movs	r3, #1
 80182ec:	2a00      	cmp	r2, #0
 80182ee:	dd00      	ble.n	80182f2 <_dtoa_r+0xb76>
 80182f0:	0013      	movs	r3, r2
 80182f2:	2500      	movs	r5, #0
 80182f4:	9a06      	ldr	r2, [sp, #24]
 80182f6:	18d3      	adds	r3, r2, r3
 80182f8:	9308      	str	r3, [sp, #32]
 80182fa:	9905      	ldr	r1, [sp, #20]
 80182fc:	2201      	movs	r2, #1
 80182fe:	9804      	ldr	r0, [sp, #16]
 8018300:	f7fd fae8 	bl	80158d4 <__lshift>
 8018304:	0031      	movs	r1, r6
 8018306:	9005      	str	r0, [sp, #20]
 8018308:	f7fd fb52 	bl	80159b0 <__mcmp>
 801830c:	2800      	cmp	r0, #0
 801830e:	dc9f      	bgt.n	8018250 <_dtoa_r+0xad4>
 8018310:	d101      	bne.n	8018316 <_dtoa_r+0xb9a>
 8018312:	07e4      	lsls	r4, r4, #31
 8018314:	d49c      	bmi.n	8018250 <_dtoa_r+0xad4>
 8018316:	9b08      	ldr	r3, [sp, #32]
 8018318:	9308      	str	r3, [sp, #32]
 801831a:	3b01      	subs	r3, #1
 801831c:	781a      	ldrb	r2, [r3, #0]
 801831e:	2a30      	cmp	r2, #48	; 0x30
 8018320:	d0fa      	beq.n	8018318 <_dtoa_r+0xb9c>
 8018322:	e6e6      	b.n	80180f2 <_dtoa_r+0x976>
 8018324:	9a06      	ldr	r2, [sp, #24]
 8018326:	429a      	cmp	r2, r3
 8018328:	d193      	bne.n	8018252 <_dtoa_r+0xad6>
 801832a:	9b03      	ldr	r3, [sp, #12]
 801832c:	3301      	adds	r3, #1
 801832e:	9303      	str	r3, [sp, #12]
 8018330:	2331      	movs	r3, #49	; 0x31
 8018332:	7013      	strb	r3, [r2, #0]
 8018334:	e6dd      	b.n	80180f2 <_dtoa_r+0x976>
 8018336:	4b09      	ldr	r3, [pc, #36]	; (801835c <_dtoa_r+0xbe0>)
 8018338:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801833a:	9306      	str	r3, [sp, #24]
 801833c:	4b08      	ldr	r3, [pc, #32]	; (8018360 <_dtoa_r+0xbe4>)
 801833e:	2a00      	cmp	r2, #0
 8018340:	d001      	beq.n	8018346 <_dtoa_r+0xbca>
 8018342:	f7ff fa4c 	bl	80177de <_dtoa_r+0x62>
 8018346:	f7ff fa4c 	bl	80177e2 <_dtoa_r+0x66>
 801834a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801834c:	2b00      	cmp	r3, #0
 801834e:	dcb6      	bgt.n	80182be <_dtoa_r+0xb42>
 8018350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018352:	2b02      	cmp	r3, #2
 8018354:	dd00      	ble.n	8018358 <_dtoa_r+0xbdc>
 8018356:	e6b6      	b.n	80180c6 <_dtoa_r+0x94a>
 8018358:	e7b1      	b.n	80182be <_dtoa_r+0xb42>
 801835a:	46c0      	nop			; (mov r8, r8)
 801835c:	0801c98c 	.word	0x0801c98c
 8018360:	0801c994 	.word	0x0801c994

08018364 <fiprintf>:
 8018364:	b40e      	push	{r1, r2, r3}
 8018366:	b517      	push	{r0, r1, r2, r4, lr}
 8018368:	4c05      	ldr	r4, [pc, #20]	; (8018380 <fiprintf+0x1c>)
 801836a:	ab05      	add	r3, sp, #20
 801836c:	cb04      	ldmia	r3!, {r2}
 801836e:	0001      	movs	r1, r0
 8018370:	6820      	ldr	r0, [r4, #0]
 8018372:	9301      	str	r3, [sp, #4]
 8018374:	f000 f8be 	bl	80184f4 <_vfiprintf_r>
 8018378:	bc1e      	pop	{r1, r2, r3, r4}
 801837a:	bc08      	pop	{r3}
 801837c:	b003      	add	sp, #12
 801837e:	4718      	bx	r3
 8018380:	20000778 	.word	0x20000778

08018384 <__ssprint_r>:
 8018384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018386:	6813      	ldr	r3, [r2, #0]
 8018388:	b087      	sub	sp, #28
 801838a:	0017      	movs	r7, r2
 801838c:	9303      	str	r3, [sp, #12]
 801838e:	6893      	ldr	r3, [r2, #8]
 8018390:	2200      	movs	r2, #0
 8018392:	000c      	movs	r4, r1
 8018394:	9005      	str	r0, [sp, #20]
 8018396:	9202      	str	r2, [sp, #8]
 8018398:	9201      	str	r2, [sp, #4]
 801839a:	4293      	cmp	r3, r2
 801839c:	d10d      	bne.n	80183ba <__ssprint_r+0x36>
 801839e:	2000      	movs	r0, #0
 80183a0:	2300      	movs	r3, #0
 80183a2:	607b      	str	r3, [r7, #4]
 80183a4:	b007      	add	sp, #28
 80183a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183a8:	9b03      	ldr	r3, [sp, #12]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	9302      	str	r3, [sp, #8]
 80183ae:	9b03      	ldr	r3, [sp, #12]
 80183b0:	685b      	ldr	r3, [r3, #4]
 80183b2:	9301      	str	r3, [sp, #4]
 80183b4:	9b03      	ldr	r3, [sp, #12]
 80183b6:	3308      	adds	r3, #8
 80183b8:	9303      	str	r3, [sp, #12]
 80183ba:	9a01      	ldr	r2, [sp, #4]
 80183bc:	68a6      	ldr	r6, [r4, #8]
 80183be:	6823      	ldr	r3, [r4, #0]
 80183c0:	2a00      	cmp	r2, #0
 80183c2:	d0f1      	beq.n	80183a8 <__ssprint_r+0x24>
 80183c4:	42b2      	cmp	r2, r6
 80183c6:	d32e      	bcc.n	8018426 <__ssprint_r+0xa2>
 80183c8:	2190      	movs	r1, #144	; 0x90
 80183ca:	89a2      	ldrh	r2, [r4, #12]
 80183cc:	00c9      	lsls	r1, r1, #3
 80183ce:	420a      	tst	r2, r1
 80183d0:	d029      	beq.n	8018426 <__ssprint_r+0xa2>
 80183d2:	2003      	movs	r0, #3
 80183d4:	6921      	ldr	r1, [r4, #16]
 80183d6:	1a5b      	subs	r3, r3, r1
 80183d8:	9304      	str	r3, [sp, #16]
 80183da:	6963      	ldr	r3, [r4, #20]
 80183dc:	4343      	muls	r3, r0
 80183de:	0fdd      	lsrs	r5, r3, #31
 80183e0:	18ed      	adds	r5, r5, r3
 80183e2:	9b04      	ldr	r3, [sp, #16]
 80183e4:	9801      	ldr	r0, [sp, #4]
 80183e6:	3301      	adds	r3, #1
 80183e8:	181b      	adds	r3, r3, r0
 80183ea:	106d      	asrs	r5, r5, #1
 80183ec:	42ab      	cmp	r3, r5
 80183ee:	d900      	bls.n	80183f2 <__ssprint_r+0x6e>
 80183f0:	001d      	movs	r5, r3
 80183f2:	0552      	lsls	r2, r2, #21
 80183f4:	d532      	bpl.n	801845c <__ssprint_r+0xd8>
 80183f6:	0029      	movs	r1, r5
 80183f8:	9805      	ldr	r0, [sp, #20]
 80183fa:	f7fa fe93 	bl	8013124 <_malloc_r>
 80183fe:	1e06      	subs	r6, r0, #0
 8018400:	d036      	beq.n	8018470 <__ssprint_r+0xec>
 8018402:	9a04      	ldr	r2, [sp, #16]
 8018404:	6921      	ldr	r1, [r4, #16]
 8018406:	f7fc fbba 	bl	8014b7e <memcpy>
 801840a:	89a2      	ldrh	r2, [r4, #12]
 801840c:	4b1e      	ldr	r3, [pc, #120]	; (8018488 <__ssprint_r+0x104>)
 801840e:	401a      	ands	r2, r3
 8018410:	2380      	movs	r3, #128	; 0x80
 8018412:	4313      	orrs	r3, r2
 8018414:	81a3      	strh	r3, [r4, #12]
 8018416:	9b04      	ldr	r3, [sp, #16]
 8018418:	6126      	str	r6, [r4, #16]
 801841a:	18f6      	adds	r6, r6, r3
 801841c:	6026      	str	r6, [r4, #0]
 801841e:	6165      	str	r5, [r4, #20]
 8018420:	9e01      	ldr	r6, [sp, #4]
 8018422:	1aed      	subs	r5, r5, r3
 8018424:	60a5      	str	r5, [r4, #8]
 8018426:	9b01      	ldr	r3, [sp, #4]
 8018428:	429e      	cmp	r6, r3
 801842a:	d900      	bls.n	801842e <__ssprint_r+0xaa>
 801842c:	001e      	movs	r6, r3
 801842e:	0032      	movs	r2, r6
 8018430:	9902      	ldr	r1, [sp, #8]
 8018432:	6820      	ldr	r0, [r4, #0]
 8018434:	f7fc fa64 	bl	8014900 <memmove>
 8018438:	9a01      	ldr	r2, [sp, #4]
 801843a:	68a3      	ldr	r3, [r4, #8]
 801843c:	4694      	mov	ip, r2
 801843e:	1b9b      	subs	r3, r3, r6
 8018440:	60a3      	str	r3, [r4, #8]
 8018442:	6823      	ldr	r3, [r4, #0]
 8018444:	199b      	adds	r3, r3, r6
 8018446:	6023      	str	r3, [r4, #0]
 8018448:	9b02      	ldr	r3, [sp, #8]
 801844a:	4463      	add	r3, ip
 801844c:	9302      	str	r3, [sp, #8]
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	1a9b      	subs	r3, r3, r2
 8018452:	60bb      	str	r3, [r7, #8]
 8018454:	d0a3      	beq.n	801839e <__ssprint_r+0x1a>
 8018456:	2300      	movs	r3, #0
 8018458:	9301      	str	r3, [sp, #4]
 801845a:	e7ae      	b.n	80183ba <__ssprint_r+0x36>
 801845c:	002a      	movs	r2, r5
 801845e:	9805      	ldr	r0, [sp, #20]
 8018460:	f7fb f8a8 	bl	80135b4 <_realloc_r>
 8018464:	1e06      	subs	r6, r0, #0
 8018466:	d1d6      	bne.n	8018416 <__ssprint_r+0x92>
 8018468:	6921      	ldr	r1, [r4, #16]
 801846a:	9805      	ldr	r0, [sp, #20]
 801846c:	f7fc fbfe 	bl	8014c6c <_free_r>
 8018470:	230c      	movs	r3, #12
 8018472:	9a05      	ldr	r2, [sp, #20]
 8018474:	2001      	movs	r0, #1
 8018476:	6013      	str	r3, [r2, #0]
 8018478:	89a2      	ldrh	r2, [r4, #12]
 801847a:	3334      	adds	r3, #52	; 0x34
 801847c:	4313      	orrs	r3, r2
 801847e:	81a3      	strh	r3, [r4, #12]
 8018480:	2300      	movs	r3, #0
 8018482:	4240      	negs	r0, r0
 8018484:	60bb      	str	r3, [r7, #8]
 8018486:	e78b      	b.n	80183a0 <__ssprint_r+0x1c>
 8018488:	fffffb7f 	.word	0xfffffb7f

0801848c <__sprint_r>:
 801848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801848e:	6893      	ldr	r3, [r2, #8]
 8018490:	b085      	sub	sp, #20
 8018492:	9001      	str	r0, [sp, #4]
 8018494:	000d      	movs	r5, r1
 8018496:	0014      	movs	r4, r2
 8018498:	1e18      	subs	r0, r3, #0
 801849a:	d018      	beq.n	80184ce <__sprint_r+0x42>
 801849c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801849e:	049b      	lsls	r3, r3, #18
 80184a0:	d524      	bpl.n	80184ec <__sprint_r+0x60>
 80184a2:	6817      	ldr	r7, [r2, #0]
 80184a4:	2600      	movs	r6, #0
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	9302      	str	r3, [sp, #8]
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	9300      	str	r3, [sp, #0]
 80184ae:	089b      	lsrs	r3, r3, #2
 80184b0:	9303      	str	r3, [sp, #12]
 80184b2:	9b03      	ldr	r3, [sp, #12]
 80184b4:	42b3      	cmp	r3, r6
 80184b6:	dc0e      	bgt.n	80184d6 <__sprint_r+0x4a>
 80184b8:	2203      	movs	r2, #3
 80184ba:	9b00      	ldr	r3, [sp, #0]
 80184bc:	68a0      	ldr	r0, [r4, #8]
 80184be:	4393      	bics	r3, r2
 80184c0:	1ac0      	subs	r0, r0, r3
 80184c2:	60a0      	str	r0, [r4, #8]
 80184c4:	3708      	adds	r7, #8
 80184c6:	2800      	cmp	r0, #0
 80184c8:	d1ec      	bne.n	80184a4 <__sprint_r+0x18>
 80184ca:	2300      	movs	r3, #0
 80184cc:	60a3      	str	r3, [r4, #8]
 80184ce:	2300      	movs	r3, #0
 80184d0:	6063      	str	r3, [r4, #4]
 80184d2:	b005      	add	sp, #20
 80184d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184d6:	9902      	ldr	r1, [sp, #8]
 80184d8:	00b3      	lsls	r3, r6, #2
 80184da:	58c9      	ldr	r1, [r1, r3]
 80184dc:	002a      	movs	r2, r5
 80184de:	9801      	ldr	r0, [sp, #4]
 80184e0:	f000 ff1a 	bl	8019318 <_fputwc_r>
 80184e4:	1c43      	adds	r3, r0, #1
 80184e6:	d0f0      	beq.n	80184ca <__sprint_r+0x3e>
 80184e8:	3601      	adds	r6, #1
 80184ea:	e7e2      	b.n	80184b2 <__sprint_r+0x26>
 80184ec:	9801      	ldr	r0, [sp, #4]
 80184ee:	f000 fd13 	bl	8018f18 <__sfvwrite_r>
 80184f2:	e7ea      	b.n	80184ca <__sprint_r+0x3e>

080184f4 <_vfiprintf_r>:
 80184f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184f6:	b0c1      	sub	sp, #260	; 0x104
 80184f8:	001c      	movs	r4, r3
 80184fa:	001f      	movs	r7, r3
 80184fc:	9006      	str	r0, [sp, #24]
 80184fe:	9103      	str	r1, [sp, #12]
 8018500:	9207      	str	r2, [sp, #28]
 8018502:	2800      	cmp	r0, #0
 8018504:	d004      	beq.n	8018510 <_vfiprintf_r+0x1c>
 8018506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018508:	2b00      	cmp	r3, #0
 801850a:	d101      	bne.n	8018510 <_vfiprintf_r+0x1c>
 801850c:	f7fc f94a 	bl	80147a4 <__sinit>
 8018510:	9b03      	ldr	r3, [sp, #12]
 8018512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018514:	07db      	lsls	r3, r3, #31
 8018516:	d407      	bmi.n	8018528 <_vfiprintf_r+0x34>
 8018518:	9b03      	ldr	r3, [sp, #12]
 801851a:	899b      	ldrh	r3, [r3, #12]
 801851c:	059b      	lsls	r3, r3, #22
 801851e:	d403      	bmi.n	8018528 <_vfiprintf_r+0x34>
 8018520:	9b03      	ldr	r3, [sp, #12]
 8018522:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018524:	f7fc fb16 	bl	8014b54 <__retarget_lock_acquire_recursive>
 8018528:	9b03      	ldr	r3, [sp, #12]
 801852a:	220c      	movs	r2, #12
 801852c:	5e9a      	ldrsh	r2, [r3, r2]
 801852e:	2380      	movs	r3, #128	; 0x80
 8018530:	019b      	lsls	r3, r3, #6
 8018532:	421a      	tst	r2, r3
 8018534:	d107      	bne.n	8018546 <_vfiprintf_r+0x52>
 8018536:	4313      	orrs	r3, r2
 8018538:	9a03      	ldr	r2, [sp, #12]
 801853a:	8193      	strh	r3, [r2, #12]
 801853c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801853e:	4aa3      	ldr	r2, [pc, #652]	; (80187cc <_vfiprintf_r+0x2d8>)
 8018540:	4013      	ands	r3, r2
 8018542:	9a03      	ldr	r2, [sp, #12]
 8018544:	6653      	str	r3, [r2, #100]	; 0x64
 8018546:	9b03      	ldr	r3, [sp, #12]
 8018548:	899b      	ldrh	r3, [r3, #12]
 801854a:	071b      	lsls	r3, r3, #28
 801854c:	d503      	bpl.n	8018556 <_vfiprintf_r+0x62>
 801854e:	9b03      	ldr	r3, [sp, #12]
 8018550:	691b      	ldr	r3, [r3, #16]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d118      	bne.n	8018588 <_vfiprintf_r+0x94>
 8018556:	9903      	ldr	r1, [sp, #12]
 8018558:	9806      	ldr	r0, [sp, #24]
 801855a:	f000 fe3b 	bl	80191d4 <__swsetup_r>
 801855e:	2800      	cmp	r0, #0
 8018560:	d012      	beq.n	8018588 <_vfiprintf_r+0x94>
 8018562:	9b03      	ldr	r3, [sp, #12]
 8018564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018566:	07db      	lsls	r3, r3, #31
 8018568:	d505      	bpl.n	8018576 <_vfiprintf_r+0x82>
 801856a:	2301      	movs	r3, #1
 801856c:	425b      	negs	r3, r3
 801856e:	9308      	str	r3, [sp, #32]
 8018570:	9808      	ldr	r0, [sp, #32]
 8018572:	b041      	add	sp, #260	; 0x104
 8018574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018576:	9b03      	ldr	r3, [sp, #12]
 8018578:	899b      	ldrh	r3, [r3, #12]
 801857a:	059b      	lsls	r3, r3, #22
 801857c:	d4f5      	bmi.n	801856a <_vfiprintf_r+0x76>
 801857e:	9b03      	ldr	r3, [sp, #12]
 8018580:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018582:	f7fc fae8 	bl	8014b56 <__retarget_lock_release_recursive>
 8018586:	e7f0      	b.n	801856a <_vfiprintf_r+0x76>
 8018588:	221a      	movs	r2, #26
 801858a:	9b03      	ldr	r3, [sp, #12]
 801858c:	899b      	ldrh	r3, [r3, #12]
 801858e:	401a      	ands	r2, r3
 8018590:	2a0a      	cmp	r2, #10
 8018592:	d116      	bne.n	80185c2 <_vfiprintf_r+0xce>
 8018594:	9a03      	ldr	r2, [sp, #12]
 8018596:	210e      	movs	r1, #14
 8018598:	5e52      	ldrsh	r2, [r2, r1]
 801859a:	2a00      	cmp	r2, #0
 801859c:	db11      	blt.n	80185c2 <_vfiprintf_r+0xce>
 801859e:	9a03      	ldr	r2, [sp, #12]
 80185a0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80185a2:	07d2      	lsls	r2, r2, #31
 80185a4:	d405      	bmi.n	80185b2 <_vfiprintf_r+0xbe>
 80185a6:	059b      	lsls	r3, r3, #22
 80185a8:	d403      	bmi.n	80185b2 <_vfiprintf_r+0xbe>
 80185aa:	9b03      	ldr	r3, [sp, #12]
 80185ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80185ae:	f7fc fad2 	bl	8014b56 <__retarget_lock_release_recursive>
 80185b2:	0023      	movs	r3, r4
 80185b4:	9a07      	ldr	r2, [sp, #28]
 80185b6:	9903      	ldr	r1, [sp, #12]
 80185b8:	9806      	ldr	r0, [sp, #24]
 80185ba:	f000 fc69 	bl	8018e90 <__sbprintf>
 80185be:	9008      	str	r0, [sp, #32]
 80185c0:	e7d6      	b.n	8018570 <_vfiprintf_r+0x7c>
 80185c2:	2300      	movs	r3, #0
 80185c4:	ad17      	add	r5, sp, #92	; 0x5c
 80185c6:	9514      	str	r5, [sp, #80]	; 0x50
 80185c8:	9316      	str	r3, [sp, #88]	; 0x58
 80185ca:	9315      	str	r3, [sp, #84]	; 0x54
 80185cc:	930c      	str	r3, [sp, #48]	; 0x30
 80185ce:	930d      	str	r3, [sp, #52]	; 0x34
 80185d0:	930e      	str	r3, [sp, #56]	; 0x38
 80185d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80185d4:	9308      	str	r3, [sp, #32]
 80185d6:	9c07      	ldr	r4, [sp, #28]
 80185d8:	7823      	ldrb	r3, [r4, #0]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d002      	beq.n	80185e4 <_vfiprintf_r+0xf0>
 80185de:	2b25      	cmp	r3, #37	; 0x25
 80185e0:	d000      	beq.n	80185e4 <_vfiprintf_r+0xf0>
 80185e2:	e08d      	b.n	8018700 <_vfiprintf_r+0x20c>
 80185e4:	9b07      	ldr	r3, [sp, #28]
 80185e6:	1ae6      	subs	r6, r4, r3
 80185e8:	429c      	cmp	r4, r3
 80185ea:	d016      	beq.n	801861a <_vfiprintf_r+0x126>
 80185ec:	602b      	str	r3, [r5, #0]
 80185ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80185f0:	606e      	str	r6, [r5, #4]
 80185f2:	199b      	adds	r3, r3, r6
 80185f4:	9316      	str	r3, [sp, #88]	; 0x58
 80185f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185f8:	3508      	adds	r5, #8
 80185fa:	3301      	adds	r3, #1
 80185fc:	9315      	str	r3, [sp, #84]	; 0x54
 80185fe:	2b07      	cmp	r3, #7
 8018600:	dd08      	ble.n	8018614 <_vfiprintf_r+0x120>
 8018602:	9903      	ldr	r1, [sp, #12]
 8018604:	9806      	ldr	r0, [sp, #24]
 8018606:	aa14      	add	r2, sp, #80	; 0x50
 8018608:	f7ff ff40 	bl	801848c <__sprint_r>
 801860c:	2800      	cmp	r0, #0
 801860e:	d000      	beq.n	8018612 <_vfiprintf_r+0x11e>
 8018610:	e3d9      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018612:	ad17      	add	r5, sp, #92	; 0x5c
 8018614:	9b08      	ldr	r3, [sp, #32]
 8018616:	199b      	adds	r3, r3, r6
 8018618:	9308      	str	r3, [sp, #32]
 801861a:	7823      	ldrb	r3, [r4, #0]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d101      	bne.n	8018624 <_vfiprintf_r+0x130>
 8018620:	f000 fbf6 	bl	8018e10 <_vfiprintf_r+0x91c>
 8018624:	2200      	movs	r2, #0
 8018626:	a912      	add	r1, sp, #72	; 0x48
 8018628:	70ca      	strb	r2, [r1, #3]
 801862a:	2101      	movs	r1, #1
 801862c:	1c63      	adds	r3, r4, #1
 801862e:	0014      	movs	r4, r2
 8018630:	4249      	negs	r1, r1
 8018632:	9105      	str	r1, [sp, #20]
 8018634:	9209      	str	r2, [sp, #36]	; 0x24
 8018636:	1c5a      	adds	r2, r3, #1
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	9207      	str	r2, [sp, #28]
 801863c:	0018      	movs	r0, r3
 801863e:	3820      	subs	r0, #32
 8018640:	285a      	cmp	r0, #90	; 0x5a
 8018642:	d900      	bls.n	8018646 <_vfiprintf_r+0x152>
 8018644:	e362      	b.n	8018d0c <_vfiprintf_r+0x818>
 8018646:	f7e7 fd79 	bl	800013c <__gnu_thumb1_case_uhi>
 801864a:	0078      	.short	0x0078
 801864c:	03610361 	.word	0x03610361
 8018650:	03610081 	.word	0x03610081
 8018654:	03610361 	.word	0x03610361
 8018658:	0361005d 	.word	0x0361005d
 801865c:	00830361 	.word	0x00830361
 8018660:	0361008b 	.word	0x0361008b
 8018664:	008f0089 	.word	0x008f0089
 8018668:	00ad0361 	.word	0x00ad0361
 801866c:	00af00af 	.word	0x00af00af
 8018670:	00af00af 	.word	0x00af00af
 8018674:	00af00af 	.word	0x00af00af
 8018678:	00af00af 	.word	0x00af00af
 801867c:	036100af 	.word	0x036100af
 8018680:	03610361 	.word	0x03610361
 8018684:	03610361 	.word	0x03610361
 8018688:	03610361 	.word	0x03610361
 801868c:	03610361 	.word	0x03610361
 8018690:	00e600da 	.word	0x00e600da
 8018694:	03610361 	.word	0x03610361
 8018698:	03610361 	.word	0x03610361
 801869c:	03610361 	.word	0x03610361
 80186a0:	03610361 	.word	0x03610361
 80186a4:	03610361 	.word	0x03610361
 80186a8:	03610143 	.word	0x03610143
 80186ac:	03610361 	.word	0x03610361
 80186b0:	03610182 	.word	0x03610182
 80186b4:	0361027c 	.word	0x0361027c
 80186b8:	02ae0361 	.word	0x02ae0361
 80186bc:	03610361 	.word	0x03610361
 80186c0:	03610361 	.word	0x03610361
 80186c4:	03610361 	.word	0x03610361
 80186c8:	03610361 	.word	0x03610361
 80186cc:	03610361 	.word	0x03610361
 80186d0:	00e800da 	.word	0x00e800da
 80186d4:	03610361 	.word	0x03610361
 80186d8:	00c30361 	.word	0x00c30361
 80186dc:	00d600e8 	.word	0x00d600e8
 80186e0:	00cf0361 	.word	0x00cf0361
 80186e4:	01260361 	.word	0x01260361
 80186e8:	01740145 	.word	0x01740145
 80186ec:	036100d6 	.word	0x036100d6
 80186f0:	007f0182 	.word	0x007f0182
 80186f4:	0361027e 	.word	0x0361027e
 80186f8:	02cd0361 	.word	0x02cd0361
 80186fc:	007f0361 	.word	0x007f0361
 8018700:	3401      	adds	r4, #1
 8018702:	e769      	b.n	80185d8 <_vfiprintf_r+0xe4>
 8018704:	9806      	ldr	r0, [sp, #24]
 8018706:	f7fe fea7 	bl	8017458 <_localeconv_r>
 801870a:	6843      	ldr	r3, [r0, #4]
 801870c:	0018      	movs	r0, r3
 801870e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018710:	f7e7 fd02 	bl	8000118 <strlen>
 8018714:	900e      	str	r0, [sp, #56]	; 0x38
 8018716:	9806      	ldr	r0, [sp, #24]
 8018718:	f7fe fe9e 	bl	8017458 <_localeconv_r>
 801871c:	6883      	ldr	r3, [r0, #8]
 801871e:	930d      	str	r3, [sp, #52]	; 0x34
 8018720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018722:	2b00      	cmp	r3, #0
 8018724:	d010      	beq.n	8018748 <_vfiprintf_r+0x254>
 8018726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018728:	2b00      	cmp	r3, #0
 801872a:	d00d      	beq.n	8018748 <_vfiprintf_r+0x254>
 801872c:	781b      	ldrb	r3, [r3, #0]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d00a      	beq.n	8018748 <_vfiprintf_r+0x254>
 8018732:	2380      	movs	r3, #128	; 0x80
 8018734:	00db      	lsls	r3, r3, #3
 8018736:	431c      	orrs	r4, r3
 8018738:	e006      	b.n	8018748 <_vfiprintf_r+0x254>
 801873a:	ab12      	add	r3, sp, #72	; 0x48
 801873c:	78da      	ldrb	r2, [r3, #3]
 801873e:	3303      	adds	r3, #3
 8018740:	2a00      	cmp	r2, #0
 8018742:	d101      	bne.n	8018748 <_vfiprintf_r+0x254>
 8018744:	3220      	adds	r2, #32
 8018746:	701a      	strb	r2, [r3, #0]
 8018748:	9b07      	ldr	r3, [sp, #28]
 801874a:	e774      	b.n	8018636 <_vfiprintf_r+0x142>
 801874c:	2301      	movs	r3, #1
 801874e:	e7f2      	b.n	8018736 <_vfiprintf_r+0x242>
 8018750:	cf08      	ldmia	r7!, {r3}
 8018752:	9309      	str	r3, [sp, #36]	; 0x24
 8018754:	2b00      	cmp	r3, #0
 8018756:	daf7      	bge.n	8018748 <_vfiprintf_r+0x254>
 8018758:	425b      	negs	r3, r3
 801875a:	9309      	str	r3, [sp, #36]	; 0x24
 801875c:	2304      	movs	r3, #4
 801875e:	e7ea      	b.n	8018736 <_vfiprintf_r+0x242>
 8018760:	222b      	movs	r2, #43	; 0x2b
 8018762:	ab12      	add	r3, sp, #72	; 0x48
 8018764:	70da      	strb	r2, [r3, #3]
 8018766:	e7ef      	b.n	8018748 <_vfiprintf_r+0x254>
 8018768:	9b07      	ldr	r3, [sp, #28]
 801876a:	1c5a      	adds	r2, r3, #1
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	2b2a      	cmp	r3, #42	; 0x2a
 8018770:	d00f      	beq.n	8018792 <_vfiprintf_r+0x29e>
 8018772:	2100      	movs	r1, #0
 8018774:	9105      	str	r1, [sp, #20]
 8018776:	0019      	movs	r1, r3
 8018778:	3930      	subs	r1, #48	; 0x30
 801877a:	9207      	str	r2, [sp, #28]
 801877c:	2909      	cmp	r1, #9
 801877e:	d900      	bls.n	8018782 <_vfiprintf_r+0x28e>
 8018780:	e75c      	b.n	801863c <_vfiprintf_r+0x148>
 8018782:	200a      	movs	r0, #10
 8018784:	9b05      	ldr	r3, [sp, #20]
 8018786:	4343      	muls	r3, r0
 8018788:	185b      	adds	r3, r3, r1
 801878a:	9305      	str	r3, [sp, #20]
 801878c:	7813      	ldrb	r3, [r2, #0]
 801878e:	3201      	adds	r2, #1
 8018790:	e7f1      	b.n	8018776 <_vfiprintf_r+0x282>
 8018792:	cf08      	ldmia	r7!, {r3}
 8018794:	9305      	str	r3, [sp, #20]
 8018796:	2b00      	cmp	r3, #0
 8018798:	da02      	bge.n	80187a0 <_vfiprintf_r+0x2ac>
 801879a:	2301      	movs	r3, #1
 801879c:	425b      	negs	r3, r3
 801879e:	9305      	str	r3, [sp, #20]
 80187a0:	9207      	str	r2, [sp, #28]
 80187a2:	e7d1      	b.n	8018748 <_vfiprintf_r+0x254>
 80187a4:	2380      	movs	r3, #128	; 0x80
 80187a6:	e7c6      	b.n	8018736 <_vfiprintf_r+0x242>
 80187a8:	2100      	movs	r1, #0
 80187aa:	9a07      	ldr	r2, [sp, #28]
 80187ac:	9109      	str	r1, [sp, #36]	; 0x24
 80187ae:	200a      	movs	r0, #10
 80187b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80187b2:	3b30      	subs	r3, #48	; 0x30
 80187b4:	4341      	muls	r1, r0
 80187b6:	185b      	adds	r3, r3, r1
 80187b8:	9309      	str	r3, [sp, #36]	; 0x24
 80187ba:	0013      	movs	r3, r2
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	3201      	adds	r2, #1
 80187c0:	0019      	movs	r1, r3
 80187c2:	3930      	subs	r1, #48	; 0x30
 80187c4:	9207      	str	r2, [sp, #28]
 80187c6:	2909      	cmp	r1, #9
 80187c8:	d9f1      	bls.n	80187ae <_vfiprintf_r+0x2ba>
 80187ca:	e737      	b.n	801863c <_vfiprintf_r+0x148>
 80187cc:	ffffdfff 	.word	0xffffdfff
 80187d0:	9b07      	ldr	r3, [sp, #28]
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	2b68      	cmp	r3, #104	; 0x68
 80187d6:	d105      	bne.n	80187e4 <_vfiprintf_r+0x2f0>
 80187d8:	9b07      	ldr	r3, [sp, #28]
 80187da:	3301      	adds	r3, #1
 80187dc:	9307      	str	r3, [sp, #28]
 80187de:	2380      	movs	r3, #128	; 0x80
 80187e0:	009b      	lsls	r3, r3, #2
 80187e2:	e7a8      	b.n	8018736 <_vfiprintf_r+0x242>
 80187e4:	2340      	movs	r3, #64	; 0x40
 80187e6:	e7a6      	b.n	8018736 <_vfiprintf_r+0x242>
 80187e8:	9b07      	ldr	r3, [sp, #28]
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	2b6c      	cmp	r3, #108	; 0x6c
 80187ee:	d104      	bne.n	80187fa <_vfiprintf_r+0x306>
 80187f0:	9b07      	ldr	r3, [sp, #28]
 80187f2:	3301      	adds	r3, #1
 80187f4:	9307      	str	r3, [sp, #28]
 80187f6:	2320      	movs	r3, #32
 80187f8:	e79d      	b.n	8018736 <_vfiprintf_r+0x242>
 80187fa:	2310      	movs	r3, #16
 80187fc:	e79b      	b.n	8018736 <_vfiprintf_r+0x242>
 80187fe:	003a      	movs	r2, r7
 8018800:	ca08      	ldmia	r2!, {r3}
 8018802:	ae27      	add	r6, sp, #156	; 0x9c
 8018804:	7033      	strb	r3, [r6, #0]
 8018806:	2300      	movs	r3, #0
 8018808:	9204      	str	r2, [sp, #16]
 801880a:	aa12      	add	r2, sp, #72	; 0x48
 801880c:	70d3      	strb	r3, [r2, #3]
 801880e:	2201      	movs	r2, #1
 8018810:	930b      	str	r3, [sp, #44]	; 0x2c
 8018812:	9205      	str	r2, [sp, #20]
 8018814:	e0b0      	b.n	8018978 <_vfiprintf_r+0x484>
 8018816:	2310      	movs	r3, #16
 8018818:	431c      	orrs	r4, r3
 801881a:	06a3      	lsls	r3, r4, #26
 801881c:	d52a      	bpl.n	8018874 <_vfiprintf_r+0x380>
 801881e:	2307      	movs	r3, #7
 8018820:	3707      	adds	r7, #7
 8018822:	439f      	bics	r7, r3
 8018824:	0039      	movs	r1, r7
 8018826:	c90c      	ldmia	r1!, {r2, r3}
 8018828:	9200      	str	r2, [sp, #0]
 801882a:	9301      	str	r3, [sp, #4]
 801882c:	9104      	str	r1, [sp, #16]
 801882e:	9a01      	ldr	r2, [sp, #4]
 8018830:	2301      	movs	r3, #1
 8018832:	2a00      	cmp	r2, #0
 8018834:	da09      	bge.n	801884a <_vfiprintf_r+0x356>
 8018836:	9e00      	ldr	r6, [sp, #0]
 8018838:	9f01      	ldr	r7, [sp, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	4271      	negs	r1, r6
 801883e:	41ba      	sbcs	r2, r7
 8018840:	9100      	str	r1, [sp, #0]
 8018842:	9201      	str	r2, [sp, #4]
 8018844:	212d      	movs	r1, #45	; 0x2d
 8018846:	aa12      	add	r2, sp, #72	; 0x48
 8018848:	70d1      	strb	r1, [r2, #3]
 801884a:	9901      	ldr	r1, [sp, #4]
 801884c:	9a00      	ldr	r2, [sp, #0]
 801884e:	430a      	orrs	r2, r1
 8018850:	9905      	ldr	r1, [sp, #20]
 8018852:	3101      	adds	r1, #1
 8018854:	d100      	bne.n	8018858 <_vfiprintf_r+0x364>
 8018856:	e2e9      	b.n	8018e2c <_vfiprintf_r+0x938>
 8018858:	2180      	movs	r1, #128	; 0x80
 801885a:	0027      	movs	r7, r4
 801885c:	438f      	bics	r7, r1
 801885e:	2a00      	cmp	r2, #0
 8018860:	d000      	beq.n	8018864 <_vfiprintf_r+0x370>
 8018862:	e2e7      	b.n	8018e34 <_vfiprintf_r+0x940>
 8018864:	9a05      	ldr	r2, [sp, #20]
 8018866:	2a00      	cmp	r2, #0
 8018868:	d100      	bne.n	801886c <_vfiprintf_r+0x378>
 801886a:	e243      	b.n	8018cf4 <_vfiprintf_r+0x800>
 801886c:	2b01      	cmp	r3, #1
 801886e:	d000      	beq.n	8018872 <_vfiprintf_r+0x37e>
 8018870:	e2e3      	b.n	8018e3a <_vfiprintf_r+0x946>
 8018872:	e1e7      	b.n	8018c44 <_vfiprintf_r+0x750>
 8018874:	003a      	movs	r2, r7
 8018876:	ca08      	ldmia	r2!, {r3}
 8018878:	9204      	str	r2, [sp, #16]
 801887a:	06e2      	lsls	r2, r4, #27
 801887c:	d503      	bpl.n	8018886 <_vfiprintf_r+0x392>
 801887e:	9300      	str	r3, [sp, #0]
 8018880:	17db      	asrs	r3, r3, #31
 8018882:	9301      	str	r3, [sp, #4]
 8018884:	e7d3      	b.n	801882e <_vfiprintf_r+0x33a>
 8018886:	0662      	lsls	r2, r4, #25
 8018888:	d501      	bpl.n	801888e <_vfiprintf_r+0x39a>
 801888a:	b21b      	sxth	r3, r3
 801888c:	e7f7      	b.n	801887e <_vfiprintf_r+0x38a>
 801888e:	05a2      	lsls	r2, r4, #22
 8018890:	d5f5      	bpl.n	801887e <_vfiprintf_r+0x38a>
 8018892:	b25b      	sxtb	r3, r3
 8018894:	e7f3      	b.n	801887e <_vfiprintf_r+0x38a>
 8018896:	1d3b      	adds	r3, r7, #4
 8018898:	9304      	str	r3, [sp, #16]
 801889a:	06a3      	lsls	r3, r4, #26
 801889c:	d506      	bpl.n	80188ac <_vfiprintf_r+0x3b8>
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	9a08      	ldr	r2, [sp, #32]
 80188a2:	601a      	str	r2, [r3, #0]
 80188a4:	17d2      	asrs	r2, r2, #31
 80188a6:	605a      	str	r2, [r3, #4]
 80188a8:	9f04      	ldr	r7, [sp, #16]
 80188aa:	e694      	b.n	80185d6 <_vfiprintf_r+0xe2>
 80188ac:	06e3      	lsls	r3, r4, #27
 80188ae:	d503      	bpl.n	80188b8 <_vfiprintf_r+0x3c4>
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	9a08      	ldr	r2, [sp, #32]
 80188b4:	601a      	str	r2, [r3, #0]
 80188b6:	e7f7      	b.n	80188a8 <_vfiprintf_r+0x3b4>
 80188b8:	0663      	lsls	r3, r4, #25
 80188ba:	d503      	bpl.n	80188c4 <_vfiprintf_r+0x3d0>
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	9a08      	ldr	r2, [sp, #32]
 80188c0:	801a      	strh	r2, [r3, #0]
 80188c2:	e7f1      	b.n	80188a8 <_vfiprintf_r+0x3b4>
 80188c4:	05a4      	lsls	r4, r4, #22
 80188c6:	d5f3      	bpl.n	80188b0 <_vfiprintf_r+0x3bc>
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	9a08      	ldr	r2, [sp, #32]
 80188cc:	701a      	strb	r2, [r3, #0]
 80188ce:	e7eb      	b.n	80188a8 <_vfiprintf_r+0x3b4>
 80188d0:	2310      	movs	r3, #16
 80188d2:	431c      	orrs	r4, r3
 80188d4:	2320      	movs	r3, #32
 80188d6:	0020      	movs	r0, r4
 80188d8:	4018      	ands	r0, r3
 80188da:	421c      	tst	r4, r3
 80188dc:	d00d      	beq.n	80188fa <_vfiprintf_r+0x406>
 80188de:	3b19      	subs	r3, #25
 80188e0:	3707      	adds	r7, #7
 80188e2:	439f      	bics	r7, r3
 80188e4:	0039      	movs	r1, r7
 80188e6:	c90c      	ldmia	r1!, {r2, r3}
 80188e8:	9200      	str	r2, [sp, #0]
 80188ea:	9301      	str	r3, [sp, #4]
 80188ec:	9104      	str	r1, [sp, #16]
 80188ee:	4bcc      	ldr	r3, [pc, #816]	; (8018c20 <_vfiprintf_r+0x72c>)
 80188f0:	401c      	ands	r4, r3
 80188f2:	2300      	movs	r3, #0
 80188f4:	2100      	movs	r1, #0
 80188f6:	aa12      	add	r2, sp, #72	; 0x48
 80188f8:	e7a6      	b.n	8018848 <_vfiprintf_r+0x354>
 80188fa:	003a      	movs	r2, r7
 80188fc:	ca08      	ldmia	r2!, {r3}
 80188fe:	0021      	movs	r1, r4
 8018900:	9204      	str	r2, [sp, #16]
 8018902:	2210      	movs	r2, #16
 8018904:	4011      	ands	r1, r2
 8018906:	4214      	tst	r4, r2
 8018908:	d002      	beq.n	8018910 <_vfiprintf_r+0x41c>
 801890a:	9300      	str	r3, [sp, #0]
 801890c:	9001      	str	r0, [sp, #4]
 801890e:	e7ee      	b.n	80188ee <_vfiprintf_r+0x3fa>
 8018910:	2240      	movs	r2, #64	; 0x40
 8018912:	0020      	movs	r0, r4
 8018914:	4010      	ands	r0, r2
 8018916:	4214      	tst	r4, r2
 8018918:	d003      	beq.n	8018922 <_vfiprintf_r+0x42e>
 801891a:	b29b      	uxth	r3, r3
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	9101      	str	r1, [sp, #4]
 8018920:	e7e5      	b.n	80188ee <_vfiprintf_r+0x3fa>
 8018922:	2280      	movs	r2, #128	; 0x80
 8018924:	0021      	movs	r1, r4
 8018926:	0092      	lsls	r2, r2, #2
 8018928:	4011      	ands	r1, r2
 801892a:	4214      	tst	r4, r2
 801892c:	d0f6      	beq.n	801891c <_vfiprintf_r+0x428>
 801892e:	b2db      	uxtb	r3, r3
 8018930:	e7eb      	b.n	801890a <_vfiprintf_r+0x416>
 8018932:	003b      	movs	r3, r7
 8018934:	cb04      	ldmia	r3!, {r2}
 8018936:	49bb      	ldr	r1, [pc, #748]	; (8018c24 <_vfiprintf_r+0x730>)
 8018938:	9304      	str	r3, [sp, #16]
 801893a:	2300      	movs	r3, #0
 801893c:	9200      	str	r2, [sp, #0]
 801893e:	aa13      	add	r2, sp, #76	; 0x4c
 8018940:	8011      	strh	r1, [r2, #0]
 8018942:	4ab9      	ldr	r2, [pc, #740]	; (8018c28 <_vfiprintf_r+0x734>)
 8018944:	9301      	str	r3, [sp, #4]
 8018946:	3302      	adds	r3, #2
 8018948:	431c      	orrs	r4, r3
 801894a:	920c      	str	r2, [sp, #48]	; 0x30
 801894c:	e7d2      	b.n	80188f4 <_vfiprintf_r+0x400>
 801894e:	003b      	movs	r3, r7
 8018950:	2700      	movs	r7, #0
 8018952:	cb40      	ldmia	r3!, {r6}
 8018954:	9304      	str	r3, [sp, #16]
 8018956:	ab12      	add	r3, sp, #72	; 0x48
 8018958:	70df      	strb	r7, [r3, #3]
 801895a:	9b05      	ldr	r3, [sp, #20]
 801895c:	3301      	adds	r3, #1
 801895e:	d100      	bne.n	8018962 <_vfiprintf_r+0x46e>
 8018960:	e0ea      	b.n	8018b38 <_vfiprintf_r+0x644>
 8018962:	0039      	movs	r1, r7
 8018964:	0030      	movs	r0, r6
 8018966:	9a05      	ldr	r2, [sp, #20]
 8018968:	f7fe fd8e 	bl	8017488 <memchr>
 801896c:	900b      	str	r0, [sp, #44]	; 0x2c
 801896e:	42b8      	cmp	r0, r7
 8018970:	d002      	beq.n	8018978 <_vfiprintf_r+0x484>
 8018972:	1b83      	subs	r3, r0, r6
 8018974:	9305      	str	r3, [sp, #20]
 8018976:	970b      	str	r7, [sp, #44]	; 0x2c
 8018978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801897a:	9a05      	ldr	r2, [sp, #20]
 801897c:	930a      	str	r3, [sp, #40]	; 0x28
 801897e:	4293      	cmp	r3, r2
 8018980:	da00      	bge.n	8018984 <_vfiprintf_r+0x490>
 8018982:	920a      	str	r2, [sp, #40]	; 0x28
 8018984:	ab12      	add	r3, sp, #72	; 0x48
 8018986:	3303      	adds	r3, #3
 8018988:	781b      	ldrb	r3, [r3, #0]
 801898a:	1e5a      	subs	r2, r3, #1
 801898c:	4193      	sbcs	r3, r2
 801898e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018990:	18d3      	adds	r3, r2, r3
 8018992:	930a      	str	r3, [sp, #40]	; 0x28
 8018994:	0022      	movs	r2, r4
 8018996:	2302      	movs	r3, #2
 8018998:	401a      	ands	r2, r3
 801899a:	9210      	str	r2, [sp, #64]	; 0x40
 801899c:	421c      	tst	r4, r3
 801899e:	d002      	beq.n	80189a6 <_vfiprintf_r+0x4b2>
 80189a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189a2:	3302      	adds	r3, #2
 80189a4:	930a      	str	r3, [sp, #40]	; 0x28
 80189a6:	2384      	movs	r3, #132	; 0x84
 80189a8:	0022      	movs	r2, r4
 80189aa:	401a      	ands	r2, r3
 80189ac:	9211      	str	r2, [sp, #68]	; 0x44
 80189ae:	421c      	tst	r4, r3
 80189b0:	d11e      	bne.n	80189f0 <_vfiprintf_r+0x4fc>
 80189b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189b6:	1a9f      	subs	r7, r3, r2
 80189b8:	2f00      	cmp	r7, #0
 80189ba:	dd19      	ble.n	80189f0 <_vfiprintf_r+0x4fc>
 80189bc:	0029      	movs	r1, r5
 80189be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189c0:	489a      	ldr	r0, [pc, #616]	; (8018c2c <_vfiprintf_r+0x738>)
 80189c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80189c4:	3301      	adds	r3, #1
 80189c6:	3108      	adds	r1, #8
 80189c8:	6028      	str	r0, [r5, #0]
 80189ca:	2f10      	cmp	r7, #16
 80189cc:	dd00      	ble.n	80189d0 <_vfiprintf_r+0x4dc>
 80189ce:	e1a7      	b.n	8018d20 <_vfiprintf_r+0x82c>
 80189d0:	606f      	str	r7, [r5, #4]
 80189d2:	18bf      	adds	r7, r7, r2
 80189d4:	000d      	movs	r5, r1
 80189d6:	9716      	str	r7, [sp, #88]	; 0x58
 80189d8:	9315      	str	r3, [sp, #84]	; 0x54
 80189da:	2b07      	cmp	r3, #7
 80189dc:	dd08      	ble.n	80189f0 <_vfiprintf_r+0x4fc>
 80189de:	9903      	ldr	r1, [sp, #12]
 80189e0:	9806      	ldr	r0, [sp, #24]
 80189e2:	aa14      	add	r2, sp, #80	; 0x50
 80189e4:	f7ff fd52 	bl	801848c <__sprint_r>
 80189e8:	2800      	cmp	r0, #0
 80189ea:	d000      	beq.n	80189ee <_vfiprintf_r+0x4fa>
 80189ec:	e1eb      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 80189ee:	ad17      	add	r5, sp, #92	; 0x5c
 80189f0:	a912      	add	r1, sp, #72	; 0x48
 80189f2:	78c8      	ldrb	r0, [r1, #3]
 80189f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80189f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189f8:	3103      	adds	r1, #3
 80189fa:	2800      	cmp	r0, #0
 80189fc:	d012      	beq.n	8018a24 <_vfiprintf_r+0x530>
 80189fe:	6029      	str	r1, [r5, #0]
 8018a00:	2101      	movs	r1, #1
 8018a02:	3301      	adds	r3, #1
 8018a04:	1852      	adds	r2, r2, r1
 8018a06:	6069      	str	r1, [r5, #4]
 8018a08:	9216      	str	r2, [sp, #88]	; 0x58
 8018a0a:	9315      	str	r3, [sp, #84]	; 0x54
 8018a0c:	3508      	adds	r5, #8
 8018a0e:	2b07      	cmp	r3, #7
 8018a10:	dd08      	ble.n	8018a24 <_vfiprintf_r+0x530>
 8018a12:	9903      	ldr	r1, [sp, #12]
 8018a14:	9806      	ldr	r0, [sp, #24]
 8018a16:	aa14      	add	r2, sp, #80	; 0x50
 8018a18:	f7ff fd38 	bl	801848c <__sprint_r>
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	d000      	beq.n	8018a22 <_vfiprintf_r+0x52e>
 8018a20:	e1d1      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018a22:	ad17      	add	r5, sp, #92	; 0x5c
 8018a24:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018a26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a2a:	2900      	cmp	r1, #0
 8018a2c:	d013      	beq.n	8018a56 <_vfiprintf_r+0x562>
 8018a2e:	a913      	add	r1, sp, #76	; 0x4c
 8018a30:	6029      	str	r1, [r5, #0]
 8018a32:	2102      	movs	r1, #2
 8018a34:	3301      	adds	r3, #1
 8018a36:	1852      	adds	r2, r2, r1
 8018a38:	6069      	str	r1, [r5, #4]
 8018a3a:	9216      	str	r2, [sp, #88]	; 0x58
 8018a3c:	9315      	str	r3, [sp, #84]	; 0x54
 8018a3e:	3508      	adds	r5, #8
 8018a40:	2b07      	cmp	r3, #7
 8018a42:	dd08      	ble.n	8018a56 <_vfiprintf_r+0x562>
 8018a44:	9903      	ldr	r1, [sp, #12]
 8018a46:	9806      	ldr	r0, [sp, #24]
 8018a48:	aa14      	add	r2, sp, #80	; 0x50
 8018a4a:	f7ff fd1f 	bl	801848c <__sprint_r>
 8018a4e:	2800      	cmp	r0, #0
 8018a50:	d000      	beq.n	8018a54 <_vfiprintf_r+0x560>
 8018a52:	e1b8      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018a54:	ad17      	add	r5, sp, #92	; 0x5c
 8018a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018a58:	2b80      	cmp	r3, #128	; 0x80
 8018a5a:	d11e      	bne.n	8018a9a <_vfiprintf_r+0x5a6>
 8018a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a60:	1a9f      	subs	r7, r3, r2
 8018a62:	2f00      	cmp	r7, #0
 8018a64:	dd19      	ble.n	8018a9a <_vfiprintf_r+0x5a6>
 8018a66:	0029      	movs	r1, r5
 8018a68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a6a:	4871      	ldr	r0, [pc, #452]	; (8018c30 <_vfiprintf_r+0x73c>)
 8018a6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018a6e:	3301      	adds	r3, #1
 8018a70:	3108      	adds	r1, #8
 8018a72:	6028      	str	r0, [r5, #0]
 8018a74:	2f10      	cmp	r7, #16
 8018a76:	dd00      	ble.n	8018a7a <_vfiprintf_r+0x586>
 8018a78:	e164      	b.n	8018d44 <_vfiprintf_r+0x850>
 8018a7a:	606f      	str	r7, [r5, #4]
 8018a7c:	18bf      	adds	r7, r7, r2
 8018a7e:	000d      	movs	r5, r1
 8018a80:	9716      	str	r7, [sp, #88]	; 0x58
 8018a82:	9315      	str	r3, [sp, #84]	; 0x54
 8018a84:	2b07      	cmp	r3, #7
 8018a86:	dd08      	ble.n	8018a9a <_vfiprintf_r+0x5a6>
 8018a88:	9903      	ldr	r1, [sp, #12]
 8018a8a:	9806      	ldr	r0, [sp, #24]
 8018a8c:	aa14      	add	r2, sp, #80	; 0x50
 8018a8e:	f7ff fcfd 	bl	801848c <__sprint_r>
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d000      	beq.n	8018a98 <_vfiprintf_r+0x5a4>
 8018a96:	e196      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018a98:	ad17      	add	r5, sp, #92	; 0x5c
 8018a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a9c:	9a05      	ldr	r2, [sp, #20]
 8018a9e:	1a9f      	subs	r7, r3, r2
 8018aa0:	2f00      	cmp	r7, #0
 8018aa2:	dd19      	ble.n	8018ad8 <_vfiprintf_r+0x5e4>
 8018aa4:	0029      	movs	r1, r5
 8018aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018aa8:	4861      	ldr	r0, [pc, #388]	; (8018c30 <_vfiprintf_r+0x73c>)
 8018aaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018aac:	3301      	adds	r3, #1
 8018aae:	3108      	adds	r1, #8
 8018ab0:	6028      	str	r0, [r5, #0]
 8018ab2:	2f10      	cmp	r7, #16
 8018ab4:	dd00      	ble.n	8018ab8 <_vfiprintf_r+0x5c4>
 8018ab6:	e157      	b.n	8018d68 <_vfiprintf_r+0x874>
 8018ab8:	606f      	str	r7, [r5, #4]
 8018aba:	18bf      	adds	r7, r7, r2
 8018abc:	000d      	movs	r5, r1
 8018abe:	9716      	str	r7, [sp, #88]	; 0x58
 8018ac0:	9315      	str	r3, [sp, #84]	; 0x54
 8018ac2:	2b07      	cmp	r3, #7
 8018ac4:	dd08      	ble.n	8018ad8 <_vfiprintf_r+0x5e4>
 8018ac6:	9903      	ldr	r1, [sp, #12]
 8018ac8:	9806      	ldr	r0, [sp, #24]
 8018aca:	aa14      	add	r2, sp, #80	; 0x50
 8018acc:	f7ff fcde 	bl	801848c <__sprint_r>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	d000      	beq.n	8018ad6 <_vfiprintf_r+0x5e2>
 8018ad4:	e177      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018ad6:	ad17      	add	r5, sp, #92	; 0x5c
 8018ad8:	9b05      	ldr	r3, [sp, #20]
 8018ada:	9a05      	ldr	r2, [sp, #20]
 8018adc:	606b      	str	r3, [r5, #4]
 8018ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018ae0:	602e      	str	r6, [r5, #0]
 8018ae2:	189b      	adds	r3, r3, r2
 8018ae4:	9316      	str	r3, [sp, #88]	; 0x58
 8018ae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ae8:	3508      	adds	r5, #8
 8018aea:	3301      	adds	r3, #1
 8018aec:	9315      	str	r3, [sp, #84]	; 0x54
 8018aee:	2b07      	cmp	r3, #7
 8018af0:	dd08      	ble.n	8018b04 <_vfiprintf_r+0x610>
 8018af2:	9903      	ldr	r1, [sp, #12]
 8018af4:	9806      	ldr	r0, [sp, #24]
 8018af6:	aa14      	add	r2, sp, #80	; 0x50
 8018af8:	f7ff fcc8 	bl	801848c <__sprint_r>
 8018afc:	2800      	cmp	r0, #0
 8018afe:	d000      	beq.n	8018b02 <_vfiprintf_r+0x60e>
 8018b00:	e161      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018b02:	ad17      	add	r5, sp, #92	; 0x5c
 8018b04:	0764      	lsls	r4, r4, #29
 8018b06:	d500      	bpl.n	8018b0a <_vfiprintf_r+0x616>
 8018b08:	e140      	b.n	8018d8c <_vfiprintf_r+0x898>
 8018b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b0e:	4293      	cmp	r3, r2
 8018b10:	da00      	bge.n	8018b14 <_vfiprintf_r+0x620>
 8018b12:	0013      	movs	r3, r2
 8018b14:	9a08      	ldr	r2, [sp, #32]
 8018b16:	18d3      	adds	r3, r2, r3
 8018b18:	9308      	str	r3, [sp, #32]
 8018b1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d007      	beq.n	8018b30 <_vfiprintf_r+0x63c>
 8018b20:	9903      	ldr	r1, [sp, #12]
 8018b22:	9806      	ldr	r0, [sp, #24]
 8018b24:	aa14      	add	r2, sp, #80	; 0x50
 8018b26:	f7ff fcb1 	bl	801848c <__sprint_r>
 8018b2a:	2800      	cmp	r0, #0
 8018b2c:	d000      	beq.n	8018b30 <_vfiprintf_r+0x63c>
 8018b2e:	e14a      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018b30:	2300      	movs	r3, #0
 8018b32:	ad17      	add	r5, sp, #92	; 0x5c
 8018b34:	9315      	str	r3, [sp, #84]	; 0x54
 8018b36:	e6b7      	b.n	80188a8 <_vfiprintf_r+0x3b4>
 8018b38:	0030      	movs	r0, r6
 8018b3a:	f7e7 faed 	bl	8000118 <strlen>
 8018b3e:	9005      	str	r0, [sp, #20]
 8018b40:	e719      	b.n	8018976 <_vfiprintf_r+0x482>
 8018b42:	2310      	movs	r3, #16
 8018b44:	431c      	orrs	r4, r3
 8018b46:	2320      	movs	r3, #32
 8018b48:	0020      	movs	r0, r4
 8018b4a:	4018      	ands	r0, r3
 8018b4c:	421c      	tst	r4, r3
 8018b4e:	d009      	beq.n	8018b64 <_vfiprintf_r+0x670>
 8018b50:	3b19      	subs	r3, #25
 8018b52:	3707      	adds	r7, #7
 8018b54:	439f      	bics	r7, r3
 8018b56:	0039      	movs	r1, r7
 8018b58:	c90c      	ldmia	r1!, {r2, r3}
 8018b5a:	9200      	str	r2, [sp, #0]
 8018b5c:	9301      	str	r3, [sp, #4]
 8018b5e:	9104      	str	r1, [sp, #16]
 8018b60:	2301      	movs	r3, #1
 8018b62:	e6c7      	b.n	80188f4 <_vfiprintf_r+0x400>
 8018b64:	003b      	movs	r3, r7
 8018b66:	cb04      	ldmia	r3!, {r2}
 8018b68:	0021      	movs	r1, r4
 8018b6a:	9304      	str	r3, [sp, #16]
 8018b6c:	2310      	movs	r3, #16
 8018b6e:	4019      	ands	r1, r3
 8018b70:	421c      	tst	r4, r3
 8018b72:	d003      	beq.n	8018b7c <_vfiprintf_r+0x688>
 8018b74:	9200      	str	r2, [sp, #0]
 8018b76:	9001      	str	r0, [sp, #4]
 8018b78:	3b0f      	subs	r3, #15
 8018b7a:	e6bb      	b.n	80188f4 <_vfiprintf_r+0x400>
 8018b7c:	2340      	movs	r3, #64	; 0x40
 8018b7e:	0020      	movs	r0, r4
 8018b80:	4018      	ands	r0, r3
 8018b82:	421c      	tst	r4, r3
 8018b84:	d003      	beq.n	8018b8e <_vfiprintf_r+0x69a>
 8018b86:	b293      	uxth	r3, r2
 8018b88:	9300      	str	r3, [sp, #0]
 8018b8a:	9101      	str	r1, [sp, #4]
 8018b8c:	e7e8      	b.n	8018b60 <_vfiprintf_r+0x66c>
 8018b8e:	2380      	movs	r3, #128	; 0x80
 8018b90:	0021      	movs	r1, r4
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	4019      	ands	r1, r3
 8018b96:	421c      	tst	r4, r3
 8018b98:	d003      	beq.n	8018ba2 <_vfiprintf_r+0x6ae>
 8018b9a:	b2d3      	uxtb	r3, r2
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	9001      	str	r0, [sp, #4]
 8018ba0:	e7de      	b.n	8018b60 <_vfiprintf_r+0x66c>
 8018ba2:	9200      	str	r2, [sp, #0]
 8018ba4:	e7f1      	b.n	8018b8a <_vfiprintf_r+0x696>
 8018ba6:	4a23      	ldr	r2, [pc, #140]	; (8018c34 <_vfiprintf_r+0x740>)
 8018ba8:	0020      	movs	r0, r4
 8018baa:	920c      	str	r2, [sp, #48]	; 0x30
 8018bac:	2220      	movs	r2, #32
 8018bae:	4010      	ands	r0, r2
 8018bb0:	4214      	tst	r4, r2
 8018bb2:	d019      	beq.n	8018be8 <_vfiprintf_r+0x6f4>
 8018bb4:	3a19      	subs	r2, #25
 8018bb6:	3707      	adds	r7, #7
 8018bb8:	4397      	bics	r7, r2
 8018bba:	0038      	movs	r0, r7
 8018bbc:	c806      	ldmia	r0!, {r1, r2}
 8018bbe:	9100      	str	r1, [sp, #0]
 8018bc0:	9201      	str	r2, [sp, #4]
 8018bc2:	9004      	str	r0, [sp, #16]
 8018bc4:	07e2      	lsls	r2, r4, #31
 8018bc6:	d509      	bpl.n	8018bdc <_vfiprintf_r+0x6e8>
 8018bc8:	9a00      	ldr	r2, [sp, #0]
 8018bca:	9901      	ldr	r1, [sp, #4]
 8018bcc:	430a      	orrs	r2, r1
 8018bce:	d005      	beq.n	8018bdc <_vfiprintf_r+0x6e8>
 8018bd0:	aa13      	add	r2, sp, #76	; 0x4c
 8018bd2:	2130      	movs	r1, #48	; 0x30
 8018bd4:	7053      	strb	r3, [r2, #1]
 8018bd6:	2302      	movs	r3, #2
 8018bd8:	7011      	strb	r1, [r2, #0]
 8018bda:	431c      	orrs	r4, r3
 8018bdc:	4b10      	ldr	r3, [pc, #64]	; (8018c20 <_vfiprintf_r+0x72c>)
 8018bde:	401c      	ands	r4, r3
 8018be0:	2302      	movs	r3, #2
 8018be2:	e687      	b.n	80188f4 <_vfiprintf_r+0x400>
 8018be4:	4a10      	ldr	r2, [pc, #64]	; (8018c28 <_vfiprintf_r+0x734>)
 8018be6:	e7df      	b.n	8018ba8 <_vfiprintf_r+0x6b4>
 8018be8:	0039      	movs	r1, r7
 8018bea:	c904      	ldmia	r1!, {r2}
 8018bec:	0026      	movs	r6, r4
 8018bee:	9104      	str	r1, [sp, #16]
 8018bf0:	2110      	movs	r1, #16
 8018bf2:	400e      	ands	r6, r1
 8018bf4:	420c      	tst	r4, r1
 8018bf6:	d002      	beq.n	8018bfe <_vfiprintf_r+0x70a>
 8018bf8:	9200      	str	r2, [sp, #0]
 8018bfa:	9001      	str	r0, [sp, #4]
 8018bfc:	e7e2      	b.n	8018bc4 <_vfiprintf_r+0x6d0>
 8018bfe:	2140      	movs	r1, #64	; 0x40
 8018c00:	0020      	movs	r0, r4
 8018c02:	4008      	ands	r0, r1
 8018c04:	420c      	tst	r4, r1
 8018c06:	d003      	beq.n	8018c10 <_vfiprintf_r+0x71c>
 8018c08:	b292      	uxth	r2, r2
 8018c0a:	9200      	str	r2, [sp, #0]
 8018c0c:	9601      	str	r6, [sp, #4]
 8018c0e:	e7d9      	b.n	8018bc4 <_vfiprintf_r+0x6d0>
 8018c10:	2180      	movs	r1, #128	; 0x80
 8018c12:	0026      	movs	r6, r4
 8018c14:	0089      	lsls	r1, r1, #2
 8018c16:	400e      	ands	r6, r1
 8018c18:	420c      	tst	r4, r1
 8018c1a:	d0f6      	beq.n	8018c0a <_vfiprintf_r+0x716>
 8018c1c:	b2d2      	uxtb	r2, r2
 8018c1e:	e7eb      	b.n	8018bf8 <_vfiprintf_r+0x704>
 8018c20:	fffffbff 	.word	0xfffffbff
 8018c24:	00007830 	.word	0x00007830
 8018c28:	0801c90c 	.word	0x0801c90c
 8018c2c:	0801c9f1 	.word	0x0801c9f1
 8018c30:	0801ca01 	.word	0x0801ca01
 8018c34:	0801c91d 	.word	0x0801c91d
 8018c38:	9b01      	ldr	r3, [sp, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d109      	bne.n	8018c52 <_vfiprintf_r+0x75e>
 8018c3e:	9b00      	ldr	r3, [sp, #0]
 8018c40:	2b09      	cmp	r3, #9
 8018c42:	d806      	bhi.n	8018c52 <_vfiprintf_r+0x75e>
 8018c44:	26b7      	movs	r6, #183	; 0xb7
 8018c46:	ab12      	add	r3, sp, #72	; 0x48
 8018c48:	18f6      	adds	r6, r6, r3
 8018c4a:	9b00      	ldr	r3, [sp, #0]
 8018c4c:	3330      	adds	r3, #48	; 0x30
 8018c4e:	7033      	strb	r3, [r6, #0]
 8018c50:	e115      	b.n	8018e7e <_vfiprintf_r+0x98a>
 8018c52:	2380      	movs	r3, #128	; 0x80
 8018c54:	2400      	movs	r4, #0
 8018c56:	00db      	lsls	r3, r3, #3
 8018c58:	403b      	ands	r3, r7
 8018c5a:	ae40      	add	r6, sp, #256	; 0x100
 8018c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8018c5e:	220a      	movs	r2, #10
 8018c60:	9800      	ldr	r0, [sp, #0]
 8018c62:	9901      	ldr	r1, [sp, #4]
 8018c64:	2300      	movs	r3, #0
 8018c66:	f7e7 fc6b 	bl	8000540 <__aeabi_uldivmod>
 8018c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c6c:	3e01      	subs	r6, #1
 8018c6e:	3230      	adds	r2, #48	; 0x30
 8018c70:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c72:	9110      	str	r1, [sp, #64]	; 0x40
 8018c74:	7032      	strb	r2, [r6, #0]
 8018c76:	3401      	adds	r4, #1
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d01a      	beq.n	8018cb2 <_vfiprintf_r+0x7be>
 8018c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c7e:	781b      	ldrb	r3, [r3, #0]
 8018c80:	42a3      	cmp	r3, r4
 8018c82:	d116      	bne.n	8018cb2 <_vfiprintf_r+0x7be>
 8018c84:	2cff      	cmp	r4, #255	; 0xff
 8018c86:	d014      	beq.n	8018cb2 <_vfiprintf_r+0x7be>
 8018c88:	9b01      	ldr	r3, [sp, #4]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d102      	bne.n	8018c94 <_vfiprintf_r+0x7a0>
 8018c8e:	9b00      	ldr	r3, [sp, #0]
 8018c90:	2b09      	cmp	r3, #9
 8018c92:	d90e      	bls.n	8018cb2 <_vfiprintf_r+0x7be>
 8018c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018c98:	1af6      	subs	r6, r6, r3
 8018c9a:	001a      	movs	r2, r3
 8018c9c:	0030      	movs	r0, r6
 8018c9e:	f7fb fe76 	bl	801498e <strncpy>
 8018ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ca4:	2400      	movs	r4, #0
 8018ca6:	785b      	ldrb	r3, [r3, #1]
 8018ca8:	1e5a      	subs	r2, r3, #1
 8018caa:	4193      	sbcs	r3, r2
 8018cac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018cae:	18d3      	adds	r3, r2, r3
 8018cb0:	930d      	str	r3, [sp, #52]	; 0x34
 8018cb2:	9b01      	ldr	r3, [sp, #4]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d103      	bne.n	8018cc0 <_vfiprintf_r+0x7cc>
 8018cb8:	9b00      	ldr	r3, [sp, #0]
 8018cba:	2b09      	cmp	r3, #9
 8018cbc:	d800      	bhi.n	8018cc0 <_vfiprintf_r+0x7cc>
 8018cbe:	e0de      	b.n	8018e7e <_vfiprintf_r+0x98a>
 8018cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018cc2:	9300      	str	r3, [sp, #0]
 8018cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cc6:	9301      	str	r3, [sp, #4]
 8018cc8:	e7c9      	b.n	8018c5e <_vfiprintf_r+0x76a>
 8018cca:	200f      	movs	r0, #15
 8018ccc:	9b00      	ldr	r3, [sp, #0]
 8018cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018cd0:	4003      	ands	r3, r0
 8018cd2:	5cd3      	ldrb	r3, [r2, r3]
 8018cd4:	3e01      	subs	r6, #1
 8018cd6:	7033      	strb	r3, [r6, #0]
 8018cd8:	9b01      	ldr	r3, [sp, #4]
 8018cda:	0719      	lsls	r1, r3, #28
 8018cdc:	9b00      	ldr	r3, [sp, #0]
 8018cde:	091a      	lsrs	r2, r3, #4
 8018ce0:	9b01      	ldr	r3, [sp, #4]
 8018ce2:	4311      	orrs	r1, r2
 8018ce4:	091b      	lsrs	r3, r3, #4
 8018ce6:	9301      	str	r3, [sp, #4]
 8018ce8:	000b      	movs	r3, r1
 8018cea:	9a01      	ldr	r2, [sp, #4]
 8018cec:	9100      	str	r1, [sp, #0]
 8018cee:	4313      	orrs	r3, r2
 8018cf0:	d1ec      	bne.n	8018ccc <_vfiprintf_r+0x7d8>
 8018cf2:	e0c4      	b.n	8018e7e <_vfiprintf_r+0x98a>
 8018cf4:	ae40      	add	r6, sp, #256	; 0x100
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d000      	beq.n	8018cfc <_vfiprintf_r+0x808>
 8018cfa:	e0c0      	b.n	8018e7e <_vfiprintf_r+0x98a>
 8018cfc:	07e4      	lsls	r4, r4, #31
 8018cfe:	d400      	bmi.n	8018d02 <_vfiprintf_r+0x80e>
 8018d00:	e0bd      	b.n	8018e7e <_vfiprintf_r+0x98a>
 8018d02:	26b7      	movs	r6, #183	; 0xb7
 8018d04:	ab12      	add	r3, sp, #72	; 0x48
 8018d06:	18f6      	adds	r6, r6, r3
 8018d08:	2330      	movs	r3, #48	; 0x30
 8018d0a:	e7a0      	b.n	8018c4e <_vfiprintf_r+0x75a>
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d100      	bne.n	8018d12 <_vfiprintf_r+0x81e>
 8018d10:	e07e      	b.n	8018e10 <_vfiprintf_r+0x91c>
 8018d12:	ae27      	add	r6, sp, #156	; 0x9c
 8018d14:	7033      	strb	r3, [r6, #0]
 8018d16:	2300      	movs	r3, #0
 8018d18:	aa12      	add	r2, sp, #72	; 0x48
 8018d1a:	70d3      	strb	r3, [r2, #3]
 8018d1c:	9704      	str	r7, [sp, #16]
 8018d1e:	e576      	b.n	801880e <_vfiprintf_r+0x31a>
 8018d20:	2010      	movs	r0, #16
 8018d22:	1812      	adds	r2, r2, r0
 8018d24:	6068      	str	r0, [r5, #4]
 8018d26:	9216      	str	r2, [sp, #88]	; 0x58
 8018d28:	9315      	str	r3, [sp, #84]	; 0x54
 8018d2a:	2b07      	cmp	r3, #7
 8018d2c:	dd07      	ble.n	8018d3e <_vfiprintf_r+0x84a>
 8018d2e:	9903      	ldr	r1, [sp, #12]
 8018d30:	9806      	ldr	r0, [sp, #24]
 8018d32:	aa14      	add	r2, sp, #80	; 0x50
 8018d34:	f7ff fbaa 	bl	801848c <__sprint_r>
 8018d38:	2800      	cmp	r0, #0
 8018d3a:	d144      	bne.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018d3c:	a917      	add	r1, sp, #92	; 0x5c
 8018d3e:	000d      	movs	r5, r1
 8018d40:	3f10      	subs	r7, #16
 8018d42:	e63b      	b.n	80189bc <_vfiprintf_r+0x4c8>
 8018d44:	2010      	movs	r0, #16
 8018d46:	1812      	adds	r2, r2, r0
 8018d48:	6068      	str	r0, [r5, #4]
 8018d4a:	9216      	str	r2, [sp, #88]	; 0x58
 8018d4c:	9315      	str	r3, [sp, #84]	; 0x54
 8018d4e:	2b07      	cmp	r3, #7
 8018d50:	dd07      	ble.n	8018d62 <_vfiprintf_r+0x86e>
 8018d52:	9903      	ldr	r1, [sp, #12]
 8018d54:	9806      	ldr	r0, [sp, #24]
 8018d56:	aa14      	add	r2, sp, #80	; 0x50
 8018d58:	f7ff fb98 	bl	801848c <__sprint_r>
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	d132      	bne.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018d60:	a917      	add	r1, sp, #92	; 0x5c
 8018d62:	000d      	movs	r5, r1
 8018d64:	3f10      	subs	r7, #16
 8018d66:	e67e      	b.n	8018a66 <_vfiprintf_r+0x572>
 8018d68:	2010      	movs	r0, #16
 8018d6a:	1812      	adds	r2, r2, r0
 8018d6c:	6068      	str	r0, [r5, #4]
 8018d6e:	9216      	str	r2, [sp, #88]	; 0x58
 8018d70:	9315      	str	r3, [sp, #84]	; 0x54
 8018d72:	2b07      	cmp	r3, #7
 8018d74:	dd07      	ble.n	8018d86 <_vfiprintf_r+0x892>
 8018d76:	9903      	ldr	r1, [sp, #12]
 8018d78:	9806      	ldr	r0, [sp, #24]
 8018d7a:	aa14      	add	r2, sp, #80	; 0x50
 8018d7c:	f7ff fb86 	bl	801848c <__sprint_r>
 8018d80:	2800      	cmp	r0, #0
 8018d82:	d120      	bne.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018d84:	a917      	add	r1, sp, #92	; 0x5c
 8018d86:	000d      	movs	r5, r1
 8018d88:	3f10      	subs	r7, #16
 8018d8a:	e68b      	b.n	8018aa4 <_vfiprintf_r+0x5b0>
 8018d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d90:	2610      	movs	r6, #16
 8018d92:	1a9c      	subs	r4, r3, r2
 8018d94:	2c00      	cmp	r4, #0
 8018d96:	dc00      	bgt.n	8018d9a <_vfiprintf_r+0x8a6>
 8018d98:	e6b7      	b.n	8018b0a <_vfiprintf_r+0x616>
 8018d9a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018d9c:	4a3b      	ldr	r2, [pc, #236]	; (8018e8c <_vfiprintf_r+0x998>)
 8018d9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018da0:	3101      	adds	r1, #1
 8018da2:	602a      	str	r2, [r5, #0]
 8018da4:	2c10      	cmp	r4, #16
 8018da6:	dc22      	bgt.n	8018dee <_vfiprintf_r+0x8fa>
 8018da8:	606c      	str	r4, [r5, #4]
 8018daa:	18e4      	adds	r4, r4, r3
 8018dac:	9416      	str	r4, [sp, #88]	; 0x58
 8018dae:	9115      	str	r1, [sp, #84]	; 0x54
 8018db0:	2907      	cmp	r1, #7
 8018db2:	dc00      	bgt.n	8018db6 <_vfiprintf_r+0x8c2>
 8018db4:	e6a9      	b.n	8018b0a <_vfiprintf_r+0x616>
 8018db6:	9903      	ldr	r1, [sp, #12]
 8018db8:	9806      	ldr	r0, [sp, #24]
 8018dba:	aa14      	add	r2, sp, #80	; 0x50
 8018dbc:	f7ff fb66 	bl	801848c <__sprint_r>
 8018dc0:	2800      	cmp	r0, #0
 8018dc2:	d100      	bne.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018dc4:	e6a1      	b.n	8018b0a <_vfiprintf_r+0x616>
 8018dc6:	9b03      	ldr	r3, [sp, #12]
 8018dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018dca:	07db      	lsls	r3, r3, #31
 8018dcc:	d407      	bmi.n	8018dde <_vfiprintf_r+0x8ea>
 8018dce:	9b03      	ldr	r3, [sp, #12]
 8018dd0:	899b      	ldrh	r3, [r3, #12]
 8018dd2:	059b      	lsls	r3, r3, #22
 8018dd4:	d403      	bmi.n	8018dde <_vfiprintf_r+0x8ea>
 8018dd6:	9b03      	ldr	r3, [sp, #12]
 8018dd8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018dda:	f7fb febc 	bl	8014b56 <__retarget_lock_release_recursive>
 8018dde:	9b03      	ldr	r3, [sp, #12]
 8018de0:	899b      	ldrh	r3, [r3, #12]
 8018de2:	065b      	lsls	r3, r3, #25
 8018de4:	d401      	bmi.n	8018dea <_vfiprintf_r+0x8f6>
 8018de6:	f7ff fbc3 	bl	8018570 <_vfiprintf_r+0x7c>
 8018dea:	f7ff fbbe 	bl	801856a <_vfiprintf_r+0x76>
 8018dee:	3310      	adds	r3, #16
 8018df0:	606e      	str	r6, [r5, #4]
 8018df2:	9316      	str	r3, [sp, #88]	; 0x58
 8018df4:	9115      	str	r1, [sp, #84]	; 0x54
 8018df6:	3508      	adds	r5, #8
 8018df8:	2907      	cmp	r1, #7
 8018dfa:	dd07      	ble.n	8018e0c <_vfiprintf_r+0x918>
 8018dfc:	9903      	ldr	r1, [sp, #12]
 8018dfe:	9806      	ldr	r0, [sp, #24]
 8018e00:	aa14      	add	r2, sp, #80	; 0x50
 8018e02:	f7ff fb43 	bl	801848c <__sprint_r>
 8018e06:	2800      	cmp	r0, #0
 8018e08:	d1dd      	bne.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018e0a:	ad17      	add	r5, sp, #92	; 0x5c
 8018e0c:	3c10      	subs	r4, #16
 8018e0e:	e7c4      	b.n	8018d9a <_vfiprintf_r+0x8a6>
 8018e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d102      	bne.n	8018e1c <_vfiprintf_r+0x928>
 8018e16:	2300      	movs	r3, #0
 8018e18:	9315      	str	r3, [sp, #84]	; 0x54
 8018e1a:	e7d4      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018e1c:	9903      	ldr	r1, [sp, #12]
 8018e1e:	9806      	ldr	r0, [sp, #24]
 8018e20:	aa14      	add	r2, sp, #80	; 0x50
 8018e22:	f7ff fb33 	bl	801848c <__sprint_r>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	d0f5      	beq.n	8018e16 <_vfiprintf_r+0x922>
 8018e2a:	e7cc      	b.n	8018dc6 <_vfiprintf_r+0x8d2>
 8018e2c:	0027      	movs	r7, r4
 8018e2e:	2a00      	cmp	r2, #0
 8018e30:	d100      	bne.n	8018e34 <_vfiprintf_r+0x940>
 8018e32:	e51b      	b.n	801886c <_vfiprintf_r+0x378>
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d100      	bne.n	8018e3a <_vfiprintf_r+0x946>
 8018e38:	e6fe      	b.n	8018c38 <_vfiprintf_r+0x744>
 8018e3a:	ae40      	add	r6, sp, #256	; 0x100
 8018e3c:	2b02      	cmp	r3, #2
 8018e3e:	d100      	bne.n	8018e42 <_vfiprintf_r+0x94e>
 8018e40:	e743      	b.n	8018cca <_vfiprintf_r+0x7d6>
 8018e42:	2307      	movs	r3, #7
 8018e44:	469c      	mov	ip, r3
 8018e46:	4663      	mov	r3, ip
 8018e48:	9900      	ldr	r1, [sp, #0]
 8018e4a:	0032      	movs	r2, r6
 8018e4c:	400b      	ands	r3, r1
 8018e4e:	9901      	ldr	r1, [sp, #4]
 8018e50:	3e01      	subs	r6, #1
 8018e52:	074c      	lsls	r4, r1, #29
 8018e54:	9900      	ldr	r1, [sp, #0]
 8018e56:	3330      	adds	r3, #48	; 0x30
 8018e58:	08c8      	lsrs	r0, r1, #3
 8018e5a:	9901      	ldr	r1, [sp, #4]
 8018e5c:	4304      	orrs	r4, r0
 8018e5e:	08c9      	lsrs	r1, r1, #3
 8018e60:	9101      	str	r1, [sp, #4]
 8018e62:	0021      	movs	r1, r4
 8018e64:	9801      	ldr	r0, [sp, #4]
 8018e66:	7033      	strb	r3, [r6, #0]
 8018e68:	9400      	str	r4, [sp, #0]
 8018e6a:	4301      	orrs	r1, r0
 8018e6c:	d1eb      	bne.n	8018e46 <_vfiprintf_r+0x952>
 8018e6e:	07f9      	lsls	r1, r7, #31
 8018e70:	d505      	bpl.n	8018e7e <_vfiprintf_r+0x98a>
 8018e72:	2b30      	cmp	r3, #48	; 0x30
 8018e74:	d003      	beq.n	8018e7e <_vfiprintf_r+0x98a>
 8018e76:	2330      	movs	r3, #48	; 0x30
 8018e78:	3e01      	subs	r6, #1
 8018e7a:	7033      	strb	r3, [r6, #0]
 8018e7c:	1e96      	subs	r6, r2, #2
 8018e7e:	9b05      	ldr	r3, [sp, #20]
 8018e80:	003c      	movs	r4, r7
 8018e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e84:	ab40      	add	r3, sp, #256	; 0x100
 8018e86:	1b9b      	subs	r3, r3, r6
 8018e88:	9305      	str	r3, [sp, #20]
 8018e8a:	e575      	b.n	8018978 <_vfiprintf_r+0x484>
 8018e8c:	0801c9f1 	.word	0x0801c9f1

08018e90 <__sbprintf>:
 8018e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e92:	0015      	movs	r5, r2
 8018e94:	2202      	movs	r2, #2
 8018e96:	4c1e      	ldr	r4, [pc, #120]	; (8018f10 <__sbprintf+0x80>)
 8018e98:	001f      	movs	r7, r3
 8018e9a:	898b      	ldrh	r3, [r1, #12]
 8018e9c:	44a5      	add	sp, r4
 8018e9e:	4393      	bics	r3, r2
 8018ea0:	466a      	mov	r2, sp
 8018ea2:	8193      	strh	r3, [r2, #12]
 8018ea4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018ea6:	0006      	movs	r6, r0
 8018ea8:	9319      	str	r3, [sp, #100]	; 0x64
 8018eaa:	89cb      	ldrh	r3, [r1, #14]
 8018eac:	a816      	add	r0, sp, #88	; 0x58
 8018eae:	81d3      	strh	r3, [r2, #14]
 8018eb0:	69cb      	ldr	r3, [r1, #28]
 8018eb2:	000c      	movs	r4, r1
 8018eb4:	9307      	str	r3, [sp, #28]
 8018eb6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8018eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8018eba:	ab1a      	add	r3, sp, #104	; 0x68
 8018ebc:	9300      	str	r3, [sp, #0]
 8018ebe:	9304      	str	r3, [sp, #16]
 8018ec0:	2380      	movs	r3, #128	; 0x80
 8018ec2:	00db      	lsls	r3, r3, #3
 8018ec4:	9302      	str	r3, [sp, #8]
 8018ec6:	9305      	str	r3, [sp, #20]
 8018ec8:	2300      	movs	r3, #0
 8018eca:	9306      	str	r3, [sp, #24]
 8018ecc:	f7fb fe40 	bl	8014b50 <__retarget_lock_init_recursive>
 8018ed0:	002a      	movs	r2, r5
 8018ed2:	003b      	movs	r3, r7
 8018ed4:	4669      	mov	r1, sp
 8018ed6:	0030      	movs	r0, r6
 8018ed8:	f7ff fb0c 	bl	80184f4 <_vfiprintf_r>
 8018edc:	1e05      	subs	r5, r0, #0
 8018ede:	db07      	blt.n	8018ef0 <__sbprintf+0x60>
 8018ee0:	4669      	mov	r1, sp
 8018ee2:	0030      	movs	r0, r6
 8018ee4:	f7fe fa92 	bl	801740c <_fflush_r>
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	d001      	beq.n	8018ef0 <__sbprintf+0x60>
 8018eec:	2501      	movs	r5, #1
 8018eee:	426d      	negs	r5, r5
 8018ef0:	466b      	mov	r3, sp
 8018ef2:	899a      	ldrh	r2, [r3, #12]
 8018ef4:	2340      	movs	r3, #64	; 0x40
 8018ef6:	421a      	tst	r2, r3
 8018ef8:	d002      	beq.n	8018f00 <__sbprintf+0x70>
 8018efa:	89a2      	ldrh	r2, [r4, #12]
 8018efc:	4313      	orrs	r3, r2
 8018efe:	81a3      	strh	r3, [r4, #12]
 8018f00:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018f02:	f7fb fe26 	bl	8014b52 <__retarget_lock_close_recursive>
 8018f06:	0028      	movs	r0, r5
 8018f08:	4b02      	ldr	r3, [pc, #8]	; (8018f14 <__sbprintf+0x84>)
 8018f0a:	449d      	add	sp, r3
 8018f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f0e:	46c0      	nop			; (mov r8, r8)
 8018f10:	fffffb94 	.word	0xfffffb94
 8018f14:	0000046c 	.word	0x0000046c

08018f18 <__sfvwrite_r>:
 8018f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f1a:	6893      	ldr	r3, [r2, #8]
 8018f1c:	b087      	sub	sp, #28
 8018f1e:	000c      	movs	r4, r1
 8018f20:	9002      	str	r0, [sp, #8]
 8018f22:	9204      	str	r2, [sp, #16]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d102      	bne.n	8018f2e <__sfvwrite_r+0x16>
 8018f28:	2000      	movs	r0, #0
 8018f2a:	b007      	add	sp, #28
 8018f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f2e:	898b      	ldrh	r3, [r1, #12]
 8018f30:	071b      	lsls	r3, r3, #28
 8018f32:	d557      	bpl.n	8018fe4 <__sfvwrite_r+0xcc>
 8018f34:	690b      	ldr	r3, [r1, #16]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d054      	beq.n	8018fe4 <__sfvwrite_r+0xcc>
 8018f3a:	9b04      	ldr	r3, [sp, #16]
 8018f3c:	2202      	movs	r2, #2
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	9301      	str	r3, [sp, #4]
 8018f42:	89a3      	ldrh	r3, [r4, #12]
 8018f44:	001f      	movs	r7, r3
 8018f46:	4017      	ands	r7, r2
 8018f48:	4213      	tst	r3, r2
 8018f4a:	d171      	bne.n	8019030 <__sfvwrite_r+0x118>
 8018f4c:	2201      	movs	r2, #1
 8018f4e:	2101      	movs	r1, #1
 8018f50:	401a      	ands	r2, r3
 8018f52:	420b      	tst	r3, r1
 8018f54:	d100      	bne.n	8018f58 <__sfvwrite_r+0x40>
 8018f56:	e0a5      	b.n	80190a4 <__sfvwrite_r+0x18c>
 8018f58:	0038      	movs	r0, r7
 8018f5a:	003e      	movs	r6, r7
 8018f5c:	9703      	str	r7, [sp, #12]
 8018f5e:	9b03      	ldr	r3, [sp, #12]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d100      	bne.n	8018f66 <__sfvwrite_r+0x4e>
 8018f64:	e10b      	b.n	801917e <__sfvwrite_r+0x266>
 8018f66:	2800      	cmp	r0, #0
 8018f68:	d10a      	bne.n	8018f80 <__sfvwrite_r+0x68>
 8018f6a:	001a      	movs	r2, r3
 8018f6c:	210a      	movs	r1, #10
 8018f6e:	0030      	movs	r0, r6
 8018f70:	f7fe fa8a 	bl	8017488 <memchr>
 8018f74:	9b03      	ldr	r3, [sp, #12]
 8018f76:	1c5f      	adds	r7, r3, #1
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d001      	beq.n	8018f80 <__sfvwrite_r+0x68>
 8018f7c:	3001      	adds	r0, #1
 8018f7e:	1b87      	subs	r7, r0, r6
 8018f80:	9b03      	ldr	r3, [sp, #12]
 8018f82:	9705      	str	r7, [sp, #20]
 8018f84:	429f      	cmp	r7, r3
 8018f86:	d900      	bls.n	8018f8a <__sfvwrite_r+0x72>
 8018f88:	9305      	str	r3, [sp, #20]
 8018f8a:	6820      	ldr	r0, [r4, #0]
 8018f8c:	6922      	ldr	r2, [r4, #16]
 8018f8e:	68a5      	ldr	r5, [r4, #8]
 8018f90:	6963      	ldr	r3, [r4, #20]
 8018f92:	4290      	cmp	r0, r2
 8018f94:	d800      	bhi.n	8018f98 <__sfvwrite_r+0x80>
 8018f96:	e0fb      	b.n	8019190 <__sfvwrite_r+0x278>
 8018f98:	9a05      	ldr	r2, [sp, #20]
 8018f9a:	18ed      	adds	r5, r5, r3
 8018f9c:	42aa      	cmp	r2, r5
 8018f9e:	dc00      	bgt.n	8018fa2 <__sfvwrite_r+0x8a>
 8018fa0:	e0f6      	b.n	8019190 <__sfvwrite_r+0x278>
 8018fa2:	0031      	movs	r1, r6
 8018fa4:	002a      	movs	r2, r5
 8018fa6:	f7fb fcab 	bl	8014900 <memmove>
 8018faa:	6823      	ldr	r3, [r4, #0]
 8018fac:	0021      	movs	r1, r4
 8018fae:	195b      	adds	r3, r3, r5
 8018fb0:	9802      	ldr	r0, [sp, #8]
 8018fb2:	6023      	str	r3, [r4, #0]
 8018fb4:	f7fe fa2a 	bl	801740c <_fflush_r>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	d16e      	bne.n	801909a <__sfvwrite_r+0x182>
 8018fbc:	2001      	movs	r0, #1
 8018fbe:	1b7f      	subs	r7, r7, r5
 8018fc0:	d105      	bne.n	8018fce <__sfvwrite_r+0xb6>
 8018fc2:	0021      	movs	r1, r4
 8018fc4:	9802      	ldr	r0, [sp, #8]
 8018fc6:	f7fe fa21 	bl	801740c <_fflush_r>
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	d165      	bne.n	801909a <__sfvwrite_r+0x182>
 8018fce:	9b03      	ldr	r3, [sp, #12]
 8018fd0:	9a04      	ldr	r2, [sp, #16]
 8018fd2:	1b5b      	subs	r3, r3, r5
 8018fd4:	9303      	str	r3, [sp, #12]
 8018fd6:	9b04      	ldr	r3, [sp, #16]
 8018fd8:	1976      	adds	r6, r6, r5
 8018fda:	689b      	ldr	r3, [r3, #8]
 8018fdc:	1b5b      	subs	r3, r3, r5
 8018fde:	6093      	str	r3, [r2, #8]
 8018fe0:	d1bd      	bne.n	8018f5e <__sfvwrite_r+0x46>
 8018fe2:	e7a1      	b.n	8018f28 <__sfvwrite_r+0x10>
 8018fe4:	0021      	movs	r1, r4
 8018fe6:	9802      	ldr	r0, [sp, #8]
 8018fe8:	f000 f8f4 	bl	80191d4 <__swsetup_r>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	d0a4      	beq.n	8018f3a <__sfvwrite_r+0x22>
 8018ff0:	2001      	movs	r0, #1
 8018ff2:	4240      	negs	r0, r0
 8018ff4:	e799      	b.n	8018f2a <__sfvwrite_r+0x12>
 8018ff6:	9b01      	ldr	r3, [sp, #4]
 8018ff8:	681e      	ldr	r6, [r3, #0]
 8018ffa:	685d      	ldr	r5, [r3, #4]
 8018ffc:	3308      	adds	r3, #8
 8018ffe:	9301      	str	r3, [sp, #4]
 8019000:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8019002:	69e1      	ldr	r1, [r4, #28]
 8019004:	2d00      	cmp	r5, #0
 8019006:	d0f6      	beq.n	8018ff6 <__sfvwrite_r+0xde>
 8019008:	4a6e      	ldr	r2, [pc, #440]	; (80191c4 <__sfvwrite_r+0x2ac>)
 801900a:	002b      	movs	r3, r5
 801900c:	4295      	cmp	r5, r2
 801900e:	d900      	bls.n	8019012 <__sfvwrite_r+0xfa>
 8019010:	0013      	movs	r3, r2
 8019012:	0032      	movs	r2, r6
 8019014:	9802      	ldr	r0, [sp, #8]
 8019016:	47b8      	blx	r7
 8019018:	2800      	cmp	r0, #0
 801901a:	dd3e      	ble.n	801909a <__sfvwrite_r+0x182>
 801901c:	9b04      	ldr	r3, [sp, #16]
 801901e:	9a04      	ldr	r2, [sp, #16]
 8019020:	689b      	ldr	r3, [r3, #8]
 8019022:	1836      	adds	r6, r6, r0
 8019024:	1a1b      	subs	r3, r3, r0
 8019026:	1a2d      	subs	r5, r5, r0
 8019028:	6093      	str	r3, [r2, #8]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d1e8      	bne.n	8019000 <__sfvwrite_r+0xe8>
 801902e:	e77b      	b.n	8018f28 <__sfvwrite_r+0x10>
 8019030:	2600      	movs	r6, #0
 8019032:	0035      	movs	r5, r6
 8019034:	e7e4      	b.n	8019000 <__sfvwrite_r+0xe8>
 8019036:	9b01      	ldr	r3, [sp, #4]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	9303      	str	r3, [sp, #12]
 801903c:	9b01      	ldr	r3, [sp, #4]
 801903e:	685d      	ldr	r5, [r3, #4]
 8019040:	3308      	adds	r3, #8
 8019042:	9301      	str	r3, [sp, #4]
 8019044:	220c      	movs	r2, #12
 8019046:	5ea3      	ldrsh	r3, [r4, r2]
 8019048:	6820      	ldr	r0, [r4, #0]
 801904a:	68a6      	ldr	r6, [r4, #8]
 801904c:	2d00      	cmp	r5, #0
 801904e:	d0f2      	beq.n	8019036 <__sfvwrite_r+0x11e>
 8019050:	2180      	movs	r1, #128	; 0x80
 8019052:	0089      	lsls	r1, r1, #2
 8019054:	b29a      	uxth	r2, r3
 8019056:	420b      	tst	r3, r1
 8019058:	d062      	beq.n	8019120 <__sfvwrite_r+0x208>
 801905a:	42ae      	cmp	r6, r5
 801905c:	d837      	bhi.n	80190ce <__sfvwrite_r+0x1b6>
 801905e:	2390      	movs	r3, #144	; 0x90
 8019060:	00db      	lsls	r3, r3, #3
 8019062:	421a      	tst	r2, r3
 8019064:	d033      	beq.n	80190ce <__sfvwrite_r+0x1b6>
 8019066:	6921      	ldr	r1, [r4, #16]
 8019068:	1a43      	subs	r3, r0, r1
 801906a:	2003      	movs	r0, #3
 801906c:	9305      	str	r3, [sp, #20]
 801906e:	6963      	ldr	r3, [r4, #20]
 8019070:	4343      	muls	r3, r0
 8019072:	0fdf      	lsrs	r7, r3, #31
 8019074:	18ff      	adds	r7, r7, r3
 8019076:	9b05      	ldr	r3, [sp, #20]
 8019078:	107f      	asrs	r7, r7, #1
 801907a:	3301      	adds	r3, #1
 801907c:	195b      	adds	r3, r3, r5
 801907e:	42bb      	cmp	r3, r7
 8019080:	d900      	bls.n	8019084 <__sfvwrite_r+0x16c>
 8019082:	001f      	movs	r7, r3
 8019084:	0552      	lsls	r2, r2, #21
 8019086:	d53c      	bpl.n	8019102 <__sfvwrite_r+0x1ea>
 8019088:	0039      	movs	r1, r7
 801908a:	9802      	ldr	r0, [sp, #8]
 801908c:	f7fa f84a 	bl	8013124 <_malloc_r>
 8019090:	1e06      	subs	r6, r0, #0
 8019092:	d10a      	bne.n	80190aa <__sfvwrite_r+0x192>
 8019094:	230c      	movs	r3, #12
 8019096:	9a02      	ldr	r2, [sp, #8]
 8019098:	6013      	str	r3, [r2, #0]
 801909a:	2340      	movs	r3, #64	; 0x40
 801909c:	89a2      	ldrh	r2, [r4, #12]
 801909e:	4313      	orrs	r3, r2
 80190a0:	81a3      	strh	r3, [r4, #12]
 80190a2:	e7a5      	b.n	8018ff0 <__sfvwrite_r+0xd8>
 80190a4:	0015      	movs	r5, r2
 80190a6:	9203      	str	r2, [sp, #12]
 80190a8:	e7cc      	b.n	8019044 <__sfvwrite_r+0x12c>
 80190aa:	9a05      	ldr	r2, [sp, #20]
 80190ac:	6921      	ldr	r1, [r4, #16]
 80190ae:	f7fb fd66 	bl	8014b7e <memcpy>
 80190b2:	89a2      	ldrh	r2, [r4, #12]
 80190b4:	4b44      	ldr	r3, [pc, #272]	; (80191c8 <__sfvwrite_r+0x2b0>)
 80190b6:	401a      	ands	r2, r3
 80190b8:	2380      	movs	r3, #128	; 0x80
 80190ba:	4313      	orrs	r3, r2
 80190bc:	81a3      	strh	r3, [r4, #12]
 80190be:	9b05      	ldr	r3, [sp, #20]
 80190c0:	6126      	str	r6, [r4, #16]
 80190c2:	18f6      	adds	r6, r6, r3
 80190c4:	6026      	str	r6, [r4, #0]
 80190c6:	002e      	movs	r6, r5
 80190c8:	6167      	str	r7, [r4, #20]
 80190ca:	1aff      	subs	r7, r7, r3
 80190cc:	60a7      	str	r7, [r4, #8]
 80190ce:	002f      	movs	r7, r5
 80190d0:	42ae      	cmp	r6, r5
 80190d2:	d900      	bls.n	80190d6 <__sfvwrite_r+0x1be>
 80190d4:	002e      	movs	r6, r5
 80190d6:	0032      	movs	r2, r6
 80190d8:	9903      	ldr	r1, [sp, #12]
 80190da:	6820      	ldr	r0, [r4, #0]
 80190dc:	f7fb fc10 	bl	8014900 <memmove>
 80190e0:	68a3      	ldr	r3, [r4, #8]
 80190e2:	1b9b      	subs	r3, r3, r6
 80190e4:	60a3      	str	r3, [r4, #8]
 80190e6:	6823      	ldr	r3, [r4, #0]
 80190e8:	199b      	adds	r3, r3, r6
 80190ea:	6023      	str	r3, [r4, #0]
 80190ec:	9b03      	ldr	r3, [sp, #12]
 80190ee:	9a04      	ldr	r2, [sp, #16]
 80190f0:	19db      	adds	r3, r3, r7
 80190f2:	9303      	str	r3, [sp, #12]
 80190f4:	9b04      	ldr	r3, [sp, #16]
 80190f6:	1bed      	subs	r5, r5, r7
 80190f8:	689b      	ldr	r3, [r3, #8]
 80190fa:	1bdb      	subs	r3, r3, r7
 80190fc:	6093      	str	r3, [r2, #8]
 80190fe:	d1a1      	bne.n	8019044 <__sfvwrite_r+0x12c>
 8019100:	e712      	b.n	8018f28 <__sfvwrite_r+0x10>
 8019102:	003a      	movs	r2, r7
 8019104:	9802      	ldr	r0, [sp, #8]
 8019106:	f7fa fa55 	bl	80135b4 <_realloc_r>
 801910a:	1e06      	subs	r6, r0, #0
 801910c:	d1d7      	bne.n	80190be <__sfvwrite_r+0x1a6>
 801910e:	6921      	ldr	r1, [r4, #16]
 8019110:	9802      	ldr	r0, [sp, #8]
 8019112:	f7fb fdab 	bl	8014c6c <_free_r>
 8019116:	2280      	movs	r2, #128	; 0x80
 8019118:	89a3      	ldrh	r3, [r4, #12]
 801911a:	4393      	bics	r3, r2
 801911c:	81a3      	strh	r3, [r4, #12]
 801911e:	e7b9      	b.n	8019094 <__sfvwrite_r+0x17c>
 8019120:	6923      	ldr	r3, [r4, #16]
 8019122:	4283      	cmp	r3, r0
 8019124:	d302      	bcc.n	801912c <__sfvwrite_r+0x214>
 8019126:	6967      	ldr	r7, [r4, #20]
 8019128:	42af      	cmp	r7, r5
 801912a:	d916      	bls.n	801915a <__sfvwrite_r+0x242>
 801912c:	42ae      	cmp	r6, r5
 801912e:	d900      	bls.n	8019132 <__sfvwrite_r+0x21a>
 8019130:	002e      	movs	r6, r5
 8019132:	0032      	movs	r2, r6
 8019134:	9903      	ldr	r1, [sp, #12]
 8019136:	f7fb fbe3 	bl	8014900 <memmove>
 801913a:	68a3      	ldr	r3, [r4, #8]
 801913c:	6822      	ldr	r2, [r4, #0]
 801913e:	1b9b      	subs	r3, r3, r6
 8019140:	1992      	adds	r2, r2, r6
 8019142:	0037      	movs	r7, r6
 8019144:	60a3      	str	r3, [r4, #8]
 8019146:	6022      	str	r2, [r4, #0]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d1cf      	bne.n	80190ec <__sfvwrite_r+0x1d4>
 801914c:	0021      	movs	r1, r4
 801914e:	9802      	ldr	r0, [sp, #8]
 8019150:	f7fe f95c 	bl	801740c <_fflush_r>
 8019154:	2800      	cmp	r0, #0
 8019156:	d0c9      	beq.n	80190ec <__sfvwrite_r+0x1d4>
 8019158:	e79f      	b.n	801909a <__sfvwrite_r+0x182>
 801915a:	4b1c      	ldr	r3, [pc, #112]	; (80191cc <__sfvwrite_r+0x2b4>)
 801915c:	0028      	movs	r0, r5
 801915e:	429d      	cmp	r5, r3
 8019160:	d900      	bls.n	8019164 <__sfvwrite_r+0x24c>
 8019162:	481b      	ldr	r0, [pc, #108]	; (80191d0 <__sfvwrite_r+0x2b8>)
 8019164:	0039      	movs	r1, r7
 8019166:	f7e7 f87d 	bl	8000264 <__divsi3>
 801916a:	003b      	movs	r3, r7
 801916c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801916e:	4343      	muls	r3, r0
 8019170:	9a03      	ldr	r2, [sp, #12]
 8019172:	69e1      	ldr	r1, [r4, #28]
 8019174:	9802      	ldr	r0, [sp, #8]
 8019176:	47b0      	blx	r6
 8019178:	1e07      	subs	r7, r0, #0
 801917a:	dcb7      	bgt.n	80190ec <__sfvwrite_r+0x1d4>
 801917c:	e78d      	b.n	801909a <__sfvwrite_r+0x182>
 801917e:	9b01      	ldr	r3, [sp, #4]
 8019180:	2000      	movs	r0, #0
 8019182:	681e      	ldr	r6, [r3, #0]
 8019184:	685b      	ldr	r3, [r3, #4]
 8019186:	9303      	str	r3, [sp, #12]
 8019188:	9b01      	ldr	r3, [sp, #4]
 801918a:	3308      	adds	r3, #8
 801918c:	9301      	str	r3, [sp, #4]
 801918e:	e6e6      	b.n	8018f5e <__sfvwrite_r+0x46>
 8019190:	9a05      	ldr	r2, [sp, #20]
 8019192:	4293      	cmp	r3, r2
 8019194:	dc08      	bgt.n	80191a8 <__sfvwrite_r+0x290>
 8019196:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019198:	0032      	movs	r2, r6
 801919a:	69e1      	ldr	r1, [r4, #28]
 801919c:	9802      	ldr	r0, [sp, #8]
 801919e:	47a8      	blx	r5
 80191a0:	1e05      	subs	r5, r0, #0
 80191a2:	dd00      	ble.n	80191a6 <__sfvwrite_r+0x28e>
 80191a4:	e70a      	b.n	8018fbc <__sfvwrite_r+0xa4>
 80191a6:	e778      	b.n	801909a <__sfvwrite_r+0x182>
 80191a8:	9a05      	ldr	r2, [sp, #20]
 80191aa:	0031      	movs	r1, r6
 80191ac:	f7fb fba8 	bl	8014900 <memmove>
 80191b0:	9a05      	ldr	r2, [sp, #20]
 80191b2:	68a3      	ldr	r3, [r4, #8]
 80191b4:	0015      	movs	r5, r2
 80191b6:	1a9b      	subs	r3, r3, r2
 80191b8:	60a3      	str	r3, [r4, #8]
 80191ba:	6823      	ldr	r3, [r4, #0]
 80191bc:	189b      	adds	r3, r3, r2
 80191be:	6023      	str	r3, [r4, #0]
 80191c0:	e6fc      	b.n	8018fbc <__sfvwrite_r+0xa4>
 80191c2:	46c0      	nop			; (mov r8, r8)
 80191c4:	7ffffc00 	.word	0x7ffffc00
 80191c8:	fffffb7f 	.word	0xfffffb7f
 80191cc:	7ffffffe 	.word	0x7ffffffe
 80191d0:	7fffffff 	.word	0x7fffffff

080191d4 <__swsetup_r>:
 80191d4:	4b30      	ldr	r3, [pc, #192]	; (8019298 <__swsetup_r+0xc4>)
 80191d6:	b570      	push	{r4, r5, r6, lr}
 80191d8:	0005      	movs	r5, r0
 80191da:	6818      	ldr	r0, [r3, #0]
 80191dc:	000c      	movs	r4, r1
 80191de:	2800      	cmp	r0, #0
 80191e0:	d004      	beq.n	80191ec <__swsetup_r+0x18>
 80191e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d101      	bne.n	80191ec <__swsetup_r+0x18>
 80191e8:	f7fb fadc 	bl	80147a4 <__sinit>
 80191ec:	230c      	movs	r3, #12
 80191ee:	5ee2      	ldrsh	r2, [r4, r3]
 80191f0:	b293      	uxth	r3, r2
 80191f2:	0711      	lsls	r1, r2, #28
 80191f4:	d423      	bmi.n	801923e <__swsetup_r+0x6a>
 80191f6:	06d9      	lsls	r1, r3, #27
 80191f8:	d407      	bmi.n	801920a <__swsetup_r+0x36>
 80191fa:	2309      	movs	r3, #9
 80191fc:	2001      	movs	r0, #1
 80191fe:	602b      	str	r3, [r5, #0]
 8019200:	3337      	adds	r3, #55	; 0x37
 8019202:	4313      	orrs	r3, r2
 8019204:	81a3      	strh	r3, [r4, #12]
 8019206:	4240      	negs	r0, r0
 8019208:	bd70      	pop	{r4, r5, r6, pc}
 801920a:	075b      	lsls	r3, r3, #29
 801920c:	d513      	bpl.n	8019236 <__swsetup_r+0x62>
 801920e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019210:	2900      	cmp	r1, #0
 8019212:	d008      	beq.n	8019226 <__swsetup_r+0x52>
 8019214:	0023      	movs	r3, r4
 8019216:	3340      	adds	r3, #64	; 0x40
 8019218:	4299      	cmp	r1, r3
 801921a:	d002      	beq.n	8019222 <__swsetup_r+0x4e>
 801921c:	0028      	movs	r0, r5
 801921e:	f7fb fd25 	bl	8014c6c <_free_r>
 8019222:	2300      	movs	r3, #0
 8019224:	6323      	str	r3, [r4, #48]	; 0x30
 8019226:	2224      	movs	r2, #36	; 0x24
 8019228:	89a3      	ldrh	r3, [r4, #12]
 801922a:	4393      	bics	r3, r2
 801922c:	81a3      	strh	r3, [r4, #12]
 801922e:	2300      	movs	r3, #0
 8019230:	6063      	str	r3, [r4, #4]
 8019232:	6923      	ldr	r3, [r4, #16]
 8019234:	6023      	str	r3, [r4, #0]
 8019236:	2308      	movs	r3, #8
 8019238:	89a2      	ldrh	r2, [r4, #12]
 801923a:	4313      	orrs	r3, r2
 801923c:	81a3      	strh	r3, [r4, #12]
 801923e:	6923      	ldr	r3, [r4, #16]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d10b      	bne.n	801925c <__swsetup_r+0x88>
 8019244:	21a0      	movs	r1, #160	; 0xa0
 8019246:	2280      	movs	r2, #128	; 0x80
 8019248:	89a3      	ldrh	r3, [r4, #12]
 801924a:	0089      	lsls	r1, r1, #2
 801924c:	0092      	lsls	r2, r2, #2
 801924e:	400b      	ands	r3, r1
 8019250:	4293      	cmp	r3, r2
 8019252:	d003      	beq.n	801925c <__swsetup_r+0x88>
 8019254:	0021      	movs	r1, r4
 8019256:	0028      	movs	r0, r5
 8019258:	f000 f8d4 	bl	8019404 <__smakebuf_r>
 801925c:	220c      	movs	r2, #12
 801925e:	5ea3      	ldrsh	r3, [r4, r2]
 8019260:	2001      	movs	r0, #1
 8019262:	001a      	movs	r2, r3
 8019264:	b299      	uxth	r1, r3
 8019266:	4002      	ands	r2, r0
 8019268:	4203      	tst	r3, r0
 801926a:	d00f      	beq.n	801928c <__swsetup_r+0xb8>
 801926c:	2200      	movs	r2, #0
 801926e:	60a2      	str	r2, [r4, #8]
 8019270:	6962      	ldr	r2, [r4, #20]
 8019272:	4252      	negs	r2, r2
 8019274:	61a2      	str	r2, [r4, #24]
 8019276:	2000      	movs	r0, #0
 8019278:	6922      	ldr	r2, [r4, #16]
 801927a:	4282      	cmp	r2, r0
 801927c:	d1c4      	bne.n	8019208 <__swsetup_r+0x34>
 801927e:	0609      	lsls	r1, r1, #24
 8019280:	d5c2      	bpl.n	8019208 <__swsetup_r+0x34>
 8019282:	2240      	movs	r2, #64	; 0x40
 8019284:	4313      	orrs	r3, r2
 8019286:	81a3      	strh	r3, [r4, #12]
 8019288:	3801      	subs	r0, #1
 801928a:	e7bd      	b.n	8019208 <__swsetup_r+0x34>
 801928c:	0788      	lsls	r0, r1, #30
 801928e:	d400      	bmi.n	8019292 <__swsetup_r+0xbe>
 8019290:	6962      	ldr	r2, [r4, #20]
 8019292:	60a2      	str	r2, [r4, #8]
 8019294:	e7ef      	b.n	8019276 <__swsetup_r+0xa2>
 8019296:	46c0      	nop			; (mov r8, r8)
 8019298:	20000778 	.word	0x20000778

0801929c <__fputwc>:
 801929c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801929e:	b085      	sub	sp, #20
 80192a0:	000e      	movs	r6, r1
 80192a2:	0015      	movs	r5, r2
 80192a4:	9001      	str	r0, [sp, #4]
 80192a6:	f7fb fbc1 	bl	8014a2c <__locale_mb_cur_max>
 80192aa:	0004      	movs	r4, r0
 80192ac:	2801      	cmp	r0, #1
 80192ae:	d119      	bne.n	80192e4 <__fputwc+0x48>
 80192b0:	1e73      	subs	r3, r6, #1
 80192b2:	2bfe      	cmp	r3, #254	; 0xfe
 80192b4:	d816      	bhi.n	80192e4 <__fputwc+0x48>
 80192b6:	ab02      	add	r3, sp, #8
 80192b8:	711e      	strb	r6, [r3, #4]
 80192ba:	2700      	movs	r7, #0
 80192bc:	42a7      	cmp	r7, r4
 80192be:	d020      	beq.n	8019302 <__fputwc+0x66>
 80192c0:	ab03      	add	r3, sp, #12
 80192c2:	5dd9      	ldrb	r1, [r3, r7]
 80192c4:	68ab      	ldr	r3, [r5, #8]
 80192c6:	3b01      	subs	r3, #1
 80192c8:	60ab      	str	r3, [r5, #8]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	da04      	bge.n	80192d8 <__fputwc+0x3c>
 80192ce:	69aa      	ldr	r2, [r5, #24]
 80192d0:	4293      	cmp	r3, r2
 80192d2:	db19      	blt.n	8019308 <__fputwc+0x6c>
 80192d4:	290a      	cmp	r1, #10
 80192d6:	d017      	beq.n	8019308 <__fputwc+0x6c>
 80192d8:	682b      	ldr	r3, [r5, #0]
 80192da:	1c5a      	adds	r2, r3, #1
 80192dc:	602a      	str	r2, [r5, #0]
 80192de:	7019      	strb	r1, [r3, #0]
 80192e0:	3701      	adds	r7, #1
 80192e2:	e7eb      	b.n	80192bc <__fputwc+0x20>
 80192e4:	002b      	movs	r3, r5
 80192e6:	0032      	movs	r2, r6
 80192e8:	9801      	ldr	r0, [sp, #4]
 80192ea:	335c      	adds	r3, #92	; 0x5c
 80192ec:	a903      	add	r1, sp, #12
 80192ee:	f000 f843 	bl	8019378 <_wcrtomb_r>
 80192f2:	0004      	movs	r4, r0
 80192f4:	1c43      	adds	r3, r0, #1
 80192f6:	d1e0      	bne.n	80192ba <__fputwc+0x1e>
 80192f8:	2340      	movs	r3, #64	; 0x40
 80192fa:	0006      	movs	r6, r0
 80192fc:	89aa      	ldrh	r2, [r5, #12]
 80192fe:	4313      	orrs	r3, r2
 8019300:	81ab      	strh	r3, [r5, #12]
 8019302:	0030      	movs	r0, r6
 8019304:	b005      	add	sp, #20
 8019306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019308:	002a      	movs	r2, r5
 801930a:	9801      	ldr	r0, [sp, #4]
 801930c:	f000 f8b8 	bl	8019480 <__swbuf_r>
 8019310:	1c43      	adds	r3, r0, #1
 8019312:	d1e5      	bne.n	80192e0 <__fputwc+0x44>
 8019314:	0006      	movs	r6, r0
 8019316:	e7f4      	b.n	8019302 <__fputwc+0x66>

08019318 <_fputwc_r>:
 8019318:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801931a:	b570      	push	{r4, r5, r6, lr}
 801931c:	0005      	movs	r5, r0
 801931e:	000e      	movs	r6, r1
 8019320:	0014      	movs	r4, r2
 8019322:	07db      	lsls	r3, r3, #31
 8019324:	d405      	bmi.n	8019332 <_fputwc_r+0x1a>
 8019326:	8993      	ldrh	r3, [r2, #12]
 8019328:	059b      	lsls	r3, r3, #22
 801932a:	d402      	bmi.n	8019332 <_fputwc_r+0x1a>
 801932c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801932e:	f7fb fc11 	bl	8014b54 <__retarget_lock_acquire_recursive>
 8019332:	230c      	movs	r3, #12
 8019334:	5ee2      	ldrsh	r2, [r4, r3]
 8019336:	2380      	movs	r3, #128	; 0x80
 8019338:	019b      	lsls	r3, r3, #6
 801933a:	421a      	tst	r2, r3
 801933c:	d104      	bne.n	8019348 <_fputwc_r+0x30>
 801933e:	431a      	orrs	r2, r3
 8019340:	81a2      	strh	r2, [r4, #12]
 8019342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019344:	4313      	orrs	r3, r2
 8019346:	6663      	str	r3, [r4, #100]	; 0x64
 8019348:	0028      	movs	r0, r5
 801934a:	0022      	movs	r2, r4
 801934c:	0031      	movs	r1, r6
 801934e:	f7ff ffa5 	bl	801929c <__fputwc>
 8019352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019354:	0005      	movs	r5, r0
 8019356:	07db      	lsls	r3, r3, #31
 8019358:	d405      	bmi.n	8019366 <_fputwc_r+0x4e>
 801935a:	89a3      	ldrh	r3, [r4, #12]
 801935c:	059b      	lsls	r3, r3, #22
 801935e:	d402      	bmi.n	8019366 <_fputwc_r+0x4e>
 8019360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019362:	f7fb fbf8 	bl	8014b56 <__retarget_lock_release_recursive>
 8019366:	0028      	movs	r0, r5
 8019368:	bd70      	pop	{r4, r5, r6, pc}

0801936a <abort>:
 801936a:	2006      	movs	r0, #6
 801936c:	b510      	push	{r4, lr}
 801936e:	f000 f905 	bl	801957c <raise>
 8019372:	2001      	movs	r0, #1
 8019374:	f000 f996 	bl	80196a4 <_exit>

08019378 <_wcrtomb_r>:
 8019378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801937a:	001d      	movs	r5, r3
 801937c:	4b09      	ldr	r3, [pc, #36]	; (80193a4 <_wcrtomb_r+0x2c>)
 801937e:	0004      	movs	r4, r0
 8019380:	33e0      	adds	r3, #224	; 0xe0
 8019382:	681e      	ldr	r6, [r3, #0]
 8019384:	002b      	movs	r3, r5
 8019386:	2900      	cmp	r1, #0
 8019388:	d101      	bne.n	801938e <_wcrtomb_r+0x16>
 801938a:	000a      	movs	r2, r1
 801938c:	a901      	add	r1, sp, #4
 801938e:	0020      	movs	r0, r4
 8019390:	47b0      	blx	r6
 8019392:	1c43      	adds	r3, r0, #1
 8019394:	d103      	bne.n	801939e <_wcrtomb_r+0x26>
 8019396:	2300      	movs	r3, #0
 8019398:	602b      	str	r3, [r5, #0]
 801939a:	338a      	adds	r3, #138	; 0x8a
 801939c:	6023      	str	r3, [r4, #0]
 801939e:	b004      	add	sp, #16
 80193a0:	bd70      	pop	{r4, r5, r6, pc}
 80193a2:	46c0      	nop			; (mov r8, r8)
 80193a4:	200004e8 	.word	0x200004e8

080193a8 <__swhatbuf_r>:
 80193a8:	b570      	push	{r4, r5, r6, lr}
 80193aa:	000e      	movs	r6, r1
 80193ac:	001d      	movs	r5, r3
 80193ae:	230e      	movs	r3, #14
 80193b0:	5ec9      	ldrsh	r1, [r1, r3]
 80193b2:	0014      	movs	r4, r2
 80193b4:	b096      	sub	sp, #88	; 0x58
 80193b6:	2900      	cmp	r1, #0
 80193b8:	da09      	bge.n	80193ce <__swhatbuf_r+0x26>
 80193ba:	89b2      	ldrh	r2, [r6, #12]
 80193bc:	2380      	movs	r3, #128	; 0x80
 80193be:	0011      	movs	r1, r2
 80193c0:	4019      	ands	r1, r3
 80193c2:	421a      	tst	r2, r3
 80193c4:	d018      	beq.n	80193f8 <__swhatbuf_r+0x50>
 80193c6:	2100      	movs	r1, #0
 80193c8:	3b40      	subs	r3, #64	; 0x40
 80193ca:	0008      	movs	r0, r1
 80193cc:	e010      	b.n	80193f0 <__swhatbuf_r+0x48>
 80193ce:	466a      	mov	r2, sp
 80193d0:	f000 f8de 	bl	8019590 <_fstat_r>
 80193d4:	2800      	cmp	r0, #0
 80193d6:	dbf0      	blt.n	80193ba <__swhatbuf_r+0x12>
 80193d8:	23f0      	movs	r3, #240	; 0xf0
 80193da:	9901      	ldr	r1, [sp, #4]
 80193dc:	021b      	lsls	r3, r3, #8
 80193de:	4019      	ands	r1, r3
 80193e0:	4b07      	ldr	r3, [pc, #28]	; (8019400 <__swhatbuf_r+0x58>)
 80193e2:	2080      	movs	r0, #128	; 0x80
 80193e4:	18c9      	adds	r1, r1, r3
 80193e6:	424b      	negs	r3, r1
 80193e8:	4159      	adcs	r1, r3
 80193ea:	2380      	movs	r3, #128	; 0x80
 80193ec:	0100      	lsls	r0, r0, #4
 80193ee:	00db      	lsls	r3, r3, #3
 80193f0:	6029      	str	r1, [r5, #0]
 80193f2:	6023      	str	r3, [r4, #0]
 80193f4:	b016      	add	sp, #88	; 0x58
 80193f6:	bd70      	pop	{r4, r5, r6, pc}
 80193f8:	2380      	movs	r3, #128	; 0x80
 80193fa:	00db      	lsls	r3, r3, #3
 80193fc:	e7e5      	b.n	80193ca <__swhatbuf_r+0x22>
 80193fe:	46c0      	nop			; (mov r8, r8)
 8019400:	ffffe000 	.word	0xffffe000

08019404 <__smakebuf_r>:
 8019404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019406:	2602      	movs	r6, #2
 8019408:	898b      	ldrh	r3, [r1, #12]
 801940a:	0005      	movs	r5, r0
 801940c:	000c      	movs	r4, r1
 801940e:	4233      	tst	r3, r6
 8019410:	d006      	beq.n	8019420 <__smakebuf_r+0x1c>
 8019412:	0023      	movs	r3, r4
 8019414:	3343      	adds	r3, #67	; 0x43
 8019416:	6023      	str	r3, [r4, #0]
 8019418:	6123      	str	r3, [r4, #16]
 801941a:	2301      	movs	r3, #1
 801941c:	6163      	str	r3, [r4, #20]
 801941e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8019420:	466a      	mov	r2, sp
 8019422:	ab01      	add	r3, sp, #4
 8019424:	f7ff ffc0 	bl	80193a8 <__swhatbuf_r>
 8019428:	9900      	ldr	r1, [sp, #0]
 801942a:	0007      	movs	r7, r0
 801942c:	0028      	movs	r0, r5
 801942e:	f7f9 fe79 	bl	8013124 <_malloc_r>
 8019432:	2800      	cmp	r0, #0
 8019434:	d108      	bne.n	8019448 <__smakebuf_r+0x44>
 8019436:	220c      	movs	r2, #12
 8019438:	5ea3      	ldrsh	r3, [r4, r2]
 801943a:	059a      	lsls	r2, r3, #22
 801943c:	d4ef      	bmi.n	801941e <__smakebuf_r+0x1a>
 801943e:	2203      	movs	r2, #3
 8019440:	4393      	bics	r3, r2
 8019442:	431e      	orrs	r6, r3
 8019444:	81a6      	strh	r6, [r4, #12]
 8019446:	e7e4      	b.n	8019412 <__smakebuf_r+0xe>
 8019448:	2380      	movs	r3, #128	; 0x80
 801944a:	89a2      	ldrh	r2, [r4, #12]
 801944c:	6020      	str	r0, [r4, #0]
 801944e:	4313      	orrs	r3, r2
 8019450:	81a3      	strh	r3, [r4, #12]
 8019452:	9b00      	ldr	r3, [sp, #0]
 8019454:	6120      	str	r0, [r4, #16]
 8019456:	6163      	str	r3, [r4, #20]
 8019458:	9b01      	ldr	r3, [sp, #4]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d00c      	beq.n	8019478 <__smakebuf_r+0x74>
 801945e:	0028      	movs	r0, r5
 8019460:	230e      	movs	r3, #14
 8019462:	5ee1      	ldrsh	r1, [r4, r3]
 8019464:	f000 f8a6 	bl	80195b4 <_isatty_r>
 8019468:	2800      	cmp	r0, #0
 801946a:	d005      	beq.n	8019478 <__smakebuf_r+0x74>
 801946c:	2303      	movs	r3, #3
 801946e:	89a2      	ldrh	r2, [r4, #12]
 8019470:	439a      	bics	r2, r3
 8019472:	3b02      	subs	r3, #2
 8019474:	4313      	orrs	r3, r2
 8019476:	81a3      	strh	r3, [r4, #12]
 8019478:	89a3      	ldrh	r3, [r4, #12]
 801947a:	433b      	orrs	r3, r7
 801947c:	81a3      	strh	r3, [r4, #12]
 801947e:	e7ce      	b.n	801941e <__smakebuf_r+0x1a>

08019480 <__swbuf_r>:
 8019480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019482:	0006      	movs	r6, r0
 8019484:	000d      	movs	r5, r1
 8019486:	0014      	movs	r4, r2
 8019488:	2800      	cmp	r0, #0
 801948a:	d004      	beq.n	8019496 <__swbuf_r+0x16>
 801948c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801948e:	2b00      	cmp	r3, #0
 8019490:	d101      	bne.n	8019496 <__swbuf_r+0x16>
 8019492:	f7fb f987 	bl	80147a4 <__sinit>
 8019496:	69a3      	ldr	r3, [r4, #24]
 8019498:	60a3      	str	r3, [r4, #8]
 801949a:	89a3      	ldrh	r3, [r4, #12]
 801949c:	071b      	lsls	r3, r3, #28
 801949e:	d52e      	bpl.n	80194fe <__swbuf_r+0x7e>
 80194a0:	6923      	ldr	r3, [r4, #16]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d02b      	beq.n	80194fe <__swbuf_r+0x7e>
 80194a6:	230c      	movs	r3, #12
 80194a8:	5ee2      	ldrsh	r2, [r4, r3]
 80194aa:	2380      	movs	r3, #128	; 0x80
 80194ac:	019b      	lsls	r3, r3, #6
 80194ae:	b2ef      	uxtb	r7, r5
 80194b0:	b2ed      	uxtb	r5, r5
 80194b2:	421a      	tst	r2, r3
 80194b4:	d02c      	beq.n	8019510 <__swbuf_r+0x90>
 80194b6:	6923      	ldr	r3, [r4, #16]
 80194b8:	6820      	ldr	r0, [r4, #0]
 80194ba:	1ac0      	subs	r0, r0, r3
 80194bc:	6963      	ldr	r3, [r4, #20]
 80194be:	4283      	cmp	r3, r0
 80194c0:	dc05      	bgt.n	80194ce <__swbuf_r+0x4e>
 80194c2:	0021      	movs	r1, r4
 80194c4:	0030      	movs	r0, r6
 80194c6:	f7fd ffa1 	bl	801740c <_fflush_r>
 80194ca:	2800      	cmp	r0, #0
 80194cc:	d11d      	bne.n	801950a <__swbuf_r+0x8a>
 80194ce:	68a3      	ldr	r3, [r4, #8]
 80194d0:	3001      	adds	r0, #1
 80194d2:	3b01      	subs	r3, #1
 80194d4:	60a3      	str	r3, [r4, #8]
 80194d6:	6823      	ldr	r3, [r4, #0]
 80194d8:	1c5a      	adds	r2, r3, #1
 80194da:	6022      	str	r2, [r4, #0]
 80194dc:	701f      	strb	r7, [r3, #0]
 80194de:	6963      	ldr	r3, [r4, #20]
 80194e0:	4283      	cmp	r3, r0
 80194e2:	d004      	beq.n	80194ee <__swbuf_r+0x6e>
 80194e4:	89a3      	ldrh	r3, [r4, #12]
 80194e6:	07db      	lsls	r3, r3, #31
 80194e8:	d507      	bpl.n	80194fa <__swbuf_r+0x7a>
 80194ea:	2d0a      	cmp	r5, #10
 80194ec:	d105      	bne.n	80194fa <__swbuf_r+0x7a>
 80194ee:	0021      	movs	r1, r4
 80194f0:	0030      	movs	r0, r6
 80194f2:	f7fd ff8b 	bl	801740c <_fflush_r>
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d107      	bne.n	801950a <__swbuf_r+0x8a>
 80194fa:	0028      	movs	r0, r5
 80194fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194fe:	0021      	movs	r1, r4
 8019500:	0030      	movs	r0, r6
 8019502:	f7ff fe67 	bl	80191d4 <__swsetup_r>
 8019506:	2800      	cmp	r0, #0
 8019508:	d0cd      	beq.n	80194a6 <__swbuf_r+0x26>
 801950a:	2501      	movs	r5, #1
 801950c:	426d      	negs	r5, r5
 801950e:	e7f4      	b.n	80194fa <__swbuf_r+0x7a>
 8019510:	4313      	orrs	r3, r2
 8019512:	81a3      	strh	r3, [r4, #12]
 8019514:	4a02      	ldr	r2, [pc, #8]	; (8019520 <__swbuf_r+0xa0>)
 8019516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019518:	4013      	ands	r3, r2
 801951a:	6663      	str	r3, [r4, #100]	; 0x64
 801951c:	e7cb      	b.n	80194b6 <__swbuf_r+0x36>
 801951e:	46c0      	nop			; (mov r8, r8)
 8019520:	ffffdfff 	.word	0xffffdfff

08019524 <_raise_r>:
 8019524:	b570      	push	{r4, r5, r6, lr}
 8019526:	0004      	movs	r4, r0
 8019528:	000d      	movs	r5, r1
 801952a:	291f      	cmp	r1, #31
 801952c:	d904      	bls.n	8019538 <_raise_r+0x14>
 801952e:	2316      	movs	r3, #22
 8019530:	6003      	str	r3, [r0, #0]
 8019532:	2001      	movs	r0, #1
 8019534:	4240      	negs	r0, r0
 8019536:	bd70      	pop	{r4, r5, r6, pc}
 8019538:	0003      	movs	r3, r0
 801953a:	33fc      	adds	r3, #252	; 0xfc
 801953c:	69db      	ldr	r3, [r3, #28]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d004      	beq.n	801954c <_raise_r+0x28>
 8019542:	008a      	lsls	r2, r1, #2
 8019544:	189b      	adds	r3, r3, r2
 8019546:	681a      	ldr	r2, [r3, #0]
 8019548:	2a00      	cmp	r2, #0
 801954a:	d108      	bne.n	801955e <_raise_r+0x3a>
 801954c:	0020      	movs	r0, r4
 801954e:	f000 f855 	bl	80195fc <_getpid_r>
 8019552:	002a      	movs	r2, r5
 8019554:	0001      	movs	r1, r0
 8019556:	0020      	movs	r0, r4
 8019558:	f000 f83e 	bl	80195d8 <_kill_r>
 801955c:	e7eb      	b.n	8019536 <_raise_r+0x12>
 801955e:	2000      	movs	r0, #0
 8019560:	2a01      	cmp	r2, #1
 8019562:	d0e8      	beq.n	8019536 <_raise_r+0x12>
 8019564:	1c51      	adds	r1, r2, #1
 8019566:	d103      	bne.n	8019570 <_raise_r+0x4c>
 8019568:	2316      	movs	r3, #22
 801956a:	3001      	adds	r0, #1
 801956c:	6023      	str	r3, [r4, #0]
 801956e:	e7e2      	b.n	8019536 <_raise_r+0x12>
 8019570:	2400      	movs	r4, #0
 8019572:	0028      	movs	r0, r5
 8019574:	601c      	str	r4, [r3, #0]
 8019576:	4790      	blx	r2
 8019578:	0020      	movs	r0, r4
 801957a:	e7dc      	b.n	8019536 <_raise_r+0x12>

0801957c <raise>:
 801957c:	b510      	push	{r4, lr}
 801957e:	4b03      	ldr	r3, [pc, #12]	; (801958c <raise+0x10>)
 8019580:	0001      	movs	r1, r0
 8019582:	6818      	ldr	r0, [r3, #0]
 8019584:	f7ff ffce 	bl	8019524 <_raise_r>
 8019588:	bd10      	pop	{r4, pc}
 801958a:	46c0      	nop			; (mov r8, r8)
 801958c:	20000778 	.word	0x20000778

08019590 <_fstat_r>:
 8019590:	2300      	movs	r3, #0
 8019592:	b570      	push	{r4, r5, r6, lr}
 8019594:	4d06      	ldr	r5, [pc, #24]	; (80195b0 <_fstat_r+0x20>)
 8019596:	0004      	movs	r4, r0
 8019598:	0008      	movs	r0, r1
 801959a:	0011      	movs	r1, r2
 801959c:	602b      	str	r3, [r5, #0]
 801959e:	f000 f839 	bl	8019614 <_fstat>
 80195a2:	1c43      	adds	r3, r0, #1
 80195a4:	d103      	bne.n	80195ae <_fstat_r+0x1e>
 80195a6:	682b      	ldr	r3, [r5, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d000      	beq.n	80195ae <_fstat_r+0x1e>
 80195ac:	6023      	str	r3, [r4, #0]
 80195ae:	bd70      	pop	{r4, r5, r6, pc}
 80195b0:	20006db8 	.word	0x20006db8

080195b4 <_isatty_r>:
 80195b4:	2300      	movs	r3, #0
 80195b6:	b570      	push	{r4, r5, r6, lr}
 80195b8:	4d06      	ldr	r5, [pc, #24]	; (80195d4 <_isatty_r+0x20>)
 80195ba:	0004      	movs	r4, r0
 80195bc:	0008      	movs	r0, r1
 80195be:	602b      	str	r3, [r5, #0]
 80195c0:	f000 f838 	bl	8019634 <_isatty>
 80195c4:	1c43      	adds	r3, r0, #1
 80195c6:	d103      	bne.n	80195d0 <_isatty_r+0x1c>
 80195c8:	682b      	ldr	r3, [r5, #0]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d000      	beq.n	80195d0 <_isatty_r+0x1c>
 80195ce:	6023      	str	r3, [r4, #0]
 80195d0:	bd70      	pop	{r4, r5, r6, pc}
 80195d2:	46c0      	nop			; (mov r8, r8)
 80195d4:	20006db8 	.word	0x20006db8

080195d8 <_kill_r>:
 80195d8:	2300      	movs	r3, #0
 80195da:	b570      	push	{r4, r5, r6, lr}
 80195dc:	4d06      	ldr	r5, [pc, #24]	; (80195f8 <_kill_r+0x20>)
 80195de:	0004      	movs	r4, r0
 80195e0:	0008      	movs	r0, r1
 80195e2:	0011      	movs	r1, r2
 80195e4:	602b      	str	r3, [r5, #0]
 80195e6:	f000 f82d 	bl	8019644 <_kill>
 80195ea:	1c43      	adds	r3, r0, #1
 80195ec:	d103      	bne.n	80195f6 <_kill_r+0x1e>
 80195ee:	682b      	ldr	r3, [r5, #0]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d000      	beq.n	80195f6 <_kill_r+0x1e>
 80195f4:	6023      	str	r3, [r4, #0]
 80195f6:	bd70      	pop	{r4, r5, r6, pc}
 80195f8:	20006db8 	.word	0x20006db8

080195fc <_getpid_r>:
 80195fc:	b510      	push	{r4, lr}
 80195fe:	f000 f811 	bl	8019624 <_getpid>
 8019602:	bd10      	pop	{r4, pc}

08019604 <_close>:
 8019604:	2258      	movs	r2, #88	; 0x58
 8019606:	2001      	movs	r0, #1
 8019608:	4b01      	ldr	r3, [pc, #4]	; (8019610 <_close+0xc>)
 801960a:	4240      	negs	r0, r0
 801960c:	601a      	str	r2, [r3, #0]
 801960e:	4770      	bx	lr
 8019610:	20006db8 	.word	0x20006db8

08019614 <_fstat>:
 8019614:	2258      	movs	r2, #88	; 0x58
 8019616:	2001      	movs	r0, #1
 8019618:	4b01      	ldr	r3, [pc, #4]	; (8019620 <_fstat+0xc>)
 801961a:	4240      	negs	r0, r0
 801961c:	601a      	str	r2, [r3, #0]
 801961e:	4770      	bx	lr
 8019620:	20006db8 	.word	0x20006db8

08019624 <_getpid>:
 8019624:	2258      	movs	r2, #88	; 0x58
 8019626:	2001      	movs	r0, #1
 8019628:	4b01      	ldr	r3, [pc, #4]	; (8019630 <_getpid+0xc>)
 801962a:	4240      	negs	r0, r0
 801962c:	601a      	str	r2, [r3, #0]
 801962e:	4770      	bx	lr
 8019630:	20006db8 	.word	0x20006db8

08019634 <_isatty>:
 8019634:	2258      	movs	r2, #88	; 0x58
 8019636:	4b02      	ldr	r3, [pc, #8]	; (8019640 <_isatty+0xc>)
 8019638:	2000      	movs	r0, #0
 801963a:	601a      	str	r2, [r3, #0]
 801963c:	4770      	bx	lr
 801963e:	46c0      	nop			; (mov r8, r8)
 8019640:	20006db8 	.word	0x20006db8

08019644 <_kill>:
 8019644:	2258      	movs	r2, #88	; 0x58
 8019646:	2001      	movs	r0, #1
 8019648:	4b01      	ldr	r3, [pc, #4]	; (8019650 <_kill+0xc>)
 801964a:	4240      	negs	r0, r0
 801964c:	601a      	str	r2, [r3, #0]
 801964e:	4770      	bx	lr
 8019650:	20006db8 	.word	0x20006db8

08019654 <_lseek>:
 8019654:	2258      	movs	r2, #88	; 0x58
 8019656:	2001      	movs	r0, #1
 8019658:	4b01      	ldr	r3, [pc, #4]	; (8019660 <_lseek+0xc>)
 801965a:	4240      	negs	r0, r0
 801965c:	601a      	str	r2, [r3, #0]
 801965e:	4770      	bx	lr
 8019660:	20006db8 	.word	0x20006db8

08019664 <_read>:
 8019664:	2258      	movs	r2, #88	; 0x58
 8019666:	2001      	movs	r0, #1
 8019668:	4b01      	ldr	r3, [pc, #4]	; (8019670 <_read+0xc>)
 801966a:	4240      	negs	r0, r0
 801966c:	601a      	str	r2, [r3, #0]
 801966e:	4770      	bx	lr
 8019670:	20006db8 	.word	0x20006db8

08019674 <_sbrk>:
 8019674:	4a05      	ldr	r2, [pc, #20]	; (801968c <_sbrk+0x18>)
 8019676:	0003      	movs	r3, r0
 8019678:	6811      	ldr	r1, [r2, #0]
 801967a:	2900      	cmp	r1, #0
 801967c:	d101      	bne.n	8019682 <_sbrk+0xe>
 801967e:	4904      	ldr	r1, [pc, #16]	; (8019690 <_sbrk+0x1c>)
 8019680:	6011      	str	r1, [r2, #0]
 8019682:	6810      	ldr	r0, [r2, #0]
 8019684:	18c3      	adds	r3, r0, r3
 8019686:	6013      	str	r3, [r2, #0]
 8019688:	4770      	bx	lr
 801968a:	46c0      	nop			; (mov r8, r8)
 801968c:	20006f54 	.word	0x20006f54
 8019690:	20006f58 	.word	0x20006f58

08019694 <_write>:
 8019694:	2258      	movs	r2, #88	; 0x58
 8019696:	2001      	movs	r0, #1
 8019698:	4b01      	ldr	r3, [pc, #4]	; (80196a0 <_write+0xc>)
 801969a:	4240      	negs	r0, r0
 801969c:	601a      	str	r2, [r3, #0]
 801969e:	4770      	bx	lr
 80196a0:	20006db8 	.word	0x20006db8

080196a4 <_exit>:
 80196a4:	e7fe      	b.n	80196a4 <_exit>
	...

080196a8 <_init>:
 80196a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196aa:	46c0      	nop			; (mov r8, r8)
 80196ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ae:	bc08      	pop	{r3}
 80196b0:	469e      	mov	lr, r3
 80196b2:	4770      	bx	lr

080196b4 <_fini>:
 80196b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196b6:	46c0      	nop			; (mov r8, r8)
 80196b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ba:	bc08      	pop	{r3}
 80196bc:	469e      	mov	lr, r3
 80196be:	4770      	bx	lr
