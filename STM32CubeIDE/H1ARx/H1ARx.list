
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003164  08016ab0  08016ab0  00026ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019c14  08019c14  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  08019c14  08019c14  00029c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019c1c  08019c1c  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019c1c  08019c1c  00029c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019c24  08019c24  00029c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  08019c28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  08019c30  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006578  20000a78  0801a6a0  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006ff0  0801a6a0  00036ff0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051cc6  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009615  00000000  00000000  00082766  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a667  00000000  00000000  0008bd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a40  00000000  00000000  000a63e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002e60  00000000  00000000  000a7e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001750b  00000000  00000000  000aac88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a4dc  00000000  00000000  000c2193  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cc66f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062dc  00000000  00000000  000cc6ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08016a98 	.word	0x08016a98

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08016a98 	.word	0x08016a98

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017104 	.word	0x08017104
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017144 	.word	0x08017144
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017184 	.word	0x08017184
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	46c6      	mov	lr, r8
 8002d28:	b500      	push	{lr}
 8002d2a:	0006      	movs	r6, r0
 8002d2c:	000d      	movs	r5, r1
 8002d2e:	4690      	mov	r8, r2
 8002d30:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002d32:	f009 ffd9 	bl	800cce8 <GetUart>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d01c      	beq.n	8002d74 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <Send_BOS_Message+0x60>)
 8002d3c:	00b2      	lsls	r2, r6, #2
 8002d3e:	58d0      	ldr	r0, [r2, r3]
 8002d40:	0021      	movs	r1, r4
 8002d42:	f00a f943 	bl	800cfcc <osSemaphoreWait>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d114      	bne.n	8002d74 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <Send_BOS_Message+0x50>
 8002d50:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d52:	0030      	movs	r0, r6
 8002d54:	f009 ffc8 	bl	800cce8 <GetUart>
 8002d58:	0029      	movs	r1, r5
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f00e fb6c 	bl	8011438 <HAL_UART_Transmit_IT>
			for(uint8_t i=0;i<n;i++)
 8002d60:	3401      	adds	r4, #1
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d62:	0007      	movs	r7, r0
			for(uint8_t i=0;i<n;i++)
 8002d64:	b2e4      	uxtb	r4, r4
				buffer++;
				//Delay_us(500);
				Delay_ms(2);
 8002d66:	2002      	movs	r0, #2
				buffer++;
 8002d68:	3501      	adds	r5, #1
				Delay_ms(2);
 8002d6a:	f00b ff89 	bl	800ec80 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002d6e:	4544      	cmp	r4, r8
 8002d70:	d3ef      	bcc.n	8002d52 <Send_BOS_Message+0x2e>
 8002d72:	e000      	b.n	8002d76 <Send_BOS_Message+0x52>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d74:	2701      	movs	r7, #1
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002d76:	200a      	movs	r0, #10
 8002d78:	f00b ff82 	bl	800ec80 <HAL_Delay>
	return result;
}
 8002d7c:	0038      	movs	r0, r7
 8002d7e:	bc04      	pop	{r2}
 8002d80:	4690      	mov	r8, r2
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d84:	20006b04 	.word	0x20006b04

08002d88 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8e:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d90:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d92:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d035      	beq.n	8002e04 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d98:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d9a:	d02c      	beq.n	8002df6 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <LoadROtopology+0x94>)
 8002d9e:	b2f6      	uxtb	r6, r6
 8002da0:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <LoadROtopology+0x98>)
 8002da4:	7013      	strb	r3, [r2, #0]
 8002da6:	466b      	mov	r3, sp
 8002da8:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002daa:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002dac:	2202      	movs	r2, #2
 8002dae:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002db0:	469c      	mov	ip, r3
 8002db2:	4d1c      	ldr	r5, [pc, #112]	; (8002e24 <LoadROtopology+0x9c>)
 8002db4:	4663      	mov	r3, ip
 8002db6:	700b      	strb	r3, [r1, #0]
 8002db8:	780b      	ldrb	r3, [r1, #0]
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d814      	bhi.n	8002de8 <LoadROtopology+0x60>
 8002dbe:	1e63      	subs	r3, r4, #1
 8002dc0:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002dc2:	18c0      	adds	r0, r0, r3
 8002dc4:	0040      	lsls	r0, r0, #1
 8002dc6:	18c0      	adds	r0, r0, r3
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <LoadROtopology+0x8c>)
 8002dca:	18d7      	adds	r7, r2, r3
 8002dcc:	780b      	ldrb	r3, [r1, #0]
 8002dce:	883f      	ldrh	r7, [r7, #0]
 8002dd0:	18c3      	adds	r3, r0, r3
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dd6:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002dd8:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	700b      	strb	r3, [r1, #0]
 8002de0:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002de2:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	d9ef      	bls.n	8002dc8 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	42b4      	cmp	r4, r6
 8002dee:	d9e1      	bls.n	8002db4 <LoadROtopology+0x2c>
 8002df0:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002df2:	b003      	add	sp, #12
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002df6:	2101      	movs	r1, #1
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002dfa:	2601      	movs	r6, #1
			N =1;
 8002dfc:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <LoadROtopology+0x98>)
 8002e00:	7013      	strb	r3, [r2, #0]
 8002e02:	e7d0      	b.n	8002da6 <LoadROtopology+0x1e>
		N =1;
 8002e04:	2201      	movs	r2, #1
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002e08:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002e0a:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <LoadROtopology+0x98>)
 8002e10:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002e12:	e7ee      	b.n	8002df2 <LoadROtopology+0x6a>
 8002e14:	0801d800 	.word	0x0801d800
 8002e18:	0000ffff 	.word	0x0000ffff
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	20000a98 	.word	0x20000a98
 8002e24:	20000f0c 	.word	0x20000f0c

08002e28 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	46c6      	mov	lr, r8
 8002e2c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002e2e:	4e0f      	ldr	r6, [pc, #60]	; (8002e6c <LoadEEportsDir+0x44>)
 8002e30:	7833      	ldrb	r3, [r6, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002e36:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002e38:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002e3a:	4698      	mov	r8, r3
 8002e3c:	4f0c      	ldr	r7, [pc, #48]	; (8002e70 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e3e:	1e61      	subs	r1, r4, #1
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	1c65      	adds	r5, r4, #1
 8002e44:	1879      	adds	r1, r7, r1
 8002e46:	b2a8      	uxth	r0, r5
 8002e48:	f007 fdbe 	bl	800a9c8 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e4c:	2c19      	cmp	r4, #25
 8002e4e:	d901      	bls.n	8002e54 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002e50:	230a      	movs	r3, #10
 8002e52:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002e54:	7833      	ldrb	r3, [r6, #0]
 8002e56:	b2ec      	uxtb	r4, r5
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d2f0      	bcs.n	8002e3e <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	bc04      	pop	{r2}
 8002e60:	4690      	mov	r8, r2
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	4698      	mov	r8, r3
 8002e68:	e7f8      	b.n	8002e5c <LoadEEportsDir+0x34>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	20006f48 	.word	0x20006f48

08002e74 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	464e      	mov	r6, r9
 8002e78:	46de      	mov	lr, fp
 8002e7a:	4657      	mov	r7, sl
 8002e7c:	4645      	mov	r5, r8
 8002e7e:	b5e0      	push	{r5, r6, r7, lr}
 8002e80:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e82:	466b      	mov	r3, sp
 8002e84:	1d9e      	adds	r6, r3, #6
 8002e86:	2300      	movs	r3, #0
 8002e88:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e8e:	241c      	movs	r4, #28
 8002e90:	469a      	mov	sl, r3
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <LoadEEalias+0x7c>)
 8002e94:	469b      	mov	fp, r3
 8002e96:	4643      	mov	r3, r8
 8002e98:	009f      	lsls	r7, r3, #2
 8002e9a:	18fd      	adds	r5, r7, r3
 8002e9c:	1d63      	adds	r3, r4, #5
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	006d      	lsls	r5, r5, #1
 8002ea4:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	0031      	movs	r1, r6
 8002eaa:	f007 fd8d 	bl	800a9c8 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002eae:	8833      	ldrh	r3, [r6, #0]
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	706b      	strb	r3, [r5, #1]
 8002eb4:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	702b      	strb	r3, [r5, #0]
 8002eba:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002ebc:	454c      	cmp	r4, r9
 8002ebe:	d1f2      	bne.n	8002ea6 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4447      	add	r7, r8
 8002ec4:	007f      	lsls	r7, r7, #1
 8002ec6:	4457      	add	r7, sl
 8002ec8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002eca:	4643      	mov	r3, r8
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	465b      	mov	r3, fp
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4543      	cmp	r3, r8
 8002ed8:	d2dd      	bcs.n	8002e96 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002eda:	2000      	movs	r0, #0
 8002edc:	b003      	add	sp, #12
 8002ede:	bc3c      	pop	{r2, r3, r4, r5}
 8002ee0:	4690      	mov	r8, r2
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	46a2      	mov	sl, r4
 8002ee6:	46ab      	mov	fp, r5
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000dfc 	.word	0x20000dfc
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	4646      	mov	r6, r8
 8002ef8:	46d6      	mov	lr, sl
 8002efa:	464f      	mov	r7, r9
 8002efc:	b5c0      	push	{r6, r7, lr}
 8002efe:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f00:	466b      	mov	r3, sp
 8002f02:	1d9e      	adds	r6, r3, #6
 8002f04:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002f06:	4c22      	ldr	r4, [pc, #136]	; (8002f90 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002f08:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002f0a:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002f0c:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03a      	beq.n	8002f88 <LoadEEgroup+0x94>
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f14:	2100      	movs	r1, #0
 8002f16:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f18:	1d1f      	adds	r7, r3, #4
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	30cb      	adds	r0, #203	; 0xcb
 8002f20:	1879      	adds	r1, r7, r1
 8002f22:	b280      	uxth	r0, r0
		add++;
 8002f24:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f26:	f007 fd4f 	bl	800a9c8 <EE_ReadVariable>
		add++;
 8002f2a:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002f2c:	7823      	ldrb	r3, [r4, #0]
 8002f2e:	b2e9      	uxtb	r1, r5
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d8f2      	bhi.n	8002f1a <LoadEEgroup+0x26>
 8002f34:	2338      	movs	r3, #56	; 0x38
 8002f36:	002c      	movs	r4, r5
 8002f38:	35cb      	adds	r5, #203	; 0xcb
 8002f3a:	469c      	mov	ip, r3
 8002f3c:	b2ab      	uxth	r3, r5
 8002f3e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f40:	2300      	movs	r3, #0
 8002f42:	469a      	mov	sl, r3
 8002f44:	3499      	adds	r4, #153	; 0x99
 8002f46:	44e1      	add	r9, ip
 8002f48:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002f4a:	464d      	mov	r5, r9
 8002f4c:	1d67      	adds	r7, r4, #5
 8002f4e:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f50:	0020      	movs	r0, r4
 8002f52:	0031      	movs	r1, r6
 8002f54:	f007 fd38 	bl	800a9c8 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f58:	8833      	ldrh	r3, [r6, #0]
 8002f5a:	3401      	adds	r4, #1
 8002f5c:	706b      	strb	r3, [r5, #1]
 8002f5e:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	702b      	strb	r3, [r5, #0]
 8002f64:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f66:	42bc      	cmp	r4, r7
 8002f68:	d1f2      	bne.n	8002f50 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	4652      	mov	r2, sl
 8002f6e:	725a      	strb	r2, [r3, #9]
 8002f70:	230a      	movs	r3, #10
 8002f72:	469c      	mov	ip, r3
 8002f74:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f76:	45a0      	cmp	r8, r4
 8002f78:	d1e7      	bne.n	8002f4a <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bc1c      	pop	{r2, r3, r4}
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	46a2      	mov	sl, r4
 8002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	e7d2      	b.n	8002f34 <LoadEEgroup+0x40>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000a98 	.word	0x20000a98

08002f98 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	46ce      	mov	lr, r9
 8002f9c:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f9e:	260e      	movs	r6, #14
 8002fa0:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fa6:	ac03      	add	r4, sp, #12
 8002fa8:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fae:	8023      	strh	r3, [r4, #0]
 8002fb0:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002fb2:	f007 fd09 	bl	800a9c8 <EE_ReadVariable>
	uint8_t direction =0;
 8002fb6:	2700      	movs	r7, #0
	if(!status1){
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d100      	bne.n	8002fbe <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002fbc:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	20e5      	movs	r0, #229	; 0xe5
 8002fc2:	f007 fd01 	bl	800a9c8 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fc6:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fc8:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fca:	20e6      	movs	r0, #230	; 0xe6
 8002fcc:	f007 fcfc 	bl	800a9c8 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002fd0:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002fd6:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	d104      	bne.n	8002fe6 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002fdc:	8823      	ldrh	r3, [r4, #0]
 8002fde:	8832      	ldrh	r2, [r6, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	20e7      	movs	r0, #231	; 0xe7
 8002fea:	f007 fced 	bl	800a9c8 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002fee:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002ff0:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002ff2:	20e8      	movs	r0, #232	; 0xe8
 8002ff4:	f007 fce8 	bl	800a9c8 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002ff8:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002ffe:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003000:	2d00      	cmp	r5, #0
 8003002:	d104      	bne.n	800300e <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003004:	8823      	ldrh	r3, [r4, #0]
 8003006:	8832      	ldrh	r2, [r6, #0]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	4699      	mov	r9, r3
 800300c:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800300e:	0021      	movs	r1, r4
 8003010:	20e9      	movs	r0, #233	; 0xe9
 8003012:	f007 fcd9 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 8003016:	2800      	cmp	r0, #0
 8003018:	d030      	beq.n	800307c <LoadEEstreams+0xe4>
 800301a:	4d26      	ldr	r5, [pc, #152]	; (80030b4 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800301c:	0021      	movs	r1, r4
 800301e:	20ea      	movs	r0, #234	; 0xea
 8003020:	f007 fcd2 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 8003024:	2800      	cmp	r0, #0
 8003026:	d103      	bne.n	8003030 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8003028:	8823      	ldrh	r3, [r4, #0]
 800302a:	0a1a      	lsrs	r2, r3, #8
 800302c:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 800302e:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003030:	0021      	movs	r1, r4
 8003032:	20eb      	movs	r0, #235	; 0xeb
 8003034:	f007 fcc8 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 8003038:	2800      	cmp	r0, #0
 800303a:	d105      	bne.n	8003048 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 800303c:	2220      	movs	r2, #32
 800303e:	8823      	ldrh	r3, [r4, #0]
 8003040:	0a19      	lsrs	r1, r3, #8
 8003042:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8003044:	3201      	adds	r2, #1
 8003046:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003048:	7f2b      	ldrb	r3, [r5, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <LoadEEstreams+0xbc>
 800304e:	7f6a      	ldrb	r2, [r5, #29]
 8003050:	2a00      	cmp	r2, #0
 8003052:	d120      	bne.n	8003096 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003054:	7fab      	ldrb	r3, [r5, #30]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <LoadEEstreams+0xc8>
 800305a:	7fea      	ldrb	r2, [r5, #31]
 800305c:	2a00      	cmp	r2, #0
 800305e:	d121      	bne.n	80030a4 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003060:	2320      	movs	r3, #32
 8003062:	5ceb      	ldrb	r3, [r5, r3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <LoadEEstreams+0xd8>
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	5caa      	ldrb	r2, [r5, r2]
 800306c:	2a00      	cmp	r2, #0
 800306e:	d10b      	bne.n	8003088 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003070:	2000      	movs	r0, #0
 8003072:	b005      	add	sp, #20
 8003074:	bc0c      	pop	{r2, r3}
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 800307c:	8823      	ldrh	r3, [r4, #0]
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <LoadEEstreams+0x11c>)
 8003080:	0a1a      	lsrs	r2, r3, #8
 8003082:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003084:	776b      	strb	r3, [r5, #29]
 8003086:	e7c9      	b.n	800301c <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	4641      	mov	r1, r8
 800308c:	464a      	mov	r2, r9
 800308e:	0038      	movs	r0, r7
 8003090:	f004 fd18 	bl	8007ac4 <SetupDMAStreams>
 8003094:	e7ec      	b.n	8003070 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	4641      	mov	r1, r8
 800309a:	464a      	mov	r2, r9
 800309c:	0038      	movs	r0, r7
 800309e:	f004 fd11 	bl	8007ac4 <SetupDMAStreams>
 80030a2:	e7d7      	b.n	8003054 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	4641      	mov	r1, r8
 80030a8:	464a      	mov	r2, r9
 80030aa:	0038      	movs	r0, r7
 80030ac:	f004 fd0a 	bl	8007ac4 <SetupDMAStreams>
 80030b0:	e7d6      	b.n	8003060 <LoadEEstreams+0xc8>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000b18 	.word	0x20000b18

080030b8 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030b8:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030be:	ac01      	add	r4, sp, #4
 80030c0:	0021      	movs	r1, r4
 80030c2:	0040      	lsls	r0, r0, #1
 80030c4:	f007 fc80 	bl	800a9c8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d15d      	bne.n	8003188 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030cc:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80030ce:	8823      	ldrh	r3, [r4, #0]
 80030d0:	4d54      	ldr	r5, [pc, #336]	; (8003224 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d2:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80030d4:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d6:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030dc:	f007 fc74 	bl	800a9c8 <EE_ReadVariable>

	if(!status1){
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d15e      	bne.n	80031a2 <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e4:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030e6:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e8:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030ea:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030ec:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ee:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030f0:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030f2:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030f4:	f007 fc68 	bl	800a9c8 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 80030f8:	4d4b      	ldr	r5, [pc, #300]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d15e      	bne.n	80031bc <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030fe:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003100:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003102:	0021      	movs	r1, r4
 8003104:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 8003106:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003108:	f007 fc5e 	bl	800a9c8 <EE_ReadVariable>
	if(!status1)
 800310c:	2800      	cmp	r0, #0
 800310e:	d15f      	bne.n	80031d0 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003110:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003112:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003114:	0021      	movs	r1, r4
 8003116:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 8003118:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800311a:	f007 fc55 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 800311e:	2800      	cmp	r0, #0
 8003120:	d160      	bne.n	80031e4 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003122:	8823      	ldrh	r3, [r4, #0]
 8003124:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800312a:	208c      	movs	r0, #140	; 0x8c
 800312c:	0021      	movs	r1, r4
 800312e:	0040      	lsls	r0, r0, #1
 8003130:	f007 fc4a 	bl	800a9c8 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003134:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003136:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003138:	201a      	movs	r0, #26
 800313a:	1d99      	adds	r1, r3, #6
 800313c:	30ff      	adds	r0, #255	; 0xff
 800313e:	f007 fc43 	bl	800a9c8 <EE_ReadVariable>
	if(!status1 && !status2){
 8003142:	4306      	orrs	r6, r0
 8003144:	b2b6      	uxth	r6, r6
 8003146:	2e00      	cmp	r6, #0
 8003148:	d15f      	bne.n	800320a <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800314a:	466b      	mov	r3, sp
 800314c:	88db      	ldrh	r3, [r3, #6]
 800314e:	8822      	ldrh	r2, [r4, #0]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	4313      	orrs	r3, r2
 8003154:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003156:	208d      	movs	r0, #141	; 0x8d
 8003158:	0021      	movs	r1, r4
 800315a:	0040      	lsls	r0, r0, #1
 800315c:	f007 fc34 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 8003160:	2800      	cmp	r0, #0
 8003162:	d145      	bne.n	80031f0 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003164:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003166:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003168:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 800316a:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800316c:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003172:	f007 fc29 	bl	800a9c8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003176:	2800      	cmp	r0, #0
 8003178:	d044      	beq.n	8003204 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800317a:	2326      	movs	r3, #38	; 0x26
 800317c:	4a2b      	ldr	r2, [pc, #172]	; (800322c <LoadEEparams+0x174>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 8003182:	2000      	movs	r0, #0
 8003184:	b002      	add	sp, #8
 8003186:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003188:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <LoadEEparams+0x174>)
 800318c:	4d25      	ldr	r5, [pc, #148]	; (8003224 <LoadEEparams+0x16c>)
 800318e:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003190:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 8003192:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003194:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003196:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003198:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800319a:	f007 fc15 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0a0      	beq.n	80030e4 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a2:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a6:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a8:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031aa:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031ac:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031ae:	895b      	ldrh	r3, [r3, #10]
 80031b0:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031b2:	f007 fc09 	bl	800a9c8 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80031b6:	4d1c      	ldr	r5, [pc, #112]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0a0      	beq.n	80030fe <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031bc:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c0:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c2:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c4:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c6:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c8:	f007 fbfe 	bl	800a9c8 <EE_ReadVariable>
	if(!status1)
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d09f      	beq.n	8003110 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d0:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d4:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d6:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d8:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031da:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031dc:	f007 fbf4 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d09e      	beq.n	8003122 <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <LoadEEparams+0x174>)
 80031e6:	7c1a      	ldrb	r2, [r3, #16]
 80031e8:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031ea:	7c5b      	ldrb	r3, [r3, #17]
 80031ec:	716b      	strb	r3, [r5, #5]
 80031ee:	e79c      	b.n	800312a <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f0:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f2:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f8:	0021      	movs	r1, r4
 80031fa:	30ff      	adds	r0, #255	; 0xff
 80031fc:	f007 fbe4 	bl	800a9c8 <EE_ReadVariable>
	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d1ba      	bne.n	800317a <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003204:	8823      	ldrh	r3, [r4, #0]
 8003206:	76ab      	strb	r3, [r5, #26]
 8003208:	e7bb      	b.n	8003182 <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 800320a:	2322      	movs	r3, #34	; 0x22
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <LoadEEparams+0x178>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003214:	23e1      	movs	r3, #225	; 0xe1
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	60ab      	str	r3, [r5, #8]
 800321a:	e79c      	b.n	8003156 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <LoadEEparams+0x174>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	60ab      	str	r3, [r5, #8]
 8003222:	e798      	b.n	8003156 <LoadEEparams+0x9e>
 8003224:	20006a00 	.word	0x20006a00
 8003228:	20006a80 	.word	0x20006a80
 800322c:	20000008 	.word	0x20000008
 8003230:	20000b18 	.word	0x20000b18

08003234 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	46de      	mov	lr, fp
 8003238:	4657      	mov	r7, sl
 800323a:	464e      	mov	r6, r9
 800323c:	4645      	mov	r5, r8
 800323e:	b5e0      	push	{r5, r6, r7, lr}
 8003240:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003242:	ab02      	add	r3, sp, #8
 8003244:	469c      	mov	ip, r3
 8003246:	261e      	movs	r6, #30
 8003248:	2300      	movs	r3, #0
 800324a:	4466      	add	r6, ip
 800324c:	8033      	strh	r3, [r6, #0]
 800324e:	330f      	adds	r3, #15
 8003250:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003252:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003254:	2501      	movs	r5, #1
 8003256:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003258:	469b      	mov	fp, r3
 800325a:	e004      	b.n	8003266 <LoadEEbuttons+0x32>
 800325c:	3404      	adds	r4, #4
 800325e:	3501      	adds	r5, #1
 8003260:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003262:	2d08      	cmp	r5, #8
 8003264:	d05e      	beq.n	8003324 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003266:	0031      	movs	r1, r6
 8003268:	0020      	movs	r0, r4
 800326a:	f007 fbad 	bl	800a9c8 <EE_ReadVariable>
 800326e:	b2eb      	uxtb	r3, r5
 8003270:	1e07      	subs	r7, r0, #0
 8003272:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003274:	d1f2      	bne.n	800325c <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003276:	8832      	ldrh	r2, [r6, #0]
 8003278:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800327a:	0919      	lsrs	r1, r3, #4
 800327c:	42a9      	cmp	r1, r5
 800327e:	d1ed      	bne.n	800325c <LoadEEbuttons+0x28>
 8003280:	4651      	mov	r1, sl
 8003282:	400b      	ands	r3, r1
 8003284:	d0ea      	beq.n	800325c <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003286:	482b      	ldr	r0, [pc, #172]	; (8003334 <LoadEEbuttons+0x100>)
 8003288:	00e9      	lsls	r1, r5, #3
 800328a:	4680      	mov	r8, r0
 800328c:	1949      	adds	r1, r1, r5
 800328e:	4488      	add	r8, r1
 8003290:	4641      	mov	r1, r8
 8003292:	00a8      	lsls	r0, r5, #2
 8003294:	704b      	strb	r3, [r1, #1]
 8003296:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003298:	0018      	movs	r0, r3
 800329a:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 800329c:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800329e:	b280      	uxth	r0, r0
 80032a0:	0031      	movs	r1, r6
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	f007 fb90 	bl	800a9c8 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032a8:	4641      	mov	r1, r8
 80032aa:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032ac:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032ae:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b0:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032b2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80032b4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b6:	b280      	uxth	r0, r0
 80032b8:	0031      	movs	r1, r6
 80032ba:	f007 fb85 	bl	800a9c8 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032be:	4641      	mov	r1, r8
 80032c0:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c2:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c4:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c6:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80032ca:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032cc:	b280      	uxth	r0, r0
 80032ce:	0031      	movs	r1, r6
 80032d0:	f007 fb7a 	bl	800a9c8 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032d4:	4641      	mov	r1, r8
 80032d6:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80032d8:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032da:	0a1a      	lsrs	r2, r3, #8
 80032dc:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032de:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 80032e0:	4649      	mov	r1, r9
 80032e2:	f007 ff1f 	bl	800b124 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032e6:	4643      	mov	r3, r8
 80032e8:	4658      	mov	r0, fp
 80032ea:	7a19      	ldrb	r1, [r3, #8]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	104a      	asrs	r2, r1, #1
 80032f0:	4002      	ands	r2, r0
 80032f2:	4001      	ands	r1, r0
 80032f4:	4640      	mov	r0, r8
 80032f6:	9705      	str	r7, [sp, #20]
 80032f8:	79c0      	ldrb	r0, [r0, #7]
 80032fa:	3404      	adds	r4, #4
 80032fc:	9004      	str	r0, [sp, #16]
 80032fe:	4640      	mov	r0, r8
 8003300:	7980      	ldrb	r0, [r0, #6]
 8003302:	3501      	adds	r5, #1
 8003304:	9003      	str	r0, [sp, #12]
 8003306:	4640      	mov	r0, r8
 8003308:	7940      	ldrb	r0, [r0, #5]
 800330a:	b2a4      	uxth	r4, r4
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	4640      	mov	r0, r8
 8003310:	7900      	ldrb	r0, [r0, #4]
 8003312:	9001      	str	r0, [sp, #4]
 8003314:	4640      	mov	r0, r8
 8003316:	78c0      	ldrb	r0, [r0, #3]
 8003318:	9000      	str	r0, [sp, #0]
 800331a:	4648      	mov	r0, r9
 800331c:	f008 f80c 	bl	800b338 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003320:	2d08      	cmp	r5, #8
 8003322:	d1a0      	bne.n	8003266 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 8003324:	2000      	movs	r0, #0
 8003326:	b00b      	add	sp, #44	; 0x2c
 8003328:	bc3c      	pop	{r2, r3, r4, r5}
 800332a:	4690      	mov	r8, r2
 800332c:	4699      	mov	r9, r3
 800332e:	46a2      	mov	sl, r4
 8003330:	46ab      	mov	fp, r5
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	200025c8 	.word	0x200025c8

08003338 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	46de      	mov	lr, fp
 800333c:	4645      	mov	r5, r8
 800333e:	4657      	mov	r7, sl
 8003340:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003342:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003344:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003346:	f00e fd91 	bl	8011e6c <malloc>
 800334a:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 800334c:	d065      	beq.n	800341a <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800334e:	4c3b      	ldr	r4, [pc, #236]	; (800343c <LoadROsnippets+0x104>)
		return BOS_ERROR;
 8003350:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003352:	7822      	ldrb	r2, [r4, #0]
 8003354:	2afe      	cmp	r2, #254	; 0xfe
 8003356:	d156      	bne.n	8003406 <LoadROsnippets+0xce>
 8003358:	1c6b      	adds	r3, r5, #1
 800335a:	4698      	mov	r8, r3
 800335c:	2364      	movs	r3, #100	; 0x64
 800335e:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <LoadROsnippets+0x108>)
 8003362:	4e38      	ldr	r6, [pc, #224]	; (8003444 <LoadROsnippets+0x10c>)
 8003364:	469b      	mov	fp, r3
 8003366:	44b1      	add	r9, r6
 8003368:	0020      	movs	r0, r4
 800336a:	46a2      	mov	sl, r4
 800336c:	3014      	adds	r0, #20
 800336e:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003370:	7822      	ldrb	r2, [r4, #0]
 8003372:	550a      	strb	r2, [r1, r4]
 8003374:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003376:	4284      	cmp	r4, r0
 8003378:	d1fa      	bne.n	8003370 <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800337a:	2214      	movs	r2, #20
 800337c:	4641      	mov	r1, r8
 800337e:	0030      	movs	r0, r6
 8003380:	f00e ffc1 	bl	8012306 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003384:	2100      	movs	r1, #0
 8003386:	2214      	movs	r2, #20
 8003388:	0028      	movs	r0, r5
 800338a:	f00e ffc5 	bl	8012318 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800338e:	7821      	ldrb	r1, [r4, #0]
 8003390:	1c8b      	adds	r3, r1, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d942      	bls.n	800341e <LoadROsnippets+0xe6>
 8003398:	4657      	mov	r7, sl
 800339a:	0028      	movs	r0, r5
 800339c:	3746      	adds	r7, #70	; 0x46
		i =0;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <LoadROsnippets+0x70>
 80033a2:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a4:	42a7      	cmp	r7, r4
 80033a6:	d034      	beq.n	8003412 <LoadROsnippets+0xda>
			++currentAdd;
 80033a8:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033aa:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ac:	7821      	ldrb	r1, [r4, #0]
			++i;
 80033ae:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b0:	1c8a      	adds	r2, r1, #2
 80033b2:	b2d2      	uxtb	r2, r2
			++i;
 80033b4:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b6:	2a01      	cmp	r2, #1
 80033b8:	d8f3      	bhi.n	80033a2 <LoadROsnippets+0x6a>
 80033ba:	469a      	mov	sl, r3
 80033bc:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80033be:	5caa      	ldrb	r2, [r5, r2]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d002      	beq.n	80033ca <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80033ca:	4650      	mov	r0, sl
 80033cc:	f00e fd4e 	bl	8011e6c <malloc>
 80033d0:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d028      	beq.n	8003428 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80033d6:	4652      	mov	r2, sl
 80033d8:	0029      	movs	r1, r5
 80033da:	f00e ff94 	bl	8012306 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033de:	465b      	mov	r3, fp
 80033e0:	465a      	mov	r2, fp
 80033e2:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 80033e4:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033e6:	3301      	adds	r3, #1
 80033e8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80033ea:	0028      	movs	r0, r5
 80033ec:	4652      	mov	r2, sl
 80033ee:	f00e ff93 	bl	8012318 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80033f2:	7823      	ldrb	r3, [r4, #0]
 80033f4:	2bfe      	cmp	r3, #254	; 0xfe
 80033f6:	d102      	bne.n	80033fe <LoadROsnippets+0xc6>
 80033f8:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80033fa:	45b1      	cmp	r9, r6
 80033fc:	d1b4      	bne.n	8003368 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 80033fe:	0028      	movs	r0, r5
 8003400:	f00e fd3e 	bl	8011e80 <free>
	return BOS_OK;
 8003404:	2000      	movs	r0, #0
}
 8003406:	bc3c      	pop	{r2, r3, r4, r5}
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	46a2      	mov	sl, r4
 800340e:	46ab      	mov	fp, r5
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003412:	2332      	movs	r3, #50	; 0x32
 8003414:	2231      	movs	r2, #49	; 0x31
 8003416:	469a      	mov	sl, r3
 8003418:	e7d1      	b.n	80033be <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 800341a:	20fb      	movs	r0, #251	; 0xfb
 800341c:	e7f3      	b.n	8003406 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800341e:	2201      	movs	r2, #1
 8003420:	2300      	movs	r3, #0
 8003422:	4252      	negs	r2, r2
 8003424:	469a      	mov	sl, r3
 8003426:	e7ca      	b.n	80033be <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003428:	2214      	movs	r2, #20
 800342a:	2100      	movs	r1, #0
 800342c:	0030      	movs	r0, r6
 800342e:	f00e ff73 	bl	8012318 <memset>
			free(snipBuffer);
 8003432:	0028      	movs	r0, r5
 8003434:	f00e fd24 	bl	8011e80 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003438:	200e      	movs	r0, #14
 800343a:	e7e4      	b.n	8003406 <LoadROsnippets+0xce>
 800343c:	0801dc00 	.word	0x0801dc00
 8003440:	2000182c 	.word	0x2000182c
 8003444:	20006a9c 	.word	0x20006a9c

08003448 <LoadEEvars>:
void LoadEEvars(void){
 8003448:	b510      	push	{r4, lr}
	LoadROtopology();
 800344a:	f7ff fc9d 	bl	8002d88 <LoadROtopology>
	LoadEEportsDir();
 800344e:	f7ff fceb 	bl	8002e28 <LoadEEportsDir>
	LoadEEalias();
 8003452:	f7ff fd0f 	bl	8002e74 <LoadEEalias>
	LoadEEgroup();
 8003456:	f7ff fd4d 	bl	8002ef4 <LoadEEgroup>
	LoadEEstreams();
 800345a:	f7ff fd9d 	bl	8002f98 <LoadEEstreams>
	LoadEEparams();
 800345e:	f7ff fe2b 	bl	80030b8 <LoadEEparams>
	LoadEEbuttons();
 8003462:	f7ff fee7 	bl	8003234 <LoadEEbuttons>
	LoadROsnippets();
 8003466:	f7ff ff67 	bl	8003338 <LoadROsnippets>
}
 800346a:	bd10      	pop	{r4, pc}

0800346c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	46c6      	mov	lr, r8
 8003470:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003472:	4e10      	ldr	r6, [pc, #64]	; (80034b4 <SaveEEportsDir+0x48>)
 8003474:	7833      	ldrb	r3, [r6, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800347a:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800347c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800347e:	4698      	mov	r8, r3
 8003480:	4f0d      	ldr	r7, [pc, #52]	; (80034b8 <SaveEEportsDir+0x4c>)
 8003482:	e007      	b.n	8003494 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003484:	2c19      	cmp	r4, #25
 8003486:	d901      	bls.n	800348c <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003488:	230a      	movs	r3, #10
 800348a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800348c:	7833      	ldrb	r3, [r6, #0]
 800348e:	b2ec      	uxtb	r4, r5
 8003490:	42a3      	cmp	r3, r4
 8003492:	d30b      	bcc.n	80034ac <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003494:	1e63      	subs	r3, r4, #1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	5af9      	ldrh	r1, [r7, r3]
 800349a:	1c65      	adds	r5, r4, #1
 800349c:	2900      	cmp	r1, #0
 800349e:	d0f1      	beq.n	8003484 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80034a0:	b2a8      	uxth	r0, r5
 80034a2:	f007 fac1 	bl	800aa28 <EE_WriteVariable>
 80034a6:	e7ed      	b.n	8003484 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	4698      	mov	r8, r3
	}
	
	return result;
}
 80034ac:	4640      	mov	r0, r8
 80034ae:	bc04      	pop	{r2}
 80034b0:	4690      	mov	r8, r2
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	20000008 	.word	0x20000008
 80034b8:	20006f48 	.word	0x20006f48

080034bc <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80034bc:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80034be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c0:	4646      	mov	r6, r8
 80034c2:	46d6      	mov	lr, sl
 80034c4:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80034c6:	4698      	mov	r8, r3
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80034ca:	b5c0      	push	{r6, r7, lr}
 80034cc:	4699      	mov	r9, r3
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034d0:	2600      	movs	r6, #0
 80034d2:	469a      	mov	sl, r3
 80034d4:	e005      	b.n	80034e2 <SaveEEalias+0x26>
 80034d6:	4653      	mov	r3, sl
 80034d8:	3601      	adds	r6, #1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2f6      	uxtb	r6, r6
 80034de:	42b3      	cmp	r3, r6
 80034e0:	d325      	bcc.n	800352e <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 80034e2:	464b      	mov	r3, r9
 80034e4:	00b4      	lsls	r4, r6, #2
 80034e6:	19a4      	adds	r4, r4, r6
 80034e8:	0064      	lsls	r4, r4, #1
 80034ea:	5d1b      	ldrb	r3, [r3, r4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f2      	beq.n	80034d6 <SaveEEalias+0x1a>
 80034f0:	4645      	mov	r5, r8
 80034f2:	4647      	mov	r7, r8
 80034f4:	351c      	adds	r5, #28
 80034f6:	3721      	adds	r7, #33	; 0x21
 80034f8:	444c      	add	r4, r9
 80034fa:	b2ad      	uxth	r5, r5
 80034fc:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034fe:	7861      	ldrb	r1, [r4, #1]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003504:	0028      	movs	r0, r5
 8003506:	3501      	adds	r5, #1
 8003508:	b289      	uxth	r1, r1
 800350a:	b2ad      	uxth	r5, r5
 800350c:	f007 fa8c 	bl	800aa28 <EE_WriteVariable>
 8003510:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003512:	42bd      	cmp	r5, r7
 8003514:	d001      	beq.n	800351a <SaveEEalias+0x5e>
 8003516:	7823      	ldrb	r3, [r4, #0]
 8003518:	e7f1      	b.n	80034fe <SaveEEalias+0x42>
 800351a:	4643      	mov	r3, r8
 800351c:	3305      	adds	r3, #5
 800351e:	b29b      	uxth	r3, r3
 8003520:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003522:	4653      	mov	r3, sl
 8003524:	3601      	adds	r6, #1
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2f6      	uxtb	r6, r6
 800352a:	42b3      	cmp	r3, r6
 800352c:	d2d9      	bcs.n	80034e2 <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 800352e:	2000      	movs	r0, #0
 8003530:	bc1c      	pop	{r2, r3, r4}
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	46a2      	mov	sl, r4
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000dfc 	.word	0x20000dfc
 8003540:	20000008 	.word	0x20000008

08003544 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	46de      	mov	lr, fp
 8003548:	4657      	mov	r7, sl
 800354a:	464e      	mov	r6, r9
 800354c:	4645      	mov	r5, r8
 800354e:	468b      	mov	fp, r1
 8003550:	b5e0      	push	{r5, r6, r7, lr}
 8003552:	001e      	movs	r6, r3
 8003554:	ab0a      	add	r3, sp, #40	; 0x28
 8003556:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003558:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800355a:	469a      	mov	sl, r3
 800355c:	ab0b      	add	r3, sp, #44	; 0x2c
 800355e:	781d      	ldrb	r5, [r3, #0]
 8003560:	ab0c      	add	r3, sp, #48	; 0x30
 8003562:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003564:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003566:	4698      	mov	r8, r3
 8003568:	ab0d      	add	r3, sp, #52	; 0x34
 800356a:	781c      	ldrb	r4, [r3, #0]
 800356c:	ab0e      	add	r3, sp, #56	; 0x38
 800356e:	4691      	mov	r9, r2
 8003570:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003572:	f007 fa59 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003576:	465b      	mov	r3, fp
 8003578:	0a19      	lsrs	r1, r3, #8
 800357a:	b289      	uxth	r1, r1
 800357c:	20e5      	movs	r0, #229	; 0xe5
 800357e:	f007 fa53 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003582:	465b      	mov	r3, fp
 8003584:	20e6      	movs	r0, #230	; 0xe6
 8003586:	b299      	uxth	r1, r3
 8003588:	f007 fa4e 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800358c:	464b      	mov	r3, r9
 800358e:	0a19      	lsrs	r1, r3, #8
 8003590:	b289      	uxth	r1, r1
 8003592:	20e7      	movs	r0, #231	; 0xe7
 8003594:	f007 fa48 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003598:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359a:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800359c:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359e:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a0:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a2:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a4:	f007 fa40 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a8:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035aa:	b2b1      	uxth	r1, r6
 80035ac:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035ae:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035b0:	f007 fa3a 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035b4:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035b6:	b2a9      	uxth	r1, r5
 80035b8:	20ea      	movs	r0, #234	; 0xea
 80035ba:	f007 fa35 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035be:	b2a1      	uxth	r1, r4
 80035c0:	20eb      	movs	r0, #235	; 0xeb
 80035c2:	f007 fa31 	bl	800aa28 <EE_WriteVariable>
	
	return result;
}
 80035c6:	2000      	movs	r0, #0
 80035c8:	bc3c      	pop	{r2, r3, r4, r5}
 80035ca:	4690      	mov	r8, r2
 80035cc:	4699      	mov	r9, r3
 80035ce:	46a2      	mov	sl, r4
 80035d0:	46ab      	mov	fp, r5
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035d4 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d4:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80035d6:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d8:	4c1e      	ldr	r4, [pc, #120]	; (8003654 <SaveEEparams+0x80>)
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	7863      	ldrb	r3, [r4, #1]
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	4319      	orrs	r1, r3
 80035e4:	f007 fa20 	bl	800aa28 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035e8:	208e      	movs	r0, #142	; 0x8e
 80035ea:	7921      	ldrb	r1, [r4, #4]
 80035ec:	88e3      	ldrh	r3, [r4, #6]
 80035ee:	03c9      	lsls	r1, r1, #15
 80035f0:	4319      	orrs	r1, r3
 80035f2:	b289      	uxth	r1, r1
 80035f4:	0040      	lsls	r0, r0, #1
 80035f6:	f007 fa17 	bl	800aa28 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035fa:	2016      	movs	r0, #22
 80035fc:	4c16      	ldr	r4, [pc, #88]	; (8003658 <SaveEEparams+0x84>)
 80035fe:	30ff      	adds	r0, #255	; 0xff
 8003600:	8821      	ldrh	r1, [r4, #0]
 8003602:	f007 fa11 	bl	800aa28 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003606:	208b      	movs	r0, #139	; 0x8b
 8003608:	8861      	ldrh	r1, [r4, #2]
 800360a:	0040      	lsls	r0, r0, #1
 800360c:	f007 fa0c 	bl	800aa28 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003610:	2018      	movs	r0, #24
 8003612:	7963      	ldrb	r3, [r4, #5]
 8003614:	7b21      	ldrb	r1, [r4, #12]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4319      	orrs	r1, r3
 800361a:	30ff      	adds	r0, #255	; 0xff
 800361c:	f007 fa04 	bl	800aa28 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003620:	208c      	movs	r0, #140	; 0x8c
 8003622:	8921      	ldrh	r1, [r4, #8]
 8003624:	0040      	lsls	r0, r0, #1
 8003626:	f007 f9ff 	bl	800aa28 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800362a:	201a      	movs	r0, #26
 800362c:	8961      	ldrh	r1, [r4, #10]
 800362e:	30ff      	adds	r0, #255	; 0xff
 8003630:	f007 f9fa 	bl	800aa28 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003634:	208d      	movs	r0, #141	; 0x8d
 8003636:	7b63      	ldrb	r3, [r4, #13]
 8003638:	7921      	ldrb	r1, [r4, #4]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4319      	orrs	r1, r3
 800363e:	0040      	lsls	r0, r0, #1
 8003640:	f007 f9f2 	bl	800aa28 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003644:	201c      	movs	r0, #28
 8003646:	7ea1      	ldrb	r1, [r4, #26]
 8003648:	30ff      	adds	r0, #255	; 0xff
 800364a:	f007 f9ed 	bl	800aa28 <EE_WriteVariable>
	
	return result;
}
 800364e:	2000      	movs	r0, #0
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20006a00 	.word	0x20006a00
 8003658:	20006a80 	.word	0x20006a80

0800365c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003660:	4f12      	ldr	r7, [pc, #72]	; (80036ac <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 8003662:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003664:	2234      	movs	r2, #52	; 0x34
 8003666:	2100      	movs	r1, #0
 8003668:	0038      	movs	r0, r7
 800366a:	f00e fe55 	bl	8012318 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800366e:	4e10      	ldr	r6, [pc, #64]	; (80036b0 <ClearEEportsDir+0x54>)
 8003670:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 8003672:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003678:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800367a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800367c:	4698      	mov	r8, r3
 800367e:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003680:	2c19      	cmp	r4, #25
 8003682:	d901      	bls.n	8003688 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003684:	230a      	movs	r3, #10
 8003686:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003688:	7833      	ldrb	r3, [r6, #0]
 800368a:	b2ec      	uxtb	r4, r5
 800368c:	42a3      	cmp	r3, r4
 800368e:	d309      	bcc.n	80036a4 <ClearEEportsDir+0x48>
 8003690:	1e63      	subs	r3, r4, #1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003696:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003698:	2900      	cmp	r1, #0
 800369a:	d0f1      	beq.n	8003680 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800369c:	b2a8      	uxth	r0, r5
 800369e:	f007 f9c3 	bl	800aa28 <EE_WriteVariable>
 80036a2:	e7ed      	b.n	8003680 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80036a4:	4640      	mov	r0, r8
 80036a6:	bc04      	pop	{r2}
 80036a8:	4690      	mov	r8, r2
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ac:	20006f48 	.word	0x20006f48
 80036b0:	20000008 	.word	0x20000008

080036b4 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036b4:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80036b6:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80036ba:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036bc:	ad03      	add	r5, sp, #12
 80036be:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036c0:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	002a      	movs	r2, r5
 80036c6:	ab06      	add	r3, sp, #24
 80036c8:	a905      	add	r1, sp, #20
 80036ca:	2001      	movs	r0, #1
 80036cc:	f007 fc44 	bl	800af58 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036d0:	aa04      	add	r2, sp, #16
 80036d2:	ab08      	add	r3, sp, #32
 80036d4:	a907      	add	r1, sp, #28
 80036d6:	9400      	str	r4, [sp, #0]
 80036d8:	2002      	movs	r0, #2
 80036da:	f007 fc3d 	bl	800af58 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036e4:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036e6:	a909      	add	r1, sp, #36	; 0x24
 80036e8:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036ea:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036ee:	f00c fd73 	bl	80101d8 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f2:	2302      	movs	r3, #2
 80036f4:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036f6:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036f8:	a909      	add	r1, sp, #36	; 0x24
 80036fa:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003700:	f00c fd6a 	bl	80101d8 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003704:	8829      	ldrh	r1, [r5, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	9805      	ldr	r0, [sp, #20]
 800370a:	f00c ff05 	bl	8010518 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800370e:	2005      	movs	r0, #5
 8003710:	f009 f8b8 	bl	800c884 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003714:	8821      	ldrh	r1, [r4, #0]
 8003716:	9808      	ldr	r0, [sp, #32]
 8003718:	f00c fef8 	bl	801050c <HAL_GPIO_ReadPin>
 800371c:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800371e:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003724:	8829      	ldrh	r1, [r5, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	9805      	ldr	r0, [sp, #20]
 800372a:	f00c fef5 	bl	8010518 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800372e:	2005      	movs	r0, #5
 8003730:	f009 f8a8 	bl	800c884 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003734:	8821      	ldrh	r1, [r4, #0]
 8003736:	9808      	ldr	r0, [sp, #32]
 8003738:	f00c fee8 	bl	801050c <HAL_GPIO_ReadPin>
 800373c:	3801      	subs	r0, #1
 800373e:	4243      	negs	r3, r0
 8003740:	4158      	adcs	r0, r3
			return 1;
 8003742:	b2c0      	uxtb	r0, r0
}
 8003744:	b00e      	add	sp, #56	; 0x38
 8003746:	bd70      	pop	{r4, r5, r6, pc}

08003748 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 800374a:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	f7fc fcd9 	bl	8000104 <strcmp>
 8003752:	4243      	negs	r3, r0
 8003754:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 8003756:	b2c0      	uxtb	r0, r0
 8003758:	bd10      	pop	{r4, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000094 	.word	0x20000094

08003760 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	46de      	mov	lr, fp
 8003764:	4657      	mov	r7, sl
 8003766:	464e      	mov	r6, r9
 8003768:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800376a:	4923      	ldr	r1, [pc, #140]	; (80037f8 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 800376c:	b5e0      	push	{r5, r6, r7, lr}
 800376e:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003770:	f7fc fcc8 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 8003776:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003778:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 800377c:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 800377e:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 8003782:	4f21      	ldr	r7, [pc, #132]	; (8003808 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 8003784:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <IsMathOperator+0xac>)
 8003788:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 800378a:	2e00      	cmp	r6, #0
 800378c:	d028      	beq.n	80037e0 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 800378e:	0039      	movs	r1, r7
 8003790:	0020      	movs	r0, r4
 8003792:	f7fc fcb7 	bl	8000104 <strcmp>
 8003796:	2800      	cmp	r0, #0
 8003798:	d024      	beq.n	80037e4 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 800379a:	4641      	mov	r1, r8
 800379c:	0020      	movs	r0, r4
 800379e:	f7fc fcb1 	bl	8000104 <strcmp>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d020      	beq.n	80037e8 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80037a6:	4649      	mov	r1, r9
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fc fcab 	bl	8000104 <strcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d01c      	beq.n	80037ec <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80037b2:	4651      	mov	r1, sl
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7fc fca5 	bl	8000104 <strcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d018      	beq.n	80037f0 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80037be:	4659      	mov	r1, fp
 80037c0:	0020      	movs	r0, r4
 80037c2:	f7fc fc9f 	bl	8000104 <strcmp>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d014      	beq.n	80037f4 <IsMathOperator+0x94>
 80037ca:	3d01      	subs	r5, #1
 80037cc:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	d1db      	bne.n	800378a <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037d2:	2000      	movs	r0, #0
}
 80037d4:	bc3c      	pop	{r2, r3, r4, r5}
 80037d6:	4690      	mov	r8, r2
 80037d8:	4699      	mov	r9, r3
 80037da:	46a2      	mov	sl, r4
 80037dc:	46ab      	mov	fp, r5
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037e0:	2001      	movs	r0, #1
 80037e2:	e7f7      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER;
 80037e4:	2002      	movs	r0, #2
 80037e6:	e7f5      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037e8:	2003      	movs	r0, #3
 80037ea:	e7f3      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037ec:	2004      	movs	r0, #4
 80037ee:	e7f1      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037f0:	2005      	movs	r0, #5
 80037f2:	e7ef      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037f4:	2006      	movs	r0, #6
 80037f6:	e7ed      	b.n	80037d4 <IsMathOperator+0x74>
 80037f8:	080171c4 	.word	0x080171c4
 80037fc:	080171cc 	.word	0x080171cc
 8003800:	080171d0 	.word	0x080171d0
 8003804:	080171d4 	.word	0x080171d4
 8003808:	080171c8 	.word	0x080171c8
 800380c:	080171d8 	.word	0x080171d8

08003810 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003810:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003812:	f008 feeb 	bl	800c5ec <RTC_Init>
	GetTimeDate();
 8003816:	f008 ff8f 	bl	800c738 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800381a:	f007 f9eb 	bl	800abf4 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 800381e:	f007 fb59 	bl	800aed4 <GPIO_Init>
	DMA_Init();
 8003822:	f006 fa85 	bl	8009d30 <DMA_Init>
	TIM_USEC_Init();
 8003826:	f008 ffb9 	bl	800c79c <TIM_USEC_Init>
	CRC_Init();
 800382a:	f007 f803 	bl	800a834 <CRC_Init>
	TIM_MSEC_Init();
 800382e:	f008 ffe7 	bl	800c800 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003832:	f007 fbff 	bl	800b034 <IsFactoryReset>
 8003836:	2800      	cmp	r0, #0
 8003838:	d162      	bne.n	8003900 <BOS_Init+0xf0>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800383a:	f7ff ff3b 	bl	80036b4 <IsLowerCLIbaud>
 800383e:	2800      	cmp	r0, #0
 8003840:	d052      	beq.n	80038e8 <BOS_Init+0xd8>
		CLI_LOW_Baudrate_Flag =1;
 8003842:	2322      	movs	r3, #34	; 0x22
 8003844:	2201      	movs	r2, #1
 8003846:	4e38      	ldr	r6, [pc, #224]	; (8003928 <BOS_Init+0x118>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003848:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800384a:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 800384c:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800384e:	f009 f819 	bl	800c884 <StartMilliDelay>
		Module_Peripheral_Init();
 8003852:	f006 fa21 	bl	8009c98 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003856:	21e1      	movs	r1, #225	; 0xe1
 8003858:	4d34      	ldr	r5, [pc, #208]	; (800392c <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 800385a:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800385c:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800385e:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003860:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003862:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003864:	f009 fa2e 	bl	800ccc4 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003868:	2c07      	cmp	r4, #7
 800386a:	d007      	beq.n	800387c <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 800386c:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800386e:	3401      	adds	r4, #1
 8003870:	68a9      	ldr	r1, [r5, #8]
 8003872:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003874:	f009 fa26 	bl	800ccc4 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003878:	2c07      	cmp	r4, #7
 800387a:	d1f7      	bne.n	800386c <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 800387c:	f7ff fde4 	bl	8003448 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003880:	f009 fab4 	bl	800cdec <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003884:	f006 ff1e 	bl	800a6c4 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <BOS_Init+0x120>)
		IND_ON();
 800388e:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8003890:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003892:	0109      	lsls	r1, r1, #4
 8003894:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02d      	beq.n	80038f6 <BOS_Init+0xe6>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 800389a:	f00c fe3d 	bl	8010518 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800389e:	20fa      	movs	r0, #250	; 0xfa
 80038a0:	0040      	lsls	r0, r0, #1
 80038a2:	f008 ffef 	bl	800c884 <StartMilliDelay>
		IND_OFF();
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	2090      	movs	r0, #144	; 0x90
 80038aa:	2200      	movs	r2, #0
 80038ac:	0109      	lsls	r1, r1, #4
 80038ae:	05c0      	lsls	r0, r0, #23
 80038b0:	f00c fe32 	bl	8010518 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038b4:	2064      	movs	r0, #100	; 0x64
 80038b6:	f008 ffe5 	bl	800c884 <StartMilliDelay>
		IND_ON();
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	2090      	movs	r0, #144	; 0x90
 80038be:	2201      	movs	r2, #1
 80038c0:	05c0      	lsls	r0, r0, #23
 80038c2:	0109      	lsls	r1, r1, #4
 80038c4:	f00c fe28 	bl	8010518 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	f008 ffdb 	bl	800c884 <StartMilliDelay>
		IND_OFF();
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	2090      	movs	r0, #144	; 0x90
 80038d2:	2200      	movs	r2, #0
 80038d4:	0109      	lsls	r1, r1, #4
 80038d6:	05c0      	lsls	r0, r0, #23
 80038d8:	f00c fe1e 	bl	8010518 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80038dc:	f003 fd5c 	bl	8007398 <ResetUartORE>
	
	BOS_initialized =1;
 80038e0:	2323      	movs	r3, #35	; 0x23
 80038e2:	2201      	movs	r2, #1
 80038e4:	54f2      	strb	r2, [r6, r3]
}
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80038e8:	2032      	movs	r0, #50	; 0x32
 80038ea:	f008 ffcb 	bl	800c884 <StartMilliDelay>
		Module_Peripheral_Init();
 80038ee:	f006 f9d3 	bl	8009c98 <Module_Peripheral_Init>
 80038f2:	4e0d      	ldr	r6, [pc, #52]	; (8003928 <BOS_Init+0x118>)
 80038f4:	e7c2      	b.n	800387c <BOS_Init+0x6c>
		IND_ON();
 80038f6:	f00c fe0f 	bl	8010518 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80038fa:	20fa      	movs	r0, #250	; 0xfa
 80038fc:	0040      	lsls	r0, r0, #1
 80038fe:	e7e4      	b.n	80038ca <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003900:	4c0c      	ldr	r4, [pc, #48]	; (8003934 <BOS_Init+0x124>)
 8003902:	4d0d      	ldr	r5, [pc, #52]	; (8003938 <BOS_Init+0x128>)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	42ab      	cmp	r3, r5
 8003908:	d004      	beq.n	8003914 <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 800390a:	f007 f923 	bl	800ab54 <EE_Format>
 800390e:	2800      	cmp	r0, #0
 8003910:	d100      	bne.n	8003914 <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003912:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003914:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <BOS_Init+0x12c>)
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <BOS_Init+0x130>)
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	e7fd      	b.n	8003922 <BOS_Init+0x112>
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000b18 	.word	0x20000b18
 800392c:	20006a80 	.word	0x20006a80
 8003930:	20000a98 	.word	0x20000a98
 8003934:	20007ff0 	.word	0x20007ff0
 8003938:	beefdead 	.word	0xbeefdead
 800393c:	e000ed00 	.word	0xe000ed00
 8003940:	05fa0004 	.word	0x05fa0004

08003944 <Module_Init>:
void Module_Init(void){
 8003944:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003946:	f00b f97d 	bl	800ec44 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800394a:	f005 ffc7 	bl	80098dc <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 800394e:	f7ff ff5f 	bl	8003810 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003952:	f003 fd41 	bl	80073d8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003956:	f009 faf1 	bl	800cf3c <osKernelStart>
}
 800395a:	bd10      	pop	{r4, pc}

0800395c <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 800395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395e:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003960:	4e12      	ldr	r6, [pc, #72]	; (80039ac <ExploreNeighbors+0x50>)
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 8003964:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003966:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003968:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 800396a:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 800396c:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 800396e:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003970:	b082      	sub	sp, #8
		if(port != ignore){
 8003972:	42a7      	cmp	r7, r4
 8003974:	d011      	beq.n	800399a <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003976:	4643      	mov	r3, r8
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 800397e:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003980:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003982:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003984:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003986:	2200      	movs	r2, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	3307      	adds	r3, #7
 800398e:	0020      	movs	r0, r4
 8003990:	f004 f98c 	bl	8007cac <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003994:	200a      	movs	r0, #10
 8003996:	f009 fad7 	bl	800cf48 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 800399a:	3401      	adds	r4, #1
 800399c:	b2e4      	uxtb	r4, r4
 800399e:	2c07      	cmp	r4, #7
 80039a0:	d1e7      	bne.n	8003972 <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 80039a2:	2000      	movs	r0, #0
 80039a4:	b002      	add	sp, #8
 80039a6:	bc04      	pop	{r2}
 80039a8:	4690      	mov	r8, r2
 80039aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ac:	20000b18 	.word	0x20000b18
 80039b0:	20000008 	.word	0x20000008

080039b4 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b6:	4657      	mov	r7, sl
 80039b8:	464e      	mov	r6, r9
 80039ba:	4645      	mov	r5, r8
 80039bc:	46de      	mov	lr, fp
 80039be:	b5e0      	push	{r5, r6, r7, lr}
 80039c0:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039c2:	466a      	mov	r2, sp
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039c6:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039c8:	781d      	ldrb	r5, [r3, #0]
 80039ca:	1deb      	adds	r3, r5, #7
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	469d      	mov	sp, r3
 80039d4:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	d00c      	beq.n	80039f4 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 80039da:	2100      	movs	r1, #0
 80039dc:	1e6c      	subs	r4, r5, #1
 80039de:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <FindBroadcastRoutes+0x144>)
 80039e0:	b2e4      	uxtb	r4, r4
 80039e2:	3401      	adds	r4, #1
 80039e4:	3254      	adds	r2, #84	; 0x54
 80039e6:	446c      	add	r4, sp
 80039e8:	7019      	strb	r1, [r3, #0]
 80039ea:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 80039ec:	8011      	strh	r1, [r2, #0]
 80039ee:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d1f9      	bne.n	80039e8 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 80039f4:	2301      	movs	r3, #1
 80039f6:	2216      	movs	r2, #22
 80039f8:	3801      	subs	r0, #1
 80039fa:	5433      	strb	r3, [r6, r0]
 80039fc:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <FindBroadcastRoutes+0x148>)
 80039fe:	4342      	muls	r2, r0
 8003a00:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <FindBroadcastRoutes+0x144>)
 8003a04:	0040      	lsls	r0, r0, #1
 8003a06:	1818      	adds	r0, r3, r0
 8003a08:	2301      	movs	r3, #1
 8003a0a:	3202      	adds	r2, #2
 8003a0c:	4462      	add	r2, ip
 8003a0e:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a10:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003a12:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a14:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a16:	469a      	mov	sl, r3
 8003a18:	46b3      	mov	fp, r6
 8003a1a:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003a1c:	8813      	ldrh	r3, [r2, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a22:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a24:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a26:	46a8      	mov	r8, r5
 8003a28:	4665      	mov	r5, ip
 8003a2a:	408d      	lsls	r5, r1
 8003a2c:	46a9      	mov	r9, r5
 8003a2e:	4645      	mov	r5, r8
 8003a30:	464e      	mov	r6, r9
 8003a32:	4335      	orrs	r5, r6
 8003a34:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a36:	4655      	mov	r5, sl
 8003a38:	445b      	add	r3, fp
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	701d      	strb	r5, [r3, #0]
 8003a3e:	3101      	adds	r1, #1
 8003a40:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003a42:	2906      	cmp	r1, #6
 8003a44:	d1ea      	bne.n	8003a1c <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a46:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003a48:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a4a:	4692      	mov	sl, r2
 8003a4c:	465e      	mov	r6, fp
	++level;												// Move one level
 8003a4e:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <FindBroadcastRoutes+0x144>)
 8003a52:	687d      	ldr	r5, [r7, #4]
 8003a54:	449a      	add	sl, r3
 8003a56:	4653      	mov	r3, sl
 8003a58:	46a8      	mov	r8, r5
 8003a5a:	465d      	mov	r5, fp
 8003a5c:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a5e:	4643      	mov	r3, r8
		++level;											// Move one level
 8003a60:	3501      	adds	r5, #1
 8003a62:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03b      	beq.n	8003ae0 <FindBroadcastRoutes+0x12c>
 8003a68:	1e6b      	subs	r3, r5, #1
 8003a6a:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003a6c:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a6e:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a70:	469c      	mov	ip, r3
 8003a72:	46ab      	mov	fp, r5
 8003a74:	e003      	b.n	8003a7e <FindBroadcastRoutes+0xca>
 8003a76:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a78:	b2d3      	uxtb	r3, r2
 8003a7a:	4598      	cmp	r8, r3
 8003a7c:	d92c      	bls.n	8003ad8 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a7e:	5cb3      	ldrb	r3, [r6, r2]
 8003a80:	454b      	cmp	r3, r9
 8003a82:	d1f8      	bne.n	8003a76 <FindBroadcastRoutes+0xc2>
 8003a84:	2116      	movs	r1, #22
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <FindBroadcastRoutes+0x14c>)
 8003a88:	4351      	muls	r1, r2
 8003a8a:	469a      	mov	sl, r3
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	4451      	add	r1, sl
 8003a90:	46e2      	mov	sl, ip
 8003a92:	4694      	mov	ip, r2
 8003a94:	0055      	lsls	r5, r2, #1
 8003a96:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a98:	880b      	ldrh	r3, [r1, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d012      	beq.n	8003ac4 <FindBroadcastRoutes+0x110>
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	5cf2      	ldrb	r2, [r6, r3]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d10d      	bne.n	8003ac4 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003aa8:	683c      	ldr	r4, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	5b15      	ldrh	r5, [r2, r4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4082      	lsls	r2, r0
 8003ab2:	4315      	orrs	r5, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003ab8:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003aba:	465a      	mov	r2, fp
						++untaged;
 8003abc:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003abe:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ac0:	b2e3      	uxtb	r3, r4
 8003ac2:	469a      	mov	sl, r3
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003ac8:	2806      	cmp	r0, #6
 8003aca:	d1e5      	bne.n	8003a98 <FindBroadcastRoutes+0xe4>
 8003acc:	4662      	mov	r2, ip
 8003ace:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003ad0:	b2d3      	uxtb	r3, r2
 8003ad2:	46d4      	mov	ip, sl
 8003ad4:	4598      	cmp	r8, r3
 8003ad6:	d8d2      	bhi.n	8003a7e <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003ad8:	4663      	mov	r3, ip
 8003ada:	465d      	mov	r5, fp
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1be      	bne.n	8003a5e <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b003      	add	sp, #12
 8003ae6:	bc3c      	pop	{r2, r3, r4, r5}
 8003ae8:	4690      	mov	r8, r2
 8003aea:	4699      	mov	r9, r3
 8003aec:	46a2      	mov	sl, r4
 8003aee:	46ab      	mov	fp, r5
 8003af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	20000008 	.word	0x20000008
 8003af8:	20000b18 	.word	0x20000b18
 8003afc:	20000f0c 	.word	0x20000f0c
 8003b00:	20000f0e 	.word	0x20000f0e

08003b04 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b06:	46de      	mov	lr, fp
 8003b08:	464e      	mov	r6, r9
 8003b0a:	4645      	mov	r5, r8
 8003b0c:	4657      	mov	r7, sl
 8003b0e:	b5e0      	push	{r5, r6, r7, lr}
 8003b10:	b091      	sub	sp, #68	; 0x44
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b12:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b14:	0005      	movs	r5, r0
 8003b16:	000e      	movs	r6, r1
 8003b18:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b1a:	2232      	movs	r2, #50	; 0x32
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	0020      	movs	r0, r4
 8003b20:	f00e fbfa 	bl	8012318 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003b24:	221a      	movs	r2, #26
 8003b26:	2100      	movs	r1, #0
 8003b28:	4862      	ldr	r0, [pc, #392]	; (8003cb4 <FindRoute+0x1b0>)
 8003b2a:	f00e fbf5 	bl	8012318 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b2e:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b30:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <FindRoute+0x1b4>)
 8003b34:	1e6a      	subs	r2, r5, #1
 8003b36:	469c      	mov	ip, r3
 8003b38:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b3a:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b3c:	7219      	strb	r1, [r3, #8]
 8003b3e:	2316      	movs	r3, #22
 8003b40:	4353      	muls	r3, r2
 8003b42:	4a5e      	ldr	r2, [pc, #376]	; (8003cbc <FindRoute+0x1b8>)
 8003b44:	3302      	adds	r3, #2
 8003b46:	4693      	mov	fp, r2
 8003b48:	445b      	add	r3, fp
 8003b4a:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b4c:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003b4e:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b50:	b2b1      	uxth	r1, r6
 8003b52:	8813      	ldrh	r3, [r2, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <FindRoute+0x5c>
 8003b58:	08db      	lsrs	r3, r3, #3
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d100      	bne.n	8003b60 <FindRoute+0x5c>
 8003b5e:	e099      	b.n	8003c94 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003b60:	3001      	adds	r0, #1
 8003b62:	3202      	adds	r2, #2
 8003b64:	2807      	cmp	r0, #7
 8003b66:	d1f4      	bne.n	8003b52 <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <FindRoute+0x1bc>)
 8003b6a:	7819      	ldrb	r1, [r3, #0]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	2900      	cmp	r1, #0
 8003b70:	d100      	bne.n	8003b74 <FindRoute+0x70>
 8003b72:	e09a      	b.n	8003caa <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b74:	2208      	movs	r2, #8
 8003b76:	4462      	add	r2, ip
 8003b78:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b7e:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b80:	4692      	mov	sl, r2
 8003b82:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b84:	429d      	cmp	r5, r3
 8003b86:	d005      	beq.n	8003b94 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b88:	4640      	mov	r0, r8
 8003b8a:	1e5a      	subs	r2, r3, #1
 8003b8c:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b8e:	4650      	mov	r0, sl
 8003b90:	18b2      	adds	r2, r6, r2
 8003b92:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003b94:	3301      	adds	r3, #1
 8003b96:	428b      	cmp	r3, r1
 8003b98:	ddf4      	ble.n	8003b84 <FindRoute+0x80>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	4463      	add	r3, ip
	uint8_t u =0;
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003ba2:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003ba4:	2300      	movs	r3, #0
		temp &=Q[i];
 8003ba6:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003ba8:	3301      	adds	r3, #1
		temp &=Q[i];
 8003baa:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003bac:	428b      	cmp	r3, r1
 8003bae:	dbfa      	blt.n	8003ba6 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	d000      	beq.n	8003bb6 <FindRoute+0xb2>
 8003bb4:	e07c      	b.n	8003cb0 <FindRoute+0x1ac>
 8003bb6:	4663      	mov	r3, ip
 8003bb8:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003bba:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003bbc:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d000      	beq.n	8003bc4 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003bc2:	20ff      	movs	r0, #255	; 0xff
 8003bc4:	2500      	movs	r5, #0
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e001      	b.n	8003bce <FindRoute+0xca>
 8003bca:	4642      	mov	r2, r8
 8003bcc:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003bce:	4290      	cmp	r0, r2
 8003bd0:	d904      	bls.n	8003bdc <FindRoute+0xd8>
 8003bd2:	5ce6      	ldrb	r6, [r4, r3]
 8003bd4:	2e00      	cmp	r6, #0
 8003bd6:	d101      	bne.n	8003bdc <FindRoute+0xd8>
			index =i;
 8003bd8:	0010      	movs	r0, r2
 8003bda:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003bdc:	3301      	adds	r3, #1
 8003bde:	428b      	cmp	r3, r1
 8003be0:	dbf3      	blt.n	8003bca <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003be2:	3501      	adds	r5, #1
		if(u == desID){
 8003be4:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003be6:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003be8:	429d      	cmp	r5, r3
 8003bea:	d023      	beq.n	8003c34 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003bec:	2301      	movs	r3, #1
 8003bee:	1e6f      	subs	r7, r5, #1
 8003bf0:	55e3      	strb	r3, [r4, r7]
 8003bf2:	2316      	movs	r3, #22
 8003bf4:	465e      	mov	r6, fp
 8003bf6:	437b      	muls	r3, r7
 8003bf8:	360e      	adds	r6, #14
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	445a      	add	r2, fp
 8003bfe:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c00:	4467      	add	r7, ip
 8003c02:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003c04:	8813      	ldrh	r3, [r2, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00f      	beq.n	8003c2a <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003c0a:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	5ce0      	ldrb	r0, [r4, r3]
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d109      	bne.n	8003c2a <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c16:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c18:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c1a:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c1c:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c1e:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c20:	4281      	cmp	r1, r0
 8003c22:	d902      	bls.n	8003c2a <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003c24:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003c26:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003c28:	545d      	strb	r5, [r3, r1]
 8003c2a:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003c2c:	42b2      	cmp	r2, r6
 8003c2e:	d1e9      	bne.n	8003c04 <FindRoute+0x100>
 8003c30:	9900      	ldr	r1, [sp, #0]
 8003c32:	e7b6      	b.n	8003ba2 <FindRoute+0x9e>
 8003c34:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	4463      	add	r3, ip
 8003c3a:	5c9a      	ldrb	r2, [r3, r2]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	d101      	bne.n	8003c46 <FindRoute+0x142>
 8003c42:	e00b      	b.n	8003c5c <FindRoute+0x158>
 8003c44:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <FindRoute+0x1b0>)
 8003c48:	1c58      	adds	r0, r3, #1
 8003c4a:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c4c:	4663      	mov	r3, ip
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	3323      	adds	r3, #35	; 0x23
 8003c52:	7819      	ldrb	r1, [r3, #0]
 8003c54:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c56:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d1f3      	bne.n	8003c44 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003c5c:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c5e:	464c      	mov	r4, r9
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	4463      	add	r3, ip
 8003c64:	8822      	ldrh	r2, [r4, #0]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d008      	beq.n	8003c7c <FindRoute+0x178>
 8003c6a:	4d12      	ldr	r5, [pc, #72]	; (8003cb4 <FindRoute+0x1b0>)
 8003c6c:	79d9      	ldrb	r1, [r3, #7]
 8003c6e:	46ac      	mov	ip, r5
 8003c70:	4461      	add	r1, ip
 8003c72:	3901      	subs	r1, #1
 8003c74:	7809      	ldrb	r1, [r1, #0]
 8003c76:	08d2      	lsrs	r2, r2, #3
 8003c78:	4291      	cmp	r1, r2
 8003c7a:	d014      	beq.n	8003ca6 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	3402      	adds	r4, #2
 8003c80:	2807      	cmp	r0, #7
 8003c82:	d1ef      	bne.n	8003c64 <FindRoute+0x160>
	return 0;
 8003c84:	2000      	movs	r0, #0
}
 8003c86:	b011      	add	sp, #68	; 0x44
 8003c88:	bc3c      	pop	{r2, r3, r4, r5}
 8003c8a:	4690      	mov	r8, r2
 8003c8c:	4699      	mov	r9, r3
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	46ab      	mov	fp, r5
 8003c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003c94:	9901      	ldr	r1, [sp, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	000b      	movs	r3, r1
 8003c9a:	4463      	add	r3, ip
 8003c9c:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <FindRoute+0x1b0>)
			return col;
 8003ca0:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003ca2:	7019      	strb	r1, [r3, #0]
			return col;
 8003ca4:	e7ef      	b.n	8003c86 <FindRoute+0x182>
			return col;
 8003ca6:	b2c0      	uxtb	r0, r0
 8003ca8:	e7ed      	b.n	8003c86 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003caa:	425b      	negs	r3, r3
 8003cac:	2500      	movs	r5, #0
 8003cae:	e7c2      	b.n	8003c36 <FindRoute+0x132>
 8003cb0:	1e6b      	subs	r3, r5, #1
 8003cb2:	e7c0      	b.n	8003c36 <FindRoute+0x132>
 8003cb4:	20006b48 	.word	0x20006b48
 8003cb8:	20000b98 	.word	0x20000b98
 8003cbc:	20000f0c 	.word	0x20000f0c
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc4:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc8:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003cca:	4645      	mov	r5, r8
 8003ccc:	464e      	mov	r6, r9
 8003cce:	46de      	mov	lr, fp
 8003cd0:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd2:	3440      	adds	r4, #64	; 0x40
 8003cd4:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003cd6:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd8:	4698      	mov	r8, r3
 8003cda:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003cdc:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cde:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ce0:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ce2:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce4:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003ce6:	b085      	sub	sp, #20
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce8:	6011      	str	r1, [r2, #0]
 8003cea:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cec:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cee:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf0:	0021      	movs	r1, r4
 8003cf2:	2332      	movs	r3, #50	; 0x32
 8003cf4:	9500      	str	r5, [sp, #0]
 8003cf6:	2211      	movs	r2, #17
 8003cf8:	0038      	movs	r0, r7
 8003cfa:	f008 ff91 	bl	800cc20 <writePxMutex>
 8003cfe:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <DisplayTopology+0x17c>)
 8003d00:	2601      	movs	r6, #1
 8003d02:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003d04:	0032      	movs	r2, r6
 8003d06:	4649      	mov	r1, r9
 8003d08:	0020      	movs	r0, r4
 8003d0a:	f00e fcff 	bl	801270c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d0e:	0020      	movs	r0, r4
 8003d10:	f7fc fa02 	bl	8000118 <strlen>
 8003d14:	3601      	adds	r6, #1
 8003d16:	b282      	uxth	r2, r0
 8003d18:	9500      	str	r5, [sp, #0]
 8003d1a:	2332      	movs	r3, #50	; 0x32
 8003d1c:	0021      	movs	r1, r4
 8003d1e:	0038      	movs	r0, r7
 8003d20:	f008 ff7e 	bl	800cc20 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d24:	2e07      	cmp	r6, #7
 8003d26:	d1ed      	bne.n	8003d04 <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d28:	2332      	movs	r3, #50	; 0x32
 8003d2a:	9500      	str	r5, [sp, #0]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4945      	ldr	r1, [pc, #276]	; (8003e44 <DisplayTopology+0x180>)
 8003d30:	0038      	movs	r0, r7
 8003d32:	f008 ff75 	bl	800cc20 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d36:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <DisplayTopology+0x184>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d06c      	beq.n	8003e18 <DisplayTopology+0x154>
 8003d3e:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <DisplayTopology+0x188>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d40:	4645      	mov	r5, r8
 8003d42:	469b      	mov	fp, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <DisplayTopology+0x18c>)
	for(uint8_t row =0; row < N; row++){
 8003d4c:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d4e:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"%d\t",0);
 8003d50:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <DisplayTopology+0x190>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d52:	3540      	adds	r5, #64	; 0x40
				sprintf(pcUserMessage,"%d\t",0);
 8003d54:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d56:	1c63      	adds	r3, r4, #1
 8003d58:	001a      	movs	r2, r3
 8003d5a:	493f      	ldr	r1, [pc, #252]	; (8003e58 <DisplayTopology+0x194>)
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	f00e fcd4 	bl	801270c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d64:	0028      	movs	r0, r5
 8003d66:	f7fc f9d7 	bl	8000118 <strlen>
 8003d6a:	4643      	mov	r3, r8
 8003d6c:	b282      	uxth	r2, r0
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	0029      	movs	r1, r5
 8003d72:	2332      	movs	r3, #50	; 0x32
 8003d74:	0038      	movs	r0, r7
 8003d76:	f008 ff53 	bl	800cc20 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d7a:	2316      	movs	r3, #22
 8003d7c:	435c      	muls	r4, r3
 8003d7e:	465b      	mov	r3, fp
 8003d80:	5b1b      	ldrh	r3, [r3, r4]
 8003d82:	2205      	movs	r2, #5
 8003d84:	0059      	lsls	r1, r3, #1
 8003d86:	18c9      	adds	r1, r1, r3
 8003d88:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <DisplayTopology+0x198>)
 8003d8a:	0049      	lsls	r1, r1, #1
 8003d8c:	469c      	mov	ip, r3
 8003d8e:	0028      	movs	r0, r5
 8003d90:	4461      	add	r1, ip
 8003d92:	f00e fd10 	bl	80127b6 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d96:	4643      	mov	r3, r8
 8003d98:	2205      	movs	r2, #5
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0029      	movs	r1, r5
 8003d9e:	2332      	movs	r3, #50	; 0x32
 8003da0:	0038      	movs	r0, r7
 8003da2:	f008 ff3d 	bl	800cc20 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003da6:	4643      	mov	r3, r8
 8003da8:	2201      	movs	r2, #1
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	492c      	ldr	r1, [pc, #176]	; (8003e60 <DisplayTopology+0x19c>)
 8003dae:	2332      	movs	r3, #50	; 0x32
 8003db0:	0038      	movs	r0, r7
 8003db2:	f008 ff35 	bl	800cc20 <writePxMutex>
 8003db6:	465b      	mov	r3, fp
 8003db8:	1ca6      	adds	r6, r4, #2
 8003dba:	330e      	adds	r3, #14
 8003dbc:	445e      	add	r6, fp
 8003dbe:	191c      	adds	r4, r3, r4
 8003dc0:	e011      	b.n	8003de6 <DisplayTopology+0x122>
				sprintf(pcUserMessage,"%d\t",0);
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	f00e fca1 	bl	801270c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dca:	0028      	movs	r0, r5
 8003dcc:	f7fc f9a4 	bl	8000118 <strlen>
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	b282      	uxth	r2, r0
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	2332      	movs	r3, #50	; 0x32
 8003dda:	0038      	movs	r0, r7
 8003ddc:	3602      	adds	r6, #2
 8003dde:	f008 ff1f 	bl	800cc20 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003de2:	42a6      	cmp	r6, r4
 8003de4:	d00a      	beq.n	8003dfc <DisplayTopology+0x138>
			if(!array[row][col])
 8003de6:	8832      	ldrh	r2, [r6, #0]
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d0ea      	beq.n	8003dc2 <DisplayTopology+0xfe>
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003dec:	2307      	movs	r3, #7
 8003dee:	4651      	mov	r1, sl
 8003df0:	4013      	ands	r3, r2
 8003df2:	0028      	movs	r0, r5
 8003df4:	08d2      	lsrs	r2, r2, #3
 8003df6:	f00e fc89 	bl	801270c <sprintf>
 8003dfa:	e7e6      	b.n	8003dca <DisplayTopology+0x106>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003dfc:	4643      	mov	r3, r8
 8003dfe:	2202      	movs	r2, #2
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4918      	ldr	r1, [pc, #96]	; (8003e64 <DisplayTopology+0x1a0>)
 8003e04:	2332      	movs	r3, #50	; 0x32
 8003e06:	0038      	movs	r0, r7
 8003e08:	f008 ff0a 	bl	800cc20 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003e0c:	466b      	mov	r3, sp
 8003e0e:	7b1c      	ldrb	r4, [r3, #12]
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <DisplayTopology+0x184>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	d89e      	bhi.n	8003d56 <DisplayTopology+0x92>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e18:	2301      	movs	r3, #1
 8003e1a:	425b      	negs	r3, r3
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	3333      	adds	r3, #51	; 0x33
 8003e22:	4911      	ldr	r1, [pc, #68]	; (8003e68 <DisplayTopology+0x1a4>)
 8003e24:	0038      	movs	r0, r7
 8003e26:	f008 fefb 	bl	800cc20 <writePxMutex>
}
 8003e2a:	b005      	add	sp, #20
 8003e2c:	bc3c      	pop	{r2, r3, r4, r5}
 8003e2e:	4690      	mov	r8, r2
 8003e30:	4699      	mov	r9, r3
 8003e32:	46a2      	mov	sl, r4
 8003e34:	46ab      	mov	fp, r5
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e38:	20000b98 	.word	0x20000b98
 8003e3c:	080171dc 	.word	0x080171dc
 8003e40:	080171f0 	.word	0x080171f0
 8003e44:	0801807c 	.word	0x0801807c
 8003e48:	20000008 	.word	0x20000008
 8003e4c:	20000f0c 	.word	0x20000f0c
 8003e50:	08017208 	.word	0x08017208
 8003e54:	08017204 	.word	0x08017204
 8003e58:	080171f8 	.word	0x080171f8
 8003e5c:	08016b5c 	.word	0x08016b5c
 8003e60:	080171ec 	.word	0x080171ec
 8003e64:	08017314 	.word	0x08017314
 8003e68:	08018af0 	.word	0x08018af0

08003e6c <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	4645      	mov	r5, r8
 8003e70:	46de      	mov	lr, fp
 8003e72:	4657      	mov	r7, sl
 8003e74:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e76:	4934      	ldr	r1, [pc, #208]	; (8003f48 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e78:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e7a:	3140      	adds	r1, #64	; 0x40
 8003e7c:	000a      	movs	r2, r1
 8003e7e:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e80:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e82:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e84:	c231      	stmia	r2!, {r0, r4, r5}
 8003e86:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e88:	c231      	stmia	r2!, {r0, r4, r5}
 8003e8a:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e8c:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e8e:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e90:	2301      	movs	r3, #1
 8003e92:	425b      	negs	r3, r3
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	221b      	movs	r2, #27
 8003e98:	3333      	adds	r3, #51	; 0x33
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	f008 fec0 	bl	800cc20 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <DisplayPortsDir+0xe4>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d035      	beq.n	8003f14 <DisplayPortsDir+0xa8>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4699      	mov	r9, r3
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <DisplayPortsDir+0xe8>)
 8003eae:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <DisplayPortsDir+0xec>)
 8003eb2:	469b      	mov	fp, r3
 8003eb4:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eb6:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eb8:	4f23      	ldr	r7, [pc, #140]	; (8003f48 <DisplayPortsDir+0xdc>)
 8003eba:	1e5d      	subs	r5, r3, #1
 8003ebc:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003ebe:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ec0:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ec2:	3740      	adds	r7, #64	; 0x40
 8003ec4:	e002      	b.n	8003ecc <DisplayPortsDir+0x60>
 8003ec6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003ec8:	2c0a      	cmp	r4, #10
 8003eca:	d01b      	beq.n	8003f04 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ecc:	0031      	movs	r1, r6
 8003ece:	4642      	mov	r2, r8
 8003ed0:	4119      	asrs	r1, r3
 8003ed2:	5b52      	ldrh	r2, [r2, r5]
 8003ed4:	1c5c      	adds	r4, r3, #1
 8003ed6:	4211      	tst	r1, r2
 8003ed8:	d0f5      	beq.n	8003ec6 <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eda:	0023      	movs	r3, r4
 8003edc:	464a      	mov	r2, r9
 8003ede:	4659      	mov	r1, fp
 8003ee0:	0038      	movs	r0, r7
 8003ee2:	f00e fc13 	bl	801270c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003ee6:	0038      	movs	r0, r7
 8003ee8:	f7fc f916 	bl	8000118 <strlen>
 8003eec:	2301      	movs	r3, #1
 8003eee:	425b      	negs	r3, r3
 8003ef0:	b282      	uxth	r2, r0
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	0039      	movs	r1, r7
 8003ef6:	3333      	adds	r3, #51	; 0x33
 8003ef8:	4650      	mov	r0, sl
 8003efa:	f008 fe91 	bl	800cc20 <writePxMutex>
 8003efe:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003f00:	2c0a      	cmp	r4, #10
 8003f02:	d1e3      	bne.n	8003ecc <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003f04:	464b      	mov	r3, r9
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4699      	mov	r9, r3
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <DisplayPortsDir+0xe4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	454b      	cmp	r3, r9
 8003f12:	d2cf      	bcs.n	8003eb4 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003f14:	490c      	ldr	r1, [pc, #48]	; (8003f48 <DisplayPortsDir+0xdc>)
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <DisplayPortsDir+0xf0>)
 8003f18:	3140      	adds	r1, #64	; 0x40
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f1e:	c231      	stmia	r2!, {r0, r4, r5}
 8003f20:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f22:	c231      	stmia	r2!, {r0, r4, r5}
 8003f24:	cb11      	ldmia	r3!, {r0, r4}
 8003f26:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f28:	2301      	movs	r3, #1
 8003f2a:	425b      	negs	r3, r3
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	221f      	movs	r2, #31
 8003f30:	3333      	adds	r3, #51	; 0x33
 8003f32:	4650      	mov	r0, sl
 8003f34:	f008 fe74 	bl	800cc20 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f38:	b003      	add	sp, #12
 8003f3a:	bc3c      	pop	{r2, r3, r4, r5}
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	4699      	mov	r9, r3
 8003f40:	46a2      	mov	sl, r4
 8003f42:	46ab      	mov	fp, r5
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000b98 	.word	0x20000b98
 8003f4c:	08017210 	.word	0x08017210
 8003f50:	20000008 	.word	0x20000008
 8003f54:	20006f48 	.word	0x20006f48
 8003f58:	0801722c 	.word	0x0801722c
 8003f5c:	08017240 	.word	0x08017240

08003f60 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f62:	46de      	mov	lr, fp
 8003f64:	464e      	mov	r6, r9
 8003f66:	4645      	mov	r5, r8
 8003f68:	4657      	mov	r7, sl
 8003f6a:	b5e0      	push	{r5, r6, r7, lr}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	9002      	str	r0, [sp, #8]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f70:	f009 f8f2 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f74:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f76:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f78:	4d97      	ldr	r5, [pc, #604]	; (80041d8 <DisplayModuleStatus+0x278>)
	strcpy((char* )pcOutputString,"");
 8003f7a:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f7c:	4b97      	ldr	r3, [pc, #604]	; (80041dc <DisplayModuleStatus+0x27c>)
 8003f7e:	3540      	adds	r5, #64	; 0x40
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	4997      	ldr	r1, [pc, #604]	; (80041e0 <DisplayModuleStatus+0x280>)
 8003f84:	0028      	movs	r0, r5
 8003f86:	469a      	mov	sl, r3
 8003f88:	f00e fbc0 	bl	801270c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8c:	0029      	movs	r1, r5
 8003f8e:	0020      	movs	r0, r4
 8003f90:	f00e fbdc 	bl	801274c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f94:	4b93      	ldr	r3, [pc, #588]	; (80041e4 <DisplayModuleStatus+0x284>)
 8003f96:	4994      	ldr	r1, [pc, #592]	; (80041e8 <DisplayModuleStatus+0x288>)
 8003f98:	7c1a      	ldrb	r2, [r3, #16]
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	4698      	mov	r8, r3
 8003f9e:	f00e fbb5 	bl	801270c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fa2:	0029      	movs	r1, r5
 8003fa4:	0020      	movs	r0, r4
 8003fa6:	f00e fbd1 	bl	801274c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003faa:	2306      	movs	r3, #6
 8003fac:	2200      	movs	r2, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	498e      	ldr	r1, [pc, #568]	; (80041ec <DisplayModuleStatus+0x28c>)
 8003fb2:	3b04      	subs	r3, #4
 8003fb4:	0028      	movs	r0, r5
 8003fb6:	f00e fba9 	bl	801270c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003fba:	0029      	movs	r1, r5
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f00e fbc5 	bl	801274c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003fc2:	4a8b      	ldr	r2, [pc, #556]	; (80041f0 <DisplayModuleStatus+0x290>)
 8003fc4:	498b      	ldr	r1, [pc, #556]	; (80041f4 <DisplayModuleStatus+0x294>)
 8003fc6:	0028      	movs	r0, r5
 8003fc8:	f00e fba0 	bl	801270c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fcc:	0029      	movs	r1, r5
 8003fce:	0020      	movs	r0, r4
 8003fd0:	f00e fbbc 	bl	801274c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fd4:	4a88      	ldr	r2, [pc, #544]	; (80041f8 <DisplayModuleStatus+0x298>)
 8003fd6:	4989      	ldr	r1, [pc, #548]	; (80041fc <DisplayModuleStatus+0x29c>)
 8003fd8:	0028      	movs	r0, r5
 8003fda:	f00e fb97 	bl	801270c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fde:	0029      	movs	r1, r5
 8003fe0:	0020      	movs	r0, r4
 8003fe2:	f00e fbb3 	bl	801274c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fe6:	002a      	movs	r2, r5
 8003fe8:	4b85      	ldr	r3, [pc, #532]	; (8004200 <DisplayModuleStatus+0x2a0>)
 8003fea:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fec:	c243      	stmia	r2!, {r0, r1, r6}
 8003fee:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff0:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ff2:	6011      	str	r1, [r2, #0]
 8003ff4:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff6:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ff8:	8091      	strh	r1, [r2, #4]
 8003ffa:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ffc:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ffe:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004000:	f00e fba4 	bl	801274c <strcat>
 8004004:	4b7f      	ldr	r3, [pc, #508]	; (8004204 <DisplayModuleStatus+0x2a4>)
 8004006:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004008:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <DisplayModuleStatus+0x2a8>)
 800400a:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 800400c:	0032      	movs	r2, r6
 800400e:	4649      	mov	r1, r9
 8004010:	0028      	movs	r0, r5
 8004012:	f00e fb7b 	bl	801270c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004016:	0029      	movs	r1, r5
 8004018:	0020      	movs	r0, r4
 800401a:	f00e fb97 	bl	801274c <strcat>
		switch(portStatus[i]){
 800401e:	4643      	mov	r3, r8
 8004020:	3314      	adds	r3, #20
 8004022:	5cf3      	ldrb	r3, [r6, r3]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d80b      	bhi.n	8004040 <DisplayModuleStatus+0xe0>
 8004028:	465a      	mov	r2, fp
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	58d3      	ldr	r3, [r2, r3]
 800402e:	469f      	mov	pc, r3
				break;
			case STREAM:
				sprintf(pcUserMessage,"Streaming\n\r");
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004030:	002a      	movs	r2, r5
 8004032:	4b76      	ldr	r3, [pc, #472]	; (800420c <DisplayModuleStatus+0x2ac>)
 8004034:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004036:	c283      	stmia	r2!, {r0, r1, r7}
 8004038:	cb83      	ldmia	r3!, {r0, r1, r7}
 800403a:	c283      	stmia	r2!, {r0, r1, r7}
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	8013      	strh	r3, [r2, #0]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004040:	0029      	movs	r1, r5
 8004042:	0020      	movs	r0, r4
 8004044:	3601      	adds	r6, #1
 8004046:	f00e fb81 	bl	801274c <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800404a:	2e07      	cmp	r6, #7
 800404c:	d1de      	bne.n	800400c <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800404e:	002a      	movs	r2, r5
 8004050:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004052:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004054:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004056:	c243      	stmia	r2!, {r0, r1, r6}
 8004058:	cb43      	ldmia	r3!, {r0, r1, r6}
 800405a:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800405c:	0029      	movs	r1, r5
 800405e:	0020      	movs	r0, r4
 8004060:	f00e fb74 	bl	801274c <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004064:	4b6b      	ldr	r3, [pc, #428]	; (8004214 <DisplayModuleStatus+0x2b4>)
 8004066:	4e6c      	ldr	r6, [pc, #432]	; (8004218 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004068:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800406a:	469b      	mov	fp, r3
 800406c:	e01d      	b.n	80040aa <DisplayModuleStatus+0x14a>
 800406e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004070:	f005 fe2e 	bl	8009cd0 <GetPort>
 8004074:	465a      	mov	r2, fp
 8004076:	00ab      	lsls	r3, r5, #2
 8004078:	3b04      	subs	r3, #4
 800407a:	0004      	movs	r4, r0
 800407c:	58d0      	ldr	r0, [r2, r3]
 800407e:	f005 fe27 	bl	8009cd0 <GetPort>
 8004082:	2340      	movs	r3, #64	; 0x40
 8004084:	4699      	mov	r9, r3
 8004086:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <DisplayModuleStatus+0x278>)
 8004088:	002a      	movs	r2, r5
 800408a:	469c      	mov	ip, r3
 800408c:	44e1      	add	r9, ip
 800408e:	9000      	str	r0, [sp, #0]
 8004090:	0023      	movs	r3, r4
 8004092:	4962      	ldr	r1, [pc, #392]	; (800421c <DisplayModuleStatus+0x2bc>)
 8004094:	4648      	mov	r0, r9
 8004096:	f00e fb39 	bl	801270c <sprintf>
 800409a:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800409c:	4649      	mov	r1, r9
 800409e:	4640      	mov	r0, r8
 80040a0:	f00e fb54 	bl	801274c <strcat>
 80040a4:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a6:	2d07      	cmp	r5, #7
 80040a8:	d011      	beq.n	80040ce <DisplayModuleStatus+0x16e>
		if(streamDMA[i - 1].Instance == 0){
 80040aa:	6833      	ldr	r3, [r6, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1de      	bne.n	800406e <DisplayModuleStatus+0x10e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80040b0:	4c49      	ldr	r4, [pc, #292]	; (80041d8 <DisplayModuleStatus+0x278>)
 80040b2:	002a      	movs	r2, r5
 80040b4:	3440      	adds	r4, #64	; 0x40
 80040b6:	495a      	ldr	r1, [pc, #360]	; (8004220 <DisplayModuleStatus+0x2c0>)
 80040b8:	0020      	movs	r0, r4
 80040ba:	f00e fb27 	bl	801270c <sprintf>
 80040be:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80040c0:	0021      	movs	r1, r4
 80040c2:	4640      	mov	r0, r8
 80040c4:	f00e fb42 	bl	801274c <strcat>
 80040c8:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040ca:	2d07      	cmp	r5, #7
 80040cc:	d1ed      	bne.n	80040aa <DisplayModuleStatus+0x14a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040ce:	4640      	mov	r0, r8
 80040d0:	f7fc f822 	bl	8000118 <strlen>
 80040d4:	4644      	mov	r4, r8
 80040d6:	0005      	movs	r5, r0
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
	temp =strlen((char* )pcOutputString);
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040d8:	2680      	movs	r6, #128	; 0x80
	strcat((char* )pcOutputString,"\n\r");
 80040da:	4b52      	ldr	r3, [pc, #328]	; (8004224 <DisplayModuleStatus+0x2c4>)
 80040dc:	2202      	movs	r2, #2
 80040de:	0019      	movs	r1, r3
 80040e0:	1820      	adds	r0, r4, r0
 80040e2:	4699      	mov	r9, r3
 80040e4:	f00e f90f 	bl	8012306 <memcpy>
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040e8:	1ca8      	adds	r0, r5, #2
 80040ea:	221d      	movs	r2, #29
 80040ec:	1820      	adds	r0, r4, r0
 80040ee:	494e      	ldr	r1, [pc, #312]	; (8004228 <DisplayModuleStatus+0x2c8>)
 80040f0:	f00e f909 	bl	8012306 <memcpy>
 80040f4:	4b4d      	ldr	r3, [pc, #308]	; (800422c <DisplayModuleStatus+0x2cc>)
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040f6:	4f38      	ldr	r7, [pc, #224]	; (80041d8 <DisplayModuleStatus+0x278>)
 80040f8:	4698      	mov	r8, r3
 80040fa:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <DisplayModuleStatus+0x2d0>)
	temp =strlen((char* )pcOutputString);
 80040fc:	351e      	adds	r5, #30
 80040fe:	9503      	str	r5, [sp, #12]
 8004100:	2200      	movs	r2, #0
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004102:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004104:	469b      	mov	fp, r3
 8004106:	3740      	adds	r7, #64	; 0x40
 8004108:	e002      	b.n	8004110 <DisplayModuleStatus+0x1b0>
 800410a:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800410c:	2d06      	cmp	r5, #6
 800410e:	d016      	beq.n	800413e <DisplayModuleStatus+0x1de>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004110:	4653      	mov	r3, sl
 8004112:	4641      	mov	r1, r8
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	1c55      	adds	r5, r2, #1
 8004118:	3b01      	subs	r3, #1
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	5acb      	ldrh	r3, [r1, r3]
 800411e:	0031      	movs	r1, r6
 8004120:	4111      	asrs	r1, r2
 8004122:	4219      	tst	r1, r3
 8004124:	d0f1      	beq.n	800410a <DisplayModuleStatus+0x1aa>
			sprintf(pcUserMessage,"P%d ",p);
 8004126:	002a      	movs	r2, r5
 8004128:	4659      	mov	r1, fp
 800412a:	0038      	movs	r0, r7
 800412c:	f00e faee 	bl	801270c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004130:	0039      	movs	r1, r7
 8004132:	0020      	movs	r0, r4
 8004134:	f00e fb0a 	bl	801274c <strcat>
 8004138:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800413a:	2d06      	cmp	r5, #6
 800413c:	d1e8      	bne.n	8004110 <DisplayModuleStatus+0x1b0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800413e:	0020      	movs	r0, r4
 8004140:	f7fb ffea 	bl	8000118 <strlen>
 8004144:	466b      	mov	r3, sp
 8004146:	899b      	ldrh	r3, [r3, #12]
 8004148:	0005      	movs	r5, r0
 800414a:	1820      	adds	r0, r4, r0
 800414c:	42ab      	cmp	r3, r5
 800414e:	d03c      	beq.n	80041ca <DisplayModuleStatus+0x26a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004150:	2203      	movs	r2, #3
 8004152:	4649      	mov	r1, r9
 8004154:	f00e f8d7 	bl	8012306 <memcpy>
	
	/* Display output */
	if(port)
 8004158:	9b02      	ldr	r3, [sp, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800415e:	0020      	movs	r0, r4
 8004160:	f7fb ffda 	bl	8000118 <strlen>
 8004164:	2301      	movs	r3, #1
 8004166:	425b      	negs	r3, r3
 8004168:	b282      	uxth	r2, r0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	0021      	movs	r1, r4
 800416e:	3333      	adds	r3, #51	; 0x33
 8004170:	9802      	ldr	r0, [sp, #8]
 8004172:	f008 fd55 	bl	800cc20 <writePxMutex>
	
}
 8004176:	b005      	add	sp, #20
 8004178:	bc3c      	pop	{r2, r3, r4, r5}
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	46a2      	mov	sl, r4
 8004180:	46ab      	mov	fp, r5
 8004182:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004184:	002a      	movs	r2, r5
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <DisplayModuleStatus+0x2d4>)
 8004188:	cb83      	ldmia	r3!, {r0, r1, r7}
 800418a:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800418c:	e758      	b.n	8004040 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800418e:	002a      	movs	r2, r5
 8004190:	4b29      	ldr	r3, [pc, #164]	; (8004238 <DisplayModuleStatus+0x2d8>)
 8004192:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004194:	c283      	stmia	r2!, {r0, r1, r7}
 8004196:	cb03      	ldmia	r3!, {r0, r1}
 8004198:	c203      	stmia	r2!, {r0, r1}
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	7013      	strb	r3, [r2, #0]
				break;
 800419e:	e74f      	b.n	8004040 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80041a0:	002b      	movs	r3, r5
 80041a2:	4a26      	ldr	r2, [pc, #152]	; (800423c <DisplayModuleStatus+0x2dc>)
 80041a4:	ca83      	ldmia	r2!, {r0, r1, r7}
 80041a6:	c383      	stmia	r3!, {r0, r1, r7}
 80041a8:	ca83      	ldmia	r2!, {r0, r1, r7}
 80041aa:	c383      	stmia	r3!, {r0, r1, r7}
 80041ac:	6811      	ldr	r1, [r2, #0]
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	8891      	ldrh	r1, [r2, #4]
 80041b2:	8099      	strh	r1, [r3, #4]
 80041b4:	7992      	ldrb	r2, [r2, #6]
 80041b6:	719a      	strb	r2, [r3, #6]
				break;
 80041b8:	e742      	b.n	8004040 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Free\n\r");
 80041ba:	4b21      	ldr	r3, [pc, #132]	; (8004240 <DisplayModuleStatus+0x2e0>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	889a      	ldrh	r2, [r3, #4]
 80041c2:	80aa      	strh	r2, [r5, #4]
 80041c4:	799b      	ldrb	r3, [r3, #6]
 80041c6:	71ab      	strb	r3, [r5, #6]
				break;
 80041c8:	e73a      	b.n	8004040 <DisplayModuleStatus+0xe0>
		strcat((char* )pcOutputString,"None");
 80041ca:	2205      	movs	r2, #5
 80041cc:	491d      	ldr	r1, [pc, #116]	; (8004244 <DisplayModuleStatus+0x2e4>)
 80041ce:	f00e f89a 	bl	8012306 <memcpy>
 80041d2:	1d28      	adds	r0, r5, #4
 80041d4:	1820      	adds	r0, r4, r0
 80041d6:	e7bb      	b.n	8004150 <DisplayModuleStatus+0x1f0>
 80041d8:	20000b98 	.word	0x20000b98
 80041dc:	20000a98 	.word	0x20000a98
 80041e0:	08017260 	.word	0x08017260
 80041e4:	20000c18 	.word	0x20000c18
 80041e8:	0801727c 	.word	0x0801727c
 80041ec:	08017298 	.word	0x08017298
 80041f0:	080172b8 	.word	0x080172b8
 80041f4:	080172c4 	.word	0x080172c4
 80041f8:	080172dc 	.word	0x080172dc
 80041fc:	080172e8 	.word	0x080172e8
 8004200:	08017304 	.word	0x08017304
 8004204:	08017318 	.word	0x08017318
 8004208:	08016ab0 	.word	0x08016ab0
 800420c:	0801734c 	.word	0x0801734c
 8004210:	08017388 	.word	0x08017388
 8004214:	200019a8 	.word	0x200019a8
 8004218:	2000227c 	.word	0x2000227c
 800421c:	080173bc 	.word	0x080173bc
 8004220:	080173a0 	.word	0x080173a0
 8004224:	08017314 	.word	0x08017314
 8004228:	080173ec 	.word	0x080173ec
 800422c:	20006f48 	.word	0x20006f48
 8004230:	0801740c 	.word	0x0801740c
 8004234:	08017340 	.word	0x08017340
 8004238:	08017328 	.word	0x08017328
 800423c:	08017368 	.word	0x08017368
 8004240:	08017320 	.word	0x08017320
 8004244:	08017414 	.word	0x08017414

08004248 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424a:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 800424c:	4929      	ldr	r1, [pc, #164]	; (80042f4 <GetID+0xac>)
int16_t GetID(char *string){
 800424e:	b500      	push	{lr}
 8004250:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004252:	f7fb ff57 	bl	8000104 <strcmp>
 8004256:	2800      	cmp	r0, #0
 8004258:	d02c      	beq.n	80042b4 <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 800425a:	4927      	ldr	r1, [pc, #156]	; (80042f8 <GetID+0xb0>)
 800425c:	0030      	movs	r0, r6
 800425e:	f7fb ff51 	bl	8000104 <strcmp>
 8004262:	2800      	cmp	r0, #0
 8004264:	d02b      	beq.n	80042be <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004266:	7833      	ldrb	r3, [r6, #0]
 8004268:	4698      	mov	r8, r3
 800426a:	2b23      	cmp	r3, #35	; 0x23
 800426c:	d030      	beq.n	80042d0 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <GetID+0xb4>)
 8004270:	781f      	ldrb	r7, [r3, #0]
 8004272:	2f00      	cmp	r7, #0
 8004274:	d00f      	beq.n	8004296 <GetID+0x4e>
 8004276:	2400      	movs	r4, #0
 8004278:	4d21      	ldr	r5, [pc, #132]	; (8004300 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800427a:	0029      	movs	r1, r5
 800427c:	0030      	movs	r0, r6
 800427e:	f7fb ff41 	bl	8000104 <strcmp>
 8004282:	2800      	cmp	r0, #0
 8004284:	d102      	bne.n	800428c <GetID+0x44>
 8004286:	4643      	mov	r3, r8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11a      	bne.n	80042c2 <GetID+0x7a>
		for(i =0; i < N; i++){
 800428c:	3401      	adds	r4, #1
 800428e:	b2e4      	uxtb	r4, r4
 8004290:	350a      	adds	r5, #10
 8004292:	42a7      	cmp	r7, r4
 8004294:	d1f1      	bne.n	800427a <GetID+0x32>
 8004296:	2400      	movs	r4, #0
 8004298:	4d1a      	ldr	r5, [pc, #104]	; (8004304 <GetID+0xbc>)
 800429a:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 800429c:	0029      	movs	r1, r5
 800429e:	0030      	movs	r0, r6
 80042a0:	f7fb ff30 	bl	8000104 <strcmp>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d00e      	beq.n	80042c6 <GetID+0x7e>
 80042a8:	3401      	adds	r4, #1
 80042aa:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80042ac:	2c0a      	cmp	r4, #10
 80042ae:	d1f5      	bne.n	800429c <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80042b0:	2064      	movs	r0, #100	; 0x64
 80042b2:	e001      	b.n	80042b8 <GetID+0x70>
		return myID;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <GetID+0xbc>)
 80042b6:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80042b8:	bc04      	pop	{r2}
 80042ba:	4690      	mov	r8, r2
 80042bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80042be:	20ff      	movs	r0, #255	; 0xff
 80042c0:	e7fa      	b.n	80042b8 <GetID+0x70>
				return (i);
 80042c2:	b220      	sxth	r0, r4
 80042c4:	e7f8      	b.n	80042b8 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80042c6:	20fe      	movs	r0, #254	; 0xfe
 80042c8:	0224      	lsls	r4, r4, #8
 80042ca:	4320      	orrs	r0, r4
 80042cc:	b200      	sxth	r0, r0
 80042ce:	e7f3      	b.n	80042b8 <GetID+0x70>
		id =atol(string + 1);
 80042d0:	1c70      	adds	r0, r6, #1
 80042d2:	f00d fd58 	bl	8011d86 <atol>
 80042d6:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <GetID+0x9c>
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <GetID+0xb4>)
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d204      	bcs.n	80042ee <GetID+0xa6>
		else if(id == myID)
 80042e4:	4a07      	ldr	r2, [pc, #28]	; (8004304 <GetID+0xbc>)
			return BOS_ERR_WrongID;
 80042e6:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d1e4      	bne.n	80042b8 <GetID+0x70>
			return myID;
 80042ee:	b218      	sxth	r0, r3
 80042f0:	e7e2      	b.n	80042b8 <GetID+0x70>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	0801741c 	.word	0x0801741c
 80042f8:	08017420 	.word	0x08017420
 80042fc:	20000008 	.word	0x20000008
 8004300:	20000dfc 	.word	0x20000dfc
 8004304:	20000a98 	.word	0x20000a98

08004308 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430a:	46c6      	mov	lr, r8
 800430c:	4c2c      	ldr	r4, [pc, #176]	; (80043c0 <NameModule+0xb8>)
 800430e:	0007      	movs	r7, r0
 8004310:	0026      	movs	r6, r4
 8004312:	000d      	movs	r5, r1
 8004314:	b500      	push	{lr}
 8004316:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 8004318:	0021      	movs	r1, r4
 800431a:	0028      	movs	r0, r5
 800431c:	f7fb fef2 	bl	8000104 <strcmp>
 8004320:	2800      	cmp	r0, #0
 8004322:	d040      	beq.n	80043a6 <NameModule+0x9e>
 8004324:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 8004326:	42a6      	cmp	r6, r4
 8004328:	d1f6      	bne.n	8004318 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800432a:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <NameModule+0xbc>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d914      	bls.n	800435c <NameModule+0x54>
 8004332:	4c25      	ldr	r4, [pc, #148]	; (80043c8 <NameModule+0xc0>)
 8004334:	009e      	lsls	r6, r3, #2
 8004336:	18f6      	adds	r6, r6, r3
 8004338:	0023      	movs	r3, r4
 800433a:	0076      	lsls	r6, r6, #1
 800433c:	3b0a      	subs	r3, #10
 800433e:	18f6      	adds	r6, r6, r3
 8004340:	e002      	b.n	8004348 <NameModule+0x40>
 8004342:	340a      	adds	r4, #10
 8004344:	42b4      	cmp	r4, r6
 8004346:	d009      	beq.n	800435c <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 8004348:	0021      	movs	r1, r4
 800434a:	0028      	movs	r0, r5
 800434c:	f7fb feda 	bl	8000104 <strcmp>
 8004350:	2800      	cmp	r0, #0
 8004352:	d1f6      	bne.n	8004342 <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 8004354:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 8004356:	bc04      	pop	{r2}
 8004358:	4690      	mov	r8, r2
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435c:	4e1b      	ldr	r6, [pc, #108]	; (80043cc <NameModule+0xc4>)
 800435e:	0034      	movs	r4, r6
 8004360:	369c      	adds	r6, #156	; 0x9c
 8004362:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004364:	0021      	movs	r1, r4
 8004366:	0028      	movs	r0, r5
 8004368:	f7fb fecc 	bl	8000104 <strcmp>
 800436c:	2800      	cmp	r0, #0
 800436e:	d0f1      	beq.n	8004354 <NameModule+0x4c>
 8004370:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004372:	42a6      	cmp	r6, r4
 8004374:	d1f6      	bne.n	8004364 <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <NameModule+0xc8>)
 8004378:	4c16      	ldr	r4, [pc, #88]	; (80043d4 <NameModule+0xcc>)
 800437a:	4698      	mov	r8, r3
 800437c:	61dc      	str	r4, [r3, #28]
 800437e:	e004      	b.n	800438a <NameModule+0x82>
 8004380:	4643      	mov	r3, r8
 8004382:	6864      	ldr	r4, [r4, #4]
 8004384:	61dc      	str	r4, [r3, #28]
 8004386:	2c00      	cmp	r4, #0
 8004388:	d00f      	beq.n	80043aa <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800438e:	0030      	movs	r0, r6
 8004390:	f7fb fec2 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004394:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004396:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004398:	0028      	movs	r0, r5
 800439a:	f00e f9fb 	bl	8012794 <strncmp>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1ee      	bne.n	8004380 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 80043a2:	2008      	movs	r0, #8
 80043a4:	e7d7      	b.n	8004356 <NameModule+0x4e>
			return BOS_ERR_Keyword;
 80043a6:	2006      	movs	r0, #6
 80043a8:	e7d5      	b.n	8004356 <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80043aa:	00b8      	lsls	r0, r7, #2
 80043ac:	19c0      	adds	r0, r0, r7
 80043ae:	4f0a      	ldr	r7, [pc, #40]	; (80043d8 <NameModule+0xd0>)
 80043b0:	0040      	lsls	r0, r0, #1
 80043b2:	0029      	movs	r1, r5
 80043b4:	19c0      	adds	r0, r0, r7
 80043b6:	f00e f9e5 	bl	8012784 <strcpy>
	result =SaveEEalias();
 80043ba:	f7ff f87f 	bl	80034bc <SaveEEalias>
	return result;
 80043be:	e7ca      	b.n	8004356 <NameModule+0x4e>
 80043c0:	08016b0c 	.word	0x08016b0c
 80043c4:	20000008 	.word	0x20000008
 80043c8:	20000e06 	.word	0x20000e06
 80043cc:	20000a98 	.word	0x20000a98
 80043d0:	20000c18 	.word	0x20000c18
 80043d4:	200000bc 	.word	0x200000bc
 80043d8:	20000dfc 	.word	0x20000dfc

080043dc <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	464f      	mov	r7, r9
 80043e0:	4646      	mov	r6, r8
 80043e2:	46d6      	mov	lr, sl
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <AddModuleToGroup+0x104>)
 80043e6:	b5c0      	push	{r6, r7, lr}
 80043e8:	001f      	movs	r7, r3
 80043ea:	3738      	adds	r7, #56	; 0x38
 80043ec:	4680      	mov	r8, r0
 80043ee:	000e      	movs	r6, r1
 80043f0:	4699      	mov	r9, r3
 80043f2:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043f4:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043f6:	0021      	movs	r1, r4
 80043f8:	0030      	movs	r0, r6
 80043fa:	f7fb fe83 	bl	8000104 <strcmp>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d02a      	beq.n	8004458 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 8004402:	3501      	adds	r5, #1
 8004404:	340a      	adds	r4, #10
 8004406:	2d0a      	cmp	r5, #10
 8004408:	d1f5      	bne.n	80043f6 <AddModuleToGroup+0x1a>
 800440a:	4c36      	ldr	r4, [pc, #216]	; (80044e4 <AddModuleToGroup+0x108>)
 800440c:	0025      	movs	r5, r4
 800440e:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004410:	0021      	movs	r1, r4
 8004412:	0030      	movs	r0, r6
 8004414:	f7fb fe76 	bl	8000104 <strcmp>
 8004418:	2800      	cmp	r0, #0
 800441a:	d051      	beq.n	80044c0 <AddModuleToGroup+0xe4>
 800441c:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 800441e:	42a5      	cmp	r5, r4
 8004420:	d1f6      	bne.n	8004410 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <AddModuleToGroup+0x10c>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d920      	bls.n	800446c <AddModuleToGroup+0x90>
 800442a:	4c30      	ldr	r4, [pc, #192]	; (80044ec <AddModuleToGroup+0x110>)
 800442c:	009d      	lsls	r5, r3, #2
 800442e:	18ed      	adds	r5, r5, r3
 8004430:	0023      	movs	r3, r4
 8004432:	006d      	lsls	r5, r5, #1
 8004434:	3b0a      	subs	r3, #10
 8004436:	18ed      	adds	r5, r5, r3
 8004438:	e002      	b.n	8004440 <AddModuleToGroup+0x64>
 800443a:	340a      	adds	r4, #10
 800443c:	42a5      	cmp	r5, r4
 800443e:	d015      	beq.n	800446c <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 8004440:	0021      	movs	r1, r4
 8004442:	0030      	movs	r0, r6
 8004444:	f7fb fe5e 	bl	8000104 <strcmp>
 8004448:	2800      	cmp	r0, #0
 800444a:	d1f6      	bne.n	800443a <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 800444c:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 800444e:	bc1c      	pop	{r2, r3, r4}
 8004450:	4690      	mov	r8, r2
 8004452:	4699      	mov	r9, r3
 8004454:	46a2      	mov	sl, r4
 8004456:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 8004458:	2201      	movs	r2, #1
 800445a:	4647      	mov	r7, r8
 800445c:	40aa      	lsls	r2, r5
 800445e:	3f01      	subs	r7, #1
 8004460:	007f      	lsls	r7, r7, #1
 8004462:	444f      	add	r7, r9
 8004464:	88bb      	ldrh	r3, [r7, #4]
 8004466:	4313      	orrs	r3, r2
 8004468:	80bb      	strh	r3, [r7, #4]
			return result;
 800446a:	e7f0      	b.n	800444e <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <AddModuleToGroup+0x114>)
 800446e:	4c21      	ldr	r4, [pc, #132]	; (80044f4 <AddModuleToGroup+0x118>)
 8004470:	469a      	mov	sl, r3
 8004472:	621c      	str	r4, [r3, #32]
 8004474:	e004      	b.n	8004480 <AddModuleToGroup+0xa4>
 8004476:	4653      	mov	r3, sl
 8004478:	6864      	ldr	r4, [r4, #4]
 800447a:	621c      	str	r4, [r3, #32]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d00d      	beq.n	800449c <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004484:	0028      	movs	r0, r5
 8004486:	f7fb fe47 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800448a:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800448c:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800448e:	0030      	movs	r0, r6
 8004490:	f00e f980 	bl	8012794 <strncmp>
 8004494:	2800      	cmp	r0, #0
 8004496:	d1ee      	bne.n	8004476 <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004498:	2008      	movs	r0, #8
 800449a:	e7d8      	b.n	800444e <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 800449c:	783b      	ldrb	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 80044a2:	3401      	adds	r4, #1
 80044a4:	370a      	adds	r7, #10
 80044a6:	2c0a      	cmp	r4, #10
 80044a8:	d1f8      	bne.n	800449c <AddModuleToGroup+0xc0>
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80044ae:	4647      	mov	r7, r8
 80044b0:	3f01      	subs	r7, #1
 80044b2:	007f      	lsls	r7, r7, #1
 80044b4:	444f      	add	r7, r9
 80044b6:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80044b8:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80044ba:	4313      	orrs	r3, r2
 80044bc:	80bb      	strh	r3, [r7, #4]
	return result;
 80044be:	e7c6      	b.n	800444e <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80044c0:	2006      	movs	r0, #6
 80044c2:	e7c4      	b.n	800444e <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80044c4:	464b      	mov	r3, r9
 80044c6:	00a0      	lsls	r0, r4, #2
 80044c8:	1900      	adds	r0, r0, r4
 80044ca:	3338      	adds	r3, #56	; 0x38
 80044cc:	0040      	lsls	r0, r0, #1
 80044ce:	1818      	adds	r0, r3, r0
 80044d0:	0031      	movs	r1, r6
 80044d2:	f00e f957 	bl	8012784 <strcpy>
 80044d6:	2301      	movs	r3, #1
 80044d8:	40a3      	lsls	r3, r4
 80044da:	b21b      	sxth	r3, r3
			break;
 80044dc:	e7e7      	b.n	80044ae <AddModuleToGroup+0xd2>
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000a98 	.word	0x20000a98
 80044e4:	08016b0c 	.word	0x08016b0c
 80044e8:	20000008 	.word	0x20000008
 80044ec:	20000e06 	.word	0x20000e06
 80044f0:	20000c18 	.word	0x20000c18
 80044f4:	200000bc 	.word	0x200000bc

080044f8 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	4645      	mov	r5, r8
 80044fc:	4657      	mov	r7, sl
 80044fe:	464e      	mov	r6, r9
 8004500:	46de      	mov	lr, fp
 8004502:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004504:	4f82      	ldr	r7, [pc, #520]	; (8004710 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004506:	b083      	sub	sp, #12
 8004508:	ac0c      	add	r4, sp, #48	; 0x30
 800450a:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 800450c:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800450e:	9001      	str	r0, [sp, #4]
 8004510:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004512:	46a8      	mov	r8, r5
	if(timeout)
 8004514:	2e00      	cmp	r6, #0
 8004516:	d059      	beq.n	80045cc <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004518:	2520      	movs	r5, #32
 800451a:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 800451c:	4265      	negs	r5, r4
 800451e:	416c      	adcs	r4, r5
 8004520:	2501      	movs	r5, #1
 8004522:	2022      	movs	r0, #34	; 0x22
 8004524:	4264      	negs	r4, r4
 8004526:	43ac      	bics	r4, r5
 8004528:	46a3      	mov	fp, r4
 800452a:	4684      	mov	ip, r0
 800452c:	b2d5      	uxtb	r5, r2
 800452e:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004530:	4d78      	ldr	r5, [pc, #480]	; (8004714 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004532:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004534:	42aa      	cmp	r2, r5
 8004536:	d829      	bhi.n	800458c <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004538:	2224      	movs	r2, #36	; 0x24
 800453a:	464c      	mov	r4, r9
 800453c:	4d76      	ldr	r5, [pc, #472]	; (8004718 <WriteToRemote+0x220>)
 800453e:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004540:	002a      	movs	r2, r5
 8004542:	3224      	adds	r2, #36	; 0x24
 8004544:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004546:	2b08      	cmp	r3, #8
 8004548:	d814      	bhi.n	8004574 <WriteToRemote+0x7c>
 800454a:	4a74      	ldr	r2, [pc, #464]	; (800471c <WriteToRemote+0x224>)
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	58d3      	ldr	r3, [r2, r3]
 8004550:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	3524      	adds	r5, #36	; 0x24
 8004556:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004558:	680b      	ldr	r3, [r1, #0]
 800455a:	121b      	asrs	r3, r3, #8
 800455c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800455e:	680b      	ldr	r3, [r1, #0]
 8004560:	141b      	asrs	r3, r3, #16
 8004562:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004568:	220a      	movs	r2, #10
 800456a:	4659      	mov	r1, fp
 800456c:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800456e:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004570:	f003 fdfc 	bl	800816c <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004574:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004576:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004578:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800457a:	2e00      	cmp	r6, #0
 800457c:	d128      	bne.n	80045d0 <WriteToRemote+0xd8>
}
 800457e:	b003      	add	sp, #12
 8004580:	bc3c      	pop	{r2, r3, r4, r5}
 8004582:	4690      	mov	r8, r2
 8004584:	4699      	mov	r9, r3
 8004586:	46a2      	mov	sl, r4
 8004588:	46ab      	mov	fp, r5
 800458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 800458c:	2024      	movs	r0, #36	; 0x24
 800458e:	4684      	mov	ip, r0
 8004590:	2000      	movs	r0, #0
 8004592:	4682      	mov	sl, r0
 8004594:	4660      	mov	r0, ip
 8004596:	4654      	mov	r4, sl
 8004598:	4d5f      	ldr	r5, [pc, #380]	; (8004718 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 800459a:	44ac      	add	ip, r5
		messageParams[0] =0;
 800459c:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 800459e:	4660      	mov	r0, ip
 80045a0:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80045a2:	0e10      	lsrs	r0, r2, #24
 80045a4:	4682      	mov	sl, r0
 80045a6:	4660      	mov	r0, ip
 80045a8:	4654      	mov	r4, sl
 80045aa:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045ac:	0c10      	lsrs	r0, r2, #16
 80045ae:	4682      	mov	sl, r0
 80045b0:	4660      	mov	r0, ip
 80045b2:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80045b4:	0a12      	lsrs	r2, r2, #8
 80045b6:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045b8:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80045ba:	4662      	mov	r2, ip
 80045bc:	4648      	mov	r0, r9
 80045be:	7150      	strb	r0, [r2, #5]
		switch(format){
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d8d7      	bhi.n	8004574 <WriteToRemote+0x7c>
 80045c4:	4a56      	ldr	r2, [pc, #344]	; (8004720 <WriteToRemote+0x228>)
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	58d3      	ldr	r3, [r2, r3]
 80045ca:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80045cc:	703e      	strb	r6, [r7, #0]
 80045ce:	e7a5      	b.n	800451c <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80045d0:	f00a fb50 	bl	800ec74 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045d4:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80045d6:	0007      	movs	r7, r0
 80045d8:	4d52      	ldr	r5, [pc, #328]	; (8004724 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045da:	5d28      	ldrb	r0, [r5, r4]
 80045dc:	2800      	cmp	r0, #0
 80045de:	d0ce      	beq.n	800457e <WriteToRemote+0x86>
 80045e0:	f00a fb48 	bl	800ec74 <HAL_GetTick>
 80045e4:	1bc0      	subs	r0, r0, r7
 80045e6:	42b0      	cmp	r0, r6
 80045e8:	d3f7      	bcc.n	80045da <WriteToRemote+0xe2>
 80045ea:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80045ec:	e7c7      	b.n	800457e <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045ee:	780b      	ldrb	r3, [r1, #0]
 80045f0:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045f2:	2203      	movs	r2, #3
 80045f4:	2120      	movs	r1, #32
 80045f6:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045f8:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045fa:	f003 fdb7 	bl	800816c <SendMessageToModule>
				break;
 80045fe:	e7b9      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004600:	780b      	ldrb	r3, [r1, #0]
 8004602:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004604:	2207      	movs	r2, #7
 8004606:	4659      	mov	r1, fp
 8004608:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800460a:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 800460c:	f003 fdae 	bl	800816c <SendMessageToModule>
				break;
 8004610:	e7b0      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004612:	680b      	ldr	r3, [r1, #0]
 8004614:	3524      	adds	r5, #36	; 0x24
 8004616:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800461e:	680b      	ldr	r3, [r1, #0]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004624:	680b      	ldr	r3, [r1, #0]
 8004626:	0e1b      	lsrs	r3, r3, #24
 8004628:	e79e      	b.n	8004568 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800462a:	780b      	ldrb	r3, [r1, #0]
 800462c:	3524      	adds	r5, #36	; 0x24
 800462e:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004630:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004632:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004634:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004636:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004638:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800463a:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 800463c:	78cb      	ldrb	r3, [r1, #3]
 800463e:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004640:	790b      	ldrb	r3, [r1, #4]
 8004642:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004644:	794b      	ldrb	r3, [r1, #5]
 8004646:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004648:	798b      	ldrb	r3, [r1, #6]
 800464a:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800464c:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800464e:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004650:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004652:	f003 fd8b 	bl	800816c <SendMessageToModule>
				break;
 8004656:	e78d      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004658:	780b      	ldrb	r3, [r1, #0]
 800465a:	3524      	adds	r5, #36	; 0x24
 800465c:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800465e:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004660:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004662:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004664:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004666:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004668:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800466a:	78cb      	ldrb	r3, [r1, #3]
 800466c:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800466e:	790b      	ldrb	r3, [r1, #4]
 8004670:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004672:	794b      	ldrb	r3, [r1, #5]
 8004674:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004676:	798b      	ldrb	r3, [r1, #6]
 8004678:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800467a:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 800467c:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800467e:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004680:	f003 fd74 	bl	800816c <SendMessageToModule>
				break;
 8004684:	e776      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004686:	880b      	ldrh	r3, [r1, #0]
 8004688:	3524      	adds	r5, #36	; 0x24
 800468a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800468c:	880b      	ldrh	r3, [r1, #0]
 800468e:	b21b      	sxth	r3, r3
 8004690:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 8004692:	2208      	movs	r2, #8
 8004694:	4659      	mov	r1, fp
 8004696:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004698:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 800469a:	f003 fd67 	bl	800816c <SendMessageToModule>
				break;
 800469e:	e769      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80046a0:	880b      	ldrh	r3, [r1, #0]
 80046a2:	3524      	adds	r5, #36	; 0x24
 80046a4:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80046a6:	880b      	ldrh	r3, [r1, #0]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	e7f2      	b.n	8004692 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80046ac:	680b      	ldr	r3, [r1, #0]
 80046ae:	3524      	adds	r5, #36	; 0x24
 80046b0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	121b      	asrs	r3, r3, #8
 80046b6:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80046b8:	680b      	ldr	r3, [r1, #0]
 80046ba:	141b      	asrs	r3, r3, #16
 80046bc:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046c2:	2206      	movs	r2, #6
 80046c4:	2120      	movs	r1, #32
 80046c6:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046c8:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046ca:	f003 fd4f 	bl	800816c <SendMessageToModule>
				break;
 80046ce:	e751      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80046d0:	680b      	ldr	r3, [r1, #0]
 80046d2:	3524      	adds	r5, #36	; 0x24
 80046d4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80046d6:	680b      	ldr	r3, [r1, #0]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80046dc:	680b      	ldr	r3, [r1, #0]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	0e1b      	lsrs	r3, r3, #24
 80046e6:	e7ec      	b.n	80046c2 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80046e8:	880b      	ldrh	r3, [r1, #0]
 80046ea:	3524      	adds	r5, #36	; 0x24
 80046ec:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046ee:	880b      	ldrh	r3, [r1, #0]
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046f4:	2204      	movs	r2, #4
 80046f6:	2120      	movs	r1, #32
 80046f8:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046fa:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046fc:	f003 fd36 	bl	800816c <SendMessageToModule>
				break;
 8004700:	e738      	b.n	8004574 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004702:	880b      	ldrh	r3, [r1, #0]
 8004704:	3524      	adds	r5, #36	; 0x24
 8004706:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004708:	880b      	ldrh	r3, [r1, #0]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	e7f2      	b.n	80046f4 <WriteToRemote+0x1fc>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	20006a00 	.word	0x20006a00
 8004714:	07ffffff 	.word	0x07ffffff
 8004718:	20000b18 	.word	0x20000b18
 800471c:	08016ac4 	.word	0x08016ac4
 8004720:	08016ae8 	.word	0x08016ae8
 8004724:	20000c18 	.word	0x20000c18

08004728 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004728:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800472a:	2101      	movs	r1, #1
char* GetDateString(void){
 800472c:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 800472e:	201e      	movs	r0, #30
 8004730:	f00d fb30 	bl	8011d94 <calloc>
 8004734:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004736:	4809      	ldr	r0, [pc, #36]	; (800475c <GetDateString+0x34>)
 8004738:	4909      	ldr	r1, [pc, #36]	; (8004760 <GetDateString+0x38>)
 800473a:	7d02      	ldrb	r2, [r0, #20]
 800473c:	8b05      	ldrh	r5, [r0, #24]
 800473e:	7d83      	ldrb	r3, [r0, #22]
 8004740:	3a01      	subs	r2, #1
 8004742:	9501      	str	r5, [sp, #4]
 8004744:	7d40      	ldrb	r0, [r0, #21]
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	188a      	adds	r2, r1, r2
 800474a:	9000      	str	r0, [sp, #0]
 800474c:	6912      	ldr	r2, [r2, #16]
 800474e:	312c      	adds	r1, #44	; 0x2c
 8004750:	0020      	movs	r0, r4
 8004752:	f00d ffdb 	bl	801270c <sprintf>
	return buffer;
}
 8004756:	0020      	movs	r0, r4
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	20006a80 	.word	0x20006a80
 8004760:	08016b0c 	.word	0x08016b0c

08004764 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004764:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004768:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800476a:	7819      	ldrb	r1, [r3, #0]
 800476c:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800476e:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004770:	9303      	str	r3, [sp, #12]
 8004772:	3b02      	subs	r3, #2
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	3303      	adds	r3, #3
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	000b      	movs	r3, r1
 800477e:	f003 fd19 	bl	80081b4 <StartScastDMAStream>
}
 8004782:	b005      	add	sp, #20
 8004784:	bd00      	pop	{pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	20000a98 	.word	0x20000a98

0800478c <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800478c:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800478e:	b530      	push	{r4, r5, lr}
 8004790:	0004      	movs	r4, r0
 8004792:	000d      	movs	r5, r1
 8004794:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004796:	9304      	str	r3, [sp, #16]
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	2000      	movs	r0, #0
 80047a6:	f7fe fecd 	bl	8003544 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047aa:	1e60      	subs	r0, r4, #1
 80047ac:	00c3      	lsls	r3, r0, #3
 80047ae:	4912      	ldr	r1, [pc, #72]	; (80047f8 <Unbridge+0x6c>)
 80047b0:	1a1b      	subs	r3, r3, r0
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	585b      	ldr	r3, [r3, r1]
 80047b6:	1e6a      	subs	r2, r5, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <Unbridge+0x56>
 80047bc:	00d3      	lsls	r3, r2, #3
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80047c4:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80047ca:	f005 ffc7 	bl	800a75c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047ce:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80047d0:	b007      	add	sp, #28
 80047d2:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80047d4:	f005 ffc2 	bl	800a75c <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80047d8:	0028      	movs	r0, r5
 80047da:	f005 ffbf 	bl	800a75c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047de:	2000      	movs	r0, #0
 80047e0:	e7f6      	b.n	80047d0 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80047e2:	00d3      	lsls	r3, r2, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	585b      	ldr	r3, [r3, r1]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80047ee:	0028      	movs	r0, r5
 80047f0:	e7eb      	b.n	80047ca <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 80047f2:	2068      	movs	r0, #104	; 0x68
 80047f4:	e7ec      	b.n	80047d0 <Unbridge+0x44>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	2000227c 	.word	0x2000227c

080047fc <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	46d6      	mov	lr, sl
 8004800:	4646      	mov	r6, r8
 8004802:	464f      	mov	r7, r9
 8004804:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004806:	4e27      	ldr	r6, [pc, #156]	; (80048a4 <AddSnippet.part.0+0xa8>)
 8004808:	4d27      	ldr	r5, [pc, #156]	; (80048a8 <AddSnippet.part.0+0xac>)
 800480a:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 800480c:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 800480e:	3b01      	subs	r3, #1
 8004810:	009c      	lsls	r4, r3, #2
 8004812:	18e4      	adds	r4, r4, r3
 8004814:	00a4      	lsls	r4, r4, #2
 8004816:	192c      	adds	r4, r5, r4
 8004818:	68e3      	ldr	r3, [r4, #12]
 800481a:	469a      	mov	sl, r3
 800481c:	f7fb fc7c 	bl	8000118 <strlen>
 8004820:	4653      	mov	r3, sl
 8004822:	4681      	mov	r9, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02e      	beq.n	8004886 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004828:	4650      	mov	r0, sl
 800482a:	f7fb fc75 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800482e:	4649      	mov	r1, r9
 8004830:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004832:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004834:	1809      	adds	r1, r1, r0
 8004836:	4650      	mov	r0, sl
 8004838:	f00d fda0 	bl	801237c <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 800483c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800483e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004840:	3a01      	subs	r2, #1
 8004842:	0093      	lsls	r3, r2, #2
 8004844:	189b      	adds	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	18eb      	adds	r3, r5, r3
 800484a:	68d8      	ldr	r0, [r3, #12]
 800484c:	1c7a      	adds	r2, r7, #1
 800484e:	1880      	adds	r0, r0, r2
 8004850:	4641      	mov	r1, r8
 8004852:	f00d ff97 	bl	8012784 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004856:	7832      	ldrb	r2, [r6, #0]
 8004858:	3a01      	subs	r2, #1
 800485a:	0093      	lsls	r3, r2, #2
 800485c:	189b      	adds	r3, r3, r2
 800485e:	2213      	movs	r2, #19
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	18eb      	adds	r3, r5, r3
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	55da      	strb	r2, [r3, r7]
 8004868:	7833      	ldrb	r3, [r6, #0]
 800486a:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 800486c:	0098      	lsls	r0, r3, #2
 800486e:	18c0      	adds	r0, r0, r3
 8004870:	0080      	lsls	r0, r0, #2
 8004872:	1828      	adds	r0, r5, r0
 8004874:	68c3      	ldr	r3, [r0, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 800487a:	2000      	movs	r0, #0
}
 800487c:	bc1c      	pop	{r2, r3, r4}
 800487e:	4690      	mov	r8, r2
 8004880:	4699      	mov	r9, r3
 8004882:	46a2      	mov	sl, r4
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004886:	3001      	adds	r0, #1
 8004888:	f00d faf0 	bl	8011e6c <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 800488c:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800488e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004890:	f00d ff78 	bl	8012784 <strcpy>
 8004894:	e7f1      	b.n	800487a <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004896:	2214      	movs	r2, #20
 8004898:	2100      	movs	r1, #0
 800489a:	f00d fd3d 	bl	8012318 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800489e:	200e      	movs	r0, #14
 80048a0:	e7ec      	b.n	800487c <AddSnippet.part.0+0x80>
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	2000182c 	.word	0x2000182c
 80048a8:	20006a9c 	.word	0x20006a9c

080048ac <StringToLowerCase>:
void StringToLowerCase(char *string){
 80048ac:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 80048ae:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 80048b0:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	d00d      	beq.n	80048d2 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 80048b6:	2603      	movs	r6, #3
 80048b8:	f00d faca 	bl	8011e50 <__locale_ctype_ptr>
 80048bc:	1900      	adds	r0, r0, r4
 80048be:	7842      	ldrb	r2, [r0, #1]
 80048c0:	4032      	ands	r2, r6
 80048c2:	2a01      	cmp	r2, #1
 80048c4:	d100      	bne.n	80048c8 <StringToLowerCase+0x1c>
 80048c6:	3420      	adds	r4, #32
 80048c8:	702c      	strb	r4, [r5, #0]
 80048ca:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80048cc:	782c      	ldrb	r4, [r5, #0]
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	d1f2      	bne.n	80048b8 <StringToLowerCase+0xc>
}
 80048d2:	bd70      	pop	{r4, r5, r6, pc}

080048d4 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d6:	4657      	mov	r7, sl
 80048d8:	464e      	mov	r6, r9
 80048da:	46de      	mov	lr, fp
 80048dc:	4645      	mov	r5, r8
 80048de:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e0:	4ed8      	ldr	r6, [pc, #864]	; (8004c44 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 80048e2:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e4:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 80048e6:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e8:	2c05      	cmp	r4, #5
 80048ea:	d067      	beq.n	80049bc <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048ec:	00a3      	lsls	r3, r4, #2
 80048ee:	4dd6      	ldr	r5, [pc, #856]	; (8004c48 <ParseSnippetCondition+0x374>)
 80048f0:	1918      	adds	r0, r3, r4
 80048f2:	0080      	lsls	r0, r0, #2
 80048f4:	469a      	mov	sl, r3
 80048f6:	182b      	adds	r3, r5, r0
 80048f8:	4699      	mov	r9, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80048fe:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004900:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004902:	1828      	adds	r0, r5, r0
 8004904:	2204      	movs	r2, #4
 8004906:	2100      	movs	r1, #0
 8004908:	f00d fd06 	bl	8012318 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 800490c:	783b      	ldrb	r3, [r7, #0]
 800490e:	2b62      	cmp	r3, #98	; 0x62
 8004910:	d102      	bne.n	8004918 <ParseSnippetCondition+0x44>
 8004912:	78bb      	ldrb	r3, [r7, #2]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d057      	beq.n	80049c8 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004918:	1d33      	adds	r3, r6, #4
 800491a:	4698      	mov	r8, r3
 800491c:	0018      	movs	r0, r3
 800491e:	0039      	movs	r1, r7
 8004920:	f00d ff30 	bl	8012784 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004924:	4cc9      	ldr	r4, [pc, #804]	; (8004c4c <ParseSnippetCondition+0x378>)
 8004926:	4640      	mov	r0, r8
 8004928:	0021      	movs	r1, r4
 800492a:	f00e fdab 	bl	8013484 <strtok>
		secondPart =strtok( NULL," ");
 800492e:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004930:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004932:	2000      	movs	r0, #0
 8004934:	f00e fda6 	bl	8013484 <strtok>
		thirdPart =strtok( NULL," ");
 8004938:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 800493a:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 800493c:	2000      	movs	r0, #0
 800493e:	f00e fda1 	bl	8013484 <strtok>
 8004942:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004944:	2f00      	cmp	r7, #0
 8004946:	d02f      	beq.n	80049a8 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004948:	0038      	movs	r0, r7
 800494a:	f7fe fefd 	bl	8003748 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800494e:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004950:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004952:	d036      	beq.n	80049c2 <ParseSnippetCondition+0xee>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d024      	beq.n	80049a2 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004958:	2c00      	cmp	r4, #0
 800495a:	d025      	beq.n	80049a8 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 800495c:	0020      	movs	r0, r4
 800495e:	f7fe fef3 	bl	8003748 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004962:	2800      	cmp	r0, #0
 8004964:	d06b      	beq.n	8004a3e <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004966:	2204      	movs	r2, #4
 8004968:	7833      	ldrb	r3, [r6, #0]
 800496a:	009c      	lsls	r4, r3, #2
 800496c:	4699      	mov	r9, r3
 800496e:	18e3      	adds	r3, r4, r3
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004974:	18eb      	adds	r3, r5, r3
 8004976:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004978:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800497a:	4640      	mov	r0, r8
 800497c:	f7fe fef0 	bl	8003760 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004980:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004982:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004984:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004986:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004988:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800498a:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800498c:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800498e:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004990:	18ed      	adds	r5, r5, r3
 8004992:	786b      	ldrb	r3, [r5, #1]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004998:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 800499a:	3201      	adds	r2, #1
 800499c:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 800499e:	4698      	mov	r8, r3
 80049a0:	e004      	b.n	80049ac <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d100      	bne.n	80049a8 <ParseSnippetCondition+0xd4>
 80049a6:	e07f      	b.n	8004aa8 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 80049a8:	2367      	movs	r3, #103	; 0x67
 80049aa:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049ac:	4640      	mov	r0, r8
 80049ae:	b00b      	add	sp, #44	; 0x2c
 80049b0:	bc3c      	pop	{r2, r3, r4, r5}
 80049b2:	4690      	mov	r8, r2
 80049b4:	4699      	mov	r9, r3
 80049b6:	46a2      	mov	sl, r4
 80049b8:	46ab      	mov	fp, r5
 80049ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 80049bc:	230e      	movs	r3, #14
 80049be:	4698      	mov	r8, r3
 80049c0:	e7f4      	b.n	80049ac <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1c8      	bne.n	8004958 <ParseSnippetCondition+0x84>
 80049c6:	e7ef      	b.n	80049a8 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049c8:	787b      	ldrb	r3, [r7, #1]
 80049ca:	3b30      	subs	r3, #48	; 0x30
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049d4:	465b      	mov	r3, fp
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d8e8      	bhi.n	80049ac <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049da:	4649      	mov	r1, r9
 80049dc:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049de:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049e0:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049e2:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049e4:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049e6:	2207      	movs	r2, #7
 80049e8:	4999      	ldr	r1, [pc, #612]	; (8004c50 <ParseSnippetCondition+0x37c>)
 80049ea:	0018      	movs	r0, r3
 80049ec:	9307      	str	r3, [sp, #28]
 80049ee:	f00d fed1 	bl	8012794 <strncmp>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d03d      	beq.n	8004a72 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80049f6:	220e      	movs	r2, #14
 80049f8:	4996      	ldr	r1, [pc, #600]	; (8004c54 <ParseSnippetCondition+0x380>)
 80049fa:	9807      	ldr	r0, [sp, #28]
 80049fc:	f00d feca 	bl	8012794 <strncmp>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d15e      	bne.n	8004ac2 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004a04:	2306      	movs	r3, #6
 8004a06:	464a      	mov	r2, r9
 8004a08:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004a0a:	465b      	mov	r3, fp
 8004a0c:	00da      	lsls	r2, r3, #3
 8004a0e:	4b92      	ldr	r3, [pc, #584]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004a10:	445a      	add	r2, fp
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	7a1b      	ldrb	r3, [r3, #8]
 8004a16:	079b      	lsls	r3, r3, #30
 8004a18:	d40e      	bmi.n	8004a38 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	4643      	mov	r3, r8
 8004a20:	2201      	movs	r2, #1
 8004a22:	9304      	str	r3, [sp, #16]
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4658      	mov	r0, fp
 8004a32:	f006 fc81 	bl	800b338 <SetButtonEvents>
 8004a36:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004a38:	3401      	adds	r4, #1
 8004a3a:	7034      	strb	r4, [r6, #0]
 8004a3c:	e7b6      	b.n	80049ac <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a3e:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004a40:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a42:	0093      	lsls	r3, r2, #2
 8004a44:	189b      	adds	r3, r3, r2
 8004a46:	2203      	movs	r2, #3
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a4c:	18eb      	adds	r3, r5, r3
 8004a4e:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004a50:	f00d f98e 	bl	8011d70 <atof>
 8004a54:	f7fe f8b8 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a58:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004a5a:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a5c:	009c      	lsls	r4, r3, #2
 8004a5e:	18e0      	adds	r0, r4, r3
 8004a60:	0080      	lsls	r0, r0, #2
 8004a62:	3006      	adds	r0, #6
 8004a64:	1828      	adds	r0, r5, r0
 8004a66:	2204      	movs	r2, #4
 8004a68:	a909      	add	r1, sp, #36	; 0x24
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	f00d fc4b 	bl	8012306 <memcpy>
 8004a70:	e783      	b.n	800497a <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004a72:	2305      	movs	r3, #5
 8004a74:	4649      	mov	r1, r9
 8004a76:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004a78:	4659      	mov	r1, fp
 8004a7a:	4b77      	ldr	r3, [pc, #476]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	445a      	add	r2, fp
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	2201      	movs	r2, #1
 8004a84:	7a1b      	ldrb	r3, [r3, #8]
 8004a86:	421a      	tst	r2, r3
 8004a88:	d1d6      	bne.n	8004a38 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	4643      	mov	r3, r8
 8004a90:	2200      	movs	r2, #0
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4658      	mov	r0, fp
 8004aa0:	f006 fc4a 	bl	800b338 <SetButtonEvents>
 8004aa4:	7834      	ldrb	r4, [r6, #0]
 8004aa6:	e7c7      	b.n	8004a38 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	7832      	ldrb	r2, [r6, #0]
 8004aac:	0093      	lsls	r3, r2, #2
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ab4:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004ab6:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ab8:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004aba:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004abc:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004abe:	4698      	mov	r8, r3
 8004ac0:	e774      	b.n	80049ac <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004ac2:	220c      	movs	r2, #12
 8004ac4:	4965      	ldr	r1, [pc, #404]	; (8004c5c <ParseSnippetCondition+0x388>)
 8004ac6:	9807      	ldr	r0, [sp, #28]
 8004ac8:	f00d fe64 	bl	8012794 <strncmp>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d131      	bne.n	8004b34 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004ad0:	465b      	mov	r3, fp
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004ad6:	445a      	add	r2, fp
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	789a      	ldrb	r2, [r3, #2]
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d063      	beq.n	8004ba8 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004ae0:	78da      	ldrb	r2, [r3, #3]
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d07d      	beq.n	8004be2 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ae6:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004ae8:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004aea:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1a3      	bne.n	8004a38 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004af0:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004af2:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004af4:	4453      	add	r3, sl
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18eb      	adds	r3, r5, r3
 8004afa:	3a01      	subs	r2, #1
 8004afc:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004afe:	300f      	adds	r0, #15
 8004b00:	f00d f93b 	bl	8011d7a <atoi>
 8004b04:	7832      	ldrb	r2, [r6, #0]
 8004b06:	b2c0      	uxtb	r0, r0
 8004b08:	0093      	lsls	r3, r2, #2
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b10:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b12:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b14:	9305      	str	r3, [sp, #20]
 8004b16:	2300      	movs	r3, #0
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	9303      	str	r3, [sp, #12]
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	9001      	str	r0, [sp, #4]
 8004b24:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b26:	4658      	mov	r0, fp
 8004b28:	f006 fc06 	bl	800b338 <SetButtonEvents>
					status =BOS_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	7834      	ldrb	r4, [r6, #0]
 8004b30:	4698      	mov	r8, r3
 8004b32:	e781      	b.n	8004a38 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b34:	220d      	movs	r2, #13
 8004b36:	494a      	ldr	r1, [pc, #296]	; (8004c60 <ParseSnippetCondition+0x38c>)
 8004b38:	9807      	ldr	r0, [sp, #28]
 8004b3a:	f00d fe2b 	bl	8012794 <strncmp>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d000      	beq.n	8004b44 <ParseSnippetCondition+0x270>
 8004b42:	e779      	b.n	8004a38 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004b44:	465b      	mov	r3, fp
 8004b46:	4a44      	ldr	r2, [pc, #272]	; (8004c58 <ParseSnippetCondition+0x384>)
 8004b48:	00d9      	lsls	r1, r3, #3
 8004b4a:	18cb      	adds	r3, r1, r3
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	7958      	ldrb	r0, [r3, #5]
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d05e      	beq.n	8004c12 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004b54:	799b      	ldrb	r3, [r3, #6]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d100      	bne.n	8004b5c <ParseSnippetCondition+0x288>
 8004b5a:	e083      	b.n	8004c64 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004b5c:	4459      	add	r1, fp
 8004b5e:	1852      	adds	r2, r2, r1
 8004b60:	79d3      	ldrb	r3, [r2, #7]
 8004b62:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004b64:	230d      	movs	r3, #13
 8004b66:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004b68:	464b      	mov	r3, r9
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d000      	beq.n	8004b70 <ParseSnippetCondition+0x29c>
 8004b6e:	e763      	b.n	8004a38 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b70:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b72:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b74:	4698      	mov	r8, r3
 8004b76:	435c      	muls	r4, r3
 8004b78:	3b06      	subs	r3, #6
 8004b7a:	192c      	adds	r4, r5, r4
 8004b7c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b7e:	3010      	adds	r0, #16
 8004b80:	f00d f8fb 	bl	8011d7a <atoi>
 8004b84:	4642      	mov	r2, r8
 8004b86:	7833      	ldrb	r3, [r6, #0]
 8004b88:	b2c0      	uxtb	r0, r0
 8004b8a:	4353      	muls	r3, r2
 8004b8c:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b8e:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b90:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	464b      	mov	r3, r9
 8004b96:	9303      	str	r3, [sp, #12]
 8004b98:	9302      	str	r3, [sp, #8]
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9004      	str	r0, [sp, #16]
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	e7be      	b.n	8004b26 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004ba8:	2309      	movs	r3, #9
 8004baa:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bac:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004bae:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bb0:	300f      	adds	r0, #15
 8004bb2:	f00d f8e2 	bl	8011d7a <atoi>
 8004bb6:	7831      	ldrb	r1, [r6, #0]
 8004bb8:	b2c3      	uxtb	r3, r0
 8004bba:	008a      	lsls	r2, r1, #2
 8004bbc:	1852      	adds	r2, r2, r1
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bc2:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bc4:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bc6:	9205      	str	r2, [sp, #20]
 8004bc8:	4642      	mov	r2, r8
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	9203      	str	r2, [sp, #12]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9201      	str	r2, [sp, #4]
 8004bd2:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4658      	mov	r0, fp
 8004bda:	f006 fbad 	bl	800b338 <SetButtonEvents>
 8004bde:	7834      	ldrb	r4, [r6, #0]
 8004be0:	e72a      	b.n	8004a38 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004be2:	230a      	movs	r3, #10
 8004be4:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004be6:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004be8:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bea:	300f      	adds	r0, #15
 8004bec:	f00d f8c5 	bl	8011d7a <atoi>
 8004bf0:	7832      	ldrb	r2, [r6, #0]
 8004bf2:	b2c0      	uxtb	r0, r0
 8004bf4:	0093      	lsls	r3, r2, #2
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bfc:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bfe:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	4643      	mov	r3, r8
 8004c04:	9000      	str	r0, [sp, #0]
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9303      	str	r3, [sp, #12]
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e7e0      	b.n	8004bd4 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c12:	230c      	movs	r3, #12
 8004c14:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c16:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c18:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c1a:	3010      	adds	r0, #16
 8004c1c:	f00d f8ad 	bl	8011d7a <atoi>
 8004c20:	7832      	ldrb	r2, [r6, #0]
 8004c22:	b2c0      	uxtb	r0, r0
 8004c24:	0093      	lsls	r3, r2, #2
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c2c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c2e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c30:	9305      	str	r3, [sp, #20]
 8004c32:	4643      	mov	r3, r8
 8004c34:	9002      	str	r0, [sp, #8]
 8004c36:	9304      	str	r3, [sp, #16]
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e7c8      	b.n	8004bd4 <ParseSnippetCondition+0x300>
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	2000182c 	.word	0x2000182c
 8004c48:	20006a9c 	.word	0x20006a9c
 8004c4c:	0801731c 	.word	0x0801731c
 8004c50:	080180b0 	.word	0x080180b0
 8004c54:	080178e4 	.word	0x080178e4
 8004c58:	200025c8 	.word	0x200025c8
 8004c5c:	080178f4 	.word	0x080178f4
 8004c60:	08017904 	.word	0x08017904
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c64:	0023      	movs	r3, r4
 8004c66:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c68:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c6a:	4453      	add	r3, sl
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	18eb      	adds	r3, r5, r3
 8004c70:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c72:	3010      	adds	r0, #16
 8004c74:	f00d f881 	bl	8011d7a <atoi>
 8004c78:	7832      	ldrb	r2, [r6, #0]
 8004c7a:	b2c0      	uxtb	r0, r0
 8004c7c:	0093      	lsls	r3, r2, #2
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c84:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c86:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c88:	9305      	str	r3, [sp, #20]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9003      	str	r0, [sp, #12]
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	e744      	b.n	8004b26 <ParseSnippetCondition+0x252>

08004c9c <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	46de      	mov	lr, fp
 8004ca0:	4657      	mov	r7, sl
 8004ca2:	4645      	mov	r5, r8
 8004ca4:	464e      	mov	r6, r9
 8004ca6:	468a      	mov	sl, r1
 8004ca8:	b5e0      	push	{r5, r6, r7, lr}
 8004caa:	b08b      	sub	sp, #44	; 0x2c
 8004cac:	9002      	str	r0, [sp, #8]
 8004cae:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2209      	movs	r2, #9
 8004cb4:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004cb6:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cb8:	f00d fb2e 	bl	8012318 <memset>
 8004cbc:	4bcd      	ldr	r3, [pc, #820]	; (8004ff4 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004cbe:	4656      	mov	r6, sl
 8004cc0:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cc2:	4bcd      	ldr	r3, [pc, #820]	; (8004ff8 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004cc4:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cc6:	469b      	mov	fp, r3
 8004cc8:	e02d      	b.n	8004d26 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004cca:	2206      	movs	r2, #6
 8004ccc:	49cb      	ldr	r1, [pc, #812]	; (8004ffc <CLI_CommandParser+0x360>)
 8004cce:	0028      	movs	r0, r5
 8004cd0:	f00d fd60 	bl	8012794 <strncmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d057      	beq.n	8004d88 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004cd8:	2f02      	cmp	r7, #2
 8004cda:	d100      	bne.n	8004cde <CLI_CommandParser+0x42>
 8004cdc:	e0d2      	b.n	8004e84 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004cde:	212e      	movs	r1, #46	; 0x2e
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	f00d fd41 	bl	8012768 <strchr>
 8004ce6:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ce8:	d007      	beq.n	8004cfa <CLI_CommandParser+0x5e>
 8004cea:	3803      	subs	r0, #3
 8004cec:	2203      	movs	r2, #3
 8004cee:	4659      	mov	r1, fp
 8004cf0:	f00d fd50 	bl	8012794 <strncmp>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d000      	beq.n	8004cfa <CLI_CommandParser+0x5e>
 8004cf8:	e079      	b.n	8004dee <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004cfa:	2299      	movs	r2, #153	; 0x99
 8004cfc:	0021      	movs	r1, r4
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	0028      	movs	r0, r5
 8004d02:	f008 f9b1 	bl	800d068 <FreeRTOS_CLIProcessCommand>
 8004d06:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d08:	7823      	ldrb	r3, [r4, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d139      	bne.n	8004d82 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d0e:	0020      	movs	r0, r4
 8004d10:	f7fb fa02 	bl	8000118 <strlen>
 8004d14:	2100      	movs	r1, #0
 8004d16:	0002      	movs	r2, r0
 8004d18:	0020      	movs	r0, r4
 8004d1a:	f00d fafd 	bl	8012318 <memset>
	} while(xReturned != pdFALSE);
 8004d1e:	4653      	mov	r3, sl
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d100      	bne.n	8004d26 <CLI_CommandParser+0x8a>
 8004d24:	e1d0      	b.n	80050c8 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004d26:	0028      	movs	r0, r5
 8004d28:	f7ff fdc0 	bl	80048ac <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d2c:	2336      	movs	r3, #54	; 0x36
 8004d2e:	4699      	mov	r9, r3
 8004d30:	4643      	mov	r3, r8
 8004d32:	464a      	mov	r2, r9
 8004d34:	5c9f      	ldrb	r7, [r3, r2]
 8004d36:	2f00      	cmp	r7, #0
 8004d38:	d1c7      	bne.n	8004cca <CLI_CommandParser+0x2e>
 8004d3a:	3a33      	subs	r2, #51	; 0x33
 8004d3c:	49b0      	ldr	r1, [pc, #704]	; (8005000 <CLI_CommandParser+0x364>)
 8004d3e:	0028      	movs	r0, r5
 8004d40:	f00d fd28 	bl	8012794 <strncmp>
 8004d44:	1e07      	subs	r7, r0, #0
 8004d46:	d1ca      	bne.n	8004cde <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d48:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004d4a:	f7ff fdc3 	bl	80048d4 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d000      	beq.n	8004d54 <CLI_CommandParser+0xb8>
 8004d52:	e09f      	b.n	8004e94 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004d54:	2302      	movs	r3, #2
 8004d56:	4642      	mov	r2, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004d5c:	330b      	adds	r3, #11
 8004d5e:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d60:	2e00      	cmp	r6, #0
 8004d62:	d027      	beq.n	8004db4 <CLI_CommandParser+0x118>
 8004d64:	2300      	movs	r3, #0
 8004d66:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d68:	0020      	movs	r0, r4
 8004d6a:	f7fb f9d5 	bl	8000118 <strlen>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	425b      	negs	r3, r3
 8004d72:	b282      	uxth	r2, r0
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	0021      	movs	r1, r4
 8004d78:	3333      	adds	r3, #51	; 0x33
 8004d7a:	9802      	ldr	r0, [sp, #8]
 8004d7c:	f007 ff50 	bl	800cc20 <writePxMutex>
 8004d80:	e7c5      	b.n	8004d0e <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d0c3      	beq.n	8004d0e <CLI_CommandParser+0x72>
 8004d86:	e7ef      	b.n	8004d68 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004d88:	4643      	mov	r3, r8
 8004d8a:	464a      	mov	r2, r9
 8004d8c:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0093      	lsls	r3, r2, #2
 8004d94:	189b      	adds	r3, r3, r2
 8004d96:	4a9b      	ldr	r2, [pc, #620]	; (8005004 <CLI_CommandParser+0x368>)
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004da0:	f004 fdf4 	bl	800998c <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004da4:	2241      	movs	r2, #65	; 0x41
 8004da6:	4998      	ldr	r1, [pc, #608]	; (8005008 <CLI_CommandParser+0x36c>)
 8004da8:	0020      	movs	r0, r4
 8004daa:	f00d faac 	bl	8012306 <memcpy>
 8004dae:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1d5      	bne.n	8004d60 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004db4:	0020      	movs	r0, r4
 8004db6:	f7fb f9af 	bl	8000118 <strlen>
 8004dba:	2100      	movs	r1, #0
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	46b2      	mov	sl, r6
 8004dc2:	f00d faa9 	bl	8012318 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	2100      	movs	r1, #0
 8004dca:	a807      	add	r0, sp, #28
 8004dcc:	f00d faa4 	bl	8012318 <memset>
	if(!recordSnippet && enableOutput)
 8004dd0:	2336      	movs	r3, #54	; 0x36
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	5cd3      	ldrb	r3, [r2, r3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <CLI_CommandParser+0x144>
 8004dda:	4653      	mov	r3, sl
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d16a      	bne.n	8004eb6 <CLI_CommandParser+0x21a>
}
 8004de0:	b00b      	add	sp, #44	; 0x2c
 8004de2:	bc3c      	pop	{r2, r3, r4, r5}
 8004de4:	4690      	mov	r8, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	46a2      	mov	sl, r4
 8004dea:	46ab      	mov	fp, r5
 8004dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004dee:	f00d f82f 	bl	8011e50 <__locale_ctype_ptr>
 8004df2:	787b      	ldrb	r3, [r7, #1]
 8004df4:	18c0      	adds	r0, r0, r3
 8004df6:	7843      	ldrb	r3, [r0, #1]
 8004df8:	075b      	lsls	r3, r3, #29
 8004dfa:	d500      	bpl.n	8004dfe <CLI_CommandParser+0x162>
 8004dfc:	e77d      	b.n	8004cfa <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004dfe:	1b7a      	subs	r2, r7, r5
 8004e00:	0029      	movs	r1, r5
 8004e02:	a807      	add	r0, sp, #28
 8004e04:	f00d fcd7 	bl	80127b6 <strncpy>
				id =GetID(idString);
 8004e08:	a807      	add	r0, sp, #28
 8004e0a:	f7ff fa1d 	bl	8004248 <GetID>
				if(id == myID){
 8004e0e:	4b7f      	ldr	r3, [pc, #508]	; (800500c <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8004e10:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	9305      	str	r3, [sp, #20]
 8004e16:	4298      	cmp	r0, r3
 8004e18:	d057      	beq.n	8004eca <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d100      	bne.n	8004e22 <CLI_CommandParser+0x186>
 8004e20:	e0da      	b.n	8004fd8 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	2b66      	cmp	r3, #102	; 0x66
 8004e26:	d100      	bne.n	8004e2a <CLI_CommandParser+0x18e>
 8004e28:	e0dd      	b.n	8004fe6 <CLI_CommandParser+0x34a>
 8004e2a:	1c7b      	adds	r3, r7, #1
 8004e2c:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	2bff      	cmp	r3, #255	; 0xff
 8004e32:	d100      	bne.n	8004e36 <CLI_CommandParser+0x19a>
 8004e34:	e08b      	b.n	8004f4e <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e36:	466b      	mov	r3, sp
 8004e38:	7b1b      	ldrb	r3, [r3, #12]
 8004e3a:	4699      	mov	r9, r3
 8004e3c:	2bfe      	cmp	r3, #254	; 0xfe
 8004e3e:	d100      	bne.n	8004e42 <CLI_CommandParser+0x1a6>
 8004e40:	e102      	b.n	8005048 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e42:	2206      	movs	r2, #6
 8004e44:	4972      	ldr	r1, [pc, #456]	; (8005010 <CLI_CommandParser+0x374>)
 8004e46:	9804      	ldr	r0, [sp, #16]
 8004e48:	f00d fca4 	bl	8012794 <strncmp>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d144      	bne.n	8004eda <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e50:	4b70      	ldr	r3, [pc, #448]	; (8005014 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e52:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e54:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e56:	2119      	movs	r1, #25
 8004e58:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e5a:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e5c:	f003 f986 	bl	800816c <SendMessageToModule>
						osDelay(100);
 8004e60:	2064      	movs	r0, #100	; 0x64
 8004e62:	f008 f871 	bl	800cf48 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e66:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <CLI_CommandParser+0x37c>)
 8004e68:	4649      	mov	r1, r9
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	4b67      	ldr	r3, [pc, #412]	; (800500c <CLI_CommandParser+0x370>)
 8004e6e:	7818      	ldrb	r0, [r3, #0]
 8004e70:	2300      	movs	r3, #0
 8004e72:	f004 feaf 	bl	8009bd4 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004e76:	4653      	mov	r3, sl
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b60      	cmp	r3, #96	; 0x60
 8004e7c:	d100      	bne.n	8004e80 <CLI_CommandParser+0x1e4>
 8004e7e:	e095      	b.n	8004fac <CLI_CommandParser+0x310>
 8004e80:	7823      	ldrb	r3, [r4, #0]
 8004e82:	e795      	b.n	8004db0 <CLI_CommandParser+0x114>
 8004e84:	0028      	movs	r0, r5
 8004e86:	f7ff fcb9 	bl	80047fc <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d10c      	bne.n	8004ea8 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 8004e8e:	230d      	movs	r3, #13
 8004e90:	7023      	strb	r3, [r4, #0]
 8004e92:	e765      	b.n	8004d60 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e94:	2252      	movs	r2, #82	; 0x52
 8004e96:	4961      	ldr	r1, [pc, #388]	; (800501c <CLI_CommandParser+0x380>)
 8004e98:	0020      	movs	r0, r4
 8004e9a:	f00d fa34 	bl	8012306 <memcpy>
				recordSnippet =0;
 8004e9e:	4643      	mov	r3, r8
 8004ea0:	464a      	mov	r2, r9
 8004ea2:	549f      	strb	r7, [r3, r2]
 8004ea4:	7823      	ldrb	r3, [r4, #0]
 8004ea6:	e783      	b.n	8004db0 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004ea8:	2252      	movs	r2, #82	; 0x52
 8004eaa:	495c      	ldr	r1, [pc, #368]	; (800501c <CLI_CommandParser+0x380>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00d fa2a 	bl	8012306 <memcpy>
 8004eb2:	7823      	ldrb	r3, [r4, #0]
 8004eb4:	e77c      	b.n	8004db0 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	425b      	negs	r3, r3
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2238      	movs	r2, #56	; 0x38
 8004ebe:	3333      	adds	r3, #51	; 0x33
 8004ec0:	4957      	ldr	r1, [pc, #348]	; (8005020 <CLI_CommandParser+0x384>)
 8004ec2:	9802      	ldr	r0, [sp, #8]
 8004ec4:	f007 feac 	bl	800cc20 <writePxMutex>
}
 8004ec8:	e78a      	b.n	8004de0 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004eca:	2299      	movs	r2, #153	; 0x99
 8004ecc:	1c78      	adds	r0, r7, #1
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	0021      	movs	r1, r4
 8004ed2:	f008 f8c9 	bl	800d068 <FreeRTOS_CLIProcessCommand>
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	e716      	b.n	8004d08 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004eda:	0028      	movs	r0, r5
 8004edc:	f7fb f91c 	bl	8000118 <strlen>
 8004ee0:	0007      	movs	r7, r0
 8004ee2:	a807      	add	r0, sp, #28
 8004ee4:	f7fb f918 	bl	8000118 <strlen>
 8004ee8:	4682      	mov	sl, r0
 8004eea:	1e7a      	subs	r2, r7, #1
 8004eec:	1a12      	subs	r2, r2, r0
 8004eee:	9904      	ldr	r1, [sp, #16]
 8004ef0:	484c      	ldr	r0, [pc, #304]	; (8005024 <CLI_CommandParser+0x388>)
 8004ef2:	f00d fc60 	bl	80127b6 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004ef6:	0028      	movs	r0, r5
 8004ef8:	f7fb f90e 	bl	8000118 <strlen>
 8004efc:	4653      	mov	r3, sl
 8004efe:	3801      	subs	r0, #1
 8004f00:	1ac2      	subs	r2, r0, r3
 8004f02:	b292      	uxth	r2, r2
 8004f04:	2117      	movs	r1, #23
 8004f06:	4648      	mov	r0, r9
 8004f08:	f003 f930 	bl	800816c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004f0c:	9a03      	ldr	r2, [sp, #12]
 8004f0e:	4946      	ldr	r1, [pc, #280]	; (8005028 <CLI_CommandParser+0x38c>)
 8004f10:	0020      	movs	r0, r4
 8004f12:	f00d fbfb 	bl	801270c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004f16:	7823      	ldrb	r3, [r4, #0]
 8004f18:	0020      	movs	r0, r4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <CLI_CommandParser+0x29e>
 8004f1e:	f7fb f8fb 	bl	8000118 <strlen>
 8004f22:	0002      	movs	r2, r0
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	d00b      	beq.n	8004f40 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004f28:	2301      	movs	r3, #1
 8004f2a:	b282      	uxth	r2, r0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	0021      	movs	r1, r4
 8004f30:	3331      	adds	r3, #49	; 0x31
 8004f32:	9802      	ldr	r0, [sp, #8]
 8004f34:	f007 fe74 	bl	800cc20 <writePxMutex>
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f7fb f8ed 	bl	8000118 <strlen>
 8004f3e:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f40:	2100      	movs	r1, #0
 8004f42:	0020      	movs	r0, r4
 8004f44:	f00d f9e8 	bl	8012318 <memset>
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <CLI_CommandParser+0x378>)
 8004f4a:	469a      	mov	sl, r3
 8004f4c:	e793      	b.n	8004e76 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f4e:	221a      	movs	r2, #26
 8004f50:	2100      	movs	r1, #0
 8004f52:	4836      	ldr	r0, [pc, #216]	; (800502c <CLI_CommandParser+0x390>)
 8004f54:	f00d f9e0 	bl	8012318 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f58:	0028      	movs	r0, r5
 8004f5a:	f7fb f8dd 	bl	8000118 <strlen>
 8004f5e:	0007      	movs	r7, r0
 8004f60:	a807      	add	r0, sp, #28
 8004f62:	f7fb f8d9 	bl	8000118 <strlen>
 8004f66:	4681      	mov	r9, r0
 8004f68:	3f01      	subs	r7, #1
 8004f6a:	1a3a      	subs	r2, r7, r0
 8004f6c:	9f04      	ldr	r7, [sp, #16]
 8004f6e:	482d      	ldr	r0, [pc, #180]	; (8005024 <CLI_CommandParser+0x388>)
 8004f70:	0039      	movs	r1, r7
 8004f72:	f00d fc20 	bl	80127b6 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f76:	0028      	movs	r0, r5
 8004f78:	f7fb f8ce 	bl	8000118 <strlen>
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	1ac3      	subs	r3, r0, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2217      	movs	r2, #23
 8004f84:	21ff      	movs	r1, #255	; 0xff
 8004f86:	9805      	ldr	r0, [sp, #20]
 8004f88:	f003 f8aa 	bl	80080e0 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f8c:	2299      	movs	r2, #153	; 0x99
 8004f8e:	0021      	movs	r1, r4
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	0038      	movs	r0, r7
 8004f94:	f008 f868 	bl	800d068 <FreeRTOS_CLIProcessCommand>
 8004f98:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f9a:	0020      	movs	r0, r4
 8004f9c:	f7fb f8bc 	bl	8000118 <strlen>
 8004fa0:	221d      	movs	r2, #29
 8004fa2:	1820      	adds	r0, r4, r0
 8004fa4:	4922      	ldr	r1, [pc, #136]	; (8005030 <CLI_CommandParser+0x394>)
 8004fa6:	f00d f9ae 	bl	8012306 <memcpy>
 8004faa:	e6ad      	b.n	8004d08 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004fac:	21fa      	movs	r1, #250	; 0xfa
 8004fae:	2001      	movs	r0, #1
 8004fb0:	0089      	lsls	r1, r1, #2
 8004fb2:	f009 fa81 	bl	800e4b8 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <CLI_CommandParser+0x398>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d100      	bne.n	8004fc0 <CLI_CommandParser+0x324>
 8004fbe:	e75f      	b.n	8004e80 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc2:	491e      	ldr	r1, [pc, #120]	; (800503c <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 8004fc4:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc6:	0020      	movs	r0, r4
							++timedoutMsg;
 8004fc8:	3301      	adds	r3, #1
 8004fca:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fcc:	9b03      	ldr	r3, [sp, #12]
 8004fce:	0022      	movs	r2, r4
 8004fd0:	f00d fb9c 	bl	801270c <sprintf>
 8004fd4:	7823      	ldrb	r3, [r4, #0]
 8004fd6:	e6eb      	b.n	8004db0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004fd8:	2227      	movs	r2, #39	; 0x27
 8004fda:	4919      	ldr	r1, [pc, #100]	; (8005040 <CLI_CommandParser+0x3a4>)
 8004fdc:	0020      	movs	r0, r4
 8004fde:	f00d f992 	bl	8012306 <memcpy>
 8004fe2:	7823      	ldrb	r3, [r4, #0]
 8004fe4:	e6e4      	b.n	8004db0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004fe6:	2225      	movs	r2, #37	; 0x25
 8004fe8:	4916      	ldr	r1, [pc, #88]	; (8005044 <CLI_CommandParser+0x3a8>)
 8004fea:	0020      	movs	r0, r4
 8004fec:	f00d f98b 	bl	8012306 <memcpy>
 8004ff0:	7823      	ldrb	r3, [r4, #0]
 8004ff2:	e6dd      	b.n	8004db0 <CLI_CommandParser+0x114>
 8004ff4:	2000182c 	.word	0x2000182c
 8004ff8:	080179b8 	.word	0x080179b8
 8004ffc:	0801796c 	.word	0x0801796c
 8005000:	08017914 	.word	0x08017914
 8005004:	20006a9c 	.word	0x20006a9c
 8005008:	08017974 	.word	0x08017974
 800500c:	20000a98 	.word	0x20000a98
 8005010:	08017a58 	.word	0x08017a58
 8005014:	20006a00 	.word	0x20006a00
 8005018:	20000c28 	.word	0x20000c28
 800501c:	08017918 	.word	0x08017918
 8005020:	08017aa4 	.word	0x08017aa4
 8005024:	20000b3c 	.word	0x20000b3c
 8005028:	08017a60 	.word	0x08017a60
 800502c:	20000de0 	.word	0x20000de0
 8005030:	08017a0c 	.word	0x08017a0c
 8005034:	20000c3c 	.word	0x20000c3c
 8005038:	200021cc 	.word	0x200021cc
 800503c:	08017a84 	.word	0x08017a84
 8005040:	080179bc 	.word	0x080179bc
 8005044:	080179e4 	.word	0x080179e4
					group =id >> 8;
 8005048:	4640      	mov	r0, r8
 800504a:	2237      	movs	r2, #55	; 0x37
 800504c:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800504e:	2100      	movs	r1, #0
					group =id >> 8;
 8005050:	121f      	asrs	r7, r3, #8
 8005052:	b2fb      	uxtb	r3, r7
 8005054:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005056:	3a1d      	subs	r2, #29
 8005058:	481c      	ldr	r0, [pc, #112]	; (80050cc <CLI_CommandParser+0x430>)
					group =id >> 8;
 800505a:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800505c:	f00d f95c 	bl	8012318 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005060:	0028      	movs	r0, r5
 8005062:	f7fb f859 	bl	8000118 <strlen>
 8005066:	0007      	movs	r7, r0
 8005068:	a807      	add	r0, sp, #28
 800506a:	f7fb f855 	bl	8000118 <strlen>
 800506e:	4681      	mov	r9, r0
 8005070:	3f01      	subs	r7, #1
 8005072:	1a3a      	subs	r2, r7, r0
 8005074:	9904      	ldr	r1, [sp, #16]
 8005076:	4816      	ldr	r0, [pc, #88]	; (80050d0 <CLI_CommandParser+0x434>)
 8005078:	f00d fb9d 	bl	80127b6 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800507c:	0028      	movs	r0, r5
 800507e:	f7fb f84b 	bl	8000118 <strlen>
 8005082:	464f      	mov	r7, r9
 8005084:	1bc3      	subs	r3, r0, r7
 8005086:	b29b      	uxth	r3, r3
 8005088:	2217      	movs	r2, #23
 800508a:	9903      	ldr	r1, [sp, #12]
 800508c:	9805      	ldr	r0, [sp, #20]
 800508e:	f003 f827 	bl	80080e0 <BroadcastMessage>
					if(InGroup(myID,group))
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <CLI_CommandParser+0x438>)
 8005094:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <CLI_CommandParser+0x43c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	4641      	mov	r1, r8
 800509a:	3b01      	subs	r3, #1
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	5a9b      	ldrh	r3, [r3, r2]
 80050a0:	2237      	movs	r2, #55	; 0x37
 80050a2:	5c8a      	ldrb	r2, [r1, r2]
 80050a4:	4113      	asrs	r3, r2
 80050a6:	07db      	lsls	r3, r3, #31
 80050a8:	d406      	bmi.n	80050b8 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80050aa:	ab07      	add	r3, sp, #28
 80050ac:	0022      	movs	r2, r4
 80050ae:	490b      	ldr	r1, [pc, #44]	; (80050dc <CLI_CommandParser+0x440>)
 80050b0:	0020      	movs	r0, r4
 80050b2:	f00d fb2b 	bl	801270c <sprintf>
 80050b6:	e627      	b.n	8004d08 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050b8:	2299      	movs	r2, #153	; 0x99
 80050ba:	0021      	movs	r1, r4
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	9804      	ldr	r0, [sp, #16]
 80050c0:	f007 ffd2 	bl	800d068 <FreeRTOS_CLIProcessCommand>
 80050c4:	4682      	mov	sl, r0
 80050c6:	e7f0      	b.n	80050aa <CLI_CommandParser+0x40e>
 80050c8:	46b2      	mov	sl, r6
 80050ca:	e67c      	b.n	8004dc6 <CLI_CommandParser+0x12a>
 80050cc:	20000de0 	.word	0x20000de0
 80050d0:	20000b3c 	.word	0x20000b3c
 80050d4:	20000a98 	.word	0x20000a98
 80050d8:	20000a9c 	.word	0x20000a9c
 80050dc:	08017a2c 	.word	0x08017a2c

080050e0 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	46de      	mov	lr, fp
 80050e4:	4645      	mov	r5, r8
 80050e6:	4657      	mov	r7, sl
 80050e8:	464e      	mov	r6, r9
 80050ea:	b5e0      	push	{r5, r6, r7, lr}
 80050ec:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80050ee:	ab02      	add	r3, sp, #8
 80050f0:	469c      	mov	ip, r3
 80050f2:	250f      	movs	r5, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050f4:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80050f6:	2300      	movs	r3, #0
 80050f8:	4465      	add	r5, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050fa:	4249      	negs	r1, r1
 80050fc:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 80050fe:	702b      	strb	r3, [r5, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005100:	f009 f9da 	bl	800e4b8 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005104:	f008 f828 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005108:	23e1      	movs	r3, #225	; 0xe1
 800510a:	4a50      	ldr	r2, [pc, #320]	; (800524c <prvCLITask+0x16c>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800510c:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800510e:	6892      	ldr	r2, [r2, #8]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	429a      	cmp	r2, r3
 8005114:	d100      	bne.n	8005118 <prvCLITask+0x38>
 8005116:	e094      	b.n	8005242 <prvCLITask+0x162>
 8005118:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <prvCLITask+0x170>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800511a:	2401      	movs	r4, #1
 800511c:	001e      	movs	r6, r3
 800511e:	7819      	ldrb	r1, [r3, #0]
			if(port != PcPort)
 8005120:	428c      	cmp	r4, r1
 8005122:	d005      	beq.n	8005130 <prvCLITask+0x50>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005124:	21e1      	movs	r1, #225	; 0xe1
 8005126:	0020      	movs	r0, r4
 8005128:	0309      	lsls	r1, r1, #12
 800512a:	f007 fdcb 	bl	800ccc4 <UpdateBaudrate>
 800512e:	7831      	ldrb	r1, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005130:	3401      	adds	r4, #1
 8005132:	b2e4      	uxtb	r4, r4
 8005134:	2c07      	cmp	r4, #7
 8005136:	d1f3      	bne.n	8005120 <prvCLITask+0x40>
 8005138:	46b1      	mov	r9, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800513a:	4846      	ldr	r0, [pc, #280]	; (8005254 <prvCLITask+0x174>)
 800513c:	4b46      	ldr	r3, [pc, #280]	; (8005258 <prvCLITask+0x178>)
 800513e:	0004      	movs	r4, r0
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	3438      	adds	r4, #56	; 0x38
 8005144:	0053      	lsls	r3, r2, #1
 8005146:	189b      	adds	r3, r3, r2
 8005148:	4a44      	ldr	r2, [pc, #272]	; (800525c <prvCLITask+0x17c>)
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	189b      	adds	r3, r3, r2
 800514e:	4a44      	ldr	r2, [pc, #272]	; (8005260 <prvCLITask+0x180>)
 8005150:	4683      	mov	fp, r0
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	0020      	movs	r0, r4
 8005156:	9100      	str	r1, [sp, #0]
 8005158:	4942      	ldr	r1, [pc, #264]	; (8005264 <prvCLITask+0x184>)
 800515a:	f00d fad7 	bl	801270c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800515e:	464b      	mov	r3, r9
 8005160:	22a4      	movs	r2, #164	; 0xa4
 8005162:	4941      	ldr	r1, [pc, #260]	; (8005268 <prvCLITask+0x188>)
 8005164:	0092      	lsls	r2, r2, #2
 8005166:	7818      	ldrb	r0, [r3, #0]
 8005168:	230a      	movs	r3, #10
 800516a:	f007 fd8b 	bl	800cc84 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800516e:	0020      	movs	r0, r4
 8005170:	f7fa ffd2 	bl	8000118 <strlen>
 8005174:	464b      	mov	r3, r9
 8005176:	b282      	uxth	r2, r0
 8005178:	0021      	movs	r1, r4
 800517a:	7818      	ldrb	r0, [r3, #0]
 800517c:	230a      	movs	r3, #10
 800517e:	f007 fd81 	bl	800cc84 <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005182:	2214      	movs	r2, #20
 8005184:	4694      	mov	ip, r2
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <prvCLITask+0x18c>)
	int8_t cInputIndex =0, *pcOutputString;
 8005188:	2600      	movs	r6, #0
 800518a:	4698      	mov	r8, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800518c:	4b38      	ldr	r3, [pc, #224]	; (8005270 <prvCLITask+0x190>)
 800518e:	4c39      	ldr	r4, [pc, #228]	; (8005274 <prvCLITask+0x194>)
 8005190:	4463      	add	r3, ip
 8005192:	469a      	mov	sl, r3
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005194:	2360      	movs	r3, #96	; 0x60
 8005196:	469c      	mov	ip, r3
			Rx_Data[PcPort - 1] = 0;
 8005198:	2700      	movs	r7, #0
				strcpy((char* )cLastInputString,(char* )cInputString);
 800519a:	44e3      	add	fp, ip
 800519c:	e001      	b.n	80051a2 <prvCLITask+0xc2>
		taskYIELD();
 800519e:	f009 fc23 	bl	800e9e8 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 80051a2:	7823      	ldrb	r3, [r4, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d1fa      	bne.n	800519e <prvCLITask+0xbe>
			cRxedChar = Rx_Data[PcPort - 1];
 80051a8:	464b      	mov	r3, r9
 80051aa:	4642      	mov	r2, r8
 80051ac:	7818      	ldrb	r0, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051ae:	0029      	movs	r1, r5
			cRxedChar = Rx_Data[PcPort - 1];
 80051b0:	1e43      	subs	r3, r0, #1
 80051b2:	5cd2      	ldrb	r2, [r2, r3]
			Read_In_CLI_Task_Flag = 0;
 80051b4:	7027      	strb	r7, [r4, #0]
			cRxedChar = Rx_Data[PcPort - 1];
 80051b6:	702a      	strb	r2, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 80051b8:	4642      	mov	r2, r8
 80051ba:	54d7      	strb	r7, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051bc:	230a      	movs	r3, #10
 80051be:	2201      	movs	r2, #1
 80051c0:	f007 fd60 	bl	800cc84 <writePxITMutex>
			if(cRxedChar == '\r'){
 80051c4:	782b      	ldrb	r3, [r5, #0]
 80051c6:	2b0d      	cmp	r3, #13
 80051c8:	d01b      	beq.n	8005202 <prvCLITask+0x122>
				if(cRxedChar == '\n'){
 80051ca:	2b0a      	cmp	r3, #10
 80051cc:	d0e7      	beq.n	800519e <prvCLITask+0xbe>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d00d      	beq.n	80051ee <prvCLITask+0x10e>
 80051d2:	2b7f      	cmp	r3, #127	; 0x7f
 80051d4:	d00b      	beq.n	80051ee <prvCLITask+0x10e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051d6:	001a      	movs	r2, r3
 80051d8:	3a20      	subs	r2, #32
 80051da:	2a5e      	cmp	r2, #94	; 0x5e
 80051dc:	d8df      	bhi.n	800519e <prvCLITask+0xbe>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051de:	2e31      	cmp	r6, #49	; 0x31
 80051e0:	dcdd      	bgt.n	800519e <prvCLITask+0xbe>
							cInputString[cInputIndex] =cRxedChar;
 80051e2:	4a23      	ldr	r2, [pc, #140]	; (8005270 <prvCLITask+0x190>)
 80051e4:	1992      	adds	r2, r2, r6
							cInputIndex++;
 80051e6:	3601      	adds	r6, #1
							cInputString[cInputIndex] =cRxedChar;
 80051e8:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 80051ea:	b276      	sxtb	r6, r6
 80051ec:	e7d7      	b.n	800519e <prvCLITask+0xbe>
					if(cInputIndex > 0){
 80051ee:	2e00      	cmp	r6, #0
 80051f0:	d0d5      	beq.n	800519e <prvCLITask+0xbe>
						cInputString[cInputIndex] ='\0';
 80051f2:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <prvCLITask+0x190>)
						cInputIndex--;
 80051f4:	3e01      	subs	r6, #1
						cInputString[cInputIndex] ='\0';
 80051f6:	4694      	mov	ip, r2
						cInputIndex--;
 80051f8:	b2f3      	uxtb	r3, r6
 80051fa:	b25e      	sxtb	r6, r3
						cInputString[cInputIndex] ='\0';
 80051fc:	4463      	add	r3, ip
 80051fe:	751f      	strb	r7, [r3, #20]
 8005200:	e7cd      	b.n	800519e <prvCLITask+0xbe>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005202:	464b      	mov	r3, r9
 8005204:	2202      	movs	r2, #2
 8005206:	7818      	ldrb	r0, [r3, #0]
 8005208:	491b      	ldr	r1, [pc, #108]	; (8005278 <prvCLITask+0x198>)
 800520a:	230a      	movs	r3, #10
 800520c:	f007 fd3a 	bl	800cc84 <writePxITMutex>
				if(cInputIndex == 0){
 8005210:	2e00      	cmp	r6, #0
 8005212:	d011      	beq.n	8005238 <prvCLITask+0x158>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005214:	464b      	mov	r3, r9
 8005216:	4652      	mov	r2, sl
 8005218:	7818      	ldrb	r0, [r3, #0]
 800521a:	2101      	movs	r1, #1
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	f7ff fd3d 	bl	8004c9c <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005222:	4651      	mov	r1, sl
 8005224:	4658      	mov	r0, fp
 8005226:	f00d faad 	bl	8012784 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800522a:	2232      	movs	r2, #50	; 0x32
 800522c:	2100      	movs	r1, #0
 800522e:	4650      	mov	r0, sl
 8005230:	f00d f872 	bl	8012318 <memset>
				cInputIndex =0;
 8005234:	2600      	movs	r6, #0
 8005236:	e7b2      	b.n	800519e <prvCLITask+0xbe>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8005238:	4659      	mov	r1, fp
 800523a:	4650      	mov	r0, sl
 800523c:	f00d faa2 	bl	8012784 <strcpy>
 8005240:	e7e8      	b.n	8005214 <prvCLITask+0x134>
 8005242:	4b03      	ldr	r3, [pc, #12]	; (8005250 <prvCLITask+0x170>)
 8005244:	4699      	mov	r9, r3
 8005246:	7819      	ldrb	r1, [r3, #0]
 8005248:	e777      	b.n	800513a <prvCLITask+0x5a>
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	20006a80 	.word	0x20006a80
 8005250:	20000c28 	.word	0x20000c28
 8005254:	2000182c 	.word	0x2000182c
 8005258:	20000030 	.word	0x20000030
 800525c:	08016b5c 	.word	0x08016b5c
 8005260:	20000a98 	.word	0x20000a98
 8005264:	08017ae0 	.word	0x08017ae0
 8005268:	08017b0c 	.word	0x08017b0c
 800526c:	20001eb8 	.word	0x20001eb8
 8005270:	200018ac 	.word	0x200018ac
 8005274:	2000182a 	.word	0x2000182a
 8005278:	080192fc 	.word	0x080192fc

0800527c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005280:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	3a01      	subs	r2, #1
 8005286:	0093      	lsls	r3, r2, #2
 8005288:	189b      	adds	r3, r3, r2
 800528a:	4a18      	ldr	r2, [pc, #96]	; (80052ec <ParseSnippetCommand+0x70>)
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	18d3      	adds	r3, r2, r3
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d018      	beq.n	80052c8 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005296:	4e16      	ldr	r6, [pc, #88]	; (80052f0 <ParseSnippetCommand+0x74>)
 8005298:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 800529a:	2d00      	cmp	r5, #0
 800529c:	d016      	beq.n	80052cc <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800529e:	782b      	ldrb	r3, [r5, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80052a4:	2113      	movs	r1, #19
 80052a6:	0028      	movs	r0, r5
 80052a8:	f00d fa5e 	bl	8012768 <strchr>
 80052ac:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80052ae:	d010      	beq.n	80052d2 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80052b0:	1b42      	subs	r2, r0, r5
 80052b2:	0029      	movs	r1, r5
 80052b4:	0020      	movs	r0, r4
 80052b6:	f00d fa7e 	bl	80127b6 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80052ba:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80052bc:	3701      	adds	r7, #1
 80052be:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80052c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80052c2:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80052c4:	2000      	movs	r0, #0
 80052c6:	e7fb      	b.n	80052c0 <ParseSnippetCommand+0x44>
		return false;
 80052c8:	2000      	movs	r0, #0
 80052ca:	e7f9      	b.n	80052c0 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80052cc:	64b0      	str	r0, [r6, #72]	; 0x48
 80052ce:	0005      	movs	r5, r0
 80052d0:	e7e5      	b.n	800529e <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80052d2:	0029      	movs	r1, r5
 80052d4:	0020      	movs	r0, r4
 80052d6:	f00d fa55 	bl	8012784 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80052da:	0020      	movs	r0, r4
 80052dc:	f7fa ff1c 	bl	8000118 <strlen>
 80052e0:	182d      	adds	r5, r5, r0
 80052e2:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 80052e4:	2001      	movs	r0, #1
 80052e6:	e7eb      	b.n	80052c0 <ParseSnippetCommand+0x44>
 80052e8:	2000182c 	.word	0x2000182c
 80052ec:	20006a9c 	.word	0x20006a9c
 80052f0:	200018ac 	.word	0x200018ac

080052f4 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80052f4:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 80052f6:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 80052f8:	1818      	adds	r0, r3, r0
 80052fa:	492e      	ldr	r1, [pc, #184]	; (80053b4 <CheckSnippetCondition+0xc0>)
 80052fc:	0080      	lsls	r0, r0, #2
 80052fe:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005300:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005302:	2b01      	cmp	r3, #1
 8005304:	d020      	beq.n	8005348 <CheckSnippetCondition+0x54>
 8005306:	2b03      	cmp	r3, #3
 8005308:	d11b      	bne.n	8005342 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800530a:	180c      	adds	r4, r1, r0
 800530c:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800530e:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005310:	3a01      	subs	r2, #1
 8005312:	0053      	lsls	r3, r2, #1
 8005314:	189b      	adds	r3, r3, r2
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <CheckSnippetCondition+0xc4>)
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800531c:	1841      	adds	r1, r0, r1
 800531e:	2204      	movs	r2, #4
 8005320:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005322:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005324:	f00c ffef 	bl	8012306 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005328:	7863      	ldrb	r3, [r4, #1]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d809      	bhi.n	8005342 <CheckSnippetCondition+0x4e>
 800532e:	4a23      	ldr	r2, [pc, #140]	; (80053bc <CheckSnippetCondition+0xc8>)
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	58d3      	ldr	r3, [r2, r3]
 8005334:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005336:	1c29      	adds	r1, r5, #0
 8005338:	9801      	ldr	r0, [sp, #4]
 800533a:	f7fb f8e3 	bl	8000504 <__aeabi_fcmpgt>
 800533e:	2800      	cmp	r0, #0
 8005340:	d114      	bne.n	800536c <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005342:	2000      	movs	r0, #0
}
 8005344:	b003      	add	sp, #12
 8005346:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005348:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800534a:	7882      	ldrb	r2, [r0, #2]
 800534c:	78c0      	ldrb	r0, [r0, #3]
 800534e:	00d3      	lsls	r3, r2, #3
 8005350:	189b      	adds	r3, r3, r2
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <CheckSnippetCondition+0xcc>)
 8005354:	5c9b      	ldrb	r3, [r3, r2]
 8005356:	1a18      	subs	r0, r3, r0
 8005358:	4243      	negs	r3, r0
 800535a:	4158      	adcs	r0, r3
 800535c:	b2c0      	uxtb	r0, r0
 800535e:	e7f1      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005360:	1c29      	adds	r1, r5, #0
 8005362:	9801      	ldr	r0, [sp, #4]
 8005364:	f7fb f8b4 	bl	80004d0 <__aeabi_fcmpeq>
 8005368:	2800      	cmp	r0, #0
 800536a:	d1ea      	bne.n	8005342 <CheckSnippetCondition+0x4e>
 800536c:	2100      	movs	r1, #0
 800536e:	1c28      	adds	r0, r5, #0
 8005370:	f7fb f8ae 	bl	80004d0 <__aeabi_fcmpeq>
 8005374:	4243      	negs	r3, r0
 8005376:	4158      	adcs	r0, r3
 8005378:	e7e4      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 800537a:	1c29      	adds	r1, r5, #0
 800537c:	9801      	ldr	r0, [sp, #4]
 800537e:	f7fb f8a7 	bl	80004d0 <__aeabi_fcmpeq>
 8005382:	1e43      	subs	r3, r0, #1
 8005384:	4198      	sbcs	r0, r3
 8005386:	e7dd      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 8005388:	1c29      	adds	r1, r5, #0
 800538a:	9801      	ldr	r0, [sp, #4]
 800538c:	f7fb f8a6 	bl	80004dc <__aeabi_fcmplt>
 8005390:	1e43      	subs	r3, r0, #1
 8005392:	4198      	sbcs	r0, r3
 8005394:	e7d6      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 8005396:	1c29      	adds	r1, r5, #0
 8005398:	9801      	ldr	r0, [sp, #4]
 800539a:	f7fb f8a9 	bl	80004f0 <__aeabi_fcmple>
 800539e:	1e43      	subs	r3, r0, #1
 80053a0:	4198      	sbcs	r0, r3
 80053a2:	e7cf      	b.n	8005344 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80053a4:	1c29      	adds	r1, r5, #0
 80053a6:	9801      	ldr	r0, [sp, #4]
 80053a8:	f7fb f8b6 	bl	8000518 <__aeabi_fcmpge>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d1dd      	bne.n	800536c <CheckSnippetCondition+0x78>
 80053b0:	e7c7      	b.n	8005342 <CheckSnippetCondition+0x4e>
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	20006a9c 	.word	0x20006a9c
 80053b8:	20000094 	.word	0x20000094
 80053bc:	08016c10 	.word	0x08016c10
 80053c0:	200025c8 	.word	0x200025c8

080053c4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	46de      	mov	lr, fp
 80053c8:	464e      	mov	r6, r9
 80053ca:	4645      	mov	r5, r8
 80053cc:	4657      	mov	r7, sl
 80053ce:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053d0:	f007 fec2 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d4:	4b23      	ldr	r3, [pc, #140]	; (8005464 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053d6:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d8:	4698      	mov	r8, r3
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d039      	beq.n	8005454 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <ExecuteSnippet+0xa4>)
 80053e2:	4f22      	ldr	r7, [pc, #136]	; (800546c <ExecuteSnippet+0xa8>)
 80053e4:	469b      	mov	fp, r3
 80053e6:	2320      	movs	r3, #32
 80053e8:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <ExecuteSnippet+0xac>)
 80053ec:	4d21      	ldr	r5, [pc, #132]	; (8005474 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 80053ee:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053f0:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053f2:	4699      	mov	r9, r3
 80053f4:	e006      	b.n	8005404 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 80053f6:	4643      	mov	r3, r8
 80053f8:	3401      	adds	r4, #1
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b2a4      	uxth	r4, r4
 80053fe:	3514      	adds	r5, #20
 8005400:	42a3      	cmp	r3, r4
 8005402:	d927      	bls.n	8005454 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005404:	7c2b      	ldrb	r3, [r5, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f5      	beq.n	80053f6 <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800540a:	b2e0      	uxtb	r0, r4
 800540c:	f7ff ff72 	bl	80052f4 <CheckSnippetCondition>
 8005410:	2800      	cmp	r0, #0
 8005412:	d0f0      	beq.n	80053f6 <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005414:	465b      	mov	r3, fp
 8005416:	4652      	mov	r2, sl
 8005418:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800541a:	e00e      	b.n	800543a <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800541c:	464b      	mov	r3, r9
 800541e:	003a      	movs	r2, r7
 8005420:	7818      	ldrb	r0, [r3, #0]
 8005422:	2100      	movs	r1, #0
 8005424:	0033      	movs	r3, r6
 8005426:	f7ff fc39 	bl	8004c9c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800542a:	0030      	movs	r0, r6
 800542c:	f7fa fe74 	bl	8000118 <strlen>
 8005430:	2100      	movs	r1, #0
 8005432:	0002      	movs	r2, r0
 8005434:	0030      	movs	r0, r6
 8005436:	f00c ff6f 	bl	8012318 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800543a:	0039      	movs	r1, r7
 800543c:	68e8      	ldr	r0, [r5, #12]
 800543e:	f7ff ff1d 	bl	800527c <ParseSnippetCommand>
 8005442:	2800      	cmp	r0, #0
 8005444:	d1ea      	bne.n	800541c <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005446:	4643      	mov	r3, r8
 8005448:	3401      	adds	r4, #1
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b2a4      	uxth	r4, r4
 800544e:	3514      	adds	r5, #20
 8005450:	42a3      	cmp	r3, r4
 8005452:	d8d7      	bhi.n	8005404 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 8005454:	2000      	movs	r0, #0
 8005456:	bc3c      	pop	{r2, r3, r4, r5}
 8005458:	4690      	mov	r8, r2
 800545a:	4699      	mov	r9, r3
 800545c:	46a2      	mov	sl, r4
 800545e:	46ab      	mov	fp, r5
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	2000182c 	.word	0x2000182c
 8005468:	20006a00 	.word	0x20006a00
 800546c:	200018ac 	.word	0x200018ac
 8005470:	20000c28 	.word	0x20000c28
 8005474:	20006a9c 	.word	0x20006a9c

08005478 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005478:	2000      	movs	r0, #0
 800547a:	4770      	bx	lr

0800547c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800547c:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800547e:	4b03      	ldr	r3, [pc, #12]	; (800548c <flashsizeCommand+0x10>)
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <flashsizeCommand+0x14>)
 8005482:	881a      	ldrh	r2, [r3, #0]
 8005484:	f00d f942 	bl	801270c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005488:	2000      	movs	r0, #0
 800548a:	bd10      	pop	{r4, pc}
 800548c:	1ffff7cc 	.word	0x1ffff7cc
 8005490:	08017da0 	.word	0x08017da0

08005494 <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005494:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005496:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005498:	0004      	movs	r4, r0
 800549a:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800549c:	a901      	add	r1, sp, #4
 800549e:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054a4:	f006 f8c0 	bl	800b628 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054a8:	4669      	mov	r1, sp
 80054aa:	0020      	movs	r0, r4
 80054ac:	f00d f96a 	bl	8012784 <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	f7fd fb37 	bl	8002b24 <__aeabi_f2d>
 80054b6:	0002      	movs	r2, r0
 80054b8:	000b      	movs	r3, r1
 80054ba:	0020      	movs	r0, r4
 80054bc:	4902      	ldr	r1, [pc, #8]	; (80054c8 <ReadVrefCommand+0x34>)
 80054be:	f00d f925 	bl	801270c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80054c2:	2000      	movs	r0, #0
 80054c4:	b002      	add	sp, #8
 80054c6:	bd10      	pop	{r4, pc}
 80054c8:	08017dc0 	.word	0x08017dc0

080054cc <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054cc:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054ce:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054d0:	0004      	movs	r4, r0
 80054d2:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054d4:	a901      	add	r1, sp, #4
 80054d6:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054dc:	f006 f8a4 	bl	800b628 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054e0:	4669      	mov	r1, sp
 80054e2:	0020      	movs	r0, r4
 80054e4:	f00d f94e 	bl	8012784 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80054e8:	9800      	ldr	r0, [sp, #0]
 80054ea:	f7fd fb1b 	bl	8002b24 <__aeabi_f2d>
 80054ee:	0002      	movs	r2, r0
 80054f0:	000b      	movs	r3, r1
 80054f2:	0020      	movs	r0, r4
 80054f4:	4902      	ldr	r1, [pc, #8]	; (8005500 <ReadTempCommand+0x34>)
 80054f6:	f00d f909 	bl	801270c <sprintf>
}
 80054fa:	2000      	movs	r0, #0
 80054fc:	b002      	add	sp, #8
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	08017de8 	.word	0x08017de8

08005504 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005504:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005508:	0014      	movs	r4, r2
 800550a:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 800550c:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800550e:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005510:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005512:	aa01      	add	r2, sp, #4
 8005514:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005516:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005518:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 800551a:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800551c:	f007 fe20 	bl	800d160 <FreeRTOS_CLIGetParameter>
 8005520:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005522:	aa02      	add	r2, sp, #8
 8005524:	2102      	movs	r1, #2
 8005526:	0020      	movs	r0, r4
 8005528:	f007 fe1a 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800552c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800552e:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005530:	3b32      	subs	r3, #50	; 0x32
 8005532:	2b01      	cmp	r3, #1
 8005534:	d907      	bls.n	8005546 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005536:	2215      	movs	r2, #21
 8005538:	4919      	ldr	r1, [pc, #100]	; (80055a0 <ADCReadCommand+0x9c>)
 800553a:	0030      	movs	r0, r6
 800553c:	f00c fee3 	bl	8012306 <memcpy>
}
 8005540:	2000      	movs	r0, #0
 8005542:	b005      	add	sp, #20
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005546:	0028      	movs	r0, r5
 8005548:	f00c fc1d 	bl	8011d86 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800554c:	4d15      	ldr	r5, [pc, #84]	; (80055a4 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800554e:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005550:	0029      	movs	r1, r5
 8005552:	0038      	movs	r0, r7
 8005554:	f7fa fdd6 	bl	8000104 <strcmp>
 8005558:	2800      	cmp	r0, #0
 800555a:	d005      	beq.n	8005568 <ADCReadCommand+0x64>
 800555c:	4912      	ldr	r1, [pc, #72]	; (80055a8 <ADCReadCommand+0xa4>)
 800555e:	0038      	movs	r0, r7
 8005560:	f7fa fdd0 	bl	8000104 <strcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	d115      	bne.n	8005594 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005568:	0029      	movs	r1, r5
 800556a:	0020      	movs	r0, r4
 800556c:	f006 fa2e 	bl	800b9cc <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005570:	aa03      	add	r2, sp, #12
 8005572:	0029      	movs	r1, r5
 8005574:	0020      	movs	r0, r4
 8005576:	f006 fa81 	bl	800ba7c <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800557a:	a903      	add	r1, sp, #12
 800557c:	0030      	movs	r0, r6
 800557e:	f00d f901 	bl	8012784 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005582:	9803      	ldr	r0, [sp, #12]
 8005584:	f7fb f81c 	bl	80005c0 <__aeabi_f2uiz>
 8005588:	4908      	ldr	r1, [pc, #32]	; (80055ac <ADCReadCommand+0xa8>)
 800558a:	b282      	uxth	r2, r0
 800558c:	0030      	movs	r0, r6
 800558e:	f00d f8bd 	bl	801270c <sprintf>
 8005592:	e7d5      	b.n	8005540 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005594:	2212      	movs	r2, #18
 8005596:	4906      	ldr	r1, [pc, #24]	; (80055b0 <ADCReadCommand+0xac>)
 8005598:	0030      	movs	r0, r6
 800559a:	f00c feb4 	bl	8012306 <memcpy>
 800559e:	e7cf      	b.n	8005540 <ADCReadCommand+0x3c>
 80055a0:	08017e3c 	.word	0x08017e3c
 80055a4:	08017e0c 	.word	0x08017e0c
 80055a8:	08017e10 	.word	0x08017e10
 80055ac:	08017e18 	.word	0x08017e18
 80055b0:	08017e28 	.word	0x08017e28

080055b4 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b6:	4657      	mov	r7, sl
 80055b8:	46de      	mov	lr, fp
 80055ba:	464e      	mov	r6, r9
 80055bc:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 80055be:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c0:	b5e0      	push	{r5, r6, r7, lr}
 80055c2:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80055c4:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80055c6:	4b5b      	ldr	r3, [pc, #364]	; (8005734 <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c8:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80055ca:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055cc:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80055ce:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055d0:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d2:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80055d4:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d6:	f007 fdc3 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055da:	4957      	ldr	r1, [pc, #348]	; (8005738 <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055dc:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055de:	f7fa fd91 	bl	8000104 <strcmp>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d15c      	bne.n	80056a0 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80055e6:	4d55      	ldr	r5, [pc, #340]	; (800573c <testportCommand+0x188>)
 80055e8:	4a55      	ldr	r2, [pc, #340]	; (8005740 <testportCommand+0x18c>)
 80055ea:	782b      	ldrb	r3, [r5, #0]
 80055ec:	2401      	movs	r4, #1
 80055ee:	18d2      	adds	r2, r2, r3
 80055f0:	3a01      	subs	r2, #1
 80055f2:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055f4:	4a53      	ldr	r2, [pc, #332]	; (8005744 <testportCommand+0x190>)
 80055f6:	4691      	mov	r9, r2
 80055f8:	e003      	b.n	8005602 <testportCommand+0x4e>
 80055fa:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80055fc:	2c07      	cmp	r4, #7
 80055fe:	d047      	beq.n	8005690 <testportCommand+0xdc>
 8005600:	782b      	ldrb	r3, [r5, #0]
 8005602:	b2e2      	uxtb	r2, r4
 8005604:	4690      	mov	r8, r2
			if(PcPort != ports){
 8005606:	4293      	cmp	r3, r2
 8005608:	d0f7      	beq.n	80055fa <testportCommand+0x46>
				WriteVaule[0] =rand();
 800560a:	f00c fe9d 	bl	8012348 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 800560e:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005610:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005612:	2201      	movs	r2, #1
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	0039      	movs	r1, r7
 8005618:	469b      	mov	fp, r3
 800561a:	4640      	mov	r0, r8
 800561c:	3b5a      	subs	r3, #90	; 0x5a
 800561e:	f007 faff 	bl	800cc20 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005622:	4640      	mov	r0, r8
 8005624:	f007 fb60 	bl	800cce8 <GetUart>
 8005628:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800562a:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800562c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 800562e:	b2db      	uxtb	r3, r3
 8005630:	429a      	cmp	r2, r3
 8005632:	d03f      	beq.n	80056b4 <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005634:	0022      	movs	r2, r4
 8005636:	4944      	ldr	r1, [pc, #272]	; (8005748 <testportCommand+0x194>)
 8005638:	4650      	mov	r0, sl
 800563a:	f00d f867 	bl	801270c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800563e:	4650      	mov	r0, sl
 8005640:	f7fa fd6a 	bl	8000118 <strlen>
 8005644:	465b      	mov	r3, fp
 8005646:	b282      	uxth	r2, r0
 8005648:	4651      	mov	r1, sl
 800564a:	7828      	ldrb	r0, [r5, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	230a      	movs	r3, #10
 8005650:	f007 fae6 	bl	800cc20 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005654:	2254      	movs	r2, #84	; 0x54
 8005656:	493d      	ldr	r1, [pc, #244]	; (800574c <testportCommand+0x198>)
 8005658:	4650      	mov	r0, sl
 800565a:	f00c fe54 	bl	8012306 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800565e:	2364      	movs	r3, #100	; 0x64
 8005660:	7828      	ldrb	r0, [r5, #0]
 8005662:	2253      	movs	r2, #83	; 0x53
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4651      	mov	r1, sl
 8005668:	3b5a      	subs	r3, #90	; 0x5a
 800566a:	f007 fad9 	bl	800cc20 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800566e:	3601      	adds	r6, #1
 8005670:	e002      	b.n	8005678 <testportCommand+0xc4>
					Delay_ms(1);
 8005672:	2001      	movs	r0, #1
 8005674:	f009 fb04 	bl	800ec80 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005678:	782a      	ldrb	r2, [r5, #0]
 800567a:	3a01      	subs	r2, #1
 800567c:	0053      	lsls	r3, r2, #1
 800567e:	189b      	adds	r3, r3, r2
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	444b      	add	r3, r9
 8005684:	5d9b      	ldrb	r3, [r3, r6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f3      	beq.n	8005672 <testportCommand+0xbe>
 800568a:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800568c:	2c07      	cmp	r4, #7
 800568e:	d1b7      	bne.n	8005600 <testportCommand+0x4c>
}
 8005690:	2000      	movs	r0, #0
 8005692:	b005      	add	sp, #20
 8005694:	bc3c      	pop	{r2, r3, r4, r5}
 8005696:	4690      	mov	r8, r2
 8005698:	4699      	mov	r9, r3
 800569a:	46a2      	mov	sl, r4
 800569c:	46ab      	mov	fp, r5
 800569e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 80056a0:	2300      	movs	r3, #0
 80056a2:	56e3      	ldrsb	r3, [r4, r3]
 80056a4:	2b70      	cmp	r3, #112	; 0x70
 80056a6:	d016      	beq.n	80056d6 <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80056a8:	220f      	movs	r2, #15
 80056aa:	4929      	ldr	r1, [pc, #164]	; (8005750 <testportCommand+0x19c>)
 80056ac:	4650      	mov	r0, sl
 80056ae:	f00c fe2a 	bl	8012306 <memcpy>
 80056b2:	e7ed      	b.n	8005690 <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80056b4:	0022      	movs	r2, r4
 80056b6:	4927      	ldr	r1, [pc, #156]	; (8005754 <testportCommand+0x1a0>)
 80056b8:	4650      	mov	r0, sl
 80056ba:	f00d f827 	bl	801270c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80056be:	4650      	mov	r0, sl
 80056c0:	f7fa fd2a 	bl	8000118 <strlen>
 80056c4:	465b      	mov	r3, fp
 80056c6:	b282      	uxth	r2, r0
 80056c8:	4651      	mov	r1, sl
 80056ca:	7828      	ldrb	r0, [r5, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	3b5a      	subs	r3, #90	; 0x5a
 80056d0:	f007 faa6 	bl	800cc20 <writePxMutex>
 80056d4:	e7be      	b.n	8005654 <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056d6:	1c60      	adds	r0, r4, #1
 80056d8:	f00c fb55 	bl	8011d86 <atol>
 80056dc:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056de:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056e0:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d905      	bls.n	80056f2 <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056e6:	221b      	movs	r2, #27
 80056e8:	491b      	ldr	r1, [pc, #108]	; (8005758 <testportCommand+0x1a4>)
 80056ea:	4650      	mov	r0, sl
 80056ec:	f00c fe0b 	bl	8012306 <memcpy>
 80056f0:	e7ce      	b.n	8005690 <testportCommand+0xdc>
				WriteVaule[0] =rand();
 80056f2:	f00c fe29 	bl	8012348 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056f6:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 80056f8:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056fa:	2201      	movs	r2, #1
 80056fc:	0039      	movs	r1, r7
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	0028      	movs	r0, r5
 8005702:	3b32      	subs	r3, #50	; 0x32
 8005704:	f007 fa8c 	bl	800cc20 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005708:	2000      	movs	r0, #0
 800570a:	f007 faed 	bl	800cce8 <GetUart>
 800570e:	22ff      	movs	r2, #255	; 0xff
 8005710:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005712:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005714:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005716:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 8005718:	b2db      	uxtb	r3, r3
 800571a:	4299      	cmp	r1, r3
 800571c:	d004      	beq.n	8005728 <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 800571e:	490a      	ldr	r1, [pc, #40]	; (8005748 <testportCommand+0x194>)
 8005720:	4650      	mov	r0, sl
 8005722:	f00c fff3 	bl	801270c <sprintf>
 8005726:	e7b3      	b.n	8005690 <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005728:	490a      	ldr	r1, [pc, #40]	; (8005754 <testportCommand+0x1a0>)
 800572a:	4650      	mov	r0, sl
 800572c:	f00c ffee 	bl	801270c <sprintf>
 8005730:	e7ae      	b.n	8005690 <testportCommand+0xdc>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	08016e88 	.word	0x08016e88
 8005738:	08017420 	.word	0x08017420
 800573c:	20000c28 	.word	0x20000c28
 8005740:	200019f8 	.word	0x200019f8
 8005744:	20001a38 	.word	0x20001a38
 8005748:	08017e70 	.word	0x08017e70
 800574c:	08017e84 	.word	0x08017e84
 8005750:	08017ef4 	.word	0x08017ef4
 8005754:	08017e54 	.word	0x08017e54
 8005758:	08017ed8 	.word	0x08017ed8

0800575c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005760:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005762:	b082      	sub	sp, #8
 8005764:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005766:	466a      	mov	r2, sp
 8005768:	2101      	movs	r1, #1
 800576a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005770:	f007 fcf6 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005774:	2300      	movs	r3, #0
 8005776:	56c3      	ldrsb	r3, [r0, r3]
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d010      	beq.n	800579e <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800577c:	aa01      	add	r2, sp, #4
 800577e:	2102      	movs	r1, #2
 8005780:	0020      	movs	r0, r4
 8005782:	f007 fced 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005786:	2300      	movs	r3, #0
 8005788:	56c3      	ldrsb	r3, [r0, r3]
 800578a:	2b70      	cmp	r3, #112	; 0x70
 800578c:	d027      	beq.n	80057de <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800578e:	220f      	movs	r2, #15
 8005790:	4919      	ldr	r1, [pc, #100]	; (80057f8 <unbridgeCommand+0x9c>)
 8005792:	0028      	movs	r0, r5
 8005794:	f00c fdb7 	bl	8012306 <memcpy>
}
 8005798:	2000      	movs	r0, #0
 800579a:	b002      	add	sp, #8
 800579c:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800579e:	3001      	adds	r0, #1
 80057a0:	f00c faf1 	bl	8011d86 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a4:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80057a6:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a8:	2102      	movs	r1, #2
 80057aa:	0020      	movs	r0, r4
 80057ac:	f007 fcd8 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057b0:	2300      	movs	r3, #0
 80057b2:	56c3      	ldrsb	r3, [r0, r3]
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d1ea      	bne.n	800578e <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057b8:	3001      	adds	r0, #1
 80057ba:	f00c fae4 	bl	8011d86 <atol>
 80057be:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80057c0:	b2c1      	uxtb	r1, r0
 80057c2:	b2f0      	uxtb	r0, r6
 80057c4:	f7fe ffe2 	bl	800478c <Unbridge>
	if(result == BOS_OK)
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d10c      	bne.n	80057e6 <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	0023      	movs	r3, r4
 80057d0:	490a      	ldr	r1, [pc, #40]	; (80057fc <unbridgeCommand+0xa0>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	0028      	movs	r0, r5
 80057d6:	4032      	ands	r2, r6
 80057d8:	f00c ff98 	bl	801270c <sprintf>
 80057dc:	e7dc      	b.n	8005798 <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057de:	3001      	adds	r0, #1
 80057e0:	f00c fad1 	bl	8011d86 <atol>
 80057e4:	e7d3      	b.n	800578e <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 80057e6:	2867      	cmp	r0, #103	; 0x67
 80057e8:	d0d1      	beq.n	800578e <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80057ea:	2219      	movs	r2, #25
 80057ec:	4904      	ldr	r1, [pc, #16]	; (8005800 <unbridgeCommand+0xa4>)
 80057ee:	0028      	movs	r0, r5
 80057f0:	f00c fd89 	bl	8012306 <memcpy>
	return pdFALSE;
 80057f4:	e7d0      	b.n	8005798 <unbridgeCommand+0x3c>
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	08017ef4 	.word	0x08017ef4
 80057fc:	08017f04 	.word	0x08017f04
 8005800:	08017f24 	.word	0x08017f24

08005804 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005808:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800580a:	b082      	sub	sp, #8
 800580c:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800580e:	466a      	mov	r2, sp
 8005810:	2101      	movs	r1, #1
 8005812:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005818:	f007 fca2 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800581c:	2300      	movs	r3, #0
 800581e:	56c3      	ldrsb	r3, [r0, r3]
 8005820:	2b70      	cmp	r3, #112	; 0x70
 8005822:	d010      	beq.n	8005846 <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005824:	aa01      	add	r2, sp, #4
 8005826:	2102      	movs	r1, #2
 8005828:	0020      	movs	r0, r4
 800582a:	f007 fc99 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800582e:	2300      	movs	r3, #0
 8005830:	56c3      	ldrsb	r3, [r0, r3]
 8005832:	2b70      	cmp	r3, #112	; 0x70
 8005834:	d027      	beq.n	8005886 <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005836:	220f      	movs	r2, #15
 8005838:	4919      	ldr	r1, [pc, #100]	; (80058a0 <bridgeCommand+0x9c>)
 800583a:	0028      	movs	r0, r5
 800583c:	f00c fd63 	bl	8012306 <memcpy>
}
 8005840:	2000      	movs	r0, #0
 8005842:	b002      	add	sp, #8
 8005844:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005846:	3001      	adds	r0, #1
 8005848:	f00c fa9d 	bl	8011d86 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800584c:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800584e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005850:	2102      	movs	r1, #2
 8005852:	0020      	movs	r0, r4
 8005854:	f007 fc84 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005858:	2300      	movs	r3, #0
 800585a:	56c3      	ldrsb	r3, [r0, r3]
 800585c:	2b70      	cmp	r3, #112	; 0x70
 800585e:	d1ea      	bne.n	8005836 <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005860:	3001      	adds	r0, #1
 8005862:	f00c fa90 	bl	8011d86 <atol>
 8005866:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005868:	b2c1      	uxtb	r1, r0
 800586a:	b2f0      	uxtb	r0, r6
 800586c:	f7fe ff7a 	bl	8004764 <Bridge>
	if(result == BOS_OK)
 8005870:	2800      	cmp	r0, #0
 8005872:	d10c      	bne.n	800588e <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	0023      	movs	r3, r4
 8005878:	490a      	ldr	r1, [pc, #40]	; (80058a4 <bridgeCommand+0xa0>)
 800587a:	4013      	ands	r3, r2
 800587c:	0028      	movs	r0, r5
 800587e:	4032      	ands	r2, r6
 8005880:	f00c ff44 	bl	801270c <sprintf>
 8005884:	e7dc      	b.n	8005840 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005886:	3001      	adds	r0, #1
 8005888:	f00c fa7d 	bl	8011d86 <atol>
 800588c:	e7d3      	b.n	8005836 <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 800588e:	2867      	cmp	r0, #103	; 0x67
 8005890:	d0d1      	beq.n	8005836 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005892:	2217      	movs	r2, #23
 8005894:	4904      	ldr	r1, [pc, #16]	; (80058a8 <bridgeCommand+0xa4>)
 8005896:	0028      	movs	r0, r5
 8005898:	f00c fd35 	bl	8012306 <memcpy>
	return pdFALSE;
 800589c:	e7d0      	b.n	8005840 <bridgeCommand+0x3c>
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	08017ef4 	.word	0x08017ef4
 80058a4:	08017f40 	.word	0x08017f40
 80058a8:	08017f64 	.word	0x08017f64

080058ac <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ae:	46d6      	mov	lr, sl
 80058b0:	4646      	mov	r6, r8
 80058b2:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 80058b4:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058b6:	b5c0      	push	{r6, r7, lr}
 80058b8:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058ba:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058bc:	0006      	movs	r6, r0
 80058be:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058c0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80058c2:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058c4:	f007 fc4c 	bl	800d160 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80058c8:	f00c fa57 	bl	8011d7a <atoi>
 80058cc:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	d003      	beq.n	80058da <delSnipCommand+0x2e>
 80058d2:	4f30      	ldr	r7, [pc, #192]	; (8005994 <delSnipCommand+0xe8>)
 80058d4:	783b      	ldrb	r3, [r7, #0]
 80058d6:	42ab      	cmp	r3, r5
 80058d8:	d20b      	bcs.n	80058f2 <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058da:	2223      	movs	r2, #35	; 0x23
 80058dc:	492e      	ldr	r1, [pc, #184]	; (8005998 <delSnipCommand+0xec>)
 80058de:	0030      	movs	r0, r6
 80058e0:	f00c fd11 	bl	8012306 <memcpy>
}
 80058e4:	2000      	movs	r0, #0
 80058e6:	b002      	add	sp, #8
 80058e8:	bc1c      	pop	{r2, r3, r4}
 80058ea:	4690      	mov	r8, r2
 80058ec:	4699      	mov	r9, r3
 80058ee:	46a2      	mov	sl, r4
 80058f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80058f2:	23ff      	movs	r3, #255	; 0xff
 80058f4:	4003      	ands	r3, r0
 80058f6:	469a      	mov	sl, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	0098      	lsls	r0, r3, #2
 80058fc:	18c0      	adds	r0, r0, r3
 80058fe:	4b27      	ldr	r3, [pc, #156]	; (800599c <delSnipCommand+0xf0>)
 8005900:	0080      	lsls	r0, r0, #2
 8005902:	4699      	mov	r9, r3
 8005904:	4680      	mov	r8, r0
 8005906:	44c8      	add	r8, r9
 8005908:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 800590a:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 800590c:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 800590e:	2204      	movs	r2, #4
 8005910:	2100      	movs	r1, #0
 8005912:	4448      	add	r0, r9
 8005914:	f00c fd00 	bl	8012318 <memset>
		snippets[index - 1].state = false;
 8005918:	2300      	movs	r3, #0
 800591a:	4642      	mov	r2, r8
 800591c:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 800591e:	68d0      	ldr	r0, [r2, #12]
 8005920:	f00c faae 	bl	8011e80 <free>
		snippets[index - 1].cmd = NULL;
 8005924:	4643      	mov	r3, r8
 8005926:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005928:	783b      	ldrb	r3, [r7, #0]
 800592a:	42ab      	cmp	r3, r5
 800592c:	d92e      	bls.n	800598c <delSnipCommand+0xe0>
 800592e:	3b01      	subs	r3, #1
 8005930:	1b58      	subs	r0, r3, r5
 8005932:	b2c0      	uxtb	r0, r0
 8005934:	4450      	add	r0, sl
 8005936:	4652      	mov	r2, sl
 8005938:	0085      	lsls	r5, r0, #2
 800593a:	182d      	adds	r5, r5, r0
 800593c:	4648      	mov	r0, r9
 800593e:	0094      	lsls	r4, r2, #2
 8005940:	4454      	add	r4, sl
 8005942:	00a4      	lsls	r4, r4, #2
 8005944:	00ad      	lsls	r5, r5, #2
 8005946:	3014      	adds	r0, #20
 8005948:	444c      	add	r4, r9
 800594a:	4698      	mov	r8, r3
 800594c:	182d      	adds	r5, r5, r0
 800594e:	e002      	b.n	8005956 <delSnipCommand+0xaa>
 8005950:	3414      	adds	r4, #20
 8005952:	42ac      	cmp	r4, r5
 8005954:	d010      	beq.n	8005978 <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 8005956:	7823      	ldrb	r3, [r4, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f9      	beq.n	8005950 <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 800595c:	0020      	movs	r0, r4
 800595e:	0021      	movs	r1, r4
 8005960:	2214      	movs	r2, #20
 8005962:	3814      	subs	r0, #20
 8005964:	f00c fccf 	bl	8012306 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005968:	0020      	movs	r0, r4
 800596a:	2214      	movs	r2, #20
 800596c:	2100      	movs	r1, #0
 800596e:	3414      	adds	r4, #20
 8005970:	f00c fcd2 	bl	8012318 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005974:	42ac      	cmp	r4, r5
 8005976:	d1ee      	bne.n	8005956 <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005978:	4643      	mov	r3, r8
 800597a:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 800597c:	f004 f806 	bl	800998c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005980:	2236      	movs	r2, #54	; 0x36
 8005982:	4907      	ldr	r1, [pc, #28]	; (80059a0 <delSnipCommand+0xf4>)
 8005984:	0030      	movs	r0, r6
 8005986:	f00c fcbe 	bl	8012306 <memcpy>
 800598a:	e7ab      	b.n	80058e4 <delSnipCommand+0x38>
 800598c:	3b01      	subs	r3, #1
 800598e:	4698      	mov	r8, r3
 8005990:	e7f2      	b.n	8005978 <delSnipCommand+0xcc>
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	2000182c 	.word	0x2000182c
 8005998:	08017fb4 	.word	0x08017fb4
 800599c:	20006a9c 	.word	0x20006a9c
 80059a0:	08017f7c 	.word	0x08017f7c

080059a4 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a4:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 80059a6:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a8:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059aa:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059ac:	0005      	movs	r5, r0
 80059ae:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059b0:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80059b2:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059b4:	f007 fbd4 	bl	800d160 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80059b8:	f00c f9df 	bl	8011d7a <atoi>
 80059bc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <pauseSnipCommand+0x26>
 80059c2:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <pauseSnipCommand+0x58>)
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d207      	bcs.n	80059da <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059ca:	2223      	movs	r2, #35	; 0x23
 80059cc:	490c      	ldr	r1, [pc, #48]	; (8005a00 <pauseSnipCommand+0x5c>)
 80059ce:	0028      	movs	r0, r5
 80059d0:	f00c fc99 	bl	8012306 <memcpy>
}
 80059d4:	2000      	movs	r0, #0
 80059d6:	b003      	add	sp, #12
 80059d8:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 80059da:	23ff      	movs	r3, #255	; 0xff
 80059dc:	4018      	ands	r0, r3
 80059de:	3801      	subs	r0, #1
 80059e0:	0083      	lsls	r3, r0, #2
 80059e2:	1818      	adds	r0, r3, r0
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <pauseSnipCommand+0x60>)
 80059e6:	0080      	lsls	r0, r0, #2
 80059e8:	1818      	adds	r0, r3, r0
 80059ea:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 80059ec:	f003 ffce 	bl	800998c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80059f0:	2235      	movs	r2, #53	; 0x35
 80059f2:	4905      	ldr	r1, [pc, #20]	; (8005a08 <pauseSnipCommand+0x64>)
 80059f4:	0028      	movs	r0, r5
 80059f6:	f00c fc86 	bl	8012306 <memcpy>
 80059fa:	e7eb      	b.n	80059d4 <pauseSnipCommand+0x30>
 80059fc:	2000182c 	.word	0x2000182c
 8005a00:	08017fb4 	.word	0x08017fb4
 8005a04:	20006a9c 	.word	0x20006a9c
 8005a08:	08017fd8 	.word	0x08017fd8

08005a0c <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005a0c:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a12:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a14:	0004      	movs	r4, r0
 8005a16:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a18:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005a1a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a1c:	f007 fba0 	bl	800d160 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a20:	f00c f9ab 	bl	8011d7a <atoi>
 8005a24:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <actSnipCommand+0x26>
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	; (8005a68 <actSnipCommand+0x5c>)
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d207      	bcs.n	8005a42 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a32:	2223      	movs	r2, #35	; 0x23
 8005a34:	490d      	ldr	r1, [pc, #52]	; (8005a6c <actSnipCommand+0x60>)
 8005a36:	0020      	movs	r0, r4
 8005a38:	f00c fc65 	bl	8012306 <memcpy>
}
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005a42:	23ff      	movs	r3, #255	; 0xff
 8005a44:	4018      	ands	r0, r3
 8005a46:	3801      	subs	r0, #1
 8005a48:	0083      	lsls	r3, r0, #2
 8005a4a:	1818      	adds	r0, r3, r0
 8005a4c:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <actSnipCommand+0x64>)
 8005a4e:	0080      	lsls	r0, r0, #2
 8005a50:	1818      	adds	r0, r3, r0
 8005a52:	2301      	movs	r3, #1
 8005a54:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005a56:	f003 ff99 	bl	800998c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a5a:	2238      	movs	r2, #56	; 0x38
 8005a5c:	4905      	ldr	r1, [pc, #20]	; (8005a74 <actSnipCommand+0x68>)
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f00c fc51 	bl	8012306 <memcpy>
 8005a64:	e7ea      	b.n	8005a3c <actSnipCommand+0x30>
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	2000182c 	.word	0x2000182c
 8005a6c:	08017fb4 	.word	0x08017fb4
 8005a70:	20006a9c 	.word	0x20006a9c
 8005a74:	08018010 	.word	0x08018010

08005a78 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7a:	46de      	mov	lr, fp
 8005a7c:	4657      	mov	r7, sl
 8005a7e:	464e      	mov	r6, r9
 8005a80:	4645      	mov	r5, r8
 8005a82:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005a84:	4b7c      	ldr	r3, [pc, #496]	; (8005c78 <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a86:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005a88:	3304      	adds	r3, #4
 8005a8a:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a8c:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005a8e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005a90:	c213      	stmia	r2!, {r0, r1, r4}
 8005a92:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a94:	4979      	ldr	r1, [pc, #484]	; (8005c7c <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005a96:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a98:	4b79      	ldr	r3, [pc, #484]	; (8005c80 <snipCommand+0x208>)
 8005a9a:	2237      	movs	r2, #55	; 0x37
 8005a9c:	7818      	ldrb	r0, [r3, #0]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	3333      	adds	r3, #51	; 0x33
 8005aa6:	f007 f8bb 	bl	800cc20 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005aaa:	4b76      	ldr	r3, [pc, #472]	; (8005c84 <snipCommand+0x20c>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d044      	beq.n	8005b3c <snipCommand+0xc4>
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	4b74      	ldr	r3, [pc, #464]	; (8005c88 <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005ab6:	46a8      	mov	r8, r5
 8005ab8:	469a      	mov	sl, r3
 8005aba:	4c74      	ldr	r4, [pc, #464]	; (8005c8c <snipCommand+0x214>)
 8005abc:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005abe:	009d      	lsls	r5, r3, #2
 8005ac0:	18e9      	adds	r1, r5, r3
 8005ac2:	1c5e      	adds	r6, r3, #1
 8005ac4:	008b      	lsls	r3, r1, #2
 8005ac6:	469b      	mov	fp, r3
 8005ac8:	4653      	mov	r3, sl
 8005aca:	465a      	mov	r2, fp
 8005acc:	5c9b      	ldrb	r3, [r3, r2]
 8005ace:	b2f6      	uxtb	r6, r6
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d140      	bne.n	8005b56 <snipCommand+0xde>
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	4451      	add	r1, sl
 8005ad8:	68c8      	ldr	r0, [r1, #12]
 8005ada:	4445      	add	r5, r8
 8005adc:	00ad      	lsls	r5, r5, #2
 8005ade:	4455      	add	r5, sl
 8005ae0:	e00e      	b.n	8005b00 <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ae2:	0023      	movs	r3, r4
 8005ae4:	003a      	movs	r2, r7
 8005ae6:	496a      	ldr	r1, [pc, #424]	; (8005c90 <snipCommand+0x218>)
 8005ae8:	0038      	movs	r0, r7
 8005aea:	f00c fe0f 	bl	801270c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005aee:	0020      	movs	r0, r4
 8005af0:	f7fa fb12 	bl	8000118 <strlen>
 8005af4:	2100      	movs	r1, #0
 8005af6:	0002      	movs	r2, r0
 8005af8:	0020      	movs	r0, r4
 8005afa:	f00c fc0d 	bl	8012318 <memset>
 8005afe:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005b00:	0021      	movs	r1, r4
 8005b02:	f7ff fbbb 	bl	800527c <ParseSnippetCommand>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1eb      	bne.n	8005ae2 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005b0a:	0038      	movs	r0, r7
 8005b0c:	f7fa fb04 	bl	8000118 <strlen>
 8005b10:	220c      	movs	r2, #12
 8005b12:	0005      	movs	r5, r0
 8005b14:	495f      	ldr	r1, [pc, #380]	; (8005c94 <snipCommand+0x21c>)
 8005b16:	1838      	adds	r0, r7, r0
 8005b18:	f00c fbf5 	bl	8012306 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005b1c:	4b58      	ldr	r3, [pc, #352]	; (8005c80 <snipCommand+0x208>)
 8005b1e:	350b      	adds	r5, #11
 8005b20:	7818      	ldrb	r0, [r3, #0]
 8005b22:	2301      	movs	r3, #1
 8005b24:	425b      	negs	r3, r3
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	b2aa      	uxth	r2, r5
 8005b2a:	3333      	adds	r3, #51	; 0x33
 8005b2c:	0039      	movs	r1, r7
 8005b2e:	f007 f877 	bl	800cc20 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005b32:	4b54      	ldr	r3, [pc, #336]	; (8005c84 <snipCommand+0x20c>)
 8005b34:	46b0      	mov	r8, r6
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	42b3      	cmp	r3, r6
 8005b3a:	d8bf      	bhi.n	8005abc <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005b3c:	22b5      	movs	r2, #181	; 0xb5
 8005b3e:	4956      	ldr	r1, [pc, #344]	; (8005c98 <snipCommand+0x220>)
 8005b40:	0038      	movs	r0, r7
 8005b42:	f00c fbe0 	bl	8012306 <memcpy>
}
 8005b46:	2000      	movs	r0, #0
 8005b48:	b00b      	add	sp, #44	; 0x2c
 8005b4a:	bc3c      	pop	{r2, r3, r4, r5}
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	4699      	mov	r9, r3
 8005b50:	46a2      	mov	sl, r4
 8005b52:	46ab      	mov	fp, r5
 8005b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005b56:	46d1      	mov	r9, sl
 8005b58:	44d9      	add	r9, fp
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	7c1a      	ldrb	r2, [r3, #16]
 8005b5e:	494f      	ldr	r1, [pc, #316]	; (8005c9c <snipCommand+0x224>)
 8005b60:	00d3      	lsls	r3, r2, #3
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	aa06      	add	r2, sp, #24
 8005b66:	4694      	mov	ip, r2
 8005b68:	0038      	movs	r0, r7
 8005b6a:	4463      	add	r3, ip
 8005b6c:	0032      	movs	r2, r6
 8005b6e:	f00c fdcd 	bl	801270c <sprintf>
		switch(snippets[s].cond.conditionType){
 8005b72:	4653      	mov	r3, sl
 8005b74:	465a      	mov	r2, fp
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d029      	beq.n	8005bd0 <snipCommand+0x158>
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d175      	bne.n	8005c6c <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005b80:	4659      	mov	r1, fp
 8005b82:	3106      	adds	r1, #6
 8005b84:	4451      	add	r1, sl
 8005b86:	2204      	movs	r2, #4
 8005b88:	a805      	add	r0, sp, #20
 8005b8a:	f00c fbbc 	bl	8012306 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005b8e:	464b      	mov	r3, r9
 8005b90:	78da      	ldrb	r2, [r3, #3]
 8005b92:	9805      	ldr	r0, [sp, #20]
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0053      	lsls	r3, r2, #1
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	4a41      	ldr	r2, [pc, #260]	; (8005ca0 <snipCommand+0x228>)
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	18d3      	adds	r3, r2, r3
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	469b      	mov	fp, r3
 8005ba4:	f7fc ffbe 	bl	8002b24 <__aeabi_f2d>
 8005ba8:	464b      	mov	r3, r9
 8005baa:	9002      	str	r0, [sp, #8]
 8005bac:	9103      	str	r1, [sp, #12]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	4a31      	ldr	r2, [pc, #196]	; (8005c78 <snipCommand+0x200>)
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	0059      	lsls	r1, r3, #1
 8005bb6:	3214      	adds	r2, #20
 8005bb8:	18cb      	adds	r3, r1, r3
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	003a      	movs	r2, r7
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4938      	ldr	r1, [pc, #224]	; (8005ca4 <snipCommand+0x22c>)
 8005bc4:	0038      	movs	r0, r7
 8005bc6:	f00c fda1 	bl	801270c <sprintf>
 8005bca:	464b      	mov	r3, r9
 8005bcc:	68d8      	ldr	r0, [r3, #12]
				break;
 8005bce:	e784      	b.n	8005ada <snipCommand+0x62>
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005bd4:	78db      	ldrb	r3, [r3, #3]
 8005bd6:	3b05      	subs	r3, #5
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b09      	cmp	r3, #9
 8005bdc:	d900      	bls.n	8005be0 <snipCommand+0x168>
 8005bde:	e77c      	b.n	8005ada <snipCommand+0x62>
 8005be0:	4a31      	ldr	r2, [pc, #196]	; (8005ca8 <snipCommand+0x230>)
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	58d3      	ldr	r3, [r2, r3]
 8005be6:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005be8:	4643      	mov	r3, r8
 8005bea:	18eb      	adds	r3, r5, r3
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4453      	add	r3, sl
 8005bf0:	4699      	mov	r9, r3
 8005bf2:	464a      	mov	r2, r9
 8005bf4:	789b      	ldrb	r3, [r3, #2]
 8005bf6:	9001      	str	r0, [sp, #4]
 8005bf8:	7912      	ldrb	r2, [r2, #4]
 8005bfa:	492c      	ldr	r1, [pc, #176]	; (8005cac <snipCommand+0x234>)
 8005bfc:	9200      	str	r2, [sp, #0]
 8005bfe:	0038      	movs	r0, r7
 8005c00:	003a      	movs	r2, r7
 8005c02:	f00c fd83 	bl	801270c <sprintf>
 8005c06:	464b      	mov	r3, r9
 8005c08:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c0a:	e766      	b.n	8005ada <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c0c:	4643      	mov	r3, r8
 8005c0e:	18eb      	adds	r3, r5, r3
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4453      	add	r3, sl
 8005c14:	4699      	mov	r9, r3
 8005c16:	464a      	mov	r2, r9
 8005c18:	789b      	ldrb	r3, [r3, #2]
 8005c1a:	9001      	str	r0, [sp, #4]
 8005c1c:	7912      	ldrb	r2, [r2, #4]
 8005c1e:	4924      	ldr	r1, [pc, #144]	; (8005cb0 <snipCommand+0x238>)
 8005c20:	9200      	str	r2, [sp, #0]
 8005c22:	0038      	movs	r0, r7
 8005c24:	003a      	movs	r2, r7
 8005c26:	f00c fd71 	bl	801270c <sprintf>
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c2e:	e754      	b.n	8005ada <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c30:	4643      	mov	r3, r8
 8005c32:	18eb      	adds	r3, r5, r3
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4453      	add	r3, sl
 8005c38:	4699      	mov	r9, r3
 8005c3a:	003a      	movs	r2, r7
 8005c3c:	789b      	ldrb	r3, [r3, #2]
 8005c3e:	491d      	ldr	r1, [pc, #116]	; (8005cb4 <snipCommand+0x23c>)
 8005c40:	9000      	str	r0, [sp, #0]
 8005c42:	0038      	movs	r0, r7
 8005c44:	f00c fd62 	bl	801270c <sprintf>
 8005c48:	464b      	mov	r3, r9
 8005c4a:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c4c:	e745      	b.n	8005ada <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c4e:	4643      	mov	r3, r8
 8005c50:	18eb      	adds	r3, r5, r3
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4453      	add	r3, sl
 8005c56:	4699      	mov	r9, r3
 8005c58:	003a      	movs	r2, r7
 8005c5a:	789b      	ldrb	r3, [r3, #2]
 8005c5c:	4916      	ldr	r1, [pc, #88]	; (8005cb8 <snipCommand+0x240>)
 8005c5e:	9000      	str	r0, [sp, #0]
 8005c60:	0038      	movs	r0, r7
 8005c62:	f00c fd53 	bl	801270c <sprintf>
 8005c66:	464b      	mov	r3, r9
 8005c68:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c6a:	e736      	b.n	8005ada <snipCommand+0x62>
 8005c6c:	2314      	movs	r3, #20
 8005c6e:	4642      	mov	r2, r8
 8005c70:	4353      	muls	r3, r2
 8005c72:	4453      	add	r3, sl
 8005c74:	68d8      	ldr	r0, [r3, #12]
 8005c76:	e730      	b.n	8005ada <snipCommand+0x62>
 8005c78:	08016e88 	.word	0x08016e88
 8005c7c:	08018048 	.word	0x08018048
 8005c80:	20000c28 	.word	0x20000c28
 8005c84:	2000182c 	.word	0x2000182c
 8005c88:	20006a9c 	.word	0x20006a9c
 8005c8c:	2000192c 	.word	0x2000192c
 8005c90:	080180fc 	.word	0x080180fc
 8005c94:	08018104 	.word	0x08018104
 8005c98:	08018110 	.word	0x08018110
 8005c9c:	08018080 	.word	0x08018080
 8005ca0:	20000094 	.word	0x20000094
 8005ca4:	080180ec 	.word	0x080180ec
 8005ca8:	08016c2c 	.word	0x08016c2c
 8005cac:	080180d0 	.word	0x080180d0
 8005cb0:	080180b8 	.word	0x080180b8
 8005cb4:	080180a0 	.word	0x080180a0
 8005cb8:	0801808c 	.word	0x0801808c

08005cbc <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005cc0:	f008 fff2 	bl	800eca8 <HAL_GetDEVID>
	switch(dev){
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <idcodeCommand+0x78>)
 8005cc6:	0400      	lsls	r0, r0, #16
 8005cc8:	469c      	mov	ip, r3
 8005cca:	0c00      	lsrs	r0, r0, #16
 8005ccc:	4460      	add	r0, ip
 8005cce:	2808      	cmp	r0, #8
 8005cd0:	d82a      	bhi.n	8005d28 <idcodeCommand+0x6c>
 8005cd2:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <idcodeCommand+0x7c>)
 8005cd4:	0080      	lsls	r0, r0, #2
 8005cd6:	581b      	ldr	r3, [r3, r0]
 8005cd8:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <idcodeCommand+0x80>)
 8005cdc:	4918      	ldr	r1, [pc, #96]	; (8005d40 <idcodeCommand+0x84>)
 8005cde:	0020      	movs	r0, r4
 8005ce0:	f00c fd14 	bl	801270c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005ce4:	f008 ffda 	bl	800ec9c <HAL_GetREVID>
 8005ce8:	0022      	movs	r2, r4
 8005cea:	0b03      	lsrs	r3, r0, #12
 8005cec:	4915      	ldr	r1, [pc, #84]	; (8005d44 <idcodeCommand+0x88>)
 8005cee:	0020      	movs	r0, r4
 8005cf0:	f00c fd0c 	bl	801270c <sprintf>
}
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <idcodeCommand+0x8c>)
 8005cfa:	4911      	ldr	r1, [pc, #68]	; (8005d40 <idcodeCommand+0x84>)
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	f00c fd05 	bl	801270c <sprintf>
			break;
 8005d02:	e7ef      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005d04:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <idcodeCommand+0x90>)
 8005d06:	490e      	ldr	r1, [pc, #56]	; (8005d40 <idcodeCommand+0x84>)
 8005d08:	0020      	movs	r0, r4
 8005d0a:	f00c fcff 	bl	801270c <sprintf>
			break;
 8005d0e:	e7e9      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005d10:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <idcodeCommand+0x94>)
 8005d12:	490b      	ldr	r1, [pc, #44]	; (8005d40 <idcodeCommand+0x84>)
 8005d14:	0020      	movs	r0, r4
 8005d16:	f00c fcf9 	bl	801270c <sprintf>
			break;
 8005d1a:	e7e3      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005d1c:	4a0d      	ldr	r2, [pc, #52]	; (8005d54 <idcodeCommand+0x98>)
 8005d1e:	4908      	ldr	r1, [pc, #32]	; (8005d40 <idcodeCommand+0x84>)
 8005d20:	0020      	movs	r0, r4
 8005d22:	f00c fcf3 	bl	801270c <sprintf>
			break;
 8005d26:	e7dd      	b.n	8005ce4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005d28:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <idcodeCommand+0x9c>)
 8005d2a:	4905      	ldr	r1, [pc, #20]	; (8005d40 <idcodeCommand+0x84>)
 8005d2c:	0020      	movs	r0, r4
 8005d2e:	f00c fced 	bl	801270c <sprintf>
			break;
 8005d32:	e7d7      	b.n	8005ce4 <idcodeCommand+0x28>
 8005d34:	fffffbc0 	.word	0xfffffbc0
 8005d38:	08016c54 	.word	0x08016c54
 8005d3c:	08018200 	.word	0x08018200
 8005d40:	080181d4 	.word	0x080181d4
 8005d44:	08018220 	.word	0x08018220
 8005d48:	080181f4 	.word	0x080181f4
 8005d4c:	0801820c 	.word	0x0801820c
 8005d50:	080181c8 	.word	0x080181c8
 8005d54:	080181e8 	.word	0x080181e8
 8005d58:	08018218 	.word	0x08018218

08005d5c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d60:	220e      	movs	r2, #14
 8005d62:	4911      	ldr	r1, [pc, #68]	; (8005da8 <uuidCommand+0x4c>)
 8005d64:	f00c facf 	bl	8012306 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d68:	4d10      	ldr	r5, [pc, #64]	; (8005dac <uuidCommand+0x50>)
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <uuidCommand+0x54>)
 8005d6c:	0029      	movs	r1, r5
 8005d6e:	0022      	movs	r2, r4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0020      	movs	r0, r4
 8005d74:	f00c fcca 	bl	801270c <sprintf>
 8005d78:	4b0e      	ldr	r3, [pc, #56]	; (8005db4 <uuidCommand+0x58>)
 8005d7a:	0029      	movs	r1, r5
 8005d7c:	0022      	movs	r2, r4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0020      	movs	r0, r4
 8005d82:	f00c fcc3 	bl	801270c <sprintf>
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <uuidCommand+0x5c>)
 8005d88:	0029      	movs	r1, r5
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0022      	movs	r2, r4
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f00c fcbc 	bl	801270c <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d94:	0020      	movs	r0, r4
 8005d96:	f7fa f9bf 	bl	8000118 <strlen>
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	1820      	adds	r0, r4, r0
 8005d9e:	4907      	ldr	r1, [pc, #28]	; (8005dbc <uuidCommand+0x60>)
 8005da0:	f00c fab1 	bl	8012306 <memcpy>
}
 8005da4:	2000      	movs	r0, #0
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	08018238 	.word	0x08018238
 8005dac:	08018248 	.word	0x08018248
 8005db0:	1ffff7ac 	.word	0x1ffff7ac
 8005db4:	1ffff7b0 	.word	0x1ffff7b0
 8005db8:	1ffff7b4 	.word	0x1ffff7b4
 8005dbc:	080192fc 	.word	0x080192fc

08005dc0 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	0004      	movs	r4, r0
	GetTimeDate();
 8005dc4:	f006 fcb8 	bl	800c738 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005dc8:	f7fe fcae 	bl	8004728 <GetDateString>
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <dateCommand+0x1c>)
 8005dce:	0002      	movs	r2, r0
 8005dd0:	0020      	movs	r0, r4
 8005dd2:	f00c fc9b 	bl	801270c <sprintf>
}
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	08018250 	.word	0x08018250

08005de0 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	46ce      	mov	lr, r9
 8005de4:	4647      	mov	r7, r8
 8005de6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005de8:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dee:	466a      	mov	r2, sp
 8005df0:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005df2:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005df4:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dfa:	f007 f9b1 	bl	800d160 <FreeRTOS_CLIGetParameter>
 8005dfe:	4b6b      	ldr	r3, [pc, #428]	; (8005fac <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e00:	2204      	movs	r2, #4
 8005e02:	496b      	ldr	r1, [pc, #428]	; (8005fb0 <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e04:	0004      	movs	r4, r0
 8005e06:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e08:	f00c fcc4 	bl	8012794 <strncmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d119      	bne.n	8005e44 <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005e10:	9b00      	ldr	r3, [sp, #0]
 8005e12:	1d27      	adds	r7, r4, #4
 8005e14:	1f1d      	subs	r5, r3, #4
 8005e16:	002a      	movs	r2, r5
 8005e18:	4966      	ldr	r1, [pc, #408]	; (8005fb4 <getCommand+0x1d4>)
 8005e1a:	0038      	movs	r0, r7
 8005e1c:	f00c fcba 	bl	8012794 <strncmp>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d121      	bne.n	8005e68 <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e24:	4b64      	ldr	r3, [pc, #400]	; (8005fb8 <getCommand+0x1d8>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b60      	cmp	r3, #96	; 0x60
 8005e2a:	d100      	bne.n	8005e2e <getCommand+0x4e>
 8005e2c:	e071      	b.n	8005f12 <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d069      	beq.n	8005f06 <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d100      	bne.n	8005e38 <getCommand+0x58>
 8005e36:	e096      	b.n	8005f66 <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e38:	0022      	movs	r2, r4
 8005e3a:	4960      	ldr	r1, [pc, #384]	; (8005fbc <getCommand+0x1dc>)
 8005e3c:	0030      	movs	r0, r6
 8005e3e:	f00c fc65 	bl	801270c <sprintf>
 8005e42:	e00b      	b.n	8005e5c <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005e44:	2205      	movs	r2, #5
 8005e46:	495e      	ldr	r1, [pc, #376]	; (8005fc0 <getCommand+0x1e0>)
 8005e48:	0020      	movs	r0, r4
 8005e4a:	f00c fca3 	bl	8012794 <strncmp>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d03b      	beq.n	8005eca <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005e52:	2213      	movs	r2, #19
 8005e54:	495b      	ldr	r1, [pc, #364]	; (8005fc4 <getCommand+0x1e4>)
 8005e56:	0030      	movs	r0, r6
 8005e58:	f00c fa55 	bl	8012306 <memcpy>
}
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	b003      	add	sp, #12
 8005e60:	bc0c      	pop	{r2, r3}
 8005e62:	4690      	mov	r8, r2
 8005e64:	4699      	mov	r9, r3
 8005e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005e68:	002a      	movs	r2, r5
 8005e6a:	4957      	ldr	r1, [pc, #348]	; (8005fc8 <getCommand+0x1e8>)
 8005e6c:	0038      	movs	r0, r7
 8005e6e:	f00c fc91 	bl	8012794 <strncmp>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d041      	beq.n	8005efa <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005e76:	002a      	movs	r2, r5
 8005e78:	4954      	ldr	r1, [pc, #336]	; (8005fcc <getCommand+0x1ec>)
 8005e7a:	0038      	movs	r0, r7
 8005e7c:	f00c fc8a 	bl	8012794 <strncmp>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d07d      	beq.n	8005f80 <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005e84:	002a      	movs	r2, r5
 8005e86:	4952      	ldr	r1, [pc, #328]	; (8005fd0 <getCommand+0x1f0>)
 8005e88:	0038      	movs	r0, r7
 8005e8a:	f00c fc83 	bl	8012794 <strncmp>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d07d      	beq.n	8005f8e <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005e92:	002a      	movs	r2, r5
 8005e94:	494f      	ldr	r1, [pc, #316]	; (8005fd4 <getCommand+0x1f4>)
 8005e96:	0038      	movs	r0, r7
 8005e98:	f00c fc7c 	bl	8012794 <strncmp>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d068      	beq.n	8005f72 <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005ea0:	002a      	movs	r2, r5
 8005ea2:	494d      	ldr	r1, [pc, #308]	; (8005fd8 <getCommand+0x1f8>)
 8005ea4:	0038      	movs	r0, r7
 8005ea6:	f00c fc75 	bl	8012794 <strncmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d076      	beq.n	8005f9c <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005eae:	002a      	movs	r2, r5
 8005eb0:	494a      	ldr	r1, [pc, #296]	; (8005fdc <getCommand+0x1fc>)
 8005eb2:	0038      	movs	r0, r7
 8005eb4:	f00c fc6e 	bl	8012794 <strncmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d1ca      	bne.n	8005e52 <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005ebc:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <getCommand+0x200>)
 8005ebe:	4949      	ldr	r1, [pc, #292]	; (8005fe4 <getCommand+0x204>)
 8005ec0:	795a      	ldrb	r2, [r3, #5]
 8005ec2:	0030      	movs	r0, r6
 8005ec4:	f00c fc22 	bl	801270c <sprintf>
 8005ec8:	e7c8      	b.n	8005e5c <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005eca:	0028      	movs	r0, r5
 8005ecc:	aa01      	add	r2, sp, #4
 8005ece:	2102      	movs	r1, #2
 8005ed0:	f007 f946 	bl	800d160 <FreeRTOS_CLIGetParameter>
 8005ed4:	2400      	movs	r4, #0
 8005ed6:	0007      	movs	r7, r0
 8005ed8:	4d43      	ldr	r5, [pc, #268]	; (8005fe8 <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005eda:	0029      	movs	r1, r5
 8005edc:	0038      	movs	r0, r7
 8005ede:	f7fa f911 	bl	8000104 <strcmp>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d01b      	beq.n	8005f1e <getCommand+0x13e>
 8005ee6:	3401      	adds	r4, #1
 8005ee8:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8005eea:	2c0a      	cmp	r4, #10
 8005eec:	d1f5      	bne.n	8005eda <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005eee:	003a      	movs	r2, r7
 8005ef0:	493e      	ldr	r1, [pc, #248]	; (8005fec <getCommand+0x20c>)
 8005ef2:	0030      	movs	r0, r6
 8005ef4:	f00c fc0a 	bl	801270c <sprintf>
			return pdFALSE;
 8005ef8:	e7b0      	b.n	8005e5c <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005efa:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <getCommand+0x1d8>)
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d007      	beq.n	8005f12 <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d195      	bne.n	8005e32 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005f06:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <getCommand+0x210>)
 8005f08:	493a      	ldr	r1, [pc, #232]	; (8005ff4 <getCommand+0x214>)
 8005f0a:	0030      	movs	r0, r6
 8005f0c:	f00c fbfe 	bl	801270c <sprintf>
 8005f10:	e7a4      	b.n	8005e5c <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005f12:	4a39      	ldr	r2, [pc, #228]	; (8005ff8 <getCommand+0x218>)
 8005f14:	4937      	ldr	r1, [pc, #220]	; (8005ff4 <getCommand+0x214>)
 8005f16:	0030      	movs	r0, r6
 8005f18:	f00c fbf8 	bl	801270c <sprintf>
 8005f1c:	e79e      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005f1e:	003a      	movs	r2, r7
 8005f20:	4936      	ldr	r1, [pc, #216]	; (8005ffc <getCommand+0x21c>)
 8005f22:	0030      	movs	r0, r6
 8005f24:	f00c fbf2 	bl	801270c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8005f28:	4f35      	ldr	r7, [pc, #212]	; (8006000 <getCommand+0x220>)
 8005f2a:	783b      	ldrb	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d095      	beq.n	8005e5c <getCommand+0x7c>
 8005f30:	2501      	movs	r5, #1
 8005f32:	4b34      	ldr	r3, [pc, #208]	; (8006004 <getCommand+0x224>)
 8005f34:	40a5      	lsls	r5, r4
 8005f36:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f38:	4b33      	ldr	r3, [pc, #204]	; (8006008 <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 8005f3a:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f3c:	4699      	mov	r9, r3
 8005f3e:	e005      	b.n	8005f4c <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8005f40:	3401      	adds	r4, #1
 8005f42:	783b      	ldrb	r3, [r7, #0]
 8005f44:	b2e4      	uxtb	r4, r4
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	d200      	bcs.n	8005f4c <getCommand+0x16c>
 8005f4a:	e787      	b.n	8005e5c <getCommand+0x7c>
				if(InGroup(j,i)){
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	1e63      	subs	r3, r4, #1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	5ad3      	ldrh	r3, [r2, r3]
 8005f54:	421d      	tst	r5, r3
 8005f56:	d0f3      	beq.n	8005f40 <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f58:	0023      	movs	r3, r4
 8005f5a:	0032      	movs	r2, r6
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	0030      	movs	r0, r6
 8005f60:	f00c fbd4 	bl	801270c <sprintf>
 8005f64:	e7ec      	b.n	8005f40 <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005f66:	4a29      	ldr	r2, [pc, #164]	; (800600c <getCommand+0x22c>)
 8005f68:	4922      	ldr	r1, [pc, #136]	; (8005ff4 <getCommand+0x214>)
 8005f6a:	0030      	movs	r0, r6
 8005f6c:	f00c fbce 	bl	801270c <sprintf>
 8005f70:	e774      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <getCommand+0x200>)
 8005f74:	491b      	ldr	r1, [pc, #108]	; (8005fe4 <getCommand+0x204>)
 8005f76:	885a      	ldrh	r2, [r3, #2]
 8005f78:	0030      	movs	r0, r6
 8005f7a:	f00c fbc7 	bl	801270c <sprintf>
 8005f7e:	e76d      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <getCommand+0x200>)
 8005f82:	4918      	ldr	r1, [pc, #96]	; (8005fe4 <getCommand+0x204>)
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	0030      	movs	r0, r6
 8005f88:	f00c fbc0 	bl	801270c <sprintf>
 8005f8c:	e766      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <getCommand+0x200>)
 8005f90:	4914      	ldr	r1, [pc, #80]	; (8005fe4 <getCommand+0x204>)
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	0030      	movs	r0, r6
 8005f96:	f00c fbb9 	bl	801270c <sprintf>
 8005f9a:	e75f      	b.n	8005e5c <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <getCommand+0x200>)
 8005f9e:	4911      	ldr	r1, [pc, #68]	; (8005fe4 <getCommand+0x204>)
 8005fa0:	791a      	ldrb	r2, [r3, #4]
 8005fa2:	0030      	movs	r0, r6
 8005fa4:	f00c fbb2 	bl	801270c <sprintf>
 8005fa8:	e758      	b.n	8005e5c <getCommand+0x7c>
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	2000192c 	.word	0x2000192c
 8005fb0:	08018268 	.word	0x08018268
 8005fb4:	08018270 	.word	0x08018270
 8005fb8:	20006a00 	.word	0x20006a00
 8005fbc:	08018304 	.word	0x08018304
 8005fc0:	080182e0 	.word	0x080182e0
 8005fc4:	080182f0 	.word	0x080182f0
 8005fc8:	08018288 	.word	0x08018288
 8005fcc:	08018290 	.word	0x08018290
 8005fd0:	0801829c 	.word	0x0801829c
 8005fd4:	080182a8 	.word	0x080182a8
 8005fd8:	080182b8 	.word	0x080182b8
 8005fdc:	080182cc 	.word	0x080182cc
 8005fe0:	20006a80 	.word	0x20006a80
 8005fe4:	08017a7c 	.word	0x08017a7c
 8005fe8:	20000ad0 	.word	0x20000ad0
 8005fec:	08018324 	.word	0x08018324
 8005ff0:	0801827c 	.word	0x0801827c
 8005ff4:	080172fc 	.word	0x080172fc
 8005ff8:	08017420 	.word	0x08017420
 8005ffc:	08018340 	.word	0x08018340
 8006000:	20000008 	.word	0x20000008
 8006004:	20000a9c 	.word	0x20000a9c
 8006008:	080182e8 	.word	0x080182e8
 800600c:	08018280 	.word	0x08018280

08006010 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006010:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006016:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006018:	0006      	movs	r6, r0
 800601a:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800601c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 800601e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006020:	f007 f89e 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006024:	9d01      	ldr	r5, [sp, #4]
 8006026:	491f      	ldr	r1, [pc, #124]	; (80060a4 <defaultCommand+0x94>)
 8006028:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800602a:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800602c:	f00c fbb2 	bl	8012794 <strncmp>
 8006030:	2800      	cmp	r0, #0
 8006032:	d026      	beq.n	8006082 <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006034:	002a      	movs	r2, r5
 8006036:	491c      	ldr	r1, [pc, #112]	; (80060a8 <defaultCommand+0x98>)
 8006038:	0020      	movs	r0, r4
 800603a:	f00c fbab 	bl	8012794 <strncmp>
 800603e:	2800      	cmp	r0, #0
 8006040:	d119      	bne.n	8006076 <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006042:	2116      	movs	r1, #22
 8006044:	2200      	movs	r2, #0
 8006046:	20ff      	movs	r0, #255	; 0xff
 8006048:	f002 f890 	bl	800816c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800604c:	2202      	movs	r2, #2
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <defaultCommand+0x9c>)
		osDelay(100);
 8006050:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006052:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006054:	f006 ff78 	bl	800cf48 <osDelay>
		ClearEEportsDir();
 8006058:	f7fd fb00 	bl	800365c <ClearEEportsDir>
		ClearROtopology();
 800605c:	f003 fd8e 	bl	8009b7c <ClearROtopology>
		osDelay(100);
 8006060:	2064      	movs	r0, #100	; 0x64
 8006062:	f006 ff71 	bl	800cf48 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	4911      	ldr	r1, [pc, #68]	; (80060b0 <defaultCommand+0xa0>)
 800606a:	0030      	movs	r0, r6
 800606c:	f00c f94b 	bl	8012306 <memcpy>
}
 8006070:	2000      	movs	r0, #0
 8006072:	b002      	add	sp, #8
 8006074:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006076:	220f      	movs	r2, #15
 8006078:	490e      	ldr	r1, [pc, #56]	; (80060b4 <defaultCommand+0xa4>)
 800607a:	0030      	movs	r0, r6
 800607c:	f00c f943 	bl	8012306 <memcpy>
 8006080:	e7f6      	b.n	8006070 <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006082:	490d      	ldr	r1, [pc, #52]	; (80060b8 <defaultCommand+0xa8>)
 8006084:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <defaultCommand+0xac>)
 8006086:	000a      	movs	r2, r1
 8006088:	cb13      	ldmia	r3!, {r0, r1, r4}
 800608a:	c213      	stmia	r2!, {r0, r1, r4}
 800608c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800608e:	c213      	stmia	r2!, {r0, r1, r4}
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006094:	f7fd fa9e 	bl	80035d4 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006098:	2227      	movs	r2, #39	; 0x27
 800609a:	4909      	ldr	r1, [pc, #36]	; (80060c0 <defaultCommand+0xb0>)
 800609c:	0030      	movs	r0, r6
 800609e:	f00c f932 	bl	8012306 <memcpy>
 80060a2:	e7e5      	b.n	8006070 <defaultCommand+0x60>
 80060a4:	08018354 	.word	0x08018354
 80060a8:	08018384 	.word	0x08018384
 80060ac:	2000117e 	.word	0x2000117e
 80060b0:	0801839c 	.word	0x0801839c
 80060b4:	0801838c 	.word	0x0801838c
 80060b8:	20006a80 	.word	0x20006a80
 80060bc:	20000014 	.word	0x20000014
 80060c0:	0801835c 	.word	0x0801835c

080060c4 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	46de      	mov	lr, fp
 80060c8:	4657      	mov	r7, sl
 80060ca:	464e      	mov	r6, r9
 80060cc:	4645      	mov	r5, r8
 80060ce:	b5e0      	push	{r5, r6, r7, lr}
 80060d0:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060d2:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d4:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d6:	aa09      	add	r2, sp, #36	; 0x24
 80060d8:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060da:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060dc:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	930a      	str	r3, [sp, #40]	; 0x28
 80060e2:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80060e4:	930c      	str	r3, [sp, #48]	; 0x30
 80060e6:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e8:	f007 f83a 	bl	800d160 <FreeRTOS_CLIGetParameter>
 80060ec:	4ccf      	ldr	r4, [pc, #828]	; (800642c <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ee:	2204      	movs	r2, #4
 80060f0:	49cf      	ldr	r1, [pc, #828]	; (8006430 <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060f2:	0006      	movs	r6, r0
 80060f4:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f6:	f00c fb4d 	bl	8012794 <strncmp>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d100      	bne.n	8006100 <setCommand+0x3c>
 80060fe:	e082      	b.n	8006206 <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006100:	2204      	movs	r2, #4
 8006102:	49cc      	ldr	r1, [pc, #816]	; (8006434 <setCommand+0x370>)
 8006104:	0030      	movs	r0, r6
 8006106:	f00c fb45 	bl	8012794 <strncmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	d014      	beq.n	8006138 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800610e:	2204      	movs	r2, #4
 8006110:	49c9      	ldr	r1, [pc, #804]	; (8006438 <setCommand+0x374>)
 8006112:	0030      	movs	r0, r6
 8006114:	f00c fb3e 	bl	8012794 <strncmp>
 8006118:	2800      	cmp	r0, #0
 800611a:	d100      	bne.n	800611e <setCommand+0x5a>
 800611c:	e0e0      	b.n	80062e0 <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800611e:	2213      	movs	r2, #19
 8006120:	49c6      	ldr	r1, [pc, #792]	; (800643c <setCommand+0x378>)
 8006122:	0028      	movs	r0, r5
 8006124:	f00c f8ef 	bl	8012306 <memcpy>
}
 8006128:	2000      	movs	r0, #0
 800612a:	b00f      	add	sp, #60	; 0x3c
 800612c:	bc3c      	pop	{r2, r3, r4, r5}
 800612e:	4690      	mov	r8, r2
 8006130:	4699      	mov	r9, r3
 8006132:	46a2      	mov	sl, r4
 8006134:	46ab      	mov	fp, r5
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006138:	aa0a      	add	r2, sp, #40	; 0x28
 800613a:	2102      	movs	r1, #2
 800613c:	0038      	movs	r0, r7
 800613e:	f007 f80f 	bl	800d160 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006142:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006144:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006146:	2103      	movs	r1, #3
 8006148:	0038      	movs	r0, r7
 800614a:	f007 f809 	bl	800d160 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800614e:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006150:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006152:	2104      	movs	r1, #4
 8006154:	0038      	movs	r0, r7
 8006156:	f007 f803 	bl	800d160 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800615a:	aa0d      	add	r2, sp, #52	; 0x34
 800615c:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800615e:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006160:	0038      	movs	r0, r7
 8006162:	f006 fffd 	bl	800d160 <FreeRTOS_CLIGetParameter>
 8006166:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006168:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800616a:	f00b fe06 	bl	8011d7a <atoi>
 800616e:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006170:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006172:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006174:	f00b fe01 	bl	8011d7a <atoi>
 8006178:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800617a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800617c:	f00b fdfd 	bl	8011d7a <atoi>
		if(pcParameterString5 != NULL){
 8006180:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006182:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 8006184:	2e00      	cmp	r6, #0
 8006186:	d010      	beq.n	80061aa <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006188:	2202      	movs	r2, #2
 800618a:	49ad      	ldr	r1, [pc, #692]	; (8006440 <setCommand+0x37c>)
 800618c:	0030      	movs	r0, r6
 800618e:	f00c fb01 	bl	8012794 <strncmp>
 8006192:	2800      	cmp	r0, #0
 8006194:	d100      	bne.n	8006198 <setCommand+0xd4>
 8006196:	e145      	b.n	8006424 <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006198:	2202      	movs	r2, #2
 800619a:	49aa      	ldr	r1, [pc, #680]	; (8006444 <setCommand+0x380>)
 800619c:	0030      	movs	r0, r6
 800619e:	f00c faf9 	bl	8012794 <strncmp>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d129      	bne.n	80061fa <setCommand+0x136>
				temp84 =RTC_PM;
 80061a6:	2302      	movs	r3, #2
 80061a8:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061aa:	464b      	mov	r3, r9
 80061ac:	2b17      	cmp	r3, #23
 80061ae:	d824      	bhi.n	80061fa <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80061b0:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061b2:	2f3b      	cmp	r7, #59	; 0x3b
 80061b4:	d821      	bhi.n	80061fa <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80061b6:	4653      	mov	r3, sl
 80061b8:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061ba:	2e3b      	cmp	r6, #59	; 0x3b
 80061bc:	d81d      	bhi.n	80061fa <setCommand+0x136>
				GetTimeDate();
 80061be:	f006 fabb 	bl	800c738 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80061c2:	4ba1      	ldr	r3, [pc, #644]	; (8006448 <setCommand+0x384>)
 80061c4:	7d1a      	ldrb	r2, [r3, #20]
 80061c6:	7d59      	ldrb	r1, [r3, #21]
 80061c8:	7d98      	ldrb	r0, [r3, #22]
 80061ca:	4694      	mov	ip, r2
 80061cc:	8b1a      	ldrh	r2, [r3, #24]
 80061ce:	7b1b      	ldrb	r3, [r3, #12]
 80061d0:	9701      	str	r7, [sp, #4]
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	4643      	mov	r3, r8
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	464b      	mov	r3, r9
 80061dc:	9600      	str	r6, [sp, #0]
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	4663      	mov	r3, ip
 80061e2:	f006 fa4f 	bl	800c684 <BOS_CalendarConfig>
 80061e6:	4681      	mov	r9, r0
	if(result == BOS_OK){
 80061e8:	464b      	mov	r3, r9
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d100      	bne.n	80061f0 <setCommand+0x12c>
 80061ee:	e24d      	b.n	800668c <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 80061f0:	464b      	mov	r3, r9
 80061f2:	2b67      	cmp	r3, #103	; 0x67
 80061f4:	d093      	beq.n	800611e <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 80061f6:	2b68      	cmp	r3, #104	; 0x68
 80061f8:	d196      	bne.n	8006128 <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061fa:	220f      	movs	r2, #15
 80061fc:	4993      	ldr	r1, [pc, #588]	; (800644c <setCommand+0x388>)
 80061fe:	0028      	movs	r0, r5
 8006200:	f00c f881 	bl	8012306 <memcpy>
 8006204:	e790      	b.n	8006128 <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006206:	aa0a      	add	r2, sp, #40	; 0x28
 8006208:	2102      	movs	r1, #2
 800620a:	0038      	movs	r0, r7
 800620c:	f006 ffa8 	bl	800d160 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006212:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006214:	1d1e      	adds	r6, r3, #4
 8006216:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006218:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800621a:	1f1f      	subs	r7, r3, #4
 800621c:	4b8c      	ldr	r3, [pc, #560]	; (8006450 <setCommand+0x38c>)
 800621e:	003a      	movs	r2, r7
 8006220:	0019      	movs	r1, r3
 8006222:	0030      	movs	r0, r6
 8006224:	4699      	mov	r9, r3
 8006226:	f00c fab5 	bl	8012794 <strncmp>
 800622a:	2800      	cmp	r0, #0
 800622c:	d128      	bne.n	8006280 <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800622e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006230:	4988      	ldr	r1, [pc, #544]	; (8006454 <setCommand+0x390>)
 8006232:	0032      	movs	r2, r6
 8006234:	4640      	mov	r0, r8
 8006236:	f00c faad 	bl	8012794 <strncmp>
 800623a:	2800      	cmp	r0, #0
 800623c:	d100      	bne.n	8006240 <setCommand+0x17c>
 800623e:	e21a      	b.n	8006676 <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006240:	0032      	movs	r2, r6
 8006242:	4985      	ldr	r1, [pc, #532]	; (8006458 <setCommand+0x394>)
 8006244:	4640      	mov	r0, r8
 8006246:	f00c faa5 	bl	8012794 <strncmp>
 800624a:	2800      	cmp	r0, #0
 800624c:	d100      	bne.n	8006250 <setCommand+0x18c>
 800624e:	e256      	b.n	80066fe <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006250:	0032      	movs	r2, r6
 8006252:	4982      	ldr	r1, [pc, #520]	; (800645c <setCommand+0x398>)
 8006254:	4640      	mov	r0, r8
 8006256:	f00c fa9d 	bl	8012794 <strncmp>
 800625a:	2800      	cmp	r0, #0
 800625c:	d100      	bne.n	8006260 <setCommand+0x19c>
 800625e:	e222      	b.n	80066a6 <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006260:	0032      	movs	r2, r6
 8006262:	497f      	ldr	r1, [pc, #508]	; (8006460 <setCommand+0x39c>)
 8006264:	4640      	mov	r0, r8
 8006266:	f00c fa95 	bl	8012794 <strncmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	d1c5      	bne.n	80061fa <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800626e:	4b7d      	ldr	r3, [pc, #500]	; (8006464 <setCommand+0x3a0>)
 8006270:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006272:	208a      	movs	r0, #138	; 0x8a
 8006274:	7859      	ldrb	r1, [r3, #1]
 8006276:	0040      	lsls	r0, r0, #1
 8006278:	0209      	lsls	r1, r1, #8
 800627a:	f004 fbd5 	bl	800aa28 <EE_WriteVariable>
 800627e:	e205      	b.n	800668c <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006280:	003a      	movs	r2, r7
 8006282:	4979      	ldr	r1, [pc, #484]	; (8006468 <setCommand+0x3a4>)
 8006284:	0030      	movs	r0, r6
 8006286:	f00c fa85 	bl	8012794 <strncmp>
 800628a:	2800      	cmp	r0, #0
 800628c:	d000      	beq.n	8006290 <setCommand+0x1cc>
 800628e:	e08d      	b.n	80063ac <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006290:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006292:	4970      	ldr	r1, [pc, #448]	; (8006454 <setCommand+0x390>)
 8006294:	0032      	movs	r2, r6
 8006296:	4640      	mov	r0, r8
 8006298:	f00c fa7c 	bl	8012794 <strncmp>
 800629c:	2800      	cmp	r0, #0
 800629e:	d100      	bne.n	80062a2 <setCommand+0x1de>
 80062a0:	e239      	b.n	8006716 <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80062a2:	0032      	movs	r2, r6
 80062a4:	496c      	ldr	r1, [pc, #432]	; (8006458 <setCommand+0x394>)
 80062a6:	4640      	mov	r0, r8
 80062a8:	f00c fa74 	bl	8012794 <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d100      	bne.n	80062b2 <setCommand+0x1ee>
 80062b0:	e213      	b.n	80066da <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80062b2:	0032      	movs	r2, r6
 80062b4:	4649      	mov	r1, r9
 80062b6:	4640      	mov	r0, r8
 80062b8:	f00c fa6c 	bl	8012794 <strncmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d100      	bne.n	80062c2 <setCommand+0x1fe>
 80062c0:	e274      	b.n	80067ac <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062c2:	0032      	movs	r2, r6
 80062c4:	4966      	ldr	r1, [pc, #408]	; (8006460 <setCommand+0x39c>)
 80062c6:	4640      	mov	r0, r8
 80062c8:	f00c fa64 	bl	8012794 <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d194      	bne.n	80061fa <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80062d0:	4b64      	ldr	r3, [pc, #400]	; (8006464 <setCommand+0x3a0>)
 80062d2:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062d4:	3015      	adds	r0, #21
 80062d6:	7819      	ldrb	r1, [r3, #0]
 80062d8:	30ff      	adds	r0, #255	; 0xff
 80062da:	f004 fba5 	bl	800aa28 <EE_WriteVariable>
 80062de:	e1d5      	b.n	800668c <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062e0:	aa0a      	add	r2, sp, #40	; 0x28
 80062e2:	2102      	movs	r1, #2
 80062e4:	0038      	movs	r0, r7
 80062e6:	f006 ff3b 	bl	800d160 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ea:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062ec:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062ee:	2103      	movs	r1, #3
 80062f0:	0038      	movs	r0, r7
 80062f2:	f006 ff35 	bl	800d160 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062f6:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062f8:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062fa:	2104      	movs	r1, #4
 80062fc:	0038      	movs	r0, r7
 80062fe:	f006 ff2f 	bl	800d160 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006302:	aa0d      	add	r2, sp, #52	; 0x34
 8006304:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006306:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006308:	0038      	movs	r0, r7
 800630a:	f006 ff29 	bl	800d160 <FreeRTOS_CLIGetParameter>
 800630e:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006310:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006312:	f00b fd32 	bl	8011d7a <atoi>
 8006316:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006318:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800631a:	f00b fd2e 	bl	8011d7a <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800631e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006320:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006322:	2206      	movs	r2, #6
 8006324:	4951      	ldr	r1, [pc, #324]	; (800646c <setCommand+0x3a8>)
 8006326:	0038      	movs	r0, r7
 8006328:	f00c fa34 	bl	8012794 <strncmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	d100      	bne.n	8006332 <setCommand+0x26e>
 8006330:	e0b6      	b.n	80064a0 <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006332:	2207      	movs	r2, #7
 8006334:	494e      	ldr	r1, [pc, #312]	; (8006470 <setCommand+0x3ac>)
 8006336:	0038      	movs	r0, r7
 8006338:	f00c fa2c 	bl	8012794 <strncmp>
 800633c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800633e:	9006      	str	r0, [sp, #24]
 8006340:	2207      	movs	r2, #7
 8006342:	494c      	ldr	r1, [pc, #304]	; (8006474 <setCommand+0x3b0>)
 8006344:	0030      	movs	r0, r6
 8006346:	f00c fa25 	bl	8012794 <strncmp>
 800634a:	9b06      	ldr	r3, [sp, #24]
 800634c:	4681      	mov	r9, r0
 800634e:	9007      	str	r0, [sp, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d100      	bne.n	8006356 <setCommand+0x292>
 8006354:	e1a4      	b.n	80066a0 <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006356:	2209      	movs	r2, #9
 8006358:	4947      	ldr	r1, [pc, #284]	; (8006478 <setCommand+0x3b4>)
 800635a:	0038      	movs	r0, r7
 800635c:	f00c fa1a 	bl	8012794 <strncmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	d100      	bne.n	8006366 <setCommand+0x2a2>
 8006364:	e211      	b.n	800678a <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006366:	2208      	movs	r2, #8
 8006368:	4944      	ldr	r1, [pc, #272]	; (800647c <setCommand+0x3b8>)
 800636a:	0038      	movs	r0, r7
 800636c:	f00c fa12 	bl	8012794 <strncmp>
 8006370:	2800      	cmp	r0, #0
 8006372:	d100      	bne.n	8006376 <setCommand+0x2b2>
 8006374:	e220      	b.n	80067b8 <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006376:	2206      	movs	r2, #6
 8006378:	4941      	ldr	r1, [pc, #260]	; (8006480 <setCommand+0x3bc>)
 800637a:	0038      	movs	r0, r7
 800637c:	f00c fa0a 	bl	8012794 <strncmp>
 8006380:	2800      	cmp	r0, #0
 8006382:	d100      	bne.n	8006386 <setCommand+0x2c2>
 8006384:	e22e      	b.n	80067e4 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006386:	2208      	movs	r2, #8
 8006388:	493e      	ldr	r1, [pc, #248]	; (8006484 <setCommand+0x3c0>)
 800638a:	0038      	movs	r0, r7
 800638c:	f00c fa02 	bl	8012794 <strncmp>
 8006390:	2800      	cmp	r0, #0
 8006392:	d100      	bne.n	8006396 <setCommand+0x2d2>
 8006394:	e229      	b.n	80067ea <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006396:	2206      	movs	r2, #6
 8006398:	493b      	ldr	r1, [pc, #236]	; (8006488 <setCommand+0x3c4>)
 800639a:	0038      	movs	r0, r7
 800639c:	f00c f9fa 	bl	8012794 <strncmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d000      	beq.n	80063a6 <setCommand+0x2e2>
 80063a4:	e262      	b.n	800686c <setCommand+0x7a8>
			temp81 =SUNDAY;
 80063a6:	2307      	movs	r3, #7
 80063a8:	469b      	mov	fp, r3
 80063aa:	e082      	b.n	80064b2 <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80063ac:	003a      	movs	r2, r7
 80063ae:	4937      	ldr	r1, [pc, #220]	; (800648c <setCommand+0x3c8>)
 80063b0:	0030      	movs	r0, r6
 80063b2:	f00c f9ef 	bl	8012794 <strncmp>
 80063b6:	4681      	mov	r9, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x2fa>
 80063bc:	e1b7      	b.n	800672e <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80063be:	003a      	movs	r2, r7
 80063c0:	4933      	ldr	r1, [pc, #204]	; (8006490 <setCommand+0x3cc>)
 80063c2:	0030      	movs	r0, r6
 80063c4:	f00c f9e6 	bl	8012794 <strncmp>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d100      	bne.n	80063ce <setCommand+0x30a>
 80063cc:	e177      	b.n	80066be <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80063ce:	003a      	movs	r2, r7
 80063d0:	4930      	ldr	r1, [pc, #192]	; (8006494 <setCommand+0x3d0>)
 80063d2:	0030      	movs	r0, r6
 80063d4:	f00c f9de 	bl	8012794 <strncmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d100      	bne.n	80063de <setCommand+0x31a>
 80063dc:	e1d8      	b.n	8006790 <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80063de:	003a      	movs	r2, r7
 80063e0:	492d      	ldr	r1, [pc, #180]	; (8006498 <setCommand+0x3d4>)
 80063e2:	0030      	movs	r0, r6
 80063e4:	f00c f9d6 	bl	8012794 <strncmp>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d100      	bne.n	80063ee <setCommand+0x32a>
 80063ec:	e1e7      	b.n	80067be <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80063ee:	003a      	movs	r2, r7
 80063f0:	492a      	ldr	r1, [pc, #168]	; (800649c <setCommand+0x3d8>)
 80063f2:	0030      	movs	r0, r6
 80063f4:	f00c f9ce 	bl	8012794 <strncmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d000      	beq.n	80063fe <setCommand+0x33a>
 80063fc:	e68f      	b.n	800611e <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 80063fe:	4640      	mov	r0, r8
 8006400:	f00b fcbb 	bl	8011d7a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006404:	1e43      	subs	r3, r0, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	2bfe      	cmp	r3, #254	; 0xfe
 800640a:	d900      	bls.n	800640e <setCommand+0x34a>
 800640c:	e6f5      	b.n	80061fa <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 800640e:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006410:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 8006412:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006414:	0200      	lsls	r0, r0, #8
 8006416:	4301      	orrs	r1, r0
 8006418:	2018      	movs	r0, #24
 800641a:	b289      	uxth	r1, r1
 800641c:	30ff      	adds	r0, #255	; 0xff
 800641e:	f004 fb03 	bl	800aa28 <EE_WriteVariable>
 8006422:	e133      	b.n	800668c <setCommand+0x5c8>
				temp84 =RTC_AM;
 8006424:	2301      	movs	r3, #1
 8006426:	4698      	mov	r8, r3
 8006428:	e6bf      	b.n	80061aa <setCommand+0xe6>
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	2000192c 	.word	0x2000192c
 8006430:	08018268 	.word	0x08018268
 8006434:	080184e0 	.word	0x080184e0
 8006438:	080184f0 	.word	0x080184f0
 800643c:	080182f0 	.word	0x080182f0
 8006440:	080184e8 	.word	0x080184e8
 8006444:	080184ec 	.word	0x080184ec
 8006448:	20006a80 	.word	0x20006a80
 800644c:	0801838c 	.word	0x0801838c
 8006450:	08018270 	.word	0x08018270
 8006454:	08017420 	.word	0x08017420
 8006458:	080183dc 	.word	0x080183dc
 800645c:	080183e4 	.word	0x080183e4
 8006460:	08018280 	.word	0x08018280
 8006464:	20006a00 	.word	0x20006a00
 8006468:	08018288 	.word	0x08018288
 800646c:	080184f8 	.word	0x080184f8
 8006470:	08018500 	.word	0x08018500
 8006474:	08018508 	.word	0x08018508
 8006478:	08018510 	.word	0x08018510
 800647c:	0801851c 	.word	0x0801851c
 8006480:	08018528 	.word	0x08018528
 8006484:	08018530 	.word	0x08018530
 8006488:	0801853c 	.word	0x0801853c
 800648c:	08018290 	.word	0x08018290
 8006490:	0801829c 	.word	0x0801829c
 8006494:	080182a8 	.word	0x080182a8
 8006498:	080182b8 	.word	0x080182b8
 800649c:	080182cc 	.word	0x080182cc
 80064a0:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80064a2:	2207      	movs	r2, #7
 80064a4:	49d3      	ldr	r1, [pc, #844]	; (80067f4 <setCommand+0x730>)
 80064a6:	0030      	movs	r0, r6
 80064a8:	f00c f974 	bl	8012794 <strncmp>
			temp81 =MONDAY;
 80064ac:	2301      	movs	r3, #1
 80064ae:	4681      	mov	r9, r0
 80064b0:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064b2:	464b      	mov	r3, r9
			temp82 =JANUARY;
 80064b4:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d123      	bne.n	8006502 <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064ba:	4643      	mov	r3, r8
 80064bc:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064be:	1e73      	subs	r3, r6, #1
 80064c0:	2b1e      	cmp	r3, #30
 80064c2:	d900      	bls.n	80064c6 <setCommand+0x402>
 80064c4:	e699      	b.n	80061fa <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064c6:	4653      	mov	r3, sl
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064cc:	4bca      	ldr	r3, [pc, #808]	; (80067f8 <setCommand+0x734>)
 80064ce:	4453      	add	r3, sl
 80064d0:	2b64      	cmp	r3, #100	; 0x64
 80064d2:	d900      	bls.n	80064d6 <setCommand+0x412>
 80064d4:	e691      	b.n	80061fa <setCommand+0x136>
				GetTimeDate();
 80064d6:	f006 f92f 	bl	800c738 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80064da:	220c      	movs	r2, #12
 80064dc:	4bc7      	ldr	r3, [pc, #796]	; (80067fc <setCommand+0x738>)
 80064de:	0031      	movs	r1, r6
 80064e0:	569a      	ldrsb	r2, [r3, r2]
 80064e2:	0038      	movs	r0, r7
 80064e4:	9204      	str	r2, [sp, #16]
 80064e6:	7cda      	ldrb	r2, [r3, #19]
 80064e8:	9203      	str	r2, [sp, #12]
 80064ea:	7c9a      	ldrb	r2, [r3, #18]
 80064ec:	9202      	str	r2, [sp, #8]
 80064ee:	7c5a      	ldrb	r2, [r3, #17]
 80064f0:	9201      	str	r2, [sp, #4]
 80064f2:	7c1b      	ldrb	r3, [r3, #16]
 80064f4:	4652      	mov	r2, sl
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	465b      	mov	r3, fp
 80064fa:	f006 f8c3 	bl	800c684 <BOS_CalendarConfig>
 80064fe:	4681      	mov	r9, r0
 8006500:	e672      	b.n	80061e8 <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006502:	2202      	movs	r2, #2
 8006504:	49be      	ldr	r1, [pc, #760]	; (8006800 <setCommand+0x73c>)
 8006506:	0030      	movs	r0, r6
 8006508:	f00c f944 	bl	8012794 <strncmp>
 800650c:	2800      	cmp	r0, #0
 800650e:	d0d4      	beq.n	80064ba <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006510:	2208      	movs	r2, #8
 8006512:	49bc      	ldr	r1, [pc, #752]	; (8006804 <setCommand+0x740>)
 8006514:	0030      	movs	r0, r6
 8006516:	f00c f93d 	bl	8012794 <strncmp>
 800651a:	2800      	cmp	r0, #0
 800651c:	d100      	bne.n	8006520 <setCommand+0x45c>
 800651e:	e1c8      	b.n	80068b2 <setCommand+0x7ee>
 8006520:	2202      	movs	r2, #2
 8006522:	49b9      	ldr	r1, [pc, #740]	; (8006808 <setCommand+0x744>)
 8006524:	0030      	movs	r0, r6
 8006526:	f00c f935 	bl	8012794 <strncmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	d100      	bne.n	8006530 <setCommand+0x46c>
 800652e:	e1c0      	b.n	80068b2 <setCommand+0x7ee>
 8006530:	2300      	movs	r3, #0
 8006532:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006534:	2205      	movs	r2, #5
 8006536:	49b5      	ldr	r1, [pc, #724]	; (800680c <setCommand+0x748>)
 8006538:	0030      	movs	r0, r6
 800653a:	f00c f92b 	bl	8012794 <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d100      	bne.n	8006544 <setCommand+0x480>
 8006542:	e0d6      	b.n	80066f2 <setCommand+0x62e>
 8006544:	2202      	movs	r2, #2
 8006546:	49b2      	ldr	r1, [pc, #712]	; (8006810 <setCommand+0x74c>)
 8006548:	0030      	movs	r0, r6
 800654a:	f00c f923 	bl	8012794 <strncmp>
 800654e:	2800      	cmp	r0, #0
 8006550:	d100      	bne.n	8006554 <setCommand+0x490>
 8006552:	e0ce      	b.n	80066f2 <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006554:	2205      	movs	r2, #5
 8006556:	49af      	ldr	r1, [pc, #700]	; (8006814 <setCommand+0x750>)
 8006558:	0030      	movs	r0, r6
 800655a:	f00c f91b 	bl	8012794 <strncmp>
 800655e:	2800      	cmp	r0, #0
 8006560:	d100      	bne.n	8006564 <setCommand+0x4a0>
 8006562:	e145      	b.n	80067f0 <setCommand+0x72c>
 8006564:	2202      	movs	r2, #2
 8006566:	49ac      	ldr	r1, [pc, #688]	; (8006818 <setCommand+0x754>)
 8006568:	0030      	movs	r0, r6
 800656a:	f00c f913 	bl	8012794 <strncmp>
 800656e:	2800      	cmp	r0, #0
 8006570:	d100      	bne.n	8006574 <setCommand+0x4b0>
 8006572:	e13d      	b.n	80067f0 <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006574:	2203      	movs	r2, #3
 8006576:	49a9      	ldr	r1, [pc, #676]	; (800681c <setCommand+0x758>)
 8006578:	0030      	movs	r0, r6
 800657a:	f00c f90b 	bl	8012794 <strncmp>
 800657e:	2800      	cmp	r0, #0
 8006580:	d100      	bne.n	8006584 <setCommand+0x4c0>
 8006582:	e192      	b.n	80068aa <setCommand+0x7e6>
 8006584:	2202      	movs	r2, #2
 8006586:	49a6      	ldr	r1, [pc, #664]	; (8006820 <setCommand+0x75c>)
 8006588:	0030      	movs	r0, r6
 800658a:	f00c f903 	bl	8012794 <strncmp>
 800658e:	2800      	cmp	r0, #0
 8006590:	d100      	bne.n	8006594 <setCommand+0x4d0>
 8006592:	e18a      	b.n	80068aa <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006594:	2204      	movs	r2, #4
 8006596:	49a3      	ldr	r1, [pc, #652]	; (8006824 <setCommand+0x760>)
 8006598:	0030      	movs	r0, r6
 800659a:	f00c f8fb 	bl	8012794 <strncmp>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d100      	bne.n	80065a4 <setCommand+0x4e0>
 80065a2:	e184      	b.n	80068ae <setCommand+0x7ea>
 80065a4:	2202      	movs	r2, #2
 80065a6:	49a0      	ldr	r1, [pc, #640]	; (8006828 <setCommand+0x764>)
 80065a8:	0030      	movs	r0, r6
 80065aa:	f00c f8f3 	bl	8012794 <strncmp>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d100      	bne.n	80065b4 <setCommand+0x4f0>
 80065b2:	e17c      	b.n	80068ae <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80065b4:	2204      	movs	r2, #4
 80065b6:	499d      	ldr	r1, [pc, #628]	; (800682c <setCommand+0x768>)
 80065b8:	0030      	movs	r0, r6
 80065ba:	f00c f8eb 	bl	8012794 <strncmp>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d100      	bne.n	80065c4 <setCommand+0x500>
 80065c2:	e178      	b.n	80068b6 <setCommand+0x7f2>
 80065c4:	2202      	movs	r2, #2
 80065c6:	499a      	ldr	r1, [pc, #616]	; (8006830 <setCommand+0x76c>)
 80065c8:	0030      	movs	r0, r6
 80065ca:	f00c f8e3 	bl	8012794 <strncmp>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d100      	bne.n	80065d4 <setCommand+0x510>
 80065d2:	e170      	b.n	80068b6 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80065d4:	2205      	movs	r2, #5
 80065d6:	4997      	ldr	r1, [pc, #604]	; (8006834 <setCommand+0x770>)
 80065d8:	0030      	movs	r0, r6
 80065da:	f00c f8db 	bl	8012794 <strncmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x520>
 80065e2:	e170      	b.n	80068c6 <setCommand+0x802>
 80065e4:	2202      	movs	r2, #2
 80065e6:	4994      	ldr	r1, [pc, #592]	; (8006838 <setCommand+0x774>)
 80065e8:	0030      	movs	r0, r6
 80065ea:	f00c f8d3 	bl	8012794 <strncmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d100      	bne.n	80065f4 <setCommand+0x530>
 80065f2:	e168      	b.n	80068c6 <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80065f4:	2209      	movs	r2, #9
 80065f6:	4991      	ldr	r1, [pc, #580]	; (800683c <setCommand+0x778>)
 80065f8:	0030      	movs	r0, r6
 80065fa:	f00c f8cb 	bl	8012794 <strncmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d100      	bne.n	8006604 <setCommand+0x540>
 8006602:	e15e      	b.n	80068c2 <setCommand+0x7fe>
 8006604:	2202      	movs	r2, #2
 8006606:	498e      	ldr	r1, [pc, #568]	; (8006840 <setCommand+0x77c>)
 8006608:	0030      	movs	r0, r6
 800660a:	f00c f8c3 	bl	8012794 <strncmp>
 800660e:	2800      	cmp	r0, #0
 8006610:	d100      	bne.n	8006614 <setCommand+0x550>
 8006612:	e156      	b.n	80068c2 <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006614:	2207      	movs	r2, #7
 8006616:	498b      	ldr	r1, [pc, #556]	; (8006844 <setCommand+0x780>)
 8006618:	0030      	movs	r0, r6
 800661a:	f00c f8bb 	bl	8012794 <strncmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	d100      	bne.n	8006624 <setCommand+0x560>
 8006622:	e14c      	b.n	80068be <setCommand+0x7fa>
 8006624:	2202      	movs	r2, #2
 8006626:	4988      	ldr	r1, [pc, #544]	; (8006848 <setCommand+0x784>)
 8006628:	0030      	movs	r0, r6
 800662a:	f00c f8b3 	bl	8012794 <strncmp>
 800662e:	2800      	cmp	r0, #0
 8006630:	d100      	bne.n	8006634 <setCommand+0x570>
 8006632:	e144      	b.n	80068be <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006634:	2208      	movs	r2, #8
 8006636:	4985      	ldr	r1, [pc, #532]	; (800684c <setCommand+0x788>)
 8006638:	0030      	movs	r0, r6
 800663a:	f00c f8ab 	bl	8012794 <strncmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	d100      	bne.n	8006644 <setCommand+0x580>
 8006642:	e13a      	b.n	80068ba <setCommand+0x7f6>
 8006644:	2202      	movs	r2, #2
 8006646:	4982      	ldr	r1, [pc, #520]	; (8006850 <setCommand+0x78c>)
 8006648:	0030      	movs	r0, r6
 800664a:	f00c f8a3 	bl	8012794 <strncmp>
 800664e:	2800      	cmp	r0, #0
 8006650:	d100      	bne.n	8006654 <setCommand+0x590>
 8006652:	e132      	b.n	80068ba <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006654:	2208      	movs	r2, #8
 8006656:	497f      	ldr	r1, [pc, #508]	; (8006854 <setCommand+0x790>)
 8006658:	0030      	movs	r0, r6
 800665a:	f00c f89b 	bl	8012794 <strncmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	d007      	beq.n	8006672 <setCommand+0x5ae>
 8006662:	2202      	movs	r2, #2
 8006664:	497c      	ldr	r1, [pc, #496]	; (8006858 <setCommand+0x794>)
 8006666:	0030      	movs	r0, r6
 8006668:	f00c f894 	bl	8012794 <strncmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	d000      	beq.n	8006672 <setCommand+0x5ae>
 8006670:	e5c3      	b.n	80061fa <setCommand+0x136>
			temp82 =DECEMBER;
 8006672:	270c      	movs	r7, #12
 8006674:	e03e      	b.n	80066f4 <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006676:	2260      	movs	r2, #96	; 0x60
 8006678:	4b78      	ldr	r3, [pc, #480]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800667a:	3015      	adds	r0, #21
 800667c:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800667e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006680:	2360      	movs	r3, #96	; 0x60
 8006682:	0209      	lsls	r1, r1, #8
 8006684:	4319      	orrs	r1, r3
 8006686:	30ff      	adds	r0, #255	; 0xff
 8006688:	f004 f9ce 	bl	800aa28 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800668c:	2300      	movs	r3, #0
 800668e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006692:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006694:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006698:	4971      	ldr	r1, [pc, #452]	; (8006860 <setCommand+0x79c>)
 800669a:	f00c f837 	bl	801270c <sprintf>
	return pdFALSE;
 800669e:	e543      	b.n	8006128 <setCommand+0x64>
			temp81 =TUESDAY;
 80066a0:	2302      	movs	r3, #2
 80066a2:	469b      	mov	fp, r3
 80066a4:	e705      	b.n	80064b2 <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066a6:	2240      	movs	r2, #64	; 0x40
 80066a8:	4b6c      	ldr	r3, [pc, #432]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066aa:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066ac:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066ae:	7859      	ldrb	r1, [r3, #1]
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	0209      	lsls	r1, r1, #8
 80066b4:	4319      	orrs	r1, r3
 80066b6:	30ff      	adds	r0, #255	; 0xff
 80066b8:	f004 f9b6 	bl	800aa28 <EE_WriteVariable>
 80066bc:	e7e6      	b.n	800668c <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 80066be:	4640      	mov	r0, r8
 80066c0:	f00b fb5b 	bl	8011d7a <atoi>
 80066c4:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d100      	bne.n	80066cc <setCommand+0x608>
 80066ca:	e596      	b.n	80061fa <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066cc:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80066ce:	4b4b      	ldr	r3, [pc, #300]	; (80067fc <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066d0:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80066d2:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066d4:	f004 f9a8 	bl	800aa28 <EE_WriteVariable>
 80066d8:	e7d8      	b.n	800668c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80066da:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066dc:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 80066de:	4b5f      	ldr	r3, [pc, #380]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e0:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 80066e2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	3015      	adds	r0, #21
 80066e8:	4319      	orrs	r1, r3
 80066ea:	30ff      	adds	r0, #255	; 0xff
 80066ec:	f004 f99c 	bl	800aa28 <EE_WriteVariable>
 80066f0:	e7cc      	b.n	800668c <setCommand+0x5c8>
			temp82 =MARCH;
 80066f2:	2703      	movs	r7, #3
		if(result == BOS_OK){
 80066f4:	464b      	mov	r3, r9
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d000      	beq.n	80066fc <setCommand+0x638>
 80066fa:	e579      	b.n	80061f0 <setCommand+0x12c>
 80066fc:	e6dd      	b.n	80064ba <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066fe:	2220      	movs	r2, #32
 8006700:	4b56      	ldr	r3, [pc, #344]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006702:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006704:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006706:	7859      	ldrb	r1, [r3, #1]
 8006708:	2320      	movs	r3, #32
 800670a:	0209      	lsls	r1, r1, #8
 800670c:	4319      	orrs	r1, r3
 800670e:	30ff      	adds	r0, #255	; 0xff
 8006710:	f004 f98a 	bl	800aa28 <EE_WriteVariable>
 8006714:	e7ba      	b.n	800668c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 8006716:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006718:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 800671a:	4b50      	ldr	r3, [pc, #320]	; (800685c <setCommand+0x798>)
 800671c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800671e:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006720:	0089      	lsls	r1, r1, #2
 8006722:	3015      	adds	r0, #21
 8006724:	4319      	orrs	r1, r3
 8006726:	30ff      	adds	r0, #255	; 0xff
 8006728:	f004 f97e 	bl	800aa28 <EE_WriteVariable>
 800672c:	e7ae      	b.n	800668c <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 800672e:	4640      	mov	r0, r8
 8006730:	f00b fb23 	bl	8011d7a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006734:	23e1      	movs	r3, #225	; 0xe1
 8006736:	031b      	lsls	r3, r3, #12
 8006738:	4298      	cmp	r0, r3
 800673a:	d900      	bls.n	800673e <setCommand+0x67a>
 800673c:	e55d      	b.n	80061fa <setCommand+0x136>
				BOS.clibaudrate =temp2;
 800673e:	4e2f      	ldr	r6, [pc, #188]	; (80067fc <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006740:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006742:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006744:	208c      	movs	r0, #140	; 0x8c
 8006746:	0040      	lsls	r0, r0, #1
 8006748:	f004 f96e 	bl	800aa28 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800674c:	201a      	movs	r0, #26
 800674e:	8971      	ldrh	r1, [r6, #10]
 8006750:	30ff      	adds	r0, #255	; 0xff
 8006752:	f004 f969 	bl	800aa28 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006756:	4649      	mov	r1, r9
 8006758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800675c:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800675e:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006762:	493f      	ldr	r1, [pc, #252]	; (8006860 <setCommand+0x79c>)
 8006764:	f00b ffd2 	bl	801270c <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006768:	0028      	movs	r0, r5
 800676a:	f7f9 fcd5 	bl	8000118 <strlen>
 800676e:	0004      	movs	r4, r0
 8006770:	2230      	movs	r2, #48	; 0x30
 8006772:	1828      	adds	r0, r5, r0
 8006774:	493b      	ldr	r1, [pc, #236]	; (8006864 <setCommand+0x7a0>)
 8006776:	f00b fdc6 	bl	8012306 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 800677a:	0020      	movs	r0, r4
 800677c:	302f      	adds	r0, #47	; 0x2f
 800677e:	1828      	adds	r0, r5, r0
 8006780:	22b2      	movs	r2, #178	; 0xb2
 8006782:	4939      	ldr	r1, [pc, #228]	; (8006868 <setCommand+0x7a4>)
 8006784:	f00b fdbf 	bl	8012306 <memcpy>
 8006788:	e4ce      	b.n	8006128 <setCommand+0x64>
			temp81 =WEDNESDAY;
 800678a:	2303      	movs	r3, #3
 800678c:	469b      	mov	fp, r3
 800678e:	e690      	b.n	80064b2 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 8006790:	4640      	mov	r0, r8
 8006792:	f00b faf2 	bl	8011d7a <atoi>
 8006796:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006798:	2900      	cmp	r1, #0
 800679a:	d100      	bne.n	800679e <setCommand+0x6da>
 800679c:	e52d      	b.n	80061fa <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800679e:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067a2:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 80067a4:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067a6:	f004 f93f 	bl	800aa28 <EE_WriteVariable>
 80067aa:	e76f      	b.n	800668c <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 80067ac:	2202      	movs	r2, #2
 80067ae:	4b2b      	ldr	r3, [pc, #172]	; (800685c <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067b0:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80067b2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	e7b3      	b.n	8006720 <setCommand+0x65c>
			temp81 =THURSDAY;
 80067b8:	2304      	movs	r3, #4
 80067ba:	469b      	mov	fp, r3
 80067bc:	e679      	b.n	80064b2 <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80067be:	4640      	mov	r0, r8
 80067c0:	f00b fadb 	bl	8011d7a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067c4:	1e43      	subs	r3, r0, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2bfe      	cmp	r3, #254	; 0xfe
 80067ca:	d900      	bls.n	80067ce <setCommand+0x70a>
 80067cc:	e515      	b.n	80061fa <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <setCommand+0x738>)
 80067d0:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067d2:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80067d4:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067d6:	0209      	lsls	r1, r1, #8
 80067d8:	4301      	orrs	r1, r0
 80067da:	2018      	movs	r0, #24
 80067dc:	30ff      	adds	r0, #255	; 0xff
 80067de:	f004 f923 	bl	800aa28 <EE_WriteVariable>
 80067e2:	e753      	b.n	800668c <setCommand+0x5c8>
			temp81 =FRIDAY;
 80067e4:	2305      	movs	r3, #5
 80067e6:	469b      	mov	fp, r3
 80067e8:	e663      	b.n	80064b2 <setCommand+0x3ee>
			temp81 =SATURDAY;
 80067ea:	2306      	movs	r3, #6
 80067ec:	469b      	mov	fp, r3
 80067ee:	e660      	b.n	80064b2 <setCommand+0x3ee>
			temp82 =APRIL;
 80067f0:	2704      	movs	r7, #4
 80067f2:	e77f      	b.n	80066f4 <setCommand+0x630>
 80067f4:	08018508 	.word	0x08018508
 80067f8:	fffff830 	.word	0xfffff830
 80067fc:	20006a80 	.word	0x20006a80
 8006800:	080185c4 	.word	0x080185c4
 8006804:	080185c8 	.word	0x080185c8
 8006808:	080185d4 	.word	0x080185d4
 800680c:	08018544 	.word	0x08018544
 8006810:	0801854c 	.word	0x0801854c
 8006814:	08018550 	.word	0x08018550
 8006818:	08018558 	.word	0x08018558
 800681c:	0801855c 	.word	0x0801855c
 8006820:	08018560 	.word	0x08018560
 8006824:	08018564 	.word	0x08018564
 8006828:	0801856c 	.word	0x0801856c
 800682c:	08018570 	.word	0x08018570
 8006830:	08018578 	.word	0x08018578
 8006834:	0801857c 	.word	0x0801857c
 8006838:	08018584 	.word	0x08018584
 800683c:	08018588 	.word	0x08018588
 8006840:	08018594 	.word	0x08018594
 8006844:	08018598 	.word	0x08018598
 8006848:	080185a0 	.word	0x080185a0
 800684c:	080185a4 	.word	0x080185a4
 8006850:	080185b0 	.word	0x080185b0
 8006854:	080185b4 	.word	0x080185b4
 8006858:	080185c0 	.word	0x080185c0
 800685c:	20006a00 	.word	0x20006a00
 8006860:	080183e8 	.word	0x080183e8
 8006864:	080183fc 	.word	0x080183fc
 8006868:	0801842c 	.word	0x0801842c
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d100      	bne.n	8006874 <setCommand+0x7b0>
 8006872:	e4c2      	b.n	80061fa <setCommand+0x136>
 8006874:	2202      	movs	r2, #2
 8006876:	4915      	ldr	r1, [pc, #84]	; (80068cc <setCommand+0x808>)
 8006878:	0030      	movs	r0, r6
 800687a:	f00b ff8b 	bl	8012794 <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d100      	bne.n	8006884 <setCommand+0x7c0>
 8006882:	e4ba      	b.n	80061fa <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006884:	2208      	movs	r2, #8
 8006886:	4912      	ldr	r1, [pc, #72]	; (80068d0 <setCommand+0x80c>)
 8006888:	0030      	movs	r0, r6
 800688a:	f00b ff83 	bl	8012794 <strncmp>
 800688e:	2800      	cmp	r0, #0
 8006890:	d100      	bne.n	8006894 <setCommand+0x7d0>
 8006892:	e4b2      	b.n	80061fa <setCommand+0x136>
 8006894:	2202      	movs	r2, #2
 8006896:	490f      	ldr	r1, [pc, #60]	; (80068d4 <setCommand+0x810>)
 8006898:	0030      	movs	r0, r6
 800689a:	f00b ff7b 	bl	8012794 <strncmp>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d100      	bne.n	80068a4 <setCommand+0x7e0>
 80068a2:	e4aa      	b.n	80061fa <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 80068a4:	2368      	movs	r3, #104	; 0x68
 80068a6:	4699      	mov	r9, r3
 80068a8:	e644      	b.n	8006534 <setCommand+0x470>
			temp82 =MAY;
 80068aa:	2705      	movs	r7, #5
 80068ac:	e722      	b.n	80066f4 <setCommand+0x630>
			temp82 =JUNE;
 80068ae:	2706      	movs	r7, #6
 80068b0:	e720      	b.n	80066f4 <setCommand+0x630>
			temp82 =FEBRUARY;
 80068b2:	2702      	movs	r7, #2
 80068b4:	e601      	b.n	80064ba <setCommand+0x3f6>
			temp82 =JULY;
 80068b6:	2707      	movs	r7, #7
 80068b8:	e71c      	b.n	80066f4 <setCommand+0x630>
			temp82 =NOVEMBER;
 80068ba:	270b      	movs	r7, #11
 80068bc:	e71a      	b.n	80066f4 <setCommand+0x630>
			temp82 =OCTOBER;
 80068be:	270a      	movs	r7, #10
 80068c0:	e718      	b.n	80066f4 <setCommand+0x630>
			temp82 =SEPTEMBER;
 80068c2:	2709      	movs	r7, #9
 80068c4:	e716      	b.n	80066f4 <setCommand+0x630>
			temp82 =AUGUST;
 80068c6:	2708      	movs	r7, #8
 80068c8:	e714      	b.n	80066f4 <setCommand+0x630>
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	080185c4 	.word	0x080185c4
 80068d0:	080185c8 	.word	0x080185c8
 80068d4:	080185d4 	.word	0x080185d4

080068d8 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80068d8:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068da:	b530      	push	{r4, r5, lr}
 80068dc:	b083      	sub	sp, #12
 80068de:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e0:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068e2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e4:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80068e6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e8:	f006 fc3a 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80068ec:	2300      	movs	r3, #0
 80068ee:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 80068f0:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 80068f2:	2b70      	cmp	r3, #112	; 0x70
 80068f4:	d00d      	beq.n	8006912 <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 80068f6:	0020      	movs	r0, r4
 80068f8:	f004 fc8e 	bl	800b218 <RemovePortButton>
	if(result == BOS_OK){
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d105      	bne.n	800690c <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006900:	0023      	movs	r3, r4
 8006902:	0022      	movs	r2, r4
 8006904:	4905      	ldr	r1, [pc, #20]	; (800691c <removebuttonCommand+0x44>)
 8006906:	0028      	movs	r0, r5
 8006908:	f00b ff00 	bl	801270c <sprintf>
}
 800690c:	2000      	movs	r0, #0
 800690e:	b003      	add	sp, #12
 8006910:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006912:	3001      	adds	r0, #1
 8006914:	f00b fa37 	bl	8011d86 <atol>
 8006918:	b2c4      	uxtb	r4, r0
 800691a:	e7ec      	b.n	80068f6 <removebuttonCommand+0x1e>
 800691c:	080185d8 	.word	0x080185d8

08006920 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006922:	46ce      	mov	lr, r9
 8006924:	4647      	mov	r7, r8
 8006926:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006928:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800692a:	b580      	push	{r7, lr}
 800692c:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800692e:	aa02      	add	r2, sp, #8
 8006930:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006932:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006934:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800693a:	f006 fc11 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800693e:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006942:	003a      	movs	r2, r7
 8006944:	4924      	ldr	r1, [pc, #144]	; (80069d8 <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006946:	0004      	movs	r4, r0
 8006948:	4699      	mov	r9, r3
 800694a:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800694c:	f00b ff22 	bl	8012794 <strncmp>
		type =MOMENTARY_NO;
 8006950:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006952:	2800      	cmp	r0, #0
 8006954:	d007      	beq.n	8006966 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006956:	003a      	movs	r2, r7
 8006958:	4920      	ldr	r1, [pc, #128]	; (80069dc <addbuttonCommand+0xbc>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00b ff1a 	bl	8012794 <strncmp>
		type =MOMENTARY_NC;
 8006960:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006962:	2800      	cmp	r0, #0
 8006964:	d11f      	bne.n	80069a6 <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006966:	aa03      	add	r2, sp, #12
 8006968:	2102      	movs	r1, #2
 800696a:	0030      	movs	r0, r6
 800696c:	f006 fbf8 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006970:	2300      	movs	r3, #0
 8006972:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006974:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006976:	2b70      	cmp	r3, #112	; 0x70
 8006978:	d026      	beq.n	80069c8 <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 800697a:	0021      	movs	r1, r4
 800697c:	0028      	movs	r0, r5
 800697e:	f004 fbd1 	bl	800b124 <AddPortButton>
	if(result == BOS_OK){
 8006982:	2800      	cmp	r0, #0
 8006984:	d109      	bne.n	800699a <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006986:	464b      	mov	r3, r9
 8006988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800698a:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 800698c:	4914      	ldr	r1, [pc, #80]	; (80069e0 <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 800698e:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006990:	9400      	str	r4, [sp, #0]
 8006992:	0023      	movs	r3, r4
 8006994:	4640      	mov	r0, r8
 8006996:	f00b feb9 	bl	801270c <sprintf>
}
 800699a:	2000      	movs	r0, #0
 800699c:	b005      	add	sp, #20
 800699e:	bc0c      	pop	{r2, r3}
 80069a0:	4690      	mov	r8, r2
 80069a2:	4699      	mov	r9, r3
 80069a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069a6:	003a      	movs	r2, r7
 80069a8:	490e      	ldr	r1, [pc, #56]	; (80069e4 <addbuttonCommand+0xc4>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	f00b fef2 	bl	8012794 <strncmp>
		type =ONOFF_NO;
 80069b0:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d0d7      	beq.n	8006966 <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80069b6:	003a      	movs	r2, r7
 80069b8:	490b      	ldr	r1, [pc, #44]	; (80069e8 <addbuttonCommand+0xc8>)
 80069ba:	0020      	movs	r0, r4
 80069bc:	f00b feea 	bl	8012794 <strncmp>
		type =ONOFF_NC;
 80069c0:	4245      	negs	r5, r0
 80069c2:	4145      	adcs	r5, r0
 80069c4:	00ad      	lsls	r5, r5, #2
 80069c6:	e7ce      	b.n	8006966 <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80069c8:	3001      	adds	r0, #1
 80069ca:	f00b f9dc 	bl	8011d86 <atol>
 80069ce:	b2c4      	uxtb	r4, r0
 80069d0:	e7d3      	b.n	800697a <addbuttonCommand+0x5a>
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	2000192c 	.word	0x2000192c
 80069d8:	08018600 	.word	0x08018600
 80069dc:	08018610 	.word	0x08018610
 80069e0:	08018638 	.word	0x08018638
 80069e4:	08018620 	.word	0x08018620
 80069e8:	0801862c 	.word	0x0801862c

080069ec <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ee:	46de      	mov	lr, fp
 80069f0:	464e      	mov	r6, r9
 80069f2:	4657      	mov	r7, sl
 80069f4:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069f6:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069f8:	0014      	movs	r4, r2
 80069fa:	b5e0      	push	{r5, r6, r7, lr}
 80069fc:	b099      	sub	sp, #100	; 0x64
 80069fe:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a00:	220a      	movs	r2, #10
 8006a02:	2100      	movs	r1, #0
 8006a04:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006a06:	9308      	str	r3, [sp, #32]
 8006a08:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0a:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a10:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006a12:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a14:	f00b fc80 	bl	8012318 <memset>
 8006a18:	220a      	movs	r2, #10
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	a812      	add	r0, sp, #72	; 0x48
 8006a1e:	f00b fc7b 	bl	8012318 <memset>
 8006a22:	220a      	movs	r2, #10
 8006a24:	2100      	movs	r1, #0
 8006a26:	a815      	add	r0, sp, #84	; 0x54
 8006a28:	f00b fc76 	bl	8012318 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a2c:	aa08      	add	r2, sp, #32
 8006a2e:	2101      	movs	r1, #1
 8006a30:	0020      	movs	r0, r4
 8006a32:	f006 fb95 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a36:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a38:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006a3a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a3c:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006a3e:	2b50      	cmp	r3, #80	; 0x50
 8006a40:	d100      	bne.n	8006a44 <scastCommand+0x58>
 8006a42:	e085      	b.n	8006b50 <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a44:	aa09      	add	r2, sp, #36	; 0x24
 8006a46:	2102      	movs	r1, #2
 8006a48:	0020      	movs	r0, r4
 8006a4a:	f006 fb89 	bl	800d160 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a50:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a52:	a80f      	add	r0, sp, #60	; 0x3c
 8006a54:	f00b feaf 	bl	80127b6 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006a58:	a80f      	add	r0, sp, #60	; 0x3c
 8006a5a:	f7fd fbf5 	bl	8004248 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a5e:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006a60:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a62:	2103      	movs	r1, #3
 8006a64:	0020      	movs	r0, r4
 8006a66:	f006 fb7b 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006a6a:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a6c:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006a6e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a70:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006a72:	2b70      	cmp	r3, #112	; 0x70
 8006a74:	d066      	beq.n	8006b44 <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a76:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a78:	2104      	movs	r1, #4
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	f006 fb70 	bl	800d160 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a82:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a84:	a812      	add	r0, sp, #72	; 0x48
 8006a86:	f00b fe96 	bl	80127b6 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006a8a:	a812      	add	r0, sp, #72	; 0x48
 8006a8c:	f7fd fbdc 	bl	8004248 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a90:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006a92:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a94:	2105      	movs	r1, #5
 8006a96:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006a98:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a9a:	f006 fb61 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa0:	492e      	ldr	r1, [pc, #184]	; (8006b5c <scastCommand+0x170>)
 8006aa2:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006aa4:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aa6:	4698      	mov	r8, r3
 8006aa8:	f00b fe74 	bl	8012794 <strncmp>
		direction =FORWARD;
 8006aac:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d007      	beq.n	8006ac2 <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	492a      	ldr	r1, [pc, #168]	; (8006b60 <scastCommand+0x174>)
 8006ab6:	0038      	movs	r0, r7
 8006ab8:	f00b fe6c 	bl	8012794 <strncmp>
		direction =BACKWARD;
 8006abc:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d137      	bne.n	8006b32 <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006ac2:	0039      	movs	r1, r7
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	a815      	add	r0, sp, #84	; 0x54
 8006ac8:	f00b fe75 	bl	80127b6 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006acc:	aa0d      	add	r2, sp, #52	; 0x34
 8006ace:	2106      	movs	r1, #6
 8006ad0:	0020      	movs	r0, r4
 8006ad2:	f006 fb45 	bl	800d160 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ad6:	f00b f956 	bl	8011d86 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ada:	aa0e      	add	r2, sp, #56	; 0x38
 8006adc:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ade:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f006 fb3d 	bl	800d160 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ae6:	f00b f94e 	bl	8011d86 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006aea:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006aec:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9002      	str	r0, [sp, #8]
 8006af2:	9701      	str	r7, [sp, #4]
 8006af4:	9600      	str	r6, [sp, #0]
 8006af6:	465b      	mov	r3, fp
 8006af8:	4652      	mov	r2, sl
 8006afa:	0029      	movs	r1, r5
 8006afc:	4648      	mov	r0, r9
 8006afe:	f001 fb59 	bl	80081b4 <StartScastDMAStream>
	if(result == BOS_OK){
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d10d      	bne.n	8006b22 <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006b06:	ab12      	add	r3, sp, #72	; 0x48
 8006b08:	9302      	str	r3, [sp, #8]
 8006b0a:	4653      	mov	r3, sl
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	ab0f      	add	r3, sp, #60	; 0x3c
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	9404      	str	r4, [sp, #16]
 8006b14:	9703      	str	r7, [sp, #12]
 8006b16:	464b      	mov	r3, r9
 8006b18:	aa15      	add	r2, sp, #84	; 0x54
 8006b1a:	4912      	ldr	r1, [pc, #72]	; (8006b64 <scastCommand+0x178>)
 8006b1c:	9807      	ldr	r0, [sp, #28]
 8006b1e:	f00b fdf5 	bl	801270c <sprintf>
}
 8006b22:	2000      	movs	r0, #0
 8006b24:	b019      	add	sp, #100	; 0x64
 8006b26:	bc3c      	pop	{r2, r3, r4, r5}
 8006b28:	4690      	mov	r8, r2
 8006b2a:	4699      	mov	r9, r3
 8006b2c:	46a2      	mov	sl, r4
 8006b2e:	46ab      	mov	fp, r5
 8006b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b32:	4642      	mov	r2, r8
 8006b34:	490c      	ldr	r1, [pc, #48]	; (8006b68 <scastCommand+0x17c>)
 8006b36:	0038      	movs	r0, r7
 8006b38:	f00b fe2c 	bl	8012794 <strncmp>
		direction =BIDIRECTIONAL;
 8006b3c:	4246      	negs	r6, r0
 8006b3e:	4146      	adcs	r6, r0
 8006b40:	0076      	lsls	r6, r6, #1
 8006b42:	e7be      	b.n	8006ac2 <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b44:	3001      	adds	r0, #1
 8006b46:	f00b f91e 	bl	8011d86 <atol>
 8006b4a:	b2c3      	uxtb	r3, r0
 8006b4c:	469a      	mov	sl, r3
 8006b4e:	e792      	b.n	8006a76 <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b50:	3001      	adds	r0, #1
 8006b52:	f00b f918 	bl	8011d86 <atol>
 8006b56:	b2c3      	uxtb	r3, r0
 8006b58:	4699      	mov	r9, r3
 8006b5a:	e773      	b.n	8006a44 <scastCommand+0x58>
 8006b5c:	0801866c 	.word	0x0801866c
 8006b60:	08018674 	.word	0x08018674
 8006b64:	08018690 	.word	0x08018690
 8006b68:	08018680 	.word	0x08018680

08006b6c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006b6e:	4d22      	ldr	r5, [pc, #136]	; (8006bf8 <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b70:	b083      	sub	sp, #12
	if(N > 1)
 8006b72:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b74:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006b76:	2700      	movs	r7, #0
	if(N > 1)
 8006b78:	2a01      	cmp	r2, #1
 8006b7a:	d903      	bls.n	8006b84 <infoCommand+0x18>
		result =ReadPortsDir();
 8006b7c:	f006 f8e6 	bl	800cd4c <ReadPortsDir>
 8006b80:	0007      	movs	r7, r0
 8006b82:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006b84:	491d      	ldr	r1, [pc, #116]	; (8006bfc <infoCommand+0x90>)
 8006b86:	0020      	movs	r0, r4
 8006b88:	f00b fdc0 	bl	801270c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006b8c:	2601      	movs	r6, #1
 8006b8e:	0020      	movs	r0, r4
 8006b90:	f7f9 fac2 	bl	8000118 <strlen>
 8006b94:	4d1a      	ldr	r5, [pc, #104]	; (8006c00 <infoCommand+0x94>)
 8006b96:	4276      	negs	r6, r6
 8006b98:	b282      	uxth	r2, r0
 8006b9a:	2332      	movs	r3, #50	; 0x32
 8006b9c:	7828      	ldrb	r0, [r5, #0]
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	9600      	str	r6, [sp, #0]
 8006ba2:	f006 f83d 	bl	800cc20 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006ba6:	2213      	movs	r2, #19
 8006ba8:	4916      	ldr	r1, [pc, #88]	; (8006c04 <infoCommand+0x98>)
 8006baa:	0020      	movs	r0, r4
 8006bac:	f00b fbab 	bl	8012306 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006bb0:	7828      	ldrb	r0, [r5, #0]
 8006bb2:	2332      	movs	r3, #50	; 0x32
 8006bb4:	2212      	movs	r2, #18
 8006bb6:	0021      	movs	r1, r4
 8006bb8:	9600      	str	r6, [sp, #0]
 8006bba:	f006 f831 	bl	800cc20 <writePxMutex>
	DisplayTopology(PcPort);
 8006bbe:	7828      	ldrb	r0, [r5, #0]
 8006bc0:	f7fd f880 	bl	8003cc4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006bc4:	7828      	ldrb	r0, [r5, #0]
 8006bc6:	f7fd f951 	bl	8003e6c <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006bca:	2f02      	cmp	r7, #2
 8006bcc:	d007      	beq.n	8006bde <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006bce:	2202      	movs	r2, #2
 8006bd0:	490d      	ldr	r1, [pc, #52]	; (8006c08 <infoCommand+0x9c>)
 8006bd2:	0020      	movs	r0, r4
 8006bd4:	f00b fb97 	bl	8012306 <memcpy>
}
 8006bd8:	2000      	movs	r0, #0
 8006bda:	b003      	add	sp, #12
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006bde:	2244      	movs	r2, #68	; 0x44
 8006be0:	490a      	ldr	r1, [pc, #40]	; (8006c0c <infoCommand+0xa0>)
 8006be2:	0020      	movs	r0, r4
 8006be4:	f00b fb8f 	bl	8012306 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006be8:	7828      	ldrb	r0, [r5, #0]
 8006bea:	2332      	movs	r3, #50	; 0x32
 8006bec:	9600      	str	r6, [sp, #0]
 8006bee:	2243      	movs	r2, #67	; 0x43
 8006bf0:	0021      	movs	r1, r4
 8006bf2:	f006 f815 	bl	800cc20 <writePxMutex>
 8006bf6:	e7ea      	b.n	8006bce <infoCommand+0x62>
 8006bf8:	20000008 	.word	0x20000008
 8006bfc:	08018718 	.word	0x08018718
 8006c00:	20000c28 	.word	0x20000c28
 8006c04:	08018734 	.word	0x08018734
 8006c08:	0801731c 	.word	0x0801731c
 8006c0c:	08018748 	.word	0x08018748

08006c10 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c10:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006c12:	2000      	movs	r0, #0
 8006c14:	f7fd f9a4 	bl	8003f60 <DisplayModuleStatus>
}
 8006c18:	2000      	movs	r0, #0
 8006c1a:	bd10      	pop	{r4, pc}

08006c1c <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1e:	46de      	mov	lr, fp
 8006c20:	464e      	mov	r6, r9
 8006c22:	4645      	mov	r5, r8
 8006c24:	4657      	mov	r7, sl
 8006c26:	b5e0      	push	{r5, r6, r7, lr}
 8006c28:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006c2a:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c2c:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006c2e:	2100      	movs	r1, #0
 8006c30:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c32:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006c34:	0030      	movs	r0, r6
 8006c36:	f00b fb6f 	bl	8012318 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	a803      	add	r0, sp, #12
 8006c40:	f00b fb6a 	bl	8012318 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c44:	4d52      	ldr	r5, [pc, #328]	; (8006d90 <groupCommand+0x174>)
 8006c46:	2101      	movs	r1, #1
 8006c48:	002a      	movs	r2, r5
 8006c4a:	4648      	mov	r0, r9
 8006c4c:	3250      	adds	r2, #80	; 0x50
 8006c4e:	f006 fa87 	bl	800d160 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c52:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c54:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c56:	a803      	add	r0, sp, #12
 8006c58:	f00b fdad 	bl	80127b6 <strncpy>
 8006c5c:	4c4d      	ldr	r4, [pc, #308]	; (8006d94 <groupCommand+0x178>)
 8006c5e:	0027      	movs	r7, r4
 8006c60:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006c62:	0021      	movs	r1, r4
 8006c64:	a803      	add	r0, sp, #12
 8006c66:	f7f9 fa4d 	bl	8000104 <strcmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d049      	beq.n	8006d02 <groupCommand+0xe6>
 8006c6e:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006c70:	42a7      	cmp	r7, r4
 8006c72:	d1f6      	bne.n	8006c62 <groupCommand+0x46>
	type =1;
 8006c74:	2301      	movs	r3, #1
 8006c76:	9301      	str	r3, [sp, #4]
	count =2;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	4946      	ldr	r1, [pc, #280]	; (8006d98 <groupCommand+0x17c>)
 8006c80:	4640      	mov	r0, r8
	count =2;
 8006c82:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c84:	f00b fb3f 	bl	8012306 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006c88:	002a      	movs	r2, r5
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	3258      	adds	r2, #88	; 0x58
 8006c8e:	4648      	mov	r0, r9
 8006c90:	f006 fa66 	bl	800d160 <FreeRTOS_CLIGetParameter>
 8006c94:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d069      	beq.n	8006d6e <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006c9e:	4b3f      	ldr	r3, [pc, #252]	; (8006d9c <groupCommand+0x180>)
		if(count > 2)
 8006ca0:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006ca2:	469b      	mov	fp, r3
 8006ca4:	e00e      	b.n	8006cc4 <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006ca6:	0031      	movs	r1, r6
 8006ca8:	4640      	mov	r0, r8
 8006caa:	f00b fd4f 	bl	801274c <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006cae:	002a      	movs	r2, r5
 8006cb0:	3401      	adds	r4, #1
 8006cb2:	b261      	sxtb	r1, r4
 8006cb4:	3258      	adds	r2, #88	; 0x58
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	55e9      	strb	r1, [r5, r7]
 8006cba:	f006 fa51 	bl	800d160 <FreeRTOS_CLIGetParameter>
 8006cbe:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d03e      	beq.n	8006d42 <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006cc4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006cc6:	0001      	movs	r1, r0
 8006cc8:	0022      	movs	r2, r4
 8006cca:	0030      	movs	r0, r6
 8006ccc:	f00b fd73 	bl	80127b6 <strncpy>
		module[xParameterStringLength] ='\0';
 8006cd0:	4653      	mov	r3, sl
		modID =GetID(module);
 8006cd2:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006cd4:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006cd6:	f7fd fab7 	bl	8004248 <GetID>
		if(modID < 0)
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	db14      	blt.n	8006d08 <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006cde:	b2c0      	uxtb	r0, r0
 8006ce0:	a903      	add	r1, sp, #12
 8006ce2:	f7fd fb7b 	bl	80043dc <AddModuleToGroup>
		if(result != BOS_OK)
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d11b      	bne.n	8006d22 <groupCommand+0x106>
		if(count > 2)
 8006cea:	57ec      	ldrsb	r4, [r5, r7]
 8006cec:	2c02      	cmp	r4, #2
 8006cee:	ddda      	ble.n	8006ca6 <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	f7f9 fa11 	bl	8000118 <strlen>
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	4440      	add	r0, r8
 8006cfa:	4659      	mov	r1, fp
 8006cfc:	f00b fb03 	bl	8012306 <memcpy>
 8006d00:	e7d1      	b.n	8006ca6 <groupCommand+0x8a>
			type =0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	e7b7      	b.n	8006c78 <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006d08:	0032      	movs	r2, r6
 8006d0a:	4925      	ldr	r1, [pc, #148]	; (8006da0 <groupCommand+0x184>)
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	f00b fcfd 	bl	801270c <sprintf>
}
 8006d12:	2000      	movs	r0, #0
 8006d14:	b011      	add	sp, #68	; 0x44
 8006d16:	bc3c      	pop	{r2, r3, r4, r5}
 8006d18:	4690      	mov	r8, r2
 8006d1a:	4699      	mov	r9, r3
 8006d1c:	46a2      	mov	sl, r4
 8006d1e:	46ab      	mov	fp, r5
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006d22:	2354      	movs	r3, #84	; 0x54
 8006d24:	56eb      	ldrsb	r3, [r5, r3]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d024      	beq.n	8006d74 <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006d2a:	2806      	cmp	r0, #6
 8006d2c:	d019      	beq.n	8006d62 <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006d2e:	2807      	cmp	r0, #7
 8006d30:	d028      	beq.n	8006d84 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006d32:	2808      	cmp	r0, #8
 8006d34:	d1ed      	bne.n	8006d12 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006d36:	aa03      	add	r2, sp, #12
 8006d38:	491a      	ldr	r1, [pc, #104]	; (8006da4 <groupCommand+0x188>)
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f00b fce6 	bl	801270c <sprintf>
 8006d40:	e7e7      	b.n	8006d12 <groupCommand+0xf6>
	else if(count == 2)
 8006d42:	57eb      	ldrsb	r3, [r5, r7]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d015      	beq.n	8006d74 <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006d48:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d4a:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d117      	bne.n	8006d80 <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006d50:	4915      	ldr	r1, [pc, #84]	; (8006da8 <groupCommand+0x18c>)
 8006d52:	0030      	movs	r0, r6
 8006d54:	f00b fcda 	bl	801270c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d58:	0031      	movs	r1, r6
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	f00b fcf6 	bl	801274c <strcat>
 8006d60:	e7d7      	b.n	8006d12 <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d62:	aa03      	add	r2, sp, #12
 8006d64:	4911      	ldr	r1, [pc, #68]	; (8006dac <groupCommand+0x190>)
 8006d66:	4640      	mov	r0, r8
 8006d68:	f00b fcd0 	bl	801270c <sprintf>
 8006d6c:	e7d1      	b.n	8006d12 <groupCommand+0xf6>
	else if(count == 2)
 8006d6e:	572b      	ldrsb	r3, [r5, r4]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d1e9      	bne.n	8006d48 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d74:	aa03      	add	r2, sp, #12
 8006d76:	490e      	ldr	r1, [pc, #56]	; (8006db0 <groupCommand+0x194>)
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f00b fcc7 	bl	801270c <sprintf>
 8006d7e:	e7c8      	b.n	8006d12 <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d80:	490c      	ldr	r1, [pc, #48]	; (8006db4 <groupCommand+0x198>)
 8006d82:	e7e6      	b.n	8006d52 <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006d84:	aa03      	add	r2, sp, #12
 8006d86:	490c      	ldr	r1, [pc, #48]	; (8006db8 <groupCommand+0x19c>)
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f00b fcbf 	bl	801270c <sprintf>
 8006d8e:	e7c0      	b.n	8006d12 <groupCommand+0xf6>
 8006d90:	2000192c 	.word	0x2000192c
 8006d94:	20000ad0 	.word	0x20000ad0
 8006d98:	0801878c 	.word	0x0801878c
 8006d9c:	08018798 	.word	0x08018798
 8006da0:	080188b8 	.word	0x080188b8
 8006da4:	08018878 	.word	0x08018878
 8006da8:	080187e4 	.word	0x080187e4
 8006dac:	08018804 	.word	0x08018804
 8006db0:	0801879c 	.word	0x0801879c
 8006db4:	080187c8 	.word	0x080187c8
 8006db8:	08018844 	.word	0x08018844

08006dbc <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dbc:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dbe:	4c1b      	ldr	r4, [pc, #108]	; (8006e2c <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dc0:	0006      	movs	r6, r0
 8006dc2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dc4:	0022      	movs	r2, r4
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	3260      	adds	r2, #96	; 0x60
 8006dca:	f006 f9c9 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dce:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dd0:	0001      	movs	r1, r0
 8006dd2:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	dd01      	ble.n	8006ddc <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006dd8:	2300      	movs	r3, #0
 8006dda:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006ddc:	4d14      	ldr	r5, [pc, #80]	; (8006e30 <nameCommand+0x74>)
 8006dde:	7828      	ldrb	r0, [r5, #0]
 8006de0:	f7fd fa92 	bl	8004308 <NameModule>
	if(result == BOS_OK)
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d007      	beq.n	8006df8 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006de8:	2806      	cmp	r0, #6
 8006dea:	d012      	beq.n	8006e12 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8006dec:	2807      	cmp	r0, #7
 8006dee:	d00a      	beq.n	8006e06 <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8006df0:	2808      	cmp	r0, #8
 8006df2:	d014      	beq.n	8006e1e <nameCommand+0x62>
}
 8006df4:	2000      	movs	r0, #0
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006df8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dfa:	782a      	ldrb	r2, [r5, #0]
 8006dfc:	490d      	ldr	r1, [pc, #52]	; (8006e34 <nameCommand+0x78>)
 8006dfe:	0030      	movs	r0, r6
 8006e00:	f00b fc84 	bl	801270c <sprintf>
 8006e04:	e7f6      	b.n	8006df4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e08:	490b      	ldr	r1, [pc, #44]	; (8006e38 <nameCommand+0x7c>)
 8006e0a:	0030      	movs	r0, r6
 8006e0c:	f00b fc7e 	bl	801270c <sprintf>
 8006e10:	e7f0      	b.n	8006df4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e14:	4909      	ldr	r1, [pc, #36]	; (8006e3c <nameCommand+0x80>)
 8006e16:	0030      	movs	r0, r6
 8006e18:	f00b fc78 	bl	801270c <sprintf>
 8006e1c:	e7ea      	b.n	8006df4 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e20:	4907      	ldr	r1, [pc, #28]	; (8006e40 <nameCommand+0x84>)
 8006e22:	0030      	movs	r0, r6
 8006e24:	f00b fc72 	bl	801270c <sprintf>
 8006e28:	e7e4      	b.n	8006df4 <nameCommand+0x38>
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	2000192c 	.word	0x2000192c
 8006e30:	20000a98 	.word	0x20000a98
 8006e34:	080188dc 	.word	0x080188dc
 8006e38:	08018844 	.word	0x08018844
 8006e3c:	08018804 	.word	0x08018804
 8006e40:	08018878 	.word	0x08018878

08006e44 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e46:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e48:	4c50      	ldr	r4, [pc, #320]	; (8006f8c <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4a:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e4c:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e4e:	b500      	push	{lr}
 8006e50:	0006      	movs	r6, r0
 8006e52:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e54:	3268      	adds	r2, #104	; 0x68
 8006e56:	2101      	movs	r1, #1
 8006e58:	0028      	movs	r0, r5
 8006e5a:	f006 f981 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d069      	beq.n	8006f36 <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006e62:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006e64:	494a      	ldr	r1, [pc, #296]	; (8006f90 <bootloaderUpdateCommand+0x14c>)
 8006e66:	f00b fc95 	bl	8012794 <strncmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d133      	bne.n	8006ed6 <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e6e:	0022      	movs	r2, r4
 8006e70:	2102      	movs	r1, #2
 8006e72:	326c      	adds	r2, #108	; 0x6c
 8006e74:	0028      	movs	r0, r5
 8006e76:	f006 f973 	bl	800d160 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e7a:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e7c:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e7e:	3274      	adds	r2, #116	; 0x74
 8006e80:	0028      	movs	r0, r5
 8006e82:	2103      	movs	r1, #3
 8006e84:	f006 f96c 	bl	800d160 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8006e88:	2200      	movs	r2, #0
 8006e8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e8c:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 8006e8e:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 8006e90:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006e92:	2a23      	cmp	r2, #35	; 0x23
 8006e94:	d029      	beq.n	8006eea <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 8006e96:	2300      	movs	r3, #0
 8006e98:	56c3      	ldrsb	r3, [r0, r3]
 8006e9a:	2b70      	cmp	r3, #112	; 0x70
 8006e9c:	d02f      	beq.n	8006efe <bootloaderUpdateCommand+0xba>
			if(module != myID){
 8006e9e:	4c3d      	ldr	r4, [pc, #244]	; (8006f94 <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 8006ea0:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 8006ea2:	7823      	ldrb	r3, [r4, #0]
 8006ea4:	42bb      	cmp	r3, r7
 8006ea6:	d033      	beq.n	8006f10 <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b3b      	ldr	r3, [pc, #236]	; (8006f98 <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eac:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006eae:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	4b3a      	ldr	r3, [pc, #232]	; (8006f9c <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb4:	0038      	movs	r0, r7
				messageParams[0] =port;
 8006eb6:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f001 f957 	bl	800816c <SendMessageToModule>
				osDelay(100);
 8006ebe:	2064      	movs	r0, #100	; 0x64
 8006ec0:	f006 f842 	bl	800cf48 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006ec4:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <bootloaderUpdateCommand+0x15c>)
 8006ec6:	7820      	ldrb	r0, [r4, #0]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	0039      	movs	r1, r7
 8006ecc:	4643      	mov	r3, r8
 8006ece:	f002 fe81 	bl	8009bd4 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006ed2:	2d68      	cmp	r5, #104	; 0x68
 8006ed4:	d104      	bne.n	8006ee0 <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006ed6:	220f      	movs	r2, #15
 8006ed8:	4932      	ldr	r1, [pc, #200]	; (8006fa4 <bootloaderUpdateCommand+0x160>)
 8006eda:	0030      	movs	r0, r6
 8006edc:	f00b fa13 	bl	8012306 <memcpy>
}
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	b002      	add	sp, #8
 8006ee4:	bc04      	pop	{r2}
 8006ee6:	4690      	mov	r8, r2
 8006ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006eea:	1c58      	adds	r0, r3, #1
 8006eec:	f00a ff4b 	bl	8011d86 <atol>
			if(pcParameterString3[0] == 'p'){
 8006ef0:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ef2:	b2c7      	uxtb	r7, r0
 8006ef4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 8006ef6:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 8006ef8:	56c3      	ldrsb	r3, [r0, r3]
 8006efa:	2b70      	cmp	r3, #112	; 0x70
 8006efc:	d1cf      	bne.n	8006e9e <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006efe:	3001      	adds	r0, #1
 8006f00:	f00a ff41 	bl	8011d86 <atol>
			if(module != myID){
 8006f04:	4c23      	ldr	r4, [pc, #140]	; (8006f94 <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f06:	b2c3      	uxtb	r3, r0
 8006f08:	4698      	mov	r8, r3
			if(module != myID){
 8006f0a:	7823      	ldrb	r3, [r4, #0]
 8006f0c:	42bb      	cmp	r3, r7
 8006f0e:	d1cb      	bne.n	8006ea8 <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006f10:	2300      	movs	r3, #0
 8006f12:	2200      	movs	r2, #0
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	2100      	movs	r1, #0
 8006f18:	3319      	adds	r3, #25
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f000 fec6 	bl	8007cac <SendMessageFromPort>
				osDelay(100);
 8006f20:	2064      	movs	r0, #100	; 0x64
 8006f22:	f006 f811 	bl	800cf48 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006f26:	7820      	ldrb	r0, [r4, #0]
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <bootloaderUpdateCommand+0x15c>)
 8006f2a:	0001      	movs	r1, r0
 8006f2c:	781a      	ldrb	r2, [r3, #0]
 8006f2e:	4643      	mov	r3, r8
 8006f30:	f002 fe50 	bl	8009bd4 <remoteBootloaderUpdate>
 8006f34:	e7cd      	b.n	8006ed2 <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <bootloaderUpdateCommand+0x150>)
 8006f38:	491b      	ldr	r1, [pc, #108]	; (8006fa8 <bootloaderUpdateCommand+0x164>)
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	0030      	movs	r0, r6
 8006f3e:	f00b fbe5 	bl	801270c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f42:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <bootloaderUpdateCommand+0x168>)
 8006f44:	0030      	movs	r0, r6
 8006f46:	6819      	ldr	r1, [r3, #0]
 8006f48:	f00b fc00 	bl	801274c <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f4c:	0030      	movs	r0, r6
 8006f4e:	f7f9 f8e3 	bl	8000118 <strlen>
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <bootloaderUpdateCommand+0x15c>)
 8006f54:	b282      	uxth	r2, r0
 8006f56:	7818      	ldrb	r0, [r3, #0]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	425b      	negs	r3, r3
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	0031      	movs	r1, r6
 8006f60:	3333      	adds	r3, #51	; 0x33
 8006f62:	f005 fe5d 	bl	800cc20 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <bootloaderUpdateCommand+0x16c>)
 8006f68:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8006f6a:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f6c:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <bootloaderUpdateCommand+0x174>)
 8006f72:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f74:	f005 ffe8 	bl	800cf48 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <bootloaderUpdateCommand+0x178>)
 8006f7e:	4a10      	ldr	r2, [pc, #64]	; (8006fc0 <bootloaderUpdateCommand+0x17c>)
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	e7fd      	b.n	8006f86 <bootloaderUpdateCommand+0x142>
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	2000192c 	.word	0x2000192c
 8006f90:	08018914 	.word	0x08018914
 8006f94:	20000a98 	.word	0x20000a98
 8006f98:	20006a00 	.word	0x20006a00
 8006f9c:	20000b3c 	.word	0x20000b3c
 8006fa0:	20000c28 	.word	0x20000c28
 8006fa4:	0801838c 	.word	0x0801838c
 8006fa8:	080188f4 	.word	0x080188f4
 8006fac:	20000060 	.word	0x20000060
 8006fb0:	20007ff0 	.word	0x20007ff0
 8006fb4:	deadbeef 	.word	0xdeadbeef
 8006fb8:	2000117e 	.word	0x2000117e
 8006fbc:	e000ed00 	.word	0xe000ed00
 8006fc0:	05fa0004 	.word	0x05fa0004

08006fc4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fc4:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <pingCommand+0x4c>)
 8006fc8:	4912      	ldr	r1, [pc, #72]	; (8007014 <pingCommand+0x50>)
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	0093      	lsls	r3, r2, #2
 8006fce:	189b      	adds	r3, r3, r2
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	5c5c      	ldrb	r4, [r3, r1]
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	d016      	beq.n	8007006 <pingCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006fd8:	185b      	adds	r3, r3, r1
 8006fda:	490f      	ldr	r1, [pc, #60]	; (8007018 <pingCommand+0x54>)
 8006fdc:	f00b fb96 	bl	801270c <sprintf>
	RTOS_IND_blink(200);
 8006fe0:	2180      	movs	r1, #128	; 0x80
 8006fe2:	2090      	movs	r0, #144	; 0x90
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	0109      	lsls	r1, r1, #4
 8006fe8:	05c0      	lsls	r0, r0, #23
 8006fea:	f009 fa95 	bl	8010518 <HAL_GPIO_WritePin>
 8006fee:	20c8      	movs	r0, #200	; 0xc8
 8006ff0:	f005 ffaa 	bl	800cf48 <osDelay>
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	2090      	movs	r0, #144	; 0x90
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	0109      	lsls	r1, r1, #4
 8006ffc:	05c0      	lsls	r0, r0, #23
 8006ffe:	f009 fa8b 	bl	8010518 <HAL_GPIO_WritePin>
}
 8007002:	2000      	movs	r0, #0
 8007004:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007006:	4905      	ldr	r1, [pc, #20]	; (800701c <pingCommand+0x58>)
 8007008:	f00b fb80 	bl	801270c <sprintf>
 800700c:	e7e8      	b.n	8006fe0 <pingCommand+0x1c>
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	20000a98 	.word	0x20000a98
 8007014:	20000dfc 	.word	0x20000dfc
 8007018:	0801892c 	.word	0x0801892c
 800701c:	08018918 	.word	0x08018918

08007020 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007020:	b510      	push	{r4, lr}
 8007022:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007024:	2241      	movs	r2, #65	; 0x41
 8007026:	4904      	ldr	r1, [pc, #16]	; (8007038 <prvRunTimeStatsCommand+0x18>)
 8007028:	f00b f96d 	bl	8012306 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800702c:	0020      	movs	r0, r4
 800702e:	3040      	adds	r0, #64	; 0x40
 8007030:	f007 f9da 	bl	800e3e8 <vTaskGetRunTimeStats>
}
 8007034:	2000      	movs	r0, #0
 8007036:	bd10      	pop	{r4, pc}
 8007038:	08018948 	.word	0x08018948

0800703c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800703c:	b510      	push	{r4, lr}
 800703e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007040:	2250      	movs	r2, #80	; 0x50
 8007042:	4904      	ldr	r1, [pc, #16]	; (8007054 <prvTaskStatsCommand+0x18>)
 8007044:	f00b f95f 	bl	8012306 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007048:	0020      	movs	r0, r4
 800704a:	304f      	adds	r0, #79	; 0x4f
 800704c:	f007 f972 	bl	800e334 <vTaskList>
}
 8007050:	2000      	movs	r0, #0
 8007052:	bd10      	pop	{r4, pc}
 8007054:	0801898c 	.word	0x0801898c

08007058 <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800705c:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800705e:	b082      	sub	sp, #8
 8007060:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007062:	466a      	mov	r2, sp
 8007064:	2101      	movs	r1, #1
 8007066:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 8007068:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800706a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800706c:	f006 f878 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007070:	2300      	movs	r3, #0
 8007072:	56c3      	ldrsb	r3, [r0, r3]
 8007074:	2b70      	cmp	r3, #112	; 0x70
 8007076:	d00e      	beq.n	8007096 <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007078:	aa01      	add	r2, sp, #4
 800707a:	2102      	movs	r1, #2
 800707c:	0020      	movs	r0, r4
 800707e:	f006 f86f 	bl	800d160 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8007082:	f00a fe80 	bl	8011d86 <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8007086:	2213      	movs	r2, #19
 8007088:	490f      	ldr	r1, [pc, #60]	; (80070c8 <setBaudrateCommand+0x70>)
 800708a:	0028      	movs	r0, r5
 800708c:	f00b f93b 	bl	8012306 <memcpy>
}
 8007090:	2000      	movs	r0, #0
 8007092:	b002      	add	sp, #8
 8007094:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007096:	3001      	adds	r0, #1
 8007098:	f00a fe75 	bl	8011d86 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800709c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800709e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80070a0:	2102      	movs	r1, #2
 80070a2:	0020      	movs	r0, r4
 80070a4:	f006 f85c 	bl	800d160 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80070a8:	f00a fe6d 	bl	8011d86 <atol>
 80070ac:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80070ae:	b2f0      	uxtb	r0, r6
 80070b0:	0021      	movs	r1, r4
 80070b2:	f005 fe07 	bl	800ccc4 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80070b6:	23ff      	movs	r3, #255	; 0xff
 80070b8:	0022      	movs	r2, r4
 80070ba:	4033      	ands	r3, r6
 80070bc:	4903      	ldr	r1, [pc, #12]	; (80070cc <setBaudrateCommand+0x74>)
 80070be:	0028      	movs	r0, r5
 80070c0:	f00b fb24 	bl	801270c <sprintf>
 80070c4:	e7e4      	b.n	8007090 <setBaudrateCommand+0x38>
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	08018a04 	.word	0x08018a04
 80070cc:	080189dc 	.word	0x080189dc

080070d0 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80070d0:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d2:	b510      	push	{r4, lr}
 80070d4:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80070d6:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80070d8:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070da:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070dc:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070de:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e0:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 80070e2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e4:	f006 f83c 	bl	800d160 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80070e8:	7803      	ldrb	r3, [r0, #0]
 80070ea:	3b32      	subs	r3, #50	; 0x32
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d907      	bls.n	8007100 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80070f0:	2215      	movs	r2, #21
 80070f2:	490b      	ldr	r1, [pc, #44]	; (8007120 <GetReadPrecentageCommand+0x50>)
 80070f4:	0020      	movs	r0, r4
 80070f6:	f00b f906 	bl	8012306 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80070fa:	2000      	movs	r0, #0
 80070fc:	b002      	add	sp, #8
 80070fe:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8007100:	f00a fe41 	bl	8011d86 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8007104:	a901      	add	r1, sp, #4
 8007106:	b2c0      	uxtb	r0, r0
 8007108:	f004 fb5c 	bl	800b7c4 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 800710c:	9801      	ldr	r0, [sp, #4]
 800710e:	f7fb fd09 	bl	8002b24 <__aeabi_f2d>
 8007112:	0002      	movs	r2, r0
 8007114:	000b      	movs	r3, r1
 8007116:	0020      	movs	r0, r4
 8007118:	4902      	ldr	r1, [pc, #8]	; (8007124 <GetReadPrecentageCommand+0x54>)
 800711a:	f00b faf7 	bl	801270c <sprintf>
 800711e:	e7ec      	b.n	80070fa <GetReadPrecentageCommand+0x2a>
 8007120:	08017e3c 	.word	0x08017e3c
 8007124:	08018a18 	.word	0x08018a18

08007128 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007128:	b510      	push	{r4, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	0004      	movs	r4, r0
	GetTimeDate();
 800712e:	f005 fb03 	bl	800c738 <GetTimeDate>
	if(BOS.hourformat == 24)
 8007132:	4915      	ldr	r1, [pc, #84]	; (8007188 <timeCommand+0x60>)
 8007134:	7b4b      	ldrb	r3, [r1, #13]
 8007136:	2b18      	cmp	r3, #24
 8007138:	d016      	beq.n	8007168 <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d002      	beq.n	8007144 <timeCommand+0x1c>
}
 800713e:	2000      	movs	r0, #0
 8007140:	b004      	add	sp, #16
 8007142:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007144:	7ccb      	ldrb	r3, [r1, #19]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d019      	beq.n	800717e <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 800714a:	2b02      	cmp	r3, #2
 800714c:	d1f7      	bne.n	800713e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800714e:	7c4b      	ldrb	r3, [r1, #17]
 8007150:	7c8a      	ldrb	r2, [r1, #18]
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <timeCommand+0x64>)
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	89c8      	ldrh	r0, [r1, #14]
 8007158:	9001      	str	r0, [sp, #4]
 800715a:	7c09      	ldrb	r1, [r1, #16]
 800715c:	0020      	movs	r0, r4
 800715e:	9100      	str	r1, [sp, #0]
 8007160:	490b      	ldr	r1, [pc, #44]	; (8007190 <timeCommand+0x68>)
 8007162:	f00b fad3 	bl	801270c <sprintf>
 8007166:	e7ea      	b.n	800713e <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007168:	89c8      	ldrh	r0, [r1, #14]
 800716a:	7c4b      	ldrb	r3, [r1, #17]
 800716c:	7c8a      	ldrb	r2, [r1, #18]
 800716e:	9001      	str	r0, [sp, #4]
 8007170:	7c09      	ldrb	r1, [r1, #16]
 8007172:	0020      	movs	r0, r4
 8007174:	9100      	str	r1, [sp, #0]
 8007176:	4907      	ldr	r1, [pc, #28]	; (8007194 <timeCommand+0x6c>)
 8007178:	f00b fac8 	bl	801270c <sprintf>
 800717c:	e7df      	b.n	800713e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800717e:	7c4b      	ldrb	r3, [r1, #17]
 8007180:	7c8a      	ldrb	r2, [r1, #18]
 8007182:	4805      	ldr	r0, [pc, #20]	; (8007198 <timeCommand+0x70>)
 8007184:	e7e6      	b.n	8007154 <timeCommand+0x2c>
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	20006a80 	.word	0x20006a80
 800718c:	08018a94 	.word	0x08018a94
 8007190:	08018a64 	.word	0x08018a64
 8007194:	08018a3c 	.word	0x08018a3c
 8007198:	08018a90 	.word	0x08018a90

0800719c <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <resetCommand+0x14>)
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <resetCommand+0x18>)
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	e7fd      	b.n	80071aa <resetCommand+0xe>
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	e000ed00 	.word	0xe000ed00
 80071b4:	05fa0004 	.word	0x05fa0004

080071b8 <RegisterUserCLICommands>:
}
 80071b8:	4770      	bx	lr
 80071ba:	46c0      	nop			; (mov r8, r8)

080071bc <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80071bc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80071be:	4c45      	ldr	r4, [pc, #276]	; (80072d4 <vRegisterCLICommands+0x118>)
 80071c0:	0020      	movs	r0, r4
 80071c2:	f005 ff39 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80071c6:	0020      	movs	r0, r4
 80071c8:	3010      	adds	r0, #16
 80071ca:	f005 ff35 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80071ce:	0020      	movs	r0, r4
 80071d0:	3020      	adds	r0, #32
 80071d2:	f005 ff31 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80071d6:	0020      	movs	r0, r4
 80071d8:	3030      	adds	r0, #48	; 0x30
 80071da:	f005 ff2d 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80071de:	0020      	movs	r0, r4
 80071e0:	3040      	adds	r0, #64	; 0x40
 80071e2:	f005 ff29 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80071e6:	0020      	movs	r0, r4
 80071e8:	3050      	adds	r0, #80	; 0x50
 80071ea:	f005 ff25 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80071ee:	0020      	movs	r0, r4
 80071f0:	3060      	adds	r0, #96	; 0x60
 80071f2:	f005 ff21 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80071f6:	0020      	movs	r0, r4
 80071f8:	3070      	adds	r0, #112	; 0x70
 80071fa:	f005 ff1d 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80071fe:	4c36      	ldr	r4, [pc, #216]	; (80072d8 <vRegisterCLICommands+0x11c>)
 8007200:	0020      	movs	r0, r4
 8007202:	f005 ff19 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007206:	0020      	movs	r0, r4
 8007208:	3010      	adds	r0, #16
 800720a:	f005 ff15 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800720e:	0020      	movs	r0, r4
 8007210:	3020      	adds	r0, #32
 8007212:	f005 ff11 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007216:	0020      	movs	r0, r4
 8007218:	3030      	adds	r0, #48	; 0x30
 800721a:	f005 ff0d 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 800721e:	0020      	movs	r0, r4
 8007220:	3040      	adds	r0, #64	; 0x40
 8007222:	f005 ff09 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007226:	0020      	movs	r0, r4
 8007228:	3050      	adds	r0, #80	; 0x50
 800722a:	f005 ff05 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800722e:	0020      	movs	r0, r4
 8007230:	3060      	adds	r0, #96	; 0x60
 8007232:	f005 ff01 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007236:	0020      	movs	r0, r4
 8007238:	3070      	adds	r0, #112	; 0x70
 800723a:	f005 fefd 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800723e:	4c27      	ldr	r4, [pc, #156]	; (80072dc <vRegisterCLICommands+0x120>)
 8007240:	0020      	movs	r0, r4
 8007242:	f005 fef9 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007246:	0020      	movs	r0, r4
 8007248:	3010      	adds	r0, #16
 800724a:	f005 fef5 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800724e:	0020      	movs	r0, r4
 8007250:	3020      	adds	r0, #32
 8007252:	f005 fef1 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007256:	0020      	movs	r0, r4
 8007258:	3030      	adds	r0, #48	; 0x30
 800725a:	f005 feed 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800725e:	0020      	movs	r0, r4
 8007260:	3040      	adds	r0, #64	; 0x40
 8007262:	f005 fee9 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007266:	0020      	movs	r0, r4
 8007268:	3050      	adds	r0, #80	; 0x50
 800726a:	f005 fee5 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800726e:	0020      	movs	r0, r4
 8007270:	3060      	adds	r0, #96	; 0x60
 8007272:	f005 fee1 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007276:	0020      	movs	r0, r4
 8007278:	3070      	adds	r0, #112	; 0x70
 800727a:	f005 fedd 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800727e:	4c18      	ldr	r4, [pc, #96]	; (80072e0 <vRegisterCLICommands+0x124>)
 8007280:	0020      	movs	r0, r4
 8007282:	f005 fed9 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007286:	0020      	movs	r0, r4
 8007288:	3010      	adds	r0, #16
 800728a:	f005 fed5 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800728e:	0020      	movs	r0, r4
 8007290:	3020      	adds	r0, #32
 8007292:	f005 fed1 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007296:	0020      	movs	r0, r4
 8007298:	3030      	adds	r0, #48	; 0x30
 800729a:	f005 fecd 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800729e:	0020      	movs	r0, r4
 80072a0:	3040      	adds	r0, #64	; 0x40
 80072a2:	f005 fec9 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80072a6:	0020      	movs	r0, r4
 80072a8:	3050      	adds	r0, #80	; 0x50
 80072aa:	f005 fec5 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80072ae:	0020      	movs	r0, r4
 80072b0:	3060      	adds	r0, #96	; 0x60
 80072b2:	f005 fec1 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80072b6:	0020      	movs	r0, r4
 80072b8:	3070      	adds	r0, #112	; 0x70
 80072ba:	f005 febd 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80072be:	4809      	ldr	r0, [pc, #36]	; (80072e4 <vRegisterCLICommands+0x128>)
 80072c0:	f005 feba 	bl	800d038 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80072c4:	2223      	movs	r2, #35	; 0x23
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <vRegisterCLICommands+0x12c>)
 80072c8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80072ca:	f002 fcff 	bl	8009ccc <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80072ce:	f7ff ff73 	bl	80071b8 <RegisterUserCLICommands>
}
 80072d2:	bd10      	pop	{r4, pc}
 80072d4:	08016c78 	.word	0x08016c78
 80072d8:	08016cf8 	.word	0x08016cf8
 80072dc:	08016d78 	.word	0x08016d78
 80072e0:	08016df8 	.word	0x08016df8
 80072e4:	08016e78 	.word	0x08016e78
 80072e8:	200069fc 	.word	0x200069fc

080072ec <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	46c6      	mov	lr, r8
 80072f0:	b500      	push	{lr}
 80072f2:	0005      	movs	r5, r0
 80072f4:	000e      	movs	r6, r1
 80072f6:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80072f8:	f002 fcea 	bl	8009cd0 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 80072fe:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007300:	4698      	mov	r8, r3
 8007302:	5c1b      	ldrb	r3, [r3, r0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d902      	bls.n	800730e <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007308:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800730a:	2b03      	cmp	r3, #3
 800730c:	d112      	bne.n	8007334 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 800730e:	0020      	movs	r0, r4
 8007310:	f002 fe04 	bl	8009f1c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007314:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <StartDMAstream+0x54>)
 8007316:	1e62      	subs	r2, r4, #1
 8007318:	0092      	lsls	r2, r2, #2
 800731a:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800731c:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 800731e:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007320:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007322:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007324:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 8007326:	619a      	str	r2, [r3, #24]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007328:	0028      	movs	r0, r5
 800732a:	003a      	movs	r2, r7
 800732c:	0031      	movs	r1, r6
 800732e:	f003 fa61 	bl	800a7f4 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007332:	2000      	movs	r0, #0
}
 8007334:	bc04      	pop	{r2}
 8007336:	4690      	mov	r8, r2
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	20000c2c 	.word	0x20000c2c
 8007340:	200019a8 	.word	0x200019a8

08007344 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <DMA_IRQHandler+0x44>)
 800734a:	1e44      	subs	r4, r0, #1
 800734c:	00e0      	lsls	r0, r4, #3
 800734e:	5d5b      	ldrb	r3, [r3, r5]
 8007350:	1b00      	subs	r0, r0, r4
 8007352:	00c0      	lsls	r0, r0, #3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d004      	beq.n	8007362 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <DMA_IRQHandler+0x48>)
 800735a:	18c0      	adds	r0, r0, r3
 800735c:	f008 f95a 	bl	800f614 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007360:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007364:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007366:	18c0      	adds	r0, r0, r3
 8007368:	f008 f954 	bl	800f614 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <DMA_IRQHandler+0x50>)
 800736e:	191c      	adds	r4, r3, r4
 8007370:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007372:	2a00      	cmp	r2, #0
 8007374:	d004      	beq.n	8007380 <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 8007376:	69a3      	ldr	r3, [r4, #24]
 8007378:	3301      	adds	r3, #1
 800737a:	61a3      	str	r3, [r4, #24]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800737c:	429a      	cmp	r2, r3
 800737e:	d8ef      	bhi.n	8007360 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007380:	0028      	movs	r0, r5
 8007382:	f002 fdb3 	bl	8009eec <StopStreamDMA>
 8007386:	e7eb      	b.n	8007360 <DMA_IRQHandler+0x1c>
 8007388:	20000c2c 	.word	0x20000c2c
 800738c:	20002474 	.word	0x20002474
 8007390:	2000227c 	.word	0x2000227c
 8007394:	200019a8 	.word	0x200019a8

08007398 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007398:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <ResetUartORE+0x28>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	2308      	movs	r3, #8
 800739e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80073a0:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <ResetUartORE+0x2c>)
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80073a6:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <ResetUartORE+0x30>)
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 80073ac:	4a07      	ldr	r2, [pc, #28]	; (80073cc <ResetUartORE+0x34>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80073b2:	4a07      	ldr	r2, [pc, #28]	; (80073d0 <ResetUartORE+0x38>)
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80073b8:	4a06      	ldr	r2, [pc, #24]	; (80073d4 <ResetUartORE+0x3c>)
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	6213      	str	r3, [r2, #32]
#endif
}
 80073be:	4770      	bx	lr
 80073c0:	20006c80 	.word	0x20006c80
 80073c4:	20006dd0 	.word	0x20006dd0
 80073c8:	20006ba0 	.word	0x20006ba0
 80073cc:	20006d60 	.word	0x20006d60
 80073d0:	20006c10 	.word	0x20006c10
 80073d4:	20006cf0 	.word	0x20006cf0

080073d8 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80073d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073da:	2400      	movs	r4, #0
 80073dc:	2603      	movs	r6, #3
 80073de:	4d63      	ldr	r5, [pc, #396]	; (800756c <MX_FREERTOS_Init+0x194>)
void MX_FREERTOS_Init(void){
 80073e0:	b091      	sub	sp, #68	; 0x44
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073e2:	9501      	str	r5, [sp, #4]
 80073e4:	9600      	str	r6, [sp, #0]
 80073e6:	9403      	str	r4, [sp, #12]
 80073e8:	9402      	str	r4, [sp, #8]
 80073ea:	2300      	movs	r3, #0
 80073ec:	22f0      	movs	r2, #240	; 0xf0
 80073ee:	4960      	ldr	r1, [pc, #384]	; (8007570 <MX_FREERTOS_Init+0x198>)
 80073f0:	4860      	ldr	r0, [pc, #384]	; (8007574 <MX_FREERTOS_Init+0x19c>)
 80073f2:	f006 fb67 	bl	800dac4 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80073f6:	1d2b      	adds	r3, r5, #4
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	9600      	str	r6, [sp, #0]
 80073fc:	9403      	str	r4, [sp, #12]
 80073fe:	9402      	str	r4, [sp, #8]
 8007400:	2300      	movs	r3, #0
 8007402:	22f0      	movs	r2, #240	; 0xf0
 8007404:	495c      	ldr	r1, [pc, #368]	; (8007578 <MX_FREERTOS_Init+0x1a0>)
 8007406:	485d      	ldr	r0, [pc, #372]	; (800757c <MX_FREERTOS_Init+0x1a4>)
 8007408:	f006 fb5c 	bl	800dac4 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 800740c:	002b      	movs	r3, r5
 800740e:	3308      	adds	r3, #8
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	9600      	str	r6, [sp, #0]
 8007414:	2300      	movs	r3, #0
 8007416:	22f0      	movs	r2, #240	; 0xf0
 8007418:	4959      	ldr	r1, [pc, #356]	; (8007580 <MX_FREERTOS_Init+0x1a8>)
 800741a:	9403      	str	r4, [sp, #12]
 800741c:	9402      	str	r4, [sp, #8]
 800741e:	4859      	ldr	r0, [pc, #356]	; (8007584 <MX_FREERTOS_Init+0x1ac>)
 8007420:	f006 fb50 	bl	800dac4 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007424:	f7ff feca 	bl	80071bc <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007428:	002b      	movs	r3, r5
 800742a:	228c      	movs	r2, #140	; 0x8c
 800742c:	330c      	adds	r3, #12
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	9600      	str	r6, [sp, #0]
 8007432:	9403      	str	r4, [sp, #12]
 8007434:	9402      	str	r4, [sp, #8]
 8007436:	2300      	movs	r3, #0
 8007438:	0052      	lsls	r2, r2, #1
 800743a:	4953      	ldr	r1, [pc, #332]	; (8007588 <MX_FREERTOS_Init+0x1b0>)
 800743c:	4853      	ldr	r0, [pc, #332]	; (800758c <MX_FREERTOS_Init+0x1b4>)
 800743e:	f006 fb41 	bl	800dac4 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007442:	002b      	movs	r3, r5
 8007444:	2704      	movs	r7, #4
 8007446:	4e52      	ldr	r6, [pc, #328]	; (8007590 <MX_FREERTOS_Init+0x1b8>)
 8007448:	3310      	adds	r3, #16
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	9403      	str	r4, [sp, #12]
 800744e:	9402      	str	r4, [sp, #8]
 8007450:	9700      	str	r7, [sp, #0]
 8007452:	2301      	movs	r3, #1
 8007454:	22f0      	movs	r2, #240	; 0xf0
 8007456:	494f      	ldr	r1, [pc, #316]	; (8007594 <MX_FREERTOS_Init+0x1bc>)
 8007458:	0030      	movs	r0, r6
 800745a:	f006 fb33 	bl	800dac4 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800745e:	002b      	movs	r3, r5
 8007460:	3314      	adds	r3, #20
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	9403      	str	r4, [sp, #12]
 8007466:	9402      	str	r4, [sp, #8]
 8007468:	9700      	str	r7, [sp, #0]
 800746a:	2302      	movs	r3, #2
 800746c:	22f0      	movs	r2, #240	; 0xf0
 800746e:	494a      	ldr	r1, [pc, #296]	; (8007598 <MX_FREERTOS_Init+0x1c0>)
 8007470:	0030      	movs	r0, r6
 8007472:	f006 fb27 	bl	800dac4 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007476:	002b      	movs	r3, r5
 8007478:	3318      	adds	r3, #24
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	9403      	str	r4, [sp, #12]
 800747e:	9402      	str	r4, [sp, #8]
 8007480:	9700      	str	r7, [sp, #0]
 8007482:	2303      	movs	r3, #3
 8007484:	22f0      	movs	r2, #240	; 0xf0
 8007486:	4945      	ldr	r1, [pc, #276]	; (800759c <MX_FREERTOS_Init+0x1c4>)
 8007488:	0030      	movs	r0, r6
 800748a:	f006 fb1b 	bl	800dac4 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 800748e:	002b      	movs	r3, r5
 8007490:	331c      	adds	r3, #28
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	9403      	str	r4, [sp, #12]
 8007496:	9402      	str	r4, [sp, #8]
 8007498:	9700      	str	r7, [sp, #0]
 800749a:	2304      	movs	r3, #4
 800749c:	22f0      	movs	r2, #240	; 0xf0
 800749e:	4940      	ldr	r1, [pc, #256]	; (80075a0 <MX_FREERTOS_Init+0x1c8>)
 80074a0:	0030      	movs	r0, r6
 80074a2:	f006 fb0f 	bl	800dac4 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80074a6:	002b      	movs	r3, r5
 80074a8:	3320      	adds	r3, #32
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	9403      	str	r4, [sp, #12]
 80074ae:	9402      	str	r4, [sp, #8]
 80074b0:	9700      	str	r7, [sp, #0]
 80074b2:	2305      	movs	r3, #5
 80074b4:	22f0      	movs	r2, #240	; 0xf0
 80074b6:	493b      	ldr	r1, [pc, #236]	; (80075a4 <MX_FREERTOS_Init+0x1cc>)
 80074b8:	0030      	movs	r0, r6
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 80074ba:	3524      	adds	r5, #36	; 0x24
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80074bc:	f006 fb02 	bl	800dac4 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 80074c0:	2306      	movs	r3, #6
 80074c2:	22f0      	movs	r2, #240	; 0xf0
 80074c4:	9501      	str	r5, [sp, #4]
 80074c6:	9403      	str	r4, [sp, #12]
 80074c8:	9402      	str	r4, [sp, #8]
 80074ca:	9700      	str	r7, [sp, #0]
 80074cc:	4936      	ldr	r1, [pc, #216]	; (80075a8 <MX_FREERTOS_Init+0x1d0>)
 80074ce:	0030      	movs	r0, r6
 80074d0:	f006 faf8 	bl	800dac4 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074d4:	2101      	movs	r1, #1
 80074d6:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80074d8:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074da:	f005 fd61 	bl	800cfa0 <osSemaphoreCreate>
 80074de:	4e33      	ldr	r6, [pc, #204]	; (80075ac <MX_FREERTOS_Init+0x1d4>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074e0:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074e2:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074e4:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80074e6:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074e8:	f005 fd5a 	bl	800cfa0 <osSemaphoreCreate>
 80074ec:	4d30      	ldr	r5, [pc, #192]	; (80075b0 <MX_FREERTOS_Init+0x1d8>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ee:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074f0:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074f2:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80074f4:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074f6:	f005 fd53 	bl	800cfa0 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074fa:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074fc:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074fe:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007500:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007502:	f005 fd4d 	bl	800cfa0 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007506:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007508:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800750a:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 800750c:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800750e:	f005 fd47 	bl	800cfa0 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007512:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007514:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007516:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007518:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800751a:	f005 fd41 	bl	800cfa0 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800751e:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007520:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007522:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007524:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007526:	f005 fd3b 	bl	800cfa0 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800752a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800752c:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800752e:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007530:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007532:	f005 fd35 	bl	800cfa0 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007536:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007538:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800753a:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 800753c:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800753e:	f005 fd2f 	bl	800cfa0 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007542:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007544:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007546:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007548:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800754a:	f005 fd29 	bl	800cfa0 <osSemaphoreCreate>
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 800754e:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007550:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007552:	a80e      	add	r0, sp, #56	; 0x38
	osSemaphoreDef(SemaphoreP11);
 8007554:	940e      	str	r4, [sp, #56]	; 0x38
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007556:	f005 fd23 	bl	800cfa0 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 800755a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 800755c:	61b0      	str	r0, [r6, #24]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 800755e:	a80f      	add	r0, sp, #60	; 0x3c
	osSemaphoreDef(SemaphoreP12);
 8007560:	940f      	str	r4, [sp, #60]	; 0x3c
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007562:	f005 fd1d 	bl	800cfa0 <osSemaphoreCreate>
 8007566:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007568:	b011      	add	sp, #68	; 0x44
 800756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756c:	20001ec0 	.word	0x20001ec0
 8007570:	08019714 	.word	0x08019714
 8007574:	080079b5 	.word	0x080079b5
 8007578:	08019720 	.word	0x08019720
 800757c:	0800832d 	.word	0x0800832d
 8007580:	0801972c 	.word	0x0801972c
 8007584:	08011d6d 	.word	0x08011d6d
 8007588:	08019738 	.word	0x08019738
 800758c:	080050e1 	.word	0x080050e1
 8007590:	08008495 	.word	0x08008495
 8007594:	08019740 	.word	0x08019740
 8007598:	0801974c 	.word	0x0801974c
 800759c:	08019758 	.word	0x08019758
 80075a0:	08019764 	.word	0x08019764
 80075a4:	08019770 	.word	0x08019770
 80075a8:	0801977c 	.word	0x0801977c
 80075ac:	20006b24 	.word	0x20006b24
 80075b0:	20006b04 	.word	0x20006b04

080075b4 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b6:	46de      	mov	lr, fp
 80075b8:	4657      	mov	r7, sl
 80075ba:	464e      	mov	r6, r9
 80075bc:	4645      	mov	r5, r8
 80075be:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80075c0:	4bd4      	ldr	r3, [pc, #848]	; (8007914 <ExecuteMonitor+0x360>)
{
 80075c2:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 80075c4:	469b      	mov	fp, r3
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d006      	beq.n	80075da <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 80075cc:	b005      	add	sp, #20
 80075ce:	bc3c      	pop	{r2, r3, r4, r5}
 80075d0:	4690      	mov	r8, r2
 80075d2:	4699      	mov	r9, r3
 80075d4:	46a2      	mov	sl, r4
 80075d6:	46ab      	mov	fp, r5
 80075d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 80075da:	2300      	movs	r3, #0
 80075dc:	465a      	mov	r2, fp
 80075de:	6013      	str	r3, [r2, #0]
	flag=0;
 80075e0:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 80075e2:	3320      	adds	r3, #32
 80075e4:	7153      	strb	r3, [r2, #5]
 80075e6:	4bcc      	ldr	r3, [pc, #816]	; (8007918 <ExecuteMonitor+0x364>)
 80075e8:	4ecc      	ldr	r6, [pc, #816]	; (800791c <ExecuteMonitor+0x368>)
 80075ea:	4699      	mov	r9, r3
 80075ec:	4bcc      	ldr	r3, [pc, #816]	; (8007920 <ExecuteMonitor+0x36c>)
 80075ee:	4dcd      	ldr	r5, [pc, #820]	; (8007924 <ExecuteMonitor+0x370>)
 80075f0:	469a      	mov	sl, r3
 80075f2:	4ccd      	ldr	r4, [pc, #820]	; (8007928 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 80075f4:	2200      	movs	r2, #0
 80075f6:	4bcd      	ldr	r3, [pc, #820]	; (800792c <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 80075f8:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80075fa:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075fc:	2320      	movs	r3, #32
 80075fe:	4698      	mov	r8, r3
 8007600:	e004      	b.n	800760c <ExecuteMonitor+0x58>
 8007602:	2a01      	cmp	r2, #1
 8007604:	d04c      	beq.n	80076a0 <ExecuteMonitor+0xec>
 8007606:	2a02      	cmp	r2, #2
 8007608:	d100      	bne.n	800760c <ExecuteMonitor+0x58>
 800760a:	e0a8      	b.n	800775e <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 800760c:	464b      	mov	r3, r9
		            	    Delay_us(100);
 800760e:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007610:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 8007612:	f005 f925 	bl	800c860 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007616:	465b      	mov	r3, fp
 8007618:	464a      	mov	r2, r9
 800761a:	795b      	ldrb	r3, [r3, #5]
 800761c:	7812      	ldrb	r2, [r2, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d00b      	beq.n	800763a <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007622:	4ac2      	ldr	r2, [pc, #776]	; (800792c <ExecuteMonitor+0x378>)
 8007624:	48c1      	ldr	r0, [pc, #772]	; (800792c <ExecuteMonitor+0x378>)
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	1c51      	adds	r1, r2, #1
 800762a:	7001      	strb	r1, [r0, #0]
 800762c:	2128      	movs	r1, #40	; 0x28
 800762e:	4452      	add	r2, sl
 8007630:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 8007632:	464a      	mov	r2, r9
 8007634:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007636:	465a      	mov	r2, fp
 8007638:	7157      	strb	r7, [r2, #5]
 800763a:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800763c:	4641      	mov	r1, r8
 800763e:	7912      	ldrb	r2, [r2, #4]
 8007640:	438b      	bics	r3, r1
 8007642:	d1de      	bne.n	8007602 <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007644:	2a00      	cmp	r2, #0
 8007646:	d129      	bne.n	800769c <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007648:	4bb8      	ldr	r3, [pc, #736]	; (800792c <ExecuteMonitor+0x378>)
 800764a:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 800764c:	4653      	mov	r3, sl
 800764e:	3228      	adds	r2, #40	; 0x28
 8007650:	5c9b      	ldrb	r3, [r3, r2]
 8007652:	2b5b      	cmp	r3, #91	; 0x5b
 8007654:	d100      	bne.n	8007658 <ExecuteMonitor+0xa4>
 8007656:	e0eb      	b.n	8007830 <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007658:	2b23      	cmp	r3, #35	; 0x23
 800765a:	d100      	bne.n	800765e <ExecuteMonitor+0xaa>
 800765c:	e141      	b.n	80078e2 <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 800765e:	2b3d      	cmp	r3, #61	; 0x3d
 8007660:	d100      	bne.n	8007664 <ExecuteMonitor+0xb0>
 8007662:	e175      	b.n	8007950 <ExecuteMonitor+0x39c>
 8007664:	233c      	movs	r3, #60	; 0x3c
 8007666:	4652      	mov	r2, sl
 8007668:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800766a:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 800766c:	4bb0      	ldr	r3, [pc, #704]	; (8007930 <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800766e:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007670:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007672:	3050      	adds	r0, #80	; 0x50
 8007674:	1bcf      	subs	r7, r1, r7
 8007676:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007678:	4657      	mov	r7, sl
 800767a:	373c      	adds	r7, #60	; 0x3c
 800767c:	0039      	movs	r1, r7
 800767e:	220f      	movs	r2, #15
 8007680:	f00a fe41 	bl	8012306 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007684:	4650      	mov	r0, sl
 8007686:	2214      	movs	r2, #20
 8007688:	2100      	movs	r1, #0
 800768a:	3028      	adds	r0, #40	; 0x28
 800768c:	f00a fe44 	bl	8012318 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007690:	2214      	movs	r2, #20
 8007692:	2100      	movs	r1, #0
 8007694:	0038      	movs	r0, r7
 8007696:	f00a fe3f 	bl	8012318 <memset>
 800769a:	e7ab      	b.n	80075f4 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 800769c:	2a01      	cmp	r2, #1
 800769e:	d15b      	bne.n	8007758 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 80076a0:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 80076a2:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 80076a4:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 80076a6:	4ba3      	ldr	r3, [pc, #652]	; (8007934 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 80076a8:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 80076aa:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80076ac:	4ba2      	ldr	r3, [pc, #648]	; (8007938 <ExecuteMonitor+0x384>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d02e      	beq.n	8007712 <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076b4:	2250      	movs	r2, #80	; 0x50
		           while(counter != numCommandParameters)
 80076b6:	2100      	movs	r1, #0
 80076b8:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076ba:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 80076bc:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076be:	0010      	movs	r0, r2
 80076c0:	2720      	movs	r7, #32
 80076c2:	001a      	movs	r2, r3
 80076c4:	0003      	movs	r3, r0
 80076c6:	e002      	b.n	80076ce <ExecuteMonitor+0x11a>
 80076c8:	4b9a      	ldr	r3, [pc, #616]	; (8007934 <ExecuteMonitor+0x380>)
 80076ca:	781a      	ldrb	r2, [r3, #0]
 80076cc:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076ce:	1c58      	adds	r0, r3, #1
 80076d0:	7028      	strb	r0, [r5, #0]
 80076d2:	1c48      	adds	r0, r1, #1
 80076d4:	7030      	strb	r0, [r6, #0]
 80076d6:	0110      	lsls	r0, r2, #4
 80076d8:	1a82      	subs	r2, r0, r2
 80076da:	4452      	add	r2, sl
 80076dc:	18d2      	adds	r2, r2, r3
 80076de:	4643      	mov	r3, r8
 80076e0:	5cd3      	ldrb	r3, [r2, r3]
 80076e2:	2248      	movs	r2, #72	; 0x48
 80076e4:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 80076e6:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076e8:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80076ea:	f007 fac9 	bl	800ec80 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076ee:	7831      	ldrb	r1, [r6, #0]
 80076f0:	1863      	adds	r3, r4, r1
 80076f2:	3347      	adds	r3, #71	; 0x47
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	43bb      	bics	r3, r7
 80076f8:	d1e6      	bne.n	80076c8 <ExecuteMonitor+0x114>
		                   counter++;
 80076fa:	4b8e      	ldr	r3, [pc, #568]	; (8007934 <ExecuteMonitor+0x380>)
 80076fc:	4a8d      	ldr	r2, [pc, #564]	; (8007934 <ExecuteMonitor+0x380>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	b2db      	uxtb	r3, r3
 8007704:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8007706:	2201      	movs	r2, #1
 8007708:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 800770a:	4a8b      	ldr	r2, [pc, #556]	; (8007938 <ExecuteMonitor+0x384>)
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d1d4      	bne.n	80076bc <ExecuteMonitor+0x108>
		          		   flag=0;
 8007712:	2300      	movs	r3, #0
 8007714:	465a      	mov	r2, fp
 8007716:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007718:	4a86      	ldr	r2, [pc, #536]	; (8007934 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800771a:	2748      	movs	r7, #72	; 0x48
		          		   counter=0;
 800771c:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800771e:	4a87      	ldr	r2, [pc, #540]	; (800793c <ExecuteMonitor+0x388>)
 8007720:	7013      	strb	r3, [r2, #0]
 8007722:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007724:	4a86      	ldr	r2, [pc, #536]	; (8007940 <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 8007726:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007728:	18d2      	adds	r2, r2, r3
 800772a:	18e3      	adds	r3, r4, r3
 800772c:	5ddb      	ldrb	r3, [r3, r7]
 800772e:	3281      	adds	r2, #129	; 0x81
 8007730:	32ff      	adds	r2, #255	; 0xff
 8007732:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8007734:	f007 faa4 	bl	800ec80 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007738:	4b80      	ldr	r3, [pc, #512]	; (800793c <ExecuteMonitor+0x388>)
 800773a:	4a80      	ldr	r2, [pc, #512]	; (800793c <ExecuteMonitor+0x388>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	b2db      	uxtb	r3, r3
 8007742:	7013      	strb	r3, [r2, #0]
 8007744:	2b3f      	cmp	r3, #63	; 0x3f
 8007746:	d9ed      	bls.n	8007724 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007748:	0020      	movs	r0, r4
 800774a:	2240      	movs	r2, #64	; 0x40
 800774c:	3048      	adds	r0, #72	; 0x48
 800774e:	2100      	movs	r1, #0
 8007750:	f00a fde2 	bl	8012318 <memset>
 8007754:	465b      	mov	r3, fp
 8007756:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8007758:	2a02      	cmp	r2, #2
 800775a:	d000      	beq.n	800775e <ExecuteMonitor+0x1aa>
 800775c:	e74a      	b.n	80075f4 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 800775e:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007760:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007762:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 8007764:	4b73      	ldr	r3, [pc, #460]	; (8007934 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007766:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8007768:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 800776a:	4b73      	ldr	r3, [pc, #460]	; (8007938 <ExecuteMonitor+0x384>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d033      	beq.n	80077da <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007772:	2250      	movs	r2, #80	; 0x50
   		           while(counter != numCommandParameters)
 8007774:	2100      	movs	r1, #0
 8007776:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007778:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 800777a:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800777c:	0010      	movs	r0, r2
 800777e:	2720      	movs	r7, #32
 8007780:	001a      	movs	r2, r3
 8007782:	0003      	movs	r3, r0
 8007784:	e001      	b.n	800778a <ExecuteMonitor+0x1d6>
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800778a:	1c58      	adds	r0, r3, #1
 800778c:	7028      	strb	r0, [r5, #0]
 800778e:	1c48      	adds	r0, r1, #1
 8007790:	7030      	strb	r0, [r6, #0]
 8007792:	0110      	lsls	r0, r2, #4
 8007794:	1a82      	subs	r2, r0, r2
 8007796:	4452      	add	r2, sl
 8007798:	18d2      	adds	r2, r2, r3
 800779a:	4643      	mov	r3, r8
 800779c:	5cd3      	ldrb	r3, [r2, r3]
 800779e:	2248      	movs	r2, #72	; 0x48
 80077a0:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 80077a2:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80077a4:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 80077a6:	f007 fa6b 	bl	800ec80 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80077aa:	7831      	ldrb	r1, [r6, #0]
 80077ac:	1863      	adds	r3, r4, r1
 80077ae:	3347      	adds	r3, #71	; 0x47
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	4b60      	ldr	r3, [pc, #384]	; (8007934 <ExecuteMonitor+0x380>)
 80077b4:	43ba      	bics	r2, r7
 80077b6:	d1e6      	bne.n	8007786 <ExecuteMonitor+0x1d2>
   		             counter++;
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	485e      	ldr	r0, [pc, #376]	; (8007934 <ExecuteMonitor+0x380>)
 80077bc:	3301      	adds	r3, #1
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 80077c2:	2001      	movs	r0, #1
 80077c4:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 80077c6:	485c      	ldr	r0, [pc, #368]	; (8007938 <ExecuteMonitor+0x384>)
 80077c8:	7800      	ldrb	r0, [r0, #0]
 80077ca:	4298      	cmp	r0, r3
 80077cc:	d1d5      	bne.n	800777a <ExecuteMonitor+0x1c6>
 80077ce:	465b      	mov	r3, fp
		            counter=0;
 80077d0:	4958      	ldr	r1, [pc, #352]	; (8007934 <ExecuteMonitor+0x380>)
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01e      	beq.n	8007818 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077da:	2748      	movs	r7, #72	; 0x48
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077dc:	2200      	movs	r2, #0
 80077de:	4b57      	ldr	r3, [pc, #348]	; (800793c <ExecuteMonitor+0x388>)
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077e4:	4a56      	ldr	r2, [pc, #344]	; (8007940 <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 80077e6:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077e8:	18d2      	adds	r2, r2, r3
 80077ea:	18e3      	adds	r3, r4, r3
 80077ec:	5ddb      	ldrb	r3, [r3, r7]
 80077ee:	3281      	adds	r2, #129	; 0x81
 80077f0:	32ff      	adds	r2, #255	; 0xff
 80077f2:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80077f4:	f005 f834 	bl	800c860 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077f8:	4b50      	ldr	r3, [pc, #320]	; (800793c <ExecuteMonitor+0x388>)
 80077fa:	4a50      	ldr	r2, [pc, #320]	; (800793c <ExecuteMonitor+0x388>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	3301      	adds	r3, #1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	7013      	strb	r3, [r2, #0]
 8007804:	2b3f      	cmp	r3, #63	; 0x3f
 8007806:	d9ed      	bls.n	80077e4 <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 8007808:	465b      	mov	r3, fp
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	f007 fa38 	bl	800ec80 <HAL_Delay>
                  while(flag != NonActive)
 8007810:	465b      	mov	r3, fp
 8007812:	791b      	ldrb	r3, [r3, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e1      	bne.n	80077dc <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007818:	0020      	movs	r0, r4
 800781a:	2240      	movs	r2, #64	; 0x40
 800781c:	2100      	movs	r1, #0
 800781e:	3048      	adds	r0, #72	; 0x48
 8007820:	f00a fd7a 	bl	8012318 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007824:	22c0      	movs	r2, #192	; 0xc0
 8007826:	2100      	movs	r1, #0
 8007828:	4846      	ldr	r0, [pc, #280]	; (8007944 <ExecuteMonitor+0x390>)
 800782a:	f00a fd75 	bl	8012318 <memset>
 800782e:	e6e1      	b.n	80075f4 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 8007830:	4a3e      	ldr	r2, [pc, #248]	; (800792c <ExecuteMonitor+0x378>)
 8007832:	3b5a      	subs	r3, #90	; 0x5a
 8007834:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007836:	4b44      	ldr	r3, [pc, #272]	; (8007948 <ExecuteMonitor+0x394>)
 8007838:	210a      	movs	r1, #10
 800783a:	781f      	ldrb	r7, [r3, #0]
 800783c:	4653      	mov	r3, sl
 800783e:	9701      	str	r7, [sp, #4]
 8007840:	3328      	adds	r3, #40	; 0x28
 8007842:	7858      	ldrb	r0, [r3, #1]
 8007844:	f7f8 fd0a 	bl	800025c <__aeabi_uidivmod>
 8007848:	2303      	movs	r3, #3
 800784a:	b2c9      	uxtb	r1, r1
 800784c:	4698      	mov	r8, r3
 800784e:	42b9      	cmp	r1, r7
 8007850:	d101      	bne.n	8007856 <ExecuteMonitor+0x2a2>
 8007852:	e0a1      	b.n	8007998 <ExecuteMonitor+0x3e4>
 8007854:	46b8      	mov	r8, r7
 8007856:	4643      	mov	r3, r8
 8007858:	1c9f      	adds	r7, r3, #2
 800785a:	4653      	mov	r3, sl
 800785c:	2228      	movs	r2, #40	; 0x28
 800785e:	4443      	add	r3, r8
 8007860:	5c98      	ldrb	r0, [r3, r2]
 8007862:	210a      	movs	r1, #10
 8007864:	f7f8 fcfa 	bl	800025c <__aeabi_uidivmod>
 8007868:	9b01      	ldr	r3, [sp, #4]
 800786a:	b2c9      	uxtb	r1, r1
 800786c:	b2ff      	uxtb	r7, r7
 800786e:	4299      	cmp	r1, r3
 8007870:	d1f0      	bne.n	8007854 <ExecuteMonitor+0x2a0>
 8007872:	4643      	mov	r3, r8
 8007874:	46b8      	mov	r8, r7
 8007876:	3301      	adds	r3, #1
 8007878:	b2db      	uxtb	r3, r3
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 800787e:	4a2b      	ldr	r2, [pc, #172]	; (800792c <ExecuteMonitor+0x378>)
 8007880:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007882:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 8007884:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007886:	2228      	movs	r2, #40	; 0x28
 8007888:	5c9b      	ldrb	r3, [r3, r2]
 800788a:	210a      	movs	r1, #10
 800788c:	0018      	movs	r0, r3
 800788e:	9303      	str	r3, [sp, #12]
 8007890:	f7f8 fce4 	bl	800025c <__aeabi_uidivmod>
 8007894:	233c      	movs	r3, #60	; 0x3c
 8007896:	4652      	mov	r2, sl
 8007898:	b2cf      	uxtb	r7, r1
 800789a:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	2b5d      	cmp	r3, #93	; 0x5d
 80078a0:	d00d      	beq.n	80078be <ExecuteMonitor+0x30a>
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	3301      	adds	r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	e000      	b.n	80078ac <ExecuteMonitor+0x2f8>
 80078aa:	0013      	movs	r3, r2
 80078ac:	2128      	movs	r1, #40	; 0x28
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	4453      	add	r3, sl
 80078b2:	5c5b      	ldrb	r3, [r3, r1]
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	2b5d      	cmp	r3, #93	; 0x5d
 80078b8:	d1f7      	bne.n	80078aa <ExecuteMonitor+0x2f6>
 80078ba:	4690      	mov	r8, r2
 80078bc:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 80078be:	4642      	mov	r2, r8
 80078c0:	4b1a      	ldr	r3, [pc, #104]	; (800792c <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078c2:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 80078c4:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 80078c6:	2301      	movs	r3, #1
 80078c8:	4a20      	ldr	r2, [pc, #128]	; (800794c <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078ca:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 80078cc:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078ce:	9b02      	ldr	r3, [sp, #8]
 80078d0:	2214      	movs	r2, #20
 80078d2:	469c      	mov	ip, r3
 80078d4:	3128      	adds	r1, #40	; 0x28
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	4461      	add	r1, ip
 80078da:	303d      	adds	r0, #61	; 0x3d
 80078dc:	f00a fd13 	bl	8012306 <memcpy>
 80078e0:	e6c3      	b.n	800766a <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078e2:	4653      	mov	r3, sl
 80078e4:	3328      	adds	r3, #40	; 0x28
 80078e6:	7858      	ldrb	r0, [r3, #1]
 80078e8:	210a      	movs	r1, #10
 80078ea:	f7f8 fcb7 	bl	800025c <__aeabi_uidivmod>
 80078ee:	4652      	mov	r2, sl
 80078f0:	233c      	movs	r3, #60	; 0x3c
 80078f2:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078f4:	4650      	mov	r0, sl
 80078f6:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078f8:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 80078fa:	4a0c      	ldr	r2, [pc, #48]	; (800792c <ExecuteMonitor+0x378>)
 80078fc:	3b3a      	subs	r3, #58	; 0x3a
 80078fe:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 8007900:	4a12      	ldr	r2, [pc, #72]	; (800794c <ExecuteMonitor+0x398>)
 8007902:	3b01      	subs	r3, #1
 8007904:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007906:	312a      	adds	r1, #42	; 0x2a
 8007908:	2212      	movs	r2, #18
 800790a:	303d      	adds	r0, #61	; 0x3d
 800790c:	f00a fcfb 	bl	8012306 <memcpy>
 8007910:	e6ab      	b.n	800766a <ExecuteMonitor+0xb6>
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	20000000 	.word	0x20000000
 8007918:	20006b00 	.word	0x20006b00
 800791c:	20006b44 	.word	0x20006b44
 8007920:	20001ec0 	.word	0x20001ec0
 8007924:	20006b41 	.word	0x20006b41
 8007928:	20001f40 	.word	0x20001f40
 800792c:	20006b21 	.word	0x20006b21
 8007930:	20006b43 	.word	0x20006b43
 8007934:	20006b22 	.word	0x20006b22
 8007938:	20006b40 	.word	0x20006b40
 800793c:	20006b01 	.word	0x20006b01
 8007940:	20001a38 	.word	0x20001a38
 8007944:	20001bb8 	.word	0x20001bb8
 8007948:	20006b42 	.word	0x20006b42
 800794c:	20006b20 	.word	0x20006b20
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007950:	4657      	mov	r7, sl
 8007952:	3728      	adds	r7, #40	; 0x28
 8007954:	7878      	ldrb	r0, [r7, #1]
 8007956:	210a      	movs	r1, #10
 8007958:	f7f8 fc80 	bl	800025c <__aeabi_uidivmod>
 800795c:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <ExecuteMonitor+0x3f0>)
 800795e:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007960:	78b8      	ldrb	r0, [r7, #2]
 8007962:	210a      	movs	r1, #10
 8007964:	f7f8 fc7a 	bl	800025c <__aeabi_uidivmod>
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <ExecuteMonitor+0x3f4>)
 800796a:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800796c:	78f8      	ldrb	r0, [r7, #3]
 800796e:	210a      	movs	r1, #10
 8007970:	f7f8 fc74 	bl	800025c <__aeabi_uidivmod>
 8007974:	4652      	mov	r2, sl
 8007976:	233c      	movs	r3, #60	; 0x3c
 8007978:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800797a:	4650      	mov	r0, sl
 800797c:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800797e:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <ExecuteMonitor+0x3f8>)
 8007982:	3b38      	subs	r3, #56	; 0x38
 8007984:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 8007986:	4a0a      	ldr	r2, [pc, #40]	; (80079b0 <ExecuteMonitor+0x3fc>)
 8007988:	3b03      	subs	r3, #3
 800798a:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800798c:	312c      	adds	r1, #44	; 0x2c
 800798e:	2210      	movs	r2, #16
 8007990:	303d      	adds	r0, #61	; 0x3d
 8007992:	f00a fcb8 	bl	8012306 <memcpy>
 8007996:	e668      	b.n	800766a <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007998:	2202      	movs	r2, #2
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	3b01      	subs	r3, #1
 80079a0:	e76d      	b.n	800787e <ExecuteMonitor+0x2ca>
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	20006b42 	.word	0x20006b42
 80079a8:	20006b40 	.word	0x20006b40
 80079ac:	20006b21 	.word	0x20006b21
 80079b0:	20006b20 	.word	0x20006b20

080079b4 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	4c1e      	ldr	r4, [pc, #120]	; (8007a30 <StartDefaultTask+0x7c>)
 80079b8:	4d1e      	ldr	r5, [pc, #120]	; (8007a34 <StartDefaultTask+0x80>)
 80079ba:	4e1f      	ldr	r6, [pc, #124]	; (8007a38 <StartDefaultTask+0x84>)
 80079bc:	e00f      	b.n	80079de <StartDefaultTask+0x2a>
		switch(indMode){
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d024      	beq.n	8007a0c <StartDefaultTask+0x58>
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d02b      	beq.n	8007a1e <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 80079c6:	f004 f8ed 	bl	800bba4 <CheckAttachedButtons>
		ExecuteSnippet();
 80079ca:	f7fd fcfb 	bl	80053c4 <ExecuteSnippet>
		ExecuteMonitor();
 80079ce:	f7ff fdf1 	bl	80075b4 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 80079d2:	782b      	ldrb	r3, [r5, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d100      	bne.n	80079da <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 80079d8:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 80079da:	f007 f805 	bl	800e9e8 <vPortYield>
		switch(indMode){
 80079de:	7823      	ldrb	r3, [r4, #0]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d1ec      	bne.n	80079be <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 80079e4:	2180      	movs	r1, #128	; 0x80
 80079e6:	2090      	movs	r0, #144	; 0x90
 80079e8:	2201      	movs	r2, #1
 80079ea:	05c0      	lsls	r0, r0, #23
 80079ec:	0109      	lsls	r1, r1, #4
 80079ee:	f008 fd93 	bl	8010518 <HAL_GPIO_WritePin>
 80079f2:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 80079f4:	f005 faa8 	bl	800cf48 <osDelay>
 80079f8:	2180      	movs	r1, #128	; 0x80
 80079fa:	2090      	movs	r0, #144	; 0x90
 80079fc:	2200      	movs	r2, #0
 80079fe:	0109      	lsls	r1, r1, #4
 8007a00:	05c0      	lsls	r0, r0, #23
 8007a02:	f008 fd89 	bl	8010518 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007a06:	2300      	movs	r3, #0
 8007a08:	7023      	strb	r3, [r4, #0]
				break;
 8007a0a:	e7dc      	b.n	80079c6 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8007a0c:	2180      	movs	r1, #128	; 0x80
 8007a0e:	2090      	movs	r0, #144	; 0x90
 8007a10:	2201      	movs	r2, #1
 8007a12:	05c0      	lsls	r0, r0, #23
 8007a14:	0109      	lsls	r1, r1, #4
 8007a16:	f008 fd7f 	bl	8010518 <HAL_GPIO_WritePin>
 8007a1a:	201e      	movs	r0, #30
 8007a1c:	e7ea      	b.n	80079f4 <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 8007a1e:	2180      	movs	r1, #128	; 0x80
 8007a20:	2090      	movs	r0, #144	; 0x90
 8007a22:	2201      	movs	r2, #1
 8007a24:	05c0      	lsls	r0, r0, #23
 8007a26:	0109      	lsls	r1, r1, #4
 8007a28:	f008 fd76 	bl	8010518 <HAL_GPIO_WritePin>
 8007a2c:	20c8      	movs	r0, #200	; 0xc8
 8007a2e:	e7e1      	b.n	80079f4 <StartDefaultTask+0x40>
 8007a30:	2000117e 	.word	0x2000117e
 8007a34:	20002678 	.word	0x20002678
 8007a38:	2000266c 	.word	0x2000266c

08007a3c <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a3c:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007a3e:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	4904      	ldr	r1, [pc, #16]	; (8007a54 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007a44:	f7f8 fb84 	bl	8000150 <__udivsi3>
 8007a48:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007a4a:	6098      	str	r0, [r3, #8]
}
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	200000b4 	.word	0x200000b4
 8007a54:	00002710 	.word	0x00002710
 8007a58:	20001fc0 	.word	0x20001fc0

08007a5c <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a5c:	21fa      	movs	r1, #250	; 0xfa
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007a60:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	0089      	lsls	r1, r1, #2
 8007a66:	f7f8 fb73 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a6a:	4c0d      	ldr	r4, [pc, #52]	; (8007aa0 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a6c:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a6e:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007a70:	f006 f996 	bl	800dda0 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <ulMainGetRunTimeCounterValue+0x48>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	015b      	lsls	r3, r3, #5
 8007a7a:	d50c      	bpl.n	8007a96 <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a7c:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007a7e:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a80:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007a84:	0084      	lsls	r4, r0, #2
 8007a86:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a88:	6899      	ldr	r1, [r3, #8]
 8007a8a:	0028      	movs	r0, r5
 8007a8c:	f7f8 fb60 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007a90:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a92:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a96:	1bad      	subs	r5, r5, r6
 8007a98:	e7f3      	b.n	8007a82 <ulMainGetRunTimeCounterValue+0x26>
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	200000b4 	.word	0x200000b4
 8007aa0:	e000e018 	.word	0xe000e018
 8007aa4:	e000ed04 	.word	0xe000ed04
 8007aa8:	20001fc0 	.word	0x20001fc0

08007aac <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007aac:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007aae:	f006 ff43 	bl	800e938 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007ab2:	b2c4      	uxtb	r4, r0
 8007ab4:	0020      	movs	r0, r4
 8007ab6:	f002 fa19 	bl	8009eec <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007aba:	0020      	movs	r0, r4
 8007abc:	f002 fe4e 	bl	800a75c <SwitchStreamDMAToMsg>
}
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)

08007ac4 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac6:	46ce      	mov	lr, r9
 8007ac8:	4647      	mov	r7, r8
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b085      	sub	sp, #20
 8007ace:	0015      	movs	r5, r2
 8007ad0:	466a      	mov	r2, sp
 8007ad2:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007ad4:	aa0c      	add	r2, sp, #48	; 0x30
 8007ad6:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007ad8:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d06b      	beq.n	8007bb6 <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d051      	beq.n	8007b86 <SetupDMAStreams+0xc2>
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d04f      	beq.n	8007b86 <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d06a      	beq.n	8007bc0 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007aea:	2801      	cmp	r0, #1
 8007aec:	d052      	beq.n	8007b94 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007aee:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007af0:	2802      	cmp	r0, #2
 8007af2:	d149      	bne.n	8007b88 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007af4:	0018      	movs	r0, r3
 8007af6:	f005 f8f7 	bl	800cce8 <GetUart>
 8007afa:	ab0c      	add	r3, sp, #48	; 0x30
 8007afc:	0004      	movs	r4, r0
 8007afe:	7818      	ldrb	r0, [r3, #0]
 8007b00:	f005 f8f2 	bl	800cce8 <GetUart>
 8007b04:	2201      	movs	r2, #1
 8007b06:	0001      	movs	r1, r0
 8007b08:	0020      	movs	r0, r4
 8007b0a:	f7ff fbef 	bl	80072ec <StartDMAstream>
 8007b0e:	2817      	cmp	r0, #23
 8007b10:	d04f      	beq.n	8007bb2 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b12:	21fa      	movs	r1, #250	; 0xfa
 8007b14:	0168      	lsls	r0, r5, #5
 8007b16:	1b40      	subs	r0, r0, r5
 8007b18:	0080      	lsls	r0, r0, #2
 8007b1a:	1940      	adds	r0, r0, r5
 8007b1c:	0089      	lsls	r1, r1, #2
 8007b1e:	00c0      	lsls	r0, r0, #3
 8007b20:	f7f8 fb16 	bl	8000150 <__udivsi3>
 8007b24:	4b49      	ldr	r3, [pc, #292]	; (8007c4c <SetupDMAStreams+0x188>)
 8007b26:	4d4a      	ldr	r5, [pc, #296]	; (8007c50 <SetupDMAStreams+0x18c>)
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	4698      	mov	r8, r3
 8007b2c:	230f      	movs	r3, #15
 8007b2e:	0001      	movs	r1, r0
 8007b30:	2200      	movs	r2, #0
 8007b32:	446b      	add	r3, sp
 8007b34:	0007      	movs	r7, r0
 8007b36:	0028      	movs	r0, r5
 8007b38:	f006 fdae 	bl	800e698 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007b3c:	466b      	mov	r3, sp
 8007b3e:	7bdb      	ldrb	r3, [r3, #15]
 8007b40:	4c44      	ldr	r4, [pc, #272]	; (8007c54 <SetupDMAStreams+0x190>)
 8007b42:	3b01      	subs	r3, #1
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b48:	ab0c      	add	r3, sp, #48	; 0x30
 8007b4a:	7818      	ldrb	r0, [r3, #0]
 8007b4c:	f005 f8cc 	bl	800cce8 <GetUart>
 8007b50:	466b      	mov	r3, sp
 8007b52:	4681      	mov	r9, r0
 8007b54:	7bd8      	ldrb	r0, [r3, #15]
 8007b56:	f005 f8c7 	bl	800cce8 <GetUart>
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	0001      	movs	r1, r0
 8007b5e:	4648      	mov	r0, r9
 8007b60:	f7ff fbc4 	bl	80072ec <StartDMAstream>
 8007b64:	2817      	cmp	r0, #23
 8007b66:	d024      	beq.n	8007bb2 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b68:	4643      	mov	r3, r8
 8007b6a:	0028      	movs	r0, r5
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	ab0c      	add	r3, sp, #48	; 0x30
 8007b72:	0039      	movs	r1, r7
 8007b74:	f006 fd90 	bl	800e698 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007b78:	ab0c      	add	r3, sp, #48	; 0x30
 8007b7a:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b7c:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	511e      	str	r6, [r3, r4]
 8007b84:	e044      	b.n	8007c10 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007b86:	2467      	movs	r4, #103	; 0x67
}
 8007b88:	0020      	movs	r0, r4
 8007b8a:	b005      	add	sp, #20
 8007b8c:	bc0c      	pop	{r2, r3}
 8007b8e:	4690      	mov	r8, r2
 8007b90:	4699      	mov	r9, r3
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b94:	0010      	movs	r0, r2
 8007b96:	f005 f8a7 	bl	800cce8 <GetUart>
 8007b9a:	466b      	mov	r3, sp
 8007b9c:	0004      	movs	r4, r0
 8007b9e:	7bd8      	ldrb	r0, [r3, #15]
 8007ba0:	f005 f8a2 	bl	800cce8 <GetUart>
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	0001      	movs	r1, r0
 8007ba8:	0020      	movs	r0, r4
 8007baa:	f7ff fb9f 	bl	80072ec <StartDMAstream>
 8007bae:	2817      	cmp	r0, #23
 8007bb0:	d13d      	bne.n	8007c2e <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007bb2:	2417      	movs	r4, #23
 8007bb4:	e7e8      	b.n	8007b88 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007bb6:	2102      	movs	r1, #2
 8007bb8:	4a27      	ldr	r2, [pc, #156]	; (8007c58 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007bba:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007bbc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007bbe:	e7e3      	b.n	8007b88 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f005 f891 	bl	800cce8 <GetUart>
 8007bc6:	ab0c      	add	r3, sp, #48	; 0x30
 8007bc8:	0004      	movs	r4, r0
 8007bca:	7818      	ldrb	r0, [r3, #0]
 8007bcc:	f005 f88c 	bl	800cce8 <GetUart>
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	0001      	movs	r1, r0
 8007bd4:	0020      	movs	r0, r4
 8007bd6:	f7ff fb89 	bl	80072ec <StartDMAstream>
 8007bda:	2817      	cmp	r0, #23
 8007bdc:	d0e9      	beq.n	8007bb2 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007bde:	21fa      	movs	r1, #250	; 0xfa
 8007be0:	0168      	lsls	r0, r5, #5
 8007be2:	1b40      	subs	r0, r0, r5
 8007be4:	0080      	lsls	r0, r0, #2
 8007be6:	1940      	adds	r0, r0, r5
 8007be8:	0089      	lsls	r1, r1, #2
 8007bea:	00c0      	lsls	r0, r0, #3
 8007bec:	f7f8 fab0 	bl	8000150 <__udivsi3>
 8007bf0:	4b16      	ldr	r3, [pc, #88]	; (8007c4c <SetupDMAStreams+0x188>)
 8007bf2:	0001      	movs	r1, r0
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	230f      	movs	r3, #15
 8007bf8:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4814      	ldr	r0, [pc, #80]	; (8007c50 <SetupDMAStreams+0x18c>)
 8007bfe:	f006 fd4b 	bl	800e698 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007c02:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c04:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007c06:	7bdb      	ldrb	r3, [r3, #15]
 8007c08:	4a12      	ldr	r2, [pc, #72]	; (8007c54 <SetupDMAStreams+0x190>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007c10:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	d0b8      	beq.n	8007b88 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007c16:	f006 f8bd 	bl	800dd94 <xTaskGetTickCount>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	425b      	negs	r3, r3
 8007c1e:	0002      	movs	r2, r0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	2101      	movs	r1, #1
 8007c24:	2300      	movs	r3, #0
 8007c26:	0028      	movs	r0, r5
 8007c28:	f006 fd56 	bl	800e6d8 <xTimerGenericCommand>
 8007c2c:	e7ac      	b.n	8007b88 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c2e:	21fa      	movs	r1, #250	; 0xfa
 8007c30:	0168      	lsls	r0, r5, #5
 8007c32:	1b40      	subs	r0, r0, r5
 8007c34:	0080      	lsls	r0, r0, #2
 8007c36:	1940      	adds	r0, r0, r5
 8007c38:	0089      	lsls	r1, r1, #2
 8007c3a:	00c0      	lsls	r0, r0, #3
 8007c3c:	f7f8 fa88 	bl	8000150 <__udivsi3>
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <SetupDMAStreams+0x188>)
 8007c42:	0001      	movs	r1, r0
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	ab0c      	add	r3, sp, #48	; 0x30
 8007c48:	e7d7      	b.n	8007bfa <SetupDMAStreams+0x136>
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	08007aad 	.word	0x08007aad
 8007c50:	08019788 	.word	0x08019788
 8007c54:	200019d8 	.word	0x200019d8
 8007c58:	20000c2c 	.word	0x20000c2c

08007c5c <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007c5c:	b510      	push	{r4, lr}
	switch(port){
 8007c5e:	2806      	cmp	r0, #6
 8007c60:	d80a      	bhi.n	8007c78 <NotifyMessagingTask+0x1c>
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <NotifyMessagingTask+0x34>)
 8007c64:	0080      	lsls	r0, r0, #2
 8007c66:	581b      	ldr	r3, [r3, r0]
 8007c68:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P6
		case P6:
			xTaskNotifyGive(P6MsgTaskHandle)
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <NotifyMessagingTask+0x38>)
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	2300      	movs	r3, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	f006 fc60 	bl	800e538 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007c78:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <NotifyMessagingTask+0x3c>)
 8007c7c:	e7f6      	b.n	8007c6c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <NotifyMessagingTask+0x40>)
 8007c80:	e7f4      	b.n	8007c6c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <NotifyMessagingTask+0x44>)
 8007c84:	e7f2      	b.n	8007c6c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <NotifyMessagingTask+0x48>)
 8007c88:	e7f0      	b.n	8007c6c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <NotifyMessagingTask+0x4c>)
 8007c8c:	e7ee      	b.n	8007c6c <NotifyMessagingTask+0x10>
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	08016eb0 	.word	0x08016eb0
 8007c94:	20001ee4 	.word	0x20001ee4
 8007c98:	20001ed0 	.word	0x20001ed0
 8007c9c:	20001ed4 	.word	0x20001ed4
 8007ca0:	20001ed8 	.word	0x20001ed8
 8007ca4:	20001edc 	.word	0x20001edc
 8007ca8:	20001ee0 	.word	0x20001ee0

08007cac <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	ac06      	add	r4, sp, #24
 8007cb2:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007cb4:	0004      	movs	r4, r0
 8007cb6:	4314      	orrs	r4, r2
 8007cb8:	d011      	beq.n	8007cde <SendMessageFromPort+0x32>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d10b      	bne.n	8007cd6 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007cbe:	1c96      	adds	r6, r2, #2
 8007cc0:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007cc2:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007cc4:	2e01      	cmp	r6, #1
 8007cc6:	d803      	bhi.n	8007cd0 <SendMessageFromPort+0x24>
 8007cc8:	9500      	str	r5, [sp, #0]
 8007cca:	f000 f80b 	bl	8007ce4 <SendMessageFromPort.part.0>
 8007cce:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007cd0:	0020      	movs	r0, r4
 8007cd2:	b002      	add	sp, #8
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	d0f6      	beq.n	8007cc8 <SendMessageFromPort+0x1c>
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d1f4      	bne.n	8007cc8 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007cde:	2467      	movs	r4, #103	; 0x67
 8007ce0:	e7f6      	b.n	8007cd0 <SendMessageFromPort+0x24>
 8007ce2:	46c0      	nop			; (mov r8, r8)

08007ce4 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	46de      	mov	lr, fp
 8007ce8:	464e      	mov	r6, r9
 8007cea:	4645      	mov	r5, r8
 8007cec:	4657      	mov	r7, sl
 8007cee:	b5e0      	push	{r5, r6, r7, lr}
 8007cf0:	b087      	sub	sp, #28
 8007cf2:	0005      	movs	r5, r0
 8007cf4:	9003      	str	r0, [sp, #12]
 8007cf6:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cf8:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007cfa:	ab10      	add	r3, sp, #64	; 0x40
 8007cfc:	4689      	mov	r9, r1
 8007cfe:	4690      	mov	r8, r2
 8007d00:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d02:	f005 ffb1 	bl	800dc68 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d06:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d08:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f005 ffbc 	bl	800dc88 <vTaskPrioritySet>
	message[0] ='H';
 8007d10:	2348      	movs	r3, #72	; 0x48
 8007d12:	4cd2      	ldr	r4, [pc, #840]	; (800805c <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d14:	464a      	mov	r2, r9
	message[0] ='H';
 8007d16:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007d18:	3312      	adds	r3, #18
 8007d1a:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d1c:	002b      	movs	r3, r5
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d000      	beq.n	8007d24 <SendMessageFromPort.part.0+0x40>
 8007d22:	e094      	b.n	8007e4e <SendMessageFromPort.part.0+0x16a>
 8007d24:	4643      	mov	r3, r8
 8007d26:	1c9f      	adds	r7, r3, #2
 8007d28:	b2ff      	uxtb	r7, r7
 8007d2a:	2f01      	cmp	r7, #1
 8007d2c:	d800      	bhi.n	8007d30 <SendMessageFromPort.part.0+0x4c>
 8007d2e:	e095      	b.n	8007e5c <SendMessageFromPort.part.0+0x178>
 8007d30:	465b      	mov	r3, fp
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d100      	bne.n	8007d38 <SendMessageFromPort.part.0+0x54>
 8007d36:	e091      	b.n	8007e5c <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007d38:	4bc9      	ldr	r3, [pc, #804]	; (8008060 <SendMessageFromPort.part.0+0x37c>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	4699      	mov	r9, r3
		message[2] =length;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007d42:	4643      	mov	r3, r8
 8007d44:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007d46:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d48:	4ac6      	ldr	r2, [pc, #792]	; (8008064 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007d4a:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d4c:	7913      	ldrb	r3, [r2, #4]
 8007d4e:	7851      	ldrb	r1, [r2, #1]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	0089      	lsls	r1, r1, #2
 8007d56:	430b      	orrs	r3, r1
 8007d58:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007d5a:	22ff      	movs	r2, #255	; 0xff
 8007d5c:	455a      	cmp	r2, fp
 8007d5e:	4192      	sbcs	r2, r2
 8007d60:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d62:	0052      	lsls	r2, r2, #1
 8007d64:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007d66:	465a      	mov	r2, fp
 8007d68:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	4692      	mov	sl, r2
 8007d6e:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007d74:	2aff      	cmp	r2, #255	; 0xff
 8007d76:	d903      	bls.n	8007d80 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007d78:	0a12      	lsrs	r2, r2, #8
 8007d7a:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007d80:	2e2e      	cmp	r6, #46	; 0x2e
 8007d82:	d800      	bhi.n	8007d86 <SendMessageFromPort.part.0+0xa2>
 8007d84:	e157      	b.n	8008036 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007d86:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007d88:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007d8a:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007d8c:	4db6      	ldr	r5, [pc, #728]	; (8008068 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007d92:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007d94:	2e2d      	cmp	r6, #45	; 0x2d
 8007d96:	d900      	bls.n	8007d9a <SendMessageFromPort.part.0+0xb6>
 8007d98:	e136      	b.n	8008008 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d9a:	237f      	movs	r3, #127	; 0x7f
 8007d9c:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d9e:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007da0:	4013      	ands	r3, r2
 8007da2:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007da4:	4653      	mov	r3, sl
 8007da6:	1dd8      	adds	r0, r3, #7
 8007da8:	4bb0      	ldr	r3, [pc, #704]	; (800806c <SendMessageFromPort.part.0+0x388>)
 8007daa:	1820      	adds	r0, r4, r0
 8007dac:	18c9      	adds	r1, r1, r3
 8007dae:	0032      	movs	r2, r6
 8007db0:	f00a faa9 	bl	8012306 <memcpy>
					ptrShift =0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007db8:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007dba:	4653      	mov	r3, sl
 8007dbc:	1d1d      	adds	r5, r3, #4
 8007dbe:	19ad      	adds	r5, r5, r6
 8007dc0:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007dc2:	4bab      	ldr	r3, [pc, #684]	; (8008070 <SendMessageFromPort.part.0+0x38c>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d03d      	beq.n	8007e46 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007dca:	4baa      	ldr	r3, [pc, #680]	; (8008074 <SendMessageFromPort.part.0+0x390>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2bff      	cmp	r3, #255	; 0xff
 8007dd0:	d100      	bne.n	8007dd4 <SendMessageFromPort.part.0+0xf0>
 8007dd2:	e106      	b.n	8007fe2 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007dd4:	4aa8      	ldr	r2, [pc, #672]	; (8008078 <SendMessageFromPort.part.0+0x394>)
 8007dd6:	7817      	ldrb	r7, [r2, #0]
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	d100      	bne.n	8007dde <SendMessageFromPort.part.0+0xfa>
 8007ddc:	e139      	b.n	8008052 <SendMessageFromPort.part.0+0x36e>
 8007dde:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007de0:	0021      	movs	r1, r4
 8007de2:	409a      	lsls	r2, r3
 8007de4:	4451      	add	r1, sl
 8007de6:	4694      	mov	ip, r2
 8007de8:	9105      	str	r1, [sp, #20]
 8007dea:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007dec:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dee:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007df0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007df2:	46ac      	mov	ip, r5
 8007df4:	000d      	movs	r5, r1
 8007df6:	48a1      	ldr	r0, [pc, #644]	; (800807c <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007df8:	8801      	ldrh	r1, [r0, #0]
 8007dfa:	420f      	tst	r7, r1
 8007dfc:	d009      	beq.n	8007e12 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007dfe:	3201      	adds	r2, #1
 8007e00:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007e02:	1991      	adds	r1, r2, r6
 8007e04:	292c      	cmp	r1, #44	; 0x2c
 8007e06:	dd00      	ble.n	8007e0a <SendMessageFromPort.part.0+0x126>
 8007e08:	e0fc      	b.n	8008004 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007e0a:	9905      	ldr	r1, [sp, #20]
 8007e0c:	1889      	adds	r1, r1, r2
 8007e0e:	1989      	adds	r1, r1, r6
 8007e10:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e12:	3301      	adds	r3, #1
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3002      	adds	r0, #2
 8007e18:	42ab      	cmp	r3, r5
 8007e1a:	d9ed      	bls.n	8007df8 <SendMessageFromPort.part.0+0x114>
 8007e1c:	4665      	mov	r5, ip
 8007e1e:	0010      	movs	r0, r2
 8007e20:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007e22:	4653      	mov	r3, sl
 8007e24:	3307      	adds	r3, #7
 8007e26:	199e      	adds	r6, r3, r6
 8007e28:	1836      	adds	r6, r6, r0
 8007e2a:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007e2c:	292b      	cmp	r1, #43	; 0x2b
 8007e2e:	dd00      	ble.n	8007e32 <SendMessageFromPort.part.0+0x14e>
 8007e30:	e0e8      	b.n	8008004 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007e32:	4993      	ldr	r1, [pc, #588]	; (8008080 <SendMessageFromPort.part.0+0x39c>)
 8007e34:	3502      	adds	r5, #2
 8007e36:	780b      	ldrb	r3, [r1, #0]
 8007e38:	19a6      	adds	r6, r4, r6
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007e3e:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007e40:	700b      	strb	r3, [r1, #0]
 8007e42:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007e44:	b2ed      	uxtb	r5, r5
 8007e46:	4647      	mov	r7, r8
 8007e48:	3702      	adds	r7, #2
 8007e4a:	b2ff      	uxtb	r7, r7
 8007e4c:	e012      	b.n	8007e74 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007e4e:	465b      	mov	r3, fp
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d000      	beq.n	8007e56 <SendMessageFromPort.part.0+0x172>
 8007e54:	e0af      	b.n	8007fb6 <SendMessageFromPort.part.0+0x2d2>
 8007e56:	4647      	mov	r7, r8
 8007e58:	3702      	adds	r7, #2
 8007e5a:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8007e5c:	3e01      	subs	r6, #1
 8007e5e:	4b89      	ldr	r3, [pc, #548]	; (8008084 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e60:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8007e62:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e64:	1b89      	subs	r1, r1, r6
 8007e66:	4e88      	ldr	r6, [pc, #544]	; (8008088 <SendMessageFromPort.part.0+0x3a4>)
 8007e68:	00c9      	lsls	r1, r1, #3
 8007e6a:	1989      	adds	r1, r1, r6
 8007e6c:	002a      	movs	r2, r5
 8007e6e:	4887      	ldr	r0, [pc, #540]	; (800808c <SendMessageFromPort.part.0+0x3a8>)
 8007e70:	f00a fa49 	bl	8012306 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007e74:	1ceb      	adds	r3, r5, #3
 8007e76:	469a      	mov	sl, r3
 8007e78:	4e85      	ldr	r6, [pc, #532]	; (8008090 <SendMessageFromPort.part.0+0x3ac>)
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	0021      	movs	r1, r4
 8007e7e:	0030      	movs	r0, r6
	message[2] =length;
 8007e80:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007e82:	f00a fa40 	bl	8012306 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e86:	b2ab      	uxth	r3, r5
 8007e88:	4651      	mov	r1, sl
 8007e8a:	0030      	movs	r0, r6
 8007e8c:	9305      	str	r3, [sp, #20]
 8007e8e:	f002 fcf3 	bl	800a878 <CalculateCRC8>
 8007e92:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e94:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e96:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e98:	2100      	movs	r1, #0
 8007e9a:	0030      	movs	r0, r6
 8007e9c:	f00a fa3c 	bl	8012318 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007ea0:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007ea2:	2f01      	cmp	r7, #1
 8007ea4:	d94a      	bls.n	8007f3c <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007ea6:	3b2c      	subs	r3, #44	; 0x2c
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d800      	bhi.n	8007eae <SendMessageFromPort.part.0+0x1ca>
 8007eac:	e08d      	b.n	8007fca <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007eae:	4b6d      	ldr	r3, [pc, #436]	; (8008064 <SendMessageFromPort.part.0+0x380>)
 8007eb0:	4698      	mov	r8, r3
 8007eb2:	88db      	ldrh	r3, [r3, #6]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d100      	bne.n	8007eba <SendMessageFromPort.part.0+0x1d6>
 8007eb8:	e08f      	b.n	8007fda <SendMessageFromPort.part.0+0x2f6>
 8007eba:	9e05      	ldr	r6, [sp, #20]
 8007ebc:	4f75      	ldr	r7, [pc, #468]	; (8008094 <SendMessageFromPort.part.0+0x3b0>)
 8007ebe:	4b76      	ldr	r3, [pc, #472]	; (8008098 <SendMessageFromPort.part.0+0x3b4>)
 8007ec0:	3604      	adds	r6, #4
 8007ec2:	46ba      	mov	sl, r7
 8007ec4:	b2b6      	uxth	r6, r6
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	4699      	mov	r9, r3
 8007eca:	9f03      	ldr	r7, [sp, #12]
 8007ecc:	e005      	b.n	8007eda <SendMessageFromPort.part.0+0x1f6>
 8007ece:	4643      	mov	r3, r8
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	88db      	ldrh	r3, [r3, #6]
 8007ed4:	b2ed      	uxtb	r5, r5
 8007ed6:	42ab      	cmp	r3, r5
 8007ed8:	d91c      	bls.n	8007f14 <SendMessageFromPort.part.0+0x230>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007eda:	2332      	movs	r3, #50	; 0x32
 8007edc:	0032      	movs	r2, r6
 8007ede:	0021      	movs	r1, r4
 8007ee0:	0038      	movs	r0, r7
 8007ee2:	f7fa ff1f 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007ee6:	20c8      	movs	r0, #200	; 0xc8
 8007ee8:	f005 f82e 	bl	800cf48 <osDelay>
				if(ACK_FLAG == true)
 8007eec:	464b      	mov	r3, r9
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10f      	bne.n	8007f14 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8007ef4:	4653      	mov	r3, sl
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0e8      	beq.n	8007ece <SendMessageFromPort.part.0+0x1ea>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007efc:	2332      	movs	r3, #50	; 0x32
 8007efe:	0032      	movs	r2, r6
 8007f00:	0021      	movs	r1, r4
 8007f02:	0038      	movs	r0, r7
 8007f04:	f7fa ff0e 	bl	8002d24 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007f08:	4643      	mov	r3, r8
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	88db      	ldrh	r3, [r3, #6]
 8007f0e:	b2ed      	uxtb	r5, r5
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	d8e2      	bhi.n	8007eda <SendMessageFromPort.part.0+0x1f6>
 8007f14:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8007f16:	2300      	movs	r3, #0
 8007f18:	464a      	mov	r2, r9
 8007f1a:	703b      	strb	r3, [r7, #0]
 8007f1c:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8007f1e:	2000      	movs	r0, #0
 8007f20:	9904      	ldr	r1, [sp, #16]
 8007f22:	f005 feb1 	bl	800dc88 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8007f26:	2202      	movs	r2, #2
	return result;
 8007f28:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8007f2a:	4b5c      	ldr	r3, [pc, #368]	; (800809c <SendMessageFromPort.part.0+0x3b8>)
 8007f2c:	701a      	strb	r2, [r3, #0]
}
 8007f2e:	b007      	add	sp, #28
 8007f30:	bc3c      	pop	{r2, r3, r4, r5}
 8007f32:	4690      	mov	r8, r2
 8007f34:	4699      	mov	r9, r3
 8007f36:	46a2      	mov	sl, r4
 8007f38:	46ab      	mov	fp, r5
 8007f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03e      	beq.n	8007fbe <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8007f40:	4648      	mov	r0, r9
 8007f42:	f7fb fd37 	bl	80039b4 <FindBroadcastRoutes>
 8007f46:	2300      	movs	r3, #0
 8007f48:	4698      	mov	r8, r3
 8007f4a:	4b45      	ldr	r3, [pc, #276]	; (8008060 <SendMessageFromPort.part.0+0x37c>)
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f4c:	9e05      	ldr	r6, [sp, #20]
 8007f4e:	4699      	mov	r9, r3
 8007f50:	4b53      	ldr	r3, [pc, #332]	; (80080a0 <SendMessageFromPort.part.0+0x3bc>)
 8007f52:	3604      	adds	r6, #4
 8007f54:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f56:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f58:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f5a:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f5c:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f5e:	2501      	movs	r5, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f60:	4646      	mov	r6, r8
 8007f62:	4f4c      	ldr	r7, [pc, #304]	; (8008094 <SendMessageFromPort.part.0+0x3b0>)
 8007f64:	4698      	mov	r8, r3
 8007f66:	e009      	b.n	8007f7c <SendMessageFromPort.part.0+0x298>
			rejected_FLAG=false;
 8007f68:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f6a:	3501      	adds	r5, #1
			Delay_us(10);
 8007f6c:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f6e:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8007f70:	703b      	strb	r3, [r7, #0]
 8007f72:	3601      	adds	r6, #1
			Delay_us(10);
 8007f74:	f004 fc74 	bl	800c860 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f78:	2d07      	cmp	r5, #7
 8007f7a:	d0d0      	beq.n	8007f1e <SendMessageFromPort.part.0+0x23a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	465a      	mov	r2, fp
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	5ad3      	ldrh	r3, [r2, r3]
 8007f88:	4652      	mov	r2, sl
 8007f8a:	4133      	asrs	r3, r6
 8007f8c:	421a      	tst	r2, r3
 8007f8e:	d0eb      	beq.n	8007f68 <SendMessageFromPort.part.0+0x284>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f90:	2332      	movs	r3, #50	; 0x32
 8007f92:	4642      	mov	r2, r8
 8007f94:	0021      	movs	r1, r4
 8007f96:	0028      	movs	r0, r5
 8007f98:	f7fa fec4 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007f9c:	20c8      	movs	r0, #200	; 0xc8
 8007f9e:	f004 ffd3 	bl	800cf48 <osDelay>
				if(rejected_FLAG == true)
 8007fa2:	783b      	ldrb	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0df      	beq.n	8007f68 <SendMessageFromPort.part.0+0x284>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007fa8:	2332      	movs	r3, #50	; 0x32
 8007faa:	4642      	mov	r2, r8
 8007fac:	0021      	movs	r1, r4
 8007fae:	9803      	ldr	r0, [sp, #12]
 8007fb0:	f7fa feb8 	bl	8002d24 <Send_BOS_Message>
 8007fb4:	e7d8      	b.n	8007f68 <SendMessageFromPort.part.0+0x284>
		if(src == 0)
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d000      	beq.n	8007fbc <SendMessageFromPort.part.0+0x2d8>
 8007fba:	e6c0      	b.n	8007d3e <SendMessageFromPort.part.0+0x5a>
 8007fbc:	e6bc      	b.n	8007d38 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1bd      	bne.n	8007f40 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8007fc4:	7923      	ldrb	r3, [r4, #4]
 8007fc6:	4699      	mov	r9, r3
 8007fc8:	e7ba      	b.n	8007f40 <SendMessageFromPort.part.0+0x25c>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007fca:	9a05      	ldr	r2, [sp, #20]
 8007fcc:	2332      	movs	r3, #50	; 0x32
 8007fce:	3204      	adds	r2, #4
 8007fd0:	b292      	uxth	r2, r2
 8007fd2:	0021      	movs	r1, r4
 8007fd4:	9803      	ldr	r0, [sp, #12]
 8007fd6:	f7fa fea5 	bl	8002d24 <Send_BOS_Message>
 8007fda:	4b2f      	ldr	r3, [pc, #188]	; (8008098 <SendMessageFromPort.part.0+0x3b4>)
 8007fdc:	4f2d      	ldr	r7, [pc, #180]	; (8008094 <SendMessageFromPort.part.0+0x3b0>)
 8007fde:	4699      	mov	r9, r3
 8007fe0:	e799      	b.n	8007f16 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007fe2:	2e2c      	cmp	r6, #44	; 0x2c
 8007fe4:	d80e      	bhi.n	8008004 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8007fe6:	4a26      	ldr	r2, [pc, #152]	; (8008080 <SendMessageFromPort.part.0+0x39c>)
 8007fe8:	4647      	mov	r7, r8
 8007fea:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8007fec:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	7013      	strb	r3, [r2, #0]
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	18a2      	adds	r2, r4, r2
 8007ff8:	1996      	adds	r6, r2, r6
 8007ffa:	3702      	adds	r7, #2
 8007ffc:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 8007ffe:	b2ed      	uxtb	r5, r5
 8008000:	b2ff      	uxtb	r7, r7
 8008002:	e737      	b.n	8007e74 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008004:	2069      	movs	r0, #105	; 0x69
 8008006:	e792      	b.n	8007f2e <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8008008:	465b      	mov	r3, fp
 800800a:	4642      	mov	r2, r8
 800800c:	4649      	mov	r1, r9
 800800e:	9700      	str	r7, [sp, #0]
 8008010:	9803      	ldr	r0, [sp, #12]
 8008012:	f7ff fe4b 	bl	8007cac <SendMessageFromPort>
					osDelay(10);
 8008016:	200a      	movs	r0, #10
 8008018:	f004 ff96 	bl	800cf48 <osDelay>
					totalNumberOfParams -=numberOfParams;
 800801c:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 800801e:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8008020:	3e2e      	subs	r6, #46	; 0x2e
 8008022:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8008024:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8008026:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8008028:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 800802a:	2e00      	cmp	r6, #0
 800802c:	d000      	beq.n	8008030 <SendMessageFromPort.part.0+0x34c>
 800802e:	e6b1      	b.n	8007d94 <SendMessageFromPort.part.0+0xb0>
 8008030:	2500      	movs	r5, #0
 8008032:	362e      	adds	r6, #46	; 0x2e
 8008034:	e6c5      	b.n	8007dc2 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008036:	4653      	mov	r3, sl
 8008038:	1dd8      	adds	r0, r3, #7
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 800803c:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800803e:	8819      	ldrh	r1, [r3, #0]
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <SendMessageFromPort.part.0+0x388>)
 8008042:	1820      	adds	r0, r4, r0
 8008044:	18c9      	adds	r1, r1, r3
 8008046:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8008048:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800804a:	f00a f95c 	bl	8012306 <memcpy>
			length =numberOfParams + shift + 4;
 800804e:	b2ed      	uxtb	r5, r5
 8008050:	e6b7      	b.n	8007dc2 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008052:	0031      	movs	r1, r6
 8008054:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8008056:	2200      	movs	r2, #0
 8008058:	e6e3      	b.n	8007e22 <SendMessageFromPort.part.0+0x13e>
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	20000c58 	.word	0x20000c58
 8008060:	20000a98 	.word	0x20000a98
 8008064:	20006a00 	.word	0x20006a00
 8008068:	20001fcc 	.word	0x20001fcc
 800806c:	20000b3c 	.word	0x20000b3c
 8008070:	20001148 	.word	0x20001148
 8008074:	20000050 	.word	0x20000050
 8008078:	20000008 	.word	0x20000008
 800807c:	20000a9c 	.word	0x20000a9c
 8008080:	20000c48 	.word	0x20000c48
 8008084:	20000c50 	.word	0x20000c50
 8008088:	20000c90 	.word	0x20000c90
 800808c:	20000c5b 	.word	0x20000c5b
 8008090:	20001a00 	.word	0x20001a00
 8008094:	2000117c 	.word	0x2000117c
 8008098:	2000117d 	.word	0x2000117d
 800809c:	20000c3c 	.word	0x20000c3c
 80080a0:	20000b6c 	.word	0x20000b6c

080080a4 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 80080a4:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80080a6:	b500      	push	{lr}
	AddBcastPayload = false;
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80080aa:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080ac:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80080ae:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <BroadcastReceivedMessage+0x38>)
 80080b0:	b289      	uxth	r1, r1
 80080b2:	7018      	strb	r0, [r3, #0]
 80080b4:	9100      	str	r1, [sp, #0]
 80080b6:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 80080b8:	28ff      	cmp	r0, #255	; 0xff
 80080ba:	d007      	beq.n	80080cc <BroadcastReceivedMessage+0x28>
 80080bc:	22fe      	movs	r2, #254	; 0xfe
 80080be:	2100      	movs	r1, #0
 80080c0:	2000      	movs	r0, #0
 80080c2:	f7ff fe0f 	bl	8007ce4 <SendMessageFromPort.part.0>
}
 80080c6:	2000      	movs	r0, #0
 80080c8:	b003      	add	sp, #12
 80080ca:	bd00      	pop	{pc}
 80080cc:	32ff      	adds	r2, #255	; 0xff
 80080ce:	2100      	movs	r1, #0
 80080d0:	2000      	movs	r0, #0
 80080d2:	f7ff fe07 	bl	8007ce4 <SendMessageFromPort.part.0>
 80080d6:	e7f6      	b.n	80080c6 <BroadcastReceivedMessage+0x22>
 80080d8:	20001148 	.word	0x20001148
 80080dc:	20000050 	.word	0x20000050

080080e0 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080e0:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80080e2:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080e4:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80080e6:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80080e8:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80080ea:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <BroadcastMessage+0x44>)
 80080ee:	7019      	strb	r1, [r3, #0]
 80080f0:	9400      	str	r4, [sp, #0]
 80080f2:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80080f4:	29ff      	cmp	r1, #255	; 0xff
 80080f6:	d00c      	beq.n	8008112 <BroadcastMessage+0x32>
 80080f8:	0001      	movs	r1, r0
 80080fa:	22fe      	movs	r2, #254	; 0xfe
 80080fc:	2000      	movs	r0, #0
 80080fe:	f7ff fdf1 	bl	8007ce4 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 8008102:	0022      	movs	r2, r4
 8008104:	2100      	movs	r1, #0
 8008106:	4808      	ldr	r0, [pc, #32]	; (8008128 <BroadcastMessage+0x48>)
 8008108:	f00a f906 	bl	8012318 <memset>
}
 800810c:	2000      	movs	r0, #0
 800810e:	b003      	add	sp, #12
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	0001      	movs	r1, r0
 8008114:	22ff      	movs	r2, #255	; 0xff
 8008116:	2000      	movs	r0, #0
 8008118:	f7ff fde4 	bl	8007ce4 <SendMessageFromPort.part.0>
 800811c:	e7f1      	b.n	8008102 <BroadcastMessage+0x22>
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	20001148 	.word	0x20001148
 8008124:	20000050 	.word	0x20000050
 8008128:	20000b3c 	.word	0x20000b3c

0800812c <ForwardReceivedMessage>:
	AddBcastPayload = false;
 800812c:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 800812e:	b530      	push	{r4, r5, lr}
 8008130:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008134:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008136:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8008138:	1e42      	subs	r2, r0, #1
 800813a:	00d3      	lsls	r3, r2, #3
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	4a09      	ldr	r2, [pc, #36]	; (8008164 <ForwardReceivedMessage+0x38>)
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 8008144:	4b08      	ldr	r3, [pc, #32]	; (8008168 <ForwardReceivedMessage+0x3c>)
 8008146:	0021      	movs	r1, r4
 8008148:	7818      	ldrb	r0, [r3, #0]
 800814a:	f7fb fcdb 	bl	8003b04 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800814e:	9500      	str	r5, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	0022      	movs	r2, r4
 8008154:	2100      	movs	r1, #0
 8008156:	f7ff fda9 	bl	8007cac <SendMessageFromPort>
}
 800815a:	2000      	movs	r0, #0
 800815c:	b003      	add	sp, #12
 800815e:	bd30      	pop	{r4, r5, pc}
 8008160:	20001148 	.word	0x20001148
 8008164:	20000c90 	.word	0x20000c90
 8008168:	20000a98 	.word	0x20000a98

0800816c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816e:	4d0f      	ldr	r5, [pc, #60]	; (80081ac <SendMessageToModule+0x40>)
 8008170:	0004      	movs	r4, r0
 8008172:	b083      	sub	sp, #12
 8008174:	000f      	movs	r7, r1
 8008176:	0016      	movs	r6, r2
 8008178:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 800817a:	2cff      	cmp	r4, #255	; 0xff
 800817c:	d010      	beq.n	80081a0 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 800817e:	0021      	movs	r1, r4
 8008180:	f7fb fcc0 	bl	8003b04 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008184:	7829      	ldrb	r1, [r5, #0]
 8008186:	0022      	movs	r2, r4
 8008188:	9600      	str	r6, [sp, #0]
 800818a:	003b      	movs	r3, r7
 800818c:	f7ff fd8e 	bl	8007cac <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008190:	0032      	movs	r2, r6
 8008192:	2100      	movs	r1, #0
 8008194:	4806      	ldr	r0, [pc, #24]	; (80081b0 <SendMessageToModule+0x44>)
 8008196:	f00a f8bf 	bl	8012318 <memset>
}
 800819a:	2000      	movs	r0, #0
 800819c:	b003      	add	sp, #12
 800819e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80081a0:	0013      	movs	r3, r2
 80081a2:	000a      	movs	r2, r1
 80081a4:	21ff      	movs	r1, #255	; 0xff
 80081a6:	f7ff ff9b 	bl	80080e0 <BroadcastMessage>
 80081aa:	e7f6      	b.n	800819a <SendMessageToModule+0x2e>
 80081ac:	20000a98 	.word	0x20000a98
 80081b0:	20000b3c 	.word	0x20000b3c

080081b4 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	4657      	mov	r7, sl
 80081b8:	46de      	mov	lr, fp
 80081ba:	464e      	mov	r6, r9
 80081bc:	4645      	mov	r5, r8
 80081be:	b5e0      	push	{r5, r6, r7, lr}
 80081c0:	b08f      	sub	sp, #60	; 0x3c
 80081c2:	001e      	movs	r6, r3
 80081c4:	ab18      	add	r3, sp, #96	; 0x60
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	4693      	mov	fp, r2
 80081ca:	469a      	mov	sl, r3
 80081cc:	ab1b      	add	r3, sp, #108	; 0x6c
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081d2:	000f      	movs	r7, r1
 80081d4:	0e19      	lsrs	r1, r3, #24
 80081d6:	0c1b      	lsrs	r3, r3, #16
 80081d8:	b2dc      	uxtb	r4, r3
 80081da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081dc:	4684      	mov	ip, r0
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	b2dd      	uxtb	r5, r3
 80081e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081e4:	900d      	str	r0, [sp, #52]	; 0x34
 80081e6:	0e1b      	lsrs	r3, r3, #24
 80081e8:	0018      	movs	r0, r3
 80081ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081ee:	9206      	str	r2, [sp, #24]
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	9307      	str	r3, [sp, #28]
 80081f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081f8:	9109      	str	r1, [sp, #36]	; 0x24
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8008200:	4b47      	ldr	r3, [pc, #284]	; (8008320 <StartScastDMAStream+0x16c>)
 8008202:	940a      	str	r4, [sp, #40]	; 0x28
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	950c      	str	r5, [sp, #48]	; 0x30
 8008208:	42bb      	cmp	r3, r7
 800820a:	d16d      	bne.n	80082e8 <StartScastDMAStream+0x134>
 800820c:	231a      	movs	r3, #26
 800820e:	4698      	mov	r8, r3
 8008210:	4d44      	ldr	r5, [pc, #272]	; (8008324 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008212:	4c45      	ldr	r4, [pc, #276]	; (8008328 <StartScastDMAStream+0x174>)
 8008214:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 8008216:	0031      	movs	r1, r6
 8008218:	0038      	movs	r0, r7
 800821a:	f7fb fc73 	bl	8003b04 <FindRoute>
		if(route[i]){
 800821e:	7868      	ldrb	r0, [r5, #1]
 8008220:	2800      	cmp	r0, #0
 8008222:	d035      	beq.n	8008290 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8008224:	78a9      	ldrb	r1, [r5, #2]
 8008226:	2900      	cmp	r1, #0
 8008228:	d100      	bne.n	800822c <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 800822a:	0039      	movs	r1, r7
 800822c:	f7fb fc6a 	bl	8003b04 <FindRoute>
			FindRoute(srcM,dstM);
 8008230:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8008232:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8008234:	0038      	movs	r0, r7
 8008236:	f7fb fc65 	bl	8003b04 <FindRoute>
			if(route[i] == dstM){
 800823a:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 800823c:	465b      	mov	r3, fp
			if(route[i] == dstM){
 800823e:	42b0      	cmp	r0, r6
 8008240:	d003      	beq.n	800824a <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8008242:	7829      	ldrb	r1, [r5, #0]
 8008244:	f7fb fc5e 	bl	8003b04 <FindRoute>
 8008248:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800824a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 800824c:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800824e:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8008252:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008254:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8008258:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 800825a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 800825c:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 800825e:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8008260:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8008264:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008266:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008268:	9a07      	ldr	r2, [sp, #28]
 800826a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 800826c:	9a08      	ldr	r2, [sp, #32]
 800826e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8008270:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008272:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008274:	4652      	mov	r2, sl
 8008276:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008278:	464a      	mov	r2, r9
 800827a:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 800827c:	f7fb fc42 	bl	8003b04 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008280:	7868      	ldrb	r0, [r5, #1]
 8008282:	220c      	movs	r2, #12
 8008284:	211b      	movs	r1, #27
 8008286:	f7ff ff71 	bl	800816c <SendMessageToModule>
			osDelay(10);
 800828a:	200a      	movs	r0, #10
 800828c:	f004 fe5c 	bl	800cf48 <osDelay>
 8008290:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8008292:	4545      	cmp	r5, r8
 8008294:	d1bf      	bne.n	8008216 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8008296:	42b7      	cmp	r7, r6
 8008298:	d112      	bne.n	80082c0 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800829a:	465b      	mov	r3, fp
 800829c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80082a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082a4:	4650      	mov	r0, sl
 80082a6:	f7ff fc0d 	bl	8007ac4 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10d      	bne.n	80082cc <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80082b0:	2000      	movs	r0, #0
 80082b2:	b00f      	add	sp, #60	; 0x3c
 80082b4:	bc3c      	pop	{r2, r3, r4, r5}
 80082b6:	4690      	mov	r8, r2
 80082b8:	4699      	mov	r9, r3
 80082ba:	46a2      	mov	sl, r4
 80082bc:	46ab      	mov	fp, r5
 80082be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 80082c0:	0031      	movs	r1, r6
 80082c2:	0038      	movs	r0, r7
 80082c4:	f7fb fc1e 	bl	8003b04 <FindRoute>
 80082c8:	4683      	mov	fp, r0
 80082ca:	e7e6      	b.n	800829a <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 80082cc:	2300      	movs	r3, #0
 80082ce:	9304      	str	r3, [sp, #16]
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	9302      	str	r3, [sp, #8]
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	465b      	mov	r3, fp
 80082d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80082de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7fb f92f 	bl	8003544 <SaveEEstreams>
 80082e6:	e7e3      	b.n	80082b0 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082e8:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <StartScastDMAStream+0x174>)
 80082ea:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082ec:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 80082ee:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082f0:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082f2:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80082f4:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082f6:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80082f8:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082fa:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80082fc:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80082fe:	4651      	mov	r1, sl
 8008300:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8008302:	4661      	mov	r1, ip
 8008304:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 8008306:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 8008308:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 800830a:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 800830c:	220d      	movs	r2, #13
 800830e:	211c      	movs	r1, #28
 8008310:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 8008312:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8008314:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 8008316:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008318:	f7ff ff28 	bl	800816c <SendMessageToModule>
		return result;
 800831c:	e7c8      	b.n	80082b0 <StartScastDMAStream+0xfc>
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	20000a98 	.word	0x20000a98
 8008324:	20006b47 	.word	0x20006b47
 8008328:	20000b3c 	.word	0x20000b3c

0800832c <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 800832c:	4b4e      	ldr	r3, [pc, #312]	; (8008468 <BackEndTask+0x13c>)
 800832e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008330:	4657      	mov	r7, sl
 8008332:	46de      	mov	lr, fp
 8008334:	464e      	mov	r6, r9
 8008336:	4645      	mov	r5, r8
 8008338:	4699      	mov	r9, r3
 800833a:	4b4c      	ldr	r3, [pc, #304]	; (800846c <BackEndTask+0x140>)
 800833c:	b5e0      	push	{r5, r6, r7, lr}
 800833e:	469b      	mov	fp, r3
 8008340:	4b4b      	ldr	r3, [pc, #300]	; (8008470 <BackEndTask+0x144>)
 8008342:	4f4c      	ldr	r7, [pc, #304]	; (8008474 <BackEndTask+0x148>)
 8008344:	4698      	mov	r8, r3
 8008346:	4b4c      	ldr	r3, [pc, #304]	; (8008478 <BackEndTask+0x14c>)
 8008348:	b083      	sub	sp, #12
 800834a:	469a      	mov	sl, r3


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800834c:	464b      	mov	r3, r9
 800834e:	4a4b      	ldr	r2, [pc, #300]	; (800847c <BackEndTask+0x150>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	7812      	ldrb	r2, [r2, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d054      	beq.n	8008402 <BackEndTask+0xd6>
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008358:	4a49      	ldr	r2, [pc, #292]	; (8008480 <BackEndTask+0x154>)
			port_index = port_number - 1;
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 800835a:	2048      	movs	r0, #72	; 0x48
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800835c:	5cd3      	ldrb	r3, [r2, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800835e:	255a      	movs	r5, #90	; 0x5a
			port_index = port_number - 1;
 8008360:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008362:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008364:	465b      	mov	r3, fp
			port_index = port_number - 1;
 8008366:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008368:	5d19      	ldrb	r1, [r3, r4]
 800836a:	00a6      	lsls	r6, r4, #2
 800836c:	00cb      	lsls	r3, r1, #3
 800836e:	1a59      	subs	r1, r3, r1
 8008370:	1933      	adds	r3, r6, r4
 8008372:	00da      	lsls	r2, r3, #3
 8008374:	1ad2      	subs	r2, r2, r3
 8008376:	00c9      	lsls	r1, r1, #3
 8008378:	00d2      	lsls	r2, r2, #3
 800837a:	188b      	adds	r3, r1, r2
 800837c:	54f8      	strb	r0, [r7, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800837e:	18f8      	adds	r0, r7, r3
 8008380:	7045      	strb	r5, [r0, #1]

			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008382:	7885      	ldrb	r5, [r0, #2]

			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008384:	4640      	mov	r0, r8
 8008386:	5cfb      	ldrb	r3, [r7, r3]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008388:	7085      	strb	r5, [r0, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800838a:	7003      	strb	r3, [r0, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 800838c:	235a      	movs	r3, #90	; 0x5a
 800838e:	7043      	strb	r3, [r0, #1]
			for(int i=0;i<length;i++)
 8008390:	2d00      	cmp	r5, #0
 8008392:	d00b      	beq.n	80083ac <BackEndTask+0x80>
 8008394:	1cd3      	adds	r3, r2, #3
 8008396:	4642      	mov	r2, r8
 8008398:	185b      	adds	r3, r3, r1
 800839a:	3203      	adds	r2, #3
 800839c:	18fb      	adds	r3, r7, r3
 800839e:	1950      	adds	r0, r2, r5
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 80083a0:	7819      	ldrb	r1, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	7011      	strb	r1, [r2, #0]
 80083a6:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 80083a8:	4282      	cmp	r2, r0
 80083aa:	d1f9      	bne.n	80083a0 <BackEndTask+0x74>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 80083ac:	1ce9      	adds	r1, r5, #3
 80083ae:	4640      	mov	r0, r8
 80083b0:	f002 fa62 	bl	800a878 <CalculateCRC8>
				length + 3);


			Message_counter++;
 80083b4:	4653      	mov	r3, sl
 80083b6:	4652      	mov	r2, sl
 80083b8:	881b      	ldrh	r3, [r3, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 80083ba:	1936      	adds	r6, r6, r4
			Message_counter++;
 80083bc:	3301      	adds	r3, #1
 80083be:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 80083c0:	465b      	mov	r3, fp
 80083c2:	5d1b      	ldrb	r3, [r3, r4]
 80083c4:	00f2      	lsls	r2, r6, #3
 80083c6:	00d9      	lsls	r1, r3, #3
 80083c8:	1b92      	subs	r2, r2, r6
 80083ca:	1ac9      	subs	r1, r1, r3
 80083cc:	00c9      	lsls	r1, r1, #3
 80083ce:	00d2      	lsls	r2, r2, #3
 80083d0:	188e      	adds	r6, r1, r2
 80083d2:	19be      	adds	r6, r7, r6
 80083d4:	1976      	adds	r6, r6, r5
 80083d6:	78f6      	ldrb	r6, [r6, #3]
 80083d8:	4286      	cmp	r6, r0
 80083da:	d01d      	beq.n	8008418 <BackEndTask+0xec>


			}
			else
			{
				Rejected_Messages++;
 80083dc:	4652      	mov	r2, sl
 80083de:	4651      	mov	r1, sl
 80083e0:	8892      	ldrh	r2, [r2, #4]
 80083e2:	3201      	adds	r2, #1
 80083e4:	808a      	strh	r2, [r1, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 80083e6:	3301      	adds	r3, #1
 80083e8:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d010      	beq.n	8008410 <BackEndTask+0xe4>
			MSG_Buffer_Index_Start[port_index]++;
 80083ee:	465a      	mov	r2, fp
 80083f0:	5513      	strb	r3, [r2, r4]

			Process_Message_Buffer_Index_Start++;
 80083f2:	464b      	mov	r3, r9
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	d004      	beq.n	8008408 <BackEndTask+0xdc>
			Process_Message_Buffer_Index_Start++;
 80083fe:	464a      	mov	r2, r9
 8008400:	7013      	strb	r3, [r2, #0]
		}

		taskYIELD();
 8008402:	f006 faf1 	bl	800e9e8 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008406:	e7a1      	b.n	800834c <BackEndTask+0x20>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008408:	464b      	mov	r3, r9
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	e7f8      	b.n	8008402 <BackEndTask+0xd6>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008410:	465b      	mov	r3, fp
 8008412:	2200      	movs	r2, #0
 8008414:	551a      	strb	r2, [r3, r4]
 8008416:	e7ec      	b.n	80083f2 <BackEndTask+0xc6>
				Accepted_Messages++;
 8008418:	4653      	mov	r3, sl
 800841a:	4650      	mov	r0, sl
 800841c:	885b      	ldrh	r3, [r3, #2]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 800841e:	00e6      	lsls	r6, r4, #3
				Accepted_Messages++;
 8008420:	3301      	adds	r3, #1
 8008422:	8043      	strh	r3, [r0, #2]
				messageLength[port_index] =length;
 8008424:	4b17      	ldr	r3, [pc, #92]	; (8008484 <BackEndTask+0x158>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008426:	3203      	adds	r2, #3
				messageLength[port_index] =length;
 8008428:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 800842a:	1b36      	subs	r6, r6, r4
 800842c:	4b16      	ldr	r3, [pc, #88]	; (8008488 <BackEndTask+0x15c>)
 800842e:	00f6      	lsls	r6, r6, #3
 8008430:	1851      	adds	r1, r2, r1
 8008432:	1998      	adds	r0, r3, r6
 8008434:	002a      	movs	r2, r5
 8008436:	1879      	adds	r1, r7, r1
 8008438:	f009 ff65 	bl	8012306 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 800843c:	4b12      	ldr	r3, [pc, #72]	; (8008488 <BackEndTask+0x15c>)
 800843e:	4a13      	ldr	r2, [pc, #76]	; (800848c <BackEndTask+0x160>)
 8008440:	5d9b      	ldrb	r3, [r3, r6]
 8008442:	7812      	ldrb	r2, [r2, #0]
					NotifyMessagingTask(port_number);
 8008444:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008446:	429a      	cmp	r2, r3
 8008448:	d008      	beq.n	800845c <BackEndTask+0x130>
 800844a:	3302      	adds	r3, #2
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b01      	cmp	r3, #1
 8008450:	d904      	bls.n	800845c <BackEndTask+0x130>
					ForwardReceivedMessage(port_number);
 8008452:	f7ff fe6b 	bl	800812c <ForwardReceivedMessage>
 8008456:	465b      	mov	r3, fp
 8008458:	5d1b      	ldrb	r3, [r3, r4]
 800845a:	e7c4      	b.n	80083e6 <BackEndTask+0xba>
					NotifyMessagingTask(port_number);
 800845c:	f7ff fbfe 	bl	8007c5c <NotifyMessagingTask>
 8008460:	465b      	mov	r3, fp
 8008462:	5d1b      	ldrb	r3, [r3, r4]
 8008464:	e7bf      	b.n	80083e6 <BackEndTask+0xba>
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	20001180 	.word	0x20001180
 800846c:	20001824 	.word	0x20001824
 8008470:	20006b68 	.word	0x20006b68
 8008474:	2000118c 	.word	0x2000118c
 8008478:	20001fd4 	.word	0x20001fd4
 800847c:	2000117f 	.word	0x2000117f
 8008480:	20001184 	.word	0x20001184
 8008484:	20000c50 	.word	0x20000c50
 8008488:	20000c90 	.word	0x20000c90
 800848c:	20000a98 	.word	0x20000a98

08008490 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008490:	2001      	movs	r0, #1
 8008492:	4770      	bx	lr

08008494 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008496:	464e      	mov	r6, r9
 8008498:	46de      	mov	lr, fp
 800849a:	4645      	mov	r5, r8
 800849c:	4657      	mov	r7, sl
 800849e:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 80084a0:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 80084a2:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 80084a4:	930d      	str	r3, [sp, #52]	; 0x34
 80084a6:	23ff      	movs	r3, #255	; 0xff
 80084a8:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 80084aa:	1e5c      	subs	r4, r3, #1
 80084ac:	930a      	str	r3, [sp, #40]	; 0x28
 80084ae:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80084b0:	4ae3      	ldr	r2, [pc, #908]	; (8008840 <PxMessagingTask+0x3ac>)
 80084b2:	9306      	str	r3, [sp, #24]
 80084b4:	1b1b      	subs	r3, r3, r4
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	4693      	mov	fp, r2
 80084ba:	001a      	movs	r2, r3
 80084bc:	445a      	add	r2, fp
 80084be:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 80084c0:	2200      	movs	r2, #0
 80084c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80084c4:	4adf      	ldr	r2, [pc, #892]	; (8008844 <PxMessagingTask+0x3b0>)
 80084c6:	930e      	str	r3, [sp, #56]	; 0x38
 80084c8:	4691      	mov	r9, r2
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	3305      	adds	r3, #5
 80084ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80084d0:	4bdd      	ldr	r3, [pc, #884]	; (8008848 <PxMessagingTask+0x3b4>)
	BOS_Status result =BOS_OK;
 80084d2:	2600      	movs	r6, #0
 80084d4:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80084d6:	2338      	movs	r3, #56	; 0x38
 80084d8:	4363      	muls	r3, r4
 80084da:	9216      	str	r2, [sp, #88]	; 0x58
 80084dc:	445b      	add	r3, fp
 80084de:	00a2      	lsls	r2, r4, #2
 80084e0:	9210      	str	r2, [sp, #64]	; 0x40
 80084e2:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80084e4:	2101      	movs	r1, #1
 80084e6:	2001      	movs	r0, #1
 80084e8:	4249      	negs	r1, r1
 80084ea:	f005 ffe5 	bl	800e4b8 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 80084ee:	464b      	mov	r3, r9
 80084f0:	5d1f      	ldrb	r7, [r3, r4]
 80084f2:	2f00      	cmp	r7, #0
 80084f4:	d100      	bne.n	80084f8 <PxMessagingTask+0x64>
 80084f6:	e085      	b.n	8008604 <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 80084f8:	9b06      	ldr	r3, [sp, #24]
 80084fa:	1b1b      	subs	r3, r3, r4
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	445b      	add	r3, fp
 8008500:	7899      	ldrb	r1, [r3, #2]
 8008502:	b24b      	sxtb	r3, r1
 8008504:	2b00      	cmp	r3, #0
 8008506:	da01      	bge.n	800850c <PxMessagingTask+0x78>
 8008508:	f000 fcc7 	bl	8008e9a <PxMessagingTask+0xa06>
				longMessage =0;
 800850c:	2300      	movs	r3, #0
 800850e:	4acf      	ldr	r2, [pc, #828]	; (800884c <PxMessagingTask+0x3b8>)
 8008510:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 8008512:	465a      	mov	r2, fp
 8008514:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008516:	4fce      	ldr	r7, [pc, #824]	; (8008850 <PxMessagingTask+0x3bc>)
			dst =cMessage[port - 1][0];
 8008518:	1b1b      	subs	r3, r3, r4
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 800851e:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 8008520:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 8008522:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008524:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 8008526:	4692      	mov	sl, r2
 8008528:	2201      	movs	r2, #1
 800852a:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800852c:	0f80      	lsrs	r0, r0, #30
 800852e:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008530:	0908      	lsrs	r0, r1, #4
 8008532:	400d      	ands	r5, r1
 8008534:	4002      	ands	r2, r0
 8008536:	46ac      	mov	ip, r5
 8008538:	b2d0      	uxtb	r0, r2
 800853a:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800853c:	2260      	movs	r2, #96	; 0x60
 800853e:	4463      	add	r3, ip
 8008540:	400a      	ands	r2, r1
 8008542:	950c      	str	r5, [sp, #48]	; 0x30
 8008544:	703a      	strb	r2, [r7, #0]
 8008546:	002a      	movs	r2, r5
 8008548:	78dd      	ldrb	r5, [r3, #3]
 800854a:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 800854c:	0789      	lsls	r1, r1, #30
 800854e:	d507      	bpl.n	8008560 <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008550:	46ac      	mov	ip, r5
 8008552:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8008554:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	4463      	add	r3, ip
 800855a:	b29b      	uxth	r3, r3
 800855c:	9308      	str	r3, [sp, #32]
				++shift;
 800855e:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 8008560:	2800      	cmp	r0, #0
 8008562:	d007      	beq.n	8008574 <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 8008564:	2300      	movs	r3, #0
 8008566:	4aba      	ldr	r2, [pc, #744]	; (8008850 <PxMessagingTask+0x3bc>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008568:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800856a:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800856c:	4650      	mov	r0, sl
 800856e:	2200      	movs	r2, #0
 8008570:	f7ff fdfc 	bl	800816c <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008574:	9a07      	ldr	r2, [sp, #28]
 8008576:	1e53      	subs	r3, r2, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2bfc      	cmp	r3, #252	; 0xfc
 800857c:	d801      	bhi.n	8008582 <PxMessagingTask+0xee>
 800857e:	f000 fc71 	bl	8008e64 <PxMessagingTask+0x9d0>
 8008582:	464b      	mov	r3, r9
 8008584:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008586:	9b07      	ldr	r3, [sp, #28]
 8008588:	2bff      	cmp	r3, #255	; 0xff
 800858a:	d001      	beq.n	8008590 <PxMessagingTask+0xfc>
 800858c:	f000 fcb5 	bl	8008efa <PxMessagingTask+0xa66>
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	4ab0      	ldr	r2, [pc, #704]	; (8008854 <PxMessagingTask+0x3c0>)
 8008594:	1b1d      	subs	r5, r3, r4
 8008596:	00ed      	lsls	r5, r5, #3
 8008598:	445d      	add	r5, fp
 800859a:	19eb      	adds	r3, r5, r7
 800859c:	3b01      	subs	r3, #1
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 80085a2:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d02d      	beq.n	8008604 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80085a8:	4aaa      	ldr	r2, [pc, #680]	; (8008854 <PxMessagingTask+0x3c0>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80085aa:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80085ac:	7193      	strb	r3, [r2, #6]
 80085ae:	4aaa      	ldr	r2, [pc, #680]	; (8008858 <PxMessagingTask+0x3c4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80085b0:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80085b2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80085b4:	f7ff fd76 	bl	80080a4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80085b8:	464b      	mov	r3, r9
 80085ba:	5d1f      	ldrb	r7, [r3, r4]
 80085bc:	2300      	movs	r3, #0
 80085be:	19ed      	adds	r5, r5, r7
 80085c0:	3d01      	subs	r5, #1
 80085c2:	702b      	strb	r3, [r5, #0]
				shift +=4;
 80085c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085c6:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 80085c8:	1b7a      	subs	r2, r7, r5
 80085ca:	b2d3      	uxtb	r3, r2
 80085cc:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 80085ce:	9b08      	ldr	r3, [sp, #32]
 80085d0:	2b2d      	cmp	r3, #45	; 0x2d
 80085d2:	d901      	bls.n	80085d8 <PxMessagingTask+0x144>
 80085d4:	f000 fc79 	bl	8008eca <PxMessagingTask+0xa36>
 80085d8:	4aa0      	ldr	r2, [pc, #640]	; (800885c <PxMessagingTask+0x3c8>)
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	58d3      	ldr	r3, [r2, r3]
 80085de:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80085e0:	9b06      	ldr	r3, [sp, #24]
 80085e2:	1b1b      	subs	r3, r3, r4
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	445b      	add	r3, fp
 80085e8:	5d5b      	ldrb	r3, [r3, r5]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <PxMessagingTask+0x15e>
 80085ee:	f000 fd6d 	bl	80090cc <PxMessagingTask+0xc38>
								myID =cMessage[port - 1][1 + shift];
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	4a9a      	ldr	r2, [pc, #616]	; (8008860 <PxMessagingTask+0x3cc>)
 80085f6:	469c      	mov	ip, r3
 80085f8:	4465      	add	r5, ip
 80085fa:	786b      	ldrb	r3, [r5, #1]
 80085fc:	7013      	strb	r3, [r2, #0]
 80085fe:	464b      	mov	r3, r9
 8008600:	2600      	movs	r6, #0
 8008602:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008604:	003a      	movs	r2, r7
 8008606:	2100      	movs	r1, #0
 8008608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800860a:	f009 fe85 	bl	8012318 <memset>
		messageLength[port - 1] =0;
 800860e:	464b      	mov	r3, r9
 8008610:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008612:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 8008614:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008616:	4b93      	ldr	r3, [pc, #588]	; (8008864 <PxMessagingTask+0x3d0>)
 8008618:	5c5b      	ldrb	r3, [r3, r1]
 800861a:	3b02      	subs	r3, #2
 800861c:	2b02      	cmp	r3, #2
 800861e:	d901      	bls.n	8008624 <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 8008620:	4b90      	ldr	r3, [pc, #576]	; (8008864 <PxMessagingTask+0x3d0>)
 8008622:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008624:	f006 f9e0 	bl	800e9e8 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008628:	e75c      	b.n	80084e4 <PxMessagingTask+0x50>
 800862a:	2308      	movs	r3, #8
 800862c:	469a      	mov	sl, r3
 800862e:	3301      	adds	r3, #1
 8008630:	469c      	mov	ip, r3
 8008632:	44ac      	add	ip, r5
 8008634:	4663      	mov	r3, ip
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	230a      	movs	r3, #10
 800863a:	469c      	mov	ip, r3
 800863c:	44ac      	add	ip, r5
 800863e:	4663      	mov	r3, ip
 8008640:	930c      	str	r3, [sp, #48]	; 0x30
 8008642:	230b      	movs	r3, #11
 8008644:	469c      	mov	ip, r3
 8008646:	44ac      	add	ip, r5
 8008648:	4663      	mov	r3, ip
 800864a:	9307      	str	r3, [sp, #28]
 800864c:	230c      	movs	r3, #12
 800864e:	469c      	mov	ip, r3
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	1da8      	adds	r0, r5, #6
 8008654:	1b1b      	subs	r3, r3, r4
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	445b      	add	r3, fp
 800865a:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 800865c:	5d5b      	ldrb	r3, [r3, r5]
 800865e:	1def      	adds	r7, r5, #7
 8008660:	44aa      	add	sl, r5
 8008662:	44ac      	add	ip, r5
 8008664:	7852      	ldrb	r2, [r2, #1]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <PxMessagingTask+0x1da>
 800866a:	f000 fd01 	bl	8009070 <PxMessagingTask+0xbdc>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <PxMessagingTask+0x1e2>
 8008672:	f000 fccf 	bl	8009014 <PxMessagingTask+0xb80>
 8008676:	2b02      	cmp	r3, #2
 8008678:	d10c      	bne.n	8008694 <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800867a:	9b05      	ldr	r3, [sp, #20]
 800867c:	1959      	adds	r1, r3, r5
 800867e:	788b      	ldrb	r3, [r1, #2]
 8008680:	78c8      	ldrb	r0, [r1, #3]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	0400      	lsls	r0, r0, #16
 8008686:	181b      	adds	r3, r3, r0
 8008688:	189a      	adds	r2, r3, r2
 800868a:	790b      	ldrb	r3, [r1, #4]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	18d2      	adds	r2, r2, r3
 8008690:	4b75      	ldr	r3, [pc, #468]	; (8008868 <PxMessagingTask+0x3d4>)
 8008692:	625a      	str	r2, [r3, #36]	; 0x24
							ADCPort =cMessage[port - 1][shift];
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	4a74      	ldr	r2, [pc, #464]	; (8008868 <PxMessagingTask+0x3d4>)
 8008698:	1b1b      	subs	r3, r3, r4
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	445b      	add	r3, fp
 800869e:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 80086a0:	195b      	adds	r3, r3, r5
 80086a2:	785b      	ldrb	r3, [r3, #1]
							ADCPort =cMessage[port - 1][shift];
 80086a4:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 80086a6:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <PxMessagingTask+0x21c>
 80086ac:	f000 fc7e 	bl	8008fac <PxMessagingTask+0xb18>
							else if(1 == ADCSide){
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d10a      	bne.n	80086ca <PxMessagingTask+0x236>
								ADCSelectChannel(ADCPort,"bottom");
 80086b4:	496d      	ldr	r1, [pc, #436]	; (800886c <PxMessagingTask+0x3d8>)
 80086b6:	f003 f989 	bl	800b9cc <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 80086ba:	4b6b      	ldr	r3, [pc, #428]	; (8008868 <PxMessagingTask+0x3d4>)
 80086bc:	4a6a      	ldr	r2, [pc, #424]	; (8008868 <PxMessagingTask+0x3d4>)
 80086be:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 80086c0:	3234      	adds	r2, #52	; 0x34
 80086c2:	b2c0      	uxtb	r0, r0
 80086c4:	4969      	ldr	r1, [pc, #420]	; (800886c <PxMessagingTask+0x3d8>)
 80086c6:	f003 f9d9 	bl	800ba7c <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80086ca:	4967      	ldr	r1, [pc, #412]	; (8008868 <PxMessagingTask+0x3d4>)
 80086cc:	4866      	ldr	r0, [pc, #408]	; (8008868 <PxMessagingTask+0x3d4>)
 80086ce:	3138      	adds	r1, #56	; 0x38
 80086d0:	303c      	adds	r0, #60	; 0x3c
 80086d2:	f002 ffa9 	bl	800b628 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 80086d6:	9b06      	ldr	r3, [sp, #24]
 80086d8:	1b1e      	subs	r6, r3, r4
 80086da:	4b63      	ldr	r3, [pc, #396]	; (8008868 <PxMessagingTask+0x3d4>)
 80086dc:	00f6      	lsls	r6, r6, #3
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086de:	0019      	movs	r1, r3
							ADCPort =cMessage[port - 1][shift];
 80086e0:	445e      	add	r6, fp
 80086e2:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086e4:	3140      	adds	r1, #64	; 0x40
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086e6:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 80086e8:	8618      	strh	r0, [r3, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80086ea:	f003 f86b 	bl	800b7c4 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086ee:	79ab      	ldrb	r3, [r5, #6]
 80086f0:	79ea      	ldrb	r2, [r5, #7]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	0412      	lsls	r2, r2, #16
 80086f6:	189b      	adds	r3, r3, r2
 80086f8:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80086fa:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086fc:	189b      	adds	r3, r3, r2
 80086fe:	7a2a      	ldrb	r2, [r5, #8]
 8008700:	0612      	lsls	r2, r2, #24
 8008702:	189b      	adds	r3, r3, r2
 8008704:	4a58      	ldr	r2, [pc, #352]	; (8008868 <PxMessagingTask+0x3d4>)
 8008706:	6293      	str	r3, [r2, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008708:	7aab      	ldrb	r3, [r5, #10]
 800870a:	7aea      	ldrb	r2, [r5, #11]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	0412      	lsls	r2, r2, #16
 8008710:	189b      	adds	r3, r3, r2
 8008712:	7a6a      	ldrb	r2, [r5, #9]
 8008714:	189b      	adds	r3, r3, r2
 8008716:	7b2a      	ldrb	r2, [r5, #12]
 8008718:	0612      	lsls	r2, r2, #24
 800871a:	189b      	adds	r3, r3, r2
 800871c:	4a52      	ldr	r2, [pc, #328]	; (8008868 <PxMessagingTask+0x3d4>)
 800871e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008720:	464b      	mov	r3, r9
 8008722:	5d1f      	ldrb	r7, [r3, r4]
 8008724:	e76e      	b.n	8008604 <PxMessagingTask+0x170>
							rejected_FLAG =1;
 8008726:	2301      	movs	r3, #1
 8008728:	4a51      	ldr	r2, [pc, #324]	; (8008870 <PxMessagingTask+0x3dc>)
 800872a:	7013      	strb	r3, [r2, #0]
 800872c:	e767      	b.n	80085fe <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 800872e:	2301      	movs	r3, #1
 8008730:	4a50      	ldr	r2, [pc, #320]	; (8008874 <PxMessagingTask+0x3e0>)
 8008732:	2600      	movs	r6, #0
 8008734:	7013      	strb	r3, [r2, #0]
 8008736:	464b      	mov	r3, r9
 8008738:	5d1f      	ldrb	r7, [r3, r4]
 800873a:	e763      	b.n	8008604 <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800873c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008740:	469c      	mov	ip, r3
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	1c69      	adds	r1, r5, #1
 8008746:	1b1b      	subs	r3, r3, r4
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	445b      	add	r3, fp
 800874c:	5d58      	ldrb	r0, [r3, r5]
 800874e:	230a      	movs	r3, #10
 8008750:	4461      	add	r1, ip
 8008752:	3a01      	subs	r2, #1
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	b292      	uxth	r2, r2
 8008758:	4459      	add	r1, fp
 800875a:	f004 fa61 	bl	800cc20 <writePxMutex>
 800875e:	464b      	mov	r3, r9
 8008760:	2600      	movs	r6, #0
 8008762:	5d1f      	ldrb	r7, [r3, r4]
 8008764:	e74e      	b.n	8008604 <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	1b1b      	subs	r3, r3, r4
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	445b      	add	r3, fp
 800876e:	5d5b      	ldrb	r3, [r3, r5]
 8008770:	4a41      	ldr	r2, [pc, #260]	; (8008878 <PxMessagingTask+0x3e4>)
 8008772:	2600      	movs	r6, #0
 8008774:	7013      	strb	r3, [r2, #0]
 8008776:	464b      	mov	r3, r9
 8008778:	5d1f      	ldrb	r7, [r3, r4]
 800877a:	e743      	b.n	8008604 <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 800877c:	2300      	movs	r3, #0
 800877e:	4a3e      	ldr	r2, [pc, #248]	; (8008878 <PxMessagingTask+0x3e4>)
 8008780:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008782:	9b06      	ldr	r3, [sp, #24]
 8008784:	1b1b      	subs	r3, r3, r4
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	445b      	add	r3, fp
 800878a:	5d5e      	ldrb	r6, [r3, r5]
 800878c:	2e00      	cmp	r6, #0
 800878e:	d101      	bne.n	8008794 <PxMessagingTask+0x300>
 8008790:	f000 ff54 	bl	800963c <PxMessagingTask+0x11a8>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008794:	2e1e      	cmp	r6, #30
 8008796:	d901      	bls.n	800879c <PxMessagingTask+0x308>
 8008798:	f000 ff4c 	bl	8009634 <PxMessagingTask+0x11a0>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800879c:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800879e:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80087a0:	0592      	lsls	r2, r2, #22
 80087a2:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 80087a4:	1c6a      	adds	r2, r5, #1
 80087a6:	5c8f      	ldrb	r7, [r1, r2]
 80087a8:	9207      	str	r2, [sp, #28]
 80087aa:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80087ac:	3e01      	subs	r6, #1
 80087ae:	4b33      	ldr	r3, [pc, #204]	; (800887c <PxMessagingTask+0x3e8>)
 80087b0:	00b6      	lsls	r6, r6, #2
 80087b2:	599b      	ldr	r3, [r3, r6]
 80087b4:	0c18      	lsrs	r0, r3, #16
 80087b6:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 80087b8:	1e7a      	subs	r2, r7, #1
 80087ba:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80087bc:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80087be:	2a07      	cmp	r2, #7
 80087c0:	d901      	bls.n	80087c6 <PxMessagingTask+0x332>
 80087c2:	f000 fdbd 	bl	8009340 <PxMessagingTask+0xeac>
 80087c6:	492e      	ldr	r1, [pc, #184]	; (8008880 <PxMessagingTask+0x3ec>)
 80087c8:	0092      	lsls	r2, r2, #2
 80087ca:	588a      	ldr	r2, [r1, r2]
 80087cc:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80087ce:	2202      	movs	r2, #2
 80087d0:	4252      	negs	r2, r2
 80087d2:	17d3      	asrs	r3, r2, #31
 80087d4:	4641      	mov	r1, r8
 80087d6:	6808      	ldr	r0, [r1, #0]
 80087d8:	6849      	ldr	r1, [r1, #4]
 80087da:	1812      	adds	r2, r2, r0
 80087dc:	414b      	adcs	r3, r1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <PxMessagingTask+0x352>
 80087e2:	f000 fcb7 	bl	8009154 <PxMessagingTask+0xcc0>
 80087e6:	464b      	mov	r3, r9
 80087e8:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80087ea:	4b23      	ldr	r3, [pc, #140]	; (8008878 <PxMessagingTask+0x3e4>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b10      	cmp	r3, #16
 80087f0:	d101      	bne.n	80087f6 <PxMessagingTask+0x362>
 80087f2:	f000 fcac 	bl	800914e <PxMessagingTask+0xcba>
								responseStatus =BOS_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <PxMessagingTask+0x3e4>)
 80087fa:	2600      	movs	r6, #0
 80087fc:	7013      	strb	r3, [r2, #0]
 80087fe:	e701      	b.n	8008604 <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	1b1b      	subs	r3, r3, r4
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	445b      	add	r3, fp
 8008808:	5d5b      	ldrb	r3, [r3, r5]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <PxMessagingTask+0x37e>
 800880e:	f000 fd6a 	bl	80092e6 <PxMessagingTask+0xe52>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008812:	9b05      	ldr	r3, [sp, #20]
 8008814:	469c      	mov	ip, r3
 8008816:	4465      	add	r5, ip
 8008818:	78ab      	ldrb	r3, [r5, #2]
 800881a:	78ea      	ldrb	r2, [r5, #3]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	0412      	lsls	r2, r2, #16
 8008820:	189b      	adds	r3, r3, r2
 8008822:	796a      	ldrb	r2, [r5, #5]
 8008824:	189b      	adds	r3, r3, r2
 8008826:	792a      	ldrb	r2, [r5, #4]
 8008828:	0212      	lsls	r2, r2, #8
 800882a:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800882c:	786a      	ldrb	r2, [r5, #1]
 800882e:	3a01      	subs	r2, #1
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	2a07      	cmp	r2, #7
 8008834:	d900      	bls.n	8008838 <PxMessagingTask+0x3a4>
 8008836:	e6e2      	b.n	80085fe <PxMessagingTask+0x16a>
 8008838:	4912      	ldr	r1, [pc, #72]	; (8008884 <PxMessagingTask+0x3f0>)
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	588a      	ldr	r2, [r1, r2]
 800883e:	4697      	mov	pc, r2
 8008840:	20000c90 	.word	0x20000c90
 8008844:	20000c50 	.word	0x20000c50
 8008848:	20000c40 	.word	0x20000c40
 800884c:	20000c4c 	.word	0x20000c4c
 8008850:	20006a00 	.word	0x20006a00
 8008854:	20001fd4 	.word	0x20001fd4
 8008858:	20000c48 	.word	0x20000c48
 800885c:	08016ecc 	.word	0x08016ecc
 8008860:	20000a98 	.word	0x20000a98
 8008864:	20000c2c 	.word	0x20000c2c
 8008868:	20002054 	.word	0x20002054
 800886c:	08017e10 	.word	0x08017e10
 8008870:	2000117c 	.word	0x2000117c
 8008874:	2000117d 	.word	0x2000117d
 8008878:	20000c3c 	.word	0x20000c3c
 800887c:	20006a08 	.word	0x20006a08
 8008880:	08016f84 	.word	0x08016f84
 8008884:	08016fa4 	.word	0x08016fa4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008888:	9b06      	ldr	r3, [sp, #24]
 800888a:	49de      	ldr	r1, [pc, #888]	; (8008c04 <PxMessagingTask+0x770>)
 800888c:	1b18      	subs	r0, r3, r4
 800888e:	00c0      	lsls	r0, r0, #3
 8008890:	7809      	ldrb	r1, [r1, #0]
 8008892:	4458      	add	r0, fp
 8008894:	1942      	adds	r2, r0, r5
 8008896:	468c      	mov	ip, r1
 8008898:	7a51      	ldrb	r1, [r2, #9]
 800889a:	7ad7      	ldrb	r7, [r2, #11]
 800889c:	468a      	mov	sl, r1
 800889e:	7b11      	ldrb	r1, [r2, #12]
 80088a0:	7a93      	ldrb	r3, [r2, #10]
 80088a2:	000e      	movs	r6, r1
 80088a4:	1e71      	subs	r1, r6, #1
 80088a6:	418e      	sbcs	r6, r1
 80088a8:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80088aa:	7916      	ldrb	r6, [r2, #4]
 80088ac:	7951      	ldrb	r1, [r2, #5]
 80088ae:	0636      	lsls	r6, r6, #24
 80088b0:	0409      	lsls	r1, r1, #16
 80088b2:	1871      	adds	r1, r6, r1
 80088b4:	79d6      	ldrb	r6, [r2, #7]
 80088b6:	1989      	adds	r1, r1, r6
 80088b8:	7996      	ldrb	r6, [r2, #6]
 80088ba:	0236      	lsls	r6, r6, #8
 80088bc:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80088be:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80088c0:	5d41      	ldrb	r1, [r0, r5]
 80088c2:	78d0      	ldrb	r0, [r2, #3]
 80088c4:	0609      	lsls	r1, r1, #24
 80088c6:	1809      	adds	r1, r1, r0
 80088c8:	7850      	ldrb	r0, [r2, #1]
 80088ca:	0400      	lsls	r0, r0, #16
 80088cc:	1809      	adds	r1, r1, r0
 80088ce:	7890      	ldrb	r0, [r2, #2]
 80088d0:	0200      	lsls	r0, r0, #8
 80088d2:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80088d4:	9101      	str	r1, [sp, #4]
 80088d6:	7a12      	ldrb	r2, [r2, #8]
 80088d8:	4661      	mov	r1, ip
 80088da:	9200      	str	r2, [sp, #0]
 80088dc:	4650      	mov	r0, sl
 80088de:	003a      	movs	r2, r7
 80088e0:	f7ff fc68 	bl	80081b4 <StartScastDMAStream>
 80088e4:	e68b      	b.n	80085fe <PxMessagingTask+0x16a>
							SaveToRO();
 80088e6:	f001 f851 	bl	800998c <SaveToRO>
							SaveEEportsDir();
 80088ea:	f7fa fdbf 	bl	800346c <SaveEEportsDir>
							indMode =IND_PING;
 80088ee:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 80088f0:	4ac5      	ldr	r2, [pc, #788]	; (8008c08 <PxMessagingTask+0x774>)
 80088f2:	2600      	movs	r6, #0
 80088f4:	7013      	strb	r3, [r2, #0]
 80088f6:	464b      	mov	r3, r9
 80088f8:	5d1f      	ldrb	r7, [r3, r4]
 80088fa:	e683      	b.n	8008604 <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 80088fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01d      	beq.n	800893e <PxMessagingTask+0x4aa>
 8008902:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008904:	4659      	mov	r1, fp
 8008906:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008908:	4652      	mov	r2, sl
 800890a:	1970      	adds	r0, r6, r5
 800890c:	2680      	movs	r6, #128	; 0x80
 800890e:	3101      	adds	r1, #1
 8008910:	4461      	add	r1, ip
 8008912:	194d      	adds	r5, r1, r5
 8008914:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008916:	3a01      	subs	r2, #1
 8008918:	4bbc      	ldr	r3, [pc, #752]	; (8008c0c <PxMessagingTask+0x778>)
 800891a:	0052      	lsls	r2, r2, #1
 800891c:	3901      	subs	r1, #1
 800891e:	b2c9      	uxtb	r1, r1
 8008920:	5a9b      	ldrh	r3, [r3, r2]
 8008922:	4458      	add	r0, fp
 8008924:	186d      	adds	r5, r5, r1
 8008926:	0236      	lsls	r6, r6, #8
 8008928:	0037      	movs	r7, r6
 800892a:	7801      	ldrb	r1, [r0, #0]
 800892c:	3001      	adds	r0, #1
 800892e:	3901      	subs	r1, #1
 8008930:	410f      	asrs	r7, r1
 8008932:	433b      	orrs	r3, r7
 8008934:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 8008936:	4285      	cmp	r5, r0
 8008938:	d1f6      	bne.n	8008928 <PxMessagingTask+0x494>
 800893a:	49b4      	ldr	r1, [pc, #720]	; (8008c0c <PxMessagingTask+0x778>)
 800893c:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e716      	b.n	8008770 <PxMessagingTask+0x2dc>
							ReadPortsDirMSG(src);
 8008942:	4650      	mov	r0, sl
 8008944:	f004 fa30 	bl	800cda8 <ReadPortsDirMSG>
 8008948:	464b      	mov	r3, r9
 800894a:	2600      	movs	r6, #0
 800894c:	5d1f      	ldrb	r7, [r3, r4]
 800894e:	e659      	b.n	8008604 <PxMessagingTask+0x170>
 8008950:	4baf      	ldr	r3, [pc, #700]	; (8008c10 <PxMessagingTask+0x77c>)
 8008952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008954:	881e      	ldrh	r6, [r3, #0]
 8008956:	4baf      	ldr	r3, [pc, #700]	; (8008c14 <PxMessagingTask+0x780>)
 8008958:	4694      	mov	ip, r2
 800895a:	1998      	adds	r0, r3, r6
 800895c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895e:	4466      	add	r6, ip
 8008960:	18e9      	adds	r1, r5, r3
 8008962:	464b      	mov	r3, r9
 8008964:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 8008966:	4bac      	ldr	r3, [pc, #688]	; (8008c18 <PxMessagingTask+0x784>)
 8008968:	b2b6      	uxth	r6, r6
 800896a:	781d      	ldrb	r5, [r3, #0]
 800896c:	4459      	add	r1, fp
 800896e:	2d00      	cmp	r5, #0
 8008970:	d101      	bne.n	8008976 <PxMessagingTask+0x4e2>
 8008972:	f000 fc69 	bl	8009248 <PxMessagingTask+0xdb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008976:	f009 fcc6 	bl	8012306 <memcpy>
								longMessageLastPtr +=numOfParams;
 800897a:	4ba5      	ldr	r3, [pc, #660]	; (8008c10 <PxMessagingTask+0x77c>)
 800897c:	801e      	strh	r6, [r3, #0]
 800897e:	2600      	movs	r6, #0
 8008980:	e640      	b.n	8008604 <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008982:	2601      	movs	r6, #1
 8008984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008986:	18ef      	adds	r7, r5, r3
 8008988:	445f      	add	r7, fp
								if(p != port)
 800898a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800898c:	42b3      	cmp	r3, r6
 800898e:	d005      	beq.n	800899c <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008990:	0030      	movs	r0, r6
 8008992:	f004 f9a9 	bl	800cce8 <GetUart>
 8008996:	7839      	ldrb	r1, [r7, #0]
 8008998:	f004 f9b2 	bl	800cd00 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800899c:	3601      	adds	r6, #1
 800899e:	b2f6      	uxtb	r6, r6
 80089a0:	3701      	adds	r7, #1
 80089a2:	2e07      	cmp	r6, #7
 80089a4:	d1f1      	bne.n	800898a <PxMessagingTask+0x4f6>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 80089a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089a8:	f004 f99e 	bl	800cce8 <GetUart>
 80089ac:	9b06      	ldr	r3, [sp, #24]
 80089ae:	2600      	movs	r6, #0
 80089b0:	1b1b      	subs	r3, r3, r4
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	445b      	add	r3, fp
 80089b6:	195d      	adds	r5, r3, r5
 80089b8:	7aa9      	ldrb	r1, [r5, #10]
 80089ba:	f004 f9a1 	bl	800cd00 <SwapUartPins>
 80089be:	464b      	mov	r3, r9
 80089c0:	5d1f      	ldrb	r7, [r3, r4]
 80089c2:	e61f      	b.n	8008604 <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	1b1b      	subs	r3, r3, r4
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	445b      	add	r3, fp
 80089cc:	5d5f      	ldrb	r7, [r3, r5]
 80089ce:	195b      	adds	r3, r3, r5
 80089d0:	78da      	ldrb	r2, [r3, #3]
 80089d2:	063f      	lsls	r7, r7, #24
 80089d4:	18bf      	adds	r7, r7, r2
 80089d6:	785a      	ldrb	r2, [r3, #1]
 80089d8:	0412      	lsls	r2, r2, #16
 80089da:	18bf      	adds	r7, r7, r2
 80089dc:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80089de:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80089e0:	0212      	lsls	r2, r2, #8
 80089e2:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80089e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e6:	2bff      	cmp	r3, #255	; 0xff
 80089e8:	d101      	bne.n	80089ee <PxMessagingTask+0x55a>
 80089ea:	f000 fc4e 	bl	800928a <PxMessagingTask+0xdf6>
								for(p =0; p < numOfParams; p++){
 80089ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f0:	2a00      	cmp	r2, #0
 80089f2:	d101      	bne.n	80089f8 <PxMessagingTask+0x564>
 80089f4:	f000 fc42 	bl	800927c <PxMessagingTask+0xde8>
 80089f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089fc:	195e      	adds	r6, r3, r5
 80089fe:	465b      	mov	r3, fp
 8008a00:	468c      	mov	ip, r1
 8008a02:	3305      	adds	r3, #5
 8008a04:	4463      	add	r3, ip
 8008a06:	195d      	adds	r5, r3, r5
 8008a08:	0013      	movs	r3, r2
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 8008a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a12:	445e      	add	r6, fp
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b05      	cmp	r3, #5
 8008a1a:	d90a      	bls.n	8008a32 <PxMessagingTask+0x59e>
								for(p =0; p < numOfParams; p++){
 8008a1c:	42b5      	cmp	r5, r6
 8008a1e:	d100      	bne.n	8008a22 <PxMessagingTask+0x58e>
 8008a20:	e5ed      	b.n	80085fe <PxMessagingTask+0x16a>
 8008a22:	7833      	ldrb	r3, [r6, #0]
 8008a24:	3601      	adds	r6, #1
 8008a26:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 8008a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d8f4      	bhi.n	8008a1c <PxMessagingTask+0x588>
										UpdateBaudrate(temp,temp32);
 8008a32:	0039      	movs	r1, r7
 8008a34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a36:	f004 f945 	bl	800ccc4 <UpdateBaudrate>
 8008a3a:	e7ef      	b.n	8008a1c <PxMessagingTask+0x588>
							temp =numOfParams / 5;
 8008a3c:	2105      	movs	r1, #5
 8008a3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a40:	f7f7 fb86 	bl	8000150 <__udivsi3>
 8008a44:	b2c2      	uxtb	r2, r0
 8008a46:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 8008a48:	2a00      	cmp	r2, #0
 8008a4a:	d100      	bne.n	8008a4e <PxMessagingTask+0x5ba>
 8008a4c:	e777      	b.n	800893e <PxMessagingTask+0x4aa>
 8008a4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a50:	465b      	mov	r3, fp
 8008a52:	468c      	mov	ip, r1
 8008a54:	3305      	adds	r3, #5
 8008a56:	4463      	add	r3, ip
 8008a58:	194e      	adds	r6, r1, r5
 8008a5a:	195d      	adds	r5, r3, r5
 8008a5c:	1e53      	subs	r3, r2, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	009a      	lsls	r2, r3, #2
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	445e      	add	r6, fp
 8008a66:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008a68:	4b6c      	ldr	r3, [pc, #432]	; (8008c1c <PxMessagingTask+0x788>)
 8008a6a:	7830      	ldrb	r0, [r6, #0]
 8008a6c:	469c      	mov	ip, r3
 8008a6e:	3801      	subs	r0, #1
 8008a70:	0080      	lsls	r0, r0, #2
 8008a72:	1c71      	adds	r1, r6, #1
 8008a74:	4460      	add	r0, ip
 8008a76:	2204      	movs	r2, #4
 8008a78:	3605      	adds	r6, #5
 8008a7a:	f009 fc44 	bl	8012306 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008a7e:	42b5      	cmp	r5, r6
 8008a80:	d1f2      	bne.n	8008a68 <PxMessagingTask+0x5d4>
							responseStatus =BOS_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e674      	b.n	8008770 <PxMessagingTask+0x2dc>
							ExploreNeighbors(port);
 8008a86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a88:	f7fa ff68 	bl	800395c <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008a8c:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a8e:	2501      	movs	r5, #1
							temp =0;
 8008a90:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008a92:	4a5d      	ldr	r2, [pc, #372]	; (8008c08 <PxMessagingTask+0x774>)
							osDelay(10);
 8008a94:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008a96:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008a98:	f004 fa56 	bl	800cf48 <osDelay>
 8008a9c:	4e60      	ldr	r6, [pc, #384]	; (8008c20 <PxMessagingTask+0x78c>)
								if(neighbors[p - 1][0]){
 8008a9e:	8833      	ldrh	r3, [r6, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <PxMessagingTask+0x626>
									messageParams[temp] =p;
 8008aa4:	4b5f      	ldr	r3, [pc, #380]	; (8008c24 <PxMessagingTask+0x790>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008aa6:	1c78      	adds	r0, r7, #1
 8008aa8:	469c      	mov	ip, r3
 8008aaa:	2204      	movs	r2, #4
 8008aac:	4460      	add	r0, ip
 8008aae:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008ab0:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008ab2:	f009 fc28 	bl	8012306 <memcpy>
									temp +=5;
 8008ab6:	3705      	adds	r7, #5
 8008ab8:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008aba:	3501      	adds	r5, #1
 8008abc:	b2ed      	uxtb	r5, r5
 8008abe:	3604      	adds	r6, #4
 8008ac0:	2d07      	cmp	r5, #7
 8008ac2:	d1ec      	bne.n	8008a9e <PxMessagingTask+0x60a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008ac4:	210d      	movs	r1, #13
 8008ac6:	970b      	str	r7, [sp, #44]	; 0x2c
 8008ac8:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008aca:	4650      	mov	r0, sl
 8008acc:	f7ff fb4e 	bl	800816c <SendMessageToModule>
 8008ad0:	e595      	b.n	80085fe <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	0209      	lsls	r1, r1, #8
 8008ad8:	1b1b      	subs	r3, r3, r4
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	445b      	add	r3, fp
 8008ade:	1958      	adds	r0, r3, r5
 8008ae0:	7882      	ldrb	r2, [r0, #2]
 8008ae2:	4e4f      	ldr	r6, [pc, #316]	; (8008c20 <PxMessagingTask+0x78c>)
 8008ae4:	1852      	adds	r2, r2, r1
 8008ae6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ae8:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008aea:	468c      	mov	ip, r1
 8008aec:	0032      	movs	r2, r6
 8008aee:	5d59      	ldrb	r1, [r3, r5]
 8008af0:	7843      	ldrb	r3, [r0, #1]
 8008af2:	0209      	lsls	r1, r1, #8
 8008af4:	185b      	adds	r3, r3, r1
 8008af6:	4462      	add	r2, ip
 8008af8:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e638      	b.n	8008770 <PxMessagingTask+0x2dc>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008afe:	4651      	mov	r1, sl
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	0209      	lsls	r1, r1, #8
 8008b04:	1b1b      	subs	r3, r3, r4
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	445b      	add	r3, fp
 8008b0a:	1958      	adds	r0, r3, r5
 8008b0c:	7882      	ldrb	r2, [r0, #2]
 8008b0e:	4e44      	ldr	r6, [pc, #272]	; (8008c20 <PxMessagingTask+0x78c>)
 8008b10:	1852      	adds	r2, r2, r1
 8008b12:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b14:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008b16:	468c      	mov	ip, r1
 8008b18:	0032      	movs	r2, r6
 8008b1a:	5d59      	ldrb	r1, [r3, r5]
 8008b1c:	7843      	ldrb	r3, [r0, #1]
 8008b1e:	0209      	lsls	r1, r1, #8
 8008b20:	4462      	add	r2, ip
 8008b22:	185b      	adds	r3, r3, r1
 8008b24:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008b26:	4b40      	ldr	r3, [pc, #256]	; (8008c28 <PxMessagingTask+0x794>)
 8008b28:	4a3e      	ldr	r2, [pc, #248]	; (8008c24 <PxMessagingTask+0x790>)
 8008b2a:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008b2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008b2e:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008b30:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008b36:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008b38:	f004 fa06 	bl	800cf48 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	2200      	movs	r2, #0
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	2100      	movs	r1, #0
 8008b44:	3308      	adds	r3, #8
 8008b46:	0028      	movs	r0, r5
 8008b48:	f7ff f8b0 	bl	8007cac <SendMessageFromPort>
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	2600      	movs	r6, #0
 8008b50:	5d1f      	ldrb	r7, [r3, r4]
 8008b52:	e557      	b.n	8008604 <PxMessagingTask+0x170>
							IND_toggle();
 8008b54:	2180      	movs	r1, #128	; 0x80
 8008b56:	2090      	movs	r0, #144	; 0x90
 8008b58:	0109      	lsls	r1, r1, #4
 8008b5a:	05c0      	lsls	r0, r0, #23
 8008b5c:	f007 fce2 	bl	8010524 <HAL_GPIO_TogglePin>
 8008b60:	464b      	mov	r3, r9
 8008b62:	2600      	movs	r6, #0
 8008b64:	5d1f      	ldrb	r7, [r3, r4]
 8008b66:	e54d      	b.n	8008604 <PxMessagingTask+0x170>
							IND_OFF();
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2180      	movs	r1, #128	; 0x80
 8008b6c:	2090      	movs	r0, #144	; 0x90
 8008b6e:	0109      	lsls	r1, r1, #4
 8008b70:	05c0      	lsls	r0, r0, #23
 8008b72:	f007 fcd1 	bl	8010518 <HAL_GPIO_WritePin>
 8008b76:	e542      	b.n	80085fe <PxMessagingTask+0x16a>
							IND_ON();
 8008b78:	2201      	movs	r2, #1
 8008b7a:	e7f6      	b.n	8008b6a <PxMessagingTask+0x6d6>
							if(!moduleAlias[myID][0])
 8008b7c:	4b21      	ldr	r3, [pc, #132]	; (8008c04 <PxMessagingTask+0x770>)
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	0093      	lsls	r3, r2, #2
 8008b82:	189b      	adds	r3, r3, r2
 8008b84:	4a29      	ldr	r2, [pc, #164]	; (8008c2c <PxMessagingTask+0x798>)
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	5cd3      	ldrb	r3, [r2, r3]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d000      	beq.n	8008b90 <PxMessagingTask+0x6fc>
 8008b8e:	e2d1      	b.n	8009134 <PxMessagingTask+0xca0>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008b90:	4827      	ldr	r0, [pc, #156]	; (8008c30 <PxMessagingTask+0x79c>)
 8008b92:	4652      	mov	r2, sl
 8008b94:	3008      	adds	r0, #8
 8008b96:	4927      	ldr	r1, [pc, #156]	; (8008c34 <PxMessagingTask+0x7a0>)
 8008b98:	f009 fdb8 	bl	801270c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008b9c:	4d24      	ldr	r5, [pc, #144]	; (8008c30 <PxMessagingTask+0x79c>)
 8008b9e:	3508      	adds	r5, #8
 8008ba0:	0028      	movs	r0, r5
 8008ba2:	f7f7 fab9 	bl	8000118 <strlen>
 8008ba6:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <PxMessagingTask+0x7a4>)
 8008ba8:	b282      	uxth	r2, r0
 8008baa:	7818      	ldrb	r0, [r3, #0]
 8008bac:	2301      	movs	r3, #1
 8008bae:	425b      	negs	r3, r3
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	0029      	movs	r1, r5
 8008bb4:	3333      	adds	r3, #51	; 0x33
 8008bb6:	f004 f833 	bl	800cc20 <writePxMutex>
							responseStatus =BOS_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e5d8      	b.n	8008770 <PxMessagingTask+0x2dc>
							indMode =IND_PING;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4a11      	ldr	r2, [pc, #68]	; (8008c08 <PxMessagingTask+0x774>)
							osDelay(10);
 8008bc2:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008bc4:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008bc6:	f004 f9bf 	bl	800cf48 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008bca:	2240      	movs	r2, #64	; 0x40
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <PxMessagingTask+0x7a8>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	4393      	bics	r3, r2
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d000      	beq.n	8008bd8 <PxMessagingTask+0x744>
 8008bd6:	e512      	b.n	80085fe <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2102      	movs	r1, #2
 8008bdc:	e775      	b.n	8008aca <PxMessagingTask+0x636>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008bde:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <PxMessagingTask+0x7ac>)
 8008be0:	4a18      	ldr	r2, [pc, #96]	; (8008c44 <PxMessagingTask+0x7b0>)
							osDelay(10);
 8008be2:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008be4:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008be6:	2301      	movs	r3, #1
 8008be8:	4a07      	ldr	r2, [pc, #28]	; (8008c08 <PxMessagingTask+0x774>)
 8008bea:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008bec:	f004 f9ac 	bl	800cf48 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <PxMessagingTask+0x7b4>)
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <PxMessagingTask+0x7b8>)
 8008bf8:	60da      	str	r2, [r3, #12]
 8008bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	e7fd      	b.n	8008bfe <PxMessagingTask+0x76a>
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	20000a98 	.word	0x20000a98
 8008c08:	2000117e 	.word	0x2000117e
 8008c0c:	20006f48 	.word	0x20006f48
 8008c10:	20000c4a 	.word	0x20000c4a
 8008c14:	20002098 	.word	0x20002098
 8008c18:	20000c4c 	.word	0x20000c4c
 8008c1c:	2000114c 	.word	0x2000114c
 8008c20:	20001164 	.word	0x20001164
 8008c24:	20000b3c 	.word	0x20000b3c
 8008c28:	20000030 	.word	0x20000030
 8008c2c:	20000dfc 	.word	0x20000dfc
 8008c30:	20001fd4 	.word	0x20001fd4
 8008c34:	08018918 	.word	0x08018918
 8008c38:	20000c28 	.word	0x20000c28
 8008c3c:	20006a00 	.word	0x20006a00
 8008c40:	20007ff0 	.word	0x20007ff0
 8008c44:	deadbeef 	.word	0xdeadbeef
 8008c48:	e000ed00 	.word	0xe000ed00
 8008c4c:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008c50:	230b      	movs	r3, #11
 8008c52:	469c      	mov	ip, r3
 8008c54:	44ac      	add	ip, r5
 8008c56:	4662      	mov	r2, ip
 8008c58:	9b06      	ldr	r3, [sp, #24]
 8008c5a:	9207      	str	r2, [sp, #28]
 8008c5c:	1b1b      	subs	r3, r3, r4
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	445b      	add	r3, fp
 8008c62:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c66:	2a0f      	cmp	r2, #15
 8008c68:	d100      	bne.n	8008c6c <PxMessagingTask+0x7d8>
 8008c6a:	e318      	b.n	800929e <PxMessagingTask+0xe0a>
							if(numOfParams == 17)
 8008c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008c6e:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008c70:	2a11      	cmp	r2, #17
 8008c72:	d100      	bne.n	8008c76 <PxMessagingTask+0x7e2>
 8008c74:	e317      	b.n	80092a6 <PxMessagingTask+0xe12>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c76:	9f06      	ldr	r7, [sp, #24]
 8008c78:	1caa      	adds	r2, r5, #2
 8008c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c7c:	1b3a      	subs	r2, r7, r4
 8008c7e:	00d2      	lsls	r2, r2, #3
 8008c80:	445a      	add	r2, fp
 8008c82:	1ce8      	adds	r0, r5, #3
 8008c84:	5d57      	ldrb	r7, [r2, r5]
 8008c86:	9011      	str	r0, [sp, #68]	; 0x44
 8008c88:	5c10      	ldrb	r0, [r2, r0]
 8008c8a:	1c6e      	adds	r6, r5, #1
 8008c8c:	063f      	lsls	r7, r7, #24
 8008c8e:	183f      	adds	r7, r7, r0
 8008c90:	5d90      	ldrb	r0, [r2, r6]
 8008c92:	9608      	str	r6, [sp, #32]
 8008c94:	0400      	lsls	r0, r0, #16
 8008c96:	183f      	adds	r7, r7, r0
 8008c98:	1ca8      	adds	r0, r5, #2
 8008c9a:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c9c:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c9e:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008ca0:	9613      	str	r6, [sp, #76]	; 0x4c
 8008ca2:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008ca4:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008ca6:	9614      	str	r6, [sp, #80]	; 0x50
 8008ca8:	1d28      	adds	r0, r5, #4
 8008caa:	1dee      	adds	r6, r5, #7
 8008cac:	9012      	str	r0, [sp, #72]	; 0x48
 8008cae:	9615      	str	r6, [sp, #84]	; 0x54
 8008cb0:	5c16      	ldrb	r6, [r2, r0]
 8008cb2:	1d68      	adds	r0, r5, #5
 8008cb4:	5c10      	ldrb	r0, [r2, r0]
 8008cb6:	0636      	lsls	r6, r6, #24
 8008cb8:	0400      	lsls	r0, r0, #16
 8008cba:	1836      	adds	r6, r6, r0
 8008cbc:	1de8      	adds	r0, r5, #7
 8008cbe:	5c10      	ldrb	r0, [r2, r0]
 8008cc0:	1836      	adds	r6, r6, r0
 8008cc2:	1da8      	adds	r0, r5, #6
 8008cc4:	5c10      	ldrb	r0, [r2, r0]
 8008cc6:	0200      	lsls	r0, r0, #8
 8008cc8:	1836      	adds	r6, r6, r0
 8008cca:	0028      	movs	r0, r5
 8008ccc:	3009      	adds	r0, #9
							if(temp == false){
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	d000      	beq.n	8008cd4 <PxMessagingTask+0x840>
 8008cd2:	e24f      	b.n	8009174 <PxMessagingTask+0xce0>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008cd4:	5c12      	ldrb	r2, [r2, r0]
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	d00e      	beq.n	8008cf8 <PxMessagingTask+0x864>
 8008cda:	9905      	ldr	r1, [sp, #20]
 8008cdc:	1948      	adds	r0, r1, r5
 8008cde:	7a81      	ldrb	r1, [r0, #10]
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	d009      	beq.n	8008cf8 <PxMessagingTask+0x864>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008ce4:	0013      	movs	r3, r2
 8008ce6:	7a00      	ldrb	r0, [r0, #8]
 8008ce8:	0032      	movs	r2, r6
 8008cea:	9100      	str	r1, [sp, #0]
 8008cec:	0039      	movs	r1, r7
 8008cee:	f7fe fee9 	bl	8007ac4 <SetupDMAStreams>
 8008cf2:	9b05      	ldr	r3, [sp, #20]
 8008cf4:	9a07      	ldr	r2, [sp, #28]
 8008cf6:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <PxMessagingTask+0x87e>
 8008cfc:	9a05      	ldr	r2, [sp, #20]
 8008cfe:	1951      	adds	r1, r2, r5
 8008d00:	7b0a      	ldrb	r2, [r1, #12]
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d005      	beq.n	8008d12 <PxMessagingTask+0x87e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008d06:	7a08      	ldrb	r0, [r1, #8]
 8008d08:	9200      	str	r2, [sp, #0]
 8008d0a:	0039      	movs	r1, r7
 8008d0c:	0032      	movs	r2, r6
 8008d0e:	f7fe fed9 	bl	8007ac4 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	1b1b      	subs	r3, r3, r4
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	445b      	add	r3, fp
 8008d1a:	195b      	adds	r3, r3, r5
 8008d1c:	7b5b      	ldrb	r3, [r3, #13]
 8008d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d100      	bne.n	8008d26 <PxMessagingTask+0x892>
 8008d24:	e46b      	b.n	80085fe <PxMessagingTask+0x16a>
 8008d26:	9b05      	ldr	r3, [sp, #20]
 8008d28:	469c      	mov	ip, r3
 8008d2a:	4465      	add	r5, ip
 8008d2c:	7bab      	ldrb	r3, [r5, #14]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d000      	beq.n	8008d34 <PxMessagingTask+0x8a0>
 8008d32:	e29c      	b.n	800926e <PxMessagingTask+0xdda>
 8008d34:	464a      	mov	r2, r9
 8008d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d38:	5d17      	ldrb	r7, [r2, r4]
 8008d3a:	001e      	movs	r6, r3
 8008d3c:	e462      	b.n	8008604 <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008d3e:	9b06      	ldr	r3, [sp, #24]
 8008d40:	2200      	movs	r2, #0
 8008d42:	1b1e      	subs	r6, r3, r4
 8008d44:	2300      	movs	r3, #0
 8008d46:	00f6      	lsls	r6, r6, #3
 8008d48:	445e      	add	r6, fp
 8008d4a:	5d70      	ldrb	r0, [r6, r5]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	3319      	adds	r3, #25
 8008d52:	f7fe ffab 	bl	8007cac <SendMessageFromPort>
							osDelay(100);
 8008d56:	2064      	movs	r0, #100	; 0x64
 8008d58:	f004 f8f6 	bl	800cf48 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008d5c:	4ae8      	ldr	r2, [pc, #928]	; (8009100 <PxMessagingTask+0xc6c>)
 8008d5e:	5d73      	ldrb	r3, [r6, r5]
 8008d60:	7811      	ldrb	r1, [r2, #0]
 8008d62:	4650      	mov	r0, sl
 8008d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d66:	f000 ff35 	bl	8009bd4 <remoteBootloaderUpdate>
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	5d1f      	ldrb	r7, [r3, r4]
 8008d70:	e448      	b.n	8008604 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008d72:	f004 f9f1 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
 8008d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d78:	0006      	movs	r6, r0
 8008d7a:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	4459      	add	r1, fp
 8008d80:	2bff      	cmp	r3, #255	; 0xff
 8008d82:	d100      	bne.n	8008d86 <PxMessagingTask+0x8f2>
 8008d84:	e13f      	b.n	8009006 <PxMessagingTask+0xb72>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d86:	48df      	ldr	r0, [pc, #892]	; (8009104 <PxMessagingTask+0xc70>)
							else if(dst == BOS_MULTICAST)
 8008d88:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d8a:	3058      	adds	r0, #88	; 0x58
							else if(dst == BOS_MULTICAST)
 8008d8c:	2bfe      	cmp	r3, #254	; 0xfe
 8008d8e:	d100      	bne.n	8008d92 <PxMessagingTask+0x8fe>
 8008d90:	e132      	b.n	8008ff8 <PxMessagingTask+0xb64>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d94:	f009 fab7 	bl	8012306 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d98:	4fda      	ldr	r7, [pc, #872]	; (8009104 <PxMessagingTask+0xc70>)
 8008d9a:	3758      	adds	r7, #88	; 0x58
 8008d9c:	e001      	b.n	8008da2 <PxMessagingTask+0x90e>
							} while(xReturned != pdFALSE);
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	d028      	beq.n	8008df4 <PxMessagingTask+0x960>
								PcPort =port;
 8008da2:	4ad9      	ldr	r2, [pc, #868]	; (8009108 <PxMessagingTask+0xc74>)
 8008da4:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008da6:	4bd8      	ldr	r3, [pc, #864]	; (8009108 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008da8:	0038      	movs	r0, r7
								temp =PcPort;
 8008daa:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008dac:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008dae:	2299      	movs	r2, #153	; 0x99
 8008db0:	0031      	movs	r1, r6
 8008db2:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008db4:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008db6:	f004 f957 	bl	800d068 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dbc:	4ad2      	ldr	r2, [pc, #840]	; (8009108 <PxMessagingTask+0xc74>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008dbe:	0005      	movs	r5, r0
								PcPort =temp;
 8008dc0:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008dc2:	4bd2      	ldr	r3, [pc, #840]	; (800910c <PxMessagingTask+0xc78>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b60      	cmp	r3, #96	; 0x60
 8008dc8:	d1e9      	bne.n	8008d9e <PxMessagingTask+0x90a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008dca:	0030      	movs	r0, r6
 8008dcc:	f7f7 f9a4 	bl	8000118 <strlen>
 8008dd0:	0031      	movs	r1, r6
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	48ce      	ldr	r0, [pc, #824]	; (8009110 <PxMessagingTask+0xc7c>)
 8008dd6:	f009 fa96 	bl	8012306 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008dda:	0030      	movs	r0, r6
 8008ddc:	f7f7 f99c 	bl	8000118 <strlen>
 8008de0:	2118      	movs	r1, #24
 8008de2:	b282      	uxth	r2, r0
 8008de4:	4650      	mov	r0, sl
 8008de6:	f7ff f9c1 	bl	800816c <SendMessageToModule>
									osDelay(10);
 8008dea:	200a      	movs	r0, #10
 8008dec:	f004 f8ac 	bl	800cf48 <osDelay>
							} while(xReturned != pdFALSE);
 8008df0:	2d00      	cmp	r5, #0
 8008df2:	d1d6      	bne.n	8008da2 <PxMessagingTask+0x90e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008df4:	48c3      	ldr	r0, [pc, #780]	; (8009104 <PxMessagingTask+0xc70>)
 8008df6:	2232      	movs	r2, #50	; 0x32
 8008df8:	3058      	adds	r0, #88	; 0x58
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f009 fa8c 	bl	8012318 <memset>
 8008e00:	464b      	mov	r3, r9
 8008e02:	2600      	movs	r6, #0
 8008e04:	5d1f      	ldrb	r7, [r3, r4]
 8008e06:	f7ff fbfd 	bl	8008604 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008e0a:	f004 f9a5 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
 8008e0e:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008e10:	f7f7 f982 	bl	8000118 <strlen>
 8008e14:	2100      	movs	r1, #0
 8008e16:	0002      	movs	r2, r0
 8008e18:	0030      	movs	r0, r6
 8008e1a:	f009 fa7d 	bl	8012318 <memset>
 8008e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e20:	18e9      	adds	r1, r5, r3
							if(longMessage){
 8008e22:	4bbc      	ldr	r3, [pc, #752]	; (8009114 <PxMessagingTask+0xc80>)
 8008e24:	4459      	add	r1, fp
 8008e26:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e28:	4bbb      	ldr	r3, [pc, #748]	; (8009118 <PxMessagingTask+0xc84>)
 8008e2a:	8818      	ldrh	r0, [r3, #0]
 8008e2c:	1830      	adds	r0, r6, r0
							if(longMessage){
 8008e2e:	2f00      	cmp	r7, #0
 8008e30:	d100      	bne.n	8008e34 <PxMessagingTask+0x9a0>
 8008e32:	e0ce      	b.n	8008fd2 <PxMessagingTask+0xb3e>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 8008e36:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e38:	002a      	movs	r2, r5
 8008e3a:	f009 fa64 	bl	8012306 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008e3e:	46ac      	mov	ip, r5
 8008e40:	4bb5      	ldr	r3, [pc, #724]	; (8009118 <PxMessagingTask+0xc84>)
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	4bb4      	ldr	r3, [pc, #720]	; (8009118 <PxMessagingTask+0xc84>)
 8008e46:	4462      	add	r2, ip
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	5d1f      	ldrb	r7, [r3, r4]
 8008e4e:	f7ff fbd9 	bl	8008604 <PxMessagingTask+0x170>
							ClearEEportsDir();
 8008e52:	f7fa fc03 	bl	800365c <ClearEEportsDir>
							ClearROtopology();
 8008e56:	f000 fe91 	bl	8009b7c <ClearROtopology>
							osDelay(100);
 8008e5a:	2064      	movs	r0, #100	; 0x64
 8008e5c:	f004 f874 	bl	800cf48 <osDelay>
							indMode =IND_TOPOLOGY;
 8008e60:	2302      	movs	r3, #2
 8008e62:	e545      	b.n	80088f0 <PxMessagingTask+0x45c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e64:	4ba6      	ldr	r3, [pc, #664]	; (8009100 <PxMessagingTask+0xc6c>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d01e      	beq.n	8008eaa <PxMessagingTask+0xa16>
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d019      	beq.n	8008ea4 <PxMessagingTask+0xa10>
				ForwardReceivedMessage(port);
 8008e70:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e72:	f7ff f95b 	bl	800812c <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008e76:	4ba5      	ldr	r3, [pc, #660]	; (800910c <PxMessagingTask+0xc78>)
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <PxMessagingTask+0x9f0>
					indMode =IND_SHORT_BLINK;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	4aa6      	ldr	r2, [pc, #664]	; (800911c <PxMessagingTask+0xc88>)
 8008e82:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008e84:	9b08      	ldr	r3, [sp, #32]
 8008e86:	2b19      	cmp	r3, #25
 8008e88:	d07c      	beq.n	8008f84 <PxMessagingTask+0xaf0>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	2b1a      	cmp	r3, #26
 8008e8e:	d100      	bne.n	8008e92 <PxMessagingTask+0x9fe>
 8008e90:	e082      	b.n	8008f98 <PxMessagingTask+0xb04>
 8008e92:	464b      	mov	r3, r9
 8008e94:	5d1f      	ldrb	r7, [r3, r4]
 8008e96:	f7ff fbb5 	bl	8008604 <PxMessagingTask+0x170>
				longMessage =1;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4a9d      	ldr	r2, [pc, #628]	; (8009114 <PxMessagingTask+0xc80>)
 8008e9e:	7013      	strb	r3, [r2, #0]
 8008ea0:	f7ff fb37 	bl	8008512 <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008ea4:	9b08      	ldr	r3, [sp, #32]
 8008ea6:	2b10      	cmp	r3, #16
 8008ea8:	d1e2      	bne.n	8008e70 <PxMessagingTask+0x9dc>
 8008eaa:	464b      	mov	r3, r9
 8008eac:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	d001      	beq.n	8008eb6 <PxMessagingTask+0xa22>
 8008eb2:	f7ff fba7 	bl	8008604 <PxMessagingTask+0x170>
				shift +=4;
 8008eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008eb8:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8008eba:	1b7a      	subs	r2, r7, r5
 8008ebc:	b2d3      	uxtb	r3, r2
 8008ebe:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	2b2d      	cmp	r3, #45	; 0x2d
 8008ec4:	d801      	bhi.n	8008eca <PxMessagingTask+0xa36>
 8008ec6:	f7ff fb87 	bl	80085d8 <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8008eca:	9500      	str	r5, [sp, #0]
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	4652      	mov	r2, sl
 8008ed0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ed2:	9808      	ldr	r0, [sp, #32]
 8008ed4:	f7ff fadc 	bl	8008490 <User_MessagingParser>
 8008ed8:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 8008eda:	2801      	cmp	r0, #1
 8008edc:	d1d9      	bne.n	8008e92 <PxMessagingTask+0x9fe>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008ede:	4652      	mov	r2, sl
 8008ee0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ee2:	9500      	str	r5, [sp, #0]
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	9808      	ldr	r0, [sp, #32]
 8008ee8:	f000 feee 	bl	8009cc8 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008eec:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008eee:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008ef0:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 8008ef2:	2801      	cmp	r0, #1
 8008ef4:	d100      	bne.n	8008ef8 <PxMessagingTask+0xa64>
 8008ef6:	e5e8      	b.n	8008aca <PxMessagingTask+0x636>
 8008ef8:	e7cb      	b.n	8008e92 <PxMessagingTask+0x9fe>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008efa:	9b07      	ldr	r3, [sp, #28]
 8008efc:	2bfe      	cmp	r3, #254	; 0xfe
 8008efe:	d1d6      	bne.n	8008eae <PxMessagingTask+0xa1a>
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	4a80      	ldr	r2, [pc, #512]	; (8009104 <PxMessagingTask+0xc70>)
 8008f04:	1b1d      	subs	r5, r3, r4
 8008f06:	00ed      	lsls	r5, r5, #3
 8008f08:	445d      	add	r5, fp
 8008f0a:	19eb      	adds	r3, r5, r7
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 8008f12:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d101      	bne.n	8008f1c <PxMessagingTask+0xa88>
 8008f18:	f7ff fb74 	bl	8008604 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008f1c:	4a79      	ldr	r2, [pc, #484]	; (8009104 <PxMessagingTask+0xc70>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008f1e:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008f20:	7193      	strb	r3, [r2, #6]
 8008f22:	4a7f      	ldr	r2, [pc, #508]	; (8009120 <PxMessagingTask+0xc8c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008f24:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008f26:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008f28:	f7ff f8bc 	bl	80080a4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	2200      	movs	r2, #0
 8008f30:	5d1f      	ldrb	r7, [r3, r4]
 8008f32:	19eb      	adds	r3, r5, r7
 8008f34:	3b01      	subs	r3, #1
 8008f36:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008f38:	1eb8      	subs	r0, r7, #2
 8008f3a:	5c2e      	ldrb	r6, [r5, r0]
 8008f3c:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d01d      	beq.n	8008f7e <PxMessagingTask+0xaea>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008f42:	4b6f      	ldr	r3, [pc, #444]	; (8009100 <PxMessagingTask+0xc6c>)
 8008f44:	1b80      	subs	r0, r0, r6
 8008f46:	7819      	ldrb	r1, [r3, #0]
 8008f48:	5c2b      	ldrb	r3, [r5, r0]
 8008f4a:	428b      	cmp	r3, r1
 8008f4c:	d101      	bne.n	8008f52 <PxMessagingTask+0xabe>
 8008f4e:	f7ff fb39 	bl	80085c4 <PxMessagingTask+0x130>
 8008f52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f54:	465a      	mov	r2, fp
 8008f56:	46ac      	mov	ip, r5
 8008f58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f5a:	3201      	adds	r2, #1
 8008f5c:	1e75      	subs	r5, r6, #1
 8008f5e:	4462      	add	r2, ip
 8008f60:	b2ed      	uxtb	r5, r5
 8008f62:	181b      	adds	r3, r3, r0
 8008f64:	1952      	adds	r2, r2, r5
 8008f66:	445b      	add	r3, fp
 8008f68:	1812      	adds	r2, r2, r0
 8008f6a:	e006      	b.n	8008f7a <PxMessagingTask+0xae6>
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	1e58      	subs	r0, r3, #1
 8008f70:	7800      	ldrb	r0, [r0, #0]
 8008f72:	4288      	cmp	r0, r1
 8008f74:	d101      	bne.n	8008f7a <PxMessagingTask+0xae6>
 8008f76:	f7ff fb25 	bl	80085c4 <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d1f6      	bne.n	8008f6c <PxMessagingTask+0xad8>
					result =BOS_ERR_WrongID;
 8008f7e:	2666      	movs	r6, #102	; 0x66
 8008f80:	f7ff fb40 	bl	8008604 <PxMessagingTask+0x170>
					Delay_ms(100);
 8008f84:	2064      	movs	r0, #100	; 0x64
 8008f86:	f005 fe7b 	bl	800ec80 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008f8a:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f8e:	9907      	ldr	r1, [sp, #28]
 8008f90:	4650      	mov	r0, sl
 8008f92:	f000 fe1f 	bl	8009bd4 <remoteBootloaderUpdate>
 8008f96:	e77c      	b.n	8008e92 <PxMessagingTask+0x9fe>
					Delay_ms(100);
 8008f98:	2064      	movs	r0, #100	; 0x64
 8008f9a:	f005 fe71 	bl	800ec80 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f9e:	9b06      	ldr	r3, [sp, #24]
 8008fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fa2:	1b1b      	subs	r3, r3, r4
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	445b      	add	r3, fp
 8008fa8:	5c9b      	ldrb	r3, [r3, r2]
 8008faa:	e7ef      	b.n	8008f8c <PxMessagingTask+0xaf8>
								ADCSelectChannel(ADCPort,"top");
 8008fac:	495d      	ldr	r1, [pc, #372]	; (8009124 <PxMessagingTask+0xc90>)
 8008fae:	f002 fd0d 	bl	800b9cc <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8008fb2:	4b5d      	ldr	r3, [pc, #372]	; (8009128 <PxMessagingTask+0xc94>)
 8008fb4:	4a5c      	ldr	r2, [pc, #368]	; (8009128 <PxMessagingTask+0xc94>)
 8008fb6:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8008fb8:	3234      	adds	r2, #52	; 0x34
 8008fba:	b2c0      	uxtb	r0, r0
 8008fbc:	4959      	ldr	r1, [pc, #356]	; (8009124 <PxMessagingTask+0xc90>)
 8008fbe:	f002 fd5d 	bl	800ba7c <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008fc2:	4959      	ldr	r1, [pc, #356]	; (8009128 <PxMessagingTask+0xc94>)
 8008fc4:	4858      	ldr	r0, [pc, #352]	; (8009128 <PxMessagingTask+0xc94>)
 8008fc6:	3138      	adds	r1, #56	; 0x38
 8008fc8:	303c      	adds	r0, #60	; 0x3c
 8008fca:	f002 fb2d 	bl	800b628 <ReadTempAndVref>
 8008fce:	f7ff fb82 	bl	80086d6 <PxMessagingTask+0x242>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fd4:	f009 f997 	bl	8012306 <memcpy>
								longMessageLastPtr =0;
 8008fd8:	4b4f      	ldr	r3, [pc, #316]	; (8009118 <PxMessagingTask+0xc84>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fda:	4854      	ldr	r0, [pc, #336]	; (800912c <PxMessagingTask+0xc98>)
								longMessageLastPtr =0;
 8008fdc:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 8008fde:	4b54      	ldr	r3, [pc, #336]	; (8009130 <PxMessagingTask+0xc9c>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fe0:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 8008fe2:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	001a      	movs	r2, r3
 8008fe8:	0019      	movs	r1, r3
 8008fea:	f005 faa5 	bl	800e538 <xTaskGenericNotify>
 8008fee:	464b      	mov	r3, r9
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	5d1f      	ldrb	r7, [r3, r4]
 8008ff4:	f7ff fb06 	bl	8008604 <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ffc:	1a9a      	subs	r2, r3, r2
 8008ffe:	3a02      	subs	r2, #2
 8009000:	f009 f981 	bl	8012306 <memcpy>
 8009004:	e6c8      	b.n	8008d98 <PxMessagingTask+0x904>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8009006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009008:	483e      	ldr	r0, [pc, #248]	; (8009104 <PxMessagingTask+0xc70>)
 800900a:	3a01      	subs	r2, #1
 800900c:	3058      	adds	r0, #88	; 0x58
 800900e:	f009 f97a 	bl	8012306 <memcpy>
 8009012:	e6c1      	b.n	8008d98 <PxMessagingTask+0x904>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009014:	9905      	ldr	r1, [sp, #20]
 8009016:	1949      	adds	r1, r1, r5
 8009018:	788b      	ldrb	r3, [r1, #2]
 800901a:	78ce      	ldrb	r6, [r1, #3]
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	0436      	lsls	r6, r6, #16
 8009020:	199b      	adds	r3, r3, r6
 8009022:	189b      	adds	r3, r3, r2
 8009024:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009026:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009028:	0612      	lsls	r2, r2, #24
 800902a:	189b      	adds	r3, r3, r2
 800902c:	4a3e      	ldr	r2, [pc, #248]	; (8009128 <PxMessagingTask+0xc94>)
 800902e:	60d3      	str	r3, [r2, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009030:	5c0b      	ldrb	r3, [r1, r0]
 8009032:	5dca      	ldrb	r2, [r1, r7]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	0412      	lsls	r2, r2, #16
 8009038:	189b      	adds	r3, r3, r2
 800903a:	1d6a      	adds	r2, r5, #5
 800903c:	5c8a      	ldrb	r2, [r1, r2]
 800903e:	189b      	adds	r3, r3, r2
 8009040:	4652      	mov	r2, sl
 8009042:	5c8a      	ldrb	r2, [r1, r2]
 8009044:	0612      	lsls	r2, r2, #24
 8009046:	189b      	adds	r3, r3, r2
 8009048:	4a37      	ldr	r2, [pc, #220]	; (8009128 <PxMessagingTask+0xc94>)
 800904a:	6113      	str	r3, [r2, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800904c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800904e:	9a07      	ldr	r2, [sp, #28]
 8009050:	5ccb      	ldrb	r3, [r1, r3]
 8009052:	5c8a      	ldrb	r2, [r1, r2]
 8009054:	021b      	lsls	r3, r3, #8
 8009056:	0412      	lsls	r2, r2, #16
 8009058:	189b      	adds	r3, r3, r2
 800905a:	9a08      	ldr	r2, [sp, #32]
 800905c:	5c8a      	ldrb	r2, [r1, r2]
 800905e:	189b      	adds	r3, r3, r2
 8009060:	4662      	mov	r2, ip
 8009062:	5c8a      	ldrb	r2, [r1, r2]
 8009064:	0612      	lsls	r2, r2, #24
 8009066:	189b      	adds	r3, r3, r2
 8009068:	4a2f      	ldr	r2, [pc, #188]	; (8009128 <PxMessagingTask+0xc94>)
 800906a:	6153      	str	r3, [r2, #20]
									break;
 800906c:	f7ff fb12 	bl	8008694 <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009070:	9905      	ldr	r1, [sp, #20]
 8009072:	1949      	adds	r1, r1, r5
 8009074:	788b      	ldrb	r3, [r1, #2]
 8009076:	78ce      	ldrb	r6, [r1, #3]
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	0436      	lsls	r6, r6, #16
 800907c:	199b      	adds	r3, r3, r6
 800907e:	189b      	adds	r3, r3, r2
 8009080:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009082:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009084:	0612      	lsls	r2, r2, #24
 8009086:	189b      	adds	r3, r3, r2
 8009088:	4a27      	ldr	r2, [pc, #156]	; (8009128 <PxMessagingTask+0xc94>)
 800908a:	6193      	str	r3, [r2, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800908c:	5c0b      	ldrb	r3, [r1, r0]
 800908e:	5dca      	ldrb	r2, [r1, r7]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	0412      	lsls	r2, r2, #16
 8009094:	189b      	adds	r3, r3, r2
 8009096:	1d6a      	adds	r2, r5, #5
 8009098:	5c8a      	ldrb	r2, [r1, r2]
 800909a:	189b      	adds	r3, r3, r2
 800909c:	4652      	mov	r2, sl
 800909e:	5c8a      	ldrb	r2, [r1, r2]
 80090a0:	0612      	lsls	r2, r2, #24
 80090a2:	189b      	adds	r3, r3, r2
 80090a4:	4a20      	ldr	r2, [pc, #128]	; (8009128 <PxMessagingTask+0xc94>)
 80090a6:	61d3      	str	r3, [r2, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80090a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090aa:	9a07      	ldr	r2, [sp, #28]
 80090ac:	5ccb      	ldrb	r3, [r1, r3]
 80090ae:	5c8a      	ldrb	r2, [r1, r2]
 80090b0:	021b      	lsls	r3, r3, #8
 80090b2:	0412      	lsls	r2, r2, #16
 80090b4:	189b      	adds	r3, r3, r2
 80090b6:	9a08      	ldr	r2, [sp, #32]
 80090b8:	5c8a      	ldrb	r2, [r1, r2]
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	4662      	mov	r2, ip
 80090be:	5c8a      	ldrb	r2, [r1, r2]
 80090c0:	0612      	lsls	r2, r2, #24
 80090c2:	189b      	adds	r3, r3, r2
 80090c4:	4a18      	ldr	r2, [pc, #96]	; (8009128 <PxMessagingTask+0xc94>)
 80090c6:	6213      	str	r3, [r2, #32]
									break;
 80090c8:	f7ff fae4 	bl	8008694 <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d001      	beq.n	80090d4 <PxMessagingTask+0xc40>
 80090d0:	f7ff fa95 	bl	80085fe <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 80090d4:	2600      	movs	r6, #0
 80090d6:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <PxMessagingTask+0xc7c>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090d8:	4a0d      	ldr	r2, [pc, #52]	; (8009110 <PxMessagingTask+0xc7c>)
								messageParams[0] =0; /* change own ID */
 80090da:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090dc:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090de:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090e0:	469c      	mov	ip, r3
 80090e2:	4465      	add	r5, ip
 80090e4:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090e6:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090e8:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090ea:	2303      	movs	r3, #3
 80090ec:	0032      	movs	r2, r6
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	330d      	adds	r3, #13
 80090f2:	f7fe fddb 	bl	8007cac <SendMessageFromPort>
 80090f6:	464b      	mov	r3, r9
 80090f8:	5d1f      	ldrb	r7, [r3, r4]
 80090fa:	f7ff fa83 	bl	8008604 <PxMessagingTask+0x170>
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	20000a98 	.word	0x20000a98
 8009104:	20001fd4 	.word	0x20001fd4
 8009108:	20000c28 	.word	0x20000c28
 800910c:	20006a00 	.word	0x20006a00
 8009110:	20000b3c 	.word	0x20000b3c
 8009114:	20000c4c 	.word	0x20000c4c
 8009118:	20000c4a 	.word	0x20000c4a
 800911c:	2000117e 	.word	0x2000117e
 8009120:	20000c48 	.word	0x20000c48
 8009124:	08017e0c 	.word	0x08017e0c
 8009128:	20002054 	.word	0x20002054
 800912c:	20001ecc 	.word	0x20001ecc
 8009130:	20000c3c 	.word	0x20000c3c
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009134:	4652      	mov	r2, sl
 8009136:	230a      	movs	r3, #10
 8009138:	4353      	muls	r3, r2
 800913a:	4adf      	ldr	r2, [pc, #892]	; (80094b8 <PxMessagingTask+0x1024>)
 800913c:	48df      	ldr	r0, [pc, #892]	; (80094bc <PxMessagingTask+0x1028>)
 800913e:	4694      	mov	ip, r2
 8009140:	49df      	ldr	r1, [pc, #892]	; (80094c0 <PxMessagingTask+0x102c>)
 8009142:	4463      	add	r3, ip
 8009144:	4652      	mov	r2, sl
 8009146:	3008      	adds	r0, #8
 8009148:	f009 fae0 	bl	801270c <sprintf>
 800914c:	e526      	b.n	8008b9c <PxMessagingTask+0x708>
 800914e:	2600      	movs	r6, #0
 8009150:	f7ff fa58 	bl	8008604 <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009154:	2a01      	cmp	r2, #1
 8009156:	d901      	bls.n	800915c <PxMessagingTask+0xcc8>
 8009158:	f7ff fb45 	bl	80087e6 <PxMessagingTask+0x352>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800915c:	9b05      	ldr	r3, [sp, #20]
 800915e:	4ad9      	ldr	r2, [pc, #868]	; (80094c4 <PxMessagingTask+0x1030>)
 8009160:	5d5b      	ldrb	r3, [r3, r5]
 8009162:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009164:	2b08      	cmp	r3, #8
 8009166:	d901      	bls.n	800916c <PxMessagingTask+0xcd8>
 8009168:	f7ff fb3d 	bl	80087e6 <PxMessagingTask+0x352>
 800916c:	4ad6      	ldr	r2, [pc, #856]	; (80094c8 <PxMessagingTask+0x1034>)
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	58d3      	ldr	r3, [r2, r3]
 8009172:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009174:	2338      	movs	r3, #56	; 0x38
 8009176:	46aa      	mov	sl, r5
 8009178:	435c      	muls	r4, r3
 800917a:	445c      	add	r4, fp
 800917c:	1965      	adds	r5, r4, r5
 800917e:	0007      	movs	r7, r0
 8009180:	7a29      	ldrb	r1, [r5, #8]
 8009182:	20e4      	movs	r0, #228	; 0xe4
 8009184:	f001 fc50 	bl	800aa28 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009188:	4653      	mov	r3, sl
 800918a:	9a08      	ldr	r2, [sp, #32]
 800918c:	5ce3      	ldrb	r3, [r4, r3]
 800918e:	5ca1      	ldrb	r1, [r4, r2]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	18c9      	adds	r1, r1, r3
 8009194:	b289      	uxth	r1, r1
 8009196:	20e5      	movs	r0, #229	; 0xe5
 8009198:	f001 fc46 	bl	800aa28 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800919c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80091a0:	5ce3      	ldrb	r3, [r4, r3]
 80091a2:	5ca1      	ldrb	r1, [r4, r2]
 80091a4:	021b      	lsls	r3, r3, #8
 80091a6:	18c9      	adds	r1, r1, r3
 80091a8:	b289      	uxth	r1, r1
 80091aa:	20e6      	movs	r0, #230	; 0xe6
 80091ac:	f001 fc3c 	bl	800aa28 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80091b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091b4:	5ce3      	ldrb	r3, [r4, r3]
 80091b6:	5ca1      	ldrb	r1, [r4, r2]
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	18c9      	adds	r1, r1, r3
 80091bc:	b289      	uxth	r1, r1
 80091be:	20e7      	movs	r0, #231	; 0xe7
 80091c0:	f001 fc32 	bl	800aa28 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80091c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091c8:	5ce3      	ldrb	r3, [r4, r3]
 80091ca:	5ca1      	ldrb	r1, [r4, r2]
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	18c9      	adds	r1, r1, r3
 80091d0:	b289      	uxth	r1, r1
 80091d2:	20e8      	movs	r0, #232	; 0xe8
 80091d4:	f001 fc28 	bl	800aa28 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 80091d8:	5de3      	ldrb	r3, [r4, r7]
 80091da:	7aa9      	ldrb	r1, [r5, #10]
 80091dc:	021b      	lsls	r3, r3, #8
 80091de:	18c9      	adds	r1, r1, r3
 80091e0:	b289      	uxth	r1, r1
 80091e2:	20e9      	movs	r0, #233	; 0xe9
 80091e4:	f001 fc20 	bl	800aa28 <EE_WriteVariable>
								if(numOfParams == 19)
 80091e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ea:	2b13      	cmp	r3, #19
 80091ec:	d013      	beq.n	8009216 <PxMessagingTask+0xd82>
								if(numOfParams == 21)
 80091ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f0:	2b15      	cmp	r3, #21
 80091f2:	d107      	bne.n	8009204 <PxMessagingTask+0xd70>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80091f4:	7b6b      	ldrb	r3, [r5, #13]
 80091f6:	7ba9      	ldrb	r1, [r5, #14]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	18c9      	adds	r1, r1, r3
 80091fc:	b289      	uxth	r1, r1
 80091fe:	20eb      	movs	r0, #235	; 0xeb
 8009200:	f001 fc12 	bl	800aa28 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	4bb0      	ldr	r3, [pc, #704]	; (80094cc <PxMessagingTask+0x1038>)
 800920a:	4ab1      	ldr	r2, [pc, #708]	; (80094d0 <PxMessagingTask+0x103c>)
 800920c:	60da      	str	r2, [r3, #12]
 800920e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	e7fd      	b.n	8009212 <PxMessagingTask+0xd7e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8009216:	9b07      	ldr	r3, [sp, #28]
 8009218:	7b29      	ldrb	r1, [r5, #12]
 800921a:	5ce3      	ldrb	r3, [r4, r3]
 800921c:	20ea      	movs	r0, #234	; 0xea
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	18c9      	adds	r1, r1, r3
 8009222:	b289      	uxth	r1, r1
 8009224:	f001 fc00 	bl	800aa28 <EE_WriteVariable>
 8009228:	e7ec      	b.n	8009204 <PxMessagingTask+0xd70>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	49a9      	ldr	r1, [pc, #676]	; (80094d4 <PxMessagingTask+0x1040>)
 800922e:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	0a12      	lsrs	r2, r2, #8
 8009234:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	0c12      	lsrs	r2, r2, #16
 800923a:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 800923c:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	0e1b      	lsrs	r3, r3, #24
 8009242:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009244:	211f      	movs	r1, #31
 8009246:	e440      	b.n	8008aca <PxMessagingTask+0x636>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800924a:	f009 f85c 	bl	8012306 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800924e:	2116      	movs	r1, #22
 8009250:	0030      	movs	r0, r6
 8009252:	f7f6 ff7d 	bl	8000150 <__udivsi3>
 8009256:	4ba0      	ldr	r3, [pc, #640]	; (80094d8 <PxMessagingTask+0x1044>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009258:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800925a:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800925c:	499f      	ldr	r1, [pc, #636]	; (80094dc <PxMessagingTask+0x1048>)
 800925e:	48a0      	ldr	r0, [pc, #640]	; (80094e0 <PxMessagingTask+0x104c>)
 8009260:	f009 f851 	bl	8012306 <memcpy>
								longMessageLastPtr =0;
 8009264:	4b9f      	ldr	r3, [pc, #636]	; (80094e4 <PxMessagingTask+0x1050>)
 8009266:	2600      	movs	r6, #0
 8009268:	801d      	strh	r5, [r3, #0]
 800926a:	f7ff f9cb 	bl	8008604 <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800926e:	7a28      	ldrb	r0, [r5, #8]
 8009270:	0032      	movs	r2, r6
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	0039      	movs	r1, r7
 8009276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009278:	f7fe fc24 	bl	8007ac4 <SetupDMAStreams>
 800927c:	464b      	mov	r3, r9
 800927e:	5d1f      	ldrb	r7, [r3, r4]
 8009280:	2300      	movs	r3, #0
 8009282:	930b      	str	r3, [sp, #44]	; 0x2c
 8009284:	001e      	movs	r6, r3
 8009286:	f7ff f9bd 	bl	8008604 <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 800928a:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 800928c:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 800928e:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 8009290:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 8009292:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 8009294:	f003 fd16 	bl	800ccc4 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009298:	2d07      	cmp	r5, #7
 800929a:	d1f7      	bne.n	800928c <PxMessagingTask+0xdf8>
 800929c:	e7ee      	b.n	800927c <PxMessagingTask+0xde8>
								temp =cMessage[port - 1][13 + shift];
 800929e:	9a05      	ldr	r2, [sp, #20]
 80092a0:	1952      	adds	r2, r2, r5
 80092a2:	7b51      	ldrb	r1, [r2, #13]
 80092a4:	e4e7      	b.n	8008c76 <PxMessagingTask+0x7e2>
								temp =cMessage[port - 1][15 + shift];
 80092a6:	9a05      	ldr	r2, [sp, #20]
 80092a8:	1952      	adds	r2, r2, r5
 80092aa:	7bd1      	ldrb	r1, [r2, #15]
 80092ac:	e4e3      	b.n	8008c76 <PxMessagingTask+0x7e2>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80092ae:	881a      	ldrh	r2, [r3, #0]
 80092b0:	4988      	ldr	r1, [pc, #544]	; (80094d4 <PxMessagingTask+0x1040>)
 80092b2:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80092b4:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80092b6:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80092b8:	b21b      	sxth	r3, r3
 80092ba:	121b      	asrs	r3, r3, #8
 80092bc:	704b      	strb	r3, [r1, #1]
 80092be:	e7c1      	b.n	8009244 <PxMessagingTask+0xdb0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80092c0:	881a      	ldrh	r2, [r3, #0]
 80092c2:	4984      	ldr	r1, [pc, #528]	; (80094d4 <PxMessagingTask+0x1040>)
 80092c4:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80092c6:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 80092c8:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	704b      	strb	r3, [r1, #1]
 80092ce:	e7b9      	b.n	8009244 <PxMessagingTask+0xdb0>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80092d0:	781a      	ldrb	r2, [r3, #0]
 80092d2:	4980      	ldr	r1, [pc, #512]	; (80094d4 <PxMessagingTask+0x1040>)
 80092d4:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80092d6:	785a      	ldrb	r2, [r3, #1]
 80092d8:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80092da:	789a      	ldrb	r2, [r3, #2]
 80092dc:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80092de:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 80092e0:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80092e2:	70cb      	strb	r3, [r1, #3]
 80092e4:	e7ae      	b.n	8009244 <PxMessagingTask+0xdb0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d100      	bne.n	80092ec <PxMessagingTask+0xe58>
 80092ea:	e0be      	b.n	800946a <PxMessagingTask+0xfd6>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80092ec:	d801      	bhi.n	80092f2 <PxMessagingTask+0xe5e>
 80092ee:	f7ff f986 	bl	80085fe <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80092f2:	260f      	movs	r6, #15
 80092f4:	3b04      	subs	r3, #4
 80092f6:	4a7c      	ldr	r2, [pc, #496]	; (80094e8 <PxMessagingTask+0x1054>)
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	58d2      	ldr	r2, [r2, r3]
 80092fc:	4b75      	ldr	r3, [pc, #468]	; (80094d4 <PxMessagingTask+0x1040>)
 80092fe:	4016      	ands	r6, r2
 8009300:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8009302:	d100      	bne.n	8009306 <PxMessagingTask+0xe72>
 8009304:	e0a8      	b.n	8009458 <PxMessagingTask+0xfc4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009306:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 8009308:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800930a:	0c12      	lsrs	r2, r2, #16
 800930c:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 800930e:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009310:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 8009312:	2e07      	cmp	r6, #7
 8009314:	d901      	bls.n	800931a <PxMessagingTask+0xe86>
 8009316:	f7ff f972 	bl	80085fe <PxMessagingTask+0x16a>
 800931a:	4974      	ldr	r1, [pc, #464]	; (80094ec <PxMessagingTask+0x1058>)
 800931c:	00b6      	lsls	r6, r6, #2
 800931e:	5989      	ldr	r1, [r1, r6]
 8009320:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009322:	2b00      	cmp	r3, #0
 8009324:	d031      	beq.n	800938a <PxMessagingTask+0xef6>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009326:	9b05      	ldr	r3, [sp, #20]
 8009328:	195a      	adds	r2, r3, r5
 800932a:	78d3      	ldrb	r3, [r2, #3]
 800932c:	7891      	ldrb	r1, [r2, #2]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	185b      	adds	r3, r3, r1
 8009332:	7911      	ldrb	r1, [r2, #4]
 8009334:	0409      	lsls	r1, r1, #16
 8009336:	7952      	ldrb	r2, [r2, #5]
 8009338:	185b      	adds	r3, r3, r1
 800933a:	0612      	lsls	r2, r2, #24
 800933c:	189b      	adds	r3, r3, r2
 800933e:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009340:	9905      	ldr	r1, [sp, #20]
 8009342:	9807      	ldr	r0, [sp, #28]
 8009344:	5d4b      	ldrb	r3, [r1, r5]
 8009346:	5c09      	ldrb	r1, [r1, r0]
 8009348:	200f      	movs	r0, #15
 800934a:	3b01      	subs	r3, #1
 800934c:	4a66      	ldr	r2, [pc, #408]	; (80094e8 <PxMessagingTask+0x1054>)
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	58d2      	ldr	r2, [r2, r3]
 8009352:	4010      	ands	r0, r2
 8009354:	4288      	cmp	r0, r1
 8009356:	d008      	beq.n	800936a <PxMessagingTask+0xed6>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009358:	4865      	ldr	r0, [pc, #404]	; (80094f0 <PxMessagingTask+0x105c>)
 800935a:	4684      	mov	ip, r0
 800935c:	4461      	add	r1, ip
 800935e:	400a      	ands	r2, r1
 8009360:	4961      	ldr	r1, [pc, #388]	; (80094e8 <PxMessagingTask+0x1054>)
 8009362:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009364:	2314      	movs	r3, #20
 8009366:	4a63      	ldr	r2, [pc, #396]	; (80094f4 <PxMessagingTask+0x1060>)
 8009368:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800936a:	2240      	movs	r2, #64	; 0x40
 800936c:	4b62      	ldr	r3, [pc, #392]	; (80094f8 <PxMessagingTask+0x1064>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	4393      	bics	r3, r2
 8009372:	2b20      	cmp	r3, #32
 8009374:	d001      	beq.n	800937a <PxMessagingTask+0xee6>
 8009376:	f7ff f942 	bl	80085fe <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 800937a:	4b5e      	ldr	r3, [pc, #376]	; (80094f4 <PxMessagingTask+0x1060>)
 800937c:	4a55      	ldr	r2, [pc, #340]	; (80094d4 <PxMessagingTask+0x1040>)
 800937e:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009380:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 8009382:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009384:	2201      	movs	r2, #1
 8009386:	f7ff fba0 	bl	8008aca <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800938a:	2004      	movs	r0, #4
 800938c:	f008 fd6e 	bl	8011e6c <malloc>
												if(temp32 != 0){
 8009390:	2800      	cmp	r0, #0
 8009392:	d00f      	beq.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009394:	0403      	lsls	r3, r0, #16
 8009396:	4a54      	ldr	r2, [pc, #336]	; (80094e8 <PxMessagingTask+0x1054>)
 8009398:	3306      	adds	r3, #6
 800939a:	5193      	str	r3, [r2, r6]
 800939c:	e7c3      	b.n	8009326 <PxMessagingTask+0xe92>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00c      	beq.n	80093bc <PxMessagingTask+0xf28>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	195a      	adds	r2, r3, r5
 80093a6:	78d3      	ldrb	r3, [r2, #3]
 80093a8:	7911      	ldrb	r1, [r2, #4]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	0409      	lsls	r1, r1, #16
 80093ae:	185b      	adds	r3, r3, r1
 80093b0:	7891      	ldrb	r1, [r2, #2]
 80093b2:	e7c0      	b.n	8009336 <PxMessagingTask+0xea2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80093b4:	2312      	movs	r3, #18
 80093b6:	4a4f      	ldr	r2, [pc, #316]	; (80094f4 <PxMessagingTask+0x1060>)
 80093b8:	7013      	strb	r3, [r2, #0]
 80093ba:	e7c1      	b.n	8009340 <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80093bc:	2004      	movs	r0, #4
 80093be:	f008 fd55 	bl	8011e6c <malloc>
												if(temp32 != 0){
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0f6      	beq.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80093c6:	0403      	lsls	r3, r0, #16
 80093c8:	4a47      	ldr	r2, [pc, #284]	; (80094e8 <PxMessagingTask+0x1054>)
 80093ca:	3305      	adds	r3, #5
 80093cc:	5193      	str	r3, [r2, r6]
 80093ce:	e7e8      	b.n	80093a2 <PxMessagingTask+0xf0e>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4940      	ldr	r1, [pc, #256]	; (80094d4 <PxMessagingTask+0x1040>)
 80093d4:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	0a12      	lsrs	r2, r2, #8
 80093da:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	0c12      	lsrs	r2, r2, #16
 80093e0:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093e2:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80093e4:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093e6:	0e1b      	lsrs	r3, r3, #24
 80093e8:	710b      	strb	r3, [r1, #4]
 80093ea:	e72b      	b.n	8009244 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80093ec:	881a      	ldrh	r2, [r3, #0]
 80093ee:	4939      	ldr	r1, [pc, #228]	; (80094d4 <PxMessagingTask+0x1040>)
 80093f0:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093f2:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093f4:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093f6:	b21b      	sxth	r3, r3
 80093f8:	121b      	asrs	r3, r3, #8
 80093fa:	708b      	strb	r3, [r1, #2]
 80093fc:	e722      	b.n	8009244 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	4934      	ldr	r1, [pc, #208]	; (80094d4 <PxMessagingTask+0x1040>)
 8009402:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009404:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 8009406:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009408:	0a1b      	lsrs	r3, r3, #8
 800940a:	708b      	strb	r3, [r1, #2]
 800940c:	e71a      	b.n	8009244 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 800940e:	4a31      	ldr	r2, [pc, #196]	; (80094d4 <PxMessagingTask+0x1040>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009414:	2202      	movs	r2, #2
 8009416:	e715      	b.n	8009244 <PxMessagingTask+0xdb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	492e      	ldr	r1, [pc, #184]	; (80094d4 <PxMessagingTask+0x1040>)
 800941c:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	1212      	asrs	r2, r2, #8
 8009422:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	1412      	asrs	r2, r2, #16
 8009428:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800942a:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800942c:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800942e:	161b      	asrs	r3, r3, #24
 8009430:	710b      	strb	r3, [r1, #4]
 8009432:	e707      	b.n	8009244 <PxMessagingTask+0xdb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	4927      	ldr	r1, [pc, #156]	; (80094d4 <PxMessagingTask+0x1040>)
 8009438:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800943a:	4b30      	ldr	r3, [pc, #192]	; (80094fc <PxMessagingTask+0x1068>)
 800943c:	18d3      	adds	r3, r2, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009442:	4b2f      	ldr	r3, [pc, #188]	; (8009500 <PxMessagingTask+0x106c>)
 8009444:	18d3      	adds	r3, r2, r3
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800944a:	4b2e      	ldr	r3, [pc, #184]	; (8009504 <PxMessagingTask+0x1070>)
 800944c:	469c      	mov	ip, r3
 800944e:	4462      	add	r2, ip
 8009450:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 8009452:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009454:	710b      	strb	r3, [r1, #4]
 8009456:	e6f5      	b.n	8009244 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 8009458:	2201      	movs	r2, #1
 800945a:	211f      	movs	r1, #31
 800945c:	4650      	mov	r0, sl
 800945e:	f7fe fe85 	bl	800816c <SendMessageToModule>
 8009462:	464b      	mov	r3, r9
 8009464:	5d1f      	ldrb	r7, [r3, r4]
 8009466:	f7ff f8cd 	bl	8008604 <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	2600      	movs	r6, #0
 800946e:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009472:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009474:	469c      	mov	ip, r3
 8009476:	1c68      	adds	r0, r5, #1
 8009478:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800947a:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800947c:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800947e:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009480:	f7fa f962 	bl	8003748 <IsModuleParameter>
 8009484:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 8009486:	42b0      	cmp	r0, r6
 8009488:	d100      	bne.n	800948c <PxMessagingTask+0xff8>
 800948a:	e0a4      	b.n	80095d6 <PxMessagingTask+0x1142>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800948c:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800948e:	491e      	ldr	r1, [pc, #120]	; (8009508 <PxMessagingTask+0x1074>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009492:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009494:	3b01      	subs	r3, #1
 8009496:	435a      	muls	r2, r3
 8009498:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <PxMessagingTask+0x1074>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 800949a:	490e      	ldr	r1, [pc, #56]	; (80094d4 <PxMessagingTask+0x1040>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800949c:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800949e:	4462      	add	r2, ip
 80094a0:	7912      	ldrb	r2, [r2, #4]
 80094a2:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 80094a4:	3a01      	subs	r2, #1
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	2a07      	cmp	r2, #7
 80094aa:	d900      	bls.n	80094ae <PxMessagingTask+0x101a>
 80094ac:	e4f1      	b.n	8008e92 <PxMessagingTask+0x9fe>
 80094ae:	4917      	ldr	r1, [pc, #92]	; (800950c <PxMessagingTask+0x1078>)
 80094b0:	0092      	lsls	r2, r2, #2
 80094b2:	588a      	ldr	r2, [r1, r2]
 80094b4:	4697      	mov	pc, r2
 80094b6:	46c0      	nop			; (mov r8, r8)
 80094b8:	20000dfc 	.word	0x20000dfc
 80094bc:	20001fd4 	.word	0x20001fd4
 80094c0:	0801892c 	.word	0x0801892c
 80094c4:	20000032 	.word	0x20000032
 80094c8:	08016fc4 	.word	0x08016fc4
 80094cc:	e000ed00 	.word	0xe000ed00
 80094d0:	05fa0004 	.word	0x05fa0004
 80094d4:	20000b3c 	.word	0x20000b3c
 80094d8:	20000008 	.word	0x20000008
 80094dc:	20002098 	.word	0x20002098
 80094e0:	20000f0c 	.word	0x20000f0c
 80094e4:	20000c4a 	.word	0x20000c4a
 80094e8:	20006a08 	.word	0x20006a08
 80094ec:	08016fe8 	.word	0x08016fe8
 80094f0:	0000fff0 	.word	0x0000fff0
 80094f4:	20000c3c 	.word	0x20000c3c
 80094f8:	20006a00 	.word	0x20006a00
 80094fc:	20000001 	.word	0x20000001
 8009500:	20000002 	.word	0x20000002
 8009504:	20000003 	.word	0x20000003
 8009508:	20000094 	.word	0x20000094
 800950c:	08017008 	.word	0x08017008
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009510:	2b00      	cmp	r3, #0
 8009512:	d100      	bne.n	8009516 <PxMessagingTask+0x1082>
 8009514:	e0ce      	b.n	80096b4 <PxMessagingTask+0x1220>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009516:	9b05      	ldr	r3, [sp, #20]
 8009518:	1959      	adds	r1, r3, r5
 800951a:	78ca      	ldrb	r2, [r1, #3]
 800951c:	788b      	ldrb	r3, [r1, #2]
 800951e:	0212      	lsls	r2, r2, #8
 8009520:	189b      	adds	r3, r3, r2
 8009522:	b21b      	sxth	r3, r3
 8009524:	8003      	strh	r3, [r0, #0]
 8009526:	e70b      	b.n	8009340 <PxMessagingTask+0xeac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	49d7      	ldr	r1, [pc, #860]	; (8009888 <PxMessagingTask+0x13f4>)
 800952c:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	1212      	asrs	r2, r2, #8
 8009532:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	1412      	asrs	r2, r2, #16
 8009538:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800953a:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800953c:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800953e:	161b      	asrs	r3, r3, #24
 8009540:	70cb      	strb	r3, [r1, #3]
 8009542:	e67f      	b.n	8009244 <PxMessagingTask+0xdb0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009544:	2b00      	cmp	r3, #0
 8009546:	d100      	bne.n	800954a <PxMessagingTask+0x10b6>
 8009548:	e0df      	b.n	800970a <PxMessagingTask+0x1276>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800954a:	9b05      	ldr	r3, [sp, #20]
 800954c:	195a      	adds	r2, r3, r5
 800954e:	78d3      	ldrb	r3, [r2, #3]
 8009550:	7911      	ldrb	r1, [r2, #4]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	0409      	lsls	r1, r1, #16
 8009556:	185b      	adds	r3, r3, r1
 8009558:	7891      	ldrb	r1, [r2, #2]
 800955a:	7952      	ldrb	r2, [r2, #5]
 800955c:	185b      	adds	r3, r3, r1
 800955e:	0612      	lsls	r2, r2, #24
 8009560:	189b      	adds	r3, r3, r2
 8009562:	4642      	mov	r2, r8
 8009564:	4641      	mov	r1, r8
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	2200      	movs	r2, #0
 800956a:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	e6e7      	b.n	8009340 <PxMessagingTask+0xeac>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009570:	9b05      	ldr	r3, [sp, #20]
 8009572:	4642      	mov	r2, r8
 8009574:	469c      	mov	ip, r3
 8009576:	2301      	movs	r3, #1
 8009578:	4465      	add	r5, ip
 800957a:	56eb      	ldrsb	r3, [r5, r3]
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	17db      	asrs	r3, r3, #31
 8009580:	6053      	str	r3, [r2, #4]
										break;
 8009582:	f7ff f930 	bl	80087e6 <PxMessagingTask+0x352>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00f      	beq.n	80095aa <PxMessagingTask+0x1116>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800958a:	9b05      	ldr	r3, [sp, #20]
 800958c:	1959      	adds	r1, r3, r5
 800958e:	78ca      	ldrb	r2, [r1, #3]
 8009590:	788b      	ldrb	r3, [r1, #2]
 8009592:	0212      	lsls	r2, r2, #8
 8009594:	189b      	adds	r3, r3, r2
 8009596:	b29b      	uxth	r3, r3
 8009598:	8003      	strh	r3, [r0, #0]
 800959a:	e6d1      	b.n	8009340 <PxMessagingTask+0xeac>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800959c:	4aba      	ldr	r2, [pc, #744]	; (8009888 <PxMessagingTask+0x13f4>)
 800959e:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 80095a0:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 80095a2:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 80095a4:	2202      	movs	r2, #2
 80095a6:	f7ff fa90 	bl	8008aca <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 80095aa:	2002      	movs	r0, #2
 80095ac:	f008 fc5e 	bl	8011e6c <malloc>
												if(temp32 != 0){
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d100      	bne.n	80095b6 <PxMessagingTask+0x1122>
 80095b4:	e6fe      	b.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095b6:	0403      	lsls	r3, r0, #16
 80095b8:	4ab4      	ldr	r2, [pc, #720]	; (800988c <PxMessagingTask+0x13f8>)
 80095ba:	3303      	adds	r3, #3
 80095bc:	5193      	str	r3, [r2, r6]
 80095be:	e7e4      	b.n	800958a <PxMessagingTask+0x10f6>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80095c0:	781a      	ldrb	r2, [r3, #0]
 80095c2:	49b1      	ldr	r1, [pc, #708]	; (8009888 <PxMessagingTask+0x13f4>)
 80095c4:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80095ca:	789a      	ldrb	r2, [r3, #2]
 80095cc:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80095ce:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 80095d0:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80095d2:	710b      	strb	r3, [r1, #4]
 80095d4:	e636      	b.n	8009244 <PxMessagingTask+0xdb0>
									SendMessageToModule(src,
 80095d6:	2201      	movs	r2, #1
 80095d8:	211f      	movs	r1, #31
 80095da:	4650      	mov	r0, sl
 80095dc:	f7fe fdc6 	bl	800816c <SendMessageToModule>
 80095e0:	464b      	mov	r3, r9
 80095e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095e4:	5d1f      	ldrb	r7, [r3, r4]
 80095e6:	f7ff f80d 	bl	8008604 <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00c      	beq.n	8009608 <PxMessagingTask+0x1174>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80095ee:	9b05      	ldr	r3, [sp, #20]
 80095f0:	195b      	adds	r3, r3, r5
 80095f2:	789b      	ldrb	r3, [r3, #2]
 80095f4:	b25b      	sxtb	r3, r3
 80095f6:	7003      	strb	r3, [r0, #0]
 80095f8:	e6a2      	b.n	8009340 <PxMessagingTask+0xeac>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <PxMessagingTask+0x118a>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80095fe:	9b05      	ldr	r3, [sp, #20]
 8009600:	195b      	adds	r3, r3, r5
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	7003      	strb	r3, [r0, #0]
 8009606:	e69b      	b.n	8009340 <PxMessagingTask+0xeac>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009608:	2001      	movs	r0, #1
 800960a:	f008 fc2f 	bl	8011e6c <malloc>
												if(temp32 != 0){
 800960e:	2800      	cmp	r0, #0
 8009610:	d100      	bne.n	8009614 <PxMessagingTask+0x1180>
 8009612:	e6cf      	b.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009614:	0403      	lsls	r3, r0, #16
 8009616:	4a9d      	ldr	r2, [pc, #628]	; (800988c <PxMessagingTask+0x13f8>)
 8009618:	3302      	adds	r3, #2
 800961a:	5193      	str	r3, [r2, r6]
 800961c:	e7e7      	b.n	80095ee <PxMessagingTask+0x115a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800961e:	2001      	movs	r0, #1
 8009620:	f008 fc24 	bl	8011e6c <malloc>
												if(temp32 != 0){
 8009624:	2800      	cmp	r0, #0
 8009626:	d100      	bne.n	800962a <PxMessagingTask+0x1196>
 8009628:	e6c4      	b.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800962a:	0403      	lsls	r3, r0, #16
 800962c:	19df      	adds	r7, r3, r7
 800962e:	4b97      	ldr	r3, [pc, #604]	; (800988c <PxMessagingTask+0x13f8>)
 8009630:	519f      	str	r7, [r3, r6]
 8009632:	e7e4      	b.n	80095fe <PxMessagingTask+0x116a>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8009634:	2313      	movs	r3, #19
 8009636:	4a96      	ldr	r2, [pc, #600]	; (8009890 <PxMessagingTask+0x13fc>)
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	e696      	b.n	800936a <PxMessagingTask+0xed6>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800963c:	9b05      	ldr	r3, [sp, #20]
 800963e:	195b      	adds	r3, r3, r5
 8009640:	789e      	ldrb	r6, [r3, #2]
 8009642:	78da      	ldrb	r2, [r3, #3]
 8009644:	0636      	lsls	r6, r6, #24
 8009646:	0412      	lsls	r2, r2, #16
 8009648:	18b6      	adds	r6, r6, r2
 800964a:	795a      	ldrb	r2, [r3, #5]
 800964c:	18b6      	adds	r6, r6, r2
 800964e:	791a      	ldrb	r2, [r3, #4]
 8009650:	0212      	lsls	r2, r2, #8
 8009652:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009654:	22e0      	movs	r2, #224	; 0xe0
 8009656:	0612      	lsls	r2, r2, #24
 8009658:	18b1      	adds	r1, r6, r2
 800965a:	4a8e      	ldr	r2, [pc, #568]	; (8009894 <PxMessagingTask+0x1400>)
 800965c:	4291      	cmp	r1, r2
 800965e:	d900      	bls.n	8009662 <PxMessagingTask+0x11ce>
 8009660:	e0ac      	b.n	80097bc <PxMessagingTask+0x1328>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	3b01      	subs	r3, #1
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b07      	cmp	r3, #7
 800966a:	d900      	bls.n	800966e <PxMessagingTask+0x11da>
 800966c:	e67d      	b.n	800936a <PxMessagingTask+0xed6>
 800966e:	4a8a      	ldr	r2, [pc, #552]	; (8009898 <PxMessagingTask+0x1404>)
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	58d3      	ldr	r3, [r2, r3]
 8009674:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009676:	9b05      	ldr	r3, [sp, #20]
 8009678:	469c      	mov	ip, r3
 800967a:	4465      	add	r5, ip
 800967c:	78ab      	ldrb	r3, [r5, #2]
 800967e:	786a      	ldrb	r2, [r5, #1]
 8009680:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009682:	189b      	adds	r3, r3, r2
 8009684:	4642      	mov	r2, r8
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	17db      	asrs	r3, r3, #31
 800968a:	6053      	str	r3, [r2, #4]
										break;
 800968c:	f7ff f8ab 	bl	80087e6 <PxMessagingTask+0x352>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	469c      	mov	ip, r3
 8009694:	4465      	add	r5, ip
 8009696:	78ab      	ldrb	r3, [r5, #2]
 8009698:	786a      	ldrb	r2, [r5, #1]
 800969a:	021b      	lsls	r3, r3, #8
 800969c:	189b      	adds	r3, r3, r2
 800969e:	78ea      	ldrb	r2, [r5, #3]
 80096a0:	0412      	lsls	r2, r2, #16
 80096a2:	189b      	adds	r3, r3, r2
 80096a4:	792a      	ldrb	r2, [r5, #4]
 80096a6:	0612      	lsls	r2, r2, #24
 80096a8:	e7eb      	b.n	8009682 <PxMessagingTask+0x11ee>
										messageParams[0] =*(__IO uint8_t* )temp32;
 80096aa:	4a77      	ldr	r2, [pc, #476]	; (8009888 <PxMessagingTask+0x13f4>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 80096b0:	2201      	movs	r2, #1
 80096b2:	e5c7      	b.n	8009244 <PxMessagingTask+0xdb0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 80096b4:	2002      	movs	r0, #2
 80096b6:	f008 fbd9 	bl	8011e6c <malloc>
												if(temp32 != 0){
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d100      	bne.n	80096c0 <PxMessagingTask+0x122c>
 80096be:	e679      	b.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80096c0:	0403      	lsls	r3, r0, #16
 80096c2:	4a72      	ldr	r2, [pc, #456]	; (800988c <PxMessagingTask+0x13f8>)
 80096c4:	3304      	adds	r3, #4
 80096c6:	5193      	str	r3, [r2, r6]
 80096c8:	e725      	b.n	8009516 <PxMessagingTask+0x1082>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80096ca:	2310      	movs	r3, #16
 80096cc:	f7ff f850 	bl	8008770 <PxMessagingTask+0x2dc>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80096d0:	9b05      	ldr	r3, [sp, #20]
 80096d2:	469c      	mov	ip, r3
 80096d4:	4465      	add	r5, ip
 80096d6:	78ab      	ldrb	r3, [r5, #2]
 80096d8:	78ea      	ldrb	r2, [r5, #3]
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	0412      	lsls	r2, r2, #16
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	786a      	ldrb	r2, [r5, #1]
 80096e2:	189b      	adds	r3, r3, r2
 80096e4:	792a      	ldrb	r2, [r5, #4]
 80096e6:	0612      	lsls	r2, r2, #24
 80096e8:	189b      	adds	r3, r3, r2
 80096ea:	4642      	mov	r2, r8
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	2300      	movs	r3, #0
 80096f0:	6053      	str	r3, [r2, #4]
										break;
 80096f2:	f7ff f878 	bl	80087e6 <PxMessagingTask+0x352>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	4642      	mov	r2, r8
 80096fa:	469c      	mov	ip, r3
 80096fc:	4465      	add	r5, ip
 80096fe:	786b      	ldrb	r3, [r5, #1]
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	6053      	str	r3, [r2, #4]
										break;
 8009706:	f7ff f86e 	bl	80087e6 <PxMessagingTask+0x352>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800970a:	2004      	movs	r0, #4
 800970c:	f008 fbae 	bl	8011e6c <malloc>
												if(temp32 != 0){
 8009710:	2800      	cmp	r0, #0
 8009712:	d100      	bne.n	8009716 <PxMessagingTask+0x1282>
 8009714:	e64e      	b.n	80093b4 <PxMessagingTask+0xf20>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009716:	0403      	lsls	r3, r0, #16
 8009718:	4a5c      	ldr	r2, [pc, #368]	; (800988c <PxMessagingTask+0x13f8>)
 800971a:	3307      	adds	r3, #7
 800971c:	5193      	str	r3, [r2, r6]
 800971e:	e714      	b.n	800954a <PxMessagingTask+0x10b6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009720:	9b05      	ldr	r3, [sp, #20]
 8009722:	469c      	mov	ip, r3
 8009724:	4465      	add	r5, ip
 8009726:	79eb      	ldrb	r3, [r5, #7]
 8009728:	79aa      	ldrb	r2, [r5, #6]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	189b      	adds	r3, r3, r2
 800972e:	7a2a      	ldrb	r2, [r5, #8]
 8009730:	0412      	lsls	r2, r2, #16
 8009732:	189b      	adds	r3, r3, r2
 8009734:	7a6a      	ldrb	r2, [r5, #9]
 8009736:	0612      	lsls	r2, r2, #24
 8009738:	189b      	adds	r3, r3, r2
 800973a:	6033      	str	r3, [r6, #0]
											break;
 800973c:	e615      	b.n	800936a <PxMessagingTask+0xed6>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	469c      	mov	ip, r3
 8009742:	4465      	add	r5, ip
 8009744:	79eb      	ldrb	r3, [r5, #7]
 8009746:	7a2a      	ldrb	r2, [r5, #8]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	0412      	lsls	r2, r2, #16
 800974c:	189b      	adds	r3, r3, r2
 800974e:	79aa      	ldrb	r2, [r5, #6]
 8009750:	e7ef      	b.n	8009732 <PxMessagingTask+0x129e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	469c      	mov	ip, r3
 8009756:	4465      	add	r5, ip
 8009758:	79ea      	ldrb	r2, [r5, #7]
 800975a:	79ab      	ldrb	r3, [r5, #6]
 800975c:	0212      	lsls	r2, r2, #8
 800975e:	189b      	adds	r3, r3, r2
 8009760:	b21b      	sxth	r3, r3
 8009762:	8033      	strh	r3, [r6, #0]
											break;
 8009764:	e601      	b.n	800936a <PxMessagingTask+0xed6>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009766:	9b05      	ldr	r3, [sp, #20]
 8009768:	469c      	mov	ip, r3
 800976a:	4465      	add	r5, ip
 800976c:	79ea      	ldrb	r2, [r5, #7]
 800976e:	79ab      	ldrb	r3, [r5, #6]
 8009770:	0212      	lsls	r2, r2, #8
 8009772:	189b      	adds	r3, r3, r2
 8009774:	b29b      	uxth	r3, r3
 8009776:	8033      	strh	r3, [r6, #0]
											break;
 8009778:	e5f7      	b.n	800936a <PxMessagingTask+0xed6>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	469c      	mov	ip, r3
 800977e:	2306      	movs	r3, #6
 8009780:	4465      	add	r5, ip
 8009782:	56eb      	ldrsb	r3, [r5, r3]
 8009784:	7033      	strb	r3, [r6, #0]
											break;
 8009786:	e5f0      	b.n	800936a <PxMessagingTask+0xed6>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009788:	9b05      	ldr	r3, [sp, #20]
 800978a:	469c      	mov	ip, r3
 800978c:	4465      	add	r5, ip
 800978e:	79ab      	ldrb	r3, [r5, #6]
 8009790:	7033      	strb	r3, [r6, #0]
											break;
 8009792:	e5ea      	b.n	800936a <PxMessagingTask+0xed6>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009794:	9b05      	ldr	r3, [sp, #20]
 8009796:	4641      	mov	r1, r8
 8009798:	469c      	mov	ip, r3
 800979a:	4465      	add	r5, ip
 800979c:	79eb      	ldrb	r3, [r5, #7]
 800979e:	7a2a      	ldrb	r2, [r5, #8]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	0412      	lsls	r2, r2, #16
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	79aa      	ldrb	r2, [r5, #6]
 80097a8:	189b      	adds	r3, r3, r2
 80097aa:	7a6a      	ldrb	r2, [r5, #9]
 80097ac:	0612      	lsls	r2, r2, #24
 80097ae:	189b      	adds	r3, r3, r2
 80097b0:	4642      	mov	r2, r8
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	2200      	movs	r2, #0
 80097b6:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 80097b8:	6033      	str	r3, [r6, #0]
											break;
 80097ba:	e5d6      	b.n	800936a <PxMessagingTask+0xed6>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80097bc:	23f8      	movs	r3, #248	; 0xf8
 80097be:	4a37      	ldr	r2, [pc, #220]	; (800989c <PxMessagingTask+0x1408>)
 80097c0:	061b      	lsls	r3, r3, #24
 80097c2:	18f3      	adds	r3, r6, r3
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d903      	bls.n	80097d0 <PxMessagingTask+0x133c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 80097c8:	2215      	movs	r2, #21
 80097ca:	4b31      	ldr	r3, [pc, #196]	; (8009890 <PxMessagingTask+0x13fc>)
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	e5cc      	b.n	800936a <PxMessagingTask+0xed6>
									HAL_FLASH_Unlock();
 80097d0:	f006 fbc0 	bl	800ff54 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 80097d4:	9b08      	ldr	r3, [sp, #32]
 80097d6:	2b22      	cmp	r3, #34	; 0x22
 80097d8:	d102      	bne.n	80097e0 <PxMessagingTask+0x134c>
										EraseSector(temp32);
 80097da:	0030      	movs	r0, r6
 80097dc:	f001 fb62 	bl	800aea4 <EraseSector>
									if(responseStatus == BOS_OK){
 80097e0:	4b2b      	ldr	r3, [pc, #172]	; (8009890 <PxMessagingTask+0x13fc>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d110      	bne.n	800980a <PxMessagingTask+0x1376>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 80097e8:	9b05      	ldr	r3, [sp, #20]
 80097ea:	195b      	adds	r3, r3, r5
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b07      	cmp	r3, #7
 80097f4:	d809      	bhi.n	800980a <PxMessagingTask+0x1376>
 80097f6:	4a2a      	ldr	r2, [pc, #168]	; (80098a0 <PxMessagingTask+0x140c>)
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	58d3      	ldr	r3, [r2, r3]
 80097fc:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80097fe:	6833      	ldr	r3, [r6, #0]
 8009800:	3301      	adds	r3, #1
 8009802:	d020      	beq.n	8009846 <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009804:	2216      	movs	r2, #22
 8009806:	4b22      	ldr	r3, [pc, #136]	; (8009890 <PxMessagingTask+0x13fc>)
 8009808:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800980a:	f006 fbb5 	bl	800ff78 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800980e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d100      	bne.n	8009816 <PxMessagingTask+0x1382>
 8009814:	e5a9      	b.n	800936a <PxMessagingTask+0xed6>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009816:	2216      	movs	r2, #22
 8009818:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <PxMessagingTask+0x13fc>)
 800981a:	701a      	strb	r2, [r3, #0]
 800981c:	e5a5      	b.n	800936a <PxMessagingTask+0xed6>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800981e:	8832      	ldrh	r2, [r6, #0]
 8009820:	4b20      	ldr	r3, [pc, #128]	; (80098a4 <PxMessagingTask+0x1410>)
 8009822:	429a      	cmp	r2, r3
 8009824:	d1ee      	bne.n	8009804 <PxMessagingTask+0x1370>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	469c      	mov	ip, r3
 800982a:	4465      	add	r5, ip
 800982c:	79ea      	ldrb	r2, [r5, #7]
 800982e:	79ab      	ldrb	r3, [r5, #6]
 8009830:	0212      	lsls	r2, r2, #8
 8009832:	18d2      	adds	r2, r2, r3
 8009834:	17d3      	asrs	r3, r2, #31
 8009836:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 8009838:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800983a:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800983c:	0031      	movs	r1, r6
 800983e:	f006 fbe9 	bl	8010014 <HAL_FLASH_Program>
 8009842:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009844:	e7e1      	b.n	800980a <PxMessagingTask+0x1376>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009846:	9b05      	ldr	r3, [sp, #20]
 8009848:	4641      	mov	r1, r8
 800984a:	469c      	mov	ip, r3
 800984c:	4465      	add	r5, ip
 800984e:	79ea      	ldrb	r2, [r5, #7]
 8009850:	7a2b      	ldrb	r3, [r5, #8]
 8009852:	0212      	lsls	r2, r2, #8
 8009854:	041b      	lsls	r3, r3, #16
 8009856:	18d2      	adds	r2, r2, r3
 8009858:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 800985a:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800985c:	18d2      	adds	r2, r2, r3
 800985e:	7a6b      	ldrb	r3, [r5, #9]
 8009860:	061b      	lsls	r3, r3, #24
 8009862:	18d2      	adds	r2, r2, r3
 8009864:	2300      	movs	r3, #0
 8009866:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009868:	0031      	movs	r1, r6
 800986a:	f006 fbd3 	bl	8010014 <HAL_FLASH_Program>
 800986e:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009870:	e7cb      	b.n	800980a <PxMessagingTask+0x1376>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009872:	8832      	ldrh	r2, [r6, #0]
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <PxMessagingTask+0x1410>)
 8009876:	429a      	cmp	r2, r3
 8009878:	d1c4      	bne.n	8009804 <PxMessagingTask+0x1370>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800987a:	9b05      	ldr	r3, [sp, #20]
 800987c:	469c      	mov	ip, r3
 800987e:	4465      	add	r5, ip
 8009880:	79aa      	ldrb	r2, [r5, #6]
 8009882:	2300      	movs	r3, #0
 8009884:	e7d7      	b.n	8009836 <PxMessagingTask+0x13a2>
 8009886:	46c0      	nop			; (mov r8, r8)
 8009888:	20000b3c 	.word	0x20000b3c
 800988c:	20006a08 	.word	0x20006a08
 8009890:	20000c3c 	.word	0x20000c3c
 8009894:	00007fff 	.word	0x00007fff
 8009898:	08017028 	.word	0x08017028
 800989c:	0001ffff 	.word	0x0001ffff
 80098a0:	08017048 	.word	0x08017048
 80098a4:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80098a8:	6833      	ldr	r3, [r6, #0]
 80098aa:	3301      	adds	r3, #1
 80098ac:	d1aa      	bne.n	8009804 <PxMessagingTask+0x1370>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80098ae:	9b05      	ldr	r3, [sp, #20]
 80098b0:	4641      	mov	r1, r8
 80098b2:	469c      	mov	ip, r3
 80098b4:	4465      	add	r5, ip
 80098b6:	79ea      	ldrb	r2, [r5, #7]
 80098b8:	7a2b      	ldrb	r3, [r5, #8]
 80098ba:	0212      	lsls	r2, r2, #8
 80098bc:	041b      	lsls	r3, r3, #16
 80098be:	18d2      	adds	r2, r2, r3
 80098c0:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 80098c2:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80098c4:	18d2      	adds	r2, r2, r3
 80098c6:	7a6b      	ldrb	r3, [r5, #9]
 80098c8:	061b      	lsls	r3, r3, #24
 80098ca:	18d2      	adds	r2, r2, r3
 80098cc:	2300      	movs	r3, #0
 80098ce:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 80098d0:	0031      	movs	r1, r6
 80098d2:	f006 fb9f 	bl	8010014 <HAL_FLASH_Program>
 80098d6:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 80098d8:	e797      	b.n	800980a <PxMessagingTask+0x1376>
 80098da:	46c0      	nop			; (mov r8, r8)

080098dc <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80098dc:	2310      	movs	r3, #16
{
 80098de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e0:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80098e2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098e4:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098e6:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80098e8:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098ea:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098ec:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098ee:	0276      	lsls	r6, r6, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098f0:	035b      	lsls	r3, r3, #13
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80098f2:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098f4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80098f6:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80098f8:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098fa:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80098fc:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098fe:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009900:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009902:	f006 fe1f 	bl	8010544 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8009906:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009908:	2101      	movs	r1, #1
 800990a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800990c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800990e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009910:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009912:	9703      	str	r7, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009914:	f007 f8b8 	bl	8010a88 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8009918:	4b1a      	ldr	r3, [pc, #104]	; (8009984 <SystemClock_Config+0xa8>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800991a:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800991c:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800991e:	9508      	str	r5, [sp, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009920:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009922:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009924:	f007 fa3c 	bl	8010da0 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 8009928:	2180      	movs	r1, #128	; 0x80
 800992a:	4d17      	ldr	r5, [pc, #92]	; (8009988 <SystemClock_Config+0xac>)
 800992c:	0549      	lsls	r1, r1, #21
 800992e:	69ea      	ldr	r2, [r5, #28]
 8009930:	430a      	orrs	r2, r1
 8009932:	61ea      	str	r2, [r5, #28]
 8009934:	69eb      	ldr	r3, [r5, #28]
 8009936:	400b      	ands	r3, r1
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800993c:	f006 fdf8 	bl	8010530 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009940:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009942:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009948:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800994a:	f007 fa29 	bl	8010da0 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800994e:	f007 f9f9 	bl	8010d44 <HAL_RCC_GetHCLKFreq>
 8009952:	21fa      	movs	r1, #250	; 0xfa
 8009954:	0089      	lsls	r1, r1, #2
 8009956:	f7f6 fbfb 	bl	8000150 <__udivsi3>
 800995a:	f005 fc93 	bl	800f284 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800995e:	2004      	movs	r0, #4
 8009960:	f005 fcac 	bl	800f2bc <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009964:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE();
 8009966:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009968:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE();
 800996a:	4323      	orrs	r3, r4
 800996c:	61ab      	str	r3, [r5, #24]
 800996e:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009970:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE();
 8009972:	401c      	ands	r4, r3
 8009974:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009976:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE();
 8009978:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800997a:	f005 fc43 	bl	800f204 <HAL_NVIC_SetPriority>
	
}
 800997e:	b01b      	add	sp, #108	; 0x6c
 8009980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	00040003 	.word	0x00040003
 8009988:	40021000 	.word	0x40021000

0800998c <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800998c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998e:	46de      	mov	lr, fp
 8009990:	4657      	mov	r7, sl
 8009992:	464e      	mov	r6, r9
 8009994:	4645      	mov	r5, r8
 8009996:	b5e0      	push	{r5, r6, r7, lr}
 8009998:	b087      	sub	sp, #28
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800999a:	2215      	movs	r2, #21
 800999c:	2100      	movs	r1, #0
 800999e:	4668      	mov	r0, sp
 80099a0:	f008 fcba 	bl	8012318 <memset>
	
	HAL_FLASH_Unlock();
 80099a4:	f006 fad6 	bl	800ff54 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 80099a8:	486a      	ldr	r0, [pc, #424]	; (8009b54 <SaveToRO+0x1c8>)
 80099aa:	f006 fc03 	bl	80101b4 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80099ae:	486a      	ldr	r0, [pc, #424]	; (8009b58 <SaveToRO+0x1cc>)
 80099b0:	f006 faec 	bl	800ff8c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d16e      	bne.n	8009a96 <SaveToRO+0x10a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80099b8:	2202      	movs	r2, #2
 80099ba:	4c68      	ldr	r4, [pc, #416]	; (8009b5c <SaveToRO+0x1d0>)
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	4393      	bics	r3, r2
 80099c0:	6123      	str	r3, [r4, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 80099c2:	4b67      	ldr	r3, [pc, #412]	; (8009b60 <SaveToRO+0x1d4>)
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d000      	beq.n	80099cc <SaveToRO+0x40>
 80099ca:	e06e      	b.n	8009aaa <SaveToRO+0x11e>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80099cc:	4b65      	ldr	r3, [pc, #404]	; (8009b64 <SaveToRO+0x1d8>)
 80099ce:	469a      	mov	sl, r3
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d100      	bne.n	80099d8 <SaveToRO+0x4c>
 80099d6:	e0b8      	b.n	8009b4a <SaveToRO+0x1be>
 80099d8:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <SaveToRO+0x1dc>)
 80099da:	2500      	movs	r5, #0
 80099dc:	4c63      	ldr	r4, [pc, #396]	; (8009b6c <SaveToRO+0x1e0>)
 80099de:	4699      	mov	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
				if (FlashStatus != HAL_OK) {
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80099e0:	4f5e      	ldr	r7, [pc, #376]	; (8009b5c <SaveToRO+0x1d0>)
 80099e2:	e006      	b.n	80099f2 <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80099e4:	4653      	mov	r3, sl
 80099e6:	3501      	adds	r5, #1
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b2ed      	uxtb	r5, r5
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	d800      	bhi.n	80099f2 <SaveToRO+0x66>
 80099f0:	e0ab      	b.n	8009b4a <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 80099f2:	00ab      	lsls	r3, r5, #2
 80099f4:	1959      	adds	r1, r3, r5
 80099f6:	4698      	mov	r8, r3
 80099f8:	464b      	mov	r3, r9
 80099fa:	0089      	lsls	r1, r1, #2
 80099fc:	5c5b      	ldrb	r3, [r3, r1]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0f0      	beq.n	80099e4 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009a02:	466b      	mov	r3, sp
 8009a04:	22fe      	movs	r2, #254	; 0xfe
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 8009a06:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009a08:	701a      	strb	r2, [r3, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 8009a0a:	4449      	add	r1, r9
 8009a0c:	2214      	movs	r2, #20
 8009a0e:	f008 fc7a 	bl	8012306 <memcpy>
 8009a12:	2314      	movs	r3, #20
 8009a14:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 8009a16:	466b      	mov	r3, sp
 8009a18:	44a3      	add	fp, r4
 8009a1a:	1b1e      	subs	r6, r3, r4
 8009a1c:	465b      	mov	r3, fp
 8009a1e:	46ab      	mov	fp, r5
 8009a20:	001d      	movs	r5, r3
 8009a22:	5b32      	ldrh	r2, [r6, r4]
 8009a24:	2300      	movs	r3, #0
 8009a26:	0021      	movs	r1, r4
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f006 faf3 	bl	8010014 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a2e:	484a      	ldr	r0, [pc, #296]	; (8009b58 <SaveToRO+0x1cc>)
 8009a30:	f006 faac 	bl	800ff8c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d12e      	bne.n	8009a96 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a38:	2201      	movs	r2, #1
 8009a3a:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009a3c:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a3e:	4393      	bics	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 8009a42:	42ac      	cmp	r4, r5
 8009a44:	d1ed      	bne.n	8009a22 <SaveToRO+0x96>
 8009a46:	465d      	mov	r5, fp
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a48:	4643      	mov	r3, r8
 8009a4a:	195b      	adds	r3, r3, r5
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	444b      	add	r3, r9
 8009a50:	2600      	movs	r6, #0
 8009a52:	4698      	mov	r8, r3
 8009a54:	0025      	movs	r5, r4
 8009a56:	e012      	b.n	8009a7e <SaveToRO+0xf2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 8009a58:	0073      	lsls	r3, r6, #1
 8009a5a:	5ae2      	ldrh	r2, [r4, r3]
 8009a5c:	0029      	movs	r1, r5
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2001      	movs	r0, #1
 8009a62:	f006 fad7 	bl	8010014 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a66:	483c      	ldr	r0, [pc, #240]	; (8009b58 <SaveToRO+0x1cc>)
 8009a68:	f006 fa90 	bl	800ff8c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d112      	bne.n	8009a96 <SaveToRO+0x10a>
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a70:	2201      	movs	r2, #1
 8009a72:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a74:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a76:	4393      	bics	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009a7a:	3502      	adds	r5, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a7c:	b2f6      	uxtb	r6, r6
 8009a7e:	4643      	mov	r3, r8
 8009a80:	68dc      	ldr	r4, [r3, #12]
 8009a82:	0020      	movs	r0, r4
 8009a84:	f7f6 fb48 	bl	8000118 <strlen>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	0840      	lsrs	r0, r0, #1
 8009a8c:	4286      	cmp	r6, r0
 8009a8e:	d3e3      	bcc.n	8009a58 <SaveToRO+0xcc>
 8009a90:	002c      	movs	r4, r5
 8009a92:	465d      	mov	r5, fp
 8009a94:	e7a6      	b.n	80099e4 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009a96:	4b36      	ldr	r3, [pc, #216]	; (8009b70 <SaveToRO+0x1e4>)
 8009a98:	69d8      	ldr	r0, [r3, #28]
 8009a9a:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 8009a9c:	b007      	add	sp, #28
 8009a9e:	bc3c      	pop	{r2, r3, r4, r5}
 8009aa0:	4690      	mov	r8, r2
 8009aa2:	4699      	mov	r9, r3
 8009aa4:	46a2      	mov	sl, r4
 8009aa6:	46ab      	mov	fp, r5
 8009aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 8009aaa:	4a32      	ldr	r2, [pc, #200]	; (8009b74 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009aac:	4929      	ldr	r1, [pc, #164]	; (8009b54 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N<<8) + myID;
 8009aae:	4693      	mov	fp, r2
 8009ab0:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009ab2:	2001      	movs	r0, #1
		temp = (uint16_t) (N<<8) + myID;
 8009ab4:	0212      	lsls	r2, r2, #8
 8009ab6:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	2300      	movs	r3, #0
 8009abc:	f006 faaa 	bl	8010014 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009ac0:	4825      	ldr	r0, [pc, #148]	; (8009b58 <SaveToRO+0x1cc>)
 8009ac2:	f006 fa63 	bl	800ff8c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d1e5      	bne.n	8009a96 <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009aca:	2201      	movs	r2, #1
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	4393      	bics	r3, r2
 8009ad0:	6123      	str	r3, [r4, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 8009ad2:	465b      	mov	r3, fp
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d100      	bne.n	8009adc <SaveToRO+0x150>
 8009ada:	e777      	b.n	80099cc <SaveToRO+0x40>
 8009adc:	2301      	movs	r3, #1
 8009ade:	469a      	mov	sl, r3
 8009ae0:	4b25      	ldr	r3, [pc, #148]	; (8009b78 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009ae2:	2602      	movs	r6, #2
 8009ae4:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ae6:	46a0      	mov	r8, r4
 8009ae8:	4653      	mov	r3, sl
 8009aea:	1e5d      	subs	r5, r3, #1
 8009aec:	2316      	movs	r3, #22
 8009aee:	464f      	mov	r7, r9
 8009af0:	435d      	muls	r5, r3
 8009af2:	464b      	mov	r3, r9
 8009af4:	3716      	adds	r7, #22
 8009af6:	195c      	adds	r4, r3, r5
 8009af8:	197f      	adds	r7, r7, r5
 8009afa:	e002      	b.n	8009b02 <SaveToRO+0x176>
 8009afc:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009afe:	42a7      	cmp	r7, r4
 8009b00:	d01a      	beq.n	8009b38 <SaveToRO+0x1ac>
				if (array[i-1][0]) {
 8009b02:	464b      	mov	r3, r9
 8009b04:	5b5b      	ldrh	r3, [r3, r5]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0f8      	beq.n	8009afc <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 8009b0a:	4b12      	ldr	r3, [pc, #72]	; (8009b54 <SaveToRO+0x1c8>)
 8009b0c:	8822      	ldrh	r2, [r4, #0]
 8009b0e:	18f1      	adds	r1, r6, r3
 8009b10:	2001      	movs	r0, #1
 8009b12:	2300      	movs	r3, #0
 8009b14:	f006 fa7e 	bl	8010014 <HAL_FLASH_Program>
					add += 2;
 8009b18:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009b1a:	480f      	ldr	r0, [pc, #60]	; (8009b58 <SaveToRO+0x1cc>)
					add += 2;
 8009b1c:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009b1e:	f006 fa35 	bl	800ff8c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d1b7      	bne.n	8009a96 <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009b26:	4643      	mov	r3, r8
 8009b28:	2201      	movs	r2, #1
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	3402      	adds	r4, #2
 8009b2e:	4393      	bics	r3, r2
 8009b30:	4642      	mov	r2, r8
 8009b32:	6113      	str	r3, [r2, #16]
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009b34:	42a7      	cmp	r7, r4
 8009b36:	d1e4      	bne.n	8009b02 <SaveToRO+0x176>
		for(uint8_t i=1 ; i<=N ; i++)
 8009b38:	4653      	mov	r3, sl
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	469a      	mov	sl, r3
 8009b40:	465b      	mov	r3, fp
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	4553      	cmp	r3, sl
 8009b46:	d2cf      	bcs.n	8009ae8 <SaveToRO+0x15c>
 8009b48:	e740      	b.n	80099cc <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009b4a:	f006 fa15 	bl	800ff78 <HAL_FLASH_Lock>
	return result;
 8009b4e:	2000      	movs	r0, #0
 8009b50:	e7a4      	b.n	8009a9c <SaveToRO+0x110>
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	0801d800 	.word	0x0801d800
 8009b58:	0000c350 	.word	0x0000c350
 8009b5c:	40022000 	.word	0x40022000
 8009b60:	20000a98 	.word	0x20000a98
 8009b64:	2000182c 	.word	0x2000182c
 8009b68:	20006a9c 	.word	0x20006a9c
 8009b6c:	0801dc00 	.word	0x0801dc00
 8009b70:	20006fc0 	.word	0x20006fc0
 8009b74:	20000008 	.word	0x20000008
 8009b78:	20000f0c 	.word	0x20000f0c

08009b7c <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
	// Clear the array 
	memset(array, 0, sizeof(array));
 8009b7c:	228f      	movs	r2, #143	; 0x8f
{
 8009b7e:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009b80:	0092      	lsls	r2, r2, #2
 8009b82:	2100      	movs	r1, #0
 8009b84:	4805      	ldr	r0, [pc, #20]	; (8009b9c <ClearROtopology+0x20>)
 8009b86:	f008 fbc7 	bl	8012318 <memset>
	N = 1; myID = 0;
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <ClearROtopology+0x24>)
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	2200      	movs	r2, #0
 8009b92:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <ClearROtopology+0x28>)
 8009b94:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 8009b96:	f7ff fef9 	bl	800998c <SaveToRO>
}
 8009b9a:	bd10      	pop	{r4, pc}
 8009b9c:	20000f0c 	.word	0x20000f0c
 8009ba0:	20000008 	.word	0x20000008
 8009ba4:	20000a98 	.word	0x20000a98

08009ba8 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009ba8:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009baa:	f003 f89d 	bl	800cce8 <GetUart>

	huart->Init.BaudRate =57600;
 8009bae:	23e1      	movs	r3, #225	; 0xe1
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009bba:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8009bbc:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009bbe:	015b      	lsls	r3, r3, #5
 8009bc0:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009bc2:	f007 ff85 	bl	8011ad0 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009bc6:	2120      	movs	r1, #32
 8009bc8:	6822      	ldr	r2, [r4, #0]
 8009bca:	6813      	ldr	r3, [r2, #0]
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	6013      	str	r3, [r2, #0]
}
 8009bd0:	bd10      	pop	{r4, pc}
 8009bd2:	46c0      	nop			; (mov r8, r8)

08009bd4 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd6:	46ce      	mov	lr, r9
 8009bd8:	4647      	mov	r7, r8
 8009bda:	4698      	mov	r8, r3
 8009bdc:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 8009bde:	4c2a      	ldr	r4, [pc, #168]	; (8009c88 <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009be0:	b085      	sub	sp, #20
 8009be2:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 8009be4:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009be6:	000f      	movs	r7, r1
 8009be8:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8009bea:	f7f9 ff8b 	bl	8003b04 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009bee:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 8009bf0:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d11a      	bne.n	8009c2c <remoteBootloaderUpdate+0x58>
	if(src == myID){
 8009bf6:	7823      	ldrb	r3, [r4, #0]
 8009bf8:	454b      	cmp	r3, r9
 8009bfa:	d03b      	beq.n	8009c74 <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009bfc:	0028      	movs	r0, r5
 8009bfe:	f7ff ffd3 	bl	8009ba8 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009c02:	0030      	movs	r0, r6
 8009c04:	f7ff ffd0 	bl	8009ba8 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009c08:	2300      	movs	r3, #0
 8009c0a:	7821      	ldrb	r1, [r4, #0]
 8009c0c:	9303      	str	r3, [sp, #12]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	9302      	str	r3, [sp, #8]
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	3303      	adds	r3, #3
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	0032      	movs	r2, r6
 8009c1a:	000b      	movs	r3, r1
 8009c1c:	0028      	movs	r0, r5
 8009c1e:	f7fe fac9 	bl	80081b4 <StartScastDMAStream>
}
 8009c22:	b005      	add	sp, #20
 8009c24:	bc0c      	pop	{r2, r3}
 8009c26:	4690      	mov	r8, r2
 8009c28:	4699      	mov	r9, r3
 8009c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009c2c:	7823      	ldrb	r3, [r4, #0]
 8009c2e:	42bb      	cmp	r3, r7
 8009c30:	d01c      	beq.n	8009c6c <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8009c32:	454b      	cmp	r3, r9
 8009c34:	d1e2      	bne.n	8009bfc <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c36:	f003 fa8f 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c3a:	4b14      	ldr	r3, [pc, #80]	; (8009c8c <remoteBootloaderUpdate+0xb8>)
 8009c3c:	003a      	movs	r2, r7
 8009c3e:	6819      	ldr	r1, [r3, #0]
 8009c40:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c42:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c44:	f008 fd62 	bl	801270c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009c48:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <remoteBootloaderUpdate+0xbc>)
 8009c4a:	4648      	mov	r0, r9
 8009c4c:	6819      	ldr	r1, [r3, #0]
 8009c4e:	f008 fd7d 	bl	801274c <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009c52:	4648      	mov	r0, r9
 8009c54:	f7f6 fa60 	bl	8000118 <strlen>
 8009c58:	2332      	movs	r3, #50	; 0x32
 8009c5a:	b282      	uxth	r2, r0
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	0028      	movs	r0, r5
 8009c60:	f003 f810 	bl	800cc84 <writePxITMutex>
		Delay_ms(100);
 8009c64:	2064      	movs	r0, #100	; 0x64
 8009c66:	f005 f80b 	bl	800ec80 <HAL_Delay>
 8009c6a:	e7c7      	b.n	8009bfc <remoteBootloaderUpdate+0x28>
 8009c6c:	4646      	mov	r6, r8
	if(src == myID){
 8009c6e:	454f      	cmp	r7, r9
 8009c70:	d1c4      	bne.n	8009bfc <remoteBootloaderUpdate+0x28>
 8009c72:	e7e0      	b.n	8009c36 <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c74:	f003 fa70 	bl	800d158 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <remoteBootloaderUpdate+0xc0>)
 8009c7a:	003a      	movs	r2, r7
 8009c7c:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c7e:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009c80:	f008 fd44 	bl	801270c <sprintf>
 8009c84:	e7e0      	b.n	8009c48 <remoteBootloaderUpdate+0x74>
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	20000a98 	.word	0x20000a98
 8009c8c:	20000058 	.word	0x20000058
 8009c90:	20000054 	.word	0x20000054
 8009c94:	2000005c 	.word	0x2000005c

08009c98 <Module_Peripheral_Init>:

/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 8009c98:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART1_UART_Init();
 8009c9a:	f002 fe21 	bl	800c8e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009c9e:	f002 fe37 	bl	800c910 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009ca2:	f002 fe4d 	bl	800c940 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8009ca6:	f002 fe7b 	bl	800c9a0 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8009caa:	f002 fe91 	bl	800c9d0 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART4_UART_Init();
 8009cae:	f002 fe5f 	bl	800c970 <MX_USART4_UART_Init>
	
	/* Bridge USB and P5 ports by default - only if PUSB is not bridged with any other port */
	if (portStatus[PUSB] != STREAM)
 8009cb2:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <Module_Peripheral_Init+0x2c>)
 8009cb4:	799b      	ldrb	r3, [r3, #6]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d003      	beq.n	8009cc2 <Module_Peripheral_Init+0x2a>
		Bridge(PUSB, P5);
 8009cba:	2105      	movs	r1, #5
 8009cbc:	2006      	movs	r0, #6
 8009cbe:	f7fa fd51 	bl	8004764 <Bridge>
	
}
 8009cc2:	bd10      	pop	{r4, pc}
 8009cc4:	20000c2c 	.word	0x20000c2c

08009cc8 <Module_MessagingTask>:
			result = H1AR0_ERR_UnknownMessage;
			break;
	}			

	return result;	
}
 8009cc8:	2001      	movs	r0, #1
 8009cca:	4770      	bx	lr

08009ccc <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 8009ccc:	4770      	bx	lr
 8009cce:	46c0      	nop			; (mov r8, r8)

08009cd0 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 8009cd0:	6800      	ldr	r0, [r0, #0]
 8009cd2:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <GetPort+0x48>)
 8009cd4:	4298      	cmp	r0, r3
 8009cd6:	d014      	beq.n	8009d02 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART6)
 8009cd8:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <GetPort+0x4c>)
 8009cda:	4298      	cmp	r0, r3
 8009cdc:	d015      	beq.n	8009d0a <GetPort+0x3a>
			return P2;
	else if (huart->Instance == USART3)
 8009cde:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <GetPort+0x50>)
 8009ce0:	4298      	cmp	r0, r3
 8009ce2:	d014      	beq.n	8009d0e <GetPort+0x3e>
			return P3;
	else if (huart->Instance == USART1)
 8009ce4:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <GetPort+0x54>)
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	d00d      	beq.n	8009d06 <GetPort+0x36>
			return P4;
	else if (huart->Instance == USART5)
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <GetPort+0x58>)
 8009cec:	4298      	cmp	r0, r3
 8009cee:	d010      	beq.n	8009d12 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART4)
			return P6;
		
	return 0;
 8009cf0:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <GetPort+0x5c>)
 8009cf2:	469c      	mov	ip, r3
 8009cf4:	4460      	add	r0, ip
 8009cf6:	4243      	negs	r3, r0
 8009cf8:	4158      	adcs	r0, r3
 8009cfa:	2306      	movs	r3, #6
 8009cfc:	4240      	negs	r0, r0
 8009cfe:	4018      	ands	r0, r3
}
 8009d00:	4770      	bx	lr
			return P1;
 8009d02:	2001      	movs	r0, #1
 8009d04:	e7fc      	b.n	8009d00 <GetPort+0x30>
			return P4;
 8009d06:	2004      	movs	r0, #4
 8009d08:	e7fa      	b.n	8009d00 <GetPort+0x30>
			return P2;
 8009d0a:	2002      	movs	r0, #2
 8009d0c:	e7f8      	b.n	8009d00 <GetPort+0x30>
			return P3;
 8009d0e:	2003      	movs	r0, #3
 8009d10:	e7f6      	b.n	8009d00 <GetPort+0x30>
			return P5;
 8009d12:	2005      	movs	r0, #5
 8009d14:	e7f4      	b.n	8009d00 <GetPort+0x30>
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	40004400 	.word	0x40004400
 8009d1c:	40011400 	.word	0x40011400
 8009d20:	40004800 	.word	0x40004800
 8009d24:	40013800 	.word	0x40013800
 8009d28:	40005000 	.word	0x40005000
 8009d2c:	bfffb400 	.word	0xbfffb400

08009d30 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 8009d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d32:	46de      	mov	lr, fp
 8009d34:	4657      	mov	r7, sl
 8009d36:	464e      	mov	r6, r9
 8009d38:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	4b5f      	ldr	r3, [pc, #380]	; (8009ebc <DMA_Init+0x18c>)
{
 8009d3e:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 8009d40:	6959      	ldr	r1, [r3, #20]
{
 8009d42:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 8009d44:	4311      	orrs	r1, r2
 8009d46:	6159      	str	r1, [r3, #20]
 8009d48:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009d4a:	4c5d      	ldr	r4, [pc, #372]	; (8009ec0 <DMA_Init+0x190>)
	__DMA1_CLK_ENABLE();
 8009d4c:	400a      	ands	r2, r1
 8009d4e:	9200      	str	r2, [sp, #0]
 8009d50:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 8009d52:	2202      	movs	r2, #2
 8009d54:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d56:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 8009d58:	4311      	orrs	r1, r2
 8009d5a:	6159      	str	r1, [r3, #20]
 8009d5c:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d5e:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 8009d60:	401a      	ands	r2, r3
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 8009d66:	4b57      	ldr	r3, [pc, #348]	; (8009ec4 <DMA_Init+0x194>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009d68:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 8009d6a:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d70:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d72:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009d74:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009d76:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d78:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d7a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d7c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d7e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 8009d80:	0020      	movs	r0, r4
 8009d82:	f005 fbc7 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009d86:	4b50      	ldr	r3, [pc, #320]	; (8009ec8 <DMA_Init+0x198>)
	HAL_DMA_Init(hDMA);		
 8009d88:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009d8a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d8c:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d8e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009d90:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009d92:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d94:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d96:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d98:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d9a:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 8009d9c:	3038      	adds	r0, #56	; 0x38
 8009d9e:	f005 fbb9 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009da2:	4b4a      	ldr	r3, [pc, #296]	; (8009ecc <DMA_Init+0x19c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009da4:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 8009da6:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009da8:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 8009daa:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009dac:	50e5      	str	r5, [r4, r3]
 8009dae:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009db0:	3304      	adds	r3, #4
 8009db2:	50e2      	str	r2, [r4, r3]
 8009db4:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009db6:	3304      	adds	r3, #4
 8009db8:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009dba:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009dbc:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009dbe:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009dc0:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 8009dc2:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009dc4:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 8009dc6:	f005 fba5 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009dca:	23a8      	movs	r3, #168	; 0xa8
 8009dcc:	4a40      	ldr	r2, [pc, #256]	; (8009ed0 <DMA_Init+0x1a0>)
	HAL_DMA_Init(hDMA);		
 8009dce:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009dd0:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009dd2:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009dd8:	3304      	adds	r3, #4
 8009dda:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009ddc:	3304      	adds	r3, #4
 8009dde:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009de0:	3304      	adds	r3, #4
 8009de2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009de4:	3304      	adds	r3, #4
 8009de6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009de8:	3304      	adds	r3, #4
 8009dea:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009dec:	3304      	adds	r3, #4
 8009dee:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009df0:	30a8      	adds	r0, #168	; 0xa8
 8009df2:	f005 fb8f 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009df6:	23e0      	movs	r3, #224	; 0xe0
 8009df8:	4a36      	ldr	r2, [pc, #216]	; (8009ed4 <DMA_Init+0x1a4>)
	HAL_DMA_Init(hDMA);		
 8009dfa:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009dfc:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009dfe:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e00:	3304      	adds	r3, #4
 8009e02:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e04:	3304      	adds	r3, #4
 8009e06:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e08:	3304      	adds	r3, #4
 8009e0a:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e10:	3304      	adds	r3, #4
 8009e12:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e14:	3304      	adds	r3, #4
 8009e16:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e18:	3304      	adds	r3, #4
 8009e1a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e1c:	30e0      	adds	r0, #224	; 0xe0
 8009e1e:	f005 fb79 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e22:	238c      	movs	r3, #140	; 0x8c
 8009e24:	4a2c      	ldr	r2, [pc, #176]	; (8009ed8 <DMA_Init+0x1a8>)
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e2a:	0020      	movs	r0, r4
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e2c:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e2e:	3304      	adds	r3, #4
 8009e30:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e32:	3304      	adds	r3, #4
 8009e34:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e36:	3304      	adds	r3, #4
 8009e38:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e3e:	3304      	adds	r3, #4
 8009e40:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009e42:	3304      	adds	r3, #4
 8009e44:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e46:	3019      	adds	r0, #25
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e48:	3304      	adds	r3, #4
 8009e4a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e4c:	30ff      	adds	r0, #255	; 0xff
 8009e4e:	f005 fb61 	bl	800f514 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009e52:	4c22      	ldr	r4, [pc, #136]	; (8009edc <DMA_Init+0x1ac>)
 8009e54:	4b22      	ldr	r3, [pc, #136]	; (8009ee0 <DMA_Init+0x1b0>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e56:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 8009e58:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e5a:	2310      	movs	r3, #16
 8009e5c:	469b      	mov	fp, r3
 8009e5e:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e60:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e62:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e64:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 8009e66:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e68:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 8009e6a:	0020      	movs	r0, r4
 8009e6c:	f005 fb52 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e70:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <DMA_Init+0x1b4>)
	HAL_DMA_Init(hDMA);		
 8009e72:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009e74:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e76:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e78:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e7a:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e7c:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e7e:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e80:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 8009e82:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e84:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 8009e86:	3038      	adds	r0, #56	; 0x38
 8009e88:	f005 fb44 	bl	800f514 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e8c:	4b16      	ldr	r3, [pc, #88]	; (8009ee8 <DMA_Init+0x1b8>)
	HAL_DMA_Init(hDMA);		
 8009e8e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009e90:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e92:	465b      	mov	r3, fp
 8009e94:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e96:	4653      	mov	r3, sl
 8009e98:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e9e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009ea0:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009ea2:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ea4:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009ea6:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009ea8:	3070      	adds	r0, #112	; 0x70
 8009eaa:	f005 fb33 	bl	800f514 <HAL_DMA_Init>
}
 8009eae:	b003      	add	sp, #12
 8009eb0:	bc3c      	pop	{r2, r3, r4, r5}
 8009eb2:	4690      	mov	r8, r2
 8009eb4:	4699      	mov	r9, r3
 8009eb6:	46a2      	mov	sl, r4
 8009eb8:	46ab      	mov	fp, r5
 8009eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ebc:	40021000 	.word	0x40021000
 8009ec0:	20002474 	.word	0x20002474
 8009ec4:	40020008 	.word	0x40020008
 8009ec8:	40020030 	.word	0x40020030
 8009ecc:	40020058 	.word	0x40020058
 8009ed0:	4002006c 	.word	0x4002006c
 8009ed4:	4002041c 	.word	0x4002041c
 8009ed8:	40020430 	.word	0x40020430
 8009edc:	200023cc 	.word	0x200023cc
 8009ee0:	4002001c 	.word	0x4002001c
 8009ee4:	40020044 	.word	0x40020044
 8009ee8:	40020080 	.word	0x40020080

08009eec <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 8009eec:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 8009eee:	1e44      	subs	r4, r0, #1
 8009ef0:	00e5      	lsls	r5, r4, #3
 8009ef2:	4e07      	ldr	r6, [pc, #28]	; (8009f10 <StopStreamDMA+0x24>)
 8009ef4:	1b2d      	subs	r5, r5, r4
 8009ef6:	00ed      	lsls	r5, r5, #3
 8009ef8:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 8009efa:	f005 fb63 	bl	800f5c4 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 8009f02:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 8009f04:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 8009f06:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <StopStreamDMA+0x28>)
 8009f08:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 8009f0a:	4a03      	ldr	r2, [pc, #12]	; (8009f18 <StopStreamDMA+0x2c>)
 8009f0c:	50a3      	str	r3, [r4, r2]

}
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	2000227c 	.word	0x2000227c
 8009f14:	200019c0 	.word	0x200019c0
 8009f18:	200019d8 	.word	0x200019d8

08009f1c <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 8009f1c:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 8009f22:	4d0c      	ldr	r5, [pc, #48]	; (8009f54 <SwitchMsgDMAToStream+0x38>)
 8009f24:	1a24      	subs	r4, r4, r0
 8009f26:	00e4      	lsls	r4, r4, #3
 8009f28:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 8009f2a:	f005 fb4b 	bl	800f5c4 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 8009f32:	4809      	ldr	r0, [pc, #36]	; (8009f58 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 8009f34:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 8009f36:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f38:	1900      	adds	r0, r0, r4
 8009f3a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009f3c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 8009f3e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f40:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f42:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009f44:	3320      	adds	r3, #32
 8009f46:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	015b      	lsls	r3, r3, #5
 8009f4c:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 8009f4e:	f005 fae1 	bl	800f514 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	20002474 	.word	0x20002474
 8009f58:	2000227c 	.word	0x2000227c

08009f5c <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 8009f5c:	6803      	ldr	r3, [r0, #0]
 8009f5e:	4a21      	ldr	r2, [pc, #132]	; (8009fe4 <SetupDMAInterrupts+0x88>)
{
 8009f60:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d01c      	beq.n	8009fa0 <SetupDMAInterrupts+0x44>
 8009f66:	d80e      	bhi.n	8009f86 <SetupDMAInterrupts+0x2a>
 8009f68:	4a1f      	ldr	r2, [pc, #124]	; (8009fe8 <SetupDMAInterrupts+0x8c>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d026      	beq.n	8009fbc <SetupDMAInterrupts+0x60>
 8009f6e:	d82d      	bhi.n	8009fcc <SetupDMAInterrupts+0x70>
 8009f70:	4a1e      	ldr	r2, [pc, #120]	; (8009fec <SetupDMAInterrupts+0x90>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d131      	bne.n	8009fda <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 8009f76:	2009      	movs	r0, #9
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f005 f943 	bl	800f204 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 8009f7e:	2009      	movs	r0, #9
 8009f80:	f005 f96c 	bl	800f25c <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 8009f84:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 8009f86:	4a1a      	ldr	r2, [pc, #104]	; (8009ff0 <SetupDMAInterrupts+0x94>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d017      	beq.n	8009fbc <SetupDMAInterrupts+0x60>
 8009f8c:	d910      	bls.n	8009fb0 <SetupDMAInterrupts+0x54>
 8009f8e:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <SetupDMAInterrupts+0x98>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d005      	beq.n	8009fa0 <SetupDMAInterrupts+0x44>
 8009f94:	4a18      	ldr	r2, [pc, #96]	; (8009ff8 <SetupDMAInterrupts+0x9c>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d002      	beq.n	8009fa0 <SetupDMAInterrupts+0x44>
 8009f9a:	4a18      	ldr	r2, [pc, #96]	; (8009ffc <SetupDMAInterrupts+0xa0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d1f1      	bne.n	8009f84 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	200b      	movs	r0, #11
 8009fa4:	f005 f92e 	bl	800f204 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 8009fa8:	200b      	movs	r0, #11
 8009faa:	f005 f957 	bl	800f25c <HAL_NVIC_EnableIRQ>
}
 8009fae:	e7e9      	b.n	8009f84 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <SetupDMAInterrupts+0xa4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d0f4      	beq.n	8009fa0 <SetupDMAInterrupts+0x44>
 8009fb6:	4a13      	ldr	r2, [pc, #76]	; (800a004 <SetupDMAInterrupts+0xa8>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d1e3      	bne.n	8009f84 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	200a      	movs	r0, #10
 8009fc0:	f005 f920 	bl	800f204 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 8009fc4:	200a      	movs	r0, #10
 8009fc6:	f005 f949 	bl	800f25c <HAL_NVIC_EnableIRQ>
			break;
 8009fca:	e7db      	b.n	8009f84 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 8009fcc:	4a0e      	ldr	r2, [pc, #56]	; (800a008 <SetupDMAInterrupts+0xac>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d0e6      	beq.n	8009fa0 <SetupDMAInterrupts+0x44>
 8009fd2:	4a0e      	ldr	r2, [pc, #56]	; (800a00c <SetupDMAInterrupts+0xb0>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d1d5      	bne.n	8009f84 <SetupDMAInterrupts+0x28>
 8009fd8:	e7e2      	b.n	8009fa0 <SetupDMAInterrupts+0x44>
 8009fda:	4a0d      	ldr	r2, [pc, #52]	; (800a010 <SetupDMAInterrupts+0xb4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d0ed      	beq.n	8009fbc <SetupDMAInterrupts+0x60>
 8009fe0:	e7d0      	b.n	8009f84 <SetupDMAInterrupts+0x28>
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	4002006c 	.word	0x4002006c
 8009fe8:	40020030 	.word	0x40020030
 8009fec:	40020008 	.word	0x40020008
 8009ff0:	4002041c 	.word	0x4002041c
 8009ff4:	40020444 	.word	0x40020444
 8009ff8:	40020458 	.word	0x40020458
 8009ffc:	40020430 	.word	0x40020430
 800a000:	40020080 	.word	0x40020080
 800a004:	40020408 	.word	0x40020408
 800a008:	40020044 	.word	0x40020044
 800a00c:	40020058 	.word	0x40020058
 800a010:	4002001c 	.word	0x4002001c

0800a014 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800a014:	6803      	ldr	r3, [r0, #0]
 800a016:	4a1b      	ldr	r2, [pc, #108]	; (800a084 <UnSetupDMAInterrupts+0x70>)
{
 800a018:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d018      	beq.n	800a050 <UnSetupDMAInterrupts+0x3c>
 800a01e:	d80a      	bhi.n	800a036 <UnSetupDMAInterrupts+0x22>
 800a020:	4a19      	ldr	r2, [pc, #100]	; (800a088 <UnSetupDMAInterrupts+0x74>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d01e      	beq.n	800a064 <UnSetupDMAInterrupts+0x50>
 800a026:	d821      	bhi.n	800a06c <UnSetupDMAInterrupts+0x58>
 800a028:	4a18      	ldr	r2, [pc, #96]	; (800a08c <UnSetupDMAInterrupts+0x78>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d125      	bne.n	800a07a <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800a02e:	2009      	movs	r0, #9
 800a030:	f005 f91e 	bl	800f270 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a034:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a036:	4a16      	ldr	r2, [pc, #88]	; (800a090 <UnSetupDMAInterrupts+0x7c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d013      	beq.n	800a064 <UnSetupDMAInterrupts+0x50>
 800a03c:	d90c      	bls.n	800a058 <UnSetupDMAInterrupts+0x44>
 800a03e:	4a15      	ldr	r2, [pc, #84]	; (800a094 <UnSetupDMAInterrupts+0x80>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d005      	beq.n	800a050 <UnSetupDMAInterrupts+0x3c>
 800a044:	4a14      	ldr	r2, [pc, #80]	; (800a098 <UnSetupDMAInterrupts+0x84>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d002      	beq.n	800a050 <UnSetupDMAInterrupts+0x3c>
 800a04a:	4a14      	ldr	r2, [pc, #80]	; (800a09c <UnSetupDMAInterrupts+0x88>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d1f1      	bne.n	800a034 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a050:	200b      	movs	r0, #11
 800a052:	f005 f90d 	bl	800f270 <HAL_NVIC_DisableIRQ>
}
 800a056:	e7ed      	b.n	800a034 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a058:	4a11      	ldr	r2, [pc, #68]	; (800a0a0 <UnSetupDMAInterrupts+0x8c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d0f8      	beq.n	800a050 <UnSetupDMAInterrupts+0x3c>
 800a05e:	4a11      	ldr	r2, [pc, #68]	; (800a0a4 <UnSetupDMAInterrupts+0x90>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d1e7      	bne.n	800a034 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a064:	200a      	movs	r0, #10
 800a066:	f005 f903 	bl	800f270 <HAL_NVIC_DisableIRQ>
			break;
 800a06a:	e7e3      	b.n	800a034 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a06c:	4a0e      	ldr	r2, [pc, #56]	; (800a0a8 <UnSetupDMAInterrupts+0x94>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d0ee      	beq.n	800a050 <UnSetupDMAInterrupts+0x3c>
 800a072:	4a0e      	ldr	r2, [pc, #56]	; (800a0ac <UnSetupDMAInterrupts+0x98>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d1dd      	bne.n	800a034 <UnSetupDMAInterrupts+0x20>
 800a078:	e7ea      	b.n	800a050 <UnSetupDMAInterrupts+0x3c>
 800a07a:	4a0d      	ldr	r2, [pc, #52]	; (800a0b0 <UnSetupDMAInterrupts+0x9c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d0f1      	beq.n	800a064 <UnSetupDMAInterrupts+0x50>
 800a080:	e7d8      	b.n	800a034 <UnSetupDMAInterrupts+0x20>
 800a082:	46c0      	nop			; (mov r8, r8)
 800a084:	4002006c 	.word	0x4002006c
 800a088:	40020030 	.word	0x40020030
 800a08c:	40020008 	.word	0x40020008
 800a090:	4002041c 	.word	0x4002041c
 800a094:	40020444 	.word	0x40020444
 800a098:	40020458 	.word	0x40020458
 800a09c:	40020430 	.word	0x40020430
 800a0a0:	40020080 	.word	0x40020080
 800a0a4:	40020408 	.word	0x40020408
 800a0a8:	40020044 	.word	0x40020044
 800a0ac:	40020058 	.word	0x40020058
 800a0b0:	4002001c 	.word	0x4002001c

0800a0b4 <DMA_MSG_TX_UnSetup>:
{	
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a0b8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a0ba:	f7ff ffab 	bl	800a014 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a0c2:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a0c4:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a0c6:	bd10      	pop	{r4, pc}

0800a0c8 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a0c8:	6803      	ldr	r3, [r0, #0]
 800a0ca:	4ac6      	ldr	r2, [pc, #792]	; (800a3e4 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800a0cc:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d03a      	beq.n	800a148 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a0d2:	4ac5      	ldr	r2, [pc, #788]	; (800a3e8 <RemapAndLinkDMAtoUARTRx+0x320>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d058      	beq.n	800a18a <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a0d8:	4ac4      	ldr	r2, [pc, #784]	; (800a3ec <RemapAndLinkDMAtoUARTRx+0x324>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d100      	bne.n	800a0e0 <RemapAndLinkDMAtoUARTRx+0x18>
 800a0de:	e093      	b.n	800a208 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a0e0:	4ac3      	ldr	r2, [pc, #780]	; (800a3f0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d100      	bne.n	800a0e8 <RemapAndLinkDMAtoUARTRx+0x20>
 800a0e6:	e0c0      	b.n	800a26a <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a0e8:	4ac2      	ldr	r2, [pc, #776]	; (800a3f4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d100      	bne.n	800a0f0 <RemapAndLinkDMAtoUARTRx+0x28>
 800a0ee:	e19d      	b.n	800a42c <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a0f0:	4ac1      	ldr	r2, [pc, #772]	; (800a3f8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d100      	bne.n	800a0f8 <RemapAndLinkDMAtoUARTRx+0x30>
 800a0f6:	e1b9      	b.n	800a46c <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a0f8:	4ac0      	ldr	r2, [pc, #768]	; (800a3fc <RemapAndLinkDMAtoUARTRx+0x334>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d000      	beq.n	800a100 <RemapAndLinkDMAtoUARTRx+0x38>
 800a0fe:	e265      	b.n	800a5cc <RemapAndLinkDMAtoUARTRx+0x504>
 800a100:	680b      	ldr	r3, [r1, #0]
 800a102:	4abf      	ldr	r2, [pc, #764]	; (800a400 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d100      	bne.n	800a10a <RemapAndLinkDMAtoUARTRx+0x42>
 800a108:	e230      	b.n	800a56c <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a10a:	4abe      	ldr	r2, [pc, #760]	; (800a404 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d100      	bne.n	800a112 <RemapAndLinkDMAtoUARTRx+0x4a>
 800a110:	e237      	b.n	800a582 <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a112:	4abd      	ldr	r2, [pc, #756]	; (800a408 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d100      	bne.n	800a11a <RemapAndLinkDMAtoUARTRx+0x52>
 800a118:	e235      	b.n	800a586 <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a11a:	4abc      	ldr	r2, [pc, #752]	; (800a40c <RemapAndLinkDMAtoUARTRx+0x344>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d100      	bne.n	800a122 <RemapAndLinkDMAtoUARTRx+0x5a>
 800a120:	e23d      	b.n	800a59e <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a122:	4abb      	ldr	r2, [pc, #748]	; (800a410 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d100      	bne.n	800a12a <RemapAndLinkDMAtoUARTRx+0x62>
 800a128:	e245      	b.n	800a5b6 <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a12a:	4aba      	ldr	r2, [pc, #744]	; (800a414 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d145      	bne.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800a130:	4ab9      	ldr	r2, [pc, #740]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a132:	23a8      	movs	r3, #168	; 0xa8
 800a134:	4db9      	ldr	r5, [pc, #740]	; (800a41c <RemapAndLinkDMAtoUARTRx+0x354>)
 800a136:	58d4      	ldr	r4, [r2, r3]
 800a138:	402c      	ands	r4, r5
 800a13a:	50d4      	str	r4, [r2, r3]
 800a13c:	24e0      	movs	r4, #224	; 0xe0
 800a13e:	58d5      	ldr	r5, [r2, r3]
 800a140:	0124      	lsls	r4, r4, #4
 800a142:	432c      	orrs	r4, r5
 800a144:	50d4      	str	r4, [r2, r3]
 800a146:	e039      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a148:	680b      	ldr	r3, [r1, #0]
 800a14a:	4aad      	ldr	r2, [pc, #692]	; (800a400 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d100      	bne.n	800a152 <RemapAndLinkDMAtoUARTRx+0x8a>
 800a150:	e07e      	b.n	800a250 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a152:	4aac      	ldr	r2, [pc, #688]	; (800a404 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d100      	bne.n	800a15a <RemapAndLinkDMAtoUARTRx+0x92>
 800a158:	e085      	b.n	800a266 <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a15a:	4aab      	ldr	r2, [pc, #684]	; (800a408 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d030      	beq.n	800a1c2 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a160:	4aaa      	ldr	r2, [pc, #680]	; (800a40c <RemapAndLinkDMAtoUARTRx+0x344>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d039      	beq.n	800a1da <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a166:	4aaa      	ldr	r2, [pc, #680]	; (800a410 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d042      	beq.n	800a1f2 <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a16c:	4aa9      	ldr	r2, [pc, #676]	; (800a414 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d124      	bne.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800a172:	4aa9      	ldr	r2, [pc, #676]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a174:	23a8      	movs	r3, #168	; 0xa8
 800a176:	4da9      	ldr	r5, [pc, #676]	; (800a41c <RemapAndLinkDMAtoUARTRx+0x354>)
 800a178:	58d4      	ldr	r4, [r2, r3]
 800a17a:	402c      	ands	r4, r5
 800a17c:	50d4      	str	r4, [r2, r3]
 800a17e:	2480      	movs	r4, #128	; 0x80
 800a180:	58d5      	ldr	r5, [r2, r3]
 800a182:	0124      	lsls	r4, r4, #4
 800a184:	432c      	orrs	r4, r5
 800a186:	50d4      	str	r4, [r2, r3]
 800a188:	e018      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a18a:	680b      	ldr	r3, [r1, #0]
 800a18c:	4a9c      	ldr	r2, [pc, #624]	; (800a400 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d100      	bne.n	800a194 <RemapAndLinkDMAtoUARTRx+0xcc>
 800a192:	e0b0      	b.n	800a2f6 <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a194:	4a9b      	ldr	r2, [pc, #620]	; (800a404 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d100      	bne.n	800a19c <RemapAndLinkDMAtoUARTRx+0xd4>
 800a19a:	e0b7      	b.n	800a30c <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a19c:	4a9a      	ldr	r2, [pc, #616]	; (800a408 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d100      	bne.n	800a1a4 <RemapAndLinkDMAtoUARTRx+0xdc>
 800a1a2:	e0bf      	b.n	800a324 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a1a4:	4a99      	ldr	r2, [pc, #612]	; (800a40c <RemapAndLinkDMAtoUARTRx+0x344>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d100      	bne.n	800a1ac <RemapAndLinkDMAtoUARTRx+0xe4>
 800a1aa:	e0c7      	b.n	800a33c <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a1ac:	4a98      	ldr	r2, [pc, #608]	; (800a410 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d100      	bne.n	800a1b4 <RemapAndLinkDMAtoUARTRx+0xec>
 800a1b2:	e0cf      	b.n	800a354 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a1b4:	4a97      	ldr	r2, [pc, #604]	; (800a414 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d100      	bne.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
 800a1ba:	e0d6      	b.n	800a36a <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800a1bc:	6641      	str	r1, [r0, #100]	; 0x64
 800a1be:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800a1c2:	23a8      	movs	r3, #168	; 0xa8
 800a1c4:	4a96      	ldr	r2, [pc, #600]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a1c6:	4d97      	ldr	r5, [pc, #604]	; (800a424 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a1c8:	58d4      	ldr	r4, [r2, r3]
 800a1ca:	402c      	ands	r4, r5
 800a1cc:	50d4      	str	r4, [r2, r3]
 800a1ce:	2480      	movs	r4, #128	; 0x80
 800a1d0:	58d5      	ldr	r5, [r2, r3]
 800a1d2:	0324      	lsls	r4, r4, #12
 800a1d4:	432c      	orrs	r4, r5
 800a1d6:	50d4      	str	r4, [r2, r3]
 800a1d8:	e7f0      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800a1da:	23a8      	movs	r3, #168	; 0xa8
 800a1dc:	4a90      	ldr	r2, [pc, #576]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a1de:	4d92      	ldr	r5, [pc, #584]	; (800a428 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a1e0:	58d4      	ldr	r4, [r2, r3]
 800a1e2:	402c      	ands	r4, r5
 800a1e4:	50d4      	str	r4, [r2, r3]
 800a1e6:	2480      	movs	r4, #128	; 0x80
 800a1e8:	58d5      	ldr	r5, [r2, r3]
 800a1ea:	0424      	lsls	r4, r4, #16
 800a1ec:	432c      	orrs	r4, r5
 800a1ee:	50d4      	str	r4, [r2, r3]
 800a1f0:	e7e4      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800a1f2:	23a8      	movs	r3, #168	; 0xa8
 800a1f4:	25f0      	movs	r5, #240	; 0xf0
 800a1f6:	4a88      	ldr	r2, [pc, #544]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a1f8:	58d4      	ldr	r4, [r2, r3]
 800a1fa:	43ac      	bics	r4, r5
 800a1fc:	50d4      	str	r4, [r2, r3]
 800a1fe:	58d4      	ldr	r4, [r2, r3]
 800a200:	3d70      	subs	r5, #112	; 0x70
 800a202:	432c      	orrs	r4, r5
 800a204:	50d4      	str	r4, [r2, r3]
 800a206:	e7d9      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a208:	680b      	ldr	r3, [r1, #0]
 800a20a:	4a7d      	ldr	r2, [pc, #500]	; (800a400 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d100      	bne.n	800a212 <RemapAndLinkDMAtoUARTRx+0x14a>
 800a210:	e0ad      	b.n	800a36e <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a212:	4a7c      	ldr	r2, [pc, #496]	; (800a404 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d100      	bne.n	800a21a <RemapAndLinkDMAtoUARTRx+0x152>
 800a218:	e0b4      	b.n	800a384 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a21a:	4a7b      	ldr	r2, [pc, #492]	; (800a408 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d100      	bne.n	800a222 <RemapAndLinkDMAtoUARTRx+0x15a>
 800a220:	e0b2      	b.n	800a388 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a222:	4a7a      	ldr	r2, [pc, #488]	; (800a40c <RemapAndLinkDMAtoUARTRx+0x344>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d100      	bne.n	800a22a <RemapAndLinkDMAtoUARTRx+0x162>
 800a228:	e0ba      	b.n	800a3a0 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a22a:	4a79      	ldr	r2, [pc, #484]	; (800a410 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d100      	bne.n	800a232 <RemapAndLinkDMAtoUARTRx+0x16a>
 800a230:	e0c2      	b.n	800a3b8 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a232:	4a78      	ldr	r2, [pc, #480]	; (800a414 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d1c1      	bne.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800a238:	4a77      	ldr	r2, [pc, #476]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a23a:	23a8      	movs	r3, #168	; 0xa8
 800a23c:	4d77      	ldr	r5, [pc, #476]	; (800a41c <RemapAndLinkDMAtoUARTRx+0x354>)
 800a23e:	58d4      	ldr	r4, [r2, r3]
 800a240:	402c      	ands	r4, r5
 800a242:	50d4      	str	r4, [r2, r3]
 800a244:	24a0      	movs	r4, #160	; 0xa0
 800a246:	58d5      	ldr	r5, [r2, r3]
 800a248:	0124      	lsls	r4, r4, #4
 800a24a:	432c      	orrs	r4, r5
 800a24c:	50d4      	str	r4, [r2, r3]
 800a24e:	e7b5      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a250:	23a8      	movs	r3, #168	; 0xa8
 800a252:	250f      	movs	r5, #15
 800a254:	4a72      	ldr	r2, [pc, #456]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a256:	58d4      	ldr	r4, [r2, r3]
 800a258:	43ac      	bics	r4, r5
 800a25a:	50d4      	str	r4, [r2, r3]
 800a25c:	58d4      	ldr	r4, [r2, r3]
 800a25e:	3d07      	subs	r5, #7
 800a260:	432c      	orrs	r4, r5
 800a262:	50d4      	str	r4, [r2, r3]
 800a264:	e7aa      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a266:	4a6e      	ldr	r2, [pc, #440]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a268:	e784      	b.n	800a174 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a26a:	680b      	ldr	r3, [r1, #0]
 800a26c:	4a64      	ldr	r2, [pc, #400]	; (800a400 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d01c      	beq.n	800a2ac <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a272:	4a64      	ldr	r2, [pc, #400]	; (800a404 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d024      	beq.n	800a2c2 <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a278:	4a63      	ldr	r2, [pc, #396]	; (800a408 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d023      	beq.n	800a2c6 <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a27e:	4a63      	ldr	r2, [pc, #396]	; (800a40c <RemapAndLinkDMAtoUARTRx+0x344>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d02c      	beq.n	800a2de <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a284:	4a62      	ldr	r2, [pc, #392]	; (800a410 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d100      	bne.n	800a28c <RemapAndLinkDMAtoUARTRx+0x1c4>
 800a28a:	e0a0      	b.n	800a3ce <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a28c:	4a61      	ldr	r2, [pc, #388]	; (800a414 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d000      	beq.n	800a294 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800a292:	e793      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800a294:	4a60      	ldr	r2, [pc, #384]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a296:	23a8      	movs	r3, #168	; 0xa8
 800a298:	4d60      	ldr	r5, [pc, #384]	; (800a41c <RemapAndLinkDMAtoUARTRx+0x354>)
 800a29a:	58d4      	ldr	r4, [r2, r3]
 800a29c:	402c      	ands	r4, r5
 800a29e:	50d4      	str	r4, [r2, r3]
 800a2a0:	24b0      	movs	r4, #176	; 0xb0
 800a2a2:	58d5      	ldr	r5, [r2, r3]
 800a2a4:	0124      	lsls	r4, r4, #4
 800a2a6:	432c      	orrs	r4, r5
 800a2a8:	50d4      	str	r4, [r2, r3]
 800a2aa:	e787      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800a2ac:	23a8      	movs	r3, #168	; 0xa8
 800a2ae:	250f      	movs	r5, #15
 800a2b0:	4a5b      	ldr	r2, [pc, #364]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2b2:	58d4      	ldr	r4, [r2, r3]
 800a2b4:	43ac      	bics	r4, r5
 800a2b6:	50d4      	str	r4, [r2, r3]
 800a2b8:	58d4      	ldr	r4, [r2, r3]
 800a2ba:	3d04      	subs	r5, #4
 800a2bc:	432c      	orrs	r4, r5
 800a2be:	50d4      	str	r4, [r2, r3]
 800a2c0:	e77c      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800a2c2:	4a57      	ldr	r2, [pc, #348]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2c4:	e7e7      	b.n	800a296 <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800a2c6:	23a8      	movs	r3, #168	; 0xa8
 800a2c8:	4a55      	ldr	r2, [pc, #340]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2ca:	4d56      	ldr	r5, [pc, #344]	; (800a424 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a2cc:	58d4      	ldr	r4, [r2, r3]
 800a2ce:	402c      	ands	r4, r5
 800a2d0:	50d4      	str	r4, [r2, r3]
 800a2d2:	24b0      	movs	r4, #176	; 0xb0
 800a2d4:	58d5      	ldr	r5, [r2, r3]
 800a2d6:	0324      	lsls	r4, r4, #12
 800a2d8:	432c      	orrs	r4, r5
 800a2da:	50d4      	str	r4, [r2, r3]
 800a2dc:	e76e      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800a2de:	23a8      	movs	r3, #168	; 0xa8
 800a2e0:	4a4f      	ldr	r2, [pc, #316]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2e2:	4d51      	ldr	r5, [pc, #324]	; (800a428 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a2e4:	58d4      	ldr	r4, [r2, r3]
 800a2e6:	402c      	ands	r4, r5
 800a2e8:	50d4      	str	r4, [r2, r3]
 800a2ea:	24b0      	movs	r4, #176	; 0xb0
 800a2ec:	58d5      	ldr	r5, [r2, r3]
 800a2ee:	0424      	lsls	r4, r4, #16
 800a2f0:	432c      	orrs	r4, r5
 800a2f2:	50d4      	str	r4, [r2, r3]
 800a2f4:	e762      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800a2f6:	23a8      	movs	r3, #168	; 0xa8
 800a2f8:	250f      	movs	r5, #15
 800a2fa:	4a49      	ldr	r2, [pc, #292]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2fc:	58d4      	ldr	r4, [r2, r3]
 800a2fe:	43ac      	bics	r4, r5
 800a300:	50d4      	str	r4, [r2, r3]
 800a302:	58d4      	ldr	r4, [r2, r3]
 800a304:	3d06      	subs	r5, #6
 800a306:	432c      	orrs	r4, r5
 800a308:	50d4      	str	r4, [r2, r3]
 800a30a:	e757      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800a30c:	4a44      	ldr	r2, [pc, #272]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a30e:	23a8      	movs	r3, #168	; 0xa8
 800a310:	4d42      	ldr	r5, [pc, #264]	; (800a41c <RemapAndLinkDMAtoUARTRx+0x354>)
 800a312:	58d4      	ldr	r4, [r2, r3]
 800a314:	402c      	ands	r4, r5
 800a316:	50d4      	str	r4, [r2, r3]
 800a318:	2490      	movs	r4, #144	; 0x90
 800a31a:	58d5      	ldr	r5, [r2, r3]
 800a31c:	0124      	lsls	r4, r4, #4
 800a31e:	432c      	orrs	r4, r5
 800a320:	50d4      	str	r4, [r2, r3]
 800a322:	e74b      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800a324:	23a8      	movs	r3, #168	; 0xa8
 800a326:	4a3e      	ldr	r2, [pc, #248]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a328:	4d3e      	ldr	r5, [pc, #248]	; (800a424 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a32a:	58d4      	ldr	r4, [r2, r3]
 800a32c:	402c      	ands	r4, r5
 800a32e:	50d4      	str	r4, [r2, r3]
 800a330:	2490      	movs	r4, #144	; 0x90
 800a332:	58d5      	ldr	r5, [r2, r3]
 800a334:	0324      	lsls	r4, r4, #12
 800a336:	432c      	orrs	r4, r5
 800a338:	50d4      	str	r4, [r2, r3]
 800a33a:	e73f      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800a33c:	23a8      	movs	r3, #168	; 0xa8
 800a33e:	4a38      	ldr	r2, [pc, #224]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a340:	4d39      	ldr	r5, [pc, #228]	; (800a428 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a342:	58d4      	ldr	r4, [r2, r3]
 800a344:	402c      	ands	r4, r5
 800a346:	50d4      	str	r4, [r2, r3]
 800a348:	2490      	movs	r4, #144	; 0x90
 800a34a:	58d5      	ldr	r5, [r2, r3]
 800a34c:	0424      	lsls	r4, r4, #16
 800a34e:	432c      	orrs	r4, r5
 800a350:	50d4      	str	r4, [r2, r3]
 800a352:	e733      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800a354:	23a8      	movs	r3, #168	; 0xa8
 800a356:	25f0      	movs	r5, #240	; 0xf0
 800a358:	4a2f      	ldr	r2, [pc, #188]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a35a:	58d4      	ldr	r4, [r2, r3]
 800a35c:	43ac      	bics	r4, r5
 800a35e:	50d4      	str	r4, [r2, r3]
 800a360:	58d4      	ldr	r4, [r2, r3]
 800a362:	3d60      	subs	r5, #96	; 0x60
 800a364:	432c      	orrs	r4, r5
 800a366:	50d4      	str	r4, [r2, r3]
 800a368:	e728      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a36a:	4a2b      	ldr	r2, [pc, #172]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a36c:	e7cf      	b.n	800a30e <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800a36e:	23a8      	movs	r3, #168	; 0xa8
 800a370:	250f      	movs	r5, #15
 800a372:	4a2b      	ldr	r2, [pc, #172]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a374:	58d4      	ldr	r4, [r2, r3]
 800a376:	43ac      	bics	r4, r5
 800a378:	50d4      	str	r4, [r2, r3]
 800a37a:	58d4      	ldr	r4, [r2, r3]
 800a37c:	3d05      	subs	r5, #5
 800a37e:	432c      	orrs	r4, r5
 800a380:	50d4      	str	r4, [r2, r3]
 800a382:	e71b      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800a384:	4a26      	ldr	r2, [pc, #152]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a386:	e758      	b.n	800a23a <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800a388:	23a8      	movs	r3, #168	; 0xa8
 800a38a:	4a25      	ldr	r2, [pc, #148]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a38c:	4d25      	ldr	r5, [pc, #148]	; (800a424 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a38e:	58d4      	ldr	r4, [r2, r3]
 800a390:	402c      	ands	r4, r5
 800a392:	50d4      	str	r4, [r2, r3]
 800a394:	24a0      	movs	r4, #160	; 0xa0
 800a396:	58d5      	ldr	r5, [r2, r3]
 800a398:	0324      	lsls	r4, r4, #12
 800a39a:	432c      	orrs	r4, r5
 800a39c:	50d4      	str	r4, [r2, r3]
 800a39e:	e70d      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800a3a0:	23a8      	movs	r3, #168	; 0xa8
 800a3a2:	4a1f      	ldr	r2, [pc, #124]	; (800a420 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a3a4:	4d20      	ldr	r5, [pc, #128]	; (800a428 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a3a6:	58d4      	ldr	r4, [r2, r3]
 800a3a8:	402c      	ands	r4, r5
 800a3aa:	50d4      	str	r4, [r2, r3]
 800a3ac:	24a0      	movs	r4, #160	; 0xa0
 800a3ae:	58d5      	ldr	r5, [r2, r3]
 800a3b0:	0424      	lsls	r4, r4, #16
 800a3b2:	432c      	orrs	r4, r5
 800a3b4:	50d4      	str	r4, [r2, r3]
 800a3b6:	e701      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800a3b8:	23a8      	movs	r3, #168	; 0xa8
 800a3ba:	25f0      	movs	r5, #240	; 0xf0
 800a3bc:	4a16      	ldr	r2, [pc, #88]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a3be:	58d4      	ldr	r4, [r2, r3]
 800a3c0:	43ac      	bics	r4, r5
 800a3c2:	50d4      	str	r4, [r2, r3]
 800a3c4:	58d4      	ldr	r4, [r2, r3]
 800a3c6:	3d50      	subs	r5, #80	; 0x50
 800a3c8:	432c      	orrs	r4, r5
 800a3ca:	50d4      	str	r4, [r2, r3]
 800a3cc:	e6f6      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800a3ce:	23a8      	movs	r3, #168	; 0xa8
 800a3d0:	25f0      	movs	r5, #240	; 0xf0
 800a3d2:	4a11      	ldr	r2, [pc, #68]	; (800a418 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a3d4:	58d4      	ldr	r4, [r2, r3]
 800a3d6:	43ac      	bics	r4, r5
 800a3d8:	50d4      	str	r4, [r2, r3]
 800a3da:	58d4      	ldr	r4, [r2, r3]
 800a3dc:	3d40      	subs	r5, #64	; 0x40
 800a3de:	432c      	orrs	r4, r5
 800a3e0:	50d4      	str	r4, [r2, r3]
 800a3e2:	e6eb      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
 800a3e4:	40013800 	.word	0x40013800
 800a3e8:	40004400 	.word	0x40004400
 800a3ec:	40004800 	.word	0x40004800
 800a3f0:	40004c00 	.word	0x40004c00
 800a3f4:	40005000 	.word	0x40005000
 800a3f8:	40011400 	.word	0x40011400
 800a3fc:	40011800 	.word	0x40011800
 800a400:	40020008 	.word	0x40020008
 800a404:	40020030 	.word	0x40020030
 800a408:	40020058 	.word	0x40020058
 800a40c:	4002006c 	.word	0x4002006c
 800a410:	4002041c 	.word	0x4002041c
 800a414:	40020430 	.word	0x40020430
 800a418:	40020400 	.word	0x40020400
 800a41c:	fffff0ff 	.word	0xfffff0ff
 800a420:	40020000 	.word	0x40020000
 800a424:	fff0ffff 	.word	0xfff0ffff
 800a428:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a42c:	680b      	ldr	r3, [r1, #0]
 800a42e:	4a8e      	ldr	r2, [pc, #568]	; (800a668 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d03b      	beq.n	800a4ac <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800a434:	4a8d      	ldr	r2, [pc, #564]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d043      	beq.n	800a4c2 <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800a43a:	4a8d      	ldr	r2, [pc, #564]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d042      	beq.n	800a4c6 <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800a440:	4a8c      	ldr	r2, [pc, #560]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d04b      	beq.n	800a4de <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800a446:	4a8c      	ldr	r2, [pc, #560]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d054      	beq.n	800a4f6 <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800a44c:	4a8b      	ldr	r2, [pc, #556]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d000      	beq.n	800a454 <RemapAndLinkDMAtoUARTRx+0x38c>
 800a452:	e6b3      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800a454:	4a8a      	ldr	r2, [pc, #552]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a456:	23a8      	movs	r3, #168	; 0xa8
 800a458:	4d8a      	ldr	r5, [pc, #552]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a45a:	58d4      	ldr	r4, [r2, r3]
 800a45c:	402c      	ands	r4, r5
 800a45e:	50d4      	str	r4, [r2, r3]
 800a460:	24c0      	movs	r4, #192	; 0xc0
 800a462:	58d5      	ldr	r5, [r2, r3]
 800a464:	0124      	lsls	r4, r4, #4
 800a466:	432c      	orrs	r4, r5
 800a468:	50d4      	str	r4, [r2, r3]
 800a46a:	e6a7      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a46c:	680b      	ldr	r3, [r1, #0]
 800a46e:	4a7e      	ldr	r2, [pc, #504]	; (800a668 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d04b      	beq.n	800a50c <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800a474:	4a7d      	ldr	r2, [pc, #500]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d053      	beq.n	800a522 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800a47a:	4a7d      	ldr	r2, [pc, #500]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d052      	beq.n	800a526 <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800a480:	4a7c      	ldr	r2, [pc, #496]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d05b      	beq.n	800a53e <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800a486:	4a7c      	ldr	r2, [pc, #496]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d064      	beq.n	800a556 <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800a48c:	4a7b      	ldr	r2, [pc, #492]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d000      	beq.n	800a494 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800a492:	e693      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800a494:	4a7a      	ldr	r2, [pc, #488]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a496:	23a8      	movs	r3, #168	; 0xa8
 800a498:	4d7a      	ldr	r5, [pc, #488]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a49a:	58d4      	ldr	r4, [r2, r3]
 800a49c:	402c      	ands	r4, r5
 800a49e:	50d4      	str	r4, [r2, r3]
 800a4a0:	24d0      	movs	r4, #208	; 0xd0
 800a4a2:	58d5      	ldr	r5, [r2, r3]
 800a4a4:	0124      	lsls	r4, r4, #4
 800a4a6:	432c      	orrs	r4, r5
 800a4a8:	50d4      	str	r4, [r2, r3]
 800a4aa:	e687      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800a4ac:	23a8      	movs	r3, #168	; 0xa8
 800a4ae:	250f      	movs	r5, #15
 800a4b0:	4a75      	ldr	r2, [pc, #468]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4b2:	58d4      	ldr	r4, [r2, r3]
 800a4b4:	43ac      	bics	r4, r5
 800a4b6:	50d4      	str	r4, [r2, r3]
 800a4b8:	58d4      	ldr	r4, [r2, r3]
 800a4ba:	3d03      	subs	r5, #3
 800a4bc:	432c      	orrs	r4, r5
 800a4be:	50d4      	str	r4, [r2, r3]
 800a4c0:	e67c      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800a4c2:	4a71      	ldr	r2, [pc, #452]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4c4:	e7c7      	b.n	800a456 <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800a4c6:	23a8      	movs	r3, #168	; 0xa8
 800a4c8:	4a6f      	ldr	r2, [pc, #444]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4ca:	4d70      	ldr	r5, [pc, #448]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a4cc:	58d4      	ldr	r4, [r2, r3]
 800a4ce:	402c      	ands	r4, r5
 800a4d0:	50d4      	str	r4, [r2, r3]
 800a4d2:	24c0      	movs	r4, #192	; 0xc0
 800a4d4:	58d5      	ldr	r5, [r2, r3]
 800a4d6:	0324      	lsls	r4, r4, #12
 800a4d8:	432c      	orrs	r4, r5
 800a4da:	50d4      	str	r4, [r2, r3]
 800a4dc:	e66e      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800a4de:	23a8      	movs	r3, #168	; 0xa8
 800a4e0:	4a69      	ldr	r2, [pc, #420]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4e2:	4d6b      	ldr	r5, [pc, #428]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a4e4:	58d4      	ldr	r4, [r2, r3]
 800a4e6:	402c      	ands	r4, r5
 800a4e8:	50d4      	str	r4, [r2, r3]
 800a4ea:	24c0      	movs	r4, #192	; 0xc0
 800a4ec:	58d5      	ldr	r5, [r2, r3]
 800a4ee:	0424      	lsls	r4, r4, #16
 800a4f0:	432c      	orrs	r4, r5
 800a4f2:	50d4      	str	r4, [r2, r3]
 800a4f4:	e662      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800a4f6:	23a8      	movs	r3, #168	; 0xa8
 800a4f8:	25f0      	movs	r5, #240	; 0xf0
 800a4fa:	4a61      	ldr	r2, [pc, #388]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a4fc:	58d4      	ldr	r4, [r2, r3]
 800a4fe:	43ac      	bics	r4, r5
 800a500:	50d4      	str	r4, [r2, r3]
 800a502:	58d4      	ldr	r4, [r2, r3]
 800a504:	3d30      	subs	r5, #48	; 0x30
 800a506:	432c      	orrs	r4, r5
 800a508:	50d4      	str	r4, [r2, r3]
 800a50a:	e657      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800a50c:	23a8      	movs	r3, #168	; 0xa8
 800a50e:	250f      	movs	r5, #15
 800a510:	4a5d      	ldr	r2, [pc, #372]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a512:	58d4      	ldr	r4, [r2, r3]
 800a514:	43ac      	bics	r4, r5
 800a516:	50d4      	str	r4, [r2, r3]
 800a518:	58d4      	ldr	r4, [r2, r3]
 800a51a:	3d02      	subs	r5, #2
 800a51c:	432c      	orrs	r4, r5
 800a51e:	50d4      	str	r4, [r2, r3]
 800a520:	e64c      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800a522:	4a59      	ldr	r2, [pc, #356]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a524:	e7b7      	b.n	800a496 <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800a526:	23a8      	movs	r3, #168	; 0xa8
 800a528:	4a57      	ldr	r2, [pc, #348]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a52a:	4d58      	ldr	r5, [pc, #352]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a52c:	58d4      	ldr	r4, [r2, r3]
 800a52e:	402c      	ands	r4, r5
 800a530:	50d4      	str	r4, [r2, r3]
 800a532:	24d0      	movs	r4, #208	; 0xd0
 800a534:	58d5      	ldr	r5, [r2, r3]
 800a536:	0324      	lsls	r4, r4, #12
 800a538:	432c      	orrs	r4, r5
 800a53a:	50d4      	str	r4, [r2, r3]
 800a53c:	e63e      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800a53e:	23a8      	movs	r3, #168	; 0xa8
 800a540:	4a51      	ldr	r2, [pc, #324]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a542:	4d53      	ldr	r5, [pc, #332]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a544:	58d4      	ldr	r4, [r2, r3]
 800a546:	402c      	ands	r4, r5
 800a548:	50d4      	str	r4, [r2, r3]
 800a54a:	24d0      	movs	r4, #208	; 0xd0
 800a54c:	58d5      	ldr	r5, [r2, r3]
 800a54e:	0424      	lsls	r4, r4, #16
 800a550:	432c      	orrs	r4, r5
 800a552:	50d4      	str	r4, [r2, r3]
 800a554:	e632      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800a556:	23a8      	movs	r3, #168	; 0xa8
 800a558:	25f0      	movs	r5, #240	; 0xf0
 800a55a:	4a49      	ldr	r2, [pc, #292]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a55c:	58d4      	ldr	r4, [r2, r3]
 800a55e:	43ac      	bics	r4, r5
 800a560:	50d4      	str	r4, [r2, r3]
 800a562:	58d4      	ldr	r4, [r2, r3]
 800a564:	3d20      	subs	r5, #32
 800a566:	432c      	orrs	r4, r5
 800a568:	50d4      	str	r4, [r2, r3]
 800a56a:	e627      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800a56c:	23a8      	movs	r3, #168	; 0xa8
 800a56e:	250f      	movs	r5, #15
 800a570:	4a45      	ldr	r2, [pc, #276]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a572:	58d4      	ldr	r4, [r2, r3]
 800a574:	43ac      	bics	r4, r5
 800a576:	50d4      	str	r4, [r2, r3]
 800a578:	58d4      	ldr	r4, [r2, r3]
 800a57a:	3d01      	subs	r5, #1
 800a57c:	432c      	orrs	r4, r5
 800a57e:	50d4      	str	r4, [r2, r3]
 800a580:	e61c      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800a582:	4a41      	ldr	r2, [pc, #260]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a584:	e5d5      	b.n	800a132 <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800a586:	23a8      	movs	r3, #168	; 0xa8
 800a588:	4a3f      	ldr	r2, [pc, #252]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a58a:	4d40      	ldr	r5, [pc, #256]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a58c:	58d4      	ldr	r4, [r2, r3]
 800a58e:	402c      	ands	r4, r5
 800a590:	50d4      	str	r4, [r2, r3]
 800a592:	24e0      	movs	r4, #224	; 0xe0
 800a594:	58d5      	ldr	r5, [r2, r3]
 800a596:	0324      	lsls	r4, r4, #12
 800a598:	432c      	orrs	r4, r5
 800a59a:	50d4      	str	r4, [r2, r3]
 800a59c:	e60e      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800a59e:	23a8      	movs	r3, #168	; 0xa8
 800a5a0:	4a39      	ldr	r2, [pc, #228]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5a2:	4d3b      	ldr	r5, [pc, #236]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a5a4:	58d4      	ldr	r4, [r2, r3]
 800a5a6:	402c      	ands	r4, r5
 800a5a8:	50d4      	str	r4, [r2, r3]
 800a5aa:	24e0      	movs	r4, #224	; 0xe0
 800a5ac:	58d5      	ldr	r5, [r2, r3]
 800a5ae:	0424      	lsls	r4, r4, #16
 800a5b0:	432c      	orrs	r4, r5
 800a5b2:	50d4      	str	r4, [r2, r3]
 800a5b4:	e602      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800a5b6:	23a8      	movs	r3, #168	; 0xa8
 800a5b8:	25f0      	movs	r5, #240	; 0xf0
 800a5ba:	4a31      	ldr	r2, [pc, #196]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a5bc:	58d4      	ldr	r4, [r2, r3]
 800a5be:	43ac      	bics	r4, r5
 800a5c0:	50d4      	str	r4, [r2, r3]
 800a5c2:	58d4      	ldr	r4, [r2, r3]
 800a5c4:	3d10      	subs	r5, #16
 800a5c6:	432c      	orrs	r4, r5
 800a5c8:	50d4      	str	r4, [r2, r3]
 800a5ca:	e5f7      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800a5cc:	4a31      	ldr	r2, [pc, #196]	; (800a694 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d000      	beq.n	800a5d4 <RemapAndLinkDMAtoUARTRx+0x50c>
 800a5d2:	e5f3      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
 800a5d4:	680b      	ldr	r3, [r1, #0]
 800a5d6:	4a24      	ldr	r2, [pc, #144]	; (800a668 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d01b      	beq.n	800a614 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800a5dc:	4a23      	ldr	r2, [pc, #140]	; (800a66c <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d022      	beq.n	800a628 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800a5e2:	4a23      	ldr	r2, [pc, #140]	; (800a670 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d021      	beq.n	800a62c <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800a5e8:	4a22      	ldr	r2, [pc, #136]	; (800a674 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d02a      	beq.n	800a644 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800a5ee:	4a22      	ldr	r2, [pc, #136]	; (800a678 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d033      	beq.n	800a65c <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800a5f4:	4a21      	ldr	r2, [pc, #132]	; (800a67c <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d000      	beq.n	800a5fc <RemapAndLinkDMAtoUARTRx+0x534>
 800a5fa:	e5df      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800a5fc:	4a20      	ldr	r2, [pc, #128]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a5fe:	23a8      	movs	r3, #168	; 0xa8
 800a600:	4d20      	ldr	r5, [pc, #128]	; (800a684 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a602:	58d4      	ldr	r4, [r2, r3]
 800a604:	402c      	ands	r4, r5
 800a606:	50d4      	str	r4, [r2, r3]
 800a608:	24f0      	movs	r4, #240	; 0xf0
 800a60a:	58d5      	ldr	r5, [r2, r3]
 800a60c:	0124      	lsls	r4, r4, #4
 800a60e:	432c      	orrs	r4, r5
 800a610:	50d4      	str	r4, [r2, r3]
 800a612:	e5d3      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800a614:	23a8      	movs	r3, #168	; 0xa8
 800a616:	260f      	movs	r6, #15
 800a618:	4a1b      	ldr	r2, [pc, #108]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a61a:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800a61c:	43b5      	bics	r5, r6
 800a61e:	50d5      	str	r5, [r2, r3]
 800a620:	58d4      	ldr	r4, [r2, r3]
 800a622:	4334      	orrs	r4, r6
 800a624:	50d4      	str	r4, [r2, r3]
 800a626:	e5c9      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800a628:	4a17      	ldr	r2, [pc, #92]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a62a:	e7e8      	b.n	800a5fe <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800a62c:	23a8      	movs	r3, #168	; 0xa8
 800a62e:	4a16      	ldr	r2, [pc, #88]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a630:	4d16      	ldr	r5, [pc, #88]	; (800a68c <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a632:	58d4      	ldr	r4, [r2, r3]
 800a634:	402c      	ands	r4, r5
 800a636:	50d4      	str	r4, [r2, r3]
 800a638:	24f0      	movs	r4, #240	; 0xf0
 800a63a:	58d5      	ldr	r5, [r2, r3]
 800a63c:	0324      	lsls	r4, r4, #12
 800a63e:	432c      	orrs	r4, r5
 800a640:	50d4      	str	r4, [r2, r3]
 800a642:	e5bb      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800a644:	23a8      	movs	r3, #168	; 0xa8
 800a646:	4a10      	ldr	r2, [pc, #64]	; (800a688 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a648:	4d11      	ldr	r5, [pc, #68]	; (800a690 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a64a:	58d4      	ldr	r4, [r2, r3]
 800a64c:	402c      	ands	r4, r5
 800a64e:	50d4      	str	r4, [r2, r3]
 800a650:	24f0      	movs	r4, #240	; 0xf0
 800a652:	58d5      	ldr	r5, [r2, r3]
 800a654:	0424      	lsls	r4, r4, #16
 800a656:	432c      	orrs	r4, r5
 800a658:	50d4      	str	r4, [r2, r3]
 800a65a:	e5af      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800a65c:	23a8      	movs	r3, #168	; 0xa8
 800a65e:	4a08      	ldr	r2, [pc, #32]	; (800a680 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a660:	26f0      	movs	r6, #240	; 0xf0
 800a662:	58d5      	ldr	r5, [r2, r3]
 800a664:	e7da      	b.n	800a61c <RemapAndLinkDMAtoUARTRx+0x554>
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	40020008 	.word	0x40020008
 800a66c:	40020030 	.word	0x40020030
 800a670:	40020058 	.word	0x40020058
 800a674:	4002006c 	.word	0x4002006c
 800a678:	4002041c 	.word	0x4002041c
 800a67c:	40020430 	.word	0x40020430
 800a680:	40020400 	.word	0x40020400
 800a684:	fffff0ff 	.word	0xfffff0ff
 800a688:	40020000 	.word	0x40020000
 800a68c:	fff0ffff 	.word	0xfff0ffff
 800a690:	ff0fffff 	.word	0xff0fffff
 800a694:	40011c00 	.word	0x40011c00

0800a698 <DMA_MSG_RX_Setup>:
{	
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	000d      	movs	r5, r1
 800a69c:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800a69e:	f7ff fd13 	bl	800a0c8 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800a6a2:	0028      	movs	r0, r5
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f7ff fc59 	bl	8009f5c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800a6aa:	0020      	movs	r0, r4
 800a6ac:	f7ff fb10 	bl	8009cd0 <GetPort>
 800a6b0:	1e41      	subs	r1, r0, #1
 800a6b2:	4803      	ldr	r0, [pc, #12]	; (800a6c0 <DMA_MSG_RX_Setup+0x28>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	1809      	adds	r1, r1, r0
 800a6b8:	0020      	movs	r0, r4
 800a6ba:	f006 ff4f 	bl	801155c <HAL_UART_Receive_DMA>
}
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	20001eb8 	.word	0x20001eb8

0800a6c4 <SetupMessagingRxDMAs>:
{	
 800a6c4:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800a6c6:	4c18      	ldr	r4, [pc, #96]	; (800a728 <SetupMessagingRxDMAs+0x64>)
 800a6c8:	7863      	ldrb	r3, [r4, #1]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d027      	beq.n	800a71e <SetupMessagingRxDMAs+0x5a>
	if (portStatus[P2] == FREE)	
 800a6ce:	78a3      	ldrb	r3, [r4, #2]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01f      	beq.n	800a714 <SetupMessagingRxDMAs+0x50>
	if (portStatus[P3] == FREE)
 800a6d4:	78e3      	ldrb	r3, [r4, #3]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d017      	beq.n	800a70a <SetupMessagingRxDMAs+0x46>
	if (portStatus[P4] == FREE)
 800a6da:	7923      	ldrb	r3, [r4, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00f      	beq.n	800a700 <SetupMessagingRxDMAs+0x3c>
	if (portStatus[P5] == FREE)
 800a6e0:	7963      	ldrb	r3, [r4, #5]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d007      	beq.n	800a6f6 <SetupMessagingRxDMAs+0x32>
	if (portStatus[P6] == FREE)
 800a6e6:	79a3      	ldrb	r3, [r4, #6]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d103      	bne.n	800a6f4 <SetupMessagingRxDMAs+0x30>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800a6ec:	490f      	ldr	r1, [pc, #60]	; (800a72c <SetupMessagingRxDMAs+0x68>)
 800a6ee:	4810      	ldr	r0, [pc, #64]	; (800a730 <SetupMessagingRxDMAs+0x6c>)
 800a6f0:	f7ff ffd2 	bl	800a698 <DMA_MSG_RX_Setup>
}
 800a6f4:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800a6f6:	490f      	ldr	r1, [pc, #60]	; (800a734 <SetupMessagingRxDMAs+0x70>)
 800a6f8:	480f      	ldr	r0, [pc, #60]	; (800a738 <SetupMessagingRxDMAs+0x74>)
 800a6fa:	f7ff ffcd 	bl	800a698 <DMA_MSG_RX_Setup>
 800a6fe:	e7f2      	b.n	800a6e6 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800a700:	490e      	ldr	r1, [pc, #56]	; (800a73c <SetupMessagingRxDMAs+0x78>)
 800a702:	480f      	ldr	r0, [pc, #60]	; (800a740 <SetupMessagingRxDMAs+0x7c>)
 800a704:	f7ff ffc8 	bl	800a698 <DMA_MSG_RX_Setup>
 800a708:	e7ea      	b.n	800a6e0 <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800a70a:	490e      	ldr	r1, [pc, #56]	; (800a744 <SetupMessagingRxDMAs+0x80>)
 800a70c:	480e      	ldr	r0, [pc, #56]	; (800a748 <SetupMessagingRxDMAs+0x84>)
 800a70e:	f7ff ffc3 	bl	800a698 <DMA_MSG_RX_Setup>
 800a712:	e7e2      	b.n	800a6da <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800a714:	490d      	ldr	r1, [pc, #52]	; (800a74c <SetupMessagingRxDMAs+0x88>)
 800a716:	480e      	ldr	r0, [pc, #56]	; (800a750 <SetupMessagingRxDMAs+0x8c>)
 800a718:	f7ff ffbe 	bl	800a698 <DMA_MSG_RX_Setup>
 800a71c:	e7da      	b.n	800a6d4 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800a71e:	490d      	ldr	r1, [pc, #52]	; (800a754 <SetupMessagingRxDMAs+0x90>)
 800a720:	480d      	ldr	r0, [pc, #52]	; (800a758 <SetupMessagingRxDMAs+0x94>)
 800a722:	f7ff ffb9 	bl	800a698 <DMA_MSG_RX_Setup>
 800a726:	e7d2      	b.n	800a6ce <SetupMessagingRxDMAs+0xa>
 800a728:	20000c2c 	.word	0x20000c2c
 800a72c:	2000258c 	.word	0x2000258c
 800a730:	20006d60 	.word	0x20006d60
 800a734:	20002554 	.word	0x20002554
 800a738:	20006c10 	.word	0x20006c10
 800a73c:	2000251c 	.word	0x2000251c
 800a740:	20006c80 	.word	0x20006c80
 800a744:	200024e4 	.word	0x200024e4
 800a748:	20006ba0 	.word	0x20006ba0
 800a74c:	200024ac 	.word	0x200024ac
 800a750:	20006cf0 	.word	0x20006cf0
 800a754:	20002474 	.word	0x20002474
 800a758:	20006dd0 	.word	0x20006dd0

0800a75c <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800a75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75e:	46d6      	mov	lr, sl
 800a760:	464f      	mov	r7, r9
 800a762:	4646      	mov	r6, r8
 800a764:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800a766:	1e47      	subs	r7, r0, #1
 800a768:	00fe      	lsls	r6, r7, #3
 800a76a:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <SwitchStreamDMAToMsg+0x80>)
 800a76c:	1bf6      	subs	r6, r6, r7
 800a76e:	00f6      	lsls	r6, r6, #3
 800a770:	4698      	mov	r8, r3
 800a772:	46b2      	mov	sl, r6
 800a774:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800a776:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800a778:	4650      	mov	r0, sl
 800a77a:	f004 ff23 	bl	800f5c4 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a77e:	4643      	mov	r3, r8
 800a780:	2400      	movs	r4, #0
 800a782:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800a784:	4b16      	ldr	r3, [pc, #88]	; (800a7e0 <SwitchStreamDMAToMsg+0x84>)
 800a786:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800a788:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a78a:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800a78c:	4b15      	ldr	r3, [pc, #84]	; (800a7e4 <SwitchStreamDMAToMsg+0x88>)
 800a78e:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800a790:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <SwitchStreamDMAToMsg+0x8c>)
 800a792:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800a794:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a796:	2380      	movs	r3, #128	; 0x80
 800a798:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a79a:	3b60      	subs	r3, #96	; 0x60
 800a79c:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a79e:	2380      	movs	r3, #128	; 0x80
 800a7a0:	019b      	lsls	r3, r3, #6
 800a7a2:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7a4:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a7a6:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7a8:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7aa:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800a7ac:	0028      	movs	r0, r5
 800a7ae:	f004 feb1 	bl	800f514 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800a7b2:	4653      	mov	r3, sl
 800a7b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a7b6:	f7ff fa8b 	bl	8009cd0 <GetPort>
 800a7ba:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <SwitchStreamDMAToMsg+0x90>)
 800a7bc:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800a7be:	4643      	mov	r3, r8
 800a7c0:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800a7c4:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800a7c6:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800a7c8:	f002 fa8e 	bl	800cce8 <GetUart>
 800a7cc:	0029      	movs	r1, r5
 800a7ce:	f7ff ff63 	bl	800a698 <DMA_MSG_RX_Setup>
}
 800a7d2:	bc1c      	pop	{r2, r3, r4}
 800a7d4:	4690      	mov	r8, r2
 800a7d6:	4699      	mov	r9, r3
 800a7d8:	46a2      	mov	sl, r4
 800a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7dc:	2000227c 	.word	0x2000227c
 800a7e0:	200019c0 	.word	0x200019c0
 800a7e4:	200019d8 	.word	0x200019d8
 800a7e8:	20002474 	.word	0x20002474
 800a7ec:	20000c2c 	.word	0x20000c2c
 800a7f0:	200019a8 	.word	0x200019a8

0800a7f4 <DMA_STREAM_Setup>:
{	
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	0016      	movs	r6, r2
 800a7f8:	0005      	movs	r5, r0
 800a7fa:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800a7fc:	f7ff fa68 	bl	8009cd0 <GetPort>
	hDMA = &streamDMA[port-1];
 800a800:	3801      	subs	r0, #1
 800a802:	00c4      	lsls	r4, r0, #3
 800a804:	1a24      	subs	r4, r4, r0
 800a806:	480a      	ldr	r0, [pc, #40]	; (800a830 <DMA_STREAM_Setup+0x3c>)
 800a808:	00e4      	lsls	r4, r4, #3
 800a80a:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800a80c:	0021      	movs	r1, r4
 800a80e:	0028      	movs	r0, r5
 800a810:	f7ff fc5a 	bl	800a0c8 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800a814:	0020      	movs	r0, r4
 800a816:	2101      	movs	r1, #1
 800a818:	f7ff fba0 	bl	8009f5c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800a81c:	2369      	movs	r3, #105	; 0x69
 800a81e:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800a820:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800a822:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800a824:	0028      	movs	r0, r5
 800a826:	0032      	movs	r2, r6
 800a828:	3128      	adds	r1, #40	; 0x28
 800a82a:	f006 fe97 	bl	801155c <HAL_UART_Receive_DMA>
}
 800a82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a830:	2000227c 	.word	0x2000227c

0800a834 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800a834:	2310      	movs	r3, #16
 800a836:	4807      	ldr	r0, [pc, #28]	; (800a854 <CRC_Init+0x20>)
{
 800a838:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800a83a:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800a83c:	4b06      	ldr	r3, [pc, #24]	; (800a858 <CRC_Init+0x24>)
 800a83e:	6003      	str	r3, [r0, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800a844:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800a846:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a848:	3303      	adds	r3, #3
 800a84a:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800a84c:	f004 fd90 	bl	800f370 <HAL_CRC_Init>
}
 800a850:	bd10      	pop	{r4, pc}
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	20006e40 	.word	0x20006e40
 800a858:	40023000 	.word	0x40023000

0800a85c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800a85c:	2340      	movs	r3, #64	; 0x40
 800a85e:	4a05      	ldr	r2, [pc, #20]	; (800a874 <HAL_CRC_MspInit+0x18>)
{
 800a860:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800a862:	6951      	ldr	r1, [r2, #20]
 800a864:	4319      	orrs	r1, r3
 800a866:	6151      	str	r1, [r2, #20]
 800a868:	6952      	ldr	r2, [r2, #20]
 800a86a:	4013      	ands	r3, r2
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	9b01      	ldr	r3, [sp, #4]
}
 800a870:	b002      	add	sp, #8
 800a872:	4770      	bx	lr
 800a874:	40021000 	.word	0x40021000

0800a878 <CalculateCRC8>:

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800a878:	2300      	movs	r3, #0
{
 800a87a:	b570      	push	{r4, r5, r6, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	0005      	movs	r5, r0
 800a880:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800a882:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800a884:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800a886:	2d00      	cmp	r5, #0
 800a888:	d019      	beq.n	800a8be <CalculateCRC8+0x46>
 800a88a:	2900      	cmp	r1, #0
 800a88c:	d017      	beq.n	800a8be <CalculateCRC8+0x46>
	if(size < 4)
 800a88e:	2903      	cmp	r1, #3
 800a890:	d817      	bhi.n	800a8c2 <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800a892:	466a      	mov	r2, sp
 800a894:	782b      	ldrb	r3, [r5, #0]
 800a896:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800a898:	2901      	cmp	r1, #1
 800a89a:	d00a      	beq.n	800a8b2 <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800a89c:	2300      	movs	r3, #0
 800a89e:	3c02      	subs	r4, #2
 800a8a0:	b2a4      	uxth	r4, r4
 800a8a2:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800a8a4:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800a8a6:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800a8a8:	5cea      	ldrb	r2, [r5, r3]
 800a8aa:	3104      	adds	r1, #4
 800a8ac:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800a8ae:	429c      	cmp	r4, r3
 800a8b0:	d1f8      	bne.n	800a8a4 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	a901      	add	r1, sp, #4
 800a8b6:	4814      	ldr	r0, [pc, #80]	; (800a908 <CalculateCRC8+0x90>)
 800a8b8:	f004 fdb8 	bl	800f42c <HAL_CRC_Calculate>
 800a8bc:	b2c0      	uxtb	r0, r0
}
 800a8be:	b002      	add	sp, #8
 800a8c0:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800a8c2:	4e11      	ldr	r6, [pc, #68]	; (800a908 <CalculateCRC8+0x90>)
 800a8c4:	088a      	lsrs	r2, r1, #2
 800a8c6:	0030      	movs	r0, r6
 800a8c8:	0029      	movs	r1, r5
 800a8ca:	f004 fdaf 	bl	800f42c <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	0013      	movs	r3, r2
 800a8d2:	4023      	ands	r3, r4
 800a8d4:	d015      	beq.n	800a902 <CalculateCRC8+0x8a>
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800a8da:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800a8dc:	4394      	bics	r4, r2
 800a8de:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800a8e0:	1c62      	adds	r2, r4, #1
 800a8e2:	5d28      	ldrb	r0, [r5, r4]
 800a8e4:	466c      	mov	r4, sp
 800a8e6:	3404      	adds	r4, #4
 800a8e8:	b2d2      	uxtb	r2, r2
 800a8ea:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800a8ec:	4299      	cmp	r1, r3
 800a8ee:	d003      	beq.n	800a8f8 <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800a8f0:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800a8f2:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d1f3      	bne.n	800a8e0 <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	a901      	add	r1, sp, #4
 800a8fc:	0030      	movs	r0, r6
 800a8fe:	f004 fd6b 	bl	800f3d8 <HAL_CRC_Accumulate>
 800a902:	b2c0      	uxtb	r0, r0
 800a904:	e7db      	b.n	800a8be <CalculateCRC8+0x46>
 800a906:	46c0      	nop			; (mov r8, r8)
 800a908:	20006e40 	.word	0x20006e40

0800a90c <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	000d      	movs	r5, r1
 800a910:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a912:	4c25      	ldr	r4, [pc, #148]	; (800a9a8 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800a914:	f005 fb1e 	bl	800ff54 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a918:	4924      	ldr	r1, [pc, #144]	; (800a9ac <EE_VerifyPageFullWriteVariable+0xa0>)
 800a91a:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a91c:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a91e:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a920:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800a922:	2b00      	cmp	r3, #0
 800a924:	d105      	bne.n	800a932 <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800a926:	4b22      	ldr	r3, [pc, #136]	; (800a9b0 <EE_VerifyPageFullWriteVariable+0xa4>)
 800a928:	429a      	cmp	r2, r3
 800a92a:	d007      	beq.n	800a93c <EE_VerifyPageFullWriteVariable+0x30>
 800a92c:	4a21      	ldr	r2, [pc, #132]	; (800a9b4 <EE_VerifyPageFullWriteVariable+0xa8>)
 800a92e:	0023      	movs	r3, r4
 800a930:	e007      	b.n	800a942 <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800a932:	2a00      	cmp	r2, #0
 800a934:	d122      	bne.n	800a97c <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800a936:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <EE_VerifyPageFullWriteVariable+0xa4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d0f7      	beq.n	800a92c <EE_VerifyPageFullWriteVariable+0x20>
 800a93c:	000c      	movs	r4, r1
 800a93e:	000b      	movs	r3, r1
 800a940:	4a1d      	ldr	r2, [pc, #116]	; (800a9b8 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	d103      	bne.n	800a950 <EE_VerifyPageFullWriteVariable+0x44>
 800a948:	e009      	b.n	800a95e <EE_VerifyPageFullWriteVariable+0x52>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	3301      	adds	r3, #1
 800a94e:	d006      	beq.n	800a95e <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800a950:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800a952:	42a2      	cmp	r2, r4
 800a954:	d8f9      	bhi.n	800a94a <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800a956:	f005 fb0f 	bl	800ff78 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800a95a:	2080      	movs	r0, #128	; 0x80
}
 800a95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800a95e:	002a      	movs	r2, r5
 800a960:	2300      	movs	r3, #0
 800a962:	0021      	movs	r1, r4
 800a964:	2001      	movs	r0, #1
 800a966:	f005 fb55 	bl	8010014 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800a96a:	4814      	ldr	r0, [pc, #80]	; (800a9bc <EE_VerifyPageFullWriteVariable+0xb0>)
 800a96c:	f005 fb0e 	bl	800ff8c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800a970:	2800      	cmp	r0, #0
 800a972:	d005      	beq.n	800a980 <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800a974:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <EE_VerifyPageFullWriteVariable+0xb4>)
 800a976:	69d8      	ldr	r0, [r3, #28]
 800a978:	b280      	uxth	r0, r0
 800a97a:	e7ef      	b.n	800a95c <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800a97c:	20ab      	movs	r0, #171	; 0xab
 800a97e:	e7ed      	b.n	800a95c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a980:	2701      	movs	r7, #1
 800a982:	4d10      	ldr	r5, [pc, #64]	; (800a9c4 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800a984:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a986:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800a988:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a98a:	43bb      	bics	r3, r7
 800a98c:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800a98e:	2001      	movs	r0, #1
 800a990:	2300      	movs	r3, #0
 800a992:	f005 fb3f 	bl	8010014 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800a996:	4809      	ldr	r0, [pc, #36]	; (800a9bc <EE_VerifyPageFullWriteVariable+0xb0>)
 800a998:	f005 faf8 	bl	800ff8c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d1e9      	bne.n	800a974 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a9a0:	692b      	ldr	r3, [r5, #16]
 800a9a2:	43bb      	bics	r3, r7
 800a9a4:	612b      	str	r3, [r5, #16]
 800a9a6:	e7e5      	b.n	800a974 <EE_VerifyPageFullWriteVariable+0x68>
 800a9a8:	0801f000 	.word	0x0801f000
 800a9ac:	0801e000 	.word	0x0801e000
 800a9b0:	0000eeee 	.word	0x0000eeee
 800a9b4:	0801fffe 	.word	0x0801fffe
 800a9b8:	0801effe 	.word	0x0801effe
 800a9bc:	0000c350 	.word	0x0000c350
 800a9c0:	20006fc0 	.word	0x20006fc0
 800a9c4:	40022000 	.word	0x40022000

0800a9c8 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a9c8:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800a9ca:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a9cc:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a9ce:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <EE_ReadVariable+0x4c>)
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800a9d4:	2a00      	cmp	r2, #0
 800a9d6:	d005      	beq.n	800a9e4 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d117      	bne.n	800aa0c <EE_ReadVariable+0x44>
 800a9dc:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <EE_ReadVariable+0x50>)
 800a9de:	4c0f      	ldr	r4, [pc, #60]	; (800aa1c <EE_ReadVariable+0x54>)
 800a9e0:	001a      	movs	r2, r3
 800a9e2:	e002      	b.n	800a9ea <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <EE_ReadVariable+0x58>)
 800a9e6:	4c0f      	ldr	r4, [pc, #60]	; (800aa24 <EE_ReadVariable+0x5c>)
 800a9e8:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800a9ea:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800a9ec:	4290      	cmp	r0, r2
 800a9ee:	d103      	bne.n	800a9f8 <EE_ReadVariable+0x30>
 800a9f0:	e007      	b.n	800aa02 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800a9f2:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800a9f4:	4282      	cmp	r2, r0
 800a9f6:	d004      	beq.n	800aa02 <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800a9f8:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	d8f9      	bhi.n	800a9f2 <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800a9fe:	2001      	movs	r0, #1
}
 800aa00:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800aa02:	3b02      	subs	r3, #2
 800aa04:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800aa06:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800aa08:	800b      	strh	r3, [r1, #0]
			break;
 800aa0a:	e7f9      	b.n	800aa00 <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800aa0c:	20ab      	movs	r0, #171	; 0xab
 800aa0e:	e7f7      	b.n	800aa00 <EE_ReadVariable+0x38>
 800aa10:	0801e000 	.word	0x0801e000
 800aa14:	0801f000 	.word	0x0801f000
 800aa18:	0801fffe 	.word	0x0801fffe
 800aa1c:	0801f002 	.word	0x0801f002
 800aa20:	0801effe 	.word	0x0801effe
 800aa24:	0801e002 	.word	0x0801e002

0800aa28 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	46d6      	mov	lr, sl
 800aa2c:	4646      	mov	r6, r8
 800aa2e:	464f      	mov	r7, r9
 800aa30:	000c      	movs	r4, r1
 800aa32:	b5c0      	push	{r6, r7, lr}
 800aa34:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800aa36:	f005 fa8d 	bl	800ff54 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800aa3a:	0021      	movs	r1, r4
 800aa3c:	0030      	movs	r0, r6
 800aa3e:	f7ff ff65 	bl	800a90c <EE_VerifyPageFullWriteVariable>
 800aa42:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800aa44:	2880      	cmp	r0, #128	; 0x80
 800aa46:	d007      	beq.n	800aa58 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800aa48:	f005 fa96 	bl	800ff78 <HAL_FLASH_Lock>
}
 800aa4c:	0028      	movs	r0, r5
 800aa4e:	bc1c      	pop	{r2, r3, r4}
 800aa50:	4690      	mov	r8, r2
 800aa52:	4699      	mov	r9, r3
 800aa54:	46a2      	mov	sl, r4
 800aa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800aa58:	f005 fa7c 	bl	800ff54 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800aa5c:	4935      	ldr	r1, [pc, #212]	; (800ab34 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800aa5e:	4a36      	ldr	r2, [pc, #216]	; (800ab38 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800aa60:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800aa62:	8813      	ldrh	r3, [r2, #0]
 800aa64:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d013      	beq.n	800aa92 <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800aa6a:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1eb      	bne.n	800aa48 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800aa70:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800aa72:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800aa74:	4a31      	ldr	r2, [pc, #196]	; (800ab3c <EE_WriteVariable+0x114>)
 800aa76:	2300      	movs	r3, #0
 800aa78:	4641      	mov	r1, r8
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	f005 faca 	bl	8010014 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aa80:	482f      	ldr	r0, [pc, #188]	; (800ab40 <EE_WriteVariable+0x118>)
 800aa82:	f005 fa83 	bl	800ff8c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d006      	beq.n	800aa98 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <EE_WriteVariable+0x11c>)
 800aa8c:	69dd      	ldr	r5, [r3, #28]
 800aa8e:	b2ad      	uxth	r5, r5
 800aa90:	e7da      	b.n	800aa48 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800aa92:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800aa94:	4690      	mov	r8, r2
 800aa96:	e7ed      	b.n	800aa74 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa98:	2101      	movs	r1, #1
 800aa9a:	4a2b      	ldr	r2, [pc, #172]	; (800ab48 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800aa9c:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa9e:	6913      	ldr	r3, [r2, #16]
 800aaa0:	438b      	bics	r3, r1
 800aaa2:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800aaa4:	0021      	movs	r1, r4
 800aaa6:	f7ff ff31 	bl	800a90c <EE_VerifyPageFullWriteVariable>
 800aaaa:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800aaac:	d1cc      	bne.n	800aa48 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800aaae:	4b27      	ldr	r3, [pc, #156]	; (800ab4c <EE_WriteVariable+0x124>)
 800aab0:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800aab2:	4f27      	ldr	r7, [pc, #156]	; (800ab50 <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800aab4:	469a      	mov	sl, r3
 800aab6:	e003      	b.n	800aac0 <EE_WriteVariable+0x98>
 800aab8:	3401      	adds	r4, #1
 800aaba:	b2a4      	uxth	r4, r4
 800aabc:	4554      	cmp	r4, sl
 800aabe:	d00f      	beq.n	800aae0 <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800aac0:	42a6      	cmp	r6, r4
 800aac2:	d0f9      	beq.n	800aab8 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800aac4:	0039      	movs	r1, r7
 800aac6:	0020      	movs	r0, r4
 800aac8:	f7ff ff7e 	bl	800a9c8 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800aacc:	2801      	cmp	r0, #1
 800aace:	d0f3      	beq.n	800aab8 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800aad0:	8839      	ldrh	r1, [r7, #0]
 800aad2:	0020      	movs	r0, r4
 800aad4:	f7ff ff1a 	bl	800a90c <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800aad8:	2800      	cmp	r0, #0
 800aada:	d0ed      	beq.n	800aab8 <EE_WriteVariable+0x90>
 800aadc:	0005      	movs	r5, r0
 800aade:	e7b3      	b.n	800aa48 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800aae0:	4648      	mov	r0, r9
 800aae2:	f005 fb67 	bl	80101b4 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aae6:	4816      	ldr	r0, [pc, #88]	; (800ab40 <EE_WriteVariable+0x118>)
 800aae8:	f005 fa50 	bl	800ff8c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d1cc      	bne.n	800aa8a <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800aaf0:	2080      	movs	r0, #128	; 0x80
 800aaf2:	0100      	lsls	r0, r0, #4
 800aaf4:	4448      	add	r0, r9
 800aaf6:	f005 fb5d 	bl	80101b4 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aafa:	4811      	ldr	r0, [pc, #68]	; (800ab40 <EE_WriteVariable+0x118>)
 800aafc:	f005 fa46 	bl	800ff8c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d1c2      	bne.n	800aa8a <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab04:	2202      	movs	r2, #2
 800ab06:	4c10      	ldr	r4, [pc, #64]	; (800ab48 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ab08:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab0a:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ab0c:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab0e:	4393      	bics	r3, r2
 800ab10:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	f005 fa7d 	bl	8010014 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab1a:	4809      	ldr	r0, [pc, #36]	; (800ab40 <EE_WriteVariable+0x118>)
 800ab1c:	f005 fa36 	bl	800ff8c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1b2      	bne.n	800aa8a <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ab24:	2201      	movs	r2, #1
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	4393      	bics	r3, r2
 800ab2a:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800ab2c:	f005 fa24 	bl	800ff78 <HAL_FLASH_Lock>
 800ab30:	e78a      	b.n	800aa48 <EE_WriteVariable+0x20>
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	0801e000 	.word	0x0801e000
 800ab38:	0801f000 	.word	0x0801f000
 800ab3c:	0000eeee 	.word	0x0000eeee
 800ab40:	0000c350 	.word	0x0000c350
 800ab44:	20006fc0 	.word	0x20006fc0
 800ab48:	40022000 	.word	0x40022000
 800ab4c:	00000401 	.word	0x00000401
 800ab50:	200025c4 	.word	0x200025c4

0800ab54 <EE_Format>:
uint16_t EE_Format(void){
 800ab54:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800ab56:	f005 f9fd 	bl	800ff54 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ab5a:	481f      	ldr	r0, [pc, #124]	; (800abd8 <EE_Format+0x84>)
 800ab5c:	f005 fb2a 	bl	80101b4 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab60:	481e      	ldr	r0, [pc, #120]	; (800abdc <EE_Format+0x88>)
 800ab62:	f005 fa13 	bl	800ff8c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d003      	beq.n	800ab72 <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <EE_Format+0x8c>)
 800ab6c:	69d8      	ldr	r0, [r3, #28]
 800ab6e:	b280      	uxth	r0, r0
}
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ab72:	481c      	ldr	r0, [pc, #112]	; (800abe4 <EE_Format+0x90>)
 800ab74:	f005 fb1e 	bl	80101b4 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab78:	4818      	ldr	r0, [pc, #96]	; (800abdc <EE_Format+0x88>)
 800ab7a:	f005 fa07 	bl	800ff8c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d1f3      	bne.n	800ab6a <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab82:	2202      	movs	r2, #2
 800ab84:	4c18      	ldr	r4, [pc, #96]	; (800abe8 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ab86:	4914      	ldr	r1, [pc, #80]	; (800abd8 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab88:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ab8a:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab8c:	4393      	bics	r3, r2
 800ab8e:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ab90:	2200      	movs	r2, #0
 800ab92:	2300      	movs	r3, #0
 800ab94:	f005 fa3e 	bl	8010014 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab98:	4810      	ldr	r0, [pc, #64]	; (800abdc <EE_Format+0x88>)
 800ab9a:	f005 f9f7 	bl	800ff8c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d1e3      	bne.n	800ab6a <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aba2:	2501      	movs	r5, #1
 800aba4:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800aba6:	4811      	ldr	r0, [pc, #68]	; (800abec <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aba8:	43ab      	bics	r3, r5
 800abaa:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800abac:	f005 fb02 	bl	80101b4 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800abb0:	480a      	ldr	r0, [pc, #40]	; (800abdc <EE_Format+0x88>)
 800abb2:	f005 f9eb 	bl	800ff8c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d1d7      	bne.n	800ab6a <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800abba:	480d      	ldr	r0, [pc, #52]	; (800abf0 <EE_Format+0x9c>)
 800abbc:	f005 fafa 	bl	80101b4 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800abc0:	4806      	ldr	r0, [pc, #24]	; (800abdc <EE_Format+0x88>)
 800abc2:	f005 f9e3 	bl	800ff8c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d1cf      	bne.n	800ab6a <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	43ab      	bics	r3, r5
 800abce:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800abd0:	f005 f9d2 	bl	800ff78 <HAL_FLASH_Lock>
	return FlashStatus;
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7cb      	b.n	800ab70 <EE_Format+0x1c>
 800abd8:	0801e000 	.word	0x0801e000
 800abdc:	0000c350 	.word	0x0000c350
 800abe0:	20006fc0 	.word	0x20006fc0
 800abe4:	0801e800 	.word	0x0801e800
 800abe8:	40022000 	.word	0x40022000
 800abec:	0801f000 	.word	0x0801f000
 800abf0:	0801f800 	.word	0x0801f800

0800abf4 <EE_Init>:
uint16_t EE_Init(void){
 800abf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abf6:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800abf8:	4c9d      	ldr	r4, [pc, #628]	; (800ae70 <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800abfa:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800abfc:	4d9d      	ldr	r5, [pc, #628]	; (800ae74 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800abfe:	f005 f9a9 	bl	800ff54 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ac02:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800ac04:	499c      	ldr	r1, [pc, #624]	; (800ae78 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ac06:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ac08:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ac0a:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	d100      	bne.n	800ac12 <EE_Init+0x1e>
 800ac10:	e06f      	b.n	800acf2 <EE_Init+0xfe>
 800ac12:	489a      	ldr	r0, [pc, #616]	; (800ae7c <EE_Init+0x288>)
 800ac14:	4283      	cmp	r3, r0
 800ac16:	d05c      	beq.n	800acd2 <EE_Init+0xde>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00e      	beq.n	800ac3a <EE_Init+0x46>
			FlashStatus =EE_Format();
 800ac1c:	f7ff ff9a 	bl	800ab54 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac20:	4897      	ldr	r0, [pc, #604]	; (800ae80 <EE_Init+0x28c>)
 800ac22:	f005 f9b3 	bl	800ff8c <FLASH_WaitForLastOperation>
 800ac26:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800ac28:	2d00      	cmp	r5, #0
 800ac2a:	d102      	bne.n	800ac32 <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800ac2c:	f005 f9a4 	bl	800ff78 <HAL_FLASH_Lock>
	return HAL_OK;
 800ac30:	2500      	movs	r5, #0
}
 800ac32:	0028      	movs	r0, r5
 800ac34:	bc04      	pop	{r2}
 800ac36:	4690      	mov	r8, r2
 800ac38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	d0ee      	beq.n	800ac1c <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800ac3e:	4282      	cmp	r2, r0
 800ac40:	d100      	bne.n	800ac44 <EE_Init+0x50>
 800ac42:	e103      	b.n	800ae4c <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ac44:	4b8f      	ldr	r3, [pc, #572]	; (800ae84 <EE_Init+0x290>)
	int16_t x =-1;
 800ac46:	2601      	movs	r6, #1
 800ac48:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ac4a:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800ac4c:	4f8e      	ldr	r7, [pc, #568]	; (800ae88 <EE_Init+0x294>)
	int16_t x =-1;
 800ac4e:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800ac50:	883b      	ldrh	r3, [r7, #0]
 800ac52:	b2a5      	uxth	r5, r4
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	d100      	bne.n	800ac5a <EE_Init+0x66>
						x =VarIdx;
 800ac58:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800ac5a:	42b4      	cmp	r4, r6
 800ac5c:	d010      	beq.n	800ac80 <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ac5e:	4641      	mov	r1, r8
 800ac60:	0028      	movs	r0, r5
 800ac62:	f7ff feb1 	bl	800a9c8 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800ac66:	2801      	cmp	r0, #1
 800ac68:	d00a      	beq.n	800ac80 <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ac6a:	4643      	mov	r3, r8
 800ac6c:	0028      	movs	r0, r5
 800ac6e:	8819      	ldrh	r1, [r3, #0]
 800ac70:	f7ff fe4c 	bl	800a90c <EE_VerifyPageFullWriteVariable>
 800ac74:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac76:	4882      	ldr	r0, [pc, #520]	; (800ae80 <EE_Init+0x28c>)
 800ac78:	f005 f988 	bl	800ff8c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d1d8      	bne.n	800ac32 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ac80:	4b82      	ldr	r3, [pc, #520]	; (800ae8c <EE_Init+0x298>)
 800ac82:	3401      	adds	r4, #1
 800ac84:	429c      	cmp	r4, r3
 800ac86:	d1e3      	bne.n	800ac50 <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4979      	ldr	r1, [pc, #484]	; (800ae74 <EE_Init+0x280>)
 800ac8e:	2001      	movs	r0, #1
 800ac90:	f005 f9c0 	bl	8010014 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac94:	487a      	ldr	r0, [pc, #488]	; (800ae80 <EE_Init+0x28c>)
 800ac96:	f005 f979 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d125      	bne.n	800acea <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4c7b      	ldr	r4, [pc, #492]	; (800ae90 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aca2:	4873      	ldr	r0, [pc, #460]	; (800ae70 <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	4393      	bics	r3, r2
 800aca8:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800acaa:	f005 fa83 	bl	80101b4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800acae:	4874      	ldr	r0, [pc, #464]	; (800ae80 <EE_Init+0x28c>)
 800acb0:	f005 f96c 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d118      	bne.n	800acea <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800acb8:	4876      	ldr	r0, [pc, #472]	; (800ae94 <EE_Init+0x2a0>)
 800acba:	f005 fa7b 	bl	80101b4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800acbe:	4870      	ldr	r0, [pc, #448]	; (800ae80 <EE_Init+0x28c>)
 800acc0:	f005 f964 	bl	800ff8c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d110      	bne.n	800acea <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800acc8:	2202      	movs	r2, #2
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	4393      	bics	r3, r2
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	e7ac      	b.n	800ac2c <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800acd2:	2a00      	cmp	r2, #0
 800acd4:	d07b      	beq.n	800adce <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800acd6:	428a      	cmp	r2, r1
 800acd8:	d100      	bne.n	800acdc <EE_Init+0xe8>
 800acda:	e08f      	b.n	800adfc <EE_Init+0x208>
				FlashStatus =EE_Format();
 800acdc:	f7ff ff3a 	bl	800ab54 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ace0:	4867      	ldr	r0, [pc, #412]	; (800ae80 <EE_Init+0x28c>)
 800ace2:	f005 f953 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d0a0      	beq.n	800ac2c <EE_Init+0x38>
						return pFlash.ErrorCode;
 800acea:	4b6b      	ldr	r3, [pc, #428]	; (800ae98 <EE_Init+0x2a4>)
 800acec:	69dd      	ldr	r5, [r3, #28]
 800acee:	b2ad      	uxth	r5, r5
 800acf0:	e79f      	b.n	800ac32 <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d143      	bne.n	800ad7e <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800acf6:	4b63      	ldr	r3, [pc, #396]	; (800ae84 <EE_Init+0x290>)
	int16_t x =-1;
 800acf8:	2601      	movs	r6, #1
 800acfa:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800acfc:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800acfe:	4f67      	ldr	r7, [pc, #412]	; (800ae9c <EE_Init+0x2a8>)
	int16_t x =-1;
 800ad00:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800ad02:	883b      	ldrh	r3, [r7, #0]
 800ad04:	b2a5      	uxth	r5, r4
 800ad06:	42ab      	cmp	r3, r5
 800ad08:	d100      	bne.n	800ad0c <EE_Init+0x118>
						x =VarIdx;
 800ad0a:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800ad0c:	42b4      	cmp	r4, r6
 800ad0e:	d011      	beq.n	800ad34 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ad10:	4641      	mov	r1, r8
 800ad12:	0028      	movs	r0, r5
 800ad14:	f7ff fe58 	bl	800a9c8 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800ad18:	2801      	cmp	r0, #1
 800ad1a:	d00b      	beq.n	800ad34 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ad1c:	4643      	mov	r3, r8
 800ad1e:	0028      	movs	r0, r5
 800ad20:	8819      	ldrh	r1, [r3, #0]
 800ad22:	f7ff fdf3 	bl	800a90c <EE_VerifyPageFullWriteVariable>
 800ad26:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad28:	4855      	ldr	r0, [pc, #340]	; (800ae80 <EE_Init+0x28c>)
 800ad2a:	f005 f92f 	bl	800ff8c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d000      	beq.n	800ad34 <EE_Init+0x140>
 800ad32:	e77e      	b.n	800ac32 <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ad34:	4b55      	ldr	r3, [pc, #340]	; (800ae8c <EE_Init+0x298>)
 800ad36:	3401      	adds	r4, #1
 800ad38:	429c      	cmp	r4, r3
 800ad3a:	d1e2      	bne.n	800ad02 <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	494b      	ldr	r1, [pc, #300]	; (800ae70 <EE_Init+0x27c>)
 800ad42:	2001      	movs	r0, #1
 800ad44:	f005 f966 	bl	8010014 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad48:	484d      	ldr	r0, [pc, #308]	; (800ae80 <EE_Init+0x28c>)
 800ad4a:	f005 f91f 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d1cb      	bne.n	800acea <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ad52:	2201      	movs	r2, #1
 800ad54:	4c4e      	ldr	r4, [pc, #312]	; (800ae90 <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ad56:	4847      	ldr	r0, [pc, #284]	; (800ae74 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	4393      	bics	r3, r2
 800ad5c:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ad5e:	f005 fa29 	bl	80101b4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad62:	4847      	ldr	r0, [pc, #284]	; (800ae80 <EE_Init+0x28c>)
 800ad64:	f005 f912 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d1be      	bne.n	800acea <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ad6c:	484c      	ldr	r0, [pc, #304]	; (800aea0 <EE_Init+0x2ac>)
 800ad6e:	f005 fa21 	bl	80101b4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad72:	4843      	ldr	r0, [pc, #268]	; (800ae80 <EE_Init+0x28c>)
 800ad74:	f005 f90a 	bl	800ff8c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d0a5      	beq.n	800acc8 <EE_Init+0xd4>
 800ad7c:	e7b5      	b.n	800acea <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800ad7e:	4b3f      	ldr	r3, [pc, #252]	; (800ae7c <EE_Init+0x288>)
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d1ab      	bne.n	800acdc <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ad84:	0028      	movs	r0, r5
 800ad86:	f005 fa15 	bl	80101b4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad8a:	483d      	ldr	r0, [pc, #244]	; (800ae80 <EE_Init+0x28c>)
 800ad8c:	f005 f8fe 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d1aa      	bne.n	800acea <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ad94:	4842      	ldr	r0, [pc, #264]	; (800aea0 <EE_Init+0x2ac>)
 800ad96:	f005 fa0d 	bl	80101b4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad9a:	4839      	ldr	r0, [pc, #228]	; (800ae80 <EE_Init+0x28c>)
 800ad9c:	f005 f8f6 	bl	800ff8c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d1a2      	bne.n	800acea <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ada4:	2202      	movs	r2, #2
 800ada6:	4d3a      	ldr	r5, [pc, #232]	; (800ae90 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ada8:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800adaa:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800adac:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800adae:	4393      	bics	r3, r2
 800adb0:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800adb2:	2200      	movs	r2, #0
 800adb4:	2300      	movs	r3, #0
 800adb6:	f005 f92d 	bl	8010014 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adba:	4831      	ldr	r0, [pc, #196]	; (800ae80 <EE_Init+0x28c>)
 800adbc:	f005 f8e6 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d192      	bne.n	800acea <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800adc4:	2201      	movs	r2, #1
 800adc6:	692b      	ldr	r3, [r5, #16]
 800adc8:	4393      	bics	r3, r2
 800adca:	612b      	str	r3, [r5, #16]
 800adcc:	e72e      	b.n	800ac2c <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800adce:	0020      	movs	r0, r4
 800add0:	f005 f9f0 	bl	80101b4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800add4:	482a      	ldr	r0, [pc, #168]	; (800ae80 <EE_Init+0x28c>)
 800add6:	f005 f8d9 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800adda:	2800      	cmp	r0, #0
 800addc:	d185      	bne.n	800acea <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800adde:	482d      	ldr	r0, [pc, #180]	; (800ae94 <EE_Init+0x2a0>)
 800ade0:	f005 f9e8 	bl	80101b4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ade4:	4826      	ldr	r0, [pc, #152]	; (800ae80 <EE_Init+0x28c>)
 800ade6:	f005 f8d1 	bl	800ff8c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800adea:	2800      	cmp	r0, #0
 800adec:	d000      	beq.n	800adf0 <EE_Init+0x1fc>
 800adee:	e77c      	b.n	800acea <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800adf0:	2102      	movs	r1, #2
 800adf2:	4a27      	ldr	r2, [pc, #156]	; (800ae90 <EE_Init+0x29c>)
 800adf4:	6913      	ldr	r3, [r2, #16]
 800adf6:	438b      	bics	r3, r1
 800adf8:	6113      	str	r3, [r2, #16]
 800adfa:	e717      	b.n	800ac2c <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800adfc:	0020      	movs	r0, r4
 800adfe:	f005 f9d9 	bl	80101b4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae02:	481f      	ldr	r0, [pc, #124]	; (800ae80 <EE_Init+0x28c>)
 800ae04:	f005 f8c2 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d000      	beq.n	800ae0e <EE_Init+0x21a>
 800ae0c:	e76d      	b.n	800acea <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ae0e:	4821      	ldr	r0, [pc, #132]	; (800ae94 <EE_Init+0x2a0>)
 800ae10:	f005 f9d0 	bl	80101b4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae14:	481a      	ldr	r0, [pc, #104]	; (800ae80 <EE_Init+0x28c>)
 800ae16:	f005 f8b9 	bl	800ff8c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d000      	beq.n	800ae20 <EE_Init+0x22c>
 800ae1e:	e764      	b.n	800acea <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae20:	2202      	movs	r2, #2
 800ae22:	4c1b      	ldr	r4, [pc, #108]	; (800ae90 <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800ae24:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae26:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800ae28:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ae2a:	4393      	bics	r3, r2
 800ae2c:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	f005 f8ef 	bl	8010014 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae36:	4812      	ldr	r0, [pc, #72]	; (800ae80 <EE_Init+0x28c>)
 800ae38:	f005 f8a8 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d000      	beq.n	800ae42 <EE_Init+0x24e>
 800ae40:	e753      	b.n	800acea <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ae42:	2201      	movs	r2, #1
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	4393      	bics	r3, r2
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	e6ef      	b.n	800ac2c <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ae4c:	0028      	movs	r0, r5
 800ae4e:	f005 f9b1 	bl	80101b4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae52:	480b      	ldr	r0, [pc, #44]	; (800ae80 <EE_Init+0x28c>)
 800ae54:	f005 f89a 	bl	800ff8c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d000      	beq.n	800ae5e <EE_Init+0x26a>
 800ae5c:	e745      	b.n	800acea <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ae5e:	4810      	ldr	r0, [pc, #64]	; (800aea0 <EE_Init+0x2ac>)
 800ae60:	f005 f9a8 	bl	80101b4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae64:	4806      	ldr	r0, [pc, #24]	; (800ae80 <EE_Init+0x28c>)
 800ae66:	f005 f891 	bl	800ff8c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0c0      	beq.n	800adf0 <EE_Init+0x1fc>
 800ae6e:	e73c      	b.n	800acea <EE_Init+0xf6>
 800ae70:	0801e000 	.word	0x0801e000
 800ae74:	0801f000 	.word	0x0801f000
 800ae78:	0000eeee 	.word	0x0000eeee
 800ae7c:	0000ffff 	.word	0x0000ffff
 800ae80:	0000c350 	.word	0x0000c350
 800ae84:	200025c4 	.word	0x200025c4
 800ae88:	0801f006 	.word	0x0801f006
 800ae8c:	00000401 	.word	0x00000401
 800ae90:	40022000 	.word	0x40022000
 800ae94:	0801e800 	.word	0x0801e800
 800ae98:	20006fc0 	.word	0x20006fc0
 800ae9c:	0801e006 	.word	0x0801e006
 800aea0:	0801f800 	.word	0x0801f800

0800aea4 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aea4:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800aea6:	b500      	push	{lr}
 800aea8:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aeaa:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800aeac:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800aeae:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aeb0:	4669      	mov	r1, sp
 800aeb2:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800aeb4:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aeb6:	f005 f911 	bl	80100dc <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d102      	bne.n	800aec4 <EraseSector+0x20>
 800aebe:	9b00      	ldr	r3, [sp, #0]
 800aec0:	3301      	adds	r3, #1
 800aec2:	d002      	beq.n	800aeca <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800aec4:	2216      	movs	r2, #22
 800aec6:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <EraseSector+0x2c>)
 800aec8:	701a      	strb	r2, [r3, #0]

	return result;
}
 800aeca:	2000      	movs	r0, #0
 800aecc:	b005      	add	sp, #20
 800aece:	bd00      	pop	{pc}
 800aed0:	20000c3c 	.word	0x20000c3c

0800aed4 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800aed4:	2080      	movs	r0, #128	; 0x80
 800aed6:	4b1f      	ldr	r3, [pc, #124]	; (800af54 <GPIO_Init+0x80>)
 800aed8:	0300      	lsls	r0, r0, #12
 800aeda:	6959      	ldr	r1, [r3, #20]
{
 800aedc:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800aede:	4301      	orrs	r1, r0
 800aee0:	6159      	str	r1, [r3, #20]
 800aee2:	695a      	ldr	r2, [r3, #20]
{
 800aee4:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800aee6:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800aee8:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800aeea:	9200      	str	r2, [sp, #0]
 800aeec:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800aeee:	6959      	ldr	r1, [r3, #20]
 800aef0:	0280      	lsls	r0, r0, #10
 800aef2:	4301      	orrs	r1, r0
 800aef4:	6159      	str	r1, [r3, #20]
 800aef6:	695a      	ldr	r2, [r3, #20]
 800aef8:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800aefa:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800aefc:	9201      	str	r2, [sp, #4]
 800aefe:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800af00:	6959      	ldr	r1, [r3, #20]
 800af02:	0340      	lsls	r0, r0, #13
 800af04:	4301      	orrs	r1, r0
 800af06:	6159      	str	r1, [r3, #20]
 800af08:	695a      	ldr	r2, [r3, #20]
 800af0a:	4002      	ands	r2, r0
	__GPIOB_CLK_ENABLE();
 800af0c:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800af0e:	9202      	str	r2, [sp, #8]
 800af10:	9a02      	ldr	r2, [sp, #8]
	__GPIOB_CLK_ENABLE();
 800af12:	6959      	ldr	r1, [r3, #20]
 800af14:	02c0      	lsls	r0, r0, #11
 800af16:	4301      	orrs	r1, r0
 800af18:	6159      	str	r1, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800af1a:	2180      	movs	r1, #128	; 0x80
	__GPIOB_CLK_ENABLE();
 800af1c:	695a      	ldr	r2, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800af1e:	03c9      	lsls	r1, r1, #15
	__GPIOB_CLK_ENABLE();
 800af20:	4002      	ands	r2, r0
 800af22:	9203      	str	r2, [sp, #12]
 800af24:	9a03      	ldr	r2, [sp, #12]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800af26:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800af28:	2090      	movs	r0, #144	; 0x90
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800af2a:	430a      	orrs	r2, r1
 800af2c:	615a      	str	r2, [r3, #20]
 800af2e:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800af30:	05c0      	lsls	r0, r0, #23
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800af32:	400b      	ands	r3, r1
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800af38:	2380      	movs	r3, #128	; 0x80
 800af3a:	011b      	lsls	r3, r3, #4
 800af3c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af3e:	2301      	movs	r3, #1
 800af40:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af42:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800af44:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af46:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800af48:	3303      	adds	r3, #3
 800af4a:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800af4c:	f005 f944 	bl	80101d8 <HAL_GPIO_Init>
}
 800af50:	b00b      	add	sp, #44	; 0x2c
 800af52:	bd00      	pop	{pc}
 800af54:	40021000 	.word	0x40021000

0800af58 <GetPortGPIOs>:
}

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	0015      	movs	r5, r2
 800af5c:	001c      	movs	r4, r3
 800af5e:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800af60:	f001 fec2 	bl	800cce8 <GetUart>
	
	if (huart == &huart1) 
 800af64:	4a2c      	ldr	r2, [pc, #176]	; (800b018 <GetPortGPIOs+0xc0>)
	UART_HandleTypeDef* huart = GetUart(port);
 800af66:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800af68:	4290      	cmp	r0, r2
 800af6a:	d010      	beq.n	800af8e <GetPortGPIOs+0x36>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800af6c:	4a2b      	ldr	r2, [pc, #172]	; (800b01c <GetPortGPIOs+0xc4>)
 800af6e:	4290      	cmp	r0, r2
 800af70:	d031      	beq.n	800afd6 <GetPortGPIOs+0x7e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800af72:	4a2b      	ldr	r2, [pc, #172]	; (800b020 <GetPortGPIOs+0xc8>)
 800af74:	4290      	cmp	r0, r2
 800af76:	d017      	beq.n	800afa8 <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800af78:	4a2a      	ldr	r2, [pc, #168]	; (800b024 <GetPortGPIOs+0xcc>)
 800af7a:	4290      	cmp	r0, r2
 800af7c:	d036      	beq.n	800afec <GetPortGPIOs+0x94>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800af7e:	4a2a      	ldr	r2, [pc, #168]	; (800b028 <GetPortGPIOs+0xd0>)
 800af80:	4290      	cmp	r0, r2
 800af82:	d03e      	beq.n	800b002 <GetPortGPIOs+0xaa>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800af84:	4a29      	ldr	r2, [pc, #164]	; (800b02c <GetPortGPIOs+0xd4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800af86:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800af88:	4293      	cmp	r3, r2
 800af8a:	d019      	beq.n	800afc0 <GetPortGPIOs+0x68>
	
	return result;	
}
 800af8c:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800af8e:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800af90:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800af92:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800af94:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800af96:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800af98:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800af9a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800af9c:	2380      	movs	r3, #128	; 0x80
 800af9e:	9a04      	ldr	r2, [sp, #16]
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800afa4:	2000      	movs	r0, #0
 800afa6:	e7f1      	b.n	800af8c <GetPortGPIOs+0x34>
		*TX_Pin = USART3_TX_PIN;
 800afa8:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800afaa:	4b21      	ldr	r3, [pc, #132]	; (800b030 <GetPortGPIOs+0xd8>)
		*TX_Pin = USART3_TX_PIN;
 800afac:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800afae:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800afb0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800afb2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	9a04      	ldr	r2, [sp, #16]
 800afb8:	011b      	lsls	r3, r3, #4
 800afba:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7e5      	b.n	800af8c <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800afc0:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800afc2:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800afc4:	05db      	lsls	r3, r3, #23
 800afc6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800afc8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800afca:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800afcc:	2320      	movs	r3, #32
 800afce:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800afd0:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800afd2:	8013      	strh	r3, [r2, #0]
 800afd4:	e7da      	b.n	800af8c <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800afd6:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800afd8:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800afda:	05db      	lsls	r3, r3, #23
 800afdc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800afde:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800afe0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800afe2:	2308      	movs	r3, #8
 800afe4:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800afe6:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800afe8:	8013      	strh	r3, [r2, #0]
 800afea:	e7cf      	b.n	800af8c <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800afec:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800afee:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800aff0:	05db      	lsls	r3, r3, #23
 800aff2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800aff4:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800aff6:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800aff8:	2302      	movs	r3, #2
 800affa:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800affc:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800affe:	8013      	strh	r3, [r2, #0]
 800b000:	e7c4      	b.n	800af8c <GetPortGPIOs+0x34>
		*TX_Pin = USART5_TX_PIN;
 800b002:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b004:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <GetPortGPIOs+0xd8>)
	BOS_Status result = BOS_OK;
 800b006:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b008:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800b00a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800b00c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800b00e:	2310      	movs	r3, #16
 800b010:	9a04      	ldr	r2, [sp, #16]
 800b012:	8013      	strh	r3, [r2, #0]
 800b014:	e7ba      	b.n	800af8c <GetPortGPIOs+0x34>
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	20006c80 	.word	0x20006c80
 800b01c:	20006dd0 	.word	0x20006dd0
 800b020:	20006ba0 	.word	0x20006ba0
 800b024:	20006d60 	.word	0x20006d60
 800b028:	20006c10 	.word	0x20006c10
 800b02c:	20006cf0 	.word	0x20006cf0
 800b030:	48000400 	.word	0x48000400

0800b034 <IsFactoryReset>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800b034:	2080      	movs	r0, #128	; 0x80
 800b036:	4b38      	ldr	r3, [pc, #224]	; (800b118 <IsFactoryReset+0xe4>)
 800b038:	0280      	lsls	r0, r0, #10
 800b03a:	6959      	ldr	r1, [r3, #20]
{
 800b03c:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800b03e:	4301      	orrs	r1, r0
 800b040:	6159      	str	r1, [r3, #20]
 800b042:	695a      	ldr	r2, [r3, #20]
{
 800b044:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800b046:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800b048:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800b04a:	9209      	str	r2, [sp, #36]	; 0x24
 800b04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800b04e:	6959      	ldr	r1, [r3, #20]
 800b050:	02c0      	lsls	r0, r0, #11
 800b052:	4301      	orrs	r1, r0
 800b054:	6159      	str	r1, [r3, #20]
 800b056:	695a      	ldr	r2, [r3, #20]
  __GPIOC_CLK_ENABLE();
	__GPIOD_CLK_ENABLE();
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b058:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800b05a:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800b05c:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b05e:	920a      	str	r2, [sp, #40]	; 0x28
 800b060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800b062:	6959      	ldr	r1, [r3, #20]
 800b064:	0300      	lsls	r0, r0, #12
 800b066:	4301      	orrs	r1, r0
 800b068:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b06a:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b06c:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b06e:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800b070:	4002      	ands	r2, r0
 800b072:	920b      	str	r2, [sp, #44]	; 0x2c
 800b074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800b076:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b078:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800b07a:	430a      	orrs	r2, r1
 800b07c:	615a      	str	r2, [r3, #20]
 800b07e:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b080:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800b082:	400b      	ands	r3, r1
 800b084:	930c      	str	r3, [sp, #48]	; 0x30
 800b086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b088:	230e      	movs	r3, #14
 800b08a:	446b      	add	r3, sp
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	002a      	movs	r2, r5
 800b090:	ab06      	add	r3, sp, #24
 800b092:	a905      	add	r1, sp, #20
 800b094:	2001      	movs	r0, #1
 800b096:	f7ff ff5f 	bl	800af58 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b09a:	aa04      	add	r2, sp, #16
 800b09c:	ab08      	add	r3, sp, #32
 800b09e:	a907      	add	r1, sp, #28
 800b0a0:	9400      	str	r4, [sp, #0]
 800b0a2:	2006      	movs	r0, #6
 800b0a4:	f7ff ff58 	bl	800af58 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0a8:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0aa:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0ac:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b0ae:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b0b0:	a90d      	add	r1, sp, #52	; 0x34
 800b0b2:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b0b4:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b6:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b0b8:	f005 f88e 	bl	80101d8 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800b0bc:	2302      	movs	r3, #2
 800b0be:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b0c0:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b0c2:	a90d      	add	r1, sp, #52	; 0x34
 800b0c4:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b0c6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0c8:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b0ca:	f005 f885 	bl	80101d8 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800b0ce:	8829      	ldrh	r1, [r5, #0]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	9805      	ldr	r0, [sp, #20]
 800b0d4:	f005 fa20 	bl	8010518 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800b0d8:	2005      	movs	r0, #5
 800b0da:	f001 fbd3 	bl	800c884 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800b0de:	8821      	ldrh	r1, [r4, #0]
 800b0e0:	9808      	ldr	r0, [sp, #32]
 800b0e2:	f005 fa13 	bl	801050c <HAL_GPIO_ReadPin>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d006      	beq.n	800b0f8 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b0ea:	2201      	movs	r2, #1
	
	return 0;
 800b0ec:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b0ee:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <IsFactoryReset+0xe8>)
 800b0f0:	4252      	negs	r2, r2
 800b0f2:	601a      	str	r2, [r3, #0]
}
 800b0f4:	b012      	add	sp, #72	; 0x48
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800b0f8:	8829      	ldrh	r1, [r5, #0]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	9805      	ldr	r0, [sp, #20]
 800b0fe:	f005 fa0b 	bl	8010518 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800b102:	2005      	movs	r0, #5
 800b104:	f001 fbbe 	bl	800c884 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800b108:	8821      	ldrh	r1, [r4, #0]
 800b10a:	9808      	ldr	r0, [sp, #32]
 800b10c:	f005 f9fe 	bl	801050c <HAL_GPIO_ReadPin>
 800b110:	2801      	cmp	r0, #1
 800b112:	d1ea      	bne.n	800b0ea <IsFactoryReset+0xb6>
 800b114:	e7ee      	b.n	800b0f4 <IsFactoryReset+0xc0>
 800b116:	46c0      	nop			; (mov r8, r8)
 800b118:	40021000 	.word	0x40021000
 800b11c:	20007ff0 	.word	0x20007ff0

0800b120 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800b120:	4770      	bx	lr
 800b122:	46c0      	nop			; (mov r8, r8)

0800b124 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b124:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800b126:	4d37      	ldr	r5, [pc, #220]	; (800b204 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b128:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800b12a:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b12c:	0006      	movs	r6, r0
 800b12e:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800b130:	2b00      	cmp	r3, #0
 800b132:	d152      	bne.n	800b1da <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800b134:	2204      	movs	r2, #4
 800b136:	4b34      	ldr	r3, [pc, #208]	; (800b208 <AddPortButton+0xe4>)
 800b138:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800b13a:	250e      	movs	r5, #14
 800b13c:	af04      	add	r7, sp, #16
 800b13e:	446d      	add	r5, sp
 800b140:	002a      	movs	r2, r5
 800b142:	ab06      	add	r3, sp, #24
 800b144:	a905      	add	r1, sp, #20
 800b146:	9700      	str	r7, [sp, #0]
 800b148:	0020      	movs	r0, r4
 800b14a:	f7ff ff05 	bl	800af58 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800b14e:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b150:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800b152:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b154:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b156:	a907      	add	r1, sp, #28
 800b158:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b15a:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b15c:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b15e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b160:	f005 f83a 	bl	80101d8 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800b164:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b166:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800b168:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b16a:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b16c:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b16e:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b170:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b172:	f005 f831 	bl	80101d8 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800b176:	00e2      	lsls	r2, r4, #3
 800b178:	4b24      	ldr	r3, [pc, #144]	; (800b20c <AddPortButton+0xe8>)
 800b17a:	1912      	adds	r2, r2, r4
 800b17c:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b17e:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800b180:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b182:	2312      	movs	r3, #18
 800b184:	353a      	adds	r5, #58	; 0x3a
 800b186:	00ad      	lsls	r5, r5, #2
 800b188:	446b      	add	r3, sp
 800b18a:	0019      	movs	r1, r3
 800b18c:	0028      	movs	r0, r5
 800b18e:	f7ff fc1b 	bl	800a9c8 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b192:	2800      	cmp	r0, #0
 800b194:	d109      	bne.n	800b1aa <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800b196:	466b      	mov	r3, sp
 800b198:	8a5b      	ldrh	r3, [r3, #18]
 800b19a:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800b19c:	091a      	lsrs	r2, r3, #4
 800b19e:	42a2      	cmp	r2, r4
 800b1a0:	d103      	bne.n	800b1aa <AddPortButton+0x86>
 800b1a2:	220f      	movs	r2, #15
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	42b3      	cmp	r3, r6
 800b1a8:	d014      	beq.n	800b1d4 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b1aa:	466b      	mov	r3, sp
 800b1ac:	0324      	lsls	r4, r4, #12
 800b1ae:	0231      	lsls	r1, r6, #8
 800b1b0:	4321      	orrs	r1, r4
 800b1b2:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b1b4:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b1b6:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b1b8:	f7ff fc36 	bl	800aa28 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b1bc:	2100      	movs	r1, #0
 800b1be:	1c68      	adds	r0, r5, #1
 800b1c0:	f7ff fc32 	bl	800aa28 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	1ca8      	adds	r0, r5, #2
 800b1c8:	f7ff fc2e 	bl	800aa28 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b1cc:	1ce8      	adds	r0, r5, #3
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	f7ff fc2a 	bl	800aa28 <EE_WriteVariable>
	}

	return result;
}
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	b00d      	add	sp, #52	; 0x34
 800b1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800b1da:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <AddPortButton+0xec>)
 800b1dc:	008f      	lsls	r7, r1, #2
 800b1de:	58f8      	ldr	r0, [r7, r3]
 800b1e0:	f001 ff1e 	bl	800d020 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <AddPortButton+0xf0>)
 800b1e6:	58f8      	ldr	r0, [r7, r3]
 800b1e8:	f001 ff1a 	bl	800d020 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800b1ec:	2104      	movs	r1, #4
 800b1ee:	4a06      	ldr	r2, [pc, #24]	; (800b208 <AddPortButton+0xe4>)
 800b1f0:	782b      	ldrb	r3, [r5, #0]
 800b1f2:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0a0      	beq.n	800b13a <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800b1f8:	0020      	movs	r0, r4
 800b1fa:	f001 fd75 	bl	800cce8 <GetUart>
 800b1fe:	f006 f901 	bl	8011404 <HAL_UART_DeInit>
 800b202:	e79a      	b.n	800b13a <AddPortButton+0x16>
 800b204:	20000b3b 	.word	0x20000b3b
 800b208:	20000c2c 	.word	0x20000c2c
 800b20c:	200025c8 	.word	0x200025c8
 800b210:	20006b24 	.word	0x20006b24
 800b214:	20006b04 	.word	0x20006b04

0800b218 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800b21c:	2300      	movs	r3, #0
 800b21e:	483b      	ldr	r0, [pc, #236]	; (800b30c <RemovePortButton+0xf4>)
 800b220:	00e9      	lsls	r1, r5, #3
 800b222:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b224:	002c      	movs	r4, r5
	button[port].type = NONE;
 800b226:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800b228:	b082      	sub	sp, #8
	button[port].state = NONE;
 800b22a:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800b22c:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800b22e:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800b230:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800b232:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800b234:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800b236:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800b238:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800b23a:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b23c:	466b      	mov	r3, sp
 800b23e:	343a      	adds	r4, #58	; 0x3a
 800b240:	00a4      	lsls	r4, r4, #2
 800b242:	1d99      	adds	r1, r3, #6
 800b244:	0020      	movs	r0, r4
 800b246:	f7ff fbbf 	bl	800a9c8 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d02b      	beq.n	800b2a6 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800b24e:	0028      	movs	r0, r5
 800b250:	f001 fd4a 	bl	800cce8 <GetUart>

	if (huart->Instance == USART1) {
 800b254:	4a2e      	ldr	r2, [pc, #184]	; (800b310 <RemovePortButton+0xf8>)
 800b256:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b258:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d03b      	beq.n	800b2d6 <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800b25e:	4a2d      	ldr	r2, [pc, #180]	; (800b314 <RemovePortButton+0xfc>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d040      	beq.n	800b2e6 <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800b264:	4a2c      	ldr	r2, [pc, #176]	; (800b318 <RemovePortButton+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d041      	beq.n	800b2ee <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800b26a:	4a2c      	ldr	r2, [pc, #176]	; (800b31c <RemovePortButton+0x104>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d044      	beq.n	800b2fa <RemovePortButton+0xe2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800b270:	4a2b      	ldr	r2, [pc, #172]	; (800b320 <RemovePortButton+0x108>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d033      	beq.n	800b2de <RemovePortButton+0xc6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800b276:	4a2b      	ldr	r2, [pc, #172]	; (800b324 <RemovePortButton+0x10c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d042      	beq.n	800b302 <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800b27c:	4a2a      	ldr	r2, [pc, #168]	; (800b328 <RemovePortButton+0x110>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d039      	beq.n	800b2f6 <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800b282:	4a2a      	ldr	r2, [pc, #168]	; (800b32c <RemovePortButton+0x114>)
 800b284:	4694      	mov	ip, r2
 800b286:	4463      	add	r3, ip
 800b288:	1e5c      	subs	r4, r3, #1
 800b28a:	41a3      	sbcs	r3, r4
 800b28c:	425c      	negs	r4, r3
 800b28e:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800b290:	2200      	movs	r2, #0
 800b292:	4b27      	ldr	r3, [pc, #156]	; (800b330 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b294:	4927      	ldr	r1, [pc, #156]	; (800b334 <RemovePortButton+0x11c>)
	portStatus[port] = FREE;
 800b296:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b298:	0030      	movs	r0, r6
 800b29a:	3201      	adds	r2, #1
 800b29c:	f006 f900 	bl	80114a0 <HAL_UART_Receive_IT>

	return result;
}
 800b2a0:	0020      	movs	r0, r4
 800b2a2:	b002      	add	sp, #8
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	0020      	movs	r0, r4
 800b2aa:	f7ff fbbd 	bl	800aa28 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	1c60      	adds	r0, r4, #1
 800b2b2:	f7ff fbb9 	bl	800aa28 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	1ca0      	adds	r0, r4, #2
 800b2ba:	f7ff fbb5 	bl	800aa28 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b2be:	2100      	movs	r1, #0
 800b2c0:	1ce0      	adds	r0, r4, #3
 800b2c2:	f7ff fbb1 	bl	800aa28 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800b2c6:	0028      	movs	r0, r5
 800b2c8:	f001 fd0e 	bl	800cce8 <GetUart>
	if (huart->Instance == USART1) {
 800b2cc:	4a10      	ldr	r2, [pc, #64]	; (800b310 <RemovePortButton+0xf8>)
 800b2ce:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b2d0:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d1c3      	bne.n	800b25e <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800b2d6:	f001 fb03 	bl	800c8e0 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800b2da:	2400      	movs	r4, #0
 800b2dc:	e7d8      	b.n	800b290 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800b2de:	f001 fb5f 	bl	800c9a0 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	e7d4      	b.n	800b290 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800b2e6:	f001 fb13 	bl	800c910 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800b2ea:	2400      	movs	r4, #0
 800b2ec:	e7d0      	b.n	800b290 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800b2ee:	f001 fb27 	bl	800c940 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800b2f2:	2400      	movs	r4, #0
 800b2f4:	e7cc      	b.n	800b290 <RemovePortButton+0x78>
 800b2f6:	2400      	movs	r4, #0
 800b2f8:	e7ca      	b.n	800b290 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800b2fa:	f001 fb39 	bl	800c970 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800b2fe:	2400      	movs	r4, #0
 800b300:	e7c6      	b.n	800b290 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800b302:	f001 fb65 	bl	800c9d0 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800b306:	2400      	movs	r4, #0
 800b308:	e7c2      	b.n	800b290 <RemovePortButton+0x78>
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	200025c8 	.word	0x200025c8
 800b310:	40013800 	.word	0x40013800
 800b314:	40004400 	.word	0x40004400
 800b318:	40004800 	.word	0x40004800
 800b31c:	40004c00 	.word	0x40004c00
 800b320:	40005000 	.word	0x40005000
 800b324:	40011400 	.word	0x40011400
 800b328:	40011800 	.word	0x40011800
 800b32c:	bffee400 	.word	0xbffee400
 800b330:	20000c2c 	.word	0x20000c2c
 800b334:	20000c4d 	.word	0x20000c4d

0800b338 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800b338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33a:	464e      	mov	r6, r9
 800b33c:	4645      	mov	r5, r8
 800b33e:	46de      	mov	lr, fp
 800b340:	4657      	mov	r7, sl
 800b342:	b5e0      	push	{r5, r6, r7, lr}
 800b344:	b087      	sub	sp, #28
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	ab10      	add	r3, sp, #64	; 0x40
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	0005      	movs	r5, r0
 800b34e:	9302      	str	r3, [sp, #8]
 800b350:	ab11      	add	r3, sp, #68	; 0x44
 800b352:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800b354:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	ab12      	add	r3, sp, #72	; 0x48
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	469a      	mov	sl, r3
 800b35e:	ab13      	add	r3, sp, #76	; 0x4c
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	4699      	mov	r9, r3
 800b364:	ab14      	add	r3, sp, #80	; 0x50
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	469b      	mov	fp, r3
 800b36a:	ab15      	add	r3, sp, #84	; 0x54
 800b36c:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800b36e:	4b80      	ldr	r3, [pc, #512]	; (800b570 <SetButtonEvents+0x238>)
 800b370:	4698      	mov	r8, r3
 800b372:	1963      	adds	r3, r4, r5
 800b374:	4443      	add	r3, r8
 800b376:	785e      	ldrb	r6, [r3, #1]
 800b378:	2e00      	cmp	r6, #0
 800b37a:	d050      	beq.n	800b41e <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800b37c:	9e01      	ldr	r6, [sp, #4]
 800b37e:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800b380:	9e02      	ldr	r6, [sp, #8]
 800b382:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800b384:	9e03      	ldr	r6, [sp, #12]
 800b386:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800b388:	4656      	mov	r6, sl
 800b38a:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800b38c:	464e      	mov	r6, r9
 800b38e:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800b390:	465e      	mov	r6, fp
 800b392:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800b394:	2801      	cmp	r0, #1
 800b396:	d04b      	beq.n	800b430 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800b398:	2800      	cmp	r0, #0
 800b39a:	d000      	beq.n	800b39e <SetButtonEvents+0x66>
 800b39c:	e076      	b.n	800b48c <SetButtonEvents+0x154>
 800b39e:	2900      	cmp	r1, #0
 800b3a0:	d000      	beq.n	800b3a4 <SetButtonEvents+0x6c>
 800b3a2:	e0bf      	b.n	800b524 <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800b3a4:	2601      	movs	r6, #1
 800b3a6:	7a19      	ldrb	r1, [r3, #8]
 800b3a8:	43b1      	bics	r1, r6
 800b3aa:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d142      	bne.n	800b436 <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	4399      	bics	r1, r3
 800b3b4:	1963      	adds	r3, r4, r5
 800b3b6:	4443      	add	r3, r8
 800b3b8:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b3ba:	9b01      	ldr	r3, [sp, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d143      	bne.n	800b448 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b3c0:	2304      	movs	r3, #4
 800b3c2:	4399      	bics	r1, r3
 800b3c4:	1963      	adds	r3, r4, r5
 800b3c6:	4443      	add	r3, r8
 800b3c8:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b3ca:	9b02      	ldr	r3, [sp, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d144      	bne.n	800b45a <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b3d0:	2308      	movs	r3, #8
 800b3d2:	4399      	bics	r1, r3
 800b3d4:	1963      	adds	r3, r4, r5
 800b3d6:	4443      	add	r3, r8
 800b3d8:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d145      	bne.n	800b46c <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	000a      	movs	r2, r1
 800b3e4:	439a      	bics	r2, r3
 800b3e6:	1963      	adds	r3, r4, r5
 800b3e8:	4443      	add	r3, r8
 800b3ea:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b3ec:	4653      	mov	r3, sl
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d100      	bne.n	800b3f4 <SetButtonEvents+0xbc>
 800b3f2:	e09c      	b.n	800b52e <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b3f4:	2120      	movs	r1, #32
 800b3f6:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b3f8:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b3fa:	1963      	adds	r3, r4, r5
 800b3fc:	4443      	add	r3, r8
 800b3fe:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b400:	2a00      	cmp	r2, #0
 800b402:	d100      	bne.n	800b406 <SetButtonEvents+0xce>
 800b404:	e09d      	b.n	800b542 <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b406:	2240      	movs	r2, #64	; 0x40
 800b408:	430a      	orrs	r2, r1
 800b40a:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800b40c:	465b      	mov	r3, fp
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d136      	bne.n	800b480 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b412:	217f      	movs	r1, #127	; 0x7f
 800b414:	1963      	adds	r3, r4, r5
 800b416:	4443      	add	r3, r8
 800b418:	4011      	ands	r1, r2
 800b41a:	7219      	strb	r1, [r3, #8]
 800b41c:	e036      	b.n	800b48c <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800b41e:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800b420:	0020      	movs	r0, r4
 800b422:	b007      	add	sp, #28
 800b424:	bc3c      	pop	{r2, r3, r4, r5}
 800b426:	4690      	mov	r8, r2
 800b428:	4699      	mov	r9, r3
 800b42a:	46a2      	mov	sl, r4
 800b42c:	46ab      	mov	fp, r5
 800b42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b430:	7a19      	ldrb	r1, [r3, #8]
 800b432:	2301      	movs	r3, #1
 800b434:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800b436:	2202      	movs	r2, #2
 800b438:	1963      	adds	r3, r4, r5
 800b43a:	4443      	add	r3, r8
 800b43c:	4311      	orrs	r1, r2
 800b43e:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b440:	2801      	cmp	r0, #1
 800b442:	d000      	beq.n	800b446 <SetButtonEvents+0x10e>
 800b444:	e08c      	b.n	800b560 <SetButtonEvents+0x228>
 800b446:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b448:	2204      	movs	r2, #4
 800b44a:	1963      	adds	r3, r4, r5
 800b44c:	4443      	add	r3, r8
 800b44e:	4311      	orrs	r1, r2
 800b450:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b452:	2801      	cmp	r0, #1
 800b454:	d000      	beq.n	800b458 <SetButtonEvents+0x120>
 800b456:	e07f      	b.n	800b558 <SetButtonEvents+0x220>
 800b458:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b45a:	2208      	movs	r2, #8
 800b45c:	1963      	adds	r3, r4, r5
 800b45e:	4443      	add	r3, r8
 800b460:	4311      	orrs	r1, r2
 800b462:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b464:	2801      	cmp	r0, #1
 800b466:	d000      	beq.n	800b46a <SetButtonEvents+0x132>
 800b468:	e07e      	b.n	800b568 <SetButtonEvents+0x230>
 800b46a:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b46c:	2210      	movs	r2, #16
 800b46e:	1963      	adds	r3, r4, r5
 800b470:	4443      	add	r3, r8
 800b472:	4311      	orrs	r1, r2
 800b474:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b476:	2801      	cmp	r0, #1
 800b478:	d16a      	bne.n	800b550 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b47a:	2260      	movs	r2, #96	; 0x60
 800b47c:	b2c9      	uxtb	r1, r1
 800b47e:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b480:	2180      	movs	r1, #128	; 0x80
 800b482:	1963      	adds	r3, r4, r5
 800b484:	4249      	negs	r1, r1
 800b486:	4443      	add	r3, r8
 800b488:	4311      	orrs	r1, r2
 800b48a:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b48c:	002e      	movs	r6, r5
 800b48e:	ab04      	add	r3, sp, #16
 800b490:	363a      	adds	r6, #58	; 0x3a
 800b492:	00b6      	lsls	r6, r6, #2
 800b494:	1d9f      	adds	r7, r3, #6
 800b496:	0039      	movs	r1, r7
 800b498:	0030      	movs	r0, r6
 800b49a:	f7ff fa95 	bl	800a9c8 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d1bd      	bne.n	800b41e <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b4a2:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800b4a4:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b4a6:	4444      	add	r4, r8
 800b4a8:	7a22      	ldrb	r2, [r4, #8]
 800b4aa:	b2d9      	uxtb	r1, r3
 800b4ac:	4291      	cmp	r1, r2
 800b4ae:	d006      	beq.n	800b4be <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b4b0:	0a19      	lsrs	r1, r3, #8
 800b4b2:	0209      	lsls	r1, r1, #8
 800b4b4:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b4b6:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b4b8:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b4ba:	f7ff fab5 	bl	800aa28 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800b4be:	1c74      	adds	r4, r6, #1
 800b4c0:	0039      	movs	r1, r7
 800b4c2:	0020      	movs	r0, r4
 800b4c4:	f7ff fa80 	bl	800a9c8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	9b01      	ldr	r3, [sp, #4]
 800b4cc:	0219      	lsls	r1, r3, #8
 800b4ce:	883b      	ldrh	r3, [r7, #0]
 800b4d0:	430a      	orrs	r2, r1
		if (temp16
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d003      	beq.n	800b4de <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800b4d6:	b291      	uxth	r1, r2
 800b4d8:	0020      	movs	r0, r4
 800b4da:	f7ff faa5 	bl	800aa28 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800b4de:	1cb4      	adds	r4, r6, #2
 800b4e0:	0039      	movs	r1, r7
 800b4e2:	0020      	movs	r0, r4
 800b4e4:	f7ff fa70 	bl	800a9c8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800b4e8:	464a      	mov	r2, r9
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	0219      	lsls	r1, r3, #8
 800b4ee:	883b      	ldrh	r3, [r7, #0]
 800b4f0:	430a      	orrs	r2, r1
		if (temp16
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d003      	beq.n	800b4fe <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800b4f6:	b291      	uxth	r1, r2
 800b4f8:	0020      	movs	r0, r4
 800b4fa:	f7ff fa95 	bl	800aa28 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800b4fe:	3603      	adds	r6, #3
 800b500:	0039      	movs	r1, r7
 800b502:	0030      	movs	r0, r6
 800b504:	f7ff fa60 	bl	800a9c8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b508:	465a      	mov	r2, fp
 800b50a:	9b03      	ldr	r3, [sp, #12]
	return result;
 800b50c:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b50e:	0219      	lsls	r1, r3, #8
 800b510:	883b      	ldrh	r3, [r7, #0]
 800b512:	430a      	orrs	r2, r1
		if (temp16
 800b514:	4293      	cmp	r3, r2
 800b516:	d100      	bne.n	800b51a <SetButtonEvents+0x1e2>
 800b518:	e782      	b.n	800b420 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800b51a:	b291      	uxth	r1, r2
 800b51c:	0030      	movs	r0, r6
 800b51e:	f7ff fa83 	bl	800aa28 <EE_WriteVariable>
 800b522:	e77d      	b.n	800b420 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b524:	2601      	movs	r6, #1
 800b526:	7a19      	ldrb	r1, [r3, #8]
 800b528:	4331      	orrs	r1, r6
 800b52a:	7219      	strb	r1, [r3, #8]
 800b52c:	e73e      	b.n	800b3ac <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b52e:	2320      	movs	r3, #32
 800b530:	439a      	bics	r2, r3
 800b532:	1963      	adds	r3, r4, r5
 800b534:	4443      	add	r3, r8
 800b536:	0011      	movs	r1, r2
 800b538:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b53a:	464a      	mov	r2, r9
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	d000      	beq.n	800b542 <SetButtonEvents+0x20a>
 800b540:	e761      	b.n	800b406 <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b542:	2340      	movs	r3, #64	; 0x40
 800b544:	000a      	movs	r2, r1
 800b546:	439a      	bics	r2, r3
 800b548:	1963      	adds	r3, r4, r5
 800b54a:	4443      	add	r3, r8
 800b54c:	721a      	strb	r2, [r3, #8]
 800b54e:	e75d      	b.n	800b40c <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b550:	2800      	cmp	r0, #0
 800b552:	d19b      	bne.n	800b48c <SetButtonEvents+0x154>
 800b554:	7a1a      	ldrb	r2, [r3, #8]
 800b556:	e749      	b.n	800b3ec <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b558:	2800      	cmp	r0, #0
 800b55a:	d197      	bne.n	800b48c <SetButtonEvents+0x154>
 800b55c:	7a19      	ldrb	r1, [r3, #8]
 800b55e:	e734      	b.n	800b3ca <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b560:	2800      	cmp	r0, #0
 800b562:	d193      	bne.n	800b48c <SetButtonEvents+0x154>
 800b564:	7a19      	ldrb	r1, [r3, #8]
 800b566:	e728      	b.n	800b3ba <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b568:	2800      	cmp	r0, #0
 800b56a:	d18f      	bne.n	800b48c <SetButtonEvents+0x154>
 800b56c:	7a19      	ldrb	r1, [r3, #8]
 800b56e:	e734      	b.n	800b3da <SetButtonEvents+0xa2>
 800b570:	200025c8 	.word	0x200025c8

0800b574 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800b574:	4811      	ldr	r0, [pc, #68]	; (800b5bc <MX_ADC_Init+0x48>)
 800b576:	4b12      	ldr	r3, [pc, #72]	; (800b5c0 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800b578:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b57a:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800b57c:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b57e:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b580:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b582:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b584:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b586:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b588:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b58a:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b58c:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b58e:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b590:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b592:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800b594:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800b596:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800b598:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800b59a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b59c:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b59e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800b5a0:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b5a2:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800b5a4:	f003 fc46 	bl	800ee34 <HAL_ADC_Init>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d002      	beq.n	800b5b2 <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800b5ac:	2064      	movs	r0, #100	; 0x64
 800b5ae:	f003 fb67 	bl	800ec80 <HAL_Delay>
	ADC_flag = 1;
 800b5b2:	2378      	movs	r3, #120	; 0x78
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	4a03      	ldr	r2, [pc, #12]	; (800b5c4 <MX_ADC_Init+0x50>)
 800b5b8:	54d1      	strb	r1, [r2, r3]
}
 800b5ba:	bd10      	pop	{r4, pc}
 800b5bc:	20006e64 	.word	0x20006e64
 800b5c0:	40012400 	.word	0x40012400
 800b5c4:	200025c8 	.word	0x200025c8

0800b5c8 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800b5c8:	b500      	push	{lr}
 800b5ca:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b5cc:	2214      	movs	r2, #20
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	a803      	add	r0, sp, #12
 800b5d2:	f006 fea1 	bl	8012318 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b5d6:	2080      	movs	r0, #128	; 0x80
 800b5d8:	4b11      	ldr	r3, [pc, #68]	; (800b620 <HAL_ADC_MspInit+0x58>)
 800b5da:	0080      	lsls	r0, r0, #2
 800b5dc:	6999      	ldr	r1, [r3, #24]
 800b5de:	4301      	orrs	r1, r0
 800b5e0:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b5e2:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b5e4:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b5e6:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b5e8:	4002      	ands	r2, r0
 800b5ea:	9201      	str	r2, [sp, #4]
 800b5ec:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b5ee:	695a      	ldr	r2, [r3, #20]
 800b5f0:	430a      	orrs	r2, r1
 800b5f2:	615a      	str	r2, [r3, #20]
 800b5f4:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800b5f6:	4a0b      	ldr	r2, [pc, #44]	; (800b624 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b5f8:	400b      	ands	r3, r1
 800b5fa:	9302      	str	r3, [sp, #8]
 800b5fc:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800b5fe:	2379      	movs	r3, #121	; 0x79
 800b600:	5cd3      	ldrb	r3, [r2, r3]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d001      	beq.n	800b60a <HAL_ADC_MspInit+0x42>
}
 800b606:	b009      	add	sp, #36	; 0x24
 800b608:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b60a:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800b60c:	333b      	adds	r3, #59	; 0x3b
 800b60e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b610:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b612:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b614:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b616:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b618:	f004 fdde 	bl	80101d8 <HAL_GPIO_Init>
}
 800b61c:	e7f3      	b.n	800b606 <HAL_ADC_MspInit+0x3e>
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	40021000 	.word	0x40021000
 800b624:	200025c8 	.word	0x200025c8

0800b628 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62a:	46ce      	mov	lr, r9
 800b62c:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800b62e:	2378      	movs	r3, #120	; 0x78
void ReadTempAndVref(float *temp, float *Vref) {
 800b630:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800b632:	4c57      	ldr	r4, [pc, #348]	; (800b790 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp, float *Vref) {
 800b634:	0007      	movs	r7, r0
	if (0 == ADC_flag)
 800b636:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800b638:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d100      	bne.n	800b640 <ReadTempAndVref+0x18>
 800b63e:	e0a4      	b.n	800b78a <ReadTempAndVref+0x162>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b640:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b642:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b644:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b646:	0152      	lsls	r2, r2, #5
 800b648:	3370      	adds	r3, #112	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b64a:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b64c:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b64e:	2201      	movs	r2, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b650:	4d50      	ldr	r5, [pc, #320]	; (800b794 <ReadTempAndVref+0x16c>)
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b652:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b654:	317c      	adds	r1, #124	; 0x7c
 800b656:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b658:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b65a:	f003 fd43 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d000      	beq.n	800b664 <ReadTempAndVref+0x3c>
 800b662:	e08e      	b.n	800b782 <ReadTempAndVref+0x15a>
	HAL_ADC_Start(&hadc);
 800b664:	0028      	movs	r0, r5
 800b666:	f003 fc87 	bl	800ef78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b66a:	2164      	movs	r1, #100	; 0x64
 800b66c:	0028      	movs	r0, r5
 800b66e:	f003 fccf 	bl	800f010 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800b672:	0028      	movs	r0, r5
 800b674:	f003 fd30 	bl	800f0d8 <HAL_ADC_GetValue>
 800b678:	4e47      	ldr	r6, [pc, #284]	; (800b798 <ReadTempAndVref+0x170>)
 800b67a:	8130      	strh	r0, [r6, #8]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800b67c:	0400      	lsls	r0, r0, #16
 800b67e:	0c00      	lsrs	r0, r0, #16
 800b680:	f7f7 f9e4 	bl	8002a4c <__aeabi_i2d>
 800b684:	4a45      	ldr	r2, [pc, #276]	; (800b79c <ReadTempAndVref+0x174>)
 800b686:	4b46      	ldr	r3, [pc, #280]	; (800b7a0 <ReadTempAndVref+0x178>)
 800b688:	f7f6 fbd4 	bl	8001e34 <__aeabi_dmul>
 800b68c:	2200      	movs	r2, #0
 800b68e:	4b45      	ldr	r3, [pc, #276]	; (800b7a4 <ReadTempAndVref+0x17c>)
 800b690:	f7f5 ffc6 	bl	8001620 <__aeabi_ddiv>
 800b694:	4a44      	ldr	r2, [pc, #272]	; (800b7a8 <ReadTempAndVref+0x180>)
 800b696:	4b45      	ldr	r3, [pc, #276]	; (800b7ac <ReadTempAndVref+0x184>)
 800b698:	f7f6 fe3e 	bl	8002318 <__aeabi_dsub>
 800b69c:	4a44      	ldr	r2, [pc, #272]	; (800b7b0 <ReadTempAndVref+0x188>)
 800b69e:	4b45      	ldr	r3, [pc, #276]	; (800b7b4 <ReadTempAndVref+0x18c>)
 800b6a0:	f7f5 ffbe 	bl	8001620 <__aeabi_ddiv>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4b44      	ldr	r3, [pc, #272]	; (800b7b8 <ReadTempAndVref+0x190>)
 800b6a8:	f7f5 fc9e 	bl	8000fe8 <__aeabi_dadd>
 800b6ac:	f7f7 fa8c 	bl	8002bc8 <__aeabi_d2f>
 800b6b0:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800b6b2:	0028      	movs	r0, r5
 800b6b4:	f003 fc8c 	bl	800efd0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b6b8:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_NONE;
 800b6ba:	4a40      	ldr	r2, [pc, #256]	; (800b7bc <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b6bc:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6be:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b6c0:	3370      	adds	r3, #112	; 0x70
 800b6c2:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6c8:	317c      	adds	r1, #124	; 0x7c
 800b6ca:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b6cc:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6ce:	f003 fd09 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d151      	bne.n	800b77a <ReadTempAndVref+0x152>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b6d6:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b6d8:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b6da:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b6dc:	0152      	lsls	r2, r2, #5
 800b6de:	336f      	adds	r3, #111	; 0x6f
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6e0:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b6e2:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b6e4:	2205      	movs	r2, #5
 800b6e6:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6e8:	317c      	adds	r1, #124	; 0x7c
 800b6ea:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b6ec:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6ee:	f003 fcf9 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d13d      	bne.n	800b772 <ReadTempAndVref+0x14a>
	HAL_ADC_Start(&hadc);
 800b6f6:	0028      	movs	r0, r5
 800b6f8:	f003 fc3e 	bl	800ef78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b6fc:	2164      	movs	r1, #100	; 0x64
 800b6fe:	0028      	movs	r0, r5
 800b700:	f003 fc86 	bl	800f010 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800b704:	0028      	movs	r0, r5
 800b706:	f003 fce7 	bl	800f0d8 <HAL_ADC_GetValue>
 800b70a:	4680      	mov	r8, r0
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800b70c:	4b2c      	ldr	r3, [pc, #176]	; (800b7c0 <ReadTempAndVref+0x198>)
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800b70e:	8170      	strh	r0, [r6, #10]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800b710:	8818      	ldrh	r0, [r3, #0]
 800b712:	f7f7 f99b 	bl	8002a4c <__aeabi_i2d>
 800b716:	4a21      	ldr	r2, [pc, #132]	; (800b79c <ReadTempAndVref+0x174>)
 800b718:	4b21      	ldr	r3, [pc, #132]	; (800b7a0 <ReadTempAndVref+0x178>)
 800b71a:	f7f6 fb8b 	bl	8001e34 <__aeabi_dmul>
 800b71e:	4643      	mov	r3, r8
 800b720:	0006      	movs	r6, r0
 800b722:	0418      	lsls	r0, r3, #16
 800b724:	0c00      	lsrs	r0, r0, #16
 800b726:	000f      	movs	r7, r1
 800b728:	f7f7 f990 	bl	8002a4c <__aeabi_i2d>
 800b72c:	0002      	movs	r2, r0
 800b72e:	000b      	movs	r3, r1
 800b730:	0030      	movs	r0, r6
 800b732:	0039      	movs	r1, r7
 800b734:	f7f5 ff74 	bl	8001620 <__aeabi_ddiv>
 800b738:	f7f7 fa46 	bl	8002bc8 <__aeabi_d2f>
 800b73c:	464b      	mov	r3, r9
 800b73e:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800b740:	0028      	movs	r0, r5
 800b742:	f003 fc45 	bl	800efd0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b746:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_NONE;
 800b748:	4a1c      	ldr	r2, [pc, #112]	; (800b7bc <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b74a:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b74c:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b74e:	336f      	adds	r3, #111	; 0x6f
 800b750:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b752:	2201      	movs	r2, #1
 800b754:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b756:	317c      	adds	r1, #124	; 0x7c
 800b758:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b75a:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b75c:	f003 fcc2 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800b760:	2800      	cmp	r0, #0
 800b762:	d002      	beq.n	800b76a <ReadTempAndVref+0x142>
	HAL_Delay(100);
 800b764:	2064      	movs	r0, #100	; 0x64
 800b766:	f003 fa8b 	bl	800ec80 <HAL_Delay>
}
 800b76a:	bc0c      	pop	{r2, r3}
 800b76c:	4690      	mov	r8, r2
 800b76e:	4699      	mov	r9, r3
 800b770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800b772:	2064      	movs	r0, #100	; 0x64
 800b774:	f003 fa84 	bl	800ec80 <HAL_Delay>
 800b778:	e7bd      	b.n	800b6f6 <ReadTempAndVref+0xce>
 800b77a:	2064      	movs	r0, #100	; 0x64
 800b77c:	f003 fa80 	bl	800ec80 <HAL_Delay>
 800b780:	e7a9      	b.n	800b6d6 <ReadTempAndVref+0xae>
 800b782:	2064      	movs	r0, #100	; 0x64
 800b784:	f003 fa7c 	bl	800ec80 <HAL_Delay>
 800b788:	e76c      	b.n	800b664 <ReadTempAndVref+0x3c>
		MX_ADC_Init();
 800b78a:	f7ff fef3 	bl	800b574 <MX_ADC_Init>
 800b78e:	e757      	b.n	800b640 <ReadTempAndVref+0x18>
 800b790:	200025c8 	.word	0x200025c8
 800b794:	20006e64 	.word	0x20006e64
 800b798:	20002648 	.word	0x20002648
 800b79c:	66666666 	.word	0x66666666
 800b7a0:	400a6666 	.word	0x400a6666
 800b7a4:	40affe00 	.word	0x40affe00
 800b7a8:	28f5c28f 	.word	0x28f5c28f
 800b7ac:	3ff68f5c 	.word	0x3ff68f5c
 800b7b0:	33333333 	.word	0x33333333
 800b7b4:	40113333 	.word	0x40113333
 800b7b8:	40390000 	.word	0x40390000
 800b7bc:	00001001 	.word	0x00001001
 800b7c0:	1ffff7ba 	.word	0x1ffff7ba

0800b7c4 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800b7c6:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800b7c8:	b087      	sub	sp, #28
 800b7ca:	0005      	movs	r5, r0
 800b7cc:	000f      	movs	r7, r1
	if (port == 2 || port == 3) {
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d901      	bls.n	800b7d6 <GetReadPrecentage+0x12>
}
 800b7d2:	b007      	add	sp, #28
 800b7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800b7d6:	2378      	movs	r3, #120	; 0x78
 800b7d8:	4c59      	ldr	r4, [pc, #356]	; (800b940 <GetReadPrecentage+0x17c>)
 800b7da:	5ce3      	ldrb	r3, [r4, r3]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d065      	beq.n	800b8ac <GetReadPrecentage+0xe8>
		Channel = Get_channel(GetUart(port), "bottom");
 800b7e0:	0028      	movs	r0, r5
 800b7e2:	f001 fa81 	bl	800cce8 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800b7e6:	4a57      	ldr	r2, [pc, #348]	; (800b944 <GetReadPrecentage+0x180>)
 800b7e8:	6803      	ldr	r3, [r0, #0]
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d100      	bne.n	800b7f0 <GetReadPrecentage+0x2c>
 800b7ee:	e080      	b.n	800b8f2 <GetReadPrecentage+0x12e>
	else if (huart->Instance == USART6 && side == "top")
 800b7f0:	4a55      	ldr	r2, [pc, #340]	; (800b948 <GetReadPrecentage+0x184>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d04f      	beq.n	800b896 <GetReadPrecentage+0xd2>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	001a      	movs	r2, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800b7fa:	4e54      	ldr	r6, [pc, #336]	; (800b94c <GetReadPrecentage+0x188>)
		sConfig.Channel = Channel;
 800b7fc:	67e2      	str	r2, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b7fe:	2280      	movs	r2, #128	; 0x80
		Channel = Get_channel(GetUart(port), "bottom");
 800b800:	7333      	strb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b802:	2380      	movs	r3, #128	; 0x80
 800b804:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b806:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b808:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b80a:	2201      	movs	r2, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b80c:	4d50      	ldr	r5, [pc, #320]	; (800b950 <GetReadPrecentage+0x18c>)
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b80e:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b810:	317c      	adds	r1, #124	; 0x7c
 800b812:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b814:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b816:	f003 fc65 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d142      	bne.n	800b8a4 <GetReadPrecentage+0xe0>
		HAL_ADC_Start(&hadc);
 800b81e:	0028      	movs	r0, r5
 800b820:	f003 fbaa 	bl	800ef78 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800b824:	2164      	movs	r1, #100	; 0x64
 800b826:	0028      	movs	r0, r5
 800b828:	f003 fbf2 	bl	800f010 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800b82c:	0028      	movs	r0, r5
 800b82e:	f003 fc53 	bl	800f0d8 <HAL_ADC_GetValue>
 800b832:	f7f5 fb99 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800b836:	f7f7 f975 	bl	8002b24 <__aeabi_f2d>
 800b83a:	4a46      	ldr	r2, [pc, #280]	; (800b954 <GetReadPrecentage+0x190>)
 800b83c:	4b46      	ldr	r3, [pc, #280]	; (800b958 <GetReadPrecentage+0x194>)
 800b83e:	f7f6 faf9 	bl	8001e34 <__aeabi_dmul>
 800b842:	2200      	movs	r2, #0
 800b844:	4b45      	ldr	r3, [pc, #276]	; (800b95c <GetReadPrecentage+0x198>)
 800b846:	f7f5 feeb 	bl	8001620 <__aeabi_ddiv>
 800b84a:	f7f7 f9bd 	bl	8002bc8 <__aeabi_d2f>
		current = (100 * percentage) / 3.3;
 800b84e:	4944      	ldr	r1, [pc, #272]	; (800b960 <GetReadPrecentage+0x19c>)
		percentage = 3.3 * percentage / 4095;
 800b850:	6130      	str	r0, [r6, #16]
		current = (100 * percentage) / 3.3;
 800b852:	f7f5 f873 	bl	800093c <__aeabi_fmul>
 800b856:	f7f7 f965 	bl	8002b24 <__aeabi_f2d>
 800b85a:	4a3e      	ldr	r2, [pc, #248]	; (800b954 <GetReadPrecentage+0x190>)
 800b85c:	4b3e      	ldr	r3, [pc, #248]	; (800b958 <GetReadPrecentage+0x194>)
 800b85e:	f7f5 fedf 	bl	8001620 <__aeabi_ddiv>
 800b862:	f7f7 f9b1 	bl	8002bc8 <__aeabi_d2f>
 800b866:	6170      	str	r0, [r6, #20]
		*precentageValue = current;
 800b868:	6038      	str	r0, [r7, #0]
		HAL_ADC_Stop(&hadc);
 800b86a:	0028      	movs	r0, r5
 800b86c:	f003 fbb0 	bl	800efd0 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800b870:	7b33      	ldrb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_NONE;
 800b872:	4a3c      	ldr	r2, [pc, #240]	; (800b964 <GetReadPrecentage+0x1a0>)
		sConfig.Channel = Channel;
 800b874:	67e3      	str	r3, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 800b876:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b878:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_NONE;
 800b87a:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b87c:	2201      	movs	r2, #1
 800b87e:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b880:	317c      	adds	r1, #124	; 0x7c
 800b882:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b884:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b886:	f003 fc2d 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d0a1      	beq.n	800b7d2 <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800b88e:	2064      	movs	r0, #100	; 0x64
 800b890:	f003 f9f6 	bl	800ec80 <HAL_Delay>
 800b894:	e79d      	b.n	800b7d2 <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800b896:	4a34      	ldr	r2, [pc, #208]	; (800b968 <GetReadPrecentage+0x1a4>)
 800b898:	4b34      	ldr	r3, [pc, #208]	; (800b96c <GetReadPrecentage+0x1a8>)
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d04c      	beq.n	800b938 <GetReadPrecentage+0x174>
 800b89e:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 800b8a0:	2305      	movs	r3, #5
 800b8a2:	e7aa      	b.n	800b7fa <GetReadPrecentage+0x36>
	HAL_Delay(100);
 800b8a4:	2064      	movs	r0, #100	; 0x64
 800b8a6:	f003 f9eb 	bl	800ec80 <HAL_Delay>
 800b8aa:	e7b8      	b.n	800b81e <GetReadPrecentage+0x5a>
			MX_ADC_Init();
 800b8ac:	f7ff fe62 	bl	800b574 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800b8b0:	0028      	movs	r0, r5
 800b8b2:	f001 fa19 	bl	800cce8 <GetUart>
 800b8b6:	f005 fda5 	bl	8011404 <HAL_UART_DeInit>
			if (port == 3) {
 800b8ba:	2d03      	cmp	r5, #3
 800b8bc:	d020      	beq.n	800b900 <GetReadPrecentage+0x13c>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800b8be:	2090      	movs	r0, #144	; 0x90
 800b8c0:	2104      	movs	r1, #4
 800b8c2:	05c0      	lsls	r0, r0, #23
 800b8c4:	f004 fd84 	bl	80103d0 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b8c8:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ca:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b8cc:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b8ce:	3b03      	subs	r3, #3
 800b8d0:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8d2:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b8d4:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8d6:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b8d8:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8da:	f004 fc7d 	bl	80101d8 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800b8de:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b8e0:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800b8e2:	4b23      	ldr	r3, [pc, #140]	; (800b970 <GetReadPrecentage+0x1ac>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b8e4:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800b8e6:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b8e8:	05c0      	lsls	r0, r0, #23
 800b8ea:	3a05      	subs	r2, #5
 800b8ec:	f004 fe14 	bl	8010518 <HAL_GPIO_WritePin>
 800b8f0:	e776      	b.n	800b7e0 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800b8f2:	4a1d      	ldr	r2, [pc, #116]	; (800b968 <GetReadPrecentage+0x1a4>)
 800b8f4:	4b1d      	ldr	r3, [pc, #116]	; (800b96c <GetReadPrecentage+0x1a8>)
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d01b      	beq.n	800b932 <GetReadPrecentage+0x16e>
 800b8fa:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e77c      	b.n	800b7fa <GetReadPrecentage+0x36>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800b900:	2090      	movs	r0, #144	; 0x90
 800b902:	2110      	movs	r1, #16
 800b904:	05c0      	lsls	r0, r0, #23
 800b906:	f004 fd63 	bl	80103d0 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b90a:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b90c:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b90e:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b910:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b912:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b914:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b916:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b918:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b91a:	f004 fc5d 	bl	80101d8 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800b91e:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b920:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <GetReadPrecentage+0x1ac>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b924:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800b926:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b928:	05c0      	lsls	r0, r0, #23
 800b92a:	3a05      	subs	r2, #5
 800b92c:	f004 fdf4 	bl	8010518 <HAL_GPIO_WritePin>
 800b930:	e756      	b.n	800b7e0 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800b932:	2202      	movs	r2, #2
		return ADC_CHANNEL_2;
 800b934:	2302      	movs	r3, #2
 800b936:	e760      	b.n	800b7fa <GetReadPrecentage+0x36>
	else if (huart->Instance == USART6 && side == "top")
 800b938:	2204      	movs	r2, #4
		return ADC_CHANNEL_4;
 800b93a:	2304      	movs	r3, #4
 800b93c:	e75d      	b.n	800b7fa <GetReadPrecentage+0x36>
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	200025c8 	.word	0x200025c8
 800b944:	40004400 	.word	0x40004400
 800b948:	40011400 	.word	0x40011400
 800b94c:	20002648 	.word	0x20002648
 800b950:	20006e64 	.word	0x20006e64
 800b954:	66666666 	.word	0x66666666
 800b958:	400a6666 	.word	0x400a6666
 800b95c:	40affe00 	.word	0x40affe00
 800b960:	42c80000 	.word	0x42c80000
 800b964:	00001001 	.word	0x00001001
 800b968:	08017e10 	.word	0x08017e10
 800b96c:	08017e0c 	.word	0x08017e0c
 800b970:	20000c2c 	.word	0x20000c2c

0800b974 <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800b974:	2802      	cmp	r0, #2
 800b976:	d00e      	beq.n	800b996 <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800b978:	2803      	cmp	r0, #3
 800b97a:	d002      	beq.n	800b982 <Get_Rank+0xe>
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <Get_Rank+0x4c>)
 800b97e:	7e18      	ldrb	r0, [r3, #24]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800b980:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800b982:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <Get_Rank+0x50>)
 800b984:	4299      	cmp	r1, r3
 800b986:	d016      	beq.n	800b9b6 <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800b988:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <Get_Rank+0x54>)
 800b98a:	4299      	cmp	r1, r3
 800b98c:	d1f6      	bne.n	800b97c <Get_Rank+0x8>
		Rank_t = 3;
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <Get_Rank+0x4c>)
 800b990:	7618      	strb	r0, [r3, #24]
 800b992:	2003      	movs	r0, #3
 800b994:	e7f4      	b.n	800b980 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <Get_Rank+0x50>)
 800b998:	4299      	cmp	r1, r3
 800b99a:	d007      	beq.n	800b9ac <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800b99c:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <Get_Rank+0x54>)
 800b99e:	4299      	cmp	r1, r3
 800b9a0:	d1ec      	bne.n	800b97c <Get_Rank+0x8>
		Rank_t = 1;
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <Get_Rank+0x4c>)
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	761a      	strb	r2, [r3, #24]
 800b9aa:	e7e9      	b.n	800b980 <Get_Rank+0xc>
		Rank_t = 0;
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <Get_Rank+0x4c>)
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	761a      	strb	r2, [r3, #24]
 800b9b4:	e7e4      	b.n	800b980 <Get_Rank+0xc>
		Rank_t = 2;
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	4b01      	ldr	r3, [pc, #4]	; (800b9c0 <Get_Rank+0x4c>)
 800b9ba:	3801      	subs	r0, #1
 800b9bc:	761a      	strb	r2, [r3, #24]
 800b9be:	e7df      	b.n	800b980 <Get_Rank+0xc>
 800b9c0:	20002648 	.word	0x20002648
 800b9c4:	08017e0c 	.word	0x08017e0c
 800b9c8:	08017e10 	.word	0x08017e10

0800b9cc <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800b9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ce:	46c6      	mov	lr, r8
	if (ADC_port == 2 || ADC_port == 3) {
 800b9d0:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800b9d2:	b500      	push	{lr}
 800b9d4:	0004      	movs	r4, r0
 800b9d6:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d902      	bls.n	800b9e2 <ADCSelectChannel+0x16>
}
 800b9dc:	bc04      	pop	{r2}
 800b9de:	4690      	mov	r8, r2
 800b9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800b9e2:	2379      	movs	r3, #121	; 0x79
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	4e1e      	ldr	r6, [pc, #120]	; (800ba60 <ADCSelectChannel+0x94>)
 800b9e8:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800b9ea:	f001 f97d 	bl	800cce8 <GetUart>
 800b9ee:	f005 fd09 	bl	8011404 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800b9f2:	2206      	movs	r2, #6
 800b9f4:	4b1b      	ldr	r3, [pc, #108]	; (800ba64 <ADCSelectChannel+0x98>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800b9f6:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800b9f8:	191b      	adds	r3, r3, r4
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800b9fe:	f001 f973 	bl	800cce8 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800ba02:	4a19      	ldr	r2, [pc, #100]	; (800ba68 <ADCSelectChannel+0x9c>)
 800ba04:	6803      	ldr	r3, [r0, #0]
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d011      	beq.n	800ba2e <ADCSelectChannel+0x62>
	else if (huart->Instance == USART6 && side == "top")
 800ba0a:	4a18      	ldr	r2, [pc, #96]	; (800ba6c <ADCSelectChannel+0xa0>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d017      	beq.n	800ba40 <ADCSelectChannel+0x74>
		Channel = Get_channel(GetUart(ADC_port), side);
 800ba10:	4643      	mov	r3, r8
 800ba12:	4f17      	ldr	r7, [pc, #92]	; (800ba70 <ADCSelectChannel+0xa4>)
		Rank_t = Get_Rank(ADC_port, side);
 800ba14:	0029      	movs	r1, r5
 800ba16:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800ba18:	733b      	strb	r3, [r7, #12]
		Rank_t = Get_Rank(ADC_port, side);
 800ba1a:	f7ff ffab 	bl	800b974 <Get_Rank>
		if (ADC_flag == 0)
 800ba1e:	2378      	movs	r3, #120	; 0x78
 800ba20:	5cf3      	ldrb	r3, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800ba22:	7638      	strb	r0, [r7, #24]
		if (ADC_flag == 0)
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1d9      	bne.n	800b9dc <ADCSelectChannel+0x10>
			MX_ADC_Init();
 800ba28:	f7ff fda4 	bl	800b574 <MX_ADC_Init>
}
 800ba2c:	e7d6      	b.n	800b9dc <ADCSelectChannel+0x10>
	if (huart->Instance == USART2 && side == "top")
 800ba2e:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <ADCSelectChannel+0xa8>)
 800ba30:	429d      	cmp	r5, r3
 800ba32:	d011      	beq.n	800ba58 <ADCSelectChannel+0x8c>
	else if (huart->Instance == USART2 && side == "bottom")
 800ba34:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <ADCSelectChannel+0xac>)
 800ba36:	429d      	cmp	r5, r3
 800ba38:	d1ea      	bne.n	800ba10 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_3;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	4698      	mov	r8, r3
 800ba3e:	e7e7      	b.n	800ba10 <ADCSelectChannel+0x44>
	else if (huart->Instance == USART6 && side == "top")
 800ba40:	4b0c      	ldr	r3, [pc, #48]	; (800ba74 <ADCSelectChannel+0xa8>)
 800ba42:	429d      	cmp	r5, r3
 800ba44:	d005      	beq.n	800ba52 <ADCSelectChannel+0x86>
	else if (huart->Instance == USART6 && side == "bottom")
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <ADCSelectChannel+0xac>)
 800ba48:	429d      	cmp	r5, r3
 800ba4a:	d1e1      	bne.n	800ba10 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_5;
 800ba4c:	2305      	movs	r3, #5
 800ba4e:	4698      	mov	r8, r3
 800ba50:	e7de      	b.n	800ba10 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_4;
 800ba52:	2304      	movs	r3, #4
 800ba54:	4698      	mov	r8, r3
 800ba56:	e7db      	b.n	800ba10 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_2;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	4698      	mov	r8, r3
 800ba5c:	e7d8      	b.n	800ba10 <ADCSelectChannel+0x44>
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	200025c8 	.word	0x200025c8
 800ba64:	20000c2c 	.word	0x20000c2c
 800ba68:	40004400 	.word	0x40004400
 800ba6c:	40011400 	.word	0x40011400
 800ba70:	20002648 	.word	0x20002648
 800ba74:	08017e0c 	.word	0x08017e0c
 800ba78:	08017e10 	.word	0x08017e10

0800ba7c <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	4647      	mov	r7, r8
 800ba80:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800ba82:	2378      	movs	r3, #120	; 0x78
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba84:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800ba86:	4d3a      	ldr	r5, [pc, #232]	; (800bb70 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba88:	4680      	mov	r8, r0
	if (ADC_flag == 1) {
 800ba8a:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba8c:	000f      	movs	r7, r1
 800ba8e:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d00b      	beq.n	800baac <ReadADCChannel+0x30>
 800ba94:	4c37      	ldr	r4, [pc, #220]	; (800bb74 <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800ba96:	7e23      	ldrb	r3, [r4, #24]
 800ba98:	005b      	lsls	r3, r3, #1
 800ba9a:	18e4      	adds	r4, r4, r3
 800ba9c:	8ba0      	ldrh	r0, [r4, #28]
 800ba9e:	f7f5 fa63 	bl	8000f68 <__aeabi_ui2f>
 800baa2:	6030      	str	r0, [r6, #0]
}
 800baa4:	bc0c      	pop	{r2, r3}
 800baa6:	4690      	mov	r8, r2
 800baa8:	4699      	mov	r9, r3
 800baaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800baac:	f001 f91c 	bl	800cce8 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800bab0:	4a31      	ldr	r2, [pc, #196]	; (800bb78 <ReadADCChannel+0xfc>)
 800bab2:	6803      	ldr	r3, [r0, #0]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d03f      	beq.n	800bb38 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800bab8:	4a30      	ldr	r2, [pc, #192]	; (800bb7c <ReadADCChannel+0x100>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d049      	beq.n	800bb52 <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800babe:	464b      	mov	r3, r9
 800bac0:	4c2c      	ldr	r4, [pc, #176]	; (800bb74 <ReadADCChannel+0xf8>)
		Rank_t = Get_Rank(Port, side);
 800bac2:	0039      	movs	r1, r7
 800bac4:	4640      	mov	r0, r8
		Channel = Get_channel(GetUart(Port), side);
 800bac6:	7323      	strb	r3, [r4, #12]
		Rank_t = Get_Rank(Port, side);
 800bac8:	f7ff ff54 	bl	800b974 <Get_Rank>
		sConfig.Channel = Channel;
 800bacc:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bace:	2280      	movs	r2, #128	; 0x80
		sConfig.Channel = Channel;
 800bad0:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bad2:	2380      	movs	r3, #128	; 0x80
 800bad4:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bad6:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800bad8:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bada:	2203      	movs	r2, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800badc:	4f28      	ldr	r7, [pc, #160]	; (800bb80 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800bade:	7620      	strb	r0, [r4, #24]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bae0:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bae2:	317c      	adds	r1, #124	; 0x7c
 800bae4:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bae6:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bae8:	f003 fafc 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800baec:	2800      	cmp	r0, #0
 800baee:	d12c      	bne.n	800bb4a <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800baf0:	0038      	movs	r0, r7
 800baf2:	f003 fa41 	bl	800ef78 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800baf6:	2164      	movs	r1, #100	; 0x64
 800baf8:	0038      	movs	r0, r7
 800bafa:	f003 fa89 	bl	800f010 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800bafe:	0038      	movs	r0, r7
 800bb00:	f003 faea 	bl	800f0d8 <HAL_ADC_GetValue>
 800bb04:	7e23      	ldrb	r3, [r4, #24]
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	18e3      	adds	r3, r4, r3
 800bb0a:	8398      	strh	r0, [r3, #28]
		HAL_ADC_Stop(&hadc);
 800bb0c:	0038      	movs	r0, r7
 800bb0e:	f003 fa5f 	bl	800efd0 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800bb12:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_NONE;
 800bb14:	4a1b      	ldr	r2, [pc, #108]	; (800bb84 <ReadADCChannel+0x108>)
		sConfig.Channel = Channel;
 800bb16:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 800bb18:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bb1a:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_NONE;
 800bb1c:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bb1e:	2203      	movs	r2, #3
 800bb20:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bb22:	317c      	adds	r1, #124	; 0x7c
 800bb24:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800bb26:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800bb28:	f003 fadc 	bl	800f0e4 <HAL_ADC_ConfigChannel>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0b2      	beq.n	800ba96 <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800bb30:	2064      	movs	r0, #100	; 0x64
 800bb32:	f003 f8a5 	bl	800ec80 <HAL_Delay>
 800bb36:	e7ae      	b.n	800ba96 <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800bb38:	4b13      	ldr	r3, [pc, #76]	; (800bb88 <ReadADCChannel+0x10c>)
 800bb3a:	429f      	cmp	r7, r3
 800bb3c:	d012      	beq.n	800bb64 <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800bb3e:	4b13      	ldr	r3, [pc, #76]	; (800bb8c <ReadADCChannel+0x110>)
 800bb40:	429f      	cmp	r7, r3
 800bb42:	d1bc      	bne.n	800babe <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800bb44:	2303      	movs	r3, #3
 800bb46:	4699      	mov	r9, r3
 800bb48:	e7b9      	b.n	800babe <ReadADCChannel+0x42>
	HAL_Delay(100);
 800bb4a:	2064      	movs	r0, #100	; 0x64
 800bb4c:	f003 f898 	bl	800ec80 <HAL_Delay>
 800bb50:	e7ce      	b.n	800baf0 <ReadADCChannel+0x74>
	else if (huart->Instance == USART6 && side == "top")
 800bb52:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <ReadADCChannel+0x10c>)
 800bb54:	429f      	cmp	r7, r3
 800bb56:	d008      	beq.n	800bb6a <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <ReadADCChannel+0x110>)
 800bb5a:	429f      	cmp	r7, r3
 800bb5c:	d1af      	bne.n	800babe <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800bb5e:	2305      	movs	r3, #5
 800bb60:	4699      	mov	r9, r3
 800bb62:	e7ac      	b.n	800babe <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800bb64:	2302      	movs	r3, #2
 800bb66:	4699      	mov	r9, r3
 800bb68:	e7a9      	b.n	800babe <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800bb6a:	2304      	movs	r3, #4
 800bb6c:	4699      	mov	r9, r3
 800bb6e:	e7a6      	b.n	800babe <ReadADCChannel+0x42>
 800bb70:	200025c8 	.word	0x200025c8
 800bb74:	20002648 	.word	0x20002648
 800bb78:	40004400 	.word	0x40004400
 800bb7c:	40011400 	.word	0x40011400
 800bb80:	20006e64 	.word	0x20006e64
 800bb84:	00001001 	.word	0x00001001
 800bb88:	08017e0c 	.word	0x08017e0c
 800bb8c:	08017e10 	.word	0x08017e10

0800bb90 <buttonReleasedCallback>:
 800bb90:	4770      	bx	lr
 800bb92:	46c0      	nop			; (mov r8, r8)

0800bb94 <buttonClickedCallback>:
 800bb94:	4770      	bx	lr
 800bb96:	46c0      	nop			; (mov r8, r8)

0800bb98 <buttonDblClickedCallback>:
 800bb98:	4770      	bx	lr
 800bb9a:	46c0      	nop			; (mov r8, r8)

0800bb9c <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800bb9c:	4770      	bx	lr
 800bb9e:	46c0      	nop			; (mov r8, r8)

0800bba0 <buttonReleasedForYCallback>:
 800bba0:	4770      	bx	lr
 800bba2:	46c0      	nop			; (mov r8, r8)

0800bba4 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800bba4:	4bc2      	ldr	r3, [pc, #776]	; (800beb0 <CheckAttachedButtons+0x30c>)
 800bba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba8:	4645      	mov	r5, r8
 800bbaa:	001c      	movs	r4, r3
 800bbac:	4698      	mov	r8, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bbae:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800bbb0:	46de      	mov	lr, fp
 800bbb2:	464e      	mov	r6, r9
 800bbb4:	4657      	mov	r7, sl
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bbb6:	469b      	mov	fp, r3
void CheckAttachedButtons(void) {
 800bbb8:	b5e0      	push	{r5, r6, r7, lr}
 800bbba:	b08d      	sub	sp, #52	; 0x34
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bbbc:	9306      	str	r3, [sp, #24]
			if (delayButtonStateReset == false)
 800bbbe:	4bbd      	ldr	r3, [pc, #756]	; (800beb4 <CheckAttachedButtons+0x310>)
void CheckAttachedButtons(void) {
 800bbc0:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800bbc2:	4699      	mov	r9, r3
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800bbc4:	465b      	mov	r3, fp
 800bbc6:	3409      	adds	r4, #9
 800bbc8:	9305      	str	r3, [sp, #20]
 800bbca:	b2eb      	uxtb	r3, r5
 800bbcc:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800bbce:	7863      	ldrb	r3, [r4, #1]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d100      	bne.n	800bbd6 <CheckAttachedButtons+0x32>
 800bbd4:	e0ec      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
			if (delayButtonStateReset == false)
 800bbd6:	2324      	movs	r3, #36	; 0x24
 800bbd8:	464a      	mov	r2, r9
 800bbda:	5cd3      	ldrb	r3, [r2, r3]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d100      	bne.n	800bbe2 <CheckAttachedButtons+0x3e>
				button[i].state = NONE;
 800bbe0:	7023      	strb	r3, [r4, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bbe2:	ab06      	add	r3, sp, #24
 800bbe4:	469c      	mov	ip, r3
 800bbe6:	270e      	movs	r7, #14
 800bbe8:	ae09      	add	r6, sp, #36	; 0x24
 800bbea:	4467      	add	r7, ip
 800bbec:	ab0b      	add	r3, sp, #44	; 0x2c
 800bbee:	0032      	movs	r2, r6
 800bbf0:	a90a      	add	r1, sp, #40	; 0x28
 800bbf2:	9700      	str	r7, [sp, #0]
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	f7ff f9af 	bl	800af58 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800bbfa:	8831      	ldrh	r1, [r6, #0]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc00:	f004 fc8a 	bl	8010518 <HAL_GPIO_WritePin>
			Delay_us(10);
 800bc04:	200a      	movs	r0, #10
 800bc06:	f000 fe2b 	bl	800c860 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800bc0a:	8839      	ldrh	r1, [r7, #0]
 800bc0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc0e:	f004 fc7d 	bl	801050c <HAL_GPIO_ReadPin>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d100      	bne.n	800bc18 <CheckAttachedButtons+0x74>
 800bc16:	e122      	b.n	800be5e <CheckAttachedButtons+0x2ba>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800bc18:	8831      	ldrh	r1, [r6, #0]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc1e:	f004 fc7b 	bl	8010518 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800bc22:	7863      	ldrb	r3, [r4, #1]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d100      	bne.n	800bc2a <CheckAttachedButtons+0x86>
 800bc28:	e0d0      	b.n	800bdcc <CheckAttachedButtons+0x228>
 800bc2a:	d800      	bhi.n	800bc2e <CheckAttachedButtons+0x8a>
 800bc2c:	e0cc      	b.n	800bdc8 <CheckAttachedButtons+0x224>
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d100      	bne.n	800bc34 <CheckAttachedButtons+0x90>
 800bc32:	e14d      	b.n	800bed0 <CheckAttachedButtons+0x32c>
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	d000      	beq.n	800bc3a <CheckAttachedButtons+0x96>
 800bc38:	e11f      	b.n	800be7a <CheckAttachedButtons+0x2d6>
 800bc3a:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bc3c:	9e05      	ldr	r6, [sp, #20]
 800bc3e:	00aa      	lsls	r2, r5, #2
 800bc40:	3140      	adds	r1, #64	; 0x40
 800bc42:	588b      	ldr	r3, [r1, r2]
 800bc44:	2e01      	cmp	r6, #1
 800bc46:	d100      	bne.n	800bc4a <CheckAttachedButtons+0xa6>
 800bc48:	e14d      	b.n	800bee6 <CheckAttachedButtons+0x342>
				else if (connected == GPIO_PIN_RESET)
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	d100      	bne.n	800bc50 <CheckAttachedButtons+0xac>
 800bc4e:	e233      	b.n	800c0b8 <CheckAttachedButtons+0x514>
			if (state == CLOSED || state == ON) {
 800bc50:	9906      	ldr	r1, [sp, #24]
 800bc52:	2904      	cmp	r1, #4
 800bc54:	d100      	bne.n	800bc58 <CheckAttachedButtons+0xb4>
 800bc56:	e118      	b.n	800be8a <CheckAttachedButtons+0x2e6>
 800bc58:	9906      	ldr	r1, [sp, #24]
 800bc5a:	2902      	cmp	r1, #2
 800bc5c:	d100      	bne.n	800bc60 <CheckAttachedButtons+0xbc>
 800bc5e:	e114      	b.n	800be8a <CheckAttachedButtons+0x2e6>
			if (state == OPEN || state == OFF) {
 800bc60:	9906      	ldr	r1, [sp, #24]
 800bc62:	2903      	cmp	r1, #3
 800bc64:	d003      	beq.n	800bc6e <CheckAttachedButtons+0xca>
 800bc66:	4894      	ldr	r0, [pc, #592]	; (800beb8 <CheckAttachedButtons+0x314>)
 800bc68:	9004      	str	r0, [sp, #16]
 800bc6a:	2901      	cmp	r1, #1
 800bc6c:	d116      	bne.n	800bc9c <CheckAttachedButtons+0xf8>
				if (releaseCounter[i] < 0xFFFF)
 800bc6e:	4640      	mov	r0, r8
 800bc70:	305c      	adds	r0, #92	; 0x5c
 800bc72:	5881      	ldr	r1, [r0, r2]
 800bc74:	4e91      	ldr	r6, [pc, #580]	; (800bebc <CheckAttachedButtons+0x318>)
 800bc76:	42b1      	cmp	r1, r6
 800bc78:	d900      	bls.n	800bc7c <CheckAttachedButtons+0xd8>
 800bc7a:	e0bc      	b.n	800bdf6 <CheckAttachedButtons+0x252>
					++releaseCounter[i];		// Advance the debounce counter
 800bc7c:	3101      	adds	r1, #1
 800bc7e:	5081      	str	r1, [r0, r2]
 800bc80:	488d      	ldr	r0, [pc, #564]	; (800beb8 <CheckAttachedButtons+0x314>)
				if (clicked == 2
 800bc82:	272f      	movs	r7, #47	; 0x2f
 800bc84:	9004      	str	r0, [sp, #16]
 800bc86:	7946      	ldrb	r6, [r0, #5]
 800bc88:	4648      	mov	r0, r9
 800bc8a:	498d      	ldr	r1, [pc, #564]	; (800bec0 <CheckAttachedButtons+0x31c>)
 800bc8c:	5dc7      	ldrb	r7, [r0, r7]
 800bc8e:	5c69      	ldrb	r1, [r5, r1]
 800bc90:	2f02      	cmp	r7, #2
 800bc92:	d100      	bne.n	800bc96 <CheckAttachedButtons+0xf2>
 800bc94:	e103      	b.n	800be9e <CheckAttachedButtons+0x2fa>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800bc96:	42b1      	cmp	r1, r6
 800bc98:	d900      	bls.n	800bc9c <CheckAttachedButtons+0xf8>
 800bc9a:	e102      	b.n	800bea2 <CheckAttachedButtons+0x2fe>
 800bc9c:	4646      	mov	r6, r8
			if (pressCounter[i] < BOS.buttons.debounce) {
 800bc9e:	9904      	ldr	r1, [sp, #16]
 800bca0:	365c      	adds	r6, #92	; 0x5c
 800bca2:	58b0      	ldr	r0, [r6, r2]
 800bca4:	8809      	ldrh	r1, [r1, #0]
 800bca6:	9003      	str	r0, [sp, #12]
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	d84d      	bhi.n	800bd48 <CheckAttachedButtons+0x1a4>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800bcac:	d105      	bne.n	800bcba <CheckAttachedButtons+0x116>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800bcae:	2707      	movs	r7, #7
 800bcb0:	7027      	strb	r7, [r4, #0]
					++pressCounter[i];
 800bcb2:	4647      	mov	r7, r8
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	3740      	adds	r7, #64	; 0x40
 800bcb8:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800bcba:	9803      	ldr	r0, [sp, #12]
 800bcbc:	4281      	cmp	r1, r0
 800bcbe:	d205      	bcs.n	800bccc <CheckAttachedButtons+0x128>
					releaseCounter[i] = 0;
 800bcc0:	4646      	mov	r6, r8
 800bcc2:	2700      	movs	r7, #0
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	365c      	adds	r6, #92	; 0x5c
 800bcc8:	50b7      	str	r7, [r6, r2]
 800bcca:	9003      	str	r0, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800bccc:	9804      	ldr	r0, [sp, #16]
 800bcce:	8840      	ldrh	r0, [r0, #2]
 800bcd0:	9007      	str	r0, [sp, #28]
 800bcd2:	4298      	cmp	r0, r3
 800bcd4:	d204      	bcs.n	800bce0 <CheckAttachedButtons+0x13c>
						&& pressCounter[i] < 500) {
 800bcd6:	20f4      	movs	r0, #244	; 0xf4
 800bcd8:	30ff      	adds	r0, #255	; 0xff
 800bcda:	4283      	cmp	r3, r0
 800bcdc:	d800      	bhi.n	800bce0 <CheckAttachedButtons+0x13c>
 800bcde:	e10c      	b.n	800befa <CheckAttachedButtons+0x356>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800bce0:	4878      	ldr	r0, [pc, #480]	; (800bec4 <CheckAttachedButtons+0x320>)
 800bce2:	4684      	mov	ip, r0
 800bce4:	4878      	ldr	r0, [pc, #480]	; (800bec8 <CheckAttachedButtons+0x324>)
 800bce6:	449c      	add	ip, r3
 800bce8:	4584      	cmp	ip, r0
 800bcea:	d82d      	bhi.n	800bd48 <CheckAttachedButtons+0x1a4>
					if (clicked)
 800bcec:	202f      	movs	r0, #47	; 0x2f
 800bcee:	4684      	mov	ip, r0
 800bcf0:	4648      	mov	r0, r9
 800bcf2:	4667      	mov	r7, ip
 800bcf4:	5dc0      	ldrb	r0, [r0, r7]
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d002      	beq.n	800bd00 <CheckAttachedButtons+0x15c>
						clicked = 0;						// Cannot be a click
 800bcfa:	4648      	mov	r0, r9
 800bcfc:	2600      	movs	r6, #0
 800bcfe:	55c6      	strb	r6, [r0, r7]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bd00:	78a0      	ldrb	r0, [r4, #2]
	t1 *= 1000;
 800bd02:	0147      	lsls	r7, r0, #5
 800bd04:	1a3f      	subs	r7, r7, r0
 800bd06:	00bf      	lsls	r7, r7, #2
 800bd08:	4683      	mov	fp, r0
 800bd0a:	46bc      	mov	ip, r7
 800bd0c:	44dc      	add	ip, fp
 800bd0e:	4660      	mov	r0, ip
 800bd10:	00c0      	lsls	r0, r0, #3
	if (pressCounter[port] == t1) {
 800bd12:	4298      	cmp	r0, r3
 800bd14:	d100      	bne.n	800bd18 <CheckAttachedButtons+0x174>
 800bd16:	e169      	b.n	800bfec <CheckAttachedButtons+0x448>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bd18:	78e0      	ldrb	r0, [r4, #3]
	t2 *= 1000;
 800bd1a:	0147      	lsls	r7, r0, #5
 800bd1c:	1a3f      	subs	r7, r7, r0
 800bd1e:	00bf      	lsls	r7, r7, #2
 800bd20:	4683      	mov	fp, r0
 800bd22:	46bc      	mov	ip, r7
 800bd24:	44dc      	add	ip, fp
 800bd26:	4660      	mov	r0, ip
 800bd28:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t2) {
 800bd2a:	4298      	cmp	r0, r3
 800bd2c:	d100      	bne.n	800bd30 <CheckAttachedButtons+0x18c>
 800bd2e:	e175      	b.n	800c01c <CheckAttachedButtons+0x478>
			t3 = button[port].pressedX3Sec;
 800bd30:	7920      	ldrb	r0, [r4, #4]
	t3 *= 1000;
 800bd32:	0146      	lsls	r6, r0, #5
 800bd34:	1a36      	subs	r6, r6, r0
 800bd36:	00b6      	lsls	r6, r6, #2
 800bd38:	4683      	mov	fp, r0
 800bd3a:	46b4      	mov	ip, r6
 800bd3c:	44dc      	add	ip, fp
 800bd3e:	4660      	mov	r0, ip
 800bd40:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t3) {
 800bd42:	4298      	cmp	r0, r3
 800bd44:	d100      	bne.n	800bd48 <CheckAttachedButtons+0x1a4>
 800bd46:	e169      	b.n	800c01c <CheckAttachedButtons+0x478>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	4299      	cmp	r1, r3
 800bd4c:	d822      	bhi.n	800bd94 <CheckAttachedButtons+0x1f0>
 800bd4e:	4643      	mov	r3, r8
 800bd50:	9804      	ldr	r0, [sp, #16]
 800bd52:	3340      	adds	r3, #64	; 0x40
 800bd54:	8840      	ldrh	r0, [r0, #2]
 800bd56:	589b      	ldr	r3, [r3, r2]
 800bd58:	9007      	str	r0, [sp, #28]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800bd5a:	9803      	ldr	r0, [sp, #12]
 800bd5c:	4281      	cmp	r1, r0
 800bd5e:	d100      	bne.n	800bd62 <CheckAttachedButtons+0x1be>
 800bd60:	e0c4      	b.n	800beec <CheckAttachedButtons+0x348>
 800bd62:	4640      	mov	r0, r8
 800bd64:	305c      	adds	r0, #92	; 0x5c
 800bd66:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800bd68:	4299      	cmp	r1, r3
 800bd6a:	d203      	bcs.n	800bd74 <CheckAttachedButtons+0x1d0>
					pressCounter[i] = 0;
 800bd6c:	4643      	mov	r3, r8
 800bd6e:	2100      	movs	r1, #0
 800bd70:	3340      	adds	r3, #64	; 0x40
 800bd72:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800bd74:	9b07      	ldr	r3, [sp, #28]
 800bd76:	4283      	cmp	r3, r0
 800bd78:	d240      	bcs.n	800bdfc <CheckAttachedButtons+0x258>
						&& releaseCounter[i] < 500) {
 800bd7a:	23f4      	movs	r3, #244	; 0xf4
 800bd7c:	33ff      	adds	r3, #255	; 0xff
 800bd7e:	4298      	cmp	r0, r3
 800bd80:	d83c      	bhi.n	800bdfc <CheckAttachedButtons+0x258>
					if (clicked == 1) {
 800bd82:	222f      	movs	r2, #47	; 0x2f
 800bd84:	464b      	mov	r3, r9
 800bd86:	5c9b      	ldrb	r3, [r3, r2]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d100      	bne.n	800bd8e <CheckAttachedButtons+0x1ea>
 800bd8c:	e15e      	b.n	800c04c <CheckAttachedButtons+0x4a8>
					} else if (clicked == 3) {
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d100      	bne.n	800bd94 <CheckAttachedButtons+0x1f0>
 800bd92:	e115      	b.n	800bfc0 <CheckAttachedButtons+0x41c>
			switch (button[i].state) {
 800bd94:	7823      	ldrb	r3, [r4, #0]
 800bd96:	3b05      	subs	r3, #5
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b09      	cmp	r3, #9
 800bd9c:	d808      	bhi.n	800bdb0 <CheckAttachedButtons+0x20c>
 800bd9e:	4a4b      	ldr	r2, [pc, #300]	; (800becc <CheckAttachedButtons+0x328>)
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	58d3      	ldr	r3, [r2, r3]
 800bda4:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800bda6:	4650      	mov	r0, sl
 800bda8:	f7ff f9ba 	bl	800b120 <buttonPressedCallback>
				button[i].state = NONE;
 800bdac:	2300      	movs	r3, #0
 800bdae:	7023      	strb	r3, [r4, #0]
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800bdb4:	2d07      	cmp	r5, #7
 800bdb6:	d000      	beq.n	800bdba <CheckAttachedButtons+0x216>
 800bdb8:	e707      	b.n	800bbca <CheckAttachedButtons+0x26>
}
 800bdba:	b00d      	add	sp, #52	; 0x34
 800bdbc:	bc3c      	pop	{r2, r3, r4, r5}
 800bdbe:	4690      	mov	r8, r2
 800bdc0:	4699      	mov	r9, r3
 800bdc2:	46a2      	mov	sl, r4
 800bdc4:	46ab      	mov	fp, r5
 800bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d156      	bne.n	800be7a <CheckAttachedButtons+0x2d6>
 800bdcc:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bdce:	9805      	ldr	r0, [sp, #20]
 800bdd0:	00aa      	lsls	r2, r5, #2
 800bdd2:	3140      	adds	r1, #64	; 0x40
 800bdd4:	588b      	ldr	r3, [r1, r2]
 800bdd6:	2801      	cmp	r0, #1
 800bdd8:	d100      	bne.n	800bddc <CheckAttachedButtons+0x238>
 800bdda:	e161      	b.n	800c0a0 <CheckAttachedButtons+0x4fc>
				else if (connected == GPIO_PIN_RESET)
 800bddc:	9905      	ldr	r1, [sp, #20]
 800bdde:	2900      	cmp	r1, #0
 800bde0:	d000      	beq.n	800bde4 <CheckAttachedButtons+0x240>
 800bde2:	e735      	b.n	800bc50 <CheckAttachedButtons+0xac>
				if (releaseCounter[i] < 0xFFFF)
 800bde4:	4640      	mov	r0, r8
 800bde6:	2103      	movs	r1, #3
 800bde8:	305c      	adds	r0, #92	; 0x5c
 800bdea:	9106      	str	r1, [sp, #24]
 800bdec:	4e33      	ldr	r6, [pc, #204]	; (800bebc <CheckAttachedButtons+0x318>)
 800bdee:	5881      	ldr	r1, [r0, r2]
 800bdf0:	42b1      	cmp	r1, r6
 800bdf2:	d800      	bhi.n	800bdf6 <CheckAttachedButtons+0x252>
 800bdf4:	e742      	b.n	800bc7c <CheckAttachedButtons+0xd8>
					releaseCounter[i] = 0;		// Reset debounce counter
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	5081      	str	r1, [r0, r2]
 800bdfa:	e741      	b.n	800bc80 <CheckAttachedButtons+0xdc>
				} else if (releaseCounter[i] >= 500
 800bdfc:	0003      	movs	r3, r0
 800bdfe:	4a32      	ldr	r2, [pc, #200]	; (800bec8 <CheckAttachedButtons+0x324>)
 800be00:	3bf5      	subs	r3, #245	; 0xf5
 800be02:	3bff      	subs	r3, #255	; 0xff
 800be04:	4293      	cmp	r3, r2
 800be06:	d8c5      	bhi.n	800bd94 <CheckAttachedButtons+0x1f0>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800be08:	7961      	ldrb	r1, [r4, #5]
	t1 *= 1000;
 800be0a:	014b      	lsls	r3, r1, #5
 800be0c:	1a5b      	subs	r3, r3, r1
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	185b      	adds	r3, r3, r1
 800be12:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800be14:	4283      	cmp	r3, r0
 800be16:	d100      	bne.n	800be1a <CheckAttachedButtons+0x276>
 800be18:	e12e      	b.n	800c078 <CheckAttachedButtons+0x4d4>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800be1a:	79a1      	ldrb	r1, [r4, #6]
	t2 *= 1000;
 800be1c:	014b      	lsls	r3, r1, #5
 800be1e:	1a5b      	subs	r3, r3, r1
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	185b      	adds	r3, r3, r1
 800be24:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800be26:	4283      	cmp	r3, r0
 800be28:	d007      	beq.n	800be3a <CheckAttachedButtons+0x296>
			t3 = button[port].releasedY3Sec;
 800be2a:	79e1      	ldrb	r1, [r4, #7]
	t3 *= 1000;
 800be2c:	014b      	lsls	r3, r1, #5
 800be2e:	1a5b      	subs	r3, r3, r1
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	185b      	adds	r3, r3, r1
 800be34:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800be36:	4283      	cmp	r3, r0
 800be38:	d1ac      	bne.n	800bd94 <CheckAttachedButtons+0x1f0>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800be3a:	230d      	movs	r3, #13
 800be3c:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 800be3e:	2324      	movs	r3, #36	; 0x24
 800be40:	464a      	mov	r2, r9
 800be42:	5cd2      	ldrb	r2, [r2, r3]
 800be44:	2a00      	cmp	r2, #0
 800be46:	d1b3      	bne.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800be48:	7a22      	ldrb	r2, [r4, #8]
 800be4a:	0652      	lsls	r2, r2, #25
 800be4c:	d5b0      	bpl.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800be4e:	4649      	mov	r1, r9
 800be50:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800be52:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800be54:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800be56:	2102      	movs	r1, #2
 800be58:	f7ff fea2 	bl	800bba0 <buttonReleasedForYCallback>
 800be5c:	e7a8      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800be5e:	8831      	ldrh	r1, [r6, #0]
 800be60:	2201      	movs	r2, #1
 800be62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be64:	f004 fb58 	bl	8010518 <HAL_GPIO_WritePin>
				Delay_us(10);
 800be68:	200a      	movs	r0, #10
 800be6a:	f000 fcf9 	bl	800c860 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800be6e:	8839      	ldrh	r1, [r7, #0]
 800be70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800be72:	f004 fb4b 	bl	801050c <HAL_GPIO_ReadPin>
 800be76:	9005      	str	r0, [sp, #20]
 800be78:	e6ce      	b.n	800bc18 <CheckAttachedButtons+0x74>
 800be7a:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800be7c:	9906      	ldr	r1, [sp, #24]
 800be7e:	3340      	adds	r3, #64	; 0x40
 800be80:	00aa      	lsls	r2, r5, #2
 800be82:	589b      	ldr	r3, [r3, r2]
 800be84:	2904      	cmp	r1, #4
 800be86:	d000      	beq.n	800be8a <CheckAttachedButtons+0x2e6>
 800be88:	e6e6      	b.n	800bc58 <CheckAttachedButtons+0xb4>
				if (pressCounter[i] < 0xFFFF)
 800be8a:	490c      	ldr	r1, [pc, #48]	; (800bebc <CheckAttachedButtons+0x318>)
 800be8c:	428b      	cmp	r3, r1
 800be8e:	d84f      	bhi.n	800bf30 <CheckAttachedButtons+0x38c>
					++pressCounter[i];			// Advance the debounce counter
 800be90:	4641      	mov	r1, r8
 800be92:	3301      	adds	r3, #1
 800be94:	3140      	adds	r1, #64	; 0x40
 800be96:	508b      	str	r3, [r1, r2]
 800be98:	4907      	ldr	r1, [pc, #28]	; (800beb8 <CheckAttachedButtons+0x314>)
 800be9a:	9104      	str	r1, [sp, #16]
 800be9c:	e6fe      	b.n	800bc9c <CheckAttachedButtons+0xf8>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800be9e:	42b1      	cmp	r1, r6
 800bea0:	d94e      	bls.n	800bf40 <CheckAttachedButtons+0x39c>
					clicked = 0;
 800bea2:	2100      	movs	r1, #0
 800bea4:	4648      	mov	r0, r9
 800bea6:	262f      	movs	r6, #47	; 0x2f
 800bea8:	5581      	strb	r1, [r0, r6]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800beaa:	4805      	ldr	r0, [pc, #20]	; (800bec0 <CheckAttachedButtons+0x31c>)
 800beac:	5429      	strb	r1, [r5, r0]
 800beae:	e6f5      	b.n	800bc9c <CheckAttachedButtons+0xf8>
 800beb0:	200025c8 	.word	0x200025c8
 800beb4:	20002648 	.word	0x20002648
 800beb8:	20006a80 	.word	0x20006a80
 800bebc:	0000fffe 	.word	0x0000fffe
 800bec0:	20002670 	.word	0x20002670
 800bec4:	fffffe0c 	.word	0xfffffe0c
 800bec8:	0000fe0a 	.word	0x0000fe0a
 800becc:	08017068 	.word	0x08017068
 800bed0:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bed2:	9805      	ldr	r0, [sp, #20]
 800bed4:	00aa      	lsls	r2, r5, #2
 800bed6:	3140      	adds	r1, #64	; 0x40
 800bed8:	588b      	ldr	r3, [r1, r2]
 800beda:	2801      	cmp	r0, #1
 800bedc:	d063      	beq.n	800bfa6 <CheckAttachedButtons+0x402>
				else if (connected == GPIO_PIN_RESET)
 800bede:	9905      	ldr	r1, [sp, #20]
 800bee0:	2900      	cmp	r1, #0
 800bee2:	d000      	beq.n	800bee6 <CheckAttachedButtons+0x342>
 800bee4:	e6b4      	b.n	800bc50 <CheckAttachedButtons+0xac>
					state = OFF;
 800bee6:	2101      	movs	r1, #1
 800bee8:	9106      	str	r1, [sp, #24]
 800beea:	e6c0      	b.n	800bc6e <CheckAttachedButtons+0xca>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800beec:	2008      	movs	r0, #8
					++releaseCounter[i];
 800beee:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800bef0:	7020      	strb	r0, [r4, #0]
					++releaseCounter[i];
 800bef2:	365c      	adds	r6, #92	; 0x5c
 800bef4:	1c48      	adds	r0, r1, #1
 800bef6:	50b0      	str	r0, [r6, r2]
 800bef8:	e736      	b.n	800bd68 <CheckAttachedButtons+0x1c4>
					if (clicked == 0)
 800befa:	232f      	movs	r3, #47	; 0x2f
 800befc:	4648      	mov	r0, r9
 800befe:	5cc7      	ldrb	r7, [r0, r3]
 800bf00:	2f00      	cmp	r7, #0
 800bf02:	d100      	bne.n	800bf06 <CheckAttachedButtons+0x362>
 800bf04:	e0e3      	b.n	800c0ce <CheckAttachedButtons+0x52a>
					else if (clicked == 2) {
 800bf06:	2f02      	cmp	r7, #2
 800bf08:	d000      	beq.n	800bf0c <CheckAttachedButtons+0x368>
 800bf0a:	e71d      	b.n	800bd48 <CheckAttachedButtons+0x1a4>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800bf0c:	4875      	ldr	r0, [pc, #468]	; (800c0e4 <CheckAttachedButtons+0x540>)
 800bf0e:	9e04      	ldr	r6, [sp, #16]
 800bf10:	5c2f      	ldrb	r7, [r5, r0]
 800bf12:	7930      	ldrb	r0, [r6, #4]
 800bf14:	42b8      	cmp	r0, r7
 800bf16:	d300      	bcc.n	800bf1a <CheckAttachedButtons+0x376>
 800bf18:	e716      	b.n	800bd48 <CheckAttachedButtons+0x1a4>
								&& dblCounter[i]
 800bf1a:	7970      	ldrb	r0, [r6, #5]
 800bf1c:	42b8      	cmp	r0, r7
 800bf1e:	d800      	bhi.n	800bf22 <CheckAttachedButtons+0x37e>
 800bf20:	e712      	b.n	800bd48 <CheckAttachedButtons+0x1a4>
							clicked = 3;	// Record a possible double click
 800bf22:	4648      	mov	r0, r9
 800bf24:	2703      	movs	r7, #3
 800bf26:	54c7      	strb	r7, [r0, r3]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800bf28:	2300      	movs	r3, #0
 800bf2a:	486e      	ldr	r0, [pc, #440]	; (800c0e4 <CheckAttachedButtons+0x540>)
 800bf2c:	542b      	strb	r3, [r5, r0]
 800bf2e:	e70b      	b.n	800bd48 <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 800bf30:	4643      	mov	r3, r8
 800bf32:	2100      	movs	r1, #0
 800bf34:	3340      	adds	r3, #64	; 0x40
 800bf36:	5099      	str	r1, [r3, r2]
 800bf38:	496b      	ldr	r1, [pc, #428]	; (800c0e8 <CheckAttachedButtons+0x544>)
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9104      	str	r1, [sp, #16]
 800bf3e:	e6ad      	b.n	800bc9c <CheckAttachedButtons+0xf8>
					++dblCounter[i];
 800bf40:	4868      	ldr	r0, [pc, #416]	; (800c0e4 <CheckAttachedButtons+0x540>)
 800bf42:	3101      	adds	r1, #1
 800bf44:	5429      	strb	r1, [r5, r0]
 800bf46:	e6a9      	b.n	800bc9c <CheckAttachedButtons+0xf8>
				if (!delayButtonStateReset
 800bf48:	2324      	movs	r3, #36	; 0x24
 800bf4a:	464a      	mov	r2, r9
 800bf4c:	5cd2      	ldrb	r2, [r2, r3]
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	d000      	beq.n	800bf54 <CheckAttachedButtons+0x3b0>
 800bf52:	e72d      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800bf54:	7a22      	ldrb	r2, [r4, #8]
 800bf56:	2a7f      	cmp	r2, #127	; 0x7f
 800bf58:	d800      	bhi.n	800bf5c <CheckAttachedButtons+0x3b8>
 800bf5a:	e729      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800bf60:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf62:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800bf64:	2103      	movs	r1, #3
 800bf66:	f7ff fe1b 	bl	800bba0 <buttonReleasedForYCallback>
 800bf6a:	e721      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
				if (!delayButtonStateReset
 800bf6c:	2324      	movs	r3, #36	; 0x24
 800bf6e:	464a      	mov	r2, r9
 800bf70:	5cd2      	ldrb	r2, [r2, r3]
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	d000      	beq.n	800bf78 <CheckAttachedButtons+0x3d4>
 800bf76:	e71b      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800bf78:	7a22      	ldrb	r2, [r4, #8]
 800bf7a:	06d2      	lsls	r2, r2, #27
 800bf7c:	d400      	bmi.n	800bf80 <CheckAttachedButtons+0x3dc>
 800bf7e:	e717      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800bf80:	4649      	mov	r1, r9
 800bf82:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800bf84:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf86:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800bf88:	2103      	movs	r1, #3
 800bf8a:	f7ff fe07 	bl	800bb9c <buttonPressedForXCallback>
 800bf8e:	e70f      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
				buttonReleasedCallback(i);
 800bf90:	4650      	mov	r0, sl
 800bf92:	f7ff fdfd 	bl	800bb90 <buttonReleasedCallback>
				button[i].state = NONE;
 800bf96:	2300      	movs	r3, #0
 800bf98:	3501      	adds	r5, #1
 800bf9a:	7023      	strb	r3, [r4, #0]
 800bf9c:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800bf9e:	2d07      	cmp	r5, #7
 800bfa0:	d000      	beq.n	800bfa4 <CheckAttachedButtons+0x400>
 800bfa2:	e612      	b.n	800bbca <CheckAttachedButtons+0x26>
 800bfa4:	e709      	b.n	800bdba <CheckAttachedButtons+0x216>
				if (pressCounter[i] < 0xFFFF)
 800bfa6:	4851      	ldr	r0, [pc, #324]	; (800c0ec <CheckAttachedButtons+0x548>)
 800bfa8:	4283      	cmp	r3, r0
 800bfaa:	d900      	bls.n	800bfae <CheckAttachedButtons+0x40a>
 800bfac:	e092      	b.n	800c0d4 <CheckAttachedButtons+0x530>
					state = ON;
 800bfae:	2102      	movs	r1, #2
 800bfb0:	9106      	str	r1, [sp, #24]
					++pressCounter[i];			// Advance the debounce counter
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	3140      	adds	r1, #64	; 0x40
 800bfb8:	508b      	str	r3, [r1, r2]
 800bfba:	494b      	ldr	r1, [pc, #300]	; (800c0e8 <CheckAttachedButtons+0x544>)
 800bfbc:	9104      	str	r1, [sp, #16]
 800bfbe:	e66d      	b.n	800bc9c <CheckAttachedButtons+0xf8>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800bfc0:	3303      	adds	r3, #3
 800bfc2:	7023      	strb	r3, [r4, #0]
						clicked = 0;			// Prepare for a single click
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800bfca:	2324      	movs	r3, #36	; 0x24
 800bfcc:	464a      	mov	r2, r9
 800bfce:	5cd2      	ldrb	r2, [r2, r3]
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	d000      	beq.n	800bfd6 <CheckAttachedButtons+0x432>
 800bfd4:	e6ec      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800bfd6:	7a22      	ldrb	r2, [r4, #8]
 800bfd8:	0792      	lsls	r2, r2, #30
 800bfda:	d400      	bmi.n	800bfde <CheckAttachedButtons+0x43a>
 800bfdc:	e6e8      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4649      	mov	r1, r9
					buttonDblClickedCallback(i);
 800bfe2:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bfe4:	54ca      	strb	r2, [r1, r3]
					buttonDblClickedCallback(i);
 800bfe6:	f7ff fdd7 	bl	800bb98 <buttonDblClickedCallback>
 800bfea:	e6e1      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X1_SEC;
 800bfec:	2009      	movs	r0, #9
 800bfee:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800bff0:	9803      	ldr	r0, [sp, #12]
 800bff2:	4281      	cmp	r1, r0
 800bff4:	d800      	bhi.n	800bff8 <CheckAttachedButtons+0x454>
 800bff6:	e6b0      	b.n	800bd5a <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 800bff8:	2324      	movs	r3, #36	; 0x24
 800bffa:	464a      	mov	r2, r9
 800bffc:	5cd2      	ldrb	r2, [r2, r3]
 800bffe:	2a00      	cmp	r2, #0
 800c000:	d000      	beq.n	800c004 <CheckAttachedButtons+0x460>
 800c002:	e6d5      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800c004:	7a22      	ldrb	r2, [r4, #8]
 800c006:	0752      	lsls	r2, r2, #29
 800c008:	d400      	bmi.n	800c00c <CheckAttachedButtons+0x468>
 800c00a:	e6d1      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c00c:	4649      	mov	r1, r9
 800c00e:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c010:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c012:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c014:	2101      	movs	r1, #1
 800c016:	f7ff fdc1 	bl	800bb9c <buttonPressedForXCallback>
 800c01a:	e6c9      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c01c:	200a      	movs	r0, #10
 800c01e:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c020:	9803      	ldr	r0, [sp, #12]
 800c022:	4281      	cmp	r1, r0
 800c024:	d800      	bhi.n	800c028 <CheckAttachedButtons+0x484>
 800c026:	e698      	b.n	800bd5a <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 800c028:	2324      	movs	r3, #36	; 0x24
 800c02a:	464a      	mov	r2, r9
 800c02c:	5cd2      	ldrb	r2, [r2, r3]
 800c02e:	2a00      	cmp	r2, #0
 800c030:	d000      	beq.n	800c034 <CheckAttachedButtons+0x490>
 800c032:	e6bd      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800c034:	7a22      	ldrb	r2, [r4, #8]
 800c036:	0712      	lsls	r2, r2, #28
 800c038:	d400      	bmi.n	800c03c <CheckAttachedButtons+0x498>
 800c03a:	e6b9      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c03c:	4649      	mov	r1, r9
 800c03e:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c040:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c042:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c044:	2102      	movs	r1, #2
 800c046:	f7ff fda9 	bl	800bb9c <buttonPressedForXCallback>
 800c04a:	e6b1      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						clicked = 2;			// Prepare for a double click
 800c04c:	4649      	mov	r1, r9
						button[i].state = CLICKED;// Record a single button click event
 800c04e:	3304      	adds	r3, #4
 800c050:	7023      	strb	r3, [r4, #0]
						clicked = 2;			// Prepare for a double click
 800c052:	3b03      	subs	r3, #3
 800c054:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800c056:	2324      	movs	r3, #36	; 0x24
 800c058:	464a      	mov	r2, r9
 800c05a:	5cd2      	ldrb	r2, [r2, r3]
 800c05c:	2a00      	cmp	r2, #0
 800c05e:	d000      	beq.n	800c062 <CheckAttachedButtons+0x4be>
 800c060:	e6a6      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800c062:	7a21      	ldrb	r1, [r4, #8]
 800c064:	3201      	adds	r2, #1
 800c066:	420a      	tst	r2, r1
 800c068:	d100      	bne.n	800c06c <CheckAttachedButtons+0x4c8>
 800c06a:	e6a1      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c06c:	4649      	mov	r1, r9
					buttonClickedCallback(i);
 800c06e:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c070:	54ca      	strb	r2, [r1, r3]
					buttonClickedCallback(i);
 800c072:	f7ff fd8f 	bl	800bb94 <buttonClickedCallback>
 800c076:	e69b      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c078:	230c      	movs	r3, #12
 800c07a:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 800c07c:	2324      	movs	r3, #36	; 0x24
 800c07e:	464a      	mov	r2, r9
 800c080:	5cd2      	ldrb	r2, [r2, r3]
 800c082:	2a00      	cmp	r2, #0
 800c084:	d000      	beq.n	800c088 <CheckAttachedButtons+0x4e4>
 800c086:	e693      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800c088:	7a22      	ldrb	r2, [r4, #8]
 800c08a:	0692      	lsls	r2, r2, #26
 800c08c:	d400      	bmi.n	800c090 <CheckAttachedButtons+0x4ec>
 800c08e:	e68f      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 800c090:	4649      	mov	r1, r9
 800c092:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c094:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800c096:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800c098:	2101      	movs	r1, #1
 800c09a:	f7ff fd81 	bl	800bba0 <buttonReleasedForYCallback>
 800c09e:	e687      	b.n	800bdb0 <CheckAttachedButtons+0x20c>
				if (pressCounter[i] < 0xFFFF)
 800c0a0:	4812      	ldr	r0, [pc, #72]	; (800c0ec <CheckAttachedButtons+0x548>)
 800c0a2:	4283      	cmp	r3, r0
 800c0a4:	d806      	bhi.n	800c0b4 <CheckAttachedButtons+0x510>
					++pressCounter[i];			// Advance the debounce counter
 800c0a6:	3301      	adds	r3, #1
					pressCounter[i] = 0;			// Reset debounce counter
 800c0a8:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800c0aa:	2104      	movs	r1, #4
 800c0ac:	9106      	str	r1, [sp, #24]
 800c0ae:	490e      	ldr	r1, [pc, #56]	; (800c0e8 <CheckAttachedButtons+0x544>)
 800c0b0:	9104      	str	r1, [sp, #16]
 800c0b2:	e5f3      	b.n	800bc9c <CheckAttachedButtons+0xf8>
					pressCounter[i] = 0;			// Reset debounce counter
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e7f7      	b.n	800c0a8 <CheckAttachedButtons+0x504>
				if (pressCounter[i] < 0xFFFF)
 800c0b8:	480c      	ldr	r0, [pc, #48]	; (800c0ec <CheckAttachedButtons+0x548>)
 800c0ba:	4283      	cmp	r3, r0
 800c0bc:	d800      	bhi.n	800c0c0 <CheckAttachedButtons+0x51c>
 800c0be:	e776      	b.n	800bfae <CheckAttachedButtons+0x40a>
					pressCounter[i] = 0;			// Reset debounce counter
 800c0c0:	508e      	str	r6, [r1, r2]
					state = ON;
 800c0c2:	2102      	movs	r1, #2
 800c0c4:	9106      	str	r1, [sp, #24]
 800c0c6:	4908      	ldr	r1, [pc, #32]	; (800c0e8 <CheckAttachedButtons+0x544>)
					pressCounter[i] = 0;			// Reset debounce counter
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9104      	str	r1, [sp, #16]
 800c0cc:	e5e6      	b.n	800bc9c <CheckAttachedButtons+0xf8>
						clicked = 1;		// Record a possible single click
 800c0ce:	3701      	adds	r7, #1
 800c0d0:	54c7      	strb	r7, [r0, r3]
 800c0d2:	e639      	b.n	800bd48 <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	508b      	str	r3, [r1, r2]
 800c0d8:	2102      	movs	r1, #2
 800c0da:	9106      	str	r1, [sp, #24]
 800c0dc:	4902      	ldr	r1, [pc, #8]	; (800c0e8 <CheckAttachedButtons+0x544>)
 800c0de:	9104      	str	r1, [sp, #16]
 800c0e0:	e5dc      	b.n	800bc9c <CheckAttachedButtons+0xf8>
 800c0e2:	46c0      	nop			; (mov r8, r8)
 800c0e4:	20002670 	.word	0x20002670
 800c0e8:	20006a80 	.word	0x20006a80
 800c0ec:	0000fffe 	.word	0x0000fffe

0800c0f0 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	4b03      	ldr	r3, [pc, #12]	; (800c104 <NVIC_SystemReset+0x14>)
 800c0f6:	4a04      	ldr	r2, [pc, #16]	; (800c108 <NVIC_SystemReset+0x18>)
 800c0f8:	60da      	str	r2, [r3, #12]
 800c0fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800c0fe:	46c0      	nop			; (mov r8, r8)
 800c100:	e7fd      	b.n	800c0fe <NVIC_SystemReset+0xe>
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	e000ed00 	.word	0xe000ed00
 800c108:	05fa0004 	.word	0x05fa0004

0800c10c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c10c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800c10e:	f002 fda9 	bl	800ec64 <HAL_IncTick>
  osSystickHandler();  
 800c112:	f000 ff89 	bl	800d028 <osSystickHandler>

}
 800c116:	bd10      	pop	{r4, pc}

0800c118 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800c118:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c11a:	24ff      	movs	r4, #255	; 0xff
 800c11c:	4d09      	ldr	r5, [pc, #36]	; (800c144 <HardFault_Handler+0x2c>)
{
 800c11e:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c120:	7828      	ldrb	r0, [r5, #0]
 800c122:	23ff      	movs	r3, #255	; 0xff
 800c124:	2211      	movs	r2, #17
 800c126:	4908      	ldr	r1, [pc, #32]	; (800c148 <HardFault_Handler+0x30>)
 800c128:	9400      	str	r4, [sp, #0]
 800c12a:	f000 fd79 	bl	800cc20 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c12e:	4b07      	ldr	r3, [pc, #28]	; (800c14c <HardFault_Handler+0x34>)
 800c130:	7828      	ldrb	r0, [r5, #0]
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	220f      	movs	r2, #15
 800c136:	23ff      	movs	r3, #255	; 0xff
 800c138:	9400      	str	r4, [sp, #0]
 800c13a:	f000 fd71 	bl	800cc20 <writePxMutex>
	NVIC_SystemReset();
 800c13e:	f7ff ffd7 	bl	800c0f0 <NVIC_SystemReset>
 800c142:	46c0      	nop			; (mov r8, r8)
 800c144:	20000c28 	.word	0x20000c28
 800c148:	08019794 	.word	0x08019794
 800c14c:	200000a0 	.word	0x200000a0

0800c150 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800c150:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800c152:	4802      	ldr	r0, [pc, #8]	; (800c15c <USART1_IRQHandler+0xc>)
 800c154:	f005 fd82 	bl	8011c5c <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	20006c80 	.word	0x20006c80

0800c160 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800c160:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800c162:	4802      	ldr	r0, [pc, #8]	; (800c16c <USART2_IRQHandler+0xc>)
 800c164:	f005 fd7a 	bl	8011c5c <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	46c0      	nop			; (mov r8, r8)
 800c16c:	20006dd0 	.word	0x20006dd0

0800c170 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800c170:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800c172:	4806      	ldr	r0, [pc, #24]	; (800c18c <USART3_8_IRQHandler+0x1c>)
 800c174:	f005 fd72 	bl	8011c5c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800c178:	4805      	ldr	r0, [pc, #20]	; (800c190 <USART3_8_IRQHandler+0x20>)
 800c17a:	f005 fd6f 	bl	8011c5c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800c17e:	4805      	ldr	r0, [pc, #20]	; (800c194 <USART3_8_IRQHandler+0x24>)
 800c180:	f005 fd6c 	bl	8011c5c <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800c184:	4804      	ldr	r0, [pc, #16]	; (800c198 <USART3_8_IRQHandler+0x28>)
 800c186:	f005 fd69 	bl	8011c5c <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c18a:	bd10      	pop	{r4, pc}
 800c18c:	20006ba0 	.word	0x20006ba0
 800c190:	20006d60 	.word	0x20006d60
 800c194:	20006c10 	.word	0x20006c10
 800c198:	20006cf0 	.word	0x20006cf0

0800c19c <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800c19c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800c19e:	2001      	movs	r0, #1
 800c1a0:	f7fb f8d0 	bl	8007344 <DMA_IRQHandler>
	
}
 800c1a4:	bd10      	pop	{r4, pc}
 800c1a6:	46c0      	nop			; (mov r8, r8)

0800c1a8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800c1aa:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	2310      	movs	r3, #16
 800c1b0:	4213      	tst	r3, r2
 800c1b2:	d10e      	bne.n	800c1d2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800c1b4:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c1b6:	6811      	ldr	r1, [r2, #0]
 800c1b8:	05c9      	lsls	r1, r1, #23
 800c1ba:	d406      	bmi.n	800c1ca <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800c1bc:	6812      	ldr	r2, [r2, #0]
 800c1be:	4213      	tst	r3, r2
 800c1c0:	d002      	beq.n	800c1c8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800c1c2:	4808      	ldr	r0, [pc, #32]	; (800c1e4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800c1c4:	f003 fa26 	bl	800f614 <HAL_DMA_IRQHandler>
	}
}
 800c1c8:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800c1ca:	2002      	movs	r0, #2
 800c1cc:	f7fb f8ba 	bl	8007344 <DMA_IRQHandler>
 800c1d0:	e7fa      	b.n	800c1c8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800c1d2:	2005      	movs	r0, #5
 800c1d4:	f7fb f8b6 	bl	8007344 <DMA_IRQHandler>
 800c1d8:	e7f6      	b.n	800c1c8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800c1da:	46c0      	nop			; (mov r8, r8)
 800c1dc:	40020400 	.word	0x40020400
 800c1e0:	40020000 	.word	0x40020000
 800c1e4:	200023cc 	.word	0x200023cc

0800c1e8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c1e8:	4b12      	ldr	r3, [pc, #72]	; (800c234 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800c1ea:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	03d2      	lsls	r2, r2, #15
 800c1f0:	d414      	bmi.n	800c21c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	02d2      	lsls	r2, r2, #11
 800c1f6:	d40d      	bmi.n	800c214 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800c1f8:	4a0f      	ldr	r2, [pc, #60]	; (800c238 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800c1fa:	6812      	ldr	r2, [r2, #0]
 800c1fc:	05d2      	lsls	r2, r2, #23
 800c1fe:	d411      	bmi.n	800c224 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	04d2      	lsls	r2, r2, #19
 800c204:	d412      	bmi.n	800c22c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	01db      	lsls	r3, r3, #7
 800c20a:	d506      	bpl.n	800c21a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800c20c:	480b      	ldr	r0, [pc, #44]	; (800c23c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c20e:	f003 fa01 	bl	800f614 <HAL_DMA_IRQHandler>
	}
}
 800c212:	e002      	b.n	800c21a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800c214:	2004      	movs	r0, #4
 800c216:	f7fb f895 	bl	8007344 <DMA_IRQHandler>
}
 800c21a:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800c21c:	2003      	movs	r0, #3
 800c21e:	f7fb f891 	bl	8007344 <DMA_IRQHandler>
 800c222:	e7fa      	b.n	800c21a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800c224:	2006      	movs	r0, #6
 800c226:	f7fb f88d 	bl	8007344 <DMA_IRQHandler>
 800c22a:	e7f6      	b.n	800c21a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800c22c:	4804      	ldr	r0, [pc, #16]	; (800c240 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800c22e:	f003 f9f1 	bl	800f614 <HAL_DMA_IRQHandler>
 800c232:	e7f2      	b.n	800c21a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800c234:	40020000 	.word	0x40020000
 800c238:	40020400 	.word	0x40020400
 800c23c:	2000243c 	.word	0x2000243c
 800c240:	20002404 	.word	0x20002404

0800c244 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c244:	2300      	movs	r3, #0
{
 800c246:	b510      	push	{r4, lr}
 800c248:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c24a:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800c24c:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800c24e:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800c254:	f7fd ff2e 	bl	800a0b4 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800c258:	0020      	movs	r0, r4
 800c25a:	f7fd fd39 	bl	8009cd0 <GetPort>
 800c25e:	4b04      	ldr	r3, [pc, #16]	; (800c270 <HAL_UART_TxCpltCallback+0x2c>)
 800c260:	0080      	lsls	r0, r0, #2
 800c262:	58c0      	ldr	r0, [r0, r3]
 800c264:	a901      	add	r1, sp, #4
 800c266:	f001 fa17 	bl	800d698 <xQueueGiveFromISR>
}
 800c26a:	b002      	add	sp, #8
 800c26c:	bd10      	pop	{r4, pc}
 800c26e:	46c0      	nop			; (mov r8, r8)
 800c270:	20006b04 	.word	0x20006b04

0800c274 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c274:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800c276:	2369      	movs	r3, #105	; 0x69
 800c278:	2501      	movs	r5, #1
 800c27a:	54c5      	strb	r5, [r0, r3]
{
 800c27c:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800c27e:	f7fd fd27 	bl	8009cd0 <GetPort>
	if (portStatus[port] == STREAM) {
 800c282:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <HAL_UART_ErrorCallback+0x3c>)
 800c284:	5c1b      	ldrb	r3, [r3, r0]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d004      	beq.n	800c294 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800c28a:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <HAL_UART_ErrorCallback+0x40>)
 800c28c:	1818      	adds	r0, r3, r0
 800c28e:	3801      	subs	r0, #1
 800c290:	7005      	strb	r5, [r0, #0]
	}	
}
 800c292:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800c294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c296:	3801      	subs	r0, #1
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	0080      	lsls	r0, r0, #2
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <HAL_UART_ErrorCallback+0x44>)
 800c2a0:	b292      	uxth	r2, r2
 800c2a2:	58c3      	ldr	r3, [r0, r3]
 800c2a4:	0020      	movs	r0, r4
 800c2a6:	6819      	ldr	r1, [r3, #0]
 800c2a8:	3128      	adds	r1, #40	; 0x28
 800c2aa:	f005 f957 	bl	801155c <HAL_UART_Receive_DMA>
 800c2ae:	e7f0      	b.n	800c292 <HAL_UART_ErrorCallback+0x1e>
 800c2b0:	20000c2c 	.word	0x20000c2c
 800c2b4:	200019f0 	.word	0x200019f0
 800c2b8:	200019a8 	.word	0x200019a8

0800c2bc <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800c2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2be:	46de      	mov	lr, fp
 800c2c0:	464e      	mov	r6, r9
 800c2c2:	4645      	mov	r5, r8
 800c2c4:	4657      	mov	r7, sl
 800c2c6:	b5e0      	push	{r5, r6, r7, lr}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800c2cc:	f7fd fd00 	bl	8009cd0 <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c2d0:	4e60      	ldr	r6, [pc, #384]	; (800c454 <HAL_UART_RxCpltCallback+0x198>)
	uint8_t port_index = port_number - 1;
 800c2d2:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	4a60      	ldr	r2, [pc, #384]	; (800c458 <HAL_UART_RxCpltCallback+0x19c>)
 800c2d8:	5cf5      	ldrb	r5, [r6, r3]
 800c2da:	5c11      	ldrb	r1, [r2, r0]
 800c2dc:	2d0d      	cmp	r5, #13
 800c2de:	d00a      	beq.n	800c2f6 <HAL_UART_RxCpltCallback+0x3a>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800c2e0:	2903      	cmp	r1, #3
 800c2e2:	d00c      	beq.n	800c2fe <HAL_UART_RxCpltCallback+0x42>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c2e4:	2d48      	cmp	r5, #72	; 0x48
 800c2e6:	d067      	beq.n	800c3b8 <HAL_UART_RxCpltCallback+0xfc>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800c2e8:	2d5a      	cmp	r5, #90	; 0x5a
 800c2ea:	d11b      	bne.n	800c324 <HAL_UART_RxCpltCallback+0x68>
 800c2ec:	2907      	cmp	r1, #7
 800c2ee:	d11b      	bne.n	800c328 <HAL_UART_RxCpltCallback+0x6c>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800c2f0:	2308      	movs	r3, #8
 800c2f2:	5413      	strb	r3, [r2, r0]
 800c2f4:	e006      	b.n	800c304 <HAL_UART_RxCpltCallback+0x48>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c2f6:	2900      	cmp	r1, #0
 800c2f8:	d046      	beq.n	800c388 <HAL_UART_RxCpltCallback+0xcc>
	else if(portStatus[port_number] == CLI)
 800c2fa:	2903      	cmp	r1, #3
 800c2fc:	d112      	bne.n	800c324 <HAL_UART_RxCpltCallback+0x68>
		Read_In_CLI_Task_Flag = 1;
 800c2fe:	4b57      	ldr	r3, [pc, #348]	; (800c45c <HAL_UART_RxCpltCallback+0x1a0>)
 800c300:	2201      	movs	r2, #1
 800c302:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800c304:	0020      	movs	r0, r4
 800c306:	f7fd fce3 	bl	8009cd0 <GetPort>
 800c30a:	1e41      	subs	r1, r0, #1
 800c30c:	1871      	adds	r1, r6, r1
 800c30e:	2201      	movs	r2, #1
 800c310:	0020      	movs	r0, r4
 800c312:	f005 f923 	bl	801155c <HAL_UART_Receive_DMA>
}
 800c316:	b005      	add	sp, #20
 800c318:	bc3c      	pop	{r2, r3, r4, r5}
 800c31a:	4690      	mov	r8, r2
 800c31c:	4699      	mov	r9, r3
 800c31e:	46a2      	mov	sl, r4
 800c320:	46ab      	mov	fp, r5
 800c322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800c324:	2907      	cmp	r1, #7
 800c326:	d07c      	beq.n	800c422 <HAL_UART_RxCpltCallback+0x166>
	else if(portStatus[port_number] == Z_Status)
 800c328:	2908      	cmp	r1, #8
 800c32a:	d07d      	beq.n	800c428 <HAL_UART_RxCpltCallback+0x16c>
	else if(portStatus[port_number] == MSG)
 800c32c:	2901      	cmp	r1, #1
 800c32e:	d1e9      	bne.n	800c304 <HAL_UART_RxCpltCallback+0x48>
 800c330:	4f4b      	ldr	r7, [pc, #300]	; (800c460 <HAL_UART_RxCpltCallback+0x1a4>)
		if(temp_length[port_index] > 1)
 800c332:	494b      	ldr	r1, [pc, #300]	; (800c460 <HAL_UART_RxCpltCallback+0x1a4>)
 800c334:	5cff      	ldrb	r7, [r7, r3]
 800c336:	18c9      	adds	r1, r1, r3
 800c338:	46b9      	mov	r9, r7
 800c33a:	2701      	movs	r7, #1
 800c33c:	444f      	add	r7, r9
 800c33e:	b2ff      	uxtb	r7, r7
 800c340:	4688      	mov	r8, r1
 800c342:	7a09      	ldrb	r1, [r1, #8]
 800c344:	9701      	str	r7, [sp, #4]
 800c346:	2701      	movs	r7, #1
 800c348:	468c      	mov	ip, r1
 800c34a:	427f      	negs	r7, r7
 800c34c:	4467      	add	r7, ip
 800c34e:	b2ff      	uxtb	r7, r7
 800c350:	9702      	str	r7, [sp, #8]
 800c352:	4667      	mov	r7, ip
 800c354:	4943      	ldr	r1, [pc, #268]	; (800c464 <HAL_UART_RxCpltCallback+0x1a8>)
 800c356:	468a      	mov	sl, r1
 800c358:	5cc9      	ldrb	r1, [r1, r3]
 800c35a:	9100      	str	r1, [sp, #0]
 800c35c:	2f01      	cmp	r7, #1
 800c35e:	d930      	bls.n	800c3c2 <HAL_UART_RxCpltCallback+0x106>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c360:	00ca      	lsls	r2, r1, #3
 800c362:	1a52      	subs	r2, r2, r1
 800c364:	4694      	mov	ip, r2
 800c366:	0099      	lsls	r1, r3, #2
 800c368:	18c9      	adds	r1, r1, r3
 800c36a:	00ca      	lsls	r2, r1, #3
 800c36c:	1a51      	subs	r1, r2, r1
 800c36e:	4461      	add	r1, ip
 800c370:	4a3d      	ldr	r2, [pc, #244]	; (800c468 <HAL_UART_RxCpltCallback+0x1ac>)
 800c372:	00c9      	lsls	r1, r1, #3
 800c374:	1851      	adds	r1, r2, r1
 800c376:	464a      	mov	r2, r9
			temp_index[port_index]++;
 800c378:	9f01      	ldr	r7, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c37a:	548d      	strb	r5, [r1, r2]
			temp_index[port_index]++;
 800c37c:	4a38      	ldr	r2, [pc, #224]	; (800c460 <HAL_UART_RxCpltCallback+0x1a4>)
 800c37e:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800c380:	4643      	mov	r3, r8
 800c382:	9f02      	ldr	r7, [sp, #8]
 800c384:	721f      	strb	r7, [r3, #8]
 800c386:	e7bd      	b.n	800c304 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c388:	2303      	movs	r3, #3
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800c38a:	7011      	strb	r1, [r2, #0]
 800c38c:	7051      	strb	r1, [r2, #1]
 800c38e:	7091      	strb	r1, [r2, #2]
 800c390:	70d1      	strb	r1, [r2, #3]
 800c392:	7111      	strb	r1, [r2, #4]
 800c394:	7151      	strb	r1, [r2, #5]
 800c396:	7191      	strb	r1, [r2, #6]
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c398:	5413      	strb	r3, [r2, r0]
		PcPort = port_number;
 800c39a:	4b34      	ldr	r3, [pc, #208]	; (800c46c <HAL_UART_RxCpltCallback+0x1b0>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c39c:	2202      	movs	r2, #2
		PcPort = port_number;
 800c39e:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c3a0:	4b33      	ldr	r3, [pc, #204]	; (800c470 <HAL_UART_RxCpltCallback+0x1b4>)
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f002 f8c7 	bl	800e538 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800c3aa:	4b32      	ldr	r3, [pc, #200]	; (800c474 <HAL_UART_RxCpltCallback+0x1b8>)
 800c3ac:	781a      	ldrb	r2, [r3, #0]
 800c3ae:	2a01      	cmp	r2, #1
 800c3b0:	d1a6      	bne.n	800c300 <HAL_UART_RxCpltCallback+0x44>
 800c3b2:	492a      	ldr	r1, [pc, #168]	; (800c45c <HAL_UART_RxCpltCallback+0x1a0>)
 800c3b4:	700a      	strb	r2, [r1, #0]
 800c3b6:	e7a3      	b.n	800c300 <HAL_UART_RxCpltCallback+0x44>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c3b8:	2900      	cmp	r1, #0
 800c3ba:	d1b3      	bne.n	800c324 <HAL_UART_RxCpltCallback+0x68>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800c3bc:	2307      	movs	r3, #7
 800c3be:	5413      	strb	r3, [r2, r0]
 800c3c0:	e7a0      	b.n	800c304 <HAL_UART_RxCpltCallback+0x48>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c3c2:	9900      	ldr	r1, [sp, #0]
 800c3c4:	00cf      	lsls	r7, r1, #3
 800c3c6:	1a7f      	subs	r7, r7, r1
 800c3c8:	9703      	str	r7, [sp, #12]
 800c3ca:	009f      	lsls	r7, r3, #2
 800c3cc:	46bb      	mov	fp, r7
 800c3ce:	449b      	add	fp, r3
 800c3d0:	465f      	mov	r7, fp
 800c3d2:	4659      	mov	r1, fp
 800c3d4:	00ff      	lsls	r7, r7, #3
 800c3d6:	1a7f      	subs	r7, r7, r1
 800c3d8:	46bc      	mov	ip, r7
 800c3da:	9f03      	ldr	r7, [sp, #12]
 800c3dc:	46bb      	mov	fp, r7
 800c3de:	44dc      	add	ip, fp
 800c3e0:	4661      	mov	r1, ip
 800c3e2:	00c9      	lsls	r1, r1, #3
 800c3e4:	468c      	mov	ip, r1
 800c3e6:	4920      	ldr	r1, [pc, #128]	; (800c468 <HAL_UART_RxCpltCallback+0x1ac>)
 800c3e8:	464f      	mov	r7, r9
 800c3ea:	468b      	mov	fp, r1
 800c3ec:	44dc      	add	ip, fp
 800c3ee:	4661      	mov	r1, ip
 800c3f0:	55cd      	strb	r5, [r1, r7]
			temp_index[port_index]++;
 800c3f2:	9901      	ldr	r1, [sp, #4]
 800c3f4:	4d1a      	ldr	r5, [pc, #104]	; (800c460 <HAL_UART_RxCpltCallback+0x1a4>)
 800c3f6:	54e9      	strb	r1, [r5, r3]
			temp_length[port_index]--;
 800c3f8:	4641      	mov	r1, r8
 800c3fa:	9d02      	ldr	r5, [sp, #8]
 800c3fc:	720d      	strb	r5, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800c3fe:	9900      	ldr	r1, [sp, #0]
 800c400:	3101      	adds	r1, #1
 800c402:	b2c9      	uxtb	r1, r1
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800c404:	2905      	cmp	r1, #5
 800c406:	d100      	bne.n	800c40a <HAL_UART_RxCpltCallback+0x14e>
 800c408:	2100      	movs	r1, #0
 800c40a:	4655      	mov	r5, sl
 800c40c:	54e9      	strb	r1, [r5, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800c40e:	491a      	ldr	r1, [pc, #104]	; (800c478 <HAL_UART_RxCpltCallback+0x1bc>)
 800c410:	4d1a      	ldr	r5, [pc, #104]	; (800c47c <HAL_UART_RxCpltCallback+0x1c0>)
 800c412:	780b      	ldrb	r3, [r1, #0]
 800c414:	54e8      	strb	r0, [r5, r3]
			Process_Message_Buffer_Index_End++;
 800c416:	3301      	adds	r3, #1
 800c418:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	d100      	bne.n	800c420 <HAL_UART_RxCpltCallback+0x164>
 800c41e:	2300      	movs	r3, #0
 800c420:	700b      	strb	r3, [r1, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800c422:	2300      	movs	r3, #0
 800c424:	5413      	strb	r3, [r2, r0]
 800c426:	e76d      	b.n	800c304 <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =MSG; // Receive length byte.
 800c428:	3907      	subs	r1, #7
 800c42a:	5411      	strb	r1, [r2, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c42c:	4a0d      	ldr	r2, [pc, #52]	; (800c464 <HAL_UART_RxCpltCallback+0x1a8>)
 800c42e:	5cd7      	ldrb	r7, [r2, r3]
 800c430:	00fa      	lsls	r2, r7, #3
 800c432:	1bd7      	subs	r7, r2, r7
 800c434:	009a      	lsls	r2, r3, #2
 800c436:	18d2      	adds	r2, r2, r3
 800c438:	00d1      	lsls	r1, r2, #3
 800c43a:	1a8a      	subs	r2, r1, r2
 800c43c:	19d2      	adds	r2, r2, r7
 800c43e:	490a      	ldr	r1, [pc, #40]	; (800c468 <HAL_UART_RxCpltCallback+0x1ac>)
 800c440:	00d2      	lsls	r2, r2, #3
 800c442:	188a      	adds	r2, r1, r2
		temp_index[port_index] = 3;
 800c444:	2103      	movs	r1, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c446:	7095      	strb	r5, [r2, #2]
		temp_index[port_index] = 3;
 800c448:	4a05      	ldr	r2, [pc, #20]	; (800c460 <HAL_UART_RxCpltCallback+0x1a4>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c44a:	3501      	adds	r5, #1
		temp_index[port_index] = 3;
 800c44c:	54d1      	strb	r1, [r2, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c44e:	18d3      	adds	r3, r2, r3
 800c450:	721d      	strb	r5, [r3, #8]
 800c452:	e757      	b.n	800c304 <HAL_UART_RxCpltCallback+0x48>
 800c454:	20001eb8 	.word	0x20001eb8
 800c458:	20000c2c 	.word	0x20000c2c
 800c45c:	2000182a 	.word	0x2000182a
 800c460:	2000267c 	.word	0x2000267c
 800c464:	2000181c 	.word	0x2000181c
 800c468:	2000118c 	.word	0x2000118c
 800c46c:	20000c28 	.word	0x20000c28
 800c470:	20001ecc 	.word	0x20001ecc
 800c474:	2000182b 	.word	0x2000182b
 800c478:	2000117f 	.word	0x2000117f
 800c47c:	20001184 	.word	0x20001184

0800c480 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c480:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c482:	24ff      	movs	r4, #255	; 0xff
 800c484:	4d09      	ldr	r5, [pc, #36]	; (800c4ac <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c486:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c488:	7828      	ldrb	r0, [r5, #0]
 800c48a:	23ff      	movs	r3, #255	; 0xff
 800c48c:	2210      	movs	r2, #16
 800c48e:	4908      	ldr	r1, [pc, #32]	; (800c4b0 <vApplicationStackOverflowHook+0x30>)
 800c490:	9400      	str	r4, [sp, #0]
 800c492:	f000 fbc5 	bl	800cc20 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c496:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <vApplicationStackOverflowHook+0x34>)
 800c498:	7828      	ldrb	r0, [r5, #0]
 800c49a:	6819      	ldr	r1, [r3, #0]
 800c49c:	220f      	movs	r2, #15
 800c49e:	23ff      	movs	r3, #255	; 0xff
 800c4a0:	9400      	str	r4, [sp, #0]
 800c4a2:	f000 fbbd 	bl	800cc20 <writePxMutex>
	NVIC_SystemReset();
 800c4a6:	f7ff fe23 	bl	800c0f0 <NVIC_SystemReset>
 800c4aa:	46c0      	nop			; (mov r8, r8)
 800c4ac:	20000c28 	.word	0x20000c28
 800c4b0:	080197a8 	.word	0x080197a8
 800c4b4:	200000a0 	.word	0x200000a0

0800c4b8 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800c4b8:	b530      	push	{r4, r5, lr}
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c4ba:	24ff      	movs	r4, #255	; 0xff
 800c4bc:	4d09      	ldr	r5, [pc, #36]	; (800c4e4 <vApplicationMallocFailedHook+0x2c>)
void vApplicationMallocFailedHook(void){
 800c4be:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c4c0:	7828      	ldrb	r0, [r5, #0]
 800c4c2:	23ff      	movs	r3, #255	; 0xff
 800c4c4:	2214      	movs	r2, #20
 800c4c6:	4908      	ldr	r1, [pc, #32]	; (800c4e8 <vApplicationMallocFailedHook+0x30>)
 800c4c8:	9400      	str	r4, [sp, #0]
 800c4ca:	f000 fba9 	bl	800cc20 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c4ce:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <vApplicationMallocFailedHook+0x34>)
 800c4d0:	7828      	ldrb	r0, [r5, #0]
 800c4d2:	6819      	ldr	r1, [r3, #0]
 800c4d4:	220f      	movs	r2, #15
 800c4d6:	23ff      	movs	r3, #255	; 0xff
 800c4d8:	9400      	str	r4, [sp, #0]
 800c4da:	f000 fba1 	bl	800cc20 <writePxMutex>
	NVIC_SystemReset();
 800c4de:	f7ff fe07 	bl	800c0f0 <NVIC_SystemReset>
 800c4e2:	46c0      	nop			; (mov r8, r8)
 800c4e4:	20000c28 	.word	0x20000c28
 800c4e8:	080197bc 	.word	0x080197bc
 800c4ec:	200000a0 	.word	0x200000a0

0800c4f0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800c4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f2:	46de      	mov	lr, fp
 800c4f4:	464e      	mov	r6, r9
 800c4f6:	4645      	mov	r5, r8
 800c4f8:	4657      	mov	r7, sl
 800c4fa:	b5e0      	push	{r5, r6, r7, lr}
 800c4fc:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c4fe:	ae04      	add	r6, sp, #16
 800c500:	0032      	movs	r2, r6
 800c502:	4b34      	ldr	r3, [pc, #208]	; (800c5d4 <RTC_CalendarConfig+0xe4>)
 800c504:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c506:	c213      	stmia	r2!, {r0, r1, r4}
 800c508:	ab01      	add	r3, sp, #4
 800c50a:	4698      	mov	r8, r3
 800c50c:	4642      	mov	r2, r8
 800c50e:	4b32      	ldr	r3, [pc, #200]	; (800c5d8 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800c510:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c512:	cb03      	ldmia	r3!, {r0, r1}
 800c514:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800c516:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c518:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c51a:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c51c:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c51e:	f005 fc2c 	bl	8011d7a <atoi>
 800c522:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800c524:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800c526:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800c528:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800c52a:	f005 fc26 	bl	8011d7a <atoi>
 800c52e:	b2c3      	uxtb	r3, r0
 800c530:	4699      	mov	r9, r3
 800c532:	4d2a      	ldr	r5, [pc, #168]	; (800c5dc <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800c534:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800c536:	6829      	ldr	r1, [r5, #0]
 800c538:	0030      	movs	r0, r6
 800c53a:	f7f3 fde3 	bl	8000104 <strcmp>
 800c53e:	3401      	adds	r4, #1
 800c540:	b2e4      	uxtb	r4, r4
 800c542:	2800      	cmp	r0, #0
 800c544:	d100      	bne.n	800c548 <RTC_CalendarConfig+0x58>
 800c546:	0027      	movs	r7, r4
 800c548:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800c54a:	2c0c      	cmp	r4, #12
 800c54c:	d1f3      	bne.n	800c536 <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800c54e:	200a      	movs	r0, #10
 800c550:	4468      	add	r0, sp
 800c552:	f005 fc12 	bl	8011d7a <atoi>
	*(comDate + 5) = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	7173      	strb	r3, [r6, #5]
 800c55a:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800c55c:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800c55e:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800c560:	1dd8      	adds	r0, r3, #7
 800c562:	f005 fc0a 	bl	8011d7a <atoi>
	*(comDate + 2) = 0;
 800c566:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800c568:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800c56a:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800c56c:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800c56e:	f005 fc04 	bl	8011d7a <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800c572:	466b      	mov	r3, sp
 800c574:	4652      	mov	r2, sl
 800c576:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800c578:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800c57a:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800c57c:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c57e:	466a      	mov	r2, sp
 800c580:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c582:	4f17      	ldr	r7, [pc, #92]	; (800c5e0 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800c584:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c586:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c588:	4669      	mov	r1, sp
 800c58a:	2200      	movs	r2, #0
 800c58c:	0038      	movs	r0, r7
 800c58e:	f004 fe11 	bl	80111b4 <HAL_RTC_SetDate>
 800c592:	2800      	cmp	r0, #0
 800c594:	d116      	bne.n	800c5c4 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c596:	2218      	movs	r2, #24
 800c598:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800c59a:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c59c:	7208      	strb	r0, [r1, #8]
 800c59e:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c5a0:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c5a2:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800c5a8:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800c5aa:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800c5ac:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c5ae:	f004 fd6d 	bl	801108c <HAL_RTC_SetTime>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d106      	bne.n	800c5c4 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c5b6:	0038      	movs	r0, r7
 800c5b8:	4a0b      	ldr	r2, [pc, #44]	; (800c5e8 <RTC_CalendarConfig+0xf8>)
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	f004 fe76 	bl	80112ac <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	e000      	b.n	800c5c6 <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800c5c4:	20ff      	movs	r0, #255	; 0xff
}
 800c5c6:	b00d      	add	sp, #52	; 0x34
 800c5c8:	bc3c      	pop	{r2, r3, r4, r5}
 800c5ca:	4690      	mov	r8, r2
 800c5cc:	4699      	mov	r9, r3
 800c5ce:	46a2      	mov	sl, r4
 800c5d0:	46ab      	mov	fp, r5
 800c5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d4:	080172b8 	.word	0x080172b8
 800c5d8:	080172dc 	.word	0x080172dc
 800c5dc:	20000064 	.word	0x20000064
 800c5e0:	20006eb0 	.word	0x20006eb0
 800c5e4:	20006a80 	.word	0x20006a80
 800c5e8:	000032f2 	.word	0x000032f2

0800c5ec <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800c5ec:	2380      	movs	r3, #128	; 0x80
{
 800c5ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800c5f0:	4d1e      	ldr	r5, [pc, #120]	; (800c66c <RTC_Init+0x80>)
 800c5f2:	021b      	lsls	r3, r3, #8
 800c5f4:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800c5f6:	4c1e      	ldr	r4, [pc, #120]	; (800c670 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800c5fc:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800c5fe:	4b1d      	ldr	r3, [pc, #116]	; (800c674 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800c600:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800c602:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c604:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800c606:	4a1c      	ldr	r2, [pc, #112]	; (800c678 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c608:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c60a:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800c60c:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c60e:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c610:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c612:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c614:	f004 fcf2 	bl	8010ffc <HAL_RTC_Init>
 800c618:	0006      	movs	r6, r0
 800c61a:	20ff      	movs	r0, #255	; 0xff
 800c61c:	2e00      	cmp	r6, #0
 800c61e:	d119      	bne.n	800c654 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800c620:	2101      	movs	r1, #1
 800c622:	0020      	movs	r0, r4
 800c624:	f004 fe48 	bl	80112b8 <HAL_RTCEx_BKUPRead>
 800c628:	4b14      	ldr	r3, [pc, #80]	; (800c67c <RTC_Init+0x90>)
 800c62a:	4298      	cmp	r0, r3
 800c62c:	d113      	bne.n	800c656 <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800c62e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c630:	011b      	lsls	r3, r3, #4
 800c632:	d501      	bpl.n	800c638 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800c634:	4b12      	ldr	r3, [pc, #72]	; (800c680 <RTC_Init+0x94>)
 800c636:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <RTC_Init+0x80>)
 800c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63c:	015b      	lsls	r3, r3, #5
 800c63e:	d50c      	bpl.n	800c65a <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800c640:	2201      	movs	r2, #1
 800c642:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <RTC_Init+0x94>)
	return BOS_OK;
 800c644:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800c646:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c648:	2380      	movs	r3, #128	; 0x80
 800c64a:	4a08      	ldr	r2, [pc, #32]	; (800c66c <RTC_Init+0x80>)
 800c64c:	045b      	lsls	r3, r3, #17
 800c64e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c650:	430b      	orrs	r3, r1
 800c652:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c654:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800c656:	f7ff ff4b 	bl	800c4f0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c65a:	2380      	movs	r3, #128	; 0x80
 800c65c:	4a03      	ldr	r2, [pc, #12]	; (800c66c <RTC_Init+0x80>)
 800c65e:	045b      	lsls	r3, r3, #17
 800c660:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800c662:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c664:	430b      	orrs	r3, r1
 800c666:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800c668:	e7f4      	b.n	800c654 <RTC_Init+0x68>
 800c66a:	46c0      	nop			; (mov r8, r8)
 800c66c:	40021000 	.word	0x40021000
 800c670:	20006eb0 	.word	0x20006eb0
 800c674:	40002800 	.word	0x40002800
 800c678:	000007cf 	.word	0x000007cf
 800c67c:	000032f2 	.word	0x000032f2
 800c680:	2000268a 	.word	0x2000268a

0800c684 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800c684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c686:	46c6      	mov	lr, r8
 800c688:	b500      	push	{lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	ac0c      	add	r4, sp, #48	; 0x30
 800c68e:	7827      	ldrb	r7, [r4, #0]
 800c690:	ac0d      	add	r4, sp, #52	; 0x34
 800c692:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800c694:	3230      	adds	r2, #48	; 0x30
{
 800c696:	46a0      	mov	r8, r4
 800c698:	ac0e      	add	r4, sp, #56	; 0x38
 800c69a:	7825      	ldrb	r5, [r4, #0]
 800c69c:	ac0f      	add	r4, sp, #60	; 0x3c
 800c69e:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800c6a0:	466c      	mov	r4, sp
 800c6a2:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800c6a4:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800c6a6:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800c6a8:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c6aa:	4c20      	ldr	r4, [pc, #128]	; (800c72c <BOS_CalendarConfig+0xa8>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4669      	mov	r1, sp
 800c6b0:	0020      	movs	r0, r4
 800c6b2:	f004 fd7f 	bl	80111b4 <HAL_RTC_SetDate>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d123      	bne.n	800c702 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800c6ba:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800c6bc:	a901      	add	r1, sp, #4
 800c6be:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800c6c0:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800c6c2:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800c6c4:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800c6c6:	2d0c      	cmp	r5, #12
 800c6c8:	d820      	bhi.n	800c70c <BOS_CalendarConfig+0x88>
 800c6ca:	4d19      	ldr	r5, [pc, #100]	; (800c730 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800c6cc:	2e01      	cmp	r6, #1
 800c6ce:	d022      	beq.n	800c716 <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800c6d0:	2e02      	cmp	r6, #2
 800c6d2:	d025      	beq.n	800c720 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c6d4:	2318      	movs	r3, #24
 800c6d6:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	0020      	movs	r0, r4
 800c6dc:	f004 fcd6 	bl	801108c <HAL_RTC_SetTime>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d10e      	bne.n	800c702 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c6e4:	7b6b      	ldrb	r3, [r5, #13]
 800c6e6:	7929      	ldrb	r1, [r5, #4]
 800c6e8:	021b      	lsls	r3, r3, #8
 800c6ea:	301b      	adds	r0, #27
 800c6ec:	4319      	orrs	r1, r3
 800c6ee:	30ff      	adds	r0, #255	; 0xff
 800c6f0:	f7fe f99a 	bl	800aa28 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c6f4:	0020      	movs	r0, r4
 800c6f6:	4a0f      	ldr	r2, [pc, #60]	; (800c734 <BOS_CalendarConfig+0xb0>)
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	f004 fdd7 	bl	80112ac <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c6fe:	2000      	movs	r0, #0
 800c700:	e000      	b.n	800c704 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800c702:	20ff      	movs	r0, #255	; 0xff
}
 800c704:	b006      	add	sp, #24
 800c706:	bc04      	pop	{r2}
 800c708:	4690      	mov	r8, r2
 800c70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800c70c:	2318      	movs	r3, #24
 800c70e:	4d08      	ldr	r5, [pc, #32]	; (800c730 <BOS_CalendarConfig+0xac>)
 800c710:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800c712:	2e01      	cmp	r6, #1
 800c714:	d1dc      	bne.n	800c6d0 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c716:	2300      	movs	r3, #0
 800c718:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c71a:	330c      	adds	r3, #12
 800c71c:	736b      	strb	r3, [r5, #13]
 800c71e:	e7db      	b.n	800c6d8 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c720:	2340      	movs	r3, #64	; 0x40
 800c722:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c724:	3b34      	subs	r3, #52	; 0x34
 800c726:	736b      	strb	r3, [r5, #13]
 800c728:	e7d6      	b.n	800c6d8 <BOS_CalendarConfig+0x54>
 800c72a:	46c0      	nop			; (mov r8, r8)
 800c72c:	20006eb0 	.word	0x20006eb0
 800c730:	20006a80 	.word	0x20006a80
 800c734:	000032f2 	.word	0x000032f2

0800c738 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c738:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c73a:	4d16      	ldr	r5, [pc, #88]	; (800c794 <GetTimeDate+0x5c>)
{
 800c73c:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c73e:	ac01      	add	r4, sp, #4
 800c740:	0021      	movs	r1, r4
 800c742:	2200      	movs	r2, #0
 800c744:	0028      	movs	r0, r5
 800c746:	f004 fbc1 	bl	8010ecc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c74a:	4669      	mov	r1, sp
 800c74c:	2200      	movs	r2, #0
 800c74e:	0028      	movs	r0, r5
 800c750:	f004 fbec 	bl	8010f2c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c754:	7a22      	ldrb	r2, [r4, #8]
 800c756:	4b10      	ldr	r3, [pc, #64]	; (800c798 <GetTimeDate+0x60>)
 800c758:	09d2      	lsrs	r2, r2, #7
 800c75a:	3201      	adds	r2, #1
 800c75c:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c75e:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800c760:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c762:	0852      	lsrs	r2, r2, #1
 800c764:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c766:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c768:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800c76a:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c76c:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c76e:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800c770:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c772:	7822      	ldrb	r2, [r4, #0]
 800c774:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c776:	466a      	mov	r2, sp
 800c778:	7892      	ldrb	r2, [r2, #2]
 800c77a:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c77c:	466a      	mov	r2, sp
 800c77e:	7852      	ldrb	r2, [r2, #1]
 800c780:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c782:	466a      	mov	r2, sp
 800c784:	7812      	ldrb	r2, [r2, #0]
 800c786:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c788:	466a      	mov	r2, sp
 800c78a:	78d2      	ldrb	r2, [r2, #3]
 800c78c:	4462      	add	r2, ip
 800c78e:	831a      	strh	r2, [r3, #24]
}
 800c790:	b007      	add	sp, #28
 800c792:	bd30      	pop	{r4, r5, pc}
 800c794:	20006eb0 	.word	0x20006eb0
 800c798:	20006a80 	.word	0x20006a80

0800c79c <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c79c:	2080      	movs	r0, #128	; 0x80
 800c79e:	4a13      	ldr	r2, [pc, #76]	; (800c7ec <TIM_USEC_Init+0x50>)
{
 800c7a0:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800c7a2:	69d1      	ldr	r1, [r2, #28]
 800c7a4:	0040      	lsls	r0, r0, #1
 800c7a6:	4301      	orrs	r1, r0
 800c7a8:	61d1      	str	r1, [r2, #28]
 800c7aa:	69d3      	ldr	r3, [r2, #28]
{
 800c7ac:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800c7ae:	4003      	ands	r3, r0
 800c7b0:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c7b2:	4c0f      	ldr	r4, [pc, #60]	; (800c7f0 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800c7b4:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	; (800c7f4 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7b8:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800c7ba:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c7bc:	f004 fad6 	bl	8010d6c <HAL_RCC_GetPCLK1Freq>
 800c7c0:	490d      	ldr	r1, [pc, #52]	; (800c7f8 <TIM_USEC_Init+0x5c>)
 800c7c2:	f7f3 fcc5 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800c7c6:	4b0d      	ldr	r3, [pc, #52]	; (800c7fc <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c7c8:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800c7ca:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800c7cc:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7ce:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800c7d0:	f004 fdda 	bl	8011388 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c7d4:	a902      	add	r1, sp, #8
 800c7d6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7d8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7da:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c7dc:	f004 fdee 	bl	80113bc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c7e0:	0020      	movs	r0, r4
 800c7e2:	f004 fd71 	bl	80112c8 <HAL_TIM_Base_Start>
}
 800c7e6:	b005      	add	sp, #20
 800c7e8:	bd30      	pop	{r4, r5, pc}
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	40021000 	.word	0x40021000
 800c7f0:	20006f0c 	.word	0x20006f0c
 800c7f4:	40002000 	.word	0x40002000
 800c7f8:	000f4240 	.word	0x000f4240
 800c7fc:	0000ffff 	.word	0x0000ffff

0800c800 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c800:	2080      	movs	r0, #128	; 0x80
 800c802:	4a13      	ldr	r2, [pc, #76]	; (800c850 <TIM_MSEC_Init+0x50>)
{
 800c804:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800c806:	6991      	ldr	r1, [r2, #24]
 800c808:	0240      	lsls	r0, r0, #9
 800c80a:	4301      	orrs	r1, r0
 800c80c:	6191      	str	r1, [r2, #24]
 800c80e:	6993      	ldr	r3, [r2, #24]
{
 800c810:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800c812:	4003      	ands	r3, r0
 800c814:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800c816:	4c0f      	ldr	r4, [pc, #60]	; (800c854 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800c818:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800c81a:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c81c:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800c81e:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c820:	f004 faa4 	bl	8010d6c <HAL_RCC_GetPCLK1Freq>
 800c824:	21fa      	movs	r1, #250	; 0xfa
 800c826:	0089      	lsls	r1, r1, #2
 800c828:	f7f3 fc92 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800c82c:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c82e:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800c830:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800c832:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c834:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800c836:	f004 fda7 	bl	8011388 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c83a:	a902      	add	r1, sp, #8
 800c83c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c83e:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c840:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c842:	f004 fdbb 	bl	80113bc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800c846:	0020      	movs	r0, r4
 800c848:	f004 fd3e 	bl	80112c8 <HAL_TIM_Base_Start>
}
 800c84c:	b005      	add	sp, #20
 800c84e:	bd30      	pop	{r4, r5, pc}
 800c850:	40021000 	.word	0x40021000
 800c854:	20006ed0 	.word	0x20006ed0
 800c858:	40014000 	.word	0x40014000
 800c85c:	0000ffff 	.word	0x0000ffff

0800c860 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800c860:	b510      	push	{r4, lr}
 800c862:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800c864:	f002 f8cc 	bl	800ea00 <vPortEnterCritical>
	
	if (Delay)
 800c868:	2c00      	cmp	r4, #0
 800c86a:	d006      	beq.n	800c87a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800c86c:	4b04      	ldr	r3, [pc, #16]	; (800c880 <StartMicroDelay+0x20>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800c872:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c874:	1a5b      	subs	r3, r3, r1
 800c876:	42a3      	cmp	r3, r4
 800c878:	d9fb      	bls.n	800c872 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c87a:	f002 f8cd 	bl	800ea18 <vPortExitCritical>
}
 800c87e:	bd10      	pop	{r4, pc}
 800c880:	20006f0c 	.word	0x20006f0c

0800c884 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800c884:	b510      	push	{r4, lr}
 800c886:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800c888:	f002 f8ba 	bl	800ea00 <vPortEnterCritical>
	
	if (Delay)
 800c88c:	2c00      	cmp	r4, #0
 800c88e:	d006      	beq.n	800c89e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800c890:	4b04      	ldr	r3, [pc, #16]	; (800c8a4 <StartMilliDelay+0x20>)
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800c896:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c898:	1a5b      	subs	r3, r3, r1
 800c89a:	42a3      	cmp	r3, r4
 800c89c:	d9fb      	bls.n	800c896 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c89e:	f002 f8bb 	bl	800ea18 <vPortExitCritical>
}
 800c8a2:	bd10      	pop	{r4, pc}
 800c8a4:	20006ed0 	.word	0x20006ed0

0800c8a8 <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c8ac:	f7fd fa10 	bl	8009cd0 <GetPort>
 800c8b0:	2180      	movs	r1, #128	; 0x80
 800c8b2:	0209      	lsls	r1, r1, #8
 800c8b4:	000a      	movs	r2, r1
 800c8b6:	3801      	subs	r0, #1
 800c8b8:	4102      	asrs	r2, r0
 800c8ba:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <SwapUartPins.part.0+0x30>)
 800c8bc:	4d07      	ldr	r5, [pc, #28]	; (800c8dc <SwapUartPins.part.0+0x34>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c8c0:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	5b58      	ldrh	r0, [r3, r5]
 800c8c8:	4302      	orrs	r2, r0
 800c8ca:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c8cc:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800c8ce:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c8d0:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800c8d2:	f005 f8fd 	bl	8011ad0 <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	20000a98 	.word	0x20000a98
 800c8dc:	20006f48 	.word	0x20006f48

0800c8e0 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c8e0:	4809      	ldr	r0, [pc, #36]	; (800c908 <MX_USART1_UART_Init+0x28>)
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <MX_USART1_UART_Init+0x2c>)
{
 800c8e4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800c8e6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c8e8:	23e1      	movs	r3, #225	; 0xe1
 800c8ea:	031b      	lsls	r3, r3, #12
 800c8ec:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c8ee:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c8f0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c8f2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c8f4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c8f6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c8f8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c8fa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c8fc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c8fe:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c900:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800c902:	f005 f8e5 	bl	8011ad0 <HAL_UART_Init>
}
 800c906:	bd10      	pop	{r4, pc}
 800c908:	20006c80 	.word	0x20006c80
 800c90c:	40013800 	.word	0x40013800

0800c910 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800c910:	4809      	ldr	r0, [pc, #36]	; (800c938 <MX_USART2_UART_Init+0x28>)
 800c912:	4b0a      	ldr	r3, [pc, #40]	; (800c93c <MX_USART2_UART_Init+0x2c>)
{
 800c914:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800c916:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c918:	23e1      	movs	r3, #225	; 0xe1
 800c91a:	031b      	lsls	r3, r3, #12
 800c91c:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c91e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c920:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c922:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c924:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c926:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c928:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c92a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c92c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c92e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c930:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800c932:	f005 f8cd 	bl	8011ad0 <HAL_UART_Init>
}
 800c936:	bd10      	pop	{r4, pc}
 800c938:	20006dd0 	.word	0x20006dd0
 800c93c:	40004400 	.word	0x40004400

0800c940 <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800c940:	4809      	ldr	r0, [pc, #36]	; (800c968 <MX_USART3_UART_Init+0x28>)
 800c942:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <MX_USART3_UART_Init+0x2c>)
{
 800c944:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800c946:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c948:	23e1      	movs	r3, #225	; 0xe1
 800c94a:	031b      	lsls	r3, r3, #12
 800c94c:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c94e:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c950:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c952:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c954:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c956:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c958:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c95a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c95c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c95e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c960:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800c962:	f005 f8b5 	bl	8011ad0 <HAL_UART_Init>
}
 800c966:	bd10      	pop	{r4, pc}
 800c968:	20006ba0 	.word	0x20006ba0
 800c96c:	40004800 	.word	0x40004800

0800c970 <MX_USART4_UART_Init>:
  huart4.Instance = USART4;
 800c970:	4809      	ldr	r0, [pc, #36]	; (800c998 <MX_USART4_UART_Init+0x28>)
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <MX_USART4_UART_Init+0x2c>)
{
 800c974:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800c976:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c978:	23e1      	movs	r3, #225	; 0xe1
 800c97a:	031b      	lsls	r3, r3, #12
 800c97c:	6043      	str	r3, [r0, #4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c97e:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c980:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c982:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c984:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c986:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c988:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c98a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c98c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c98e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c990:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800c992:	f005 f89d 	bl	8011ad0 <HAL_UART_Init>
}
 800c996:	bd10      	pop	{r4, pc}
 800c998:	20006d60 	.word	0x20006d60
 800c99c:	40004c00 	.word	0x40004c00

0800c9a0 <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800c9a0:	4809      	ldr	r0, [pc, #36]	; (800c9c8 <MX_USART5_UART_Init+0x28>)
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <MX_USART5_UART_Init+0x2c>)
{
 800c9a4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800c9a6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c9a8:	23e1      	movs	r3, #225	; 0xe1
 800c9aa:	031b      	lsls	r3, r3, #12
 800c9ac:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c9ae:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c9b0:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c9b2:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c9b4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c9b6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c9b8:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c9ba:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c9bc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c9be:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c9c0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800c9c2:	f005 f885 	bl	8011ad0 <HAL_UART_Init>
}
 800c9c6:	bd10      	pop	{r4, pc}
 800c9c8:	20006c10 	.word	0x20006c10
 800c9cc:	40005000 	.word	0x40005000

0800c9d0 <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800c9d0:	4809      	ldr	r0, [pc, #36]	; (800c9f8 <MX_USART6_UART_Init+0x28>)
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <MX_USART6_UART_Init+0x2c>)
{
 800c9d4:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800c9d6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c9d8:	23e1      	movs	r3, #225	; 0xe1
 800c9da:	031b      	lsls	r3, r3, #12
 800c9dc:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c9de:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c9e0:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c9e2:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c9e4:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c9e6:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c9e8:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c9ea:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c9ec:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c9ee:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c9f0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800c9f2:	f005 f86d 	bl	8011ad0 <HAL_UART_Init>
}
 800c9f6:	bd10      	pop	{r4, pc}
 800c9f8:	20006cf0 	.word	0x20006cf0
 800c9fc:	40011400 	.word	0x40011400

0800ca00 <HAL_UART_MspInit>:
{
 800ca00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca02:	46c6      	mov	lr, r8
 800ca04:	b500      	push	{lr}
  if(huart->Instance==USART1)
 800ca06:	6803      	ldr	r3, [r0, #0]
 800ca08:	4a7d      	ldr	r2, [pc, #500]	; (800cc00 <HAL_UART_MspInit+0x200>)
{
 800ca0a:	b08c      	sub	sp, #48	; 0x30
  if(huart->Instance==USART1)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d040      	beq.n	800ca92 <HAL_UART_MspInit+0x92>
  else if(huart->Instance==USART2)
 800ca10:	4a7c      	ldr	r2, [pc, #496]	; (800cc04 <HAL_UART_MspInit+0x204>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d06b      	beq.n	800caee <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART3)
 800ca16:	4a7c      	ldr	r2, [pc, #496]	; (800cc08 <HAL_UART_MspInit+0x208>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d100      	bne.n	800ca1e <HAL_UART_MspInit+0x1e>
 800ca1c:	e093      	b.n	800cb46 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART4)
 800ca1e:	4a7b      	ldr	r2, [pc, #492]	; (800cc0c <HAL_UART_MspInit+0x20c>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d100      	bne.n	800ca26 <HAL_UART_MspInit+0x26>
 800ca24:	e0ab      	b.n	800cb7e <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART5)
 800ca26:	4a7a      	ldr	r2, [pc, #488]	; (800cc10 <HAL_UART_MspInit+0x210>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d007      	beq.n	800ca3c <HAL_UART_MspInit+0x3c>
  else if(huart->Instance==USART6)
 800ca2c:	4a79      	ldr	r2, [pc, #484]	; (800cc14 <HAL_UART_MspInit+0x214>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d100      	bne.n	800ca34 <HAL_UART_MspInit+0x34>
 800ca32:	e0c5      	b.n	800cbc0 <HAL_UART_MspInit+0x1c0>
}
 800ca34:	b00c      	add	sp, #48	; 0x30
 800ca36:	bc04      	pop	{r2}
 800ca38:	4690      	mov	r8, r2
 800ca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART5_CLK_ENABLE();
 800ca3c:	2080      	movs	r0, #128	; 0x80
 800ca3e:	4a76      	ldr	r2, [pc, #472]	; (800cc18 <HAL_UART_MspInit+0x218>)
 800ca40:	0340      	lsls	r0, r0, #13
 800ca42:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca44:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800ca46:	4301      	orrs	r1, r0
 800ca48:	61d1      	str	r1, [r2, #28]
 800ca4a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca4c:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800ca4e:	4003      	ands	r3, r0
 800ca50:	9305      	str	r3, [sp, #20]
 800ca52:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca54:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800ca56:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800ca58:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800ca5a:	a907      	add	r1, sp, #28
 800ca5c:	486f      	ldr	r0, [pc, #444]	; (800cc1c <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800ca5e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca60:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca62:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca64:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800ca66:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800ca68:	f003 fbb6 	bl	80101d8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800ca6c:	2310      	movs	r3, #16
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800ca6e:	486b      	ldr	r0, [pc, #428]	; (800cc1c <HAL_UART_MspInit+0x21c>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800ca70:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca72:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca74:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca76:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800ca78:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800ca7a:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800ca7c:	f003 fbac 	bl	80101d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ca80:	2200      	movs	r2, #0
 800ca82:	2101      	movs	r1, #1
 800ca84:	201d      	movs	r0, #29
 800ca86:	f002 fbbd 	bl	800f204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ca8a:	201d      	movs	r0, #29
 800ca8c:	f002 fbe6 	bl	800f25c <HAL_NVIC_EnableIRQ>
}
 800ca90:	e7d0      	b.n	800ca34 <HAL_UART_MspInit+0x34>
    __USART1_CLK_ENABLE();
 800ca92:	2080      	movs	r0, #128	; 0x80
 800ca94:	4a60      	ldr	r2, [pc, #384]	; (800cc18 <HAL_UART_MspInit+0x218>)
 800ca96:	01c0      	lsls	r0, r0, #7
 800ca98:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca9a:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800ca9c:	4301      	orrs	r1, r0
 800ca9e:	6191      	str	r1, [r2, #24]
 800caa0:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caa2:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800caa4:	4003      	ands	r3, r0
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800caaa:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800caac:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800caae:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cab0:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cab2:	a907      	add	r1, sp, #28
 800cab4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800cab6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cab8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800caba:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cabc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800cabe:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800cac0:	f003 fb8a 	bl	80101d8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cac4:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cac6:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cac8:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800caca:	a907      	add	r1, sp, #28
 800cacc:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800cace:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cad0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cad2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cad4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800cad6:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800cad8:	f003 fb7e 	bl	80101d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800cadc:	2200      	movs	r2, #0
 800cade:	2101      	movs	r1, #1
 800cae0:	201b      	movs	r0, #27
 800cae2:	f002 fb8f 	bl	800f204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cae6:	201b      	movs	r0, #27
 800cae8:	f002 fbb8 	bl	800f25c <HAL_NVIC_EnableIRQ>
 800caec:	e7a2      	b.n	800ca34 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800caee:	2080      	movs	r0, #128	; 0x80
 800caf0:	4a49      	ldr	r2, [pc, #292]	; (800cc18 <HAL_UART_MspInit+0x218>)
 800caf2:	0280      	lsls	r0, r0, #10
 800caf4:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800caf6:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800caf8:	4301      	orrs	r1, r0
 800cafa:	61d1      	str	r1, [r2, #28]
 800cafc:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cafe:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800cb00:	4003      	ands	r3, r0
 800cb02:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cb04:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800cb06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb08:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800cb0a:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cb0c:	a907      	add	r1, sp, #28
 800cb0e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800cb10:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb12:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb14:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb16:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800cb18:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cb1a:	f003 fb5d 	bl	80101d8 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cb1e:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800cb20:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cb22:	a907      	add	r1, sp, #28
 800cb24:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800cb26:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb28:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb2a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb2c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800cb2e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cb30:	f003 fb52 	bl	80101d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800cb34:	2200      	movs	r2, #0
 800cb36:	2101      	movs	r1, #1
 800cb38:	201c      	movs	r0, #28
 800cb3a:	f002 fb63 	bl	800f204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cb3e:	201c      	movs	r0, #28
 800cb40:	f002 fb8c 	bl	800f25c <HAL_NVIC_EnableIRQ>
 800cb44:	e776      	b.n	800ca34 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800cb46:	2080      	movs	r0, #128	; 0x80
 800cb48:	4a33      	ldr	r2, [pc, #204]	; (800cc18 <HAL_UART_MspInit+0x218>)
 800cb4a:	02c0      	lsls	r0, r0, #11
 800cb4c:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb4e:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800cb50:	4301      	orrs	r1, r0
 800cb52:	61d1      	str	r1, [r2, #28]
 800cb54:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb56:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800cb58:	4003      	ands	r3, r0
 800cb5a:	9303      	str	r3, [sp, #12]
 800cb5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cb5e:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb60:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cb62:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cb64:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cb66:	a907      	add	r1, sp, #28
 800cb68:	482c      	ldr	r0, [pc, #176]	; (800cc1c <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cb6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb6c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb6e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb70:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cb72:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cb74:	f003 fb30 	bl	80101d8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800cb78:	2380      	movs	r3, #128	; 0x80
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	e777      	b.n	800ca6e <HAL_UART_MspInit+0x6e>
    __USART4_CLK_ENABLE();
 800cb7e:	2080      	movs	r0, #128	; 0x80
 800cb80:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <HAL_UART_MspInit+0x218>)
 800cb82:	0300      	lsls	r0, r0, #12
 800cb84:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800cb86:	2401      	movs	r4, #1
    __USART4_CLK_ENABLE();
 800cb88:	4301      	orrs	r1, r0
 800cb8a:	61d1      	str	r1, [r2, #28]
 800cb8c:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb8e:	2502      	movs	r5, #2
    __USART4_CLK_ENABLE();
 800cb90:	4003      	ands	r3, r0
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cb92:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb94:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = USART4_AF;	
 800cb96:	2604      	movs	r6, #4
    __USART4_CLK_ENABLE();
 800cb98:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cb9a:	a907      	add	r1, sp, #28
 800cb9c:	05c0      	lsls	r0, r0, #23
    __USART4_CLK_ENABLE();
 800cb9e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800cba0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cba2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cba4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cba6:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800cba8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cbaa:	f003 fb15 	bl	80101d8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800cbae:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbb0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbb2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbb4:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800cbb6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800cbb8:	2090      	movs	r0, #144	; 0x90
 800cbba:	a907      	add	r1, sp, #28
 800cbbc:	05c0      	lsls	r0, r0, #23
 800cbbe:	e75d      	b.n	800ca7c <HAL_UART_MspInit+0x7c>
    __USART6_CLK_ENABLE();
 800cbc0:	2420      	movs	r4, #32
 800cbc2:	4b15      	ldr	r3, [pc, #84]	; (800cc18 <HAL_UART_MspInit+0x218>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cbc4:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800cbc6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbc8:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800cbca:	4322      	orrs	r2, r4
 800cbcc:	619a      	str	r2, [r3, #24]
 800cbce:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbd0:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800cbd2:	4023      	ands	r3, r4
 800cbd4:	9306      	str	r3, [sp, #24]
 800cbd6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800cbd8:	2310      	movs	r3, #16
 800cbda:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbdc:	3b0e      	subs	r3, #14
 800cbde:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800cbe0:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cbe2:	a907      	add	r1, sp, #28
 800cbe4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbe6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbe8:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbea:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800cbec:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cbee:	f003 faf3 	bl	80101d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbf2:	4643      	mov	r3, r8
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800cbf4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbf6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbf8:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbfa:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800cbfc:	950b      	str	r5, [sp, #44]	; 0x2c
 800cbfe:	e7db      	b.n	800cbb8 <HAL_UART_MspInit+0x1b8>
 800cc00:	40013800 	.word	0x40013800
 800cc04:	40004400 	.word	0x40004400
 800cc08:	40004800 	.word	0x40004800
 800cc0c:	40004c00 	.word	0x40004c00
 800cc10:	40005000 	.word	0x40005000
 800cc14:	40011400 	.word	0x40011400
 800cc18:	40021000 	.word	0x40021000
 800cc1c:	48000400 	.word	0x48000400

0800cc20 <writePxMutex>:
{
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	4647      	mov	r7, r8
 800cc24:	46ce      	mov	lr, r9
 800cc26:	b580      	push	{r7, lr}
 800cc28:	0017      	movs	r7, r2
 800cc2a:	1e42      	subs	r2, r0, #1
 800cc2c:	b2d2      	uxtb	r2, r2
 800cc2e:	000e      	movs	r6, r1
 800cc30:	2a05      	cmp	r2, #5
 800cc32:	d80e      	bhi.n	800cc52 <writePxMutex+0x32>
 800cc34:	4911      	ldr	r1, [pc, #68]	; (800cc7c <writePxMutex+0x5c>)
 800cc36:	0092      	lsls	r2, r2, #2
 800cc38:	5852      	ldr	r2, [r2, r1]
 800cc3a:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	d008      	beq.n	800cc52 <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cc40:	4a0f      	ldr	r2, [pc, #60]	; (800cc80 <writePxMutex+0x60>)
 800cc42:	0085      	lsls	r5, r0, #2
 800cc44:	0019      	movs	r1, r3
 800cc46:	5950      	ldr	r0, [r2, r5]
 800cc48:	4691      	mov	r9, r2
 800cc4a:	f000 f9bf 	bl	800cfcc <osSemaphoreWait>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d007      	beq.n	800cc62 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800cc52:	2401      	movs	r4, #1
}
 800cc54:	0020      	movs	r0, r4
 800cc56:	bc0c      	pop	{r2, r3}
 800cc58:	4690      	mov	r8, r2
 800cc5a:	4699      	mov	r9, r3
 800cc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cc5e:	2803      	cmp	r0, #3
 800cc60:	d007      	beq.n	800cc72 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	003a      	movs	r2, r7
 800cc66:	0031      	movs	r1, r6
 800cc68:	4640      	mov	r0, r8
 800cc6a:	f004 fe8f 	bl	801198c <HAL_UART_Transmit>
 800cc6e:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cc70:	d1f5      	bne.n	800cc5e <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800cc72:	464b      	mov	r3, r9
 800cc74:	5958      	ldr	r0, [r3, r5]
 800cc76:	f000 f9d3 	bl	800d020 <osSemaphoreRelease>
 800cc7a:	e7eb      	b.n	800cc54 <writePxMutex+0x34>
 800cc7c:	08017090 	.word	0x08017090
 800cc80:	20006b04 	.word	0x20006b04

0800cc84 <writePxITMutex>:
{
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	0015      	movs	r5, r2
 800cc88:	1e42      	subs	r2, r0, #1
 800cc8a:	b2d2      	uxtb	r2, r2
 800cc8c:	000c      	movs	r4, r1
 800cc8e:	2a05      	cmp	r2, #5
 800cc90:	d80c      	bhi.n	800ccac <writePxITMutex+0x28>
 800cc92:	490a      	ldr	r1, [pc, #40]	; (800ccbc <writePxITMutex+0x38>)
 800cc94:	0092      	lsls	r2, r2, #2
 800cc96:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800cc98:	2e00      	cmp	r6, #0
 800cc9a:	d007      	beq.n	800ccac <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cc9c:	4a08      	ldr	r2, [pc, #32]	; (800ccc0 <writePxITMutex+0x3c>)
 800cc9e:	0080      	lsls	r0, r0, #2
 800cca0:	5880      	ldr	r0, [r0, r2]
 800cca2:	0019      	movs	r1, r3
 800cca4:	f000 f992 	bl	800cfcc <osSemaphoreWait>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d001      	beq.n	800ccb0 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ccac:	2001      	movs	r0, #1
}
 800ccae:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800ccb0:	002a      	movs	r2, r5
 800ccb2:	0021      	movs	r1, r4
 800ccb4:	0030      	movs	r0, r6
 800ccb6:	f004 fbbf 	bl	8011438 <HAL_UART_Transmit_IT>
 800ccba:	e7f8      	b.n	800ccae <writePxITMutex+0x2a>
 800ccbc:	08017090 	.word	0x08017090
 800ccc0:	20006b04 	.word	0x20006b04

0800ccc4 <UpdateBaudrate>:
{
 800ccc4:	3801      	subs	r0, #1
 800ccc6:	b2c0      	uxtb	r0, r0
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	2805      	cmp	r0, #5
 800cccc:	d807      	bhi.n	800ccde <UpdateBaudrate+0x1a>
 800ccce:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <UpdateBaudrate+0x20>)
 800ccd0:	0080      	lsls	r0, r0, #2
 800ccd2:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800ccd4:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800ccd6:	f004 fefb 	bl	8011ad0 <HAL_UART_Init>
}
 800ccda:	2000      	movs	r0, #0
 800ccdc:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800ccde:	2300      	movs	r3, #0
 800cce0:	605b      	str	r3, [r3, #4]
 800cce2:	deff      	udf	#255	; 0xff
 800cce4:	08017090 	.word	0x08017090

0800cce8 <GetUart>:
{
 800cce8:	3801      	subs	r0, #1
 800ccea:	b2c3      	uxtb	r3, r0
 800ccec:	2000      	movs	r0, #0
 800ccee:	2b05      	cmp	r3, #5
 800ccf0:	d802      	bhi.n	800ccf8 <GetUart+0x10>
 800ccf2:	4a02      	ldr	r2, [pc, #8]	; (800ccfc <GetUart+0x14>)
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	5898      	ldr	r0, [r3, r2]
}
 800ccf8:	4770      	bx	lr
 800ccfa:	46c0      	nop			; (mov r8, r8)
 800ccfc:	08017090 	.word	0x08017090

0800cd00 <SwapUartPins>:
{
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	0004      	movs	r4, r0
 800cd04:	000d      	movs	r5, r1
	if (huart != NULL) {
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d003      	beq.n	800cd12 <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800cd0a:	2901      	cmp	r1, #1
 800cd0c:	d017      	beq.n	800cd3e <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800cd0e:	2900      	cmp	r1, #0
 800cd10:	d000      	beq.n	800cd14 <SwapUartPins+0x14>
}
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cd14:	f7fc ffdc 	bl	8009cd0 <GetPort>
 800cd18:	2180      	movs	r1, #128	; 0x80
 800cd1a:	3801      	subs	r0, #1
 800cd1c:	0209      	lsls	r1, r1, #8
 800cd1e:	4101      	asrs	r1, r0
 800cd20:	4b08      	ldr	r3, [pc, #32]	; (800cd44 <SwapUartPins+0x44>)
 800cd22:	4e09      	ldr	r6, [pc, #36]	; (800cd48 <SwapUartPins+0x48>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800cd26:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	005b      	lsls	r3, r3, #1
 800cd2c:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800cd2e:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cd30:	438a      	bics	r2, r1
 800cd32:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cd34:	2308      	movs	r3, #8
 800cd36:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800cd38:	f004 feca 	bl	8011ad0 <HAL_UART_Init>
}
 800cd3c:	e7e9      	b.n	800cd12 <SwapUartPins+0x12>
 800cd3e:	f7ff fdb3 	bl	800c8a8 <SwapUartPins.part.0>
 800cd42:	e7e6      	b.n	800cd12 <SwapUartPins+0x12>
 800cd44:	20000a98 	.word	0x20000a98
 800cd48:	20006f48 	.word	0x20006f48

0800cd4c <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800cd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd4e:	46c6      	mov	lr, r8
 800cd50:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800cd52:	4d12      	ldr	r5, [pc, #72]	; (800cd9c <ReadPortsDir+0x50>)
 800cd54:	782b      	ldrb	r3, [r5, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d01d      	beq.n	800cd96 <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800cd5a:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800cd5c:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800cd5e:	4698      	mov	r8, r3
 800cd60:	4e0f      	ldr	r6, [pc, #60]	; (800cda0 <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800cd62:	4f10      	ldr	r7, [pc, #64]	; (800cda4 <ReadPortsDir+0x58>)
		if (i != myID) {
 800cd64:	7833      	ldrb	r3, [r6, #0]
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	d00c      	beq.n	800cd84 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2113      	movs	r1, #19
 800cd6e:	0020      	movs	r0, r4
 800cd70:	f7fb f9fc 	bl	800816c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800cd74:	2032      	movs	r0, #50	; 0x32
 800cd76:	f7ff fd85 	bl	800c884 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800cd7a:	783b      	ldrb	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800cd80:	2302      	movs	r3, #2
 800cd82:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800cd84:	3401      	adds	r4, #1
 800cd86:	782b      	ldrb	r3, [r5, #0]
 800cd88:	b2e4      	uxtb	r4, r4
 800cd8a:	42a3      	cmp	r3, r4
 800cd8c:	d2ea      	bcs.n	800cd64 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800cd8e:	4640      	mov	r0, r8
 800cd90:	bc04      	pop	{r2}
 800cd92:	4690      	mov	r8, r2
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	4698      	mov	r8, r3
 800cd9a:	e7f8      	b.n	800cd8e <ReadPortsDir+0x42>
 800cd9c:	20000008 	.word	0x20000008
 800cda0:	20000a98 	.word	0x20000a98
 800cda4:	20000c3c 	.word	0x20000c3c

0800cda8 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cdaa:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800cdac:	490c      	ldr	r1, [pc, #48]	; (800cde0 <ReadPortsDirMSG+0x38>)
	for (int p = 1; p <= NumOfPorts; p++) {
 800cdae:	2301      	movs	r3, #1
	uint16_t temp =0;
 800cdb0:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cdb2:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800cdb4:	4f0b      	ldr	r7, [pc, #44]	; (800cde4 <ReadPortsDirMSG+0x3c>)
 800cdb6:	4e0c      	ldr	r6, [pc, #48]	; (800cde8 <ReadPortsDirMSG+0x40>)
 800cdb8:	e002      	b.n	800cdc0 <ReadPortsDirMSG+0x18>
 800cdba:	0099      	lsls	r1, r3, #2
 800cdbc:	3904      	subs	r1, #4
 800cdbe:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cdc0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cdc2:	b2dc      	uxtb	r4, r3
 800cdc4:	42a9      	cmp	r1, r5
 800cdc6:	d102      	bne.n	800cdce <ReadPortsDirMSG+0x26>
			messageParams[temp++] = p;
 800cdc8:	1c51      	adds	r1, r2, #1
 800cdca:	54bc      	strb	r4, [r7, r2]
 800cdcc:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800cdce:	3301      	adds	r3, #1
 800cdd0:	2b07      	cmp	r3, #7
 800cdd2:	d1f2      	bne.n	800cdba <ReadPortsDirMSG+0x12>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800cdd4:	2114      	movs	r1, #20
 800cdd6:	f7fb f9c9 	bl	800816c <SendMessageToModule>
	return result;
}
 800cdda:	2000      	movs	r0, #0
 800cddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	20006dd0 	.word	0x20006dd0
 800cde4:	20000b3c 	.word	0x20000b3c
 800cde8:	08017090 	.word	0x08017090

0800cdec <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdee:	46c6      	mov	lr, r8
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cdf0:	2580      	movs	r5, #128	; 0x80
 800cdf2:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <UpdateMyPortsDir+0x50>)
{
 800cdf4:	b500      	push	{lr}
 800cdf6:	2400      	movs	r4, #0
 800cdf8:	4811      	ldr	r0, [pc, #68]	; (800ce40 <UpdateMyPortsDir+0x54>)
 800cdfa:	4f12      	ldr	r7, [pc, #72]	; (800ce44 <UpdateMyPortsDir+0x58>)
 800cdfc:	4e12      	ldr	r6, [pc, #72]	; (800ce48 <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cdfe:	022d      	lsls	r5, r5, #8
 800ce00:	4698      	mov	r8, r3
 800ce02:	e009      	b.n	800ce18 <UpdateMyPortsDir+0x2c>
	if (huart != NULL) {
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d001      	beq.n	800ce0c <UpdateMyPortsDir+0x20>
 800ce08:	f7ff fd4e 	bl	800c8a8 <SwapUartPins.part.0>
 800ce0c:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800ce0e:	2c06      	cmp	r4, #6
 800ce10:	d010      	beq.n	800ce34 <UpdateMyPortsDir+0x48>
 800ce12:	4642      	mov	r2, r8
 800ce14:	00a3      	lsls	r3, r4, #2
 800ce16:	5898      	ldr	r0, [r3, r2]
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800ce18:	002a      	movs	r2, r5
 800ce1a:	4122      	asrs	r2, r4
 800ce1c:	7833      	ldrb	r3, [r6, #0]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	5afb      	ldrh	r3, [r7, r3]
 800ce24:	421a      	tst	r2, r3
 800ce26:	d1ed      	bne.n	800ce04 <UpdateMyPortsDir+0x18>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800ce28:	2100      	movs	r1, #0
 800ce2a:	3401      	adds	r4, #1
 800ce2c:	f7ff ff68 	bl	800cd00 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800ce30:	2c06      	cmp	r4, #6
 800ce32:	d1ee      	bne.n	800ce12 <UpdateMyPortsDir+0x26>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800ce34:	2000      	movs	r0, #0
 800ce36:	bc04      	pop	{r2}
 800ce38:	4690      	mov	r8, r2
 800ce3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce3c:	08017090 	.word	0x08017090
 800ce40:	20006dd0 	.word	0x20006dd0
 800ce44:	20006f48 	.word	0x20006f48
 800ce48:	20000a98 	.word	0x20000a98

0800ce4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ce4c:	4816      	ldr	r0, [pc, #88]	; (800cea8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ce4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800ce50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800ce52:	e003      	b.n	800ce5c <LoopCopyDataInit>

0800ce54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800ce54:	4b15      	ldr	r3, [pc, #84]	; (800ceac <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800ce56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800ce58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800ce5a:	3104      	adds	r1, #4

0800ce5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800ce5c:	4814      	ldr	r0, [pc, #80]	; (800ceb0 <LoopForever+0xc>)
  ldr r3, =_edata
 800ce5e:	4b15      	ldr	r3, [pc, #84]	; (800ceb4 <LoopForever+0x10>)
  adds r2, r0, r1
 800ce60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800ce62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800ce64:	d3f6      	bcc.n	800ce54 <CopyDataInit>
  ldr r2, =_sbss
 800ce66:	4a14      	ldr	r2, [pc, #80]	; (800ceb8 <LoopForever+0x14>)
  b LoopFillZerobss
 800ce68:	e002      	b.n	800ce70 <LoopFillZerobss>

0800ce6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ce6a:	2300      	movs	r3, #0
  str  r3, [r2]
 800ce6c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ce6e:	3204      	adds	r2, #4

0800ce70 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800ce70:	4b12      	ldr	r3, [pc, #72]	; (800cebc <LoopForever+0x18>)
  cmp r2, r3
 800ce72:	429a      	cmp	r2, r3
  bcc FillZerobss
 800ce74:	d3f9      	bcc.n	800ce6a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ce76:	4812      	ldr	r0, [pc, #72]	; (800cec0 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800ce78:	4912      	ldr	r1, [pc, #72]	; (800cec4 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800ce7a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800ce7c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800ce7e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800ce80:	d005      	beq.n	800ce8e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800ce82:	f000 f82b 	bl	800cedc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800ce86:	f004 ffbb 	bl	8011e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ce8a:	f004 ff6b 	bl	8011d64 <main>

0800ce8e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ce8e:	480e      	ldr	r0, [pc, #56]	; (800cec8 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ce90:	490e      	ldr	r1, [pc, #56]	; (800cecc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ce92:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ce94:	480e      	ldr	r0, [pc, #56]	; (800ced0 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800ce96:	490d      	ldr	r1, [pc, #52]	; (800cecc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ce98:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ce9a:	480e      	ldr	r0, [pc, #56]	; (800ced4 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800ce9c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800ce9e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800cea0:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800cea2:	4700      	bx	r0

0800cea4 <LoopForever>:


LoopForever:
    b LoopForever
 800cea4:	e7fe      	b.n	800cea4 <LoopForever>
 800cea6:	0000      	.short	0x0000
  ldr   r0, =_estack
 800cea8:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800ceac:	08019c30 	.word	0x08019c30
  ldr r0, =_sdata
 800ceb0:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800ceb4:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800ceb8:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800cebc:	20006ff0 	.word	0x20006ff0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800cec0:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800cec4:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800cec8:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800cecc:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ced0:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ced4:	1fffd800 	.word	0x1fffd800

0800ced8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ced8:	e7fe      	b.n	800ced8 <ADC1_COMP_IRQHandler>
	...

0800cedc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cedc:	2101      	movs	r1, #1
 800cede:	4b11      	ldr	r3, [pc, #68]	; (800cf24 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cee0:	4811      	ldr	r0, [pc, #68]	; (800cf28 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cee8:	685a      	ldr	r2, [r3, #4]
 800ceea:	4002      	ands	r2, r0
 800ceec:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	480e      	ldr	r0, [pc, #56]	; (800cf2c <SystemInit+0x50>)
 800cef2:	4002      	ands	r2, r0
 800cef4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	480d      	ldr	r0, [pc, #52]	; (800cf30 <SystemInit+0x54>)
 800cefa:	4002      	ands	r2, r0
 800cefc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	480c      	ldr	r0, [pc, #48]	; (800cf34 <SystemInit+0x58>)
 800cf02:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800cf04:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800cf06:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800cf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0a:	4382      	bics	r2, r0
 800cf0c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800cf0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf10:	4809      	ldr	r0, [pc, #36]	; (800cf38 <SystemInit+0x5c>)
 800cf12:	4002      	ands	r2, r0
 800cf14:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800cf16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf18:	438a      	bics	r2, r1
 800cf1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	609a      	str	r2, [r3, #8]

}
 800cf20:	4770      	bx	lr
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	40021000 	.word	0x40021000
 800cf28:	08ffb80c 	.word	0x08ffb80c
 800cf2c:	fef6ffff 	.word	0xfef6ffff
 800cf30:	fffbffff 	.word	0xfffbffff
 800cf34:	ffc0ffff 	.word	0xffc0ffff
 800cf38:	fff0feac 	.word	0xfff0feac

0800cf3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cf3c:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800cf3e:	f000 fef9 	bl	800dd34 <vTaskStartScheduler>
  
  return osOK;
}
 800cf42:	2000      	movs	r0, #0
 800cf44:	bd10      	pop	{r4, pc}
 800cf46:	46c0      	nop			; (mov r8, r8)

0800cf48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cf48:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d100      	bne.n	800cf50 <osDelay+0x8>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f001 f814 	bl	800df7c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cf54:	2000      	movs	r0, #0
 800cf56:	bd10      	pop	{r4, pc}

0800cf58 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800cf58:	2300      	movs	r3, #0
{
 800cf5a:	b500      	push	{lr}
 800cf5c:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800cf5e:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf60:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00a      	beq.n	800cf7e <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cf68:	a901      	add	r1, sp, #4
 800cf6a:	f000 fb95 	bl	800d698 <xQueueGiveFromISR>
 800cf6e:	2801      	cmp	r0, #1
 800cf70:	d10c      	bne.n	800cf8c <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf72:	9b01      	ldr	r3, [sp, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <osMutexRelease+0x38>
  osStatus result = osOK;
 800cf78:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800cf7a:	b003      	add	sp, #12
 800cf7c:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cf7e:	2300      	movs	r3, #0
 800cf80:	2200      	movs	r2, #0
 800cf82:	2100      	movs	r1, #0
 800cf84:	f000 fad4 	bl	800d530 <xQueueGenericSend>
 800cf88:	2801      	cmp	r0, #1
 800cf8a:	d0f5      	beq.n	800cf78 <osMutexRelease+0x20>
    result = osErrorOS;
 800cf8c:	20ff      	movs	r0, #255	; 0xff
 800cf8e:	e7f4      	b.n	800cf7a <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800cf90:	2280      	movs	r2, #128	; 0x80
 800cf92:	4b02      	ldr	r3, [pc, #8]	; (800cf9c <osMutexRelease+0x44>)
 800cf94:	0552      	lsls	r2, r2, #21
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	e7ee      	b.n	800cf78 <osMutexRelease+0x20>
 800cf9a:	46c0      	nop			; (mov r8, r8)
 800cf9c:	e000ed04 	.word	0xe000ed04

0800cfa0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800cfa4:	2901      	cmp	r1, #1
 800cfa6:	d005      	beq.n	800cfb4 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	f000 fab7 	bl	800d51c <xQueueCreateCountingSemaphore>
 800cfae:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800cfb0:	0020      	movs	r0, r4
 800cfb2:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	f000 fa8e 	bl	800d4d8 <xQueueGenericCreate>
 800cfbc:	1e04      	subs	r4, r0, #0
 800cfbe:	d0f7      	beq.n	800cfb0 <osSemaphoreCreate+0x10>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	f000 fab3 	bl	800d530 <xQueueGenericSend>
 800cfca:	e7f1      	b.n	800cfb0 <osSemaphoreCreate+0x10>

0800cfcc <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cfcc:	2300      	movs	r3, #0
{
 800cfce:	b500      	push	{lr}
 800cfd0:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800cfd2:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d01e      	beq.n	800d016 <osSemaphoreWait+0x4a>
 800cfd8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00b      	beq.n	800cff8 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cfe0:	aa01      	add	r2, sp, #4
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	f000 fc1e 	bl	800d824 <xQueueReceiveFromISR>
 800cfe8:	2801      	cmp	r0, #1
 800cfea:	d10c      	bne.n	800d006 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cfec:	9b01      	ldr	r3, [sp, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10b      	bne.n	800d00a <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800cff2:	2000      	movs	r0, #0
}
 800cff4:	b003      	add	sp, #12
 800cff6:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cff8:	000a      	movs	r2, r1
 800cffa:	2300      	movs	r3, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	f000 fb75 	bl	800d6ec <xQueueGenericReceive>
 800d002:	2801      	cmp	r0, #1
 800d004:	d0f5      	beq.n	800cff2 <osSemaphoreWait+0x26>
      return osErrorOS;
 800d006:	20ff      	movs	r0, #255	; 0xff
 800d008:	e7f4      	b.n	800cff4 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d00a:	2280      	movs	r2, #128	; 0x80
 800d00c:	4b03      	ldr	r3, [pc, #12]	; (800d01c <osSemaphoreWait+0x50>)
 800d00e:	0552      	lsls	r2, r2, #21
 800d010:	601a      	str	r2, [r3, #0]
  return osOK;
 800d012:	2000      	movs	r0, #0
 800d014:	e7ee      	b.n	800cff4 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d016:	2080      	movs	r0, #128	; 0x80
 800d018:	e7ec      	b.n	800cff4 <osSemaphoreWait+0x28>
 800d01a:	46c0      	nop			; (mov r8, r8)
 800d01c:	e000ed04 	.word	0xe000ed04

0800d020 <osSemaphoreRelease>:
 800d020:	b510      	push	{r4, lr}
 800d022:	f7ff ff99 	bl	800cf58 <osMutexRelease>
 800d026:	bd10      	pop	{r4, pc}

0800d028 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d028:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d02a:	f001 f919 	bl	800e260 <xTaskGetSchedulerState>
 800d02e:	2801      	cmp	r0, #1
 800d030:	d001      	beq.n	800d036 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d032:	f001 fd27 	bl	800ea84 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d036:	bd10      	pop	{r4, pc}

0800d038 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d03c:	2008      	movs	r0, #8
 800d03e:	f001 fd59 	bl	800eaf4 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800d042:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d044:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800d046:	d00a      	beq.n	800d05e <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800d048:	f001 fcda 	bl	800ea00 <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800d04e:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d050:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d052:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d054:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d056:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d058:	f001 fcde 	bl	800ea18 <vPortExitCritical>

		xReturn = pdPASS;
 800d05c:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800d05e:	0028      	movs	r0, r5
 800d060:	bd70      	pop	{r4, r5, r6, pc}
 800d062:	46c0      	nop			; (mov r8, r8)
 800d064:	200000b8 	.word	0x200000b8

0800d068 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06a:	4657      	mov	r7, sl
 800d06c:	46de      	mov	lr, fp
 800d06e:	464e      	mov	r6, r9
 800d070:	4645      	mov	r5, r8
 800d072:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d074:	4f34      	ldr	r7, [pc, #208]	; (800d148 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d076:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d078:	683b      	ldr	r3, [r7, #0]
{
 800d07a:	468a      	mov	sl, r1
 800d07c:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00e      	beq.n	800d0a0 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	0032      	movs	r2, r6
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	4659      	mov	r1, fp
 800d08a:	4650      	mov	r0, sl
 800d08c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d08e:	2800      	cmp	r0, #0
 800d090:	d100      	bne.n	800d094 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d092:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d094:	bc3c      	pop	{r2, r3, r4, r5}
 800d096:	4690      	mov	r8, r2
 800d098:	4699      	mov	r9, r3
 800d09a:	46a2      	mov	sl, r4
 800d09c:	46ab      	mov	fp, r5
 800d09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d0a0:	3320      	adds	r3, #32
 800d0a2:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d0a4:	4c29      	ldr	r4, [pc, #164]	; (800d14c <FreeRTOS_CLIProcessCommand+0xe4>)
 800d0a6:	3404      	adds	r4, #4
 800d0a8:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	681d      	ldr	r5, [r3, #0]
 800d0ae:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d0b0:	0028      	movs	r0, r5
 800d0b2:	f7f3 f831 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d0b6:	464a      	mov	r2, r9
 800d0b8:	5c33      	ldrb	r3, [r6, r0]
 800d0ba:	4393      	bics	r3, r2
 800d0bc:	d106      	bne.n	800d0cc <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d0be:	0002      	movs	r2, r0
 800d0c0:	0029      	movs	r1, r5
 800d0c2:	0030      	movs	r0, r6
 800d0c4:	f005 fb66 	bl	8012794 <strncmp>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d00a      	beq.n	800d0e2 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d0cc:	6864      	ldr	r4, [r4, #4]
 800d0ce:	603c      	str	r4, [r7, #0]
 800d0d0:	2c00      	cmp	r4, #0
 800d0d2:	d1ea      	bne.n	800d0aa <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d0d4:	465a      	mov	r2, fp
 800d0d6:	491e      	ldr	r1, [pc, #120]	; (800d150 <FreeRTOS_CLIProcessCommand+0xe8>)
 800d0d8:	4650      	mov	r0, sl
 800d0da:	f005 fb6c 	bl	80127b6 <strncpy>
		xReturn = pdFALSE;
 800d0de:	2000      	movs	r0, #0
	return xReturn;
 800d0e0:	e7d8      	b.n	800d094 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d0e2:	4643      	mov	r3, r8
 800d0e4:	250c      	movs	r5, #12
 800d0e6:	575d      	ldrsb	r5, [r3, r5]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2d00      	cmp	r5, #0
 800d0ec:	db26      	blt.n	800d13c <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	56b2      	ldrsb	r2, [r6, r2]
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	d025      	beq.n	800d142 <FreeRTOS_CLIProcessCommand+0xda>
 800d0f6:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d0f8:	2400      	movs	r4, #0
 800d0fa:	e005      	b.n	800d108 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d0fc:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d0fe:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d100:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d102:	568a      	ldrsb	r2, [r1, r2]
 800d104:	2a00      	cmp	r2, #0
 800d106:	d007      	beq.n	800d118 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d108:	2a20      	cmp	r2, #32
 800d10a:	d1f7      	bne.n	800d0fc <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d10c:	2801      	cmp	r0, #1
 800d10e:	d0f6      	beq.n	800d0fe <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d110:	3401      	adds	r4, #1
 800d112:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d114:	2001      	movs	r0, #1
 800d116:	e7f2      	b.n	800d0fe <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d118:	2801      	cmp	r0, #1
 800d11a:	d00c      	beq.n	800d136 <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d11c:	42a5      	cmp	r5, r4
 800d11e:	d00d      	beq.n	800d13c <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d120:	2b00      	cmp	r3, #0
 800d122:	d0d7      	beq.n	800d0d4 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d124:	465a      	mov	r2, fp
 800d126:	490b      	ldr	r1, [pc, #44]	; (800d154 <FreeRTOS_CLIProcessCommand+0xec>)
 800d128:	4650      	mov	r0, sl
 800d12a:	f005 fb44 	bl	80127b6 <strncpy>
		pxCommand = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	2000      	movs	r0, #0
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	e7ae      	b.n	800d094 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d136:	3c01      	subs	r4, #1
 800d138:	b264      	sxtb	r4, r4
 800d13a:	e7ef      	b.n	800d11c <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d1a0      	bne.n	800d082 <FreeRTOS_CLIProcessCommand+0x1a>
 800d140:	e7c8      	b.n	800d0d4 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d142:	2400      	movs	r4, #0
 800d144:	e7ea      	b.n	800d11c <FreeRTOS_CLIProcessCommand+0xb4>
 800d146:	46c0      	nop			; (mov r8, r8)
 800d148:	2000268c 	.word	0x2000268c
 800d14c:	200000b8 	.word	0x200000b8
 800d150:	0801983c 	.word	0x0801983c
 800d154:	080197e4 	.word	0x080197e4

0800d158 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d158:	4800      	ldr	r0, [pc, #0]	; (800d15c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d15a:	4770      	bx	lr
 800d15c:	2000269c 	.word	0x2000269c

0800d160 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d160:	2300      	movs	r3, #0
{
 800d162:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d164:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d166:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d168:	2900      	cmp	r1, #0
 800d16a:	d021      	beq.n	800d1b0 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d16c:	2300      	movs	r3, #0
 800d16e:	56c3      	ldrsb	r3, [r0, r3]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d105      	bne.n	800d180 <FreeRTOS_CLIGetParameter+0x20>
 800d174:	e01c      	b.n	800d1b0 <FreeRTOS_CLIGetParameter+0x50>
 800d176:	2300      	movs	r3, #0
			pcCommandString++;
 800d178:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d17a:	56c3      	ldrsb	r3, [r0, r3]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d017      	beq.n	800d1b0 <FreeRTOS_CLIGetParameter+0x50>
 800d180:	2b20      	cmp	r3, #32
 800d182:	d1f8      	bne.n	800d176 <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d184:	2300      	movs	r3, #0
			pcCommandString++;
 800d186:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d188:	56c3      	ldrsb	r3, [r0, r3]
 800d18a:	2b20      	cmp	r3, #32
 800d18c:	d0fa      	beq.n	800d184 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00e      	beq.n	800d1b0 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d192:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d194:	42a1      	cmp	r1, r4
 800d196:	d1e9      	bne.n	800d16c <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d198:	2120      	movs	r1, #32
 800d19a:	7803      	ldrb	r3, [r0, #0]
 800d19c:	438b      	bics	r3, r1
 800d19e:	d007      	beq.n	800d1b0 <FreeRTOS_CLIGetParameter+0x50>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d1a8:	5cc1      	ldrb	r1, [r0, r3]
 800d1aa:	43a1      	bics	r1, r4
 800d1ac:	d1fa      	bne.n	800d1a4 <FreeRTOS_CLIGetParameter+0x44>
 800d1ae:	e000      	b.n	800d1b2 <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d1b0:	2000      	movs	r0, #0
}
 800d1b2:	bd10      	pop	{r4, pc}

0800d1b4 <prvHelpCommand>:
{
 800d1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1b6:	46ce      	mov	lr, r9
 800d1b8:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d1ba:	2300      	movs	r3, #0
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	0004      	movs	r4, r0
 800d1c2:	000d      	movs	r5, r1
 800d1c4:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d1ca:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d1cc:	f7ff ffc8 	bl	800d160 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d024      	beq.n	800d21e <prvHelpCommand+0x6a>
 800d1d4:	2206      	movs	r2, #6
 800d1d6:	4931      	ldr	r1, [pc, #196]	; (800d29c <prvHelpCommand+0xe8>)
 800d1d8:	f005 fadc 	bl	8012794 <strncmp>
 800d1dc:	1e07      	subs	r7, r0, #0
 800d1de:	d118      	bne.n	800d212 <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d1e0:	4b2f      	ldr	r3, [pc, #188]	; (800d2a0 <prvHelpCommand+0xec>)
 800d1e2:	4698      	mov	r8, r3
 800d1e4:	791b      	ldrb	r3, [r3, #4]
 800d1e6:	2b07      	cmp	r3, #7
 800d1e8:	d047      	beq.n	800d27a <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d1ea:	1c5a      	adds	r2, r3, #1
 800d1ec:	b2d2      	uxtb	r2, r2
 800d1ee:	4691      	mov	r9, r2
 800d1f0:	4642      	mov	r2, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	7111      	strb	r1, [r2, #4]
 800d1f6:	4a2b      	ldr	r2, [pc, #172]	; (800d2a4 <prvHelpCommand+0xf0>)
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	5899      	ldr	r1, [r3, r2]
 800d1fc:	0020      	movs	r0, r4
 800d1fe:	002a      	movs	r2, r5
 800d200:	f005 fad9 	bl	80127b6 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d204:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d206:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d208:	2b07      	cmp	r3, #7
 800d20a:	d102      	bne.n	800d212 <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d20c:	4643      	mov	r3, r8
 800d20e:	2600      	movs	r6, #0
 800d210:	711f      	strb	r7, [r3, #4]
}
 800d212:	0030      	movs	r0, r6
 800d214:	b003      	add	sp, #12
 800d216:	bc0c      	pop	{r2, r3}
 800d218:	4690      	mov	r8, r2
 800d21a:	4699      	mov	r9, r3
 800d21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d21e:	4f20      	ldr	r7, [pc, #128]	; (800d2a0 <prvHelpCommand+0xec>)
 800d220:	68be      	ldr	r6, [r7, #8]
 800d222:	2e00      	cmp	r6, #0
 800d224:	d020      	beq.n	800d268 <prvHelpCommand+0xb4>
 800d226:	7b3b      	ldrb	r3, [r7, #12]
 800d228:	1c5a      	adds	r2, r3, #1
 800d22a:	b2d2      	uxtb	r2, r2
 800d22c:	4690      	mov	r8, r2
 800d22e:	6832      	ldr	r2, [r6, #0]
 800d230:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d232:	4a1d      	ldr	r2, [pc, #116]	; (800d2a8 <prvHelpCommand+0xf4>)
 800d234:	7812      	ldrb	r2, [r2, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	d22a      	bcs.n	800d290 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d23a:	002a      	movs	r2, r5
 800d23c:	0020      	movs	r0, r4
 800d23e:	3a08      	subs	r2, #8
 800d240:	3008      	adds	r0, #8
 800d242:	f005 fab8 	bl	80127b6 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d246:	1c60      	adds	r0, r4, #1
 800d248:	4918      	ldr	r1, [pc, #96]	; (800d2ac <prvHelpCommand+0xf8>)
 800d24a:	f005 fa9b 	bl	8012784 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d24e:	2328      	movs	r3, #40	; 0x28
 800d250:	7023      	strb	r3, [r4, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	71a3      	strb	r3, [r4, #6]
 800d256:	3b09      	subs	r3, #9
 800d258:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d25a:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d25c:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d25e:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d260:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d262:	1e73      	subs	r3, r6, #1
 800d264:	419e      	sbcs	r6, r3
 800d266:	e7d4      	b.n	800d212 <prvHelpCommand+0x5e>
			counter = 1;
 800d268:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d26a:	4e11      	ldr	r6, [pc, #68]	; (800d2b0 <prvHelpCommand+0xfc>)
			counter = 1;
 800d26c:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d26e:	3604      	adds	r6, #4
			counter = 1;
 800d270:	3301      	adds	r3, #1
 800d272:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d274:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d276:	3b01      	subs	r3, #1
 800d278:	e7d9      	b.n	800d22e <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d27a:	4642      	mov	r2, r8
 800d27c:	3b06      	subs	r3, #6
 800d27e:	7113      	strb	r3, [r2, #4]
 800d280:	4b08      	ldr	r3, [pc, #32]	; (800d2a4 <prvHelpCommand+0xf0>)
 800d282:	002a      	movs	r2, r5
 800d284:	6819      	ldr	r1, [r3, #0]
 800d286:	0020      	movs	r0, r4
 800d288:	f005 fa95 	bl	80127b6 <strncpy>
			xReturn = pdTRUE;
 800d28c:	2601      	movs	r6, #1
 800d28e:	e7c0      	b.n	800d212 <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d290:	002a      	movs	r2, r5
 800d292:	0020      	movs	r0, r4
 800d294:	f005 fa8f 	bl	80127b6 <strncpy>
 800d298:	e7df      	b.n	800d25a <prvHelpCommand+0xa6>
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	08018354 	.word	0x08018354
 800d2a0:	2000268c 	.word	0x2000268c
 800d2a4:	20000034 	.word	0x20000034
 800d2a8:	200069fc 	.word	0x200069fc
 800d2ac:	08016bc2 	.word	0x08016bc2
 800d2b0:	200000b8 	.word	0x200000b8

0800d2b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2b4:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2b6:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2c0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2c2:	4252      	negs	r2, r2
 800d2c4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d2c8:	4770      	bx	lr
 800d2ca:	46c0      	nop			; (mov r8, r8)

0800d2cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2d0:	4770      	bx	lr
 800d2d2:	46c0      	nop			; (mov r8, r8)

0800d2d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2d4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2d6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d2d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2dc:	689a      	ldr	r2, [r3, #8]
 800d2de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d2e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d2e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	6003      	str	r3, [r0, #0]
}
 800d2ea:	4770      	bx	lr

0800d2ec <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2ec:	0002      	movs	r2, r0
{
 800d2ee:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2f0:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2f2:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d2f4:	1c63      	adds	r3, r4, #1
 800d2f6:	d101      	bne.n	800d2fc <vListInsert+0x10>
 800d2f8:	e00d      	b.n	800d316 <vListInsert+0x2a>
 800d2fa:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2fc:	6853      	ldr	r3, [r2, #4]
 800d2fe:	681d      	ldr	r5, [r3, #0]
 800d300:	42a5      	cmp	r5, r4
 800d302:	d9fa      	bls.n	800d2fa <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d304:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d306:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d308:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800d30a:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800d30c:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800d30e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d310:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d312:	6003      	str	r3, [r0, #0]
}
 800d314:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d316:	6902      	ldr	r2, [r0, #16]
 800d318:	6853      	ldr	r3, [r2, #4]
 800d31a:	e7f3      	b.n	800d304 <vListInsert+0x18>

0800d31c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d31c:	6842      	ldr	r2, [r0, #4]
 800d31e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d320:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d322:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d324:	6881      	ldr	r1, [r0, #8]
 800d326:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	4282      	cmp	r2, r0
 800d32c:	d100      	bne.n	800d330 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d32e:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d330:	2200      	movs	r2, #0
 800d332:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	1e50      	subs	r0, r2, #1
 800d338:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d33a:	4770      	bx	lr

0800d33c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d340:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d342:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d344:	2a00      	cmp	r2, #0
 800d346:	d107      	bne.n	800d358 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d348:	6805      	ldr	r5, [r0, #0]
 800d34a:	2d00      	cmp	r5, #0
 800d34c:	d02d      	beq.n	800d3aa <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800d34e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d352:	3301      	adds	r3, #1
 800d354:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d356:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d358:	2d00      	cmp	r5, #0
 800d35a:	d10e      	bne.n	800d37a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d35c:	6880      	ldr	r0, [r0, #8]
 800d35e:	f004 ffd2 	bl	8012306 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d362:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d364:	68a3      	ldr	r3, [r4, #8]
 800d366:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d368:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d36a:	4463      	add	r3, ip
 800d36c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d36e:	4293      	cmp	r3, r2
 800d370:	d3ed      	bcc.n	800d34e <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d372:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800d374:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d376:	60a3      	str	r3, [r4, #8]
 800d378:	e7ea      	b.n	800d350 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d37a:	68c0      	ldr	r0, [r0, #12]
 800d37c:	f004 ffc3 	bl	8012306 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d380:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d382:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d384:	425a      	negs	r2, r3
 800d386:	68e3      	ldr	r3, [r4, #12]
 800d388:	189b      	adds	r3, r3, r2
 800d38a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d38c:	428b      	cmp	r3, r1
 800d38e:	d203      	bcs.n	800d398 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	469c      	mov	ip, r3
 800d394:	4462      	add	r2, ip
 800d396:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d398:	2d02      	cmp	r5, #2
 800d39a:	d1d8      	bne.n	800d34e <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d39c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d0d5      	beq.n	800d34e <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800d3a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	63a3      	str	r3, [r4, #56]	; 0x38
 800d3a8:	e7d1      	b.n	800d34e <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d3aa:	6840      	ldr	r0, [r0, #4]
 800d3ac:	f000 ff98 	bl	800e2e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d3b0:	6065      	str	r5, [r4, #4]
 800d3b2:	e7cd      	b.n	800d350 <prvCopyDataToQueue+0x14>

0800d3b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d3b6:	b510      	push	{r4, lr}
 800d3b8:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3ba:	2a00      	cmp	r2, #0
 800d3bc:	d008      	beq.n	800d3d0 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d3be:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3c0:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d3c2:	1889      	adds	r1, r1, r2
 800d3c4:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3c6:	42a1      	cmp	r1, r4
 800d3c8:	d203      	bcs.n	800d3d2 <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d3ca:	0018      	movs	r0, r3
 800d3cc:	f004 ff9b 	bl	8012306 <memcpy>
	}
}
 800d3d0:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d3d2:	6801      	ldr	r1, [r0, #0]
 800d3d4:	60c1      	str	r1, [r0, #12]
 800d3d6:	e7f8      	b.n	800d3ca <prvCopyDataFromQueue+0x16>

0800d3d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3d8:	b570      	push	{r4, r5, r6, lr}
 800d3da:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3dc:	f001 fb10 	bl	800ea00 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d3e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dd1b      	ble.n	800d41e <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d018      	beq.n	800d41e <prvUnlockQueue+0x46>
 800d3ec:	0025      	movs	r5, r4
 800d3ee:	3524      	adds	r5, #36	; 0x24
 800d3f0:	e008      	b.n	800d404 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800d3f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d3f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dd0f      	ble.n	800d41e <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00c      	beq.n	800d41e <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d404:	0028      	movs	r0, r5
 800d406:	f000 feb7 	bl	800e178 <xTaskRemoveFromEventList>
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d0f1      	beq.n	800d3f2 <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800d40e:	f000 ff21 	bl	800e254 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800d412:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d414:	3b01      	subs	r3, #1
 800d416:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d418:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	dcef      	bgt.n	800d3fe <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800d41e:	2301      	movs	r3, #1
 800d420:	425b      	negs	r3, r3
 800d422:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800d424:	f001 faf8 	bl	800ea18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d428:	f001 faea 	bl	800ea00 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d42c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d42e:	2b00      	cmp	r3, #0
 800d430:	dd1b      	ble.n	800d46a <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d432:	6923      	ldr	r3, [r4, #16]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d018      	beq.n	800d46a <prvUnlockQueue+0x92>
 800d438:	0025      	movs	r5, r4
 800d43a:	3510      	adds	r5, #16
 800d43c:	e008      	b.n	800d450 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800d43e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d440:	3b01      	subs	r3, #1
 800d442:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d444:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d446:	2b00      	cmp	r3, #0
 800d448:	dd0f      	ble.n	800d46a <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d44a:	6923      	ldr	r3, [r4, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00c      	beq.n	800d46a <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d450:	0028      	movs	r0, r5
 800d452:	f000 fe91 	bl	800e178 <xTaskRemoveFromEventList>
 800d456:	2800      	cmp	r0, #0
 800d458:	d0f1      	beq.n	800d43e <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d45a:	f000 fefb 	bl	800e254 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800d45e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d460:	3b01      	subs	r3, #1
 800d462:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d466:	2b00      	cmp	r3, #0
 800d468:	dcef      	bgt.n	800d44a <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800d46a:	2301      	movs	r3, #1
 800d46c:	425b      	negs	r3, r3
 800d46e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d470:	f001 fad2 	bl	800ea18 <vPortExitCritical>
}
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	46c0      	nop			; (mov r8, r8)

0800d478 <xQueueGenericReset>:
{
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	0004      	movs	r4, r0
 800d47c:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800d47e:	f001 fabf 	bl	800ea00 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d482:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d486:	6822      	ldr	r2, [r4, #0]
 800d488:	434b      	muls	r3, r1
 800d48a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d48c:	1a5b      	subs	r3, r3, r1
 800d48e:	18d3      	adds	r3, r2, r3
 800d490:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800d492:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d494:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d496:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800d498:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d49a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d49c:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800d49e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800d4a0:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800d4a2:	2d00      	cmp	r5, #0
 800d4a4:	d10f      	bne.n	800d4c6 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d103      	bne.n	800d4b4 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800d4ac:	f001 fab4 	bl	800ea18 <vPortExitCritical>
}
 800d4b0:	2001      	movs	r0, #1
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d4b4:	0020      	movs	r0, r4
 800d4b6:	3010      	adds	r0, #16
 800d4b8:	f000 fe5e 	bl	800e178 <xTaskRemoveFromEventList>
 800d4bc:	2801      	cmp	r0, #1
 800d4be:	d1f5      	bne.n	800d4ac <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800d4c0:	f001 fa92 	bl	800e9e8 <vPortYield>
 800d4c4:	e7f2      	b.n	800d4ac <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d4c6:	0020      	movs	r0, r4
 800d4c8:	3010      	adds	r0, #16
 800d4ca:	f7ff fef3 	bl	800d2b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ce:	0020      	movs	r0, r4
 800d4d0:	3024      	adds	r0, #36	; 0x24
 800d4d2:	f7ff feef 	bl	800d2b4 <vListInitialise>
 800d4d6:	e7e9      	b.n	800d4ac <xQueueGenericReset+0x34>

0800d4d8 <xQueueGenericCreate>:
{
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4da:	0006      	movs	r6, r0
 800d4dc:	000d      	movs	r5, r1
 800d4de:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	d009      	beq.n	800d4f8 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4e4:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d4e6:	3055      	adds	r0, #85	; 0x55
 800d4e8:	f001 fb04 	bl	800eaf4 <pvPortMalloc>
 800d4ec:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d4ee:	d013      	beq.n	800d518 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800d4f0:	0003      	movs	r3, r0
 800d4f2:	3354      	adds	r3, #84	; 0x54
 800d4f4:	6003      	str	r3, [r0, #0]
 800d4f6:	e005      	b.n	800d504 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d4f8:	2054      	movs	r0, #84	; 0x54
 800d4fa:	f001 fafb 	bl	800eaf4 <pvPortMalloc>
 800d4fe:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d500:	d00a      	beq.n	800d518 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d502:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800d504:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800d506:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d508:	2101      	movs	r1, #1
 800d50a:	0020      	movs	r0, r4
 800d50c:	f7ff ffb4 	bl	800d478 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800d510:	2350      	movs	r3, #80	; 0x50
 800d512:	54e7      	strb	r7, [r4, r3]
}
 800d514:	0020      	movs	r0, r4
 800d516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800d518:	2400      	movs	r4, #0
 800d51a:	e7fb      	b.n	800d514 <xQueueGenericCreate+0x3c>

0800d51c <xQueueCreateCountingSemaphore>:
	{
 800d51c:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d51e:	2202      	movs	r2, #2
	{
 800d520:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d522:	2100      	movs	r1, #0
 800d524:	f7ff ffd8 	bl	800d4d8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d528:	2800      	cmp	r0, #0
 800d52a:	d000      	beq.n	800d52e <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d52c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800d52e:	bd10      	pop	{r4, pc}

0800d530 <xQueueGenericSend>:
{
 800d530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d532:	46c6      	mov	lr, r8
 800d534:	0004      	movs	r4, r0
 800d536:	b500      	push	{lr}
 800d538:	b084      	sub	sp, #16
 800d53a:	9201      	str	r2, [sp, #4]
 800d53c:	001e      	movs	r6, r3
 800d53e:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800d540:	f001 fa5e 	bl	800ea00 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d546:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d548:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d54a:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d330      	bcc.n	800d5b2 <xQueueGenericSend+0x82>
 800d550:	2e02      	cmp	r6, #2
 800d552:	d02e      	beq.n	800d5b2 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d554:	9b01      	ldr	r3, [sp, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d052      	beq.n	800d600 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800d55a:	2d00      	cmp	r5, #0
 800d55c:	d03a      	beq.n	800d5d4 <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800d55e:	f001 fa5b 	bl	800ea18 <vPortExitCritical>
		vTaskSuspendAll();
 800d562:	f000 fc0f 	bl	800dd84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d566:	f001 fa4b 	bl	800ea00 <vPortEnterCritical>
 800d56a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d56c:	3301      	adds	r3, #1
 800d56e:	d100      	bne.n	800d572 <xQueueGenericSend+0x42>
 800d570:	6467      	str	r7, [r4, #68]	; 0x44
 800d572:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d574:	3301      	adds	r3, #1
 800d576:	d100      	bne.n	800d57a <xQueueGenericSend+0x4a>
 800d578:	64a7      	str	r7, [r4, #72]	; 0x48
 800d57a:	f001 fa4d 	bl	800ea18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d57e:	a901      	add	r1, sp, #4
 800d580:	a802      	add	r0, sp, #8
 800d582:	f000 fe3b 	bl	800e1fc <xTaskCheckForTimeOut>
 800d586:	2800      	cmp	r0, #0
 800d588:	d13e      	bne.n	800d608 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d58a:	f001 fa39 	bl	800ea00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d58e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d590:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d592:	4293      	cmp	r3, r2
 800d594:	d022      	beq.n	800d5dc <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d596:	f001 fa3f 	bl	800ea18 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d59a:	0020      	movs	r0, r4
 800d59c:	f7ff ff1c 	bl	800d3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5a0:	f000 fc8e 	bl	800dec0 <xTaskResumeAll>
 800d5a4:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800d5a6:	f001 fa2b 	bl	800ea00 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d2ce      	bcs.n	800d550 <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5b2:	0032      	movs	r2, r6
 800d5b4:	4641      	mov	r1, r8
 800d5b6:	0020      	movs	r0, r4
 800d5b8:	f7ff fec0 	bl	800d33c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d129      	bne.n	800d616 <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d12d      	bne.n	800d622 <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800d5c6:	f001 fa27 	bl	800ea18 <vPortExitCritical>
				return pdPASS;
 800d5ca:	2001      	movs	r0, #1
}
 800d5cc:	b004      	add	sp, #16
 800d5ce:	bc04      	pop	{r2}
 800d5d0:	4690      	mov	r8, r2
 800d5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800d5d4:	a802      	add	r0, sp, #8
 800d5d6:	f000 fe05 	bl	800e1e4 <vTaskSetTimeOutState>
 800d5da:	e7c0      	b.n	800d55e <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800d5dc:	f001 fa1c 	bl	800ea18 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5e0:	0020      	movs	r0, r4
 800d5e2:	9901      	ldr	r1, [sp, #4]
 800d5e4:	3010      	adds	r0, #16
 800d5e6:	f000 fd99 	bl	800e11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5ea:	0020      	movs	r0, r4
 800d5ec:	f7ff fef4 	bl	800d3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5f0:	f000 fc66 	bl	800dec0 <xTaskResumeAll>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d1d5      	bne.n	800d5a4 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800d5f8:	f001 f9f6 	bl	800e9e8 <vPortYield>
 800d5fc:	2501      	movs	r5, #1
 800d5fe:	e7d2      	b.n	800d5a6 <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800d600:	f001 fa0a 	bl	800ea18 <vPortExitCritical>
					return errQUEUE_FULL;
 800d604:	2000      	movs	r0, #0
 800d606:	e7e1      	b.n	800d5cc <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800d608:	0020      	movs	r0, r4
 800d60a:	f7ff fee5 	bl	800d3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d60e:	f000 fc57 	bl	800dec0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d612:	2000      	movs	r0, #0
 800d614:	e7da      	b.n	800d5cc <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800d616:	0020      	movs	r0, r4
 800d618:	3024      	adds	r0, #36	; 0x24
 800d61a:	f000 fdad 	bl	800e178 <xTaskRemoveFromEventList>
 800d61e:	2801      	cmp	r0, #1
 800d620:	d1d1      	bne.n	800d5c6 <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800d622:	f001 f9e1 	bl	800e9e8 <vPortYield>
 800d626:	e7ce      	b.n	800d5c6 <xQueueGenericSend+0x96>

0800d628 <xQueueGenericSendFromISR>:
{
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	46ce      	mov	lr, r9
 800d62c:	4647      	mov	r7, r8
 800d62e:	0004      	movs	r4, r0
 800d630:	b580      	push	{r7, lr}
 800d632:	4691      	mov	r9, r2
 800d634:	001d      	movs	r5, r3
 800d636:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d638:	f001 f9f8 	bl	800ea2c <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d63c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d63e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d640:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d642:	4293      	cmp	r3, r2
 800d644:	d30a      	bcc.n	800d65c <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800d646:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d648:	2d02      	cmp	r5, #2
 800d64a:	d007      	beq.n	800d65c <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d64c:	0038      	movs	r0, r7
 800d64e:	f001 f9f3 	bl	800ea38 <vClearInterruptMaskFromISR>
}
 800d652:	0030      	movs	r0, r6
 800d654:	bc0c      	pop	{r2, r3}
 800d656:	4690      	mov	r8, r2
 800d658:	4699      	mov	r9, r3
 800d65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d65c:	002a      	movs	r2, r5
 800d65e:	4641      	mov	r1, r8
 800d660:	0020      	movs	r0, r4
 800d662:	f7ff fe6b 	bl	800d33c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d666:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d668:	3301      	adds	r3, #1
 800d66a:	d004      	beq.n	800d676 <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800d66c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d66e:	3301      	adds	r3, #1
 800d670:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d672:	2601      	movs	r6, #1
 800d674:	e7ea      	b.n	800d64c <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d0fa      	beq.n	800d672 <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d67c:	0020      	movs	r0, r4
 800d67e:	3024      	adds	r0, #36	; 0x24
 800d680:	f000 fd7a 	bl	800e178 <xTaskRemoveFromEventList>
 800d684:	2800      	cmp	r0, #0
 800d686:	d0f4      	beq.n	800d672 <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800d688:	464b      	mov	r3, r9
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0f1      	beq.n	800d672 <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800d692:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	e7d9      	b.n	800d64c <xQueueGenericSendFromISR+0x24>

0800d698 <xQueueGiveFromISR>:
{
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	0004      	movs	r4, r0
 800d69c:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d69e:	f001 f9c5 	bl	800ea2c <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d6a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6a6:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800d6a8:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d209      	bcs.n	800d6c2 <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800d6ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d6b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	d008      	beq.n	800d6cc <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800d6ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d6bc:	3301      	adds	r3, #1
 800d6be:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d6c0:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d6c2:	0030      	movs	r0, r6
 800d6c4:	f001 f9b8 	bl	800ea38 <vClearInterruptMaskFromISR>
}
 800d6c8:	0028      	movs	r0, r5
 800d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0f6      	beq.n	800d6c0 <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6d2:	0020      	movs	r0, r4
 800d6d4:	3024      	adds	r0, #36	; 0x24
 800d6d6:	f000 fd4f 	bl	800e178 <xTaskRemoveFromEventList>
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0f0      	beq.n	800d6c0 <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800d6de:	2f00      	cmp	r7, #0
 800d6e0:	d0ee      	beq.n	800d6c0 <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6e2:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800d6e4:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	e7eb      	b.n	800d6c2 <xQueueGiveFromISR+0x2a>
 800d6ea:	46c0      	nop			; (mov r8, r8)

0800d6ec <xQueueGenericReceive>:
{
 800d6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ee:	46c6      	mov	lr, r8
 800d6f0:	0004      	movs	r4, r0
 800d6f2:	b500      	push	{lr}
 800d6f4:	b084      	sub	sp, #16
 800d6f6:	4698      	mov	r8, r3
 800d6f8:	000f      	movs	r7, r1
 800d6fa:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800d6fc:	f001 f980 	bl	800ea00 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d702:	2b00      	cmp	r3, #0
 800d704:	d148      	bne.n	800d798 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d706:	9b01      	ldr	r3, [sp, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d06a      	beq.n	800d7e2 <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d70c:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800d70e:	a802      	add	r0, sp, #8
 800d710:	f000 fd68 	bl	800e1e4 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800d714:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d716:	3624      	adds	r6, #36	; 0x24
 800d718:	e017      	b.n	800d74a <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800d71a:	f001 f97d 	bl	800ea18 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d056      	beq.n	800d7d2 <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d724:	9901      	ldr	r1, [sp, #4]
 800d726:	0030      	movs	r0, r6
 800d728:	f000 fcf8 	bl	800e11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d72c:	0020      	movs	r0, r4
 800d72e:	f7ff fe53 	bl	800d3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d732:	f000 fbc5 	bl	800dec0 <xTaskResumeAll>
 800d736:	2800      	cmp	r0, #0
 800d738:	d048      	beq.n	800d7cc <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800d73a:	f001 f961 	bl	800ea00 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d73e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d740:	2b00      	cmp	r3, #0
 800d742:	d129      	bne.n	800d798 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d744:	9b01      	ldr	r3, [sp, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d04b      	beq.n	800d7e2 <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800d74a:	f001 f965 	bl	800ea18 <vPortExitCritical>
		vTaskSuspendAll();
 800d74e:	f000 fb19 	bl	800dd84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d752:	f001 f955 	bl	800ea00 <vPortEnterCritical>
 800d756:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d758:	3301      	adds	r3, #1
 800d75a:	d100      	bne.n	800d75e <xQueueGenericReceive+0x72>
 800d75c:	6465      	str	r5, [r4, #68]	; 0x44
 800d75e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d760:	3301      	adds	r3, #1
 800d762:	d100      	bne.n	800d766 <xQueueGenericReceive+0x7a>
 800d764:	64a5      	str	r5, [r4, #72]	; 0x48
 800d766:	f001 f957 	bl	800ea18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d76a:	a901      	add	r1, sp, #4
 800d76c:	a802      	add	r0, sp, #8
 800d76e:	f000 fd45 	bl	800e1fc <xTaskCheckForTimeOut>
 800d772:	2800      	cmp	r0, #0
 800d774:	d13c      	bne.n	800d7f0 <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800d776:	f001 f943 	bl	800ea00 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d77a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d0cc      	beq.n	800d71a <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800d780:	f001 f94a 	bl	800ea18 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d784:	0020      	movs	r0, r4
 800d786:	f7ff fe27 	bl	800d3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d78a:	f000 fb99 	bl	800dec0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800d78e:	f001 f937 	bl	800ea00 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d794:	2b00      	cmp	r3, #0
 800d796:	d0d5      	beq.n	800d744 <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d798:	0039      	movs	r1, r7
 800d79a:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d79c:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d79e:	f7ff fe09 	bl	800d3b4 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d7a2:	4643      	mov	r3, r8
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d12a      	bne.n	800d7fe <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800d7a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d033      	beq.n	800d81c <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7b4:	6923      	ldr	r3, [r4, #16]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d025      	beq.n	800d806 <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d7ba:	0020      	movs	r0, r4
 800d7bc:	3010      	adds	r0, #16
 800d7be:	f000 fcdb 	bl	800e178 <xTaskRemoveFromEventList>
 800d7c2:	2801      	cmp	r0, #1
 800d7c4:	d11f      	bne.n	800d806 <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800d7c6:	f001 f90f 	bl	800e9e8 <vPortYield>
 800d7ca:	e01c      	b.n	800d806 <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800d7cc:	f001 f90c 	bl	800e9e8 <vPortYield>
 800d7d0:	e7b3      	b.n	800d73a <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800d7d2:	f001 f915 	bl	800ea00 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d7d6:	6860      	ldr	r0, [r4, #4]
 800d7d8:	f000 fd4e 	bl	800e278 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d7dc:	f001 f91c 	bl	800ea18 <vPortExitCritical>
 800d7e0:	e7a0      	b.n	800d724 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800d7e2:	f001 f919 	bl	800ea18 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d7e6:	2000      	movs	r0, #0
}
 800d7e8:	b004      	add	sp, #16
 800d7ea:	bc04      	pop	{r2}
 800d7ec:	4690      	mov	r8, r2
 800d7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800d7f0:	0020      	movs	r0, r4
 800d7f2:	f7ff fdf1 	bl	800d3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7f6:	f000 fb63 	bl	800dec0 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	e7f4      	b.n	800d7e8 <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d800:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800d806:	f001 f907 	bl	800ea18 <vPortExitCritical>
				return pdPASS;
 800d80a:	2001      	movs	r0, #1
 800d80c:	e7ec      	b.n	800d7e8 <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80e:	0020      	movs	r0, r4
 800d810:	3024      	adds	r0, #36	; 0x24
 800d812:	f000 fcb1 	bl	800e178 <xTaskRemoveFromEventList>
 800d816:	2800      	cmp	r0, #0
 800d818:	d0f5      	beq.n	800d806 <xQueueGenericReceive+0x11a>
 800d81a:	e7d4      	b.n	800d7c6 <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d81c:	f000 fe40 	bl	800e4a0 <pvTaskIncrementMutexHeldCount>
 800d820:	6060      	str	r0, [r4, #4]
 800d822:	e7c7      	b.n	800d7b4 <xQueueGenericReceive+0xc8>

0800d824 <xQueueReceiveFromISR>:
{
 800d824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d826:	46c6      	mov	lr, r8
 800d828:	0004      	movs	r4, r0
 800d82a:	b500      	push	{lr}
 800d82c:	000f      	movs	r7, r1
 800d82e:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d830:	f001 f8fc 	bl	800ea2c <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d834:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d836:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800d838:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d83e:	0030      	movs	r0, r6
 800d840:	f001 f8fa 	bl	800ea38 <vClearInterruptMaskFromISR>
}
 800d844:	0028      	movs	r0, r5
 800d846:	bc04      	pop	{r2}
 800d848:	4690      	mov	r8, r2
 800d84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d84c:	0039      	movs	r1, r7
 800d84e:	0020      	movs	r0, r4
 800d850:	f7ff fdb0 	bl	800d3b4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d856:	3b01      	subs	r3, #1
 800d858:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d85a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d85c:	3301      	adds	r3, #1
 800d85e:	d004      	beq.n	800d86a <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800d860:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d862:	3301      	adds	r3, #1
 800d864:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d866:	2501      	movs	r5, #1
 800d868:	e7e9      	b.n	800d83e <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d86a:	6923      	ldr	r3, [r4, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0fa      	beq.n	800d866 <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d870:	0020      	movs	r0, r4
 800d872:	3010      	adds	r0, #16
 800d874:	f000 fc80 	bl	800e178 <xTaskRemoveFromEventList>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d0f4      	beq.n	800d866 <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800d87c:	4643      	mov	r3, r8
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0f1      	beq.n	800d866 <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d882:	2301      	movs	r3, #1
 800d884:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800d886:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	e7d8      	b.n	800d83e <xQueueReceiveFromISR+0x1a>

0800d88c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d88c:	2300      	movs	r3, #0
	{
 800d88e:	b570      	push	{r4, r5, r6, lr}
 800d890:	4d06      	ldr	r5, [pc, #24]	; (800d8ac <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d892:	00dc      	lsls	r4, r3, #3
 800d894:	192a      	adds	r2, r5, r4
 800d896:	6816      	ldr	r6, [r2, #0]
 800d898:	2e00      	cmp	r6, #0
 800d89a:	d003      	beq.n	800d8a4 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d89c:	3301      	adds	r3, #1
 800d89e:	2b08      	cmp	r3, #8
 800d8a0:	d1f7      	bne.n	800d892 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d8a4:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d8a6:	6050      	str	r0, [r2, #4]
				break;
 800d8a8:	e7fb      	b.n	800d8a2 <vQueueAddToRegistry+0x16>
 800d8aa:	46c0      	nop			; (mov r8, r8)
 800d8ac:	20006f7c 	.word	0x20006f7c

0800d8b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	0004      	movs	r4, r0
 800d8b4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8b6:	f001 f8a3 	bl	800ea00 <vPortEnterCritical>
 800d8ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8bc:	3301      	adds	r3, #1
 800d8be:	d101      	bne.n	800d8c4 <vQueueWaitForMessageRestricted+0x14>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	6463      	str	r3, [r4, #68]	; 0x44
 800d8c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	d101      	bne.n	800d8ce <vQueueWaitForMessageRestricted+0x1e>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800d8ce:	f001 f8a3 	bl	800ea18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d104      	bne.n	800d8e2 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8d8:	0020      	movs	r0, r4
 800d8da:	0029      	movs	r1, r5
 800d8dc:	3024      	adds	r0, #36	; 0x24
 800d8de:	f000 fc39 	bl	800e154 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d8e2:	0020      	movs	r0, r4
 800d8e4:	f7ff fd78 	bl	800d3d8 <prvUnlockQueue>
	}
 800d8e8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ea:	46c0      	nop			; (mov r8, r8)

0800d8ec <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d8f0:	f004 ff48 	bl	8012784 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d8f4:	0020      	movs	r0, r4
 800d8f6:	f7f2 fc0f 	bl	8000118 <strlen>
 800d8fa:	0003      	movs	r3, r0
 800d8fc:	280b      	cmp	r0, #11
 800d8fe:	d808      	bhi.n	800d912 <prvWriteNameToBuffer+0x26>
 800d900:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800d902:	2320      	movs	r3, #32
 800d904:	1820      	adds	r0, r4, r0
 800d906:	320c      	adds	r2, #12
 800d908:	7003      	strb	r3, [r0, #0]
 800d90a:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d90c:	4290      	cmp	r0, r2
 800d90e:	d1fb      	bne.n	800d908 <prvWriteNameToBuffer+0x1c>
 800d910:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800d912:	18e0      	adds	r0, r4, r3
 800d914:	2300      	movs	r3, #0
 800d916:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800d918:	bd10      	pop	{r4, pc}
 800d91a:	46c0      	nop			; (mov r8, r8)

0800d91c <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800d91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d91e:	46d6      	mov	lr, sl
 800d920:	464f      	mov	r7, r9
 800d922:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d924:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800d926:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d928:	685f      	ldr	r7, [r3, #4]
 800d92a:	2308      	movs	r3, #8
 800d92c:	469c      	mov	ip, r3
 800d92e:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800d930:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d932:	604f      	str	r7, [r1, #4]
 800d934:	4567      	cmp	r7, ip
 800d936:	d042      	beq.n	800d9be <prvListTaskWithinSingleList.part.1+0xa2>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	0005      	movs	r5, r0
 800d93c:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d93e:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800d940:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d942:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d944:	687f      	ldr	r7, [r7, #4]
 800d946:	604f      	str	r7, [r1, #4]
 800d948:	45bc      	cmp	ip, r7
 800d94a:	d035      	beq.n	800d9b8 <prvListTaskWithinSingleList.part.1+0x9c>
 800d94c:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800d94e:	0033      	movs	r3, r6
 800d950:	3334      	adds	r3, #52	; 0x34
 800d952:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d954:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800d956:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d958:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800d95a:	4653      	mov	r3, sl
 800d95c:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800d95e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d960:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800d962:	4653      	mov	r3, sl
 800d964:	2b03      	cmp	r3, #3
 800d966:	d018      	beq.n	800d99a <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d968:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800d96a:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d96c:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d96e:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d970:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d972:	7813      	ldrb	r3, [r2, #0]
 800d974:	2ba5      	cmp	r3, #165	; 0xa5
 800d976:	d11d      	bne.n	800d9b4 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800d978:	2300      	movs	r3, #0
			ulCount++;
 800d97a:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d97c:	5cd4      	ldrb	r4, [r2, r3]
 800d97e:	2ca5      	cmp	r4, #165	; 0xa5
 800d980:	d0fb      	beq.n	800d97a <prvListTaskWithinSingleList.part.1+0x5e>
 800d982:	089b      	lsrs	r3, r3, #2
 800d984:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d986:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800d988:	3001      	adds	r0, #1
 800d98a:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800d98c:	45b0      	cmp	r8, r6
 800d98e:	d1d9      	bne.n	800d944 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800d990:	bc1c      	pop	{r2, r3, r4}
 800d992:	4690      	mov	r8, r2
 800d994:	4699      	mov	r9, r3
 800d996:	46a2      	mov	sl, r4
 800d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800d99a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d0e3      	beq.n	800d968 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d9a0:	464b      	mov	r3, r9
 800d9a2:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d9a4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800d9a6:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d9a8:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d9aa:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d9ac:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d9ae:	7813      	ldrb	r3, [r2, #0]
 800d9b0:	2ba5      	cmp	r3, #165	; 0xa5
 800d9b2:	d0e1      	beq.n	800d978 <prvListTaskWithinSingleList.part.1+0x5c>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e7e6      	b.n	800d986 <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d9b8:	68cf      	ldr	r7, [r1, #12]
 800d9ba:	604f      	str	r7, [r1, #4]
 800d9bc:	e7c6      	b.n	800d94c <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d9be:	68cf      	ldr	r7, [r1, #12]
 800d9c0:	e7ba      	b.n	800d938 <prvListTaskWithinSingleList.part.1+0x1c>
 800d9c2:	46c0      	nop			; (mov r8, r8)

0800d9c4 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d9c4:	4b03      	ldr	r3, [pc, #12]	; (800d9d4 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	4b02      	ldr	r3, [pc, #8]	; (800d9d8 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800d9d0:	601a      	str	r2, [r3, #0]
}
 800d9d2:	4770      	bx	lr
 800d9d4:	20002900 	.word	0x20002900
 800d9d8:	200000c4 	.word	0x200000c4

0800d9dc <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800d9de:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d9e0:	685a      	ldr	r2, [r3, #4]
{
 800d9e2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d9e4:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800d9e6:	689a      	ldr	r2, [r3, #8]
 800d9e8:	4282      	cmp	r2, r0
 800d9ea:	d80a      	bhi.n	800da02 <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	6859      	ldr	r1, [r3, #4]
 800d9f0:	3104      	adds	r1, #4
 800d9f2:	f7ff fc7b 	bl	800d2ec <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800d9f6:	4b07      	ldr	r3, [pc, #28]	; (800da14 <prvAddCurrentTaskToDelayedList+0x38>)
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	42a2      	cmp	r2, r4
 800d9fc:	d900      	bls.n	800da00 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800d9fe:	601c      	str	r4, [r3, #0]
}
 800da00:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800da02:	68d8      	ldr	r0, [r3, #12]
 800da04:	6859      	ldr	r1, [r3, #4]
 800da06:	3104      	adds	r1, #4
 800da08:	f7ff fc70 	bl	800d2ec <vListInsert>
 800da0c:	e7f8      	b.n	800da00 <prvAddCurrentTaskToDelayedList+0x24>
 800da0e:	46c0      	nop			; (mov r8, r8)
 800da10:	20002900 	.word	0x20002900
 800da14:	200000c4 	.word	0x200000c4

0800da18 <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800da18:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800da1a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800da1c:	4c26      	ldr	r4, [pc, #152]	; (800dab8 <vTaskSwitchContext.part.5+0xa0>)
 800da1e:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800da20:	f7fa f81c 	bl	8007a5c <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800da24:	6963      	ldr	r3, [r4, #20]
 800da26:	4298      	cmp	r0, r3
 800da28:	d904      	bls.n	800da34 <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800da2e:	1acb      	subs	r3, r1, r3
 800da30:	181b      	adds	r3, r3, r0
 800da32:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800da34:	6862      	ldr	r2, [r4, #4]
 800da36:	6863      	ldr	r3, [r4, #4]
 800da38:	6812      	ldr	r2, [r2, #0]
 800da3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800da3c:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800da3e:	429a      	cmp	r2, r3
 800da40:	d923      	bls.n	800da8a <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800da42:	6863      	ldr	r3, [r4, #4]
 800da44:	2214      	movs	r2, #20
 800da46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da48:	491c      	ldr	r1, [pc, #112]	; (800dabc <vTaskSwitchContext.part.5+0xa4>)
 800da4a:	f004 fc4d 	bl	80122e8 <memcmp>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d128      	bne.n	800daa4 <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800da52:	69a2      	ldr	r2, [r4, #24]
 800da54:	491a      	ldr	r1, [pc, #104]	; (800dac0 <vTaskSwitchContext.part.5+0xa8>)
 800da56:	e003      	b.n	800da60 <vTaskSwitchContext.part.5+0x48>
 800da58:	69a3      	ldr	r3, [r4, #24]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	61a3      	str	r3, [r4, #24]
 800da5e:	69a2      	ldr	r2, [r4, #24]
 800da60:	0093      	lsls	r3, r2, #2
 800da62:	189b      	adds	r3, r3, r2
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	58cb      	ldr	r3, [r1, r3]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0f5      	beq.n	800da58 <vTaskSwitchContext.part.5+0x40>
 800da6c:	69a2      	ldr	r2, [r4, #24]
 800da6e:	0093      	lsls	r3, r2, #2
 800da70:	189b      	adds	r3, r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	18c8      	adds	r0, r1, r3
 800da76:	6842      	ldr	r2, [r0, #4]
 800da78:	3308      	adds	r3, #8
 800da7a:	6852      	ldr	r2, [r2, #4]
 800da7c:	18c9      	adds	r1, r1, r3
 800da7e:	6042      	str	r2, [r0, #4]
 800da80:	428a      	cmp	r2, r1
 800da82:	d015      	beq.n	800dab0 <vTaskSwitchContext.part.5+0x98>
 800da84:	68d3      	ldr	r3, [r2, #12]
 800da86:	6063      	str	r3, [r4, #4]
}
 800da88:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800da8a:	6860      	ldr	r0, [r4, #4]
 800da8c:	6861      	ldr	r1, [r4, #4]
 800da8e:	3134      	adds	r1, #52	; 0x34
 800da90:	f7fe fcf6 	bl	800c480 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800da94:	6863      	ldr	r3, [r4, #4]
 800da96:	2214      	movs	r2, #20
 800da98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da9a:	4908      	ldr	r1, [pc, #32]	; (800dabc <vTaskSwitchContext.part.5+0xa4>)
 800da9c:	f004 fc24 	bl	80122e8 <memcmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d0d6      	beq.n	800da52 <vTaskSwitchContext.part.5+0x3a>
 800daa4:	6860      	ldr	r0, [r4, #4]
 800daa6:	6861      	ldr	r1, [r4, #4]
 800daa8:	3134      	adds	r1, #52	; 0x34
 800daaa:	f7fe fce9 	bl	800c480 <vApplicationStackOverflowHook>
 800daae:	e7d0      	b.n	800da52 <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dab0:	6852      	ldr	r2, [r2, #4]
 800dab2:	6042      	str	r2, [r0, #4]
 800dab4:	e7e6      	b.n	800da84 <vTaskSwitchContext.part.5+0x6c>
 800dab6:	46c0      	nop			; (mov r8, r8)
 800dab8:	20002900 	.word	0x20002900
 800dabc:	080170b8 	.word	0x080170b8
 800dac0:	2000299c 	.word	0x2000299c

0800dac4 <xTaskGenericCreate>:
{
 800dac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac6:	464f      	mov	r7, r9
 800dac8:	4646      	mov	r6, r8
 800daca:	46d6      	mov	lr, sl
 800dacc:	b5c0      	push	{r6, r7, lr}
 800dace:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dad0:	4680      	mov	r8, r0
 800dad2:	000c      	movs	r4, r1
 800dad4:	0015      	movs	r5, r2
 800dad6:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad8:	2f00      	cmp	r7, #0
 800dada:	d100      	bne.n	800dade <xTaskGenericCreate+0x1a>
 800dadc:	e0ae      	b.n	800dc3c <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800dade:	2060      	movs	r0, #96	; 0x60
 800dae0:	f001 f808 	bl	800eaf4 <pvPortMalloc>
 800dae4:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800dae6:	d100      	bne.n	800daea <xTaskGenericCreate+0x26>
 800dae8:	e0b1      	b.n	800dc4e <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800daea:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800daec:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800daee:	002a      	movs	r2, r5
 800daf0:	0038      	movs	r0, r7
 800daf2:	21a5      	movs	r1, #165	; 0xa5
 800daf4:	f004 fc10 	bl	8012318 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800daf8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800dafa:	1f2f      	subs	r7, r5, #4
 800dafc:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dafe:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800db00:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800db02:	439f      	bics	r7, r3
 800db04:	0030      	movs	r0, r6
 800db06:	0033      	movs	r3, r6
 800db08:	3041      	adds	r0, #65	; 0x41
 800db0a:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800db0c:	7822      	ldrb	r2, [r4, #0]
 800db0e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800db10:	7822      	ldrb	r2, [r4, #0]
 800db12:	2a00      	cmp	r2, #0
 800db14:	d003      	beq.n	800db1e <xTaskGenericCreate+0x5a>
 800db16:	3301      	adds	r3, #1
 800db18:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db1a:	4298      	cmp	r0, r3
 800db1c:	d1f6      	bne.n	800db0c <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db1e:	2340      	movs	r3, #64	; 0x40
 800db20:	2200      	movs	r2, #0
 800db22:	9d08      	ldr	r5, [sp, #32]
 800db24:	54f2      	strb	r2, [r6, r3]
 800db26:	2d06      	cmp	r5, #6
 800db28:	d84f      	bhi.n	800dbca <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800db2a:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800db2c:	1d33      	adds	r3, r6, #4
 800db2e:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800db30:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800db32:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800db34:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800db36:	469a      	mov	sl, r3
 800db38:	f7ff fbc8 	bl	800d2cc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800db3c:	0030      	movs	r0, r6
 800db3e:	3018      	adds	r0, #24
 800db40:	f7ff fbc4 	bl	800d2cc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db44:	2307      	movs	r3, #7
 800db46:	1b5b      	subs	r3, r3, r5
 800db48:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800db4a:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800db4c:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800db4e:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800db50:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800db52:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db54:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800db56:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db58:	4641      	mov	r1, r8
 800db5a:	0038      	movs	r0, r7
 800db5c:	f000 ff08 	bl	800e970 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800db60:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db62:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800db64:	2b00      	cmp	r3, #0
 800db66:	d000      	beq.n	800db6a <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db68:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800db6a:	f000 ff49 	bl	800ea00 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800db6e:	4c3b      	ldr	r4, [pc, #236]	; (800dc5c <xTaskGenericCreate+0x198>)
 800db70:	69e3      	ldr	r3, [r4, #28]
 800db72:	3301      	adds	r3, #1
 800db74:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800db76:	6863      	ldr	r3, [r4, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d02f      	beq.n	800dbdc <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800db7c:	4d38      	ldr	r5, [pc, #224]	; (800dc60 <xTaskGenericCreate+0x19c>)
 800db7e:	686b      	ldr	r3, [r5, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d024      	beq.n	800dbce <xTaskGenericCreate+0x10a>
 800db84:	4f37      	ldr	r7, [pc, #220]	; (800dc64 <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800db86:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800db88:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800db8a:	3301      	adds	r3, #1
 800db8c:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db8e:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800db90:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800db92:	4293      	cmp	r3, r2
 800db94:	d817      	bhi.n	800dbc6 <xTaskGenericCreate+0x102>
 800db96:	0098      	lsls	r0, r3, #2
 800db98:	18c0      	adds	r0, r0, r3
 800db9a:	0080      	lsls	r0, r0, #2
 800db9c:	1838      	adds	r0, r7, r0
 800db9e:	4651      	mov	r1, sl
 800dba0:	f7ff fb98 	bl	800d2d4 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800dba4:	f000 ff38 	bl	800ea18 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800dba8:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800dbaa:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d004      	beq.n	800dbba <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800dbb0:	6863      	ldr	r3, [r4, #4]
 800dbb2:	9a08      	ldr	r2, [sp, #32]
 800dbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d317      	bcc.n	800dbea <xTaskGenericCreate+0x126>
}
 800dbba:	0028      	movs	r0, r5
 800dbbc:	bc1c      	pop	{r2, r3, r4}
 800dbbe:	4690      	mov	r8, r2
 800dbc0:	4699      	mov	r9, r3
 800dbc2:	46a2      	mov	sl, r4
 800dbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800dbc6:	61a3      	str	r3, [r4, #24]
 800dbc8:	e7e5      	b.n	800db96 <xTaskGenericCreate+0xd2>
 800dbca:	2506      	movs	r5, #6
 800dbcc:	e7ad      	b.n	800db2a <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800dbce:	6863      	ldr	r3, [r4, #4]
 800dbd0:	9a08      	ldr	r2, [sp, #32]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d8d5      	bhi.n	800db84 <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800dbd8:	6066      	str	r6, [r4, #4]
 800dbda:	e7d3      	b.n	800db84 <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800dbdc:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbde:	69e3      	ldr	r3, [r4, #28]
 800dbe0:	4f20      	ldr	r7, [pc, #128]	; (800dc64 <xTaskGenericCreate+0x1a0>)
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d004      	beq.n	800dbf0 <xTaskGenericCreate+0x12c>
 800dbe6:	4d1e      	ldr	r5, [pc, #120]	; (800dc60 <xTaskGenericCreate+0x19c>)
 800dbe8:	e7cd      	b.n	800db86 <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800dbea:	f000 fefd 	bl	800e9e8 <vPortYield>
 800dbee:	e7e4      	b.n	800dbba <xTaskGenericCreate+0xf6>
 800dbf0:	238c      	movs	r3, #140	; 0x8c
 800dbf2:	4698      	mov	r8, r3
 800dbf4:	003d      	movs	r5, r7
 800dbf6:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dbf8:	0028      	movs	r0, r5
 800dbfa:	3514      	adds	r5, #20
 800dbfc:	f7ff fb5a 	bl	800d2b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc00:	4545      	cmp	r5, r8
 800dc02:	d1f9      	bne.n	800dbf8 <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800dc04:	2320      	movs	r3, #32
 800dc06:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800dc08:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800dc0a:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800dc0c:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f7ff fb50 	bl	800d2b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc14:	0028      	movs	r0, r5
 800dc16:	f7ff fb4d 	bl	800d2b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc1a:	0020      	movs	r0, r4
 800dc1c:	3048      	adds	r0, #72	; 0x48
 800dc1e:	f7ff fb49 	bl	800d2b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dc22:	0020      	movs	r0, r4
 800dc24:	305c      	adds	r0, #92	; 0x5c
 800dc26:	f7ff fb45 	bl	800d2b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dc2a:	0020      	movs	r0, r4
 800dc2c:	3070      	adds	r0, #112	; 0x70
 800dc2e:	f7ff fb41 	bl	800d2b4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc32:	4643      	mov	r3, r8
 800dc34:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc36:	60e5      	str	r5, [r4, #12]
 800dc38:	4d09      	ldr	r5, [pc, #36]	; (800dc60 <xTaskGenericCreate+0x19c>)
 800dc3a:	e7a4      	b.n	800db86 <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc3c:	0090      	lsls	r0, r2, #2
 800dc3e:	f000 ff59 	bl	800eaf4 <pvPortMalloc>
 800dc42:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800dc44:	d000      	beq.n	800dc48 <xTaskGenericCreate+0x184>
 800dc46:	e74a      	b.n	800dade <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc48:	2501      	movs	r5, #1
 800dc4a:	426d      	negs	r5, r5
 800dc4c:	e7b5      	b.n	800dbba <xTaskGenericCreate+0xf6>
 800dc4e:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800dc50:	0038      	movs	r0, r7
 800dc52:	f000 ffc5 	bl	800ebe0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc56:	426d      	negs	r5, r5
 800dc58:	e7af      	b.n	800dbba <xTaskGenericCreate+0xf6>
 800dc5a:	46c0      	nop			; (mov r8, r8)
 800dc5c:	20002900 	.word	0x20002900
 800dc60:	20002980 	.word	0x20002980
 800dc64:	2000299c 	.word	0x2000299c

0800dc68 <uxTaskPriorityGet>:
	{
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800dc6c:	f000 fec8 	bl	800ea00 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	d101      	bne.n	800dc78 <uxTaskPriorityGet+0x10>
 800dc74:	4b03      	ldr	r3, [pc, #12]	; (800dc84 <uxTaskPriorityGet+0x1c>)
 800dc76:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800dc78:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800dc7a:	f000 fecd 	bl	800ea18 <vPortExitCritical>
	}
 800dc7e:	0020      	movs	r0, r4
 800dc80:	bd10      	pop	{r4, pc}
 800dc82:	46c0      	nop			; (mov r8, r8)
 800dc84:	20002900 	.word	0x20002900

0800dc88 <vTaskPrioritySet>:
	{
 800dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8a:	46c6      	mov	lr, r8
 800dc8c:	0004      	movs	r4, r0
 800dc8e:	b500      	push	{lr}
 800dc90:	000d      	movs	r5, r1
 800dc92:	2906      	cmp	r1, #6
 800dc94:	d900      	bls.n	800dc98 <vTaskPrioritySet+0x10>
 800dc96:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800dc98:	f000 feb2 	bl	800ea00 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc9c:	2c00      	cmp	r4, #0
 800dc9e:	d02b      	beq.n	800dcf8 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dca0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800dca2:	42aa      	cmp	r2, r5
 800dca4:	d01a      	beq.n	800dcdc <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800dca6:	4f21      	ldr	r7, [pc, #132]	; (800dd2c <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800dca8:	d31d      	bcc.n	800dce6 <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800dcaa:	687e      	ldr	r6, [r7, #4]
 800dcac:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800dcae:	4273      	negs	r3, r6
 800dcb0:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dcb4:	428a      	cmp	r2, r1
 800dcb6:	d100      	bne.n	800dcba <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800dcb8:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcba:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800dcbc:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	db02      	blt.n	800dcc8 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcc2:	2307      	movs	r3, #7
 800dcc4:	1b5d      	subs	r5, r3, r5
 800dcc6:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800dcc8:	008b      	lsls	r3, r1, #2
 800dcca:	185b      	adds	r3, r3, r1
 800dccc:	4d18      	ldr	r5, [pc, #96]	; (800dd30 <vTaskPrioritySet+0xa8>)
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	6962      	ldr	r2, [r4, #20]
 800dcd2:	18eb      	adds	r3, r5, r3
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d015      	beq.n	800dd04 <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800dcd8:	2e01      	cmp	r6, #1
 800dcda:	d010      	beq.n	800dcfe <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800dcdc:	f000 fe9c 	bl	800ea18 <vPortExitCritical>
	}
 800dce0:	bc04      	pop	{r2}
 800dce2:	4690      	mov	r8, r2
 800dce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	42a3      	cmp	r3, r4
 800dcea:	d01d      	beq.n	800dd28 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dcec:	2600      	movs	r6, #0
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf2:	429d      	cmp	r5, r3
 800dcf4:	4176      	adcs	r6, r6
 800dcf6:	e7dc      	b.n	800dcb2 <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <vTaskPrioritySet+0xa4>)
 800dcfa:	685c      	ldr	r4, [r3, #4]
 800dcfc:	e7d0      	b.n	800dca0 <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800dcfe:	f000 fe73 	bl	800e9e8 <vPortYield>
 800dd02:	e7eb      	b.n	800dcdc <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dd04:	1d23      	adds	r3, r4, #4
 800dd06:	0018      	movs	r0, r3
 800dd08:	4698      	mov	r8, r3
 800dd0a:	f7ff fb07 	bl	800d31c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd10:	69ba      	ldr	r2, [r7, #24]
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d900      	bls.n	800dd18 <vTaskPrioritySet+0x90>
 800dd16:	61bb      	str	r3, [r7, #24]
 800dd18:	0098      	lsls	r0, r3, #2
 800dd1a:	18c0      	adds	r0, r0, r3
 800dd1c:	0080      	lsls	r0, r0, #2
 800dd1e:	1828      	adds	r0, r5, r0
 800dd20:	4641      	mov	r1, r8
 800dd22:	f7ff fad7 	bl	800d2d4 <vListInsertEnd>
 800dd26:	e7d7      	b.n	800dcd8 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800dd28:	2600      	movs	r6, #0
 800dd2a:	e7c2      	b.n	800dcb2 <vTaskPrioritySet+0x2a>
 800dd2c:	20002900 	.word	0x20002900
 800dd30:	2000299c 	.word	0x2000299c

0800dd34 <vTaskStartScheduler>:
{
 800dd34:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800dd36:	2400      	movs	r4, #0
{
 800dd38:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800dd3a:	9403      	str	r4, [sp, #12]
 800dd3c:	9402      	str	r4, [sp, #8]
 800dd3e:	9401      	str	r4, [sp, #4]
 800dd40:	9400      	str	r4, [sp, #0]
 800dd42:	2300      	movs	r3, #0
 800dd44:	2296      	movs	r2, #150	; 0x96
 800dd46:	490b      	ldr	r1, [pc, #44]	; (800dd74 <vTaskStartScheduler+0x40>)
 800dd48:	480b      	ldr	r0, [pc, #44]	; (800dd78 <vTaskStartScheduler+0x44>)
 800dd4a:	f7ff febb 	bl	800dac4 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800dd4e:	2801      	cmp	r0, #1
 800dd50:	d001      	beq.n	800dd56 <vTaskStartScheduler+0x22>
}
 800dd52:	b004      	add	sp, #16
 800dd54:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800dd56:	f000 fc83 	bl	800e660 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800dd5a:	2801      	cmp	r0, #1
 800dd5c:	d1f9      	bne.n	800dd52 <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800dd5e:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800dd60:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <vTaskStartScheduler+0x48>)
 800dd62:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800dd64:	4b06      	ldr	r3, [pc, #24]	; (800dd80 <vTaskStartScheduler+0x4c>)
 800dd66:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dd68:	f7f9 fe68 	bl	8007a3c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800dd6c:	f000 fe12 	bl	800e994 <xPortStartScheduler>
}
 800dd70:	e7ef      	b.n	800dd52 <vTaskStartScheduler+0x1e>
 800dd72:	46c0      	nop			; (mov r8, r8)
 800dd74:	08019910 	.word	0x08019910
 800dd78:	0800dfb5 	.word	0x0800dfb5
 800dd7c:	20002980 	.word	0x20002980
 800dd80:	20002900 	.word	0x20002900

0800dd84 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800dd84:	4a02      	ldr	r2, [pc, #8]	; (800dd90 <vTaskSuspendAll+0xc>)
 800dd86:	6913      	ldr	r3, [r2, #16]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	6113      	str	r3, [r2, #16]
}
 800dd8c:	4770      	bx	lr
 800dd8e:	46c0      	nop			; (mov r8, r8)
 800dd90:	20002980 	.word	0x20002980

0800dd94 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800dd94:	4b01      	ldr	r3, [pc, #4]	; (800dd9c <xTaskGetTickCount+0x8>)
 800dd96:	6898      	ldr	r0, [r3, #8]
}
 800dd98:	4770      	bx	lr
 800dd9a:	46c0      	nop			; (mov r8, r8)
 800dd9c:	20002900 	.word	0x20002900

0800dda0 <xTaskGetTickCountFromISR>:
 800dda0:	4b01      	ldr	r3, [pc, #4]	; (800dda8 <xTaskGetTickCountFromISR+0x8>)
 800dda2:	6898      	ldr	r0, [r3, #8]
 800dda4:	4770      	bx	lr
 800dda6:	46c0      	nop			; (mov r8, r8)
 800dda8:	20002900 	.word	0x20002900

0800ddac <xTaskIncrementTick>:
{
 800ddac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddae:	46d6      	mov	lr, sl
 800ddb0:	464f      	mov	r7, r9
 800ddb2:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb4:	4b3e      	ldr	r3, [pc, #248]	; (800deb0 <xTaskIncrementTick+0x104>)
{
 800ddb6:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	d11b      	bne.n	800ddf6 <xTaskIncrementTick+0x4a>
		++xTickCount;
 800ddbe:	4c3d      	ldr	r4, [pc, #244]	; (800deb4 <xTaskIncrementTick+0x108>)
 800ddc0:	68a2      	ldr	r2, [r4, #8]
 800ddc2:	3201      	adds	r2, #1
 800ddc4:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800ddc6:	68a2      	ldr	r2, [r4, #8]
 800ddc8:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800ddca:	2a00      	cmp	r2, #0
 800ddcc:	d022      	beq.n	800de14 <xTaskIncrementTick+0x68>
 800ddce:	4b3a      	ldr	r3, [pc, #232]	; (800deb8 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ddd0:	2700      	movs	r7, #0
 800ddd2:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ddd4:	4653      	mov	r3, sl
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4543      	cmp	r3, r8
 800ddda:	d931      	bls.n	800de40 <xTaskIncrementTick+0x94>
 800dddc:	4b37      	ldr	r3, [pc, #220]	; (800debc <xTaskIncrementTick+0x110>)
 800ddde:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dde0:	6863      	ldr	r3, [r4, #4]
 800dde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde4:	0093      	lsls	r3, r2, #2
 800dde6:	189b      	adds	r3, r3, r2
 800dde8:	464a      	mov	r2, r9
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	58d3      	ldr	r3, [r2, r3]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d906      	bls.n	800de00 <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800ddf2:	2701      	movs	r7, #1
 800ddf4:	e004      	b.n	800de00 <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800ddf6:	2700      	movs	r7, #0
		++uxPendedTicks;
 800ddf8:	699a      	ldr	r2, [r3, #24]
 800ddfa:	4c2e      	ldr	r4, [pc, #184]	; (800deb4 <xTaskIncrementTick+0x108>)
 800ddfc:	3201      	adds	r2, #1
 800ddfe:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800de00:	6923      	ldr	r3, [r4, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d000      	beq.n	800de08 <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800de06:	2701      	movs	r7, #1
}
 800de08:	0038      	movs	r0, r7
 800de0a:	bc1c      	pop	{r2, r3, r4}
 800de0c:	4690      	mov	r8, r2
 800de0e:	4699      	mov	r9, r3
 800de10:	46a2      	mov	sl, r4
 800de12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800de14:	6822      	ldr	r2, [r4, #0]
 800de16:	68e1      	ldr	r1, [r4, #12]
 800de18:	6021      	str	r1, [r4, #0]
 800de1a:	60e2      	str	r2, [r4, #12]
 800de1c:	695a      	ldr	r2, [r3, #20]
 800de1e:	3201      	adds	r2, #1
 800de20:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d13b      	bne.n	800dea2 <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800de2a:	4b23      	ldr	r3, [pc, #140]	; (800deb8 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800de2c:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800de2e:	469a      	mov	sl, r3
 800de30:	2301      	movs	r3, #1
 800de32:	4652      	mov	r2, sl
 800de34:	425b      	negs	r3, r3
 800de36:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800de38:	4653      	mov	r3, sl
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4543      	cmp	r3, r8
 800de3e:	d8cd      	bhi.n	800dddc <xTaskIncrementTick+0x30>
 800de40:	4b1e      	ldr	r3, [pc, #120]	; (800debc <xTaskIncrementTick+0x110>)
 800de42:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d026      	beq.n	800de9a <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800de4c:	6823      	ldr	r3, [r4, #0]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800de52:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800de54:	4598      	cmp	r8, r3
 800de56:	d327      	bcc.n	800dea8 <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800de58:	1d2e      	adds	r6, r5, #4
 800de5a:	0030      	movs	r0, r6
 800de5c:	f7ff fa5e 	bl	800d31c <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800de62:	2b00      	cmp	r3, #0
 800de64:	d003      	beq.n	800de6e <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de66:	0028      	movs	r0, r5
 800de68:	3018      	adds	r0, #24
 800de6a:	f7ff fa57 	bl	800d31c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800de6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800de70:	69a2      	ldr	r2, [r4, #24]
 800de72:	4293      	cmp	r3, r2
 800de74:	d900      	bls.n	800de78 <xTaskIncrementTick+0xcc>
 800de76:	61a3      	str	r3, [r4, #24]
 800de78:	0098      	lsls	r0, r3, #2
 800de7a:	18c0      	adds	r0, r0, r3
 800de7c:	0080      	lsls	r0, r0, #2
 800de7e:	4448      	add	r0, r9
 800de80:	0031      	movs	r1, r6
 800de82:	f7ff fa27 	bl	800d2d4 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de86:	6863      	ldr	r3, [r4, #4]
 800de88:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d3d9      	bcc.n	800de44 <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de90:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800de92:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1d8      	bne.n	800de4c <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800de9a:	4652      	mov	r2, sl
 800de9c:	3b01      	subs	r3, #1
 800de9e:	6013      	str	r3, [r2, #0]
						break;
 800dea0:	e79e      	b.n	800dde0 <xTaskIncrementTick+0x34>
 800dea2:	f7ff fd8f 	bl	800d9c4 <prvResetNextTaskUnblockTime.part.2>
 800dea6:	e792      	b.n	800ddce <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800dea8:	4652      	mov	r2, sl
 800deaa:	6013      	str	r3, [r2, #0]
							break;
 800deac:	e798      	b.n	800dde0 <xTaskIncrementTick+0x34>
 800deae:	46c0      	nop			; (mov r8, r8)
 800deb0:	20002980 	.word	0x20002980
 800deb4:	20002900 	.word	0x20002900
 800deb8:	200000c4 	.word	0x200000c4
 800debc:	2000299c 	.word	0x2000299c

0800dec0 <xTaskResumeAll>:
{
 800dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec2:	46ce      	mov	lr, r9
 800dec4:	4647      	mov	r7, r8
 800dec6:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800dec8:	f000 fd9a 	bl	800ea00 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800decc:	4f28      	ldr	r7, [pc, #160]	; (800df70 <xTaskResumeAll+0xb0>)
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	3b01      	subs	r3, #1
 800ded2:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d13b      	bne.n	800df52 <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800deda:	4c26      	ldr	r4, [pc, #152]	; (800df74 <xTaskResumeAll+0xb4>)
 800dedc:	69e3      	ldr	r3, [r4, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d037      	beq.n	800df52 <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800dee2:	4b25      	ldr	r3, [pc, #148]	; (800df78 <xTaskResumeAll+0xb8>)
 800dee4:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800dee6:	2301      	movs	r3, #1
 800dee8:	4699      	mov	r9, r3
 800deea:	e01a      	b.n	800df22 <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800deec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800deee:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800def0:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800def2:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800def4:	3018      	adds	r0, #24
 800def6:	f7ff fa11 	bl	800d31c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800defa:	0030      	movs	r0, r6
 800defc:	f7ff fa0e 	bl	800d31c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800df02:	69a2      	ldr	r2, [r4, #24]
 800df04:	4293      	cmp	r3, r2
 800df06:	d900      	bls.n	800df0a <xTaskResumeAll+0x4a>
 800df08:	61a3      	str	r3, [r4, #24]
 800df0a:	0098      	lsls	r0, r3, #2
 800df0c:	18c0      	adds	r0, r0, r3
 800df0e:	0080      	lsls	r0, r0, #2
 800df10:	4440      	add	r0, r8
 800df12:	0031      	movs	r1, r6
 800df14:	f7ff f9de 	bl	800d2d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df18:	6863      	ldr	r3, [r4, #4]
 800df1a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	429a      	cmp	r2, r3
 800df20:	d21f      	bcs.n	800df62 <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e1      	bne.n	800deec <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00e      	beq.n	800df4c <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800df34:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800df36:	f7ff ff39 	bl	800ddac <xTaskIncrementTick>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d000      	beq.n	800df40 <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800df3e:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	3b01      	subs	r3, #1
 800df44:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1f4      	bne.n	800df36 <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800df4c:	6923      	ldr	r3, [r4, #16]
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d00a      	beq.n	800df68 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800df52:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800df54:	f000 fd60 	bl	800ea18 <vPortExitCritical>
}
 800df58:	0020      	movs	r0, r4
 800df5a:	bc0c      	pop	{r2, r3}
 800df5c:	4690      	mov	r8, r2
 800df5e:	4699      	mov	r9, r3
 800df60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800df62:	464b      	mov	r3, r9
 800df64:	6123      	str	r3, [r4, #16]
 800df66:	e7dc      	b.n	800df22 <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800df68:	f000 fd3e 	bl	800e9e8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800df6c:	2401      	movs	r4, #1
 800df6e:	e7f1      	b.n	800df54 <xTaskResumeAll+0x94>
 800df70:	20002980 	.word	0x20002980
 800df74:	20002900 	.word	0x20002900
 800df78:	2000299c 	.word	0x2000299c

0800df7c <vTaskDelay>:
	{
 800df7c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df7e:	2800      	cmp	r0, #0
 800df80:	d011      	beq.n	800dfa6 <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800df82:	4a0a      	ldr	r2, [pc, #40]	; (800dfac <vTaskDelay+0x30>)
 800df84:	6913      	ldr	r3, [r2, #16]
 800df86:	3301      	adds	r3, #1
 800df88:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800df8a:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <vTaskDelay+0x34>)
 800df8c:	689c      	ldr	r4, [r3, #8]
 800df8e:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800df90:	6858      	ldr	r0, [r3, #4]
 800df92:	3004      	adds	r0, #4
 800df94:	f7ff f9c2 	bl	800d31c <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800df98:	0020      	movs	r0, r4
 800df9a:	f7ff fd1f 	bl	800d9dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800df9e:	f7ff ff8f 	bl	800dec0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d101      	bne.n	800dfaa <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800dfa6:	f000 fd1f 	bl	800e9e8 <vPortYield>
	}
 800dfaa:	bd10      	pop	{r4, pc}
 800dfac:	20002980 	.word	0x20002980
 800dfb0:	20002900 	.word	0x20002900

0800dfb4 <prvIdleTask>:
{
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	4e15      	ldr	r6, [pc, #84]	; (800e00c <prvIdleTask+0x58>)
 800dfb8:	4c15      	ldr	r4, [pc, #84]	; (800e010 <prvIdleTask+0x5c>)
 800dfba:	4f16      	ldr	r7, [pc, #88]	; (800e014 <prvIdleTask+0x60>)
 800dfbc:	e007      	b.n	800dfce <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800dfbe:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800dfc0:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800dfc6:	f7ff ff7b 	bl	800dec0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800dfca:	2d00      	cmp	r5, #0
 800dfcc:	d108      	bne.n	800dfe0 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800dfce:	68e3      	ldr	r3, [r4, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1f4      	bne.n	800dfbe <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d9f9      	bls.n	800dfce <prvIdleTask+0x1a>
				taskYIELD();
 800dfda:	f000 fd05 	bl	800e9e8 <vPortYield>
 800dfde:	e7f6      	b.n	800dfce <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800dfe0:	f000 fd0e 	bl	800ea00 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dfe4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800dfe6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dfe8:	1d28      	adds	r0, r5, #4
 800dfea:	f7ff f997 	bl	800d31c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800dfee:	69f3      	ldr	r3, [r6, #28]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800dff4:	68e3      	ldr	r3, [r4, #12]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800dffa:	f000 fd0d 	bl	800ea18 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800dffe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e000:	f000 fdee 	bl	800ebe0 <vPortFree>
		vPortFree( pxTCB );
 800e004:	0028      	movs	r0, r5
 800e006:	f000 fdeb 	bl	800ebe0 <vPortFree>
 800e00a:	e7e0      	b.n	800dfce <prvIdleTask+0x1a>
 800e00c:	20002900 	.word	0x20002900
 800e010:	20002980 	.word	0x20002980
 800e014:	2000299c 	.word	0x2000299c

0800e018 <uxTaskGetSystemState>:
	{
 800e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01a:	4647      	mov	r7, r8
 800e01c:	46ce      	mov	lr, r9
 800e01e:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e020:	4a33      	ldr	r2, [pc, #204]	; (800e0f0 <uxTaskGetSystemState+0xd8>)
	{
 800e022:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e024:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e026:	4f33      	ldr	r7, [pc, #204]	; (800e0f4 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e028:	3301      	adds	r3, #1
 800e02a:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e02c:	69fb      	ldr	r3, [r7, #28]
	{
 800e02e:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e030:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e032:	428b      	cmp	r3, r1
 800e034:	d82c      	bhi.n	800e090 <uxTaskGetSystemState+0x78>
 800e036:	238c      	movs	r3, #140	; 0x8c
 800e038:	425b      	negs	r3, r3
 800e03a:	4699      	mov	r9, r3
 800e03c:	4c2e      	ldr	r4, [pc, #184]	; (800e0f8 <uxTaskGetSystemState+0xe0>)
 800e03e:	2300      	movs	r3, #0
 800e040:	44a1      	add	r9, r4
 800e042:	e002      	b.n	800e04a <uxTaskGetSystemState+0x32>
 800e044:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e046:	454c      	cmp	r4, r9
 800e048:	d00d      	beq.n	800e066 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e04a:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e04c:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e04e:	2a00      	cmp	r2, #0
 800e050:	d0f8      	beq.n	800e044 <uxTaskGetSystemState+0x2c>
 800e052:	0021      	movs	r1, r4
 800e054:	2201      	movs	r2, #1
 800e056:	f7ff fc61 	bl	800d91c <prvListTaskWithinSingleList.part.1>
 800e05a:	182d      	adds	r5, r5, r0
 800e05c:	016b      	lsls	r3, r5, #5
 800e05e:	3c14      	subs	r4, #20
 800e060:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e062:	454c      	cmp	r4, r9
 800e064:	d1f1      	bne.n	800e04a <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e066:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e068:	680b      	ldr	r3, [r1, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d121      	bne.n	800e0b2 <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e06e:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e070:	680b      	ldr	r3, [r1, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d127      	bne.n	800e0c6 <uxTaskGetSystemState+0xae>
 800e076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d12d      	bne.n	800e0d8 <uxTaskGetSystemState+0xc0>
 800e07c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10d      	bne.n	800e09e <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e082:	4643      	mov	r3, r8
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e088:	f7f9 fce8 	bl	8007a5c <ulMainGetRunTimeCounterValue>
 800e08c:	4643      	mov	r3, r8
 800e08e:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e090:	f7ff ff16 	bl	800dec0 <xTaskResumeAll>
	}
 800e094:	0028      	movs	r0, r5
 800e096:	bc0c      	pop	{r2, r3}
 800e098:	4690      	mov	r8, r2
 800e09a:	4699      	mov	r9, r3
 800e09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e09e:	0039      	movs	r1, r7
 800e0a0:	2203      	movs	r2, #3
 800e0a2:	3170      	adds	r1, #112	; 0x70
 800e0a4:	f7ff fc3a 	bl	800d91c <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e0a8:	4643      	mov	r3, r8
 800e0aa:	182d      	adds	r5, r5, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1eb      	bne.n	800e088 <uxTaskGetSystemState+0x70>
 800e0b0:	e7ee      	b.n	800e090 <uxTaskGetSystemState+0x78>
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	f7ff fc32 	bl	800d91c <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e0b8:	68f9      	ldr	r1, [r7, #12]
 800e0ba:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e0bc:	680b      	ldr	r3, [r1, #0]
 800e0be:	0168      	lsls	r0, r5, #5
 800e0c0:	1830      	adds	r0, r6, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0d7      	beq.n	800e076 <uxTaskGetSystemState+0x5e>
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f7ff fc28 	bl	800d91c <prvListTaskWithinSingleList.part.1>
 800e0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0ce:	182d      	adds	r5, r5, r0
 800e0d0:	0168      	lsls	r0, r5, #5
 800e0d2:	1830      	adds	r0, r6, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d0d1      	beq.n	800e07c <uxTaskGetSystemState+0x64>
 800e0d8:	0039      	movs	r1, r7
 800e0da:	2204      	movs	r2, #4
 800e0dc:	315c      	adds	r1, #92	; 0x5c
 800e0de:	f7ff fc1d 	bl	800d91c <prvListTaskWithinSingleList.part.1>
 800e0e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0e4:	182d      	adds	r5, r5, r0
 800e0e6:	0168      	lsls	r0, r5, #5
 800e0e8:	1830      	adds	r0, r6, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d0c9      	beq.n	800e082 <uxTaskGetSystemState+0x6a>
 800e0ee:	e7d6      	b.n	800e09e <uxTaskGetSystemState+0x86>
 800e0f0:	20002980 	.word	0x20002980
 800e0f4:	20002900 	.word	0x20002900
 800e0f8:	20002a14 	.word	0x20002a14

0800e0fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0fc:	4b05      	ldr	r3, [pc, #20]	; (800e114 <vTaskSwitchContext+0x18>)
{
 800e0fe:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e100:	691b      	ldr	r3, [r3, #16]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d003      	beq.n	800e10e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e106:	2201      	movs	r2, #1
 800e108:	4b03      	ldr	r3, [pc, #12]	; (800e118 <vTaskSwitchContext+0x1c>)
 800e10a:	611a      	str	r2, [r3, #16]
}
 800e10c:	bd10      	pop	{r4, pc}
 800e10e:	f7ff fc83 	bl	800da18 <vTaskSwitchContext.part.5>
 800e112:	e7fb      	b.n	800e10c <vTaskSwitchContext+0x10>
 800e114:	20002980 	.word	0x20002980
 800e118:	20002900 	.word	0x20002900

0800e11c <vTaskPlaceOnEventList>:
{
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e120:	4c0b      	ldr	r4, [pc, #44]	; (800e150 <vTaskPlaceOnEventList+0x34>)
 800e122:	6861      	ldr	r1, [r4, #4]
 800e124:	3118      	adds	r1, #24
 800e126:	f7ff f8e1 	bl	800d2ec <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e12a:	6860      	ldr	r0, [r4, #4]
 800e12c:	3004      	adds	r0, #4
 800e12e:	f7ff f8f5 	bl	800d31c <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e132:	1c6b      	adds	r3, r5, #1
 800e134:	d004      	beq.n	800e140 <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800e136:	68a0      	ldr	r0, [r4, #8]
 800e138:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e13a:	f7ff fc4f 	bl	800d9dc <prvAddCurrentTaskToDelayedList>
}
 800e13e:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e140:	0020      	movs	r0, r4
 800e142:	6861      	ldr	r1, [r4, #4]
 800e144:	3070      	adds	r0, #112	; 0x70
 800e146:	3104      	adds	r1, #4
 800e148:	f7ff f8c4 	bl	800d2d4 <vListInsertEnd>
 800e14c:	e7f7      	b.n	800e13e <vTaskPlaceOnEventList+0x22>
 800e14e:	46c0      	nop			; (mov r8, r8)
 800e150:	20002900 	.word	0x20002900

0800e154 <vTaskPlaceOnEventListRestricted>:
	{
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e158:	4c06      	ldr	r4, [pc, #24]	; (800e174 <vTaskPlaceOnEventListRestricted+0x20>)
 800e15a:	6861      	ldr	r1, [r4, #4]
 800e15c:	3118      	adds	r1, #24
 800e15e:	f7ff f8b9 	bl	800d2d4 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e162:	6860      	ldr	r0, [r4, #4]
 800e164:	3004      	adds	r0, #4
 800e166:	f7ff f8d9 	bl	800d31c <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e16a:	68a0      	ldr	r0, [r4, #8]
 800e16c:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e16e:	f7ff fc35 	bl	800d9dc <prvAddCurrentTaskToDelayedList>
	}
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	20002900 	.word	0x20002900

0800e178 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e178:	68c3      	ldr	r3, [r0, #12]
{
 800e17a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e17c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e17e:	0026      	movs	r6, r4
 800e180:	3618      	adds	r6, #24
 800e182:	0030      	movs	r0, r6
 800e184:	f7ff f8ca 	bl	800d31c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e188:	4b13      	ldr	r3, [pc, #76]	; (800e1d8 <xTaskRemoveFromEventList+0x60>)
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d11a      	bne.n	800e1c6 <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e190:	1d26      	adds	r6, r4, #4
 800e192:	0030      	movs	r0, r6
 800e194:	f7ff f8c2 	bl	800d31c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e198:	4d10      	ldr	r5, [pc, #64]	; (800e1dc <xTaskRemoveFromEventList+0x64>)
 800e19a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e19c:	69aa      	ldr	r2, [r5, #24]
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d818      	bhi.n	800e1d4 <xTaskRemoveFromEventList+0x5c>
 800e1a2:	0098      	lsls	r0, r3, #2
 800e1a4:	18c0      	adds	r0, r0, r3
 800e1a6:	4b0e      	ldr	r3, [pc, #56]	; (800e1e0 <xTaskRemoveFromEventList+0x68>)
 800e1a8:	0080      	lsls	r0, r0, #2
 800e1aa:	18c0      	adds	r0, r0, r3
 800e1ac:	0031      	movs	r1, r6
 800e1ae:	f7ff f891 	bl	800d2d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1b2:	686b      	ldr	r3, [r5, #4]
 800e1b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e1b8:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d902      	bls.n	800e1c4 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800e1be:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e1c0:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e1c2:	612b      	str	r3, [r5, #16]
}
 800e1c4:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1c6:	4d05      	ldr	r5, [pc, #20]	; (800e1dc <xTaskRemoveFromEventList+0x64>)
 800e1c8:	0031      	movs	r1, r6
 800e1ca:	0028      	movs	r0, r5
 800e1cc:	3048      	adds	r0, #72	; 0x48
 800e1ce:	f7ff f881 	bl	800d2d4 <vListInsertEnd>
 800e1d2:	e7ee      	b.n	800e1b2 <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1d4:	61ab      	str	r3, [r5, #24]
 800e1d6:	e7e4      	b.n	800e1a2 <xTaskRemoveFromEventList+0x2a>
 800e1d8:	20002980 	.word	0x20002980
 800e1dc:	20002900 	.word	0x20002900
 800e1e0:	2000299c 	.word	0x2000299c

0800e1e4 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1e4:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <vTaskSetTimeOutState+0x10>)
 800e1e6:	695b      	ldr	r3, [r3, #20]
 800e1e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1ea:	4b03      	ldr	r3, [pc, #12]	; (800e1f8 <vTaskSetTimeOutState+0x14>)
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	6043      	str	r3, [r0, #4]
}
 800e1f0:	4770      	bx	lr
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	20002980 	.word	0x20002980
 800e1f8:	20002900 	.word	0x20002900

0800e1fc <xTaskCheckForTimeOut>:
{
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	000e      	movs	r6, r1
 800e200:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e202:	f000 fbfd 	bl	800ea00 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e206:	4911      	ldr	r1, [pc, #68]	; (800e24c <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800e208:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800e20a:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800e20c:	1c53      	adds	r3, r2, #1
 800e20e:	d01a      	beq.n	800e246 <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e210:	4b0f      	ldr	r3, [pc, #60]	; (800e250 <xTaskCheckForTimeOut+0x54>)
 800e212:	6827      	ldr	r7, [r4, #0]
 800e214:	695d      	ldr	r5, [r3, #20]
 800e216:	469c      	mov	ip, r3
 800e218:	6863      	ldr	r3, [r4, #4]
 800e21a:	42af      	cmp	r7, r5
 800e21c:	d002      	beq.n	800e224 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800e21e:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e220:	4298      	cmp	r0, r3
 800e222:	d20c      	bcs.n	800e23e <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e224:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800e226:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e228:	42ba      	cmp	r2, r7
 800e22a:	d908      	bls.n	800e23e <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800e22c:	1a1b      	subs	r3, r3, r0
 800e22e:	189b      	adds	r3, r3, r2
 800e230:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e232:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800e234:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e23a:	688b      	ldr	r3, [r1, #8]
 800e23c:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800e23e:	f000 fbeb 	bl	800ea18 <vPortExitCritical>
}
 800e242:	0028      	movs	r0, r5
 800e244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800e246:	2500      	movs	r5, #0
 800e248:	e7f9      	b.n	800e23e <xTaskCheckForTimeOut+0x42>
 800e24a:	46c0      	nop			; (mov r8, r8)
 800e24c:	20002900 	.word	0x20002900
 800e250:	20002980 	.word	0x20002980

0800e254 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e254:	2201      	movs	r2, #1
 800e256:	4b01      	ldr	r3, [pc, #4]	; (800e25c <vTaskMissedYield+0x8>)
 800e258:	611a      	str	r2, [r3, #16]
}
 800e25a:	4770      	bx	lr
 800e25c:	20002900 	.word	0x20002900

0800e260 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e260:	4b04      	ldr	r3, [pc, #16]	; (800e274 <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e262:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800e264:	685a      	ldr	r2, [r3, #4]
 800e266:	2a00      	cmp	r2, #0
 800e268:	d003      	beq.n	800e272 <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e26a:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800e26c:	4243      	negs	r3, r0
 800e26e:	4158      	adcs	r0, r3
 800e270:	0040      	lsls	r0, r0, #1
	}
 800e272:	4770      	bx	lr
 800e274:	20002980 	.word	0x20002980

0800e278 <vTaskPriorityInherit>:
	{
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e27c:	d018      	beq.n	800e2b0 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e27e:	4d16      	ldr	r5, [pc, #88]	; (800e2d8 <vTaskPriorityInherit+0x60>)
 800e280:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e282:	686b      	ldr	r3, [r5, #4]
 800e284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e286:	429a      	cmp	r2, r3
 800e288:	d212      	bcs.n	800e2b0 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e28a:	6983      	ldr	r3, [r0, #24]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	db04      	blt.n	800e29a <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e290:	686b      	ldr	r3, [r5, #4]
 800e292:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e294:	2307      	movs	r3, #7
 800e296:	1a5b      	subs	r3, r3, r1
 800e298:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e29a:	0093      	lsls	r3, r2, #2
 800e29c:	189b      	adds	r3, r3, r2
 800e29e:	4e0f      	ldr	r6, [pc, #60]	; (800e2dc <vTaskPriorityInherit+0x64>)
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	6962      	ldr	r2, [r4, #20]
 800e2a4:	18f3      	adds	r3, r6, r3
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d003      	beq.n	800e2b2 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2aa:	686b      	ldr	r3, [r5, #4]
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800e2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2b2:	1d27      	adds	r7, r4, #4
 800e2b4:	0038      	movs	r0, r7
 800e2b6:	f7ff f831 	bl	800d31c <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2ba:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800e2bc:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d900      	bls.n	800e2c8 <vTaskPriorityInherit+0x50>
 800e2c6:	61ab      	str	r3, [r5, #24]
 800e2c8:	0098      	lsls	r0, r3, #2
 800e2ca:	18c0      	adds	r0, r0, r3
 800e2cc:	0080      	lsls	r0, r0, #2
 800e2ce:	1830      	adds	r0, r6, r0
 800e2d0:	0039      	movs	r1, r7
 800e2d2:	f7fe ffff 	bl	800d2d4 <vListInsertEnd>
	}
 800e2d6:	e7eb      	b.n	800e2b0 <vTaskPriorityInherit+0x38>
 800e2d8:	20002900 	.word	0x20002900
 800e2dc:	2000299c 	.word	0x2000299c

0800e2e0 <xTaskPriorityDisinherit>:
	{
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e2e4:	d008      	beq.n	800e2f8 <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800e2e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e2ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2f0:	428a      	cmp	r2, r1
 800e2f2:	d001      	beq.n	800e2f8 <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800e2f8:	2000      	movs	r0, #0
	}
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2fc:	1d05      	adds	r5, r0, #4
 800e2fe:	0028      	movs	r0, r5
 800e300:	f7ff f80c 	bl	800d31c <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e304:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e306:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e308:	1ad2      	subs	r2, r2, r3
 800e30a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e30c:	4a07      	ldr	r2, [pc, #28]	; (800e32c <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e30e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e310:	6991      	ldr	r1, [r2, #24]
 800e312:	428b      	cmp	r3, r1
 800e314:	d900      	bls.n	800e318 <xTaskPriorityDisinherit+0x38>
 800e316:	6193      	str	r3, [r2, #24]
 800e318:	0098      	lsls	r0, r3, #2
 800e31a:	18c0      	adds	r0, r0, r3
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <xTaskPriorityDisinherit+0x50>)
 800e31e:	0080      	lsls	r0, r0, #2
 800e320:	18c0      	adds	r0, r0, r3
 800e322:	0029      	movs	r1, r5
 800e324:	f7fe ffd6 	bl	800d2d4 <vListInsertEnd>
					xReturn = pdTRUE;
 800e328:	2001      	movs	r0, #1
		return xReturn;
 800e32a:	e7e6      	b.n	800e2fa <xTaskPriorityDisinherit+0x1a>
 800e32c:	20002900 	.word	0x20002900
 800e330:	2000299c 	.word	0x2000299c

0800e334 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e336:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e338:	2600      	movs	r6, #0
	{
 800e33a:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e33c:	4b27      	ldr	r3, [pc, #156]	; (800e3dc <vTaskList+0xa8>)
	{
 800e33e:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e340:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e342:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e344:	9202      	str	r2, [sp, #8]
	{
 800e346:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e348:	69d8      	ldr	r0, [r3, #28]
 800e34a:	0140      	lsls	r0, r0, #5
 800e34c:	f000 fbd2 	bl	800eaf4 <pvPortMalloc>
 800e350:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e352:	d03f      	beq.n	800e3d4 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e354:	2200      	movs	r2, #0
 800e356:	9902      	ldr	r1, [sp, #8]
 800e358:	f7ff fe5e 	bl	800e018 <uxTaskGetSystemState>
 800e35c:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e35e:	9603      	str	r6, [sp, #12]
 800e360:	9b03      	ldr	r3, [sp, #12]
 800e362:	9a02      	ldr	r2, [sp, #8]
 800e364:	429a      	cmp	r2, r3
 800e366:	d932      	bls.n	800e3ce <vTaskList+0x9a>
 800e368:	4b1d      	ldr	r3, [pc, #116]	; (800e3e0 <vTaskList+0xac>)
 800e36a:	4e1e      	ldr	r6, [pc, #120]	; (800e3e4 <vTaskList+0xb0>)
 800e36c:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	2700      	movs	r7, #0
 800e372:	015b      	lsls	r3, r3, #5
 800e374:	18eb      	adds	r3, r5, r3
 800e376:	7b1b      	ldrb	r3, [r3, #12]
 800e378:	3b01      	subs	r3, #1
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	2b03      	cmp	r3, #3
 800e37e:	d801      	bhi.n	800e384 <vTaskList+0x50>
 800e380:	4443      	add	r3, r8
 800e382:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e384:	9b03      	ldr	r3, [sp, #12]
 800e386:	0020      	movs	r0, r4
 800e388:	015b      	lsls	r3, r3, #5
 800e38a:	18eb      	adds	r3, r5, r3
 800e38c:	6859      	ldr	r1, [r3, #4]
 800e38e:	f7ff faad 	bl	800d8ec <prvWriteNameToBuffer>
 800e392:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	9a03      	ldr	r2, [sp, #12]
 800e398:	9903      	ldr	r1, [sp, #12]
 800e39a:	015b      	lsls	r3, r3, #5
 800e39c:	0149      	lsls	r1, r1, #5
 800e39e:	1869      	adds	r1, r5, r1
 800e3a0:	6889      	ldr	r1, [r1, #8]
 800e3a2:	18eb      	adds	r3, r5, r3
 800e3a4:	0152      	lsls	r2, r2, #5
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	18aa      	adds	r2, r5, r2
 800e3aa:	9101      	str	r1, [sp, #4]
 800e3ac:	8b92      	ldrh	r2, [r2, #28]
 800e3ae:	0031      	movs	r1, r6
 800e3b0:	9200      	str	r2, [sp, #0]
 800e3b2:	003a      	movs	r2, r7
 800e3b4:	f004 f9aa 	bl	801270c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e3b8:	0020      	movs	r0, r4
 800e3ba:	f7f1 fead 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800e3be:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e3c0:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	9303      	str	r3, [sp, #12]
 800e3c6:	9a03      	ldr	r2, [sp, #12]
 800e3c8:	9b02      	ldr	r3, [sp, #8]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d3cf      	bcc.n	800e36e <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e3ce:	0028      	movs	r0, r5
 800e3d0:	f000 fc06 	bl	800ebe0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3d4:	b004      	add	sp, #16
 800e3d6:	bc04      	pop	{r2}
 800e3d8:	4690      	mov	r8, r2
 800e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3dc:	20002900 	.word	0x20002900
 800e3e0:	080170b8 	.word	0x080170b8
 800e3e4:	08019918 	.word	0x08019918

0800e3e8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ea:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e3ec:	2600      	movs	r6, #0
	{
 800e3ee:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e3f0:	4b28      	ldr	r3, [pc, #160]	; (800e494 <vTaskGetRunTimeStats+0xac>)
	{
 800e3f2:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e3f4:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e3f6:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e3f8:	9201      	str	r2, [sp, #4]
	{
 800e3fa:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e3fc:	69d8      	ldr	r0, [r3, #28]
 800e3fe:	0140      	lsls	r0, r0, #5
 800e400:	f000 fb78 	bl	800eaf4 <pvPortMalloc>
 800e404:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e406:	d040      	beq.n	800e48a <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e408:	9901      	ldr	r1, [sp, #4]
 800e40a:	aa03      	add	r2, sp, #12
 800e40c:	f7ff fe04 	bl	800e018 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e410:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e412:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800e414:	9803      	ldr	r0, [sp, #12]
 800e416:	f7f1 fe9b 	bl	8000150 <__udivsi3>
 800e41a:	1e01      	subs	r1, r0, #0
 800e41c:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800e41e:	d031      	beq.n	800e484 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e420:	9602      	str	r6, [sp, #8]
 800e422:	9b02      	ldr	r3, [sp, #8]
 800e424:	9a01      	ldr	r2, [sp, #4]
 800e426:	429a      	cmp	r2, r3
 800e428:	d92c      	bls.n	800e484 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e42a:	4b1b      	ldr	r3, [pc, #108]	; (800e498 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e42c:	4f1b      	ldr	r7, [pc, #108]	; (800e49c <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e42e:	4698      	mov	r8, r3
 800e430:	e00f      	b.n	800e452 <vTaskGetRunTimeStats+0x6a>
 800e432:	0033      	movs	r3, r6
 800e434:	4641      	mov	r1, r8
 800e436:	f004 f969 	bl	801270c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800e43a:	0020      	movs	r0, r4
 800e43c:	f7f1 fe6c 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800e440:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800e442:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800e444:	3301      	adds	r3, #1
 800e446:	9302      	str	r3, [sp, #8]
 800e448:	9a02      	ldr	r2, [sp, #8]
 800e44a:	9b01      	ldr	r3, [sp, #4]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d219      	bcs.n	800e484 <vTaskGetRunTimeStats+0x9c>
 800e450:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e452:	9b02      	ldr	r3, [sp, #8]
 800e454:	015b      	lsls	r3, r3, #5
 800e456:	18eb      	adds	r3, r5, r3
 800e458:	6998      	ldr	r0, [r3, #24]
 800e45a:	f7f1 fe79 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e45e:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e460:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e462:	015b      	lsls	r3, r3, #5
 800e464:	18eb      	adds	r3, r5, r3
 800e466:	6859      	ldr	r1, [r3, #4]
 800e468:	0020      	movs	r0, r4
 800e46a:	f7ff fa3f 	bl	800d8ec <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e46e:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e470:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e472:	015b      	lsls	r3, r3, #5
 800e474:	18eb      	adds	r3, r5, r3
 800e476:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800e478:	2e00      	cmp	r6, #0
 800e47a:	d1da      	bne.n	800e432 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e47c:	0039      	movs	r1, r7
 800e47e:	f004 f945 	bl	801270c <sprintf>
 800e482:	e7da      	b.n	800e43a <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e484:	0028      	movs	r0, r5
 800e486:	f000 fbab 	bl	800ebe0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e48a:	b004      	add	sp, #16
 800e48c:	bc04      	pop	{r2}
 800e48e:	4690      	mov	r8, r2
 800e490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e492:	46c0      	nop			; (mov r8, r8)
 800e494:	20002900 	.word	0x20002900
 800e498:	08019928 	.word	0x08019928
 800e49c:	08019934 	.word	0x08019934

0800e4a0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e4a0:	4b04      	ldr	r3, [pc, #16]	; (800e4b4 <pvTaskIncrementMutexHeldCount+0x14>)
 800e4a2:	685a      	ldr	r2, [r3, #4]
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	d003      	beq.n	800e4b0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e4a8:	6859      	ldr	r1, [r3, #4]
 800e4aa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e4ac:	3201      	adds	r2, #1
 800e4ae:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e4b0:	6858      	ldr	r0, [r3, #4]
	}
 800e4b2:	4770      	bx	lr
 800e4b4:	20002900 	.word	0x20002900

0800e4b8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	0006      	movs	r6, r0
 800e4bc:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e4be:	f000 fa9f 	bl	800ea00 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e4c2:	4c1c      	ldr	r4, [pc, #112]	; (800e534 <ulTaskNotifyTake+0x7c>)
 800e4c4:	6863      	ldr	r3, [r4, #4]
 800e4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d105      	bne.n	800e4d8 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	6862      	ldr	r2, [r4, #4]
 800e4d0:	335c      	adds	r3, #92	; 0x5c
 800e4d2:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e4d4:	2d00      	cmp	r5, #0
 800e4d6:	d119      	bne.n	800e50c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e4d8:	f000 fa9e 	bl	800ea18 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e4dc:	f000 fa90 	bl	800ea00 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e4e0:	6863      	ldr	r3, [r4, #4]
 800e4e2:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e4e4:	2d00      	cmp	r5, #0
 800e4e6:	d005      	beq.n	800e4f4 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800e4e8:	2e00      	cmp	r6, #0
 800e4ea:	d10b      	bne.n	800e504 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800e4ec:	6862      	ldr	r2, [r4, #4]
 800e4ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e4f4:	235c      	movs	r3, #92	; 0x5c
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	6862      	ldr	r2, [r4, #4]
 800e4fa:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e4fc:	f000 fa8c 	bl	800ea18 <vPortExitCritical>

		return ulReturn;
	}
 800e500:	0028      	movs	r0, r5
 800e502:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e504:	2200      	movs	r2, #0
 800e506:	6863      	ldr	r3, [r4, #4]
 800e508:	659a      	str	r2, [r3, #88]	; 0x58
 800e50a:	e7f3      	b.n	800e4f4 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e50c:	6860      	ldr	r0, [r4, #4]
 800e50e:	3004      	adds	r0, #4
 800e510:	f7fe ff04 	bl	800d31c <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e514:	1c6b      	adds	r3, r5, #1
 800e516:	d006      	beq.n	800e526 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800e518:	68a0      	ldr	r0, [r4, #8]
 800e51a:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e51c:	f7ff fa5e 	bl	800d9dc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e520:	f000 fa62 	bl	800e9e8 <vPortYield>
 800e524:	e7d8      	b.n	800e4d8 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e526:	0020      	movs	r0, r4
 800e528:	6861      	ldr	r1, [r4, #4]
 800e52a:	3070      	adds	r0, #112	; 0x70
 800e52c:	3104      	adds	r1, #4
 800e52e:	f7fe fed1 	bl	800d2d4 <vListInsertEnd>
 800e532:	e7f5      	b.n	800e520 <ulTaskNotifyTake+0x68>
 800e534:	20002900 	.word	0x20002900

0800e538 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53a:	001e      	movs	r6, r3
 800e53c:	0004      	movs	r4, r0
 800e53e:	000f      	movs	r7, r1
 800e540:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e542:	f000 fa5d 	bl	800ea00 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e546:	2e00      	cmp	r6, #0
 800e548:	d001      	beq.n	800e54e <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e54a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e54c:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e54e:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800e550:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e552:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800e554:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e556:	b2db      	uxtb	r3, r3

			switch( eAction )
 800e558:	2d02      	cmp	r5, #2
 800e55a:	d02e      	beq.n	800e5ba <xTaskGenericNotify+0x82>
 800e55c:	d927      	bls.n	800e5ae <xTaskGenericNotify+0x76>
 800e55e:	2d03      	cmp	r5, #3
 800e560:	d003      	beq.n	800e56a <xTaskGenericNotify+0x32>
 800e562:	2d04      	cmp	r5, #4
 800e564:	d102      	bne.n	800e56c <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e566:	2b02      	cmp	r3, #2
 800e568:	d02b      	beq.n	800e5c2 <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e56a:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d004      	beq.n	800e57a <xTaskGenericNotify+0x42>
 800e570:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e572:	f000 fa51 	bl	800ea18 <vPortExitCritical>

		return xReturn;
	}
 800e576:	0020      	movs	r0, r4
 800e578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e57a:	1d26      	adds	r6, r4, #4
 800e57c:	0030      	movs	r0, r6
 800e57e:	f7fe fecd 	bl	800d31c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e582:	4d11      	ldr	r5, [pc, #68]	; (800e5c8 <xTaskGenericNotify+0x90>)
 800e584:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e586:	69aa      	ldr	r2, [r5, #24]
 800e588:	4293      	cmp	r3, r2
 800e58a:	d900      	bls.n	800e58e <xTaskGenericNotify+0x56>
 800e58c:	61ab      	str	r3, [r5, #24]
 800e58e:	0098      	lsls	r0, r3, #2
 800e590:	18c0      	adds	r0, r0, r3
 800e592:	4b0e      	ldr	r3, [pc, #56]	; (800e5cc <xTaskGenericNotify+0x94>)
 800e594:	0080      	lsls	r0, r0, #2
 800e596:	18c0      	adds	r0, r0, r3
 800e598:	0031      	movs	r1, r6
 800e59a:	f7fe fe9b 	bl	800d2d4 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e59e:	686b      	ldr	r3, [r5, #4]
 800e5a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d9e3      	bls.n	800e570 <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800e5a8:	f000 fa1e 	bl	800e9e8 <vPortYield>
 800e5ac:	e7e0      	b.n	800e570 <xTaskGenericNotify+0x38>
			switch( eAction )
 800e5ae:	2d01      	cmp	r5, #1
 800e5b0:	d1dc      	bne.n	800e56c <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800e5b2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e5b4:	4317      	orrs	r7, r2
 800e5b6:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800e5b8:	e7d8      	b.n	800e56c <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800e5ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e5bc:	3201      	adds	r2, #1
 800e5be:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e5c0:	e7d4      	b.n	800e56c <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	e7d5      	b.n	800e572 <xTaskGenericNotify+0x3a>
 800e5c6:	46c0      	nop			; (mov r8, r8)
 800e5c8:	20002900 	.word	0x20002900
 800e5cc:	2000299c 	.word	0x2000299c

0800e5d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5d0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5d2:	f000 fa15 	bl	800ea00 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5d6:	4c0f      	ldr	r4, [pc, #60]	; (800e614 <prvCheckForValidListAndQueue+0x44>)
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5de:	f000 fa1b 	bl	800ea18 <vPortExitCritical>
}
 800e5e2:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800e5e4:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800e5e6:	1d26      	adds	r6, r4, #4
 800e5e8:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800e5ea:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800e5ec:	f7fe fe62 	bl	800d2b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5f0:	0028      	movs	r0, r5
 800e5f2:	f7fe fe5f 	bl	800d2b4 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2110      	movs	r1, #16
 800e5fa:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800e5fc:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800e5fe:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e600:	f7fe ff6a 	bl	800d4d8 <xQueueGenericCreate>
 800e604:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e606:	2800      	cmp	r0, #0
 800e608:	d0e9      	beq.n	800e5de <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e60a:	4903      	ldr	r1, [pc, #12]	; (800e618 <prvCheckForValidListAndQueue+0x48>)
 800e60c:	f7ff f93e 	bl	800d88c <vQueueAddToRegistry>
 800e610:	e7e5      	b.n	800e5de <prvCheckForValidListAndQueue+0xe>
 800e612:	46c0      	nop			; (mov r8, r8)
 800e614:	20002a28 	.word	0x20002a28
 800e618:	08019940 	.word	0x08019940

0800e61c <prvInsertTimerInActiveList>:
{
 800e61c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e61e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e620:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e622:	4291      	cmp	r1, r2
 800e624:	d806      	bhi.n	800e634 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e626:	1ad2      	subs	r2, r2, r3
 800e628:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800e62a:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d30d      	bcc.n	800e64c <prvInsertTimerInActiveList+0x30>
}
 800e630:	0020      	movs	r0, r4
 800e632:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e634:	429a      	cmp	r2, r3
 800e636:	d202      	bcs.n	800e63e <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800e638:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e63a:	4299      	cmp	r1, r3
 800e63c:	d2f8      	bcs.n	800e630 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e63e:	4b07      	ldr	r3, [pc, #28]	; (800e65c <prvInsertTimerInActiveList+0x40>)
 800e640:	1d01      	adds	r1, r0, #4
 800e642:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e644:	f7fe fe52 	bl	800d2ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e648:	2400      	movs	r4, #0
 800e64a:	e7f1      	b.n	800e630 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e64c:	4b03      	ldr	r3, [pc, #12]	; (800e65c <prvInsertTimerInActiveList+0x40>)
 800e64e:	1d01      	adds	r1, r0, #4
 800e650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e652:	f7fe fe4b 	bl	800d2ec <vListInsert>
 800e656:	2400      	movs	r4, #0
 800e658:	e7ea      	b.n	800e630 <prvInsertTimerInActiveList+0x14>
 800e65a:	46c0      	nop			; (mov r8, r8)
 800e65c:	20002a28 	.word	0x20002a28

0800e660 <xTimerCreateTimerTask>:
{
 800e660:	b500      	push	{lr}
 800e662:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e664:	f7ff ffb4 	bl	800e5d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e668:	4b08      	ldr	r3, [pc, #32]	; (800e68c <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800e66a:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00a      	beq.n	800e688 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e672:	2303      	movs	r3, #3
 800e674:	9003      	str	r0, [sp, #12]
 800e676:	9002      	str	r0, [sp, #8]
 800e678:	9001      	str	r0, [sp, #4]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	2296      	movs	r2, #150	; 0x96
 800e67e:	2300      	movs	r3, #0
 800e680:	4903      	ldr	r1, [pc, #12]	; (800e690 <xTimerCreateTimerTask+0x30>)
 800e682:	4804      	ldr	r0, [pc, #16]	; (800e694 <xTimerCreateTimerTask+0x34>)
 800e684:	f7ff fa1e 	bl	800dac4 <xTaskGenericCreate>
}
 800e688:	b005      	add	sp, #20
 800e68a:	bd00      	pop	{pc}
 800e68c:	20002a28 	.word	0x20002a28
 800e690:	08019948 	.word	0x08019948
 800e694:	0800e799 	.word	0x0800e799

0800e698 <xTimerCreate>:
{
 800e698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e69a:	46c6      	mov	lr, r8
 800e69c:	000d      	movs	r5, r1
 800e69e:	b500      	push	{lr}
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	0017      	movs	r7, r2
 800e6a4:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e6a6:	2900      	cmp	r1, #0
 800e6a8:	d014      	beq.n	800e6d4 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e6aa:	202c      	movs	r0, #44	; 0x2c
 800e6ac:	f000 fa22 	bl	800eaf4 <pvPortMalloc>
 800e6b0:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e6b2:	d00b      	beq.n	800e6cc <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e6b4:	f7ff ff8c 	bl	800e5d0 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e6b8:	4643      	mov	r3, r8
 800e6ba:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e6bc:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e6be:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e6c0:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e6c2:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e6c4:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e6c6:	1d20      	adds	r0, r4, #4
 800e6c8:	f7fe fe00 	bl	800d2cc <vListInitialiseItem>
}
 800e6cc:	0020      	movs	r0, r4
 800e6ce:	bc04      	pop	{r2}
 800e6d0:	4690      	mov	r8, r2
 800e6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800e6d4:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800e6d6:	e7f9      	b.n	800e6cc <xTimerCreate+0x34>

0800e6d8 <xTimerGenericCommand>:
{
 800e6d8:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800e6da:	4d13      	ldr	r5, [pc, #76]	; (800e728 <xTimerGenericCommand+0x50>)
{
 800e6dc:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800e6de:	682c      	ldr	r4, [r5, #0]
{
 800e6e0:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800e6e2:	2c00      	cmp	r4, #0
 800e6e4:	d017      	beq.n	800e716 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800e6e6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e6e8:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e6ea:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e6ec:	2905      	cmp	r1, #5
 800e6ee:	dc0a      	bgt.n	800e706 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e6f0:	f7ff fdb6 	bl	800e260 <xTaskGetSchedulerState>
 800e6f4:	2802      	cmp	r0, #2
 800e6f6:	d010      	beq.n	800e71a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e6f8:	6828      	ldr	r0, [r5, #0]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	4669      	mov	r1, sp
 800e700:	f7fe ff16 	bl	800d530 <xQueueGenericSend>
 800e704:	e005      	b.n	800e712 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e706:	2300      	movs	r3, #0
 800e708:	0032      	movs	r2, r6
 800e70a:	4669      	mov	r1, sp
 800e70c:	0020      	movs	r0, r4
 800e70e:	f7fe ff8b 	bl	800d628 <xQueueGenericSendFromISR>
}
 800e712:	b004      	add	sp, #16
 800e714:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800e716:	2000      	movs	r0, #0
	return xReturn;
 800e718:	e7fb      	b.n	800e712 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e71a:	6828      	ldr	r0, [r5, #0]
 800e71c:	2300      	movs	r3, #0
 800e71e:	9a08      	ldr	r2, [sp, #32]
 800e720:	4669      	mov	r1, sp
 800e722:	f7fe ff05 	bl	800d530 <xQueueGenericSend>
 800e726:	e7f4      	b.n	800e712 <xTimerGenericCommand+0x3a>
 800e728:	20002a28 	.word	0x20002a28

0800e72c <prvSwitchTimerLists>:
{
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e730:	2300      	movs	r3, #0
{
 800e732:	b500      	push	{lr}
 800e734:	4e17      	ldr	r6, [pc, #92]	; (800e794 <prvSwitchTimerLists+0x68>)
 800e736:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e738:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e73a:	e00c      	b.n	800e756 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e73c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e73e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e740:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e742:	1d25      	adds	r5, r4, #4
 800e744:	0028      	movs	r0, r5
 800e746:	f7fe fde9 	bl	800d31c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e74c:	0020      	movs	r0, r4
 800e74e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e750:	69e3      	ldr	r3, [r4, #28]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d00a      	beq.n	800e76c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e756:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	2a00      	cmp	r2, #0
 800e75c:	d1ee      	bne.n	800e73c <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800e75e:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800e760:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800e762:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800e764:	b002      	add	sp, #8
 800e766:	bc04      	pop	{r2}
 800e768:	4690      	mov	r8, r2
 800e76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e76c:	69a3      	ldr	r3, [r4, #24]
 800e76e:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800e770:	429f      	cmp	r7, r3
 800e772:	d206      	bcs.n	800e782 <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e774:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e776:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e778:	0029      	movs	r1, r5
 800e77a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800e77c:	f7fe fdb6 	bl	800d2ec <vListInsert>
 800e780:	e7e9      	b.n	800e756 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e782:	4643      	mov	r3, r8
 800e784:	003a      	movs	r2, r7
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	2100      	movs	r1, #0
 800e78a:	2300      	movs	r3, #0
 800e78c:	0020      	movs	r0, r4
 800e78e:	f7ff ffa3 	bl	800e6d8 <xTimerGenericCommand>
 800e792:	e7e0      	b.n	800e756 <prvSwitchTimerLists+0x2a>
 800e794:	20002a28 	.word	0x20002a28

0800e798 <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800e798:	2300      	movs	r3, #0
{
 800e79a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e79c:	4645      	mov	r5, r8
 800e79e:	4657      	mov	r7, sl
 800e7a0:	46de      	mov	lr, fp
 800e7a2:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800e7a4:	4698      	mov	r8, r3
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	469a      	mov	sl, r3
{
 800e7aa:	b5e0      	push	{r5, r6, r7, lr}
 800e7ac:	4d61      	ldr	r5, [pc, #388]	; (800e934 <prvTimerTask+0x19c>)
 800e7ae:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	2a00      	cmp	r2, #0
 800e7b6:	d050      	beq.n	800e85a <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800e7bc:	f7ff fae2 	bl	800dd84 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e7c0:	f7ff fae8 	bl	800dd94 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e7c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e7c6:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e7c8:	4283      	cmp	r3, r0
 800e7ca:	d84e      	bhi.n	800e86a <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800e7cc:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e7ce:	4286      	cmp	r6, r0
 800e7d0:	d961      	bls.n	800e896 <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e7d2:	1b31      	subs	r1, r6, r4
 800e7d4:	6828      	ldr	r0, [r5, #0]
 800e7d6:	f7ff f86b 	bl	800d8b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7da:	f7ff fb71 	bl	800dec0 <xTaskResumeAll>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d056      	beq.n	800e890 <prvTimerTask+0xf8>
 800e7e2:	2784      	movs	r7, #132	; 0x84
 800e7e4:	00bf      	lsls	r7, r7, #2
 800e7e6:	23c7      	movs	r3, #199	; 0xc7
 800e7e8:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	a904      	add	r1, sp, #16
 800e7f0:	6828      	ldr	r0, [r5, #0]
 800e7f2:	f7fe ff7b 	bl	800d6ec <xQueueGenericReceive>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d0da      	beq.n	800e7b0 <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e7fa:	9b04      	ldr	r3, [sp, #16]
 800e7fc:	9c06      	ldr	r4, [sp, #24]
 800e7fe:	9302      	str	r3, [sp, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	da0b      	bge.n	800e81c <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e804:	9b07      	ldr	r3, [sp, #28]
 800e806:	0020      	movs	r0, r4
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	9902      	ldr	r1, [sp, #8]
 800e80e:	9303      	str	r3, [sp, #12]
 800e810:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e812:	9b04      	ldr	r3, [sp, #16]
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	dbe7      	blt.n	800e7ea <prvTimerTask+0x52>
 800e81a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e81c:	6963      	ldr	r3, [r4, #20]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d002      	beq.n	800e828 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e822:	1d20      	adds	r0, r4, #4
 800e824:	f7fe fd7a 	bl	800d31c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e828:	f7ff fab4 	bl	800dd94 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e82c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e82e:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800e830:	4298      	cmp	r0, r3
 800e832:	d320      	bcc.n	800e876 <prvTimerTask+0xde>
 800e834:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800e836:	636e      	str	r6, [r5, #52]	; 0x34
 800e838:	2b09      	cmp	r3, #9
 800e83a:	d8d6      	bhi.n	800e7ea <prvTimerTask+0x52>
 800e83c:	4652      	mov	r2, sl
 800e83e:	409a      	lsls	r2, r3
 800e840:	0013      	movs	r3, r2
 800e842:	403a      	ands	r2, r7
 800e844:	4693      	mov	fp, r2
 800e846:	d16b      	bne.n	800e920 <prvTimerTask+0x188>
 800e848:	464a      	mov	r2, r9
 800e84a:	421a      	tst	r2, r3
 800e84c:	d144      	bne.n	800e8d8 <prvTimerTask+0x140>
 800e84e:	069b      	lsls	r3, r3, #26
 800e850:	d5cb      	bpl.n	800e7ea <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800e852:	0020      	movs	r0, r4
 800e854:	f000 f9c4 	bl	800ebe0 <vPortFree>
 800e858:	e7c5      	b.n	800e7e6 <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800e85a:	f7ff fa93 	bl	800dd84 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e85e:	f7ff fa99 	bl	800dd94 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e862:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e864:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e866:	4283      	cmp	r3, r0
 800e868:	d908      	bls.n	800e87c <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800e86a:	f7ff ff5f 	bl	800e72c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e86e:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800e870:	f7ff fb26 	bl	800dec0 <xTaskResumeAll>
 800e874:	e7b5      	b.n	800e7e2 <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800e876:	f7ff ff59 	bl	800e72c <prvSwitchTimerLists>
 800e87a:	e7db      	b.n	800e834 <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800e87c:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e87e:	6828      	ldr	r0, [r5, #0]
 800e880:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800e882:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e884:	f7ff f814 	bl	800d8b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e888:	f7ff fb1a 	bl	800dec0 <xTaskResumeAll>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d1a8      	bne.n	800e7e2 <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800e890:	f000 f8aa 	bl	800e9e8 <vPortYield>
 800e894:	e7a5      	b.n	800e7e2 <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800e896:	f7ff fb13 	bl	800dec0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e89a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8a0:	1d38      	adds	r0, r7, #4
 800e8a2:	f7fe fd3b 	bl	800d31c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d003      	beq.n	800e8b4 <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	0038      	movs	r0, r7
 800e8b0:	4798      	blx	r3
 800e8b2:	e796      	b.n	800e7e2 <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	0022      	movs	r2, r4
 800e8b8:	18f1      	adds	r1, r6, r3
 800e8ba:	0038      	movs	r0, r7
 800e8bc:	0033      	movs	r3, r6
 800e8be:	f7ff fead 	bl	800e61c <prvInsertTimerInActiveList>
 800e8c2:	2801      	cmp	r0, #1
 800e8c4:	d1f2      	bne.n	800e8ac <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8c6:	4643      	mov	r3, r8
 800e8c8:	0032      	movs	r2, r6
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	0038      	movs	r0, r7
 800e8d2:	f7ff ff01 	bl	800e6d8 <xTimerGenericCommand>
 800e8d6:	e7e9      	b.n	800e8ac <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800e8d8:	9b05      	ldr	r3, [sp, #20]
 800e8da:	0020      	movs	r0, r4
 800e8dc:	9302      	str	r3, [sp, #8]
 800e8de:	9a02      	ldr	r2, [sp, #8]
 800e8e0:	69a3      	ldr	r3, [r4, #24]
 800e8e2:	4694      	mov	ip, r2
 800e8e4:	4463      	add	r3, ip
 800e8e6:	0019      	movs	r1, r3
 800e8e8:	0013      	movs	r3, r2
 800e8ea:	0032      	movs	r2, r6
 800e8ec:	f7ff fe96 	bl	800e61c <prvInsertTimerInActiveList>
 800e8f0:	2801      	cmp	r0, #1
 800e8f2:	d000      	beq.n	800e8f6 <prvTimerTask+0x15e>
 800e8f4:	e777      	b.n	800e7e6 <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8f8:	0020      	movs	r0, r4
 800e8fa:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8fc:	69e3      	ldr	r3, [r4, #28]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d000      	beq.n	800e904 <prvTimerTask+0x16c>
 800e902:	e770      	b.n	800e7e6 <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e904:	69a1      	ldr	r1, [r4, #24]
 800e906:	9b05      	ldr	r3, [sp, #20]
 800e908:	468c      	mov	ip, r1
 800e90a:	9302      	str	r3, [sp, #8]
 800e90c:	4463      	add	r3, ip
 800e90e:	001a      	movs	r2, r3
 800e910:	465b      	mov	r3, fp
 800e912:	2100      	movs	r1, #0
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	0020      	movs	r0, r4
 800e918:	2300      	movs	r3, #0
 800e91a:	f7ff fedd 	bl	800e6d8 <xTimerGenericCommand>
 800e91e:	e762      	b.n	800e7e6 <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e920:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e922:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e924:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e926:	0032      	movs	r2, r6
 800e928:	1989      	adds	r1, r1, r6
 800e92a:	0020      	movs	r0, r4
 800e92c:	f7ff fe76 	bl	800e61c <prvInsertTimerInActiveList>
 800e930:	e759      	b.n	800e7e6 <prvTimerTask+0x4e>
 800e932:	46c0      	nop			; (mov r8, r8)
 800e934:	20002a28 	.word	0x20002a28

0800e938 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e938:	b510      	push	{r4, lr}
 800e93a:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800e93c:	f000 f860 	bl	800ea00 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e940:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800e942:	f000 f869 	bl	800ea18 <vPortExitCritical>

	return pvReturn;
}
 800e946:	0020      	movs	r0, r4
 800e948:	bd10      	pop	{r4, pc}
 800e94a:	46c0      	nop			; (mov r8, r8)

0800e94c <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800e94c:	b672      	cpsid	i
 800e94e:	e7fe      	b.n	800e94e <prvTaskExitError+0x2>

0800e950 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e950:	4a06      	ldr	r2, [pc, #24]	; (800e96c <pxCurrentTCBConst2>)
 800e952:	6813      	ldr	r3, [r2, #0]
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	3020      	adds	r0, #32
 800e958:	f380 8809 	msr	PSP, r0
 800e95c:	2002      	movs	r0, #2
 800e95e:	f380 8814 	msr	CONTROL, r0
 800e962:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e964:	46ae      	mov	lr, r5
 800e966:	b662      	cpsie	i
 800e968:	bd00      	pop	{pc}
 800e96a:	46c0      	nop			; (mov r8, r8)

0800e96c <pxCurrentTCBConst2>:
 800e96c:	20002904 	.word	0x20002904

0800e970 <pxPortInitialiseStack>:
{
 800e970:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e972:	2480      	movs	r4, #128	; 0x80
 800e974:	1f03      	subs	r3, r0, #4
 800e976:	0464      	lsls	r4, r4, #17
 800e978:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e97a:	3b04      	subs	r3, #4
 800e97c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e97e:	4903      	ldr	r1, [pc, #12]	; (800e98c <pxPortInitialiseStack+0x1c>)
 800e980:	3b04      	subs	r3, #4
 800e982:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e984:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800e986:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e988:	601a      	str	r2, [r3, #0]
}
 800e98a:	bd10      	pop	{r4, pc}
 800e98c:	0800e94d 	.word	0x0800e94d

0800e990 <SVC_Handler>:
 800e990:	4770      	bx	lr
 800e992:	46c0      	nop			; (mov r8, r8)

0800e994 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e994:	22ff      	movs	r2, #255	; 0xff
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <xPortStartScheduler+0x40>)
 800e998:	0412      	lsls	r2, r2, #16
 800e99a:	6819      	ldr	r1, [r3, #0]
{
 800e99c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e99e:	430a      	orrs	r2, r1
 800e9a0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e9a2:	22ff      	movs	r2, #255	; 0xff
 800e9a4:	6819      	ldr	r1, [r3, #0]
 800e9a6:	0612      	lsls	r2, r2, #24
 800e9a8:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9aa:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e9ac:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9ae:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <xPortStartScheduler+0x44>)
 800e9b0:	0089      	lsls	r1, r1, #2
 800e9b2:	6818      	ldr	r0, [r3, #0]
 800e9b4:	f7f1 fbcc 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e9b8:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9ba:	4b08      	ldr	r3, [pc, #32]	; (800e9dc <xPortStartScheduler+0x48>)
 800e9bc:	3801      	subs	r0, #1
 800e9be:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e9c0:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <xPortStartScheduler+0x4c>)
 800e9c2:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4b07      	ldr	r3, [pc, #28]	; (800e9e4 <xPortStartScheduler+0x50>)
 800e9c8:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800e9ca:	f7ff ffc1 	bl	800e950 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800e9ce:	b672      	cpsid	i
 800e9d0:	e7fe      	b.n	800e9d0 <xPortStartScheduler+0x3c>
 800e9d2:	46c0      	nop			; (mov r8, r8)
 800e9d4:	e000ed20 	.word	0xe000ed20
 800e9d8:	200000b4 	.word	0x200000b4
 800e9dc:	e000e014 	.word	0xe000e014
 800e9e0:	e000e010 	.word	0xe000e010
 800e9e4:	200000c8 	.word	0x200000c8

0800e9e8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e9e8:	2280      	movs	r2, #128	; 0x80
 800e9ea:	4b04      	ldr	r3, [pc, #16]	; (800e9fc <vPortYield+0x14>)
 800e9ec:	0552      	lsls	r2, r2, #21
 800e9ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800e9f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e9f4:	f3bf 8f6f 	isb	sy
}
 800e9f8:	4770      	bx	lr
 800e9fa:	46c0      	nop			; (mov r8, r8)
 800e9fc:	e000ed04 	.word	0xe000ed04

0800ea00 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800ea00:	b672      	cpsid	i
    uxCriticalNesting++;
 800ea02:	4a04      	ldr	r2, [pc, #16]	; (800ea14 <vPortEnterCritical+0x14>)
 800ea04:	6813      	ldr	r3, [r2, #0]
 800ea06:	3301      	adds	r3, #1
 800ea08:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800ea0a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ea0e:	f3bf 8f6f 	isb	sy
}
 800ea12:	4770      	bx	lr
 800ea14:	200000c8 	.word	0x200000c8

0800ea18 <vPortExitCritical>:
    uxCriticalNesting--;
 800ea18:	4a03      	ldr	r2, [pc, #12]	; (800ea28 <vPortExitCritical+0x10>)
 800ea1a:	6813      	ldr	r3, [r2, #0]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d100      	bne.n	800ea26 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800ea24:	b662      	cpsie	i
}
 800ea26:	4770      	bx	lr
 800ea28:	200000c8 	.word	0x200000c8

0800ea2c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800ea2c:	f3ef 8010 	mrs	r0, PRIMASK
 800ea30:	b672      	cpsid	i
 800ea32:	4770      	bx	lr
}
 800ea34:	2000      	movs	r0, #0
 800ea36:	46c0      	nop			; (mov r8, r8)

0800ea38 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800ea38:	f380 8810 	msr	PRIMASK, r0
 800ea3c:	4770      	bx	lr
 800ea3e:	46c0      	nop			; (mov r8, r8)

0800ea40 <PendSV_Handler>:
	__asm volatile
 800ea40:	f3ef 8009 	mrs	r0, PSP
 800ea44:	4b0e      	ldr	r3, [pc, #56]	; (800ea80 <pxCurrentTCBConst>)
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	3820      	subs	r0, #32
 800ea4a:	6010      	str	r0, [r2, #0]
 800ea4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ea4e:	4644      	mov	r4, r8
 800ea50:	464d      	mov	r5, r9
 800ea52:	4656      	mov	r6, sl
 800ea54:	465f      	mov	r7, fp
 800ea56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ea58:	b508      	push	{r3, lr}
 800ea5a:	b672      	cpsid	i
 800ea5c:	f7ff fb4e 	bl	800e0fc <vTaskSwitchContext>
 800ea60:	b662      	cpsie	i
 800ea62:	bc0c      	pop	{r2, r3}
 800ea64:	6811      	ldr	r1, [r2, #0]
 800ea66:	6808      	ldr	r0, [r1, #0]
 800ea68:	3010      	adds	r0, #16
 800ea6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ea6c:	46a0      	mov	r8, r4
 800ea6e:	46a9      	mov	r9, r5
 800ea70:	46b2      	mov	sl, r6
 800ea72:	46bb      	mov	fp, r7
 800ea74:	f380 8809 	msr	PSP, r0
 800ea78:	3820      	subs	r0, #32
 800ea7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ea7c:	4718      	bx	r3
 800ea7e:	46c0      	nop			; (mov r8, r8)

0800ea80 <pxCurrentTCBConst>:
 800ea80:	20002904 	.word	0x20002904

0800ea84 <xPortSysTickHandler>:
{
 800ea84:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea86:	f7ff ffd1 	bl	800ea2c <ulSetInterruptMaskFromISR>
 800ea8a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800ea8c:	f7ff f98e 	bl	800ddac <xTaskIncrementTick>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	d003      	beq.n	800ea9c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ea94:	2280      	movs	r2, #128	; 0x80
 800ea96:	4b03      	ldr	r3, [pc, #12]	; (800eaa4 <xPortSysTickHandler+0x20>)
 800ea98:	0552      	lsls	r2, r2, #21
 800ea9a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ea9c:	0020      	movs	r0, r4
 800ea9e:	f7ff ffcb 	bl	800ea38 <vClearInterruptMaskFromISR>
}
 800eaa2:	bd10      	pop	{r4, pc}
 800eaa4:	e000ed04 	.word	0xe000ed04

0800eaa8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eaa8:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eaaa:	4c11      	ldr	r4, [pc, #68]	; (800eaf0 <prvInsertBlockIntoFreeList+0x48>)
 800eaac:	0022      	movs	r2, r4
 800eaae:	e000      	b.n	800eab2 <prvInsertBlockIntoFreeList+0xa>
 800eab0:	001a      	movs	r2, r3
 800eab2:	6813      	ldr	r3, [r2, #0]
 800eab4:	4283      	cmp	r3, r0
 800eab6:	d3fb      	bcc.n	800eab0 <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eab8:	6851      	ldr	r1, [r2, #4]
 800eaba:	1855      	adds	r5, r2, r1
 800eabc:	42a8      	cmp	r0, r5
 800eabe:	d012      	beq.n	800eae6 <prvInsertBlockIntoFreeList+0x3e>
 800eac0:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eac2:	1845      	adds	r5, r0, r1
 800eac4:	42ab      	cmp	r3, r5
 800eac6:	d004      	beq.n	800ead2 <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eac8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eaca:	4290      	cmp	r0, r2
 800eacc:	d000      	beq.n	800ead0 <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eace:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ead0:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ead2:	68a4      	ldr	r4, [r4, #8]
 800ead4:	42a3      	cmp	r3, r4
 800ead6:	d0f7      	beq.n	800eac8 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ead8:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eada:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eadc:	46a4      	mov	ip, r4
 800eade:	4461      	add	r1, ip
 800eae0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eae2:	6003      	str	r3, [r0, #0]
 800eae4:	e7f1      	b.n	800eaca <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eae6:	6840      	ldr	r0, [r0, #4]
 800eae8:	1809      	adds	r1, r1, r0
 800eaea:	6051      	str	r1, [r2, #4]
 800eaec:	0010      	movs	r0, r2
 800eaee:	e7e8      	b.n	800eac2 <prvInsertBlockIntoFreeList+0x1a>
 800eaf0:	20002a60 	.word	0x20002a60

0800eaf4 <pvPortMalloc>:
{
 800eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaf6:	46c6      	mov	lr, r8
 800eaf8:	b500      	push	{lr}
 800eafa:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800eafc:	f7ff f942 	bl	800dd84 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800eb00:	4d35      	ldr	r5, [pc, #212]	; (800ebd8 <pvPortMalloc+0xe4>)
 800eb02:	68ab      	ldr	r3, [r5, #8]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d03d      	beq.n	800eb84 <pvPortMalloc+0x90>
 800eb08:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb0a:	4226      	tst	r6, r4
 800eb0c:	d101      	bne.n	800eb12 <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800eb0e:	2c00      	cmp	r4, #0
 800eb10:	d108      	bne.n	800eb24 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800eb12:	f7ff f9d5 	bl	800dec0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800eb16:	f7fd fccf 	bl	800c4b8 <vApplicationMallocFailedHook>
 800eb1a:	2700      	movs	r7, #0
}
 800eb1c:	0038      	movs	r0, r7
 800eb1e:	bc04      	pop	{r2}
 800eb20:	4690      	mov	r8, r2
 800eb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800eb24:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb26:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800eb28:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb2a:	421a      	tst	r2, r3
 800eb2c:	d145      	bne.n	800ebba <pvPortMalloc+0xc6>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d0ef      	beq.n	800eb12 <pvPortMalloc+0x1e>
 800eb32:	696a      	ldr	r2, [r5, #20]
 800eb34:	4690      	mov	r8, r2
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d3eb      	bcc.n	800eb12 <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800eb3a:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800eb3c:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb3e:	e004      	b.n	800eb4a <pvPortMalloc+0x56>
 800eb40:	6822      	ldr	r2, [r4, #0]
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	d004      	beq.n	800eb50 <pvPortMalloc+0x5c>
 800eb46:	0020      	movs	r0, r4
 800eb48:	0014      	movs	r4, r2
 800eb4a:	6861      	ldr	r1, [r4, #4]
 800eb4c:	4299      	cmp	r1, r3
 800eb4e:	d3f7      	bcc.n	800eb40 <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800eb50:	68aa      	ldr	r2, [r5, #8]
 800eb52:	42a2      	cmp	r2, r4
 800eb54:	d0dd      	beq.n	800eb12 <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb56:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb58:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb5a:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb5c:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb5e:	1aca      	subs	r2, r1, r3
 800eb60:	2a10      	cmp	r2, #16
 800eb62:	d831      	bhi.n	800ebc8 <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb64:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb66:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb68:	1a5b      	subs	r3, r3, r1
 800eb6a:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d200      	bcs.n	800eb72 <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb70:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800eb72:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb74:	4331      	orrs	r1, r6
 800eb76:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb78:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800eb7a:	f7ff f9a1 	bl	800dec0 <xTaskResumeAll>
		if( pvReturn == NULL )
 800eb7e:	2f00      	cmp	r7, #0
 800eb80:	d1cc      	bne.n	800eb1c <pvPortMalloc+0x28>
 800eb82:	e7c8      	b.n	800eb16 <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb84:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800eb86:	4b15      	ldr	r3, [pc, #84]	; (800ebdc <pvPortMalloc+0xe8>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb88:	4219      	tst	r1, r3
 800eb8a:	d119      	bne.n	800ebc0 <pvPortMalloc+0xcc>
 800eb8c:	001a      	movs	r2, r3
 800eb8e:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800eb90:	26fd      	movs	r6, #253	; 0xfd
 800eb92:	01b6      	lsls	r6, r6, #6
 800eb94:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800eb96:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800eb98:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800eb9a:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb9c:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800eb9e:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800eba0:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eba2:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800eba4:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eba6:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800eba8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebaa:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800ebac:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ebae:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebb0:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebb2:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebb4:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebb6:	60ee      	str	r6, [r5, #12]
 800ebb8:	e7a7      	b.n	800eb0a <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebba:	4393      	bics	r3, r2
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	e7b6      	b.n	800eb2e <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebc0:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ebc2:	438a      	bics	r2, r1
 800ebc4:	0011      	movs	r1, r2
 800ebc6:	e7e3      	b.n	800eb90 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebc8:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebca:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebcc:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ebce:	f7ff ff6b 	bl	800eaa8 <prvInsertBlockIntoFreeList>
 800ebd2:	6861      	ldr	r1, [r4, #4]
 800ebd4:	e7c6      	b.n	800eb64 <pvPortMalloc+0x70>
 800ebd6:	46c0      	nop			; (mov r8, r8)
 800ebd8:	20002a60 	.word	0x20002a60
 800ebdc:	20002a78 	.word	0x20002a78

0800ebe0 <vPortFree>:
{
 800ebe0:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d009      	beq.n	800ebfa <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebe6:	4d0d      	ldr	r5, [pc, #52]	; (800ec1c <vPortFree+0x3c>)
 800ebe8:	3808      	subs	r0, #8
 800ebea:	6843      	ldr	r3, [r0, #4]
 800ebec:	68ea      	ldr	r2, [r5, #12]
 800ebee:	0004      	movs	r4, r0
 800ebf0:	421a      	tst	r2, r3
 800ebf2:	d002      	beq.n	800ebfa <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800ebf4:	6801      	ldr	r1, [r0, #0]
 800ebf6:	2900      	cmp	r1, #0
 800ebf8:	d000      	beq.n	800ebfc <vPortFree+0x1c>
}
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebfc:	4393      	bics	r3, r2
 800ebfe:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ec00:	f7ff f8c0 	bl	800dd84 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec04:	696a      	ldr	r2, [r5, #20]
 800ec06:	6863      	ldr	r3, [r4, #4]
 800ec08:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec0a:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec0c:	4463      	add	r3, ip
 800ec0e:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec10:	f7ff ff4a 	bl	800eaa8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ec14:	f7ff f954 	bl	800dec0 <xTaskResumeAll>
}
 800ec18:	e7ef      	b.n	800ebfa <vPortFree+0x1a>
 800ec1a:	46c0      	nop			; (mov r8, r8)
 800ec1c:	20002a60 	.word	0x20002a60

0800ec20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ec20:	b510      	push	{r4, lr}
 800ec22:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ec24:	f002 f88e 	bl	8010d44 <HAL_RCC_GetHCLKFreq>
 800ec28:	21fa      	movs	r1, #250	; 0xfa
 800ec2a:	0089      	lsls	r1, r1, #2
 800ec2c:	f7f1 fa90 	bl	8000150 <__udivsi3>
 800ec30:	f000 fb28 	bl	800f284 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ec34:	2001      	movs	r0, #1
 800ec36:	2200      	movs	r2, #0
 800ec38:	0021      	movs	r1, r4
 800ec3a:	4240      	negs	r0, r0
 800ec3c:	f000 fae2 	bl	800f204 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800ec40:	2000      	movs	r0, #0
 800ec42:	bd10      	pop	{r4, pc}

0800ec44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec44:	2110      	movs	r1, #16
 800ec46:	4a06      	ldr	r2, [pc, #24]	; (800ec60 <HAL_Init+0x1c>)
{
 800ec48:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec4a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ec4c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec4e:	430b      	orrs	r3, r1
 800ec50:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ec52:	f7ff ffe5 	bl	800ec20 <HAL_InitTick>
  HAL_MspInit();
 800ec56:	f001 fc69 	bl	801052c <HAL_MspInit>
}
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	bd10      	pop	{r4, pc}
 800ec5e:	46c0      	nop			; (mov r8, r8)
 800ec60:	40022000 	.word	0x40022000

0800ec64 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ec64:	4a02      	ldr	r2, [pc, #8]	; (800ec70 <HAL_IncTick+0xc>)
 800ec66:	6813      	ldr	r3, [r2, #0]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	6013      	str	r3, [r2, #0]
}
 800ec6c:	4770      	bx	lr
 800ec6e:	46c0      	nop			; (mov r8, r8)
 800ec70:	200069c0 	.word	0x200069c0

0800ec74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ec74:	4b01      	ldr	r3, [pc, #4]	; (800ec7c <HAL_GetTick+0x8>)
 800ec76:	6818      	ldr	r0, [r3, #0]
}
 800ec78:	4770      	bx	lr
 800ec7a:	46c0      	nop			; (mov r8, r8)
 800ec7c:	200069c0 	.word	0x200069c0

0800ec80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ec80:	b510      	push	{r4, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ec86:	f7ff fff5 	bl	800ec74 <HAL_GetTick>
 800ec8a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800ec8c:	f7ff fff2 	bl	800ec74 <HAL_GetTick>
 800ec90:	9b01      	ldr	r3, [sp, #4]
 800ec92:	1b00      	subs	r0, r0, r4
 800ec94:	4298      	cmp	r0, r3
 800ec96:	d3f9      	bcc.n	800ec8c <HAL_Delay+0xc>
  {
  }
}
 800ec98:	b002      	add	sp, #8
 800ec9a:	bd10      	pop	{r4, pc}

0800ec9c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ec9c:	4b01      	ldr	r3, [pc, #4]	; (800eca4 <HAL_GetREVID+0x8>)
 800ec9e:	6818      	ldr	r0, [r3, #0]
 800eca0:	0c00      	lsrs	r0, r0, #16
}
 800eca2:	4770      	bx	lr
 800eca4:	40015800 	.word	0x40015800

0800eca8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800eca8:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <HAL_GetDEVID+0xc>)
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	0500      	lsls	r0, r0, #20
 800ecae:	0d00      	lsrs	r0, r0, #20
}
 800ecb0:	4770      	bx	lr
 800ecb2:	46c0      	nop			; (mov r8, r8)
 800ecb4:	40015800 	.word	0x40015800

0800ecb8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecb8:	2303      	movs	r3, #3
 800ecba:	6802      	ldr	r2, [r0, #0]
{
 800ecbc:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecbe:	6891      	ldr	r1, [r2, #8]
{
 800ecc0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecc2:	400b      	ands	r3, r1
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d001      	beq.n	800eccc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800ecc8:	2000      	movs	r0, #0
}
 800ecca:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800eccc:	6811      	ldr	r1, [r2, #0]
 800ecce:	420b      	tst	r3, r1
 800ecd0:	d00e      	beq.n	800ecf0 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800ecd2:	2305      	movs	r3, #5
 800ecd4:	6891      	ldr	r1, [r2, #8]
 800ecd6:	400b      	ands	r3, r1
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d00d      	beq.n	800ecf8 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ecdc:	2210      	movs	r2, #16
 800ecde:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800ece0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ece2:	4313      	orrs	r3, r2
 800ece4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ece6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ece8:	3a0f      	subs	r2, #15
 800ecea:	4313      	orrs	r3, r2
 800ecec:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800ecee:	e7ec      	b.n	800ecca <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecf0:	68d3      	ldr	r3, [r2, #12]
 800ecf2:	041b      	lsls	r3, r3, #16
 800ecf4:	d4ed      	bmi.n	800ecd2 <ADC_Disable+0x1a>
 800ecf6:	e7e7      	b.n	800ecc8 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800ecf8:	2102      	movs	r1, #2
 800ecfa:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ecfc:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800ecfe:	430b      	orrs	r3, r1
 800ed00:	6093      	str	r3, [r2, #8]
 800ed02:	2303      	movs	r3, #3
 800ed04:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ed06:	f7ff ffb5 	bl	800ec74 <HAL_GetTick>
 800ed0a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ed0c:	e004      	b.n	800ed18 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ed0e:	f7ff ffb1 	bl	800ec74 <HAL_GetTick>
 800ed12:	1b80      	subs	r0, r0, r6
 800ed14:	2802      	cmp	r0, #2
 800ed16:	d804      	bhi.n	800ed22 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	421d      	tst	r5, r3
 800ed1e:	d1f6      	bne.n	800ed0e <ADC_Disable+0x56>
 800ed20:	e7d2      	b.n	800ecc8 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed22:	2210      	movs	r2, #16
 800ed24:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800ed26:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed2e:	431d      	orrs	r5, r3
 800ed30:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ed32:	e7ca      	b.n	800ecca <ADC_Disable+0x12>

0800ed34 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800ed34:	2300      	movs	r3, #0
{
 800ed36:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed38:	6802      	ldr	r2, [r0, #0]
{
 800ed3a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800ed3c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed3e:	6891      	ldr	r1, [r2, #8]
 800ed40:	3303      	adds	r3, #3
{
 800ed42:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed44:	400b      	ands	r3, r1
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d031      	beq.n	800edae <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ed4a:	6891      	ldr	r1, [r2, #8]
 800ed4c:	4b20      	ldr	r3, [pc, #128]	; (800edd0 <ADC_Enable+0x9c>)
 800ed4e:	4219      	tst	r1, r3
 800ed50:	d122      	bne.n	800ed98 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800ed52:	2101      	movs	r1, #1
 800ed54:	6893      	ldr	r3, [r2, #8]
 800ed56:	430b      	orrs	r3, r1
 800ed58:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800ed5a:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <ADC_Enable+0xa0>)
 800ed5c:	491e      	ldr	r1, [pc, #120]	; (800edd8 <ADC_Enable+0xa4>)
 800ed5e:	6818      	ldr	r0, [r3, #0]
 800ed60:	f7f1 f9f6 	bl	8000150 <__udivsi3>
 800ed64:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800ed66:	9b01      	ldr	r3, [sp, #4]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <ADC_Enable+0x44>
      wait_loop_index--;
 800ed6c:	9b01      	ldr	r3, [sp, #4]
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1f9      	bne.n	800ed6c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800ed78:	f7ff ff7c 	bl	800ec74 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ed7c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800ed7e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ed80:	e004      	b.n	800ed8c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ed82:	f7ff ff77 	bl	800ec74 <HAL_GetTick>
 800ed86:	1b80      	subs	r0, r0, r6
 800ed88:	2802      	cmp	r0, #2
 800ed8a:	d818      	bhi.n	800edbe <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	421d      	tst	r5, r3
 800ed92:	d0f6      	beq.n	800ed82 <ADC_Enable+0x4e>
  return HAL_OK;
 800ed94:	2000      	movs	r0, #0
 800ed96:	e008      	b.n	800edaa <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed98:	2210      	movs	r2, #16
      return HAL_ERROR;
 800ed9a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eda2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eda4:	3a0f      	subs	r2, #15
 800eda6:	4313      	orrs	r3, r2
 800eda8:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800edaa:	b002      	add	sp, #8
 800edac:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800edae:	6811      	ldr	r1, [r2, #0]
 800edb0:	420b      	tst	r3, r1
 800edb2:	d1ef      	bne.n	800ed94 <ADC_Enable+0x60>
 800edb4:	68d3      	ldr	r3, [r2, #12]
 800edb6:	041b      	lsls	r3, r3, #16
 800edb8:	d5c7      	bpl.n	800ed4a <ADC_Enable+0x16>
  return HAL_OK;
 800edba:	2000      	movs	r0, #0
 800edbc:	e7f5      	b.n	800edaa <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edbe:	2210      	movs	r2, #16
 800edc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800edc2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edc4:	4313      	orrs	r3, r2
 800edc6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800edca:	431d      	orrs	r5, r3
 800edcc:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800edce:	e7ec      	b.n	800edaa <ADC_Enable+0x76>
 800edd0:	80000017 	.word	0x80000017
 800edd4:	200000b4 	.word	0x200000b4
 800edd8:	000f4240 	.word	0x000f4240

0800eddc <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800eddc:	2204      	movs	r2, #4
 800edde:	6803      	ldr	r3, [r0, #0]
{
 800ede0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ede2:	6899      	ldr	r1, [r3, #8]
{
 800ede4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ede6:	420a      	tst	r2, r1
 800ede8:	d010      	beq.n	800ee0c <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800edea:	6899      	ldr	r1, [r3, #8]
 800edec:	420a      	tst	r2, r1
 800edee:	d10f      	bne.n	800ee10 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800edf0:	f7ff ff40 	bl	800ec74 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800edf4:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800edf6:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800edf8:	e004      	b.n	800ee04 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800edfa:	f7ff ff3b 	bl	800ec74 <HAL_GetTick>
 800edfe:	1b80      	subs	r0, r0, r6
 800ee00:	2802      	cmp	r0, #2
 800ee02:	d80d      	bhi.n	800ee20 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	421d      	tst	r5, r3
 800ee0a:	d1f6      	bne.n	800edfa <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800ee0c:	2000      	movs	r0, #0
}
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800ee10:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ee12:	0792      	lsls	r2, r2, #30
 800ee14:	d4ec      	bmi.n	800edf0 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800ee16:	2110      	movs	r1, #16
 800ee18:	689a      	ldr	r2, [r3, #8]
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	609a      	str	r2, [r3, #8]
 800ee1e:	e7e7      	b.n	800edf0 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee20:	2210      	movs	r2, #16
 800ee22:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ee24:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee26:	4313      	orrs	r3, r2
 800ee28:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ee2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee2c:	3a0f      	subs	r2, #15
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	64a3      	str	r3, [r4, #72]	; 0x48
 800ee32:	e7ec      	b.n	800ee0e <ADC_ConversionStop+0x32>

0800ee34 <HAL_ADC_Init>:
{
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800ee38:	d100      	bne.n	800ee3c <HAL_ADC_Init+0x8>
 800ee3a:	e075      	b.n	800ef28 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ee3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d068      	beq.n	800ef14 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ee42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee44:	06db      	lsls	r3, r3, #27
 800ee46:	d505      	bpl.n	800ee54 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee48:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800ee4a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	6463      	str	r3, [r4, #68]	; 0x44
}
 800ee52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800ee54:	2004      	movs	r0, #4
 800ee56:	6823      	ldr	r3, [r4, #0]
 800ee58:	689a      	ldr	r2, [r3, #8]
 800ee5a:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800ee5c:	d1f4      	bne.n	800ee48 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800ee5e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ee60:	4942      	ldr	r1, [pc, #264]	; (800ef6c <HAL_ADC_Init+0x138>)
 800ee62:	400a      	ands	r2, r1
 800ee64:	3106      	adds	r1, #6
 800ee66:	31ff      	adds	r1, #255	; 0xff
 800ee68:	430a      	orrs	r2, r1
 800ee6a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ee6c:	2203      	movs	r2, #3
 800ee6e:	6899      	ldr	r1, [r3, #8]
 800ee70:	400a      	ands	r2, r1
 800ee72:	2a01      	cmp	r2, #1
 800ee74:	d073      	beq.n	800ef5e <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800ee76:	2118      	movs	r1, #24
 800ee78:	68da      	ldr	r2, [r3, #12]
 800ee7a:	438a      	bics	r2, r1
 800ee7c:	68a1      	ldr	r1, [r4, #8]
 800ee7e:	430a      	orrs	r2, r1
 800ee80:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800ee82:	691a      	ldr	r2, [r3, #16]
 800ee84:	6861      	ldr	r1, [r4, #4]
 800ee86:	0092      	lsls	r2, r2, #2
 800ee88:	0892      	lsrs	r2, r2, #2
 800ee8a:	430a      	orrs	r2, r1
 800ee8c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800ee8e:	68da      	ldr	r2, [r3, #12]
 800ee90:	4937      	ldr	r1, [pc, #220]	; (800ef70 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800ee92:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800ee94:	400a      	ands	r2, r1
 800ee96:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800ee98:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800ee9a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800ee9c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800ee9e:	69e2      	ldr	r2, [r4, #28]
 800eea0:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800eea2:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800eea4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800eea6:	3a01      	subs	r2, #1
 800eea8:	1e55      	subs	r5, r2, #1
 800eeaa:	41aa      	sbcs	r2, r5
 800eeac:	0315      	lsls	r5, r2, #12
 800eeae:	68e2      	ldr	r2, [r4, #12]
 800eeb0:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800eeb2:	6922      	ldr	r2, [r4, #16]
 800eeb4:	4339      	orrs	r1, r7
 800eeb6:	2a02      	cmp	r2, #2
 800eeb8:	d100      	bne.n	800eebc <HAL_ADC_Init+0x88>
 800eeba:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800eebc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800eebe:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800eec0:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800eec2:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800eec4:	432a      	orrs	r2, r5
 800eec6:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800eec8:	2901      	cmp	r1, #1
 800eeca:	d042      	beq.n	800ef52 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800eecc:	20c2      	movs	r0, #194	; 0xc2
 800eece:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800eed0:	30ff      	adds	r0, #255	; 0xff
 800eed2:	4281      	cmp	r1, r0
 800eed4:	d002      	beq.n	800eedc <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800eed6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800eed8:	4301      	orrs	r1, r0
 800eeda:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800eedc:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800eede:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800eee0:	4311      	orrs	r1, r2
 800eee2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800eee4:	2180      	movs	r1, #128	; 0x80
 800eee6:	0549      	lsls	r1, r1, #21
 800eee8:	428d      	cmp	r5, r1
 800eeea:	d01f      	beq.n	800ef2c <HAL_ADC_Init+0xf8>
 800eeec:	1e69      	subs	r1, r5, #1
 800eeee:	2906      	cmp	r1, #6
 800eef0:	d91c      	bls.n	800ef2c <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	491f      	ldr	r1, [pc, #124]	; (800ef74 <HAL_ADC_Init+0x140>)
 800eef6:	400b      	ands	r3, r1
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d020      	beq.n	800ef3e <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800eefc:	2212      	movs	r2, #18
 800eefe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800ef00:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800ef02:	4393      	bics	r3, r2
 800ef04:	3a02      	subs	r2, #2
 800ef06:	4313      	orrs	r3, r2
 800ef08:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef0c:	3a0f      	subs	r2, #15
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	64a3      	str	r3, [r4, #72]	; 0x48
 800ef12:	e79e      	b.n	800ee52 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800ef14:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800ef16:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800ef18:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800ef1a:	f7fc fb55 	bl	800b5c8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ef1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef20:	06db      	lsls	r3, r3, #27
 800ef22:	d500      	bpl.n	800ef26 <HAL_ADC_Init+0xf2>
 800ef24:	e790      	b.n	800ee48 <HAL_ADC_Init+0x14>
 800ef26:	e795      	b.n	800ee54 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800ef28:	2001      	movs	r0, #1
 800ef2a:	e792      	b.n	800ee52 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800ef2c:	2107      	movs	r1, #7
 800ef2e:	6958      	ldr	r0, [r3, #20]
 800ef30:	4388      	bics	r0, r1
 800ef32:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800ef34:	6958      	ldr	r0, [r3, #20]
 800ef36:	4029      	ands	r1, r5
 800ef38:	4301      	orrs	r1, r0
 800ef3a:	6159      	str	r1, [r3, #20]
 800ef3c:	e7d9      	b.n	800eef2 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800ef3e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ef40:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800ef42:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800ef44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ef46:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ef48:	4393      	bics	r3, r2
 800ef4a:	3a02      	subs	r2, #2
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	6463      	str	r3, [r4, #68]	; 0x44
 800ef50:	e77f      	b.n	800ee52 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800ef52:	2e00      	cmp	r6, #0
 800ef54:	d1ba      	bne.n	800eecc <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800ef56:	2180      	movs	r1, #128	; 0x80
 800ef58:	0249      	lsls	r1, r1, #9
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	e7b6      	b.n	800eecc <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ef5e:	6819      	ldr	r1, [r3, #0]
 800ef60:	420a      	tst	r2, r1
 800ef62:	d194      	bne.n	800ee8e <HAL_ADC_Init+0x5a>
 800ef64:	68da      	ldr	r2, [r3, #12]
 800ef66:	0412      	lsls	r2, r2, #16
 800ef68:	d491      	bmi.n	800ee8e <HAL_ADC_Init+0x5a>
 800ef6a:	e784      	b.n	800ee76 <HAL_ADC_Init+0x42>
 800ef6c:	fffffefd 	.word	0xfffffefd
 800ef70:	fffe0219 	.word	0xfffe0219
 800ef74:	833fffe7 	.word	0x833fffe7

0800ef78 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ef78:	6803      	ldr	r3, [r0, #0]
{
 800ef7a:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ef7c:	689a      	ldr	r2, [r3, #8]
{
 800ef7e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ef80:	0752      	lsls	r2, r2, #29
 800ef82:	d421      	bmi.n	800efc8 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800ef84:	2240      	movs	r2, #64	; 0x40
 800ef86:	5c81      	ldrb	r1, [r0, r2]
 800ef88:	2901      	cmp	r1, #1
 800ef8a:	d01d      	beq.n	800efc8 <HAL_ADC_Start+0x50>
 800ef8c:	2101      	movs	r1, #1
 800ef8e:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ef90:	69c2      	ldr	r2, [r0, #28]
 800ef92:	2a01      	cmp	r2, #1
 800ef94:	d112      	bne.n	800efbc <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800ef96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ef98:	490c      	ldr	r1, [pc, #48]	; (800efcc <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ef9a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ef9c:	4011      	ands	r1, r2
 800ef9e:	2280      	movs	r2, #128	; 0x80
 800efa0:	0052      	lsls	r2, r2, #1
 800efa2:	430a      	orrs	r2, r1
 800efa4:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800efa6:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800efa8:	2200      	movs	r2, #0
 800efaa:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800efac:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800efae:	321c      	adds	r2, #28
 800efb0:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800efb2:	689a      	ldr	r2, [r3, #8]
 800efb4:	393c      	subs	r1, #60	; 0x3c
 800efb6:	430a      	orrs	r2, r1
 800efb8:	609a      	str	r2, [r3, #8]
}
 800efba:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800efbc:	f7ff feba 	bl	800ed34 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d1fa      	bne.n	800efba <HAL_ADC_Start+0x42>
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	e7e6      	b.n	800ef96 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800efc8:	2002      	movs	r0, #2
 800efca:	e7f6      	b.n	800efba <HAL_ADC_Start+0x42>
 800efcc:	fffff0fe 	.word	0xfffff0fe

0800efd0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800efd0:	2340      	movs	r3, #64	; 0x40
{ 
 800efd2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800efd4:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800efd6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800efd8:	2a01      	cmp	r2, #1
 800efda:	d014      	beq.n	800f006 <HAL_ADC_Stop+0x36>
 800efdc:	2501      	movs	r5, #1
 800efde:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800efe0:	f7ff fefc 	bl	800eddc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d003      	beq.n	800eff0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800efe8:	2340      	movs	r3, #64	; 0x40
 800efea:	2200      	movs	r2, #0
 800efec:	54e2      	strb	r2, [r4, r3]
}
 800efee:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800eff0:	0020      	movs	r0, r4
 800eff2:	f7ff fe61 	bl	800ecb8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d1f6      	bne.n	800efe8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800effa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800effc:	4a03      	ldr	r2, [pc, #12]	; (800f00c <HAL_ADC_Stop+0x3c>)
 800effe:	4013      	ands	r3, r2
 800f000:	431d      	orrs	r5, r3
 800f002:	6465      	str	r5, [r4, #68]	; 0x44
 800f004:	e7f0      	b.n	800efe8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f006:	2002      	movs	r0, #2
 800f008:	e7f1      	b.n	800efee <HAL_ADC_Stop+0x1e>
 800f00a:	46c0      	nop			; (mov r8, r8)
 800f00c:	fffffefe 	.word	0xfffffefe

0800f010 <HAL_ADC_PollForConversion>:
{
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f012:	6943      	ldr	r3, [r0, #20]
{
 800f014:	0006      	movs	r6, r0
 800f016:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f018:	2b08      	cmp	r3, #8
 800f01a:	d04c      	beq.n	800f0b6 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f01c:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f01e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	07db      	lsls	r3, r3, #31
 800f024:	d43e      	bmi.n	800f0a4 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f026:	f7ff fe25 	bl	800ec74 <HAL_GetTick>
 800f02a:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f02c:	6832      	ldr	r2, [r6, #0]
 800f02e:	e001      	b.n	800f034 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f030:	1c63      	adds	r3, r4, #1
 800f032:	d127      	bne.n	800f084 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f034:	6813      	ldr	r3, [r2, #0]
 800f036:	421d      	tst	r5, r3
 800f038:	d0fa      	beq.n	800f030 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f03a:	2380      	movs	r3, #128	; 0x80
 800f03c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	430b      	orrs	r3, r1
 800f042:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f044:	23c0      	movs	r3, #192	; 0xc0
 800f046:	68d1      	ldr	r1, [r2, #12]
 800f048:	011b      	lsls	r3, r3, #4
 800f04a:	4219      	tst	r1, r3
 800f04c:	d113      	bne.n	800f076 <HAL_ADC_PollForConversion+0x66>
 800f04e:	6a33      	ldr	r3, [r6, #32]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d110      	bne.n	800f076 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f054:	6813      	ldr	r3, [r2, #0]
 800f056:	071b      	lsls	r3, r3, #28
 800f058:	d50d      	bpl.n	800f076 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f05a:	6893      	ldr	r3, [r2, #8]
 800f05c:	075b      	lsls	r3, r3, #29
 800f05e:	d42f      	bmi.n	800f0c0 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f060:	210c      	movs	r1, #12
 800f062:	6853      	ldr	r3, [r2, #4]
 800f064:	438b      	bics	r3, r1
 800f066:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f068:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f06a:	491a      	ldr	r1, [pc, #104]	; (800f0d4 <HAL_ADC_PollForConversion+0xc4>)
 800f06c:	400b      	ands	r3, r1
 800f06e:	3104      	adds	r1, #4
 800f070:	31ff      	adds	r1, #255	; 0xff
 800f072:	430b      	orrs	r3, r1
 800f074:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f076:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f078:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f07e:	330c      	adds	r3, #12
 800f080:	6013      	str	r3, [r2, #0]
}
 800f082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f084:	2c00      	cmp	r4, #0
 800f086:	d004      	beq.n	800f092 <HAL_ADC_PollForConversion+0x82>
 800f088:	f7ff fdf4 	bl	800ec74 <HAL_GetTick>
 800f08c:	1bc0      	subs	r0, r0, r7
 800f08e:	42a0      	cmp	r0, r4
 800f090:	d9cc      	bls.n	800f02c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f092:	2204      	movs	r2, #4
 800f094:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f096:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f098:	4313      	orrs	r3, r2
 800f09a:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f09c:	2200      	movs	r2, #0
 800f09e:	2340      	movs	r3, #64	; 0x40
 800f0a0:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f0a2:	e7ee      	b.n	800f082 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f0a4:	2220      	movs	r2, #32
 800f0a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	2340      	movs	r3, #64	; 0x40
 800f0b0:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	e7e5      	b.n	800f082 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f0b6:	f7ff fddd 	bl	800ec74 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f0ba:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f0bc:	0007      	movs	r7, r0
 800f0be:	e7b5      	b.n	800f02c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f0c0:	2120      	movs	r1, #32
 800f0c2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f0c4:	430b      	orrs	r3, r1
 800f0c6:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f0c8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f0ca:	391f      	subs	r1, #31
 800f0cc:	430b      	orrs	r3, r1
 800f0ce:	64b3      	str	r3, [r6, #72]	; 0x48
 800f0d0:	e7d1      	b.n	800f076 <HAL_ADC_PollForConversion+0x66>
 800f0d2:	46c0      	nop			; (mov r8, r8)
 800f0d4:	fffffefe 	.word	0xfffffefe

0800f0d8 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f0d8:	2208      	movs	r2, #8
 800f0da:	6803      	ldr	r3, [r0, #0]
 800f0dc:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f0de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f0e0:	4770      	bx	lr
 800f0e2:	46c0      	nop			; (mov r8, r8)

0800f0e4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f0e4:	2300      	movs	r3, #0
{
 800f0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0e8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f0ea:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f0ec:	3340      	adds	r3, #64	; 0x40
 800f0ee:	5cc2      	ldrb	r2, [r0, r3]
{
 800f0f0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f0f2:	2a01      	cmp	r2, #1
 800f0f4:	d044      	beq.n	800f180 <HAL_ADC_ConfigChannel+0x9c>
 800f0f6:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f0f8:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f0fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f0fc:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f0fe:	68b3      	ldr	r3, [r6, #8]
 800f100:	075b      	lsls	r3, r3, #29
 800f102:	d509      	bpl.n	800f118 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f104:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f106:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f10a:	4313      	orrs	r3, r2
 800f10c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f10e:	2340      	movs	r3, #64	; 0x40
 800f110:	2200      	movs	r2, #0
 800f112:	54e2      	strb	r2, [r4, r3]
}
 800f114:	b003      	add	sp, #12
 800f116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f118:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f11a:	4d33      	ldr	r5, [pc, #204]	; (800f1e8 <HAL_ADC_ConfigChannel+0x104>)
 800f11c:	001f      	movs	r7, r3
 800f11e:	46ac      	mov	ip, r5
 800f120:	684d      	ldr	r5, [r1, #4]
 800f122:	409a      	lsls	r2, r3
 800f124:	3f10      	subs	r7, #16
 800f126:	4565      	cmp	r5, ip
 800f128:	d02c      	beq.n	800f184 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f12a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f12c:	432a      	orrs	r2, r5
 800f12e:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f130:	2280      	movs	r2, #128	; 0x80
 800f132:	0552      	lsls	r2, r2, #21
 800f134:	4290      	cmp	r0, r2
 800f136:	d00f      	beq.n	800f158 <HAL_ADC_ConfigChannel+0x74>
 800f138:	3801      	subs	r0, #1
 800f13a:	2806      	cmp	r0, #6
 800f13c:	d90c      	bls.n	800f158 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800f13e:	2207      	movs	r2, #7
 800f140:	6888      	ldr	r0, [r1, #8]
 800f142:	6971      	ldr	r1, [r6, #20]
 800f144:	4011      	ands	r1, r2
 800f146:	4288      	cmp	r0, r1
 800f148:	d006      	beq.n	800f158 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f14a:	6971      	ldr	r1, [r6, #20]
 800f14c:	4391      	bics	r1, r2
 800f14e:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800f150:	6971      	ldr	r1, [r6, #20]
 800f152:	4002      	ands	r2, r0
 800f154:	430a      	orrs	r2, r1
 800f156:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f158:	2f02      	cmp	r7, #2
 800f15a:	d80f      	bhi.n	800f17c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f15c:	4923      	ldr	r1, [pc, #140]	; (800f1ec <HAL_ADC_ConfigChannel+0x108>)
 800f15e:	680a      	ldr	r2, [r1, #0]
 800f160:	2b10      	cmp	r3, #16
 800f162:	d029      	beq.n	800f1b8 <HAL_ADC_ConfigChannel+0xd4>
 800f164:	3b11      	subs	r3, #17
 800f166:	4258      	negs	r0, r3
 800f168:	4143      	adcs	r3, r0
 800f16a:	4821      	ldr	r0, [pc, #132]	; (800f1f0 <HAL_ADC_ConfigChannel+0x10c>)
 800f16c:	425b      	negs	r3, r3
 800f16e:	4003      	ands	r3, r0
 800f170:	2080      	movs	r0, #128	; 0x80
 800f172:	0440      	lsls	r0, r0, #17
 800f174:	4684      	mov	ip, r0
 800f176:	4463      	add	r3, ip
 800f178:	4313      	orrs	r3, r2
 800f17a:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f17c:	2000      	movs	r0, #0
 800f17e:	e7c6      	b.n	800f10e <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800f180:	2002      	movs	r0, #2
 800f182:	e7c7      	b.n	800f114 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f184:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800f186:	4391      	bics	r1, r2
 800f188:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f18a:	2f02      	cmp	r7, #2
 800f18c:	d8f6      	bhi.n	800f17c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f18e:	4a17      	ldr	r2, [pc, #92]	; (800f1ec <HAL_ADC_ConfigChannel+0x108>)
 800f190:	6811      	ldr	r1, [r2, #0]
 800f192:	2b10      	cmp	r3, #16
 800f194:	d00e      	beq.n	800f1b4 <HAL_ADC_ConfigChannel+0xd0>
 800f196:	3b11      	subs	r3, #17
 800f198:	001a      	movs	r2, r3
 800f19a:	1e53      	subs	r3, r2, #1
 800f19c:	419a      	sbcs	r2, r3
 800f19e:	4b14      	ldr	r3, [pc, #80]	; (800f1f0 <HAL_ADC_ConfigChannel+0x10c>)
 800f1a0:	4252      	negs	r2, r2
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	4a13      	ldr	r2, [pc, #76]	; (800f1f4 <HAL_ADC_ConfigChannel+0x110>)
 800f1a6:	4694      	mov	ip, r2
 800f1a8:	4463      	add	r3, ip
 800f1aa:	4a10      	ldr	r2, [pc, #64]	; (800f1ec <HAL_ADC_ConfigChannel+0x108>)
 800f1ac:	400b      	ands	r3, r1
 800f1ae:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	e7ac      	b.n	800f10e <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f1b4:	4b10      	ldr	r3, [pc, #64]	; (800f1f8 <HAL_ADC_ConfigChannel+0x114>)
 800f1b6:	e7f8      	b.n	800f1aa <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f1b8:	2380      	movs	r3, #128	; 0x80
 800f1ba:	041b      	lsls	r3, r3, #16
 800f1bc:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f1be:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f1c0:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f1c2:	6818      	ldr	r0, [r3, #0]
 800f1c4:	490e      	ldr	r1, [pc, #56]	; (800f200 <HAL_ADC_ConfigChannel+0x11c>)
 800f1c6:	f7f0 ffc3 	bl	8000150 <__udivsi3>
 800f1ca:	0083      	lsls	r3, r0, #2
 800f1cc:	1818      	adds	r0, r3, r0
 800f1ce:	0040      	lsls	r0, r0, #1
 800f1d0:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800f1d2:	9b01      	ldr	r3, [sp, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d0d1      	beq.n	800f17c <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800f1d8:	9b01      	ldr	r3, [sp, #4]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800f1de:	9b01      	ldr	r3, [sp, #4]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1f9      	bne.n	800f1d8 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	e792      	b.n	800f10e <HAL_ADC_ConfigChannel+0x2a>
 800f1e8:	00001001 	.word	0x00001001
 800f1ec:	40012708 	.word	0x40012708
 800f1f0:	ff400000 	.word	0xff400000
 800f1f4:	ffbfffff 	.word	0xffbfffff
 800f1f8:	ff7fffff 	.word	0xff7fffff
 800f1fc:	200000b4 	.word	0x200000b4
 800f200:	000f4240 	.word	0x000f4240

0800f204 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f204:	22ff      	movs	r2, #255	; 0xff
 800f206:	2303      	movs	r3, #3
 800f208:	b530      	push	{r4, r5, lr}
 800f20a:	0014      	movs	r4, r2
 800f20c:	b2c5      	uxtb	r5, r0
 800f20e:	402b      	ands	r3, r5
 800f210:	00db      	lsls	r3, r3, #3
 800f212:	409c      	lsls	r4, r3
 800f214:	0189      	lsls	r1, r1, #6
 800f216:	400a      	ands	r2, r1
 800f218:	43e4      	mvns	r4, r4
 800f21a:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800f21c:	2800      	cmp	r0, #0
 800f21e:	db0b      	blt.n	800f238 <HAL_NVIC_SetPriority+0x34>
 800f220:	4b0c      	ldr	r3, [pc, #48]	; (800f254 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f222:	0880      	lsrs	r0, r0, #2
 800f224:	469c      	mov	ip, r3
 800f226:	23c0      	movs	r3, #192	; 0xc0
 800f228:	0080      	lsls	r0, r0, #2
 800f22a:	4460      	add	r0, ip
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	58c1      	ldr	r1, [r0, r3]
 800f230:	400c      	ands	r4, r1
 800f232:	4322      	orrs	r2, r4
 800f234:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f236:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f238:	230f      	movs	r3, #15
 800f23a:	4907      	ldr	r1, [pc, #28]	; (800f258 <HAL_NVIC_SetPriority+0x54>)
 800f23c:	402b      	ands	r3, r5
 800f23e:	468c      	mov	ip, r1
 800f240:	3b08      	subs	r3, #8
 800f242:	089b      	lsrs	r3, r3, #2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4463      	add	r3, ip
 800f248:	69d9      	ldr	r1, [r3, #28]
 800f24a:	400c      	ands	r4, r1
 800f24c:	4322      	orrs	r2, r4
 800f24e:	61da      	str	r2, [r3, #28]
 800f250:	e7f1      	b.n	800f236 <HAL_NVIC_SetPriority+0x32>
 800f252:	46c0      	nop			; (mov r8, r8)
 800f254:	e000e100 	.word	0xe000e100
 800f258:	e000ed00 	.word	0xe000ed00

0800f25c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f25c:	231f      	movs	r3, #31
 800f25e:	4018      	ands	r0, r3
 800f260:	3b1e      	subs	r3, #30
 800f262:	4083      	lsls	r3, r0
 800f264:	4a01      	ldr	r2, [pc, #4]	; (800f26c <HAL_NVIC_EnableIRQ+0x10>)
 800f266:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f268:	4770      	bx	lr
 800f26a:	46c0      	nop			; (mov r8, r8)
 800f26c:	e000e100 	.word	0xe000e100

0800f270 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f270:	231f      	movs	r3, #31
 800f272:	4018      	ands	r0, r3
 800f274:	3b1e      	subs	r3, #30
 800f276:	4083      	lsls	r3, r0
 800f278:	2280      	movs	r2, #128	; 0x80
 800f27a:	4901      	ldr	r1, [pc, #4]	; (800f280 <HAL_NVIC_DisableIRQ+0x10>)
 800f27c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f27e:	4770      	bx	lr
 800f280:	e000e100 	.word	0xe000e100

0800f284 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800f284:	4a0a      	ldr	r2, [pc, #40]	; (800f2b0 <HAL_SYSTICK_Config+0x2c>)
 800f286:	1e43      	subs	r3, r0, #1
 800f288:	2001      	movs	r0, #1
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d80e      	bhi.n	800f2ac <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f28e:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f290:	4a08      	ldr	r2, [pc, #32]	; (800f2b4 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f292:	4809      	ldr	r0, [pc, #36]	; (800f2b8 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f294:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f296:	6a03      	ldr	r3, [r0, #32]
 800f298:	0609      	lsls	r1, r1, #24
 800f29a:	021b      	lsls	r3, r3, #8
 800f29c:	0a1b      	lsrs	r3, r3, #8
 800f29e:	430b      	orrs	r3, r1
 800f2a0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f2a2:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f2a4:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f2a6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f2a8:	3307      	adds	r3, #7
 800f2aa:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f2ac:	4770      	bx	lr
 800f2ae:	46c0      	nop			; (mov r8, r8)
 800f2b0:	00ffffff 	.word	0x00ffffff
 800f2b4:	e000e010 	.word	0xe000e010
 800f2b8:	e000ed00 	.word	0xe000ed00

0800f2bc <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f2bc:	4a05      	ldr	r2, [pc, #20]	; (800f2d4 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800f2be:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f2c0:	2804      	cmp	r0, #4
 800f2c2:	d003      	beq.n	800f2cc <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f2c4:	2104      	movs	r1, #4
 800f2c6:	438b      	bics	r3, r1
 800f2c8:	6013      	str	r3, [r2, #0]
  }
}
 800f2ca:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f2cc:	4318      	orrs	r0, r3
 800f2ce:	6010      	str	r0, [r2, #0]
 800f2d0:	e7fb      	b.n	800f2ca <HAL_SYSTICK_CLKSourceConfig+0xe>
 800f2d2:	46c0      	nop			; (mov r8, r8)
 800f2d4:	e000e010 	.word	0xe000e010

0800f2d8 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2da:	468c      	mov	ip, r1
 800f2dc:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800f2de:	0891      	lsrs	r1, r2, #2
 800f2e0:	d010      	beq.n	800f304 <CRC_Handle_8+0x2c>
 800f2e2:	4664      	mov	r4, ip
 800f2e4:	008f      	lsls	r7, r1, #2
 800f2e6:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800f2e8:	7823      	ldrb	r3, [r4, #0]
 800f2ea:	7865      	ldrb	r5, [r4, #1]
 800f2ec:	061b      	lsls	r3, r3, #24
 800f2ee:	042d      	lsls	r5, r5, #16
 800f2f0:	432b      	orrs	r3, r5
 800f2f2:	78e5      	ldrb	r5, [r4, #3]
 800f2f4:	432b      	orrs	r3, r5
 800f2f6:	78a5      	ldrb	r5, [r4, #2]
 800f2f8:	3404      	adds	r4, #4
 800f2fa:	022d      	lsls	r5, r5, #8
 800f2fc:	432b      	orrs	r3, r5
 800f2fe:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800f300:	42a7      	cmp	r7, r4
 800f302:	d1f1      	bne.n	800f2e8 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800f304:	2303      	movs	r3, #3
 800f306:	401a      	ands	r2, r3
 800f308:	d00b      	beq.n	800f322 <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f30a:	0089      	lsls	r1, r1, #2
 800f30c:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800f30e:	2a01      	cmp	r2, #1
 800f310:	d013      	beq.n	800f33a <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800f312:	2a02      	cmp	r2, #2
 800f314:	d107      	bne.n	800f326 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f316:	5c5a      	ldrb	r2, [r3, r1]
 800f318:	4461      	add	r1, ip
 800f31a:	784b      	ldrb	r3, [r1, #1]
 800f31c:	0212      	lsls	r2, r2, #8
 800f31e:	4313      	orrs	r3, r2
 800f320:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f322:	6830      	ldr	r0, [r6, #0]
}
 800f324:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f326:	5c5a      	ldrb	r2, [r3, r1]
 800f328:	4461      	add	r1, ip
 800f32a:	784b      	ldrb	r3, [r1, #1]
 800f32c:	0212      	lsls	r2, r2, #8
 800f32e:	4313      	orrs	r3, r2
 800f330:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800f332:	788b      	ldrb	r3, [r1, #2]
 800f334:	7033      	strb	r3, [r6, #0]
 800f336:	6806      	ldr	r6, [r0, #0]
 800f338:	e7f3      	b.n	800f322 <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f33a:	5ccb      	ldrb	r3, [r1, r3]
 800f33c:	7033      	strb	r3, [r6, #0]
 800f33e:	6806      	ldr	r6, [r0, #0]
 800f340:	e7ef      	b.n	800f322 <CRC_Handle_8+0x4a>
 800f342:	46c0      	nop			; (mov r8, r8)

0800f344 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800f344:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800f346:	0857      	lsrs	r7, r2, #1
 800f348:	6805      	ldr	r5, [r0, #0]
 800f34a:	d00a      	beq.n	800f362 <CRC_Handle_16+0x1e>
 800f34c:	0008      	movs	r0, r1
 800f34e:	00be      	lsls	r6, r7, #2
 800f350:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800f352:	8803      	ldrh	r3, [r0, #0]
 800f354:	8844      	ldrh	r4, [r0, #2]
 800f356:	041b      	lsls	r3, r3, #16
 800f358:	4323      	orrs	r3, r4
 800f35a:	3004      	adds	r0, #4
 800f35c:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800f35e:	4286      	cmp	r6, r0
 800f360:	d1f7      	bne.n	800f352 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800f362:	07d3      	lsls	r3, r2, #31
 800f364:	d502      	bpl.n	800f36c <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800f366:	00bf      	lsls	r7, r7, #2
 800f368:	5a7b      	ldrh	r3, [r7, r1]
 800f36a:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f36c:	6828      	ldr	r0, [r5, #0]
}
 800f36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f370 <HAL_CRC_Init>:
{
 800f370:	b510      	push	{r4, lr}
 800f372:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800f374:	d01f      	beq.n	800f3b6 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800f376:	7f43      	ldrb	r3, [r0, #29]
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d01d      	beq.n	800f3ba <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f37e:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f380:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f382:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f384:	f000 f8ae 	bl	800f4e4 <HAL_CRCEx_Init>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d114      	bne.n	800f3b6 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f38c:	7963      	ldrb	r3, [r4, #5]
 800f38e:	6822      	ldr	r2, [r4, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d01d      	beq.n	800f3d0 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f394:	6923      	ldr	r3, [r4, #16]
 800f396:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f398:	2160      	movs	r1, #96	; 0x60
 800f39a:	6893      	ldr	r3, [r2, #8]
 800f39c:	438b      	bics	r3, r1
 800f39e:	6961      	ldr	r1, [r4, #20]
 800f3a0:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f3a2:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f3a4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f3a6:	6893      	ldr	r3, [r2, #8]
 800f3a8:	438b      	bics	r3, r1
 800f3aa:	69a1      	ldr	r1, [r4, #24]
 800f3ac:	430b      	orrs	r3, r1
 800f3ae:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800f3b4:	e000      	b.n	800f3b8 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800f3b6:	2001      	movs	r0, #1
}
 800f3b8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f3ba:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f3bc:	f7fb fa4e 	bl	800a85c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f3c0:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f3c2:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f3c4:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f3c6:	f000 f88d 	bl	800f4e4 <HAL_CRCEx_Init>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d0de      	beq.n	800f38c <HAL_CRC_Init+0x1c>
 800f3ce:	e7f2      	b.n	800f3b6 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	6113      	str	r3, [r2, #16]
 800f3d4:	e7e0      	b.n	800f398 <HAL_CRC_Init+0x28>
 800f3d6:	46c0      	nop			; (mov r8, r8)

0800f3d8 <HAL_CRC_Accumulate>:
{
 800f3d8:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800f3da:	7f03      	ldrb	r3, [r0, #28]
{
 800f3dc:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d021      	beq.n	800f426 <HAL_CRC_Accumulate+0x4e>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800f3ea:	6a03      	ldr	r3, [r0, #32]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d017      	beq.n	800f420 <HAL_CRC_Accumulate+0x48>
 800f3f0:	2b03      	cmp	r3, #3
 800f3f2:	d00a      	beq.n	800f40a <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f3f4:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d102      	bne.n	800f400 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f3fa:	0020      	movs	r0, r4
 800f3fc:	f7ff ff6c 	bl	800f2d8 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f400:	2301      	movs	r3, #1
 800f402:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f404:	2300      	movs	r3, #0
 800f406:	7723      	strb	r3, [r4, #28]
}
 800f408:	bd10      	pop	{r4, pc}
 800f40a:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	d005      	beq.n	800f41c <HAL_CRC_Accumulate+0x44>
 800f410:	0092      	lsls	r2, r2, #2
 800f412:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f414:	c908      	ldmia	r1!, {r3}
 800f416:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f418:	428a      	cmp	r2, r1
 800f41a:	d1fb      	bne.n	800f414 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800f41c:	6800      	ldr	r0, [r0, #0]
      break;
 800f41e:	e7ef      	b.n	800f400 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f420:	f7ff ff90 	bl	800f344 <CRC_Handle_16>
      break;
 800f424:	e7ec      	b.n	800f400 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800f426:	2002      	movs	r0, #2
 800f428:	e7ee      	b.n	800f408 <HAL_CRC_Accumulate+0x30>
 800f42a:	46c0      	nop			; (mov r8, r8)

0800f42c <HAL_CRC_Calculate>:
{
 800f42c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800f42e:	7f03      	ldrb	r3, [r0, #28]
{
 800f430:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f432:	2b01      	cmp	r3, #1
 800f434:	d026      	beq.n	800f484 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f436:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800f438:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f43a:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f43c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800f43e:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800f440:	6898      	ldr	r0, [r3, #8]
 800f442:	4328      	orrs	r0, r5
 800f444:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800f446:	6a20      	ldr	r0, [r4, #32]
 800f448:	2802      	cmp	r0, #2
 800f44a:	d017      	beq.n	800f47c <HAL_CRC_Calculate+0x50>
 800f44c:	2803      	cmp	r0, #3
 800f44e:	d007      	beq.n	800f460 <HAL_CRC_Calculate+0x34>
 800f450:	2801      	cmp	r0, #1
 800f452:	d00f      	beq.n	800f474 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f454:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800f456:	2301      	movs	r3, #1
 800f458:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f45a:	2300      	movs	r3, #0
 800f45c:	7723      	strb	r3, [r4, #28]
}
 800f45e:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f460:	2a00      	cmp	r2, #0
 800f462:	d005      	beq.n	800f470 <HAL_CRC_Calculate+0x44>
 800f464:	0092      	lsls	r2, r2, #2
 800f466:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f468:	c901      	ldmia	r1!, {r0}
 800f46a:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800f46c:	4291      	cmp	r1, r2
 800f46e:	d1fb      	bne.n	800f468 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800f470:	6818      	ldr	r0, [r3, #0]
      break;
 800f472:	e7f0      	b.n	800f456 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f474:	0020      	movs	r0, r4
 800f476:	f7ff ff2f 	bl	800f2d8 <CRC_Handle_8>
      break;
 800f47a:	e7ec      	b.n	800f456 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f47c:	0020      	movs	r0, r4
 800f47e:	f7ff ff61 	bl	800f344 <CRC_Handle_16>
      break;
 800f482:	e7e8      	b.n	800f456 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f484:	2002      	movs	r0, #2
 800f486:	e7ea      	b.n	800f45e <HAL_CRC_Calculate+0x32>

0800f488 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f488:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f48a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f48c:	2501      	movs	r5, #1
 800f48e:	e001      	b.n	800f494 <HAL_CRCEx_Polynomial_Set+0xc>
 800f490:	3b01      	subs	r3, #1
 800f492:	d312      	bcc.n	800f4ba <HAL_CRCEx_Polynomial_Set+0x32>
 800f494:	002c      	movs	r4, r5
 800f496:	409c      	lsls	r4, r3
 800f498:	4221      	tst	r1, r4
 800f49a:	d0f9      	beq.n	800f490 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800f49c:	2a10      	cmp	r2, #16
 800f49e:	d01c      	beq.n	800f4da <HAL_CRCEx_Polynomial_Set+0x52>
 800f4a0:	2a18      	cmp	r2, #24
 800f4a2:	d012      	beq.n	800f4ca <HAL_CRCEx_Polynomial_Set+0x42>
 800f4a4:	2a08      	cmp	r2, #8
 800f4a6:	d014      	beq.n	800f4d2 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f4a8:	6800      	ldr	r0, [r0, #0]
 800f4aa:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f4ac:	2118      	movs	r1, #24
 800f4ae:	6883      	ldr	r3, [r0, #8]
 800f4b0:	438b      	bics	r3, r1
 800f4b2:	431a      	orrs	r2, r3
 800f4b4:	6082      	str	r2, [r0, #8]
 800f4b6:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800f4b8:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800f4ba:	2a10      	cmp	r2, #16
 800f4bc:	d003      	beq.n	800f4c6 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f4be:	2a18      	cmp	r2, #24
 800f4c0:	d001      	beq.n	800f4c6 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f4c2:	2a08      	cmp	r2, #8
 800f4c4:	d1f0      	bne.n	800f4a8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	e7f6      	b.n	800f4b8 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800f4ca:	2b06      	cmp	r3, #6
 800f4cc:	d9ec      	bls.n	800f4a8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4ce:	2001      	movs	r0, #1
 800f4d0:	e7f2      	b.n	800f4b8 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800f4d2:	2b0f      	cmp	r3, #15
 800f4d4:	d9e8      	bls.n	800f4a8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4d6:	2001      	movs	r0, #1
 800f4d8:	e7ee      	b.n	800f4b8 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800f4da:	2b07      	cmp	r3, #7
 800f4dc:	d9e4      	bls.n	800f4a8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4de:	2001      	movs	r0, #1
 800f4e0:	e7ea      	b.n	800f4b8 <HAL_CRCEx_Polynomial_Set+0x30>
 800f4e2:	46c0      	nop			; (mov r8, r8)

0800f4e4 <HAL_CRCEx_Init>:
{
 800f4e4:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f4e6:	7903      	ldrb	r3, [r0, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d108      	bne.n	800f4fe <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f4ec:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f4ee:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800f4f0:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f4f2:	4a07      	ldr	r2, [pc, #28]	; (800f510 <HAL_CRCEx_Init+0x2c>)
 800f4f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	438a      	bics	r2, r1
 800f4fa:	609a      	str	r2, [r3, #8]
}
 800f4fc:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f4fe:	68c2      	ldr	r2, [r0, #12]
 800f500:	6881      	ldr	r1, [r0, #8]
 800f502:	f7ff ffc1 	bl	800f488 <HAL_CRCEx_Polynomial_Set>
 800f506:	1e43      	subs	r3, r0, #1
 800f508:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f50a:	b2c0      	uxtb	r0, r0
 800f50c:	e7f6      	b.n	800f4fc <HAL_CRCEx_Init+0x18>
 800f50e:	46c0      	nop			; (mov r8, r8)
 800f510:	04c11db7 	.word	0x04c11db7

0800f514 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f514:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f516:	2800      	cmp	r0, #0
 800f518:	d023      	beq.n	800f562 <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f51a:	2321      	movs	r3, #33	; 0x21
 800f51c:	5cc3      	ldrb	r3, [r0, r3]
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d01b      	beq.n	800f55c <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f524:	2121      	movs	r1, #33	; 0x21
 800f526:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f528:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f52a:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800f52c:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f52e:	4a0e      	ldr	r2, [pc, #56]	; (800f568 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f530:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f532:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800f534:	6843      	ldr	r3, [r0, #4]
 800f536:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f538:	68c5      	ldr	r5, [r0, #12]
 800f53a:	432b      	orrs	r3, r5
 800f53c:	6905      	ldr	r5, [r0, #16]
 800f53e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f540:	6945      	ldr	r5, [r0, #20]
 800f542:	432b      	orrs	r3, r5
 800f544:	6985      	ldr	r5, [r0, #24]
 800f546:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f548:	69c5      	ldr	r5, [r0, #28]
 800f54a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f54c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f54e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f550:	2300      	movs	r3, #0
 800f552:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f554:	3301      	adds	r3, #1
 800f556:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f558:	2000      	movs	r0, #0
}  
 800f55a:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800f55c:	2220      	movs	r2, #32
 800f55e:	5483      	strb	r3, [r0, r2]
 800f560:	e7e0      	b.n	800f524 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800f562:	2001      	movs	r0, #1
 800f564:	e7f9      	b.n	800f55a <HAL_DMA_Init+0x46>
 800f566:	46c0      	nop			; (mov r8, r8)
 800f568:	ffffc00f 	.word	0xffffc00f

0800f56c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f56c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f56e:	2420      	movs	r4, #32
 800f570:	5d05      	ldrb	r5, [r0, r4]
 800f572:	2d01      	cmp	r5, #1
 800f574:	d023      	beq.n	800f5be <HAL_DMA_Start_IT+0x52>
 800f576:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f578:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800f57a:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f57c:	3401      	adds	r4, #1
 800f57e:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f580:	6804      	ldr	r4, [r0, #0]
 800f582:	6825      	ldr	r5, [r4, #0]
 800f584:	43b5      	bics	r5, r6
 800f586:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f588:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f58a:	6843      	ldr	r3, [r0, #4]
 800f58c:	2b10      	cmp	r3, #16
 800f58e:	d013      	beq.n	800f5b8 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f590:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f592:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f594:	2202      	movs	r2, #2
  return HAL_OK;    
 800f596:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	3202      	adds	r2, #2
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	3204      	adds	r2, #4
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	3a07      	subs	r2, #7
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	6023      	str	r3, [r4, #0]
} 
 800f5b6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f5b8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f5ba:	60e1      	str	r1, [r4, #12]
 800f5bc:	e7ea      	b.n	800f594 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800f5be:	2002      	movs	r0, #2
 800f5c0:	e7f9      	b.n	800f5b6 <HAL_DMA_Start_IT+0x4a>
 800f5c2:	46c0      	nop			; (mov r8, r8)

0800f5c4 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	6802      	ldr	r2, [r0, #0]
{
 800f5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800f5ca:	6813      	ldr	r3, [r2, #0]
{
 800f5cc:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f5ce:	438b      	bics	r3, r1
 800f5d0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f5d2:	f7ff fb4f 	bl	800ec74 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f5d6:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800f5d8:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f5da:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f5dc:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f5de:	e004      	b.n	800f5ea <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f5e0:	f7ff fb48 	bl	800ec74 <HAL_GetTick>
 800f5e4:	1bc0      	subs	r0, r0, r7
 800f5e6:	42b0      	cmp	r0, r6
 800f5e8:	d809      	bhi.n	800f5fe <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	402b      	ands	r3, r5
 800f5f0:	d1f6      	bne.n	800f5e0 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800f5f2:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800f5f4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800f5f6:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800f5f8:	3a01      	subs	r2, #1
 800f5fa:	54a3      	strb	r3, [r4, r2]
}
 800f5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f5fe:	2220      	movs	r2, #32
 800f600:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f602:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f604:	4313      	orrs	r3, r2
 800f606:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f608:	2321      	movs	r3, #33	; 0x21
 800f60a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f60c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800f60e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800f610:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800f612:	e7f3      	b.n	800f5fc <HAL_DMA_Abort+0x38>

0800f614 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f614:	6803      	ldr	r3, [r0, #0]
 800f616:	4aa2      	ldr	r2, [pc, #648]	; (800f8a0 <HAL_DMA_IRQHandler+0x28c>)
{        
 800f618:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f61a:	0019      	movs	r1, r3
{        
 800f61c:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d937      	bls.n	800f692 <HAL_DMA_IRQHandler+0x7e>
 800f622:	48a0      	ldr	r0, [pc, #640]	; (800f8a4 <HAL_DMA_IRQHandler+0x290>)
 800f624:	4da0      	ldr	r5, [pc, #640]	; (800f8a8 <HAL_DMA_IRQHandler+0x294>)
 800f626:	6806      	ldr	r6, [r0, #0]
 800f628:	42ab      	cmp	r3, r5
 800f62a:	d100      	bne.n	800f62e <HAL_DMA_IRQHandler+0x1a>
 800f62c:	e0ed      	b.n	800f80a <HAL_DMA_IRQHandler+0x1f6>
 800f62e:	4d9f      	ldr	r5, [pc, #636]	; (800f8ac <HAL_DMA_IRQHandler+0x298>)
 800f630:	42ab      	cmp	r3, r5
 800f632:	d100      	bne.n	800f636 <HAL_DMA_IRQHandler+0x22>
 800f634:	e334      	b.n	800fca0 <HAL_DMA_IRQHandler+0x68c>
 800f636:	4d9e      	ldr	r5, [pc, #632]	; (800f8b0 <HAL_DMA_IRQHandler+0x29c>)
 800f638:	42ab      	cmp	r3, r5
 800f63a:	d100      	bne.n	800f63e <HAL_DMA_IRQHandler+0x2a>
 800f63c:	e129      	b.n	800f892 <HAL_DMA_IRQHandler+0x27e>
 800f63e:	4d9d      	ldr	r5, [pc, #628]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a0>)
 800f640:	42ab      	cmp	r3, r5
 800f642:	d100      	bne.n	800f646 <HAL_DMA_IRQHandler+0x32>
 800f644:	e34b      	b.n	800fcde <HAL_DMA_IRQHandler+0x6ca>
 800f646:	4d9c      	ldr	r5, [pc, #624]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a4>)
 800f648:	42ab      	cmp	r3, r5
 800f64a:	d100      	bne.n	800f64e <HAL_DMA_IRQHandler+0x3a>
 800f64c:	e38b      	b.n	800fd66 <HAL_DMA_IRQHandler+0x752>
 800f64e:	4d9b      	ldr	r5, [pc, #620]	; (800f8bc <HAL_DMA_IRQHandler+0x2a8>)
 800f650:	42ab      	cmp	r3, r5
 800f652:	d100      	bne.n	800f656 <HAL_DMA_IRQHandler+0x42>
 800f654:	e3cf      	b.n	800fdf6 <HAL_DMA_IRQHandler+0x7e2>
 800f656:	4293      	cmp	r3, r2
 800f658:	d100      	bne.n	800f65c <HAL_DMA_IRQHandler+0x48>
 800f65a:	e35e      	b.n	800fd1a <HAL_DMA_IRQHandler+0x706>
 800f65c:	4a98      	ldr	r2, [pc, #608]	; (800f8c0 <HAL_DMA_IRQHandler+0x2ac>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d101      	bne.n	800f666 <HAL_DMA_IRQHandler+0x52>
 800f662:	f000 fbe8 	bl	800fe36 <HAL_DMA_IRQHandler+0x822>
 800f666:	4a97      	ldr	r2, [pc, #604]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b0>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d101      	bne.n	800f670 <HAL_DMA_IRQHandler+0x5c>
 800f66c:	f000 fc04 	bl	800fe78 <HAL_DMA_IRQHandler+0x864>
 800f670:	4a95      	ldr	r2, [pc, #596]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b4>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d101      	bne.n	800f67a <HAL_DMA_IRQHandler+0x66>
 800f676:	f000 fc21 	bl	800febc <HAL_DMA_IRQHandler+0x8a8>
 800f67a:	4a94      	ldr	r2, [pc, #592]	; (800f8cc <HAL_DMA_IRQHandler+0x2b8>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d101      	bne.n	800f684 <HAL_DMA_IRQHandler+0x70>
 800f680:	f000 fc37 	bl	800fef2 <HAL_DMA_IRQHandler+0x8de>
 800f684:	0332      	lsls	r2, r6, #12
 800f686:	d43c      	bmi.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f688:	4a86      	ldr	r2, [pc, #536]	; (800f8a4 <HAL_DMA_IRQHandler+0x290>)
 800f68a:	6810      	ldr	r0, [r2, #0]
 800f68c:	2280      	movs	r2, #128	; 0x80
 800f68e:	02d2      	lsls	r2, r2, #11
 800f690:	e0c0      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f692:	488f      	ldr	r0, [pc, #572]	; (800f8d0 <HAL_DMA_IRQHandler+0x2bc>)
 800f694:	4d84      	ldr	r5, [pc, #528]	; (800f8a8 <HAL_DMA_IRQHandler+0x294>)
 800f696:	6806      	ldr	r6, [r0, #0]
 800f698:	42ab      	cmp	r3, r5
 800f69a:	d02e      	beq.n	800f6fa <HAL_DMA_IRQHandler+0xe6>
 800f69c:	4d83      	ldr	r5, [pc, #524]	; (800f8ac <HAL_DMA_IRQHandler+0x298>)
 800f69e:	42ab      	cmp	r3, r5
 800f6a0:	d100      	bne.n	800f6a4 <HAL_DMA_IRQHandler+0x90>
 800f6a2:	e2f6      	b.n	800fc92 <HAL_DMA_IRQHandler+0x67e>
 800f6a4:	4d82      	ldr	r5, [pc, #520]	; (800f8b0 <HAL_DMA_IRQHandler+0x29c>)
 800f6a6:	42ab      	cmp	r3, r5
 800f6a8:	d100      	bne.n	800f6ac <HAL_DMA_IRQHandler+0x98>
 800f6aa:	e0ea      	b.n	800f882 <HAL_DMA_IRQHandler+0x26e>
 800f6ac:	4d81      	ldr	r5, [pc, #516]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a0>)
 800f6ae:	42ab      	cmp	r3, r5
 800f6b0:	d100      	bne.n	800f6b4 <HAL_DMA_IRQHandler+0xa0>
 800f6b2:	e30c      	b.n	800fcce <HAL_DMA_IRQHandler+0x6ba>
 800f6b4:	4d80      	ldr	r5, [pc, #512]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a4>)
 800f6b6:	42ab      	cmp	r3, r5
 800f6b8:	d100      	bne.n	800f6bc <HAL_DMA_IRQHandler+0xa8>
 800f6ba:	e35b      	b.n	800fd74 <HAL_DMA_IRQHandler+0x760>
 800f6bc:	4d7f      	ldr	r5, [pc, #508]	; (800f8bc <HAL_DMA_IRQHandler+0x2a8>)
 800f6be:	42ab      	cmp	r3, r5
 800f6c0:	d100      	bne.n	800f6c4 <HAL_DMA_IRQHandler+0xb0>
 800f6c2:	e390      	b.n	800fde6 <HAL_DMA_IRQHandler+0x7d2>
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d100      	bne.n	800f6ca <HAL_DMA_IRQHandler+0xb6>
 800f6c8:	e31f      	b.n	800fd0a <HAL_DMA_IRQHandler+0x6f6>
 800f6ca:	4a7d      	ldr	r2, [pc, #500]	; (800f8c0 <HAL_DMA_IRQHandler+0x2ac>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d100      	bne.n	800f6d2 <HAL_DMA_IRQHandler+0xbe>
 800f6d0:	e3aa      	b.n	800fe28 <HAL_DMA_IRQHandler+0x814>
 800f6d2:	4a7c      	ldr	r2, [pc, #496]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b0>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d100      	bne.n	800f6da <HAL_DMA_IRQHandler+0xc6>
 800f6d8:	e3c7      	b.n	800fe6a <HAL_DMA_IRQHandler+0x856>
 800f6da:	4a7b      	ldr	r2, [pc, #492]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b4>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d101      	bne.n	800f6e4 <HAL_DMA_IRQHandler+0xd0>
 800f6e0:	f000 fbe4 	bl	800feac <HAL_DMA_IRQHandler+0x898>
 800f6e4:	4a79      	ldr	r2, [pc, #484]	; (800f8cc <HAL_DMA_IRQHandler+0x2b8>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d100      	bne.n	800f6ec <HAL_DMA_IRQHandler+0xd8>
 800f6ea:	e2e8      	b.n	800fcbe <HAL_DMA_IRQHandler+0x6aa>
 800f6ec:	0332      	lsls	r2, r6, #12
 800f6ee:	d408      	bmi.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f6f0:	4a77      	ldr	r2, [pc, #476]	; (800f8d0 <HAL_DMA_IRQHandler+0x2bc>)
 800f6f2:	6810      	ldr	r0, [r2, #0]
 800f6f4:	2280      	movs	r2, #128	; 0x80
 800f6f6:	02d2      	lsls	r2, r2, #11
 800f6f8:	e15f      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f6fa:	0732      	lsls	r2, r6, #28
 800f6fc:	d401      	bmi.n	800f702 <HAL_DMA_IRQHandler+0xee>
 800f6fe:	f000 fc0a 	bl	800ff16 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f702:	2208      	movs	r2, #8
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	4202      	tst	r2, r0
 800f708:	d100      	bne.n	800f70c <HAL_DMA_IRQHandler+0xf8>
 800f70a:	e1f4      	b.n	800faf6 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f70c:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f70e:	4d66      	ldr	r5, [pc, #408]	; (800f8a8 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f710:	4390      	bics	r0, r2
 800f712:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f714:	4862      	ldr	r0, [pc, #392]	; (800f8a0 <HAL_DMA_IRQHandler+0x28c>)
 800f716:	4283      	cmp	r3, r0
 800f718:	d800      	bhi.n	800f71c <HAL_DMA_IRQHandler+0x108>
 800f71a:	e1a9      	b.n	800fa70 <HAL_DMA_IRQHandler+0x45c>
 800f71c:	42ab      	cmp	r3, r5
 800f71e:	d100      	bne.n	800f722 <HAL_DMA_IRQHandler+0x10e>
 800f720:	e310      	b.n	800fd44 <HAL_DMA_IRQHandler+0x730>
 800f722:	4a62      	ldr	r2, [pc, #392]	; (800f8ac <HAL_DMA_IRQHandler+0x298>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d100      	bne.n	800f72a <HAL_DMA_IRQHandler+0x116>
 800f728:	e337      	b.n	800fd9a <HAL_DMA_IRQHandler+0x786>
 800f72a:	4a61      	ldr	r2, [pc, #388]	; (800f8b0 <HAL_DMA_IRQHandler+0x29c>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d100      	bne.n	800f732 <HAL_DMA_IRQHandler+0x11e>
 800f730:	e2df      	b.n	800fcf2 <HAL_DMA_IRQHandler+0x6de>
 800f732:	4a60      	ldr	r2, [pc, #384]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a0>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d100      	bne.n	800f73a <HAL_DMA_IRQHandler+0x126>
 800f738:	e370      	b.n	800fe1c <HAL_DMA_IRQHandler+0x808>
 800f73a:	4a5f      	ldr	r2, [pc, #380]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a4>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d100      	bne.n	800f742 <HAL_DMA_IRQHandler+0x12e>
 800f740:	e38a      	b.n	800fe58 <HAL_DMA_IRQHandler+0x844>
 800f742:	4a5e      	ldr	r2, [pc, #376]	; (800f8bc <HAL_DMA_IRQHandler+0x2a8>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d100      	bne.n	800f74a <HAL_DMA_IRQHandler+0x136>
 800f748:	e3a4      	b.n	800fe94 <HAL_DMA_IRQHandler+0x880>
 800f74a:	4283      	cmp	r3, r0
 800f74c:	d100      	bne.n	800f750 <HAL_DMA_IRQHandler+0x13c>
 800f74e:	e3cd      	b.n	800feec <HAL_DMA_IRQHandler+0x8d8>
 800f750:	4a5b      	ldr	r2, [pc, #364]	; (800f8c0 <HAL_DMA_IRQHandler+0x2ac>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d100      	bne.n	800f758 <HAL_DMA_IRQHandler+0x144>
 800f756:	e3d8      	b.n	800ff0a <HAL_DMA_IRQHandler+0x8f6>
 800f758:	4a5a      	ldr	r2, [pc, #360]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b0>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d100      	bne.n	800f760 <HAL_DMA_IRQHandler+0x14c>
 800f75e:	e3d8      	b.n	800ff12 <HAL_DMA_IRQHandler+0x8fe>
 800f760:	4a59      	ldr	r2, [pc, #356]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b4>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d100      	bne.n	800f768 <HAL_DMA_IRQHandler+0x154>
 800f766:	e2c4      	b.n	800fcf2 <HAL_DMA_IRQHandler+0x6de>
 800f768:	4a5a      	ldr	r2, [pc, #360]	; (800f8d4 <HAL_DMA_IRQHandler+0x2c0>)
 800f76a:	189a      	adds	r2, r3, r2
 800f76c:	4250      	negs	r0, r2
 800f76e:	4142      	adcs	r2, r0
 800f770:	4859      	ldr	r0, [pc, #356]	; (800f8d8 <HAL_DMA_IRQHandler+0x2c4>)
 800f772:	4252      	negs	r2, r2
 800f774:	4002      	ands	r2, r0
 800f776:	2080      	movs	r0, #128	; 0x80
 800f778:	0300      	lsls	r0, r0, #12
 800f77a:	4684      	mov	ip, r0
 800f77c:	4462      	add	r2, ip
 800f77e:	4849      	ldr	r0, [pc, #292]	; (800f8a4 <HAL_DMA_IRQHandler+0x290>)
 800f780:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f782:	2001      	movs	r0, #1
 800f784:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f786:	4302      	orrs	r2, r0
 800f788:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f78a:	2221      	movs	r2, #33	; 0x21
 800f78c:	3003      	adds	r0, #3
 800f78e:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800f790:	2000      	movs	r0, #0
 800f792:	3a01      	subs	r2, #1
 800f794:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f796:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f798:	2a00      	cmp	r2, #0
 800f79a:	d000      	beq.n	800f79e <HAL_DMA_IRQHandler+0x18a>
 800f79c:	e1a7      	b.n	800faee <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f79e:	4a41      	ldr	r2, [pc, #260]	; (800f8a4 <HAL_DMA_IRQHandler+0x290>)
 800f7a0:	4d41      	ldr	r5, [pc, #260]	; (800f8a8 <HAL_DMA_IRQHandler+0x294>)
 800f7a2:	6810      	ldr	r0, [r2, #0]
 800f7a4:	2204      	movs	r2, #4
 800f7a6:	42ab      	cmp	r3, r5
 800f7a8:	d034      	beq.n	800f814 <HAL_DMA_IRQHandler+0x200>
 800f7aa:	4d40      	ldr	r5, [pc, #256]	; (800f8ac <HAL_DMA_IRQHandler+0x298>)
 800f7ac:	2240      	movs	r2, #64	; 0x40
 800f7ae:	42ab      	cmp	r3, r5
 800f7b0:	d030      	beq.n	800f814 <HAL_DMA_IRQHandler+0x200>
 800f7b2:	4a3f      	ldr	r2, [pc, #252]	; (800f8b0 <HAL_DMA_IRQHandler+0x29c>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d100      	bne.n	800f7ba <HAL_DMA_IRQHandler+0x1a6>
 800f7b8:	e3b1      	b.n	800ff1e <HAL_DMA_IRQHandler+0x90a>
 800f7ba:	4a3e      	ldr	r2, [pc, #248]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a0>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d100      	bne.n	800f7c2 <HAL_DMA_IRQHandler+0x1ae>
 800f7c0:	e39e      	b.n	800ff00 <HAL_DMA_IRQHandler+0x8ec>
 800f7c2:	4a3d      	ldr	r2, [pc, #244]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a4>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d100      	bne.n	800f7ca <HAL_DMA_IRQHandler+0x1b6>
 800f7c8:	e760      	b.n	800f68c <HAL_DMA_IRQHandler+0x78>
 800f7ca:	4a3c      	ldr	r2, [pc, #240]	; (800f8bc <HAL_DMA_IRQHandler+0x2a8>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d100      	bne.n	800f7d2 <HAL_DMA_IRQHandler+0x1be>
 800f7d0:	e315      	b.n	800fdfe <HAL_DMA_IRQHandler+0x7ea>
 800f7d2:	4a33      	ldr	r2, [pc, #204]	; (800f8a0 <HAL_DMA_IRQHandler+0x28c>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d100      	bne.n	800f7da <HAL_DMA_IRQHandler+0x1c6>
 800f7d8:	e2a3      	b.n	800fd22 <HAL_DMA_IRQHandler+0x70e>
 800f7da:	4d39      	ldr	r5, [pc, #228]	; (800f8c0 <HAL_DMA_IRQHandler+0x2ac>)
 800f7dc:	2204      	movs	r2, #4
 800f7de:	42ab      	cmp	r3, r5
 800f7e0:	d018      	beq.n	800f814 <HAL_DMA_IRQHandler+0x200>
 800f7e2:	4d38      	ldr	r5, [pc, #224]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b0>)
 800f7e4:	323c      	adds	r2, #60	; 0x3c
 800f7e6:	42ab      	cmp	r3, r5
 800f7e8:	d014      	beq.n	800f814 <HAL_DMA_IRQHandler+0x200>
 800f7ea:	4a37      	ldr	r2, [pc, #220]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b4>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d100      	bne.n	800f7f2 <HAL_DMA_IRQHandler+0x1de>
 800f7f0:	e395      	b.n	800ff1e <HAL_DMA_IRQHandler+0x90a>
 800f7f2:	4a38      	ldr	r2, [pc, #224]	; (800f8d4 <HAL_DMA_IRQHandler+0x2c0>)
 800f7f4:	189a      	adds	r2, r3, r2
 800f7f6:	4255      	negs	r5, r2
 800f7f8:	416a      	adcs	r2, r5
 800f7fa:	4d38      	ldr	r5, [pc, #224]	; (800f8dc <HAL_DMA_IRQHandler+0x2c8>)
 800f7fc:	4252      	negs	r2, r2
 800f7fe:	402a      	ands	r2, r5
 800f800:	2580      	movs	r5, #128	; 0x80
 800f802:	02ed      	lsls	r5, r5, #11
 800f804:	46ac      	mov	ip, r5
 800f806:	4462      	add	r2, ip
 800f808:	e004      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f80a:	0732      	lsls	r2, r6, #28
 800f80c:	d500      	bpl.n	800f810 <HAL_DMA_IRQHandler+0x1fc>
 800f80e:	e778      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f810:	2204      	movs	r2, #4
 800f812:	6800      	ldr	r0, [r0, #0]
 800f814:	4210      	tst	r0, r2
 800f816:	d000      	beq.n	800f81a <HAL_DMA_IRQHandler+0x206>
 800f818:	e0d1      	b.n	800f9be <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f81a:	4a22      	ldr	r2, [pc, #136]	; (800f8a4 <HAL_DMA_IRQHandler+0x290>)
 800f81c:	6810      	ldr	r0, [r2, #0]
 800f81e:	4a22      	ldr	r2, [pc, #136]	; (800f8a8 <HAL_DMA_IRQHandler+0x294>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d100      	bne.n	800f826 <HAL_DMA_IRQHandler+0x212>
 800f824:	e122      	b.n	800fa6c <HAL_DMA_IRQHandler+0x458>
 800f826:	4a21      	ldr	r2, [pc, #132]	; (800f8ac <HAL_DMA_IRQHandler+0x298>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d05b      	beq.n	800f8e4 <HAL_DMA_IRQHandler+0x2d0>
 800f82c:	4a20      	ldr	r2, [pc, #128]	; (800f8b0 <HAL_DMA_IRQHandler+0x29c>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d100      	bne.n	800f834 <HAL_DMA_IRQHandler+0x220>
 800f832:	e19a      	b.n	800fb6a <HAL_DMA_IRQHandler+0x556>
 800f834:	4a1f      	ldr	r2, [pc, #124]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a0>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d100      	bne.n	800f83c <HAL_DMA_IRQHandler+0x228>
 800f83a:	e237      	b.n	800fcac <HAL_DMA_IRQHandler+0x698>
 800f83c:	4a1e      	ldr	r2, [pc, #120]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a4>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d100      	bne.n	800f844 <HAL_DMA_IRQHandler+0x230>
 800f842:	e239      	b.n	800fcb8 <HAL_DMA_IRQHandler+0x6a4>
 800f844:	4a1d      	ldr	r2, [pc, #116]	; (800f8bc <HAL_DMA_IRQHandler+0x2a8>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d100      	bne.n	800f84c <HAL_DMA_IRQHandler+0x238>
 800f84a:	e24f      	b.n	800fcec <HAL_DMA_IRQHandler+0x6d8>
 800f84c:	4a14      	ldr	r2, [pc, #80]	; (800f8a0 <HAL_DMA_IRQHandler+0x28c>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d100      	bne.n	800f854 <HAL_DMA_IRQHandler+0x240>
 800f852:	e297      	b.n	800fd84 <HAL_DMA_IRQHandler+0x770>
 800f854:	4a1a      	ldr	r2, [pc, #104]	; (800f8c0 <HAL_DMA_IRQHandler+0x2ac>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d100      	bne.n	800f85c <HAL_DMA_IRQHandler+0x248>
 800f85a:	e107      	b.n	800fa6c <HAL_DMA_IRQHandler+0x458>
 800f85c:	4a19      	ldr	r2, [pc, #100]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b0>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d040      	beq.n	800f8e4 <HAL_DMA_IRQHandler+0x2d0>
 800f862:	4a19      	ldr	r2, [pc, #100]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b4>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d100      	bne.n	800f86a <HAL_DMA_IRQHandler+0x256>
 800f868:	e17f      	b.n	800fb6a <HAL_DMA_IRQHandler+0x556>
 800f86a:	4a1a      	ldr	r2, [pc, #104]	; (800f8d4 <HAL_DMA_IRQHandler+0x2c0>)
 800f86c:	1899      	adds	r1, r3, r2
 800f86e:	424a      	negs	r2, r1
 800f870:	4151      	adcs	r1, r2
 800f872:	4a1b      	ldr	r2, [pc, #108]	; (800f8e0 <HAL_DMA_IRQHandler+0x2cc>)
 800f874:	4249      	negs	r1, r1
 800f876:	400a      	ands	r2, r1
 800f878:	2180      	movs	r1, #128	; 0x80
 800f87a:	0289      	lsls	r1, r1, #10
 800f87c:	468c      	mov	ip, r1
 800f87e:	4462      	add	r2, ip
 800f880:	e031      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f882:	0532      	lsls	r2, r6, #20
 800f884:	d500      	bpl.n	800f888 <HAL_DMA_IRQHandler+0x274>
 800f886:	e73c      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f888:	2280      	movs	r2, #128	; 0x80
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	0019      	movs	r1, r3
 800f88e:	00d2      	lsls	r2, r2, #3
 800f890:	e093      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f892:	0532      	lsls	r2, r6, #20
 800f894:	d500      	bpl.n	800f898 <HAL_DMA_IRQHandler+0x284>
 800f896:	e734      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f898:	2280      	movs	r2, #128	; 0x80
 800f89a:	6800      	ldr	r0, [r0, #0]
 800f89c:	00d2      	lsls	r2, r2, #3
 800f89e:	e7b9      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
 800f8a0:	40020080 	.word	0x40020080
 800f8a4:	40020400 	.word	0x40020400
 800f8a8:	40020008 	.word	0x40020008
 800f8ac:	4002001c 	.word	0x4002001c
 800f8b0:	40020030 	.word	0x40020030
 800f8b4:	40020044 	.word	0x40020044
 800f8b8:	40020058 	.word	0x40020058
 800f8bc:	4002006c 	.word	0x4002006c
 800f8c0:	40020408 	.word	0x40020408
 800f8c4:	4002041c 	.word	0x4002041c
 800f8c8:	40020430 	.word	0x40020430
 800f8cc:	40020444 	.word	0x40020444
 800f8d0:	40020000 	.word	0x40020000
 800f8d4:	bffdfbbc 	.word	0xbffdfbbc
 800f8d8:	fff88000 	.word	0xfff88000
 800f8dc:	fffc4000 	.word	0xfffc4000
 800f8e0:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f8e4:	2220      	movs	r2, #32
 800f8e6:	4002      	ands	r2, r0
 800f8e8:	1e51      	subs	r1, r2, #1
 800f8ea:	418a      	sbcs	r2, r1
 800f8ec:	b2d2      	uxtb	r2, r2
 800f8ee:	2a00      	cmp	r2, #0
 800f8f0:	d050      	beq.n	800f994 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f8f2:	2202      	movs	r2, #2
 800f8f4:	6819      	ldr	r1, [r3, #0]
 800f8f6:	420a      	tst	r2, r1
 800f8f8:	d04c      	beq.n	800f994 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f8fa:	6819      	ldr	r1, [r3, #0]
 800f8fc:	0689      	lsls	r1, r1, #26
 800f8fe:	d402      	bmi.n	800f906 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800f900:	6819      	ldr	r1, [r3, #0]
 800f902:	4391      	bics	r1, r2
 800f904:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f906:	4ab5      	ldr	r2, [pc, #724]	; (800fbdc <HAL_DMA_IRQHandler+0x5c8>)
 800f908:	49b5      	ldr	r1, [pc, #724]	; (800fbe0 <HAL_DMA_IRQHandler+0x5cc>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d800      	bhi.n	800f910 <HAL_DMA_IRQHandler+0x2fc>
 800f90e:	e12f      	b.n	800fb70 <HAL_DMA_IRQHandler+0x55c>
 800f910:	428b      	cmp	r3, r1
 800f912:	d100      	bne.n	800f916 <HAL_DMA_IRQHandler+0x302>
 800f914:	e20e      	b.n	800fd34 <HAL_DMA_IRQHandler+0x720>
 800f916:	49b3      	ldr	r1, [pc, #716]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d0>)
 800f918:	428b      	cmp	r3, r1
 800f91a:	d100      	bne.n	800f91e <HAL_DMA_IRQHandler+0x30a>
 800f91c:	e237      	b.n	800fd8e <HAL_DMA_IRQHandler+0x77a>
 800f91e:	49b2      	ldr	r1, [pc, #712]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d4>)
 800f920:	428b      	cmp	r3, r1
 800f922:	d100      	bne.n	800f926 <HAL_DMA_IRQHandler+0x312>
 800f924:	e271      	b.n	800fe0a <HAL_DMA_IRQHandler+0x7f6>
 800f926:	49b1      	ldr	r1, [pc, #708]	; (800fbec <HAL_DMA_IRQHandler+0x5d8>)
 800f928:	428b      	cmp	r3, r1
 800f92a:	d100      	bne.n	800f92e <HAL_DMA_IRQHandler+0x31a>
 800f92c:	e1fc      	b.n	800fd28 <HAL_DMA_IRQHandler+0x714>
 800f92e:	49b0      	ldr	r1, [pc, #704]	; (800fbf0 <HAL_DMA_IRQHandler+0x5dc>)
 800f930:	428b      	cmp	r3, r1
 800f932:	d100      	bne.n	800f936 <HAL_DMA_IRQHandler+0x322>
 800f934:	e28a      	b.n	800fe4c <HAL_DMA_IRQHandler+0x838>
 800f936:	49af      	ldr	r1, [pc, #700]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e0>)
 800f938:	428b      	cmp	r3, r1
 800f93a:	d100      	bne.n	800f93e <HAL_DMA_IRQHandler+0x32a>
 800f93c:	e2a7      	b.n	800fe8e <HAL_DMA_IRQHandler+0x87a>
 800f93e:	4293      	cmp	r3, r2
 800f940:	d100      	bne.n	800f944 <HAL_DMA_IRQHandler+0x330>
 800f942:	e2c4      	b.n	800fece <HAL_DMA_IRQHandler+0x8ba>
 800f944:	4aac      	ldr	r2, [pc, #688]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e4>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d100      	bne.n	800f94c <HAL_DMA_IRQHandler+0x338>
 800f94a:	e1f3      	b.n	800fd34 <HAL_DMA_IRQHandler+0x720>
 800f94c:	4aab      	ldr	r2, [pc, #684]	; (800fbfc <HAL_DMA_IRQHandler+0x5e8>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d100      	bne.n	800f954 <HAL_DMA_IRQHandler+0x340>
 800f952:	e21c      	b.n	800fd8e <HAL_DMA_IRQHandler+0x77a>
 800f954:	4aaa      	ldr	r2, [pc, #680]	; (800fc00 <HAL_DMA_IRQHandler+0x5ec>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d100      	bne.n	800f95c <HAL_DMA_IRQHandler+0x348>
 800f95a:	e256      	b.n	800fe0a <HAL_DMA_IRQHandler+0x7f6>
 800f95c:	4aa9      	ldr	r2, [pc, #676]	; (800fc04 <HAL_DMA_IRQHandler+0x5f0>)
 800f95e:	4694      	mov	ip, r2
 800f960:	4463      	add	r3, ip
 800f962:	1e5a      	subs	r2, r3, #1
 800f964:	4193      	sbcs	r3, r2
 800f966:	22f0      	movs	r2, #240	; 0xf0
 800f968:	425b      	negs	r3, r3
 800f96a:	0252      	lsls	r2, r2, #9
 800f96c:	4013      	ands	r3, r2
 800f96e:	2280      	movs	r2, #128	; 0x80
 800f970:	0192      	lsls	r2, r2, #6
 800f972:	4694      	mov	ip, r2
 800f974:	4463      	add	r3, ip
 800f976:	4aa4      	ldr	r2, [pc, #656]	; (800fc08 <HAL_DMA_IRQHandler+0x5f4>)
 800f978:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f97a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f97c:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f97e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f980:	2321      	movs	r3, #33	; 0x21
 800f982:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f984:	2200      	movs	r2, #0
 800f986:	3b01      	subs	r3, #1
 800f988:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f98a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 800f990:	0020      	movs	r0, r4
 800f992:	4798      	blx	r3
}  
 800f994:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f996:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f998:	489c      	ldr	r0, [pc, #624]	; (800fc0c <HAL_DMA_IRQHandler+0x5f8>)
 800f99a:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f99c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f99e:	432a      	orrs	r2, r5
 800f9a0:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f9a2:	2221      	movs	r2, #33	; 0x21
 800f9a4:	3503      	adds	r5, #3
 800f9a6:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800f9a8:	2500      	movs	r5, #0
 800f9aa:	3a01      	subs	r2, #1
 800f9ac:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f9ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f9b0:	2a00      	cmp	r2, #0
 800f9b2:	d000      	beq.n	800f9b6 <HAL_DMA_IRQHandler+0x3a2>
 800f9b4:	e09b      	b.n	800faee <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f9b6:	6800      	ldr	r0, [r0, #0]
 800f9b8:	2204      	movs	r2, #4
 800f9ba:	4210      	tst	r0, r2
 800f9bc:	d050      	beq.n	800fa60 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f9be:	2204      	movs	r2, #4
 800f9c0:	6818      	ldr	r0, [r3, #0]
 800f9c2:	4202      	tst	r2, r0
 800f9c4:	d048      	beq.n	800fa58 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f9c6:	6818      	ldr	r0, [r3, #0]
 800f9c8:	0680      	lsls	r0, r0, #26
 800f9ca:	d402      	bmi.n	800f9d2 <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f9cc:	6818      	ldr	r0, [r3, #0]
 800f9ce:	4390      	bics	r0, r2
 800f9d0:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f9d2:	4a82      	ldr	r2, [pc, #520]	; (800fbdc <HAL_DMA_IRQHandler+0x5c8>)
 800f9d4:	4291      	cmp	r1, r2
 800f9d6:	d800      	bhi.n	800f9da <HAL_DMA_IRQHandler+0x3c6>
 800f9d8:	e11e      	b.n	800fc18 <HAL_DMA_IRQHandler+0x604>
 800f9da:	4981      	ldr	r1, [pc, #516]	; (800fbe0 <HAL_DMA_IRQHandler+0x5cc>)
 800f9dc:	428b      	cmp	r3, r1
 800f9de:	d100      	bne.n	800f9e2 <HAL_DMA_IRQHandler+0x3ce>
 800f9e0:	e1ac      	b.n	800fd3c <HAL_DMA_IRQHandler+0x728>
 800f9e2:	4980      	ldr	r1, [pc, #512]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d0>)
 800f9e4:	428b      	cmp	r3, r1
 800f9e6:	d100      	bne.n	800f9ea <HAL_DMA_IRQHandler+0x3d6>
 800f9e8:	e1d5      	b.n	800fd96 <HAL_DMA_IRQHandler+0x782>
 800f9ea:	497f      	ldr	r1, [pc, #508]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d4>)
 800f9ec:	428b      	cmp	r3, r1
 800f9ee:	d100      	bne.n	800f9f2 <HAL_DMA_IRQHandler+0x3de>
 800f9f0:	e188      	b.n	800fd04 <HAL_DMA_IRQHandler+0x6f0>
 800f9f2:	497e      	ldr	r1, [pc, #504]	; (800fbec <HAL_DMA_IRQHandler+0x5d8>)
 800f9f4:	428b      	cmp	r3, r1
 800f9f6:	d100      	bne.n	800f9fa <HAL_DMA_IRQHandler+0x3e6>
 800f9f8:	e20a      	b.n	800fe10 <HAL_DMA_IRQHandler+0x7fc>
 800f9fa:	497d      	ldr	r1, [pc, #500]	; (800fbf0 <HAL_DMA_IRQHandler+0x5dc>)
 800f9fc:	428b      	cmp	r3, r1
 800f9fe:	d100      	bne.n	800fa02 <HAL_DMA_IRQHandler+0x3ee>
 800fa00:	e22d      	b.n	800fe5e <HAL_DMA_IRQHandler+0x84a>
 800fa02:	497c      	ldr	r1, [pc, #496]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e0>)
 800fa04:	428b      	cmp	r3, r1
 800fa06:	d100      	bne.n	800fa0a <HAL_DMA_IRQHandler+0x3f6>
 800fa08:	e247      	b.n	800fe9a <HAL_DMA_IRQHandler+0x886>
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d100      	bne.n	800fa10 <HAL_DMA_IRQHandler+0x3fc>
 800fa0e:	e264      	b.n	800feda <HAL_DMA_IRQHandler+0x8c6>
 800fa10:	4a79      	ldr	r2, [pc, #484]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e4>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d100      	bne.n	800fa18 <HAL_DMA_IRQHandler+0x404>
 800fa16:	e191      	b.n	800fd3c <HAL_DMA_IRQHandler+0x728>
 800fa18:	4a78      	ldr	r2, [pc, #480]	; (800fbfc <HAL_DMA_IRQHandler+0x5e8>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d100      	bne.n	800fa20 <HAL_DMA_IRQHandler+0x40c>
 800fa1e:	e1ba      	b.n	800fd96 <HAL_DMA_IRQHandler+0x782>
 800fa20:	4a77      	ldr	r2, [pc, #476]	; (800fc00 <HAL_DMA_IRQHandler+0x5ec>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d100      	bne.n	800fa28 <HAL_DMA_IRQHandler+0x414>
 800fa26:	e16d      	b.n	800fd04 <HAL_DMA_IRQHandler+0x6f0>
 800fa28:	4a76      	ldr	r2, [pc, #472]	; (800fc04 <HAL_DMA_IRQHandler+0x5f0>)
 800fa2a:	189a      	adds	r2, r3, r2
 800fa2c:	1e51      	subs	r1, r2, #1
 800fa2e:	418a      	sbcs	r2, r1
 800fa30:	21f0      	movs	r1, #240	; 0xf0
 800fa32:	4252      	negs	r2, r2
 800fa34:	0289      	lsls	r1, r1, #10
 800fa36:	400a      	ands	r2, r1
 800fa38:	2180      	movs	r1, #128	; 0x80
 800fa3a:	01c9      	lsls	r1, r1, #7
 800fa3c:	468c      	mov	ip, r1
 800fa3e:	4462      	add	r2, ip
 800fa40:	4971      	ldr	r1, [pc, #452]	; (800fc08 <HAL_DMA_IRQHandler+0x5f4>)
 800fa42:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fa44:	2221      	movs	r2, #33	; 0x21
 800fa46:	2111      	movs	r1, #17
 800fa48:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fa4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	d100      	bne.n	800fa52 <HAL_DMA_IRQHandler+0x43e>
 800fa50:	e6e3      	b.n	800f81a <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 800fa52:	0020      	movs	r0, r4
 800fa54:	4790      	blx	r2
 800fa56:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fa58:	4a60      	ldr	r2, [pc, #384]	; (800fbdc <HAL_DMA_IRQHandler+0x5c8>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d900      	bls.n	800fa60 <HAL_DMA_IRQHandler+0x44c>
 800fa5e:	e6dc      	b.n	800f81a <HAL_DMA_IRQHandler+0x206>
 800fa60:	4a6a      	ldr	r2, [pc, #424]	; (800fc0c <HAL_DMA_IRQHandler+0x5f8>)
 800fa62:	6810      	ldr	r0, [r2, #0]
 800fa64:	4a5e      	ldr	r2, [pc, #376]	; (800fbe0 <HAL_DMA_IRQHandler+0x5cc>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d000      	beq.n	800fa6c <HAL_DMA_IRQHandler+0x458>
 800fa6a:	e6dc      	b.n	800f826 <HAL_DMA_IRQHandler+0x212>
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	e73a      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fa70:	42ab      	cmp	r3, r5
 800fa72:	d090      	beq.n	800f996 <HAL_DMA_IRQHandler+0x382>
 800fa74:	4a5b      	ldr	r2, [pc, #364]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d0>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d100      	bne.n	800fa7c <HAL_DMA_IRQHandler+0x468>
 800fa7a:	e1a1      	b.n	800fdc0 <HAL_DMA_IRQHandler+0x7ac>
 800fa7c:	4a5a      	ldr	r2, [pc, #360]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d4>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d100      	bne.n	800fa84 <HAL_DMA_IRQHandler+0x470>
 800fa82:	e13c      	b.n	800fcfe <HAL_DMA_IRQHandler+0x6ea>
 800fa84:	4a59      	ldr	r2, [pc, #356]	; (800fbec <HAL_DMA_IRQHandler+0x5d8>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d100      	bne.n	800fa8c <HAL_DMA_IRQHandler+0x478>
 800fa8a:	e1ca      	b.n	800fe22 <HAL_DMA_IRQHandler+0x80e>
 800fa8c:	4a58      	ldr	r2, [pc, #352]	; (800fbf0 <HAL_DMA_IRQHandler+0x5dc>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d100      	bne.n	800fa94 <HAL_DMA_IRQHandler+0x480>
 800fa92:	e1de      	b.n	800fe52 <HAL_DMA_IRQHandler+0x83e>
 800fa94:	4a57      	ldr	r2, [pc, #348]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e0>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d100      	bne.n	800fa9c <HAL_DMA_IRQHandler+0x488>
 800fa9a:	e201      	b.n	800fea0 <HAL_DMA_IRQHandler+0x88c>
 800fa9c:	4283      	cmp	r3, r0
 800fa9e:	d100      	bne.n	800faa2 <HAL_DMA_IRQHandler+0x48e>
 800faa0:	e21e      	b.n	800fee0 <HAL_DMA_IRQHandler+0x8cc>
 800faa2:	4a55      	ldr	r2, [pc, #340]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e4>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d100      	bne.n	800faaa <HAL_DMA_IRQHandler+0x496>
 800faa8:	e22d      	b.n	800ff06 <HAL_DMA_IRQHandler+0x8f2>
 800faaa:	4a54      	ldr	r2, [pc, #336]	; (800fbfc <HAL_DMA_IRQHandler+0x5e8>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d100      	bne.n	800fab2 <HAL_DMA_IRQHandler+0x49e>
 800fab0:	e22d      	b.n	800ff0e <HAL_DMA_IRQHandler+0x8fa>
 800fab2:	4a53      	ldr	r2, [pc, #332]	; (800fc00 <HAL_DMA_IRQHandler+0x5ec>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d100      	bne.n	800faba <HAL_DMA_IRQHandler+0x4a6>
 800fab8:	e121      	b.n	800fcfe <HAL_DMA_IRQHandler+0x6ea>
 800faba:	4a52      	ldr	r2, [pc, #328]	; (800fc04 <HAL_DMA_IRQHandler+0x5f0>)
 800fabc:	189a      	adds	r2, r3, r2
 800fabe:	4250      	negs	r0, r2
 800fac0:	4142      	adcs	r2, r0
 800fac2:	4853      	ldr	r0, [pc, #332]	; (800fc10 <HAL_DMA_IRQHandler+0x5fc>)
 800fac4:	4252      	negs	r2, r2
 800fac6:	4002      	ands	r2, r0
 800fac8:	2080      	movs	r0, #128	; 0x80
 800faca:	0300      	lsls	r0, r0, #12
 800facc:	4684      	mov	ip, r0
 800face:	4462      	add	r2, ip
 800fad0:	484e      	ldr	r0, [pc, #312]	; (800fc0c <HAL_DMA_IRQHandler+0x5f8>)
 800fad2:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fad4:	2001      	movs	r0, #1
 800fad6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fad8:	4302      	orrs	r2, r0
 800fada:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fadc:	2221      	movs	r2, #33	; 0x21
 800fade:	3003      	adds	r0, #3
 800fae0:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fae2:	2000      	movs	r0, #0
 800fae4:	3a01      	subs	r2, #1
 800fae6:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fae8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800faea:	2a00      	cmp	r2, #0
 800faec:	d007      	beq.n	800fafe <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 800faee:	0020      	movs	r0, r4
 800faf0:	4790      	blx	r2
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800faf6:	4a39      	ldr	r2, [pc, #228]	; (800fbdc <HAL_DMA_IRQHandler+0x5c8>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d900      	bls.n	800fafe <HAL_DMA_IRQHandler+0x4ea>
 800fafc:	e64f      	b.n	800f79e <HAL_DMA_IRQHandler+0x18a>
 800fafe:	4a43      	ldr	r2, [pc, #268]	; (800fc0c <HAL_DMA_IRQHandler+0x5f8>)
 800fb00:	6810      	ldr	r0, [r2, #0]
 800fb02:	4a37      	ldr	r2, [pc, #220]	; (800fbe0 <HAL_DMA_IRQHandler+0x5cc>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d100      	bne.n	800fb0a <HAL_DMA_IRQHandler+0x4f6>
 800fb08:	e756      	b.n	800f9b8 <HAL_DMA_IRQHandler+0x3a4>
 800fb0a:	4a36      	ldr	r2, [pc, #216]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d0>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d100      	bne.n	800fb12 <HAL_DMA_IRQHandler+0x4fe>
 800fb10:	e0c4      	b.n	800fc9c <HAL_DMA_IRQHandler+0x688>
 800fb12:	4a35      	ldr	r2, [pc, #212]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d4>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d100      	bne.n	800fb1a <HAL_DMA_IRQHandler+0x506>
 800fb18:	e0cb      	b.n	800fcb2 <HAL_DMA_IRQHandler+0x69e>
 800fb1a:	4a34      	ldr	r2, [pc, #208]	; (800fbec <HAL_DMA_IRQHandler+0x5d8>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d100      	bne.n	800fb22 <HAL_DMA_IRQHandler+0x50e>
 800fb20:	e0d2      	b.n	800fcc8 <HAL_DMA_IRQHandler+0x6b4>
 800fb22:	4a33      	ldr	r2, [pc, #204]	; (800fbf0 <HAL_DMA_IRQHandler+0x5dc>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d100      	bne.n	800fb2a <HAL_DMA_IRQHandler+0x516>
 800fb28:	e5e4      	b.n	800f6f4 <HAL_DMA_IRQHandler+0xe0>
 800fb2a:	4a32      	ldr	r2, [pc, #200]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e0>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d100      	bne.n	800fb32 <HAL_DMA_IRQHandler+0x51e>
 800fb30:	e15e      	b.n	800fdf0 <HAL_DMA_IRQHandler+0x7dc>
 800fb32:	4a2a      	ldr	r2, [pc, #168]	; (800fbdc <HAL_DMA_IRQHandler+0x5c8>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d100      	bne.n	800fb3a <HAL_DMA_IRQHandler+0x526>
 800fb38:	e0ec      	b.n	800fd14 <HAL_DMA_IRQHandler+0x700>
 800fb3a:	4a2f      	ldr	r2, [pc, #188]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e4>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d100      	bne.n	800fb42 <HAL_DMA_IRQHandler+0x52e>
 800fb40:	e73a      	b.n	800f9b8 <HAL_DMA_IRQHandler+0x3a4>
 800fb42:	4a2e      	ldr	r2, [pc, #184]	; (800fbfc <HAL_DMA_IRQHandler+0x5e8>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d100      	bne.n	800fb4a <HAL_DMA_IRQHandler+0x536>
 800fb48:	e0a8      	b.n	800fc9c <HAL_DMA_IRQHandler+0x688>
 800fb4a:	4a2d      	ldr	r2, [pc, #180]	; (800fc00 <HAL_DMA_IRQHandler+0x5ec>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d100      	bne.n	800fb52 <HAL_DMA_IRQHandler+0x53e>
 800fb50:	e0af      	b.n	800fcb2 <HAL_DMA_IRQHandler+0x69e>
 800fb52:	4a2c      	ldr	r2, [pc, #176]	; (800fc04 <HAL_DMA_IRQHandler+0x5f0>)
 800fb54:	189a      	adds	r2, r3, r2
 800fb56:	4255      	negs	r5, r2
 800fb58:	416a      	adcs	r2, r5
 800fb5a:	4d2e      	ldr	r5, [pc, #184]	; (800fc14 <HAL_DMA_IRQHandler+0x600>)
 800fb5c:	4252      	negs	r2, r2
 800fb5e:	402a      	ands	r2, r5
 800fb60:	2580      	movs	r5, #128	; 0x80
 800fb62:	02ed      	lsls	r5, r5, #11
 800fb64:	46ac      	mov	ip, r5
 800fb66:	4462      	add	r2, ip
 800fb68:	e727      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fb6a:	2280      	movs	r2, #128	; 0x80
 800fb6c:	0092      	lsls	r2, r2, #2
 800fb6e:	e6ba      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fb70:	428b      	cmp	r3, r1
 800fb72:	d100      	bne.n	800fb76 <HAL_DMA_IRQHandler+0x562>
 800fb74:	e0e0      	b.n	800fd38 <HAL_DMA_IRQHandler+0x724>
 800fb76:	491b      	ldr	r1, [pc, #108]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d0>)
 800fb78:	428b      	cmp	r3, r1
 800fb7a:	d100      	bne.n	800fb7e <HAL_DMA_IRQHandler+0x56a>
 800fb7c:	e105      	b.n	800fd8a <HAL_DMA_IRQHandler+0x776>
 800fb7e:	491a      	ldr	r1, [pc, #104]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d4>)
 800fb80:	428b      	cmp	r3, r1
 800fb82:	d100      	bne.n	800fb86 <HAL_DMA_IRQHandler+0x572>
 800fb84:	e13e      	b.n	800fe04 <HAL_DMA_IRQHandler+0x7f0>
 800fb86:	4919      	ldr	r1, [pc, #100]	; (800fbec <HAL_DMA_IRQHandler+0x5d8>)
 800fb88:	428b      	cmp	r3, r1
 800fb8a:	d100      	bne.n	800fb8e <HAL_DMA_IRQHandler+0x57a>
 800fb8c:	e0cf      	b.n	800fd2e <HAL_DMA_IRQHandler+0x71a>
 800fb8e:	4918      	ldr	r1, [pc, #96]	; (800fbf0 <HAL_DMA_IRQHandler+0x5dc>)
 800fb90:	428b      	cmp	r3, r1
 800fb92:	d100      	bne.n	800fb96 <HAL_DMA_IRQHandler+0x582>
 800fb94:	e157      	b.n	800fe46 <HAL_DMA_IRQHandler+0x832>
 800fb96:	4917      	ldr	r1, [pc, #92]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e0>)
 800fb98:	428b      	cmp	r3, r1
 800fb9a:	d100      	bne.n	800fb9e <HAL_DMA_IRQHandler+0x58a>
 800fb9c:	e174      	b.n	800fe88 <HAL_DMA_IRQHandler+0x874>
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d100      	bne.n	800fba4 <HAL_DMA_IRQHandler+0x590>
 800fba2:	e197      	b.n	800fed4 <HAL_DMA_IRQHandler+0x8c0>
 800fba4:	4a14      	ldr	r2, [pc, #80]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e4>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d100      	bne.n	800fbac <HAL_DMA_IRQHandler+0x598>
 800fbaa:	e0c5      	b.n	800fd38 <HAL_DMA_IRQHandler+0x724>
 800fbac:	4a13      	ldr	r2, [pc, #76]	; (800fbfc <HAL_DMA_IRQHandler+0x5e8>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d100      	bne.n	800fbb4 <HAL_DMA_IRQHandler+0x5a0>
 800fbb2:	e0ea      	b.n	800fd8a <HAL_DMA_IRQHandler+0x776>
 800fbb4:	4a12      	ldr	r2, [pc, #72]	; (800fc00 <HAL_DMA_IRQHandler+0x5ec>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d100      	bne.n	800fbbc <HAL_DMA_IRQHandler+0x5a8>
 800fbba:	e123      	b.n	800fe04 <HAL_DMA_IRQHandler+0x7f0>
 800fbbc:	4a11      	ldr	r2, [pc, #68]	; (800fc04 <HAL_DMA_IRQHandler+0x5f0>)
 800fbbe:	4694      	mov	ip, r2
 800fbc0:	4463      	add	r3, ip
 800fbc2:	1e5a      	subs	r2, r3, #1
 800fbc4:	4193      	sbcs	r3, r2
 800fbc6:	22f0      	movs	r2, #240	; 0xf0
 800fbc8:	425b      	negs	r3, r3
 800fbca:	0252      	lsls	r2, r2, #9
 800fbcc:	4013      	ands	r3, r2
 800fbce:	2280      	movs	r2, #128	; 0x80
 800fbd0:	0192      	lsls	r2, r2, #6
 800fbd2:	4694      	mov	ip, r2
 800fbd4:	4463      	add	r3, ip
 800fbd6:	4a0d      	ldr	r2, [pc, #52]	; (800fc0c <HAL_DMA_IRQHandler+0x5f8>)
 800fbd8:	6053      	str	r3, [r2, #4]
 800fbda:	e6ce      	b.n	800f97a <HAL_DMA_IRQHandler+0x366>
 800fbdc:	40020080 	.word	0x40020080
 800fbe0:	40020008 	.word	0x40020008
 800fbe4:	4002001c 	.word	0x4002001c
 800fbe8:	40020030 	.word	0x40020030
 800fbec:	40020044 	.word	0x40020044
 800fbf0:	40020058 	.word	0x40020058
 800fbf4:	4002006c 	.word	0x4002006c
 800fbf8:	40020408 	.word	0x40020408
 800fbfc:	4002041c 	.word	0x4002041c
 800fc00:	40020430 	.word	0x40020430
 800fc04:	bffdfbbc 	.word	0xbffdfbbc
 800fc08:	40020400 	.word	0x40020400
 800fc0c:	40020000 	.word	0x40020000
 800fc10:	fff88000 	.word	0xfff88000
 800fc14:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fc18:	49c2      	ldr	r1, [pc, #776]	; (800ff24 <HAL_DMA_IRQHandler+0x910>)
 800fc1a:	428b      	cmp	r3, r1
 800fc1c:	d100      	bne.n	800fc20 <HAL_DMA_IRQHandler+0x60c>
 800fc1e:	e08f      	b.n	800fd40 <HAL_DMA_IRQHandler+0x72c>
 800fc20:	49c1      	ldr	r1, [pc, #772]	; (800ff28 <HAL_DMA_IRQHandler+0x914>)
 800fc22:	428b      	cmp	r3, r1
 800fc24:	d100      	bne.n	800fc28 <HAL_DMA_IRQHandler+0x614>
 800fc26:	e0b4      	b.n	800fd92 <HAL_DMA_IRQHandler+0x77e>
 800fc28:	49c0      	ldr	r1, [pc, #768]	; (800ff2c <HAL_DMA_IRQHandler+0x918>)
 800fc2a:	428b      	cmp	r3, r1
 800fc2c:	d064      	beq.n	800fcf8 <HAL_DMA_IRQHandler+0x6e4>
 800fc2e:	49c0      	ldr	r1, [pc, #768]	; (800ff30 <HAL_DMA_IRQHandler+0x91c>)
 800fc30:	428b      	cmp	r3, r1
 800fc32:	d100      	bne.n	800fc36 <HAL_DMA_IRQHandler+0x622>
 800fc34:	e0ef      	b.n	800fe16 <HAL_DMA_IRQHandler+0x802>
 800fc36:	49bf      	ldr	r1, [pc, #764]	; (800ff34 <HAL_DMA_IRQHandler+0x920>)
 800fc38:	428b      	cmp	r3, r1
 800fc3a:	d100      	bne.n	800fc3e <HAL_DMA_IRQHandler+0x62a>
 800fc3c:	e112      	b.n	800fe64 <HAL_DMA_IRQHandler+0x850>
 800fc3e:	49be      	ldr	r1, [pc, #760]	; (800ff38 <HAL_DMA_IRQHandler+0x924>)
 800fc40:	428b      	cmp	r3, r1
 800fc42:	d100      	bne.n	800fc46 <HAL_DMA_IRQHandler+0x632>
 800fc44:	e12f      	b.n	800fea6 <HAL_DMA_IRQHandler+0x892>
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d100      	bne.n	800fc4c <HAL_DMA_IRQHandler+0x638>
 800fc4a:	e14c      	b.n	800fee6 <HAL_DMA_IRQHandler+0x8d2>
 800fc4c:	4abb      	ldr	r2, [pc, #748]	; (800ff3c <HAL_DMA_IRQHandler+0x928>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d076      	beq.n	800fd40 <HAL_DMA_IRQHandler+0x72c>
 800fc52:	4abb      	ldr	r2, [pc, #748]	; (800ff40 <HAL_DMA_IRQHandler+0x92c>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d100      	bne.n	800fc5a <HAL_DMA_IRQHandler+0x646>
 800fc58:	e09b      	b.n	800fd92 <HAL_DMA_IRQHandler+0x77e>
 800fc5a:	4aba      	ldr	r2, [pc, #744]	; (800ff44 <HAL_DMA_IRQHandler+0x930>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d04b      	beq.n	800fcf8 <HAL_DMA_IRQHandler+0x6e4>
 800fc60:	4ab9      	ldr	r2, [pc, #740]	; (800ff48 <HAL_DMA_IRQHandler+0x934>)
 800fc62:	189a      	adds	r2, r3, r2
 800fc64:	1e51      	subs	r1, r2, #1
 800fc66:	418a      	sbcs	r2, r1
 800fc68:	21f0      	movs	r1, #240	; 0xf0
 800fc6a:	4252      	negs	r2, r2
 800fc6c:	0289      	lsls	r1, r1, #10
 800fc6e:	400a      	ands	r2, r1
 800fc70:	2180      	movs	r1, #128	; 0x80
 800fc72:	01c9      	lsls	r1, r1, #7
 800fc74:	468c      	mov	ip, r1
 800fc76:	4462      	add	r2, ip
 800fc78:	49b4      	ldr	r1, [pc, #720]	; (800ff4c <HAL_DMA_IRQHandler+0x938>)
 800fc7a:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fc7c:	2221      	movs	r2, #33	; 0x21
 800fc7e:	2111      	movs	r1, #17
 800fc80:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fc82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc84:	2a00      	cmp	r2, #0
 800fc86:	d100      	bne.n	800fc8a <HAL_DMA_IRQHandler+0x676>
 800fc88:	e6ea      	b.n	800fa60 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 800fc8a:	0020      	movs	r0, r4
 800fc8c:	4790      	blx	r2
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	e6e2      	b.n	800fa58 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fc92:	0632      	lsls	r2, r6, #24
 800fc94:	d500      	bpl.n	800fc98 <HAL_DMA_IRQHandler+0x684>
 800fc96:	e534      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fc98:	0019      	movs	r1, r3
 800fc9a:	6800      	ldr	r0, [r0, #0]
 800fc9c:	2240      	movs	r2, #64	; 0x40
 800fc9e:	e68c      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fca0:	0632      	lsls	r2, r6, #24
 800fca2:	d500      	bpl.n	800fca6 <HAL_DMA_IRQHandler+0x692>
 800fca4:	e52d      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fca6:	6800      	ldr	r0, [r0, #0]
 800fca8:	2240      	movs	r2, #64	; 0x40
 800fcaa:	e5b3      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fcac:	2280      	movs	r2, #128	; 0x80
 800fcae:	0192      	lsls	r2, r2, #6
 800fcb0:	e619      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fcb2:	2280      	movs	r2, #128	; 0x80
 800fcb4:	00d2      	lsls	r2, r2, #3
 800fcb6:	e680      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fcb8:	2280      	movs	r2, #128	; 0x80
 800fcba:	0292      	lsls	r2, r2, #10
 800fcbc:	e613      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fcbe:	0432      	lsls	r2, r6, #16
 800fcc0:	d500      	bpl.n	800fcc4 <HAL_DMA_IRQHandler+0x6b0>
 800fcc2:	e51e      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fcc4:	4aa1      	ldr	r2, [pc, #644]	; (800ff4c <HAL_DMA_IRQHandler+0x938>)
 800fcc6:	6810      	ldr	r0, [r2, #0]
 800fcc8:	2280      	movs	r2, #128	; 0x80
 800fcca:	01d2      	lsls	r2, r2, #7
 800fccc:	e675      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fcce:	0432      	lsls	r2, r6, #16
 800fcd0:	d500      	bpl.n	800fcd4 <HAL_DMA_IRQHandler+0x6c0>
 800fcd2:	e516      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fcd4:	2280      	movs	r2, #128	; 0x80
 800fcd6:	6800      	ldr	r0, [r0, #0]
 800fcd8:	0019      	movs	r1, r3
 800fcda:	01d2      	lsls	r2, r2, #7
 800fcdc:	e66d      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fcde:	0432      	lsls	r2, r6, #16
 800fce0:	d500      	bpl.n	800fce4 <HAL_DMA_IRQHandler+0x6d0>
 800fce2:	e50e      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fce4:	2280      	movs	r2, #128	; 0x80
 800fce6:	6800      	ldr	r0, [r0, #0]
 800fce8:	01d2      	lsls	r2, r2, #7
 800fcea:	e593      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fcec:	2280      	movs	r2, #128	; 0x80
 800fcee:	0392      	lsls	r2, r2, #14
 800fcf0:	e5f9      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fcf2:	2280      	movs	r2, #128	; 0x80
 800fcf4:	0112      	lsls	r2, r2, #4
 800fcf6:	e542      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fcf8:	2280      	movs	r2, #128	; 0x80
 800fcfa:	00d2      	lsls	r2, r2, #3
 800fcfc:	e7bc      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fcfe:	2280      	movs	r2, #128	; 0x80
 800fd00:	0112      	lsls	r2, r2, #4
 800fd02:	e6e5      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd04:	2280      	movs	r2, #128	; 0x80
 800fd06:	00d2      	lsls	r2, r2, #3
 800fd08:	e69a      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd0a:	0132      	lsls	r2, r6, #4
 800fd0c:	d500      	bpl.n	800fd10 <HAL_DMA_IRQHandler+0x6fc>
 800fd0e:	e4f8      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd10:	0019      	movs	r1, r3
 800fd12:	6800      	ldr	r0, [r0, #0]
 800fd14:	2280      	movs	r2, #128	; 0x80
 800fd16:	04d2      	lsls	r2, r2, #19
 800fd18:	e64f      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd1a:	0132      	lsls	r2, r6, #4
 800fd1c:	d500      	bpl.n	800fd20 <HAL_DMA_IRQHandler+0x70c>
 800fd1e:	e4f0      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd20:	6800      	ldr	r0, [r0, #0]
 800fd22:	2280      	movs	r2, #128	; 0x80
 800fd24:	04d2      	lsls	r2, r2, #19
 800fd26:	e575      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fd28:	2380      	movs	r3, #128	; 0x80
 800fd2a:	019b      	lsls	r3, r3, #6
 800fd2c:	e623      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
 800fd2e:	2380      	movs	r3, #128	; 0x80
 800fd30:	019b      	lsls	r3, r3, #6
 800fd32:	e750      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
 800fd34:	2302      	movs	r3, #2
 800fd36:	e61e      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
 800fd38:	2302      	movs	r3, #2
 800fd3a:	e74c      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd3c:	2204      	movs	r2, #4
 800fd3e:	e67f      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
 800fd40:	2204      	movs	r2, #4
 800fd42:	e799      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd44:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd46:	4882      	ldr	r0, [pc, #520]	; (800ff50 <HAL_DMA_IRQHandler+0x93c>)
 800fd48:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fd4c:	432a      	orrs	r2, r5
 800fd4e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fd50:	2221      	movs	r2, #33	; 0x21
 800fd52:	3503      	adds	r5, #3
 800fd54:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fd56:	2500      	movs	r5, #0
 800fd58:	3a01      	subs	r2, #1
 800fd5a:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fd5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fd5e:	2a00      	cmp	r2, #0
 800fd60:	d000      	beq.n	800fd64 <HAL_DMA_IRQHandler+0x750>
 800fd62:	e6c4      	b.n	800faee <HAL_DMA_IRQHandler+0x4da>
 800fd64:	e554      	b.n	800f810 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd66:	0332      	lsls	r2, r6, #12
 800fd68:	d500      	bpl.n	800fd6c <HAL_DMA_IRQHandler+0x758>
 800fd6a:	e4ca      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd6c:	2280      	movs	r2, #128	; 0x80
 800fd6e:	6800      	ldr	r0, [r0, #0]
 800fd70:	02d2      	lsls	r2, r2, #11
 800fd72:	e54f      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd74:	0332      	lsls	r2, r6, #12
 800fd76:	d500      	bpl.n	800fd7a <HAL_DMA_IRQHandler+0x766>
 800fd78:	e4c3      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd7a:	2280      	movs	r2, #128	; 0x80
 800fd7c:	6800      	ldr	r0, [r0, #0]
 800fd7e:	0019      	movs	r1, r3
 800fd80:	02d2      	lsls	r2, r2, #11
 800fd82:	e61a      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fd84:	2280      	movs	r2, #128	; 0x80
 800fd86:	0492      	lsls	r2, r2, #18
 800fd88:	e5ad      	b.n	800f8e6 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fd8a:	2320      	movs	r3, #32
 800fd8c:	e723      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
 800fd8e:	2320      	movs	r3, #32
 800fd90:	e5f1      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd92:	2240      	movs	r2, #64	; 0x40
 800fd94:	e770      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
 800fd96:	2240      	movs	r2, #64	; 0x40
 800fd98:	e652      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd9a:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd9c:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd9e:	486c      	ldr	r0, [pc, #432]	; (800ff50 <HAL_DMA_IRQHandler+0x93c>)
 800fda0:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fda2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fda4:	432a      	orrs	r2, r5
 800fda6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fda8:	2221      	movs	r2, #33	; 0x21
 800fdaa:	3503      	adds	r5, #3
 800fdac:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fdae:	2500      	movs	r5, #0
 800fdb0:	3a01      	subs	r2, #1
 800fdb2:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fdb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fdb6:	2a00      	cmp	r2, #0
 800fdb8:	d000      	beq.n	800fdbc <HAL_DMA_IRQHandler+0x7a8>
 800fdba:	e698      	b.n	800faee <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdbc:	6800      	ldr	r0, [r0, #0]
 800fdbe:	e4f4      	b.n	800f7aa <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fdc0:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fdc2:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fdc4:	4861      	ldr	r0, [pc, #388]	; (800ff4c <HAL_DMA_IRQHandler+0x938>)
 800fdc6:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fdc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fdca:	432a      	orrs	r2, r5
 800fdcc:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fdce:	2221      	movs	r2, #33	; 0x21
 800fdd0:	3503      	adds	r5, #3
 800fdd2:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fdd4:	2500      	movs	r5, #0
 800fdd6:	3a01      	subs	r2, #1
 800fdd8:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fdda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	d000      	beq.n	800fde2 <HAL_DMA_IRQHandler+0x7ce>
 800fde0:	e685      	b.n	800faee <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fde2:	6800      	ldr	r0, [r0, #0]
 800fde4:	e691      	b.n	800fb0a <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fde6:	0232      	lsls	r2, r6, #8
 800fde8:	d500      	bpl.n	800fdec <HAL_DMA_IRQHandler+0x7d8>
 800fdea:	e48a      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdec:	0019      	movs	r1, r3
 800fdee:	6800      	ldr	r0, [r0, #0]
 800fdf0:	2280      	movs	r2, #128	; 0x80
 800fdf2:	03d2      	lsls	r2, r2, #15
 800fdf4:	e5e1      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fdf6:	0232      	lsls	r2, r6, #8
 800fdf8:	d500      	bpl.n	800fdfc <HAL_DMA_IRQHandler+0x7e8>
 800fdfa:	e482      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdfc:	6800      	ldr	r0, [r0, #0]
 800fdfe:	2280      	movs	r2, #128	; 0x80
 800fe00:	03d2      	lsls	r2, r2, #15
 800fe02:	e507      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe04:	2380      	movs	r3, #128	; 0x80
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	e6e5      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
 800fe0a:	2380      	movs	r3, #128	; 0x80
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	e5b2      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe10:	2280      	movs	r2, #128	; 0x80
 800fe12:	01d2      	lsls	r2, r2, #7
 800fe14:	e614      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
 800fe16:	2280      	movs	r2, #128	; 0x80
 800fe18:	01d2      	lsls	r2, r2, #7
 800fe1a:	e72d      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe1c:	2280      	movs	r2, #128	; 0x80
 800fe1e:	0212      	lsls	r2, r2, #8
 800fe20:	e4ad      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
 800fe22:	2280      	movs	r2, #128	; 0x80
 800fe24:	0212      	lsls	r2, r2, #8
 800fe26:	e653      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe28:	0732      	lsls	r2, r6, #28
 800fe2a:	d500      	bpl.n	800fe2e <HAL_DMA_IRQHandler+0x81a>
 800fe2c:	e469      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe2e:	4a47      	ldr	r2, [pc, #284]	; (800ff4c <HAL_DMA_IRQHandler+0x938>)
 800fe30:	6810      	ldr	r0, [r2, #0]
 800fe32:	2204      	movs	r2, #4
 800fe34:	e5c1      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe36:	0732      	lsls	r2, r6, #28
 800fe38:	d500      	bpl.n	800fe3c <HAL_DMA_IRQHandler+0x828>
 800fe3a:	e462      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe3c:	4a44      	ldr	r2, [pc, #272]	; (800ff50 <HAL_DMA_IRQHandler+0x93c>)
 800fe3e:	493f      	ldr	r1, [pc, #252]	; (800ff3c <HAL_DMA_IRQHandler+0x928>)
 800fe40:	6810      	ldr	r0, [r2, #0]
 800fe42:	2204      	movs	r2, #4
 800fe44:	e4e6      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe46:	2380      	movs	r3, #128	; 0x80
 800fe48:	029b      	lsls	r3, r3, #10
 800fe4a:	e6c4      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
 800fe4c:	2380      	movs	r3, #128	; 0x80
 800fe4e:	029b      	lsls	r3, r3, #10
 800fe50:	e591      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe52:	2280      	movs	r2, #128	; 0x80
 800fe54:	0312      	lsls	r2, r2, #12
 800fe56:	e63b      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
 800fe58:	2280      	movs	r2, #128	; 0x80
 800fe5a:	0312      	lsls	r2, r2, #12
 800fe5c:	e48f      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe5e:	2280      	movs	r2, #128	; 0x80
 800fe60:	02d2      	lsls	r2, r2, #11
 800fe62:	e5ed      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
 800fe64:	2280      	movs	r2, #128	; 0x80
 800fe66:	02d2      	lsls	r2, r2, #11
 800fe68:	e706      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe6a:	0632      	lsls	r2, r6, #24
 800fe6c:	d500      	bpl.n	800fe70 <HAL_DMA_IRQHandler+0x85c>
 800fe6e:	e448      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe70:	4a36      	ldr	r2, [pc, #216]	; (800ff4c <HAL_DMA_IRQHandler+0x938>)
 800fe72:	6810      	ldr	r0, [r2, #0]
 800fe74:	2240      	movs	r2, #64	; 0x40
 800fe76:	e5a0      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe78:	0632      	lsls	r2, r6, #24
 800fe7a:	d500      	bpl.n	800fe7e <HAL_DMA_IRQHandler+0x86a>
 800fe7c:	e441      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe7e:	4a34      	ldr	r2, [pc, #208]	; (800ff50 <HAL_DMA_IRQHandler+0x93c>)
 800fe80:	492f      	ldr	r1, [pc, #188]	; (800ff40 <HAL_DMA_IRQHandler+0x92c>)
 800fe82:	6810      	ldr	r0, [r2, #0]
 800fe84:	2240      	movs	r2, #64	; 0x40
 800fe86:	e4c5      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe88:	2380      	movs	r3, #128	; 0x80
 800fe8a:	039b      	lsls	r3, r3, #14
 800fe8c:	e6a3      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
 800fe8e:	2380      	movs	r3, #128	; 0x80
 800fe90:	039b      	lsls	r3, r3, #14
 800fe92:	e570      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe94:	2280      	movs	r2, #128	; 0x80
 800fe96:	0412      	lsls	r2, r2, #16
 800fe98:	e471      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe9a:	2280      	movs	r2, #128	; 0x80
 800fe9c:	03d2      	lsls	r2, r2, #15
 800fe9e:	e5cf      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fea0:	2280      	movs	r2, #128	; 0x80
 800fea2:	0412      	lsls	r2, r2, #16
 800fea4:	e614      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fea6:	2280      	movs	r2, #128	; 0x80
 800fea8:	03d2      	lsls	r2, r2, #15
 800feaa:	e6e5      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800feac:	0532      	lsls	r2, r6, #20
 800feae:	d500      	bpl.n	800feb2 <HAL_DMA_IRQHandler+0x89e>
 800feb0:	e427      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800feb2:	4a26      	ldr	r2, [pc, #152]	; (800ff4c <HAL_DMA_IRQHandler+0x938>)
 800feb4:	6810      	ldr	r0, [r2, #0]
 800feb6:	2280      	movs	r2, #128	; 0x80
 800feb8:	00d2      	lsls	r2, r2, #3
 800feba:	e57e      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800febc:	0532      	lsls	r2, r6, #20
 800febe:	d500      	bpl.n	800fec2 <HAL_DMA_IRQHandler+0x8ae>
 800fec0:	e41f      	b.n	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fec2:	4a23      	ldr	r2, [pc, #140]	; (800ff50 <HAL_DMA_IRQHandler+0x93c>)
 800fec4:	0019      	movs	r1, r3
 800fec6:	6810      	ldr	r0, [r2, #0]
 800fec8:	2280      	movs	r2, #128	; 0x80
 800feca:	00d2      	lsls	r2, r2, #3
 800fecc:	e4a2      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fece:	2380      	movs	r3, #128	; 0x80
 800fed0:	049b      	lsls	r3, r3, #18
 800fed2:	e550      	b.n	800f976 <HAL_DMA_IRQHandler+0x362>
 800fed4:	2380      	movs	r3, #128	; 0x80
 800fed6:	049b      	lsls	r3, r3, #18
 800fed8:	e67d      	b.n	800fbd6 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800feda:	2280      	movs	r2, #128	; 0x80
 800fedc:	04d2      	lsls	r2, r2, #19
 800fede:	e5af      	b.n	800fa40 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fee0:	2280      	movs	r2, #128	; 0x80
 800fee2:	0512      	lsls	r2, r2, #20
 800fee4:	e5f4      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fee6:	2280      	movs	r2, #128	; 0x80
 800fee8:	04d2      	lsls	r2, r2, #19
 800feea:	e6c5      	b.n	800fc78 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800feec:	2280      	movs	r2, #128	; 0x80
 800feee:	0512      	lsls	r2, r2, #20
 800fef0:	e445      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fef2:	0432      	lsls	r2, r6, #16
 800fef4:	d501      	bpl.n	800fefa <HAL_DMA_IRQHandler+0x8e6>
 800fef6:	f7ff fc04 	bl	800f702 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fefa:	0019      	movs	r1, r3
 800fefc:	4a14      	ldr	r2, [pc, #80]	; (800ff50 <HAL_DMA_IRQHandler+0x93c>)
 800fefe:	6810      	ldr	r0, [r2, #0]
 800ff00:	2280      	movs	r2, #128	; 0x80
 800ff02:	01d2      	lsls	r2, r2, #7
 800ff04:	e486      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ff06:	2208      	movs	r2, #8
 800ff08:	e5e2      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
 800ff0a:	2208      	movs	r2, #8
 800ff0c:	e437      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
 800ff0e:	2280      	movs	r2, #128	; 0x80
 800ff10:	e5de      	b.n	800fad0 <HAL_DMA_IRQHandler+0x4bc>
 800ff12:	2280      	movs	r2, #128	; 0x80
 800ff14:	e433      	b.n	800f77e <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff16:	6800      	ldr	r0, [r0, #0]
 800ff18:	0019      	movs	r1, r3
 800ff1a:	2204      	movs	r2, #4
 800ff1c:	e54d      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3a6>
 800ff1e:	2280      	movs	r2, #128	; 0x80
 800ff20:	00d2      	lsls	r2, r2, #3
 800ff22:	e477      	b.n	800f814 <HAL_DMA_IRQHandler+0x200>
 800ff24:	40020008 	.word	0x40020008
 800ff28:	4002001c 	.word	0x4002001c
 800ff2c:	40020030 	.word	0x40020030
 800ff30:	40020044 	.word	0x40020044
 800ff34:	40020058 	.word	0x40020058
 800ff38:	4002006c 	.word	0x4002006c
 800ff3c:	40020408 	.word	0x40020408
 800ff40:	4002041c 	.word	0x4002041c
 800ff44:	40020430 	.word	0x40020430
 800ff48:	bffdfbbc 	.word	0xbffdfbbc
 800ff4c:	40020000 	.word	0x40020000
 800ff50:	40020400 	.word	0x40020400

0800ff54 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 800ff56:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800ff58:	691a      	ldr	r2, [r3, #16]
 800ff5a:	0612      	lsls	r2, r2, #24
 800ff5c:	d504      	bpl.n	800ff68 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 800ff5e:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ff60:	4a03      	ldr	r2, [pc, #12]	; (800ff70 <HAL_FLASH_Unlock+0x1c>)
 800ff62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ff64:	4a03      	ldr	r2, [pc, #12]	; (800ff74 <HAL_FLASH_Unlock+0x20>)
 800ff66:	605a      	str	r2, [r3, #4]
}
 800ff68:	4770      	bx	lr
 800ff6a:	46c0      	nop			; (mov r8, r8)
 800ff6c:	40022000 	.word	0x40022000
 800ff70:	45670123 	.word	0x45670123
 800ff74:	cdef89ab 	.word	0xcdef89ab

0800ff78 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ff78:	2180      	movs	r1, #128	; 0x80
 800ff7a:	4a03      	ldr	r2, [pc, #12]	; (800ff88 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 800ff7c:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ff7e:	6913      	ldr	r3, [r2, #16]
 800ff80:	430b      	orrs	r3, r1
 800ff82:	6113      	str	r3, [r2, #16]
}
 800ff84:	4770      	bx	lr
 800ff86:	46c0      	nop			; (mov r8, r8)
 800ff88:	40022000 	.word	0x40022000

0800ff8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ff8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff8e:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ff90:	f7fe fe70 	bl	800ec74 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ff94:	4c1d      	ldr	r4, [pc, #116]	; (801000c <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 800ff96:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ff98:	2601      	movs	r6, #1
 800ff9a:	e001      	b.n	800ffa0 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ff9c:	1c6b      	adds	r3, r5, #1
 800ff9e:	d11d      	bne.n	800ffdc <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ffa0:	68e3      	ldr	r3, [r4, #12]
 800ffa2:	421e      	tst	r6, r3
 800ffa4:	d1fa      	bne.n	800ff9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ffa6:	2320      	movs	r3, #32
 800ffa8:	68e2      	ldr	r2, [r4, #12]
 800ffaa:	4213      	tst	r3, r2
 800ffac:	d000      	beq.n	800ffb0 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ffae:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffb0:	4b16      	ldr	r3, [pc, #88]	; (801000c <FLASH_WaitForLastOperation+0x80>)
 800ffb2:	68da      	ldr	r2, [r3, #12]
 800ffb4:	06d2      	lsls	r2, r2, #27
 800ffb6:	d51a      	bpl.n	800ffee <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ffb8:	4b14      	ldr	r3, [pc, #80]	; (801000c <FLASH_WaitForLastOperation+0x80>)
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	06db      	lsls	r3, r3, #27
 800ffbe:	d504      	bpl.n	800ffca <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ffc0:	2102      	movs	r1, #2
 800ffc2:	4a13      	ldr	r2, [pc, #76]	; (8010010 <FLASH_WaitForLastOperation+0x84>)
 800ffc4:	69d3      	ldr	r3, [r2, #28]
 800ffc6:	430b      	orrs	r3, r1
 800ffc8:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffca:	4b10      	ldr	r3, [pc, #64]	; (801000c <FLASH_WaitForLastOperation+0x80>)
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	075b      	lsls	r3, r3, #29
 800ffd0:	d416      	bmi.n	8010000 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800ffd2:	2214      	movs	r2, #20
    return HAL_ERROR;
 800ffd4:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800ffd6:	4b0d      	ldr	r3, [pc, #52]	; (801000c <FLASH_WaitForLastOperation+0x80>)
 800ffd8:	60da      	str	r2, [r3, #12]
}
 800ffda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ffdc:	2d00      	cmp	r5, #0
 800ffde:	d004      	beq.n	800ffea <FLASH_WaitForLastOperation+0x5e>
 800ffe0:	f7fe fe48 	bl	800ec74 <HAL_GetTick>
 800ffe4:	1bc0      	subs	r0, r0, r7
 800ffe6:	42a8      	cmp	r0, r5
 800ffe8:	d9da      	bls.n	800ffa0 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 800ffea:	2003      	movs	r0, #3
 800ffec:	e7f5      	b.n	800ffda <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffee:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 800fff0:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800fff2:	075b      	lsls	r3, r3, #29
 800fff4:	d5f1      	bpl.n	800ffda <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fff6:	4b05      	ldr	r3, [pc, #20]	; (801000c <FLASH_WaitForLastOperation+0x80>)
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	06db      	lsls	r3, r3, #27
 800fffc:	d5e5      	bpl.n	800ffca <FLASH_WaitForLastOperation+0x3e>
 800fffe:	e7df      	b.n	800ffc0 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010000:	2101      	movs	r1, #1
 8010002:	4a03      	ldr	r2, [pc, #12]	; (8010010 <FLASH_WaitForLastOperation+0x84>)
 8010004:	69d3      	ldr	r3, [r2, #28]
 8010006:	430b      	orrs	r3, r1
 8010008:	61d3      	str	r3, [r2, #28]
 801000a:	e7e2      	b.n	800ffd2 <FLASH_WaitForLastOperation+0x46>
 801000c:	40022000 	.word	0x40022000
 8010010:	20006fc0 	.word	0x20006fc0

08010014 <HAL_FLASH_Program>:
{
 8010014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010016:	464e      	mov	r6, r9
 8010018:	4657      	mov	r7, sl
 801001a:	46de      	mov	lr, fp
 801001c:	4645      	mov	r5, r8
 801001e:	b5e0      	push	{r5, r6, r7, lr}
 8010020:	469a      	mov	sl, r3
 8010022:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010024:	4b2a      	ldr	r3, [pc, #168]	; (80100d0 <HAL_FLASH_Program+0xbc>)
{
 8010026:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010028:	4699      	mov	r9, r3
 801002a:	7e1b      	ldrb	r3, [r3, #24]
{
 801002c:	0004      	movs	r4, r0
 801002e:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8010030:	2b01      	cmp	r3, #1
 8010032:	d048      	beq.n	80100c6 <HAL_FLASH_Program+0xb2>
 8010034:	2501      	movs	r5, #1
 8010036:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010038:	4826      	ldr	r0, [pc, #152]	; (80100d4 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 801003a:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801003c:	f7ff ffa6 	bl	800ff8c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010040:	2800      	cmp	r0, #0
 8010042:	d136      	bne.n	80100b2 <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010044:	2c01      	cmp	r4, #1
 8010046:	d040      	beq.n	80100ca <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010048:	3c02      	subs	r4, #2
 801004a:	4263      	negs	r3, r4
 801004c:	415c      	adcs	r4, r3
 801004e:	2304      	movs	r3, #4
 8010050:	4264      	negs	r4, r4
 8010052:	43ac      	bics	r4, r5
 8010054:	46a0      	mov	r8, r4
 8010056:	469c      	mov	ip, r3
 8010058:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801005a:	2300      	movs	r3, #0
      nbiterations = 4;
 801005c:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801005e:	469b      	mov	fp, r3
 8010060:	e018      	b.n	8010094 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010062:	4653      	mov	r3, sl
 8010064:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010066:	464a      	mov	r2, r9
 8010068:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801006a:	2701      	movs	r7, #1
 801006c:	4c1a      	ldr	r4, [pc, #104]	; (80100d8 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801006e:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010070:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010072:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010074:	433a      	orrs	r2, r7
 8010076:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010078:	4816      	ldr	r0, [pc, #88]	; (80100d4 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 801007a:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801007c:	f7ff ff86 	bl	800ff8c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010080:	6923      	ldr	r3, [r4, #16]
 8010082:	43bb      	bics	r3, r7
 8010084:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010086:	2800      	cmp	r0, #0
 8010088:	d113      	bne.n	80100b2 <HAL_FLASH_Program+0x9e>
 801008a:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 801008c:	b2eb      	uxtb	r3, r5
 801008e:	3602      	adds	r6, #2
 8010090:	4598      	cmp	r8, r3
 8010092:	d90e      	bls.n	80100b2 <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010094:	2220      	movs	r2, #32
 8010096:	012b      	lsls	r3, r5, #4
 8010098:	4252      	negs	r2, r2
 801009a:	189a      	adds	r2, r3, r2
 801009c:	d5e1      	bpl.n	8010062 <HAL_FLASH_Program+0x4e>
 801009e:	2220      	movs	r2, #32
 80100a0:	4651      	mov	r1, sl
 80100a2:	1ad2      	subs	r2, r2, r3
 80100a4:	4091      	lsls	r1, r2
 80100a6:	000a      	movs	r2, r1
 80100a8:	9901      	ldr	r1, [sp, #4]
 80100aa:	40d9      	lsrs	r1, r3
 80100ac:	000b      	movs	r3, r1
 80100ae:	4313      	orrs	r3, r2
 80100b0:	e7d9      	b.n	8010066 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80100b2:	2300      	movs	r3, #0
 80100b4:	464a      	mov	r2, r9
 80100b6:	7613      	strb	r3, [r2, #24]
}
 80100b8:	b003      	add	sp, #12
 80100ba:	bc3c      	pop	{r2, r3, r4, r5}
 80100bc:	4690      	mov	r8, r2
 80100be:	4699      	mov	r9, r3
 80100c0:	46a2      	mov	sl, r4
 80100c2:	46ab      	mov	fp, r5
 80100c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80100c6:	2002      	movs	r0, #2
 80100c8:	e7f6      	b.n	80100b8 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 80100ca:	2301      	movs	r3, #1
 80100cc:	4698      	mov	r8, r3
 80100ce:	e7c4      	b.n	801005a <HAL_FLASH_Program+0x46>
 80100d0:	20006fc0 	.word	0x20006fc0
 80100d4:	0000c350 	.word	0x0000c350
 80100d8:	40022000 	.word	0x40022000

080100dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80100dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100de:	464f      	mov	r7, r9
 80100e0:	4646      	mov	r6, r8
 80100e2:	46d6      	mov	lr, sl
 80100e4:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80100e6:	4f30      	ldr	r7, [pc, #192]	; (80101a8 <HAL_FLASHEx_Erase+0xcc>)
{
 80100e8:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80100ea:	7e3b      	ldrb	r3, [r7, #24]
{
 80100ec:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d057      	beq.n	80101a2 <HAL_FLASHEx_Erase+0xc6>
 80100f2:	2301      	movs	r3, #1
 80100f4:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80100f6:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80100f8:	482c      	ldr	r0, [pc, #176]	; (80101ac <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d034      	beq.n	8010168 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80100fe:	f7ff ff45 	bl	800ff8c <FLASH_WaitForLastOperation>
 8010102:	2800      	cmp	r0, #0
 8010104:	d134      	bne.n	8010170 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010106:	2301      	movs	r3, #1
 8010108:	464a      	mov	r2, r9
 801010a:	425b      	negs	r3, r3
 801010c:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801010e:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010110:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010112:	02db      	lsls	r3, r3, #11
 8010114:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010116:	429d      	cmp	r5, r3
 8010118:	d22a      	bcs.n	8010170 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801011a:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801011c:	4c24      	ldr	r4, [pc, #144]	; (80101b0 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801011e:	4698      	mov	r8, r3
 8010120:	e00a      	b.n	8010138 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8010122:	2380      	movs	r3, #128	; 0x80
 8010124:	011b      	lsls	r3, r3, #4
 8010126:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010128:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 801012a:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801012c:	4694      	mov	ip, r2
 801012e:	68b3      	ldr	r3, [r6, #8]
 8010130:	02db      	lsls	r3, r3, #11
 8010132:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010134:	42ab      	cmp	r3, r5
 8010136:	d91c      	bls.n	8010172 <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010138:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801013a:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801013c:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801013e:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010140:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010142:	481a      	ldr	r0, [pc, #104]	; (80101ac <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010144:	4313      	orrs	r3, r2
 8010146:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010148:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	323e      	adds	r2, #62	; 0x3e
 801014e:	4313      	orrs	r3, r2
 8010150:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010152:	f7ff ff1b 	bl	800ff8c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010156:	4652      	mov	r2, sl
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	4393      	bics	r3, r2
 801015c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 801015e:	2800      	cmp	r0, #0
 8010160:	d0df      	beq.n	8010122 <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010162:	464b      	mov	r3, r9
 8010164:	601d      	str	r5, [r3, #0]
            break;
 8010166:	e004      	b.n	8010172 <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010168:	f7ff ff10 	bl	800ff8c <FLASH_WaitForLastOperation>
 801016c:	2800      	cmp	r0, #0
 801016e:	d007      	beq.n	8010180 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010170:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010172:	2300      	movs	r3, #0
 8010174:	763b      	strb	r3, [r7, #24]
}
 8010176:	bc1c      	pop	{r2, r3, r4}
 8010178:	4690      	mov	r8, r2
 801017a:	4699      	mov	r9, r3
 801017c:	46a2      	mov	sl, r4
 801017e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010180:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010182:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010184:	4c0a      	ldr	r4, [pc, #40]	; (80101b0 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010186:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010188:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801018a:	4808      	ldr	r0, [pc, #32]	; (80101ac <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801018c:	432b      	orrs	r3, r5
 801018e:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010190:	6923      	ldr	r3, [r4, #16]
 8010192:	4313      	orrs	r3, r2
 8010194:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010196:	f7ff fef9 	bl	800ff8c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	43ab      	bics	r3, r5
 801019e:	6123      	str	r3, [r4, #16]
 80101a0:	e7e7      	b.n	8010172 <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 80101a2:	2002      	movs	r0, #2
 80101a4:	e7e7      	b.n	8010176 <HAL_FLASHEx_Erase+0x9a>
 80101a6:	46c0      	nop			; (mov r8, r8)
 80101a8:	20006fc0 	.word	0x20006fc0
 80101ac:	0000c350 	.word	0x0000c350
 80101b0:	40022000 	.word	0x40022000

080101b4 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80101b4:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80101b6:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <FLASH_PageErase+0x1c>)
 80101ba:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80101bc:	4b05      	ldr	r3, [pc, #20]	; (80101d4 <FLASH_PageErase+0x20>)
 80101be:	691a      	ldr	r2, [r3, #16]
 80101c0:	430a      	orrs	r2, r1
 80101c2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80101c4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80101c6:	691a      	ldr	r2, [r3, #16]
 80101c8:	313e      	adds	r1, #62	; 0x3e
 80101ca:	430a      	orrs	r2, r1
 80101cc:	611a      	str	r2, [r3, #16]
}
 80101ce:	4770      	bx	lr
 80101d0:	20006fc0 	.word	0x20006fc0
 80101d4:	40022000 	.word	0x40022000

080101d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80101d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101da:	464e      	mov	r6, r9
 80101dc:	46de      	mov	lr, fp
 80101de:	4657      	mov	r7, sl
 80101e0:	4645      	mov	r5, r8
 80101e2:	b5e0      	push	{r5, r6, r7, lr}
 80101e4:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80101e6:	6809      	ldr	r1, [r1, #0]
{ 
 80101e8:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 80101ea:	2900      	cmp	r1, #0
 80101ec:	d100      	bne.n	80101f0 <HAL_GPIO_Init+0x18>
 80101ee:	e080      	b.n	80102f2 <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80101f0:	4b70      	ldr	r3, [pc, #448]	; (80103b4 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 80101f2:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80101f4:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80101f6:	4b70      	ldr	r3, [pc, #448]	; (80103b8 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80101f8:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 80101fa:	4698      	mov	r8, r3
 80101fc:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80101fe:	0033      	movs	r3, r6
 8010200:	4652      	mov	r2, sl
 8010202:	40a3      	lsls	r3, r4
 8010204:	4013      	ands	r3, r2
 8010206:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010208:	d06f      	beq.n	80102ea <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801020a:	464b      	mov	r3, r9
 801020c:	6859      	ldr	r1, [r3, #4]
 801020e:	2310      	movs	r3, #16
 8010210:	000f      	movs	r7, r1
 8010212:	439f      	bics	r7, r3
 8010214:	003b      	movs	r3, r7
 8010216:	9701      	str	r7, [sp, #4]
 8010218:	2f02      	cmp	r7, #2
 801021a:	d100      	bne.n	801021e <HAL_GPIO_Init+0x46>
 801021c:	e070      	b.n	8010300 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801021e:	2203      	movs	r2, #3
 8010220:	0065      	lsls	r5, r4, #1
 8010222:	40aa      	lsls	r2, r5
 8010224:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010226:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010228:	4013      	ands	r3, r2
 801022a:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801022c:	2303      	movs	r3, #3
 801022e:	400b      	ands	r3, r1
 8010230:	40ab      	lsls	r3, r5
 8010232:	469c      	mov	ip, r3
 8010234:	003b      	movs	r3, r7
 8010236:	4667      	mov	r7, ip
 8010238:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801023a:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 801023c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801023e:	3f01      	subs	r7, #1
 8010240:	2f01      	cmp	r7, #1
 8010242:	d800      	bhi.n	8010246 <HAL_GPIO_Init+0x6e>
 8010244:	e079      	b.n	801033a <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010246:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010248:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 801024a:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801024c:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801024e:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010250:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010252:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010254:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010256:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010258:	4219      	tst	r1, r3
 801025a:	d046      	beq.n	80102ea <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801025c:	465b      	mov	r3, fp
 801025e:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010260:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010262:	4332      	orrs	r2, r6
 8010264:	619a      	str	r2, [r3, #24]
 8010266:	699a      	ldr	r2, [r3, #24]
 8010268:	4b54      	ldr	r3, [pc, #336]	; (80103bc <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801026a:	4027      	ands	r7, r4
 801026c:	469c      	mov	ip, r3
 801026e:	230f      	movs	r3, #15
 8010270:	00bf      	lsls	r7, r7, #2
 8010272:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010274:	4032      	ands	r2, r6
 8010276:	9203      	str	r2, [sp, #12]
 8010278:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801027a:	08a2      	lsrs	r2, r4, #2
 801027c:	0092      	lsls	r2, r2, #2
 801027e:	4462      	add	r2, ip
 8010280:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010282:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010284:	2390      	movs	r3, #144	; 0x90
 8010286:	05db      	lsls	r3, r3, #23
 8010288:	4298      	cmp	r0, r3
 801028a:	d012      	beq.n	80102b2 <HAL_GPIO_Init+0xda>
 801028c:	4b4c      	ldr	r3, [pc, #304]	; (80103c0 <HAL_GPIO_Init+0x1e8>)
 801028e:	4298      	cmp	r0, r3
 8010290:	d100      	bne.n	8010294 <HAL_GPIO_Init+0xbc>
 8010292:	e083      	b.n	801039c <HAL_GPIO_Init+0x1c4>
 8010294:	4b4b      	ldr	r3, [pc, #300]	; (80103c4 <HAL_GPIO_Init+0x1ec>)
 8010296:	4298      	cmp	r0, r3
 8010298:	d100      	bne.n	801029c <HAL_GPIO_Init+0xc4>
 801029a:	e07b      	b.n	8010394 <HAL_GPIO_Init+0x1bc>
 801029c:	4b4a      	ldr	r3, [pc, #296]	; (80103c8 <HAL_GPIO_Init+0x1f0>)
 801029e:	4298      	cmp	r0, r3
 80102a0:	d100      	bne.n	80102a4 <HAL_GPIO_Init+0xcc>
 80102a2:	e07f      	b.n	80103a4 <HAL_GPIO_Init+0x1cc>
 80102a4:	4b49      	ldr	r3, [pc, #292]	; (80103cc <HAL_GPIO_Init+0x1f4>)
 80102a6:	4298      	cmp	r0, r3
 80102a8:	d100      	bne.n	80102ac <HAL_GPIO_Init+0xd4>
 80102aa:	e07f      	b.n	80103ac <HAL_GPIO_Init+0x1d4>
 80102ac:	2305      	movs	r3, #5
 80102ae:	40bb      	lsls	r3, r7
 80102b0:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 80102b2:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 80102b4:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 80102b6:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80102b8:	9b00      	ldr	r3, [sp, #0]
 80102ba:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80102bc:	03cb      	lsls	r3, r1, #15
 80102be:	d451      	bmi.n	8010364 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80102c0:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80102c2:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 80102c4:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80102c6:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80102c8:	038b      	lsls	r3, r1, #14
 80102ca:	d452      	bmi.n	8010372 <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80102cc:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80102ce:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 80102d0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80102d2:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80102d4:	02cb      	lsls	r3, r1, #11
 80102d6:	d453      	bmi.n	8010380 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80102d8:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80102da:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 80102dc:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80102de:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80102e0:	028b      	lsls	r3, r1, #10
 80102e2:	d454      	bmi.n	801038e <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80102e4:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80102e6:	4643      	mov	r3, r8
 80102e8:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 80102ea:	4653      	mov	r3, sl
      }
    }
    
    position++;
 80102ec:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 80102ee:	40e3      	lsrs	r3, r4
 80102f0:	d185      	bne.n	80101fe <HAL_GPIO_Init+0x26>
  } 
}
 80102f2:	b005      	add	sp, #20
 80102f4:	bc3c      	pop	{r2, r3, r4, r5}
 80102f6:	4690      	mov	r8, r2
 80102f8:	4699      	mov	r9, r3
 80102fa:	46a2      	mov	sl, r4
 80102fc:	46ab      	mov	fp, r5
 80102fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010300:	2507      	movs	r5, #7
 8010302:	4025      	ands	r5, r4
 8010304:	00ad      	lsls	r5, r5, #2
 8010306:	330d      	adds	r3, #13
 8010308:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 801030a:	08e2      	lsrs	r2, r4, #3
 801030c:	0092      	lsls	r2, r2, #2
 801030e:	1882      	adds	r2, r0, r2
 8010310:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010312:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010314:	464b      	mov	r3, r9
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	40ab      	lsls	r3, r5
 801031a:	001d      	movs	r5, r3
 801031c:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 801031e:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010320:	2203      	movs	r2, #3
 8010322:	0065      	lsls	r5, r4, #1
 8010324:	40aa      	lsls	r2, r5
 8010326:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010328:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801032a:	4017      	ands	r7, r2
 801032c:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801032e:	2703      	movs	r7, #3
 8010330:	400f      	ands	r7, r1
 8010332:	40af      	lsls	r7, r5
 8010334:	4663      	mov	r3, ip
 8010336:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010338:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 801033a:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801033c:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801033e:	4017      	ands	r7, r2
 8010340:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010342:	68df      	ldr	r7, [r3, #12]
 8010344:	4663      	mov	r3, ip
 8010346:	40af      	lsls	r7, r5
 8010348:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801034a:	0033      	movs	r3, r6
 801034c:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 801034e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010350:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010352:	439f      	bics	r7, r3
 8010354:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010356:	090f      	lsrs	r7, r1, #4
 8010358:	4037      	ands	r7, r6
 801035a:	40a7      	lsls	r7, r4
 801035c:	4663      	mov	r3, ip
 801035e:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010360:	6047      	str	r7, [r0, #4]
 8010362:	e770      	b.n	8010246 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010364:	9b00      	ldr	r3, [sp, #0]
 8010366:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010368:	4643      	mov	r3, r8
 801036a:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 801036c:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801036e:	038b      	lsls	r3, r1, #14
 8010370:	d5ac      	bpl.n	80102cc <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010372:	9b00      	ldr	r3, [sp, #0]
 8010374:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010376:	4643      	mov	r3, r8
 8010378:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 801037a:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801037c:	02cb      	lsls	r3, r1, #11
 801037e:	d5ab      	bpl.n	80102d8 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010380:	9b00      	ldr	r3, [sp, #0]
 8010382:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010384:	4643      	mov	r3, r8
 8010386:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010388:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801038a:	028b      	lsls	r3, r1, #10
 801038c:	d5aa      	bpl.n	80102e4 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 801038e:	9b00      	ldr	r3, [sp, #0]
 8010390:	431a      	orrs	r2, r3
 8010392:	e7a8      	b.n	80102e6 <HAL_GPIO_Init+0x10e>
 8010394:	2302      	movs	r3, #2
 8010396:	40bb      	lsls	r3, r7
 8010398:	431d      	orrs	r5, r3
 801039a:	e78a      	b.n	80102b2 <HAL_GPIO_Init+0xda>
 801039c:	0033      	movs	r3, r6
 801039e:	40bb      	lsls	r3, r7
 80103a0:	431d      	orrs	r5, r3
 80103a2:	e786      	b.n	80102b2 <HAL_GPIO_Init+0xda>
 80103a4:	2303      	movs	r3, #3
 80103a6:	40bb      	lsls	r3, r7
 80103a8:	431d      	orrs	r5, r3
 80103aa:	e782      	b.n	80102b2 <HAL_GPIO_Init+0xda>
 80103ac:	2304      	movs	r3, #4
 80103ae:	40bb      	lsls	r3, r7
 80103b0:	431d      	orrs	r5, r3
 80103b2:	e77e      	b.n	80102b2 <HAL_GPIO_Init+0xda>
 80103b4:	40021000 	.word	0x40021000
 80103b8:	40010400 	.word	0x40010400
 80103bc:	40010000 	.word	0x40010000
 80103c0:	48000400 	.word	0x48000400
 80103c4:	48000800 	.word	0x48000800
 80103c8:	48000c00 	.word	0x48000c00
 80103cc:	48001000 	.word	0x48001000

080103d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80103d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103d2:	46de      	mov	lr, fp
 80103d4:	4657      	mov	r7, sl
 80103d6:	464e      	mov	r6, r9
 80103d8:	4645      	mov	r5, r8
 80103da:	b5e0      	push	{r5, r6, r7, lr}
 80103dc:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80103de:	2900      	cmp	r1, #0
 80103e0:	d055      	beq.n	801048e <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 80103e2:	2201      	movs	r2, #1
 80103e4:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80103e6:	3202      	adds	r2, #2
 80103e8:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80103ea:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 80103ec:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80103ee:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 80103f0:	4666      	mov	r6, ip
 80103f2:	000d      	movs	r5, r1
 80103f4:	409e      	lsls	r6, r3
 80103f6:	4035      	ands	r5, r6
    if (iocurrent)
 80103f8:	d045      	beq.n	8010486 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80103fa:	4647      	mov	r7, r8
 80103fc:	005c      	lsls	r4, r3, #1
 80103fe:	40a7      	lsls	r7, r4
 8010400:	43fc      	mvns	r4, r7
 8010402:	6802      	ldr	r2, [r0, #0]
 8010404:	4022      	ands	r2, r4
 8010406:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010408:	08da      	lsrs	r2, r3, #3
 801040a:	0092      	lsls	r2, r2, #2
 801040c:	1887      	adds	r7, r0, r2
 801040e:	9701      	str	r7, [sp, #4]
 8010410:	6a3f      	ldr	r7, [r7, #32]
 8010412:	46ba      	mov	sl, r7
 8010414:	2707      	movs	r7, #7
 8010416:	401f      	ands	r7, r3
 8010418:	00bf      	lsls	r7, r7, #2
 801041a:	46bb      	mov	fp, r7
 801041c:	464f      	mov	r7, r9
 801041e:	465a      	mov	r2, fp
 8010420:	4097      	lsls	r7, r2
 8010422:	46bb      	mov	fp, r7
 8010424:	4657      	mov	r7, sl
 8010426:	465a      	mov	r2, fp
 8010428:	4397      	bics	r7, r2
 801042a:	003a      	movs	r2, r7
 801042c:	9f01      	ldr	r7, [sp, #4]
 801042e:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010430:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010432:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010434:	4022      	ands	r2, r4
 8010436:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010438:	6842      	ldr	r2, [r0, #4]
 801043a:	43b2      	bics	r2, r6
 801043c:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801043e:	68c2      	ldr	r2, [r0, #12]
 8010440:	4014      	ands	r4, r2
 8010442:	60c4      	str	r4, [r0, #12]
 8010444:	4c2b      	ldr	r4, [pc, #172]	; (80104f4 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010446:	089a      	lsrs	r2, r3, #2
 8010448:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801044a:	4644      	mov	r4, r8
 801044c:	401c      	ands	r4, r3
 801044e:	00a4      	lsls	r4, r4, #2
 8010450:	40a7      	lsls	r7, r4
 8010452:	0092      	lsls	r2, r2, #2
 8010454:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010456:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010458:	46ba      	mov	sl, r7
 801045a:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801045c:	2790      	movs	r7, #144	; 0x90
 801045e:	05ff      	lsls	r7, r7, #23
 8010460:	42b8      	cmp	r0, r7
 8010462:	d01b      	beq.n	801049c <HAL_GPIO_DeInit+0xcc>
 8010464:	4f24      	ldr	r7, [pc, #144]	; (80104f8 <HAL_GPIO_DeInit+0x128>)
 8010466:	42b8      	cmp	r0, r7
 8010468:	d033      	beq.n	80104d2 <HAL_GPIO_DeInit+0x102>
 801046a:	4f24      	ldr	r7, [pc, #144]	; (80104fc <HAL_GPIO_DeInit+0x12c>)
 801046c:	42b8      	cmp	r0, r7
 801046e:	d038      	beq.n	80104e2 <HAL_GPIO_DeInit+0x112>
 8010470:	4f23      	ldr	r7, [pc, #140]	; (8010500 <HAL_GPIO_DeInit+0x130>)
 8010472:	42b8      	cmp	r0, r7
 8010474:	d039      	beq.n	80104ea <HAL_GPIO_DeInit+0x11a>
 8010476:	4f23      	ldr	r7, [pc, #140]	; (8010504 <HAL_GPIO_DeInit+0x134>)
 8010478:	42b8      	cmp	r0, r7
 801047a:	d02e      	beq.n	80104da <HAL_GPIO_DeInit+0x10a>
 801047c:	2705      	movs	r7, #5
 801047e:	40a7      	lsls	r7, r4
 8010480:	003c      	movs	r4, r7
 8010482:	42a6      	cmp	r6, r4
 8010484:	d00d      	beq.n	80104a2 <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010486:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010488:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801048a:	40da      	lsrs	r2, r3
 801048c:	d1b0      	bne.n	80103f0 <HAL_GPIO_DeInit+0x20>
  }
}
 801048e:	b003      	add	sp, #12
 8010490:	bc3c      	pop	{r2, r3, r4, r5}
 8010492:	4690      	mov	r8, r2
 8010494:	4699      	mov	r9, r3
 8010496:	46a2      	mov	sl, r4
 8010498:	46ab      	mov	fp, r5
 801049a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801049c:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801049e:	42a6      	cmp	r6, r4
 80104a0:	d1f1      	bne.n	8010486 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80104a2:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80104a4:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80104a6:	6894      	ldr	r4, [r2, #8]
    position++;
 80104a8:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80104aa:	43b4      	bics	r4, r6
 80104ac:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80104ae:	4c16      	ldr	r4, [pc, #88]	; (8010508 <HAL_GPIO_DeInit+0x138>)
 80104b0:	6822      	ldr	r2, [r4, #0]
 80104b2:	402a      	ands	r2, r5
 80104b4:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80104b6:	6862      	ldr	r2, [r4, #4]
 80104b8:	402a      	ands	r2, r5
 80104ba:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80104bc:	68a2      	ldr	r2, [r4, #8]
 80104be:	402a      	ands	r2, r5
 80104c0:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80104c2:	68e2      	ldr	r2, [r4, #12]
 80104c4:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 80104c6:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80104c8:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 80104ca:	40da      	lsrs	r2, r3
 80104cc:	d000      	beq.n	80104d0 <HAL_GPIO_DeInit+0x100>
 80104ce:	e78f      	b.n	80103f0 <HAL_GPIO_DeInit+0x20>
 80104d0:	e7dd      	b.n	801048e <HAL_GPIO_DeInit+0xbe>
 80104d2:	4667      	mov	r7, ip
 80104d4:	40a7      	lsls	r7, r4
 80104d6:	003c      	movs	r4, r7
 80104d8:	e7e1      	b.n	801049e <HAL_GPIO_DeInit+0xce>
 80104da:	2704      	movs	r7, #4
 80104dc:	40a7      	lsls	r7, r4
 80104de:	003c      	movs	r4, r7
 80104e0:	e7dd      	b.n	801049e <HAL_GPIO_DeInit+0xce>
 80104e2:	2702      	movs	r7, #2
 80104e4:	40a7      	lsls	r7, r4
 80104e6:	003c      	movs	r4, r7
 80104e8:	e7d9      	b.n	801049e <HAL_GPIO_DeInit+0xce>
 80104ea:	4647      	mov	r7, r8
 80104ec:	40a7      	lsls	r7, r4
 80104ee:	003c      	movs	r4, r7
 80104f0:	e7d5      	b.n	801049e <HAL_GPIO_DeInit+0xce>
 80104f2:	46c0      	nop			; (mov r8, r8)
 80104f4:	40010000 	.word	0x40010000
 80104f8:	48000400 	.word	0x48000400
 80104fc:	48000800 	.word	0x48000800
 8010500:	48000c00 	.word	0x48000c00
 8010504:	48001000 	.word	0x48001000
 8010508:	40010400 	.word	0x40010400

0801050c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801050c:	6900      	ldr	r0, [r0, #16]
 801050e:	4008      	ands	r0, r1
 8010510:	1e41      	subs	r1, r0, #1
 8010512:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010514:	b2c0      	uxtb	r0, r0
  }
 8010516:	4770      	bx	lr

08010518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010518:	2a00      	cmp	r2, #0
 801051a:	d101      	bne.n	8010520 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801051c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801051e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010520:	6181      	str	r1, [r0, #24]
 8010522:	e7fc      	b.n	801051e <HAL_GPIO_WritePin+0x6>

08010524 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010524:	6943      	ldr	r3, [r0, #20]
 8010526:	4059      	eors	r1, r3
 8010528:	6141      	str	r1, [r0, #20]
}
 801052a:	4770      	bx	lr

0801052c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 801052c:	4770      	bx	lr
 801052e:	46c0      	nop			; (mov r8, r8)

08010530 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010530:	2380      	movs	r3, #128	; 0x80
 8010532:	4a03      	ldr	r2, [pc, #12]	; (8010540 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	6811      	ldr	r1, [r2, #0]
 8010538:	430b      	orrs	r3, r1
 801053a:	6013      	str	r3, [r2, #0]
}
 801053c:	4770      	bx	lr
 801053e:	46c0      	nop			; (mov r8, r8)
 8010540:	40007000 	.word	0x40007000

08010544 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010546:	46c6      	mov	lr, r8
 8010548:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801054a:	6803      	ldr	r3, [r0, #0]
{
 801054c:	b082      	sub	sp, #8
 801054e:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010550:	07da      	lsls	r2, r3, #31
 8010552:	d54b      	bpl.n	80105ec <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010554:	210c      	movs	r1, #12
 8010556:	48c4      	ldr	r0, [pc, #784]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 8010558:	6842      	ldr	r2, [r0, #4]
 801055a:	400a      	ands	r2, r1
 801055c:	2a04      	cmp	r2, #4
 801055e:	d100      	bne.n	8010562 <HAL_RCC_OscConfig+0x1e>
 8010560:	e153      	b.n	801080a <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010562:	6842      	ldr	r2, [r0, #4]
 8010564:	4011      	ands	r1, r2
 8010566:	2908      	cmp	r1, #8
 8010568:	d108      	bne.n	801057c <HAL_RCC_OscConfig+0x38>
 801056a:	21c0      	movs	r1, #192	; 0xc0
 801056c:	6842      	ldr	r2, [r0, #4]
 801056e:	0249      	lsls	r1, r1, #9
 8010570:	400a      	ands	r2, r1
 8010572:	2180      	movs	r1, #128	; 0x80
 8010574:	0249      	lsls	r1, r1, #9
 8010576:	428a      	cmp	r2, r1
 8010578:	d100      	bne.n	801057c <HAL_RCC_OscConfig+0x38>
 801057a:	e146      	b.n	801080a <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801057c:	4dba      	ldr	r5, [pc, #744]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 801057e:	4abb      	ldr	r2, [pc, #748]	; (801086c <HAL_RCC_OscConfig+0x328>)
 8010580:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010582:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010584:	4013      	ands	r3, r2
 8010586:	602b      	str	r3, [r5, #0]
 8010588:	682b      	ldr	r3, [r5, #0]
 801058a:	4ab9      	ldr	r2, [pc, #740]	; (8010870 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801058c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801058e:	4013      	ands	r3, r2
 8010590:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010592:	f7fe fb6f 	bl	800ec74 <HAL_GetTick>
 8010596:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010598:	e005      	b.n	80105a6 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801059a:	f7fe fb6b 	bl	800ec74 <HAL_GetTick>
 801059e:	1bc0      	subs	r0, r0, r7
 80105a0:	2864      	cmp	r0, #100	; 0x64
 80105a2:	d900      	bls.n	80105a6 <HAL_RCC_OscConfig+0x62>
 80105a4:	e13b      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105a6:	682b      	ldr	r3, [r5, #0]
 80105a8:	4233      	tst	r3, r6
 80105aa:	d1f6      	bne.n	801059a <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105ac:	6863      	ldr	r3, [r4, #4]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d100      	bne.n	80105b4 <HAL_RCC_OscConfig+0x70>
 80105b2:	e196      	b.n	80108e2 <HAL_RCC_OscConfig+0x39e>
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d000      	beq.n	80105ba <HAL_RCC_OscConfig+0x76>
 80105b8:	e1bc      	b.n	8010934 <HAL_RCC_OscConfig+0x3f0>
 80105ba:	682b      	ldr	r3, [r5, #0]
 80105bc:	4aab      	ldr	r2, [pc, #684]	; (801086c <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105be:	4eaa      	ldr	r6, [pc, #680]	; (8010868 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105c0:	4013      	ands	r3, r2
 80105c2:	602b      	str	r3, [r5, #0]
 80105c4:	682b      	ldr	r3, [r5, #0]
 80105c6:	4aaa      	ldr	r2, [pc, #680]	; (8010870 <HAL_RCC_OscConfig+0x32c>)
 80105c8:	4013      	ands	r3, r2
 80105ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80105cc:	f7fe fb52 	bl	800ec74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105d0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80105d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105d4:	02ad      	lsls	r5, r5, #10
 80105d6:	e005      	b.n	80105e4 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80105d8:	f7fe fb4c 	bl	800ec74 <HAL_GetTick>
 80105dc:	1bc0      	subs	r0, r0, r7
 80105de:	2864      	cmp	r0, #100	; 0x64
 80105e0:	d900      	bls.n	80105e4 <HAL_RCC_OscConfig+0xa0>
 80105e2:	e11c      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105e4:	6833      	ldr	r3, [r6, #0]
 80105e6:	422b      	tst	r3, r5
 80105e8:	d1f6      	bne.n	80105d8 <HAL_RCC_OscConfig+0x94>
 80105ea:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80105ec:	079a      	lsls	r2, r3, #30
 80105ee:	d529      	bpl.n	8010644 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80105f0:	220c      	movs	r2, #12
 80105f2:	499d      	ldr	r1, [pc, #628]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 80105f4:	6848      	ldr	r0, [r1, #4]
 80105f6:	4202      	tst	r2, r0
 80105f8:	d100      	bne.n	80105fc <HAL_RCC_OscConfig+0xb8>
 80105fa:	e0fd      	b.n	80107f8 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80105fc:	6848      	ldr	r0, [r1, #4]
 80105fe:	4002      	ands	r2, r0
 8010600:	2a08      	cmp	r2, #8
 8010602:	d100      	bne.n	8010606 <HAL_RCC_OscConfig+0xc2>
 8010604:	e0ef      	b.n	80107e6 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010606:	68e3      	ldr	r3, [r4, #12]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d100      	bne.n	801060e <HAL_RCC_OscConfig+0xca>
 801060c:	e138      	b.n	8010880 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801060e:	2201      	movs	r2, #1
 8010610:	4f95      	ldr	r7, [pc, #596]	; (8010868 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010612:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	4313      	orrs	r3, r2
 8010618:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 801061a:	f7fe fb2b 	bl	800ec74 <HAL_GetTick>
 801061e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010620:	e005      	b.n	801062e <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010622:	f7fe fb27 	bl	800ec74 <HAL_GetTick>
 8010626:	1b80      	subs	r0, r0, r6
 8010628:	2864      	cmp	r0, #100	; 0x64
 801062a:	d900      	bls.n	801062e <HAL_RCC_OscConfig+0xea>
 801062c:	e0f7      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	421d      	tst	r5, r3
 8010632:	d0f6      	beq.n	8010622 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010634:	21f8      	movs	r1, #248	; 0xf8
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	6923      	ldr	r3, [r4, #16]
 801063a:	438a      	bics	r2, r1
 801063c:	00db      	lsls	r3, r3, #3
 801063e:	4313      	orrs	r3, r2
 8010640:	603b      	str	r3, [r7, #0]
 8010642:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010644:	071a      	lsls	r2, r3, #28
 8010646:	d45d      	bmi.n	8010704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010648:	075a      	lsls	r2, r3, #29
 801064a:	d474      	bmi.n	8010736 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801064c:	06da      	lsls	r2, r3, #27
 801064e:	d512      	bpl.n	8010676 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8010650:	6962      	ldr	r2, [r4, #20]
 8010652:	2a01      	cmp	r2, #1
 8010654:	d100      	bne.n	8010658 <HAL_RCC_OscConfig+0x114>
 8010656:	e18c      	b.n	8010972 <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010658:	3205      	adds	r2, #5
 801065a:	d000      	beq.n	801065e <HAL_RCC_OscConfig+0x11a>
 801065c:	e124      	b.n	80108a8 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 801065e:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010660:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8010662:	4981      	ldr	r1, [pc, #516]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 8010664:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010666:	4382      	bics	r2, r0
 8010668:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801066a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801066c:	69a2      	ldr	r2, [r4, #24]
 801066e:	43a8      	bics	r0, r5
 8010670:	00d2      	lsls	r2, r2, #3
 8010672:	4302      	orrs	r2, r0
 8010674:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010676:	069b      	lsls	r3, r3, #26
 8010678:	d522      	bpl.n	80106c0 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801067a:	220c      	movs	r2, #12
 801067c:	497a      	ldr	r1, [pc, #488]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 801067e:	684b      	ldr	r3, [r1, #4]
 8010680:	4013      	ands	r3, r2
 8010682:	2b0c      	cmp	r3, #12
 8010684:	d100      	bne.n	8010688 <HAL_RCC_OscConfig+0x144>
 8010686:	e14a      	b.n	801091e <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010688:	684b      	ldr	r3, [r1, #4]
 801068a:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801068c:	2a08      	cmp	r2, #8
 801068e:	d100      	bne.n	8010692 <HAL_RCC_OscConfig+0x14e>
 8010690:	e13e      	b.n	8010910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010692:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010694:	4d74      	ldr	r5, [pc, #464]	; (8010868 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010696:	2b00      	cmp	r3, #0
 8010698:	d100      	bne.n	801069c <HAL_RCC_OscConfig+0x158>
 801069a:	e156      	b.n	801094a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 801069c:	2680      	movs	r6, #128	; 0x80
 801069e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80106a0:	0276      	lsls	r6, r6, #9
 80106a2:	4333      	orrs	r3, r6
 80106a4:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 80106a6:	f7fe fae5 	bl	800ec74 <HAL_GetTick>
 80106aa:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80106ac:	e005      	b.n	80106ba <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80106ae:	f7fe fae1 	bl	800ec74 <HAL_GetTick>
 80106b2:	1bc0      	subs	r0, r0, r7
 80106b4:	2864      	cmp	r0, #100	; 0x64
 80106b6:	d900      	bls.n	80106ba <HAL_RCC_OscConfig+0x176>
 80106b8:	e0b1      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80106ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80106bc:	4233      	tst	r3, r6
 80106be:	d0f6      	beq.n	80106ae <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80106c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d01c      	beq.n	8010700 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80106c6:	220c      	movs	r2, #12
 80106c8:	4d67      	ldr	r5, [pc, #412]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 80106ca:	6869      	ldr	r1, [r5, #4]
 80106cc:	400a      	ands	r2, r1
 80106ce:	2a08      	cmp	r2, #8
 80106d0:	d100      	bne.n	80106d4 <HAL_RCC_OscConfig+0x190>
 80106d2:	e098      	b.n	8010806 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d100      	bne.n	80106da <HAL_RCC_OscConfig+0x196>
 80106d8:	e16a      	b.n	80109b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80106da:	682b      	ldr	r3, [r5, #0]
 80106dc:	4a65      	ldr	r2, [pc, #404]	; (8010874 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106de:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80106e0:	4013      	ands	r3, r2
 80106e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80106e4:	f7fe fac6 	bl	800ec74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106e8:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 80106ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106ec:	e005      	b.n	80106fa <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106ee:	f7fe fac1 	bl	800ec74 <HAL_GetTick>
 80106f2:	1b80      	subs	r0, r0, r6
 80106f4:	2864      	cmp	r0, #100	; 0x64
 80106f6:	d900      	bls.n	80106fa <HAL_RCC_OscConfig+0x1b6>
 80106f8:	e091      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	4223      	tst	r3, r4
 80106fe:	d1f6      	bne.n	80106ee <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8010700:	2000      	movs	r0, #0
 8010702:	e08d      	b.n	8010820 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010704:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8010706:	4d58      	ldr	r5, [pc, #352]	; (8010868 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010708:	2b00      	cmp	r3, #0
 801070a:	d100      	bne.n	801070e <HAL_RCC_OscConfig+0x1ca>
 801070c:	e08c      	b.n	8010828 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801070e:	2201      	movs	r2, #1
 8010710:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010712:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8010714:	4313      	orrs	r3, r2
 8010716:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010718:	f7fe faac 	bl	800ec74 <HAL_GetTick>
 801071c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801071e:	e004      	b.n	801072a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010720:	f7fe faa8 	bl	800ec74 <HAL_GetTick>
 8010724:	1bc0      	subs	r0, r0, r7
 8010726:	2864      	cmp	r0, #100	; 0x64
 8010728:	d879      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801072a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801072c:	421e      	tst	r6, r3
 801072e:	d0f7      	beq.n	8010720 <HAL_RCC_OscConfig+0x1dc>
 8010730:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010732:	075a      	lsls	r2, r3, #29
 8010734:	d58a      	bpl.n	801064c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010736:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010738:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 801073a:	4a4b      	ldr	r2, [pc, #300]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 801073c:	0540      	lsls	r0, r0, #21
 801073e:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010740:	4d4d      	ldr	r5, [pc, #308]	; (8010878 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8010742:	4301      	orrs	r1, r0
 8010744:	61d1      	str	r1, [r2, #28]
 8010746:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010748:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 801074a:	4003      	ands	r3, r0
 801074c:	9301      	str	r3, [sp, #4]
 801074e:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	4333      	orrs	r3, r6
 8010754:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8010756:	f7fe fa8d 	bl	800ec74 <HAL_GetTick>
 801075a:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801075c:	e004      	b.n	8010768 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801075e:	f7fe fa89 	bl	800ec74 <HAL_GetTick>
 8010762:	1bc0      	subs	r0, r0, r7
 8010764:	2864      	cmp	r0, #100	; 0x64
 8010766:	d85a      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010768:	682b      	ldr	r3, [r5, #0]
 801076a:	4233      	tst	r3, r6
 801076c:	d0f7      	beq.n	801075e <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801076e:	2201      	movs	r2, #1
 8010770:	4d3d      	ldr	r5, [pc, #244]	; (8010868 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010772:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010774:	6a2b      	ldr	r3, [r5, #32]
 8010776:	4393      	bics	r3, r2
 8010778:	622b      	str	r3, [r5, #32]
 801077a:	6a2b      	ldr	r3, [r5, #32]
 801077c:	3203      	adds	r2, #3
 801077e:	4393      	bics	r3, r2
 8010780:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 8010782:	f7fe fa77 	bl	800ec74 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010786:	4b3d      	ldr	r3, [pc, #244]	; (801087c <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8010788:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801078a:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801078c:	e004      	b.n	8010798 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801078e:	f7fe fa71 	bl	800ec74 <HAL_GetTick>
 8010792:	1bc0      	subs	r0, r0, r7
 8010794:	4540      	cmp	r0, r8
 8010796:	d842      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010798:	6a2b      	ldr	r3, [r5, #32]
 801079a:	421e      	tst	r6, r3
 801079c:	d1f7      	bne.n	801078e <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801079e:	68a3      	ldr	r3, [r4, #8]
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d100      	bne.n	80107a6 <HAL_RCC_OscConfig+0x262>
 80107a4:	e157      	b.n	8010a56 <HAL_RCC_OscConfig+0x512>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d100      	bne.n	80107ac <HAL_RCC_OscConfig+0x268>
 80107aa:	e139      	b.n	8010a20 <HAL_RCC_OscConfig+0x4dc>
 80107ac:	2b05      	cmp	r3, #5
 80107ae:	d100      	bne.n	80107b2 <HAL_RCC_OscConfig+0x26e>
 80107b0:	e155      	b.n	8010a5e <HAL_RCC_OscConfig+0x51a>
 80107b2:	2201      	movs	r2, #1
 80107b4:	6a2b      	ldr	r3, [r5, #32]
 80107b6:	4393      	bics	r3, r2
 80107b8:	622b      	str	r3, [r5, #32]
 80107ba:	6a2b      	ldr	r3, [r5, #32]
 80107bc:	3203      	adds	r2, #3
 80107be:	4393      	bics	r3, r2
 80107c0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80107c2:	f7fe fa57 	bl	800ec74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107c6:	4e28      	ldr	r6, [pc, #160]	; (8010868 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 80107c8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107ca:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80107cc:	4f2b      	ldr	r7, [pc, #172]	; (801087c <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107ce:	e005      	b.n	80107dc <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80107d0:	f7fe fa50 	bl	800ec74 <HAL_GetTick>
 80107d4:	4643      	mov	r3, r8
 80107d6:	1ac0      	subs	r0, r0, r3
 80107d8:	42b8      	cmp	r0, r7
 80107da:	d820      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107dc:	6a33      	ldr	r3, [r6, #32]
 80107de:	421d      	tst	r5, r3
 80107e0:	d0f6      	beq.n	80107d0 <HAL_RCC_OscConfig+0x28c>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	e732      	b.n	801064c <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80107e6:	684a      	ldr	r2, [r1, #4]
 80107e8:	21c0      	movs	r1, #192	; 0xc0
 80107ea:	0249      	lsls	r1, r1, #9
 80107ec:	400a      	ands	r2, r1
 80107ee:	2180      	movs	r1, #128	; 0x80
 80107f0:	0209      	lsls	r1, r1, #8
 80107f2:	428a      	cmp	r2, r1
 80107f4:	d000      	beq.n	80107f8 <HAL_RCC_OscConfig+0x2b4>
 80107f6:	e706      	b.n	8010606 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107f8:	4a1b      	ldr	r2, [pc, #108]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 80107fa:	6812      	ldr	r2, [r2, #0]
 80107fc:	0792      	lsls	r2, r2, #30
 80107fe:	d526      	bpl.n	801084e <HAL_RCC_OscConfig+0x30a>
 8010800:	68e2      	ldr	r2, [r4, #12]
 8010802:	2a01      	cmp	r2, #1
 8010804:	d023      	beq.n	801084e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8010806:	2001      	movs	r0, #1
 8010808:	e00a      	b.n	8010820 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801080a:	4a17      	ldr	r2, [pc, #92]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	0392      	lsls	r2, r2, #14
 8010810:	d400      	bmi.n	8010814 <HAL_RCC_OscConfig+0x2d0>
 8010812:	e6eb      	b.n	80105ec <HAL_RCC_OscConfig+0xa8>
 8010814:	6862      	ldr	r2, [r4, #4]
 8010816:	2a00      	cmp	r2, #0
 8010818:	d000      	beq.n	801081c <HAL_RCC_OscConfig+0x2d8>
 801081a:	e6e7      	b.n	80105ec <HAL_RCC_OscConfig+0xa8>
 801081c:	e7f3      	b.n	8010806 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801081e:	2003      	movs	r0, #3
}
 8010820:	b002      	add	sp, #8
 8010822:	bc04      	pop	{r2}
 8010824:	4690      	mov	r8, r2
 8010826:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8010828:	2201      	movs	r2, #1
 801082a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801082c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 801082e:	4393      	bics	r3, r2
 8010830:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010832:	f7fe fa1f 	bl	800ec74 <HAL_GetTick>
 8010836:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010838:	e004      	b.n	8010844 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801083a:	f7fe fa1b 	bl	800ec74 <HAL_GetTick>
 801083e:	1bc0      	subs	r0, r0, r7
 8010840:	2864      	cmp	r0, #100	; 0x64
 8010842:	d8ec      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010844:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010846:	421e      	tst	r6, r3
 8010848:	d1f7      	bne.n	801083a <HAL_RCC_OscConfig+0x2f6>
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	e771      	b.n	8010732 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801084e:	25f8      	movs	r5, #248	; 0xf8
 8010850:	4805      	ldr	r0, [pc, #20]	; (8010868 <HAL_RCC_OscConfig+0x324>)
 8010852:	6922      	ldr	r2, [r4, #16]
 8010854:	6801      	ldr	r1, [r0, #0]
 8010856:	00d2      	lsls	r2, r2, #3
 8010858:	43a9      	bics	r1, r5
 801085a:	430a      	orrs	r2, r1
 801085c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801085e:	071a      	lsls	r2, r3, #28
 8010860:	d400      	bmi.n	8010864 <HAL_RCC_OscConfig+0x320>
 8010862:	e6f1      	b.n	8010648 <HAL_RCC_OscConfig+0x104>
 8010864:	e74e      	b.n	8010704 <HAL_RCC_OscConfig+0x1c0>
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	40021000 	.word	0x40021000
 801086c:	fffeffff 	.word	0xfffeffff
 8010870:	fffbffff 	.word	0xfffbffff
 8010874:	feffffff 	.word	0xfeffffff
 8010878:	40007000 	.word	0x40007000
 801087c:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 8010880:	2201      	movs	r2, #1
 8010882:	4d7b      	ldr	r5, [pc, #492]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010884:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8010886:	682b      	ldr	r3, [r5, #0]
 8010888:	4393      	bics	r3, r2
 801088a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801088c:	f7fe f9f2 	bl	800ec74 <HAL_GetTick>
 8010890:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010892:	e004      	b.n	801089e <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010894:	f7fe f9ee 	bl	800ec74 <HAL_GetTick>
 8010898:	1bc0      	subs	r0, r0, r7
 801089a:	2864      	cmp	r0, #100	; 0x64
 801089c:	d8bf      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801089e:	682b      	ldr	r3, [r5, #0]
 80108a0:	421e      	tst	r6, r3
 80108a2:	d1f7      	bne.n	8010894 <HAL_RCC_OscConfig+0x350>
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	e6cd      	b.n	8010644 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 80108a8:	2204      	movs	r2, #4
 80108aa:	4d71      	ldr	r5, [pc, #452]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80108ac:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80108ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80108b0:	4313      	orrs	r3, r2
 80108b2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80108b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80108b6:	3a03      	subs	r2, #3
 80108b8:	4393      	bics	r3, r2
 80108ba:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80108bc:	f7fe f9da 	bl	800ec74 <HAL_GetTick>
 80108c0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80108c2:	e004      	b.n	80108ce <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80108c4:	f7fe f9d6 	bl	800ec74 <HAL_GetTick>
 80108c8:	1bc0      	subs	r0, r0, r7
 80108ca:	2864      	cmp	r0, #100	; 0x64
 80108cc:	d8a7      	bhi.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80108ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80108d0:	421e      	tst	r6, r3
 80108d2:	d1f7      	bne.n	80108c4 <HAL_RCC_OscConfig+0x380>
 80108d4:	6823      	ldr	r3, [r4, #0]
 80108d6:	e6ce      	b.n	8010676 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80108d8:	2380      	movs	r3, #128	; 0x80
 80108da:	682a      	ldr	r2, [r5, #0]
 80108dc:	02db      	lsls	r3, r3, #11
 80108de:	4313      	orrs	r3, r2
 80108e0:	602b      	str	r3, [r5, #0]
 80108e2:	2380      	movs	r3, #128	; 0x80
 80108e4:	682a      	ldr	r2, [r5, #0]
 80108e6:	025b      	lsls	r3, r3, #9
 80108e8:	4313      	orrs	r3, r2
 80108ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80108ec:	f7fe f9c2 	bl	800ec74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108f0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80108f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108f4:	4e5e      	ldr	r6, [pc, #376]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
 80108f6:	02ad      	lsls	r5, r5, #10
 80108f8:	e005      	b.n	8010906 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108fa:	f7fe f9bb 	bl	800ec74 <HAL_GetTick>
 80108fe:	1bc0      	subs	r0, r0, r7
 8010900:	2864      	cmp	r0, #100	; 0x64
 8010902:	d900      	bls.n	8010906 <HAL_RCC_OscConfig+0x3c2>
 8010904:	e78b      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010906:	6833      	ldr	r3, [r6, #0]
 8010908:	422b      	tst	r3, r5
 801090a:	d0f6      	beq.n	80108fa <HAL_RCC_OscConfig+0x3b6>
 801090c:	6823      	ldr	r3, [r4, #0]
 801090e:	e66d      	b.n	80105ec <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010910:	22c0      	movs	r2, #192	; 0xc0
 8010912:	684b      	ldr	r3, [r1, #4]
 8010914:	0252      	lsls	r2, r2, #9
 8010916:	4013      	ands	r3, r2
 8010918:	4293      	cmp	r3, r2
 801091a:	d000      	beq.n	801091e <HAL_RCC_OscConfig+0x3da>
 801091c:	e6b9      	b.n	8010692 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801091e:	4b54      	ldr	r3, [pc, #336]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
 8010920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010922:	03db      	lsls	r3, r3, #15
 8010924:	d400      	bmi.n	8010928 <HAL_RCC_OscConfig+0x3e4>
 8010926:	e6cb      	b.n	80106c0 <HAL_RCC_OscConfig+0x17c>
 8010928:	69e3      	ldr	r3, [r4, #28]
 801092a:	2b01      	cmp	r3, #1
 801092c:	d100      	bne.n	8010930 <HAL_RCC_OscConfig+0x3ec>
 801092e:	e6c7      	b.n	80106c0 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 8010930:	2001      	movs	r0, #1
 8010932:	e775      	b.n	8010820 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010934:	2b05      	cmp	r3, #5
 8010936:	d0cf      	beq.n	80108d8 <HAL_RCC_OscConfig+0x394>
 8010938:	682b      	ldr	r3, [r5, #0]
 801093a:	4a4e      	ldr	r2, [pc, #312]	; (8010a74 <HAL_RCC_OscConfig+0x530>)
 801093c:	4013      	ands	r3, r2
 801093e:	602b      	str	r3, [r5, #0]
 8010940:	682b      	ldr	r3, [r5, #0]
 8010942:	4a4d      	ldr	r2, [pc, #308]	; (8010a78 <HAL_RCC_OscConfig+0x534>)
 8010944:	4013      	ands	r3, r2
 8010946:	602b      	str	r3, [r5, #0]
 8010948:	e7d0      	b.n	80108ec <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 801094a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801094c:	4a49      	ldr	r2, [pc, #292]	; (8010a74 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801094e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8010950:	4013      	ands	r3, r2
 8010952:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010954:	f7fe f98e 	bl	800ec74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010958:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 801095a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801095c:	e005      	b.n	801096a <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801095e:	f7fe f989 	bl	800ec74 <HAL_GetTick>
 8010962:	1bc0      	subs	r0, r0, r7
 8010964:	2864      	cmp	r0, #100	; 0x64
 8010966:	d900      	bls.n	801096a <HAL_RCC_OscConfig+0x426>
 8010968:	e759      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801096a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801096c:	4233      	tst	r3, r6
 801096e:	d1f6      	bne.n	801095e <HAL_RCC_OscConfig+0x41a>
 8010970:	e6a6      	b.n	80106c0 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8010972:	2104      	movs	r1, #4
 8010974:	4d3e      	ldr	r5, [pc, #248]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010976:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8010978:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801097a:	430b      	orrs	r3, r1
 801097c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801097e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010980:	431a      	orrs	r2, r3
 8010982:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010984:	f7fe f976 	bl	800ec74 <HAL_GetTick>
 8010988:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801098a:	e005      	b.n	8010998 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801098c:	f7fe f972 	bl	800ec74 <HAL_GetTick>
 8010990:	1bc0      	subs	r0, r0, r7
 8010992:	2864      	cmp	r0, #100	; 0x64
 8010994:	d900      	bls.n	8010998 <HAL_RCC_OscConfig+0x454>
 8010996:	e742      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010998:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801099a:	421e      	tst	r6, r3
 801099c:	d0f6      	beq.n	801098c <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801099e:	21f8      	movs	r1, #248	; 0xf8
 80109a0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80109a2:	69a3      	ldr	r3, [r4, #24]
 80109a4:	438a      	bics	r2, r1
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	4313      	orrs	r3, r2
 80109aa:	636b      	str	r3, [r5, #52]	; 0x34
 80109ac:	6823      	ldr	r3, [r4, #0]
 80109ae:	e662      	b.n	8010676 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	4a32      	ldr	r2, [pc, #200]	; (8010a7c <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109b4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80109b6:	4013      	ands	r3, r2
 80109b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80109ba:	f7fe f95b 	bl	800ec74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109be:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80109c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109c2:	e005      	b.n	80109d0 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80109c4:	f7fe f956 	bl	800ec74 <HAL_GetTick>
 80109c8:	1bc0      	subs	r0, r0, r7
 80109ca:	2864      	cmp	r0, #100	; 0x64
 80109cc:	d900      	bls.n	80109d0 <HAL_RCC_OscConfig+0x48c>
 80109ce:	e726      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109d0:	682b      	ldr	r3, [r5, #0]
 80109d2:	4233      	tst	r3, r6
 80109d4:	d1f6      	bne.n	80109c4 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109d6:	220f      	movs	r2, #15
 80109d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80109da:	4393      	bics	r3, r2
 80109dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80109de:	4313      	orrs	r3, r2
 80109e0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80109e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80109e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109e6:	686a      	ldr	r2, [r5, #4]
 80109e8:	430b      	orrs	r3, r1
 80109ea:	4925      	ldr	r1, [pc, #148]	; (8010a80 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80109ec:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109ee:	400a      	ands	r2, r1
 80109f0:	4313      	orrs	r3, r2
 80109f2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80109f4:	2380      	movs	r3, #128	; 0x80
 80109f6:	682a      	ldr	r2, [r5, #0]
 80109f8:	045b      	lsls	r3, r3, #17
 80109fa:	4313      	orrs	r3, r2
 80109fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80109fe:	f7fe f939 	bl	800ec74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010a02:	4d1b      	ldr	r5, [pc, #108]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8010a04:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010a06:	04a4      	lsls	r4, r4, #18
 8010a08:	e005      	b.n	8010a16 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a0a:	f7fe f933 	bl	800ec74 <HAL_GetTick>
 8010a0e:	1b80      	subs	r0, r0, r6
 8010a10:	2864      	cmp	r0, #100	; 0x64
 8010a12:	d900      	bls.n	8010a16 <HAL_RCC_OscConfig+0x4d2>
 8010a14:	e703      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010a16:	682b      	ldr	r3, [r5, #0]
 8010a18:	4223      	tst	r3, r4
 8010a1a:	d0f6      	beq.n	8010a0a <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	e6ff      	b.n	8010820 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a20:	2201      	movs	r2, #1
 8010a22:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a24:	4e12      	ldr	r6, [pc, #72]	; (8010a70 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a26:	4393      	bics	r3, r2
 8010a28:	622b      	str	r3, [r5, #32]
 8010a2a:	6a2b      	ldr	r3, [r5, #32]
 8010a2c:	3203      	adds	r2, #3
 8010a2e:	4393      	bics	r3, r2
 8010a30:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8010a32:	f7fe f91f 	bl	800ec74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a36:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8010a38:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a3a:	4f12      	ldr	r7, [pc, #72]	; (8010a84 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a3c:	e006      	b.n	8010a4c <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a3e:	f7fe f919 	bl	800ec74 <HAL_GetTick>
 8010a42:	4643      	mov	r3, r8
 8010a44:	1ac0      	subs	r0, r0, r3
 8010a46:	42b8      	cmp	r0, r7
 8010a48:	d900      	bls.n	8010a4c <HAL_RCC_OscConfig+0x508>
 8010a4a:	e6e8      	b.n	801081e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a4c:	6a33      	ldr	r3, [r6, #32]
 8010a4e:	421d      	tst	r5, r3
 8010a50:	d1f5      	bne.n	8010a3e <HAL_RCC_OscConfig+0x4fa>
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	e5fa      	b.n	801064c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a56:	6a2a      	ldr	r2, [r5, #32]
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	622b      	str	r3, [r5, #32]
 8010a5c:	e6b1      	b.n	80107c2 <HAL_RCC_OscConfig+0x27e>
 8010a5e:	2204      	movs	r2, #4
 8010a60:	6a2b      	ldr	r3, [r5, #32]
 8010a62:	4313      	orrs	r3, r2
 8010a64:	622b      	str	r3, [r5, #32]
 8010a66:	6a2b      	ldr	r3, [r5, #32]
 8010a68:	3a03      	subs	r2, #3
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	622b      	str	r3, [r5, #32]
 8010a6e:	e6a8      	b.n	80107c2 <HAL_RCC_OscConfig+0x27e>
 8010a70:	40021000 	.word	0x40021000
 8010a74:	fffeffff 	.word	0xfffeffff
 8010a78:	fffbffff 	.word	0xfffbffff
 8010a7c:	feffffff 	.word	0xfeffffff
 8010a80:	ffc27fff 	.word	0xffc27fff
 8010a84:	00001388 	.word	0x00001388

08010a88 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	46ce      	mov	lr, r9
 8010a8c:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a8e:	2301      	movs	r3, #1
{
 8010a90:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a92:	4985      	ldr	r1, [pc, #532]	; (8010ca8 <HAL_RCC_ClockConfig+0x220>)
{
 8010a94:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a96:	680a      	ldr	r2, [r1, #0]
{
 8010a98:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a9a:	401a      	ands	r2, r3
 8010a9c:	42a2      	cmp	r2, r4
 8010a9e:	d20c      	bcs.n	8010aba <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010aa0:	680a      	ldr	r2, [r1, #0]
 8010aa2:	439a      	bics	r2, r3
 8010aa4:	4322      	orrs	r2, r4
 8010aa6:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010aa8:	680a      	ldr	r2, [r1, #0]
 8010aaa:	4013      	ands	r3, r2
 8010aac:	42a3      	cmp	r3, r4
 8010aae:	d054      	beq.n	8010b5a <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8010ab0:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010ab2:	bc0c      	pop	{r2, r3}
 8010ab4:	4690      	mov	r8, r2
 8010ab6:	4699      	mov	r9, r3
 8010ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010aba:	6803      	ldr	r3, [r0, #0]
 8010abc:	079a      	lsls	r2, r3, #30
 8010abe:	d506      	bpl.n	8010ace <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010ac0:	20f0      	movs	r0, #240	; 0xf0
 8010ac2:	497a      	ldr	r1, [pc, #488]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
 8010ac4:	684a      	ldr	r2, [r1, #4]
 8010ac6:	4382      	bics	r2, r0
 8010ac8:	68a8      	ldr	r0, [r5, #8]
 8010aca:	4302      	orrs	r2, r0
 8010acc:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010ace:	07db      	lsls	r3, r3, #31
 8010ad0:	d52a      	bpl.n	8010b28 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ad2:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ad4:	4a75      	ldr	r2, [pc, #468]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d073      	beq.n	8010bc2 <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010ada:	2b02      	cmp	r3, #2
 8010adc:	d075      	beq.n	8010bca <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010ade:	2b03      	cmp	r3, #3
 8010ae0:	d100      	bne.n	8010ae4 <HAL_RCC_ClockConfig+0x5c>
 8010ae2:	e09c      	b.n	8010c1e <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010ae4:	6812      	ldr	r2, [r2, #0]
 8010ae6:	0792      	lsls	r2, r2, #30
 8010ae8:	d5e2      	bpl.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010aea:	2103      	movs	r1, #3
 8010aec:	4e6f      	ldr	r6, [pc, #444]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
 8010aee:	6872      	ldr	r2, [r6, #4]
 8010af0:	438a      	bics	r2, r1
 8010af2:	4313      	orrs	r3, r2
 8010af4:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8010af6:	f7fe f8bd 	bl	800ec74 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010afa:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010afc:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d07d      	beq.n	8010bfe <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d100      	bne.n	8010b08 <HAL_RCC_ClockConfig+0x80>
 8010b06:	e093      	b.n	8010c30 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010b08:	2b03      	cmp	r3, #3
 8010b0a:	d066      	beq.n	8010bda <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010b0c:	230c      	movs	r3, #12
 8010b0e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010b10:	4b67      	ldr	r3, [pc, #412]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010b12:	4699      	mov	r9, r3
 8010b14:	e004      	b.n	8010b20 <HAL_RCC_ClockConfig+0x98>
 8010b16:	f7fe f8ad 	bl	800ec74 <HAL_GetTick>
 8010b1a:	1bc0      	subs	r0, r0, r7
 8010b1c:	4548      	cmp	r0, r9
 8010b1e:	d86c      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010b20:	4642      	mov	r2, r8
 8010b22:	6873      	ldr	r3, [r6, #4]
 8010b24:	421a      	tst	r2, r3
 8010b26:	d1f6      	bne.n	8010b16 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b28:	2201      	movs	r2, #1
 8010b2a:	495f      	ldr	r1, [pc, #380]	; (8010ca8 <HAL_RCC_ClockConfig+0x220>)
 8010b2c:	680b      	ldr	r3, [r1, #0]
 8010b2e:	4393      	bics	r3, r2
 8010b30:	4323      	orrs	r3, r4
 8010b32:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010b34:	680b      	ldr	r3, [r1, #0]
 8010b36:	401a      	ands	r2, r3
 8010b38:	42a2      	cmp	r2, r4
 8010b3a:	d1b9      	bne.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
 8010b3c:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b3e:	075b      	lsls	r3, r3, #29
 8010b40:	d506      	bpl.n	8010b50 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010b42:	4a5a      	ldr	r2, [pc, #360]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
 8010b44:	495b      	ldr	r1, [pc, #364]	; (8010cb4 <HAL_RCC_ClockConfig+0x22c>)
 8010b46:	6853      	ldr	r3, [r2, #4]
 8010b48:	400b      	ands	r3, r1
 8010b4a:	68e9      	ldr	r1, [r5, #12]
 8010b4c:	430b      	orrs	r3, r1
 8010b4e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010b50:	2000      	movs	r0, #0
 8010b52:	f7fe f865 	bl	800ec20 <HAL_InitTick>
  return HAL_OK;
 8010b56:	2000      	movs	r0, #0
 8010b58:	e7ab      	b.n	8010ab2 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b5a:	6803      	ldr	r3, [r0, #0]
 8010b5c:	079a      	lsls	r2, r3, #30
 8010b5e:	d506      	bpl.n	8010b6e <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010b60:	20f0      	movs	r0, #240	; 0xf0
 8010b62:	4952      	ldr	r1, [pc, #328]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
 8010b64:	684a      	ldr	r2, [r1, #4]
 8010b66:	4382      	bics	r2, r0
 8010b68:	68a8      	ldr	r0, [r5, #8]
 8010b6a:	4302      	orrs	r2, r0
 8010b6c:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010b6e:	07da      	lsls	r2, r3, #31
 8010b70:	d5e5      	bpl.n	8010b3e <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b72:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b74:	4a4d      	ldr	r2, [pc, #308]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d056      	beq.n	8010c28 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d029      	beq.n	8010bd2 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010b7e:	2b03      	cmp	r3, #3
 8010b80:	d073      	beq.n	8010c6a <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010b82:	6812      	ldr	r2, [r2, #0]
 8010b84:	0792      	lsls	r2, r2, #30
 8010b86:	d593      	bpl.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010b88:	2103      	movs	r1, #3
 8010b8a:	4c48      	ldr	r4, [pc, #288]	; (8010cac <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010b8c:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010b8e:	6862      	ldr	r2, [r4, #4]
 8010b90:	438a      	bics	r2, r1
 8010b92:	4313      	orrs	r3, r2
 8010b94:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8010b96:	f7fe f86d 	bl	800ec74 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b9a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010b9c:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d056      	beq.n	8010c50 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010ba2:	2b02      	cmp	r3, #2
 8010ba4:	d065      	beq.n	8010c72 <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010ba6:	2b03      	cmp	r3, #3
 8010ba8:	d070      	beq.n	8010c8c <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010baa:	4b41      	ldr	r3, [pc, #260]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010bac:	4698      	mov	r8, r3
 8010bae:	e004      	b.n	8010bba <HAL_RCC_ClockConfig+0x132>
 8010bb0:	f7fe f860 	bl	800ec74 <HAL_GetTick>
 8010bb4:	1b80      	subs	r0, r0, r6
 8010bb6:	4540      	cmp	r0, r8
 8010bb8:	d81f      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010bba:	6863      	ldr	r3, [r4, #4]
 8010bbc:	421f      	tst	r7, r3
 8010bbe:	d1f7      	bne.n	8010bb0 <HAL_RCC_ClockConfig+0x128>
 8010bc0:	e7bc      	b.n	8010b3c <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010bc2:	6812      	ldr	r2, [r2, #0]
 8010bc4:	0392      	lsls	r2, r2, #14
 8010bc6:	d490      	bmi.n	8010aea <HAL_RCC_ClockConfig+0x62>
 8010bc8:	e772      	b.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bca:	6812      	ldr	r2, [r2, #0]
 8010bcc:	0192      	lsls	r2, r2, #6
 8010bce:	d48c      	bmi.n	8010aea <HAL_RCC_ClockConfig+0x62>
 8010bd0:	e76e      	b.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bd2:	6812      	ldr	r2, [r2, #0]
 8010bd4:	0192      	lsls	r2, r2, #6
 8010bd6:	d4d7      	bmi.n	8010b88 <HAL_RCC_ClockConfig+0x100>
 8010bd8:	e76a      	b.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010bda:	3309      	adds	r3, #9
 8010bdc:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010bde:	4b34      	ldr	r3, [pc, #208]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010be0:	4699      	mov	r9, r3
 8010be2:	e004      	b.n	8010bee <HAL_RCC_ClockConfig+0x166>
 8010be4:	f7fe f846 	bl	800ec74 <HAL_GetTick>
 8010be8:	1bc0      	subs	r0, r0, r7
 8010bea:	4548      	cmp	r0, r9
 8010bec:	d805      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010bee:	4642      	mov	r2, r8
 8010bf0:	6873      	ldr	r3, [r6, #4]
 8010bf2:	4013      	ands	r3, r2
 8010bf4:	2b0c      	cmp	r3, #12
 8010bf6:	d1f5      	bne.n	8010be4 <HAL_RCC_ClockConfig+0x15c>
 8010bf8:	e796      	b.n	8010b28 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8010bfa:	2003      	movs	r0, #3
 8010bfc:	e759      	b.n	8010ab2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010bfe:	330b      	adds	r3, #11
 8010c00:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c02:	4b2b      	ldr	r3, [pc, #172]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010c04:	4699      	mov	r9, r3
 8010c06:	e004      	b.n	8010c12 <HAL_RCC_ClockConfig+0x18a>
 8010c08:	f7fe f834 	bl	800ec74 <HAL_GetTick>
 8010c0c:	1bc0      	subs	r0, r0, r7
 8010c0e:	4548      	cmp	r0, r9
 8010c10:	d8f3      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c12:	4642      	mov	r2, r8
 8010c14:	6873      	ldr	r3, [r6, #4]
 8010c16:	4013      	ands	r3, r2
 8010c18:	2b04      	cmp	r3, #4
 8010c1a:	d1f5      	bne.n	8010c08 <HAL_RCC_ClockConfig+0x180>
 8010c1c:	e784      	b.n	8010b28 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010c20:	03d2      	lsls	r2, r2, #15
 8010c22:	d500      	bpl.n	8010c26 <HAL_RCC_ClockConfig+0x19e>
 8010c24:	e761      	b.n	8010aea <HAL_RCC_ClockConfig+0x62>
 8010c26:	e743      	b.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010c28:	6812      	ldr	r2, [r2, #0]
 8010c2a:	0392      	lsls	r2, r2, #14
 8010c2c:	d4ac      	bmi.n	8010b88 <HAL_RCC_ClockConfig+0x100>
 8010c2e:	e73f      	b.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c30:	330a      	adds	r3, #10
 8010c32:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c34:	4b1e      	ldr	r3, [pc, #120]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010c36:	4699      	mov	r9, r3
 8010c38:	e004      	b.n	8010c44 <HAL_RCC_ClockConfig+0x1bc>
 8010c3a:	f7fe f81b 	bl	800ec74 <HAL_GetTick>
 8010c3e:	1bc0      	subs	r0, r0, r7
 8010c40:	4548      	cmp	r0, r9
 8010c42:	d8da      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c44:	4642      	mov	r2, r8
 8010c46:	6873      	ldr	r3, [r6, #4]
 8010c48:	4013      	ands	r3, r2
 8010c4a:	2b08      	cmp	r3, #8
 8010c4c:	d1f5      	bne.n	8010c3a <HAL_RCC_ClockConfig+0x1b2>
 8010c4e:	e76b      	b.n	8010b28 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c50:	4b17      	ldr	r3, [pc, #92]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010c52:	4698      	mov	r8, r3
 8010c54:	e004      	b.n	8010c60 <HAL_RCC_ClockConfig+0x1d8>
 8010c56:	f7fe f80d 	bl	800ec74 <HAL_GetTick>
 8010c5a:	1b80      	subs	r0, r0, r6
 8010c5c:	4540      	cmp	r0, r8
 8010c5e:	d8cc      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c60:	6863      	ldr	r3, [r4, #4]
 8010c62:	403b      	ands	r3, r7
 8010c64:	2b04      	cmp	r3, #4
 8010c66:	d1f6      	bne.n	8010c56 <HAL_RCC_ClockConfig+0x1ce>
 8010c68:	e768      	b.n	8010b3c <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010c6c:	03d2      	lsls	r2, r2, #15
 8010c6e:	d48b      	bmi.n	8010b88 <HAL_RCC_ClockConfig+0x100>
 8010c70:	e71e      	b.n	8010ab0 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c72:	4b0f      	ldr	r3, [pc, #60]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010c74:	4698      	mov	r8, r3
 8010c76:	e004      	b.n	8010c82 <HAL_RCC_ClockConfig+0x1fa>
 8010c78:	f7fd fffc 	bl	800ec74 <HAL_GetTick>
 8010c7c:	1b80      	subs	r0, r0, r6
 8010c7e:	4540      	cmp	r0, r8
 8010c80:	d8bb      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c82:	6863      	ldr	r3, [r4, #4]
 8010c84:	403b      	ands	r3, r7
 8010c86:	2b08      	cmp	r3, #8
 8010c88:	d1f6      	bne.n	8010c78 <HAL_RCC_ClockConfig+0x1f0>
 8010c8a:	e757      	b.n	8010b3c <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c8c:	4b08      	ldr	r3, [pc, #32]	; (8010cb0 <HAL_RCC_ClockConfig+0x228>)
 8010c8e:	4698      	mov	r8, r3
 8010c90:	e004      	b.n	8010c9c <HAL_RCC_ClockConfig+0x214>
 8010c92:	f7fd ffef 	bl	800ec74 <HAL_GetTick>
 8010c96:	1b80      	subs	r0, r0, r6
 8010c98:	4540      	cmp	r0, r8
 8010c9a:	d8ae      	bhi.n	8010bfa <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010c9c:	6863      	ldr	r3, [r4, #4]
 8010c9e:	403b      	ands	r3, r7
 8010ca0:	2b0c      	cmp	r3, #12
 8010ca2:	d1f6      	bne.n	8010c92 <HAL_RCC_ClockConfig+0x20a>
 8010ca4:	e74a      	b.n	8010b3c <HAL_RCC_ClockConfig+0xb4>
 8010ca6:	46c0      	nop			; (mov r8, r8)
 8010ca8:	40022000 	.word	0x40022000
 8010cac:	40021000 	.word	0x40021000
 8010cb0:	00001388 	.word	0x00001388
 8010cb4:	fffff8ff 	.word	0xfffff8ff

08010cb8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010cb8:	b570      	push	{r4, r5, r6, lr}
 8010cba:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010cbc:	4669      	mov	r1, sp
 8010cbe:	4b1c      	ldr	r3, [pc, #112]	; (8010d30 <HAL_RCC_GetSysClockFreq+0x78>)
 8010cc0:	000a      	movs	r2, r1
 8010cc2:	0018      	movs	r0, r3
 8010cc4:	c870      	ldmia	r0!, {r4, r5, r6}
 8010cc6:	c270      	stmia	r2!, {r4, r5, r6}
 8010cc8:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010cca:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010ccc:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010cce:	aa04      	add	r2, sp, #16
 8010cd0:	0010      	movs	r0, r2
 8010cd2:	cb70      	ldmia	r3!, {r4, r5, r6}
 8010cd4:	c070      	stmia	r0!, {r4, r5, r6}
 8010cd6:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010cd8:	4d16      	ldr	r5, [pc, #88]	; (8010d34 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010cda:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010cdc:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8010cde:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8010ce0:	4018      	ands	r0, r3
 8010ce2:	2808      	cmp	r0, #8
 8010ce4:	d00a      	beq.n	8010cfc <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010ce6:	380c      	subs	r0, #12
 8010ce8:	4243      	negs	r3, r0
 8010cea:	4158      	adcs	r0, r3
 8010cec:	4b12      	ldr	r3, [pc, #72]	; (8010d38 <HAL_RCC_GetSysClockFreq+0x80>)
 8010cee:	4240      	negs	r0, r0
 8010cf0:	4018      	ands	r0, r3
 8010cf2:	4b12      	ldr	r3, [pc, #72]	; (8010d3c <HAL_RCC_GetSysClockFreq+0x84>)
 8010cf4:	469c      	mov	ip, r3
 8010cf6:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010cf8:	b008      	add	sp, #32
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010cfc:	200f      	movs	r0, #15
 8010cfe:	0c9c      	lsrs	r4, r3, #18
 8010d00:	4004      	ands	r4, r0
 8010d02:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010d04:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8010d06:	4008      	ands	r0, r1
 8010d08:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010d0a:	22c0      	movs	r2, #192	; 0xc0
 8010d0c:	2080      	movs	r0, #128	; 0x80
 8010d0e:	0252      	lsls	r2, r2, #9
 8010d10:	4013      	ands	r3, r2
 8010d12:	0240      	lsls	r0, r0, #9
 8010d14:	4283      	cmp	r3, r0
 8010d16:	d001      	beq.n	8010d1c <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d004      	beq.n	8010d26 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010d1c:	4807      	ldr	r0, [pc, #28]	; (8010d3c <HAL_RCC_GetSysClockFreq+0x84>)
 8010d1e:	f7ef fa17 	bl	8000150 <__udivsi3>
 8010d22:	4360      	muls	r0, r4
 8010d24:	e7e8      	b.n	8010cf8 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8010d26:	4806      	ldr	r0, [pc, #24]	; (8010d40 <HAL_RCC_GetSysClockFreq+0x88>)
 8010d28:	f7ef fa12 	bl	8000150 <__udivsi3>
 8010d2c:	4360      	muls	r0, r4
 8010d2e:	e7e3      	b.n	8010cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8010d30:	080170d0 	.word	0x080170d0
 8010d34:	40021000 	.word	0x40021000
 8010d38:	02625a00 	.word	0x02625a00
 8010d3c:	007a1200 	.word	0x007a1200
 8010d40:	02dc6c00 	.word	0x02dc6c00

08010d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010d44:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010d46:	f7ff ffb7 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8010d4a:	4b05      	ldr	r3, [pc, #20]	; (8010d60 <HAL_RCC_GetHCLKFreq+0x1c>)
 8010d4c:	4a05      	ldr	r2, [pc, #20]	; (8010d64 <HAL_RCC_GetHCLKFreq+0x20>)
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	3220      	adds	r2, #32
 8010d52:	061b      	lsls	r3, r3, #24
 8010d54:	0f1b      	lsrs	r3, r3, #28
 8010d56:	5cd3      	ldrb	r3, [r2, r3]
 8010d58:	40d8      	lsrs	r0, r3
 8010d5a:	4b03      	ldr	r3, [pc, #12]	; (8010d68 <HAL_RCC_GetHCLKFreq+0x24>)
 8010d5c:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010d5e:	bd10      	pop	{r4, pc}
 8010d60:	40021000 	.word	0x40021000
 8010d64:	080170d0 	.word	0x080170d0
 8010d68:	200000b4 	.word	0x200000b4

08010d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010d6c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010d6e:	f7ff ffa3 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8010d72:	4908      	ldr	r1, [pc, #32]	; (8010d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010d74:	4a08      	ldr	r2, [pc, #32]	; (8010d98 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8010d76:	684b      	ldr	r3, [r1, #4]
 8010d78:	3220      	adds	r2, #32
 8010d7a:	061b      	lsls	r3, r3, #24
 8010d7c:	0f1b      	lsrs	r3, r3, #28
 8010d7e:	5cd3      	ldrb	r3, [r2, r3]
 8010d80:	40d8      	lsrs	r0, r3
 8010d82:	4b06      	ldr	r3, [pc, #24]	; (8010d9c <HAL_RCC_GetPCLK1Freq+0x30>)
 8010d84:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8010d86:	684b      	ldr	r3, [r1, #4]
 8010d88:	055b      	lsls	r3, r3, #21
 8010d8a:	0f5b      	lsrs	r3, r3, #29
 8010d8c:	5cd3      	ldrb	r3, [r2, r3]
 8010d8e:	40d8      	lsrs	r0, r3
}    
 8010d90:	bd10      	pop	{r4, pc}
 8010d92:	46c0      	nop			; (mov r8, r8)
 8010d94:	40021000 	.word	0x40021000
 8010d98:	080170d0 	.word	0x080170d0
 8010d9c:	200000b4 	.word	0x200000b4

08010da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010da2:	46c6      	mov	lr, r8
 8010da4:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010da6:	6803      	ldr	r3, [r0, #0]
{
 8010da8:	b082      	sub	sp, #8
 8010daa:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010dac:	03da      	lsls	r2, r3, #15
 8010dae:	d507      	bpl.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010db0:	493e      	ldr	r1, [pc, #248]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010db2:	6840      	ldr	r0, [r0, #4]
 8010db4:	6a0a      	ldr	r2, [r1, #32]
 8010db6:	4042      	eors	r2, r0
 8010db8:	20c0      	movs	r0, #192	; 0xc0
 8010dba:	0080      	lsls	r0, r0, #2
 8010dbc:	4202      	tst	r2, r0
 8010dbe:	d131      	bne.n	8010e24 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010dc0:	07da      	lsls	r2, r3, #31
 8010dc2:	d506      	bpl.n	8010dd2 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010dc4:	2003      	movs	r0, #3
 8010dc6:	4939      	ldr	r1, [pc, #228]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dc8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010dca:	4382      	bics	r2, r0
 8010dcc:	68a0      	ldr	r0, [r4, #8]
 8010dce:	4302      	orrs	r2, r0
 8010dd0:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010dd2:	079a      	lsls	r2, r3, #30
 8010dd4:	d506      	bpl.n	8010de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010dd6:	4935      	ldr	r1, [pc, #212]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dd8:	4835      	ldr	r0, [pc, #212]	; (8010eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8010dda:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010ddc:	4002      	ands	r2, r0
 8010dde:	68e0      	ldr	r0, [r4, #12]
 8010de0:	4302      	orrs	r2, r0
 8010de2:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010de4:	035a      	lsls	r2, r3, #13
 8010de6:	d506      	bpl.n	8010df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010de8:	4930      	ldr	r1, [pc, #192]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dea:	4832      	ldr	r0, [pc, #200]	; (8010eb4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8010dec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010dee:	4002      	ands	r2, r0
 8010df0:	6920      	ldr	r0, [r4, #16]
 8010df2:	4302      	orrs	r2, r0
 8010df4:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010df6:	069a      	lsls	r2, r3, #26
 8010df8:	d506      	bpl.n	8010e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010dfa:	2010      	movs	r0, #16
 8010dfc:	492b      	ldr	r1, [pc, #172]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dfe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010e00:	4382      	bics	r2, r0
 8010e02:	6960      	ldr	r0, [r4, #20]
 8010e04:	4302      	orrs	r2, r0
 8010e06:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8010e08:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010e0a:	055b      	lsls	r3, r3, #21
 8010e0c:	d506      	bpl.n	8010e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010e0e:	2140      	movs	r1, #64	; 0x40
 8010e10:	4a26      	ldr	r2, [pc, #152]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010e12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010e14:	438b      	bics	r3, r1
 8010e16:	69a1      	ldr	r1, [r4, #24]
 8010e18:	430b      	orrs	r3, r1
 8010e1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8010e1c:	b002      	add	sp, #8
 8010e1e:	bc04      	pop	{r2}
 8010e20:	4690      	mov	r8, r2
 8010e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e24:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010e26:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e28:	69ca      	ldr	r2, [r1, #28]
 8010e2a:	0540      	lsls	r0, r0, #21
 8010e2c:	4302      	orrs	r2, r0
 8010e2e:	61ca      	str	r2, [r1, #28]
 8010e30:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010e32:	4d21      	ldr	r5, [pc, #132]	; (8010eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e34:	4003      	ands	r3, r0
 8010e36:	9301      	str	r3, [sp, #4]
 8010e38:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010e3a:	682b      	ldr	r3, [r5, #0]
 8010e3c:	0076      	lsls	r6, r6, #1
 8010e3e:	4333      	orrs	r3, r6
 8010e40:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010e42:	f7fd ff17 	bl	800ec74 <HAL_GetTick>
 8010e46:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010e48:	e004      	b.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010e4a:	f7fd ff13 	bl	800ec74 <HAL_GetTick>
 8010e4e:	1bc0      	subs	r0, r0, r7
 8010e50:	2864      	cmp	r0, #100	; 0x64
 8010e52:	d829      	bhi.n	8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010e54:	682b      	ldr	r3, [r5, #0]
 8010e56:	4233      	tst	r3, r6
 8010e58:	d0f7      	beq.n	8010e4a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e5a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e5c:	4d13      	ldr	r5, [pc, #76]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e5e:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e60:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e62:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e64:	4b15      	ldr	r3, [pc, #84]	; (8010ebc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e66:	4302      	orrs	r2, r0
 8010e68:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010e6a:	6a2a      	ldr	r2, [r5, #32]
 8010e6c:	4814      	ldr	r0, [pc, #80]	; (8010ec0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e6e:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010e70:	4002      	ands	r2, r0
 8010e72:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8010e74:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8010e76:	078b      	lsls	r3, r1, #30
 8010e78:	d408      	bmi.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8010e7a:	4a0c      	ldr	r2, [pc, #48]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010e7c:	490f      	ldr	r1, [pc, #60]	; (8010ebc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8010e7e:	6a13      	ldr	r3, [r2, #32]
 8010e80:	400b      	ands	r3, r1
 8010e82:	6861      	ldr	r1, [r4, #4]
 8010e84:	430b      	orrs	r3, r1
 8010e86:	6213      	str	r3, [r2, #32]
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	e799      	b.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8010e8c:	f7fd fef2 	bl	800ec74 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e90:	4b0c      	ldr	r3, [pc, #48]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8010e92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010e94:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e96:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010e98:	6a2b      	ldr	r3, [r5, #32]
 8010e9a:	421e      	tst	r6, r3
 8010e9c:	d1ed      	bne.n	8010e7a <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e9e:	f7fd fee9 	bl	800ec74 <HAL_GetTick>
 8010ea2:	1bc0      	subs	r0, r0, r7
 8010ea4:	4540      	cmp	r0, r8
 8010ea6:	d9f7      	bls.n	8010e98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8010ea8:	2003      	movs	r0, #3
 8010eaa:	e7b7      	b.n	8010e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010eac:	40021000 	.word	0x40021000
 8010eb0:	fffcffff 	.word	0xfffcffff
 8010eb4:	fff3ffff 	.word	0xfff3ffff
 8010eb8:	40007000 	.word	0x40007000
 8010ebc:	fffffcff 	.word	0xfffffcff
 8010ec0:	fffeffff 	.word	0xfffeffff
 8010ec4:	00001388 	.word	0x00001388

08010ec8 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8010ec8:	4770      	bx	lr
 8010eca:	46c0      	nop			; (mov r8, r8)

08010ecc <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010ecc:	6803      	ldr	r3, [r0, #0]
{
 8010ece:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010ed0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ed2:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010ed4:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ed6:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8010ed8:	681c      	ldr	r4, [r3, #0]
 8010eda:	4b13      	ldr	r3, [pc, #76]	; (8010f28 <HAL_RTC_GetTime+0x5c>)
 8010edc:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ede:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010ee0:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ee2:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010ee4:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010ee6:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ee8:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010eea:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010eec:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010eee:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ef0:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010ef2:	2a00      	cmp	r2, #0
 8010ef4:	d115      	bne.n	8010f22 <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8010ef6:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010ef8:	0900      	lsrs	r0, r0, #4
 8010efa:	0082      	lsls	r2, r0, #2
 8010efc:	1810      	adds	r0, r2, r0
 8010efe:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f00:	4035      	ands	r5, r6
 8010f02:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f04:	0918      	lsrs	r0, r3, #4
 8010f06:	0082      	lsls	r2, r0, #2
 8010f08:	1812      	adds	r2, r2, r0
 8010f0a:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f0c:	4033      	ands	r3, r6
 8010f0e:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f10:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010f12:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f14:	0093      	lsls	r3, r2, #2
 8010f16:	189b      	adds	r3, r3, r2
 8010f18:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f1a:	4034      	ands	r4, r6
 8010f1c:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010f1e:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8010f20:	708c      	strb	r4, [r1, #2]
}
 8010f22:	2000      	movs	r0, #0
 8010f24:	bd70      	pop	{r4, r5, r6, pc}
 8010f26:	46c0      	nop			; (mov r8, r8)
 8010f28:	007f7f7f 	.word	0x007f7f7f

08010f2c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010f2c:	6803      	ldr	r3, [r0, #0]
 8010f2e:	4815      	ldr	r0, [pc, #84]	; (8010f84 <HAL_RTC_GetDate+0x58>)
 8010f30:	685b      	ldr	r3, [r3, #4]
{
 8010f32:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010f34:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f36:	201f      	movs	r0, #31
 8010f38:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010f3a:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010f3c:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f3e:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010f40:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f42:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010f44:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010f46:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f48:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010f4a:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010f4c:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8010f4e:	2a00      	cmp	r2, #0
 8010f50:	d115      	bne.n	8010f7e <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 8010f52:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f54:	093b      	lsrs	r3, r7, #4
 8010f56:	009a      	lsls	r2, r3, #2
 8010f58:	18d2      	adds	r2, r2, r3
 8010f5a:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f5c:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f5e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8010f60:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f62:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010f64:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f66:	092a      	lsrs	r2, r5, #4
 8010f68:	18c0      	adds	r0, r0, r3
 8010f6a:	0093      	lsls	r3, r2, #2
 8010f6c:	189b      	adds	r3, r3, r2
 8010f6e:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f70:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f72:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f74:	4035      	ands	r5, r6
 8010f76:	1904      	adds	r4, r0, r4
 8010f78:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010f7a:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8010f7c:	708b      	strb	r3, [r1, #2]
}
 8010f7e:	2000      	movs	r0, #0
 8010f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f82:	46c0      	nop			; (mov r8, r8)
 8010f84:	00ffff3f 	.word	0x00ffff3f

08010f88 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010f88:	21a0      	movs	r1, #160	; 0xa0
 8010f8a:	6802      	ldr	r2, [r0, #0]
{
 8010f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010f8e:	68d3      	ldr	r3, [r2, #12]
{
 8010f90:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010f92:	438b      	bics	r3, r1
 8010f94:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8010f96:	f7fd fe6d 	bl	800ec74 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010f9a:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8010f9c:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010f9e:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fa0:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010fa2:	e004      	b.n	8010fae <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fa4:	f7fd fe66 	bl	800ec74 <HAL_GetTick>
 8010fa8:	1bc0      	subs	r0, r0, r7
 8010faa:	42b0      	cmp	r0, r6
 8010fac:	d805      	bhi.n	8010fba <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010fae:	6823      	ldr	r3, [r4, #0]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	421d      	tst	r5, r3
 8010fb4:	d0f6      	beq.n	8010fa4 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8010fb6:	2000      	movs	r0, #0
}
 8010fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8010fba:	2003      	movs	r0, #3
 8010fbc:	e7fc      	b.n	8010fb8 <HAL_RTC_WaitForSynchro+0x30>
 8010fbe:	46c0      	nop			; (mov r8, r8)

08010fc0 <RTC_EnterInitMode>:
{
 8010fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fc2:	6803      	ldr	r3, [r0, #0]
{
 8010fc4:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fc6:	68da      	ldr	r2, [r3, #12]
 8010fc8:	0652      	lsls	r2, r2, #25
 8010fca:	d501      	bpl.n	8010fd0 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8010fcc:	2000      	movs	r0, #0
}
 8010fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	4252      	negs	r2, r2
 8010fd4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8010fd6:	f7fd fe4d 	bl	800ec74 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fda:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8010fdc:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fde:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fe0:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fe2:	e004      	b.n	8010fee <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fe4:	f7fd fe46 	bl	800ec74 <HAL_GetTick>
 8010fe8:	1bc0      	subs	r0, r0, r7
 8010fea:	42b0      	cmp	r0, r6
 8010fec:	d804      	bhi.n	8010ff8 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	421d      	tst	r5, r3
 8010ff4:	d0f6      	beq.n	8010fe4 <RTC_EnterInitMode+0x24>
 8010ff6:	e7e9      	b.n	8010fcc <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8010ff8:	2003      	movs	r0, #3
 8010ffa:	e7e8      	b.n	8010fce <RTC_EnterInitMode+0xe>

08010ffc <HAL_RTC_Init>:
{
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011000:	d03e      	beq.n	8011080 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011002:	7f43      	ldrb	r3, [r0, #29]
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d036      	beq.n	8011078 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801100a:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801100c:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801100e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011010:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011012:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011014:	625a      	str	r2, [r3, #36]	; 0x24
 8011016:	3a77      	subs	r2, #119	; 0x77
 8011018:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801101a:	f7ff ffd1 	bl	8010fc0 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801101e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011020:	2800      	cmp	r0, #0
 8011022:	d123      	bne.n	801106c <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011024:	689a      	ldr	r2, [r3, #8]
 8011026:	4917      	ldr	r1, [pc, #92]	; (8011084 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011028:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801102a:	400a      	ands	r2, r1
 801102c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801102e:	6862      	ldr	r2, [r4, #4]
 8011030:	6899      	ldr	r1, [r3, #8]
 8011032:	432a      	orrs	r2, r5
 8011034:	6965      	ldr	r5, [r4, #20]
 8011036:	432a      	orrs	r2, r5
 8011038:	430a      	orrs	r2, r1
 801103a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801103c:	68e2      	ldr	r2, [r4, #12]
 801103e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011040:	68a2      	ldr	r2, [r4, #8]
 8011042:	6919      	ldr	r1, [r3, #16]
 8011044:	0412      	lsls	r2, r2, #16
 8011046:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011048:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801104a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801104c:	68da      	ldr	r2, [r3, #12]
 801104e:	438a      	bics	r2, r1
 8011050:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011054:	490c      	ldr	r1, [pc, #48]	; (8011088 <HAL_RTC_Init+0x8c>)
 8011056:	400a      	ands	r2, r1
 8011058:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 801105a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801105c:	69a1      	ldr	r1, [r4, #24]
 801105e:	430a      	orrs	r2, r1
 8011060:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011062:	22ff      	movs	r2, #255	; 0xff
 8011064:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011066:	2301      	movs	r3, #1
 8011068:	7763      	strb	r3, [r4, #29]
}
 801106a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801106c:	22ff      	movs	r2, #255	; 0xff
 801106e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011070:	2304      	movs	r3, #4
    return HAL_ERROR;
 8011072:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011074:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011076:	e7f8      	b.n	801106a <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011078:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801107a:	f7ff ff25 	bl	8010ec8 <HAL_RTC_MspInit>
 801107e:	e7c4      	b.n	801100a <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 8011080:	2001      	movs	r0, #1
 8011082:	e7f2      	b.n	801106a <HAL_RTC_Init+0x6e>
 8011084:	ff8fffbf 	.word	0xff8fffbf
 8011088:	fffbffff 	.word	0xfffbffff

0801108c <HAL_RTC_SetTime>:
{
 801108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801108e:	7f03      	ldrb	r3, [r0, #28]
{
 8011090:	0004      	movs	r4, r0
 8011092:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011094:	2b01      	cmp	r3, #1
 8011096:	d100      	bne.n	801109a <HAL_RTC_SetTime+0xe>
 8011098:	e074      	b.n	8011184 <HAL_RTC_SetTime+0xf8>
 801109a:	2301      	movs	r3, #1
 801109c:	6806      	ldr	r6, [r0, #0]
 801109e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80110a0:	3301      	adds	r3, #1
 80110a2:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80110a4:	68b3      	ldr	r3, [r6, #8]
 80110a6:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 80110a8:	2a00      	cmp	r2, #0
 80110aa:	d031      	beq.n	8011110 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80110ac:	403b      	ands	r3, r7
 80110ae:	d065      	beq.n	801117c <HAL_RTC_SetTime+0xf0>
 80110b0:	7a0b      	ldrb	r3, [r1, #8]
 80110b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110b4:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80110b6:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110b8:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80110ba:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110bc:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 80110be:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80110c0:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110c2:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80110c4:	23ca      	movs	r3, #202	; 0xca
 80110c6:	6273      	str	r3, [r6, #36]	; 0x24
 80110c8:	3b77      	subs	r3, #119	; 0x77
 80110ca:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80110cc:	0020      	movs	r0, r4
 80110ce:	f7ff ff77 	bl	8010fc0 <RTC_EnterInitMode>
 80110d2:	1e06      	subs	r6, r0, #0
 80110d4:	d149      	bne.n	801116a <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80110d6:	4935      	ldr	r1, [pc, #212]	; (80111ac <HAL_RTC_SetTime+0x120>)
 80110d8:	6822      	ldr	r2, [r4, #0]
 80110da:	4039      	ands	r1, r7
 80110dc:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80110de:	6893      	ldr	r3, [r2, #8]
 80110e0:	4933      	ldr	r1, [pc, #204]	; (80111b0 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80110e2:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80110e4:	400b      	ands	r3, r1
 80110e6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80110e8:	68eb      	ldr	r3, [r5, #12]
 80110ea:	6891      	ldr	r1, [r2, #8]
 80110ec:	4303      	orrs	r3, r0
 80110ee:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80110f0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80110f2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80110f4:	68d3      	ldr	r3, [r2, #12]
 80110f6:	438b      	bics	r3, r1
 80110f8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80110fa:	6893      	ldr	r3, [r2, #8]
 80110fc:	069b      	lsls	r3, r3, #26
 80110fe:	d543      	bpl.n	8011188 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011100:	23ff      	movs	r3, #255	; 0xff
 8011102:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011104:	3bfe      	subs	r3, #254	; 0xfe
 8011106:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011108:	2300      	movs	r3, #0
 801110a:	7723      	strb	r3, [r4, #28]
}
 801110c:	0030      	movs	r0, r6
 801110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011110:	401f      	ands	r7, r3
 8011112:	d035      	beq.n	8011180 <HAL_RTC_SetTime+0xf4>
 8011114:	7a0f      	ldrb	r7, [r1, #8]
 8011116:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011118:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 801111a:	2300      	movs	r3, #0
  while(Value >= 10)
 801111c:	2809      	cmp	r0, #9
 801111e:	d906      	bls.n	801112e <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 8011120:	380a      	subs	r0, #10
 8011122:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011124:	3301      	adds	r3, #1
  while(Value >= 10)
 8011126:	2809      	cmp	r0, #9
 8011128:	d8fa      	bhi.n	8011120 <HAL_RTC_SetTime+0x94>
 801112a:	011b      	lsls	r3, r3, #4
 801112c:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801112e:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011130:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011132:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011134:	2100      	movs	r1, #0
  while(Value >= 10)
 8011136:	2b09      	cmp	r3, #9
 8011138:	d906      	bls.n	8011148 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 801113a:	3b0a      	subs	r3, #10
 801113c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801113e:	3101      	adds	r1, #1
  while(Value >= 10)
 8011140:	2b09      	cmp	r3, #9
 8011142:	d8fa      	bhi.n	801113a <HAL_RTC_SetTime+0xae>
 8011144:	0109      	lsls	r1, r1, #4
 8011146:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011148:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801114a:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801114c:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 801114e:	2909      	cmp	r1, #9
 8011150:	d929      	bls.n	80111a6 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 8011152:	390a      	subs	r1, #10
 8011154:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011156:	3201      	adds	r2, #1
  while(Value >= 10)
 8011158:	2909      	cmp	r1, #9
 801115a:	d8fa      	bhi.n	8011152 <HAL_RTC_SetTime+0xc6>
 801115c:	0112      	lsls	r2, r2, #4
 801115e:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011160:	4307      	orrs	r7, r0
 8011162:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011164:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011166:	430f      	orrs	r7, r1
 8011168:	e7ac      	b.n	80110c4 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801116a:	22ff      	movs	r2, #255	; 0xff
 801116c:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 801116e:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011170:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011172:	2304      	movs	r3, #4
 8011174:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011176:	2300      	movs	r3, #0
 8011178:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801117a:	e7c7      	b.n	801110c <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 801117c:	720b      	strb	r3, [r1, #8]
 801117e:	e799      	b.n	80110b4 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011180:	720f      	strb	r7, [r1, #8]
 8011182:	e7c9      	b.n	8011118 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011184:	2602      	movs	r6, #2
 8011186:	e7c1      	b.n	801110c <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011188:	0020      	movs	r0, r4
 801118a:	f7ff fefd 	bl	8010f88 <HAL_RTC_WaitForSynchro>
 801118e:	2800      	cmp	r0, #0
 8011190:	d101      	bne.n	8011196 <HAL_RTC_SetTime+0x10a>
 8011192:	6822      	ldr	r2, [r4, #0]
 8011194:	e7b4      	b.n	8011100 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011196:	22ff      	movs	r2, #255	; 0xff
 8011198:	6823      	ldr	r3, [r4, #0]
 801119a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801119c:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801119e:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80111a0:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80111a2:	2601      	movs	r6, #1
 80111a4:	e7b2      	b.n	801110c <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 80111a6:	2200      	movs	r2, #0
 80111a8:	e7da      	b.n	8011160 <HAL_RTC_SetTime+0xd4>
 80111aa:	46c0      	nop			; (mov r8, r8)
 80111ac:	007f7f7f 	.word	0x007f7f7f
 80111b0:	fffbffff 	.word	0xfffbffff

080111b4 <HAL_RTC_SetDate>:
{
 80111b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80111b6:	7f03      	ldrb	r3, [r0, #28]
{
 80111b8:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d062      	beq.n	8011284 <HAL_RTC_SetDate+0xd0>
 80111be:	2301      	movs	r3, #1
 80111c0:	780f      	ldrb	r7, [r1, #0]
 80111c2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80111c4:	3301      	adds	r3, #1
 80111c6:	7743      	strb	r3, [r0, #29]
 80111c8:	7848      	ldrb	r0, [r1, #1]
 80111ca:	788e      	ldrb	r6, [r1, #2]
 80111cc:	78cb      	ldrb	r3, [r1, #3]
 80111ce:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80111d0:	2a00      	cmp	r2, #0
 80111d2:	d022      	beq.n	801121a <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80111d4:	041b      	lsls	r3, r3, #16
 80111d6:	433b      	orrs	r3, r7
 80111d8:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 80111da:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80111dc:	4334      	orrs	r4, r6
 80111de:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111e0:	22ca      	movs	r2, #202	; 0xca
 80111e2:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111e4:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111e6:	625a      	str	r2, [r3, #36]	; 0x24
 80111e8:	3a77      	subs	r2, #119	; 0x77
 80111ea:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111ec:	f7ff fee8 	bl	8010fc0 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80111f0:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111f2:	1e06      	subs	r6, r0, #0
 80111f4:	d13e      	bne.n	8011274 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111f6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80111f8:	4a2b      	ldr	r2, [pc, #172]	; (80112a8 <HAL_RTC_SetDate+0xf4>)
 80111fa:	4014      	ands	r4, r2
 80111fc:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111fe:	68da      	ldr	r2, [r3, #12]
 8011200:	438a      	bics	r2, r1
 8011202:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011204:	689a      	ldr	r2, [r3, #8]
 8011206:	0692      	lsls	r2, r2, #26
 8011208:	d53e      	bpl.n	8011288 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801120a:	22ff      	movs	r2, #255	; 0xff
 801120c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801120e:	2301      	movs	r3, #1
 8011210:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011212:	2300      	movs	r3, #0
 8011214:	772b      	strb	r3, [r5, #28]
}
 8011216:	0030      	movs	r0, r6
 8011218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 801121a:	2410      	movs	r4, #16
 801121c:	4204      	tst	r4, r0
 801121e:	d003      	beq.n	8011228 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011220:	43a0      	bics	r0, r4
 8011222:	300a      	adds	r0, #10
 8011224:	b2c0      	uxtb	r0, r0
 8011226:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011228:	2100      	movs	r1, #0
  while(Value >= 10)
 801122a:	2b09      	cmp	r3, #9
 801122c:	d906      	bls.n	801123c <HAL_RTC_SetDate+0x88>
    Value -= 10;
 801122e:	3b0a      	subs	r3, #10
 8011230:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011232:	3101      	adds	r1, #1
  while(Value >= 10)
 8011234:	2b09      	cmp	r3, #9
 8011236:	d8fa      	bhi.n	801122e <HAL_RTC_SetDate+0x7a>
 8011238:	0109      	lsls	r1, r1, #4
 801123a:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801123c:	430b      	orrs	r3, r1
 801123e:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 8011240:	2100      	movs	r1, #0
  while(Value >= 10)
 8011242:	2809      	cmp	r0, #9
 8011244:	d906      	bls.n	8011254 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011246:	380a      	subs	r0, #10
 8011248:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 801124a:	3101      	adds	r1, #1
  while(Value >= 10)
 801124c:	2809      	cmp	r0, #9
 801124e:	d8fa      	bhi.n	8011246 <HAL_RTC_SetDate+0x92>
 8011250:	0109      	lsls	r1, r1, #4
 8011252:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011254:	4308      	orrs	r0, r1
 8011256:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011258:	2e09      	cmp	r6, #9
 801125a:	d922      	bls.n	80112a2 <HAL_RTC_SetDate+0xee>
    Value -= 10;
 801125c:	3e0a      	subs	r6, #10
 801125e:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011260:	3201      	adds	r2, #1
  while(Value >= 10)
 8011262:	2e09      	cmp	r6, #9
 8011264:	d8fa      	bhi.n	801125c <HAL_RTC_SetDate+0xa8>
 8011266:	0112      	lsls	r2, r2, #4
 8011268:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801126a:	433b      	orrs	r3, r7
 801126c:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801126e:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011270:	431c      	orrs	r4, r3
 8011272:	e7b5      	b.n	80111e0 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011274:	22ff      	movs	r2, #255	; 0xff
 8011276:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011278:	2304      	movs	r3, #4
 801127a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801127c:	2300      	movs	r3, #0
    return HAL_ERROR;
 801127e:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011280:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011282:	e7c8      	b.n	8011216 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011284:	2602      	movs	r6, #2
 8011286:	e7c6      	b.n	8011216 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011288:	0028      	movs	r0, r5
 801128a:	f7ff fe7d 	bl	8010f88 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801128e:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011290:	2800      	cmp	r0, #0
 8011292:	d0ba      	beq.n	801120a <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011294:	22ff      	movs	r2, #255	; 0xff
 8011296:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011298:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801129a:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 801129c:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 801129e:	2601      	movs	r6, #1
 80112a0:	e7b9      	b.n	8011216 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 80112a2:	2400      	movs	r4, #0
 80112a4:	e7e1      	b.n	801126a <HAL_RTC_SetDate+0xb6>
 80112a6:	46c0      	nop			; (mov r8, r8)
 80112a8:	00ffff3f 	.word	0x00ffff3f

080112ac <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112ac:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80112ae:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112b0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80112b2:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80112b4:	600a      	str	r2, [r1, #0]
}
 80112b6:	4770      	bx	lr

080112b8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112b8:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80112ba:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112bc:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80112be:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80112c0:	6808      	ldr	r0, [r1, #0]
}
 80112c2:	4770      	bx	lr

080112c4 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80112c4:	4770      	bx	lr
 80112c6:	46c0      	nop			; (mov r8, r8)

080112c8 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80112c8:	2239      	movs	r2, #57	; 0x39
 80112ca:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80112cc:	2101      	movs	r1, #1
{
 80112ce:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80112d0:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80112d2:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80112d4:	6823      	ldr	r3, [r4, #0]
 80112d6:	430b      	orrs	r3, r1
 80112d8:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80112da:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80112dc:	2000      	movs	r0, #0
 80112de:	bd10      	pop	{r4, pc}

080112e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112e0:	4a22      	ldr	r2, [pc, #136]	; (801136c <TIM_Base_SetConfig+0x8c>)
{
 80112e2:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 80112e4:	6803      	ldr	r3, [r0, #0]
 80112e6:	688d      	ldr	r5, [r1, #8]
 80112e8:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112ea:	4290      	cmp	r0, r2
 80112ec:	d02c      	beq.n	8011348 <TIM_Base_SetConfig+0x68>
 80112ee:	2280      	movs	r2, #128	; 0x80
 80112f0:	05d2      	lsls	r2, r2, #23
 80112f2:	4290      	cmp	r0, r2
 80112f4:	d012      	beq.n	801131c <TIM_Base_SetConfig+0x3c>
 80112f6:	4a1e      	ldr	r2, [pc, #120]	; (8011370 <TIM_Base_SetConfig+0x90>)
 80112f8:	4290      	cmp	r0, r2
 80112fa:	d00f      	beq.n	801131c <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112fc:	4a1d      	ldr	r2, [pc, #116]	; (8011374 <TIM_Base_SetConfig+0x94>)
 80112fe:	4290      	cmp	r0, r2
 8011300:	d02e      	beq.n	8011360 <TIM_Base_SetConfig+0x80>
 8011302:	4a1d      	ldr	r2, [pc, #116]	; (8011378 <TIM_Base_SetConfig+0x98>)
 8011304:	4290      	cmp	r0, r2
 8011306:	d023      	beq.n	8011350 <TIM_Base_SetConfig+0x70>
 8011308:	4a1c      	ldr	r2, [pc, #112]	; (801137c <TIM_Base_SetConfig+0x9c>)
 801130a:	4290      	cmp	r0, r2
 801130c:	d020      	beq.n	8011350 <TIM_Base_SetConfig+0x70>
 801130e:	4a1c      	ldr	r2, [pc, #112]	; (8011380 <TIM_Base_SetConfig+0xa0>)
 8011310:	4290      	cmp	r0, r2
 8011312:	d01d      	beq.n	8011350 <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011314:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011316:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011318:	6284      	str	r4, [r0, #40]	; 0x28
 801131a:	e012      	b.n	8011342 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801131c:	2270      	movs	r2, #112	; 0x70
 801131e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011320:	684a      	ldr	r2, [r1, #4]
 8011322:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011324:	4a17      	ldr	r2, [pc, #92]	; (8011384 <TIM_Base_SetConfig+0xa4>)
 8011326:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011328:	68ca      	ldr	r2, [r1, #12]
 801132a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801132c:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801132e:	4b13      	ldr	r3, [pc, #76]	; (801137c <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011330:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011332:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011334:	4298      	cmp	r0, r3
 8011336:	d002      	beq.n	801133e <TIM_Base_SetConfig+0x5e>
 8011338:	4b11      	ldr	r3, [pc, #68]	; (8011380 <TIM_Base_SetConfig+0xa0>)
 801133a:	4298      	cmp	r0, r3
 801133c:	d101      	bne.n	8011342 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801133e:	690b      	ldr	r3, [r1, #16]
 8011340:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011342:	2301      	movs	r3, #1
 8011344:	6143      	str	r3, [r0, #20]
}
 8011346:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011348:	2270      	movs	r2, #112	; 0x70
 801134a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801134c:	684a      	ldr	r2, [r1, #4]
 801134e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011350:	4a0c      	ldr	r2, [pc, #48]	; (8011384 <TIM_Base_SetConfig+0xa4>)
 8011352:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011354:	68ca      	ldr	r2, [r1, #12]
 8011356:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011358:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801135a:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801135c:	6284      	str	r4, [r0, #40]	; 0x28
 801135e:	e7ee      	b.n	801133e <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011360:	4a08      	ldr	r2, [pc, #32]	; (8011384 <TIM_Base_SetConfig+0xa4>)
 8011362:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011364:	68ca      	ldr	r2, [r1, #12]
 8011366:	4313      	orrs	r3, r2
 8011368:	e7d4      	b.n	8011314 <TIM_Base_SetConfig+0x34>
 801136a:	46c0      	nop			; (mov r8, r8)
 801136c:	40012c00 	.word	0x40012c00
 8011370:	40000400 	.word	0x40000400
 8011374:	40002000 	.word	0x40002000
 8011378:	40014000 	.word	0x40014000
 801137c:	40014400 	.word	0x40014400
 8011380:	40014800 	.word	0x40014800
 8011384:	fffffcff 	.word	0xfffffcff

08011388 <HAL_TIM_Base_Init>:
{
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 801138c:	d014      	beq.n	80113b8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801138e:	2339      	movs	r3, #57	; 0x39
 8011390:	5cc3      	ldrb	r3, [r0, r3]
 8011392:	b2db      	uxtb	r3, r3
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00a      	beq.n	80113ae <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011398:	2302      	movs	r3, #2
 801139a:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801139c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 801139e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80113a0:	1d21      	adds	r1, r4, #4
 80113a2:	f7ff ff9d 	bl	80112e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80113a6:	2301      	movs	r3, #1
  return HAL_OK;
 80113a8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80113aa:	5563      	strb	r3, [r4, r5]
}
 80113ac:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80113ae:	2238      	movs	r2, #56	; 0x38
 80113b0:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 80113b2:	f7ff ff87 	bl	80112c4 <HAL_TIM_Base_MspInit>
 80113b6:	e7ef      	b.n	8011398 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80113b8:	2001      	movs	r0, #1
 80113ba:	e7f7      	b.n	80113ac <HAL_TIM_Base_Init+0x24>

080113bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80113bc:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80113be:	2438      	movs	r4, #56	; 0x38
 80113c0:	5d03      	ldrb	r3, [r0, r4]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d019      	beq.n	80113fa <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 80113c6:	2539      	movs	r5, #57	; 0x39
 80113c8:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80113ca:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80113cc:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80113ce:	6803      	ldr	r3, [r0, #0]
 80113d0:	685a      	ldr	r2, [r3, #4]
 80113d2:	43b2      	bics	r2, r6
 80113d4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113d6:	685a      	ldr	r2, [r3, #4]
 80113d8:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80113da:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113dc:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80113de:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113e0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80113e2:	689a      	ldr	r2, [r3, #8]
 80113e4:	43b2      	bics	r2, r6
 80113e6:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80113e8:	689a      	ldr	r2, [r3, #8]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80113ee:	2301      	movs	r3, #1
 80113f0:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 80113f2:	2300      	movs	r3, #0
 80113f4:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 80113f6:	2000      	movs	r0, #0
}
 80113f8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80113fa:	2002      	movs	r0, #2
 80113fc:	e7fc      	b.n	80113f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80113fe:	46c0      	nop			; (mov r8, r8)

08011400 <HAL_UART_MspDeInit>:
 8011400:	4770      	bx	lr
 8011402:	46c0      	nop			; (mov r8, r8)

08011404 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011408:	2001      	movs	r0, #1
  if(huart == NULL)
 801140a:	2c00      	cmp	r4, #0
 801140c:	d012      	beq.n	8011434 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 801140e:	2669      	movs	r6, #105	; 0x69
 8011410:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8011412:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011414:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	4382      	bics	r2, r0
 801141c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801141e:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8011420:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011422:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011424:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011426:	f7ff ffeb 	bl	8011400 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801142a:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 801142c:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801142e:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011430:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011432:	54e5      	strb	r5, [r4, r3]
}
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	46c0      	nop			; (mov r8, r8)

08011438 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011438:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801143a:	2069      	movs	r0, #105	; 0x69
{
 801143c:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801143e:	5c1c      	ldrb	r4, [r3, r0]
 8011440:	2c01      	cmp	r4, #1
 8011442:	d003      	beq.n	801144c <HAL_UART_Transmit_IT+0x14>
 8011444:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011446:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011448:	2c22      	cmp	r4, #34	; 0x22
 801144a:	d122      	bne.n	8011492 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 801144c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801144e:	2900      	cmp	r1, #0
 8011450:	d01f      	beq.n	8011492 <HAL_UART_Transmit_IT+0x5a>
 8011452:	2a00      	cmp	r2, #0
 8011454:	d01d      	beq.n	8011492 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8011456:	2468      	movs	r4, #104	; 0x68
 8011458:	5d1d      	ldrb	r5, [r3, r4]
 801145a:	2d01      	cmp	r5, #1
 801145c:	d01d      	beq.n	801149a <HAL_UART_Transmit_IT+0x62>
 801145e:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8011460:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011462:	2150      	movs	r1, #80	; 0x50
 8011464:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011466:	3102      	adds	r1, #2
 8011468:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801146a:	2200      	movs	r2, #0
 801146c:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801146e:	3269      	adds	r2, #105	; 0x69
 8011470:	5c99      	ldrb	r1, [r3, r2]
 8011472:	2922      	cmp	r1, #34	; 0x22
 8011474:	d00e      	beq.n	8011494 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011476:	2112      	movs	r1, #18
 8011478:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801147a:	2001      	movs	r0, #1
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	6891      	ldr	r1, [r2, #8]
 8011480:	4301      	orrs	r1, r0
 8011482:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011484:	2000      	movs	r0, #0
 8011486:	2168      	movs	r1, #104	; 0x68
 8011488:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801148a:	6813      	ldr	r3, [r2, #0]
 801148c:	3118      	adds	r1, #24
 801148e:	430b      	orrs	r3, r1
 8011490:	6013      	str	r3, [r2, #0]
  }
}
 8011492:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011494:	3110      	adds	r1, #16
 8011496:	5499      	strb	r1, [r3, r2]
 8011498:	e7ef      	b.n	801147a <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 801149a:	2002      	movs	r0, #2
 801149c:	e7f9      	b.n	8011492 <HAL_UART_Transmit_IT+0x5a>
 801149e:	46c0      	nop			; (mov r8, r8)

080114a0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80114a0:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114a2:	2069      	movs	r0, #105	; 0x69
{
 80114a4:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114a6:	5c1c      	ldrb	r4, [r3, r0]
 80114a8:	2c01      	cmp	r4, #1
 80114aa:	d003      	beq.n	80114b4 <HAL_UART_Receive_IT+0x14>
 80114ac:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80114ae:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114b0:	2c12      	cmp	r4, #18
 80114b2:	d134      	bne.n	801151e <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 80114b4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80114b6:	2900      	cmp	r1, #0
 80114b8:	d031      	beq.n	801151e <HAL_UART_Receive_IT+0x7e>
 80114ba:	2a00      	cmp	r2, #0
 80114bc:	d02f      	beq.n	801151e <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 80114be:	2468      	movs	r4, #104	; 0x68
 80114c0:	5d1d      	ldrb	r5, [r3, r4]
 80114c2:	2d01      	cmp	r5, #1
 80114c4:	d041      	beq.n	801154a <HAL_UART_Receive_IT+0xaa>
 80114c6:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 80114c8:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80114ca:	2158      	movs	r1, #88	; 0x58
 80114cc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80114ce:	3102      	adds	r1, #2
 80114d0:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 80114d2:	2180      	movs	r1, #128	; 0x80
 80114d4:	689a      	ldr	r2, [r3, #8]
 80114d6:	0149      	lsls	r1, r1, #5
 80114d8:	428a      	cmp	r2, r1
 80114da:	d021      	beq.n	8011520 <HAL_UART_Receive_IT+0x80>
 80114dc:	2a00      	cmp	r2, #0
 80114de:	d129      	bne.n	8011534 <HAL_UART_Receive_IT+0x94>
 80114e0:	691a      	ldr	r2, [r3, #16]
 80114e2:	2a00      	cmp	r2, #0
 80114e4:	d133      	bne.n	801154e <HAL_UART_Receive_IT+0xae>
 80114e6:	225c      	movs	r2, #92	; 0x5c
 80114e8:	21ff      	movs	r1, #255	; 0xff
 80114ea:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114ec:	2200      	movs	r2, #0
 80114ee:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80114f0:	3269      	adds	r2, #105	; 0x69
 80114f2:	5c99      	ldrb	r1, [r3, r2]
 80114f4:	2912      	cmp	r1, #18
 80114f6:	d01a      	beq.n	801152e <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80114f8:	2122      	movs	r1, #34	; 0x22
 80114fa:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80114fc:	2180      	movs	r1, #128	; 0x80
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	0049      	lsls	r1, r1, #1
 8011502:	6810      	ldr	r0, [r2, #0]
 8011504:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011506:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011508:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801150a:	6891      	ldr	r1, [r2, #8]
 801150c:	4301      	orrs	r1, r0
 801150e:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011510:	2000      	movs	r0, #0
 8011512:	2168      	movs	r1, #104	; 0x68
 8011514:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011516:	6813      	ldr	r3, [r2, #0]
 8011518:	3948      	subs	r1, #72	; 0x48
 801151a:	430b      	orrs	r3, r1
 801151c:	6013      	str	r3, [r2, #0]
  }
}
 801151e:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8011520:	691a      	ldr	r2, [r3, #16]
 8011522:	2a00      	cmp	r2, #0
 8011524:	d1df      	bne.n	80114e6 <HAL_UART_Receive_IT+0x46>
 8011526:	490c      	ldr	r1, [pc, #48]	; (8011558 <HAL_UART_Receive_IT+0xb8>)
 8011528:	325c      	adds	r2, #92	; 0x5c
 801152a:	5299      	strh	r1, [r3, r2]
 801152c:	e7de      	b.n	80114ec <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801152e:	3120      	adds	r1, #32
 8011530:	5499      	strb	r1, [r3, r2]
 8011532:	e7e3      	b.n	80114fc <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8011534:	2180      	movs	r1, #128	; 0x80
 8011536:	0549      	lsls	r1, r1, #21
 8011538:	428a      	cmp	r2, r1
 801153a:	d1d7      	bne.n	80114ec <HAL_UART_Receive_IT+0x4c>
 801153c:	691a      	ldr	r2, [r3, #16]
 801153e:	2a00      	cmp	r2, #0
 8011540:	d005      	beq.n	801154e <HAL_UART_Receive_IT+0xae>
 8011542:	225c      	movs	r2, #92	; 0x5c
 8011544:	213f      	movs	r1, #63	; 0x3f
 8011546:	5299      	strh	r1, [r3, r2]
 8011548:	e7d0      	b.n	80114ec <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 801154a:	2002      	movs	r0, #2
 801154c:	e7e7      	b.n	801151e <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 801154e:	225c      	movs	r2, #92	; 0x5c
 8011550:	217f      	movs	r1, #127	; 0x7f
 8011552:	5299      	strh	r1, [r3, r2]
 8011554:	e7ca      	b.n	80114ec <HAL_UART_Receive_IT+0x4c>
 8011556:	46c0      	nop			; (mov r8, r8)
 8011558:	000001ff 	.word	0x000001ff

0801155c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801155c:	b570      	push	{r4, r5, r6, lr}
 801155e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011560:	2069      	movs	r0, #105	; 0x69
 8011562:	5c25      	ldrb	r5, [r4, r0]
 8011564:	2d01      	cmp	r5, #1
 8011566:	d003      	beq.n	8011570 <HAL_UART_Receive_DMA+0x14>
 8011568:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801156a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801156c:	2b12      	cmp	r3, #18
 801156e:	d12b      	bne.n	80115c8 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8011570:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011572:	2900      	cmp	r1, #0
 8011574:	d028      	beq.n	80115c8 <HAL_UART_Receive_DMA+0x6c>
 8011576:	2a00      	cmp	r2, #0
 8011578:	d026      	beq.n	80115c8 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 801157a:	2368      	movs	r3, #104	; 0x68
 801157c:	5ce5      	ldrb	r5, [r4, r3]
 801157e:	2d01      	cmp	r5, #1
 8011580:	d026      	beq.n	80115d0 <HAL_UART_Receive_DMA+0x74>
 8011582:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011584:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011586:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011588:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801158a:	2300      	movs	r3, #0
 801158c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801158e:	3369      	adds	r3, #105	; 0x69
 8011590:	5ce0      	ldrb	r0, [r4, r3]
 8011592:	2812      	cmp	r0, #18
 8011594:	d019      	beq.n	80115ca <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011596:	2022      	movs	r0, #34	; 0x22
 8011598:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801159a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801159c:	4b0d      	ldr	r3, [pc, #52]	; (80115d4 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801159e:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80115a0:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80115a2:	4b0d      	ldr	r3, [pc, #52]	; (80115d8 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80115a4:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80115a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80115a8:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <HAL_UART_Receive_DMA+0x80>)
 80115aa:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80115ac:	0013      	movs	r3, r2
 80115ae:	000a      	movs	r2, r1
 80115b0:	0029      	movs	r1, r5
 80115b2:	f7fd ffdb 	bl	800f56c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80115b6:	2140      	movs	r1, #64	; 0x40
 80115b8:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80115ba:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80115bc:	6893      	ldr	r3, [r2, #8]
 80115be:	430b      	orrs	r3, r1
 80115c0:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80115c2:	2368      	movs	r3, #104	; 0x68
 80115c4:	2200      	movs	r2, #0
 80115c6:	54e2      	strb	r2, [r4, r3]
  }
}
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80115ca:	3020      	adds	r0, #32
 80115cc:	54e0      	strb	r0, [r4, r3]
 80115ce:	e7e4      	b.n	801159a <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 80115d0:	2002      	movs	r0, #2
 80115d2:	e7f9      	b.n	80115c8 <HAL_UART_Receive_DMA+0x6c>
 80115d4:	080115e1 	.word	0x080115e1
 80115d8:	0801161d 	.word	0x0801161d
 80115dc:	08011629 	.word	0x08011629

080115e0 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80115e0:	6803      	ldr	r3, [r0, #0]
{
 80115e2:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80115e4:	6819      	ldr	r1, [r3, #0]
 80115e6:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80115e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80115ea:	400b      	ands	r3, r1
 80115ec:	d10c      	bne.n	8011608 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 80115ee:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80115f0:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 80115f2:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80115f4:	6811      	ldr	r1, [r2, #0]
 80115f6:	688b      	ldr	r3, [r1, #8]
 80115f8:	4383      	bics	r3, r0
 80115fa:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80115fc:	2369      	movs	r3, #105	; 0x69
 80115fe:	5cd1      	ldrb	r1, [r2, r3]
 8011600:	2932      	cmp	r1, #50	; 0x32
 8011602:	d005      	beq.n	8011610 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8011604:	2101      	movs	r1, #1
 8011606:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8011608:	0010      	movs	r0, r2
 801160a:	f7fa fe57 	bl	800c2bc <HAL_UART_RxCpltCallback>
}
 801160e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011610:	3920      	subs	r1, #32
 8011612:	54d1      	strb	r1, [r2, r3]
 8011614:	e7f8      	b.n	8011608 <UART_DMAReceiveCplt+0x28>
 8011616:	46c0      	nop			; (mov r8, r8)

08011618 <HAL_UART_RxHalfCpltCallback>:
 8011618:	4770      	bx	lr
 801161a:	46c0      	nop			; (mov r8, r8)

0801161c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801161c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801161e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011620:	f7ff fffa 	bl	8011618 <HAL_UART_RxHalfCpltCallback>
}
 8011624:	bd10      	pop	{r4, pc}
 8011626:	46c0      	nop			; (mov r8, r8)

08011628 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8011628:	2300      	movs	r3, #0
 801162a:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801162c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 801162e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8011630:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8011632:	3a08      	subs	r2, #8
 8011634:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8011636:	3369      	adds	r3, #105	; 0x69
 8011638:	3a51      	subs	r2, #81	; 0x51
 801163a:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801163c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801163e:	320f      	adds	r2, #15
 8011640:	4313      	orrs	r3, r2
 8011642:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8011644:	f7fa fe16 	bl	800c274 <HAL_UART_ErrorCallback>
}
 8011648:	bd10      	pop	{r4, pc}
 801164a:	46c0      	nop			; (mov r8, r8)

0801164c <UART_SetConfig>:
{
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011650:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011652:	69c1      	ldr	r1, [r0, #28]
 8011654:	6883      	ldr	r3, [r0, #8]
 8011656:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011658:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801165a:	4303      	orrs	r3, r0
 801165c:	6968      	ldr	r0, [r5, #20]
 801165e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011660:	4861      	ldr	r0, [pc, #388]	; (80117e8 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011662:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011664:	4002      	ands	r2, r0
 8011666:	4313      	orrs	r3, r2
 8011668:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801166a:	6863      	ldr	r3, [r4, #4]
 801166c:	4a5f      	ldr	r2, [pc, #380]	; (80117ec <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801166e:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011670:	4013      	ands	r3, r2
 8011672:	68ea      	ldr	r2, [r5, #12]
 8011674:	4313      	orrs	r3, r2
 8011676:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8011678:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801167a:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801167c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801167e:	485c      	ldr	r0, [pc, #368]	; (80117f0 <UART_SetConfig+0x1a4>)
 8011680:	4002      	ands	r2, r0
 8011682:	4313      	orrs	r3, r2
 8011684:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011686:	4b5b      	ldr	r3, [pc, #364]	; (80117f4 <UART_SetConfig+0x1a8>)
 8011688:	429c      	cmp	r4, r3
 801168a:	d044      	beq.n	8011716 <UART_SetConfig+0xca>
 801168c:	4b5a      	ldr	r3, [pc, #360]	; (80117f8 <UART_SetConfig+0x1ac>)
 801168e:	429c      	cmp	r4, r3
 8011690:	d018      	beq.n	80116c4 <UART_SetConfig+0x78>
 8011692:	4b5a      	ldr	r3, [pc, #360]	; (80117fc <UART_SetConfig+0x1b0>)
 8011694:	429c      	cmp	r4, r3
 8011696:	d100      	bne.n	801169a <UART_SetConfig+0x4e>
 8011698:	e085      	b.n	80117a6 <UART_SetConfig+0x15a>
 801169a:	4b59      	ldr	r3, [pc, #356]	; (8011800 <UART_SetConfig+0x1b4>)
 801169c:	429c      	cmp	r4, r3
 801169e:	d031      	beq.n	8011704 <UART_SetConfig+0xb8>
 80116a0:	4b58      	ldr	r3, [pc, #352]	; (8011804 <UART_SetConfig+0x1b8>)
 80116a2:	429c      	cmp	r4, r3
 80116a4:	d02e      	beq.n	8011704 <UART_SetConfig+0xb8>
 80116a6:	4b58      	ldr	r3, [pc, #352]	; (8011808 <UART_SetConfig+0x1bc>)
 80116a8:	429c      	cmp	r4, r3
 80116aa:	d02b      	beq.n	8011704 <UART_SetConfig+0xb8>
 80116ac:	4b57      	ldr	r3, [pc, #348]	; (801180c <UART_SetConfig+0x1c0>)
 80116ae:	429c      	cmp	r4, r3
 80116b0:	d028      	beq.n	8011704 <UART_SetConfig+0xb8>
 80116b2:	4b57      	ldr	r3, [pc, #348]	; (8011810 <UART_SetConfig+0x1c4>)
 80116b4:	429c      	cmp	r4, r3
 80116b6:	d025      	beq.n	8011704 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116b8:	2380      	movs	r3, #128	; 0x80
 80116ba:	021b      	lsls	r3, r3, #8
 80116bc:	4299      	cmp	r1, r3
 80116be:	d050      	beq.n	8011762 <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 80116c0:	2001      	movs	r0, #1
 80116c2:	e01c      	b.n	80116fe <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80116c4:	20c0      	movs	r0, #192	; 0xc0
 80116c6:	2280      	movs	r2, #128	; 0x80
 80116c8:	4b52      	ldr	r3, [pc, #328]	; (8011814 <UART_SetConfig+0x1c8>)
 80116ca:	0280      	lsls	r0, r0, #10
 80116cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ce:	0252      	lsls	r2, r2, #9
 80116d0:	4003      	ands	r3, r0
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d049      	beq.n	801176a <UART_SetConfig+0x11e>
 80116d6:	d913      	bls.n	8011700 <UART_SetConfig+0xb4>
 80116d8:	2280      	movs	r2, #128	; 0x80
 80116da:	0292      	lsls	r2, r2, #10
 80116dc:	4293      	cmp	r3, r2
 80116de:	d100      	bne.n	80116e2 <UART_SetConfig+0x96>
 80116e0:	e070      	b.n	80117c4 <UART_SetConfig+0x178>
 80116e2:	4283      	cmp	r3, r0
 80116e4:	d1e8      	bne.n	80116b8 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116e6:	2380      	movs	r3, #128	; 0x80
 80116e8:	021b      	lsls	r3, r3, #8
 80116ea:	4299      	cmp	r1, r3
 80116ec:	d056      	beq.n	801179c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80116ee:	6869      	ldr	r1, [r5, #4]
 80116f0:	4849      	ldr	r0, [pc, #292]	; (8011818 <UART_SetConfig+0x1cc>)
 80116f2:	f7ee fd2d 	bl	8000150 <__udivsi3>
 80116f6:	0400      	lsls	r0, r0, #16
 80116f8:	0c00      	lsrs	r0, r0, #16
 80116fa:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80116fc:	2000      	movs	r0, #0
}
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011700:	2b00      	cmp	r3, #0
 8011702:	d1d9      	bne.n	80116b8 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011704:	2380      	movs	r3, #128	; 0x80
 8011706:	021b      	lsls	r3, r3, #8
 8011708:	4299      	cmp	r1, r3
 801170a:	d060      	beq.n	80117ce <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801170c:	f7ff fb2e 	bl	8010d6c <HAL_RCC_GetPCLK1Freq>
 8011710:	682c      	ldr	r4, [r5, #0]
 8011712:	6869      	ldr	r1, [r5, #4]
 8011714:	e7ed      	b.n	80116f2 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011716:	4b3f      	ldr	r3, [pc, #252]	; (8011814 <UART_SetConfig+0x1c8>)
 8011718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801171a:	2303      	movs	r3, #3
 801171c:	4013      	ands	r3, r2
 801171e:	4a3f      	ldr	r2, [pc, #252]	; (801181c <UART_SetConfig+0x1d0>)
 8011720:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011722:	2280      	movs	r2, #128	; 0x80
 8011724:	0212      	lsls	r2, r2, #8
 8011726:	4291      	cmp	r1, r2
 8011728:	d00e      	beq.n	8011748 <UART_SetConfig+0xfc>
    switch (clocksource)
 801172a:	2b02      	cmp	r3, #2
 801172c:	d0df      	beq.n	80116ee <UART_SetConfig+0xa2>
 801172e:	d956      	bls.n	80117de <UART_SetConfig+0x192>
 8011730:	2b04      	cmp	r3, #4
 8011732:	d01e      	beq.n	8011772 <UART_SetConfig+0x126>
 8011734:	2b08      	cmp	r3, #8
 8011736:	d1c3      	bne.n	80116c0 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8011738:	2080      	movs	r0, #128	; 0x80
 801173a:	6869      	ldr	r1, [r5, #4]
 801173c:	0200      	lsls	r0, r0, #8
 801173e:	f7ee fd07 	bl	8000150 <__udivsi3>
 8011742:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011744:	2000      	movs	r0, #0
        break;
 8011746:	e7da      	b.n	80116fe <UART_SetConfig+0xb2>
    switch (clocksource)
 8011748:	2b02      	cmp	r3, #2
 801174a:	d027      	beq.n	801179c <UART_SetConfig+0x150>
 801174c:	d907      	bls.n	801175e <UART_SetConfig+0x112>
 801174e:	2b04      	cmp	r3, #4
 8011750:	d014      	beq.n	801177c <UART_SetConfig+0x130>
 8011752:	2b08      	cmp	r3, #8
 8011754:	d105      	bne.n	8011762 <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011756:	2080      	movs	r0, #128	; 0x80
 8011758:	6869      	ldr	r1, [r5, #4]
 801175a:	0240      	lsls	r0, r0, #9
 801175c:	e020      	b.n	80117a0 <UART_SetConfig+0x154>
    switch (clocksource)
 801175e:	2b00      	cmp	r3, #0
 8011760:	d035      	beq.n	80117ce <UART_SetConfig+0x182>
 8011762:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8011764:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8011766:	60e3      	str	r3, [r4, #12]
 8011768:	e7c9      	b.n	80116fe <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801176a:	2380      	movs	r3, #128	; 0x80
 801176c:	021b      	lsls	r3, r3, #8
 801176e:	4299      	cmp	r1, r3
 8011770:	d004      	beq.n	801177c <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011772:	f7ff faa1 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8011776:	682c      	ldr	r4, [r5, #0]
 8011778:	6869      	ldr	r1, [r5, #4]
 801177a:	e7ba      	b.n	80116f2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801177c:	f7ff fa9c 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8011780:	6869      	ldr	r1, [r5, #4]
 8011782:	0040      	lsls	r0, r0, #1
 8011784:	f7ee fce4 	bl	8000150 <__udivsi3>
 8011788:	682c      	ldr	r4, [r5, #0]
 801178a:	220f      	movs	r2, #15
 801178c:	0703      	lsls	r3, r0, #28
 801178e:	0f5b      	lsrs	r3, r3, #29
 8011790:	4390      	bics	r0, r2
 8011792:	4303      	orrs	r3, r0
 8011794:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8011796:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8011798:	60e3      	str	r3, [r4, #12]
 801179a:	e7b0      	b.n	80116fe <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801179c:	6869      	ldr	r1, [r5, #4]
 801179e:	4820      	ldr	r0, [pc, #128]	; (8011820 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80117a0:	f7ee fcd6 	bl	8000150 <__udivsi3>
 80117a4:	e7f1      	b.n	801178a <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117a6:	20c0      	movs	r0, #192	; 0xc0
 80117a8:	2280      	movs	r2, #128	; 0x80
 80117aa:	4b1a      	ldr	r3, [pc, #104]	; (8011814 <UART_SetConfig+0x1c8>)
 80117ac:	0300      	lsls	r0, r0, #12
 80117ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b0:	02d2      	lsls	r2, r2, #11
 80117b2:	4003      	ands	r3, r0
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d0d8      	beq.n	801176a <UART_SetConfig+0x11e>
 80117b8:	d9a2      	bls.n	8011700 <UART_SetConfig+0xb4>
 80117ba:	2280      	movs	r2, #128	; 0x80
 80117bc:	0312      	lsls	r2, r2, #12
 80117be:	4293      	cmp	r3, r2
 80117c0:	d000      	beq.n	80117c4 <UART_SetConfig+0x178>
 80117c2:	e78e      	b.n	80116e2 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117c4:	2380      	movs	r3, #128	; 0x80
 80117c6:	021b      	lsls	r3, r3, #8
 80117c8:	4299      	cmp	r1, r3
 80117ca:	d1b5      	bne.n	8011738 <UART_SetConfig+0xec>
 80117cc:	e7c3      	b.n	8011756 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80117ce:	f7ff facd 	bl	8010d6c <HAL_RCC_GetPCLK1Freq>
 80117d2:	6869      	ldr	r1, [r5, #4]
 80117d4:	0040      	lsls	r0, r0, #1
 80117d6:	f7ee fcbb 	bl	8000150 <__udivsi3>
 80117da:	682c      	ldr	r4, [r5, #0]
 80117dc:	e7d5      	b.n	801178a <UART_SetConfig+0x13e>
    switch (clocksource)
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d094      	beq.n	801170c <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 80117e2:	2001      	movs	r0, #1
 80117e4:	e78b      	b.n	80116fe <UART_SetConfig+0xb2>
 80117e6:	46c0      	nop			; (mov r8, r8)
 80117e8:	efff69f3 	.word	0xefff69f3
 80117ec:	ffffcfff 	.word	0xffffcfff
 80117f0:	fffff4ff 	.word	0xfffff4ff
 80117f4:	40013800 	.word	0x40013800
 80117f8:	40004400 	.word	0x40004400
 80117fc:	40004800 	.word	0x40004800
 8011800:	40004c00 	.word	0x40004c00
 8011804:	40005000 	.word	0x40005000
 8011808:	40011400 	.word	0x40011400
 801180c:	40011800 	.word	0x40011800
 8011810:	40011c00 	.word	0x40011c00
 8011814:	40021000 	.word	0x40021000
 8011818:	007a1200 	.word	0x007a1200
 801181c:	08017100 	.word	0x08017100
 8011820:	00f42400 	.word	0x00f42400

08011824 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011824:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8011826:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011828:	07da      	lsls	r2, r3, #31
 801182a:	d506      	bpl.n	801183a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801182c:	6801      	ldr	r1, [r0, #0]
 801182e:	4c28      	ldr	r4, [pc, #160]	; (80118d0 <UART_AdvFeatureConfig+0xac>)
 8011830:	684a      	ldr	r2, [r1, #4]
 8011832:	4022      	ands	r2, r4
 8011834:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011836:	4322      	orrs	r2, r4
 8011838:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801183a:	079a      	lsls	r2, r3, #30
 801183c:	d506      	bpl.n	801184c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801183e:	6801      	ldr	r1, [r0, #0]
 8011840:	4c24      	ldr	r4, [pc, #144]	; (80118d4 <UART_AdvFeatureConfig+0xb0>)
 8011842:	684a      	ldr	r2, [r1, #4]
 8011844:	4022      	ands	r2, r4
 8011846:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011848:	4322      	orrs	r2, r4
 801184a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801184c:	075a      	lsls	r2, r3, #29
 801184e:	d506      	bpl.n	801185e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011850:	6801      	ldr	r1, [r0, #0]
 8011852:	4c21      	ldr	r4, [pc, #132]	; (80118d8 <UART_AdvFeatureConfig+0xb4>)
 8011854:	684a      	ldr	r2, [r1, #4]
 8011856:	4022      	ands	r2, r4
 8011858:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801185a:	4322      	orrs	r2, r4
 801185c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801185e:	071a      	lsls	r2, r3, #28
 8011860:	d506      	bpl.n	8011870 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011862:	6801      	ldr	r1, [r0, #0]
 8011864:	4c1d      	ldr	r4, [pc, #116]	; (80118dc <UART_AdvFeatureConfig+0xb8>)
 8011866:	684a      	ldr	r2, [r1, #4]
 8011868:	4022      	ands	r2, r4
 801186a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801186c:	4322      	orrs	r2, r4
 801186e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011870:	06da      	lsls	r2, r3, #27
 8011872:	d506      	bpl.n	8011882 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011874:	6801      	ldr	r1, [r0, #0]
 8011876:	4c1a      	ldr	r4, [pc, #104]	; (80118e0 <UART_AdvFeatureConfig+0xbc>)
 8011878:	688a      	ldr	r2, [r1, #8]
 801187a:	4022      	ands	r2, r4
 801187c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801187e:	4322      	orrs	r2, r4
 8011880:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011882:	069a      	lsls	r2, r3, #26
 8011884:	d506      	bpl.n	8011894 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011886:	6801      	ldr	r1, [r0, #0]
 8011888:	4c16      	ldr	r4, [pc, #88]	; (80118e4 <UART_AdvFeatureConfig+0xc0>)
 801188a:	688a      	ldr	r2, [r1, #8]
 801188c:	4022      	ands	r2, r4
 801188e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8011890:	4322      	orrs	r2, r4
 8011892:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011894:	065a      	lsls	r2, r3, #25
 8011896:	d50a      	bpl.n	80118ae <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011898:	6801      	ldr	r1, [r0, #0]
 801189a:	4d13      	ldr	r5, [pc, #76]	; (80118e8 <UART_AdvFeatureConfig+0xc4>)
 801189c:	684a      	ldr	r2, [r1, #4]
 801189e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80118a0:	402a      	ands	r2, r5
 80118a2:	4322      	orrs	r2, r4
 80118a4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118a6:	2280      	movs	r2, #128	; 0x80
 80118a8:	0352      	lsls	r2, r2, #13
 80118aa:	4294      	cmp	r4, r2
 80118ac:	d009      	beq.n	80118c2 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118ae:	061b      	lsls	r3, r3, #24
 80118b0:	d506      	bpl.n	80118c0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118b2:	6802      	ldr	r2, [r0, #0]
 80118b4:	490d      	ldr	r1, [pc, #52]	; (80118ec <UART_AdvFeatureConfig+0xc8>)
 80118b6:	6853      	ldr	r3, [r2, #4]
 80118b8:	400b      	ands	r3, r1
 80118ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80118bc:	430b      	orrs	r3, r1
 80118be:	6053      	str	r3, [r2, #4]
}
 80118c0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118c2:	684a      	ldr	r2, [r1, #4]
 80118c4:	4c0a      	ldr	r4, [pc, #40]	; (80118f0 <UART_AdvFeatureConfig+0xcc>)
 80118c6:	4022      	ands	r2, r4
 80118c8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80118ca:	4322      	orrs	r2, r4
 80118cc:	604a      	str	r2, [r1, #4]
 80118ce:	e7ee      	b.n	80118ae <UART_AdvFeatureConfig+0x8a>
 80118d0:	fffdffff 	.word	0xfffdffff
 80118d4:	fffeffff 	.word	0xfffeffff
 80118d8:	fffbffff 	.word	0xfffbffff
 80118dc:	ffff7fff 	.word	0xffff7fff
 80118e0:	ffffefff 	.word	0xffffefff
 80118e4:	ffffdfff 	.word	0xffffdfff
 80118e8:	ffefffff 	.word	0xffefffff
 80118ec:	fff7ffff 	.word	0xfff7ffff
 80118f0:	ff9fffff 	.word	0xff9fffff

080118f4 <UART_WaitOnFlagUntilTimeout>:
{
 80118f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118f6:	46c6      	mov	lr, r8
 80118f8:	4690      	mov	r8, r2
 80118fa:	b500      	push	{lr}
 80118fc:	001d      	movs	r5, r3
 80118fe:	0006      	movs	r6, r0
 8011900:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8011902:	f7fd f9b7 	bl	800ec74 <HAL_GetTick>
  if(Status == RESET)
 8011906:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8011908:	0007      	movs	r7, r0
  if(Status == RESET)
 801190a:	2b00      	cmp	r3, #0
 801190c:	d112      	bne.n	8011934 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801190e:	6832      	ldr	r2, [r6, #0]
 8011910:	e001      	b.n	8011916 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8011912:	1c6b      	adds	r3, r5, #1
 8011914:	d117      	bne.n	8011946 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011916:	69d3      	ldr	r3, [r2, #28]
 8011918:	4023      	ands	r3, r4
 801191a:	42a3      	cmp	r3, r4
 801191c:	d1f9      	bne.n	8011912 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801191e:	2000      	movs	r0, #0
}
 8011920:	bc04      	pop	{r2}
 8011922:	4690      	mov	r8, r2
 8011924:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011926:	2d00      	cmp	r5, #0
 8011928:	d015      	beq.n	8011956 <UART_WaitOnFlagUntilTimeout+0x62>
 801192a:	f7fd f9a3 	bl	800ec74 <HAL_GetTick>
 801192e:	1bc0      	subs	r0, r0, r7
 8011930:	42a8      	cmp	r0, r5
 8011932:	d80f      	bhi.n	8011954 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011934:	6832      	ldr	r2, [r6, #0]
 8011936:	e001      	b.n	801193c <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8011938:	1c6b      	adds	r3, r5, #1
 801193a:	d1f4      	bne.n	8011926 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 801193c:	69d3      	ldr	r3, [r2, #28]
 801193e:	4023      	ands	r3, r4
 8011940:	42a3      	cmp	r3, r4
 8011942:	d0f9      	beq.n	8011938 <UART_WaitOnFlagUntilTimeout+0x44>
 8011944:	e7eb      	b.n	801191e <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011946:	2d00      	cmp	r5, #0
 8011948:	d005      	beq.n	8011956 <UART_WaitOnFlagUntilTimeout+0x62>
 801194a:	f7fd f993 	bl	800ec74 <HAL_GetTick>
 801194e:	1bc0      	subs	r0, r0, r7
 8011950:	42a8      	cmp	r0, r5
 8011952:	d9dc      	bls.n	801190e <UART_WaitOnFlagUntilTimeout+0x1a>
 8011954:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011956:	2180      	movs	r1, #128	; 0x80
 8011958:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 801195a:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801195c:	438b      	bics	r3, r1
 801195e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011960:	6813      	ldr	r3, [r2, #0]
 8011962:	3960      	subs	r1, #96	; 0x60
 8011964:	438b      	bics	r3, r1
 8011966:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011968:	6813      	ldr	r3, [r2, #0]
 801196a:	4907      	ldr	r1, [pc, #28]	; (8011988 <UART_WaitOnFlagUntilTimeout+0x94>)
 801196c:	400b      	ands	r3, r1
 801196e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011970:	6893      	ldr	r3, [r2, #8]
 8011972:	3103      	adds	r1, #3
 8011974:	31ff      	adds	r1, #255	; 0xff
 8011976:	438b      	bics	r3, r1
 8011978:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 801197a:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 801197c:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801197e:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8011980:	3b01      	subs	r3, #1
 8011982:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011984:	e7cc      	b.n	8011920 <UART_WaitOnFlagUntilTimeout+0x2c>
 8011986:	46c0      	nop			; (mov r8, r8)
 8011988:	fffffeff 	.word	0xfffffeff

0801198c <HAL_UART_Transmit>:
{
 801198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801198e:	46c6      	mov	lr, r8
 8011990:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011992:	2369      	movs	r3, #105	; 0x69
{
 8011994:	b500      	push	{lr}
 8011996:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011998:	5cc1      	ldrb	r1, [r0, r3]
{
 801199a:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801199c:	2901      	cmp	r1, #1
 801199e:	d003      	beq.n	80119a8 <HAL_UART_Transmit+0x1c>
 80119a0:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80119a2:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80119a4:	2b22      	cmp	r3, #34	; 0x22
 80119a6:	d147      	bne.n	8011a38 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80119a8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80119aa:	2d00      	cmp	r5, #0
 80119ac:	d044      	beq.n	8011a38 <HAL_UART_Transmit+0xac>
 80119ae:	2a00      	cmp	r2, #0
 80119b0:	d042      	beq.n	8011a38 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80119b2:	2368      	movs	r3, #104	; 0x68
 80119b4:	5ce1      	ldrb	r1, [r4, r3]
 80119b6:	2901      	cmp	r1, #1
 80119b8:	d046      	beq.n	8011a48 <HAL_UART_Transmit+0xbc>
 80119ba:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119bc:	2300      	movs	r3, #0
 80119be:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80119c0:	3369      	adds	r3, #105	; 0x69
 80119c2:	5ce1      	ldrb	r1, [r4, r3]
 80119c4:	2922      	cmp	r1, #34	; 0x22
 80119c6:	d03a      	beq.n	8011a3e <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80119c8:	2112      	movs	r1, #18
 80119ca:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80119cc:	2350      	movs	r3, #80	; 0x50
 80119ce:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119d0:	2380      	movs	r3, #128	; 0x80
 80119d2:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 80119d4:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119d6:	4698      	mov	r8, r3
 80119d8:	e005      	b.n	80119e6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80119da:	782a      	ldrb	r2, [r5, #0]
 80119dc:	3501      	adds	r5, #1
 80119de:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80119e0:	5ba2      	ldrh	r2, [r4, r6]
 80119e2:	2a00      	cmp	r2, #0
 80119e4:	d018      	beq.n	8011a18 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 80119e6:	3a01      	subs	r2, #1
 80119e8:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80119ea:	003b      	movs	r3, r7
 80119ec:	2200      	movs	r2, #0
 80119ee:	2180      	movs	r1, #128	; 0x80
 80119f0:	0020      	movs	r0, r4
 80119f2:	f7ff ff7f 	bl	80118f4 <UART_WaitOnFlagUntilTimeout>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	d124      	bne.n	8011a44 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119fa:	68a2      	ldr	r2, [r4, #8]
 80119fc:	6823      	ldr	r3, [r4, #0]
 80119fe:	4542      	cmp	r2, r8
 8011a00:	d1eb      	bne.n	80119da <HAL_UART_Transmit+0x4e>
 8011a02:	6922      	ldr	r2, [r4, #16]
 8011a04:	2a00      	cmp	r2, #0
 8011a06:	d1e8      	bne.n	80119da <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011a08:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8011a0a:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011a0c:	05d2      	lsls	r2, r2, #23
 8011a0e:	0dd2      	lsrs	r2, r2, #23
 8011a10:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8011a12:	5ba2      	ldrh	r2, [r4, r6]
 8011a14:	2a00      	cmp	r2, #0
 8011a16:	d1e6      	bne.n	80119e6 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8011a18:	003b      	movs	r3, r7
 8011a1a:	2140      	movs	r1, #64	; 0x40
 8011a1c:	0020      	movs	r0, r4
 8011a1e:	f7ff ff69 	bl	80118f4 <UART_WaitOnFlagUntilTimeout>
 8011a22:	2800      	cmp	r0, #0
 8011a24:	d10e      	bne.n	8011a44 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011a26:	2369      	movs	r3, #105	; 0x69
 8011a28:	5ce2      	ldrb	r2, [r4, r3]
 8011a2a:	2a32      	cmp	r2, #50	; 0x32
 8011a2c:	d00e      	beq.n	8011a4c <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 8011a2e:	2201      	movs	r2, #1
 8011a30:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8011a32:	2368      	movs	r3, #104	; 0x68
 8011a34:	2200      	movs	r2, #0
 8011a36:	54e2      	strb	r2, [r4, r3]
}
 8011a38:	bc04      	pop	{r2}
 8011a3a:	4690      	mov	r8, r2
 8011a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011a3e:	3110      	adds	r1, #16
 8011a40:	54e1      	strb	r1, [r4, r3]
 8011a42:	e7c3      	b.n	80119cc <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8011a44:	2003      	movs	r0, #3
 8011a46:	e7f7      	b.n	8011a38 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8011a48:	2002      	movs	r0, #2
 8011a4a:	e7f5      	b.n	8011a38 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011a4c:	3a10      	subs	r2, #16
 8011a4e:	54e2      	strb	r2, [r4, r3]
 8011a50:	e7ef      	b.n	8011a32 <HAL_UART_Transmit+0xa6>
 8011a52:	46c0      	nop			; (mov r8, r8)

08011a54 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a54:	2300      	movs	r3, #0
{
 8011a56:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011a58:	4a1a      	ldr	r2, [pc, #104]	; (8011ac4 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a5a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011a5c:	6803      	ldr	r3, [r0, #0]
{
 8011a5e:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d00d      	beq.n	8011a80 <UART_CheckIdleState+0x2c>
 8011a64:	4a18      	ldr	r2, [pc, #96]	; (8011ac8 <UART_CheckIdleState+0x74>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d00a      	beq.n	8011a80 <UART_CheckIdleState+0x2c>
 8011a6a:	4a18      	ldr	r2, [pc, #96]	; (8011acc <UART_CheckIdleState+0x78>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d007      	beq.n	8011a80 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8011a70:	2369      	movs	r3, #105	; 0x69
 8011a72:	2201      	movs	r2, #1
 8011a74:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011a76:	2200      	movs	r2, #0
  return HAL_OK;
 8011a78:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	54e2      	strb	r2, [r4, r3]
}
 8011a7e:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	0712      	lsls	r2, r2, #28
 8011a84:	d40e      	bmi.n	8011aa4 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	075b      	lsls	r3, r3, #29
 8011a8a:	d5f1      	bpl.n	8011a70 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011a8c:	23fa      	movs	r3, #250	; 0xfa
 8011a8e:	2180      	movs	r1, #128	; 0x80
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	2200      	movs	r2, #0
 8011a94:	03c9      	lsls	r1, r1, #15
 8011a96:	0020      	movs	r0, r4
 8011a98:	f7ff ff2c 	bl	80118f4 <UART_WaitOnFlagUntilTimeout>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d0e7      	beq.n	8011a70 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8011aa0:	2003      	movs	r0, #3
 8011aa2:	e7ec      	b.n	8011a7e <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011aa4:	23fa      	movs	r3, #250	; 0xfa
 8011aa6:	2180      	movs	r1, #128	; 0x80
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	2200      	movs	r2, #0
 8011aac:	0389      	lsls	r1, r1, #14
 8011aae:	0020      	movs	r0, r4
 8011ab0:	f7ff ff20 	bl	80118f4 <UART_WaitOnFlagUntilTimeout>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d1f3      	bne.n	8011aa0 <UART_CheckIdleState+0x4c>
 8011ab8:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	075b      	lsls	r3, r3, #29
 8011abe:	d5d7      	bpl.n	8011a70 <UART_CheckIdleState+0x1c>
 8011ac0:	e7e4      	b.n	8011a8c <UART_CheckIdleState+0x38>
 8011ac2:	46c0      	nop			; (mov r8, r8)
 8011ac4:	40013800 	.word	0x40013800
 8011ac8:	40004400 	.word	0x40004400
 8011acc:	40004800 	.word	0x40004800

08011ad0 <HAL_UART_Init>:
{
 8011ad0:	b510      	push	{r4, lr}
 8011ad2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011ad4:	d02a      	beq.n	8011b2c <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8011ad6:	2369      	movs	r3, #105	; 0x69
 8011ad8:	5cc3      	ldrb	r3, [r0, r3]
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d020      	beq.n	8011b22 <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8011ae0:	2369      	movs	r3, #105	; 0x69
 8011ae2:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8011ae4:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8011ae6:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8011ae8:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011aea:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8011aec:	6813      	ldr	r3, [r2, #0]
 8011aee:	438b      	bics	r3, r1
 8011af0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011af2:	f7ff fdab 	bl	801164c <UART_SetConfig>
 8011af6:	2801      	cmp	r0, #1
 8011af8:	d018      	beq.n	8011b2c <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d117      	bne.n	8011b30 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011b00:	6823      	ldr	r3, [r4, #0]
 8011b02:	490d      	ldr	r1, [pc, #52]	; (8011b38 <HAL_UART_Init+0x68>)
 8011b04:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8011b06:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011b08:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011b0a:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011b0c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011b0e:	689a      	ldr	r2, [r3, #8]
 8011b10:	438a      	bics	r2, r1
 8011b12:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	3929      	subs	r1, #41	; 0x29
 8011b18:	430a      	orrs	r2, r1
 8011b1a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011b1c:	f7ff ff9a 	bl	8011a54 <UART_CheckIdleState>
}
 8011b20:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011b22:	2268      	movs	r2, #104	; 0x68
 8011b24:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8011b26:	f7fa ff6b 	bl	800ca00 <HAL_UART_MspInit>
 8011b2a:	e7d9      	b.n	8011ae0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8011b2c:	2001      	movs	r0, #1
 8011b2e:	e7f7      	b.n	8011b20 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8011b30:	0020      	movs	r0, r4
 8011b32:	f7ff fe77 	bl	8011824 <UART_AdvFeatureConfig>
 8011b36:	e7e3      	b.n	8011b00 <HAL_UART_Init+0x30>
 8011b38:	ffffb7ff 	.word	0xffffb7ff

08011b3c <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b3c:	2269      	movs	r2, #105	; 0x69
{
 8011b3e:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b40:	5c81      	ldrb	r1, [r0, r2]
{
 8011b42:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b44:	2912      	cmp	r1, #18
 8011b46:	d003      	beq.n	8011b50 <UART_Transmit_IT+0x14>
 8011b48:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8011b4a:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b4c:	2a32      	cmp	r2, #50	; 0x32
 8011b4e:	d112      	bne.n	8011b76 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8011b50:	2252      	movs	r2, #82	; 0x52
 8011b52:	5a9a      	ldrh	r2, [r3, r2]
 8011b54:	6819      	ldr	r1, [r3, #0]
 8011b56:	2a00      	cmp	r2, #0
 8011b58:	d00e      	beq.n	8011b78 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b5a:	2480      	movs	r4, #128	; 0x80
 8011b5c:	689d      	ldr	r5, [r3, #8]
 8011b5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011b60:	0164      	lsls	r4, r4, #5
 8011b62:	42a5      	cmp	r5, r4
 8011b64:	d012      	beq.n	8011b8c <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8011b66:	1c44      	adds	r4, r0, #1
 8011b68:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011b6a:	7800      	ldrb	r0, [r0, #0]
 8011b6c:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8011b6e:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8011b70:	2000      	movs	r0, #0
      huart->TxXferCount--;
 8011b72:	3a01      	subs	r2, #1
 8011b74:	525a      	strh	r2, [r3, r1]
  }
}
 8011b76:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011b78:	680b      	ldr	r3, [r1, #0]
 8011b7a:	3280      	adds	r2, #128	; 0x80
 8011b7c:	4393      	bics	r3, r2
 8011b7e:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011b80:	680b      	ldr	r3, [r1, #0]
 8011b82:	3a40      	subs	r2, #64	; 0x40
 8011b84:	4313      	orrs	r3, r2
 8011b86:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8011b88:	2000      	movs	r0, #0
 8011b8a:	e7f4      	b.n	8011b76 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b8c:	691c      	ldr	r4, [r3, #16]
 8011b8e:	2c00      	cmp	r4, #0
 8011b90:	d1e9      	bne.n	8011b66 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011b92:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8011b94:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011b96:	05e4      	lsls	r4, r4, #23
 8011b98:	0de4      	lsrs	r4, r4, #23
 8011b9a:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011b9c:	64d8      	str	r0, [r3, #76]	; 0x4c
 8011b9e:	e7e6      	b.n	8011b6e <UART_Transmit_IT+0x32>

08011ba0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011ba0:	2140      	movs	r1, #64	; 0x40
 8011ba2:	6803      	ldr	r3, [r0, #0]
{
 8011ba4:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	438a      	bics	r2, r1
 8011baa:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011bac:	2269      	movs	r2, #105	; 0x69
 8011bae:	5c81      	ldrb	r1, [r0, r2]
 8011bb0:	2932      	cmp	r1, #50	; 0x32
 8011bb2:	d008      	beq.n	8011bc6 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011bb4:	2401      	movs	r4, #1
 8011bb6:	6899      	ldr	r1, [r3, #8]
 8011bb8:	43a1      	bics	r1, r4
 8011bba:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8011bbc:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8011bbe:	f7fa fb41 	bl	800c244 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8011bc2:	2000      	movs	r0, #0
 8011bc4:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011bc6:	2322      	movs	r3, #34	; 0x22
 8011bc8:	5483      	strb	r3, [r0, r2]
 8011bca:	e7f8      	b.n	8011bbe <UART_EndTransmit_IT+0x1e>

08011bcc <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011bcc:	2369      	movs	r3, #105	; 0x69
{
 8011bce:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011bd0:	5cc2      	ldrb	r2, [r0, r3]
 8011bd2:	2a22      	cmp	r2, #34	; 0x22
 8011bd4:	d003      	beq.n	8011bde <UART_Receive_IT+0x12>
 8011bd6:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011bd8:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011bda:	2b32      	cmp	r3, #50	; 0x32
 8011bdc:	d12b      	bne.n	8011c36 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 8011bde:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011be0:	2180      	movs	r1, #128	; 0x80
 8011be2:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8011be4:	5ac3      	ldrh	r3, [r0, r3]
 8011be6:	6804      	ldr	r4, [r0, #0]
 8011be8:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bea:	0149      	lsls	r1, r1, #5
 8011bec:	428d      	cmp	r5, r1
 8011bee:	d024      	beq.n	8011c3a <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011bf0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011bf2:	1c54      	adds	r4, r2, #1
 8011bf4:	400b      	ands	r3, r1
 8011bf6:	6544      	str	r4, [r0, #84]	; 0x54
 8011bf8:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8011bfa:	225a      	movs	r2, #90	; 0x5a
 8011bfc:	5a83      	ldrh	r3, [r0, r2]
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8011c04:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d115      	bne.n	8011c36 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011c0a:	2120      	movs	r1, #32
 8011c0c:	6803      	ldr	r3, [r0, #0]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	438a      	bics	r2, r1
 8011c12:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011c14:	2269      	movs	r2, #105	; 0x69
 8011c16:	5c81      	ldrb	r1, [r0, r2]
 8011c18:	2932      	cmp	r1, #50	; 0x32
 8011c1a:	d017      	beq.n	8011c4c <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011c1c:	6819      	ldr	r1, [r3, #0]
 8011c1e:	4c0d      	ldr	r4, [pc, #52]	; (8011c54 <UART_Receive_IT+0x88>)
 8011c20:	4021      	ands	r1, r4
 8011c22:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011c24:	6899      	ldr	r1, [r3, #8]
 8011c26:	3403      	adds	r4, #3
 8011c28:	34ff      	adds	r4, #255	; 0xff
 8011c2a:	43a1      	bics	r1, r4
 8011c2c:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 8011c2e:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8011c30:	f7fa fb44 	bl	800c2bc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011c34:	2200      	movs	r2, #0
  }
}
 8011c36:	0010      	movs	r0, r2
 8011c38:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c3a:	6901      	ldr	r1, [r0, #16]
 8011c3c:	2900      	cmp	r1, #0
 8011c3e:	d1d7      	bne.n	8011bf0 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8011c40:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011c42:	400b      	ands	r3, r1
 8011c44:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8011c46:	3202      	adds	r2, #2
 8011c48:	6542      	str	r2, [r0, #84]	; 0x54
 8011c4a:	e7d6      	b.n	8011bfa <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011c4c:	2312      	movs	r3, #18
 8011c4e:	5483      	strb	r3, [r0, r2]
 8011c50:	e7ee      	b.n	8011c30 <UART_Receive_IT+0x64>
 8011c52:	46c0      	nop			; (mov r8, r8)
 8011c54:	fffffeff 	.word	0xfffffeff

08011c58 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011c58:	4770      	bx	lr
 8011c5a:	46c0      	nop			; (mov r8, r8)

08011c5c <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	6803      	ldr	r3, [r0, #0]
{
 8011c60:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011c62:	69d9      	ldr	r1, [r3, #28]
{
 8011c64:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011c66:	420a      	tst	r2, r1
 8011c68:	d002      	beq.n	8011c70 <HAL_UART_IRQHandler+0x14>
 8011c6a:	6819      	ldr	r1, [r3, #0]
 8011c6c:	05c9      	lsls	r1, r1, #23
 8011c6e:	d456      	bmi.n	8011d1e <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011c70:	2202      	movs	r2, #2
 8011c72:	69d9      	ldr	r1, [r3, #28]
 8011c74:	420a      	tst	r2, r1
 8011c76:	d003      	beq.n	8011c80 <HAL_UART_IRQHandler+0x24>
 8011c78:	2101      	movs	r1, #1
 8011c7a:	6898      	ldr	r0, [r3, #8]
 8011c7c:	4201      	tst	r1, r0
 8011c7e:	d146      	bne.n	8011d0e <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011c80:	2204      	movs	r2, #4
 8011c82:	69d9      	ldr	r1, [r3, #28]
 8011c84:	420a      	tst	r2, r1
 8011c86:	d003      	beq.n	8011c90 <HAL_UART_IRQHandler+0x34>
 8011c88:	2101      	movs	r1, #1
 8011c8a:	6898      	ldr	r0, [r3, #8]
 8011c8c:	4201      	tst	r1, r0
 8011c8e:	d136      	bne.n	8011cfe <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011c90:	2208      	movs	r2, #8
 8011c92:	69d9      	ldr	r1, [r3, #28]
 8011c94:	420a      	tst	r2, r1
 8011c96:	d003      	beq.n	8011ca0 <HAL_UART_IRQHandler+0x44>
 8011c98:	2101      	movs	r1, #1
 8011c9a:	6898      	ldr	r0, [r3, #8]
 8011c9c:	4201      	tst	r1, r0
 8011c9e:	d120      	bne.n	8011ce2 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011ca0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011ca2:	2a00      	cmp	r2, #0
 8011ca4:	d126      	bne.n	8011cf4 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8011ca6:	2280      	movs	r2, #128	; 0x80
 8011ca8:	69d9      	ldr	r1, [r3, #28]
 8011caa:	0352      	lsls	r2, r2, #13
 8011cac:	4211      	tst	r1, r2
 8011cae:	d002      	beq.n	8011cb6 <HAL_UART_IRQHandler+0x5a>
 8011cb0:	6899      	ldr	r1, [r3, #8]
 8011cb2:	0249      	lsls	r1, r1, #9
 8011cb4:	d43e      	bmi.n	8011d34 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011cb6:	2220      	movs	r2, #32
 8011cb8:	69d9      	ldr	r1, [r3, #28]
 8011cba:	420a      	tst	r2, r1
 8011cbc:	d002      	beq.n	8011cc4 <HAL_UART_IRQHandler+0x68>
 8011cbe:	6819      	ldr	r1, [r3, #0]
 8011cc0:	420a      	tst	r2, r1
 8011cc2:	d140      	bne.n	8011d46 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011cc4:	2280      	movs	r2, #128	; 0x80
 8011cc6:	69d9      	ldr	r1, [r3, #28]
 8011cc8:	420a      	tst	r2, r1
 8011cca:	d002      	beq.n	8011cd2 <HAL_UART_IRQHandler+0x76>
 8011ccc:	6819      	ldr	r1, [r3, #0]
 8011cce:	420a      	tst	r2, r1
 8011cd0:	d142      	bne.n	8011d58 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011cd2:	2240      	movs	r2, #64	; 0x40
 8011cd4:	69d9      	ldr	r1, [r3, #28]
 8011cd6:	420a      	tst	r2, r1
 8011cd8:	d002      	beq.n	8011ce0 <HAL_UART_IRQHandler+0x84>
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	421a      	tst	r2, r3
 8011cde:	d125      	bne.n	8011d2c <HAL_UART_IRQHandler+0xd0>
}
 8011ce0:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011ce2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011ce4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011ce6:	4302      	orrs	r2, r0
 8011ce8:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011cea:	2269      	movs	r2, #105	; 0x69
 8011cec:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011cee:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011cf0:	2a00      	cmp	r2, #0
 8011cf2:	d0d8      	beq.n	8011ca6 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8011cf4:	0020      	movs	r0, r4
 8011cf6:	f7fa fabd 	bl	800c274 <HAL_UART_ErrorCallback>
 8011cfa:	6823      	ldr	r3, [r4, #0]
 8011cfc:	e7d3      	b.n	8011ca6 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011cfe:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011d00:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011d02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011d04:	4302      	orrs	r2, r0
 8011d06:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011d08:	2269      	movs	r2, #105	; 0x69
 8011d0a:	54a1      	strb	r1, [r4, r2]
 8011d0c:	e7c0      	b.n	8011c90 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d0e:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011d10:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d12:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011d14:	4302      	orrs	r2, r0
 8011d16:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011d18:	2269      	movs	r2, #105	; 0x69
 8011d1a:	54a1      	strb	r1, [r4, r2]
 8011d1c:	e7b0      	b.n	8011c80 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011d1e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011d20:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8011d22:	4311      	orrs	r1, r2
 8011d24:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011d26:	2169      	movs	r1, #105	; 0x69
 8011d28:	5442      	strb	r2, [r0, r1]
 8011d2a:	e7a1      	b.n	8011c70 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8011d2c:	0020      	movs	r0, r4
 8011d2e:	f7ff ff37 	bl	8011ba0 <UART_EndTransmit_IT>
}
 8011d32:	e7d5      	b.n	8011ce0 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011d34:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8011d36:	2369      	movs	r3, #105	; 0x69
 8011d38:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8011d3a:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8011d3c:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011d3e:	f7ff ff8b 	bl	8011c58 <HAL_UARTEx_WakeupCallback>
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	e7b7      	b.n	8011cb6 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8011d46:	0020      	movs	r0, r4
 8011d48:	f7ff ff40 	bl	8011bcc <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d4c:	2108      	movs	r1, #8
 8011d4e:	6823      	ldr	r3, [r4, #0]
 8011d50:	699a      	ldr	r2, [r3, #24]
 8011d52:	430a      	orrs	r2, r1
 8011d54:	619a      	str	r2, [r3, #24]
 8011d56:	e7b5      	b.n	8011cc4 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8011d58:	0020      	movs	r0, r4
 8011d5a:	f7ff feef 	bl	8011b3c <UART_Transmit_IT>
 8011d5e:	6823      	ldr	r3, [r4, #0]
 8011d60:	e7b7      	b.n	8011cd2 <HAL_UART_IRQHandler+0x76>
 8011d62:	46c0      	nop			; (mov r8, r8)

08011d64 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8011d64:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8011d66:	f7f1 fded 	bl	8003944 <Module_Init>
 8011d6a:	e7fe      	b.n	8011d6a <main+0x6>

08011d6c <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8011d6c:	e7fe      	b.n	8011d6c <UserTask>
 8011d6e:	46c0      	nop			; (mov r8, r8)

08011d70 <atof>:
 8011d70:	b510      	push	{r4, lr}
 8011d72:	2100      	movs	r1, #0
 8011d74:	f001 fb74 	bl	8013460 <strtod>
 8011d78:	bd10      	pop	{r4, pc}

08011d7a <atoi>:
 8011d7a:	b510      	push	{r4, lr}
 8011d7c:	220a      	movs	r2, #10
 8011d7e:	2100      	movs	r1, #0
 8011d80:	f001 fc3a 	bl	80135f8 <strtol>
 8011d84:	bd10      	pop	{r4, pc}

08011d86 <atol>:
 8011d86:	b510      	push	{r4, lr}
 8011d88:	220a      	movs	r2, #10
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	f001 fc34 	bl	80135f8 <strtol>
 8011d90:	bd10      	pop	{r4, pc}
	...

08011d94 <calloc>:
 8011d94:	b510      	push	{r4, lr}
 8011d96:	4b03      	ldr	r3, [pc, #12]	; (8011da4 <calloc+0x10>)
 8011d98:	000a      	movs	r2, r1
 8011d9a:	0001      	movs	r1, r0
 8011d9c:	6818      	ldr	r0, [r3, #0]
 8011d9e:	f000 f803 	bl	8011da8 <_calloc_r>
 8011da2:	bd10      	pop	{r4, pc}
 8011da4:	200000cc 	.word	0x200000cc

08011da8 <_calloc_r>:
 8011da8:	b510      	push	{r4, lr}
 8011daa:	4351      	muls	r1, r2
 8011dac:	f000 f872 	bl	8011e94 <_malloc_r>
 8011db0:	1e04      	subs	r4, r0, #0
 8011db2:	d01a      	beq.n	8011dea <_calloc_r+0x42>
 8011db4:	0003      	movs	r3, r0
 8011db6:	3b08      	subs	r3, #8
 8011db8:	685a      	ldr	r2, [r3, #4]
 8011dba:	2303      	movs	r3, #3
 8011dbc:	439a      	bics	r2, r3
 8011dbe:	3a04      	subs	r2, #4
 8011dc0:	2a24      	cmp	r2, #36	; 0x24
 8011dc2:	d819      	bhi.n	8011df8 <_calloc_r+0x50>
 8011dc4:	0003      	movs	r3, r0
 8011dc6:	2a13      	cmp	r2, #19
 8011dc8:	d90b      	bls.n	8011de2 <_calloc_r+0x3a>
 8011dca:	2100      	movs	r1, #0
 8011dcc:	3308      	adds	r3, #8
 8011dce:	6001      	str	r1, [r0, #0]
 8011dd0:	6041      	str	r1, [r0, #4]
 8011dd2:	2a1b      	cmp	r2, #27
 8011dd4:	d905      	bls.n	8011de2 <_calloc_r+0x3a>
 8011dd6:	6081      	str	r1, [r0, #8]
 8011dd8:	60c1      	str	r1, [r0, #12]
 8011dda:	2a24      	cmp	r2, #36	; 0x24
 8011ddc:	d007      	beq.n	8011dee <_calloc_r+0x46>
 8011dde:	0003      	movs	r3, r0
 8011de0:	3310      	adds	r3, #16
 8011de2:	2200      	movs	r2, #0
 8011de4:	601a      	str	r2, [r3, #0]
 8011de6:	605a      	str	r2, [r3, #4]
 8011de8:	609a      	str	r2, [r3, #8]
 8011dea:	0020      	movs	r0, r4
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	0003      	movs	r3, r0
 8011df0:	6101      	str	r1, [r0, #16]
 8011df2:	3318      	adds	r3, #24
 8011df4:	6141      	str	r1, [r0, #20]
 8011df6:	e7f4      	b.n	8011de2 <_calloc_r+0x3a>
 8011df8:	2100      	movs	r1, #0
 8011dfa:	f000 fa8d 	bl	8012318 <memset>
 8011dfe:	e7f4      	b.n	8011dea <_calloc_r+0x42>

08011e00 <__libc_init_array>:
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	2600      	movs	r6, #0
 8011e04:	4d0c      	ldr	r5, [pc, #48]	; (8011e38 <__libc_init_array+0x38>)
 8011e06:	4c0d      	ldr	r4, [pc, #52]	; (8011e3c <__libc_init_array+0x3c>)
 8011e08:	1b64      	subs	r4, r4, r5
 8011e0a:	10a4      	asrs	r4, r4, #2
 8011e0c:	42a6      	cmp	r6, r4
 8011e0e:	d109      	bne.n	8011e24 <__libc_init_array+0x24>
 8011e10:	2600      	movs	r6, #0
 8011e12:	f004 fe41 	bl	8016a98 <_init>
 8011e16:	4d0a      	ldr	r5, [pc, #40]	; (8011e40 <__libc_init_array+0x40>)
 8011e18:	4c0a      	ldr	r4, [pc, #40]	; (8011e44 <__libc_init_array+0x44>)
 8011e1a:	1b64      	subs	r4, r4, r5
 8011e1c:	10a4      	asrs	r4, r4, #2
 8011e1e:	42a6      	cmp	r6, r4
 8011e20:	d105      	bne.n	8011e2e <__libc_init_array+0x2e>
 8011e22:	bd70      	pop	{r4, r5, r6, pc}
 8011e24:	00b3      	lsls	r3, r6, #2
 8011e26:	58eb      	ldr	r3, [r5, r3]
 8011e28:	4798      	blx	r3
 8011e2a:	3601      	adds	r6, #1
 8011e2c:	e7ee      	b.n	8011e0c <__libc_init_array+0xc>
 8011e2e:	00b3      	lsls	r3, r6, #2
 8011e30:	58eb      	ldr	r3, [r5, r3]
 8011e32:	4798      	blx	r3
 8011e34:	3601      	adds	r6, #1
 8011e36:	e7f2      	b.n	8011e1e <__libc_init_array+0x1e>
 8011e38:	08019c1c 	.word	0x08019c1c
 8011e3c:	08019c1c 	.word	0x08019c1c
 8011e40:	08019c1c 	.word	0x08019c1c
 8011e44:	08019c24 	.word	0x08019c24

08011e48 <__locale_ctype_ptr_l>:
 8011e48:	30ec      	adds	r0, #236	; 0xec
 8011e4a:	6800      	ldr	r0, [r0, #0]
 8011e4c:	4770      	bx	lr
	...

08011e50 <__locale_ctype_ptr>:
 8011e50:	4b04      	ldr	r3, [pc, #16]	; (8011e64 <__locale_ctype_ptr+0x14>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d100      	bne.n	8011e5c <__locale_ctype_ptr+0xc>
 8011e5a:	4b03      	ldr	r3, [pc, #12]	; (8011e68 <__locale_ctype_ptr+0x18>)
 8011e5c:	33ec      	adds	r3, #236	; 0xec
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	4770      	bx	lr
 8011e62:	46c0      	nop			; (mov r8, r8)
 8011e64:	200000cc 	.word	0x200000cc
 8011e68:	200004f8 	.word	0x200004f8

08011e6c <malloc>:
 8011e6c:	b510      	push	{r4, lr}
 8011e6e:	4b03      	ldr	r3, [pc, #12]	; (8011e7c <malloc+0x10>)
 8011e70:	0001      	movs	r1, r0
 8011e72:	6818      	ldr	r0, [r3, #0]
 8011e74:	f000 f80e 	bl	8011e94 <_malloc_r>
 8011e78:	bd10      	pop	{r4, pc}
 8011e7a:	46c0      	nop			; (mov r8, r8)
 8011e7c:	200000cc 	.word	0x200000cc

08011e80 <free>:
 8011e80:	b510      	push	{r4, lr}
 8011e82:	4b03      	ldr	r3, [pc, #12]	; (8011e90 <free+0x10>)
 8011e84:	0001      	movs	r1, r0
 8011e86:	6818      	ldr	r0, [r3, #0]
 8011e88:	f003 fd10 	bl	80158ac <_free_r>
 8011e8c:	bd10      	pop	{r4, pc}
 8011e8e:	46c0      	nop			; (mov r8, r8)
 8011e90:	200000cc 	.word	0x200000cc

08011e94 <_malloc_r>:
 8011e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e96:	000d      	movs	r5, r1
 8011e98:	b085      	sub	sp, #20
 8011e9a:	350b      	adds	r5, #11
 8011e9c:	9001      	str	r0, [sp, #4]
 8011e9e:	2d16      	cmp	r5, #22
 8011ea0:	d908      	bls.n	8011eb4 <_malloc_r+0x20>
 8011ea2:	2307      	movs	r3, #7
 8011ea4:	439d      	bics	r5, r3
 8011ea6:	d506      	bpl.n	8011eb6 <_malloc_r+0x22>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	9a01      	ldr	r2, [sp, #4]
 8011eac:	6013      	str	r3, [r2, #0]
 8011eae:	2000      	movs	r0, #0
 8011eb0:	b005      	add	sp, #20
 8011eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eb4:	2510      	movs	r5, #16
 8011eb6:	428d      	cmp	r5, r1
 8011eb8:	d3f6      	bcc.n	8011ea8 <_malloc_r+0x14>
 8011eba:	9801      	ldr	r0, [sp, #4]
 8011ebc:	f000 fa34 	bl	8012328 <__malloc_lock>
 8011ec0:	23f8      	movs	r3, #248	; 0xf8
 8011ec2:	33ff      	adds	r3, #255	; 0xff
 8011ec4:	4ac4      	ldr	r2, [pc, #784]	; (80121d8 <_malloc_r+0x344>)
 8011ec6:	429d      	cmp	r5, r3
 8011ec8:	d820      	bhi.n	8011f0c <_malloc_r+0x78>
 8011eca:	0029      	movs	r1, r5
 8011ecc:	3108      	adds	r1, #8
 8011ece:	1851      	adds	r1, r2, r1
 8011ed0:	0008      	movs	r0, r1
 8011ed2:	684c      	ldr	r4, [r1, #4]
 8011ed4:	3808      	subs	r0, #8
 8011ed6:	08eb      	lsrs	r3, r5, #3
 8011ed8:	4284      	cmp	r4, r0
 8011eda:	d104      	bne.n	8011ee6 <_malloc_r+0x52>
 8011edc:	68cc      	ldr	r4, [r1, #12]
 8011ede:	3302      	adds	r3, #2
 8011ee0:	469c      	mov	ip, r3
 8011ee2:	42a1      	cmp	r1, r4
 8011ee4:	d02a      	beq.n	8011f3c <_malloc_r+0xa8>
 8011ee6:	2303      	movs	r3, #3
 8011ee8:	6862      	ldr	r2, [r4, #4]
 8011eea:	68a1      	ldr	r1, [r4, #8]
 8011eec:	439a      	bics	r2, r3
 8011eee:	0013      	movs	r3, r2
 8011ef0:	68e2      	ldr	r2, [r4, #12]
 8011ef2:	18e3      	adds	r3, r4, r3
 8011ef4:	60ca      	str	r2, [r1, #12]
 8011ef6:	6091      	str	r1, [r2, #8]
 8011ef8:	2201      	movs	r2, #1
 8011efa:	6859      	ldr	r1, [r3, #4]
 8011efc:	430a      	orrs	r2, r1
 8011efe:	605a      	str	r2, [r3, #4]
 8011f00:	9801      	ldr	r0, [sp, #4]
 8011f02:	f000 fa19 	bl	8012338 <__malloc_unlock>
 8011f06:	0020      	movs	r0, r4
 8011f08:	3008      	adds	r0, #8
 8011f0a:	e7d1      	b.n	8011eb0 <_malloc_r+0x1c>
 8011f0c:	0a69      	lsrs	r1, r5, #9
 8011f0e:	233f      	movs	r3, #63	; 0x3f
 8011f10:	2900      	cmp	r1, #0
 8011f12:	d003      	beq.n	8011f1c <_malloc_r+0x88>
 8011f14:	2904      	cmp	r1, #4
 8011f16:	d828      	bhi.n	8011f6a <_malloc_r+0xd6>
 8011f18:	09ab      	lsrs	r3, r5, #6
 8011f1a:	3338      	adds	r3, #56	; 0x38
 8011f1c:	2103      	movs	r1, #3
 8011f1e:	468c      	mov	ip, r1
 8011f20:	00d8      	lsls	r0, r3, #3
 8011f22:	1880      	adds	r0, r0, r2
 8011f24:	68c4      	ldr	r4, [r0, #12]
 8011f26:	4284      	cmp	r4, r0
 8011f28:	d006      	beq.n	8011f38 <_malloc_r+0xa4>
 8011f2a:	4666      	mov	r6, ip
 8011f2c:	6861      	ldr	r1, [r4, #4]
 8011f2e:	43b1      	bics	r1, r6
 8011f30:	1b4f      	subs	r7, r1, r5
 8011f32:	2f0f      	cmp	r7, #15
 8011f34:	dd31      	ble.n	8011f9a <_malloc_r+0x106>
 8011f36:	3b01      	subs	r3, #1
 8011f38:	3301      	adds	r3, #1
 8011f3a:	469c      	mov	ip, r3
 8011f3c:	6914      	ldr	r4, [r2, #16]
 8011f3e:	49a7      	ldr	r1, [pc, #668]	; (80121dc <_malloc_r+0x348>)
 8011f40:	428c      	cmp	r4, r1
 8011f42:	d055      	beq.n	8011ff0 <_malloc_r+0x15c>
 8011f44:	2303      	movs	r3, #3
 8011f46:	6860      	ldr	r0, [r4, #4]
 8011f48:	4398      	bics	r0, r3
 8011f4a:	0003      	movs	r3, r0
 8011f4c:	1b46      	subs	r6, r0, r5
 8011f4e:	2e0f      	cmp	r6, #15
 8011f50:	dd31      	ble.n	8011fb6 <_malloc_r+0x122>
 8011f52:	2701      	movs	r7, #1
 8011f54:	1960      	adds	r0, r4, r5
 8011f56:	433d      	orrs	r5, r7
 8011f58:	4337      	orrs	r7, r6
 8011f5a:	6065      	str	r5, [r4, #4]
 8011f5c:	6150      	str	r0, [r2, #20]
 8011f5e:	6110      	str	r0, [r2, #16]
 8011f60:	60c1      	str	r1, [r0, #12]
 8011f62:	6081      	str	r1, [r0, #8]
 8011f64:	6047      	str	r7, [r0, #4]
 8011f66:	50e6      	str	r6, [r4, r3]
 8011f68:	e7ca      	b.n	8011f00 <_malloc_r+0x6c>
 8011f6a:	2914      	cmp	r1, #20
 8011f6c:	d802      	bhi.n	8011f74 <_malloc_r+0xe0>
 8011f6e:	000b      	movs	r3, r1
 8011f70:	335b      	adds	r3, #91	; 0x5b
 8011f72:	e7d3      	b.n	8011f1c <_malloc_r+0x88>
 8011f74:	2954      	cmp	r1, #84	; 0x54
 8011f76:	d802      	bhi.n	8011f7e <_malloc_r+0xea>
 8011f78:	0b2b      	lsrs	r3, r5, #12
 8011f7a:	336e      	adds	r3, #110	; 0x6e
 8011f7c:	e7ce      	b.n	8011f1c <_malloc_r+0x88>
 8011f7e:	23aa      	movs	r3, #170	; 0xaa
 8011f80:	005b      	lsls	r3, r3, #1
 8011f82:	4299      	cmp	r1, r3
 8011f84:	d802      	bhi.n	8011f8c <_malloc_r+0xf8>
 8011f86:	0beb      	lsrs	r3, r5, #15
 8011f88:	3377      	adds	r3, #119	; 0x77
 8011f8a:	e7c7      	b.n	8011f1c <_malloc_r+0x88>
 8011f8c:	4894      	ldr	r0, [pc, #592]	; (80121e0 <_malloc_r+0x34c>)
 8011f8e:	237e      	movs	r3, #126	; 0x7e
 8011f90:	4281      	cmp	r1, r0
 8011f92:	d8c3      	bhi.n	8011f1c <_malloc_r+0x88>
 8011f94:	0cab      	lsrs	r3, r5, #18
 8011f96:	337c      	adds	r3, #124	; 0x7c
 8011f98:	e7c0      	b.n	8011f1c <_malloc_r+0x88>
 8011f9a:	68e6      	ldr	r6, [r4, #12]
 8011f9c:	2f00      	cmp	r7, #0
 8011f9e:	db08      	blt.n	8011fb2 <_malloc_r+0x11e>
 8011fa0:	68a3      	ldr	r3, [r4, #8]
 8011fa2:	1861      	adds	r1, r4, r1
 8011fa4:	60de      	str	r6, [r3, #12]
 8011fa6:	60b3      	str	r3, [r6, #8]
 8011fa8:	2301      	movs	r3, #1
 8011faa:	684a      	ldr	r2, [r1, #4]
 8011fac:	4313      	orrs	r3, r2
 8011fae:	604b      	str	r3, [r1, #4]
 8011fb0:	e7a6      	b.n	8011f00 <_malloc_r+0x6c>
 8011fb2:	0034      	movs	r4, r6
 8011fb4:	e7b7      	b.n	8011f26 <_malloc_r+0x92>
 8011fb6:	6151      	str	r1, [r2, #20]
 8011fb8:	6111      	str	r1, [r2, #16]
 8011fba:	2e00      	cmp	r6, #0
 8011fbc:	db05      	blt.n	8011fca <_malloc_r+0x136>
 8011fbe:	2101      	movs	r1, #1
 8011fc0:	1823      	adds	r3, r4, r0
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	4311      	orrs	r1, r2
 8011fc6:	6059      	str	r1, [r3, #4]
 8011fc8:	e79a      	b.n	8011f00 <_malloc_r+0x6c>
 8011fca:	4986      	ldr	r1, [pc, #536]	; (80121e4 <_malloc_r+0x350>)
 8011fcc:	6857      	ldr	r7, [r2, #4]
 8011fce:	4288      	cmp	r0, r1
 8011fd0:	d900      	bls.n	8011fd4 <_malloc_r+0x140>
 8011fd2:	e090      	b.n	80120f6 <_malloc_r+0x262>
 8011fd4:	08c3      	lsrs	r3, r0, #3
 8011fd6:	39ff      	subs	r1, #255	; 0xff
 8011fd8:	1098      	asrs	r0, r3, #2
 8011fda:	39ff      	subs	r1, #255	; 0xff
 8011fdc:	4081      	lsls	r1, r0
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	4339      	orrs	r1, r7
 8011fe2:	6051      	str	r1, [r2, #4]
 8011fe4:	189a      	adds	r2, r3, r2
 8011fe6:	6893      	ldr	r3, [r2, #8]
 8011fe8:	60e2      	str	r2, [r4, #12]
 8011fea:	60a3      	str	r3, [r4, #8]
 8011fec:	6094      	str	r4, [r2, #8]
 8011fee:	60dc      	str	r4, [r3, #12]
 8011ff0:	4663      	mov	r3, ip
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	4978      	ldr	r1, [pc, #480]	; (80121d8 <_malloc_r+0x344>)
 8011ff6:	109b      	asrs	r3, r3, #2
 8011ff8:	6848      	ldr	r0, [r1, #4]
 8011ffa:	409a      	lsls	r2, r3
 8011ffc:	4290      	cmp	r0, r2
 8011ffe:	d32d      	bcc.n	801205c <_malloc_r+0x1c8>
 8012000:	4202      	tst	r2, r0
 8012002:	d109      	bne.n	8012018 <_malloc_r+0x184>
 8012004:	2303      	movs	r3, #3
 8012006:	4664      	mov	r4, ip
 8012008:	439c      	bics	r4, r3
 801200a:	0023      	movs	r3, r4
 801200c:	3304      	adds	r3, #4
 801200e:	469c      	mov	ip, r3
 8012010:	0052      	lsls	r2, r2, #1
 8012012:	4202      	tst	r2, r0
 8012014:	d100      	bne.n	8012018 <_malloc_r+0x184>
 8012016:	e0a4      	b.n	8012162 <_malloc_r+0x2ce>
 8012018:	4663      	mov	r3, ip
 801201a:	00db      	lsls	r3, r3, #3
 801201c:	18cb      	adds	r3, r1, r3
 801201e:	9303      	str	r3, [sp, #12]
 8012020:	001f      	movs	r7, r3
 8012022:	4663      	mov	r3, ip
 8012024:	9302      	str	r3, [sp, #8]
 8012026:	68fc      	ldr	r4, [r7, #12]
 8012028:	42bc      	cmp	r4, r7
 801202a:	d000      	beq.n	801202e <_malloc_r+0x19a>
 801202c:	e09c      	b.n	8012168 <_malloc_r+0x2d4>
 801202e:	2003      	movs	r0, #3
 8012030:	9b02      	ldr	r3, [sp, #8]
 8012032:	3708      	adds	r7, #8
 8012034:	3301      	adds	r3, #1
 8012036:	9302      	str	r3, [sp, #8]
 8012038:	4203      	tst	r3, r0
 801203a:	d1f4      	bne.n	8012026 <_malloc_r+0x192>
 801203c:	4663      	mov	r3, ip
 801203e:	2003      	movs	r0, #3
 8012040:	4203      	tst	r3, r0
 8012042:	d000      	beq.n	8012046 <_malloc_r+0x1b2>
 8012044:	e0b3      	b.n	80121ae <_malloc_r+0x31a>
 8012046:	684b      	ldr	r3, [r1, #4]
 8012048:	4393      	bics	r3, r2
 801204a:	604b      	str	r3, [r1, #4]
 801204c:	4b62      	ldr	r3, [pc, #392]	; (80121d8 <_malloc_r+0x344>)
 801204e:	0052      	lsls	r2, r2, #1
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	4293      	cmp	r3, r2
 8012054:	d302      	bcc.n	801205c <_malloc_r+0x1c8>
 8012056:	2a00      	cmp	r2, #0
 8012058:	d000      	beq.n	801205c <_malloc_r+0x1c8>
 801205a:	e0b9      	b.n	80121d0 <_malloc_r+0x33c>
 801205c:	2303      	movs	r3, #3
 801205e:	688f      	ldr	r7, [r1, #8]
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	439a      	bics	r2, r3
 8012064:	9202      	str	r2, [sp, #8]
 8012066:	42aa      	cmp	r2, r5
 8012068:	d303      	bcc.n	8012072 <_malloc_r+0x1de>
 801206a:	1b52      	subs	r2, r2, r5
 801206c:	2a0f      	cmp	r2, #15
 801206e:	dd00      	ble.n	8012072 <_malloc_r+0x1de>
 8012070:	e116      	b.n	80122a0 <_malloc_r+0x40c>
 8012072:	4b5d      	ldr	r3, [pc, #372]	; (80121e8 <_malloc_r+0x354>)
 8012074:	2008      	movs	r0, #8
 8012076:	681e      	ldr	r6, [r3, #0]
 8012078:	f002 fd26 	bl	8014ac8 <sysconf>
 801207c:	4b5b      	ldr	r3, [pc, #364]	; (80121ec <_malloc_r+0x358>)
 801207e:	3610      	adds	r6, #16
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	1976      	adds	r6, r6, r5
 8012084:	9003      	str	r0, [sp, #12]
 8012086:	3301      	adds	r3, #1
 8012088:	d003      	beq.n	8012092 <_malloc_r+0x1fe>
 801208a:	3e01      	subs	r6, #1
 801208c:	1836      	adds	r6, r6, r0
 801208e:	4243      	negs	r3, r0
 8012090:	401e      	ands	r6, r3
 8012092:	0031      	movs	r1, r6
 8012094:	9801      	ldr	r0, [sp, #4]
 8012096:	f000 fb27 	bl	80126e8 <_sbrk_r>
 801209a:	0004      	movs	r4, r0
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	d100      	bne.n	80120a2 <_malloc_r+0x20e>
 80120a0:	e0d6      	b.n	8012250 <_malloc_r+0x3bc>
 80120a2:	9b02      	ldr	r3, [sp, #8]
 80120a4:	18fb      	adds	r3, r7, r3
 80120a6:	4283      	cmp	r3, r0
 80120a8:	d903      	bls.n	80120b2 <_malloc_r+0x21e>
 80120aa:	4a4b      	ldr	r2, [pc, #300]	; (80121d8 <_malloc_r+0x344>)
 80120ac:	4297      	cmp	r7, r2
 80120ae:	d000      	beq.n	80120b2 <_malloc_r+0x21e>
 80120b0:	e0ce      	b.n	8012250 <_malloc_r+0x3bc>
 80120b2:	494f      	ldr	r1, [pc, #316]	; (80121f0 <_malloc_r+0x35c>)
 80120b4:	680a      	ldr	r2, [r1, #0]
 80120b6:	18b2      	adds	r2, r6, r2
 80120b8:	600a      	str	r2, [r1, #0]
 80120ba:	9903      	ldr	r1, [sp, #12]
 80120bc:	4694      	mov	ip, r2
 80120be:	1e48      	subs	r0, r1, #1
 80120c0:	42a3      	cmp	r3, r4
 80120c2:	d000      	beq.n	80120c6 <_malloc_r+0x232>
 80120c4:	e09a      	b.n	80121fc <_malloc_r+0x368>
 80120c6:	4203      	tst	r3, r0
 80120c8:	d000      	beq.n	80120cc <_malloc_r+0x238>
 80120ca:	e097      	b.n	80121fc <_malloc_r+0x368>
 80120cc:	9a02      	ldr	r2, [sp, #8]
 80120ce:	4b42      	ldr	r3, [pc, #264]	; (80121d8 <_malloc_r+0x344>)
 80120d0:	1992      	adds	r2, r2, r6
 80120d2:	2601      	movs	r6, #1
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	4316      	orrs	r6, r2
 80120d8:	605e      	str	r6, [r3, #4]
 80120da:	4b45      	ldr	r3, [pc, #276]	; (80121f0 <_malloc_r+0x35c>)
 80120dc:	4a45      	ldr	r2, [pc, #276]	; (80121f4 <_malloc_r+0x360>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6811      	ldr	r1, [r2, #0]
 80120e2:	428b      	cmp	r3, r1
 80120e4:	d900      	bls.n	80120e8 <_malloc_r+0x254>
 80120e6:	6013      	str	r3, [r2, #0]
 80120e8:	4a43      	ldr	r2, [pc, #268]	; (80121f8 <_malloc_r+0x364>)
 80120ea:	6811      	ldr	r1, [r2, #0]
 80120ec:	428b      	cmp	r3, r1
 80120ee:	d800      	bhi.n	80120f2 <_malloc_r+0x25e>
 80120f0:	e0ae      	b.n	8012250 <_malloc_r+0x3bc>
 80120f2:	6013      	str	r3, [r2, #0]
 80120f4:	e0ac      	b.n	8012250 <_malloc_r+0x3bc>
 80120f6:	0a40      	lsrs	r0, r0, #9
 80120f8:	2804      	cmp	r0, #4
 80120fa:	d810      	bhi.n	801211e <_malloc_r+0x28a>
 80120fc:	0999      	lsrs	r1, r3, #6
 80120fe:	3138      	adds	r1, #56	; 0x38
 8012100:	00ce      	lsls	r6, r1, #3
 8012102:	18b6      	adds	r6, r6, r2
 8012104:	68b0      	ldr	r0, [r6, #8]
 8012106:	4286      	cmp	r6, r0
 8012108:	d124      	bne.n	8012154 <_malloc_r+0x2c0>
 801210a:	2301      	movs	r3, #1
 801210c:	1089      	asrs	r1, r1, #2
 801210e:	408b      	lsls	r3, r1
 8012110:	433b      	orrs	r3, r7
 8012112:	6053      	str	r3, [r2, #4]
 8012114:	60e6      	str	r6, [r4, #12]
 8012116:	60a0      	str	r0, [r4, #8]
 8012118:	60b4      	str	r4, [r6, #8]
 801211a:	60c4      	str	r4, [r0, #12]
 801211c:	e768      	b.n	8011ff0 <_malloc_r+0x15c>
 801211e:	2814      	cmp	r0, #20
 8012120:	d802      	bhi.n	8012128 <_malloc_r+0x294>
 8012122:	0001      	movs	r1, r0
 8012124:	315b      	adds	r1, #91	; 0x5b
 8012126:	e7eb      	b.n	8012100 <_malloc_r+0x26c>
 8012128:	2854      	cmp	r0, #84	; 0x54
 801212a:	d802      	bhi.n	8012132 <_malloc_r+0x29e>
 801212c:	0b19      	lsrs	r1, r3, #12
 801212e:	316e      	adds	r1, #110	; 0x6e
 8012130:	e7e6      	b.n	8012100 <_malloc_r+0x26c>
 8012132:	21aa      	movs	r1, #170	; 0xaa
 8012134:	0049      	lsls	r1, r1, #1
 8012136:	4288      	cmp	r0, r1
 8012138:	d802      	bhi.n	8012140 <_malloc_r+0x2ac>
 801213a:	0bd9      	lsrs	r1, r3, #15
 801213c:	3177      	adds	r1, #119	; 0x77
 801213e:	e7df      	b.n	8012100 <_malloc_r+0x26c>
 8012140:	4e27      	ldr	r6, [pc, #156]	; (80121e0 <_malloc_r+0x34c>)
 8012142:	217e      	movs	r1, #126	; 0x7e
 8012144:	42b0      	cmp	r0, r6
 8012146:	d8db      	bhi.n	8012100 <_malloc_r+0x26c>
 8012148:	0c99      	lsrs	r1, r3, #18
 801214a:	317c      	adds	r1, #124	; 0x7c
 801214c:	e7d8      	b.n	8012100 <_malloc_r+0x26c>
 801214e:	6880      	ldr	r0, [r0, #8]
 8012150:	4286      	cmp	r6, r0
 8012152:	d004      	beq.n	801215e <_malloc_r+0x2ca>
 8012154:	2103      	movs	r1, #3
 8012156:	6842      	ldr	r2, [r0, #4]
 8012158:	438a      	bics	r2, r1
 801215a:	429a      	cmp	r2, r3
 801215c:	d8f7      	bhi.n	801214e <_malloc_r+0x2ba>
 801215e:	68c6      	ldr	r6, [r0, #12]
 8012160:	e7d8      	b.n	8012114 <_malloc_r+0x280>
 8012162:	2304      	movs	r3, #4
 8012164:	449c      	add	ip, r3
 8012166:	e753      	b.n	8012010 <_malloc_r+0x17c>
 8012168:	2003      	movs	r0, #3
 801216a:	6863      	ldr	r3, [r4, #4]
 801216c:	4383      	bics	r3, r0
 801216e:	1b5e      	subs	r6, r3, r5
 8012170:	68e0      	ldr	r0, [r4, #12]
 8012172:	2e0f      	cmp	r6, #15
 8012174:	dd0e      	ble.n	8012194 <_malloc_r+0x300>
 8012176:	2701      	movs	r7, #1
 8012178:	1962      	adds	r2, r4, r5
 801217a:	433d      	orrs	r5, r7
 801217c:	6065      	str	r5, [r4, #4]
 801217e:	68a5      	ldr	r5, [r4, #8]
 8012180:	4337      	orrs	r7, r6
 8012182:	60e8      	str	r0, [r5, #12]
 8012184:	6085      	str	r5, [r0, #8]
 8012186:	614a      	str	r2, [r1, #20]
 8012188:	610a      	str	r2, [r1, #16]
 801218a:	4914      	ldr	r1, [pc, #80]	; (80121dc <_malloc_r+0x348>)
 801218c:	6057      	str	r7, [r2, #4]
 801218e:	60d1      	str	r1, [r2, #12]
 8012190:	6091      	str	r1, [r2, #8]
 8012192:	e6e8      	b.n	8011f66 <_malloc_r+0xd2>
 8012194:	2e00      	cmp	r6, #0
 8012196:	db08      	blt.n	80121aa <_malloc_r+0x316>
 8012198:	2201      	movs	r2, #1
 801219a:	18e3      	adds	r3, r4, r3
 801219c:	6859      	ldr	r1, [r3, #4]
 801219e:	430a      	orrs	r2, r1
 80121a0:	605a      	str	r2, [r3, #4]
 80121a2:	68a3      	ldr	r3, [r4, #8]
 80121a4:	60d8      	str	r0, [r3, #12]
 80121a6:	6083      	str	r3, [r0, #8]
 80121a8:	e6aa      	b.n	8011f00 <_malloc_r+0x6c>
 80121aa:	0004      	movs	r4, r0
 80121ac:	e73c      	b.n	8012028 <_malloc_r+0x194>
 80121ae:	2301      	movs	r3, #1
 80121b0:	425b      	negs	r3, r3
 80121b2:	449c      	add	ip, r3
 80121b4:	9b03      	ldr	r3, [sp, #12]
 80121b6:	6818      	ldr	r0, [r3, #0]
 80121b8:	3b08      	subs	r3, #8
 80121ba:	9003      	str	r0, [sp, #12]
 80121bc:	4298      	cmp	r0, r3
 80121be:	d100      	bne.n	80121c2 <_malloc_r+0x32e>
 80121c0:	e73c      	b.n	801203c <_malloc_r+0x1a8>
 80121c2:	e743      	b.n	801204c <_malloc_r+0x1b8>
 80121c4:	2004      	movs	r0, #4
 80121c6:	0052      	lsls	r2, r2, #1
 80121c8:	4484      	add	ip, r0
 80121ca:	421a      	tst	r2, r3
 80121cc:	d0fa      	beq.n	80121c4 <_malloc_r+0x330>
 80121ce:	e723      	b.n	8012018 <_malloc_r+0x184>
 80121d0:	9802      	ldr	r0, [sp, #8]
 80121d2:	4684      	mov	ip, r0
 80121d4:	e7f9      	b.n	80121ca <_malloc_r+0x336>
 80121d6:	46c0      	nop			; (mov r8, r8)
 80121d8:	20000664 	.word	0x20000664
 80121dc:	2000066c 	.word	0x2000066c
 80121e0:	00000554 	.word	0x00000554
 80121e4:	000001ff 	.word	0x000001ff
 80121e8:	200069f4 	.word	0x200069f4
 80121ec:	20000a6c 	.word	0x20000a6c
 80121f0:	200069c4 	.word	0x200069c4
 80121f4:	200069ec 	.word	0x200069ec
 80121f8:	200069f0 	.word	0x200069f0
 80121fc:	492e      	ldr	r1, [pc, #184]	; (80122b8 <_malloc_r+0x424>)
 80121fe:	680a      	ldr	r2, [r1, #0]
 8012200:	3201      	adds	r2, #1
 8012202:	d133      	bne.n	801226c <_malloc_r+0x3d8>
 8012204:	600c      	str	r4, [r1, #0]
 8012206:	2307      	movs	r3, #7
 8012208:	4023      	ands	r3, r4
 801220a:	d002      	beq.n	8012212 <_malloc_r+0x37e>
 801220c:	2208      	movs	r2, #8
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	18e4      	adds	r4, r4, r3
 8012212:	9a03      	ldr	r2, [sp, #12]
 8012214:	19a6      	adds	r6, r4, r6
 8012216:	18d3      	adds	r3, r2, r3
 8012218:	4006      	ands	r6, r0
 801221a:	1b9e      	subs	r6, r3, r6
 801221c:	0031      	movs	r1, r6
 801221e:	9801      	ldr	r0, [sp, #4]
 8012220:	f000 fa62 	bl	80126e8 <_sbrk_r>
 8012224:	1c43      	adds	r3, r0, #1
 8012226:	d101      	bne.n	801222c <_malloc_r+0x398>
 8012228:	0020      	movs	r0, r4
 801222a:	2600      	movs	r6, #0
 801222c:	4a23      	ldr	r2, [pc, #140]	; (80122bc <_malloc_r+0x428>)
 801222e:	1b00      	subs	r0, r0, r4
 8012230:	6813      	ldr	r3, [r2, #0]
 8012232:	199b      	adds	r3, r3, r6
 8012234:	6013      	str	r3, [r2, #0]
 8012236:	2301      	movs	r3, #1
 8012238:	4a21      	ldr	r2, [pc, #132]	; (80122c0 <_malloc_r+0x42c>)
 801223a:	1986      	adds	r6, r0, r6
 801223c:	431e      	orrs	r6, r3
 801223e:	6094      	str	r4, [r2, #8]
 8012240:	6066      	str	r6, [r4, #4]
 8012242:	4297      	cmp	r7, r2
 8012244:	d100      	bne.n	8012248 <_malloc_r+0x3b4>
 8012246:	e748      	b.n	80120da <_malloc_r+0x246>
 8012248:	9a02      	ldr	r2, [sp, #8]
 801224a:	2a0f      	cmp	r2, #15
 801224c:	d813      	bhi.n	8012276 <_malloc_r+0x3e2>
 801224e:	6063      	str	r3, [r4, #4]
 8012250:	2203      	movs	r2, #3
 8012252:	4b1b      	ldr	r3, [pc, #108]	; (80122c0 <_malloc_r+0x42c>)
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	4393      	bics	r3, r2
 801225a:	1b5a      	subs	r2, r3, r5
 801225c:	42ab      	cmp	r3, r5
 801225e:	d301      	bcc.n	8012264 <_malloc_r+0x3d0>
 8012260:	2a0f      	cmp	r2, #15
 8012262:	dc1d      	bgt.n	80122a0 <_malloc_r+0x40c>
 8012264:	9801      	ldr	r0, [sp, #4]
 8012266:	f000 f867 	bl	8012338 <__malloc_unlock>
 801226a:	e620      	b.n	8011eae <_malloc_r+0x1a>
 801226c:	1ae3      	subs	r3, r4, r3
 801226e:	4a13      	ldr	r2, [pc, #76]	; (80122bc <_malloc_r+0x428>)
 8012270:	4463      	add	r3, ip
 8012272:	6013      	str	r3, [r2, #0]
 8012274:	e7c7      	b.n	8012206 <_malloc_r+0x372>
 8012276:	2207      	movs	r2, #7
 8012278:	9e02      	ldr	r6, [sp, #8]
 801227a:	3e0c      	subs	r6, #12
 801227c:	4396      	bics	r6, r2
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	4013      	ands	r3, r2
 8012282:	2205      	movs	r2, #5
 8012284:	4333      	orrs	r3, r6
 8012286:	607b      	str	r3, [r7, #4]
 8012288:	19bb      	adds	r3, r7, r6
 801228a:	605a      	str	r2, [r3, #4]
 801228c:	609a      	str	r2, [r3, #8]
 801228e:	2e0f      	cmp	r6, #15
 8012290:	d800      	bhi.n	8012294 <_malloc_r+0x400>
 8012292:	e722      	b.n	80120da <_malloc_r+0x246>
 8012294:	0039      	movs	r1, r7
 8012296:	9801      	ldr	r0, [sp, #4]
 8012298:	3108      	adds	r1, #8
 801229a:	f003 fb07 	bl	80158ac <_free_r>
 801229e:	e71c      	b.n	80120da <_malloc_r+0x246>
 80122a0:	2301      	movs	r3, #1
 80122a2:	0018      	movs	r0, r3
 80122a4:	4906      	ldr	r1, [pc, #24]	; (80122c0 <_malloc_r+0x42c>)
 80122a6:	4328      	orrs	r0, r5
 80122a8:	688c      	ldr	r4, [r1, #8]
 80122aa:	4313      	orrs	r3, r2
 80122ac:	1965      	adds	r5, r4, r5
 80122ae:	6060      	str	r0, [r4, #4]
 80122b0:	608d      	str	r5, [r1, #8]
 80122b2:	606b      	str	r3, [r5, #4]
 80122b4:	e624      	b.n	8011f00 <_malloc_r+0x6c>
 80122b6:	46c0      	nop			; (mov r8, r8)
 80122b8:	20000a6c 	.word	0x20000a6c
 80122bc:	200069c4 	.word	0x200069c4
 80122c0:	20000664 	.word	0x20000664

080122c4 <__ascii_mbtowc>:
 80122c4:	b082      	sub	sp, #8
 80122c6:	2900      	cmp	r1, #0
 80122c8:	d100      	bne.n	80122cc <__ascii_mbtowc+0x8>
 80122ca:	a901      	add	r1, sp, #4
 80122cc:	1e10      	subs	r0, r2, #0
 80122ce:	d006      	beq.n	80122de <__ascii_mbtowc+0x1a>
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d006      	beq.n	80122e2 <__ascii_mbtowc+0x1e>
 80122d4:	7813      	ldrb	r3, [r2, #0]
 80122d6:	600b      	str	r3, [r1, #0]
 80122d8:	7810      	ldrb	r0, [r2, #0]
 80122da:	1e43      	subs	r3, r0, #1
 80122dc:	4198      	sbcs	r0, r3
 80122de:	b002      	add	sp, #8
 80122e0:	4770      	bx	lr
 80122e2:	2002      	movs	r0, #2
 80122e4:	4240      	negs	r0, r0
 80122e6:	e7fa      	b.n	80122de <__ascii_mbtowc+0x1a>

080122e8 <memcmp>:
 80122e8:	b530      	push	{r4, r5, lr}
 80122ea:	2400      	movs	r4, #0
 80122ec:	42a2      	cmp	r2, r4
 80122ee:	d101      	bne.n	80122f4 <memcmp+0xc>
 80122f0:	2000      	movs	r0, #0
 80122f2:	e005      	b.n	8012300 <memcmp+0x18>
 80122f4:	5d03      	ldrb	r3, [r0, r4]
 80122f6:	1c65      	adds	r5, r4, #1
 80122f8:	5d0c      	ldrb	r4, [r1, r4]
 80122fa:	42a3      	cmp	r3, r4
 80122fc:	d001      	beq.n	8012302 <memcmp+0x1a>
 80122fe:	1b18      	subs	r0, r3, r4
 8012300:	bd30      	pop	{r4, r5, pc}
 8012302:	002c      	movs	r4, r5
 8012304:	e7f2      	b.n	80122ec <memcmp+0x4>

08012306 <memcpy>:
 8012306:	2300      	movs	r3, #0
 8012308:	b510      	push	{r4, lr}
 801230a:	429a      	cmp	r2, r3
 801230c:	d100      	bne.n	8012310 <memcpy+0xa>
 801230e:	bd10      	pop	{r4, pc}
 8012310:	5ccc      	ldrb	r4, [r1, r3]
 8012312:	54c4      	strb	r4, [r0, r3]
 8012314:	3301      	adds	r3, #1
 8012316:	e7f8      	b.n	801230a <memcpy+0x4>

08012318 <memset>:
 8012318:	0003      	movs	r3, r0
 801231a:	1812      	adds	r2, r2, r0
 801231c:	4293      	cmp	r3, r2
 801231e:	d100      	bne.n	8012322 <memset+0xa>
 8012320:	4770      	bx	lr
 8012322:	7019      	strb	r1, [r3, #0]
 8012324:	3301      	adds	r3, #1
 8012326:	e7f9      	b.n	801231c <memset+0x4>

08012328 <__malloc_lock>:
 8012328:	b510      	push	{r4, lr}
 801232a:	4802      	ldr	r0, [pc, #8]	; (8012334 <__malloc_lock+0xc>)
 801232c:	f003 feb2 	bl	8016094 <__retarget_lock_acquire_recursive>
 8012330:	bd10      	pop	{r4, pc}
 8012332:	46c0      	nop			; (mov r8, r8)
 8012334:	20006fe4 	.word	0x20006fe4

08012338 <__malloc_unlock>:
 8012338:	b510      	push	{r4, lr}
 801233a:	4802      	ldr	r0, [pc, #8]	; (8012344 <__malloc_unlock+0xc>)
 801233c:	f003 feab 	bl	8016096 <__retarget_lock_release_recursive>
 8012340:	bd10      	pop	{r4, pc}
 8012342:	46c0      	nop			; (mov r8, r8)
 8012344:	20006fe4 	.word	0x20006fe4

08012348 <rand>:
 8012348:	4b09      	ldr	r3, [pc, #36]	; (8012370 <rand+0x28>)
 801234a:	b510      	push	{r4, lr}
 801234c:	681c      	ldr	r4, [r3, #0]
 801234e:	4a09      	ldr	r2, [pc, #36]	; (8012374 <rand+0x2c>)
 8012350:	34a8      	adds	r4, #168	; 0xa8
 8012352:	6820      	ldr	r0, [r4, #0]
 8012354:	6861      	ldr	r1, [r4, #4]
 8012356:	4b08      	ldr	r3, [pc, #32]	; (8012378 <rand+0x30>)
 8012358:	f7ee f908 	bl	800056c <__aeabi_lmul>
 801235c:	2201      	movs	r2, #1
 801235e:	2300      	movs	r3, #0
 8012360:	1880      	adds	r0, r0, r2
 8012362:	4159      	adcs	r1, r3
 8012364:	6020      	str	r0, [r4, #0]
 8012366:	6061      	str	r1, [r4, #4]
 8012368:	0048      	lsls	r0, r1, #1
 801236a:	0840      	lsrs	r0, r0, #1
 801236c:	bd10      	pop	{r4, pc}
 801236e:	46c0      	nop			; (mov r8, r8)
 8012370:	200000cc 	.word	0x200000cc
 8012374:	4c957f2d 	.word	0x4c957f2d
 8012378:	5851f42d 	.word	0x5851f42d

0801237c <realloc>:
 801237c:	b510      	push	{r4, lr}
 801237e:	4b03      	ldr	r3, [pc, #12]	; (801238c <realloc+0x10>)
 8012380:	000a      	movs	r2, r1
 8012382:	0001      	movs	r1, r0
 8012384:	6818      	ldr	r0, [r3, #0]
 8012386:	f000 f803 	bl	8012390 <_realloc_r>
 801238a:	bd10      	pop	{r4, pc}
 801238c:	200000cc 	.word	0x200000cc

08012390 <_realloc_r>:
 8012390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012392:	b087      	sub	sp, #28
 8012394:	9003      	str	r0, [sp, #12]
 8012396:	1e0c      	subs	r4, r1, #0
 8012398:	9205      	str	r2, [sp, #20]
 801239a:	d106      	bne.n	80123aa <_realloc_r+0x1a>
 801239c:	0011      	movs	r1, r2
 801239e:	f7ff fd79 	bl	8011e94 <_malloc_r>
 80123a2:	0007      	movs	r7, r0
 80123a4:	0038      	movs	r0, r7
 80123a6:	b007      	add	sp, #28
 80123a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123aa:	9803      	ldr	r0, [sp, #12]
 80123ac:	f7ff ffbc 	bl	8012328 <__malloc_lock>
 80123b0:	0023      	movs	r3, r4
 80123b2:	3b08      	subs	r3, #8
 80123b4:	685f      	ldr	r7, [r3, #4]
 80123b6:	9302      	str	r3, [sp, #8]
 80123b8:	003a      	movs	r2, r7
 80123ba:	2303      	movs	r3, #3
 80123bc:	9e05      	ldr	r6, [sp, #20]
 80123be:	439a      	bics	r2, r3
 80123c0:	360b      	adds	r6, #11
 80123c2:	9204      	str	r2, [sp, #16]
 80123c4:	2e16      	cmp	r6, #22
 80123c6:	d908      	bls.n	80123da <_realloc_r+0x4a>
 80123c8:	3304      	adds	r3, #4
 80123ca:	439e      	bics	r6, r3
 80123cc:	9601      	str	r6, [sp, #4]
 80123ce:	d506      	bpl.n	80123de <_realloc_r+0x4e>
 80123d0:	230c      	movs	r3, #12
 80123d2:	9a03      	ldr	r2, [sp, #12]
 80123d4:	2700      	movs	r7, #0
 80123d6:	6013      	str	r3, [r2, #0]
 80123d8:	e7e4      	b.n	80123a4 <_realloc_r+0x14>
 80123da:	2310      	movs	r3, #16
 80123dc:	9301      	str	r3, [sp, #4]
 80123de:	9b01      	ldr	r3, [sp, #4]
 80123e0:	9a05      	ldr	r2, [sp, #20]
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d3f4      	bcc.n	80123d0 <_realloc_r+0x40>
 80123e6:	9b01      	ldr	r3, [sp, #4]
 80123e8:	9a04      	ldr	r2, [sp, #16]
 80123ea:	4293      	cmp	r3, r2
 80123ec:	dc00      	bgt.n	80123f0 <_realloc_r+0x60>
 80123ee:	e16f      	b.n	80126d0 <_realloc_r+0x340>
 80123f0:	9b02      	ldr	r3, [sp, #8]
 80123f2:	48bc      	ldr	r0, [pc, #752]	; (80126e4 <_realloc_r+0x354>)
 80123f4:	189b      	adds	r3, r3, r2
 80123f6:	6882      	ldr	r2, [r0, #8]
 80123f8:	4694      	mov	ip, r2
 80123fa:	685a      	ldr	r2, [r3, #4]
 80123fc:	459c      	cmp	ip, r3
 80123fe:	d006      	beq.n	801240e <_realloc_r+0x7e>
 8012400:	2501      	movs	r5, #1
 8012402:	0011      	movs	r1, r2
 8012404:	43a9      	bics	r1, r5
 8012406:	1859      	adds	r1, r3, r1
 8012408:	6849      	ldr	r1, [r1, #4]
 801240a:	4229      	tst	r1, r5
 801240c:	d146      	bne.n	801249c <_realloc_r+0x10c>
 801240e:	2103      	movs	r1, #3
 8012410:	438a      	bics	r2, r1
 8012412:	9904      	ldr	r1, [sp, #16]
 8012414:	188e      	adds	r6, r1, r2
 8012416:	9901      	ldr	r1, [sp, #4]
 8012418:	459c      	cmp	ip, r3
 801241a:	d117      	bne.n	801244c <_realloc_r+0xbc>
 801241c:	3110      	adds	r1, #16
 801241e:	42b1      	cmp	r1, r6
 8012420:	dc3e      	bgt.n	80124a0 <_realloc_r+0x110>
 8012422:	9901      	ldr	r1, [sp, #4]
 8012424:	9b02      	ldr	r3, [sp, #8]
 8012426:	468c      	mov	ip, r1
 8012428:	4463      	add	r3, ip
 801242a:	6083      	str	r3, [r0, #8]
 801242c:	001a      	movs	r2, r3
 801242e:	1a73      	subs	r3, r6, r1
 8012430:	2601      	movs	r6, #1
 8012432:	4333      	orrs	r3, r6
 8012434:	6053      	str	r3, [r2, #4]
 8012436:	0023      	movs	r3, r4
 8012438:	3b08      	subs	r3, #8
 801243a:	685a      	ldr	r2, [r3, #4]
 801243c:	9803      	ldr	r0, [sp, #12]
 801243e:	4016      	ands	r6, r2
 8012440:	430e      	orrs	r6, r1
 8012442:	605e      	str	r6, [r3, #4]
 8012444:	f7ff ff78 	bl	8012338 <__malloc_unlock>
 8012448:	0027      	movs	r7, r4
 801244a:	e7ab      	b.n	80123a4 <_realloc_r+0x14>
 801244c:	42b1      	cmp	r1, r6
 801244e:	dc27      	bgt.n	80124a0 <_realloc_r+0x110>
 8012450:	68da      	ldr	r2, [r3, #12]
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	60da      	str	r2, [r3, #12]
 8012456:	6093      	str	r3, [r2, #8]
 8012458:	9b01      	ldr	r3, [sp, #4]
 801245a:	9a02      	ldr	r2, [sp, #8]
 801245c:	1af4      	subs	r4, r6, r3
 801245e:	9b02      	ldr	r3, [sp, #8]
 8012460:	1992      	adds	r2, r2, r6
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	9304      	str	r3, [sp, #16]
 8012466:	2301      	movs	r3, #1
 8012468:	9804      	ldr	r0, [sp, #16]
 801246a:	4018      	ands	r0, r3
 801246c:	2c0f      	cmp	r4, #15
 801246e:	d800      	bhi.n	8012472 <_realloc_r+0xe2>
 8012470:	e130      	b.n	80126d4 <_realloc_r+0x344>
 8012472:	9d01      	ldr	r5, [sp, #4]
 8012474:	9902      	ldr	r1, [sp, #8]
 8012476:	4328      	orrs	r0, r5
 8012478:	1949      	adds	r1, r1, r5
 801247a:	9d02      	ldr	r5, [sp, #8]
 801247c:	431c      	orrs	r4, r3
 801247e:	6068      	str	r0, [r5, #4]
 8012480:	604c      	str	r4, [r1, #4]
 8012482:	6850      	ldr	r0, [r2, #4]
 8012484:	3108      	adds	r1, #8
 8012486:	4303      	orrs	r3, r0
 8012488:	6053      	str	r3, [r2, #4]
 801248a:	9803      	ldr	r0, [sp, #12]
 801248c:	f003 fa0e 	bl	80158ac <_free_r>
 8012490:	9803      	ldr	r0, [sp, #12]
 8012492:	f7ff ff51 	bl	8012338 <__malloc_unlock>
 8012496:	9f02      	ldr	r7, [sp, #8]
 8012498:	3708      	adds	r7, #8
 801249a:	e783      	b.n	80123a4 <_realloc_r+0x14>
 801249c:	2200      	movs	r2, #0
 801249e:	0013      	movs	r3, r2
 80124a0:	07f9      	lsls	r1, r7, #31
 80124a2:	d500      	bpl.n	80124a6 <_realloc_r+0x116>
 80124a4:	e0c6      	b.n	8012634 <_realloc_r+0x2a4>
 80124a6:	0021      	movs	r1, r4
 80124a8:	3908      	subs	r1, #8
 80124aa:	680d      	ldr	r5, [r1, #0]
 80124ac:	9902      	ldr	r1, [sp, #8]
 80124ae:	1b4d      	subs	r5, r1, r5
 80124b0:	2103      	movs	r1, #3
 80124b2:	686f      	ldr	r7, [r5, #4]
 80124b4:	438f      	bics	r7, r1
 80124b6:	9904      	ldr	r1, [sp, #16]
 80124b8:	187f      	adds	r7, r7, r1
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d100      	bne.n	80124c0 <_realloc_r+0x130>
 80124be:	e084      	b.n	80125ca <_realloc_r+0x23a>
 80124c0:	19d6      	adds	r6, r2, r7
 80124c2:	459c      	cmp	ip, r3
 80124c4:	d148      	bne.n	8012558 <_realloc_r+0x1c8>
 80124c6:	9b01      	ldr	r3, [sp, #4]
 80124c8:	3310      	adds	r3, #16
 80124ca:	42b3      	cmp	r3, r6
 80124cc:	dc7d      	bgt.n	80125ca <_realloc_r+0x23a>
 80124ce:	68aa      	ldr	r2, [r5, #8]
 80124d0:	68eb      	ldr	r3, [r5, #12]
 80124d2:	002f      	movs	r7, r5
 80124d4:	60d3      	str	r3, [r2, #12]
 80124d6:	609a      	str	r2, [r3, #8]
 80124d8:	000a      	movs	r2, r1
 80124da:	3a04      	subs	r2, #4
 80124dc:	3708      	adds	r7, #8
 80124de:	2a24      	cmp	r2, #36	; 0x24
 80124e0:	d835      	bhi.n	801254e <_realloc_r+0x1be>
 80124e2:	003b      	movs	r3, r7
 80124e4:	2a13      	cmp	r2, #19
 80124e6:	d908      	bls.n	80124fa <_realloc_r+0x16a>
 80124e8:	6823      	ldr	r3, [r4, #0]
 80124ea:	60ab      	str	r3, [r5, #8]
 80124ec:	6863      	ldr	r3, [r4, #4]
 80124ee:	60eb      	str	r3, [r5, #12]
 80124f0:	2a1b      	cmp	r2, #27
 80124f2:	d81a      	bhi.n	801252a <_realloc_r+0x19a>
 80124f4:	002b      	movs	r3, r5
 80124f6:	3408      	adds	r4, #8
 80124f8:	3310      	adds	r3, #16
 80124fa:	6822      	ldr	r2, [r4, #0]
 80124fc:	601a      	str	r2, [r3, #0]
 80124fe:	6862      	ldr	r2, [r4, #4]
 8012500:	605a      	str	r2, [r3, #4]
 8012502:	68a2      	ldr	r2, [r4, #8]
 8012504:	609a      	str	r2, [r3, #8]
 8012506:	9b01      	ldr	r3, [sp, #4]
 8012508:	18ea      	adds	r2, r5, r3
 801250a:	4b76      	ldr	r3, [pc, #472]	; (80126e4 <_realloc_r+0x354>)
 801250c:	609a      	str	r2, [r3, #8]
 801250e:	9b01      	ldr	r3, [sp, #4]
 8012510:	1af3      	subs	r3, r6, r3
 8012512:	2601      	movs	r6, #1
 8012514:	4333      	orrs	r3, r6
 8012516:	6053      	str	r3, [r2, #4]
 8012518:	686b      	ldr	r3, [r5, #4]
 801251a:	401e      	ands	r6, r3
 801251c:	9b01      	ldr	r3, [sp, #4]
 801251e:	431e      	orrs	r6, r3
 8012520:	606e      	str	r6, [r5, #4]
 8012522:	9803      	ldr	r0, [sp, #12]
 8012524:	f7ff ff08 	bl	8012338 <__malloc_unlock>
 8012528:	e73c      	b.n	80123a4 <_realloc_r+0x14>
 801252a:	68a3      	ldr	r3, [r4, #8]
 801252c:	612b      	str	r3, [r5, #16]
 801252e:	68e3      	ldr	r3, [r4, #12]
 8012530:	616b      	str	r3, [r5, #20]
 8012532:	2a24      	cmp	r2, #36	; 0x24
 8012534:	d003      	beq.n	801253e <_realloc_r+0x1ae>
 8012536:	002b      	movs	r3, r5
 8012538:	3410      	adds	r4, #16
 801253a:	3318      	adds	r3, #24
 801253c:	e7dd      	b.n	80124fa <_realloc_r+0x16a>
 801253e:	6923      	ldr	r3, [r4, #16]
 8012540:	61ab      	str	r3, [r5, #24]
 8012542:	002b      	movs	r3, r5
 8012544:	6962      	ldr	r2, [r4, #20]
 8012546:	3320      	adds	r3, #32
 8012548:	61ea      	str	r2, [r5, #28]
 801254a:	3418      	adds	r4, #24
 801254c:	e7d5      	b.n	80124fa <_realloc_r+0x16a>
 801254e:	0021      	movs	r1, r4
 8012550:	0038      	movs	r0, r7
 8012552:	f003 fdac 	bl	80160ae <memmove>
 8012556:	e7d6      	b.n	8012506 <_realloc_r+0x176>
 8012558:	9a01      	ldr	r2, [sp, #4]
 801255a:	42b2      	cmp	r2, r6
 801255c:	dc35      	bgt.n	80125ca <_realloc_r+0x23a>
 801255e:	0028      	movs	r0, r5
 8012560:	68da      	ldr	r2, [r3, #12]
 8012562:	689b      	ldr	r3, [r3, #8]
 8012564:	3008      	adds	r0, #8
 8012566:	60da      	str	r2, [r3, #12]
 8012568:	6093      	str	r3, [r2, #8]
 801256a:	68aa      	ldr	r2, [r5, #8]
 801256c:	68eb      	ldr	r3, [r5, #12]
 801256e:	60d3      	str	r3, [r2, #12]
 8012570:	609a      	str	r2, [r3, #8]
 8012572:	9a04      	ldr	r2, [sp, #16]
 8012574:	3a04      	subs	r2, #4
 8012576:	2a24      	cmp	r2, #36	; 0x24
 8012578:	d823      	bhi.n	80125c2 <_realloc_r+0x232>
 801257a:	2a13      	cmp	r2, #19
 801257c:	d907      	bls.n	801258e <_realloc_r+0x1fe>
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	60ab      	str	r3, [r5, #8]
 8012582:	6863      	ldr	r3, [r4, #4]
 8012584:	60eb      	str	r3, [r5, #12]
 8012586:	2a1b      	cmp	r2, #27
 8012588:	d809      	bhi.n	801259e <_realloc_r+0x20e>
 801258a:	3408      	adds	r4, #8
 801258c:	3008      	adds	r0, #8
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	6003      	str	r3, [r0, #0]
 8012592:	6863      	ldr	r3, [r4, #4]
 8012594:	6043      	str	r3, [r0, #4]
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	6083      	str	r3, [r0, #8]
 801259a:	9502      	str	r5, [sp, #8]
 801259c:	e75c      	b.n	8012458 <_realloc_r+0xc8>
 801259e:	68a3      	ldr	r3, [r4, #8]
 80125a0:	612b      	str	r3, [r5, #16]
 80125a2:	68e3      	ldr	r3, [r4, #12]
 80125a4:	616b      	str	r3, [r5, #20]
 80125a6:	2a24      	cmp	r2, #36	; 0x24
 80125a8:	d003      	beq.n	80125b2 <_realloc_r+0x222>
 80125aa:	0028      	movs	r0, r5
 80125ac:	3410      	adds	r4, #16
 80125ae:	3018      	adds	r0, #24
 80125b0:	e7ed      	b.n	801258e <_realloc_r+0x1fe>
 80125b2:	0028      	movs	r0, r5
 80125b4:	6923      	ldr	r3, [r4, #16]
 80125b6:	3020      	adds	r0, #32
 80125b8:	61ab      	str	r3, [r5, #24]
 80125ba:	6963      	ldr	r3, [r4, #20]
 80125bc:	3418      	adds	r4, #24
 80125be:	61eb      	str	r3, [r5, #28]
 80125c0:	e7e5      	b.n	801258e <_realloc_r+0x1fe>
 80125c2:	0021      	movs	r1, r4
 80125c4:	f003 fd73 	bl	80160ae <memmove>
 80125c8:	e7e7      	b.n	801259a <_realloc_r+0x20a>
 80125ca:	9b01      	ldr	r3, [sp, #4]
 80125cc:	42bb      	cmp	r3, r7
 80125ce:	dc31      	bgt.n	8012634 <_realloc_r+0x2a4>
 80125d0:	0028      	movs	r0, r5
 80125d2:	68aa      	ldr	r2, [r5, #8]
 80125d4:	68eb      	ldr	r3, [r5, #12]
 80125d6:	3008      	adds	r0, #8
 80125d8:	60d3      	str	r3, [r2, #12]
 80125da:	609a      	str	r2, [r3, #8]
 80125dc:	9a04      	ldr	r2, [sp, #16]
 80125de:	3a04      	subs	r2, #4
 80125e0:	2a24      	cmp	r2, #36	; 0x24
 80125e2:	d823      	bhi.n	801262c <_realloc_r+0x29c>
 80125e4:	2a13      	cmp	r2, #19
 80125e6:	d907      	bls.n	80125f8 <_realloc_r+0x268>
 80125e8:	6823      	ldr	r3, [r4, #0]
 80125ea:	60ab      	str	r3, [r5, #8]
 80125ec:	6863      	ldr	r3, [r4, #4]
 80125ee:	60eb      	str	r3, [r5, #12]
 80125f0:	2a1b      	cmp	r2, #27
 80125f2:	d809      	bhi.n	8012608 <_realloc_r+0x278>
 80125f4:	3408      	adds	r4, #8
 80125f6:	3008      	adds	r0, #8
 80125f8:	6823      	ldr	r3, [r4, #0]
 80125fa:	6003      	str	r3, [r0, #0]
 80125fc:	6863      	ldr	r3, [r4, #4]
 80125fe:	6043      	str	r3, [r0, #4]
 8012600:	68a3      	ldr	r3, [r4, #8]
 8012602:	6083      	str	r3, [r0, #8]
 8012604:	003e      	movs	r6, r7
 8012606:	e7c8      	b.n	801259a <_realloc_r+0x20a>
 8012608:	68a3      	ldr	r3, [r4, #8]
 801260a:	612b      	str	r3, [r5, #16]
 801260c:	68e3      	ldr	r3, [r4, #12]
 801260e:	616b      	str	r3, [r5, #20]
 8012610:	2a24      	cmp	r2, #36	; 0x24
 8012612:	d003      	beq.n	801261c <_realloc_r+0x28c>
 8012614:	0028      	movs	r0, r5
 8012616:	3410      	adds	r4, #16
 8012618:	3018      	adds	r0, #24
 801261a:	e7ed      	b.n	80125f8 <_realloc_r+0x268>
 801261c:	0028      	movs	r0, r5
 801261e:	6923      	ldr	r3, [r4, #16]
 8012620:	3020      	adds	r0, #32
 8012622:	61ab      	str	r3, [r5, #24]
 8012624:	6963      	ldr	r3, [r4, #20]
 8012626:	3418      	adds	r4, #24
 8012628:	61eb      	str	r3, [r5, #28]
 801262a:	e7e5      	b.n	80125f8 <_realloc_r+0x268>
 801262c:	0021      	movs	r1, r4
 801262e:	f003 fd3e 	bl	80160ae <memmove>
 8012632:	e7e7      	b.n	8012604 <_realloc_r+0x274>
 8012634:	9905      	ldr	r1, [sp, #20]
 8012636:	9803      	ldr	r0, [sp, #12]
 8012638:	f7ff fc2c 	bl	8011e94 <_malloc_r>
 801263c:	1e07      	subs	r7, r0, #0
 801263e:	d100      	bne.n	8012642 <_realloc_r+0x2b2>
 8012640:	e76f      	b.n	8012522 <_realloc_r+0x192>
 8012642:	0023      	movs	r3, r4
 8012644:	2201      	movs	r2, #1
 8012646:	3b08      	subs	r3, #8
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	4393      	bics	r3, r2
 801264c:	9a02      	ldr	r2, [sp, #8]
 801264e:	18d3      	adds	r3, r2, r3
 8012650:	0002      	movs	r2, r0
 8012652:	3a08      	subs	r2, #8
 8012654:	4293      	cmp	r3, r2
 8012656:	d105      	bne.n	8012664 <_realloc_r+0x2d4>
 8012658:	685e      	ldr	r6, [r3, #4]
 801265a:	2303      	movs	r3, #3
 801265c:	439e      	bics	r6, r3
 801265e:	9b04      	ldr	r3, [sp, #16]
 8012660:	18f6      	adds	r6, r6, r3
 8012662:	e6f9      	b.n	8012458 <_realloc_r+0xc8>
 8012664:	9a04      	ldr	r2, [sp, #16]
 8012666:	3a04      	subs	r2, #4
 8012668:	2a24      	cmp	r2, #36	; 0x24
 801266a:	d82d      	bhi.n	80126c8 <_realloc_r+0x338>
 801266c:	2a13      	cmp	r2, #19
 801266e:	d928      	bls.n	80126c2 <_realloc_r+0x332>
 8012670:	6823      	ldr	r3, [r4, #0]
 8012672:	6003      	str	r3, [r0, #0]
 8012674:	6863      	ldr	r3, [r4, #4]
 8012676:	6043      	str	r3, [r0, #4]
 8012678:	2a1b      	cmp	r2, #27
 801267a:	d80e      	bhi.n	801269a <_realloc_r+0x30a>
 801267c:	0022      	movs	r2, r4
 801267e:	0003      	movs	r3, r0
 8012680:	3208      	adds	r2, #8
 8012682:	3308      	adds	r3, #8
 8012684:	6811      	ldr	r1, [r2, #0]
 8012686:	6019      	str	r1, [r3, #0]
 8012688:	6851      	ldr	r1, [r2, #4]
 801268a:	6059      	str	r1, [r3, #4]
 801268c:	6892      	ldr	r2, [r2, #8]
 801268e:	609a      	str	r2, [r3, #8]
 8012690:	0021      	movs	r1, r4
 8012692:	9803      	ldr	r0, [sp, #12]
 8012694:	f003 f90a 	bl	80158ac <_free_r>
 8012698:	e743      	b.n	8012522 <_realloc_r+0x192>
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	6083      	str	r3, [r0, #8]
 801269e:	68e3      	ldr	r3, [r4, #12]
 80126a0:	60c3      	str	r3, [r0, #12]
 80126a2:	2a24      	cmp	r2, #36	; 0x24
 80126a4:	d004      	beq.n	80126b0 <_realloc_r+0x320>
 80126a6:	0022      	movs	r2, r4
 80126a8:	0003      	movs	r3, r0
 80126aa:	3210      	adds	r2, #16
 80126ac:	3310      	adds	r3, #16
 80126ae:	e7e9      	b.n	8012684 <_realloc_r+0x2f4>
 80126b0:	6923      	ldr	r3, [r4, #16]
 80126b2:	0022      	movs	r2, r4
 80126b4:	6103      	str	r3, [r0, #16]
 80126b6:	0003      	movs	r3, r0
 80126b8:	6961      	ldr	r1, [r4, #20]
 80126ba:	3218      	adds	r2, #24
 80126bc:	3318      	adds	r3, #24
 80126be:	6141      	str	r1, [r0, #20]
 80126c0:	e7e0      	b.n	8012684 <_realloc_r+0x2f4>
 80126c2:	0003      	movs	r3, r0
 80126c4:	0022      	movs	r2, r4
 80126c6:	e7dd      	b.n	8012684 <_realloc_r+0x2f4>
 80126c8:	0021      	movs	r1, r4
 80126ca:	f003 fcf0 	bl	80160ae <memmove>
 80126ce:	e7df      	b.n	8012690 <_realloc_r+0x300>
 80126d0:	9e04      	ldr	r6, [sp, #16]
 80126d2:	e6c1      	b.n	8012458 <_realloc_r+0xc8>
 80126d4:	9902      	ldr	r1, [sp, #8]
 80126d6:	4306      	orrs	r6, r0
 80126d8:	604e      	str	r6, [r1, #4]
 80126da:	6851      	ldr	r1, [r2, #4]
 80126dc:	430b      	orrs	r3, r1
 80126de:	6053      	str	r3, [r2, #4]
 80126e0:	e6d6      	b.n	8012490 <_realloc_r+0x100>
 80126e2:	46c0      	nop			; (mov r8, r8)
 80126e4:	20000664 	.word	0x20000664

080126e8 <_sbrk_r>:
 80126e8:	2300      	movs	r3, #0
 80126ea:	b570      	push	{r4, r5, r6, lr}
 80126ec:	4c06      	ldr	r4, [pc, #24]	; (8012708 <_sbrk_r+0x20>)
 80126ee:	0005      	movs	r5, r0
 80126f0:	0008      	movs	r0, r1
 80126f2:	6023      	str	r3, [r4, #0]
 80126f4:	f004 f9c0 	bl	8016a78 <_sbrk>
 80126f8:	1c43      	adds	r3, r0, #1
 80126fa:	d103      	bne.n	8012704 <_sbrk_r+0x1c>
 80126fc:	6823      	ldr	r3, [r4, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d000      	beq.n	8012704 <_sbrk_r+0x1c>
 8012702:	602b      	str	r3, [r5, #0]
 8012704:	bd70      	pop	{r4, r5, r6, pc}
 8012706:	46c0      	nop			; (mov r8, r8)
 8012708:	20006fec 	.word	0x20006fec

0801270c <sprintf>:
 801270c:	b40e      	push	{r1, r2, r3}
 801270e:	b500      	push	{lr}
 8012710:	490b      	ldr	r1, [pc, #44]	; (8012740 <sprintf+0x34>)
 8012712:	b09c      	sub	sp, #112	; 0x70
 8012714:	ab1d      	add	r3, sp, #116	; 0x74
 8012716:	9002      	str	r0, [sp, #8]
 8012718:	9006      	str	r0, [sp, #24]
 801271a:	9107      	str	r1, [sp, #28]
 801271c:	9104      	str	r1, [sp, #16]
 801271e:	4809      	ldr	r0, [pc, #36]	; (8012744 <sprintf+0x38>)
 8012720:	4909      	ldr	r1, [pc, #36]	; (8012748 <sprintf+0x3c>)
 8012722:	cb04      	ldmia	r3!, {r2}
 8012724:	9105      	str	r1, [sp, #20]
 8012726:	6800      	ldr	r0, [r0, #0]
 8012728:	a902      	add	r1, sp, #8
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	f000 ff78 	bl	8013620 <_svfprintf_r>
 8012730:	2300      	movs	r3, #0
 8012732:	9a02      	ldr	r2, [sp, #8]
 8012734:	7013      	strb	r3, [r2, #0]
 8012736:	b01c      	add	sp, #112	; 0x70
 8012738:	bc08      	pop	{r3}
 801273a:	b003      	add	sp, #12
 801273c:	4718      	bx	r3
 801273e:	46c0      	nop			; (mov r8, r8)
 8012740:	7fffffff 	.word	0x7fffffff
 8012744:	200000cc 	.word	0x200000cc
 8012748:	ffff0208 	.word	0xffff0208

0801274c <strcat>:
 801274c:	0002      	movs	r2, r0
 801274e:	b510      	push	{r4, lr}
 8012750:	7813      	ldrb	r3, [r2, #0]
 8012752:	1c54      	adds	r4, r2, #1
 8012754:	2b00      	cmp	r3, #0
 8012756:	d105      	bne.n	8012764 <strcat+0x18>
 8012758:	5ccc      	ldrb	r4, [r1, r3]
 801275a:	54d4      	strb	r4, [r2, r3]
 801275c:	3301      	adds	r3, #1
 801275e:	2c00      	cmp	r4, #0
 8012760:	d1fa      	bne.n	8012758 <strcat+0xc>
 8012762:	bd10      	pop	{r4, pc}
 8012764:	0022      	movs	r2, r4
 8012766:	e7f3      	b.n	8012750 <strcat+0x4>

08012768 <strchr>:
 8012768:	b2c9      	uxtb	r1, r1
 801276a:	7803      	ldrb	r3, [r0, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d004      	beq.n	801277a <strchr+0x12>
 8012770:	428b      	cmp	r3, r1
 8012772:	d100      	bne.n	8012776 <strchr+0xe>
 8012774:	4770      	bx	lr
 8012776:	3001      	adds	r0, #1
 8012778:	e7f7      	b.n	801276a <strchr+0x2>
 801277a:	424b      	negs	r3, r1
 801277c:	4159      	adcs	r1, r3
 801277e:	4249      	negs	r1, r1
 8012780:	4008      	ands	r0, r1
 8012782:	e7f7      	b.n	8012774 <strchr+0xc>

08012784 <strcpy>:
 8012784:	0003      	movs	r3, r0
 8012786:	780a      	ldrb	r2, [r1, #0]
 8012788:	3101      	adds	r1, #1
 801278a:	701a      	strb	r2, [r3, #0]
 801278c:	3301      	adds	r3, #1
 801278e:	2a00      	cmp	r2, #0
 8012790:	d1f9      	bne.n	8012786 <strcpy+0x2>
 8012792:	4770      	bx	lr

08012794 <strncmp>:
 8012794:	2300      	movs	r3, #0
 8012796:	b530      	push	{r4, r5, lr}
 8012798:	429a      	cmp	r2, r3
 801279a:	d00a      	beq.n	80127b2 <strncmp+0x1e>
 801279c:	3a01      	subs	r2, #1
 801279e:	5cc4      	ldrb	r4, [r0, r3]
 80127a0:	5ccd      	ldrb	r5, [r1, r3]
 80127a2:	42ac      	cmp	r4, r5
 80127a4:	d104      	bne.n	80127b0 <strncmp+0x1c>
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d002      	beq.n	80127b0 <strncmp+0x1c>
 80127aa:	3301      	adds	r3, #1
 80127ac:	2c00      	cmp	r4, #0
 80127ae:	d1f6      	bne.n	801279e <strncmp+0xa>
 80127b0:	1b63      	subs	r3, r4, r5
 80127b2:	0018      	movs	r0, r3
 80127b4:	bd30      	pop	{r4, r5, pc}

080127b6 <strncpy>:
 80127b6:	b530      	push	{r4, r5, lr}
 80127b8:	0005      	movs	r5, r0
 80127ba:	2a00      	cmp	r2, #0
 80127bc:	d100      	bne.n	80127c0 <strncpy+0xa>
 80127be:	bd30      	pop	{r4, r5, pc}
 80127c0:	780c      	ldrb	r4, [r1, #0]
 80127c2:	3a01      	subs	r2, #1
 80127c4:	1c6b      	adds	r3, r5, #1
 80127c6:	702c      	strb	r4, [r5, #0]
 80127c8:	3101      	adds	r1, #1
 80127ca:	2c00      	cmp	r4, #0
 80127cc:	d105      	bne.n	80127da <strncpy+0x24>
 80127ce:	189a      	adds	r2, r3, r2
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d0f4      	beq.n	80127be <strncpy+0x8>
 80127d4:	701c      	strb	r4, [r3, #0]
 80127d6:	3301      	adds	r3, #1
 80127d8:	e7fa      	b.n	80127d0 <strncpy+0x1a>
 80127da:	001d      	movs	r5, r3
 80127dc:	e7ed      	b.n	80127ba <strncpy+0x4>
	...

080127e0 <sulp>:
 80127e0:	b570      	push	{r4, r5, r6, lr}
 80127e2:	0016      	movs	r6, r2
 80127e4:	000d      	movs	r5, r1
 80127e6:	f003 ff17 	bl	8016618 <__ulp>
 80127ea:	2e00      	cmp	r6, #0
 80127ec:	d00d      	beq.n	801280a <sulp+0x2a>
 80127ee:	236b      	movs	r3, #107	; 0x6b
 80127f0:	006a      	lsls	r2, r5, #1
 80127f2:	0d52      	lsrs	r2, r2, #21
 80127f4:	1a9b      	subs	r3, r3, r2
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	dd07      	ble.n	801280a <sulp+0x2a>
 80127fa:	2400      	movs	r4, #0
 80127fc:	4a03      	ldr	r2, [pc, #12]	; (801280c <sulp+0x2c>)
 80127fe:	051b      	lsls	r3, r3, #20
 8012800:	189d      	adds	r5, r3, r2
 8012802:	002b      	movs	r3, r5
 8012804:	0022      	movs	r2, r4
 8012806:	f7ef fb15 	bl	8001e34 <__aeabi_dmul>
 801280a:	bd70      	pop	{r4, r5, r6, pc}
 801280c:	3ff00000 	.word	0x3ff00000

08012810 <_strtod_l>:
 8012810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012812:	b0a7      	sub	sp, #156	; 0x9c
 8012814:	9307      	str	r3, [sp, #28]
 8012816:	2300      	movs	r3, #0
 8012818:	9004      	str	r0, [sp, #16]
 801281a:	9807      	ldr	r0, [sp, #28]
 801281c:	9322      	str	r3, [sp, #136]	; 0x88
 801281e:	9106      	str	r1, [sp, #24]
 8012820:	921d      	str	r2, [sp, #116]	; 0x74
 8012822:	f003 fc28 	bl	8016076 <__localeconv_l>
 8012826:	0005      	movs	r5, r0
 8012828:	6800      	ldr	r0, [r0, #0]
 801282a:	f7ed fc75 	bl	8000118 <strlen>
 801282e:	2600      	movs	r6, #0
 8012830:	2700      	movs	r7, #0
 8012832:	9b06      	ldr	r3, [sp, #24]
 8012834:	9005      	str	r0, [sp, #20]
 8012836:	9321      	str	r3, [sp, #132]	; 0x84
 8012838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801283a:	781a      	ldrb	r2, [r3, #0]
 801283c:	2a0d      	cmp	r2, #13
 801283e:	d839      	bhi.n	80128b4 <_strtod_l+0xa4>
 8012840:	2a09      	cmp	r2, #9
 8012842:	d23d      	bcs.n	80128c0 <_strtod_l+0xb0>
 8012844:	2a00      	cmp	r2, #0
 8012846:	d044      	beq.n	80128d2 <_strtod_l+0xc2>
 8012848:	2300      	movs	r3, #0
 801284a:	9313      	str	r3, [sp, #76]	; 0x4c
 801284c:	2200      	movs	r2, #0
 801284e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012850:	920c      	str	r2, [sp, #48]	; 0x30
 8012852:	7823      	ldrb	r3, [r4, #0]
 8012854:	2b30      	cmp	r3, #48	; 0x30
 8012856:	d000      	beq.n	801285a <_strtod_l+0x4a>
 8012858:	e07e      	b.n	8012958 <_strtod_l+0x148>
 801285a:	7863      	ldrb	r3, [r4, #1]
 801285c:	2b58      	cmp	r3, #88	; 0x58
 801285e:	d002      	beq.n	8012866 <_strtod_l+0x56>
 8012860:	2b78      	cmp	r3, #120	; 0x78
 8012862:	d000      	beq.n	8012866 <_strtod_l+0x56>
 8012864:	e06e      	b.n	8012944 <_strtod_l+0x134>
 8012866:	9b07      	ldr	r3, [sp, #28]
 8012868:	4a96      	ldr	r2, [pc, #600]	; (8012ac4 <_strtod_l+0x2b4>)
 801286a:	9302      	str	r3, [sp, #8]
 801286c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801286e:	a921      	add	r1, sp, #132	; 0x84
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	ab22      	add	r3, sp, #136	; 0x88
 8012874:	9300      	str	r3, [sp, #0]
 8012876:	9804      	ldr	r0, [sp, #16]
 8012878:	ab23      	add	r3, sp, #140	; 0x8c
 801287a:	f003 f914 	bl	8015aa6 <__gethex>
 801287e:	2507      	movs	r5, #7
 8012880:	9005      	str	r0, [sp, #20]
 8012882:	4005      	ands	r5, r0
 8012884:	d005      	beq.n	8012892 <_strtod_l+0x82>
 8012886:	2d06      	cmp	r5, #6
 8012888:	d12f      	bne.n	80128ea <_strtod_l+0xda>
 801288a:	2300      	movs	r3, #0
 801288c:	3401      	adds	r4, #1
 801288e:	9421      	str	r4, [sp, #132]	; 0x84
 8012890:	9313      	str	r3, [sp, #76]	; 0x4c
 8012892:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <_strtod_l+0x8e>
 8012898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801289a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801289c:	601a      	str	r2, [r3, #0]
 801289e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d01d      	beq.n	80128e0 <_strtod_l+0xd0>
 80128a4:	2380      	movs	r3, #128	; 0x80
 80128a6:	0032      	movs	r2, r6
 80128a8:	061b      	lsls	r3, r3, #24
 80128aa:	18fb      	adds	r3, r7, r3
 80128ac:	0010      	movs	r0, r2
 80128ae:	0019      	movs	r1, r3
 80128b0:	b027      	add	sp, #156	; 0x9c
 80128b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b4:	2a2b      	cmp	r2, #43	; 0x2b
 80128b6:	d016      	beq.n	80128e6 <_strtod_l+0xd6>
 80128b8:	2a2d      	cmp	r2, #45	; 0x2d
 80128ba:	d003      	beq.n	80128c4 <_strtod_l+0xb4>
 80128bc:	2a20      	cmp	r2, #32
 80128be:	d1c3      	bne.n	8012848 <_strtod_l+0x38>
 80128c0:	3301      	adds	r3, #1
 80128c2:	e7b8      	b.n	8012836 <_strtod_l+0x26>
 80128c4:	2201      	movs	r2, #1
 80128c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	9221      	str	r2, [sp, #132]	; 0x84
 80128cc:	785b      	ldrb	r3, [r3, #1]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1bc      	bne.n	801284c <_strtod_l+0x3c>
 80128d2:	9b06      	ldr	r3, [sp, #24]
 80128d4:	9321      	str	r3, [sp, #132]	; 0x84
 80128d6:	2300      	movs	r3, #0
 80128d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80128da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d1db      	bne.n	8012898 <_strtod_l+0x88>
 80128e0:	0032      	movs	r2, r6
 80128e2:	003b      	movs	r3, r7
 80128e4:	e7e2      	b.n	80128ac <_strtod_l+0x9c>
 80128e6:	2200      	movs	r2, #0
 80128e8:	e7ed      	b.n	80128c6 <_strtod_l+0xb6>
 80128ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80128ec:	2a00      	cmp	r2, #0
 80128ee:	d007      	beq.n	8012900 <_strtod_l+0xf0>
 80128f0:	2135      	movs	r1, #53	; 0x35
 80128f2:	a824      	add	r0, sp, #144	; 0x90
 80128f4:	f003 ff7d 	bl	80167f2 <__copybits>
 80128f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80128fa:	9804      	ldr	r0, [sp, #16]
 80128fc:	f003 fc12 	bl	8016124 <_Bfree>
 8012900:	1e68      	subs	r0, r5, #1
 8012902:	2804      	cmp	r0, #4
 8012904:	d806      	bhi.n	8012914 <_strtod_l+0x104>
 8012906:	f7ed fc0f 	bl	8000128 <__gnu_thumb1_case_uqi>
 801290a:	030c      	.short	0x030c
 801290c:	1917      	.short	0x1917
 801290e:	0c          	.byte	0x0c
 801290f:	00          	.byte	0x00
 8012910:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012912:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012914:	9b05      	ldr	r3, [sp, #20]
 8012916:	071b      	lsls	r3, r3, #28
 8012918:	d5bb      	bpl.n	8012892 <_strtod_l+0x82>
 801291a:	2380      	movs	r3, #128	; 0x80
 801291c:	061b      	lsls	r3, r3, #24
 801291e:	431f      	orrs	r7, r3
 8012920:	e7b7      	b.n	8012892 <_strtod_l+0x82>
 8012922:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012924:	4a68      	ldr	r2, [pc, #416]	; (8012ac8 <_strtod_l+0x2b8>)
 8012926:	4969      	ldr	r1, [pc, #420]	; (8012acc <_strtod_l+0x2bc>)
 8012928:	401a      	ands	r2, r3
 801292a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801292c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801292e:	185b      	adds	r3, r3, r1
 8012930:	051b      	lsls	r3, r3, #20
 8012932:	431a      	orrs	r2, r3
 8012934:	0017      	movs	r7, r2
 8012936:	e7ed      	b.n	8012914 <_strtod_l+0x104>
 8012938:	4f65      	ldr	r7, [pc, #404]	; (8012ad0 <_strtod_l+0x2c0>)
 801293a:	e7eb      	b.n	8012914 <_strtod_l+0x104>
 801293c:	2601      	movs	r6, #1
 801293e:	4f65      	ldr	r7, [pc, #404]	; (8012ad4 <_strtod_l+0x2c4>)
 8012940:	4276      	negs	r6, r6
 8012942:	e7e7      	b.n	8012914 <_strtod_l+0x104>
 8012944:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012946:	1c5a      	adds	r2, r3, #1
 8012948:	9221      	str	r2, [sp, #132]	; 0x84
 801294a:	785b      	ldrb	r3, [r3, #1]
 801294c:	2b30      	cmp	r3, #48	; 0x30
 801294e:	d0f9      	beq.n	8012944 <_strtod_l+0x134>
 8012950:	2b00      	cmp	r3, #0
 8012952:	d09e      	beq.n	8012892 <_strtod_l+0x82>
 8012954:	2301      	movs	r3, #1
 8012956:	930c      	str	r3, [sp, #48]	; 0x30
 8012958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801295a:	220a      	movs	r2, #10
 801295c:	9312      	str	r3, [sp, #72]	; 0x48
 801295e:	2300      	movs	r3, #0
 8012960:	930b      	str	r3, [sp, #44]	; 0x2c
 8012962:	9308      	str	r3, [sp, #32]
 8012964:	930a      	str	r3, [sp, #40]	; 0x28
 8012966:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012968:	7804      	ldrb	r4, [r0, #0]
 801296a:	0023      	movs	r3, r4
 801296c:	3b30      	subs	r3, #48	; 0x30
 801296e:	b2d9      	uxtb	r1, r3
 8012970:	2909      	cmp	r1, #9
 8012972:	d934      	bls.n	80129de <_strtod_l+0x1ce>
 8012974:	9a05      	ldr	r2, [sp, #20]
 8012976:	6829      	ldr	r1, [r5, #0]
 8012978:	f7ff ff0c 	bl	8012794 <strncmp>
 801297c:	2800      	cmp	r0, #0
 801297e:	d040      	beq.n	8012a02 <_strtod_l+0x1f2>
 8012980:	2000      	movs	r0, #0
 8012982:	0023      	movs	r3, r4
 8012984:	4684      	mov	ip, r0
 8012986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012988:	9007      	str	r0, [sp, #28]
 801298a:	9205      	str	r2, [sp, #20]
 801298c:	2220      	movs	r2, #32
 801298e:	0019      	movs	r1, r3
 8012990:	4391      	bics	r1, r2
 8012992:	000a      	movs	r2, r1
 8012994:	2100      	movs	r1, #0
 8012996:	2a45      	cmp	r2, #69	; 0x45
 8012998:	d000      	beq.n	801299c <_strtod_l+0x18c>
 801299a:	e0bf      	b.n	8012b1c <_strtod_l+0x30c>
 801299c:	9b05      	ldr	r3, [sp, #20]
 801299e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129a0:	4303      	orrs	r3, r0
 80129a2:	4313      	orrs	r3, r2
 80129a4:	428b      	cmp	r3, r1
 80129a6:	d094      	beq.n	80128d2 <_strtod_l+0xc2>
 80129a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129aa:	9306      	str	r3, [sp, #24]
 80129ac:	3301      	adds	r3, #1
 80129ae:	9321      	str	r3, [sp, #132]	; 0x84
 80129b0:	9b06      	ldr	r3, [sp, #24]
 80129b2:	785b      	ldrb	r3, [r3, #1]
 80129b4:	2b2b      	cmp	r3, #43	; 0x2b
 80129b6:	d100      	bne.n	80129ba <_strtod_l+0x1aa>
 80129b8:	e082      	b.n	8012ac0 <_strtod_l+0x2b0>
 80129ba:	000c      	movs	r4, r1
 80129bc:	2b2d      	cmp	r3, #45	; 0x2d
 80129be:	d105      	bne.n	80129cc <_strtod_l+0x1bc>
 80129c0:	2401      	movs	r4, #1
 80129c2:	9b06      	ldr	r3, [sp, #24]
 80129c4:	3302      	adds	r3, #2
 80129c6:	9321      	str	r3, [sp, #132]	; 0x84
 80129c8:	9b06      	ldr	r3, [sp, #24]
 80129ca:	789b      	ldrb	r3, [r3, #2]
 80129cc:	001a      	movs	r2, r3
 80129ce:	3a30      	subs	r2, #48	; 0x30
 80129d0:	2a09      	cmp	r2, #9
 80129d2:	d800      	bhi.n	80129d6 <_strtod_l+0x1c6>
 80129d4:	e084      	b.n	8012ae0 <_strtod_l+0x2d0>
 80129d6:	9a06      	ldr	r2, [sp, #24]
 80129d8:	2100      	movs	r1, #0
 80129da:	9221      	str	r2, [sp, #132]	; 0x84
 80129dc:	e09e      	b.n	8012b1c <_strtod_l+0x30c>
 80129de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129e0:	2908      	cmp	r1, #8
 80129e2:	dc09      	bgt.n	80129f8 <_strtod_l+0x1e8>
 80129e4:	9908      	ldr	r1, [sp, #32]
 80129e6:	4351      	muls	r1, r2
 80129e8:	18cb      	adds	r3, r1, r3
 80129ea:	9308      	str	r3, [sp, #32]
 80129ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ee:	3001      	adds	r0, #1
 80129f0:	3301      	adds	r3, #1
 80129f2:	930a      	str	r3, [sp, #40]	; 0x28
 80129f4:	9021      	str	r0, [sp, #132]	; 0x84
 80129f6:	e7b6      	b.n	8012966 <_strtod_l+0x156>
 80129f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80129fa:	4351      	muls	r1, r2
 80129fc:	18cb      	adds	r3, r1, r3
 80129fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a00:	e7f4      	b.n	80129ec <_strtod_l+0x1dc>
 8012a02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a04:	9b05      	ldr	r3, [sp, #20]
 8012a06:	4694      	mov	ip, r2
 8012a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a0a:	4463      	add	r3, ip
 8012a0c:	9321      	str	r3, [sp, #132]	; 0x84
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	2a00      	cmp	r2, #0
 8012a12:	d036      	beq.n	8012a82 <_strtod_l+0x272>
 8012a14:	4684      	mov	ip, r0
 8012a16:	9205      	str	r2, [sp, #20]
 8012a18:	001a      	movs	r2, r3
 8012a1a:	3a30      	subs	r2, #48	; 0x30
 8012a1c:	2a09      	cmp	r2, #9
 8012a1e:	d912      	bls.n	8012a46 <_strtod_l+0x236>
 8012a20:	2201      	movs	r2, #1
 8012a22:	9207      	str	r2, [sp, #28]
 8012a24:	e7b2      	b.n	801298c <_strtod_l+0x17c>
 8012a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a28:	3001      	adds	r0, #1
 8012a2a:	1c5a      	adds	r2, r3, #1
 8012a2c:	9221      	str	r2, [sp, #132]	; 0x84
 8012a2e:	785b      	ldrb	r3, [r3, #1]
 8012a30:	2b30      	cmp	r3, #48	; 0x30
 8012a32:	d0f8      	beq.n	8012a26 <_strtod_l+0x216>
 8012a34:	001a      	movs	r2, r3
 8012a36:	3a31      	subs	r2, #49	; 0x31
 8012a38:	2a08      	cmp	r2, #8
 8012a3a:	d83c      	bhi.n	8012ab6 <_strtod_l+0x2a6>
 8012a3c:	4684      	mov	ip, r0
 8012a3e:	2000      	movs	r0, #0
 8012a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a42:	9005      	str	r0, [sp, #20]
 8012a44:	9212      	str	r2, [sp, #72]	; 0x48
 8012a46:	3b30      	subs	r3, #48	; 0x30
 8012a48:	1c42      	adds	r2, r0, #1
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d013      	beq.n	8012a76 <_strtod_l+0x266>
 8012a4e:	210a      	movs	r1, #10
 8012a50:	4494      	add	ip, r2
 8012a52:	9a05      	ldr	r2, [sp, #20]
 8012a54:	1885      	adds	r5, r0, r2
 8012a56:	42aa      	cmp	r2, r5
 8012a58:	d115      	bne.n	8012a86 <_strtod_l+0x276>
 8012a5a:	9905      	ldr	r1, [sp, #20]
 8012a5c:	9a05      	ldr	r2, [sp, #20]
 8012a5e:	3101      	adds	r1, #1
 8012a60:	1809      	adds	r1, r1, r0
 8012a62:	1812      	adds	r2, r2, r0
 8012a64:	9105      	str	r1, [sp, #20]
 8012a66:	2a08      	cmp	r2, #8
 8012a68:	dc1b      	bgt.n	8012aa2 <_strtod_l+0x292>
 8012a6a:	220a      	movs	r2, #10
 8012a6c:	9908      	ldr	r1, [sp, #32]
 8012a6e:	434a      	muls	r2, r1
 8012a70:	189b      	adds	r3, r3, r2
 8012a72:	2200      	movs	r2, #0
 8012a74:	9308      	str	r3, [sp, #32]
 8012a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a78:	0010      	movs	r0, r2
 8012a7a:	1c59      	adds	r1, r3, #1
 8012a7c:	9121      	str	r1, [sp, #132]	; 0x84
 8012a7e:	785b      	ldrb	r3, [r3, #1]
 8012a80:	e7ca      	b.n	8012a18 <_strtod_l+0x208>
 8012a82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012a84:	e7d4      	b.n	8012a30 <_strtod_l+0x220>
 8012a86:	1c54      	adds	r4, r2, #1
 8012a88:	2a08      	cmp	r2, #8
 8012a8a:	dc04      	bgt.n	8012a96 <_strtod_l+0x286>
 8012a8c:	9a08      	ldr	r2, [sp, #32]
 8012a8e:	434a      	muls	r2, r1
 8012a90:	9208      	str	r2, [sp, #32]
 8012a92:	0022      	movs	r2, r4
 8012a94:	e7df      	b.n	8012a56 <_strtod_l+0x246>
 8012a96:	2c10      	cmp	r4, #16
 8012a98:	dcfb      	bgt.n	8012a92 <_strtod_l+0x282>
 8012a9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a9c:	434a      	muls	r2, r1
 8012a9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012aa0:	e7f7      	b.n	8012a92 <_strtod_l+0x282>
 8012aa2:	9905      	ldr	r1, [sp, #20]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	2910      	cmp	r1, #16
 8012aa8:	dce5      	bgt.n	8012a76 <_strtod_l+0x266>
 8012aaa:	210a      	movs	r1, #10
 8012aac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012aae:	4341      	muls	r1, r0
 8012ab0:	185b      	adds	r3, r3, r1
 8012ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ab4:	e7df      	b.n	8012a76 <_strtod_l+0x266>
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	4694      	mov	ip, r2
 8012aba:	9205      	str	r2, [sp, #20]
 8012abc:	3201      	adds	r2, #1
 8012abe:	e7b0      	b.n	8012a22 <_strtod_l+0x212>
 8012ac0:	000c      	movs	r4, r1
 8012ac2:	e77e      	b.n	80129c2 <_strtod_l+0x1b2>
 8012ac4:	08019960 	.word	0x08019960
 8012ac8:	ffefffff 	.word	0xffefffff
 8012acc:	00000433 	.word	0x00000433
 8012ad0:	7ff00000 	.word	0x7ff00000
 8012ad4:	7fffffff 	.word	0x7fffffff
 8012ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ada:	1c5a      	adds	r2, r3, #1
 8012adc:	9221      	str	r2, [sp, #132]	; 0x84
 8012ade:	785b      	ldrb	r3, [r3, #1]
 8012ae0:	2b30      	cmp	r3, #48	; 0x30
 8012ae2:	d0f9      	beq.n	8012ad8 <_strtod_l+0x2c8>
 8012ae4:	001a      	movs	r2, r3
 8012ae6:	3a31      	subs	r2, #49	; 0x31
 8012ae8:	2100      	movs	r1, #0
 8012aea:	2a08      	cmp	r2, #8
 8012aec:	d816      	bhi.n	8012b1c <_strtod_l+0x30c>
 8012aee:	3b30      	subs	r3, #48	; 0x30
 8012af0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8012af2:	930e      	str	r3, [sp, #56]	; 0x38
 8012af4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012af6:	1c59      	adds	r1, r3, #1
 8012af8:	9121      	str	r1, [sp, #132]	; 0x84
 8012afa:	785b      	ldrb	r3, [r3, #1]
 8012afc:	001a      	movs	r2, r3
 8012afe:	3a30      	subs	r2, #48	; 0x30
 8012b00:	2a09      	cmp	r2, #9
 8012b02:	d932      	bls.n	8012b6a <_strtod_l+0x35a>
 8012b04:	1b4a      	subs	r2, r1, r5
 8012b06:	4dad      	ldr	r5, [pc, #692]	; (8012dbc <_strtod_l+0x5ac>)
 8012b08:	0029      	movs	r1, r5
 8012b0a:	2a08      	cmp	r2, #8
 8012b0c:	dc03      	bgt.n	8012b16 <_strtod_l+0x306>
 8012b0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012b10:	42a9      	cmp	r1, r5
 8012b12:	dd00      	ble.n	8012b16 <_strtod_l+0x306>
 8012b14:	0029      	movs	r1, r5
 8012b16:	2c00      	cmp	r4, #0
 8012b18:	d000      	beq.n	8012b1c <_strtod_l+0x30c>
 8012b1a:	4249      	negs	r1, r1
 8012b1c:	9a05      	ldr	r2, [sp, #20]
 8012b1e:	2a00      	cmp	r2, #0
 8012b20:	d149      	bne.n	8012bb6 <_strtod_l+0x3a6>
 8012b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b24:	4310      	orrs	r0, r2
 8012b26:	d000      	beq.n	8012b2a <_strtod_l+0x31a>
 8012b28:	e6b3      	b.n	8012892 <_strtod_l+0x82>
 8012b2a:	9a07      	ldr	r2, [sp, #28]
 8012b2c:	2a00      	cmp	r2, #0
 8012b2e:	d000      	beq.n	8012b32 <_strtod_l+0x322>
 8012b30:	e6cf      	b.n	80128d2 <_strtod_l+0xc2>
 8012b32:	2b4e      	cmp	r3, #78	; 0x4e
 8012b34:	d025      	beq.n	8012b82 <_strtod_l+0x372>
 8012b36:	dc1f      	bgt.n	8012b78 <_strtod_l+0x368>
 8012b38:	2b49      	cmp	r3, #73	; 0x49
 8012b3a:	d000      	beq.n	8012b3e <_strtod_l+0x32e>
 8012b3c:	e6c9      	b.n	80128d2 <_strtod_l+0xc2>
 8012b3e:	49a0      	ldr	r1, [pc, #640]	; (8012dc0 <_strtod_l+0x5b0>)
 8012b40:	a821      	add	r0, sp, #132	; 0x84
 8012b42:	f003 f9ed 	bl	8015f20 <__match>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	d100      	bne.n	8012b4c <_strtod_l+0x33c>
 8012b4a:	e6c2      	b.n	80128d2 <_strtod_l+0xc2>
 8012b4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b4e:	499d      	ldr	r1, [pc, #628]	; (8012dc4 <_strtod_l+0x5b4>)
 8012b50:	3b01      	subs	r3, #1
 8012b52:	a821      	add	r0, sp, #132	; 0x84
 8012b54:	9321      	str	r3, [sp, #132]	; 0x84
 8012b56:	f003 f9e3 	bl	8015f20 <__match>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	d102      	bne.n	8012b64 <_strtod_l+0x354>
 8012b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b60:	3301      	adds	r3, #1
 8012b62:	9321      	str	r3, [sp, #132]	; 0x84
 8012b64:	4f98      	ldr	r7, [pc, #608]	; (8012dc8 <_strtod_l+0x5b8>)
 8012b66:	2600      	movs	r6, #0
 8012b68:	e693      	b.n	8012892 <_strtod_l+0x82>
 8012b6a:	220a      	movs	r2, #10
 8012b6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012b6e:	434a      	muls	r2, r1
 8012b70:	18d2      	adds	r2, r2, r3
 8012b72:	3a30      	subs	r2, #48	; 0x30
 8012b74:	920e      	str	r2, [sp, #56]	; 0x38
 8012b76:	e7bd      	b.n	8012af4 <_strtod_l+0x2e4>
 8012b78:	2b69      	cmp	r3, #105	; 0x69
 8012b7a:	d0e0      	beq.n	8012b3e <_strtod_l+0x32e>
 8012b7c:	2b6e      	cmp	r3, #110	; 0x6e
 8012b7e:	d000      	beq.n	8012b82 <_strtod_l+0x372>
 8012b80:	e6a7      	b.n	80128d2 <_strtod_l+0xc2>
 8012b82:	4992      	ldr	r1, [pc, #584]	; (8012dcc <_strtod_l+0x5bc>)
 8012b84:	a821      	add	r0, sp, #132	; 0x84
 8012b86:	f003 f9cb 	bl	8015f20 <__match>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d100      	bne.n	8012b90 <_strtod_l+0x380>
 8012b8e:	e6a0      	b.n	80128d2 <_strtod_l+0xc2>
 8012b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	2b28      	cmp	r3, #40	; 0x28
 8012b96:	d10c      	bne.n	8012bb2 <_strtod_l+0x3a2>
 8012b98:	aa24      	add	r2, sp, #144	; 0x90
 8012b9a:	498d      	ldr	r1, [pc, #564]	; (8012dd0 <_strtod_l+0x5c0>)
 8012b9c:	a821      	add	r0, sp, #132	; 0x84
 8012b9e:	f003 f9d3 	bl	8015f48 <__hexnan>
 8012ba2:	2805      	cmp	r0, #5
 8012ba4:	d105      	bne.n	8012bb2 <_strtod_l+0x3a2>
 8012ba6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012ba8:	4a87      	ldr	r2, [pc, #540]	; (8012dc8 <_strtod_l+0x5b8>)
 8012baa:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012bac:	431a      	orrs	r2, r3
 8012bae:	0017      	movs	r7, r2
 8012bb0:	e66f      	b.n	8012892 <_strtod_l+0x82>
 8012bb2:	4f88      	ldr	r7, [pc, #544]	; (8012dd4 <_strtod_l+0x5c4>)
 8012bb4:	e7d7      	b.n	8012b66 <_strtod_l+0x356>
 8012bb6:	4663      	mov	r3, ip
 8012bb8:	1acb      	subs	r3, r1, r3
 8012bba:	9307      	str	r3, [sp, #28]
 8012bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d101      	bne.n	8012bc6 <_strtod_l+0x3b6>
 8012bc2:	9b05      	ldr	r3, [sp, #20]
 8012bc4:	930a      	str	r3, [sp, #40]	; 0x28
 8012bc6:	9c05      	ldr	r4, [sp, #20]
 8012bc8:	2c10      	cmp	r4, #16
 8012bca:	dd00      	ble.n	8012bce <_strtod_l+0x3be>
 8012bcc:	2410      	movs	r4, #16
 8012bce:	9808      	ldr	r0, [sp, #32]
 8012bd0:	f7ef ff76 	bl	8002ac0 <__aeabi_ui2d>
 8012bd4:	9b05      	ldr	r3, [sp, #20]
 8012bd6:	0006      	movs	r6, r0
 8012bd8:	000f      	movs	r7, r1
 8012bda:	2b09      	cmp	r3, #9
 8012bdc:	dc15      	bgt.n	8012c0a <_strtod_l+0x3fa>
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d100      	bne.n	8012be6 <_strtod_l+0x3d6>
 8012be4:	e655      	b.n	8012892 <_strtod_l+0x82>
 8012be6:	9b07      	ldr	r3, [sp, #28]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dc00      	bgt.n	8012bee <_strtod_l+0x3de>
 8012bec:	e07d      	b.n	8012cea <_strtod_l+0x4da>
 8012bee:	2b16      	cmp	r3, #22
 8012bf0:	dc62      	bgt.n	8012cb8 <_strtod_l+0x4a8>
 8012bf2:	00dc      	lsls	r4, r3, #3
 8012bf4:	4b78      	ldr	r3, [pc, #480]	; (8012dd8 <_strtod_l+0x5c8>)
 8012bf6:	0032      	movs	r2, r6
 8012bf8:	1919      	adds	r1, r3, r4
 8012bfa:	003b      	movs	r3, r7
 8012bfc:	6808      	ldr	r0, [r1, #0]
 8012bfe:	6849      	ldr	r1, [r1, #4]
 8012c00:	f7ef f918 	bl	8001e34 <__aeabi_dmul>
 8012c04:	0006      	movs	r6, r0
 8012c06:	000f      	movs	r7, r1
 8012c08:	e643      	b.n	8012892 <_strtod_l+0x82>
 8012c0a:	0022      	movs	r2, r4
 8012c0c:	4b72      	ldr	r3, [pc, #456]	; (8012dd8 <_strtod_l+0x5c8>)
 8012c0e:	3a09      	subs	r2, #9
 8012c10:	00d2      	lsls	r2, r2, #3
 8012c12:	189b      	adds	r3, r3, r2
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	f7ef f90c 	bl	8001e34 <__aeabi_dmul>
 8012c1c:	0006      	movs	r6, r0
 8012c1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012c20:	000f      	movs	r7, r1
 8012c22:	f7ef ff4d 	bl	8002ac0 <__aeabi_ui2d>
 8012c26:	000b      	movs	r3, r1
 8012c28:	0002      	movs	r2, r0
 8012c2a:	0039      	movs	r1, r7
 8012c2c:	0030      	movs	r0, r6
 8012c2e:	f7ee f9db 	bl	8000fe8 <__aeabi_dadd>
 8012c32:	9b05      	ldr	r3, [sp, #20]
 8012c34:	0006      	movs	r6, r0
 8012c36:	000f      	movs	r7, r1
 8012c38:	2b0f      	cmp	r3, #15
 8012c3a:	ddd0      	ble.n	8012bde <_strtod_l+0x3ce>
 8012c3c:	9b05      	ldr	r3, [sp, #20]
 8012c3e:	1b1c      	subs	r4, r3, r4
 8012c40:	9b07      	ldr	r3, [sp, #28]
 8012c42:	18e4      	adds	r4, r4, r3
 8012c44:	2c00      	cmp	r4, #0
 8012c46:	dc00      	bgt.n	8012c4a <_strtod_l+0x43a>
 8012c48:	e094      	b.n	8012d74 <_strtod_l+0x564>
 8012c4a:	230f      	movs	r3, #15
 8012c4c:	4023      	ands	r3, r4
 8012c4e:	d00a      	beq.n	8012c66 <_strtod_l+0x456>
 8012c50:	4961      	ldr	r1, [pc, #388]	; (8012dd8 <_strtod_l+0x5c8>)
 8012c52:	00db      	lsls	r3, r3, #3
 8012c54:	18c9      	adds	r1, r1, r3
 8012c56:	0032      	movs	r2, r6
 8012c58:	6808      	ldr	r0, [r1, #0]
 8012c5a:	6849      	ldr	r1, [r1, #4]
 8012c5c:	003b      	movs	r3, r7
 8012c5e:	f7ef f8e9 	bl	8001e34 <__aeabi_dmul>
 8012c62:	0006      	movs	r6, r0
 8012c64:	000f      	movs	r7, r1
 8012c66:	230f      	movs	r3, #15
 8012c68:	439c      	bics	r4, r3
 8012c6a:	d06e      	beq.n	8012d4a <_strtod_l+0x53a>
 8012c6c:	3326      	adds	r3, #38	; 0x26
 8012c6e:	33ff      	adds	r3, #255	; 0xff
 8012c70:	429c      	cmp	r4, r3
 8012c72:	dd48      	ble.n	8012d06 <_strtod_l+0x4f6>
 8012c74:	2400      	movs	r4, #0
 8012c76:	9405      	str	r4, [sp, #20]
 8012c78:	940b      	str	r4, [sp, #44]	; 0x2c
 8012c7a:	940a      	str	r4, [sp, #40]	; 0x28
 8012c7c:	2322      	movs	r3, #34	; 0x22
 8012c7e:	2600      	movs	r6, #0
 8012c80:	9a04      	ldr	r2, [sp, #16]
 8012c82:	4f51      	ldr	r7, [pc, #324]	; (8012dc8 <_strtod_l+0x5b8>)
 8012c84:	6013      	str	r3, [r2, #0]
 8012c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c88:	42b3      	cmp	r3, r6
 8012c8a:	d100      	bne.n	8012c8e <_strtod_l+0x47e>
 8012c8c:	e601      	b.n	8012892 <_strtod_l+0x82>
 8012c8e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012c90:	9804      	ldr	r0, [sp, #16]
 8012c92:	f003 fa47 	bl	8016124 <_Bfree>
 8012c96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c98:	9804      	ldr	r0, [sp, #16]
 8012c9a:	f003 fa43 	bl	8016124 <_Bfree>
 8012c9e:	9905      	ldr	r1, [sp, #20]
 8012ca0:	9804      	ldr	r0, [sp, #16]
 8012ca2:	f003 fa3f 	bl	8016124 <_Bfree>
 8012ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012ca8:	9804      	ldr	r0, [sp, #16]
 8012caa:	f003 fa3b 	bl	8016124 <_Bfree>
 8012cae:	0021      	movs	r1, r4
 8012cb0:	9804      	ldr	r0, [sp, #16]
 8012cb2:	f003 fa37 	bl	8016124 <_Bfree>
 8012cb6:	e5ec      	b.n	8012892 <_strtod_l+0x82>
 8012cb8:	2325      	movs	r3, #37	; 0x25
 8012cba:	9a05      	ldr	r2, [sp, #20]
 8012cbc:	1a9b      	subs	r3, r3, r2
 8012cbe:	9a07      	ldr	r2, [sp, #28]
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	dbbb      	blt.n	8012c3c <_strtod_l+0x42c>
 8012cc4:	230f      	movs	r3, #15
 8012cc6:	9a05      	ldr	r2, [sp, #20]
 8012cc8:	4c43      	ldr	r4, [pc, #268]	; (8012dd8 <_strtod_l+0x5c8>)
 8012cca:	1a9d      	subs	r5, r3, r2
 8012ccc:	00e9      	lsls	r1, r5, #3
 8012cce:	1861      	adds	r1, r4, r1
 8012cd0:	0032      	movs	r2, r6
 8012cd2:	6808      	ldr	r0, [r1, #0]
 8012cd4:	6849      	ldr	r1, [r1, #4]
 8012cd6:	003b      	movs	r3, r7
 8012cd8:	f7ef f8ac 	bl	8001e34 <__aeabi_dmul>
 8012cdc:	9b07      	ldr	r3, [sp, #28]
 8012cde:	1b5e      	subs	r6, r3, r5
 8012ce0:	00f6      	lsls	r6, r6, #3
 8012ce2:	19a6      	adds	r6, r4, r6
 8012ce4:	6832      	ldr	r2, [r6, #0]
 8012ce6:	6873      	ldr	r3, [r6, #4]
 8012ce8:	e78a      	b.n	8012c00 <_strtod_l+0x3f0>
 8012cea:	9b07      	ldr	r3, [sp, #28]
 8012cec:	3316      	adds	r3, #22
 8012cee:	dba5      	blt.n	8012c3c <_strtod_l+0x42c>
 8012cf0:	9b07      	ldr	r3, [sp, #28]
 8012cf2:	0030      	movs	r0, r6
 8012cf4:	00da      	lsls	r2, r3, #3
 8012cf6:	4b38      	ldr	r3, [pc, #224]	; (8012dd8 <_strtod_l+0x5c8>)
 8012cf8:	0039      	movs	r1, r7
 8012cfa:	1a9b      	subs	r3, r3, r2
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	f7ee fc8e 	bl	8001620 <__aeabi_ddiv>
 8012d04:	e77e      	b.n	8012c04 <_strtod_l+0x3f4>
 8012d06:	2300      	movs	r3, #0
 8012d08:	0030      	movs	r0, r6
 8012d0a:	0039      	movs	r1, r7
 8012d0c:	001d      	movs	r5, r3
 8012d0e:	1124      	asrs	r4, r4, #4
 8012d10:	2c01      	cmp	r4, #1
 8012d12:	dc1d      	bgt.n	8012d50 <_strtod_l+0x540>
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d001      	beq.n	8012d1c <_strtod_l+0x50c>
 8012d18:	0006      	movs	r6, r0
 8012d1a:	000f      	movs	r7, r1
 8012d1c:	4b2f      	ldr	r3, [pc, #188]	; (8012ddc <_strtod_l+0x5cc>)
 8012d1e:	00ed      	lsls	r5, r5, #3
 8012d20:	18ff      	adds	r7, r7, r3
 8012d22:	4b2f      	ldr	r3, [pc, #188]	; (8012de0 <_strtod_l+0x5d0>)
 8012d24:	0032      	movs	r2, r6
 8012d26:	195d      	adds	r5, r3, r5
 8012d28:	6828      	ldr	r0, [r5, #0]
 8012d2a:	6869      	ldr	r1, [r5, #4]
 8012d2c:	003b      	movs	r3, r7
 8012d2e:	f7ef f881 	bl	8001e34 <__aeabi_dmul>
 8012d32:	4b25      	ldr	r3, [pc, #148]	; (8012dc8 <_strtod_l+0x5b8>)
 8012d34:	4a2b      	ldr	r2, [pc, #172]	; (8012de4 <_strtod_l+0x5d4>)
 8012d36:	0006      	movs	r6, r0
 8012d38:	400b      	ands	r3, r1
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d89a      	bhi.n	8012c74 <_strtod_l+0x464>
 8012d3e:	4a2a      	ldr	r2, [pc, #168]	; (8012de8 <_strtod_l+0x5d8>)
 8012d40:	4293      	cmp	r3, r2
 8012d42:	d913      	bls.n	8012d6c <_strtod_l+0x55c>
 8012d44:	2601      	movs	r6, #1
 8012d46:	4f29      	ldr	r7, [pc, #164]	; (8012dec <_strtod_l+0x5dc>)
 8012d48:	4276      	negs	r6, r6
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	9306      	str	r3, [sp, #24]
 8012d4e:	e07b      	b.n	8012e48 <_strtod_l+0x638>
 8012d50:	2201      	movs	r2, #1
 8012d52:	4214      	tst	r4, r2
 8012d54:	d007      	beq.n	8012d66 <_strtod_l+0x556>
 8012d56:	4a22      	ldr	r2, [pc, #136]	; (8012de0 <_strtod_l+0x5d0>)
 8012d58:	00eb      	lsls	r3, r5, #3
 8012d5a:	189b      	adds	r3, r3, r2
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	f7ef f868 	bl	8001e34 <__aeabi_dmul>
 8012d64:	2301      	movs	r3, #1
 8012d66:	3501      	adds	r5, #1
 8012d68:	1064      	asrs	r4, r4, #1
 8012d6a:	e7d1      	b.n	8012d10 <_strtod_l+0x500>
 8012d6c:	23d4      	movs	r3, #212	; 0xd4
 8012d6e:	049b      	lsls	r3, r3, #18
 8012d70:	18cf      	adds	r7, r1, r3
 8012d72:	e7ea      	b.n	8012d4a <_strtod_l+0x53a>
 8012d74:	2c00      	cmp	r4, #0
 8012d76:	d0e8      	beq.n	8012d4a <_strtod_l+0x53a>
 8012d78:	230f      	movs	r3, #15
 8012d7a:	4264      	negs	r4, r4
 8012d7c:	4023      	ands	r3, r4
 8012d7e:	d00a      	beq.n	8012d96 <_strtod_l+0x586>
 8012d80:	4a15      	ldr	r2, [pc, #84]	; (8012dd8 <_strtod_l+0x5c8>)
 8012d82:	00db      	lsls	r3, r3, #3
 8012d84:	18d3      	adds	r3, r2, r3
 8012d86:	0030      	movs	r0, r6
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	0039      	movs	r1, r7
 8012d8e:	f7ee fc47 	bl	8001620 <__aeabi_ddiv>
 8012d92:	0006      	movs	r6, r0
 8012d94:	000f      	movs	r7, r1
 8012d96:	1124      	asrs	r4, r4, #4
 8012d98:	d0d7      	beq.n	8012d4a <_strtod_l+0x53a>
 8012d9a:	2c1f      	cmp	r4, #31
 8012d9c:	dd28      	ble.n	8012df0 <_strtod_l+0x5e0>
 8012d9e:	2400      	movs	r4, #0
 8012da0:	9405      	str	r4, [sp, #20]
 8012da2:	940b      	str	r4, [sp, #44]	; 0x2c
 8012da4:	940a      	str	r4, [sp, #40]	; 0x28
 8012da6:	2322      	movs	r3, #34	; 0x22
 8012da8:	9a04      	ldr	r2, [sp, #16]
 8012daa:	2600      	movs	r6, #0
 8012dac:	6013      	str	r3, [r2, #0]
 8012dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012db0:	2700      	movs	r7, #0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d000      	beq.n	8012db8 <_strtod_l+0x5a8>
 8012db6:	e76a      	b.n	8012c8e <_strtod_l+0x47e>
 8012db8:	e56b      	b.n	8012892 <_strtod_l+0x82>
 8012dba:	46c0      	nop			; (mov r8, r8)
 8012dbc:	00004e1f 	.word	0x00004e1f
 8012dc0:	080199b5 	.word	0x080199b5
 8012dc4:	08019b08 	.word	0x08019b08
 8012dc8:	7ff00000 	.word	0x7ff00000
 8012dcc:	080199bd 	.word	0x080199bd
 8012dd0:	08019974 	.word	0x08019974
 8012dd4:	fff80000 	.word	0xfff80000
 8012dd8:	08019b40 	.word	0x08019b40
 8012ddc:	fcb00000 	.word	0xfcb00000
 8012de0:	08019b18 	.word	0x08019b18
 8012de4:	7ca00000 	.word	0x7ca00000
 8012de8:	7c900000 	.word	0x7c900000
 8012dec:	7fefffff 	.word	0x7fefffff
 8012df0:	2310      	movs	r3, #16
 8012df2:	4023      	ands	r3, r4
 8012df4:	9306      	str	r3, [sp, #24]
 8012df6:	d001      	beq.n	8012dfc <_strtod_l+0x5ec>
 8012df8:	236a      	movs	r3, #106	; 0x6a
 8012dfa:	9306      	str	r3, [sp, #24]
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	0030      	movs	r0, r6
 8012e00:	0039      	movs	r1, r7
 8012e02:	001d      	movs	r5, r3
 8012e04:	2c00      	cmp	r4, #0
 8012e06:	dd00      	ble.n	8012e0a <_strtod_l+0x5fa>
 8012e08:	e10e      	b.n	8013028 <_strtod_l+0x818>
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d001      	beq.n	8012e12 <_strtod_l+0x602>
 8012e0e:	0006      	movs	r6, r0
 8012e10:	000f      	movs	r7, r1
 8012e12:	9b06      	ldr	r3, [sp, #24]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d00f      	beq.n	8012e38 <_strtod_l+0x628>
 8012e18:	236b      	movs	r3, #107	; 0x6b
 8012e1a:	0079      	lsls	r1, r7, #1
 8012e1c:	0d49      	lsrs	r1, r1, #21
 8012e1e:	003a      	movs	r2, r7
 8012e20:	1a5b      	subs	r3, r3, r1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	dd08      	ble.n	8012e38 <_strtod_l+0x628>
 8012e26:	2b1f      	cmp	r3, #31
 8012e28:	dc00      	bgt.n	8012e2c <_strtod_l+0x61c>
 8012e2a:	e112      	b.n	8013052 <_strtod_l+0x842>
 8012e2c:	2600      	movs	r6, #0
 8012e2e:	2b34      	cmp	r3, #52	; 0x34
 8012e30:	dc00      	bgt.n	8012e34 <_strtod_l+0x624>
 8012e32:	e107      	b.n	8013044 <_strtod_l+0x834>
 8012e34:	27dc      	movs	r7, #220	; 0xdc
 8012e36:	04bf      	lsls	r7, r7, #18
 8012e38:	2200      	movs	r2, #0
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	0030      	movs	r0, r6
 8012e3e:	0039      	movs	r1, r7
 8012e40:	f7ed fb0c 	bl	800045c <__aeabi_dcmpeq>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d1aa      	bne.n	8012d9e <_strtod_l+0x58e>
 8012e48:	9b08      	ldr	r3, [sp, #32]
 8012e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e4c:	9300      	str	r3, [sp, #0]
 8012e4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e50:	9b05      	ldr	r3, [sp, #20]
 8012e52:	9804      	ldr	r0, [sp, #16]
 8012e54:	f003 f9ae 	bl	80161b4 <__s2b>
 8012e58:	900b      	str	r0, [sp, #44]	; 0x2c
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d100      	bne.n	8012e60 <_strtod_l+0x650>
 8012e5e:	e709      	b.n	8012c74 <_strtod_l+0x464>
 8012e60:	9b07      	ldr	r3, [sp, #28]
 8012e62:	9a07      	ldr	r2, [sp, #28]
 8012e64:	17db      	asrs	r3, r3, #31
 8012e66:	4252      	negs	r2, r2
 8012e68:	4013      	ands	r3, r2
 8012e6a:	9315      	str	r3, [sp, #84]	; 0x54
 8012e6c:	9b07      	ldr	r3, [sp, #28]
 8012e6e:	2400      	movs	r4, #0
 8012e70:	43db      	mvns	r3, r3
 8012e72:	9a07      	ldr	r2, [sp, #28]
 8012e74:	17db      	asrs	r3, r3, #31
 8012e76:	401a      	ands	r2, r3
 8012e78:	921c      	str	r2, [sp, #112]	; 0x70
 8012e7a:	9405      	str	r4, [sp, #20]
 8012e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e7e:	9804      	ldr	r0, [sp, #16]
 8012e80:	6859      	ldr	r1, [r3, #4]
 8012e82:	f003 f927 	bl	80160d4 <_Balloc>
 8012e86:	900a      	str	r0, [sp, #40]	; 0x28
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	d100      	bne.n	8012e8e <_strtod_l+0x67e>
 8012e8c:	e6f6      	b.n	8012c7c <_strtod_l+0x46c>
 8012e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	310c      	adds	r1, #12
 8012e96:	1c9a      	adds	r2, r3, #2
 8012e98:	0092      	lsls	r2, r2, #2
 8012e9a:	300c      	adds	r0, #12
 8012e9c:	9308      	str	r3, [sp, #32]
 8012e9e:	f7ff fa32 	bl	8012306 <memcpy>
 8012ea2:	ab24      	add	r3, sp, #144	; 0x90
 8012ea4:	9301      	str	r3, [sp, #4]
 8012ea6:	ab23      	add	r3, sp, #140	; 0x8c
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	0032      	movs	r2, r6
 8012eac:	003b      	movs	r3, r7
 8012eae:	9804      	ldr	r0, [sp, #16]
 8012eb0:	960e      	str	r6, [sp, #56]	; 0x38
 8012eb2:	970f      	str	r7, [sp, #60]	; 0x3c
 8012eb4:	f003 fc22 	bl	80166fc <__d2b>
 8012eb8:	9022      	str	r0, [sp, #136]	; 0x88
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d100      	bne.n	8012ec0 <_strtod_l+0x6b0>
 8012ebe:	e6dd      	b.n	8012c7c <_strtod_l+0x46c>
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	9804      	ldr	r0, [sp, #16]
 8012ec4:	f003 f9fd 	bl	80162c2 <__i2b>
 8012ec8:	9005      	str	r0, [sp, #20]
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d100      	bne.n	8012ed0 <_strtod_l+0x6c0>
 8012ece:	e6d5      	b.n	8012c7c <_strtod_l+0x46c>
 8012ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	da00      	bge.n	8012ed8 <_strtod_l+0x6c8>
 8012ed6:	e0c1      	b.n	801305c <_strtod_l+0x84c>
 8012ed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012eda:	189d      	adds	r5, r3, r2
 8012edc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012ede:	4694      	mov	ip, r2
 8012ee0:	9906      	ldr	r1, [sp, #24]
 8012ee2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012ee4:	1a5b      	subs	r3, r3, r1
 8012ee6:	2136      	movs	r1, #54	; 0x36
 8012ee8:	189b      	adds	r3, r3, r2
 8012eea:	1a8a      	subs	r2, r1, r2
 8012eec:	49b2      	ldr	r1, [pc, #712]	; (80131b8 <_strtod_l+0x9a8>)
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	428b      	cmp	r3, r1
 8012ef4:	db00      	blt.n	8012ef8 <_strtod_l+0x6e8>
 8012ef6:	e0bd      	b.n	8013074 <_strtod_l+0x864>
 8012ef8:	1ac9      	subs	r1, r1, r3
 8012efa:	1a52      	subs	r2, r2, r1
 8012efc:	291f      	cmp	r1, #31
 8012efe:	dd00      	ble.n	8012f02 <_strtod_l+0x6f2>
 8012f00:	e0b1      	b.n	8013066 <_strtod_l+0x856>
 8012f02:	4088      	lsls	r0, r1
 8012f04:	2300      	movs	r3, #0
 8012f06:	9014      	str	r0, [sp, #80]	; 0x50
 8012f08:	9310      	str	r3, [sp, #64]	; 0x40
 8012f0a:	18ab      	adds	r3, r5, r2
 8012f0c:	9308      	str	r3, [sp, #32]
 8012f0e:	0013      	movs	r3, r2
 8012f10:	9a06      	ldr	r2, [sp, #24]
 8012f12:	4463      	add	r3, ip
 8012f14:	18d3      	adds	r3, r2, r3
 8012f16:	9a08      	ldr	r2, [sp, #32]
 8012f18:	930c      	str	r3, [sp, #48]	; 0x30
 8012f1a:	002b      	movs	r3, r5
 8012f1c:	4295      	cmp	r5, r2
 8012f1e:	dd00      	ble.n	8012f22 <_strtod_l+0x712>
 8012f20:	0013      	movs	r3, r2
 8012f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f24:	4293      	cmp	r3, r2
 8012f26:	dd00      	ble.n	8012f2a <_strtod_l+0x71a>
 8012f28:	0013      	movs	r3, r2
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	dd06      	ble.n	8012f3c <_strtod_l+0x72c>
 8012f2e:	9a08      	ldr	r2, [sp, #32]
 8012f30:	1aed      	subs	r5, r5, r3
 8012f32:	1ad2      	subs	r2, r2, r3
 8012f34:	9208      	str	r2, [sp, #32]
 8012f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f38:	1ad2      	subs	r2, r2, r3
 8012f3a:	920c      	str	r2, [sp, #48]	; 0x30
 8012f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d017      	beq.n	8012f72 <_strtod_l+0x762>
 8012f42:	001a      	movs	r2, r3
 8012f44:	9905      	ldr	r1, [sp, #20]
 8012f46:	9804      	ldr	r0, [sp, #16]
 8012f48:	f003 fa54 	bl	80163f4 <__pow5mult>
 8012f4c:	9005      	str	r0, [sp, #20]
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d100      	bne.n	8012f54 <_strtod_l+0x744>
 8012f52:	e693      	b.n	8012c7c <_strtod_l+0x46c>
 8012f54:	0001      	movs	r1, r0
 8012f56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012f58:	9804      	ldr	r0, [sp, #16]
 8012f5a:	f003 f9bb 	bl	80162d4 <__multiply>
 8012f5e:	9012      	str	r0, [sp, #72]	; 0x48
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d100      	bne.n	8012f66 <_strtod_l+0x756>
 8012f64:	e68a      	b.n	8012c7c <_strtod_l+0x46c>
 8012f66:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012f68:	9804      	ldr	r0, [sp, #16]
 8012f6a:	f003 f8db 	bl	8016124 <_Bfree>
 8012f6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f70:	9322      	str	r3, [sp, #136]	; 0x88
 8012f72:	9b08      	ldr	r3, [sp, #32]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dd00      	ble.n	8012f7a <_strtod_l+0x76a>
 8012f78:	e07f      	b.n	801307a <_strtod_l+0x86a>
 8012f7a:	9b07      	ldr	r3, [sp, #28]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	dd08      	ble.n	8012f92 <_strtod_l+0x782>
 8012f80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012f82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f84:	9804      	ldr	r0, [sp, #16]
 8012f86:	f003 fa35 	bl	80163f4 <__pow5mult>
 8012f8a:	900a      	str	r0, [sp, #40]	; 0x28
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d100      	bne.n	8012f92 <_strtod_l+0x782>
 8012f90:	e674      	b.n	8012c7c <_strtod_l+0x46c>
 8012f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	dd08      	ble.n	8012faa <_strtod_l+0x79a>
 8012f98:	001a      	movs	r2, r3
 8012f9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f9c:	9804      	ldr	r0, [sp, #16]
 8012f9e:	f003 fa6b 	bl	8016478 <__lshift>
 8012fa2:	900a      	str	r0, [sp, #40]	; 0x28
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	d100      	bne.n	8012faa <_strtod_l+0x79a>
 8012fa8:	e668      	b.n	8012c7c <_strtod_l+0x46c>
 8012faa:	2d00      	cmp	r5, #0
 8012fac:	dd08      	ble.n	8012fc0 <_strtod_l+0x7b0>
 8012fae:	002a      	movs	r2, r5
 8012fb0:	9905      	ldr	r1, [sp, #20]
 8012fb2:	9804      	ldr	r0, [sp, #16]
 8012fb4:	f003 fa60 	bl	8016478 <__lshift>
 8012fb8:	9005      	str	r0, [sp, #20]
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d100      	bne.n	8012fc0 <_strtod_l+0x7b0>
 8012fbe:	e65d      	b.n	8012c7c <_strtod_l+0x46c>
 8012fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fc2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012fc4:	9804      	ldr	r0, [sp, #16]
 8012fc6:	f003 fac3 	bl	8016550 <__mdiff>
 8012fca:	1e04      	subs	r4, r0, #0
 8012fcc:	d100      	bne.n	8012fd0 <_strtod_l+0x7c0>
 8012fce:	e655      	b.n	8012c7c <_strtod_l+0x46c>
 8012fd0:	2500      	movs	r5, #0
 8012fd2:	68c3      	ldr	r3, [r0, #12]
 8012fd4:	9905      	ldr	r1, [sp, #20]
 8012fd6:	60c5      	str	r5, [r0, #12]
 8012fd8:	9312      	str	r3, [sp, #72]	; 0x48
 8012fda:	f003 fa9f 	bl	801651c <__mcmp>
 8012fde:	42a8      	cmp	r0, r5
 8012fe0:	da55      	bge.n	801308e <_strtod_l+0x87e>
 8012fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012fe4:	42ab      	cmp	r3, r5
 8012fe6:	d11b      	bne.n	8013020 <_strtod_l+0x810>
 8012fe8:	42ae      	cmp	r6, r5
 8012fea:	d119      	bne.n	8013020 <_strtod_l+0x810>
 8012fec:	033b      	lsls	r3, r7, #12
 8012fee:	42ab      	cmp	r3, r5
 8012ff0:	d116      	bne.n	8013020 <_strtod_l+0x810>
 8012ff2:	22d6      	movs	r2, #214	; 0xd6
 8012ff4:	4b71      	ldr	r3, [pc, #452]	; (80131bc <_strtod_l+0x9ac>)
 8012ff6:	04d2      	lsls	r2, r2, #19
 8012ff8:	403b      	ands	r3, r7
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d910      	bls.n	8013020 <_strtod_l+0x810>
 8012ffe:	6963      	ldr	r3, [r4, #20]
 8013000:	42ab      	cmp	r3, r5
 8013002:	d102      	bne.n	801300a <_strtod_l+0x7fa>
 8013004:	6923      	ldr	r3, [r4, #16]
 8013006:	2b01      	cmp	r3, #1
 8013008:	dd0a      	ble.n	8013020 <_strtod_l+0x810>
 801300a:	0021      	movs	r1, r4
 801300c:	2201      	movs	r2, #1
 801300e:	9804      	ldr	r0, [sp, #16]
 8013010:	f003 fa32 	bl	8016478 <__lshift>
 8013014:	9905      	ldr	r1, [sp, #20]
 8013016:	0004      	movs	r4, r0
 8013018:	f003 fa80 	bl	801651c <__mcmp>
 801301c:	2800      	cmp	r0, #0
 801301e:	dc6b      	bgt.n	80130f8 <_strtod_l+0x8e8>
 8013020:	9b06      	ldr	r3, [sp, #24]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d178      	bne.n	8013118 <_strtod_l+0x908>
 8013026:	e632      	b.n	8012c8e <_strtod_l+0x47e>
 8013028:	2201      	movs	r2, #1
 801302a:	4214      	tst	r4, r2
 801302c:	d007      	beq.n	801303e <_strtod_l+0x82e>
 801302e:	4a64      	ldr	r2, [pc, #400]	; (80131c0 <_strtod_l+0x9b0>)
 8013030:	00eb      	lsls	r3, r5, #3
 8013032:	18d3      	adds	r3, r2, r3
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	f7ee fefc 	bl	8001e34 <__aeabi_dmul>
 801303c:	2301      	movs	r3, #1
 801303e:	3501      	adds	r5, #1
 8013040:	1064      	asrs	r4, r4, #1
 8013042:	e6df      	b.n	8012e04 <_strtod_l+0x5f4>
 8013044:	2101      	movs	r1, #1
 8013046:	3b20      	subs	r3, #32
 8013048:	4249      	negs	r1, r1
 801304a:	4099      	lsls	r1, r3
 801304c:	400a      	ands	r2, r1
 801304e:	0017      	movs	r7, r2
 8013050:	e6f2      	b.n	8012e38 <_strtod_l+0x628>
 8013052:	2201      	movs	r2, #1
 8013054:	4252      	negs	r2, r2
 8013056:	409a      	lsls	r2, r3
 8013058:	4016      	ands	r6, r2
 801305a:	e6ed      	b.n	8012e38 <_strtod_l+0x628>
 801305c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801305e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013060:	1ad2      	subs	r2, r2, r3
 8013062:	4694      	mov	ip, r2
 8013064:	e73c      	b.n	8012ee0 <_strtod_l+0x6d0>
 8013066:	4957      	ldr	r1, [pc, #348]	; (80131c4 <_strtod_l+0x9b4>)
 8013068:	1acb      	subs	r3, r1, r3
 801306a:	0001      	movs	r1, r0
 801306c:	4099      	lsls	r1, r3
 801306e:	9110      	str	r1, [sp, #64]	; 0x40
 8013070:	9014      	str	r0, [sp, #80]	; 0x50
 8013072:	e74a      	b.n	8012f0a <_strtod_l+0x6fa>
 8013074:	2300      	movs	r3, #0
 8013076:	9310      	str	r3, [sp, #64]	; 0x40
 8013078:	e7fa      	b.n	8013070 <_strtod_l+0x860>
 801307a:	9a08      	ldr	r2, [sp, #32]
 801307c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801307e:	9804      	ldr	r0, [sp, #16]
 8013080:	f003 f9fa 	bl	8016478 <__lshift>
 8013084:	9022      	str	r0, [sp, #136]	; 0x88
 8013086:	2800      	cmp	r0, #0
 8013088:	d000      	beq.n	801308c <_strtod_l+0x87c>
 801308a:	e776      	b.n	8012f7a <_strtod_l+0x76a>
 801308c:	e5f6      	b.n	8012c7c <_strtod_l+0x46c>
 801308e:	970c      	str	r7, [sp, #48]	; 0x30
 8013090:	2800      	cmp	r0, #0
 8013092:	d000      	beq.n	8013096 <_strtod_l+0x886>
 8013094:	e0a0      	b.n	80131d8 <_strtod_l+0x9c8>
 8013096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013098:	033b      	lsls	r3, r7, #12
 801309a:	0b1b      	lsrs	r3, r3, #12
 801309c:	2a00      	cmp	r2, #0
 801309e:	d027      	beq.n	80130f0 <_strtod_l+0x8e0>
 80130a0:	4a49      	ldr	r2, [pc, #292]	; (80131c8 <_strtod_l+0x9b8>)
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d157      	bne.n	8013156 <_strtod_l+0x946>
 80130a6:	2201      	movs	r2, #1
 80130a8:	9b06      	ldr	r3, [sp, #24]
 80130aa:	4252      	negs	r2, r2
 80130ac:	0031      	movs	r1, r6
 80130ae:	0010      	movs	r0, r2
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00b      	beq.n	80130cc <_strtod_l+0x8bc>
 80130b4:	25d4      	movs	r5, #212	; 0xd4
 80130b6:	4b41      	ldr	r3, [pc, #260]	; (80131bc <_strtod_l+0x9ac>)
 80130b8:	04ed      	lsls	r5, r5, #19
 80130ba:	403b      	ands	r3, r7
 80130bc:	0010      	movs	r0, r2
 80130be:	42ab      	cmp	r3, r5
 80130c0:	d804      	bhi.n	80130cc <_strtod_l+0x8bc>
 80130c2:	306c      	adds	r0, #108	; 0x6c
 80130c4:	0d1b      	lsrs	r3, r3, #20
 80130c6:	1ac3      	subs	r3, r0, r3
 80130c8:	409a      	lsls	r2, r3
 80130ca:	0010      	movs	r0, r2
 80130cc:	4281      	cmp	r1, r0
 80130ce:	d142      	bne.n	8013156 <_strtod_l+0x946>
 80130d0:	4b3e      	ldr	r3, [pc, #248]	; (80131cc <_strtod_l+0x9bc>)
 80130d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d102      	bne.n	80130de <_strtod_l+0x8ce>
 80130d8:	1c4b      	adds	r3, r1, #1
 80130da:	d100      	bne.n	80130de <_strtod_l+0x8ce>
 80130dc:	e5ce      	b.n	8012c7c <_strtod_l+0x46c>
 80130de:	4b37      	ldr	r3, [pc, #220]	; (80131bc <_strtod_l+0x9ac>)
 80130e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130e2:	2600      	movs	r6, #0
 80130e4:	401a      	ands	r2, r3
 80130e6:	0013      	movs	r3, r2
 80130e8:	2280      	movs	r2, #128	; 0x80
 80130ea:	0352      	lsls	r2, r2, #13
 80130ec:	189f      	adds	r7, r3, r2
 80130ee:	e797      	b.n	8013020 <_strtod_l+0x810>
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d130      	bne.n	8013156 <_strtod_l+0x946>
 80130f4:	2e00      	cmp	r6, #0
 80130f6:	d12e      	bne.n	8013156 <_strtod_l+0x946>
 80130f8:	9906      	ldr	r1, [sp, #24]
 80130fa:	003b      	movs	r3, r7
 80130fc:	4a2f      	ldr	r2, [pc, #188]	; (80131bc <_strtod_l+0x9ac>)
 80130fe:	2900      	cmp	r1, #0
 8013100:	d020      	beq.n	8013144 <_strtod_l+0x934>
 8013102:	0011      	movs	r1, r2
 8013104:	20d6      	movs	r0, #214	; 0xd6
 8013106:	4039      	ands	r1, r7
 8013108:	04c0      	lsls	r0, r0, #19
 801310a:	4281      	cmp	r1, r0
 801310c:	dc1a      	bgt.n	8013144 <_strtod_l+0x934>
 801310e:	23dc      	movs	r3, #220	; 0xdc
 8013110:	049b      	lsls	r3, r3, #18
 8013112:	4299      	cmp	r1, r3
 8013114:	dc00      	bgt.n	8013118 <_strtod_l+0x908>
 8013116:	e646      	b.n	8012da6 <_strtod_l+0x596>
 8013118:	4b2d      	ldr	r3, [pc, #180]	; (80131d0 <_strtod_l+0x9c0>)
 801311a:	0030      	movs	r0, r6
 801311c:	931b      	str	r3, [sp, #108]	; 0x6c
 801311e:	2300      	movs	r3, #0
 8013120:	931a      	str	r3, [sp, #104]	; 0x68
 8013122:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013126:	0039      	movs	r1, r7
 8013128:	f7ee fe84 	bl	8001e34 <__aeabi_dmul>
 801312c:	0006      	movs	r6, r0
 801312e:	000f      	movs	r7, r1
 8013130:	1e0b      	subs	r3, r1, #0
 8013132:	d000      	beq.n	8013136 <_strtod_l+0x926>
 8013134:	e5ab      	b.n	8012c8e <_strtod_l+0x47e>
 8013136:	2800      	cmp	r0, #0
 8013138:	d000      	beq.n	801313c <_strtod_l+0x92c>
 801313a:	e5a8      	b.n	8012c8e <_strtod_l+0x47e>
 801313c:	9a04      	ldr	r2, [sp, #16]
 801313e:	3322      	adds	r3, #34	; 0x22
 8013140:	6013      	str	r3, [r2, #0]
 8013142:	e5a4      	b.n	8012c8e <_strtod_l+0x47e>
 8013144:	2601      	movs	r6, #1
 8013146:	4013      	ands	r3, r2
 8013148:	4a22      	ldr	r2, [pc, #136]	; (80131d4 <_strtod_l+0x9c4>)
 801314a:	4276      	negs	r6, r6
 801314c:	189b      	adds	r3, r3, r2
 801314e:	4a1e      	ldr	r2, [pc, #120]	; (80131c8 <_strtod_l+0x9b8>)
 8013150:	431a      	orrs	r2, r3
 8013152:	0017      	movs	r7, r2
 8013154:	e764      	b.n	8013020 <_strtod_l+0x810>
 8013156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013158:	2b00      	cmp	r3, #0
 801315a:	d015      	beq.n	8013188 <_strtod_l+0x978>
 801315c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801315e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013160:	4213      	tst	r3, r2
 8013162:	d100      	bne.n	8013166 <_strtod_l+0x956>
 8013164:	e75c      	b.n	8013020 <_strtod_l+0x810>
 8013166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013168:	9a06      	ldr	r2, [sp, #24]
 801316a:	0030      	movs	r0, r6
 801316c:	0039      	movs	r1, r7
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00f      	beq.n	8013192 <_strtod_l+0x982>
 8013172:	f7ff fb35 	bl	80127e0 <sulp>
 8013176:	0002      	movs	r2, r0
 8013178:	000b      	movs	r3, r1
 801317a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801317c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801317e:	f7ed ff33 	bl	8000fe8 <__aeabi_dadd>
 8013182:	0006      	movs	r6, r0
 8013184:	000f      	movs	r7, r1
 8013186:	e74b      	b.n	8013020 <_strtod_l+0x810>
 8013188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801318a:	4233      	tst	r3, r6
 801318c:	d100      	bne.n	8013190 <_strtod_l+0x980>
 801318e:	e747      	b.n	8013020 <_strtod_l+0x810>
 8013190:	e7e9      	b.n	8013166 <_strtod_l+0x956>
 8013192:	f7ff fb25 	bl	80127e0 <sulp>
 8013196:	0002      	movs	r2, r0
 8013198:	000b      	movs	r3, r1
 801319a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801319c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801319e:	f7ef f8bb 	bl	8002318 <__aeabi_dsub>
 80131a2:	2200      	movs	r2, #0
 80131a4:	2300      	movs	r3, #0
 80131a6:	0006      	movs	r6, r0
 80131a8:	000f      	movs	r7, r1
 80131aa:	f7ed f957 	bl	800045c <__aeabi_dcmpeq>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	d000      	beq.n	80131b4 <_strtod_l+0x9a4>
 80131b2:	e5f8      	b.n	8012da6 <_strtod_l+0x596>
 80131b4:	e734      	b.n	8013020 <_strtod_l+0x810>
 80131b6:	46c0      	nop			; (mov r8, r8)
 80131b8:	fffffc02 	.word	0xfffffc02
 80131bc:	7ff00000 	.word	0x7ff00000
 80131c0:	08019988 	.word	0x08019988
 80131c4:	fffffbe2 	.word	0xfffffbe2
 80131c8:	000fffff 	.word	0x000fffff
 80131cc:	7fefffff 	.word	0x7fefffff
 80131d0:	39500000 	.word	0x39500000
 80131d4:	fff00000 	.word	0xfff00000
 80131d8:	9905      	ldr	r1, [sp, #20]
 80131da:	0020      	movs	r0, r4
 80131dc:	f003 fae2 	bl	80167a4 <__ratio>
 80131e0:	2380      	movs	r3, #128	; 0x80
 80131e2:	2200      	movs	r2, #0
 80131e4:	05db      	lsls	r3, r3, #23
 80131e6:	9008      	str	r0, [sp, #32]
 80131e8:	9109      	str	r1, [sp, #36]	; 0x24
 80131ea:	f7ed f947 	bl	800047c <__aeabi_dcmple>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d100      	bne.n	80131f4 <_strtod_l+0x9e4>
 80131f2:	e07f      	b.n	80132f4 <_strtod_l+0xae4>
 80131f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d04b      	beq.n	8013292 <_strtod_l+0xa82>
 80131fa:	2200      	movs	r2, #0
 80131fc:	4b8a      	ldr	r3, [pc, #552]	; (8013428 <_strtod_l+0xc18>)
 80131fe:	9210      	str	r2, [sp, #64]	; 0x40
 8013200:	9311      	str	r3, [sp, #68]	; 0x44
 8013202:	4b89      	ldr	r3, [pc, #548]	; (8013428 <_strtod_l+0xc18>)
 8013204:	9308      	str	r3, [sp, #32]
 8013206:	4a89      	ldr	r2, [pc, #548]	; (801342c <_strtod_l+0xc1c>)
 8013208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801320a:	4013      	ands	r3, r2
 801320c:	9314      	str	r3, [sp, #80]	; 0x50
 801320e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013210:	4b87      	ldr	r3, [pc, #540]	; (8013430 <_strtod_l+0xc20>)
 8013212:	429a      	cmp	r2, r3
 8013214:	d000      	beq.n	8013218 <_strtod_l+0xa08>
 8013216:	e0ba      	b.n	801338e <_strtod_l+0xb7e>
 8013218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801321a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801321c:	921a      	str	r2, [sp, #104]	; 0x68
 801321e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013220:	4a84      	ldr	r2, [pc, #528]	; (8013434 <_strtod_l+0xc24>)
 8013222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013224:	4694      	mov	ip, r2
 8013226:	4463      	add	r3, ip
 8013228:	001f      	movs	r7, r3
 801322a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801322c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801322e:	0030      	movs	r0, r6
 8013230:	0039      	movs	r1, r7
 8013232:	920c      	str	r2, [sp, #48]	; 0x30
 8013234:	930d      	str	r3, [sp, #52]	; 0x34
 8013236:	f003 f9ef 	bl	8016618 <__ulp>
 801323a:	0002      	movs	r2, r0
 801323c:	000b      	movs	r3, r1
 801323e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013240:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013242:	f7ee fdf7 	bl	8001e34 <__aeabi_dmul>
 8013246:	0032      	movs	r2, r6
 8013248:	003b      	movs	r3, r7
 801324a:	f7ed fecd 	bl	8000fe8 <__aeabi_dadd>
 801324e:	4a77      	ldr	r2, [pc, #476]	; (801342c <_strtod_l+0xc1c>)
 8013250:	4b79      	ldr	r3, [pc, #484]	; (8013438 <_strtod_l+0xc28>)
 8013252:	0006      	movs	r6, r0
 8013254:	400a      	ands	r2, r1
 8013256:	429a      	cmp	r2, r3
 8013258:	d964      	bls.n	8013324 <_strtod_l+0xb14>
 801325a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801325c:	4a77      	ldr	r2, [pc, #476]	; (801343c <_strtod_l+0xc2c>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d103      	bne.n	801326a <_strtod_l+0xa5a>
 8013262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013264:	3301      	adds	r3, #1
 8013266:	d100      	bne.n	801326a <_strtod_l+0xa5a>
 8013268:	e508      	b.n	8012c7c <_strtod_l+0x46c>
 801326a:	2601      	movs	r6, #1
 801326c:	4f73      	ldr	r7, [pc, #460]	; (801343c <_strtod_l+0xc2c>)
 801326e:	4276      	negs	r6, r6
 8013270:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013272:	9804      	ldr	r0, [sp, #16]
 8013274:	f002 ff56 	bl	8016124 <_Bfree>
 8013278:	990a      	ldr	r1, [sp, #40]	; 0x28
 801327a:	9804      	ldr	r0, [sp, #16]
 801327c:	f002 ff52 	bl	8016124 <_Bfree>
 8013280:	9905      	ldr	r1, [sp, #20]
 8013282:	9804      	ldr	r0, [sp, #16]
 8013284:	f002 ff4e 	bl	8016124 <_Bfree>
 8013288:	0021      	movs	r1, r4
 801328a:	9804      	ldr	r0, [sp, #16]
 801328c:	f002 ff4a 	bl	8016124 <_Bfree>
 8013290:	e5f4      	b.n	8012e7c <_strtod_l+0x66c>
 8013292:	2e00      	cmp	r6, #0
 8013294:	d11e      	bne.n	80132d4 <_strtod_l+0xac4>
 8013296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013298:	031b      	lsls	r3, r3, #12
 801329a:	d121      	bne.n	80132e0 <_strtod_l+0xad0>
 801329c:	9808      	ldr	r0, [sp, #32]
 801329e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132a0:	2200      	movs	r2, #0
 80132a2:	4b61      	ldr	r3, [pc, #388]	; (8013428 <_strtod_l+0xc18>)
 80132a4:	f7ed f8e0 	bl	8000468 <__aeabi_dcmplt>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	d11f      	bne.n	80132ec <_strtod_l+0xadc>
 80132ac:	9808      	ldr	r0, [sp, #32]
 80132ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132b0:	2200      	movs	r2, #0
 80132b2:	4b63      	ldr	r3, [pc, #396]	; (8013440 <_strtod_l+0xc30>)
 80132b4:	f7ee fdbe 	bl	8001e34 <__aeabi_dmul>
 80132b8:	0005      	movs	r5, r0
 80132ba:	9108      	str	r1, [sp, #32]
 80132bc:	2280      	movs	r2, #128	; 0x80
 80132be:	0612      	lsls	r2, r2, #24
 80132c0:	4694      	mov	ip, r2
 80132c2:	9b08      	ldr	r3, [sp, #32]
 80132c4:	951e      	str	r5, [sp, #120]	; 0x78
 80132c6:	4463      	add	r3, ip
 80132c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80132ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80132cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80132ce:	9210      	str	r2, [sp, #64]	; 0x40
 80132d0:	9311      	str	r3, [sp, #68]	; 0x44
 80132d2:	e798      	b.n	8013206 <_strtod_l+0x9f6>
 80132d4:	2e01      	cmp	r6, #1
 80132d6:	d103      	bne.n	80132e0 <_strtod_l+0xad0>
 80132d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d100      	bne.n	80132e0 <_strtod_l+0xad0>
 80132de:	e562      	b.n	8012da6 <_strtod_l+0x596>
 80132e0:	2200      	movs	r2, #0
 80132e2:	4b58      	ldr	r3, [pc, #352]	; (8013444 <_strtod_l+0xc34>)
 80132e4:	2500      	movs	r5, #0
 80132e6:	9210      	str	r2, [sp, #64]	; 0x40
 80132e8:	9311      	str	r3, [sp, #68]	; 0x44
 80132ea:	e78a      	b.n	8013202 <_strtod_l+0x9f2>
 80132ec:	4b54      	ldr	r3, [pc, #336]	; (8013440 <_strtod_l+0xc30>)
 80132ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80132f0:	9308      	str	r3, [sp, #32]
 80132f2:	e7e3      	b.n	80132bc <_strtod_l+0xaac>
 80132f4:	4b52      	ldr	r3, [pc, #328]	; (8013440 <_strtod_l+0xc30>)
 80132f6:	9808      	ldr	r0, [sp, #32]
 80132f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132fa:	2200      	movs	r2, #0
 80132fc:	f7ee fd9a 	bl	8001e34 <__aeabi_dmul>
 8013300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013302:	0005      	movs	r5, r0
 8013304:	9108      	str	r1, [sp, #32]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d107      	bne.n	801331a <_strtod_l+0xb0a>
 801330a:	2380      	movs	r3, #128	; 0x80
 801330c:	061b      	lsls	r3, r3, #24
 801330e:	18cb      	adds	r3, r1, r3
 8013310:	9016      	str	r0, [sp, #88]	; 0x58
 8013312:	9317      	str	r3, [sp, #92]	; 0x5c
 8013314:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013318:	e7d9      	b.n	80132ce <_strtod_l+0xabe>
 801331a:	0002      	movs	r2, r0
 801331c:	9b08      	ldr	r3, [sp, #32]
 801331e:	9216      	str	r2, [sp, #88]	; 0x58
 8013320:	9317      	str	r3, [sp, #92]	; 0x5c
 8013322:	e7f7      	b.n	8013314 <_strtod_l+0xb04>
 8013324:	23d4      	movs	r3, #212	; 0xd4
 8013326:	049b      	lsls	r3, r3, #18
 8013328:	18cf      	adds	r7, r1, r3
 801332a:	9b06      	ldr	r3, [sp, #24]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d19f      	bne.n	8013270 <_strtod_l+0xa60>
 8013330:	4b3e      	ldr	r3, [pc, #248]	; (801342c <_strtod_l+0xc1c>)
 8013332:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013334:	970c      	str	r7, [sp, #48]	; 0x30
 8013336:	403b      	ands	r3, r7
 8013338:	429a      	cmp	r2, r3
 801333a:	d199      	bne.n	8013270 <_strtod_l+0xa60>
 801333c:	9908      	ldr	r1, [sp, #32]
 801333e:	0028      	movs	r0, r5
 8013340:	f7ef fb4e 	bl	80029e0 <__aeabi_d2iz>
 8013344:	f7ef fb82 	bl	8002a4c <__aeabi_i2d>
 8013348:	000b      	movs	r3, r1
 801334a:	0002      	movs	r2, r0
 801334c:	9908      	ldr	r1, [sp, #32]
 801334e:	0028      	movs	r0, r5
 8013350:	f7ee ffe2 	bl	8002318 <__aeabi_dsub>
 8013354:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013356:	9008      	str	r0, [sp, #32]
 8013358:	9109      	str	r1, [sp, #36]	; 0x24
 801335a:	2b00      	cmp	r3, #0
 801335c:	d104      	bne.n	8013368 <_strtod_l+0xb58>
 801335e:	2e00      	cmp	r6, #0
 8013360:	d102      	bne.n	8013368 <_strtod_l+0xb58>
 8013362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013364:	031b      	lsls	r3, r3, #12
 8013366:	d058      	beq.n	801341a <_strtod_l+0xc0a>
 8013368:	9808      	ldr	r0, [sp, #32]
 801336a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801336c:	4a36      	ldr	r2, [pc, #216]	; (8013448 <_strtod_l+0xc38>)
 801336e:	4b37      	ldr	r3, [pc, #220]	; (801344c <_strtod_l+0xc3c>)
 8013370:	f7ed f87a 	bl	8000468 <__aeabi_dcmplt>
 8013374:	2800      	cmp	r0, #0
 8013376:	d000      	beq.n	801337a <_strtod_l+0xb6a>
 8013378:	e489      	b.n	8012c8e <_strtod_l+0x47e>
 801337a:	9808      	ldr	r0, [sp, #32]
 801337c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801337e:	4a34      	ldr	r2, [pc, #208]	; (8013450 <_strtod_l+0xc40>)
 8013380:	4b2f      	ldr	r3, [pc, #188]	; (8013440 <_strtod_l+0xc30>)
 8013382:	f7ed f885 	bl	8000490 <__aeabi_dcmpgt>
 8013386:	2800      	cmp	r0, #0
 8013388:	d100      	bne.n	801338c <_strtod_l+0xb7c>
 801338a:	e771      	b.n	8013270 <_strtod_l+0xa60>
 801338c:	e47f      	b.n	8012c8e <_strtod_l+0x47e>
 801338e:	9b06      	ldr	r3, [sp, #24]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d02a      	beq.n	80133ea <_strtod_l+0xbda>
 8013394:	23d4      	movs	r3, #212	; 0xd4
 8013396:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013398:	04db      	lsls	r3, r3, #19
 801339a:	429a      	cmp	r2, r3
 801339c:	d825      	bhi.n	80133ea <_strtod_l+0xbda>
 801339e:	4a2d      	ldr	r2, [pc, #180]	; (8013454 <_strtod_l+0xc44>)
 80133a0:	4b2d      	ldr	r3, [pc, #180]	; (8013458 <_strtod_l+0xc48>)
 80133a2:	0028      	movs	r0, r5
 80133a4:	9908      	ldr	r1, [sp, #32]
 80133a6:	f7ed f869 	bl	800047c <__aeabi_dcmple>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d016      	beq.n	80133dc <_strtod_l+0xbcc>
 80133ae:	0028      	movs	r0, r5
 80133b0:	9908      	ldr	r1, [sp, #32]
 80133b2:	f7ed f91d 	bl	80005f0 <__aeabi_d2uiz>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d100      	bne.n	80133bc <_strtod_l+0xbac>
 80133ba:	3001      	adds	r0, #1
 80133bc:	f7ef fb80 	bl	8002ac0 <__aeabi_ui2d>
 80133c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133c2:	0005      	movs	r5, r0
 80133c4:	9108      	str	r1, [sp, #32]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d122      	bne.n	8013410 <_strtod_l+0xc00>
 80133ca:	2380      	movs	r3, #128	; 0x80
 80133cc:	061b      	lsls	r3, r3, #24
 80133ce:	18cb      	adds	r3, r1, r3
 80133d0:	9018      	str	r0, [sp, #96]	; 0x60
 80133d2:	9319      	str	r3, [sp, #100]	; 0x64
 80133d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80133d8:	9210      	str	r2, [sp, #64]	; 0x40
 80133da:	9311      	str	r3, [sp, #68]	; 0x44
 80133dc:	22d6      	movs	r2, #214	; 0xd6
 80133de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133e0:	04d2      	lsls	r2, r2, #19
 80133e2:	189b      	adds	r3, r3, r2
 80133e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133e6:	1a9b      	subs	r3, r3, r2
 80133e8:	9311      	str	r3, [sp, #68]	; 0x44
 80133ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80133ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80133ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80133f0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80133f2:	f003 f911 	bl	8016618 <__ulp>
 80133f6:	0002      	movs	r2, r0
 80133f8:	000b      	movs	r3, r1
 80133fa:	0030      	movs	r0, r6
 80133fc:	0039      	movs	r1, r7
 80133fe:	f7ee fd19 	bl	8001e34 <__aeabi_dmul>
 8013402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013406:	f7ed fdef 	bl	8000fe8 <__aeabi_dadd>
 801340a:	0006      	movs	r6, r0
 801340c:	000f      	movs	r7, r1
 801340e:	e78c      	b.n	801332a <_strtod_l+0xb1a>
 8013410:	0002      	movs	r2, r0
 8013412:	9b08      	ldr	r3, [sp, #32]
 8013414:	9218      	str	r2, [sp, #96]	; 0x60
 8013416:	9319      	str	r3, [sp, #100]	; 0x64
 8013418:	e7dc      	b.n	80133d4 <_strtod_l+0xbc4>
 801341a:	4a0b      	ldr	r2, [pc, #44]	; (8013448 <_strtod_l+0xc38>)
 801341c:	4b0f      	ldr	r3, [pc, #60]	; (801345c <_strtod_l+0xc4c>)
 801341e:	9808      	ldr	r0, [sp, #32]
 8013420:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013422:	f7ed f821 	bl	8000468 <__aeabi_dcmplt>
 8013426:	e7ae      	b.n	8013386 <_strtod_l+0xb76>
 8013428:	3ff00000 	.word	0x3ff00000
 801342c:	7ff00000 	.word	0x7ff00000
 8013430:	7fe00000 	.word	0x7fe00000
 8013434:	fcb00000 	.word	0xfcb00000
 8013438:	7c9fffff 	.word	0x7c9fffff
 801343c:	7fefffff 	.word	0x7fefffff
 8013440:	3fe00000 	.word	0x3fe00000
 8013444:	bff00000 	.word	0xbff00000
 8013448:	94a03595 	.word	0x94a03595
 801344c:	3fdfffff 	.word	0x3fdfffff
 8013450:	35afe535 	.word	0x35afe535
 8013454:	ffc00000 	.word	0xffc00000
 8013458:	41dfffff 	.word	0x41dfffff
 801345c:	3fcfffff 	.word	0x3fcfffff

08013460 <strtod>:
 8013460:	4b06      	ldr	r3, [pc, #24]	; (801347c <strtod+0x1c>)
 8013462:	b510      	push	{r4, lr}
 8013464:	0004      	movs	r4, r0
 8013466:	6818      	ldr	r0, [r3, #0]
 8013468:	000a      	movs	r2, r1
 801346a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801346c:	2b00      	cmp	r3, #0
 801346e:	d100      	bne.n	8013472 <strtod+0x12>
 8013470:	4b03      	ldr	r3, [pc, #12]	; (8013480 <strtod+0x20>)
 8013472:	0021      	movs	r1, r4
 8013474:	f7ff f9cc 	bl	8012810 <_strtod_l>
 8013478:	bd10      	pop	{r4, pc}
 801347a:	46c0      	nop			; (mov r8, r8)
 801347c:	200000cc 	.word	0x200000cc
 8013480:	200004f8 	.word	0x200004f8

08013484 <strtok>:
 8013484:	4b03      	ldr	r3, [pc, #12]	; (8013494 <strtok+0x10>)
 8013486:	b510      	push	{r4, lr}
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	2301      	movs	r3, #1
 801348c:	325c      	adds	r2, #92	; 0x5c
 801348e:	f000 f803 	bl	8013498 <__strtok_r>
 8013492:	bd10      	pop	{r4, pc}
 8013494:	200000cc 	.word	0x200000cc

08013498 <__strtok_r>:
 8013498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801349a:	2800      	cmp	r0, #0
 801349c:	d104      	bne.n	80134a8 <__strtok_r+0x10>
 801349e:	6810      	ldr	r0, [r2, #0]
 80134a0:	2800      	cmp	r0, #0
 80134a2:	d101      	bne.n	80134a8 <__strtok_r+0x10>
 80134a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a6:	0020      	movs	r0, r4
 80134a8:	000e      	movs	r6, r1
 80134aa:	7805      	ldrb	r5, [r0, #0]
 80134ac:	1c44      	adds	r4, r0, #1
 80134ae:	7837      	ldrb	r7, [r6, #0]
 80134b0:	2f00      	cmp	r7, #0
 80134b2:	d104      	bne.n	80134be <__strtok_r+0x26>
 80134b4:	2d00      	cmp	r5, #0
 80134b6:	d110      	bne.n	80134da <__strtok_r+0x42>
 80134b8:	6015      	str	r5, [r2, #0]
 80134ba:	0028      	movs	r0, r5
 80134bc:	e7f2      	b.n	80134a4 <__strtok_r+0xc>
 80134be:	3601      	adds	r6, #1
 80134c0:	42bd      	cmp	r5, r7
 80134c2:	d1f4      	bne.n	80134ae <__strtok_r+0x16>
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d1ee      	bne.n	80134a6 <__strtok_r+0xe>
 80134c8:	6014      	str	r4, [r2, #0]
 80134ca:	7003      	strb	r3, [r0, #0]
 80134cc:	e7ea      	b.n	80134a4 <__strtok_r+0xc>
 80134ce:	0033      	movs	r3, r6
 80134d0:	e00d      	b.n	80134ee <__strtok_r+0x56>
 80134d2:	3501      	adds	r5, #1
 80134d4:	2f00      	cmp	r7, #0
 80134d6:	d103      	bne.n	80134e0 <__strtok_r+0x48>
 80134d8:	001c      	movs	r4, r3
 80134da:	000d      	movs	r5, r1
 80134dc:	7826      	ldrb	r6, [r4, #0]
 80134de:	1c63      	adds	r3, r4, #1
 80134e0:	782f      	ldrb	r7, [r5, #0]
 80134e2:	42be      	cmp	r6, r7
 80134e4:	d1f5      	bne.n	80134d2 <__strtok_r+0x3a>
 80134e6:	2e00      	cmp	r6, #0
 80134e8:	d0f1      	beq.n	80134ce <__strtok_r+0x36>
 80134ea:	2100      	movs	r1, #0
 80134ec:	7021      	strb	r1, [r4, #0]
 80134ee:	6013      	str	r3, [r2, #0]
 80134f0:	e7d8      	b.n	80134a4 <__strtok_r+0xc>
	...

080134f4 <_strtol_l.isra.0>:
 80134f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134f6:	001f      	movs	r7, r3
 80134f8:	000e      	movs	r6, r1
 80134fa:	b087      	sub	sp, #28
 80134fc:	9005      	str	r0, [sp, #20]
 80134fe:	9101      	str	r1, [sp, #4]
 8013500:	9202      	str	r2, [sp, #8]
 8013502:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013504:	7834      	ldrb	r4, [r6, #0]
 8013506:	f7fe fc9f 	bl	8011e48 <__locale_ctype_ptr_l>
 801350a:	2208      	movs	r2, #8
 801350c:	1900      	adds	r0, r0, r4
 801350e:	7843      	ldrb	r3, [r0, #1]
 8013510:	1c75      	adds	r5, r6, #1
 8013512:	4013      	ands	r3, r2
 8013514:	d136      	bne.n	8013584 <_strtol_l.isra.0+0x90>
 8013516:	2c2d      	cmp	r4, #45	; 0x2d
 8013518:	d136      	bne.n	8013588 <_strtol_l.isra.0+0x94>
 801351a:	1cb5      	adds	r5, r6, #2
 801351c:	7874      	ldrb	r4, [r6, #1]
 801351e:	2601      	movs	r6, #1
 8013520:	2f00      	cmp	r7, #0
 8013522:	d062      	beq.n	80135ea <_strtol_l.isra.0+0xf6>
 8013524:	2f10      	cmp	r7, #16
 8013526:	d109      	bne.n	801353c <_strtol_l.isra.0+0x48>
 8013528:	2c30      	cmp	r4, #48	; 0x30
 801352a:	d107      	bne.n	801353c <_strtol_l.isra.0+0x48>
 801352c:	2220      	movs	r2, #32
 801352e:	782b      	ldrb	r3, [r5, #0]
 8013530:	4393      	bics	r3, r2
 8013532:	2b58      	cmp	r3, #88	; 0x58
 8013534:	d154      	bne.n	80135e0 <_strtol_l.isra.0+0xec>
 8013536:	2710      	movs	r7, #16
 8013538:	786c      	ldrb	r4, [r5, #1]
 801353a:	3502      	adds	r5, #2
 801353c:	4b2d      	ldr	r3, [pc, #180]	; (80135f4 <_strtol_l.isra.0+0x100>)
 801353e:	0039      	movs	r1, r7
 8013540:	18f3      	adds	r3, r6, r3
 8013542:	0018      	movs	r0, r3
 8013544:	9303      	str	r3, [sp, #12]
 8013546:	f7ec fe89 	bl	800025c <__aeabi_uidivmod>
 801354a:	9104      	str	r1, [sp, #16]
 801354c:	2101      	movs	r1, #1
 801354e:	2300      	movs	r3, #0
 8013550:	4249      	negs	r1, r1
 8013552:	0002      	movs	r2, r0
 8013554:	468c      	mov	ip, r1
 8013556:	0018      	movs	r0, r3
 8013558:	0021      	movs	r1, r4
 801355a:	3930      	subs	r1, #48	; 0x30
 801355c:	2909      	cmp	r1, #9
 801355e:	d81a      	bhi.n	8013596 <_strtol_l.isra.0+0xa2>
 8013560:	000c      	movs	r4, r1
 8013562:	42a7      	cmp	r7, r4
 8013564:	dd23      	ble.n	80135ae <_strtol_l.isra.0+0xba>
 8013566:	1c59      	adds	r1, r3, #1
 8013568:	d009      	beq.n	801357e <_strtol_l.isra.0+0x8a>
 801356a:	4663      	mov	r3, ip
 801356c:	4282      	cmp	r2, r0
 801356e:	d306      	bcc.n	801357e <_strtol_l.isra.0+0x8a>
 8013570:	d102      	bne.n	8013578 <_strtol_l.isra.0+0x84>
 8013572:	9904      	ldr	r1, [sp, #16]
 8013574:	42a1      	cmp	r1, r4
 8013576:	db02      	blt.n	801357e <_strtol_l.isra.0+0x8a>
 8013578:	2301      	movs	r3, #1
 801357a:	4378      	muls	r0, r7
 801357c:	1820      	adds	r0, r4, r0
 801357e:	782c      	ldrb	r4, [r5, #0]
 8013580:	3501      	adds	r5, #1
 8013582:	e7e9      	b.n	8013558 <_strtol_l.isra.0+0x64>
 8013584:	002e      	movs	r6, r5
 8013586:	e7bc      	b.n	8013502 <_strtol_l.isra.0+0xe>
 8013588:	2c2b      	cmp	r4, #43	; 0x2b
 801358a:	d001      	beq.n	8013590 <_strtol_l.isra.0+0x9c>
 801358c:	001e      	movs	r6, r3
 801358e:	e7c7      	b.n	8013520 <_strtol_l.isra.0+0x2c>
 8013590:	1cb5      	adds	r5, r6, #2
 8013592:	7874      	ldrb	r4, [r6, #1]
 8013594:	e7fa      	b.n	801358c <_strtol_l.isra.0+0x98>
 8013596:	0021      	movs	r1, r4
 8013598:	3941      	subs	r1, #65	; 0x41
 801359a:	2919      	cmp	r1, #25
 801359c:	d801      	bhi.n	80135a2 <_strtol_l.isra.0+0xae>
 801359e:	3c37      	subs	r4, #55	; 0x37
 80135a0:	e7df      	b.n	8013562 <_strtol_l.isra.0+0x6e>
 80135a2:	0021      	movs	r1, r4
 80135a4:	3961      	subs	r1, #97	; 0x61
 80135a6:	2919      	cmp	r1, #25
 80135a8:	d801      	bhi.n	80135ae <_strtol_l.isra.0+0xba>
 80135aa:	3c57      	subs	r4, #87	; 0x57
 80135ac:	e7d9      	b.n	8013562 <_strtol_l.isra.0+0x6e>
 80135ae:	1c5a      	adds	r2, r3, #1
 80135b0:	d108      	bne.n	80135c4 <_strtol_l.isra.0+0xd0>
 80135b2:	9a05      	ldr	r2, [sp, #20]
 80135b4:	3323      	adds	r3, #35	; 0x23
 80135b6:	6013      	str	r3, [r2, #0]
 80135b8:	9b02      	ldr	r3, [sp, #8]
 80135ba:	9803      	ldr	r0, [sp, #12]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d109      	bne.n	80135d4 <_strtol_l.isra.0+0xe0>
 80135c0:	b007      	add	sp, #28
 80135c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135c4:	2e00      	cmp	r6, #0
 80135c6:	d000      	beq.n	80135ca <_strtol_l.isra.0+0xd6>
 80135c8:	4240      	negs	r0, r0
 80135ca:	9a02      	ldr	r2, [sp, #8]
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	d0f7      	beq.n	80135c0 <_strtol_l.isra.0+0xcc>
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d001      	beq.n	80135d8 <_strtol_l.isra.0+0xe4>
 80135d4:	1e6b      	subs	r3, r5, #1
 80135d6:	9301      	str	r3, [sp, #4]
 80135d8:	9b02      	ldr	r3, [sp, #8]
 80135da:	9a01      	ldr	r2, [sp, #4]
 80135dc:	601a      	str	r2, [r3, #0]
 80135de:	e7ef      	b.n	80135c0 <_strtol_l.isra.0+0xcc>
 80135e0:	2430      	movs	r4, #48	; 0x30
 80135e2:	2f00      	cmp	r7, #0
 80135e4:	d1aa      	bne.n	801353c <_strtol_l.isra.0+0x48>
 80135e6:	2708      	movs	r7, #8
 80135e8:	e7a8      	b.n	801353c <_strtol_l.isra.0+0x48>
 80135ea:	2c30      	cmp	r4, #48	; 0x30
 80135ec:	d09e      	beq.n	801352c <_strtol_l.isra.0+0x38>
 80135ee:	270a      	movs	r7, #10
 80135f0:	e7a4      	b.n	801353c <_strtol_l.isra.0+0x48>
 80135f2:	46c0      	nop			; (mov r8, r8)
 80135f4:	7fffffff 	.word	0x7fffffff

080135f8 <strtol>:
 80135f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135fa:	0013      	movs	r3, r2
 80135fc:	4a06      	ldr	r2, [pc, #24]	; (8013618 <strtol+0x20>)
 80135fe:	0005      	movs	r5, r0
 8013600:	6810      	ldr	r0, [r2, #0]
 8013602:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013604:	2c00      	cmp	r4, #0
 8013606:	d100      	bne.n	801360a <strtol+0x12>
 8013608:	4c04      	ldr	r4, [pc, #16]	; (801361c <strtol+0x24>)
 801360a:	000a      	movs	r2, r1
 801360c:	9400      	str	r4, [sp, #0]
 801360e:	0029      	movs	r1, r5
 8013610:	f7ff ff70 	bl	80134f4 <_strtol_l.isra.0>
 8013614:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013616:	46c0      	nop			; (mov r8, r8)
 8013618:	200000cc 	.word	0x200000cc
 801361c:	200004f8 	.word	0x200004f8

08013620 <_svfprintf_r>:
 8013620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013622:	b0d9      	sub	sp, #356	; 0x164
 8013624:	910b      	str	r1, [sp, #44]	; 0x2c
 8013626:	9209      	str	r2, [sp, #36]	; 0x24
 8013628:	001c      	movs	r4, r3
 801362a:	900a      	str	r0, [sp, #40]	; 0x28
 801362c:	f002 fd26 	bl	801607c <_localeconv_r>
 8013630:	6803      	ldr	r3, [r0, #0]
 8013632:	0018      	movs	r0, r3
 8013634:	931c      	str	r3, [sp, #112]	; 0x70
 8013636:	f7ec fd6f 	bl	8000118 <strlen>
 801363a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801363c:	9014      	str	r0, [sp, #80]	; 0x50
 801363e:	899b      	ldrh	r3, [r3, #12]
 8013640:	061b      	lsls	r3, r3, #24
 8013642:	d518      	bpl.n	8013676 <_svfprintf_r+0x56>
 8013644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	9308      	str	r3, [sp, #32]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d113      	bne.n	8013676 <_svfprintf_r+0x56>
 801364e:	2140      	movs	r1, #64	; 0x40
 8013650:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013652:	f7fe fc1f 	bl	8011e94 <_malloc_r>
 8013656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013658:	6018      	str	r0, [r3, #0]
 801365a:	6118      	str	r0, [r3, #16]
 801365c:	2800      	cmp	r0, #0
 801365e:	d107      	bne.n	8013670 <_svfprintf_r+0x50>
 8013660:	230c      	movs	r3, #12
 8013662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013664:	6013      	str	r3, [r2, #0]
 8013666:	3b0d      	subs	r3, #13
 8013668:	9315      	str	r3, [sp, #84]	; 0x54
 801366a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801366c:	b059      	add	sp, #356	; 0x164
 801366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013670:	2340      	movs	r3, #64	; 0x40
 8013672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013674:	6153      	str	r3, [r2, #20]
 8013676:	2600      	movs	r6, #0
 8013678:	af2f      	add	r7, sp, #188	; 0xbc
 801367a:	972c      	str	r7, [sp, #176]	; 0xb0
 801367c:	962e      	str	r6, [sp, #184]	; 0xb8
 801367e:	962d      	str	r6, [sp, #180]	; 0xb4
 8013680:	960d      	str	r6, [sp, #52]	; 0x34
 8013682:	961a      	str	r6, [sp, #104]	; 0x68
 8013684:	9619      	str	r6, [sp, #100]	; 0x64
 8013686:	961e      	str	r6, [sp, #120]	; 0x78
 8013688:	961d      	str	r6, [sp, #116]	; 0x74
 801368a:	9613      	str	r6, [sp, #76]	; 0x4c
 801368c:	961b      	str	r6, [sp, #108]	; 0x6c
 801368e:	961f      	str	r6, [sp, #124]	; 0x7c
 8013690:	9615      	str	r6, [sp, #84]	; 0x54
 8013692:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013694:	782b      	ldrb	r3, [r5, #0]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d002      	beq.n	80136a0 <_svfprintf_r+0x80>
 801369a:	2b25      	cmp	r3, #37	; 0x25
 801369c:	d000      	beq.n	80136a0 <_svfprintf_r+0x80>
 801369e:	e095      	b.n	80137cc <_svfprintf_r+0x1ac>
 80136a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136a2:	1aee      	subs	r6, r5, r3
 80136a4:	d017      	beq.n	80136d6 <_svfprintf_r+0xb6>
 80136a6:	603b      	str	r3, [r7, #0]
 80136a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80136aa:	607e      	str	r6, [r7, #4]
 80136ac:	199b      	adds	r3, r3, r6
 80136ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80136b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80136b2:	3708      	adds	r7, #8
 80136b4:	9308      	str	r3, [sp, #32]
 80136b6:	3301      	adds	r3, #1
 80136b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80136ba:	2b07      	cmp	r3, #7
 80136bc:	dd08      	ble.n	80136d0 <_svfprintf_r+0xb0>
 80136be:	aa2c      	add	r2, sp, #176	; 0xb0
 80136c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80136c4:	f003 f900 	bl	80168c8 <__ssprint_r>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d000      	beq.n	80136ce <_svfprintf_r+0xae>
 80136cc:	e2d9      	b.n	8013c82 <_svfprintf_r+0x662>
 80136ce:	af2f      	add	r7, sp, #188	; 0xbc
 80136d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136d2:	199b      	adds	r3, r3, r6
 80136d4:	9315      	str	r3, [sp, #84]	; 0x54
 80136d6:	782b      	ldrb	r3, [r5, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d101      	bne.n	80136e0 <_svfprintf_r+0xc0>
 80136dc:	f001 f9e5 	bl	8014aaa <_svfprintf_r+0x148a>
 80136e0:	1c6b      	adds	r3, r5, #1
 80136e2:	221b      	movs	r2, #27
 80136e4:	9311      	str	r3, [sp, #68]	; 0x44
 80136e6:	2300      	movs	r3, #0
 80136e8:	a91e      	add	r1, sp, #120	; 0x78
 80136ea:	1852      	adds	r2, r2, r1
 80136ec:	7013      	strb	r3, [r2, #0]
 80136ee:	2201      	movs	r2, #1
 80136f0:	001e      	movs	r6, r3
 80136f2:	2520      	movs	r5, #32
 80136f4:	4252      	negs	r2, r2
 80136f6:	9208      	str	r2, [sp, #32]
 80136f8:	9316      	str	r3, [sp, #88]	; 0x58
 80136fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	930e      	str	r3, [sp, #56]	; 0x38
 8013700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013702:	3301      	adds	r3, #1
 8013704:	9311      	str	r3, [sp, #68]	; 0x44
 8013706:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013708:	3820      	subs	r0, #32
 801370a:	285a      	cmp	r0, #90	; 0x5a
 801370c:	d901      	bls.n	8013712 <_svfprintf_r+0xf2>
 801370e:	f000 fe3d 	bl	801438c <_svfprintf_r+0xd6c>
 8013712:	f7ec fd13 	bl	800013c <__gnu_thumb1_case_shi>
 8013716:	009e      	.short	0x009e
 8013718:	063b063b 	.word	0x063b063b
 801371c:	063b00a7 	.word	0x063b00a7
 8013720:	063b063b 	.word	0x063b063b
 8013724:	063b0080 	.word	0x063b0080
 8013728:	00a9063b 	.word	0x00a9063b
 801372c:	063b00b3 	.word	0x063b00b3
 8013730:	00b900b1 	.word	0x00b900b1
 8013734:	00dd063b 	.word	0x00dd063b
 8013738:	00df00df 	.word	0x00df00df
 801373c:	00df00df 	.word	0x00df00df
 8013740:	00df00df 	.word	0x00df00df
 8013744:	00df00df 	.word	0x00df00df
 8013748:	063b00df 	.word	0x063b00df
 801374c:	063b063b 	.word	0x063b063b
 8013750:	063b063b 	.word	0x063b063b
 8013754:	063b063b 	.word	0x063b063b
 8013758:	063b0240 	.word	0x063b0240
 801375c:	01fd010a 	.word	0x01fd010a
 8013760:	02400240 	.word	0x02400240
 8013764:	063b0240 	.word	0x063b0240
 8013768:	063b063b 	.word	0x063b063b
 801376c:	00f1063b 	.word	0x00f1063b
 8013770:	063b063b 	.word	0x063b063b
 8013774:	063b04e2 	.word	0x063b04e2
 8013778:	063b063b 	.word	0x063b063b
 801377c:	063b0537 	.word	0x063b0537
 8013780:	063b0557 	.word	0x063b0557
 8013784:	005d063b 	.word	0x005d063b
 8013788:	063b063b 	.word	0x063b063b
 801378c:	063b063b 	.word	0x063b063b
 8013790:	063b063b 	.word	0x063b063b
 8013794:	063b063b 	.word	0x063b063b
 8013798:	063b0240 	.word	0x063b0240
 801379c:	01ff010a 	.word	0x01ff010a
 80137a0:	02400240 	.word	0x02400240
 80137a4:	00f30240 	.word	0x00f30240
 80137a8:	010601ff 	.word	0x010601ff
 80137ac:	00ff063b 	.word	0x00ff063b
 80137b0:	04c5063b 	.word	0x04c5063b
 80137b4:	052704e4 	.word	0x052704e4
 80137b8:	063b0106 	.word	0x063b0106
 80137bc:	fff20537 	.word	0xfff20537
 80137c0:	063b0559 	.word	0x063b0559
 80137c4:	0582063b 	.word	0x0582063b
 80137c8:	fff2063b 	.word	0xfff2063b
 80137cc:	3501      	adds	r5, #1
 80137ce:	e761      	b.n	8013694 <_svfprintf_r+0x74>
 80137d0:	4bcb      	ldr	r3, [pc, #812]	; (8013b00 <_svfprintf_r+0x4e0>)
 80137d2:	2220      	movs	r2, #32
 80137d4:	931e      	str	r3, [sp, #120]	; 0x78
 80137d6:	4032      	ands	r2, r6
 80137d8:	d101      	bne.n	80137de <_svfprintf_r+0x1be>
 80137da:	f000 fd21 	bl	8014220 <_svfprintf_r+0xc00>
 80137de:	2307      	movs	r3, #7
 80137e0:	3407      	adds	r4, #7
 80137e2:	439c      	bics	r4, r3
 80137e4:	0023      	movs	r3, r4
 80137e6:	3308      	adds	r3, #8
 80137e8:	9312      	str	r3, [sp, #72]	; 0x48
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	6864      	ldr	r4, [r4, #4]
 80137ee:	9306      	str	r3, [sp, #24]
 80137f0:	9407      	str	r4, [sp, #28]
 80137f2:	07f3      	lsls	r3, r6, #31
 80137f4:	d50a      	bpl.n	801380c <_svfprintf_r+0x1ec>
 80137f6:	9b06      	ldr	r3, [sp, #24]
 80137f8:	9a07      	ldr	r2, [sp, #28]
 80137fa:	4313      	orrs	r3, r2
 80137fc:	d006      	beq.n	801380c <_svfprintf_r+0x1ec>
 80137fe:	2230      	movs	r2, #48	; 0x30
 8013800:	ab25      	add	r3, sp, #148	; 0x94
 8013802:	701a      	strb	r2, [r3, #0]
 8013804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013806:	705a      	strb	r2, [r3, #1]
 8013808:	2302      	movs	r3, #2
 801380a:	431e      	orrs	r6, r3
 801380c:	4bbd      	ldr	r3, [pc, #756]	; (8013b04 <_svfprintf_r+0x4e4>)
 801380e:	401e      	ands	r6, r3
 8013810:	2302      	movs	r3, #2
 8013812:	f000 fc74 	bl	80140fe <_svfprintf_r+0xade>
 8013816:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013818:	f002 fc30 	bl	801607c <_localeconv_r>
 801381c:	6843      	ldr	r3, [r0, #4]
 801381e:	0018      	movs	r0, r3
 8013820:	931f      	str	r3, [sp, #124]	; 0x7c
 8013822:	f7ec fc79 	bl	8000118 <strlen>
 8013826:	901b      	str	r0, [sp, #108]	; 0x6c
 8013828:	980a      	ldr	r0, [sp, #40]	; 0x28
 801382a:	f002 fc27 	bl	801607c <_localeconv_r>
 801382e:	6883      	ldr	r3, [r0, #8]
 8013830:	9313      	str	r3, [sp, #76]	; 0x4c
 8013832:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013834:	2b00      	cmp	r3, #0
 8013836:	d100      	bne.n	801383a <_svfprintf_r+0x21a>
 8013838:	e75f      	b.n	80136fa <_svfprintf_r+0xda>
 801383a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d100      	bne.n	8013842 <_svfprintf_r+0x222>
 8013840:	e75b      	b.n	80136fa <_svfprintf_r+0xda>
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d100      	bne.n	801384a <_svfprintf_r+0x22a>
 8013848:	e757      	b.n	80136fa <_svfprintf_r+0xda>
 801384a:	2380      	movs	r3, #128	; 0x80
 801384c:	00db      	lsls	r3, r3, #3
 801384e:	431e      	orrs	r6, r3
 8013850:	e753      	b.n	80136fa <_svfprintf_r+0xda>
 8013852:	231b      	movs	r3, #27
 8013854:	aa1e      	add	r2, sp, #120	; 0x78
 8013856:	189b      	adds	r3, r3, r2
 8013858:	781a      	ldrb	r2, [r3, #0]
 801385a:	2a00      	cmp	r2, #0
 801385c:	d000      	beq.n	8013860 <_svfprintf_r+0x240>
 801385e:	e74c      	b.n	80136fa <_svfprintf_r+0xda>
 8013860:	701d      	strb	r5, [r3, #0]
 8013862:	e74a      	b.n	80136fa <_svfprintf_r+0xda>
 8013864:	2301      	movs	r3, #1
 8013866:	e7f2      	b.n	801384e <_svfprintf_r+0x22e>
 8013868:	6823      	ldr	r3, [r4, #0]
 801386a:	3404      	adds	r4, #4
 801386c:	9316      	str	r3, [sp, #88]	; 0x58
 801386e:	2b00      	cmp	r3, #0
 8013870:	db00      	blt.n	8013874 <_svfprintf_r+0x254>
 8013872:	e742      	b.n	80136fa <_svfprintf_r+0xda>
 8013874:	425b      	negs	r3, r3
 8013876:	9316      	str	r3, [sp, #88]	; 0x58
 8013878:	2304      	movs	r3, #4
 801387a:	e7e8      	b.n	801384e <_svfprintf_r+0x22e>
 801387c:	231b      	movs	r3, #27
 801387e:	aa1e      	add	r2, sp, #120	; 0x78
 8013880:	189b      	adds	r3, r3, r2
 8013882:	222b      	movs	r2, #43	; 0x2b
 8013884:	701a      	strb	r2, [r3, #0]
 8013886:	e738      	b.n	80136fa <_svfprintf_r+0xda>
 8013888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801388a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801388c:	7812      	ldrb	r2, [r2, #0]
 801388e:	3301      	adds	r3, #1
 8013890:	920e      	str	r2, [sp, #56]	; 0x38
 8013892:	2a2a      	cmp	r2, #42	; 0x2a
 8013894:	d008      	beq.n	80138a8 <_svfprintf_r+0x288>
 8013896:	2200      	movs	r2, #0
 8013898:	9208      	str	r2, [sp, #32]
 801389a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801389c:	001a      	movs	r2, r3
 801389e:	3930      	subs	r1, #48	; 0x30
 80138a0:	2909      	cmp	r1, #9
 80138a2:	d90c      	bls.n	80138be <_svfprintf_r+0x29e>
 80138a4:	9211      	str	r2, [sp, #68]	; 0x44
 80138a6:	e72e      	b.n	8013706 <_svfprintf_r+0xe6>
 80138a8:	6821      	ldr	r1, [r4, #0]
 80138aa:	1d22      	adds	r2, r4, #4
 80138ac:	9108      	str	r1, [sp, #32]
 80138ae:	2900      	cmp	r1, #0
 80138b0:	da02      	bge.n	80138b8 <_svfprintf_r+0x298>
 80138b2:	2101      	movs	r1, #1
 80138b4:	4249      	negs	r1, r1
 80138b6:	9108      	str	r1, [sp, #32]
 80138b8:	0014      	movs	r4, r2
 80138ba:	9311      	str	r3, [sp, #68]	; 0x44
 80138bc:	e71d      	b.n	80136fa <_svfprintf_r+0xda>
 80138be:	200a      	movs	r0, #10
 80138c0:	9a08      	ldr	r2, [sp, #32]
 80138c2:	4342      	muls	r2, r0
 80138c4:	1852      	adds	r2, r2, r1
 80138c6:	9208      	str	r2, [sp, #32]
 80138c8:	781a      	ldrb	r2, [r3, #0]
 80138ca:	3301      	adds	r3, #1
 80138cc:	920e      	str	r2, [sp, #56]	; 0x38
 80138ce:	e7e4      	b.n	801389a <_svfprintf_r+0x27a>
 80138d0:	2380      	movs	r3, #128	; 0x80
 80138d2:	e7bc      	b.n	801384e <_svfprintf_r+0x22e>
 80138d4:	2300      	movs	r3, #0
 80138d6:	9316      	str	r3, [sp, #88]	; 0x58
 80138d8:	220a      	movs	r2, #10
 80138da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80138dc:	4353      	muls	r3, r2
 80138de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138e0:	3a30      	subs	r2, #48	; 0x30
 80138e2:	18d3      	adds	r3, r2, r3
 80138e4:	9316      	str	r3, [sp, #88]	; 0x58
 80138e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138e8:	1c5a      	adds	r2, r3, #1
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	9211      	str	r2, [sp, #68]	; 0x44
 80138ee:	930e      	str	r3, [sp, #56]	; 0x38
 80138f0:	3b30      	subs	r3, #48	; 0x30
 80138f2:	2b09      	cmp	r3, #9
 80138f4:	d9f0      	bls.n	80138d8 <_svfprintf_r+0x2b8>
 80138f6:	e7d5      	b.n	80138a4 <_svfprintf_r+0x284>
 80138f8:	2308      	movs	r3, #8
 80138fa:	e7a8      	b.n	801384e <_svfprintf_r+0x22e>
 80138fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b68      	cmp	r3, #104	; 0x68
 8013902:	d105      	bne.n	8013910 <_svfprintf_r+0x2f0>
 8013904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013906:	3301      	adds	r3, #1
 8013908:	9311      	str	r3, [sp, #68]	; 0x44
 801390a:	2380      	movs	r3, #128	; 0x80
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	e79e      	b.n	801384e <_svfprintf_r+0x22e>
 8013910:	2340      	movs	r3, #64	; 0x40
 8013912:	e79c      	b.n	801384e <_svfprintf_r+0x22e>
 8013914:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	2b6c      	cmp	r3, #108	; 0x6c
 801391a:	d104      	bne.n	8013926 <_svfprintf_r+0x306>
 801391c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801391e:	3301      	adds	r3, #1
 8013920:	9311      	str	r3, [sp, #68]	; 0x44
 8013922:	432e      	orrs	r6, r5
 8013924:	e6e9      	b.n	80136fa <_svfprintf_r+0xda>
 8013926:	2310      	movs	r3, #16
 8013928:	e791      	b.n	801384e <_svfprintf_r+0x22e>
 801392a:	1d23      	adds	r3, r4, #4
 801392c:	6822      	ldr	r2, [r4, #0]
 801392e:	9312      	str	r3, [sp, #72]	; 0x48
 8013930:	ab3f      	add	r3, sp, #252	; 0xfc
 8013932:	701a      	strb	r2, [r3, #0]
 8013934:	221b      	movs	r2, #27
 8013936:	2000      	movs	r0, #0
 8013938:	a91e      	add	r1, sp, #120	; 0x78
 801393a:	1852      	adds	r2, r2, r1
 801393c:	7010      	strb	r0, [r2, #0]
 801393e:	2201      	movs	r2, #1
 8013940:	0005      	movs	r5, r0
 8013942:	900c      	str	r0, [sp, #48]	; 0x30
 8013944:	9208      	str	r2, [sp, #32]
 8013946:	9017      	str	r0, [sp, #92]	; 0x5c
 8013948:	9010      	str	r0, [sp, #64]	; 0x40
 801394a:	900f      	str	r0, [sp, #60]	; 0x3c
 801394c:	9309      	str	r3, [sp, #36]	; 0x24
 801394e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013950:	9a08      	ldr	r2, [sp, #32]
 8013952:	9318      	str	r3, [sp, #96]	; 0x60
 8013954:	4293      	cmp	r3, r2
 8013956:	da00      	bge.n	801395a <_svfprintf_r+0x33a>
 8013958:	9218      	str	r2, [sp, #96]	; 0x60
 801395a:	231b      	movs	r3, #27
 801395c:	aa1e      	add	r2, sp, #120	; 0x78
 801395e:	189b      	adds	r3, r3, r2
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	1e5a      	subs	r2, r3, #1
 8013964:	4193      	sbcs	r3, r2
 8013966:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013968:	18d3      	adds	r3, r2, r3
 801396a:	9318      	str	r3, [sp, #96]	; 0x60
 801396c:	2302      	movs	r3, #2
 801396e:	4033      	ands	r3, r6
 8013970:	9320      	str	r3, [sp, #128]	; 0x80
 8013972:	d002      	beq.n	801397a <_svfprintf_r+0x35a>
 8013974:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013976:	3302      	adds	r3, #2
 8013978:	9318      	str	r3, [sp, #96]	; 0x60
 801397a:	2384      	movs	r3, #132	; 0x84
 801397c:	4033      	ands	r3, r6
 801397e:	9321      	str	r3, [sp, #132]	; 0x84
 8013980:	d121      	bne.n	80139c6 <_svfprintf_r+0x3a6>
 8013982:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013984:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013986:	1a9c      	subs	r4, r3, r2
 8013988:	2c00      	cmp	r4, #0
 801398a:	dd1c      	ble.n	80139c6 <_svfprintf_r+0x3a6>
 801398c:	0039      	movs	r1, r7
 801398e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013990:	485d      	ldr	r0, [pc, #372]	; (8013b08 <_svfprintf_r+0x4e8>)
 8013992:	9322      	str	r3, [sp, #136]	; 0x88
 8013994:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013996:	3301      	adds	r3, #1
 8013998:	3108      	adds	r1, #8
 801399a:	6038      	str	r0, [r7, #0]
 801399c:	2c10      	cmp	r4, #16
 801399e:	dd01      	ble.n	80139a4 <_svfprintf_r+0x384>
 80139a0:	f000 fd08 	bl	80143b4 <_svfprintf_r+0xd94>
 80139a4:	607c      	str	r4, [r7, #4]
 80139a6:	18a4      	adds	r4, r4, r2
 80139a8:	942e      	str	r4, [sp, #184]	; 0xb8
 80139aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80139ac:	000f      	movs	r7, r1
 80139ae:	2b07      	cmp	r3, #7
 80139b0:	dd09      	ble.n	80139c6 <_svfprintf_r+0x3a6>
 80139b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80139b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139b8:	f002 ff86 	bl	80168c8 <__ssprint_r>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d001      	beq.n	80139c4 <_svfprintf_r+0x3a4>
 80139c0:	f001 f852 	bl	8014a68 <_svfprintf_r+0x1448>
 80139c4:	af2f      	add	r7, sp, #188	; 0xbc
 80139c6:	231b      	movs	r3, #27
 80139c8:	aa1e      	add	r2, sp, #120	; 0x78
 80139ca:	189b      	adds	r3, r3, r2
 80139cc:	781a      	ldrb	r2, [r3, #0]
 80139ce:	2a00      	cmp	r2, #0
 80139d0:	d017      	beq.n	8013a02 <_svfprintf_r+0x3e2>
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	2301      	movs	r3, #1
 80139d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80139d8:	607b      	str	r3, [r7, #4]
 80139da:	0013      	movs	r3, r2
 80139dc:	3301      	adds	r3, #1
 80139de:	932e      	str	r3, [sp, #184]	; 0xb8
 80139e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80139e2:	3708      	adds	r7, #8
 80139e4:	9322      	str	r3, [sp, #136]	; 0x88
 80139e6:	3301      	adds	r3, #1
 80139e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80139ea:	2b07      	cmp	r3, #7
 80139ec:	dd09      	ble.n	8013a02 <_svfprintf_r+0x3e2>
 80139ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80139f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139f4:	f002 ff68 	bl	80168c8 <__ssprint_r>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d001      	beq.n	8013a00 <_svfprintf_r+0x3e0>
 80139fc:	f001 f834 	bl	8014a68 <_svfprintf_r+0x1448>
 8013a00:	af2f      	add	r7, sp, #188	; 0xbc
 8013a02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d019      	beq.n	8013a3c <_svfprintf_r+0x41c>
 8013a08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013a0a:	9320      	str	r3, [sp, #128]	; 0x80
 8013a0c:	ab25      	add	r3, sp, #148	; 0x94
 8013a0e:	603b      	str	r3, [r7, #0]
 8013a10:	2302      	movs	r3, #2
 8013a12:	607b      	str	r3, [r7, #4]
 8013a14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013a16:	3708      	adds	r7, #8
 8013a18:	3302      	adds	r3, #2
 8013a1a:	932e      	str	r3, [sp, #184]	; 0xb8
 8013a1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013a1e:	9320      	str	r3, [sp, #128]	; 0x80
 8013a20:	3301      	adds	r3, #1
 8013a22:	932d      	str	r3, [sp, #180]	; 0xb4
 8013a24:	2b07      	cmp	r3, #7
 8013a26:	dd09      	ble.n	8013a3c <_svfprintf_r+0x41c>
 8013a28:	aa2c      	add	r2, sp, #176	; 0xb0
 8013a2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a2e:	f002 ff4b 	bl	80168c8 <__ssprint_r>
 8013a32:	2800      	cmp	r0, #0
 8013a34:	d001      	beq.n	8013a3a <_svfprintf_r+0x41a>
 8013a36:	f001 f817 	bl	8014a68 <_svfprintf_r+0x1448>
 8013a3a:	af2f      	add	r7, sp, #188	; 0xbc
 8013a3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a3e:	2b80      	cmp	r3, #128	; 0x80
 8013a40:	d121      	bne.n	8013a86 <_svfprintf_r+0x466>
 8013a42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a46:	1a9c      	subs	r4, r3, r2
 8013a48:	2c00      	cmp	r4, #0
 8013a4a:	dd1c      	ble.n	8013a86 <_svfprintf_r+0x466>
 8013a4c:	0039      	movs	r1, r7
 8013a4e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013a50:	482e      	ldr	r0, [pc, #184]	; (8013b0c <_svfprintf_r+0x4ec>)
 8013a52:	9320      	str	r3, [sp, #128]	; 0x80
 8013a54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013a56:	3301      	adds	r3, #1
 8013a58:	3108      	adds	r1, #8
 8013a5a:	6038      	str	r0, [r7, #0]
 8013a5c:	2c10      	cmp	r4, #16
 8013a5e:	dd01      	ble.n	8013a64 <_svfprintf_r+0x444>
 8013a60:	f000 fcbc 	bl	80143dc <_svfprintf_r+0xdbc>
 8013a64:	607c      	str	r4, [r7, #4]
 8013a66:	18a4      	adds	r4, r4, r2
 8013a68:	942e      	str	r4, [sp, #184]	; 0xb8
 8013a6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8013a6c:	000f      	movs	r7, r1
 8013a6e:	2b07      	cmp	r3, #7
 8013a70:	dd09      	ble.n	8013a86 <_svfprintf_r+0x466>
 8013a72:	aa2c      	add	r2, sp, #176	; 0xb0
 8013a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a78:	f002 ff26 	bl	80168c8 <__ssprint_r>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	d001      	beq.n	8013a84 <_svfprintf_r+0x464>
 8013a80:	f000 fff2 	bl	8014a68 <_svfprintf_r+0x1448>
 8013a84:	af2f      	add	r7, sp, #188	; 0xbc
 8013a86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a88:	9a08      	ldr	r2, [sp, #32]
 8013a8a:	1a9c      	subs	r4, r3, r2
 8013a8c:	2c00      	cmp	r4, #0
 8013a8e:	dd1c      	ble.n	8013aca <_svfprintf_r+0x4aa>
 8013a90:	0039      	movs	r1, r7
 8013a92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013a94:	481d      	ldr	r0, [pc, #116]	; (8013b0c <_svfprintf_r+0x4ec>)
 8013a96:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a98:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	3108      	adds	r1, #8
 8013a9e:	6038      	str	r0, [r7, #0]
 8013aa0:	2c10      	cmp	r4, #16
 8013aa2:	dd01      	ble.n	8013aa8 <_svfprintf_r+0x488>
 8013aa4:	f000 fcb4 	bl	8014410 <_svfprintf_r+0xdf0>
 8013aa8:	18a2      	adds	r2, r4, r2
 8013aaa:	607c      	str	r4, [r7, #4]
 8013aac:	922e      	str	r2, [sp, #184]	; 0xb8
 8013aae:	932d      	str	r3, [sp, #180]	; 0xb4
 8013ab0:	000f      	movs	r7, r1
 8013ab2:	2b07      	cmp	r3, #7
 8013ab4:	dd09      	ble.n	8013aca <_svfprintf_r+0x4aa>
 8013ab6:	aa2c      	add	r2, sp, #176	; 0xb0
 8013ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013aba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013abc:	f002 ff04 	bl	80168c8 <__ssprint_r>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d001      	beq.n	8013ac8 <_svfprintf_r+0x4a8>
 8013ac4:	f000 ffd0 	bl	8014a68 <_svfprintf_r+0x1448>
 8013ac8:	af2f      	add	r7, sp, #188	; 0xbc
 8013aca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013acc:	9317      	str	r3, [sp, #92]	; 0x5c
 8013ace:	05f3      	lsls	r3, r6, #23
 8013ad0:	d501      	bpl.n	8013ad6 <_svfprintf_r+0x4b6>
 8013ad2:	f000 fcb1 	bl	8014438 <_svfprintf_r+0xe18>
 8013ad6:	9a08      	ldr	r2, [sp, #32]
 8013ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ada:	4694      	mov	ip, r2
 8013adc:	603b      	str	r3, [r7, #0]
 8013ade:	9b08      	ldr	r3, [sp, #32]
 8013ae0:	607b      	str	r3, [r7, #4]
 8013ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013ae4:	4463      	add	r3, ip
 8013ae6:	932e      	str	r3, [sp, #184]	; 0xb8
 8013ae8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013aea:	9308      	str	r3, [sp, #32]
 8013aec:	3301      	adds	r3, #1
 8013aee:	932d      	str	r3, [sp, #180]	; 0xb4
 8013af0:	2b07      	cmp	r3, #7
 8013af2:	dd01      	ble.n	8013af8 <_svfprintf_r+0x4d8>
 8013af4:	f000 fd94 	bl	8014620 <_svfprintf_r+0x1000>
 8013af8:	3708      	adds	r7, #8
 8013afa:	f000 fce4 	bl	80144c6 <_svfprintf_r+0xea6>
 8013afe:	46c0      	nop			; (mov r8, r8)
 8013b00:	080199d1 	.word	0x080199d1
 8013b04:	fffffbff 	.word	0xfffffbff
 8013b08:	080199e4 	.word	0x080199e4
 8013b0c:	080199f4 	.word	0x080199f4
 8013b10:	2310      	movs	r3, #16
 8013b12:	431e      	orrs	r6, r3
 8013b14:	06b3      	lsls	r3, r6, #26
 8013b16:	d52c      	bpl.n	8013b72 <_svfprintf_r+0x552>
 8013b18:	2307      	movs	r3, #7
 8013b1a:	3407      	adds	r4, #7
 8013b1c:	439c      	bics	r4, r3
 8013b1e:	0023      	movs	r3, r4
 8013b20:	3308      	adds	r3, #8
 8013b22:	9312      	str	r3, [sp, #72]	; 0x48
 8013b24:	6823      	ldr	r3, [r4, #0]
 8013b26:	6864      	ldr	r4, [r4, #4]
 8013b28:	9306      	str	r3, [sp, #24]
 8013b2a:	9407      	str	r4, [sp, #28]
 8013b2c:	9b07      	ldr	r3, [sp, #28]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	da0b      	bge.n	8013b4a <_svfprintf_r+0x52a>
 8013b32:	9906      	ldr	r1, [sp, #24]
 8013b34:	9a07      	ldr	r2, [sp, #28]
 8013b36:	2400      	movs	r4, #0
 8013b38:	424b      	negs	r3, r1
 8013b3a:	4194      	sbcs	r4, r2
 8013b3c:	9306      	str	r3, [sp, #24]
 8013b3e:	9407      	str	r4, [sp, #28]
 8013b40:	231b      	movs	r3, #27
 8013b42:	aa1e      	add	r2, sp, #120	; 0x78
 8013b44:	189b      	adds	r3, r3, r2
 8013b46:	222d      	movs	r2, #45	; 0x2d
 8013b48:	701a      	strb	r2, [r3, #0]
 8013b4a:	9b08      	ldr	r3, [sp, #32]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	d000      	beq.n	8013b52 <_svfprintf_r+0x532>
 8013b50:	e382      	b.n	8014258 <_svfprintf_r+0xc38>
 8013b52:	9b07      	ldr	r3, [sp, #28]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d000      	beq.n	8013b5a <_svfprintf_r+0x53a>
 8013b58:	e3b0      	b.n	80142bc <_svfprintf_r+0xc9c>
 8013b5a:	9b06      	ldr	r3, [sp, #24]
 8013b5c:	2b09      	cmp	r3, #9
 8013b5e:	d900      	bls.n	8013b62 <_svfprintf_r+0x542>
 8013b60:	e3ac      	b.n	80142bc <_svfprintf_r+0xc9c>
 8013b62:	23e7      	movs	r3, #231	; 0xe7
 8013b64:	aa1e      	add	r2, sp, #120	; 0x78
 8013b66:	189b      	adds	r3, r3, r2
 8013b68:	9a06      	ldr	r2, [sp, #24]
 8013b6a:	3230      	adds	r2, #48	; 0x30
 8013b6c:	701a      	strb	r2, [r3, #0]
 8013b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b70:	e395      	b.n	801429e <_svfprintf_r+0xc7e>
 8013b72:	1d23      	adds	r3, r4, #4
 8013b74:	9312      	str	r3, [sp, #72]	; 0x48
 8013b76:	06f3      	lsls	r3, r6, #27
 8013b78:	d504      	bpl.n	8013b84 <_svfprintf_r+0x564>
 8013b7a:	6823      	ldr	r3, [r4, #0]
 8013b7c:	9306      	str	r3, [sp, #24]
 8013b7e:	17db      	asrs	r3, r3, #31
 8013b80:	9307      	str	r3, [sp, #28]
 8013b82:	e7d3      	b.n	8013b2c <_svfprintf_r+0x50c>
 8013b84:	6823      	ldr	r3, [r4, #0]
 8013b86:	0672      	lsls	r2, r6, #25
 8013b88:	d501      	bpl.n	8013b8e <_svfprintf_r+0x56e>
 8013b8a:	b21b      	sxth	r3, r3
 8013b8c:	e7f6      	b.n	8013b7c <_svfprintf_r+0x55c>
 8013b8e:	05b2      	lsls	r2, r6, #22
 8013b90:	d5f4      	bpl.n	8013b7c <_svfprintf_r+0x55c>
 8013b92:	b25b      	sxtb	r3, r3
 8013b94:	e7f2      	b.n	8013b7c <_svfprintf_r+0x55c>
 8013b96:	2307      	movs	r3, #7
 8013b98:	3407      	adds	r4, #7
 8013b9a:	439c      	bics	r4, r3
 8013b9c:	0023      	movs	r3, r4
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	3308      	adds	r3, #8
 8013ba2:	9312      	str	r3, [sp, #72]	; 0x48
 8013ba4:	6823      	ldr	r3, [r4, #0]
 8013ba6:	4252      	negs	r2, r2
 8013ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8013baa:	6863      	ldr	r3, [r4, #4]
 8013bac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013bae:	005c      	lsls	r4, r3, #1
 8013bb0:	0864      	lsrs	r4, r4, #1
 8013bb2:	9319      	str	r3, [sp, #100]	; 0x64
 8013bb4:	0028      	movs	r0, r5
 8013bb6:	4bcf      	ldr	r3, [pc, #828]	; (8013ef4 <_svfprintf_r+0x8d4>)
 8013bb8:	0021      	movs	r1, r4
 8013bba:	f7ee fef5 	bl	80029a8 <__aeabi_dcmpun>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d125      	bne.n	8013c0e <_svfprintf_r+0x5ee>
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	4bcb      	ldr	r3, [pc, #812]	; (8013ef4 <_svfprintf_r+0x8d4>)
 8013bc6:	4252      	negs	r2, r2
 8013bc8:	0028      	movs	r0, r5
 8013bca:	0021      	movs	r1, r4
 8013bcc:	f7ec fc56 	bl	800047c <__aeabi_dcmple>
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d11c      	bne.n	8013c0e <_svfprintf_r+0x5ee>
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013bda:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013bdc:	f7ec fc44 	bl	8000468 <__aeabi_dcmplt>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d004      	beq.n	8013bee <_svfprintf_r+0x5ce>
 8013be4:	231b      	movs	r3, #27
 8013be6:	aa1e      	add	r2, sp, #120	; 0x78
 8013be8:	189b      	adds	r3, r3, r2
 8013bea:	222d      	movs	r2, #45	; 0x2d
 8013bec:	701a      	strb	r2, [r3, #0]
 8013bee:	4bc2      	ldr	r3, [pc, #776]	; (8013ef8 <_svfprintf_r+0x8d8>)
 8013bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8013bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bf4:	2b47      	cmp	r3, #71	; 0x47
 8013bf6:	dc01      	bgt.n	8013bfc <_svfprintf_r+0x5dc>
 8013bf8:	4bc0      	ldr	r3, [pc, #768]	; (8013efc <_svfprintf_r+0x8dc>)
 8013bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8013bfc:	2380      	movs	r3, #128	; 0x80
 8013bfe:	439e      	bics	r6, r3
 8013c00:	2300      	movs	r3, #0
 8013c02:	930c      	str	r3, [sp, #48]	; 0x30
 8013c04:	3303      	adds	r3, #3
 8013c06:	9308      	str	r3, [sp, #32]
 8013c08:	2300      	movs	r3, #0
 8013c0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8013c0c:	e34f      	b.n	80142ae <_svfprintf_r+0xc8e>
 8013c0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c12:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013c14:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013c16:	f7ee fec7 	bl	80029a8 <__aeabi_dcmpun>
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	d00e      	beq.n	8013c3c <_svfprintf_r+0x61c>
 8013c1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	da04      	bge.n	8013c2e <_svfprintf_r+0x60e>
 8013c24:	231b      	movs	r3, #27
 8013c26:	aa1e      	add	r2, sp, #120	; 0x78
 8013c28:	189b      	adds	r3, r3, r2
 8013c2a:	222d      	movs	r2, #45	; 0x2d
 8013c2c:	701a      	strb	r2, [r3, #0]
 8013c2e:	4bb4      	ldr	r3, [pc, #720]	; (8013f00 <_svfprintf_r+0x8e0>)
 8013c30:	9309      	str	r3, [sp, #36]	; 0x24
 8013c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c34:	2b47      	cmp	r3, #71	; 0x47
 8013c36:	dce1      	bgt.n	8013bfc <_svfprintf_r+0x5dc>
 8013c38:	4bb2      	ldr	r3, [pc, #712]	; (8013f04 <_svfprintf_r+0x8e4>)
 8013c3a:	e7de      	b.n	8013bfa <_svfprintf_r+0x5da>
 8013c3c:	2320      	movs	r3, #32
 8013c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c40:	439a      	bics	r2, r3
 8013c42:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c44:	2a41      	cmp	r2, #65	; 0x41
 8013c46:	d124      	bne.n	8013c92 <_svfprintf_r+0x672>
 8013c48:	2230      	movs	r2, #48	; 0x30
 8013c4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013c4c:	ab25      	add	r3, sp, #148	; 0x94
 8013c4e:	701a      	strb	r2, [r3, #0]
 8013c50:	3228      	adds	r2, #40	; 0x28
 8013c52:	2961      	cmp	r1, #97	; 0x61
 8013c54:	d100      	bne.n	8013c58 <_svfprintf_r+0x638>
 8013c56:	3220      	adds	r2, #32
 8013c58:	705a      	strb	r2, [r3, #1]
 8013c5a:	2302      	movs	r3, #2
 8013c5c:	431e      	orrs	r6, r3
 8013c5e:	9b08      	ldr	r3, [sp, #32]
 8013c60:	2b63      	cmp	r3, #99	; 0x63
 8013c62:	dc00      	bgt.n	8013c66 <_svfprintf_r+0x646>
 8013c64:	e09e      	b.n	8013da4 <_svfprintf_r+0x784>
 8013c66:	1c59      	adds	r1, r3, #1
 8013c68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c6a:	f7fe f913 	bl	8011e94 <_malloc_r>
 8013c6e:	9009      	str	r0, [sp, #36]	; 0x24
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d000      	beq.n	8013c76 <_svfprintf_r+0x656>
 8013c74:	e09b      	b.n	8013dae <_svfprintf_r+0x78e>
 8013c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c78:	899a      	ldrh	r2, [r3, #12]
 8013c7a:	2340      	movs	r3, #64	; 0x40
 8013c7c:	4313      	orrs	r3, r2
 8013c7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c80:	8193      	strh	r3, [r2, #12]
 8013c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c84:	899b      	ldrh	r3, [r3, #12]
 8013c86:	065b      	lsls	r3, r3, #25
 8013c88:	d400      	bmi.n	8013c8c <_svfprintf_r+0x66c>
 8013c8a:	e4ee      	b.n	801366a <_svfprintf_r+0x4a>
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	425b      	negs	r3, r3
 8013c90:	e4ea      	b.n	8013668 <_svfprintf_r+0x48>
 8013c92:	9b08      	ldr	r3, [sp, #32]
 8013c94:	900c      	str	r0, [sp, #48]	; 0x30
 8013c96:	3301      	adds	r3, #1
 8013c98:	d100      	bne.n	8013c9c <_svfprintf_r+0x67c>
 8013c9a:	e08b      	b.n	8013db4 <_svfprintf_r+0x794>
 8013c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c9e:	2b47      	cmp	r3, #71	; 0x47
 8013ca0:	d103      	bne.n	8013caa <_svfprintf_r+0x68a>
 8013ca2:	9b08      	ldr	r3, [sp, #32]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d100      	bne.n	8013caa <_svfprintf_r+0x68a>
 8013ca8:	e087      	b.n	8013dba <_svfprintf_r+0x79a>
 8013caa:	2380      	movs	r3, #128	; 0x80
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4333      	orrs	r3, r6
 8013cb0:	9320      	str	r3, [sp, #128]	; 0x80
 8013cb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cb4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	db00      	blt.n	8013cbc <_svfprintf_r+0x69c>
 8013cba:	e082      	b.n	8013dc2 <_svfprintf_r+0x7a2>
 8013cbc:	2280      	movs	r2, #128	; 0x80
 8013cbe:	0612      	lsls	r2, r2, #24
 8013cc0:	4694      	mov	ip, r2
 8013cc2:	4463      	add	r3, ip
 8013cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8013cc6:	232d      	movs	r3, #45	; 0x2d
 8013cc8:	9322      	str	r3, [sp, #136]	; 0x88
 8013cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ccc:	2b41      	cmp	r3, #65	; 0x41
 8013cce:	d000      	beq.n	8013cd2 <_svfprintf_r+0x6b2>
 8013cd0:	e105      	b.n	8013ede <_svfprintf_r+0x8be>
 8013cd2:	aa26      	add	r2, sp, #152	; 0x98
 8013cd4:	0020      	movs	r0, r4
 8013cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013cd8:	f002 fdc4 	bl	8016864 <frexp>
 8013cdc:	23ff      	movs	r3, #255	; 0xff
 8013cde:	2200      	movs	r2, #0
 8013ce0:	059b      	lsls	r3, r3, #22
 8013ce2:	f7ee f8a7 	bl	8001e34 <__aeabi_dmul>
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	2300      	movs	r3, #0
 8013cea:	0004      	movs	r4, r0
 8013cec:	000d      	movs	r5, r1
 8013cee:	f7ec fbb5 	bl	800045c <__aeabi_dcmpeq>
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	d001      	beq.n	8013cfa <_svfprintf_r+0x6da>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	9326      	str	r3, [sp, #152]	; 0x98
 8013cfa:	4b83      	ldr	r3, [pc, #524]	; (8013f08 <_svfprintf_r+0x8e8>)
 8013cfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8013cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d00:	2b61      	cmp	r3, #97	; 0x61
 8013d02:	d101      	bne.n	8013d08 <_svfprintf_r+0x6e8>
 8013d04:	4b81      	ldr	r3, [pc, #516]	; (8013f0c <_svfprintf_r+0x8ec>)
 8013d06:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d08:	9b08      	ldr	r3, [sp, #32]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	9310      	str	r3, [sp, #64]	; 0x40
 8013d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d10:	9318      	str	r3, [sp, #96]	; 0x60
 8013d12:	2200      	movs	r2, #0
 8013d14:	4b7e      	ldr	r3, [pc, #504]	; (8013f10 <_svfprintf_r+0x8f0>)
 8013d16:	0020      	movs	r0, r4
 8013d18:	0029      	movs	r1, r5
 8013d1a:	f7ee f88b 	bl	8001e34 <__aeabi_dmul>
 8013d1e:	000d      	movs	r5, r1
 8013d20:	0004      	movs	r4, r0
 8013d22:	f7ee fe5d 	bl	80029e0 <__aeabi_d2iz>
 8013d26:	9021      	str	r0, [sp, #132]	; 0x84
 8013d28:	f7ee fe90 	bl	8002a4c <__aeabi_i2d>
 8013d2c:	0002      	movs	r2, r0
 8013d2e:	000b      	movs	r3, r1
 8013d30:	0020      	movs	r0, r4
 8013d32:	0029      	movs	r1, r5
 8013d34:	f7ee faf0 	bl	8002318 <__aeabi_dsub>
 8013d38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013d3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8013d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d42:	0004      	movs	r4, r0
 8013d44:	5c9b      	ldrb	r3, [r3, r2]
 8013d46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d48:	000d      	movs	r5, r1
 8013d4a:	7013      	strb	r3, [r2, #0]
 8013d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8013d50:	3301      	adds	r3, #1
 8013d52:	d00a      	beq.n	8013d6a <_svfprintf_r+0x74a>
 8013d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d56:	2200      	movs	r2, #0
 8013d58:	3b01      	subs	r3, #1
 8013d5a:	9310      	str	r3, [sp, #64]	; 0x40
 8013d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d5e:	9318      	str	r3, [sp, #96]	; 0x60
 8013d60:	2300      	movs	r3, #0
 8013d62:	f7ec fb7b 	bl	800045c <__aeabi_dcmpeq>
 8013d66:	2800      	cmp	r0, #0
 8013d68:	d0d3      	beq.n	8013d12 <_svfprintf_r+0x6f2>
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	4b69      	ldr	r3, [pc, #420]	; (8013f14 <_svfprintf_r+0x8f4>)
 8013d6e:	0020      	movs	r0, r4
 8013d70:	0029      	movs	r1, r5
 8013d72:	f7ec fb8d 	bl	8000490 <__aeabi_dcmpgt>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d126      	bne.n	8013dc8 <_svfprintf_r+0x7a8>
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	4b65      	ldr	r3, [pc, #404]	; (8013f14 <_svfprintf_r+0x8f4>)
 8013d7e:	0020      	movs	r0, r4
 8013d80:	0029      	movs	r1, r5
 8013d82:	f7ec fb6b 	bl	800045c <__aeabi_dcmpeq>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	d002      	beq.n	8013d90 <_svfprintf_r+0x770>
 8013d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d8c:	07db      	lsls	r3, r3, #31
 8013d8e:	d41b      	bmi.n	8013dc8 <_svfprintf_r+0x7a8>
 8013d90:	2130      	movs	r1, #48	; 0x30
 8013d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d94:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013d96:	1898      	adds	r0, r3, r2
 8013d98:	930d      	str	r3, [sp, #52]	; 0x34
 8013d9a:	1ac2      	subs	r2, r0, r3
 8013d9c:	d426      	bmi.n	8013dec <_svfprintf_r+0x7cc>
 8013d9e:	7019      	strb	r1, [r3, #0]
 8013da0:	3301      	adds	r3, #1
 8013da2:	e7f9      	b.n	8013d98 <_svfprintf_r+0x778>
 8013da4:	2300      	movs	r3, #0
 8013da6:	930c      	str	r3, [sp, #48]	; 0x30
 8013da8:	ab3f      	add	r3, sp, #252	; 0xfc
 8013daa:	9309      	str	r3, [sp, #36]	; 0x24
 8013dac:	e77d      	b.n	8013caa <_svfprintf_r+0x68a>
 8013dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db0:	930c      	str	r3, [sp, #48]	; 0x30
 8013db2:	e77a      	b.n	8013caa <_svfprintf_r+0x68a>
 8013db4:	2306      	movs	r3, #6
 8013db6:	9308      	str	r3, [sp, #32]
 8013db8:	e777      	b.n	8013caa <_svfprintf_r+0x68a>
 8013dba:	9b08      	ldr	r3, [sp, #32]
 8013dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	e7f9      	b.n	8013db6 <_svfprintf_r+0x796>
 8013dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	e77f      	b.n	8013cc8 <_svfprintf_r+0x6a8>
 8013dc8:	2030      	movs	r0, #48	; 0x30
 8013dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dcc:	932a      	str	r3, [sp, #168]	; 0xa8
 8013dce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013dd0:	7bda      	ldrb	r2, [r3, #15]
 8013dd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013dd4:	3b01      	subs	r3, #1
 8013dd6:	932a      	str	r3, [sp, #168]	; 0xa8
 8013dd8:	7819      	ldrb	r1, [r3, #0]
 8013dda:	4291      	cmp	r1, r2
 8013ddc:	d07d      	beq.n	8013eda <_svfprintf_r+0x8ba>
 8013dde:	1c4a      	adds	r2, r1, #1
 8013de0:	b2d2      	uxtb	r2, r2
 8013de2:	2939      	cmp	r1, #57	; 0x39
 8013de4:	d101      	bne.n	8013dea <_svfprintf_r+0x7ca>
 8013de6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013de8:	7a92      	ldrb	r2, [r2, #10]
 8013dea:	701a      	strb	r2, [r3, #0]
 8013dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013df0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8013df2:	1a9b      	subs	r3, r3, r2
 8013df4:	930d      	str	r3, [sp, #52]	; 0x34
 8013df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013df8:	2b47      	cmp	r3, #71	; 0x47
 8013dfa:	d000      	beq.n	8013dfe <_svfprintf_r+0x7de>
 8013dfc:	e0d2      	b.n	8013fa4 <_svfprintf_r+0x984>
 8013dfe:	1ceb      	adds	r3, r5, #3
 8013e00:	db03      	blt.n	8013e0a <_svfprintf_r+0x7ea>
 8013e02:	9b08      	ldr	r3, [sp, #32]
 8013e04:	42ab      	cmp	r3, r5
 8013e06:	db00      	blt.n	8013e0a <_svfprintf_r+0x7ea>
 8013e08:	e0fd      	b.n	8014006 <_svfprintf_r+0x9e6>
 8013e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e0c:	3b02      	subs	r3, #2
 8013e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8013e10:	2238      	movs	r2, #56	; 0x38
 8013e12:	466b      	mov	r3, sp
 8013e14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013e16:	189b      	adds	r3, r3, r2
 8013e18:	3a18      	subs	r2, #24
 8013e1a:	4391      	bics	r1, r2
 8013e1c:	1e6c      	subs	r4, r5, #1
 8013e1e:	000a      	movs	r2, r1
 8013e20:	9426      	str	r4, [sp, #152]	; 0x98
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2100      	movs	r1, #0
 8013e26:	2a41      	cmp	r2, #65	; 0x41
 8013e28:	d102      	bne.n	8013e30 <_svfprintf_r+0x810>
 8013e2a:	330f      	adds	r3, #15
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	3101      	adds	r1, #1
 8013e30:	aa28      	add	r2, sp, #160	; 0xa0
 8013e32:	7013      	strb	r3, [r2, #0]
 8013e34:	232b      	movs	r3, #43	; 0x2b
 8013e36:	2c00      	cmp	r4, #0
 8013e38:	da02      	bge.n	8013e40 <_svfprintf_r+0x820>
 8013e3a:	2401      	movs	r4, #1
 8013e3c:	232d      	movs	r3, #45	; 0x2d
 8013e3e:	1b64      	subs	r4, r4, r5
 8013e40:	7053      	strb	r3, [r2, #1]
 8013e42:	2c09      	cmp	r4, #9
 8013e44:	dc00      	bgt.n	8013e48 <_svfprintf_r+0x828>
 8013e46:	e0c7      	b.n	8013fd8 <_svfprintf_r+0x9b8>
 8013e48:	2537      	movs	r5, #55	; 0x37
 8013e4a:	ab1e      	add	r3, sp, #120	; 0x78
 8013e4c:	18ed      	adds	r5, r5, r3
 8013e4e:	1e6b      	subs	r3, r5, #1
 8013e50:	0020      	movs	r0, r4
 8013e52:	210a      	movs	r1, #10
 8013e54:	9308      	str	r3, [sp, #32]
 8013e56:	f7ec faeb 	bl	8000430 <__aeabi_idivmod>
 8013e5a:	1e6b      	subs	r3, r5, #1
 8013e5c:	3130      	adds	r1, #48	; 0x30
 8013e5e:	7019      	strb	r1, [r3, #0]
 8013e60:	0020      	movs	r0, r4
 8013e62:	210a      	movs	r1, #10
 8013e64:	f7ec f9fe 	bl	8000264 <__divsi3>
 8013e68:	0004      	movs	r4, r0
 8013e6a:	2809      	cmp	r0, #9
 8013e6c:	dd00      	ble.n	8013e70 <_svfprintf_r+0x850>
 8013e6e:	e0ac      	b.n	8013fca <_svfprintf_r+0x9aa>
 8013e70:	232a      	movs	r3, #42	; 0x2a
 8013e72:	2137      	movs	r1, #55	; 0x37
 8013e74:	aa1e      	add	r2, sp, #120	; 0x78
 8013e76:	3d02      	subs	r5, #2
 8013e78:	3430      	adds	r4, #48	; 0x30
 8013e7a:	702c      	strb	r4, [r5, #0]
 8013e7c:	189b      	adds	r3, r3, r2
 8013e7e:	1889      	adds	r1, r1, r2
 8013e80:	001a      	movs	r2, r3
 8013e82:	428d      	cmp	r5, r1
 8013e84:	d200      	bcs.n	8013e88 <_svfprintf_r+0x868>
 8013e86:	e0a2      	b.n	8013fce <_svfprintf_r+0x9ae>
 8013e88:	ab28      	add	r3, sp, #160	; 0xa0
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	931d      	str	r3, [sp, #116]	; 0x74
 8013e8e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e92:	4694      	mov	ip, r2
 8013e94:	4463      	add	r3, ip
 8013e96:	9308      	str	r3, [sp, #32]
 8013e98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	dc01      	bgt.n	8013ea2 <_svfprintf_r+0x882>
 8013e9e:	07f3      	lsls	r3, r6, #31
 8013ea0:	d504      	bpl.n	8013eac <_svfprintf_r+0x88c>
 8013ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ea4:	9b08      	ldr	r3, [sp, #32]
 8013ea6:	4694      	mov	ip, r2
 8013ea8:	4463      	add	r3, ip
 8013eaa:	9308      	str	r3, [sp, #32]
 8013eac:	2280      	movs	r2, #128	; 0x80
 8013eae:	4b1a      	ldr	r3, [pc, #104]	; (8013f18 <_svfprintf_r+0x8f8>)
 8013eb0:	0052      	lsls	r2, r2, #1
 8013eb2:	4033      	ands	r3, r6
 8013eb4:	431a      	orrs	r2, r3
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	001d      	movs	r5, r3
 8013eba:	9220      	str	r2, [sp, #128]	; 0x80
 8013ebc:	9310      	str	r3, [sp, #64]	; 0x40
 8013ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d100      	bne.n	8013ec8 <_svfprintf_r+0x8a8>
 8013ec6:	e270      	b.n	80143aa <_svfprintf_r+0xd8a>
 8013ec8:	231b      	movs	r3, #27
 8013eca:	aa1e      	add	r2, sp, #120	; 0x78
 8013ecc:	189b      	adds	r3, r3, r2
 8013ece:	222d      	movs	r2, #45	; 0x2d
 8013ed0:	701a      	strb	r2, [r3, #0]
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013ed6:	9317      	str	r3, [sp, #92]	; 0x5c
 8013ed8:	e539      	b.n	801394e <_svfprintf_r+0x32e>
 8013eda:	7018      	strb	r0, [r3, #0]
 8013edc:	e779      	b.n	8013dd2 <_svfprintf_r+0x7b2>
 8013ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ee0:	2b46      	cmp	r3, #70	; 0x46
 8013ee2:	d01b      	beq.n	8013f1c <_svfprintf_r+0x8fc>
 8013ee4:	9d08      	ldr	r5, [sp, #32]
 8013ee6:	2b45      	cmp	r3, #69	; 0x45
 8013ee8:	d101      	bne.n	8013eee <_svfprintf_r+0x8ce>
 8013eea:	9b08      	ldr	r3, [sp, #32]
 8013eec:	1c5d      	adds	r5, r3, #1
 8013eee:	2302      	movs	r3, #2
 8013ef0:	e016      	b.n	8013f20 <_svfprintf_r+0x900>
 8013ef2:	46c0      	nop			; (mov r8, r8)
 8013ef4:	7fefffff 	.word	0x7fefffff
 8013ef8:	080199b4 	.word	0x080199b4
 8013efc:	080199b0 	.word	0x080199b0
 8013f00:	080199bc 	.word	0x080199bc
 8013f04:	080199b8 	.word	0x080199b8
 8013f08:	080199d1 	.word	0x080199d1
 8013f0c:	080199c0 	.word	0x080199c0
 8013f10:	40300000 	.word	0x40300000
 8013f14:	3fe00000 	.word	0x3fe00000
 8013f18:	fffffbff 	.word	0xfffffbff
 8013f1c:	2303      	movs	r3, #3
 8013f1e:	9d08      	ldr	r5, [sp, #32]
 8013f20:	aa2a      	add	r2, sp, #168	; 0xa8
 8013f22:	9204      	str	r2, [sp, #16]
 8013f24:	aa27      	add	r2, sp, #156	; 0x9c
 8013f26:	9203      	str	r2, [sp, #12]
 8013f28:	aa26      	add	r2, sp, #152	; 0x98
 8013f2a:	9202      	str	r2, [sp, #8]
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	9501      	str	r5, [sp, #4]
 8013f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f32:	0022      	movs	r2, r4
 8013f34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f36:	f000 fe79 	bl	8014c2c <_dtoa_r>
 8013f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f3c:	9009      	str	r0, [sp, #36]	; 0x24
 8013f3e:	2b47      	cmp	r3, #71	; 0x47
 8013f40:	d101      	bne.n	8013f46 <_svfprintf_r+0x926>
 8013f42:	07f3      	lsls	r3, r6, #31
 8013f44:	d524      	bpl.n	8013f90 <_svfprintf_r+0x970>
 8013f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f48:	195b      	adds	r3, r3, r5
 8013f4a:	9310      	str	r3, [sp, #64]	; 0x40
 8013f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f4e:	2b46      	cmp	r3, #70	; 0x46
 8013f50:	d113      	bne.n	8013f7a <_svfprintf_r+0x95a>
 8013f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	2b30      	cmp	r3, #48	; 0x30
 8013f58:	d10a      	bne.n	8013f70 <_svfprintf_r+0x950>
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	0020      	movs	r0, r4
 8013f60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f62:	f7ec fa7b 	bl	800045c <__aeabi_dcmpeq>
 8013f66:	2800      	cmp	r0, #0
 8013f68:	d102      	bne.n	8013f70 <_svfprintf_r+0x950>
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	1b5d      	subs	r5, r3, r5
 8013f6e:	9526      	str	r5, [sp, #152]	; 0x98
 8013f70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013f72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f74:	4694      	mov	ip, r2
 8013f76:	4463      	add	r3, ip
 8013f78:	9310      	str	r3, [sp, #64]	; 0x40
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	0020      	movs	r0, r4
 8013f80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f82:	f7ec fa6b 	bl	800045c <__aeabi_dcmpeq>
 8013f86:	2230      	movs	r2, #48	; 0x30
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d006      	beq.n	8013f9a <_svfprintf_r+0x97a>
 8013f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f8e:	932a      	str	r3, [sp, #168]	; 0xa8
 8013f90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013f92:	e72c      	b.n	8013dee <_svfprintf_r+0x7ce>
 8013f94:	1c59      	adds	r1, r3, #1
 8013f96:	912a      	str	r1, [sp, #168]	; 0xa8
 8013f98:	701a      	strb	r2, [r3, #0]
 8013f9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013f9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013f9e:	4299      	cmp	r1, r3
 8013fa0:	d8f8      	bhi.n	8013f94 <_svfprintf_r+0x974>
 8013fa2:	e7f5      	b.n	8013f90 <_svfprintf_r+0x970>
 8013fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fa6:	2b46      	cmp	r3, #70	; 0x46
 8013fa8:	d000      	beq.n	8013fac <_svfprintf_r+0x98c>
 8013faa:	e731      	b.n	8013e10 <_svfprintf_r+0x7f0>
 8013fac:	9b08      	ldr	r3, [sp, #32]
 8013fae:	2d00      	cmp	r5, #0
 8013fb0:	dd21      	ble.n	8013ff6 <_svfprintf_r+0x9d6>
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d101      	bne.n	8013fba <_svfprintf_r+0x99a>
 8013fb6:	07f3      	lsls	r3, r6, #31
 8013fb8:	d54a      	bpl.n	8014050 <_svfprintf_r+0xa30>
 8013fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fbc:	18eb      	adds	r3, r5, r3
 8013fbe:	9a08      	ldr	r2, [sp, #32]
 8013fc0:	18d3      	adds	r3, r2, r3
 8013fc2:	9308      	str	r3, [sp, #32]
 8013fc4:	2366      	movs	r3, #102	; 0x66
 8013fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8013fc8:	e034      	b.n	8014034 <_svfprintf_r+0xa14>
 8013fca:	9d08      	ldr	r5, [sp, #32]
 8013fcc:	e73f      	b.n	8013e4e <_svfprintf_r+0x82e>
 8013fce:	782a      	ldrb	r2, [r5, #0]
 8013fd0:	3501      	adds	r5, #1
 8013fd2:	701a      	strb	r2, [r3, #0]
 8013fd4:	3301      	adds	r3, #1
 8013fd6:	e753      	b.n	8013e80 <_svfprintf_r+0x860>
 8013fd8:	232a      	movs	r3, #42	; 0x2a
 8013fda:	aa1e      	add	r2, sp, #120	; 0x78
 8013fdc:	189b      	adds	r3, r3, r2
 8013fde:	2900      	cmp	r1, #0
 8013fe0:	d105      	bne.n	8013fee <_svfprintf_r+0x9ce>
 8013fe2:	2230      	movs	r2, #48	; 0x30
 8013fe4:	ab28      	add	r3, sp, #160	; 0xa0
 8013fe6:	709a      	strb	r2, [r3, #2]
 8013fe8:	232b      	movs	r3, #43	; 0x2b
 8013fea:	aa1e      	add	r2, sp, #120	; 0x78
 8013fec:	189b      	adds	r3, r3, r2
 8013fee:	3430      	adds	r4, #48	; 0x30
 8013ff0:	1c5a      	adds	r2, r3, #1
 8013ff2:	701c      	strb	r4, [r3, #0]
 8013ff4:	e748      	b.n	8013e88 <_svfprintf_r+0x868>
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d102      	bne.n	8014000 <_svfprintf_r+0x9e0>
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	421e      	tst	r6, r3
 8013ffe:	d029      	beq.n	8014054 <_svfprintf_r+0xa34>
 8014000:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014002:	3301      	adds	r3, #1
 8014004:	e7db      	b.n	8013fbe <_svfprintf_r+0x99e>
 8014006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014008:	42ab      	cmp	r3, r5
 801400a:	dc06      	bgt.n	801401a <_svfprintf_r+0x9fa>
 801400c:	07f3      	lsls	r3, r6, #31
 801400e:	d524      	bpl.n	801405a <_svfprintf_r+0xa3a>
 8014010:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014012:	18eb      	adds	r3, r5, r3
 8014014:	9308      	str	r3, [sp, #32]
 8014016:	2367      	movs	r3, #103	; 0x67
 8014018:	e7d5      	b.n	8013fc6 <_svfprintf_r+0x9a6>
 801401a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801401c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801401e:	4694      	mov	ip, r2
 8014020:	4463      	add	r3, ip
 8014022:	9308      	str	r3, [sp, #32]
 8014024:	2367      	movs	r3, #103	; 0x67
 8014026:	930e      	str	r3, [sp, #56]	; 0x38
 8014028:	2d00      	cmp	r5, #0
 801402a:	dc03      	bgt.n	8014034 <_svfprintf_r+0xa14>
 801402c:	9b08      	ldr	r3, [sp, #32]
 801402e:	1b5b      	subs	r3, r3, r5
 8014030:	3301      	adds	r3, #1
 8014032:	9308      	str	r3, [sp, #32]
 8014034:	2380      	movs	r3, #128	; 0x80
 8014036:	00db      	lsls	r3, r3, #3
 8014038:	401e      	ands	r6, r3
 801403a:	2300      	movs	r3, #0
 801403c:	960f      	str	r6, [sp, #60]	; 0x3c
 801403e:	9310      	str	r3, [sp, #64]	; 0x40
 8014040:	2e00      	cmp	r6, #0
 8014042:	d100      	bne.n	8014046 <_svfprintf_r+0xa26>
 8014044:	e73c      	b.n	8013ec0 <_svfprintf_r+0x8a0>
 8014046:	2d00      	cmp	r5, #0
 8014048:	dc27      	bgt.n	801409a <_svfprintf_r+0xa7a>
 801404a:	2300      	movs	r3, #0
 801404c:	930f      	str	r3, [sp, #60]	; 0x3c
 801404e:	e737      	b.n	8013ec0 <_svfprintf_r+0x8a0>
 8014050:	9508      	str	r5, [sp, #32]
 8014052:	e7b7      	b.n	8013fc4 <_svfprintf_r+0x9a4>
 8014054:	2266      	movs	r2, #102	; 0x66
 8014056:	920e      	str	r2, [sp, #56]	; 0x38
 8014058:	e7eb      	b.n	8014032 <_svfprintf_r+0xa12>
 801405a:	9508      	str	r5, [sp, #32]
 801405c:	e7db      	b.n	8014016 <_svfprintf_r+0x9f6>
 801405e:	42ab      	cmp	r3, r5
 8014060:	da0e      	bge.n	8014080 <_svfprintf_r+0xa60>
 8014062:	1aed      	subs	r5, r5, r3
 8014064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014066:	785b      	ldrb	r3, [r3, #1]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d012      	beq.n	8014092 <_svfprintf_r+0xa72>
 801406c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801406e:	3301      	adds	r3, #1
 8014070:	930f      	str	r3, [sp, #60]	; 0x3c
 8014072:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014074:	3301      	adds	r3, #1
 8014076:	9313      	str	r3, [sp, #76]	; 0x4c
 8014078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	2bff      	cmp	r3, #255	; 0xff
 801407e:	d1ee      	bne.n	801405e <_svfprintf_r+0xa3e>
 8014080:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014084:	189b      	adds	r3, r3, r2
 8014086:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014088:	4353      	muls	r3, r2
 801408a:	9a08      	ldr	r2, [sp, #32]
 801408c:	189b      	adds	r3, r3, r2
 801408e:	9308      	str	r3, [sp, #32]
 8014090:	e716      	b.n	8013ec0 <_svfprintf_r+0x8a0>
 8014092:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014094:	3301      	adds	r3, #1
 8014096:	9310      	str	r3, [sp, #64]	; 0x40
 8014098:	e7ee      	b.n	8014078 <_svfprintf_r+0xa58>
 801409a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801409c:	930f      	str	r3, [sp, #60]	; 0x3c
 801409e:	e7eb      	b.n	8014078 <_svfprintf_r+0xa58>
 80140a0:	0022      	movs	r2, r4
 80140a2:	ca08      	ldmia	r2!, {r3}
 80140a4:	9212      	str	r2, [sp, #72]	; 0x48
 80140a6:	06b2      	lsls	r2, r6, #26
 80140a8:	d508      	bpl.n	80140bc <_svfprintf_r+0xa9c>
 80140aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140ac:	601a      	str	r2, [r3, #0]
 80140ae:	17d2      	asrs	r2, r2, #31
 80140b0:	605a      	str	r2, [r3, #4]
 80140b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80140b6:	9309      	str	r3, [sp, #36]	; 0x24
 80140b8:	f7ff faeb 	bl	8013692 <_svfprintf_r+0x72>
 80140bc:	06f2      	lsls	r2, r6, #27
 80140be:	d502      	bpl.n	80140c6 <_svfprintf_r+0xaa6>
 80140c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140c2:	601a      	str	r2, [r3, #0]
 80140c4:	e7f5      	b.n	80140b2 <_svfprintf_r+0xa92>
 80140c6:	0672      	lsls	r2, r6, #25
 80140c8:	d502      	bpl.n	80140d0 <_svfprintf_r+0xab0>
 80140ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140cc:	801a      	strh	r2, [r3, #0]
 80140ce:	e7f0      	b.n	80140b2 <_svfprintf_r+0xa92>
 80140d0:	05b2      	lsls	r2, r6, #22
 80140d2:	d5f5      	bpl.n	80140c0 <_svfprintf_r+0xaa0>
 80140d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140d6:	701a      	strb	r2, [r3, #0]
 80140d8:	e7eb      	b.n	80140b2 <_svfprintf_r+0xa92>
 80140da:	2310      	movs	r3, #16
 80140dc:	431e      	orrs	r6, r3
 80140de:	2220      	movs	r2, #32
 80140e0:	4032      	ands	r2, r6
 80140e2:	d025      	beq.n	8014130 <_svfprintf_r+0xb10>
 80140e4:	2307      	movs	r3, #7
 80140e6:	3407      	adds	r4, #7
 80140e8:	439c      	bics	r4, r3
 80140ea:	0023      	movs	r3, r4
 80140ec:	3308      	adds	r3, #8
 80140ee:	9312      	str	r3, [sp, #72]	; 0x48
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	6864      	ldr	r4, [r4, #4]
 80140f4:	9306      	str	r3, [sp, #24]
 80140f6:	9407      	str	r4, [sp, #28]
 80140f8:	4bc2      	ldr	r3, [pc, #776]	; (8014404 <_svfprintf_r+0xde4>)
 80140fa:	401e      	ands	r6, r3
 80140fc:	2300      	movs	r3, #0
 80140fe:	221b      	movs	r2, #27
 8014100:	a91e      	add	r1, sp, #120	; 0x78
 8014102:	1852      	adds	r2, r2, r1
 8014104:	2100      	movs	r1, #0
 8014106:	7011      	strb	r1, [r2, #0]
 8014108:	9a08      	ldr	r2, [sp, #32]
 801410a:	3201      	adds	r2, #1
 801410c:	d100      	bne.n	8014110 <_svfprintf_r+0xaf0>
 801410e:	e0a6      	b.n	801425e <_svfprintf_r+0xc3e>
 8014110:	0032      	movs	r2, r6
 8014112:	2180      	movs	r1, #128	; 0x80
 8014114:	9807      	ldr	r0, [sp, #28]
 8014116:	438e      	bics	r6, r1
 8014118:	9906      	ldr	r1, [sp, #24]
 801411a:	4301      	orrs	r1, r0
 801411c:	d000      	beq.n	8014120 <_svfprintf_r+0xb00>
 801411e:	e09e      	b.n	801425e <_svfprintf_r+0xc3e>
 8014120:	9908      	ldr	r1, [sp, #32]
 8014122:	2900      	cmp	r1, #0
 8014124:	d100      	bne.n	8014128 <_svfprintf_r+0xb08>
 8014126:	e125      	b.n	8014374 <_svfprintf_r+0xd54>
 8014128:	2b01      	cmp	r3, #1
 801412a:	d000      	beq.n	801412e <_svfprintf_r+0xb0e>
 801412c:	e09a      	b.n	8014264 <_svfprintf_r+0xc44>
 801412e:	e518      	b.n	8013b62 <_svfprintf_r+0x542>
 8014130:	1d23      	adds	r3, r4, #4
 8014132:	9312      	str	r3, [sp, #72]	; 0x48
 8014134:	2310      	movs	r3, #16
 8014136:	4033      	ands	r3, r6
 8014138:	d003      	beq.n	8014142 <_svfprintf_r+0xb22>
 801413a:	6823      	ldr	r3, [r4, #0]
 801413c:	9306      	str	r3, [sp, #24]
 801413e:	9207      	str	r2, [sp, #28]
 8014140:	e7da      	b.n	80140f8 <_svfprintf_r+0xad8>
 8014142:	2240      	movs	r2, #64	; 0x40
 8014144:	4032      	ands	r2, r6
 8014146:	d004      	beq.n	8014152 <_svfprintf_r+0xb32>
 8014148:	6822      	ldr	r2, [r4, #0]
 801414a:	b292      	uxth	r2, r2
 801414c:	9206      	str	r2, [sp, #24]
 801414e:	9307      	str	r3, [sp, #28]
 8014150:	e7d2      	b.n	80140f8 <_svfprintf_r+0xad8>
 8014152:	2380      	movs	r3, #128	; 0x80
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	4033      	ands	r3, r6
 8014158:	d002      	beq.n	8014160 <_svfprintf_r+0xb40>
 801415a:	6823      	ldr	r3, [r4, #0]
 801415c:	b2db      	uxtb	r3, r3
 801415e:	e7ed      	b.n	801413c <_svfprintf_r+0xb1c>
 8014160:	6822      	ldr	r2, [r4, #0]
 8014162:	e7f3      	b.n	801414c <_svfprintf_r+0xb2c>
 8014164:	1d23      	adds	r3, r4, #4
 8014166:	49a8      	ldr	r1, [pc, #672]	; (8014408 <_svfprintf_r+0xde8>)
 8014168:	aa25      	add	r2, sp, #148	; 0x94
 801416a:	9312      	str	r3, [sp, #72]	; 0x48
 801416c:	6823      	ldr	r3, [r4, #0]
 801416e:	8011      	strh	r1, [r2, #0]
 8014170:	4aa6      	ldr	r2, [pc, #664]	; (801440c <_svfprintf_r+0xdec>)
 8014172:	9306      	str	r3, [sp, #24]
 8014174:	2300      	movs	r3, #0
 8014176:	921e      	str	r2, [sp, #120]	; 0x78
 8014178:	2278      	movs	r2, #120	; 0x78
 801417a:	9307      	str	r3, [sp, #28]
 801417c:	3302      	adds	r3, #2
 801417e:	431e      	orrs	r6, r3
 8014180:	920e      	str	r2, [sp, #56]	; 0x38
 8014182:	e7bc      	b.n	80140fe <_svfprintf_r+0xade>
 8014184:	1d23      	adds	r3, r4, #4
 8014186:	9312      	str	r3, [sp, #72]	; 0x48
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	2400      	movs	r4, #0
 801418c:	9309      	str	r3, [sp, #36]	; 0x24
 801418e:	231b      	movs	r3, #27
 8014190:	aa1e      	add	r2, sp, #120	; 0x78
 8014192:	189b      	adds	r3, r3, r2
 8014194:	701c      	strb	r4, [r3, #0]
 8014196:	9b08      	ldr	r3, [sp, #32]
 8014198:	3301      	adds	r3, #1
 801419a:	d00e      	beq.n	80141ba <_svfprintf_r+0xb9a>
 801419c:	9a08      	ldr	r2, [sp, #32]
 801419e:	0021      	movs	r1, r4
 80141a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141a2:	f001 ff79 	bl	8016098 <memchr>
 80141a6:	900c      	str	r0, [sp, #48]	; 0x30
 80141a8:	42a0      	cmp	r0, r4
 80141aa:	d100      	bne.n	80141ae <_svfprintf_r+0xb8e>
 80141ac:	e100      	b.n	80143b0 <_svfprintf_r+0xd90>
 80141ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141b0:	1a83      	subs	r3, r0, r2
 80141b2:	9308      	str	r3, [sp, #32]
 80141b4:	940c      	str	r4, [sp, #48]	; 0x30
 80141b6:	0023      	movs	r3, r4
 80141b8:	e527      	b.n	8013c0a <_svfprintf_r+0x5ea>
 80141ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141bc:	f7eb ffac 	bl	8000118 <strlen>
 80141c0:	9008      	str	r0, [sp, #32]
 80141c2:	e7f7      	b.n	80141b4 <_svfprintf_r+0xb94>
 80141c4:	2310      	movs	r3, #16
 80141c6:	431e      	orrs	r6, r3
 80141c8:	2220      	movs	r2, #32
 80141ca:	4032      	ands	r2, r6
 80141cc:	d00b      	beq.n	80141e6 <_svfprintf_r+0xbc6>
 80141ce:	2307      	movs	r3, #7
 80141d0:	3407      	adds	r4, #7
 80141d2:	439c      	bics	r4, r3
 80141d4:	0023      	movs	r3, r4
 80141d6:	3308      	adds	r3, #8
 80141d8:	9312      	str	r3, [sp, #72]	; 0x48
 80141da:	6823      	ldr	r3, [r4, #0]
 80141dc:	6864      	ldr	r4, [r4, #4]
 80141de:	9306      	str	r3, [sp, #24]
 80141e0:	9407      	str	r4, [sp, #28]
 80141e2:	2301      	movs	r3, #1
 80141e4:	e78b      	b.n	80140fe <_svfprintf_r+0xade>
 80141e6:	1d23      	adds	r3, r4, #4
 80141e8:	9312      	str	r3, [sp, #72]	; 0x48
 80141ea:	2310      	movs	r3, #16
 80141ec:	4033      	ands	r3, r6
 80141ee:	d003      	beq.n	80141f8 <_svfprintf_r+0xbd8>
 80141f0:	6823      	ldr	r3, [r4, #0]
 80141f2:	9306      	str	r3, [sp, #24]
 80141f4:	9207      	str	r2, [sp, #28]
 80141f6:	e7f4      	b.n	80141e2 <_svfprintf_r+0xbc2>
 80141f8:	2240      	movs	r2, #64	; 0x40
 80141fa:	4032      	ands	r2, r6
 80141fc:	d004      	beq.n	8014208 <_svfprintf_r+0xbe8>
 80141fe:	6822      	ldr	r2, [r4, #0]
 8014200:	b292      	uxth	r2, r2
 8014202:	9206      	str	r2, [sp, #24]
 8014204:	9307      	str	r3, [sp, #28]
 8014206:	e7ec      	b.n	80141e2 <_svfprintf_r+0xbc2>
 8014208:	2380      	movs	r3, #128	; 0x80
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	4033      	ands	r3, r6
 801420e:	d002      	beq.n	8014216 <_svfprintf_r+0xbf6>
 8014210:	6823      	ldr	r3, [r4, #0]
 8014212:	b2db      	uxtb	r3, r3
 8014214:	e7ed      	b.n	80141f2 <_svfprintf_r+0xbd2>
 8014216:	6822      	ldr	r2, [r4, #0]
 8014218:	e7f3      	b.n	8014202 <_svfprintf_r+0xbe2>
 801421a:	4b7c      	ldr	r3, [pc, #496]	; (801440c <_svfprintf_r+0xdec>)
 801421c:	f7ff fad9 	bl	80137d2 <_svfprintf_r+0x1b2>
 8014220:	1d23      	adds	r3, r4, #4
 8014222:	9312      	str	r3, [sp, #72]	; 0x48
 8014224:	2310      	movs	r3, #16
 8014226:	4033      	ands	r3, r6
 8014228:	d004      	beq.n	8014234 <_svfprintf_r+0xc14>
 801422a:	6823      	ldr	r3, [r4, #0]
 801422c:	9306      	str	r3, [sp, #24]
 801422e:	9207      	str	r2, [sp, #28]
 8014230:	f7ff fadf 	bl	80137f2 <_svfprintf_r+0x1d2>
 8014234:	2240      	movs	r2, #64	; 0x40
 8014236:	4032      	ands	r2, r6
 8014238:	d005      	beq.n	8014246 <_svfprintf_r+0xc26>
 801423a:	6822      	ldr	r2, [r4, #0]
 801423c:	b292      	uxth	r2, r2
 801423e:	9206      	str	r2, [sp, #24]
 8014240:	9307      	str	r3, [sp, #28]
 8014242:	f7ff fad6 	bl	80137f2 <_svfprintf_r+0x1d2>
 8014246:	2380      	movs	r3, #128	; 0x80
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	4033      	ands	r3, r6
 801424c:	d002      	beq.n	8014254 <_svfprintf_r+0xc34>
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	b2db      	uxtb	r3, r3
 8014252:	e7eb      	b.n	801422c <_svfprintf_r+0xc0c>
 8014254:	6822      	ldr	r2, [r4, #0]
 8014256:	e7f2      	b.n	801423e <_svfprintf_r+0xc1e>
 8014258:	0032      	movs	r2, r6
 801425a:	2301      	movs	r3, #1
 801425c:	e759      	b.n	8014112 <_svfprintf_r+0xaf2>
 801425e:	2b01      	cmp	r3, #1
 8014260:	d100      	bne.n	8014264 <_svfprintf_r+0xc44>
 8014262:	e476      	b.n	8013b52 <_svfprintf_r+0x532>
 8014264:	2b02      	cmp	r3, #2
 8014266:	d06b      	beq.n	8014340 <_svfprintf_r+0xd20>
 8014268:	2507      	movs	r5, #7
 801426a:	ab58      	add	r3, sp, #352	; 0x160
 801426c:	1e5a      	subs	r2, r3, #1
 801426e:	9209      	str	r2, [sp, #36]	; 0x24
 8014270:	9a06      	ldr	r2, [sp, #24]
 8014272:	1e59      	subs	r1, r3, #1
 8014274:	402a      	ands	r2, r5
 8014276:	3230      	adds	r2, #48	; 0x30
 8014278:	700a      	strb	r2, [r1, #0]
 801427a:	9907      	ldr	r1, [sp, #28]
 801427c:	074c      	lsls	r4, r1, #29
 801427e:	9906      	ldr	r1, [sp, #24]
 8014280:	08c8      	lsrs	r0, r1, #3
 8014282:	9907      	ldr	r1, [sp, #28]
 8014284:	4304      	orrs	r4, r0
 8014286:	08c9      	lsrs	r1, r1, #3
 8014288:	9107      	str	r1, [sp, #28]
 801428a:	0021      	movs	r1, r4
 801428c:	9807      	ldr	r0, [sp, #28]
 801428e:	9406      	str	r4, [sp, #24]
 8014290:	4301      	orrs	r1, r0
 8014292:	d111      	bne.n	80142b8 <_svfprintf_r+0xc98>
 8014294:	07f1      	lsls	r1, r6, #31
 8014296:	d502      	bpl.n	801429e <_svfprintf_r+0xc7e>
 8014298:	3b02      	subs	r3, #2
 801429a:	2a30      	cmp	r2, #48	; 0x30
 801429c:	d173      	bne.n	8014386 <_svfprintf_r+0xd66>
 801429e:	9b08      	ldr	r3, [sp, #32]
 80142a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80142a4:	ab58      	add	r3, sp, #352	; 0x160
 80142a6:	1a9b      	subs	r3, r3, r2
 80142a8:	9308      	str	r3, [sp, #32]
 80142aa:	2300      	movs	r3, #0
 80142ac:	930c      	str	r3, [sp, #48]	; 0x30
 80142ae:	9310      	str	r3, [sp, #64]	; 0x40
 80142b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80142b2:	001d      	movs	r5, r3
 80142b4:	f7ff fb4b 	bl	801394e <_svfprintf_r+0x32e>
 80142b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142ba:	e7d7      	b.n	801426c <_svfprintf_r+0xc4c>
 80142bc:	2480      	movs	r4, #128	; 0x80
 80142be:	2300      	movs	r3, #0
 80142c0:	00e4      	lsls	r4, r4, #3
 80142c2:	930d      	str	r3, [sp, #52]	; 0x34
 80142c4:	4034      	ands	r4, r6
 80142c6:	ab58      	add	r3, sp, #352	; 0x160
 80142c8:	3b01      	subs	r3, #1
 80142ca:	9309      	str	r3, [sp, #36]	; 0x24
 80142cc:	220a      	movs	r2, #10
 80142ce:	9806      	ldr	r0, [sp, #24]
 80142d0:	9907      	ldr	r1, [sp, #28]
 80142d2:	2300      	movs	r3, #0
 80142d4:	f7ec f92a 	bl	800052c <__aeabi_uldivmod>
 80142d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142da:	3230      	adds	r2, #48	; 0x30
 80142dc:	701a      	strb	r2, [r3, #0]
 80142de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142e0:	3301      	adds	r3, #1
 80142e2:	930d      	str	r3, [sp, #52]	; 0x34
 80142e4:	2c00      	cmp	r4, #0
 80142e6:	d01d      	beq.n	8014324 <_svfprintf_r+0xd04>
 80142e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d118      	bne.n	8014324 <_svfprintf_r+0xd04>
 80142f2:	2aff      	cmp	r2, #255	; 0xff
 80142f4:	d016      	beq.n	8014324 <_svfprintf_r+0xd04>
 80142f6:	9b07      	ldr	r3, [sp, #28]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d102      	bne.n	8014302 <_svfprintf_r+0xce2>
 80142fc:	9b06      	ldr	r3, [sp, #24]
 80142fe:	2b09      	cmp	r3, #9
 8014300:	d910      	bls.n	8014324 <_svfprintf_r+0xd04>
 8014302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014304:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014306:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014308:	1a9b      	subs	r3, r3, r2
 801430a:	0018      	movs	r0, r3
 801430c:	9309      	str	r3, [sp, #36]	; 0x24
 801430e:	f7fe fa52 	bl	80127b6 <strncpy>
 8014312:	2200      	movs	r2, #0
 8014314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014316:	920d      	str	r2, [sp, #52]	; 0x34
 8014318:	785b      	ldrb	r3, [r3, #1]
 801431a:	1e5a      	subs	r2, r3, #1
 801431c:	4193      	sbcs	r3, r2
 801431e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014320:	18d3      	adds	r3, r2, r3
 8014322:	9313      	str	r3, [sp, #76]	; 0x4c
 8014324:	220a      	movs	r2, #10
 8014326:	9806      	ldr	r0, [sp, #24]
 8014328:	9907      	ldr	r1, [sp, #28]
 801432a:	2300      	movs	r3, #0
 801432c:	f7ec f8fe 	bl	800052c <__aeabi_uldivmod>
 8014330:	9006      	str	r0, [sp, #24]
 8014332:	9107      	str	r1, [sp, #28]
 8014334:	9b06      	ldr	r3, [sp, #24]
 8014336:	9a07      	ldr	r2, [sp, #28]
 8014338:	4313      	orrs	r3, r2
 801433a:	d0b0      	beq.n	801429e <_svfprintf_r+0xc7e>
 801433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801433e:	e7c3      	b.n	80142c8 <_svfprintf_r+0xca8>
 8014340:	200f      	movs	r0, #15
 8014342:	ab58      	add	r3, sp, #352	; 0x160
 8014344:	9309      	str	r3, [sp, #36]	; 0x24
 8014346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014348:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801434a:	3b01      	subs	r3, #1
 801434c:	9309      	str	r3, [sp, #36]	; 0x24
 801434e:	9b06      	ldr	r3, [sp, #24]
 8014350:	4003      	ands	r3, r0
 8014352:	5cd3      	ldrb	r3, [r2, r3]
 8014354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014356:	7013      	strb	r3, [r2, #0]
 8014358:	9b07      	ldr	r3, [sp, #28]
 801435a:	0719      	lsls	r1, r3, #28
 801435c:	9b06      	ldr	r3, [sp, #24]
 801435e:	091a      	lsrs	r2, r3, #4
 8014360:	9b07      	ldr	r3, [sp, #28]
 8014362:	4311      	orrs	r1, r2
 8014364:	091b      	lsrs	r3, r3, #4
 8014366:	9307      	str	r3, [sp, #28]
 8014368:	000b      	movs	r3, r1
 801436a:	9a07      	ldr	r2, [sp, #28]
 801436c:	9106      	str	r1, [sp, #24]
 801436e:	4313      	orrs	r3, r2
 8014370:	d1e9      	bne.n	8014346 <_svfprintf_r+0xd26>
 8014372:	e794      	b.n	801429e <_svfprintf_r+0xc7e>
 8014374:	a958      	add	r1, sp, #352	; 0x160
 8014376:	9109      	str	r1, [sp, #36]	; 0x24
 8014378:	2b00      	cmp	r3, #0
 801437a:	d190      	bne.n	801429e <_svfprintf_r+0xc7e>
 801437c:	07d3      	lsls	r3, r2, #31
 801437e:	d58e      	bpl.n	801429e <_svfprintf_r+0xc7e>
 8014380:	23e7      	movs	r3, #231	; 0xe7
 8014382:	aa1e      	add	r2, sp, #120	; 0x78
 8014384:	189b      	adds	r3, r3, r2
 8014386:	2230      	movs	r2, #48	; 0x30
 8014388:	f7ff fbf0 	bl	8013b6c <_svfprintf_r+0x54c>
 801438c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801438e:	2b00      	cmp	r3, #0
 8014390:	d100      	bne.n	8014394 <_svfprintf_r+0xd74>
 8014392:	e38a      	b.n	8014aaa <_svfprintf_r+0x148a>
 8014394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014396:	ab3f      	add	r3, sp, #252	; 0xfc
 8014398:	701a      	strb	r2, [r3, #0]
 801439a:	221b      	movs	r2, #27
 801439c:	2000      	movs	r0, #0
 801439e:	a91e      	add	r1, sp, #120	; 0x78
 80143a0:	1852      	adds	r2, r2, r1
 80143a2:	7010      	strb	r0, [r2, #0]
 80143a4:	9412      	str	r4, [sp, #72]	; 0x48
 80143a6:	f7ff faca 	bl	801393e <_svfprintf_r+0x31e>
 80143aa:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80143ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80143ae:	e592      	b.n	8013ed6 <_svfprintf_r+0x8b6>
 80143b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143b2:	e42a      	b.n	8013c0a <_svfprintf_r+0x5ea>
 80143b4:	2010      	movs	r0, #16
 80143b6:	1812      	adds	r2, r2, r0
 80143b8:	6078      	str	r0, [r7, #4]
 80143ba:	922e      	str	r2, [sp, #184]	; 0xb8
 80143bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80143be:	2b07      	cmp	r3, #7
 80143c0:	dd08      	ble.n	80143d4 <_svfprintf_r+0xdb4>
 80143c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80143c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143c8:	f002 fa7e 	bl	80168c8 <__ssprint_r>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d000      	beq.n	80143d2 <_svfprintf_r+0xdb2>
 80143d0:	e34a      	b.n	8014a68 <_svfprintf_r+0x1448>
 80143d2:	a92f      	add	r1, sp, #188	; 0xbc
 80143d4:	3c10      	subs	r4, #16
 80143d6:	000f      	movs	r7, r1
 80143d8:	f7ff fad8 	bl	801398c <_svfprintf_r+0x36c>
 80143dc:	2010      	movs	r0, #16
 80143de:	1812      	adds	r2, r2, r0
 80143e0:	6078      	str	r0, [r7, #4]
 80143e2:	922e      	str	r2, [sp, #184]	; 0xb8
 80143e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80143e6:	2b07      	cmp	r3, #7
 80143e8:	dd08      	ble.n	80143fc <_svfprintf_r+0xddc>
 80143ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80143ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143f0:	f002 fa6a 	bl	80168c8 <__ssprint_r>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	d000      	beq.n	80143fa <_svfprintf_r+0xdda>
 80143f8:	e336      	b.n	8014a68 <_svfprintf_r+0x1448>
 80143fa:	a92f      	add	r1, sp, #188	; 0xbc
 80143fc:	3c10      	subs	r4, #16
 80143fe:	000f      	movs	r7, r1
 8014400:	f7ff fb24 	bl	8013a4c <_svfprintf_r+0x42c>
 8014404:	fffffbff 	.word	0xfffffbff
 8014408:	00007830 	.word	0x00007830
 801440c:	080199c0 	.word	0x080199c0
 8014410:	2010      	movs	r0, #16
 8014412:	1812      	adds	r2, r2, r0
 8014414:	6078      	str	r0, [r7, #4]
 8014416:	922e      	str	r2, [sp, #184]	; 0xb8
 8014418:	932d      	str	r3, [sp, #180]	; 0xb4
 801441a:	2b07      	cmp	r3, #7
 801441c:	dd08      	ble.n	8014430 <_svfprintf_r+0xe10>
 801441e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014422:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014424:	f002 fa50 	bl	80168c8 <__ssprint_r>
 8014428:	2800      	cmp	r0, #0
 801442a:	d000      	beq.n	801442e <_svfprintf_r+0xe0e>
 801442c:	e31c      	b.n	8014a68 <_svfprintf_r+0x1448>
 801442e:	a92f      	add	r1, sp, #188	; 0xbc
 8014430:	3c10      	subs	r4, #16
 8014432:	000f      	movs	r7, r1
 8014434:	f7ff fb2c 	bl	8013a90 <_svfprintf_r+0x470>
 8014438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801443a:	2b65      	cmp	r3, #101	; 0x65
 801443c:	dc00      	bgt.n	8014440 <_svfprintf_r+0xe20>
 801443e:	e259      	b.n	80148f4 <_svfprintf_r+0x12d4>
 8014440:	2200      	movs	r2, #0
 8014442:	2300      	movs	r3, #0
 8014444:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014446:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014448:	f7ec f808 	bl	800045c <__aeabi_dcmpeq>
 801444c:	2800      	cmp	r0, #0
 801444e:	d07c      	beq.n	801454a <_svfprintf_r+0xf2a>
 8014450:	4b81      	ldr	r3, [pc, #516]	; (8014658 <_svfprintf_r+0x1038>)
 8014452:	603b      	str	r3, [r7, #0]
 8014454:	2301      	movs	r3, #1
 8014456:	607b      	str	r3, [r7, #4]
 8014458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801445a:	3708      	adds	r7, #8
 801445c:	3301      	adds	r3, #1
 801445e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014460:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014462:	9308      	str	r3, [sp, #32]
 8014464:	3301      	adds	r3, #1
 8014466:	932d      	str	r3, [sp, #180]	; 0xb4
 8014468:	2b07      	cmp	r3, #7
 801446a:	dd08      	ble.n	801447e <_svfprintf_r+0xe5e>
 801446c:	aa2c      	add	r2, sp, #176	; 0xb0
 801446e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014470:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014472:	f002 fa29 	bl	80168c8 <__ssprint_r>
 8014476:	2800      	cmp	r0, #0
 8014478:	d000      	beq.n	801447c <_svfprintf_r+0xe5c>
 801447a:	e2f5      	b.n	8014a68 <_svfprintf_r+0x1448>
 801447c:	af2f      	add	r7, sp, #188	; 0xbc
 801447e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014482:	4293      	cmp	r3, r2
 8014484:	db01      	blt.n	801448a <_svfprintf_r+0xe6a>
 8014486:	07f3      	lsls	r3, r6, #31
 8014488:	d51d      	bpl.n	80144c6 <_svfprintf_r+0xea6>
 801448a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801448c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801448e:	4694      	mov	ip, r2
 8014490:	603b      	str	r3, [r7, #0]
 8014492:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014494:	607b      	str	r3, [r7, #4]
 8014496:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014498:	3708      	adds	r7, #8
 801449a:	4463      	add	r3, ip
 801449c:	932e      	str	r3, [sp, #184]	; 0xb8
 801449e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144a0:	9308      	str	r3, [sp, #32]
 80144a2:	3301      	adds	r3, #1
 80144a4:	932d      	str	r3, [sp, #180]	; 0xb4
 80144a6:	2b07      	cmp	r3, #7
 80144a8:	dd08      	ble.n	80144bc <_svfprintf_r+0xe9c>
 80144aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80144ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144b0:	f002 fa0a 	bl	80168c8 <__ssprint_r>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d000      	beq.n	80144ba <_svfprintf_r+0xe9a>
 80144b8:	e2d6      	b.n	8014a68 <_svfprintf_r+0x1448>
 80144ba:	af2f      	add	r7, sp, #188	; 0xbc
 80144bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144be:	2510      	movs	r5, #16
 80144c0:	1e5c      	subs	r4, r3, #1
 80144c2:	2c00      	cmp	r4, #0
 80144c4:	dc2f      	bgt.n	8014526 <_svfprintf_r+0xf06>
 80144c6:	0773      	lsls	r3, r6, #29
 80144c8:	d500      	bpl.n	80144cc <_svfprintf_r+0xeac>
 80144ca:	e2af      	b.n	8014a2c <_svfprintf_r+0x140c>
 80144cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80144ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80144d0:	4293      	cmp	r3, r2
 80144d2:	da00      	bge.n	80144d6 <_svfprintf_r+0xeb6>
 80144d4:	0013      	movs	r3, r2
 80144d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80144d8:	18d3      	adds	r3, r2, r3
 80144da:	9315      	str	r3, [sp, #84]	; 0x54
 80144dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144de:	9308      	str	r3, [sp, #32]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d007      	beq.n	80144f4 <_svfprintf_r+0xed4>
 80144e4:	aa2c      	add	r2, sp, #176	; 0xb0
 80144e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144ea:	f002 f9ed 	bl	80168c8 <__ssprint_r>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	d000      	beq.n	80144f4 <_svfprintf_r+0xed4>
 80144f2:	e2b9      	b.n	8014a68 <_svfprintf_r+0x1448>
 80144f4:	2300      	movs	r3, #0
 80144f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80144f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d000      	beq.n	8014500 <_svfprintf_r+0xee0>
 80144fe:	e2cf      	b.n	8014aa0 <_svfprintf_r+0x1480>
 8014500:	af2f      	add	r7, sp, #188	; 0xbc
 8014502:	e5d6      	b.n	80140b2 <_svfprintf_r+0xa92>
 8014504:	3210      	adds	r2, #16
 8014506:	607d      	str	r5, [r7, #4]
 8014508:	922e      	str	r2, [sp, #184]	; 0xb8
 801450a:	932d      	str	r3, [sp, #180]	; 0xb4
 801450c:	2b07      	cmp	r3, #7
 801450e:	dd08      	ble.n	8014522 <_svfprintf_r+0xf02>
 8014510:	aa2c      	add	r2, sp, #176	; 0xb0
 8014512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014516:	f002 f9d7 	bl	80168c8 <__ssprint_r>
 801451a:	2800      	cmp	r0, #0
 801451c:	d000      	beq.n	8014520 <_svfprintf_r+0xf00>
 801451e:	e2a3      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014520:	a92f      	add	r1, sp, #188	; 0xbc
 8014522:	000f      	movs	r7, r1
 8014524:	3c10      	subs	r4, #16
 8014526:	0039      	movs	r1, r7
 8014528:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801452a:	484c      	ldr	r0, [pc, #304]	; (801465c <_svfprintf_r+0x103c>)
 801452c:	9308      	str	r3, [sp, #32]
 801452e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014530:	3301      	adds	r3, #1
 8014532:	3108      	adds	r1, #8
 8014534:	6038      	str	r0, [r7, #0]
 8014536:	2c10      	cmp	r4, #16
 8014538:	dce4      	bgt.n	8014504 <_svfprintf_r+0xee4>
 801453a:	607c      	str	r4, [r7, #4]
 801453c:	18a4      	adds	r4, r4, r2
 801453e:	942e      	str	r4, [sp, #184]	; 0xb8
 8014540:	932d      	str	r3, [sp, #180]	; 0xb4
 8014542:	000f      	movs	r7, r1
 8014544:	2b07      	cmp	r3, #7
 8014546:	ddbe      	ble.n	80144c6 <_svfprintf_r+0xea6>
 8014548:	e06a      	b.n	8014620 <_svfprintf_r+0x1000>
 801454a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801454c:	2b00      	cmp	r3, #0
 801454e:	dd00      	ble.n	8014552 <_svfprintf_r+0xf32>
 8014550:	e086      	b.n	8014660 <_svfprintf_r+0x1040>
 8014552:	4b41      	ldr	r3, [pc, #260]	; (8014658 <_svfprintf_r+0x1038>)
 8014554:	603b      	str	r3, [r7, #0]
 8014556:	2301      	movs	r3, #1
 8014558:	607b      	str	r3, [r7, #4]
 801455a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801455c:	3708      	adds	r7, #8
 801455e:	3301      	adds	r3, #1
 8014560:	932e      	str	r3, [sp, #184]	; 0xb8
 8014562:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014564:	9308      	str	r3, [sp, #32]
 8014566:	3301      	adds	r3, #1
 8014568:	932d      	str	r3, [sp, #180]	; 0xb4
 801456a:	2b07      	cmp	r3, #7
 801456c:	dd08      	ble.n	8014580 <_svfprintf_r+0xf60>
 801456e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014570:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014572:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014574:	f002 f9a8 	bl	80168c8 <__ssprint_r>
 8014578:	2800      	cmp	r0, #0
 801457a:	d000      	beq.n	801457e <_svfprintf_r+0xf5e>
 801457c:	e274      	b.n	8014a68 <_svfprintf_r+0x1448>
 801457e:	af2f      	add	r7, sp, #188	; 0xbc
 8014580:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014582:	2b00      	cmp	r3, #0
 8014584:	d104      	bne.n	8014590 <_svfprintf_r+0xf70>
 8014586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014588:	2b00      	cmp	r3, #0
 801458a:	d101      	bne.n	8014590 <_svfprintf_r+0xf70>
 801458c:	07f3      	lsls	r3, r6, #31
 801458e:	d59a      	bpl.n	80144c6 <_svfprintf_r+0xea6>
 8014590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014592:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014594:	4694      	mov	ip, r2
 8014596:	603b      	str	r3, [r7, #0]
 8014598:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801459a:	607b      	str	r3, [r7, #4]
 801459c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801459e:	3708      	adds	r7, #8
 80145a0:	4463      	add	r3, ip
 80145a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80145a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145a6:	9308      	str	r3, [sp, #32]
 80145a8:	3301      	adds	r3, #1
 80145aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80145ac:	2b07      	cmp	r3, #7
 80145ae:	dd08      	ble.n	80145c2 <_svfprintf_r+0xfa2>
 80145b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80145b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145b6:	f002 f987 	bl	80168c8 <__ssprint_r>
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d000      	beq.n	80145c0 <_svfprintf_r+0xfa0>
 80145be:	e253      	b.n	8014a68 <_svfprintf_r+0x1448>
 80145c0:	af2f      	add	r7, sp, #188	; 0xbc
 80145c2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80145c4:	2c00      	cmp	r4, #0
 80145c6:	da1a      	bge.n	80145fe <_svfprintf_r+0xfde>
 80145c8:	0039      	movs	r1, r7
 80145ca:	2510      	movs	r5, #16
 80145cc:	4264      	negs	r4, r4
 80145ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145d0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80145d2:	9308      	str	r3, [sp, #32]
 80145d4:	1c5a      	adds	r2, r3, #1
 80145d6:	4b21      	ldr	r3, [pc, #132]	; (801465c <_svfprintf_r+0x103c>)
 80145d8:	3708      	adds	r7, #8
 80145da:	600b      	str	r3, [r1, #0]
 80145dc:	2c10      	cmp	r4, #16
 80145de:	dc29      	bgt.n	8014634 <_svfprintf_r+0x1014>
 80145e0:	604c      	str	r4, [r1, #4]
 80145e2:	1824      	adds	r4, r4, r0
 80145e4:	942e      	str	r4, [sp, #184]	; 0xb8
 80145e6:	922d      	str	r2, [sp, #180]	; 0xb4
 80145e8:	2a07      	cmp	r2, #7
 80145ea:	dd08      	ble.n	80145fe <_svfprintf_r+0xfde>
 80145ec:	aa2c      	add	r2, sp, #176	; 0xb0
 80145ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145f2:	f002 f969 	bl	80168c8 <__ssprint_r>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	d000      	beq.n	80145fc <_svfprintf_r+0xfdc>
 80145fa:	e235      	b.n	8014a68 <_svfprintf_r+0x1448>
 80145fc:	af2f      	add	r7, sp, #188	; 0xbc
 80145fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014602:	468c      	mov	ip, r1
 8014604:	603b      	str	r3, [r7, #0]
 8014606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014608:	607b      	str	r3, [r7, #4]
 801460a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801460c:	4463      	add	r3, ip
 801460e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014610:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014612:	1c5a      	adds	r2, r3, #1
 8014614:	9308      	str	r3, [sp, #32]
 8014616:	922d      	str	r2, [sp, #180]	; 0xb4
 8014618:	2a07      	cmp	r2, #7
 801461a:	dc01      	bgt.n	8014620 <_svfprintf_r+0x1000>
 801461c:	f7ff fa6c 	bl	8013af8 <_svfprintf_r+0x4d8>
 8014620:	aa2c      	add	r2, sp, #176	; 0xb0
 8014622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014624:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014626:	f002 f94f 	bl	80168c8 <__ssprint_r>
 801462a:	2800      	cmp	r0, #0
 801462c:	d000      	beq.n	8014630 <_svfprintf_r+0x1010>
 801462e:	e21b      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014630:	af2f      	add	r7, sp, #188	; 0xbc
 8014632:	e748      	b.n	80144c6 <_svfprintf_r+0xea6>
 8014634:	3010      	adds	r0, #16
 8014636:	604d      	str	r5, [r1, #4]
 8014638:	902e      	str	r0, [sp, #184]	; 0xb8
 801463a:	922d      	str	r2, [sp, #180]	; 0xb4
 801463c:	2a07      	cmp	r2, #7
 801463e:	dd08      	ble.n	8014652 <_svfprintf_r+0x1032>
 8014640:	aa2c      	add	r2, sp, #176	; 0xb0
 8014642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014646:	f002 f93f 	bl	80168c8 <__ssprint_r>
 801464a:	2800      	cmp	r0, #0
 801464c:	d000      	beq.n	8014650 <_svfprintf_r+0x1030>
 801464e:	e20b      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014650:	af2f      	add	r7, sp, #188	; 0xbc
 8014652:	3c10      	subs	r4, #16
 8014654:	0039      	movs	r1, r7
 8014656:	e7ba      	b.n	80145ce <_svfprintf_r+0xfae>
 8014658:	080199e2 	.word	0x080199e2
 801465c:	080199f4 	.word	0x080199f4
 8014660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014662:	002c      	movs	r4, r5
 8014664:	429d      	cmp	r5, r3
 8014666:	dd00      	ble.n	801466a <_svfprintf_r+0x104a>
 8014668:	001c      	movs	r4, r3
 801466a:	2c00      	cmp	r4, #0
 801466c:	dd15      	ble.n	801469a <_svfprintf_r+0x107a>
 801466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014670:	607c      	str	r4, [r7, #4]
 8014672:	603b      	str	r3, [r7, #0]
 8014674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014676:	3708      	adds	r7, #8
 8014678:	18e3      	adds	r3, r4, r3
 801467a:	932e      	str	r3, [sp, #184]	; 0xb8
 801467c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801467e:	9308      	str	r3, [sp, #32]
 8014680:	3301      	adds	r3, #1
 8014682:	932d      	str	r3, [sp, #180]	; 0xb4
 8014684:	2b07      	cmp	r3, #7
 8014686:	dd08      	ble.n	801469a <_svfprintf_r+0x107a>
 8014688:	aa2c      	add	r2, sp, #176	; 0xb0
 801468a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801468c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801468e:	f002 f91b 	bl	80168c8 <__ssprint_r>
 8014692:	2800      	cmp	r0, #0
 8014694:	d000      	beq.n	8014698 <_svfprintf_r+0x1078>
 8014696:	e1e7      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014698:	af2f      	add	r7, sp, #188	; 0xbc
 801469a:	43e3      	mvns	r3, r4
 801469c:	17db      	asrs	r3, r3, #31
 801469e:	401c      	ands	r4, r3
 80146a0:	1b2c      	subs	r4, r5, r4
 80146a2:	2c00      	cmp	r4, #0
 80146a4:	dd1a      	ble.n	80146dc <_svfprintf_r+0x10bc>
 80146a6:	0039      	movs	r1, r7
 80146a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146aa:	48d4      	ldr	r0, [pc, #848]	; (80149fc <_svfprintf_r+0x13dc>)
 80146ac:	9308      	str	r3, [sp, #32]
 80146ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80146b0:	3301      	adds	r3, #1
 80146b2:	3108      	adds	r1, #8
 80146b4:	6038      	str	r0, [r7, #0]
 80146b6:	2c10      	cmp	r4, #16
 80146b8:	dd00      	ble.n	80146bc <_svfprintf_r+0x109c>
 80146ba:	e089      	b.n	80147d0 <_svfprintf_r+0x11b0>
 80146bc:	607c      	str	r4, [r7, #4]
 80146be:	18a4      	adds	r4, r4, r2
 80146c0:	942e      	str	r4, [sp, #184]	; 0xb8
 80146c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80146c4:	000f      	movs	r7, r1
 80146c6:	2b07      	cmp	r3, #7
 80146c8:	dd08      	ble.n	80146dc <_svfprintf_r+0x10bc>
 80146ca:	aa2c      	add	r2, sp, #176	; 0xb0
 80146cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146d0:	f002 f8fa 	bl	80168c8 <__ssprint_r>
 80146d4:	2800      	cmp	r0, #0
 80146d6:	d000      	beq.n	80146da <_svfprintf_r+0x10ba>
 80146d8:	e1c6      	b.n	8014a68 <_svfprintf_r+0x1448>
 80146da:	af2f      	add	r7, sp, #188	; 0xbc
 80146dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146de:	195d      	adds	r5, r3, r5
 80146e0:	0573      	lsls	r3, r6, #21
 80146e2:	d50d      	bpl.n	8014700 <_svfprintf_r+0x10e0>
 80146e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d000      	beq.n	80146ec <_svfprintf_r+0x10cc>
 80146ea:	e084      	b.n	80147f6 <_svfprintf_r+0x11d6>
 80146ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d000      	beq.n	80146f4 <_svfprintf_r+0x10d4>
 80146f2:	e083      	b.n	80147fc <_svfprintf_r+0x11dc>
 80146f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146f8:	189b      	adds	r3, r3, r2
 80146fa:	429d      	cmp	r5, r3
 80146fc:	d900      	bls.n	8014700 <_svfprintf_r+0x10e0>
 80146fe:	001d      	movs	r5, r3
 8014700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014702:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014704:	4293      	cmp	r3, r2
 8014706:	db01      	blt.n	801470c <_svfprintf_r+0x10ec>
 8014708:	07f3      	lsls	r3, r6, #31
 801470a:	d518      	bpl.n	801473e <_svfprintf_r+0x111e>
 801470c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801470e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014710:	4694      	mov	ip, r2
 8014712:	603b      	str	r3, [r7, #0]
 8014714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014716:	607b      	str	r3, [r7, #4]
 8014718:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801471a:	3708      	adds	r7, #8
 801471c:	4463      	add	r3, ip
 801471e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014720:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014722:	9308      	str	r3, [sp, #32]
 8014724:	3301      	adds	r3, #1
 8014726:	932d      	str	r3, [sp, #180]	; 0xb4
 8014728:	2b07      	cmp	r3, #7
 801472a:	dd08      	ble.n	801473e <_svfprintf_r+0x111e>
 801472c:	aa2c      	add	r2, sp, #176	; 0xb0
 801472e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014730:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014732:	f002 f8c9 	bl	80168c8 <__ssprint_r>
 8014736:	2800      	cmp	r0, #0
 8014738:	d000      	beq.n	801473c <_svfprintf_r+0x111c>
 801473a:	e195      	b.n	8014a68 <_svfprintf_r+0x1448>
 801473c:	af2f      	add	r7, sp, #188	; 0xbc
 801473e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014742:	4694      	mov	ip, r2
 8014744:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014746:	4463      	add	r3, ip
 8014748:	1b5b      	subs	r3, r3, r5
 801474a:	1a54      	subs	r4, r2, r1
 801474c:	429c      	cmp	r4, r3
 801474e:	dd00      	ble.n	8014752 <_svfprintf_r+0x1132>
 8014750:	001c      	movs	r4, r3
 8014752:	2c00      	cmp	r4, #0
 8014754:	dd14      	ble.n	8014780 <_svfprintf_r+0x1160>
 8014756:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014758:	603d      	str	r5, [r7, #0]
 801475a:	18e3      	adds	r3, r4, r3
 801475c:	932e      	str	r3, [sp, #184]	; 0xb8
 801475e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014760:	607c      	str	r4, [r7, #4]
 8014762:	9308      	str	r3, [sp, #32]
 8014764:	3301      	adds	r3, #1
 8014766:	932d      	str	r3, [sp, #180]	; 0xb4
 8014768:	3708      	adds	r7, #8
 801476a:	2b07      	cmp	r3, #7
 801476c:	dd08      	ble.n	8014780 <_svfprintf_r+0x1160>
 801476e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014772:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014774:	f002 f8a8 	bl	80168c8 <__ssprint_r>
 8014778:	2800      	cmp	r0, #0
 801477a:	d000      	beq.n	801477e <_svfprintf_r+0x115e>
 801477c:	e174      	b.n	8014a68 <_svfprintf_r+0x1448>
 801477e:	af2f      	add	r7, sp, #188	; 0xbc
 8014780:	43e3      	mvns	r3, r4
 8014782:	17db      	asrs	r3, r3, #31
 8014784:	401c      	ands	r4, r3
 8014786:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801478a:	2510      	movs	r5, #16
 801478c:	1a9b      	subs	r3, r3, r2
 801478e:	1b1c      	subs	r4, r3, r4
 8014790:	2c00      	cmp	r4, #0
 8014792:	dc00      	bgt.n	8014796 <_svfprintf_r+0x1176>
 8014794:	e697      	b.n	80144c6 <_svfprintf_r+0xea6>
 8014796:	0039      	movs	r1, r7
 8014798:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801479a:	4898      	ldr	r0, [pc, #608]	; (80149fc <_svfprintf_r+0x13dc>)
 801479c:	9308      	str	r3, [sp, #32]
 801479e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80147a0:	3301      	adds	r3, #1
 80147a2:	3108      	adds	r1, #8
 80147a4:	6038      	str	r0, [r7, #0]
 80147a6:	2c10      	cmp	r4, #16
 80147a8:	dc00      	bgt.n	80147ac <_svfprintf_r+0x118c>
 80147aa:	e6c6      	b.n	801453a <_svfprintf_r+0xf1a>
 80147ac:	3210      	adds	r2, #16
 80147ae:	607d      	str	r5, [r7, #4]
 80147b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80147b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80147b4:	2b07      	cmp	r3, #7
 80147b6:	dd08      	ble.n	80147ca <_svfprintf_r+0x11aa>
 80147b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80147ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147be:	f002 f883 	bl	80168c8 <__ssprint_r>
 80147c2:	2800      	cmp	r0, #0
 80147c4:	d000      	beq.n	80147c8 <_svfprintf_r+0x11a8>
 80147c6:	e14f      	b.n	8014a68 <_svfprintf_r+0x1448>
 80147c8:	a92f      	add	r1, sp, #188	; 0xbc
 80147ca:	3c10      	subs	r4, #16
 80147cc:	000f      	movs	r7, r1
 80147ce:	e7e2      	b.n	8014796 <_svfprintf_r+0x1176>
 80147d0:	2010      	movs	r0, #16
 80147d2:	1812      	adds	r2, r2, r0
 80147d4:	6078      	str	r0, [r7, #4]
 80147d6:	922e      	str	r2, [sp, #184]	; 0xb8
 80147d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80147da:	2b07      	cmp	r3, #7
 80147dc:	dd08      	ble.n	80147f0 <_svfprintf_r+0x11d0>
 80147de:	aa2c      	add	r2, sp, #176	; 0xb0
 80147e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147e4:	f002 f870 	bl	80168c8 <__ssprint_r>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	d000      	beq.n	80147ee <_svfprintf_r+0x11ce>
 80147ec:	e13c      	b.n	8014a68 <_svfprintf_r+0x1448>
 80147ee:	a92f      	add	r1, sp, #188	; 0xbc
 80147f0:	3c10      	subs	r4, #16
 80147f2:	000f      	movs	r7, r1
 80147f4:	e757      	b.n	80146a6 <_svfprintf_r+0x1086>
 80147f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d061      	beq.n	80148c0 <_svfprintf_r+0x12a0>
 80147fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147fe:	3b01      	subs	r3, #1
 8014800:	9310      	str	r3, [sp, #64]	; 0x40
 8014802:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014804:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014806:	4694      	mov	ip, r2
 8014808:	603b      	str	r3, [r7, #0]
 801480a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801480c:	607b      	str	r3, [r7, #4]
 801480e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014810:	3708      	adds	r7, #8
 8014812:	4463      	add	r3, ip
 8014814:	932e      	str	r3, [sp, #184]	; 0xb8
 8014816:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014818:	9308      	str	r3, [sp, #32]
 801481a:	3301      	adds	r3, #1
 801481c:	932d      	str	r3, [sp, #180]	; 0xb4
 801481e:	2b07      	cmp	r3, #7
 8014820:	dd08      	ble.n	8014834 <_svfprintf_r+0x1214>
 8014822:	aa2c      	add	r2, sp, #176	; 0xb0
 8014824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014826:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014828:	f002 f84e 	bl	80168c8 <__ssprint_r>
 801482c:	2800      	cmp	r0, #0
 801482e:	d000      	beq.n	8014832 <_svfprintf_r+0x1212>
 8014830:	e11a      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014832:	af2f      	add	r7, sp, #188	; 0xbc
 8014834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014838:	189b      	adds	r3, r3, r2
 801483a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801483c:	1b5b      	subs	r3, r3, r5
 801483e:	7814      	ldrb	r4, [r2, #0]
 8014840:	429c      	cmp	r4, r3
 8014842:	dd00      	ble.n	8014846 <_svfprintf_r+0x1226>
 8014844:	001c      	movs	r4, r3
 8014846:	2c00      	cmp	r4, #0
 8014848:	dd14      	ble.n	8014874 <_svfprintf_r+0x1254>
 801484a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801484c:	603d      	str	r5, [r7, #0]
 801484e:	18e3      	adds	r3, r4, r3
 8014850:	932e      	str	r3, [sp, #184]	; 0xb8
 8014852:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014854:	607c      	str	r4, [r7, #4]
 8014856:	9308      	str	r3, [sp, #32]
 8014858:	3301      	adds	r3, #1
 801485a:	932d      	str	r3, [sp, #180]	; 0xb4
 801485c:	3708      	adds	r7, #8
 801485e:	2b07      	cmp	r3, #7
 8014860:	dd08      	ble.n	8014874 <_svfprintf_r+0x1254>
 8014862:	aa2c      	add	r2, sp, #176	; 0xb0
 8014864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014866:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014868:	f002 f82e 	bl	80168c8 <__ssprint_r>
 801486c:	2800      	cmp	r0, #0
 801486e:	d000      	beq.n	8014872 <_svfprintf_r+0x1252>
 8014870:	e0fa      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014872:	af2f      	add	r7, sp, #188	; 0xbc
 8014874:	43e3      	mvns	r3, r4
 8014876:	17db      	asrs	r3, r3, #31
 8014878:	401c      	ands	r4, r3
 801487a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	1b1c      	subs	r4, r3, r4
 8014880:	2c00      	cmp	r4, #0
 8014882:	dd19      	ble.n	80148b8 <_svfprintf_r+0x1298>
 8014884:	0039      	movs	r1, r7
 8014886:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014888:	485c      	ldr	r0, [pc, #368]	; (80149fc <_svfprintf_r+0x13dc>)
 801488a:	9308      	str	r3, [sp, #32]
 801488c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801488e:	3301      	adds	r3, #1
 8014890:	3108      	adds	r1, #8
 8014892:	6038      	str	r0, [r7, #0]
 8014894:	2c10      	cmp	r4, #16
 8014896:	dc1a      	bgt.n	80148ce <_svfprintf_r+0x12ae>
 8014898:	607c      	str	r4, [r7, #4]
 801489a:	18a4      	adds	r4, r4, r2
 801489c:	942e      	str	r4, [sp, #184]	; 0xb8
 801489e:	932d      	str	r3, [sp, #180]	; 0xb4
 80148a0:	000f      	movs	r7, r1
 80148a2:	2b07      	cmp	r3, #7
 80148a4:	dd08      	ble.n	80148b8 <_svfprintf_r+0x1298>
 80148a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80148a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148ac:	f002 f80c 	bl	80168c8 <__ssprint_r>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d000      	beq.n	80148b6 <_svfprintf_r+0x1296>
 80148b4:	e0d8      	b.n	8014a68 <_svfprintf_r+0x1448>
 80148b6:	af2f      	add	r7, sp, #188	; 0xbc
 80148b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	18ed      	adds	r5, r5, r3
 80148be:	e711      	b.n	80146e4 <_svfprintf_r+0x10c4>
 80148c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148c2:	3b01      	subs	r3, #1
 80148c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80148c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148c8:	3b01      	subs	r3, #1
 80148ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80148cc:	e799      	b.n	8014802 <_svfprintf_r+0x11e2>
 80148ce:	2010      	movs	r0, #16
 80148d0:	1812      	adds	r2, r2, r0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	922e      	str	r2, [sp, #184]	; 0xb8
 80148d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80148d8:	2b07      	cmp	r3, #7
 80148da:	dd08      	ble.n	80148ee <_svfprintf_r+0x12ce>
 80148dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80148de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148e2:	f001 fff1 	bl	80168c8 <__ssprint_r>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d000      	beq.n	80148ec <_svfprintf_r+0x12cc>
 80148ea:	e0bd      	b.n	8014a68 <_svfprintf_r+0x1448>
 80148ec:	a92f      	add	r1, sp, #188	; 0xbc
 80148ee:	3c10      	subs	r4, #16
 80148f0:	000f      	movs	r7, r1
 80148f2:	e7c7      	b.n	8014884 <_svfprintf_r+0x1264>
 80148f4:	003c      	movs	r4, r7
 80148f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80148f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80148fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80148fc:	9308      	str	r3, [sp, #32]
 80148fe:	3101      	adds	r1, #1
 8014900:	3301      	adds	r3, #1
 8014902:	3408      	adds	r4, #8
 8014904:	2a01      	cmp	r2, #1
 8014906:	dc03      	bgt.n	8014910 <_svfprintf_r+0x12f0>
 8014908:	2201      	movs	r2, #1
 801490a:	4216      	tst	r6, r2
 801490c:	d100      	bne.n	8014910 <_svfprintf_r+0x12f0>
 801490e:	e088      	b.n	8014a22 <_svfprintf_r+0x1402>
 8014910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014912:	912e      	str	r1, [sp, #184]	; 0xb8
 8014914:	603a      	str	r2, [r7, #0]
 8014916:	2201      	movs	r2, #1
 8014918:	932d      	str	r3, [sp, #180]	; 0xb4
 801491a:	607a      	str	r2, [r7, #4]
 801491c:	2b07      	cmp	r3, #7
 801491e:	dd08      	ble.n	8014932 <_svfprintf_r+0x1312>
 8014920:	aa2c      	add	r2, sp, #176	; 0xb0
 8014922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014924:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014926:	f001 ffcf 	bl	80168c8 <__ssprint_r>
 801492a:	2800      	cmp	r0, #0
 801492c:	d000      	beq.n	8014930 <_svfprintf_r+0x1310>
 801492e:	e09b      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014930:	ac2f      	add	r4, sp, #188	; 0xbc
 8014932:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014934:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014936:	4694      	mov	ip, r2
 8014938:	6023      	str	r3, [r4, #0]
 801493a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801493c:	6063      	str	r3, [r4, #4]
 801493e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014940:	3408      	adds	r4, #8
 8014942:	4463      	add	r3, ip
 8014944:	932e      	str	r3, [sp, #184]	; 0xb8
 8014946:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014948:	9308      	str	r3, [sp, #32]
 801494a:	3301      	adds	r3, #1
 801494c:	932d      	str	r3, [sp, #180]	; 0xb4
 801494e:	2b07      	cmp	r3, #7
 8014950:	dd08      	ble.n	8014964 <_svfprintf_r+0x1344>
 8014952:	aa2c      	add	r2, sp, #176	; 0xb0
 8014954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014956:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014958:	f001 ffb6 	bl	80168c8 <__ssprint_r>
 801495c:	2800      	cmp	r0, #0
 801495e:	d000      	beq.n	8014962 <_svfprintf_r+0x1342>
 8014960:	e082      	b.n	8014a68 <_svfprintf_r+0x1448>
 8014962:	ac2f      	add	r4, sp, #188	; 0xbc
 8014964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014966:	2200      	movs	r2, #0
 8014968:	1e5d      	subs	r5, r3, #1
 801496a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801496c:	2300      	movs	r3, #0
 801496e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014970:	f7eb fd74 	bl	800045c <__aeabi_dcmpeq>
 8014974:	2800      	cmp	r0, #0
 8014976:	d12c      	bne.n	80149d2 <_svfprintf_r+0x13b2>
 8014978:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801497a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801497c:	9308      	str	r3, [sp, #32]
 801497e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014980:	6065      	str	r5, [r4, #4]
 8014982:	1c5a      	adds	r2, r3, #1
 8014984:	930e      	str	r3, [sp, #56]	; 0x38
 8014986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014988:	922d      	str	r2, [sp, #180]	; 0xb4
 801498a:	3301      	adds	r3, #1
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	9b08      	ldr	r3, [sp, #32]
 8014990:	3408      	adds	r4, #8
 8014992:	3b01      	subs	r3, #1
 8014994:	185b      	adds	r3, r3, r1
 8014996:	932e      	str	r3, [sp, #184]	; 0xb8
 8014998:	2a07      	cmp	r2, #7
 801499a:	dd07      	ble.n	80149ac <_svfprintf_r+0x138c>
 801499c:	aa2c      	add	r2, sp, #176	; 0xb0
 801499e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149a2:	f001 ff91 	bl	80168c8 <__ssprint_r>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d15e      	bne.n	8014a68 <_svfprintf_r+0x1448>
 80149aa:	ac2f      	add	r4, sp, #188	; 0xbc
 80149ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80149ae:	ab28      	add	r3, sp, #160	; 0xa0
 80149b0:	4694      	mov	ip, r2
 80149b2:	6023      	str	r3, [r4, #0]
 80149b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80149b6:	6063      	str	r3, [r4, #4]
 80149b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80149ba:	4463      	add	r3, ip
 80149bc:	932e      	str	r3, [sp, #184]	; 0xb8
 80149be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149c0:	9308      	str	r3, [sp, #32]
 80149c2:	3301      	adds	r3, #1
 80149c4:	932d      	str	r3, [sp, #180]	; 0xb4
 80149c6:	2b07      	cmp	r3, #7
 80149c8:	dd00      	ble.n	80149cc <_svfprintf_r+0x13ac>
 80149ca:	e629      	b.n	8014620 <_svfprintf_r+0x1000>
 80149cc:	3408      	adds	r4, #8
 80149ce:	0027      	movs	r7, r4
 80149d0:	e579      	b.n	80144c6 <_svfprintf_r+0xea6>
 80149d2:	2710      	movs	r7, #16
 80149d4:	2d00      	cmp	r5, #0
 80149d6:	dde9      	ble.n	80149ac <_svfprintf_r+0x138c>
 80149d8:	0021      	movs	r1, r4
 80149da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149dc:	4807      	ldr	r0, [pc, #28]	; (80149fc <_svfprintf_r+0x13dc>)
 80149de:	9308      	str	r3, [sp, #32]
 80149e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80149e2:	3301      	adds	r3, #1
 80149e4:	3108      	adds	r1, #8
 80149e6:	6020      	str	r0, [r4, #0]
 80149e8:	2d10      	cmp	r5, #16
 80149ea:	dc09      	bgt.n	8014a00 <_svfprintf_r+0x13e0>
 80149ec:	6065      	str	r5, [r4, #4]
 80149ee:	000c      	movs	r4, r1
 80149f0:	18ad      	adds	r5, r5, r2
 80149f2:	952e      	str	r5, [sp, #184]	; 0xb8
 80149f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80149f6:	2b07      	cmp	r3, #7
 80149f8:	ddd8      	ble.n	80149ac <_svfprintf_r+0x138c>
 80149fa:	e7cf      	b.n	801499c <_svfprintf_r+0x137c>
 80149fc:	080199f4 	.word	0x080199f4
 8014a00:	3210      	adds	r2, #16
 8014a02:	6067      	str	r7, [r4, #4]
 8014a04:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a06:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a08:	2b07      	cmp	r3, #7
 8014a0a:	dd07      	ble.n	8014a1c <_svfprintf_r+0x13fc>
 8014a0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a12:	f001 ff59 	bl	80168c8 <__ssprint_r>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	d126      	bne.n	8014a68 <_svfprintf_r+0x1448>
 8014a1a:	a92f      	add	r1, sp, #188	; 0xbc
 8014a1c:	3d10      	subs	r5, #16
 8014a1e:	000c      	movs	r4, r1
 8014a20:	e7da      	b.n	80149d8 <_svfprintf_r+0x13b8>
 8014a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a24:	912e      	str	r1, [sp, #184]	; 0xb8
 8014a26:	c705      	stmia	r7!, {r0, r2}
 8014a28:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a2a:	e7e4      	b.n	80149f6 <_svfprintf_r+0x13d6>
 8014a2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014a2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a30:	2510      	movs	r5, #16
 8014a32:	1a9c      	subs	r4, r3, r2
 8014a34:	2c00      	cmp	r4, #0
 8014a36:	dc00      	bgt.n	8014a3a <_svfprintf_r+0x141a>
 8014a38:	e548      	b.n	80144cc <_svfprintf_r+0xeac>
 8014a3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a3c:	4921      	ldr	r1, [pc, #132]	; (8014ac4 <_svfprintf_r+0x14a4>)
 8014a3e:	9308      	str	r3, [sp, #32]
 8014a40:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014a42:	3301      	adds	r3, #1
 8014a44:	6039      	str	r1, [r7, #0]
 8014a46:	2c10      	cmp	r4, #16
 8014a48:	dc19      	bgt.n	8014a7e <_svfprintf_r+0x145e>
 8014a4a:	607c      	str	r4, [r7, #4]
 8014a4c:	18a4      	adds	r4, r4, r2
 8014a4e:	942e      	str	r4, [sp, #184]	; 0xb8
 8014a50:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a52:	2b07      	cmp	r3, #7
 8014a54:	dc00      	bgt.n	8014a58 <_svfprintf_r+0x1438>
 8014a56:	e539      	b.n	80144cc <_svfprintf_r+0xeac>
 8014a58:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a5e:	f001 ff33 	bl	80168c8 <__ssprint_r>
 8014a62:	2800      	cmp	r0, #0
 8014a64:	d100      	bne.n	8014a68 <_svfprintf_r+0x1448>
 8014a66:	e531      	b.n	80144cc <_svfprintf_r+0xeac>
 8014a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d101      	bne.n	8014a72 <_svfprintf_r+0x1452>
 8014a6e:	f7ff f908 	bl	8013c82 <_svfprintf_r+0x662>
 8014a72:	0019      	movs	r1, r3
 8014a74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a76:	f000 ff19 	bl	80158ac <_free_r>
 8014a7a:	f7ff f902 	bl	8013c82 <_svfprintf_r+0x662>
 8014a7e:	3210      	adds	r2, #16
 8014a80:	607d      	str	r5, [r7, #4]
 8014a82:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a84:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a86:	3708      	adds	r7, #8
 8014a88:	2b07      	cmp	r3, #7
 8014a8a:	dd07      	ble.n	8014a9c <_svfprintf_r+0x147c>
 8014a8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a92:	f001 ff19 	bl	80168c8 <__ssprint_r>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d1e6      	bne.n	8014a68 <_svfprintf_r+0x1448>
 8014a9a:	af2f      	add	r7, sp, #188	; 0xbc
 8014a9c:	3c10      	subs	r4, #16
 8014a9e:	e7cc      	b.n	8014a3a <_svfprintf_r+0x141a>
 8014aa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014aa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014aa4:	f000 ff02 	bl	80158ac <_free_r>
 8014aa8:	e52a      	b.n	8014500 <_svfprintf_r+0xee0>
 8014aaa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014aac:	9306      	str	r3, [sp, #24]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d101      	bne.n	8014ab6 <_svfprintf_r+0x1496>
 8014ab2:	f7ff f8e6 	bl	8013c82 <_svfprintf_r+0x662>
 8014ab6:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014aba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014abc:	f001 ff04 	bl	80168c8 <__ssprint_r>
 8014ac0:	f7ff f8df 	bl	8013c82 <_svfprintf_r+0x662>
 8014ac4:	080199e4 	.word	0x080199e4

08014ac8 <sysconf>:
 8014ac8:	2380      	movs	r3, #128	; 0x80
 8014aca:	b510      	push	{r4, lr}
 8014acc:	015b      	lsls	r3, r3, #5
 8014ace:	2808      	cmp	r0, #8
 8014ad0:	d004      	beq.n	8014adc <sysconf+0x14>
 8014ad2:	f000 fe7d 	bl	80157d0 <__errno>
 8014ad6:	2316      	movs	r3, #22
 8014ad8:	6003      	str	r3, [r0, #0]
 8014ada:	3b17      	subs	r3, #23
 8014adc:	0018      	movs	r0, r3
 8014ade:	bd10      	pop	{r4, pc}

08014ae0 <__ascii_wctomb>:
 8014ae0:	1e0b      	subs	r3, r1, #0
 8014ae2:	d004      	beq.n	8014aee <__ascii_wctomb+0xe>
 8014ae4:	2aff      	cmp	r2, #255	; 0xff
 8014ae6:	d904      	bls.n	8014af2 <__ascii_wctomb+0x12>
 8014ae8:	238a      	movs	r3, #138	; 0x8a
 8014aea:	6003      	str	r3, [r0, #0]
 8014aec:	3b8b      	subs	r3, #139	; 0x8b
 8014aee:	0018      	movs	r0, r3
 8014af0:	4770      	bx	lr
 8014af2:	700a      	strb	r2, [r1, #0]
 8014af4:	2301      	movs	r3, #1
 8014af6:	e7fa      	b.n	8014aee <__ascii_wctomb+0xe>

08014af8 <register_fini>:
 8014af8:	4b03      	ldr	r3, [pc, #12]	; (8014b08 <register_fini+0x10>)
 8014afa:	b510      	push	{r4, lr}
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d002      	beq.n	8014b06 <register_fini+0xe>
 8014b00:	4802      	ldr	r0, [pc, #8]	; (8014b0c <register_fini+0x14>)
 8014b02:	f000 f805 	bl	8014b10 <atexit>
 8014b06:	bd10      	pop	{r4, pc}
 8014b08:	00000000 	.word	0x00000000
 8014b0c:	080157dd 	.word	0x080157dd

08014b10 <atexit>:
 8014b10:	2300      	movs	r3, #0
 8014b12:	b510      	push	{r4, lr}
 8014b14:	0001      	movs	r1, r0
 8014b16:	001a      	movs	r2, r3
 8014b18:	0018      	movs	r0, r3
 8014b1a:	f001 ff53 	bl	80169c4 <__register_exitproc>
 8014b1e:	bd10      	pop	{r4, pc}

08014b20 <quorem>:
 8014b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b22:	6903      	ldr	r3, [r0, #16]
 8014b24:	690c      	ldr	r4, [r1, #16]
 8014b26:	b089      	sub	sp, #36	; 0x24
 8014b28:	0007      	movs	r7, r0
 8014b2a:	9105      	str	r1, [sp, #20]
 8014b2c:	2600      	movs	r6, #0
 8014b2e:	42a3      	cmp	r3, r4
 8014b30:	db65      	blt.n	8014bfe <quorem+0xde>
 8014b32:	000b      	movs	r3, r1
 8014b34:	3c01      	subs	r4, #1
 8014b36:	3314      	adds	r3, #20
 8014b38:	00a5      	lsls	r5, r4, #2
 8014b3a:	9303      	str	r3, [sp, #12]
 8014b3c:	195b      	adds	r3, r3, r5
 8014b3e:	9304      	str	r3, [sp, #16]
 8014b40:	0003      	movs	r3, r0
 8014b42:	3314      	adds	r3, #20
 8014b44:	9302      	str	r3, [sp, #8]
 8014b46:	195d      	adds	r5, r3, r5
 8014b48:	9b04      	ldr	r3, [sp, #16]
 8014b4a:	6828      	ldr	r0, [r5, #0]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	1c59      	adds	r1, r3, #1
 8014b50:	9301      	str	r3, [sp, #4]
 8014b52:	f7eb fafd 	bl	8000150 <__udivsi3>
 8014b56:	9001      	str	r0, [sp, #4]
 8014b58:	42b0      	cmp	r0, r6
 8014b5a:	d029      	beq.n	8014bb0 <quorem+0x90>
 8014b5c:	9b03      	ldr	r3, [sp, #12]
 8014b5e:	9802      	ldr	r0, [sp, #8]
 8014b60:	469c      	mov	ip, r3
 8014b62:	9606      	str	r6, [sp, #24]
 8014b64:	4662      	mov	r2, ip
 8014b66:	ca08      	ldmia	r2!, {r3}
 8014b68:	4694      	mov	ip, r2
 8014b6a:	9a01      	ldr	r2, [sp, #4]
 8014b6c:	b299      	uxth	r1, r3
 8014b6e:	4351      	muls	r1, r2
 8014b70:	0c1b      	lsrs	r3, r3, #16
 8014b72:	4353      	muls	r3, r2
 8014b74:	1989      	adds	r1, r1, r6
 8014b76:	0c0a      	lsrs	r2, r1, #16
 8014b78:	189b      	adds	r3, r3, r2
 8014b7a:	9307      	str	r3, [sp, #28]
 8014b7c:	0c1e      	lsrs	r6, r3, #16
 8014b7e:	6803      	ldr	r3, [r0, #0]
 8014b80:	b289      	uxth	r1, r1
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	9b06      	ldr	r3, [sp, #24]
 8014b86:	18d2      	adds	r2, r2, r3
 8014b88:	6803      	ldr	r3, [r0, #0]
 8014b8a:	1a52      	subs	r2, r2, r1
 8014b8c:	0c19      	lsrs	r1, r3, #16
 8014b8e:	466b      	mov	r3, sp
 8014b90:	8b9b      	ldrh	r3, [r3, #28]
 8014b92:	1acb      	subs	r3, r1, r3
 8014b94:	1411      	asrs	r1, r2, #16
 8014b96:	185b      	adds	r3, r3, r1
 8014b98:	1419      	asrs	r1, r3, #16
 8014b9a:	b292      	uxth	r2, r2
 8014b9c:	041b      	lsls	r3, r3, #16
 8014b9e:	431a      	orrs	r2, r3
 8014ba0:	9b04      	ldr	r3, [sp, #16]
 8014ba2:	9106      	str	r1, [sp, #24]
 8014ba4:	c004      	stmia	r0!, {r2}
 8014ba6:	4563      	cmp	r3, ip
 8014ba8:	d2dc      	bcs.n	8014b64 <quorem+0x44>
 8014baa:	682b      	ldr	r3, [r5, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d02d      	beq.n	8014c0c <quorem+0xec>
 8014bb0:	9905      	ldr	r1, [sp, #20]
 8014bb2:	0038      	movs	r0, r7
 8014bb4:	f001 fcb2 	bl	801651c <__mcmp>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	db1f      	blt.n	8014bfc <quorem+0xdc>
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	9b01      	ldr	r3, [sp, #4]
 8014bc0:	9802      	ldr	r0, [sp, #8]
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	9903      	ldr	r1, [sp, #12]
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	6802      	ldr	r2, [r0, #0]
 8014bca:	c908      	ldmia	r1!, {r3}
 8014bcc:	b292      	uxth	r2, r2
 8014bce:	1955      	adds	r5, r2, r5
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	1aaa      	subs	r2, r5, r2
 8014bd4:	6805      	ldr	r5, [r0, #0]
 8014bd6:	0c1b      	lsrs	r3, r3, #16
 8014bd8:	0c2d      	lsrs	r5, r5, #16
 8014bda:	1aeb      	subs	r3, r5, r3
 8014bdc:	1415      	asrs	r5, r2, #16
 8014bde:	195b      	adds	r3, r3, r5
 8014be0:	141d      	asrs	r5, r3, #16
 8014be2:	b292      	uxth	r2, r2
 8014be4:	041b      	lsls	r3, r3, #16
 8014be6:	4313      	orrs	r3, r2
 8014be8:	c008      	stmia	r0!, {r3}
 8014bea:	9b04      	ldr	r3, [sp, #16]
 8014bec:	428b      	cmp	r3, r1
 8014bee:	d2eb      	bcs.n	8014bc8 <quorem+0xa8>
 8014bf0:	9a02      	ldr	r2, [sp, #8]
 8014bf2:	00a3      	lsls	r3, r4, #2
 8014bf4:	18d3      	adds	r3, r2, r3
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	2a00      	cmp	r2, #0
 8014bfa:	d011      	beq.n	8014c20 <quorem+0x100>
 8014bfc:	9e01      	ldr	r6, [sp, #4]
 8014bfe:	0030      	movs	r0, r6
 8014c00:	b009      	add	sp, #36	; 0x24
 8014c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c04:	682b      	ldr	r3, [r5, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d104      	bne.n	8014c14 <quorem+0xf4>
 8014c0a:	3c01      	subs	r4, #1
 8014c0c:	9b02      	ldr	r3, [sp, #8]
 8014c0e:	3d04      	subs	r5, #4
 8014c10:	42ab      	cmp	r3, r5
 8014c12:	d3f7      	bcc.n	8014c04 <quorem+0xe4>
 8014c14:	613c      	str	r4, [r7, #16]
 8014c16:	e7cb      	b.n	8014bb0 <quorem+0x90>
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	2a00      	cmp	r2, #0
 8014c1c:	d104      	bne.n	8014c28 <quorem+0x108>
 8014c1e:	3c01      	subs	r4, #1
 8014c20:	9a02      	ldr	r2, [sp, #8]
 8014c22:	3b04      	subs	r3, #4
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d3f7      	bcc.n	8014c18 <quorem+0xf8>
 8014c28:	613c      	str	r4, [r7, #16]
 8014c2a:	e7e7      	b.n	8014bfc <quorem+0xdc>

08014c2c <_dtoa_r>:
 8014c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c2e:	0014      	movs	r4, r2
 8014c30:	001d      	movs	r5, r3
 8014c32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014c34:	b09b      	sub	sp, #108	; 0x6c
 8014c36:	9002      	str	r0, [sp, #8]
 8014c38:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8014c3a:	9406      	str	r4, [sp, #24]
 8014c3c:	9507      	str	r5, [sp, #28]
 8014c3e:	2900      	cmp	r1, #0
 8014c40:	d009      	beq.n	8014c56 <_dtoa_r+0x2a>
 8014c42:	2301      	movs	r3, #1
 8014c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c46:	4093      	lsls	r3, r2
 8014c48:	604a      	str	r2, [r1, #4]
 8014c4a:	608b      	str	r3, [r1, #8]
 8014c4c:	f001 fa6a 	bl	8016124 <_Bfree>
 8014c50:	2300      	movs	r3, #0
 8014c52:	9a02      	ldr	r2, [sp, #8]
 8014c54:	6413      	str	r3, [r2, #64]	; 0x40
 8014c56:	2d00      	cmp	r5, #0
 8014c58:	da20      	bge.n	8014c9c <_dtoa_r+0x70>
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	6033      	str	r3, [r6, #0]
 8014c5e:	006b      	lsls	r3, r5, #1
 8014c60:	085b      	lsrs	r3, r3, #1
 8014c62:	9307      	str	r3, [sp, #28]
 8014c64:	9c07      	ldr	r4, [sp, #28]
 8014c66:	4bb2      	ldr	r3, [pc, #712]	; (8014f30 <_dtoa_r+0x304>)
 8014c68:	0022      	movs	r2, r4
 8014c6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c6c:	401a      	ands	r2, r3
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d117      	bne.n	8014ca2 <_dtoa_r+0x76>
 8014c72:	4bb0      	ldr	r3, [pc, #704]	; (8014f34 <_dtoa_r+0x308>)
 8014c74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014c76:	6013      	str	r3, [r2, #0]
 8014c78:	9b06      	ldr	r3, [sp, #24]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d103      	bne.n	8014c86 <_dtoa_r+0x5a>
 8014c7e:	0324      	lsls	r4, r4, #12
 8014c80:	d101      	bne.n	8014c86 <_dtoa_r+0x5a>
 8014c82:	f000 fd89 	bl	8015798 <_dtoa_r+0xb6c>
 8014c86:	4bac      	ldr	r3, [pc, #688]	; (8014f38 <_dtoa_r+0x30c>)
 8014c88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014c8a:	9308      	str	r3, [sp, #32]
 8014c8c:	2a00      	cmp	r2, #0
 8014c8e:	d002      	beq.n	8014c96 <_dtoa_r+0x6a>
 8014c90:	4baa      	ldr	r3, [pc, #680]	; (8014f3c <_dtoa_r+0x310>)
 8014c92:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014c94:	6013      	str	r3, [r2, #0]
 8014c96:	9808      	ldr	r0, [sp, #32]
 8014c98:	b01b      	add	sp, #108	; 0x6c
 8014c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	6033      	str	r3, [r6, #0]
 8014ca0:	e7e0      	b.n	8014c64 <_dtoa_r+0x38>
 8014ca2:	9e06      	ldr	r6, [sp, #24]
 8014ca4:	9f07      	ldr	r7, [sp, #28]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	2300      	movs	r3, #0
 8014caa:	0030      	movs	r0, r6
 8014cac:	0039      	movs	r1, r7
 8014cae:	f7eb fbd5 	bl	800045c <__aeabi_dcmpeq>
 8014cb2:	1e05      	subs	r5, r0, #0
 8014cb4:	d00b      	beq.n	8014cce <_dtoa_r+0xa2>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014cba:	6013      	str	r3, [r2, #0]
 8014cbc:	4ba0      	ldr	r3, [pc, #640]	; (8014f40 <_dtoa_r+0x314>)
 8014cbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014cc0:	9308      	str	r3, [sp, #32]
 8014cc2:	2a00      	cmp	r2, #0
 8014cc4:	d0e7      	beq.n	8014c96 <_dtoa_r+0x6a>
 8014cc6:	4a9f      	ldr	r2, [pc, #636]	; (8014f44 <_dtoa_r+0x318>)
 8014cc8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014cca:	600a      	str	r2, [r1, #0]
 8014ccc:	e7e3      	b.n	8014c96 <_dtoa_r+0x6a>
 8014cce:	ab18      	add	r3, sp, #96	; 0x60
 8014cd0:	9301      	str	r3, [sp, #4]
 8014cd2:	ab19      	add	r3, sp, #100	; 0x64
 8014cd4:	9300      	str	r3, [sp, #0]
 8014cd6:	0032      	movs	r2, r6
 8014cd8:	003b      	movs	r3, r7
 8014cda:	9802      	ldr	r0, [sp, #8]
 8014cdc:	f001 fd0e 	bl	80166fc <__d2b>
 8014ce0:	0063      	lsls	r3, r4, #1
 8014ce2:	9003      	str	r0, [sp, #12]
 8014ce4:	0d5b      	lsrs	r3, r3, #21
 8014ce6:	d074      	beq.n	8014dd2 <_dtoa_r+0x1a6>
 8014ce8:	033a      	lsls	r2, r7, #12
 8014cea:	4c97      	ldr	r4, [pc, #604]	; (8014f48 <_dtoa_r+0x31c>)
 8014cec:	0b12      	lsrs	r2, r2, #12
 8014cee:	4314      	orrs	r4, r2
 8014cf0:	0021      	movs	r1, r4
 8014cf2:	4a96      	ldr	r2, [pc, #600]	; (8014f4c <_dtoa_r+0x320>)
 8014cf4:	0030      	movs	r0, r6
 8014cf6:	9516      	str	r5, [sp, #88]	; 0x58
 8014cf8:	189e      	adds	r6, r3, r2
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	4b94      	ldr	r3, [pc, #592]	; (8014f50 <_dtoa_r+0x324>)
 8014cfe:	f7ed fb0b 	bl	8002318 <__aeabi_dsub>
 8014d02:	4a94      	ldr	r2, [pc, #592]	; (8014f54 <_dtoa_r+0x328>)
 8014d04:	4b94      	ldr	r3, [pc, #592]	; (8014f58 <_dtoa_r+0x32c>)
 8014d06:	f7ed f895 	bl	8001e34 <__aeabi_dmul>
 8014d0a:	4a94      	ldr	r2, [pc, #592]	; (8014f5c <_dtoa_r+0x330>)
 8014d0c:	4b94      	ldr	r3, [pc, #592]	; (8014f60 <_dtoa_r+0x334>)
 8014d0e:	f7ec f96b 	bl	8000fe8 <__aeabi_dadd>
 8014d12:	0004      	movs	r4, r0
 8014d14:	0030      	movs	r0, r6
 8014d16:	000d      	movs	r5, r1
 8014d18:	f7ed fe98 	bl	8002a4c <__aeabi_i2d>
 8014d1c:	4a91      	ldr	r2, [pc, #580]	; (8014f64 <_dtoa_r+0x338>)
 8014d1e:	4b92      	ldr	r3, [pc, #584]	; (8014f68 <_dtoa_r+0x33c>)
 8014d20:	f7ed f888 	bl	8001e34 <__aeabi_dmul>
 8014d24:	0002      	movs	r2, r0
 8014d26:	000b      	movs	r3, r1
 8014d28:	0020      	movs	r0, r4
 8014d2a:	0029      	movs	r1, r5
 8014d2c:	f7ec f95c 	bl	8000fe8 <__aeabi_dadd>
 8014d30:	0004      	movs	r4, r0
 8014d32:	000d      	movs	r5, r1
 8014d34:	f7ed fe54 	bl	80029e0 <__aeabi_d2iz>
 8014d38:	2200      	movs	r2, #0
 8014d3a:	0007      	movs	r7, r0
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	0020      	movs	r0, r4
 8014d40:	0029      	movs	r1, r5
 8014d42:	f7eb fb91 	bl	8000468 <__aeabi_dcmplt>
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d009      	beq.n	8014d5e <_dtoa_r+0x132>
 8014d4a:	0038      	movs	r0, r7
 8014d4c:	f7ed fe7e 	bl	8002a4c <__aeabi_i2d>
 8014d50:	002b      	movs	r3, r5
 8014d52:	0022      	movs	r2, r4
 8014d54:	f7eb fb82 	bl	800045c <__aeabi_dcmpeq>
 8014d58:	4243      	negs	r3, r0
 8014d5a:	4158      	adcs	r0, r3
 8014d5c:	1a3f      	subs	r7, r7, r0
 8014d5e:	2301      	movs	r3, #1
 8014d60:	9314      	str	r3, [sp, #80]	; 0x50
 8014d62:	2f16      	cmp	r7, #22
 8014d64:	d80d      	bhi.n	8014d82 <_dtoa_r+0x156>
 8014d66:	4981      	ldr	r1, [pc, #516]	; (8014f6c <_dtoa_r+0x340>)
 8014d68:	00fb      	lsls	r3, r7, #3
 8014d6a:	18c9      	adds	r1, r1, r3
 8014d6c:	6808      	ldr	r0, [r1, #0]
 8014d6e:	6849      	ldr	r1, [r1, #4]
 8014d70:	9a06      	ldr	r2, [sp, #24]
 8014d72:	9b07      	ldr	r3, [sp, #28]
 8014d74:	f7eb fb8c 	bl	8000490 <__aeabi_dcmpgt>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d046      	beq.n	8014e0a <_dtoa_r+0x1de>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	3f01      	subs	r7, #1
 8014d80:	9314      	str	r3, [sp, #80]	; 0x50
 8014d82:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014d84:	1b9e      	subs	r6, r3, r6
 8014d86:	2300      	movs	r3, #0
 8014d88:	930a      	str	r3, [sp, #40]	; 0x28
 8014d8a:	0033      	movs	r3, r6
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d90:	d504      	bpl.n	8014d9c <_dtoa_r+0x170>
 8014d92:	2301      	movs	r3, #1
 8014d94:	1b9b      	subs	r3, r3, r6
 8014d96:	930a      	str	r3, [sp, #40]	; 0x28
 8014d98:	2300      	movs	r3, #0
 8014d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d9c:	2f00      	cmp	r7, #0
 8014d9e:	db36      	blt.n	8014e0e <_dtoa_r+0x1e2>
 8014da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014da2:	9711      	str	r7, [sp, #68]	; 0x44
 8014da4:	19db      	adds	r3, r3, r7
 8014da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014da8:	2300      	movs	r3, #0
 8014daa:	9304      	str	r3, [sp, #16]
 8014dac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014dae:	2401      	movs	r4, #1
 8014db0:	2b09      	cmp	r3, #9
 8014db2:	d900      	bls.n	8014db6 <_dtoa_r+0x18a>
 8014db4:	e082      	b.n	8014ebc <_dtoa_r+0x290>
 8014db6:	2b05      	cmp	r3, #5
 8014db8:	dd02      	ble.n	8014dc0 <_dtoa_r+0x194>
 8014dba:	2400      	movs	r4, #0
 8014dbc:	3b04      	subs	r3, #4
 8014dbe:	9320      	str	r3, [sp, #128]	; 0x80
 8014dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014dc2:	1e98      	subs	r0, r3, #2
 8014dc4:	2803      	cmp	r0, #3
 8014dc6:	d900      	bls.n	8014dca <_dtoa_r+0x19e>
 8014dc8:	e082      	b.n	8014ed0 <_dtoa_r+0x2a4>
 8014dca:	f7eb f9ad 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014dce:	7573      	.short	0x7573
 8014dd0:	6828      	.short	0x6828
 8014dd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014dd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014dd6:	189e      	adds	r6, r3, r2
 8014dd8:	4b65      	ldr	r3, [pc, #404]	; (8014f70 <_dtoa_r+0x344>)
 8014dda:	18f2      	adds	r2, r6, r3
 8014ddc:	2a20      	cmp	r2, #32
 8014dde:	dd0f      	ble.n	8014e00 <_dtoa_r+0x1d4>
 8014de0:	2340      	movs	r3, #64	; 0x40
 8014de2:	1a9b      	subs	r3, r3, r2
 8014de4:	409c      	lsls	r4, r3
 8014de6:	4b63      	ldr	r3, [pc, #396]	; (8014f74 <_dtoa_r+0x348>)
 8014de8:	9806      	ldr	r0, [sp, #24]
 8014dea:	18f3      	adds	r3, r6, r3
 8014dec:	40d8      	lsrs	r0, r3
 8014dee:	4320      	orrs	r0, r4
 8014df0:	f7ed fe66 	bl	8002ac0 <__aeabi_ui2d>
 8014df4:	2301      	movs	r3, #1
 8014df6:	4c60      	ldr	r4, [pc, #384]	; (8014f78 <_dtoa_r+0x34c>)
 8014df8:	3e01      	subs	r6, #1
 8014dfa:	1909      	adds	r1, r1, r4
 8014dfc:	9316      	str	r3, [sp, #88]	; 0x58
 8014dfe:	e77c      	b.n	8014cfa <_dtoa_r+0xce>
 8014e00:	2320      	movs	r3, #32
 8014e02:	9806      	ldr	r0, [sp, #24]
 8014e04:	1a9b      	subs	r3, r3, r2
 8014e06:	4098      	lsls	r0, r3
 8014e08:	e7f2      	b.n	8014df0 <_dtoa_r+0x1c4>
 8014e0a:	9014      	str	r0, [sp, #80]	; 0x50
 8014e0c:	e7b9      	b.n	8014d82 <_dtoa_r+0x156>
 8014e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e10:	1bdb      	subs	r3, r3, r7
 8014e12:	930a      	str	r3, [sp, #40]	; 0x28
 8014e14:	427b      	negs	r3, r7
 8014e16:	9304      	str	r3, [sp, #16]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	9311      	str	r3, [sp, #68]	; 0x44
 8014e1c:	e7c6      	b.n	8014dac <_dtoa_r+0x180>
 8014e1e:	2301      	movs	r3, #1
 8014e20:	930d      	str	r3, [sp, #52]	; 0x34
 8014e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	dd57      	ble.n	8014ed8 <_dtoa_r+0x2ac>
 8014e28:	930c      	str	r3, [sp, #48]	; 0x30
 8014e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	9902      	ldr	r1, [sp, #8]
 8014e30:	644a      	str	r2, [r1, #68]	; 0x44
 8014e32:	3204      	adds	r2, #4
 8014e34:	0010      	movs	r0, r2
 8014e36:	9902      	ldr	r1, [sp, #8]
 8014e38:	3014      	adds	r0, #20
 8014e3a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8014e3c:	4298      	cmp	r0, r3
 8014e3e:	d950      	bls.n	8014ee2 <_dtoa_r+0x2b6>
 8014e40:	9802      	ldr	r0, [sp, #8]
 8014e42:	f001 f947 	bl	80160d4 <_Balloc>
 8014e46:	9b02      	ldr	r3, [sp, #8]
 8014e48:	9008      	str	r0, [sp, #32]
 8014e4a:	6418      	str	r0, [r3, #64]	; 0x40
 8014e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e4e:	2b0e      	cmp	r3, #14
 8014e50:	d900      	bls.n	8014e54 <_dtoa_r+0x228>
 8014e52:	e10c      	b.n	801506e <_dtoa_r+0x442>
 8014e54:	2c00      	cmp	r4, #0
 8014e56:	d100      	bne.n	8014e5a <_dtoa_r+0x22e>
 8014e58:	e109      	b.n	801506e <_dtoa_r+0x442>
 8014e5a:	9b06      	ldr	r3, [sp, #24]
 8014e5c:	9c07      	ldr	r4, [sp, #28]
 8014e5e:	9312      	str	r3, [sp, #72]	; 0x48
 8014e60:	9413      	str	r4, [sp, #76]	; 0x4c
 8014e62:	2f00      	cmp	r7, #0
 8014e64:	dc00      	bgt.n	8014e68 <_dtoa_r+0x23c>
 8014e66:	e08b      	b.n	8014f80 <_dtoa_r+0x354>
 8014e68:	210f      	movs	r1, #15
 8014e6a:	003a      	movs	r2, r7
 8014e6c:	4b3f      	ldr	r3, [pc, #252]	; (8014f6c <_dtoa_r+0x340>)
 8014e6e:	400a      	ands	r2, r1
 8014e70:	00d2      	lsls	r2, r2, #3
 8014e72:	189b      	adds	r3, r3, r2
 8014e74:	681d      	ldr	r5, [r3, #0]
 8014e76:	685e      	ldr	r6, [r3, #4]
 8014e78:	2302      	movs	r3, #2
 8014e7a:	113c      	asrs	r4, r7, #4
 8014e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8014e7e:	06e3      	lsls	r3, r4, #27
 8014e80:	d50b      	bpl.n	8014e9a <_dtoa_r+0x26e>
 8014e82:	4b3e      	ldr	r3, [pc, #248]	; (8014f7c <_dtoa_r+0x350>)
 8014e84:	400c      	ands	r4, r1
 8014e86:	6a1a      	ldr	r2, [r3, #32]
 8014e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014e8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014e8e:	f7ec fbc7 	bl	8001620 <__aeabi_ddiv>
 8014e92:	2303      	movs	r3, #3
 8014e94:	9006      	str	r0, [sp, #24]
 8014e96:	9107      	str	r1, [sp, #28]
 8014e98:	930e      	str	r3, [sp, #56]	; 0x38
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	e03b      	b.n	8014f16 <_dtoa_r+0x2ea>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	930d      	str	r3, [sp, #52]	; 0x34
 8014ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ea4:	18fb      	adds	r3, r7, r3
 8014ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	dcbd      	bgt.n	8014e2c <_dtoa_r+0x200>
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	e7bb      	b.n	8014e2c <_dtoa_r+0x200>
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	e7b3      	b.n	8014e20 <_dtoa_r+0x1f4>
 8014eb8:	2300      	movs	r3, #0
 8014eba:	e7f1      	b.n	8014ea0 <_dtoa_r+0x274>
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	940d      	str	r4, [sp, #52]	; 0x34
 8014ec0:	9320      	str	r3, [sp, #128]	; 0x80
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8014eca:	3313      	adds	r3, #19
 8014ecc:	9221      	str	r2, [sp, #132]	; 0x84
 8014ece:	e7ad      	b.n	8014e2c <_dtoa_r+0x200>
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8014ed4:	3b02      	subs	r3, #2
 8014ed6:	e7f5      	b.n	8014ec4 <_dtoa_r+0x298>
 8014ed8:	2301      	movs	r3, #1
 8014eda:	930c      	str	r3, [sp, #48]	; 0x30
 8014edc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ede:	001a      	movs	r2, r3
 8014ee0:	e7f4      	b.n	8014ecc <_dtoa_r+0x2a0>
 8014ee2:	9802      	ldr	r0, [sp, #8]
 8014ee4:	3101      	adds	r1, #1
 8014ee6:	6441      	str	r1, [r0, #68]	; 0x44
 8014ee8:	0052      	lsls	r2, r2, #1
 8014eea:	e7a3      	b.n	8014e34 <_dtoa_r+0x208>
 8014eec:	2301      	movs	r3, #1
 8014eee:	421c      	tst	r4, r3
 8014ef0:	d00e      	beq.n	8014f10 <_dtoa_r+0x2e4>
 8014ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ef4:	4a21      	ldr	r2, [pc, #132]	; (8014f7c <_dtoa_r+0x350>)
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	930e      	str	r3, [sp, #56]	; 0x38
 8014efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014efc:	0028      	movs	r0, r5
 8014efe:	00db      	lsls	r3, r3, #3
 8014f00:	189b      	adds	r3, r3, r2
 8014f02:	0031      	movs	r1, r6
 8014f04:	681a      	ldr	r2, [r3, #0]
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	f7ec ff94 	bl	8001e34 <__aeabi_dmul>
 8014f0c:	0005      	movs	r5, r0
 8014f0e:	000e      	movs	r6, r1
 8014f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f12:	1064      	asrs	r4, r4, #1
 8014f14:	3301      	adds	r3, #1
 8014f16:	9310      	str	r3, [sp, #64]	; 0x40
 8014f18:	2c00      	cmp	r4, #0
 8014f1a:	d1e7      	bne.n	8014eec <_dtoa_r+0x2c0>
 8014f1c:	9806      	ldr	r0, [sp, #24]
 8014f1e:	9907      	ldr	r1, [sp, #28]
 8014f20:	002a      	movs	r2, r5
 8014f22:	0033      	movs	r3, r6
 8014f24:	f7ec fb7c 	bl	8001620 <__aeabi_ddiv>
 8014f28:	9006      	str	r0, [sp, #24]
 8014f2a:	9107      	str	r1, [sp, #28]
 8014f2c:	e043      	b.n	8014fb6 <_dtoa_r+0x38a>
 8014f2e:	46c0      	nop			; (mov r8, r8)
 8014f30:	7ff00000 	.word	0x7ff00000
 8014f34:	0000270f 	.word	0x0000270f
 8014f38:	08019b0e 	.word	0x08019b0e
 8014f3c:	08019b11 	.word	0x08019b11
 8014f40:	080199e2 	.word	0x080199e2
 8014f44:	080199e3 	.word	0x080199e3
 8014f48:	3ff00000 	.word	0x3ff00000
 8014f4c:	fffffc01 	.word	0xfffffc01
 8014f50:	3ff80000 	.word	0x3ff80000
 8014f54:	636f4361 	.word	0x636f4361
 8014f58:	3fd287a7 	.word	0x3fd287a7
 8014f5c:	8b60c8b3 	.word	0x8b60c8b3
 8014f60:	3fc68a28 	.word	0x3fc68a28
 8014f64:	509f79fb 	.word	0x509f79fb
 8014f68:	3fd34413 	.word	0x3fd34413
 8014f6c:	08019b40 	.word	0x08019b40
 8014f70:	00000432 	.word	0x00000432
 8014f74:	00000412 	.word	0x00000412
 8014f78:	fe100000 	.word	0xfe100000
 8014f7c:	08019b18 	.word	0x08019b18
 8014f80:	2302      	movs	r3, #2
 8014f82:	930e      	str	r3, [sp, #56]	; 0x38
 8014f84:	2f00      	cmp	r7, #0
 8014f86:	d016      	beq.n	8014fb6 <_dtoa_r+0x38a>
 8014f88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014f8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014f8c:	427c      	negs	r4, r7
 8014f8e:	330d      	adds	r3, #13
 8014f90:	4023      	ands	r3, r4
 8014f92:	4acf      	ldr	r2, [pc, #828]	; (80152d0 <_dtoa_r+0x6a4>)
 8014f94:	00db      	lsls	r3, r3, #3
 8014f96:	18d3      	adds	r3, r2, r3
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	f7ec ff4a 	bl	8001e34 <__aeabi_dmul>
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	2601      	movs	r6, #1
 8014fa4:	001d      	movs	r5, r3
 8014fa6:	9006      	str	r0, [sp, #24]
 8014fa8:	9107      	str	r1, [sp, #28]
 8014faa:	1124      	asrs	r4, r4, #4
 8014fac:	2c00      	cmp	r4, #0
 8014fae:	d000      	beq.n	8014fb2 <_dtoa_r+0x386>
 8014fb0:	e08c      	b.n	80150cc <_dtoa_r+0x4a0>
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d1b8      	bne.n	8014f28 <_dtoa_r+0x2fc>
 8014fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d100      	bne.n	8014fbe <_dtoa_r+0x392>
 8014fbc:	e096      	b.n	80150ec <_dtoa_r+0x4c0>
 8014fbe:	9c06      	ldr	r4, [sp, #24]
 8014fc0:	9d07      	ldr	r5, [sp, #28]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	4bc3      	ldr	r3, [pc, #780]	; (80152d4 <_dtoa_r+0x6a8>)
 8014fc6:	0020      	movs	r0, r4
 8014fc8:	0029      	movs	r1, r5
 8014fca:	f7eb fa4d 	bl	8000468 <__aeabi_dcmplt>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d100      	bne.n	8014fd4 <_dtoa_r+0x3a8>
 8014fd2:	e08b      	b.n	80150ec <_dtoa_r+0x4c0>
 8014fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d100      	bne.n	8014fdc <_dtoa_r+0x3b0>
 8014fda:	e087      	b.n	80150ec <_dtoa_r+0x4c0>
 8014fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	dd41      	ble.n	8015066 <_dtoa_r+0x43a>
 8014fe2:	4bbd      	ldr	r3, [pc, #756]	; (80152d8 <_dtoa_r+0x6ac>)
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	0020      	movs	r0, r4
 8014fe8:	0029      	movs	r1, r5
 8014fea:	f7ec ff23 	bl	8001e34 <__aeabi_dmul>
 8014fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ff0:	9006      	str	r0, [sp, #24]
 8014ff2:	9107      	str	r1, [sp, #28]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	930e      	str	r3, [sp, #56]	; 0x38
 8014ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ffa:	1e7e      	subs	r6, r7, #1
 8014ffc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8015000:	f7ed fd24 	bl	8002a4c <__aeabi_i2d>
 8015004:	9a06      	ldr	r2, [sp, #24]
 8015006:	9b07      	ldr	r3, [sp, #28]
 8015008:	f7ec ff14 	bl	8001e34 <__aeabi_dmul>
 801500c:	2200      	movs	r2, #0
 801500e:	4bb3      	ldr	r3, [pc, #716]	; (80152dc <_dtoa_r+0x6b0>)
 8015010:	f7eb ffea 	bl	8000fe8 <__aeabi_dadd>
 8015014:	4ab2      	ldr	r2, [pc, #712]	; (80152e0 <_dtoa_r+0x6b4>)
 8015016:	900e      	str	r0, [sp, #56]	; 0x38
 8015018:	910f      	str	r1, [sp, #60]	; 0x3c
 801501a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801501c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801501e:	4694      	mov	ip, r2
 8015020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015022:	4463      	add	r3, ip
 8015024:	9315      	str	r3, [sp, #84]	; 0x54
 8015026:	001d      	movs	r5, r3
 8015028:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801502a:	2b00      	cmp	r3, #0
 801502c:	d161      	bne.n	80150f2 <_dtoa_r+0x4c6>
 801502e:	9806      	ldr	r0, [sp, #24]
 8015030:	9907      	ldr	r1, [sp, #28]
 8015032:	2200      	movs	r2, #0
 8015034:	4bab      	ldr	r3, [pc, #684]	; (80152e4 <_dtoa_r+0x6b8>)
 8015036:	f7ed f96f 	bl	8002318 <__aeabi_dsub>
 801503a:	0022      	movs	r2, r4
 801503c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801503e:	9006      	str	r0, [sp, #24]
 8015040:	9107      	str	r1, [sp, #28]
 8015042:	f7eb fa25 	bl	8000490 <__aeabi_dcmpgt>
 8015046:	2800      	cmp	r0, #0
 8015048:	d000      	beq.n	801504c <_dtoa_r+0x420>
 801504a:	e2aa      	b.n	80155a2 <_dtoa_r+0x976>
 801504c:	48a6      	ldr	r0, [pc, #664]	; (80152e8 <_dtoa_r+0x6bc>)
 801504e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015050:	4684      	mov	ip, r0
 8015052:	4461      	add	r1, ip
 8015054:	000b      	movs	r3, r1
 8015056:	9806      	ldr	r0, [sp, #24]
 8015058:	9907      	ldr	r1, [sp, #28]
 801505a:	0022      	movs	r2, r4
 801505c:	f7eb fa04 	bl	8000468 <__aeabi_dcmplt>
 8015060:	2800      	cmp	r0, #0
 8015062:	d000      	beq.n	8015066 <_dtoa_r+0x43a>
 8015064:	e297      	b.n	8015596 <_dtoa_r+0x96a>
 8015066:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015068:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801506a:	9306      	str	r3, [sp, #24]
 801506c:	9407      	str	r4, [sp, #28]
 801506e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015070:	2b00      	cmp	r3, #0
 8015072:	da00      	bge.n	8015076 <_dtoa_r+0x44a>
 8015074:	e15e      	b.n	8015334 <_dtoa_r+0x708>
 8015076:	2f0e      	cmp	r7, #14
 8015078:	dd00      	ble.n	801507c <_dtoa_r+0x450>
 801507a:	e15b      	b.n	8015334 <_dtoa_r+0x708>
 801507c:	4b94      	ldr	r3, [pc, #592]	; (80152d0 <_dtoa_r+0x6a4>)
 801507e:	00fa      	lsls	r2, r7, #3
 8015080:	189b      	adds	r3, r3, r2
 8015082:	685c      	ldr	r4, [r3, #4]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	9304      	str	r3, [sp, #16]
 8015088:	9405      	str	r4, [sp, #20]
 801508a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801508c:	2b00      	cmp	r3, #0
 801508e:	db00      	blt.n	8015092 <_dtoa_r+0x466>
 8015090:	e0da      	b.n	8015248 <_dtoa_r+0x61c>
 8015092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015094:	2b00      	cmp	r3, #0
 8015096:	dd00      	ble.n	801509a <_dtoa_r+0x46e>
 8015098:	e0d6      	b.n	8015248 <_dtoa_r+0x61c>
 801509a:	d000      	beq.n	801509e <_dtoa_r+0x472>
 801509c:	e27f      	b.n	801559e <_dtoa_r+0x972>
 801509e:	9804      	ldr	r0, [sp, #16]
 80150a0:	9905      	ldr	r1, [sp, #20]
 80150a2:	2200      	movs	r2, #0
 80150a4:	4b8f      	ldr	r3, [pc, #572]	; (80152e4 <_dtoa_r+0x6b8>)
 80150a6:	f7ec fec5 	bl	8001e34 <__aeabi_dmul>
 80150aa:	9a06      	ldr	r2, [sp, #24]
 80150ac:	9b07      	ldr	r3, [sp, #28]
 80150ae:	f7eb f9f9 	bl	80004a4 <__aeabi_dcmpge>
 80150b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b4:	9304      	str	r3, [sp, #16]
 80150b6:	001e      	movs	r6, r3
 80150b8:	2800      	cmp	r0, #0
 80150ba:	d000      	beq.n	80150be <_dtoa_r+0x492>
 80150bc:	e251      	b.n	8015562 <_dtoa_r+0x936>
 80150be:	9b08      	ldr	r3, [sp, #32]
 80150c0:	9a08      	ldr	r2, [sp, #32]
 80150c2:	1c5d      	adds	r5, r3, #1
 80150c4:	2331      	movs	r3, #49	; 0x31
 80150c6:	3701      	adds	r7, #1
 80150c8:	7013      	strb	r3, [r2, #0]
 80150ca:	e24d      	b.n	8015568 <_dtoa_r+0x93c>
 80150cc:	4234      	tst	r4, r6
 80150ce:	d00a      	beq.n	80150e6 <_dtoa_r+0x4ba>
 80150d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150d2:	4a86      	ldr	r2, [pc, #536]	; (80152ec <_dtoa_r+0x6c0>)
 80150d4:	3301      	adds	r3, #1
 80150d6:	930e      	str	r3, [sp, #56]	; 0x38
 80150d8:	00eb      	lsls	r3, r5, #3
 80150da:	189b      	adds	r3, r3, r2
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	f7ec fea8 	bl	8001e34 <__aeabi_dmul>
 80150e4:	0033      	movs	r3, r6
 80150e6:	1064      	asrs	r4, r4, #1
 80150e8:	3501      	adds	r5, #1
 80150ea:	e75f      	b.n	8014fac <_dtoa_r+0x380>
 80150ec:	003e      	movs	r6, r7
 80150ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f0:	e784      	b.n	8014ffc <_dtoa_r+0x3d0>
 80150f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150f4:	1e5a      	subs	r2, r3, #1
 80150f6:	4b76      	ldr	r3, [pc, #472]	; (80152d0 <_dtoa_r+0x6a4>)
 80150f8:	00d2      	lsls	r2, r2, #3
 80150fa:	189b      	adds	r3, r3, r2
 80150fc:	6818      	ldr	r0, [r3, #0]
 80150fe:	6859      	ldr	r1, [r3, #4]
 8015100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015102:	2b00      	cmp	r3, #0
 8015104:	d04b      	beq.n	801519e <_dtoa_r+0x572>
 8015106:	0002      	movs	r2, r0
 8015108:	000b      	movs	r3, r1
 801510a:	2000      	movs	r0, #0
 801510c:	4978      	ldr	r1, [pc, #480]	; (80152f0 <_dtoa_r+0x6c4>)
 801510e:	f7ec fa87 	bl	8001620 <__aeabi_ddiv>
 8015112:	002b      	movs	r3, r5
 8015114:	0022      	movs	r2, r4
 8015116:	f7ed f8ff 	bl	8002318 <__aeabi_dsub>
 801511a:	9b08      	ldr	r3, [sp, #32]
 801511c:	900e      	str	r0, [sp, #56]	; 0x38
 801511e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015120:	9315      	str	r3, [sp, #84]	; 0x54
 8015122:	9806      	ldr	r0, [sp, #24]
 8015124:	9907      	ldr	r1, [sp, #28]
 8015126:	f7ed fc5b 	bl	80029e0 <__aeabi_d2iz>
 801512a:	0004      	movs	r4, r0
 801512c:	f7ed fc8e 	bl	8002a4c <__aeabi_i2d>
 8015130:	0002      	movs	r2, r0
 8015132:	000b      	movs	r3, r1
 8015134:	9806      	ldr	r0, [sp, #24]
 8015136:	9907      	ldr	r1, [sp, #28]
 8015138:	f7ed f8ee 	bl	8002318 <__aeabi_dsub>
 801513c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801513e:	3430      	adds	r4, #48	; 0x30
 8015140:	1c5d      	adds	r5, r3, #1
 8015142:	701c      	strb	r4, [r3, #0]
 8015144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015148:	9006      	str	r0, [sp, #24]
 801514a:	9107      	str	r1, [sp, #28]
 801514c:	f7eb f98c 	bl	8000468 <__aeabi_dcmplt>
 8015150:	2800      	cmp	r0, #0
 8015152:	d16c      	bne.n	801522e <_dtoa_r+0x602>
 8015154:	9a06      	ldr	r2, [sp, #24]
 8015156:	9b07      	ldr	r3, [sp, #28]
 8015158:	2000      	movs	r0, #0
 801515a:	495e      	ldr	r1, [pc, #376]	; (80152d4 <_dtoa_r+0x6a8>)
 801515c:	f7ed f8dc 	bl	8002318 <__aeabi_dsub>
 8015160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015164:	f7eb f980 	bl	8000468 <__aeabi_dcmplt>
 8015168:	2800      	cmp	r0, #0
 801516a:	d000      	beq.n	801516e <_dtoa_r+0x542>
 801516c:	e0c3      	b.n	80152f6 <_dtoa_r+0x6ca>
 801516e:	9b08      	ldr	r3, [sp, #32]
 8015170:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015172:	1aeb      	subs	r3, r5, r3
 8015174:	429a      	cmp	r2, r3
 8015176:	dc00      	bgt.n	801517a <_dtoa_r+0x54e>
 8015178:	e775      	b.n	8015066 <_dtoa_r+0x43a>
 801517a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801517c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801517e:	2200      	movs	r2, #0
 8015180:	4b55      	ldr	r3, [pc, #340]	; (80152d8 <_dtoa_r+0x6ac>)
 8015182:	f7ec fe57 	bl	8001e34 <__aeabi_dmul>
 8015186:	2200      	movs	r2, #0
 8015188:	900e      	str	r0, [sp, #56]	; 0x38
 801518a:	910f      	str	r1, [sp, #60]	; 0x3c
 801518c:	9806      	ldr	r0, [sp, #24]
 801518e:	9907      	ldr	r1, [sp, #28]
 8015190:	4b51      	ldr	r3, [pc, #324]	; (80152d8 <_dtoa_r+0x6ac>)
 8015192:	f7ec fe4f 	bl	8001e34 <__aeabi_dmul>
 8015196:	9515      	str	r5, [sp, #84]	; 0x54
 8015198:	9006      	str	r0, [sp, #24]
 801519a:	9107      	str	r1, [sp, #28]
 801519c:	e7c1      	b.n	8015122 <_dtoa_r+0x4f6>
 801519e:	0022      	movs	r2, r4
 80151a0:	002b      	movs	r3, r5
 80151a2:	f7ec fe47 	bl	8001e34 <__aeabi_dmul>
 80151a6:	9c08      	ldr	r4, [sp, #32]
 80151a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151aa:	0023      	movs	r3, r4
 80151ac:	4694      	mov	ip, r2
 80151ae:	900e      	str	r0, [sp, #56]	; 0x38
 80151b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80151b2:	4463      	add	r3, ip
 80151b4:	9315      	str	r3, [sp, #84]	; 0x54
 80151b6:	9806      	ldr	r0, [sp, #24]
 80151b8:	9907      	ldr	r1, [sp, #28]
 80151ba:	f7ed fc11 	bl	80029e0 <__aeabi_d2iz>
 80151be:	0005      	movs	r5, r0
 80151c0:	f7ed fc44 	bl	8002a4c <__aeabi_i2d>
 80151c4:	000b      	movs	r3, r1
 80151c6:	0002      	movs	r2, r0
 80151c8:	9806      	ldr	r0, [sp, #24]
 80151ca:	9907      	ldr	r1, [sp, #28]
 80151cc:	f7ed f8a4 	bl	8002318 <__aeabi_dsub>
 80151d0:	3530      	adds	r5, #48	; 0x30
 80151d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151d4:	7025      	strb	r5, [r4, #0]
 80151d6:	3401      	adds	r4, #1
 80151d8:	9006      	str	r0, [sp, #24]
 80151da:	9107      	str	r1, [sp, #28]
 80151dc:	42a3      	cmp	r3, r4
 80151de:	d12a      	bne.n	8015236 <_dtoa_r+0x60a>
 80151e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80151e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80151e4:	9a08      	ldr	r2, [sp, #32]
 80151e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151e8:	4694      	mov	ip, r2
 80151ea:	4463      	add	r3, ip
 80151ec:	2200      	movs	r2, #0
 80151ee:	001d      	movs	r5, r3
 80151f0:	4b3f      	ldr	r3, [pc, #252]	; (80152f0 <_dtoa_r+0x6c4>)
 80151f2:	f7eb fef9 	bl	8000fe8 <__aeabi_dadd>
 80151f6:	0002      	movs	r2, r0
 80151f8:	000b      	movs	r3, r1
 80151fa:	9806      	ldr	r0, [sp, #24]
 80151fc:	9907      	ldr	r1, [sp, #28]
 80151fe:	f7eb f947 	bl	8000490 <__aeabi_dcmpgt>
 8015202:	2800      	cmp	r0, #0
 8015204:	d000      	beq.n	8015208 <_dtoa_r+0x5dc>
 8015206:	e076      	b.n	80152f6 <_dtoa_r+0x6ca>
 8015208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801520a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801520c:	2000      	movs	r0, #0
 801520e:	4938      	ldr	r1, [pc, #224]	; (80152f0 <_dtoa_r+0x6c4>)
 8015210:	f7ed f882 	bl	8002318 <__aeabi_dsub>
 8015214:	0002      	movs	r2, r0
 8015216:	000b      	movs	r3, r1
 8015218:	9806      	ldr	r0, [sp, #24]
 801521a:	9907      	ldr	r1, [sp, #28]
 801521c:	f7eb f924 	bl	8000468 <__aeabi_dcmplt>
 8015220:	2800      	cmp	r0, #0
 8015222:	d100      	bne.n	8015226 <_dtoa_r+0x5fa>
 8015224:	e71f      	b.n	8015066 <_dtoa_r+0x43a>
 8015226:	1e6b      	subs	r3, r5, #1
 8015228:	781a      	ldrb	r2, [r3, #0]
 801522a:	2a30      	cmp	r2, #48	; 0x30
 801522c:	d001      	beq.n	8015232 <_dtoa_r+0x606>
 801522e:	0037      	movs	r7, r6
 8015230:	e03f      	b.n	80152b2 <_dtoa_r+0x686>
 8015232:	001d      	movs	r5, r3
 8015234:	e7f7      	b.n	8015226 <_dtoa_r+0x5fa>
 8015236:	9806      	ldr	r0, [sp, #24]
 8015238:	9907      	ldr	r1, [sp, #28]
 801523a:	2200      	movs	r2, #0
 801523c:	4b26      	ldr	r3, [pc, #152]	; (80152d8 <_dtoa_r+0x6ac>)
 801523e:	f7ec fdf9 	bl	8001e34 <__aeabi_dmul>
 8015242:	9006      	str	r0, [sp, #24]
 8015244:	9107      	str	r1, [sp, #28]
 8015246:	e7b6      	b.n	80151b6 <_dtoa_r+0x58a>
 8015248:	9e08      	ldr	r6, [sp, #32]
 801524a:	9a04      	ldr	r2, [sp, #16]
 801524c:	9b05      	ldr	r3, [sp, #20]
 801524e:	9806      	ldr	r0, [sp, #24]
 8015250:	9907      	ldr	r1, [sp, #28]
 8015252:	f7ec f9e5 	bl	8001620 <__aeabi_ddiv>
 8015256:	f7ed fbc3 	bl	80029e0 <__aeabi_d2iz>
 801525a:	0004      	movs	r4, r0
 801525c:	f7ed fbf6 	bl	8002a4c <__aeabi_i2d>
 8015260:	9a04      	ldr	r2, [sp, #16]
 8015262:	9b05      	ldr	r3, [sp, #20]
 8015264:	f7ec fde6 	bl	8001e34 <__aeabi_dmul>
 8015268:	0002      	movs	r2, r0
 801526a:	000b      	movs	r3, r1
 801526c:	9806      	ldr	r0, [sp, #24]
 801526e:	9907      	ldr	r1, [sp, #28]
 8015270:	f7ed f852 	bl	8002318 <__aeabi_dsub>
 8015274:	0023      	movs	r3, r4
 8015276:	3330      	adds	r3, #48	; 0x30
 8015278:	7033      	strb	r3, [r6, #0]
 801527a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801527c:	9b08      	ldr	r3, [sp, #32]
 801527e:	1c75      	adds	r5, r6, #1
 8015280:	1aeb      	subs	r3, r5, r3
 8015282:	429a      	cmp	r2, r3
 8015284:	d148      	bne.n	8015318 <_dtoa_r+0x6ec>
 8015286:	0002      	movs	r2, r0
 8015288:	000b      	movs	r3, r1
 801528a:	f7eb fead 	bl	8000fe8 <__aeabi_dadd>
 801528e:	9a04      	ldr	r2, [sp, #16]
 8015290:	9b05      	ldr	r3, [sp, #20]
 8015292:	9006      	str	r0, [sp, #24]
 8015294:	9107      	str	r1, [sp, #28]
 8015296:	f7eb f8fb 	bl	8000490 <__aeabi_dcmpgt>
 801529a:	2800      	cmp	r0, #0
 801529c:	d12a      	bne.n	80152f4 <_dtoa_r+0x6c8>
 801529e:	9a04      	ldr	r2, [sp, #16]
 80152a0:	9b05      	ldr	r3, [sp, #20]
 80152a2:	9806      	ldr	r0, [sp, #24]
 80152a4:	9907      	ldr	r1, [sp, #28]
 80152a6:	f7eb f8d9 	bl	800045c <__aeabi_dcmpeq>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d001      	beq.n	80152b2 <_dtoa_r+0x686>
 80152ae:	07e3      	lsls	r3, r4, #31
 80152b0:	d420      	bmi.n	80152f4 <_dtoa_r+0x6c8>
 80152b2:	9903      	ldr	r1, [sp, #12]
 80152b4:	9802      	ldr	r0, [sp, #8]
 80152b6:	f000 ff35 	bl	8016124 <_Bfree>
 80152ba:	2300      	movs	r3, #0
 80152bc:	702b      	strb	r3, [r5, #0]
 80152be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80152c0:	3701      	adds	r7, #1
 80152c2:	601f      	str	r7, [r3, #0]
 80152c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d100      	bne.n	80152cc <_dtoa_r+0x6a0>
 80152ca:	e4e4      	b.n	8014c96 <_dtoa_r+0x6a>
 80152cc:	601d      	str	r5, [r3, #0]
 80152ce:	e4e2      	b.n	8014c96 <_dtoa_r+0x6a>
 80152d0:	08019b40 	.word	0x08019b40
 80152d4:	3ff00000 	.word	0x3ff00000
 80152d8:	40240000 	.word	0x40240000
 80152dc:	401c0000 	.word	0x401c0000
 80152e0:	fcc00000 	.word	0xfcc00000
 80152e4:	40140000 	.word	0x40140000
 80152e8:	7cc00000 	.word	0x7cc00000
 80152ec:	08019b18 	.word	0x08019b18
 80152f0:	3fe00000 	.word	0x3fe00000
 80152f4:	003e      	movs	r6, r7
 80152f6:	1e6b      	subs	r3, r5, #1
 80152f8:	781a      	ldrb	r2, [r3, #0]
 80152fa:	2a39      	cmp	r2, #57	; 0x39
 80152fc:	d106      	bne.n	801530c <_dtoa_r+0x6e0>
 80152fe:	9a08      	ldr	r2, [sp, #32]
 8015300:	429a      	cmp	r2, r3
 8015302:	d107      	bne.n	8015314 <_dtoa_r+0x6e8>
 8015304:	2330      	movs	r3, #48	; 0x30
 8015306:	7013      	strb	r3, [r2, #0]
 8015308:	0013      	movs	r3, r2
 801530a:	3601      	adds	r6, #1
 801530c:	781a      	ldrb	r2, [r3, #0]
 801530e:	3201      	adds	r2, #1
 8015310:	701a      	strb	r2, [r3, #0]
 8015312:	e78c      	b.n	801522e <_dtoa_r+0x602>
 8015314:	001d      	movs	r5, r3
 8015316:	e7ee      	b.n	80152f6 <_dtoa_r+0x6ca>
 8015318:	2200      	movs	r2, #0
 801531a:	4ba4      	ldr	r3, [pc, #656]	; (80155ac <_dtoa_r+0x980>)
 801531c:	f7ec fd8a 	bl	8001e34 <__aeabi_dmul>
 8015320:	2200      	movs	r2, #0
 8015322:	2300      	movs	r3, #0
 8015324:	9006      	str	r0, [sp, #24]
 8015326:	9107      	str	r1, [sp, #28]
 8015328:	002e      	movs	r6, r5
 801532a:	f7eb f897 	bl	800045c <__aeabi_dcmpeq>
 801532e:	2800      	cmp	r0, #0
 8015330:	d08b      	beq.n	801524a <_dtoa_r+0x61e>
 8015332:	e7be      	b.n	80152b2 <_dtoa_r+0x686>
 8015334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015336:	2a00      	cmp	r2, #0
 8015338:	d100      	bne.n	801533c <_dtoa_r+0x710>
 801533a:	e0da      	b.n	80154f2 <_dtoa_r+0x8c6>
 801533c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801533e:	2a01      	cmp	r2, #1
 8015340:	dd00      	ble.n	8015344 <_dtoa_r+0x718>
 8015342:	e0bd      	b.n	80154c0 <_dtoa_r+0x894>
 8015344:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015346:	2a00      	cmp	r2, #0
 8015348:	d100      	bne.n	801534c <_dtoa_r+0x720>
 801534a:	e0b5      	b.n	80154b8 <_dtoa_r+0x88c>
 801534c:	4a98      	ldr	r2, [pc, #608]	; (80155b0 <_dtoa_r+0x984>)
 801534e:	189b      	adds	r3, r3, r2
 8015350:	9d04      	ldr	r5, [sp, #16]
 8015352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015356:	2101      	movs	r1, #1
 8015358:	18d2      	adds	r2, r2, r3
 801535a:	920a      	str	r2, [sp, #40]	; 0x28
 801535c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801535e:	9802      	ldr	r0, [sp, #8]
 8015360:	18d3      	adds	r3, r2, r3
 8015362:	930b      	str	r3, [sp, #44]	; 0x2c
 8015364:	f000 ffad 	bl	80162c2 <__i2b>
 8015368:	0006      	movs	r6, r0
 801536a:	2c00      	cmp	r4, #0
 801536c:	dd0e      	ble.n	801538c <_dtoa_r+0x760>
 801536e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015370:	2b00      	cmp	r3, #0
 8015372:	dd0b      	ble.n	801538c <_dtoa_r+0x760>
 8015374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015376:	0023      	movs	r3, r4
 8015378:	4294      	cmp	r4, r2
 801537a:	dd00      	ble.n	801537e <_dtoa_r+0x752>
 801537c:	0013      	movs	r3, r2
 801537e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015380:	1ae4      	subs	r4, r4, r3
 8015382:	1ad2      	subs	r2, r2, r3
 8015384:	920a      	str	r2, [sp, #40]	; 0x28
 8015386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015388:	1ad3      	subs	r3, r2, r3
 801538a:	930b      	str	r3, [sp, #44]	; 0x2c
 801538c:	9b04      	ldr	r3, [sp, #16]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d01f      	beq.n	80153d2 <_dtoa_r+0x7a6>
 8015392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015394:	2b00      	cmp	r3, #0
 8015396:	d100      	bne.n	801539a <_dtoa_r+0x76e>
 8015398:	e0af      	b.n	80154fa <_dtoa_r+0x8ce>
 801539a:	2d00      	cmp	r5, #0
 801539c:	d011      	beq.n	80153c2 <_dtoa_r+0x796>
 801539e:	0031      	movs	r1, r6
 80153a0:	002a      	movs	r2, r5
 80153a2:	9802      	ldr	r0, [sp, #8]
 80153a4:	f001 f826 	bl	80163f4 <__pow5mult>
 80153a8:	9a03      	ldr	r2, [sp, #12]
 80153aa:	0001      	movs	r1, r0
 80153ac:	0006      	movs	r6, r0
 80153ae:	9802      	ldr	r0, [sp, #8]
 80153b0:	f000 ff90 	bl	80162d4 <__multiply>
 80153b4:	9903      	ldr	r1, [sp, #12]
 80153b6:	9010      	str	r0, [sp, #64]	; 0x40
 80153b8:	9802      	ldr	r0, [sp, #8]
 80153ba:	f000 feb3 	bl	8016124 <_Bfree>
 80153be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153c0:	9303      	str	r3, [sp, #12]
 80153c2:	9b04      	ldr	r3, [sp, #16]
 80153c4:	1b5a      	subs	r2, r3, r5
 80153c6:	d004      	beq.n	80153d2 <_dtoa_r+0x7a6>
 80153c8:	9903      	ldr	r1, [sp, #12]
 80153ca:	9802      	ldr	r0, [sp, #8]
 80153cc:	f001 f812 	bl	80163f4 <__pow5mult>
 80153d0:	9003      	str	r0, [sp, #12]
 80153d2:	2101      	movs	r1, #1
 80153d4:	9802      	ldr	r0, [sp, #8]
 80153d6:	f000 ff74 	bl	80162c2 <__i2b>
 80153da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153dc:	9004      	str	r0, [sp, #16]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d100      	bne.n	80153e4 <_dtoa_r+0x7b8>
 80153e2:	e1e3      	b.n	80157ac <_dtoa_r+0xb80>
 80153e4:	001a      	movs	r2, r3
 80153e6:	0001      	movs	r1, r0
 80153e8:	9802      	ldr	r0, [sp, #8]
 80153ea:	f001 f803 	bl	80163f4 <__pow5mult>
 80153ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80153f0:	9004      	str	r0, [sp, #16]
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	dd00      	ble.n	80153f8 <_dtoa_r+0x7cc>
 80153f6:	e082      	b.n	80154fe <_dtoa_r+0x8d2>
 80153f8:	2500      	movs	r5, #0
 80153fa:	9b06      	ldr	r3, [sp, #24]
 80153fc:	42ab      	cmp	r3, r5
 80153fe:	d10e      	bne.n	801541e <_dtoa_r+0x7f2>
 8015400:	9b07      	ldr	r3, [sp, #28]
 8015402:	031b      	lsls	r3, r3, #12
 8015404:	42ab      	cmp	r3, r5
 8015406:	d10a      	bne.n	801541e <_dtoa_r+0x7f2>
 8015408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801540a:	9a07      	ldr	r2, [sp, #28]
 801540c:	4213      	tst	r3, r2
 801540e:	d006      	beq.n	801541e <_dtoa_r+0x7f2>
 8015410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015412:	3501      	adds	r5, #1
 8015414:	3301      	adds	r3, #1
 8015416:	930a      	str	r3, [sp, #40]	; 0x28
 8015418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801541a:	3301      	adds	r3, #1
 801541c:	930b      	str	r3, [sp, #44]	; 0x2c
 801541e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015420:	2001      	movs	r0, #1
 8015422:	2b00      	cmp	r3, #0
 8015424:	d16c      	bne.n	8015500 <_dtoa_r+0x8d4>
 8015426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015428:	1818      	adds	r0, r3, r0
 801542a:	231f      	movs	r3, #31
 801542c:	4018      	ands	r0, r3
 801542e:	d07e      	beq.n	801552e <_dtoa_r+0x902>
 8015430:	3301      	adds	r3, #1
 8015432:	1a1b      	subs	r3, r3, r0
 8015434:	2b04      	cmp	r3, #4
 8015436:	dd70      	ble.n	801551a <_dtoa_r+0x8ee>
 8015438:	231c      	movs	r3, #28
 801543a:	1a18      	subs	r0, r3, r0
 801543c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801543e:	1824      	adds	r4, r4, r0
 8015440:	181b      	adds	r3, r3, r0
 8015442:	930a      	str	r3, [sp, #40]	; 0x28
 8015444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015446:	181b      	adds	r3, r3, r0
 8015448:	930b      	str	r3, [sp, #44]	; 0x2c
 801544a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801544c:	2b00      	cmp	r3, #0
 801544e:	dd05      	ble.n	801545c <_dtoa_r+0x830>
 8015450:	001a      	movs	r2, r3
 8015452:	9903      	ldr	r1, [sp, #12]
 8015454:	9802      	ldr	r0, [sp, #8]
 8015456:	f001 f80f 	bl	8016478 <__lshift>
 801545a:	9003      	str	r0, [sp, #12]
 801545c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801545e:	2b00      	cmp	r3, #0
 8015460:	dd05      	ble.n	801546e <_dtoa_r+0x842>
 8015462:	001a      	movs	r2, r3
 8015464:	9904      	ldr	r1, [sp, #16]
 8015466:	9802      	ldr	r0, [sp, #8]
 8015468:	f001 f806 	bl	8016478 <__lshift>
 801546c:	9004      	str	r0, [sp, #16]
 801546e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015470:	2b00      	cmp	r3, #0
 8015472:	d05e      	beq.n	8015532 <_dtoa_r+0x906>
 8015474:	9904      	ldr	r1, [sp, #16]
 8015476:	9803      	ldr	r0, [sp, #12]
 8015478:	f001 f850 	bl	801651c <__mcmp>
 801547c:	2800      	cmp	r0, #0
 801547e:	da58      	bge.n	8015532 <_dtoa_r+0x906>
 8015480:	2300      	movs	r3, #0
 8015482:	220a      	movs	r2, #10
 8015484:	9903      	ldr	r1, [sp, #12]
 8015486:	9802      	ldr	r0, [sp, #8]
 8015488:	f000 fe56 	bl	8016138 <__multadd>
 801548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801548e:	3f01      	subs	r7, #1
 8015490:	9003      	str	r0, [sp, #12]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d100      	bne.n	8015498 <_dtoa_r+0x86c>
 8015496:	e190      	b.n	80157ba <_dtoa_r+0xb8e>
 8015498:	2300      	movs	r3, #0
 801549a:	0031      	movs	r1, r6
 801549c:	220a      	movs	r2, #10
 801549e:	9802      	ldr	r0, [sp, #8]
 80154a0:	f000 fe4a 	bl	8016138 <__multadd>
 80154a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154a6:	0006      	movs	r6, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	dd00      	ble.n	80154ae <_dtoa_r+0x882>
 80154ac:	e088      	b.n	80155c0 <_dtoa_r+0x994>
 80154ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80154b0:	2b02      	cmp	r3, #2
 80154b2:	dc00      	bgt.n	80154b6 <_dtoa_r+0x88a>
 80154b4:	e084      	b.n	80155c0 <_dtoa_r+0x994>
 80154b6:	e044      	b.n	8015542 <_dtoa_r+0x916>
 80154b8:	2336      	movs	r3, #54	; 0x36
 80154ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80154bc:	1a9b      	subs	r3, r3, r2
 80154be:	e747      	b.n	8015350 <_dtoa_r+0x724>
 80154c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154c2:	1e5d      	subs	r5, r3, #1
 80154c4:	9b04      	ldr	r3, [sp, #16]
 80154c6:	42ab      	cmp	r3, r5
 80154c8:	db08      	blt.n	80154dc <_dtoa_r+0x8b0>
 80154ca:	1b5d      	subs	r5, r3, r5
 80154cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	da0c      	bge.n	80154ec <_dtoa_r+0x8c0>
 80154d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154d6:	1a9c      	subs	r4, r3, r2
 80154d8:	2300      	movs	r3, #0
 80154da:	e73b      	b.n	8015354 <_dtoa_r+0x728>
 80154dc:	9b04      	ldr	r3, [sp, #16]
 80154de:	9504      	str	r5, [sp, #16]
 80154e0:	1aea      	subs	r2, r5, r3
 80154e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154e4:	2500      	movs	r5, #0
 80154e6:	189b      	adds	r3, r3, r2
 80154e8:	9311      	str	r3, [sp, #68]	; 0x44
 80154ea:	e7ef      	b.n	80154cc <_dtoa_r+0x8a0>
 80154ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80154ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154f0:	e730      	b.n	8015354 <_dtoa_r+0x728>
 80154f2:	9d04      	ldr	r5, [sp, #16]
 80154f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80154f6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80154f8:	e737      	b.n	801536a <_dtoa_r+0x73e>
 80154fa:	9a04      	ldr	r2, [sp, #16]
 80154fc:	e764      	b.n	80153c8 <_dtoa_r+0x79c>
 80154fe:	2500      	movs	r5, #0
 8015500:	9b04      	ldr	r3, [sp, #16]
 8015502:	9a04      	ldr	r2, [sp, #16]
 8015504:	691b      	ldr	r3, [r3, #16]
 8015506:	9310      	str	r3, [sp, #64]	; 0x40
 8015508:	3303      	adds	r3, #3
 801550a:	009b      	lsls	r3, r3, #2
 801550c:	18d3      	adds	r3, r2, r3
 801550e:	6858      	ldr	r0, [r3, #4]
 8015510:	f000 fe8e 	bl	8016230 <__hi0bits>
 8015514:	2320      	movs	r3, #32
 8015516:	1a18      	subs	r0, r3, r0
 8015518:	e785      	b.n	8015426 <_dtoa_r+0x7fa>
 801551a:	2b04      	cmp	r3, #4
 801551c:	d095      	beq.n	801544a <_dtoa_r+0x81e>
 801551e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015520:	331c      	adds	r3, #28
 8015522:	18d2      	adds	r2, r2, r3
 8015524:	920a      	str	r2, [sp, #40]	; 0x28
 8015526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015528:	18e4      	adds	r4, r4, r3
 801552a:	18d3      	adds	r3, r2, r3
 801552c:	e78c      	b.n	8015448 <_dtoa_r+0x81c>
 801552e:	0003      	movs	r3, r0
 8015530:	e7f5      	b.n	801551e <_dtoa_r+0x8f2>
 8015532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015534:	2b00      	cmp	r3, #0
 8015536:	dc3d      	bgt.n	80155b4 <_dtoa_r+0x988>
 8015538:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801553a:	2b02      	cmp	r3, #2
 801553c:	dd3a      	ble.n	80155b4 <_dtoa_r+0x988>
 801553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015540:	930c      	str	r3, [sp, #48]	; 0x30
 8015542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015544:	2b00      	cmp	r3, #0
 8015546:	d10c      	bne.n	8015562 <_dtoa_r+0x936>
 8015548:	9904      	ldr	r1, [sp, #16]
 801554a:	2205      	movs	r2, #5
 801554c:	9802      	ldr	r0, [sp, #8]
 801554e:	f000 fdf3 	bl	8016138 <__multadd>
 8015552:	9004      	str	r0, [sp, #16]
 8015554:	0001      	movs	r1, r0
 8015556:	9803      	ldr	r0, [sp, #12]
 8015558:	f000 ffe0 	bl	801651c <__mcmp>
 801555c:	2800      	cmp	r0, #0
 801555e:	dd00      	ble.n	8015562 <_dtoa_r+0x936>
 8015560:	e5ad      	b.n	80150be <_dtoa_r+0x492>
 8015562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015564:	9d08      	ldr	r5, [sp, #32]
 8015566:	43df      	mvns	r7, r3
 8015568:	2300      	movs	r3, #0
 801556a:	9309      	str	r3, [sp, #36]	; 0x24
 801556c:	9904      	ldr	r1, [sp, #16]
 801556e:	9802      	ldr	r0, [sp, #8]
 8015570:	f000 fdd8 	bl	8016124 <_Bfree>
 8015574:	2e00      	cmp	r6, #0
 8015576:	d100      	bne.n	801557a <_dtoa_r+0x94e>
 8015578:	e69b      	b.n	80152b2 <_dtoa_r+0x686>
 801557a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801557c:	2b00      	cmp	r3, #0
 801557e:	d005      	beq.n	801558c <_dtoa_r+0x960>
 8015580:	42b3      	cmp	r3, r6
 8015582:	d003      	beq.n	801558c <_dtoa_r+0x960>
 8015584:	0019      	movs	r1, r3
 8015586:	9802      	ldr	r0, [sp, #8]
 8015588:	f000 fdcc 	bl	8016124 <_Bfree>
 801558c:	0031      	movs	r1, r6
 801558e:	9802      	ldr	r0, [sp, #8]
 8015590:	f000 fdc8 	bl	8016124 <_Bfree>
 8015594:	e68d      	b.n	80152b2 <_dtoa_r+0x686>
 8015596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	001e      	movs	r6, r3
 801559c:	e7e1      	b.n	8015562 <_dtoa_r+0x936>
 801559e:	2300      	movs	r3, #0
 80155a0:	e7fa      	b.n	8015598 <_dtoa_r+0x96c>
 80155a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155a4:	0037      	movs	r7, r6
 80155a6:	9304      	str	r3, [sp, #16]
 80155a8:	001e      	movs	r6, r3
 80155aa:	e588      	b.n	80150be <_dtoa_r+0x492>
 80155ac:	40240000 	.word	0x40240000
 80155b0:	00000433 	.word	0x00000433
 80155b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d100      	bne.n	80155bc <_dtoa_r+0x990>
 80155ba:	e0b2      	b.n	8015722 <_dtoa_r+0xaf6>
 80155bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155be:	930c      	str	r3, [sp, #48]	; 0x30
 80155c0:	2c00      	cmp	r4, #0
 80155c2:	dd05      	ble.n	80155d0 <_dtoa_r+0x9a4>
 80155c4:	0031      	movs	r1, r6
 80155c6:	0022      	movs	r2, r4
 80155c8:	9802      	ldr	r0, [sp, #8]
 80155ca:	f000 ff55 	bl	8016478 <__lshift>
 80155ce:	0006      	movs	r6, r0
 80155d0:	0030      	movs	r0, r6
 80155d2:	2d00      	cmp	r5, #0
 80155d4:	d011      	beq.n	80155fa <_dtoa_r+0x9ce>
 80155d6:	6871      	ldr	r1, [r6, #4]
 80155d8:	9802      	ldr	r0, [sp, #8]
 80155da:	f000 fd7b 	bl	80160d4 <_Balloc>
 80155de:	0031      	movs	r1, r6
 80155e0:	0004      	movs	r4, r0
 80155e2:	6933      	ldr	r3, [r6, #16]
 80155e4:	310c      	adds	r1, #12
 80155e6:	1c9a      	adds	r2, r3, #2
 80155e8:	0092      	lsls	r2, r2, #2
 80155ea:	300c      	adds	r0, #12
 80155ec:	f7fc fe8b 	bl	8012306 <memcpy>
 80155f0:	2201      	movs	r2, #1
 80155f2:	0021      	movs	r1, r4
 80155f4:	9802      	ldr	r0, [sp, #8]
 80155f6:	f000 ff3f 	bl	8016478 <__lshift>
 80155fa:	9609      	str	r6, [sp, #36]	; 0x24
 80155fc:	0006      	movs	r6, r0
 80155fe:	9b08      	ldr	r3, [sp, #32]
 8015600:	930a      	str	r3, [sp, #40]	; 0x28
 8015602:	9904      	ldr	r1, [sp, #16]
 8015604:	9803      	ldr	r0, [sp, #12]
 8015606:	f7ff fa8b 	bl	8014b20 <quorem>
 801560a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801560c:	900d      	str	r0, [sp, #52]	; 0x34
 801560e:	0004      	movs	r4, r0
 8015610:	9803      	ldr	r0, [sp, #12]
 8015612:	f000 ff83 	bl	801651c <__mcmp>
 8015616:	0032      	movs	r2, r6
 8015618:	9010      	str	r0, [sp, #64]	; 0x40
 801561a:	9904      	ldr	r1, [sp, #16]
 801561c:	9802      	ldr	r0, [sp, #8]
 801561e:	f000 ff97 	bl	8016550 <__mdiff>
 8015622:	2301      	movs	r3, #1
 8015624:	930b      	str	r3, [sp, #44]	; 0x2c
 8015626:	68c3      	ldr	r3, [r0, #12]
 8015628:	3430      	adds	r4, #48	; 0x30
 801562a:	0005      	movs	r5, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d104      	bne.n	801563a <_dtoa_r+0xa0e>
 8015630:	0001      	movs	r1, r0
 8015632:	9803      	ldr	r0, [sp, #12]
 8015634:	f000 ff72 	bl	801651c <__mcmp>
 8015638:	900b      	str	r0, [sp, #44]	; 0x2c
 801563a:	0029      	movs	r1, r5
 801563c:	9802      	ldr	r0, [sp, #8]
 801563e:	f000 fd71 	bl	8016124 <_Bfree>
 8015642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015644:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015646:	4313      	orrs	r3, r2
 8015648:	d10e      	bne.n	8015668 <_dtoa_r+0xa3c>
 801564a:	9a06      	ldr	r2, [sp, #24]
 801564c:	3301      	adds	r3, #1
 801564e:	4213      	tst	r3, r2
 8015650:	d10a      	bne.n	8015668 <_dtoa_r+0xa3c>
 8015652:	2c39      	cmp	r4, #57	; 0x39
 8015654:	d026      	beq.n	80156a4 <_dtoa_r+0xa78>
 8015656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015658:	2b00      	cmp	r3, #0
 801565a:	dd01      	ble.n	8015660 <_dtoa_r+0xa34>
 801565c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801565e:	3431      	adds	r4, #49	; 0x31
 8015660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015662:	1c5d      	adds	r5, r3, #1
 8015664:	701c      	strb	r4, [r3, #0]
 8015666:	e781      	b.n	801556c <_dtoa_r+0x940>
 8015668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801566a:	2b00      	cmp	r3, #0
 801566c:	db07      	blt.n	801567e <_dtoa_r+0xa52>
 801566e:	001d      	movs	r5, r3
 8015670:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015672:	431d      	orrs	r5, r3
 8015674:	d122      	bne.n	80156bc <_dtoa_r+0xa90>
 8015676:	2301      	movs	r3, #1
 8015678:	9a06      	ldr	r2, [sp, #24]
 801567a:	4213      	tst	r3, r2
 801567c:	d11e      	bne.n	80156bc <_dtoa_r+0xa90>
 801567e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015680:	2b00      	cmp	r3, #0
 8015682:	dded      	ble.n	8015660 <_dtoa_r+0xa34>
 8015684:	9903      	ldr	r1, [sp, #12]
 8015686:	2201      	movs	r2, #1
 8015688:	9802      	ldr	r0, [sp, #8]
 801568a:	f000 fef5 	bl	8016478 <__lshift>
 801568e:	9904      	ldr	r1, [sp, #16]
 8015690:	9003      	str	r0, [sp, #12]
 8015692:	f000 ff43 	bl	801651c <__mcmp>
 8015696:	2800      	cmp	r0, #0
 8015698:	dc02      	bgt.n	80156a0 <_dtoa_r+0xa74>
 801569a:	d1e1      	bne.n	8015660 <_dtoa_r+0xa34>
 801569c:	07e3      	lsls	r3, r4, #31
 801569e:	d5df      	bpl.n	8015660 <_dtoa_r+0xa34>
 80156a0:	2c39      	cmp	r4, #57	; 0x39
 80156a2:	d1db      	bne.n	801565c <_dtoa_r+0xa30>
 80156a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156a8:	1c5d      	adds	r5, r3, #1
 80156aa:	2339      	movs	r3, #57	; 0x39
 80156ac:	7013      	strb	r3, [r2, #0]
 80156ae:	1e6b      	subs	r3, r5, #1
 80156b0:	781a      	ldrb	r2, [r3, #0]
 80156b2:	2a39      	cmp	r2, #57	; 0x39
 80156b4:	d067      	beq.n	8015786 <_dtoa_r+0xb5a>
 80156b6:	3201      	adds	r2, #1
 80156b8:	701a      	strb	r2, [r3, #0]
 80156ba:	e757      	b.n	801556c <_dtoa_r+0x940>
 80156bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156be:	1c5d      	adds	r5, r3, #1
 80156c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dd04      	ble.n	80156d0 <_dtoa_r+0xaa4>
 80156c6:	2c39      	cmp	r4, #57	; 0x39
 80156c8:	d0ec      	beq.n	80156a4 <_dtoa_r+0xa78>
 80156ca:	3401      	adds	r4, #1
 80156cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156ce:	e7c9      	b.n	8015664 <_dtoa_r+0xa38>
 80156d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156d4:	701c      	strb	r4, [r3, #0]
 80156d6:	9b08      	ldr	r3, [sp, #32]
 80156d8:	1aeb      	subs	r3, r5, r3
 80156da:	4293      	cmp	r3, r2
 80156dc:	d03e      	beq.n	801575c <_dtoa_r+0xb30>
 80156de:	2300      	movs	r3, #0
 80156e0:	220a      	movs	r2, #10
 80156e2:	9903      	ldr	r1, [sp, #12]
 80156e4:	9802      	ldr	r0, [sp, #8]
 80156e6:	f000 fd27 	bl	8016138 <__multadd>
 80156ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ec:	9003      	str	r0, [sp, #12]
 80156ee:	42b3      	cmp	r3, r6
 80156f0:	d109      	bne.n	8015706 <_dtoa_r+0xada>
 80156f2:	2300      	movs	r3, #0
 80156f4:	220a      	movs	r2, #10
 80156f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156f8:	9802      	ldr	r0, [sp, #8]
 80156fa:	f000 fd1d 	bl	8016138 <__multadd>
 80156fe:	9009      	str	r0, [sp, #36]	; 0x24
 8015700:	0006      	movs	r6, r0
 8015702:	950a      	str	r5, [sp, #40]	; 0x28
 8015704:	e77d      	b.n	8015602 <_dtoa_r+0x9d6>
 8015706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015708:	2300      	movs	r3, #0
 801570a:	220a      	movs	r2, #10
 801570c:	9802      	ldr	r0, [sp, #8]
 801570e:	f000 fd13 	bl	8016138 <__multadd>
 8015712:	2300      	movs	r3, #0
 8015714:	9009      	str	r0, [sp, #36]	; 0x24
 8015716:	220a      	movs	r2, #10
 8015718:	0031      	movs	r1, r6
 801571a:	9802      	ldr	r0, [sp, #8]
 801571c:	f000 fd0c 	bl	8016138 <__multadd>
 8015720:	e7ee      	b.n	8015700 <_dtoa_r+0xad4>
 8015722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015724:	930c      	str	r3, [sp, #48]	; 0x30
 8015726:	9b08      	ldr	r3, [sp, #32]
 8015728:	9306      	str	r3, [sp, #24]
 801572a:	9904      	ldr	r1, [sp, #16]
 801572c:	9803      	ldr	r0, [sp, #12]
 801572e:	f7ff f9f7 	bl	8014b20 <quorem>
 8015732:	9b06      	ldr	r3, [sp, #24]
 8015734:	3030      	adds	r0, #48	; 0x30
 8015736:	1c5d      	adds	r5, r3, #1
 8015738:	7018      	strb	r0, [r3, #0]
 801573a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801573c:	9b08      	ldr	r3, [sp, #32]
 801573e:	0004      	movs	r4, r0
 8015740:	1aeb      	subs	r3, r5, r3
 8015742:	429a      	cmp	r2, r3
 8015744:	dd08      	ble.n	8015758 <_dtoa_r+0xb2c>
 8015746:	2300      	movs	r3, #0
 8015748:	220a      	movs	r2, #10
 801574a:	9903      	ldr	r1, [sp, #12]
 801574c:	9802      	ldr	r0, [sp, #8]
 801574e:	f000 fcf3 	bl	8016138 <__multadd>
 8015752:	9506      	str	r5, [sp, #24]
 8015754:	9003      	str	r0, [sp, #12]
 8015756:	e7e8      	b.n	801572a <_dtoa_r+0xafe>
 8015758:	2300      	movs	r3, #0
 801575a:	9309      	str	r3, [sp, #36]	; 0x24
 801575c:	9903      	ldr	r1, [sp, #12]
 801575e:	2201      	movs	r2, #1
 8015760:	9802      	ldr	r0, [sp, #8]
 8015762:	f000 fe89 	bl	8016478 <__lshift>
 8015766:	9904      	ldr	r1, [sp, #16]
 8015768:	9003      	str	r0, [sp, #12]
 801576a:	f000 fed7 	bl	801651c <__mcmp>
 801576e:	2800      	cmp	r0, #0
 8015770:	dc9d      	bgt.n	80156ae <_dtoa_r+0xa82>
 8015772:	d101      	bne.n	8015778 <_dtoa_r+0xb4c>
 8015774:	07e3      	lsls	r3, r4, #31
 8015776:	d49a      	bmi.n	80156ae <_dtoa_r+0xa82>
 8015778:	1e6b      	subs	r3, r5, #1
 801577a:	781a      	ldrb	r2, [r3, #0]
 801577c:	2a30      	cmp	r2, #48	; 0x30
 801577e:	d000      	beq.n	8015782 <_dtoa_r+0xb56>
 8015780:	e6f4      	b.n	801556c <_dtoa_r+0x940>
 8015782:	001d      	movs	r5, r3
 8015784:	e7f8      	b.n	8015778 <_dtoa_r+0xb4c>
 8015786:	9a08      	ldr	r2, [sp, #32]
 8015788:	429a      	cmp	r2, r3
 801578a:	d103      	bne.n	8015794 <_dtoa_r+0xb68>
 801578c:	2331      	movs	r3, #49	; 0x31
 801578e:	3701      	adds	r7, #1
 8015790:	7013      	strb	r3, [r2, #0]
 8015792:	e6eb      	b.n	801556c <_dtoa_r+0x940>
 8015794:	001d      	movs	r5, r3
 8015796:	e78a      	b.n	80156ae <_dtoa_r+0xa82>
 8015798:	4b0b      	ldr	r3, [pc, #44]	; (80157c8 <_dtoa_r+0xb9c>)
 801579a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801579c:	9308      	str	r3, [sp, #32]
 801579e:	4b0b      	ldr	r3, [pc, #44]	; (80157cc <_dtoa_r+0xba0>)
 80157a0:	2a00      	cmp	r2, #0
 80157a2:	d001      	beq.n	80157a8 <_dtoa_r+0xb7c>
 80157a4:	f7ff fa75 	bl	8014c92 <_dtoa_r+0x66>
 80157a8:	f7ff fa75 	bl	8014c96 <_dtoa_r+0x6a>
 80157ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	dc00      	bgt.n	80157b4 <_dtoa_r+0xb88>
 80157b2:	e621      	b.n	80153f8 <_dtoa_r+0x7cc>
 80157b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80157b6:	2001      	movs	r0, #1
 80157b8:	e635      	b.n	8015426 <_dtoa_r+0x7fa>
 80157ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157bc:	2b00      	cmp	r3, #0
 80157be:	dcb2      	bgt.n	8015726 <_dtoa_r+0xafa>
 80157c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157c2:	2b02      	cmp	r3, #2
 80157c4:	ddaf      	ble.n	8015726 <_dtoa_r+0xafa>
 80157c6:	e6bc      	b.n	8015542 <_dtoa_r+0x916>
 80157c8:	08019b05 	.word	0x08019b05
 80157cc:	08019b0d 	.word	0x08019b0d

080157d0 <__errno>:
 80157d0:	4b01      	ldr	r3, [pc, #4]	; (80157d8 <__errno+0x8>)
 80157d2:	6818      	ldr	r0, [r3, #0]
 80157d4:	4770      	bx	lr
 80157d6:	46c0      	nop			; (mov r8, r8)
 80157d8:	200000cc 	.word	0x200000cc

080157dc <__libc_fini_array>:
 80157dc:	b570      	push	{r4, r5, r6, lr}
 80157de:	4d07      	ldr	r5, [pc, #28]	; (80157fc <__libc_fini_array+0x20>)
 80157e0:	4c07      	ldr	r4, [pc, #28]	; (8015800 <__libc_fini_array+0x24>)
 80157e2:	1b64      	subs	r4, r4, r5
 80157e4:	10a4      	asrs	r4, r4, #2
 80157e6:	2c00      	cmp	r4, #0
 80157e8:	d102      	bne.n	80157f0 <__libc_fini_array+0x14>
 80157ea:	f001 f95b 	bl	8016aa4 <_fini>
 80157ee:	bd70      	pop	{r4, r5, r6, pc}
 80157f0:	3c01      	subs	r4, #1
 80157f2:	00a3      	lsls	r3, r4, #2
 80157f4:	58eb      	ldr	r3, [r5, r3]
 80157f6:	4798      	blx	r3
 80157f8:	e7f5      	b.n	80157e6 <__libc_fini_array+0xa>
 80157fa:	46c0      	nop			; (mov r8, r8)
 80157fc:	08019c24 	.word	0x08019c24
 8015800:	08019c28 	.word	0x08019c28

08015804 <_malloc_trim_r>:
 8015804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015806:	0005      	movs	r5, r0
 8015808:	2008      	movs	r0, #8
 801580a:	000c      	movs	r4, r1
 801580c:	f7ff f95c 	bl	8014ac8 <sysconf>
 8015810:	0007      	movs	r7, r0
 8015812:	0028      	movs	r0, r5
 8015814:	f7fc fd88 	bl	8012328 <__malloc_lock>
 8015818:	2203      	movs	r2, #3
 801581a:	4e21      	ldr	r6, [pc, #132]	; (80158a0 <_malloc_trim_r+0x9c>)
 801581c:	0039      	movs	r1, r7
 801581e:	68b3      	ldr	r3, [r6, #8]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	4393      	bics	r3, r2
 8015824:	1b18      	subs	r0, r3, r4
 8015826:	3811      	subs	r0, #17
 8015828:	19c0      	adds	r0, r0, r7
 801582a:	9301      	str	r3, [sp, #4]
 801582c:	f7ea fc90 	bl	8000150 <__udivsi3>
 8015830:	1e44      	subs	r4, r0, #1
 8015832:	437c      	muls	r4, r7
 8015834:	42a7      	cmp	r7, r4
 8015836:	dd04      	ble.n	8015842 <_malloc_trim_r+0x3e>
 8015838:	0028      	movs	r0, r5
 801583a:	f7fc fd7d 	bl	8012338 <__malloc_unlock>
 801583e:	2000      	movs	r0, #0
 8015840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015842:	2100      	movs	r1, #0
 8015844:	0028      	movs	r0, r5
 8015846:	f7fc ff4f 	bl	80126e8 <_sbrk_r>
 801584a:	68b3      	ldr	r3, [r6, #8]
 801584c:	9a01      	ldr	r2, [sp, #4]
 801584e:	189b      	adds	r3, r3, r2
 8015850:	4298      	cmp	r0, r3
 8015852:	d1f1      	bne.n	8015838 <_malloc_trim_r+0x34>
 8015854:	4261      	negs	r1, r4
 8015856:	0028      	movs	r0, r5
 8015858:	f7fc ff46 	bl	80126e8 <_sbrk_r>
 801585c:	1c43      	adds	r3, r0, #1
 801585e:	d110      	bne.n	8015882 <_malloc_trim_r+0x7e>
 8015860:	2100      	movs	r1, #0
 8015862:	0028      	movs	r0, r5
 8015864:	f7fc ff40 	bl	80126e8 <_sbrk_r>
 8015868:	68b2      	ldr	r2, [r6, #8]
 801586a:	1a81      	subs	r1, r0, r2
 801586c:	290f      	cmp	r1, #15
 801586e:	dde3      	ble.n	8015838 <_malloc_trim_r+0x34>
 8015870:	4b0c      	ldr	r3, [pc, #48]	; (80158a4 <_malloc_trim_r+0xa0>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	1ac0      	subs	r0, r0, r3
 8015876:	4b0c      	ldr	r3, [pc, #48]	; (80158a8 <_malloc_trim_r+0xa4>)
 8015878:	6018      	str	r0, [r3, #0]
 801587a:	2301      	movs	r3, #1
 801587c:	430b      	orrs	r3, r1
 801587e:	6053      	str	r3, [r2, #4]
 8015880:	e7da      	b.n	8015838 <_malloc_trim_r+0x34>
 8015882:	68b2      	ldr	r2, [r6, #8]
 8015884:	2601      	movs	r6, #1
 8015886:	9b01      	ldr	r3, [sp, #4]
 8015888:	0028      	movs	r0, r5
 801588a:	1b1b      	subs	r3, r3, r4
 801588c:	4333      	orrs	r3, r6
 801588e:	6053      	str	r3, [r2, #4]
 8015890:	4b05      	ldr	r3, [pc, #20]	; (80158a8 <_malloc_trim_r+0xa4>)
 8015892:	681a      	ldr	r2, [r3, #0]
 8015894:	1b14      	subs	r4, r2, r4
 8015896:	601c      	str	r4, [r3, #0]
 8015898:	f7fc fd4e 	bl	8012338 <__malloc_unlock>
 801589c:	0030      	movs	r0, r6
 801589e:	e7cf      	b.n	8015840 <_malloc_trim_r+0x3c>
 80158a0:	20000664 	.word	0x20000664
 80158a4:	20000a6c 	.word	0x20000a6c
 80158a8:	200069c4 	.word	0x200069c4

080158ac <_free_r>:
 80158ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158ae:	1e0d      	subs	r5, r1, #0
 80158b0:	9001      	str	r0, [sp, #4]
 80158b2:	d02d      	beq.n	8015910 <_free_r+0x64>
 80158b4:	f7fc fd38 	bl	8012328 <__malloc_lock>
 80158b8:	2301      	movs	r3, #1
 80158ba:	0029      	movs	r1, r5
 80158bc:	469c      	mov	ip, r3
 80158be:	3908      	subs	r1, #8
 80158c0:	684f      	ldr	r7, [r1, #4]
 80158c2:	4662      	mov	r2, ip
 80158c4:	003b      	movs	r3, r7
 80158c6:	4666      	mov	r6, ip
 80158c8:	4393      	bics	r3, r2
 80158ca:	18c8      	adds	r0, r1, r3
 80158cc:	6845      	ldr	r5, [r0, #4]
 80158ce:	3202      	adds	r2, #2
 80158d0:	4395      	bics	r5, r2
 80158d2:	4a4a      	ldr	r2, [pc, #296]	; (80159fc <_free_r+0x150>)
 80158d4:	4037      	ands	r7, r6
 80158d6:	6896      	ldr	r6, [r2, #8]
 80158d8:	4286      	cmp	r6, r0
 80158da:	d11a      	bne.n	8015912 <_free_r+0x66>
 80158dc:	195b      	adds	r3, r3, r5
 80158de:	2f00      	cmp	r7, #0
 80158e0:	d106      	bne.n	80158f0 <_free_r+0x44>
 80158e2:	6808      	ldr	r0, [r1, #0]
 80158e4:	1a09      	subs	r1, r1, r0
 80158e6:	688d      	ldr	r5, [r1, #8]
 80158e8:	181b      	adds	r3, r3, r0
 80158ea:	68c8      	ldr	r0, [r1, #12]
 80158ec:	60e8      	str	r0, [r5, #12]
 80158ee:	6085      	str	r5, [r0, #8]
 80158f0:	2001      	movs	r0, #1
 80158f2:	4318      	orrs	r0, r3
 80158f4:	6048      	str	r0, [r1, #4]
 80158f6:	6091      	str	r1, [r2, #8]
 80158f8:	4a41      	ldr	r2, [pc, #260]	; (8015a00 <_free_r+0x154>)
 80158fa:	6812      	ldr	r2, [r2, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d804      	bhi.n	801590a <_free_r+0x5e>
 8015900:	4b40      	ldr	r3, [pc, #256]	; (8015a04 <_free_r+0x158>)
 8015902:	9801      	ldr	r0, [sp, #4]
 8015904:	6819      	ldr	r1, [r3, #0]
 8015906:	f7ff ff7d 	bl	8015804 <_malloc_trim_r>
 801590a:	9801      	ldr	r0, [sp, #4]
 801590c:	f7fc fd14 	bl	8012338 <__malloc_unlock>
 8015910:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015912:	2600      	movs	r6, #0
 8015914:	6045      	str	r5, [r0, #4]
 8015916:	42b7      	cmp	r7, r6
 8015918:	d109      	bne.n	801592e <_free_r+0x82>
 801591a:	680f      	ldr	r7, [r1, #0]
 801591c:	4c3a      	ldr	r4, [pc, #232]	; (8015a08 <_free_r+0x15c>)
 801591e:	1bc9      	subs	r1, r1, r7
 8015920:	19db      	adds	r3, r3, r7
 8015922:	688f      	ldr	r7, [r1, #8]
 8015924:	42a7      	cmp	r7, r4
 8015926:	d02b      	beq.n	8015980 <_free_r+0xd4>
 8015928:	68cc      	ldr	r4, [r1, #12]
 801592a:	60fc      	str	r4, [r7, #12]
 801592c:	60a7      	str	r7, [r4, #8]
 801592e:	1947      	adds	r7, r0, r5
 8015930:	687c      	ldr	r4, [r7, #4]
 8015932:	2701      	movs	r7, #1
 8015934:	423c      	tst	r4, r7
 8015936:	d10b      	bne.n	8015950 <_free_r+0xa4>
 8015938:	195b      	adds	r3, r3, r5
 801593a:	6885      	ldr	r5, [r0, #8]
 801593c:	2e00      	cmp	r6, #0
 801593e:	d121      	bne.n	8015984 <_free_r+0xd8>
 8015940:	4c31      	ldr	r4, [pc, #196]	; (8015a08 <_free_r+0x15c>)
 8015942:	42a5      	cmp	r5, r4
 8015944:	d11e      	bne.n	8015984 <_free_r+0xd8>
 8015946:	003e      	movs	r6, r7
 8015948:	6151      	str	r1, [r2, #20]
 801594a:	6111      	str	r1, [r2, #16]
 801594c:	60cd      	str	r5, [r1, #12]
 801594e:	608d      	str	r5, [r1, #8]
 8015950:	2001      	movs	r0, #1
 8015952:	0005      	movs	r5, r0
 8015954:	431d      	orrs	r5, r3
 8015956:	604d      	str	r5, [r1, #4]
 8015958:	50cb      	str	r3, [r1, r3]
 801595a:	2e00      	cmp	r6, #0
 801595c:	d1d5      	bne.n	801590a <_free_r+0x5e>
 801595e:	4d2b      	ldr	r5, [pc, #172]	; (8015a0c <_free_r+0x160>)
 8015960:	42ab      	cmp	r3, r5
 8015962:	d813      	bhi.n	801598c <_free_r+0xe0>
 8015964:	08db      	lsrs	r3, r3, #3
 8015966:	109d      	asrs	r5, r3, #2
 8015968:	40a8      	lsls	r0, r5
 801596a:	6854      	ldr	r4, [r2, #4]
 801596c:	00db      	lsls	r3, r3, #3
 801596e:	4320      	orrs	r0, r4
 8015970:	6050      	str	r0, [r2, #4]
 8015972:	189a      	adds	r2, r3, r2
 8015974:	6893      	ldr	r3, [r2, #8]
 8015976:	60ca      	str	r2, [r1, #12]
 8015978:	608b      	str	r3, [r1, #8]
 801597a:	6091      	str	r1, [r2, #8]
 801597c:	60d9      	str	r1, [r3, #12]
 801597e:	e7c4      	b.n	801590a <_free_r+0x5e>
 8015980:	4666      	mov	r6, ip
 8015982:	e7d4      	b.n	801592e <_free_r+0x82>
 8015984:	68c0      	ldr	r0, [r0, #12]
 8015986:	60e8      	str	r0, [r5, #12]
 8015988:	6085      	str	r5, [r0, #8]
 801598a:	e7e1      	b.n	8015950 <_free_r+0xa4>
 801598c:	0a5d      	lsrs	r5, r3, #9
 801598e:	2d04      	cmp	r5, #4
 8015990:	d812      	bhi.n	80159b8 <_free_r+0x10c>
 8015992:	0998      	lsrs	r0, r3, #6
 8015994:	3038      	adds	r0, #56	; 0x38
 8015996:	00c6      	lsls	r6, r0, #3
 8015998:	18b6      	adds	r6, r6, r2
 801599a:	68b5      	ldr	r5, [r6, #8]
 801599c:	2703      	movs	r7, #3
 801599e:	42ae      	cmp	r6, r5
 80159a0:	d125      	bne.n	80159ee <_free_r+0x142>
 80159a2:	2301      	movs	r3, #1
 80159a4:	1080      	asrs	r0, r0, #2
 80159a6:	4083      	lsls	r3, r0
 80159a8:	6850      	ldr	r0, [r2, #4]
 80159aa:	4303      	orrs	r3, r0
 80159ac:	6053      	str	r3, [r2, #4]
 80159ae:	60ce      	str	r6, [r1, #12]
 80159b0:	608d      	str	r5, [r1, #8]
 80159b2:	60b1      	str	r1, [r6, #8]
 80159b4:	60e9      	str	r1, [r5, #12]
 80159b6:	e7a8      	b.n	801590a <_free_r+0x5e>
 80159b8:	2d14      	cmp	r5, #20
 80159ba:	d802      	bhi.n	80159c2 <_free_r+0x116>
 80159bc:	0028      	movs	r0, r5
 80159be:	305b      	adds	r0, #91	; 0x5b
 80159c0:	e7e9      	b.n	8015996 <_free_r+0xea>
 80159c2:	2d54      	cmp	r5, #84	; 0x54
 80159c4:	d802      	bhi.n	80159cc <_free_r+0x120>
 80159c6:	0b18      	lsrs	r0, r3, #12
 80159c8:	306e      	adds	r0, #110	; 0x6e
 80159ca:	e7e4      	b.n	8015996 <_free_r+0xea>
 80159cc:	20aa      	movs	r0, #170	; 0xaa
 80159ce:	0040      	lsls	r0, r0, #1
 80159d0:	4285      	cmp	r5, r0
 80159d2:	d802      	bhi.n	80159da <_free_r+0x12e>
 80159d4:	0bd8      	lsrs	r0, r3, #15
 80159d6:	3077      	adds	r0, #119	; 0x77
 80159d8:	e7dd      	b.n	8015996 <_free_r+0xea>
 80159da:	4e0d      	ldr	r6, [pc, #52]	; (8015a10 <_free_r+0x164>)
 80159dc:	207e      	movs	r0, #126	; 0x7e
 80159de:	42b5      	cmp	r5, r6
 80159e0:	d8d9      	bhi.n	8015996 <_free_r+0xea>
 80159e2:	0c98      	lsrs	r0, r3, #18
 80159e4:	307c      	adds	r0, #124	; 0x7c
 80159e6:	e7d6      	b.n	8015996 <_free_r+0xea>
 80159e8:	68ad      	ldr	r5, [r5, #8]
 80159ea:	42ae      	cmp	r6, r5
 80159ec:	d003      	beq.n	80159f6 <_free_r+0x14a>
 80159ee:	686a      	ldr	r2, [r5, #4]
 80159f0:	43ba      	bics	r2, r7
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d8f8      	bhi.n	80159e8 <_free_r+0x13c>
 80159f6:	68ee      	ldr	r6, [r5, #12]
 80159f8:	e7d9      	b.n	80159ae <_free_r+0x102>
 80159fa:	46c0      	nop			; (mov r8, r8)
 80159fc:	20000664 	.word	0x20000664
 8015a00:	20000a70 	.word	0x20000a70
 8015a04:	200069f4 	.word	0x200069f4
 8015a08:	2000066c 	.word	0x2000066c
 8015a0c:	000001ff 	.word	0x000001ff
 8015a10:	00000554 	.word	0x00000554

08015a14 <rshift>:
 8015a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a16:	0004      	movs	r4, r0
 8015a18:	6905      	ldr	r5, [r0, #16]
 8015a1a:	3414      	adds	r4, #20
 8015a1c:	114b      	asrs	r3, r1, #5
 8015a1e:	0026      	movs	r6, r4
 8015a20:	429d      	cmp	r5, r3
 8015a22:	dd14      	ble.n	8015a4e <rshift+0x3a>
 8015a24:	221f      	movs	r2, #31
 8015a26:	00ad      	lsls	r5, r5, #2
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	4011      	ands	r1, r2
 8015a2c:	1965      	adds	r5, r4, r5
 8015a2e:	18e3      	adds	r3, r4, r3
 8015a30:	0022      	movs	r2, r4
 8015a32:	2900      	cmp	r1, #0
 8015a34:	d01e      	beq.n	8015a74 <rshift+0x60>
 8015a36:	cb04      	ldmia	r3!, {r2}
 8015a38:	2720      	movs	r7, #32
 8015a3a:	40ca      	lsrs	r2, r1
 8015a3c:	46a4      	mov	ip, r4
 8015a3e:	1a7f      	subs	r7, r7, r1
 8015a40:	4666      	mov	r6, ip
 8015a42:	429d      	cmp	r5, r3
 8015a44:	d80b      	bhi.n	8015a5e <rshift+0x4a>
 8015a46:	6032      	str	r2, [r6, #0]
 8015a48:	2a00      	cmp	r2, #0
 8015a4a:	d000      	beq.n	8015a4e <rshift+0x3a>
 8015a4c:	3604      	adds	r6, #4
 8015a4e:	1b33      	subs	r3, r6, r4
 8015a50:	109b      	asrs	r3, r3, #2
 8015a52:	6103      	str	r3, [r0, #16]
 8015a54:	42a6      	cmp	r6, r4
 8015a56:	d101      	bne.n	8015a5c <rshift+0x48>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	6143      	str	r3, [r0, #20]
 8015a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a5e:	681e      	ldr	r6, [r3, #0]
 8015a60:	40be      	lsls	r6, r7
 8015a62:	4332      	orrs	r2, r6
 8015a64:	4666      	mov	r6, ip
 8015a66:	c604      	stmia	r6!, {r2}
 8015a68:	cb04      	ldmia	r3!, {r2}
 8015a6a:	46b4      	mov	ip, r6
 8015a6c:	40ca      	lsrs	r2, r1
 8015a6e:	e7e7      	b.n	8015a40 <rshift+0x2c>
 8015a70:	cb02      	ldmia	r3!, {r1}
 8015a72:	c202      	stmia	r2!, {r1}
 8015a74:	0016      	movs	r6, r2
 8015a76:	429d      	cmp	r5, r3
 8015a78:	d8fa      	bhi.n	8015a70 <rshift+0x5c>
 8015a7a:	e7e8      	b.n	8015a4e <rshift+0x3a>

08015a7c <__hexdig_fun>:
 8015a7c:	0003      	movs	r3, r0
 8015a7e:	3b30      	subs	r3, #48	; 0x30
 8015a80:	2b09      	cmp	r3, #9
 8015a82:	d803      	bhi.n	8015a8c <__hexdig_fun+0x10>
 8015a84:	3820      	subs	r0, #32
 8015a86:	b2c3      	uxtb	r3, r0
 8015a88:	0018      	movs	r0, r3
 8015a8a:	4770      	bx	lr
 8015a8c:	0003      	movs	r3, r0
 8015a8e:	3b61      	subs	r3, #97	; 0x61
 8015a90:	2b05      	cmp	r3, #5
 8015a92:	d801      	bhi.n	8015a98 <__hexdig_fun+0x1c>
 8015a94:	3847      	subs	r0, #71	; 0x47
 8015a96:	e7f6      	b.n	8015a86 <__hexdig_fun+0xa>
 8015a98:	0002      	movs	r2, r0
 8015a9a:	3a41      	subs	r2, #65	; 0x41
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	2a05      	cmp	r2, #5
 8015aa0:	d8f2      	bhi.n	8015a88 <__hexdig_fun+0xc>
 8015aa2:	3827      	subs	r0, #39	; 0x27
 8015aa4:	e7ef      	b.n	8015a86 <__hexdig_fun+0xa>

08015aa6 <__gethex>:
 8015aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aa8:	b08d      	sub	sp, #52	; 0x34
 8015aaa:	9005      	str	r0, [sp, #20]
 8015aac:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015aae:	9109      	str	r1, [sp, #36]	; 0x24
 8015ab0:	9202      	str	r2, [sp, #8]
 8015ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8015ab4:	f000 fadf 	bl	8016076 <__localeconv_l>
 8015ab8:	6803      	ldr	r3, [r0, #0]
 8015aba:	0018      	movs	r0, r3
 8015abc:	9307      	str	r3, [sp, #28]
 8015abe:	f7ea fb2b 	bl	8000118 <strlen>
 8015ac2:	2202      	movs	r2, #2
 8015ac4:	9b07      	ldr	r3, [sp, #28]
 8015ac6:	4252      	negs	r2, r2
 8015ac8:	181b      	adds	r3, r3, r0
 8015aca:	3b01      	subs	r3, #1
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	9004      	str	r0, [sp, #16]
 8015ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ad4:	6819      	ldr	r1, [r3, #0]
 8015ad6:	1c8b      	adds	r3, r1, #2
 8015ad8:	1a52      	subs	r2, r2, r1
 8015ada:	18d1      	adds	r1, r2, r3
 8015adc:	9301      	str	r3, [sp, #4]
 8015ade:	9108      	str	r1, [sp, #32]
 8015ae0:	9901      	ldr	r1, [sp, #4]
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	7808      	ldrb	r0, [r1, #0]
 8015ae6:	2830      	cmp	r0, #48	; 0x30
 8015ae8:	d0f7      	beq.n	8015ada <__gethex+0x34>
 8015aea:	f7ff ffc7 	bl	8015a7c <__hexdig_fun>
 8015aee:	1e07      	subs	r7, r0, #0
 8015af0:	d000      	beq.n	8015af4 <__gethex+0x4e>
 8015af2:	e06f      	b.n	8015bd4 <__gethex+0x12e>
 8015af4:	9a04      	ldr	r2, [sp, #16]
 8015af6:	9907      	ldr	r1, [sp, #28]
 8015af8:	9801      	ldr	r0, [sp, #4]
 8015afa:	f7fc fe4b 	bl	8012794 <strncmp>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	d000      	beq.n	8015b04 <__gethex+0x5e>
 8015b02:	e06d      	b.n	8015be0 <__gethex+0x13a>
 8015b04:	9b01      	ldr	r3, [sp, #4]
 8015b06:	9a04      	ldr	r2, [sp, #16]
 8015b08:	189c      	adds	r4, r3, r2
 8015b0a:	7820      	ldrb	r0, [r4, #0]
 8015b0c:	f7ff ffb6 	bl	8015a7c <__hexdig_fun>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d069      	beq.n	8015be8 <__gethex+0x142>
 8015b14:	9401      	str	r4, [sp, #4]
 8015b16:	9b01      	ldr	r3, [sp, #4]
 8015b18:	7818      	ldrb	r0, [r3, #0]
 8015b1a:	2830      	cmp	r0, #48	; 0x30
 8015b1c:	d009      	beq.n	8015b32 <__gethex+0x8c>
 8015b1e:	f7ff ffad 	bl	8015a7c <__hexdig_fun>
 8015b22:	4243      	negs	r3, r0
 8015b24:	4143      	adcs	r3, r0
 8015b26:	9303      	str	r3, [sp, #12]
 8015b28:	2301      	movs	r3, #1
 8015b2a:	0026      	movs	r6, r4
 8015b2c:	9308      	str	r3, [sp, #32]
 8015b2e:	9c01      	ldr	r4, [sp, #4]
 8015b30:	e004      	b.n	8015b3c <__gethex+0x96>
 8015b32:	9b01      	ldr	r3, [sp, #4]
 8015b34:	3301      	adds	r3, #1
 8015b36:	9301      	str	r3, [sp, #4]
 8015b38:	e7ed      	b.n	8015b16 <__gethex+0x70>
 8015b3a:	3401      	adds	r4, #1
 8015b3c:	7820      	ldrb	r0, [r4, #0]
 8015b3e:	f7ff ff9d 	bl	8015a7c <__hexdig_fun>
 8015b42:	2800      	cmp	r0, #0
 8015b44:	d1f9      	bne.n	8015b3a <__gethex+0x94>
 8015b46:	9a04      	ldr	r2, [sp, #16]
 8015b48:	9907      	ldr	r1, [sp, #28]
 8015b4a:	0020      	movs	r0, r4
 8015b4c:	f7fc fe22 	bl	8012794 <strncmp>
 8015b50:	2800      	cmp	r0, #0
 8015b52:	d109      	bne.n	8015b68 <__gethex+0xc2>
 8015b54:	2e00      	cmp	r6, #0
 8015b56:	d10a      	bne.n	8015b6e <__gethex+0xc8>
 8015b58:	9b04      	ldr	r3, [sp, #16]
 8015b5a:	18e4      	adds	r4, r4, r3
 8015b5c:	0026      	movs	r6, r4
 8015b5e:	7820      	ldrb	r0, [r4, #0]
 8015b60:	f7ff ff8c 	bl	8015a7c <__hexdig_fun>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d139      	bne.n	8015bdc <__gethex+0x136>
 8015b68:	2700      	movs	r7, #0
 8015b6a:	42be      	cmp	r6, r7
 8015b6c:	d001      	beq.n	8015b72 <__gethex+0xcc>
 8015b6e:	1b37      	subs	r7, r6, r4
 8015b70:	00bf      	lsls	r7, r7, #2
 8015b72:	7823      	ldrb	r3, [r4, #0]
 8015b74:	2b50      	cmp	r3, #80	; 0x50
 8015b76:	d001      	beq.n	8015b7c <__gethex+0xd6>
 8015b78:	2b70      	cmp	r3, #112	; 0x70
 8015b7a:	d142      	bne.n	8015c02 <__gethex+0x15c>
 8015b7c:	7863      	ldrb	r3, [r4, #1]
 8015b7e:	2b2b      	cmp	r3, #43	; 0x2b
 8015b80:	d034      	beq.n	8015bec <__gethex+0x146>
 8015b82:	2b2d      	cmp	r3, #45	; 0x2d
 8015b84:	d036      	beq.n	8015bf4 <__gethex+0x14e>
 8015b86:	2300      	movs	r3, #0
 8015b88:	1c66      	adds	r6, r4, #1
 8015b8a:	9306      	str	r3, [sp, #24]
 8015b8c:	7830      	ldrb	r0, [r6, #0]
 8015b8e:	f7ff ff75 	bl	8015a7c <__hexdig_fun>
 8015b92:	1e43      	subs	r3, r0, #1
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	2b18      	cmp	r3, #24
 8015b98:	d833      	bhi.n	8015c02 <__gethex+0x15c>
 8015b9a:	3810      	subs	r0, #16
 8015b9c:	0005      	movs	r5, r0
 8015b9e:	3601      	adds	r6, #1
 8015ba0:	7830      	ldrb	r0, [r6, #0]
 8015ba2:	f7ff ff6b 	bl	8015a7c <__hexdig_fun>
 8015ba6:	1e43      	subs	r3, r0, #1
 8015ba8:	b2db      	uxtb	r3, r3
 8015baa:	2b18      	cmp	r3, #24
 8015bac:	d924      	bls.n	8015bf8 <__gethex+0x152>
 8015bae:	9b06      	ldr	r3, [sp, #24]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d000      	beq.n	8015bb6 <__gethex+0x110>
 8015bb4:	426d      	negs	r5, r5
 8015bb6:	197f      	adds	r7, r7, r5
 8015bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bba:	601e      	str	r6, [r3, #0]
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d021      	beq.n	8015c06 <__gethex+0x160>
 8015bc2:	9b08      	ldr	r3, [sp, #32]
 8015bc4:	2606      	movs	r6, #6
 8015bc6:	425a      	negs	r2, r3
 8015bc8:	4153      	adcs	r3, r2
 8015bca:	425b      	negs	r3, r3
 8015bcc:	401e      	ands	r6, r3
 8015bce:	0030      	movs	r0, r6
 8015bd0:	b00d      	add	sp, #52	; 0x34
 8015bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	9303      	str	r3, [sp, #12]
 8015bd8:	001e      	movs	r6, r3
 8015bda:	e7a8      	b.n	8015b2e <__gethex+0x88>
 8015bdc:	3401      	adds	r4, #1
 8015bde:	e7be      	b.n	8015b5e <__gethex+0xb8>
 8015be0:	9c01      	ldr	r4, [sp, #4]
 8015be2:	2301      	movs	r3, #1
 8015be4:	9303      	str	r3, [sp, #12]
 8015be6:	e7c4      	b.n	8015b72 <__gethex+0xcc>
 8015be8:	0007      	movs	r7, r0
 8015bea:	e7fa      	b.n	8015be2 <__gethex+0x13c>
 8015bec:	2300      	movs	r3, #0
 8015bee:	9306      	str	r3, [sp, #24]
 8015bf0:	1ca6      	adds	r6, r4, #2
 8015bf2:	e7cb      	b.n	8015b8c <__gethex+0xe6>
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	e7fa      	b.n	8015bee <__gethex+0x148>
 8015bf8:	230a      	movs	r3, #10
 8015bfa:	435d      	muls	r5, r3
 8015bfc:	182d      	adds	r5, r5, r0
 8015bfe:	3d10      	subs	r5, #16
 8015c00:	e7cd      	b.n	8015b9e <__gethex+0xf8>
 8015c02:	0026      	movs	r6, r4
 8015c04:	e7d8      	b.n	8015bb8 <__gethex+0x112>
 8015c06:	9b01      	ldr	r3, [sp, #4]
 8015c08:	9903      	ldr	r1, [sp, #12]
 8015c0a:	1ae3      	subs	r3, r4, r3
 8015c0c:	3b01      	subs	r3, #1
 8015c0e:	2b07      	cmp	r3, #7
 8015c10:	dc47      	bgt.n	8015ca2 <__gethex+0x1fc>
 8015c12:	9805      	ldr	r0, [sp, #20]
 8015c14:	f000 fa5e 	bl	80160d4 <_Balloc>
 8015c18:	0003      	movs	r3, r0
 8015c1a:	3314      	adds	r3, #20
 8015c1c:	9303      	str	r3, [sp, #12]
 8015c1e:	9308      	str	r3, [sp, #32]
 8015c20:	2300      	movs	r3, #0
 8015c22:	0005      	movs	r5, r0
 8015c24:	001e      	movs	r6, r3
 8015c26:	9306      	str	r3, [sp, #24]
 8015c28:	9b01      	ldr	r3, [sp, #4]
 8015c2a:	42a3      	cmp	r3, r4
 8015c2c:	d33c      	bcc.n	8015ca8 <__gethex+0x202>
 8015c2e:	9c08      	ldr	r4, [sp, #32]
 8015c30:	9b03      	ldr	r3, [sp, #12]
 8015c32:	c440      	stmia	r4!, {r6}
 8015c34:	1ae4      	subs	r4, r4, r3
 8015c36:	10a4      	asrs	r4, r4, #2
 8015c38:	612c      	str	r4, [r5, #16]
 8015c3a:	0030      	movs	r0, r6
 8015c3c:	f000 faf8 	bl	8016230 <__hi0bits>
 8015c40:	9b02      	ldr	r3, [sp, #8]
 8015c42:	0164      	lsls	r4, r4, #5
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	1a26      	subs	r6, r4, r0
 8015c48:	9301      	str	r3, [sp, #4]
 8015c4a:	429e      	cmp	r6, r3
 8015c4c:	dd5f      	ble.n	8015d0e <__gethex+0x268>
 8015c4e:	1af6      	subs	r6, r6, r3
 8015c50:	0031      	movs	r1, r6
 8015c52:	0028      	movs	r0, r5
 8015c54:	f000 fde3 	bl	801681e <__any_on>
 8015c58:	1e04      	subs	r4, r0, #0
 8015c5a:	d00f      	beq.n	8015c7c <__gethex+0x1d6>
 8015c5c:	2401      	movs	r4, #1
 8015c5e:	211f      	movs	r1, #31
 8015c60:	0020      	movs	r0, r4
 8015c62:	1e73      	subs	r3, r6, #1
 8015c64:	4019      	ands	r1, r3
 8015c66:	4088      	lsls	r0, r1
 8015c68:	0001      	movs	r1, r0
 8015c6a:	115a      	asrs	r2, r3, #5
 8015c6c:	9803      	ldr	r0, [sp, #12]
 8015c6e:	0092      	lsls	r2, r2, #2
 8015c70:	5812      	ldr	r2, [r2, r0]
 8015c72:	420a      	tst	r2, r1
 8015c74:	d002      	beq.n	8015c7c <__gethex+0x1d6>
 8015c76:	42a3      	cmp	r3, r4
 8015c78:	dc41      	bgt.n	8015cfe <__gethex+0x258>
 8015c7a:	2402      	movs	r4, #2
 8015c7c:	0031      	movs	r1, r6
 8015c7e:	0028      	movs	r0, r5
 8015c80:	f7ff fec8 	bl	8015a14 <rshift>
 8015c84:	19bf      	adds	r7, r7, r6
 8015c86:	9b02      	ldr	r3, [sp, #8]
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	9304      	str	r3, [sp, #16]
 8015c8c:	42bb      	cmp	r3, r7
 8015c8e:	da4e      	bge.n	8015d2e <__gethex+0x288>
 8015c90:	0029      	movs	r1, r5
 8015c92:	9805      	ldr	r0, [sp, #20]
 8015c94:	f000 fa46 	bl	8016124 <_Bfree>
 8015c98:	2300      	movs	r3, #0
 8015c9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015c9c:	26a3      	movs	r6, #163	; 0xa3
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	e795      	b.n	8015bce <__gethex+0x128>
 8015ca2:	3101      	adds	r1, #1
 8015ca4:	105b      	asrs	r3, r3, #1
 8015ca6:	e7b2      	b.n	8015c0e <__gethex+0x168>
 8015ca8:	1e63      	subs	r3, r4, #1
 8015caa:	9309      	str	r3, [sp, #36]	; 0x24
 8015cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	d015      	beq.n	8015ce0 <__gethex+0x23a>
 8015cb4:	9b06      	ldr	r3, [sp, #24]
 8015cb6:	2b20      	cmp	r3, #32
 8015cb8:	d105      	bne.n	8015cc6 <__gethex+0x220>
 8015cba:	9b08      	ldr	r3, [sp, #32]
 8015cbc:	601e      	str	r6, [r3, #0]
 8015cbe:	2600      	movs	r6, #0
 8015cc0:	3304      	adds	r3, #4
 8015cc2:	9308      	str	r3, [sp, #32]
 8015cc4:	9606      	str	r6, [sp, #24]
 8015cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc8:	7818      	ldrb	r0, [r3, #0]
 8015cca:	f7ff fed7 	bl	8015a7c <__hexdig_fun>
 8015cce:	230f      	movs	r3, #15
 8015cd0:	4018      	ands	r0, r3
 8015cd2:	9b06      	ldr	r3, [sp, #24]
 8015cd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015cd6:	4098      	lsls	r0, r3
 8015cd8:	3304      	adds	r3, #4
 8015cda:	4306      	orrs	r6, r0
 8015cdc:	9306      	str	r3, [sp, #24]
 8015cde:	e7a3      	b.n	8015c28 <__gethex+0x182>
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	9a04      	ldr	r2, [sp, #16]
 8015ce4:	1a9c      	subs	r4, r3, r2
 8015ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ce8:	191c      	adds	r4, r3, r4
 8015cea:	9b01      	ldr	r3, [sp, #4]
 8015cec:	429c      	cmp	r4, r3
 8015cee:	d3e1      	bcc.n	8015cb4 <__gethex+0x20e>
 8015cf0:	9907      	ldr	r1, [sp, #28]
 8015cf2:	0020      	movs	r0, r4
 8015cf4:	f7fc fd4e 	bl	8012794 <strncmp>
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d1db      	bne.n	8015cb4 <__gethex+0x20e>
 8015cfc:	e794      	b.n	8015c28 <__gethex+0x182>
 8015cfe:	1eb1      	subs	r1, r6, #2
 8015d00:	0028      	movs	r0, r5
 8015d02:	f000 fd8c 	bl	801681e <__any_on>
 8015d06:	2800      	cmp	r0, #0
 8015d08:	d0b7      	beq.n	8015c7a <__gethex+0x1d4>
 8015d0a:	2403      	movs	r4, #3
 8015d0c:	e7b6      	b.n	8015c7c <__gethex+0x1d6>
 8015d0e:	9b01      	ldr	r3, [sp, #4]
 8015d10:	2400      	movs	r4, #0
 8015d12:	429e      	cmp	r6, r3
 8015d14:	dab7      	bge.n	8015c86 <__gethex+0x1e0>
 8015d16:	1b9e      	subs	r6, r3, r6
 8015d18:	0029      	movs	r1, r5
 8015d1a:	0032      	movs	r2, r6
 8015d1c:	9805      	ldr	r0, [sp, #20]
 8015d1e:	f000 fbab 	bl	8016478 <__lshift>
 8015d22:	0003      	movs	r3, r0
 8015d24:	3314      	adds	r3, #20
 8015d26:	0005      	movs	r5, r0
 8015d28:	1bbf      	subs	r7, r7, r6
 8015d2a:	9303      	str	r3, [sp, #12]
 8015d2c:	e7ab      	b.n	8015c86 <__gethex+0x1e0>
 8015d2e:	9b02      	ldr	r3, [sp, #8]
 8015d30:	685e      	ldr	r6, [r3, #4]
 8015d32:	42be      	cmp	r6, r7
 8015d34:	dd6b      	ble.n	8015e0e <__gethex+0x368>
 8015d36:	9b01      	ldr	r3, [sp, #4]
 8015d38:	1bf6      	subs	r6, r6, r7
 8015d3a:	42b3      	cmp	r3, r6
 8015d3c:	dc32      	bgt.n	8015da4 <__gethex+0x2fe>
 8015d3e:	9b02      	ldr	r3, [sp, #8]
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	2b02      	cmp	r3, #2
 8015d44:	d026      	beq.n	8015d94 <__gethex+0x2ee>
 8015d46:	2b03      	cmp	r3, #3
 8015d48:	d028      	beq.n	8015d9c <__gethex+0x2f6>
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	d119      	bne.n	8015d82 <__gethex+0x2dc>
 8015d4e:	9b01      	ldr	r3, [sp, #4]
 8015d50:	42b3      	cmp	r3, r6
 8015d52:	d116      	bne.n	8015d82 <__gethex+0x2dc>
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	dc0d      	bgt.n	8015d74 <__gethex+0x2ce>
 8015d58:	9b02      	ldr	r3, [sp, #8]
 8015d5a:	2662      	movs	r6, #98	; 0x62
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	9301      	str	r3, [sp, #4]
 8015d60:	9a01      	ldr	r2, [sp, #4]
 8015d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d64:	601a      	str	r2, [r3, #0]
 8015d66:	2301      	movs	r3, #1
 8015d68:	9a03      	ldr	r2, [sp, #12]
 8015d6a:	612b      	str	r3, [r5, #16]
 8015d6c:	6013      	str	r3, [r2, #0]
 8015d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d70:	601d      	str	r5, [r3, #0]
 8015d72:	e72c      	b.n	8015bce <__gethex+0x128>
 8015d74:	9901      	ldr	r1, [sp, #4]
 8015d76:	0028      	movs	r0, r5
 8015d78:	3901      	subs	r1, #1
 8015d7a:	f000 fd50 	bl	801681e <__any_on>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d1ea      	bne.n	8015d58 <__gethex+0x2b2>
 8015d82:	0029      	movs	r1, r5
 8015d84:	9805      	ldr	r0, [sp, #20]
 8015d86:	f000 f9cd 	bl	8016124 <_Bfree>
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d8e:	2650      	movs	r6, #80	; 0x50
 8015d90:	6013      	str	r3, [r2, #0]
 8015d92:	e71c      	b.n	8015bce <__gethex+0x128>
 8015d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d0de      	beq.n	8015d58 <__gethex+0x2b2>
 8015d9a:	e7f2      	b.n	8015d82 <__gethex+0x2dc>
 8015d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1da      	bne.n	8015d58 <__gethex+0x2b2>
 8015da2:	e7ee      	b.n	8015d82 <__gethex+0x2dc>
 8015da4:	1e77      	subs	r7, r6, #1
 8015da6:	2c00      	cmp	r4, #0
 8015da8:	d12f      	bne.n	8015e0a <__gethex+0x364>
 8015daa:	2f00      	cmp	r7, #0
 8015dac:	d004      	beq.n	8015db8 <__gethex+0x312>
 8015dae:	0039      	movs	r1, r7
 8015db0:	0028      	movs	r0, r5
 8015db2:	f000 fd34 	bl	801681e <__any_on>
 8015db6:	0004      	movs	r4, r0
 8015db8:	231f      	movs	r3, #31
 8015dba:	117a      	asrs	r2, r7, #5
 8015dbc:	401f      	ands	r7, r3
 8015dbe:	3b1e      	subs	r3, #30
 8015dc0:	40bb      	lsls	r3, r7
 8015dc2:	9903      	ldr	r1, [sp, #12]
 8015dc4:	0092      	lsls	r2, r2, #2
 8015dc6:	5852      	ldr	r2, [r2, r1]
 8015dc8:	421a      	tst	r2, r3
 8015dca:	d001      	beq.n	8015dd0 <__gethex+0x32a>
 8015dcc:	2302      	movs	r3, #2
 8015dce:	431c      	orrs	r4, r3
 8015dd0:	9b01      	ldr	r3, [sp, #4]
 8015dd2:	0031      	movs	r1, r6
 8015dd4:	1b9b      	subs	r3, r3, r6
 8015dd6:	2602      	movs	r6, #2
 8015dd8:	0028      	movs	r0, r5
 8015dda:	9301      	str	r3, [sp, #4]
 8015ddc:	f7ff fe1a 	bl	8015a14 <rshift>
 8015de0:	9b02      	ldr	r3, [sp, #8]
 8015de2:	685f      	ldr	r7, [r3, #4]
 8015de4:	2c00      	cmp	r4, #0
 8015de6:	d040      	beq.n	8015e6a <__gethex+0x3c4>
 8015de8:	9b02      	ldr	r3, [sp, #8]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	2b02      	cmp	r3, #2
 8015dee:	d010      	beq.n	8015e12 <__gethex+0x36c>
 8015df0:	2b03      	cmp	r3, #3
 8015df2:	d012      	beq.n	8015e1a <__gethex+0x374>
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d106      	bne.n	8015e06 <__gethex+0x360>
 8015df8:	07a2      	lsls	r2, r4, #30
 8015dfa:	d504      	bpl.n	8015e06 <__gethex+0x360>
 8015dfc:	9a03      	ldr	r2, [sp, #12]
 8015dfe:	6812      	ldr	r2, [r2, #0]
 8015e00:	4314      	orrs	r4, r2
 8015e02:	421c      	tst	r4, r3
 8015e04:	d10c      	bne.n	8015e20 <__gethex+0x37a>
 8015e06:	2310      	movs	r3, #16
 8015e08:	e02e      	b.n	8015e68 <__gethex+0x3c2>
 8015e0a:	2401      	movs	r4, #1
 8015e0c:	e7d4      	b.n	8015db8 <__gethex+0x312>
 8015e0e:	2601      	movs	r6, #1
 8015e10:	e7e8      	b.n	8015de4 <__gethex+0x33e>
 8015e12:	2301      	movs	r3, #1
 8015e14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015e16:	1a9b      	subs	r3, r3, r2
 8015e18:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d0f2      	beq.n	8015e06 <__gethex+0x360>
 8015e20:	692c      	ldr	r4, [r5, #16]
 8015e22:	00a3      	lsls	r3, r4, #2
 8015e24:	9304      	str	r3, [sp, #16]
 8015e26:	002b      	movs	r3, r5
 8015e28:	00a2      	lsls	r2, r4, #2
 8015e2a:	3314      	adds	r3, #20
 8015e2c:	1899      	adds	r1, r3, r2
 8015e2e:	2200      	movs	r2, #0
 8015e30:	4694      	mov	ip, r2
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	1c50      	adds	r0, r2, #1
 8015e36:	d01d      	beq.n	8015e74 <__gethex+0x3ce>
 8015e38:	3201      	adds	r2, #1
 8015e3a:	601a      	str	r2, [r3, #0]
 8015e3c:	002b      	movs	r3, r5
 8015e3e:	3314      	adds	r3, #20
 8015e40:	2e02      	cmp	r6, #2
 8015e42:	d13a      	bne.n	8015eba <__gethex+0x414>
 8015e44:	9a02      	ldr	r2, [sp, #8]
 8015e46:	9901      	ldr	r1, [sp, #4]
 8015e48:	6812      	ldr	r2, [r2, #0]
 8015e4a:	3a01      	subs	r2, #1
 8015e4c:	428a      	cmp	r2, r1
 8015e4e:	d10a      	bne.n	8015e66 <__gethex+0x3c0>
 8015e50:	114a      	asrs	r2, r1, #5
 8015e52:	211f      	movs	r1, #31
 8015e54:	9801      	ldr	r0, [sp, #4]
 8015e56:	0092      	lsls	r2, r2, #2
 8015e58:	4001      	ands	r1, r0
 8015e5a:	2001      	movs	r0, #1
 8015e5c:	0004      	movs	r4, r0
 8015e5e:	408c      	lsls	r4, r1
 8015e60:	58d3      	ldr	r3, [r2, r3]
 8015e62:	4223      	tst	r3, r4
 8015e64:	d148      	bne.n	8015ef8 <__gethex+0x452>
 8015e66:	2320      	movs	r3, #32
 8015e68:	431e      	orrs	r6, r3
 8015e6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e6c:	601d      	str	r5, [r3, #0]
 8015e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e70:	601f      	str	r7, [r3, #0]
 8015e72:	e6ac      	b.n	8015bce <__gethex+0x128>
 8015e74:	4662      	mov	r2, ip
 8015e76:	c304      	stmia	r3!, {r2}
 8015e78:	4299      	cmp	r1, r3
 8015e7a:	d8da      	bhi.n	8015e32 <__gethex+0x38c>
 8015e7c:	68ab      	ldr	r3, [r5, #8]
 8015e7e:	429c      	cmp	r4, r3
 8015e80:	db12      	blt.n	8015ea8 <__gethex+0x402>
 8015e82:	686b      	ldr	r3, [r5, #4]
 8015e84:	9805      	ldr	r0, [sp, #20]
 8015e86:	1c59      	adds	r1, r3, #1
 8015e88:	f000 f924 	bl	80160d4 <_Balloc>
 8015e8c:	0029      	movs	r1, r5
 8015e8e:	692b      	ldr	r3, [r5, #16]
 8015e90:	9003      	str	r0, [sp, #12]
 8015e92:	1c9a      	adds	r2, r3, #2
 8015e94:	0092      	lsls	r2, r2, #2
 8015e96:	310c      	adds	r1, #12
 8015e98:	300c      	adds	r0, #12
 8015e9a:	f7fc fa34 	bl	8012306 <memcpy>
 8015e9e:	0029      	movs	r1, r5
 8015ea0:	9805      	ldr	r0, [sp, #20]
 8015ea2:	f000 f93f 	bl	8016124 <_Bfree>
 8015ea6:	9d03      	ldr	r5, [sp, #12]
 8015ea8:	692b      	ldr	r3, [r5, #16]
 8015eaa:	1c5a      	adds	r2, r3, #1
 8015eac:	612a      	str	r2, [r5, #16]
 8015eae:	2201      	movs	r2, #1
 8015eb0:	3304      	adds	r3, #4
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	18eb      	adds	r3, r5, r3
 8015eb6:	605a      	str	r2, [r3, #4]
 8015eb8:	e7c0      	b.n	8015e3c <__gethex+0x396>
 8015eba:	692a      	ldr	r2, [r5, #16]
 8015ebc:	42a2      	cmp	r2, r4
 8015ebe:	dd0a      	ble.n	8015ed6 <__gethex+0x430>
 8015ec0:	2101      	movs	r1, #1
 8015ec2:	0028      	movs	r0, r5
 8015ec4:	f7ff fda6 	bl	8015a14 <rshift>
 8015ec8:	9b02      	ldr	r3, [sp, #8]
 8015eca:	3701      	adds	r7, #1
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	2601      	movs	r6, #1
 8015ed0:	42bb      	cmp	r3, r7
 8015ed2:	dac8      	bge.n	8015e66 <__gethex+0x3c0>
 8015ed4:	e6dc      	b.n	8015c90 <__gethex+0x1ea>
 8015ed6:	241f      	movs	r4, #31
 8015ed8:	9a01      	ldr	r2, [sp, #4]
 8015eda:	2601      	movs	r6, #1
 8015edc:	4022      	ands	r2, r4
 8015ede:	1e14      	subs	r4, r2, #0
 8015ee0:	d0c1      	beq.n	8015e66 <__gethex+0x3c0>
 8015ee2:	9a04      	ldr	r2, [sp, #16]
 8015ee4:	189b      	adds	r3, r3, r2
 8015ee6:	3b04      	subs	r3, #4
 8015ee8:	6818      	ldr	r0, [r3, #0]
 8015eea:	f000 f9a1 	bl	8016230 <__hi0bits>
 8015eee:	2120      	movs	r1, #32
 8015ef0:	1b0c      	subs	r4, r1, r4
 8015ef2:	42a0      	cmp	r0, r4
 8015ef4:	dbe4      	blt.n	8015ec0 <__gethex+0x41a>
 8015ef6:	e7b6      	b.n	8015e66 <__gethex+0x3c0>
 8015ef8:	0006      	movs	r6, r0
 8015efa:	e7b4      	b.n	8015e66 <__gethex+0x3c0>

08015efc <L_shift>:
 8015efc:	2308      	movs	r3, #8
 8015efe:	b570      	push	{r4, r5, r6, lr}
 8015f00:	2520      	movs	r5, #32
 8015f02:	1a9a      	subs	r2, r3, r2
 8015f04:	0092      	lsls	r2, r2, #2
 8015f06:	1aad      	subs	r5, r5, r2
 8015f08:	6843      	ldr	r3, [r0, #4]
 8015f0a:	6806      	ldr	r6, [r0, #0]
 8015f0c:	001c      	movs	r4, r3
 8015f0e:	40ac      	lsls	r4, r5
 8015f10:	40d3      	lsrs	r3, r2
 8015f12:	4334      	orrs	r4, r6
 8015f14:	6004      	str	r4, [r0, #0]
 8015f16:	6043      	str	r3, [r0, #4]
 8015f18:	3004      	adds	r0, #4
 8015f1a:	4288      	cmp	r0, r1
 8015f1c:	d3f4      	bcc.n	8015f08 <L_shift+0xc>
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}

08015f20 <__match>:
 8015f20:	b530      	push	{r4, r5, lr}
 8015f22:	6803      	ldr	r3, [r0, #0]
 8015f24:	780c      	ldrb	r4, [r1, #0]
 8015f26:	3301      	adds	r3, #1
 8015f28:	2c00      	cmp	r4, #0
 8015f2a:	d102      	bne.n	8015f32 <__match+0x12>
 8015f2c:	6003      	str	r3, [r0, #0]
 8015f2e:	2001      	movs	r0, #1
 8015f30:	bd30      	pop	{r4, r5, pc}
 8015f32:	781a      	ldrb	r2, [r3, #0]
 8015f34:	0015      	movs	r5, r2
 8015f36:	3d41      	subs	r5, #65	; 0x41
 8015f38:	2d19      	cmp	r5, #25
 8015f3a:	d800      	bhi.n	8015f3e <__match+0x1e>
 8015f3c:	3220      	adds	r2, #32
 8015f3e:	3101      	adds	r1, #1
 8015f40:	42a2      	cmp	r2, r4
 8015f42:	d0ef      	beq.n	8015f24 <__match+0x4>
 8015f44:	2000      	movs	r0, #0
 8015f46:	e7f3      	b.n	8015f30 <__match+0x10>

08015f48 <__hexnan>:
 8015f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f4a:	b08b      	sub	sp, #44	; 0x2c
 8015f4c:	9201      	str	r2, [sp, #4]
 8015f4e:	680a      	ldr	r2, [r1, #0]
 8015f50:	9901      	ldr	r1, [sp, #4]
 8015f52:	1153      	asrs	r3, r2, #5
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	18cb      	adds	r3, r1, r3
 8015f58:	9304      	str	r3, [sp, #16]
 8015f5a:	231f      	movs	r3, #31
 8015f5c:	401a      	ands	r2, r3
 8015f5e:	9008      	str	r0, [sp, #32]
 8015f60:	9206      	str	r2, [sp, #24]
 8015f62:	d002      	beq.n	8015f6a <__hexnan+0x22>
 8015f64:	9b04      	ldr	r3, [sp, #16]
 8015f66:	3304      	adds	r3, #4
 8015f68:	9304      	str	r3, [sp, #16]
 8015f6a:	9b04      	ldr	r3, [sp, #16]
 8015f6c:	2500      	movs	r5, #0
 8015f6e:	1f1e      	subs	r6, r3, #4
 8015f70:	0037      	movs	r7, r6
 8015f72:	0034      	movs	r4, r6
 8015f74:	9b08      	ldr	r3, [sp, #32]
 8015f76:	6035      	str	r5, [r6, #0]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	9507      	str	r5, [sp, #28]
 8015f7c:	9305      	str	r3, [sp, #20]
 8015f7e:	9502      	str	r5, [sp, #8]
 8015f80:	9b05      	ldr	r3, [sp, #20]
 8015f82:	3301      	adds	r3, #1
 8015f84:	9309      	str	r3, [sp, #36]	; 0x24
 8015f86:	9b05      	ldr	r3, [sp, #20]
 8015f88:	785b      	ldrb	r3, [r3, #1]
 8015f8a:	9303      	str	r3, [sp, #12]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d028      	beq.n	8015fe2 <__hexnan+0x9a>
 8015f90:	9803      	ldr	r0, [sp, #12]
 8015f92:	f7ff fd73 	bl	8015a7c <__hexdig_fun>
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d145      	bne.n	8016026 <__hexnan+0xde>
 8015f9a:	9b03      	ldr	r3, [sp, #12]
 8015f9c:	2b20      	cmp	r3, #32
 8015f9e:	d819      	bhi.n	8015fd4 <__hexnan+0x8c>
 8015fa0:	9b02      	ldr	r3, [sp, #8]
 8015fa2:	9a07      	ldr	r2, [sp, #28]
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	dd12      	ble.n	8015fce <__hexnan+0x86>
 8015fa8:	42bc      	cmp	r4, r7
 8015faa:	d206      	bcs.n	8015fba <__hexnan+0x72>
 8015fac:	2d07      	cmp	r5, #7
 8015fae:	dc04      	bgt.n	8015fba <__hexnan+0x72>
 8015fb0:	002a      	movs	r2, r5
 8015fb2:	0039      	movs	r1, r7
 8015fb4:	0020      	movs	r0, r4
 8015fb6:	f7ff ffa1 	bl	8015efc <L_shift>
 8015fba:	9b01      	ldr	r3, [sp, #4]
 8015fbc:	2508      	movs	r5, #8
 8015fbe:	429c      	cmp	r4, r3
 8015fc0:	d905      	bls.n	8015fce <__hexnan+0x86>
 8015fc2:	1f27      	subs	r7, r4, #4
 8015fc4:	2500      	movs	r5, #0
 8015fc6:	003c      	movs	r4, r7
 8015fc8:	9b02      	ldr	r3, [sp, #8]
 8015fca:	603d      	str	r5, [r7, #0]
 8015fcc:	9307      	str	r3, [sp, #28]
 8015fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd0:	9305      	str	r3, [sp, #20]
 8015fd2:	e7d5      	b.n	8015f80 <__hexnan+0x38>
 8015fd4:	9b03      	ldr	r3, [sp, #12]
 8015fd6:	2b29      	cmp	r3, #41	; 0x29
 8015fd8:	d14a      	bne.n	8016070 <__hexnan+0x128>
 8015fda:	9b05      	ldr	r3, [sp, #20]
 8015fdc:	9a08      	ldr	r2, [sp, #32]
 8015fde:	3302      	adds	r3, #2
 8015fe0:	6013      	str	r3, [r2, #0]
 8015fe2:	9b02      	ldr	r3, [sp, #8]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d043      	beq.n	8016070 <__hexnan+0x128>
 8015fe8:	42bc      	cmp	r4, r7
 8015fea:	d206      	bcs.n	8015ffa <__hexnan+0xb2>
 8015fec:	2d07      	cmp	r5, #7
 8015fee:	dc04      	bgt.n	8015ffa <__hexnan+0xb2>
 8015ff0:	002a      	movs	r2, r5
 8015ff2:	0039      	movs	r1, r7
 8015ff4:	0020      	movs	r0, r4
 8015ff6:	f7ff ff81 	bl	8015efc <L_shift>
 8015ffa:	9b01      	ldr	r3, [sp, #4]
 8015ffc:	429c      	cmp	r4, r3
 8015ffe:	d926      	bls.n	801604e <__hexnan+0x106>
 8016000:	cc04      	ldmia	r4!, {r2}
 8016002:	601a      	str	r2, [r3, #0]
 8016004:	3304      	adds	r3, #4
 8016006:	42a6      	cmp	r6, r4
 8016008:	d2fa      	bcs.n	8016000 <__hexnan+0xb8>
 801600a:	2200      	movs	r2, #0
 801600c:	c304      	stmia	r3!, {r2}
 801600e:	429e      	cmp	r6, r3
 8016010:	d2fc      	bcs.n	801600c <__hexnan+0xc4>
 8016012:	6833      	ldr	r3, [r6, #0]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d104      	bne.n	8016022 <__hexnan+0xda>
 8016018:	9b01      	ldr	r3, [sp, #4]
 801601a:	429e      	cmp	r6, r3
 801601c:	d126      	bne.n	801606c <__hexnan+0x124>
 801601e:	2301      	movs	r3, #1
 8016020:	6033      	str	r3, [r6, #0]
 8016022:	2005      	movs	r0, #5
 8016024:	e025      	b.n	8016072 <__hexnan+0x12a>
 8016026:	9b02      	ldr	r3, [sp, #8]
 8016028:	3501      	adds	r5, #1
 801602a:	3301      	adds	r3, #1
 801602c:	9302      	str	r3, [sp, #8]
 801602e:	2d08      	cmp	r5, #8
 8016030:	dd06      	ble.n	8016040 <__hexnan+0xf8>
 8016032:	9b01      	ldr	r3, [sp, #4]
 8016034:	429c      	cmp	r4, r3
 8016036:	d9ca      	bls.n	8015fce <__hexnan+0x86>
 8016038:	2300      	movs	r3, #0
 801603a:	2501      	movs	r5, #1
 801603c:	3c04      	subs	r4, #4
 801603e:	6023      	str	r3, [r4, #0]
 8016040:	220f      	movs	r2, #15
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	4010      	ands	r0, r2
 8016046:	011b      	lsls	r3, r3, #4
 8016048:	4318      	orrs	r0, r3
 801604a:	6020      	str	r0, [r4, #0]
 801604c:	e7bf      	b.n	8015fce <__hexnan+0x86>
 801604e:	9b06      	ldr	r3, [sp, #24]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d0de      	beq.n	8016012 <__hexnan+0xca>
 8016054:	2120      	movs	r1, #32
 8016056:	9a06      	ldr	r2, [sp, #24]
 8016058:	9b04      	ldr	r3, [sp, #16]
 801605a:	1a89      	subs	r1, r1, r2
 801605c:	2201      	movs	r2, #1
 801605e:	4252      	negs	r2, r2
 8016060:	40ca      	lsrs	r2, r1
 8016062:	3b04      	subs	r3, #4
 8016064:	6819      	ldr	r1, [r3, #0]
 8016066:	400a      	ands	r2, r1
 8016068:	601a      	str	r2, [r3, #0]
 801606a:	e7d2      	b.n	8016012 <__hexnan+0xca>
 801606c:	3e04      	subs	r6, #4
 801606e:	e7d0      	b.n	8016012 <__hexnan+0xca>
 8016070:	2004      	movs	r0, #4
 8016072:	b00b      	add	sp, #44	; 0x2c
 8016074:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016076 <__localeconv_l>:
 8016076:	30f0      	adds	r0, #240	; 0xf0
 8016078:	4770      	bx	lr
	...

0801607c <_localeconv_r>:
 801607c:	4b03      	ldr	r3, [pc, #12]	; (801608c <_localeconv_r+0x10>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016082:	2800      	cmp	r0, #0
 8016084:	d100      	bne.n	8016088 <_localeconv_r+0xc>
 8016086:	4802      	ldr	r0, [pc, #8]	; (8016090 <_localeconv_r+0x14>)
 8016088:	30f0      	adds	r0, #240	; 0xf0
 801608a:	4770      	bx	lr
 801608c:	200000cc 	.word	0x200000cc
 8016090:	200004f8 	.word	0x200004f8

08016094 <__retarget_lock_acquire_recursive>:
 8016094:	4770      	bx	lr

08016096 <__retarget_lock_release_recursive>:
 8016096:	4770      	bx	lr

08016098 <memchr>:
 8016098:	b2c9      	uxtb	r1, r1
 801609a:	1882      	adds	r2, r0, r2
 801609c:	4290      	cmp	r0, r2
 801609e:	d101      	bne.n	80160a4 <memchr+0xc>
 80160a0:	2000      	movs	r0, #0
 80160a2:	4770      	bx	lr
 80160a4:	7803      	ldrb	r3, [r0, #0]
 80160a6:	428b      	cmp	r3, r1
 80160a8:	d0fb      	beq.n	80160a2 <memchr+0xa>
 80160aa:	3001      	adds	r0, #1
 80160ac:	e7f6      	b.n	801609c <memchr+0x4>

080160ae <memmove>:
 80160ae:	b510      	push	{r4, lr}
 80160b0:	4288      	cmp	r0, r1
 80160b2:	d902      	bls.n	80160ba <memmove+0xc>
 80160b4:	188b      	adds	r3, r1, r2
 80160b6:	4298      	cmp	r0, r3
 80160b8:	d303      	bcc.n	80160c2 <memmove+0x14>
 80160ba:	2300      	movs	r3, #0
 80160bc:	e007      	b.n	80160ce <memmove+0x20>
 80160be:	5c8b      	ldrb	r3, [r1, r2]
 80160c0:	5483      	strb	r3, [r0, r2]
 80160c2:	3a01      	subs	r2, #1
 80160c4:	d2fb      	bcs.n	80160be <memmove+0x10>
 80160c6:	bd10      	pop	{r4, pc}
 80160c8:	5ccc      	ldrb	r4, [r1, r3]
 80160ca:	54c4      	strb	r4, [r0, r3]
 80160cc:	3301      	adds	r3, #1
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d1fa      	bne.n	80160c8 <memmove+0x1a>
 80160d2:	e7f8      	b.n	80160c6 <memmove+0x18>

080160d4 <_Balloc>:
 80160d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80160d6:	b570      	push	{r4, r5, r6, lr}
 80160d8:	0004      	movs	r4, r0
 80160da:	000d      	movs	r5, r1
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d012      	beq.n	8016106 <_Balloc+0x32>
 80160e0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80160e2:	00ab      	lsls	r3, r5, #2
 80160e4:	18d3      	adds	r3, r2, r3
 80160e6:	6818      	ldr	r0, [r3, #0]
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d115      	bne.n	8016118 <_Balloc+0x44>
 80160ec:	2101      	movs	r1, #1
 80160ee:	000e      	movs	r6, r1
 80160f0:	40ae      	lsls	r6, r5
 80160f2:	1d72      	adds	r2, r6, #5
 80160f4:	0092      	lsls	r2, r2, #2
 80160f6:	0020      	movs	r0, r4
 80160f8:	f7fb fe56 	bl	8011da8 <_calloc_r>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d009      	beq.n	8016114 <_Balloc+0x40>
 8016100:	6045      	str	r5, [r0, #4]
 8016102:	6086      	str	r6, [r0, #8]
 8016104:	e00a      	b.n	801611c <_Balloc+0x48>
 8016106:	2221      	movs	r2, #33	; 0x21
 8016108:	2104      	movs	r1, #4
 801610a:	f7fb fe4d 	bl	8011da8 <_calloc_r>
 801610e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016110:	2800      	cmp	r0, #0
 8016112:	d1e5      	bne.n	80160e0 <_Balloc+0xc>
 8016114:	2000      	movs	r0, #0
 8016116:	bd70      	pop	{r4, r5, r6, pc}
 8016118:	6802      	ldr	r2, [r0, #0]
 801611a:	601a      	str	r2, [r3, #0]
 801611c:	2300      	movs	r3, #0
 801611e:	6103      	str	r3, [r0, #16]
 8016120:	60c3      	str	r3, [r0, #12]
 8016122:	e7f8      	b.n	8016116 <_Balloc+0x42>

08016124 <_Bfree>:
 8016124:	2900      	cmp	r1, #0
 8016126:	d006      	beq.n	8016136 <_Bfree+0x12>
 8016128:	684b      	ldr	r3, [r1, #4]
 801612a:	009a      	lsls	r2, r3, #2
 801612c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801612e:	189b      	adds	r3, r3, r2
 8016130:	681a      	ldr	r2, [r3, #0]
 8016132:	600a      	str	r2, [r1, #0]
 8016134:	6019      	str	r1, [r3, #0]
 8016136:	4770      	bx	lr

08016138 <__multadd>:
 8016138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801613a:	001e      	movs	r6, r3
 801613c:	2314      	movs	r3, #20
 801613e:	469c      	mov	ip, r3
 8016140:	0007      	movs	r7, r0
 8016142:	000c      	movs	r4, r1
 8016144:	2000      	movs	r0, #0
 8016146:	690d      	ldr	r5, [r1, #16]
 8016148:	448c      	add	ip, r1
 801614a:	4663      	mov	r3, ip
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	3001      	adds	r0, #1
 8016150:	b299      	uxth	r1, r3
 8016152:	4663      	mov	r3, ip
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	4351      	muls	r1, r2
 8016158:	0c1b      	lsrs	r3, r3, #16
 801615a:	4353      	muls	r3, r2
 801615c:	1989      	adds	r1, r1, r6
 801615e:	0c0e      	lsrs	r6, r1, #16
 8016160:	199b      	adds	r3, r3, r6
 8016162:	b289      	uxth	r1, r1
 8016164:	0c1e      	lsrs	r6, r3, #16
 8016166:	041b      	lsls	r3, r3, #16
 8016168:	185b      	adds	r3, r3, r1
 801616a:	4661      	mov	r1, ip
 801616c:	c108      	stmia	r1!, {r3}
 801616e:	468c      	mov	ip, r1
 8016170:	4285      	cmp	r5, r0
 8016172:	dcea      	bgt.n	801614a <__multadd+0x12>
 8016174:	2e00      	cmp	r6, #0
 8016176:	d01b      	beq.n	80161b0 <__multadd+0x78>
 8016178:	68a3      	ldr	r3, [r4, #8]
 801617a:	42ab      	cmp	r3, r5
 801617c:	dc12      	bgt.n	80161a4 <__multadd+0x6c>
 801617e:	6863      	ldr	r3, [r4, #4]
 8016180:	0038      	movs	r0, r7
 8016182:	1c59      	adds	r1, r3, #1
 8016184:	f7ff ffa6 	bl	80160d4 <_Balloc>
 8016188:	0021      	movs	r1, r4
 801618a:	6923      	ldr	r3, [r4, #16]
 801618c:	9001      	str	r0, [sp, #4]
 801618e:	1c9a      	adds	r2, r3, #2
 8016190:	0092      	lsls	r2, r2, #2
 8016192:	310c      	adds	r1, #12
 8016194:	300c      	adds	r0, #12
 8016196:	f7fc f8b6 	bl	8012306 <memcpy>
 801619a:	0021      	movs	r1, r4
 801619c:	0038      	movs	r0, r7
 801619e:	f7ff ffc1 	bl	8016124 <_Bfree>
 80161a2:	9c01      	ldr	r4, [sp, #4]
 80161a4:	1d2b      	adds	r3, r5, #4
 80161a6:	009b      	lsls	r3, r3, #2
 80161a8:	18e3      	adds	r3, r4, r3
 80161aa:	3501      	adds	r5, #1
 80161ac:	605e      	str	r6, [r3, #4]
 80161ae:	6125      	str	r5, [r4, #16]
 80161b0:	0020      	movs	r0, r4
 80161b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080161b4 <__s2b>:
 80161b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161b6:	0006      	movs	r6, r0
 80161b8:	0018      	movs	r0, r3
 80161ba:	000c      	movs	r4, r1
 80161bc:	3008      	adds	r0, #8
 80161be:	2109      	movs	r1, #9
 80161c0:	9301      	str	r3, [sp, #4]
 80161c2:	0015      	movs	r5, r2
 80161c4:	f7ea f84e 	bl	8000264 <__divsi3>
 80161c8:	2301      	movs	r3, #1
 80161ca:	2100      	movs	r1, #0
 80161cc:	4283      	cmp	r3, r0
 80161ce:	db1f      	blt.n	8016210 <__s2b+0x5c>
 80161d0:	0030      	movs	r0, r6
 80161d2:	f7ff ff7f 	bl	80160d4 <_Balloc>
 80161d6:	9b08      	ldr	r3, [sp, #32]
 80161d8:	6143      	str	r3, [r0, #20]
 80161da:	2301      	movs	r3, #1
 80161dc:	6103      	str	r3, [r0, #16]
 80161de:	2d09      	cmp	r5, #9
 80161e0:	dd19      	ble.n	8016216 <__s2b+0x62>
 80161e2:	0023      	movs	r3, r4
 80161e4:	3309      	adds	r3, #9
 80161e6:	001f      	movs	r7, r3
 80161e8:	9300      	str	r3, [sp, #0]
 80161ea:	1964      	adds	r4, r4, r5
 80161ec:	783b      	ldrb	r3, [r7, #0]
 80161ee:	0001      	movs	r1, r0
 80161f0:	3b30      	subs	r3, #48	; 0x30
 80161f2:	220a      	movs	r2, #10
 80161f4:	0030      	movs	r0, r6
 80161f6:	3701      	adds	r7, #1
 80161f8:	f7ff ff9e 	bl	8016138 <__multadd>
 80161fc:	42a7      	cmp	r7, r4
 80161fe:	d1f5      	bne.n	80161ec <__s2b+0x38>
 8016200:	9b00      	ldr	r3, [sp, #0]
 8016202:	195c      	adds	r4, r3, r5
 8016204:	3c08      	subs	r4, #8
 8016206:	002f      	movs	r7, r5
 8016208:	9b01      	ldr	r3, [sp, #4]
 801620a:	429f      	cmp	r7, r3
 801620c:	db06      	blt.n	801621c <__s2b+0x68>
 801620e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	3101      	adds	r1, #1
 8016214:	e7da      	b.n	80161cc <__s2b+0x18>
 8016216:	340a      	adds	r4, #10
 8016218:	2509      	movs	r5, #9
 801621a:	e7f4      	b.n	8016206 <__s2b+0x52>
 801621c:	1b63      	subs	r3, r4, r5
 801621e:	5ddb      	ldrb	r3, [r3, r7]
 8016220:	0001      	movs	r1, r0
 8016222:	3b30      	subs	r3, #48	; 0x30
 8016224:	220a      	movs	r2, #10
 8016226:	0030      	movs	r0, r6
 8016228:	f7ff ff86 	bl	8016138 <__multadd>
 801622c:	3701      	adds	r7, #1
 801622e:	e7eb      	b.n	8016208 <__s2b+0x54>

08016230 <__hi0bits>:
 8016230:	0003      	movs	r3, r0
 8016232:	0c02      	lsrs	r2, r0, #16
 8016234:	2000      	movs	r0, #0
 8016236:	4282      	cmp	r2, r0
 8016238:	d101      	bne.n	801623e <__hi0bits+0xe>
 801623a:	041b      	lsls	r3, r3, #16
 801623c:	3010      	adds	r0, #16
 801623e:	0e1a      	lsrs	r2, r3, #24
 8016240:	d101      	bne.n	8016246 <__hi0bits+0x16>
 8016242:	3008      	adds	r0, #8
 8016244:	021b      	lsls	r3, r3, #8
 8016246:	0f1a      	lsrs	r2, r3, #28
 8016248:	d101      	bne.n	801624e <__hi0bits+0x1e>
 801624a:	3004      	adds	r0, #4
 801624c:	011b      	lsls	r3, r3, #4
 801624e:	0f9a      	lsrs	r2, r3, #30
 8016250:	d101      	bne.n	8016256 <__hi0bits+0x26>
 8016252:	3002      	adds	r0, #2
 8016254:	009b      	lsls	r3, r3, #2
 8016256:	2b00      	cmp	r3, #0
 8016258:	db03      	blt.n	8016262 <__hi0bits+0x32>
 801625a:	3001      	adds	r0, #1
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	d400      	bmi.n	8016262 <__hi0bits+0x32>
 8016260:	2020      	movs	r0, #32
 8016262:	4770      	bx	lr

08016264 <__lo0bits>:
 8016264:	2207      	movs	r2, #7
 8016266:	6803      	ldr	r3, [r0, #0]
 8016268:	b510      	push	{r4, lr}
 801626a:	0001      	movs	r1, r0
 801626c:	401a      	ands	r2, r3
 801626e:	d00d      	beq.n	801628c <__lo0bits+0x28>
 8016270:	2401      	movs	r4, #1
 8016272:	2000      	movs	r0, #0
 8016274:	4223      	tst	r3, r4
 8016276:	d105      	bne.n	8016284 <__lo0bits+0x20>
 8016278:	3002      	adds	r0, #2
 801627a:	4203      	tst	r3, r0
 801627c:	d003      	beq.n	8016286 <__lo0bits+0x22>
 801627e:	40e3      	lsrs	r3, r4
 8016280:	0020      	movs	r0, r4
 8016282:	600b      	str	r3, [r1, #0]
 8016284:	bd10      	pop	{r4, pc}
 8016286:	089b      	lsrs	r3, r3, #2
 8016288:	600b      	str	r3, [r1, #0]
 801628a:	e7fb      	b.n	8016284 <__lo0bits+0x20>
 801628c:	b29c      	uxth	r4, r3
 801628e:	0010      	movs	r0, r2
 8016290:	2c00      	cmp	r4, #0
 8016292:	d101      	bne.n	8016298 <__lo0bits+0x34>
 8016294:	2010      	movs	r0, #16
 8016296:	0c1b      	lsrs	r3, r3, #16
 8016298:	b2da      	uxtb	r2, r3
 801629a:	2a00      	cmp	r2, #0
 801629c:	d101      	bne.n	80162a2 <__lo0bits+0x3e>
 801629e:	3008      	adds	r0, #8
 80162a0:	0a1b      	lsrs	r3, r3, #8
 80162a2:	071a      	lsls	r2, r3, #28
 80162a4:	d101      	bne.n	80162aa <__lo0bits+0x46>
 80162a6:	3004      	adds	r0, #4
 80162a8:	091b      	lsrs	r3, r3, #4
 80162aa:	079a      	lsls	r2, r3, #30
 80162ac:	d101      	bne.n	80162b2 <__lo0bits+0x4e>
 80162ae:	3002      	adds	r0, #2
 80162b0:	089b      	lsrs	r3, r3, #2
 80162b2:	07da      	lsls	r2, r3, #31
 80162b4:	d4e8      	bmi.n	8016288 <__lo0bits+0x24>
 80162b6:	085b      	lsrs	r3, r3, #1
 80162b8:	d001      	beq.n	80162be <__lo0bits+0x5a>
 80162ba:	3001      	adds	r0, #1
 80162bc:	e7e4      	b.n	8016288 <__lo0bits+0x24>
 80162be:	2020      	movs	r0, #32
 80162c0:	e7e0      	b.n	8016284 <__lo0bits+0x20>

080162c2 <__i2b>:
 80162c2:	b510      	push	{r4, lr}
 80162c4:	000c      	movs	r4, r1
 80162c6:	2101      	movs	r1, #1
 80162c8:	f7ff ff04 	bl	80160d4 <_Balloc>
 80162cc:	2301      	movs	r3, #1
 80162ce:	6144      	str	r4, [r0, #20]
 80162d0:	6103      	str	r3, [r0, #16]
 80162d2:	bd10      	pop	{r4, pc}

080162d4 <__multiply>:
 80162d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d6:	690b      	ldr	r3, [r1, #16]
 80162d8:	0014      	movs	r4, r2
 80162da:	6912      	ldr	r2, [r2, #16]
 80162dc:	b089      	sub	sp, #36	; 0x24
 80162de:	000d      	movs	r5, r1
 80162e0:	4293      	cmp	r3, r2
 80162e2:	da01      	bge.n	80162e8 <__multiply+0x14>
 80162e4:	0025      	movs	r5, r4
 80162e6:	000c      	movs	r4, r1
 80162e8:	692f      	ldr	r7, [r5, #16]
 80162ea:	6926      	ldr	r6, [r4, #16]
 80162ec:	6869      	ldr	r1, [r5, #4]
 80162ee:	19bb      	adds	r3, r7, r6
 80162f0:	9302      	str	r3, [sp, #8]
 80162f2:	68ab      	ldr	r3, [r5, #8]
 80162f4:	19ba      	adds	r2, r7, r6
 80162f6:	4293      	cmp	r3, r2
 80162f8:	da00      	bge.n	80162fc <__multiply+0x28>
 80162fa:	3101      	adds	r1, #1
 80162fc:	f7ff feea 	bl	80160d4 <_Balloc>
 8016300:	0002      	movs	r2, r0
 8016302:	19bb      	adds	r3, r7, r6
 8016304:	3214      	adds	r2, #20
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	18d3      	adds	r3, r2, r3
 801630a:	469c      	mov	ip, r3
 801630c:	2100      	movs	r1, #0
 801630e:	0013      	movs	r3, r2
 8016310:	9004      	str	r0, [sp, #16]
 8016312:	4563      	cmp	r3, ip
 8016314:	d31d      	bcc.n	8016352 <__multiply+0x7e>
 8016316:	3514      	adds	r5, #20
 8016318:	00bf      	lsls	r7, r7, #2
 801631a:	19eb      	adds	r3, r5, r7
 801631c:	3414      	adds	r4, #20
 801631e:	00b6      	lsls	r6, r6, #2
 8016320:	9305      	str	r3, [sp, #20]
 8016322:	19a3      	adds	r3, r4, r6
 8016324:	9503      	str	r5, [sp, #12]
 8016326:	9401      	str	r4, [sp, #4]
 8016328:	9307      	str	r3, [sp, #28]
 801632a:	9b07      	ldr	r3, [sp, #28]
 801632c:	9901      	ldr	r1, [sp, #4]
 801632e:	4299      	cmp	r1, r3
 8016330:	d311      	bcc.n	8016356 <__multiply+0x82>
 8016332:	9b02      	ldr	r3, [sp, #8]
 8016334:	2b00      	cmp	r3, #0
 8016336:	dd06      	ble.n	8016346 <__multiply+0x72>
 8016338:	2304      	movs	r3, #4
 801633a:	425b      	negs	r3, r3
 801633c:	449c      	add	ip, r3
 801633e:	4663      	mov	r3, ip
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d051      	beq.n	80163ea <__multiply+0x116>
 8016346:	9b04      	ldr	r3, [sp, #16]
 8016348:	9a02      	ldr	r2, [sp, #8]
 801634a:	0018      	movs	r0, r3
 801634c:	611a      	str	r2, [r3, #16]
 801634e:	b009      	add	sp, #36	; 0x24
 8016350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016352:	c302      	stmia	r3!, {r1}
 8016354:	e7dd      	b.n	8016312 <__multiply+0x3e>
 8016356:	9b01      	ldr	r3, [sp, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	b298      	uxth	r0, r3
 801635c:	2800      	cmp	r0, #0
 801635e:	d01c      	beq.n	801639a <__multiply+0xc6>
 8016360:	0015      	movs	r5, r2
 8016362:	2600      	movs	r6, #0
 8016364:	9f03      	ldr	r7, [sp, #12]
 8016366:	cf02      	ldmia	r7!, {r1}
 8016368:	682c      	ldr	r4, [r5, #0]
 801636a:	b28b      	uxth	r3, r1
 801636c:	4343      	muls	r3, r0
 801636e:	0c09      	lsrs	r1, r1, #16
 8016370:	4341      	muls	r1, r0
 8016372:	b2a4      	uxth	r4, r4
 8016374:	191b      	adds	r3, r3, r4
 8016376:	199b      	adds	r3, r3, r6
 8016378:	000e      	movs	r6, r1
 801637a:	6829      	ldr	r1, [r5, #0]
 801637c:	9506      	str	r5, [sp, #24]
 801637e:	0c09      	lsrs	r1, r1, #16
 8016380:	1871      	adds	r1, r6, r1
 8016382:	0c1e      	lsrs	r6, r3, #16
 8016384:	1989      	adds	r1, r1, r6
 8016386:	0c0e      	lsrs	r6, r1, #16
 8016388:	b29b      	uxth	r3, r3
 801638a:	0409      	lsls	r1, r1, #16
 801638c:	430b      	orrs	r3, r1
 801638e:	c508      	stmia	r5!, {r3}
 8016390:	9b05      	ldr	r3, [sp, #20]
 8016392:	42bb      	cmp	r3, r7
 8016394:	d8e7      	bhi.n	8016366 <__multiply+0x92>
 8016396:	9b06      	ldr	r3, [sp, #24]
 8016398:	605e      	str	r6, [r3, #4]
 801639a:	9b01      	ldr	r3, [sp, #4]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	0c1d      	lsrs	r5, r3, #16
 80163a0:	d01e      	beq.n	80163e0 <__multiply+0x10c>
 80163a2:	0010      	movs	r0, r2
 80163a4:	2700      	movs	r7, #0
 80163a6:	6813      	ldr	r3, [r2, #0]
 80163a8:	9e03      	ldr	r6, [sp, #12]
 80163aa:	6831      	ldr	r1, [r6, #0]
 80163ac:	6804      	ldr	r4, [r0, #0]
 80163ae:	b289      	uxth	r1, r1
 80163b0:	4369      	muls	r1, r5
 80163b2:	0c24      	lsrs	r4, r4, #16
 80163b4:	1909      	adds	r1, r1, r4
 80163b6:	19c9      	adds	r1, r1, r7
 80163b8:	040f      	lsls	r7, r1, #16
 80163ba:	b29b      	uxth	r3, r3
 80163bc:	433b      	orrs	r3, r7
 80163be:	6003      	str	r3, [r0, #0]
 80163c0:	ce80      	ldmia	r6!, {r7}
 80163c2:	6843      	ldr	r3, [r0, #4]
 80163c4:	0c3f      	lsrs	r7, r7, #16
 80163c6:	436f      	muls	r7, r5
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	18fb      	adds	r3, r7, r3
 80163cc:	0c09      	lsrs	r1, r1, #16
 80163ce:	185b      	adds	r3, r3, r1
 80163d0:	9905      	ldr	r1, [sp, #20]
 80163d2:	9006      	str	r0, [sp, #24]
 80163d4:	0c1f      	lsrs	r7, r3, #16
 80163d6:	3004      	adds	r0, #4
 80163d8:	42b1      	cmp	r1, r6
 80163da:	d8e6      	bhi.n	80163aa <__multiply+0xd6>
 80163dc:	9906      	ldr	r1, [sp, #24]
 80163de:	604b      	str	r3, [r1, #4]
 80163e0:	9b01      	ldr	r3, [sp, #4]
 80163e2:	3204      	adds	r2, #4
 80163e4:	3304      	adds	r3, #4
 80163e6:	9301      	str	r3, [sp, #4]
 80163e8:	e79f      	b.n	801632a <__multiply+0x56>
 80163ea:	9b02      	ldr	r3, [sp, #8]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	9302      	str	r3, [sp, #8]
 80163f0:	e79f      	b.n	8016332 <__multiply+0x5e>
	...

080163f4 <__pow5mult>:
 80163f4:	2303      	movs	r3, #3
 80163f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163f8:	4013      	ands	r3, r2
 80163fa:	0006      	movs	r6, r0
 80163fc:	000f      	movs	r7, r1
 80163fe:	0015      	movs	r5, r2
 8016400:	2b00      	cmp	r3, #0
 8016402:	d008      	beq.n	8016416 <__pow5mult+0x22>
 8016404:	491a      	ldr	r1, [pc, #104]	; (8016470 <__pow5mult+0x7c>)
 8016406:	3b01      	subs	r3, #1
 8016408:	009a      	lsls	r2, r3, #2
 801640a:	5852      	ldr	r2, [r2, r1]
 801640c:	2300      	movs	r3, #0
 801640e:	0039      	movs	r1, r7
 8016410:	f7ff fe92 	bl	8016138 <__multadd>
 8016414:	0007      	movs	r7, r0
 8016416:	10ad      	asrs	r5, r5, #2
 8016418:	d027      	beq.n	801646a <__pow5mult+0x76>
 801641a:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801641c:	2c00      	cmp	r4, #0
 801641e:	d107      	bne.n	8016430 <__pow5mult+0x3c>
 8016420:	4914      	ldr	r1, [pc, #80]	; (8016474 <__pow5mult+0x80>)
 8016422:	0030      	movs	r0, r6
 8016424:	f7ff ff4d 	bl	80162c2 <__i2b>
 8016428:	2300      	movs	r3, #0
 801642a:	0004      	movs	r4, r0
 801642c:	64b0      	str	r0, [r6, #72]	; 0x48
 801642e:	6003      	str	r3, [r0, #0]
 8016430:	2301      	movs	r3, #1
 8016432:	421d      	tst	r5, r3
 8016434:	d00a      	beq.n	801644c <__pow5mult+0x58>
 8016436:	0039      	movs	r1, r7
 8016438:	0022      	movs	r2, r4
 801643a:	0030      	movs	r0, r6
 801643c:	f7ff ff4a 	bl	80162d4 <__multiply>
 8016440:	0039      	movs	r1, r7
 8016442:	9001      	str	r0, [sp, #4]
 8016444:	0030      	movs	r0, r6
 8016446:	f7ff fe6d 	bl	8016124 <_Bfree>
 801644a:	9f01      	ldr	r7, [sp, #4]
 801644c:	106d      	asrs	r5, r5, #1
 801644e:	d00c      	beq.n	801646a <__pow5mult+0x76>
 8016450:	6820      	ldr	r0, [r4, #0]
 8016452:	2800      	cmp	r0, #0
 8016454:	d107      	bne.n	8016466 <__pow5mult+0x72>
 8016456:	0022      	movs	r2, r4
 8016458:	0021      	movs	r1, r4
 801645a:	0030      	movs	r0, r6
 801645c:	f7ff ff3a 	bl	80162d4 <__multiply>
 8016460:	2300      	movs	r3, #0
 8016462:	6020      	str	r0, [r4, #0]
 8016464:	6003      	str	r3, [r0, #0]
 8016466:	0004      	movs	r4, r0
 8016468:	e7e2      	b.n	8016430 <__pow5mult+0x3c>
 801646a:	0038      	movs	r0, r7
 801646c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801646e:	46c0      	nop			; (mov r8, r8)
 8016470:	08019c08 	.word	0x08019c08
 8016474:	00000271 	.word	0x00000271

08016478 <__lshift>:
 8016478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801647a:	000d      	movs	r5, r1
 801647c:	0017      	movs	r7, r2
 801647e:	692b      	ldr	r3, [r5, #16]
 8016480:	1154      	asrs	r4, r2, #5
 8016482:	b085      	sub	sp, #20
 8016484:	18e3      	adds	r3, r4, r3
 8016486:	9301      	str	r3, [sp, #4]
 8016488:	3301      	adds	r3, #1
 801648a:	9300      	str	r3, [sp, #0]
 801648c:	6849      	ldr	r1, [r1, #4]
 801648e:	68ab      	ldr	r3, [r5, #8]
 8016490:	9002      	str	r0, [sp, #8]
 8016492:	9a00      	ldr	r2, [sp, #0]
 8016494:	4293      	cmp	r3, r2
 8016496:	db35      	blt.n	8016504 <__lshift+0x8c>
 8016498:	9802      	ldr	r0, [sp, #8]
 801649a:	f7ff fe1b 	bl	80160d4 <_Balloc>
 801649e:	2300      	movs	r3, #0
 80164a0:	0002      	movs	r2, r0
 80164a2:	0006      	movs	r6, r0
 80164a4:	0019      	movs	r1, r3
 80164a6:	3214      	adds	r2, #20
 80164a8:	42a3      	cmp	r3, r4
 80164aa:	db2e      	blt.n	801650a <__lshift+0x92>
 80164ac:	43e3      	mvns	r3, r4
 80164ae:	17db      	asrs	r3, r3, #31
 80164b0:	401c      	ands	r4, r3
 80164b2:	002b      	movs	r3, r5
 80164b4:	00a4      	lsls	r4, r4, #2
 80164b6:	1914      	adds	r4, r2, r4
 80164b8:	692a      	ldr	r2, [r5, #16]
 80164ba:	3314      	adds	r3, #20
 80164bc:	0092      	lsls	r2, r2, #2
 80164be:	189a      	adds	r2, r3, r2
 80164c0:	4694      	mov	ip, r2
 80164c2:	221f      	movs	r2, #31
 80164c4:	4017      	ands	r7, r2
 80164c6:	d024      	beq.n	8016512 <__lshift+0x9a>
 80164c8:	3201      	adds	r2, #1
 80164ca:	1bd2      	subs	r2, r2, r7
 80164cc:	9203      	str	r2, [sp, #12]
 80164ce:	2200      	movs	r2, #0
 80164d0:	6819      	ldr	r1, [r3, #0]
 80164d2:	0020      	movs	r0, r4
 80164d4:	40b9      	lsls	r1, r7
 80164d6:	430a      	orrs	r2, r1
 80164d8:	c404      	stmia	r4!, {r2}
 80164da:	cb04      	ldmia	r3!, {r2}
 80164dc:	9903      	ldr	r1, [sp, #12]
 80164de:	40ca      	lsrs	r2, r1
 80164e0:	459c      	cmp	ip, r3
 80164e2:	d8f5      	bhi.n	80164d0 <__lshift+0x58>
 80164e4:	6042      	str	r2, [r0, #4]
 80164e6:	2a00      	cmp	r2, #0
 80164e8:	d002      	beq.n	80164f0 <__lshift+0x78>
 80164ea:	9b01      	ldr	r3, [sp, #4]
 80164ec:	3302      	adds	r3, #2
 80164ee:	9300      	str	r3, [sp, #0]
 80164f0:	9b00      	ldr	r3, [sp, #0]
 80164f2:	9802      	ldr	r0, [sp, #8]
 80164f4:	3b01      	subs	r3, #1
 80164f6:	6133      	str	r3, [r6, #16]
 80164f8:	0029      	movs	r1, r5
 80164fa:	f7ff fe13 	bl	8016124 <_Bfree>
 80164fe:	0030      	movs	r0, r6
 8016500:	b005      	add	sp, #20
 8016502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016504:	3101      	adds	r1, #1
 8016506:	005b      	lsls	r3, r3, #1
 8016508:	e7c3      	b.n	8016492 <__lshift+0x1a>
 801650a:	0098      	lsls	r0, r3, #2
 801650c:	5011      	str	r1, [r2, r0]
 801650e:	3301      	adds	r3, #1
 8016510:	e7ca      	b.n	80164a8 <__lshift+0x30>
 8016512:	cb04      	ldmia	r3!, {r2}
 8016514:	c404      	stmia	r4!, {r2}
 8016516:	459c      	cmp	ip, r3
 8016518:	d8fb      	bhi.n	8016512 <__lshift+0x9a>
 801651a:	e7e9      	b.n	80164f0 <__lshift+0x78>

0801651c <__mcmp>:
 801651c:	690a      	ldr	r2, [r1, #16]
 801651e:	6903      	ldr	r3, [r0, #16]
 8016520:	b530      	push	{r4, r5, lr}
 8016522:	1a9b      	subs	r3, r3, r2
 8016524:	d10d      	bne.n	8016542 <__mcmp+0x26>
 8016526:	0092      	lsls	r2, r2, #2
 8016528:	3014      	adds	r0, #20
 801652a:	3114      	adds	r1, #20
 801652c:	1884      	adds	r4, r0, r2
 801652e:	1889      	adds	r1, r1, r2
 8016530:	3c04      	subs	r4, #4
 8016532:	3904      	subs	r1, #4
 8016534:	6825      	ldr	r5, [r4, #0]
 8016536:	680a      	ldr	r2, [r1, #0]
 8016538:	4295      	cmp	r5, r2
 801653a:	d004      	beq.n	8016546 <__mcmp+0x2a>
 801653c:	2301      	movs	r3, #1
 801653e:	4295      	cmp	r5, r2
 8016540:	d304      	bcc.n	801654c <__mcmp+0x30>
 8016542:	0018      	movs	r0, r3
 8016544:	bd30      	pop	{r4, r5, pc}
 8016546:	42a0      	cmp	r0, r4
 8016548:	d3f2      	bcc.n	8016530 <__mcmp+0x14>
 801654a:	e7fa      	b.n	8016542 <__mcmp+0x26>
 801654c:	425b      	negs	r3, r3
 801654e:	e7f8      	b.n	8016542 <__mcmp+0x26>

08016550 <__mdiff>:
 8016550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016552:	000d      	movs	r5, r1
 8016554:	b085      	sub	sp, #20
 8016556:	0007      	movs	r7, r0
 8016558:	0011      	movs	r1, r2
 801655a:	0028      	movs	r0, r5
 801655c:	0014      	movs	r4, r2
 801655e:	f7ff ffdd 	bl	801651c <__mcmp>
 8016562:	1e06      	subs	r6, r0, #0
 8016564:	d108      	bne.n	8016578 <__mdiff+0x28>
 8016566:	0001      	movs	r1, r0
 8016568:	0038      	movs	r0, r7
 801656a:	f7ff fdb3 	bl	80160d4 <_Balloc>
 801656e:	2301      	movs	r3, #1
 8016570:	6146      	str	r6, [r0, #20]
 8016572:	6103      	str	r3, [r0, #16]
 8016574:	b005      	add	sp, #20
 8016576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016578:	2301      	movs	r3, #1
 801657a:	9301      	str	r3, [sp, #4]
 801657c:	2800      	cmp	r0, #0
 801657e:	db04      	blt.n	801658a <__mdiff+0x3a>
 8016580:	0023      	movs	r3, r4
 8016582:	002c      	movs	r4, r5
 8016584:	001d      	movs	r5, r3
 8016586:	2300      	movs	r3, #0
 8016588:	9301      	str	r3, [sp, #4]
 801658a:	6861      	ldr	r1, [r4, #4]
 801658c:	0038      	movs	r0, r7
 801658e:	f7ff fda1 	bl	80160d4 <_Balloc>
 8016592:	002f      	movs	r7, r5
 8016594:	2200      	movs	r2, #0
 8016596:	9b01      	ldr	r3, [sp, #4]
 8016598:	6926      	ldr	r6, [r4, #16]
 801659a:	60c3      	str	r3, [r0, #12]
 801659c:	3414      	adds	r4, #20
 801659e:	00b3      	lsls	r3, r6, #2
 80165a0:	18e3      	adds	r3, r4, r3
 80165a2:	9302      	str	r3, [sp, #8]
 80165a4:	692b      	ldr	r3, [r5, #16]
 80165a6:	3714      	adds	r7, #20
 80165a8:	009b      	lsls	r3, r3, #2
 80165aa:	18fb      	adds	r3, r7, r3
 80165ac:	9303      	str	r3, [sp, #12]
 80165ae:	0003      	movs	r3, r0
 80165b0:	4694      	mov	ip, r2
 80165b2:	3314      	adds	r3, #20
 80165b4:	cc20      	ldmia	r4!, {r5}
 80165b6:	cf04      	ldmia	r7!, {r2}
 80165b8:	9201      	str	r2, [sp, #4]
 80165ba:	b2aa      	uxth	r2, r5
 80165bc:	4494      	add	ip, r2
 80165be:	466a      	mov	r2, sp
 80165c0:	4661      	mov	r1, ip
 80165c2:	8892      	ldrh	r2, [r2, #4]
 80165c4:	0c2d      	lsrs	r5, r5, #16
 80165c6:	1a8a      	subs	r2, r1, r2
 80165c8:	9901      	ldr	r1, [sp, #4]
 80165ca:	0c09      	lsrs	r1, r1, #16
 80165cc:	1a69      	subs	r1, r5, r1
 80165ce:	1415      	asrs	r5, r2, #16
 80165d0:	1949      	adds	r1, r1, r5
 80165d2:	140d      	asrs	r5, r1, #16
 80165d4:	b292      	uxth	r2, r2
 80165d6:	0409      	lsls	r1, r1, #16
 80165d8:	430a      	orrs	r2, r1
 80165da:	601a      	str	r2, [r3, #0]
 80165dc:	9a03      	ldr	r2, [sp, #12]
 80165de:	46ac      	mov	ip, r5
 80165e0:	3304      	adds	r3, #4
 80165e2:	42ba      	cmp	r2, r7
 80165e4:	d8e6      	bhi.n	80165b4 <__mdiff+0x64>
 80165e6:	9902      	ldr	r1, [sp, #8]
 80165e8:	001a      	movs	r2, r3
 80165ea:	428c      	cmp	r4, r1
 80165ec:	d305      	bcc.n	80165fa <__mdiff+0xaa>
 80165ee:	3a04      	subs	r2, #4
 80165f0:	6813      	ldr	r3, [r2, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d00e      	beq.n	8016614 <__mdiff+0xc4>
 80165f6:	6106      	str	r6, [r0, #16]
 80165f8:	e7bc      	b.n	8016574 <__mdiff+0x24>
 80165fa:	cc04      	ldmia	r4!, {r2}
 80165fc:	b291      	uxth	r1, r2
 80165fe:	4461      	add	r1, ip
 8016600:	140d      	asrs	r5, r1, #16
 8016602:	0c12      	lsrs	r2, r2, #16
 8016604:	1952      	adds	r2, r2, r5
 8016606:	1415      	asrs	r5, r2, #16
 8016608:	b289      	uxth	r1, r1
 801660a:	0412      	lsls	r2, r2, #16
 801660c:	430a      	orrs	r2, r1
 801660e:	46ac      	mov	ip, r5
 8016610:	c304      	stmia	r3!, {r2}
 8016612:	e7e8      	b.n	80165e6 <__mdiff+0x96>
 8016614:	3e01      	subs	r6, #1
 8016616:	e7ea      	b.n	80165ee <__mdiff+0x9e>

08016618 <__ulp>:
 8016618:	000b      	movs	r3, r1
 801661a:	4910      	ldr	r1, [pc, #64]	; (801665c <__ulp+0x44>)
 801661c:	b510      	push	{r4, lr}
 801661e:	4019      	ands	r1, r3
 8016620:	4b0f      	ldr	r3, [pc, #60]	; (8016660 <__ulp+0x48>)
 8016622:	18c9      	adds	r1, r1, r3
 8016624:	2900      	cmp	r1, #0
 8016626:	dd04      	ble.n	8016632 <__ulp+0x1a>
 8016628:	2200      	movs	r2, #0
 801662a:	000b      	movs	r3, r1
 801662c:	0010      	movs	r0, r2
 801662e:	0019      	movs	r1, r3
 8016630:	bd10      	pop	{r4, pc}
 8016632:	4249      	negs	r1, r1
 8016634:	1509      	asrs	r1, r1, #20
 8016636:	2200      	movs	r2, #0
 8016638:	2300      	movs	r3, #0
 801663a:	2913      	cmp	r1, #19
 801663c:	dc04      	bgt.n	8016648 <__ulp+0x30>
 801663e:	2080      	movs	r0, #128	; 0x80
 8016640:	0300      	lsls	r0, r0, #12
 8016642:	4108      	asrs	r0, r1
 8016644:	0003      	movs	r3, r0
 8016646:	e7f1      	b.n	801662c <__ulp+0x14>
 8016648:	3914      	subs	r1, #20
 801664a:	2001      	movs	r0, #1
 801664c:	291e      	cmp	r1, #30
 801664e:	dc02      	bgt.n	8016656 <__ulp+0x3e>
 8016650:	241f      	movs	r4, #31
 8016652:	1a61      	subs	r1, r4, r1
 8016654:	4088      	lsls	r0, r1
 8016656:	0002      	movs	r2, r0
 8016658:	e7e8      	b.n	801662c <__ulp+0x14>
 801665a:	46c0      	nop			; (mov r8, r8)
 801665c:	7ff00000 	.word	0x7ff00000
 8016660:	fcc00000 	.word	0xfcc00000

08016664 <__b2d>:
 8016664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016666:	0006      	movs	r6, r0
 8016668:	6903      	ldr	r3, [r0, #16]
 801666a:	3614      	adds	r6, #20
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	18f3      	adds	r3, r6, r3
 8016670:	1f1d      	subs	r5, r3, #4
 8016672:	682c      	ldr	r4, [r5, #0]
 8016674:	000f      	movs	r7, r1
 8016676:	0020      	movs	r0, r4
 8016678:	9301      	str	r3, [sp, #4]
 801667a:	f7ff fdd9 	bl	8016230 <__hi0bits>
 801667e:	2320      	movs	r3, #32
 8016680:	1a1b      	subs	r3, r3, r0
 8016682:	603b      	str	r3, [r7, #0]
 8016684:	491c      	ldr	r1, [pc, #112]	; (80166f8 <__b2d+0x94>)
 8016686:	280a      	cmp	r0, #10
 8016688:	dc16      	bgt.n	80166b8 <__b2d+0x54>
 801668a:	230b      	movs	r3, #11
 801668c:	0027      	movs	r7, r4
 801668e:	1a1b      	subs	r3, r3, r0
 8016690:	40df      	lsrs	r7, r3
 8016692:	4339      	orrs	r1, r7
 8016694:	469c      	mov	ip, r3
 8016696:	000b      	movs	r3, r1
 8016698:	2100      	movs	r1, #0
 801669a:	42ae      	cmp	r6, r5
 801669c:	d202      	bcs.n	80166a4 <__b2d+0x40>
 801669e:	9901      	ldr	r1, [sp, #4]
 80166a0:	3908      	subs	r1, #8
 80166a2:	6809      	ldr	r1, [r1, #0]
 80166a4:	3015      	adds	r0, #21
 80166a6:	4084      	lsls	r4, r0
 80166a8:	4660      	mov	r0, ip
 80166aa:	40c1      	lsrs	r1, r0
 80166ac:	430c      	orrs	r4, r1
 80166ae:	0022      	movs	r2, r4
 80166b0:	0010      	movs	r0, r2
 80166b2:	0019      	movs	r1, r3
 80166b4:	b003      	add	sp, #12
 80166b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166b8:	2700      	movs	r7, #0
 80166ba:	42ae      	cmp	r6, r5
 80166bc:	d202      	bcs.n	80166c4 <__b2d+0x60>
 80166be:	9d01      	ldr	r5, [sp, #4]
 80166c0:	3d08      	subs	r5, #8
 80166c2:	682f      	ldr	r7, [r5, #0]
 80166c4:	380b      	subs	r0, #11
 80166c6:	4684      	mov	ip, r0
 80166c8:	1e03      	subs	r3, r0, #0
 80166ca:	d012      	beq.n	80166f2 <__b2d+0x8e>
 80166cc:	409c      	lsls	r4, r3
 80166ce:	2020      	movs	r0, #32
 80166d0:	4321      	orrs	r1, r4
 80166d2:	003c      	movs	r4, r7
 80166d4:	1ac0      	subs	r0, r0, r3
 80166d6:	40c4      	lsrs	r4, r0
 80166d8:	4321      	orrs	r1, r4
 80166da:	000b      	movs	r3, r1
 80166dc:	2100      	movs	r1, #0
 80166de:	42b5      	cmp	r5, r6
 80166e0:	d901      	bls.n	80166e6 <__b2d+0x82>
 80166e2:	3d04      	subs	r5, #4
 80166e4:	6829      	ldr	r1, [r5, #0]
 80166e6:	4664      	mov	r4, ip
 80166e8:	40c1      	lsrs	r1, r0
 80166ea:	40a7      	lsls	r7, r4
 80166ec:	430f      	orrs	r7, r1
 80166ee:	003a      	movs	r2, r7
 80166f0:	e7de      	b.n	80166b0 <__b2d+0x4c>
 80166f2:	4321      	orrs	r1, r4
 80166f4:	000b      	movs	r3, r1
 80166f6:	e7fa      	b.n	80166ee <__b2d+0x8a>
 80166f8:	3ff00000 	.word	0x3ff00000

080166fc <__d2b>:
 80166fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166fe:	001d      	movs	r5, r3
 8016700:	2101      	movs	r1, #1
 8016702:	0014      	movs	r4, r2
 8016704:	9f08      	ldr	r7, [sp, #32]
 8016706:	f7ff fce5 	bl	80160d4 <_Balloc>
 801670a:	032b      	lsls	r3, r5, #12
 801670c:	006d      	lsls	r5, r5, #1
 801670e:	0006      	movs	r6, r0
 8016710:	0b1b      	lsrs	r3, r3, #12
 8016712:	0d6d      	lsrs	r5, r5, #21
 8016714:	d124      	bne.n	8016760 <__d2b+0x64>
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	2c00      	cmp	r4, #0
 801671a:	d027      	beq.n	801676c <__d2b+0x70>
 801671c:	4668      	mov	r0, sp
 801671e:	9400      	str	r4, [sp, #0]
 8016720:	f7ff fda0 	bl	8016264 <__lo0bits>
 8016724:	9c00      	ldr	r4, [sp, #0]
 8016726:	2800      	cmp	r0, #0
 8016728:	d01e      	beq.n	8016768 <__d2b+0x6c>
 801672a:	9b01      	ldr	r3, [sp, #4]
 801672c:	2120      	movs	r1, #32
 801672e:	001a      	movs	r2, r3
 8016730:	1a09      	subs	r1, r1, r0
 8016732:	408a      	lsls	r2, r1
 8016734:	40c3      	lsrs	r3, r0
 8016736:	4322      	orrs	r2, r4
 8016738:	6172      	str	r2, [r6, #20]
 801673a:	9301      	str	r3, [sp, #4]
 801673c:	9c01      	ldr	r4, [sp, #4]
 801673e:	61b4      	str	r4, [r6, #24]
 8016740:	1e63      	subs	r3, r4, #1
 8016742:	419c      	sbcs	r4, r3
 8016744:	3401      	adds	r4, #1
 8016746:	6134      	str	r4, [r6, #16]
 8016748:	2d00      	cmp	r5, #0
 801674a:	d018      	beq.n	801677e <__d2b+0x82>
 801674c:	4b12      	ldr	r3, [pc, #72]	; (8016798 <__d2b+0x9c>)
 801674e:	18ed      	adds	r5, r5, r3
 8016750:	2335      	movs	r3, #53	; 0x35
 8016752:	182d      	adds	r5, r5, r0
 8016754:	603d      	str	r5, [r7, #0]
 8016756:	1a18      	subs	r0, r3, r0
 8016758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801675a:	6018      	str	r0, [r3, #0]
 801675c:	0030      	movs	r0, r6
 801675e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016760:	2280      	movs	r2, #128	; 0x80
 8016762:	0352      	lsls	r2, r2, #13
 8016764:	4313      	orrs	r3, r2
 8016766:	e7d6      	b.n	8016716 <__d2b+0x1a>
 8016768:	6174      	str	r4, [r6, #20]
 801676a:	e7e7      	b.n	801673c <__d2b+0x40>
 801676c:	a801      	add	r0, sp, #4
 801676e:	f7ff fd79 	bl	8016264 <__lo0bits>
 8016772:	2401      	movs	r4, #1
 8016774:	9b01      	ldr	r3, [sp, #4]
 8016776:	6134      	str	r4, [r6, #16]
 8016778:	6173      	str	r3, [r6, #20]
 801677a:	3020      	adds	r0, #32
 801677c:	e7e4      	b.n	8016748 <__d2b+0x4c>
 801677e:	4b07      	ldr	r3, [pc, #28]	; (801679c <__d2b+0xa0>)
 8016780:	18c0      	adds	r0, r0, r3
 8016782:	4b07      	ldr	r3, [pc, #28]	; (80167a0 <__d2b+0xa4>)
 8016784:	6038      	str	r0, [r7, #0]
 8016786:	18e3      	adds	r3, r4, r3
 8016788:	009b      	lsls	r3, r3, #2
 801678a:	18f3      	adds	r3, r6, r3
 801678c:	6958      	ldr	r0, [r3, #20]
 801678e:	f7ff fd4f 	bl	8016230 <__hi0bits>
 8016792:	0164      	lsls	r4, r4, #5
 8016794:	1a20      	subs	r0, r4, r0
 8016796:	e7df      	b.n	8016758 <__d2b+0x5c>
 8016798:	fffffbcd 	.word	0xfffffbcd
 801679c:	fffffbce 	.word	0xfffffbce
 80167a0:	3fffffff 	.word	0x3fffffff

080167a4 <__ratio>:
 80167a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167a6:	b085      	sub	sp, #20
 80167a8:	000f      	movs	r7, r1
 80167aa:	a902      	add	r1, sp, #8
 80167ac:	0006      	movs	r6, r0
 80167ae:	f7ff ff59 	bl	8016664 <__b2d>
 80167b2:	0004      	movs	r4, r0
 80167b4:	000d      	movs	r5, r1
 80167b6:	0038      	movs	r0, r7
 80167b8:	a903      	add	r1, sp, #12
 80167ba:	9400      	str	r4, [sp, #0]
 80167bc:	9501      	str	r5, [sp, #4]
 80167be:	f7ff ff51 	bl	8016664 <__b2d>
 80167c2:	6936      	ldr	r6, [r6, #16]
 80167c4:	693f      	ldr	r7, [r7, #16]
 80167c6:	0002      	movs	r2, r0
 80167c8:	1bf7      	subs	r7, r6, r7
 80167ca:	017e      	lsls	r6, r7, #5
 80167cc:	46b4      	mov	ip, r6
 80167ce:	9f03      	ldr	r7, [sp, #12]
 80167d0:	9e02      	ldr	r6, [sp, #8]
 80167d2:	000b      	movs	r3, r1
 80167d4:	1bf6      	subs	r6, r6, r7
 80167d6:	4466      	add	r6, ip
 80167d8:	0537      	lsls	r7, r6, #20
 80167da:	2e00      	cmp	r6, #0
 80167dc:	dd07      	ble.n	80167ee <__ratio+0x4a>
 80167de:	1979      	adds	r1, r7, r5
 80167e0:	9101      	str	r1, [sp, #4]
 80167e2:	9800      	ldr	r0, [sp, #0]
 80167e4:	9901      	ldr	r1, [sp, #4]
 80167e6:	f7ea ff1b 	bl	8001620 <__aeabi_ddiv>
 80167ea:	b005      	add	sp, #20
 80167ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ee:	1bcb      	subs	r3, r1, r7
 80167f0:	e7f7      	b.n	80167e2 <__ratio+0x3e>

080167f2 <__copybits>:
 80167f2:	0013      	movs	r3, r2
 80167f4:	3901      	subs	r1, #1
 80167f6:	b510      	push	{r4, lr}
 80167f8:	1149      	asrs	r1, r1, #5
 80167fa:	6912      	ldr	r2, [r2, #16]
 80167fc:	3101      	adds	r1, #1
 80167fe:	0089      	lsls	r1, r1, #2
 8016800:	3314      	adds	r3, #20
 8016802:	0092      	lsls	r2, r2, #2
 8016804:	1841      	adds	r1, r0, r1
 8016806:	189a      	adds	r2, r3, r2
 8016808:	429a      	cmp	r2, r3
 801680a:	d803      	bhi.n	8016814 <__copybits+0x22>
 801680c:	2300      	movs	r3, #0
 801680e:	4281      	cmp	r1, r0
 8016810:	d803      	bhi.n	801681a <__copybits+0x28>
 8016812:	bd10      	pop	{r4, pc}
 8016814:	cb10      	ldmia	r3!, {r4}
 8016816:	c010      	stmia	r0!, {r4}
 8016818:	e7f6      	b.n	8016808 <__copybits+0x16>
 801681a:	c008      	stmia	r0!, {r3}
 801681c:	e7f7      	b.n	801680e <__copybits+0x1c>

0801681e <__any_on>:
 801681e:	0002      	movs	r2, r0
 8016820:	6900      	ldr	r0, [r0, #16]
 8016822:	b510      	push	{r4, lr}
 8016824:	3214      	adds	r2, #20
 8016826:	114b      	asrs	r3, r1, #5
 8016828:	4298      	cmp	r0, r3
 801682a:	db12      	blt.n	8016852 <__any_on+0x34>
 801682c:	dd0b      	ble.n	8016846 <__any_on+0x28>
 801682e:	201f      	movs	r0, #31
 8016830:	4001      	ands	r1, r0
 8016832:	d008      	beq.n	8016846 <__any_on+0x28>
 8016834:	0098      	lsls	r0, r3, #2
 8016836:	5884      	ldr	r4, [r0, r2]
 8016838:	0020      	movs	r0, r4
 801683a:	40c8      	lsrs	r0, r1
 801683c:	4088      	lsls	r0, r1
 801683e:	0001      	movs	r1, r0
 8016840:	2001      	movs	r0, #1
 8016842:	428c      	cmp	r4, r1
 8016844:	d104      	bne.n	8016850 <__any_on+0x32>
 8016846:	009b      	lsls	r3, r3, #2
 8016848:	18d3      	adds	r3, r2, r3
 801684a:	4293      	cmp	r3, r2
 801684c:	d803      	bhi.n	8016856 <__any_on+0x38>
 801684e:	2000      	movs	r0, #0
 8016850:	bd10      	pop	{r4, pc}
 8016852:	0003      	movs	r3, r0
 8016854:	e7f7      	b.n	8016846 <__any_on+0x28>
 8016856:	3b04      	subs	r3, #4
 8016858:	6819      	ldr	r1, [r3, #0]
 801685a:	2900      	cmp	r1, #0
 801685c:	d0f5      	beq.n	801684a <__any_on+0x2c>
 801685e:	2001      	movs	r0, #1
 8016860:	e7f6      	b.n	8016850 <__any_on+0x32>
	...

08016864 <frexp>:
 8016864:	b570      	push	{r4, r5, r6, lr}
 8016866:	0014      	movs	r4, r2
 8016868:	2500      	movs	r5, #0
 801686a:	6025      	str	r5, [r4, #0]
 801686c:	4d10      	ldr	r5, [pc, #64]	; (80168b0 <frexp+0x4c>)
 801686e:	004b      	lsls	r3, r1, #1
 8016870:	000a      	movs	r2, r1
 8016872:	085b      	lsrs	r3, r3, #1
 8016874:	42ab      	cmp	r3, r5
 8016876:	dc1a      	bgt.n	80168ae <frexp+0x4a>
 8016878:	001d      	movs	r5, r3
 801687a:	4305      	orrs	r5, r0
 801687c:	d017      	beq.n	80168ae <frexp+0x4a>
 801687e:	4d0d      	ldr	r5, [pc, #52]	; (80168b4 <frexp+0x50>)
 8016880:	42ab      	cmp	r3, r5
 8016882:	dc09      	bgt.n	8016898 <frexp+0x34>
 8016884:	2200      	movs	r2, #0
 8016886:	4b0c      	ldr	r3, [pc, #48]	; (80168b8 <frexp+0x54>)
 8016888:	f7eb fad4 	bl	8001e34 <__aeabi_dmul>
 801688c:	2536      	movs	r5, #54	; 0x36
 801688e:	000a      	movs	r2, r1
 8016890:	004b      	lsls	r3, r1, #1
 8016892:	426d      	negs	r5, r5
 8016894:	085b      	lsrs	r3, r3, #1
 8016896:	6025      	str	r5, [r4, #0]
 8016898:	4d08      	ldr	r5, [pc, #32]	; (80168bc <frexp+0x58>)
 801689a:	151b      	asrs	r3, r3, #20
 801689c:	195b      	adds	r3, r3, r5
 801689e:	6825      	ldr	r5, [r4, #0]
 80168a0:	18eb      	adds	r3, r5, r3
 80168a2:	6023      	str	r3, [r4, #0]
 80168a4:	4b06      	ldr	r3, [pc, #24]	; (80168c0 <frexp+0x5c>)
 80168a6:	401a      	ands	r2, r3
 80168a8:	4b06      	ldr	r3, [pc, #24]	; (80168c4 <frexp+0x60>)
 80168aa:	4313      	orrs	r3, r2
 80168ac:	0019      	movs	r1, r3
 80168ae:	bd70      	pop	{r4, r5, r6, pc}
 80168b0:	7fefffff 	.word	0x7fefffff
 80168b4:	000fffff 	.word	0x000fffff
 80168b8:	43500000 	.word	0x43500000
 80168bc:	fffffc02 	.word	0xfffffc02
 80168c0:	800fffff 	.word	0x800fffff
 80168c4:	3fe00000 	.word	0x3fe00000

080168c8 <__ssprint_r>:
 80168c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168ca:	6893      	ldr	r3, [r2, #8]
 80168cc:	b087      	sub	sp, #28
 80168ce:	9002      	str	r0, [sp, #8]
 80168d0:	000c      	movs	r4, r1
 80168d2:	0016      	movs	r6, r2
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d063      	beq.n	80169a0 <__ssprint_r+0xd8>
 80168d8:	6813      	ldr	r3, [r2, #0]
 80168da:	9303      	str	r3, [sp, #12]
 80168dc:	2300      	movs	r3, #0
 80168de:	001f      	movs	r7, r3
 80168e0:	9305      	str	r3, [sp, #20]
 80168e2:	2f00      	cmp	r7, #0
 80168e4:	d02e      	beq.n	8016944 <__ssprint_r+0x7c>
 80168e6:	68a5      	ldr	r5, [r4, #8]
 80168e8:	42af      	cmp	r7, r5
 80168ea:	d347      	bcc.n	801697c <__ssprint_r+0xb4>
 80168ec:	2390      	movs	r3, #144	; 0x90
 80168ee:	89a2      	ldrh	r2, [r4, #12]
 80168f0:	00db      	lsls	r3, r3, #3
 80168f2:	421a      	tst	r2, r3
 80168f4:	d042      	beq.n	801697c <__ssprint_r+0xb4>
 80168f6:	2003      	movs	r0, #3
 80168f8:	6921      	ldr	r1, [r4, #16]
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	1a5b      	subs	r3, r3, r1
 80168fe:	9304      	str	r3, [sp, #16]
 8016900:	6963      	ldr	r3, [r4, #20]
 8016902:	4343      	muls	r3, r0
 8016904:	0fd8      	lsrs	r0, r3, #31
 8016906:	18c3      	adds	r3, r0, r3
 8016908:	105b      	asrs	r3, r3, #1
 801690a:	9301      	str	r3, [sp, #4]
 801690c:	9b04      	ldr	r3, [sp, #16]
 801690e:	9801      	ldr	r0, [sp, #4]
 8016910:	3301      	adds	r3, #1
 8016912:	19db      	adds	r3, r3, r7
 8016914:	4283      	cmp	r3, r0
 8016916:	d900      	bls.n	801691a <__ssprint_r+0x52>
 8016918:	9301      	str	r3, [sp, #4]
 801691a:	0553      	lsls	r3, r2, #21
 801691c:	d544      	bpl.n	80169a8 <__ssprint_r+0xe0>
 801691e:	9901      	ldr	r1, [sp, #4]
 8016920:	9802      	ldr	r0, [sp, #8]
 8016922:	f7fb fab7 	bl	8011e94 <_malloc_r>
 8016926:	1e05      	subs	r5, r0, #0
 8016928:	d114      	bne.n	8016954 <__ssprint_r+0x8c>
 801692a:	230c      	movs	r3, #12
 801692c:	9a02      	ldr	r2, [sp, #8]
 801692e:	2001      	movs	r0, #1
 8016930:	6013      	str	r3, [r2, #0]
 8016932:	2340      	movs	r3, #64	; 0x40
 8016934:	89a2      	ldrh	r2, [r4, #12]
 8016936:	4240      	negs	r0, r0
 8016938:	4313      	orrs	r3, r2
 801693a:	81a3      	strh	r3, [r4, #12]
 801693c:	2300      	movs	r3, #0
 801693e:	60b3      	str	r3, [r6, #8]
 8016940:	6073      	str	r3, [r6, #4]
 8016942:	e02f      	b.n	80169a4 <__ssprint_r+0xdc>
 8016944:	9b03      	ldr	r3, [sp, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	9305      	str	r3, [sp, #20]
 801694a:	9b03      	ldr	r3, [sp, #12]
 801694c:	685f      	ldr	r7, [r3, #4]
 801694e:	3308      	adds	r3, #8
 8016950:	9303      	str	r3, [sp, #12]
 8016952:	e7c6      	b.n	80168e2 <__ssprint_r+0x1a>
 8016954:	9a04      	ldr	r2, [sp, #16]
 8016956:	6921      	ldr	r1, [r4, #16]
 8016958:	f7fb fcd5 	bl	8012306 <memcpy>
 801695c:	89a3      	ldrh	r3, [r4, #12]
 801695e:	4a18      	ldr	r2, [pc, #96]	; (80169c0 <__ssprint_r+0xf8>)
 8016960:	401a      	ands	r2, r3
 8016962:	2380      	movs	r3, #128	; 0x80
 8016964:	4313      	orrs	r3, r2
 8016966:	81a3      	strh	r3, [r4, #12]
 8016968:	9b04      	ldr	r3, [sp, #16]
 801696a:	6125      	str	r5, [r4, #16]
 801696c:	18ed      	adds	r5, r5, r3
 801696e:	6025      	str	r5, [r4, #0]
 8016970:	003d      	movs	r5, r7
 8016972:	9b01      	ldr	r3, [sp, #4]
 8016974:	9a04      	ldr	r2, [sp, #16]
 8016976:	6163      	str	r3, [r4, #20]
 8016978:	1a9b      	subs	r3, r3, r2
 801697a:	60a3      	str	r3, [r4, #8]
 801697c:	42bd      	cmp	r5, r7
 801697e:	d900      	bls.n	8016982 <__ssprint_r+0xba>
 8016980:	003d      	movs	r5, r7
 8016982:	002a      	movs	r2, r5
 8016984:	9905      	ldr	r1, [sp, #20]
 8016986:	6820      	ldr	r0, [r4, #0]
 8016988:	f7ff fb91 	bl	80160ae <memmove>
 801698c:	68a3      	ldr	r3, [r4, #8]
 801698e:	1b5b      	subs	r3, r3, r5
 8016990:	60a3      	str	r3, [r4, #8]
 8016992:	6823      	ldr	r3, [r4, #0]
 8016994:	195d      	adds	r5, r3, r5
 8016996:	68b3      	ldr	r3, [r6, #8]
 8016998:	6025      	str	r5, [r4, #0]
 801699a:	1bdb      	subs	r3, r3, r7
 801699c:	60b3      	str	r3, [r6, #8]
 801699e:	d1d1      	bne.n	8016944 <__ssprint_r+0x7c>
 80169a0:	2000      	movs	r0, #0
 80169a2:	6070      	str	r0, [r6, #4]
 80169a4:	b007      	add	sp, #28
 80169a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169a8:	9a01      	ldr	r2, [sp, #4]
 80169aa:	9802      	ldr	r0, [sp, #8]
 80169ac:	f7fb fcf0 	bl	8012390 <_realloc_r>
 80169b0:	1e05      	subs	r5, r0, #0
 80169b2:	d1d9      	bne.n	8016968 <__ssprint_r+0xa0>
 80169b4:	6921      	ldr	r1, [r4, #16]
 80169b6:	9802      	ldr	r0, [sp, #8]
 80169b8:	f7fe ff78 	bl	80158ac <_free_r>
 80169bc:	e7b5      	b.n	801692a <__ssprint_r+0x62>
 80169be:	46c0      	nop			; (mov r8, r8)
 80169c0:	fffffb7f 	.word	0xfffffb7f

080169c4 <__register_exitproc>:
 80169c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169c6:	4d29      	ldr	r5, [pc, #164]	; (8016a6c <__register_exitproc+0xa8>)
 80169c8:	0006      	movs	r6, r0
 80169ca:	6828      	ldr	r0, [r5, #0]
 80169cc:	9301      	str	r3, [sp, #4]
 80169ce:	9100      	str	r1, [sp, #0]
 80169d0:	0017      	movs	r7, r2
 80169d2:	f7ff fb5f 	bl	8016094 <__retarget_lock_acquire_recursive>
 80169d6:	4b26      	ldr	r3, [pc, #152]	; (8016a70 <__register_exitproc+0xac>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	001c      	movs	r4, r3
 80169dc:	34fc      	adds	r4, #252	; 0xfc
 80169de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d103      	bne.n	80169ec <__register_exitproc+0x28>
 80169e4:	334d      	adds	r3, #77	; 0x4d
 80169e6:	33ff      	adds	r3, #255	; 0xff
 80169e8:	0018      	movs	r0, r3
 80169ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80169ec:	6843      	ldr	r3, [r0, #4]
 80169ee:	2b1f      	cmp	r3, #31
 80169f0:	dd18      	ble.n	8016a24 <__register_exitproc+0x60>
 80169f2:	4b20      	ldr	r3, [pc, #128]	; (8016a74 <__register_exitproc+0xb0>)
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d105      	bne.n	8016a04 <__register_exitproc+0x40>
 80169f8:	6828      	ldr	r0, [r5, #0]
 80169fa:	f7ff fb4c 	bl	8016096 <__retarget_lock_release_recursive>
 80169fe:	2001      	movs	r0, #1
 8016a00:	4240      	negs	r0, r0
 8016a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a04:	20c8      	movs	r0, #200	; 0xc8
 8016a06:	0040      	lsls	r0, r0, #1
 8016a08:	f7fb fa30 	bl	8011e6c <malloc>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	d0f3      	beq.n	80169f8 <__register_exitproc+0x34>
 8016a10:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016a12:	2300      	movs	r3, #0
 8016a14:	6002      	str	r2, [r0, #0]
 8016a16:	22c4      	movs	r2, #196	; 0xc4
 8016a18:	0052      	lsls	r2, r2, #1
 8016a1a:	6043      	str	r3, [r0, #4]
 8016a1c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016a1e:	5083      	str	r3, [r0, r2]
 8016a20:	3204      	adds	r2, #4
 8016a22:	5083      	str	r3, [r0, r2]
 8016a24:	6843      	ldr	r3, [r0, #4]
 8016a26:	2e00      	cmp	r6, #0
 8016a28:	d014      	beq.n	8016a54 <__register_exitproc+0x90>
 8016a2a:	009a      	lsls	r2, r3, #2
 8016a2c:	1882      	adds	r2, r0, r2
 8016a2e:	0011      	movs	r1, r2
 8016a30:	3188      	adds	r1, #136	; 0x88
 8016a32:	600f      	str	r7, [r1, #0]
 8016a34:	2101      	movs	r1, #1
 8016a36:	0004      	movs	r4, r0
 8016a38:	4099      	lsls	r1, r3
 8016a3a:	3485      	adds	r4, #133	; 0x85
 8016a3c:	34ff      	adds	r4, #255	; 0xff
 8016a3e:	6865      	ldr	r5, [r4, #4]
 8016a40:	32fc      	adds	r2, #252	; 0xfc
 8016a42:	430d      	orrs	r5, r1
 8016a44:	6065      	str	r5, [r4, #4]
 8016a46:	9d01      	ldr	r5, [sp, #4]
 8016a48:	60d5      	str	r5, [r2, #12]
 8016a4a:	2e02      	cmp	r6, #2
 8016a4c:	d102      	bne.n	8016a54 <__register_exitproc+0x90>
 8016a4e:	68a2      	ldr	r2, [r4, #8]
 8016a50:	4311      	orrs	r1, r2
 8016a52:	60a1      	str	r1, [r4, #8]
 8016a54:	1c5a      	adds	r2, r3, #1
 8016a56:	6042      	str	r2, [r0, #4]
 8016a58:	3302      	adds	r3, #2
 8016a5a:	9a00      	ldr	r2, [sp, #0]
 8016a5c:	009b      	lsls	r3, r3, #2
 8016a5e:	501a      	str	r2, [r3, r0]
 8016a60:	4b02      	ldr	r3, [pc, #8]	; (8016a6c <__register_exitproc+0xa8>)
 8016a62:	6818      	ldr	r0, [r3, #0]
 8016a64:	f7ff fb17 	bl	8016096 <__retarget_lock_release_recursive>
 8016a68:	2000      	movs	r0, #0
 8016a6a:	e7ca      	b.n	8016a02 <__register_exitproc+0x3e>
 8016a6c:	20000a74 	.word	0x20000a74
 8016a70:	08019950 	.word	0x08019950
 8016a74:	08011e6d 	.word	0x08011e6d

08016a78 <_sbrk>:
 8016a78:	4b05      	ldr	r3, [pc, #20]	; (8016a90 <_sbrk+0x18>)
 8016a7a:	0002      	movs	r2, r0
 8016a7c:	6819      	ldr	r1, [r3, #0]
 8016a7e:	2900      	cmp	r1, #0
 8016a80:	d101      	bne.n	8016a86 <_sbrk+0xe>
 8016a82:	4904      	ldr	r1, [pc, #16]	; (8016a94 <_sbrk+0x1c>)
 8016a84:	6019      	str	r1, [r3, #0]
 8016a86:	6818      	ldr	r0, [r3, #0]
 8016a88:	1882      	adds	r2, r0, r2
 8016a8a:	601a      	str	r2, [r3, #0]
 8016a8c:	4770      	bx	lr
 8016a8e:	46c0      	nop			; (mov r8, r8)
 8016a90:	200069f8 	.word	0x200069f8
 8016a94:	20006ff0 	.word	0x20006ff0

08016a98 <_init>:
 8016a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a9a:	46c0      	nop			; (mov r8, r8)
 8016a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a9e:	bc08      	pop	{r3}
 8016aa0:	469e      	mov	lr, r3
 8016aa2:	4770      	bx	lr

08016aa4 <_fini>:
 8016aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aa6:	46c0      	nop			; (mov r8, r8)
 8016aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aaa:	bc08      	pop	{r3}
 8016aac:	469e      	mov	lr, r3
 8016aae:	4770      	bx	lr
