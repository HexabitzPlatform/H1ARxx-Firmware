
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a04  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003204  08016ac0  08016ac0  00026ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019cc4  08019cc4  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  08019cc4  08019cc4  00029cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019ccc  08019ccc  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019ccc  08019ccc  00029ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019cd4  08019cd4  00029cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  08019cd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  08019ce0  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006374  20000a78  0801a750  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006dec  0801a750  00036dec  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   000527c2  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000968a  00000000  00000000  00083262  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a78f  00000000  00000000  0008c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a50  00000000  00000000  000a7080  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002f10  00000000  00000000  000a8ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017672  00000000  00000000  000ab9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a55d  00000000  00000000  000c3052  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cd5af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006318  00000000  00000000  000cd62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08016aa8 	.word	0x08016aa8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08016aa8 	.word	0x08016aa8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017128 	.word	0x08017128
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017168 	.word	0x08017168
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	080171a8 	.word	0x080171a8
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	46c6      	mov	lr, r8
 8002d28:	b500      	push	{lr}
 8002d2a:	0006      	movs	r6, r0
 8002d2c:	000d      	movs	r5, r1
 8002d2e:	4690      	mov	r8, r2
 8002d30:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002d32:	f009 ffd1 	bl	800ccd8 <GetUart>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d01c      	beq.n	8002d74 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <Send_BOS_Message+0x60>)
 8002d3c:	00b2      	lsls	r2, r6, #2
 8002d3e:	58d0      	ldr	r0, [r2, r3]
 8002d40:	0021      	movs	r1, r4
 8002d42:	f00a f941 	bl	800cfc8 <osSemaphoreWait>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d114      	bne.n	8002d74 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <Send_BOS_Message+0x50>
 8002d50:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d52:	0030      	movs	r0, r6
 8002d54:	f009 ffc0 	bl	800ccd8 <GetUart>
 8002d58:	0029      	movs	r1, r5
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f00e fb6a 	bl	8011434 <HAL_UART_Transmit_IT>
			for(uint8_t i=0;i<n;i++)
 8002d60:	3401      	adds	r4, #1
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d62:	0007      	movs	r7, r0
			for(uint8_t i=0;i<n;i++)
 8002d64:	b2e4      	uxtb	r4, r4
				buffer++;
				//Delay_us(500);
				Delay_ms(2);
 8002d66:	2002      	movs	r0, #2
				buffer++;
 8002d68:	3501      	adds	r5, #1
				Delay_ms(2);
 8002d6a:	f00b ff87 	bl	800ec7c <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002d6e:	4544      	cmp	r4, r8
 8002d70:	d3ef      	bcc.n	8002d52 <Send_BOS_Message+0x2e>
 8002d72:	e000      	b.n	8002d76 <Send_BOS_Message+0x52>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d74:	2701      	movs	r7, #1
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002d76:	200a      	movs	r0, #10
 8002d78:	f00b ff80 	bl	800ec7c <HAL_Delay>
	return result;
}
 8002d7c:	0038      	movs	r0, r7
 8002d7e:	bc04      	pop	{r2}
 8002d80:	4690      	mov	r8, r2
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d84:	200068c8 	.word	0x200068c8

08002d88 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8e:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d90:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d92:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d035      	beq.n	8002e04 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d98:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d9a:	d02c      	beq.n	8002df6 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <LoadROtopology+0x94>)
 8002d9e:	b2f6      	uxtb	r6, r6
 8002da0:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <LoadROtopology+0x98>)
 8002da4:	7013      	strb	r3, [r2, #0]
 8002da6:	466b      	mov	r3, sp
 8002da8:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002daa:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002dac:	2202      	movs	r2, #2
 8002dae:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002db0:	469c      	mov	ip, r3
 8002db2:	4d1c      	ldr	r5, [pc, #112]	; (8002e24 <LoadROtopology+0x9c>)
 8002db4:	4663      	mov	r3, ip
 8002db6:	700b      	strb	r3, [r1, #0]
 8002db8:	780b      	ldrb	r3, [r1, #0]
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d814      	bhi.n	8002de8 <LoadROtopology+0x60>
 8002dbe:	1e63      	subs	r3, r4, #1
 8002dc0:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002dc2:	18c0      	adds	r0, r0, r3
 8002dc4:	0040      	lsls	r0, r0, #1
 8002dc6:	18c0      	adds	r0, r0, r3
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <LoadROtopology+0x8c>)
 8002dca:	18d7      	adds	r7, r2, r3
 8002dcc:	780b      	ldrb	r3, [r1, #0]
 8002dce:	883f      	ldrh	r7, [r7, #0]
 8002dd0:	18c3      	adds	r3, r0, r3
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dd6:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002dd8:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	700b      	strb	r3, [r1, #0]
 8002de0:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002de2:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	d9ef      	bls.n	8002dc8 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	42b4      	cmp	r4, r6
 8002dee:	d9e1      	bls.n	8002db4 <LoadROtopology+0x2c>
 8002df0:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002df2:	b003      	add	sp, #12
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002df6:	2101      	movs	r1, #1
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002dfa:	2601      	movs	r6, #1
			N =1;
 8002dfc:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <LoadROtopology+0x98>)
 8002e00:	7013      	strb	r3, [r2, #0]
 8002e02:	e7d0      	b.n	8002da6 <LoadROtopology+0x1e>
		N =1;
 8002e04:	2201      	movs	r2, #1
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002e08:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002e0a:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <LoadROtopology+0x98>)
 8002e10:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002e12:	e7ee      	b.n	8002df2 <LoadROtopology+0x6a>
 8002e14:	0801d800 	.word	0x0801d800
 8002e18:	0000ffff 	.word	0x0000ffff
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	20000a98 	.word	0x20000a98
 8002e24:	20000ed4 	.word	0x20000ed4

08002e28 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	46c6      	mov	lr, r8
 8002e2c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002e2e:	4e0f      	ldr	r6, [pc, #60]	; (8002e6c <LoadEEportsDir+0x44>)
 8002e30:	7833      	ldrb	r3, [r6, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002e36:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002e38:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002e3a:	4698      	mov	r8, r3
 8002e3c:	4f0c      	ldr	r7, [pc, #48]	; (8002e70 <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e3e:	1e61      	subs	r1, r4, #1
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	1c65      	adds	r5, r4, #1
 8002e44:	1879      	adds	r1, r7, r1
 8002e46:	b2a8      	uxth	r0, r5
 8002e48:	f007 fd8c 	bl	800a964 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e4c:	2c19      	cmp	r4, #25
 8002e4e:	d901      	bls.n	8002e54 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002e50:	230a      	movs	r3, #10
 8002e52:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002e54:	7833      	ldrb	r3, [r6, #0]
 8002e56:	b2ec      	uxtb	r4, r5
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d2f0      	bcs.n	8002e3e <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	bc04      	pop	{r2}
 8002e60:	4690      	mov	r8, r2
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	4698      	mov	r8, r3
 8002e68:	e7f8      	b.n	8002e5c <LoadEEportsDir+0x34>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	20006d44 	.word	0x20006d44

08002e74 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	464e      	mov	r6, r9
 8002e78:	46de      	mov	lr, fp
 8002e7a:	4657      	mov	r7, sl
 8002e7c:	4645      	mov	r5, r8
 8002e7e:	b5e0      	push	{r5, r6, r7, lr}
 8002e80:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e82:	466b      	mov	r3, sp
 8002e84:	1d9e      	adds	r6, r3, #6
 8002e86:	2300      	movs	r3, #0
 8002e88:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e8e:	241c      	movs	r4, #28
 8002e90:	469a      	mov	sl, r3
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <LoadEEalias+0x7c>)
 8002e94:	469b      	mov	fp, r3
 8002e96:	4643      	mov	r3, r8
 8002e98:	009f      	lsls	r7, r3, #2
 8002e9a:	18fd      	adds	r5, r7, r3
 8002e9c:	1d63      	adds	r3, r4, #5
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	006d      	lsls	r5, r5, #1
 8002ea4:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	0031      	movs	r1, r6
 8002eaa:	f007 fd5b 	bl	800a964 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002eae:	8833      	ldrh	r3, [r6, #0]
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	706b      	strb	r3, [r5, #1]
 8002eb4:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	702b      	strb	r3, [r5, #0]
 8002eba:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002ebc:	454c      	cmp	r4, r9
 8002ebe:	d1f2      	bne.n	8002ea6 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4447      	add	r7, r8
 8002ec4:	007f      	lsls	r7, r7, #1
 8002ec6:	4457      	add	r7, sl
 8002ec8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002eca:	4643      	mov	r3, r8
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	465b      	mov	r3, fp
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4543      	cmp	r3, r8
 8002ed8:	d2dd      	bcs.n	8002e96 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002eda:	2000      	movs	r0, #0
 8002edc:	b003      	add	sp, #12
 8002ede:	bc3c      	pop	{r2, r3, r4, r5}
 8002ee0:	4690      	mov	r8, r2
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	46a2      	mov	sl, r4
 8002ee6:	46ab      	mov	fp, r5
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000dc4 	.word	0x20000dc4
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	4646      	mov	r6, r8
 8002ef8:	46d6      	mov	lr, sl
 8002efa:	464f      	mov	r7, r9
 8002efc:	b5c0      	push	{r6, r7, lr}
 8002efe:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f00:	466b      	mov	r3, sp
 8002f02:	1d9e      	adds	r6, r3, #6
 8002f04:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002f06:	4c22      	ldr	r4, [pc, #136]	; (8002f90 <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002f08:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002f0a:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002f0c:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03a      	beq.n	8002f88 <LoadEEgroup+0x94>
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f14:	2100      	movs	r1, #0
 8002f16:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f18:	1d1f      	adds	r7, r3, #4
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	30cb      	adds	r0, #203	; 0xcb
 8002f20:	1879      	adds	r1, r7, r1
 8002f22:	b280      	uxth	r0, r0
		add++;
 8002f24:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f26:	f007 fd1d 	bl	800a964 <EE_ReadVariable>
		add++;
 8002f2a:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002f2c:	7823      	ldrb	r3, [r4, #0]
 8002f2e:	b2e9      	uxtb	r1, r5
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d8f2      	bhi.n	8002f1a <LoadEEgroup+0x26>
 8002f34:	2338      	movs	r3, #56	; 0x38
 8002f36:	002c      	movs	r4, r5
 8002f38:	35cb      	adds	r5, #203	; 0xcb
 8002f3a:	469c      	mov	ip, r3
 8002f3c:	b2ab      	uxth	r3, r5
 8002f3e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f40:	2300      	movs	r3, #0
 8002f42:	469a      	mov	sl, r3
 8002f44:	3499      	adds	r4, #153	; 0x99
 8002f46:	44e1      	add	r9, ip
 8002f48:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002f4a:	464d      	mov	r5, r9
 8002f4c:	1d67      	adds	r7, r4, #5
 8002f4e:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f50:	0020      	movs	r0, r4
 8002f52:	0031      	movs	r1, r6
 8002f54:	f007 fd06 	bl	800a964 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f58:	8833      	ldrh	r3, [r6, #0]
 8002f5a:	3401      	adds	r4, #1
 8002f5c:	706b      	strb	r3, [r5, #1]
 8002f5e:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	702b      	strb	r3, [r5, #0]
 8002f64:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f66:	42bc      	cmp	r4, r7
 8002f68:	d1f2      	bne.n	8002f50 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	4652      	mov	r2, sl
 8002f6e:	725a      	strb	r2, [r3, #9]
 8002f70:	230a      	movs	r3, #10
 8002f72:	469c      	mov	ip, r3
 8002f74:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f76:	45a0      	cmp	r8, r4
 8002f78:	d1e7      	bne.n	8002f4a <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bc1c      	pop	{r2, r3, r4}
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	46a2      	mov	sl, r4
 8002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <LoadEEgroup+0xa0>)
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	e7d2      	b.n	8002f34 <LoadEEgroup+0x40>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000a98 	.word	0x20000a98

08002f98 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	46ce      	mov	lr, r9
 8002f9c:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f9e:	260e      	movs	r6, #14
 8002fa0:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fa6:	ac03      	add	r4, sp, #12
 8002fa8:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fae:	8023      	strh	r3, [r4, #0]
 8002fb0:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002fb2:	f007 fcd7 	bl	800a964 <EE_ReadVariable>
	uint8_t direction =0;
 8002fb6:	2700      	movs	r7, #0
	if(!status1){
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d100      	bne.n	8002fbe <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002fbc:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	20e5      	movs	r0, #229	; 0xe5
 8002fc2:	f007 fccf 	bl	800a964 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fc6:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fc8:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fca:	20e6      	movs	r0, #230	; 0xe6
 8002fcc:	f007 fcca 	bl	800a964 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002fd0:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002fd6:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	d104      	bne.n	8002fe6 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002fdc:	8823      	ldrh	r3, [r4, #0]
 8002fde:	8832      	ldrh	r2, [r6, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	20e7      	movs	r0, #231	; 0xe7
 8002fea:	f007 fcbb 	bl	800a964 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002fee:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002ff0:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002ff2:	20e8      	movs	r0, #232	; 0xe8
 8002ff4:	f007 fcb6 	bl	800a964 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002ff8:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002ffe:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8003000:	2d00      	cmp	r5, #0
 8003002:	d104      	bne.n	800300e <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003004:	8823      	ldrh	r3, [r4, #0]
 8003006:	8832      	ldrh	r2, [r6, #0]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	4699      	mov	r9, r3
 800300c:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800300e:	0021      	movs	r1, r4
 8003010:	20e9      	movs	r0, #233	; 0xe9
 8003012:	f007 fca7 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 8003016:	2800      	cmp	r0, #0
 8003018:	d030      	beq.n	800307c <LoadEEstreams+0xe4>
 800301a:	4d26      	ldr	r5, [pc, #152]	; (80030b4 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800301c:	0021      	movs	r1, r4
 800301e:	20ea      	movs	r0, #234	; 0xea
 8003020:	f007 fca0 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 8003024:	2800      	cmp	r0, #0
 8003026:	d103      	bne.n	8003030 <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8003028:	8823      	ldrh	r3, [r4, #0]
 800302a:	0a1a      	lsrs	r2, r3, #8
 800302c:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 800302e:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003030:	0021      	movs	r1, r4
 8003032:	20eb      	movs	r0, #235	; 0xeb
 8003034:	f007 fc96 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 8003038:	2800      	cmp	r0, #0
 800303a:	d105      	bne.n	8003048 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 800303c:	2220      	movs	r2, #32
 800303e:	8823      	ldrh	r3, [r4, #0]
 8003040:	0a19      	lsrs	r1, r3, #8
 8003042:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8003044:	3201      	adds	r2, #1
 8003046:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003048:	7f2b      	ldrb	r3, [r5, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <LoadEEstreams+0xbc>
 800304e:	7f6a      	ldrb	r2, [r5, #29]
 8003050:	2a00      	cmp	r2, #0
 8003052:	d120      	bne.n	8003096 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003054:	7fab      	ldrb	r3, [r5, #30]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <LoadEEstreams+0xc8>
 800305a:	7fea      	ldrb	r2, [r5, #31]
 800305c:	2a00      	cmp	r2, #0
 800305e:	d121      	bne.n	80030a4 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003060:	2320      	movs	r3, #32
 8003062:	5ceb      	ldrb	r3, [r5, r3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <LoadEEstreams+0xd8>
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	5caa      	ldrb	r2, [r5, r2]
 800306c:	2a00      	cmp	r2, #0
 800306e:	d10b      	bne.n	8003088 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003070:	2000      	movs	r0, #0
 8003072:	b005      	add	sp, #20
 8003074:	bc0c      	pop	{r2, r3}
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 800307c:	8823      	ldrh	r3, [r4, #0]
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <LoadEEstreams+0x11c>)
 8003080:	0a1a      	lsrs	r2, r3, #8
 8003082:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003084:	776b      	strb	r3, [r5, #29]
 8003086:	e7c9      	b.n	800301c <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	4641      	mov	r1, r8
 800308c:	464a      	mov	r2, r9
 800308e:	0038      	movs	r0, r7
 8003090:	f004 fcf4 	bl	8007a7c <SetupDMAStreams>
 8003094:	e7ec      	b.n	8003070 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	4641      	mov	r1, r8
 800309a:	464a      	mov	r2, r9
 800309c:	0038      	movs	r0, r7
 800309e:	f004 fced 	bl	8007a7c <SetupDMAStreams>
 80030a2:	e7d7      	b.n	8003054 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	4641      	mov	r1, r8
 80030a8:	464a      	mov	r2, r9
 80030aa:	0038      	movs	r0, r7
 80030ac:	f004 fce6 	bl	8007a7c <SetupDMAStreams>
 80030b0:	e7d6      	b.n	8003060 <LoadEEstreams+0xc8>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000b18 	.word	0x20000b18

080030b8 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030b8:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030be:	ac01      	add	r4, sp, #4
 80030c0:	0021      	movs	r1, r4
 80030c2:	0040      	lsls	r0, r0, #1
 80030c4:	f007 fc4e 	bl	800a964 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d15d      	bne.n	8003188 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030cc:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80030ce:	8823      	ldrh	r3, [r4, #0]
 80030d0:	4d54      	ldr	r5, [pc, #336]	; (8003224 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d2:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 80030d4:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030d6:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030dc:	f007 fc42 	bl	800a964 <EE_ReadVariable>

	if(!status1){
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d15e      	bne.n	80031a2 <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e4:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030e6:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030e8:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030ea:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030ec:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ee:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030f0:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030f2:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030f4:	f007 fc36 	bl	800a964 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 80030f8:	4d4b      	ldr	r5, [pc, #300]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d15e      	bne.n	80031bc <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030fe:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003100:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003102:	0021      	movs	r1, r4
 8003104:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 8003106:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003108:	f007 fc2c 	bl	800a964 <EE_ReadVariable>
	if(!status1)
 800310c:	2800      	cmp	r0, #0
 800310e:	d15f      	bne.n	80031d0 <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003110:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003112:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003114:	0021      	movs	r1, r4
 8003116:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 8003118:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800311a:	f007 fc23 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 800311e:	2800      	cmp	r0, #0
 8003120:	d160      	bne.n	80031e4 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003122:	8823      	ldrh	r3, [r4, #0]
 8003124:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800312a:	208c      	movs	r0, #140	; 0x8c
 800312c:	0021      	movs	r1, r4
 800312e:	0040      	lsls	r0, r0, #1
 8003130:	f007 fc18 	bl	800a964 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003134:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003136:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003138:	201a      	movs	r0, #26
 800313a:	1d99      	adds	r1, r3, #6
 800313c:	30ff      	adds	r0, #255	; 0xff
 800313e:	f007 fc11 	bl	800a964 <EE_ReadVariable>
	if(!status1 && !status2){
 8003142:	4306      	orrs	r6, r0
 8003144:	b2b6      	uxth	r6, r6
 8003146:	2e00      	cmp	r6, #0
 8003148:	d15f      	bne.n	800320a <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800314a:	466b      	mov	r3, sp
 800314c:	88db      	ldrh	r3, [r3, #6]
 800314e:	8822      	ldrh	r2, [r4, #0]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	4313      	orrs	r3, r2
 8003154:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003156:	208d      	movs	r0, #141	; 0x8d
 8003158:	0021      	movs	r1, r4
 800315a:	0040      	lsls	r0, r0, #1
 800315c:	f007 fc02 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 8003160:	2800      	cmp	r0, #0
 8003162:	d145      	bne.n	80031f0 <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003164:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003166:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003168:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 800316a:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800316c:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003172:	f007 fbf7 	bl	800a964 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003176:	2800      	cmp	r0, #0
 8003178:	d044      	beq.n	8003204 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800317a:	2326      	movs	r3, #38	; 0x26
 800317c:	4a2b      	ldr	r2, [pc, #172]	; (800322c <LoadEEparams+0x174>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 8003182:	2000      	movs	r0, #0
 8003184:	b002      	add	sp, #8
 8003186:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003188:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <LoadEEparams+0x174>)
 800318c:	4d25      	ldr	r5, [pc, #148]	; (8003224 <LoadEEparams+0x16c>)
 800318e:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003190:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 8003192:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003194:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003196:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003198:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800319a:	f007 fbe3 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0a0      	beq.n	80030e4 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a2:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031a6:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031a8:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031aa:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031ac:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031ae:	895b      	ldrh	r3, [r3, #10]
 80031b0:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031b2:	f007 fbd7 	bl	800a964 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 80031b6:	4d1c      	ldr	r5, [pc, #112]	; (8003228 <LoadEEparams+0x170>)
	if(!status1)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0a0      	beq.n	80030fe <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031bc:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c0:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c2:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c4:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031c6:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031c8:	f007 fbcc 	bl	800a964 <EE_ReadVariable>
	if(!status1)
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d09f      	beq.n	8003110 <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d0:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d4:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031d6:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031d8:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031da:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031dc:	f007 fbc2 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d09e      	beq.n	8003122 <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <LoadEEparams+0x174>)
 80031e6:	7c1a      	ldrb	r2, [r3, #16]
 80031e8:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031ea:	7c5b      	ldrb	r3, [r3, #17]
 80031ec:	716b      	strb	r3, [r5, #5]
 80031ee:	e79c      	b.n	800312a <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f0:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f2:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031f8:	0021      	movs	r1, r4
 80031fa:	30ff      	adds	r0, #255	; 0xff
 80031fc:	f007 fbb2 	bl	800a964 <EE_ReadVariable>
	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d1ba      	bne.n	800317a <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003204:	8823      	ldrh	r3, [r4, #0]
 8003206:	76ab      	strb	r3, [r5, #26]
 8003208:	e7bb      	b.n	8003182 <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 800320a:	2322      	movs	r3, #34	; 0x22
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <LoadEEparams+0x178>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003214:	23e1      	movs	r3, #225	; 0xe1
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	60ab      	str	r3, [r5, #8]
 800321a:	e79c      	b.n	8003156 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <LoadEEparams+0x174>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	60ab      	str	r3, [r5, #8]
 8003222:	e798      	b.n	8003156 <LoadEEparams+0x9e>
 8003224:	200067c4 	.word	0x200067c4
 8003228:	20006844 	.word	0x20006844
 800322c:	20000008 	.word	0x20000008
 8003230:	20000b18 	.word	0x20000b18

08003234 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	46de      	mov	lr, fp
 8003238:	4657      	mov	r7, sl
 800323a:	464e      	mov	r6, r9
 800323c:	4645      	mov	r5, r8
 800323e:	b5e0      	push	{r5, r6, r7, lr}
 8003240:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003242:	ab02      	add	r3, sp, #8
 8003244:	469c      	mov	ip, r3
 8003246:	261e      	movs	r6, #30
 8003248:	2300      	movs	r3, #0
 800324a:	4466      	add	r6, ip
 800324c:	8033      	strh	r3, [r6, #0]
 800324e:	330f      	adds	r3, #15
 8003250:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003252:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003254:	2501      	movs	r5, #1
 8003256:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003258:	469b      	mov	fp, r3
 800325a:	e004      	b.n	8003266 <LoadEEbuttons+0x32>
 800325c:	3404      	adds	r4, #4
 800325e:	3501      	adds	r5, #1
 8003260:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003262:	2d07      	cmp	r5, #7
 8003264:	d05e      	beq.n	8003324 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003266:	0031      	movs	r1, r6
 8003268:	0020      	movs	r0, r4
 800326a:	f007 fb7b 	bl	800a964 <EE_ReadVariable>
 800326e:	b2eb      	uxtb	r3, r5
 8003270:	1e07      	subs	r7, r0, #0
 8003272:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003274:	d1f2      	bne.n	800325c <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003276:	8832      	ldrh	r2, [r6, #0]
 8003278:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800327a:	0919      	lsrs	r1, r3, #4
 800327c:	42a9      	cmp	r1, r5
 800327e:	d1ed      	bne.n	800325c <LoadEEbuttons+0x28>
 8003280:	4651      	mov	r1, sl
 8003282:	400b      	ands	r3, r1
 8003284:	d0ea      	beq.n	800325c <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003286:	482b      	ldr	r0, [pc, #172]	; (8003334 <LoadEEbuttons+0x100>)
 8003288:	00e9      	lsls	r1, r5, #3
 800328a:	4680      	mov	r8, r0
 800328c:	1949      	adds	r1, r1, r5
 800328e:	4488      	add	r8, r1
 8003290:	4641      	mov	r1, r8
 8003292:	00a8      	lsls	r0, r5, #2
 8003294:	704b      	strb	r3, [r1, #1]
 8003296:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003298:	0018      	movs	r0, r3
 800329a:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 800329c:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800329e:	b280      	uxth	r0, r0
 80032a0:	0031      	movs	r1, r6
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	f007 fb5e 	bl	800a964 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032a8:	4641      	mov	r1, r8
 80032aa:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032ac:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032ae:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b0:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032b2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80032b4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032b6:	b280      	uxth	r0, r0
 80032b8:	0031      	movs	r1, r6
 80032ba:	f007 fb53 	bl	800a964 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032be:	4641      	mov	r1, r8
 80032c0:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c2:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c4:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032c6:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80032ca:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032cc:	b280      	uxth	r0, r0
 80032ce:	0031      	movs	r1, r6
 80032d0:	f007 fb48 	bl	800a964 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032d4:	4641      	mov	r1, r8
 80032d6:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 80032d8:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032da:	0a1a      	lsrs	r2, r3, #8
 80032dc:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032de:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 80032e0:	4649      	mov	r1, r9
 80032e2:	f007 fef3 	bl	800b0cc <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032e6:	4643      	mov	r3, r8
 80032e8:	4658      	mov	r0, fp
 80032ea:	7a19      	ldrb	r1, [r3, #8]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	104a      	asrs	r2, r1, #1
 80032f0:	4002      	ands	r2, r0
 80032f2:	4001      	ands	r1, r0
 80032f4:	4640      	mov	r0, r8
 80032f6:	9705      	str	r7, [sp, #20]
 80032f8:	79c0      	ldrb	r0, [r0, #7]
 80032fa:	3404      	adds	r4, #4
 80032fc:	9004      	str	r0, [sp, #16]
 80032fe:	4640      	mov	r0, r8
 8003300:	7980      	ldrb	r0, [r0, #6]
 8003302:	3501      	adds	r5, #1
 8003304:	9003      	str	r0, [sp, #12]
 8003306:	4640      	mov	r0, r8
 8003308:	7940      	ldrb	r0, [r0, #5]
 800330a:	b2a4      	uxth	r4, r4
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	4640      	mov	r0, r8
 8003310:	7900      	ldrb	r0, [r0, #4]
 8003312:	9001      	str	r0, [sp, #4]
 8003314:	4640      	mov	r0, r8
 8003316:	78c0      	ldrb	r0, [r0, #3]
 8003318:	9000      	str	r0, [sp, #0]
 800331a:	4648      	mov	r0, r9
 800331c:	f007 ffe0 	bl	800b2e0 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003320:	2d07      	cmp	r5, #7
 8003322:	d1a0      	bne.n	8003266 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 8003324:	2000      	movs	r0, #0
 8003326:	b00b      	add	sp, #44	; 0x2c
 8003328:	bc3c      	pop	{r2, r3, r4, r5}
 800332a:	4690      	mov	r8, r2
 800332c:	4699      	mov	r9, r3
 800332e:	46a2      	mov	sl, r4
 8003330:	46ab      	mov	fp, r5
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	200023a0 	.word	0x200023a0

08003338 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	46de      	mov	lr, fp
 800333c:	4645      	mov	r5, r8
 800333e:	4657      	mov	r7, sl
 8003340:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003342:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003344:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003346:	f00e fd99 	bl	8011e7c <malloc>
 800334a:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 800334c:	d065      	beq.n	800341a <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800334e:	4c3b      	ldr	r4, [pc, #236]	; (800343c <LoadROsnippets+0x104>)
		return BOS_ERROR;
 8003350:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003352:	7822      	ldrb	r2, [r4, #0]
 8003354:	2afe      	cmp	r2, #254	; 0xfe
 8003356:	d156      	bne.n	8003406 <LoadROsnippets+0xce>
 8003358:	1c6b      	adds	r3, r5, #1
 800335a:	4698      	mov	r8, r3
 800335c:	2364      	movs	r3, #100	; 0x64
 800335e:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <LoadROsnippets+0x108>)
 8003362:	4e38      	ldr	r6, [pc, #224]	; (8003444 <LoadROsnippets+0x10c>)
 8003364:	469b      	mov	fp, r3
 8003366:	44b1      	add	r9, r6
 8003368:	0020      	movs	r0, r4
 800336a:	46a2      	mov	sl, r4
 800336c:	3014      	adds	r0, #20
 800336e:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003370:	7822      	ldrb	r2, [r4, #0]
 8003372:	550a      	strb	r2, [r1, r4]
 8003374:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003376:	4284      	cmp	r4, r0
 8003378:	d1fa      	bne.n	8003370 <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800337a:	2214      	movs	r2, #20
 800337c:	4641      	mov	r1, r8
 800337e:	0030      	movs	r0, r6
 8003380:	f00e ffc9 	bl	8012316 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003384:	2100      	movs	r1, #0
 8003386:	2214      	movs	r2, #20
 8003388:	0028      	movs	r0, r5
 800338a:	f00e ffcd 	bl	8012328 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800338e:	7821      	ldrb	r1, [r4, #0]
 8003390:	1c8b      	adds	r3, r1, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d942      	bls.n	800341e <LoadROsnippets+0xe6>
 8003398:	4657      	mov	r7, sl
 800339a:	0028      	movs	r0, r5
 800339c:	3746      	adds	r7, #70	; 0x46
		i =0;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <LoadROsnippets+0x70>
 80033a2:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a4:	42a7      	cmp	r7, r4
 80033a6:	d034      	beq.n	8003412 <LoadROsnippets+0xda>
			++currentAdd;
 80033a8:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033aa:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ac:	7821      	ldrb	r1, [r4, #0]
			++i;
 80033ae:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b0:	1c8a      	adds	r2, r1, #2
 80033b2:	b2d2      	uxtb	r2, r2
			++i;
 80033b4:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033b6:	2a01      	cmp	r2, #1
 80033b8:	d8f3      	bhi.n	80033a2 <LoadROsnippets+0x6a>
 80033ba:	469a      	mov	sl, r3
 80033bc:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 80033be:	5caa      	ldrb	r2, [r5, r2]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d002      	beq.n	80033ca <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 80033c4:	3301      	adds	r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 80033ca:	4650      	mov	r0, sl
 80033cc:	f00e fd56 	bl	8011e7c <malloc>
 80033d0:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d028      	beq.n	8003428 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80033d6:	4652      	mov	r2, sl
 80033d8:	0029      	movs	r1, r5
 80033da:	f00e ff9c 	bl	8012316 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033de:	465b      	mov	r3, fp
 80033e0:	465a      	mov	r2, fp
 80033e2:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 80033e4:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033e6:	3301      	adds	r3, #1
 80033e8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80033ea:	0028      	movs	r0, r5
 80033ec:	4652      	mov	r2, sl
 80033ee:	f00e ff9b 	bl	8012328 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80033f2:	7823      	ldrb	r3, [r4, #0]
 80033f4:	2bfe      	cmp	r3, #254	; 0xfe
 80033f6:	d102      	bne.n	80033fe <LoadROsnippets+0xc6>
 80033f8:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80033fa:	45b1      	cmp	r9, r6
 80033fc:	d1b4      	bne.n	8003368 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 80033fe:	0028      	movs	r0, r5
 8003400:	f00e fd46 	bl	8011e90 <free>
	return BOS_OK;
 8003404:	2000      	movs	r0, #0
}
 8003406:	bc3c      	pop	{r2, r3, r4, r5}
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	46a2      	mov	sl, r4
 800340e:	46ab      	mov	fp, r5
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003412:	2332      	movs	r3, #50	; 0x32
 8003414:	2231      	movs	r2, #49	; 0x31
 8003416:	469a      	mov	sl, r3
 8003418:	e7d1      	b.n	80033be <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 800341a:	20fb      	movs	r0, #251	; 0xfb
 800341c:	e7f3      	b.n	8003406 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800341e:	2201      	movs	r2, #1
 8003420:	2300      	movs	r3, #0
 8003422:	4252      	negs	r2, r2
 8003424:	469a      	mov	sl, r3
 8003426:	e7ca      	b.n	80033be <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003428:	2214      	movs	r2, #20
 800342a:	2100      	movs	r1, #0
 800342c:	0030      	movs	r0, r6
 800342e:	f00e ff7b 	bl	8012328 <memset>
			free(snipBuffer);
 8003432:	0028      	movs	r0, r5
 8003434:	f00e fd2c 	bl	8011e90 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003438:	200e      	movs	r0, #14
 800343a:	e7e4      	b.n	8003406 <LoadROsnippets+0xce>
 800343c:	0801dc00 	.word	0x0801dc00
 8003440:	200016d4 	.word	0x200016d4
 8003444:	20006860 	.word	0x20006860

08003448 <LoadEEvars>:
void LoadEEvars(void){
 8003448:	b510      	push	{r4, lr}
	LoadROtopology();
 800344a:	f7ff fc9d 	bl	8002d88 <LoadROtopology>
	LoadEEportsDir();
 800344e:	f7ff fceb 	bl	8002e28 <LoadEEportsDir>
	LoadEEalias();
 8003452:	f7ff fd0f 	bl	8002e74 <LoadEEalias>
	LoadEEgroup();
 8003456:	f7ff fd4d 	bl	8002ef4 <LoadEEgroup>
	LoadEEstreams();
 800345a:	f7ff fd9d 	bl	8002f98 <LoadEEstreams>
	LoadEEparams();
 800345e:	f7ff fe2b 	bl	80030b8 <LoadEEparams>
	LoadEEbuttons();
 8003462:	f7ff fee7 	bl	8003234 <LoadEEbuttons>
	LoadROsnippets();
 8003466:	f7ff ff67 	bl	8003338 <LoadROsnippets>
}
 800346a:	bd10      	pop	{r4, pc}

0800346c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	46c6      	mov	lr, r8
 8003470:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003472:	4e10      	ldr	r6, [pc, #64]	; (80034b4 <SaveEEportsDir+0x48>)
 8003474:	7833      	ldrb	r3, [r6, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 800347a:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800347c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800347e:	4698      	mov	r8, r3
 8003480:	4f0d      	ldr	r7, [pc, #52]	; (80034b8 <SaveEEportsDir+0x4c>)
 8003482:	e007      	b.n	8003494 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003484:	2c19      	cmp	r4, #25
 8003486:	d901      	bls.n	800348c <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003488:	230a      	movs	r3, #10
 800348a:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 800348c:	7833      	ldrb	r3, [r6, #0]
 800348e:	b2ec      	uxtb	r4, r5
 8003490:	42a3      	cmp	r3, r4
 8003492:	d30b      	bcc.n	80034ac <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003494:	1e63      	subs	r3, r4, #1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	5af9      	ldrh	r1, [r7, r3]
 800349a:	1c65      	adds	r5, r4, #1
 800349c:	2900      	cmp	r1, #0
 800349e:	d0f1      	beq.n	8003484 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80034a0:	b2a8      	uxth	r0, r5
 80034a2:	f007 fa8f 	bl	800a9c4 <EE_WriteVariable>
 80034a6:	e7ed      	b.n	8003484 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	4698      	mov	r8, r3
	}
	
	return result;
}
 80034ac:	4640      	mov	r0, r8
 80034ae:	bc04      	pop	{r2}
 80034b0:	4690      	mov	r8, r2
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	20000008 	.word	0x20000008
 80034b8:	20006d44 	.word	0x20006d44

080034bc <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80034bc:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 80034be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c0:	4646      	mov	r6, r8
 80034c2:	46d6      	mov	lr, sl
 80034c4:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 80034c6:	4698      	mov	r8, r3
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80034ca:	b5c0      	push	{r6, r7, lr}
 80034cc:	4699      	mov	r9, r3
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034d0:	2600      	movs	r6, #0
 80034d2:	469a      	mov	sl, r3
 80034d4:	e005      	b.n	80034e2 <SaveEEalias+0x26>
 80034d6:	4653      	mov	r3, sl
 80034d8:	3601      	adds	r6, #1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2f6      	uxtb	r6, r6
 80034de:	42b3      	cmp	r3, r6
 80034e0:	d325      	bcc.n	800352e <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 80034e2:	464b      	mov	r3, r9
 80034e4:	00b4      	lsls	r4, r6, #2
 80034e6:	19a4      	adds	r4, r4, r6
 80034e8:	0064      	lsls	r4, r4, #1
 80034ea:	5d1b      	ldrb	r3, [r3, r4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f2      	beq.n	80034d6 <SaveEEalias+0x1a>
 80034f0:	4645      	mov	r5, r8
 80034f2:	4647      	mov	r7, r8
 80034f4:	351c      	adds	r5, #28
 80034f6:	3721      	adds	r7, #33	; 0x21
 80034f8:	444c      	add	r4, r9
 80034fa:	b2ad      	uxth	r5, r5
 80034fc:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034fe:	7861      	ldrb	r1, [r4, #1]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003504:	0028      	movs	r0, r5
 8003506:	3501      	adds	r5, #1
 8003508:	b289      	uxth	r1, r1
 800350a:	b2ad      	uxth	r5, r5
 800350c:	f007 fa5a 	bl	800a9c4 <EE_WriteVariable>
 8003510:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003512:	42bd      	cmp	r5, r7
 8003514:	d001      	beq.n	800351a <SaveEEalias+0x5e>
 8003516:	7823      	ldrb	r3, [r4, #0]
 8003518:	e7f1      	b.n	80034fe <SaveEEalias+0x42>
 800351a:	4643      	mov	r3, r8
 800351c:	3305      	adds	r3, #5
 800351e:	b29b      	uxth	r3, r3
 8003520:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003522:	4653      	mov	r3, sl
 8003524:	3601      	adds	r6, #1
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2f6      	uxtb	r6, r6
 800352a:	42b3      	cmp	r3, r6
 800352c:	d2d9      	bcs.n	80034e2 <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 800352e:	2000      	movs	r0, #0
 8003530:	bc1c      	pop	{r2, r3, r4}
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	46a2      	mov	sl, r4
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000dc4 	.word	0x20000dc4
 8003540:	20000008 	.word	0x20000008

08003544 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	46de      	mov	lr, fp
 8003548:	4657      	mov	r7, sl
 800354a:	464e      	mov	r6, r9
 800354c:	4645      	mov	r5, r8
 800354e:	468b      	mov	fp, r1
 8003550:	b5e0      	push	{r5, r6, r7, lr}
 8003552:	001e      	movs	r6, r3
 8003554:	ab0a      	add	r3, sp, #40	; 0x28
 8003556:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003558:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800355a:	469a      	mov	sl, r3
 800355c:	ab0b      	add	r3, sp, #44	; 0x2c
 800355e:	781d      	ldrb	r5, [r3, #0]
 8003560:	ab0c      	add	r3, sp, #48	; 0x30
 8003562:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003564:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003566:	4698      	mov	r8, r3
 8003568:	ab0d      	add	r3, sp, #52	; 0x34
 800356a:	781c      	ldrb	r4, [r3, #0]
 800356c:	ab0e      	add	r3, sp, #56	; 0x38
 800356e:	4691      	mov	r9, r2
 8003570:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003572:	f007 fa27 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003576:	465b      	mov	r3, fp
 8003578:	0a19      	lsrs	r1, r3, #8
 800357a:	b289      	uxth	r1, r1
 800357c:	20e5      	movs	r0, #229	; 0xe5
 800357e:	f007 fa21 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003582:	465b      	mov	r3, fp
 8003584:	20e6      	movs	r0, #230	; 0xe6
 8003586:	b299      	uxth	r1, r3
 8003588:	f007 fa1c 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800358c:	464b      	mov	r3, r9
 800358e:	0a19      	lsrs	r1, r3, #8
 8003590:	b289      	uxth	r1, r1
 8003592:	20e7      	movs	r0, #231	; 0xe7
 8003594:	f007 fa16 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003598:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359a:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800359c:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800359e:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a0:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a2:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035a4:	f007 fa0e 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035a8:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035aa:	b2b1      	uxth	r1, r6
 80035ac:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035ae:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035b0:	f007 fa08 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035b4:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035b6:	b2a9      	uxth	r1, r5
 80035b8:	20ea      	movs	r0, #234	; 0xea
 80035ba:	f007 fa03 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035be:	b2a1      	uxth	r1, r4
 80035c0:	20eb      	movs	r0, #235	; 0xeb
 80035c2:	f007 f9ff 	bl	800a9c4 <EE_WriteVariable>
	
	return result;
}
 80035c6:	2000      	movs	r0, #0
 80035c8:	bc3c      	pop	{r2, r3, r4, r5}
 80035ca:	4690      	mov	r8, r2
 80035cc:	4699      	mov	r9, r3
 80035ce:	46a2      	mov	sl, r4
 80035d0:	46ab      	mov	fp, r5
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035d4 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d4:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 80035d6:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035d8:	4c1e      	ldr	r4, [pc, #120]	; (8003654 <SaveEEparams+0x80>)
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	7863      	ldrb	r3, [r4, #1]
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	4319      	orrs	r1, r3
 80035e4:	f007 f9ee 	bl	800a9c4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035e8:	208e      	movs	r0, #142	; 0x8e
 80035ea:	7921      	ldrb	r1, [r4, #4]
 80035ec:	88e3      	ldrh	r3, [r4, #6]
 80035ee:	03c9      	lsls	r1, r1, #15
 80035f0:	4319      	orrs	r1, r3
 80035f2:	b289      	uxth	r1, r1
 80035f4:	0040      	lsls	r0, r0, #1
 80035f6:	f007 f9e5 	bl	800a9c4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035fa:	2016      	movs	r0, #22
 80035fc:	4c16      	ldr	r4, [pc, #88]	; (8003658 <SaveEEparams+0x84>)
 80035fe:	30ff      	adds	r0, #255	; 0xff
 8003600:	8821      	ldrh	r1, [r4, #0]
 8003602:	f007 f9df 	bl	800a9c4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003606:	208b      	movs	r0, #139	; 0x8b
 8003608:	8861      	ldrh	r1, [r4, #2]
 800360a:	0040      	lsls	r0, r0, #1
 800360c:	f007 f9da 	bl	800a9c4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003610:	2018      	movs	r0, #24
 8003612:	7963      	ldrb	r3, [r4, #5]
 8003614:	7b21      	ldrb	r1, [r4, #12]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4319      	orrs	r1, r3
 800361a:	30ff      	adds	r0, #255	; 0xff
 800361c:	f007 f9d2 	bl	800a9c4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003620:	208c      	movs	r0, #140	; 0x8c
 8003622:	8921      	ldrh	r1, [r4, #8]
 8003624:	0040      	lsls	r0, r0, #1
 8003626:	f007 f9cd 	bl	800a9c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800362a:	201a      	movs	r0, #26
 800362c:	8961      	ldrh	r1, [r4, #10]
 800362e:	30ff      	adds	r0, #255	; 0xff
 8003630:	f007 f9c8 	bl	800a9c4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003634:	208d      	movs	r0, #141	; 0x8d
 8003636:	7b63      	ldrb	r3, [r4, #13]
 8003638:	7921      	ldrb	r1, [r4, #4]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4319      	orrs	r1, r3
 800363e:	0040      	lsls	r0, r0, #1
 8003640:	f007 f9c0 	bl	800a9c4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003644:	201c      	movs	r0, #28
 8003646:	7ea1      	ldrb	r1, [r4, #26]
 8003648:	30ff      	adds	r0, #255	; 0xff
 800364a:	f007 f9bb 	bl	800a9c4 <EE_WriteVariable>
	
	return result;
}
 800364e:	2000      	movs	r0, #0
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	200067c4 	.word	0x200067c4
 8003658:	20006844 	.word	0x20006844

0800365c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003660:	4f12      	ldr	r7, [pc, #72]	; (80036ac <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 8003662:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003664:	2234      	movs	r2, #52	; 0x34
 8003666:	2100      	movs	r1, #0
 8003668:	0038      	movs	r0, r7
 800366a:	f00e fe5d 	bl	8012328 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800366e:	4e10      	ldr	r6, [pc, #64]	; (80036b0 <ClearEEportsDir+0x54>)
 8003670:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 8003672:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003678:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 800367a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800367c:	4698      	mov	r8, r3
 800367e:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003680:	2c19      	cmp	r4, #25
 8003682:	d901      	bls.n	8003688 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003684:	230a      	movs	r3, #10
 8003686:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003688:	7833      	ldrb	r3, [r6, #0]
 800368a:	b2ec      	uxtb	r4, r5
 800368c:	42a3      	cmp	r3, r4
 800368e:	d309      	bcc.n	80036a4 <ClearEEportsDir+0x48>
 8003690:	1e63      	subs	r3, r4, #1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003696:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003698:	2900      	cmp	r1, #0
 800369a:	d0f1      	beq.n	8003680 <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800369c:	b2a8      	uxth	r0, r5
 800369e:	f007 f991 	bl	800a9c4 <EE_WriteVariable>
 80036a2:	e7ed      	b.n	8003680 <ClearEEportsDir+0x24>
	}
	
	return result;
}
 80036a4:	4640      	mov	r0, r8
 80036a6:	bc04      	pop	{r2}
 80036a8:	4690      	mov	r8, r2
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ac:	20006d44 	.word	0x20006d44
 80036b0:	20000008 	.word	0x20000008

080036b4 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036b4:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 80036b6:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 80036ba:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036bc:	ad03      	add	r5, sp, #12
 80036be:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036c0:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	002a      	movs	r2, r5
 80036c6:	ab06      	add	r3, sp, #24
 80036c8:	a905      	add	r1, sp, #20
 80036ca:	2001      	movs	r0, #1
 80036cc:	f007 fc18 	bl	800af00 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036d0:	aa04      	add	r2, sp, #16
 80036d2:	ab08      	add	r3, sp, #32
 80036d4:	a907      	add	r1, sp, #28
 80036d6:	9400      	str	r4, [sp, #0]
 80036d8:	2002      	movs	r0, #2
 80036da:	f007 fc11 	bl	800af00 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036e4:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036e6:	a909      	add	r1, sp, #36	; 0x24
 80036e8:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036ea:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036ee:	f00c fd71 	bl	80101d4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f2:	2302      	movs	r3, #2
 80036f4:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036f6:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036f8:	a909      	add	r1, sp, #36	; 0x24
 80036fa:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003700:	f00c fd68 	bl	80101d4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003704:	8829      	ldrh	r1, [r5, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	9805      	ldr	r0, [sp, #20]
 800370a:	f00c ff03 	bl	8010514 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800370e:	2005      	movs	r0, #5
 8003710:	f009 f864 	bl	800c7dc <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003714:	8821      	ldrh	r1, [r4, #0]
 8003716:	9808      	ldr	r0, [sp, #32]
 8003718:	f00c fef6 	bl	8010508 <HAL_GPIO_ReadPin>
 800371c:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800371e:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003724:	8829      	ldrh	r1, [r5, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	9805      	ldr	r0, [sp, #20]
 800372a:	f00c fef3 	bl	8010514 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800372e:	2005      	movs	r0, #5
 8003730:	f009 f854 	bl	800c7dc <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003734:	8821      	ldrh	r1, [r4, #0]
 8003736:	9808      	ldr	r0, [sp, #32]
 8003738:	f00c fee6 	bl	8010508 <HAL_GPIO_ReadPin>
 800373c:	3801      	subs	r0, #1
 800373e:	4243      	negs	r3, r0
 8003740:	4158      	adcs	r0, r3
			return 1;
 8003742:	b2c0      	uxtb	r0, r0
}
 8003744:	b00e      	add	sp, #56	; 0x38
 8003746:	bd70      	pop	{r4, r5, r6, pc}

08003748 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 800374a:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	f7fc fcd9 	bl	8000104 <strcmp>
 8003752:	4243      	negs	r3, r0
 8003754:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 8003756:	b2c0      	uxtb	r0, r0
 8003758:	bd10      	pop	{r4, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000094 	.word	0x20000094

08003760 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	46de      	mov	lr, fp
 8003764:	4657      	mov	r7, sl
 8003766:	464e      	mov	r6, r9
 8003768:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800376a:	4923      	ldr	r1, [pc, #140]	; (80037f8 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 800376c:	b5e0      	push	{r5, r6, r7, lr}
 800376e:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003770:	f7fc fcc8 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 8003776:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003778:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 800377c:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 800377e:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 8003782:	4f21      	ldr	r7, [pc, #132]	; (8003808 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 8003784:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <IsMathOperator+0xac>)
 8003788:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 800378a:	2e00      	cmp	r6, #0
 800378c:	d028      	beq.n	80037e0 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 800378e:	0039      	movs	r1, r7
 8003790:	0020      	movs	r0, r4
 8003792:	f7fc fcb7 	bl	8000104 <strcmp>
 8003796:	2800      	cmp	r0, #0
 8003798:	d024      	beq.n	80037e4 <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 800379a:	4641      	mov	r1, r8
 800379c:	0020      	movs	r0, r4
 800379e:	f7fc fcb1 	bl	8000104 <strcmp>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d020      	beq.n	80037e8 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 80037a6:	4649      	mov	r1, r9
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fc fcab 	bl	8000104 <strcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d01c      	beq.n	80037ec <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 80037b2:	4651      	mov	r1, sl
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7fc fca5 	bl	8000104 <strcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d018      	beq.n	80037f0 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 80037be:	4659      	mov	r1, fp
 80037c0:	0020      	movs	r0, r4
 80037c2:	f7fc fc9f 	bl	8000104 <strcmp>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d014      	beq.n	80037f4 <IsMathOperator+0x94>
 80037ca:	3d01      	subs	r5, #1
 80037cc:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	d1db      	bne.n	800378a <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037d2:	2000      	movs	r0, #0
}
 80037d4:	bc3c      	pop	{r2, r3, r4, r5}
 80037d6:	4690      	mov	r8, r2
 80037d8:	4699      	mov	r9, r3
 80037da:	46a2      	mov	sl, r4
 80037dc:	46ab      	mov	fp, r5
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037e0:	2001      	movs	r0, #1
 80037e2:	e7f7      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER;
 80037e4:	2002      	movs	r0, #2
 80037e6:	e7f5      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037e8:	2003      	movs	r0, #3
 80037ea:	e7f3      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037ec:	2004      	movs	r0, #4
 80037ee:	e7f1      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037f0:	2005      	movs	r0, #5
 80037f2:	e7ef      	b.n	80037d4 <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037f4:	2006      	movs	r0, #6
 80037f6:	e7ed      	b.n	80037d4 <IsMathOperator+0x74>
 80037f8:	080171e8 	.word	0x080171e8
 80037fc:	080171f0 	.word	0x080171f0
 8003800:	080171f4 	.word	0x080171f4
 8003804:	080171f8 	.word	0x080171f8
 8003808:	080171ec 	.word	0x080171ec
 800380c:	080171fc 	.word	0x080171fc

08003810 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003810:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003812:	f008 fe97 	bl	800c544 <RTC_Init>
	GetTimeDate();
 8003816:	f008 ff3b 	bl	800c690 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800381a:	f007 f9b9 	bl	800ab90 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 800381e:	f007 fb27 	bl	800ae70 <GPIO_Init>
	DMA_Init();
 8003822:	f006 fa71 	bl	8009d08 <DMA_Init>
	TIM_USEC_Init();
 8003826:	f008 ff65 	bl	800c6f4 <TIM_USEC_Init>
	CRC_Init();
 800382a:	f006 ffd1 	bl	800a7d0 <CRC_Init>
	TIM_MSEC_Init();
 800382e:	f008 ff93 	bl	800c758 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003832:	f007 fbd3 	bl	800afdc <IsFactoryReset>
 8003836:	2800      	cmp	r0, #0
 8003838:	d15e      	bne.n	80038f8 <BOS_Init+0xe8>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800383a:	f7ff ff3b 	bl	80036b4 <IsLowerCLIbaud>
 800383e:	2800      	cmp	r0, #0
 8003840:	d04e      	beq.n	80038e0 <BOS_Init+0xd0>
		CLI_LOW_Baudrate_Flag =1;
 8003842:	2322      	movs	r3, #34	; 0x22
 8003844:	2201      	movs	r2, #1
 8003846:	4e36      	ldr	r6, [pc, #216]	; (8003920 <BOS_Init+0x110>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003848:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800384a:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 800384c:	54f2      	strb	r2, [r6, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800384e:	f008 ffc5 	bl	800c7dc <StartMilliDelay>
		Module_Peripheral_Init();
 8003852:	f006 fa0b 	bl	8009c6c <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003856:	21e1      	movs	r1, #225	; 0xe1
 8003858:	4d32      	ldr	r5, [pc, #200]	; (8003924 <BOS_Init+0x114>)
			UpdateBaudrate(port,BOS.clibaudrate);
 800385a:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800385c:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800385e:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003860:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003862:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8003864:	f009 fa26 	bl	800ccb4 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003868:	2c06      	cmp	r4, #6
 800386a:	d007      	beq.n	800387c <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 800386c:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800386e:	3401      	adds	r4, #1
 8003870:	68a9      	ldr	r1, [r5, #8]
 8003872:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8003874:	f009 fa1e 	bl	800ccb4 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003878:	2c06      	cmp	r4, #6
 800387a:	d1f7      	bne.n	800386c <BOS_Init+0x5c>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 800387c:	f7ff fde4 	bl	8003448 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003880:	f009 fab2 	bl	800cde8 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003884:	f006 fef8 	bl	800a678 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003888:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 800388a:	4b27      	ldr	r3, [pc, #156]	; (8003928 <BOS_Init+0x118>)
		IND_ON();
 800388c:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 800388e:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02a      	beq.n	80038ee <BOS_Init+0xde>
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003898:	f00c fe3c 	bl	8010514 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800389c:	20fa      	movs	r0, #250	; 0xfa
 800389e:	0040      	lsls	r0, r0, #1
 80038a0:	f008 ff9c 	bl	800c7dc <StartMilliDelay>
		IND_OFF();
 80038a4:	2090      	movs	r0, #144	; 0x90
 80038a6:	2200      	movs	r2, #0
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	05c0      	lsls	r0, r0, #23
 80038ac:	f00c fe32 	bl	8010514 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038b0:	2064      	movs	r0, #100	; 0x64
 80038b2:	f008 ff93 	bl	800c7dc <StartMilliDelay>
		IND_ON();
 80038b6:	2090      	movs	r0, #144	; 0x90
 80038b8:	2201      	movs	r2, #1
 80038ba:	05c0      	lsls	r0, r0, #23
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	f00c fe29 	bl	8010514 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038c2:	2064      	movs	r0, #100	; 0x64
 80038c4:	f008 ff8a 	bl	800c7dc <StartMilliDelay>
		IND_OFF();
 80038c8:	2090      	movs	r0, #144	; 0x90
 80038ca:	2200      	movs	r2, #0
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	05c0      	lsls	r0, r0, #23
 80038d0:	f00c fe20 	bl	8010514 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80038d4:	f003 fd5a 	bl	800738c <ResetUartORE>
	
	BOS_initialized =1;
 80038d8:	2323      	movs	r3, #35	; 0x23
 80038da:	2201      	movs	r2, #1
 80038dc:	54f2      	strb	r2, [r6, r3]
}
 80038de:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80038e0:	2032      	movs	r0, #50	; 0x32
 80038e2:	f008 ff7b 	bl	800c7dc <StartMilliDelay>
		Module_Peripheral_Init();
 80038e6:	f006 f9c1 	bl	8009c6c <Module_Peripheral_Init>
 80038ea:	4e0d      	ldr	r6, [pc, #52]	; (8003920 <BOS_Init+0x110>)
 80038ec:	e7c6      	b.n	800387c <BOS_Init+0x6c>
		IND_ON();
 80038ee:	f00c fe11 	bl	8010514 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80038f2:	20fa      	movs	r0, #250	; 0xfa
 80038f4:	0040      	lsls	r0, r0, #1
 80038f6:	e7e5      	b.n	80038c4 <BOS_Init+0xb4>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80038f8:	4c0c      	ldr	r4, [pc, #48]	; (800392c <BOS_Init+0x11c>)
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <BOS_Init+0x120>)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	42ab      	cmp	r3, r5
 8003900:	d004      	beq.n	800390c <BOS_Init+0xfc>
		if(EE_Format() == HAL_OK){
 8003902:	f007 f8f5 	bl	800aaf0 <EE_Format>
 8003906:	2800      	cmp	r0, #0
 8003908:	d100      	bne.n	800390c <BOS_Init+0xfc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 800390a:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800390c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <BOS_Init+0x124>)
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <BOS_Init+0x128>)
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	e7fd      	b.n	800391a <BOS_Init+0x10a>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	20000b18 	.word	0x20000b18
 8003924:	20006844 	.word	0x20006844
 8003928:	20000a98 	.word	0x20000a98
 800392c:	20007ff0 	.word	0x20007ff0
 8003930:	beefdead 	.word	0xbeefdead
 8003934:	e000ed00 	.word	0xe000ed00
 8003938:	05fa0004 	.word	0x05fa0004

0800393c <Module_Init>:
void Module_Init(void){
 800393c:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800393e:	f00b f97f 	bl	800ec40 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003942:	f005 ffb5 	bl	80098b0 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003946:	f7ff ff63 	bl	8003810 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800394a:	f003 fd3f 	bl	80073cc <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800394e:	f009 faf3 	bl	800cf38 <osKernelStart>
}
 8003952:	bd10      	pop	{r4, pc}

08003954 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003956:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003958:	4e12      	ldr	r6, [pc, #72]	; (80039a4 <ExploreNeighbors+0x50>)
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 800395c:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 800395e:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003960:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003962:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003964:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 8003966:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003968:	b082      	sub	sp, #8
		if(port != ignore){
 800396a:	42a7      	cmp	r7, r4
 800396c:	d011      	beq.n	8003992 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 800396e:	4643      	mov	r3, r8
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 8003976:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003978:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 800397a:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 800397c:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800397e:	2200      	movs	r2, #0
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2100      	movs	r1, #0
 8003984:	3307      	adds	r3, #7
 8003986:	0020      	movs	r0, r4
 8003988:	f004 f968 	bl	8007c5c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800398c:	200a      	movs	r0, #10
 800398e:	f009 fad9 	bl	800cf44 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003992:	3401      	adds	r4, #1
 8003994:	b2e4      	uxtb	r4, r4
 8003996:	2c06      	cmp	r4, #6
 8003998:	d1e7      	bne.n	800396a <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800399a:	2000      	movs	r0, #0
 800399c:	b002      	add	sp, #8
 800399e:	bc04      	pop	{r2}
 80039a0:	4690      	mov	r8, r2
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a4:	20000b18 	.word	0x20000b18
 80039a8:	20000008 	.word	0x20000008

080039ac <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	4657      	mov	r7, sl
 80039b0:	464e      	mov	r6, r9
 80039b2:	4645      	mov	r5, r8
 80039b4:	46de      	mov	lr, fp
 80039b6:	b5e0      	push	{r5, r6, r7, lr}
 80039b8:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039ba:	466a      	mov	r2, sp
 80039bc:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039be:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039c0:	781d      	ldrb	r5, [r3, #0]
 80039c2:	1deb      	adds	r3, r5, #7
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	469d      	mov	sp, r3
 80039cc:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	d00c      	beq.n	80039ec <FindBroadcastRoutes+0x40>
		modules[m] =0;
 80039d2:	2100      	movs	r1, #0
 80039d4:	1e6c      	subs	r4, r5, #1
 80039d6:	4a46      	ldr	r2, [pc, #280]	; (8003af0 <FindBroadcastRoutes+0x144>)
 80039d8:	b2e4      	uxtb	r4, r4
 80039da:	3401      	adds	r4, #1
 80039dc:	3254      	adds	r2, #84	; 0x54
 80039de:	446c      	add	r4, sp
 80039e0:	7019      	strb	r1, [r3, #0]
 80039e2:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 80039e4:	8011      	strh	r1, [r2, #0]
 80039e6:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	d1f9      	bne.n	80039e0 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 80039ec:	2301      	movs	r3, #1
 80039ee:	2216      	movs	r2, #22
 80039f0:	3801      	subs	r0, #1
 80039f2:	5433      	strb	r3, [r6, r0]
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <FindBroadcastRoutes+0x148>)
 80039f6:	4342      	muls	r2, r0
 80039f8:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <FindBroadcastRoutes+0x144>)
 80039fc:	0040      	lsls	r0, r0, #1
 80039fe:	1818      	adds	r0, r3, r0
 8003a00:	2301      	movs	r3, #1
 8003a02:	3202      	adds	r2, #2
 8003a04:	4462      	add	r2, ip
 8003a06:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a08:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 8003a0a:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a0c:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a0e:	469a      	mov	sl, r3
 8003a10:	46b3      	mov	fp, r6
 8003a12:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003a14:	8813      	ldrh	r3, [r2, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a1a:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a1c:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a1e:	46a8      	mov	r8, r5
 8003a20:	4665      	mov	r5, ip
 8003a22:	408d      	lsls	r5, r1
 8003a24:	46a9      	mov	r9, r5
 8003a26:	4645      	mov	r5, r8
 8003a28:	464e      	mov	r6, r9
 8003a2a:	4335      	orrs	r5, r6
 8003a2c:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a2e:	4655      	mov	r5, sl
 8003a30:	445b      	add	r3, fp
 8003a32:	3b01      	subs	r3, #1
 8003a34:	701d      	strb	r5, [r3, #0]
 8003a36:	3101      	adds	r1, #1
 8003a38:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003a3a:	2906      	cmp	r1, #6
 8003a3c:	d1ea      	bne.n	8003a14 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a3e:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 8003a40:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a42:	4692      	mov	sl, r2
 8003a44:	465e      	mov	r6, fp
	++level;												// Move one level
 8003a46:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a48:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <FindBroadcastRoutes+0x144>)
 8003a4a:	687d      	ldr	r5, [r7, #4]
 8003a4c:	449a      	add	sl, r3
 8003a4e:	4653      	mov	r3, sl
 8003a50:	46a8      	mov	r8, r5
 8003a52:	465d      	mov	r5, fp
 8003a54:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a56:	4643      	mov	r3, r8
		++level;											// Move one level
 8003a58:	3501      	adds	r5, #1
 8003a5a:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03b      	beq.n	8003ad8 <FindBroadcastRoutes+0x12c>
 8003a60:	1e6b      	subs	r3, r5, #1
 8003a62:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003a64:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a66:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a68:	469c      	mov	ip, r3
 8003a6a:	46ab      	mov	fp, r5
 8003a6c:	e003      	b.n	8003a76 <FindBroadcastRoutes+0xca>
 8003a6e:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a70:	b2d3      	uxtb	r3, r2
 8003a72:	4598      	cmp	r8, r3
 8003a74:	d92c      	bls.n	8003ad0 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a76:	5cb3      	ldrb	r3, [r6, r2]
 8003a78:	454b      	cmp	r3, r9
 8003a7a:	d1f8      	bne.n	8003a6e <FindBroadcastRoutes+0xc2>
 8003a7c:	2116      	movs	r1, #22
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <FindBroadcastRoutes+0x14c>)
 8003a80:	4351      	muls	r1, r2
 8003a82:	469a      	mov	sl, r3
 8003a84:	2000      	movs	r0, #0
 8003a86:	4451      	add	r1, sl
 8003a88:	46e2      	mov	sl, ip
 8003a8a:	4694      	mov	ip, r2
 8003a8c:	0055      	lsls	r5, r2, #1
 8003a8e:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a90:	880b      	ldrh	r3, [r1, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <FindBroadcastRoutes+0x110>
 8003a96:	08db      	lsrs	r3, r3, #3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	5cf2      	ldrb	r2, [r6, r3]
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	d10d      	bne.n	8003abc <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003aa0:	683c      	ldr	r4, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	5b15      	ldrh	r5, [r2, r4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4082      	lsls	r2, r0
 8003aaa:	4315      	orrs	r5, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003ab0:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ab2:	465a      	mov	r2, fp
						++untaged;
 8003ab4:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ab6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ab8:	b2e3      	uxtb	r3, r4
 8003aba:	469a      	mov	sl, r3
 8003abc:	3001      	adds	r0, #1
 8003abe:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003ac0:	2806      	cmp	r0, #6
 8003ac2:	d1e5      	bne.n	8003a90 <FindBroadcastRoutes+0xe4>
 8003ac4:	4662      	mov	r2, ip
 8003ac6:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003ac8:	b2d3      	uxtb	r3, r2
 8003aca:	46d4      	mov	ip, sl
 8003acc:	4598      	cmp	r8, r3
 8003ace:	d8d2      	bhi.n	8003a76 <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003ad0:	4663      	mov	r3, ip
 8003ad2:	465d      	mov	r5, fp
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1be      	bne.n	8003a56 <FindBroadcastRoutes+0xaa>
	
	return result;
}
 8003ad8:	2000      	movs	r0, #0
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b003      	add	sp, #12
 8003ade:	bc3c      	pop	{r2, r3, r4, r5}
 8003ae0:	4690      	mov	r8, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	46a2      	mov	sl, r4
 8003ae6:	46ab      	mov	fp, r5
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	20000008 	.word	0x20000008
 8003af0:	20000b18 	.word	0x20000b18
 8003af4:	20000ed4 	.word	0x20000ed4
 8003af8:	20000ed6 	.word	0x20000ed6

08003afc <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afe:	46de      	mov	lr, fp
 8003b00:	464e      	mov	r6, r9
 8003b02:	4645      	mov	r5, r8
 8003b04:	4657      	mov	r7, sl
 8003b06:	b5e0      	push	{r5, r6, r7, lr}
 8003b08:	b091      	sub	sp, #68	; 0x44
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b0a:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b0c:	0005      	movs	r5, r0
 8003b0e:	000e      	movs	r6, r1
 8003b10:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b12:	2232      	movs	r2, #50	; 0x32
 8003b14:	2100      	movs	r1, #0
 8003b16:	0020      	movs	r0, r4
 8003b18:	f00e fc06 	bl	8012328 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003b1c:	221a      	movs	r2, #26
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4862      	ldr	r0, [pc, #392]	; (8003cac <FindRoute+0x1b0>)
 8003b22:	f00e fc01 	bl	8012328 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b26:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b28:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <FindRoute+0x1b4>)
 8003b2c:	1e6a      	subs	r2, r5, #1
 8003b2e:	469c      	mov	ip, r3
 8003b30:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b32:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b34:	7219      	strb	r1, [r3, #8]
 8003b36:	2316      	movs	r3, #22
 8003b38:	4353      	muls	r3, r2
 8003b3a:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <FindRoute+0x1b8>)
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	4693      	mov	fp, r2
 8003b40:	445b      	add	r3, fp
 8003b42:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b44:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003b46:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b48:	b2b1      	uxth	r1, r6
 8003b4a:	8813      	ldrh	r3, [r2, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <FindRoute+0x5c>
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	428b      	cmp	r3, r1
 8003b54:	d100      	bne.n	8003b58 <FindRoute+0x5c>
 8003b56:	e099      	b.n	8003c8c <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 8003b58:	3001      	adds	r0, #1
 8003b5a:	3202      	adds	r2, #2
 8003b5c:	2807      	cmp	r0, #7
 8003b5e:	d1f4      	bne.n	8003b4a <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003b60:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <FindRoute+0x1bc>)
 8003b62:	7819      	ldrb	r1, [r3, #0]
 8003b64:	2301      	movs	r3, #1
 8003b66:	2900      	cmp	r1, #0
 8003b68:	d100      	bne.n	8003b6c <FindRoute+0x70>
 8003b6a:	e09a      	b.n	8003ca2 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	4462      	add	r2, ip
 8003b70:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b72:	2200      	movs	r2, #0
 8003b74:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b76:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b78:	4692      	mov	sl, r2
 8003b7a:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b7c:	429d      	cmp	r5, r3
 8003b7e:	d005      	beq.n	8003b8c <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b80:	4640      	mov	r0, r8
 8003b82:	1e5a      	subs	r2, r3, #1
 8003b84:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b86:	4650      	mov	r0, sl
 8003b88:	18b2      	adds	r2, r6, r2
 8003b8a:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	428b      	cmp	r3, r1
 8003b90:	ddf4      	ble.n	8003b7c <FindRoute+0x80>
 8003b92:	2308      	movs	r3, #8
 8003b94:	4463      	add	r3, ip
	uint8_t u =0;
 8003b96:	2500      	movs	r5, #0
 8003b98:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003b9a:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003b9c:	2300      	movs	r3, #0
		temp &=Q[i];
 8003b9e:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003ba0:	3301      	adds	r3, #1
		temp &=Q[i];
 8003ba2:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	dbfa      	blt.n	8003b9e <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003ba8:	2a00      	cmp	r2, #0
 8003baa:	d000      	beq.n	8003bae <FindRoute+0xb2>
 8003bac:	e07c      	b.n	8003ca8 <FindRoute+0x1ac>
 8003bae:	4663      	mov	r3, ip
 8003bb0:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003bb2:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003bb4:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d000      	beq.n	8003bbc <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003bba:	20ff      	movs	r0, #255	; 0xff
 8003bbc:	2500      	movs	r5, #0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e001      	b.n	8003bc6 <FindRoute+0xca>
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003bc6:	4290      	cmp	r0, r2
 8003bc8:	d904      	bls.n	8003bd4 <FindRoute+0xd8>
 8003bca:	5ce6      	ldrb	r6, [r4, r3]
 8003bcc:	2e00      	cmp	r6, #0
 8003bce:	d101      	bne.n	8003bd4 <FindRoute+0xd8>
			index =i;
 8003bd0:	0010      	movs	r0, r2
 8003bd2:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	428b      	cmp	r3, r1
 8003bd8:	dbf3      	blt.n	8003bc2 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003bda:	3501      	adds	r5, #1
		if(u == desID){
 8003bdc:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003bde:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003be0:	429d      	cmp	r5, r3
 8003be2:	d023      	beq.n	8003c2c <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003be4:	2301      	movs	r3, #1
 8003be6:	1e6f      	subs	r7, r5, #1
 8003be8:	55e3      	strb	r3, [r4, r7]
 8003bea:	2316      	movs	r3, #22
 8003bec:	465e      	mov	r6, fp
 8003bee:	437b      	muls	r3, r7
 8003bf0:	360e      	adds	r6, #14
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	445a      	add	r2, fp
 8003bf6:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bf8:	4467      	add	r7, ip
 8003bfa:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003bfc:	8813      	ldrh	r3, [r2, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00f      	beq.n	8003c22 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003c02:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	5ce0      	ldrb	r0, [r4, r3]
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d109      	bne.n	8003c22 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c0e:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c10:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c12:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c14:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c16:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c18:	4281      	cmp	r1, r0
 8003c1a:	d902      	bls.n	8003c22 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003c1c:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003c1e:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003c20:	545d      	strb	r5, [r3, r1]
 8003c22:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003c24:	42b2      	cmp	r2, r6
 8003c26:	d1e9      	bne.n	8003bfc <FindRoute+0x100>
 8003c28:	9900      	ldr	r1, [sp, #0]
 8003c2a:	e7b6      	b.n	8003b9a <FindRoute+0x9e>
 8003c2c:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	4463      	add	r3, ip
 8003c32:	5c9a      	ldrb	r2, [r3, r2]
 8003c34:	2300      	movs	r3, #0
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	d101      	bne.n	8003c3e <FindRoute+0x142>
 8003c3a:	e00b      	b.n	8003c54 <FindRoute+0x158>
 8003c3c:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003c3e:	491b      	ldr	r1, [pc, #108]	; (8003cac <FindRoute+0x1b0>)
 8003c40:	1c58      	adds	r0, r3, #1
 8003c42:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c44:	4663      	mov	r3, ip
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	3323      	adds	r3, #35	; 0x23
 8003c4a:	7819      	ldrb	r1, [r3, #0]
 8003c4c:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c4e:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c50:	2900      	cmp	r1, #0
 8003c52:	d1f3      	bne.n	8003c3c <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003c54:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c56:	464c      	mov	r4, r9
 8003c58:	9b01      	ldr	r3, [sp, #4]
 8003c5a:	4463      	add	r3, ip
 8003c5c:	8822      	ldrh	r2, [r4, #0]
 8003c5e:	2a00      	cmp	r2, #0
 8003c60:	d008      	beq.n	8003c74 <FindRoute+0x178>
 8003c62:	4d12      	ldr	r5, [pc, #72]	; (8003cac <FindRoute+0x1b0>)
 8003c64:	79d9      	ldrb	r1, [r3, #7]
 8003c66:	46ac      	mov	ip, r5
 8003c68:	4461      	add	r1, ip
 8003c6a:	3901      	subs	r1, #1
 8003c6c:	7809      	ldrb	r1, [r1, #0]
 8003c6e:	08d2      	lsrs	r2, r2, #3
 8003c70:	4291      	cmp	r1, r2
 8003c72:	d014      	beq.n	8003c9e <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003c74:	3001      	adds	r0, #1
 8003c76:	3402      	adds	r4, #2
 8003c78:	2807      	cmp	r0, #7
 8003c7a:	d1ef      	bne.n	8003c5c <FindRoute+0x160>
	return 0;
 8003c7c:	2000      	movs	r0, #0
}
 8003c7e:	b011      	add	sp, #68	; 0x44
 8003c80:	bc3c      	pop	{r2, r3, r4, r5}
 8003c82:	4690      	mov	r8, r2
 8003c84:	4699      	mov	r9, r3
 8003c86:	46a2      	mov	sl, r4
 8003c88:	46ab      	mov	fp, r5
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003c8c:	9901      	ldr	r1, [sp, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	000b      	movs	r3, r1
 8003c92:	4463      	add	r3, ip
 8003c94:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <FindRoute+0x1b0>)
			return col;
 8003c98:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003c9a:	7019      	strb	r1, [r3, #0]
			return col;
 8003c9c:	e7ef      	b.n	8003c7e <FindRoute+0x182>
			return col;
 8003c9e:	b2c0      	uxtb	r0, r0
 8003ca0:	e7ed      	b.n	8003c7e <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003ca2:	425b      	negs	r3, r3
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	e7c2      	b.n	8003c2e <FindRoute+0x132>
 8003ca8:	1e6b      	subs	r3, r5, #1
 8003caa:	e7c0      	b.n	8003c2e <FindRoute+0x132>
 8003cac:	2000690c 	.word	0x2000690c
 8003cb0:	20000b98 	.word	0x20000b98
 8003cb4:	20000ed4 	.word	0x20000ed4
 8003cb8:	20000008 	.word	0x20000008

08003cbc <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cbc:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 8003cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc0:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003cc2:	4645      	mov	r5, r8
 8003cc4:	464e      	mov	r6, r9
 8003cc6:	46de      	mov	lr, fp
 8003cc8:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cca:	3440      	adds	r4, #64	; 0x40
 8003ccc:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003cce:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd0:	4698      	mov	r8, r3
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003cd4:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cd6:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003cd8:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cda:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cdc:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003cde:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce0:	6011      	str	r1, [r2, #0]
 8003ce2:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ce4:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ce6:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ce8:	0021      	movs	r1, r4
 8003cea:	2332      	movs	r3, #50	; 0x32
 8003cec:	9500      	str	r5, [sp, #0]
 8003cee:	2211      	movs	r2, #17
 8003cf0:	0038      	movs	r0, r7
 8003cf2:	f008 ff8d 	bl	800cc10 <writePxMutex>
 8003cf6:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <DisplayTopology+0x178>)
 8003cf8:	2601      	movs	r6, #1
 8003cfa:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003cfc:	0032      	movs	r2, r6
 8003cfe:	4649      	mov	r1, r9
 8003d00:	0020      	movs	r0, r4
 8003d02:	f00e fd0b 	bl	801271c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d06:	0020      	movs	r0, r4
 8003d08:	f7fc fa06 	bl	8000118 <strlen>
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	b282      	uxth	r2, r0
 8003d10:	9500      	str	r5, [sp, #0]
 8003d12:	2332      	movs	r3, #50	; 0x32
 8003d14:	0021      	movs	r1, r4
 8003d16:	0038      	movs	r0, r7
 8003d18:	f008 ff7a 	bl	800cc10 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d1c:	2e06      	cmp	r6, #6
 8003d1e:	d1ed      	bne.n	8003cfc <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d20:	2332      	movs	r3, #50	; 0x32
 8003d22:	9500      	str	r5, [sp, #0]
 8003d24:	2203      	movs	r2, #3
 8003d26:	4944      	ldr	r1, [pc, #272]	; (8003e38 <DisplayTopology+0x17c>)
 8003d28:	0038      	movs	r0, r7
 8003d2a:	f008 ff71 	bl	800cc10 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <DisplayTopology+0x180>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d061      	beq.n	8003dfa <DisplayTopology+0x13e>
 8003d36:	4b42      	ldr	r3, [pc, #264]	; (8003e40 <DisplayTopology+0x184>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d38:	4645      	mov	r5, r8
 8003d3a:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	425b      	negs	r3, r3
 8003d40:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d42:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003d44:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d46:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d48:	3540      	adds	r5, #64	; 0x40
 8003d4a:	1c63      	adds	r3, r4, #1
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	493e      	ldr	r1, [pc, #248]	; (8003e48 <DisplayTopology+0x18c>)
 8003d50:	0028      	movs	r0, r5
 8003d52:	469a      	mov	sl, r3
 8003d54:	f00e fce2 	bl	801271c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d58:	0028      	movs	r0, r5
 8003d5a:	f7fc f9dd 	bl	8000118 <strlen>
 8003d5e:	4643      	mov	r3, r8
 8003d60:	b282      	uxth	r2, r0
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	0029      	movs	r1, r5
 8003d66:	2332      	movs	r3, #50	; 0x32
 8003d68:	0038      	movs	r0, r7
 8003d6a:	f008 ff51 	bl	800cc10 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d6e:	2316      	movs	r3, #22
 8003d70:	435c      	muls	r4, r3
 8003d72:	464b      	mov	r3, r9
 8003d74:	5b1b      	ldrh	r3, [r3, r4]
 8003d76:	2205      	movs	r2, #5
 8003d78:	0059      	lsls	r1, r3, #1
 8003d7a:	18c9      	adds	r1, r1, r3
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <DisplayTopology+0x190>)
 8003d7e:	0049      	lsls	r1, r1, #1
 8003d80:	469c      	mov	ip, r3
 8003d82:	0028      	movs	r0, r5
 8003d84:	4461      	add	r1, ip
 8003d86:	f00e fd1e 	bl	80127c6 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d8a:	4643      	mov	r3, r8
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	0029      	movs	r1, r5
 8003d92:	2332      	movs	r3, #50	; 0x32
 8003d94:	0038      	movs	r0, r7
 8003d96:	f008 ff3b 	bl	800cc10 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d9a:	4643      	mov	r3, r8
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	492b      	ldr	r1, [pc, #172]	; (8003e50 <DisplayTopology+0x194>)
 8003da2:	2332      	movs	r3, #50	; 0x32
 8003da4:	0038      	movs	r0, r7
 8003da6:	f008 ff33 	bl	800cc10 <writePxMutex>
 8003daa:	464b      	mov	r3, r9
 8003dac:	1ca6      	adds	r6, r4, #2
 8003dae:	330c      	adds	r3, #12
 8003db0:	444e      	add	r6, r9
 8003db2:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003db4:	8832      	ldrh	r2, [r6, #0]
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	d12f      	bne.n	8003e1a <DisplayTopology+0x15e>
				sprintf(pcUserMessage,"%d\t",0);
 8003dba:	4926      	ldr	r1, [pc, #152]	; (8003e54 <DisplayTopology+0x198>)
 8003dbc:	0028      	movs	r0, r5
 8003dbe:	f00e fcad 	bl	801271c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dc2:	0028      	movs	r0, r5
 8003dc4:	f7fc f9a8 	bl	8000118 <strlen>
 8003dc8:	4643      	mov	r3, r8
 8003dca:	b282      	uxth	r2, r0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	0029      	movs	r1, r5
 8003dd0:	2332      	movs	r3, #50	; 0x32
 8003dd2:	0038      	movs	r0, r7
 8003dd4:	3602      	adds	r6, #2
 8003dd6:	f008 ff1b 	bl	800cc10 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003dda:	42a6      	cmp	r6, r4
 8003ddc:	d1ea      	bne.n	8003db4 <DisplayTopology+0xf8>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003dde:	4643      	mov	r3, r8
 8003de0:	2202      	movs	r2, #2
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	491c      	ldr	r1, [pc, #112]	; (8003e58 <DisplayTopology+0x19c>)
 8003de6:	2332      	movs	r3, #50	; 0x32
 8003de8:	0038      	movs	r0, r7
 8003dea:	f008 ff11 	bl	800cc10 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003dee:	4653      	mov	r3, sl
 8003df0:	b2dc      	uxtb	r4, r3
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <DisplayTopology+0x180>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	42a3      	cmp	r3, r4
 8003df8:	d8a7      	bhi.n	8003d4a <DisplayTopology+0x8e>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	3333      	adds	r3, #51	; 0x33
 8003e04:	4915      	ldr	r1, [pc, #84]	; (8003e5c <DisplayTopology+0x1a0>)
 8003e06:	0038      	movs	r0, r7
 8003e08:	f008 ff02 	bl	800cc10 <writePxMutex>
}
 8003e0c:	b003      	add	sp, #12
 8003e0e:	bc3c      	pop	{r2, r3, r4, r5}
 8003e10:	4690      	mov	r8, r2
 8003e12:	4699      	mov	r9, r3
 8003e14:	46a2      	mov	sl, r4
 8003e16:	46ab      	mov	fp, r5
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e1a:	2307      	movs	r3, #7
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	4013      	ands	r3, r2
 8003e20:	0028      	movs	r0, r5
 8003e22:	08d2      	lsrs	r2, r2, #3
 8003e24:	f00e fc7a 	bl	801271c <sprintf>
 8003e28:	e7cb      	b.n	8003dc2 <DisplayTopology+0x106>
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	20000b98 	.word	0x20000b98
 8003e30:	08017200 	.word	0x08017200
 8003e34:	08017214 	.word	0x08017214
 8003e38:	080180a0 	.word	0x080180a0
 8003e3c:	20000008 	.word	0x20000008
 8003e40:	20000ed4 	.word	0x20000ed4
 8003e44:	0801722c 	.word	0x0801722c
 8003e48:	0801721c 	.word	0x0801721c
 8003e4c:	08016b6c 	.word	0x08016b6c
 8003e50:	08017210 	.word	0x08017210
 8003e54:	08017228 	.word	0x08017228
 8003e58:	08017338 	.word	0x08017338
 8003e5c:	08018b14 	.word	0x08018b14

08003e60 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	4645      	mov	r5, r8
 8003e64:	46de      	mov	lr, fp
 8003e66:	4657      	mov	r7, sl
 8003e68:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e6a:	4934      	ldr	r1, [pc, #208]	; (8003f3c <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e6c:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e6e:	3140      	adds	r1, #64	; 0x40
 8003e70:	000a      	movs	r2, r1
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e74:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e76:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e78:	c231      	stmia	r2!, {r0, r4, r5}
 8003e7a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e7c:	c231      	stmia	r2!, {r0, r4, r5}
 8003e7e:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e80:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e82:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e84:	2301      	movs	r3, #1
 8003e86:	425b      	negs	r3, r3
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	221b      	movs	r2, #27
 8003e8c:	3333      	adds	r3, #51	; 0x33
 8003e8e:	4650      	mov	r0, sl
 8003e90:	f008 febe 	bl	800cc10 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <DisplayPortsDir+0xe4>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d035      	beq.n	8003f08 <DisplayPortsDir+0xa8>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <DisplayPortsDir+0xe8>)
 8003ea2:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ea4:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <DisplayPortsDir+0xec>)
 8003ea6:	469b      	mov	fp, r3
 8003ea8:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eaa:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eac:	4f23      	ldr	r7, [pc, #140]	; (8003f3c <DisplayPortsDir+0xdc>)
 8003eae:	1e5d      	subs	r5, r3, #1
 8003eb0:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003eb2:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eb4:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eb6:	3740      	adds	r7, #64	; 0x40
 8003eb8:	e002      	b.n	8003ec0 <DisplayPortsDir+0x60>
 8003eba:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003ebc:	2c0a      	cmp	r4, #10
 8003ebe:	d01b      	beq.n	8003ef8 <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ec0:	0031      	movs	r1, r6
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	4119      	asrs	r1, r3
 8003ec6:	5b52      	ldrh	r2, [r2, r5]
 8003ec8:	1c5c      	adds	r4, r3, #1
 8003eca:	4211      	tst	r1, r2
 8003ecc:	d0f5      	beq.n	8003eba <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003ece:	0023      	movs	r3, r4
 8003ed0:	464a      	mov	r2, r9
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	0038      	movs	r0, r7
 8003ed6:	f00e fc21 	bl	801271c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003eda:	0038      	movs	r0, r7
 8003edc:	f7fc f91c 	bl	8000118 <strlen>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	425b      	negs	r3, r3
 8003ee4:	b282      	uxth	r2, r0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	0039      	movs	r1, r7
 8003eea:	3333      	adds	r3, #51	; 0x33
 8003eec:	4650      	mov	r0, sl
 8003eee:	f008 fe8f 	bl	800cc10 <writePxMutex>
 8003ef2:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003ef4:	2c0a      	cmp	r4, #10
 8003ef6:	d1e3      	bne.n	8003ec0 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003ef8:	464b      	mov	r3, r9
 8003efa:	3301      	adds	r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4699      	mov	r9, r3
 8003f00:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <DisplayPortsDir+0xe4>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	454b      	cmp	r3, r9
 8003f06:	d2cf      	bcs.n	8003ea8 <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003f08:	490c      	ldr	r1, [pc, #48]	; (8003f3c <DisplayPortsDir+0xdc>)
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <DisplayPortsDir+0xf0>)
 8003f0c:	3140      	adds	r1, #64	; 0x40
 8003f0e:	000a      	movs	r2, r1
 8003f10:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f12:	c231      	stmia	r2!, {r0, r4, r5}
 8003f14:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003f16:	c231      	stmia	r2!, {r0, r4, r5}
 8003f18:	cb11      	ldmia	r3!, {r0, r4}
 8003f1a:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	425b      	negs	r3, r3
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	221f      	movs	r2, #31
 8003f24:	3333      	adds	r3, #51	; 0x33
 8003f26:	4650      	mov	r0, sl
 8003f28:	f008 fe72 	bl	800cc10 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f2c:	b003      	add	sp, #12
 8003f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8003f30:	4690      	mov	r8, r2
 8003f32:	4699      	mov	r9, r3
 8003f34:	46a2      	mov	sl, r4
 8003f36:	46ab      	mov	fp, r5
 8003f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	20000b98 	.word	0x20000b98
 8003f40:	08017234 	.word	0x08017234
 8003f44:	20000008 	.word	0x20000008
 8003f48:	20006d44 	.word	0x20006d44
 8003f4c:	08017250 	.word	0x08017250
 8003f50:	08017264 	.word	0x08017264

08003f54 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	46de      	mov	lr, fp
 8003f58:	464e      	mov	r6, r9
 8003f5a:	4645      	mov	r5, r8
 8003f5c:	4657      	mov	r7, sl
 8003f5e:	b5e0      	push	{r5, r6, r7, lr}
 8003f60:	b085      	sub	sp, #20
 8003f62:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f64:	f009 f8f6 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f68:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f6a:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f6c:	4d98      	ldr	r5, [pc, #608]	; (80041d0 <DisplayModuleStatus+0x27c>)
	strcpy((char* )pcOutputString,"");
 8003f6e:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f70:	4b98      	ldr	r3, [pc, #608]	; (80041d4 <DisplayModuleStatus+0x280>)
 8003f72:	3540      	adds	r5, #64	; 0x40
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	4998      	ldr	r1, [pc, #608]	; (80041d8 <DisplayModuleStatus+0x284>)
 8003f78:	0028      	movs	r0, r5
 8003f7a:	f00e fbcf 	bl	801271c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f7e:	0029      	movs	r1, r5
 8003f80:	0020      	movs	r0, r4
 8003f82:	f00e fbeb 	bl	801275c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f86:	4b95      	ldr	r3, [pc, #596]	; (80041dc <DisplayModuleStatus+0x288>)
 8003f88:	4995      	ldr	r1, [pc, #596]	; (80041e0 <DisplayModuleStatus+0x28c>)
 8003f8a:	7c1a      	ldrb	r2, [r3, #16]
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	4698      	mov	r8, r3
 8003f90:	f00e fbc4 	bl	801271c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f94:	0029      	movs	r1, r5
 8003f96:	0020      	movs	r0, r4
 8003f98:	f00e fbe0 	bl	801275c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f9c:	2306      	movs	r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4990      	ldr	r1, [pc, #576]	; (80041e4 <DisplayModuleStatus+0x290>)
 8003fa4:	3b04      	subs	r3, #4
 8003fa6:	0028      	movs	r0, r5
 8003fa8:	f00e fbb8 	bl	801271c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003fac:	0029      	movs	r1, r5
 8003fae:	0020      	movs	r0, r4
 8003fb0:	f00e fbd4 	bl	801275c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003fb4:	4a8c      	ldr	r2, [pc, #560]	; (80041e8 <DisplayModuleStatus+0x294>)
 8003fb6:	498d      	ldr	r1, [pc, #564]	; (80041ec <DisplayModuleStatus+0x298>)
 8003fb8:	0028      	movs	r0, r5
 8003fba:	f00e fbaf 	bl	801271c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fbe:	0029      	movs	r1, r5
 8003fc0:	0020      	movs	r0, r4
 8003fc2:	f00e fbcb 	bl	801275c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fc6:	4a8a      	ldr	r2, [pc, #552]	; (80041f0 <DisplayModuleStatus+0x29c>)
 8003fc8:	498a      	ldr	r1, [pc, #552]	; (80041f4 <DisplayModuleStatus+0x2a0>)
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f00e fba6 	bl	801271c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fd0:	0029      	movs	r1, r5
 8003fd2:	0020      	movs	r0, r4
 8003fd4:	f00e fbc2 	bl	801275c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fd8:	002a      	movs	r2, r5
 8003fda:	4b87      	ldr	r3, [pc, #540]	; (80041f8 <DisplayModuleStatus+0x2a4>)
 8003fdc:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fde:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe0:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fe2:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fe4:	6011      	str	r1, [r2, #0]
 8003fe6:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fe8:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fea:	8091      	strh	r1, [r2, #4]
 8003fec:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fee:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003ff0:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff2:	f00e fbb3 	bl	801275c <strcat>
 8003ff6:	4b81      	ldr	r3, [pc, #516]	; (80041fc <DisplayModuleStatus+0x2a8>)
 8003ff8:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003ffa:	4b81      	ldr	r3, [pc, #516]	; (8004200 <DisplayModuleStatus+0x2ac>)
 8003ffc:	469a      	mov	sl, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003ffe:	4b81      	ldr	r3, [pc, #516]	; (8004204 <DisplayModuleStatus+0x2b0>)
 8004000:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8004002:	0032      	movs	r2, r6
 8004004:	4649      	mov	r1, r9
 8004006:	0028      	movs	r0, r5
 8004008:	f00e fb88 	bl	801271c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 800400c:	0029      	movs	r1, r5
 800400e:	0020      	movs	r0, r4
 8004010:	f00e fba4 	bl	801275c <strcat>
		switch(portStatus[i]){
 8004014:	4643      	mov	r3, r8
 8004016:	3314      	adds	r3, #20
 8004018:	5cf3      	ldrb	r3, [r6, r3]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d80b      	bhi.n	8004036 <DisplayModuleStatus+0xe2>
 800401e:	4652      	mov	r2, sl
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	58d3      	ldr	r3, [r2, r3]
 8004024:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004026:	002a      	movs	r2, r5
 8004028:	4b77      	ldr	r3, [pc, #476]	; (8004208 <DisplayModuleStatus+0x2b4>)
 800402a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800402c:	c283      	stmia	r2!, {r0, r1, r7}
 800402e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004030:	c283      	stmia	r2!, {r0, r1, r7}
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004036:	0029      	movs	r1, r5
 8004038:	0020      	movs	r0, r4
 800403a:	3601      	adds	r6, #1
 800403c:	f00e fb8e 	bl	801275c <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004040:	2e06      	cmp	r6, #6
 8004042:	d1de      	bne.n	8004002 <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004044:	002a      	movs	r2, r5
 8004046:	4b71      	ldr	r3, [pc, #452]	; (800420c <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004048:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800404a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800404c:	c243      	stmia	r2!, {r0, r1, r6}
 800404e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004050:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004052:	0029      	movs	r1, r5
 8004054:	0020      	movs	r0, r4
 8004056:	f00e fb81 	bl	801275c <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800405a:	4b6d      	ldr	r3, [pc, #436]	; (8004210 <DisplayModuleStatus+0x2bc>)
 800405c:	4e6d      	ldr	r6, [pc, #436]	; (8004214 <DisplayModuleStatus+0x2c0>)
 800405e:	469b      	mov	fp, r3
 8004060:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <DisplayModuleStatus+0x2c4>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004062:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004064:	469a      	mov	sl, r3
 8004066:	e01d      	b.n	80040a4 <DisplayModuleStatus+0x150>
 8004068:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800406a:	f005 fe1d 	bl	8009ca8 <GetPort>
 800406e:	465a      	mov	r2, fp
 8004070:	00ab      	lsls	r3, r5, #2
 8004072:	3b04      	subs	r3, #4
 8004074:	0004      	movs	r4, r0
 8004076:	58d0      	ldr	r0, [r2, r3]
 8004078:	f005 fe16 	bl	8009ca8 <GetPort>
 800407c:	2340      	movs	r3, #64	; 0x40
 800407e:	4699      	mov	r9, r3
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <DisplayModuleStatus+0x27c>)
 8004082:	002a      	movs	r2, r5
 8004084:	469c      	mov	ip, r3
 8004086:	44e1      	add	r9, ip
 8004088:	9000      	str	r0, [sp, #0]
 800408a:	0023      	movs	r3, r4
 800408c:	4651      	mov	r1, sl
 800408e:	4648      	mov	r0, r9
 8004090:	f00e fb44 	bl	801271c <sprintf>
 8004094:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004096:	4649      	mov	r1, r9
 8004098:	4640      	mov	r0, r8
 800409a:	f00e fb5f 	bl	801275c <strcat>
 800409e:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a0:	2d07      	cmp	r5, #7
 80040a2:	d011      	beq.n	80040c8 <DisplayModuleStatus+0x174>
		if(streamDMA[i - 1].Instance == 0){
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1de      	bne.n	8004068 <DisplayModuleStatus+0x114>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80040aa:	4c49      	ldr	r4, [pc, #292]	; (80041d0 <DisplayModuleStatus+0x27c>)
 80040ac:	002a      	movs	r2, r5
 80040ae:	3440      	adds	r4, #64	; 0x40
 80040b0:	495a      	ldr	r1, [pc, #360]	; (800421c <DisplayModuleStatus+0x2c8>)
 80040b2:	0020      	movs	r0, r4
 80040b4:	f00e fb32 	bl	801271c <sprintf>
 80040b8:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 80040ba:	0021      	movs	r1, r4
 80040bc:	4640      	mov	r0, r8
 80040be:	f00e fb4d 	bl	801275c <strcat>
 80040c2:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040c4:	2d07      	cmp	r5, #7
 80040c6:	d1ed      	bne.n	80040a4 <DisplayModuleStatus+0x150>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040c8:	4640      	mov	r0, r8
 80040ca:	f7fc f825 	bl	8000118 <strlen>
 80040ce:	4644      	mov	r4, r8
 80040d0:	0005      	movs	r5, r0
 80040d2:	4b53      	ldr	r3, [pc, #332]	; (8004220 <DisplayModuleStatus+0x2cc>)
 80040d4:	2202      	movs	r2, #2
 80040d6:	0019      	movs	r1, r3
 80040d8:	1820      	adds	r0, r4, r0
 80040da:	4698      	mov	r8, r3
 80040dc:	f00e f91b 	bl	8012316 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040e0:	1ca8      	adds	r0, r5, #2
 80040e2:	221d      	movs	r2, #29
 80040e4:	1820      	adds	r0, r4, r0
 80040e6:	494f      	ldr	r1, [pc, #316]	; (8004224 <DisplayModuleStatus+0x2d0>)
 80040e8:	f00e f915 	bl	8012316 <memcpy>
	temp =strlen((char* )pcOutputString);
 80040ec:	231e      	movs	r3, #30
 80040ee:	469b      	mov	fp, r3
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040f0:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <DisplayModuleStatus+0x2d4>)
	temp =strlen((char* )pcOutputString);
 80040f2:	44ab      	add	fp, r5
			sprintf(pcUserMessage,"P%d ",p);
 80040f4:	4699      	mov	r9, r3
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	469a      	mov	sl, r3
 80040fa:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <DisplayModuleStatus+0x27c>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040fc:	2580      	movs	r5, #128	; 0x80
			sprintf(pcUserMessage,"P%d ",p);
 80040fe:	469c      	mov	ip, r3
	temp =strlen((char* )pcOutputString);
 8004100:	2200      	movs	r2, #0
 8004102:	4e4a      	ldr	r6, [pc, #296]	; (800422c <DisplayModuleStatus+0x2d8>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004104:	022d      	lsls	r5, r5, #8
			sprintf(pcUserMessage,"P%d ",p);
 8004106:	44e2      	add	sl, ip
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004108:	0029      	movs	r1, r5
 800410a:	4111      	asrs	r1, r2
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <DisplayModuleStatus+0x280>)
 800410e:	1c57      	adds	r7, r2, #1
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	3b01      	subs	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	5af3      	ldrh	r3, [r6, r3]
 8004118:	4219      	tst	r1, r3
 800411a:	d148      	bne.n	80041ae <DisplayModuleStatus+0x25a>
 800411c:	003a      	movs	r2, r7
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800411e:	2f05      	cmp	r7, #5
 8004120:	d1f2      	bne.n	8004108 <DisplayModuleStatus+0x1b4>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004122:	0020      	movs	r0, r4
 8004124:	f7fb fff8 	bl	8000118 <strlen>
 8004128:	465b      	mov	r3, fp
 800412a:	b29b      	uxth	r3, r3
 800412c:	0005      	movs	r5, r0
 800412e:	1820      	adds	r0, r4, r0
 8004130:	42ab      	cmp	r3, r5
 8004132:	d046      	beq.n	80041c2 <DisplayModuleStatus+0x26e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004134:	2203      	movs	r2, #3
 8004136:	4641      	mov	r1, r8
 8004138:	f00e f8ed 	bl	8012316 <memcpy>
	
	/* Display output */
	if(port)
 800413c:	9b03      	ldr	r3, [sp, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <DisplayModuleStatus+0x206>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004142:	0020      	movs	r0, r4
 8004144:	f7fb ffe8 	bl	8000118 <strlen>
 8004148:	2301      	movs	r3, #1
 800414a:	425b      	negs	r3, r3
 800414c:	b282      	uxth	r2, r0
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	0021      	movs	r1, r4
 8004152:	3333      	adds	r3, #51	; 0x33
 8004154:	9803      	ldr	r0, [sp, #12]
 8004156:	f008 fd5b 	bl	800cc10 <writePxMutex>
	
}
 800415a:	b005      	add	sp, #20
 800415c:	bc3c      	pop	{r2, r3, r4, r5}
 800415e:	4690      	mov	r8, r2
 8004160:	4699      	mov	r9, r3
 8004162:	46a2      	mov	sl, r4
 8004164:	46ab      	mov	fp, r5
 8004166:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004168:	002a      	movs	r2, r5
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <DisplayModuleStatus+0x2dc>)
 800416c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800416e:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004170:	e761      	b.n	8004036 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004172:	002a      	movs	r2, r5
 8004174:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <DisplayModuleStatus+0x2e0>)
 8004176:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004178:	c283      	stmia	r2!, {r0, r1, r7}
 800417a:	cb03      	ldmia	r3!, {r0, r1}
 800417c:	c203      	stmia	r2!, {r0, r1}
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	7013      	strb	r3, [r2, #0]
				break;
 8004182:	e758      	b.n	8004036 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004184:	002b      	movs	r3, r5
 8004186:	465a      	mov	r2, fp
 8004188:	ca83      	ldmia	r2!, {r0, r1, r7}
 800418a:	c383      	stmia	r3!, {r0, r1, r7}
 800418c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800418e:	c383      	stmia	r3!, {r0, r1, r7}
 8004190:	6811      	ldr	r1, [r2, #0]
 8004192:	6019      	str	r1, [r3, #0]
 8004194:	8891      	ldrh	r1, [r2, #4]
 8004196:	8099      	strh	r1, [r3, #4]
 8004198:	7992      	ldrb	r2, [r2, #6]
 800419a:	719a      	strb	r2, [r3, #6]
				break;
 800419c:	e74b      	b.n	8004036 <DisplayModuleStatus+0xe2>
				sprintf(pcUserMessage,"Free\n\r");
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <DisplayModuleStatus+0x2e4>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	602a      	str	r2, [r5, #0]
 80041a4:	889a      	ldrh	r2, [r3, #4]
 80041a6:	80aa      	strh	r2, [r5, #4]
 80041a8:	799b      	ldrb	r3, [r3, #6]
 80041aa:	71ab      	strb	r3, [r5, #6]
				break;
 80041ac:	e743      	b.n	8004036 <DisplayModuleStatus+0xe2>
			sprintf(pcUserMessage,"P%d ",p);
 80041ae:	4649      	mov	r1, r9
 80041b0:	003a      	movs	r2, r7
 80041b2:	4650      	mov	r0, sl
 80041b4:	f00e fab2 	bl	801271c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041b8:	4651      	mov	r1, sl
 80041ba:	0020      	movs	r0, r4
 80041bc:	f00e face 	bl	801275c <strcat>
 80041c0:	e7ac      	b.n	800411c <DisplayModuleStatus+0x1c8>
		strcat((char* )pcOutputString,"None");
 80041c2:	2205      	movs	r2, #5
 80041c4:	491d      	ldr	r1, [pc, #116]	; (800423c <DisplayModuleStatus+0x2e8>)
 80041c6:	f00e f8a6 	bl	8012316 <memcpy>
 80041ca:	1d28      	adds	r0, r5, #4
 80041cc:	1820      	adds	r0, r4, r0
 80041ce:	e7b1      	b.n	8004134 <DisplayModuleStatus+0x1e0>
 80041d0:	20000b98 	.word	0x20000b98
 80041d4:	20000a98 	.word	0x20000a98
 80041d8:	08017284 	.word	0x08017284
 80041dc:	20000c18 	.word	0x20000c18
 80041e0:	080172a0 	.word	0x080172a0
 80041e4:	080172bc 	.word	0x080172bc
 80041e8:	080172dc 	.word	0x080172dc
 80041ec:	080172e8 	.word	0x080172e8
 80041f0:	08017300 	.word	0x08017300
 80041f4:	0801730c 	.word	0x0801730c
 80041f8:	08017328 	.word	0x08017328
 80041fc:	0801733c 	.word	0x0801733c
 8004200:	08016ac0 	.word	0x08016ac0
 8004204:	0801738c 	.word	0x0801738c
 8004208:	08017370 	.word	0x08017370
 800420c:	080173ac 	.word	0x080173ac
 8004210:	20001850 	.word	0x20001850
 8004214:	20002054 	.word	0x20002054
 8004218:	080173e0 	.word	0x080173e0
 800421c:	080173c4 	.word	0x080173c4
 8004220:	08017338 	.word	0x08017338
 8004224:	08017410 	.word	0x08017410
 8004228:	08017430 	.word	0x08017430
 800422c:	20006d44 	.word	0x20006d44
 8004230:	08017364 	.word	0x08017364
 8004234:	0801734c 	.word	0x0801734c
 8004238:	08017344 	.word	0x08017344
 800423c:	08017438 	.word	0x08017438

08004240 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004244:	4929      	ldr	r1, [pc, #164]	; (80042ec <GetID+0xac>)
int16_t GetID(char *string){
 8004246:	b500      	push	{lr}
 8004248:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 800424a:	f7fb ff5b 	bl	8000104 <strcmp>
 800424e:	2800      	cmp	r0, #0
 8004250:	d02c      	beq.n	80042ac <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 8004252:	4927      	ldr	r1, [pc, #156]	; (80042f0 <GetID+0xb0>)
 8004254:	0030      	movs	r0, r6
 8004256:	f7fb ff55 	bl	8000104 <strcmp>
 800425a:	2800      	cmp	r0, #0
 800425c:	d02b      	beq.n	80042b6 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800425e:	7833      	ldrb	r3, [r6, #0]
 8004260:	4698      	mov	r8, r3
 8004262:	2b23      	cmp	r3, #35	; 0x23
 8004264:	d030      	beq.n	80042c8 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004266:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <GetID+0xb4>)
 8004268:	781f      	ldrb	r7, [r3, #0]
 800426a:	2f00      	cmp	r7, #0
 800426c:	d00f      	beq.n	800428e <GetID+0x4e>
 800426e:	2400      	movs	r4, #0
 8004270:	4d21      	ldr	r5, [pc, #132]	; (80042f8 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004272:	0029      	movs	r1, r5
 8004274:	0030      	movs	r0, r6
 8004276:	f7fb ff45 	bl	8000104 <strcmp>
 800427a:	2800      	cmp	r0, #0
 800427c:	d102      	bne.n	8004284 <GetID+0x44>
 800427e:	4643      	mov	r3, r8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11a      	bne.n	80042ba <GetID+0x7a>
		for(i =0; i < N; i++){
 8004284:	3401      	adds	r4, #1
 8004286:	b2e4      	uxtb	r4, r4
 8004288:	350a      	adds	r5, #10
 800428a:	42a7      	cmp	r7, r4
 800428c:	d1f1      	bne.n	8004272 <GetID+0x32>
 800428e:	2400      	movs	r4, #0
 8004290:	4d1a      	ldr	r5, [pc, #104]	; (80042fc <GetID+0xbc>)
 8004292:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004294:	0029      	movs	r1, r5
 8004296:	0030      	movs	r0, r6
 8004298:	f7fb ff34 	bl	8000104 <strcmp>
 800429c:	2800      	cmp	r0, #0
 800429e:	d00e      	beq.n	80042be <GetID+0x7e>
 80042a0:	3401      	adds	r4, #1
 80042a2:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80042a4:	2c0a      	cmp	r4, #10
 80042a6:	d1f5      	bne.n	8004294 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 80042a8:	2064      	movs	r0, #100	; 0x64
 80042aa:	e001      	b.n	80042b0 <GetID+0x70>
		return myID;
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <GetID+0xbc>)
 80042ae:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 80042b0:	bc04      	pop	{r2}
 80042b2:	4690      	mov	r8, r2
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 80042b6:	20ff      	movs	r0, #255	; 0xff
 80042b8:	e7fa      	b.n	80042b0 <GetID+0x70>
				return (i);
 80042ba:	b220      	sxth	r0, r4
 80042bc:	e7f8      	b.n	80042b0 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 80042be:	20fe      	movs	r0, #254	; 0xfe
 80042c0:	0224      	lsls	r4, r4, #8
 80042c2:	4320      	orrs	r0, r4
 80042c4:	b200      	sxth	r0, r0
 80042c6:	e7f3      	b.n	80042b0 <GetID+0x70>
		id =atol(string + 1);
 80042c8:	1c70      	adds	r0, r6, #1
 80042ca:	f00d fd64 	bl	8011d96 <atol>
 80042ce:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <GetID+0x9c>
 80042d4:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <GetID+0xb4>)
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d204      	bcs.n	80042e6 <GetID+0xa6>
		else if(id == myID)
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <GetID+0xbc>)
			return BOS_ERR_WrongID;
 80042de:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80042e0:	7812      	ldrb	r2, [r2, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d1e4      	bne.n	80042b0 <GetID+0x70>
			return myID;
 80042e6:	b218      	sxth	r0, r3
 80042e8:	e7e2      	b.n	80042b0 <GetID+0x70>
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	08017440 	.word	0x08017440
 80042f0:	08017444 	.word	0x08017444
 80042f4:	20000008 	.word	0x20000008
 80042f8:	20000dc4 	.word	0x20000dc4
 80042fc:	20000a98 	.word	0x20000a98

08004300 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	46c6      	mov	lr, r8
 8004304:	4c2c      	ldr	r4, [pc, #176]	; (80043b8 <NameModule+0xb8>)
 8004306:	0007      	movs	r7, r0
 8004308:	0026      	movs	r6, r4
 800430a:	000d      	movs	r5, r1
 800430c:	b500      	push	{lr}
 800430e:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 8004310:	0021      	movs	r1, r4
 8004312:	0028      	movs	r0, r5
 8004314:	f7fb fef6 	bl	8000104 <strcmp>
 8004318:	2800      	cmp	r0, #0
 800431a:	d040      	beq.n	800439e <NameModule+0x9e>
 800431c:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800431e:	42a6      	cmp	r6, r4
 8004320:	d1f6      	bne.n	8004310 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <NameModule+0xbc>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d914      	bls.n	8004354 <NameModule+0x54>
 800432a:	4c25      	ldr	r4, [pc, #148]	; (80043c0 <NameModule+0xc0>)
 800432c:	009e      	lsls	r6, r3, #2
 800432e:	18f6      	adds	r6, r6, r3
 8004330:	0023      	movs	r3, r4
 8004332:	0076      	lsls	r6, r6, #1
 8004334:	3b0a      	subs	r3, #10
 8004336:	18f6      	adds	r6, r6, r3
 8004338:	e002      	b.n	8004340 <NameModule+0x40>
 800433a:	340a      	adds	r4, #10
 800433c:	42b4      	cmp	r4, r6
 800433e:	d009      	beq.n	8004354 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 8004340:	0021      	movs	r1, r4
 8004342:	0028      	movs	r0, r5
 8004344:	f7fb fede 	bl	8000104 <strcmp>
 8004348:	2800      	cmp	r0, #0
 800434a:	d1f6      	bne.n	800433a <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 800434c:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 800434e:	bc04      	pop	{r2}
 8004350:	4690      	mov	r8, r2
 8004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004354:	4e1b      	ldr	r6, [pc, #108]	; (80043c4 <NameModule+0xc4>)
 8004356:	0034      	movs	r4, r6
 8004358:	369c      	adds	r6, #156	; 0x9c
 800435a:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 800435c:	0021      	movs	r1, r4
 800435e:	0028      	movs	r0, r5
 8004360:	f7fb fed0 	bl	8000104 <strcmp>
 8004364:	2800      	cmp	r0, #0
 8004366:	d0f1      	beq.n	800434c <NameModule+0x4c>
 8004368:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800436a:	42a6      	cmp	r6, r4
 800436c:	d1f6      	bne.n	800435c <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <NameModule+0xc8>)
 8004370:	4c16      	ldr	r4, [pc, #88]	; (80043cc <NameModule+0xcc>)
 8004372:	4698      	mov	r8, r3
 8004374:	61dc      	str	r4, [r3, #28]
 8004376:	e004      	b.n	8004382 <NameModule+0x82>
 8004378:	4643      	mov	r3, r8
 800437a:	6864      	ldr	r4, [r4, #4]
 800437c:	61dc      	str	r4, [r3, #28]
 800437e:	2c00      	cmp	r4, #0
 8004380:	d00f      	beq.n	80043a2 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004386:	0030      	movs	r0, r6
 8004388:	f7fb fec6 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800438c:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800438e:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004390:	0028      	movs	r0, r5
 8004392:	f00e fa07 	bl	80127a4 <strncmp>
 8004396:	2800      	cmp	r0, #0
 8004398:	d1ee      	bne.n	8004378 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800439a:	2008      	movs	r0, #8
 800439c:	e7d7      	b.n	800434e <NameModule+0x4e>
			return BOS_ERR_Keyword;
 800439e:	2006      	movs	r0, #6
 80043a0:	e7d5      	b.n	800434e <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 80043a2:	00b8      	lsls	r0, r7, #2
 80043a4:	19c0      	adds	r0, r0, r7
 80043a6:	4f0a      	ldr	r7, [pc, #40]	; (80043d0 <NameModule+0xd0>)
 80043a8:	0040      	lsls	r0, r0, #1
 80043aa:	0029      	movs	r1, r5
 80043ac:	19c0      	adds	r0, r0, r7
 80043ae:	f00e f9f1 	bl	8012794 <strcpy>
	result =SaveEEalias();
 80043b2:	f7ff f883 	bl	80034bc <SaveEEalias>
	return result;
 80043b6:	e7ca      	b.n	800434e <NameModule+0x4e>
 80043b8:	08016b1c 	.word	0x08016b1c
 80043bc:	20000008 	.word	0x20000008
 80043c0:	20000dce 	.word	0x20000dce
 80043c4:	20000a98 	.word	0x20000a98
 80043c8:	20000c18 	.word	0x20000c18
 80043cc:	200000bc 	.word	0x200000bc
 80043d0:	20000dc4 	.word	0x20000dc4

080043d4 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	464f      	mov	r7, r9
 80043d8:	4646      	mov	r6, r8
 80043da:	46d6      	mov	lr, sl
 80043dc:	4b3e      	ldr	r3, [pc, #248]	; (80044d8 <AddModuleToGroup+0x104>)
 80043de:	b5c0      	push	{r6, r7, lr}
 80043e0:	001f      	movs	r7, r3
 80043e2:	3738      	adds	r7, #56	; 0x38
 80043e4:	4680      	mov	r8, r0
 80043e6:	000e      	movs	r6, r1
 80043e8:	4699      	mov	r9, r3
 80043ea:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043ec:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043ee:	0021      	movs	r1, r4
 80043f0:	0030      	movs	r0, r6
 80043f2:	f7fb fe87 	bl	8000104 <strcmp>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d02a      	beq.n	8004450 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 80043fa:	3501      	adds	r5, #1
 80043fc:	340a      	adds	r4, #10
 80043fe:	2d0a      	cmp	r5, #10
 8004400:	d1f5      	bne.n	80043ee <AddModuleToGroup+0x1a>
 8004402:	4c36      	ldr	r4, [pc, #216]	; (80044dc <AddModuleToGroup+0x108>)
 8004404:	0025      	movs	r5, r4
 8004406:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004408:	0021      	movs	r1, r4
 800440a:	0030      	movs	r0, r6
 800440c:	f7fb fe7a 	bl	8000104 <strcmp>
 8004410:	2800      	cmp	r0, #0
 8004412:	d051      	beq.n	80044b8 <AddModuleToGroup+0xe4>
 8004414:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004416:	42a5      	cmp	r5, r4
 8004418:	d1f6      	bne.n	8004408 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <AddModuleToGroup+0x10c>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d920      	bls.n	8004464 <AddModuleToGroup+0x90>
 8004422:	4c30      	ldr	r4, [pc, #192]	; (80044e4 <AddModuleToGroup+0x110>)
 8004424:	009d      	lsls	r5, r3, #2
 8004426:	18ed      	adds	r5, r5, r3
 8004428:	0023      	movs	r3, r4
 800442a:	006d      	lsls	r5, r5, #1
 800442c:	3b0a      	subs	r3, #10
 800442e:	18ed      	adds	r5, r5, r3
 8004430:	e002      	b.n	8004438 <AddModuleToGroup+0x64>
 8004432:	340a      	adds	r4, #10
 8004434:	42a5      	cmp	r5, r4
 8004436:	d015      	beq.n	8004464 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 8004438:	0021      	movs	r1, r4
 800443a:	0030      	movs	r0, r6
 800443c:	f7fb fe62 	bl	8000104 <strcmp>
 8004440:	2800      	cmp	r0, #0
 8004442:	d1f6      	bne.n	8004432 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 8004444:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004446:	bc1c      	pop	{r2, r3, r4}
 8004448:	4690      	mov	r8, r2
 800444a:	4699      	mov	r9, r3
 800444c:	46a2      	mov	sl, r4
 800444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 8004450:	2201      	movs	r2, #1
 8004452:	4647      	mov	r7, r8
 8004454:	40aa      	lsls	r2, r5
 8004456:	3f01      	subs	r7, #1
 8004458:	007f      	lsls	r7, r7, #1
 800445a:	444f      	add	r7, r9
 800445c:	88bb      	ldrh	r3, [r7, #4]
 800445e:	4313      	orrs	r3, r2
 8004460:	80bb      	strh	r3, [r7, #4]
			return result;
 8004462:	e7f0      	b.n	8004446 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004464:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <AddModuleToGroup+0x114>)
 8004466:	4c21      	ldr	r4, [pc, #132]	; (80044ec <AddModuleToGroup+0x118>)
 8004468:	469a      	mov	sl, r3
 800446a:	621c      	str	r4, [r3, #32]
 800446c:	e004      	b.n	8004478 <AddModuleToGroup+0xa4>
 800446e:	4653      	mov	r3, sl
 8004470:	6864      	ldr	r4, [r4, #4]
 8004472:	621c      	str	r4, [r3, #32]
 8004474:	2c00      	cmp	r4, #0
 8004476:	d00d      	beq.n	8004494 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800447c:	0028      	movs	r0, r5
 800447e:	f7fb fe4b 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004482:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004484:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004486:	0030      	movs	r0, r6
 8004488:	f00e f98c 	bl	80127a4 <strncmp>
 800448c:	2800      	cmp	r0, #0
 800448e:	d1ee      	bne.n	800446e <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004490:	2008      	movs	r0, #8
 8004492:	e7d8      	b.n	8004446 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004494:	783b      	ldrb	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800449a:	3401      	adds	r4, #1
 800449c:	370a      	adds	r7, #10
 800449e:	2c0a      	cmp	r4, #10
 80044a0:	d1f8      	bne.n	8004494 <AddModuleToGroup+0xc0>
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 80044a6:	4647      	mov	r7, r8
 80044a8:	3f01      	subs	r7, #1
 80044aa:	007f      	lsls	r7, r7, #1
 80044ac:	444f      	add	r7, r9
 80044ae:	88ba      	ldrh	r2, [r7, #4]
	return result;
 80044b0:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 80044b2:	4313      	orrs	r3, r2
 80044b4:	80bb      	strh	r3, [r7, #4]
	return result;
 80044b6:	e7c6      	b.n	8004446 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 80044b8:	2006      	movs	r0, #6
 80044ba:	e7c4      	b.n	8004446 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 80044bc:	464b      	mov	r3, r9
 80044be:	00a0      	lsls	r0, r4, #2
 80044c0:	1900      	adds	r0, r0, r4
 80044c2:	3338      	adds	r3, #56	; 0x38
 80044c4:	0040      	lsls	r0, r0, #1
 80044c6:	1818      	adds	r0, r3, r0
 80044c8:	0031      	movs	r1, r6
 80044ca:	f00e f963 	bl	8012794 <strcpy>
 80044ce:	2301      	movs	r3, #1
 80044d0:	40a3      	lsls	r3, r4
 80044d2:	b21b      	sxth	r3, r3
			break;
 80044d4:	e7e7      	b.n	80044a6 <AddModuleToGroup+0xd2>
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	20000a98 	.word	0x20000a98
 80044dc:	08016b1c 	.word	0x08016b1c
 80044e0:	20000008 	.word	0x20000008
 80044e4:	20000dce 	.word	0x20000dce
 80044e8:	20000c18 	.word	0x20000c18
 80044ec:	200000bc 	.word	0x200000bc

080044f0 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f2:	4645      	mov	r5, r8
 80044f4:	4657      	mov	r7, sl
 80044f6:	464e      	mov	r6, r9
 80044f8:	46de      	mov	lr, fp
 80044fa:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 80044fc:	4f82      	ldr	r7, [pc, #520]	; (8004708 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80044fe:	b083      	sub	sp, #12
 8004500:	ac0c      	add	r4, sp, #48	; 0x30
 8004502:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 8004504:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004506:	9001      	str	r0, [sp, #4]
 8004508:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 800450a:	46a8      	mov	r8, r5
	if(timeout)
 800450c:	2e00      	cmp	r6, #0
 800450e:	d059      	beq.n	80045c4 <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004510:	2520      	movs	r5, #32
 8004512:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 8004514:	4265      	negs	r5, r4
 8004516:	416c      	adcs	r4, r5
 8004518:	2501      	movs	r5, #1
 800451a:	2022      	movs	r0, #34	; 0x22
 800451c:	4264      	negs	r4, r4
 800451e:	43ac      	bics	r4, r5
 8004520:	46a3      	mov	fp, r4
 8004522:	4684      	mov	ip, r0
 8004524:	b2d5      	uxtb	r5, r2
 8004526:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004528:	4d78      	ldr	r5, [pc, #480]	; (800470c <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 800452a:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 800452c:	42aa      	cmp	r2, r5
 800452e:	d829      	bhi.n	8004584 <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004530:	2224      	movs	r2, #36	; 0x24
 8004532:	464c      	mov	r4, r9
 8004534:	4d76      	ldr	r5, [pc, #472]	; (8004710 <WriteToRemote+0x220>)
 8004536:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004538:	002a      	movs	r2, r5
 800453a:	3224      	adds	r2, #36	; 0x24
 800453c:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 800453e:	2b08      	cmp	r3, #8
 8004540:	d814      	bhi.n	800456c <WriteToRemote+0x7c>
 8004542:	4a74      	ldr	r2, [pc, #464]	; (8004714 <WriteToRemote+0x224>)
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	58d3      	ldr	r3, [r2, r3]
 8004548:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800454a:	680b      	ldr	r3, [r1, #0]
 800454c:	3524      	adds	r5, #36	; 0x24
 800454e:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004550:	680b      	ldr	r3, [r1, #0]
 8004552:	121b      	asrs	r3, r3, #8
 8004554:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004556:	680b      	ldr	r3, [r1, #0]
 8004558:	141b      	asrs	r3, r3, #16
 800455a:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800455c:	680b      	ldr	r3, [r1, #0]
 800455e:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004560:	220a      	movs	r2, #10
 8004562:	4659      	mov	r1, fp
 8004564:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004566:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004568:	f003 fdd8 	bl	800811c <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 800456c:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 800456e:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004570:	703b      	strb	r3, [r7, #0]
	if(timeout){
 8004572:	2e00      	cmp	r6, #0
 8004574:	d128      	bne.n	80045c8 <WriteToRemote+0xd8>
}
 8004576:	b003      	add	sp, #12
 8004578:	bc3c      	pop	{r2, r3, r4, r5}
 800457a:	4690      	mov	r8, r2
 800457c:	4699      	mov	r9, r3
 800457e:	46a2      	mov	sl, r4
 8004580:	46ab      	mov	fp, r5
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 8004584:	2024      	movs	r0, #36	; 0x24
 8004586:	4684      	mov	ip, r0
 8004588:	2000      	movs	r0, #0
 800458a:	4682      	mov	sl, r0
 800458c:	4660      	mov	r0, ip
 800458e:	4654      	mov	r4, sl
 8004590:	4d5f      	ldr	r5, [pc, #380]	; (8004710 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 8004592:	44ac      	add	ip, r5
		messageParams[0] =0;
 8004594:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 8004596:	4660      	mov	r0, ip
 8004598:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 800459a:	0e10      	lsrs	r0, r2, #24
 800459c:	4682      	mov	sl, r0
 800459e:	4660      	mov	r0, ip
 80045a0:	4654      	mov	r4, sl
 80045a2:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045a4:	0c10      	lsrs	r0, r2, #16
 80045a6:	4682      	mov	sl, r0
 80045a8:	4660      	mov	r0, ip
 80045aa:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80045ac:	0a12      	lsrs	r2, r2, #8
 80045ae:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80045b0:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80045b2:	4662      	mov	r2, ip
 80045b4:	4648      	mov	r0, r9
 80045b6:	7150      	strb	r0, [r2, #5]
		switch(format){
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d8d7      	bhi.n	800456c <WriteToRemote+0x7c>
 80045bc:	4a56      	ldr	r2, [pc, #344]	; (8004718 <WriteToRemote+0x228>)
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	58d3      	ldr	r3, [r2, r3]
 80045c2:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80045c4:	703e      	strb	r6, [r7, #0]
 80045c6:	e7a5      	b.n	8004514 <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80045c8:	f00a fb52 	bl	800ec70 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045cc:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80045ce:	0007      	movs	r7, r0
 80045d0:	4d52      	ldr	r5, [pc, #328]	; (800471c <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80045d2:	5d28      	ldrb	r0, [r5, r4]
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d0ce      	beq.n	8004576 <WriteToRemote+0x86>
 80045d8:	f00a fb4a 	bl	800ec70 <HAL_GetTick>
 80045dc:	1bc0      	subs	r0, r0, r7
 80045de:	42b0      	cmp	r0, r6
 80045e0:	d3f7      	bcc.n	80045d2 <WriteToRemote+0xe2>
 80045e2:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80045e4:	e7c7      	b.n	8004576 <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045e6:	780b      	ldrb	r3, [r1, #0]
 80045e8:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045ea:	2203      	movs	r2, #3
 80045ec:	2120      	movs	r1, #32
 80045ee:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 80045f0:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80045f2:	f003 fd93 	bl	800811c <SendMessageToModule>
				break;
 80045f6:	e7b9      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 80045f8:	780b      	ldrb	r3, [r1, #0]
 80045fa:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 80045fc:	2207      	movs	r2, #7
 80045fe:	4659      	mov	r1, fp
 8004600:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004602:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 8004604:	f003 fd8a 	bl	800811c <SendMessageToModule>
				break;
 8004608:	e7b0      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 800460a:	680b      	ldr	r3, [r1, #0]
 800460c:	3524      	adds	r5, #36	; 0x24
 800460e:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004610:	680b      	ldr	r3, [r1, #0]
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004616:	680b      	ldr	r3, [r1, #0]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 800461c:	680b      	ldr	r3, [r1, #0]
 800461e:	0e1b      	lsrs	r3, r3, #24
 8004620:	e79e      	b.n	8004560 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 8004622:	780b      	ldrb	r3, [r1, #0]
 8004624:	3524      	adds	r5, #36	; 0x24
 8004626:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004628:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800462a:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 800462c:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800462e:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004630:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004632:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004634:	78cb      	ldrb	r3, [r1, #3]
 8004636:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004638:	790b      	ldrb	r3, [r1, #4]
 800463a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 800463c:	794b      	ldrb	r3, [r1, #5]
 800463e:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004640:	798b      	ldrb	r3, [r1, #6]
 8004642:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004644:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004646:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004648:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800464a:	f003 fd67 	bl	800811c <SendMessageToModule>
				break;
 800464e:	e78d      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004650:	780b      	ldrb	r3, [r1, #0]
 8004652:	3524      	adds	r5, #36	; 0x24
 8004654:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004656:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004658:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800465a:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 800465c:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 800465e:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004660:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004662:	78cb      	ldrb	r3, [r1, #3]
 8004664:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004666:	790b      	ldrb	r3, [r1, #4]
 8004668:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800466a:	794b      	ldrb	r3, [r1, #5]
 800466c:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800466e:	798b      	ldrb	r3, [r1, #6]
 8004670:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004672:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 8004674:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004676:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004678:	f003 fd50 	bl	800811c <SendMessageToModule>
				break;
 800467c:	e776      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 800467e:	880b      	ldrh	r3, [r1, #0]
 8004680:	3524      	adds	r5, #36	; 0x24
 8004682:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004684:	880b      	ldrh	r3, [r1, #0]
 8004686:	b21b      	sxth	r3, r3
 8004688:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 800468a:	2208      	movs	r2, #8
 800468c:	4659      	mov	r1, fp
 800468e:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004690:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 8004692:	f003 fd43 	bl	800811c <SendMessageToModule>
				break;
 8004696:	e769      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004698:	880b      	ldrh	r3, [r1, #0]
 800469a:	3524      	adds	r5, #36	; 0x24
 800469c:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 800469e:	880b      	ldrh	r3, [r1, #0]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	e7f2      	b.n	800468a <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80046a4:	680b      	ldr	r3, [r1, #0]
 80046a6:	3524      	adds	r5, #36	; 0x24
 80046a8:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80046aa:	680b      	ldr	r3, [r1, #0]
 80046ac:	121b      	asrs	r3, r3, #8
 80046ae:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80046b0:	680b      	ldr	r3, [r1, #0]
 80046b2:	141b      	asrs	r3, r3, #16
 80046b4:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046b6:	680b      	ldr	r3, [r1, #0]
 80046b8:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046ba:	2206      	movs	r2, #6
 80046bc:	2120      	movs	r1, #32
 80046be:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80046c0:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80046c2:	f003 fd2b 	bl	800811c <SendMessageToModule>
				break;
 80046c6:	e751      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80046c8:	680b      	ldr	r3, [r1, #0]
 80046ca:	3524      	adds	r5, #36	; 0x24
 80046cc:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80046d4:	680b      	ldr	r3, [r1, #0]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80046da:	680b      	ldr	r3, [r1, #0]
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	e7ec      	b.n	80046ba <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80046e0:	880b      	ldrh	r3, [r1, #0]
 80046e2:	3524      	adds	r5, #36	; 0x24
 80046e4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046e6:	880b      	ldrh	r3, [r1, #0]
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046ec:	2204      	movs	r2, #4
 80046ee:	2120      	movs	r1, #32
 80046f0:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046f2:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046f4:	f003 fd12 	bl	800811c <SendMessageToModule>
				break;
 80046f8:	e738      	b.n	800456c <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80046fa:	880b      	ldrh	r3, [r1, #0]
 80046fc:	3524      	adds	r5, #36	; 0x24
 80046fe:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004700:	880b      	ldrh	r3, [r1, #0]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	e7f2      	b.n	80046ec <WriteToRemote+0x1fc>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	200067c4 	.word	0x200067c4
 800470c:	07ffffff 	.word	0x07ffffff
 8004710:	20000b18 	.word	0x20000b18
 8004714:	08016ad4 	.word	0x08016ad4
 8004718:	08016af8 	.word	0x08016af8
 800471c:	20000c18 	.word	0x20000c18

08004720 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004720:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004722:	2101      	movs	r1, #1
char* GetDateString(void){
 8004724:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 8004726:	201e      	movs	r0, #30
 8004728:	f00d fb3c 	bl	8011da4 <calloc>
 800472c:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 800472e:	4809      	ldr	r0, [pc, #36]	; (8004754 <GetDateString+0x34>)
 8004730:	4909      	ldr	r1, [pc, #36]	; (8004758 <GetDateString+0x38>)
 8004732:	7d02      	ldrb	r2, [r0, #20]
 8004734:	8b05      	ldrh	r5, [r0, #24]
 8004736:	7d83      	ldrb	r3, [r0, #22]
 8004738:	3a01      	subs	r2, #1
 800473a:	9501      	str	r5, [sp, #4]
 800473c:	7d40      	ldrb	r0, [r0, #21]
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	188a      	adds	r2, r1, r2
 8004742:	9000      	str	r0, [sp, #0]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	312c      	adds	r1, #44	; 0x2c
 8004748:	0020      	movs	r0, r4
 800474a:	f00d ffe7 	bl	801271c <sprintf>
	return buffer;
}
 800474e:	0020      	movs	r0, r4
 8004750:	b003      	add	sp, #12
 8004752:	bd30      	pop	{r4, r5, pc}
 8004754:	20006844 	.word	0x20006844
 8004758:	08016b1c 	.word	0x08016b1c

0800475c <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800475c:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004760:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004762:	7819      	ldrb	r1, [r3, #0]
 8004764:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004766:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004768:	9303      	str	r3, [sp, #12]
 800476a:	3b02      	subs	r3, #2
 800476c:	9302      	str	r3, [sp, #8]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	3303      	adds	r3, #3
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	000b      	movs	r3, r1
 8004776:	f003 fcf5 	bl	8008164 <StartScastDMAStream>
}
 800477a:	b005      	add	sp, #20
 800477c:	bd00      	pop	{pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	20000a98 	.word	0x20000a98

08004784 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004784:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004786:	b530      	push	{r4, r5, lr}
 8004788:	0004      	movs	r4, r0
 800478a:	000d      	movs	r5, r1
 800478c:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	9303      	str	r3, [sp, #12]
 8004792:	9302      	str	r3, [sp, #8]
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	2100      	movs	r1, #0
 800479c:	2000      	movs	r0, #0
 800479e:	f7fe fed1 	bl	8003544 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047a2:	1e60      	subs	r0, r4, #1
 80047a4:	00c3      	lsls	r3, r0, #3
 80047a6:	4912      	ldr	r1, [pc, #72]	; (80047f0 <Unbridge+0x6c>)
 80047a8:	1a1b      	subs	r3, r3, r0
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	585b      	ldr	r3, [r3, r1]
 80047ae:	1e6a      	subs	r2, r5, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <Unbridge+0x56>
 80047b4:	00d3      	lsls	r3, r2, #3
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80047bc:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80047c2:	f005 ff99 	bl	800a6f8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047c6:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80047c8:	b007      	add	sp, #28
 80047ca:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80047cc:	f005 ff94 	bl	800a6f8 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80047d0:	0028      	movs	r0, r5
 80047d2:	f005 ff91 	bl	800a6f8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047d6:	2000      	movs	r0, #0
 80047d8:	e7f6      	b.n	80047c8 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80047da:	00d3      	lsls	r3, r2, #3
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	585b      	ldr	r3, [r3, r1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80047e6:	0028      	movs	r0, r5
 80047e8:	e7eb      	b.n	80047c2 <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 80047ea:	2068      	movs	r0, #104	; 0x68
 80047ec:	e7ec      	b.n	80047c8 <Unbridge+0x44>
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20002054 	.word	0x20002054

080047f4 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	46d6      	mov	lr, sl
 80047f8:	4646      	mov	r6, r8
 80047fa:	464f      	mov	r7, r9
 80047fc:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80047fe:	4e27      	ldr	r6, [pc, #156]	; (800489c <AddSnippet.part.0+0xa8>)
 8004800:	4d27      	ldr	r5, [pc, #156]	; (80048a0 <AddSnippet.part.0+0xac>)
 8004802:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004804:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004806:	3b01      	subs	r3, #1
 8004808:	009c      	lsls	r4, r3, #2
 800480a:	18e4      	adds	r4, r4, r3
 800480c:	00a4      	lsls	r4, r4, #2
 800480e:	192c      	adds	r4, r5, r4
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	469a      	mov	sl, r3
 8004814:	f7fb fc80 	bl	8000118 <strlen>
 8004818:	4653      	mov	r3, sl
 800481a:	4681      	mov	r9, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02e      	beq.n	800487e <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004820:	4650      	mov	r0, sl
 8004822:	f7fb fc79 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004826:	4649      	mov	r1, r9
 8004828:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 800482a:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800482c:	1809      	adds	r1, r1, r0
 800482e:	4650      	mov	r0, sl
 8004830:	f00d fdac 	bl	801238c <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004834:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004836:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004838:	3a01      	subs	r2, #1
 800483a:	0093      	lsls	r3, r2, #2
 800483c:	189b      	adds	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	18eb      	adds	r3, r5, r3
 8004842:	68d8      	ldr	r0, [r3, #12]
 8004844:	1c7a      	adds	r2, r7, #1
 8004846:	1880      	adds	r0, r0, r2
 8004848:	4641      	mov	r1, r8
 800484a:	f00d ffa3 	bl	8012794 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 800484e:	7832      	ldrb	r2, [r6, #0]
 8004850:	3a01      	subs	r2, #1
 8004852:	0093      	lsls	r3, r2, #2
 8004854:	189b      	adds	r3, r3, r2
 8004856:	2213      	movs	r2, #19
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	18eb      	adds	r3, r5, r3
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	55da      	strb	r2, [r3, r7]
 8004860:	7833      	ldrb	r3, [r6, #0]
 8004862:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004864:	0098      	lsls	r0, r3, #2
 8004866:	18c0      	adds	r0, r0, r3
 8004868:	0080      	lsls	r0, r0, #2
 800486a:	1828      	adds	r0, r5, r0
 800486c:	68c3      	ldr	r3, [r0, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004872:	2000      	movs	r0, #0
}
 8004874:	bc1c      	pop	{r2, r3, r4}
 8004876:	4690      	mov	r8, r2
 8004878:	4699      	mov	r9, r3
 800487a:	46a2      	mov	sl, r4
 800487c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800487e:	3001      	adds	r0, #1
 8004880:	f00d fafc 	bl	8011e7c <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004884:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004886:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004888:	f00d ff84 	bl	8012794 <strcpy>
 800488c:	e7f1      	b.n	8004872 <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 800488e:	2214      	movs	r2, #20
 8004890:	2100      	movs	r1, #0
 8004892:	f00d fd49 	bl	8012328 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004896:	200e      	movs	r0, #14
 8004898:	e7ec      	b.n	8004874 <AddSnippet.part.0+0x80>
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	200016d4 	.word	0x200016d4
 80048a0:	20006860 	.word	0x20006860

080048a4 <StringToLowerCase>:
void StringToLowerCase(char *string){
 80048a4:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 80048a6:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 80048a8:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80048aa:	2c00      	cmp	r4, #0
 80048ac:	d00d      	beq.n	80048ca <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 80048ae:	2603      	movs	r6, #3
 80048b0:	f00d fad6 	bl	8011e60 <__locale_ctype_ptr>
 80048b4:	1900      	adds	r0, r0, r4
 80048b6:	7842      	ldrb	r2, [r0, #1]
 80048b8:	4032      	ands	r2, r6
 80048ba:	2a01      	cmp	r2, #1
 80048bc:	d100      	bne.n	80048c0 <StringToLowerCase+0x1c>
 80048be:	3420      	adds	r4, #32
 80048c0:	702c      	strb	r4, [r5, #0]
 80048c2:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80048c4:	782c      	ldrb	r4, [r5, #0]
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	d1f2      	bne.n	80048b0 <StringToLowerCase+0xc>
}
 80048ca:	bd70      	pop	{r4, r5, r6, pc}

080048cc <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80048cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ce:	4657      	mov	r7, sl
 80048d0:	464e      	mov	r6, r9
 80048d2:	46de      	mov	lr, fp
 80048d4:	4645      	mov	r5, r8
 80048d6:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048d8:	4ed8      	ldr	r6, [pc, #864]	; (8004c3c <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 80048da:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048dc:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 80048de:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80048e0:	2c05      	cmp	r4, #5
 80048e2:	d067      	beq.n	80049b4 <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048e4:	00a3      	lsls	r3, r4, #2
 80048e6:	4dd6      	ldr	r5, [pc, #856]	; (8004c40 <ParseSnippetCondition+0x374>)
 80048e8:	1918      	adds	r0, r3, r4
 80048ea:	0080      	lsls	r0, r0, #2
 80048ec:	469a      	mov	sl, r3
 80048ee:	182b      	adds	r3, r5, r0
 80048f0:	4699      	mov	r9, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80048f6:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80048f8:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80048fa:	1828      	adds	r0, r5, r0
 80048fc:	2204      	movs	r2, #4
 80048fe:	2100      	movs	r1, #0
 8004900:	f00d fd12 	bl	8012328 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004904:	783b      	ldrb	r3, [r7, #0]
 8004906:	2b62      	cmp	r3, #98	; 0x62
 8004908:	d102      	bne.n	8004910 <ParseSnippetCondition+0x44>
 800490a:	78bb      	ldrb	r3, [r7, #2]
 800490c:	2b2e      	cmp	r3, #46	; 0x2e
 800490e:	d057      	beq.n	80049c0 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004910:	1d33      	adds	r3, r6, #4
 8004912:	4698      	mov	r8, r3
 8004914:	0018      	movs	r0, r3
 8004916:	0039      	movs	r1, r7
 8004918:	f00d ff3c 	bl	8012794 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 800491c:	4cc9      	ldr	r4, [pc, #804]	; (8004c44 <ParseSnippetCondition+0x378>)
 800491e:	4640      	mov	r0, r8
 8004920:	0021      	movs	r1, r4
 8004922:	f00e fdb7 	bl	8013494 <strtok>
		secondPart =strtok( NULL," ");
 8004926:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004928:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 800492a:	2000      	movs	r0, #0
 800492c:	f00e fdb2 	bl	8013494 <strtok>
		thirdPart =strtok( NULL," ");
 8004930:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004932:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004934:	2000      	movs	r0, #0
 8004936:	f00e fdad 	bl	8013494 <strtok>
 800493a:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800493c:	2f00      	cmp	r7, #0
 800493e:	d02f      	beq.n	80049a0 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004940:	0038      	movs	r0, r7
 8004942:	f7fe ff01 	bl	8003748 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004946:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004948:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800494a:	d036      	beq.n	80049ba <ParseSnippetCondition+0xee>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d024      	beq.n	800499a <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004950:	2c00      	cmp	r4, #0
 8004952:	d025      	beq.n	80049a0 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004954:	0020      	movs	r0, r4
 8004956:	f7fe fef7 	bl	8003748 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 800495a:	2800      	cmp	r0, #0
 800495c:	d06b      	beq.n	8004a36 <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 800495e:	2204      	movs	r2, #4
 8004960:	7833      	ldrb	r3, [r6, #0]
 8004962:	009c      	lsls	r4, r3, #2
 8004964:	4699      	mov	r9, r3
 8004966:	18e3      	adds	r3, r4, r3
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800496c:	18eb      	adds	r3, r5, r3
 800496e:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004970:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004972:	4640      	mov	r0, r8
 8004974:	f7fe fef4 	bl	8003760 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004978:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800497a:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800497c:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800497e:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004980:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004982:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004984:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004986:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004988:	18ed      	adds	r5, r5, r3
 800498a:	786b      	ldrb	r3, [r5, #1]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004990:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004992:	3201      	adds	r2, #1
 8004994:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004996:	4698      	mov	r8, r3
 8004998:	e004      	b.n	80049a4 <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800499a:	2c00      	cmp	r4, #0
 800499c:	d100      	bne.n	80049a0 <ParseSnippetCondition+0xd4>
 800499e:	e07f      	b.n	8004aa0 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 80049a0:	2367      	movs	r3, #103	; 0x67
 80049a2:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049a4:	4640      	mov	r0, r8
 80049a6:	b00b      	add	sp, #44	; 0x2c
 80049a8:	bc3c      	pop	{r2, r3, r4, r5}
 80049aa:	4690      	mov	r8, r2
 80049ac:	4699      	mov	r9, r3
 80049ae:	46a2      	mov	sl, r4
 80049b0:	46ab      	mov	fp, r5
 80049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 80049b4:	230e      	movs	r3, #14
 80049b6:	4698      	mov	r8, r3
 80049b8:	e7f4      	b.n	80049a4 <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c8      	bne.n	8004950 <ParseSnippetCondition+0x84>
 80049be:	e7ef      	b.n	80049a0 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	3b30      	subs	r3, #48	; 0x30
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80049cc:	465b      	mov	r3, fp
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d8e8      	bhi.n	80049a4 <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049d2:	4649      	mov	r1, r9
 80049d4:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049d6:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80049d8:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049da:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80049dc:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80049de:	2207      	movs	r2, #7
 80049e0:	4999      	ldr	r1, [pc, #612]	; (8004c48 <ParseSnippetCondition+0x37c>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	9307      	str	r3, [sp, #28]
 80049e6:	f00d fedd 	bl	80127a4 <strncmp>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d03d      	beq.n	8004a6a <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80049ee:	220e      	movs	r2, #14
 80049f0:	4996      	ldr	r1, [pc, #600]	; (8004c4c <ParseSnippetCondition+0x380>)
 80049f2:	9807      	ldr	r0, [sp, #28]
 80049f4:	f00d fed6 	bl	80127a4 <strncmp>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d15e      	bne.n	8004aba <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80049fc:	2306      	movs	r3, #6
 80049fe:	464a      	mov	r2, r9
 8004a00:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004a02:	465b      	mov	r3, fp
 8004a04:	00da      	lsls	r2, r3, #3
 8004a06:	4b92      	ldr	r3, [pc, #584]	; (8004c50 <ParseSnippetCondition+0x384>)
 8004a08:	445a      	add	r2, fp
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	7a1b      	ldrb	r3, [r3, #8]
 8004a0e:	079b      	lsls	r3, r3, #30
 8004a10:	d40e      	bmi.n	8004a30 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a12:	2301      	movs	r3, #1
 8004a14:	9305      	str	r3, [sp, #20]
 8004a16:	4643      	mov	r3, r8
 8004a18:	2201      	movs	r2, #1
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	9303      	str	r3, [sp, #12]
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2100      	movs	r1, #0
 8004a26:	2300      	movs	r3, #0
 8004a28:	4658      	mov	r0, fp
 8004a2a:	f006 fc59 	bl	800b2e0 <SetButtonEvents>
 8004a2e:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004a30:	3401      	adds	r4, #1
 8004a32:	7034      	strb	r4, [r6, #0]
 8004a34:	e7b6      	b.n	80049a4 <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a36:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004a38:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a3a:	0093      	lsls	r3, r2, #2
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	2203      	movs	r2, #3
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a44:	18eb      	adds	r3, r5, r3
 8004a46:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004a48:	f00d f99a 	bl	8011d80 <atof>
 8004a4c:	f7fe f8bc 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a50:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004a52:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a54:	009c      	lsls	r4, r3, #2
 8004a56:	18e0      	adds	r0, r4, r3
 8004a58:	0080      	lsls	r0, r0, #2
 8004a5a:	3006      	adds	r0, #6
 8004a5c:	1828      	adds	r0, r5, r0
 8004a5e:	2204      	movs	r2, #4
 8004a60:	a909      	add	r1, sp, #36	; 0x24
 8004a62:	4699      	mov	r9, r3
 8004a64:	f00d fc57 	bl	8012316 <memcpy>
 8004a68:	e783      	b.n	8004972 <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004a70:	4659      	mov	r1, fp
 8004a72:	4b77      	ldr	r3, [pc, #476]	; (8004c50 <ParseSnippetCondition+0x384>)
 8004a74:	00ca      	lsls	r2, r1, #3
 8004a76:	445a      	add	r2, fp
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	7a1b      	ldrb	r3, [r3, #8]
 8004a7e:	421a      	tst	r2, r3
 8004a80:	d1d6      	bne.n	8004a30 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a82:	2301      	movs	r3, #1
 8004a84:	9305      	str	r3, [sp, #20]
 8004a86:	4643      	mov	r3, r8
 8004a88:	2200      	movs	r2, #0
 8004a8a:	9304      	str	r3, [sp, #16]
 8004a8c:	9303      	str	r3, [sp, #12]
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	4658      	mov	r0, fp
 8004a98:	f006 fc22 	bl	800b2e0 <SetButtonEvents>
 8004a9c:	7834      	ldrb	r4, [r6, #0]
 8004a9e:	e7c7      	b.n	8004a30 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	7832      	ldrb	r2, [r6, #0]
 8004aa4:	0093      	lsls	r3, r2, #2
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004aac:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004aae:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ab0:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ab2:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ab4:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	e774      	b.n	80049a4 <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004aba:	220c      	movs	r2, #12
 8004abc:	4965      	ldr	r1, [pc, #404]	; (8004c54 <ParseSnippetCondition+0x388>)
 8004abe:	9807      	ldr	r0, [sp, #28]
 8004ac0:	f00d fe70 	bl	80127a4 <strncmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d131      	bne.n	8004b2c <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004ac8:	465b      	mov	r3, fp
 8004aca:	00da      	lsls	r2, r3, #3
 8004acc:	4b60      	ldr	r3, [pc, #384]	; (8004c50 <ParseSnippetCondition+0x384>)
 8004ace:	445a      	add	r2, fp
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	789a      	ldrb	r2, [r3, #2]
 8004ad4:	2a00      	cmp	r2, #0
 8004ad6:	d063      	beq.n	8004ba0 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004ad8:	78da      	ldrb	r2, [r3, #3]
 8004ada:	2a00      	cmp	r2, #0
 8004adc:	d07d      	beq.n	8004bda <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ade:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004ae0:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004ae2:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1a3      	bne.n	8004a30 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004ae8:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004aea:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004aec:	4453      	add	r3, sl
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	18eb      	adds	r3, r5, r3
 8004af2:	3a01      	subs	r2, #1
 8004af4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004af6:	300f      	adds	r0, #15
 8004af8:	f00d f947 	bl	8011d8a <atoi>
 8004afc:	7832      	ldrb	r2, [r6, #0]
 8004afe:	b2c0      	uxtb	r0, r0
 8004b00:	0093      	lsls	r3, r2, #2
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b08:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004b0a:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004b0c:	9305      	str	r3, [sp, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2200      	movs	r2, #0
 8004b12:	2100      	movs	r1, #0
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	9001      	str	r0, [sp, #4]
 8004b1c:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b1e:	4658      	mov	r0, fp
 8004b20:	f006 fbde 	bl	800b2e0 <SetButtonEvents>
					status =BOS_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	7834      	ldrb	r4, [r6, #0]
 8004b28:	4698      	mov	r8, r3
 8004b2a:	e781      	b.n	8004a30 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004b2c:	220d      	movs	r2, #13
 8004b2e:	494a      	ldr	r1, [pc, #296]	; (8004c58 <ParseSnippetCondition+0x38c>)
 8004b30:	9807      	ldr	r0, [sp, #28]
 8004b32:	f00d fe37 	bl	80127a4 <strncmp>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d000      	beq.n	8004b3c <ParseSnippetCondition+0x270>
 8004b3a:	e779      	b.n	8004a30 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004b3c:	465b      	mov	r3, fp
 8004b3e:	4a44      	ldr	r2, [pc, #272]	; (8004c50 <ParseSnippetCondition+0x384>)
 8004b40:	00d9      	lsls	r1, r3, #3
 8004b42:	18cb      	adds	r3, r1, r3
 8004b44:	18d3      	adds	r3, r2, r3
 8004b46:	7958      	ldrb	r0, [r3, #5]
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d05e      	beq.n	8004c0a <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004b4c:	799b      	ldrb	r3, [r3, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <ParseSnippetCondition+0x288>
 8004b52:	e083      	b.n	8004c5c <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004b54:	4459      	add	r1, fp
 8004b56:	1852      	adds	r2, r2, r1
 8004b58:	79d3      	ldrb	r3, [r2, #7]
 8004b5a:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004b5c:	230d      	movs	r3, #13
 8004b5e:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004b60:	464b      	mov	r3, r9
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d000      	beq.n	8004b68 <ParseSnippetCondition+0x29c>
 8004b66:	e763      	b.n	8004a30 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b68:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b6a:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b6c:	4698      	mov	r8, r3
 8004b6e:	435c      	muls	r4, r3
 8004b70:	3b06      	subs	r3, #6
 8004b72:	192c      	adds	r4, r5, r4
 8004b74:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b76:	3010      	adds	r0, #16
 8004b78:	f00d f907 	bl	8011d8a <atoi>
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	7833      	ldrb	r3, [r6, #0]
 8004b80:	b2c0      	uxtb	r0, r0
 8004b82:	4353      	muls	r3, r2
 8004b84:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b86:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b88:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	9303      	str	r3, [sp, #12]
 8004b90:	9302      	str	r3, [sp, #8]
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9004      	str	r0, [sp, #16]
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	e7be      	b.n	8004b1e <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004ba0:	2309      	movs	r3, #9
 8004ba2:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004ba4:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004ba6:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004ba8:	300f      	adds	r0, #15
 8004baa:	f00d f8ee 	bl	8011d8a <atoi>
 8004bae:	7831      	ldrb	r1, [r6, #0]
 8004bb0:	b2c3      	uxtb	r3, r0
 8004bb2:	008a      	lsls	r2, r1, #2
 8004bb4:	1852      	adds	r2, r2, r1
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bba:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bbc:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bbe:	9205      	str	r2, [sp, #20]
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	9204      	str	r2, [sp, #16]
 8004bc4:	9203      	str	r2, [sp, #12]
 8004bc6:	9202      	str	r2, [sp, #8]
 8004bc8:	9201      	str	r2, [sp, #4]
 8004bca:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4658      	mov	r0, fp
 8004bd2:	f006 fb85 	bl	800b2e0 <SetButtonEvents>
 8004bd6:	7834      	ldrb	r4, [r6, #0]
 8004bd8:	e72a      	b.n	8004a30 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004bda:	230a      	movs	r3, #10
 8004bdc:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bde:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004be0:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004be2:	300f      	adds	r0, #15
 8004be4:	f00d f8d1 	bl	8011d8a <atoi>
 8004be8:	7832      	ldrb	r2, [r6, #0]
 8004bea:	b2c0      	uxtb	r0, r0
 8004bec:	0093      	lsls	r3, r2, #2
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bf4:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004bf6:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bf8:	9305      	str	r3, [sp, #20]
 8004bfa:	4643      	mov	r3, r8
 8004bfc:	9000      	str	r0, [sp, #0]
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c06:	2300      	movs	r3, #0
 8004c08:	e7e0      	b.n	8004bcc <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c0e:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c10:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c12:	3010      	adds	r0, #16
 8004c14:	f00d f8b9 	bl	8011d8a <atoi>
 8004c18:	7832      	ldrb	r2, [r6, #0]
 8004c1a:	b2c0      	uxtb	r0, r0
 8004c1c:	0093      	lsls	r3, r2, #2
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c24:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c26:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	4643      	mov	r3, r8
 8004c2c:	9002      	str	r0, [sp, #8]
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	9303      	str	r3, [sp, #12]
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2300      	movs	r3, #0
 8004c38:	e7c8      	b.n	8004bcc <ParseSnippetCondition+0x300>
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	200016d4 	.word	0x200016d4
 8004c40:	20006860 	.word	0x20006860
 8004c44:	08017340 	.word	0x08017340
 8004c48:	080180d4 	.word	0x080180d4
 8004c4c:	08017908 	.word	0x08017908
 8004c50:	200023a0 	.word	0x200023a0
 8004c54:	08017918 	.word	0x08017918
 8004c58:	08017928 	.word	0x08017928
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c5c:	0023      	movs	r3, r4
 8004c5e:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c60:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004c62:	4453      	add	r3, sl
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	18eb      	adds	r3, r5, r3
 8004c68:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c6a:	3010      	adds	r0, #16
 8004c6c:	f00d f88d 	bl	8011d8a <atoi>
 8004c70:	7832      	ldrb	r2, [r6, #0]
 8004c72:	b2c0      	uxtb	r0, r0
 8004c74:	0093      	lsls	r3, r2, #2
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c7c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c7e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	2300      	movs	r3, #0
 8004c84:	9003      	str	r0, [sp, #12]
 8004c86:	9304      	str	r3, [sp, #16]
 8004c88:	9302      	str	r3, [sp, #8]
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2100      	movs	r1, #0
 8004c92:	e744      	b.n	8004b1e <ParseSnippetCondition+0x252>

08004c94 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c96:	46de      	mov	lr, fp
 8004c98:	4657      	mov	r7, sl
 8004c9a:	4645      	mov	r5, r8
 8004c9c:	464e      	mov	r6, r9
 8004c9e:	468a      	mov	sl, r1
 8004ca0:	b5e0      	push	{r5, r6, r7, lr}
 8004ca2:	b08b      	sub	sp, #44	; 0x2c
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2209      	movs	r2, #9
 8004cac:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004cae:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cb0:	f00d fb3a 	bl	8012328 <memset>
 8004cb4:	4bcd      	ldr	r3, [pc, #820]	; (8004fec <CLI_CommandParser+0x358>)
				if(id == myID){
 8004cb6:	4656      	mov	r6, sl
 8004cb8:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cba:	4bcd      	ldr	r3, [pc, #820]	; (8004ff0 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004cbc:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	e02d      	b.n	8004d1e <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004cc2:	2206      	movs	r2, #6
 8004cc4:	49cb      	ldr	r1, [pc, #812]	; (8004ff4 <CLI_CommandParser+0x360>)
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	f00d fd6c 	bl	80127a4 <strncmp>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d057      	beq.n	8004d80 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004cd0:	2f02      	cmp	r7, #2
 8004cd2:	d100      	bne.n	8004cd6 <CLI_CommandParser+0x42>
 8004cd4:	e0d2      	b.n	8004e7c <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004cd6:	212e      	movs	r1, #46	; 0x2e
 8004cd8:	0028      	movs	r0, r5
 8004cda:	f00d fd4d 	bl	8012778 <strchr>
 8004cde:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ce0:	d007      	beq.n	8004cf2 <CLI_CommandParser+0x5e>
 8004ce2:	3803      	subs	r0, #3
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	f00d fd5c 	bl	80127a4 <strncmp>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d000      	beq.n	8004cf2 <CLI_CommandParser+0x5e>
 8004cf0:	e079      	b.n	8004de6 <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004cf2:	2299      	movs	r2, #153	; 0x99
 8004cf4:	0021      	movs	r1, r4
 8004cf6:	0092      	lsls	r2, r2, #2
 8004cf8:	0028      	movs	r0, r5
 8004cfa:	f008 f9b3 	bl	800d064 <FreeRTOS_CLIProcessCommand>
 8004cfe:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d00:	7823      	ldrb	r3, [r4, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d139      	bne.n	8004d7a <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d06:	0020      	movs	r0, r4
 8004d08:	f7fb fa06 	bl	8000118 <strlen>
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	0002      	movs	r2, r0
 8004d10:	0020      	movs	r0, r4
 8004d12:	f00d fb09 	bl	8012328 <memset>
	} while(xReturned != pdFALSE);
 8004d16:	4653      	mov	r3, sl
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d100      	bne.n	8004d1e <CLI_CommandParser+0x8a>
 8004d1c:	e1d0      	b.n	80050c0 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004d1e:	0028      	movs	r0, r5
 8004d20:	f7ff fdc0 	bl	80048a4 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d24:	2336      	movs	r3, #54	; 0x36
 8004d26:	4699      	mov	r9, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	464a      	mov	r2, r9
 8004d2c:	5c9f      	ldrb	r7, [r3, r2]
 8004d2e:	2f00      	cmp	r7, #0
 8004d30:	d1c7      	bne.n	8004cc2 <CLI_CommandParser+0x2e>
 8004d32:	3a33      	subs	r2, #51	; 0x33
 8004d34:	49b0      	ldr	r1, [pc, #704]	; (8004ff8 <CLI_CommandParser+0x364>)
 8004d36:	0028      	movs	r0, r5
 8004d38:	f00d fd34 	bl	80127a4 <strncmp>
 8004d3c:	1e07      	subs	r7, r0, #0
 8004d3e:	d1ca      	bne.n	8004cd6 <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d40:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004d42:	f7ff fdc3 	bl	80048cc <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d000      	beq.n	8004d4c <CLI_CommandParser+0xb8>
 8004d4a:	e09f      	b.n	8004e8c <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	4642      	mov	r2, r8
 8004d50:	4649      	mov	r1, r9
 8004d52:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004d54:	330b      	adds	r3, #11
 8004d56:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d58:	2e00      	cmp	r6, #0
 8004d5a:	d027      	beq.n	8004dac <CLI_CommandParser+0x118>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d60:	0020      	movs	r0, r4
 8004d62:	f7fb f9d9 	bl	8000118 <strlen>
 8004d66:	2301      	movs	r3, #1
 8004d68:	425b      	negs	r3, r3
 8004d6a:	b282      	uxth	r2, r0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	0021      	movs	r1, r4
 8004d70:	3333      	adds	r3, #51	; 0x33
 8004d72:	9802      	ldr	r0, [sp, #8]
 8004d74:	f007 ff4c 	bl	800cc10 <writePxMutex>
 8004d78:	e7c5      	b.n	8004d06 <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d0c3      	beq.n	8004d06 <CLI_CommandParser+0x72>
 8004d7e:	e7ef      	b.n	8004d60 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004d80:	4643      	mov	r3, r8
 8004d82:	464a      	mov	r2, r9
 8004d84:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	0093      	lsls	r3, r2, #2
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	4a9b      	ldr	r2, [pc, #620]	; (8004ffc <CLI_CommandParser+0x368>)
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	18d3      	adds	r3, r2, r3
 8004d94:	2201      	movs	r2, #1
 8004d96:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004d98:	f004 fde2 	bl	8009960 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004d9c:	2241      	movs	r2, #65	; 0x41
 8004d9e:	4998      	ldr	r1, [pc, #608]	; (8005000 <CLI_CommandParser+0x36c>)
 8004da0:	0020      	movs	r0, r4
 8004da2:	f00d fab8 	bl	8012316 <memcpy>
 8004da6:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1d5      	bne.n	8004d58 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004dac:	0020      	movs	r0, r4
 8004dae:	f7fb f9b3 	bl	8000118 <strlen>
 8004db2:	2100      	movs	r1, #0
 8004db4:	0002      	movs	r2, r0
 8004db6:	0020      	movs	r0, r4
 8004db8:	46b2      	mov	sl, r6
 8004dba:	f00d fab5 	bl	8012328 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004dbe:	2209      	movs	r2, #9
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	a807      	add	r0, sp, #28
 8004dc4:	f00d fab0 	bl	8012328 <memset>
	if(!recordSnippet && enableOutput)
 8004dc8:	2336      	movs	r3, #54	; 0x36
 8004dca:	4642      	mov	r2, r8
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <CLI_CommandParser+0x144>
 8004dd2:	4653      	mov	r3, sl
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d16a      	bne.n	8004eae <CLI_CommandParser+0x21a>
}
 8004dd8:	b00b      	add	sp, #44	; 0x2c
 8004dda:	bc3c      	pop	{r2, r3, r4, r5}
 8004ddc:	4690      	mov	r8, r2
 8004dde:	4699      	mov	r9, r3
 8004de0:	46a2      	mov	sl, r4
 8004de2:	46ab      	mov	fp, r5
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004de6:	f00d f83b 	bl	8011e60 <__locale_ctype_ptr>
 8004dea:	787b      	ldrb	r3, [r7, #1]
 8004dec:	18c0      	adds	r0, r0, r3
 8004dee:	7843      	ldrb	r3, [r0, #1]
 8004df0:	075b      	lsls	r3, r3, #29
 8004df2:	d500      	bpl.n	8004df6 <CLI_CommandParser+0x162>
 8004df4:	e77d      	b.n	8004cf2 <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004df6:	1b7a      	subs	r2, r7, r5
 8004df8:	0029      	movs	r1, r5
 8004dfa:	a807      	add	r0, sp, #28
 8004dfc:	f00d fce3 	bl	80127c6 <strncpy>
				id =GetID(idString);
 8004e00:	a807      	add	r0, sp, #28
 8004e02:	f7ff fa1d 	bl	8004240 <GetID>
				if(id == myID){
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8004e08:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	4298      	cmp	r0, r3
 8004e10:	d057      	beq.n	8004ec2 <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	2b64      	cmp	r3, #100	; 0x64
 8004e16:	d100      	bne.n	8004e1a <CLI_CommandParser+0x186>
 8004e18:	e0da      	b.n	8004fd0 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	2b66      	cmp	r3, #102	; 0x66
 8004e1e:	d100      	bne.n	8004e22 <CLI_CommandParser+0x18e>
 8004e20:	e0dd      	b.n	8004fde <CLI_CommandParser+0x34a>
 8004e22:	1c7b      	adds	r3, r7, #1
 8004e24:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	2bff      	cmp	r3, #255	; 0xff
 8004e2a:	d100      	bne.n	8004e2e <CLI_CommandParser+0x19a>
 8004e2c:	e08b      	b.n	8004f46 <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e2e:	466b      	mov	r3, sp
 8004e30:	7b1b      	ldrb	r3, [r3, #12]
 8004e32:	4699      	mov	r9, r3
 8004e34:	2bfe      	cmp	r3, #254	; 0xfe
 8004e36:	d100      	bne.n	8004e3a <CLI_CommandParser+0x1a6>
 8004e38:	e102      	b.n	8005040 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e3a:	2206      	movs	r2, #6
 8004e3c:	4972      	ldr	r1, [pc, #456]	; (8005008 <CLI_CommandParser+0x374>)
 8004e3e:	9804      	ldr	r0, [sp, #16]
 8004e40:	f00d fcb0 	bl	80127a4 <strncmp>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d144      	bne.n	8004ed2 <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e48:	4b70      	ldr	r3, [pc, #448]	; (800500c <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e4a:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e4c:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e4e:	2119      	movs	r1, #25
 8004e50:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e52:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e54:	f003 f962 	bl	800811c <SendMessageToModule>
						osDelay(100);
 8004e58:	2064      	movs	r0, #100	; 0x64
 8004e5a:	f008 f873 	bl	800cf44 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e5e:	4b6c      	ldr	r3, [pc, #432]	; (8005010 <CLI_CommandParser+0x37c>)
 8004e60:	4649      	mov	r1, r9
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	4b67      	ldr	r3, [pc, #412]	; (8005004 <CLI_CommandParser+0x370>)
 8004e66:	7818      	ldrb	r0, [r3, #0]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f004 fe9d 	bl	8009ba8 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004e6e:	4653      	mov	r3, sl
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b60      	cmp	r3, #96	; 0x60
 8004e74:	d100      	bne.n	8004e78 <CLI_CommandParser+0x1e4>
 8004e76:	e095      	b.n	8004fa4 <CLI_CommandParser+0x310>
 8004e78:	7823      	ldrb	r3, [r4, #0]
 8004e7a:	e795      	b.n	8004da8 <CLI_CommandParser+0x114>
 8004e7c:	0028      	movs	r0, r5
 8004e7e:	f7ff fcb9 	bl	80047f4 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d10c      	bne.n	8004ea0 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 8004e86:	230d      	movs	r3, #13
 8004e88:	7023      	strb	r3, [r4, #0]
 8004e8a:	e765      	b.n	8004d58 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e8c:	2252      	movs	r2, #82	; 0x52
 8004e8e:	4961      	ldr	r1, [pc, #388]	; (8005014 <CLI_CommandParser+0x380>)
 8004e90:	0020      	movs	r0, r4
 8004e92:	f00d fa40 	bl	8012316 <memcpy>
				recordSnippet =0;
 8004e96:	4643      	mov	r3, r8
 8004e98:	464a      	mov	r2, r9
 8004e9a:	549f      	strb	r7, [r3, r2]
 8004e9c:	7823      	ldrb	r3, [r4, #0]
 8004e9e:	e783      	b.n	8004da8 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004ea0:	2252      	movs	r2, #82	; 0x52
 8004ea2:	495c      	ldr	r1, [pc, #368]	; (8005014 <CLI_CommandParser+0x380>)
 8004ea4:	0020      	movs	r0, r4
 8004ea6:	f00d fa36 	bl	8012316 <memcpy>
 8004eaa:	7823      	ldrb	r3, [r4, #0]
 8004eac:	e77c      	b.n	8004da8 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004eae:	2301      	movs	r3, #1
 8004eb0:	425b      	negs	r3, r3
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2238      	movs	r2, #56	; 0x38
 8004eb6:	3333      	adds	r3, #51	; 0x33
 8004eb8:	4957      	ldr	r1, [pc, #348]	; (8005018 <CLI_CommandParser+0x384>)
 8004eba:	9802      	ldr	r0, [sp, #8]
 8004ebc:	f007 fea8 	bl	800cc10 <writePxMutex>
}
 8004ec0:	e78a      	b.n	8004dd8 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ec2:	2299      	movs	r2, #153	; 0x99
 8004ec4:	1c78      	adds	r0, r7, #1
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	0021      	movs	r1, r4
 8004eca:	f008 f8cb 	bl	800d064 <FreeRTOS_CLIProcessCommand>
 8004ece:	4682      	mov	sl, r0
 8004ed0:	e716      	b.n	8004d00 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ed2:	0028      	movs	r0, r5
 8004ed4:	f7fb f920 	bl	8000118 <strlen>
 8004ed8:	0007      	movs	r7, r0
 8004eda:	a807      	add	r0, sp, #28
 8004edc:	f7fb f91c 	bl	8000118 <strlen>
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	1e7a      	subs	r2, r7, #1
 8004ee4:	1a12      	subs	r2, r2, r0
 8004ee6:	9904      	ldr	r1, [sp, #16]
 8004ee8:	484c      	ldr	r0, [pc, #304]	; (800501c <CLI_CommandParser+0x388>)
 8004eea:	f00d fc6c 	bl	80127c6 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004eee:	0028      	movs	r0, r5
 8004ef0:	f7fb f912 	bl	8000118 <strlen>
 8004ef4:	4653      	mov	r3, sl
 8004ef6:	3801      	subs	r0, #1
 8004ef8:	1ac2      	subs	r2, r0, r3
 8004efa:	b292      	uxth	r2, r2
 8004efc:	2117      	movs	r1, #23
 8004efe:	4648      	mov	r0, r9
 8004f00:	f003 f90c 	bl	800811c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004f04:	9a03      	ldr	r2, [sp, #12]
 8004f06:	4946      	ldr	r1, [pc, #280]	; (8005020 <CLI_CommandParser+0x38c>)
 8004f08:	0020      	movs	r0, r4
 8004f0a:	f00d fc07 	bl	801271c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004f0e:	7823      	ldrb	r3, [r4, #0]
 8004f10:	0020      	movs	r0, r4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <CLI_CommandParser+0x29e>
 8004f16:	f7fb f8ff 	bl	8000118 <strlen>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d00b      	beq.n	8004f38 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004f20:	2301      	movs	r3, #1
 8004f22:	b282      	uxth	r2, r0
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	0021      	movs	r1, r4
 8004f28:	3331      	adds	r3, #49	; 0x31
 8004f2a:	9802      	ldr	r0, [sp, #8]
 8004f2c:	f007 fe70 	bl	800cc10 <writePxMutex>
 8004f30:	0020      	movs	r0, r4
 8004f32:	f7fb f8f1 	bl	8000118 <strlen>
 8004f36:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f38:	2100      	movs	r1, #0
 8004f3a:	0020      	movs	r0, r4
 8004f3c:	f00d f9f4 	bl	8012328 <memset>
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <CLI_CommandParser+0x378>)
 8004f42:	469a      	mov	sl, r3
 8004f44:	e793      	b.n	8004e6e <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f46:	221a      	movs	r2, #26
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4836      	ldr	r0, [pc, #216]	; (8005024 <CLI_CommandParser+0x390>)
 8004f4c:	f00d f9ec 	bl	8012328 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f50:	0028      	movs	r0, r5
 8004f52:	f7fb f8e1 	bl	8000118 <strlen>
 8004f56:	0007      	movs	r7, r0
 8004f58:	a807      	add	r0, sp, #28
 8004f5a:	f7fb f8dd 	bl	8000118 <strlen>
 8004f5e:	4681      	mov	r9, r0
 8004f60:	3f01      	subs	r7, #1
 8004f62:	1a3a      	subs	r2, r7, r0
 8004f64:	9f04      	ldr	r7, [sp, #16]
 8004f66:	482d      	ldr	r0, [pc, #180]	; (800501c <CLI_CommandParser+0x388>)
 8004f68:	0039      	movs	r1, r7
 8004f6a:	f00d fc2c 	bl	80127c6 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f6e:	0028      	movs	r0, r5
 8004f70:	f7fb f8d2 	bl	8000118 <strlen>
 8004f74:	464b      	mov	r3, r9
 8004f76:	1ac3      	subs	r3, r0, r3
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2217      	movs	r2, #23
 8004f7c:	21ff      	movs	r1, #255	; 0xff
 8004f7e:	9805      	ldr	r0, [sp, #20]
 8004f80:	f003 f886 	bl	8008090 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f84:	2299      	movs	r2, #153	; 0x99
 8004f86:	0021      	movs	r1, r4
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	0038      	movs	r0, r7
 8004f8c:	f008 f86a 	bl	800d064 <FreeRTOS_CLIProcessCommand>
 8004f90:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f92:	0020      	movs	r0, r4
 8004f94:	f7fb f8c0 	bl	8000118 <strlen>
 8004f98:	221d      	movs	r2, #29
 8004f9a:	1820      	adds	r0, r4, r0
 8004f9c:	4922      	ldr	r1, [pc, #136]	; (8005028 <CLI_CommandParser+0x394>)
 8004f9e:	f00d f9ba 	bl	8012316 <memcpy>
 8004fa2:	e6ad      	b.n	8004d00 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004fa4:	21fa      	movs	r1, #250	; 0xfa
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	0089      	lsls	r1, r1, #2
 8004faa:	f009 fa83 	bl	800e4b4 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004fae:	4b1f      	ldr	r3, [pc, #124]	; (800502c <CLI_CommandParser+0x398>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d100      	bne.n	8004fb8 <CLI_CommandParser+0x324>
 8004fb6:	e75f      	b.n	8004e78 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fba:	491e      	ldr	r1, [pc, #120]	; (8005034 <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 8004fbc:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fbe:	0020      	movs	r0, r4
							++timedoutMsg;
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	0022      	movs	r2, r4
 8004fc8:	f00d fba8 	bl	801271c <sprintf>
 8004fcc:	7823      	ldrb	r3, [r4, #0]
 8004fce:	e6eb      	b.n	8004da8 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004fd0:	2227      	movs	r2, #39	; 0x27
 8004fd2:	4919      	ldr	r1, [pc, #100]	; (8005038 <CLI_CommandParser+0x3a4>)
 8004fd4:	0020      	movs	r0, r4
 8004fd6:	f00d f99e 	bl	8012316 <memcpy>
 8004fda:	7823      	ldrb	r3, [r4, #0]
 8004fdc:	e6e4      	b.n	8004da8 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004fde:	2225      	movs	r2, #37	; 0x25
 8004fe0:	4916      	ldr	r1, [pc, #88]	; (800503c <CLI_CommandParser+0x3a8>)
 8004fe2:	0020      	movs	r0, r4
 8004fe4:	f00d f997 	bl	8012316 <memcpy>
 8004fe8:	7823      	ldrb	r3, [r4, #0]
 8004fea:	e6dd      	b.n	8004da8 <CLI_CommandParser+0x114>
 8004fec:	200016d4 	.word	0x200016d4
 8004ff0:	080179dc 	.word	0x080179dc
 8004ff4:	08017990 	.word	0x08017990
 8004ff8:	08017938 	.word	0x08017938
 8004ffc:	20006860 	.word	0x20006860
 8005000:	08017998 	.word	0x08017998
 8005004:	20000a98 	.word	0x20000a98
 8005008:	08017a7c 	.word	0x08017a7c
 800500c:	200067c4 	.word	0x200067c4
 8005010:	20000c28 	.word	0x20000c28
 8005014:	0801793c 	.word	0x0801793c
 8005018:	08017ac8 	.word	0x08017ac8
 800501c:	20000b3c 	.word	0x20000b3c
 8005020:	08017a84 	.word	0x08017a84
 8005024:	20000da8 	.word	0x20000da8
 8005028:	08017a30 	.word	0x08017a30
 800502c:	20000c3c 	.word	0x20000c3c
 8005030:	20001fa4 	.word	0x20001fa4
 8005034:	08017aa8 	.word	0x08017aa8
 8005038:	080179e0 	.word	0x080179e0
 800503c:	08017a08 	.word	0x08017a08
					group =id >> 8;
 8005040:	4640      	mov	r0, r8
 8005042:	2237      	movs	r2, #55	; 0x37
 8005044:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005046:	2100      	movs	r1, #0
					group =id >> 8;
 8005048:	121f      	asrs	r7, r3, #8
 800504a:	b2fb      	uxtb	r3, r7
 800504c:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800504e:	3a1d      	subs	r2, #29
 8005050:	481c      	ldr	r0, [pc, #112]	; (80050c4 <CLI_CommandParser+0x430>)
					group =id >> 8;
 8005052:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005054:	f00d f968 	bl	8012328 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005058:	0028      	movs	r0, r5
 800505a:	f7fb f85d 	bl	8000118 <strlen>
 800505e:	0007      	movs	r7, r0
 8005060:	a807      	add	r0, sp, #28
 8005062:	f7fb f859 	bl	8000118 <strlen>
 8005066:	4681      	mov	r9, r0
 8005068:	3f01      	subs	r7, #1
 800506a:	1a3a      	subs	r2, r7, r0
 800506c:	9904      	ldr	r1, [sp, #16]
 800506e:	4816      	ldr	r0, [pc, #88]	; (80050c8 <CLI_CommandParser+0x434>)
 8005070:	f00d fba9 	bl	80127c6 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005074:	0028      	movs	r0, r5
 8005076:	f7fb f84f 	bl	8000118 <strlen>
 800507a:	464f      	mov	r7, r9
 800507c:	1bc3      	subs	r3, r0, r7
 800507e:	b29b      	uxth	r3, r3
 8005080:	2217      	movs	r2, #23
 8005082:	9903      	ldr	r1, [sp, #12]
 8005084:	9805      	ldr	r0, [sp, #20]
 8005086:	f003 f803 	bl	8008090 <BroadcastMessage>
					if(InGroup(myID,group))
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <CLI_CommandParser+0x438>)
 800508c:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <CLI_CommandParser+0x43c>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4641      	mov	r1, r8
 8005092:	3b01      	subs	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	5a9b      	ldrh	r3, [r3, r2]
 8005098:	2237      	movs	r2, #55	; 0x37
 800509a:	5c8a      	ldrb	r2, [r1, r2]
 800509c:	4113      	asrs	r3, r2
 800509e:	07db      	lsls	r3, r3, #31
 80050a0:	d406      	bmi.n	80050b0 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80050a2:	ab07      	add	r3, sp, #28
 80050a4:	0022      	movs	r2, r4
 80050a6:	490b      	ldr	r1, [pc, #44]	; (80050d4 <CLI_CommandParser+0x440>)
 80050a8:	0020      	movs	r0, r4
 80050aa:	f00d fb37 	bl	801271c <sprintf>
 80050ae:	e627      	b.n	8004d00 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050b0:	2299      	movs	r2, #153	; 0x99
 80050b2:	0021      	movs	r1, r4
 80050b4:	0092      	lsls	r2, r2, #2
 80050b6:	9804      	ldr	r0, [sp, #16]
 80050b8:	f007 ffd4 	bl	800d064 <FreeRTOS_CLIProcessCommand>
 80050bc:	4682      	mov	sl, r0
 80050be:	e7f0      	b.n	80050a2 <CLI_CommandParser+0x40e>
 80050c0:	46b2      	mov	sl, r6
 80050c2:	e67c      	b.n	8004dbe <CLI_CommandParser+0x12a>
 80050c4:	20000da8 	.word	0x20000da8
 80050c8:	20000b3c 	.word	0x20000b3c
 80050cc:	20000a98 	.word	0x20000a98
 80050d0:	20000a9c 	.word	0x20000a9c
 80050d4:	08017a50 	.word	0x08017a50

080050d8 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	46de      	mov	lr, fp
 80050dc:	4645      	mov	r5, r8
 80050de:	4657      	mov	r7, sl
 80050e0:	464e      	mov	r6, r9
 80050e2:	b5e0      	push	{r5, r6, r7, lr}
 80050e4:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80050e6:	ab02      	add	r3, sp, #8
 80050e8:	469c      	mov	ip, r3
 80050ea:	250f      	movs	r5, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050ec:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80050ee:	2300      	movs	r3, #0
 80050f0:	4465      	add	r5, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050f2:	4249      	negs	r1, r1
 80050f4:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 80050f6:	702b      	strb	r3, [r5, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80050f8:	f009 f9dc 	bl	800e4b4 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80050fc:	f008 f82a 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005100:	23e1      	movs	r3, #225	; 0xe1
 8005102:	4a50      	ldr	r2, [pc, #320]	; (8005244 <prvCLITask+0x16c>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005104:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005106:	6892      	ldr	r2, [r2, #8]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	429a      	cmp	r2, r3
 800510c:	d100      	bne.n	8005110 <prvCLITask+0x38>
 800510e:	e094      	b.n	800523a <prvCLITask+0x162>
 8005110:	4b4d      	ldr	r3, [pc, #308]	; (8005248 <prvCLITask+0x170>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005112:	2401      	movs	r4, #1
 8005114:	001e      	movs	r6, r3
 8005116:	7819      	ldrb	r1, [r3, #0]
			if(port != PcPort)
 8005118:	428c      	cmp	r4, r1
 800511a:	d005      	beq.n	8005128 <prvCLITask+0x50>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800511c:	21e1      	movs	r1, #225	; 0xe1
 800511e:	0020      	movs	r0, r4
 8005120:	0309      	lsls	r1, r1, #12
 8005122:	f007 fdc7 	bl	800ccb4 <UpdateBaudrate>
 8005126:	7831      	ldrb	r1, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005128:	3401      	adds	r4, #1
 800512a:	b2e4      	uxtb	r4, r4
 800512c:	2c06      	cmp	r4, #6
 800512e:	d1f3      	bne.n	8005118 <prvCLITask+0x40>
 8005130:	46b1      	mov	r9, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005132:	4846      	ldr	r0, [pc, #280]	; (800524c <prvCLITask+0x174>)
 8005134:	4b46      	ldr	r3, [pc, #280]	; (8005250 <prvCLITask+0x178>)
 8005136:	0004      	movs	r4, r0
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	3438      	adds	r4, #56	; 0x38
 800513c:	0053      	lsls	r3, r2, #1
 800513e:	189b      	adds	r3, r3, r2
 8005140:	4a44      	ldr	r2, [pc, #272]	; (8005254 <prvCLITask+0x17c>)
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	189b      	adds	r3, r3, r2
 8005146:	4a44      	ldr	r2, [pc, #272]	; (8005258 <prvCLITask+0x180>)
 8005148:	4683      	mov	fp, r0
 800514a:	7812      	ldrb	r2, [r2, #0]
 800514c:	0020      	movs	r0, r4
 800514e:	9100      	str	r1, [sp, #0]
 8005150:	4942      	ldr	r1, [pc, #264]	; (800525c <prvCLITask+0x184>)
 8005152:	f00d fae3 	bl	801271c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005156:	464b      	mov	r3, r9
 8005158:	22a4      	movs	r2, #164	; 0xa4
 800515a:	4941      	ldr	r1, [pc, #260]	; (8005260 <prvCLITask+0x188>)
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	7818      	ldrb	r0, [r3, #0]
 8005160:	230a      	movs	r3, #10
 8005162:	f007 fd87 	bl	800cc74 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005166:	0020      	movs	r0, r4
 8005168:	f7fa ffd6 	bl	8000118 <strlen>
 800516c:	464b      	mov	r3, r9
 800516e:	b282      	uxth	r2, r0
 8005170:	0021      	movs	r1, r4
 8005172:	7818      	ldrb	r0, [r3, #0]
 8005174:	230a      	movs	r3, #10
 8005176:	f007 fd7d 	bl	800cc74 <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800517a:	2214      	movs	r2, #20
 800517c:	4694      	mov	ip, r2
 800517e:	4b39      	ldr	r3, [pc, #228]	; (8005264 <prvCLITask+0x18c>)
	int8_t cInputIndex =0, *pcOutputString;
 8005180:	2600      	movs	r6, #0
 8005182:	4698      	mov	r8, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005184:	4b38      	ldr	r3, [pc, #224]	; (8005268 <prvCLITask+0x190>)
 8005186:	4c39      	ldr	r4, [pc, #228]	; (800526c <prvCLITask+0x194>)
 8005188:	4463      	add	r3, ip
 800518a:	469a      	mov	sl, r3
				strcpy((char* )cLastInputString,(char* )cInputString);
 800518c:	2360      	movs	r3, #96	; 0x60
 800518e:	469c      	mov	ip, r3
			Rx_Data[PcPort - 1] = 0;
 8005190:	2700      	movs	r7, #0
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005192:	44e3      	add	fp, ip
 8005194:	e001      	b.n	800519a <prvCLITask+0xc2>
		taskYIELD();
 8005196:	f009 fc25 	bl	800e9e4 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 800519a:	7823      	ldrb	r3, [r4, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d1fa      	bne.n	8005196 <prvCLITask+0xbe>
			cRxedChar = Rx_Data[PcPort - 1];
 80051a0:	464b      	mov	r3, r9
 80051a2:	4642      	mov	r2, r8
 80051a4:	7818      	ldrb	r0, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051a6:	0029      	movs	r1, r5
			cRxedChar = Rx_Data[PcPort - 1];
 80051a8:	1e43      	subs	r3, r0, #1
 80051aa:	5cd2      	ldrb	r2, [r2, r3]
			Read_In_CLI_Task_Flag = 0;
 80051ac:	7027      	strb	r7, [r4, #0]
			cRxedChar = Rx_Data[PcPort - 1];
 80051ae:	702a      	strb	r2, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 80051b0:	4642      	mov	r2, r8
 80051b2:	54d7      	strb	r7, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80051b4:	230a      	movs	r3, #10
 80051b6:	2201      	movs	r2, #1
 80051b8:	f007 fd5c 	bl	800cc74 <writePxITMutex>
			if(cRxedChar == '\r'){
 80051bc:	782b      	ldrb	r3, [r5, #0]
 80051be:	2b0d      	cmp	r3, #13
 80051c0:	d01b      	beq.n	80051fa <prvCLITask+0x122>
				if(cRxedChar == '\n'){
 80051c2:	2b0a      	cmp	r3, #10
 80051c4:	d0e7      	beq.n	8005196 <prvCLITask+0xbe>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d00d      	beq.n	80051e6 <prvCLITask+0x10e>
 80051ca:	2b7f      	cmp	r3, #127	; 0x7f
 80051cc:	d00b      	beq.n	80051e6 <prvCLITask+0x10e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051ce:	001a      	movs	r2, r3
 80051d0:	3a20      	subs	r2, #32
 80051d2:	2a5e      	cmp	r2, #94	; 0x5e
 80051d4:	d8df      	bhi.n	8005196 <prvCLITask+0xbe>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051d6:	2e31      	cmp	r6, #49	; 0x31
 80051d8:	dcdd      	bgt.n	8005196 <prvCLITask+0xbe>
							cInputString[cInputIndex] =cRxedChar;
 80051da:	4a23      	ldr	r2, [pc, #140]	; (8005268 <prvCLITask+0x190>)
 80051dc:	1992      	adds	r2, r2, r6
							cInputIndex++;
 80051de:	3601      	adds	r6, #1
							cInputString[cInputIndex] =cRxedChar;
 80051e0:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 80051e2:	b276      	sxtb	r6, r6
 80051e4:	e7d7      	b.n	8005196 <prvCLITask+0xbe>
					if(cInputIndex > 0){
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	d0d5      	beq.n	8005196 <prvCLITask+0xbe>
						cInputString[cInputIndex] ='\0';
 80051ea:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <prvCLITask+0x190>)
						cInputIndex--;
 80051ec:	3e01      	subs	r6, #1
						cInputString[cInputIndex] ='\0';
 80051ee:	4694      	mov	ip, r2
						cInputIndex--;
 80051f0:	b2f3      	uxtb	r3, r6
 80051f2:	b25e      	sxtb	r6, r3
						cInputString[cInputIndex] ='\0';
 80051f4:	4463      	add	r3, ip
 80051f6:	751f      	strb	r7, [r3, #20]
 80051f8:	e7cd      	b.n	8005196 <prvCLITask+0xbe>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80051fa:	464b      	mov	r3, r9
 80051fc:	2202      	movs	r2, #2
 80051fe:	7818      	ldrb	r0, [r3, #0]
 8005200:	491b      	ldr	r1, [pc, #108]	; (8005270 <prvCLITask+0x198>)
 8005202:	230a      	movs	r3, #10
 8005204:	f007 fd36 	bl	800cc74 <writePxITMutex>
				if(cInputIndex == 0){
 8005208:	2e00      	cmp	r6, #0
 800520a:	d011      	beq.n	8005230 <prvCLITask+0x158>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800520c:	464b      	mov	r3, r9
 800520e:	4652      	mov	r2, sl
 8005210:	7818      	ldrb	r0, [r3, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	9b03      	ldr	r3, [sp, #12]
 8005216:	f7ff fd3d 	bl	8004c94 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 800521a:	4651      	mov	r1, sl
 800521c:	4658      	mov	r0, fp
 800521e:	f00d fab9 	bl	8012794 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005222:	2232      	movs	r2, #50	; 0x32
 8005224:	2100      	movs	r1, #0
 8005226:	4650      	mov	r0, sl
 8005228:	f00d f87e 	bl	8012328 <memset>
				cInputIndex =0;
 800522c:	2600      	movs	r6, #0
 800522e:	e7b2      	b.n	8005196 <prvCLITask+0xbe>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8005230:	4659      	mov	r1, fp
 8005232:	4650      	mov	r0, sl
 8005234:	f00d faae 	bl	8012794 <strcpy>
 8005238:	e7e8      	b.n	800520c <prvCLITask+0x134>
 800523a:	4b03      	ldr	r3, [pc, #12]	; (8005248 <prvCLITask+0x170>)
 800523c:	4699      	mov	r9, r3
 800523e:	7819      	ldrb	r1, [r3, #0]
 8005240:	e777      	b.n	8005132 <prvCLITask+0x5a>
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	20006844 	.word	0x20006844
 8005248:	20000c28 	.word	0x20000c28
 800524c:	200016d4 	.word	0x200016d4
 8005250:	20000030 	.word	0x20000030
 8005254:	08016b6c 	.word	0x08016b6c
 8005258:	20000a98 	.word	0x20000a98
 800525c:	08017b04 	.word	0x08017b04
 8005260:	08017b30 	.word	0x08017b30
 8005264:	20001c94 	.word	0x20001c94
 8005268:	20001754 	.word	0x20001754
 800526c:	200016d1 	.word	0x200016d1
 8005270:	08019830 	.word	0x08019830

08005274 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005276:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005278:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800527a:	781a      	ldrb	r2, [r3, #0]
 800527c:	3a01      	subs	r2, #1
 800527e:	0093      	lsls	r3, r2, #2
 8005280:	189b      	adds	r3, r3, r2
 8005282:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <ParseSnippetCommand+0x70>)
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	18d3      	adds	r3, r2, r3
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 800528e:	4e16      	ldr	r6, [pc, #88]	; (80052e8 <ParseSnippetCommand+0x74>)
 8005290:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 8005292:	2d00      	cmp	r5, #0
 8005294:	d016      	beq.n	80052c4 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005296:	782b      	ldrb	r3, [r5, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 800529c:	2113      	movs	r1, #19
 800529e:	0028      	movs	r0, r5
 80052a0:	f00d fa6a 	bl	8012778 <strchr>
 80052a4:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 80052a6:	d010      	beq.n	80052ca <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80052a8:	1b42      	subs	r2, r0, r5
 80052aa:	0029      	movs	r1, r5
 80052ac:	0020      	movs	r0, r4
 80052ae:	f00d fa8a 	bl	80127c6 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80052b2:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80052b4:	3701      	adds	r7, #1
 80052b6:	64b7      	str	r7, [r6, #72]	; 0x48
}
 80052b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80052ba:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 80052bc:	2000      	movs	r0, #0
 80052be:	e7fb      	b.n	80052b8 <ParseSnippetCommand+0x44>
		return false;
 80052c0:	2000      	movs	r0, #0
 80052c2:	e7f9      	b.n	80052b8 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 80052c4:	64b0      	str	r0, [r6, #72]	; 0x48
 80052c6:	0005      	movs	r5, r0
 80052c8:	e7e5      	b.n	8005296 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 80052ca:	0029      	movs	r1, r5
 80052cc:	0020      	movs	r0, r4
 80052ce:	f00d fa61 	bl	8012794 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80052d2:	0020      	movs	r0, r4
 80052d4:	f7fa ff20 	bl	8000118 <strlen>
 80052d8:	182d      	adds	r5, r5, r0
 80052da:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 80052dc:	2001      	movs	r0, #1
 80052de:	e7eb      	b.n	80052b8 <ParseSnippetCommand+0x44>
 80052e0:	200016d4 	.word	0x200016d4
 80052e4:	20006860 	.word	0x20006860
 80052e8:	20001754 	.word	0x20001754

080052ec <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80052ec:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 80052ee:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 80052f0:	1818      	adds	r0, r3, r0
 80052f2:	492e      	ldr	r1, [pc, #184]	; (80053ac <CheckSnippetCondition+0xc0>)
 80052f4:	0080      	lsls	r0, r0, #2
 80052f6:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 80052f8:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d020      	beq.n	8005340 <CheckSnippetCondition+0x54>
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d11b      	bne.n	800533a <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005302:	180c      	adds	r4, r1, r0
 8005304:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005306:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005308:	3a01      	subs	r2, #1
 800530a:	0053      	lsls	r3, r2, #1
 800530c:	189b      	adds	r3, r3, r2
 800530e:	4a28      	ldr	r2, [pc, #160]	; (80053b0 <CheckSnippetCondition+0xc4>)
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005314:	1841      	adds	r1, r0, r1
 8005316:	2204      	movs	r2, #4
 8005318:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800531a:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800531c:	f00c fffb 	bl	8012316 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005320:	7863      	ldrb	r3, [r4, #1]
 8005322:	2b06      	cmp	r3, #6
 8005324:	d809      	bhi.n	800533a <CheckSnippetCondition+0x4e>
 8005326:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <CheckSnippetCondition+0xc8>)
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	58d3      	ldr	r3, [r2, r3]
 800532c:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800532e:	1c29      	adds	r1, r5, #0
 8005330:	9801      	ldr	r0, [sp, #4]
 8005332:	f7fb f8e7 	bl	8000504 <__aeabi_fcmpgt>
 8005336:	2800      	cmp	r0, #0
 8005338:	d114      	bne.n	8005364 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 800533a:	2000      	movs	r0, #0
}
 800533c:	b003      	add	sp, #12
 800533e:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005340:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005342:	7882      	ldrb	r2, [r0, #2]
 8005344:	78c0      	ldrb	r0, [r0, #3]
 8005346:	00d3      	lsls	r3, r2, #3
 8005348:	189b      	adds	r3, r3, r2
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <CheckSnippetCondition+0xcc>)
 800534c:	5c9b      	ldrb	r3, [r3, r2]
 800534e:	1a18      	subs	r0, r3, r0
 8005350:	4243      	negs	r3, r0
 8005352:	4158      	adcs	r0, r3
 8005354:	b2c0      	uxtb	r0, r0
 8005356:	e7f1      	b.n	800533c <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005358:	1c29      	adds	r1, r5, #0
 800535a:	9801      	ldr	r0, [sp, #4]
 800535c:	f7fb f8b8 	bl	80004d0 <__aeabi_fcmpeq>
 8005360:	2800      	cmp	r0, #0
 8005362:	d1ea      	bne.n	800533a <CheckSnippetCondition+0x4e>
 8005364:	2100      	movs	r1, #0
 8005366:	1c28      	adds	r0, r5, #0
 8005368:	f7fb f8b2 	bl	80004d0 <__aeabi_fcmpeq>
 800536c:	4243      	negs	r3, r0
 800536e:	4158      	adcs	r0, r3
 8005370:	e7e4      	b.n	800533c <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 8005372:	1c29      	adds	r1, r5, #0
 8005374:	9801      	ldr	r0, [sp, #4]
 8005376:	f7fb f8ab 	bl	80004d0 <__aeabi_fcmpeq>
 800537a:	1e43      	subs	r3, r0, #1
 800537c:	4198      	sbcs	r0, r3
 800537e:	e7dd      	b.n	800533c <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 8005380:	1c29      	adds	r1, r5, #0
 8005382:	9801      	ldr	r0, [sp, #4]
 8005384:	f7fb f8aa 	bl	80004dc <__aeabi_fcmplt>
 8005388:	1e43      	subs	r3, r0, #1
 800538a:	4198      	sbcs	r0, r3
 800538c:	e7d6      	b.n	800533c <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 800538e:	1c29      	adds	r1, r5, #0
 8005390:	9801      	ldr	r0, [sp, #4]
 8005392:	f7fb f8ad 	bl	80004f0 <__aeabi_fcmple>
 8005396:	1e43      	subs	r3, r0, #1
 8005398:	4198      	sbcs	r0, r3
 800539a:	e7cf      	b.n	800533c <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800539c:	1c29      	adds	r1, r5, #0
 800539e:	9801      	ldr	r0, [sp, #4]
 80053a0:	f7fb f8ba 	bl	8000518 <__aeabi_fcmpge>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1dd      	bne.n	8005364 <CheckSnippetCondition+0x78>
 80053a8:	e7c7      	b.n	800533a <CheckSnippetCondition+0x4e>
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	20006860 	.word	0x20006860
 80053b0:	20000094 	.word	0x20000094
 80053b4:	08016c2c 	.word	0x08016c2c
 80053b8:	200023a0 	.word	0x200023a0

080053bc <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	46de      	mov	lr, fp
 80053c0:	464e      	mov	r6, r9
 80053c2:	4645      	mov	r5, r8
 80053c4:	4657      	mov	r7, sl
 80053c6:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053c8:	f007 fec4 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80053cc:	4b23      	ldr	r3, [pc, #140]	; (800545c <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053ce:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80053d0:	4698      	mov	r8, r3
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d039      	beq.n	800544c <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <ExecuteSnippet+0xa4>)
 80053da:	4f22      	ldr	r7, [pc, #136]	; (8005464 <ExecuteSnippet+0xa8>)
 80053dc:	469b      	mov	fp, r3
 80053de:	2320      	movs	r3, #32
 80053e0:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053e2:	4b21      	ldr	r3, [pc, #132]	; (8005468 <ExecuteSnippet+0xac>)
 80053e4:	4d21      	ldr	r5, [pc, #132]	; (800546c <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 80053e6:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053e8:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053ea:	4699      	mov	r9, r3
 80053ec:	e006      	b.n	80053fc <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 80053ee:	4643      	mov	r3, r8
 80053f0:	3401      	adds	r4, #1
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2a4      	uxth	r4, r4
 80053f6:	3514      	adds	r5, #20
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	d927      	bls.n	800544c <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 80053fc:	7c2b      	ldrb	r3, [r5, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f5      	beq.n	80053ee <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005402:	b2e0      	uxtb	r0, r4
 8005404:	f7ff ff72 	bl	80052ec <CheckSnippetCondition>
 8005408:	2800      	cmp	r0, #0
 800540a:	d0f0      	beq.n	80053ee <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800540c:	465b      	mov	r3, fp
 800540e:	4652      	mov	r2, sl
 8005410:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005412:	e00e      	b.n	8005432 <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005414:	464b      	mov	r3, r9
 8005416:	003a      	movs	r2, r7
 8005418:	7818      	ldrb	r0, [r3, #0]
 800541a:	2100      	movs	r1, #0
 800541c:	0033      	movs	r3, r6
 800541e:	f7ff fc39 	bl	8004c94 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005422:	0030      	movs	r0, r6
 8005424:	f7fa fe78 	bl	8000118 <strlen>
 8005428:	2100      	movs	r1, #0
 800542a:	0002      	movs	r2, r0
 800542c:	0030      	movs	r0, r6
 800542e:	f00c ff7b 	bl	8012328 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005432:	0039      	movs	r1, r7
 8005434:	68e8      	ldr	r0, [r5, #12]
 8005436:	f7ff ff1d 	bl	8005274 <ParseSnippetCommand>
 800543a:	2800      	cmp	r0, #0
 800543c:	d1ea      	bne.n	8005414 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 800543e:	4643      	mov	r3, r8
 8005440:	3401      	adds	r4, #1
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b2a4      	uxth	r4, r4
 8005446:	3514      	adds	r5, #20
 8005448:	42a3      	cmp	r3, r4
 800544a:	d8d7      	bhi.n	80053fc <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 800544c:	2000      	movs	r0, #0
 800544e:	bc3c      	pop	{r2, r3, r4, r5}
 8005450:	4690      	mov	r8, r2
 8005452:	4699      	mov	r9, r3
 8005454:	46a2      	mov	sl, r4
 8005456:	46ab      	mov	fp, r5
 8005458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	200016d4 	.word	0x200016d4
 8005460:	200067c4 	.word	0x200067c4
 8005464:	20001754 	.word	0x20001754
 8005468:	20000c28 	.word	0x20000c28
 800546c:	20006860 	.word	0x20006860

08005470 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005470:	2000      	movs	r0, #0
 8005472:	4770      	bx	lr

08005474 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005474:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005476:	4b03      	ldr	r3, [pc, #12]	; (8005484 <flashsizeCommand+0x10>)
 8005478:	4903      	ldr	r1, [pc, #12]	; (8005488 <flashsizeCommand+0x14>)
 800547a:	881a      	ldrh	r2, [r3, #0]
 800547c:	f00d f94e 	bl	801271c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005480:	2000      	movs	r0, #0
 8005482:	bd10      	pop	{r4, pc}
 8005484:	1ffff7cc 	.word	0x1ffff7cc
 8005488:	08017dc4 	.word	0x08017dc4

0800548c <ReadVrefCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800548c:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800548e:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005490:	0004      	movs	r4, r0
 8005492:	b082      	sub	sp, #8
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005494:	a901      	add	r1, sp, #4
 8005496:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800549c:	f006 f898 	bl	800b5d0 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054a0:	4669      	mov	r1, sp
 80054a2:	0020      	movs	r0, r4
 80054a4:	f00d f976 	bl	8012794 <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80054a8:	9801      	ldr	r0, [sp, #4]
 80054aa:	f7fd fb3b 	bl	8002b24 <__aeabi_f2d>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	0020      	movs	r0, r4
 80054b4:	4902      	ldr	r1, [pc, #8]	; (80054c0 <ReadVrefCommand+0x34>)
 80054b6:	f00d f931 	bl	801271c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80054ba:	2000      	movs	r0, #0
 80054bc:	b002      	add	sp, #8
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	08017de4 	.word	0x08017de4

080054c4 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054c4:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054c6:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054c8:	0004      	movs	r4, r0
 80054ca:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054cc:	a901      	add	r1, sp, #4
 80054ce:	4668      	mov	r0, sp
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80054d4:	f006 f87c 	bl	800b5d0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80054d8:	4669      	mov	r1, sp
 80054da:	0020      	movs	r0, r4
 80054dc:	f00d f95a 	bl	8012794 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80054e0:	9800      	ldr	r0, [sp, #0]
 80054e2:	f7fd fb1f 	bl	8002b24 <__aeabi_f2d>
 80054e6:	0002      	movs	r2, r0
 80054e8:	000b      	movs	r3, r1
 80054ea:	0020      	movs	r0, r4
 80054ec:	4902      	ldr	r1, [pc, #8]	; (80054f8 <ReadTempCommand+0x34>)
 80054ee:	f00d f915 	bl	801271c <sprintf>
}
 80054f2:	2000      	movs	r0, #0
 80054f4:	b002      	add	sp, #8
 80054f6:	bd10      	pop	{r4, pc}
 80054f8:	08017e0c 	.word	0x08017e0c

080054fc <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80054fc:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005500:	0014      	movs	r4, r2
 8005502:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005504:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005506:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005508:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800550a:	aa01      	add	r2, sp, #4
 800550c:	2101      	movs	r1, #1
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800550e:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005510:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 8005512:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005514:	f007 fe22 	bl	800d15c <FreeRTOS_CLIGetParameter>
 8005518:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800551a:	aa02      	add	r2, sp, #8
 800551c:	2102      	movs	r1, #2
 800551e:	0020      	movs	r0, r4
 8005520:	f007 fe1c 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005524:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005526:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005528:	3b32      	subs	r3, #50	; 0x32
 800552a:	2b01      	cmp	r3, #1
 800552c:	d907      	bls.n	800553e <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800552e:	2215      	movs	r2, #21
 8005530:	4919      	ldr	r1, [pc, #100]	; (8005598 <ADCReadCommand+0x9c>)
 8005532:	0030      	movs	r0, r6
 8005534:	f00c feef 	bl	8012316 <memcpy>
}
 8005538:	2000      	movs	r0, #0
 800553a:	b005      	add	sp, #20
 800553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800553e:	0028      	movs	r0, r5
 8005540:	f00c fc29 	bl	8011d96 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005544:	4d15      	ldr	r5, [pc, #84]	; (800559c <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005546:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005548:	0029      	movs	r1, r5
 800554a:	0038      	movs	r0, r7
 800554c:	f7fa fdda 	bl	8000104 <strcmp>
 8005550:	2800      	cmp	r0, #0
 8005552:	d005      	beq.n	8005560 <ADCReadCommand+0x64>
 8005554:	4912      	ldr	r1, [pc, #72]	; (80055a0 <ADCReadCommand+0xa4>)
 8005556:	0038      	movs	r0, r7
 8005558:	f7fa fdd4 	bl	8000104 <strcmp>
 800555c:	2800      	cmp	r0, #0
 800555e:	d115      	bne.n	800558c <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005560:	0029      	movs	r1, r5
 8005562:	0020      	movs	r0, r4
 8005564:	f006 f9fa 	bl	800b95c <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005568:	aa03      	add	r2, sp, #12
 800556a:	0029      	movs	r1, r5
 800556c:	0020      	movs	r0, r4
 800556e:	f006 fa45 	bl	800b9fc <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005572:	a903      	add	r1, sp, #12
 8005574:	0030      	movs	r0, r6
 8005576:	f00d f90d 	bl	8012794 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800557a:	9803      	ldr	r0, [sp, #12]
 800557c:	f7fb f820 	bl	80005c0 <__aeabi_f2uiz>
 8005580:	4908      	ldr	r1, [pc, #32]	; (80055a4 <ADCReadCommand+0xa8>)
 8005582:	b282      	uxth	r2, r0
 8005584:	0030      	movs	r0, r6
 8005586:	f00d f8c9 	bl	801271c <sprintf>
 800558a:	e7d5      	b.n	8005538 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800558c:	2212      	movs	r2, #18
 800558e:	4906      	ldr	r1, [pc, #24]	; (80055a8 <ADCReadCommand+0xac>)
 8005590:	0030      	movs	r0, r6
 8005592:	f00c fec0 	bl	8012316 <memcpy>
 8005596:	e7cf      	b.n	8005538 <ADCReadCommand+0x3c>
 8005598:	08017e60 	.word	0x08017e60
 800559c:	08017e30 	.word	0x08017e30
 80055a0:	08017e34 	.word	0x08017e34
 80055a4:	08017e3c 	.word	0x08017e3c
 80055a8:	08017e4c 	.word	0x08017e4c

080055ac <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	4657      	mov	r7, sl
 80055b0:	46de      	mov	lr, fp
 80055b2:	464e      	mov	r6, r9
 80055b4:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0;
 80055b6:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b8:	b5e0      	push	{r5, r6, r7, lr}
 80055ba:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80055bc:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80055be:	4b5b      	ldr	r3, [pc, #364]	; (800572c <testportCommand+0x180>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c0:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80055c2:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c4:	4682      	mov	sl, r0
	char WriteVaule[1] ="H";
 80055c6:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c8:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055ca:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80055cc:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055ce:	f007 fdc5 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055d2:	4957      	ldr	r1, [pc, #348]	; (8005730 <testportCommand+0x184>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d4:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80055d6:	f7fa fd95 	bl	8000104 <strcmp>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d15c      	bne.n	8005698 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80055de:	4d55      	ldr	r5, [pc, #340]	; (8005734 <testportCommand+0x188>)
 80055e0:	4a55      	ldr	r2, [pc, #340]	; (8005738 <testportCommand+0x18c>)
 80055e2:	782b      	ldrb	r3, [r5, #0]
 80055e4:	2401      	movs	r4, #1
 80055e6:	18d2      	adds	r2, r2, r3
 80055e8:	3a01      	subs	r2, #1
 80055ea:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055ec:	4a53      	ldr	r2, [pc, #332]	; (800573c <testportCommand+0x190>)
 80055ee:	4691      	mov	r9, r2
 80055f0:	e003      	b.n	80055fa <testportCommand+0x4e>
 80055f2:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80055f4:	2c06      	cmp	r4, #6
 80055f6:	d047      	beq.n	8005688 <testportCommand+0xdc>
 80055f8:	782b      	ldrb	r3, [r5, #0]
 80055fa:	b2e2      	uxtb	r2, r4
 80055fc:	4690      	mov	r8, r2
			if(PcPort != ports){
 80055fe:	4293      	cmp	r3, r2
 8005600:	d0f7      	beq.n	80055f2 <testportCommand+0x46>
				WriteVaule[0] =rand();
 8005602:	f00c fea9 	bl	8012358 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005606:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005608:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 800560a:	2201      	movs	r2, #1
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	0039      	movs	r1, r7
 8005610:	469b      	mov	fp, r3
 8005612:	4640      	mov	r0, r8
 8005614:	3b5a      	subs	r3, #90	; 0x5a
 8005616:	f007 fafb 	bl	800cc10 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800561a:	4640      	mov	r0, r8
 800561c:	f007 fb5c 	bl	800ccd8 <GetUart>
 8005620:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005622:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005624:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005626:	b2db      	uxtb	r3, r3
 8005628:	429a      	cmp	r2, r3
 800562a:	d03f      	beq.n	80056ac <testportCommand+0x100>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800562c:	0022      	movs	r2, r4
 800562e:	4944      	ldr	r1, [pc, #272]	; (8005740 <testportCommand+0x194>)
 8005630:	4650      	mov	r0, sl
 8005632:	f00d f873 	bl	801271c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005636:	4650      	mov	r0, sl
 8005638:	f7fa fd6e 	bl	8000118 <strlen>
 800563c:	465b      	mov	r3, fp
 800563e:	b282      	uxth	r2, r0
 8005640:	4651      	mov	r1, sl
 8005642:	7828      	ldrb	r0, [r5, #0]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	230a      	movs	r3, #10
 8005648:	f007 fae2 	bl	800cc10 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 800564c:	2254      	movs	r2, #84	; 0x54
 800564e:	493d      	ldr	r1, [pc, #244]	; (8005744 <testportCommand+0x198>)
 8005650:	4650      	mov	r0, sl
 8005652:	f00c fe60 	bl	8012316 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005656:	2364      	movs	r3, #100	; 0x64
 8005658:	7828      	ldrb	r0, [r5, #0]
 800565a:	2253      	movs	r2, #83	; 0x53
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4651      	mov	r1, sl
 8005660:	3b5a      	subs	r3, #90	; 0x5a
 8005662:	f007 fad5 	bl	800cc10 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005666:	3601      	adds	r6, #1
 8005668:	e002      	b.n	8005670 <testportCommand+0xc4>
					Delay_ms(1);
 800566a:	2001      	movs	r0, #1
 800566c:	f009 fb06 	bl	800ec7c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005670:	782a      	ldrb	r2, [r5, #0]
 8005672:	3a01      	subs	r2, #1
 8005674:	0053      	lsls	r3, r2, #1
 8005676:	189b      	adds	r3, r3, r2
 8005678:	019b      	lsls	r3, r3, #6
 800567a:	444b      	add	r3, r9
 800567c:	5d9b      	ldrb	r3, [r3, r6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f3      	beq.n	800566a <testportCommand+0xbe>
 8005682:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005684:	2c06      	cmp	r4, #6
 8005686:	d1b7      	bne.n	80055f8 <testportCommand+0x4c>
}
 8005688:	2000      	movs	r0, #0
 800568a:	b005      	add	sp, #20
 800568c:	bc3c      	pop	{r2, r3, r4, r5}
 800568e:	4690      	mov	r8, r2
 8005690:	4699      	mov	r9, r3
 8005692:	46a2      	mov	sl, r4
 8005694:	46ab      	mov	fp, r5
 8005696:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 8005698:	2300      	movs	r3, #0
 800569a:	56e3      	ldrsb	r3, [r4, r3]
 800569c:	2b70      	cmp	r3, #112	; 0x70
 800569e:	d016      	beq.n	80056ce <testportCommand+0x122>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80056a0:	220f      	movs	r2, #15
 80056a2:	4929      	ldr	r1, [pc, #164]	; (8005748 <testportCommand+0x19c>)
 80056a4:	4650      	mov	r0, sl
 80056a6:	f00c fe36 	bl	8012316 <memcpy>
 80056aa:	e7ed      	b.n	8005688 <testportCommand+0xdc>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80056ac:	0022      	movs	r2, r4
 80056ae:	4927      	ldr	r1, [pc, #156]	; (800574c <testportCommand+0x1a0>)
 80056b0:	4650      	mov	r0, sl
 80056b2:	f00d f833 	bl	801271c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80056b6:	4650      	mov	r0, sl
 80056b8:	f7fa fd2e 	bl	8000118 <strlen>
 80056bc:	465b      	mov	r3, fp
 80056be:	b282      	uxth	r2, r0
 80056c0:	4651      	mov	r1, sl
 80056c2:	7828      	ldrb	r0, [r5, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	3b5a      	subs	r3, #90	; 0x5a
 80056c8:	f007 faa2 	bl	800cc10 <writePxMutex>
 80056cc:	e7be      	b.n	800564c <testportCommand+0xa0>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056ce:	1c60      	adds	r0, r4, #1
 80056d0:	f00c fb61 	bl	8011d96 <atol>
 80056d4:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056d6:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80056d8:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d905      	bls.n	80056ea <testportCommand+0x13e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056de:	221b      	movs	r2, #27
 80056e0:	491b      	ldr	r1, [pc, #108]	; (8005750 <testportCommand+0x1a4>)
 80056e2:	4650      	mov	r0, sl
 80056e4:	f00c fe17 	bl	8012316 <memcpy>
 80056e8:	e7ce      	b.n	8005688 <testportCommand+0xdc>
				WriteVaule[0] =rand();
 80056ea:	f00c fe35 	bl	8012358 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056ee:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 80056f0:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056f2:	2201      	movs	r2, #1
 80056f4:	0039      	movs	r1, r7
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	0028      	movs	r0, r5
 80056fa:	3b32      	subs	r3, #50	; 0x32
 80056fc:	f007 fa88 	bl	800cc10 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005700:	2000      	movs	r0, #0
 8005702:	f007 fae9 	bl	800ccd8 <GetUart>
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 800570a:	7839      	ldrb	r1, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800570c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800570e:	4022      	ands	r2, r4
			if(WriteVaule[0] == ReadValue[0])
 8005710:	b2db      	uxtb	r3, r3
 8005712:	4299      	cmp	r1, r3
 8005714:	d004      	beq.n	8005720 <testportCommand+0x174>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005716:	490a      	ldr	r1, [pc, #40]	; (8005740 <testportCommand+0x194>)
 8005718:	4650      	mov	r0, sl
 800571a:	f00c ffff 	bl	801271c <sprintf>
 800571e:	e7b3      	b.n	8005688 <testportCommand+0xdc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005720:	490a      	ldr	r1, [pc, #40]	; (800574c <testportCommand+0x1a0>)
 8005722:	4650      	mov	r0, sl
 8005724:	f00c fffa 	bl	801271c <sprintf>
 8005728:	e7ae      	b.n	8005688 <testportCommand+0xdc>
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	08016ea4 	.word	0x08016ea4
 8005730:	08017444 	.word	0x08017444
 8005734:	20000c28 	.word	0x20000c28
 8005738:	20001894 	.word	0x20001894
 800573c:	200018d4 	.word	0x200018d4
 8005740:	08017e94 	.word	0x08017e94
 8005744:	08017ea8 	.word	0x08017ea8
 8005748:	08017f18 	.word	0x08017f18
 800574c:	08017e78 	.word	0x08017e78
 8005750:	08017efc 	.word	0x08017efc

08005754 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005758:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800575a:	b082      	sub	sp, #8
 800575c:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800575e:	466a      	mov	r2, sp
 8005760:	2101      	movs	r1, #1
 8005762:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005768:	f007 fcf8 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800576c:	2300      	movs	r3, #0
 800576e:	56c3      	ldrsb	r3, [r0, r3]
 8005770:	2b70      	cmp	r3, #112	; 0x70
 8005772:	d010      	beq.n	8005796 <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005774:	aa01      	add	r2, sp, #4
 8005776:	2102      	movs	r1, #2
 8005778:	0020      	movs	r0, r4
 800577a:	f007 fcef 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800577e:	2300      	movs	r3, #0
 8005780:	56c3      	ldrsb	r3, [r0, r3]
 8005782:	2b70      	cmp	r3, #112	; 0x70
 8005784:	d027      	beq.n	80057d6 <unbridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005786:	220f      	movs	r2, #15
 8005788:	4919      	ldr	r1, [pc, #100]	; (80057f0 <unbridgeCommand+0x9c>)
 800578a:	0028      	movs	r0, r5
 800578c:	f00c fdc3 	bl	8012316 <memcpy>
}
 8005790:	2000      	movs	r0, #0
 8005792:	b002      	add	sp, #8
 8005794:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005796:	3001      	adds	r0, #1
 8005798:	f00c fafd 	bl	8011d96 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800579c:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800579e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057a0:	2102      	movs	r1, #2
 80057a2:	0020      	movs	r0, r4
 80057a4:	f007 fcda 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057a8:	2300      	movs	r3, #0
 80057aa:	56c3      	ldrsb	r3, [r0, r3]
 80057ac:	2b70      	cmp	r3, #112	; 0x70
 80057ae:	d1ea      	bne.n	8005786 <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057b0:	3001      	adds	r0, #1
 80057b2:	f00c faf0 	bl	8011d96 <atol>
 80057b6:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80057b8:	b2c1      	uxtb	r1, r0
 80057ba:	b2f0      	uxtb	r0, r6
 80057bc:	f7fe ffe2 	bl	8004784 <Unbridge>
	if(result == BOS_OK)
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d10c      	bne.n	80057de <unbridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	0023      	movs	r3, r4
 80057c8:	490a      	ldr	r1, [pc, #40]	; (80057f4 <unbridgeCommand+0xa0>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	0028      	movs	r0, r5
 80057ce:	4032      	ands	r2, r6
 80057d0:	f00c ffa4 	bl	801271c <sprintf>
 80057d4:	e7dc      	b.n	8005790 <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80057d6:	3001      	adds	r0, #1
 80057d8:	f00c fadd 	bl	8011d96 <atol>
 80057dc:	e7d3      	b.n	8005786 <unbridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 80057de:	2867      	cmp	r0, #103	; 0x67
 80057e0:	d0d1      	beq.n	8005786 <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80057e2:	2219      	movs	r2, #25
 80057e4:	4904      	ldr	r1, [pc, #16]	; (80057f8 <unbridgeCommand+0xa4>)
 80057e6:	0028      	movs	r0, r5
 80057e8:	f00c fd95 	bl	8012316 <memcpy>
	return pdFALSE;
 80057ec:	e7d0      	b.n	8005790 <unbridgeCommand+0x3c>
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	08017f18 	.word	0x08017f18
 80057f4:	08017f28 	.word	0x08017f28
 80057f8:	08017f48 	.word	0x08017f48

080057fc <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005800:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005802:	b082      	sub	sp, #8
 8005804:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005806:	466a      	mov	r2, sp
 8005808:	2101      	movs	r1, #1
 800580a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005810:	f007 fca4 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005814:	2300      	movs	r3, #0
 8005816:	56c3      	ldrsb	r3, [r0, r3]
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d010      	beq.n	800583e <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800581c:	aa01      	add	r2, sp, #4
 800581e:	2102      	movs	r1, #2
 8005820:	0020      	movs	r0, r4
 8005822:	f007 fc9b 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005826:	2300      	movs	r3, #0
 8005828:	56c3      	ldrsb	r3, [r0, r3]
 800582a:	2b70      	cmp	r3, #112	; 0x70
 800582c:	d027      	beq.n	800587e <bridgeCommand+0x82>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800582e:	220f      	movs	r2, #15
 8005830:	4919      	ldr	r1, [pc, #100]	; (8005898 <bridgeCommand+0x9c>)
 8005832:	0028      	movs	r0, r5
 8005834:	f00c fd6f 	bl	8012316 <memcpy>
}
 8005838:	2000      	movs	r0, #0
 800583a:	b002      	add	sp, #8
 800583c:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800583e:	3001      	adds	r0, #1
 8005840:	f00c faa9 	bl	8011d96 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005844:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005846:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005848:	2102      	movs	r1, #2
 800584a:	0020      	movs	r0, r4
 800584c:	f007 fc86 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005850:	2300      	movs	r3, #0
 8005852:	56c3      	ldrsb	r3, [r0, r3]
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d1ea      	bne.n	800582e <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005858:	3001      	adds	r0, #1
 800585a:	f00c fa9c 	bl	8011d96 <atol>
 800585e:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005860:	b2c1      	uxtb	r1, r0
 8005862:	b2f0      	uxtb	r0, r6
 8005864:	f7fe ff7a 	bl	800475c <Bridge>
	if(result == BOS_OK)
 8005868:	2800      	cmp	r0, #0
 800586a:	d10c      	bne.n	8005886 <bridgeCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 800586c:	22ff      	movs	r2, #255	; 0xff
 800586e:	0023      	movs	r3, r4
 8005870:	490a      	ldr	r1, [pc, #40]	; (800589c <bridgeCommand+0xa0>)
 8005872:	4013      	ands	r3, r2
 8005874:	0028      	movs	r0, r5
 8005876:	4032      	ands	r2, r6
 8005878:	f00c ff50 	bl	801271c <sprintf>
 800587c:	e7dc      	b.n	8005838 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800587e:	3001      	adds	r0, #1
 8005880:	f00c fa89 	bl	8011d96 <atol>
 8005884:	e7d3      	b.n	800582e <bridgeCommand+0x32>
	else if(result == BOS_ERR_WrongParam)
 8005886:	2867      	cmp	r0, #103	; 0x67
 8005888:	d0d1      	beq.n	800582e <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800588a:	2217      	movs	r2, #23
 800588c:	4904      	ldr	r1, [pc, #16]	; (80058a0 <bridgeCommand+0xa4>)
 800588e:	0028      	movs	r0, r5
 8005890:	f00c fd41 	bl	8012316 <memcpy>
	return pdFALSE;
 8005894:	e7d0      	b.n	8005838 <bridgeCommand+0x3c>
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	08017f18 	.word	0x08017f18
 800589c:	08017f64 	.word	0x08017f64
 80058a0:	08017f88 	.word	0x08017f88

080058a4 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	46d6      	mov	lr, sl
 80058a8:	4646      	mov	r6, r8
 80058aa:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 80058ac:	2400      	movs	r4, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058ae:	b5c0      	push	{r6, r7, lr}
 80058b0:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058b2:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058b4:	0006      	movs	r6, r0
 80058b6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058b8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80058ba:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058bc:	f007 fc4e 	bl	800d15c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80058c0:	f00c fa63 	bl	8011d8a <atoi>
 80058c4:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	d003      	beq.n	80058d2 <delSnipCommand+0x2e>
 80058ca:	4f30      	ldr	r7, [pc, #192]	; (800598c <delSnipCommand+0xe8>)
 80058cc:	783b      	ldrb	r3, [r7, #0]
 80058ce:	42ab      	cmp	r3, r5
 80058d0:	d20b      	bcs.n	80058ea <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058d2:	2223      	movs	r2, #35	; 0x23
 80058d4:	492e      	ldr	r1, [pc, #184]	; (8005990 <delSnipCommand+0xec>)
 80058d6:	0030      	movs	r0, r6
 80058d8:	f00c fd1d 	bl	8012316 <memcpy>
}
 80058dc:	2000      	movs	r0, #0
 80058de:	b002      	add	sp, #8
 80058e0:	bc1c      	pop	{r2, r3, r4}
 80058e2:	4690      	mov	r8, r2
 80058e4:	4699      	mov	r9, r3
 80058e6:	46a2      	mov	sl, r4
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80058ea:	23ff      	movs	r3, #255	; 0xff
 80058ec:	4003      	ands	r3, r0
 80058ee:	469a      	mov	sl, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	0098      	lsls	r0, r3, #2
 80058f4:	18c0      	adds	r0, r0, r3
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <delSnipCommand+0xf0>)
 80058f8:	0080      	lsls	r0, r0, #2
 80058fa:	4699      	mov	r9, r3
 80058fc:	4680      	mov	r8, r0
 80058fe:	44c8      	add	r8, r9
 8005900:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005902:	3002      	adds	r0, #2
		snippets[index - 1].cond.conditionType =0;
 8005904:	801c      	strh	r4, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005906:	2204      	movs	r2, #4
 8005908:	2100      	movs	r1, #0
 800590a:	4448      	add	r0, r9
 800590c:	f00c fd0c 	bl	8012328 <memset>
		snippets[index - 1].state = false;
 8005910:	2300      	movs	r3, #0
 8005912:	4642      	mov	r2, r8
 8005914:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 8005916:	68d0      	ldr	r0, [r2, #12]
 8005918:	f00c faba 	bl	8011e90 <free>
		snippets[index - 1].cmd = NULL;
 800591c:	4643      	mov	r3, r8
 800591e:	60dc      	str	r4, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005920:	783b      	ldrb	r3, [r7, #0]
 8005922:	42ab      	cmp	r3, r5
 8005924:	d92e      	bls.n	8005984 <delSnipCommand+0xe0>
 8005926:	3b01      	subs	r3, #1
 8005928:	1b58      	subs	r0, r3, r5
 800592a:	b2c0      	uxtb	r0, r0
 800592c:	4450      	add	r0, sl
 800592e:	4652      	mov	r2, sl
 8005930:	0085      	lsls	r5, r0, #2
 8005932:	182d      	adds	r5, r5, r0
 8005934:	4648      	mov	r0, r9
 8005936:	0094      	lsls	r4, r2, #2
 8005938:	4454      	add	r4, sl
 800593a:	00a4      	lsls	r4, r4, #2
 800593c:	00ad      	lsls	r5, r5, #2
 800593e:	3014      	adds	r0, #20
 8005940:	444c      	add	r4, r9
 8005942:	4698      	mov	r8, r3
 8005944:	182d      	adds	r5, r5, r0
 8005946:	e002      	b.n	800594e <delSnipCommand+0xaa>
 8005948:	3414      	adds	r4, #20
 800594a:	42ac      	cmp	r4, r5
 800594c:	d010      	beq.n	8005970 <delSnipCommand+0xcc>
			if(snippets[s].cond.conditionType){
 800594e:	7823      	ldrb	r3, [r4, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f9      	beq.n	8005948 <delSnipCommand+0xa4>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005954:	0020      	movs	r0, r4
 8005956:	0021      	movs	r1, r4
 8005958:	2214      	movs	r2, #20
 800595a:	3814      	subs	r0, #20
 800595c:	f00c fcdb 	bl	8012316 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005960:	0020      	movs	r0, r4
 8005962:	2214      	movs	r2, #20
 8005964:	2100      	movs	r1, #0
 8005966:	3414      	adds	r4, #20
 8005968:	f00c fcde 	bl	8012328 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 800596c:	42ac      	cmp	r4, r5
 800596e:	d1ee      	bne.n	800594e <delSnipCommand+0xaa>
		--numOfRecordedSnippets;
 8005970:	4643      	mov	r3, r8
 8005972:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 8005974:	f003 fff4 	bl	8009960 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005978:	2236      	movs	r2, #54	; 0x36
 800597a:	4907      	ldr	r1, [pc, #28]	; (8005998 <delSnipCommand+0xf4>)
 800597c:	0030      	movs	r0, r6
 800597e:	f00c fcca 	bl	8012316 <memcpy>
 8005982:	e7ab      	b.n	80058dc <delSnipCommand+0x38>
 8005984:	3b01      	subs	r3, #1
 8005986:	4698      	mov	r8, r3
 8005988:	e7f2      	b.n	8005970 <delSnipCommand+0xcc>
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	200016d4 	.word	0x200016d4
 8005990:	08017fd8 	.word	0x08017fd8
 8005994:	20006860 	.word	0x20006860
 8005998:	08017fa0 	.word	0x08017fa0

0800599c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800599c:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 800599e:	2400      	movs	r4, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a0:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059a2:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a4:	0005      	movs	r5, r0
 80059a6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059a8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80059aa:	9401      	str	r4, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059ac:	f007 fbd6 	bl	800d15c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80059b0:	f00c f9eb 	bl	8011d8a <atoi>
 80059b4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <pauseSnipCommand+0x26>
 80059ba:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <pauseSnipCommand+0x58>)
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d207      	bcs.n	80059d2 <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059c2:	2223      	movs	r2, #35	; 0x23
 80059c4:	490c      	ldr	r1, [pc, #48]	; (80059f8 <pauseSnipCommand+0x5c>)
 80059c6:	0028      	movs	r0, r5
 80059c8:	f00c fca5 	bl	8012316 <memcpy>
}
 80059cc:	2000      	movs	r0, #0
 80059ce:	b003      	add	sp, #12
 80059d0:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 80059d2:	23ff      	movs	r3, #255	; 0xff
 80059d4:	4018      	ands	r0, r3
 80059d6:	3801      	subs	r0, #1
 80059d8:	0083      	lsls	r3, r0, #2
 80059da:	1818      	adds	r0, r3, r0
 80059dc:	4b07      	ldr	r3, [pc, #28]	; (80059fc <pauseSnipCommand+0x60>)
 80059de:	0080      	lsls	r0, r0, #2
 80059e0:	1818      	adds	r0, r3, r0
 80059e2:	7404      	strb	r4, [r0, #16]
		SaveToRO();
 80059e4:	f003 ffbc 	bl	8009960 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80059e8:	2235      	movs	r2, #53	; 0x35
 80059ea:	4905      	ldr	r1, [pc, #20]	; (8005a00 <pauseSnipCommand+0x64>)
 80059ec:	0028      	movs	r0, r5
 80059ee:	f00c fc92 	bl	8012316 <memcpy>
 80059f2:	e7eb      	b.n	80059cc <pauseSnipCommand+0x30>
 80059f4:	200016d4 	.word	0x200016d4
 80059f8:	08017fd8 	.word	0x08017fd8
 80059fc:	20006860 	.word	0x20006860
 8005a00:	08017ffc 	.word	0x08017ffc

08005a04 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005a04:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a06:	b510      	push	{r4, lr}
 8005a08:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a0a:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a0c:	0004      	movs	r4, r0
 8005a0e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a10:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005a12:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a14:	f007 fba2 	bl	800d15c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a18:	f00c f9b7 	bl	8011d8a <atoi>
 8005a1c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <actSnipCommand+0x26>
 8005a22:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <actSnipCommand+0x5c>)
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d207      	bcs.n	8005a3a <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a2a:	2223      	movs	r2, #35	; 0x23
 8005a2c:	490d      	ldr	r1, [pc, #52]	; (8005a64 <actSnipCommand+0x60>)
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f00c fc71 	bl	8012316 <memcpy>
}
 8005a34:	2000      	movs	r0, #0
 8005a36:	b002      	add	sp, #8
 8005a38:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005a3a:	23ff      	movs	r3, #255	; 0xff
 8005a3c:	4018      	ands	r0, r3
 8005a3e:	3801      	subs	r0, #1
 8005a40:	0083      	lsls	r3, r0, #2
 8005a42:	1818      	adds	r0, r3, r0
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <actSnipCommand+0x64>)
 8005a46:	0080      	lsls	r0, r0, #2
 8005a48:	1818      	adds	r0, r3, r0
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005a4e:	f003 ff87 	bl	8009960 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a52:	2238      	movs	r2, #56	; 0x38
 8005a54:	4905      	ldr	r1, [pc, #20]	; (8005a6c <actSnipCommand+0x68>)
 8005a56:	0020      	movs	r0, r4
 8005a58:	f00c fc5d 	bl	8012316 <memcpy>
 8005a5c:	e7ea      	b.n	8005a34 <actSnipCommand+0x30>
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	200016d4 	.word	0x200016d4
 8005a64:	08017fd8 	.word	0x08017fd8
 8005a68:	20006860 	.word	0x20006860
 8005a6c:	08018034 	.word	0x08018034

08005a70 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a72:	46de      	mov	lr, fp
 8005a74:	4657      	mov	r7, sl
 8005a76:	464e      	mov	r6, r9
 8005a78:	4645      	mov	r5, r8
 8005a7a:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005a7c:	4b7c      	ldr	r3, [pc, #496]	; (8005c70 <snipCommand+0x200>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a7e:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005a80:	3304      	adds	r3, #4
 8005a82:	aa06      	add	r2, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a84:	0007      	movs	r7, r0
	char status[2][7] ={"Paused", "Active"};
 8005a86:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005a88:	c213      	stmia	r2!, {r0, r1, r4}
 8005a8a:	881b      	ldrh	r3, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a8c:	4979      	ldr	r1, [pc, #484]	; (8005c74 <snipCommand+0x204>)
	char status[2][7] ={"Paused", "Active"};
 8005a8e:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a90:	4b79      	ldr	r3, [pc, #484]	; (8005c78 <snipCommand+0x208>)
 8005a92:	2237      	movs	r2, #55	; 0x37
 8005a94:	7818      	ldrb	r0, [r3, #0]
 8005a96:	2301      	movs	r3, #1
 8005a98:	425b      	negs	r3, r3
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	3333      	adds	r3, #51	; 0x33
 8005a9e:	f007 f8b7 	bl	800cc10 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <snipCommand+0x20c>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d044      	beq.n	8005b34 <snipCommand+0xc4>
 8005aaa:	2500      	movs	r5, #0
 8005aac:	4b74      	ldr	r3, [pc, #464]	; (8005c80 <snipCommand+0x210>)
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005aae:	46a8      	mov	r8, r5
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	4c74      	ldr	r4, [pc, #464]	; (8005c84 <snipCommand+0x214>)
 8005ab4:	4643      	mov	r3, r8
		if(snippets[s].cond.conditionType)
 8005ab6:	009d      	lsls	r5, r3, #2
 8005ab8:	18e9      	adds	r1, r5, r3
 8005aba:	1c5e      	adds	r6, r3, #1
 8005abc:	008b      	lsls	r3, r1, #2
 8005abe:	469b      	mov	fp, r3
 8005ac0:	4653      	mov	r3, sl
 8005ac2:	465a      	mov	r2, fp
 8005ac4:	5c9b      	ldrb	r3, [r3, r2]
 8005ac6:	b2f6      	uxtb	r6, r6
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d140      	bne.n	8005b4e <snipCommand+0xde>
 8005acc:	4659      	mov	r1, fp
 8005ace:	4451      	add	r1, sl
 8005ad0:	68c8      	ldr	r0, [r1, #12]
 8005ad2:	4445      	add	r5, r8
 8005ad4:	00ad      	lsls	r5, r5, #2
 8005ad6:	4455      	add	r5, sl
 8005ad8:	e00e      	b.n	8005af8 <snipCommand+0x88>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ada:	0023      	movs	r3, r4
 8005adc:	003a      	movs	r2, r7
 8005ade:	496a      	ldr	r1, [pc, #424]	; (8005c88 <snipCommand+0x218>)
 8005ae0:	0038      	movs	r0, r7
 8005ae2:	f00c fe1b 	bl	801271c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005ae6:	0020      	movs	r0, r4
 8005ae8:	f7fa fb16 	bl	8000118 <strlen>
 8005aec:	2100      	movs	r1, #0
 8005aee:	0002      	movs	r2, r0
 8005af0:	0020      	movs	r0, r4
 8005af2:	f00c fc19 	bl	8012328 <memset>
 8005af6:	68e8      	ldr	r0, [r5, #12]
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005af8:	0021      	movs	r1, r4
 8005afa:	f7ff fbbb 	bl	8005274 <ParseSnippetCommand>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1eb      	bne.n	8005ada <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005b02:	0038      	movs	r0, r7
 8005b04:	f7fa fb08 	bl	8000118 <strlen>
 8005b08:	220c      	movs	r2, #12
 8005b0a:	0005      	movs	r5, r0
 8005b0c:	495f      	ldr	r1, [pc, #380]	; (8005c8c <snipCommand+0x21c>)
 8005b0e:	1838      	adds	r0, r7, r0
 8005b10:	f00c fc01 	bl	8012316 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005b14:	4b58      	ldr	r3, [pc, #352]	; (8005c78 <snipCommand+0x208>)
 8005b16:	350b      	adds	r5, #11
 8005b18:	7818      	ldrb	r0, [r3, #0]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	425b      	negs	r3, r3
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	b2aa      	uxth	r2, r5
 8005b22:	3333      	adds	r3, #51	; 0x33
 8005b24:	0039      	movs	r1, r7
 8005b26:	f007 f873 	bl	800cc10 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005b2a:	4b54      	ldr	r3, [pc, #336]	; (8005c7c <snipCommand+0x20c>)
 8005b2c:	46b0      	mov	r8, r6
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	42b3      	cmp	r3, r6
 8005b32:	d8bf      	bhi.n	8005ab4 <snipCommand+0x44>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005b34:	22b5      	movs	r2, #181	; 0xb5
 8005b36:	4956      	ldr	r1, [pc, #344]	; (8005c90 <snipCommand+0x220>)
 8005b38:	0038      	movs	r0, r7
 8005b3a:	f00c fbec 	bl	8012316 <memcpy>
}
 8005b3e:	2000      	movs	r0, #0
 8005b40:	b00b      	add	sp, #44	; 0x2c
 8005b42:	bc3c      	pop	{r2, r3, r4, r5}
 8005b44:	4690      	mov	r8, r2
 8005b46:	4699      	mov	r9, r3
 8005b48:	46a2      	mov	sl, r4
 8005b4a:	46ab      	mov	fp, r5
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005b4e:	46d1      	mov	r9, sl
 8005b50:	44d9      	add	r9, fp
 8005b52:	464b      	mov	r3, r9
 8005b54:	7c1a      	ldrb	r2, [r3, #16]
 8005b56:	494f      	ldr	r1, [pc, #316]	; (8005c94 <snipCommand+0x224>)
 8005b58:	00d3      	lsls	r3, r2, #3
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	aa06      	add	r2, sp, #24
 8005b5e:	4694      	mov	ip, r2
 8005b60:	0038      	movs	r0, r7
 8005b62:	4463      	add	r3, ip
 8005b64:	0032      	movs	r2, r6
 8005b66:	f00c fdd9 	bl	801271c <sprintf>
		switch(snippets[s].cond.conditionType){
 8005b6a:	4653      	mov	r3, sl
 8005b6c:	465a      	mov	r2, fp
 8005b6e:	5c9b      	ldrb	r3, [r3, r2]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d029      	beq.n	8005bc8 <snipCommand+0x158>
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d175      	bne.n	8005c64 <snipCommand+0x1f4>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005b78:	4659      	mov	r1, fp
 8005b7a:	3106      	adds	r1, #6
 8005b7c:	4451      	add	r1, sl
 8005b7e:	2204      	movs	r2, #4
 8005b80:	a805      	add	r0, sp, #20
 8005b82:	f00c fbc8 	bl	8012316 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005b86:	464b      	mov	r3, r9
 8005b88:	78da      	ldrb	r2, [r3, #3]
 8005b8a:	9805      	ldr	r0, [sp, #20]
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	0053      	lsls	r3, r2, #1
 8005b90:	189b      	adds	r3, r3, r2
 8005b92:	4a41      	ldr	r2, [pc, #260]	; (8005c98 <snipCommand+0x228>)
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	18d3      	adds	r3, r2, r3
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	469b      	mov	fp, r3
 8005b9c:	f7fc ffc2 	bl	8002b24 <__aeabi_f2d>
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	9002      	str	r0, [sp, #8]
 8005ba4:	9103      	str	r1, [sp, #12]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	4a31      	ldr	r2, [pc, #196]	; (8005c70 <snipCommand+0x200>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	0059      	lsls	r1, r3, #1
 8005bae:	3214      	adds	r2, #20
 8005bb0:	18cb      	adds	r3, r1, r3
 8005bb2:	18d3      	adds	r3, r2, r3
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	003a      	movs	r2, r7
 8005bb8:	465b      	mov	r3, fp
 8005bba:	4938      	ldr	r1, [pc, #224]	; (8005c9c <snipCommand+0x22c>)
 8005bbc:	0038      	movs	r0, r7
 8005bbe:	f00c fdad 	bl	801271c <sprintf>
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	68d8      	ldr	r0, [r3, #12]
				break;
 8005bc6:	e784      	b.n	8005ad2 <snipCommand+0x62>
 8005bc8:	464b      	mov	r3, r9
 8005bca:	68d8      	ldr	r0, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	3b05      	subs	r3, #5
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d900      	bls.n	8005bd8 <snipCommand+0x168>
 8005bd6:	e77c      	b.n	8005ad2 <snipCommand+0x62>
 8005bd8:	4a31      	ldr	r2, [pc, #196]	; (8005ca0 <snipCommand+0x230>)
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	58d3      	ldr	r3, [r2, r3]
 8005bde:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005be0:	4643      	mov	r3, r8
 8005be2:	18eb      	adds	r3, r5, r3
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4453      	add	r3, sl
 8005be8:	4699      	mov	r9, r3
 8005bea:	464a      	mov	r2, r9
 8005bec:	789b      	ldrb	r3, [r3, #2]
 8005bee:	9001      	str	r0, [sp, #4]
 8005bf0:	7912      	ldrb	r2, [r2, #4]
 8005bf2:	492c      	ldr	r1, [pc, #176]	; (8005ca4 <snipCommand+0x234>)
 8005bf4:	9200      	str	r2, [sp, #0]
 8005bf6:	0038      	movs	r0, r7
 8005bf8:	003a      	movs	r2, r7
 8005bfa:	f00c fd8f 	bl	801271c <sprintf>
 8005bfe:	464b      	mov	r3, r9
 8005c00:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c02:	e766      	b.n	8005ad2 <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c04:	4643      	mov	r3, r8
 8005c06:	18eb      	adds	r3, r5, r3
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4453      	add	r3, sl
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	464a      	mov	r2, r9
 8005c10:	789b      	ldrb	r3, [r3, #2]
 8005c12:	9001      	str	r0, [sp, #4]
 8005c14:	7912      	ldrb	r2, [r2, #4]
 8005c16:	4924      	ldr	r1, [pc, #144]	; (8005ca8 <snipCommand+0x238>)
 8005c18:	9200      	str	r2, [sp, #0]
 8005c1a:	0038      	movs	r0, r7
 8005c1c:	003a      	movs	r2, r7
 8005c1e:	f00c fd7d 	bl	801271c <sprintf>
 8005c22:	464b      	mov	r3, r9
 8005c24:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c26:	e754      	b.n	8005ad2 <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c28:	4643      	mov	r3, r8
 8005c2a:	18eb      	adds	r3, r5, r3
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4453      	add	r3, sl
 8005c30:	4699      	mov	r9, r3
 8005c32:	003a      	movs	r2, r7
 8005c34:	789b      	ldrb	r3, [r3, #2]
 8005c36:	491d      	ldr	r1, [pc, #116]	; (8005cac <snipCommand+0x23c>)
 8005c38:	9000      	str	r0, [sp, #0]
 8005c3a:	0038      	movs	r0, r7
 8005c3c:	f00c fd6e 	bl	801271c <sprintf>
 8005c40:	464b      	mov	r3, r9
 8005c42:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c44:	e745      	b.n	8005ad2 <snipCommand+0x62>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c46:	4643      	mov	r3, r8
 8005c48:	18eb      	adds	r3, r5, r3
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4453      	add	r3, sl
 8005c4e:	4699      	mov	r9, r3
 8005c50:	003a      	movs	r2, r7
 8005c52:	789b      	ldrb	r3, [r3, #2]
 8005c54:	4916      	ldr	r1, [pc, #88]	; (8005cb0 <snipCommand+0x240>)
 8005c56:	9000      	str	r0, [sp, #0]
 8005c58:	0038      	movs	r0, r7
 8005c5a:	f00c fd5f 	bl	801271c <sprintf>
 8005c5e:	464b      	mov	r3, r9
 8005c60:	68d8      	ldr	r0, [r3, #12]
						break;
 8005c62:	e736      	b.n	8005ad2 <snipCommand+0x62>
 8005c64:	2314      	movs	r3, #20
 8005c66:	4642      	mov	r2, r8
 8005c68:	4353      	muls	r3, r2
 8005c6a:	4453      	add	r3, sl
 8005c6c:	68d8      	ldr	r0, [r3, #12]
 8005c6e:	e730      	b.n	8005ad2 <snipCommand+0x62>
 8005c70:	08016ea4 	.word	0x08016ea4
 8005c74:	0801806c 	.word	0x0801806c
 8005c78:	20000c28 	.word	0x20000c28
 8005c7c:	200016d4 	.word	0x200016d4
 8005c80:	20006860 	.word	0x20006860
 8005c84:	200017d4 	.word	0x200017d4
 8005c88:	08018120 	.word	0x08018120
 8005c8c:	08018128 	.word	0x08018128
 8005c90:	08018134 	.word	0x08018134
 8005c94:	080180a4 	.word	0x080180a4
 8005c98:	20000094 	.word	0x20000094
 8005c9c:	08018110 	.word	0x08018110
 8005ca0:	08016c48 	.word	0x08016c48
 8005ca4:	080180f4 	.word	0x080180f4
 8005ca8:	080180dc 	.word	0x080180dc
 8005cac:	080180c4 	.word	0x080180c4
 8005cb0:	080180b0 	.word	0x080180b0

08005cb4 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005cb8:	f008 fff4 	bl	800eca4 <HAL_GetDEVID>
	switch(dev){
 8005cbc:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <idcodeCommand+0x78>)
 8005cbe:	0400      	lsls	r0, r0, #16
 8005cc0:	469c      	mov	ip, r3
 8005cc2:	0c00      	lsrs	r0, r0, #16
 8005cc4:	4460      	add	r0, ip
 8005cc6:	2808      	cmp	r0, #8
 8005cc8:	d82a      	bhi.n	8005d20 <idcodeCommand+0x6c>
 8005cca:	4b19      	ldr	r3, [pc, #100]	; (8005d30 <idcodeCommand+0x7c>)
 8005ccc:	0080      	lsls	r0, r0, #2
 8005cce:	581b      	ldr	r3, [r3, r0]
 8005cd0:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005cd2:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <idcodeCommand+0x80>)
 8005cd4:	4918      	ldr	r1, [pc, #96]	; (8005d38 <idcodeCommand+0x84>)
 8005cd6:	0020      	movs	r0, r4
 8005cd8:	f00c fd20 	bl	801271c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005cdc:	f008 ffdc 	bl	800ec98 <HAL_GetREVID>
 8005ce0:	0022      	movs	r2, r4
 8005ce2:	0b03      	lsrs	r3, r0, #12
 8005ce4:	4915      	ldr	r1, [pc, #84]	; (8005d3c <idcodeCommand+0x88>)
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f00c fd18 	bl	801271c <sprintf>
}
 8005cec:	2000      	movs	r0, #0
 8005cee:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <idcodeCommand+0x8c>)
 8005cf2:	4911      	ldr	r1, [pc, #68]	; (8005d38 <idcodeCommand+0x84>)
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f00c fd11 	bl	801271c <sprintf>
			break;
 8005cfa:	e7ef      	b.n	8005cdc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005cfc:	4a11      	ldr	r2, [pc, #68]	; (8005d44 <idcodeCommand+0x90>)
 8005cfe:	490e      	ldr	r1, [pc, #56]	; (8005d38 <idcodeCommand+0x84>)
 8005d00:	0020      	movs	r0, r4
 8005d02:	f00c fd0b 	bl	801271c <sprintf>
			break;
 8005d06:	e7e9      	b.n	8005cdc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005d08:	4a0f      	ldr	r2, [pc, #60]	; (8005d48 <idcodeCommand+0x94>)
 8005d0a:	490b      	ldr	r1, [pc, #44]	; (8005d38 <idcodeCommand+0x84>)
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f00c fd05 	bl	801271c <sprintf>
			break;
 8005d12:	e7e3      	b.n	8005cdc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005d14:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <idcodeCommand+0x98>)
 8005d16:	4908      	ldr	r1, [pc, #32]	; (8005d38 <idcodeCommand+0x84>)
 8005d18:	0020      	movs	r0, r4
 8005d1a:	f00c fcff 	bl	801271c <sprintf>
			break;
 8005d1e:	e7dd      	b.n	8005cdc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005d20:	4a0b      	ldr	r2, [pc, #44]	; (8005d50 <idcodeCommand+0x9c>)
 8005d22:	4905      	ldr	r1, [pc, #20]	; (8005d38 <idcodeCommand+0x84>)
 8005d24:	0020      	movs	r0, r4
 8005d26:	f00c fcf9 	bl	801271c <sprintf>
			break;
 8005d2a:	e7d7      	b.n	8005cdc <idcodeCommand+0x28>
 8005d2c:	fffffbc0 	.word	0xfffffbc0
 8005d30:	08016c70 	.word	0x08016c70
 8005d34:	08018224 	.word	0x08018224
 8005d38:	080181f8 	.word	0x080181f8
 8005d3c:	08018244 	.word	0x08018244
 8005d40:	08018218 	.word	0x08018218
 8005d44:	08018230 	.word	0x08018230
 8005d48:	080181ec 	.word	0x080181ec
 8005d4c:	0801820c 	.word	0x0801820c
 8005d50:	0801823c 	.word	0x0801823c

08005d54 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d58:	220e      	movs	r2, #14
 8005d5a:	4911      	ldr	r1, [pc, #68]	; (8005da0 <uuidCommand+0x4c>)
 8005d5c:	f00c fadb 	bl	8012316 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d60:	4d10      	ldr	r5, [pc, #64]	; (8005da4 <uuidCommand+0x50>)
 8005d62:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <uuidCommand+0x54>)
 8005d64:	0029      	movs	r1, r5
 8005d66:	0022      	movs	r2, r4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	0020      	movs	r0, r4
 8005d6c:	f00c fcd6 	bl	801271c <sprintf>
 8005d70:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <uuidCommand+0x58>)
 8005d72:	0029      	movs	r1, r5
 8005d74:	0022      	movs	r2, r4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0020      	movs	r0, r4
 8005d7a:	f00c fccf 	bl	801271c <sprintf>
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <uuidCommand+0x5c>)
 8005d80:	0029      	movs	r1, r5
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0022      	movs	r2, r4
 8005d86:	0020      	movs	r0, r4
 8005d88:	f00c fcc8 	bl	801271c <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d8c:	0020      	movs	r0, r4
 8005d8e:	f7fa f9c3 	bl	8000118 <strlen>
 8005d92:	2203      	movs	r2, #3
 8005d94:	1820      	adds	r0, r4, r0
 8005d96:	4907      	ldr	r1, [pc, #28]	; (8005db4 <uuidCommand+0x60>)
 8005d98:	f00c fabd 	bl	8012316 <memcpy>
}
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	0801825c 	.word	0x0801825c
 8005da4:	0801826c 	.word	0x0801826c
 8005da8:	1ffff7ac 	.word	0x1ffff7ac
 8005dac:	1ffff7b0 	.word	0x1ffff7b0
 8005db0:	1ffff7b4 	.word	0x1ffff7b4
 8005db4:	08019830 	.word	0x08019830

08005db8 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005db8:	b510      	push	{r4, lr}
 8005dba:	0004      	movs	r4, r0
	GetTimeDate();
 8005dbc:	f006 fc68 	bl	800c690 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005dc0:	f7fe fcae 	bl	8004720 <GetDateString>
 8005dc4:	4903      	ldr	r1, [pc, #12]	; (8005dd4 <dateCommand+0x1c>)
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f00c fca7 	bl	801271c <sprintf>
}
 8005dce:	2000      	movs	r0, #0
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	08018274 	.word	0x08018274

08005dd8 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dda:	46ce      	mov	lr, r9
 8005ddc:	4647      	mov	r7, r8
 8005dde:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005de0:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005de6:	466a      	mov	r2, sp
 8005de8:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dea:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dec:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005df2:	f007 f9b3 	bl	800d15c <FreeRTOS_CLIGetParameter>
 8005df6:	4b6b      	ldr	r3, [pc, #428]	; (8005fa4 <getCommand+0x1cc>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005df8:	2204      	movs	r2, #4
 8005dfa:	496b      	ldr	r1, [pc, #428]	; (8005fa8 <getCommand+0x1d0>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dfc:	0004      	movs	r4, r0
 8005dfe:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e00:	f00c fcd0 	bl	80127a4 <strncmp>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d119      	bne.n	8005e3c <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005e08:	9b00      	ldr	r3, [sp, #0]
 8005e0a:	1d27      	adds	r7, r4, #4
 8005e0c:	1f1d      	subs	r5, r3, #4
 8005e0e:	002a      	movs	r2, r5
 8005e10:	4966      	ldr	r1, [pc, #408]	; (8005fac <getCommand+0x1d4>)
 8005e12:	0038      	movs	r0, r7
 8005e14:	f00c fcc6 	bl	80127a4 <strncmp>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d121      	bne.n	8005e60 <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e1c:	4b64      	ldr	r3, [pc, #400]	; (8005fb0 <getCommand+0x1d8>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d100      	bne.n	8005e26 <getCommand+0x4e>
 8005e24:	e071      	b.n	8005f0a <getCommand+0x132>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d069      	beq.n	8005efe <getCommand+0x126>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d100      	bne.n	8005e30 <getCommand+0x58>
 8005e2e:	e096      	b.n	8005f5e <getCommand+0x186>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e30:	0022      	movs	r2, r4
 8005e32:	4960      	ldr	r1, [pc, #384]	; (8005fb4 <getCommand+0x1dc>)
 8005e34:	0030      	movs	r0, r6
 8005e36:	f00c fc71 	bl	801271c <sprintf>
 8005e3a:	e00b      	b.n	8005e54 <getCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	495e      	ldr	r1, [pc, #376]	; (8005fb8 <getCommand+0x1e0>)
 8005e40:	0020      	movs	r0, r4
 8005e42:	f00c fcaf 	bl	80127a4 <strncmp>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d03b      	beq.n	8005ec2 <getCommand+0xea>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005e4a:	2213      	movs	r2, #19
 8005e4c:	495b      	ldr	r1, [pc, #364]	; (8005fbc <getCommand+0x1e4>)
 8005e4e:	0030      	movs	r0, r6
 8005e50:	f00c fa61 	bl	8012316 <memcpy>
}
 8005e54:	2000      	movs	r0, #0
 8005e56:	b003      	add	sp, #12
 8005e58:	bc0c      	pop	{r2, r3}
 8005e5a:	4690      	mov	r8, r2
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005e60:	002a      	movs	r2, r5
 8005e62:	4957      	ldr	r1, [pc, #348]	; (8005fc0 <getCommand+0x1e8>)
 8005e64:	0038      	movs	r0, r7
 8005e66:	f00c fc9d 	bl	80127a4 <strncmp>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d041      	beq.n	8005ef2 <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005e6e:	002a      	movs	r2, r5
 8005e70:	4954      	ldr	r1, [pc, #336]	; (8005fc4 <getCommand+0x1ec>)
 8005e72:	0038      	movs	r0, r7
 8005e74:	f00c fc96 	bl	80127a4 <strncmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d07d      	beq.n	8005f78 <getCommand+0x1a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005e7c:	002a      	movs	r2, r5
 8005e7e:	4952      	ldr	r1, [pc, #328]	; (8005fc8 <getCommand+0x1f0>)
 8005e80:	0038      	movs	r0, r7
 8005e82:	f00c fc8f 	bl	80127a4 <strncmp>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d07d      	beq.n	8005f86 <getCommand+0x1ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005e8a:	002a      	movs	r2, r5
 8005e8c:	494f      	ldr	r1, [pc, #316]	; (8005fcc <getCommand+0x1f4>)
 8005e8e:	0038      	movs	r0, r7
 8005e90:	f00c fc88 	bl	80127a4 <strncmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d068      	beq.n	8005f6a <getCommand+0x192>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005e98:	002a      	movs	r2, r5
 8005e9a:	494d      	ldr	r1, [pc, #308]	; (8005fd0 <getCommand+0x1f8>)
 8005e9c:	0038      	movs	r0, r7
 8005e9e:	f00c fc81 	bl	80127a4 <strncmp>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d076      	beq.n	8005f94 <getCommand+0x1bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005ea6:	002a      	movs	r2, r5
 8005ea8:	494a      	ldr	r1, [pc, #296]	; (8005fd4 <getCommand+0x1fc>)
 8005eaa:	0038      	movs	r0, r7
 8005eac:	f00c fc7a 	bl	80127a4 <strncmp>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d1ca      	bne.n	8005e4a <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005eb4:	4b48      	ldr	r3, [pc, #288]	; (8005fd8 <getCommand+0x200>)
 8005eb6:	4949      	ldr	r1, [pc, #292]	; (8005fdc <getCommand+0x204>)
 8005eb8:	795a      	ldrb	r2, [r3, #5]
 8005eba:	0030      	movs	r0, r6
 8005ebc:	f00c fc2e 	bl	801271c <sprintf>
 8005ec0:	e7c8      	b.n	8005e54 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ec2:	0028      	movs	r0, r5
 8005ec4:	aa01      	add	r2, sp, #4
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	f007 f948 	bl	800d15c <FreeRTOS_CLIGetParameter>
 8005ecc:	2400      	movs	r4, #0
 8005ece:	0007      	movs	r7, r0
 8005ed0:	4d43      	ldr	r5, [pc, #268]	; (8005fe0 <getCommand+0x208>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005ed2:	0029      	movs	r1, r5
 8005ed4:	0038      	movs	r0, r7
 8005ed6:	f7fa f915 	bl	8000104 <strcmp>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d01b      	beq.n	8005f16 <getCommand+0x13e>
 8005ede:	3401      	adds	r4, #1
 8005ee0:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8005ee2:	2c0a      	cmp	r4, #10
 8005ee4:	d1f5      	bne.n	8005ed2 <getCommand+0xfa>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005ee6:	003a      	movs	r2, r7
 8005ee8:	493e      	ldr	r1, [pc, #248]	; (8005fe4 <getCommand+0x20c>)
 8005eea:	0030      	movs	r0, r6
 8005eec:	f00c fc16 	bl	801271c <sprintf>
			return pdFALSE;
 8005ef0:	e7b0      	b.n	8005e54 <getCommand+0x7c>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <getCommand+0x1d8>)
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d007      	beq.n	8005f0a <getCommand+0x132>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d195      	bne.n	8005e2a <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005efe:	4a3a      	ldr	r2, [pc, #232]	; (8005fe8 <getCommand+0x210>)
 8005f00:	493a      	ldr	r1, [pc, #232]	; (8005fec <getCommand+0x214>)
 8005f02:	0030      	movs	r0, r6
 8005f04:	f00c fc0a 	bl	801271c <sprintf>
 8005f08:	e7a4      	b.n	8005e54 <getCommand+0x7c>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005f0a:	4a39      	ldr	r2, [pc, #228]	; (8005ff0 <getCommand+0x218>)
 8005f0c:	4937      	ldr	r1, [pc, #220]	; (8005fec <getCommand+0x214>)
 8005f0e:	0030      	movs	r0, r6
 8005f10:	f00c fc04 	bl	801271c <sprintf>
 8005f14:	e79e      	b.n	8005e54 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005f16:	003a      	movs	r2, r7
 8005f18:	4936      	ldr	r1, [pc, #216]	; (8005ff4 <getCommand+0x21c>)
 8005f1a:	0030      	movs	r0, r6
 8005f1c:	f00c fbfe 	bl	801271c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8005f20:	4f35      	ldr	r7, [pc, #212]	; (8005ff8 <getCommand+0x220>)
 8005f22:	783b      	ldrb	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d095      	beq.n	8005e54 <getCommand+0x7c>
 8005f28:	2501      	movs	r5, #1
 8005f2a:	4b34      	ldr	r3, [pc, #208]	; (8005ffc <getCommand+0x224>)
 8005f2c:	40a5      	lsls	r5, r4
 8005f2e:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f30:	4b33      	ldr	r3, [pc, #204]	; (8006000 <getCommand+0x228>)
			for(j =1; j <= N; j++)						// N modules
 8005f32:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f34:	4699      	mov	r9, r3
 8005f36:	e005      	b.n	8005f44 <getCommand+0x16c>
			for(j =1; j <= N; j++)						// N modules
 8005f38:	3401      	adds	r4, #1
 8005f3a:	783b      	ldrb	r3, [r7, #0]
 8005f3c:	b2e4      	uxtb	r4, r4
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	d200      	bcs.n	8005f44 <getCommand+0x16c>
 8005f42:	e787      	b.n	8005e54 <getCommand+0x7c>
				if(InGroup(j,i)){
 8005f44:	4642      	mov	r2, r8
 8005f46:	1e63      	subs	r3, r4, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	5ad3      	ldrh	r3, [r2, r3]
 8005f4c:	421d      	tst	r5, r3
 8005f4e:	d0f3      	beq.n	8005f38 <getCommand+0x160>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005f50:	0023      	movs	r3, r4
 8005f52:	0032      	movs	r2, r6
 8005f54:	4649      	mov	r1, r9
 8005f56:	0030      	movs	r0, r6
 8005f58:	f00c fbe0 	bl	801271c <sprintf>
 8005f5c:	e7ec      	b.n	8005f38 <getCommand+0x160>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005f5e:	4a29      	ldr	r2, [pc, #164]	; (8006004 <getCommand+0x22c>)
 8005f60:	4922      	ldr	r1, [pc, #136]	; (8005fec <getCommand+0x214>)
 8005f62:	0030      	movs	r0, r6
 8005f64:	f00c fbda 	bl	801271c <sprintf>
 8005f68:	e774      	b.n	8005e54 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <getCommand+0x200>)
 8005f6c:	491b      	ldr	r1, [pc, #108]	; (8005fdc <getCommand+0x204>)
 8005f6e:	885a      	ldrh	r2, [r3, #2]
 8005f70:	0030      	movs	r0, r6
 8005f72:	f00c fbd3 	bl	801271c <sprintf>
 8005f76:	e76d      	b.n	8005e54 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <getCommand+0x200>)
 8005f7a:	4918      	ldr	r1, [pc, #96]	; (8005fdc <getCommand+0x204>)
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	0030      	movs	r0, r6
 8005f80:	f00c fbcc 	bl	801271c <sprintf>
 8005f84:	e766      	b.n	8005e54 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <getCommand+0x200>)
 8005f88:	4914      	ldr	r1, [pc, #80]	; (8005fdc <getCommand+0x204>)
 8005f8a:	881a      	ldrh	r2, [r3, #0]
 8005f8c:	0030      	movs	r0, r6
 8005f8e:	f00c fbc5 	bl	801271c <sprintf>
 8005f92:	e75f      	b.n	8005e54 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <getCommand+0x200>)
 8005f96:	4911      	ldr	r1, [pc, #68]	; (8005fdc <getCommand+0x204>)
 8005f98:	791a      	ldrb	r2, [r3, #4]
 8005f9a:	0030      	movs	r0, r6
 8005f9c:	f00c fbbe 	bl	801271c <sprintf>
 8005fa0:	e758      	b.n	8005e54 <getCommand+0x7c>
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	200017d4 	.word	0x200017d4
 8005fa8:	0801828c 	.word	0x0801828c
 8005fac:	08018294 	.word	0x08018294
 8005fb0:	200067c4 	.word	0x200067c4
 8005fb4:	08018328 	.word	0x08018328
 8005fb8:	08018304 	.word	0x08018304
 8005fbc:	08018314 	.word	0x08018314
 8005fc0:	080182ac 	.word	0x080182ac
 8005fc4:	080182b4 	.word	0x080182b4
 8005fc8:	080182c0 	.word	0x080182c0
 8005fcc:	080182cc 	.word	0x080182cc
 8005fd0:	080182dc 	.word	0x080182dc
 8005fd4:	080182f0 	.word	0x080182f0
 8005fd8:	20006844 	.word	0x20006844
 8005fdc:	08017aa0 	.word	0x08017aa0
 8005fe0:	20000ad0 	.word	0x20000ad0
 8005fe4:	08018348 	.word	0x08018348
 8005fe8:	080182a0 	.word	0x080182a0
 8005fec:	08017320 	.word	0x08017320
 8005ff0:	08017444 	.word	0x08017444
 8005ff4:	08018364 	.word	0x08018364
 8005ff8:	20000008 	.word	0x20000008
 8005ffc:	20000a9c 	.word	0x20000a9c
 8006000:	0801830c 	.word	0x0801830c
 8006004:	080182a4 	.word	0x080182a4

08006008 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006008:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800600a:	b570      	push	{r4, r5, r6, lr}
 800600c:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800600e:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006010:	0006      	movs	r6, r0
 8006012:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006014:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006016:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006018:	f007 f8a0 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800601c:	9d01      	ldr	r5, [sp, #4]
 800601e:	491f      	ldr	r1, [pc, #124]	; (800609c <defaultCommand+0x94>)
 8006020:	002a      	movs	r2, r5
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006022:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006024:	f00c fbbe 	bl	80127a4 <strncmp>
 8006028:	2800      	cmp	r0, #0
 800602a:	d026      	beq.n	800607a <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 800602c:	002a      	movs	r2, r5
 800602e:	491c      	ldr	r1, [pc, #112]	; (80060a0 <defaultCommand+0x98>)
 8006030:	0020      	movs	r0, r4
 8006032:	f00c fbb7 	bl	80127a4 <strncmp>
 8006036:	2800      	cmp	r0, #0
 8006038:	d119      	bne.n	800606e <defaultCommand+0x66>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800603a:	2116      	movs	r1, #22
 800603c:	2200      	movs	r2, #0
 800603e:	20ff      	movs	r0, #255	; 0xff
 8006040:	f002 f86c 	bl	800811c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006044:	2202      	movs	r2, #2
 8006046:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <defaultCommand+0x9c>)
		osDelay(100);
 8006048:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 800604a:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 800604c:	f006 ff7a 	bl	800cf44 <osDelay>
		ClearEEportsDir();
 8006050:	f7fd fb04 	bl	800365c <ClearEEportsDir>
		ClearROtopology();
 8006054:	f003 fd7c 	bl	8009b50 <ClearROtopology>
		osDelay(100);
 8006058:	2064      	movs	r0, #100	; 0x64
 800605a:	f006 ff73 	bl	800cf44 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	4911      	ldr	r1, [pc, #68]	; (80060a8 <defaultCommand+0xa0>)
 8006062:	0030      	movs	r0, r6
 8006064:	f00c f957 	bl	8012316 <memcpy>
}
 8006068:	2000      	movs	r0, #0
 800606a:	b002      	add	sp, #8
 800606c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800606e:	220f      	movs	r2, #15
 8006070:	490e      	ldr	r1, [pc, #56]	; (80060ac <defaultCommand+0xa4>)
 8006072:	0030      	movs	r0, r6
 8006074:	f00c f94f 	bl	8012316 <memcpy>
 8006078:	e7f6      	b.n	8006068 <defaultCommand+0x60>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800607a:	490d      	ldr	r1, [pc, #52]	; (80060b0 <defaultCommand+0xa8>)
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <defaultCommand+0xac>)
 800607e:	000a      	movs	r2, r1
 8006080:	cb13      	ldmia	r3!, {r0, r1, r4}
 8006082:	c213      	stmia	r2!, {r0, r1, r4}
 8006084:	cb13      	ldmia	r3!, {r0, r1, r4}
 8006086:	c213      	stmia	r2!, {r0, r1, r4}
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 800608c:	f7fd faa2 	bl	80035d4 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006090:	2227      	movs	r2, #39	; 0x27
 8006092:	4909      	ldr	r1, [pc, #36]	; (80060b8 <defaultCommand+0xb0>)
 8006094:	0030      	movs	r0, r6
 8006096:	f00c f93e 	bl	8012316 <memcpy>
 800609a:	e7e5      	b.n	8006068 <defaultCommand+0x60>
 800609c:	08018378 	.word	0x08018378
 80060a0:	080183a8 	.word	0x080183a8
 80060a4:	2000113e 	.word	0x2000113e
 80060a8:	080183c0 	.word	0x080183c0
 80060ac:	080183b0 	.word	0x080183b0
 80060b0:	20006844 	.word	0x20006844
 80060b4:	20000014 	.word	0x20000014
 80060b8:	08018380 	.word	0x08018380

080060bc <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060be:	46de      	mov	lr, fp
 80060c0:	4657      	mov	r7, sl
 80060c2:	464e      	mov	r6, r9
 80060c4:	4645      	mov	r5, r8
 80060c6:	b5e0      	push	{r5, r6, r7, lr}
 80060c8:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060ca:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060cc:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060ce:	aa09      	add	r2, sp, #36	; 0x24
 80060d0:	2101      	movs	r1, #1
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d2:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060d4:	0038      	movs	r0, r7
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	930a      	str	r3, [sp, #40]	; 0x28
 80060da:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80060dc:	930c      	str	r3, [sp, #48]	; 0x30
 80060de:	930d      	str	r3, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e0:	f007 f83c 	bl	800d15c <FreeRTOS_CLIGetParameter>
 80060e4:	4ccf      	ldr	r4, [pc, #828]	; (8006424 <setCommand+0x368>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060e6:	2204      	movs	r2, #4
 80060e8:	49cf      	ldr	r1, [pc, #828]	; (8006428 <setCommand+0x36c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060ea:	0006      	movs	r6, r0
 80060ec:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ee:	f00c fb59 	bl	80127a4 <strncmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d100      	bne.n	80060f8 <setCommand+0x3c>
 80060f6:	e082      	b.n	80061fe <setCommand+0x142>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80060f8:	2204      	movs	r2, #4
 80060fa:	49cc      	ldr	r1, [pc, #816]	; (800642c <setCommand+0x370>)
 80060fc:	0030      	movs	r0, r6
 80060fe:	f00c fb51 	bl	80127a4 <strncmp>
 8006102:	2800      	cmp	r0, #0
 8006104:	d014      	beq.n	8006130 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006106:	2204      	movs	r2, #4
 8006108:	49c9      	ldr	r1, [pc, #804]	; (8006430 <setCommand+0x374>)
 800610a:	0030      	movs	r0, r6
 800610c:	f00c fb4a 	bl	80127a4 <strncmp>
 8006110:	2800      	cmp	r0, #0
 8006112:	d100      	bne.n	8006116 <setCommand+0x5a>
 8006114:	e0e0      	b.n	80062d8 <setCommand+0x21c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006116:	2213      	movs	r2, #19
 8006118:	49c6      	ldr	r1, [pc, #792]	; (8006434 <setCommand+0x378>)
 800611a:	0028      	movs	r0, r5
 800611c:	f00c f8fb 	bl	8012316 <memcpy>
}
 8006120:	2000      	movs	r0, #0
 8006122:	b00f      	add	sp, #60	; 0x3c
 8006124:	bc3c      	pop	{r2, r3, r4, r5}
 8006126:	4690      	mov	r8, r2
 8006128:	4699      	mov	r9, r3
 800612a:	46a2      	mov	sl, r4
 800612c:	46ab      	mov	fp, r5
 800612e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006130:	aa0a      	add	r2, sp, #40	; 0x28
 8006132:	2102      	movs	r1, #2
 8006134:	0038      	movs	r0, r7
 8006136:	f007 f811 	bl	800d15c <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800613a:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800613c:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800613e:	2103      	movs	r1, #3
 8006140:	0038      	movs	r0, r7
 8006142:	f007 f80b 	bl	800d15c <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006146:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006148:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800614a:	2104      	movs	r1, #4
 800614c:	0038      	movs	r0, r7
 800614e:	f007 f805 	bl	800d15c <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006152:	aa0d      	add	r2, sp, #52	; 0x34
 8006154:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006156:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006158:	0038      	movs	r0, r7
 800615a:	f006 ffff 	bl	800d15c <FreeRTOS_CLIGetParameter>
 800615e:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006160:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006162:	f00b fe12 	bl	8011d8a <atoi>
 8006166:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006168:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800616a:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800616c:	f00b fe0d 	bl	8011d8a <atoi>
 8006170:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006172:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006174:	f00b fe09 	bl	8011d8a <atoi>
		if(pcParameterString5 != NULL){
 8006178:	6ca6      	ldr	r6, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800617a:	4682      	mov	sl, r0
		if(pcParameterString5 != NULL){
 800617c:	2e00      	cmp	r6, #0
 800617e:	d010      	beq.n	80061a2 <setCommand+0xe6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006180:	2202      	movs	r2, #2
 8006182:	49ad      	ldr	r1, [pc, #692]	; (8006438 <setCommand+0x37c>)
 8006184:	0030      	movs	r0, r6
 8006186:	f00c fb0d 	bl	80127a4 <strncmp>
 800618a:	2800      	cmp	r0, #0
 800618c:	d100      	bne.n	8006190 <setCommand+0xd4>
 800618e:	e145      	b.n	800641c <setCommand+0x360>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006190:	2202      	movs	r2, #2
 8006192:	49aa      	ldr	r1, [pc, #680]	; (800643c <setCommand+0x380>)
 8006194:	0030      	movs	r0, r6
 8006196:	f00c fb05 	bl	80127a4 <strncmp>
 800619a:	2800      	cmp	r0, #0
 800619c:	d129      	bne.n	80061f2 <setCommand+0x136>
				temp84 =RTC_PM;
 800619e:	2302      	movs	r3, #2
 80061a0:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061a2:	464b      	mov	r3, r9
 80061a4:	2b17      	cmp	r3, #23
 80061a6:	d824      	bhi.n	80061f2 <setCommand+0x136>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80061a8:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061aa:	2f3b      	cmp	r7, #59	; 0x3b
 80061ac:	d821      	bhi.n	80061f2 <setCommand+0x136>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80061ae:	4653      	mov	r3, sl
 80061b0:	b2de      	uxtb	r6, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80061b2:	2e3b      	cmp	r6, #59	; 0x3b
 80061b4:	d81d      	bhi.n	80061f2 <setCommand+0x136>
				GetTimeDate();
 80061b6:	f006 fa6b 	bl	800c690 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80061ba:	4ba1      	ldr	r3, [pc, #644]	; (8006440 <setCommand+0x384>)
 80061bc:	7d1a      	ldrb	r2, [r3, #20]
 80061be:	7d59      	ldrb	r1, [r3, #21]
 80061c0:	7d98      	ldrb	r0, [r3, #22]
 80061c2:	4694      	mov	ip, r2
 80061c4:	8b1a      	ldrh	r2, [r3, #24]
 80061c6:	7b1b      	ldrb	r3, [r3, #12]
 80061c8:	9701      	str	r7, [sp, #4]
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	4643      	mov	r3, r8
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	464b      	mov	r3, r9
 80061d4:	9600      	str	r6, [sp, #0]
 80061d6:	9302      	str	r3, [sp, #8]
 80061d8:	4663      	mov	r3, ip
 80061da:	f006 f9ff 	bl	800c5dc <BOS_CalendarConfig>
 80061de:	4681      	mov	r9, r0
	if(result == BOS_OK){
 80061e0:	464b      	mov	r3, r9
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d100      	bne.n	80061e8 <setCommand+0x12c>
 80061e6:	e24d      	b.n	8006684 <setCommand+0x5c8>
	else if(result == BOS_ERR_WrongParam)
 80061e8:	464b      	mov	r3, r9
 80061ea:	2b67      	cmp	r3, #103	; 0x67
 80061ec:	d093      	beq.n	8006116 <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 80061ee:	2b68      	cmp	r3, #104	; 0x68
 80061f0:	d196      	bne.n	8006120 <setCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061f2:	220f      	movs	r2, #15
 80061f4:	4993      	ldr	r1, [pc, #588]	; (8006444 <setCommand+0x388>)
 80061f6:	0028      	movs	r0, r5
 80061f8:	f00c f88d 	bl	8012316 <memcpy>
 80061fc:	e790      	b.n	8006120 <setCommand+0x64>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061fe:	aa0a      	add	r2, sp, #40	; 0x28
 8006200:	2102      	movs	r1, #2
 8006202:	0038      	movs	r0, r7
 8006204:	f006 ffaa 	bl	800d15c <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800620a:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800620c:	1d1e      	adds	r6, r3, #4
 800620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006210:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006212:	1f1f      	subs	r7, r3, #4
 8006214:	4b8c      	ldr	r3, [pc, #560]	; (8006448 <setCommand+0x38c>)
 8006216:	003a      	movs	r2, r7
 8006218:	0019      	movs	r1, r3
 800621a:	0030      	movs	r0, r6
 800621c:	4699      	mov	r9, r3
 800621e:	f00c fac1 	bl	80127a4 <strncmp>
 8006222:	2800      	cmp	r0, #0
 8006224:	d128      	bne.n	8006278 <setCommand+0x1bc>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006226:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006228:	4988      	ldr	r1, [pc, #544]	; (800644c <setCommand+0x390>)
 800622a:	0032      	movs	r2, r6
 800622c:	4640      	mov	r0, r8
 800622e:	f00c fab9 	bl	80127a4 <strncmp>
 8006232:	2800      	cmp	r0, #0
 8006234:	d100      	bne.n	8006238 <setCommand+0x17c>
 8006236:	e21a      	b.n	800666e <setCommand+0x5b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006238:	0032      	movs	r2, r6
 800623a:	4985      	ldr	r1, [pc, #532]	; (8006450 <setCommand+0x394>)
 800623c:	4640      	mov	r0, r8
 800623e:	f00c fab1 	bl	80127a4 <strncmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	d100      	bne.n	8006248 <setCommand+0x18c>
 8006246:	e256      	b.n	80066f6 <setCommand+0x63a>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006248:	0032      	movs	r2, r6
 800624a:	4982      	ldr	r1, [pc, #520]	; (8006454 <setCommand+0x398>)
 800624c:	4640      	mov	r0, r8
 800624e:	f00c faa9 	bl	80127a4 <strncmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	d100      	bne.n	8006258 <setCommand+0x19c>
 8006256:	e222      	b.n	800669e <setCommand+0x5e2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006258:	0032      	movs	r2, r6
 800625a:	497f      	ldr	r1, [pc, #508]	; (8006458 <setCommand+0x39c>)
 800625c:	4640      	mov	r0, r8
 800625e:	f00c faa1 	bl	80127a4 <strncmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	d1c5      	bne.n	80061f2 <setCommand+0x136>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006266:	4b7d      	ldr	r3, [pc, #500]	; (800645c <setCommand+0x3a0>)
 8006268:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800626a:	208a      	movs	r0, #138	; 0x8a
 800626c:	7859      	ldrb	r1, [r3, #1]
 800626e:	0040      	lsls	r0, r0, #1
 8006270:	0209      	lsls	r1, r1, #8
 8006272:	f004 fba7 	bl	800a9c4 <EE_WriteVariable>
 8006276:	e205      	b.n	8006684 <setCommand+0x5c8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006278:	003a      	movs	r2, r7
 800627a:	4979      	ldr	r1, [pc, #484]	; (8006460 <setCommand+0x3a4>)
 800627c:	0030      	movs	r0, r6
 800627e:	f00c fa91 	bl	80127a4 <strncmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	d000      	beq.n	8006288 <setCommand+0x1cc>
 8006286:	e08d      	b.n	80063a4 <setCommand+0x2e8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006288:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800628a:	4970      	ldr	r1, [pc, #448]	; (800644c <setCommand+0x390>)
 800628c:	0032      	movs	r2, r6
 800628e:	4640      	mov	r0, r8
 8006290:	f00c fa88 	bl	80127a4 <strncmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	d100      	bne.n	800629a <setCommand+0x1de>
 8006298:	e239      	b.n	800670e <setCommand+0x652>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800629a:	0032      	movs	r2, r6
 800629c:	496c      	ldr	r1, [pc, #432]	; (8006450 <setCommand+0x394>)
 800629e:	4640      	mov	r0, r8
 80062a0:	f00c fa80 	bl	80127a4 <strncmp>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d100      	bne.n	80062aa <setCommand+0x1ee>
 80062a8:	e213      	b.n	80066d2 <setCommand+0x616>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80062aa:	0032      	movs	r2, r6
 80062ac:	4649      	mov	r1, r9
 80062ae:	4640      	mov	r0, r8
 80062b0:	f00c fa78 	bl	80127a4 <strncmp>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d100      	bne.n	80062ba <setCommand+0x1fe>
 80062b8:	e274      	b.n	80067a4 <setCommand+0x6e8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062ba:	0032      	movs	r2, r6
 80062bc:	4966      	ldr	r1, [pc, #408]	; (8006458 <setCommand+0x39c>)
 80062be:	4640      	mov	r0, r8
 80062c0:	f00c fa70 	bl	80127a4 <strncmp>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d194      	bne.n	80061f2 <setCommand+0x136>
				BOSMessaging.trace =TRACE_NONE;
 80062c8:	4b64      	ldr	r3, [pc, #400]	; (800645c <setCommand+0x3a0>)
 80062ca:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062cc:	3015      	adds	r0, #21
 80062ce:	7819      	ldrb	r1, [r3, #0]
 80062d0:	30ff      	adds	r0, #255	; 0xff
 80062d2:	f004 fb77 	bl	800a9c4 <EE_WriteVariable>
 80062d6:	e1d5      	b.n	8006684 <setCommand+0x5c8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062d8:	aa0a      	add	r2, sp, #40	; 0x28
 80062da:	2102      	movs	r1, #2
 80062dc:	0038      	movs	r0, r7
 80062de:	f006 ff3d 	bl	800d15c <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062e2:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80062e4:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062e6:	2103      	movs	r1, #3
 80062e8:	0038      	movs	r0, r7
 80062ea:	f006 ff37 	bl	800d15c <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062ee:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80062f0:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062f2:	2104      	movs	r1, #4
 80062f4:	0038      	movs	r0, r7
 80062f6:	f006 ff31 	bl	800d15c <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80062fa:	aa0d      	add	r2, sp, #52	; 0x34
 80062fc:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80062fe:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006300:	0038      	movs	r0, r7
 8006302:	f006 ff2b 	bl	800d15c <FreeRTOS_CLIGetParameter>
 8006306:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006308:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800630a:	f00b fd3e 	bl	8011d8a <atoi>
 800630e:	4680      	mov	r8, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006310:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006312:	f00b fd3a 	bl	8011d8a <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006316:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006318:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800631a:	2206      	movs	r2, #6
 800631c:	4951      	ldr	r1, [pc, #324]	; (8006464 <setCommand+0x3a8>)
 800631e:	0038      	movs	r0, r7
 8006320:	f00c fa40 	bl	80127a4 <strncmp>
 8006324:	2800      	cmp	r0, #0
 8006326:	d100      	bne.n	800632a <setCommand+0x26e>
 8006328:	e0b6      	b.n	8006498 <setCommand+0x3dc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 800632a:	2207      	movs	r2, #7
 800632c:	494e      	ldr	r1, [pc, #312]	; (8006468 <setCommand+0x3ac>)
 800632e:	0038      	movs	r0, r7
 8006330:	f00c fa38 	bl	80127a4 <strncmp>
 8006334:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8006336:	9006      	str	r0, [sp, #24]
 8006338:	2207      	movs	r2, #7
 800633a:	494c      	ldr	r1, [pc, #304]	; (800646c <setCommand+0x3b0>)
 800633c:	0030      	movs	r0, r6
 800633e:	f00c fa31 	bl	80127a4 <strncmp>
 8006342:	9b06      	ldr	r3, [sp, #24]
 8006344:	4681      	mov	r9, r0
 8006346:	9007      	str	r0, [sp, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d100      	bne.n	800634e <setCommand+0x292>
 800634c:	e1a4      	b.n	8006698 <setCommand+0x5dc>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800634e:	2209      	movs	r2, #9
 8006350:	4947      	ldr	r1, [pc, #284]	; (8006470 <setCommand+0x3b4>)
 8006352:	0038      	movs	r0, r7
 8006354:	f00c fa26 	bl	80127a4 <strncmp>
 8006358:	2800      	cmp	r0, #0
 800635a:	d100      	bne.n	800635e <setCommand+0x2a2>
 800635c:	e211      	b.n	8006782 <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800635e:	2208      	movs	r2, #8
 8006360:	4944      	ldr	r1, [pc, #272]	; (8006474 <setCommand+0x3b8>)
 8006362:	0038      	movs	r0, r7
 8006364:	f00c fa1e 	bl	80127a4 <strncmp>
 8006368:	2800      	cmp	r0, #0
 800636a:	d100      	bne.n	800636e <setCommand+0x2b2>
 800636c:	e220      	b.n	80067b0 <setCommand+0x6f4>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800636e:	2206      	movs	r2, #6
 8006370:	4941      	ldr	r1, [pc, #260]	; (8006478 <setCommand+0x3bc>)
 8006372:	0038      	movs	r0, r7
 8006374:	f00c fa16 	bl	80127a4 <strncmp>
 8006378:	2800      	cmp	r0, #0
 800637a:	d100      	bne.n	800637e <setCommand+0x2c2>
 800637c:	e22e      	b.n	80067dc <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800637e:	2208      	movs	r2, #8
 8006380:	493e      	ldr	r1, [pc, #248]	; (800647c <setCommand+0x3c0>)
 8006382:	0038      	movs	r0, r7
 8006384:	f00c fa0e 	bl	80127a4 <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	d100      	bne.n	800638e <setCommand+0x2d2>
 800638c:	e229      	b.n	80067e2 <setCommand+0x726>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800638e:	2206      	movs	r2, #6
 8006390:	493b      	ldr	r1, [pc, #236]	; (8006480 <setCommand+0x3c4>)
 8006392:	0038      	movs	r0, r7
 8006394:	f00c fa06 	bl	80127a4 <strncmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	d000      	beq.n	800639e <setCommand+0x2e2>
 800639c:	e262      	b.n	8006864 <setCommand+0x7a8>
			temp81 =SUNDAY;
 800639e:	2307      	movs	r3, #7
 80063a0:	469b      	mov	fp, r3
 80063a2:	e082      	b.n	80064aa <setCommand+0x3ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80063a4:	003a      	movs	r2, r7
 80063a6:	4937      	ldr	r1, [pc, #220]	; (8006484 <setCommand+0x3c8>)
 80063a8:	0030      	movs	r0, r6
 80063aa:	f00c f9fb 	bl	80127a4 <strncmp>
 80063ae:	4681      	mov	r9, r0
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d100      	bne.n	80063b6 <setCommand+0x2fa>
 80063b4:	e1b7      	b.n	8006726 <setCommand+0x66a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80063b6:	003a      	movs	r2, r7
 80063b8:	4933      	ldr	r1, [pc, #204]	; (8006488 <setCommand+0x3cc>)
 80063ba:	0030      	movs	r0, r6
 80063bc:	f00c f9f2 	bl	80127a4 <strncmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d100      	bne.n	80063c6 <setCommand+0x30a>
 80063c4:	e177      	b.n	80066b6 <setCommand+0x5fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80063c6:	003a      	movs	r2, r7
 80063c8:	4930      	ldr	r1, [pc, #192]	; (800648c <setCommand+0x3d0>)
 80063ca:	0030      	movs	r0, r6
 80063cc:	f00c f9ea 	bl	80127a4 <strncmp>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d100      	bne.n	80063d6 <setCommand+0x31a>
 80063d4:	e1d8      	b.n	8006788 <setCommand+0x6cc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80063d6:	003a      	movs	r2, r7
 80063d8:	492d      	ldr	r1, [pc, #180]	; (8006490 <setCommand+0x3d4>)
 80063da:	0030      	movs	r0, r6
 80063dc:	f00c f9e2 	bl	80127a4 <strncmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d100      	bne.n	80063e6 <setCommand+0x32a>
 80063e4:	e1e7      	b.n	80067b6 <setCommand+0x6fa>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80063e6:	003a      	movs	r2, r7
 80063e8:	492a      	ldr	r1, [pc, #168]	; (8006494 <setCommand+0x3d8>)
 80063ea:	0030      	movs	r0, r6
 80063ec:	f00c f9da 	bl	80127a4 <strncmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d000      	beq.n	80063f6 <setCommand+0x33a>
 80063f4:	e68f      	b.n	8006116 <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 80063f6:	4640      	mov	r0, r8
 80063f8:	f00b fcc7 	bl	8011d8a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80063fc:	1e43      	subs	r3, r0, #1
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2bfe      	cmp	r3, #254	; 0xfe
 8006402:	d900      	bls.n	8006406 <setCommand+0x34a>
 8006404:	e6f5      	b.n	80061f2 <setCommand+0x136>
				BOS.buttons.maxInterClickTime =temp16;
 8006406:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <setCommand+0x384>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006408:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 800640a:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800640c:	0200      	lsls	r0, r0, #8
 800640e:	4301      	orrs	r1, r0
 8006410:	2018      	movs	r0, #24
 8006412:	b289      	uxth	r1, r1
 8006414:	30ff      	adds	r0, #255	; 0xff
 8006416:	f004 fad5 	bl	800a9c4 <EE_WriteVariable>
 800641a:	e133      	b.n	8006684 <setCommand+0x5c8>
				temp84 =RTC_AM;
 800641c:	2301      	movs	r3, #1
 800641e:	4698      	mov	r8, r3
 8006420:	e6bf      	b.n	80061a2 <setCommand+0xe6>
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	200017d4 	.word	0x200017d4
 8006428:	0801828c 	.word	0x0801828c
 800642c:	08018504 	.word	0x08018504
 8006430:	08018514 	.word	0x08018514
 8006434:	08018314 	.word	0x08018314
 8006438:	0801850c 	.word	0x0801850c
 800643c:	08018510 	.word	0x08018510
 8006440:	20006844 	.word	0x20006844
 8006444:	080183b0 	.word	0x080183b0
 8006448:	08018294 	.word	0x08018294
 800644c:	08017444 	.word	0x08017444
 8006450:	08018400 	.word	0x08018400
 8006454:	08018408 	.word	0x08018408
 8006458:	080182a4 	.word	0x080182a4
 800645c:	200067c4 	.word	0x200067c4
 8006460:	080182ac 	.word	0x080182ac
 8006464:	0801851c 	.word	0x0801851c
 8006468:	08018524 	.word	0x08018524
 800646c:	0801852c 	.word	0x0801852c
 8006470:	08018534 	.word	0x08018534
 8006474:	08018540 	.word	0x08018540
 8006478:	0801854c 	.word	0x0801854c
 800647c:	08018554 	.word	0x08018554
 8006480:	08018560 	.word	0x08018560
 8006484:	080182b4 	.word	0x080182b4
 8006488:	080182c0 	.word	0x080182c0
 800648c:	080182cc 	.word	0x080182cc
 8006490:	080182dc 	.word	0x080182dc
 8006494:	080182f0 	.word	0x080182f0
 8006498:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800649a:	2207      	movs	r2, #7
 800649c:	49d3      	ldr	r1, [pc, #844]	; (80067ec <setCommand+0x730>)
 800649e:	0030      	movs	r0, r6
 80064a0:	f00c f980 	bl	80127a4 <strncmp>
			temp81 =MONDAY;
 80064a4:	2301      	movs	r3, #1
 80064a6:	4681      	mov	r9, r0
 80064a8:	469b      	mov	fp, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064aa:	464b      	mov	r3, r9
			temp82 =JANUARY;
 80064ac:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d123      	bne.n	80064fa <setCommand+0x43e>
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064b2:	4643      	mov	r3, r8
 80064b4:	b2de      	uxtb	r6, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064b6:	1e73      	subs	r3, r6, #1
 80064b8:	2b1e      	cmp	r3, #30
 80064ba:	d900      	bls.n	80064be <setCommand+0x402>
 80064bc:	e699      	b.n	80061f2 <setCommand+0x136>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064be:	4653      	mov	r3, sl
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	469a      	mov	sl, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80064c4:	4bca      	ldr	r3, [pc, #808]	; (80067f0 <setCommand+0x734>)
 80064c6:	4453      	add	r3, sl
 80064c8:	2b64      	cmp	r3, #100	; 0x64
 80064ca:	d900      	bls.n	80064ce <setCommand+0x412>
 80064cc:	e691      	b.n	80061f2 <setCommand+0x136>
				GetTimeDate();
 80064ce:	f006 f8df 	bl	800c690 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80064d2:	220c      	movs	r2, #12
 80064d4:	4bc7      	ldr	r3, [pc, #796]	; (80067f4 <setCommand+0x738>)
 80064d6:	0031      	movs	r1, r6
 80064d8:	569a      	ldrsb	r2, [r3, r2]
 80064da:	0038      	movs	r0, r7
 80064dc:	9204      	str	r2, [sp, #16]
 80064de:	7cda      	ldrb	r2, [r3, #19]
 80064e0:	9203      	str	r2, [sp, #12]
 80064e2:	7c9a      	ldrb	r2, [r3, #18]
 80064e4:	9202      	str	r2, [sp, #8]
 80064e6:	7c5a      	ldrb	r2, [r3, #17]
 80064e8:	9201      	str	r2, [sp, #4]
 80064ea:	7c1b      	ldrb	r3, [r3, #16]
 80064ec:	4652      	mov	r2, sl
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	465b      	mov	r3, fp
 80064f2:	f006 f873 	bl	800c5dc <BOS_CalendarConfig>
 80064f6:	4681      	mov	r9, r0
 80064f8:	e672      	b.n	80061e0 <setCommand+0x124>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80064fa:	2202      	movs	r2, #2
 80064fc:	49be      	ldr	r1, [pc, #760]	; (80067f8 <setCommand+0x73c>)
 80064fe:	0030      	movs	r0, r6
 8006500:	f00c f950 	bl	80127a4 <strncmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	d0d4      	beq.n	80064b2 <setCommand+0x3f6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006508:	2208      	movs	r2, #8
 800650a:	49bc      	ldr	r1, [pc, #752]	; (80067fc <setCommand+0x740>)
 800650c:	0030      	movs	r0, r6
 800650e:	f00c f949 	bl	80127a4 <strncmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	d100      	bne.n	8006518 <setCommand+0x45c>
 8006516:	e1c8      	b.n	80068aa <setCommand+0x7ee>
 8006518:	2202      	movs	r2, #2
 800651a:	49b9      	ldr	r1, [pc, #740]	; (8006800 <setCommand+0x744>)
 800651c:	0030      	movs	r0, r6
 800651e:	f00c f941 	bl	80127a4 <strncmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	d100      	bne.n	8006528 <setCommand+0x46c>
 8006526:	e1c0      	b.n	80068aa <setCommand+0x7ee>
 8006528:	2300      	movs	r3, #0
 800652a:	4699      	mov	r9, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800652c:	2205      	movs	r2, #5
 800652e:	49b5      	ldr	r1, [pc, #724]	; (8006804 <setCommand+0x748>)
 8006530:	0030      	movs	r0, r6
 8006532:	f00c f937 	bl	80127a4 <strncmp>
 8006536:	2800      	cmp	r0, #0
 8006538:	d100      	bne.n	800653c <setCommand+0x480>
 800653a:	e0d6      	b.n	80066ea <setCommand+0x62e>
 800653c:	2202      	movs	r2, #2
 800653e:	49b2      	ldr	r1, [pc, #712]	; (8006808 <setCommand+0x74c>)
 8006540:	0030      	movs	r0, r6
 8006542:	f00c f92f 	bl	80127a4 <strncmp>
 8006546:	2800      	cmp	r0, #0
 8006548:	d100      	bne.n	800654c <setCommand+0x490>
 800654a:	e0ce      	b.n	80066ea <setCommand+0x62e>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800654c:	2205      	movs	r2, #5
 800654e:	49af      	ldr	r1, [pc, #700]	; (800680c <setCommand+0x750>)
 8006550:	0030      	movs	r0, r6
 8006552:	f00c f927 	bl	80127a4 <strncmp>
 8006556:	2800      	cmp	r0, #0
 8006558:	d100      	bne.n	800655c <setCommand+0x4a0>
 800655a:	e145      	b.n	80067e8 <setCommand+0x72c>
 800655c:	2202      	movs	r2, #2
 800655e:	49ac      	ldr	r1, [pc, #688]	; (8006810 <setCommand+0x754>)
 8006560:	0030      	movs	r0, r6
 8006562:	f00c f91f 	bl	80127a4 <strncmp>
 8006566:	2800      	cmp	r0, #0
 8006568:	d100      	bne.n	800656c <setCommand+0x4b0>
 800656a:	e13d      	b.n	80067e8 <setCommand+0x72c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 800656c:	2203      	movs	r2, #3
 800656e:	49a9      	ldr	r1, [pc, #676]	; (8006814 <setCommand+0x758>)
 8006570:	0030      	movs	r0, r6
 8006572:	f00c f917 	bl	80127a4 <strncmp>
 8006576:	2800      	cmp	r0, #0
 8006578:	d100      	bne.n	800657c <setCommand+0x4c0>
 800657a:	e192      	b.n	80068a2 <setCommand+0x7e6>
 800657c:	2202      	movs	r2, #2
 800657e:	49a6      	ldr	r1, [pc, #664]	; (8006818 <setCommand+0x75c>)
 8006580:	0030      	movs	r0, r6
 8006582:	f00c f90f 	bl	80127a4 <strncmp>
 8006586:	2800      	cmp	r0, #0
 8006588:	d100      	bne.n	800658c <setCommand+0x4d0>
 800658a:	e18a      	b.n	80068a2 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 800658c:	2204      	movs	r2, #4
 800658e:	49a3      	ldr	r1, [pc, #652]	; (800681c <setCommand+0x760>)
 8006590:	0030      	movs	r0, r6
 8006592:	f00c f907 	bl	80127a4 <strncmp>
 8006596:	2800      	cmp	r0, #0
 8006598:	d100      	bne.n	800659c <setCommand+0x4e0>
 800659a:	e184      	b.n	80068a6 <setCommand+0x7ea>
 800659c:	2202      	movs	r2, #2
 800659e:	49a0      	ldr	r1, [pc, #640]	; (8006820 <setCommand+0x764>)
 80065a0:	0030      	movs	r0, r6
 80065a2:	f00c f8ff 	bl	80127a4 <strncmp>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d100      	bne.n	80065ac <setCommand+0x4f0>
 80065aa:	e17c      	b.n	80068a6 <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80065ac:	2204      	movs	r2, #4
 80065ae:	499d      	ldr	r1, [pc, #628]	; (8006824 <setCommand+0x768>)
 80065b0:	0030      	movs	r0, r6
 80065b2:	f00c f8f7 	bl	80127a4 <strncmp>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d100      	bne.n	80065bc <setCommand+0x500>
 80065ba:	e178      	b.n	80068ae <setCommand+0x7f2>
 80065bc:	2202      	movs	r2, #2
 80065be:	499a      	ldr	r1, [pc, #616]	; (8006828 <setCommand+0x76c>)
 80065c0:	0030      	movs	r0, r6
 80065c2:	f00c f8ef 	bl	80127a4 <strncmp>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d100      	bne.n	80065cc <setCommand+0x510>
 80065ca:	e170      	b.n	80068ae <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80065cc:	2205      	movs	r2, #5
 80065ce:	4997      	ldr	r1, [pc, #604]	; (800682c <setCommand+0x770>)
 80065d0:	0030      	movs	r0, r6
 80065d2:	f00c f8e7 	bl	80127a4 <strncmp>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d100      	bne.n	80065dc <setCommand+0x520>
 80065da:	e170      	b.n	80068be <setCommand+0x802>
 80065dc:	2202      	movs	r2, #2
 80065de:	4994      	ldr	r1, [pc, #592]	; (8006830 <setCommand+0x774>)
 80065e0:	0030      	movs	r0, r6
 80065e2:	f00c f8df 	bl	80127a4 <strncmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d100      	bne.n	80065ec <setCommand+0x530>
 80065ea:	e168      	b.n	80068be <setCommand+0x802>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80065ec:	2209      	movs	r2, #9
 80065ee:	4991      	ldr	r1, [pc, #580]	; (8006834 <setCommand+0x778>)
 80065f0:	0030      	movs	r0, r6
 80065f2:	f00c f8d7 	bl	80127a4 <strncmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d100      	bne.n	80065fc <setCommand+0x540>
 80065fa:	e15e      	b.n	80068ba <setCommand+0x7fe>
 80065fc:	2202      	movs	r2, #2
 80065fe:	498e      	ldr	r1, [pc, #568]	; (8006838 <setCommand+0x77c>)
 8006600:	0030      	movs	r0, r6
 8006602:	f00c f8cf 	bl	80127a4 <strncmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	d100      	bne.n	800660c <setCommand+0x550>
 800660a:	e156      	b.n	80068ba <setCommand+0x7fe>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 800660c:	2207      	movs	r2, #7
 800660e:	498b      	ldr	r1, [pc, #556]	; (800683c <setCommand+0x780>)
 8006610:	0030      	movs	r0, r6
 8006612:	f00c f8c7 	bl	80127a4 <strncmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	d100      	bne.n	800661c <setCommand+0x560>
 800661a:	e14c      	b.n	80068b6 <setCommand+0x7fa>
 800661c:	2202      	movs	r2, #2
 800661e:	4988      	ldr	r1, [pc, #544]	; (8006840 <setCommand+0x784>)
 8006620:	0030      	movs	r0, r6
 8006622:	f00c f8bf 	bl	80127a4 <strncmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	d100      	bne.n	800662c <setCommand+0x570>
 800662a:	e144      	b.n	80068b6 <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 800662c:	2208      	movs	r2, #8
 800662e:	4985      	ldr	r1, [pc, #532]	; (8006844 <setCommand+0x788>)
 8006630:	0030      	movs	r0, r6
 8006632:	f00c f8b7 	bl	80127a4 <strncmp>
 8006636:	2800      	cmp	r0, #0
 8006638:	d100      	bne.n	800663c <setCommand+0x580>
 800663a:	e13a      	b.n	80068b2 <setCommand+0x7f6>
 800663c:	2202      	movs	r2, #2
 800663e:	4982      	ldr	r1, [pc, #520]	; (8006848 <setCommand+0x78c>)
 8006640:	0030      	movs	r0, r6
 8006642:	f00c f8af 	bl	80127a4 <strncmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	d100      	bne.n	800664c <setCommand+0x590>
 800664a:	e132      	b.n	80068b2 <setCommand+0x7f6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 800664c:	2208      	movs	r2, #8
 800664e:	497f      	ldr	r1, [pc, #508]	; (800684c <setCommand+0x790>)
 8006650:	0030      	movs	r0, r6
 8006652:	f00c f8a7 	bl	80127a4 <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d007      	beq.n	800666a <setCommand+0x5ae>
 800665a:	2202      	movs	r2, #2
 800665c:	497c      	ldr	r1, [pc, #496]	; (8006850 <setCommand+0x794>)
 800665e:	0030      	movs	r0, r6
 8006660:	f00c f8a0 	bl	80127a4 <strncmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	d000      	beq.n	800666a <setCommand+0x5ae>
 8006668:	e5c3      	b.n	80061f2 <setCommand+0x136>
			temp82 =DECEMBER;
 800666a:	270c      	movs	r7, #12
 800666c:	e03e      	b.n	80066ec <setCommand+0x630>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800666e:	2260      	movs	r2, #96	; 0x60
 8006670:	4b78      	ldr	r3, [pc, #480]	; (8006854 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006672:	3015      	adds	r0, #21
 8006674:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006676:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006678:	2360      	movs	r3, #96	; 0x60
 800667a:	0209      	lsls	r1, r1, #8
 800667c:	4319      	orrs	r1, r3
 800667e:	30ff      	adds	r0, #255	; 0xff
 8006680:	f004 f9a0 	bl	800a9c4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006684:	2300      	movs	r3, #0
 8006686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006688:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800668a:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800668c:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800668e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006690:	4971      	ldr	r1, [pc, #452]	; (8006858 <setCommand+0x79c>)
 8006692:	f00c f843 	bl	801271c <sprintf>
	return pdFALSE;
 8006696:	e543      	b.n	8006120 <setCommand+0x64>
			temp81 =TUESDAY;
 8006698:	2302      	movs	r3, #2
 800669a:	469b      	mov	fp, r3
 800669c:	e705      	b.n	80064aa <setCommand+0x3ee>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800669e:	2240      	movs	r2, #64	; 0x40
 80066a0:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a2:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80066a4:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a6:	7859      	ldrb	r1, [r3, #1]
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	0209      	lsls	r1, r1, #8
 80066ac:	4319      	orrs	r1, r3
 80066ae:	30ff      	adds	r0, #255	; 0xff
 80066b0:	f004 f988 	bl	800a9c4 <EE_WriteVariable>
 80066b4:	e7e6      	b.n	8006684 <setCommand+0x5c8>
			temp16 =atoi((const char* )pcParameterString2);
 80066b6:	4640      	mov	r0, r8
 80066b8:	f00b fb67 	bl	8011d8a <atoi>
 80066bc:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80066be:	2900      	cmp	r1, #0
 80066c0:	d100      	bne.n	80066c4 <setCommand+0x608>
 80066c2:	e596      	b.n	80061f2 <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066c4:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 80066c6:	4b4b      	ldr	r3, [pc, #300]	; (80067f4 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066c8:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 80066ca:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80066cc:	f004 f97a 	bl	800a9c4 <EE_WriteVariable>
 80066d0:	e7d8      	b.n	8006684 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_MESSAGE;
 80066d2:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066d4:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 80066d6:	4b5f      	ldr	r3, [pc, #380]	; (8006854 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066d8:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 80066da:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	3015      	adds	r0, #21
 80066e0:	4319      	orrs	r1, r3
 80066e2:	30ff      	adds	r0, #255	; 0xff
 80066e4:	f004 f96e 	bl	800a9c4 <EE_WriteVariable>
 80066e8:	e7cc      	b.n	8006684 <setCommand+0x5c8>
			temp82 =MARCH;
 80066ea:	2703      	movs	r7, #3
		if(result == BOS_OK){
 80066ec:	464b      	mov	r3, r9
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d000      	beq.n	80066f4 <setCommand+0x638>
 80066f2:	e579      	b.n	80061e8 <setCommand+0x12c>
 80066f4:	e6dd      	b.n	80064b2 <setCommand+0x3f6>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066f6:	2220      	movs	r2, #32
 80066f8:	4b56      	ldr	r3, [pc, #344]	; (8006854 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066fa:	3015      	adds	r0, #21
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80066fc:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066fe:	7859      	ldrb	r1, [r3, #1]
 8006700:	2320      	movs	r3, #32
 8006702:	0209      	lsls	r1, r1, #8
 8006704:	4319      	orrs	r1, r3
 8006706:	30ff      	adds	r0, #255	; 0xff
 8006708:	f004 f95c 	bl	800a9c4 <EE_WriteVariable>
 800670c:	e7ba      	b.n	8006684 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_BOTH;
 800670e:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006710:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006712:	4b50      	ldr	r3, [pc, #320]	; (8006854 <setCommand+0x798>)
 8006714:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006716:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006718:	0089      	lsls	r1, r1, #2
 800671a:	3015      	adds	r0, #21
 800671c:	4319      	orrs	r1, r3
 800671e:	30ff      	adds	r0, #255	; 0xff
 8006720:	f004 f950 	bl	800a9c4 <EE_WriteVariable>
 8006724:	e7ae      	b.n	8006684 <setCommand+0x5c8>
			temp2 =atoi((const char* )pcParameterString2);
 8006726:	4640      	mov	r0, r8
 8006728:	f00b fb2f 	bl	8011d8a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800672c:	23e1      	movs	r3, #225	; 0xe1
 800672e:	031b      	lsls	r3, r3, #12
 8006730:	4298      	cmp	r0, r3
 8006732:	d900      	bls.n	8006736 <setCommand+0x67a>
 8006734:	e55d      	b.n	80061f2 <setCommand+0x136>
				BOS.clibaudrate =temp2;
 8006736:	4e2f      	ldr	r6, [pc, #188]	; (80067f4 <setCommand+0x738>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006738:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 800673a:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800673c:	208c      	movs	r0, #140	; 0x8c
 800673e:	0040      	lsls	r0, r0, #1
 8006740:	f004 f940 	bl	800a9c4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006744:	201a      	movs	r0, #26
 8006746:	8971      	ldrh	r1, [r6, #10]
 8006748:	30ff      	adds	r0, #255	; 0xff
 800674a:	f004 f93b 	bl	800a9c4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800674e:	4649      	mov	r1, r9
 8006750:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006752:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006754:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006756:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800675a:	493f      	ldr	r1, [pc, #252]	; (8006858 <setCommand+0x79c>)
 800675c:	f00b ffde 	bl	801271c <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006760:	0028      	movs	r0, r5
 8006762:	f7f9 fcd9 	bl	8000118 <strlen>
 8006766:	0004      	movs	r4, r0
 8006768:	2230      	movs	r2, #48	; 0x30
 800676a:	1828      	adds	r0, r5, r0
 800676c:	493b      	ldr	r1, [pc, #236]	; (800685c <setCommand+0x7a0>)
 800676e:	f00b fdd2 	bl	8012316 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006772:	0020      	movs	r0, r4
 8006774:	302f      	adds	r0, #47	; 0x2f
 8006776:	1828      	adds	r0, r5, r0
 8006778:	22b2      	movs	r2, #178	; 0xb2
 800677a:	4939      	ldr	r1, [pc, #228]	; (8006860 <setCommand+0x7a4>)
 800677c:	f00b fdcb 	bl	8012316 <memcpy>
 8006780:	e4ce      	b.n	8006120 <setCommand+0x64>
			temp81 =WEDNESDAY;
 8006782:	2303      	movs	r3, #3
 8006784:	469b      	mov	fp, r3
 8006786:	e690      	b.n	80064aa <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 8006788:	4640      	mov	r0, r8
 800678a:	f00b fafe 	bl	8011d8a <atoi>
 800678e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006790:	2900      	cmp	r1, #0
 8006792:	d100      	bne.n	8006796 <setCommand+0x6da>
 8006794:	e52d      	b.n	80061f2 <setCommand+0x136>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006796:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006798:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <setCommand+0x738>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800679a:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 800679c:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800679e:	f004 f911 	bl	800a9c4 <EE_WriteVariable>
 80067a2:	e76f      	b.n	8006684 <setCommand+0x5c8>
				BOSMessaging.trace =TRACE_RESPONSE;
 80067a4:	2202      	movs	r2, #2
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <setCommand+0x798>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067a8:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 80067aa:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	e7b3      	b.n	8006718 <setCommand+0x65c>
			temp81 =THURSDAY;
 80067b0:	2304      	movs	r3, #4
 80067b2:	469b      	mov	fp, r3
 80067b4:	e679      	b.n	80064aa <setCommand+0x3ee>
			temp16 =atoi((const char* )pcParameterString2);
 80067b6:	4640      	mov	r0, r8
 80067b8:	f00b fae7 	bl	8011d8a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067bc:	1e43      	subs	r3, r0, #1
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2bfe      	cmp	r3, #254	; 0xfe
 80067c2:	d900      	bls.n	80067c6 <setCommand+0x70a>
 80067c4:	e515      	b.n	80061f2 <setCommand+0x136>
				BOS.buttons.minInterClickTime =temp16;
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <setCommand+0x738>)
 80067c8:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067ca:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 80067cc:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067ce:	0209      	lsls	r1, r1, #8
 80067d0:	4301      	orrs	r1, r0
 80067d2:	2018      	movs	r0, #24
 80067d4:	30ff      	adds	r0, #255	; 0xff
 80067d6:	f004 f8f5 	bl	800a9c4 <EE_WriteVariable>
 80067da:	e753      	b.n	8006684 <setCommand+0x5c8>
			temp81 =FRIDAY;
 80067dc:	2305      	movs	r3, #5
 80067de:	469b      	mov	fp, r3
 80067e0:	e663      	b.n	80064aa <setCommand+0x3ee>
			temp81 =SATURDAY;
 80067e2:	2306      	movs	r3, #6
 80067e4:	469b      	mov	fp, r3
 80067e6:	e660      	b.n	80064aa <setCommand+0x3ee>
			temp82 =APRIL;
 80067e8:	2704      	movs	r7, #4
 80067ea:	e77f      	b.n	80066ec <setCommand+0x630>
 80067ec:	0801852c 	.word	0x0801852c
 80067f0:	fffff830 	.word	0xfffff830
 80067f4:	20006844 	.word	0x20006844
 80067f8:	080185e8 	.word	0x080185e8
 80067fc:	080185ec 	.word	0x080185ec
 8006800:	080185f8 	.word	0x080185f8
 8006804:	08018568 	.word	0x08018568
 8006808:	08018570 	.word	0x08018570
 800680c:	08018574 	.word	0x08018574
 8006810:	0801857c 	.word	0x0801857c
 8006814:	08018580 	.word	0x08018580
 8006818:	08018584 	.word	0x08018584
 800681c:	08018588 	.word	0x08018588
 8006820:	08018590 	.word	0x08018590
 8006824:	08018594 	.word	0x08018594
 8006828:	0801859c 	.word	0x0801859c
 800682c:	080185a0 	.word	0x080185a0
 8006830:	080185a8 	.word	0x080185a8
 8006834:	080185ac 	.word	0x080185ac
 8006838:	080185b8 	.word	0x080185b8
 800683c:	080185bc 	.word	0x080185bc
 8006840:	080185c4 	.word	0x080185c4
 8006844:	080185c8 	.word	0x080185c8
 8006848:	080185d4 	.word	0x080185d4
 800684c:	080185d8 	.word	0x080185d8
 8006850:	080185e4 	.word	0x080185e4
 8006854:	200067c4 	.word	0x200067c4
 8006858:	0801840c 	.word	0x0801840c
 800685c:	08018420 	.word	0x08018420
 8006860:	08018450 	.word	0x08018450
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d100      	bne.n	800686c <setCommand+0x7b0>
 800686a:	e4c2      	b.n	80061f2 <setCommand+0x136>
 800686c:	2202      	movs	r2, #2
 800686e:	4915      	ldr	r1, [pc, #84]	; (80068c4 <setCommand+0x808>)
 8006870:	0030      	movs	r0, r6
 8006872:	f00b ff97 	bl	80127a4 <strncmp>
 8006876:	2800      	cmp	r0, #0
 8006878:	d100      	bne.n	800687c <setCommand+0x7c0>
 800687a:	e4ba      	b.n	80061f2 <setCommand+0x136>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800687c:	2208      	movs	r2, #8
 800687e:	4912      	ldr	r1, [pc, #72]	; (80068c8 <setCommand+0x80c>)
 8006880:	0030      	movs	r0, r6
 8006882:	f00b ff8f 	bl	80127a4 <strncmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	d100      	bne.n	800688c <setCommand+0x7d0>
 800688a:	e4b2      	b.n	80061f2 <setCommand+0x136>
 800688c:	2202      	movs	r2, #2
 800688e:	490f      	ldr	r1, [pc, #60]	; (80068cc <setCommand+0x810>)
 8006890:	0030      	movs	r0, r6
 8006892:	f00b ff87 	bl	80127a4 <strncmp>
 8006896:	2800      	cmp	r0, #0
 8006898:	d100      	bne.n	800689c <setCommand+0x7e0>
 800689a:	e4aa      	b.n	80061f2 <setCommand+0x136>
			result =BOS_ERR_WrongValue;
 800689c:	2368      	movs	r3, #104	; 0x68
 800689e:	4699      	mov	r9, r3
 80068a0:	e644      	b.n	800652c <setCommand+0x470>
			temp82 =MAY;
 80068a2:	2705      	movs	r7, #5
 80068a4:	e722      	b.n	80066ec <setCommand+0x630>
			temp82 =JUNE;
 80068a6:	2706      	movs	r7, #6
 80068a8:	e720      	b.n	80066ec <setCommand+0x630>
			temp82 =FEBRUARY;
 80068aa:	2702      	movs	r7, #2
 80068ac:	e601      	b.n	80064b2 <setCommand+0x3f6>
			temp82 =JULY;
 80068ae:	2707      	movs	r7, #7
 80068b0:	e71c      	b.n	80066ec <setCommand+0x630>
			temp82 =NOVEMBER;
 80068b2:	270b      	movs	r7, #11
 80068b4:	e71a      	b.n	80066ec <setCommand+0x630>
			temp82 =OCTOBER;
 80068b6:	270a      	movs	r7, #10
 80068b8:	e718      	b.n	80066ec <setCommand+0x630>
			temp82 =SEPTEMBER;
 80068ba:	2709      	movs	r7, #9
 80068bc:	e716      	b.n	80066ec <setCommand+0x630>
			temp82 =AUGUST;
 80068be:	2708      	movs	r7, #8
 80068c0:	e714      	b.n	80066ec <setCommand+0x630>
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	080185e8 	.word	0x080185e8
 80068c8:	080185ec 	.word	0x080185ec
 80068cc:	080185f8 	.word	0x080185f8

080068d0 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80068d0:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068d2:	b530      	push	{r4, r5, lr}
 80068d4:	b083      	sub	sp, #12
 80068d6:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068d8:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80068da:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068dc:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80068de:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068e0:	f006 fc3c 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80068e4:	2300      	movs	r3, #0
 80068e6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 80068e8:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 80068ea:	2b70      	cmp	r3, #112	; 0x70
 80068ec:	d00d      	beq.n	800690a <removebuttonCommand+0x3a>
	result =RemovePortButton(port);
 80068ee:	0020      	movs	r0, r4
 80068f0:	f004 fc66 	bl	800b1c0 <RemovePortButton>
	if(result == BOS_OK){
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d105      	bne.n	8006904 <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 80068f8:	0023      	movs	r3, r4
 80068fa:	0022      	movs	r2, r4
 80068fc:	4905      	ldr	r1, [pc, #20]	; (8006914 <removebuttonCommand+0x44>)
 80068fe:	0028      	movs	r0, r5
 8006900:	f00b ff0c 	bl	801271c <sprintf>
}
 8006904:	2000      	movs	r0, #0
 8006906:	b003      	add	sp, #12
 8006908:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800690a:	3001      	adds	r0, #1
 800690c:	f00b fa43 	bl	8011d96 <atol>
 8006910:	b2c4      	uxtb	r4, r0
 8006912:	e7ec      	b.n	80068ee <removebuttonCommand+0x1e>
 8006914:	080185fc 	.word	0x080185fc

08006918 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691a:	46ce      	mov	lr, r9
 800691c:	4647      	mov	r7, r8
 800691e:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006920:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006922:	b580      	push	{r7, lr}
 8006924:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006926:	aa02      	add	r2, sp, #8
 8006928:	2101      	movs	r1, #1
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800692a:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800692c:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800692e:	9302      	str	r3, [sp, #8]
 8006930:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006932:	f006 fc13 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006936:	9f02      	ldr	r7, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006938:	4b24      	ldr	r3, [pc, #144]	; (80069cc <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800693a:	003a      	movs	r2, r7
 800693c:	4924      	ldr	r1, [pc, #144]	; (80069d0 <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800693e:	0004      	movs	r4, r0
 8006940:	4699      	mov	r9, r3
 8006942:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006944:	f00b ff2e 	bl	80127a4 <strncmp>
		type =MOMENTARY_NO;
 8006948:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800694a:	2800      	cmp	r0, #0
 800694c:	d007      	beq.n	800695e <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800694e:	003a      	movs	r2, r7
 8006950:	4920      	ldr	r1, [pc, #128]	; (80069d4 <addbuttonCommand+0xbc>)
 8006952:	0020      	movs	r0, r4
 8006954:	f00b ff26 	bl	80127a4 <strncmp>
		type =MOMENTARY_NC;
 8006958:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800695a:	2800      	cmp	r0, #0
 800695c:	d11f      	bne.n	800699e <addbuttonCommand+0x86>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800695e:	aa03      	add	r2, sp, #12
 8006960:	2102      	movs	r1, #2
 8006962:	0030      	movs	r0, r6
 8006964:	f006 fbfa 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006968:	2300      	movs	r3, #0
 800696a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 800696c:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 800696e:	2b70      	cmp	r3, #112	; 0x70
 8006970:	d026      	beq.n	80069c0 <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 8006972:	0021      	movs	r1, r4
 8006974:	0028      	movs	r0, r5
 8006976:	f004 fba9 	bl	800b0cc <AddPortButton>
	if(result == BOS_OK){
 800697a:	2800      	cmp	r0, #0
 800697c:	d109      	bne.n	8006992 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 800697e:	464b      	mov	r3, r9
 8006980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006982:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006984:	4914      	ldr	r1, [pc, #80]	; (80069d8 <addbuttonCommand+0xc0>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006986:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006988:	9400      	str	r4, [sp, #0]
 800698a:	0023      	movs	r3, r4
 800698c:	4640      	mov	r0, r8
 800698e:	f00b fec5 	bl	801271c <sprintf>
}
 8006992:	2000      	movs	r0, #0
 8006994:	b005      	add	sp, #20
 8006996:	bc0c      	pop	{r2, r3}
 8006998:	4690      	mov	r8, r2
 800699a:	4699      	mov	r9, r3
 800699c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 800699e:	003a      	movs	r2, r7
 80069a0:	490e      	ldr	r1, [pc, #56]	; (80069dc <addbuttonCommand+0xc4>)
 80069a2:	0020      	movs	r0, r4
 80069a4:	f00b fefe 	bl	80127a4 <strncmp>
		type =ONOFF_NO;
 80069a8:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d0d7      	beq.n	800695e <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80069ae:	003a      	movs	r2, r7
 80069b0:	490b      	ldr	r1, [pc, #44]	; (80069e0 <addbuttonCommand+0xc8>)
 80069b2:	0020      	movs	r0, r4
 80069b4:	f00b fef6 	bl	80127a4 <strncmp>
		type =ONOFF_NC;
 80069b8:	4245      	negs	r5, r0
 80069ba:	4145      	adcs	r5, r0
 80069bc:	00ad      	lsls	r5, r5, #2
 80069be:	e7ce      	b.n	800695e <addbuttonCommand+0x46>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80069c0:	3001      	adds	r0, #1
 80069c2:	f00b f9e8 	bl	8011d96 <atol>
 80069c6:	b2c4      	uxtb	r4, r0
 80069c8:	e7d3      	b.n	8006972 <addbuttonCommand+0x5a>
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	200017d4 	.word	0x200017d4
 80069d0:	08018624 	.word	0x08018624
 80069d4:	08018634 	.word	0x08018634
 80069d8:	0801865c 	.word	0x0801865c
 80069dc:	08018644 	.word	0x08018644
 80069e0:	08018650 	.word	0x08018650

080069e4 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	46de      	mov	lr, fp
 80069e8:	464e      	mov	r6, r9
 80069ea:	4657      	mov	r7, sl
 80069ec:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069ee:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80069f0:	0014      	movs	r4, r2
 80069f2:	b5e0      	push	{r5, r6, r7, lr}
 80069f4:	b099      	sub	sp, #100	; 0x64
 80069f6:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80069f8:	220a      	movs	r2, #10
 80069fa:	2100      	movs	r1, #0
 80069fc:	a80f      	add	r0, sp, #60	; 0x3c
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80069fe:	9308      	str	r3, [sp, #32]
 8006a00:	9309      	str	r3, [sp, #36]	; 0x24
 8006a02:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a06:	930c      	str	r3, [sp, #48]	; 0x30
 8006a08:	930d      	str	r3, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006a0a:	930e      	str	r3, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a0c:	f00b fc8c 	bl	8012328 <memset>
 8006a10:	220a      	movs	r2, #10
 8006a12:	2100      	movs	r1, #0
 8006a14:	a812      	add	r0, sp, #72	; 0x48
 8006a16:	f00b fc87 	bl	8012328 <memset>
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	a815      	add	r0, sp, #84	; 0x54
 8006a20:	f00b fc82 	bl	8012328 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a24:	aa08      	add	r2, sp, #32
 8006a26:	2101      	movs	r1, #1
 8006a28:	0020      	movs	r0, r4
 8006a2a:	f006 fb97 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a2e:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a30:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006a32:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a34:	4691      	mov	r9, r2
	if(pcParameterString1[0] == 'P'){
 8006a36:	2b50      	cmp	r3, #80	; 0x50
 8006a38:	d100      	bne.n	8006a3c <scastCommand+0x58>
 8006a3a:	e085      	b.n	8006b48 <scastCommand+0x164>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a3c:	aa09      	add	r2, sp, #36	; 0x24
 8006a3e:	2102      	movs	r1, #2
 8006a40:	0020      	movs	r0, r4
 8006a42:	f006 fb8b 	bl	800d15c <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a48:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a4a:	a80f      	add	r0, sp, #60	; 0x3c
 8006a4c:	f00b febb 	bl	80127c6 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006a50:	a80f      	add	r0, sp, #60	; 0x3c
 8006a52:	f7fd fbf5 	bl	8004240 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a56:	aa0a      	add	r2, sp, #40	; 0x28
	srcM =(uint8_t )GetID(par1);
 8006a58:	b2c5      	uxtb	r5, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006a5a:	2103      	movs	r1, #3
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	f006 fb7d 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006a62:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a64:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006a66:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a68:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006a6a:	2b70      	cmp	r3, #112	; 0x70
 8006a6c:	d066      	beq.n	8006b3c <scastCommand+0x158>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a70:	2104      	movs	r1, #4
 8006a72:	0020      	movs	r0, r4
 8006a74:	f006 fb72 	bl	800d15c <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a7a:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006a7c:	a812      	add	r0, sp, #72	; 0x48
 8006a7e:	f00b fea2 	bl	80127c6 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006a82:	a812      	add	r0, sp, #72	; 0x48
 8006a84:	f7fd fbdc 	bl	8004240 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a88:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006a8a:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a8c:	2105      	movs	r1, #5
 8006a8e:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 8006a90:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a92:	f006 fb63 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a98:	492e      	ldr	r1, [pc, #184]	; (8006b54 <scastCommand+0x170>)
 8006a9a:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a9c:	0007      	movs	r7, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006a9e:	4698      	mov	r8, r3
 8006aa0:	f00b fe80 	bl	80127a4 <strncmp>
		direction =FORWARD;
 8006aa4:	2600      	movs	r6, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d007      	beq.n	8006aba <scastCommand+0xd6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006aaa:	4642      	mov	r2, r8
 8006aac:	492a      	ldr	r1, [pc, #168]	; (8006b58 <scastCommand+0x174>)
 8006aae:	0038      	movs	r0, r7
 8006ab0:	f00b fe78 	bl	80127a4 <strncmp>
		direction =BACKWARD;
 8006ab4:	3601      	adds	r6, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d137      	bne.n	8006b2a <scastCommand+0x146>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006aba:	0039      	movs	r1, r7
 8006abc:	4642      	mov	r2, r8
 8006abe:	a815      	add	r0, sp, #84	; 0x54
 8006ac0:	f00b fe81 	bl	80127c6 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006ac4:	aa0d      	add	r2, sp, #52	; 0x34
 8006ac6:	2106      	movs	r1, #6
 8006ac8:	0020      	movs	r0, r4
 8006aca:	f006 fb47 	bl	800d15c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ace:	f00b f962 	bl	8011d96 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ad2:	aa0e      	add	r2, sp, #56	; 0x38
 8006ad4:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ad6:	0007      	movs	r7, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006ad8:	0020      	movs	r0, r4
 8006ada:	f006 fb3f 	bl	800d15c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ade:	f00b f95a 	bl	8011d96 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006ae2:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006ae4:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006ae6:	9303      	str	r3, [sp, #12]
 8006ae8:	9002      	str	r0, [sp, #8]
 8006aea:	9701      	str	r7, [sp, #4]
 8006aec:	9600      	str	r6, [sp, #0]
 8006aee:	465b      	mov	r3, fp
 8006af0:	4652      	mov	r2, sl
 8006af2:	0029      	movs	r1, r5
 8006af4:	4648      	mov	r0, r9
 8006af6:	f001 fb35 	bl	8008164 <StartScastDMAStream>
	if(result == BOS_OK){
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d10d      	bne.n	8006b1a <scastCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006afe:	ab12      	add	r3, sp, #72	; 0x48
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	4653      	mov	r3, sl
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	ab0f      	add	r3, sp, #60	; 0x3c
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	9404      	str	r4, [sp, #16]
 8006b0c:	9703      	str	r7, [sp, #12]
 8006b0e:	464b      	mov	r3, r9
 8006b10:	aa15      	add	r2, sp, #84	; 0x54
 8006b12:	4912      	ldr	r1, [pc, #72]	; (8006b5c <scastCommand+0x178>)
 8006b14:	9807      	ldr	r0, [sp, #28]
 8006b16:	f00b fe01 	bl	801271c <sprintf>
}
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	b019      	add	sp, #100	; 0x64
 8006b1e:	bc3c      	pop	{r2, r3, r4, r5}
 8006b20:	4690      	mov	r8, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	46a2      	mov	sl, r4
 8006b26:	46ab      	mov	fp, r5
 8006b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	490c      	ldr	r1, [pc, #48]	; (8006b60 <scastCommand+0x17c>)
 8006b2e:	0038      	movs	r0, r7
 8006b30:	f00b fe38 	bl	80127a4 <strncmp>
		direction =BIDIRECTIONAL;
 8006b34:	4246      	negs	r6, r0
 8006b36:	4146      	adcs	r6, r0
 8006b38:	0076      	lsls	r6, r6, #1
 8006b3a:	e7be      	b.n	8006aba <scastCommand+0xd6>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f00b f92a 	bl	8011d96 <atol>
 8006b42:	b2c3      	uxtb	r3, r0
 8006b44:	469a      	mov	sl, r3
 8006b46:	e792      	b.n	8006a6e <scastCommand+0x8a>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f00b f924 	bl	8011d96 <atol>
 8006b4e:	b2c3      	uxtb	r3, r0
 8006b50:	4699      	mov	r9, r3
 8006b52:	e773      	b.n	8006a3c <scastCommand+0x58>
 8006b54:	08018690 	.word	0x08018690
 8006b58:	08018698 	.word	0x08018698
 8006b5c:	080186b4 	.word	0x080186b4
 8006b60:	080186a4 	.word	0x080186a4

08006b64 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006b66:	4d22      	ldr	r5, [pc, #136]	; (8006bf0 <infoCommand+0x8c>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b68:	b083      	sub	sp, #12
	if(N > 1)
 8006b6a:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b6c:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
 8006b6e:	2700      	movs	r7, #0
	if(N > 1)
 8006b70:	2a01      	cmp	r2, #1
 8006b72:	d903      	bls.n	8006b7c <infoCommand+0x18>
		result =ReadPortsDir();
 8006b74:	f006 f8e2 	bl	800cd3c <ReadPortsDir>
 8006b78:	0007      	movs	r7, r0
 8006b7a:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006b7c:	491d      	ldr	r1, [pc, #116]	; (8006bf4 <infoCommand+0x90>)
 8006b7e:	0020      	movs	r0, r4
 8006b80:	f00b fdcc 	bl	801271c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006b84:	2601      	movs	r6, #1
 8006b86:	0020      	movs	r0, r4
 8006b88:	f7f9 fac6 	bl	8000118 <strlen>
 8006b8c:	4d1a      	ldr	r5, [pc, #104]	; (8006bf8 <infoCommand+0x94>)
 8006b8e:	4276      	negs	r6, r6
 8006b90:	b282      	uxth	r2, r0
 8006b92:	2332      	movs	r3, #50	; 0x32
 8006b94:	7828      	ldrb	r0, [r5, #0]
 8006b96:	0021      	movs	r1, r4
 8006b98:	9600      	str	r6, [sp, #0]
 8006b9a:	f006 f839 	bl	800cc10 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006b9e:	2213      	movs	r2, #19
 8006ba0:	4916      	ldr	r1, [pc, #88]	; (8006bfc <infoCommand+0x98>)
 8006ba2:	0020      	movs	r0, r4
 8006ba4:	f00b fbb7 	bl	8012316 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006ba8:	7828      	ldrb	r0, [r5, #0]
 8006baa:	2332      	movs	r3, #50	; 0x32
 8006bac:	2212      	movs	r2, #18
 8006bae:	0021      	movs	r1, r4
 8006bb0:	9600      	str	r6, [sp, #0]
 8006bb2:	f006 f82d 	bl	800cc10 <writePxMutex>
	DisplayTopology(PcPort);
 8006bb6:	7828      	ldrb	r0, [r5, #0]
 8006bb8:	f7fd f880 	bl	8003cbc <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006bbc:	7828      	ldrb	r0, [r5, #0]
 8006bbe:	f7fd f94f 	bl	8003e60 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006bc2:	2f02      	cmp	r7, #2
 8006bc4:	d007      	beq.n	8006bd6 <infoCommand+0x72>
	sprintf((char* )pcWriteBuffer," ");
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	490d      	ldr	r1, [pc, #52]	; (8006c00 <infoCommand+0x9c>)
 8006bca:	0020      	movs	r0, r4
 8006bcc:	f00b fba3 	bl	8012316 <memcpy>
}
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	b003      	add	sp, #12
 8006bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006bd6:	2244      	movs	r2, #68	; 0x44
 8006bd8:	490a      	ldr	r1, [pc, #40]	; (8006c04 <infoCommand+0xa0>)
 8006bda:	0020      	movs	r0, r4
 8006bdc:	f00b fb9b 	bl	8012316 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006be0:	7828      	ldrb	r0, [r5, #0]
 8006be2:	2332      	movs	r3, #50	; 0x32
 8006be4:	9600      	str	r6, [sp, #0]
 8006be6:	2243      	movs	r2, #67	; 0x43
 8006be8:	0021      	movs	r1, r4
 8006bea:	f006 f811 	bl	800cc10 <writePxMutex>
 8006bee:	e7ea      	b.n	8006bc6 <infoCommand+0x62>
 8006bf0:	20000008 	.word	0x20000008
 8006bf4:	0801873c 	.word	0x0801873c
 8006bf8:	20000c28 	.word	0x20000c28
 8006bfc:	08018758 	.word	0x08018758
 8006c00:	08017340 	.word	0x08017340
 8006c04:	0801876c 	.word	0x0801876c

08006c08 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c08:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f7fd f9a2 	bl	8003f54 <DisplayModuleStatus>
}
 8006c10:	2000      	movs	r0, #0
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	46de      	mov	lr, fp
 8006c18:	464e      	mov	r6, r9
 8006c1a:	4645      	mov	r5, r8
 8006c1c:	4657      	mov	r7, sl
 8006c1e:	b5e0      	push	{r5, r6, r7, lr}
 8006c20:	b091      	sub	sp, #68	; 0x44
	char module[MaxLengthOfAlias + 30] ={0};
 8006c22:	ae06      	add	r6, sp, #24
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c24:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006c26:	2100      	movs	r1, #0
 8006c28:	2227      	movs	r2, #39	; 0x27
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c2a:	4680      	mov	r8, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006c2c:	0030      	movs	r0, r6
 8006c2e:	f00b fb7b 	bl	8012328 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006c32:	220a      	movs	r2, #10
 8006c34:	2100      	movs	r1, #0
 8006c36:	a803      	add	r0, sp, #12
 8006c38:	f00b fb76 	bl	8012328 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c3c:	4d52      	ldr	r5, [pc, #328]	; (8006d88 <groupCommand+0x174>)
 8006c3e:	2101      	movs	r1, #1
 8006c40:	002a      	movs	r2, r5
 8006c42:	4648      	mov	r0, r9
 8006c44:	3250      	adds	r2, #80	; 0x50
 8006c46:	f006 fa89 	bl	800d15c <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c4a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c4c:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006c4e:	a803      	add	r0, sp, #12
 8006c50:	f00b fdb9 	bl	80127c6 <strncpy>
 8006c54:	4c4d      	ldr	r4, [pc, #308]	; (8006d8c <groupCommand+0x178>)
 8006c56:	0027      	movs	r7, r4
 8006c58:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006c5a:	0021      	movs	r1, r4
 8006c5c:	a803      	add	r0, sp, #12
 8006c5e:	f7f9 fa51 	bl	8000104 <strcmp>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d049      	beq.n	8006cfa <groupCommand+0xe6>
 8006c66:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006c68:	42a7      	cmp	r7, r4
 8006c6a:	d1f6      	bne.n	8006c5a <groupCommand+0x46>
	type =1;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9301      	str	r3, [sp, #4]
	count =2;
 8006c70:	2302      	movs	r3, #2
 8006c72:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c74:	220a      	movs	r2, #10
 8006c76:	4946      	ldr	r1, [pc, #280]	; (8006d90 <groupCommand+0x17c>)
 8006c78:	4640      	mov	r0, r8
	count =2;
 8006c7a:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006c7c:	f00b fb4b 	bl	8012316 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006c80:	002a      	movs	r2, r5
 8006c82:	2102      	movs	r1, #2
 8006c84:	3258      	adds	r2, #88	; 0x58
 8006c86:	4648      	mov	r0, r9
 8006c88:	f006 fa68 	bl	800d15c <FreeRTOS_CLIGetParameter>
 8006c8c:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d069      	beq.n	8006d66 <groupCommand+0x152>
		module[xParameterStringLength] ='\0';
 8006c92:	2300      	movs	r3, #0
 8006c94:	469a      	mov	sl, r3
			strcat((char* )pcWriteBuffer,", ");
 8006c96:	4b3f      	ldr	r3, [pc, #252]	; (8006d94 <groupCommand+0x180>)
		if(count > 2)
 8006c98:	2754      	movs	r7, #84	; 0x54
			strcat((char* )pcWriteBuffer,", ");
 8006c9a:	469b      	mov	fp, r3
 8006c9c:	e00e      	b.n	8006cbc <groupCommand+0xa8>
		strcat((char* )pcWriteBuffer,module);
 8006c9e:	0031      	movs	r1, r6
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	f00b fd5b 	bl	801275c <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006ca6:	002a      	movs	r2, r5
 8006ca8:	3401      	adds	r4, #1
 8006caa:	b261      	sxtb	r1, r4
 8006cac:	3258      	adds	r2, #88	; 0x58
 8006cae:	4648      	mov	r0, r9
 8006cb0:	55e9      	strb	r1, [r5, r7]
 8006cb2:	f006 fa53 	bl	800d15c <FreeRTOS_CLIGetParameter>
 8006cb6:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d03e      	beq.n	8006d3a <groupCommand+0x126>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006cbc:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006cbe:	0001      	movs	r1, r0
 8006cc0:	0022      	movs	r2, r4
 8006cc2:	0030      	movs	r0, r6
 8006cc4:	f00b fd7f 	bl	80127c6 <strncpy>
		module[xParameterStringLength] ='\0';
 8006cc8:	4653      	mov	r3, sl
		modID =GetID(module);
 8006cca:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006ccc:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006cce:	f7fd fab7 	bl	8004240 <GetID>
		if(modID < 0)
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	db14      	blt.n	8006d00 <groupCommand+0xec>
		result =AddModuleToGroup(modID,alias);
 8006cd6:	b2c0      	uxtb	r0, r0
 8006cd8:	a903      	add	r1, sp, #12
 8006cda:	f7fd fb7b 	bl	80043d4 <AddModuleToGroup>
		if(result != BOS_OK)
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d11b      	bne.n	8006d1a <groupCommand+0x106>
		if(count > 2)
 8006ce2:	57ec      	ldrsb	r4, [r5, r7]
 8006ce4:	2c02      	cmp	r4, #2
 8006ce6:	ddda      	ble.n	8006c9e <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f7f9 fa15 	bl	8000118 <strlen>
 8006cee:	2203      	movs	r2, #3
 8006cf0:	4440      	add	r0, r8
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	f00b fb0f 	bl	8012316 <memcpy>
 8006cf8:	e7d1      	b.n	8006c9e <groupCommand+0x8a>
			type =0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	e7b7      	b.n	8006c70 <groupCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006d00:	0032      	movs	r2, r6
 8006d02:	4925      	ldr	r1, [pc, #148]	; (8006d98 <groupCommand+0x184>)
 8006d04:	4640      	mov	r0, r8
 8006d06:	f00b fd09 	bl	801271c <sprintf>
}
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	b011      	add	sp, #68	; 0x44
 8006d0e:	bc3c      	pop	{r2, r3, r4, r5}
 8006d10:	4690      	mov	r8, r2
 8006d12:	4699      	mov	r9, r3
 8006d14:	46a2      	mov	sl, r4
 8006d16:	46ab      	mov	fp, r5
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006d1a:	2354      	movs	r3, #84	; 0x54
 8006d1c:	56eb      	ldrsb	r3, [r5, r3]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d024      	beq.n	8006d6c <groupCommand+0x158>
	else if(result == BOS_ERR_Keyword)
 8006d22:	2806      	cmp	r0, #6
 8006d24:	d019      	beq.n	8006d5a <groupCommand+0x146>
	else if(result == BOS_ERR_ExistingAlias)
 8006d26:	2807      	cmp	r0, #7
 8006d28:	d028      	beq.n	8006d7c <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8006d2a:	2808      	cmp	r0, #8
 8006d2c:	d1ed      	bne.n	8006d0a <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006d2e:	aa03      	add	r2, sp, #12
 8006d30:	491a      	ldr	r1, [pc, #104]	; (8006d9c <groupCommand+0x188>)
 8006d32:	4640      	mov	r0, r8
 8006d34:	f00b fcf2 	bl	801271c <sprintf>
 8006d38:	e7e7      	b.n	8006d0a <groupCommand+0xf6>
	else if(count == 2)
 8006d3a:	57eb      	ldrsb	r3, [r5, r7]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d015      	beq.n	8006d6c <groupCommand+0x158>
	else if(result == BOS_OK && type){
 8006d40:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d42:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d117      	bne.n	8006d78 <groupCommand+0x164>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006d48:	4915      	ldr	r1, [pc, #84]	; (8006da0 <groupCommand+0x18c>)
 8006d4a:	0030      	movs	r0, r6
 8006d4c:	f00b fce6 	bl	801271c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d50:	0031      	movs	r1, r6
 8006d52:	4640      	mov	r0, r8
 8006d54:	f00b fd02 	bl	801275c <strcat>
 8006d58:	e7d7      	b.n	8006d0a <groupCommand+0xf6>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d5a:	aa03      	add	r2, sp, #12
 8006d5c:	4911      	ldr	r1, [pc, #68]	; (8006da4 <groupCommand+0x190>)
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f00b fcdc 	bl	801271c <sprintf>
 8006d64:	e7d1      	b.n	8006d0a <groupCommand+0xf6>
	else if(count == 2)
 8006d66:	572b      	ldrsb	r3, [r5, r4]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d1e9      	bne.n	8006d40 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d6c:	aa03      	add	r2, sp, #12
 8006d6e:	490e      	ldr	r1, [pc, #56]	; (8006da8 <groupCommand+0x194>)
 8006d70:	4640      	mov	r0, r8
 8006d72:	f00b fcd3 	bl	801271c <sprintf>
 8006d76:	e7c8      	b.n	8006d0a <groupCommand+0xf6>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d78:	490c      	ldr	r1, [pc, #48]	; (8006dac <groupCommand+0x198>)
 8006d7a:	e7e6      	b.n	8006d4a <groupCommand+0x136>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006d7c:	aa03      	add	r2, sp, #12
 8006d7e:	490c      	ldr	r1, [pc, #48]	; (8006db0 <groupCommand+0x19c>)
 8006d80:	4640      	mov	r0, r8
 8006d82:	f00b fccb 	bl	801271c <sprintf>
 8006d86:	e7c0      	b.n	8006d0a <groupCommand+0xf6>
 8006d88:	200017d4 	.word	0x200017d4
 8006d8c:	20000ad0 	.word	0x20000ad0
 8006d90:	080187b0 	.word	0x080187b0
 8006d94:	080187bc 	.word	0x080187bc
 8006d98:	080188dc 	.word	0x080188dc
 8006d9c:	0801889c 	.word	0x0801889c
 8006da0:	08018808 	.word	0x08018808
 8006da4:	08018828 	.word	0x08018828
 8006da8:	080187c0 	.word	0x080187c0
 8006dac:	080187ec 	.word	0x080187ec
 8006db0:	08018868 	.word	0x08018868

08006db4 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006db4:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006db6:	4c1b      	ldr	r4, [pc, #108]	; (8006e24 <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006db8:	0006      	movs	r6, r0
 8006dba:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dbc:	0022      	movs	r2, r4
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	3260      	adds	r2, #96	; 0x60
 8006dc2:	f006 f9cb 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dc8:	0001      	movs	r1, r0
 8006dca:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	dd01      	ble.n	8006dd4 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006dd4:	4d14      	ldr	r5, [pc, #80]	; (8006e28 <nameCommand+0x74>)
 8006dd6:	7828      	ldrb	r0, [r5, #0]
 8006dd8:	f7fd fa92 	bl	8004300 <NameModule>
	if(result == BOS_OK)
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d007      	beq.n	8006df0 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006de0:	2806      	cmp	r0, #6
 8006de2:	d012      	beq.n	8006e0a <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8006de4:	2807      	cmp	r0, #7
 8006de6:	d00a      	beq.n	8006dfe <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8006de8:	2808      	cmp	r0, #8
 8006dea:	d014      	beq.n	8006e16 <nameCommand+0x62>
}
 8006dec:	2000      	movs	r0, #0
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df2:	782a      	ldrb	r2, [r5, #0]
 8006df4:	490d      	ldr	r1, [pc, #52]	; (8006e2c <nameCommand+0x78>)
 8006df6:	0030      	movs	r0, r6
 8006df8:	f00b fc90 	bl	801271c <sprintf>
 8006dfc:	e7f6      	b.n	8006dec <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e00:	490b      	ldr	r1, [pc, #44]	; (8006e30 <nameCommand+0x7c>)
 8006e02:	0030      	movs	r0, r6
 8006e04:	f00b fc8a 	bl	801271c <sprintf>
 8006e08:	e7f0      	b.n	8006dec <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e0c:	4909      	ldr	r1, [pc, #36]	; (8006e34 <nameCommand+0x80>)
 8006e0e:	0030      	movs	r0, r6
 8006e10:	f00b fc84 	bl	801271c <sprintf>
 8006e14:	e7ea      	b.n	8006dec <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e18:	4907      	ldr	r1, [pc, #28]	; (8006e38 <nameCommand+0x84>)
 8006e1a:	0030      	movs	r0, r6
 8006e1c:	f00b fc7e 	bl	801271c <sprintf>
 8006e20:	e7e4      	b.n	8006dec <nameCommand+0x38>
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	200017d4 	.word	0x200017d4
 8006e28:	20000a98 	.word	0x20000a98
 8006e2c:	08018900 	.word	0x08018900
 8006e30:	08018868 	.word	0x08018868
 8006e34:	08018828 	.word	0x08018828
 8006e38:	0801889c 	.word	0x0801889c

08006e3c <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3e:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e40:	4c50      	ldr	r4, [pc, #320]	; (8006f84 <bootloaderUpdateCommand+0x148>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e42:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e44:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e46:	b500      	push	{lr}
 8006e48:	0006      	movs	r6, r0
 8006e4a:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e4c:	3268      	adds	r2, #104	; 0x68
 8006e4e:	2101      	movs	r1, #1
 8006e50:	0028      	movs	r0, r5
 8006e52:	f006 f983 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d069      	beq.n	8006f2e <bootloaderUpdateCommand+0xf2>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006e5a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006e5c:	494a      	ldr	r1, [pc, #296]	; (8006f88 <bootloaderUpdateCommand+0x14c>)
 8006e5e:	f00b fca1 	bl	80127a4 <strncmp>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d133      	bne.n	8006ece <bootloaderUpdateCommand+0x92>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e66:	0022      	movs	r2, r4
 8006e68:	2102      	movs	r1, #2
 8006e6a:	326c      	adds	r2, #108	; 0x6c
 8006e6c:	0028      	movs	r0, r5
 8006e6e:	f006 f975 	bl	800d15c <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e72:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e74:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e76:	3274      	adds	r2, #116	; 0x74
 8006e78:	0028      	movs	r0, r5
 8006e7a:	2103      	movs	r1, #3
 8006e7c:	f006 f96e 	bl	800d15c <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 8006e80:	2200      	movs	r2, #0
 8006e82:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006e84:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 8006e86:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 8006e88:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006e8a:	2a23      	cmp	r2, #35	; 0x23
 8006e8c:	d029      	beq.n	8006ee2 <bootloaderUpdateCommand+0xa6>
			if(pcParameterString3[0] == 'p'){
 8006e8e:	2300      	movs	r3, #0
 8006e90:	56c3      	ldrsb	r3, [r0, r3]
 8006e92:	2b70      	cmp	r3, #112	; 0x70
 8006e94:	d02f      	beq.n	8006ef6 <bootloaderUpdateCommand+0xba>
			if(module != myID){
 8006e96:	4c3d      	ldr	r4, [pc, #244]	; (8006f8c <bootloaderUpdateCommand+0x150>)
				result =BOS_ERR_WrongValue;
 8006e98:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 8006e9a:	7823      	ldrb	r3, [r4, #0]
 8006e9c:	42bb      	cmp	r3, r7
 8006e9e:	d033      	beq.n	8006f08 <bootloaderUpdateCommand+0xcc>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4b3b      	ldr	r3, [pc, #236]	; (8006f90 <bootloaderUpdateCommand+0x154>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006ea4:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006ea6:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4b3a      	ldr	r3, [pc, #232]	; (8006f94 <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eac:	0038      	movs	r0, r7
				messageParams[0] =port;
 8006eae:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f001 f933 	bl	800811c <SendMessageToModule>
				osDelay(100);
 8006eb6:	2064      	movs	r0, #100	; 0x64
 8006eb8:	f006 f844 	bl	800cf44 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006ebc:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <bootloaderUpdateCommand+0x15c>)
 8006ebe:	7820      	ldrb	r0, [r4, #0]
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	0039      	movs	r1, r7
 8006ec4:	4643      	mov	r3, r8
 8006ec6:	f002 fe6f 	bl	8009ba8 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006eca:	2d68      	cmp	r5, #104	; 0x68
 8006ecc:	d104      	bne.n	8006ed8 <bootloaderUpdateCommand+0x9c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006ece:	220f      	movs	r2, #15
 8006ed0:	4932      	ldr	r1, [pc, #200]	; (8006f9c <bootloaderUpdateCommand+0x160>)
 8006ed2:	0030      	movs	r0, r6
 8006ed4:	f00b fa1f 	bl	8012316 <memcpy>
}
 8006ed8:	2000      	movs	r0, #0
 8006eda:	b002      	add	sp, #8
 8006edc:	bc04      	pop	{r2}
 8006ede:	4690      	mov	r8, r2
 8006ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006ee2:	1c58      	adds	r0, r3, #1
 8006ee4:	f00a ff57 	bl	8011d96 <atol>
			if(pcParameterString3[0] == 'p'){
 8006ee8:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006eea:	b2c7      	uxtb	r7, r0
 8006eec:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	BOS_Status result =BOS_OK;
 8006eee:	2500      	movs	r5, #0
			if(pcParameterString3[0] == 'p'){
 8006ef0:	56c3      	ldrsb	r3, [r0, r3]
 8006ef2:	2b70      	cmp	r3, #112	; 0x70
 8006ef4:	d1cf      	bne.n	8006e96 <bootloaderUpdateCommand+0x5a>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f00a ff4d 	bl	8011d96 <atol>
			if(module != myID){
 8006efc:	4c23      	ldr	r4, [pc, #140]	; (8006f8c <bootloaderUpdateCommand+0x150>)
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006efe:	b2c3      	uxtb	r3, r0
 8006f00:	4698      	mov	r8, r3
			if(module != myID){
 8006f02:	7823      	ldrb	r3, [r4, #0]
 8006f04:	42bb      	cmp	r3, r7
 8006f06:	d1cb      	bne.n	8006ea0 <bootloaderUpdateCommand+0x64>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	2100      	movs	r1, #0
 8006f10:	3319      	adds	r3, #25
 8006f12:	4640      	mov	r0, r8
 8006f14:	f000 fea2 	bl	8007c5c <SendMessageFromPort>
				osDelay(100);
 8006f18:	2064      	movs	r0, #100	; 0x64
 8006f1a:	f006 f813 	bl	800cf44 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006f1e:	7820      	ldrb	r0, [r4, #0]
 8006f20:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <bootloaderUpdateCommand+0x15c>)
 8006f22:	0001      	movs	r1, r0
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	4643      	mov	r3, r8
 8006f28:	f002 fe3e 	bl	8009ba8 <remoteBootloaderUpdate>
 8006f2c:	e7cd      	b.n	8006eca <bootloaderUpdateCommand+0x8e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f2e:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <bootloaderUpdateCommand+0x150>)
 8006f30:	491b      	ldr	r1, [pc, #108]	; (8006fa0 <bootloaderUpdateCommand+0x164>)
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	0030      	movs	r0, r6
 8006f36:	f00b fbf1 	bl	801271c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <bootloaderUpdateCommand+0x168>)
 8006f3c:	0030      	movs	r0, r6
 8006f3e:	6819      	ldr	r1, [r3, #0]
 8006f40:	f00b fc0c 	bl	801275c <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f44:	0030      	movs	r0, r6
 8006f46:	f7f9 f8e7 	bl	8000118 <strlen>
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <bootloaderUpdateCommand+0x15c>)
 8006f4c:	b282      	uxth	r2, r0
 8006f4e:	7818      	ldrb	r0, [r3, #0]
 8006f50:	2301      	movs	r3, #1
 8006f52:	425b      	negs	r3, r3
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	0031      	movs	r1, r6
 8006f58:	3333      	adds	r3, #51	; 0x33
 8006f5a:	f005 fe59 	bl	800cc10 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <bootloaderUpdateCommand+0x16c>)
 8006f60:	4a12      	ldr	r2, [pc, #72]	; (8006fac <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 8006f62:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f64:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006f66:	2201      	movs	r2, #1
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <bootloaderUpdateCommand+0x174>)
 8006f6a:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f6c:	f005 ffea 	bl	800cf44 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <bootloaderUpdateCommand+0x178>)
 8006f76:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <bootloaderUpdateCommand+0x17c>)
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	e7fd      	b.n	8006f7e <bootloaderUpdateCommand+0x142>
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	200017d4 	.word	0x200017d4
 8006f88:	08018938 	.word	0x08018938
 8006f8c:	20000a98 	.word	0x20000a98
 8006f90:	200067c4 	.word	0x200067c4
 8006f94:	20000b3c 	.word	0x20000b3c
 8006f98:	20000c28 	.word	0x20000c28
 8006f9c:	080183b0 	.word	0x080183b0
 8006fa0:	08018918 	.word	0x08018918
 8006fa4:	20000060 	.word	0x20000060
 8006fa8:	20007ff0 	.word	0x20007ff0
 8006fac:	deadbeef 	.word	0xdeadbeef
 8006fb0:	2000113e 	.word	0x2000113e
 8006fb4:	e000ed00 	.word	0xe000ed00
 8006fb8:	05fa0004 	.word	0x05fa0004

08006fbc <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fbc:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8006fbe:	4b11      	ldr	r3, [pc, #68]	; (8007004 <pingCommand+0x48>)
 8006fc0:	4911      	ldr	r1, [pc, #68]	; (8007008 <pingCommand+0x4c>)
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	0093      	lsls	r3, r2, #2
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	5c5c      	ldrb	r4, [r3, r1]
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d014      	beq.n	8006ffa <pingCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006fd0:	185b      	adds	r3, r3, r1
 8006fd2:	490e      	ldr	r1, [pc, #56]	; (800700c <pingCommand+0x50>)
 8006fd4:	f00b fba2 	bl	801271c <sprintf>
	RTOS_IND_blink(200);
 8006fd8:	2090      	movs	r0, #144	; 0x90
 8006fda:	2201      	movs	r2, #1
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	05c0      	lsls	r0, r0, #23
 8006fe0:	f009 fa98 	bl	8010514 <HAL_GPIO_WritePin>
 8006fe4:	20c8      	movs	r0, #200	; 0xc8
 8006fe6:	f005 ffad 	bl	800cf44 <osDelay>
 8006fea:	2090      	movs	r0, #144	; 0x90
 8006fec:	2200      	movs	r2, #0
 8006fee:	2140      	movs	r1, #64	; 0x40
 8006ff0:	05c0      	lsls	r0, r0, #23
 8006ff2:	f009 fa8f 	bl	8010514 <HAL_GPIO_WritePin>
}
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8006ffa:	4905      	ldr	r1, [pc, #20]	; (8007010 <pingCommand+0x54>)
 8006ffc:	f00b fb8e 	bl	801271c <sprintf>
 8007000:	e7ea      	b.n	8006fd8 <pingCommand+0x1c>
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	20000a98 	.word	0x20000a98
 8007008:	20000dc4 	.word	0x20000dc4
 800700c:	08018950 	.word	0x08018950
 8007010:	0801893c 	.word	0x0801893c

08007014 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007014:	b510      	push	{r4, lr}
 8007016:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007018:	2241      	movs	r2, #65	; 0x41
 800701a:	4904      	ldr	r1, [pc, #16]	; (800702c <prvRunTimeStatsCommand+0x18>)
 800701c:	f00b f97b 	bl	8012316 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007020:	0020      	movs	r0, r4
 8007022:	3040      	adds	r0, #64	; 0x40
 8007024:	f007 f9de 	bl	800e3e4 <vTaskGetRunTimeStats>
}
 8007028:	2000      	movs	r0, #0
 800702a:	bd10      	pop	{r4, pc}
 800702c:	0801896c 	.word	0x0801896c

08007030 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007030:	b510      	push	{r4, lr}
 8007032:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007034:	2250      	movs	r2, #80	; 0x50
 8007036:	4904      	ldr	r1, [pc, #16]	; (8007048 <prvTaskStatsCommand+0x18>)
 8007038:	f00b f96d 	bl	8012316 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800703c:	0020      	movs	r0, r4
 800703e:	304f      	adds	r0, #79	; 0x4f
 8007040:	f007 f976 	bl	800e330 <vTaskList>
}
 8007044:	2000      	movs	r0, #0
 8007046:	bd10      	pop	{r4, pc}
 8007048:	080189b0 	.word	0x080189b0

0800704c <setBaudrateCommand>:
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8007050:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007052:	b082      	sub	sp, #8
 8007054:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007056:	466a      	mov	r2, sp
 8007058:	2101      	movs	r1, #1
 800705a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 800705c:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 800705e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007060:	f006 f87c 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007064:	2300      	movs	r3, #0
 8007066:	56c3      	ldrsb	r3, [r0, r3]
 8007068:	2b70      	cmp	r3, #112	; 0x70
 800706a:	d00e      	beq.n	800708a <setBaudrateCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800706c:	aa01      	add	r2, sp, #4
 800706e:	2102      	movs	r1, #2
 8007070:	0020      	movs	r0, r4
 8007072:	f006 f873 	bl	800d15c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8007076:	f00a fe8e 	bl	8011d96 <atol>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800707a:	2213      	movs	r2, #19
 800707c:	490f      	ldr	r1, [pc, #60]	; (80070bc <setBaudrateCommand+0x70>)
 800707e:	0028      	movs	r0, r5
 8007080:	f00b f949 	bl	8012316 <memcpy>
}
 8007084:	2000      	movs	r0, #0
 8007086:	b002      	add	sp, #8
 8007088:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800708a:	3001      	adds	r0, #1
 800708c:	f00a fe83 	bl	8011d96 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007090:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007092:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007094:	2102      	movs	r1, #2
 8007096:	0020      	movs	r0, r4
 8007098:	f006 f860 	bl	800d15c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800709c:	f00a fe7b 	bl	8011d96 <atol>
 80070a0:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80070a2:	b2f0      	uxtb	r0, r6
 80070a4:	0021      	movs	r1, r4
 80070a6:	f005 fe05 	bl	800ccb4 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80070aa:	23ff      	movs	r3, #255	; 0xff
 80070ac:	0022      	movs	r2, r4
 80070ae:	4033      	ands	r3, r6
 80070b0:	4903      	ldr	r1, [pc, #12]	; (80070c0 <setBaudrateCommand+0x74>)
 80070b2:	0028      	movs	r0, r5
 80070b4:	f00b fb32 	bl	801271c <sprintf>
 80070b8:	e7e4      	b.n	8007084 <setBaudrateCommand+0x38>
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	08018a28 	.word	0x08018a28
 80070c0:	08018a00 	.word	0x08018a00

080070c4 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80070c4:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070c6:	b510      	push	{r4, lr}
 80070c8:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 80070ca:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80070cc:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070ce:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070d0:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d2:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070d4:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 80070d6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070d8:	f006 f840 	bl	800d15c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80070dc:	7803      	ldrb	r3, [r0, #0]
 80070de:	3b32      	subs	r3, #50	; 0x32
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d907      	bls.n	80070f4 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80070e4:	2215      	movs	r2, #21
 80070e6:	490b      	ldr	r1, [pc, #44]	; (8007114 <GetReadPrecentageCommand+0x50>)
 80070e8:	0020      	movs	r0, r4
 80070ea:	f00b f914 	bl	8012316 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80070ee:	2000      	movs	r0, #0
 80070f0:	b002      	add	sp, #8
 80070f2:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80070f4:	f00a fe4f 	bl	8011d96 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80070f8:	a901      	add	r1, sp, #4
 80070fa:	b2c0      	uxtb	r0, r0
 80070fc:	f004 fb2e 	bl	800b75c <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8007100:	9801      	ldr	r0, [sp, #4]
 8007102:	f7fb fd0f 	bl	8002b24 <__aeabi_f2d>
 8007106:	0002      	movs	r2, r0
 8007108:	000b      	movs	r3, r1
 800710a:	0020      	movs	r0, r4
 800710c:	4902      	ldr	r1, [pc, #8]	; (8007118 <GetReadPrecentageCommand+0x54>)
 800710e:	f00b fb05 	bl	801271c <sprintf>
 8007112:	e7ec      	b.n	80070ee <GetReadPrecentageCommand+0x2a>
 8007114:	08017e60 	.word	0x08017e60
 8007118:	08018a3c 	.word	0x08018a3c

0800711c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800711c:	b510      	push	{r4, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	0004      	movs	r4, r0
	GetTimeDate();
 8007122:	f005 fab5 	bl	800c690 <GetTimeDate>
	if(BOS.hourformat == 24)
 8007126:	4915      	ldr	r1, [pc, #84]	; (800717c <timeCommand+0x60>)
 8007128:	7b4b      	ldrb	r3, [r1, #13]
 800712a:	2b18      	cmp	r3, #24
 800712c:	d016      	beq.n	800715c <timeCommand+0x40>
	else if(BOS.hourformat == 12){
 800712e:	2b0c      	cmp	r3, #12
 8007130:	d002      	beq.n	8007138 <timeCommand+0x1c>
}
 8007132:	2000      	movs	r0, #0
 8007134:	b004      	add	sp, #16
 8007136:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007138:	7ccb      	ldrb	r3, [r1, #19]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d019      	beq.n	8007172 <timeCommand+0x56>
		else if(BOS.time.ampm == RTC_PM)
 800713e:	2b02      	cmp	r3, #2
 8007140:	d1f7      	bne.n	8007132 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007142:	7c4b      	ldrb	r3, [r1, #17]
 8007144:	7c8a      	ldrb	r2, [r1, #18]
 8007146:	480e      	ldr	r0, [pc, #56]	; (8007180 <timeCommand+0x64>)
 8007148:	9002      	str	r0, [sp, #8]
 800714a:	89c8      	ldrh	r0, [r1, #14]
 800714c:	9001      	str	r0, [sp, #4]
 800714e:	7c09      	ldrb	r1, [r1, #16]
 8007150:	0020      	movs	r0, r4
 8007152:	9100      	str	r1, [sp, #0]
 8007154:	490b      	ldr	r1, [pc, #44]	; (8007184 <timeCommand+0x68>)
 8007156:	f00b fae1 	bl	801271c <sprintf>
 800715a:	e7ea      	b.n	8007132 <timeCommand+0x16>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800715c:	89c8      	ldrh	r0, [r1, #14]
 800715e:	7c4b      	ldrb	r3, [r1, #17]
 8007160:	7c8a      	ldrb	r2, [r1, #18]
 8007162:	9001      	str	r0, [sp, #4]
 8007164:	7c09      	ldrb	r1, [r1, #16]
 8007166:	0020      	movs	r0, r4
 8007168:	9100      	str	r1, [sp, #0]
 800716a:	4907      	ldr	r1, [pc, #28]	; (8007188 <timeCommand+0x6c>)
 800716c:	f00b fad6 	bl	801271c <sprintf>
 8007170:	e7df      	b.n	8007132 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8007172:	7c4b      	ldrb	r3, [r1, #17]
 8007174:	7c8a      	ldrb	r2, [r1, #18]
 8007176:	4805      	ldr	r0, [pc, #20]	; (800718c <timeCommand+0x70>)
 8007178:	e7e6      	b.n	8007148 <timeCommand+0x2c>
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	20006844 	.word	0x20006844
 8007180:	08018ab8 	.word	0x08018ab8
 8007184:	08018a88 	.word	0x08018a88
 8007188:	08018a60 	.word	0x08018a60
 800718c:	08018ab4 	.word	0x08018ab4

08007190 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <resetCommand+0x14>)
 8007196:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <resetCommand+0x18>)
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	e7fd      	b.n	800719e <resetCommand+0xe>
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	e000ed00 	.word	0xe000ed00
 80071a8:	05fa0004 	.word	0x05fa0004

080071ac <RegisterUserCLICommands>:
}
 80071ac:	4770      	bx	lr
 80071ae:	46c0      	nop			; (mov r8, r8)

080071b0 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80071b0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80071b2:	4c45      	ldr	r4, [pc, #276]	; (80072c8 <vRegisterCLICommands+0x118>)
 80071b4:	0020      	movs	r0, r4
 80071b6:	f005 ff3d 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80071ba:	0020      	movs	r0, r4
 80071bc:	3010      	adds	r0, #16
 80071be:	f005 ff39 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80071c2:	0020      	movs	r0, r4
 80071c4:	3020      	adds	r0, #32
 80071c6:	f005 ff35 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80071ca:	0020      	movs	r0, r4
 80071cc:	3030      	adds	r0, #48	; 0x30
 80071ce:	f005 ff31 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80071d2:	0020      	movs	r0, r4
 80071d4:	3040      	adds	r0, #64	; 0x40
 80071d6:	f005 ff2d 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80071da:	0020      	movs	r0, r4
 80071dc:	3050      	adds	r0, #80	; 0x50
 80071de:	f005 ff29 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80071e2:	0020      	movs	r0, r4
 80071e4:	3060      	adds	r0, #96	; 0x60
 80071e6:	f005 ff25 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80071ea:	0020      	movs	r0, r4
 80071ec:	3070      	adds	r0, #112	; 0x70
 80071ee:	f005 ff21 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80071f2:	4c36      	ldr	r4, [pc, #216]	; (80072cc <vRegisterCLICommands+0x11c>)
 80071f4:	0020      	movs	r0, r4
 80071f6:	f005 ff1d 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80071fa:	0020      	movs	r0, r4
 80071fc:	3010      	adds	r0, #16
 80071fe:	f005 ff19 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007202:	0020      	movs	r0, r4
 8007204:	3020      	adds	r0, #32
 8007206:	f005 ff15 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800720a:	0020      	movs	r0, r4
 800720c:	3030      	adds	r0, #48	; 0x30
 800720e:	f005 ff11 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007212:	0020      	movs	r0, r4
 8007214:	3040      	adds	r0, #64	; 0x40
 8007216:	f005 ff0d 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800721a:	0020      	movs	r0, r4
 800721c:	3050      	adds	r0, #80	; 0x50
 800721e:	f005 ff09 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007222:	0020      	movs	r0, r4
 8007224:	3060      	adds	r0, #96	; 0x60
 8007226:	f005 ff05 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800722a:	0020      	movs	r0, r4
 800722c:	3070      	adds	r0, #112	; 0x70
 800722e:	f005 ff01 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007232:	4c27      	ldr	r4, [pc, #156]	; (80072d0 <vRegisterCLICommands+0x120>)
 8007234:	0020      	movs	r0, r4
 8007236:	f005 fefd 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800723a:	0020      	movs	r0, r4
 800723c:	3010      	adds	r0, #16
 800723e:	f005 fef9 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007242:	0020      	movs	r0, r4
 8007244:	3020      	adds	r0, #32
 8007246:	f005 fef5 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800724a:	0020      	movs	r0, r4
 800724c:	3030      	adds	r0, #48	; 0x30
 800724e:	f005 fef1 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007252:	0020      	movs	r0, r4
 8007254:	3040      	adds	r0, #64	; 0x40
 8007256:	f005 feed 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800725a:	0020      	movs	r0, r4
 800725c:	3050      	adds	r0, #80	; 0x50
 800725e:	f005 fee9 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007262:	0020      	movs	r0, r4
 8007264:	3060      	adds	r0, #96	; 0x60
 8007266:	f005 fee5 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800726a:	0020      	movs	r0, r4
 800726c:	3070      	adds	r0, #112	; 0x70
 800726e:	f005 fee1 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007272:	4c18      	ldr	r4, [pc, #96]	; (80072d4 <vRegisterCLICommands+0x124>)
 8007274:	0020      	movs	r0, r4
 8007276:	f005 fedd 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 800727a:	0020      	movs	r0, r4
 800727c:	3010      	adds	r0, #16
 800727e:	f005 fed9 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007282:	0020      	movs	r0, r4
 8007284:	3020      	adds	r0, #32
 8007286:	f005 fed5 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800728a:	0020      	movs	r0, r4
 800728c:	3030      	adds	r0, #48	; 0x30
 800728e:	f005 fed1 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007292:	0020      	movs	r0, r4
 8007294:	3040      	adds	r0, #64	; 0x40
 8007296:	f005 fecd 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800729a:	0020      	movs	r0, r4
 800729c:	3050      	adds	r0, #80	; 0x50
 800729e:	f005 fec9 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80072a2:	0020      	movs	r0, r4
 80072a4:	3060      	adds	r0, #96	; 0x60
 80072a6:	f005 fec5 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80072aa:	0020      	movs	r0, r4
 80072ac:	3070      	adds	r0, #112	; 0x70
 80072ae:	f005 fec1 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80072b2:	4809      	ldr	r0, [pc, #36]	; (80072d8 <vRegisterCLICommands+0x128>)
 80072b4:	f005 febe 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80072b8:	2223      	movs	r2, #35	; 0x23
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <vRegisterCLICommands+0x12c>)
 80072bc:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80072be:	f002 fceb 	bl	8009c98 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80072c2:	f7ff ff73 	bl	80071ac <RegisterUserCLICommands>
}
 80072c6:	bd10      	pop	{r4, pc}
 80072c8:	08016c94 	.word	0x08016c94
 80072cc:	08016d14 	.word	0x08016d14
 80072d0:	08016d94 	.word	0x08016d94
 80072d4:	08016e14 	.word	0x08016e14
 80072d8:	08016e94 	.word	0x08016e94
 80072dc:	200067c0 	.word	0x200067c0

080072e0 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80072e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e2:	46c6      	mov	lr, r8
 80072e4:	b500      	push	{lr}
 80072e6:	0005      	movs	r5, r0
 80072e8:	000e      	movs	r6, r1
 80072ea:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80072ec:	f002 fcdc 	bl	8009ca8 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 80072f2:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072f4:	4698      	mov	r8, r3
 80072f6:	5c1b      	ldrb	r3, [r3, r0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d902      	bls.n	8007302 <StartDMAstream+0x22>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80072fc:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d112      	bne.n	8007328 <StartDMAstream+0x48>
		SwitchMsgDMAToStream(srcPort);
 8007302:	0020      	movs	r0, r4
 8007304:	f002 fde4 	bl	8009ed0 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <StartDMAstream+0x54>)
 800730a:	1e62      	subs	r2, r4, #1
 800730c:	0092      	lsls	r2, r2, #2
 800730e:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007310:	2102      	movs	r1, #2
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007312:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007314:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007316:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 8007318:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 800731a:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 800731c:	0028      	movs	r0, r5
 800731e:	003a      	movs	r2, r7
 8007320:	0031      	movs	r1, r6
 8007322:	f003 fa35 	bl	800a790 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007326:	2000      	movs	r0, #0
}
 8007328:	bc04      	pop	{r2}
 800732a:	4690      	mov	r8, r2
 800732c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	20000c2c 	.word	0x20000c2c
 8007334:	20001850 	.word	0x20001850

08007338 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	0005      	movs	r5, r0
	if(portStatus[port] != STREAM){
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <DMA_IRQHandler+0x44>)
 800733e:	1e44      	subs	r4, r0, #1
 8007340:	00e0      	lsls	r0, r4, #3
 8007342:	5d5b      	ldrb	r3, [r3, r5]
 8007344:	1b00      	subs	r0, r0, r4
 8007346:	00c0      	lsls	r0, r0, #3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d004      	beq.n	8007356 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <DMA_IRQHandler+0x48>)
 800734e:	18c0      	adds	r0, r0, r3
 8007350:	f008 f95e 	bl	800f610 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007354:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <DMA_IRQHandler+0x4c>)
		if(dmaStreamTotal[port - 1])
 8007358:	00a4      	lsls	r4, r4, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800735a:	18c0      	adds	r0, r0, r3
 800735c:	f008 f958 	bl	800f610 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007360:	4b09      	ldr	r3, [pc, #36]	; (8007388 <DMA_IRQHandler+0x50>)
 8007362:	191c      	adds	r4, r3, r4
 8007364:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007366:	2a00      	cmp	r2, #0
 8007368:	d004      	beq.n	8007374 <DMA_IRQHandler+0x3c>
			++dmaStreamCount[port - 1];
 800736a:	6963      	ldr	r3, [r4, #20]
 800736c:	3301      	adds	r3, #1
 800736e:	6163      	str	r3, [r4, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007370:	429a      	cmp	r2, r3
 8007372:	d8ef      	bhi.n	8007354 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007374:	0028      	movs	r0, r5
 8007376:	f002 fd93 	bl	8009ea0 <StopStreamDMA>
 800737a:	e7eb      	b.n	8007354 <DMA_IRQHandler+0x1c>
 800737c:	20000c2c 	.word	0x20000c2c
 8007380:	2000224c 	.word	0x2000224c
 8007384:	20002054 	.word	0x20002054
 8007388:	20001850 	.word	0x20001850

0800738c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <ResetUartORE+0x28>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	2308      	movs	r3, #8
 8007392:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <ResetUartORE+0x2c>)
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800739a:	4a08      	ldr	r2, [pc, #32]	; (80073bc <ResetUartORE+0x30>)
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 80073a0:	4a07      	ldr	r2, [pc, #28]	; (80073c0 <ResetUartORE+0x34>)
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80073a6:	4a07      	ldr	r2, [pc, #28]	; (80073c4 <ResetUartORE+0x38>)
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80073ac:	4a06      	ldr	r2, [pc, #24]	; (80073c8 <ResetUartORE+0x3c>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	6213      	str	r3, [r2, #32]
#endif
}
 80073b2:	4770      	bx	lr
 80073b4:	20006a44 	.word	0x20006a44
 80073b8:	20006b94 	.word	0x20006b94
 80073bc:	20006964 	.word	0x20006964
 80073c0:	20006b24 	.word	0x20006b24
 80073c4:	200069d4 	.word	0x200069d4
 80073c8:	20006ab4 	.word	0x20006ab4

080073cc <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073ce:	2400      	movs	r4, #0
 80073d0:	2603      	movs	r6, #3
 80073d2:	4d57      	ldr	r5, [pc, #348]	; (8007530 <MX_FREERTOS_Init+0x164>)
void MX_FREERTOS_Init(void){
 80073d4:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80073d6:	9501      	str	r5, [sp, #4]
 80073d8:	9600      	str	r6, [sp, #0]
 80073da:	9403      	str	r4, [sp, #12]
 80073dc:	9402      	str	r4, [sp, #8]
 80073de:	2300      	movs	r3, #0
 80073e0:	22f0      	movs	r2, #240	; 0xf0
 80073e2:	4954      	ldr	r1, [pc, #336]	; (8007534 <MX_FREERTOS_Init+0x168>)
 80073e4:	4854      	ldr	r0, [pc, #336]	; (8007538 <MX_FREERTOS_Init+0x16c>)
 80073e6:	f006 fb6b 	bl	800dac0 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80073ea:	1d2b      	adds	r3, r5, #4
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	9600      	str	r6, [sp, #0]
 80073f0:	9403      	str	r4, [sp, #12]
 80073f2:	9402      	str	r4, [sp, #8]
 80073f4:	2300      	movs	r3, #0
 80073f6:	22f0      	movs	r2, #240	; 0xf0
 80073f8:	4950      	ldr	r1, [pc, #320]	; (800753c <MX_FREERTOS_Init+0x170>)
 80073fa:	4851      	ldr	r0, [pc, #324]	; (8007540 <MX_FREERTOS_Init+0x174>)
 80073fc:	f006 fb60 	bl	800dac0 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007400:	002b      	movs	r3, r5
 8007402:	3308      	adds	r3, #8
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	9600      	str	r6, [sp, #0]
 8007408:	2300      	movs	r3, #0
 800740a:	22f0      	movs	r2, #240	; 0xf0
 800740c:	494d      	ldr	r1, [pc, #308]	; (8007544 <MX_FREERTOS_Init+0x178>)
 800740e:	9403      	str	r4, [sp, #12]
 8007410:	9402      	str	r4, [sp, #8]
 8007412:	484d      	ldr	r0, [pc, #308]	; (8007548 <MX_FREERTOS_Init+0x17c>)
 8007414:	f006 fb54 	bl	800dac0 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007418:	f7ff feca 	bl	80071b0 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 800741c:	002b      	movs	r3, r5
 800741e:	228c      	movs	r2, #140	; 0x8c
 8007420:	330c      	adds	r3, #12
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	9600      	str	r6, [sp, #0]
 8007426:	9403      	str	r4, [sp, #12]
 8007428:	9402      	str	r4, [sp, #8]
 800742a:	2300      	movs	r3, #0
 800742c:	0052      	lsls	r2, r2, #1
 800742e:	4947      	ldr	r1, [pc, #284]	; (800754c <MX_FREERTOS_Init+0x180>)
 8007430:	4847      	ldr	r0, [pc, #284]	; (8007550 <MX_FREERTOS_Init+0x184>)
 8007432:	f006 fb45 	bl	800dac0 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007436:	002b      	movs	r3, r5
 8007438:	2704      	movs	r7, #4
 800743a:	4e46      	ldr	r6, [pc, #280]	; (8007554 <MX_FREERTOS_Init+0x188>)
 800743c:	3310      	adds	r3, #16
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	9403      	str	r4, [sp, #12]
 8007442:	9402      	str	r4, [sp, #8]
 8007444:	9700      	str	r7, [sp, #0]
 8007446:	2301      	movs	r3, #1
 8007448:	22f0      	movs	r2, #240	; 0xf0
 800744a:	4943      	ldr	r1, [pc, #268]	; (8007558 <MX_FREERTOS_Init+0x18c>)
 800744c:	0030      	movs	r0, r6
 800744e:	f006 fb37 	bl	800dac0 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007452:	002b      	movs	r3, r5
 8007454:	3314      	adds	r3, #20
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	9403      	str	r4, [sp, #12]
 800745a:	9402      	str	r4, [sp, #8]
 800745c:	9700      	str	r7, [sp, #0]
 800745e:	2302      	movs	r3, #2
 8007460:	22f0      	movs	r2, #240	; 0xf0
 8007462:	493e      	ldr	r1, [pc, #248]	; (800755c <MX_FREERTOS_Init+0x190>)
 8007464:	0030      	movs	r0, r6
 8007466:	f006 fb2b 	bl	800dac0 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 800746a:	002b      	movs	r3, r5
 800746c:	3318      	adds	r3, #24
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	9403      	str	r4, [sp, #12]
 8007472:	9402      	str	r4, [sp, #8]
 8007474:	9700      	str	r7, [sp, #0]
 8007476:	2303      	movs	r3, #3
 8007478:	22f0      	movs	r2, #240	; 0xf0
 800747a:	4939      	ldr	r1, [pc, #228]	; (8007560 <MX_FREERTOS_Init+0x194>)
 800747c:	0030      	movs	r0, r6
 800747e:	f006 fb1f 	bl	800dac0 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007482:	002b      	movs	r3, r5
 8007484:	331c      	adds	r3, #28
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	9403      	str	r4, [sp, #12]
 800748a:	9402      	str	r4, [sp, #8]
 800748c:	9700      	str	r7, [sp, #0]
 800748e:	2304      	movs	r3, #4
 8007490:	22f0      	movs	r2, #240	; 0xf0
 8007492:	4934      	ldr	r1, [pc, #208]	; (8007564 <MX_FREERTOS_Init+0x198>)
 8007494:	0030      	movs	r0, r6
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007496:	3520      	adds	r5, #32
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007498:	f006 fb12 	bl	800dac0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 800749c:	2305      	movs	r3, #5
 800749e:	22f0      	movs	r2, #240	; 0xf0
 80074a0:	9501      	str	r5, [sp, #4]
 80074a2:	9403      	str	r4, [sp, #12]
 80074a4:	9402      	str	r4, [sp, #8]
 80074a6:	9700      	str	r7, [sp, #0]
 80074a8:	492f      	ldr	r1, [pc, #188]	; (8007568 <MX_FREERTOS_Init+0x19c>)
 80074aa:	0030      	movs	r0, r6
 80074ac:	f006 fb08 	bl	800dac0 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074b0:	2101      	movs	r1, #1
 80074b2:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80074b4:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074b6:	f005 fd71 	bl	800cf9c <osSemaphoreCreate>
 80074ba:	4e2c      	ldr	r6, [pc, #176]	; (800756c <MX_FREERTOS_Init+0x1a0>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074bc:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80074be:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074c0:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80074c2:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074c4:	f005 fd6a 	bl	800cf9c <osSemaphoreCreate>
 80074c8:	4d29      	ldr	r5, [pc, #164]	; (8007570 <MX_FREERTOS_Init+0x1a4>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ca:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80074cc:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074ce:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 80074d0:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074d2:	f005 fd63 	bl	800cf9c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074d6:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80074d8:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074da:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 80074dc:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074de:	f005 fd5d 	bl	800cf9c <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074e2:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80074e4:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074e6:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 80074e8:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074ea:	f005 fd57 	bl	800cf9c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074ee:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80074f0:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074f2:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 80074f4:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074f6:	f005 fd51 	bl	800cf9c <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074fa:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80074fc:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074fe:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007500:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007502:	f005 fd4b 	bl	800cf9c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007506:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007508:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800750a:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 800750c:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800750e:	f005 fd45 	bl	800cf9c <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007512:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007514:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007516:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007518:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800751a:	f005 fd3f 	bl	800cf9c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800751e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007520:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007522:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007524:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007526:	f005 fd39 	bl	800cf9c <osSemaphoreCreate>
 800752a:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 800752c:	b00f      	add	sp, #60	; 0x3c
 800752e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007530:	20001c9c 	.word	0x20001c9c
 8007534:	08019738 	.word	0x08019738
 8007538:	08007975 	.word	0x08007975
 800753c:	08019744 	.word	0x08019744
 8007540:	080082dd 	.word	0x080082dd
 8007544:	08019750 	.word	0x08019750
 8007548:	08011d69 	.word	0x08011d69
 800754c:	0801975c 	.word	0x0801975c
 8007550:	080050d9 	.word	0x080050d9
 8007554:	08008445 	.word	0x08008445
 8007558:	08019764 	.word	0x08019764
 800755c:	08019770 	.word	0x08019770
 8007560:	0801977c 	.word	0x0801977c
 8007564:	08019788 	.word	0x08019788
 8007568:	08019794 	.word	0x08019794
 800756c:	200068e8 	.word	0x200068e8
 8007570:	200068c8 	.word	0x200068c8

08007574 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007576:	46de      	mov	lr, fp
 8007578:	4657      	mov	r7, sl
 800757a:	464e      	mov	r6, r9
 800757c:	4645      	mov	r5, r8
 800757e:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007580:	4bd4      	ldr	r3, [pc, #848]	; (80078d4 <ExecuteMonitor+0x360>)
{
 8007582:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 8007584:	469b      	mov	fp, r3
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d006      	beq.n	800759a <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 800758c:	b005      	add	sp, #20
 800758e:	bc3c      	pop	{r2, r3, r4, r5}
 8007590:	4690      	mov	r8, r2
 8007592:	4699      	mov	r9, r3
 8007594:	46a2      	mov	sl, r4
 8007596:	46ab      	mov	fp, r5
 8007598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 800759a:	2300      	movs	r3, #0
 800759c:	465a      	mov	r2, fp
 800759e:	6013      	str	r3, [r2, #0]
	flag=0;
 80075a0:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 80075a2:	3320      	adds	r3, #32
 80075a4:	7153      	strb	r3, [r2, #5]
 80075a6:	4bcc      	ldr	r3, [pc, #816]	; (80078d8 <ExecuteMonitor+0x364>)
 80075a8:	4ecc      	ldr	r6, [pc, #816]	; (80078dc <ExecuteMonitor+0x368>)
 80075aa:	4699      	mov	r9, r3
 80075ac:	4bcc      	ldr	r3, [pc, #816]	; (80078e0 <ExecuteMonitor+0x36c>)
 80075ae:	4dcd      	ldr	r5, [pc, #820]	; (80078e4 <ExecuteMonitor+0x370>)
 80075b0:	469a      	mov	sl, r3
 80075b2:	4ccd      	ldr	r4, [pc, #820]	; (80078e8 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 80075b4:	2200      	movs	r2, #0
 80075b6:	4bcd      	ldr	r3, [pc, #820]	; (80078ec <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 80075b8:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 80075ba:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075bc:	2320      	movs	r3, #32
 80075be:	4698      	mov	r8, r3
 80075c0:	e004      	b.n	80075cc <ExecuteMonitor+0x58>
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	d04c      	beq.n	8007660 <ExecuteMonitor+0xec>
 80075c6:	2a02      	cmp	r2, #2
 80075c8:	d100      	bne.n	80075cc <ExecuteMonitor+0x58>
 80075ca:	e0a8      	b.n	800771e <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 80075cc:	464b      	mov	r3, r9
		            	    Delay_us(100);
 80075ce:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 80075d0:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 80075d2:	f005 f8f1 	bl	800c7b8 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80075d6:	465b      	mov	r3, fp
 80075d8:	464a      	mov	r2, r9
 80075da:	795b      	ldrb	r3, [r3, #5]
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d00b      	beq.n	80075fa <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80075e2:	4ac2      	ldr	r2, [pc, #776]	; (80078ec <ExecuteMonitor+0x378>)
 80075e4:	48c1      	ldr	r0, [pc, #772]	; (80078ec <ExecuteMonitor+0x378>)
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	1c51      	adds	r1, r2, #1
 80075ea:	7001      	strb	r1, [r0, #0]
 80075ec:	2124      	movs	r1, #36	; 0x24
 80075ee:	4452      	add	r2, sl
 80075f0:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 80075f2:	464a      	mov	r2, r9
 80075f4:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80075f6:	465a      	mov	r2, fp
 80075f8:	7157      	strb	r7, [r2, #5]
 80075fa:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075fc:	4641      	mov	r1, r8
 80075fe:	7912      	ldrb	r2, [r2, #4]
 8007600:	438b      	bics	r3, r1
 8007602:	d1de      	bne.n	80075c2 <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007604:	2a00      	cmp	r2, #0
 8007606:	d129      	bne.n	800765c <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007608:	4bb8      	ldr	r3, [pc, #736]	; (80078ec <ExecuteMonitor+0x378>)
 800760a:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 800760c:	4653      	mov	r3, sl
 800760e:	3224      	adds	r2, #36	; 0x24
 8007610:	5c9b      	ldrb	r3, [r3, r2]
 8007612:	2b5b      	cmp	r3, #91	; 0x5b
 8007614:	d100      	bne.n	8007618 <ExecuteMonitor+0xa4>
 8007616:	e0eb      	b.n	80077f0 <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007618:	2b23      	cmp	r3, #35	; 0x23
 800761a:	d100      	bne.n	800761e <ExecuteMonitor+0xaa>
 800761c:	e141      	b.n	80078a2 <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 800761e:	2b3d      	cmp	r3, #61	; 0x3d
 8007620:	d100      	bne.n	8007624 <ExecuteMonitor+0xb0>
 8007622:	e175      	b.n	8007910 <ExecuteMonitor+0x39c>
 8007624:	2338      	movs	r3, #56	; 0x38
 8007626:	4652      	mov	r2, sl
 8007628:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800762a:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 800762c:	4bb0      	ldr	r3, [pc, #704]	; (80078f0 <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800762e:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007630:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007632:	304c      	adds	r0, #76	; 0x4c
 8007634:	1bcf      	subs	r7, r1, r7
 8007636:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007638:	4657      	mov	r7, sl
 800763a:	3738      	adds	r7, #56	; 0x38
 800763c:	0039      	movs	r1, r7
 800763e:	220f      	movs	r2, #15
 8007640:	f00a fe69 	bl	8012316 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007644:	4650      	mov	r0, sl
 8007646:	2214      	movs	r2, #20
 8007648:	2100      	movs	r1, #0
 800764a:	3024      	adds	r0, #36	; 0x24
 800764c:	f00a fe6c 	bl	8012328 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007650:	2214      	movs	r2, #20
 8007652:	2100      	movs	r1, #0
 8007654:	0038      	movs	r0, r7
 8007656:	f00a fe67 	bl	8012328 <memset>
 800765a:	e7ab      	b.n	80075b4 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 800765c:	2a01      	cmp	r2, #1
 800765e:	d15b      	bne.n	8007718 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007660:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007662:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007664:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 8007666:	4ba3      	ldr	r3, [pc, #652]	; (80078f4 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007668:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 800766a:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 800766c:	4ba2      	ldr	r3, [pc, #648]	; (80078f8 <ExecuteMonitor+0x384>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02e      	beq.n	80076d2 <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007674:	224c      	movs	r2, #76	; 0x4c
		           while(counter != numCommandParameters)
 8007676:	2100      	movs	r1, #0
 8007678:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800767a:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 800767c:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800767e:	0010      	movs	r0, r2
 8007680:	2720      	movs	r7, #32
 8007682:	001a      	movs	r2, r3
 8007684:	0003      	movs	r3, r0
 8007686:	e002      	b.n	800768e <ExecuteMonitor+0x11a>
 8007688:	4b9a      	ldr	r3, [pc, #616]	; (80078f4 <ExecuteMonitor+0x380>)
 800768a:	781a      	ldrb	r2, [r3, #0]
 800768c:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800768e:	1c58      	adds	r0, r3, #1
 8007690:	7028      	strb	r0, [r5, #0]
 8007692:	1c48      	adds	r0, r1, #1
 8007694:	7030      	strb	r0, [r6, #0]
 8007696:	0110      	lsls	r0, r2, #4
 8007698:	1a82      	subs	r2, r0, r2
 800769a:	4452      	add	r2, sl
 800769c:	18d2      	adds	r2, r2, r3
 800769e:	4643      	mov	r3, r8
 80076a0:	5cd3      	ldrb	r3, [r2, r3]
 80076a2:	2244      	movs	r2, #68	; 0x44
 80076a4:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 80076a6:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076a8:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 80076aa:	f007 fae7 	bl	800ec7c <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80076ae:	7831      	ldrb	r1, [r6, #0]
 80076b0:	1863      	adds	r3, r4, r1
 80076b2:	3343      	adds	r3, #67	; 0x43
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	43bb      	bics	r3, r7
 80076b8:	d1e6      	bne.n	8007688 <ExecuteMonitor+0x114>
		                   counter++;
 80076ba:	4b8e      	ldr	r3, [pc, #568]	; (80078f4 <ExecuteMonitor+0x380>)
 80076bc:	4a8d      	ldr	r2, [pc, #564]	; (80078f4 <ExecuteMonitor+0x380>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	3301      	adds	r3, #1
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80076c6:	2201      	movs	r2, #1
 80076c8:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 80076ca:	4a8b      	ldr	r2, [pc, #556]	; (80078f8 <ExecuteMonitor+0x384>)
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d1d4      	bne.n	800767c <ExecuteMonitor+0x108>
		          		   flag=0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	465a      	mov	r2, fp
 80076d6:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 80076d8:	4a86      	ldr	r2, [pc, #536]	; (80078f4 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076da:	2744      	movs	r7, #68	; 0x44
		          		   counter=0;
 80076dc:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80076de:	4a87      	ldr	r2, [pc, #540]	; (80078fc <ExecuteMonitor+0x388>)
 80076e0:	7013      	strb	r3, [r2, #0]
 80076e2:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076e4:	4a86      	ldr	r2, [pc, #536]	; (8007900 <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 80076e6:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80076e8:	18d2      	adds	r2, r2, r3
 80076ea:	18e3      	adds	r3, r4, r3
 80076ec:	5ddb      	ldrb	r3, [r3, r7]
 80076ee:	3281      	adds	r2, #129	; 0x81
 80076f0:	32ff      	adds	r2, #255	; 0xff
 80076f2:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80076f4:	f007 fac2 	bl	800ec7c <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80076f8:	4b80      	ldr	r3, [pc, #512]	; (80078fc <ExecuteMonitor+0x388>)
 80076fa:	4a80      	ldr	r2, [pc, #512]	; (80078fc <ExecuteMonitor+0x388>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	7013      	strb	r3, [r2, #0]
 8007704:	2b3f      	cmp	r3, #63	; 0x3f
 8007706:	d9ed      	bls.n	80076e4 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007708:	0020      	movs	r0, r4
 800770a:	2240      	movs	r2, #64	; 0x40
 800770c:	3044      	adds	r0, #68	; 0x44
 800770e:	2100      	movs	r1, #0
 8007710:	f00a fe0a 	bl	8012328 <memset>
 8007714:	465b      	mov	r3, fp
 8007716:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 8007718:	2a02      	cmp	r2, #2
 800771a:	d000      	beq.n	800771e <ExecuteMonitor+0x1aa>
 800771c:	e74a      	b.n	80075b4 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 800771e:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007720:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8007722:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 8007724:	4b73      	ldr	r3, [pc, #460]	; (80078f4 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8007726:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 8007728:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 800772a:	4b73      	ldr	r3, [pc, #460]	; (80078f8 <ExecuteMonitor+0x384>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d033      	beq.n	800779a <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007732:	224c      	movs	r2, #76	; 0x4c
   		           while(counter != numCommandParameters)
 8007734:	2100      	movs	r1, #0
 8007736:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007738:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 800773a:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800773c:	0010      	movs	r0, r2
 800773e:	2720      	movs	r7, #32
 8007740:	001a      	movs	r2, r3
 8007742:	0003      	movs	r3, r0
 8007744:	e001      	b.n	800774a <ExecuteMonitor+0x1d6>
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800774a:	1c58      	adds	r0, r3, #1
 800774c:	7028      	strb	r0, [r5, #0]
 800774e:	1c48      	adds	r0, r1, #1
 8007750:	7030      	strb	r0, [r6, #0]
 8007752:	0110      	lsls	r0, r2, #4
 8007754:	1a82      	subs	r2, r0, r2
 8007756:	4452      	add	r2, sl
 8007758:	18d2      	adds	r2, r2, r3
 800775a:	4643      	mov	r3, r8
 800775c:	5cd3      	ldrb	r3, [r2, r3]
 800775e:	2244      	movs	r2, #68	; 0x44
 8007760:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 8007762:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007764:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 8007766:	f007 fa89 	bl	800ec7c <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800776a:	7831      	ldrb	r1, [r6, #0]
 800776c:	1863      	adds	r3, r4, r1
 800776e:	3343      	adds	r3, #67	; 0x43
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	4b60      	ldr	r3, [pc, #384]	; (80078f4 <ExecuteMonitor+0x380>)
 8007774:	43ba      	bics	r2, r7
 8007776:	d1e6      	bne.n	8007746 <ExecuteMonitor+0x1d2>
   		             counter++;
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	485e      	ldr	r0, [pc, #376]	; (80078f4 <ExecuteMonitor+0x380>)
 800777c:	3301      	adds	r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 8007782:	2001      	movs	r0, #1
 8007784:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 8007786:	485c      	ldr	r0, [pc, #368]	; (80078f8 <ExecuteMonitor+0x384>)
 8007788:	7800      	ldrb	r0, [r0, #0]
 800778a:	4298      	cmp	r0, r3
 800778c:	d1d5      	bne.n	800773a <ExecuteMonitor+0x1c6>
 800778e:	465b      	mov	r3, fp
		            counter=0;
 8007790:	4958      	ldr	r1, [pc, #352]	; (80078f4 <ExecuteMonitor+0x380>)
 8007792:	791b      	ldrb	r3, [r3, #4]
 8007794:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01e      	beq.n	80077d8 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800779a:	2744      	movs	r7, #68	; 0x44
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800779c:	2200      	movs	r2, #0
 800779e:	4b57      	ldr	r3, [pc, #348]	; (80078fc <ExecuteMonitor+0x388>)
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077a4:	4a56      	ldr	r2, [pc, #344]	; (8007900 <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 80077a6:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077a8:	18d2      	adds	r2, r2, r3
 80077aa:	18e3      	adds	r3, r4, r3
 80077ac:	5ddb      	ldrb	r3, [r3, r7]
 80077ae:	3281      	adds	r2, #129	; 0x81
 80077b0:	32ff      	adds	r2, #255	; 0xff
 80077b2:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80077b4:	f005 f800 	bl	800c7b8 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077b8:	4b50      	ldr	r3, [pc, #320]	; (80078fc <ExecuteMonitor+0x388>)
 80077ba:	4a50      	ldr	r2, [pc, #320]	; (80078fc <ExecuteMonitor+0x388>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	3301      	adds	r3, #1
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	7013      	strb	r3, [r2, #0]
 80077c4:	2b3f      	cmp	r3, #63	; 0x3f
 80077c6:	d9ed      	bls.n	80077a4 <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 80077c8:	465b      	mov	r3, fp
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	f007 fa56 	bl	800ec7c <HAL_Delay>
                  while(flag != NonActive)
 80077d0:	465b      	mov	r3, fp
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e1      	bne.n	800779c <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80077d8:	0020      	movs	r0, r4
 80077da:	2240      	movs	r2, #64	; 0x40
 80077dc:	2100      	movs	r1, #0
 80077de:	3044      	adds	r0, #68	; 0x44
 80077e0:	f00a fda2 	bl	8012328 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80077e4:	22c0      	movs	r2, #192	; 0xc0
 80077e6:	2100      	movs	r1, #0
 80077e8:	4846      	ldr	r0, [pc, #280]	; (8007904 <ExecuteMonitor+0x390>)
 80077ea:	f00a fd9d 	bl	8012328 <memset>
 80077ee:	e6e1      	b.n	80075b4 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 80077f0:	4a3e      	ldr	r2, [pc, #248]	; (80078ec <ExecuteMonitor+0x378>)
 80077f2:	3b5a      	subs	r3, #90	; 0x5a
 80077f4:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80077f6:	4b44      	ldr	r3, [pc, #272]	; (8007908 <ExecuteMonitor+0x394>)
 80077f8:	210a      	movs	r1, #10
 80077fa:	781f      	ldrb	r7, [r3, #0]
 80077fc:	4653      	mov	r3, sl
 80077fe:	9701      	str	r7, [sp, #4]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	7858      	ldrb	r0, [r3, #1]
 8007804:	f7f8 fd2a 	bl	800025c <__aeabi_uidivmod>
 8007808:	2303      	movs	r3, #3
 800780a:	b2c9      	uxtb	r1, r1
 800780c:	4698      	mov	r8, r3
 800780e:	42b9      	cmp	r1, r7
 8007810:	d101      	bne.n	8007816 <ExecuteMonitor+0x2a2>
 8007812:	e0a1      	b.n	8007958 <ExecuteMonitor+0x3e4>
 8007814:	46b8      	mov	r8, r7
 8007816:	4643      	mov	r3, r8
 8007818:	1c9f      	adds	r7, r3, #2
 800781a:	4653      	mov	r3, sl
 800781c:	2224      	movs	r2, #36	; 0x24
 800781e:	4443      	add	r3, r8
 8007820:	5c98      	ldrb	r0, [r3, r2]
 8007822:	210a      	movs	r1, #10
 8007824:	f7f8 fd1a 	bl	800025c <__aeabi_uidivmod>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	b2c9      	uxtb	r1, r1
 800782c:	b2ff      	uxtb	r7, r7
 800782e:	4299      	cmp	r1, r3
 8007830:	d1f0      	bne.n	8007814 <ExecuteMonitor+0x2a0>
 8007832:	4643      	mov	r3, r8
 8007834:	46b8      	mov	r8, r7
 8007836:	3301      	adds	r3, #1
 8007838:	b2db      	uxtb	r3, r3
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 800783e:	4a2b      	ldr	r2, [pc, #172]	; (80078ec <ExecuteMonitor+0x378>)
 8007840:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007842:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 8007844:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007846:	2224      	movs	r2, #36	; 0x24
 8007848:	5c9b      	ldrb	r3, [r3, r2]
 800784a:	210a      	movs	r1, #10
 800784c:	0018      	movs	r0, r3
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	f7f8 fd04 	bl	800025c <__aeabi_uidivmod>
 8007854:	2338      	movs	r3, #56	; 0x38
 8007856:	4652      	mov	r2, sl
 8007858:	b2cf      	uxtb	r7, r1
 800785a:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	2b5d      	cmp	r3, #93	; 0x5d
 8007860:	d00d      	beq.n	800787e <ExecuteMonitor+0x30a>
 8007862:	9b01      	ldr	r3, [sp, #4]
 8007864:	3301      	adds	r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	e000      	b.n	800786c <ExecuteMonitor+0x2f8>
 800786a:	0013      	movs	r3, r2
 800786c:	2124      	movs	r1, #36	; 0x24
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	4453      	add	r3, sl
 8007872:	5c5b      	ldrb	r3, [r3, r1]
 8007874:	b2d2      	uxtb	r2, r2
 8007876:	2b5d      	cmp	r3, #93	; 0x5d
 8007878:	d1f7      	bne.n	800786a <ExecuteMonitor+0x2f6>
 800787a:	4690      	mov	r8, r2
 800787c:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 800787e:	4642      	mov	r2, r8
 8007880:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007882:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 8007884:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 8007886:	2301      	movs	r3, #1
 8007888:	4a20      	ldr	r2, [pc, #128]	; (800790c <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800788a:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 800788c:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800788e:	9b02      	ldr	r3, [sp, #8]
 8007890:	2214      	movs	r2, #20
 8007892:	469c      	mov	ip, r3
 8007894:	3124      	adds	r1, #36	; 0x24
 8007896:	1ad2      	subs	r2, r2, r3
 8007898:	4461      	add	r1, ip
 800789a:	3039      	adds	r0, #57	; 0x39
 800789c:	f00a fd3b 	bl	8012316 <memcpy>
 80078a0:	e6c3      	b.n	800762a <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078a2:	4653      	mov	r3, sl
 80078a4:	3324      	adds	r3, #36	; 0x24
 80078a6:	7858      	ldrb	r0, [r3, #1]
 80078a8:	210a      	movs	r1, #10
 80078aa:	f7f8 fcd7 	bl	800025c <__aeabi_uidivmod>
 80078ae:	4652      	mov	r2, sl
 80078b0:	2338      	movs	r3, #56	; 0x38
 80078b2:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078b4:	4650      	mov	r0, sl
 80078b6:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80078b8:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 80078ba:	4a0c      	ldr	r2, [pc, #48]	; (80078ec <ExecuteMonitor+0x378>)
 80078bc:	3b36      	subs	r3, #54	; 0x36
 80078be:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 80078c0:	4a12      	ldr	r2, [pc, #72]	; (800790c <ExecuteMonitor+0x398>)
 80078c2:	3b01      	subs	r3, #1
 80078c4:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078c6:	3126      	adds	r1, #38	; 0x26
 80078c8:	2212      	movs	r2, #18
 80078ca:	3039      	adds	r0, #57	; 0x39
 80078cc:	f00a fd23 	bl	8012316 <memcpy>
 80078d0:	e6ab      	b.n	800762a <ExecuteMonitor+0xb6>
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	20000000 	.word	0x20000000
 80078d8:	200068c4 	.word	0x200068c4
 80078dc:	20006908 	.word	0x20006908
 80078e0:	20001c9c 	.word	0x20001c9c
 80078e4:	20006905 	.word	0x20006905
 80078e8:	20001d1c 	.word	0x20001d1c
 80078ec:	200068e5 	.word	0x200068e5
 80078f0:	20006907 	.word	0x20006907
 80078f4:	200068e6 	.word	0x200068e6
 80078f8:	20006904 	.word	0x20006904
 80078fc:	200068c5 	.word	0x200068c5
 8007900:	200018d4 	.word	0x200018d4
 8007904:	20001a54 	.word	0x20001a54
 8007908:	20006906 	.word	0x20006906
 800790c:	200068e4 	.word	0x200068e4
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007910:	4657      	mov	r7, sl
 8007912:	3724      	adds	r7, #36	; 0x24
 8007914:	7878      	ldrb	r0, [r7, #1]
 8007916:	210a      	movs	r1, #10
 8007918:	f7f8 fca0 	bl	800025c <__aeabi_uidivmod>
 800791c:	4b11      	ldr	r3, [pc, #68]	; (8007964 <ExecuteMonitor+0x3f0>)
 800791e:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007920:	78b8      	ldrb	r0, [r7, #2]
 8007922:	210a      	movs	r1, #10
 8007924:	f7f8 fc9a 	bl	800025c <__aeabi_uidivmod>
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <ExecuteMonitor+0x3f4>)
 800792a:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800792c:	78f8      	ldrb	r0, [r7, #3]
 800792e:	210a      	movs	r1, #10
 8007930:	f7f8 fc94 	bl	800025c <__aeabi_uidivmod>
 8007934:	4652      	mov	r2, sl
 8007936:	2338      	movs	r3, #56	; 0x38
 8007938:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800793a:	4650      	mov	r0, sl
 800793c:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800793e:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 8007940:	4a0a      	ldr	r2, [pc, #40]	; (800796c <ExecuteMonitor+0x3f8>)
 8007942:	3b34      	subs	r3, #52	; 0x34
 8007944:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <ExecuteMonitor+0x3fc>)
 8007948:	3b03      	subs	r3, #3
 800794a:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800794c:	3128      	adds	r1, #40	; 0x28
 800794e:	2210      	movs	r2, #16
 8007950:	3039      	adds	r0, #57	; 0x39
 8007952:	f00a fce0 	bl	8012316 <memcpy>
 8007956:	e668      	b.n	800762a <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007958:	2202      	movs	r2, #2
 800795a:	9302      	str	r3, [sp, #8]
 800795c:	9201      	str	r2, [sp, #4]
 800795e:	3b01      	subs	r3, #1
 8007960:	e76d      	b.n	800783e <ExecuteMonitor+0x2ca>
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	20006906 	.word	0x20006906
 8007968:	20006904 	.word	0x20006904
 800796c:	200068e5 	.word	0x200068e5
 8007970:	200068e4 	.word	0x200068e4

08007974 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4c1c      	ldr	r4, [pc, #112]	; (80079e8 <StartDefaultTask+0x74>)
 8007978:	4d1c      	ldr	r5, [pc, #112]	; (80079ec <StartDefaultTask+0x78>)
 800797a:	4e1d      	ldr	r6, [pc, #116]	; (80079f0 <StartDefaultTask+0x7c>)
 800797c:	e00f      	b.n	800799e <StartDefaultTask+0x2a>
		switch(indMode){
 800797e:	2b03      	cmp	r3, #3
 8007980:	d022      	beq.n	80079c8 <StartDefaultTask+0x54>
 8007982:	2b01      	cmp	r3, #1
 8007984:	d028      	beq.n	80079d8 <StartDefaultTask+0x64>
		CheckAttachedButtons();
 8007986:	f004 f8cd 	bl	800bb24 <CheckAttachedButtons>
		ExecuteSnippet();
 800798a:	f7fd fd17 	bl	80053bc <ExecuteSnippet>
		ExecuteMonitor();
 800798e:	f7ff fdf1 	bl	8007574 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007992:	782b      	ldrb	r3, [r5, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d100      	bne.n	800799a <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8007998:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 800799a:	f007 f823 	bl	800e9e4 <vPortYield>
		switch(indMode){
 800799e:	7823      	ldrb	r3, [r4, #0]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d1ec      	bne.n	800797e <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 80079a4:	2090      	movs	r0, #144	; 0x90
 80079a6:	2201      	movs	r2, #1
 80079a8:	05c0      	lsls	r0, r0, #23
 80079aa:	2140      	movs	r1, #64	; 0x40
 80079ac:	f008 fdb2 	bl	8010514 <HAL_GPIO_WritePin>
 80079b0:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 80079b2:	f005 fac7 	bl	800cf44 <osDelay>
 80079b6:	2090      	movs	r0, #144	; 0x90
 80079b8:	2200      	movs	r2, #0
 80079ba:	2140      	movs	r1, #64	; 0x40
 80079bc:	05c0      	lsls	r0, r0, #23
 80079be:	f008 fda9 	bl	8010514 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80079c2:	2300      	movs	r3, #0
 80079c4:	7023      	strb	r3, [r4, #0]
				break;
 80079c6:	e7de      	b.n	8007986 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 80079c8:	2090      	movs	r0, #144	; 0x90
 80079ca:	2201      	movs	r2, #1
 80079cc:	05c0      	lsls	r0, r0, #23
 80079ce:	2140      	movs	r1, #64	; 0x40
 80079d0:	f008 fda0 	bl	8010514 <HAL_GPIO_WritePin>
 80079d4:	201e      	movs	r0, #30
 80079d6:	e7ec      	b.n	80079b2 <StartDefaultTask+0x3e>
				RTOS_IND_blink(200);
 80079d8:	2090      	movs	r0, #144	; 0x90
 80079da:	2201      	movs	r2, #1
 80079dc:	05c0      	lsls	r0, r0, #23
 80079de:	2140      	movs	r1, #64	; 0x40
 80079e0:	f008 fd98 	bl	8010514 <HAL_GPIO_WritePin>
 80079e4:	20c8      	movs	r0, #200	; 0xc8
 80079e6:	e7e4      	b.n	80079b2 <StartDefaultTask+0x3e>
 80079e8:	2000113e 	.word	0x2000113e
 80079ec:	2000243f 	.word	0x2000243f
 80079f0:	20002434 	.word	0x20002434

080079f4 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 80079f6:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	4904      	ldr	r1, [pc, #16]	; (8007a0c <vMainConfigureTimerForRunTimeStats+0x18>)
 80079fc:	f7f8 fba8 	bl	8000150 <__udivsi3>
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007a02:	6058      	str	r0, [r3, #4]
}
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	200000b4 	.word	0x200000b4
 8007a0c:	00002710 	.word	0x00002710
 8007a10:	20001d9c 	.word	0x20001d9c

08007a14 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a14:	21fa      	movs	r1, #250	; 0xfa
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007a18:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	0089      	lsls	r1, r1, #2
 8007a1e:	f7f8 fb97 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a22:	4c0d      	ldr	r4, [pc, #52]	; (8007a58 <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a24:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a26:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007a28:	f006 f9b8 	bl	800dd9c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <ulMainGetRunTimeCounterValue+0x48>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	015b      	lsls	r3, r3, #5
 8007a32:	d50c      	bpl.n	8007a4e <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a34:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 8007a36:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a38:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 8007a3c:	0084      	lsls	r4, r0, #2
 8007a3e:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	0028      	movs	r0, r5
 8007a44:	f7f8 fb84 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 8007a48:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a4a:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a4e:	1bad      	subs	r5, r5, r6
 8007a50:	e7f3      	b.n	8007a3a <ulMainGetRunTimeCounterValue+0x26>
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	200000b4 	.word	0x200000b4
 8007a58:	e000e018 	.word	0xe000e018
 8007a5c:	e000ed04 	.word	0xe000ed04
 8007a60:	20001d9c 	.word	0x20001d9c

08007a64 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007a64:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007a66:	f006 ff65 	bl	800e934 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007a6a:	b2c4      	uxtb	r4, r0
 8007a6c:	0020      	movs	r0, r4
 8007a6e:	f002 fa17 	bl	8009ea0 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007a72:	0020      	movs	r0, r4
 8007a74:	f002 fe40 	bl	800a6f8 <SwitchStreamDMAToMsg>
}
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)

08007a7c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7e:	46ce      	mov	lr, r9
 8007a80:	4647      	mov	r7, r8
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b085      	sub	sp, #20
 8007a86:	0015      	movs	r5, r2
 8007a88:	466a      	mov	r2, sp
 8007a8a:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a8c:	aa0c      	add	r2, sp, #48	; 0x30
 8007a8e:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a90:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d06b      	beq.n	8007b6e <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d051      	beq.n	8007b3e <SetupDMAStreams+0xc2>
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d04f      	beq.n	8007b3e <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d06a      	beq.n	8007b78 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8007aa2:	2801      	cmp	r0, #1
 8007aa4:	d052      	beq.n	8007b4c <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 8007aa6:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007aa8:	2802      	cmp	r0, #2
 8007aaa:	d149      	bne.n	8007b40 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007aac:	0018      	movs	r0, r3
 8007aae:	f005 f913 	bl	800ccd8 <GetUart>
 8007ab2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ab4:	0004      	movs	r4, r0
 8007ab6:	7818      	ldrb	r0, [r3, #0]
 8007ab8:	f005 f90e 	bl	800ccd8 <GetUart>
 8007abc:	2201      	movs	r2, #1
 8007abe:	0001      	movs	r1, r0
 8007ac0:	0020      	movs	r0, r4
 8007ac2:	f7ff fc0d 	bl	80072e0 <StartDMAstream>
 8007ac6:	2817      	cmp	r0, #23
 8007ac8:	d04f      	beq.n	8007b6a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007aca:	21fa      	movs	r1, #250	; 0xfa
 8007acc:	0168      	lsls	r0, r5, #5
 8007ace:	1b40      	subs	r0, r0, r5
 8007ad0:	0080      	lsls	r0, r0, #2
 8007ad2:	1940      	adds	r0, r0, r5
 8007ad4:	0089      	lsls	r1, r1, #2
 8007ad6:	00c0      	lsls	r0, r0, #3
 8007ad8:	f7f8 fb3a 	bl	8000150 <__udivsi3>
 8007adc:	4b49      	ldr	r3, [pc, #292]	; (8007c04 <SetupDMAStreams+0x188>)
 8007ade:	4d4a      	ldr	r5, [pc, #296]	; (8007c08 <SetupDMAStreams+0x18c>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4698      	mov	r8, r3
 8007ae4:	230f      	movs	r3, #15
 8007ae6:	0001      	movs	r1, r0
 8007ae8:	2200      	movs	r2, #0
 8007aea:	446b      	add	r3, sp
 8007aec:	0007      	movs	r7, r0
 8007aee:	0028      	movs	r0, r5
 8007af0:	f006 fdd0 	bl	800e694 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007af4:	466b      	mov	r3, sp
 8007af6:	7bdb      	ldrb	r3, [r3, #15]
 8007af8:	4c44      	ldr	r4, [pc, #272]	; (8007c0c <SetupDMAStreams+0x190>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b00:	ab0c      	add	r3, sp, #48	; 0x30
 8007b02:	7818      	ldrb	r0, [r3, #0]
 8007b04:	f005 f8e8 	bl	800ccd8 <GetUart>
 8007b08:	466b      	mov	r3, sp
 8007b0a:	4681      	mov	r9, r0
 8007b0c:	7bd8      	ldrb	r0, [r3, #15]
 8007b0e:	f005 f8e3 	bl	800ccd8 <GetUart>
 8007b12:	2201      	movs	r2, #1
 8007b14:	0001      	movs	r1, r0
 8007b16:	4648      	mov	r0, r9
 8007b18:	f7ff fbe2 	bl	80072e0 <StartDMAstream>
 8007b1c:	2817      	cmp	r0, #23
 8007b1e:	d024      	beq.n	8007b6a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b20:	4643      	mov	r3, r8
 8007b22:	0028      	movs	r0, r5
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	ab0c      	add	r3, sp, #48	; 0x30
 8007b2a:	0039      	movs	r1, r7
 8007b2c:	f006 fdb2 	bl	800e694 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007b30:	ab0c      	add	r3, sp, #48	; 0x30
 8007b32:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b34:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 8007b36:	3b01      	subs	r3, #1
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	511e      	str	r6, [r3, r4]
 8007b3c:	e044      	b.n	8007bc8 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8007b3e:	2467      	movs	r4, #103	; 0x67
}
 8007b40:	0020      	movs	r0, r4
 8007b42:	b005      	add	sp, #20
 8007b44:	bc0c      	pop	{r2, r3}
 8007b46:	4690      	mov	r8, r2
 8007b48:	4699      	mov	r9, r3
 8007b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b4c:	0010      	movs	r0, r2
 8007b4e:	f005 f8c3 	bl	800ccd8 <GetUart>
 8007b52:	466b      	mov	r3, sp
 8007b54:	0004      	movs	r4, r0
 8007b56:	7bd8      	ldrb	r0, [r3, #15]
 8007b58:	f005 f8be 	bl	800ccd8 <GetUart>
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	0001      	movs	r1, r0
 8007b60:	0020      	movs	r0, r4
 8007b62:	f7ff fbbd 	bl	80072e0 <StartDMAstream>
 8007b66:	2817      	cmp	r0, #23
 8007b68:	d13d      	bne.n	8007be6 <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 8007b6a:	2417      	movs	r4, #23
 8007b6c:	e7e8      	b.n	8007b40 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 8007b6e:	2102      	movs	r1, #2
 8007b70:	4a27      	ldr	r2, [pc, #156]	; (8007c10 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 8007b72:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 8007b74:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007b76:	e7e3      	b.n	8007b40 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f005 f8ad 	bl	800ccd8 <GetUart>
 8007b7e:	ab0c      	add	r3, sp, #48	; 0x30
 8007b80:	0004      	movs	r4, r0
 8007b82:	7818      	ldrb	r0, [r3, #0]
 8007b84:	f005 f8a8 	bl	800ccd8 <GetUart>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	0001      	movs	r1, r0
 8007b8c:	0020      	movs	r0, r4
 8007b8e:	f7ff fba7 	bl	80072e0 <StartDMAstream>
 8007b92:	2817      	cmp	r0, #23
 8007b94:	d0e9      	beq.n	8007b6a <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b96:	21fa      	movs	r1, #250	; 0xfa
 8007b98:	0168      	lsls	r0, r5, #5
 8007b9a:	1b40      	subs	r0, r0, r5
 8007b9c:	0080      	lsls	r0, r0, #2
 8007b9e:	1940      	adds	r0, r0, r5
 8007ba0:	0089      	lsls	r1, r1, #2
 8007ba2:	00c0      	lsls	r0, r0, #3
 8007ba4:	f7f8 fad4 	bl	8000150 <__udivsi3>
 8007ba8:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <SetupDMAStreams+0x188>)
 8007baa:	0001      	movs	r1, r0
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	230f      	movs	r3, #15
 8007bb0:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4814      	ldr	r0, [pc, #80]	; (8007c08 <SetupDMAStreams+0x18c>)
 8007bb6:	f006 fd6d 	bl	800e694 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007bba:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bbc:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8007bbe:	7bdb      	ldrb	r3, [r3, #15]
 8007bc0:	4a12      	ldr	r2, [pc, #72]	; (8007c0c <SetupDMAStreams+0x190>)
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007bc8:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	d0b8      	beq.n	8007b40 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007bce:	f006 f8df 	bl	800dd90 <xTaskGetTickCount>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2101      	movs	r1, #1
 8007bdc:	2300      	movs	r3, #0
 8007bde:	0028      	movs	r0, r5
 8007be0:	f006 fd78 	bl	800e6d4 <xTimerGenericCommand>
 8007be4:	e7ac      	b.n	8007b40 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007be6:	21fa      	movs	r1, #250	; 0xfa
 8007be8:	0168      	lsls	r0, r5, #5
 8007bea:	1b40      	subs	r0, r0, r5
 8007bec:	0080      	lsls	r0, r0, #2
 8007bee:	1940      	adds	r0, r0, r5
 8007bf0:	0089      	lsls	r1, r1, #2
 8007bf2:	00c0      	lsls	r0, r0, #3
 8007bf4:	f7f8 faac 	bl	8000150 <__udivsi3>
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <SetupDMAStreams+0x188>)
 8007bfa:	0001      	movs	r1, r0
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	ab0c      	add	r3, sp, #48	; 0x30
 8007c00:	e7d7      	b.n	8007bb2 <SetupDMAStreams+0x136>
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	08007a65 	.word	0x08007a65
 8007c08:	080197a0 	.word	0x080197a0
 8007c0c:	20001878 	.word	0x20001878
 8007c10:	20000c2c 	.word	0x20000c2c

08007c14 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007c14:	b510      	push	{r4, lr}
	switch(port){
 8007c16:	2805      	cmp	r0, #5
 8007c18:	d80a      	bhi.n	8007c30 <NotifyMessagingTask+0x1c>
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <NotifyMessagingTask+0x30>)
 8007c1c:	0080      	lsls	r0, r0, #2
 8007c1e:	581b      	ldr	r3, [r3, r0]
 8007c20:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <NotifyMessagingTask+0x34>)
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	2202      	movs	r2, #2
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f006 fc82 	bl	800e534 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007c30:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <NotifyMessagingTask+0x38>)
 8007c34:	e7f6      	b.n	8007c24 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <NotifyMessagingTask+0x3c>)
 8007c38:	e7f4      	b.n	8007c24 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c3a:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <NotifyMessagingTask+0x40>)
 8007c3c:	e7f2      	b.n	8007c24 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <NotifyMessagingTask+0x44>)
 8007c40:	e7f0      	b.n	8007c24 <NotifyMessagingTask+0x10>
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	08016ecc 	.word	0x08016ecc
 8007c48:	20001cbc 	.word	0x20001cbc
 8007c4c:	20001cac 	.word	0x20001cac
 8007c50:	20001cb0 	.word	0x20001cb0
 8007c54:	20001cb4 	.word	0x20001cb4
 8007c58:	20001cb8 	.word	0x20001cb8

08007c5c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	ac06      	add	r4, sp, #24
 8007c62:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007c64:	0004      	movs	r4, r0
 8007c66:	4314      	orrs	r4, r2
 8007c68:	d011      	beq.n	8007c8e <SendMessageFromPort+0x32>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d10b      	bne.n	8007c86 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c6e:	1c96      	adds	r6, r2, #2
 8007c70:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007c72:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c74:	2e01      	cmp	r6, #1
 8007c76:	d803      	bhi.n	8007c80 <SendMessageFromPort+0x24>
 8007c78:	9500      	str	r5, [sp, #0]
 8007c7a:	f000 f80b 	bl	8007c94 <SendMessageFromPort.part.0>
 8007c7e:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007c80:	0020      	movs	r0, r4
 8007c82:	b002      	add	sp, #8
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d0f6      	beq.n	8007c78 <SendMessageFromPort+0x1c>
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1f4      	bne.n	8007c78 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 8007c8e:	2467      	movs	r4, #103	; 0x67
 8007c90:	e7f6      	b.n	8007c80 <SendMessageFromPort+0x24>
 8007c92:	46c0      	nop			; (mov r8, r8)

08007c94 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c96:	46de      	mov	lr, fp
 8007c98:	464e      	mov	r6, r9
 8007c9a:	4645      	mov	r5, r8
 8007c9c:	4657      	mov	r7, sl
 8007c9e:	b5e0      	push	{r5, r6, r7, lr}
 8007ca0:	b087      	sub	sp, #28
 8007ca2:	0005      	movs	r5, r0
 8007ca4:	9004      	str	r0, [sp, #16]
 8007ca6:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ca8:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007caa:	ab10      	add	r3, sp, #64	; 0x40
 8007cac:	4689      	mov	r9, r1
 8007cae:	4690      	mov	r8, r2
 8007cb0:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cb2:	f005 ffd7 	bl	800dc64 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cb6:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cb8:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f005 ffe2 	bl	800dc84 <vTaskPrioritySet>
	message[0] ='H';
 8007cc0:	2348      	movs	r3, #72	; 0x48
 8007cc2:	4cd2      	ldr	r4, [pc, #840]	; (800800c <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007cc4:	464a      	mov	r2, r9
	message[0] ='H';
 8007cc6:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007cc8:	3312      	adds	r3, #18
 8007cca:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ccc:	002b      	movs	r3, r5
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	d000      	beq.n	8007cd4 <SendMessageFromPort.part.0+0x40>
 8007cd2:	e094      	b.n	8007dfe <SendMessageFromPort.part.0+0x16a>
 8007cd4:	4643      	mov	r3, r8
 8007cd6:	1c9f      	adds	r7, r3, #2
 8007cd8:	b2ff      	uxtb	r7, r7
 8007cda:	2f01      	cmp	r7, #1
 8007cdc:	d800      	bhi.n	8007ce0 <SendMessageFromPort.part.0+0x4c>
 8007cde:	e095      	b.n	8007e0c <SendMessageFromPort.part.0+0x178>
 8007ce0:	465b      	mov	r3, fp
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d100      	bne.n	8007ce8 <SendMessageFromPort.part.0+0x54>
 8007ce6:	e091      	b.n	8007e0c <SendMessageFromPort.part.0+0x178>
			src =myID;
 8007ce8:	4bc9      	ldr	r3, [pc, #804]	; (8008010 <SendMessageFromPort.part.0+0x37c>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4699      	mov	r9, r3
		message[2] =length;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007cf2:	4643      	mov	r3, r8
 8007cf4:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007cf6:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007cf8:	4ac6      	ldr	r2, [pc, #792]	; (8008014 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8007cfa:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007cfc:	7913      	ldrb	r3, [r2, #4]
 8007cfe:	7851      	ldrb	r1, [r2, #1]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	0089      	lsls	r1, r1, #2
 8007d06:	430b      	orrs	r3, r1
 8007d08:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007d0a:	22ff      	movs	r2, #255	; 0xff
 8007d0c:	455a      	cmp	r2, fp
 8007d0e:	4192      	sbcs	r2, r2
 8007d10:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d12:	0052      	lsls	r2, r2, #1
 8007d14:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8007d16:	465a      	mov	r2, fp
 8007d18:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4692      	mov	sl, r2
 8007d1e:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8007d24:	2aff      	cmp	r2, #255	; 0xff
 8007d26:	d903      	bls.n	8007d30 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007d28:	0a12      	lsrs	r2, r2, #8
 8007d2a:	71e2      	strb	r2, [r4, #7]
			++shift;
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007d30:	2e2e      	cmp	r6, #46	; 0x2e
 8007d32:	d800      	bhi.n	8007d36 <SendMessageFromPort.part.0+0xa2>
 8007d34:	e157      	b.n	8007fe6 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8007d36:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007d38:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 8007d3a:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 8007d3c:	4db6      	ldr	r5, [pc, #728]	; (8008018 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8007d42:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007d44:	2e2d      	cmp	r6, #45	; 0x2d
 8007d46:	d900      	bls.n	8007d4a <SendMessageFromPort.part.0+0xb6>
 8007d48:	e136      	b.n	8007fb8 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d4a:	237f      	movs	r3, #127	; 0x7f
 8007d4c:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d4e:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007d50:	4013      	ands	r3, r2
 8007d52:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007d54:	4653      	mov	r3, sl
 8007d56:	1dd8      	adds	r0, r3, #7
 8007d58:	4bb0      	ldr	r3, [pc, #704]	; (800801c <SendMessageFromPort.part.0+0x388>)
 8007d5a:	1820      	adds	r0, r4, r0
 8007d5c:	18c9      	adds	r1, r1, r3
 8007d5e:	0032      	movs	r2, r6
 8007d60:	f00a fad9 	bl	8012316 <memcpy>
					ptrShift =0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007d68:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 8007d6a:	4653      	mov	r3, sl
 8007d6c:	1d1d      	adds	r5, r3, #4
 8007d6e:	19ad      	adds	r5, r5, r6
 8007d70:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007d72:	4bab      	ldr	r3, [pc, #684]	; (8008020 <SendMessageFromPort.part.0+0x38c>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d03d      	beq.n	8007df6 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 8007d7a:	4baa      	ldr	r3, [pc, #680]	; (8008024 <SendMessageFromPort.part.0+0x390>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2bff      	cmp	r3, #255	; 0xff
 8007d80:	d100      	bne.n	8007d84 <SendMessageFromPort.part.0+0xf0>
 8007d82:	e106      	b.n	8007f92 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007d84:	4aa8      	ldr	r2, [pc, #672]	; (8008028 <SendMessageFromPort.part.0+0x394>)
 8007d86:	7817      	ldrb	r7, [r2, #0]
 8007d88:	2f00      	cmp	r7, #0
 8007d8a:	d100      	bne.n	8007d8e <SendMessageFromPort.part.0+0xfa>
 8007d8c:	e139      	b.n	8008002 <SendMessageFromPort.part.0+0x36e>
 8007d8e:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007d90:	0021      	movs	r1, r4
 8007d92:	409a      	lsls	r2, r3
 8007d94:	4451      	add	r1, sl
 8007d96:	4694      	mov	ip, r2
 8007d98:	9105      	str	r1, [sp, #20]
 8007d9a:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8007d9c:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007d9e:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007da0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007da2:	46ac      	mov	ip, r5
 8007da4:	000d      	movs	r5, r1
 8007da6:	48a1      	ldr	r0, [pc, #644]	; (800802c <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8007da8:	8801      	ldrh	r1, [r0, #0]
 8007daa:	420f      	tst	r7, r1
 8007dac:	d009      	beq.n	8007dc2 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 8007dae:	3201      	adds	r2, #1
 8007db0:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007db2:	1991      	adds	r1, r2, r6
 8007db4:	292c      	cmp	r1, #44	; 0x2c
 8007db6:	dd00      	ble.n	8007dba <SendMessageFromPort.part.0+0x126>
 8007db8:	e0fc      	b.n	8007fb4 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007dba:	9905      	ldr	r1, [sp, #20]
 8007dbc:	1889      	adds	r1, r1, r2
 8007dbe:	1989      	adds	r1, r1, r6
 8007dc0:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3002      	adds	r0, #2
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	d9ed      	bls.n	8007da8 <SendMessageFromPort.part.0+0x114>
 8007dcc:	4665      	mov	r5, ip
 8007dce:	0010      	movs	r0, r2
 8007dd0:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007dd2:	4653      	mov	r3, sl
 8007dd4:	3307      	adds	r3, #7
 8007dd6:	199e      	adds	r6, r3, r6
 8007dd8:	1836      	adds	r6, r6, r0
 8007dda:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007ddc:	292b      	cmp	r1, #43	; 0x2b
 8007dde:	dd00      	ble.n	8007de2 <SendMessageFromPort.part.0+0x14e>
 8007de0:	e0e8      	b.n	8007fb4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007de2:	4993      	ldr	r1, [pc, #588]	; (8008030 <SendMessageFromPort.part.0+0x39c>)
 8007de4:	3502      	adds	r5, #2
 8007de6:	780b      	ldrb	r3, [r1, #0]
 8007de8:	19a6      	adds	r6, r4, r6
 8007dea:	3301      	adds	r3, #1
 8007dec:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007dee:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007df0:	700b      	strb	r3, [r1, #0]
 8007df2:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007df4:	b2ed      	uxtb	r5, r5
 8007df6:	4647      	mov	r7, r8
 8007df8:	3702      	adds	r7, #2
 8007dfa:	b2ff      	uxtb	r7, r7
 8007dfc:	e012      	b.n	8007e24 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007dfe:	465b      	mov	r3, fp
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d000      	beq.n	8007e06 <SendMessageFromPort.part.0+0x172>
 8007e04:	e0af      	b.n	8007f66 <SendMessageFromPort.part.0+0x2d2>
 8007e06:	4647      	mov	r7, r8
 8007e08:	3702      	adds	r7, #2
 8007e0a:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8007e0c:	3e01      	subs	r6, #1
 8007e0e:	4b89      	ldr	r3, [pc, #548]	; (8008034 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e10:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8007e12:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007e14:	1b89      	subs	r1, r1, r6
 8007e16:	4e88      	ldr	r6, [pc, #544]	; (8008038 <SendMessageFromPort.part.0+0x3a4>)
 8007e18:	00c9      	lsls	r1, r1, #3
 8007e1a:	1989      	adds	r1, r1, r6
 8007e1c:	002a      	movs	r2, r5
 8007e1e:	4887      	ldr	r0, [pc, #540]	; (800803c <SendMessageFromPort.part.0+0x3a8>)
 8007e20:	f00a fa79 	bl	8012316 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007e24:	1ceb      	adds	r3, r5, #3
 8007e26:	469a      	mov	sl, r3
 8007e28:	4e85      	ldr	r6, [pc, #532]	; (8008040 <SendMessageFromPort.part.0+0x3ac>)
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	0021      	movs	r1, r4
 8007e2e:	0030      	movs	r0, r6
	message[2] =length;
 8007e30:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007e32:	f00a fa70 	bl	8012316 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e36:	b2ab      	uxth	r3, r5
 8007e38:	4651      	mov	r1, sl
 8007e3a:	0030      	movs	r0, r6
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f002 fce9 	bl	800a814 <CalculateCRC8>
 8007e42:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e44:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e46:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e48:	2100      	movs	r1, #0
 8007e4a:	0030      	movs	r0, r6
 8007e4c:	f00a fa6c 	bl	8012328 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e50:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007e52:	2f01      	cmp	r7, #1
 8007e54:	d94a      	bls.n	8007eec <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e56:	3b2c      	subs	r3, #44	; 0x2c
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d800      	bhi.n	8007e5e <SendMessageFromPort.part.0+0x1ca>
 8007e5c:	e08d      	b.n	8007f7a <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007e5e:	4b6d      	ldr	r3, [pc, #436]	; (8008014 <SendMessageFromPort.part.0+0x380>)
 8007e60:	4698      	mov	r8, r3
 8007e62:	88db      	ldrh	r3, [r3, #6]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d100      	bne.n	8007e6a <SendMessageFromPort.part.0+0x1d6>
 8007e68:	e08f      	b.n	8007f8a <SendMessageFromPort.part.0+0x2f6>
 8007e6a:	9e05      	ldr	r6, [sp, #20]
 8007e6c:	4f75      	ldr	r7, [pc, #468]	; (8008044 <SendMessageFromPort.part.0+0x3b0>)
 8007e6e:	4b76      	ldr	r3, [pc, #472]	; (8008048 <SendMessageFromPort.part.0+0x3b4>)
 8007e70:	3604      	adds	r6, #4
 8007e72:	46ba      	mov	sl, r7
 8007e74:	b2b6      	uxth	r6, r6
 8007e76:	2500      	movs	r5, #0
 8007e78:	4699      	mov	r9, r3
 8007e7a:	9f04      	ldr	r7, [sp, #16]
 8007e7c:	e005      	b.n	8007e8a <SendMessageFromPort.part.0+0x1f6>
 8007e7e:	4643      	mov	r3, r8
 8007e80:	3501      	adds	r5, #1
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	b2ed      	uxtb	r5, r5
 8007e86:	42ab      	cmp	r3, r5
 8007e88:	d91c      	bls.n	8007ec4 <SendMessageFromPort.part.0+0x230>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007e8a:	2332      	movs	r3, #50	; 0x32
 8007e8c:	0032      	movs	r2, r6
 8007e8e:	0021      	movs	r1, r4
 8007e90:	0038      	movs	r0, r7
 8007e92:	f7fa ff47 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007e96:	20c8      	movs	r0, #200	; 0xc8
 8007e98:	f005 f854 	bl	800cf44 <osDelay>
				if(ACK_FLAG == true)
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10f      	bne.n	8007ec4 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8007ea4:	4653      	mov	r3, sl
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0e8      	beq.n	8007e7e <SendMessageFromPort.part.0+0x1ea>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007eac:	2332      	movs	r3, #50	; 0x32
 8007eae:	0032      	movs	r2, r6
 8007eb0:	0021      	movs	r1, r4
 8007eb2:	0038      	movs	r0, r7
 8007eb4:	f7fa ff36 	bl	8002d24 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007eb8:	4643      	mov	r3, r8
 8007eba:	3501      	adds	r5, #1
 8007ebc:	88db      	ldrh	r3, [r3, #6]
 8007ebe:	b2ed      	uxtb	r5, r5
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	d8e2      	bhi.n	8007e8a <SendMessageFromPort.part.0+0x1f6>
 8007ec4:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	464a      	mov	r2, r9
 8007eca:	703b      	strb	r3, [r7, #0]
 8007ecc:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8007ece:	2000      	movs	r0, #0
 8007ed0:	9903      	ldr	r1, [sp, #12]
 8007ed2:	f005 fed7 	bl	800dc84 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8007ed6:	2202      	movs	r2, #2
	return result;
 8007ed8:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8007eda:	4b5c      	ldr	r3, [pc, #368]	; (800804c <SendMessageFromPort.part.0+0x3b8>)
 8007edc:	701a      	strb	r2, [r3, #0]
}
 8007ede:	b007      	add	sp, #28
 8007ee0:	bc3c      	pop	{r2, r3, r4, r5}
 8007ee2:	4690      	mov	r8, r2
 8007ee4:	4699      	mov	r9, r3
 8007ee6:	46a2      	mov	sl, r4
 8007ee8:	46ab      	mov	fp, r5
 8007eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d03e      	beq.n	8007f6e <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8007ef0:	4648      	mov	r0, r9
 8007ef2:	f7fb fd5b 	bl	80039ac <FindBroadcastRoutes>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4698      	mov	r8, r3
 8007efa:	4b45      	ldr	r3, [pc, #276]	; (8008010 <SendMessageFromPort.part.0+0x37c>)
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007efc:	9e05      	ldr	r6, [sp, #20]
 8007efe:	4699      	mov	r9, r3
 8007f00:	4b53      	ldr	r3, [pc, #332]	; (8008050 <SendMessageFromPort.part.0+0x3bc>)
 8007f02:	3604      	adds	r6, #4
 8007f04:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f06:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f08:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f0a:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f0c:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f0e:	2501      	movs	r5, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f10:	4646      	mov	r6, r8
 8007f12:	4698      	mov	r8, r3
 8007f14:	4f4b      	ldr	r7, [pc, #300]	; (8008044 <SendMessageFromPort.part.0+0x3b0>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f16:	464b      	mov	r3, r9
 8007f18:	465a      	mov	r2, fp
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	5ad3      	ldrh	r3, [r2, r3]
 8007f22:	4652      	mov	r2, sl
 8007f24:	4133      	asrs	r3, r6
 8007f26:	421a      	tst	r2, r3
 8007f28:	d10a      	bne.n	8007f40 <SendMessageFromPort.part.0+0x2ac>
			rejected_FLAG=false;
 8007f2a:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f2c:	3501      	adds	r5, #1
			Delay_us(10);
 8007f2e:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f30:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8007f32:	703b      	strb	r3, [r7, #0]
 8007f34:	3601      	adds	r6, #1
			Delay_us(10);
 8007f36:	f004 fc3f 	bl	800c7b8 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f3a:	2d06      	cmp	r5, #6
 8007f3c:	d1eb      	bne.n	8007f16 <SendMessageFromPort.part.0+0x282>
 8007f3e:	e7c6      	b.n	8007ece <SendMessageFromPort.part.0+0x23a>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f40:	2332      	movs	r3, #50	; 0x32
 8007f42:	4642      	mov	r2, r8
 8007f44:	0021      	movs	r1, r4
 8007f46:	0028      	movs	r0, r5
 8007f48:	f7fa feec 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007f4c:	20c8      	movs	r0, #200	; 0xc8
 8007f4e:	f004 fff9 	bl	800cf44 <osDelay>
				if(rejected_FLAG == true)
 8007f52:	783b      	ldrb	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0e8      	beq.n	8007f2a <SendMessageFromPort.part.0+0x296>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f58:	2332      	movs	r3, #50	; 0x32
 8007f5a:	4642      	mov	r2, r8
 8007f5c:	0021      	movs	r1, r4
 8007f5e:	9804      	ldr	r0, [sp, #16]
 8007f60:	f7fa fee0 	bl	8002d24 <Send_BOS_Message>
 8007f64:	e7e1      	b.n	8007f2a <SendMessageFromPort.part.0+0x296>
		if(src == 0)
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d000      	beq.n	8007f6c <SendMessageFromPort.part.0+0x2d8>
 8007f6a:	e6c0      	b.n	8007cee <SendMessageFromPort.part.0+0x5a>
 8007f6c:	e6bc      	b.n	8007ce8 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f6e:	464b      	mov	r3, r9
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1bd      	bne.n	8007ef0 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 8007f74:	7923      	ldrb	r3, [r4, #4]
 8007f76:	4699      	mov	r9, r3
 8007f78:	e7ba      	b.n	8007ef0 <SendMessageFromPort.part.0+0x25c>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f7a:	9a05      	ldr	r2, [sp, #20]
 8007f7c:	2332      	movs	r3, #50	; 0x32
 8007f7e:	3204      	adds	r2, #4
 8007f80:	b292      	uxth	r2, r2
 8007f82:	0021      	movs	r1, r4
 8007f84:	9804      	ldr	r0, [sp, #16]
 8007f86:	f7fa fecd 	bl	8002d24 <Send_BOS_Message>
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	; (8008048 <SendMessageFromPort.part.0+0x3b4>)
 8007f8c:	4f2d      	ldr	r7, [pc, #180]	; (8008044 <SendMessageFromPort.part.0+0x3b0>)
 8007f8e:	4699      	mov	r9, r3
 8007f90:	e799      	b.n	8007ec6 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007f92:	2e2c      	cmp	r6, #44	; 0x2c
 8007f94:	d80e      	bhi.n	8007fb4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8007f96:	4a26      	ldr	r2, [pc, #152]	; (8008030 <SendMessageFromPort.part.0+0x39c>)
 8007f98:	4647      	mov	r7, r8
 8007f9a:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8007f9c:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	7013      	strb	r3, [r2, #0]
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	18a2      	adds	r2, r4, r2
 8007fa8:	1996      	adds	r6, r2, r6
 8007faa:	3702      	adds	r7, #2
 8007fac:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 8007fae:	b2ed      	uxtb	r5, r5
 8007fb0:	b2ff      	uxtb	r7, r7
 8007fb2:	e737      	b.n	8007e24 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8007fb4:	2069      	movs	r0, #105	; 0x69
 8007fb6:	e792      	b.n	8007ede <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007fb8:	465b      	mov	r3, fp
 8007fba:	4642      	mov	r2, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	9700      	str	r7, [sp, #0]
 8007fc0:	9804      	ldr	r0, [sp, #16]
 8007fc2:	f7ff fe4b 	bl	8007c5c <SendMessageFromPort>
					osDelay(10);
 8007fc6:	200a      	movs	r0, #10
 8007fc8:	f004 ffbc 	bl	800cf44 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007fcc:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8007fce:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8007fd0:	3e2e      	subs	r6, #46	; 0x2e
 8007fd2:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8007fd4:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8007fd6:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8007fd8:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	d000      	beq.n	8007fe0 <SendMessageFromPort.part.0+0x34c>
 8007fde:	e6b1      	b.n	8007d44 <SendMessageFromPort.part.0+0xb0>
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	362e      	adds	r6, #46	; 0x2e
 8007fe4:	e6c5      	b.n	8007d72 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007fe6:	4653      	mov	r3, sl
 8007fe8:	1dd8      	adds	r0, r3, #7
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8007fec:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007fee:	8819      	ldrh	r1, [r3, #0]
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <SendMessageFromPort.part.0+0x388>)
 8007ff2:	1820      	adds	r0, r4, r0
 8007ff4:	18c9      	adds	r1, r1, r3
 8007ff6:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8007ff8:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ffa:	f00a f98c 	bl	8012316 <memcpy>
			length =numberOfParams + shift + 4;
 8007ffe:	b2ed      	uxtb	r5, r5
 8008000:	e6b7      	b.n	8007d72 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008002:	0031      	movs	r1, r6
 8008004:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8008006:	2200      	movs	r2, #0
 8008008:	e6e3      	b.n	8007dd2 <SendMessageFromPort.part.0+0x13e>
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	20000c58 	.word	0x20000c58
 8008010:	20000a98 	.word	0x20000a98
 8008014:	200067c4 	.word	0x200067c4
 8008018:	20001da4 	.word	0x20001da4
 800801c:	20000b3c 	.word	0x20000b3c
 8008020:	20001110 	.word	0x20001110
 8008024:	20000050 	.word	0x20000050
 8008028:	20000008 	.word	0x20000008
 800802c:	20000a9c 	.word	0x20000a9c
 8008030:	20000c48 	.word	0x20000c48
 8008034:	20000c50 	.word	0x20000c50
 8008038:	20000c90 	.word	0x20000c90
 800803c:	20000c5b 	.word	0x20000c5b
 8008040:	2000189c 	.word	0x2000189c
 8008044:	2000113c 	.word	0x2000113c
 8008048:	2000113d 	.word	0x2000113d
 800804c:	20000c3c 	.word	0x20000c3c
 8008050:	20000b6c 	.word	0x20000b6c

08008054 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8008054:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008056:	b500      	push	{lr}
	AddBcastPayload = false;
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800805a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800805c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800805e:	4b0b      	ldr	r3, [pc, #44]	; (800808c <BroadcastReceivedMessage+0x38>)
 8008060:	b289      	uxth	r1, r1
 8008062:	7018      	strb	r0, [r3, #0]
 8008064:	9100      	str	r1, [sp, #0]
 8008066:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 8008068:	28ff      	cmp	r0, #255	; 0xff
 800806a:	d007      	beq.n	800807c <BroadcastReceivedMessage+0x28>
 800806c:	22fe      	movs	r2, #254	; 0xfe
 800806e:	2100      	movs	r1, #0
 8008070:	2000      	movs	r0, #0
 8008072:	f7ff fe0f 	bl	8007c94 <SendMessageFromPort.part.0>
}
 8008076:	2000      	movs	r0, #0
 8008078:	b003      	add	sp, #12
 800807a:	bd00      	pop	{pc}
 800807c:	32ff      	adds	r2, #255	; 0xff
 800807e:	2100      	movs	r1, #0
 8008080:	2000      	movs	r0, #0
 8008082:	f7ff fe07 	bl	8007c94 <SendMessageFromPort.part.0>
 8008086:	e7f6      	b.n	8008076 <BroadcastReceivedMessage+0x22>
 8008088:	20001110 	.word	0x20001110
 800808c:	20000050 	.word	0x20000050

08008090 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008090:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 8008092:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008094:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8008096:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008098:	b083      	sub	sp, #12
	AddBcastPayload = true;
 800809a:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <BroadcastMessage+0x44>)
 800809e:	7019      	strb	r1, [r3, #0]
 80080a0:	9400      	str	r4, [sp, #0]
 80080a2:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80080a4:	29ff      	cmp	r1, #255	; 0xff
 80080a6:	d00c      	beq.n	80080c2 <BroadcastMessage+0x32>
 80080a8:	0001      	movs	r1, r0
 80080aa:	22fe      	movs	r2, #254	; 0xfe
 80080ac:	2000      	movs	r0, #0
 80080ae:	f7ff fdf1 	bl	8007c94 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80080b2:	0022      	movs	r2, r4
 80080b4:	2100      	movs	r1, #0
 80080b6:	4808      	ldr	r0, [pc, #32]	; (80080d8 <BroadcastMessage+0x48>)
 80080b8:	f00a f936 	bl	8012328 <memset>
}
 80080bc:	2000      	movs	r0, #0
 80080be:	b003      	add	sp, #12
 80080c0:	bd30      	pop	{r4, r5, pc}
 80080c2:	0001      	movs	r1, r0
 80080c4:	22ff      	movs	r2, #255	; 0xff
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7ff fde4 	bl	8007c94 <SendMessageFromPort.part.0>
 80080cc:	e7f1      	b.n	80080b2 <BroadcastMessage+0x22>
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	20001110 	.word	0x20001110
 80080d4:	20000050 	.word	0x20000050
 80080d8:	20000b3c 	.word	0x20000b3c

080080dc <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80080dc:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080de:	b530      	push	{r4, r5, lr}
 80080e0:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80080e2:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080e4:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080e6:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80080e8:	1e42      	subs	r2, r0, #1
 80080ea:	00d3      	lsls	r3, r2, #3
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <ForwardReceivedMessage+0x38>)
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <ForwardReceivedMessage+0x3c>)
 80080f6:	0021      	movs	r1, r4
 80080f8:	7818      	ldrb	r0, [r3, #0]
 80080fa:	f7fb fcff 	bl	8003afc <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80080fe:	9500      	str	r5, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	0022      	movs	r2, r4
 8008104:	2100      	movs	r1, #0
 8008106:	f7ff fda9 	bl	8007c5c <SendMessageFromPort>
}
 800810a:	2000      	movs	r0, #0
 800810c:	b003      	add	sp, #12
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	20001110 	.word	0x20001110
 8008114:	20000c90 	.word	0x20000c90
 8008118:	20000a98 	.word	0x20000a98

0800811c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800811c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811e:	4d0f      	ldr	r5, [pc, #60]	; (800815c <SendMessageToModule+0x40>)
 8008120:	0004      	movs	r4, r0
 8008122:	b083      	sub	sp, #12
 8008124:	000f      	movs	r7, r1
 8008126:	0016      	movs	r6, r2
 8008128:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 800812a:	2cff      	cmp	r4, #255	; 0xff
 800812c:	d010      	beq.n	8008150 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 800812e:	0021      	movs	r1, r4
 8008130:	f7fb fce4 	bl	8003afc <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008134:	7829      	ldrb	r1, [r5, #0]
 8008136:	0022      	movs	r2, r4
 8008138:	9600      	str	r6, [sp, #0]
 800813a:	003b      	movs	r3, r7
 800813c:	f7ff fd8e 	bl	8007c5c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008140:	0032      	movs	r2, r6
 8008142:	2100      	movs	r1, #0
 8008144:	4806      	ldr	r0, [pc, #24]	; (8008160 <SendMessageToModule+0x44>)
 8008146:	f00a f8ef 	bl	8012328 <memset>
}
 800814a:	2000      	movs	r0, #0
 800814c:	b003      	add	sp, #12
 800814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008150:	0013      	movs	r3, r2
 8008152:	000a      	movs	r2, r1
 8008154:	21ff      	movs	r1, #255	; 0xff
 8008156:	f7ff ff9b 	bl	8008090 <BroadcastMessage>
 800815a:	e7f6      	b.n	800814a <SendMessageToModule+0x2e>
 800815c:	20000a98 	.word	0x20000a98
 8008160:	20000b3c 	.word	0x20000b3c

08008164 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	4657      	mov	r7, sl
 8008168:	46de      	mov	lr, fp
 800816a:	464e      	mov	r6, r9
 800816c:	4645      	mov	r5, r8
 800816e:	b5e0      	push	{r5, r6, r7, lr}
 8008170:	b08f      	sub	sp, #60	; 0x3c
 8008172:	001e      	movs	r6, r3
 8008174:	ab18      	add	r3, sp, #96	; 0x60
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	4693      	mov	fp, r2
 800817a:	469a      	mov	sl, r3
 800817c:	ab1b      	add	r3, sp, #108	; 0x6c
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008182:	000f      	movs	r7, r1
 8008184:	0e19      	lsrs	r1, r3, #24
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	b2dc      	uxtb	r4, r3
 800818a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800818c:	4684      	mov	ip, r0
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	b2dd      	uxtb	r5, r3
 8008192:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008194:	900d      	str	r0, [sp, #52]	; 0x34
 8008196:	0e1b      	lsrs	r3, r3, #24
 8008198:	0018      	movs	r0, r3
 800819a:	930b      	str	r3, [sp, #44]	; 0x2c
 800819c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800819e:	9206      	str	r2, [sp, #24]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	9307      	str	r3, [sp, #28]
 80081a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80081a8:	9109      	str	r1, [sp, #36]	; 0x24
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80081b0:	4b47      	ldr	r3, [pc, #284]	; (80082d0 <StartScastDMAStream+0x16c>)
 80081b2:	940a      	str	r4, [sp, #40]	; 0x28
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	950c      	str	r5, [sp, #48]	; 0x30
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	d16d      	bne.n	8008298 <StartScastDMAStream+0x134>
 80081bc:	231a      	movs	r3, #26
 80081be:	4698      	mov	r8, r3
 80081c0:	4d44      	ldr	r5, [pc, #272]	; (80082d4 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081c2:	4c45      	ldr	r4, [pc, #276]	; (80082d8 <StartScastDMAStream+0x174>)
 80081c4:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 80081c6:	0031      	movs	r1, r6
 80081c8:	0038      	movs	r0, r7
 80081ca:	f7fb fc97 	bl	8003afc <FindRoute>
		if(route[i]){
 80081ce:	7868      	ldrb	r0, [r5, #1]
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d035      	beq.n	8008240 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 80081d4:	78a9      	ldrb	r1, [r5, #2]
 80081d6:	2900      	cmp	r1, #0
 80081d8:	d100      	bne.n	80081dc <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 80081da:	0039      	movs	r1, r7
 80081dc:	f7fb fc8e 	bl	8003afc <FindRoute>
			FindRoute(srcM,dstM);
 80081e0:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 80081e2:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 80081e4:	0038      	movs	r0, r7
 80081e6:	f7fb fc89 	bl	8003afc <FindRoute>
			if(route[i] == dstM){
 80081ea:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 80081ec:	465b      	mov	r3, fp
			if(route[i] == dstM){
 80081ee:	42b0      	cmp	r0, r6
 80081f0:	d003      	beq.n	80081fa <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 80081f2:	7829      	ldrb	r1, [r5, #0]
 80081f4:	f7fb fc82 	bl	8003afc <FindRoute>
 80081f8:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 80081fc:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081fe:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8008202:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008204:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8008208:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 800820a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 800820c:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 800820e:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8008210:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8008214:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008216:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008218:	9a07      	ldr	r2, [sp, #28]
 800821a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 800821c:	9a08      	ldr	r2, [sp, #32]
 800821e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8008220:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008222:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008224:	4652      	mov	r2, sl
 8008226:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008228:	464a      	mov	r2, r9
 800822a:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 800822c:	f7fb fc66 	bl	8003afc <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008230:	7868      	ldrb	r0, [r5, #1]
 8008232:	220c      	movs	r2, #12
 8008234:	211b      	movs	r1, #27
 8008236:	f7ff ff71 	bl	800811c <SendMessageToModule>
			osDelay(10);
 800823a:	200a      	movs	r0, #10
 800823c:	f004 fe82 	bl	800cf44 <osDelay>
 8008240:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8008242:	4545      	cmp	r5, r8
 8008244:	d1bf      	bne.n	80081c6 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8008246:	42b7      	cmp	r7, r6
 8008248:	d112      	bne.n	8008270 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800824a:	465b      	mov	r3, fp
 800824c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008254:	4650      	mov	r0, sl
 8008256:	f7ff fc11 	bl	8007a7c <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8008260:	2000      	movs	r0, #0
 8008262:	b00f      	add	sp, #60	; 0x3c
 8008264:	bc3c      	pop	{r2, r3, r4, r5}
 8008266:	4690      	mov	r8, r2
 8008268:	4699      	mov	r9, r3
 800826a:	46a2      	mov	sl, r4
 800826c:	46ab      	mov	fp, r5
 800826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8008270:	0031      	movs	r1, r6
 8008272:	0038      	movs	r0, r7
 8008274:	f7fb fc42 	bl	8003afc <FindRoute>
 8008278:	4683      	mov	fp, r0
 800827a:	e7e6      	b.n	800824a <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800827c:	2300      	movs	r3, #0
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	465b      	mov	r3, fp
 8008288:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800828e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008290:	4650      	mov	r0, sl
 8008292:	f7fb f957 	bl	8003544 <SaveEEstreams>
 8008296:	e7e3      	b.n	8008260 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008298:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <StartScastDMAStream+0x174>)
 800829a:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 800829c:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 800829e:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082a0:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082a2:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 80082a4:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082a6:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80082a8:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082aa:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 80082ac:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80082ae:	4651      	mov	r1, sl
 80082b0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80082b2:	4661      	mov	r1, ip
 80082b4:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 80082b6:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 80082b8:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 80082ba:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082bc:	220d      	movs	r2, #13
 80082be:	211c      	movs	r1, #28
 80082c0:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 80082c2:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80082c4:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 80082c6:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082c8:	f7ff ff28 	bl	800811c <SendMessageToModule>
		return result;
 80082cc:	e7c8      	b.n	8008260 <StartScastDMAStream+0xfc>
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	20000a98 	.word	0x20000a98
 80082d4:	2000690b 	.word	0x2000690b
 80082d8:	20000b3c 	.word	0x20000b3c

080082dc <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 80082dc:	4b4e      	ldr	r3, [pc, #312]	; (8008418 <BackEndTask+0x13c>)
 80082de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e0:	4657      	mov	r7, sl
 80082e2:	46de      	mov	lr, fp
 80082e4:	464e      	mov	r6, r9
 80082e6:	4645      	mov	r5, r8
 80082e8:	4699      	mov	r9, r3
 80082ea:	4b4c      	ldr	r3, [pc, #304]	; (800841c <BackEndTask+0x140>)
 80082ec:	b5e0      	push	{r5, r6, r7, lr}
 80082ee:	469b      	mov	fp, r3
 80082f0:	4b4b      	ldr	r3, [pc, #300]	; (8008420 <BackEndTask+0x144>)
 80082f2:	4f4c      	ldr	r7, [pc, #304]	; (8008424 <BackEndTask+0x148>)
 80082f4:	4698      	mov	r8, r3
 80082f6:	4b4c      	ldr	r3, [pc, #304]	; (8008428 <BackEndTask+0x14c>)
 80082f8:	b083      	sub	sp, #12
 80082fa:	469a      	mov	sl, r3


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80082fc:	464b      	mov	r3, r9
 80082fe:	4a4b      	ldr	r2, [pc, #300]	; (800842c <BackEndTask+0x150>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d054      	beq.n	80083b2 <BackEndTask+0xd6>
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008308:	4a49      	ldr	r2, [pc, #292]	; (8008430 <BackEndTask+0x154>)
			port_index = port_number - 1;
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 800830a:	2048      	movs	r0, #72	; 0x48
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800830c:	5cd3      	ldrb	r3, [r2, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800830e:	255a      	movs	r5, #90	; 0x5a
			port_index = port_number - 1;
 8008310:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008312:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008314:	465b      	mov	r3, fp
			port_index = port_number - 1;
 8008316:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008318:	5d19      	ldrb	r1, [r3, r4]
 800831a:	00a6      	lsls	r6, r4, #2
 800831c:	00cb      	lsls	r3, r1, #3
 800831e:	1a59      	subs	r1, r3, r1
 8008320:	1933      	adds	r3, r6, r4
 8008322:	00da      	lsls	r2, r3, #3
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	00c9      	lsls	r1, r1, #3
 8008328:	00d2      	lsls	r2, r2, #3
 800832a:	188b      	adds	r3, r1, r2
 800832c:	54f8      	strb	r0, [r7, r3]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800832e:	18f8      	adds	r0, r7, r3
 8008330:	7045      	strb	r5, [r0, #1]

			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008332:	7885      	ldrb	r5, [r0, #2]

			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 8008334:	4640      	mov	r0, r8
 8008336:	5cfb      	ldrb	r3, [r7, r3]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008338:	7085      	strb	r5, [r0, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800833a:	7003      	strb	r3, [r0, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 800833c:	235a      	movs	r3, #90	; 0x5a
 800833e:	7043      	strb	r3, [r0, #1]
			for(int i=0;i<length;i++)
 8008340:	2d00      	cmp	r5, #0
 8008342:	d00b      	beq.n	800835c <BackEndTask+0x80>
 8008344:	1cd3      	adds	r3, r2, #3
 8008346:	4642      	mov	r2, r8
 8008348:	185b      	adds	r3, r3, r1
 800834a:	3203      	adds	r2, #3
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	1950      	adds	r0, r2, r5
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008350:	7819      	ldrb	r1, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	7011      	strb	r1, [r2, #0]
 8008356:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 8008358:	4282      	cmp	r2, r0
 800835a:	d1f9      	bne.n	8008350 <BackEndTask+0x74>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 800835c:	1ce9      	adds	r1, r5, #3
 800835e:	4640      	mov	r0, r8
 8008360:	f002 fa58 	bl	800a814 <CalculateCRC8>
				length + 3);


			Message_counter++;
 8008364:	4653      	mov	r3, sl
 8008366:	4652      	mov	r2, sl
 8008368:	881b      	ldrh	r3, [r3, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800836a:	1936      	adds	r6, r6, r4
			Message_counter++;
 800836c:	3301      	adds	r3, #1
 800836e:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 8008370:	465b      	mov	r3, fp
 8008372:	5d1b      	ldrb	r3, [r3, r4]
 8008374:	00f2      	lsls	r2, r6, #3
 8008376:	00d9      	lsls	r1, r3, #3
 8008378:	1b92      	subs	r2, r2, r6
 800837a:	1ac9      	subs	r1, r1, r3
 800837c:	00c9      	lsls	r1, r1, #3
 800837e:	00d2      	lsls	r2, r2, #3
 8008380:	188e      	adds	r6, r1, r2
 8008382:	19be      	adds	r6, r7, r6
 8008384:	1976      	adds	r6, r6, r5
 8008386:	78f6      	ldrb	r6, [r6, #3]
 8008388:	4286      	cmp	r6, r0
 800838a:	d01d      	beq.n	80083c8 <BackEndTask+0xec>


			}
			else
			{
				Rejected_Messages++;
 800838c:	4652      	mov	r2, sl
 800838e:	4651      	mov	r1, sl
 8008390:	8892      	ldrh	r2, [r2, #4]
 8008392:	3201      	adds	r2, #1
 8008394:	808a      	strh	r2, [r1, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 8008396:	3301      	adds	r3, #1
 8008398:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 800839a:	2b05      	cmp	r3, #5
 800839c:	d010      	beq.n	80083c0 <BackEndTask+0xe4>
			MSG_Buffer_Index_Start[port_index]++;
 800839e:	465a      	mov	r2, fp
 80083a0:	5513      	strb	r3, [r2, r4]

			Process_Message_Buffer_Index_Start++;
 80083a2:	464b      	mov	r3, r9
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	3301      	adds	r3, #1
 80083a8:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d004      	beq.n	80083b8 <BackEndTask+0xdc>
			Process_Message_Buffer_Index_Start++;
 80083ae:	464a      	mov	r2, r9
 80083b0:	7013      	strb	r3, [r2, #0]
		}

		taskYIELD();
 80083b2:	f006 fb17 	bl	800e9e4 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80083b6:	e7a1      	b.n	80082fc <BackEndTask+0x20>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083b8:	464b      	mov	r3, r9
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e7f8      	b.n	80083b2 <BackEndTask+0xd6>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80083c0:	465b      	mov	r3, fp
 80083c2:	2200      	movs	r2, #0
 80083c4:	551a      	strb	r2, [r3, r4]
 80083c6:	e7ec      	b.n	80083a2 <BackEndTask+0xc6>
				Accepted_Messages++;
 80083c8:	4653      	mov	r3, sl
 80083ca:	4650      	mov	r0, sl
 80083cc:	885b      	ldrh	r3, [r3, #2]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80083ce:	00e6      	lsls	r6, r4, #3
				Accepted_Messages++;
 80083d0:	3301      	adds	r3, #1
 80083d2:	8043      	strh	r3, [r0, #2]
				messageLength[port_index] =length;
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <BackEndTask+0x158>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80083d6:	3203      	adds	r2, #3
				messageLength[port_index] =length;
 80083d8:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80083da:	1b36      	subs	r6, r6, r4
 80083dc:	4b16      	ldr	r3, [pc, #88]	; (8008438 <BackEndTask+0x15c>)
 80083de:	00f6      	lsls	r6, r6, #3
 80083e0:	1851      	adds	r1, r2, r1
 80083e2:	1998      	adds	r0, r3, r6
 80083e4:	002a      	movs	r2, r5
 80083e6:	1879      	adds	r1, r7, r1
 80083e8:	f009 ff95 	bl	8012316 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80083ec:	4b12      	ldr	r3, [pc, #72]	; (8008438 <BackEndTask+0x15c>)
 80083ee:	4a13      	ldr	r2, [pc, #76]	; (800843c <BackEndTask+0x160>)
 80083f0:	5d9b      	ldrb	r3, [r3, r6]
 80083f2:	7812      	ldrb	r2, [r2, #0]
					NotifyMessagingTask(port_number);
 80083f4:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d008      	beq.n	800840c <BackEndTask+0x130>
 80083fa:	3302      	adds	r3, #2
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d904      	bls.n	800840c <BackEndTask+0x130>
					ForwardReceivedMessage(port_number);
 8008402:	f7ff fe6b 	bl	80080dc <ForwardReceivedMessage>
 8008406:	465b      	mov	r3, fp
 8008408:	5d1b      	ldrb	r3, [r3, r4]
 800840a:	e7c4      	b.n	8008396 <BackEndTask+0xba>
					NotifyMessagingTask(port_number);
 800840c:	f7ff fc02 	bl	8007c14 <NotifyMessagingTask>
 8008410:	465b      	mov	r3, fp
 8008412:	5d1b      	ldrb	r3, [r3, r4]
 8008414:	e7bf      	b.n	8008396 <BackEndTask+0xba>
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	20001140 	.word	0x20001140
 800841c:	200016cc 	.word	0x200016cc
 8008420:	2000692c 	.word	0x2000692c
 8008424:	2000114c 	.word	0x2000114c
 8008428:	20001dac 	.word	0x20001dac
 800842c:	2000113f 	.word	0x2000113f
 8008430:	20001144 	.word	0x20001144
 8008434:	20000c50 	.word	0x20000c50
 8008438:	20000c90 	.word	0x20000c90
 800843c:	20000a98 	.word	0x20000a98

08008440 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008440:	2001      	movs	r0, #1
 8008442:	4770      	bx	lr

08008444 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	464e      	mov	r6, r9
 8008448:	46de      	mov	lr, fp
 800844a:	4645      	mov	r5, r8
 800844c:	4657      	mov	r7, sl
 800844e:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 8008450:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 8008452:	b099      	sub	sp, #100	; 0x64
	port =(int8_t )(unsigned )argument;
 8008454:	930d      	str	r3, [sp, #52]	; 0x34
 8008456:	23ff      	movs	r3, #255	; 0xff
 8008458:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 800845a:	1e5c      	subs	r4, r3, #1
 800845c:	930a      	str	r3, [sp, #40]	; 0x28
 800845e:	00e3      	lsls	r3, r4, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008460:	4ae3      	ldr	r2, [pc, #908]	; (80087f0 <PxMessagingTask+0x3ac>)
 8008462:	9306      	str	r3, [sp, #24]
 8008464:	1b1b      	subs	r3, r3, r4
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4693      	mov	fp, r2
 800846a:	001a      	movs	r2, r3
 800846c:	445a      	add	r2, fp
 800846e:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_StatusTypeDef status =HAL_OK;
 8008470:	2200      	movs	r2, #0
 8008472:	920f      	str	r2, [sp, #60]	; 0x3c
 8008474:	4adf      	ldr	r2, [pc, #892]	; (80087f4 <PxMessagingTask+0x3b0>)
 8008476:	930e      	str	r3, [sp, #56]	; 0x38
 8008478:	4691      	mov	r9, r2
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	3305      	adds	r3, #5
 800847e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008480:	4bdd      	ldr	r3, [pc, #884]	; (80087f8 <PxMessagingTask+0x3b4>)
	BOS_Status result =BOS_OK;
 8008482:	2600      	movs	r6, #0
 8008484:	4698      	mov	r8, r3
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008486:	2338      	movs	r3, #56	; 0x38
 8008488:	4363      	muls	r3, r4
 800848a:	9216      	str	r2, [sp, #88]	; 0x58
 800848c:	445b      	add	r3, fp
 800848e:	00a2      	lsls	r2, r4, #2
 8008490:	9210      	str	r2, [sp, #64]	; 0x40
 8008492:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008494:	2101      	movs	r1, #1
 8008496:	2001      	movs	r0, #1
 8008498:	4249      	negs	r1, r1
 800849a:	f006 f80b 	bl	800e4b4 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800849e:	464b      	mov	r3, r9
 80084a0:	5d1f      	ldrb	r7, [r3, r4]
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	d100      	bne.n	80084a8 <PxMessagingTask+0x64>
 80084a6:	e085      	b.n	80085b4 <PxMessagingTask+0x170>
			if(cMessage[port - 1][2] >> 7){
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	1b1b      	subs	r3, r3, r4
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	445b      	add	r3, fp
 80084b0:	7899      	ldrb	r1, [r3, #2]
 80084b2:	b24b      	sxtb	r3, r1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	da01      	bge.n	80084bc <PxMessagingTask+0x78>
 80084b8:	f000 fcc5 	bl	8008e46 <PxMessagingTask+0xa02>
				longMessage =0;
 80084bc:	2300      	movs	r3, #0
 80084be:	4acf      	ldr	r2, [pc, #828]	; (80087fc <PxMessagingTask+0x3b8>)
 80084c0:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 80084c2:	465a      	mov	r2, fp
 80084c4:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80084c6:	4fce      	ldr	r7, [pc, #824]	; (8008800 <PxMessagingTask+0x3bc>)
			dst =cMessage[port - 1][0];
 80084c8:	1b1b      	subs	r3, r3, r4
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 80084ce:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 80084d0:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 80084d2:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80084d4:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 80084d6:	4692      	mov	sl, r2
 80084d8:	2201      	movs	r2, #1
 80084da:	0015      	movs	r5, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80084dc:	0f80      	lsrs	r0, r0, #30
 80084de:	7078      	strb	r0, [r7, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 80084e0:	0908      	lsrs	r0, r1, #4
 80084e2:	400d      	ands	r5, r1
 80084e4:	4002      	ands	r2, r0
 80084e6:	46ac      	mov	ip, r5
 80084e8:	b2d0      	uxtb	r0, r2
 80084ea:	70fa      	strb	r2, [r7, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 80084ec:	2260      	movs	r2, #96	; 0x60
 80084ee:	4463      	add	r3, ip
 80084f0:	400a      	ands	r2, r1
 80084f2:	950c      	str	r5, [sp, #48]	; 0x30
 80084f4:	703a      	strb	r2, [r7, #0]
 80084f6:	002a      	movs	r2, r5
 80084f8:	78dd      	ldrb	r5, [r3, #3]
 80084fa:	9508      	str	r5, [sp, #32]
			if(extendCode == true){
 80084fc:	0789      	lsls	r1, r1, #30
 80084fe:	d507      	bpl.n	8008510 <PxMessagingTask+0xcc>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008500:	46ac      	mov	ip, r5
 8008502:	791b      	ldrb	r3, [r3, #4]
				++shift;
 8008504:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	4463      	add	r3, ip
 800850a:	b29b      	uxth	r3, r3
 800850c:	9308      	str	r3, [sp, #32]
				++shift;
 800850e:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 8008510:	2800      	cmp	r0, #0
 8008512:	d007      	beq.n	8008524 <PxMessagingTask+0xe0>
				BOSMessaging.Acknowledgment =false;
 8008514:	2300      	movs	r3, #0
 8008516:	4aba      	ldr	r2, [pc, #744]	; (8008800 <PxMessagingTask+0x3bc>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008518:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800851a:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800851c:	4650      	mov	r0, sl
 800851e:	2200      	movs	r2, #0
 8008520:	f7ff fdfc 	bl	800811c <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008524:	9a07      	ldr	r2, [sp, #28]
 8008526:	1e53      	subs	r3, r2, #1
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2bfc      	cmp	r3, #252	; 0xfc
 800852c:	d801      	bhi.n	8008532 <PxMessagingTask+0xee>
 800852e:	f000 fc6f 	bl	8008e10 <PxMessagingTask+0x9cc>
 8008532:	464b      	mov	r3, r9
 8008534:	5d1f      	ldrb	r7, [r3, r4]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	2bff      	cmp	r3, #255	; 0xff
 800853a:	d001      	beq.n	8008540 <PxMessagingTask+0xfc>
 800853c:	f000 fcb3 	bl	8008ea6 <PxMessagingTask+0xa62>
 8008540:	9b06      	ldr	r3, [sp, #24]
 8008542:	4ab0      	ldr	r2, [pc, #704]	; (8008804 <PxMessagingTask+0x3c0>)
 8008544:	1b1d      	subs	r5, r3, r4
 8008546:	00ed      	lsls	r5, r5, #3
 8008548:	445d      	add	r5, fp
 800854a:	19eb      	adds	r3, r5, r7
 800854c:	3b01      	subs	r3, #1
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 8008552:	2603      	movs	r6, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008554:	429a      	cmp	r2, r3
 8008556:	d02d      	beq.n	80085b4 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008558:	4aaa      	ldr	r2, [pc, #680]	; (8008804 <PxMessagingTask+0x3c0>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800855a:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800855c:	7193      	strb	r3, [r2, #6]
 800855e:	4aaa      	ldr	r2, [pc, #680]	; (8008808 <PxMessagingTask+0x3c4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008560:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008562:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008564:	f7ff fd76 	bl	8008054 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008568:	464b      	mov	r3, r9
 800856a:	5d1f      	ldrb	r7, [r3, r4]
 800856c:	2300      	movs	r3, #0
 800856e:	19ed      	adds	r5, r5, r7
 8008570:	3d01      	subs	r5, #1
 8008572:	702b      	strb	r3, [r5, #0]
				shift +=4;
 8008574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008576:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8008578:	1b7a      	subs	r2, r7, r5
 800857a:	b2d3      	uxtb	r3, r2
 800857c:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800857e:	9b08      	ldr	r3, [sp, #32]
 8008580:	2b2d      	cmp	r3, #45	; 0x2d
 8008582:	d901      	bls.n	8008588 <PxMessagingTask+0x144>
 8008584:	f000 fc77 	bl	8008e76 <PxMessagingTask+0xa32>
 8008588:	4aa0      	ldr	r2, [pc, #640]	; (800880c <PxMessagingTask+0x3c8>)
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	58d3      	ldr	r3, [r2, r3]
 800858e:	469f      	mov	pc, r3
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	1b1b      	subs	r3, r3, r4
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	445b      	add	r3, fp
 8008598:	5d5b      	ldrb	r3, [r3, r5]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <PxMessagingTask+0x15e>
 800859e:	f000 fd6b 	bl	8009078 <PxMessagingTask+0xc34>
								myID =cMessage[port - 1][1 + shift];
 80085a2:	9b05      	ldr	r3, [sp, #20]
 80085a4:	4a9a      	ldr	r2, [pc, #616]	; (8008810 <PxMessagingTask+0x3cc>)
 80085a6:	469c      	mov	ip, r3
 80085a8:	4465      	add	r5, ip
 80085aa:	786b      	ldrb	r3, [r5, #1]
 80085ac:	7013      	strb	r3, [r2, #0]
 80085ae:	464b      	mov	r3, r9
 80085b0:	2600      	movs	r6, #0
 80085b2:	5d1f      	ldrb	r7, [r3, r4]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80085b4:	003a      	movs	r2, r7
 80085b6:	2100      	movs	r1, #0
 80085b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ba:	f009 feb5 	bl	8012328 <memset>
		messageLength[port - 1] =0;
 80085be:	464b      	mov	r3, r9
 80085c0:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80085c2:	990a      	ldr	r1, [sp, #40]	; 0x28
		messageLength[port - 1] =0;
 80085c4:	551a      	strb	r2, [r3, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80085c6:	4b93      	ldr	r3, [pc, #588]	; (8008814 <PxMessagingTask+0x3d0>)
 80085c8:	5c5b      	ldrb	r3, [r3, r1]
 80085ca:	3b02      	subs	r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <PxMessagingTask+0x190>
			portStatus[port] =FREE;
 80085d0:	4b90      	ldr	r3, [pc, #576]	; (8008814 <PxMessagingTask+0x3d0>)
 80085d2:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80085d4:	f006 fa06 	bl	800e9e4 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80085d8:	e75c      	b.n	8008494 <PxMessagingTask+0x50>
 80085da:	2308      	movs	r3, #8
 80085dc:	469a      	mov	sl, r3
 80085de:	3301      	adds	r3, #1
 80085e0:	469c      	mov	ip, r3
 80085e2:	44ac      	add	ip, r5
 80085e4:	4663      	mov	r3, ip
 80085e6:	9308      	str	r3, [sp, #32]
 80085e8:	230a      	movs	r3, #10
 80085ea:	469c      	mov	ip, r3
 80085ec:	44ac      	add	ip, r5
 80085ee:	4663      	mov	r3, ip
 80085f0:	930c      	str	r3, [sp, #48]	; 0x30
 80085f2:	230b      	movs	r3, #11
 80085f4:	469c      	mov	ip, r3
 80085f6:	44ac      	add	ip, r5
 80085f8:	4663      	mov	r3, ip
 80085fa:	9307      	str	r3, [sp, #28]
 80085fc:	230c      	movs	r3, #12
 80085fe:	469c      	mov	ip, r3
 8008600:	9b06      	ldr	r3, [sp, #24]
 8008602:	1da8      	adds	r0, r5, #6
 8008604:	1b1b      	subs	r3, r3, r4
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	445b      	add	r3, fp
 800860a:	195a      	adds	r2, r3, r5
							switch(cMessage[port - 1][0 + shift]){
 800860c:	5d5b      	ldrb	r3, [r3, r5]
 800860e:	1def      	adds	r7, r5, #7
 8008610:	44aa      	add	sl, r5
 8008612:	44ac      	add	ip, r5
 8008614:	7852      	ldrb	r2, [r2, #1]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <PxMessagingTask+0x1da>
 800861a:	f000 fcff 	bl	800901c <PxMessagingTask+0xbd8>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <PxMessagingTask+0x1e2>
 8008622:	f000 fccd 	bl	8008fc0 <PxMessagingTask+0xb7c>
 8008626:	2b02      	cmp	r3, #2
 8008628:	d10c      	bne.n	8008644 <PxMessagingTask+0x200>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	1959      	adds	r1, r3, r5
 800862e:	788b      	ldrb	r3, [r1, #2]
 8008630:	78c8      	ldrb	r0, [r1, #3]
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	0400      	lsls	r0, r0, #16
 8008636:	181b      	adds	r3, r3, r0
 8008638:	189a      	adds	r2, r3, r2
 800863a:	790b      	ldrb	r3, [r1, #4]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	18d2      	adds	r2, r2, r3
 8008640:	4b75      	ldr	r3, [pc, #468]	; (8008818 <PxMessagingTask+0x3d4>)
 8008642:	625a      	str	r2, [r3, #36]	; 0x24
							ADCPort =cMessage[port - 1][shift];
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	4a74      	ldr	r2, [pc, #464]	; (8008818 <PxMessagingTask+0x3d4>)
 8008648:	1b1b      	subs	r3, r3, r4
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	445b      	add	r3, fp
 800864e:	5d58      	ldrb	r0, [r3, r5]
							ADCSide =cMessage[port - 1][shift + 1];
 8008650:	195b      	adds	r3, r3, r5
 8008652:	785b      	ldrb	r3, [r3, #1]
							ADCPort =cMessage[port - 1][shift];
 8008654:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 8008656:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <PxMessagingTask+0x21c>
 800865c:	f000 fc7c 	bl	8008f58 <PxMessagingTask+0xb14>
							else if(1 == ADCSide){
 8008660:	2b01      	cmp	r3, #1
 8008662:	d10a      	bne.n	800867a <PxMessagingTask+0x236>
								ADCSelectChannel(ADCPort,"bottom");
 8008664:	496d      	ldr	r1, [pc, #436]	; (800881c <PxMessagingTask+0x3d8>)
 8008666:	f003 f979 	bl	800b95c <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800866a:	4b6b      	ldr	r3, [pc, #428]	; (8008818 <PxMessagingTask+0x3d4>)
 800866c:	4a6a      	ldr	r2, [pc, #424]	; (8008818 <PxMessagingTask+0x3d4>)
 800866e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8008670:	3234      	adds	r2, #52	; 0x34
 8008672:	b2c0      	uxtb	r0, r0
 8008674:	4969      	ldr	r1, [pc, #420]	; (800881c <PxMessagingTask+0x3d8>)
 8008676:	f003 f9c1 	bl	800b9fc <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800867a:	4967      	ldr	r1, [pc, #412]	; (8008818 <PxMessagingTask+0x3d4>)
 800867c:	4866      	ldr	r0, [pc, #408]	; (8008818 <PxMessagingTask+0x3d4>)
 800867e:	3138      	adds	r1, #56	; 0x38
 8008680:	303c      	adds	r0, #60	; 0x3c
 8008682:	f002 ffa5 	bl	800b5d0 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8008686:	9b06      	ldr	r3, [sp, #24]
 8008688:	1b1e      	subs	r6, r3, r4
 800868a:	4b63      	ldr	r3, [pc, #396]	; (8008818 <PxMessagingTask+0x3d4>)
 800868c:	00f6      	lsls	r6, r6, #3
							GetReadPrecentage(ADCPort,&ADCPercentage);
 800868e:	0019      	movs	r1, r3
							ADCPort =cMessage[port - 1][shift];
 8008690:	445e      	add	r6, fp
 8008692:	5d70      	ldrb	r0, [r6, r5]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008694:	3140      	adds	r1, #64	; 0x40
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008696:	1975      	adds	r5, r6, r5
							ADCPort =cMessage[port - 1][shift];
 8008698:	8618      	strh	r0, [r3, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 800869a:	f003 f85f 	bl	800b75c <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800869e:	79ab      	ldrb	r3, [r5, #6]
 80086a0:	79ea      	ldrb	r2, [r5, #7]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	0412      	lsls	r2, r2, #16
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	796a      	ldrb	r2, [r5, #5]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80086aa:	2600      	movs	r6, #0
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80086ac:	189b      	adds	r3, r3, r2
 80086ae:	7a2a      	ldrb	r2, [r5, #8]
 80086b0:	0612      	lsls	r2, r2, #24
 80086b2:	189b      	adds	r3, r3, r2
 80086b4:	4a58      	ldr	r2, [pc, #352]	; (8008818 <PxMessagingTask+0x3d4>)
 80086b6:	6293      	str	r3, [r2, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80086b8:	7aab      	ldrb	r3, [r5, #10]
 80086ba:	7aea      	ldrb	r2, [r5, #11]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	0412      	lsls	r2, r2, #16
 80086c0:	189b      	adds	r3, r3, r2
 80086c2:	7a6a      	ldrb	r2, [r5, #9]
 80086c4:	189b      	adds	r3, r3, r2
 80086c6:	7b2a      	ldrb	r2, [r5, #12]
 80086c8:	0612      	lsls	r2, r2, #24
 80086ca:	189b      	adds	r3, r3, r2
 80086cc:	4a52      	ldr	r2, [pc, #328]	; (8008818 <PxMessagingTask+0x3d4>)
 80086ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086d0:	464b      	mov	r3, r9
 80086d2:	5d1f      	ldrb	r7, [r3, r4]
 80086d4:	e76e      	b.n	80085b4 <PxMessagingTask+0x170>
							rejected_FLAG =1;
 80086d6:	2301      	movs	r3, #1
 80086d8:	4a51      	ldr	r2, [pc, #324]	; (8008820 <PxMessagingTask+0x3dc>)
 80086da:	7013      	strb	r3, [r2, #0]
 80086dc:	e767      	b.n	80085ae <PxMessagingTask+0x16a>
							ACK_FLAG =1;
 80086de:	2301      	movs	r3, #1
 80086e0:	4a50      	ldr	r2, [pc, #320]	; (8008824 <PxMessagingTask+0x3e0>)
 80086e2:	2600      	movs	r6, #0
 80086e4:	7013      	strb	r3, [r2, #0]
 80086e6:	464b      	mov	r3, r9
 80086e8:	5d1f      	ldrb	r7, [r3, r4]
 80086ea:	e763      	b.n	80085b4 <PxMessagingTask+0x170>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 80086ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086f0:	469c      	mov	ip, r3
 80086f2:	9b06      	ldr	r3, [sp, #24]
 80086f4:	1c69      	adds	r1, r5, #1
 80086f6:	1b1b      	subs	r3, r3, r4
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	445b      	add	r3, fp
 80086fc:	5d58      	ldrb	r0, [r3, r5]
 80086fe:	230a      	movs	r3, #10
 8008700:	4461      	add	r1, ip
 8008702:	3a01      	subs	r2, #1
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	b292      	uxth	r2, r2
 8008708:	4459      	add	r1, fp
 800870a:	f004 fa81 	bl	800cc10 <writePxMutex>
 800870e:	464b      	mov	r3, r9
 8008710:	2600      	movs	r6, #0
 8008712:	5d1f      	ldrb	r7, [r3, r4]
 8008714:	e74e      	b.n	80085b4 <PxMessagingTask+0x170>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	1b1b      	subs	r3, r3, r4
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	445b      	add	r3, fp
 800871e:	5d5b      	ldrb	r3, [r3, r5]
 8008720:	4a41      	ldr	r2, [pc, #260]	; (8008828 <PxMessagingTask+0x3e4>)
 8008722:	2600      	movs	r6, #0
 8008724:	7013      	strb	r3, [r2, #0]
 8008726:	464b      	mov	r3, r9
 8008728:	5d1f      	ldrb	r7, [r3, r4]
 800872a:	e743      	b.n	80085b4 <PxMessagingTask+0x170>
							responseStatus =BOS_OK; // Initialize response
 800872c:	2300      	movs	r3, #0
 800872e:	4a3e      	ldr	r2, [pc, #248]	; (8008828 <PxMessagingTask+0x3e4>)
 8008730:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	1b1b      	subs	r3, r3, r4
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	445b      	add	r3, fp
 800873a:	5d5e      	ldrb	r6, [r3, r5]
 800873c:	2e00      	cmp	r6, #0
 800873e:	d101      	bne.n	8008744 <PxMessagingTask+0x300>
 8008740:	f000 ff52 	bl	80095e8 <PxMessagingTask+0x11a4>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008744:	2e1e      	cmp	r6, #30
 8008746:	d901      	bls.n	800874c <PxMessagingTask+0x308>
 8008748:	f000 ff4a 	bl	80095e0 <PxMessagingTask+0x119c>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800874c:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800874e:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8008750:	0592      	lsls	r2, r2, #22
 8008752:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008754:	1c6a      	adds	r2, r5, #1
 8008756:	5c8f      	ldrb	r7, [r1, r2]
 8008758:	9207      	str	r2, [sp, #28]
 800875a:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800875c:	3e01      	subs	r6, #1
 800875e:	4b33      	ldr	r3, [pc, #204]	; (800882c <PxMessagingTask+0x3e8>)
 8008760:	00b6      	lsls	r6, r6, #2
 8008762:	599b      	ldr	r3, [r3, r6]
 8008764:	0c18      	lsrs	r0, r3, #16
 8008766:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 8008768:	1e7a      	subs	r2, r7, #1
 800876a:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800876c:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800876e:	2a07      	cmp	r2, #7
 8008770:	d901      	bls.n	8008776 <PxMessagingTask+0x332>
 8008772:	f000 fdbb 	bl	80092ec <PxMessagingTask+0xea8>
 8008776:	492e      	ldr	r1, [pc, #184]	; (8008830 <PxMessagingTask+0x3ec>)
 8008778:	0092      	lsls	r2, r2, #2
 800877a:	588a      	ldr	r2, [r1, r2]
 800877c:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800877e:	2202      	movs	r2, #2
 8008780:	4252      	negs	r2, r2
 8008782:	17d3      	asrs	r3, r2, #31
 8008784:	4641      	mov	r1, r8
 8008786:	6808      	ldr	r0, [r1, #0]
 8008788:	6849      	ldr	r1, [r1, #4]
 800878a:	1812      	adds	r2, r2, r0
 800878c:	414b      	adcs	r3, r1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <PxMessagingTask+0x352>
 8008792:	f000 fcb5 	bl	8009100 <PxMessagingTask+0xcbc>
 8008796:	464b      	mov	r3, r9
 8008798:	5d1f      	ldrb	r7, [r3, r4]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800879a:	4b23      	ldr	r3, [pc, #140]	; (8008828 <PxMessagingTask+0x3e4>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b10      	cmp	r3, #16
 80087a0:	d101      	bne.n	80087a6 <PxMessagingTask+0x362>
 80087a2:	f000 fcaa 	bl	80090fa <PxMessagingTask+0xcb6>
								responseStatus =BOS_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	4a1f      	ldr	r2, [pc, #124]	; (8008828 <PxMessagingTask+0x3e4>)
 80087aa:	2600      	movs	r6, #0
 80087ac:	7013      	strb	r3, [r2, #0]
 80087ae:	e701      	b.n	80085b4 <PxMessagingTask+0x170>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80087b0:	9b06      	ldr	r3, [sp, #24]
 80087b2:	1b1b      	subs	r3, r3, r4
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	445b      	add	r3, fp
 80087b8:	5d5b      	ldrb	r3, [r3, r5]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <PxMessagingTask+0x37e>
 80087be:	f000 fd68 	bl	8009292 <PxMessagingTask+0xe4e>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80087c2:	9b05      	ldr	r3, [sp, #20]
 80087c4:	469c      	mov	ip, r3
 80087c6:	4465      	add	r5, ip
 80087c8:	78ab      	ldrb	r3, [r5, #2]
 80087ca:	78ea      	ldrb	r2, [r5, #3]
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	0412      	lsls	r2, r2, #16
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	796a      	ldrb	r2, [r5, #5]
 80087d4:	189b      	adds	r3, r3, r2
 80087d6:	792a      	ldrb	r2, [r5, #4]
 80087d8:	0212      	lsls	r2, r2, #8
 80087da:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 80087dc:	786a      	ldrb	r2, [r5, #1]
 80087de:	3a01      	subs	r2, #1
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	2a07      	cmp	r2, #7
 80087e4:	d900      	bls.n	80087e8 <PxMessagingTask+0x3a4>
 80087e6:	e6e2      	b.n	80085ae <PxMessagingTask+0x16a>
 80087e8:	4912      	ldr	r1, [pc, #72]	; (8008834 <PxMessagingTask+0x3f0>)
 80087ea:	0092      	lsls	r2, r2, #2
 80087ec:	588a      	ldr	r2, [r1, r2]
 80087ee:	4697      	mov	pc, r2
 80087f0:	20000c90 	.word	0x20000c90
 80087f4:	20000c50 	.word	0x20000c50
 80087f8:	20000c40 	.word	0x20000c40
 80087fc:	20000c4c 	.word	0x20000c4c
 8008800:	200067c4 	.word	0x200067c4
 8008804:	20001dac 	.word	0x20001dac
 8008808:	20000c48 	.word	0x20000c48
 800880c:	08016ee4 	.word	0x08016ee4
 8008810:	20000a98 	.word	0x20000a98
 8008814:	20000c2c 	.word	0x20000c2c
 8008818:	20001e2c 	.word	0x20001e2c
 800881c:	08017e34 	.word	0x08017e34
 8008820:	2000113c 	.word	0x2000113c
 8008824:	2000113d 	.word	0x2000113d
 8008828:	20000c3c 	.word	0x20000c3c
 800882c:	200067cc 	.word	0x200067cc
 8008830:	08016f9c 	.word	0x08016f9c
 8008834:	08016fbc 	.word	0x08016fbc
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008838:	9b06      	ldr	r3, [sp, #24]
 800883a:	49dd      	ldr	r1, [pc, #884]	; (8008bb0 <PxMessagingTask+0x76c>)
 800883c:	1b18      	subs	r0, r3, r4
 800883e:	00c0      	lsls	r0, r0, #3
 8008840:	7809      	ldrb	r1, [r1, #0]
 8008842:	4458      	add	r0, fp
 8008844:	1942      	adds	r2, r0, r5
 8008846:	468c      	mov	ip, r1
 8008848:	7a51      	ldrb	r1, [r2, #9]
 800884a:	7ad7      	ldrb	r7, [r2, #11]
 800884c:	468a      	mov	sl, r1
 800884e:	7b11      	ldrb	r1, [r2, #12]
 8008850:	7a93      	ldrb	r3, [r2, #10]
 8008852:	000e      	movs	r6, r1
 8008854:	1e71      	subs	r1, r6, #1
 8008856:	418e      	sbcs	r6, r1
 8008858:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800885a:	7916      	ldrb	r6, [r2, #4]
 800885c:	7951      	ldrb	r1, [r2, #5]
 800885e:	0636      	lsls	r6, r6, #24
 8008860:	0409      	lsls	r1, r1, #16
 8008862:	1871      	adds	r1, r6, r1
 8008864:	79d6      	ldrb	r6, [r2, #7]
 8008866:	1989      	adds	r1, r1, r6
 8008868:	7996      	ldrb	r6, [r2, #6]
 800886a:	0236      	lsls	r6, r6, #8
 800886c:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800886e:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008870:	5d41      	ldrb	r1, [r0, r5]
 8008872:	78d0      	ldrb	r0, [r2, #3]
 8008874:	0609      	lsls	r1, r1, #24
 8008876:	1809      	adds	r1, r1, r0
 8008878:	7850      	ldrb	r0, [r2, #1]
 800887a:	0400      	lsls	r0, r0, #16
 800887c:	1809      	adds	r1, r1, r0
 800887e:	7890      	ldrb	r0, [r2, #2]
 8008880:	0200      	lsls	r0, r0, #8
 8008882:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008884:	9101      	str	r1, [sp, #4]
 8008886:	7a12      	ldrb	r2, [r2, #8]
 8008888:	4661      	mov	r1, ip
 800888a:	9200      	str	r2, [sp, #0]
 800888c:	4650      	mov	r0, sl
 800888e:	003a      	movs	r2, r7
 8008890:	f7ff fc68 	bl	8008164 <StartScastDMAStream>
 8008894:	e68b      	b.n	80085ae <PxMessagingTask+0x16a>
							SaveToRO();
 8008896:	f001 f863 	bl	8009960 <SaveToRO>
							SaveEEportsDir();
 800889a:	f7fa fde7 	bl	800346c <SaveEEportsDir>
							indMode =IND_PING;
 800889e:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 80088a0:	4ac4      	ldr	r2, [pc, #784]	; (8008bb4 <PxMessagingTask+0x770>)
 80088a2:	2600      	movs	r6, #0
 80088a4:	7013      	strb	r3, [r2, #0]
 80088a6:	464b      	mov	r3, r9
 80088a8:	5d1f      	ldrb	r7, [r3, r4]
 80088aa:	e683      	b.n	80085b4 <PxMessagingTask+0x170>
							for(p =0; p < numOfParams; p++){
 80088ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01d      	beq.n	80088ee <PxMessagingTask+0x4aa>
 80088b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088b4:	4659      	mov	r1, fp
 80088b6:	46b4      	mov	ip, r6
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 80088b8:	4652      	mov	r2, sl
 80088ba:	1970      	adds	r0, r6, r5
 80088bc:	2680      	movs	r6, #128	; 0x80
 80088be:	3101      	adds	r1, #1
 80088c0:	4461      	add	r1, ip
 80088c2:	194d      	adds	r5, r1, r5
 80088c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088c6:	3a01      	subs	r2, #1
 80088c8:	4bbb      	ldr	r3, [pc, #748]	; (8008bb8 <PxMessagingTask+0x774>)
 80088ca:	0052      	lsls	r2, r2, #1
 80088cc:	3901      	subs	r1, #1
 80088ce:	b2c9      	uxtb	r1, r1
 80088d0:	5a9b      	ldrh	r3, [r3, r2]
 80088d2:	4458      	add	r0, fp
 80088d4:	186d      	adds	r5, r5, r1
 80088d6:	0236      	lsls	r6, r6, #8
 80088d8:	0037      	movs	r7, r6
 80088da:	7801      	ldrb	r1, [r0, #0]
 80088dc:	3001      	adds	r0, #1
 80088de:	3901      	subs	r1, #1
 80088e0:	410f      	asrs	r7, r1
 80088e2:	433b      	orrs	r3, r7
 80088e4:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 80088e6:	4285      	cmp	r5, r0
 80088e8:	d1f6      	bne.n	80088d8 <PxMessagingTask+0x494>
 80088ea:	49b3      	ldr	r1, [pc, #716]	; (8008bb8 <PxMessagingTask+0x774>)
 80088ec:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e716      	b.n	8008720 <PxMessagingTask+0x2dc>
							ReadPortsDirMSG(src);
 80088f2:	4650      	mov	r0, sl
 80088f4:	f004 fa50 	bl	800cd98 <ReadPortsDirMSG>
 80088f8:	464b      	mov	r3, r9
 80088fa:	2600      	movs	r6, #0
 80088fc:	5d1f      	ldrb	r7, [r3, r4]
 80088fe:	e659      	b.n	80085b4 <PxMessagingTask+0x170>
 8008900:	4bae      	ldr	r3, [pc, #696]	; (8008bbc <PxMessagingTask+0x778>)
 8008902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008904:	881e      	ldrh	r6, [r3, #0]
 8008906:	4bae      	ldr	r3, [pc, #696]	; (8008bc0 <PxMessagingTask+0x77c>)
 8008908:	4694      	mov	ip, r2
 800890a:	1998      	adds	r0, r3, r6
 800890c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800890e:	4466      	add	r6, ip
 8008910:	18e9      	adds	r1, r5, r3
 8008912:	464b      	mov	r3, r9
 8008914:	5d1f      	ldrb	r7, [r3, r4]
							if(longMessage){
 8008916:	4bab      	ldr	r3, [pc, #684]	; (8008bc4 <PxMessagingTask+0x780>)
 8008918:	b2b6      	uxth	r6, r6
 800891a:	781d      	ldrb	r5, [r3, #0]
 800891c:	4459      	add	r1, fp
 800891e:	2d00      	cmp	r5, #0
 8008920:	d101      	bne.n	8008926 <PxMessagingTask+0x4e2>
 8008922:	f000 fc67 	bl	80091f4 <PxMessagingTask+0xdb0>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008926:	f009 fcf6 	bl	8012316 <memcpy>
								longMessageLastPtr +=numOfParams;
 800892a:	4ba4      	ldr	r3, [pc, #656]	; (8008bbc <PxMessagingTask+0x778>)
 800892c:	801e      	strh	r6, [r3, #0]
 800892e:	2600      	movs	r6, #0
 8008930:	e640      	b.n	80085b4 <PxMessagingTask+0x170>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008932:	2601      	movs	r6, #1
 8008934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008936:	18ef      	adds	r7, r5, r3
 8008938:	445f      	add	r7, fp
								if(p != port)
 800893a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800893c:	42b3      	cmp	r3, r6
 800893e:	d005      	beq.n	800894c <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008940:	0030      	movs	r0, r6
 8008942:	f004 f9c9 	bl	800ccd8 <GetUart>
 8008946:	7839      	ldrb	r1, [r7, #0]
 8008948:	f004 f9d2 	bl	800ccf0 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800894c:	3601      	adds	r6, #1
 800894e:	b2f6      	uxtb	r6, r6
 8008950:	3701      	adds	r7, #1
 8008952:	2e06      	cmp	r6, #6
 8008954:	d1f1      	bne.n	800893a <PxMessagingTask+0x4f6>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008956:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008958:	f004 f9be 	bl	800ccd8 <GetUart>
 800895c:	9b06      	ldr	r3, [sp, #24]
 800895e:	2600      	movs	r6, #0
 8008960:	1b1b      	subs	r3, r3, r4
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	445b      	add	r3, fp
 8008966:	195d      	adds	r5, r3, r5
 8008968:	7aa9      	ldrb	r1, [r5, #10]
 800896a:	f004 f9c1 	bl	800ccf0 <SwapUartPins>
 800896e:	464b      	mov	r3, r9
 8008970:	5d1f      	ldrb	r7, [r3, r4]
 8008972:	e61f      	b.n	80085b4 <PxMessagingTask+0x170>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008974:	9b06      	ldr	r3, [sp, #24]
 8008976:	1b1b      	subs	r3, r3, r4
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	445b      	add	r3, fp
 800897c:	5d5f      	ldrb	r7, [r3, r5]
 800897e:	195b      	adds	r3, r3, r5
 8008980:	78da      	ldrb	r2, [r3, #3]
 8008982:	063f      	lsls	r7, r7, #24
 8008984:	18bf      	adds	r7, r7, r2
 8008986:	785a      	ldrb	r2, [r3, #1]
 8008988:	0412      	lsls	r2, r2, #16
 800898a:	18bf      	adds	r7, r7, r2
 800898c:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800898e:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008990:	0212      	lsls	r2, r2, #8
 8008992:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008994:	930b      	str	r3, [sp, #44]	; 0x2c
 8008996:	2bff      	cmp	r3, #255	; 0xff
 8008998:	d101      	bne.n	800899e <PxMessagingTask+0x55a>
 800899a:	f000 fc4c 	bl	8009236 <PxMessagingTask+0xdf2>
								for(p =0; p < numOfParams; p++){
 800899e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	d101      	bne.n	80089a8 <PxMessagingTask+0x564>
 80089a4:	f000 fc40 	bl	8009228 <PxMessagingTask+0xde4>
 80089a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089ac:	195e      	adds	r6, r3, r5
 80089ae:	465b      	mov	r3, fp
 80089b0:	468c      	mov	ip, r1
 80089b2:	3305      	adds	r3, #5
 80089b4:	4463      	add	r3, ip
 80089b6:	195d      	adds	r5, r3, r5
 80089b8:	0013      	movs	r3, r2
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	18ed      	adds	r5, r5, r3
									if(temp > 0 && temp <= NumOfPorts){
 80089c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c2:	445e      	add	r6, fp
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d90a      	bls.n	80089e2 <PxMessagingTask+0x59e>
								for(p =0; p < numOfParams; p++){
 80089cc:	42b5      	cmp	r5, r6
 80089ce:	d100      	bne.n	80089d2 <PxMessagingTask+0x58e>
 80089d0:	e5ed      	b.n	80085ae <PxMessagingTask+0x16a>
 80089d2:	7833      	ldrb	r3, [r6, #0]
 80089d4:	3601      	adds	r6, #1
 80089d6:	930b      	str	r3, [sp, #44]	; 0x2c
									if(temp > 0 && temp <= NumOfPorts){
 80089d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089da:	3b01      	subs	r3, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d8f4      	bhi.n	80089cc <PxMessagingTask+0x588>
										UpdateBaudrate(temp,temp32);
 80089e2:	0039      	movs	r1, r7
 80089e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80089e6:	f004 f965 	bl	800ccb4 <UpdateBaudrate>
 80089ea:	e7ef      	b.n	80089cc <PxMessagingTask+0x588>
							temp =numOfParams / 5;
 80089ec:	2105      	movs	r1, #5
 80089ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089f0:	f7f7 fbae 	bl	8000150 <__udivsi3>
 80089f4:	b2c2      	uxtb	r2, r0
 80089f6:	920b      	str	r2, [sp, #44]	; 0x2c
							for(uint8_t k =0; k < temp; k++){
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	d100      	bne.n	80089fe <PxMessagingTask+0x5ba>
 80089fc:	e777      	b.n	80088ee <PxMessagingTask+0x4aa>
 80089fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a00:	465b      	mov	r3, fp
 8008a02:	468c      	mov	ip, r1
 8008a04:	3305      	adds	r3, #5
 8008a06:	4463      	add	r3, ip
 8008a08:	194e      	adds	r6, r1, r5
 8008a0a:	195d      	adds	r5, r3, r5
 8008a0c:	1e53      	subs	r3, r2, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	009a      	lsls	r2, r3, #2
 8008a12:	18d3      	adds	r3, r2, r3
 8008a14:	445e      	add	r6, fp
 8008a16:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008a18:	4b6b      	ldr	r3, [pc, #428]	; (8008bc8 <PxMessagingTask+0x784>)
 8008a1a:	7830      	ldrb	r0, [r6, #0]
 8008a1c:	469c      	mov	ip, r3
 8008a1e:	3801      	subs	r0, #1
 8008a20:	0080      	lsls	r0, r0, #2
 8008a22:	1c71      	adds	r1, r6, #1
 8008a24:	4460      	add	r0, ip
 8008a26:	2204      	movs	r2, #4
 8008a28:	3605      	adds	r6, #5
 8008a2a:	f009 fc74 	bl	8012316 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008a2e:	42b5      	cmp	r5, r6
 8008a30:	d1f2      	bne.n	8008a18 <PxMessagingTask+0x5d4>
							responseStatus =BOS_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	e674      	b.n	8008720 <PxMessagingTask+0x2dc>
							ExploreNeighbors(port);
 8008a36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a38:	f7fa ff8c 	bl	8003954 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008a3c:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a3e:	2501      	movs	r5, #1
							temp =0;
 8008a40:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 8008a42:	4a5c      	ldr	r2, [pc, #368]	; (8008bb4 <PxMessagingTask+0x770>)
							osDelay(10);
 8008a44:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 8008a46:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008a48:	f004 fa7c 	bl	800cf44 <osDelay>
 8008a4c:	4e5f      	ldr	r6, [pc, #380]	; (8008bcc <PxMessagingTask+0x788>)
								if(neighbors[p - 1][0]){
 8008a4e:	8833      	ldrh	r3, [r6, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00a      	beq.n	8008a6a <PxMessagingTask+0x626>
									messageParams[temp] =p;
 8008a54:	4b5e      	ldr	r3, [pc, #376]	; (8008bd0 <PxMessagingTask+0x78c>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008a56:	1c78      	adds	r0, r7, #1
 8008a58:	469c      	mov	ip, r3
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	4460      	add	r0, ip
 8008a5e:	0031      	movs	r1, r6
									messageParams[temp] =p;
 8008a60:	55dd      	strb	r5, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008a62:	f009 fc58 	bl	8012316 <memcpy>
									temp +=5;
 8008a66:	3705      	adds	r7, #5
 8008a68:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	b2ed      	uxtb	r5, r5
 8008a6e:	3604      	adds	r6, #4
 8008a70:	2d06      	cmp	r5, #6
 8008a72:	d1ec      	bne.n	8008a4e <PxMessagingTask+0x60a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008a74:	210d      	movs	r1, #13
 8008a76:	970b      	str	r7, [sp, #44]	; 0x2c
 8008a78:	b2ba      	uxth	r2, r7
										SendMessageToModule(src,
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f7ff fb4e 	bl	800811c <SendMessageToModule>
 8008a80:	e595      	b.n	80085ae <PxMessagingTask+0x16a>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008a82:	4651      	mov	r1, sl
 8008a84:	9b06      	ldr	r3, [sp, #24]
 8008a86:	0209      	lsls	r1, r1, #8
 8008a88:	1b1b      	subs	r3, r3, r4
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	445b      	add	r3, fp
 8008a8e:	1958      	adds	r0, r3, r5
 8008a90:	7882      	ldrb	r2, [r0, #2]
 8008a92:	4e4e      	ldr	r6, [pc, #312]	; (8008bcc <PxMessagingTask+0x788>)
 8008a94:	1852      	adds	r2, r2, r1
 8008a96:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a98:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008a9a:	468c      	mov	ip, r1
 8008a9c:	0032      	movs	r2, r6
 8008a9e:	5d59      	ldrb	r1, [r3, r5]
 8008aa0:	7843      	ldrb	r3, [r0, #1]
 8008aa2:	0209      	lsls	r1, r1, #8
 8008aa4:	185b      	adds	r3, r3, r1
 8008aa6:	4462      	add	r2, ip
 8008aa8:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e638      	b.n	8008720 <PxMessagingTask+0x2dc>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008aae:	4651      	mov	r1, sl
 8008ab0:	9b06      	ldr	r3, [sp, #24]
 8008ab2:	0209      	lsls	r1, r1, #8
 8008ab4:	1b1b      	subs	r3, r3, r4
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	445b      	add	r3, fp
 8008aba:	1958      	adds	r0, r3, r5
 8008abc:	7882      	ldrb	r2, [r0, #2]
 8008abe:	4e43      	ldr	r6, [pc, #268]	; (8008bcc <PxMessagingTask+0x788>)
 8008ac0:	1852      	adds	r2, r2, r1
 8008ac2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ac4:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008ac6:	468c      	mov	ip, r1
 8008ac8:	0032      	movs	r2, r6
 8008aca:	5d59      	ldrb	r1, [r3, r5]
 8008acc:	7843      	ldrb	r3, [r0, #1]
 8008ace:	0209      	lsls	r1, r1, #8
 8008ad0:	4462      	add	r2, ip
 8008ad2:	185b      	adds	r3, r3, r1
 8008ad4:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 8008ad6:	4b3f      	ldr	r3, [pc, #252]	; (8008bd4 <PxMessagingTask+0x790>)
 8008ad8:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <PxMessagingTask+0x78c>)
 8008ada:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 8008adc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 8008ade:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 8008ae0:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008ae2:	0a1b      	lsrs	r3, r3, #8
 8008ae4:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008ae6:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008ae8:	f004 fa2c 	bl	800cf44 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008aec:	2303      	movs	r3, #3
 8008aee:	2200      	movs	r2, #0
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	2100      	movs	r1, #0
 8008af4:	3308      	adds	r3, #8
 8008af6:	0028      	movs	r0, r5
 8008af8:	f7ff f8b0 	bl	8007c5c <SendMessageFromPort>
 8008afc:	464b      	mov	r3, r9
 8008afe:	2600      	movs	r6, #0
 8008b00:	5d1f      	ldrb	r7, [r3, r4]
 8008b02:	e557      	b.n	80085b4 <PxMessagingTask+0x170>
							IND_toggle();
 8008b04:	2090      	movs	r0, #144	; 0x90
 8008b06:	2140      	movs	r1, #64	; 0x40
 8008b08:	05c0      	lsls	r0, r0, #23
 8008b0a:	f007 fd09 	bl	8010520 <HAL_GPIO_TogglePin>
 8008b0e:	464b      	mov	r3, r9
 8008b10:	2600      	movs	r6, #0
 8008b12:	5d1f      	ldrb	r7, [r3, r4]
 8008b14:	e54e      	b.n	80085b4 <PxMessagingTask+0x170>
							IND_OFF();
 8008b16:	2200      	movs	r2, #0
 8008b18:	2090      	movs	r0, #144	; 0x90
 8008b1a:	2140      	movs	r1, #64	; 0x40
 8008b1c:	05c0      	lsls	r0, r0, #23
 8008b1e:	f007 fcf9 	bl	8010514 <HAL_GPIO_WritePin>
 8008b22:	e544      	b.n	80085ae <PxMessagingTask+0x16a>
							IND_ON();
 8008b24:	2201      	movs	r2, #1
 8008b26:	e7f7      	b.n	8008b18 <PxMessagingTask+0x6d4>
							if(!moduleAlias[myID][0])
 8008b28:	4b21      	ldr	r3, [pc, #132]	; (8008bb0 <PxMessagingTask+0x76c>)
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	0093      	lsls	r3, r2, #2
 8008b2e:	189b      	adds	r3, r3, r2
 8008b30:	4a29      	ldr	r2, [pc, #164]	; (8008bd8 <PxMessagingTask+0x794>)
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	5cd3      	ldrb	r3, [r2, r3]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d000      	beq.n	8008b3c <PxMessagingTask+0x6f8>
 8008b3a:	e2d1      	b.n	80090e0 <PxMessagingTask+0xc9c>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008b3c:	4827      	ldr	r0, [pc, #156]	; (8008bdc <PxMessagingTask+0x798>)
 8008b3e:	4652      	mov	r2, sl
 8008b40:	3008      	adds	r0, #8
 8008b42:	4927      	ldr	r1, [pc, #156]	; (8008be0 <PxMessagingTask+0x79c>)
 8008b44:	f009 fdea 	bl	801271c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008b48:	4d24      	ldr	r5, [pc, #144]	; (8008bdc <PxMessagingTask+0x798>)
 8008b4a:	3508      	adds	r5, #8
 8008b4c:	0028      	movs	r0, r5
 8008b4e:	f7f7 fae3 	bl	8000118 <strlen>
 8008b52:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <PxMessagingTask+0x7a0>)
 8008b54:	b282      	uxth	r2, r0
 8008b56:	7818      	ldrb	r0, [r3, #0]
 8008b58:	2301      	movs	r3, #1
 8008b5a:	425b      	negs	r3, r3
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	0029      	movs	r1, r5
 8008b60:	3333      	adds	r3, #51	; 0x33
 8008b62:	f004 f855 	bl	800cc10 <writePxMutex>
							responseStatus =BOS_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e5da      	b.n	8008720 <PxMessagingTask+0x2dc>
							indMode =IND_PING;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4a11      	ldr	r2, [pc, #68]	; (8008bb4 <PxMessagingTask+0x770>)
							osDelay(10);
 8008b6e:	200a      	movs	r0, #10
							indMode =IND_PING;
 8008b70:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008b72:	f004 f9e7 	bl	800cf44 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008b76:	2240      	movs	r2, #64	; 0x40
 8008b78:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <PxMessagingTask+0x7a4>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	4393      	bics	r3, r2
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d000      	beq.n	8008b84 <PxMessagingTask+0x740>
 8008b82:	e514      	b.n	80085ae <PxMessagingTask+0x16a>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2102      	movs	r1, #2
 8008b88:	e777      	b.n	8008a7a <PxMessagingTask+0x636>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008b8a:	4b18      	ldr	r3, [pc, #96]	; (8008bec <PxMessagingTask+0x7a8>)
 8008b8c:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <PxMessagingTask+0x7ac>)
							osDelay(10);
 8008b8e:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008b90:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008b92:	2301      	movs	r3, #1
 8008b94:	4a07      	ldr	r2, [pc, #28]	; (8008bb4 <PxMessagingTask+0x770>)
 8008b96:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 8008b98:	f004 f9d4 	bl	800cf44 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <PxMessagingTask+0x7b0>)
 8008ba2:	4a15      	ldr	r2, [pc, #84]	; (8008bf8 <PxMessagingTask+0x7b4>)
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	e7fd      	b.n	8008baa <PxMessagingTask+0x766>
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	20000a98 	.word	0x20000a98
 8008bb4:	2000113e 	.word	0x2000113e
 8008bb8:	20006d44 	.word	0x20006d44
 8008bbc:	20000c4a 	.word	0x20000c4a
 8008bc0:	20001e70 	.word	0x20001e70
 8008bc4:	20000c4c 	.word	0x20000c4c
 8008bc8:	20001114 	.word	0x20001114
 8008bcc:	20001128 	.word	0x20001128
 8008bd0:	20000b3c 	.word	0x20000b3c
 8008bd4:	20000030 	.word	0x20000030
 8008bd8:	20000dc4 	.word	0x20000dc4
 8008bdc:	20001dac 	.word	0x20001dac
 8008be0:	0801893c 	.word	0x0801893c
 8008be4:	20000c28 	.word	0x20000c28
 8008be8:	200067c4 	.word	0x200067c4
 8008bec:	20007ff0 	.word	0x20007ff0
 8008bf0:	deadbeef 	.word	0xdeadbeef
 8008bf4:	e000ed00 	.word	0xe000ed00
 8008bf8:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008bfc:	230b      	movs	r3, #11
 8008bfe:	469c      	mov	ip, r3
 8008c00:	44ac      	add	ip, r5
 8008c02:	4662      	mov	r2, ip
 8008c04:	9b06      	ldr	r3, [sp, #24]
 8008c06:	9207      	str	r2, [sp, #28]
 8008c08:	1b1b      	subs	r3, r3, r4
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	445b      	add	r3, fp
 8008c0e:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 8008c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c12:	2a0f      	cmp	r2, #15
 8008c14:	d100      	bne.n	8008c18 <PxMessagingTask+0x7d4>
 8008c16:	e318      	b.n	800924a <PxMessagingTask+0xe06>
							if(numOfParams == 17)
 8008c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 8008c1a:	0019      	movs	r1, r3
							if(numOfParams == 17)
 8008c1c:	2a11      	cmp	r2, #17
 8008c1e:	d100      	bne.n	8008c22 <PxMessagingTask+0x7de>
 8008c20:	e317      	b.n	8009252 <PxMessagingTask+0xe0e>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c22:	9f06      	ldr	r7, [sp, #24]
 8008c24:	1caa      	adds	r2, r5, #2
 8008c26:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c28:	1b3a      	subs	r2, r7, r4
 8008c2a:	00d2      	lsls	r2, r2, #3
 8008c2c:	445a      	add	r2, fp
 8008c2e:	1ce8      	adds	r0, r5, #3
 8008c30:	5d57      	ldrb	r7, [r2, r5]
 8008c32:	9011      	str	r0, [sp, #68]	; 0x44
 8008c34:	5c10      	ldrb	r0, [r2, r0]
 8008c36:	1c6e      	adds	r6, r5, #1
 8008c38:	063f      	lsls	r7, r7, #24
 8008c3a:	183f      	adds	r7, r7, r0
 8008c3c:	5d90      	ldrb	r0, [r2, r6]
 8008c3e:	9608      	str	r6, [sp, #32]
 8008c40:	0400      	lsls	r0, r0, #16
 8008c42:	183f      	adds	r7, r7, r0
 8008c44:	1ca8      	adds	r0, r5, #2
 8008c46:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c48:	1d6e      	adds	r6, r5, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c4a:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c4c:	9613      	str	r6, [sp, #76]	; 0x4c
 8008c4e:	1dae      	adds	r6, r5, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c50:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c52:	9614      	str	r6, [sp, #80]	; 0x50
 8008c54:	1d28      	adds	r0, r5, #4
 8008c56:	1dee      	adds	r6, r5, #7
 8008c58:	9012      	str	r0, [sp, #72]	; 0x48
 8008c5a:	9615      	str	r6, [sp, #84]	; 0x54
 8008c5c:	5c16      	ldrb	r6, [r2, r0]
 8008c5e:	1d68      	adds	r0, r5, #5
 8008c60:	5c10      	ldrb	r0, [r2, r0]
 8008c62:	0636      	lsls	r6, r6, #24
 8008c64:	0400      	lsls	r0, r0, #16
 8008c66:	1836      	adds	r6, r6, r0
 8008c68:	1de8      	adds	r0, r5, #7
 8008c6a:	5c10      	ldrb	r0, [r2, r0]
 8008c6c:	1836      	adds	r6, r6, r0
 8008c6e:	1da8      	adds	r0, r5, #6
 8008c70:	5c10      	ldrb	r0, [r2, r0]
 8008c72:	0200      	lsls	r0, r0, #8
 8008c74:	1836      	adds	r6, r6, r0
 8008c76:	0028      	movs	r0, r5
 8008c78:	3009      	adds	r0, #9
							if(temp == false){
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d000      	beq.n	8008c80 <PxMessagingTask+0x83c>
 8008c7e:	e24f      	b.n	8009120 <PxMessagingTask+0xcdc>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008c80:	5c12      	ldrb	r2, [r2, r0]
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	d00e      	beq.n	8008ca4 <PxMessagingTask+0x860>
 8008c86:	9905      	ldr	r1, [sp, #20]
 8008c88:	1948      	adds	r0, r1, r5
 8008c8a:	7a81      	ldrb	r1, [r0, #10]
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d009      	beq.n	8008ca4 <PxMessagingTask+0x860>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008c90:	0013      	movs	r3, r2
 8008c92:	7a00      	ldrb	r0, [r0, #8]
 8008c94:	0032      	movs	r2, r6
 8008c96:	9100      	str	r1, [sp, #0]
 8008c98:	0039      	movs	r1, r7
 8008c9a:	f7fe feef 	bl	8007a7c <SetupDMAStreams>
 8008c9e:	9b05      	ldr	r3, [sp, #20]
 8008ca0:	9a07      	ldr	r2, [sp, #28]
 8008ca2:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <PxMessagingTask+0x87a>
 8008ca8:	9a05      	ldr	r2, [sp, #20]
 8008caa:	1951      	adds	r1, r2, r5
 8008cac:	7b0a      	ldrb	r2, [r1, #12]
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	d005      	beq.n	8008cbe <PxMessagingTask+0x87a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008cb2:	7a08      	ldrb	r0, [r1, #8]
 8008cb4:	9200      	str	r2, [sp, #0]
 8008cb6:	0039      	movs	r1, r7
 8008cb8:	0032      	movs	r2, r6
 8008cba:	f7fe fedf 	bl	8007a7c <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008cbe:	9b06      	ldr	r3, [sp, #24]
 8008cc0:	1b1b      	subs	r3, r3, r4
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	445b      	add	r3, fp
 8008cc6:	195b      	adds	r3, r3, r5
 8008cc8:	7b5b      	ldrb	r3, [r3, #13]
 8008cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d100      	bne.n	8008cd2 <PxMessagingTask+0x88e>
 8008cd0:	e46d      	b.n	80085ae <PxMessagingTask+0x16a>
 8008cd2:	9b05      	ldr	r3, [sp, #20]
 8008cd4:	469c      	mov	ip, r3
 8008cd6:	4465      	add	r5, ip
 8008cd8:	7bab      	ldrb	r3, [r5, #14]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d000      	beq.n	8008ce0 <PxMessagingTask+0x89c>
 8008cde:	e29c      	b.n	800921a <PxMessagingTask+0xdd6>
 8008ce0:	464a      	mov	r2, r9
 8008ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce4:	5d17      	ldrb	r7, [r2, r4]
 8008ce6:	001e      	movs	r6, r3
 8008ce8:	e464      	b.n	80085b4 <PxMessagingTask+0x170>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	2200      	movs	r2, #0
 8008cee:	1b1e      	subs	r6, r3, r4
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	00f6      	lsls	r6, r6, #3
 8008cf4:	445e      	add	r6, fp
 8008cf6:	5d70      	ldrb	r0, [r6, r5]
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	3319      	adds	r3, #25
 8008cfe:	f7fe ffad 	bl	8007c5c <SendMessageFromPort>
							osDelay(100);
 8008d02:	2064      	movs	r0, #100	; 0x64
 8008d04:	f004 f91e 	bl	800cf44 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008d08:	4ae8      	ldr	r2, [pc, #928]	; (80090ac <PxMessagingTask+0xc68>)
 8008d0a:	5d73      	ldrb	r3, [r6, r5]
 8008d0c:	7811      	ldrb	r1, [r2, #0]
 8008d0e:	4650      	mov	r0, sl
 8008d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d12:	f000 ff49 	bl	8009ba8 <remoteBootloaderUpdate>
 8008d16:	464b      	mov	r3, r9
 8008d18:	2600      	movs	r6, #0
 8008d1a:	5d1f      	ldrb	r7, [r3, r4]
 8008d1c:	e44a      	b.n	80085b4 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008d1e:	f004 fa19 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
 8008d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d24:	0006      	movs	r6, r0
 8008d26:	18e9      	adds	r1, r5, r3
							if(dst == BOS_BROADCAST)
 8008d28:	9b07      	ldr	r3, [sp, #28]
 8008d2a:	4459      	add	r1, fp
 8008d2c:	2bff      	cmp	r3, #255	; 0xff
 8008d2e:	d100      	bne.n	8008d32 <PxMessagingTask+0x8ee>
 8008d30:	e13f      	b.n	8008fb2 <PxMessagingTask+0xb6e>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d32:	48df      	ldr	r0, [pc, #892]	; (80090b0 <PxMessagingTask+0xc6c>)
							else if(dst == BOS_MULTICAST)
 8008d34:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008d36:	3058      	adds	r0, #88	; 0x58
							else if(dst == BOS_MULTICAST)
 8008d38:	2bfe      	cmp	r3, #254	; 0xfe
 8008d3a:	d100      	bne.n	8008d3e <PxMessagingTask+0x8fa>
 8008d3c:	e132      	b.n	8008fa4 <PxMessagingTask+0xb60>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d40:	f009 fae9 	bl	8012316 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d44:	4fda      	ldr	r7, [pc, #872]	; (80090b0 <PxMessagingTask+0xc6c>)
 8008d46:	3758      	adds	r7, #88	; 0x58
 8008d48:	e001      	b.n	8008d4e <PxMessagingTask+0x90a>
							} while(xReturned != pdFALSE);
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	d028      	beq.n	8008da0 <PxMessagingTask+0x95c>
								PcPort =port;
 8008d4e:	4ad9      	ldr	r2, [pc, #868]	; (80090b4 <PxMessagingTask+0xc70>)
 8008d50:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 8008d52:	4bd8      	ldr	r3, [pc, #864]	; (80090b4 <PxMessagingTask+0xc70>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d54:	0038      	movs	r0, r7
								temp =PcPort;
 8008d56:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 8008d58:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d5a:	2299      	movs	r2, #153	; 0x99
 8008d5c:	0031      	movs	r1, r6
 8008d5e:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 8008d60:	930b      	str	r3, [sp, #44]	; 0x2c
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d62:	f004 f97f 	bl	800d064 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 8008d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d68:	4ad2      	ldr	r2, [pc, #840]	; (80090b4 <PxMessagingTask+0xc70>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008d6a:	0005      	movs	r5, r0
								PcPort =temp;
 8008d6c:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008d6e:	4bd2      	ldr	r3, [pc, #840]	; (80090b8 <PxMessagingTask+0xc74>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b60      	cmp	r3, #96	; 0x60
 8008d74:	d1e9      	bne.n	8008d4a <PxMessagingTask+0x906>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008d76:	0030      	movs	r0, r6
 8008d78:	f7f7 f9ce 	bl	8000118 <strlen>
 8008d7c:	0031      	movs	r1, r6
 8008d7e:	0002      	movs	r2, r0
 8008d80:	48ce      	ldr	r0, [pc, #824]	; (80090bc <PxMessagingTask+0xc78>)
 8008d82:	f009 fac8 	bl	8012316 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008d86:	0030      	movs	r0, r6
 8008d88:	f7f7 f9c6 	bl	8000118 <strlen>
 8008d8c:	2118      	movs	r1, #24
 8008d8e:	b282      	uxth	r2, r0
 8008d90:	4650      	mov	r0, sl
 8008d92:	f7ff f9c3 	bl	800811c <SendMessageToModule>
									osDelay(10);
 8008d96:	200a      	movs	r0, #10
 8008d98:	f004 f8d4 	bl	800cf44 <osDelay>
							} while(xReturned != pdFALSE);
 8008d9c:	2d00      	cmp	r5, #0
 8008d9e:	d1d6      	bne.n	8008d4e <PxMessagingTask+0x90a>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008da0:	48c3      	ldr	r0, [pc, #780]	; (80090b0 <PxMessagingTask+0xc6c>)
 8008da2:	2232      	movs	r2, #50	; 0x32
 8008da4:	3058      	adds	r0, #88	; 0x58
 8008da6:	2100      	movs	r1, #0
 8008da8:	f009 fabe 	bl	8012328 <memset>
 8008dac:	464b      	mov	r3, r9
 8008dae:	2600      	movs	r6, #0
 8008db0:	5d1f      	ldrb	r7, [r3, r4]
 8008db2:	f7ff fbff 	bl	80085b4 <PxMessagingTask+0x170>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008db6:	f004 f9cd 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
 8008dba:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008dbc:	f7f7 f9ac 	bl	8000118 <strlen>
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	0002      	movs	r2, r0
 8008dc4:	0030      	movs	r0, r6
 8008dc6:	f009 faaf 	bl	8012328 <memset>
 8008dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dcc:	18e9      	adds	r1, r5, r3
							if(longMessage){
 8008dce:	4bbc      	ldr	r3, [pc, #752]	; (80090c0 <PxMessagingTask+0xc7c>)
 8008dd0:	4459      	add	r1, fp
 8008dd2:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008dd4:	4bbb      	ldr	r3, [pc, #748]	; (80090c4 <PxMessagingTask+0xc80>)
 8008dd6:	8818      	ldrh	r0, [r3, #0]
 8008dd8:	1830      	adds	r0, r6, r0
							if(longMessage){
 8008dda:	2f00      	cmp	r7, #0
 8008ddc:	d100      	bne.n	8008de0 <PxMessagingTask+0x99c>
 8008dde:	e0ce      	b.n	8008f7e <PxMessagingTask+0xb3a>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 8008de2:	2600      	movs	r6, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008de4:	002a      	movs	r2, r5
 8008de6:	f009 fa96 	bl	8012316 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008dea:	46ac      	mov	ip, r5
 8008dec:	4bb5      	ldr	r3, [pc, #724]	; (80090c4 <PxMessagingTask+0xc80>)
 8008dee:	881a      	ldrh	r2, [r3, #0]
 8008df0:	4bb4      	ldr	r3, [pc, #720]	; (80090c4 <PxMessagingTask+0xc80>)
 8008df2:	4462      	add	r2, ip
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	464b      	mov	r3, r9
 8008df8:	5d1f      	ldrb	r7, [r3, r4]
 8008dfa:	f7ff fbdb 	bl	80085b4 <PxMessagingTask+0x170>
							ClearEEportsDir();
 8008dfe:	f7fa fc2d 	bl	800365c <ClearEEportsDir>
							ClearROtopology();
 8008e02:	f000 fea5 	bl	8009b50 <ClearROtopology>
							osDelay(100);
 8008e06:	2064      	movs	r0, #100	; 0x64
 8008e08:	f004 f89c 	bl	800cf44 <osDelay>
							indMode =IND_TOPOLOGY;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e547      	b.n	80088a0 <PxMessagingTask+0x45c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e10:	4ba6      	ldr	r3, [pc, #664]	; (80090ac <PxMessagingTask+0xc68>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d01e      	beq.n	8008e56 <PxMessagingTask+0xa12>
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d019      	beq.n	8008e50 <PxMessagingTask+0xa0c>
				ForwardReceivedMessage(port);
 8008e1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e1e:	f7ff f95d 	bl	80080dc <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008e22:	4ba5      	ldr	r3, [pc, #660]	; (80090b8 <PxMessagingTask+0xc74>)
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <PxMessagingTask+0x9ec>
					indMode =IND_SHORT_BLINK;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	4aa6      	ldr	r2, [pc, #664]	; (80090c8 <PxMessagingTask+0xc84>)
 8008e2e:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008e30:	9b08      	ldr	r3, [sp, #32]
 8008e32:	2b19      	cmp	r3, #25
 8008e34:	d07c      	beq.n	8008f30 <PxMessagingTask+0xaec>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008e36:	9b08      	ldr	r3, [sp, #32]
 8008e38:	2b1a      	cmp	r3, #26
 8008e3a:	d100      	bne.n	8008e3e <PxMessagingTask+0x9fa>
 8008e3c:	e082      	b.n	8008f44 <PxMessagingTask+0xb00>
 8008e3e:	464b      	mov	r3, r9
 8008e40:	5d1f      	ldrb	r7, [r3, r4]
 8008e42:	f7ff fbb7 	bl	80085b4 <PxMessagingTask+0x170>
				longMessage =1;
 8008e46:	2301      	movs	r3, #1
 8008e48:	4a9d      	ldr	r2, [pc, #628]	; (80090c0 <PxMessagingTask+0xc7c>)
 8008e4a:	7013      	strb	r3, [r2, #0]
 8008e4c:	f7ff fb39 	bl	80084c2 <PxMessagingTask+0x7e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008e50:	9b08      	ldr	r3, [sp, #32]
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d1e2      	bne.n	8008e1c <PxMessagingTask+0x9d8>
 8008e56:	464b      	mov	r3, r9
 8008e58:	5d1f      	ldrb	r7, [r3, r4]
				if(result == BOS_OK){
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	d001      	beq.n	8008e62 <PxMessagingTask+0xa1e>
 8008e5e:	f7ff fba9 	bl	80085b4 <PxMessagingTask+0x170>
				shift +=4;
 8008e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e64:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 8008e66:	1b7a      	subs	r2, r7, r5
 8008e68:	b2d3      	uxtb	r3, r2
 8008e6a:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 8008e6c:	9b08      	ldr	r3, [sp, #32]
 8008e6e:	2b2d      	cmp	r3, #45	; 0x2d
 8008e70:	d801      	bhi.n	8008e76 <PxMessagingTask+0xa32>
 8008e72:	f7ff fb89 	bl	8008588 <PxMessagingTask+0x144>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8008e76:	9500      	str	r5, [sp, #0]
 8008e78:	9b07      	ldr	r3, [sp, #28]
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e7e:	9808      	ldr	r0, [sp, #32]
 8008e80:	f7ff fade 	bl	8008440 <User_MessagingParser>
 8008e84:	0006      	movs	r6, r0
							if(result == BOS_ERR_UnknownMessage){
 8008e86:	2801      	cmp	r0, #1
 8008e88:	d1d9      	bne.n	8008e3e <PxMessagingTask+0x9fa>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e8e:	9500      	str	r5, [sp, #0]
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	9808      	ldr	r0, [sp, #32]
 8008e94:	f000 fef8 	bl	8009c88 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008e98:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008e9a:	0006      	movs	r6, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008e9c:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 8008e9e:	2801      	cmp	r0, #1
 8008ea0:	d100      	bne.n	8008ea4 <PxMessagingTask+0xa60>
 8008ea2:	e5ea      	b.n	8008a7a <PxMessagingTask+0x636>
 8008ea4:	e7cb      	b.n	8008e3e <PxMessagingTask+0x9fa>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ea6:	9b07      	ldr	r3, [sp, #28]
 8008ea8:	2bfe      	cmp	r3, #254	; 0xfe
 8008eaa:	d1d6      	bne.n	8008e5a <PxMessagingTask+0xa16>
 8008eac:	9b06      	ldr	r3, [sp, #24]
 8008eae:	4a80      	ldr	r2, [pc, #512]	; (80090b0 <PxMessagingTask+0xc6c>)
 8008eb0:	1b1d      	subs	r5, r3, r4
 8008eb2:	00ed      	lsls	r5, r5, #3
 8008eb4:	445d      	add	r5, fp
 8008eb6:	19eb      	adds	r3, r5, r7
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	7992      	ldrb	r2, [r2, #6]
					result =BOS_ERR_MSG_Reflection;
 8008ebe:	2603      	movs	r6, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d101      	bne.n	8008ec8 <PxMessagingTask+0xa84>
 8008ec4:	f7ff fb76 	bl	80085b4 <PxMessagingTask+0x170>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ec8:	4a79      	ldr	r2, [pc, #484]	; (80090b0 <PxMessagingTask+0xc6c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008eca:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ecc:	7193      	strb	r3, [r2, #6]
 8008ece:	4a7f      	ldr	r2, [pc, #508]	; (80090cc <PxMessagingTask+0xc88>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ed0:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008ed2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ed4:	f7ff f8be 	bl	8008054 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008ed8:	464b      	mov	r3, r9
 8008eda:	2200      	movs	r2, #0
 8008edc:	5d1f      	ldrb	r7, [r3, r4]
 8008ede:	19eb      	adds	r3, r5, r7
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008ee4:	1eb8      	subs	r0, r7, #2
 8008ee6:	5c2e      	ldrb	r6, [r5, r0]
 8008ee8:	960b      	str	r6, [sp, #44]	; 0x2c
					for(i =0; i < temp; i++){
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d01d      	beq.n	8008f2a <PxMessagingTask+0xae6>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008eee:	4b6f      	ldr	r3, [pc, #444]	; (80090ac <PxMessagingTask+0xc68>)
 8008ef0:	1b80      	subs	r0, r0, r6
 8008ef2:	7819      	ldrb	r1, [r3, #0]
 8008ef4:	5c2b      	ldrb	r3, [r5, r0]
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	d101      	bne.n	8008efe <PxMessagingTask+0xaba>
 8008efa:	f7ff fb3b 	bl	8008574 <PxMessagingTask+0x130>
 8008efe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f00:	465a      	mov	r2, fp
 8008f02:	46ac      	mov	ip, r5
 8008f04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f06:	3201      	adds	r2, #1
 8008f08:	1e75      	subs	r5, r6, #1
 8008f0a:	4462      	add	r2, ip
 8008f0c:	b2ed      	uxtb	r5, r5
 8008f0e:	181b      	adds	r3, r3, r0
 8008f10:	1952      	adds	r2, r2, r5
 8008f12:	445b      	add	r3, fp
 8008f14:	1812      	adds	r2, r2, r0
 8008f16:	e006      	b.n	8008f26 <PxMessagingTask+0xae2>
 8008f18:	3301      	adds	r3, #1
 8008f1a:	1e58      	subs	r0, r3, #1
 8008f1c:	7800      	ldrb	r0, [r0, #0]
 8008f1e:	4288      	cmp	r0, r1
 8008f20:	d101      	bne.n	8008f26 <PxMessagingTask+0xae2>
 8008f22:	f7ff fb27 	bl	8008574 <PxMessagingTask+0x130>
					for(i =0; i < temp; i++){
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d1f6      	bne.n	8008f18 <PxMessagingTask+0xad4>
					result =BOS_ERR_WrongID;
 8008f2a:	2666      	movs	r6, #102	; 0x66
 8008f2c:	f7ff fb42 	bl	80085b4 <PxMessagingTask+0x170>
					Delay_ms(100);
 8008f30:	2064      	movs	r0, #100	; 0x64
 8008f32:	f005 fea3 	bl	800ec7c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008f36:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f3a:	9907      	ldr	r1, [sp, #28]
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	f000 fe33 	bl	8009ba8 <remoteBootloaderUpdate>
 8008f42:	e77c      	b.n	8008e3e <PxMessagingTask+0x9fa>
					Delay_ms(100);
 8008f44:	2064      	movs	r0, #100	; 0x64
 8008f46:	f005 fe99 	bl	800ec7c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008f4a:	9b06      	ldr	r3, [sp, #24]
 8008f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f4e:	1b1b      	subs	r3, r3, r4
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	445b      	add	r3, fp
 8008f54:	5c9b      	ldrb	r3, [r3, r2]
 8008f56:	e7ef      	b.n	8008f38 <PxMessagingTask+0xaf4>
								ADCSelectChannel(ADCPort,"top");
 8008f58:	495d      	ldr	r1, [pc, #372]	; (80090d0 <PxMessagingTask+0xc8c>)
 8008f5a:	f002 fcff 	bl	800b95c <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8008f5e:	4b5d      	ldr	r3, [pc, #372]	; (80090d4 <PxMessagingTask+0xc90>)
 8008f60:	4a5c      	ldr	r2, [pc, #368]	; (80090d4 <PxMessagingTask+0xc90>)
 8008f62:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8008f64:	3234      	adds	r2, #52	; 0x34
 8008f66:	b2c0      	uxtb	r0, r0
 8008f68:	4959      	ldr	r1, [pc, #356]	; (80090d0 <PxMessagingTask+0xc8c>)
 8008f6a:	f002 fd47 	bl	800b9fc <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8008f6e:	4959      	ldr	r1, [pc, #356]	; (80090d4 <PxMessagingTask+0xc90>)
 8008f70:	4858      	ldr	r0, [pc, #352]	; (80090d4 <PxMessagingTask+0xc90>)
 8008f72:	3138      	adds	r1, #56	; 0x38
 8008f74:	303c      	adds	r0, #60	; 0x3c
 8008f76:	f002 fb2b 	bl	800b5d0 <ReadTempAndVref>
 8008f7a:	f7ff fb84 	bl	8008686 <PxMessagingTask+0x242>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f80:	f009 f9c9 	bl	8012316 <memcpy>
								longMessageLastPtr =0;
 8008f84:	4b4f      	ldr	r3, [pc, #316]	; (80090c4 <PxMessagingTask+0xc80>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008f86:	4854      	ldr	r0, [pc, #336]	; (80090d8 <PxMessagingTask+0xc94>)
								longMessageLastPtr =0;
 8008f88:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 8008f8a:	4b54      	ldr	r3, [pc, #336]	; (80090dc <PxMessagingTask+0xc98>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008f8c:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 8008f8e:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008f90:	2300      	movs	r3, #0
 8008f92:	001a      	movs	r2, r3
 8008f94:	0019      	movs	r1, r3
 8008f96:	f005 facd 	bl	800e534 <xTaskGenericNotify>
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	5d1f      	ldrb	r7, [r3, r4]
 8008fa0:	f7ff fb08 	bl	80085b4 <PxMessagingTask+0x170>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fa8:	1a9a      	subs	r2, r3, r2
 8008faa:	3a02      	subs	r2, #2
 8008fac:	f009 f9b3 	bl	8012316 <memcpy>
 8008fb0:	e6c8      	b.n	8008d44 <PxMessagingTask+0x900>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fb4:	483e      	ldr	r0, [pc, #248]	; (80090b0 <PxMessagingTask+0xc6c>)
 8008fb6:	3a01      	subs	r2, #1
 8008fb8:	3058      	adds	r0, #88	; 0x58
 8008fba:	f009 f9ac 	bl	8012316 <memcpy>
 8008fbe:	e6c1      	b.n	8008d44 <PxMessagingTask+0x900>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008fc0:	9905      	ldr	r1, [sp, #20]
 8008fc2:	1949      	adds	r1, r1, r5
 8008fc4:	788b      	ldrb	r3, [r1, #2]
 8008fc6:	78ce      	ldrb	r6, [r1, #3]
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	0436      	lsls	r6, r6, #16
 8008fcc:	199b      	adds	r3, r3, r6
 8008fce:	189b      	adds	r3, r3, r2
 8008fd0:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008fd2:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8008fd4:	0612      	lsls	r2, r2, #24
 8008fd6:	189b      	adds	r3, r3, r2
 8008fd8:	4a3e      	ldr	r2, [pc, #248]	; (80090d4 <PxMessagingTask+0xc90>)
 8008fda:	60d3      	str	r3, [r2, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8008fdc:	5c0b      	ldrb	r3, [r1, r0]
 8008fde:	5dca      	ldrb	r2, [r1, r7]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	0412      	lsls	r2, r2, #16
 8008fe4:	189b      	adds	r3, r3, r2
 8008fe6:	1d6a      	adds	r2, r5, #5
 8008fe8:	5c8a      	ldrb	r2, [r1, r2]
 8008fea:	189b      	adds	r3, r3, r2
 8008fec:	4652      	mov	r2, sl
 8008fee:	5c8a      	ldrb	r2, [r1, r2]
 8008ff0:	0612      	lsls	r2, r2, #24
 8008ff2:	189b      	adds	r3, r3, r2
 8008ff4:	4a37      	ldr	r2, [pc, #220]	; (80090d4 <PxMessagingTask+0xc90>)
 8008ff6:	6113      	str	r3, [r2, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffa:	9a07      	ldr	r2, [sp, #28]
 8008ffc:	5ccb      	ldrb	r3, [r1, r3]
 8008ffe:	5c8a      	ldrb	r2, [r1, r2]
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	0412      	lsls	r2, r2, #16
 8009004:	189b      	adds	r3, r3, r2
 8009006:	9a08      	ldr	r2, [sp, #32]
 8009008:	5c8a      	ldrb	r2, [r1, r2]
 800900a:	189b      	adds	r3, r3, r2
 800900c:	4662      	mov	r2, ip
 800900e:	5c8a      	ldrb	r2, [r1, r2]
 8009010:	0612      	lsls	r2, r2, #24
 8009012:	189b      	adds	r3, r3, r2
 8009014:	4a2f      	ldr	r2, [pc, #188]	; (80090d4 <PxMessagingTask+0xc90>)
 8009016:	6153      	str	r3, [r2, #20]
									break;
 8009018:	f7ff fb14 	bl	8008644 <PxMessagingTask+0x200>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800901c:	9905      	ldr	r1, [sp, #20]
 800901e:	1949      	adds	r1, r1, r5
 8009020:	788b      	ldrb	r3, [r1, #2]
 8009022:	78ce      	ldrb	r6, [r1, #3]
 8009024:	021b      	lsls	r3, r3, #8
 8009026:	0436      	lsls	r6, r6, #16
 8009028:	199b      	adds	r3, r3, r6
 800902a:	189b      	adds	r3, r3, r2
 800902c:	790a      	ldrb	r2, [r1, #4]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800902e:	9905      	ldr	r1, [sp, #20]
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009030:	0612      	lsls	r2, r2, #24
 8009032:	189b      	adds	r3, r3, r2
 8009034:	4a27      	ldr	r2, [pc, #156]	; (80090d4 <PxMessagingTask+0xc90>)
 8009036:	6193      	str	r3, [r2, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009038:	5c0b      	ldrb	r3, [r1, r0]
 800903a:	5dca      	ldrb	r2, [r1, r7]
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	0412      	lsls	r2, r2, #16
 8009040:	189b      	adds	r3, r3, r2
 8009042:	1d6a      	adds	r2, r5, #5
 8009044:	5c8a      	ldrb	r2, [r1, r2]
 8009046:	189b      	adds	r3, r3, r2
 8009048:	4652      	mov	r2, sl
 800904a:	5c8a      	ldrb	r2, [r1, r2]
 800904c:	0612      	lsls	r2, r2, #24
 800904e:	189b      	adds	r3, r3, r2
 8009050:	4a20      	ldr	r2, [pc, #128]	; (80090d4 <PxMessagingTask+0xc90>)
 8009052:	61d3      	str	r3, [r2, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009056:	9a07      	ldr	r2, [sp, #28]
 8009058:	5ccb      	ldrb	r3, [r1, r3]
 800905a:	5c8a      	ldrb	r2, [r1, r2]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	0412      	lsls	r2, r2, #16
 8009060:	189b      	adds	r3, r3, r2
 8009062:	9a08      	ldr	r2, [sp, #32]
 8009064:	5c8a      	ldrb	r2, [r1, r2]
 8009066:	189b      	adds	r3, r3, r2
 8009068:	4662      	mov	r2, ip
 800906a:	5c8a      	ldrb	r2, [r1, r2]
 800906c:	0612      	lsls	r2, r2, #24
 800906e:	189b      	adds	r3, r3, r2
 8009070:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <PxMessagingTask+0xc90>)
 8009072:	6213      	str	r3, [r2, #32]
									break;
 8009074:	f7ff fae6 	bl	8008644 <PxMessagingTask+0x200>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8009078:	2b01      	cmp	r3, #1
 800907a:	d001      	beq.n	8009080 <PxMessagingTask+0xc3c>
 800907c:	f7ff fa97 	bl	80085ae <PxMessagingTask+0x16a>
								messageParams[0] =0; /* change own ID */
 8009080:	2600      	movs	r6, #0
 8009082:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <PxMessagingTask+0xc78>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009084:	4a0d      	ldr	r2, [pc, #52]	; (80090bc <PxMessagingTask+0xc78>)
								messageParams[0] =0; /* change own ID */
 8009086:	701e      	strb	r6, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009088:	9b05      	ldr	r3, [sp, #20]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800908a:	0031      	movs	r1, r6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800908c:	469c      	mov	ip, r3
 800908e:	4465      	add	r5, ip
 8009090:	786b      	ldrb	r3, [r5, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009092:	78a8      	ldrb	r0, [r5, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009094:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009096:	2303      	movs	r3, #3
 8009098:	0032      	movs	r2, r6
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	330d      	adds	r3, #13
 800909e:	f7fe fddd 	bl	8007c5c <SendMessageFromPort>
 80090a2:	464b      	mov	r3, r9
 80090a4:	5d1f      	ldrb	r7, [r3, r4]
 80090a6:	f7ff fa85 	bl	80085b4 <PxMessagingTask+0x170>
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	20000a98 	.word	0x20000a98
 80090b0:	20001dac 	.word	0x20001dac
 80090b4:	20000c28 	.word	0x20000c28
 80090b8:	200067c4 	.word	0x200067c4
 80090bc:	20000b3c 	.word	0x20000b3c
 80090c0:	20000c4c 	.word	0x20000c4c
 80090c4:	20000c4a 	.word	0x20000c4a
 80090c8:	2000113e 	.word	0x2000113e
 80090cc:	20000c48 	.word	0x20000c48
 80090d0:	08017e30 	.word	0x08017e30
 80090d4:	20001e2c 	.word	0x20001e2c
 80090d8:	20001ca8 	.word	0x20001ca8
 80090dc:	20000c3c 	.word	0x20000c3c
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 80090e0:	4652      	mov	r2, sl
 80090e2:	230a      	movs	r3, #10
 80090e4:	4353      	muls	r3, r2
 80090e6:	4adf      	ldr	r2, [pc, #892]	; (8009464 <PxMessagingTask+0x1020>)
 80090e8:	48df      	ldr	r0, [pc, #892]	; (8009468 <PxMessagingTask+0x1024>)
 80090ea:	4694      	mov	ip, r2
 80090ec:	49df      	ldr	r1, [pc, #892]	; (800946c <PxMessagingTask+0x1028>)
 80090ee:	4463      	add	r3, ip
 80090f0:	4652      	mov	r2, sl
 80090f2:	3008      	adds	r0, #8
 80090f4:	f009 fb12 	bl	801271c <sprintf>
 80090f8:	e526      	b.n	8008b48 <PxMessagingTask+0x704>
 80090fa:	2600      	movs	r6, #0
 80090fc:	f7ff fa5a 	bl	80085b4 <PxMessagingTask+0x170>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009100:	2a01      	cmp	r2, #1
 8009102:	d901      	bls.n	8009108 <PxMessagingTask+0xcc4>
 8009104:	f7ff fb47 	bl	8008796 <PxMessagingTask+0x352>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009108:	9b05      	ldr	r3, [sp, #20]
 800910a:	4ad9      	ldr	r2, [pc, #868]	; (8009470 <PxMessagingTask+0x102c>)
 800910c:	5d5b      	ldrb	r3, [r3, r5]
 800910e:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009110:	2b08      	cmp	r3, #8
 8009112:	d901      	bls.n	8009118 <PxMessagingTask+0xcd4>
 8009114:	f7ff fb3f 	bl	8008796 <PxMessagingTask+0x352>
 8009118:	4ad6      	ldr	r2, [pc, #856]	; (8009474 <PxMessagingTask+0x1030>)
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	58d3      	ldr	r3, [r2, r3]
 800911e:	469f      	mov	pc, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009120:	2338      	movs	r3, #56	; 0x38
 8009122:	46aa      	mov	sl, r5
 8009124:	435c      	muls	r4, r3
 8009126:	445c      	add	r4, fp
 8009128:	1965      	adds	r5, r4, r5
 800912a:	0007      	movs	r7, r0
 800912c:	7a29      	ldrb	r1, [r5, #8]
 800912e:	20e4      	movs	r0, #228	; 0xe4
 8009130:	f001 fc48 	bl	800a9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009134:	4653      	mov	r3, sl
 8009136:	9a08      	ldr	r2, [sp, #32]
 8009138:	5ce3      	ldrb	r3, [r4, r3]
 800913a:	5ca1      	ldrb	r1, [r4, r2]
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	18c9      	adds	r1, r1, r3
 8009140:	b289      	uxth	r1, r1
 8009142:	20e5      	movs	r0, #229	; 0xe5
 8009144:	f001 fc3e 	bl	800a9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800914c:	5ce3      	ldrb	r3, [r4, r3]
 800914e:	5ca1      	ldrb	r1, [r4, r2]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	18c9      	adds	r1, r1, r3
 8009154:	b289      	uxth	r1, r1
 8009156:	20e6      	movs	r0, #230	; 0xe6
 8009158:	f001 fc34 	bl	800a9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800915c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800915e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009160:	5ce3      	ldrb	r3, [r4, r3]
 8009162:	5ca1      	ldrb	r1, [r4, r2]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	18c9      	adds	r1, r1, r3
 8009168:	b289      	uxth	r1, r1
 800916a:	20e7      	movs	r0, #231	; 0xe7
 800916c:	f001 fc2a 	bl	800a9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8009170:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009172:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009174:	5ce3      	ldrb	r3, [r4, r3]
 8009176:	5ca1      	ldrb	r1, [r4, r2]
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	18c9      	adds	r1, r1, r3
 800917c:	b289      	uxth	r1, r1
 800917e:	20e8      	movs	r0, #232	; 0xe8
 8009180:	f001 fc20 	bl	800a9c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8009184:	5de3      	ldrb	r3, [r4, r7]
 8009186:	7aa9      	ldrb	r1, [r5, #10]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	18c9      	adds	r1, r1, r3
 800918c:	b289      	uxth	r1, r1
 800918e:	20e9      	movs	r0, #233	; 0xe9
 8009190:	f001 fc18 	bl	800a9c4 <EE_WriteVariable>
								if(numOfParams == 19)
 8009194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009196:	2b13      	cmp	r3, #19
 8009198:	d013      	beq.n	80091c2 <PxMessagingTask+0xd7e>
								if(numOfParams == 21)
 800919a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800919c:	2b15      	cmp	r3, #21
 800919e:	d107      	bne.n	80091b0 <PxMessagingTask+0xd6c>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80091a0:	7b6b      	ldrb	r3, [r5, #13]
 80091a2:	7ba9      	ldrb	r1, [r5, #14]
 80091a4:	021b      	lsls	r3, r3, #8
 80091a6:	18c9      	adds	r1, r1, r3
 80091a8:	b289      	uxth	r1, r1
 80091aa:	20eb      	movs	r0, #235	; 0xeb
 80091ac:	f001 fc0a 	bl	800a9c4 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	4bb0      	ldr	r3, [pc, #704]	; (8009478 <PxMessagingTask+0x1034>)
 80091b6:	4ab1      	ldr	r2, [pc, #708]	; (800947c <PxMessagingTask+0x1038>)
 80091b8:	60da      	str	r2, [r3, #12]
 80091ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	e7fd      	b.n	80091be <PxMessagingTask+0xd7a>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	7b29      	ldrb	r1, [r5, #12]
 80091c6:	5ce3      	ldrb	r3, [r4, r3]
 80091c8:	20ea      	movs	r0, #234	; 0xea
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	18c9      	adds	r1, r1, r3
 80091ce:	b289      	uxth	r1, r1
 80091d0:	f001 fbf8 	bl	800a9c4 <EE_WriteVariable>
 80091d4:	e7ec      	b.n	80091b0 <PxMessagingTask+0xd6c>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	49a9      	ldr	r1, [pc, #676]	; (8009480 <PxMessagingTask+0x103c>)
 80091da:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	0a12      	lsrs	r2, r2, #8
 80091e0:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	0c12      	lsrs	r2, r2, #16
 80091e6:	708a      	strb	r2, [r1, #2]
										SendMessageToModule(src,
 80091e8:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	0e1b      	lsrs	r3, r3, #24
 80091ee:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 80091f0:	211f      	movs	r1, #31
 80091f2:	e442      	b.n	8008a7a <PxMessagingTask+0x636>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80091f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f6:	f009 f88e 	bl	8012316 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 80091fa:	2116      	movs	r1, #22
 80091fc:	0030      	movs	r0, r6
 80091fe:	f7f6 ffa7 	bl	8000150 <__udivsi3>
 8009202:	4ba0      	ldr	r3, [pc, #640]	; (8009484 <PxMessagingTask+0x1040>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009204:	0032      	movs	r2, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009206:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009208:	499f      	ldr	r1, [pc, #636]	; (8009488 <PxMessagingTask+0x1044>)
 800920a:	48a0      	ldr	r0, [pc, #640]	; (800948c <PxMessagingTask+0x1048>)
 800920c:	f009 f883 	bl	8012316 <memcpy>
								longMessageLastPtr =0;
 8009210:	4b9f      	ldr	r3, [pc, #636]	; (8009490 <PxMessagingTask+0x104c>)
 8009212:	2600      	movs	r6, #0
 8009214:	801d      	strh	r5, [r3, #0]
 8009216:	f7ff f9cd 	bl	80085b4 <PxMessagingTask+0x170>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800921a:	7a28      	ldrb	r0, [r5, #8]
 800921c:	0032      	movs	r2, r6
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	0039      	movs	r1, r7
 8009222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009224:	f7fe fc2a 	bl	8007a7c <SetupDMAStreams>
 8009228:	464b      	mov	r3, r9
 800922a:	5d1f      	ldrb	r7, [r3, r4]
 800922c:	2300      	movs	r3, #0
 800922e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009230:	001e      	movs	r6, r3
 8009232:	f7ff f9bf 	bl	80085b4 <PxMessagingTask+0x170>
								for(p =1; p <= NumOfPorts; p++){
 8009236:	2501      	movs	r5, #1
									UpdateBaudrate(p,temp32);
 8009238:	0028      	movs	r0, r5
								for(p =1; p <= NumOfPorts; p++){
 800923a:	3501      	adds	r5, #1
									UpdateBaudrate(p,temp32);
 800923c:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800923e:	b2ed      	uxtb	r5, r5
									UpdateBaudrate(p,temp32);
 8009240:	f003 fd38 	bl	800ccb4 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009244:	2d06      	cmp	r5, #6
 8009246:	d1f7      	bne.n	8009238 <PxMessagingTask+0xdf4>
 8009248:	e7ee      	b.n	8009228 <PxMessagingTask+0xde4>
								temp =cMessage[port - 1][13 + shift];
 800924a:	9a05      	ldr	r2, [sp, #20]
 800924c:	1952      	adds	r2, r2, r5
 800924e:	7b51      	ldrb	r1, [r2, #13]
 8009250:	e4e7      	b.n	8008c22 <PxMessagingTask+0x7de>
								temp =cMessage[port - 1][15 + shift];
 8009252:	9a05      	ldr	r2, [sp, #20]
 8009254:	1952      	adds	r2, r2, r5
 8009256:	7bd1      	ldrb	r1, [r2, #15]
 8009258:	e4e3      	b.n	8008c22 <PxMessagingTask+0x7de>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800925a:	881a      	ldrh	r2, [r3, #0]
 800925c:	4988      	ldr	r1, [pc, #544]	; (8009480 <PxMessagingTask+0x103c>)
 800925e:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009260:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009262:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009264:	b21b      	sxth	r3, r3
 8009266:	121b      	asrs	r3, r3, #8
 8009268:	704b      	strb	r3, [r1, #1]
 800926a:	e7c1      	b.n	80091f0 <PxMessagingTask+0xdac>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800926c:	881a      	ldrh	r2, [r3, #0]
 800926e:	4984      	ldr	r1, [pc, #528]	; (8009480 <PxMessagingTask+0x103c>)
 8009270:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009272:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009274:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	704b      	strb	r3, [r1, #1]
 800927a:	e7b9      	b.n	80091f0 <PxMessagingTask+0xdac>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800927c:	781a      	ldrb	r2, [r3, #0]
 800927e:	4980      	ldr	r1, [pc, #512]	; (8009480 <PxMessagingTask+0x103c>)
 8009280:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009282:	785a      	ldrb	r2, [r3, #1]
 8009284:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8009286:	789a      	ldrb	r2, [r3, #2]
 8009288:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800928a:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800928c:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800928e:	70cb      	strb	r3, [r1, #3]
 8009290:	e7ae      	b.n	80091f0 <PxMessagingTask+0xdac>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8009292:	2b02      	cmp	r3, #2
 8009294:	d100      	bne.n	8009298 <PxMessagingTask+0xe54>
 8009296:	e0be      	b.n	8009416 <PxMessagingTask+0xfd2>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8009298:	d801      	bhi.n	800929e <PxMessagingTask+0xe5a>
 800929a:	f7ff f988 	bl	80085ae <PxMessagingTask+0x16a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800929e:	260f      	movs	r6, #15
 80092a0:	3b04      	subs	r3, #4
 80092a2:	4a7c      	ldr	r2, [pc, #496]	; (8009494 <PxMessagingTask+0x1050>)
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	58d2      	ldr	r2, [r2, r3]
 80092a8:	4b75      	ldr	r3, [pc, #468]	; (8009480 <PxMessagingTask+0x103c>)
 80092aa:	4016      	ands	r6, r2
 80092ac:	701e      	strb	r6, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80092ae:	d100      	bne.n	80092b2 <PxMessagingTask+0xe6e>
 80092b0:	e0a8      	b.n	8009404 <PxMessagingTask+0xfc0>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092b2:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 80092b4:	3e01      	subs	r6, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092b6:	0c12      	lsrs	r2, r2, #16
 80092b8:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 80092ba:	b2f6      	uxtb	r6, r6
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80092bc:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 80092be:	2e07      	cmp	r6, #7
 80092c0:	d901      	bls.n	80092c6 <PxMessagingTask+0xe82>
 80092c2:	f7ff f974 	bl	80085ae <PxMessagingTask+0x16a>
 80092c6:	4974      	ldr	r1, [pc, #464]	; (8009498 <PxMessagingTask+0x1054>)
 80092c8:	00b6      	lsls	r6, r6, #2
 80092ca:	5989      	ldr	r1, [r1, r6]
 80092cc:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d031      	beq.n	8009336 <PxMessagingTask+0xef2>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 80092d2:	9b05      	ldr	r3, [sp, #20]
 80092d4:	195a      	adds	r2, r3, r5
 80092d6:	78d3      	ldrb	r3, [r2, #3]
 80092d8:	7891      	ldrb	r1, [r2, #2]
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	185b      	adds	r3, r3, r1
 80092de:	7911      	ldrb	r1, [r2, #4]
 80092e0:	0409      	lsls	r1, r1, #16
 80092e2:	7952      	ldrb	r2, [r2, #5]
 80092e4:	185b      	adds	r3, r3, r1
 80092e6:	0612      	lsls	r2, r2, #24
 80092e8:	189b      	adds	r3, r3, r2
 80092ea:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 80092ec:	9905      	ldr	r1, [sp, #20]
 80092ee:	9807      	ldr	r0, [sp, #28]
 80092f0:	5d4b      	ldrb	r3, [r1, r5]
 80092f2:	5c09      	ldrb	r1, [r1, r0]
 80092f4:	200f      	movs	r0, #15
 80092f6:	3b01      	subs	r3, #1
 80092f8:	4a66      	ldr	r2, [pc, #408]	; (8009494 <PxMessagingTask+0x1050>)
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	58d2      	ldr	r2, [r2, r3]
 80092fe:	4010      	ands	r0, r2
 8009300:	4288      	cmp	r0, r1
 8009302:	d008      	beq.n	8009316 <PxMessagingTask+0xed2>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009304:	4865      	ldr	r0, [pc, #404]	; (800949c <PxMessagingTask+0x1058>)
 8009306:	4684      	mov	ip, r0
 8009308:	4461      	add	r1, ip
 800930a:	400a      	ands	r2, r1
 800930c:	4961      	ldr	r1, [pc, #388]	; (8009494 <PxMessagingTask+0x1050>)
 800930e:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009310:	2314      	movs	r3, #20
 8009312:	4a63      	ldr	r2, [pc, #396]	; (80094a0 <PxMessagingTask+0x105c>)
 8009314:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009316:	2240      	movs	r2, #64	; 0x40
 8009318:	4b62      	ldr	r3, [pc, #392]	; (80094a4 <PxMessagingTask+0x1060>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	4393      	bics	r3, r2
 800931e:	2b20      	cmp	r3, #32
 8009320:	d001      	beq.n	8009326 <PxMessagingTask+0xee2>
 8009322:	f7ff f944 	bl	80085ae <PxMessagingTask+0x16a>
								messageParams[0] =responseStatus;
 8009326:	4b5e      	ldr	r3, [pc, #376]	; (80094a0 <PxMessagingTask+0x105c>)
 8009328:	4a55      	ldr	r2, [pc, #340]	; (8009480 <PxMessagingTask+0x103c>)
 800932a:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800932c:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800932e:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009330:	2201      	movs	r2, #1
 8009332:	f7ff fba2 	bl	8008a7a <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009336:	2004      	movs	r0, #4
 8009338:	f008 fda0 	bl	8011e7c <malloc>
												if(temp32 != 0){
 800933c:	2800      	cmp	r0, #0
 800933e:	d00f      	beq.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009340:	0403      	lsls	r3, r0, #16
 8009342:	4a54      	ldr	r2, [pc, #336]	; (8009494 <PxMessagingTask+0x1050>)
 8009344:	3306      	adds	r3, #6
 8009346:	5193      	str	r3, [r2, r6]
 8009348:	e7c3      	b.n	80092d2 <PxMessagingTask+0xe8e>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <PxMessagingTask+0xf24>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	195a      	adds	r2, r3, r5
 8009352:	78d3      	ldrb	r3, [r2, #3]
 8009354:	7911      	ldrb	r1, [r2, #4]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	0409      	lsls	r1, r1, #16
 800935a:	185b      	adds	r3, r3, r1
 800935c:	7891      	ldrb	r1, [r2, #2]
 800935e:	e7c0      	b.n	80092e2 <PxMessagingTask+0xe9e>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009360:	2312      	movs	r3, #18
 8009362:	4a4f      	ldr	r2, [pc, #316]	; (80094a0 <PxMessagingTask+0x105c>)
 8009364:	7013      	strb	r3, [r2, #0]
 8009366:	e7c1      	b.n	80092ec <PxMessagingTask+0xea8>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009368:	2004      	movs	r0, #4
 800936a:	f008 fd87 	bl	8011e7c <malloc>
												if(temp32 != 0){
 800936e:	2800      	cmp	r0, #0
 8009370:	d0f6      	beq.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009372:	0403      	lsls	r3, r0, #16
 8009374:	4a47      	ldr	r2, [pc, #284]	; (8009494 <PxMessagingTask+0x1050>)
 8009376:	3305      	adds	r3, #5
 8009378:	5193      	str	r3, [r2, r6]
 800937a:	e7e8      	b.n	800934e <PxMessagingTask+0xf0a>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4940      	ldr	r1, [pc, #256]	; (8009480 <PxMessagingTask+0x103c>)
 8009380:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	0a12      	lsrs	r2, r2, #8
 8009386:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	0c12      	lsrs	r2, r2, #16
 800938c:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800938e:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009390:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009392:	0e1b      	lsrs	r3, r3, #24
 8009394:	710b      	strb	r3, [r1, #4]
 8009396:	e72b      	b.n	80091f0 <PxMessagingTask+0xdac>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009398:	881a      	ldrh	r2, [r3, #0]
 800939a:	4939      	ldr	r1, [pc, #228]	; (8009480 <PxMessagingTask+0x103c>)
 800939c:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800939e:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093a0:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093a2:	b21b      	sxth	r3, r3
 80093a4:	121b      	asrs	r3, r3, #8
 80093a6:	708b      	strb	r3, [r1, #2]
 80093a8:	e722      	b.n	80091f0 <PxMessagingTask+0xdac>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	4934      	ldr	r1, [pc, #208]	; (8009480 <PxMessagingTask+0x103c>)
 80093ae:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80093b0:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 80093b2:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80093b4:	0a1b      	lsrs	r3, r3, #8
 80093b6:	708b      	strb	r3, [r1, #2]
 80093b8:	e71a      	b.n	80091f0 <PxMessagingTask+0xdac>
											messageParams[1] =*(__IO int8_t* )temp32;
 80093ba:	4a31      	ldr	r2, [pc, #196]	; (8009480 <PxMessagingTask+0x103c>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 80093c0:	2202      	movs	r2, #2
 80093c2:	e715      	b.n	80091f0 <PxMessagingTask+0xdac>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	492e      	ldr	r1, [pc, #184]	; (8009480 <PxMessagingTask+0x103c>)
 80093c8:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	1212      	asrs	r2, r2, #8
 80093ce:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	1412      	asrs	r2, r2, #16
 80093d4:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80093d6:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 80093d8:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80093da:	161b      	asrs	r3, r3, #24
 80093dc:	710b      	strb	r3, [r1, #4]
 80093de:	e707      	b.n	80091f0 <PxMessagingTask+0xdac>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	4927      	ldr	r1, [pc, #156]	; (8009480 <PxMessagingTask+0x103c>)
 80093e4:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80093e6:	4b30      	ldr	r3, [pc, #192]	; (80094a8 <PxMessagingTask+0x1064>)
 80093e8:	18d3      	adds	r3, r2, r3
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80093ee:	4b2f      	ldr	r3, [pc, #188]	; (80094ac <PxMessagingTask+0x1068>)
 80093f0:	18d3      	adds	r3, r2, r3
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80093f6:	4b2e      	ldr	r3, [pc, #184]	; (80094b0 <PxMessagingTask+0x106c>)
 80093f8:	469c      	mov	ip, r3
 80093fa:	4462      	add	r2, ip
 80093fc:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 80093fe:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009400:	710b      	strb	r3, [r1, #4]
 8009402:	e6f5      	b.n	80091f0 <PxMessagingTask+0xdac>
									SendMessageToModule(src,
 8009404:	2201      	movs	r2, #1
 8009406:	211f      	movs	r1, #31
 8009408:	4650      	mov	r0, sl
 800940a:	f7fe fe87 	bl	800811c <SendMessageToModule>
 800940e:	464b      	mov	r3, r9
 8009410:	5d1f      	ldrb	r7, [r3, r4]
 8009412:	f7ff f8cf 	bl	80085b4 <PxMessagingTask+0x170>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009416:	9b05      	ldr	r3, [sp, #20]
 8009418:	2600      	movs	r6, #0
 800941a:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800941c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800941e:	4467      	add	r7, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009420:	469c      	mov	ip, r3
 8009422:	1c68      	adds	r0, r5, #1
 8009424:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009426:	3f01      	subs	r7, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009428:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800942a:	703e      	strb	r6, [r7, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800942c:	f7fa f98c 	bl	8003748 <IsModuleParameter>
 8009430:	900b      	str	r0, [sp, #44]	; 0x2c
								if(temp == 0){ // Parameter does not exist
 8009432:	42b0      	cmp	r0, r6
 8009434:	d100      	bne.n	8009438 <PxMessagingTask+0xff4>
 8009436:	e0a4      	b.n	8009582 <PxMessagingTask+0x113e>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009438:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800943a:	491e      	ldr	r1, [pc, #120]	; (80094b4 <PxMessagingTask+0x1070>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800943c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
									messageParams[0] =modParam[temp - 1].paramFormat;
 800943e:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009440:	3b01      	subs	r3, #1
 8009442:	435a      	muls	r2, r3
 8009444:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <PxMessagingTask+0x1070>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009446:	490e      	ldr	r1, [pc, #56]	; (8009480 <PxMessagingTask+0x103c>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009448:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800944a:	4462      	add	r2, ip
 800944c:	7912      	ldrb	r2, [r2, #4]
 800944e:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009450:	3a01      	subs	r2, #1
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	2a07      	cmp	r2, #7
 8009456:	d900      	bls.n	800945a <PxMessagingTask+0x1016>
 8009458:	e4f1      	b.n	8008e3e <PxMessagingTask+0x9fa>
 800945a:	4917      	ldr	r1, [pc, #92]	; (80094b8 <PxMessagingTask+0x1074>)
 800945c:	0092      	lsls	r2, r2, #2
 800945e:	588a      	ldr	r2, [r1, r2]
 8009460:	4697      	mov	pc, r2
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	20000dc4 	.word	0x20000dc4
 8009468:	20001dac 	.word	0x20001dac
 800946c:	08018950 	.word	0x08018950
 8009470:	20000032 	.word	0x20000032
 8009474:	08016fdc 	.word	0x08016fdc
 8009478:	e000ed00 	.word	0xe000ed00
 800947c:	05fa0004 	.word	0x05fa0004
 8009480:	20000b3c 	.word	0x20000b3c
 8009484:	20000008 	.word	0x20000008
 8009488:	20001e70 	.word	0x20001e70
 800948c:	20000ed4 	.word	0x20000ed4
 8009490:	20000c4a 	.word	0x20000c4a
 8009494:	200067cc 	.word	0x200067cc
 8009498:	08017000 	.word	0x08017000
 800949c:	0000fff0 	.word	0x0000fff0
 80094a0:	20000c3c 	.word	0x20000c3c
 80094a4:	200067c4 	.word	0x200067c4
 80094a8:	20000001 	.word	0x20000001
 80094ac:	20000002 	.word	0x20000002
 80094b0:	20000003 	.word	0x20000003
 80094b4:	20000094 	.word	0x20000094
 80094b8:	08017020 	.word	0x08017020
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d100      	bne.n	80094c2 <PxMessagingTask+0x107e>
 80094c0:	e0ce      	b.n	8009660 <PxMessagingTask+0x121c>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	1959      	adds	r1, r3, r5
 80094c6:	78ca      	ldrb	r2, [r1, #3]
 80094c8:	788b      	ldrb	r3, [r1, #2]
 80094ca:	0212      	lsls	r2, r2, #8
 80094cc:	189b      	adds	r3, r3, r2
 80094ce:	b21b      	sxth	r3, r3
 80094d0:	8003      	strh	r3, [r0, #0]
 80094d2:	e70b      	b.n	80092ec <PxMessagingTask+0xea8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	49d7      	ldr	r1, [pc, #860]	; (8009834 <PxMessagingTask+0x13f0>)
 80094d8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	1212      	asrs	r2, r2, #8
 80094de:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	1412      	asrs	r2, r2, #16
 80094e4:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80094e6:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 80094e8:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80094ea:	161b      	asrs	r3, r3, #24
 80094ec:	70cb      	strb	r3, [r1, #3]
 80094ee:	e67f      	b.n	80091f0 <PxMessagingTask+0xdac>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d100      	bne.n	80094f6 <PxMessagingTask+0x10b2>
 80094f4:	e0df      	b.n	80096b6 <PxMessagingTask+0x1272>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 80094f6:	9b05      	ldr	r3, [sp, #20]
 80094f8:	195a      	adds	r2, r3, r5
 80094fa:	78d3      	ldrb	r3, [r2, #3]
 80094fc:	7911      	ldrb	r1, [r2, #4]
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	0409      	lsls	r1, r1, #16
 8009502:	185b      	adds	r3, r3, r1
 8009504:	7891      	ldrb	r1, [r2, #2]
 8009506:	7952      	ldrb	r2, [r2, #5]
 8009508:	185b      	adds	r3, r3, r1
 800950a:	0612      	lsls	r2, r2, #24
 800950c:	189b      	adds	r3, r3, r2
 800950e:	4642      	mov	r2, r8
 8009510:	4641      	mov	r1, r8
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	2200      	movs	r2, #0
 8009516:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	e6e7      	b.n	80092ec <PxMessagingTask+0xea8>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800951c:	9b05      	ldr	r3, [sp, #20]
 800951e:	4642      	mov	r2, r8
 8009520:	469c      	mov	ip, r3
 8009522:	2301      	movs	r3, #1
 8009524:	4465      	add	r5, ip
 8009526:	56eb      	ldrsb	r3, [r5, r3]
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	17db      	asrs	r3, r3, #31
 800952c:	6053      	str	r3, [r2, #4]
										break;
 800952e:	f7ff f932 	bl	8008796 <PxMessagingTask+0x352>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00f      	beq.n	8009556 <PxMessagingTask+0x1112>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009536:	9b05      	ldr	r3, [sp, #20]
 8009538:	1959      	adds	r1, r3, r5
 800953a:	78ca      	ldrb	r2, [r1, #3]
 800953c:	788b      	ldrb	r3, [r1, #2]
 800953e:	0212      	lsls	r2, r2, #8
 8009540:	189b      	adds	r3, r3, r2
 8009542:	b29b      	uxth	r3, r3
 8009544:	8003      	strh	r3, [r0, #0]
 8009546:	e6d1      	b.n	80092ec <PxMessagingTask+0xea8>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009548:	4aba      	ldr	r2, [pc, #744]	; (8009834 <PxMessagingTask+0x13f0>)
 800954a:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 800954c:	211f      	movs	r1, #31
											messageParams[1] =*(__IO uint8_t* )temp32;
 800954e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009550:	2202      	movs	r2, #2
 8009552:	f7ff fa92 	bl	8008a7a <PxMessagingTask+0x636>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009556:	2002      	movs	r0, #2
 8009558:	f008 fc90 	bl	8011e7c <malloc>
												if(temp32 != 0){
 800955c:	2800      	cmp	r0, #0
 800955e:	d100      	bne.n	8009562 <PxMessagingTask+0x111e>
 8009560:	e6fe      	b.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009562:	0403      	lsls	r3, r0, #16
 8009564:	4ab4      	ldr	r2, [pc, #720]	; (8009838 <PxMessagingTask+0x13f4>)
 8009566:	3303      	adds	r3, #3
 8009568:	5193      	str	r3, [r2, r6]
 800956a:	e7e4      	b.n	8009536 <PxMessagingTask+0x10f2>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	49b1      	ldr	r1, [pc, #708]	; (8009834 <PxMessagingTask+0x13f0>)
 8009570:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009572:	785a      	ldrb	r2, [r3, #1]
 8009574:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009576:	789a      	ldrb	r2, [r3, #2]
 8009578:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800957a:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800957c:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800957e:	710b      	strb	r3, [r1, #4]
 8009580:	e636      	b.n	80091f0 <PxMessagingTask+0xdac>
									SendMessageToModule(src,
 8009582:	2201      	movs	r2, #1
 8009584:	211f      	movs	r1, #31
 8009586:	4650      	mov	r0, sl
 8009588:	f7fe fdc8 	bl	800811c <SendMessageToModule>
 800958c:	464b      	mov	r3, r9
 800958e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009590:	5d1f      	ldrb	r7, [r3, r4]
 8009592:	f7ff f80f 	bl	80085b4 <PxMessagingTask+0x170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00c      	beq.n	80095b4 <PxMessagingTask+0x1170>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	195b      	adds	r3, r3, r5
 800959e:	789b      	ldrb	r3, [r3, #2]
 80095a0:	b25b      	sxtb	r3, r3
 80095a2:	7003      	strb	r3, [r0, #0]
 80095a4:	e6a2      	b.n	80092ec <PxMessagingTask+0xea8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <PxMessagingTask+0x1186>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	195b      	adds	r3, r3, r5
 80095ae:	789b      	ldrb	r3, [r3, #2]
 80095b0:	7003      	strb	r3, [r0, #0]
 80095b2:	e69b      	b.n	80092ec <PxMessagingTask+0xea8>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 80095b4:	2001      	movs	r0, #1
 80095b6:	f008 fc61 	bl	8011e7c <malloc>
												if(temp32 != 0){
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d100      	bne.n	80095c0 <PxMessagingTask+0x117c>
 80095be:	e6cf      	b.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095c0:	0403      	lsls	r3, r0, #16
 80095c2:	4a9d      	ldr	r2, [pc, #628]	; (8009838 <PxMessagingTask+0x13f4>)
 80095c4:	3302      	adds	r3, #2
 80095c6:	5193      	str	r3, [r2, r6]
 80095c8:	e7e7      	b.n	800959a <PxMessagingTask+0x1156>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 80095ca:	2001      	movs	r0, #1
 80095cc:	f008 fc56 	bl	8011e7c <malloc>
												if(temp32 != 0){
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d100      	bne.n	80095d6 <PxMessagingTask+0x1192>
 80095d4:	e6c4      	b.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095d6:	0403      	lsls	r3, r0, #16
 80095d8:	19df      	adds	r7, r3, r7
 80095da:	4b97      	ldr	r3, [pc, #604]	; (8009838 <PxMessagingTask+0x13f4>)
 80095dc:	519f      	str	r7, [r3, r6]
 80095de:	e7e4      	b.n	80095aa <PxMessagingTask+0x1166>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 80095e0:	2313      	movs	r3, #19
 80095e2:	4a96      	ldr	r2, [pc, #600]	; (800983c <PxMessagingTask+0x13f8>)
 80095e4:	7013      	strb	r3, [r2, #0]
 80095e6:	e696      	b.n	8009316 <PxMessagingTask+0xed2>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80095e8:	9b05      	ldr	r3, [sp, #20]
 80095ea:	195b      	adds	r3, r3, r5
 80095ec:	789e      	ldrb	r6, [r3, #2]
 80095ee:	78da      	ldrb	r2, [r3, #3]
 80095f0:	0636      	lsls	r6, r6, #24
 80095f2:	0412      	lsls	r2, r2, #16
 80095f4:	18b6      	adds	r6, r6, r2
 80095f6:	795a      	ldrb	r2, [r3, #5]
 80095f8:	18b6      	adds	r6, r6, r2
 80095fa:	791a      	ldrb	r2, [r3, #4]
 80095fc:	0212      	lsls	r2, r2, #8
 80095fe:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009600:	22e0      	movs	r2, #224	; 0xe0
 8009602:	0612      	lsls	r2, r2, #24
 8009604:	18b1      	adds	r1, r6, r2
 8009606:	4a8e      	ldr	r2, [pc, #568]	; (8009840 <PxMessagingTask+0x13fc>)
 8009608:	4291      	cmp	r1, r2
 800960a:	d900      	bls.n	800960e <PxMessagingTask+0x11ca>
 800960c:	e0ac      	b.n	8009768 <PxMessagingTask+0x1324>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	3b01      	subs	r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b07      	cmp	r3, #7
 8009616:	d900      	bls.n	800961a <PxMessagingTask+0x11d6>
 8009618:	e67d      	b.n	8009316 <PxMessagingTask+0xed2>
 800961a:	4a8a      	ldr	r2, [pc, #552]	; (8009844 <PxMessagingTask+0x1400>)
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	58d3      	ldr	r3, [r2, r3]
 8009620:	469f      	mov	pc, r3
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009622:	9b05      	ldr	r3, [sp, #20]
 8009624:	469c      	mov	ip, r3
 8009626:	4465      	add	r5, ip
 8009628:	78ab      	ldrb	r3, [r5, #2]
 800962a:	786a      	ldrb	r2, [r5, #1]
 800962c:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800962e:	189b      	adds	r3, r3, r2
 8009630:	4642      	mov	r2, r8
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	17db      	asrs	r3, r3, #31
 8009636:	6053      	str	r3, [r2, #4]
										break;
 8009638:	f7ff f8ad 	bl	8008796 <PxMessagingTask+0x352>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800963c:	9b05      	ldr	r3, [sp, #20]
 800963e:	469c      	mov	ip, r3
 8009640:	4465      	add	r5, ip
 8009642:	78ab      	ldrb	r3, [r5, #2]
 8009644:	786a      	ldrb	r2, [r5, #1]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	189b      	adds	r3, r3, r2
 800964a:	78ea      	ldrb	r2, [r5, #3]
 800964c:	0412      	lsls	r2, r2, #16
 800964e:	189b      	adds	r3, r3, r2
 8009650:	792a      	ldrb	r2, [r5, #4]
 8009652:	0612      	lsls	r2, r2, #24
 8009654:	e7eb      	b.n	800962e <PxMessagingTask+0x11ea>
										messageParams[0] =*(__IO uint8_t* )temp32;
 8009656:	4a77      	ldr	r2, [pc, #476]	; (8009834 <PxMessagingTask+0x13f0>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800965c:	2201      	movs	r2, #1
 800965e:	e5c7      	b.n	80091f0 <PxMessagingTask+0xdac>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009660:	2002      	movs	r0, #2
 8009662:	f008 fc0b 	bl	8011e7c <malloc>
												if(temp32 != 0){
 8009666:	2800      	cmp	r0, #0
 8009668:	d100      	bne.n	800966c <PxMessagingTask+0x1228>
 800966a:	e679      	b.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800966c:	0403      	lsls	r3, r0, #16
 800966e:	4a72      	ldr	r2, [pc, #456]	; (8009838 <PxMessagingTask+0x13f4>)
 8009670:	3304      	adds	r3, #4
 8009672:	5193      	str	r3, [r2, r6]
 8009674:	e725      	b.n	80094c2 <PxMessagingTask+0x107e>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009676:	2310      	movs	r3, #16
 8009678:	f7ff f852 	bl	8008720 <PxMessagingTask+0x2dc>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800967c:	9b05      	ldr	r3, [sp, #20]
 800967e:	469c      	mov	ip, r3
 8009680:	4465      	add	r5, ip
 8009682:	78ab      	ldrb	r3, [r5, #2]
 8009684:	78ea      	ldrb	r2, [r5, #3]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	0412      	lsls	r2, r2, #16
 800968a:	189b      	adds	r3, r3, r2
 800968c:	786a      	ldrb	r2, [r5, #1]
 800968e:	189b      	adds	r3, r3, r2
 8009690:	792a      	ldrb	r2, [r5, #4]
 8009692:	0612      	lsls	r2, r2, #24
 8009694:	189b      	adds	r3, r3, r2
 8009696:	4642      	mov	r2, r8
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	6053      	str	r3, [r2, #4]
										break;
 800969e:	f7ff f87a 	bl	8008796 <PxMessagingTask+0x352>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80096a2:	9b05      	ldr	r3, [sp, #20]
 80096a4:	4642      	mov	r2, r8
 80096a6:	469c      	mov	ip, r3
 80096a8:	4465      	add	r5, ip
 80096aa:	786b      	ldrb	r3, [r5, #1]
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	2300      	movs	r3, #0
 80096b0:	6053      	str	r3, [r2, #4]
										break;
 80096b2:	f7ff f870 	bl	8008796 <PxMessagingTask+0x352>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 80096b6:	2004      	movs	r0, #4
 80096b8:	f008 fbe0 	bl	8011e7c <malloc>
												if(temp32 != 0){
 80096bc:	2800      	cmp	r0, #0
 80096be:	d100      	bne.n	80096c2 <PxMessagingTask+0x127e>
 80096c0:	e64e      	b.n	8009360 <PxMessagingTask+0xf1c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80096c2:	0403      	lsls	r3, r0, #16
 80096c4:	4a5c      	ldr	r2, [pc, #368]	; (8009838 <PxMessagingTask+0x13f4>)
 80096c6:	3307      	adds	r3, #7
 80096c8:	5193      	str	r3, [r2, r6]
 80096ca:	e714      	b.n	80094f6 <PxMessagingTask+0x10b2>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 80096cc:	9b05      	ldr	r3, [sp, #20]
 80096ce:	469c      	mov	ip, r3
 80096d0:	4465      	add	r5, ip
 80096d2:	79eb      	ldrb	r3, [r5, #7]
 80096d4:	79aa      	ldrb	r2, [r5, #6]
 80096d6:	021b      	lsls	r3, r3, #8
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	7a2a      	ldrb	r2, [r5, #8]
 80096dc:	0412      	lsls	r2, r2, #16
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	7a6a      	ldrb	r2, [r5, #9]
 80096e2:	0612      	lsls	r2, r2, #24
 80096e4:	189b      	adds	r3, r3, r2
 80096e6:	6033      	str	r3, [r6, #0]
											break;
 80096e8:	e615      	b.n	8009316 <PxMessagingTask+0xed2>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80096ea:	9b05      	ldr	r3, [sp, #20]
 80096ec:	469c      	mov	ip, r3
 80096ee:	4465      	add	r5, ip
 80096f0:	79eb      	ldrb	r3, [r5, #7]
 80096f2:	7a2a      	ldrb	r2, [r5, #8]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	0412      	lsls	r2, r2, #16
 80096f8:	189b      	adds	r3, r3, r2
 80096fa:	79aa      	ldrb	r2, [r5, #6]
 80096fc:	e7ef      	b.n	80096de <PxMessagingTask+0x129a>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 80096fe:	9b05      	ldr	r3, [sp, #20]
 8009700:	469c      	mov	ip, r3
 8009702:	4465      	add	r5, ip
 8009704:	79ea      	ldrb	r2, [r5, #7]
 8009706:	79ab      	ldrb	r3, [r5, #6]
 8009708:	0212      	lsls	r2, r2, #8
 800970a:	189b      	adds	r3, r3, r2
 800970c:	b21b      	sxth	r3, r3
 800970e:	8033      	strh	r3, [r6, #0]
											break;
 8009710:	e601      	b.n	8009316 <PxMessagingTask+0xed2>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009712:	9b05      	ldr	r3, [sp, #20]
 8009714:	469c      	mov	ip, r3
 8009716:	4465      	add	r5, ip
 8009718:	79ea      	ldrb	r2, [r5, #7]
 800971a:	79ab      	ldrb	r3, [r5, #6]
 800971c:	0212      	lsls	r2, r2, #8
 800971e:	189b      	adds	r3, r3, r2
 8009720:	b29b      	uxth	r3, r3
 8009722:	8033      	strh	r3, [r6, #0]
											break;
 8009724:	e5f7      	b.n	8009316 <PxMessagingTask+0xed2>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	469c      	mov	ip, r3
 800972a:	2306      	movs	r3, #6
 800972c:	4465      	add	r5, ip
 800972e:	56eb      	ldrsb	r3, [r5, r3]
 8009730:	7033      	strb	r3, [r6, #0]
											break;
 8009732:	e5f0      	b.n	8009316 <PxMessagingTask+0xed2>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009734:	9b05      	ldr	r3, [sp, #20]
 8009736:	469c      	mov	ip, r3
 8009738:	4465      	add	r5, ip
 800973a:	79ab      	ldrb	r3, [r5, #6]
 800973c:	7033      	strb	r3, [r6, #0]
											break;
 800973e:	e5ea      	b.n	8009316 <PxMessagingTask+0xed2>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009740:	9b05      	ldr	r3, [sp, #20]
 8009742:	4641      	mov	r1, r8
 8009744:	469c      	mov	ip, r3
 8009746:	4465      	add	r5, ip
 8009748:	79eb      	ldrb	r3, [r5, #7]
 800974a:	7a2a      	ldrb	r2, [r5, #8]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	0412      	lsls	r2, r2, #16
 8009750:	189b      	adds	r3, r3, r2
 8009752:	79aa      	ldrb	r2, [r5, #6]
 8009754:	189b      	adds	r3, r3, r2
 8009756:	7a6a      	ldrb	r2, [r5, #9]
 8009758:	0612      	lsls	r2, r2, #24
 800975a:	189b      	adds	r3, r3, r2
 800975c:	4642      	mov	r2, r8
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	2200      	movs	r2, #0
 8009762:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009764:	6033      	str	r3, [r6, #0]
											break;
 8009766:	e5d6      	b.n	8009316 <PxMessagingTask+0xed2>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009768:	23f8      	movs	r3, #248	; 0xf8
 800976a:	4a37      	ldr	r2, [pc, #220]	; (8009848 <PxMessagingTask+0x1404>)
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	18f3      	adds	r3, r6, r3
 8009770:	4293      	cmp	r3, r2
 8009772:	d903      	bls.n	800977c <PxMessagingTask+0x1338>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009774:	2215      	movs	r2, #21
 8009776:	4b31      	ldr	r3, [pc, #196]	; (800983c <PxMessagingTask+0x13f8>)
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e5cc      	b.n	8009316 <PxMessagingTask+0xed2>
									HAL_FLASH_Unlock();
 800977c:	f006 fbe8 	bl	800ff50 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009780:	9b08      	ldr	r3, [sp, #32]
 8009782:	2b22      	cmp	r3, #34	; 0x22
 8009784:	d102      	bne.n	800978c <PxMessagingTask+0x1348>
										EraseSector(temp32);
 8009786:	0030      	movs	r0, r6
 8009788:	f001 fb5a 	bl	800ae40 <EraseSector>
									if(responseStatus == BOS_OK){
 800978c:	4b2b      	ldr	r3, [pc, #172]	; (800983c <PxMessagingTask+0x13f8>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d110      	bne.n	80097b6 <PxMessagingTask+0x1372>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009794:	9b05      	ldr	r3, [sp, #20]
 8009796:	195b      	adds	r3, r3, r5
 8009798:	785b      	ldrb	r3, [r3, #1]
 800979a:	3b01      	subs	r3, #1
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b07      	cmp	r3, #7
 80097a0:	d809      	bhi.n	80097b6 <PxMessagingTask+0x1372>
 80097a2:	4a2a      	ldr	r2, [pc, #168]	; (800984c <PxMessagingTask+0x1408>)
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	58d3      	ldr	r3, [r2, r3]
 80097a8:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80097aa:	6833      	ldr	r3, [r6, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	d020      	beq.n	80097f2 <PxMessagingTask+0x13ae>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80097b0:	2216      	movs	r2, #22
 80097b2:	4b22      	ldr	r3, [pc, #136]	; (800983c <PxMessagingTask+0x13f8>)
 80097b4:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 80097b6:	f006 fbdd 	bl	800ff74 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 80097ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d100      	bne.n	80097c2 <PxMessagingTask+0x137e>
 80097c0:	e5a9      	b.n	8009316 <PxMessagingTask+0xed2>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80097c2:	2216      	movs	r2, #22
 80097c4:	4b1d      	ldr	r3, [pc, #116]	; (800983c <PxMessagingTask+0x13f8>)
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	e5a5      	b.n	8009316 <PxMessagingTask+0xed2>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 80097ca:	8832      	ldrh	r2, [r6, #0]
 80097cc:	4b20      	ldr	r3, [pc, #128]	; (8009850 <PxMessagingTask+0x140c>)
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d1ee      	bne.n	80097b0 <PxMessagingTask+0x136c>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	469c      	mov	ip, r3
 80097d6:	4465      	add	r5, ip
 80097d8:	79ea      	ldrb	r2, [r5, #7]
 80097da:	79ab      	ldrb	r3, [r5, #6]
 80097dc:	0212      	lsls	r2, r2, #8
 80097de:	18d2      	adds	r2, r2, r3
 80097e0:	17d3      	asrs	r3, r2, #31
 80097e2:	4641      	mov	r1, r8
													status =HAL_FLASH_Program(
 80097e4:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80097e6:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 80097e8:	0031      	movs	r1, r6
 80097ea:	f006 fc11 	bl	8010010 <HAL_FLASH_Program>
 80097ee:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 80097f0:	e7e1      	b.n	80097b6 <PxMessagingTask+0x1372>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 80097f2:	9b05      	ldr	r3, [sp, #20]
 80097f4:	4641      	mov	r1, r8
 80097f6:	469c      	mov	ip, r3
 80097f8:	4465      	add	r5, ip
 80097fa:	79ea      	ldrb	r2, [r5, #7]
 80097fc:	7a2b      	ldrb	r3, [r5, #8]
 80097fe:	0212      	lsls	r2, r2, #8
 8009800:	041b      	lsls	r3, r3, #16
 8009802:	18d2      	adds	r2, r2, r3
 8009804:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 8009806:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009808:	18d2      	adds	r2, r2, r3
 800980a:	7a6b      	ldrb	r3, [r5, #9]
 800980c:	061b      	lsls	r3, r3, #24
 800980e:	18d2      	adds	r2, r2, r3
 8009810:	2300      	movs	r3, #0
 8009812:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009814:	0031      	movs	r1, r6
 8009816:	f006 fbfb 	bl	8010010 <HAL_FLASH_Program>
 800981a:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800981c:	e7cb      	b.n	80097b6 <PxMessagingTask+0x1372>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800981e:	8832      	ldrh	r2, [r6, #0]
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <PxMessagingTask+0x140c>)
 8009822:	429a      	cmp	r2, r3
 8009824:	d1c4      	bne.n	80097b0 <PxMessagingTask+0x136c>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	469c      	mov	ip, r3
 800982a:	4465      	add	r5, ip
 800982c:	79aa      	ldrb	r2, [r5, #6]
 800982e:	2300      	movs	r3, #0
 8009830:	e7d7      	b.n	80097e2 <PxMessagingTask+0x139e>
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	20000b3c 	.word	0x20000b3c
 8009838:	200067cc 	.word	0x200067cc
 800983c:	20000c3c 	.word	0x20000c3c
 8009840:	00007fff 	.word	0x00007fff
 8009844:	08017040 	.word	0x08017040
 8009848:	0001ffff 	.word	0x0001ffff
 800984c:	08017060 	.word	0x08017060
 8009850:	0000ffff 	.word	0x0000ffff
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009854:	6833      	ldr	r3, [r6, #0]
 8009856:	3301      	adds	r3, #1
 8009858:	d1aa      	bne.n	80097b0 <PxMessagingTask+0x136c>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800985a:	9b05      	ldr	r3, [sp, #20]
 800985c:	4641      	mov	r1, r8
 800985e:	469c      	mov	ip, r3
 8009860:	4465      	add	r5, ip
 8009862:	79ea      	ldrb	r2, [r5, #7]
 8009864:	7a2b      	ldrb	r3, [r5, #8]
 8009866:	0212      	lsls	r2, r2, #8
 8009868:	041b      	lsls	r3, r3, #16
 800986a:	18d2      	adds	r2, r2, r3
 800986c:	79ab      	ldrb	r3, [r5, #6]
													status =HAL_FLASH_Program(
 800986e:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009870:	18d2      	adds	r2, r2, r3
 8009872:	7a6b      	ldrb	r3, [r5, #9]
 8009874:	061b      	lsls	r3, r3, #24
 8009876:	18d2      	adds	r2, r2, r3
 8009878:	2300      	movs	r3, #0
 800987a:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800987c:	0031      	movs	r1, r6
 800987e:	f006 fbc7 	bl	8010010 <HAL_FLASH_Program>
 8009882:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 8009884:	e797      	b.n	80097b6 <PxMessagingTask+0x1372>
 8009886:	46c0      	nop			; (mov r8, r8)

08009888 <CLI_Transmit_DataCommand>:
	Module_Status status = H1AR0_OK;;



	static int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8009888:	2300      	movs	r3, #0
portBASE_TYPE CLI_Transmit_DataCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 800988a:	b510      	push	{r4, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	0004      	movs	r4, r0


	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 8009890:	2101      	movs	r1, #1
portBASE_TYPE CLI_Transmit_DataCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8009892:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 8009894:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8009896:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 8009898:	f003 fc60 	bl	800d15c <FreeRTOS_CLIGetParameter>


	status=TransmitData(pcParameterString1, xParameterStringLength1);
	if(status == H1AR0_OK)
	{
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);
 800989c:	4903      	ldr	r1, [pc, #12]	; (80098ac <CLI_Transmit_DataCommand+0x24>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 800989e:	0002      	movs	r2, r0
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);
 80098a0:	0020      	movs	r0, r4
 80098a2:	f008 ff3b 	bl	801271c <sprintf>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);



	return pdFALSE;
}
 80098a6:	2000      	movs	r0, #0
 80098a8:	b002      	add	sp, #8
 80098aa:	bd10      	pop	{r4, pc}
 80098ac:	080197ac 	.word	0x080197ac

080098b0 <SystemClock_Config>:
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80098b0:	2310      	movs	r3, #16
{
 80098b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b4:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80098b6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098b8:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098ba:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80098bc:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098be:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098c0:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098c2:	0276      	lsls	r6, r6, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098c4:	035b      	lsls	r3, r3, #13
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80098c6:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098c8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80098ca:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80098cc:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80098ce:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80098d0:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098d2:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098d4:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80098d6:	f006 fe33 	bl	8010540 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80098da:	2307      	movs	r3, #7
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80098dc:	2101      	movs	r1, #1
 80098de:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80098e0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80098e2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80098e4:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80098e6:	9703      	str	r7, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80098e8:	f007 f8cc 	bl	8010a84 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80098ec:	4b1a      	ldr	r3, [pc, #104]	; (8009958 <SystemClock_Config+0xa8>)
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80098ee:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80098f0:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80098f2:	9508      	str	r5, [sp, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80098f4:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80098f6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80098f8:	f007 fa50 	bl	8010d9c <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 80098fc:	2180      	movs	r1, #128	; 0x80
 80098fe:	4d17      	ldr	r5, [pc, #92]	; (800995c <SystemClock_Config+0xac>)
 8009900:	0549      	lsls	r1, r1, #21
 8009902:	69ea      	ldr	r2, [r5, #28]
 8009904:	430a      	orrs	r2, r1
 8009906:	61ea      	str	r2, [r5, #28]
 8009908:	69eb      	ldr	r3, [r5, #28]
 800990a:	400b      	ands	r3, r1
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 8009910:	f006 fe0c 	bl	801052c <HAL_PWR_EnableBkUpAccess>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009914:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009916:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800991c:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800991e:	f007 fa3d 	bl	8010d9c <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8009922:	f007 fa0d 	bl	8010d40 <HAL_RCC_GetHCLKFreq>
 8009926:	21fa      	movs	r1, #250	; 0xfa
 8009928:	0089      	lsls	r1, r1, #2
 800992a:	f7f6 fc11 	bl	8000150 <__udivsi3>
 800992e:	f005 fca7 	bl	800f280 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009932:	2004      	movs	r0, #4
 8009934:	f005 fcc0 	bl	800f2b8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009938:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE();
 800993a:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800993c:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE();
 800993e:	4323      	orrs	r3, r4
 8009940:	61ab      	str	r3, [r5, #24]
 8009942:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009944:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE();
 8009946:	401c      	ands	r4, r3
 8009948:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800994a:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE();
 800994c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800994e:	f005 fc57 	bl	800f200 <HAL_NVIC_SetPriority>
}
 8009952:	b01b      	add	sp, #108	; 0x6c
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	00040003 	.word	0x00040003
 800995c:	40021000 	.word	0x40021000

08009960 <SaveToRO>:
{
 8009960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009962:	46de      	mov	lr, fp
 8009964:	4657      	mov	r7, sl
 8009966:	464e      	mov	r6, r9
 8009968:	4645      	mov	r5, r8
 800996a:	b5e0      	push	{r5, r6, r7, lr}
 800996c:	b087      	sub	sp, #28
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800996e:	2215      	movs	r2, #21
 8009970:	2100      	movs	r1, #0
 8009972:	4668      	mov	r0, sp
 8009974:	f008 fcd8 	bl	8012328 <memset>
	HAL_FLASH_Unlock();
 8009978:	f006 faea 	bl	800ff50 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800997c:	486a      	ldr	r0, [pc, #424]	; (8009b28 <SaveToRO+0x1c8>)
 800997e:	f006 fc17 	bl	80101b0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009982:	486a      	ldr	r0, [pc, #424]	; (8009b2c <SaveToRO+0x1cc>)
 8009984:	f006 fb00 	bl	800ff88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 8009988:	2800      	cmp	r0, #0
 800998a:	d16e      	bne.n	8009a6a <SaveToRO+0x10a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800998c:	2202      	movs	r2, #2
 800998e:	4c68      	ldr	r4, [pc, #416]	; (8009b30 <SaveToRO+0x1d0>)
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	4393      	bics	r3, r2
 8009994:	6123      	str	r3, [r4, #16]
	if (myID)
 8009996:	4b67      	ldr	r3, [pc, #412]	; (8009b34 <SaveToRO+0x1d4>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d000      	beq.n	80099a0 <SaveToRO+0x40>
 800999e:	e06e      	b.n	8009a7e <SaveToRO+0x11e>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80099a0:	4b65      	ldr	r3, [pc, #404]	; (8009b38 <SaveToRO+0x1d8>)
 80099a2:	469a      	mov	sl, r3
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d100      	bne.n	80099ac <SaveToRO+0x4c>
 80099aa:	e0b8      	b.n	8009b1e <SaveToRO+0x1be>
 80099ac:	4b63      	ldr	r3, [pc, #396]	; (8009b3c <SaveToRO+0x1dc>)
 80099ae:	2500      	movs	r5, #0
 80099b0:	4c63      	ldr	r4, [pc, #396]	; (8009b40 <SaveToRO+0x1e0>)
 80099b2:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80099b4:	4f5e      	ldr	r7, [pc, #376]	; (8009b30 <SaveToRO+0x1d0>)
 80099b6:	e006      	b.n	80099c6 <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 80099b8:	4653      	mov	r3, sl
 80099ba:	3501      	adds	r5, #1
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	b2ed      	uxtb	r5, r5
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	d800      	bhi.n	80099c6 <SaveToRO+0x66>
 80099c4:	e0ab      	b.n	8009b1e <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 80099c6:	00ab      	lsls	r3, r5, #2
 80099c8:	1959      	adds	r1, r3, r5
 80099ca:	4698      	mov	r8, r3
 80099cc:	464b      	mov	r3, r9
 80099ce:	0089      	lsls	r1, r1, #2
 80099d0:	5c5b      	ldrb	r3, [r3, r1]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0f0      	beq.n	80099b8 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 80099d6:	466b      	mov	r3, sp
 80099d8:	22fe      	movs	r2, #254	; 0xfe
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 80099da:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 80099dc:	701a      	strb	r2, [r3, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 80099de:	4449      	add	r1, r9
 80099e0:	2214      	movs	r2, #20
 80099e2:	f008 fc98 	bl	8012316 <memcpy>
 80099e6:	2314      	movs	r3, #20
 80099e8:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 80099ea:	466b      	mov	r3, sp
 80099ec:	44a3      	add	fp, r4
 80099ee:	1b1e      	subs	r6, r3, r4
 80099f0:	465b      	mov	r3, fp
 80099f2:	46ab      	mov	fp, r5
 80099f4:	001d      	movs	r5, r3
 80099f6:	5b32      	ldrh	r2, [r6, r4]
 80099f8:	2300      	movs	r3, #0
 80099fa:	0021      	movs	r1, r4
 80099fc:	2001      	movs	r0, #1
 80099fe:	f006 fb07 	bl	8010010 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a02:	484a      	ldr	r0, [pc, #296]	; (8009b2c <SaveToRO+0x1cc>)
 8009a04:	f006 fac0 	bl	800ff88 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d12e      	bne.n	8009a6a <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 8009a10:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a12:	4393      	bics	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 8009a16:	42ac      	cmp	r4, r5
 8009a18:	d1ed      	bne.n	80099f6 <SaveToRO+0x96>
 8009a1a:	465d      	mov	r5, fp
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a1c:	4643      	mov	r3, r8
 8009a1e:	195b      	adds	r3, r3, r5
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	444b      	add	r3, r9
 8009a24:	2600      	movs	r6, #0
 8009a26:	4698      	mov	r8, r3
 8009a28:	0025      	movs	r5, r4
 8009a2a:	e012      	b.n	8009a52 <SaveToRO+0xf2>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 8009a2c:	0073      	lsls	r3, r6, #1
 8009a2e:	5ae2      	ldrh	r2, [r4, r3]
 8009a30:	0029      	movs	r1, r5
 8009a32:	2300      	movs	r3, #0
 8009a34:	2001      	movs	r0, #1
 8009a36:	f006 faeb 	bl	8010010 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a3a:	483c      	ldr	r0, [pc, #240]	; (8009b2c <SaveToRO+0x1cc>)
 8009a3c:	f006 faa4 	bl	800ff88 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d112      	bne.n	8009a6a <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a44:	2201      	movs	r2, #1
 8009a46:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a48:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a4a:	4393      	bics	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8009a4e:	3502      	adds	r5, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009a50:	b2f6      	uxtb	r6, r6
 8009a52:	4643      	mov	r3, r8
 8009a54:	68dc      	ldr	r4, [r3, #12]
 8009a56:	0020      	movs	r0, r4
 8009a58:	f7f6 fb5e 	bl	8000118 <strlen>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	0840      	lsrs	r0, r0, #1
 8009a60:	4286      	cmp	r6, r0
 8009a62:	d3e3      	bcc.n	8009a2c <SaveToRO+0xcc>
 8009a64:	002c      	movs	r4, r5
 8009a66:	465d      	mov	r5, fp
 8009a68:	e7a6      	b.n	80099b8 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8009a6a:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <SaveToRO+0x1e4>)
 8009a6c:	69d8      	ldr	r0, [r3, #28]
 8009a6e:	b2c0      	uxtb	r0, r0
}
 8009a70:	b007      	add	sp, #28
 8009a72:	bc3c      	pop	{r2, r3, r4, r5}
 8009a74:	4690      	mov	r8, r2
 8009a76:	4699      	mov	r9, r3
 8009a78:	46a2      	mov	sl, r4
 8009a7a:	46ab      	mov	fp, r5
 8009a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 8009a7e:	4a32      	ldr	r2, [pc, #200]	; (8009b48 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009a80:	4929      	ldr	r1, [pc, #164]	; (8009b28 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N<<8) + myID;
 8009a82:	4693      	mov	fp, r2
 8009a84:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009a86:	2001      	movs	r0, #1
		temp = (uint16_t) (N<<8) + myID;
 8009a88:	0212      	lsls	r2, r2, #8
 8009a8a:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f006 fabe 	bl	8010010 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009a94:	4825      	ldr	r0, [pc, #148]	; (8009b2c <SaveToRO+0x1cc>)
 8009a96:	f006 fa77 	bl	800ff88 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d1e5      	bne.n	8009a6a <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	4393      	bics	r3, r2
 8009aa4:	6123      	str	r3, [r4, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d100      	bne.n	8009ab0 <SaveToRO+0x150>
 8009aae:	e777      	b.n	80099a0 <SaveToRO+0x40>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	469a      	mov	sl, r3
 8009ab4:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 8009ab6:	2602      	movs	r6, #2
 8009ab8:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009aba:	46a0      	mov	r8, r4
 8009abc:	4653      	mov	r3, sl
 8009abe:	1e5d      	subs	r5, r3, #1
 8009ac0:	2316      	movs	r3, #22
 8009ac2:	464f      	mov	r7, r9
 8009ac4:	435d      	muls	r5, r3
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	3716      	adds	r7, #22
 8009aca:	195c      	adds	r4, r3, r5
 8009acc:	197f      	adds	r7, r7, r5
 8009ace:	e002      	b.n	8009ad6 <SaveToRO+0x176>
 8009ad0:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009ad2:	42a7      	cmp	r7, r4
 8009ad4:	d01a      	beq.n	8009b0c <SaveToRO+0x1ac>
				if (array[i-1][0]) {
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	5b5b      	ldrh	r3, [r3, r5]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f8      	beq.n	8009ad0 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 8009ade:	4b12      	ldr	r3, [pc, #72]	; (8009b28 <SaveToRO+0x1c8>)
 8009ae0:	8822      	ldrh	r2, [r4, #0]
 8009ae2:	18f1      	adds	r1, r6, r3
 8009ae4:	2001      	movs	r0, #1
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f006 fa92 	bl	8010010 <HAL_FLASH_Program>
					add += 2;
 8009aec:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009aee:	480f      	ldr	r0, [pc, #60]	; (8009b2c <SaveToRO+0x1cc>)
					add += 2;
 8009af0:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009af2:	f006 fa49 	bl	800ff88 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d1b7      	bne.n	8009a6a <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009afa:	4643      	mov	r3, r8
 8009afc:	2201      	movs	r2, #1
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	3402      	adds	r4, #2
 8009b02:	4393      	bics	r3, r2
 8009b04:	4642      	mov	r2, r8
 8009b06:	6113      	str	r3, [r2, #16]
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009b08:	42a7      	cmp	r7, r4
 8009b0a:	d1e4      	bne.n	8009ad6 <SaveToRO+0x176>
		for(uint8_t i=1 ; i<=N ; i++)
 8009b0c:	4653      	mov	r3, sl
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	469a      	mov	sl, r3
 8009b14:	465b      	mov	r3, fp
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	4553      	cmp	r3, sl
 8009b1a:	d2cf      	bcs.n	8009abc <SaveToRO+0x15c>
 8009b1c:	e740      	b.n	80099a0 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 8009b1e:	f006 fa29 	bl	800ff74 <HAL_FLASH_Lock>
	return result;
 8009b22:	2000      	movs	r0, #0
 8009b24:	e7a4      	b.n	8009a70 <SaveToRO+0x110>
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	0801d800 	.word	0x0801d800
 8009b2c:	0000c350 	.word	0x0000c350
 8009b30:	40022000 	.word	0x40022000
 8009b34:	20000a98 	.word	0x20000a98
 8009b38:	200016d4 	.word	0x200016d4
 8009b3c:	20006860 	.word	0x20006860
 8009b40:	0801dc00 	.word	0x0801dc00
 8009b44:	20006db8 	.word	0x20006db8
 8009b48:	20000008 	.word	0x20000008
 8009b4c:	20000ed4 	.word	0x20000ed4

08009b50 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 8009b50:	228f      	movs	r2, #143	; 0x8f
{
 8009b52:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8009b54:	0092      	lsls	r2, r2, #2
 8009b56:	2100      	movs	r1, #0
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <ClearROtopology+0x20>)
 8009b5a:	f008 fbe5 	bl	8012328 <memset>
	N = 1; myID = 0;
 8009b5e:	2201      	movs	r2, #1
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <ClearROtopology+0x24>)
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	2200      	movs	r2, #0
 8009b66:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <ClearROtopology+0x28>)
 8009b68:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8009b6a:	f7ff fef9 	bl	8009960 <SaveToRO>
}
 8009b6e:	bd10      	pop	{r4, pc}
 8009b70:	20000ed4 	.word	0x20000ed4
 8009b74:	20000008 	.word	0x20000008
 8009b78:	20000a98 	.word	0x20000a98

08009b7c <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009b7c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009b7e:	f003 f8ab 	bl	800ccd8 <GetUart>
	huart->Init.BaudRate =57600;
 8009b82:	23e1      	movs	r3, #225	; 0xe1
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009b88:	2380      	movs	r3, #128	; 0x80
 8009b8a:	00db      	lsls	r3, r3, #3
 8009b8c:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009b8e:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8009b90:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009b92:	015b      	lsls	r3, r3, #5
 8009b94:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009b96:	f007 ff99 	bl	8011acc <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009b9a:	2120      	movs	r1, #32
 8009b9c:	6822      	ldr	r2, [r4, #0]
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	6013      	str	r3, [r2, #0]
}
 8009ba4:	bd10      	pop	{r4, pc}
 8009ba6:	46c0      	nop			; (mov r8, r8)

08009ba8 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	46ce      	mov	lr, r9
 8009bac:	4647      	mov	r7, r8
 8009bae:	4698      	mov	r8, r3
 8009bb0:	b580      	push	{r7, lr}
	myOutport =FindRoute(myID,dst);
 8009bb2:	4c2a      	ldr	r4, [pc, #168]	; (8009c5c <remoteBootloaderUpdate+0xb4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	4681      	mov	r9, r0
	myOutport =FindRoute(myID,dst);
 8009bb8:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009bba:	000f      	movs	r7, r1
 8009bbc:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8009bbe:	f7f9 ff9d 	bl	8003afc <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009bc2:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 8009bc4:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d11a      	bne.n	8009c00 <remoteBootloaderUpdate+0x58>
	if(src == myID){
 8009bca:	7823      	ldrb	r3, [r4, #0]
 8009bcc:	454b      	cmp	r3, r9
 8009bce:	d03b      	beq.n	8009c48 <remoteBootloaderUpdate+0xa0>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009bd0:	0028      	movs	r0, r5
 8009bd2:	f7ff ffd3 	bl	8009b7c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009bd6:	0030      	movs	r0, r6
 8009bd8:	f7ff ffd0 	bl	8009b7c <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009bdc:	2300      	movs	r3, #0
 8009bde:	7821      	ldrb	r1, [r4, #0]
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	9302      	str	r3, [sp, #8]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	3303      	adds	r3, #3
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	0032      	movs	r2, r6
 8009bee:	000b      	movs	r3, r1
 8009bf0:	0028      	movs	r0, r5
 8009bf2:	f7fe fab7 	bl	8008164 <StartScastDMAStream>
}
 8009bf6:	b005      	add	sp, #20
 8009bf8:	bc0c      	pop	{r2, r3}
 8009bfa:	4690      	mov	r8, r2
 8009bfc:	4699      	mov	r9, r3
 8009bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009c00:	7823      	ldrb	r3, [r4, #0]
 8009c02:	42bb      	cmp	r3, r7
 8009c04:	d01c      	beq.n	8009c40 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8009c06:	454b      	cmp	r3, r9
 8009c08:	d1e2      	bne.n	8009bd0 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c0a:	f003 faa3 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c0e:	4b14      	ldr	r3, [pc, #80]	; (8009c60 <remoteBootloaderUpdate+0xb8>)
 8009c10:	003a      	movs	r2, r7
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c16:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009c18:	f008 fd80 	bl	801271c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009c1c:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <remoteBootloaderUpdate+0xbc>)
 8009c1e:	4648      	mov	r0, r9
 8009c20:	6819      	ldr	r1, [r3, #0]
 8009c22:	f008 fd9b 	bl	801275c <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009c26:	4648      	mov	r0, r9
 8009c28:	f7f6 fa76 	bl	8000118 <strlen>
 8009c2c:	2332      	movs	r3, #50	; 0x32
 8009c2e:	b282      	uxth	r2, r0
 8009c30:	4649      	mov	r1, r9
 8009c32:	0028      	movs	r0, r5
 8009c34:	f003 f81e 	bl	800cc74 <writePxITMutex>
		Delay_ms(100);
 8009c38:	2064      	movs	r0, #100	; 0x64
 8009c3a:	f005 f81f 	bl	800ec7c <HAL_Delay>
 8009c3e:	e7c7      	b.n	8009bd0 <remoteBootloaderUpdate+0x28>
 8009c40:	4646      	mov	r6, r8
	if(src == myID){
 8009c42:	454f      	cmp	r7, r9
 8009c44:	d1c4      	bne.n	8009bd0 <remoteBootloaderUpdate+0x28>
 8009c46:	e7e0      	b.n	8009c0a <remoteBootloaderUpdate+0x62>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c48:	f003 fa84 	bl	800d154 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <remoteBootloaderUpdate+0xc0>)
 8009c4e:	003a      	movs	r2, r7
 8009c50:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009c52:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009c54:	f008 fd62 	bl	801271c <sprintf>
 8009c58:	e7e0      	b.n	8009c1c <remoteBootloaderUpdate+0x74>
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	20000a98 	.word	0x20000a98
 8009c60:	20000058 	.word	0x20000058
 8009c64:	20000054 	.word	0x20000054
 8009c68:	2000005c 	.word	0x2000005c

08009c6c <Module_Peripheral_Init>:
{
 8009c6c:	b510      	push	{r4, lr}
  MX_USART2_UART_Init();
 8009c6e:	f002 fdfd 	bl	800c86c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009c72:	f002 fe13 	bl	800c89c <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8009c76:	f002 fe29 	bl	800c8cc <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8009c7a:	f002 fe3f 	bl	800c8fc <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8009c7e:	f002 fe55 	bl	800c92c <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8009c82:	f002 fdd9 	bl	800c838 <MX_USART1_UART_Init>
}
 8009c86:	bd10      	pop	{r4, pc}

08009c88 <Module_MessagingTask>:
			result = H1AR0_ERR_UnknownMessage;
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <Module_MessagingTask+0xc>)
 8009c8a:	469c      	mov	ip, r3
 8009c8c:	4460      	add	r0, ip
 8009c8e:	1e43      	subs	r3, r0, #1
 8009c90:	4198      	sbcs	r0, r3
}
 8009c92:	4770      	bx	lr
 8009c94:	fffffaec 	.word	0xfffffaec

08009c98 <RegisterModuleCLICommands>:
{
 8009c98:	b510      	push	{r4, lr}
	 FreeRTOS_CLIRegisterCommand(&CLI_Transmit_DataCommandDefinition);
 8009c9a:	4802      	ldr	r0, [pc, #8]	; (8009ca4 <RegisterModuleCLICommands+0xc>)
 8009c9c:	f003 f9ca 	bl	800d034 <FreeRTOS_CLIRegisterCommand>
}
 8009ca0:	bd10      	pop	{r4, pc}
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	08017080 	.word	0x08017080

08009ca8 <GetPort>:
	if (huart->Instance == USART2)
 8009ca8:	6800      	ldr	r0, [r0, #0]
 8009caa:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <GetPort+0x48>)
 8009cac:	4298      	cmp	r0, r3
 8009cae:	d014      	beq.n	8009cda <GetPort+0x32>
	else if (huart->Instance == USART6)
 8009cb0:	4b10      	ldr	r3, [pc, #64]	; (8009cf4 <GetPort+0x4c>)
 8009cb2:	4298      	cmp	r0, r3
 8009cb4:	d015      	beq.n	8009ce2 <GetPort+0x3a>
	else if (huart->Instance == USART5)
 8009cb6:	4b10      	ldr	r3, [pc, #64]	; (8009cf8 <GetPort+0x50>)
 8009cb8:	4298      	cmp	r0, r3
 8009cba:	d014      	beq.n	8009ce6 <GetPort+0x3e>
	else if (huart->Instance == USART4)
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <GetPort+0x54>)
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	d00d      	beq.n	8009cde <GetPort+0x36>
	else if (huart->Instance == USART3)
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	; (8009d00 <GetPort+0x58>)
 8009cc4:	4298      	cmp	r0, r3
 8009cc6:	d010      	beq.n	8009cea <GetPort+0x42>
	return 0;
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <GetPort+0x5c>)
 8009cca:	469c      	mov	ip, r3
 8009ccc:	4460      	add	r0, ip
 8009cce:	4243      	negs	r3, r0
 8009cd0:	4158      	adcs	r0, r3
 8009cd2:	2306      	movs	r3, #6
 8009cd4:	4240      	negs	r0, r0
 8009cd6:	4018      	ands	r0, r3
}
 8009cd8:	4770      	bx	lr
			return P1;
 8009cda:	2001      	movs	r0, #1
 8009cdc:	e7fc      	b.n	8009cd8 <GetPort+0x30>
			return P4;
 8009cde:	2004      	movs	r0, #4
 8009ce0:	e7fa      	b.n	8009cd8 <GetPort+0x30>
			return P2;
 8009ce2:	2002      	movs	r0, #2
 8009ce4:	e7f8      	b.n	8009cd8 <GetPort+0x30>
			return P3;
 8009ce6:	2003      	movs	r0, #3
 8009ce8:	e7f6      	b.n	8009cd8 <GetPort+0x30>
			return P5;
 8009cea:	2005      	movs	r0, #5
 8009cec:	e7f4      	b.n	8009cd8 <GetPort+0x30>
 8009cee:	46c0      	nop			; (mov r8, r8)
 8009cf0:	40004400 	.word	0x40004400
 8009cf4:	40011400 	.word	0x40011400
 8009cf8:	40005000 	.word	0x40005000
 8009cfc:	40004c00 	.word	0x40004c00
 8009d00:	40004800 	.word	0x40004800
 8009d04:	bffec800 	.word	0xbffec800

08009d08 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 8009d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0a:	46de      	mov	lr, fp
 8009d0c:	4657      	mov	r7, sl
 8009d0e:	464e      	mov	r6, r9
 8009d10:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 8009d12:	2201      	movs	r2, #1
 8009d14:	4b57      	ldr	r3, [pc, #348]	; (8009e74 <DMA_Init+0x16c>)
{
 8009d16:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 8009d18:	6959      	ldr	r1, [r3, #20]
{
 8009d1a:	b085      	sub	sp, #20
	__DMA1_CLK_ENABLE();
 8009d1c:	4311      	orrs	r1, r2
 8009d1e:	6159      	str	r1, [r3, #20]
 8009d20:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009d22:	4c55      	ldr	r4, [pc, #340]	; (8009e78 <DMA_Init+0x170>)
	__DMA1_CLK_ENABLE();
 8009d24:	4011      	ands	r1, r2
 8009d26:	9101      	str	r1, [sp, #4]
 8009d28:	9901      	ldr	r1, [sp, #4]
	__DMA2_CLK_ENABLE();
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	6958      	ldr	r0, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d2e:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 8009d30:	4308      	orrs	r0, r1
 8009d32:	6158      	str	r0, [r3, #20]
 8009d34:	6958      	ldr	r0, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d36:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 8009d38:	4001      	ands	r1, r0
 8009d3a:	9102      	str	r1, [sp, #8]
 8009d3c:	9902      	ldr	r1, [sp, #8]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8009d3e:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009d40:	2680      	movs	r6, #128	; 0x80
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8009d42:	4311      	orrs	r1, r2
 8009d44:	6159      	str	r1, [r3, #20]
 8009d46:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d48:	01bf      	lsls	r7, r7, #6
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8009d4a:	401a      	ands	r2, r3
 8009d4c:	9203      	str	r2, [sp, #12]
 8009d4e:	9b03      	ldr	r3, [sp, #12]
	hDMA->Instance = ch;
 8009d50:	4b4a      	ldr	r3, [pc, #296]	; (8009e7c <DMA_Init+0x174>)
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d52:	6065      	str	r5, [r4, #4]
	hDMA->Instance = ch;
 8009d54:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d56:	2320      	movs	r3, #32
 8009d58:	469b      	mov	fp, r3
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009d5a:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009d5c:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d5e:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d60:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d62:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d64:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 8009d66:	0020      	movs	r0, r4
 8009d68:	f005 fbd2 	bl	800f510 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009d6c:	4b44      	ldr	r3, [pc, #272]	; (8009e80 <DMA_Init+0x178>)
	HAL_DMA_Init(hDMA);		
 8009d6e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009d70:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d72:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d74:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009d76:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009d78:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d7a:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d7c:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d7e:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d80:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 8009d82:	3038      	adds	r0, #56	; 0x38
 8009d84:	f005 fbc4 	bl	800f510 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009d88:	4b3e      	ldr	r3, [pc, #248]	; (8009e84 <DMA_Init+0x17c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d8a:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 8009d8c:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d8e:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 8009d90:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d92:	50e5      	str	r5, [r4, r3]
 8009d94:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009d96:	3304      	adds	r3, #4
 8009d98:	50e2      	str	r2, [r4, r3]
 8009d9a:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009da0:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009da2:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009da4:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009da6:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 8009da8:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009daa:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 8009dac:	f005 fbb0 	bl	800f510 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009db0:	23a8      	movs	r3, #168	; 0xa8
 8009db2:	4a35      	ldr	r2, [pc, #212]	; (8009e88 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 8009db4:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009db6:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009db8:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009dba:	3304      	adds	r3, #4
 8009dbc:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009dca:	3304      	adds	r3, #4
 8009dcc:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009dce:	3304      	adds	r3, #4
 8009dd0:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009dd6:	30a8      	adds	r0, #168	; 0xa8
 8009dd8:	f005 fb9a 	bl	800f510 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009ddc:	23e0      	movs	r3, #224	; 0xe0
 8009dde:	4a2b      	ldr	r2, [pc, #172]	; (8009e8c <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 8009de0:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009de2:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009de4:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009de6:	3304      	adds	r3, #4
 8009de8:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009dea:	3304      	adds	r3, #4
 8009dec:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009dee:	3304      	adds	r3, #4
 8009df0:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009df2:	3304      	adds	r3, #4
 8009df4:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009df6:	3304      	adds	r3, #4
 8009df8:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009dfe:	3304      	adds	r3, #4
 8009e00:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e02:	30e0      	adds	r0, #224	; 0xe0
 8009e04:	f005 fb84 	bl	800f510 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 8009e08:	4c21      	ldr	r4, [pc, #132]	; (8009e90 <DMA_Init+0x188>)
 8009e0a:	4b22      	ldr	r3, [pc, #136]	; (8009e94 <DMA_Init+0x18c>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e0c:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 8009e0e:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e10:	2310      	movs	r3, #16
 8009e12:	469b      	mov	fp, r3
 8009e14:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e16:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e18:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e1a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 8009e1c:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e1e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 8009e20:	0020      	movs	r0, r4
 8009e22:	f005 fb75 	bl	800f510 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e26:	4b1c      	ldr	r3, [pc, #112]	; (8009e98 <DMA_Init+0x190>)
	HAL_DMA_Init(hDMA);		
 8009e28:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009e2a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e2c:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e2e:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e30:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e32:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e34:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e36:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 8009e38:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e3a:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 8009e3c:	3038      	adds	r0, #56	; 0x38
 8009e3e:	f005 fb67 	bl	800f510 <HAL_DMA_Init>
	hDMA->Instance = ch;
 8009e42:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <DMA_Init+0x194>)
	HAL_DMA_Init(hDMA);		
 8009e44:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 8009e46:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e48:	465b      	mov	r3, fp
 8009e4a:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e4c:	4653      	mov	r3, sl
 8009e4e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 8009e50:	464b      	mov	r3, r9
 8009e52:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e54:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009e56:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 8009e58:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e5a:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 8009e5c:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 8009e5e:	3070      	adds	r0, #112	; 0x70
 8009e60:	f005 fb56 	bl	800f510 <HAL_DMA_Init>
}
 8009e64:	b005      	add	sp, #20
 8009e66:	bc3c      	pop	{r2, r3, r4, r5}
 8009e68:	4690      	mov	r8, r2
 8009e6a:	4699      	mov	r9, r3
 8009e6c:	46a2      	mov	sl, r4
 8009e6e:	46ab      	mov	fp, r5
 8009e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	40021000 	.word	0x40021000
 8009e78:	2000224c 	.word	0x2000224c
 8009e7c:	40020008 	.word	0x40020008
 8009e80:	40020030 	.word	0x40020030
 8009e84:	40020058 	.word	0x40020058
 8009e88:	4002006c 	.word	0x4002006c
 8009e8c:	4002041c 	.word	0x4002041c
 8009e90:	200021a4 	.word	0x200021a4
 8009e94:	4002001c 	.word	0x4002001c
 8009e98:	40020044 	.word	0x40020044
 8009e9c:	40020080 	.word	0x40020080

08009ea0 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 8009ea0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 8009ea2:	1e44      	subs	r4, r0, #1
 8009ea4:	00e5      	lsls	r5, r4, #3
 8009ea6:	4e07      	ldr	r6, [pc, #28]	; (8009ec4 <StopStreamDMA+0x24>)
 8009ea8:	1b2d      	subs	r5, r5, r4
 8009eaa:	00ed      	lsls	r5, r5, #3
 8009eac:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 8009eae:	f005 fb87 	bl	800f5c0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 8009eb6:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 8009eb8:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 8009eba:	4a03      	ldr	r2, [pc, #12]	; (8009ec8 <StopStreamDMA+0x28>)
 8009ebc:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 8009ebe:	4a03      	ldr	r2, [pc, #12]	; (8009ecc <StopStreamDMA+0x2c>)
 8009ec0:	50a3      	str	r3, [r4, r2]

}
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	20002054 	.word	0x20002054
 8009ec8:	20001864 	.word	0x20001864
 8009ecc:	20001878 	.word	0x20001878

08009ed0 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 8009ed0:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 8009ed6:	4d0c      	ldr	r5, [pc, #48]	; (8009f08 <SwitchMsgDMAToStream+0x38>)
 8009ed8:	1a24      	subs	r4, r4, r0
 8009eda:	00e4      	lsls	r4, r4, #3
 8009edc:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 8009ede:	f005 fb6f 	bl	800f5c0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 8009ee6:	4809      	ldr	r0, [pc, #36]	; (8009f0c <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 8009ee8:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 8009eea:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009eec:	1900      	adds	r0, r0, r4
 8009eee:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8009ef0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 8009ef2:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ef4:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ef6:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 8009ef8:	3320      	adds	r3, #32
 8009efa:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	015b      	lsls	r3, r3, #5
 8009f00:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 8009f02:	f005 fb05 	bl	800f510 <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	2000224c 	.word	0x2000224c
 8009f0c:	20002054 	.word	0x20002054

08009f10 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 8009f10:	6803      	ldr	r3, [r0, #0]
 8009f12:	4a21      	ldr	r2, [pc, #132]	; (8009f98 <SetupDMAInterrupts+0x88>)
{
 8009f14:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d01c      	beq.n	8009f54 <SetupDMAInterrupts+0x44>
 8009f1a:	d80e      	bhi.n	8009f3a <SetupDMAInterrupts+0x2a>
 8009f1c:	4a1f      	ldr	r2, [pc, #124]	; (8009f9c <SetupDMAInterrupts+0x8c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d026      	beq.n	8009f70 <SetupDMAInterrupts+0x60>
 8009f22:	d82d      	bhi.n	8009f80 <SetupDMAInterrupts+0x70>
 8009f24:	4a1e      	ldr	r2, [pc, #120]	; (8009fa0 <SetupDMAInterrupts+0x90>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d131      	bne.n	8009f8e <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 8009f2a:	2009      	movs	r0, #9
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f005 f967 	bl	800f200 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 8009f32:	2009      	movs	r0, #9
 8009f34:	f005 f990 	bl	800f258 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 8009f38:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 8009f3a:	4a1a      	ldr	r2, [pc, #104]	; (8009fa4 <SetupDMAInterrupts+0x94>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d017      	beq.n	8009f70 <SetupDMAInterrupts+0x60>
 8009f40:	d910      	bls.n	8009f64 <SetupDMAInterrupts+0x54>
 8009f42:	4a19      	ldr	r2, [pc, #100]	; (8009fa8 <SetupDMAInterrupts+0x98>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d005      	beq.n	8009f54 <SetupDMAInterrupts+0x44>
 8009f48:	4a18      	ldr	r2, [pc, #96]	; (8009fac <SetupDMAInterrupts+0x9c>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d002      	beq.n	8009f54 <SetupDMAInterrupts+0x44>
 8009f4e:	4a18      	ldr	r2, [pc, #96]	; (8009fb0 <SetupDMAInterrupts+0xa0>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d1f1      	bne.n	8009f38 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 8009f54:	2200      	movs	r2, #0
 8009f56:	200b      	movs	r0, #11
 8009f58:	f005 f952 	bl	800f200 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 8009f5c:	200b      	movs	r0, #11
 8009f5e:	f005 f97b 	bl	800f258 <HAL_NVIC_EnableIRQ>
}
 8009f62:	e7e9      	b.n	8009f38 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <SetupDMAInterrupts+0xa4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d0f4      	beq.n	8009f54 <SetupDMAInterrupts+0x44>
 8009f6a:	4a13      	ldr	r2, [pc, #76]	; (8009fb8 <SetupDMAInterrupts+0xa8>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d1e3      	bne.n	8009f38 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 8009f70:	2200      	movs	r2, #0
 8009f72:	200a      	movs	r0, #10
 8009f74:	f005 f944 	bl	800f200 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 8009f78:	200a      	movs	r0, #10
 8009f7a:	f005 f96d 	bl	800f258 <HAL_NVIC_EnableIRQ>
			break;
 8009f7e:	e7db      	b.n	8009f38 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 8009f80:	4a0e      	ldr	r2, [pc, #56]	; (8009fbc <SetupDMAInterrupts+0xac>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d0e6      	beq.n	8009f54 <SetupDMAInterrupts+0x44>
 8009f86:	4a0e      	ldr	r2, [pc, #56]	; (8009fc0 <SetupDMAInterrupts+0xb0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d1d5      	bne.n	8009f38 <SetupDMAInterrupts+0x28>
 8009f8c:	e7e2      	b.n	8009f54 <SetupDMAInterrupts+0x44>
 8009f8e:	4a0d      	ldr	r2, [pc, #52]	; (8009fc4 <SetupDMAInterrupts+0xb4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d0ed      	beq.n	8009f70 <SetupDMAInterrupts+0x60>
 8009f94:	e7d0      	b.n	8009f38 <SetupDMAInterrupts+0x28>
 8009f96:	46c0      	nop			; (mov r8, r8)
 8009f98:	4002006c 	.word	0x4002006c
 8009f9c:	40020030 	.word	0x40020030
 8009fa0:	40020008 	.word	0x40020008
 8009fa4:	4002041c 	.word	0x4002041c
 8009fa8:	40020444 	.word	0x40020444
 8009fac:	40020458 	.word	0x40020458
 8009fb0:	40020430 	.word	0x40020430
 8009fb4:	40020080 	.word	0x40020080
 8009fb8:	40020408 	.word	0x40020408
 8009fbc:	40020044 	.word	0x40020044
 8009fc0:	40020058 	.word	0x40020058
 8009fc4:	4002001c 	.word	0x4002001c

08009fc8 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 8009fc8:	6803      	ldr	r3, [r0, #0]
 8009fca:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <UnSetupDMAInterrupts+0x70>)
{
 8009fcc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d018      	beq.n	800a004 <UnSetupDMAInterrupts+0x3c>
 8009fd2:	d80a      	bhi.n	8009fea <UnSetupDMAInterrupts+0x22>
 8009fd4:	4a19      	ldr	r2, [pc, #100]	; (800a03c <UnSetupDMAInterrupts+0x74>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d01e      	beq.n	800a018 <UnSetupDMAInterrupts+0x50>
 8009fda:	d821      	bhi.n	800a020 <UnSetupDMAInterrupts+0x58>
 8009fdc:	4a18      	ldr	r2, [pc, #96]	; (800a040 <UnSetupDMAInterrupts+0x78>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d125      	bne.n	800a02e <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 8009fe2:	2009      	movs	r0, #9
 8009fe4:	f005 f942 	bl	800f26c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 8009fe8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 8009fea:	4a16      	ldr	r2, [pc, #88]	; (800a044 <UnSetupDMAInterrupts+0x7c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d013      	beq.n	800a018 <UnSetupDMAInterrupts+0x50>
 8009ff0:	d90c      	bls.n	800a00c <UnSetupDMAInterrupts+0x44>
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <UnSetupDMAInterrupts+0x80>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d005      	beq.n	800a004 <UnSetupDMAInterrupts+0x3c>
 8009ff8:	4a14      	ldr	r2, [pc, #80]	; (800a04c <UnSetupDMAInterrupts+0x84>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d002      	beq.n	800a004 <UnSetupDMAInterrupts+0x3c>
 8009ffe:	4a14      	ldr	r2, [pc, #80]	; (800a050 <UnSetupDMAInterrupts+0x88>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d1f1      	bne.n	8009fe8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a004:	200b      	movs	r0, #11
 800a006:	f005 f931 	bl	800f26c <HAL_NVIC_DisableIRQ>
}
 800a00a:	e7ed      	b.n	8009fe8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a00c:	4a11      	ldr	r2, [pc, #68]	; (800a054 <UnSetupDMAInterrupts+0x8c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d0f8      	beq.n	800a004 <UnSetupDMAInterrupts+0x3c>
 800a012:	4a11      	ldr	r2, [pc, #68]	; (800a058 <UnSetupDMAInterrupts+0x90>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d1e7      	bne.n	8009fe8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a018:	200a      	movs	r0, #10
 800a01a:	f005 f927 	bl	800f26c <HAL_NVIC_DisableIRQ>
			break;
 800a01e:	e7e3      	b.n	8009fe8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a020:	4a0e      	ldr	r2, [pc, #56]	; (800a05c <UnSetupDMAInterrupts+0x94>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d0ee      	beq.n	800a004 <UnSetupDMAInterrupts+0x3c>
 800a026:	4a0e      	ldr	r2, [pc, #56]	; (800a060 <UnSetupDMAInterrupts+0x98>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d1dd      	bne.n	8009fe8 <UnSetupDMAInterrupts+0x20>
 800a02c:	e7ea      	b.n	800a004 <UnSetupDMAInterrupts+0x3c>
 800a02e:	4a0d      	ldr	r2, [pc, #52]	; (800a064 <UnSetupDMAInterrupts+0x9c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d0f1      	beq.n	800a018 <UnSetupDMAInterrupts+0x50>
 800a034:	e7d8      	b.n	8009fe8 <UnSetupDMAInterrupts+0x20>
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	4002006c 	.word	0x4002006c
 800a03c:	40020030 	.word	0x40020030
 800a040:	40020008 	.word	0x40020008
 800a044:	4002041c 	.word	0x4002041c
 800a048:	40020444 	.word	0x40020444
 800a04c:	40020458 	.word	0x40020458
 800a050:	40020430 	.word	0x40020430
 800a054:	40020080 	.word	0x40020080
 800a058:	40020408 	.word	0x40020408
 800a05c:	40020044 	.word	0x40020044
 800a060:	40020058 	.word	0x40020058
 800a064:	4002001c 	.word	0x4002001c

0800a068 <DMA_MSG_TX_UnSetup>:
{	
 800a068:	b510      	push	{r4, lr}
 800a06a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a06c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a06e:	f7ff ffab 	bl	8009fc8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a076:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a078:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a07a:	bd10      	pop	{r4, pc}

0800a07c <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a07c:	6803      	ldr	r3, [r0, #0]
 800a07e:	4ac6      	ldr	r2, [pc, #792]	; (800a398 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800a080:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a082:	4293      	cmp	r3, r2
 800a084:	d03a      	beq.n	800a0fc <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
	// USART 2
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a086:	4ac5      	ldr	r2, [pc, #788]	; (800a39c <RemapAndLinkDMAtoUARTRx+0x320>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d058      	beq.n	800a13e <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
	// USART 3
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a08c:	4ac4      	ldr	r2, [pc, #784]	; (800a3a0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d100      	bne.n	800a094 <RemapAndLinkDMAtoUARTRx+0x18>
 800a092:	e093      	b.n	800a1bc <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);
	// USART 4
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a094:	4ac3      	ldr	r2, [pc, #780]	; (800a3a4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d100      	bne.n	800a09c <RemapAndLinkDMAtoUARTRx+0x20>
 800a09a:	e0c0      	b.n	800a21e <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);
	// USART 5
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a09c:	4ac2      	ldr	r2, [pc, #776]	; (800a3a8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d100      	bne.n	800a0a4 <RemapAndLinkDMAtoUARTRx+0x28>
 800a0a2:	e19d      	b.n	800a3e0 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);
	// USART 6
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a0a4:	4ac1      	ldr	r2, [pc, #772]	; (800a3ac <RemapAndLinkDMAtoUARTRx+0x330>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d100      	bne.n	800a0ac <RemapAndLinkDMAtoUARTRx+0x30>
 800a0aa:	e1b9      	b.n	800a420 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
	// USART 7
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a0ac:	4ac0      	ldr	r2, [pc, #768]	; (800a3b0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d000      	beq.n	800a0b4 <RemapAndLinkDMAtoUARTRx+0x38>
 800a0b2:	e265      	b.n	800a580 <RemapAndLinkDMAtoUARTRx+0x504>
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	4abf      	ldr	r2, [pc, #764]	; (800a3b4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d100      	bne.n	800a0be <RemapAndLinkDMAtoUARTRx+0x42>
 800a0bc:	e230      	b.n	800a520 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a0be:	4abe      	ldr	r2, [pc, #760]	; (800a3b8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d100      	bne.n	800a0c6 <RemapAndLinkDMAtoUARTRx+0x4a>
 800a0c4:	e237      	b.n	800a536 <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a0c6:	4abd      	ldr	r2, [pc, #756]	; (800a3bc <RemapAndLinkDMAtoUARTRx+0x340>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d100      	bne.n	800a0ce <RemapAndLinkDMAtoUARTRx+0x52>
 800a0cc:	e235      	b.n	800a53a <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a0ce:	4abc      	ldr	r2, [pc, #752]	; (800a3c0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d100      	bne.n	800a0d6 <RemapAndLinkDMAtoUARTRx+0x5a>
 800a0d4:	e23d      	b.n	800a552 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a0d6:	4abb      	ldr	r2, [pc, #748]	; (800a3c4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d100      	bne.n	800a0de <RemapAndLinkDMAtoUARTRx+0x62>
 800a0dc:	e245      	b.n	800a56a <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a0de:	4aba      	ldr	r2, [pc, #744]	; (800a3c8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d145      	bne.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);
 800a0e4:	4ab9      	ldr	r2, [pc, #740]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a0e6:	23a8      	movs	r3, #168	; 0xa8
 800a0e8:	4db9      	ldr	r5, [pc, #740]	; (800a3d0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a0ea:	58d4      	ldr	r4, [r2, r3]
 800a0ec:	402c      	ands	r4, r5
 800a0ee:	50d4      	str	r4, [r2, r3]
 800a0f0:	24e0      	movs	r4, #224	; 0xe0
 800a0f2:	58d5      	ldr	r5, [r2, r3]
 800a0f4:	0124      	lsls	r4, r4, #4
 800a0f6:	432c      	orrs	r4, r5
 800a0f8:	50d4      	str	r4, [r2, r3]
 800a0fa:	e039      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a0fc:	680b      	ldr	r3, [r1, #0]
 800a0fe:	4aad      	ldr	r2, [pc, #692]	; (800a3b4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d100      	bne.n	800a106 <RemapAndLinkDMAtoUARTRx+0x8a>
 800a104:	e07e      	b.n	800a204 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a106:	4aac      	ldr	r2, [pc, #688]	; (800a3b8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d100      	bne.n	800a10e <RemapAndLinkDMAtoUARTRx+0x92>
 800a10c:	e085      	b.n	800a21a <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a10e:	4aab      	ldr	r2, [pc, #684]	; (800a3bc <RemapAndLinkDMAtoUARTRx+0x340>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d030      	beq.n	800a176 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a114:	4aaa      	ldr	r2, [pc, #680]	; (800a3c0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d039      	beq.n	800a18e <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a11a:	4aaa      	ldr	r2, [pc, #680]	; (800a3c4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d042      	beq.n	800a1a6 <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a120:	4aa9      	ldr	r2, [pc, #676]	; (800a3c8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d124      	bne.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
 800a126:	4aa9      	ldr	r2, [pc, #676]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a128:	23a8      	movs	r3, #168	; 0xa8
 800a12a:	4da9      	ldr	r5, [pc, #676]	; (800a3d0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a12c:	58d4      	ldr	r4, [r2, r3]
 800a12e:	402c      	ands	r4, r5
 800a130:	50d4      	str	r4, [r2, r3]
 800a132:	2480      	movs	r4, #128	; 0x80
 800a134:	58d5      	ldr	r5, [r2, r3]
 800a136:	0124      	lsls	r4, r4, #4
 800a138:	432c      	orrs	r4, r5
 800a13a:	50d4      	str	r4, [r2, r3]
 800a13c:	e018      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a13e:	680b      	ldr	r3, [r1, #0]
 800a140:	4a9c      	ldr	r2, [pc, #624]	; (800a3b4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d100      	bne.n	800a148 <RemapAndLinkDMAtoUARTRx+0xcc>
 800a146:	e0b0      	b.n	800a2aa <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a148:	4a9b      	ldr	r2, [pc, #620]	; (800a3b8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d100      	bne.n	800a150 <RemapAndLinkDMAtoUARTRx+0xd4>
 800a14e:	e0b7      	b.n	800a2c0 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a150:	4a9a      	ldr	r2, [pc, #616]	; (800a3bc <RemapAndLinkDMAtoUARTRx+0x340>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d100      	bne.n	800a158 <RemapAndLinkDMAtoUARTRx+0xdc>
 800a156:	e0bf      	b.n	800a2d8 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a158:	4a99      	ldr	r2, [pc, #612]	; (800a3c0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d100      	bne.n	800a160 <RemapAndLinkDMAtoUARTRx+0xe4>
 800a15e:	e0c7      	b.n	800a2f0 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a160:	4a98      	ldr	r2, [pc, #608]	; (800a3c4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d100      	bne.n	800a168 <RemapAndLinkDMAtoUARTRx+0xec>
 800a166:	e0cf      	b.n	800a308 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a168:	4a97      	ldr	r2, [pc, #604]	; (800a3c8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d100      	bne.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a16e:	e0d6      	b.n	800a31e <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);
	}

	__HAL_LINKDMA(huart,hdmarx,*hDMA);
 800a170:	6641      	str	r1, [r0, #100]	; 0x64
 800a172:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a174:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);
 800a176:	23a8      	movs	r3, #168	; 0xa8
 800a178:	4a96      	ldr	r2, [pc, #600]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a17a:	4d97      	ldr	r5, [pc, #604]	; (800a3d8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a17c:	58d4      	ldr	r4, [r2, r3]
 800a17e:	402c      	ands	r4, r5
 800a180:	50d4      	str	r4, [r2, r3]
 800a182:	2480      	movs	r4, #128	; 0x80
 800a184:	58d5      	ldr	r5, [r2, r3]
 800a186:	0324      	lsls	r4, r4, #12
 800a188:	432c      	orrs	r4, r5
 800a18a:	50d4      	str	r4, [r2, r3]
 800a18c:	e7f0      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);
 800a18e:	23a8      	movs	r3, #168	; 0xa8
 800a190:	4a90      	ldr	r2, [pc, #576]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a192:	4d92      	ldr	r5, [pc, #584]	; (800a3dc <RemapAndLinkDMAtoUARTRx+0x360>)
 800a194:	58d4      	ldr	r4, [r2, r3]
 800a196:	402c      	ands	r4, r5
 800a198:	50d4      	str	r4, [r2, r3]
 800a19a:	2480      	movs	r4, #128	; 0x80
 800a19c:	58d5      	ldr	r5, [r2, r3]
 800a19e:	0424      	lsls	r4, r4, #16
 800a1a0:	432c      	orrs	r4, r5
 800a1a2:	50d4      	str	r4, [r2, r3]
 800a1a4:	e7e4      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);
 800a1a6:	23a8      	movs	r3, #168	; 0xa8
 800a1a8:	25f0      	movs	r5, #240	; 0xf0
 800a1aa:	4a88      	ldr	r2, [pc, #544]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a1ac:	58d4      	ldr	r4, [r2, r3]
 800a1ae:	43ac      	bics	r4, r5
 800a1b0:	50d4      	str	r4, [r2, r3]
 800a1b2:	58d4      	ldr	r4, [r2, r3]
 800a1b4:	3d70      	subs	r5, #112	; 0x70
 800a1b6:	432c      	orrs	r4, r5
 800a1b8:	50d4      	str	r4, [r2, r3]
 800a1ba:	e7d9      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a1bc:	680b      	ldr	r3, [r1, #0]
 800a1be:	4a7d      	ldr	r2, [pc, #500]	; (800a3b4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d100      	bne.n	800a1c6 <RemapAndLinkDMAtoUARTRx+0x14a>
 800a1c4:	e0ad      	b.n	800a322 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a1c6:	4a7c      	ldr	r2, [pc, #496]	; (800a3b8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d100      	bne.n	800a1ce <RemapAndLinkDMAtoUARTRx+0x152>
 800a1cc:	e0b4      	b.n	800a338 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a1ce:	4a7b      	ldr	r2, [pc, #492]	; (800a3bc <RemapAndLinkDMAtoUARTRx+0x340>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d100      	bne.n	800a1d6 <RemapAndLinkDMAtoUARTRx+0x15a>
 800a1d4:	e0b2      	b.n	800a33c <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a1d6:	4a7a      	ldr	r2, [pc, #488]	; (800a3c0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d100      	bne.n	800a1de <RemapAndLinkDMAtoUARTRx+0x162>
 800a1dc:	e0ba      	b.n	800a354 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a1de:	4a79      	ldr	r2, [pc, #484]	; (800a3c4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d100      	bne.n	800a1e6 <RemapAndLinkDMAtoUARTRx+0x16a>
 800a1e4:	e0c2      	b.n	800a36c <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a1e6:	4a78      	ldr	r2, [pc, #480]	; (800a3c8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d1c1      	bne.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);
 800a1ec:	4a77      	ldr	r2, [pc, #476]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a1ee:	23a8      	movs	r3, #168	; 0xa8
 800a1f0:	4d77      	ldr	r5, [pc, #476]	; (800a3d0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a1f2:	58d4      	ldr	r4, [r2, r3]
 800a1f4:	402c      	ands	r4, r5
 800a1f6:	50d4      	str	r4, [r2, r3]
 800a1f8:	24a0      	movs	r4, #160	; 0xa0
 800a1fa:	58d5      	ldr	r5, [r2, r3]
 800a1fc:	0124      	lsls	r4, r4, #4
 800a1fe:	432c      	orrs	r4, r5
 800a200:	50d4      	str	r4, [r2, r3]
 800a202:	e7b5      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a204:	23a8      	movs	r3, #168	; 0xa8
 800a206:	250f      	movs	r5, #15
 800a208:	4a72      	ldr	r2, [pc, #456]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a20a:	58d4      	ldr	r4, [r2, r3]
 800a20c:	43ac      	bics	r4, r5
 800a20e:	50d4      	str	r4, [r2, r3]
 800a210:	58d4      	ldr	r4, [r2, r3]
 800a212:	3d07      	subs	r5, #7
 800a214:	432c      	orrs	r4, r5
 800a216:	50d4      	str	r4, [r2, r3]
 800a218:	e7aa      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a21a:	4a6e      	ldr	r2, [pc, #440]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a21c:	e784      	b.n	800a128 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a21e:	680b      	ldr	r3, [r1, #0]
 800a220:	4a64      	ldr	r2, [pc, #400]	; (800a3b4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d01c      	beq.n	800a260 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a226:	4a64      	ldr	r2, [pc, #400]	; (800a3b8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d024      	beq.n	800a276 <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a22c:	4a63      	ldr	r2, [pc, #396]	; (800a3bc <RemapAndLinkDMAtoUARTRx+0x340>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d023      	beq.n	800a27a <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a232:	4a63      	ldr	r2, [pc, #396]	; (800a3c0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d02c      	beq.n	800a292 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a238:	4a62      	ldr	r2, [pc, #392]	; (800a3c4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d100      	bne.n	800a240 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800a23e:	e0a0      	b.n	800a382 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a240:	4a61      	ldr	r2, [pc, #388]	; (800a3c8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d000      	beq.n	800a248 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800a246:	e793      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);
 800a248:	4a60      	ldr	r2, [pc, #384]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a24a:	23a8      	movs	r3, #168	; 0xa8
 800a24c:	4d60      	ldr	r5, [pc, #384]	; (800a3d0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a24e:	58d4      	ldr	r4, [r2, r3]
 800a250:	402c      	ands	r4, r5
 800a252:	50d4      	str	r4, [r2, r3]
 800a254:	24b0      	movs	r4, #176	; 0xb0
 800a256:	58d5      	ldr	r5, [r2, r3]
 800a258:	0124      	lsls	r4, r4, #4
 800a25a:	432c      	orrs	r4, r5
 800a25c:	50d4      	str	r4, [r2, r3]
 800a25e:	e787      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800a260:	23a8      	movs	r3, #168	; 0xa8
 800a262:	250f      	movs	r5, #15
 800a264:	4a5b      	ldr	r2, [pc, #364]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a266:	58d4      	ldr	r4, [r2, r3]
 800a268:	43ac      	bics	r4, r5
 800a26a:	50d4      	str	r4, [r2, r3]
 800a26c:	58d4      	ldr	r4, [r2, r3]
 800a26e:	3d04      	subs	r5, #4
 800a270:	432c      	orrs	r4, r5
 800a272:	50d4      	str	r4, [r2, r3]
 800a274:	e77c      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800a276:	4a57      	ldr	r2, [pc, #348]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a278:	e7e7      	b.n	800a24a <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);
 800a27a:	23a8      	movs	r3, #168	; 0xa8
 800a27c:	4a55      	ldr	r2, [pc, #340]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a27e:	4d56      	ldr	r5, [pc, #344]	; (800a3d8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a280:	58d4      	ldr	r4, [r2, r3]
 800a282:	402c      	ands	r4, r5
 800a284:	50d4      	str	r4, [r2, r3]
 800a286:	24b0      	movs	r4, #176	; 0xb0
 800a288:	58d5      	ldr	r5, [r2, r3]
 800a28a:	0324      	lsls	r4, r4, #12
 800a28c:	432c      	orrs	r4, r5
 800a28e:	50d4      	str	r4, [r2, r3]
 800a290:	e76e      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);
 800a292:	23a8      	movs	r3, #168	; 0xa8
 800a294:	4a4f      	ldr	r2, [pc, #316]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a296:	4d51      	ldr	r5, [pc, #324]	; (800a3dc <RemapAndLinkDMAtoUARTRx+0x360>)
 800a298:	58d4      	ldr	r4, [r2, r3]
 800a29a:	402c      	ands	r4, r5
 800a29c:	50d4      	str	r4, [r2, r3]
 800a29e:	24b0      	movs	r4, #176	; 0xb0
 800a2a0:	58d5      	ldr	r5, [r2, r3]
 800a2a2:	0424      	lsls	r4, r4, #16
 800a2a4:	432c      	orrs	r4, r5
 800a2a6:	50d4      	str	r4, [r2, r3]
 800a2a8:	e762      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800a2aa:	23a8      	movs	r3, #168	; 0xa8
 800a2ac:	250f      	movs	r5, #15
 800a2ae:	4a49      	ldr	r2, [pc, #292]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2b0:	58d4      	ldr	r4, [r2, r3]
 800a2b2:	43ac      	bics	r4, r5
 800a2b4:	50d4      	str	r4, [r2, r3]
 800a2b6:	58d4      	ldr	r4, [r2, r3]
 800a2b8:	3d06      	subs	r5, #6
 800a2ba:	432c      	orrs	r4, r5
 800a2bc:	50d4      	str	r4, [r2, r3]
 800a2be:	e757      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800a2c0:	4a44      	ldr	r2, [pc, #272]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
 800a2c2:	23a8      	movs	r3, #168	; 0xa8
 800a2c4:	4d42      	ldr	r5, [pc, #264]	; (800a3d0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a2c6:	58d4      	ldr	r4, [r2, r3]
 800a2c8:	402c      	ands	r4, r5
 800a2ca:	50d4      	str	r4, [r2, r3]
 800a2cc:	2490      	movs	r4, #144	; 0x90
 800a2ce:	58d5      	ldr	r5, [r2, r3]
 800a2d0:	0124      	lsls	r4, r4, #4
 800a2d2:	432c      	orrs	r4, r5
 800a2d4:	50d4      	str	r4, [r2, r3]
 800a2d6:	e74b      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);
 800a2d8:	23a8      	movs	r3, #168	; 0xa8
 800a2da:	4a3e      	ldr	r2, [pc, #248]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2dc:	4d3e      	ldr	r5, [pc, #248]	; (800a3d8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a2de:	58d4      	ldr	r4, [r2, r3]
 800a2e0:	402c      	ands	r4, r5
 800a2e2:	50d4      	str	r4, [r2, r3]
 800a2e4:	2490      	movs	r4, #144	; 0x90
 800a2e6:	58d5      	ldr	r5, [r2, r3]
 800a2e8:	0324      	lsls	r4, r4, #12
 800a2ea:	432c      	orrs	r4, r5
 800a2ec:	50d4      	str	r4, [r2, r3]
 800a2ee:	e73f      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);
 800a2f0:	23a8      	movs	r3, #168	; 0xa8
 800a2f2:	4a38      	ldr	r2, [pc, #224]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a2f4:	4d39      	ldr	r5, [pc, #228]	; (800a3dc <RemapAndLinkDMAtoUARTRx+0x360>)
 800a2f6:	58d4      	ldr	r4, [r2, r3]
 800a2f8:	402c      	ands	r4, r5
 800a2fa:	50d4      	str	r4, [r2, r3]
 800a2fc:	2490      	movs	r4, #144	; 0x90
 800a2fe:	58d5      	ldr	r5, [r2, r3]
 800a300:	0424      	lsls	r4, r4, #16
 800a302:	432c      	orrs	r4, r5
 800a304:	50d4      	str	r4, [r2, r3]
 800a306:	e733      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);
 800a308:	23a8      	movs	r3, #168	; 0xa8
 800a30a:	25f0      	movs	r5, #240	; 0xf0
 800a30c:	4a2f      	ldr	r2, [pc, #188]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a30e:	58d4      	ldr	r4, [r2, r3]
 800a310:	43ac      	bics	r4, r5
 800a312:	50d4      	str	r4, [r2, r3]
 800a314:	58d4      	ldr	r4, [r2, r3]
 800a316:	3d60      	subs	r5, #96	; 0x60
 800a318:	432c      	orrs	r4, r5
 800a31a:	50d4      	str	r4, [r2, r3]
 800a31c:	e728      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
 800a31e:	4a2b      	ldr	r2, [pc, #172]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a320:	e7cf      	b.n	800a2c2 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800a322:	23a8      	movs	r3, #168	; 0xa8
 800a324:	250f      	movs	r5, #15
 800a326:	4a2b      	ldr	r2, [pc, #172]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a328:	58d4      	ldr	r4, [r2, r3]
 800a32a:	43ac      	bics	r4, r5
 800a32c:	50d4      	str	r4, [r2, r3]
 800a32e:	58d4      	ldr	r4, [r2, r3]
 800a330:	3d05      	subs	r5, #5
 800a332:	432c      	orrs	r4, r5
 800a334:	50d4      	str	r4, [r2, r3]
 800a336:	e71b      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800a338:	4a26      	ldr	r2, [pc, #152]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a33a:	e758      	b.n	800a1ee <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);
 800a33c:	23a8      	movs	r3, #168	; 0xa8
 800a33e:	4a25      	ldr	r2, [pc, #148]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a340:	4d25      	ldr	r5, [pc, #148]	; (800a3d8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a342:	58d4      	ldr	r4, [r2, r3]
 800a344:	402c      	ands	r4, r5
 800a346:	50d4      	str	r4, [r2, r3]
 800a348:	24a0      	movs	r4, #160	; 0xa0
 800a34a:	58d5      	ldr	r5, [r2, r3]
 800a34c:	0324      	lsls	r4, r4, #12
 800a34e:	432c      	orrs	r4, r5
 800a350:	50d4      	str	r4, [r2, r3]
 800a352:	e70d      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);
 800a354:	23a8      	movs	r3, #168	; 0xa8
 800a356:	4a1f      	ldr	r2, [pc, #124]	; (800a3d4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a358:	4d20      	ldr	r5, [pc, #128]	; (800a3dc <RemapAndLinkDMAtoUARTRx+0x360>)
 800a35a:	58d4      	ldr	r4, [r2, r3]
 800a35c:	402c      	ands	r4, r5
 800a35e:	50d4      	str	r4, [r2, r3]
 800a360:	24a0      	movs	r4, #160	; 0xa0
 800a362:	58d5      	ldr	r5, [r2, r3]
 800a364:	0424      	lsls	r4, r4, #16
 800a366:	432c      	orrs	r4, r5
 800a368:	50d4      	str	r4, [r2, r3]
 800a36a:	e701      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);
 800a36c:	23a8      	movs	r3, #168	; 0xa8
 800a36e:	25f0      	movs	r5, #240	; 0xf0
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a372:	58d4      	ldr	r4, [r2, r3]
 800a374:	43ac      	bics	r4, r5
 800a376:	50d4      	str	r4, [r2, r3]
 800a378:	58d4      	ldr	r4, [r2, r3]
 800a37a:	3d50      	subs	r5, #80	; 0x50
 800a37c:	432c      	orrs	r4, r5
 800a37e:	50d4      	str	r4, [r2, r3]
 800a380:	e6f6      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);
 800a382:	23a8      	movs	r3, #168	; 0xa8
 800a384:	25f0      	movs	r5, #240	; 0xf0
 800a386:	4a11      	ldr	r2, [pc, #68]	; (800a3cc <RemapAndLinkDMAtoUARTRx+0x350>)
 800a388:	58d4      	ldr	r4, [r2, r3]
 800a38a:	43ac      	bics	r4, r5
 800a38c:	50d4      	str	r4, [r2, r3]
 800a38e:	58d4      	ldr	r4, [r2, r3]
 800a390:	3d40      	subs	r5, #64	; 0x40
 800a392:	432c      	orrs	r4, r5
 800a394:	50d4      	str	r4, [r2, r3]
 800a396:	e6eb      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a398:	40013800 	.word	0x40013800
 800a39c:	40004400 	.word	0x40004400
 800a3a0:	40004800 	.word	0x40004800
 800a3a4:	40004c00 	.word	0x40004c00
 800a3a8:	40005000 	.word	0x40005000
 800a3ac:	40011400 	.word	0x40011400
 800a3b0:	40011800 	.word	0x40011800
 800a3b4:	40020008 	.word	0x40020008
 800a3b8:	40020030 	.word	0x40020030
 800a3bc:	40020058 	.word	0x40020058
 800a3c0:	4002006c 	.word	0x4002006c
 800a3c4:	4002041c 	.word	0x4002041c
 800a3c8:	40020430 	.word	0x40020430
 800a3cc:	40020400 	.word	0x40020400
 800a3d0:	fffff0ff 	.word	0xfffff0ff
 800a3d4:	40020000 	.word	0x40020000
 800a3d8:	fff0ffff 	.word	0xfff0ffff
 800a3dc:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a3e0:	680b      	ldr	r3, [r1, #0]
 800a3e2:	4a8e      	ldr	r2, [pc, #568]	; (800a61c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d03b      	beq.n	800a460 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800a3e8:	4a8d      	ldr	r2, [pc, #564]	; (800a620 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d043      	beq.n	800a476 <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800a3ee:	4a8d      	ldr	r2, [pc, #564]	; (800a624 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d042      	beq.n	800a47a <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800a3f4:	4a8c      	ldr	r2, [pc, #560]	; (800a628 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d04b      	beq.n	800a492 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800a3fa:	4a8c      	ldr	r2, [pc, #560]	; (800a62c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d054      	beq.n	800a4aa <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800a400:	4a8b      	ldr	r2, [pc, #556]	; (800a630 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d000      	beq.n	800a408 <RemapAndLinkDMAtoUARTRx+0x38c>
 800a406:	e6b3      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);
 800a408:	4a8a      	ldr	r2, [pc, #552]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a40a:	23a8      	movs	r3, #168	; 0xa8
 800a40c:	4d8a      	ldr	r5, [pc, #552]	; (800a638 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a40e:	58d4      	ldr	r4, [r2, r3]
 800a410:	402c      	ands	r4, r5
 800a412:	50d4      	str	r4, [r2, r3]
 800a414:	24c0      	movs	r4, #192	; 0xc0
 800a416:	58d5      	ldr	r5, [r2, r3]
 800a418:	0124      	lsls	r4, r4, #4
 800a41a:	432c      	orrs	r4, r5
 800a41c:	50d4      	str	r4, [r2, r3]
 800a41e:	e6a7      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a420:	680b      	ldr	r3, [r1, #0]
 800a422:	4a7e      	ldr	r2, [pc, #504]	; (800a61c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d04b      	beq.n	800a4c0 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800a428:	4a7d      	ldr	r2, [pc, #500]	; (800a620 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d053      	beq.n	800a4d6 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800a42e:	4a7d      	ldr	r2, [pc, #500]	; (800a624 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d052      	beq.n	800a4da <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800a434:	4a7c      	ldr	r2, [pc, #496]	; (800a628 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d05b      	beq.n	800a4f2 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800a43a:	4a7c      	ldr	r2, [pc, #496]	; (800a62c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d064      	beq.n	800a50a <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800a440:	4a7b      	ldr	r2, [pc, #492]	; (800a630 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d000      	beq.n	800a448 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800a446:	e693      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
 800a448:	4a7a      	ldr	r2, [pc, #488]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a44a:	23a8      	movs	r3, #168	; 0xa8
 800a44c:	4d7a      	ldr	r5, [pc, #488]	; (800a638 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a44e:	58d4      	ldr	r4, [r2, r3]
 800a450:	402c      	ands	r4, r5
 800a452:	50d4      	str	r4, [r2, r3]
 800a454:	24d0      	movs	r4, #208	; 0xd0
 800a456:	58d5      	ldr	r5, [r2, r3]
 800a458:	0124      	lsls	r4, r4, #4
 800a45a:	432c      	orrs	r4, r5
 800a45c:	50d4      	str	r4, [r2, r3]
 800a45e:	e687      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800a460:	23a8      	movs	r3, #168	; 0xa8
 800a462:	250f      	movs	r5, #15
 800a464:	4a75      	ldr	r2, [pc, #468]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a466:	58d4      	ldr	r4, [r2, r3]
 800a468:	43ac      	bics	r4, r5
 800a46a:	50d4      	str	r4, [r2, r3]
 800a46c:	58d4      	ldr	r4, [r2, r3]
 800a46e:	3d03      	subs	r5, #3
 800a470:	432c      	orrs	r4, r5
 800a472:	50d4      	str	r4, [r2, r3]
 800a474:	e67c      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800a476:	4a71      	ldr	r2, [pc, #452]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a478:	e7c7      	b.n	800a40a <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);
 800a47a:	23a8      	movs	r3, #168	; 0xa8
 800a47c:	4a6f      	ldr	r2, [pc, #444]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a47e:	4d70      	ldr	r5, [pc, #448]	; (800a640 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a480:	58d4      	ldr	r4, [r2, r3]
 800a482:	402c      	ands	r4, r5
 800a484:	50d4      	str	r4, [r2, r3]
 800a486:	24c0      	movs	r4, #192	; 0xc0
 800a488:	58d5      	ldr	r5, [r2, r3]
 800a48a:	0324      	lsls	r4, r4, #12
 800a48c:	432c      	orrs	r4, r5
 800a48e:	50d4      	str	r4, [r2, r3]
 800a490:	e66e      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);
 800a492:	23a8      	movs	r3, #168	; 0xa8
 800a494:	4a69      	ldr	r2, [pc, #420]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a496:	4d6b      	ldr	r5, [pc, #428]	; (800a644 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a498:	58d4      	ldr	r4, [r2, r3]
 800a49a:	402c      	ands	r4, r5
 800a49c:	50d4      	str	r4, [r2, r3]
 800a49e:	24c0      	movs	r4, #192	; 0xc0
 800a4a0:	58d5      	ldr	r5, [r2, r3]
 800a4a2:	0424      	lsls	r4, r4, #16
 800a4a4:	432c      	orrs	r4, r5
 800a4a6:	50d4      	str	r4, [r2, r3]
 800a4a8:	e662      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);
 800a4aa:	23a8      	movs	r3, #168	; 0xa8
 800a4ac:	25f0      	movs	r5, #240	; 0xf0
 800a4ae:	4a61      	ldr	r2, [pc, #388]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a4b0:	58d4      	ldr	r4, [r2, r3]
 800a4b2:	43ac      	bics	r4, r5
 800a4b4:	50d4      	str	r4, [r2, r3]
 800a4b6:	58d4      	ldr	r4, [r2, r3]
 800a4b8:	3d30      	subs	r5, #48	; 0x30
 800a4ba:	432c      	orrs	r4, r5
 800a4bc:	50d4      	str	r4, [r2, r3]
 800a4be:	e657      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800a4c0:	23a8      	movs	r3, #168	; 0xa8
 800a4c2:	250f      	movs	r5, #15
 800a4c4:	4a5d      	ldr	r2, [pc, #372]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4c6:	58d4      	ldr	r4, [r2, r3]
 800a4c8:	43ac      	bics	r4, r5
 800a4ca:	50d4      	str	r4, [r2, r3]
 800a4cc:	58d4      	ldr	r4, [r2, r3]
 800a4ce:	3d02      	subs	r5, #2
 800a4d0:	432c      	orrs	r4, r5
 800a4d2:	50d4      	str	r4, [r2, r3]
 800a4d4:	e64c      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800a4d6:	4a59      	ldr	r2, [pc, #356]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4d8:	e7b7      	b.n	800a44a <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);
 800a4da:	23a8      	movs	r3, #168	; 0xa8
 800a4dc:	4a57      	ldr	r2, [pc, #348]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4de:	4d58      	ldr	r5, [pc, #352]	; (800a640 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a4e0:	58d4      	ldr	r4, [r2, r3]
 800a4e2:	402c      	ands	r4, r5
 800a4e4:	50d4      	str	r4, [r2, r3]
 800a4e6:	24d0      	movs	r4, #208	; 0xd0
 800a4e8:	58d5      	ldr	r5, [r2, r3]
 800a4ea:	0324      	lsls	r4, r4, #12
 800a4ec:	432c      	orrs	r4, r5
 800a4ee:	50d4      	str	r4, [r2, r3]
 800a4f0:	e63e      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);
 800a4f2:	23a8      	movs	r3, #168	; 0xa8
 800a4f4:	4a51      	ldr	r2, [pc, #324]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a4f6:	4d53      	ldr	r5, [pc, #332]	; (800a644 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a4f8:	58d4      	ldr	r4, [r2, r3]
 800a4fa:	402c      	ands	r4, r5
 800a4fc:	50d4      	str	r4, [r2, r3]
 800a4fe:	24d0      	movs	r4, #208	; 0xd0
 800a500:	58d5      	ldr	r5, [r2, r3]
 800a502:	0424      	lsls	r4, r4, #16
 800a504:	432c      	orrs	r4, r5
 800a506:	50d4      	str	r4, [r2, r3]
 800a508:	e632      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);
 800a50a:	23a8      	movs	r3, #168	; 0xa8
 800a50c:	25f0      	movs	r5, #240	; 0xf0
 800a50e:	4a49      	ldr	r2, [pc, #292]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a510:	58d4      	ldr	r4, [r2, r3]
 800a512:	43ac      	bics	r4, r5
 800a514:	50d4      	str	r4, [r2, r3]
 800a516:	58d4      	ldr	r4, [r2, r3]
 800a518:	3d20      	subs	r5, #32
 800a51a:	432c      	orrs	r4, r5
 800a51c:	50d4      	str	r4, [r2, r3]
 800a51e:	e627      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800a520:	23a8      	movs	r3, #168	; 0xa8
 800a522:	250f      	movs	r5, #15
 800a524:	4a45      	ldr	r2, [pc, #276]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a526:	58d4      	ldr	r4, [r2, r3]
 800a528:	43ac      	bics	r4, r5
 800a52a:	50d4      	str	r4, [r2, r3]
 800a52c:	58d4      	ldr	r4, [r2, r3]
 800a52e:	3d01      	subs	r5, #1
 800a530:	432c      	orrs	r4, r5
 800a532:	50d4      	str	r4, [r2, r3]
 800a534:	e61c      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800a536:	4a41      	ldr	r2, [pc, #260]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a538:	e5d5      	b.n	800a0e6 <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);
 800a53a:	23a8      	movs	r3, #168	; 0xa8
 800a53c:	4a3f      	ldr	r2, [pc, #252]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a53e:	4d40      	ldr	r5, [pc, #256]	; (800a640 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a540:	58d4      	ldr	r4, [r2, r3]
 800a542:	402c      	ands	r4, r5
 800a544:	50d4      	str	r4, [r2, r3]
 800a546:	24e0      	movs	r4, #224	; 0xe0
 800a548:	58d5      	ldr	r5, [r2, r3]
 800a54a:	0324      	lsls	r4, r4, #12
 800a54c:	432c      	orrs	r4, r5
 800a54e:	50d4      	str	r4, [r2, r3]
 800a550:	e60e      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);
 800a552:	23a8      	movs	r3, #168	; 0xa8
 800a554:	4a39      	ldr	r2, [pc, #228]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a556:	4d3b      	ldr	r5, [pc, #236]	; (800a644 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a558:	58d4      	ldr	r4, [r2, r3]
 800a55a:	402c      	ands	r4, r5
 800a55c:	50d4      	str	r4, [r2, r3]
 800a55e:	24e0      	movs	r4, #224	; 0xe0
 800a560:	58d5      	ldr	r5, [r2, r3]
 800a562:	0424      	lsls	r4, r4, #16
 800a564:	432c      	orrs	r4, r5
 800a566:	50d4      	str	r4, [r2, r3]
 800a568:	e602      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);
 800a56a:	23a8      	movs	r3, #168	; 0xa8
 800a56c:	25f0      	movs	r5, #240	; 0xf0
 800a56e:	4a31      	ldr	r2, [pc, #196]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a570:	58d4      	ldr	r4, [r2, r3]
 800a572:	43ac      	bics	r4, r5
 800a574:	50d4      	str	r4, [r2, r3]
 800a576:	58d4      	ldr	r4, [r2, r3]
 800a578:	3d10      	subs	r5, #16
 800a57a:	432c      	orrs	r4, r5
 800a57c:	50d4      	str	r4, [r2, r3]
 800a57e:	e5f7      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800a580:	4a31      	ldr	r2, [pc, #196]	; (800a648 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d000      	beq.n	800a588 <RemapAndLinkDMAtoUARTRx+0x50c>
 800a586:	e5f3      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a588:	680b      	ldr	r3, [r1, #0]
 800a58a:	4a24      	ldr	r2, [pc, #144]	; (800a61c <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d01b      	beq.n	800a5c8 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800a590:	4a23      	ldr	r2, [pc, #140]	; (800a620 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d022      	beq.n	800a5dc <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800a596:	4a23      	ldr	r2, [pc, #140]	; (800a624 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d021      	beq.n	800a5e0 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800a59c:	4a22      	ldr	r2, [pc, #136]	; (800a628 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d02a      	beq.n	800a5f8 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800a5a2:	4a22      	ldr	r2, [pc, #136]	; (800a62c <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d033      	beq.n	800a610 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800a5a8:	4a21      	ldr	r2, [pc, #132]	; (800a630 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d000      	beq.n	800a5b0 <RemapAndLinkDMAtoUARTRx+0x534>
 800a5ae:	e5df      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);
 800a5b0:	4a20      	ldr	r2, [pc, #128]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a5b2:	23a8      	movs	r3, #168	; 0xa8
 800a5b4:	4d20      	ldr	r5, [pc, #128]	; (800a638 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800a5b6:	58d4      	ldr	r4, [r2, r3]
 800a5b8:	402c      	ands	r4, r5
 800a5ba:	50d4      	str	r4, [r2, r3]
 800a5bc:	24f0      	movs	r4, #240	; 0xf0
 800a5be:	58d5      	ldr	r5, [r2, r3]
 800a5c0:	0124      	lsls	r4, r4, #4
 800a5c2:	432c      	orrs	r4, r5
 800a5c4:	50d4      	str	r4, [r2, r3]
 800a5c6:	e5d3      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800a5c8:	23a8      	movs	r3, #168	; 0xa8
 800a5ca:	260f      	movs	r6, #15
 800a5cc:	4a1b      	ldr	r2, [pc, #108]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5ce:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);
 800a5d0:	43b5      	bics	r5, r6
 800a5d2:	50d5      	str	r5, [r2, r3]
 800a5d4:	58d4      	ldr	r4, [r2, r3]
 800a5d6:	4334      	orrs	r4, r6
 800a5d8:	50d4      	str	r4, [r2, r3]
 800a5da:	e5c9      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800a5dc:	4a17      	ldr	r2, [pc, #92]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5de:	e7e8      	b.n	800a5b2 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);
 800a5e0:	23a8      	movs	r3, #168	; 0xa8
 800a5e2:	4a16      	ldr	r2, [pc, #88]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5e4:	4d16      	ldr	r5, [pc, #88]	; (800a640 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800a5e6:	58d4      	ldr	r4, [r2, r3]
 800a5e8:	402c      	ands	r4, r5
 800a5ea:	50d4      	str	r4, [r2, r3]
 800a5ec:	24f0      	movs	r4, #240	; 0xf0
 800a5ee:	58d5      	ldr	r5, [r2, r3]
 800a5f0:	0324      	lsls	r4, r4, #12
 800a5f2:	432c      	orrs	r4, r5
 800a5f4:	50d4      	str	r4, [r2, r3]
 800a5f6:	e5bb      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);
 800a5f8:	23a8      	movs	r3, #168	; 0xa8
 800a5fa:	4a10      	ldr	r2, [pc, #64]	; (800a63c <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800a5fc:	4d11      	ldr	r5, [pc, #68]	; (800a644 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800a5fe:	58d4      	ldr	r4, [r2, r3]
 800a600:	402c      	ands	r4, r5
 800a602:	50d4      	str	r4, [r2, r3]
 800a604:	24f0      	movs	r4, #240	; 0xf0
 800a606:	58d5      	ldr	r5, [r2, r3]
 800a608:	0424      	lsls	r4, r4, #16
 800a60a:	432c      	orrs	r4, r5
 800a60c:	50d4      	str	r4, [r2, r3]
 800a60e:	e5af      	b.n	800a170 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);
 800a610:	23a8      	movs	r3, #168	; 0xa8
 800a612:	4a08      	ldr	r2, [pc, #32]	; (800a634 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800a614:	26f0      	movs	r6, #240	; 0xf0
 800a616:	58d5      	ldr	r5, [r2, r3]
 800a618:	e7da      	b.n	800a5d0 <RemapAndLinkDMAtoUARTRx+0x554>
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	40020008 	.word	0x40020008
 800a620:	40020030 	.word	0x40020030
 800a624:	40020058 	.word	0x40020058
 800a628:	4002006c 	.word	0x4002006c
 800a62c:	4002041c 	.word	0x4002041c
 800a630:	40020430 	.word	0x40020430
 800a634:	40020400 	.word	0x40020400
 800a638:	fffff0ff 	.word	0xfffff0ff
 800a63c:	40020000 	.word	0x40020000
 800a640:	fff0ffff 	.word	0xfff0ffff
 800a644:	ff0fffff 	.word	0xff0fffff
 800a648:	40011c00 	.word	0x40011c00

0800a64c <DMA_MSG_RX_Setup>:
{	
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	000d      	movs	r5, r1
 800a650:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800a652:	f7ff fd13 	bl	800a07c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800a656:	0028      	movs	r0, r5
 800a658:	2100      	movs	r1, #0
 800a65a:	f7ff fc59 	bl	8009f10 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800a65e:	0020      	movs	r0, r4
 800a660:	f7ff fb22 	bl	8009ca8 <GetPort>
 800a664:	1e41      	subs	r1, r0, #1
 800a666:	4803      	ldr	r0, [pc, #12]	; (800a674 <DMA_MSG_RX_Setup+0x28>)
 800a668:	2201      	movs	r2, #1
 800a66a:	1809      	adds	r1, r1, r0
 800a66c:	0020      	movs	r0, r4
 800a66e:	f006 ff73 	bl	8011558 <HAL_UART_Receive_DMA>
}
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	20001c94 	.word	0x20001c94

0800a678 <SetupMessagingRxDMAs>:
{	
 800a678:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800a67a:	4c14      	ldr	r4, [pc, #80]	; (800a6cc <SetupMessagingRxDMAs+0x54>)
 800a67c:	7863      	ldrb	r3, [r4, #1]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01f      	beq.n	800a6c2 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P2] == FREE)	
 800a682:	78a3      	ldrb	r3, [r4, #2]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d017      	beq.n	800a6b8 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P3] == FREE)
 800a688:	78e3      	ldrb	r3, [r4, #3]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00f      	beq.n	800a6ae <SetupMessagingRxDMAs+0x36>
	if (portStatus[P4] == FREE)
 800a68e:	7923      	ldrb	r3, [r4, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d007      	beq.n	800a6a4 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P5] == FREE)
 800a694:	7963      	ldrb	r3, [r4, #5]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d103      	bne.n	800a6a2 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800a69a:	490d      	ldr	r1, [pc, #52]	; (800a6d0 <SetupMessagingRxDMAs+0x58>)
 800a69c:	480d      	ldr	r0, [pc, #52]	; (800a6d4 <SetupMessagingRxDMAs+0x5c>)
 800a69e:	f7ff ffd5 	bl	800a64c <DMA_MSG_RX_Setup>
}
 800a6a2:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800a6a4:	490c      	ldr	r1, [pc, #48]	; (800a6d8 <SetupMessagingRxDMAs+0x60>)
 800a6a6:	480d      	ldr	r0, [pc, #52]	; (800a6dc <SetupMessagingRxDMAs+0x64>)
 800a6a8:	f7ff ffd0 	bl	800a64c <DMA_MSG_RX_Setup>
 800a6ac:	e7f2      	b.n	800a694 <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800a6ae:	490c      	ldr	r1, [pc, #48]	; (800a6e0 <SetupMessagingRxDMAs+0x68>)
 800a6b0:	480c      	ldr	r0, [pc, #48]	; (800a6e4 <SetupMessagingRxDMAs+0x6c>)
 800a6b2:	f7ff ffcb 	bl	800a64c <DMA_MSG_RX_Setup>
 800a6b6:	e7ea      	b.n	800a68e <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800a6b8:	490b      	ldr	r1, [pc, #44]	; (800a6e8 <SetupMessagingRxDMAs+0x70>)
 800a6ba:	480c      	ldr	r0, [pc, #48]	; (800a6ec <SetupMessagingRxDMAs+0x74>)
 800a6bc:	f7ff ffc6 	bl	800a64c <DMA_MSG_RX_Setup>
 800a6c0:	e7e2      	b.n	800a688 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800a6c2:	490b      	ldr	r1, [pc, #44]	; (800a6f0 <SetupMessagingRxDMAs+0x78>)
 800a6c4:	480b      	ldr	r0, [pc, #44]	; (800a6f4 <SetupMessagingRxDMAs+0x7c>)
 800a6c6:	f7ff ffc1 	bl	800a64c <DMA_MSG_RX_Setup>
 800a6ca:	e7da      	b.n	800a682 <SetupMessagingRxDMAs+0xa>
 800a6cc:	20000c2c 	.word	0x20000c2c
 800a6d0:	2000232c 	.word	0x2000232c
 800a6d4:	20006964 	.word	0x20006964
 800a6d8:	200022f4 	.word	0x200022f4
 800a6dc:	20006b24 	.word	0x20006b24
 800a6e0:	200022bc 	.word	0x200022bc
 800a6e4:	200069d4 	.word	0x200069d4
 800a6e8:	20002284 	.word	0x20002284
 800a6ec:	20006ab4 	.word	0x20006ab4
 800a6f0:	2000224c 	.word	0x2000224c
 800a6f4:	20006b94 	.word	0x20006b94

0800a6f8 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fa:	46d6      	mov	lr, sl
 800a6fc:	464f      	mov	r7, r9
 800a6fe:	4646      	mov	r6, r8
 800a700:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800a702:	1e47      	subs	r7, r0, #1
 800a704:	00fe      	lsls	r6, r7, #3
 800a706:	4b1c      	ldr	r3, [pc, #112]	; (800a778 <SwitchStreamDMAToMsg+0x80>)
 800a708:	1bf6      	subs	r6, r6, r7
 800a70a:	00f6      	lsls	r6, r6, #3
 800a70c:	4698      	mov	r8, r3
 800a70e:	46b2      	mov	sl, r6
 800a710:	44c2      	add	sl, r8
void SwitchStreamDMAToMsg(uint8_t port) {
 800a712:	4681      	mov	r9, r0
	HAL_DMA_Abort(hDMA);
 800a714:	4650      	mov	r0, sl
 800a716:	f004 ff53 	bl	800f5c0 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a71a:	4643      	mov	r3, r8
 800a71c:	2400      	movs	r4, #0
 800a71e:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800a720:	4b16      	ldr	r3, [pc, #88]	; (800a77c <SwitchStreamDMAToMsg+0x84>)
 800a722:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800a724:	6054      	str	r4, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a726:	50fc      	str	r4, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800a728:	4b15      	ldr	r3, [pc, #84]	; (800a780 <SwitchStreamDMAToMsg+0x88>)
 800a72a:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800a72c:	4b15      	ldr	r3, [pc, #84]	; (800a784 <SwitchStreamDMAToMsg+0x8c>)
 800a72e:	18f5      	adds	r5, r6, r3
	hDMA->Instance = ch;
 800a730:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a732:	2380      	movs	r3, #128	; 0x80
 800a734:	60eb      	str	r3, [r5, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a736:	3b60      	subs	r3, #96	; 0x60
 800a738:	61ab      	str	r3, [r5, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a73a:	2380      	movs	r3, #128	; 0x80
 800a73c:	019b      	lsls	r3, r3, #6
 800a73e:	61eb      	str	r3, [r5, #28]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a740:	606c      	str	r4, [r5, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a742:	60ac      	str	r4, [r5, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a744:	612c      	str	r4, [r5, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a746:	616c      	str	r4, [r5, #20]
	HAL_DMA_Init(hDMA);		
 800a748:	0028      	movs	r0, r5
 800a74a:	f004 fee1 	bl	800f510 <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800a74e:	4653      	mov	r3, sl
 800a750:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a752:	f7ff faa9 	bl	8009ca8 <GetPort>
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <SwitchStreamDMAToMsg+0x90>)
 800a758:	541c      	strb	r4, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800a75a:	4643      	mov	r3, r8
 800a75c:	50f4      	str	r4, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800a75e:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <SwitchStreamDMAToMsg+0x94>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800a760:	4648      	mov	r0, r9
	dmaStreamDst[port - 1] = 0;
 800a762:	50fc      	str	r4, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800a764:	f002 fab8 	bl	800ccd8 <GetUart>
 800a768:	0029      	movs	r1, r5
 800a76a:	f7ff ff6f 	bl	800a64c <DMA_MSG_RX_Setup>
}
 800a76e:	bc1c      	pop	{r2, r3, r4}
 800a770:	4690      	mov	r8, r2
 800a772:	4699      	mov	r9, r3
 800a774:	46a2      	mov	sl, r4
 800a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a778:	20002054 	.word	0x20002054
 800a77c:	20001864 	.word	0x20001864
 800a780:	20001878 	.word	0x20001878
 800a784:	2000224c 	.word	0x2000224c
 800a788:	20000c2c 	.word	0x20000c2c
 800a78c:	20001850 	.word	0x20001850

0800a790 <DMA_STREAM_Setup>:
{	
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	0016      	movs	r6, r2
 800a794:	0005      	movs	r5, r0
 800a796:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800a798:	f7ff fa86 	bl	8009ca8 <GetPort>
	hDMA = &streamDMA[port-1];
 800a79c:	3801      	subs	r0, #1
 800a79e:	00c4      	lsls	r4, r0, #3
 800a7a0:	1a24      	subs	r4, r4, r0
 800a7a2:	480a      	ldr	r0, [pc, #40]	; (800a7cc <DMA_STREAM_Setup+0x3c>)
 800a7a4:	00e4      	lsls	r4, r4, #3
 800a7a6:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800a7a8:	0021      	movs	r1, r4
 800a7aa:	0028      	movs	r0, r5
 800a7ac:	f7ff fc66 	bl	800a07c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800a7b0:	0020      	movs	r0, r4
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	f7ff fbac 	bl	8009f10 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800a7b8:	2369      	movs	r3, #105	; 0x69
 800a7ba:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800a7bc:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800a7be:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800a7c0:	0028      	movs	r0, r5
 800a7c2:	0032      	movs	r2, r6
 800a7c4:	3128      	adds	r1, #40	; 0x28
 800a7c6:	f006 fec7 	bl	8011558 <HAL_UART_Receive_DMA>
}
 800a7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7cc:	20002054 	.word	0x20002054

0800a7d0 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	4807      	ldr	r0, [pc, #28]	; (800a7f0 <CRC_Init+0x20>)
{
 800a7d4:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800a7d6:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800a7d8:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <CRC_Init+0x24>)
 800a7da:	6003      	str	r3, [r0, #0]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800a7e0:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800a7e2:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a7e4:	3303      	adds	r3, #3
 800a7e6:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800a7e8:	f004 fdc0 	bl	800f36c <HAL_CRC_Init>
}
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	20006c04 	.word	0x20006c04
 800a7f4:	40023000 	.word	0x40023000

0800a7f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800a7f8:	2340      	movs	r3, #64	; 0x40
 800a7fa:	4a05      	ldr	r2, [pc, #20]	; (800a810 <HAL_CRC_MspInit+0x18>)
{
 800a7fc:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800a7fe:	6951      	ldr	r1, [r2, #20]
 800a800:	4319      	orrs	r1, r3
 800a802:	6151      	str	r1, [r2, #20]
 800a804:	6952      	ldr	r2, [r2, #20]
 800a806:	4013      	ands	r3, r2
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	9b01      	ldr	r3, [sp, #4]
}
 800a80c:	b002      	add	sp, #8
 800a80e:	4770      	bx	lr
 800a810:	40021000 	.word	0x40021000

0800a814 <CalculateCRC8>:

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800a814:	2300      	movs	r3, #0
{
 800a816:	b570      	push	{r4, r5, r6, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	0005      	movs	r5, r0
 800a81c:	000c      	movs	r4, r1
  uint8_t temp_buffer[4] = {0};
 800a81e:	9301      	str	r3, [sp, #4]

	return pTemp;
  }
  
else
	return 0;
 800a820:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800a822:	2d00      	cmp	r5, #0
 800a824:	d019      	beq.n	800a85a <CalculateCRC8+0x46>
 800a826:	2900      	cmp	r1, #0
 800a828:	d017      	beq.n	800a85a <CalculateCRC8+0x46>
	if(size < 4)
 800a82a:	2903      	cmp	r1, #3
 800a82c:	d817      	bhi.n	800a85e <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800a82e:	466a      	mov	r2, sp
 800a830:	782b      	ldrb	r3, [r5, #0]
 800a832:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800a834:	2901      	cmp	r1, #1
 800a836:	d00a      	beq.n	800a84e <CalculateCRC8+0x3a>
		for(int i=0; i<4; i++)
 800a838:	2300      	movs	r3, #0
 800a83a:	3c02      	subs	r4, #2
 800a83c:	b2a4      	uxth	r4, r4
 800a83e:	3401      	adds	r4, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800a840:	4669      	mov	r1, sp
		for(int i=0; i<4; i++)
 800a842:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800a844:	5cea      	ldrb	r2, [r5, r3]
 800a846:	3104      	adds	r1, #4
 800a848:	54ca      	strb	r2, [r1, r3]
			if(--size == 0) break;
 800a84a:	429c      	cmp	r4, r3
 800a84c:	d1f8      	bne.n	800a840 <CalculateCRC8+0x2c>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800a84e:	2201      	movs	r2, #1
 800a850:	a901      	add	r1, sp, #4
 800a852:	4814      	ldr	r0, [pc, #80]	; (800a8a4 <CalculateCRC8+0x90>)
 800a854:	f004 fde8 	bl	800f428 <HAL_CRC_Calculate>
 800a858:	b2c0      	uxtb	r0, r0
}
 800a85a:	b002      	add	sp, #8
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800a85e:	4e11      	ldr	r6, [pc, #68]	; (800a8a4 <CalculateCRC8+0x90>)
 800a860:	088a      	lsrs	r2, r1, #2
 800a862:	0030      	movs	r0, r6
 800a864:	0029      	movs	r1, r5
 800a866:	f004 fddf 	bl	800f428 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800a86a:	2203      	movs	r2, #3
 800a86c:	0013      	movs	r3, r2
 800a86e:	4023      	ands	r3, r4
 800a870:	d015      	beq.n	800a89e <CalculateCRC8+0x8a>
 800a872:	3b01      	subs	r3, #1
 800a874:	b299      	uxth	r1, r3
			for(int i=0; i<4; i++)
 800a876:	2300      	movs	r3, #0
			temp_index = size - (size%4);
 800a878:	4394      	bics	r4, r2
 800a87a:	b2e4      	uxtb	r4, r4
				temp_buffer[i] = pBuffer[temp_index++];
 800a87c:	1c62      	adds	r2, r4, #1
 800a87e:	5d28      	ldrb	r0, [r5, r4]
 800a880:	466c      	mov	r4, sp
 800a882:	3404      	adds	r4, #4
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	54e0      	strb	r0, [r4, r3]
				if(--size == 0) break;
 800a888:	4299      	cmp	r1, r3
 800a88a:	d003      	beq.n	800a894 <CalculateCRC8+0x80>
			for(int i=0; i<4; i++)
 800a88c:	3301      	adds	r3, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800a88e:	0014      	movs	r4, r2
			for(int i=0; i<4; i++)
 800a890:	2b04      	cmp	r3, #4
 800a892:	d1f3      	bne.n	800a87c <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800a894:	2201      	movs	r2, #1
 800a896:	a901      	add	r1, sp, #4
 800a898:	0030      	movs	r0, r6
 800a89a:	f004 fd9b 	bl	800f3d4 <HAL_CRC_Accumulate>
 800a89e:	b2c0      	uxtb	r0, r0
 800a8a0:	e7db      	b.n	800a85a <CalculateCRC8+0x46>
 800a8a2:	46c0      	nop			; (mov r8, r8)
 800a8a4:	20006c04 	.word	0x20006c04

0800a8a8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	000d      	movs	r5, r1
 800a8ac:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a8ae:	4c25      	ldr	r4, [pc, #148]	; (800a944 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800a8b0:	f005 fb4e 	bl	800ff50 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a8b4:	4924      	ldr	r1, [pc, #144]	; (800a948 <EE_VerifyPageFullWriteVariable+0xa0>)
 800a8b6:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a8b8:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a8ba:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a8bc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 800a8c2:	4b22      	ldr	r3, [pc, #136]	; (800a94c <EE_VerifyPageFullWriteVariable+0xa4>)
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d007      	beq.n	800a8d8 <EE_VerifyPageFullWriteVariable+0x30>
 800a8c8:	4a21      	ldr	r2, [pc, #132]	; (800a950 <EE_VerifyPageFullWriteVariable+0xa8>)
 800a8ca:	0023      	movs	r3, r4
 800a8cc:	e007      	b.n	800a8de <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d122      	bne.n	800a918 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 800a8d2:	4a1e      	ldr	r2, [pc, #120]	; (800a94c <EE_VerifyPageFullWriteVariable+0xa4>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d0f7      	beq.n	800a8c8 <EE_VerifyPageFullWriteVariable+0x20>
 800a8d8:	000c      	movs	r4, r1
 800a8da:	000b      	movs	r3, r1
 800a8dc:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	d103      	bne.n	800a8ec <EE_VerifyPageFullWriteVariable+0x44>
 800a8e4:	e009      	b.n	800a8fa <EE_VerifyPageFullWriteVariable+0x52>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	d006      	beq.n	800a8fa <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800a8ec:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800a8ee:	42a2      	cmp	r2, r4
 800a8f0:	d8f9      	bhi.n	800a8e6 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800a8f2:	f005 fb3f 	bl	800ff74 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800a8f6:	2080      	movs	r0, #128	; 0x80
}
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800a8fa:	002a      	movs	r2, r5
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	0021      	movs	r1, r4
 800a900:	2001      	movs	r0, #1
 800a902:	f005 fb85 	bl	8010010 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800a906:	4814      	ldr	r0, [pc, #80]	; (800a958 <EE_VerifyPageFullWriteVariable+0xb0>)
 800a908:	f005 fb3e 	bl	800ff88 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d005      	beq.n	800a91c <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 800a910:	4b12      	ldr	r3, [pc, #72]	; (800a95c <EE_VerifyPageFullWriteVariable+0xb4>)
 800a912:	69d8      	ldr	r0, [r3, #28]
 800a914:	b280      	uxth	r0, r0
 800a916:	e7ef      	b.n	800a8f8 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800a918:	20ab      	movs	r0, #171	; 0xab
 800a91a:	e7ed      	b.n	800a8f8 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a91c:	2701      	movs	r7, #1
 800a91e:	4d10      	ldr	r5, [pc, #64]	; (800a960 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800a920:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a922:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800a924:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a926:	43bb      	bics	r3, r7
 800a928:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800a92a:	2001      	movs	r0, #1
 800a92c:	2300      	movs	r3, #0
 800a92e:	f005 fb6f 	bl	8010010 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800a932:	4809      	ldr	r0, [pc, #36]	; (800a958 <EE_VerifyPageFullWriteVariable+0xb0>)
 800a934:	f005 fb28 	bl	800ff88 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800a938:	2800      	cmp	r0, #0
 800a93a:	d1e9      	bne.n	800a910 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800a93c:	692b      	ldr	r3, [r5, #16]
 800a93e:	43bb      	bics	r3, r7
 800a940:	612b      	str	r3, [r5, #16]
 800a942:	e7e5      	b.n	800a910 <EE_VerifyPageFullWriteVariable+0x68>
 800a944:	0801f000 	.word	0x0801f000
 800a948:	0801e000 	.word	0x0801e000
 800a94c:	0000eeee 	.word	0x0000eeee
 800a950:	0801fffe 	.word	0x0801fffe
 800a954:	0801effe 	.word	0x0801effe
 800a958:	0000c350 	.word	0x0000c350
 800a95c:	20006db8 	.word	0x20006db8
 800a960:	40022000 	.word	0x40022000

0800a964 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a964:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800a966:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a968:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a96a:	4b11      	ldr	r3, [pc, #68]	; (800a9b0 <EE_ReadVariable+0x4c>)
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800a970:	2a00      	cmp	r2, #0
 800a972:	d005      	beq.n	800a980 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 800a974:	2b00      	cmp	r3, #0
 800a976:	d117      	bne.n	800a9a8 <EE_ReadVariable+0x44>
 800a978:	4b0e      	ldr	r3, [pc, #56]	; (800a9b4 <EE_ReadVariable+0x50>)
 800a97a:	4c0f      	ldr	r4, [pc, #60]	; (800a9b8 <EE_ReadVariable+0x54>)
 800a97c:	001a      	movs	r2, r3
 800a97e:	e002      	b.n	800a986 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 800a980:	4b0e      	ldr	r3, [pc, #56]	; (800a9bc <EE_ReadVariable+0x58>)
 800a982:	4c0f      	ldr	r4, [pc, #60]	; (800a9c0 <EE_ReadVariable+0x5c>)
 800a984:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 800a986:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 800a988:	4290      	cmp	r0, r2
 800a98a:	d103      	bne.n	800a994 <EE_ReadVariable+0x30>
 800a98c:	e007      	b.n	800a99e <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800a98e:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800a990:	4282      	cmp	r2, r0
 800a992:	d004      	beq.n	800a99e <EE_ReadVariable+0x3a>
			Address =Address - 4;
 800a994:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800a996:	42a3      	cmp	r3, r4
 800a998:	d8f9      	bhi.n	800a98e <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800a99a:	2001      	movs	r0, #1
}
 800a99c:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800a99e:	3b02      	subs	r3, #2
 800a9a0:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800a9a2:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800a9a4:	800b      	strh	r3, [r1, #0]
			break;
 800a9a6:	e7f9      	b.n	800a99c <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 800a9a8:	20ab      	movs	r0, #171	; 0xab
 800a9aa:	e7f7      	b.n	800a99c <EE_ReadVariable+0x38>
 800a9ac:	0801e000 	.word	0x0801e000
 800a9b0:	0801f000 	.word	0x0801f000
 800a9b4:	0801fffe 	.word	0x0801fffe
 800a9b8:	0801f002 	.word	0x0801f002
 800a9bc:	0801effe 	.word	0x0801effe
 800a9c0:	0801e002 	.word	0x0801e002

0800a9c4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c6:	46d6      	mov	lr, sl
 800a9c8:	4646      	mov	r6, r8
 800a9ca:	464f      	mov	r7, r9
 800a9cc:	000c      	movs	r4, r1
 800a9ce:	b5c0      	push	{r6, r7, lr}
 800a9d0:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800a9d2:	f005 fabd 	bl	800ff50 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800a9d6:	0021      	movs	r1, r4
 800a9d8:	0030      	movs	r0, r6
 800a9da:	f7ff ff65 	bl	800a8a8 <EE_VerifyPageFullWriteVariable>
 800a9de:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800a9e0:	2880      	cmp	r0, #128	; 0x80
 800a9e2:	d007      	beq.n	800a9f4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800a9e4:	f005 fac6 	bl	800ff74 <HAL_FLASH_Lock>
}
 800a9e8:	0028      	movs	r0, r5
 800a9ea:	bc1c      	pop	{r2, r3, r4}
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	4699      	mov	r9, r3
 800a9f0:	46a2      	mov	sl, r4
 800a9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800a9f4:	f005 faac 	bl	800ff50 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a9f8:	4935      	ldr	r1, [pc, #212]	; (800aad0 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a9fa:	4a36      	ldr	r2, [pc, #216]	; (800aad4 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800a9fc:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800a9fe:	8813      	ldrh	r3, [r2, #0]
 800aa00:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d013      	beq.n	800aa2e <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800aa06:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1eb      	bne.n	800a9e4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800aa0c:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800aa0e:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800aa10:	4a31      	ldr	r2, [pc, #196]	; (800aad8 <EE_WriteVariable+0x114>)
 800aa12:	2300      	movs	r3, #0
 800aa14:	4641      	mov	r1, r8
 800aa16:	2001      	movs	r0, #1
 800aa18:	f005 fafa 	bl	8010010 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aa1c:	482f      	ldr	r0, [pc, #188]	; (800aadc <EE_WriteVariable+0x118>)
 800aa1e:	f005 fab3 	bl	800ff88 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d006      	beq.n	800aa34 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 800aa26:	4b2e      	ldr	r3, [pc, #184]	; (800aae0 <EE_WriteVariable+0x11c>)
 800aa28:	69dd      	ldr	r5, [r3, #28]
 800aa2a:	b2ad      	uxth	r5, r5
 800aa2c:	e7da      	b.n	800a9e4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800aa2e:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800aa30:	4690      	mov	r8, r2
 800aa32:	e7ed      	b.n	800aa10 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa34:	2101      	movs	r1, #1
 800aa36:	4a2b      	ldr	r2, [pc, #172]	; (800aae4 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800aa38:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aa3a:	6913      	ldr	r3, [r2, #16]
 800aa3c:	438b      	bics	r3, r1
 800aa3e:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800aa40:	0021      	movs	r1, r4
 800aa42:	f7ff ff31 	bl	800a8a8 <EE_VerifyPageFullWriteVariable>
 800aa46:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 800aa48:	d1cc      	bne.n	800a9e4 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800aa4a:	4b27      	ldr	r3, [pc, #156]	; (800aae8 <EE_WriteVariable+0x124>)
 800aa4c:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800aa4e:	4f27      	ldr	r7, [pc, #156]	; (800aaec <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800aa50:	469a      	mov	sl, r3
 800aa52:	e003      	b.n	800aa5c <EE_WriteVariable+0x98>
 800aa54:	3401      	adds	r4, #1
 800aa56:	b2a4      	uxth	r4, r4
 800aa58:	4554      	cmp	r4, sl
 800aa5a:	d00f      	beq.n	800aa7c <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800aa5c:	42a6      	cmp	r6, r4
 800aa5e:	d0f9      	beq.n	800aa54 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800aa60:	0039      	movs	r1, r7
 800aa62:	0020      	movs	r0, r4
 800aa64:	f7ff ff7e 	bl	800a964 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800aa68:	2801      	cmp	r0, #1
 800aa6a:	d0f3      	beq.n	800aa54 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800aa6c:	8839      	ldrh	r1, [r7, #0]
 800aa6e:	0020      	movs	r0, r4
 800aa70:	f7ff ff1a 	bl	800a8a8 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0ed      	beq.n	800aa54 <EE_WriteVariable+0x90>
 800aa78:	0005      	movs	r5, r0
 800aa7a:	e7b3      	b.n	800a9e4 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800aa7c:	4648      	mov	r0, r9
 800aa7e:	f005 fb97 	bl	80101b0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aa82:	4816      	ldr	r0, [pc, #88]	; (800aadc <EE_WriteVariable+0x118>)
 800aa84:	f005 fa80 	bl	800ff88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1cc      	bne.n	800aa26 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800aa8c:	2080      	movs	r0, #128	; 0x80
 800aa8e:	0100      	lsls	r0, r0, #4
 800aa90:	4448      	add	r0, r9
 800aa92:	f005 fb8d 	bl	80101b0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aa96:	4811      	ldr	r0, [pc, #68]	; (800aadc <EE_WriteVariable+0x118>)
 800aa98:	f005 fa76 	bl	800ff88 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d1c2      	bne.n	800aa26 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	4c10      	ldr	r4, [pc, #64]	; (800aae4 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800aaa4:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aaa6:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800aaa8:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800aaaa:	4393      	bics	r3, r2
 800aaac:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800aaae:	2200      	movs	r2, #0
 800aab0:	2300      	movs	r3, #0
 800aab2:	f005 faad 	bl	8010010 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aab6:	4809      	ldr	r0, [pc, #36]	; (800aadc <EE_WriteVariable+0x118>)
 800aab8:	f005 fa66 	bl	800ff88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d1b2      	bne.n	800aa26 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800aac0:	2201      	movs	r2, #1
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	4393      	bics	r3, r2
 800aac6:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 800aac8:	f005 fa54 	bl	800ff74 <HAL_FLASH_Lock>
 800aacc:	e78a      	b.n	800a9e4 <EE_WriteVariable+0x20>
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	0801e000 	.word	0x0801e000
 800aad4:	0801f000 	.word	0x0801f000
 800aad8:	0000eeee 	.word	0x0000eeee
 800aadc:	0000c350 	.word	0x0000c350
 800aae0:	20006db8 	.word	0x20006db8
 800aae4:	40022000 	.word	0x40022000
 800aae8:	00000401 	.word	0x00000401
 800aaec:	2000239c 	.word	0x2000239c

0800aaf0 <EE_Format>:
uint16_t EE_Format(void){
 800aaf0:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800aaf2:	f005 fa2d 	bl	800ff50 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800aaf6:	481f      	ldr	r0, [pc, #124]	; (800ab74 <EE_Format+0x84>)
 800aaf8:	f005 fb5a 	bl	80101b0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800aafc:	481e      	ldr	r0, [pc, #120]	; (800ab78 <EE_Format+0x88>)
 800aafe:	f005 fa43 	bl	800ff88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d003      	beq.n	800ab0e <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800ab06:	4b1d      	ldr	r3, [pc, #116]	; (800ab7c <EE_Format+0x8c>)
 800ab08:	69d8      	ldr	r0, [r3, #28]
 800ab0a:	b280      	uxth	r0, r0
}
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ab0e:	481c      	ldr	r0, [pc, #112]	; (800ab80 <EE_Format+0x90>)
 800ab10:	f005 fb4e 	bl	80101b0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab14:	4818      	ldr	r0, [pc, #96]	; (800ab78 <EE_Format+0x88>)
 800ab16:	f005 fa37 	bl	800ff88 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1f3      	bne.n	800ab06 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab1e:	2202      	movs	r2, #2
 800ab20:	4c18      	ldr	r4, [pc, #96]	; (800ab84 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ab22:	4914      	ldr	r1, [pc, #80]	; (800ab74 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab24:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ab26:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ab28:	4393      	bics	r3, r2
 800ab2a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f005 fa6e 	bl	8010010 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab34:	4810      	ldr	r0, [pc, #64]	; (800ab78 <EE_Format+0x88>)
 800ab36:	f005 fa27 	bl	800ff88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d1e3      	bne.n	800ab06 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ab3e:	2501      	movs	r5, #1
 800ab40:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ab42:	4811      	ldr	r0, [pc, #68]	; (800ab88 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ab44:	43ab      	bics	r3, r5
 800ab46:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ab48:	f005 fb32 	bl	80101b0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab4c:	480a      	ldr	r0, [pc, #40]	; (800ab78 <EE_Format+0x88>)
 800ab4e:	f005 fa1b 	bl	800ff88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d1d7      	bne.n	800ab06 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ab56:	480d      	ldr	r0, [pc, #52]	; (800ab8c <EE_Format+0x9c>)
 800ab58:	f005 fb2a 	bl	80101b0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ab5c:	4806      	ldr	r0, [pc, #24]	; (800ab78 <EE_Format+0x88>)
 800ab5e:	f005 fa13 	bl	800ff88 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d1cf      	bne.n	800ab06 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	43ab      	bics	r3, r5
 800ab6a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800ab6c:	f005 fa02 	bl	800ff74 <HAL_FLASH_Lock>
	return FlashStatus;
 800ab70:	2000      	movs	r0, #0
 800ab72:	e7cb      	b.n	800ab0c <EE_Format+0x1c>
 800ab74:	0801e000 	.word	0x0801e000
 800ab78:	0000c350 	.word	0x0000c350
 800ab7c:	20006db8 	.word	0x20006db8
 800ab80:	0801e800 	.word	0x0801e800
 800ab84:	40022000 	.word	0x40022000
 800ab88:	0801f000 	.word	0x0801f000
 800ab8c:	0801f800 	.word	0x0801f800

0800ab90 <EE_Init>:
uint16_t EE_Init(void){
 800ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab92:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ab94:	4c9d      	ldr	r4, [pc, #628]	; (800ae0c <EE_Init+0x27c>)
uint16_t EE_Init(void){
 800ab96:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ab98:	4d9d      	ldr	r5, [pc, #628]	; (800ae10 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 800ab9a:	f005 f9d9 	bl	800ff50 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ab9e:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 800aba0:	499c      	ldr	r1, [pc, #624]	; (800ae14 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800aba2:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800aba4:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800aba6:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800aba8:	428b      	cmp	r3, r1
 800abaa:	d100      	bne.n	800abae <EE_Init+0x1e>
 800abac:	e06f      	b.n	800ac8e <EE_Init+0xfe>
 800abae:	489a      	ldr	r0, [pc, #616]	; (800ae18 <EE_Init+0x288>)
 800abb0:	4283      	cmp	r3, r0
 800abb2:	d05c      	beq.n	800ac6e <EE_Init+0xde>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00e      	beq.n	800abd6 <EE_Init+0x46>
			FlashStatus =EE_Format();
 800abb8:	f7ff ff9a 	bl	800aaf0 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800abbc:	4897      	ldr	r0, [pc, #604]	; (800ae1c <EE_Init+0x28c>)
 800abbe:	f005 f9e3 	bl	800ff88 <FLASH_WaitForLastOperation>
 800abc2:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800abc4:	2d00      	cmp	r5, #0
 800abc6:	d102      	bne.n	800abce <EE_Init+0x3e>
	HAL_FLASH_Lock();
 800abc8:	f005 f9d4 	bl	800ff74 <HAL_FLASH_Lock>
	return HAL_OK;
 800abcc:	2500      	movs	r5, #0
}
 800abce:	0028      	movs	r0, r5
 800abd0:	bc04      	pop	{r2}
 800abd2:	4690      	mov	r8, r2
 800abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800abd6:	2a00      	cmp	r2, #0
 800abd8:	d0ee      	beq.n	800abb8 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800abda:	4282      	cmp	r2, r0
 800abdc:	d100      	bne.n	800abe0 <EE_Init+0x50>
 800abde:	e103      	b.n	800ade8 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800abe0:	4b8f      	ldr	r3, [pc, #572]	; (800ae20 <EE_Init+0x290>)
	int16_t x =-1;
 800abe2:	2601      	movs	r6, #1
 800abe4:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800abe6:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800abe8:	4f8e      	ldr	r7, [pc, #568]	; (800ae24 <EE_Init+0x294>)
	int16_t x =-1;
 800abea:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800abec:	883b      	ldrh	r3, [r7, #0]
 800abee:	b2a5      	uxth	r5, r4
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	d100      	bne.n	800abf6 <EE_Init+0x66>
						x =VarIdx;
 800abf4:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800abf6:	42b4      	cmp	r4, r6
 800abf8:	d010      	beq.n	800ac1c <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800abfa:	4641      	mov	r1, r8
 800abfc:	0028      	movs	r0, r5
 800abfe:	f7ff feb1 	bl	800a964 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800ac02:	2801      	cmp	r0, #1
 800ac04:	d00a      	beq.n	800ac1c <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ac06:	4643      	mov	r3, r8
 800ac08:	0028      	movs	r0, r5
 800ac0a:	8819      	ldrh	r1, [r3, #0]
 800ac0c:	f7ff fe4c 	bl	800a8a8 <EE_VerifyPageFullWriteVariable>
 800ac10:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac12:	4882      	ldr	r0, [pc, #520]	; (800ae1c <EE_Init+0x28c>)
 800ac14:	f005 f9b8 	bl	800ff88 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d1d8      	bne.n	800abce <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800ac1c:	4b82      	ldr	r3, [pc, #520]	; (800ae28 <EE_Init+0x298>)
 800ac1e:	3401      	adds	r4, #1
 800ac20:	429c      	cmp	r4, r3
 800ac22:	d1e3      	bne.n	800abec <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800ac24:	2200      	movs	r2, #0
 800ac26:	2300      	movs	r3, #0
 800ac28:	4979      	ldr	r1, [pc, #484]	; (800ae10 <EE_Init+0x280>)
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	f005 f9f0 	bl	8010010 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac30:	487a      	ldr	r0, [pc, #488]	; (800ae1c <EE_Init+0x28c>)
 800ac32:	f005 f9a9 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d125      	bne.n	800ac86 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	4c7b      	ldr	r4, [pc, #492]	; (800ae2c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ac3e:	4873      	ldr	r0, [pc, #460]	; (800ae0c <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	4393      	bics	r3, r2
 800ac44:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ac46:	f005 fab3 	bl	80101b0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac4a:	4874      	ldr	r0, [pc, #464]	; (800ae1c <EE_Init+0x28c>)
 800ac4c:	f005 f99c 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d118      	bne.n	800ac86 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ac54:	4876      	ldr	r0, [pc, #472]	; (800ae30 <EE_Init+0x2a0>)
 800ac56:	f005 faab 	bl	80101b0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac5a:	4870      	ldr	r0, [pc, #448]	; (800ae1c <EE_Init+0x28c>)
 800ac5c:	f005 f994 	bl	800ff88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d110      	bne.n	800ac86 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ac64:	2202      	movs	r2, #2
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	4393      	bics	r3, r2
 800ac6a:	6123      	str	r3, [r4, #16]
 800ac6c:	e7ac      	b.n	800abc8 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	d07b      	beq.n	800ad6a <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800ac72:	428a      	cmp	r2, r1
 800ac74:	d100      	bne.n	800ac78 <EE_Init+0xe8>
 800ac76:	e08f      	b.n	800ad98 <EE_Init+0x208>
				FlashStatus =EE_Format();
 800ac78:	f7ff ff3a 	bl	800aaf0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ac7c:	4867      	ldr	r0, [pc, #412]	; (800ae1c <EE_Init+0x28c>)
 800ac7e:	f005 f983 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d0a0      	beq.n	800abc8 <EE_Init+0x38>
						return pFlash.ErrorCode;
 800ac86:	4b6b      	ldr	r3, [pc, #428]	; (800ae34 <EE_Init+0x2a4>)
 800ac88:	69dd      	ldr	r5, [r3, #28]
 800ac8a:	b2ad      	uxth	r5, r5
 800ac8c:	e79f      	b.n	800abce <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	d143      	bne.n	800ad1a <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ac92:	4b63      	ldr	r3, [pc, #396]	; (800ae20 <EE_Init+0x290>)
	int16_t x =-1;
 800ac94:	2601      	movs	r6, #1
 800ac96:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ac98:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800ac9a:	4f67      	ldr	r7, [pc, #412]	; (800ae38 <EE_Init+0x2a8>)
	int16_t x =-1;
 800ac9c:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800ac9e:	883b      	ldrh	r3, [r7, #0]
 800aca0:	b2a5      	uxth	r5, r4
 800aca2:	42ab      	cmp	r3, r5
 800aca4:	d100      	bne.n	800aca8 <EE_Init+0x118>
						x =VarIdx;
 800aca6:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800aca8:	42b4      	cmp	r4, r6
 800acaa:	d011      	beq.n	800acd0 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800acac:	4641      	mov	r1, r8
 800acae:	0028      	movs	r0, r5
 800acb0:	f7ff fe58 	bl	800a964 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800acb4:	2801      	cmp	r0, #1
 800acb6:	d00b      	beq.n	800acd0 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800acb8:	4643      	mov	r3, r8
 800acba:	0028      	movs	r0, r5
 800acbc:	8819      	ldrh	r1, [r3, #0]
 800acbe:	f7ff fdf3 	bl	800a8a8 <EE_VerifyPageFullWriteVariable>
 800acc2:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800acc4:	4855      	ldr	r0, [pc, #340]	; (800ae1c <EE_Init+0x28c>)
 800acc6:	f005 f95f 	bl	800ff88 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800acca:	2800      	cmp	r0, #0
 800accc:	d000      	beq.n	800acd0 <EE_Init+0x140>
 800acce:	e77e      	b.n	800abce <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800acd0:	4b55      	ldr	r3, [pc, #340]	; (800ae28 <EE_Init+0x298>)
 800acd2:	3401      	adds	r4, #1
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d1e2      	bne.n	800ac9e <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800acd8:	2200      	movs	r2, #0
 800acda:	2300      	movs	r3, #0
 800acdc:	494b      	ldr	r1, [pc, #300]	; (800ae0c <EE_Init+0x27c>)
 800acde:	2001      	movs	r0, #1
 800ace0:	f005 f996 	bl	8010010 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ace4:	484d      	ldr	r0, [pc, #308]	; (800ae1c <EE_Init+0x28c>)
 800ace6:	f005 f94f 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800acea:	2800      	cmp	r0, #0
 800acec:	d1cb      	bne.n	800ac86 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800acee:	2201      	movs	r2, #1
 800acf0:	4c4e      	ldr	r4, [pc, #312]	; (800ae2c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800acf2:	4847      	ldr	r0, [pc, #284]	; (800ae10 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800acf4:	6923      	ldr	r3, [r4, #16]
 800acf6:	4393      	bics	r3, r2
 800acf8:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800acfa:	f005 fa59 	bl	80101b0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800acfe:	4847      	ldr	r0, [pc, #284]	; (800ae1c <EE_Init+0x28c>)
 800ad00:	f005 f942 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1be      	bne.n	800ac86 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ad08:	484c      	ldr	r0, [pc, #304]	; (800ae3c <EE_Init+0x2ac>)
 800ad0a:	f005 fa51 	bl	80101b0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad0e:	4843      	ldr	r0, [pc, #268]	; (800ae1c <EE_Init+0x28c>)
 800ad10:	f005 f93a 	bl	800ff88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d0a5      	beq.n	800ac64 <EE_Init+0xd4>
 800ad18:	e7b5      	b.n	800ac86 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800ad1a:	4b3f      	ldr	r3, [pc, #252]	; (800ae18 <EE_Init+0x288>)
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d1ab      	bne.n	800ac78 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ad20:	0028      	movs	r0, r5
 800ad22:	f005 fa45 	bl	80101b0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad26:	483d      	ldr	r0, [pc, #244]	; (800ae1c <EE_Init+0x28c>)
 800ad28:	f005 f92e 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1aa      	bne.n	800ac86 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ad30:	4842      	ldr	r0, [pc, #264]	; (800ae3c <EE_Init+0x2ac>)
 800ad32:	f005 fa3d 	bl	80101b0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad36:	4839      	ldr	r0, [pc, #228]	; (800ae1c <EE_Init+0x28c>)
 800ad38:	f005 f926 	bl	800ff88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d1a2      	bne.n	800ac86 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad40:	2202      	movs	r2, #2
 800ad42:	4d3a      	ldr	r5, [pc, #232]	; (800ae2c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ad44:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad46:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ad48:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad4a:	4393      	bics	r3, r2
 800ad4c:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2300      	movs	r3, #0
 800ad52:	f005 f95d 	bl	8010010 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad56:	4831      	ldr	r0, [pc, #196]	; (800ae1c <EE_Init+0x28c>)
 800ad58:	f005 f916 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d192      	bne.n	800ac86 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ad60:	2201      	movs	r2, #1
 800ad62:	692b      	ldr	r3, [r5, #16]
 800ad64:	4393      	bics	r3, r2
 800ad66:	612b      	str	r3, [r5, #16]
 800ad68:	e72e      	b.n	800abc8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ad6a:	0020      	movs	r0, r4
 800ad6c:	f005 fa20 	bl	80101b0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad70:	482a      	ldr	r0, [pc, #168]	; (800ae1c <EE_Init+0x28c>)
 800ad72:	f005 f909 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d185      	bne.n	800ac86 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ad7a:	482d      	ldr	r0, [pc, #180]	; (800ae30 <EE_Init+0x2a0>)
 800ad7c:	f005 fa18 	bl	80101b0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad80:	4826      	ldr	r0, [pc, #152]	; (800ae1c <EE_Init+0x28c>)
 800ad82:	f005 f901 	bl	800ff88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d000      	beq.n	800ad8c <EE_Init+0x1fc>
 800ad8a:	e77c      	b.n	800ac86 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	4a27      	ldr	r2, [pc, #156]	; (800ae2c <EE_Init+0x29c>)
 800ad90:	6913      	ldr	r3, [r2, #16]
 800ad92:	438b      	bics	r3, r1
 800ad94:	6113      	str	r3, [r2, #16]
 800ad96:	e717      	b.n	800abc8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ad98:	0020      	movs	r0, r4
 800ad9a:	f005 fa09 	bl	80101b0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ad9e:	481f      	ldr	r0, [pc, #124]	; (800ae1c <EE_Init+0x28c>)
 800ada0:	f005 f8f2 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d000      	beq.n	800adaa <EE_Init+0x21a>
 800ada8:	e76d      	b.n	800ac86 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800adaa:	4821      	ldr	r0, [pc, #132]	; (800ae30 <EE_Init+0x2a0>)
 800adac:	f005 fa00 	bl	80101b0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adb0:	481a      	ldr	r0, [pc, #104]	; (800ae1c <EE_Init+0x28c>)
 800adb2:	f005 f8e9 	bl	800ff88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d000      	beq.n	800adbc <EE_Init+0x22c>
 800adba:	e764      	b.n	800ac86 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800adbc:	2202      	movs	r2, #2
 800adbe:	4c1b      	ldr	r4, [pc, #108]	; (800ae2c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800adc0:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800adc2:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800adc4:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800adc6:	4393      	bics	r3, r2
 800adc8:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800adca:	2200      	movs	r2, #0
 800adcc:	2300      	movs	r3, #0
 800adce:	f005 f91f 	bl	8010010 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800add2:	4812      	ldr	r0, [pc, #72]	; (800ae1c <EE_Init+0x28c>)
 800add4:	f005 f8d8 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800add8:	2800      	cmp	r0, #0
 800adda:	d000      	beq.n	800adde <EE_Init+0x24e>
 800addc:	e753      	b.n	800ac86 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800adde:	2201      	movs	r2, #1
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	4393      	bics	r3, r2
 800ade4:	6123      	str	r3, [r4, #16]
 800ade6:	e6ef      	b.n	800abc8 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ade8:	0028      	movs	r0, r5
 800adea:	f005 f9e1 	bl	80101b0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800adee:	480b      	ldr	r0, [pc, #44]	; (800ae1c <EE_Init+0x28c>)
 800adf0:	f005 f8ca 	bl	800ff88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d000      	beq.n	800adfa <EE_Init+0x26a>
 800adf8:	e745      	b.n	800ac86 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800adfa:	4810      	ldr	r0, [pc, #64]	; (800ae3c <EE_Init+0x2ac>)
 800adfc:	f005 f9d8 	bl	80101b0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ae00:	4806      	ldr	r0, [pc, #24]	; (800ae1c <EE_Init+0x28c>)
 800ae02:	f005 f8c1 	bl	800ff88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d0c0      	beq.n	800ad8c <EE_Init+0x1fc>
 800ae0a:	e73c      	b.n	800ac86 <EE_Init+0xf6>
 800ae0c:	0801e000 	.word	0x0801e000
 800ae10:	0801f000 	.word	0x0801f000
 800ae14:	0000eeee 	.word	0x0000eeee
 800ae18:	0000ffff 	.word	0x0000ffff
 800ae1c:	0000c350 	.word	0x0000c350
 800ae20:	2000239c 	.word	0x2000239c
 800ae24:	0801f006 	.word	0x0801f006
 800ae28:	00000401 	.word	0x00000401
 800ae2c:	40022000 	.word	0x40022000
 800ae30:	0801e800 	.word	0x0801e800
 800ae34:	20006db8 	.word	0x20006db8
 800ae38:	0801e006 	.word	0x0801e006
 800ae3c:	0801f800 	.word	0x0801f800

0800ae40 <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ae40:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800ae42:	b500      	push	{lr}
 800ae44:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ae46:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800ae48:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800ae4a:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800ae4c:	4669      	mov	r1, sp
 800ae4e:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800ae50:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800ae52:	f005 f941 	bl	80100d8 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d102      	bne.n	800ae60 <EraseSector+0x20>
 800ae5a:	9b00      	ldr	r3, [sp, #0]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	d002      	beq.n	800ae66 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800ae60:	2216      	movs	r2, #22
 800ae62:	4b02      	ldr	r3, [pc, #8]	; (800ae6c <EraseSector+0x2c>)
 800ae64:	701a      	strb	r2, [r3, #0]

	return result;
}
 800ae66:	2000      	movs	r0, #0
 800ae68:	b005      	add	sp, #20
 800ae6a:	bd00      	pop	{pc}
 800ae6c:	20000c3c 	.word	0x20000c3c

0800ae70 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 800ae70:	2080      	movs	r0, #128	; 0x80
 800ae72:	4b22      	ldr	r3, [pc, #136]	; (800aefc <GPIO_Init+0x8c>)
{
 800ae74:	b510      	push	{r4, lr}
    __GPIOC_CLK_ENABLE();
 800ae76:	6959      	ldr	r1, [r3, #20]
 800ae78:	0300      	lsls	r0, r0, #12
 800ae7a:	4301      	orrs	r1, r0
 800ae7c:	6159      	str	r1, [r3, #20]
 800ae7e:	695a      	ldr	r2, [r3, #20]
{
 800ae80:	b08c      	sub	sp, #48	; 0x30
    __GPIOC_CLK_ENABLE();
 800ae82:	4002      	ands	r2, r0
 800ae84:	9201      	str	r2, [sp, #4]
 800ae86:	9a01      	ldr	r2, [sp, #4]
    __GPIOA_CLK_ENABLE();
 800ae88:	2280      	movs	r2, #128	; 0x80
    __GPIOD_CLK_ENABLE();
 800ae8a:	2480      	movs	r4, #128	; 0x80
    __GPIOA_CLK_ENABLE();
 800ae8c:	6959      	ldr	r1, [r3, #20]
 800ae8e:	0292      	lsls	r2, r2, #10
 800ae90:	4311      	orrs	r1, r2
 800ae92:	6159      	str	r1, [r3, #20]
 800ae94:	6959      	ldr	r1, [r3, #20]
    __GPIOD_CLK_ENABLE();
 800ae96:	0364      	lsls	r4, r4, #13
    __GPIOA_CLK_ENABLE();
 800ae98:	4011      	ands	r1, r2
 800ae9a:	9102      	str	r1, [sp, #8]
 800ae9c:	9902      	ldr	r1, [sp, #8]
    __GPIOD_CLK_ENABLE();
 800ae9e:	6958      	ldr	r0, [r3, #20]
 800aea0:	4320      	orrs	r0, r4
 800aea2:	6158      	str	r0, [r3, #20]
 800aea4:	6959      	ldr	r1, [r3, #20]
 800aea6:	4021      	ands	r1, r4
	__GPIOB_CLK_ENABLE();
 800aea8:	2480      	movs	r4, #128	; 0x80
    __GPIOD_CLK_ENABLE();
 800aeaa:	9103      	str	r1, [sp, #12]
 800aeac:	9903      	ldr	r1, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800aeae:	6958      	ldr	r0, [r3, #20]
 800aeb0:	02e4      	lsls	r4, r4, #11
 800aeb2:	4320      	orrs	r0, r4
 800aeb4:	6158      	str	r0, [r3, #20]
 800aeb6:	6959      	ldr	r1, [r3, #20]
 800aeb8:	4021      	ands	r1, r4
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800aeba:	2480      	movs	r4, #128	; 0x80
	__GPIOB_CLK_ENABLE();
 800aebc:	9104      	str	r1, [sp, #16]
 800aebe:	9904      	ldr	r1, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800aec0:	6958      	ldr	r0, [r3, #20]
 800aec2:	03e4      	lsls	r4, r4, #15
 800aec4:	4320      	orrs	r0, r4
 800aec6:	6158      	str	r0, [r3, #20]
 800aec8:	6959      	ldr	r1, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800aeca:	2090      	movs	r0, #144	; 0x90
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800aecc:	4021      	ands	r1, r4
 800aece:	9105      	str	r1, [sp, #20]
 800aed0:	9905      	ldr	r1, [sp, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aed2:	6959      	ldr	r1, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800aed4:	05c0      	lsls	r0, r0, #23
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aed6:	4311      	orrs	r1, r2
 800aed8:	6159      	str	r1, [r3, #20]
 800aeda:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800aedc:	a907      	add	r1, sp, #28
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aede:	401a      	ands	r2, r3
 800aee0:	9206      	str	r2, [sp, #24]
 800aee2:	9b06      	ldr	r3, [sp, #24]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800aee4:	2340      	movs	r3, #64	; 0x40
 800aee6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aee8:	3b3f      	subs	r3, #63	; 0x3f
 800aeea:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800aef0:	3303      	adds	r3, #3
 800aef2:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800aef4:	f005 f96e 	bl	80101d4 <HAL_GPIO_Init>
}
 800aef8:	b00c      	add	sp, #48	; 0x30
 800aefa:	bd10      	pop	{r4, pc}
 800aefc:	40021000 	.word	0x40021000

0800af00 <GetPortGPIOs>:


/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	0015      	movs	r5, r2
 800af04:	001c      	movs	r4, r3
 800af06:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800af08:	f001 fee6 	bl	800ccd8 <GetUart>
	
	if (huart == &huart1) 
 800af0c:	4a2c      	ldr	r2, [pc, #176]	; (800afc0 <GetPortGPIOs+0xc0>)
	UART_HandleTypeDef* huart = GetUart(port);
 800af0e:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800af10:	4290      	cmp	r0, r2
 800af12:	d010      	beq.n	800af36 <GetPortGPIOs+0x36>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800af14:	4a2b      	ldr	r2, [pc, #172]	; (800afc4 <GetPortGPIOs+0xc4>)
 800af16:	4290      	cmp	r0, r2
 800af18:	d031      	beq.n	800af7e <GetPortGPIOs+0x7e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800af1a:	4a2b      	ldr	r2, [pc, #172]	; (800afc8 <GetPortGPIOs+0xc8>)
 800af1c:	4290      	cmp	r0, r2
 800af1e:	d017      	beq.n	800af50 <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800af20:	4a2a      	ldr	r2, [pc, #168]	; (800afcc <GetPortGPIOs+0xcc>)
 800af22:	4290      	cmp	r0, r2
 800af24:	d036      	beq.n	800af94 <GetPortGPIOs+0x94>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800af26:	4a2a      	ldr	r2, [pc, #168]	; (800afd0 <GetPortGPIOs+0xd0>)
 800af28:	4290      	cmp	r0, r2
 800af2a:	d03e      	beq.n	800afaa <GetPortGPIOs+0xaa>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800af2c:	4a29      	ldr	r2, [pc, #164]	; (800afd4 <GetPortGPIOs+0xd4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800af2e:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800af30:	4293      	cmp	r3, r2
 800af32:	d019      	beq.n	800af68 <GetPortGPIOs+0x68>
	
	return result;	
}
 800af34:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800af36:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800af38:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800af3a:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800af3c:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800af3e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800af40:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800af42:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	9a04      	ldr	r2, [sp, #16]
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7f1      	b.n	800af34 <GetPortGPIOs+0x34>
		*TX_Pin = USART3_TX_PIN;
 800af50:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800af52:	4b21      	ldr	r3, [pc, #132]	; (800afd8 <GetPortGPIOs+0xd8>)
		*TX_Pin = USART3_TX_PIN;
 800af54:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800af56:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800af58:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800af5a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800af5c:	2380      	movs	r3, #128	; 0x80
 800af5e:	9a04      	ldr	r2, [sp, #16]
 800af60:	011b      	lsls	r3, r3, #4
 800af62:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800af64:	2000      	movs	r0, #0
 800af66:	e7e5      	b.n	800af34 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800af68:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800af6a:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800af6c:	05db      	lsls	r3, r3, #23
 800af6e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800af70:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800af72:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800af74:	2320      	movs	r3, #32
 800af76:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800af78:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800af7a:	8013      	strh	r3, [r2, #0]
 800af7c:	e7da      	b.n	800af34 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800af7e:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800af80:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800af82:	05db      	lsls	r3, r3, #23
 800af84:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800af86:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800af88:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800af8a:	2308      	movs	r3, #8
 800af8c:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800af8e:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800af90:	8013      	strh	r3, [r2, #0]
 800af92:	e7cf      	b.n	800af34 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800af94:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800af96:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800af98:	05db      	lsls	r3, r3, #23
 800af9a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800af9c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800af9e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800afa0:	2302      	movs	r3, #2
 800afa2:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800afa4:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800afa6:	8013      	strh	r3, [r2, #0]
 800afa8:	e7c4      	b.n	800af34 <GetPortGPIOs+0x34>
		*TX_Pin = USART5_TX_PIN;
 800afaa:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800afac:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <GetPortGPIOs+0xd8>)
	BOS_Status result = BOS_OK;
 800afae:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800afb0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800afb2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800afb4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800afb6:	2310      	movs	r3, #16
 800afb8:	9a04      	ldr	r2, [sp, #16]
 800afba:	8013      	strh	r3, [r2, #0]
 800afbc:	e7ba      	b.n	800af34 <GetPortGPIOs+0x34>
 800afbe:	46c0      	nop			; (mov r8, r8)
 800afc0:	20006a44 	.word	0x20006a44
 800afc4:	20006b94 	.word	0x20006b94
 800afc8:	20006964 	.word	0x20006964
 800afcc:	20006b24 	.word	0x20006b24
 800afd0:	200069d4 	.word	0x200069d4
 800afd4:	20006ab4 	.word	0x20006ab4
 800afd8:	48000400 	.word	0x48000400

0800afdc <IsFactoryReset>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800afdc:	2080      	movs	r0, #128	; 0x80
 800afde:	4b38      	ldr	r3, [pc, #224]	; (800b0c0 <IsFactoryReset+0xe4>)
 800afe0:	0280      	lsls	r0, r0, #10
 800afe2:	6959      	ldr	r1, [r3, #20]
{
 800afe4:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800afe6:	4301      	orrs	r1, r0
 800afe8:	6159      	str	r1, [r3, #20]
 800afea:	695a      	ldr	r2, [r3, #20]
{
 800afec:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800afee:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800aff0:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800aff2:	9209      	str	r2, [sp, #36]	; 0x24
 800aff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800aff6:	6959      	ldr	r1, [r3, #20]
 800aff8:	02c0      	lsls	r0, r0, #11
 800affa:	4301      	orrs	r1, r0
 800affc:	6159      	str	r1, [r3, #20]
 800affe:	695a      	ldr	r2, [r3, #20]
  __GPIOC_CLK_ENABLE();
	__GPIOD_CLK_ENABLE();
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b000:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800b002:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800b004:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800b006:	920a      	str	r2, [sp, #40]	; 0x28
 800b008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800b00a:	6959      	ldr	r1, [r3, #20]
 800b00c:	0300      	lsls	r0, r0, #12
 800b00e:	4301      	orrs	r1, r0
 800b010:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b012:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800b014:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800b016:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800b018:	4002      	ands	r2, r0
 800b01a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800b01e:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b020:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800b022:	430a      	orrs	r2, r1
 800b024:	615a      	str	r2, [r3, #20]
 800b026:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b028:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800b02a:	400b      	ands	r3, r1
 800b02c:	930c      	str	r3, [sp, #48]	; 0x30
 800b02e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b030:	230e      	movs	r3, #14
 800b032:	446b      	add	r3, sp
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	002a      	movs	r2, r5
 800b038:	ab06      	add	r3, sp, #24
 800b03a:	a905      	add	r1, sp, #20
 800b03c:	2001      	movs	r0, #1
 800b03e:	f7ff ff5f 	bl	800af00 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b042:	aa04      	add	r2, sp, #16
 800b044:	ab08      	add	r3, sp, #32
 800b046:	a907      	add	r1, sp, #28
 800b048:	9400      	str	r4, [sp, #0]
 800b04a:	2005      	movs	r0, #5
 800b04c:	f7ff ff58 	bl	800af00 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b050:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b052:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b054:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b056:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b058:	a90d      	add	r1, sp, #52	; 0x34
 800b05a:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800b05c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b05e:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800b060:	f005 f8b8 	bl	80101d4 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800b064:	2302      	movs	r3, #2
 800b066:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b068:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b06a:	a90d      	add	r1, sp, #52	; 0x34
 800b06c:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800b06e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b070:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800b072:	f005 f8af 	bl	80101d4 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800b076:	8829      	ldrh	r1, [r5, #0]
 800b078:	2200      	movs	r2, #0
 800b07a:	9805      	ldr	r0, [sp, #20]
 800b07c:	f005 fa4a 	bl	8010514 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800b080:	2005      	movs	r0, #5
 800b082:	f001 fbab 	bl	800c7dc <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800b086:	8821      	ldrh	r1, [r4, #0]
 800b088:	9808      	ldr	r0, [sp, #32]
 800b08a:	f005 fa3d 	bl	8010508 <HAL_GPIO_ReadPin>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d006      	beq.n	800b0a0 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b092:	2201      	movs	r2, #1
	
	return 0;
 800b094:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <IsFactoryReset+0xe8>)
 800b098:	4252      	negs	r2, r2
 800b09a:	601a      	str	r2, [r3, #0]
}
 800b09c:	b012      	add	sp, #72	; 0x48
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800b0a0:	8829      	ldrh	r1, [r5, #0]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	9805      	ldr	r0, [sp, #20]
 800b0a6:	f005 fa35 	bl	8010514 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800b0aa:	2005      	movs	r0, #5
 800b0ac:	f001 fb96 	bl	800c7dc <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800b0b0:	8821      	ldrh	r1, [r4, #0]
 800b0b2:	9808      	ldr	r0, [sp, #32]
 800b0b4:	f005 fa28 	bl	8010508 <HAL_GPIO_ReadPin>
 800b0b8:	2801      	cmp	r0, #1
 800b0ba:	d1ea      	bne.n	800b092 <IsFactoryReset+0xb6>
 800b0bc:	e7ee      	b.n	800b09c <IsFactoryReset+0xc0>
 800b0be:	46c0      	nop			; (mov r8, r8)
 800b0c0:	40021000 	.word	0x40021000
 800b0c4:	20007ff0 	.word	0x20007ff0

0800b0c8 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800b0c8:	4770      	bx	lr
 800b0ca:	46c0      	nop			; (mov r8, r8)

0800b0cc <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800b0ce:	4d37      	ldr	r5, [pc, #220]	; (800b1ac <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b0d0:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800b0d2:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800b0d4:	0006      	movs	r6, r0
 800b0d6:	000c      	movs	r4, r1
	if (BOS_initialized) {
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d152      	bne.n	800b182 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800b0dc:	2204      	movs	r2, #4
 800b0de:	4b34      	ldr	r3, [pc, #208]	; (800b1b0 <AddPortButton+0xe4>)
 800b0e0:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800b0e2:	250e      	movs	r5, #14
 800b0e4:	af04      	add	r7, sp, #16
 800b0e6:	446d      	add	r5, sp
 800b0e8:	002a      	movs	r2, r5
 800b0ea:	ab06      	add	r3, sp, #24
 800b0ec:	a905      	add	r1, sp, #20
 800b0ee:	9700      	str	r7, [sp, #0]
 800b0f0:	0020      	movs	r0, r4
 800b0f2:	f7ff ff05 	bl	800af00 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800b0f6:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f8:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800b0fa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0fc:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b0fe:	a907      	add	r1, sp, #28
 800b100:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b102:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b104:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b106:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800b108:	f005 f864 	bl	80101d4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800b10c:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b10e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 800b110:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b112:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b114:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b116:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b118:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800b11a:	f005 f85b 	bl	80101d4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800b11e:	00e2      	lsls	r2, r4, #3
 800b120:	4b24      	ldr	r3, [pc, #144]	; (800b1b4 <AddPortButton+0xe8>)
 800b122:	1912      	adds	r2, r2, r4
 800b124:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b126:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800b128:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b12a:	2312      	movs	r3, #18
 800b12c:	353a      	adds	r5, #58	; 0x3a
 800b12e:	00ad      	lsls	r5, r5, #2
 800b130:	446b      	add	r3, sp
 800b132:	0019      	movs	r1, r3
 800b134:	0028      	movs	r0, r5
 800b136:	f7ff fc15 	bl	800a964 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d109      	bne.n	800b152 <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800b13e:	466b      	mov	r3, sp
 800b140:	8a5b      	ldrh	r3, [r3, #18]
 800b142:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800b144:	091a      	lsrs	r2, r3, #4
 800b146:	42a2      	cmp	r2, r4
 800b148:	d103      	bne.n	800b152 <AddPortButton+0x86>
 800b14a:	220f      	movs	r2, #15
 800b14c:	4013      	ands	r3, r2
 800b14e:	42b3      	cmp	r3, r6
 800b150:	d014      	beq.n	800b17c <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b152:	466b      	mov	r3, sp
 800b154:	0324      	lsls	r4, r4, #12
 800b156:	0231      	lsls	r1, r6, #8
 800b158:	4321      	orrs	r1, r4
 800b15a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b15c:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800b15e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b160:	f7ff fc30 	bl	800a9c4 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b164:	2100      	movs	r1, #0
 800b166:	1c68      	adds	r0, r5, #1
 800b168:	f7ff fc2c 	bl	800a9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b16c:	2100      	movs	r1, #0
 800b16e:	1ca8      	adds	r0, r5, #2
 800b170:	f7ff fc28 	bl	800a9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b174:	1ce8      	adds	r0, r5, #3
 800b176:	2100      	movs	r1, #0
 800b178:	f7ff fc24 	bl	800a9c4 <EE_WriteVariable>
	}

	return result;
}
 800b17c:	2000      	movs	r0, #0
 800b17e:	b00d      	add	sp, #52	; 0x34
 800b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800b182:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <AddPortButton+0xec>)
 800b184:	008f      	lsls	r7, r1, #2
 800b186:	58f8      	ldr	r0, [r7, r3]
 800b188:	f001 ff48 	bl	800d01c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <AddPortButton+0xf0>)
 800b18e:	58f8      	ldr	r0, [r7, r3]
 800b190:	f001 ff44 	bl	800d01c <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800b194:	2104      	movs	r1, #4
 800b196:	4a06      	ldr	r2, [pc, #24]	; (800b1b0 <AddPortButton+0xe4>)
 800b198:	782b      	ldrb	r3, [r5, #0]
 800b19a:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d0a0      	beq.n	800b0e2 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800b1a0:	0020      	movs	r0, r4
 800b1a2:	f001 fd99 	bl	800ccd8 <GetUart>
 800b1a6:	f006 f92b 	bl	8011400 <HAL_UART_DeInit>
 800b1aa:	e79a      	b.n	800b0e2 <AddPortButton+0x16>
 800b1ac:	20000b3b 	.word	0x20000b3b
 800b1b0:	20000c2c 	.word	0x20000c2c
 800b1b4:	200023a0 	.word	0x200023a0
 800b1b8:	200068e8 	.word	0x200068e8
 800b1bc:	200068c8 	.word	0x200068c8

0800b1c0 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	483b      	ldr	r0, [pc, #236]	; (800b2b4 <RemovePortButton+0xf4>)
 800b1c8:	00e9      	lsls	r1, r5, #3
 800b1ca:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b1cc:	002c      	movs	r4, r5
	button[port].type = NONE;
 800b1ce:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800b1d0:	b082      	sub	sp, #8
	button[port].state = NONE;
 800b1d2:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800b1d4:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800b1d6:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800b1d8:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800b1da:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800b1dc:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800b1de:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800b1e0:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800b1e2:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b1e4:	466b      	mov	r3, sp
 800b1e6:	343a      	adds	r4, #58	; 0x3a
 800b1e8:	00a4      	lsls	r4, r4, #2
 800b1ea:	1d99      	adds	r1, r3, #6
 800b1ec:	0020      	movs	r0, r4
 800b1ee:	f7ff fbb9 	bl	800a964 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d02b      	beq.n	800b24e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800b1f6:	0028      	movs	r0, r5
 800b1f8:	f001 fd6e 	bl	800ccd8 <GetUart>

	if (huart->Instance == USART1) {
 800b1fc:	4a2e      	ldr	r2, [pc, #184]	; (800b2b8 <RemovePortButton+0xf8>)
 800b1fe:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b200:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b202:	4293      	cmp	r3, r2
 800b204:	d03b      	beq.n	800b27e <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800b206:	4a2d      	ldr	r2, [pc, #180]	; (800b2bc <RemovePortButton+0xfc>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d040      	beq.n	800b28e <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800b20c:	4a2c      	ldr	r2, [pc, #176]	; (800b2c0 <RemovePortButton+0x100>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d041      	beq.n	800b296 <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800b212:	4a2c      	ldr	r2, [pc, #176]	; (800b2c4 <RemovePortButton+0x104>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d044      	beq.n	800b2a2 <RemovePortButton+0xe2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800b218:	4a2b      	ldr	r2, [pc, #172]	; (800b2c8 <RemovePortButton+0x108>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d033      	beq.n	800b286 <RemovePortButton+0xc6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800b21e:	4a2b      	ldr	r2, [pc, #172]	; (800b2cc <RemovePortButton+0x10c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d042      	beq.n	800b2aa <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800b224:	4a2a      	ldr	r2, [pc, #168]	; (800b2d0 <RemovePortButton+0x110>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d039      	beq.n	800b29e <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800b22a:	4a2a      	ldr	r2, [pc, #168]	; (800b2d4 <RemovePortButton+0x114>)
 800b22c:	4694      	mov	ip, r2
 800b22e:	4463      	add	r3, ip
 800b230:	1e5c      	subs	r4, r3, #1
 800b232:	41a3      	sbcs	r3, r4
 800b234:	425c      	negs	r4, r3
 800b236:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800b238:	2200      	movs	r2, #0
 800b23a:	4b27      	ldr	r3, [pc, #156]	; (800b2d8 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b23c:	4927      	ldr	r1, [pc, #156]	; (800b2dc <RemovePortButton+0x11c>)
	portStatus[port] = FREE;
 800b23e:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800b240:	0030      	movs	r0, r6
 800b242:	3201      	adds	r2, #1
 800b244:	f006 f92a 	bl	801149c <HAL_UART_Receive_IT>

	return result;
}
 800b248:	0020      	movs	r0, r4
 800b24a:	b002      	add	sp, #8
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800b24e:	2100      	movs	r1, #0
 800b250:	0020      	movs	r0, r4
 800b252:	f7ff fbb7 	bl	800a9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800b256:	2100      	movs	r1, #0
 800b258:	1c60      	adds	r0, r4, #1
 800b25a:	f7ff fbb3 	bl	800a9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800b25e:	2100      	movs	r1, #0
 800b260:	1ca0      	adds	r0, r4, #2
 800b262:	f7ff fbaf 	bl	800a9c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800b266:	2100      	movs	r1, #0
 800b268:	1ce0      	adds	r0, r4, #3
 800b26a:	f7ff fbab 	bl	800a9c4 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800b26e:	0028      	movs	r0, r5
 800b270:	f001 fd32 	bl	800ccd8 <GetUart>
	if (huart->Instance == USART1) {
 800b274:	4a10      	ldr	r2, [pc, #64]	; (800b2b8 <RemovePortButton+0xf8>)
 800b276:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800b278:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d1c3      	bne.n	800b206 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800b27e:	f001 fadb 	bl	800c838 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800b282:	2400      	movs	r4, #0
 800b284:	e7d8      	b.n	800b238 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800b286:	f001 fb39 	bl	800c8fc <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800b28a:	2400      	movs	r4, #0
 800b28c:	e7d4      	b.n	800b238 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800b28e:	f001 faed 	bl	800c86c <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800b292:	2400      	movs	r4, #0
 800b294:	e7d0      	b.n	800b238 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800b296:	f001 fb01 	bl	800c89c <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800b29a:	2400      	movs	r4, #0
 800b29c:	e7cc      	b.n	800b238 <RemovePortButton+0x78>
 800b29e:	2400      	movs	r4, #0
 800b2a0:	e7ca      	b.n	800b238 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800b2a2:	f001 fb13 	bl	800c8cc <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800b2a6:	2400      	movs	r4, #0
 800b2a8:	e7c6      	b.n	800b238 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800b2aa:	f001 fb3f 	bl	800c92c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800b2ae:	2400      	movs	r4, #0
 800b2b0:	e7c2      	b.n	800b238 <RemovePortButton+0x78>
 800b2b2:	46c0      	nop			; (mov r8, r8)
 800b2b4:	200023a0 	.word	0x200023a0
 800b2b8:	40013800 	.word	0x40013800
 800b2bc:	40004400 	.word	0x40004400
 800b2c0:	40004800 	.word	0x40004800
 800b2c4:	40004c00 	.word	0x40004c00
 800b2c8:	40005000 	.word	0x40005000
 800b2cc:	40011400 	.word	0x40011400
 800b2d0:	40011800 	.word	0x40011800
 800b2d4:	bffee400 	.word	0xbffee400
 800b2d8:	20000c2c 	.word	0x20000c2c
 800b2dc:	20000c4d 	.word	0x20000c4d

0800b2e0 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	464e      	mov	r6, r9
 800b2e4:	4645      	mov	r5, r8
 800b2e6:	46de      	mov	lr, fp
 800b2e8:	4657      	mov	r7, sl
 800b2ea:	b5e0      	push	{r5, r6, r7, lr}
 800b2ec:	b087      	sub	sp, #28
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	ab10      	add	r3, sp, #64	; 0x40
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	0005      	movs	r5, r0
 800b2f6:	9302      	str	r3, [sp, #8]
 800b2f8:	ab11      	add	r3, sp, #68	; 0x44
 800b2fa:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800b2fc:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800b2fe:	9303      	str	r3, [sp, #12]
 800b300:	ab12      	add	r3, sp, #72	; 0x48
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	469a      	mov	sl, r3
 800b306:	ab13      	add	r3, sp, #76	; 0x4c
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	4699      	mov	r9, r3
 800b30c:	ab14      	add	r3, sp, #80	; 0x50
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	469b      	mov	fp, r3
 800b312:	ab15      	add	r3, sp, #84	; 0x54
 800b314:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800b316:	4b80      	ldr	r3, [pc, #512]	; (800b518 <SetButtonEvents+0x238>)
 800b318:	4698      	mov	r8, r3
 800b31a:	1963      	adds	r3, r4, r5
 800b31c:	4443      	add	r3, r8
 800b31e:	785e      	ldrb	r6, [r3, #1]
 800b320:	2e00      	cmp	r6, #0
 800b322:	d050      	beq.n	800b3c6 <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800b324:	9e01      	ldr	r6, [sp, #4]
 800b326:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800b328:	9e02      	ldr	r6, [sp, #8]
 800b32a:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800b32c:	9e03      	ldr	r6, [sp, #12]
 800b32e:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800b330:	4656      	mov	r6, sl
 800b332:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800b334:	464e      	mov	r6, r9
 800b336:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800b338:	465e      	mov	r6, fp
 800b33a:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800b33c:	2801      	cmp	r0, #1
 800b33e:	d04b      	beq.n	800b3d8 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800b340:	2800      	cmp	r0, #0
 800b342:	d000      	beq.n	800b346 <SetButtonEvents+0x66>
 800b344:	e076      	b.n	800b434 <SetButtonEvents+0x154>
 800b346:	2900      	cmp	r1, #0
 800b348:	d000      	beq.n	800b34c <SetButtonEvents+0x6c>
 800b34a:	e0bf      	b.n	800b4cc <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800b34c:	2601      	movs	r6, #1
 800b34e:	7a19      	ldrb	r1, [r3, #8]
 800b350:	43b1      	bics	r1, r6
 800b352:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800b354:	2a00      	cmp	r2, #0
 800b356:	d142      	bne.n	800b3de <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800b358:	2302      	movs	r3, #2
 800b35a:	4399      	bics	r1, r3
 800b35c:	1963      	adds	r3, r4, r5
 800b35e:	4443      	add	r3, r8
 800b360:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b362:	9b01      	ldr	r3, [sp, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d143      	bne.n	800b3f0 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b368:	2304      	movs	r3, #4
 800b36a:	4399      	bics	r1, r3
 800b36c:	1963      	adds	r3, r4, r5
 800b36e:	4443      	add	r3, r8
 800b370:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b372:	9b02      	ldr	r3, [sp, #8]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d144      	bne.n	800b402 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b378:	2308      	movs	r3, #8
 800b37a:	4399      	bics	r1, r3
 800b37c:	1963      	adds	r3, r4, r5
 800b37e:	4443      	add	r3, r8
 800b380:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d145      	bne.n	800b414 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b388:	2310      	movs	r3, #16
 800b38a:	000a      	movs	r2, r1
 800b38c:	439a      	bics	r2, r3
 800b38e:	1963      	adds	r3, r4, r5
 800b390:	4443      	add	r3, r8
 800b392:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b394:	4653      	mov	r3, sl
 800b396:	2b00      	cmp	r3, #0
 800b398:	d100      	bne.n	800b39c <SetButtonEvents+0xbc>
 800b39a:	e09c      	b.n	800b4d6 <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b39c:	2120      	movs	r1, #32
 800b39e:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b3a0:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b3a2:	1963      	adds	r3, r4, r5
 800b3a4:	4443      	add	r3, r8
 800b3a6:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	d100      	bne.n	800b3ae <SetButtonEvents+0xce>
 800b3ac:	e09d      	b.n	800b4ea <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b3ae:	2240      	movs	r2, #64	; 0x40
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800b3b4:	465b      	mov	r3, fp
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d136      	bne.n	800b428 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b3ba:	217f      	movs	r1, #127	; 0x7f
 800b3bc:	1963      	adds	r3, r4, r5
 800b3be:	4443      	add	r3, r8
 800b3c0:	4011      	ands	r1, r2
 800b3c2:	7219      	strb	r1, [r3, #8]
 800b3c4:	e036      	b.n	800b434 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800b3c6:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800b3c8:	0020      	movs	r0, r4
 800b3ca:	b007      	add	sp, #28
 800b3cc:	bc3c      	pop	{r2, r3, r4, r5}
 800b3ce:	4690      	mov	r8, r2
 800b3d0:	4699      	mov	r9, r3
 800b3d2:	46a2      	mov	sl, r4
 800b3d4:	46ab      	mov	fp, r5
 800b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b3d8:	7a19      	ldrb	r1, [r3, #8]
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800b3de:	2202      	movs	r2, #2
 800b3e0:	1963      	adds	r3, r4, r5
 800b3e2:	4443      	add	r3, r8
 800b3e4:	4311      	orrs	r1, r2
 800b3e6:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b3e8:	2801      	cmp	r0, #1
 800b3ea:	d000      	beq.n	800b3ee <SetButtonEvents+0x10e>
 800b3ec:	e08c      	b.n	800b508 <SetButtonEvents+0x228>
 800b3ee:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800b3f0:	2204      	movs	r2, #4
 800b3f2:	1963      	adds	r3, r4, r5
 800b3f4:	4443      	add	r3, r8
 800b3f6:	4311      	orrs	r1, r2
 800b3f8:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b3fa:	2801      	cmp	r0, #1
 800b3fc:	d000      	beq.n	800b400 <SetButtonEvents+0x120>
 800b3fe:	e07f      	b.n	800b500 <SetButtonEvents+0x220>
 800b400:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800b402:	2208      	movs	r2, #8
 800b404:	1963      	adds	r3, r4, r5
 800b406:	4443      	add	r3, r8
 800b408:	4311      	orrs	r1, r2
 800b40a:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b40c:	2801      	cmp	r0, #1
 800b40e:	d000      	beq.n	800b412 <SetButtonEvents+0x132>
 800b410:	e07e      	b.n	800b510 <SetButtonEvents+0x230>
 800b412:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800b414:	2210      	movs	r2, #16
 800b416:	1963      	adds	r3, r4, r5
 800b418:	4443      	add	r3, r8
 800b41a:	4311      	orrs	r1, r2
 800b41c:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800b41e:	2801      	cmp	r0, #1
 800b420:	d16a      	bne.n	800b4f8 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b422:	2260      	movs	r2, #96	; 0x60
 800b424:	b2c9      	uxtb	r1, r1
 800b426:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800b428:	2180      	movs	r1, #128	; 0x80
 800b42a:	1963      	adds	r3, r4, r5
 800b42c:	4249      	negs	r1, r1
 800b42e:	4443      	add	r3, r8
 800b430:	4311      	orrs	r1, r2
 800b432:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800b434:	002e      	movs	r6, r5
 800b436:	ab04      	add	r3, sp, #16
 800b438:	363a      	adds	r6, #58	; 0x3a
 800b43a:	00b6      	lsls	r6, r6, #2
 800b43c:	1d9f      	adds	r7, r3, #6
 800b43e:	0039      	movs	r1, r7
 800b440:	0030      	movs	r0, r6
 800b442:	f7ff fa8f 	bl	800a964 <EE_ReadVariable>
	if (!res)											// This variable exists
 800b446:	2800      	cmp	r0, #0
 800b448:	d1bd      	bne.n	800b3c6 <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b44a:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800b44c:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800b44e:	4444      	add	r4, r8
 800b450:	7a22      	ldrb	r2, [r4, #8]
 800b452:	b2d9      	uxtb	r1, r3
 800b454:	4291      	cmp	r1, r2
 800b456:	d006      	beq.n	800b466 <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b458:	0a19      	lsrs	r1, r3, #8
 800b45a:	0209      	lsls	r1, r1, #8
 800b45c:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b45e:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800b460:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800b462:	f7ff faaf 	bl	800a9c4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800b466:	1c74      	adds	r4, r6, #1
 800b468:	0039      	movs	r1, r7
 800b46a:	0020      	movs	r0, r4
 800b46c:	f7ff fa7a 	bl	800a964 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800b470:	4652      	mov	r2, sl
 800b472:	9b01      	ldr	r3, [sp, #4]
 800b474:	0219      	lsls	r1, r3, #8
 800b476:	883b      	ldrh	r3, [r7, #0]
 800b478:	430a      	orrs	r2, r1
		if (temp16
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d003      	beq.n	800b486 <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800b47e:	b291      	uxth	r1, r2
 800b480:	0020      	movs	r0, r4
 800b482:	f7ff fa9f 	bl	800a9c4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800b486:	1cb4      	adds	r4, r6, #2
 800b488:	0039      	movs	r1, r7
 800b48a:	0020      	movs	r0, r4
 800b48c:	f7ff fa6a 	bl	800a964 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800b490:	464a      	mov	r2, r9
 800b492:	9b02      	ldr	r3, [sp, #8]
 800b494:	0219      	lsls	r1, r3, #8
 800b496:	883b      	ldrh	r3, [r7, #0]
 800b498:	430a      	orrs	r2, r1
		if (temp16
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800b49e:	b291      	uxth	r1, r2
 800b4a0:	0020      	movs	r0, r4
 800b4a2:	f7ff fa8f 	bl	800a9c4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800b4a6:	3603      	adds	r6, #3
 800b4a8:	0039      	movs	r1, r7
 800b4aa:	0030      	movs	r0, r6
 800b4ac:	f7ff fa5a 	bl	800a964 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b4b0:	465a      	mov	r2, fp
 800b4b2:	9b03      	ldr	r3, [sp, #12]
	return result;
 800b4b4:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800b4b6:	0219      	lsls	r1, r3, #8
 800b4b8:	883b      	ldrh	r3, [r7, #0]
 800b4ba:	430a      	orrs	r2, r1
		if (temp16
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d100      	bne.n	800b4c2 <SetButtonEvents+0x1e2>
 800b4c0:	e782      	b.n	800b3c8 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800b4c2:	b291      	uxth	r1, r2
 800b4c4:	0030      	movs	r0, r6
 800b4c6:	f7ff fa7d 	bl	800a9c4 <EE_WriteVariable>
 800b4ca:	e77d      	b.n	800b3c8 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800b4cc:	2601      	movs	r6, #1
 800b4ce:	7a19      	ldrb	r1, [r3, #8]
 800b4d0:	4331      	orrs	r1, r6
 800b4d2:	7219      	strb	r1, [r3, #8]
 800b4d4:	e73e      	b.n	800b354 <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800b4d6:	2320      	movs	r3, #32
 800b4d8:	439a      	bics	r2, r3
 800b4da:	1963      	adds	r3, r4, r5
 800b4dc:	4443      	add	r3, r8
 800b4de:	0011      	movs	r1, r2
 800b4e0:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800b4e2:	464a      	mov	r2, r9
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	d000      	beq.n	800b4ea <SetButtonEvents+0x20a>
 800b4e8:	e761      	b.n	800b3ae <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800b4ea:	2340      	movs	r3, #64	; 0x40
 800b4ec:	000a      	movs	r2, r1
 800b4ee:	439a      	bics	r2, r3
 800b4f0:	1963      	adds	r3, r4, r5
 800b4f2:	4443      	add	r3, r8
 800b4f4:	721a      	strb	r2, [r3, #8]
 800b4f6:	e75d      	b.n	800b3b4 <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d19b      	bne.n	800b434 <SetButtonEvents+0x154>
 800b4fc:	7a1a      	ldrb	r2, [r3, #8]
 800b4fe:	e749      	b.n	800b394 <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800b500:	2800      	cmp	r0, #0
 800b502:	d197      	bne.n	800b434 <SetButtonEvents+0x154>
 800b504:	7a19      	ldrb	r1, [r3, #8]
 800b506:	e734      	b.n	800b372 <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800b508:	2800      	cmp	r0, #0
 800b50a:	d193      	bne.n	800b434 <SetButtonEvents+0x154>
 800b50c:	7a19      	ldrb	r1, [r3, #8]
 800b50e:	e728      	b.n	800b362 <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800b510:	2800      	cmp	r0, #0
 800b512:	d18f      	bne.n	800b434 <SetButtonEvents+0x154>
 800b514:	7a19      	ldrb	r1, [r3, #8]
 800b516:	e734      	b.n	800b382 <SetButtonEvents+0xa2>
 800b518:	200023a0 	.word	0x200023a0

0800b51c <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800b51c:	4811      	ldr	r0, [pc, #68]	; (800b564 <MX_ADC_Init+0x48>)
 800b51e:	4b12      	ldr	r3, [pc, #72]	; (800b568 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 800b520:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b522:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 800b524:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b526:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b528:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b52a:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b52c:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b52e:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b530:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b532:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b534:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b536:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b538:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b53a:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800b53c:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800b53e:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800b540:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800b542:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b544:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b546:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800b548:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b54a:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800b54c:	f003 fc70 	bl	800ee30 <HAL_ADC_Init>
 800b550:	2800      	cmp	r0, #0
 800b552:	d002      	beq.n	800b55a <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800b554:	2064      	movs	r0, #100	; 0x64
 800b556:	f003 fb91 	bl	800ec7c <HAL_Delay>
	ADC_flag = 1;
 800b55a:	2368      	movs	r3, #104	; 0x68
 800b55c:	2101      	movs	r1, #1
 800b55e:	4a03      	ldr	r2, [pc, #12]	; (800b56c <MX_ADC_Init+0x50>)
 800b560:	54d1      	strb	r1, [r2, r3]
}
 800b562:	bd10      	pop	{r4, pc}
 800b564:	20006c28 	.word	0x20006c28
 800b568:	40012400 	.word	0x40012400
 800b56c:	200023a0 	.word	0x200023a0

0800b570 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800b570:	b500      	push	{lr}
 800b572:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b574:	2214      	movs	r2, #20
 800b576:	2100      	movs	r1, #0
 800b578:	a803      	add	r0, sp, #12
 800b57a:	f006 fed5 	bl	8012328 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b57e:	2080      	movs	r0, #128	; 0x80
 800b580:	4b11      	ldr	r3, [pc, #68]	; (800b5c8 <HAL_ADC_MspInit+0x58>)
 800b582:	0080      	lsls	r0, r0, #2
 800b584:	6999      	ldr	r1, [r3, #24]
 800b586:	4301      	orrs	r1, r0
 800b588:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b58a:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b58c:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b58e:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800b590:	4002      	ands	r2, r0
 800b592:	9201      	str	r2, [sp, #4]
 800b594:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b596:	695a      	ldr	r2, [r3, #20]
 800b598:	430a      	orrs	r2, r1
 800b59a:	615a      	str	r2, [r3, #20]
 800b59c:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800b59e:	4a0b      	ldr	r2, [pc, #44]	; (800b5cc <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800b5a0:	400b      	ands	r3, r1
 800b5a2:	9302      	str	r3, [sp, #8]
 800b5a4:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800b5a6:	2369      	movs	r3, #105	; 0x69
 800b5a8:	5cd3      	ldrb	r3, [r2, r3]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d001      	beq.n	800b5b2 <HAL_ADC_MspInit+0x42>
}
 800b5ae:	b009      	add	sp, #36	; 0x24
 800b5b0:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b5b2:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800b5b4:	333b      	adds	r3, #59	; 0x3b
 800b5b6:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b5b8:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5ba:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b5bc:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5be:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800b5c0:	f004 fe08 	bl	80101d4 <HAL_GPIO_Init>
}
 800b5c4:	e7f3      	b.n	800b5ae <HAL_ADC_MspInit+0x3e>
 800b5c6:	46c0      	nop			; (mov r8, r8)
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	200023a0 	.word	0x200023a0

0800b5d0 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	46ce      	mov	lr, r9
 800b5d4:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 800b5d6:	2368      	movs	r3, #104	; 0x68
void ReadTempAndVref(float *temp, float *Vref) {
 800b5d8:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800b5da:	4c54      	ldr	r4, [pc, #336]	; (800b72c <ReadTempAndVref+0x15c>)
void ReadTempAndVref(float *temp, float *Vref) {
 800b5dc:	0006      	movs	r6, r0
	if (0 == ADC_flag)
 800b5de:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800b5e0:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d100      	bne.n	800b5e8 <ReadTempAndVref+0x18>
 800b5e6:	e09d      	b.n	800b724 <ReadTempAndVref+0x154>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b5e8:	2310      	movs	r3, #16
 800b5ea:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b5ec:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b5ee:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b5f0:	015b      	lsls	r3, r3, #5
 800b5f2:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b5f4:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b5f6:	4d4e      	ldr	r5, [pc, #312]	; (800b730 <ReadTempAndVref+0x160>)
 800b5f8:	316c      	adds	r1, #108	; 0x6c
 800b5fa:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b5fc:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b5fe:	f003 fd6f 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800b602:	2800      	cmp	r0, #0
 800b604:	d000      	beq.n	800b608 <ReadTempAndVref+0x38>
 800b606:	e089      	b.n	800b71c <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 800b608:	0028      	movs	r0, r5
 800b60a:	f003 fcb3 	bl	800ef74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b60e:	2164      	movs	r1, #100	; 0x64
 800b610:	0028      	movs	r0, r5
 800b612:	f003 fcfb 	bl	800f00c <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800b616:	0028      	movs	r0, r5
 800b618:	f003 fd5c 	bl	800f0d4 <HAL_ADC_GetValue>
 800b61c:	2378      	movs	r3, #120	; 0x78
 800b61e:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800b620:	0400      	lsls	r0, r0, #16
 800b622:	0c00      	lsrs	r0, r0, #16
 800b624:	f7f7 fa12 	bl	8002a4c <__aeabi_i2d>
 800b628:	4a42      	ldr	r2, [pc, #264]	; (800b734 <ReadTempAndVref+0x164>)
 800b62a:	4b43      	ldr	r3, [pc, #268]	; (800b738 <ReadTempAndVref+0x168>)
 800b62c:	f7f6 fc02 	bl	8001e34 <__aeabi_dmul>
 800b630:	2200      	movs	r2, #0
 800b632:	4b42      	ldr	r3, [pc, #264]	; (800b73c <ReadTempAndVref+0x16c>)
 800b634:	f7f5 fff4 	bl	8001620 <__aeabi_ddiv>
 800b638:	4a41      	ldr	r2, [pc, #260]	; (800b740 <ReadTempAndVref+0x170>)
 800b63a:	4b42      	ldr	r3, [pc, #264]	; (800b744 <ReadTempAndVref+0x174>)
 800b63c:	f7f6 fe6c 	bl	8002318 <__aeabi_dsub>
 800b640:	4a41      	ldr	r2, [pc, #260]	; (800b748 <ReadTempAndVref+0x178>)
 800b642:	4b42      	ldr	r3, [pc, #264]	; (800b74c <ReadTempAndVref+0x17c>)
 800b644:	f7f5 ffec 	bl	8001620 <__aeabi_ddiv>
 800b648:	4b41      	ldr	r3, [pc, #260]	; (800b750 <ReadTempAndVref+0x180>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	f7f5 fccc 	bl	8000fe8 <__aeabi_dadd>
 800b650:	f7f7 faba 	bl	8002bc8 <__aeabi_d2f>
 800b654:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800b656:	0028      	movs	r0, r5
 800b658:	f003 fcb8 	bl	800efcc <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800b65c:	2310      	movs	r3, #16
 800b65e:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800b660:	4b3c      	ldr	r3, [pc, #240]	; (800b754 <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b662:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b664:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b666:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b668:	316c      	adds	r1, #108	; 0x6c
 800b66a:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b66c:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b66e:	f003 fd37 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800b672:	2800      	cmp	r0, #0
 800b674:	d14e      	bne.n	800b714 <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b676:	2311      	movs	r3, #17
 800b678:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b67a:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b67c:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b67e:	015b      	lsls	r3, r3, #5
 800b680:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b682:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b684:	316c      	adds	r1, #108	; 0x6c
 800b686:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800b688:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b68a:	f003 fd29 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d13c      	bne.n	800b70c <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 800b692:	0028      	movs	r0, r5
 800b694:	f003 fc6e 	bl	800ef74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800b698:	2164      	movs	r1, #100	; 0x64
 800b69a:	0028      	movs	r0, r5
 800b69c:	f003 fcb6 	bl	800f00c <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800b6a0:	0028      	movs	r0, r5
 800b6a2:	f003 fd17 	bl	800f0d4 <HAL_ADC_GetValue>
 800b6a6:	237a      	movs	r3, #122	; 0x7a
 800b6a8:	4680      	mov	r8, r0
 800b6aa:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800b6ac:	4b2a      	ldr	r3, [pc, #168]	; (800b758 <ReadTempAndVref+0x188>)
 800b6ae:	8818      	ldrh	r0, [r3, #0]
 800b6b0:	f7f7 f9cc 	bl	8002a4c <__aeabi_i2d>
 800b6b4:	4a1f      	ldr	r2, [pc, #124]	; (800b734 <ReadTempAndVref+0x164>)
 800b6b6:	4b20      	ldr	r3, [pc, #128]	; (800b738 <ReadTempAndVref+0x168>)
 800b6b8:	f7f6 fbbc 	bl	8001e34 <__aeabi_dmul>
 800b6bc:	4643      	mov	r3, r8
 800b6be:	0006      	movs	r6, r0
 800b6c0:	0418      	lsls	r0, r3, #16
 800b6c2:	0c00      	lsrs	r0, r0, #16
 800b6c4:	000f      	movs	r7, r1
 800b6c6:	f7f7 f9c1 	bl	8002a4c <__aeabi_i2d>
 800b6ca:	0002      	movs	r2, r0
 800b6cc:	000b      	movs	r3, r1
 800b6ce:	0030      	movs	r0, r6
 800b6d0:	0039      	movs	r1, r7
 800b6d2:	f7f5 ffa5 	bl	8001620 <__aeabi_ddiv>
 800b6d6:	f7f7 fa77 	bl	8002bc8 <__aeabi_d2f>
 800b6da:	464b      	mov	r3, r9
 800b6dc:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800b6de:	0028      	movs	r0, r5
 800b6e0:	f003 fc74 	bl	800efcc <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800b6e4:	2311      	movs	r3, #17
 800b6e6:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800b6e8:	4b1a      	ldr	r3, [pc, #104]	; (800b754 <ReadTempAndVref+0x184>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6ea:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800b6ec:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b6ee:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6f0:	316c      	adds	r1, #108	; 0x6c
 800b6f2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b6f4:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b6f6:	f003 fcf3 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d002      	beq.n	800b704 <ReadTempAndVref+0x134>
	HAL_Delay(100);
 800b6fe:	2064      	movs	r0, #100	; 0x64
 800b700:	f003 fabc 	bl	800ec7c <HAL_Delay>
}
 800b704:	bc0c      	pop	{r2, r3}
 800b706:	4690      	mov	r8, r2
 800b708:	4699      	mov	r9, r3
 800b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 800b70c:	2064      	movs	r0, #100	; 0x64
 800b70e:	f003 fab5 	bl	800ec7c <HAL_Delay>
 800b712:	e7be      	b.n	800b692 <ReadTempAndVref+0xc2>
 800b714:	2064      	movs	r0, #100	; 0x64
 800b716:	f003 fab1 	bl	800ec7c <HAL_Delay>
 800b71a:	e7ac      	b.n	800b676 <ReadTempAndVref+0xa6>
 800b71c:	2064      	movs	r0, #100	; 0x64
 800b71e:	f003 faad 	bl	800ec7c <HAL_Delay>
 800b722:	e771      	b.n	800b608 <ReadTempAndVref+0x38>
		MX_ADC_Init();
 800b724:	f7ff fefa 	bl	800b51c <MX_ADC_Init>
 800b728:	e75e      	b.n	800b5e8 <ReadTempAndVref+0x18>
 800b72a:	46c0      	nop			; (mov r8, r8)
 800b72c:	200023a0 	.word	0x200023a0
 800b730:	20006c28 	.word	0x20006c28
 800b734:	66666666 	.word	0x66666666
 800b738:	400a6666 	.word	0x400a6666
 800b73c:	40affe00 	.word	0x40affe00
 800b740:	28f5c28f 	.word	0x28f5c28f
 800b744:	3ff68f5c 	.word	0x3ff68f5c
 800b748:	33333333 	.word	0x33333333
 800b74c:	40113333 	.word	0x40113333
 800b750:	40390000 	.word	0x40390000
 800b754:	00001001 	.word	0x00001001
 800b758:	1ffff7ba 	.word	0x1ffff7ba

0800b75c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800b75c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800b75e:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800b760:	b087      	sub	sp, #28
 800b762:	0005      	movs	r5, r0
 800b764:	000e      	movs	r6, r1
	if (port == 2 || port == 3) {
 800b766:	2b01      	cmp	r3, #1
 800b768:	d901      	bls.n	800b76e <GetReadPrecentage+0x12>
}
 800b76a:	b007      	add	sp, #28
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800b76e:	2368      	movs	r3, #104	; 0x68
 800b770:	4c57      	ldr	r4, [pc, #348]	; (800b8d0 <GetReadPrecentage+0x174>)
 800b772:	5ce3      	ldrb	r3, [r4, r3]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d062      	beq.n	800b83e <GetReadPrecentage+0xe2>
		Channel = Get_channel(GetUart(port), "bottom");
 800b778:	0028      	movs	r0, r5
 800b77a:	f001 faad 	bl	800ccd8 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800b77e:	4a55      	ldr	r2, [pc, #340]	; (800b8d4 <GetReadPrecentage+0x178>)
 800b780:	6803      	ldr	r3, [r0, #0]
 800b782:	4293      	cmp	r3, r2
 800b784:	d07e      	beq.n	800b884 <GetReadPrecentage+0x128>
	else if (huart->Instance == USART6 && side == "top")
 800b786:	4a54      	ldr	r2, [pc, #336]	; (800b8d8 <GetReadPrecentage+0x17c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d04d      	beq.n	800b828 <GetReadPrecentage+0xcc>
 800b78c:	2300      	movs	r3, #0
 800b78e:	0019      	movs	r1, r3
		Channel = Get_channel(GetUart(port), "bottom");
 800b790:	227c      	movs	r2, #124	; 0x7c
 800b792:	54a3      	strb	r3, [r4, r2]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b794:	2380      	movs	r3, #128	; 0x80
		sConfig.Channel = Channel;
 800b796:	66e1      	str	r1, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b798:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b79a:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b79c:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b79e:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b7a0:	4d4e      	ldr	r5, [pc, #312]	; (800b8dc <GetReadPrecentage+0x180>)
 800b7a2:	316c      	adds	r1, #108	; 0x6c
 800b7a4:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b7a6:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b7a8:	f003 fc9a 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d142      	bne.n	800b836 <GetReadPrecentage+0xda>
		HAL_ADC_Start(&hadc);
 800b7b0:	0028      	movs	r0, r5
 800b7b2:	f003 fbdf 	bl	800ef74 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800b7b6:	2164      	movs	r1, #100	; 0x64
 800b7b8:	0028      	movs	r0, r5
 800b7ba:	f003 fc27 	bl	800f00c <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800b7be:	0028      	movs	r0, r5
 800b7c0:	f003 fc88 	bl	800f0d4 <HAL_ADC_GetValue>
 800b7c4:	f7f5 fbd0 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800b7c8:	f7f7 f9ac 	bl	8002b24 <__aeabi_f2d>
 800b7cc:	4a44      	ldr	r2, [pc, #272]	; (800b8e0 <GetReadPrecentage+0x184>)
 800b7ce:	4b45      	ldr	r3, [pc, #276]	; (800b8e4 <GetReadPrecentage+0x188>)
 800b7d0:	f7f6 fb30 	bl	8001e34 <__aeabi_dmul>
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <GetReadPrecentage+0x18c>)
 800b7d8:	f7f5 ff22 	bl	8001620 <__aeabi_ddiv>
 800b7dc:	f7f7 f9f4 	bl	8002bc8 <__aeabi_d2f>
 800b7e0:	4f42      	ldr	r7, [pc, #264]	; (800b8ec <GetReadPrecentage+0x190>)
		current = (100 * percentage) / 3.3;
 800b7e2:	4943      	ldr	r1, [pc, #268]	; (800b8f0 <GetReadPrecentage+0x194>)
		percentage = 3.3 * percentage / 4095;
 800b7e4:	6038      	str	r0, [r7, #0]
		current = (100 * percentage) / 3.3;
 800b7e6:	f7f5 f8a9 	bl	800093c <__aeabi_fmul>
 800b7ea:	f7f7 f99b 	bl	8002b24 <__aeabi_f2d>
 800b7ee:	4b3d      	ldr	r3, [pc, #244]	; (800b8e4 <GetReadPrecentage+0x188>)
 800b7f0:	4a3b      	ldr	r2, [pc, #236]	; (800b8e0 <GetReadPrecentage+0x184>)
 800b7f2:	f7f5 ff15 	bl	8001620 <__aeabi_ddiv>
 800b7f6:	f7f7 f9e7 	bl	8002bc8 <__aeabi_d2f>
 800b7fa:	6078      	str	r0, [r7, #4]
		*precentageValue = current;
 800b7fc:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800b7fe:	0028      	movs	r0, r5
 800b800:	f003 fbe4 	bl	800efcc <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800b804:	237c      	movs	r3, #124	; 0x7c
 800b806:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b808:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800b80a:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800b80c:	4b39      	ldr	r3, [pc, #228]	; (800b8f4 <GetReadPrecentage+0x198>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b80e:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800b810:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b812:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b814:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800b816:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b818:	f003 fc62 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d0a4      	beq.n	800b76a <GetReadPrecentage+0xe>
	HAL_Delay(100);
 800b820:	2064      	movs	r0, #100	; 0x64
 800b822:	f003 fa2b 	bl	800ec7c <HAL_Delay>
 800b826:	e7a0      	b.n	800b76a <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800b828:	4a33      	ldr	r2, [pc, #204]	; (800b8f8 <GetReadPrecentage+0x19c>)
 800b82a:	4b34      	ldr	r3, [pc, #208]	; (800b8fc <GetReadPrecentage+0x1a0>)
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d04c      	beq.n	800b8ca <GetReadPrecentage+0x16e>
 800b830:	2105      	movs	r1, #5
		return ADC_CHANNEL_5;
 800b832:	2305      	movs	r3, #5
 800b834:	e7ac      	b.n	800b790 <GetReadPrecentage+0x34>
	HAL_Delay(100);
 800b836:	2064      	movs	r0, #100	; 0x64
 800b838:	f003 fa20 	bl	800ec7c <HAL_Delay>
 800b83c:	e7b8      	b.n	800b7b0 <GetReadPrecentage+0x54>
			MX_ADC_Init();
 800b83e:	f7ff fe6d 	bl	800b51c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800b842:	0028      	movs	r0, r5
 800b844:	f001 fa48 	bl	800ccd8 <GetUart>
 800b848:	f005 fdda 	bl	8011400 <HAL_UART_DeInit>
			if (port == 3) {
 800b84c:	2d03      	cmp	r5, #3
 800b84e:	d020      	beq.n	800b892 <GetReadPrecentage+0x136>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800b850:	2090      	movs	r0, #144	; 0x90
 800b852:	2104      	movs	r1, #4
 800b854:	05c0      	lsls	r0, r0, #23
 800b856:	f004 fdb9 	bl	80103cc <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b85a:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b85c:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b85e:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b860:	3b03      	subs	r3, #3
 800b862:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b864:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b866:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b868:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b86a:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b86c:	f004 fcb2 	bl	80101d4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800b870:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b872:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800b874:	4b22      	ldr	r3, [pc, #136]	; (800b900 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b876:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800b878:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800b87a:	05c0      	lsls	r0, r0, #23
 800b87c:	3a05      	subs	r2, #5
 800b87e:	f004 fe49 	bl	8010514 <HAL_GPIO_WritePin>
 800b882:	e779      	b.n	800b778 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800b884:	4a1c      	ldr	r2, [pc, #112]	; (800b8f8 <GetReadPrecentage+0x19c>)
 800b886:	4b1d      	ldr	r3, [pc, #116]	; (800b8fc <GetReadPrecentage+0x1a0>)
 800b888:	429a      	cmp	r2, r3
 800b88a:	d01b      	beq.n	800b8c4 <GetReadPrecentage+0x168>
 800b88c:	2103      	movs	r1, #3
		return ADC_CHANNEL_3;
 800b88e:	2303      	movs	r3, #3
 800b890:	e77e      	b.n	800b790 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800b892:	2090      	movs	r0, #144	; 0x90
 800b894:	2110      	movs	r1, #16
 800b896:	05c0      	lsls	r0, r0, #23
 800b898:	f004 fd98 	bl	80103cc <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b89c:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b89e:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b8a0:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8a2:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b8a4:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8a6:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b8a8:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b8aa:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ac:	f004 fc92 	bl	80101d4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800b8b0:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b8b2:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800b8b4:	4b12      	ldr	r3, [pc, #72]	; (800b900 <GetReadPrecentage+0x1a4>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b8b6:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800b8b8:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b8ba:	05c0      	lsls	r0, r0, #23
 800b8bc:	3a05      	subs	r2, #5
 800b8be:	f004 fe29 	bl	8010514 <HAL_GPIO_WritePin>
 800b8c2:	e759      	b.n	800b778 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800b8c4:	2102      	movs	r1, #2
		return ADC_CHANNEL_2;
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e762      	b.n	800b790 <GetReadPrecentage+0x34>
	else if (huart->Instance == USART6 && side == "top")
 800b8ca:	2104      	movs	r1, #4
		return ADC_CHANNEL_4;
 800b8cc:	2304      	movs	r3, #4
 800b8ce:	e75f      	b.n	800b790 <GetReadPrecentage+0x34>
 800b8d0:	200023a0 	.word	0x200023a0
 800b8d4:	40004400 	.word	0x40004400
 800b8d8:	40011400 	.word	0x40011400
 800b8dc:	20006c28 	.word	0x20006c28
 800b8e0:	66666666 	.word	0x66666666
 800b8e4:	400a6666 	.word	0x400a6666
 800b8e8:	40affe00 	.word	0x40affe00
 800b8ec:	20002420 	.word	0x20002420
 800b8f0:	42c80000 	.word	0x42c80000
 800b8f4:	00001001 	.word	0x00001001
 800b8f8:	08017e34 	.word	0x08017e34
 800b8fc:	08017e30 	.word	0x08017e30
 800b900:	20000c2c 	.word	0x20000c2c

0800b904 <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800b904:	2802      	cmp	r0, #2
 800b906:	d00e      	beq.n	800b926 <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800b908:	2803      	cmp	r0, #3
 800b90a:	d002      	beq.n	800b912 <Get_Rank+0xe>
 800b90c:	4b10      	ldr	r3, [pc, #64]	; (800b950 <Get_Rank+0x4c>)
 800b90e:	7a18      	ldrb	r0, [r3, #8]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 800b910:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800b912:	4b10      	ldr	r3, [pc, #64]	; (800b954 <Get_Rank+0x50>)
 800b914:	4299      	cmp	r1, r3
 800b916:	d016      	beq.n	800b946 <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 800b918:	4b0f      	ldr	r3, [pc, #60]	; (800b958 <Get_Rank+0x54>)
 800b91a:	4299      	cmp	r1, r3
 800b91c:	d1f6      	bne.n	800b90c <Get_Rank+0x8>
		Rank_t = 3;
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <Get_Rank+0x4c>)
 800b920:	7218      	strb	r0, [r3, #8]
 800b922:	2003      	movs	r0, #3
 800b924:	e7f4      	b.n	800b910 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 800b926:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <Get_Rank+0x50>)
 800b928:	4299      	cmp	r1, r3
 800b92a:	d007      	beq.n	800b93c <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 800b92c:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <Get_Rank+0x54>)
 800b92e:	4299      	cmp	r1, r3
 800b930:	d1ec      	bne.n	800b90c <Get_Rank+0x8>
		Rank_t = 1;
 800b932:	2201      	movs	r2, #1
 800b934:	4b06      	ldr	r3, [pc, #24]	; (800b950 <Get_Rank+0x4c>)
 800b936:	2001      	movs	r0, #1
 800b938:	721a      	strb	r2, [r3, #8]
 800b93a:	e7e9      	b.n	800b910 <Get_Rank+0xc>
		Rank_t = 0;
 800b93c:	2200      	movs	r2, #0
 800b93e:	4b04      	ldr	r3, [pc, #16]	; (800b950 <Get_Rank+0x4c>)
 800b940:	2000      	movs	r0, #0
 800b942:	721a      	strb	r2, [r3, #8]
 800b944:	e7e4      	b.n	800b910 <Get_Rank+0xc>
		Rank_t = 2;
 800b946:	2202      	movs	r2, #2
 800b948:	4b01      	ldr	r3, [pc, #4]	; (800b950 <Get_Rank+0x4c>)
 800b94a:	3801      	subs	r0, #1
 800b94c:	721a      	strb	r2, [r3, #8]
 800b94e:	e7df      	b.n	800b910 <Get_Rank+0xc>
 800b950:	20002420 	.word	0x20002420
 800b954:	08017e30 	.word	0x08017e30
 800b958:	08017e34 	.word	0x08017e34

0800b95c <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800b95e:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800b960:	0004      	movs	r4, r0
 800b962:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800b964:	2b01      	cmp	r3, #1
 800b966:	d900      	bls.n	800b96a <ADCSelectChannel+0xe>
}
 800b968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800b96a:	2369      	movs	r3, #105	; 0x69
 800b96c:	2201      	movs	r2, #1
 800b96e:	4e1c      	ldr	r6, [pc, #112]	; (800b9e0 <ADCSelectChannel+0x84>)
 800b970:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800b972:	f001 f9b1 	bl	800ccd8 <GetUart>
 800b976:	f005 fd43 	bl	8011400 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800b97a:	2206      	movs	r2, #6
 800b97c:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800b97e:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800b980:	191b      	adds	r3, r3, r4
 800b982:	3b01      	subs	r3, #1
 800b984:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800b986:	f001 f9a7 	bl	800ccd8 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800b98a:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <ADCSelectChannel+0x8c>)
 800b98c:	6803      	ldr	r3, [r0, #0]
 800b98e:	4293      	cmp	r3, r2
 800b990:	d011      	beq.n	800b9b6 <ADCSelectChannel+0x5a>
	else if (huart->Instance == USART6 && side == "top")
 800b992:	4a16      	ldr	r2, [pc, #88]	; (800b9ec <ADCSelectChannel+0x90>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d016      	beq.n	800b9c6 <ADCSelectChannel+0x6a>
		Channel = Get_channel(GetUart(ADC_port), side);
 800b998:	237c      	movs	r3, #124	; 0x7c
		Rank_t = Get_Rank(ADC_port, side);
 800b99a:	0029      	movs	r1, r5
 800b99c:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800b99e:	54f7      	strb	r7, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800b9a0:	f7ff ffb0 	bl	800b904 <Get_Rank>
 800b9a4:	4b12      	ldr	r3, [pc, #72]	; (800b9f0 <ADCSelectChannel+0x94>)
 800b9a6:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 800b9a8:	2368      	movs	r3, #104	; 0x68
 800b9aa:	5cf3      	ldrb	r3, [r6, r3]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1db      	bne.n	800b968 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800b9b0:	f7ff fdb4 	bl	800b51c <MX_ADC_Init>
}
 800b9b4:	e7d8      	b.n	800b968 <ADCSelectChannel+0xc>
	if (huart->Instance == USART2 && side == "top")
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <ADCSelectChannel+0x98>)
 800b9b8:	429d      	cmp	r5, r3
 800b9ba:	d00e      	beq.n	800b9da <ADCSelectChannel+0x7e>
	else if (huart->Instance == USART2 && side == "bottom")
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <ADCSelectChannel+0x9c>)
 800b9be:	429d      	cmp	r5, r3
 800b9c0:	d1ea      	bne.n	800b998 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_3;
 800b9c2:	2703      	movs	r7, #3
 800b9c4:	e7e8      	b.n	800b998 <ADCSelectChannel+0x3c>
	else if (huart->Instance == USART6 && side == "top")
 800b9c6:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <ADCSelectChannel+0x98>)
 800b9c8:	429d      	cmp	r5, r3
 800b9ca:	d004      	beq.n	800b9d6 <ADCSelectChannel+0x7a>
	else if (huart->Instance == USART6 && side == "bottom")
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <ADCSelectChannel+0x9c>)
 800b9ce:	429d      	cmp	r5, r3
 800b9d0:	d1e2      	bne.n	800b998 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_5;
 800b9d2:	2705      	movs	r7, #5
 800b9d4:	e7e0      	b.n	800b998 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_4;
 800b9d6:	2704      	movs	r7, #4
 800b9d8:	e7de      	b.n	800b998 <ADCSelectChannel+0x3c>
		return ADC_CHANNEL_2;
 800b9da:	2702      	movs	r7, #2
 800b9dc:	e7dc      	b.n	800b998 <ADCSelectChannel+0x3c>
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	200023a0 	.word	0x200023a0
 800b9e4:	20000c2c 	.word	0x20000c2c
 800b9e8:	40004400 	.word	0x40004400
 800b9ec:	40011400 	.word	0x40011400
 800b9f0:	20002420 	.word	0x20002420
 800b9f4:	08017e30 	.word	0x08017e30
 800b9f8:	08017e34 	.word	0x08017e34

0800b9fc <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	4647      	mov	r7, r8
 800ba00:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 800ba02:	2368      	movs	r3, #104	; 0x68
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba04:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800ba06:	4d3a      	ldr	r5, [pc, #232]	; (800baf0 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba08:	0007      	movs	r7, r0
	if (ADC_flag == 1) {
 800ba0a:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ba0c:	000c      	movs	r4, r1
 800ba0e:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d00b      	beq.n	800ba2c <ReadADCChannel+0x30>
 800ba14:	4c37      	ldr	r4, [pc, #220]	; (800baf4 <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800ba16:	7a23      	ldrb	r3, [r4, #8]
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	18e4      	adds	r4, r4, r3
 800ba1c:	89a0      	ldrh	r0, [r4, #12]
 800ba1e:	f7f5 faa3 	bl	8000f68 <__aeabi_ui2f>
 800ba22:	6030      	str	r0, [r6, #0]
}
 800ba24:	bc0c      	pop	{r2, r3}
 800ba26:	4690      	mov	r8, r2
 800ba28:	4699      	mov	r9, r3
 800ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800ba2c:	f001 f954 	bl	800ccd8 <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800ba30:	4a31      	ldr	r2, [pc, #196]	; (800baf8 <ReadADCChannel+0xfc>)
 800ba32:	6803      	ldr	r3, [r0, #0]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d03f      	beq.n	800bab8 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 800ba38:	4a30      	ldr	r2, [pc, #192]	; (800bafc <ReadADCChannel+0x100>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d049      	beq.n	800bad2 <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 800ba3e:	237c      	movs	r3, #124	; 0x7c
 800ba40:	464a      	mov	r2, r9
 800ba42:	4698      	mov	r8, r3
		Rank_t = Get_Rank(Port, side);
 800ba44:	0021      	movs	r1, r4
 800ba46:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800ba48:	54ea      	strb	r2, [r5, r3]
		Rank_t = Get_Rank(Port, side);
 800ba4a:	f7ff ff5b 	bl	800b904 <Get_Rank>
		sConfig.Channel = Channel;
 800ba4e:	4643      	mov	r3, r8
 800ba50:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba52:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800ba54:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ba56:	2380      	movs	r3, #128	; 0x80
 800ba58:	015b      	lsls	r3, r3, #5
 800ba5a:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800ba5c:	2303      	movs	r3, #3
		Rank_t = Get_Rank(Port, side);
 800ba5e:	4c25      	ldr	r4, [pc, #148]	; (800baf4 <ReadADCChannel+0xf8>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba60:	4f27      	ldr	r7, [pc, #156]	; (800bb00 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 800ba62:	7220      	strb	r0, [r4, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba64:	316c      	adds	r1, #108	; 0x6c
 800ba66:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800ba68:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba6a:	f003 fb39 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d12b      	bne.n	800baca <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 800ba72:	0038      	movs	r0, r7
 800ba74:	f003 fa7e 	bl	800ef74 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800ba78:	2164      	movs	r1, #100	; 0x64
 800ba7a:	0038      	movs	r0, r7
 800ba7c:	f003 fac6 	bl	800f00c <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800ba80:	0038      	movs	r0, r7
 800ba82:	f003 fb27 	bl	800f0d4 <HAL_ADC_GetValue>
 800ba86:	7a23      	ldrb	r3, [r4, #8]
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	18e3      	adds	r3, r4, r3
 800ba8c:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 800ba8e:	0038      	movs	r0, r7
 800ba90:	f003 fa9c 	bl	800efcc <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800ba94:	237c      	movs	r3, #124	; 0x7c
 800ba96:	5ceb      	ldrb	r3, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba98:	0029      	movs	r1, r5
		sConfig.Channel = Channel;
 800ba9a:	66eb      	str	r3, [r5, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800ba9c:	4b19      	ldr	r3, [pc, #100]	; (800bb04 <ReadADCChannel+0x108>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ba9e:	316c      	adds	r1, #108	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800baa0:	672b      	str	r3, [r5, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800baa2:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800baa4:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800baa6:	676b      	str	r3, [r5, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800baa8:	f003 fb1a 	bl	800f0e0 <HAL_ADC_ConfigChannel>
 800baac:	2800      	cmp	r0, #0
 800baae:	d0b2      	beq.n	800ba16 <ReadADCChannel+0x1a>
	HAL_Delay(100);
 800bab0:	2064      	movs	r0, #100	; 0x64
 800bab2:	f003 f8e3 	bl	800ec7c <HAL_Delay>
 800bab6:	e7ae      	b.n	800ba16 <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 800bab8:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <ReadADCChannel+0x10c>)
 800baba:	429c      	cmp	r4, r3
 800babc:	d012      	beq.n	800bae4 <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <ReadADCChannel+0x110>)
 800bac0:	429c      	cmp	r4, r3
 800bac2:	d1bc      	bne.n	800ba3e <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 800bac4:	2303      	movs	r3, #3
 800bac6:	4699      	mov	r9, r3
 800bac8:	e7b9      	b.n	800ba3e <ReadADCChannel+0x42>
	HAL_Delay(100);
 800baca:	2064      	movs	r0, #100	; 0x64
 800bacc:	f003 f8d6 	bl	800ec7c <HAL_Delay>
 800bad0:	e7cf      	b.n	800ba72 <ReadADCChannel+0x76>
	else if (huart->Instance == USART6 && side == "top")
 800bad2:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <ReadADCChannel+0x10c>)
 800bad4:	429c      	cmp	r4, r3
 800bad6:	d008      	beq.n	800baea <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 800bad8:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <ReadADCChannel+0x110>)
 800bada:	429c      	cmp	r4, r3
 800badc:	d1af      	bne.n	800ba3e <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 800bade:	2305      	movs	r3, #5
 800bae0:	4699      	mov	r9, r3
 800bae2:	e7ac      	b.n	800ba3e <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 800bae4:	2302      	movs	r3, #2
 800bae6:	4699      	mov	r9, r3
 800bae8:	e7a9      	b.n	800ba3e <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 800baea:	2304      	movs	r3, #4
 800baec:	4699      	mov	r9, r3
 800baee:	e7a6      	b.n	800ba3e <ReadADCChannel+0x42>
 800baf0:	200023a0 	.word	0x200023a0
 800baf4:	20002420 	.word	0x20002420
 800baf8:	40004400 	.word	0x40004400
 800bafc:	40011400 	.word	0x40011400
 800bb00:	20006c28 	.word	0x20006c28
 800bb04:	00001001 	.word	0x00001001
 800bb08:	08017e30 	.word	0x08017e30
 800bb0c:	08017e34 	.word	0x08017e34

0800bb10 <buttonReleasedCallback>:
 800bb10:	4770      	bx	lr
 800bb12:	46c0      	nop			; (mov r8, r8)

0800bb14 <buttonClickedCallback>:
 800bb14:	4770      	bx	lr
 800bb16:	46c0      	nop			; (mov r8, r8)

0800bb18 <buttonDblClickedCallback>:
 800bb18:	4770      	bx	lr
 800bb1a:	46c0      	nop			; (mov r8, r8)

0800bb1c <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800bb1c:	4770      	bx	lr
 800bb1e:	46c0      	nop			; (mov r8, r8)

0800bb20 <buttonReleasedForYCallback>:
 800bb20:	4770      	bx	lr
 800bb22:	46c0      	nop			; (mov r8, r8)

0800bb24 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb26:	4645      	mov	r5, r8
 800bb28:	46de      	mov	lr, fp
 800bb2a:	464e      	mov	r6, r9
 800bb2c:	4657      	mov	r7, sl
 800bb2e:	4bc5      	ldr	r3, [pc, #788]	; (800be44 <CheckAttachedButtons+0x320>)
 800bb30:	b5e0      	push	{r5, r6, r7, lr}
 800bb32:	4698      	mov	r8, r3
 800bb34:	001c      	movs	r4, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bb36:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800bb38:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	469b      	mov	fp, r3
			if (delayButtonStateReset == false)
 800bb3e:	4bc2      	ldr	r3, [pc, #776]	; (800be48 <CheckAttachedButtons+0x324>)
void CheckAttachedButtons(void) {
 800bb40:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 800bb42:	4699      	mov	r9, r3
 800bb44:	b2eb      	uxtb	r3, r5
 800bb46:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 800bb48:	7aa3      	ldrb	r3, [r4, #10]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d100      	bne.n	800bb50 <CheckAttachedButtons+0x2c>
 800bb4e:	e0c0      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
			if (delayButtonStateReset == false)
 800bb50:	464b      	mov	r3, r9
 800bb52:	7d1b      	ldrb	r3, [r3, #20]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d100      	bne.n	800bb5a <CheckAttachedButtons+0x36>
				button[i].state = NONE;
 800bb58:	7263      	strb	r3, [r4, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bb5a:	ab04      	add	r3, sp, #16
 800bb5c:	469c      	mov	ip, r3
 800bb5e:	270e      	movs	r7, #14
 800bb60:	ae07      	add	r6, sp, #28
 800bb62:	4467      	add	r7, ip
 800bb64:	ab09      	add	r3, sp, #36	; 0x24
 800bb66:	0032      	movs	r2, r6
 800bb68:	a908      	add	r1, sp, #32
 800bb6a:	9700      	str	r7, [sp, #0]
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	f7ff f9c7 	bl	800af00 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800bb72:	8831      	ldrh	r1, [r6, #0]
 800bb74:	2200      	movs	r2, #0
 800bb76:	9808      	ldr	r0, [sp, #32]
 800bb78:	f004 fccc 	bl	8010514 <HAL_GPIO_WritePin>
			Delay_us(10);
 800bb7c:	200a      	movs	r0, #10
 800bb7e:	f000 fe1b 	bl	800c7b8 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800bb82:	8839      	ldrh	r1, [r7, #0]
 800bb84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb86:	f004 fcbf 	bl	8010508 <HAL_GPIO_ReadPin>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d100      	bne.n	800bb90 <CheckAttachedButtons+0x6c>
 800bb8e:	e14b      	b.n	800be28 <CheckAttachedButtons+0x304>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800bb90:	8831      	ldrh	r1, [r6, #0]
 800bb92:	2200      	movs	r2, #0
 800bb94:	9808      	ldr	r0, [sp, #32]
 800bb96:	f004 fcbd 	bl	8010514 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800bb9a:	7aa3      	ldrb	r3, [r4, #10]
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d100      	bne.n	800bba2 <CheckAttachedButtons+0x7e>
 800bba0:	e0a6      	b.n	800bcf0 <CheckAttachedButtons+0x1cc>
 800bba2:	d800      	bhi.n	800bba6 <CheckAttachedButtons+0x82>
 800bba4:	e0a1      	b.n	800bcea <CheckAttachedButtons+0x1c6>
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d100      	bne.n	800bbac <CheckAttachedButtons+0x88>
 800bbaa:	e170      	b.n	800be8e <CheckAttachedButtons+0x36a>
 800bbac:	2b04      	cmp	r3, #4
 800bbae:	d000      	beq.n	800bbb2 <CheckAttachedButtons+0x8e>
 800bbb0:	e156      	b.n	800be60 <CheckAttachedButtons+0x33c>
 800bbb2:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bbb4:	4658      	mov	r0, fp
 800bbb6:	00aa      	lsls	r2, r5, #2
 800bbb8:	3138      	adds	r1, #56	; 0x38
 800bbba:	588b      	ldr	r3, [r1, r2]
 800bbbc:	2801      	cmp	r0, #1
 800bbbe:	d100      	bne.n	800bbc2 <CheckAttachedButtons+0x9e>
 800bbc0:	e170      	b.n	800bea4 <CheckAttachedButtons+0x380>
				else if (connected == GPIO_PIN_RESET)
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d100      	bne.n	800bbc8 <CheckAttachedButtons+0xa4>
 800bbc6:	e217      	b.n	800bff8 <CheckAttachedButtons+0x4d4>
			if (state == CLOSED || state == ON) {
 800bbc8:	9904      	ldr	r1, [sp, #16]
 800bbca:	2904      	cmp	r1, #4
 800bbcc:	d100      	bne.n	800bbd0 <CheckAttachedButtons+0xac>
 800bbce:	e14f      	b.n	800be70 <CheckAttachedButtons+0x34c>
 800bbd0:	9904      	ldr	r1, [sp, #16]
 800bbd2:	2902      	cmp	r1, #2
 800bbd4:	d100      	bne.n	800bbd8 <CheckAttachedButtons+0xb4>
 800bbd6:	e14b      	b.n	800be70 <CheckAttachedButtons+0x34c>
			if (state == OPEN || state == OFF) {
 800bbd8:	9904      	ldr	r1, [sp, #16]
 800bbda:	2903      	cmp	r1, #3
 800bbdc:	d002      	beq.n	800bbe4 <CheckAttachedButtons+0xc0>
 800bbde:	489b      	ldr	r0, [pc, #620]	; (800be4c <CheckAttachedButtons+0x328>)
 800bbe0:	2901      	cmp	r1, #1
 800bbe2:	d114      	bne.n	800bc0e <CheckAttachedButtons+0xea>
				if (releaseCounter[i] < 0xFFFF)
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	3050      	adds	r0, #80	; 0x50
 800bbe8:	5881      	ldr	r1, [r0, r2]
 800bbea:	4e99      	ldr	r6, [pc, #612]	; (800be50 <CheckAttachedButtons+0x32c>)
 800bbec:	42b1      	cmp	r1, r6
 800bbee:	d900      	bls.n	800bbf2 <CheckAttachedButtons+0xce>
 800bbf0:	e092      	b.n	800bd18 <CheckAttachedButtons+0x1f4>
				if (clicked == 2
 800bbf2:	464f      	mov	r7, r9
					++releaseCounter[i];		// Advance the debounce counter
 800bbf4:	3101      	adds	r1, #1
 800bbf6:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800bbf8:	7fbf      	ldrb	r7, [r7, #30]
 800bbfa:	4996      	ldr	r1, [pc, #600]	; (800be54 <CheckAttachedButtons+0x330>)
 800bbfc:	4893      	ldr	r0, [pc, #588]	; (800be4c <CheckAttachedButtons+0x328>)
 800bbfe:	5c69      	ldrb	r1, [r5, r1]
 800bc00:	7946      	ldrb	r6, [r0, #5]
 800bc02:	2f02      	cmp	r7, #2
 800bc04:	d100      	bne.n	800bc08 <CheckAttachedButtons+0xe4>
 800bc06:	e092      	b.n	800bd2e <CheckAttachedButtons+0x20a>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800bc08:	42b1      	cmp	r1, r6
 800bc0a:	d900      	bls.n	800bc0e <CheckAttachedButtons+0xea>
 800bc0c:	e139      	b.n	800be82 <CheckAttachedButtons+0x35e>
 800bc0e:	4646      	mov	r6, r8
 800bc10:	3650      	adds	r6, #80	; 0x50
 800bc12:	58b6      	ldr	r6, [r6, r2]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800bc14:	8801      	ldrh	r1, [r0, #0]
 800bc16:	9603      	str	r6, [sp, #12]
 800bc18:	4299      	cmp	r1, r3
 800bc1a:	d826      	bhi.n	800bc6a <CheckAttachedButtons+0x146>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800bc1c:	d105      	bne.n	800bc2a <CheckAttachedButtons+0x106>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800bc1e:	2707      	movs	r7, #7
 800bc20:	7267      	strb	r7, [r4, #9]
					++pressCounter[i];
 800bc22:	4647      	mov	r7, r8
 800bc24:	3301      	adds	r3, #1
 800bc26:	3738      	adds	r7, #56	; 0x38
 800bc28:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800bc2a:	9e03      	ldr	r6, [sp, #12]
 800bc2c:	42b1      	cmp	r1, r6
 800bc2e:	d205      	bcs.n	800bc3c <CheckAttachedButtons+0x118>
					releaseCounter[i] = 0;
 800bc30:	4646      	mov	r6, r8
 800bc32:	2700      	movs	r7, #0
 800bc34:	3650      	adds	r6, #80	; 0x50
 800bc36:	50b7      	str	r7, [r6, r2]
 800bc38:	2600      	movs	r6, #0
 800bc3a:	9603      	str	r6, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800bc3c:	8847      	ldrh	r7, [r0, #2]
 800bc3e:	9705      	str	r7, [sp, #20]
 800bc40:	429f      	cmp	r7, r3
 800bc42:	d300      	bcc.n	800bc46 <CheckAttachedButtons+0x122>
 800bc44:	e07a      	b.n	800bd3c <CheckAttachedButtons+0x218>
						&& pressCounter[i] < 500) {
 800bc46:	27f4      	movs	r7, #244	; 0xf4
 800bc48:	37ff      	adds	r7, #255	; 0xff
 800bc4a:	42bb      	cmp	r3, r7
 800bc4c:	d900      	bls.n	800bc50 <CheckAttachedButtons+0x12c>
 800bc4e:	e075      	b.n	800bd3c <CheckAttachedButtons+0x218>
					if (clicked == 0)
 800bc50:	464b      	mov	r3, r9
 800bc52:	7f9b      	ldrb	r3, [r3, #30]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d100      	bne.n	800bc5a <CheckAttachedButtons+0x136>
 800bc58:	e1d8      	b.n	800c00c <CheckAttachedButtons+0x4e8>
					else if (clicked == 2) {
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d105      	bne.n	800bc6a <CheckAttachedButtons+0x146>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800bc5e:	4b7d      	ldr	r3, [pc, #500]	; (800be54 <CheckAttachedButtons+0x330>)
 800bc60:	7907      	ldrb	r7, [r0, #4]
 800bc62:	5ceb      	ldrb	r3, [r5, r3]
 800bc64:	429f      	cmp	r7, r3
 800bc66:	d200      	bcs.n	800bc6a <CheckAttachedButtons+0x146>
 800bc68:	e1dc      	b.n	800c024 <CheckAttachedButtons+0x500>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	4299      	cmp	r1, r3
 800bc6e:	d822      	bhi.n	800bcb6 <CheckAttachedButtons+0x192>
 800bc70:	4643      	mov	r3, r8
 800bc72:	8840      	ldrh	r0, [r0, #2]
 800bc74:	3338      	adds	r3, #56	; 0x38
 800bc76:	589b      	ldr	r3, [r3, r2]
 800bc78:	9005      	str	r0, [sp, #20]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800bc7a:	9803      	ldr	r0, [sp, #12]
 800bc7c:	4281      	cmp	r1, r0
 800bc7e:	d100      	bne.n	800bc82 <CheckAttachedButtons+0x15e>
 800bc80:	e19b      	b.n	800bfba <CheckAttachedButtons+0x496>
 800bc82:	4640      	mov	r0, r8
 800bc84:	3050      	adds	r0, #80	; 0x50
 800bc86:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800bc88:	4299      	cmp	r1, r3
 800bc8a:	d203      	bcs.n	800bc94 <CheckAttachedButtons+0x170>
					pressCounter[i] = 0;
 800bc8c:	4643      	mov	r3, r8
 800bc8e:	2100      	movs	r1, #0
 800bc90:	3338      	adds	r3, #56	; 0x38
 800bc92:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800bc94:	9b05      	ldr	r3, [sp, #20]
 800bc96:	4283      	cmp	r3, r0
 800bc98:	d300      	bcc.n	800bc9c <CheckAttachedButtons+0x178>
 800bc9a:	e091      	b.n	800bdc0 <CheckAttachedButtons+0x29c>
						&& releaseCounter[i] < 500) {
 800bc9c:	23f4      	movs	r3, #244	; 0xf4
 800bc9e:	33ff      	adds	r3, #255	; 0xff
 800bca0:	4298      	cmp	r0, r3
 800bca2:	d900      	bls.n	800bca6 <CheckAttachedButtons+0x182>
 800bca4:	e08c      	b.n	800bdc0 <CheckAttachedButtons+0x29c>
					if (clicked == 1) {
 800bca6:	464b      	mov	r3, r9
 800bca8:	7f9b      	ldrb	r3, [r3, #30]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d100      	bne.n	800bcb0 <CheckAttachedButtons+0x18c>
 800bcae:	e15c      	b.n	800bf6a <CheckAttachedButtons+0x446>
					} else if (clicked == 3) {
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d100      	bne.n	800bcb6 <CheckAttachedButtons+0x192>
 800bcb4:	e12d      	b.n	800bf12 <CheckAttachedButtons+0x3ee>
			switch (button[i].state) {
 800bcb6:	7a63      	ldrb	r3, [r4, #9]
 800bcb8:	3b05      	subs	r3, #5
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b09      	cmp	r3, #9
 800bcbe:	d808      	bhi.n	800bcd2 <CheckAttachedButtons+0x1ae>
 800bcc0:	4a65      	ldr	r2, [pc, #404]	; (800be58 <CheckAttachedButtons+0x334>)
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	58d3      	ldr	r3, [r2, r3]
 800bcc6:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f7ff f9fd 	bl	800b0c8 <buttonPressedCallback>
				button[i].state = NONE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	7263      	strb	r3, [r4, #9]
 800bcd2:	3501      	adds	r5, #1
 800bcd4:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800bcd6:	2d06      	cmp	r5, #6
 800bcd8:	d000      	beq.n	800bcdc <CheckAttachedButtons+0x1b8>
 800bcda:	e733      	b.n	800bb44 <CheckAttachedButtons+0x20>
}
 800bcdc:	b00b      	add	sp, #44	; 0x2c
 800bcde:	bc3c      	pop	{r2, r3, r4, r5}
 800bce0:	4690      	mov	r8, r2
 800bce2:	4699      	mov	r9, r3
 800bce4:	46a2      	mov	sl, r4
 800bce6:	46ab      	mov	fp, r5
 800bce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d000      	beq.n	800bcf0 <CheckAttachedButtons+0x1cc>
 800bcee:	e0b7      	b.n	800be60 <CheckAttachedButtons+0x33c>
 800bcf0:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800bcf2:	4658      	mov	r0, fp
 800bcf4:	00aa      	lsls	r2, r5, #2
 800bcf6:	3138      	adds	r1, #56	; 0x38
 800bcf8:	588b      	ldr	r3, [r1, r2]
 800bcfa:	2801      	cmp	r0, #1
 800bcfc:	d100      	bne.n	800bd00 <CheckAttachedButtons+0x1dc>
 800bcfe:	e163      	b.n	800bfc8 <CheckAttachedButtons+0x4a4>
				else if (connected == GPIO_PIN_RESET)
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d000      	beq.n	800bd06 <CheckAttachedButtons+0x1e2>
 800bd04:	e760      	b.n	800bbc8 <CheckAttachedButtons+0xa4>
				if (releaseCounter[i] < 0xFFFF)
 800bd06:	4640      	mov	r0, r8
 800bd08:	2103      	movs	r1, #3
 800bd0a:	3050      	adds	r0, #80	; 0x50
 800bd0c:	9104      	str	r1, [sp, #16]
 800bd0e:	4e50      	ldr	r6, [pc, #320]	; (800be50 <CheckAttachedButtons+0x32c>)
 800bd10:	5881      	ldr	r1, [r0, r2]
 800bd12:	42b1      	cmp	r1, r6
 800bd14:	d800      	bhi.n	800bd18 <CheckAttachedButtons+0x1f4>
 800bd16:	e76c      	b.n	800bbf2 <CheckAttachedButtons+0xce>
					releaseCounter[i] = 0;		// Reset debounce counter
 800bd18:	2100      	movs	r1, #0
				if (clicked == 2
 800bd1a:	464f      	mov	r7, r9
					releaseCounter[i] = 0;		// Reset debounce counter
 800bd1c:	5081      	str	r1, [r0, r2]
				if (clicked == 2
 800bd1e:	7fbf      	ldrb	r7, [r7, #30]
 800bd20:	494c      	ldr	r1, [pc, #304]	; (800be54 <CheckAttachedButtons+0x330>)
 800bd22:	484a      	ldr	r0, [pc, #296]	; (800be4c <CheckAttachedButtons+0x328>)
 800bd24:	5c69      	ldrb	r1, [r5, r1]
 800bd26:	7946      	ldrb	r6, [r0, #5]
 800bd28:	2f02      	cmp	r7, #2
 800bd2a:	d000      	beq.n	800bd2e <CheckAttachedButtons+0x20a>
 800bd2c:	e76c      	b.n	800bc08 <CheckAttachedButtons+0xe4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800bd2e:	42b1      	cmp	r1, r6
 800bd30:	d900      	bls.n	800bd34 <CheckAttachedButtons+0x210>
 800bd32:	e0a6      	b.n	800be82 <CheckAttachedButtons+0x35e>
					++dblCounter[i];
 800bd34:	4e47      	ldr	r6, [pc, #284]	; (800be54 <CheckAttachedButtons+0x330>)
 800bd36:	3101      	adds	r1, #1
 800bd38:	55a9      	strb	r1, [r5, r6]
 800bd3a:	e768      	b.n	800bc0e <CheckAttachedButtons+0xea>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800bd3c:	4f47      	ldr	r7, [pc, #284]	; (800be5c <CheckAttachedButtons+0x338>)
 800bd3e:	46bc      	mov	ip, r7
 800bd40:	001f      	movs	r7, r3
 800bd42:	3ff5      	subs	r7, #245	; 0xf5
 800bd44:	3fff      	subs	r7, #255	; 0xff
 800bd46:	4567      	cmp	r7, ip
 800bd48:	d900      	bls.n	800bd4c <CheckAttachedButtons+0x228>
 800bd4a:	e78e      	b.n	800bc6a <CheckAttachedButtons+0x146>
					if (clicked)
 800bd4c:	464f      	mov	r7, r9
 800bd4e:	7fbf      	ldrb	r7, [r7, #30]
 800bd50:	2f00      	cmp	r7, #0
 800bd52:	d002      	beq.n	800bd5a <CheckAttachedButtons+0x236>
						clicked = 0;						// Cannot be a click
 800bd54:	2700      	movs	r7, #0
 800bd56:	464e      	mov	r6, r9
 800bd58:	77b7      	strb	r7, [r6, #30]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bd5a:	7ae7      	ldrb	r7, [r4, #11]
 800bd5c:	46bc      	mov	ip, r7
	t1 *= 1000;
 800bd5e:	4666      	mov	r6, ip
 800bd60:	017f      	lsls	r7, r7, #5
 800bd62:	1bbf      	subs	r7, r7, r6
 800bd64:	00bf      	lsls	r7, r7, #2
 800bd66:	4467      	add	r7, ip
 800bd68:	00ff      	lsls	r7, r7, #3
	if (pressCounter[port] == t1) {
 800bd6a:	429f      	cmp	r7, r3
 800bd6c:	d100      	bne.n	800bd70 <CheckAttachedButtons+0x24c>
 800bd6e:	e0e5      	b.n	800bf3c <CheckAttachedButtons+0x418>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bd70:	7b26      	ldrb	r6, [r4, #12]
 800bd72:	46b4      	mov	ip, r6
	t2 *= 1000;
 800bd74:	0177      	lsls	r7, r6, #5
 800bd76:	1bbf      	subs	r7, r7, r6
 800bd78:	00bf      	lsls	r7, r7, #2
 800bd7a:	4467      	add	r7, ip
 800bd7c:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t2) {
 800bd7e:	429f      	cmp	r7, r3
 800bd80:	d009      	beq.n	800bd96 <CheckAttachedButtons+0x272>
			t3 = button[port].pressedX3Sec;
 800bd82:	7b66      	ldrb	r6, [r4, #13]
 800bd84:	46b4      	mov	ip, r6
	t3 *= 1000;
 800bd86:	0177      	lsls	r7, r6, #5
 800bd88:	1bbf      	subs	r7, r7, r6
 800bd8a:	00bf      	lsls	r7, r7, #2
 800bd8c:	4467      	add	r7, ip
 800bd8e:	00ff      	lsls	r7, r7, #3
	} else if (pressCounter[port] == t3) {
 800bd90:	429f      	cmp	r7, r3
 800bd92:	d000      	beq.n	800bd96 <CheckAttachedButtons+0x272>
 800bd94:	e769      	b.n	800bc6a <CheckAttachedButtons+0x146>
		button[port].state = PRESSED_FOR_X2_SEC;
 800bd96:	200a      	movs	r0, #10
 800bd98:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800bd9a:	9803      	ldr	r0, [sp, #12]
 800bd9c:	4281      	cmp	r1, r0
 800bd9e:	d800      	bhi.n	800bda2 <CheckAttachedButtons+0x27e>
 800bda0:	e76b      	b.n	800bc7a <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800bda2:	464b      	mov	r3, r9
 800bda4:	7d1b      	ldrb	r3, [r3, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d193      	bne.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800bdaa:	7c63      	ldrb	r3, [r4, #17]
 800bdac:	071b      	lsls	r3, r3, #28
 800bdae:	d590      	bpl.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800bdb4:	2102      	movs	r1, #2
 800bdb6:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bdb8:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800bdba:	f7ff feaf 	bl	800bb1c <buttonPressedForXCallback>
 800bdbe:	e788      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
				} else if (releaseCounter[i] >= 500
 800bdc0:	0003      	movs	r3, r0
 800bdc2:	4a26      	ldr	r2, [pc, #152]	; (800be5c <CheckAttachedButtons+0x338>)
 800bdc4:	3bf5      	subs	r3, #245	; 0xf5
 800bdc6:	3bff      	subs	r3, #255	; 0xff
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d900      	bls.n	800bdce <CheckAttachedButtons+0x2aa>
 800bdcc:	e773      	b.n	800bcb6 <CheckAttachedButtons+0x192>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800bdce:	7ba1      	ldrb	r1, [r4, #14]
	t1 *= 1000;
 800bdd0:	014b      	lsls	r3, r1, #5
 800bdd2:	1a5b      	subs	r3, r3, r1
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	185b      	adds	r3, r3, r1
 800bdd8:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800bdda:	4283      	cmp	r3, r0
 800bddc:	d100      	bne.n	800bde0 <CheckAttachedButtons+0x2bc>
 800bdde:	e0d9      	b.n	800bf94 <CheckAttachedButtons+0x470>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800bde0:	7be1      	ldrb	r1, [r4, #15]
	t2 *= 1000;
 800bde2:	014b      	lsls	r3, r1, #5
 800bde4:	1a5b      	subs	r3, r3, r1
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	185b      	adds	r3, r3, r1
 800bdea:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800bdec:	4283      	cmp	r3, r0
 800bdee:	d008      	beq.n	800be02 <CheckAttachedButtons+0x2de>
			t3 = button[port].releasedY3Sec;
 800bdf0:	7c21      	ldrb	r1, [r4, #16]
	t3 *= 1000;
 800bdf2:	014b      	lsls	r3, r1, #5
 800bdf4:	1a5b      	subs	r3, r3, r1
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	185b      	adds	r3, r3, r1
 800bdfa:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800bdfc:	4283      	cmp	r3, r0
 800bdfe:	d000      	beq.n	800be02 <CheckAttachedButtons+0x2de>
 800be00:	e759      	b.n	800bcb6 <CheckAttachedButtons+0x192>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800be02:	230d      	movs	r3, #13
 800be04:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800be06:	464b      	mov	r3, r9
 800be08:	7d1b      	ldrb	r3, [r3, #20]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d000      	beq.n	800be10 <CheckAttachedButtons+0x2ec>
 800be0e:	e760      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800be10:	7c63      	ldrb	r3, [r4, #17]
 800be12:	065b      	lsls	r3, r3, #25
 800be14:	d400      	bmi.n	800be18 <CheckAttachedButtons+0x2f4>
 800be16:	e75c      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800be18:	2301      	movs	r3, #1
 800be1a:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800be1c:	2102      	movs	r1, #2
 800be1e:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800be20:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800be22:	f7ff fe7d 	bl	800bb20 <buttonReleasedForYCallback>
 800be26:	e754      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800be28:	8831      	ldrh	r1, [r6, #0]
 800be2a:	2201      	movs	r2, #1
 800be2c:	9808      	ldr	r0, [sp, #32]
 800be2e:	f004 fb71 	bl	8010514 <HAL_GPIO_WritePin>
				Delay_us(10);
 800be32:	200a      	movs	r0, #10
 800be34:	f000 fcc0 	bl	800c7b8 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800be38:	8839      	ldrh	r1, [r7, #0]
 800be3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3c:	f004 fb64 	bl	8010508 <HAL_GPIO_ReadPin>
 800be40:	4683      	mov	fp, r0
 800be42:	e6a5      	b.n	800bb90 <CheckAttachedButtons+0x6c>
 800be44:	200023a0 	.word	0x200023a0
 800be48:	20002420 	.word	0x20002420
 800be4c:	20006844 	.word	0x20006844
 800be50:	0000fffe 	.word	0x0000fffe
 800be54:	20002438 	.word	0x20002438
 800be58:	08017090 	.word	0x08017090
 800be5c:	0000fe0a 	.word	0x0000fe0a
 800be60:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 800be62:	9904      	ldr	r1, [sp, #16]
 800be64:	3338      	adds	r3, #56	; 0x38
 800be66:	00aa      	lsls	r2, r5, #2
 800be68:	589b      	ldr	r3, [r3, r2]
 800be6a:	2904      	cmp	r1, #4
 800be6c:	d000      	beq.n	800be70 <CheckAttachedButtons+0x34c>
 800be6e:	e6af      	b.n	800bbd0 <CheckAttachedButtons+0xac>
				if (pressCounter[i] < 0xFFFF)
 800be70:	4972      	ldr	r1, [pc, #456]	; (800c03c <CheckAttachedButtons+0x518>)
 800be72:	428b      	cmp	r3, r1
 800be74:	d819      	bhi.n	800beaa <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800be76:	4641      	mov	r1, r8
 800be78:	3301      	adds	r3, #1
 800be7a:	3138      	adds	r1, #56	; 0x38
 800be7c:	508b      	str	r3, [r1, r2]
 800be7e:	4870      	ldr	r0, [pc, #448]	; (800c040 <CheckAttachedButtons+0x51c>)
 800be80:	e6c5      	b.n	800bc0e <CheckAttachedButtons+0xea>
					clicked = 0;
 800be82:	2100      	movs	r1, #0
 800be84:	464e      	mov	r6, r9
 800be86:	77b1      	strb	r1, [r6, #30]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800be88:	4e6e      	ldr	r6, [pc, #440]	; (800c044 <CheckAttachedButtons+0x520>)
 800be8a:	55a9      	strb	r1, [r5, r6]
 800be8c:	e6bf      	b.n	800bc0e <CheckAttachedButtons+0xea>
 800be8e:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 800be90:	4658      	mov	r0, fp
 800be92:	00aa      	lsls	r2, r5, #2
 800be94:	3138      	adds	r1, #56	; 0x38
 800be96:	588b      	ldr	r3, [r1, r2]
 800be98:	2801      	cmp	r0, #1
 800be9a:	d100      	bne.n	800be9e <CheckAttachedButtons+0x37a>
 800be9c:	e09d      	b.n	800bfda <CheckAttachedButtons+0x4b6>
				else if (connected == GPIO_PIN_RESET)
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d000      	beq.n	800bea4 <CheckAttachedButtons+0x380>
 800bea2:	e691      	b.n	800bbc8 <CheckAttachedButtons+0xa4>
					state = OFF;
 800bea4:	2101      	movs	r1, #1
 800bea6:	9104      	str	r1, [sp, #16]
 800bea8:	e69c      	b.n	800bbe4 <CheckAttachedButtons+0xc0>
					pressCounter[i] = 0;			// Reset debounce counter
 800beaa:	4643      	mov	r3, r8
 800beac:	2100      	movs	r1, #0
 800beae:	3338      	adds	r3, #56	; 0x38
 800beb0:	5099      	str	r1, [r3, r2]
 800beb2:	4863      	ldr	r0, [pc, #396]	; (800c040 <CheckAttachedButtons+0x51c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	e6aa      	b.n	800bc0e <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800beb8:	464b      	mov	r3, r9
 800beba:	7d1b      	ldrb	r3, [r3, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d000      	beq.n	800bec2 <CheckAttachedButtons+0x39e>
 800bec0:	e707      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800bec2:	7c63      	ldrb	r3, [r4, #17]
 800bec4:	06db      	lsls	r3, r3, #27
 800bec6:	d400      	bmi.n	800beca <CheckAttachedButtons+0x3a6>
 800bec8:	e703      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800beca:	2301      	movs	r3, #1
 800becc:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800bece:	2103      	movs	r1, #3
 800bed0:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bed2:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800bed4:	f7ff fe22 	bl	800bb1c <buttonPressedForXCallback>
 800bed8:	e6fb      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
				buttonReleasedCallback(i);
 800beda:	4650      	mov	r0, sl
 800bedc:	f7ff fe18 	bl	800bb10 <buttonReleasedCallback>
				button[i].state = NONE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	3501      	adds	r5, #1
 800bee4:	7263      	strb	r3, [r4, #9]
 800bee6:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800bee8:	2d06      	cmp	r5, #6
 800beea:	d000      	beq.n	800beee <CheckAttachedButtons+0x3ca>
 800beec:	e62a      	b.n	800bb44 <CheckAttachedButtons+0x20>
 800beee:	e6f5      	b.n	800bcdc <CheckAttachedButtons+0x1b8>
				if (!delayButtonStateReset
 800bef0:	464b      	mov	r3, r9
 800bef2:	7d1b      	ldrb	r3, [r3, #20]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d000      	beq.n	800befa <CheckAttachedButtons+0x3d6>
 800bef8:	e6eb      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800befa:	7c63      	ldrb	r3, [r4, #17]
 800befc:	2b7f      	cmp	r3, #127	; 0x7f
 800befe:	d800      	bhi.n	800bf02 <CheckAttachedButtons+0x3de>
 800bf00:	e6e7      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800bf02:	2301      	movs	r3, #1
 800bf04:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800bf06:	2103      	movs	r1, #3
 800bf08:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf0a:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800bf0c:	f7ff fe08 	bl	800bb20 <buttonReleasedForYCallback>
 800bf10:	e6df      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800bf12:	3303      	adds	r3, #3
 800bf14:	7263      	strb	r3, [r4, #9]
						clicked = 0;			// Prepare for a single click
 800bf16:	464a      	mov	r2, r9
 800bf18:	2300      	movs	r3, #0
 800bf1a:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	7d1b      	ldrb	r3, [r3, #20]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d000      	beq.n	800bf26 <CheckAttachedButtons+0x402>
 800bf24:	e6d5      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800bf26:	7c63      	ldrb	r3, [r4, #17]
 800bf28:	079b      	lsls	r3, r3, #30
 800bf2a:	d400      	bmi.n	800bf2e <CheckAttachedButtons+0x40a>
 800bf2c:	e6d1      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	464a      	mov	r2, r9
					buttonDblClickedCallback(i);
 800bf32:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf34:	7513      	strb	r3, [r2, #20]
					buttonDblClickedCallback(i);
 800bf36:	f7ff fdef 	bl	800bb18 <buttonDblClickedCallback>
 800bf3a:	e6ca      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
		button[port].state = PRESSED_FOR_X1_SEC;
 800bf3c:	2009      	movs	r0, #9
 800bf3e:	7260      	strb	r0, [r4, #9]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800bf40:	9803      	ldr	r0, [sp, #12]
 800bf42:	4281      	cmp	r1, r0
 800bf44:	d800      	bhi.n	800bf48 <CheckAttachedButtons+0x424>
 800bf46:	e698      	b.n	800bc7a <CheckAttachedButtons+0x156>
				if (!delayButtonStateReset
 800bf48:	464b      	mov	r3, r9
 800bf4a:	7d1b      	ldrb	r3, [r3, #20]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d000      	beq.n	800bf52 <CheckAttachedButtons+0x42e>
 800bf50:	e6bf      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800bf52:	7c63      	ldrb	r3, [r4, #17]
 800bf54:	075b      	lsls	r3, r3, #29
 800bf56:	d400      	bmi.n	800bf5a <CheckAttachedButtons+0x436>
 800bf58:	e6bb      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	464a      	mov	r2, r9
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf62:	7513      	strb	r3, [r2, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800bf64:	f7ff fdda 	bl	800bb1c <buttonPressedForXCallback>
 800bf68:	e6b3      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						clicked = 2;			// Prepare for a double click
 800bf6a:	464a      	mov	r2, r9
						button[i].state = CLICKED;// Record a single button click event
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	7263      	strb	r3, [r4, #9]
						clicked = 2;			// Prepare for a double click
 800bf70:	3b03      	subs	r3, #3
 800bf72:	7793      	strb	r3, [r2, #30]
				if (!delayButtonStateReset
 800bf74:	464b      	mov	r3, r9
 800bf76:	7d1b      	ldrb	r3, [r3, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d000      	beq.n	800bf7e <CheckAttachedButtons+0x45a>
 800bf7c:	e6a9      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800bf7e:	7c62      	ldrb	r2, [r4, #17]
 800bf80:	3301      	adds	r3, #1
 800bf82:	4213      	tst	r3, r2
 800bf84:	d100      	bne.n	800bf88 <CheckAttachedButtons+0x464>
 800bf86:	e6a4      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800bf88:	464a      	mov	r2, r9
					buttonClickedCallback(i);
 800bf8a:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bf8c:	7513      	strb	r3, [r2, #20]
					buttonClickedCallback(i);
 800bf8e:	f7ff fdc1 	bl	800bb14 <buttonClickedCallback>
 800bf92:	e69e      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800bf94:	230c      	movs	r3, #12
 800bf96:	7263      	strb	r3, [r4, #9]
				if (!delayButtonStateReset
 800bf98:	464b      	mov	r3, r9
 800bf9a:	7d1b      	ldrb	r3, [r3, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d000      	beq.n	800bfa2 <CheckAttachedButtons+0x47e>
 800bfa0:	e697      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800bfa2:	7c63      	ldrb	r3, [r4, #17]
 800bfa4:	069b      	lsls	r3, r3, #26
 800bfa6:	d400      	bmi.n	800bfaa <CheckAttachedButtons+0x486>
 800bfa8:	e693      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					delayButtonStateReset = true;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	464a      	mov	r2, r9
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800bfae:	2101      	movs	r1, #1
 800bfb0:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800bfb2:	7513      	strb	r3, [r2, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800bfb4:	f7ff fdb4 	bl	800bb20 <buttonReleasedForYCallback>
 800bfb8:	e68b      	b.n	800bcd2 <CheckAttachedButtons+0x1ae>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800bfba:	2008      	movs	r0, #8
					++releaseCounter[i];
 800bfbc:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800bfbe:	7260      	strb	r0, [r4, #9]
					++releaseCounter[i];
 800bfc0:	3650      	adds	r6, #80	; 0x50
 800bfc2:	1c48      	adds	r0, r1, #1
 800bfc4:	50b0      	str	r0, [r6, r2]
 800bfc6:	e65f      	b.n	800bc88 <CheckAttachedButtons+0x164>
				if (pressCounter[i] < 0xFFFF)
 800bfc8:	481c      	ldr	r0, [pc, #112]	; (800c03c <CheckAttachedButtons+0x518>)
 800bfca:	4283      	cmp	r3, r0
 800bfcc:	d80e      	bhi.n	800bfec <CheckAttachedButtons+0x4c8>
					++pressCounter[i];			// Advance the debounce counter
 800bfce:	3301      	adds	r3, #1
 800bfd0:	508b      	str	r3, [r1, r2]
 800bfd2:	2104      	movs	r1, #4
 800bfd4:	481a      	ldr	r0, [pc, #104]	; (800c040 <CheckAttachedButtons+0x51c>)
 800bfd6:	9104      	str	r1, [sp, #16]
 800bfd8:	e619      	b.n	800bc0e <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800bfda:	4818      	ldr	r0, [pc, #96]	; (800c03c <CheckAttachedButtons+0x518>)
 800bfdc:	4283      	cmp	r3, r0
 800bfde:	d919      	bls.n	800c014 <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	508b      	str	r3, [r1, r2]
 800bfe4:	2102      	movs	r1, #2
 800bfe6:	4816      	ldr	r0, [pc, #88]	; (800c040 <CheckAttachedButtons+0x51c>)
 800bfe8:	9104      	str	r1, [sp, #16]
 800bfea:	e610      	b.n	800bc0e <CheckAttachedButtons+0xea>
 800bfec:	2300      	movs	r3, #0
 800bfee:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 800bff0:	2104      	movs	r1, #4
 800bff2:	4813      	ldr	r0, [pc, #76]	; (800c040 <CheckAttachedButtons+0x51c>)
 800bff4:	9104      	str	r1, [sp, #16]
 800bff6:	e60a      	b.n	800bc0e <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800bff8:	4810      	ldr	r0, [pc, #64]	; (800c03c <CheckAttachedButtons+0x518>)
 800bffa:	4283      	cmp	r3, r0
 800bffc:	d90a      	bls.n	800c014 <CheckAttachedButtons+0x4f0>
					pressCounter[i] = 0;			// Reset debounce counter
 800bffe:	465b      	mov	r3, fp
 800c000:	508b      	str	r3, [r1, r2]
					state = ON;
 800c002:	2102      	movs	r1, #2
					pressCounter[i] = 0;			// Reset debounce counter
 800c004:	2300      	movs	r3, #0
					state = ON;
 800c006:	9104      	str	r1, [sp, #16]
 800c008:	480d      	ldr	r0, [pc, #52]	; (800c040 <CheckAttachedButtons+0x51c>)
 800c00a:	e600      	b.n	800bc0e <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800c00c:	464e      	mov	r6, r9
 800c00e:	3301      	adds	r3, #1
 800c010:	77b3      	strb	r3, [r6, #30]
 800c012:	e62a      	b.n	800bc6a <CheckAttachedButtons+0x146>
					state = ON;
 800c014:	2102      	movs	r1, #2
 800c016:	9104      	str	r1, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 800c018:	4641      	mov	r1, r8
 800c01a:	3301      	adds	r3, #1
 800c01c:	3138      	adds	r1, #56	; 0x38
 800c01e:	508b      	str	r3, [r1, r2]
 800c020:	4807      	ldr	r0, [pc, #28]	; (800c040 <CheckAttachedButtons+0x51c>)
 800c022:	e5f4      	b.n	800bc0e <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800c024:	7947      	ldrb	r7, [r0, #5]
 800c026:	429f      	cmp	r7, r3
 800c028:	d800      	bhi.n	800c02c <CheckAttachedButtons+0x508>
 800c02a:	e61e      	b.n	800bc6a <CheckAttachedButtons+0x146>
							clicked = 3;	// Record a possible double click
 800c02c:	2303      	movs	r3, #3
 800c02e:	464e      	mov	r6, r9
 800c030:	77b3      	strb	r3, [r6, #30]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800c032:	2300      	movs	r3, #0
 800c034:	4e03      	ldr	r6, [pc, #12]	; (800c044 <CheckAttachedButtons+0x520>)
 800c036:	55ab      	strb	r3, [r5, r6]
 800c038:	e617      	b.n	800bc6a <CheckAttachedButtons+0x146>
 800c03a:	46c0      	nop			; (mov r8, r8)
 800c03c:	0000fffe 	.word	0x0000fffe
 800c040:	20006844 	.word	0x20006844
 800c044:	20002438 	.word	0x20002438

0800c048 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	4b03      	ldr	r3, [pc, #12]	; (800c05c <NVIC_SystemReset+0x14>)
 800c04e:	4a04      	ldr	r2, [pc, #16]	; (800c060 <NVIC_SystemReset+0x18>)
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800c056:	46c0      	nop			; (mov r8, r8)
 800c058:	e7fd      	b.n	800c056 <NVIC_SystemReset+0xe>
 800c05a:	46c0      	nop			; (mov r8, r8)
 800c05c:	e000ed00 	.word	0xe000ed00
 800c060:	05fa0004 	.word	0x05fa0004

0800c064 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c064:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800c066:	f002 fdfb 	bl	800ec60 <HAL_IncTick>
  osSystickHandler();  
 800c06a:	f000 ffdb 	bl	800d024 <osSystickHandler>

}
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800c070:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c072:	24ff      	movs	r4, #255	; 0xff
 800c074:	4d09      	ldr	r5, [pc, #36]	; (800c09c <HardFault_Handler+0x2c>)
{
 800c076:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800c078:	7828      	ldrb	r0, [r5, #0]
 800c07a:	23ff      	movs	r3, #255	; 0xff
 800c07c:	2211      	movs	r2, #17
 800c07e:	4908      	ldr	r1, [pc, #32]	; (800c0a0 <HardFault_Handler+0x30>)
 800c080:	9400      	str	r4, [sp, #0]
 800c082:	f000 fdc5 	bl	800cc10 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c086:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <HardFault_Handler+0x34>)
 800c088:	7828      	ldrb	r0, [r5, #0]
 800c08a:	6819      	ldr	r1, [r3, #0]
 800c08c:	220f      	movs	r2, #15
 800c08e:	23ff      	movs	r3, #255	; 0xff
 800c090:	9400      	str	r4, [sp, #0]
 800c092:	f000 fdbd 	bl	800cc10 <writePxMutex>
	NVIC_SystemReset();
 800c096:	f7ff ffd7 	bl	800c048 <NVIC_SystemReset>
 800c09a:	46c0      	nop			; (mov r8, r8)
 800c09c:	20000c28 	.word	0x20000c28
 800c0a0:	08019834 	.word	0x08019834
 800c0a4:	200000a0 	.word	0x200000a0

0800c0a8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800c0a8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800c0aa:	4802      	ldr	r0, [pc, #8]	; (800c0b4 <USART1_IRQHandler+0xc>)
 800c0ac:	f005 fdd4 	bl	8011c58 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	20006a44 	.word	0x20006a44

0800c0b8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800c0b8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800c0ba:	4802      	ldr	r0, [pc, #8]	; (800c0c4 <USART2_IRQHandler+0xc>)
 800c0bc:	f005 fdcc 	bl	8011c58 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	20006b94 	.word	0x20006b94

0800c0c8 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800c0c8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800c0ca:	4806      	ldr	r0, [pc, #24]	; (800c0e4 <USART3_8_IRQHandler+0x1c>)
 800c0cc:	f005 fdc4 	bl	8011c58 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800c0d0:	4805      	ldr	r0, [pc, #20]	; (800c0e8 <USART3_8_IRQHandler+0x20>)
 800c0d2:	f005 fdc1 	bl	8011c58 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800c0d6:	4805      	ldr	r0, [pc, #20]	; (800c0ec <USART3_8_IRQHandler+0x24>)
 800c0d8:	f005 fdbe 	bl	8011c58 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800c0dc:	4804      	ldr	r0, [pc, #16]	; (800c0f0 <USART3_8_IRQHandler+0x28>)
 800c0de:	f005 fdbb 	bl	8011c58 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800c0e2:	bd10      	pop	{r4, pc}
 800c0e4:	20006964 	.word	0x20006964
 800c0e8:	20006b24 	.word	0x20006b24
 800c0ec:	200069d4 	.word	0x200069d4
 800c0f0:	20006ab4 	.word	0x20006ab4

0800c0f4 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800c0f4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	f7fb f91e 	bl	8007338 <DMA_IRQHandler>
	
}
 800c0fc:	bd10      	pop	{r4, pc}
 800c0fe:	46c0      	nop			; (mov r8, r8)

0800c100 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c100:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800c102:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	2310      	movs	r3, #16
 800c108:	4213      	tst	r3, r2
 800c10a:	d10e      	bne.n	800c12a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800c10c:	4a0a      	ldr	r2, [pc, #40]	; (800c138 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800c10e:	6811      	ldr	r1, [r2, #0]
 800c110:	05c9      	lsls	r1, r1, #23
 800c112:	d406      	bmi.n	800c122 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	4213      	tst	r3, r2
 800c118:	d002      	beq.n	800c120 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800c11a:	4808      	ldr	r0, [pc, #32]	; (800c13c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800c11c:	f003 fa78 	bl	800f610 <HAL_DMA_IRQHandler>
	}
}
 800c120:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800c122:	2002      	movs	r0, #2
 800c124:	f7fb f908 	bl	8007338 <DMA_IRQHandler>
 800c128:	e7fa      	b.n	800c120 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800c12a:	2005      	movs	r0, #5
 800c12c:	f7fb f904 	bl	8007338 <DMA_IRQHandler>
 800c130:	e7f6      	b.n	800c120 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800c132:	46c0      	nop			; (mov r8, r8)
 800c134:	40020400 	.word	0x40020400
 800c138:	40020000 	.word	0x40020000
 800c13c:	200021a4 	.word	0x200021a4

0800c140 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c140:	4b12      	ldr	r3, [pc, #72]	; (800c18c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800c142:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	03d2      	lsls	r2, r2, #15
 800c148:	d414      	bmi.n	800c174 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	02d2      	lsls	r2, r2, #11
 800c14e:	d40d      	bmi.n	800c16c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800c150:	4a0f      	ldr	r2, [pc, #60]	; (800c190 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800c152:	6812      	ldr	r2, [r2, #0]
 800c154:	05d2      	lsls	r2, r2, #23
 800c156:	d411      	bmi.n	800c17c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	04d2      	lsls	r2, r2, #19
 800c15c:	d412      	bmi.n	800c184 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	01db      	lsls	r3, r3, #7
 800c162:	d506      	bpl.n	800c172 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800c164:	480b      	ldr	r0, [pc, #44]	; (800c194 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800c166:	f003 fa53 	bl	800f610 <HAL_DMA_IRQHandler>
	}
}
 800c16a:	e002      	b.n	800c172 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800c16c:	2004      	movs	r0, #4
 800c16e:	f7fb f8e3 	bl	8007338 <DMA_IRQHandler>
}
 800c172:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800c174:	2003      	movs	r0, #3
 800c176:	f7fb f8df 	bl	8007338 <DMA_IRQHandler>
 800c17a:	e7fa      	b.n	800c172 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800c17c:	2006      	movs	r0, #6
 800c17e:	f7fb f8db 	bl	8007338 <DMA_IRQHandler>
 800c182:	e7f6      	b.n	800c172 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800c184:	4804      	ldr	r0, [pc, #16]	; (800c198 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800c186:	f003 fa43 	bl	800f610 <HAL_DMA_IRQHandler>
 800c18a:	e7f2      	b.n	800c172 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800c18c:	40020000 	.word	0x40020000
 800c190:	40020400 	.word	0x40020400
 800c194:	20002214 	.word	0x20002214
 800c198:	200021dc 	.word	0x200021dc

0800c19c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c19c:	2300      	movs	r3, #0
{
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800c1a2:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800c1a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800c1a6:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800c1ac:	f7fd ff5c 	bl	800a068 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800c1b0:	0020      	movs	r0, r4
 800c1b2:	f7fd fd79 	bl	8009ca8 <GetPort>
 800c1b6:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <HAL_UART_TxCpltCallback+0x2c>)
 800c1b8:	0080      	lsls	r0, r0, #2
 800c1ba:	58c0      	ldr	r0, [r0, r3]
 800c1bc:	a901      	add	r1, sp, #4
 800c1be:	f001 fa69 	bl	800d694 <xQueueGiveFromISR>
}
 800c1c2:	b002      	add	sp, #8
 800c1c4:	bd10      	pop	{r4, pc}
 800c1c6:	46c0      	nop			; (mov r8, r8)
 800c1c8:	200068c8 	.word	0x200068c8

0800c1cc <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1cc:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800c1ce:	2369      	movs	r3, #105	; 0x69
 800c1d0:	2501      	movs	r5, #1
 800c1d2:	54c5      	strb	r5, [r0, r3]
{
 800c1d4:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800c1d6:	f7fd fd67 	bl	8009ca8 <GetPort>
	if (portStatus[port] == STREAM) {
 800c1da:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <HAL_UART_ErrorCallback+0x3c>)
 800c1dc:	5c1b      	ldrb	r3, [r3, r0]
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d004      	beq.n	800c1ec <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800c1e2:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <HAL_UART_ErrorCallback+0x40>)
 800c1e4:	1818      	adds	r0, r3, r0
 800c1e6:	3801      	subs	r0, #1
 800c1e8:	7005      	strb	r5, [r0, #0]
	}	
}
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800c1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ee:	3801      	subs	r0, #1
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	0080      	lsls	r0, r0, #2
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	4b06      	ldr	r3, [pc, #24]	; (800c210 <HAL_UART_ErrorCallback+0x44>)
 800c1f8:	b292      	uxth	r2, r2
 800c1fa:	58c3      	ldr	r3, [r0, r3]
 800c1fc:	0020      	movs	r0, r4
 800c1fe:	6819      	ldr	r1, [r3, #0]
 800c200:	3128      	adds	r1, #40	; 0x28
 800c202:	f005 f9a9 	bl	8011558 <HAL_UART_Receive_DMA>
 800c206:	e7f0      	b.n	800c1ea <HAL_UART_ErrorCallback+0x1e>
 800c208:	20000c2c 	.word	0x20000c2c
 800c20c:	2000188c 	.word	0x2000188c
 800c210:	20001850 	.word	0x20001850

0800c214 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	46de      	mov	lr, fp
 800c218:	464e      	mov	r6, r9
 800c21a:	4645      	mov	r5, r8
 800c21c:	4657      	mov	r7, sl
 800c21e:	b5e0      	push	{r5, r6, r7, lr}
 800c220:	b085      	sub	sp, #20
 800c222:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800c224:	f7fd fd40 	bl	8009ca8 <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c228:	4e60      	ldr	r6, [pc, #384]	; (800c3ac <HAL_UART_RxCpltCallback+0x198>)
	uint8_t port_index = port_number - 1;
 800c22a:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	4a60      	ldr	r2, [pc, #384]	; (800c3b0 <HAL_UART_RxCpltCallback+0x19c>)
 800c230:	5cf5      	ldrb	r5, [r6, r3]
 800c232:	5c11      	ldrb	r1, [r2, r0]
 800c234:	2d0d      	cmp	r5, #13
 800c236:	d00a      	beq.n	800c24e <HAL_UART_RxCpltCallback+0x3a>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800c238:	2903      	cmp	r1, #3
 800c23a:	d00c      	beq.n	800c256 <HAL_UART_RxCpltCallback+0x42>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c23c:	2d48      	cmp	r5, #72	; 0x48
 800c23e:	d066      	beq.n	800c30e <HAL_UART_RxCpltCallback+0xfa>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800c240:	2d5a      	cmp	r5, #90	; 0x5a
 800c242:	d11b      	bne.n	800c27c <HAL_UART_RxCpltCallback+0x68>
 800c244:	2907      	cmp	r1, #7
 800c246:	d11b      	bne.n	800c280 <HAL_UART_RxCpltCallback+0x6c>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800c248:	2308      	movs	r3, #8
 800c24a:	5413      	strb	r3, [r2, r0]
 800c24c:	e006      	b.n	800c25c <HAL_UART_RxCpltCallback+0x48>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800c24e:	2900      	cmp	r1, #0
 800c250:	d046      	beq.n	800c2e0 <HAL_UART_RxCpltCallback+0xcc>
	else if(portStatus[port_number] == CLI)
 800c252:	2903      	cmp	r1, #3
 800c254:	d112      	bne.n	800c27c <HAL_UART_RxCpltCallback+0x68>
		Read_In_CLI_Task_Flag = 1;
 800c256:	4b57      	ldr	r3, [pc, #348]	; (800c3b4 <HAL_UART_RxCpltCallback+0x1a0>)
 800c258:	2201      	movs	r2, #1
 800c25a:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800c25c:	0020      	movs	r0, r4
 800c25e:	f7fd fd23 	bl	8009ca8 <GetPort>
 800c262:	1e41      	subs	r1, r0, #1
 800c264:	1871      	adds	r1, r6, r1
 800c266:	2201      	movs	r2, #1
 800c268:	0020      	movs	r0, r4
 800c26a:	f005 f975 	bl	8011558 <HAL_UART_Receive_DMA>
}
 800c26e:	b005      	add	sp, #20
 800c270:	bc3c      	pop	{r2, r3, r4, r5}
 800c272:	4690      	mov	r8, r2
 800c274:	4699      	mov	r9, r3
 800c276:	46a2      	mov	sl, r4
 800c278:	46ab      	mov	fp, r5
 800c27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800c27c:	2907      	cmp	r1, #7
 800c27e:	d07b      	beq.n	800c378 <HAL_UART_RxCpltCallback+0x164>
	else if(portStatus[port_number] == Z_Status)
 800c280:	2908      	cmp	r1, #8
 800c282:	d07c      	beq.n	800c37e <HAL_UART_RxCpltCallback+0x16a>
	else if(portStatus[port_number] == MSG)
 800c284:	2901      	cmp	r1, #1
 800c286:	d1e9      	bne.n	800c25c <HAL_UART_RxCpltCallback+0x48>
 800c288:	4f4b      	ldr	r7, [pc, #300]	; (800c3b8 <HAL_UART_RxCpltCallback+0x1a4>)
		if(temp_length[port_index] > 1)
 800c28a:	494b      	ldr	r1, [pc, #300]	; (800c3b8 <HAL_UART_RxCpltCallback+0x1a4>)
 800c28c:	5cff      	ldrb	r7, [r7, r3]
 800c28e:	18c9      	adds	r1, r1, r3
 800c290:	46b9      	mov	r9, r7
 800c292:	2701      	movs	r7, #1
 800c294:	444f      	add	r7, r9
 800c296:	b2ff      	uxtb	r7, r7
 800c298:	4688      	mov	r8, r1
 800c29a:	7a09      	ldrb	r1, [r1, #8]
 800c29c:	9702      	str	r7, [sp, #8]
 800c29e:	2701      	movs	r7, #1
 800c2a0:	468c      	mov	ip, r1
 800c2a2:	427f      	negs	r7, r7
 800c2a4:	4467      	add	r7, ip
 800c2a6:	b2ff      	uxtb	r7, r7
 800c2a8:	9701      	str	r7, [sp, #4]
 800c2aa:	4667      	mov	r7, ip
 800c2ac:	4943      	ldr	r1, [pc, #268]	; (800c3bc <HAL_UART_RxCpltCallback+0x1a8>)
 800c2ae:	468a      	mov	sl, r1
 800c2b0:	5cc9      	ldrb	r1, [r1, r3]
 800c2b2:	9100      	str	r1, [sp, #0]
 800c2b4:	2f01      	cmp	r7, #1
 800c2b6:	d92f      	bls.n	800c318 <HAL_UART_RxCpltCallback+0x104>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c2b8:	00ca      	lsls	r2, r1, #3
 800c2ba:	1a52      	subs	r2, r2, r1
 800c2bc:	4694      	mov	ip, r2
 800c2be:	0099      	lsls	r1, r3, #2
 800c2c0:	18c9      	adds	r1, r1, r3
 800c2c2:	00ca      	lsls	r2, r1, #3
 800c2c4:	1a51      	subs	r1, r2, r1
 800c2c6:	4461      	add	r1, ip
 800c2c8:	4a3d      	ldr	r2, [pc, #244]	; (800c3c0 <HAL_UART_RxCpltCallback+0x1ac>)
 800c2ca:	00c9      	lsls	r1, r1, #3
 800c2cc:	1851      	adds	r1, r2, r1
 800c2ce:	464a      	mov	r2, r9
			temp_index[port_index]++;
 800c2d0:	9f02      	ldr	r7, [sp, #8]
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c2d2:	548d      	strb	r5, [r1, r2]
			temp_index[port_index]++;
 800c2d4:	4a38      	ldr	r2, [pc, #224]	; (800c3b8 <HAL_UART_RxCpltCallback+0x1a4>)
 800c2d6:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800c2d8:	4643      	mov	r3, r8
 800c2da:	9f01      	ldr	r7, [sp, #4]
 800c2dc:	721f      	strb	r7, [r3, #8]
 800c2de:	e7bd      	b.n	800c25c <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c2e0:	2303      	movs	r3, #3
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800c2e2:	7011      	strb	r1, [r2, #0]
 800c2e4:	7051      	strb	r1, [r2, #1]
 800c2e6:	7091      	strb	r1, [r2, #2]
 800c2e8:	70d1      	strb	r1, [r2, #3]
 800c2ea:	7111      	strb	r1, [r2, #4]
 800c2ec:	7151      	strb	r1, [r2, #5]
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800c2ee:	5413      	strb	r3, [r2, r0]
		PcPort = port_number;
 800c2f0:	4b34      	ldr	r3, [pc, #208]	; (800c3c4 <HAL_UART_RxCpltCallback+0x1b0>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c2f2:	2202      	movs	r2, #2
		PcPort = port_number;
 800c2f4:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800c2f6:	4b34      	ldr	r3, [pc, #208]	; (800c3c8 <HAL_UART_RxCpltCallback+0x1b4>)
 800c2f8:	6818      	ldr	r0, [r3, #0]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f002 f91a 	bl	800e534 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800c300:	4b32      	ldr	r3, [pc, #200]	; (800c3cc <HAL_UART_RxCpltCallback+0x1b8>)
 800c302:	781a      	ldrb	r2, [r3, #0]
 800c304:	2a01      	cmp	r2, #1
 800c306:	d1a7      	bne.n	800c258 <HAL_UART_RxCpltCallback+0x44>
 800c308:	492a      	ldr	r1, [pc, #168]	; (800c3b4 <HAL_UART_RxCpltCallback+0x1a0>)
 800c30a:	700a      	strb	r2, [r1, #0]
 800c30c:	e7a4      	b.n	800c258 <HAL_UART_RxCpltCallback+0x44>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800c30e:	2900      	cmp	r1, #0
 800c310:	d1b4      	bne.n	800c27c <HAL_UART_RxCpltCallback+0x68>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800c312:	2307      	movs	r3, #7
 800c314:	5413      	strb	r3, [r2, r0]
 800c316:	e7a1      	b.n	800c25c <HAL_UART_RxCpltCallback+0x48>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800c318:	9900      	ldr	r1, [sp, #0]
 800c31a:	00cf      	lsls	r7, r1, #3
 800c31c:	1a7f      	subs	r7, r7, r1
 800c31e:	9703      	str	r7, [sp, #12]
 800c320:	009f      	lsls	r7, r3, #2
 800c322:	46bb      	mov	fp, r7
 800c324:	449b      	add	fp, r3
 800c326:	465f      	mov	r7, fp
 800c328:	4659      	mov	r1, fp
 800c32a:	00ff      	lsls	r7, r7, #3
 800c32c:	1a7f      	subs	r7, r7, r1
 800c32e:	46bc      	mov	ip, r7
 800c330:	9f03      	ldr	r7, [sp, #12]
 800c332:	46bb      	mov	fp, r7
 800c334:	44dc      	add	ip, fp
 800c336:	4661      	mov	r1, ip
 800c338:	00c9      	lsls	r1, r1, #3
 800c33a:	468c      	mov	ip, r1
 800c33c:	4920      	ldr	r1, [pc, #128]	; (800c3c0 <HAL_UART_RxCpltCallback+0x1ac>)
 800c33e:	464f      	mov	r7, r9
 800c340:	468b      	mov	fp, r1
 800c342:	44dc      	add	ip, fp
 800c344:	4661      	mov	r1, ip
 800c346:	55cd      	strb	r5, [r1, r7]
			temp_index[port_index]++;
 800c348:	9902      	ldr	r1, [sp, #8]
 800c34a:	4d1b      	ldr	r5, [pc, #108]	; (800c3b8 <HAL_UART_RxCpltCallback+0x1a4>)
 800c34c:	54e9      	strb	r1, [r5, r3]
			temp_length[port_index]--;
 800c34e:	4641      	mov	r1, r8
 800c350:	9d01      	ldr	r5, [sp, #4]
 800c352:	720d      	strb	r5, [r1, #8]
			MSG_Buffer_Index_End[port_index]++;
 800c354:	9900      	ldr	r1, [sp, #0]
 800c356:	3101      	adds	r1, #1
 800c358:	b2c9      	uxtb	r1, r1
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800c35a:	2905      	cmp	r1, #5
 800c35c:	d100      	bne.n	800c360 <HAL_UART_RxCpltCallback+0x14c>
 800c35e:	2100      	movs	r1, #0
 800c360:	4655      	mov	r5, sl
 800c362:	54e9      	strb	r1, [r5, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800c364:	491a      	ldr	r1, [pc, #104]	; (800c3d0 <HAL_UART_RxCpltCallback+0x1bc>)
 800c366:	4d1b      	ldr	r5, [pc, #108]	; (800c3d4 <HAL_UART_RxCpltCallback+0x1c0>)
 800c368:	780b      	ldrb	r3, [r1, #0]
 800c36a:	54e8      	strb	r0, [r5, r3]
			Process_Message_Buffer_Index_End++;
 800c36c:	3301      	adds	r3, #1
 800c36e:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800c370:	2b05      	cmp	r3, #5
 800c372:	d100      	bne.n	800c376 <HAL_UART_RxCpltCallback+0x162>
 800c374:	2300      	movs	r3, #0
 800c376:	700b      	strb	r3, [r1, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800c378:	2300      	movs	r3, #0
 800c37a:	5413      	strb	r3, [r2, r0]
 800c37c:	e76e      	b.n	800c25c <HAL_UART_RxCpltCallback+0x48>
		portStatus[port_number] =MSG; // Receive length byte.
 800c37e:	3907      	subs	r1, #7
 800c380:	5411      	strb	r1, [r2, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c382:	4a0e      	ldr	r2, [pc, #56]	; (800c3bc <HAL_UART_RxCpltCallback+0x1a8>)
 800c384:	5cd7      	ldrb	r7, [r2, r3]
 800c386:	00fa      	lsls	r2, r7, #3
 800c388:	1bd7      	subs	r7, r2, r7
 800c38a:	009a      	lsls	r2, r3, #2
 800c38c:	18d2      	adds	r2, r2, r3
 800c38e:	00d1      	lsls	r1, r2, #3
 800c390:	1a8a      	subs	r2, r1, r2
 800c392:	19d2      	adds	r2, r2, r7
 800c394:	490a      	ldr	r1, [pc, #40]	; (800c3c0 <HAL_UART_RxCpltCallback+0x1ac>)
 800c396:	00d2      	lsls	r2, r2, #3
 800c398:	188a      	adds	r2, r1, r2
		temp_index[port_index] = 3;
 800c39a:	2103      	movs	r1, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800c39c:	7095      	strb	r5, [r2, #2]
		temp_index[port_index] = 3;
 800c39e:	4a06      	ldr	r2, [pc, #24]	; (800c3b8 <HAL_UART_RxCpltCallback+0x1a4>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c3a0:	3501      	adds	r5, #1
		temp_index[port_index] = 3;
 800c3a2:	54d1      	strb	r1, [r2, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800c3a4:	18d3      	adds	r3, r2, r3
 800c3a6:	721d      	strb	r5, [r3, #8]
 800c3a8:	e758      	b.n	800c25c <HAL_UART_RxCpltCallback+0x48>
 800c3aa:	46c0      	nop			; (mov r8, r8)
 800c3ac:	20001c94 	.word	0x20001c94
 800c3b0:	20000c2c 	.word	0x20000c2c
 800c3b4:	200016d1 	.word	0x200016d1
 800c3b8:	20002440 	.word	0x20002440
 800c3bc:	200016c4 	.word	0x200016c4
 800c3c0:	2000114c 	.word	0x2000114c
 800c3c4:	20000c28 	.word	0x20000c28
 800c3c8:	20001ca8 	.word	0x20001ca8
 800c3cc:	200016d2 	.word	0x200016d2
 800c3d0:	2000113f 	.word	0x2000113f
 800c3d4:	20001144 	.word	0x20001144

0800c3d8 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c3d8:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c3da:	24ff      	movs	r4, #255	; 0xff
 800c3dc:	4d09      	ldr	r5, [pc, #36]	; (800c404 <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800c3de:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800c3e0:	7828      	ldrb	r0, [r5, #0]
 800c3e2:	23ff      	movs	r3, #255	; 0xff
 800c3e4:	2210      	movs	r2, #16
 800c3e6:	4908      	ldr	r1, [pc, #32]	; (800c408 <vApplicationStackOverflowHook+0x30>)
 800c3e8:	9400      	str	r4, [sp, #0]
 800c3ea:	f000 fc11 	bl	800cc10 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c3ee:	4b07      	ldr	r3, [pc, #28]	; (800c40c <vApplicationStackOverflowHook+0x34>)
 800c3f0:	7828      	ldrb	r0, [r5, #0]
 800c3f2:	6819      	ldr	r1, [r3, #0]
 800c3f4:	220f      	movs	r2, #15
 800c3f6:	23ff      	movs	r3, #255	; 0xff
 800c3f8:	9400      	str	r4, [sp, #0]
 800c3fa:	f000 fc09 	bl	800cc10 <writePxMutex>
	NVIC_SystemReset();
 800c3fe:	f7ff fe23 	bl	800c048 <NVIC_SystemReset>
 800c402:	46c0      	nop			; (mov r8, r8)
 800c404:	20000c28 	.word	0x20000c28
 800c408:	08019848 	.word	0x08019848
 800c40c:	200000a0 	.word	0x200000a0

0800c410 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800c410:	b530      	push	{r4, r5, lr}
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c412:	24ff      	movs	r4, #255	; 0xff
 800c414:	4d09      	ldr	r5, [pc, #36]	; (800c43c <vApplicationMallocFailedHook+0x2c>)
void vApplicationMallocFailedHook(void){
 800c416:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800c418:	7828      	ldrb	r0, [r5, #0]
 800c41a:	23ff      	movs	r3, #255	; 0xff
 800c41c:	2214      	movs	r2, #20
 800c41e:	4908      	ldr	r1, [pc, #32]	; (800c440 <vApplicationMallocFailedHook+0x30>)
 800c420:	9400      	str	r4, [sp, #0]
 800c422:	f000 fbf5 	bl	800cc10 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800c426:	4b07      	ldr	r3, [pc, #28]	; (800c444 <vApplicationMallocFailedHook+0x34>)
 800c428:	7828      	ldrb	r0, [r5, #0]
 800c42a:	6819      	ldr	r1, [r3, #0]
 800c42c:	220f      	movs	r2, #15
 800c42e:	23ff      	movs	r3, #255	; 0xff
 800c430:	9400      	str	r4, [sp, #0]
 800c432:	f000 fbed 	bl	800cc10 <writePxMutex>
	NVIC_SystemReset();
 800c436:	f7ff fe07 	bl	800c048 <NVIC_SystemReset>
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	20000c28 	.word	0x20000c28
 800c440:	0801985c 	.word	0x0801985c
 800c444:	200000a0 	.word	0x200000a0

0800c448 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800c448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c44a:	46de      	mov	lr, fp
 800c44c:	464e      	mov	r6, r9
 800c44e:	4645      	mov	r5, r8
 800c450:	4657      	mov	r7, sl
 800c452:	b5e0      	push	{r5, r6, r7, lr}
 800c454:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c456:	ae04      	add	r6, sp, #16
 800c458:	0032      	movs	r2, r6
 800c45a:	4b34      	ldr	r3, [pc, #208]	; (800c52c <RTC_CalendarConfig+0xe4>)
 800c45c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c45e:	c213      	stmia	r2!, {r0, r1, r4}
 800c460:	ab01      	add	r3, sp, #4
 800c462:	4698      	mov	r8, r3
 800c464:	4642      	mov	r2, r8
 800c466:	4b32      	ldr	r3, [pc, #200]	; (800c530 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800c468:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c46a:	cb03      	ldmia	r3!, {r0, r1}
 800c46c:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800c46e:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c470:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c472:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800c474:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800c476:	f005 fc88 	bl	8011d8a <atoi>
 800c47a:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800c47c:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800c47e:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800c480:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800c482:	f005 fc82 	bl	8011d8a <atoi>
 800c486:	b2c3      	uxtb	r3, r0
 800c488:	4699      	mov	r9, r3
 800c48a:	4d2a      	ldr	r5, [pc, #168]	; (800c534 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800c48c:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800c48e:	6829      	ldr	r1, [r5, #0]
 800c490:	0030      	movs	r0, r6
 800c492:	f7f3 fe37 	bl	8000104 <strcmp>
 800c496:	3401      	adds	r4, #1
 800c498:	b2e4      	uxtb	r4, r4
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d100      	bne.n	800c4a0 <RTC_CalendarConfig+0x58>
 800c49e:	0027      	movs	r7, r4
 800c4a0:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800c4a2:	2c0c      	cmp	r4, #12
 800c4a4:	d1f3      	bne.n	800c48e <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800c4a6:	200a      	movs	r0, #10
 800c4a8:	4468      	add	r0, sp
 800c4aa:	f005 fc6e 	bl	8011d8a <atoi>
	*(comDate + 5) = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	7173      	strb	r3, [r6, #5]
 800c4b2:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800c4b4:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800c4b6:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800c4b8:	1dd8      	adds	r0, r3, #7
 800c4ba:	f005 fc66 	bl	8011d8a <atoi>
	*(comDate + 2) = 0;
 800c4be:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800c4c0:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800c4c2:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800c4c4:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800c4c6:	f005 fc60 	bl	8011d8a <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800c4ca:	466b      	mov	r3, sp
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800c4d0:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800c4d2:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800c4d4:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c4d6:	466a      	mov	r2, sp
 800c4d8:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c4da:	4f17      	ldr	r7, [pc, #92]	; (800c538 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800c4dc:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800c4de:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c4e0:	4669      	mov	r1, sp
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	0038      	movs	r0, r7
 800c4e6:	f004 fe63 	bl	80111b0 <HAL_RTC_SetDate>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d116      	bne.n	800c51c <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c4ee:	2218      	movs	r2, #24
 800c4f0:	4b12      	ldr	r3, [pc, #72]	; (800c53c <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800c4f2:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800c4f4:	7208      	strb	r0, [r1, #8]
 800c4f6:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c4f8:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c4fa:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800c500:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800c502:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800c504:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c506:	f004 fdbf 	bl	8011088 <HAL_RTC_SetTime>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d106      	bne.n	800c51c <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c50e:	0038      	movs	r0, r7
 800c510:	4a0b      	ldr	r2, [pc, #44]	; (800c540 <RTC_CalendarConfig+0xf8>)
 800c512:	2101      	movs	r1, #1
 800c514:	f004 fec8 	bl	80112a8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c518:	2000      	movs	r0, #0
 800c51a:	e000      	b.n	800c51e <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800c51c:	20ff      	movs	r0, #255	; 0xff
}
 800c51e:	b00d      	add	sp, #52	; 0x34
 800c520:	bc3c      	pop	{r2, r3, r4, r5}
 800c522:	4690      	mov	r8, r2
 800c524:	4699      	mov	r9, r3
 800c526:	46a2      	mov	sl, r4
 800c528:	46ab      	mov	fp, r5
 800c52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c52c:	080172dc 	.word	0x080172dc
 800c530:	08019884 	.word	0x08019884
 800c534:	20000064 	.word	0x20000064
 800c538:	20006c74 	.word	0x20006c74
 800c53c:	20006844 	.word	0x20006844
 800c540:	000032f2 	.word	0x000032f2

0800c544 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800c544:	2380      	movs	r3, #128	; 0x80
{
 800c546:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800c548:	4d1e      	ldr	r5, [pc, #120]	; (800c5c4 <RTC_Init+0x80>)
 800c54a:	021b      	lsls	r3, r3, #8
 800c54c:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800c54e:	4c1e      	ldr	r4, [pc, #120]	; (800c5c8 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800c550:	4313      	orrs	r3, r2
 800c552:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800c554:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800c556:	4b1d      	ldr	r3, [pc, #116]	; (800c5cc <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800c558:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800c55a:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c55c:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800c55e:	4a1c      	ldr	r2, [pc, #112]	; (800c5d0 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c560:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c562:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800c564:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c566:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c568:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c56a:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c56c:	f004 fd44 	bl	8010ff8 <HAL_RTC_Init>
 800c570:	0006      	movs	r6, r0
 800c572:	20ff      	movs	r0, #255	; 0xff
 800c574:	2e00      	cmp	r6, #0
 800c576:	d119      	bne.n	800c5ac <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800c578:	2101      	movs	r1, #1
 800c57a:	0020      	movs	r0, r4
 800c57c:	f004 fe9a 	bl	80112b4 <HAL_RTCEx_BKUPRead>
 800c580:	4b14      	ldr	r3, [pc, #80]	; (800c5d4 <RTC_Init+0x90>)
 800c582:	4298      	cmp	r0, r3
 800c584:	d113      	bne.n	800c5ae <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800c586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c588:	011b      	lsls	r3, r3, #4
 800c58a:	d501      	bpl.n	800c590 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800c58c:	4b12      	ldr	r3, [pc, #72]	; (800c5d8 <RTC_Init+0x94>)
 800c58e:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800c590:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <RTC_Init+0x80>)
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	015b      	lsls	r3, r3, #5
 800c596:	d50c      	bpl.n	800c5b2 <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800c598:	2201      	movs	r2, #1
 800c59a:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <RTC_Init+0x94>)
	return BOS_OK;
 800c59c:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800c59e:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c5a0:	2380      	movs	r3, #128	; 0x80
 800c5a2:	4a08      	ldr	r2, [pc, #32]	; (800c5c4 <RTC_Init+0x80>)
 800c5a4:	045b      	lsls	r3, r3, #17
 800c5a6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c5a8:	430b      	orrs	r3, r1
 800c5aa:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800c5ae:	f7ff ff4b 	bl	800c448 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c5b2:	2380      	movs	r3, #128	; 0x80
 800c5b4:	4a03      	ldr	r2, [pc, #12]	; (800c5c4 <RTC_Init+0x80>)
 800c5b6:	045b      	lsls	r3, r3, #17
 800c5b8:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800c5ba:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800c5c0:	e7f4      	b.n	800c5ac <RTC_Init+0x68>
 800c5c2:	46c0      	nop			; (mov r8, r8)
 800c5c4:	40021000 	.word	0x40021000
 800c5c8:	20006c74 	.word	0x20006c74
 800c5cc:	40002800 	.word	0x40002800
 800c5d0:	000007cf 	.word	0x000007cf
 800c5d4:	000032f2 	.word	0x000032f2
 800c5d8:	2000244d 	.word	0x2000244d

0800c5dc <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5de:	46c6      	mov	lr, r8
 800c5e0:	b500      	push	{lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	ac0c      	add	r4, sp, #48	; 0x30
 800c5e6:	7827      	ldrb	r7, [r4, #0]
 800c5e8:	ac0d      	add	r4, sp, #52	; 0x34
 800c5ea:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800c5ec:	3230      	adds	r2, #48	; 0x30
{
 800c5ee:	46a0      	mov	r8, r4
 800c5f0:	ac0e      	add	r4, sp, #56	; 0x38
 800c5f2:	7825      	ldrb	r5, [r4, #0]
 800c5f4:	ac0f      	add	r4, sp, #60	; 0x3c
 800c5f6:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800c5f8:	466c      	mov	r4, sp
 800c5fa:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800c5fc:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800c5fe:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800c600:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c602:	4c20      	ldr	r4, [pc, #128]	; (800c684 <BOS_CalendarConfig+0xa8>)
 800c604:	2200      	movs	r2, #0
 800c606:	4669      	mov	r1, sp
 800c608:	0020      	movs	r0, r4
 800c60a:	f004 fdd1 	bl	80111b0 <HAL_RTC_SetDate>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d123      	bne.n	800c65a <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800c612:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800c614:	a901      	add	r1, sp, #4
 800c616:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800c618:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800c61a:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800c61c:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800c61e:	2d0c      	cmp	r5, #12
 800c620:	d820      	bhi.n	800c664 <BOS_CalendarConfig+0x88>
 800c622:	4d19      	ldr	r5, [pc, #100]	; (800c688 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800c624:	2e01      	cmp	r6, #1
 800c626:	d022      	beq.n	800c66e <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800c628:	2e02      	cmp	r6, #2
 800c62a:	d025      	beq.n	800c678 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c62c:	2318      	movs	r3, #24
 800c62e:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c630:	2200      	movs	r2, #0
 800c632:	0020      	movs	r0, r4
 800c634:	f004 fd28 	bl	8011088 <HAL_RTC_SetTime>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d10e      	bne.n	800c65a <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c63c:	7b6b      	ldrb	r3, [r5, #13]
 800c63e:	7929      	ldrb	r1, [r5, #4]
 800c640:	021b      	lsls	r3, r3, #8
 800c642:	301b      	adds	r0, #27
 800c644:	4319      	orrs	r1, r3
 800c646:	30ff      	adds	r0, #255	; 0xff
 800c648:	f7fe f9bc 	bl	800a9c4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c64c:	0020      	movs	r0, r4
 800c64e:	4a0f      	ldr	r2, [pc, #60]	; (800c68c <BOS_CalendarConfig+0xb0>)
 800c650:	2101      	movs	r1, #1
 800c652:	f004 fe29 	bl	80112a8 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c656:	2000      	movs	r0, #0
 800c658:	e000      	b.n	800c65c <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800c65a:	20ff      	movs	r0, #255	; 0xff
}
 800c65c:	b006      	add	sp, #24
 800c65e:	bc04      	pop	{r2}
 800c660:	4690      	mov	r8, r2
 800c662:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800c664:	2318      	movs	r3, #24
 800c666:	4d08      	ldr	r5, [pc, #32]	; (800c688 <BOS_CalendarConfig+0xac>)
 800c668:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800c66a:	2e01      	cmp	r6, #1
 800c66c:	d1dc      	bne.n	800c628 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c66e:	2300      	movs	r3, #0
 800c670:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c672:	330c      	adds	r3, #12
 800c674:	736b      	strb	r3, [r5, #13]
 800c676:	e7db      	b.n	800c630 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c678:	2340      	movs	r3, #64	; 0x40
 800c67a:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800c67c:	3b34      	subs	r3, #52	; 0x34
 800c67e:	736b      	strb	r3, [r5, #13]
 800c680:	e7d6      	b.n	800c630 <BOS_CalendarConfig+0x54>
 800c682:	46c0      	nop			; (mov r8, r8)
 800c684:	20006c74 	.word	0x20006c74
 800c688:	20006844 	.word	0x20006844
 800c68c:	000032f2 	.word	0x000032f2

0800c690 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c690:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c692:	4d16      	ldr	r5, [pc, #88]	; (800c6ec <GetTimeDate+0x5c>)
{
 800c694:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c696:	ac01      	add	r4, sp, #4
 800c698:	0021      	movs	r1, r4
 800c69a:	2200      	movs	r2, #0
 800c69c:	0028      	movs	r0, r5
 800c69e:	f004 fc13 	bl	8010ec8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c6a2:	4669      	mov	r1, sp
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	0028      	movs	r0, r5
 800c6a8:	f004 fc3e 	bl	8010f28 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c6ac:	7a22      	ldrb	r2, [r4, #8]
 800c6ae:	4b10      	ldr	r3, [pc, #64]	; (800c6f0 <GetTimeDate+0x60>)
 800c6b0:	09d2      	lsrs	r2, r2, #7
 800c6b2:	3201      	adds	r2, #1
 800c6b4:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c6b6:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800c6b8:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c6ba:	0852      	lsrs	r2, r2, #1
 800c6bc:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c6be:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c6c0:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800c6c2:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c6c4:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c6c6:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800c6c8:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c6ca:	7822      	ldrb	r2, [r4, #0]
 800c6cc:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c6ce:	466a      	mov	r2, sp
 800c6d0:	7892      	ldrb	r2, [r2, #2]
 800c6d2:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c6d4:	466a      	mov	r2, sp
 800c6d6:	7852      	ldrb	r2, [r2, #1]
 800c6d8:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c6da:	466a      	mov	r2, sp
 800c6dc:	7812      	ldrb	r2, [r2, #0]
 800c6de:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c6e0:	466a      	mov	r2, sp
 800c6e2:	78d2      	ldrb	r2, [r2, #3]
 800c6e4:	4462      	add	r2, ip
 800c6e6:	831a      	strh	r2, [r3, #24]
}
 800c6e8:	b007      	add	sp, #28
 800c6ea:	bd30      	pop	{r4, r5, pc}
 800c6ec:	20006c74 	.word	0x20006c74
 800c6f0:	20006844 	.word	0x20006844

0800c6f4 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c6f4:	2080      	movs	r0, #128	; 0x80
 800c6f6:	4a13      	ldr	r2, [pc, #76]	; (800c744 <TIM_USEC_Init+0x50>)
{
 800c6f8:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800c6fa:	69d1      	ldr	r1, [r2, #28]
 800c6fc:	0040      	lsls	r0, r0, #1
 800c6fe:	4301      	orrs	r1, r0
 800c700:	61d1      	str	r1, [r2, #28]
 800c702:	69d3      	ldr	r3, [r2, #28]
{
 800c704:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800c706:	4003      	ands	r3, r0
 800c708:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c70a:	4c0f      	ldr	r4, [pc, #60]	; (800c748 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800c70c:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800c70e:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c710:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800c712:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c714:	f004 fb28 	bl	8010d68 <HAL_RCC_GetPCLK1Freq>
 800c718:	490d      	ldr	r1, [pc, #52]	; (800c750 <TIM_USEC_Init+0x5c>)
 800c71a:	f7f3 fd19 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800c71e:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c720:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800c722:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800c724:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c726:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800c728:	f004 fe2c 	bl	8011384 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c72c:	a902      	add	r1, sp, #8
 800c72e:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c730:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c732:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c734:	f004 fe40 	bl	80113b8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c738:	0020      	movs	r0, r4
 800c73a:	f004 fdc3 	bl	80112c4 <HAL_TIM_Base_Start>
}
 800c73e:	b005      	add	sp, #20
 800c740:	bd30      	pop	{r4, r5, pc}
 800c742:	46c0      	nop			; (mov r8, r8)
 800c744:	40021000 	.word	0x40021000
 800c748:	20006cd0 	.word	0x20006cd0
 800c74c:	40002000 	.word	0x40002000
 800c750:	000f4240 	.word	0x000f4240
 800c754:	0000ffff 	.word	0x0000ffff

0800c758 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c758:	2080      	movs	r0, #128	; 0x80
 800c75a:	4a13      	ldr	r2, [pc, #76]	; (800c7a8 <TIM_MSEC_Init+0x50>)
{
 800c75c:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800c75e:	6991      	ldr	r1, [r2, #24]
 800c760:	0240      	lsls	r0, r0, #9
 800c762:	4301      	orrs	r1, r0
 800c764:	6191      	str	r1, [r2, #24]
 800c766:	6993      	ldr	r3, [r2, #24]
{
 800c768:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800c76a:	4003      	ands	r3, r0
 800c76c:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800c76e:	4c0f      	ldr	r4, [pc, #60]	; (800c7ac <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800c770:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800c772:	4b0f      	ldr	r3, [pc, #60]	; (800c7b0 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c774:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800c776:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c778:	f004 faf6 	bl	8010d68 <HAL_RCC_GetPCLK1Freq>
 800c77c:	21fa      	movs	r1, #250	; 0xfa
 800c77e:	0089      	lsls	r1, r1, #2
 800c780:	f7f3 fce6 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800c784:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c786:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800c788:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800c78a:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c78c:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800c78e:	f004 fdf9 	bl	8011384 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c792:	a902      	add	r1, sp, #8
 800c794:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c796:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c798:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c79a:	f004 fe0d 	bl	80113b8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800c79e:	0020      	movs	r0, r4
 800c7a0:	f004 fd90 	bl	80112c4 <HAL_TIM_Base_Start>
}
 800c7a4:	b005      	add	sp, #20
 800c7a6:	bd30      	pop	{r4, r5, pc}
 800c7a8:	40021000 	.word	0x40021000
 800c7ac:	20006c94 	.word	0x20006c94
 800c7b0:	40014000 	.word	0x40014000
 800c7b4:	0000ffff 	.word	0x0000ffff

0800c7b8 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800c7b8:	b510      	push	{r4, lr}
 800c7ba:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800c7bc:	f002 f91e 	bl	800e9fc <vPortEnterCritical>
	
	if (Delay)
 800c7c0:	2c00      	cmp	r4, #0
 800c7c2:	d006      	beq.n	800c7d2 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800c7c4:	4b04      	ldr	r3, [pc, #16]	; (800c7d8 <StartMicroDelay+0x20>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800c7ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c7cc:	1a5b      	subs	r3, r3, r1
 800c7ce:	42a3      	cmp	r3, r4
 800c7d0:	d9fb      	bls.n	800c7ca <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c7d2:	f002 f91f 	bl	800ea14 <vPortExitCritical>
}
 800c7d6:	bd10      	pop	{r4, pc}
 800c7d8:	20006cd0 	.word	0x20006cd0

0800c7dc <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800c7e0:	f002 f90c 	bl	800e9fc <vPortEnterCritical>
	
	if (Delay)
 800c7e4:	2c00      	cmp	r4, #0
 800c7e6:	d006      	beq.n	800c7f6 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800c7e8:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <StartMilliDelay+0x20>)
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800c7ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c7f0:	1a5b      	subs	r3, r3, r1
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	d9fb      	bls.n	800c7ee <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c7f6:	f002 f90d 	bl	800ea14 <vPortExitCritical>
}
 800c7fa:	bd10      	pop	{r4, pc}
 800c7fc:	20006c94 	.word	0x20006c94

0800c800 <SwapUartPins.part.0>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	0004      	movs	r4, r0
{
	if (huart != NULL) {
		if (direction == REVERSED) {
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c804:	f7fd fa50 	bl	8009ca8 <GetPort>
 800c808:	2180      	movs	r1, #128	; 0x80
 800c80a:	0209      	lsls	r1, r1, #8
 800c80c:	000a      	movs	r2, r1
 800c80e:	3801      	subs	r0, #1
 800c810:	4102      	asrs	r2, r0
 800c812:	4b07      	ldr	r3, [pc, #28]	; (800c830 <SwapUartPins.part.0+0x30>)
 800c814:	4d07      	ldr	r5, [pc, #28]	; (800c834 <SwapUartPins.part.0+0x34>)
 800c816:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c818:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c81a:	3b01      	subs	r3, #1
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	5b58      	ldrh	r0, [r3, r5]
 800c820:	4302      	orrs	r2, r0
 800c822:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c824:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800c826:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c828:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800c82a:	f005 f94f 	bl	8011acc <HAL_UART_Init>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800c82e:	bd70      	pop	{r4, r5, r6, pc}
 800c830:	20000a98 	.word	0x20000a98
 800c834:	20006d44 	.word	0x20006d44

0800c838 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c838:	480a      	ldr	r0, [pc, #40]	; (800c864 <MX_USART1_UART_Init+0x2c>)
 800c83a:	4b0b      	ldr	r3, [pc, #44]	; (800c868 <MX_USART1_UART_Init+0x30>)
{
 800c83c:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c83e:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800c840:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c842:	23e1      	movs	r3, #225	; 0xe1
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c844:	6142      	str	r2, [r0, #20]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c846:	031b      	lsls	r3, r3, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800c848:	22c0      	movs	r2, #192	; 0xc0
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c84a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c84c:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800c84e:	0092      	lsls	r2, r2, #2
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c850:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c852:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c854:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800c856:	6182      	str	r2, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c858:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c85a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c85c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800c85e:	f005 f935 	bl	8011acc <HAL_UART_Init>
}
 800c862:	bd10      	pop	{r4, pc}
 800c864:	20006a44 	.word	0x20006a44
 800c868:	40013800 	.word	0x40013800

0800c86c <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800c86c:	4809      	ldr	r0, [pc, #36]	; (800c894 <MX_USART2_UART_Init+0x28>)
 800c86e:	4b0a      	ldr	r3, [pc, #40]	; (800c898 <MX_USART2_UART_Init+0x2c>)
{
 800c870:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800c872:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c874:	23e1      	movs	r3, #225	; 0xe1
 800c876:	031b      	lsls	r3, r3, #12
 800c878:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c87a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c87c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c87e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c880:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c882:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c884:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c886:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c888:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c88a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c88c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800c88e:	f005 f91d 	bl	8011acc <HAL_UART_Init>
}
 800c892:	bd10      	pop	{r4, pc}
 800c894:	20006b94 	.word	0x20006b94
 800c898:	40004400 	.word	0x40004400

0800c89c <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 800c89c:	4809      	ldr	r0, [pc, #36]	; (800c8c4 <MX_USART3_UART_Init+0x28>)
 800c89e:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <MX_USART3_UART_Init+0x2c>)
{
 800c8a0:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800c8a2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c8a4:	23e1      	movs	r3, #225	; 0xe1
 800c8a6:	031b      	lsls	r3, r3, #12
 800c8a8:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c8aa:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c8ac:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c8ae:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c8b0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c8b2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c8b4:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c8b6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c8b8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c8ba:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c8bc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800c8be:	f005 f905 	bl	8011acc <HAL_UART_Init>
}
 800c8c2:	bd10      	pop	{r4, pc}
 800c8c4:	20006964 	.word	0x20006964
 800c8c8:	40004800 	.word	0x40004800

0800c8cc <MX_USART4_UART_Init>:
  huart4.Instance = USART4;
 800c8cc:	4809      	ldr	r0, [pc, #36]	; (800c8f4 <MX_USART4_UART_Init+0x28>)
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <MX_USART4_UART_Init+0x2c>)
{
 800c8d0:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800c8d2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c8d4:	23e1      	movs	r3, #225	; 0xe1
 800c8d6:	031b      	lsls	r3, r3, #12
 800c8d8:	6043      	str	r3, [r0, #4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c8da:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c8dc:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c8de:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c8e0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c8e2:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c8e4:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c8e6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c8e8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c8ea:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c8ec:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800c8ee:	f005 f8ed 	bl	8011acc <HAL_UART_Init>
}
 800c8f2:	bd10      	pop	{r4, pc}
 800c8f4:	20006b24 	.word	0x20006b24
 800c8f8:	40004c00 	.word	0x40004c00

0800c8fc <MX_USART5_UART_Init>:
  huart5.Instance = USART5;
 800c8fc:	4809      	ldr	r0, [pc, #36]	; (800c924 <MX_USART5_UART_Init+0x28>)
 800c8fe:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <MX_USART5_UART_Init+0x2c>)
{
 800c900:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800c902:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c904:	23e1      	movs	r3, #225	; 0xe1
 800c906:	031b      	lsls	r3, r3, #12
 800c908:	6043      	str	r3, [r0, #4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c90a:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c90c:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c90e:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c910:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c912:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c914:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c916:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c918:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c91a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c91c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800c91e:	f005 f8d5 	bl	8011acc <HAL_UART_Init>
}
 800c922:	bd10      	pop	{r4, pc}
 800c924:	200069d4 	.word	0x200069d4
 800c928:	40005000 	.word	0x40005000

0800c92c <MX_USART6_UART_Init>:
  huart6.Instance = USART6;
 800c92c:	4809      	ldr	r0, [pc, #36]	; (800c954 <MX_USART6_UART_Init+0x28>)
 800c92e:	4b0a      	ldr	r3, [pc, #40]	; (800c958 <MX_USART6_UART_Init+0x2c>)
{
 800c930:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800c932:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c934:	23e1      	movs	r3, #225	; 0xe1
 800c936:	031b      	lsls	r3, r3, #12
 800c938:	6043      	str	r3, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c93a:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c93c:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c93e:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c940:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c942:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c944:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c946:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c948:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c94a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c94c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800c94e:	f005 f8bd 	bl	8011acc <HAL_UART_Init>
}
 800c952:	bd10      	pop	{r4, pc}
 800c954:	20006ab4 	.word	0x20006ab4
 800c958:	40011400 	.word	0x40011400

0800c95c <HAL_UART_MspInit>:
{
 800c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95e:	46ce      	mov	lr, r9
 800c960:	4647      	mov	r7, r8
 800c962:	b580      	push	{r7, lr}
  if(huart->Instance==USART1)
 800c964:	6803      	ldr	r3, [r0, #0]
 800c966:	4a9f      	ldr	r2, [pc, #636]	; (800cbe4 <HAL_UART_MspInit+0x288>)
{
 800c968:	b08f      	sub	sp, #60	; 0x3c
 800c96a:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d042      	beq.n	800c9f6 <HAL_UART_MspInit+0x9a>
  else if(huart->Instance==USART2)
 800c970:	4a9d      	ldr	r2, [pc, #628]	; (800cbe8 <HAL_UART_MspInit+0x28c>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d100      	bne.n	800c978 <HAL_UART_MspInit+0x1c>
 800c976:	e0ab      	b.n	800cad0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 800c978:	4a9c      	ldr	r2, [pc, #624]	; (800cbec <HAL_UART_MspInit+0x290>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d100      	bne.n	800c980 <HAL_UART_MspInit+0x24>
 800c97e:	e0d3      	b.n	800cb28 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART4)
 800c980:	4a9b      	ldr	r2, [pc, #620]	; (800cbf0 <HAL_UART_MspInit+0x294>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d100      	bne.n	800c988 <HAL_UART_MspInit+0x2c>
 800c986:	e0eb      	b.n	800cb60 <HAL_UART_MspInit+0x204>
  else if(huart->Instance==USART5)
 800c988:	4a9a      	ldr	r2, [pc, #616]	; (800cbf4 <HAL_UART_MspInit+0x298>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d008      	beq.n	800c9a0 <HAL_UART_MspInit+0x44>
  else if(huart->Instance==USART6)
 800c98e:	4a9a      	ldr	r2, [pc, #616]	; (800cbf8 <HAL_UART_MspInit+0x29c>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d100      	bne.n	800c996 <HAL_UART_MspInit+0x3a>
 800c994:	e105      	b.n	800cba2 <HAL_UART_MspInit+0x246>
}
 800c996:	b00f      	add	sp, #60	; 0x3c
 800c998:	bc0c      	pop	{r2, r3}
 800c99a:	4690      	mov	r8, r2
 800c99c:	4699      	mov	r9, r3
 800c99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART5_CLK_ENABLE();
 800c9a0:	2080      	movs	r0, #128	; 0x80
 800c9a2:	4a96      	ldr	r2, [pc, #600]	; (800cbfc <HAL_UART_MspInit+0x2a0>)
 800c9a4:	0340      	lsls	r0, r0, #13
 800c9a6:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9a8:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800c9aa:	4301      	orrs	r1, r0
 800c9ac:	61d1      	str	r1, [r2, #28]
 800c9ae:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9b0:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800c9b2:	4003      	ands	r3, r0
 800c9b4:	9307      	str	r3, [sp, #28]
 800c9b6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c9b8:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800c9ba:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800c9bc:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800c9be:	a909      	add	r1, sp, #36	; 0x24
 800c9c0:	488f      	ldr	r0, [pc, #572]	; (800cc00 <HAL_UART_MspInit+0x2a4>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800c9c2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9c4:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9c6:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c9c8:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART5_AF;	
 800c9ca:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800c9cc:	f003 fc02 	bl	80101d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800c9d0:	2310      	movs	r3, #16
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800c9d2:	488b      	ldr	r0, [pc, #556]	; (800cc00 <HAL_UART_MspInit+0x2a4>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800c9d4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9d6:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9d8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c9da:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART5_AF;
 800c9dc:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800c9de:	a909      	add	r1, sp, #36	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800c9e0:	f003 fbf8 	bl	80101d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	201d      	movs	r0, #29
 800c9ea:	f002 fc09 	bl	800f200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c9ee:	201d      	movs	r0, #29
 800c9f0:	f002 fc32 	bl	800f258 <HAL_NVIC_EnableIRQ>
}
 800c9f4:	e7cf      	b.n	800c996 <HAL_UART_MspInit+0x3a>
    __USART1_CLK_ENABLE();
 800c9f6:	2680      	movs	r6, #128	; 0x80
 800c9f8:	4d80      	ldr	r5, [pc, #512]	; (800cbfc <HAL_UART_MspInit+0x2a0>)
 800c9fa:	01f6      	lsls	r6, r6, #7
 800c9fc:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800c9fe:	2090      	movs	r0, #144	; 0x90
    __USART1_CLK_ENABLE();
 800ca00:	4333      	orrs	r3, r6
 800ca02:	61ab      	str	r3, [r5, #24]
 800ca04:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca06:	2701      	movs	r7, #1
    __USART1_CLK_ENABLE();
 800ca08:	4033      	ands	r3, r6
 800ca0a:	9301      	str	r3, [sp, #4]
 800ca0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800ca0e:	2380      	movs	r3, #128	; 0x80
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca14:	3bff      	subs	r3, #255	; 0xff
 800ca16:	3bff      	subs	r3, #255	; 0xff
 800ca18:	4699      	mov	r9, r3
 800ca1a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800ca1c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca1e:	3301      	adds	r3, #1
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800ca20:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca22:	4698      	mov	r8, r3
 800ca24:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca26:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = USART1_AF;	
 800ca28:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800ca2a:	f003 fbd3 	bl	80101d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART1_RX_PIN;
 800ca2e:	2380      	movs	r3, #128	; 0x80
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca34:	464b      	mov	r3, r9
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800ca36:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca38:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca3a:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800ca3c:	a909      	add	r1, sp, #36	; 0x24
 800ca3e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca40:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca42:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = USART1_AF;
 800ca44:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800ca46:	f003 fbc5 	bl	80101d4 <HAL_GPIO_Init>
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca4a:	2180      	movs	r1, #128	; 0x80
       __HAL_RCC_USART1_CLK_ENABLE();
 800ca4c:	69ab      	ldr	r3, [r5, #24]
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca4e:	0289      	lsls	r1, r1, #10
       __HAL_RCC_USART1_CLK_ENABLE();
 800ca50:	4333      	orrs	r3, r6
 800ca52:	61ab      	str	r3, [r5, #24]
 800ca54:	69ab      	ldr	r3, [r5, #24]
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca56:	2090      	movs	r0, #144	; 0x90
       __HAL_RCC_USART1_CLK_ENABLE();
 800ca58:	401e      	ands	r6, r3
 800ca5a:	9602      	str	r6, [sp, #8]
 800ca5c:	9b02      	ldr	r3, [sp, #8]
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca5e:	696a      	ldr	r2, [r5, #20]
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca60:	2600      	movs	r6, #0
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca62:	430a      	orrs	r2, r1
 800ca64:	616a      	str	r2, [r5, #20]
 800ca66:	696b      	ldr	r3, [r5, #20]
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca68:	05c0      	lsls	r0, r0, #23
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca6a:	400b      	ands	r3, r1
 800ca6c:	9303      	str	r3, [sp, #12]
 800ca6e:	9b03      	ldr	r3, [sp, #12]
       GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ca70:	23c0      	movs	r3, #192	; 0xc0
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	9309      	str	r3, [sp, #36]	; 0x24
       GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca76:	464b      	mov	r3, r9
 800ca78:	930a      	str	r3, [sp, #40]	; 0x28
       GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca7a:	4643      	mov	r3, r8
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca7c:	a909      	add	r1, sp, #36	; 0x24
       GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca7e:	930c      	str	r3, [sp, #48]	; 0x30
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca80:	960b      	str	r6, [sp, #44]	; 0x2c
       GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800ca82:	970d      	str	r7, [sp, #52]	; 0x34
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca84:	f003 fba6 	bl	80101d4 <HAL_GPIO_Init>
       hdma_usart1_rx.Instance = DMA1_Channel1;
 800ca88:	4d5e      	ldr	r5, [pc, #376]	; (800cc04 <HAL_UART_MspInit+0x2a8>)
 800ca8a:	4b5f      	ldr	r3, [pc, #380]	; (800cc08 <HAL_UART_MspInit+0x2ac>)
       HAL_DMA_Init(&hdma_usart1_rx);
 800ca8c:	0028      	movs	r0, r5
       hdma_usart1_rx.Instance = DMA1_Channel1;
 800ca8e:	602b      	str	r3, [r5, #0]
       hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca90:	2380      	movs	r3, #128	; 0x80
 800ca92:	60eb      	str	r3, [r5, #12]
       hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800ca94:	3b60      	subs	r3, #96	; 0x60
 800ca96:	61ab      	str	r3, [r5, #24]
       hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca98:	606e      	str	r6, [r5, #4]
       hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca9a:	60ae      	str	r6, [r5, #8]
       hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca9c:	612e      	str	r6, [r5, #16]
       hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca9e:	616e      	str	r6, [r5, #20]
       hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800caa0:	61ee      	str	r6, [r5, #28]
       HAL_DMA_Init(&hdma_usart1_rx);
 800caa2:	f002 fd35 	bl	800f510 <HAL_DMA_Init>
       __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800caa6:	23a8      	movs	r3, #168	; 0xa8
 800caa8:	200f      	movs	r0, #15
 800caaa:	4a58      	ldr	r2, [pc, #352]	; (800cc0c <HAL_UART_MspInit+0x2b0>)
 800caac:	58d1      	ldr	r1, [r2, r3]
 800caae:	4381      	bics	r1, r0
 800cab0:	50d1      	str	r1, [r2, r3]
 800cab2:	58d1      	ldr	r1, [r2, r3]
 800cab4:	3807      	subs	r0, #7
 800cab6:	4301      	orrs	r1, r0
 800cab8:	50d1      	str	r1, [r2, r3]
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800caba:	3013      	adds	r0, #19
       __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800cabc:	6665      	str	r5, [r4, #100]	; 0x64
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800cabe:	2200      	movs	r2, #0
 800cac0:	2101      	movs	r1, #1
       __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800cac2:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800cac4:	f002 fb9c 	bl	800f200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cac8:	201b      	movs	r0, #27
 800caca:	f002 fbc5 	bl	800f258 <HAL_NVIC_EnableIRQ>
 800cace:	e762      	b.n	800c996 <HAL_UART_MspInit+0x3a>
    __USART2_CLK_ENABLE();
 800cad0:	2080      	movs	r0, #128	; 0x80
 800cad2:	4a4a      	ldr	r2, [pc, #296]	; (800cbfc <HAL_UART_MspInit+0x2a0>)
 800cad4:	0280      	lsls	r0, r0, #10
 800cad6:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cad8:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800cada:	4301      	orrs	r1, r0
 800cadc:	61d1      	str	r1, [r2, #28]
 800cade:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cae0:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800cae2:	4003      	ands	r3, r0
 800cae4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cae6:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800cae8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800caea:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800caec:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800caee:	a909      	add	r1, sp, #36	; 0x24
 800caf0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800caf2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caf4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800caf6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800caf8:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART2_AF;	
 800cafa:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800cafc:	f003 fb6a 	bl	80101d4 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cb00:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800cb02:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cb04:	a909      	add	r1, sp, #36	; 0x24
 800cb06:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800cb08:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb0a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb0c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb0e:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART2_AF;
 800cb10:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800cb12:	f003 fb5f 	bl	80101d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800cb16:	2200      	movs	r2, #0
 800cb18:	2101      	movs	r1, #1
 800cb1a:	201c      	movs	r0, #28
 800cb1c:	f002 fb70 	bl	800f200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cb20:	201c      	movs	r0, #28
 800cb22:	f002 fb99 	bl	800f258 <HAL_NVIC_EnableIRQ>
 800cb26:	e736      	b.n	800c996 <HAL_UART_MspInit+0x3a>
    __USART3_CLK_ENABLE();
 800cb28:	2080      	movs	r0, #128	; 0x80
 800cb2a:	4a34      	ldr	r2, [pc, #208]	; (800cbfc <HAL_UART_MspInit+0x2a0>)
 800cb2c:	02c0      	lsls	r0, r0, #11
 800cb2e:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb30:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800cb32:	4301      	orrs	r1, r0
 800cb34:	61d1      	str	r1, [r2, #28]
 800cb36:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb38:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800cb3a:	4003      	ands	r3, r0
 800cb3c:	9305      	str	r3, [sp, #20]
 800cb3e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cb40:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb42:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cb44:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cb46:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cb48:	a909      	add	r1, sp, #36	; 0x24
 800cb4a:	482d      	ldr	r0, [pc, #180]	; (800cc00 <HAL_UART_MspInit+0x2a4>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800cb4c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb4e:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb50:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb52:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART3_AF;	
 800cb54:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800cb56:	f003 fb3d 	bl	80101d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800cb5a:	2380      	movs	r3, #128	; 0x80
 800cb5c:	011b      	lsls	r3, r3, #4
 800cb5e:	e738      	b.n	800c9d2 <HAL_UART_MspInit+0x76>
    __USART4_CLK_ENABLE();
 800cb60:	2080      	movs	r0, #128	; 0x80
 800cb62:	4a26      	ldr	r2, [pc, #152]	; (800cbfc <HAL_UART_MspInit+0x2a0>)
 800cb64:	0300      	lsls	r0, r0, #12
 800cb66:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800cb68:	2401      	movs	r4, #1
    __USART4_CLK_ENABLE();
 800cb6a:	4301      	orrs	r1, r0
 800cb6c:	61d1      	str	r1, [r2, #28]
 800cb6e:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb70:	2502      	movs	r5, #2
    __USART4_CLK_ENABLE();
 800cb72:	4003      	ands	r3, r0
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cb74:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb76:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = USART4_AF;	
 800cb78:	2604      	movs	r6, #4
    __USART4_CLK_ENABLE();
 800cb7a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cb7c:	a909      	add	r1, sp, #36	; 0x24
 800cb7e:	05c0      	lsls	r0, r0, #23
    __USART4_CLK_ENABLE();
 800cb80:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800cb82:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb84:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb86:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb88:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART4_AF;	
 800cb8a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800cb8c:	f003 fb22 	bl	80101d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800cb90:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb92:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb94:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb96:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART4_AF;
 800cb98:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800cb9a:	2090      	movs	r0, #144	; 0x90
 800cb9c:	a909      	add	r1, sp, #36	; 0x24
 800cb9e:	05c0      	lsls	r0, r0, #23
 800cba0:	e71e      	b.n	800c9e0 <HAL_UART_MspInit+0x84>
    __USART6_CLK_ENABLE();
 800cba2:	2420      	movs	r4, #32
 800cba4:	4b15      	ldr	r3, [pc, #84]	; (800cbfc <HAL_UART_MspInit+0x2a0>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cba6:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800cba8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbaa:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800cbac:	4322      	orrs	r2, r4
 800cbae:	619a      	str	r2, [r3, #24]
 800cbb0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbb2:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800cbb4:	4023      	ands	r3, r4
 800cbb6:	9308      	str	r3, [sp, #32]
 800cbb8:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800cbba:	2310      	movs	r3, #16
 800cbbc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbbe:	3b0e      	subs	r3, #14
 800cbc0:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800cbc2:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cbc4:	a909      	add	r1, sp, #36	; 0x24
 800cbc6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbc8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbca:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbcc:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART6_AF;	
 800cbce:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800cbd0:	f003 fb00 	bl	80101d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbd4:	4643      	mov	r3, r8
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800cbd6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbd8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbda:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbdc:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = USART6_AF;
 800cbde:	950d      	str	r5, [sp, #52]	; 0x34
 800cbe0:	e7db      	b.n	800cb9a <HAL_UART_MspInit+0x23e>
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	40013800 	.word	0x40013800
 800cbe8:	40004400 	.word	0x40004400
 800cbec:	40004800 	.word	0x40004800
 800cbf0:	40004c00 	.word	0x40004c00
 800cbf4:	40005000 	.word	0x40005000
 800cbf8:	40011400 	.word	0x40011400
 800cbfc:	40021000 	.word	0x40021000
 800cc00:	48000400 	.word	0x48000400
 800cc04:	20006d0c 	.word	0x20006d0c
 800cc08:	40020008 	.word	0x40020008
 800cc0c:	40020000 	.word	0x40020000

0800cc10 <writePxMutex>:
{
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	4647      	mov	r7, r8
 800cc14:	46ce      	mov	lr, r9
 800cc16:	b580      	push	{r7, lr}
 800cc18:	0017      	movs	r7, r2
 800cc1a:	1e42      	subs	r2, r0, #1
 800cc1c:	b2d2      	uxtb	r2, r2
 800cc1e:	000e      	movs	r6, r1
 800cc20:	2a04      	cmp	r2, #4
 800cc22:	d80e      	bhi.n	800cc42 <writePxMutex+0x32>
 800cc24:	4911      	ldr	r1, [pc, #68]	; (800cc6c <writePxMutex+0x5c>)
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	5852      	ldr	r2, [r2, r1]
 800cc2a:	4690      	mov	r8, r2
	if (GetUart(port) != NULL) {
 800cc2c:	2a00      	cmp	r2, #0
 800cc2e:	d008      	beq.n	800cc42 <writePxMutex+0x32>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cc30:	4a0f      	ldr	r2, [pc, #60]	; (800cc70 <writePxMutex+0x60>)
 800cc32:	0085      	lsls	r5, r0, #2
 800cc34:	0019      	movs	r1, r3
 800cc36:	5950      	ldr	r0, [r2, r5]
 800cc38:	4691      	mov	r9, r2
 800cc3a:	f000 f9c5 	bl	800cfc8 <osSemaphoreWait>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d007      	beq.n	800cc52 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800cc42:	2401      	movs	r4, #1
}
 800cc44:	0020      	movs	r0, r4
 800cc46:	bc0c      	pop	{r2, r3}
 800cc48:	4690      	mov	r8, r2
 800cc4a:	4699      	mov	r9, r3
 800cc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cc4e:	2803      	cmp	r0, #3
 800cc50:	d007      	beq.n	800cc62 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	003a      	movs	r2, r7
 800cc56:	0031      	movs	r1, r6
 800cc58:	4640      	mov	r0, r8
 800cc5a:	f004 fe95 	bl	8011988 <HAL_UART_Transmit>
 800cc5e:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800cc60:	d1f5      	bne.n	800cc4e <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800cc62:	464b      	mov	r3, r9
 800cc64:	5958      	ldr	r0, [r3, r5]
 800cc66:	f000 f9d9 	bl	800d01c <osSemaphoreRelease>
 800cc6a:	e7eb      	b.n	800cc44 <writePxMutex+0x34>
 800cc6c:	080170b8 	.word	0x080170b8
 800cc70:	200068c8 	.word	0x200068c8

0800cc74 <writePxITMutex>:
{
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	0015      	movs	r5, r2
 800cc78:	1e42      	subs	r2, r0, #1
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	000c      	movs	r4, r1
 800cc7e:	2a04      	cmp	r2, #4
 800cc80:	d80c      	bhi.n	800cc9c <writePxITMutex+0x28>
 800cc82:	490a      	ldr	r1, [pc, #40]	; (800ccac <writePxITMutex+0x38>)
 800cc84:	0092      	lsls	r2, r2, #2
 800cc86:	5856      	ldr	r6, [r2, r1]
	if (GetUart(port) != NULL) {	
 800cc88:	2e00      	cmp	r6, #0
 800cc8a:	d007      	beq.n	800cc9c <writePxITMutex+0x28>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800cc8c:	4a08      	ldr	r2, [pc, #32]	; (800ccb0 <writePxITMutex+0x3c>)
 800cc8e:	0080      	lsls	r0, r0, #2
 800cc90:	5880      	ldr	r0, [r0, r2]
 800cc92:	0019      	movs	r1, r3
 800cc94:	f000 f998 	bl	800cfc8 <osSemaphoreWait>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d001      	beq.n	800cca0 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800cc9c:	2001      	movs	r0, #1
}
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800cca0:	002a      	movs	r2, r5
 800cca2:	0021      	movs	r1, r4
 800cca4:	0030      	movs	r0, r6
 800cca6:	f004 fbc5 	bl	8011434 <HAL_UART_Transmit_IT>
 800ccaa:	e7f8      	b.n	800cc9e <writePxITMutex+0x2a>
 800ccac:	080170b8 	.word	0x080170b8
 800ccb0:	200068c8 	.word	0x200068c8

0800ccb4 <UpdateBaudrate>:
{
 800ccb4:	3801      	subs	r0, #1
 800ccb6:	b2c0      	uxtb	r0, r0
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	2804      	cmp	r0, #4
 800ccbc:	d807      	bhi.n	800ccce <UpdateBaudrate+0x1a>
 800ccbe:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <UpdateBaudrate+0x20>)
 800ccc0:	0080      	lsls	r0, r0, #2
 800ccc2:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800ccc4:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800ccc6:	f004 ff01 	bl	8011acc <HAL_UART_Init>
}
 800ccca:	2000      	movs	r0, #0
 800cccc:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	605b      	str	r3, [r3, #4]
 800ccd2:	deff      	udf	#255	; 0xff
 800ccd4:	080170b8 	.word	0x080170b8

0800ccd8 <GetUart>:
{
 800ccd8:	3801      	subs	r0, #1
 800ccda:	b2c3      	uxtb	r3, r0
 800ccdc:	2000      	movs	r0, #0
 800ccde:	2b04      	cmp	r3, #4
 800cce0:	d802      	bhi.n	800cce8 <GetUart+0x10>
 800cce2:	4a02      	ldr	r2, [pc, #8]	; (800ccec <GetUart+0x14>)
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	5898      	ldr	r0, [r3, r2]
}
 800cce8:	4770      	bx	lr
 800ccea:	46c0      	nop			; (mov r8, r8)
 800ccec:	080170b8 	.word	0x080170b8

0800ccf0 <SwapUartPins>:
{
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	0004      	movs	r4, r0
 800ccf4:	000d      	movs	r5, r1
	if (huart != NULL) {
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d003      	beq.n	800cd02 <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800ccfa:	2901      	cmp	r1, #1
 800ccfc:	d017      	beq.n	800cd2e <SwapUartPins+0x3e>
		} else if (direction == NORMAL) {
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	d000      	beq.n	800cd04 <SwapUartPins+0x14>
}
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cd04:	f7fc ffd0 	bl	8009ca8 <GetPort>
 800cd08:	2180      	movs	r1, #128	; 0x80
 800cd0a:	3801      	subs	r0, #1
 800cd0c:	0209      	lsls	r1, r1, #8
 800cd0e:	4101      	asrs	r1, r0
 800cd10:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <SwapUartPins+0x44>)
 800cd12:	4e09      	ldr	r6, [pc, #36]	; (800cd38 <SwapUartPins+0x48>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800cd16:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800cd1e:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800cd20:	438a      	bics	r2, r1
 800cd22:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cd24:	2308      	movs	r3, #8
 800cd26:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800cd28:	f004 fed0 	bl	8011acc <HAL_UART_Init>
}
 800cd2c:	e7e9      	b.n	800cd02 <SwapUartPins+0x12>
 800cd2e:	f7ff fd67 	bl	800c800 <SwapUartPins.part.0>
 800cd32:	e7e6      	b.n	800cd02 <SwapUartPins+0x12>
 800cd34:	20000a98 	.word	0x20000a98
 800cd38:	20006d44 	.word	0x20006d44

0800cd3c <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800cd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd3e:	46c6      	mov	lr, r8
 800cd40:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800cd42:	4d12      	ldr	r5, [pc, #72]	; (800cd8c <ReadPortsDir+0x50>)
 800cd44:	782b      	ldrb	r3, [r5, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d01d      	beq.n	800cd86 <ReadPortsDir+0x4a>
	BOS_Status result = BOS_OK;
 800cd4a:	2300      	movs	r3, #0
	for (uint8_t i = 1; i <= N; i++) {
 800cd4c:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800cd4e:	4698      	mov	r8, r3
 800cd50:	4e0f      	ldr	r6, [pc, #60]	; (800cd90 <ReadPortsDir+0x54>)
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800cd52:	4f10      	ldr	r7, [pc, #64]	; (800cd94 <ReadPortsDir+0x58>)
		if (i != myID) {
 800cd54:	7833      	ldrb	r3, [r6, #0]
 800cd56:	42a3      	cmp	r3, r4
 800cd58:	d00c      	beq.n	800cd74 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2113      	movs	r1, #19
 800cd5e:	0020      	movs	r0, r4
 800cd60:	f7fb f9dc 	bl	800811c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800cd64:	2032      	movs	r0, #50	; 0x32
 800cd66:	f7ff fd39 	bl	800c7dc <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800cd6a:	783b      	ldrb	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d001      	beq.n	800cd74 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800cd70:	2302      	movs	r3, #2
 800cd72:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800cd74:	3401      	adds	r4, #1
 800cd76:	782b      	ldrb	r3, [r5, #0]
 800cd78:	b2e4      	uxtb	r4, r4
 800cd7a:	42a3      	cmp	r3, r4
 800cd7c:	d2ea      	bcs.n	800cd54 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800cd7e:	4640      	mov	r0, r8
 800cd80:	bc04      	pop	{r2}
 800cd82:	4690      	mov	r8, r2
 800cd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result = BOS_OK;
 800cd86:	2300      	movs	r3, #0
 800cd88:	4698      	mov	r8, r3
 800cd8a:	e7f8      	b.n	800cd7e <ReadPortsDir+0x42>
 800cd8c:	20000008 	.word	0x20000008
 800cd90:	20000a98 	.word	0x20000a98
 800cd94:	20000c3c 	.word	0x20000c3c

0800cd98 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800cd9a:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cd9c:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800cd9e:	490f      	ldr	r1, [pc, #60]	; (800cddc <ReadPortsDirMSG+0x44>)
	uint16_t temp =0;
 800cda0:	2200      	movs	r2, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cda2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cda4:	022d      	lsls	r5, r5, #8
			messageParams[temp++] = p;
 800cda6:	4f0e      	ldr	r7, [pc, #56]	; (800cde0 <ReadPortsDirMSG+0x48>)
 800cda8:	4e0e      	ldr	r6, [pc, #56]	; (800cde4 <ReadPortsDirMSG+0x4c>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cdaa:	b2dc      	uxtb	r4, r3
 800cdac:	42a9      	cmp	r1, r5
 800cdae:	d102      	bne.n	800cdb6 <ReadPortsDirMSG+0x1e>
			messageParams[temp++] = p;
 800cdb0:	1c51      	adds	r1, r2, #1
 800cdb2:	54bc      	strb	r4, [r7, r2]
 800cdb4:	b28a      	uxth	r2, r1
	for (int p = 1; p <= NumOfPorts; p++) {
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	2b06      	cmp	r3, #6
 800cdba:	d009      	beq.n	800cdd0 <ReadPortsDirMSG+0x38>
 800cdbc:	0099      	lsls	r1, r3, #2
 800cdbe:	3904      	subs	r1, #4
 800cdc0:	5871      	ldr	r1, [r6, r1]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800cdc2:	b2dc      	uxtb	r4, r3
 800cdc4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cdc6:	42a9      	cmp	r1, r5
 800cdc8:	d0f2      	beq.n	800cdb0 <ReadPortsDirMSG+0x18>
	for (int p = 1; p <= NumOfPorts; p++) {
 800cdca:	3301      	adds	r3, #1
 800cdcc:	2b06      	cmp	r3, #6
 800cdce:	d1f5      	bne.n	800cdbc <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800cdd0:	2114      	movs	r1, #20
 800cdd2:	f7fb f9a3 	bl	800811c <SendMessageToModule>
	return result;
}
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdda:	46c0      	nop			; (mov r8, r8)
 800cddc:	20006b94 	.word	0x20006b94
 800cde0:	20000b3c 	.word	0x20000b3c
 800cde4:	080170b8 	.word	0x080170b8

0800cde8 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdea:	46c6      	mov	lr, r8
 800cdec:	4b12      	ldr	r3, [pc, #72]	; (800ce38 <UpdateMyPortsDir+0x50>)
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cdee:	2580      	movs	r5, #128	; 0x80
{
 800cdf0:	2400      	movs	r4, #0
 800cdf2:	4698      	mov	r8, r3
 800cdf4:	b500      	push	{lr}
 800cdf6:	4811      	ldr	r0, [pc, #68]	; (800ce3c <UpdateMyPortsDir+0x54>)
 800cdf8:	4f11      	ldr	r7, [pc, #68]	; (800ce40 <UpdateMyPortsDir+0x58>)
 800cdfa:	4e12      	ldr	r6, [pc, #72]	; (800ce44 <UpdateMyPortsDir+0x5c>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800cdfc:	022d      	lsls	r5, r5, #8
 800cdfe:	002a      	movs	r2, r5
 800ce00:	4122      	asrs	r2, r4
 800ce02:	7833      	ldrb	r3, [r6, #0]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	5afb      	ldrh	r3, [r7, r3]
 800ce0a:	421a      	tst	r2, r3
 800ce0c:	d00a      	beq.n	800ce24 <UpdateMyPortsDir+0x3c>
	if (huart != NULL) {
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d001      	beq.n	800ce16 <UpdateMyPortsDir+0x2e>
 800ce12:	f7ff fcf5 	bl	800c800 <SwapUartPins.part.0>
 800ce16:	3401      	adds	r4, #1
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800ce18:	2c05      	cmp	r4, #5
 800ce1a:	d009      	beq.n	800ce30 <UpdateMyPortsDir+0x48>
 800ce1c:	4642      	mov	r2, r8
 800ce1e:	00a3      	lsls	r3, r4, #2
 800ce20:	5898      	ldr	r0, [r3, r2]
 800ce22:	e7ec      	b.n	800cdfe <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
 800ce24:	2100      	movs	r1, #0
 800ce26:	3401      	adds	r4, #1
 800ce28:	f7ff ff62 	bl	800ccf0 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800ce2c:	2c05      	cmp	r4, #5
 800ce2e:	d1f5      	bne.n	800ce1c <UpdateMyPortsDir+0x34>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800ce30:	2000      	movs	r0, #0
 800ce32:	bc04      	pop	{r2}
 800ce34:	4690      	mov	r8, r2
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce38:	080170b8 	.word	0x080170b8
 800ce3c:	20006b94 	.word	0x20006b94
 800ce40:	20006d44 	.word	0x20006d44
 800ce44:	20000a98 	.word	0x20000a98

0800ce48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ce48:	4816      	ldr	r0, [pc, #88]	; (800cea4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ce4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800ce4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800ce4e:	e003      	b.n	800ce58 <LoopCopyDataInit>

0800ce50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800ce50:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800ce52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800ce54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800ce56:	3104      	adds	r1, #4

0800ce58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800ce58:	4814      	ldr	r0, [pc, #80]	; (800ceac <LoopForever+0xc>)
  ldr r3, =_edata
 800ce5a:	4b15      	ldr	r3, [pc, #84]	; (800ceb0 <LoopForever+0x10>)
  adds r2, r0, r1
 800ce5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800ce5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800ce60:	d3f6      	bcc.n	800ce50 <CopyDataInit>
  ldr r2, =_sbss
 800ce62:	4a14      	ldr	r2, [pc, #80]	; (800ceb4 <LoopForever+0x14>)
  b LoopFillZerobss
 800ce64:	e002      	b.n	800ce6c <LoopFillZerobss>

0800ce66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ce66:	2300      	movs	r3, #0
  str  r3, [r2]
 800ce68:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ce6a:	3204      	adds	r2, #4

0800ce6c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800ce6c:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <LoopForever+0x18>)
  cmp r2, r3
 800ce6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800ce70:	d3f9      	bcc.n	800ce66 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ce72:	4812      	ldr	r0, [pc, #72]	; (800cebc <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800ce74:	4912      	ldr	r1, [pc, #72]	; (800cec0 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800ce76:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800ce78:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800ce7a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800ce7c:	d005      	beq.n	800ce8a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800ce7e:	f000 f82b 	bl	800ced8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800ce82:	f004 ffc5 	bl	8011e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ce86:	f004 ff6b 	bl	8011d60 <main>

0800ce8a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ce8a:	480e      	ldr	r0, [pc, #56]	; (800cec4 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ce8c:	490e      	ldr	r1, [pc, #56]	; (800cec8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ce8e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ce90:	480e      	ldr	r0, [pc, #56]	; (800cecc <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800ce92:	490d      	ldr	r1, [pc, #52]	; (800cec8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ce94:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ce96:	480e      	ldr	r0, [pc, #56]	; (800ced0 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800ce98:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800ce9a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800ce9c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800ce9e:	4700      	bx	r0

0800cea0 <LoopForever>:


LoopForever:
    b LoopForever
 800cea0:	e7fe      	b.n	800cea0 <LoopForever>
 800cea2:	0000      	.short	0x0000
  ldr   r0, =_estack
 800cea4:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800cea8:	08019ce0 	.word	0x08019ce0
  ldr r0, =_sdata
 800ceac:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800ceb0:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800ceb4:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800ceb8:	20006dec 	.word	0x20006dec
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800cebc:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800cec0:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800cec4:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800cec8:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800cecc:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ced0:	1fffd800 	.word	0x1fffd800

0800ced4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ced4:	e7fe      	b.n	800ced4 <ADC1_COMP_IRQHandler>
	...

0800ced8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ced8:	2101      	movs	r1, #1
 800ceda:	4b11      	ldr	r3, [pc, #68]	; (800cf20 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cedc:	4811      	ldr	r0, [pc, #68]	; (800cf24 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	430a      	orrs	r2, r1
 800cee2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	4002      	ands	r2, r0
 800cee8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	480e      	ldr	r0, [pc, #56]	; (800cf28 <SystemInit+0x50>)
 800ceee:	4002      	ands	r2, r0
 800cef0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	480d      	ldr	r0, [pc, #52]	; (800cf2c <SystemInit+0x54>)
 800cef6:	4002      	ands	r2, r0
 800cef8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	480c      	ldr	r0, [pc, #48]	; (800cf30 <SystemInit+0x58>)
 800cefe:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800cf00:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800cf02:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800cf04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf06:	4382      	bics	r2, r0
 800cf08:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800cf0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf0c:	4809      	ldr	r0, [pc, #36]	; (800cf34 <SystemInit+0x5c>)
 800cf0e:	4002      	ands	r2, r0
 800cf10:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800cf12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf14:	438a      	bics	r2, r1
 800cf16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cf18:	2200      	movs	r2, #0
 800cf1a:	609a      	str	r2, [r3, #8]

}
 800cf1c:	4770      	bx	lr
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	40021000 	.word	0x40021000
 800cf24:	08ffb80c 	.word	0x08ffb80c
 800cf28:	fef6ffff 	.word	0xfef6ffff
 800cf2c:	fffbffff 	.word	0xfffbffff
 800cf30:	ffc0ffff 	.word	0xffc0ffff
 800cf34:	fff0feac 	.word	0xfff0feac

0800cf38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cf38:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800cf3a:	f000 fef9 	bl	800dd30 <vTaskStartScheduler>
  
  return osOK;
}
 800cf3e:	2000      	movs	r0, #0
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	46c0      	nop			; (mov r8, r8)

0800cf44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cf44:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d100      	bne.n	800cf4c <osDelay+0x8>
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	f001 f814 	bl	800df78 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cf50:	2000      	movs	r0, #0
 800cf52:	bd10      	pop	{r4, pc}

0800cf54 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800cf54:	2300      	movs	r3, #0
{
 800cf56:	b500      	push	{lr}
 800cf58:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800cf5a:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf5c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00a      	beq.n	800cf7a <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cf64:	a901      	add	r1, sp, #4
 800cf66:	f000 fb95 	bl	800d694 <xQueueGiveFromISR>
 800cf6a:	2801      	cmp	r0, #1
 800cf6c:	d10c      	bne.n	800cf88 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10b      	bne.n	800cf8c <osMutexRelease+0x38>
  osStatus result = osOK;
 800cf74:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800cf76:	b003      	add	sp, #12
 800cf78:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2100      	movs	r1, #0
 800cf80:	f000 fad4 	bl	800d52c <xQueueGenericSend>
 800cf84:	2801      	cmp	r0, #1
 800cf86:	d0f5      	beq.n	800cf74 <osMutexRelease+0x20>
    result = osErrorOS;
 800cf88:	20ff      	movs	r0, #255	; 0xff
 800cf8a:	e7f4      	b.n	800cf76 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800cf8c:	2280      	movs	r2, #128	; 0x80
 800cf8e:	4b02      	ldr	r3, [pc, #8]	; (800cf98 <osMutexRelease+0x44>)
 800cf90:	0552      	lsls	r2, r2, #21
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	e7ee      	b.n	800cf74 <osMutexRelease+0x20>
 800cf96:	46c0      	nop			; (mov r8, r8)
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800cfa0:	2901      	cmp	r1, #1
 800cfa2:	d005      	beq.n	800cfb0 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	f000 fab7 	bl	800d518 <xQueueCreateCountingSemaphore>
 800cfaa:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800cfac:	0020      	movs	r0, r4
 800cfae:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800cfb0:	2203      	movs	r2, #3
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	f000 fa8e 	bl	800d4d4 <xQueueGenericCreate>
 800cfb8:	1e04      	subs	r4, r0, #0
 800cfba:	d0f7      	beq.n	800cfac <osSemaphoreCreate+0x10>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	f000 fab3 	bl	800d52c <xQueueGenericSend>
 800cfc6:	e7f1      	b.n	800cfac <osSemaphoreCreate+0x10>

0800cfc8 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cfc8:	2300      	movs	r3, #0
{
 800cfca:	b500      	push	{lr}
 800cfcc:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800cfce:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d01e      	beq.n	800d012 <osSemaphoreWait+0x4a>
 800cfd4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00b      	beq.n	800cff4 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cfdc:	aa01      	add	r2, sp, #4
 800cfde:	2100      	movs	r1, #0
 800cfe0:	f000 fc1e 	bl	800d820 <xQueueReceiveFromISR>
 800cfe4:	2801      	cmp	r0, #1
 800cfe6:	d10c      	bne.n	800d002 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cfe8:	9b01      	ldr	r3, [sp, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10b      	bne.n	800d006 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800cfee:	2000      	movs	r0, #0
}
 800cff0:	b003      	add	sp, #12
 800cff2:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cff4:	000a      	movs	r2, r1
 800cff6:	2300      	movs	r3, #0
 800cff8:	2100      	movs	r1, #0
 800cffa:	f000 fb75 	bl	800d6e8 <xQueueGenericReceive>
 800cffe:	2801      	cmp	r0, #1
 800d000:	d0f5      	beq.n	800cfee <osSemaphoreWait+0x26>
      return osErrorOS;
 800d002:	20ff      	movs	r0, #255	; 0xff
 800d004:	e7f4      	b.n	800cff0 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d006:	2280      	movs	r2, #128	; 0x80
 800d008:	4b03      	ldr	r3, [pc, #12]	; (800d018 <osSemaphoreWait+0x50>)
 800d00a:	0552      	lsls	r2, r2, #21
 800d00c:	601a      	str	r2, [r3, #0]
  return osOK;
 800d00e:	2000      	movs	r0, #0
 800d010:	e7ee      	b.n	800cff0 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d012:	2080      	movs	r0, #128	; 0x80
 800d014:	e7ec      	b.n	800cff0 <osSemaphoreWait+0x28>
 800d016:	46c0      	nop			; (mov r8, r8)
 800d018:	e000ed04 	.word	0xe000ed04

0800d01c <osSemaphoreRelease>:
 800d01c:	b510      	push	{r4, lr}
 800d01e:	f7ff ff99 	bl	800cf54 <osMutexRelease>
 800d022:	bd10      	pop	{r4, pc}

0800d024 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d024:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d026:	f001 f919 	bl	800e25c <xTaskGetSchedulerState>
 800d02a:	2801      	cmp	r0, #1
 800d02c:	d001      	beq.n	800d032 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d02e:	f001 fd27 	bl	800ea80 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d032:	bd10      	pop	{r4, pc}

0800d034 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	0006      	movs	r6, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d038:	2008      	movs	r0, #8
 800d03a:	f001 fd59 	bl	800eaf0 <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800d03e:	2500      	movs	r5, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d040:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800d042:	d00a      	beq.n	800d05a <FreeRTOS_CLIRegisterCommand+0x26>
	{
		taskENTER_CRITICAL();
 800d044:	f001 fcda 	bl	800e9fc <vPortEnterCritical>
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d048:	4b05      	ldr	r3, [pc, #20]	; (800d060 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800d04a:	6065      	str	r5, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d04c:	681a      	ldr	r2, [r3, #0]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d04e:	6026      	str	r6, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d050:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d052:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d054:	f001 fcde 	bl	800ea14 <vPortExitCritical>

		xReturn = pdPASS;
 800d058:	3501      	adds	r5, #1
	}

	return xReturn;
}
 800d05a:	0028      	movs	r0, r5
 800d05c:	bd70      	pop	{r4, r5, r6, pc}
 800d05e:	46c0      	nop			; (mov r8, r8)
 800d060:	200000b8 	.word	0x200000b8

0800d064 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	4657      	mov	r7, sl
 800d068:	46de      	mov	lr, fp
 800d06a:	464e      	mov	r6, r9
 800d06c:	4645      	mov	r5, r8
 800d06e:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d070:	4f34      	ldr	r7, [pc, #208]	; (800d144 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d072:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d074:	683b      	ldr	r3, [r7, #0]
{
 800d076:	468a      	mov	sl, r1
 800d078:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00e      	beq.n	800d09c <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	0032      	movs	r2, r6
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	4659      	mov	r1, fp
 800d086:	4650      	mov	r0, sl
 800d088:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d100      	bne.n	800d090 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d08e:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d090:	bc3c      	pop	{r2, r3, r4, r5}
 800d092:	4690      	mov	r8, r2
 800d094:	4699      	mov	r9, r3
 800d096:	46a2      	mov	sl, r4
 800d098:	46ab      	mov	fp, r5
 800d09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d09c:	3320      	adds	r3, #32
 800d09e:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d0a0:	4c29      	ldr	r4, [pc, #164]	; (800d148 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d0a2:	3404      	adds	r4, #4
 800d0a4:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	681d      	ldr	r5, [r3, #0]
 800d0aa:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d0ac:	0028      	movs	r0, r5
 800d0ae:	f7f3 f833 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d0b2:	464a      	mov	r2, r9
 800d0b4:	5c33      	ldrb	r3, [r6, r0]
 800d0b6:	4393      	bics	r3, r2
 800d0b8:	d106      	bne.n	800d0c8 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d0ba:	0002      	movs	r2, r0
 800d0bc:	0029      	movs	r1, r5
 800d0be:	0030      	movs	r0, r6
 800d0c0:	f005 fb70 	bl	80127a4 <strncmp>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d00a      	beq.n	800d0de <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d0c8:	6864      	ldr	r4, [r4, #4]
 800d0ca:	603c      	str	r4, [r7, #0]
 800d0cc:	2c00      	cmp	r4, #0
 800d0ce:	d1ea      	bne.n	800d0a6 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d0d0:	465a      	mov	r2, fp
 800d0d2:	491e      	ldr	r1, [pc, #120]	; (800d14c <FreeRTOS_CLIProcessCommand+0xe8>)
 800d0d4:	4650      	mov	r0, sl
 800d0d6:	f005 fb76 	bl	80127c6 <strncpy>
		xReturn = pdFALSE;
 800d0da:	2000      	movs	r0, #0
	return xReturn;
 800d0dc:	e7d8      	b.n	800d090 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d0de:	4643      	mov	r3, r8
 800d0e0:	250c      	movs	r5, #12
 800d0e2:	575d      	ldrsb	r5, [r3, r5]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2d00      	cmp	r5, #0
 800d0e8:	db26      	blt.n	800d138 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	56b2      	ldrsb	r2, [r6, r2]
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	d025      	beq.n	800d13e <FreeRTOS_CLIProcessCommand+0xda>
 800d0f2:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d0f4:	2400      	movs	r4, #0
 800d0f6:	e005      	b.n	800d104 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d0f8:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d0fa:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d0fc:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d0fe:	568a      	ldrsb	r2, [r1, r2]
 800d100:	2a00      	cmp	r2, #0
 800d102:	d007      	beq.n	800d114 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d104:	2a20      	cmp	r2, #32
 800d106:	d1f7      	bne.n	800d0f8 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d108:	2801      	cmp	r0, #1
 800d10a:	d0f6      	beq.n	800d0fa <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d10c:	3401      	adds	r4, #1
 800d10e:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d110:	2001      	movs	r0, #1
 800d112:	e7f2      	b.n	800d0fa <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d114:	2801      	cmp	r0, #1
 800d116:	d00c      	beq.n	800d132 <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d118:	42a5      	cmp	r5, r4
 800d11a:	d00d      	beq.n	800d138 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0d7      	beq.n	800d0d0 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d120:	465a      	mov	r2, fp
 800d122:	490b      	ldr	r1, [pc, #44]	; (800d150 <FreeRTOS_CLIProcessCommand+0xec>)
 800d124:	4650      	mov	r0, sl
 800d126:	f005 fb4e 	bl	80127c6 <strncpy>
		pxCommand = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	2000      	movs	r0, #0
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	e7ae      	b.n	800d090 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d132:	3c01      	subs	r4, #1
 800d134:	b264      	sxtb	r4, r4
 800d136:	e7ef      	b.n	800d118 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1a0      	bne.n	800d07e <FreeRTOS_CLIProcessCommand+0x1a>
 800d13c:	e7c8      	b.n	800d0d0 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d13e:	2400      	movs	r4, #0
 800d140:	e7ea      	b.n	800d118 <FreeRTOS_CLIProcessCommand+0xb4>
 800d142:	46c0      	nop			; (mov r8, r8)
 800d144:	20002450 	.word	0x20002450
 800d148:	200000b8 	.word	0x200000b8
 800d14c:	080198e8 	.word	0x080198e8
 800d150:	08019890 	.word	0x08019890

0800d154 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d154:	4800      	ldr	r0, [pc, #0]	; (800d158 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d156:	4770      	bx	lr
 800d158:	20002460 	.word	0x20002460

0800d15c <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d15c:	2300      	movs	r3, #0
{
 800d15e:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d160:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d162:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d164:	2900      	cmp	r1, #0
 800d166:	d021      	beq.n	800d1ac <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d168:	2300      	movs	r3, #0
 800d16a:	56c3      	ldrsb	r3, [r0, r3]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d105      	bne.n	800d17c <FreeRTOS_CLIGetParameter+0x20>
 800d170:	e01c      	b.n	800d1ac <FreeRTOS_CLIGetParameter+0x50>
 800d172:	2300      	movs	r3, #0
			pcCommandString++;
 800d174:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d176:	56c3      	ldrsb	r3, [r0, r3]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d017      	beq.n	800d1ac <FreeRTOS_CLIGetParameter+0x50>
 800d17c:	2b20      	cmp	r3, #32
 800d17e:	d1f8      	bne.n	800d172 <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d180:	2300      	movs	r3, #0
			pcCommandString++;
 800d182:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d184:	56c3      	ldrsb	r3, [r0, r3]
 800d186:	2b20      	cmp	r3, #32
 800d188:	d0fa      	beq.n	800d180 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00e      	beq.n	800d1ac <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d18e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d190:	42a1      	cmp	r1, r4
 800d192:	d1e9      	bne.n	800d168 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d194:	2120      	movs	r1, #32
 800d196:	7803      	ldrb	r3, [r0, #0]
 800d198:	438b      	bics	r3, r1
 800d19a:	d007      	beq.n	800d1ac <FreeRTOS_CLIGetParameter+0x50>
 800d19c:	2300      	movs	r3, #0
 800d19e:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d1a4:	5cc1      	ldrb	r1, [r0, r3]
 800d1a6:	43a1      	bics	r1, r4
 800d1a8:	d1fa      	bne.n	800d1a0 <FreeRTOS_CLIGetParameter+0x44>
 800d1aa:	e000      	b.n	800d1ae <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d1ac:	2000      	movs	r0, #0
}
 800d1ae:	bd10      	pop	{r4, pc}

0800d1b0 <prvHelpCommand>:
{
 800d1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1b2:	46ce      	mov	lr, r9
 800d1b4:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d1b6:	2300      	movs	r3, #0
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	0004      	movs	r4, r0
 800d1be:	000d      	movs	r5, r1
 800d1c0:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d1c6:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d1c8:	f7ff ffc8 	bl	800d15c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d024      	beq.n	800d21a <prvHelpCommand+0x6a>
 800d1d0:	2206      	movs	r2, #6
 800d1d2:	4931      	ldr	r1, [pc, #196]	; (800d298 <prvHelpCommand+0xe8>)
 800d1d4:	f005 fae6 	bl	80127a4 <strncmp>
 800d1d8:	1e07      	subs	r7, r0, #0
 800d1da:	d118      	bne.n	800d20e <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d1dc:	4b2f      	ldr	r3, [pc, #188]	; (800d29c <prvHelpCommand+0xec>)
 800d1de:	4698      	mov	r8, r3
 800d1e0:	791b      	ldrb	r3, [r3, #4]
 800d1e2:	2b07      	cmp	r3, #7
 800d1e4:	d047      	beq.n	800d276 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	b2d2      	uxtb	r2, r2
 800d1ea:	4691      	mov	r9, r2
 800d1ec:	4642      	mov	r2, r8
 800d1ee:	4649      	mov	r1, r9
 800d1f0:	7111      	strb	r1, [r2, #4]
 800d1f2:	4a2b      	ldr	r2, [pc, #172]	; (800d2a0 <prvHelpCommand+0xf0>)
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	5899      	ldr	r1, [r3, r2]
 800d1f8:	0020      	movs	r0, r4
 800d1fa:	002a      	movs	r2, r5
 800d1fc:	f005 fae3 	bl	80127c6 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d200:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d202:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d204:	2b07      	cmp	r3, #7
 800d206:	d102      	bne.n	800d20e <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d208:	4643      	mov	r3, r8
 800d20a:	2600      	movs	r6, #0
 800d20c:	711f      	strb	r7, [r3, #4]
}
 800d20e:	0030      	movs	r0, r6
 800d210:	b003      	add	sp, #12
 800d212:	bc0c      	pop	{r2, r3}
 800d214:	4690      	mov	r8, r2
 800d216:	4699      	mov	r9, r3
 800d218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d21a:	4f20      	ldr	r7, [pc, #128]	; (800d29c <prvHelpCommand+0xec>)
 800d21c:	68be      	ldr	r6, [r7, #8]
 800d21e:	2e00      	cmp	r6, #0
 800d220:	d020      	beq.n	800d264 <prvHelpCommand+0xb4>
 800d222:	7b3b      	ldrb	r3, [r7, #12]
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	4690      	mov	r8, r2
 800d22a:	6832      	ldr	r2, [r6, #0]
 800d22c:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d22e:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <prvHelpCommand+0xf4>)
 800d230:	7812      	ldrb	r2, [r2, #0]
 800d232:	429a      	cmp	r2, r3
 800d234:	d22a      	bcs.n	800d28c <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d236:	002a      	movs	r2, r5
 800d238:	0020      	movs	r0, r4
 800d23a:	3a08      	subs	r2, #8
 800d23c:	3008      	adds	r0, #8
 800d23e:	f005 fac2 	bl	80127c6 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d242:	1c60      	adds	r0, r4, #1
 800d244:	4918      	ldr	r1, [pc, #96]	; (800d2a8 <prvHelpCommand+0xf8>)
 800d246:	f005 faa5 	bl	8012794 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d24a:	2328      	movs	r3, #40	; 0x28
 800d24c:	7023      	strb	r3, [r4, #0]
 800d24e:	3301      	adds	r3, #1
 800d250:	71a3      	strb	r3, [r4, #6]
 800d252:	3b09      	subs	r3, #9
 800d254:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d256:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d258:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d25a:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d25c:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d25e:	1e73      	subs	r3, r6, #1
 800d260:	419e      	sbcs	r6, r3
 800d262:	e7d4      	b.n	800d20e <prvHelpCommand+0x5e>
			counter = 1;
 800d264:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d266:	4e11      	ldr	r6, [pc, #68]	; (800d2ac <prvHelpCommand+0xfc>)
			counter = 1;
 800d268:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d26a:	3604      	adds	r6, #4
			counter = 1;
 800d26c:	3301      	adds	r3, #1
 800d26e:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d270:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d272:	3b01      	subs	r3, #1
 800d274:	e7d9      	b.n	800d22a <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d276:	4642      	mov	r2, r8
 800d278:	3b06      	subs	r3, #6
 800d27a:	7113      	strb	r3, [r2, #4]
 800d27c:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <prvHelpCommand+0xf0>)
 800d27e:	002a      	movs	r2, r5
 800d280:	6819      	ldr	r1, [r3, #0]
 800d282:	0020      	movs	r0, r4
 800d284:	f005 fa9f 	bl	80127c6 <strncpy>
			xReturn = pdTRUE;
 800d288:	2601      	movs	r6, #1
 800d28a:	e7c0      	b.n	800d20e <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d28c:	002a      	movs	r2, r5
 800d28e:	0020      	movs	r0, r4
 800d290:	f005 fa99 	bl	80127c6 <strncpy>
 800d294:	e7df      	b.n	800d256 <prvHelpCommand+0xa6>
 800d296:	46c0      	nop			; (mov r8, r8)
 800d298:	08018378 	.word	0x08018378
 800d29c:	20002450 	.word	0x20002450
 800d2a0:	20000034 	.word	0x20000034
 800d2a4:	200067c0 	.word	0x200067c0
 800d2a8:	08016bd2 	.word	0x08016bd2
 800d2ac:	200000b8 	.word	0x200000b8

0800d2b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2b0:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2b2:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2bc:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2be:	4252      	negs	r2, r2
 800d2c0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d2c4:	4770      	bx	lr
 800d2c6:	46c0      	nop			; (mov r8, r8)

0800d2c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2cc:	4770      	bx	lr
 800d2ce:	46c0      	nop			; (mov r8, r8)

0800d2d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2d0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2d2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d2d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2d8:	689a      	ldr	r2, [r3, #8]
 800d2da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d2de:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d2e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	6003      	str	r3, [r0, #0]
}
 800d2e6:	4770      	bx	lr

0800d2e8 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2e8:	0002      	movs	r2, r0
{
 800d2ea:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2ec:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2ee:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d2f0:	1c63      	adds	r3, r4, #1
 800d2f2:	d101      	bne.n	800d2f8 <vListInsert+0x10>
 800d2f4:	e00d      	b.n	800d312 <vListInsert+0x2a>
 800d2f6:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2f8:	6853      	ldr	r3, [r2, #4]
 800d2fa:	681d      	ldr	r5, [r3, #0]
 800d2fc:	42a5      	cmp	r5, r4
 800d2fe:	d9fa      	bls.n	800d2f6 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d300:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d302:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d304:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800d306:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800d308:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800d30a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d30c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d30e:	6003      	str	r3, [r0, #0]
}
 800d310:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d312:	6902      	ldr	r2, [r0, #16]
 800d314:	6853      	ldr	r3, [r2, #4]
 800d316:	e7f3      	b.n	800d300 <vListInsert+0x18>

0800d318 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d318:	6842      	ldr	r2, [r0, #4]
 800d31a:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d31c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d31e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d320:	6881      	ldr	r1, [r0, #8]
 800d322:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	4282      	cmp	r2, r0
 800d328:	d100      	bne.n	800d32c <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d32a:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d32c:	2200      	movs	r2, #0
 800d32e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	1e50      	subs	r0, r2, #1
 800d334:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d336:	4770      	bx	lr

0800d338 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d33c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d33e:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d340:	2a00      	cmp	r2, #0
 800d342:	d107      	bne.n	800d354 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d344:	6805      	ldr	r5, [r0, #0]
 800d346:	2d00      	cmp	r5, #0
 800d348:	d02d      	beq.n	800d3a6 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800d34a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800d34c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d34e:	3301      	adds	r3, #1
 800d350:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800d352:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d354:	2d00      	cmp	r5, #0
 800d356:	d10e      	bne.n	800d376 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d358:	6880      	ldr	r0, [r0, #8]
 800d35a:	f004 ffdc 	bl	8012316 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d35e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d360:	68a3      	ldr	r3, [r4, #8]
 800d362:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d364:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d366:	4463      	add	r3, ip
 800d368:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d3ed      	bcc.n	800d34a <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d36e:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800d370:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d372:	60a3      	str	r3, [r4, #8]
 800d374:	e7ea      	b.n	800d34c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d376:	68c0      	ldr	r0, [r0, #12]
 800d378:	f004 ffcd 	bl	8012316 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d37c:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d37e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d380:	425a      	negs	r2, r3
 800d382:	68e3      	ldr	r3, [r4, #12]
 800d384:	189b      	adds	r3, r3, r2
 800d386:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d388:	428b      	cmp	r3, r1
 800d38a:	d203      	bcs.n	800d394 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d38c:	6863      	ldr	r3, [r4, #4]
 800d38e:	469c      	mov	ip, r3
 800d390:	4462      	add	r2, ip
 800d392:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d394:	2d02      	cmp	r5, #2
 800d396:	d1d8      	bne.n	800d34a <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d398:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d0d5      	beq.n	800d34a <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800d39e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d3a4:	e7d1      	b.n	800d34a <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d3a6:	6840      	ldr	r0, [r0, #4]
 800d3a8:	f000 ff98 	bl	800e2dc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d3ac:	6065      	str	r5, [r4, #4]
 800d3ae:	e7cd      	b.n	800d34c <prvCopyDataToQueue+0x14>

0800d3b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	d008      	beq.n	800d3cc <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d3ba:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3bc:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d3be:	1889      	adds	r1, r1, r2
 800d3c0:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3c2:	42a1      	cmp	r1, r4
 800d3c4:	d203      	bcs.n	800d3ce <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	f004 ffa5 	bl	8012316 <memcpy>
	}
}
 800d3cc:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d3ce:	6801      	ldr	r1, [r0, #0]
 800d3d0:	60c1      	str	r1, [r0, #12]
 800d3d2:	e7f8      	b.n	800d3c6 <prvCopyDataFromQueue+0x16>

0800d3d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3d8:	f001 fb10 	bl	800e9fc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d3dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dd1b      	ble.n	800d41a <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d018      	beq.n	800d41a <prvUnlockQueue+0x46>
 800d3e8:	0025      	movs	r5, r4
 800d3ea:	3524      	adds	r5, #36	; 0x24
 800d3ec:	e008      	b.n	800d400 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800d3ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d3f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	dd0f      	ble.n	800d41a <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d00c      	beq.n	800d41a <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d400:	0028      	movs	r0, r5
 800d402:	f000 feb7 	bl	800e174 <xTaskRemoveFromEventList>
 800d406:	2800      	cmp	r0, #0
 800d408:	d0f1      	beq.n	800d3ee <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800d40a:	f000 ff21 	bl	800e250 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800d40e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d410:	3b01      	subs	r3, #1
 800d412:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800d414:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d416:	2b00      	cmp	r3, #0
 800d418:	dcef      	bgt.n	800d3fa <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800d41a:	2301      	movs	r3, #1
 800d41c:	425b      	negs	r3, r3
 800d41e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800d420:	f001 faf8 	bl	800ea14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d424:	f001 faea 	bl	800e9fc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d428:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	dd1b      	ble.n	800d466 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d018      	beq.n	800d466 <prvUnlockQueue+0x92>
 800d434:	0025      	movs	r5, r4
 800d436:	3510      	adds	r5, #16
 800d438:	e008      	b.n	800d44c <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800d43a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d43c:	3b01      	subs	r3, #1
 800d43e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d442:	2b00      	cmp	r3, #0
 800d444:	dd0f      	ble.n	800d466 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00c      	beq.n	800d466 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d44c:	0028      	movs	r0, r5
 800d44e:	f000 fe91 	bl	800e174 <xTaskRemoveFromEventList>
 800d452:	2800      	cmp	r0, #0
 800d454:	d0f1      	beq.n	800d43a <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d456:	f000 fefb 	bl	800e250 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800d45a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d45c:	3b01      	subs	r3, #1
 800d45e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800d460:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d462:	2b00      	cmp	r3, #0
 800d464:	dcef      	bgt.n	800d446 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800d466:	2301      	movs	r3, #1
 800d468:	425b      	negs	r3, r3
 800d46a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d46c:	f001 fad2 	bl	800ea14 <vPortExitCritical>
}
 800d470:	bd70      	pop	{r4, r5, r6, pc}
 800d472:	46c0      	nop			; (mov r8, r8)

0800d474 <xQueueGenericReset>:
{
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	0004      	movs	r4, r0
 800d478:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800d47a:	f001 fabf 	bl	800e9fc <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d47e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	434b      	muls	r3, r1
 800d486:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d488:	1a5b      	subs	r3, r3, r1
 800d48a:	18d3      	adds	r3, r2, r3
 800d48c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800d48e:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d490:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d492:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800d494:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d496:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d498:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800d49a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800d49c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800d49e:	2d00      	cmp	r5, #0
 800d4a0:	d10f      	bne.n	800d4c2 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d103      	bne.n	800d4b0 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800d4a8:	f001 fab4 	bl	800ea14 <vPortExitCritical>
}
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d4b0:	0020      	movs	r0, r4
 800d4b2:	3010      	adds	r0, #16
 800d4b4:	f000 fe5e 	bl	800e174 <xTaskRemoveFromEventList>
 800d4b8:	2801      	cmp	r0, #1
 800d4ba:	d1f5      	bne.n	800d4a8 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800d4bc:	f001 fa92 	bl	800e9e4 <vPortYield>
 800d4c0:	e7f2      	b.n	800d4a8 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d4c2:	0020      	movs	r0, r4
 800d4c4:	3010      	adds	r0, #16
 800d4c6:	f7ff fef3 	bl	800d2b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ca:	0020      	movs	r0, r4
 800d4cc:	3024      	adds	r0, #36	; 0x24
 800d4ce:	f7ff feef 	bl	800d2b0 <vListInitialise>
 800d4d2:	e7e9      	b.n	800d4a8 <xQueueGenericReset+0x34>

0800d4d4 <xQueueGenericCreate>:
{
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	0006      	movs	r6, r0
 800d4d8:	000d      	movs	r5, r1
 800d4da:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	d009      	beq.n	800d4f4 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4e0:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d4e2:	3055      	adds	r0, #85	; 0x55
 800d4e4:	f001 fb04 	bl	800eaf0 <pvPortMalloc>
 800d4e8:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d4ea:	d013      	beq.n	800d514 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800d4ec:	0003      	movs	r3, r0
 800d4ee:	3354      	adds	r3, #84	; 0x54
 800d4f0:	6003      	str	r3, [r0, #0]
 800d4f2:	e005      	b.n	800d500 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d4f4:	2054      	movs	r0, #84	; 0x54
 800d4f6:	f001 fafb 	bl	800eaf0 <pvPortMalloc>
 800d4fa:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800d4fc:	d00a      	beq.n	800d514 <xQueueGenericCreate+0x40>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4fe:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800d500:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800d502:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d504:	2101      	movs	r1, #1
 800d506:	0020      	movs	r0, r4
 800d508:	f7ff ffb4 	bl	800d474 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800d50c:	2350      	movs	r3, #80	; 0x50
 800d50e:	54e7      	strb	r7, [r4, r3]
}
 800d510:	0020      	movs	r0, r4
 800d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800d514:	2400      	movs	r4, #0
 800d516:	e7fb      	b.n	800d510 <xQueueGenericCreate+0x3c>

0800d518 <xQueueCreateCountingSemaphore>:
	{
 800d518:	b510      	push	{r4, lr}
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d51a:	2202      	movs	r2, #2
	{
 800d51c:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d51e:	2100      	movs	r1, #0
 800d520:	f7ff ffd8 	bl	800d4d4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d524:	2800      	cmp	r0, #0
 800d526:	d000      	beq.n	800d52a <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d528:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800d52a:	bd10      	pop	{r4, pc}

0800d52c <xQueueGenericSend>:
{
 800d52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d52e:	46c6      	mov	lr, r8
 800d530:	0004      	movs	r4, r0
 800d532:	b500      	push	{lr}
 800d534:	b084      	sub	sp, #16
 800d536:	9201      	str	r2, [sp, #4]
 800d538:	001e      	movs	r6, r3
 800d53a:	4688      	mov	r8, r1
		taskENTER_CRITICAL();
 800d53c:	f001 fa5e 	bl	800e9fc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d542:	6be2      	ldr	r2, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d544:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d546:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d548:	4293      	cmp	r3, r2
 800d54a:	d330      	bcc.n	800d5ae <xQueueGenericSend+0x82>
 800d54c:	2e02      	cmp	r6, #2
 800d54e:	d02e      	beq.n	800d5ae <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d550:	9b01      	ldr	r3, [sp, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d052      	beq.n	800d5fc <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800d556:	2d00      	cmp	r5, #0
 800d558:	d03a      	beq.n	800d5d0 <xQueueGenericSend+0xa4>
		taskEXIT_CRITICAL();
 800d55a:	f001 fa5b 	bl	800ea14 <vPortExitCritical>
		vTaskSuspendAll();
 800d55e:	f000 fc0f 	bl	800dd80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d562:	f001 fa4b 	bl	800e9fc <vPortEnterCritical>
 800d566:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d568:	3301      	adds	r3, #1
 800d56a:	d100      	bne.n	800d56e <xQueueGenericSend+0x42>
 800d56c:	6467      	str	r7, [r4, #68]	; 0x44
 800d56e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d570:	3301      	adds	r3, #1
 800d572:	d100      	bne.n	800d576 <xQueueGenericSend+0x4a>
 800d574:	64a7      	str	r7, [r4, #72]	; 0x48
 800d576:	f001 fa4d 	bl	800ea14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d57a:	a901      	add	r1, sp, #4
 800d57c:	a802      	add	r0, sp, #8
 800d57e:	f000 fe3b 	bl	800e1f8 <xTaskCheckForTimeOut>
 800d582:	2800      	cmp	r0, #0
 800d584:	d13e      	bne.n	800d604 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d586:	f001 fa39 	bl	800e9fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d58a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d58c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d58e:	4293      	cmp	r3, r2
 800d590:	d022      	beq.n	800d5d8 <xQueueGenericSend+0xac>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d592:	f001 fa3f 	bl	800ea14 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d596:	0020      	movs	r0, r4
 800d598:	f7ff ff1c 	bl	800d3d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d59c:	f000 fc8e 	bl	800debc <xTaskResumeAll>
 800d5a0:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800d5a2:	f001 fa2b 	bl	800e9fc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d2ce      	bcs.n	800d54c <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5ae:	0032      	movs	r2, r6
 800d5b0:	4641      	mov	r1, r8
 800d5b2:	0020      	movs	r0, r4
 800d5b4:	f7ff fec0 	bl	800d338 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d129      	bne.n	800d612 <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d12d      	bne.n	800d61e <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800d5c2:	f001 fa27 	bl	800ea14 <vPortExitCritical>
				return pdPASS;
 800d5c6:	2001      	movs	r0, #1
}
 800d5c8:	b004      	add	sp, #16
 800d5ca:	bc04      	pop	{r2}
 800d5cc:	4690      	mov	r8, r2
 800d5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskSetTimeOutState( &xTimeOut );
 800d5d0:	a802      	add	r0, sp, #8
 800d5d2:	f000 fe05 	bl	800e1e0 <vTaskSetTimeOutState>
 800d5d6:	e7c0      	b.n	800d55a <xQueueGenericSend+0x2e>
	taskEXIT_CRITICAL();
 800d5d8:	f001 fa1c 	bl	800ea14 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5dc:	0020      	movs	r0, r4
 800d5de:	9901      	ldr	r1, [sp, #4]
 800d5e0:	3010      	adds	r0, #16
 800d5e2:	f000 fd99 	bl	800e118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5e6:	0020      	movs	r0, r4
 800d5e8:	f7ff fef4 	bl	800d3d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5ec:	f000 fc66 	bl	800debc <xTaskResumeAll>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d1d5      	bne.n	800d5a0 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800d5f4:	f001 f9f6 	bl	800e9e4 <vPortYield>
 800d5f8:	2501      	movs	r5, #1
 800d5fa:	e7d2      	b.n	800d5a2 <xQueueGenericSend+0x76>
					taskEXIT_CRITICAL();
 800d5fc:	f001 fa0a 	bl	800ea14 <vPortExitCritical>
					return errQUEUE_FULL;
 800d600:	2000      	movs	r0, #0
 800d602:	e7e1      	b.n	800d5c8 <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800d604:	0020      	movs	r0, r4
 800d606:	f7ff fee5 	bl	800d3d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d60a:	f000 fc57 	bl	800debc <xTaskResumeAll>
			return errQUEUE_FULL;
 800d60e:	2000      	movs	r0, #0
 800d610:	e7da      	b.n	800d5c8 <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800d612:	0020      	movs	r0, r4
 800d614:	3024      	adds	r0, #36	; 0x24
 800d616:	f000 fdad 	bl	800e174 <xTaskRemoveFromEventList>
 800d61a:	2801      	cmp	r0, #1
 800d61c:	d1d1      	bne.n	800d5c2 <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800d61e:	f001 f9e1 	bl	800e9e4 <vPortYield>
 800d622:	e7ce      	b.n	800d5c2 <xQueueGenericSend+0x96>

0800d624 <xQueueGenericSendFromISR>:
{
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	46ce      	mov	lr, r9
 800d628:	4647      	mov	r7, r8
 800d62a:	0004      	movs	r4, r0
 800d62c:	b580      	push	{r7, lr}
 800d62e:	4691      	mov	r9, r2
 800d630:	001d      	movs	r5, r3
 800d632:	4688      	mov	r8, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d634:	f001 f9f8 	bl	800ea28 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d63a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d63c:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d63e:	4293      	cmp	r3, r2
 800d640:	d30a      	bcc.n	800d658 <xQueueGenericSendFromISR+0x34>
			xReturn = errQUEUE_FULL;
 800d642:	2600      	movs	r6, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d644:	2d02      	cmp	r5, #2
 800d646:	d007      	beq.n	800d658 <xQueueGenericSendFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d648:	0038      	movs	r0, r7
 800d64a:	f001 f9f3 	bl	800ea34 <vClearInterruptMaskFromISR>
}
 800d64e:	0030      	movs	r0, r6
 800d650:	bc0c      	pop	{r2, r3}
 800d652:	4690      	mov	r8, r2
 800d654:	4699      	mov	r9, r3
 800d656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d658:	002a      	movs	r2, r5
 800d65a:	4641      	mov	r1, r8
 800d65c:	0020      	movs	r0, r4
 800d65e:	f7ff fe6b 	bl	800d338 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d662:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d664:	3301      	adds	r3, #1
 800d666:	d004      	beq.n	800d672 <xQueueGenericSendFromISR+0x4e>
				++( pxQueue->xTxLock );
 800d668:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d66a:	3301      	adds	r3, #1
 800d66c:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d66e:	2601      	movs	r6, #1
 800d670:	e7ea      	b.n	800d648 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	d0fa      	beq.n	800d66e <xQueueGenericSendFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d678:	0020      	movs	r0, r4
 800d67a:	3024      	adds	r0, #36	; 0x24
 800d67c:	f000 fd7a 	bl	800e174 <xTaskRemoveFromEventList>
 800d680:	2800      	cmp	r0, #0
 800d682:	d0f4      	beq.n	800d66e <xQueueGenericSendFromISR+0x4a>
							if( pxHigherPriorityTaskWoken != NULL )
 800d684:	464b      	mov	r3, r9
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0f1      	beq.n	800d66e <xQueueGenericSendFromISR+0x4a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d68a:	2301      	movs	r3, #1
 800d68c:	464a      	mov	r2, r9
			xReturn = pdPASS;
 800d68e:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	e7d9      	b.n	800d648 <xQueueGenericSendFromISR+0x24>

0800d694 <xQueueGiveFromISR>:
{
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	0004      	movs	r4, r0
 800d698:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d69a:	f001 f9c5 	bl	800ea28 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d69e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6a2:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800d6a4:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d209      	bcs.n	800d6be <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800d6aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d6b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	d008      	beq.n	800d6c8 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800d6b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d6bc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d6be:	0030      	movs	r0, r6
 800d6c0:	f001 f9b8 	bl	800ea34 <vClearInterruptMaskFromISR>
}
 800d6c4:	0028      	movs	r0, r5
 800d6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d0f6      	beq.n	800d6bc <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6ce:	0020      	movs	r0, r4
 800d6d0:	3024      	adds	r0, #36	; 0x24
 800d6d2:	f000 fd4f 	bl	800e174 <xTaskRemoveFromEventList>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d0f0      	beq.n	800d6bc <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800d6da:	2f00      	cmp	r7, #0
 800d6dc:	d0ee      	beq.n	800d6bc <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6de:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800d6e0:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	e7eb      	b.n	800d6be <xQueueGiveFromISR+0x2a>
 800d6e6:	46c0      	nop			; (mov r8, r8)

0800d6e8 <xQueueGenericReceive>:
{
 800d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ea:	46c6      	mov	lr, r8
 800d6ec:	0004      	movs	r4, r0
 800d6ee:	b500      	push	{lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	4698      	mov	r8, r3
 800d6f4:	000f      	movs	r7, r1
 800d6f6:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800d6f8:	f001 f980 	bl	800e9fc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d148      	bne.n	800d794 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d702:	9b01      	ldr	r3, [sp, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d06a      	beq.n	800d7de <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d708:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800d70a:	a802      	add	r0, sp, #8
 800d70c:	f000 fd68 	bl	800e1e0 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800d710:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d712:	3624      	adds	r6, #36	; 0x24
 800d714:	e017      	b.n	800d746 <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800d716:	f001 f97d 	bl	800ea14 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d056      	beq.n	800d7ce <xQueueGenericReceive+0xe6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d720:	9901      	ldr	r1, [sp, #4]
 800d722:	0030      	movs	r0, r6
 800d724:	f000 fcf8 	bl	800e118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d728:	0020      	movs	r0, r4
 800d72a:	f7ff fe53 	bl	800d3d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d72e:	f000 fbc5 	bl	800debc <xTaskResumeAll>
 800d732:	2800      	cmp	r0, #0
 800d734:	d048      	beq.n	800d7c8 <xQueueGenericReceive+0xe0>
		taskENTER_CRITICAL();
 800d736:	f001 f961 	bl	800e9fc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d73a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d129      	bne.n	800d794 <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d740:	9b01      	ldr	r3, [sp, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d04b      	beq.n	800d7de <xQueueGenericReceive+0xf6>
		taskEXIT_CRITICAL();
 800d746:	f001 f965 	bl	800ea14 <vPortExitCritical>
		vTaskSuspendAll();
 800d74a:	f000 fb19 	bl	800dd80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d74e:	f001 f955 	bl	800e9fc <vPortEnterCritical>
 800d752:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d754:	3301      	adds	r3, #1
 800d756:	d100      	bne.n	800d75a <xQueueGenericReceive+0x72>
 800d758:	6465      	str	r5, [r4, #68]	; 0x44
 800d75a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d75c:	3301      	adds	r3, #1
 800d75e:	d100      	bne.n	800d762 <xQueueGenericReceive+0x7a>
 800d760:	64a5      	str	r5, [r4, #72]	; 0x48
 800d762:	f001 f957 	bl	800ea14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d766:	a901      	add	r1, sp, #4
 800d768:	a802      	add	r0, sp, #8
 800d76a:	f000 fd45 	bl	800e1f8 <xTaskCheckForTimeOut>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d13c      	bne.n	800d7ec <xQueueGenericReceive+0x104>
	taskENTER_CRITICAL();
 800d772:	f001 f943 	bl	800e9fc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0cc      	beq.n	800d716 <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800d77c:	f001 f94a 	bl	800ea14 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d780:	0020      	movs	r0, r4
 800d782:	f7ff fe27 	bl	800d3d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d786:	f000 fb99 	bl	800debc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800d78a:	f001 f937 	bl	800e9fc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d78e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d790:	2b00      	cmp	r3, #0
 800d792:	d0d5      	beq.n	800d740 <xQueueGenericReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d794:	0039      	movs	r1, r7
 800d796:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d798:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d79a:	f7ff fe09 	bl	800d3b0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d79e:	4643      	mov	r3, r8
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d12a      	bne.n	800d7fa <xQueueGenericReceive+0x112>
					--( pxQueue->uxMessagesWaiting );
 800d7a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d033      	beq.n	800d818 <xQueueGenericReceive+0x130>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d025      	beq.n	800d802 <xQueueGenericReceive+0x11a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d7b6:	0020      	movs	r0, r4
 800d7b8:	3010      	adds	r0, #16
 800d7ba:	f000 fcdb 	bl	800e174 <xTaskRemoveFromEventList>
 800d7be:	2801      	cmp	r0, #1
 800d7c0:	d11f      	bne.n	800d802 <xQueueGenericReceive+0x11a>
							queueYIELD_IF_USING_PREEMPTION();
 800d7c2:	f001 f90f 	bl	800e9e4 <vPortYield>
 800d7c6:	e01c      	b.n	800d802 <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800d7c8:	f001 f90c 	bl	800e9e4 <vPortYield>
 800d7cc:	e7b3      	b.n	800d736 <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800d7ce:	f001 f915 	bl	800e9fc <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d7d2:	6860      	ldr	r0, [r4, #4]
 800d7d4:	f000 fd4e 	bl	800e274 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d7d8:	f001 f91c 	bl	800ea14 <vPortExitCritical>
 800d7dc:	e7a0      	b.n	800d720 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800d7de:	f001 f919 	bl	800ea14 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d7e2:	2000      	movs	r0, #0
}
 800d7e4:	b004      	add	sp, #16
 800d7e6:	bc04      	pop	{r2}
 800d7e8:	4690      	mov	r8, r2
 800d7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800d7ec:	0020      	movs	r0, r4
 800d7ee:	f7ff fdf1 	bl	800d3d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7f2:	f000 fb63 	bl	800debc <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	e7f4      	b.n	800d7e4 <xQueueGenericReceive+0xfc>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d7fc:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d103      	bne.n	800d80a <xQueueGenericReceive+0x122>
				taskEXIT_CRITICAL();
 800d802:	f001 f907 	bl	800ea14 <vPortExitCritical>
				return pdPASS;
 800d806:	2001      	movs	r0, #1
 800d808:	e7ec      	b.n	800d7e4 <xQueueGenericReceive+0xfc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80a:	0020      	movs	r0, r4
 800d80c:	3024      	adds	r0, #36	; 0x24
 800d80e:	f000 fcb1 	bl	800e174 <xTaskRemoveFromEventList>
 800d812:	2800      	cmp	r0, #0
 800d814:	d0f5      	beq.n	800d802 <xQueueGenericReceive+0x11a>
 800d816:	e7d4      	b.n	800d7c2 <xQueueGenericReceive+0xda>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d818:	f000 fe40 	bl	800e49c <pvTaskIncrementMutexHeldCount>
 800d81c:	6060      	str	r0, [r4, #4]
 800d81e:	e7c7      	b.n	800d7b0 <xQueueGenericReceive+0xc8>

0800d820 <xQueueReceiveFromISR>:
{
 800d820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d822:	46c6      	mov	lr, r8
 800d824:	0004      	movs	r4, r0
 800d826:	b500      	push	{lr}
 800d828:	000f      	movs	r7, r1
 800d82a:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d82c:	f001 f8fc 	bl	800ea28 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d830:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d832:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800d834:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d83a:	0030      	movs	r0, r6
 800d83c:	f001 f8fa 	bl	800ea34 <vClearInterruptMaskFromISR>
}
 800d840:	0028      	movs	r0, r5
 800d842:	bc04      	pop	{r2}
 800d844:	4690      	mov	r8, r2
 800d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d848:	0039      	movs	r1, r7
 800d84a:	0020      	movs	r0, r4
 800d84c:	f7ff fdb0 	bl	800d3b0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d852:	3b01      	subs	r3, #1
 800d854:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d858:	3301      	adds	r3, #1
 800d85a:	d004      	beq.n	800d866 <xQueueReceiveFromISR+0x46>
				++( pxQueue->xRxLock );
 800d85c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d85e:	3301      	adds	r3, #1
 800d860:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d862:	2501      	movs	r5, #1
 800d864:	e7e9      	b.n	800d83a <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d866:	6923      	ldr	r3, [r4, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d0fa      	beq.n	800d862 <xQueueReceiveFromISR+0x42>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d86c:	0020      	movs	r0, r4
 800d86e:	3010      	adds	r0, #16
 800d870:	f000 fc80 	bl	800e174 <xTaskRemoveFromEventList>
 800d874:	2800      	cmp	r0, #0
 800d876:	d0f4      	beq.n	800d862 <xQueueReceiveFromISR+0x42>
						if( pxHigherPriorityTaskWoken != NULL )
 800d878:	4643      	mov	r3, r8
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d0f1      	beq.n	800d862 <xQueueReceiveFromISR+0x42>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d87e:	2301      	movs	r3, #1
 800d880:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800d882:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d884:	6013      	str	r3, [r2, #0]
 800d886:	e7d8      	b.n	800d83a <xQueueReceiveFromISR+0x1a>

0800d888 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d888:	2300      	movs	r3, #0
	{
 800d88a:	b570      	push	{r4, r5, r6, lr}
 800d88c:	4d06      	ldr	r5, [pc, #24]	; (800d8a8 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d88e:	00dc      	lsls	r4, r3, #3
 800d890:	192a      	adds	r2, r5, r4
 800d892:	6816      	ldr	r6, [r2, #0]
 800d894:	2e00      	cmp	r6, #0
 800d896:	d003      	beq.n	800d8a0 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d898:	3301      	adds	r3, #1
 800d89a:	2b08      	cmp	r3, #8
 800d89c:	d1f7      	bne.n	800d88e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d8a0:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d8a2:	6050      	str	r0, [r2, #4]
				break;
 800d8a4:	e7fb      	b.n	800d89e <vQueueAddToRegistry+0x16>
 800d8a6:	46c0      	nop			; (mov r8, r8)
 800d8a8:	20006d78 	.word	0x20006d78

0800d8ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	0004      	movs	r4, r0
 800d8b0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8b2:	f001 f8a3 	bl	800e9fc <vPortEnterCritical>
 800d8b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	d101      	bne.n	800d8c0 <vQueueWaitForMessageRestricted+0x14>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	6463      	str	r3, [r4, #68]	; 0x44
 800d8c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	d101      	bne.n	800d8ca <vQueueWaitForMessageRestricted+0x1e>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	64a3      	str	r3, [r4, #72]	; 0x48
 800d8ca:	f001 f8a3 	bl	800ea14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d104      	bne.n	800d8de <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8d4:	0020      	movs	r0, r4
 800d8d6:	0029      	movs	r1, r5
 800d8d8:	3024      	adds	r0, #36	; 0x24
 800d8da:	f000 fc39 	bl	800e150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d8de:	0020      	movs	r0, r4
 800d8e0:	f7ff fd78 	bl	800d3d4 <prvUnlockQueue>
	}
 800d8e4:	bd70      	pop	{r4, r5, r6, pc}
 800d8e6:	46c0      	nop			; (mov r8, r8)

0800d8e8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d8ec:	f004 ff52 	bl	8012794 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d8f0:	0020      	movs	r0, r4
 800d8f2:	f7f2 fc11 	bl	8000118 <strlen>
 800d8f6:	0003      	movs	r3, r0
 800d8f8:	280b      	cmp	r0, #11
 800d8fa:	d808      	bhi.n	800d90e <prvWriteNameToBuffer+0x26>
 800d8fc:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800d8fe:	2320      	movs	r3, #32
 800d900:	1820      	adds	r0, r4, r0
 800d902:	320c      	adds	r2, #12
 800d904:	7003      	strb	r3, [r0, #0]
 800d906:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d908:	4290      	cmp	r0, r2
 800d90a:	d1fb      	bne.n	800d904 <prvWriteNameToBuffer+0x1c>
 800d90c:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800d90e:	18e0      	adds	r0, r4, r3
 800d910:	2300      	movs	r3, #0
 800d912:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800d914:	bd10      	pop	{r4, pc}
 800d916:	46c0      	nop			; (mov r8, r8)

0800d918 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800d918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d91a:	46d6      	mov	lr, sl
 800d91c:	464f      	mov	r7, r9
 800d91e:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d920:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800d922:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d924:	685f      	ldr	r7, [r3, #4]
 800d926:	2308      	movs	r3, #8
 800d928:	469c      	mov	ip, r3
 800d92a:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800d92c:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d92e:	604f      	str	r7, [r1, #4]
 800d930:	4567      	cmp	r7, ip
 800d932:	d042      	beq.n	800d9ba <prvListTaskWithinSingleList.part.1+0xa2>
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	0005      	movs	r5, r0
 800d938:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d93a:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800d93c:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d93e:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d940:	687f      	ldr	r7, [r7, #4]
 800d942:	604f      	str	r7, [r1, #4]
 800d944:	45bc      	cmp	ip, r7
 800d946:	d035      	beq.n	800d9b4 <prvListTaskWithinSingleList.part.1+0x9c>
 800d948:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800d94a:	0033      	movs	r3, r6
 800d94c:	3334      	adds	r3, #52	; 0x34
 800d94e:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d950:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800d952:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d954:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800d956:	4653      	mov	r3, sl
 800d958:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800d95a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d95c:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800d95e:	4653      	mov	r3, sl
 800d960:	2b03      	cmp	r3, #3
 800d962:	d018      	beq.n	800d996 <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d964:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800d966:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d968:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d96a:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d96c:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d96e:	7813      	ldrb	r3, [r2, #0]
 800d970:	2ba5      	cmp	r3, #165	; 0xa5
 800d972:	d11d      	bne.n	800d9b0 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800d974:	2300      	movs	r3, #0
			ulCount++;
 800d976:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d978:	5cd4      	ldrb	r4, [r2, r3]
 800d97a:	2ca5      	cmp	r4, #165	; 0xa5
 800d97c:	d0fb      	beq.n	800d976 <prvListTaskWithinSingleList.part.1+0x5e>
 800d97e:	089b      	lsrs	r3, r3, #2
 800d980:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d982:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800d984:	3001      	adds	r0, #1
 800d986:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800d988:	45b0      	cmp	r8, r6
 800d98a:	d1d9      	bne.n	800d940 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800d98c:	bc1c      	pop	{r2, r3, r4}
 800d98e:	4690      	mov	r8, r2
 800d990:	4699      	mov	r9, r3
 800d992:	46a2      	mov	sl, r4
 800d994:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800d996:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0e3      	beq.n	800d964 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d99c:	464b      	mov	r3, r9
 800d99e:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d9a0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800d9a2:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d9a4:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d9a6:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d9a8:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d9aa:	7813      	ldrb	r3, [r2, #0]
 800d9ac:	2ba5      	cmp	r3, #165	; 0xa5
 800d9ae:	d0e1      	beq.n	800d974 <prvListTaskWithinSingleList.part.1+0x5c>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	e7e6      	b.n	800d982 <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d9b4:	68cf      	ldr	r7, [r1, #12]
 800d9b6:	604f      	str	r7, [r1, #4]
 800d9b8:	e7c6      	b.n	800d948 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d9ba:	68cf      	ldr	r7, [r1, #12]
 800d9bc:	e7ba      	b.n	800d934 <prvListTaskWithinSingleList.part.1+0x1c>
 800d9be:	46c0      	nop			; (mov r8, r8)

0800d9c0 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d9c0:	4b03      	ldr	r3, [pc, #12]	; (800d9d0 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	4b02      	ldr	r3, [pc, #8]	; (800d9d4 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800d9cc:	601a      	str	r2, [r3, #0]
}
 800d9ce:	4770      	bx	lr
 800d9d0:	200026c4 	.word	0x200026c4
 800d9d4:	200000c4 	.word	0x200000c4

0800d9d8 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d9d8:	4b0c      	ldr	r3, [pc, #48]	; (800da0c <prvAddCurrentTaskToDelayedList+0x34>)
{
 800d9da:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d9dc:	685a      	ldr	r2, [r3, #4]
{
 800d9de:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d9e0:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800d9e2:	689a      	ldr	r2, [r3, #8]
 800d9e4:	4282      	cmp	r2, r0
 800d9e6:	d80a      	bhi.n	800d9fe <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d9e8:	6818      	ldr	r0, [r3, #0]
 800d9ea:	6859      	ldr	r1, [r3, #4]
 800d9ec:	3104      	adds	r1, #4
 800d9ee:	f7ff fc7b 	bl	800d2e8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800d9f2:	4b07      	ldr	r3, [pc, #28]	; (800da10 <prvAddCurrentTaskToDelayedList+0x38>)
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	42a2      	cmp	r2, r4
 800d9f8:	d900      	bls.n	800d9fc <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800d9fa:	601c      	str	r4, [r3, #0]
}
 800d9fc:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d9fe:	68d8      	ldr	r0, [r3, #12]
 800da00:	6859      	ldr	r1, [r3, #4]
 800da02:	3104      	adds	r1, #4
 800da04:	f7ff fc70 	bl	800d2e8 <vListInsert>
 800da08:	e7f8      	b.n	800d9fc <prvAddCurrentTaskToDelayedList+0x24>
 800da0a:	46c0      	nop			; (mov r8, r8)
 800da0c:	200026c4 	.word	0x200026c4
 800da10:	200000c4 	.word	0x200000c4

0800da14 <vTaskSwitchContext.part.5>:
		xYieldPending = pdFALSE;
 800da14:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800da16:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800da18:	4c26      	ldr	r4, [pc, #152]	; (800dab4 <vTaskSwitchContext.part.5+0xa0>)
 800da1a:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800da1c:	f7f9 fffa 	bl	8007a14 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800da20:	6963      	ldr	r3, [r4, #20]
 800da22:	4298      	cmp	r0, r3
 800da24:	d904      	bls.n	800da30 <vTaskSwitchContext.part.5+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800da26:	6862      	ldr	r2, [r4, #4]
 800da28:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800da2a:	1acb      	subs	r3, r1, r3
 800da2c:	181b      	adds	r3, r3, r0
 800da2e:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800da30:	6862      	ldr	r2, [r4, #4]
 800da32:	6863      	ldr	r3, [r4, #4]
 800da34:	6812      	ldr	r2, [r2, #0]
 800da36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800da38:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d923      	bls.n	800da86 <vTaskSwitchContext.part.5+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800da3e:	6863      	ldr	r3, [r4, #4]
 800da40:	2214      	movs	r2, #20
 800da42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da44:	491c      	ldr	r1, [pc, #112]	; (800dab8 <vTaskSwitchContext.part.5+0xa4>)
 800da46:	f004 fc57 	bl	80122f8 <memcmp>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d128      	bne.n	800daa0 <vTaskSwitchContext.part.5+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800da4e:	69a2      	ldr	r2, [r4, #24]
 800da50:	491a      	ldr	r1, [pc, #104]	; (800dabc <vTaskSwitchContext.part.5+0xa8>)
 800da52:	e003      	b.n	800da5c <vTaskSwitchContext.part.5+0x48>
 800da54:	69a3      	ldr	r3, [r4, #24]
 800da56:	3b01      	subs	r3, #1
 800da58:	61a3      	str	r3, [r4, #24]
 800da5a:	69a2      	ldr	r2, [r4, #24]
 800da5c:	0093      	lsls	r3, r2, #2
 800da5e:	189b      	adds	r3, r3, r2
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	58cb      	ldr	r3, [r1, r3]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d0f5      	beq.n	800da54 <vTaskSwitchContext.part.5+0x40>
 800da68:	69a2      	ldr	r2, [r4, #24]
 800da6a:	0093      	lsls	r3, r2, #2
 800da6c:	189b      	adds	r3, r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	18c8      	adds	r0, r1, r3
 800da72:	6842      	ldr	r2, [r0, #4]
 800da74:	3308      	adds	r3, #8
 800da76:	6852      	ldr	r2, [r2, #4]
 800da78:	18c9      	adds	r1, r1, r3
 800da7a:	6042      	str	r2, [r0, #4]
 800da7c:	428a      	cmp	r2, r1
 800da7e:	d015      	beq.n	800daac <vTaskSwitchContext.part.5+0x98>
 800da80:	68d3      	ldr	r3, [r2, #12]
 800da82:	6063      	str	r3, [r4, #4]
}
 800da84:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800da86:	6860      	ldr	r0, [r4, #4]
 800da88:	6861      	ldr	r1, [r4, #4]
 800da8a:	3134      	adds	r1, #52	; 0x34
 800da8c:	f7fe fca4 	bl	800c3d8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800da90:	6863      	ldr	r3, [r4, #4]
 800da92:	2214      	movs	r2, #20
 800da94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da96:	4908      	ldr	r1, [pc, #32]	; (800dab8 <vTaskSwitchContext.part.5+0xa4>)
 800da98:	f004 fc2e 	bl	80122f8 <memcmp>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d0d6      	beq.n	800da4e <vTaskSwitchContext.part.5+0x3a>
 800daa0:	6860      	ldr	r0, [r4, #4]
 800daa2:	6861      	ldr	r1, [r4, #4]
 800daa4:	3134      	adds	r1, #52	; 0x34
 800daa6:	f7fe fc97 	bl	800c3d8 <vApplicationStackOverflowHook>
 800daaa:	e7d0      	b.n	800da4e <vTaskSwitchContext.part.5+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800daac:	6852      	ldr	r2, [r2, #4]
 800daae:	6042      	str	r2, [r0, #4]
 800dab0:	e7e6      	b.n	800da80 <vTaskSwitchContext.part.5+0x6c>
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	200026c4 	.word	0x200026c4
 800dab8:	080170dc 	.word	0x080170dc
 800dabc:	20002760 	.word	0x20002760

0800dac0 <xTaskGenericCreate>:
{
 800dac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac2:	464f      	mov	r7, r9
 800dac4:	4646      	mov	r6, r8
 800dac6:	46d6      	mov	lr, sl
 800dac8:	b5c0      	push	{r6, r7, lr}
 800daca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dacc:	4680      	mov	r8, r0
 800dace:	000c      	movs	r4, r1
 800dad0:	0015      	movs	r5, r2
 800dad2:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad4:	2f00      	cmp	r7, #0
 800dad6:	d100      	bne.n	800dada <xTaskGenericCreate+0x1a>
 800dad8:	e0ae      	b.n	800dc38 <xTaskGenericCreate+0x178>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800dada:	2060      	movs	r0, #96	; 0x60
 800dadc:	f001 f808 	bl	800eaf0 <pvPortMalloc>
 800dae0:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800dae2:	d100      	bne.n	800dae6 <xTaskGenericCreate+0x26>
 800dae4:	e0b1      	b.n	800dc4a <xTaskGenericCreate+0x18a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800dae6:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800dae8:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800daea:	002a      	movs	r2, r5
 800daec:	0038      	movs	r0, r7
 800daee:	21a5      	movs	r1, #165	; 0xa5
 800daf0:	f004 fc1a 	bl	8012328 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800daf4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800daf6:	1f2f      	subs	r7, r5, #4
 800daf8:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dafa:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800dafc:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800dafe:	439f      	bics	r7, r3
 800db00:	0030      	movs	r0, r6
 800db02:	0033      	movs	r3, r6
 800db04:	3041      	adds	r0, #65	; 0x41
 800db06:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800db08:	7822      	ldrb	r2, [r4, #0]
 800db0a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800db0c:	7822      	ldrb	r2, [r4, #0]
 800db0e:	2a00      	cmp	r2, #0
 800db10:	d003      	beq.n	800db1a <xTaskGenericCreate+0x5a>
 800db12:	3301      	adds	r3, #1
 800db14:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db16:	4298      	cmp	r0, r3
 800db18:	d1f6      	bne.n	800db08 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db1a:	2340      	movs	r3, #64	; 0x40
 800db1c:	2200      	movs	r2, #0
 800db1e:	9d08      	ldr	r5, [sp, #32]
 800db20:	54f2      	strb	r2, [r6, r3]
 800db22:	2d06      	cmp	r5, #6
 800db24:	d84f      	bhi.n	800dbc6 <xTaskGenericCreate+0x106>
		pxTCB->uxMutexesHeld = 0;
 800db26:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800db28:	1d33      	adds	r3, r6, #4
 800db2a:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800db2c:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800db2e:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800db30:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800db32:	469a      	mov	sl, r3
 800db34:	f7ff fbc8 	bl	800d2c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800db38:	0030      	movs	r0, r6
 800db3a:	3018      	adds	r0, #24
 800db3c:	f7ff fbc4 	bl	800d2c8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db40:	2307      	movs	r3, #7
 800db42:	1b5b      	subs	r3, r3, r5
 800db44:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800db46:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800db48:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800db4a:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800db4c:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800db4e:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db50:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800db52:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db54:	4641      	mov	r1, r8
 800db56:	0038      	movs	r0, r7
 800db58:	f000 ff08 	bl	800e96c <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800db5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db5e:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800db60:	2b00      	cmp	r3, #0
 800db62:	d000      	beq.n	800db66 <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db64:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800db66:	f000 ff49 	bl	800e9fc <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800db6a:	4c3b      	ldr	r4, [pc, #236]	; (800dc58 <xTaskGenericCreate+0x198>)
 800db6c:	69e3      	ldr	r3, [r4, #28]
 800db6e:	3301      	adds	r3, #1
 800db70:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800db72:	6863      	ldr	r3, [r4, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d02f      	beq.n	800dbd8 <xTaskGenericCreate+0x118>
				if( xSchedulerRunning == pdFALSE )
 800db78:	4d38      	ldr	r5, [pc, #224]	; (800dc5c <xTaskGenericCreate+0x19c>)
 800db7a:	686b      	ldr	r3, [r5, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d024      	beq.n	800dbca <xTaskGenericCreate+0x10a>
 800db80:	4f37      	ldr	r7, [pc, #220]	; (800dc60 <xTaskGenericCreate+0x1a0>)
			uxTaskNumber++;
 800db82:	68ab      	ldr	r3, [r5, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800db84:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800db86:	3301      	adds	r3, #1
 800db88:	60ab      	str	r3, [r5, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db8a:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800db8c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800db8e:	4293      	cmp	r3, r2
 800db90:	d817      	bhi.n	800dbc2 <xTaskGenericCreate+0x102>
 800db92:	0098      	lsls	r0, r3, #2
 800db94:	18c0      	adds	r0, r0, r3
 800db96:	0080      	lsls	r0, r0, #2
 800db98:	1838      	adds	r0, r7, r0
 800db9a:	4651      	mov	r1, sl
 800db9c:	f7ff fb98 	bl	800d2d0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800dba0:	f000 ff38 	bl	800ea14 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800dba4:	686b      	ldr	r3, [r5, #4]
			xReturn = pdPASS;
 800dba6:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d004      	beq.n	800dbb6 <xTaskGenericCreate+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800dbac:	6863      	ldr	r3, [r4, #4]
 800dbae:	9a08      	ldr	r2, [sp, #32]
 800dbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d317      	bcc.n	800dbe6 <xTaskGenericCreate+0x126>
}
 800dbb6:	0028      	movs	r0, r5
 800dbb8:	bc1c      	pop	{r2, r3, r4}
 800dbba:	4690      	mov	r8, r2
 800dbbc:	4699      	mov	r9, r3
 800dbbe:	46a2      	mov	sl, r4
 800dbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800dbc2:	61a3      	str	r3, [r4, #24]
 800dbc4:	e7e5      	b.n	800db92 <xTaskGenericCreate+0xd2>
 800dbc6:	2506      	movs	r5, #6
 800dbc8:	e7ad      	b.n	800db26 <xTaskGenericCreate+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800dbca:	6863      	ldr	r3, [r4, #4]
 800dbcc:	9a08      	ldr	r2, [sp, #32]
 800dbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d8d5      	bhi.n	800db80 <xTaskGenericCreate+0xc0>
						pxCurrentTCB = pxNewTCB;
 800dbd4:	6066      	str	r6, [r4, #4]
 800dbd6:	e7d3      	b.n	800db80 <xTaskGenericCreate+0xc0>
				pxCurrentTCB =  pxNewTCB;
 800dbd8:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbda:	69e3      	ldr	r3, [r4, #28]
 800dbdc:	4f20      	ldr	r7, [pc, #128]	; (800dc60 <xTaskGenericCreate+0x1a0>)
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d004      	beq.n	800dbec <xTaskGenericCreate+0x12c>
 800dbe2:	4d1e      	ldr	r5, [pc, #120]	; (800dc5c <xTaskGenericCreate+0x19c>)
 800dbe4:	e7cd      	b.n	800db82 <xTaskGenericCreate+0xc2>
				taskYIELD_IF_USING_PREEMPTION();
 800dbe6:	f000 fefd 	bl	800e9e4 <vPortYield>
 800dbea:	e7e4      	b.n	800dbb6 <xTaskGenericCreate+0xf6>
 800dbec:	238c      	movs	r3, #140	; 0x8c
 800dbee:	4698      	mov	r8, r3
 800dbf0:	003d      	movs	r5, r7
 800dbf2:	44b8      	add	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dbf4:	0028      	movs	r0, r5
 800dbf6:	3514      	adds	r5, #20
 800dbf8:	f7ff fb5a 	bl	800d2b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbfc:	4545      	cmp	r5, r8
 800dbfe:	d1f9      	bne.n	800dbf4 <xTaskGenericCreate+0x134>
	vListInitialise( &xDelayedTaskList1 );
 800dc00:	2320      	movs	r3, #32
 800dc02:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800dc04:	0025      	movs	r5, r4
	vListInitialise( &xDelayedTaskList1 );
 800dc06:	44a0      	add	r8, r4
	vListInitialise( &xDelayedTaskList2 );
 800dc08:	3534      	adds	r5, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	f7ff fb50 	bl	800d2b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc10:	0028      	movs	r0, r5
 800dc12:	f7ff fb4d 	bl	800d2b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc16:	0020      	movs	r0, r4
 800dc18:	3048      	adds	r0, #72	; 0x48
 800dc1a:	f7ff fb49 	bl	800d2b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dc1e:	0020      	movs	r0, r4
 800dc20:	305c      	adds	r0, #92	; 0x5c
 800dc22:	f7ff fb45 	bl	800d2b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dc26:	0020      	movs	r0, r4
 800dc28:	3070      	adds	r0, #112	; 0x70
 800dc2a:	f7ff fb41 	bl	800d2b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc2e:	4643      	mov	r3, r8
 800dc30:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc32:	60e5      	str	r5, [r4, #12]
 800dc34:	4d09      	ldr	r5, [pc, #36]	; (800dc5c <xTaskGenericCreate+0x19c>)
 800dc36:	e7a4      	b.n	800db82 <xTaskGenericCreate+0xc2>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc38:	0090      	lsls	r0, r2, #2
 800dc3a:	f000 ff59 	bl	800eaf0 <pvPortMalloc>
 800dc3e:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800dc40:	d000      	beq.n	800dc44 <xTaskGenericCreate+0x184>
 800dc42:	e74a      	b.n	800dada <xTaskGenericCreate+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc44:	2501      	movs	r5, #1
 800dc46:	426d      	negs	r5, r5
 800dc48:	e7b5      	b.n	800dbb6 <xTaskGenericCreate+0xf6>
 800dc4a:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800dc4c:	0038      	movs	r0, r7
 800dc4e:	f000 ffc5 	bl	800ebdc <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc52:	426d      	negs	r5, r5
 800dc54:	e7af      	b.n	800dbb6 <xTaskGenericCreate+0xf6>
 800dc56:	46c0      	nop			; (mov r8, r8)
 800dc58:	200026c4 	.word	0x200026c4
 800dc5c:	20002744 	.word	0x20002744
 800dc60:	20002760 	.word	0x20002760

0800dc64 <uxTaskPriorityGet>:
	{
 800dc64:	b510      	push	{r4, lr}
 800dc66:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800dc68:	f000 fec8 	bl	800e9fc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc6c:	2c00      	cmp	r4, #0
 800dc6e:	d101      	bne.n	800dc74 <uxTaskPriorityGet+0x10>
 800dc70:	4b03      	ldr	r3, [pc, #12]	; (800dc80 <uxTaskPriorityGet+0x1c>)
 800dc72:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800dc74:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800dc76:	f000 fecd 	bl	800ea14 <vPortExitCritical>
	}
 800dc7a:	0020      	movs	r0, r4
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	46c0      	nop			; (mov r8, r8)
 800dc80:	200026c4 	.word	0x200026c4

0800dc84 <vTaskPrioritySet>:
	{
 800dc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc86:	46c6      	mov	lr, r8
 800dc88:	0004      	movs	r4, r0
 800dc8a:	b500      	push	{lr}
 800dc8c:	000d      	movs	r5, r1
 800dc8e:	2906      	cmp	r1, #6
 800dc90:	d900      	bls.n	800dc94 <vTaskPrioritySet+0x10>
 800dc92:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800dc94:	f000 feb2 	bl	800e9fc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc98:	2c00      	cmp	r4, #0
 800dc9a:	d02b      	beq.n	800dcf4 <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dc9c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800dc9e:	42aa      	cmp	r2, r5
 800dca0:	d01a      	beq.n	800dcd8 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800dca2:	4f21      	ldr	r7, [pc, #132]	; (800dd28 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800dca4:	d31d      	bcc.n	800dce2 <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800dca6:	687e      	ldr	r6, [r7, #4]
 800dca8:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800dcaa:	4273      	negs	r3, r6
 800dcac:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dcb0:	428a      	cmp	r2, r1
 800dcb2:	d100      	bne.n	800dcb6 <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800dcb4:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcb6:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800dcb8:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	db02      	blt.n	800dcc4 <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcbe:	2307      	movs	r3, #7
 800dcc0:	1b5d      	subs	r5, r3, r5
 800dcc2:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800dcc4:	008b      	lsls	r3, r1, #2
 800dcc6:	185b      	adds	r3, r3, r1
 800dcc8:	4d18      	ldr	r5, [pc, #96]	; (800dd2c <vTaskPrioritySet+0xa8>)
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	6962      	ldr	r2, [r4, #20]
 800dcce:	18eb      	adds	r3, r5, r3
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d015      	beq.n	800dd00 <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800dcd4:	2e01      	cmp	r6, #1
 800dcd6:	d010      	beq.n	800dcfa <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800dcd8:	f000 fe9c 	bl	800ea14 <vPortExitCritical>
	}
 800dcdc:	bc04      	pop	{r2}
 800dcde:	4690      	mov	r8, r2
 800dce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	42a3      	cmp	r3, r4
 800dce6:	d01d      	beq.n	800dd24 <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dce8:	2600      	movs	r6, #0
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcee:	429d      	cmp	r5, r3
 800dcf0:	4176      	adcs	r6, r6
 800dcf2:	e7dc      	b.n	800dcae <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800dcf4:	4b0c      	ldr	r3, [pc, #48]	; (800dd28 <vTaskPrioritySet+0xa4>)
 800dcf6:	685c      	ldr	r4, [r3, #4]
 800dcf8:	e7d0      	b.n	800dc9c <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800dcfa:	f000 fe73 	bl	800e9e4 <vPortYield>
 800dcfe:	e7eb      	b.n	800dcd8 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dd00:	1d23      	adds	r3, r4, #4
 800dd02:	0018      	movs	r0, r3
 800dd04:	4698      	mov	r8, r3
 800dd06:	f7ff fb07 	bl	800d318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd0c:	69ba      	ldr	r2, [r7, #24]
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d900      	bls.n	800dd14 <vTaskPrioritySet+0x90>
 800dd12:	61bb      	str	r3, [r7, #24]
 800dd14:	0098      	lsls	r0, r3, #2
 800dd16:	18c0      	adds	r0, r0, r3
 800dd18:	0080      	lsls	r0, r0, #2
 800dd1a:	1828      	adds	r0, r5, r0
 800dd1c:	4641      	mov	r1, r8
 800dd1e:	f7ff fad7 	bl	800d2d0 <vListInsertEnd>
 800dd22:	e7d7      	b.n	800dcd4 <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800dd24:	2600      	movs	r6, #0
 800dd26:	e7c2      	b.n	800dcae <vTaskPrioritySet+0x2a>
 800dd28:	200026c4 	.word	0x200026c4
 800dd2c:	20002760 	.word	0x20002760

0800dd30 <vTaskStartScheduler>:
{
 800dd30:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800dd32:	2400      	movs	r4, #0
{
 800dd34:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800dd36:	9403      	str	r4, [sp, #12]
 800dd38:	9402      	str	r4, [sp, #8]
 800dd3a:	9401      	str	r4, [sp, #4]
 800dd3c:	9400      	str	r4, [sp, #0]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	2296      	movs	r2, #150	; 0x96
 800dd42:	490b      	ldr	r1, [pc, #44]	; (800dd70 <vTaskStartScheduler+0x40>)
 800dd44:	480b      	ldr	r0, [pc, #44]	; (800dd74 <vTaskStartScheduler+0x44>)
 800dd46:	f7ff febb 	bl	800dac0 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800dd4a:	2801      	cmp	r0, #1
 800dd4c:	d001      	beq.n	800dd52 <vTaskStartScheduler+0x22>
}
 800dd4e:	b004      	add	sp, #16
 800dd50:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800dd52:	f000 fc83 	bl	800e65c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800dd56:	2801      	cmp	r0, #1
 800dd58:	d1f9      	bne.n	800dd4e <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800dd5a:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800dd5c:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <vTaskStartScheduler+0x48>)
 800dd5e:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800dd60:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <vTaskStartScheduler+0x4c>)
 800dd62:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dd64:	f7f9 fe46 	bl	80079f4 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800dd68:	f000 fe12 	bl	800e990 <xPortStartScheduler>
}
 800dd6c:	e7ef      	b.n	800dd4e <vTaskStartScheduler+0x1e>
 800dd6e:	46c0      	nop			; (mov r8, r8)
 800dd70:	080199bc 	.word	0x080199bc
 800dd74:	0800dfb1 	.word	0x0800dfb1
 800dd78:	20002744 	.word	0x20002744
 800dd7c:	200026c4 	.word	0x200026c4

0800dd80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800dd80:	4a02      	ldr	r2, [pc, #8]	; (800dd8c <vTaskSuspendAll+0xc>)
 800dd82:	6913      	ldr	r3, [r2, #16]
 800dd84:	3301      	adds	r3, #1
 800dd86:	6113      	str	r3, [r2, #16]
}
 800dd88:	4770      	bx	lr
 800dd8a:	46c0      	nop			; (mov r8, r8)
 800dd8c:	20002744 	.word	0x20002744

0800dd90 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800dd90:	4b01      	ldr	r3, [pc, #4]	; (800dd98 <xTaskGetTickCount+0x8>)
 800dd92:	6898      	ldr	r0, [r3, #8]
}
 800dd94:	4770      	bx	lr
 800dd96:	46c0      	nop			; (mov r8, r8)
 800dd98:	200026c4 	.word	0x200026c4

0800dd9c <xTaskGetTickCountFromISR>:
 800dd9c:	4b01      	ldr	r3, [pc, #4]	; (800dda4 <xTaskGetTickCountFromISR+0x8>)
 800dd9e:	6898      	ldr	r0, [r3, #8]
 800dda0:	4770      	bx	lr
 800dda2:	46c0      	nop			; (mov r8, r8)
 800dda4:	200026c4 	.word	0x200026c4

0800dda8 <xTaskIncrementTick>:
{
 800dda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddaa:	46d6      	mov	lr, sl
 800ddac:	464f      	mov	r7, r9
 800ddae:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb0:	4b3e      	ldr	r3, [pc, #248]	; (800deac <xTaskIncrementTick+0x104>)
{
 800ddb2:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb4:	691a      	ldr	r2, [r3, #16]
 800ddb6:	2a00      	cmp	r2, #0
 800ddb8:	d11b      	bne.n	800ddf2 <xTaskIncrementTick+0x4a>
		++xTickCount;
 800ddba:	4c3d      	ldr	r4, [pc, #244]	; (800deb0 <xTaskIncrementTick+0x108>)
 800ddbc:	68a2      	ldr	r2, [r4, #8]
 800ddbe:	3201      	adds	r2, #1
 800ddc0:	60a2      	str	r2, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800ddc2:	68a2      	ldr	r2, [r4, #8]
 800ddc4:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	d022      	beq.n	800de10 <xTaskIncrementTick+0x68>
 800ddca:	4b3a      	ldr	r3, [pc, #232]	; (800deb4 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ddcc:	2700      	movs	r7, #0
 800ddce:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ddd0:	4653      	mov	r3, sl
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4543      	cmp	r3, r8
 800ddd6:	d931      	bls.n	800de3c <xTaskIncrementTick+0x94>
 800ddd8:	4b37      	ldr	r3, [pc, #220]	; (800deb8 <xTaskIncrementTick+0x110>)
 800ddda:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dddc:	6863      	ldr	r3, [r4, #4]
 800ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde0:	0093      	lsls	r3, r2, #2
 800dde2:	189b      	adds	r3, r3, r2
 800dde4:	464a      	mov	r2, r9
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	58d3      	ldr	r3, [r2, r3]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d906      	bls.n	800ddfc <xTaskIncrementTick+0x54>
				xSwitchRequired = pdTRUE;
 800ddee:	2701      	movs	r7, #1
 800ddf0:	e004      	b.n	800ddfc <xTaskIncrementTick+0x54>
BaseType_t xSwitchRequired = pdFALSE;
 800ddf2:	2700      	movs	r7, #0
		++uxPendedTicks;
 800ddf4:	699a      	ldr	r2, [r3, #24]
 800ddf6:	4c2e      	ldr	r4, [pc, #184]	; (800deb0 <xTaskIncrementTick+0x108>)
 800ddf8:	3201      	adds	r2, #1
 800ddfa:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800ddfc:	6923      	ldr	r3, [r4, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d000      	beq.n	800de04 <xTaskIncrementTick+0x5c>
			xSwitchRequired = pdTRUE;
 800de02:	2701      	movs	r7, #1
}
 800de04:	0038      	movs	r0, r7
 800de06:	bc1c      	pop	{r2, r3, r4}
 800de08:	4690      	mov	r8, r2
 800de0a:	4699      	mov	r9, r3
 800de0c:	46a2      	mov	sl, r4
 800de0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800de10:	6822      	ldr	r2, [r4, #0]
 800de12:	68e1      	ldr	r1, [r4, #12]
 800de14:	6021      	str	r1, [r4, #0]
 800de16:	60e2      	str	r2, [r4, #12]
 800de18:	695a      	ldr	r2, [r3, #20]
 800de1a:	3201      	adds	r2, #1
 800de1c:	615a      	str	r2, [r3, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d13b      	bne.n	800de9e <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 800de26:	4b23      	ldr	r3, [pc, #140]	; (800deb4 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800de28:	2700      	movs	r7, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 800de2a:	469a      	mov	sl, r3
 800de2c:	2301      	movs	r3, #1
 800de2e:	4652      	mov	r2, sl
 800de30:	425b      	negs	r3, r3
 800de32:	6013      	str	r3, [r2, #0]
			if( xConstTickCount >= xNextTaskUnblockTime )
 800de34:	4653      	mov	r3, sl
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4543      	cmp	r3, r8
 800de3a:	d8cd      	bhi.n	800ddd8 <xTaskIncrementTick+0x30>
 800de3c:	4b1e      	ldr	r3, [pc, #120]	; (800deb8 <xTaskIncrementTick+0x110>)
 800de3e:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d026      	beq.n	800de96 <xTaskIncrementTick+0xee>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800de4e:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800de50:	4598      	cmp	r8, r3
 800de52:	d327      	bcc.n	800dea4 <xTaskIncrementTick+0xfc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800de54:	1d2e      	adds	r6, r5, #4
 800de56:	0030      	movs	r0, r6
 800de58:	f7ff fa5e 	bl	800d318 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d003      	beq.n	800de6a <xTaskIncrementTick+0xc2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de62:	0028      	movs	r0, r5
 800de64:	3018      	adds	r0, #24
 800de66:	f7ff fa57 	bl	800d318 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800de6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800de6c:	69a2      	ldr	r2, [r4, #24]
 800de6e:	4293      	cmp	r3, r2
 800de70:	d900      	bls.n	800de74 <xTaskIncrementTick+0xcc>
 800de72:	61a3      	str	r3, [r4, #24]
 800de74:	0098      	lsls	r0, r3, #2
 800de76:	18c0      	adds	r0, r0, r3
 800de78:	0080      	lsls	r0, r0, #2
 800de7a:	4448      	add	r0, r9
 800de7c:	0031      	movs	r1, r6
 800de7e:	f7ff fa27 	bl	800d2d0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de82:	6863      	ldr	r3, [r4, #4]
 800de84:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800de86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de88:	429a      	cmp	r2, r3
 800de8a:	d3d9      	bcc.n	800de40 <xTaskIncrementTick+0x98>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de8c:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800de8e:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1d8      	bne.n	800de48 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = portMAX_DELAY;
 800de96:	4652      	mov	r2, sl
 800de98:	3b01      	subs	r3, #1
 800de9a:	6013      	str	r3, [r2, #0]
						break;
 800de9c:	e79e      	b.n	800dddc <xTaskIncrementTick+0x34>
 800de9e:	f7ff fd8f 	bl	800d9c0 <prvResetNextTaskUnblockTime.part.2>
 800dea2:	e792      	b.n	800ddca <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800dea4:	4652      	mov	r2, sl
 800dea6:	6013      	str	r3, [r2, #0]
							break;
 800dea8:	e798      	b.n	800dddc <xTaskIncrementTick+0x34>
 800deaa:	46c0      	nop			; (mov r8, r8)
 800deac:	20002744 	.word	0x20002744
 800deb0:	200026c4 	.word	0x200026c4
 800deb4:	200000c4 	.word	0x200000c4
 800deb8:	20002760 	.word	0x20002760

0800debc <xTaskResumeAll>:
{
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	46ce      	mov	lr, r9
 800dec0:	4647      	mov	r7, r8
 800dec2:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800dec4:	f000 fd9a 	bl	800e9fc <vPortEnterCritical>
		--uxSchedulerSuspended;
 800dec8:	4f28      	ldr	r7, [pc, #160]	; (800df6c <xTaskResumeAll+0xb0>)
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	3b01      	subs	r3, #1
 800dece:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d13b      	bne.n	800df4e <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ded6:	4c26      	ldr	r4, [pc, #152]	; (800df70 <xTaskResumeAll+0xb4>)
 800ded8:	69e3      	ldr	r3, [r4, #28]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d037      	beq.n	800df4e <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800dede:	4b25      	ldr	r3, [pc, #148]	; (800df74 <xTaskResumeAll+0xb8>)
 800dee0:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800dee2:	2301      	movs	r3, #1
 800dee4:	4699      	mov	r9, r3
 800dee6:	e01a      	b.n	800df1e <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800deea:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800deec:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800deee:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800def0:	3018      	adds	r0, #24
 800def2:	f7ff fa11 	bl	800d318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800def6:	0030      	movs	r0, r6
 800def8:	f7ff fa0e 	bl	800d318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800defc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800defe:	69a2      	ldr	r2, [r4, #24]
 800df00:	4293      	cmp	r3, r2
 800df02:	d900      	bls.n	800df06 <xTaskResumeAll+0x4a>
 800df04:	61a3      	str	r3, [r4, #24]
 800df06:	0098      	lsls	r0, r3, #2
 800df08:	18c0      	adds	r0, r0, r3
 800df0a:	0080      	lsls	r0, r0, #2
 800df0c:	4440      	add	r0, r8
 800df0e:	0031      	movs	r1, r6
 800df10:	f7ff f9de 	bl	800d2d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df14:	6863      	ldr	r3, [r4, #4]
 800df16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800df18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d21f      	bcs.n	800df5e <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1e1      	bne.n	800dee8 <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00e      	beq.n	800df48 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00b      	beq.n	800df48 <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800df30:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800df32:	f7ff ff39 	bl	800dda8 <xTaskIncrementTick>
 800df36:	2800      	cmp	r0, #0
 800df38:	d000      	beq.n	800df3c <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800df3a:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	3b01      	subs	r3, #1
 800df40:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1f4      	bne.n	800df32 <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d00a      	beq.n	800df64 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800df4e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800df50:	f000 fd60 	bl	800ea14 <vPortExitCritical>
}
 800df54:	0020      	movs	r0, r4
 800df56:	bc0c      	pop	{r2, r3}
 800df58:	4690      	mov	r8, r2
 800df5a:	4699      	mov	r9, r3
 800df5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800df5e:	464b      	mov	r3, r9
 800df60:	6123      	str	r3, [r4, #16]
 800df62:	e7dc      	b.n	800df1e <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800df64:	f000 fd3e 	bl	800e9e4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800df68:	2401      	movs	r4, #1
 800df6a:	e7f1      	b.n	800df50 <xTaskResumeAll+0x94>
 800df6c:	20002744 	.word	0x20002744
 800df70:	200026c4 	.word	0x200026c4
 800df74:	20002760 	.word	0x20002760

0800df78 <vTaskDelay>:
	{
 800df78:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d011      	beq.n	800dfa2 <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800df7e:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <vTaskDelay+0x30>)
 800df80:	6913      	ldr	r3, [r2, #16]
 800df82:	3301      	adds	r3, #1
 800df84:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800df86:	4b09      	ldr	r3, [pc, #36]	; (800dfac <vTaskDelay+0x34>)
 800df88:	689c      	ldr	r4, [r3, #8]
 800df8a:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800df8c:	6858      	ldr	r0, [r3, #4]
 800df8e:	3004      	adds	r0, #4
 800df90:	f7ff f9c2 	bl	800d318 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800df94:	0020      	movs	r0, r4
 800df96:	f7ff fd1f 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800df9a:	f7ff ff8f 	bl	800debc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d101      	bne.n	800dfa6 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800dfa2:	f000 fd1f 	bl	800e9e4 <vPortYield>
	}
 800dfa6:	bd10      	pop	{r4, pc}
 800dfa8:	20002744 	.word	0x20002744
 800dfac:	200026c4 	.word	0x200026c4

0800dfb0 <prvIdleTask>:
{
 800dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb2:	4e15      	ldr	r6, [pc, #84]	; (800e008 <prvIdleTask+0x58>)
 800dfb4:	4c15      	ldr	r4, [pc, #84]	; (800e00c <prvIdleTask+0x5c>)
 800dfb6:	4f16      	ldr	r7, [pc, #88]	; (800e010 <prvIdleTask+0x60>)
 800dfb8:	e007      	b.n	800dfca <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800dfba:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800dfbc:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800dfc2:	f7ff ff7b 	bl	800debc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800dfc6:	2d00      	cmp	r5, #0
 800dfc8:	d108      	bne.n	800dfdc <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800dfca:	68e3      	ldr	r3, [r4, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d1f4      	bne.n	800dfba <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d9f9      	bls.n	800dfca <prvIdleTask+0x1a>
				taskYIELD();
 800dfd6:	f000 fd05 	bl	800e9e4 <vPortYield>
 800dfda:	e7f6      	b.n	800dfca <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800dfdc:	f000 fd0e 	bl	800e9fc <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dfe0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800dfe2:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dfe4:	1d28      	adds	r0, r5, #4
 800dfe6:	f7ff f997 	bl	800d318 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800dfea:	69f3      	ldr	r3, [r6, #28]
 800dfec:	3b01      	subs	r3, #1
 800dfee:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800dff0:	68e3      	ldr	r3, [r4, #12]
 800dff2:	3b01      	subs	r3, #1
 800dff4:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800dff6:	f000 fd0d 	bl	800ea14 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800dffa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800dffc:	f000 fdee 	bl	800ebdc <vPortFree>
		vPortFree( pxTCB );
 800e000:	0028      	movs	r0, r5
 800e002:	f000 fdeb 	bl	800ebdc <vPortFree>
 800e006:	e7e0      	b.n	800dfca <prvIdleTask+0x1a>
 800e008:	200026c4 	.word	0x200026c4
 800e00c:	20002744 	.word	0x20002744
 800e010:	20002760 	.word	0x20002760

0800e014 <uxTaskGetSystemState>:
	{
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	4647      	mov	r7, r8
 800e018:	46ce      	mov	lr, r9
 800e01a:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e01c:	4a33      	ldr	r2, [pc, #204]	; (800e0ec <uxTaskGetSystemState+0xd8>)
	{
 800e01e:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e020:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e022:	4f33      	ldr	r7, [pc, #204]	; (800e0f0 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e024:	3301      	adds	r3, #1
 800e026:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e028:	69fb      	ldr	r3, [r7, #28]
	{
 800e02a:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e02c:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e02e:	428b      	cmp	r3, r1
 800e030:	d82c      	bhi.n	800e08c <uxTaskGetSystemState+0x78>
 800e032:	238c      	movs	r3, #140	; 0x8c
 800e034:	425b      	negs	r3, r3
 800e036:	4699      	mov	r9, r3
 800e038:	4c2e      	ldr	r4, [pc, #184]	; (800e0f4 <uxTaskGetSystemState+0xe0>)
 800e03a:	2300      	movs	r3, #0
 800e03c:	44a1      	add	r9, r4
 800e03e:	e002      	b.n	800e046 <uxTaskGetSystemState+0x32>
 800e040:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e042:	454c      	cmp	r4, r9
 800e044:	d00d      	beq.n	800e062 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e046:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e048:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e04a:	2a00      	cmp	r2, #0
 800e04c:	d0f8      	beq.n	800e040 <uxTaskGetSystemState+0x2c>
 800e04e:	0021      	movs	r1, r4
 800e050:	2201      	movs	r2, #1
 800e052:	f7ff fc61 	bl	800d918 <prvListTaskWithinSingleList.part.1>
 800e056:	182d      	adds	r5, r5, r0
 800e058:	016b      	lsls	r3, r5, #5
 800e05a:	3c14      	subs	r4, #20
 800e05c:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e05e:	454c      	cmp	r4, r9
 800e060:	d1f1      	bne.n	800e046 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e062:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e064:	680b      	ldr	r3, [r1, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d121      	bne.n	800e0ae <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e06a:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e06c:	680b      	ldr	r3, [r1, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d127      	bne.n	800e0c2 <uxTaskGetSystemState+0xae>
 800e072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e074:	2b00      	cmp	r3, #0
 800e076:	d12d      	bne.n	800e0d4 <uxTaskGetSystemState+0xc0>
 800e078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10d      	bne.n	800e09a <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e07e:	4643      	mov	r3, r8
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e084:	f7f9 fcc6 	bl	8007a14 <ulMainGetRunTimeCounterValue>
 800e088:	4643      	mov	r3, r8
 800e08a:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e08c:	f7ff ff16 	bl	800debc <xTaskResumeAll>
	}
 800e090:	0028      	movs	r0, r5
 800e092:	bc0c      	pop	{r2, r3}
 800e094:	4690      	mov	r8, r2
 800e096:	4699      	mov	r9, r3
 800e098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e09a:	0039      	movs	r1, r7
 800e09c:	2203      	movs	r2, #3
 800e09e:	3170      	adds	r1, #112	; 0x70
 800e0a0:	f7ff fc3a 	bl	800d918 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e0a4:	4643      	mov	r3, r8
 800e0a6:	182d      	adds	r5, r5, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1eb      	bne.n	800e084 <uxTaskGetSystemState+0x70>
 800e0ac:	e7ee      	b.n	800e08c <uxTaskGetSystemState+0x78>
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	f7ff fc32 	bl	800d918 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e0b4:	68f9      	ldr	r1, [r7, #12]
 800e0b6:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e0b8:	680b      	ldr	r3, [r1, #0]
 800e0ba:	0168      	lsls	r0, r5, #5
 800e0bc:	1830      	adds	r0, r6, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0d7      	beq.n	800e072 <uxTaskGetSystemState+0x5e>
 800e0c2:	2202      	movs	r2, #2
 800e0c4:	f7ff fc28 	bl	800d918 <prvListTaskWithinSingleList.part.1>
 800e0c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0ca:	182d      	adds	r5, r5, r0
 800e0cc:	0168      	lsls	r0, r5, #5
 800e0ce:	1830      	adds	r0, r6, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d0d1      	beq.n	800e078 <uxTaskGetSystemState+0x64>
 800e0d4:	0039      	movs	r1, r7
 800e0d6:	2204      	movs	r2, #4
 800e0d8:	315c      	adds	r1, #92	; 0x5c
 800e0da:	f7ff fc1d 	bl	800d918 <prvListTaskWithinSingleList.part.1>
 800e0de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0e0:	182d      	adds	r5, r5, r0
 800e0e2:	0168      	lsls	r0, r5, #5
 800e0e4:	1830      	adds	r0, r6, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0c9      	beq.n	800e07e <uxTaskGetSystemState+0x6a>
 800e0ea:	e7d6      	b.n	800e09a <uxTaskGetSystemState+0x86>
 800e0ec:	20002744 	.word	0x20002744
 800e0f0:	200026c4 	.word	0x200026c4
 800e0f4:	200027d8 	.word	0x200027d8

0800e0f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0f8:	4b05      	ldr	r3, [pc, #20]	; (800e110 <vTaskSwitchContext+0x18>)
{
 800e0fa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e102:	2201      	movs	r2, #1
 800e104:	4b03      	ldr	r3, [pc, #12]	; (800e114 <vTaskSwitchContext+0x1c>)
 800e106:	611a      	str	r2, [r3, #16]
}
 800e108:	bd10      	pop	{r4, pc}
 800e10a:	f7ff fc83 	bl	800da14 <vTaskSwitchContext.part.5>
 800e10e:	e7fb      	b.n	800e108 <vTaskSwitchContext+0x10>
 800e110:	20002744 	.word	0x20002744
 800e114:	200026c4 	.word	0x200026c4

0800e118 <vTaskPlaceOnEventList>:
{
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e11c:	4c0b      	ldr	r4, [pc, #44]	; (800e14c <vTaskPlaceOnEventList+0x34>)
 800e11e:	6861      	ldr	r1, [r4, #4]
 800e120:	3118      	adds	r1, #24
 800e122:	f7ff f8e1 	bl	800d2e8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e126:	6860      	ldr	r0, [r4, #4]
 800e128:	3004      	adds	r0, #4
 800e12a:	f7ff f8f5 	bl	800d318 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e12e:	1c6b      	adds	r3, r5, #1
 800e130:	d004      	beq.n	800e13c <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800e132:	68a0      	ldr	r0, [r4, #8]
 800e134:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e136:	f7ff fc4f 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
}
 800e13a:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e13c:	0020      	movs	r0, r4
 800e13e:	6861      	ldr	r1, [r4, #4]
 800e140:	3070      	adds	r0, #112	; 0x70
 800e142:	3104      	adds	r1, #4
 800e144:	f7ff f8c4 	bl	800d2d0 <vListInsertEnd>
 800e148:	e7f7      	b.n	800e13a <vTaskPlaceOnEventList+0x22>
 800e14a:	46c0      	nop			; (mov r8, r8)
 800e14c:	200026c4 	.word	0x200026c4

0800e150 <vTaskPlaceOnEventListRestricted>:
	{
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e154:	4c06      	ldr	r4, [pc, #24]	; (800e170 <vTaskPlaceOnEventListRestricted+0x20>)
 800e156:	6861      	ldr	r1, [r4, #4]
 800e158:	3118      	adds	r1, #24
 800e15a:	f7ff f8b9 	bl	800d2d0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e15e:	6860      	ldr	r0, [r4, #4]
 800e160:	3004      	adds	r0, #4
 800e162:	f7ff f8d9 	bl	800d318 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e166:	68a0      	ldr	r0, [r4, #8]
 800e168:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e16a:	f7ff fc35 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
	}
 800e16e:	bd70      	pop	{r4, r5, r6, pc}
 800e170:	200026c4 	.word	0x200026c4

0800e174 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e174:	68c3      	ldr	r3, [r0, #12]
{
 800e176:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e178:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e17a:	0026      	movs	r6, r4
 800e17c:	3618      	adds	r6, #24
 800e17e:	0030      	movs	r0, r6
 800e180:	f7ff f8ca 	bl	800d318 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e184:	4b13      	ldr	r3, [pc, #76]	; (800e1d4 <xTaskRemoveFromEventList+0x60>)
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d11a      	bne.n	800e1c2 <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e18c:	1d26      	adds	r6, r4, #4
 800e18e:	0030      	movs	r0, r6
 800e190:	f7ff f8c2 	bl	800d318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e194:	4d10      	ldr	r5, [pc, #64]	; (800e1d8 <xTaskRemoveFromEventList+0x64>)
 800e196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e198:	69aa      	ldr	r2, [r5, #24]
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d818      	bhi.n	800e1d0 <xTaskRemoveFromEventList+0x5c>
 800e19e:	0098      	lsls	r0, r3, #2
 800e1a0:	18c0      	adds	r0, r0, r3
 800e1a2:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <xTaskRemoveFromEventList+0x68>)
 800e1a4:	0080      	lsls	r0, r0, #2
 800e1a6:	18c0      	adds	r0, r0, r3
 800e1a8:	0031      	movs	r1, r6
 800e1aa:	f7ff f891 	bl	800d2d0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1ae:	686b      	ldr	r3, [r5, #4]
 800e1b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e1b4:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d902      	bls.n	800e1c0 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800e1ba:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e1bc:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e1be:	612b      	str	r3, [r5, #16]
}
 800e1c0:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1c2:	4d05      	ldr	r5, [pc, #20]	; (800e1d8 <xTaskRemoveFromEventList+0x64>)
 800e1c4:	0031      	movs	r1, r6
 800e1c6:	0028      	movs	r0, r5
 800e1c8:	3048      	adds	r0, #72	; 0x48
 800e1ca:	f7ff f881 	bl	800d2d0 <vListInsertEnd>
 800e1ce:	e7ee      	b.n	800e1ae <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1d0:	61ab      	str	r3, [r5, #24]
 800e1d2:	e7e4      	b.n	800e19e <xTaskRemoveFromEventList+0x2a>
 800e1d4:	20002744 	.word	0x20002744
 800e1d8:	200026c4 	.word	0x200026c4
 800e1dc:	20002760 	.word	0x20002760

0800e1e0 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1e0:	4b03      	ldr	r3, [pc, #12]	; (800e1f0 <vTaskSetTimeOutState+0x10>)
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1e6:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <vTaskSetTimeOutState+0x14>)
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	6043      	str	r3, [r0, #4]
}
 800e1ec:	4770      	bx	lr
 800e1ee:	46c0      	nop			; (mov r8, r8)
 800e1f0:	20002744 	.word	0x20002744
 800e1f4:	200026c4 	.word	0x200026c4

0800e1f8 <xTaskCheckForTimeOut>:
{
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	000e      	movs	r6, r1
 800e1fc:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e1fe:	f000 fbfd 	bl	800e9fc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e202:	4911      	ldr	r1, [pc, #68]	; (800e248 <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800e204:	6832      	ldr	r2, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800e206:	6888      	ldr	r0, [r1, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800e208:	1c53      	adds	r3, r2, #1
 800e20a:	d01a      	beq.n	800e242 <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e20c:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <xTaskCheckForTimeOut+0x54>)
 800e20e:	6827      	ldr	r7, [r4, #0]
 800e210:	695d      	ldr	r5, [r3, #20]
 800e212:	469c      	mov	ip, r3
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	42af      	cmp	r7, r5
 800e218:	d002      	beq.n	800e220 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800e21a:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e21c:	4298      	cmp	r0, r3
 800e21e:	d20c      	bcs.n	800e23a <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e220:	1ac7      	subs	r7, r0, r3
			xReturn = pdTRUE;
 800e222:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800e224:	42ba      	cmp	r2, r7
 800e226:	d908      	bls.n	800e23a <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800e228:	1a1b      	subs	r3, r3, r0
 800e22a:	189b      	adds	r3, r3, r2
 800e22c:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e22e:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800e230:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e232:	695b      	ldr	r3, [r3, #20]
 800e234:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e236:	688b      	ldr	r3, [r1, #8]
 800e238:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800e23a:	f000 fbeb 	bl	800ea14 <vPortExitCritical>
}
 800e23e:	0028      	movs	r0, r5
 800e240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800e242:	2500      	movs	r5, #0
 800e244:	e7f9      	b.n	800e23a <xTaskCheckForTimeOut+0x42>
 800e246:	46c0      	nop			; (mov r8, r8)
 800e248:	200026c4 	.word	0x200026c4
 800e24c:	20002744 	.word	0x20002744

0800e250 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e250:	2201      	movs	r2, #1
 800e252:	4b01      	ldr	r3, [pc, #4]	; (800e258 <vTaskMissedYield+0x8>)
 800e254:	611a      	str	r2, [r3, #16]
}
 800e256:	4770      	bx	lr
 800e258:	200026c4 	.word	0x200026c4

0800e25c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e25c:	4b04      	ldr	r3, [pc, #16]	; (800e270 <xTaskGetSchedulerState+0x14>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e25e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	2a00      	cmp	r2, #0
 800e264:	d003      	beq.n	800e26e <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e266:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800e268:	4243      	negs	r3, r0
 800e26a:	4158      	adcs	r0, r3
 800e26c:	0040      	lsls	r0, r0, #1
	}
 800e26e:	4770      	bx	lr
 800e270:	20002744 	.word	0x20002744

0800e274 <vTaskPriorityInherit>:
	{
 800e274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e276:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e278:	d018      	beq.n	800e2ac <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e27a:	4d16      	ldr	r5, [pc, #88]	; (800e2d4 <vTaskPriorityInherit+0x60>)
 800e27c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e27e:	686b      	ldr	r3, [r5, #4]
 800e280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e282:	429a      	cmp	r2, r3
 800e284:	d212      	bcs.n	800e2ac <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e286:	6983      	ldr	r3, [r0, #24]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	db04      	blt.n	800e296 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e28c:	686b      	ldr	r3, [r5, #4]
 800e28e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e290:	2307      	movs	r3, #7
 800e292:	1a5b      	subs	r3, r3, r1
 800e294:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e296:	0093      	lsls	r3, r2, #2
 800e298:	189b      	adds	r3, r3, r2
 800e29a:	4e0f      	ldr	r6, [pc, #60]	; (800e2d8 <vTaskPriorityInherit+0x64>)
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	6962      	ldr	r2, [r4, #20]
 800e2a0:	18f3      	adds	r3, r6, r3
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d003      	beq.n	800e2ae <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2a6:	686b      	ldr	r3, [r5, #4]
 800e2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800e2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2ae:	1d27      	adds	r7, r4, #4
 800e2b0:	0038      	movs	r0, r7
 800e2b2:	f7ff f831 	bl	800d318 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2b6:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800e2b8:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d900      	bls.n	800e2c4 <vTaskPriorityInherit+0x50>
 800e2c2:	61ab      	str	r3, [r5, #24]
 800e2c4:	0098      	lsls	r0, r3, #2
 800e2c6:	18c0      	adds	r0, r0, r3
 800e2c8:	0080      	lsls	r0, r0, #2
 800e2ca:	1830      	adds	r0, r6, r0
 800e2cc:	0039      	movs	r1, r7
 800e2ce:	f7fe ffff 	bl	800d2d0 <vListInsertEnd>
	}
 800e2d2:	e7eb      	b.n	800e2ac <vTaskPriorityInherit+0x38>
 800e2d4:	200026c4 	.word	0x200026c4
 800e2d8:	20002760 	.word	0x20002760

0800e2dc <xTaskPriorityDisinherit>:
	{
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800e2e0:	d008      	beq.n	800e2f4 <xTaskPriorityDisinherit+0x18>
			( pxTCB->uxMutexesHeld )--;
 800e2e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e2e6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2ec:	428a      	cmp	r2, r1
 800e2ee:	d001      	beq.n	800e2f4 <xTaskPriorityDisinherit+0x18>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800e2f4:	2000      	movs	r0, #0
	}
 800e2f6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e2f8:	1d05      	adds	r5, r0, #4
 800e2fa:	0028      	movs	r0, r5
 800e2fc:	f7ff f80c 	bl	800d318 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e300:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e302:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e304:	1ad2      	subs	r2, r2, r3
 800e306:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e308:	4a07      	ldr	r2, [pc, #28]	; (800e328 <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e30a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e30c:	6991      	ldr	r1, [r2, #24]
 800e30e:	428b      	cmp	r3, r1
 800e310:	d900      	bls.n	800e314 <xTaskPriorityDisinherit+0x38>
 800e312:	6193      	str	r3, [r2, #24]
 800e314:	0098      	lsls	r0, r3, #2
 800e316:	18c0      	adds	r0, r0, r3
 800e318:	4b04      	ldr	r3, [pc, #16]	; (800e32c <xTaskPriorityDisinherit+0x50>)
 800e31a:	0080      	lsls	r0, r0, #2
 800e31c:	18c0      	adds	r0, r0, r3
 800e31e:	0029      	movs	r1, r5
 800e320:	f7fe ffd6 	bl	800d2d0 <vListInsertEnd>
					xReturn = pdTRUE;
 800e324:	2001      	movs	r0, #1
		return xReturn;
 800e326:	e7e6      	b.n	800e2f6 <xTaskPriorityDisinherit+0x1a>
 800e328:	200026c4 	.word	0x200026c4
 800e32c:	20002760 	.word	0x20002760

0800e330 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800e330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e332:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e334:	2600      	movs	r6, #0
	{
 800e336:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e338:	4b27      	ldr	r3, [pc, #156]	; (800e3d8 <vTaskList+0xa8>)
	{
 800e33a:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e33c:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e33e:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e340:	9202      	str	r2, [sp, #8]
	{
 800e342:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e344:	69d8      	ldr	r0, [r3, #28]
 800e346:	0140      	lsls	r0, r0, #5
 800e348:	f000 fbd2 	bl	800eaf0 <pvPortMalloc>
 800e34c:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e34e:	d03f      	beq.n	800e3d0 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800e350:	2200      	movs	r2, #0
 800e352:	9902      	ldr	r1, [sp, #8]
 800e354:	f7ff fe5e 	bl	800e014 <uxTaskGetSystemState>
 800e358:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800e35a:	9603      	str	r6, [sp, #12]
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	9a02      	ldr	r2, [sp, #8]
 800e360:	429a      	cmp	r2, r3
 800e362:	d932      	bls.n	800e3ca <vTaskList+0x9a>
 800e364:	4b1d      	ldr	r3, [pc, #116]	; (800e3dc <vTaskList+0xac>)
 800e366:	4e1e      	ldr	r6, [pc, #120]	; (800e3e0 <vTaskList+0xb0>)
 800e368:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	2700      	movs	r7, #0
 800e36e:	015b      	lsls	r3, r3, #5
 800e370:	18eb      	adds	r3, r5, r3
 800e372:	7b1b      	ldrb	r3, [r3, #12]
 800e374:	3b01      	subs	r3, #1
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b03      	cmp	r3, #3
 800e37a:	d801      	bhi.n	800e380 <vTaskList+0x50>
 800e37c:	4443      	add	r3, r8
 800e37e:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e380:	9b03      	ldr	r3, [sp, #12]
 800e382:	0020      	movs	r0, r4
 800e384:	015b      	lsls	r3, r3, #5
 800e386:	18eb      	adds	r3, r5, r3
 800e388:	6859      	ldr	r1, [r3, #4]
 800e38a:	f7ff faad 	bl	800d8e8 <prvWriteNameToBuffer>
 800e38e:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800e390:	9b03      	ldr	r3, [sp, #12]
 800e392:	9a03      	ldr	r2, [sp, #12]
 800e394:	9903      	ldr	r1, [sp, #12]
 800e396:	015b      	lsls	r3, r3, #5
 800e398:	0149      	lsls	r1, r1, #5
 800e39a:	1869      	adds	r1, r5, r1
 800e39c:	6889      	ldr	r1, [r1, #8]
 800e39e:	18eb      	adds	r3, r5, r3
 800e3a0:	0152      	lsls	r2, r2, #5
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	18aa      	adds	r2, r5, r2
 800e3a6:	9101      	str	r1, [sp, #4]
 800e3a8:	8b92      	ldrh	r2, [r2, #28]
 800e3aa:	0031      	movs	r1, r6
 800e3ac:	9200      	str	r2, [sp, #0]
 800e3ae:	003a      	movs	r2, r7
 800e3b0:	f004 f9b4 	bl	801271c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e3b4:	0020      	movs	r0, r4
 800e3b6:	f7f1 feaf 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800e3ba:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800e3bc:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800e3be:	3301      	adds	r3, #1
 800e3c0:	9303      	str	r3, [sp, #12]
 800e3c2:	9a03      	ldr	r2, [sp, #12]
 800e3c4:	9b02      	ldr	r3, [sp, #8]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d3cf      	bcc.n	800e36a <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e3ca:	0028      	movs	r0, r5
 800e3cc:	f000 fc06 	bl	800ebdc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3d0:	b004      	add	sp, #16
 800e3d2:	bc04      	pop	{r2}
 800e3d4:	4690      	mov	r8, r2
 800e3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3d8:	200026c4 	.word	0x200026c4
 800e3dc:	080170dc 	.word	0x080170dc
 800e3e0:	080199c4 	.word	0x080199c4

0800e3e4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e6:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e3e8:	2600      	movs	r6, #0
	{
 800e3ea:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e3ec:	4b28      	ldr	r3, [pc, #160]	; (800e490 <vTaskGetRunTimeStats+0xac>)
	{
 800e3ee:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800e3f0:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800e3f2:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800e3f4:	9201      	str	r2, [sp, #4]
	{
 800e3f6:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e3f8:	69d8      	ldr	r0, [r3, #28]
 800e3fa:	0140      	lsls	r0, r0, #5
 800e3fc:	f000 fb78 	bl	800eaf0 <pvPortMalloc>
 800e400:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800e402:	d040      	beq.n	800e486 <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e404:	9901      	ldr	r1, [sp, #4]
 800e406:	aa03      	add	r2, sp, #12
 800e408:	f7ff fe04 	bl	800e014 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e40c:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e40e:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800e410:	9803      	ldr	r0, [sp, #12]
 800e412:	f7f1 fe9d 	bl	8000150 <__udivsi3>
 800e416:	1e01      	subs	r1, r0, #0
 800e418:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800e41a:	d031      	beq.n	800e480 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e41c:	9602      	str	r6, [sp, #8]
 800e41e:	9b02      	ldr	r3, [sp, #8]
 800e420:	9a01      	ldr	r2, [sp, #4]
 800e422:	429a      	cmp	r2, r3
 800e424:	d92c      	bls.n	800e480 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e426:	4b1b      	ldr	r3, [pc, #108]	; (800e494 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e428:	4f1b      	ldr	r7, [pc, #108]	; (800e498 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e42a:	4698      	mov	r8, r3
 800e42c:	e00f      	b.n	800e44e <vTaskGetRunTimeStats+0x6a>
 800e42e:	0033      	movs	r3, r6
 800e430:	4641      	mov	r1, r8
 800e432:	f004 f973 	bl	801271c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800e436:	0020      	movs	r0, r4
 800e438:	f7f1 fe6e 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800e43c:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800e43e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800e440:	3301      	adds	r3, #1
 800e442:	9302      	str	r3, [sp, #8]
 800e444:	9a02      	ldr	r2, [sp, #8]
 800e446:	9b01      	ldr	r3, [sp, #4]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d219      	bcs.n	800e480 <vTaskGetRunTimeStats+0x9c>
 800e44c:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e44e:	9b02      	ldr	r3, [sp, #8]
 800e450:	015b      	lsls	r3, r3, #5
 800e452:	18eb      	adds	r3, r5, r3
 800e454:	6998      	ldr	r0, [r3, #24]
 800e456:	f7f1 fe7b 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e45a:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e45c:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e45e:	015b      	lsls	r3, r3, #5
 800e460:	18eb      	adds	r3, r5, r3
 800e462:	6859      	ldr	r1, [r3, #4]
 800e464:	0020      	movs	r0, r4
 800e466:	f7ff fa3f 	bl	800d8e8 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e46a:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e46c:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e46e:	015b      	lsls	r3, r3, #5
 800e470:	18eb      	adds	r3, r5, r3
 800e472:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800e474:	2e00      	cmp	r6, #0
 800e476:	d1da      	bne.n	800e42e <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e478:	0039      	movs	r1, r7
 800e47a:	f004 f94f 	bl	801271c <sprintf>
 800e47e:	e7da      	b.n	800e436 <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e480:	0028      	movs	r0, r5
 800e482:	f000 fbab 	bl	800ebdc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e486:	b004      	add	sp, #16
 800e488:	bc04      	pop	{r2}
 800e48a:	4690      	mov	r8, r2
 800e48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e48e:	46c0      	nop			; (mov r8, r8)
 800e490:	200026c4 	.word	0x200026c4
 800e494:	080199d4 	.word	0x080199d4
 800e498:	080199e0 	.word	0x080199e0

0800e49c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e49c:	4b04      	ldr	r3, [pc, #16]	; (800e4b0 <pvTaskIncrementMutexHeldCount+0x14>)
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	2a00      	cmp	r2, #0
 800e4a2:	d003      	beq.n	800e4ac <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e4a4:	6859      	ldr	r1, [r3, #4]
 800e4a6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e4a8:	3201      	adds	r2, #1
 800e4aa:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e4ac:	6858      	ldr	r0, [r3, #4]
	}
 800e4ae:	4770      	bx	lr
 800e4b0:	200026c4 	.word	0x200026c4

0800e4b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	0006      	movs	r6, r0
 800e4b8:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e4ba:	f000 fa9f 	bl	800e9fc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e4be:	4c1c      	ldr	r4, [pc, #112]	; (800e530 <ulTaskNotifyTake+0x7c>)
 800e4c0:	6863      	ldr	r3, [r4, #4]
 800e4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d105      	bne.n	800e4d4 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	6862      	ldr	r2, [r4, #4]
 800e4cc:	335c      	adds	r3, #92	; 0x5c
 800e4ce:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	d119      	bne.n	800e508 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e4d4:	f000 fa9e 	bl	800ea14 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e4d8:	f000 fa90 	bl	800e9fc <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e4dc:	6863      	ldr	r3, [r4, #4]
 800e4de:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	d005      	beq.n	800e4f0 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800e4e4:	2e00      	cmp	r6, #0
 800e4e6:	d10b      	bne.n	800e500 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800e4e8:	6862      	ldr	r2, [r4, #4]
 800e4ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e4f0:	235c      	movs	r3, #92	; 0x5c
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	6862      	ldr	r2, [r4, #4]
 800e4f6:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e4f8:	f000 fa8c 	bl	800ea14 <vPortExitCritical>

		return ulReturn;
	}
 800e4fc:	0028      	movs	r0, r5
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e500:	2200      	movs	r2, #0
 800e502:	6863      	ldr	r3, [r4, #4]
 800e504:	659a      	str	r2, [r3, #88]	; 0x58
 800e506:	e7f3      	b.n	800e4f0 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e508:	6860      	ldr	r0, [r4, #4]
 800e50a:	3004      	adds	r0, #4
 800e50c:	f7fe ff04 	bl	800d318 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e510:	1c6b      	adds	r3, r5, #1
 800e512:	d006      	beq.n	800e522 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800e514:	68a0      	ldr	r0, [r4, #8]
 800e516:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e518:	f7ff fa5e 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e51c:	f000 fa62 	bl	800e9e4 <vPortYield>
 800e520:	e7d8      	b.n	800e4d4 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e522:	0020      	movs	r0, r4
 800e524:	6861      	ldr	r1, [r4, #4]
 800e526:	3070      	adds	r0, #112	; 0x70
 800e528:	3104      	adds	r1, #4
 800e52a:	f7fe fed1 	bl	800d2d0 <vListInsertEnd>
 800e52e:	e7f5      	b.n	800e51c <ulTaskNotifyTake+0x68>
 800e530:	200026c4 	.word	0x200026c4

0800e534 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e536:	001e      	movs	r6, r3
 800e538:	0004      	movs	r4, r0
 800e53a:	000f      	movs	r7, r1
 800e53c:	0015      	movs	r5, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e53e:	f000 fa5d 	bl	800e9fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e542:	2e00      	cmp	r6, #0
 800e544:	d001      	beq.n	800e54a <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e548:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e54a:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800e54c:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e54e:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800e550:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800e552:	b2db      	uxtb	r3, r3

			switch( eAction )
 800e554:	2d02      	cmp	r5, #2
 800e556:	d02e      	beq.n	800e5b6 <xTaskGenericNotify+0x82>
 800e558:	d927      	bls.n	800e5aa <xTaskGenericNotify+0x76>
 800e55a:	2d03      	cmp	r5, #3
 800e55c:	d003      	beq.n	800e566 <xTaskGenericNotify+0x32>
 800e55e:	2d04      	cmp	r5, #4
 800e560:	d102      	bne.n	800e568 <xTaskGenericNotify+0x34>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e562:	2b02      	cmp	r3, #2
 800e564:	d02b      	beq.n	800e5be <xTaskGenericNotify+0x8a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e566:	65a7      	str	r7, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d004      	beq.n	800e576 <xTaskGenericNotify+0x42>
 800e56c:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e56e:	f000 fa51 	bl	800ea14 <vPortExitCritical>

		return xReturn;
	}
 800e572:	0020      	movs	r0, r4
 800e574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e576:	1d26      	adds	r6, r4, #4
 800e578:	0030      	movs	r0, r6
 800e57a:	f7fe fecd 	bl	800d318 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e57e:	4d11      	ldr	r5, [pc, #68]	; (800e5c4 <xTaskGenericNotify+0x90>)
 800e580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e582:	69aa      	ldr	r2, [r5, #24]
 800e584:	4293      	cmp	r3, r2
 800e586:	d900      	bls.n	800e58a <xTaskGenericNotify+0x56>
 800e588:	61ab      	str	r3, [r5, #24]
 800e58a:	0098      	lsls	r0, r3, #2
 800e58c:	18c0      	adds	r0, r0, r3
 800e58e:	4b0e      	ldr	r3, [pc, #56]	; (800e5c8 <xTaskGenericNotify+0x94>)
 800e590:	0080      	lsls	r0, r0, #2
 800e592:	18c0      	adds	r0, r0, r3
 800e594:	0031      	movs	r1, r6
 800e596:	f7fe fe9b 	bl	800d2d0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e59a:	686b      	ldr	r3, [r5, #4]
 800e59c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d9e3      	bls.n	800e56c <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800e5a4:	f000 fa1e 	bl	800e9e4 <vPortYield>
 800e5a8:	e7e0      	b.n	800e56c <xTaskGenericNotify+0x38>
			switch( eAction )
 800e5aa:	2d01      	cmp	r5, #1
 800e5ac:	d1dc      	bne.n	800e568 <xTaskGenericNotify+0x34>
					pxTCB->ulNotifiedValue |= ulValue;
 800e5ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e5b0:	4317      	orrs	r7, r2
 800e5b2:	65a7      	str	r7, [r4, #88]	; 0x58
					break;
 800e5b4:	e7d8      	b.n	800e568 <xTaskGenericNotify+0x34>
					( pxTCB->ulNotifiedValue )++;
 800e5b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e5bc:	e7d4      	b.n	800e568 <xTaskGenericNotify+0x34>
						xReturn = pdFAIL;
 800e5be:	2400      	movs	r4, #0
 800e5c0:	e7d5      	b.n	800e56e <xTaskGenericNotify+0x3a>
 800e5c2:	46c0      	nop			; (mov r8, r8)
 800e5c4:	200026c4 	.word	0x200026c4
 800e5c8:	20002760 	.word	0x20002760

0800e5cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5cc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5ce:	f000 fa15 	bl	800e9fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5d2:	4c0f      	ldr	r4, [pc, #60]	; (800e610 <prvCheckForValidListAndQueue+0x44>)
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5da:	f000 fa1b 	bl	800ea14 <vPortExitCritical>
}
 800e5de:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800e5e0:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800e5e2:	1d26      	adds	r6, r4, #4
 800e5e4:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800e5e6:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800e5e8:	f7fe fe62 	bl	800d2b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5ec:	0028      	movs	r0, r5
 800e5ee:	f7fe fe5f 	bl	800d2b0 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	2110      	movs	r1, #16
 800e5f6:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800e5f8:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800e5fa:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e5fc:	f7fe ff6a 	bl	800d4d4 <xQueueGenericCreate>
 800e600:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e602:	2800      	cmp	r0, #0
 800e604:	d0e9      	beq.n	800e5da <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e606:	4903      	ldr	r1, [pc, #12]	; (800e614 <prvCheckForValidListAndQueue+0x48>)
 800e608:	f7ff f93e 	bl	800d888 <vQueueAddToRegistry>
 800e60c:	e7e5      	b.n	800e5da <prvCheckForValidListAndQueue+0xe>
 800e60e:	46c0      	nop			; (mov r8, r8)
 800e610:	200027ec 	.word	0x200027ec
 800e614:	080199ec 	.word	0x080199ec

0800e618 <prvInsertTimerInActiveList>:
{
 800e618:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e61a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e61c:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e61e:	4291      	cmp	r1, r2
 800e620:	d806      	bhi.n	800e630 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e622:	1ad2      	subs	r2, r2, r3
 800e624:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800e626:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e628:	429a      	cmp	r2, r3
 800e62a:	d30d      	bcc.n	800e648 <prvInsertTimerInActiveList+0x30>
}
 800e62c:	0020      	movs	r0, r4
 800e62e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e630:	429a      	cmp	r2, r3
 800e632:	d202      	bcs.n	800e63a <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800e634:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e636:	4299      	cmp	r1, r3
 800e638:	d2f8      	bcs.n	800e62c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e63a:	4b07      	ldr	r3, [pc, #28]	; (800e658 <prvInsertTimerInActiveList+0x40>)
 800e63c:	1d01      	adds	r1, r0, #4
 800e63e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e640:	f7fe fe52 	bl	800d2e8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e644:	2400      	movs	r4, #0
 800e646:	e7f1      	b.n	800e62c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e648:	4b03      	ldr	r3, [pc, #12]	; (800e658 <prvInsertTimerInActiveList+0x40>)
 800e64a:	1d01      	adds	r1, r0, #4
 800e64c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e64e:	f7fe fe4b 	bl	800d2e8 <vListInsert>
 800e652:	2400      	movs	r4, #0
 800e654:	e7ea      	b.n	800e62c <prvInsertTimerInActiveList+0x14>
 800e656:	46c0      	nop			; (mov r8, r8)
 800e658:	200027ec 	.word	0x200027ec

0800e65c <xTimerCreateTimerTask>:
{
 800e65c:	b500      	push	{lr}
 800e65e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e660:	f7ff ffb4 	bl	800e5cc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e664:	4b08      	ldr	r3, [pc, #32]	; (800e688 <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800e666:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00a      	beq.n	800e684 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e66e:	2303      	movs	r3, #3
 800e670:	9003      	str	r0, [sp, #12]
 800e672:	9002      	str	r0, [sp, #8]
 800e674:	9001      	str	r0, [sp, #4]
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	2296      	movs	r2, #150	; 0x96
 800e67a:	2300      	movs	r3, #0
 800e67c:	4903      	ldr	r1, [pc, #12]	; (800e68c <xTimerCreateTimerTask+0x30>)
 800e67e:	4804      	ldr	r0, [pc, #16]	; (800e690 <xTimerCreateTimerTask+0x34>)
 800e680:	f7ff fa1e 	bl	800dac0 <xTaskGenericCreate>
}
 800e684:	b005      	add	sp, #20
 800e686:	bd00      	pop	{pc}
 800e688:	200027ec 	.word	0x200027ec
 800e68c:	080199f4 	.word	0x080199f4
 800e690:	0800e795 	.word	0x0800e795

0800e694 <xTimerCreate>:
{
 800e694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e696:	46c6      	mov	lr, r8
 800e698:	000d      	movs	r5, r1
 800e69a:	b500      	push	{lr}
 800e69c:	4680      	mov	r8, r0
 800e69e:	0017      	movs	r7, r2
 800e6a0:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	d014      	beq.n	800e6d0 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e6a6:	202c      	movs	r0, #44	; 0x2c
 800e6a8:	f000 fa22 	bl	800eaf0 <pvPortMalloc>
 800e6ac:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e6ae:	d00b      	beq.n	800e6c8 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e6b0:	f7ff ff8c 	bl	800e5cc <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e6b4:	4643      	mov	r3, r8
 800e6b6:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e6b8:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e6ba:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e6bc:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e6be:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e6c0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e6c2:	1d20      	adds	r0, r4, #4
 800e6c4:	f7fe fe00 	bl	800d2c8 <vListInitialiseItem>
}
 800e6c8:	0020      	movs	r0, r4
 800e6ca:	bc04      	pop	{r2}
 800e6cc:	4690      	mov	r8, r2
 800e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800e6d0:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800e6d2:	e7f9      	b.n	800e6c8 <xTimerCreate+0x34>

0800e6d4 <xTimerGenericCommand>:
{
 800e6d4:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800e6d6:	4d13      	ldr	r5, [pc, #76]	; (800e724 <xTimerGenericCommand+0x50>)
{
 800e6d8:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800e6da:	682c      	ldr	r4, [r5, #0]
{
 800e6dc:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800e6de:	2c00      	cmp	r4, #0
 800e6e0:	d017      	beq.n	800e712 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800e6e2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e6e4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e6e6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e6e8:	2905      	cmp	r1, #5
 800e6ea:	dc0a      	bgt.n	800e702 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e6ec:	f7ff fdb6 	bl	800e25c <xTaskGetSchedulerState>
 800e6f0:	2802      	cmp	r0, #2
 800e6f2:	d010      	beq.n	800e716 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e6f4:	6828      	ldr	r0, [r5, #0]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	4669      	mov	r1, sp
 800e6fc:	f7fe ff16 	bl	800d52c <xQueueGenericSend>
 800e700:	e005      	b.n	800e70e <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e702:	2300      	movs	r3, #0
 800e704:	0032      	movs	r2, r6
 800e706:	4669      	mov	r1, sp
 800e708:	0020      	movs	r0, r4
 800e70a:	f7fe ff8b 	bl	800d624 <xQueueGenericSendFromISR>
}
 800e70e:	b004      	add	sp, #16
 800e710:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800e712:	2000      	movs	r0, #0
	return xReturn;
 800e714:	e7fb      	b.n	800e70e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e716:	6828      	ldr	r0, [r5, #0]
 800e718:	2300      	movs	r3, #0
 800e71a:	9a08      	ldr	r2, [sp, #32]
 800e71c:	4669      	mov	r1, sp
 800e71e:	f7fe ff05 	bl	800d52c <xQueueGenericSend>
 800e722:	e7f4      	b.n	800e70e <xTimerGenericCommand+0x3a>
 800e724:	200027ec 	.word	0x200027ec

0800e728 <prvSwitchTimerLists>:
{
 800e728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72a:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e72c:	2300      	movs	r3, #0
{
 800e72e:	b500      	push	{lr}
 800e730:	4e17      	ldr	r6, [pc, #92]	; (800e790 <prvSwitchTimerLists+0x68>)
 800e732:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e734:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e736:	e00c      	b.n	800e752 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e738:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e73a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e73c:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e73e:	1d25      	adds	r5, r4, #4
 800e740:	0028      	movs	r0, r5
 800e742:	f7fe fde9 	bl	800d318 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e748:	0020      	movs	r0, r4
 800e74a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e74c:	69e3      	ldr	r3, [r4, #28]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d00a      	beq.n	800e768 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e752:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	2a00      	cmp	r2, #0
 800e758:	d1ee      	bne.n	800e738 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800e75a:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800e75c:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800e75e:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800e760:	b002      	add	sp, #8
 800e762:	bc04      	pop	{r2}
 800e764:	4690      	mov	r8, r2
 800e766:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e768:	69a3      	ldr	r3, [r4, #24]
 800e76a:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800e76c:	429f      	cmp	r7, r3
 800e76e:	d206      	bcs.n	800e77e <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e770:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e772:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e774:	0029      	movs	r1, r5
 800e776:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800e778:	f7fe fdb6 	bl	800d2e8 <vListInsert>
 800e77c:	e7e9      	b.n	800e752 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e77e:	4643      	mov	r3, r8
 800e780:	003a      	movs	r2, r7
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	2100      	movs	r1, #0
 800e786:	2300      	movs	r3, #0
 800e788:	0020      	movs	r0, r4
 800e78a:	f7ff ffa3 	bl	800e6d4 <xTimerGenericCommand>
 800e78e:	e7e0      	b.n	800e752 <prvSwitchTimerLists+0x2a>
 800e790:	200027ec 	.word	0x200027ec

0800e794 <prvTimerTask>:
		xNextExpireTime = ( TickType_t ) 0U;
 800e794:	2300      	movs	r3, #0
{
 800e796:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e798:	4645      	mov	r5, r8
 800e79a:	4657      	mov	r7, sl
 800e79c:	46de      	mov	lr, fp
 800e79e:	464e      	mov	r6, r9
		xNextExpireTime = ( TickType_t ) 0U;
 800e7a0:	4698      	mov	r8, r3
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	469a      	mov	sl, r3
{
 800e7a6:	b5e0      	push	{r5, r6, r7, lr}
 800e7a8:	4d61      	ldr	r5, [pc, #388]	; (800e930 <prvTimerTask+0x19c>)
 800e7aa:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	d050      	beq.n	800e856 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800e7b8:	f7ff fae2 	bl	800dd80 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e7bc:	f7ff fae8 	bl	800dd90 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e7c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e7c2:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e7c4:	4283      	cmp	r3, r0
 800e7c6:	d84e      	bhi.n	800e866 <prvTimerTask+0xd2>
	xLastTime = xTimeNow;
 800e7c8:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e7ca:	4286      	cmp	r6, r0
 800e7cc:	d961      	bls.n	800e892 <prvTimerTask+0xfe>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e7ce:	1b31      	subs	r1, r6, r4
 800e7d0:	6828      	ldr	r0, [r5, #0]
 800e7d2:	f7ff f86b 	bl	800d8ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7d6:	f7ff fb71 	bl	800debc <xTaskResumeAll>
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	d056      	beq.n	800e88c <prvTimerTask+0xf8>
 800e7de:	2784      	movs	r7, #132	; 0x84
 800e7e0:	00bf      	lsls	r7, r7, #2
 800e7e2:	23c7      	movs	r3, #199	; 0xc7
 800e7e4:	4699      	mov	r9, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	a904      	add	r1, sp, #16
 800e7ec:	6828      	ldr	r0, [r5, #0]
 800e7ee:	f7fe ff7b 	bl	800d6e8 <xQueueGenericReceive>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d0da      	beq.n	800e7ac <prvTimerTask+0x18>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e7f6:	9b04      	ldr	r3, [sp, #16]
 800e7f8:	9c06      	ldr	r4, [sp, #24]
 800e7fa:	9302      	str	r3, [sp, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	da0b      	bge.n	800e818 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e800:	9b07      	ldr	r3, [sp, #28]
 800e802:	0020      	movs	r0, r4
 800e804:	9302      	str	r3, [sp, #8]
 800e806:	9b05      	ldr	r3, [sp, #20]
 800e808:	9902      	ldr	r1, [sp, #8]
 800e80a:	9303      	str	r3, [sp, #12]
 800e80c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e80e:	9b04      	ldr	r3, [sp, #16]
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	dbe7      	blt.n	800e7e6 <prvTimerTask+0x52>
 800e816:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e818:	6963      	ldr	r3, [r4, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <prvTimerTask+0x90>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e81e:	1d20      	adds	r0, r4, #4
 800e820:	f7fe fd7a 	bl	800d318 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e824:	f7ff fab4 	bl	800dd90 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e828:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e82a:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800e82c:	4298      	cmp	r0, r3
 800e82e:	d320      	bcc.n	800e872 <prvTimerTask+0xde>
 800e830:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800e832:	636e      	str	r6, [r5, #52]	; 0x34
 800e834:	2b09      	cmp	r3, #9
 800e836:	d8d6      	bhi.n	800e7e6 <prvTimerTask+0x52>
 800e838:	4652      	mov	r2, sl
 800e83a:	409a      	lsls	r2, r3
 800e83c:	0013      	movs	r3, r2
 800e83e:	403a      	ands	r2, r7
 800e840:	4693      	mov	fp, r2
 800e842:	d16b      	bne.n	800e91c <prvTimerTask+0x188>
 800e844:	464a      	mov	r2, r9
 800e846:	421a      	tst	r2, r3
 800e848:	d144      	bne.n	800e8d4 <prvTimerTask+0x140>
 800e84a:	069b      	lsls	r3, r3, #26
 800e84c:	d5cb      	bpl.n	800e7e6 <prvTimerTask+0x52>
					vPortFree( pxTimer );
 800e84e:	0020      	movs	r0, r4
 800e850:	f000 f9c4 	bl	800ebdc <vPortFree>
 800e854:	e7c5      	b.n	800e7e2 <prvTimerTask+0x4e>
	vTaskSuspendAll();
 800e856:	f7ff fa93 	bl	800dd80 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e85a:	f7ff fa99 	bl	800dd90 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e85e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800e860:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e862:	4283      	cmp	r3, r0
 800e864:	d908      	bls.n	800e878 <prvTimerTask+0xe4>
		prvSwitchTimerLists();
 800e866:	f7ff ff5f 	bl	800e728 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e86a:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800e86c:	f7ff fb26 	bl	800debc <xTaskResumeAll>
 800e870:	e7b5      	b.n	800e7de <prvTimerTask+0x4a>
		prvSwitchTimerLists();
 800e872:	f7ff ff59 	bl	800e728 <prvSwitchTimerLists>
 800e876:	e7db      	b.n	800e830 <prvTimerTask+0x9c>
		xNextExpireTime = ( TickType_t ) 0U;
 800e878:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e87a:	6828      	ldr	r0, [r5, #0]
 800e87c:	1b31      	subs	r1, r6, r4
	xLastTime = xTimeNow;
 800e87e:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e880:	f7ff f814 	bl	800d8ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e884:	f7ff fb1a 	bl	800debc <xTaskResumeAll>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d1a8      	bne.n	800e7de <prvTimerTask+0x4a>
					portYIELD_WITHIN_API();
 800e88c:	f000 f8aa 	bl	800e9e4 <vPortYield>
 800e890:	e7a5      	b.n	800e7de <prvTimerTask+0x4a>
				( void ) xTaskResumeAll();
 800e892:	f7ff fb13 	bl	800debc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e896:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e89c:	1d38      	adds	r0, r7, #4
 800e89e:	f7fe fd3b 	bl	800d318 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d003      	beq.n	800e8b0 <prvTimerTask+0x11c>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	0038      	movs	r0, r7
 800e8ac:	4798      	blx	r3
 800e8ae:	e796      	b.n	800e7de <prvTimerTask+0x4a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	0022      	movs	r2, r4
 800e8b4:	18f1      	adds	r1, r6, r3
 800e8b6:	0038      	movs	r0, r7
 800e8b8:	0033      	movs	r3, r6
 800e8ba:	f7ff fead 	bl	800e618 <prvInsertTimerInActiveList>
 800e8be:	2801      	cmp	r0, #1
 800e8c0:	d1f2      	bne.n	800e8a8 <prvTimerTask+0x114>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8c2:	4643      	mov	r3, r8
 800e8c4:	0032      	movs	r2, r6
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	0038      	movs	r0, r7
 800e8ce:	f7ff ff01 	bl	800e6d4 <xTimerGenericCommand>
 800e8d2:	e7e9      	b.n	800e8a8 <prvTimerTask+0x114>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800e8d4:	9b05      	ldr	r3, [sp, #20]
 800e8d6:	0020      	movs	r0, r4
 800e8d8:	9302      	str	r3, [sp, #8]
 800e8da:	9a02      	ldr	r2, [sp, #8]
 800e8dc:	69a3      	ldr	r3, [r4, #24]
 800e8de:	4694      	mov	ip, r2
 800e8e0:	4463      	add	r3, ip
 800e8e2:	0019      	movs	r1, r3
 800e8e4:	0013      	movs	r3, r2
 800e8e6:	0032      	movs	r2, r6
 800e8e8:	f7ff fe96 	bl	800e618 <prvInsertTimerInActiveList>
 800e8ec:	2801      	cmp	r0, #1
 800e8ee:	d000      	beq.n	800e8f2 <prvTimerTask+0x15e>
 800e8f0:	e777      	b.n	800e7e2 <prvTimerTask+0x4e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8f4:	0020      	movs	r0, r4
 800e8f6:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e8f8:	69e3      	ldr	r3, [r4, #28]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d000      	beq.n	800e900 <prvTimerTask+0x16c>
 800e8fe:	e770      	b.n	800e7e2 <prvTimerTask+0x4e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e900:	69a1      	ldr	r1, [r4, #24]
 800e902:	9b05      	ldr	r3, [sp, #20]
 800e904:	468c      	mov	ip, r1
 800e906:	9302      	str	r3, [sp, #8]
 800e908:	4463      	add	r3, ip
 800e90a:	001a      	movs	r2, r3
 800e90c:	465b      	mov	r3, fp
 800e90e:	2100      	movs	r1, #0
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	0020      	movs	r0, r4
 800e914:	2300      	movs	r3, #0
 800e916:	f7ff fedd 	bl	800e6d4 <xTimerGenericCommand>
 800e91a:	e762      	b.n	800e7e2 <prvTimerTask+0x4e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e91c:	9905      	ldr	r1, [sp, #20]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e91e:	0033      	movs	r3, r6
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e920:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e922:	0032      	movs	r2, r6
 800e924:	1989      	adds	r1, r1, r6
 800e926:	0020      	movs	r0, r4
 800e928:	f7ff fe76 	bl	800e618 <prvInsertTimerInActiveList>
 800e92c:	e759      	b.n	800e7e2 <prvTimerTask+0x4e>
 800e92e:	46c0      	nop			; (mov r8, r8)
 800e930:	200027ec 	.word	0x200027ec

0800e934 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e934:	b510      	push	{r4, lr}
 800e936:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800e938:	f000 f860 	bl	800e9fc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e93c:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800e93e:	f000 f869 	bl	800ea14 <vPortExitCritical>

	return pvReturn;
}
 800e942:	0020      	movs	r0, r4
 800e944:	bd10      	pop	{r4, pc}
 800e946:	46c0      	nop			; (mov r8, r8)

0800e948 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800e948:	b672      	cpsid	i
 800e94a:	e7fe      	b.n	800e94a <prvTaskExitError+0x2>

0800e94c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e94c:	4a06      	ldr	r2, [pc, #24]	; (800e968 <pxCurrentTCBConst2>)
 800e94e:	6813      	ldr	r3, [r2, #0]
 800e950:	6818      	ldr	r0, [r3, #0]
 800e952:	3020      	adds	r0, #32
 800e954:	f380 8809 	msr	PSP, r0
 800e958:	2002      	movs	r0, #2
 800e95a:	f380 8814 	msr	CONTROL, r0
 800e95e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e960:	46ae      	mov	lr, r5
 800e962:	b662      	cpsie	i
 800e964:	bd00      	pop	{pc}
 800e966:	46c0      	nop			; (mov r8, r8)

0800e968 <pxCurrentTCBConst2>:
 800e968:	200026c8 	.word	0x200026c8

0800e96c <pxPortInitialiseStack>:
{
 800e96c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e96e:	2480      	movs	r4, #128	; 0x80
 800e970:	1f03      	subs	r3, r0, #4
 800e972:	0464      	lsls	r4, r4, #17
 800e974:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e976:	3b04      	subs	r3, #4
 800e978:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e97a:	4903      	ldr	r1, [pc, #12]	; (800e988 <pxPortInitialiseStack+0x1c>)
 800e97c:	3b04      	subs	r3, #4
 800e97e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e980:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800e982:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e984:	601a      	str	r2, [r3, #0]
}
 800e986:	bd10      	pop	{r4, pc}
 800e988:	0800e949 	.word	0x0800e949

0800e98c <SVC_Handler>:
 800e98c:	4770      	bx	lr
 800e98e:	46c0      	nop			; (mov r8, r8)

0800e990 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e990:	22ff      	movs	r2, #255	; 0xff
 800e992:	4b0f      	ldr	r3, [pc, #60]	; (800e9d0 <xPortStartScheduler+0x40>)
 800e994:	0412      	lsls	r2, r2, #16
 800e996:	6819      	ldr	r1, [r3, #0]
{
 800e998:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e99a:	430a      	orrs	r2, r1
 800e99c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e99e:	22ff      	movs	r2, #255	; 0xff
 800e9a0:	6819      	ldr	r1, [r3, #0]
 800e9a2:	0612      	lsls	r2, r2, #24
 800e9a4:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9a6:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e9a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <xPortStartScheduler+0x44>)
 800e9ac:	0089      	lsls	r1, r1, #2
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	f7f1 fbce 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e9b4:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9b6:	4b08      	ldr	r3, [pc, #32]	; (800e9d8 <xPortStartScheduler+0x48>)
 800e9b8:	3801      	subs	r0, #1
 800e9ba:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e9bc:	4b07      	ldr	r3, [pc, #28]	; (800e9dc <xPortStartScheduler+0x4c>)
 800e9be:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <xPortStartScheduler+0x50>)
 800e9c4:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800e9c6:	f7ff ffc1 	bl	800e94c <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800e9ca:	b672      	cpsid	i
 800e9cc:	e7fe      	b.n	800e9cc <xPortStartScheduler+0x3c>
 800e9ce:	46c0      	nop			; (mov r8, r8)
 800e9d0:	e000ed20 	.word	0xe000ed20
 800e9d4:	200000b4 	.word	0x200000b4
 800e9d8:	e000e014 	.word	0xe000e014
 800e9dc:	e000e010 	.word	0xe000e010
 800e9e0:	200000c8 	.word	0x200000c8

0800e9e4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e9e4:	2280      	movs	r2, #128	; 0x80
 800e9e6:	4b04      	ldr	r3, [pc, #16]	; (800e9f8 <vPortYield+0x14>)
 800e9e8:	0552      	lsls	r2, r2, #21
 800e9ea:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800e9ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e9f0:	f3bf 8f6f 	isb	sy
}
 800e9f4:	4770      	bx	lr
 800e9f6:	46c0      	nop			; (mov r8, r8)
 800e9f8:	e000ed04 	.word	0xe000ed04

0800e9fc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800e9fc:	b672      	cpsid	i
    uxCriticalNesting++;
 800e9fe:	4a04      	ldr	r2, [pc, #16]	; (800ea10 <vPortEnterCritical+0x14>)
 800ea00:	6813      	ldr	r3, [r2, #0]
 800ea02:	3301      	adds	r3, #1
 800ea04:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800ea06:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ea0a:	f3bf 8f6f 	isb	sy
}
 800ea0e:	4770      	bx	lr
 800ea10:	200000c8 	.word	0x200000c8

0800ea14 <vPortExitCritical>:
    uxCriticalNesting--;
 800ea14:	4a03      	ldr	r2, [pc, #12]	; (800ea24 <vPortExitCritical+0x10>)
 800ea16:	6813      	ldr	r3, [r2, #0]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d100      	bne.n	800ea22 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800ea20:	b662      	cpsie	i
}
 800ea22:	4770      	bx	lr
 800ea24:	200000c8 	.word	0x200000c8

0800ea28 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800ea28:	f3ef 8010 	mrs	r0, PRIMASK
 800ea2c:	b672      	cpsid	i
 800ea2e:	4770      	bx	lr
}
 800ea30:	2000      	movs	r0, #0
 800ea32:	46c0      	nop			; (mov r8, r8)

0800ea34 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800ea34:	f380 8810 	msr	PRIMASK, r0
 800ea38:	4770      	bx	lr
 800ea3a:	46c0      	nop			; (mov r8, r8)

0800ea3c <PendSV_Handler>:
	__asm volatile
 800ea3c:	f3ef 8009 	mrs	r0, PSP
 800ea40:	4b0e      	ldr	r3, [pc, #56]	; (800ea7c <pxCurrentTCBConst>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	3820      	subs	r0, #32
 800ea46:	6010      	str	r0, [r2, #0]
 800ea48:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ea4a:	4644      	mov	r4, r8
 800ea4c:	464d      	mov	r5, r9
 800ea4e:	4656      	mov	r6, sl
 800ea50:	465f      	mov	r7, fp
 800ea52:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ea54:	b508      	push	{r3, lr}
 800ea56:	b672      	cpsid	i
 800ea58:	f7ff fb4e 	bl	800e0f8 <vTaskSwitchContext>
 800ea5c:	b662      	cpsie	i
 800ea5e:	bc0c      	pop	{r2, r3}
 800ea60:	6811      	ldr	r1, [r2, #0]
 800ea62:	6808      	ldr	r0, [r1, #0]
 800ea64:	3010      	adds	r0, #16
 800ea66:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ea68:	46a0      	mov	r8, r4
 800ea6a:	46a9      	mov	r9, r5
 800ea6c:	46b2      	mov	sl, r6
 800ea6e:	46bb      	mov	fp, r7
 800ea70:	f380 8809 	msr	PSP, r0
 800ea74:	3820      	subs	r0, #32
 800ea76:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ea78:	4718      	bx	r3
 800ea7a:	46c0      	nop			; (mov r8, r8)

0800ea7c <pxCurrentTCBConst>:
 800ea7c:	200026c8 	.word	0x200026c8

0800ea80 <xPortSysTickHandler>:
{
 800ea80:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea82:	f7ff ffd1 	bl	800ea28 <ulSetInterruptMaskFromISR>
 800ea86:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800ea88:	f7ff f98e 	bl	800dda8 <xTaskIncrementTick>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d003      	beq.n	800ea98 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ea90:	2280      	movs	r2, #128	; 0x80
 800ea92:	4b03      	ldr	r3, [pc, #12]	; (800eaa0 <xPortSysTickHandler+0x20>)
 800ea94:	0552      	lsls	r2, r2, #21
 800ea96:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ea98:	0020      	movs	r0, r4
 800ea9a:	f7ff ffcb 	bl	800ea34 <vClearInterruptMaskFromISR>
}
 800ea9e:	bd10      	pop	{r4, pc}
 800eaa0:	e000ed04 	.word	0xe000ed04

0800eaa4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eaa4:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eaa6:	4c11      	ldr	r4, [pc, #68]	; (800eaec <prvInsertBlockIntoFreeList+0x48>)
 800eaa8:	0022      	movs	r2, r4
 800eaaa:	e000      	b.n	800eaae <prvInsertBlockIntoFreeList+0xa>
 800eaac:	001a      	movs	r2, r3
 800eaae:	6813      	ldr	r3, [r2, #0]
 800eab0:	4283      	cmp	r3, r0
 800eab2:	d3fb      	bcc.n	800eaac <prvInsertBlockIntoFreeList+0x8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eab4:	6851      	ldr	r1, [r2, #4]
 800eab6:	1855      	adds	r5, r2, r1
 800eab8:	42a8      	cmp	r0, r5
 800eaba:	d012      	beq.n	800eae2 <prvInsertBlockIntoFreeList+0x3e>
 800eabc:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eabe:	1845      	adds	r5, r0, r1
 800eac0:	42ab      	cmp	r3, r5
 800eac2:	d004      	beq.n	800eace <prvInsertBlockIntoFreeList+0x2a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eac4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eac6:	4290      	cmp	r0, r2
 800eac8:	d000      	beq.n	800eacc <prvInsertBlockIntoFreeList+0x28>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eaca:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eacc:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eace:	68a4      	ldr	r4, [r4, #8]
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	d0f7      	beq.n	800eac4 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ead4:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ead6:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ead8:	46a4      	mov	ip, r4
 800eada:	4461      	add	r1, ip
 800eadc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eade:	6003      	str	r3, [r0, #0]
 800eae0:	e7f1      	b.n	800eac6 <prvInsertBlockIntoFreeList+0x22>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eae2:	6840      	ldr	r0, [r0, #4]
 800eae4:	1809      	adds	r1, r1, r0
 800eae6:	6051      	str	r1, [r2, #4]
 800eae8:	0010      	movs	r0, r2
 800eaea:	e7e8      	b.n	800eabe <prvInsertBlockIntoFreeList+0x1a>
 800eaec:	20002824 	.word	0x20002824

0800eaf0 <pvPortMalloc>:
{
 800eaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaf2:	46c6      	mov	lr, r8
 800eaf4:	b500      	push	{lr}
 800eaf6:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800eaf8:	f7ff f942 	bl	800dd80 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800eafc:	4d35      	ldr	r5, [pc, #212]	; (800ebd4 <pvPortMalloc+0xe4>)
 800eafe:	68ab      	ldr	r3, [r5, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d03d      	beq.n	800eb80 <pvPortMalloc+0x90>
 800eb04:	68ee      	ldr	r6, [r5, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb06:	4226      	tst	r6, r4
 800eb08:	d101      	bne.n	800eb0e <pvPortMalloc+0x1e>
			if( xWantedSize > 0 )
 800eb0a:	2c00      	cmp	r4, #0
 800eb0c:	d108      	bne.n	800eb20 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 800eb0e:	f7ff f9d5 	bl	800debc <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800eb12:	f7fd fc7d 	bl	800c410 <vApplicationMallocFailedHook>
 800eb16:	2700      	movs	r7, #0
}
 800eb18:	0038      	movs	r0, r7
 800eb1a:	bc04      	pop	{r2}
 800eb1c:	4690      	mov	r8, r2
 800eb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xWantedSize += xHeapStructSize;
 800eb20:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb22:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800eb24:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb26:	421a      	tst	r2, r3
 800eb28:	d145      	bne.n	800ebb6 <pvPortMalloc+0xc6>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d0ef      	beq.n	800eb0e <pvPortMalloc+0x1e>
 800eb2e:	696a      	ldr	r2, [r5, #20]
 800eb30:	4690      	mov	r8, r2
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d3eb      	bcc.n	800eb0e <pvPortMalloc+0x1e>
				pxBlock = xStart.pxNextFreeBlock;
 800eb36:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 800eb38:	0028      	movs	r0, r5
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb3a:	e004      	b.n	800eb46 <pvPortMalloc+0x56>
 800eb3c:	6822      	ldr	r2, [r4, #0]
 800eb3e:	2a00      	cmp	r2, #0
 800eb40:	d004      	beq.n	800eb4c <pvPortMalloc+0x5c>
 800eb42:	0020      	movs	r0, r4
 800eb44:	0014      	movs	r4, r2
 800eb46:	6861      	ldr	r1, [r4, #4]
 800eb48:	4299      	cmp	r1, r3
 800eb4a:	d3f7      	bcc.n	800eb3c <pvPortMalloc+0x4c>
				if( pxBlock != pxEnd )
 800eb4c:	68aa      	ldr	r2, [r5, #8]
 800eb4e:	42a2      	cmp	r2, r4
 800eb50:	d0dd      	beq.n	800eb0e <pvPortMalloc+0x1e>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb52:	6807      	ldr	r7, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb54:	6822      	ldr	r2, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb56:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb58:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb5a:	1aca      	subs	r2, r1, r3
 800eb5c:	2a10      	cmp	r2, #16
 800eb5e:	d831      	bhi.n	800ebc4 <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb60:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb62:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb64:	1a5b      	subs	r3, r3, r1
 800eb66:	616b      	str	r3, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d200      	bcs.n	800eb6e <pvPortMalloc+0x7e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb6c:	612b      	str	r3, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800eb6e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb70:	4331      	orrs	r1, r6
 800eb72:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb74:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800eb76:	f7ff f9a1 	bl	800debc <xTaskResumeAll>
		if( pvReturn == NULL )
 800eb7a:	2f00      	cmp	r7, #0
 800eb7c:	d1cc      	bne.n	800eb18 <pvPortMalloc+0x28>
 800eb7e:	e7c8      	b.n	800eb12 <pvPortMalloc+0x22>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb80:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800eb82:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <pvPortMalloc+0xe8>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb84:	4219      	tst	r1, r3
 800eb86:	d119      	bne.n	800ebbc <pvPortMalloc+0xcc>
 800eb88:	001a      	movs	r2, r3
 800eb8a:	0019      	movs	r1, r3
	ulAddress -= xHeapStructSize;
 800eb8c:	26fd      	movs	r6, #253	; 0xfd
 800eb8e:	01b6      	lsls	r6, r6, #6
 800eb90:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800eb92:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800eb94:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800eb96:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb98:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800eb9a:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800eb9c:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb9e:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800eba0:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eba2:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800eba4:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eba6:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800eba8:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ebaa:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebac:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebae:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebb0:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebb2:	60ee      	str	r6, [r5, #12]
 800ebb4:	e7a7      	b.n	800eb06 <pvPortMalloc+0x16>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebb6:	4393      	bics	r3, r2
 800ebb8:	3308      	adds	r3, #8
 800ebba:	e7b6      	b.n	800eb2a <pvPortMalloc+0x3a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebbc:	1dda      	adds	r2, r3, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ebbe:	438a      	bics	r2, r1
 800ebc0:	0011      	movs	r1, r2
 800ebc2:	e7e3      	b.n	800eb8c <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebc4:	18e0      	adds	r0, r4, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebc6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebc8:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ebca:	f7ff ff6b 	bl	800eaa4 <prvInsertBlockIntoFreeList>
 800ebce:	6861      	ldr	r1, [r4, #4]
 800ebd0:	e7c6      	b.n	800eb60 <pvPortMalloc+0x70>
 800ebd2:	46c0      	nop			; (mov r8, r8)
 800ebd4:	20002824 	.word	0x20002824
 800ebd8:	2000283c 	.word	0x2000283c

0800ebdc <vPortFree>:
{
 800ebdc:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d009      	beq.n	800ebf6 <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebe2:	4d0d      	ldr	r5, [pc, #52]	; (800ec18 <vPortFree+0x3c>)
 800ebe4:	3808      	subs	r0, #8
 800ebe6:	6843      	ldr	r3, [r0, #4]
 800ebe8:	68ea      	ldr	r2, [r5, #12]
 800ebea:	0004      	movs	r4, r0
 800ebec:	421a      	tst	r2, r3
 800ebee:	d002      	beq.n	800ebf6 <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800ebf0:	6801      	ldr	r1, [r0, #0]
 800ebf2:	2900      	cmp	r1, #0
 800ebf4:	d000      	beq.n	800ebf8 <vPortFree+0x1c>
}
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebf8:	4393      	bics	r3, r2
 800ebfa:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ebfc:	f7ff f8c0 	bl	800dd80 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec00:	696a      	ldr	r2, [r5, #20]
 800ec02:	6863      	ldr	r3, [r4, #4]
 800ec04:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec06:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec08:	4463      	add	r3, ip
 800ec0a:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec0c:	f7ff ff4a 	bl	800eaa4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ec10:	f7ff f954 	bl	800debc <xTaskResumeAll>
}
 800ec14:	e7ef      	b.n	800ebf6 <vPortFree+0x1a>
 800ec16:	46c0      	nop			; (mov r8, r8)
 800ec18:	20002824 	.word	0x20002824

0800ec1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ec1c:	b510      	push	{r4, lr}
 800ec1e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ec20:	f002 f88e 	bl	8010d40 <HAL_RCC_GetHCLKFreq>
 800ec24:	21fa      	movs	r1, #250	; 0xfa
 800ec26:	0089      	lsls	r1, r1, #2
 800ec28:	f7f1 fa92 	bl	8000150 <__udivsi3>
 800ec2c:	f000 fb28 	bl	800f280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ec30:	2001      	movs	r0, #1
 800ec32:	2200      	movs	r2, #0
 800ec34:	0021      	movs	r1, r4
 800ec36:	4240      	negs	r0, r0
 800ec38:	f000 fae2 	bl	800f200 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	bd10      	pop	{r4, pc}

0800ec40 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec40:	2110      	movs	r1, #16
 800ec42:	4a06      	ldr	r2, [pc, #24]	; (800ec5c <HAL_Init+0x1c>)
{
 800ec44:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec46:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ec48:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ec4a:	430b      	orrs	r3, r1
 800ec4c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800ec4e:	f7ff ffe5 	bl	800ec1c <HAL_InitTick>
  HAL_MspInit();
 800ec52:	f001 fc69 	bl	8010528 <HAL_MspInit>
}
 800ec56:	2000      	movs	r0, #0
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	46c0      	nop			; (mov r8, r8)
 800ec5c:	40022000 	.word	0x40022000

0800ec60 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800ec60:	4a02      	ldr	r2, [pc, #8]	; (800ec6c <HAL_IncTick+0xc>)
 800ec62:	6813      	ldr	r3, [r2, #0]
 800ec64:	3301      	adds	r3, #1
 800ec66:	6013      	str	r3, [r2, #0]
}
 800ec68:	4770      	bx	lr
 800ec6a:	46c0      	nop			; (mov r8, r8)
 800ec6c:	20006784 	.word	0x20006784

0800ec70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ec70:	4b01      	ldr	r3, [pc, #4]	; (800ec78 <HAL_GetTick+0x8>)
 800ec72:	6818      	ldr	r0, [r3, #0]
}
 800ec74:	4770      	bx	lr
 800ec76:	46c0      	nop			; (mov r8, r8)
 800ec78:	20006784 	.word	0x20006784

0800ec7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800ec82:	f7ff fff5 	bl	800ec70 <HAL_GetTick>
 800ec86:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800ec88:	f7ff fff2 	bl	800ec70 <HAL_GetTick>
 800ec8c:	9b01      	ldr	r3, [sp, #4]
 800ec8e:	1b00      	subs	r0, r0, r4
 800ec90:	4298      	cmp	r0, r3
 800ec92:	d3f9      	bcc.n	800ec88 <HAL_Delay+0xc>
  {
  }
}
 800ec94:	b002      	add	sp, #8
 800ec96:	bd10      	pop	{r4, pc}

0800ec98 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ec98:	4b01      	ldr	r3, [pc, #4]	; (800eca0 <HAL_GetREVID+0x8>)
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	0c00      	lsrs	r0, r0, #16
}
 800ec9e:	4770      	bx	lr
 800eca0:	40015800 	.word	0x40015800

0800eca4 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800eca4:	4b02      	ldr	r3, [pc, #8]	; (800ecb0 <HAL_GetDEVID+0xc>)
 800eca6:	6818      	ldr	r0, [r3, #0]
 800eca8:	0500      	lsls	r0, r0, #20
 800ecaa:	0d00      	lsrs	r0, r0, #20
}
 800ecac:	4770      	bx	lr
 800ecae:	46c0      	nop			; (mov r8, r8)
 800ecb0:	40015800 	.word	0x40015800

0800ecb4 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	6802      	ldr	r2, [r0, #0]
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecba:	6891      	ldr	r1, [r2, #8]
{
 800ecbc:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecbe:	400b      	ands	r3, r1
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d001      	beq.n	800ecc8 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800ecc4:	2000      	movs	r0, #0
}
 800ecc6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecc8:	6811      	ldr	r1, [r2, #0]
 800ecca:	420b      	tst	r3, r1
 800eccc:	d00e      	beq.n	800ecec <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800ecce:	2305      	movs	r3, #5
 800ecd0:	6891      	ldr	r1, [r2, #8]
 800ecd2:	400b      	ands	r3, r1
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d00d      	beq.n	800ecf4 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ecd8:	2210      	movs	r2, #16
 800ecda:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800ecdc:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ecde:	4313      	orrs	r3, r2
 800ece0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ece2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ece4:	3a0f      	subs	r2, #15
 800ece6:	4313      	orrs	r3, r2
 800ece8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800ecea:	e7ec      	b.n	800ecc6 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ecec:	68d3      	ldr	r3, [r2, #12]
 800ecee:	041b      	lsls	r3, r3, #16
 800ecf0:	d4ed      	bmi.n	800ecce <ADC_Disable+0x1a>
 800ecf2:	e7e7      	b.n	800ecc4 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ecf8:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800ecfa:	430b      	orrs	r3, r1
 800ecfc:	6093      	str	r3, [r2, #8]
 800ecfe:	2303      	movs	r3, #3
 800ed00:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ed02:	f7ff ffb5 	bl	800ec70 <HAL_GetTick>
 800ed06:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ed08:	e004      	b.n	800ed14 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ed0a:	f7ff ffb1 	bl	800ec70 <HAL_GetTick>
 800ed0e:	1b80      	subs	r0, r0, r6
 800ed10:	2802      	cmp	r0, #2
 800ed12:	d804      	bhi.n	800ed1e <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ed14:	6823      	ldr	r3, [r4, #0]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	421d      	tst	r5, r3
 800ed1a:	d1f6      	bne.n	800ed0a <ADC_Disable+0x56>
 800ed1c:	e7d2      	b.n	800ecc4 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed1e:	2210      	movs	r2, #16
 800ed20:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800ed22:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed24:	4313      	orrs	r3, r2
 800ed26:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed2a:	431d      	orrs	r5, r3
 800ed2c:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ed2e:	e7ca      	b.n	800ecc6 <ADC_Disable+0x12>

0800ed30 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800ed30:	2300      	movs	r3, #0
{
 800ed32:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed34:	6802      	ldr	r2, [r0, #0]
{
 800ed36:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800ed38:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed3a:	6891      	ldr	r1, [r2, #8]
 800ed3c:	3303      	adds	r3, #3
{
 800ed3e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed40:	400b      	ands	r3, r1
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d031      	beq.n	800edaa <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ed46:	6891      	ldr	r1, [r2, #8]
 800ed48:	4b20      	ldr	r3, [pc, #128]	; (800edcc <ADC_Enable+0x9c>)
 800ed4a:	4219      	tst	r1, r3
 800ed4c:	d122      	bne.n	800ed94 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800ed4e:	2101      	movs	r1, #1
 800ed50:	6893      	ldr	r3, [r2, #8]
 800ed52:	430b      	orrs	r3, r1
 800ed54:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800ed56:	4b1e      	ldr	r3, [pc, #120]	; (800edd0 <ADC_Enable+0xa0>)
 800ed58:	491e      	ldr	r1, [pc, #120]	; (800edd4 <ADC_Enable+0xa4>)
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	f7f1 f9f8 	bl	8000150 <__udivsi3>
 800ed60:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800ed62:	9b01      	ldr	r3, [sp, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d005      	beq.n	800ed74 <ADC_Enable+0x44>
      wait_loop_index--;
 800ed68:	9b01      	ldr	r3, [sp, #4]
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800ed6e:	9b01      	ldr	r3, [sp, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1f9      	bne.n	800ed68 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800ed74:	f7ff ff7c 	bl	800ec70 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ed78:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800ed7a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ed7c:	e004      	b.n	800ed88 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ed7e:	f7ff ff77 	bl	800ec70 <HAL_GetTick>
 800ed82:	1b80      	subs	r0, r0, r6
 800ed84:	2802      	cmp	r0, #2
 800ed86:	d818      	bhi.n	800edba <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	421d      	tst	r5, r3
 800ed8e:	d0f6      	beq.n	800ed7e <ADC_Enable+0x4e>
  return HAL_OK;
 800ed90:	2000      	movs	r0, #0
 800ed92:	e008      	b.n	800eda6 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed94:	2210      	movs	r2, #16
      return HAL_ERROR;
 800ed96:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eda0:	3a0f      	subs	r2, #15
 800eda2:	4313      	orrs	r3, r2
 800eda4:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800eda6:	b002      	add	sp, #8
 800eda8:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800edaa:	6811      	ldr	r1, [r2, #0]
 800edac:	420b      	tst	r3, r1
 800edae:	d1ef      	bne.n	800ed90 <ADC_Enable+0x60>
 800edb0:	68d3      	ldr	r3, [r2, #12]
 800edb2:	041b      	lsls	r3, r3, #16
 800edb4:	d5c7      	bpl.n	800ed46 <ADC_Enable+0x16>
  return HAL_OK;
 800edb6:	2000      	movs	r0, #0
 800edb8:	e7f5      	b.n	800eda6 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edba:	2210      	movs	r2, #16
 800edbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800edbe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edc0:	4313      	orrs	r3, r2
 800edc2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800edc6:	431d      	orrs	r5, r3
 800edc8:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800edca:	e7ec      	b.n	800eda6 <ADC_Enable+0x76>
 800edcc:	80000017 	.word	0x80000017
 800edd0:	200000b4 	.word	0x200000b4
 800edd4:	000f4240 	.word	0x000f4240

0800edd8 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800edd8:	2204      	movs	r2, #4
 800edda:	6803      	ldr	r3, [r0, #0]
{
 800eddc:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800edde:	6899      	ldr	r1, [r3, #8]
{
 800ede0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ede2:	420a      	tst	r2, r1
 800ede4:	d010      	beq.n	800ee08 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ede6:	6899      	ldr	r1, [r3, #8]
 800ede8:	420a      	tst	r2, r1
 800edea:	d10f      	bne.n	800ee0c <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800edec:	f7ff ff40 	bl	800ec70 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800edf0:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800edf2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800edf4:	e004      	b.n	800ee00 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800edf6:	f7ff ff3b 	bl	800ec70 <HAL_GetTick>
 800edfa:	1b80      	subs	r0, r0, r6
 800edfc:	2802      	cmp	r0, #2
 800edfe:	d80d      	bhi.n	800ee1c <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ee00:	6823      	ldr	r3, [r4, #0]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	421d      	tst	r5, r3
 800ee06:	d1f6      	bne.n	800edf6 <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800ee08:	2000      	movs	r0, #0
}
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800ee0c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ee0e:	0792      	lsls	r2, r2, #30
 800ee10:	d4ec      	bmi.n	800edec <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800ee12:	2110      	movs	r1, #16
 800ee14:	689a      	ldr	r2, [r3, #8]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	609a      	str	r2, [r3, #8]
 800ee1a:	e7e7      	b.n	800edec <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee1c:	2210      	movs	r2, #16
 800ee1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ee20:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee22:	4313      	orrs	r3, r2
 800ee24:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ee26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee28:	3a0f      	subs	r2, #15
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ee2e:	e7ec      	b.n	800ee0a <ADC_ConversionStop+0x32>

0800ee30 <HAL_ADC_Init>:
{
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800ee34:	d100      	bne.n	800ee38 <HAL_ADC_Init+0x8>
 800ee36:	e075      	b.n	800ef24 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ee38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d068      	beq.n	800ef10 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ee3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee40:	06db      	lsls	r3, r3, #27
 800ee42:	d505      	bpl.n	800ee50 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee44:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800ee46:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800ee4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800ee50:	2004      	movs	r0, #4
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	689a      	ldr	r2, [r3, #8]
 800ee56:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800ee58:	d1f4      	bne.n	800ee44 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800ee5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ee5c:	4942      	ldr	r1, [pc, #264]	; (800ef68 <HAL_ADC_Init+0x138>)
 800ee5e:	400a      	ands	r2, r1
 800ee60:	3106      	adds	r1, #6
 800ee62:	31ff      	adds	r1, #255	; 0xff
 800ee64:	430a      	orrs	r2, r1
 800ee66:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ee68:	2203      	movs	r2, #3
 800ee6a:	6899      	ldr	r1, [r3, #8]
 800ee6c:	400a      	ands	r2, r1
 800ee6e:	2a01      	cmp	r2, #1
 800ee70:	d073      	beq.n	800ef5a <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800ee72:	2118      	movs	r1, #24
 800ee74:	68da      	ldr	r2, [r3, #12]
 800ee76:	438a      	bics	r2, r1
 800ee78:	68a1      	ldr	r1, [r4, #8]
 800ee7a:	430a      	orrs	r2, r1
 800ee7c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800ee7e:	691a      	ldr	r2, [r3, #16]
 800ee80:	6861      	ldr	r1, [r4, #4]
 800ee82:	0092      	lsls	r2, r2, #2
 800ee84:	0892      	lsrs	r2, r2, #2
 800ee86:	430a      	orrs	r2, r1
 800ee88:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800ee8a:	68da      	ldr	r2, [r3, #12]
 800ee8c:	4937      	ldr	r1, [pc, #220]	; (800ef6c <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800ee8e:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800ee90:	400a      	ands	r2, r1
 800ee92:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800ee94:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800ee96:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800ee98:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800ee9a:	69e2      	ldr	r2, [r4, #28]
 800ee9c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800ee9e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800eea0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800eea2:	3a01      	subs	r2, #1
 800eea4:	1e55      	subs	r5, r2, #1
 800eea6:	41aa      	sbcs	r2, r5
 800eea8:	0315      	lsls	r5, r2, #12
 800eeaa:	68e2      	ldr	r2, [r4, #12]
 800eeac:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800eeae:	6922      	ldr	r2, [r4, #16]
 800eeb0:	4339      	orrs	r1, r7
 800eeb2:	2a02      	cmp	r2, #2
 800eeb4:	d100      	bne.n	800eeb8 <HAL_ADC_Init+0x88>
 800eeb6:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800eeb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800eeba:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800eebc:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800eebe:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800eec0:	432a      	orrs	r2, r5
 800eec2:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800eec4:	2901      	cmp	r1, #1
 800eec6:	d042      	beq.n	800ef4e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800eec8:	20c2      	movs	r0, #194	; 0xc2
 800eeca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800eecc:	30ff      	adds	r0, #255	; 0xff
 800eece:	4281      	cmp	r1, r0
 800eed0:	d002      	beq.n	800eed8 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800eed2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800eed4:	4301      	orrs	r1, r0
 800eed6:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800eed8:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800eeda:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800eedc:	4311      	orrs	r1, r2
 800eede:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800eee0:	2180      	movs	r1, #128	; 0x80
 800eee2:	0549      	lsls	r1, r1, #21
 800eee4:	428d      	cmp	r5, r1
 800eee6:	d01f      	beq.n	800ef28 <HAL_ADC_Init+0xf8>
 800eee8:	1e69      	subs	r1, r5, #1
 800eeea:	2906      	cmp	r1, #6
 800eeec:	d91c      	bls.n	800ef28 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	491f      	ldr	r1, [pc, #124]	; (800ef70 <HAL_ADC_Init+0x140>)
 800eef2:	400b      	ands	r3, r1
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d020      	beq.n	800ef3a <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800eef8:	2212      	movs	r2, #18
 800eefa:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800eefc:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800eefe:	4393      	bics	r3, r2
 800ef00:	3a02      	subs	r2, #2
 800ef02:	4313      	orrs	r3, r2
 800ef04:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef08:	3a0f      	subs	r2, #15
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ef0e:	e79e      	b.n	800ee4e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800ef10:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800ef12:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800ef14:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800ef16:	f7fc fb2b 	bl	800b570 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ef1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef1c:	06db      	lsls	r3, r3, #27
 800ef1e:	d500      	bpl.n	800ef22 <HAL_ADC_Init+0xf2>
 800ef20:	e790      	b.n	800ee44 <HAL_ADC_Init+0x14>
 800ef22:	e795      	b.n	800ee50 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800ef24:	2001      	movs	r0, #1
 800ef26:	e792      	b.n	800ee4e <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800ef28:	2107      	movs	r1, #7
 800ef2a:	6958      	ldr	r0, [r3, #20]
 800ef2c:	4388      	bics	r0, r1
 800ef2e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800ef30:	6958      	ldr	r0, [r3, #20]
 800ef32:	4029      	ands	r1, r5
 800ef34:	4301      	orrs	r1, r0
 800ef36:	6159      	str	r1, [r3, #20]
 800ef38:	e7d9      	b.n	800eeee <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800ef3a:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ef3c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800ef3e:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800ef40:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ef42:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ef44:	4393      	bics	r3, r2
 800ef46:	3a02      	subs	r2, #2
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	6463      	str	r3, [r4, #68]	; 0x44
 800ef4c:	e77f      	b.n	800ee4e <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800ef4e:	2e00      	cmp	r6, #0
 800ef50:	d1ba      	bne.n	800eec8 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800ef52:	2180      	movs	r1, #128	; 0x80
 800ef54:	0249      	lsls	r1, r1, #9
 800ef56:	430a      	orrs	r2, r1
 800ef58:	e7b6      	b.n	800eec8 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800ef5a:	6819      	ldr	r1, [r3, #0]
 800ef5c:	420a      	tst	r2, r1
 800ef5e:	d194      	bne.n	800ee8a <HAL_ADC_Init+0x5a>
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	0412      	lsls	r2, r2, #16
 800ef64:	d491      	bmi.n	800ee8a <HAL_ADC_Init+0x5a>
 800ef66:	e784      	b.n	800ee72 <HAL_ADC_Init+0x42>
 800ef68:	fffffefd 	.word	0xfffffefd
 800ef6c:	fffe0219 	.word	0xfffe0219
 800ef70:	833fffe7 	.word	0x833fffe7

0800ef74 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ef74:	6803      	ldr	r3, [r0, #0]
{
 800ef76:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ef78:	689a      	ldr	r2, [r3, #8]
{
 800ef7a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ef7c:	0752      	lsls	r2, r2, #29
 800ef7e:	d421      	bmi.n	800efc4 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800ef80:	2240      	movs	r2, #64	; 0x40
 800ef82:	5c81      	ldrb	r1, [r0, r2]
 800ef84:	2901      	cmp	r1, #1
 800ef86:	d01d      	beq.n	800efc4 <HAL_ADC_Start+0x50>
 800ef88:	2101      	movs	r1, #1
 800ef8a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ef8c:	69c2      	ldr	r2, [r0, #28]
 800ef8e:	2a01      	cmp	r2, #1
 800ef90:	d112      	bne.n	800efb8 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800ef92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ef94:	490c      	ldr	r1, [pc, #48]	; (800efc8 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800ef96:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800ef98:	4011      	ands	r1, r2
 800ef9a:	2280      	movs	r2, #128	; 0x80
 800ef9c:	0052      	lsls	r2, r2, #1
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800efa2:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800efa4:	2200      	movs	r2, #0
 800efa6:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800efa8:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800efaa:	321c      	adds	r2, #28
 800efac:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800efae:	689a      	ldr	r2, [r3, #8]
 800efb0:	393c      	subs	r1, #60	; 0x3c
 800efb2:	430a      	orrs	r2, r1
 800efb4:	609a      	str	r2, [r3, #8]
}
 800efb6:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800efb8:	f7ff feba 	bl	800ed30 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d1fa      	bne.n	800efb6 <HAL_ADC_Start+0x42>
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	e7e6      	b.n	800ef92 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800efc4:	2002      	movs	r0, #2
 800efc6:	e7f6      	b.n	800efb6 <HAL_ADC_Start+0x42>
 800efc8:	fffff0fe 	.word	0xfffff0fe

0800efcc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800efcc:	2340      	movs	r3, #64	; 0x40
{ 
 800efce:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800efd0:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800efd2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800efd4:	2a01      	cmp	r2, #1
 800efd6:	d014      	beq.n	800f002 <HAL_ADC_Stop+0x36>
 800efd8:	2501      	movs	r5, #1
 800efda:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800efdc:	f7ff fefc 	bl	800edd8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d003      	beq.n	800efec <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800efe4:	2340      	movs	r3, #64	; 0x40
 800efe6:	2200      	movs	r2, #0
 800efe8:	54e2      	strb	r2, [r4, r3]
}
 800efea:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800efec:	0020      	movs	r0, r4
 800efee:	f7ff fe61 	bl	800ecb4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d1f6      	bne.n	800efe4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800eff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eff8:	4a03      	ldr	r2, [pc, #12]	; (800f008 <HAL_ADC_Stop+0x3c>)
 800effa:	4013      	ands	r3, r2
 800effc:	431d      	orrs	r5, r3
 800effe:	6465      	str	r5, [r4, #68]	; 0x44
 800f000:	e7f0      	b.n	800efe4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f002:	2002      	movs	r0, #2
 800f004:	e7f1      	b.n	800efea <HAL_ADC_Stop+0x1e>
 800f006:	46c0      	nop			; (mov r8, r8)
 800f008:	fffffefe 	.word	0xfffffefe

0800f00c <HAL_ADC_PollForConversion>:
{
 800f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f00e:	6943      	ldr	r3, [r0, #20]
{
 800f010:	0006      	movs	r6, r0
 800f012:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f014:	2b08      	cmp	r3, #8
 800f016:	d04c      	beq.n	800f0b2 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f018:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f01a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	07db      	lsls	r3, r3, #31
 800f020:	d43e      	bmi.n	800f0a0 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f022:	f7ff fe25 	bl	800ec70 <HAL_GetTick>
 800f026:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f028:	6832      	ldr	r2, [r6, #0]
 800f02a:	e001      	b.n	800f030 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f02c:	1c63      	adds	r3, r4, #1
 800f02e:	d127      	bne.n	800f080 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f030:	6813      	ldr	r3, [r2, #0]
 800f032:	421d      	tst	r5, r3
 800f034:	d0fa      	beq.n	800f02c <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f036:	2380      	movs	r3, #128	; 0x80
 800f038:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	430b      	orrs	r3, r1
 800f03e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f040:	23c0      	movs	r3, #192	; 0xc0
 800f042:	68d1      	ldr	r1, [r2, #12]
 800f044:	011b      	lsls	r3, r3, #4
 800f046:	4219      	tst	r1, r3
 800f048:	d113      	bne.n	800f072 <HAL_ADC_PollForConversion+0x66>
 800f04a:	6a33      	ldr	r3, [r6, #32]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d110      	bne.n	800f072 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f050:	6813      	ldr	r3, [r2, #0]
 800f052:	071b      	lsls	r3, r3, #28
 800f054:	d50d      	bpl.n	800f072 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f056:	6893      	ldr	r3, [r2, #8]
 800f058:	075b      	lsls	r3, r3, #29
 800f05a:	d42f      	bmi.n	800f0bc <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f05c:	210c      	movs	r1, #12
 800f05e:	6853      	ldr	r3, [r2, #4]
 800f060:	438b      	bics	r3, r1
 800f062:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f064:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f066:	491a      	ldr	r1, [pc, #104]	; (800f0d0 <HAL_ADC_PollForConversion+0xc4>)
 800f068:	400b      	ands	r3, r1
 800f06a:	3104      	adds	r1, #4
 800f06c:	31ff      	adds	r1, #255	; 0xff
 800f06e:	430b      	orrs	r3, r1
 800f070:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f072:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f074:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f076:	2b00      	cmp	r3, #0
 800f078:	d101      	bne.n	800f07e <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f07a:	330c      	adds	r3, #12
 800f07c:	6013      	str	r3, [r2, #0]
}
 800f07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f080:	2c00      	cmp	r4, #0
 800f082:	d004      	beq.n	800f08e <HAL_ADC_PollForConversion+0x82>
 800f084:	f7ff fdf4 	bl	800ec70 <HAL_GetTick>
 800f088:	1bc0      	subs	r0, r0, r7
 800f08a:	42a0      	cmp	r0, r4
 800f08c:	d9cc      	bls.n	800f028 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f08e:	2204      	movs	r2, #4
 800f090:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f092:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f094:	4313      	orrs	r3, r2
 800f096:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f098:	2200      	movs	r2, #0
 800f09a:	2340      	movs	r3, #64	; 0x40
 800f09c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f09e:	e7ee      	b.n	800f07e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f0a0:	2220      	movs	r2, #32
 800f0a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	2340      	movs	r3, #64	; 0x40
 800f0ac:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f0ae:	2001      	movs	r0, #1
 800f0b0:	e7e5      	b.n	800f07e <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f0b2:	f7ff fddd 	bl	800ec70 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f0b6:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f0b8:	0007      	movs	r7, r0
 800f0ba:	e7b5      	b.n	800f028 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f0bc:	2120      	movs	r1, #32
 800f0be:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f0c0:	430b      	orrs	r3, r1
 800f0c2:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f0c4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f0c6:	391f      	subs	r1, #31
 800f0c8:	430b      	orrs	r3, r1
 800f0ca:	64b3      	str	r3, [r6, #72]	; 0x48
 800f0cc:	e7d1      	b.n	800f072 <HAL_ADC_PollForConversion+0x66>
 800f0ce:	46c0      	nop			; (mov r8, r8)
 800f0d0:	fffffefe 	.word	0xfffffefe

0800f0d4 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f0d4:	2208      	movs	r2, #8
 800f0d6:	6803      	ldr	r3, [r0, #0]
 800f0d8:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f0da:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f0dc:	4770      	bx	lr
 800f0de:	46c0      	nop			; (mov r8, r8)

0800f0e0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f0e0:	2300      	movs	r3, #0
{
 800f0e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0e4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f0e6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f0e8:	3340      	adds	r3, #64	; 0x40
 800f0ea:	5cc2      	ldrb	r2, [r0, r3]
{
 800f0ec:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f0ee:	2a01      	cmp	r2, #1
 800f0f0:	d044      	beq.n	800f17c <HAL_ADC_ConfigChannel+0x9c>
 800f0f2:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f0f4:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f0f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f0f8:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f0fa:	68b3      	ldr	r3, [r6, #8]
 800f0fc:	075b      	lsls	r3, r3, #29
 800f0fe:	d509      	bpl.n	800f114 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f100:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f102:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f106:	4313      	orrs	r3, r2
 800f108:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f10a:	2340      	movs	r3, #64	; 0x40
 800f10c:	2200      	movs	r2, #0
 800f10e:	54e2      	strb	r2, [r4, r3]
}
 800f110:	b003      	add	sp, #12
 800f112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f114:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f116:	4d33      	ldr	r5, [pc, #204]	; (800f1e4 <HAL_ADC_ConfigChannel+0x104>)
 800f118:	001f      	movs	r7, r3
 800f11a:	46ac      	mov	ip, r5
 800f11c:	684d      	ldr	r5, [r1, #4]
 800f11e:	409a      	lsls	r2, r3
 800f120:	3f10      	subs	r7, #16
 800f122:	4565      	cmp	r5, ip
 800f124:	d02c      	beq.n	800f180 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f126:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f128:	432a      	orrs	r2, r5
 800f12a:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f12c:	2280      	movs	r2, #128	; 0x80
 800f12e:	0552      	lsls	r2, r2, #21
 800f130:	4290      	cmp	r0, r2
 800f132:	d00f      	beq.n	800f154 <HAL_ADC_ConfigChannel+0x74>
 800f134:	3801      	subs	r0, #1
 800f136:	2806      	cmp	r0, #6
 800f138:	d90c      	bls.n	800f154 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800f13a:	2207      	movs	r2, #7
 800f13c:	6888      	ldr	r0, [r1, #8]
 800f13e:	6971      	ldr	r1, [r6, #20]
 800f140:	4011      	ands	r1, r2
 800f142:	4288      	cmp	r0, r1
 800f144:	d006      	beq.n	800f154 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f146:	6971      	ldr	r1, [r6, #20]
 800f148:	4391      	bics	r1, r2
 800f14a:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800f14c:	6971      	ldr	r1, [r6, #20]
 800f14e:	4002      	ands	r2, r0
 800f150:	430a      	orrs	r2, r1
 800f152:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f154:	2f02      	cmp	r7, #2
 800f156:	d80f      	bhi.n	800f178 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f158:	4923      	ldr	r1, [pc, #140]	; (800f1e8 <HAL_ADC_ConfigChannel+0x108>)
 800f15a:	680a      	ldr	r2, [r1, #0]
 800f15c:	2b10      	cmp	r3, #16
 800f15e:	d029      	beq.n	800f1b4 <HAL_ADC_ConfigChannel+0xd4>
 800f160:	3b11      	subs	r3, #17
 800f162:	4258      	negs	r0, r3
 800f164:	4143      	adcs	r3, r0
 800f166:	4821      	ldr	r0, [pc, #132]	; (800f1ec <HAL_ADC_ConfigChannel+0x10c>)
 800f168:	425b      	negs	r3, r3
 800f16a:	4003      	ands	r3, r0
 800f16c:	2080      	movs	r0, #128	; 0x80
 800f16e:	0440      	lsls	r0, r0, #17
 800f170:	4684      	mov	ip, r0
 800f172:	4463      	add	r3, ip
 800f174:	4313      	orrs	r3, r2
 800f176:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f178:	2000      	movs	r0, #0
 800f17a:	e7c6      	b.n	800f10a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800f17c:	2002      	movs	r0, #2
 800f17e:	e7c7      	b.n	800f110 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f180:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800f182:	4391      	bics	r1, r2
 800f184:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f186:	2f02      	cmp	r7, #2
 800f188:	d8f6      	bhi.n	800f178 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f18a:	4a17      	ldr	r2, [pc, #92]	; (800f1e8 <HAL_ADC_ConfigChannel+0x108>)
 800f18c:	6811      	ldr	r1, [r2, #0]
 800f18e:	2b10      	cmp	r3, #16
 800f190:	d00e      	beq.n	800f1b0 <HAL_ADC_ConfigChannel+0xd0>
 800f192:	3b11      	subs	r3, #17
 800f194:	001a      	movs	r2, r3
 800f196:	1e53      	subs	r3, r2, #1
 800f198:	419a      	sbcs	r2, r3
 800f19a:	4b14      	ldr	r3, [pc, #80]	; (800f1ec <HAL_ADC_ConfigChannel+0x10c>)
 800f19c:	4252      	negs	r2, r2
 800f19e:	4013      	ands	r3, r2
 800f1a0:	4a13      	ldr	r2, [pc, #76]	; (800f1f0 <HAL_ADC_ConfigChannel+0x110>)
 800f1a2:	4694      	mov	ip, r2
 800f1a4:	4463      	add	r3, ip
 800f1a6:	4a10      	ldr	r2, [pc, #64]	; (800f1e8 <HAL_ADC_ConfigChannel+0x108>)
 800f1a8:	400b      	ands	r3, r1
 800f1aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	e7ac      	b.n	800f10a <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f1b0:	4b10      	ldr	r3, [pc, #64]	; (800f1f4 <HAL_ADC_ConfigChannel+0x114>)
 800f1b2:	e7f8      	b.n	800f1a6 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f1b4:	2380      	movs	r3, #128	; 0x80
 800f1b6:	041b      	lsls	r3, r3, #16
 800f1b8:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f1ba:	4b0f      	ldr	r3, [pc, #60]	; (800f1f8 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f1bc:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f1be:	6818      	ldr	r0, [r3, #0]
 800f1c0:	490e      	ldr	r1, [pc, #56]	; (800f1fc <HAL_ADC_ConfigChannel+0x11c>)
 800f1c2:	f7f0 ffc5 	bl	8000150 <__udivsi3>
 800f1c6:	0083      	lsls	r3, r0, #2
 800f1c8:	1818      	adds	r0, r3, r0
 800f1ca:	0040      	lsls	r0, r0, #1
 800f1cc:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800f1ce:	9b01      	ldr	r3, [sp, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d0d1      	beq.n	800f178 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800f1d4:	9b01      	ldr	r3, [sp, #4]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1f9      	bne.n	800f1d4 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	e792      	b.n	800f10a <HAL_ADC_ConfigChannel+0x2a>
 800f1e4:	00001001 	.word	0x00001001
 800f1e8:	40012708 	.word	0x40012708
 800f1ec:	ff400000 	.word	0xff400000
 800f1f0:	ffbfffff 	.word	0xffbfffff
 800f1f4:	ff7fffff 	.word	0xff7fffff
 800f1f8:	200000b4 	.word	0x200000b4
 800f1fc:	000f4240 	.word	0x000f4240

0800f200 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f200:	22ff      	movs	r2, #255	; 0xff
 800f202:	2303      	movs	r3, #3
 800f204:	b530      	push	{r4, r5, lr}
 800f206:	0014      	movs	r4, r2
 800f208:	b2c5      	uxtb	r5, r0
 800f20a:	402b      	ands	r3, r5
 800f20c:	00db      	lsls	r3, r3, #3
 800f20e:	409c      	lsls	r4, r3
 800f210:	0189      	lsls	r1, r1, #6
 800f212:	400a      	ands	r2, r1
 800f214:	43e4      	mvns	r4, r4
 800f216:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800f218:	2800      	cmp	r0, #0
 800f21a:	db0b      	blt.n	800f234 <HAL_NVIC_SetPriority+0x34>
 800f21c:	4b0c      	ldr	r3, [pc, #48]	; (800f250 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f21e:	0880      	lsrs	r0, r0, #2
 800f220:	469c      	mov	ip, r3
 800f222:	23c0      	movs	r3, #192	; 0xc0
 800f224:	0080      	lsls	r0, r0, #2
 800f226:	4460      	add	r0, ip
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	58c1      	ldr	r1, [r0, r3]
 800f22c:	400c      	ands	r4, r1
 800f22e:	4322      	orrs	r2, r4
 800f230:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800f232:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f234:	230f      	movs	r3, #15
 800f236:	4907      	ldr	r1, [pc, #28]	; (800f254 <HAL_NVIC_SetPriority+0x54>)
 800f238:	402b      	ands	r3, r5
 800f23a:	468c      	mov	ip, r1
 800f23c:	3b08      	subs	r3, #8
 800f23e:	089b      	lsrs	r3, r3, #2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4463      	add	r3, ip
 800f244:	69d9      	ldr	r1, [r3, #28]
 800f246:	400c      	ands	r4, r1
 800f248:	4322      	orrs	r2, r4
 800f24a:	61da      	str	r2, [r3, #28]
 800f24c:	e7f1      	b.n	800f232 <HAL_NVIC_SetPriority+0x32>
 800f24e:	46c0      	nop			; (mov r8, r8)
 800f250:	e000e100 	.word	0xe000e100
 800f254:	e000ed00 	.word	0xe000ed00

0800f258 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f258:	231f      	movs	r3, #31
 800f25a:	4018      	ands	r0, r3
 800f25c:	3b1e      	subs	r3, #30
 800f25e:	4083      	lsls	r3, r0
 800f260:	4a01      	ldr	r2, [pc, #4]	; (800f268 <HAL_NVIC_EnableIRQ+0x10>)
 800f262:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f264:	4770      	bx	lr
 800f266:	46c0      	nop			; (mov r8, r8)
 800f268:	e000e100 	.word	0xe000e100

0800f26c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f26c:	231f      	movs	r3, #31
 800f26e:	4018      	ands	r0, r3
 800f270:	3b1e      	subs	r3, #30
 800f272:	4083      	lsls	r3, r0
 800f274:	2280      	movs	r2, #128	; 0x80
 800f276:	4901      	ldr	r1, [pc, #4]	; (800f27c <HAL_NVIC_DisableIRQ+0x10>)
 800f278:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f27a:	4770      	bx	lr
 800f27c:	e000e100 	.word	0xe000e100

0800f280 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800f280:	4a0a      	ldr	r2, [pc, #40]	; (800f2ac <HAL_SYSTICK_Config+0x2c>)
 800f282:	1e43      	subs	r3, r0, #1
 800f284:	2001      	movs	r0, #1
 800f286:	4293      	cmp	r3, r2
 800f288:	d80e      	bhi.n	800f2a8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f28a:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f28c:	4a08      	ldr	r2, [pc, #32]	; (800f2b0 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f28e:	4809      	ldr	r0, [pc, #36]	; (800f2b4 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f290:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f292:	6a03      	ldr	r3, [r0, #32]
 800f294:	0609      	lsls	r1, r1, #24
 800f296:	021b      	lsls	r3, r3, #8
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	430b      	orrs	r3, r1
 800f29c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f29e:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f2a0:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f2a2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f2a4:	3307      	adds	r3, #7
 800f2a6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f2a8:	4770      	bx	lr
 800f2aa:	46c0      	nop			; (mov r8, r8)
 800f2ac:	00ffffff 	.word	0x00ffffff
 800f2b0:	e000e010 	.word	0xe000e010
 800f2b4:	e000ed00 	.word	0xe000ed00

0800f2b8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f2b8:	4a05      	ldr	r2, [pc, #20]	; (800f2d0 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800f2ba:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800f2bc:	2804      	cmp	r0, #4
 800f2be:	d003      	beq.n	800f2c8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800f2c0:	2104      	movs	r1, #4
 800f2c2:	438b      	bics	r3, r1
 800f2c4:	6013      	str	r3, [r2, #0]
  }
}
 800f2c6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800f2c8:	4318      	orrs	r0, r3
 800f2ca:	6010      	str	r0, [r2, #0]
 800f2cc:	e7fb      	b.n	800f2c6 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800f2ce:	46c0      	nop			; (mov r8, r8)
 800f2d0:	e000e010 	.word	0xe000e010

0800f2d4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800f2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2d6:	468c      	mov	ip, r1
 800f2d8:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800f2da:	0891      	lsrs	r1, r2, #2
 800f2dc:	d010      	beq.n	800f300 <CRC_Handle_8+0x2c>
 800f2de:	4664      	mov	r4, ip
 800f2e0:	008f      	lsls	r7, r1, #2
 800f2e2:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800f2e4:	7823      	ldrb	r3, [r4, #0]
 800f2e6:	7865      	ldrb	r5, [r4, #1]
 800f2e8:	061b      	lsls	r3, r3, #24
 800f2ea:	042d      	lsls	r5, r5, #16
 800f2ec:	432b      	orrs	r3, r5
 800f2ee:	78e5      	ldrb	r5, [r4, #3]
 800f2f0:	432b      	orrs	r3, r5
 800f2f2:	78a5      	ldrb	r5, [r4, #2]
 800f2f4:	3404      	adds	r4, #4
 800f2f6:	022d      	lsls	r5, r5, #8
 800f2f8:	432b      	orrs	r3, r5
 800f2fa:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800f2fc:	42a7      	cmp	r7, r4
 800f2fe:	d1f1      	bne.n	800f2e4 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800f300:	2303      	movs	r3, #3
 800f302:	401a      	ands	r2, r3
 800f304:	d00b      	beq.n	800f31e <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f306:	0089      	lsls	r1, r1, #2
 800f308:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800f30a:	2a01      	cmp	r2, #1
 800f30c:	d013      	beq.n	800f336 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800f30e:	2a02      	cmp	r2, #2
 800f310:	d107      	bne.n	800f322 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f312:	5c5a      	ldrb	r2, [r3, r1]
 800f314:	4461      	add	r1, ip
 800f316:	784b      	ldrb	r3, [r1, #1]
 800f318:	0212      	lsls	r2, r2, #8
 800f31a:	4313      	orrs	r3, r2
 800f31c:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f31e:	6830      	ldr	r0, [r6, #0]
}
 800f320:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800f322:	5c5a      	ldrb	r2, [r3, r1]
 800f324:	4461      	add	r1, ip
 800f326:	784b      	ldrb	r3, [r1, #1]
 800f328:	0212      	lsls	r2, r2, #8
 800f32a:	4313      	orrs	r3, r2
 800f32c:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800f32e:	788b      	ldrb	r3, [r1, #2]
 800f330:	7033      	strb	r3, [r6, #0]
 800f332:	6806      	ldr	r6, [r0, #0]
 800f334:	e7f3      	b.n	800f31e <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800f336:	5ccb      	ldrb	r3, [r1, r3]
 800f338:	7033      	strb	r3, [r6, #0]
 800f33a:	6806      	ldr	r6, [r0, #0]
 800f33c:	e7ef      	b.n	800f31e <CRC_Handle_8+0x4a>
 800f33e:	46c0      	nop			; (mov r8, r8)

0800f340 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800f340:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800f342:	0857      	lsrs	r7, r2, #1
 800f344:	6805      	ldr	r5, [r0, #0]
 800f346:	d00a      	beq.n	800f35e <CRC_Handle_16+0x1e>
 800f348:	0008      	movs	r0, r1
 800f34a:	00be      	lsls	r6, r7, #2
 800f34c:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800f34e:	8803      	ldrh	r3, [r0, #0]
 800f350:	8844      	ldrh	r4, [r0, #2]
 800f352:	041b      	lsls	r3, r3, #16
 800f354:	4323      	orrs	r3, r4
 800f356:	3004      	adds	r0, #4
 800f358:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800f35a:	4286      	cmp	r6, r0
 800f35c:	d1f7      	bne.n	800f34e <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800f35e:	07d3      	lsls	r3, r2, #31
 800f360:	d502      	bpl.n	800f368 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800f362:	00bf      	lsls	r7, r7, #2
 800f364:	5a7b      	ldrh	r3, [r7, r1]
 800f366:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800f368:	6828      	ldr	r0, [r5, #0]
}
 800f36a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f36c <HAL_CRC_Init>:
{
 800f36c:	b510      	push	{r4, lr}
 800f36e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800f370:	d01f      	beq.n	800f3b2 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800f372:	7f43      	ldrb	r3, [r0, #29]
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d01d      	beq.n	800f3b6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f37a:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f37c:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f37e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f380:	f000 f8ae 	bl	800f4e0 <HAL_CRCEx_Init>
 800f384:	2800      	cmp	r0, #0
 800f386:	d114      	bne.n	800f3b2 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800f388:	7963      	ldrb	r3, [r4, #5]
 800f38a:	6822      	ldr	r2, [r4, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d01d      	beq.n	800f3cc <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800f390:	6923      	ldr	r3, [r4, #16]
 800f392:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f394:	2160      	movs	r1, #96	; 0x60
 800f396:	6893      	ldr	r3, [r2, #8]
 800f398:	438b      	bics	r3, r1
 800f39a:	6961      	ldr	r1, [r4, #20]
 800f39c:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f39e:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800f3a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800f3a2:	6893      	ldr	r3, [r2, #8]
 800f3a4:	438b      	bics	r3, r1
 800f3a6:	69a1      	ldr	r1, [r4, #24]
 800f3a8:	430b      	orrs	r3, r1
 800f3aa:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800f3b0:	e000      	b.n	800f3b4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800f3b2:	2001      	movs	r0, #1
}
 800f3b4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f3b6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800f3b8:	f7fb fa1e 	bl	800a7f8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f3bc:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f3be:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800f3c0:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800f3c2:	f000 f88d 	bl	800f4e0 <HAL_CRCEx_Init>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d0de      	beq.n	800f388 <HAL_CRC_Init+0x1c>
 800f3ca:	e7f2      	b.n	800f3b2 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	6113      	str	r3, [r2, #16]
 800f3d0:	e7e0      	b.n	800f394 <HAL_CRC_Init+0x28>
 800f3d2:	46c0      	nop			; (mov r8, r8)

0800f3d4 <HAL_CRC_Accumulate>:
{
 800f3d4:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800f3d6:	7f03      	ldrb	r3, [r0, #28]
{
 800f3d8:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d021      	beq.n	800f422 <HAL_CRC_Accumulate+0x4e>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800f3e6:	6a03      	ldr	r3, [r0, #32]
 800f3e8:	2b02      	cmp	r3, #2
 800f3ea:	d017      	beq.n	800f41c <HAL_CRC_Accumulate+0x48>
 800f3ec:	2b03      	cmp	r3, #3
 800f3ee:	d00a      	beq.n	800f406 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f3f0:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d102      	bne.n	800f3fc <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f3f6:	0020      	movs	r0, r4
 800f3f8:	f7ff ff6c 	bl	800f2d4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f400:	2300      	movs	r3, #0
 800f402:	7723      	strb	r3, [r4, #28]
}
 800f404:	bd10      	pop	{r4, pc}
 800f406:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f408:	2a00      	cmp	r2, #0
 800f40a:	d005      	beq.n	800f418 <HAL_CRC_Accumulate+0x44>
 800f40c:	0092      	lsls	r2, r2, #2
 800f40e:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f410:	c908      	ldmia	r1!, {r3}
 800f412:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800f414:	428a      	cmp	r2, r1
 800f416:	d1fb      	bne.n	800f410 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800f418:	6800      	ldr	r0, [r0, #0]
      break;
 800f41a:	e7ef      	b.n	800f3fc <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f41c:	f7ff ff90 	bl	800f340 <CRC_Handle_16>
      break;
 800f420:	e7ec      	b.n	800f3fc <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800f422:	2002      	movs	r0, #2
 800f424:	e7ee      	b.n	800f404 <HAL_CRC_Accumulate+0x30>
 800f426:	46c0      	nop			; (mov r8, r8)

0800f428 <HAL_CRC_Calculate>:
{
 800f428:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800f42a:	7f03      	ldrb	r3, [r0, #28]
{
 800f42c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d026      	beq.n	800f480 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f432:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800f434:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800f436:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800f438:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800f43a:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800f43c:	6898      	ldr	r0, [r3, #8]
 800f43e:	4328      	orrs	r0, r5
 800f440:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800f442:	6a20      	ldr	r0, [r4, #32]
 800f444:	2802      	cmp	r0, #2
 800f446:	d017      	beq.n	800f478 <HAL_CRC_Calculate+0x50>
 800f448:	2803      	cmp	r0, #3
 800f44a:	d007      	beq.n	800f45c <HAL_CRC_Calculate+0x34>
 800f44c:	2801      	cmp	r0, #1
 800f44e:	d00f      	beq.n	800f470 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800f450:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800f452:	2301      	movs	r3, #1
 800f454:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800f456:	2300      	movs	r3, #0
 800f458:	7723      	strb	r3, [r4, #28]
}
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800f45c:	2a00      	cmp	r2, #0
 800f45e:	d005      	beq.n	800f46c <HAL_CRC_Calculate+0x44>
 800f460:	0092      	lsls	r2, r2, #2
 800f462:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800f464:	c901      	ldmia	r1!, {r0}
 800f466:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800f468:	4291      	cmp	r1, r2
 800f46a:	d1fb      	bne.n	800f464 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800f46c:	6818      	ldr	r0, [r3, #0]
      break;
 800f46e:	e7f0      	b.n	800f452 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800f470:	0020      	movs	r0, r4
 800f472:	f7ff ff2f 	bl	800f2d4 <CRC_Handle_8>
      break;
 800f476:	e7ec      	b.n	800f452 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800f478:	0020      	movs	r0, r4
 800f47a:	f7ff ff61 	bl	800f340 <CRC_Handle_16>
      break;
 800f47e:	e7e8      	b.n	800f452 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800f480:	2002      	movs	r0, #2
 800f482:	e7ea      	b.n	800f45a <HAL_CRC_Calculate+0x32>

0800f484 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800f484:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800f486:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800f488:	2501      	movs	r5, #1
 800f48a:	e001      	b.n	800f490 <HAL_CRCEx_Polynomial_Set+0xc>
 800f48c:	3b01      	subs	r3, #1
 800f48e:	d312      	bcc.n	800f4b6 <HAL_CRCEx_Polynomial_Set+0x32>
 800f490:	002c      	movs	r4, r5
 800f492:	409c      	lsls	r4, r3
 800f494:	4221      	tst	r1, r4
 800f496:	d0f9      	beq.n	800f48c <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800f498:	2a10      	cmp	r2, #16
 800f49a:	d01c      	beq.n	800f4d6 <HAL_CRCEx_Polynomial_Set+0x52>
 800f49c:	2a18      	cmp	r2, #24
 800f49e:	d012      	beq.n	800f4c6 <HAL_CRCEx_Polynomial_Set+0x42>
 800f4a0:	2a08      	cmp	r2, #8
 800f4a2:	d014      	beq.n	800f4ce <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800f4a4:	6800      	ldr	r0, [r0, #0]
 800f4a6:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800f4a8:	2118      	movs	r1, #24
 800f4aa:	6883      	ldr	r3, [r0, #8]
 800f4ac:	438b      	bics	r3, r1
 800f4ae:	431a      	orrs	r2, r3
 800f4b0:	6082      	str	r2, [r0, #8]
 800f4b2:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800f4b4:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800f4b6:	2a10      	cmp	r2, #16
 800f4b8:	d003      	beq.n	800f4c2 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f4ba:	2a18      	cmp	r2, #24
 800f4bc:	d001      	beq.n	800f4c2 <HAL_CRCEx_Polynomial_Set+0x3e>
 800f4be:	2a08      	cmp	r2, #8
 800f4c0:	d1f0      	bne.n	800f4a4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4c2:	2001      	movs	r0, #1
 800f4c4:	e7f6      	b.n	800f4b4 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800f4c6:	2b06      	cmp	r3, #6
 800f4c8:	d9ec      	bls.n	800f4a4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4ca:	2001      	movs	r0, #1
 800f4cc:	e7f2      	b.n	800f4b4 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800f4ce:	2b0f      	cmp	r3, #15
 800f4d0:	d9e8      	bls.n	800f4a4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4d2:	2001      	movs	r0, #1
 800f4d4:	e7ee      	b.n	800f4b4 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800f4d6:	2b07      	cmp	r3, #7
 800f4d8:	d9e4      	bls.n	800f4a4 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800f4da:	2001      	movs	r0, #1
 800f4dc:	e7ea      	b.n	800f4b4 <HAL_CRCEx_Polynomial_Set+0x30>
 800f4de:	46c0      	nop			; (mov r8, r8)

0800f4e0 <HAL_CRCEx_Init>:
{
 800f4e0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800f4e2:	7903      	ldrb	r3, [r0, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d108      	bne.n	800f4fa <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f4e8:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f4ea:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800f4ec:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800f4ee:	4a07      	ldr	r2, [pc, #28]	; (800f50c <HAL_CRCEx_Init+0x2c>)
 800f4f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	438a      	bics	r2, r1
 800f4f6:	609a      	str	r2, [r3, #8]
}
 800f4f8:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800f4fa:	68c2      	ldr	r2, [r0, #12]
 800f4fc:	6881      	ldr	r1, [r0, #8]
 800f4fe:	f7ff ffc1 	bl	800f484 <HAL_CRCEx_Polynomial_Set>
 800f502:	1e43      	subs	r3, r0, #1
 800f504:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800f506:	b2c0      	uxtb	r0, r0
 800f508:	e7f6      	b.n	800f4f8 <HAL_CRCEx_Init+0x18>
 800f50a:	46c0      	nop			; (mov r8, r8)
 800f50c:	04c11db7 	.word	0x04c11db7

0800f510 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800f510:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f512:	2800      	cmp	r0, #0
 800f514:	d023      	beq.n	800f55e <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800f516:	2321      	movs	r3, #33	; 0x21
 800f518:	5cc3      	ldrb	r3, [r0, r3]
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d01b      	beq.n	800f558 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f520:	2121      	movs	r1, #33	; 0x21
 800f522:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f524:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f526:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800f528:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f52a:	4a0e      	ldr	r2, [pc, #56]	; (800f564 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f52c:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f52e:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800f530:	6843      	ldr	r3, [r0, #4]
 800f532:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f534:	68c5      	ldr	r5, [r0, #12]
 800f536:	432b      	orrs	r3, r5
 800f538:	6905      	ldr	r5, [r0, #16]
 800f53a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f53c:	6945      	ldr	r5, [r0, #20]
 800f53e:	432b      	orrs	r3, r5
 800f540:	6985      	ldr	r5, [r0, #24]
 800f542:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f544:	69c5      	ldr	r5, [r0, #28]
 800f546:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800f548:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800f54a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f550:	3301      	adds	r3, #1
 800f552:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800f554:	2000      	movs	r0, #0
}  
 800f556:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800f558:	2220      	movs	r2, #32
 800f55a:	5483      	strb	r3, [r0, r2]
 800f55c:	e7e0      	b.n	800f520 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800f55e:	2001      	movs	r0, #1
 800f560:	e7f9      	b.n	800f556 <HAL_DMA_Init+0x46>
 800f562:	46c0      	nop			; (mov r8, r8)
 800f564:	ffffc00f 	.word	0xffffc00f

0800f568 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f568:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800f56a:	2420      	movs	r4, #32
 800f56c:	5d05      	ldrb	r5, [r0, r4]
 800f56e:	2d01      	cmp	r5, #1
 800f570:	d023      	beq.n	800f5ba <HAL_DMA_Start_IT+0x52>
 800f572:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f574:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800f576:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800f578:	3401      	adds	r4, #1
 800f57a:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f57c:	6804      	ldr	r4, [r0, #0]
 800f57e:	6825      	ldr	r5, [r4, #0]
 800f580:	43b5      	bics	r5, r6
 800f582:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f584:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f586:	6843      	ldr	r3, [r0, #4]
 800f588:	2b10      	cmp	r3, #16
 800f58a:	d013      	beq.n	800f5b4 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800f58c:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800f58e:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f590:	2202      	movs	r2, #2
  return HAL_OK;    
 800f592:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	4313      	orrs	r3, r2
 800f598:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	3202      	adds	r2, #2
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	3204      	adds	r2, #4
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800f5aa:	6823      	ldr	r3, [r4, #0]
 800f5ac:	3a07      	subs	r2, #7
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	6023      	str	r3, [r4, #0]
} 
 800f5b2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800f5b4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800f5b6:	60e1      	str	r1, [r4, #12]
 800f5b8:	e7ea      	b.n	800f590 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800f5ba:	2002      	movs	r0, #2
 800f5bc:	e7f9      	b.n	800f5b2 <HAL_DMA_Start_IT+0x4a>
 800f5be:	46c0      	nop			; (mov r8, r8)

0800f5c0 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800f5c0:	2101      	movs	r1, #1
 800f5c2:	6802      	ldr	r2, [r0, #0]
{
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800f5c6:	6813      	ldr	r3, [r2, #0]
{
 800f5c8:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f5ca:	438b      	bics	r3, r1
 800f5cc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f5ce:	f7ff fb4f 	bl	800ec70 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f5d2:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800f5d4:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f5d6:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f5d8:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f5da:	e004      	b.n	800f5e6 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800f5dc:	f7ff fb48 	bl	800ec70 <HAL_GetTick>
 800f5e0:	1bc0      	subs	r0, r0, r7
 800f5e2:	42b0      	cmp	r0, r6
 800f5e4:	d809      	bhi.n	800f5fa <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	402b      	ands	r3, r5
 800f5ec:	d1f6      	bne.n	800f5dc <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800f5ee:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800f5f0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800f5f2:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800f5f4:	3a01      	subs	r2, #1
 800f5f6:	54a3      	strb	r3, [r4, r2]
}
 800f5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f5fa:	2220      	movs	r2, #32
 800f5fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f5fe:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800f600:	4313      	orrs	r3, r2
 800f602:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f604:	2321      	movs	r3, #33	; 0x21
 800f606:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f608:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800f60a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800f60c:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800f60e:	e7f3      	b.n	800f5f8 <HAL_DMA_Abort+0x38>

0800f610 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f610:	6803      	ldr	r3, [r0, #0]
 800f612:	4aa2      	ldr	r2, [pc, #648]	; (800f89c <HAL_DMA_IRQHandler+0x28c>)
{        
 800f614:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f616:	0019      	movs	r1, r3
{        
 800f618:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d937      	bls.n	800f68e <HAL_DMA_IRQHandler+0x7e>
 800f61e:	48a0      	ldr	r0, [pc, #640]	; (800f8a0 <HAL_DMA_IRQHandler+0x290>)
 800f620:	4da0      	ldr	r5, [pc, #640]	; (800f8a4 <HAL_DMA_IRQHandler+0x294>)
 800f622:	6806      	ldr	r6, [r0, #0]
 800f624:	42ab      	cmp	r3, r5
 800f626:	d100      	bne.n	800f62a <HAL_DMA_IRQHandler+0x1a>
 800f628:	e0ed      	b.n	800f806 <HAL_DMA_IRQHandler+0x1f6>
 800f62a:	4d9f      	ldr	r5, [pc, #636]	; (800f8a8 <HAL_DMA_IRQHandler+0x298>)
 800f62c:	42ab      	cmp	r3, r5
 800f62e:	d100      	bne.n	800f632 <HAL_DMA_IRQHandler+0x22>
 800f630:	e334      	b.n	800fc9c <HAL_DMA_IRQHandler+0x68c>
 800f632:	4d9e      	ldr	r5, [pc, #632]	; (800f8ac <HAL_DMA_IRQHandler+0x29c>)
 800f634:	42ab      	cmp	r3, r5
 800f636:	d100      	bne.n	800f63a <HAL_DMA_IRQHandler+0x2a>
 800f638:	e129      	b.n	800f88e <HAL_DMA_IRQHandler+0x27e>
 800f63a:	4d9d      	ldr	r5, [pc, #628]	; (800f8b0 <HAL_DMA_IRQHandler+0x2a0>)
 800f63c:	42ab      	cmp	r3, r5
 800f63e:	d100      	bne.n	800f642 <HAL_DMA_IRQHandler+0x32>
 800f640:	e34b      	b.n	800fcda <HAL_DMA_IRQHandler+0x6ca>
 800f642:	4d9c      	ldr	r5, [pc, #624]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a4>)
 800f644:	42ab      	cmp	r3, r5
 800f646:	d100      	bne.n	800f64a <HAL_DMA_IRQHandler+0x3a>
 800f648:	e38b      	b.n	800fd62 <HAL_DMA_IRQHandler+0x752>
 800f64a:	4d9b      	ldr	r5, [pc, #620]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a8>)
 800f64c:	42ab      	cmp	r3, r5
 800f64e:	d100      	bne.n	800f652 <HAL_DMA_IRQHandler+0x42>
 800f650:	e3cf      	b.n	800fdf2 <HAL_DMA_IRQHandler+0x7e2>
 800f652:	4293      	cmp	r3, r2
 800f654:	d100      	bne.n	800f658 <HAL_DMA_IRQHandler+0x48>
 800f656:	e35e      	b.n	800fd16 <HAL_DMA_IRQHandler+0x706>
 800f658:	4a98      	ldr	r2, [pc, #608]	; (800f8bc <HAL_DMA_IRQHandler+0x2ac>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d101      	bne.n	800f662 <HAL_DMA_IRQHandler+0x52>
 800f65e:	f000 fbe8 	bl	800fe32 <HAL_DMA_IRQHandler+0x822>
 800f662:	4a97      	ldr	r2, [pc, #604]	; (800f8c0 <HAL_DMA_IRQHandler+0x2b0>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d101      	bne.n	800f66c <HAL_DMA_IRQHandler+0x5c>
 800f668:	f000 fc04 	bl	800fe74 <HAL_DMA_IRQHandler+0x864>
 800f66c:	4a95      	ldr	r2, [pc, #596]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b4>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d101      	bne.n	800f676 <HAL_DMA_IRQHandler+0x66>
 800f672:	f000 fc21 	bl	800feb8 <HAL_DMA_IRQHandler+0x8a8>
 800f676:	4a94      	ldr	r2, [pc, #592]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b8>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d101      	bne.n	800f680 <HAL_DMA_IRQHandler+0x70>
 800f67c:	f000 fc37 	bl	800feee <HAL_DMA_IRQHandler+0x8de>
 800f680:	0332      	lsls	r2, r6, #12
 800f682:	d43c      	bmi.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f684:	4a86      	ldr	r2, [pc, #536]	; (800f8a0 <HAL_DMA_IRQHandler+0x290>)
 800f686:	6810      	ldr	r0, [r2, #0]
 800f688:	2280      	movs	r2, #128	; 0x80
 800f68a:	02d2      	lsls	r2, r2, #11
 800f68c:	e0c0      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f68e:	488f      	ldr	r0, [pc, #572]	; (800f8cc <HAL_DMA_IRQHandler+0x2bc>)
 800f690:	4d84      	ldr	r5, [pc, #528]	; (800f8a4 <HAL_DMA_IRQHandler+0x294>)
 800f692:	6806      	ldr	r6, [r0, #0]
 800f694:	42ab      	cmp	r3, r5
 800f696:	d02e      	beq.n	800f6f6 <HAL_DMA_IRQHandler+0xe6>
 800f698:	4d83      	ldr	r5, [pc, #524]	; (800f8a8 <HAL_DMA_IRQHandler+0x298>)
 800f69a:	42ab      	cmp	r3, r5
 800f69c:	d100      	bne.n	800f6a0 <HAL_DMA_IRQHandler+0x90>
 800f69e:	e2f6      	b.n	800fc8e <HAL_DMA_IRQHandler+0x67e>
 800f6a0:	4d82      	ldr	r5, [pc, #520]	; (800f8ac <HAL_DMA_IRQHandler+0x29c>)
 800f6a2:	42ab      	cmp	r3, r5
 800f6a4:	d100      	bne.n	800f6a8 <HAL_DMA_IRQHandler+0x98>
 800f6a6:	e0ea      	b.n	800f87e <HAL_DMA_IRQHandler+0x26e>
 800f6a8:	4d81      	ldr	r5, [pc, #516]	; (800f8b0 <HAL_DMA_IRQHandler+0x2a0>)
 800f6aa:	42ab      	cmp	r3, r5
 800f6ac:	d100      	bne.n	800f6b0 <HAL_DMA_IRQHandler+0xa0>
 800f6ae:	e30c      	b.n	800fcca <HAL_DMA_IRQHandler+0x6ba>
 800f6b0:	4d80      	ldr	r5, [pc, #512]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a4>)
 800f6b2:	42ab      	cmp	r3, r5
 800f6b4:	d100      	bne.n	800f6b8 <HAL_DMA_IRQHandler+0xa8>
 800f6b6:	e35b      	b.n	800fd70 <HAL_DMA_IRQHandler+0x760>
 800f6b8:	4d7f      	ldr	r5, [pc, #508]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a8>)
 800f6ba:	42ab      	cmp	r3, r5
 800f6bc:	d100      	bne.n	800f6c0 <HAL_DMA_IRQHandler+0xb0>
 800f6be:	e390      	b.n	800fde2 <HAL_DMA_IRQHandler+0x7d2>
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d100      	bne.n	800f6c6 <HAL_DMA_IRQHandler+0xb6>
 800f6c4:	e31f      	b.n	800fd06 <HAL_DMA_IRQHandler+0x6f6>
 800f6c6:	4a7d      	ldr	r2, [pc, #500]	; (800f8bc <HAL_DMA_IRQHandler+0x2ac>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d100      	bne.n	800f6ce <HAL_DMA_IRQHandler+0xbe>
 800f6cc:	e3aa      	b.n	800fe24 <HAL_DMA_IRQHandler+0x814>
 800f6ce:	4a7c      	ldr	r2, [pc, #496]	; (800f8c0 <HAL_DMA_IRQHandler+0x2b0>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d100      	bne.n	800f6d6 <HAL_DMA_IRQHandler+0xc6>
 800f6d4:	e3c7      	b.n	800fe66 <HAL_DMA_IRQHandler+0x856>
 800f6d6:	4a7b      	ldr	r2, [pc, #492]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b4>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d101      	bne.n	800f6e0 <HAL_DMA_IRQHandler+0xd0>
 800f6dc:	f000 fbe4 	bl	800fea8 <HAL_DMA_IRQHandler+0x898>
 800f6e0:	4a79      	ldr	r2, [pc, #484]	; (800f8c8 <HAL_DMA_IRQHandler+0x2b8>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d100      	bne.n	800f6e8 <HAL_DMA_IRQHandler+0xd8>
 800f6e6:	e2e8      	b.n	800fcba <HAL_DMA_IRQHandler+0x6aa>
 800f6e8:	0332      	lsls	r2, r6, #12
 800f6ea:	d408      	bmi.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f6ec:	4a77      	ldr	r2, [pc, #476]	; (800f8cc <HAL_DMA_IRQHandler+0x2bc>)
 800f6ee:	6810      	ldr	r0, [r2, #0]
 800f6f0:	2280      	movs	r2, #128	; 0x80
 800f6f2:	02d2      	lsls	r2, r2, #11
 800f6f4:	e15f      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f6f6:	0732      	lsls	r2, r6, #28
 800f6f8:	d401      	bmi.n	800f6fe <HAL_DMA_IRQHandler+0xee>
 800f6fa:	f000 fc0a 	bl	800ff12 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f6fe:	2208      	movs	r2, #8
 800f700:	6818      	ldr	r0, [r3, #0]
 800f702:	4202      	tst	r2, r0
 800f704:	d100      	bne.n	800f708 <HAL_DMA_IRQHandler+0xf8>
 800f706:	e1f4      	b.n	800faf2 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f708:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f70a:	4d66      	ldr	r5, [pc, #408]	; (800f8a4 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f70c:	4390      	bics	r0, r2
 800f70e:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f710:	4862      	ldr	r0, [pc, #392]	; (800f89c <HAL_DMA_IRQHandler+0x28c>)
 800f712:	4283      	cmp	r3, r0
 800f714:	d800      	bhi.n	800f718 <HAL_DMA_IRQHandler+0x108>
 800f716:	e1a9      	b.n	800fa6c <HAL_DMA_IRQHandler+0x45c>
 800f718:	42ab      	cmp	r3, r5
 800f71a:	d100      	bne.n	800f71e <HAL_DMA_IRQHandler+0x10e>
 800f71c:	e310      	b.n	800fd40 <HAL_DMA_IRQHandler+0x730>
 800f71e:	4a62      	ldr	r2, [pc, #392]	; (800f8a8 <HAL_DMA_IRQHandler+0x298>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d100      	bne.n	800f726 <HAL_DMA_IRQHandler+0x116>
 800f724:	e337      	b.n	800fd96 <HAL_DMA_IRQHandler+0x786>
 800f726:	4a61      	ldr	r2, [pc, #388]	; (800f8ac <HAL_DMA_IRQHandler+0x29c>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d100      	bne.n	800f72e <HAL_DMA_IRQHandler+0x11e>
 800f72c:	e2df      	b.n	800fcee <HAL_DMA_IRQHandler+0x6de>
 800f72e:	4a60      	ldr	r2, [pc, #384]	; (800f8b0 <HAL_DMA_IRQHandler+0x2a0>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d100      	bne.n	800f736 <HAL_DMA_IRQHandler+0x126>
 800f734:	e370      	b.n	800fe18 <HAL_DMA_IRQHandler+0x808>
 800f736:	4a5f      	ldr	r2, [pc, #380]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a4>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d100      	bne.n	800f73e <HAL_DMA_IRQHandler+0x12e>
 800f73c:	e38a      	b.n	800fe54 <HAL_DMA_IRQHandler+0x844>
 800f73e:	4a5e      	ldr	r2, [pc, #376]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a8>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d100      	bne.n	800f746 <HAL_DMA_IRQHandler+0x136>
 800f744:	e3a4      	b.n	800fe90 <HAL_DMA_IRQHandler+0x880>
 800f746:	4283      	cmp	r3, r0
 800f748:	d100      	bne.n	800f74c <HAL_DMA_IRQHandler+0x13c>
 800f74a:	e3cd      	b.n	800fee8 <HAL_DMA_IRQHandler+0x8d8>
 800f74c:	4a5b      	ldr	r2, [pc, #364]	; (800f8bc <HAL_DMA_IRQHandler+0x2ac>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d100      	bne.n	800f754 <HAL_DMA_IRQHandler+0x144>
 800f752:	e3d8      	b.n	800ff06 <HAL_DMA_IRQHandler+0x8f6>
 800f754:	4a5a      	ldr	r2, [pc, #360]	; (800f8c0 <HAL_DMA_IRQHandler+0x2b0>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d100      	bne.n	800f75c <HAL_DMA_IRQHandler+0x14c>
 800f75a:	e3d8      	b.n	800ff0e <HAL_DMA_IRQHandler+0x8fe>
 800f75c:	4a59      	ldr	r2, [pc, #356]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b4>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d100      	bne.n	800f764 <HAL_DMA_IRQHandler+0x154>
 800f762:	e2c4      	b.n	800fcee <HAL_DMA_IRQHandler+0x6de>
 800f764:	4a5a      	ldr	r2, [pc, #360]	; (800f8d0 <HAL_DMA_IRQHandler+0x2c0>)
 800f766:	189a      	adds	r2, r3, r2
 800f768:	4250      	negs	r0, r2
 800f76a:	4142      	adcs	r2, r0
 800f76c:	4859      	ldr	r0, [pc, #356]	; (800f8d4 <HAL_DMA_IRQHandler+0x2c4>)
 800f76e:	4252      	negs	r2, r2
 800f770:	4002      	ands	r2, r0
 800f772:	2080      	movs	r0, #128	; 0x80
 800f774:	0300      	lsls	r0, r0, #12
 800f776:	4684      	mov	ip, r0
 800f778:	4462      	add	r2, ip
 800f77a:	4849      	ldr	r0, [pc, #292]	; (800f8a0 <HAL_DMA_IRQHandler+0x290>)
 800f77c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f77e:	2001      	movs	r0, #1
 800f780:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f782:	4302      	orrs	r2, r0
 800f784:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f786:	2221      	movs	r2, #33	; 0x21
 800f788:	3003      	adds	r0, #3
 800f78a:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800f78c:	2000      	movs	r0, #0
 800f78e:	3a01      	subs	r2, #1
 800f790:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f792:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f794:	2a00      	cmp	r2, #0
 800f796:	d000      	beq.n	800f79a <HAL_DMA_IRQHandler+0x18a>
 800f798:	e1a7      	b.n	800faea <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f79a:	4a41      	ldr	r2, [pc, #260]	; (800f8a0 <HAL_DMA_IRQHandler+0x290>)
 800f79c:	4d41      	ldr	r5, [pc, #260]	; (800f8a4 <HAL_DMA_IRQHandler+0x294>)
 800f79e:	6810      	ldr	r0, [r2, #0]
 800f7a0:	2204      	movs	r2, #4
 800f7a2:	42ab      	cmp	r3, r5
 800f7a4:	d034      	beq.n	800f810 <HAL_DMA_IRQHandler+0x200>
 800f7a6:	4d40      	ldr	r5, [pc, #256]	; (800f8a8 <HAL_DMA_IRQHandler+0x298>)
 800f7a8:	2240      	movs	r2, #64	; 0x40
 800f7aa:	42ab      	cmp	r3, r5
 800f7ac:	d030      	beq.n	800f810 <HAL_DMA_IRQHandler+0x200>
 800f7ae:	4a3f      	ldr	r2, [pc, #252]	; (800f8ac <HAL_DMA_IRQHandler+0x29c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d100      	bne.n	800f7b6 <HAL_DMA_IRQHandler+0x1a6>
 800f7b4:	e3b1      	b.n	800ff1a <HAL_DMA_IRQHandler+0x90a>
 800f7b6:	4a3e      	ldr	r2, [pc, #248]	; (800f8b0 <HAL_DMA_IRQHandler+0x2a0>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d100      	bne.n	800f7be <HAL_DMA_IRQHandler+0x1ae>
 800f7bc:	e39e      	b.n	800fefc <HAL_DMA_IRQHandler+0x8ec>
 800f7be:	4a3d      	ldr	r2, [pc, #244]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a4>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d100      	bne.n	800f7c6 <HAL_DMA_IRQHandler+0x1b6>
 800f7c4:	e760      	b.n	800f688 <HAL_DMA_IRQHandler+0x78>
 800f7c6:	4a3c      	ldr	r2, [pc, #240]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a8>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d100      	bne.n	800f7ce <HAL_DMA_IRQHandler+0x1be>
 800f7cc:	e315      	b.n	800fdfa <HAL_DMA_IRQHandler+0x7ea>
 800f7ce:	4a33      	ldr	r2, [pc, #204]	; (800f89c <HAL_DMA_IRQHandler+0x28c>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d100      	bne.n	800f7d6 <HAL_DMA_IRQHandler+0x1c6>
 800f7d4:	e2a3      	b.n	800fd1e <HAL_DMA_IRQHandler+0x70e>
 800f7d6:	4d39      	ldr	r5, [pc, #228]	; (800f8bc <HAL_DMA_IRQHandler+0x2ac>)
 800f7d8:	2204      	movs	r2, #4
 800f7da:	42ab      	cmp	r3, r5
 800f7dc:	d018      	beq.n	800f810 <HAL_DMA_IRQHandler+0x200>
 800f7de:	4d38      	ldr	r5, [pc, #224]	; (800f8c0 <HAL_DMA_IRQHandler+0x2b0>)
 800f7e0:	323c      	adds	r2, #60	; 0x3c
 800f7e2:	42ab      	cmp	r3, r5
 800f7e4:	d014      	beq.n	800f810 <HAL_DMA_IRQHandler+0x200>
 800f7e6:	4a37      	ldr	r2, [pc, #220]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b4>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d100      	bne.n	800f7ee <HAL_DMA_IRQHandler+0x1de>
 800f7ec:	e395      	b.n	800ff1a <HAL_DMA_IRQHandler+0x90a>
 800f7ee:	4a38      	ldr	r2, [pc, #224]	; (800f8d0 <HAL_DMA_IRQHandler+0x2c0>)
 800f7f0:	189a      	adds	r2, r3, r2
 800f7f2:	4255      	negs	r5, r2
 800f7f4:	416a      	adcs	r2, r5
 800f7f6:	4d38      	ldr	r5, [pc, #224]	; (800f8d8 <HAL_DMA_IRQHandler+0x2c8>)
 800f7f8:	4252      	negs	r2, r2
 800f7fa:	402a      	ands	r2, r5
 800f7fc:	2580      	movs	r5, #128	; 0x80
 800f7fe:	02ed      	lsls	r5, r5, #11
 800f800:	46ac      	mov	ip, r5
 800f802:	4462      	add	r2, ip
 800f804:	e004      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f806:	0732      	lsls	r2, r6, #28
 800f808:	d500      	bpl.n	800f80c <HAL_DMA_IRQHandler+0x1fc>
 800f80a:	e778      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f80c:	2204      	movs	r2, #4
 800f80e:	6800      	ldr	r0, [r0, #0]
 800f810:	4210      	tst	r0, r2
 800f812:	d000      	beq.n	800f816 <HAL_DMA_IRQHandler+0x206>
 800f814:	e0d1      	b.n	800f9ba <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f816:	4a22      	ldr	r2, [pc, #136]	; (800f8a0 <HAL_DMA_IRQHandler+0x290>)
 800f818:	6810      	ldr	r0, [r2, #0]
 800f81a:	4a22      	ldr	r2, [pc, #136]	; (800f8a4 <HAL_DMA_IRQHandler+0x294>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d100      	bne.n	800f822 <HAL_DMA_IRQHandler+0x212>
 800f820:	e122      	b.n	800fa68 <HAL_DMA_IRQHandler+0x458>
 800f822:	4a21      	ldr	r2, [pc, #132]	; (800f8a8 <HAL_DMA_IRQHandler+0x298>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d05b      	beq.n	800f8e0 <HAL_DMA_IRQHandler+0x2d0>
 800f828:	4a20      	ldr	r2, [pc, #128]	; (800f8ac <HAL_DMA_IRQHandler+0x29c>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d100      	bne.n	800f830 <HAL_DMA_IRQHandler+0x220>
 800f82e:	e19a      	b.n	800fb66 <HAL_DMA_IRQHandler+0x556>
 800f830:	4a1f      	ldr	r2, [pc, #124]	; (800f8b0 <HAL_DMA_IRQHandler+0x2a0>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d100      	bne.n	800f838 <HAL_DMA_IRQHandler+0x228>
 800f836:	e237      	b.n	800fca8 <HAL_DMA_IRQHandler+0x698>
 800f838:	4a1e      	ldr	r2, [pc, #120]	; (800f8b4 <HAL_DMA_IRQHandler+0x2a4>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d100      	bne.n	800f840 <HAL_DMA_IRQHandler+0x230>
 800f83e:	e239      	b.n	800fcb4 <HAL_DMA_IRQHandler+0x6a4>
 800f840:	4a1d      	ldr	r2, [pc, #116]	; (800f8b8 <HAL_DMA_IRQHandler+0x2a8>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d100      	bne.n	800f848 <HAL_DMA_IRQHandler+0x238>
 800f846:	e24f      	b.n	800fce8 <HAL_DMA_IRQHandler+0x6d8>
 800f848:	4a14      	ldr	r2, [pc, #80]	; (800f89c <HAL_DMA_IRQHandler+0x28c>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d100      	bne.n	800f850 <HAL_DMA_IRQHandler+0x240>
 800f84e:	e297      	b.n	800fd80 <HAL_DMA_IRQHandler+0x770>
 800f850:	4a1a      	ldr	r2, [pc, #104]	; (800f8bc <HAL_DMA_IRQHandler+0x2ac>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d100      	bne.n	800f858 <HAL_DMA_IRQHandler+0x248>
 800f856:	e107      	b.n	800fa68 <HAL_DMA_IRQHandler+0x458>
 800f858:	4a19      	ldr	r2, [pc, #100]	; (800f8c0 <HAL_DMA_IRQHandler+0x2b0>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d040      	beq.n	800f8e0 <HAL_DMA_IRQHandler+0x2d0>
 800f85e:	4a19      	ldr	r2, [pc, #100]	; (800f8c4 <HAL_DMA_IRQHandler+0x2b4>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d100      	bne.n	800f866 <HAL_DMA_IRQHandler+0x256>
 800f864:	e17f      	b.n	800fb66 <HAL_DMA_IRQHandler+0x556>
 800f866:	4a1a      	ldr	r2, [pc, #104]	; (800f8d0 <HAL_DMA_IRQHandler+0x2c0>)
 800f868:	1899      	adds	r1, r3, r2
 800f86a:	424a      	negs	r2, r1
 800f86c:	4151      	adcs	r1, r2
 800f86e:	4a1b      	ldr	r2, [pc, #108]	; (800f8dc <HAL_DMA_IRQHandler+0x2cc>)
 800f870:	4249      	negs	r1, r1
 800f872:	400a      	ands	r2, r1
 800f874:	2180      	movs	r1, #128	; 0x80
 800f876:	0289      	lsls	r1, r1, #10
 800f878:	468c      	mov	ip, r1
 800f87a:	4462      	add	r2, ip
 800f87c:	e031      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f87e:	0532      	lsls	r2, r6, #20
 800f880:	d500      	bpl.n	800f884 <HAL_DMA_IRQHandler+0x274>
 800f882:	e73c      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f884:	2280      	movs	r2, #128	; 0x80
 800f886:	6800      	ldr	r0, [r0, #0]
 800f888:	0019      	movs	r1, r3
 800f88a:	00d2      	lsls	r2, r2, #3
 800f88c:	e093      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f88e:	0532      	lsls	r2, r6, #20
 800f890:	d500      	bpl.n	800f894 <HAL_DMA_IRQHandler+0x284>
 800f892:	e734      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f894:	2280      	movs	r2, #128	; 0x80
 800f896:	6800      	ldr	r0, [r0, #0]
 800f898:	00d2      	lsls	r2, r2, #3
 800f89a:	e7b9      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
 800f89c:	40020080 	.word	0x40020080
 800f8a0:	40020400 	.word	0x40020400
 800f8a4:	40020008 	.word	0x40020008
 800f8a8:	4002001c 	.word	0x4002001c
 800f8ac:	40020030 	.word	0x40020030
 800f8b0:	40020044 	.word	0x40020044
 800f8b4:	40020058 	.word	0x40020058
 800f8b8:	4002006c 	.word	0x4002006c
 800f8bc:	40020408 	.word	0x40020408
 800f8c0:	4002041c 	.word	0x4002041c
 800f8c4:	40020430 	.word	0x40020430
 800f8c8:	40020444 	.word	0x40020444
 800f8cc:	40020000 	.word	0x40020000
 800f8d0:	bffdfbbc 	.word	0xbffdfbbc
 800f8d4:	fff88000 	.word	0xfff88000
 800f8d8:	fffc4000 	.word	0xfffc4000
 800f8dc:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f8e0:	2220      	movs	r2, #32
 800f8e2:	4002      	ands	r2, r0
 800f8e4:	1e51      	subs	r1, r2, #1
 800f8e6:	418a      	sbcs	r2, r1
 800f8e8:	b2d2      	uxtb	r2, r2
 800f8ea:	2a00      	cmp	r2, #0
 800f8ec:	d050      	beq.n	800f990 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	6819      	ldr	r1, [r3, #0]
 800f8f2:	420a      	tst	r2, r1
 800f8f4:	d04c      	beq.n	800f990 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f8f6:	6819      	ldr	r1, [r3, #0]
 800f8f8:	0689      	lsls	r1, r1, #26
 800f8fa:	d402      	bmi.n	800f902 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800f8fc:	6819      	ldr	r1, [r3, #0]
 800f8fe:	4391      	bics	r1, r2
 800f900:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f902:	4ab5      	ldr	r2, [pc, #724]	; (800fbd8 <HAL_DMA_IRQHandler+0x5c8>)
 800f904:	49b5      	ldr	r1, [pc, #724]	; (800fbdc <HAL_DMA_IRQHandler+0x5cc>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d800      	bhi.n	800f90c <HAL_DMA_IRQHandler+0x2fc>
 800f90a:	e12f      	b.n	800fb6c <HAL_DMA_IRQHandler+0x55c>
 800f90c:	428b      	cmp	r3, r1
 800f90e:	d100      	bne.n	800f912 <HAL_DMA_IRQHandler+0x302>
 800f910:	e20e      	b.n	800fd30 <HAL_DMA_IRQHandler+0x720>
 800f912:	49b3      	ldr	r1, [pc, #716]	; (800fbe0 <HAL_DMA_IRQHandler+0x5d0>)
 800f914:	428b      	cmp	r3, r1
 800f916:	d100      	bne.n	800f91a <HAL_DMA_IRQHandler+0x30a>
 800f918:	e237      	b.n	800fd8a <HAL_DMA_IRQHandler+0x77a>
 800f91a:	49b2      	ldr	r1, [pc, #712]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d4>)
 800f91c:	428b      	cmp	r3, r1
 800f91e:	d100      	bne.n	800f922 <HAL_DMA_IRQHandler+0x312>
 800f920:	e271      	b.n	800fe06 <HAL_DMA_IRQHandler+0x7f6>
 800f922:	49b1      	ldr	r1, [pc, #708]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d8>)
 800f924:	428b      	cmp	r3, r1
 800f926:	d100      	bne.n	800f92a <HAL_DMA_IRQHandler+0x31a>
 800f928:	e1fc      	b.n	800fd24 <HAL_DMA_IRQHandler+0x714>
 800f92a:	49b0      	ldr	r1, [pc, #704]	; (800fbec <HAL_DMA_IRQHandler+0x5dc>)
 800f92c:	428b      	cmp	r3, r1
 800f92e:	d100      	bne.n	800f932 <HAL_DMA_IRQHandler+0x322>
 800f930:	e28a      	b.n	800fe48 <HAL_DMA_IRQHandler+0x838>
 800f932:	49af      	ldr	r1, [pc, #700]	; (800fbf0 <HAL_DMA_IRQHandler+0x5e0>)
 800f934:	428b      	cmp	r3, r1
 800f936:	d100      	bne.n	800f93a <HAL_DMA_IRQHandler+0x32a>
 800f938:	e2a7      	b.n	800fe8a <HAL_DMA_IRQHandler+0x87a>
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d100      	bne.n	800f940 <HAL_DMA_IRQHandler+0x330>
 800f93e:	e2c4      	b.n	800feca <HAL_DMA_IRQHandler+0x8ba>
 800f940:	4aac      	ldr	r2, [pc, #688]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e4>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d100      	bne.n	800f948 <HAL_DMA_IRQHandler+0x338>
 800f946:	e1f3      	b.n	800fd30 <HAL_DMA_IRQHandler+0x720>
 800f948:	4aab      	ldr	r2, [pc, #684]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e8>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d100      	bne.n	800f950 <HAL_DMA_IRQHandler+0x340>
 800f94e:	e21c      	b.n	800fd8a <HAL_DMA_IRQHandler+0x77a>
 800f950:	4aaa      	ldr	r2, [pc, #680]	; (800fbfc <HAL_DMA_IRQHandler+0x5ec>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d100      	bne.n	800f958 <HAL_DMA_IRQHandler+0x348>
 800f956:	e256      	b.n	800fe06 <HAL_DMA_IRQHandler+0x7f6>
 800f958:	4aa9      	ldr	r2, [pc, #676]	; (800fc00 <HAL_DMA_IRQHandler+0x5f0>)
 800f95a:	4694      	mov	ip, r2
 800f95c:	4463      	add	r3, ip
 800f95e:	1e5a      	subs	r2, r3, #1
 800f960:	4193      	sbcs	r3, r2
 800f962:	22f0      	movs	r2, #240	; 0xf0
 800f964:	425b      	negs	r3, r3
 800f966:	0252      	lsls	r2, r2, #9
 800f968:	4013      	ands	r3, r2
 800f96a:	2280      	movs	r2, #128	; 0x80
 800f96c:	0192      	lsls	r2, r2, #6
 800f96e:	4694      	mov	ip, r2
 800f970:	4463      	add	r3, ip
 800f972:	4aa4      	ldr	r2, [pc, #656]	; (800fc04 <HAL_DMA_IRQHandler+0x5f4>)
 800f974:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f976:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f978:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f97a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f97c:	2321      	movs	r3, #33	; 0x21
 800f97e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f980:	2200      	movs	r2, #0
 800f982:	3b01      	subs	r3, #1
 800f984:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 800f98c:	0020      	movs	r0, r4
 800f98e:	4798      	blx	r3
}  
 800f990:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f992:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f994:	489c      	ldr	r0, [pc, #624]	; (800fc08 <HAL_DMA_IRQHandler+0x5f8>)
 800f996:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f998:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f99a:	432a      	orrs	r2, r5
 800f99c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f99e:	2221      	movs	r2, #33	; 0x21
 800f9a0:	3503      	adds	r5, #3
 800f9a2:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800f9a4:	2500      	movs	r5, #0
 800f9a6:	3a01      	subs	r2, #1
 800f9a8:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f9aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	d000      	beq.n	800f9b2 <HAL_DMA_IRQHandler+0x3a2>
 800f9b0:	e09b      	b.n	800faea <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f9b2:	6800      	ldr	r0, [r0, #0]
 800f9b4:	2204      	movs	r2, #4
 800f9b6:	4210      	tst	r0, r2
 800f9b8:	d050      	beq.n	800fa5c <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f9ba:	2204      	movs	r2, #4
 800f9bc:	6818      	ldr	r0, [r3, #0]
 800f9be:	4202      	tst	r2, r0
 800f9c0:	d048      	beq.n	800fa54 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f9c2:	6818      	ldr	r0, [r3, #0]
 800f9c4:	0680      	lsls	r0, r0, #26
 800f9c6:	d402      	bmi.n	800f9ce <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f9c8:	6818      	ldr	r0, [r3, #0]
 800f9ca:	4390      	bics	r0, r2
 800f9cc:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f9ce:	4a82      	ldr	r2, [pc, #520]	; (800fbd8 <HAL_DMA_IRQHandler+0x5c8>)
 800f9d0:	4291      	cmp	r1, r2
 800f9d2:	d800      	bhi.n	800f9d6 <HAL_DMA_IRQHandler+0x3c6>
 800f9d4:	e11e      	b.n	800fc14 <HAL_DMA_IRQHandler+0x604>
 800f9d6:	4981      	ldr	r1, [pc, #516]	; (800fbdc <HAL_DMA_IRQHandler+0x5cc>)
 800f9d8:	428b      	cmp	r3, r1
 800f9da:	d100      	bne.n	800f9de <HAL_DMA_IRQHandler+0x3ce>
 800f9dc:	e1ac      	b.n	800fd38 <HAL_DMA_IRQHandler+0x728>
 800f9de:	4980      	ldr	r1, [pc, #512]	; (800fbe0 <HAL_DMA_IRQHandler+0x5d0>)
 800f9e0:	428b      	cmp	r3, r1
 800f9e2:	d100      	bne.n	800f9e6 <HAL_DMA_IRQHandler+0x3d6>
 800f9e4:	e1d5      	b.n	800fd92 <HAL_DMA_IRQHandler+0x782>
 800f9e6:	497f      	ldr	r1, [pc, #508]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d4>)
 800f9e8:	428b      	cmp	r3, r1
 800f9ea:	d100      	bne.n	800f9ee <HAL_DMA_IRQHandler+0x3de>
 800f9ec:	e188      	b.n	800fd00 <HAL_DMA_IRQHandler+0x6f0>
 800f9ee:	497e      	ldr	r1, [pc, #504]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d8>)
 800f9f0:	428b      	cmp	r3, r1
 800f9f2:	d100      	bne.n	800f9f6 <HAL_DMA_IRQHandler+0x3e6>
 800f9f4:	e20a      	b.n	800fe0c <HAL_DMA_IRQHandler+0x7fc>
 800f9f6:	497d      	ldr	r1, [pc, #500]	; (800fbec <HAL_DMA_IRQHandler+0x5dc>)
 800f9f8:	428b      	cmp	r3, r1
 800f9fa:	d100      	bne.n	800f9fe <HAL_DMA_IRQHandler+0x3ee>
 800f9fc:	e22d      	b.n	800fe5a <HAL_DMA_IRQHandler+0x84a>
 800f9fe:	497c      	ldr	r1, [pc, #496]	; (800fbf0 <HAL_DMA_IRQHandler+0x5e0>)
 800fa00:	428b      	cmp	r3, r1
 800fa02:	d100      	bne.n	800fa06 <HAL_DMA_IRQHandler+0x3f6>
 800fa04:	e247      	b.n	800fe96 <HAL_DMA_IRQHandler+0x886>
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d100      	bne.n	800fa0c <HAL_DMA_IRQHandler+0x3fc>
 800fa0a:	e264      	b.n	800fed6 <HAL_DMA_IRQHandler+0x8c6>
 800fa0c:	4a79      	ldr	r2, [pc, #484]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e4>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d100      	bne.n	800fa14 <HAL_DMA_IRQHandler+0x404>
 800fa12:	e191      	b.n	800fd38 <HAL_DMA_IRQHandler+0x728>
 800fa14:	4a78      	ldr	r2, [pc, #480]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e8>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d100      	bne.n	800fa1c <HAL_DMA_IRQHandler+0x40c>
 800fa1a:	e1ba      	b.n	800fd92 <HAL_DMA_IRQHandler+0x782>
 800fa1c:	4a77      	ldr	r2, [pc, #476]	; (800fbfc <HAL_DMA_IRQHandler+0x5ec>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d100      	bne.n	800fa24 <HAL_DMA_IRQHandler+0x414>
 800fa22:	e16d      	b.n	800fd00 <HAL_DMA_IRQHandler+0x6f0>
 800fa24:	4a76      	ldr	r2, [pc, #472]	; (800fc00 <HAL_DMA_IRQHandler+0x5f0>)
 800fa26:	189a      	adds	r2, r3, r2
 800fa28:	1e51      	subs	r1, r2, #1
 800fa2a:	418a      	sbcs	r2, r1
 800fa2c:	21f0      	movs	r1, #240	; 0xf0
 800fa2e:	4252      	negs	r2, r2
 800fa30:	0289      	lsls	r1, r1, #10
 800fa32:	400a      	ands	r2, r1
 800fa34:	2180      	movs	r1, #128	; 0x80
 800fa36:	01c9      	lsls	r1, r1, #7
 800fa38:	468c      	mov	ip, r1
 800fa3a:	4462      	add	r2, ip
 800fa3c:	4971      	ldr	r1, [pc, #452]	; (800fc04 <HAL_DMA_IRQHandler+0x5f4>)
 800fa3e:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fa40:	2221      	movs	r2, #33	; 0x21
 800fa42:	2111      	movs	r1, #17
 800fa44:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fa46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fa48:	2a00      	cmp	r2, #0
 800fa4a:	d100      	bne.n	800fa4e <HAL_DMA_IRQHandler+0x43e>
 800fa4c:	e6e3      	b.n	800f816 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 800fa4e:	0020      	movs	r0, r4
 800fa50:	4790      	blx	r2
 800fa52:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fa54:	4a60      	ldr	r2, [pc, #384]	; (800fbd8 <HAL_DMA_IRQHandler+0x5c8>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d900      	bls.n	800fa5c <HAL_DMA_IRQHandler+0x44c>
 800fa5a:	e6dc      	b.n	800f816 <HAL_DMA_IRQHandler+0x206>
 800fa5c:	4a6a      	ldr	r2, [pc, #424]	; (800fc08 <HAL_DMA_IRQHandler+0x5f8>)
 800fa5e:	6810      	ldr	r0, [r2, #0]
 800fa60:	4a5e      	ldr	r2, [pc, #376]	; (800fbdc <HAL_DMA_IRQHandler+0x5cc>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d000      	beq.n	800fa68 <HAL_DMA_IRQHandler+0x458>
 800fa66:	e6dc      	b.n	800f822 <HAL_DMA_IRQHandler+0x212>
 800fa68:	2202      	movs	r2, #2
 800fa6a:	e73a      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fa6c:	42ab      	cmp	r3, r5
 800fa6e:	d090      	beq.n	800f992 <HAL_DMA_IRQHandler+0x382>
 800fa70:	4a5b      	ldr	r2, [pc, #364]	; (800fbe0 <HAL_DMA_IRQHandler+0x5d0>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d100      	bne.n	800fa78 <HAL_DMA_IRQHandler+0x468>
 800fa76:	e1a1      	b.n	800fdbc <HAL_DMA_IRQHandler+0x7ac>
 800fa78:	4a5a      	ldr	r2, [pc, #360]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d4>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d100      	bne.n	800fa80 <HAL_DMA_IRQHandler+0x470>
 800fa7e:	e13c      	b.n	800fcfa <HAL_DMA_IRQHandler+0x6ea>
 800fa80:	4a59      	ldr	r2, [pc, #356]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d8>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d100      	bne.n	800fa88 <HAL_DMA_IRQHandler+0x478>
 800fa86:	e1ca      	b.n	800fe1e <HAL_DMA_IRQHandler+0x80e>
 800fa88:	4a58      	ldr	r2, [pc, #352]	; (800fbec <HAL_DMA_IRQHandler+0x5dc>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d100      	bne.n	800fa90 <HAL_DMA_IRQHandler+0x480>
 800fa8e:	e1de      	b.n	800fe4e <HAL_DMA_IRQHandler+0x83e>
 800fa90:	4a57      	ldr	r2, [pc, #348]	; (800fbf0 <HAL_DMA_IRQHandler+0x5e0>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d100      	bne.n	800fa98 <HAL_DMA_IRQHandler+0x488>
 800fa96:	e201      	b.n	800fe9c <HAL_DMA_IRQHandler+0x88c>
 800fa98:	4283      	cmp	r3, r0
 800fa9a:	d100      	bne.n	800fa9e <HAL_DMA_IRQHandler+0x48e>
 800fa9c:	e21e      	b.n	800fedc <HAL_DMA_IRQHandler+0x8cc>
 800fa9e:	4a55      	ldr	r2, [pc, #340]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e4>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d100      	bne.n	800faa6 <HAL_DMA_IRQHandler+0x496>
 800faa4:	e22d      	b.n	800ff02 <HAL_DMA_IRQHandler+0x8f2>
 800faa6:	4a54      	ldr	r2, [pc, #336]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e8>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d100      	bne.n	800faae <HAL_DMA_IRQHandler+0x49e>
 800faac:	e22d      	b.n	800ff0a <HAL_DMA_IRQHandler+0x8fa>
 800faae:	4a53      	ldr	r2, [pc, #332]	; (800fbfc <HAL_DMA_IRQHandler+0x5ec>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d100      	bne.n	800fab6 <HAL_DMA_IRQHandler+0x4a6>
 800fab4:	e121      	b.n	800fcfa <HAL_DMA_IRQHandler+0x6ea>
 800fab6:	4a52      	ldr	r2, [pc, #328]	; (800fc00 <HAL_DMA_IRQHandler+0x5f0>)
 800fab8:	189a      	adds	r2, r3, r2
 800faba:	4250      	negs	r0, r2
 800fabc:	4142      	adcs	r2, r0
 800fabe:	4853      	ldr	r0, [pc, #332]	; (800fc0c <HAL_DMA_IRQHandler+0x5fc>)
 800fac0:	4252      	negs	r2, r2
 800fac2:	4002      	ands	r2, r0
 800fac4:	2080      	movs	r0, #128	; 0x80
 800fac6:	0300      	lsls	r0, r0, #12
 800fac8:	4684      	mov	ip, r0
 800faca:	4462      	add	r2, ip
 800facc:	484e      	ldr	r0, [pc, #312]	; (800fc08 <HAL_DMA_IRQHandler+0x5f8>)
 800face:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fad0:	2001      	movs	r0, #1
 800fad2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fad4:	4302      	orrs	r2, r0
 800fad6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fad8:	2221      	movs	r2, #33	; 0x21
 800fada:	3003      	adds	r0, #3
 800fadc:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fade:	2000      	movs	r0, #0
 800fae0:	3a01      	subs	r2, #1
 800fae2:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fae4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fae6:	2a00      	cmp	r2, #0
 800fae8:	d007      	beq.n	800fafa <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 800faea:	0020      	movs	r0, r4
 800faec:	4790      	blx	r2
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800faf2:	4a39      	ldr	r2, [pc, #228]	; (800fbd8 <HAL_DMA_IRQHandler+0x5c8>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d900      	bls.n	800fafa <HAL_DMA_IRQHandler+0x4ea>
 800faf8:	e64f      	b.n	800f79a <HAL_DMA_IRQHandler+0x18a>
 800fafa:	4a43      	ldr	r2, [pc, #268]	; (800fc08 <HAL_DMA_IRQHandler+0x5f8>)
 800fafc:	6810      	ldr	r0, [r2, #0]
 800fafe:	4a37      	ldr	r2, [pc, #220]	; (800fbdc <HAL_DMA_IRQHandler+0x5cc>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d100      	bne.n	800fb06 <HAL_DMA_IRQHandler+0x4f6>
 800fb04:	e756      	b.n	800f9b4 <HAL_DMA_IRQHandler+0x3a4>
 800fb06:	4a36      	ldr	r2, [pc, #216]	; (800fbe0 <HAL_DMA_IRQHandler+0x5d0>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d100      	bne.n	800fb0e <HAL_DMA_IRQHandler+0x4fe>
 800fb0c:	e0c4      	b.n	800fc98 <HAL_DMA_IRQHandler+0x688>
 800fb0e:	4a35      	ldr	r2, [pc, #212]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d4>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d100      	bne.n	800fb16 <HAL_DMA_IRQHandler+0x506>
 800fb14:	e0cb      	b.n	800fcae <HAL_DMA_IRQHandler+0x69e>
 800fb16:	4a34      	ldr	r2, [pc, #208]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d8>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d100      	bne.n	800fb1e <HAL_DMA_IRQHandler+0x50e>
 800fb1c:	e0d2      	b.n	800fcc4 <HAL_DMA_IRQHandler+0x6b4>
 800fb1e:	4a33      	ldr	r2, [pc, #204]	; (800fbec <HAL_DMA_IRQHandler+0x5dc>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d100      	bne.n	800fb26 <HAL_DMA_IRQHandler+0x516>
 800fb24:	e5e4      	b.n	800f6f0 <HAL_DMA_IRQHandler+0xe0>
 800fb26:	4a32      	ldr	r2, [pc, #200]	; (800fbf0 <HAL_DMA_IRQHandler+0x5e0>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d100      	bne.n	800fb2e <HAL_DMA_IRQHandler+0x51e>
 800fb2c:	e15e      	b.n	800fdec <HAL_DMA_IRQHandler+0x7dc>
 800fb2e:	4a2a      	ldr	r2, [pc, #168]	; (800fbd8 <HAL_DMA_IRQHandler+0x5c8>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d100      	bne.n	800fb36 <HAL_DMA_IRQHandler+0x526>
 800fb34:	e0ec      	b.n	800fd10 <HAL_DMA_IRQHandler+0x700>
 800fb36:	4a2f      	ldr	r2, [pc, #188]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e4>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d100      	bne.n	800fb3e <HAL_DMA_IRQHandler+0x52e>
 800fb3c:	e73a      	b.n	800f9b4 <HAL_DMA_IRQHandler+0x3a4>
 800fb3e:	4a2e      	ldr	r2, [pc, #184]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e8>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d100      	bne.n	800fb46 <HAL_DMA_IRQHandler+0x536>
 800fb44:	e0a8      	b.n	800fc98 <HAL_DMA_IRQHandler+0x688>
 800fb46:	4a2d      	ldr	r2, [pc, #180]	; (800fbfc <HAL_DMA_IRQHandler+0x5ec>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d100      	bne.n	800fb4e <HAL_DMA_IRQHandler+0x53e>
 800fb4c:	e0af      	b.n	800fcae <HAL_DMA_IRQHandler+0x69e>
 800fb4e:	4a2c      	ldr	r2, [pc, #176]	; (800fc00 <HAL_DMA_IRQHandler+0x5f0>)
 800fb50:	189a      	adds	r2, r3, r2
 800fb52:	4255      	negs	r5, r2
 800fb54:	416a      	adcs	r2, r5
 800fb56:	4d2e      	ldr	r5, [pc, #184]	; (800fc10 <HAL_DMA_IRQHandler+0x600>)
 800fb58:	4252      	negs	r2, r2
 800fb5a:	402a      	ands	r2, r5
 800fb5c:	2580      	movs	r5, #128	; 0x80
 800fb5e:	02ed      	lsls	r5, r5, #11
 800fb60:	46ac      	mov	ip, r5
 800fb62:	4462      	add	r2, ip
 800fb64:	e727      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fb66:	2280      	movs	r2, #128	; 0x80
 800fb68:	0092      	lsls	r2, r2, #2
 800fb6a:	e6ba      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fb6c:	428b      	cmp	r3, r1
 800fb6e:	d100      	bne.n	800fb72 <HAL_DMA_IRQHandler+0x562>
 800fb70:	e0e0      	b.n	800fd34 <HAL_DMA_IRQHandler+0x724>
 800fb72:	491b      	ldr	r1, [pc, #108]	; (800fbe0 <HAL_DMA_IRQHandler+0x5d0>)
 800fb74:	428b      	cmp	r3, r1
 800fb76:	d100      	bne.n	800fb7a <HAL_DMA_IRQHandler+0x56a>
 800fb78:	e105      	b.n	800fd86 <HAL_DMA_IRQHandler+0x776>
 800fb7a:	491a      	ldr	r1, [pc, #104]	; (800fbe4 <HAL_DMA_IRQHandler+0x5d4>)
 800fb7c:	428b      	cmp	r3, r1
 800fb7e:	d100      	bne.n	800fb82 <HAL_DMA_IRQHandler+0x572>
 800fb80:	e13e      	b.n	800fe00 <HAL_DMA_IRQHandler+0x7f0>
 800fb82:	4919      	ldr	r1, [pc, #100]	; (800fbe8 <HAL_DMA_IRQHandler+0x5d8>)
 800fb84:	428b      	cmp	r3, r1
 800fb86:	d100      	bne.n	800fb8a <HAL_DMA_IRQHandler+0x57a>
 800fb88:	e0cf      	b.n	800fd2a <HAL_DMA_IRQHandler+0x71a>
 800fb8a:	4918      	ldr	r1, [pc, #96]	; (800fbec <HAL_DMA_IRQHandler+0x5dc>)
 800fb8c:	428b      	cmp	r3, r1
 800fb8e:	d100      	bne.n	800fb92 <HAL_DMA_IRQHandler+0x582>
 800fb90:	e157      	b.n	800fe42 <HAL_DMA_IRQHandler+0x832>
 800fb92:	4917      	ldr	r1, [pc, #92]	; (800fbf0 <HAL_DMA_IRQHandler+0x5e0>)
 800fb94:	428b      	cmp	r3, r1
 800fb96:	d100      	bne.n	800fb9a <HAL_DMA_IRQHandler+0x58a>
 800fb98:	e174      	b.n	800fe84 <HAL_DMA_IRQHandler+0x874>
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d100      	bne.n	800fba0 <HAL_DMA_IRQHandler+0x590>
 800fb9e:	e197      	b.n	800fed0 <HAL_DMA_IRQHandler+0x8c0>
 800fba0:	4a14      	ldr	r2, [pc, #80]	; (800fbf4 <HAL_DMA_IRQHandler+0x5e4>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d100      	bne.n	800fba8 <HAL_DMA_IRQHandler+0x598>
 800fba6:	e0c5      	b.n	800fd34 <HAL_DMA_IRQHandler+0x724>
 800fba8:	4a13      	ldr	r2, [pc, #76]	; (800fbf8 <HAL_DMA_IRQHandler+0x5e8>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d100      	bne.n	800fbb0 <HAL_DMA_IRQHandler+0x5a0>
 800fbae:	e0ea      	b.n	800fd86 <HAL_DMA_IRQHandler+0x776>
 800fbb0:	4a12      	ldr	r2, [pc, #72]	; (800fbfc <HAL_DMA_IRQHandler+0x5ec>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d100      	bne.n	800fbb8 <HAL_DMA_IRQHandler+0x5a8>
 800fbb6:	e123      	b.n	800fe00 <HAL_DMA_IRQHandler+0x7f0>
 800fbb8:	4a11      	ldr	r2, [pc, #68]	; (800fc00 <HAL_DMA_IRQHandler+0x5f0>)
 800fbba:	4694      	mov	ip, r2
 800fbbc:	4463      	add	r3, ip
 800fbbe:	1e5a      	subs	r2, r3, #1
 800fbc0:	4193      	sbcs	r3, r2
 800fbc2:	22f0      	movs	r2, #240	; 0xf0
 800fbc4:	425b      	negs	r3, r3
 800fbc6:	0252      	lsls	r2, r2, #9
 800fbc8:	4013      	ands	r3, r2
 800fbca:	2280      	movs	r2, #128	; 0x80
 800fbcc:	0192      	lsls	r2, r2, #6
 800fbce:	4694      	mov	ip, r2
 800fbd0:	4463      	add	r3, ip
 800fbd2:	4a0d      	ldr	r2, [pc, #52]	; (800fc08 <HAL_DMA_IRQHandler+0x5f8>)
 800fbd4:	6053      	str	r3, [r2, #4]
 800fbd6:	e6ce      	b.n	800f976 <HAL_DMA_IRQHandler+0x366>
 800fbd8:	40020080 	.word	0x40020080
 800fbdc:	40020008 	.word	0x40020008
 800fbe0:	4002001c 	.word	0x4002001c
 800fbe4:	40020030 	.word	0x40020030
 800fbe8:	40020044 	.word	0x40020044
 800fbec:	40020058 	.word	0x40020058
 800fbf0:	4002006c 	.word	0x4002006c
 800fbf4:	40020408 	.word	0x40020408
 800fbf8:	4002041c 	.word	0x4002041c
 800fbfc:	40020430 	.word	0x40020430
 800fc00:	bffdfbbc 	.word	0xbffdfbbc
 800fc04:	40020400 	.word	0x40020400
 800fc08:	40020000 	.word	0x40020000
 800fc0c:	fff88000 	.word	0xfff88000
 800fc10:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fc14:	49c2      	ldr	r1, [pc, #776]	; (800ff20 <HAL_DMA_IRQHandler+0x910>)
 800fc16:	428b      	cmp	r3, r1
 800fc18:	d100      	bne.n	800fc1c <HAL_DMA_IRQHandler+0x60c>
 800fc1a:	e08f      	b.n	800fd3c <HAL_DMA_IRQHandler+0x72c>
 800fc1c:	49c1      	ldr	r1, [pc, #772]	; (800ff24 <HAL_DMA_IRQHandler+0x914>)
 800fc1e:	428b      	cmp	r3, r1
 800fc20:	d100      	bne.n	800fc24 <HAL_DMA_IRQHandler+0x614>
 800fc22:	e0b4      	b.n	800fd8e <HAL_DMA_IRQHandler+0x77e>
 800fc24:	49c0      	ldr	r1, [pc, #768]	; (800ff28 <HAL_DMA_IRQHandler+0x918>)
 800fc26:	428b      	cmp	r3, r1
 800fc28:	d064      	beq.n	800fcf4 <HAL_DMA_IRQHandler+0x6e4>
 800fc2a:	49c0      	ldr	r1, [pc, #768]	; (800ff2c <HAL_DMA_IRQHandler+0x91c>)
 800fc2c:	428b      	cmp	r3, r1
 800fc2e:	d100      	bne.n	800fc32 <HAL_DMA_IRQHandler+0x622>
 800fc30:	e0ef      	b.n	800fe12 <HAL_DMA_IRQHandler+0x802>
 800fc32:	49bf      	ldr	r1, [pc, #764]	; (800ff30 <HAL_DMA_IRQHandler+0x920>)
 800fc34:	428b      	cmp	r3, r1
 800fc36:	d100      	bne.n	800fc3a <HAL_DMA_IRQHandler+0x62a>
 800fc38:	e112      	b.n	800fe60 <HAL_DMA_IRQHandler+0x850>
 800fc3a:	49be      	ldr	r1, [pc, #760]	; (800ff34 <HAL_DMA_IRQHandler+0x924>)
 800fc3c:	428b      	cmp	r3, r1
 800fc3e:	d100      	bne.n	800fc42 <HAL_DMA_IRQHandler+0x632>
 800fc40:	e12f      	b.n	800fea2 <HAL_DMA_IRQHandler+0x892>
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d100      	bne.n	800fc48 <HAL_DMA_IRQHandler+0x638>
 800fc46:	e14c      	b.n	800fee2 <HAL_DMA_IRQHandler+0x8d2>
 800fc48:	4abb      	ldr	r2, [pc, #748]	; (800ff38 <HAL_DMA_IRQHandler+0x928>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d076      	beq.n	800fd3c <HAL_DMA_IRQHandler+0x72c>
 800fc4e:	4abb      	ldr	r2, [pc, #748]	; (800ff3c <HAL_DMA_IRQHandler+0x92c>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d100      	bne.n	800fc56 <HAL_DMA_IRQHandler+0x646>
 800fc54:	e09b      	b.n	800fd8e <HAL_DMA_IRQHandler+0x77e>
 800fc56:	4aba      	ldr	r2, [pc, #744]	; (800ff40 <HAL_DMA_IRQHandler+0x930>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d04b      	beq.n	800fcf4 <HAL_DMA_IRQHandler+0x6e4>
 800fc5c:	4ab9      	ldr	r2, [pc, #740]	; (800ff44 <HAL_DMA_IRQHandler+0x934>)
 800fc5e:	189a      	adds	r2, r3, r2
 800fc60:	1e51      	subs	r1, r2, #1
 800fc62:	418a      	sbcs	r2, r1
 800fc64:	21f0      	movs	r1, #240	; 0xf0
 800fc66:	4252      	negs	r2, r2
 800fc68:	0289      	lsls	r1, r1, #10
 800fc6a:	400a      	ands	r2, r1
 800fc6c:	2180      	movs	r1, #128	; 0x80
 800fc6e:	01c9      	lsls	r1, r1, #7
 800fc70:	468c      	mov	ip, r1
 800fc72:	4462      	add	r2, ip
 800fc74:	49b4      	ldr	r1, [pc, #720]	; (800ff48 <HAL_DMA_IRQHandler+0x938>)
 800fc76:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800fc78:	2221      	movs	r2, #33	; 0x21
 800fc7a:	2111      	movs	r1, #17
 800fc7c:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fc7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc80:	2a00      	cmp	r2, #0
 800fc82:	d100      	bne.n	800fc86 <HAL_DMA_IRQHandler+0x676>
 800fc84:	e6ea      	b.n	800fa5c <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 800fc86:	0020      	movs	r0, r4
 800fc88:	4790      	blx	r2
 800fc8a:	6823      	ldr	r3, [r4, #0]
 800fc8c:	e6e2      	b.n	800fa54 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fc8e:	0632      	lsls	r2, r6, #24
 800fc90:	d500      	bpl.n	800fc94 <HAL_DMA_IRQHandler+0x684>
 800fc92:	e534      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fc94:	0019      	movs	r1, r3
 800fc96:	6800      	ldr	r0, [r0, #0]
 800fc98:	2240      	movs	r2, #64	; 0x40
 800fc9a:	e68c      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fc9c:	0632      	lsls	r2, r6, #24
 800fc9e:	d500      	bpl.n	800fca2 <HAL_DMA_IRQHandler+0x692>
 800fca0:	e52d      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fca2:	6800      	ldr	r0, [r0, #0]
 800fca4:	2240      	movs	r2, #64	; 0x40
 800fca6:	e5b3      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fca8:	2280      	movs	r2, #128	; 0x80
 800fcaa:	0192      	lsls	r2, r2, #6
 800fcac:	e619      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fcae:	2280      	movs	r2, #128	; 0x80
 800fcb0:	00d2      	lsls	r2, r2, #3
 800fcb2:	e680      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fcb4:	2280      	movs	r2, #128	; 0x80
 800fcb6:	0292      	lsls	r2, r2, #10
 800fcb8:	e613      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fcba:	0432      	lsls	r2, r6, #16
 800fcbc:	d500      	bpl.n	800fcc0 <HAL_DMA_IRQHandler+0x6b0>
 800fcbe:	e51e      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fcc0:	4aa1      	ldr	r2, [pc, #644]	; (800ff48 <HAL_DMA_IRQHandler+0x938>)
 800fcc2:	6810      	ldr	r0, [r2, #0]
 800fcc4:	2280      	movs	r2, #128	; 0x80
 800fcc6:	01d2      	lsls	r2, r2, #7
 800fcc8:	e675      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fcca:	0432      	lsls	r2, r6, #16
 800fccc:	d500      	bpl.n	800fcd0 <HAL_DMA_IRQHandler+0x6c0>
 800fcce:	e516      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fcd0:	2280      	movs	r2, #128	; 0x80
 800fcd2:	6800      	ldr	r0, [r0, #0]
 800fcd4:	0019      	movs	r1, r3
 800fcd6:	01d2      	lsls	r2, r2, #7
 800fcd8:	e66d      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fcda:	0432      	lsls	r2, r6, #16
 800fcdc:	d500      	bpl.n	800fce0 <HAL_DMA_IRQHandler+0x6d0>
 800fcde:	e50e      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fce0:	2280      	movs	r2, #128	; 0x80
 800fce2:	6800      	ldr	r0, [r0, #0]
 800fce4:	01d2      	lsls	r2, r2, #7
 800fce6:	e593      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fce8:	2280      	movs	r2, #128	; 0x80
 800fcea:	0392      	lsls	r2, r2, #14
 800fcec:	e5f9      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fcee:	2280      	movs	r2, #128	; 0x80
 800fcf0:	0112      	lsls	r2, r2, #4
 800fcf2:	e542      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fcf4:	2280      	movs	r2, #128	; 0x80
 800fcf6:	00d2      	lsls	r2, r2, #3
 800fcf8:	e7bc      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fcfa:	2280      	movs	r2, #128	; 0x80
 800fcfc:	0112      	lsls	r2, r2, #4
 800fcfe:	e6e5      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd00:	2280      	movs	r2, #128	; 0x80
 800fd02:	00d2      	lsls	r2, r2, #3
 800fd04:	e69a      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd06:	0132      	lsls	r2, r6, #4
 800fd08:	d500      	bpl.n	800fd0c <HAL_DMA_IRQHandler+0x6fc>
 800fd0a:	e4f8      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd0c:	0019      	movs	r1, r3
 800fd0e:	6800      	ldr	r0, [r0, #0]
 800fd10:	2280      	movs	r2, #128	; 0x80
 800fd12:	04d2      	lsls	r2, r2, #19
 800fd14:	e64f      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd16:	0132      	lsls	r2, r6, #4
 800fd18:	d500      	bpl.n	800fd1c <HAL_DMA_IRQHandler+0x70c>
 800fd1a:	e4f0      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd1c:	6800      	ldr	r0, [r0, #0]
 800fd1e:	2280      	movs	r2, #128	; 0x80
 800fd20:	04d2      	lsls	r2, r2, #19
 800fd22:	e575      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fd24:	2380      	movs	r3, #128	; 0x80
 800fd26:	019b      	lsls	r3, r3, #6
 800fd28:	e623      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
 800fd2a:	2380      	movs	r3, #128	; 0x80
 800fd2c:	019b      	lsls	r3, r3, #6
 800fd2e:	e750      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
 800fd30:	2302      	movs	r3, #2
 800fd32:	e61e      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
 800fd34:	2302      	movs	r3, #2
 800fd36:	e74c      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd38:	2204      	movs	r2, #4
 800fd3a:	e67f      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
 800fd3c:	2204      	movs	r2, #4
 800fd3e:	e799      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd40:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd42:	4882      	ldr	r0, [pc, #520]	; (800ff4c <HAL_DMA_IRQHandler+0x93c>)
 800fd44:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fd48:	432a      	orrs	r2, r5
 800fd4a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fd4c:	2221      	movs	r2, #33	; 0x21
 800fd4e:	3503      	adds	r5, #3
 800fd50:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fd52:	2500      	movs	r5, #0
 800fd54:	3a01      	subs	r2, #1
 800fd56:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fd58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fd5a:	2a00      	cmp	r2, #0
 800fd5c:	d000      	beq.n	800fd60 <HAL_DMA_IRQHandler+0x750>
 800fd5e:	e6c4      	b.n	800faea <HAL_DMA_IRQHandler+0x4da>
 800fd60:	e554      	b.n	800f80c <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd62:	0332      	lsls	r2, r6, #12
 800fd64:	d500      	bpl.n	800fd68 <HAL_DMA_IRQHandler+0x758>
 800fd66:	e4ca      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd68:	2280      	movs	r2, #128	; 0x80
 800fd6a:	6800      	ldr	r0, [r0, #0]
 800fd6c:	02d2      	lsls	r2, r2, #11
 800fd6e:	e54f      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fd70:	0332      	lsls	r2, r6, #12
 800fd72:	d500      	bpl.n	800fd76 <HAL_DMA_IRQHandler+0x766>
 800fd74:	e4c3      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fd76:	2280      	movs	r2, #128	; 0x80
 800fd78:	6800      	ldr	r0, [r0, #0]
 800fd7a:	0019      	movs	r1, r3
 800fd7c:	02d2      	lsls	r2, r2, #11
 800fd7e:	e61a      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800fd80:	2280      	movs	r2, #128	; 0x80
 800fd82:	0492      	lsls	r2, r2, #18
 800fd84:	e5ad      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fd86:	2320      	movs	r3, #32
 800fd88:	e723      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
 800fd8a:	2320      	movs	r3, #32
 800fd8c:	e5f1      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fd8e:	2240      	movs	r2, #64	; 0x40
 800fd90:	e770      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
 800fd92:	2240      	movs	r2, #64	; 0x40
 800fd94:	e652      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd96:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd98:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fd9a:	486c      	ldr	r0, [pc, #432]	; (800ff4c <HAL_DMA_IRQHandler+0x93c>)
 800fd9c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fd9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fda0:	432a      	orrs	r2, r5
 800fda2:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fda4:	2221      	movs	r2, #33	; 0x21
 800fda6:	3503      	adds	r5, #3
 800fda8:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fdaa:	2500      	movs	r5, #0
 800fdac:	3a01      	subs	r2, #1
 800fdae:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fdb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fdb2:	2a00      	cmp	r2, #0
 800fdb4:	d000      	beq.n	800fdb8 <HAL_DMA_IRQHandler+0x7a8>
 800fdb6:	e698      	b.n	800faea <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdb8:	6800      	ldr	r0, [r0, #0]
 800fdba:	e4f4      	b.n	800f7a6 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fdbc:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fdbe:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fdc0:	4861      	ldr	r0, [pc, #388]	; (800ff48 <HAL_DMA_IRQHandler+0x938>)
 800fdc2:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800fdc4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fdc6:	432a      	orrs	r2, r5
 800fdc8:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800fdca:	2221      	movs	r2, #33	; 0x21
 800fdcc:	3503      	adds	r5, #3
 800fdce:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 800fdd0:	2500      	movs	r5, #0
 800fdd2:	3a01      	subs	r2, #1
 800fdd4:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800fdd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fdd8:	2a00      	cmp	r2, #0
 800fdda:	d000      	beq.n	800fdde <HAL_DMA_IRQHandler+0x7ce>
 800fddc:	e685      	b.n	800faea <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdde:	6800      	ldr	r0, [r0, #0]
 800fde0:	e691      	b.n	800fb06 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fde2:	0232      	lsls	r2, r6, #8
 800fde4:	d500      	bpl.n	800fde8 <HAL_DMA_IRQHandler+0x7d8>
 800fde6:	e48a      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fde8:	0019      	movs	r1, r3
 800fdea:	6800      	ldr	r0, [r0, #0]
 800fdec:	2280      	movs	r2, #128	; 0x80
 800fdee:	03d2      	lsls	r2, r2, #15
 800fdf0:	e5e1      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fdf2:	0232      	lsls	r2, r6, #8
 800fdf4:	d500      	bpl.n	800fdf8 <HAL_DMA_IRQHandler+0x7e8>
 800fdf6:	e482      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fdf8:	6800      	ldr	r0, [r0, #0]
 800fdfa:	2280      	movs	r2, #128	; 0x80
 800fdfc:	03d2      	lsls	r2, r2, #15
 800fdfe:	e507      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe00:	2380      	movs	r3, #128	; 0x80
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	e6e5      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
 800fe06:	2380      	movs	r3, #128	; 0x80
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	e5b2      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe0c:	2280      	movs	r2, #128	; 0x80
 800fe0e:	01d2      	lsls	r2, r2, #7
 800fe10:	e614      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
 800fe12:	2280      	movs	r2, #128	; 0x80
 800fe14:	01d2      	lsls	r2, r2, #7
 800fe16:	e72d      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe18:	2280      	movs	r2, #128	; 0x80
 800fe1a:	0212      	lsls	r2, r2, #8
 800fe1c:	e4ad      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
 800fe1e:	2280      	movs	r2, #128	; 0x80
 800fe20:	0212      	lsls	r2, r2, #8
 800fe22:	e653      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe24:	0732      	lsls	r2, r6, #28
 800fe26:	d500      	bpl.n	800fe2a <HAL_DMA_IRQHandler+0x81a>
 800fe28:	e469      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe2a:	4a47      	ldr	r2, [pc, #284]	; (800ff48 <HAL_DMA_IRQHandler+0x938>)
 800fe2c:	6810      	ldr	r0, [r2, #0]
 800fe2e:	2204      	movs	r2, #4
 800fe30:	e5c1      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe32:	0732      	lsls	r2, r6, #28
 800fe34:	d500      	bpl.n	800fe38 <HAL_DMA_IRQHandler+0x828>
 800fe36:	e462      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe38:	4a44      	ldr	r2, [pc, #272]	; (800ff4c <HAL_DMA_IRQHandler+0x93c>)
 800fe3a:	493f      	ldr	r1, [pc, #252]	; (800ff38 <HAL_DMA_IRQHandler+0x928>)
 800fe3c:	6810      	ldr	r0, [r2, #0]
 800fe3e:	2204      	movs	r2, #4
 800fe40:	e4e6      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe42:	2380      	movs	r3, #128	; 0x80
 800fe44:	029b      	lsls	r3, r3, #10
 800fe46:	e6c4      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
 800fe48:	2380      	movs	r3, #128	; 0x80
 800fe4a:	029b      	lsls	r3, r3, #10
 800fe4c:	e591      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe4e:	2280      	movs	r2, #128	; 0x80
 800fe50:	0312      	lsls	r2, r2, #12
 800fe52:	e63b      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
 800fe54:	2280      	movs	r2, #128	; 0x80
 800fe56:	0312      	lsls	r2, r2, #12
 800fe58:	e48f      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe5a:	2280      	movs	r2, #128	; 0x80
 800fe5c:	02d2      	lsls	r2, r2, #11
 800fe5e:	e5ed      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
 800fe60:	2280      	movs	r2, #128	; 0x80
 800fe62:	02d2      	lsls	r2, r2, #11
 800fe64:	e706      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe66:	0632      	lsls	r2, r6, #24
 800fe68:	d500      	bpl.n	800fe6c <HAL_DMA_IRQHandler+0x85c>
 800fe6a:	e448      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe6c:	4a36      	ldr	r2, [pc, #216]	; (800ff48 <HAL_DMA_IRQHandler+0x938>)
 800fe6e:	6810      	ldr	r0, [r2, #0]
 800fe70:	2240      	movs	r2, #64	; 0x40
 800fe72:	e5a0      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fe74:	0632      	lsls	r2, r6, #24
 800fe76:	d500      	bpl.n	800fe7a <HAL_DMA_IRQHandler+0x86a>
 800fe78:	e441      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fe7a:	4a34      	ldr	r2, [pc, #208]	; (800ff4c <HAL_DMA_IRQHandler+0x93c>)
 800fe7c:	492f      	ldr	r1, [pc, #188]	; (800ff3c <HAL_DMA_IRQHandler+0x92c>)
 800fe7e:	6810      	ldr	r0, [r2, #0]
 800fe80:	2240      	movs	r2, #64	; 0x40
 800fe82:	e4c5      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fe84:	2380      	movs	r3, #128	; 0x80
 800fe86:	039b      	lsls	r3, r3, #14
 800fe88:	e6a3      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
 800fe8a:	2380      	movs	r3, #128	; 0x80
 800fe8c:	039b      	lsls	r3, r3, #14
 800fe8e:	e570      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe90:	2280      	movs	r2, #128	; 0x80
 800fe92:	0412      	lsls	r2, r2, #16
 800fe94:	e471      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fe96:	2280      	movs	r2, #128	; 0x80
 800fe98:	03d2      	lsls	r2, r2, #15
 800fe9a:	e5cf      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fe9c:	2280      	movs	r2, #128	; 0x80
 800fe9e:	0412      	lsls	r2, r2, #16
 800fea0:	e614      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fea2:	2280      	movs	r2, #128	; 0x80
 800fea4:	03d2      	lsls	r2, r2, #15
 800fea6:	e6e5      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fea8:	0532      	lsls	r2, r6, #20
 800feaa:	d500      	bpl.n	800feae <HAL_DMA_IRQHandler+0x89e>
 800feac:	e427      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800feae:	4a26      	ldr	r2, [pc, #152]	; (800ff48 <HAL_DMA_IRQHandler+0x938>)
 800feb0:	6810      	ldr	r0, [r2, #0]
 800feb2:	2280      	movs	r2, #128	; 0x80
 800feb4:	00d2      	lsls	r2, r2, #3
 800feb6:	e57e      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800feb8:	0532      	lsls	r2, r6, #20
 800feba:	d500      	bpl.n	800febe <HAL_DMA_IRQHandler+0x8ae>
 800febc:	e41f      	b.n	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800febe:	4a23      	ldr	r2, [pc, #140]	; (800ff4c <HAL_DMA_IRQHandler+0x93c>)
 800fec0:	0019      	movs	r1, r3
 800fec2:	6810      	ldr	r0, [r2, #0]
 800fec4:	2280      	movs	r2, #128	; 0x80
 800fec6:	00d2      	lsls	r2, r2, #3
 800fec8:	e4a2      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800feca:	2380      	movs	r3, #128	; 0x80
 800fecc:	049b      	lsls	r3, r3, #18
 800fece:	e550      	b.n	800f972 <HAL_DMA_IRQHandler+0x362>
 800fed0:	2380      	movs	r3, #128	; 0x80
 800fed2:	049b      	lsls	r3, r3, #18
 800fed4:	e67d      	b.n	800fbd2 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fed6:	2280      	movs	r2, #128	; 0x80
 800fed8:	04d2      	lsls	r2, r2, #19
 800feda:	e5af      	b.n	800fa3c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fedc:	2280      	movs	r2, #128	; 0x80
 800fede:	0512      	lsls	r2, r2, #20
 800fee0:	e5f4      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fee2:	2280      	movs	r2, #128	; 0x80
 800fee4:	04d2      	lsls	r2, r2, #19
 800fee6:	e6c5      	b.n	800fc74 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800fee8:	2280      	movs	r2, #128	; 0x80
 800feea:	0512      	lsls	r2, r2, #20
 800feec:	e445      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800feee:	0432      	lsls	r2, r6, #16
 800fef0:	d501      	bpl.n	800fef6 <HAL_DMA_IRQHandler+0x8e6>
 800fef2:	f7ff fc04 	bl	800f6fe <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800fef6:	0019      	movs	r1, r3
 800fef8:	4a14      	ldr	r2, [pc, #80]	; (800ff4c <HAL_DMA_IRQHandler+0x93c>)
 800fefa:	6810      	ldr	r0, [r2, #0]
 800fefc:	2280      	movs	r2, #128	; 0x80
 800fefe:	01d2      	lsls	r2, r2, #7
 800ff00:	e486      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ff02:	2208      	movs	r2, #8
 800ff04:	e5e2      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
 800ff06:	2208      	movs	r2, #8
 800ff08:	e437      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
 800ff0a:	2280      	movs	r2, #128	; 0x80
 800ff0c:	e5de      	b.n	800facc <HAL_DMA_IRQHandler+0x4bc>
 800ff0e:	2280      	movs	r2, #128	; 0x80
 800ff10:	e433      	b.n	800f77a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff12:	6800      	ldr	r0, [r0, #0]
 800ff14:	0019      	movs	r1, r3
 800ff16:	2204      	movs	r2, #4
 800ff18:	e54d      	b.n	800f9b6 <HAL_DMA_IRQHandler+0x3a6>
 800ff1a:	2280      	movs	r2, #128	; 0x80
 800ff1c:	00d2      	lsls	r2, r2, #3
 800ff1e:	e477      	b.n	800f810 <HAL_DMA_IRQHandler+0x200>
 800ff20:	40020008 	.word	0x40020008
 800ff24:	4002001c 	.word	0x4002001c
 800ff28:	40020030 	.word	0x40020030
 800ff2c:	40020044 	.word	0x40020044
 800ff30:	40020058 	.word	0x40020058
 800ff34:	4002006c 	.word	0x4002006c
 800ff38:	40020408 	.word	0x40020408
 800ff3c:	4002041c 	.word	0x4002041c
 800ff40:	40020430 	.word	0x40020430
 800ff44:	bffdfbbc 	.word	0xbffdfbbc
 800ff48:	40020000 	.word	0x40020000
 800ff4c:	40020400 	.word	0x40020400

0800ff50 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800ff50:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 800ff52:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800ff54:	691a      	ldr	r2, [r3, #16]
 800ff56:	0612      	lsls	r2, r2, #24
 800ff58:	d504      	bpl.n	800ff64 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 800ff5a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ff5c:	4a03      	ldr	r2, [pc, #12]	; (800ff6c <HAL_FLASH_Unlock+0x1c>)
 800ff5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ff60:	4a03      	ldr	r2, [pc, #12]	; (800ff70 <HAL_FLASH_Unlock+0x20>)
 800ff62:	605a      	str	r2, [r3, #4]
}
 800ff64:	4770      	bx	lr
 800ff66:	46c0      	nop			; (mov r8, r8)
 800ff68:	40022000 	.word	0x40022000
 800ff6c:	45670123 	.word	0x45670123
 800ff70:	cdef89ab 	.word	0xcdef89ab

0800ff74 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ff74:	2180      	movs	r1, #128	; 0x80
 800ff76:	4a03      	ldr	r2, [pc, #12]	; (800ff84 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 800ff78:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ff7a:	6913      	ldr	r3, [r2, #16]
 800ff7c:	430b      	orrs	r3, r1
 800ff7e:	6113      	str	r3, [r2, #16]
}
 800ff80:	4770      	bx	lr
 800ff82:	46c0      	nop			; (mov r8, r8)
 800ff84:	40022000 	.word	0x40022000

0800ff88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ff88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff8a:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ff8c:	f7fe fe70 	bl	800ec70 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ff90:	4c1d      	ldr	r4, [pc, #116]	; (8010008 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 800ff92:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ff94:	2601      	movs	r6, #1
 800ff96:	e001      	b.n	800ff9c <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ff98:	1c6b      	adds	r3, r5, #1
 800ff9a:	d11d      	bne.n	800ffd8 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ff9c:	68e3      	ldr	r3, [r4, #12]
 800ff9e:	421e      	tst	r6, r3
 800ffa0:	d1fa      	bne.n	800ff98 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ffa2:	2320      	movs	r3, #32
 800ffa4:	68e2      	ldr	r2, [r4, #12]
 800ffa6:	4213      	tst	r3, r2
 800ffa8:	d000      	beq.n	800ffac <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ffaa:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffac:	4b16      	ldr	r3, [pc, #88]	; (8010008 <FLASH_WaitForLastOperation+0x80>)
 800ffae:	68da      	ldr	r2, [r3, #12]
 800ffb0:	06d2      	lsls	r2, r2, #27
 800ffb2:	d51a      	bpl.n	800ffea <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ffb4:	4b14      	ldr	r3, [pc, #80]	; (8010008 <FLASH_WaitForLastOperation+0x80>)
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	06db      	lsls	r3, r3, #27
 800ffba:	d504      	bpl.n	800ffc6 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ffbc:	2102      	movs	r1, #2
 800ffbe:	4a13      	ldr	r2, [pc, #76]	; (801000c <FLASH_WaitForLastOperation+0x84>)
 800ffc0:	69d3      	ldr	r3, [r2, #28]
 800ffc2:	430b      	orrs	r3, r1
 800ffc4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffc6:	4b10      	ldr	r3, [pc, #64]	; (8010008 <FLASH_WaitForLastOperation+0x80>)
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	075b      	lsls	r3, r3, #29
 800ffcc:	d416      	bmi.n	800fffc <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800ffce:	2214      	movs	r2, #20
    return HAL_ERROR;
 800ffd0:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800ffd2:	4b0d      	ldr	r3, [pc, #52]	; (8010008 <FLASH_WaitForLastOperation+0x80>)
 800ffd4:	60da      	str	r2, [r3, #12]
}
 800ffd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ffd8:	2d00      	cmp	r5, #0
 800ffda:	d004      	beq.n	800ffe6 <FLASH_WaitForLastOperation+0x5e>
 800ffdc:	f7fe fe48 	bl	800ec70 <HAL_GetTick>
 800ffe0:	1bc0      	subs	r0, r0, r7
 800ffe2:	42a8      	cmp	r0, r5
 800ffe4:	d9da      	bls.n	800ff9c <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 800ffe6:	2003      	movs	r0, #3
 800ffe8:	e7f5      	b.n	800ffd6 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffea:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 800ffec:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ffee:	075b      	lsls	r3, r3, #29
 800fff0:	d5f1      	bpl.n	800ffd6 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fff2:	4b05      	ldr	r3, [pc, #20]	; (8010008 <FLASH_WaitForLastOperation+0x80>)
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	06db      	lsls	r3, r3, #27
 800fff8:	d5e5      	bpl.n	800ffc6 <FLASH_WaitForLastOperation+0x3e>
 800fffa:	e7df      	b.n	800ffbc <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800fffc:	2101      	movs	r1, #1
 800fffe:	4a03      	ldr	r2, [pc, #12]	; (801000c <FLASH_WaitForLastOperation+0x84>)
 8010000:	69d3      	ldr	r3, [r2, #28]
 8010002:	430b      	orrs	r3, r1
 8010004:	61d3      	str	r3, [r2, #28]
 8010006:	e7e2      	b.n	800ffce <FLASH_WaitForLastOperation+0x46>
 8010008:	40022000 	.word	0x40022000
 801000c:	20006db8 	.word	0x20006db8

08010010 <HAL_FLASH_Program>:
{
 8010010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010012:	464e      	mov	r6, r9
 8010014:	4657      	mov	r7, sl
 8010016:	46de      	mov	lr, fp
 8010018:	4645      	mov	r5, r8
 801001a:	b5e0      	push	{r5, r6, r7, lr}
 801001c:	469a      	mov	sl, r3
 801001e:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010020:	4b2a      	ldr	r3, [pc, #168]	; (80100cc <HAL_FLASH_Program+0xbc>)
{
 8010022:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010024:	4699      	mov	r9, r3
 8010026:	7e1b      	ldrb	r3, [r3, #24]
{
 8010028:	0004      	movs	r4, r0
 801002a:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801002c:	2b01      	cmp	r3, #1
 801002e:	d048      	beq.n	80100c2 <HAL_FLASH_Program+0xb2>
 8010030:	2501      	movs	r5, #1
 8010032:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010034:	4826      	ldr	r0, [pc, #152]	; (80100d0 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010036:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010038:	f7ff ffa6 	bl	800ff88 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801003c:	2800      	cmp	r0, #0
 801003e:	d136      	bne.n	80100ae <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010040:	2c01      	cmp	r4, #1
 8010042:	d040      	beq.n	80100c6 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010044:	3c02      	subs	r4, #2
 8010046:	4263      	negs	r3, r4
 8010048:	415c      	adcs	r4, r3
 801004a:	2304      	movs	r3, #4
 801004c:	4264      	negs	r4, r4
 801004e:	43ac      	bics	r4, r5
 8010050:	46a0      	mov	r8, r4
 8010052:	469c      	mov	ip, r3
 8010054:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010056:	2300      	movs	r3, #0
      nbiterations = 4;
 8010058:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801005a:	469b      	mov	fp, r3
 801005c:	e018      	b.n	8010090 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801005e:	4653      	mov	r3, sl
 8010060:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010062:	464a      	mov	r2, r9
 8010064:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010066:	2701      	movs	r7, #1
 8010068:	4c1a      	ldr	r4, [pc, #104]	; (80100d4 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801006a:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801006c:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801006e:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010070:	433a      	orrs	r2, r7
 8010072:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010074:	4816      	ldr	r0, [pc, #88]	; (80100d0 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010076:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010078:	f7ff ff86 	bl	800ff88 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	43bb      	bics	r3, r7
 8010080:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010082:	2800      	cmp	r0, #0
 8010084:	d113      	bne.n	80100ae <HAL_FLASH_Program+0x9e>
 8010086:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8010088:	b2eb      	uxtb	r3, r5
 801008a:	3602      	adds	r6, #2
 801008c:	4598      	cmp	r8, r3
 801008e:	d90e      	bls.n	80100ae <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010090:	2220      	movs	r2, #32
 8010092:	012b      	lsls	r3, r5, #4
 8010094:	4252      	negs	r2, r2
 8010096:	189a      	adds	r2, r3, r2
 8010098:	d5e1      	bpl.n	801005e <HAL_FLASH_Program+0x4e>
 801009a:	2220      	movs	r2, #32
 801009c:	4651      	mov	r1, sl
 801009e:	1ad2      	subs	r2, r2, r3
 80100a0:	4091      	lsls	r1, r2
 80100a2:	000a      	movs	r2, r1
 80100a4:	9901      	ldr	r1, [sp, #4]
 80100a6:	40d9      	lsrs	r1, r3
 80100a8:	000b      	movs	r3, r1
 80100aa:	4313      	orrs	r3, r2
 80100ac:	e7d9      	b.n	8010062 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80100ae:	2300      	movs	r3, #0
 80100b0:	464a      	mov	r2, r9
 80100b2:	7613      	strb	r3, [r2, #24]
}
 80100b4:	b003      	add	sp, #12
 80100b6:	bc3c      	pop	{r2, r3, r4, r5}
 80100b8:	4690      	mov	r8, r2
 80100ba:	4699      	mov	r9, r3
 80100bc:	46a2      	mov	sl, r4
 80100be:	46ab      	mov	fp, r5
 80100c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80100c2:	2002      	movs	r0, #2
 80100c4:	e7f6      	b.n	80100b4 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 80100c6:	2301      	movs	r3, #1
 80100c8:	4698      	mov	r8, r3
 80100ca:	e7c4      	b.n	8010056 <HAL_FLASH_Program+0x46>
 80100cc:	20006db8 	.word	0x20006db8
 80100d0:	0000c350 	.word	0x0000c350
 80100d4:	40022000 	.word	0x40022000

080100d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80100d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100da:	464f      	mov	r7, r9
 80100dc:	4646      	mov	r6, r8
 80100de:	46d6      	mov	lr, sl
 80100e0:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80100e2:	4f30      	ldr	r7, [pc, #192]	; (80101a4 <HAL_FLASHEx_Erase+0xcc>)
{
 80100e4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80100e6:	7e3b      	ldrb	r3, [r7, #24]
{
 80100e8:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d057      	beq.n	801019e <HAL_FLASHEx_Erase+0xc6>
 80100ee:	2301      	movs	r3, #1
 80100f0:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80100f2:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80100f4:	482c      	ldr	r0, [pc, #176]	; (80101a8 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d034      	beq.n	8010164 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80100fa:	f7ff ff45 	bl	800ff88 <FLASH_WaitForLastOperation>
 80100fe:	2800      	cmp	r0, #0
 8010100:	d134      	bne.n	801016c <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010102:	2301      	movs	r3, #1
 8010104:	464a      	mov	r2, r9
 8010106:	425b      	negs	r3, r3
 8010108:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801010a:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 801010c:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801010e:	02db      	lsls	r3, r3, #11
 8010110:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010112:	429d      	cmp	r5, r3
 8010114:	d22a      	bcs.n	801016c <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010116:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010118:	4c24      	ldr	r4, [pc, #144]	; (80101ac <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801011a:	4698      	mov	r8, r3
 801011c:	e00a      	b.n	8010134 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 801011e:	2380      	movs	r3, #128	; 0x80
 8010120:	011b      	lsls	r3, r3, #4
 8010122:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010124:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010126:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010128:	4694      	mov	ip, r2
 801012a:	68b3      	ldr	r3, [r6, #8]
 801012c:	02db      	lsls	r3, r3, #11
 801012e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010130:	42ab      	cmp	r3, r5
 8010132:	d91c      	bls.n	801016e <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010134:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010136:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010138:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801013a:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801013c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801013e:	481a      	ldr	r0, [pc, #104]	; (80101a8 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010140:	4313      	orrs	r3, r2
 8010142:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010144:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010146:	6923      	ldr	r3, [r4, #16]
 8010148:	323e      	adds	r2, #62	; 0x3e
 801014a:	4313      	orrs	r3, r2
 801014c:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801014e:	f7ff ff1b 	bl	800ff88 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010152:	4652      	mov	r2, sl
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	4393      	bics	r3, r2
 8010158:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 801015a:	2800      	cmp	r0, #0
 801015c:	d0df      	beq.n	801011e <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 801015e:	464b      	mov	r3, r9
 8010160:	601d      	str	r5, [r3, #0]
            break;
 8010162:	e004      	b.n	801016e <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010164:	f7ff ff10 	bl	800ff88 <FLASH_WaitForLastOperation>
 8010168:	2800      	cmp	r0, #0
 801016a:	d007      	beq.n	801017c <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 801016c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 801016e:	2300      	movs	r3, #0
 8010170:	763b      	strb	r3, [r7, #24]
}
 8010172:	bc1c      	pop	{r2, r3, r4}
 8010174:	4690      	mov	r8, r2
 8010176:	4699      	mov	r9, r3
 8010178:	46a2      	mov	sl, r4
 801017a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801017c:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801017e:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010180:	4c0a      	ldr	r4, [pc, #40]	; (80101ac <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010182:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010184:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010186:	4808      	ldr	r0, [pc, #32]	; (80101a8 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010188:	432b      	orrs	r3, r5
 801018a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801018c:	6923      	ldr	r3, [r4, #16]
 801018e:	4313      	orrs	r3, r2
 8010190:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010192:	f7ff fef9 	bl	800ff88 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010196:	6923      	ldr	r3, [r4, #16]
 8010198:	43ab      	bics	r3, r5
 801019a:	6123      	str	r3, [r4, #16]
 801019c:	e7e7      	b.n	801016e <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 801019e:	2002      	movs	r0, #2
 80101a0:	e7e7      	b.n	8010172 <HAL_FLASHEx_Erase+0x9a>
 80101a2:	46c0      	nop			; (mov r8, r8)
 80101a4:	20006db8 	.word	0x20006db8
 80101a8:	0000c350 	.word	0x0000c350
 80101ac:	40022000 	.word	0x40022000

080101b0 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80101b0:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80101b2:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80101b4:	4b05      	ldr	r3, [pc, #20]	; (80101cc <FLASH_PageErase+0x1c>)
 80101b6:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <FLASH_PageErase+0x20>)
 80101ba:	691a      	ldr	r2, [r3, #16]
 80101bc:	430a      	orrs	r2, r1
 80101be:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80101c0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80101c2:	691a      	ldr	r2, [r3, #16]
 80101c4:	313e      	adds	r1, #62	; 0x3e
 80101c6:	430a      	orrs	r2, r1
 80101c8:	611a      	str	r2, [r3, #16]
}
 80101ca:	4770      	bx	lr
 80101cc:	20006db8 	.word	0x20006db8
 80101d0:	40022000 	.word	0x40022000

080101d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80101d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101d6:	464e      	mov	r6, r9
 80101d8:	46de      	mov	lr, fp
 80101da:	4657      	mov	r7, sl
 80101dc:	4645      	mov	r5, r8
 80101de:	b5e0      	push	{r5, r6, r7, lr}
 80101e0:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80101e2:	6809      	ldr	r1, [r1, #0]
{ 
 80101e4:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 80101e6:	2900      	cmp	r1, #0
 80101e8:	d100      	bne.n	80101ec <HAL_GPIO_Init+0x18>
 80101ea:	e080      	b.n	80102ee <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80101ec:	4b70      	ldr	r3, [pc, #448]	; (80103b0 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 80101ee:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80101f0:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80101f2:	4b70      	ldr	r3, [pc, #448]	; (80103b4 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80101f4:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 80101f6:	4698      	mov	r8, r3
 80101f8:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80101fa:	0033      	movs	r3, r6
 80101fc:	4652      	mov	r2, sl
 80101fe:	40a3      	lsls	r3, r4
 8010200:	4013      	ands	r3, r2
 8010202:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010204:	d06f      	beq.n	80102e6 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010206:	464b      	mov	r3, r9
 8010208:	6859      	ldr	r1, [r3, #4]
 801020a:	2310      	movs	r3, #16
 801020c:	000f      	movs	r7, r1
 801020e:	439f      	bics	r7, r3
 8010210:	003b      	movs	r3, r7
 8010212:	9701      	str	r7, [sp, #4]
 8010214:	2f02      	cmp	r7, #2
 8010216:	d100      	bne.n	801021a <HAL_GPIO_Init+0x46>
 8010218:	e070      	b.n	80102fc <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801021a:	2203      	movs	r2, #3
 801021c:	0065      	lsls	r5, r4, #1
 801021e:	40aa      	lsls	r2, r5
 8010220:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010222:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010224:	4013      	ands	r3, r2
 8010226:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010228:	2303      	movs	r3, #3
 801022a:	400b      	ands	r3, r1
 801022c:	40ab      	lsls	r3, r5
 801022e:	469c      	mov	ip, r3
 8010230:	003b      	movs	r3, r7
 8010232:	4667      	mov	r7, ip
 8010234:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010236:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010238:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801023a:	3f01      	subs	r7, #1
 801023c:	2f01      	cmp	r7, #1
 801023e:	d800      	bhi.n	8010242 <HAL_GPIO_Init+0x6e>
 8010240:	e079      	b.n	8010336 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010242:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010244:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010246:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010248:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801024a:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801024c:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801024e:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010250:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010252:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010254:	4219      	tst	r1, r3
 8010256:	d046      	beq.n	80102e6 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010258:	465b      	mov	r3, fp
 801025a:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801025c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801025e:	4332      	orrs	r2, r6
 8010260:	619a      	str	r2, [r3, #24]
 8010262:	699a      	ldr	r2, [r3, #24]
 8010264:	4b54      	ldr	r3, [pc, #336]	; (80103b8 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010266:	4027      	ands	r7, r4
 8010268:	469c      	mov	ip, r3
 801026a:	230f      	movs	r3, #15
 801026c:	00bf      	lsls	r7, r7, #2
 801026e:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010270:	4032      	ands	r2, r6
 8010272:	9203      	str	r2, [sp, #12]
 8010274:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010276:	08a2      	lsrs	r2, r4, #2
 8010278:	0092      	lsls	r2, r2, #2
 801027a:	4462      	add	r2, ip
 801027c:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801027e:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010280:	2390      	movs	r3, #144	; 0x90
 8010282:	05db      	lsls	r3, r3, #23
 8010284:	4298      	cmp	r0, r3
 8010286:	d012      	beq.n	80102ae <HAL_GPIO_Init+0xda>
 8010288:	4b4c      	ldr	r3, [pc, #304]	; (80103bc <HAL_GPIO_Init+0x1e8>)
 801028a:	4298      	cmp	r0, r3
 801028c:	d100      	bne.n	8010290 <HAL_GPIO_Init+0xbc>
 801028e:	e083      	b.n	8010398 <HAL_GPIO_Init+0x1c4>
 8010290:	4b4b      	ldr	r3, [pc, #300]	; (80103c0 <HAL_GPIO_Init+0x1ec>)
 8010292:	4298      	cmp	r0, r3
 8010294:	d100      	bne.n	8010298 <HAL_GPIO_Init+0xc4>
 8010296:	e07b      	b.n	8010390 <HAL_GPIO_Init+0x1bc>
 8010298:	4b4a      	ldr	r3, [pc, #296]	; (80103c4 <HAL_GPIO_Init+0x1f0>)
 801029a:	4298      	cmp	r0, r3
 801029c:	d100      	bne.n	80102a0 <HAL_GPIO_Init+0xcc>
 801029e:	e07f      	b.n	80103a0 <HAL_GPIO_Init+0x1cc>
 80102a0:	4b49      	ldr	r3, [pc, #292]	; (80103c8 <HAL_GPIO_Init+0x1f4>)
 80102a2:	4298      	cmp	r0, r3
 80102a4:	d100      	bne.n	80102a8 <HAL_GPIO_Init+0xd4>
 80102a6:	e07f      	b.n	80103a8 <HAL_GPIO_Init+0x1d4>
 80102a8:	2305      	movs	r3, #5
 80102aa:	40bb      	lsls	r3, r7
 80102ac:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 80102ae:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 80102b0:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 80102b2:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80102b4:	9b00      	ldr	r3, [sp, #0]
 80102b6:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80102b8:	03cb      	lsls	r3, r1, #15
 80102ba:	d451      	bmi.n	8010360 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80102bc:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80102be:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 80102c0:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80102c2:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80102c4:	038b      	lsls	r3, r1, #14
 80102c6:	d452      	bmi.n	801036e <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80102c8:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80102ca:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 80102cc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80102ce:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80102d0:	02cb      	lsls	r3, r1, #11
 80102d2:	d453      	bmi.n	801037c <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80102d4:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80102d6:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 80102d8:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80102da:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80102dc:	028b      	lsls	r3, r1, #10
 80102de:	d454      	bmi.n	801038a <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80102e0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80102e2:	4643      	mov	r3, r8
 80102e4:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 80102e6:	4653      	mov	r3, sl
      }
    }
    
    position++;
 80102e8:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 80102ea:	40e3      	lsrs	r3, r4
 80102ec:	d185      	bne.n	80101fa <HAL_GPIO_Init+0x26>
  } 
}
 80102ee:	b005      	add	sp, #20
 80102f0:	bc3c      	pop	{r2, r3, r4, r5}
 80102f2:	4690      	mov	r8, r2
 80102f4:	4699      	mov	r9, r3
 80102f6:	46a2      	mov	sl, r4
 80102f8:	46ab      	mov	fp, r5
 80102fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80102fc:	2507      	movs	r5, #7
 80102fe:	4025      	ands	r5, r4
 8010300:	00ad      	lsls	r5, r5, #2
 8010302:	330d      	adds	r3, #13
 8010304:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010306:	08e2      	lsrs	r2, r4, #3
 8010308:	0092      	lsls	r2, r2, #2
 801030a:	1882      	adds	r2, r0, r2
 801030c:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801030e:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010310:	464b      	mov	r3, r9
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	40ab      	lsls	r3, r5
 8010316:	001d      	movs	r5, r3
 8010318:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 801031a:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801031c:	2203      	movs	r2, #3
 801031e:	0065      	lsls	r5, r4, #1
 8010320:	40aa      	lsls	r2, r5
 8010322:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010324:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010326:	4017      	ands	r7, r2
 8010328:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801032a:	2703      	movs	r7, #3
 801032c:	400f      	ands	r7, r1
 801032e:	40af      	lsls	r7, r5
 8010330:	4663      	mov	r3, ip
 8010332:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010334:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010336:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010338:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801033a:	4017      	ands	r7, r2
 801033c:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801033e:	68df      	ldr	r7, [r3, #12]
 8010340:	4663      	mov	r3, ip
 8010342:	40af      	lsls	r7, r5
 8010344:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010346:	0033      	movs	r3, r6
 8010348:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 801034a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801034c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801034e:	439f      	bics	r7, r3
 8010350:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010352:	090f      	lsrs	r7, r1, #4
 8010354:	4037      	ands	r7, r6
 8010356:	40a7      	lsls	r7, r4
 8010358:	4663      	mov	r3, ip
 801035a:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 801035c:	6047      	str	r7, [r0, #4]
 801035e:	e770      	b.n	8010242 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010360:	9b00      	ldr	r3, [sp, #0]
 8010362:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010364:	4643      	mov	r3, r8
 8010366:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010368:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801036a:	038b      	lsls	r3, r1, #14
 801036c:	d5ac      	bpl.n	80102c8 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 801036e:	9b00      	ldr	r3, [sp, #0]
 8010370:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010372:	4643      	mov	r3, r8
 8010374:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010376:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010378:	02cb      	lsls	r3, r1, #11
 801037a:	d5ab      	bpl.n	80102d4 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010380:	4643      	mov	r3, r8
 8010382:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010384:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010386:	028b      	lsls	r3, r1, #10
 8010388:	d5aa      	bpl.n	80102e0 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 801038a:	9b00      	ldr	r3, [sp, #0]
 801038c:	431a      	orrs	r2, r3
 801038e:	e7a8      	b.n	80102e2 <HAL_GPIO_Init+0x10e>
 8010390:	2302      	movs	r3, #2
 8010392:	40bb      	lsls	r3, r7
 8010394:	431d      	orrs	r5, r3
 8010396:	e78a      	b.n	80102ae <HAL_GPIO_Init+0xda>
 8010398:	0033      	movs	r3, r6
 801039a:	40bb      	lsls	r3, r7
 801039c:	431d      	orrs	r5, r3
 801039e:	e786      	b.n	80102ae <HAL_GPIO_Init+0xda>
 80103a0:	2303      	movs	r3, #3
 80103a2:	40bb      	lsls	r3, r7
 80103a4:	431d      	orrs	r5, r3
 80103a6:	e782      	b.n	80102ae <HAL_GPIO_Init+0xda>
 80103a8:	2304      	movs	r3, #4
 80103aa:	40bb      	lsls	r3, r7
 80103ac:	431d      	orrs	r5, r3
 80103ae:	e77e      	b.n	80102ae <HAL_GPIO_Init+0xda>
 80103b0:	40021000 	.word	0x40021000
 80103b4:	40010400 	.word	0x40010400
 80103b8:	40010000 	.word	0x40010000
 80103bc:	48000400 	.word	0x48000400
 80103c0:	48000800 	.word	0x48000800
 80103c4:	48000c00 	.word	0x48000c00
 80103c8:	48001000 	.word	0x48001000

080103cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80103cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ce:	46de      	mov	lr, fp
 80103d0:	4657      	mov	r7, sl
 80103d2:	464e      	mov	r6, r9
 80103d4:	4645      	mov	r5, r8
 80103d6:	b5e0      	push	{r5, r6, r7, lr}
 80103d8:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80103da:	2900      	cmp	r1, #0
 80103dc:	d055      	beq.n	801048a <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 80103de:	2201      	movs	r2, #1
 80103e0:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80103e2:	3202      	adds	r2, #2
 80103e4:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80103e6:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 80103e8:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80103ea:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 80103ec:	4666      	mov	r6, ip
 80103ee:	000d      	movs	r5, r1
 80103f0:	409e      	lsls	r6, r3
 80103f2:	4035      	ands	r5, r6
    if (iocurrent)
 80103f4:	d045      	beq.n	8010482 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80103f6:	4647      	mov	r7, r8
 80103f8:	005c      	lsls	r4, r3, #1
 80103fa:	40a7      	lsls	r7, r4
 80103fc:	43fc      	mvns	r4, r7
 80103fe:	6802      	ldr	r2, [r0, #0]
 8010400:	4022      	ands	r2, r4
 8010402:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010404:	08da      	lsrs	r2, r3, #3
 8010406:	0092      	lsls	r2, r2, #2
 8010408:	1887      	adds	r7, r0, r2
 801040a:	9701      	str	r7, [sp, #4]
 801040c:	6a3f      	ldr	r7, [r7, #32]
 801040e:	46ba      	mov	sl, r7
 8010410:	2707      	movs	r7, #7
 8010412:	401f      	ands	r7, r3
 8010414:	00bf      	lsls	r7, r7, #2
 8010416:	46bb      	mov	fp, r7
 8010418:	464f      	mov	r7, r9
 801041a:	465a      	mov	r2, fp
 801041c:	4097      	lsls	r7, r2
 801041e:	46bb      	mov	fp, r7
 8010420:	4657      	mov	r7, sl
 8010422:	465a      	mov	r2, fp
 8010424:	4397      	bics	r7, r2
 8010426:	003a      	movs	r2, r7
 8010428:	9f01      	ldr	r7, [sp, #4]
 801042a:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801042c:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801042e:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010430:	4022      	ands	r2, r4
 8010432:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010434:	6842      	ldr	r2, [r0, #4]
 8010436:	43b2      	bics	r2, r6
 8010438:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801043a:	68c2      	ldr	r2, [r0, #12]
 801043c:	4014      	ands	r4, r2
 801043e:	60c4      	str	r4, [r0, #12]
 8010440:	4c2b      	ldr	r4, [pc, #172]	; (80104f0 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010442:	089a      	lsrs	r2, r3, #2
 8010444:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010446:	4644      	mov	r4, r8
 8010448:	401c      	ands	r4, r3
 801044a:	00a4      	lsls	r4, r4, #2
 801044c:	40a7      	lsls	r7, r4
 801044e:	0092      	lsls	r2, r2, #2
 8010450:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010452:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010454:	46ba      	mov	sl, r7
 8010456:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010458:	2790      	movs	r7, #144	; 0x90
 801045a:	05ff      	lsls	r7, r7, #23
 801045c:	42b8      	cmp	r0, r7
 801045e:	d01b      	beq.n	8010498 <HAL_GPIO_DeInit+0xcc>
 8010460:	4f24      	ldr	r7, [pc, #144]	; (80104f4 <HAL_GPIO_DeInit+0x128>)
 8010462:	42b8      	cmp	r0, r7
 8010464:	d033      	beq.n	80104ce <HAL_GPIO_DeInit+0x102>
 8010466:	4f24      	ldr	r7, [pc, #144]	; (80104f8 <HAL_GPIO_DeInit+0x12c>)
 8010468:	42b8      	cmp	r0, r7
 801046a:	d038      	beq.n	80104de <HAL_GPIO_DeInit+0x112>
 801046c:	4f23      	ldr	r7, [pc, #140]	; (80104fc <HAL_GPIO_DeInit+0x130>)
 801046e:	42b8      	cmp	r0, r7
 8010470:	d039      	beq.n	80104e6 <HAL_GPIO_DeInit+0x11a>
 8010472:	4f23      	ldr	r7, [pc, #140]	; (8010500 <HAL_GPIO_DeInit+0x134>)
 8010474:	42b8      	cmp	r0, r7
 8010476:	d02e      	beq.n	80104d6 <HAL_GPIO_DeInit+0x10a>
 8010478:	2705      	movs	r7, #5
 801047a:	40a7      	lsls	r7, r4
 801047c:	003c      	movs	r4, r7
 801047e:	42a6      	cmp	r6, r4
 8010480:	d00d      	beq.n	801049e <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010482:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010484:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010486:	40da      	lsrs	r2, r3
 8010488:	d1b0      	bne.n	80103ec <HAL_GPIO_DeInit+0x20>
  }
}
 801048a:	b003      	add	sp, #12
 801048c:	bc3c      	pop	{r2, r3, r4, r5}
 801048e:	4690      	mov	r8, r2
 8010490:	4699      	mov	r9, r3
 8010492:	46a2      	mov	sl, r4
 8010494:	46ab      	mov	fp, r5
 8010496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010498:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801049a:	42a6      	cmp	r6, r4
 801049c:	d1f1      	bne.n	8010482 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801049e:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80104a0:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80104a2:	6894      	ldr	r4, [r2, #8]
    position++;
 80104a4:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80104a6:	43b4      	bics	r4, r6
 80104a8:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80104aa:	4c16      	ldr	r4, [pc, #88]	; (8010504 <HAL_GPIO_DeInit+0x138>)
 80104ac:	6822      	ldr	r2, [r4, #0]
 80104ae:	402a      	ands	r2, r5
 80104b0:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80104b2:	6862      	ldr	r2, [r4, #4]
 80104b4:	402a      	ands	r2, r5
 80104b6:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80104b8:	68a2      	ldr	r2, [r4, #8]
 80104ba:	402a      	ands	r2, r5
 80104bc:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80104be:	68e2      	ldr	r2, [r4, #12]
 80104c0:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 80104c2:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80104c4:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 80104c6:	40da      	lsrs	r2, r3
 80104c8:	d000      	beq.n	80104cc <HAL_GPIO_DeInit+0x100>
 80104ca:	e78f      	b.n	80103ec <HAL_GPIO_DeInit+0x20>
 80104cc:	e7dd      	b.n	801048a <HAL_GPIO_DeInit+0xbe>
 80104ce:	4667      	mov	r7, ip
 80104d0:	40a7      	lsls	r7, r4
 80104d2:	003c      	movs	r4, r7
 80104d4:	e7e1      	b.n	801049a <HAL_GPIO_DeInit+0xce>
 80104d6:	2704      	movs	r7, #4
 80104d8:	40a7      	lsls	r7, r4
 80104da:	003c      	movs	r4, r7
 80104dc:	e7dd      	b.n	801049a <HAL_GPIO_DeInit+0xce>
 80104de:	2702      	movs	r7, #2
 80104e0:	40a7      	lsls	r7, r4
 80104e2:	003c      	movs	r4, r7
 80104e4:	e7d9      	b.n	801049a <HAL_GPIO_DeInit+0xce>
 80104e6:	4647      	mov	r7, r8
 80104e8:	40a7      	lsls	r7, r4
 80104ea:	003c      	movs	r4, r7
 80104ec:	e7d5      	b.n	801049a <HAL_GPIO_DeInit+0xce>
 80104ee:	46c0      	nop			; (mov r8, r8)
 80104f0:	40010000 	.word	0x40010000
 80104f4:	48000400 	.word	0x48000400
 80104f8:	48000800 	.word	0x48000800
 80104fc:	48000c00 	.word	0x48000c00
 8010500:	48001000 	.word	0x48001000
 8010504:	40010400 	.word	0x40010400

08010508 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010508:	6900      	ldr	r0, [r0, #16]
 801050a:	4008      	ands	r0, r1
 801050c:	1e41      	subs	r1, r0, #1
 801050e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010510:	b2c0      	uxtb	r0, r0
  }
 8010512:	4770      	bx	lr

08010514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010514:	2a00      	cmp	r2, #0
 8010516:	d101      	bne.n	801051c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010518:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801051a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801051c:	6181      	str	r1, [r0, #24]
 801051e:	e7fc      	b.n	801051a <HAL_GPIO_WritePin+0x6>

08010520 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010520:	6943      	ldr	r3, [r0, #20]
 8010522:	4059      	eors	r1, r3
 8010524:	6141      	str	r1, [r0, #20]
}
 8010526:	4770      	bx	lr

08010528 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010528:	4770      	bx	lr
 801052a:	46c0      	nop			; (mov r8, r8)

0801052c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801052c:	2380      	movs	r3, #128	; 0x80
 801052e:	4a03      	ldr	r2, [pc, #12]	; (801053c <HAL_PWR_EnableBkUpAccess+0x10>)
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	6811      	ldr	r1, [r2, #0]
 8010534:	430b      	orrs	r3, r1
 8010536:	6013      	str	r3, [r2, #0]
}
 8010538:	4770      	bx	lr
 801053a:	46c0      	nop			; (mov r8, r8)
 801053c:	40007000 	.word	0x40007000

08010540 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010542:	46c6      	mov	lr, r8
 8010544:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010546:	6803      	ldr	r3, [r0, #0]
{
 8010548:	b082      	sub	sp, #8
 801054a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801054c:	07da      	lsls	r2, r3, #31
 801054e:	d54b      	bpl.n	80105e8 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010550:	210c      	movs	r1, #12
 8010552:	48c4      	ldr	r0, [pc, #784]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 8010554:	6842      	ldr	r2, [r0, #4]
 8010556:	400a      	ands	r2, r1
 8010558:	2a04      	cmp	r2, #4
 801055a:	d100      	bne.n	801055e <HAL_RCC_OscConfig+0x1e>
 801055c:	e153      	b.n	8010806 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801055e:	6842      	ldr	r2, [r0, #4]
 8010560:	4011      	ands	r1, r2
 8010562:	2908      	cmp	r1, #8
 8010564:	d108      	bne.n	8010578 <HAL_RCC_OscConfig+0x38>
 8010566:	21c0      	movs	r1, #192	; 0xc0
 8010568:	6842      	ldr	r2, [r0, #4]
 801056a:	0249      	lsls	r1, r1, #9
 801056c:	400a      	ands	r2, r1
 801056e:	2180      	movs	r1, #128	; 0x80
 8010570:	0249      	lsls	r1, r1, #9
 8010572:	428a      	cmp	r2, r1
 8010574:	d100      	bne.n	8010578 <HAL_RCC_OscConfig+0x38>
 8010576:	e146      	b.n	8010806 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010578:	4dba      	ldr	r5, [pc, #744]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 801057a:	4abb      	ldr	r2, [pc, #748]	; (8010868 <HAL_RCC_OscConfig+0x328>)
 801057c:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801057e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010580:	4013      	ands	r3, r2
 8010582:	602b      	str	r3, [r5, #0]
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	4ab9      	ldr	r2, [pc, #740]	; (801086c <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010588:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801058a:	4013      	ands	r3, r2
 801058c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801058e:	f7fe fb6f 	bl	800ec70 <HAL_GetTick>
 8010592:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010594:	e005      	b.n	80105a2 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010596:	f7fe fb6b 	bl	800ec70 <HAL_GetTick>
 801059a:	1bc0      	subs	r0, r0, r7
 801059c:	2864      	cmp	r0, #100	; 0x64
 801059e:	d900      	bls.n	80105a2 <HAL_RCC_OscConfig+0x62>
 80105a0:	e13b      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105a2:	682b      	ldr	r3, [r5, #0]
 80105a4:	4233      	tst	r3, r6
 80105a6:	d1f6      	bne.n	8010596 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105a8:	6863      	ldr	r3, [r4, #4]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d100      	bne.n	80105b0 <HAL_RCC_OscConfig+0x70>
 80105ae:	e196      	b.n	80108de <HAL_RCC_OscConfig+0x39e>
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d000      	beq.n	80105b6 <HAL_RCC_OscConfig+0x76>
 80105b4:	e1bc      	b.n	8010930 <HAL_RCC_OscConfig+0x3f0>
 80105b6:	682b      	ldr	r3, [r5, #0]
 80105b8:	4aab      	ldr	r2, [pc, #684]	; (8010868 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105ba:	4eaa      	ldr	r6, [pc, #680]	; (8010864 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105bc:	4013      	ands	r3, r2
 80105be:	602b      	str	r3, [r5, #0]
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	4aaa      	ldr	r2, [pc, #680]	; (801086c <HAL_RCC_OscConfig+0x32c>)
 80105c4:	4013      	ands	r3, r2
 80105c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80105c8:	f7fe fb52 	bl	800ec70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105cc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80105ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105d0:	02ad      	lsls	r5, r5, #10
 80105d2:	e005      	b.n	80105e0 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80105d4:	f7fe fb4c 	bl	800ec70 <HAL_GetTick>
 80105d8:	1bc0      	subs	r0, r0, r7
 80105da:	2864      	cmp	r0, #100	; 0x64
 80105dc:	d900      	bls.n	80105e0 <HAL_RCC_OscConfig+0xa0>
 80105de:	e11c      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105e0:	6833      	ldr	r3, [r6, #0]
 80105e2:	422b      	tst	r3, r5
 80105e4:	d1f6      	bne.n	80105d4 <HAL_RCC_OscConfig+0x94>
 80105e6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80105e8:	079a      	lsls	r2, r3, #30
 80105ea:	d529      	bpl.n	8010640 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80105ec:	220c      	movs	r2, #12
 80105ee:	499d      	ldr	r1, [pc, #628]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 80105f0:	6848      	ldr	r0, [r1, #4]
 80105f2:	4202      	tst	r2, r0
 80105f4:	d100      	bne.n	80105f8 <HAL_RCC_OscConfig+0xb8>
 80105f6:	e0fd      	b.n	80107f4 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80105f8:	6848      	ldr	r0, [r1, #4]
 80105fa:	4002      	ands	r2, r0
 80105fc:	2a08      	cmp	r2, #8
 80105fe:	d100      	bne.n	8010602 <HAL_RCC_OscConfig+0xc2>
 8010600:	e0ef      	b.n	80107e2 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010602:	68e3      	ldr	r3, [r4, #12]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d100      	bne.n	801060a <HAL_RCC_OscConfig+0xca>
 8010608:	e138      	b.n	801087c <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801060a:	2201      	movs	r2, #1
 801060c:	4f95      	ldr	r7, [pc, #596]	; (8010864 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801060e:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	4313      	orrs	r3, r2
 8010614:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8010616:	f7fe fb2b 	bl	800ec70 <HAL_GetTick>
 801061a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801061c:	e005      	b.n	801062a <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801061e:	f7fe fb27 	bl	800ec70 <HAL_GetTick>
 8010622:	1b80      	subs	r0, r0, r6
 8010624:	2864      	cmp	r0, #100	; 0x64
 8010626:	d900      	bls.n	801062a <HAL_RCC_OscConfig+0xea>
 8010628:	e0f7      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	421d      	tst	r5, r3
 801062e:	d0f6      	beq.n	801061e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010630:	21f8      	movs	r1, #248	; 0xf8
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	6923      	ldr	r3, [r4, #16]
 8010636:	438a      	bics	r2, r1
 8010638:	00db      	lsls	r3, r3, #3
 801063a:	4313      	orrs	r3, r2
 801063c:	603b      	str	r3, [r7, #0]
 801063e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010640:	071a      	lsls	r2, r3, #28
 8010642:	d45d      	bmi.n	8010700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010644:	075a      	lsls	r2, r3, #29
 8010646:	d474      	bmi.n	8010732 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8010648:	06da      	lsls	r2, r3, #27
 801064a:	d512      	bpl.n	8010672 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801064c:	6962      	ldr	r2, [r4, #20]
 801064e:	2a01      	cmp	r2, #1
 8010650:	d100      	bne.n	8010654 <HAL_RCC_OscConfig+0x114>
 8010652:	e18c      	b.n	801096e <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010654:	3205      	adds	r2, #5
 8010656:	d000      	beq.n	801065a <HAL_RCC_OscConfig+0x11a>
 8010658:	e124      	b.n	80108a4 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 801065a:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801065c:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 801065e:	4981      	ldr	r1, [pc, #516]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 8010660:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010662:	4382      	bics	r2, r0
 8010664:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010666:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010668:	69a2      	ldr	r2, [r4, #24]
 801066a:	43a8      	bics	r0, r5
 801066c:	00d2      	lsls	r2, r2, #3
 801066e:	4302      	orrs	r2, r0
 8010670:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010672:	069b      	lsls	r3, r3, #26
 8010674:	d522      	bpl.n	80106bc <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010676:	220c      	movs	r2, #12
 8010678:	497a      	ldr	r1, [pc, #488]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 801067a:	684b      	ldr	r3, [r1, #4]
 801067c:	4013      	ands	r3, r2
 801067e:	2b0c      	cmp	r3, #12
 8010680:	d100      	bne.n	8010684 <HAL_RCC_OscConfig+0x144>
 8010682:	e14a      	b.n	801091a <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010684:	684b      	ldr	r3, [r1, #4]
 8010686:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010688:	2a08      	cmp	r2, #8
 801068a:	d100      	bne.n	801068e <HAL_RCC_OscConfig+0x14e>
 801068c:	e13e      	b.n	801090c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801068e:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010690:	4d74      	ldr	r5, [pc, #464]	; (8010864 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010692:	2b00      	cmp	r3, #0
 8010694:	d100      	bne.n	8010698 <HAL_RCC_OscConfig+0x158>
 8010696:	e156      	b.n	8010946 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8010698:	2680      	movs	r6, #128	; 0x80
 801069a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801069c:	0276      	lsls	r6, r6, #9
 801069e:	4333      	orrs	r3, r6
 80106a0:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 80106a2:	f7fe fae5 	bl	800ec70 <HAL_GetTick>
 80106a6:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80106a8:	e005      	b.n	80106b6 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80106aa:	f7fe fae1 	bl	800ec70 <HAL_GetTick>
 80106ae:	1bc0      	subs	r0, r0, r7
 80106b0:	2864      	cmp	r0, #100	; 0x64
 80106b2:	d900      	bls.n	80106b6 <HAL_RCC_OscConfig+0x176>
 80106b4:	e0b1      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80106b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80106b8:	4233      	tst	r3, r6
 80106ba:	d0f6      	beq.n	80106aa <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80106bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d01c      	beq.n	80106fc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80106c2:	220c      	movs	r2, #12
 80106c4:	4d67      	ldr	r5, [pc, #412]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 80106c6:	6869      	ldr	r1, [r5, #4]
 80106c8:	400a      	ands	r2, r1
 80106ca:	2a08      	cmp	r2, #8
 80106cc:	d100      	bne.n	80106d0 <HAL_RCC_OscConfig+0x190>
 80106ce:	e098      	b.n	8010802 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d100      	bne.n	80106d6 <HAL_RCC_OscConfig+0x196>
 80106d4:	e16a      	b.n	80109ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80106d6:	682b      	ldr	r3, [r5, #0]
 80106d8:	4a65      	ldr	r2, [pc, #404]	; (8010870 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106da:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80106dc:	4013      	ands	r3, r2
 80106de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80106e0:	f7fe fac6 	bl	800ec70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106e4:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 80106e6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106e8:	e005      	b.n	80106f6 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106ea:	f7fe fac1 	bl	800ec70 <HAL_GetTick>
 80106ee:	1b80      	subs	r0, r0, r6
 80106f0:	2864      	cmp	r0, #100	; 0x64
 80106f2:	d900      	bls.n	80106f6 <HAL_RCC_OscConfig+0x1b6>
 80106f4:	e091      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80106f6:	682b      	ldr	r3, [r5, #0]
 80106f8:	4223      	tst	r3, r4
 80106fa:	d1f6      	bne.n	80106ea <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80106fc:	2000      	movs	r0, #0
 80106fe:	e08d      	b.n	801081c <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010700:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8010702:	4d58      	ldr	r5, [pc, #352]	; (8010864 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010704:	2b00      	cmp	r3, #0
 8010706:	d100      	bne.n	801070a <HAL_RCC_OscConfig+0x1ca>
 8010708:	e08c      	b.n	8010824 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801070a:	2201      	movs	r2, #1
 801070c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801070e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8010710:	4313      	orrs	r3, r2
 8010712:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010714:	f7fe faac 	bl	800ec70 <HAL_GetTick>
 8010718:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801071a:	e004      	b.n	8010726 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801071c:	f7fe faa8 	bl	800ec70 <HAL_GetTick>
 8010720:	1bc0      	subs	r0, r0, r7
 8010722:	2864      	cmp	r0, #100	; 0x64
 8010724:	d879      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010728:	421e      	tst	r6, r3
 801072a:	d0f7      	beq.n	801071c <HAL_RCC_OscConfig+0x1dc>
 801072c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801072e:	075a      	lsls	r2, r3, #29
 8010730:	d58a      	bpl.n	8010648 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8010732:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010734:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8010736:	4a4b      	ldr	r2, [pc, #300]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 8010738:	0540      	lsls	r0, r0, #21
 801073a:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801073c:	4d4d      	ldr	r5, [pc, #308]	; (8010874 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 801073e:	4301      	orrs	r1, r0
 8010740:	61d1      	str	r1, [r2, #28]
 8010742:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8010744:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8010746:	4003      	ands	r3, r0
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801074c:	682b      	ldr	r3, [r5, #0]
 801074e:	4333      	orrs	r3, r6
 8010750:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8010752:	f7fe fa8d 	bl	800ec70 <HAL_GetTick>
 8010756:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010758:	e004      	b.n	8010764 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801075a:	f7fe fa89 	bl	800ec70 <HAL_GetTick>
 801075e:	1bc0      	subs	r0, r0, r7
 8010760:	2864      	cmp	r0, #100	; 0x64
 8010762:	d85a      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	4233      	tst	r3, r6
 8010768:	d0f7      	beq.n	801075a <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801076a:	2201      	movs	r2, #1
 801076c:	4d3d      	ldr	r5, [pc, #244]	; (8010864 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801076e:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8010770:	6a2b      	ldr	r3, [r5, #32]
 8010772:	4393      	bics	r3, r2
 8010774:	622b      	str	r3, [r5, #32]
 8010776:	6a2b      	ldr	r3, [r5, #32]
 8010778:	3203      	adds	r2, #3
 801077a:	4393      	bics	r3, r2
 801077c:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 801077e:	f7fe fa77 	bl	800ec70 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010782:	4b3d      	ldr	r3, [pc, #244]	; (8010878 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8010784:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010786:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010788:	e004      	b.n	8010794 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801078a:	f7fe fa71 	bl	800ec70 <HAL_GetTick>
 801078e:	1bc0      	subs	r0, r0, r7
 8010790:	4540      	cmp	r0, r8
 8010792:	d842      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010794:	6a2b      	ldr	r3, [r5, #32]
 8010796:	421e      	tst	r6, r3
 8010798:	d1f7      	bne.n	801078a <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801079a:	68a3      	ldr	r3, [r4, #8]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d100      	bne.n	80107a2 <HAL_RCC_OscConfig+0x262>
 80107a0:	e157      	b.n	8010a52 <HAL_RCC_OscConfig+0x512>
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d100      	bne.n	80107a8 <HAL_RCC_OscConfig+0x268>
 80107a6:	e139      	b.n	8010a1c <HAL_RCC_OscConfig+0x4dc>
 80107a8:	2b05      	cmp	r3, #5
 80107aa:	d100      	bne.n	80107ae <HAL_RCC_OscConfig+0x26e>
 80107ac:	e155      	b.n	8010a5a <HAL_RCC_OscConfig+0x51a>
 80107ae:	2201      	movs	r2, #1
 80107b0:	6a2b      	ldr	r3, [r5, #32]
 80107b2:	4393      	bics	r3, r2
 80107b4:	622b      	str	r3, [r5, #32]
 80107b6:	6a2b      	ldr	r3, [r5, #32]
 80107b8:	3203      	adds	r2, #3
 80107ba:	4393      	bics	r3, r2
 80107bc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80107be:	f7fe fa57 	bl	800ec70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107c2:	4e28      	ldr	r6, [pc, #160]	; (8010864 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 80107c4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107c6:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80107c8:	4f2b      	ldr	r7, [pc, #172]	; (8010878 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107ca:	e005      	b.n	80107d8 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80107cc:	f7fe fa50 	bl	800ec70 <HAL_GetTick>
 80107d0:	4643      	mov	r3, r8
 80107d2:	1ac0      	subs	r0, r0, r3
 80107d4:	42b8      	cmp	r0, r7
 80107d6:	d820      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80107d8:	6a33      	ldr	r3, [r6, #32]
 80107da:	421d      	tst	r5, r3
 80107dc:	d0f6      	beq.n	80107cc <HAL_RCC_OscConfig+0x28c>
 80107de:	6823      	ldr	r3, [r4, #0]
 80107e0:	e732      	b.n	8010648 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80107e2:	684a      	ldr	r2, [r1, #4]
 80107e4:	21c0      	movs	r1, #192	; 0xc0
 80107e6:	0249      	lsls	r1, r1, #9
 80107e8:	400a      	ands	r2, r1
 80107ea:	2180      	movs	r1, #128	; 0x80
 80107ec:	0209      	lsls	r1, r1, #8
 80107ee:	428a      	cmp	r2, r1
 80107f0:	d000      	beq.n	80107f4 <HAL_RCC_OscConfig+0x2b4>
 80107f2:	e706      	b.n	8010602 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107f4:	4a1b      	ldr	r2, [pc, #108]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 80107f6:	6812      	ldr	r2, [r2, #0]
 80107f8:	0792      	lsls	r2, r2, #30
 80107fa:	d526      	bpl.n	801084a <HAL_RCC_OscConfig+0x30a>
 80107fc:	68e2      	ldr	r2, [r4, #12]
 80107fe:	2a01      	cmp	r2, #1
 8010800:	d023      	beq.n	801084a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8010802:	2001      	movs	r0, #1
 8010804:	e00a      	b.n	801081c <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010806:	4a17      	ldr	r2, [pc, #92]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 8010808:	6812      	ldr	r2, [r2, #0]
 801080a:	0392      	lsls	r2, r2, #14
 801080c:	d400      	bmi.n	8010810 <HAL_RCC_OscConfig+0x2d0>
 801080e:	e6eb      	b.n	80105e8 <HAL_RCC_OscConfig+0xa8>
 8010810:	6862      	ldr	r2, [r4, #4]
 8010812:	2a00      	cmp	r2, #0
 8010814:	d000      	beq.n	8010818 <HAL_RCC_OscConfig+0x2d8>
 8010816:	e6e7      	b.n	80105e8 <HAL_RCC_OscConfig+0xa8>
 8010818:	e7f3      	b.n	8010802 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801081a:	2003      	movs	r0, #3
}
 801081c:	b002      	add	sp, #8
 801081e:	bc04      	pop	{r2}
 8010820:	4690      	mov	r8, r2
 8010822:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8010824:	2201      	movs	r2, #1
 8010826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010828:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 801082a:	4393      	bics	r3, r2
 801082c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801082e:	f7fe fa1f 	bl	800ec70 <HAL_GetTick>
 8010832:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010834:	e004      	b.n	8010840 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010836:	f7fe fa1b 	bl	800ec70 <HAL_GetTick>
 801083a:	1bc0      	subs	r0, r0, r7
 801083c:	2864      	cmp	r0, #100	; 0x64
 801083e:	d8ec      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010840:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010842:	421e      	tst	r6, r3
 8010844:	d1f7      	bne.n	8010836 <HAL_RCC_OscConfig+0x2f6>
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	e771      	b.n	801072e <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801084a:	25f8      	movs	r5, #248	; 0xf8
 801084c:	4805      	ldr	r0, [pc, #20]	; (8010864 <HAL_RCC_OscConfig+0x324>)
 801084e:	6922      	ldr	r2, [r4, #16]
 8010850:	6801      	ldr	r1, [r0, #0]
 8010852:	00d2      	lsls	r2, r2, #3
 8010854:	43a9      	bics	r1, r5
 8010856:	430a      	orrs	r2, r1
 8010858:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801085a:	071a      	lsls	r2, r3, #28
 801085c:	d400      	bmi.n	8010860 <HAL_RCC_OscConfig+0x320>
 801085e:	e6f1      	b.n	8010644 <HAL_RCC_OscConfig+0x104>
 8010860:	e74e      	b.n	8010700 <HAL_RCC_OscConfig+0x1c0>
 8010862:	46c0      	nop			; (mov r8, r8)
 8010864:	40021000 	.word	0x40021000
 8010868:	fffeffff 	.word	0xfffeffff
 801086c:	fffbffff 	.word	0xfffbffff
 8010870:	feffffff 	.word	0xfeffffff
 8010874:	40007000 	.word	0x40007000
 8010878:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 801087c:	2201      	movs	r2, #1
 801087e:	4d7b      	ldr	r5, [pc, #492]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010880:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8010882:	682b      	ldr	r3, [r5, #0]
 8010884:	4393      	bics	r3, r2
 8010886:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010888:	f7fe f9f2 	bl	800ec70 <HAL_GetTick>
 801088c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801088e:	e004      	b.n	801089a <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010890:	f7fe f9ee 	bl	800ec70 <HAL_GetTick>
 8010894:	1bc0      	subs	r0, r0, r7
 8010896:	2864      	cmp	r0, #100	; 0x64
 8010898:	d8bf      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801089a:	682b      	ldr	r3, [r5, #0]
 801089c:	421e      	tst	r6, r3
 801089e:	d1f7      	bne.n	8010890 <HAL_RCC_OscConfig+0x350>
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	e6cd      	b.n	8010640 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 80108a4:	2204      	movs	r2, #4
 80108a6:	4d71      	ldr	r5, [pc, #452]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80108a8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80108aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80108ac:	4313      	orrs	r3, r2
 80108ae:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80108b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80108b2:	3a03      	subs	r2, #3
 80108b4:	4393      	bics	r3, r2
 80108b6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80108b8:	f7fe f9da 	bl	800ec70 <HAL_GetTick>
 80108bc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80108be:	e004      	b.n	80108ca <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80108c0:	f7fe f9d6 	bl	800ec70 <HAL_GetTick>
 80108c4:	1bc0      	subs	r0, r0, r7
 80108c6:	2864      	cmp	r0, #100	; 0x64
 80108c8:	d8a7      	bhi.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80108ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80108cc:	421e      	tst	r6, r3
 80108ce:	d1f7      	bne.n	80108c0 <HAL_RCC_OscConfig+0x380>
 80108d0:	6823      	ldr	r3, [r4, #0]
 80108d2:	e6ce      	b.n	8010672 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80108d4:	2380      	movs	r3, #128	; 0x80
 80108d6:	682a      	ldr	r2, [r5, #0]
 80108d8:	02db      	lsls	r3, r3, #11
 80108da:	4313      	orrs	r3, r2
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	2380      	movs	r3, #128	; 0x80
 80108e0:	682a      	ldr	r2, [r5, #0]
 80108e2:	025b      	lsls	r3, r3, #9
 80108e4:	4313      	orrs	r3, r2
 80108e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80108e8:	f7fe f9c2 	bl	800ec70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108ec:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80108ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108f0:	4e5e      	ldr	r6, [pc, #376]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
 80108f2:	02ad      	lsls	r5, r5, #10
 80108f4:	e005      	b.n	8010902 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108f6:	f7fe f9bb 	bl	800ec70 <HAL_GetTick>
 80108fa:	1bc0      	subs	r0, r0, r7
 80108fc:	2864      	cmp	r0, #100	; 0x64
 80108fe:	d900      	bls.n	8010902 <HAL_RCC_OscConfig+0x3c2>
 8010900:	e78b      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010902:	6833      	ldr	r3, [r6, #0]
 8010904:	422b      	tst	r3, r5
 8010906:	d0f6      	beq.n	80108f6 <HAL_RCC_OscConfig+0x3b6>
 8010908:	6823      	ldr	r3, [r4, #0]
 801090a:	e66d      	b.n	80105e8 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801090c:	22c0      	movs	r2, #192	; 0xc0
 801090e:	684b      	ldr	r3, [r1, #4]
 8010910:	0252      	lsls	r2, r2, #9
 8010912:	4013      	ands	r3, r2
 8010914:	4293      	cmp	r3, r2
 8010916:	d000      	beq.n	801091a <HAL_RCC_OscConfig+0x3da>
 8010918:	e6b9      	b.n	801068e <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801091a:	4b54      	ldr	r3, [pc, #336]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
 801091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801091e:	03db      	lsls	r3, r3, #15
 8010920:	d400      	bmi.n	8010924 <HAL_RCC_OscConfig+0x3e4>
 8010922:	e6cb      	b.n	80106bc <HAL_RCC_OscConfig+0x17c>
 8010924:	69e3      	ldr	r3, [r4, #28]
 8010926:	2b01      	cmp	r3, #1
 8010928:	d100      	bne.n	801092c <HAL_RCC_OscConfig+0x3ec>
 801092a:	e6c7      	b.n	80106bc <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 801092c:	2001      	movs	r0, #1
 801092e:	e775      	b.n	801081c <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010930:	2b05      	cmp	r3, #5
 8010932:	d0cf      	beq.n	80108d4 <HAL_RCC_OscConfig+0x394>
 8010934:	682b      	ldr	r3, [r5, #0]
 8010936:	4a4e      	ldr	r2, [pc, #312]	; (8010a70 <HAL_RCC_OscConfig+0x530>)
 8010938:	4013      	ands	r3, r2
 801093a:	602b      	str	r3, [r5, #0]
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	4a4d      	ldr	r2, [pc, #308]	; (8010a74 <HAL_RCC_OscConfig+0x534>)
 8010940:	4013      	ands	r3, r2
 8010942:	602b      	str	r3, [r5, #0]
 8010944:	e7d0      	b.n	80108e8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 8010946:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010948:	4a49      	ldr	r2, [pc, #292]	; (8010a70 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801094a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 801094c:	4013      	ands	r3, r2
 801094e:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8010950:	f7fe f98e 	bl	800ec70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010954:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 8010956:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010958:	e005      	b.n	8010966 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801095a:	f7fe f989 	bl	800ec70 <HAL_GetTick>
 801095e:	1bc0      	subs	r0, r0, r7
 8010960:	2864      	cmp	r0, #100	; 0x64
 8010962:	d900      	bls.n	8010966 <HAL_RCC_OscConfig+0x426>
 8010964:	e759      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010966:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010968:	4233      	tst	r3, r6
 801096a:	d1f6      	bne.n	801095a <HAL_RCC_OscConfig+0x41a>
 801096c:	e6a6      	b.n	80106bc <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 801096e:	2104      	movs	r1, #4
 8010970:	4d3e      	ldr	r5, [pc, #248]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010972:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8010974:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010976:	430b      	orrs	r3, r1
 8010978:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801097a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801097c:	431a      	orrs	r2, r3
 801097e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8010980:	f7fe f976 	bl	800ec70 <HAL_GetTick>
 8010984:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010986:	e005      	b.n	8010994 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010988:	f7fe f972 	bl	800ec70 <HAL_GetTick>
 801098c:	1bc0      	subs	r0, r0, r7
 801098e:	2864      	cmp	r0, #100	; 0x64
 8010990:	d900      	bls.n	8010994 <HAL_RCC_OscConfig+0x454>
 8010992:	e742      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8010994:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010996:	421e      	tst	r6, r3
 8010998:	d0f6      	beq.n	8010988 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801099a:	21f8      	movs	r1, #248	; 0xf8
 801099c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801099e:	69a3      	ldr	r3, [r4, #24]
 80109a0:	438a      	bics	r2, r1
 80109a2:	00db      	lsls	r3, r3, #3
 80109a4:	4313      	orrs	r3, r2
 80109a6:	636b      	str	r3, [r5, #52]	; 0x34
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	e662      	b.n	8010672 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	4a32      	ldr	r2, [pc, #200]	; (8010a78 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109b0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80109b2:	4013      	ands	r3, r2
 80109b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80109b6:	f7fe f95b 	bl	800ec70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109ba:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80109bc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109be:	e005      	b.n	80109cc <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80109c0:	f7fe f956 	bl	800ec70 <HAL_GetTick>
 80109c4:	1bc0      	subs	r0, r0, r7
 80109c6:	2864      	cmp	r0, #100	; 0x64
 80109c8:	d900      	bls.n	80109cc <HAL_RCC_OscConfig+0x48c>
 80109ca:	e726      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	4233      	tst	r3, r6
 80109d0:	d1f6      	bne.n	80109c0 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109d2:	220f      	movs	r2, #15
 80109d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80109d6:	4393      	bics	r3, r2
 80109d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80109da:	4313      	orrs	r3, r2
 80109dc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80109de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80109e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109e2:	686a      	ldr	r2, [r5, #4]
 80109e4:	430b      	orrs	r3, r1
 80109e6:	4925      	ldr	r1, [pc, #148]	; (8010a7c <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80109e8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109ea:	400a      	ands	r2, r1
 80109ec:	4313      	orrs	r3, r2
 80109ee:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80109f0:	2380      	movs	r3, #128	; 0x80
 80109f2:	682a      	ldr	r2, [r5, #0]
 80109f4:	045b      	lsls	r3, r3, #17
 80109f6:	4313      	orrs	r3, r2
 80109f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80109fa:	f7fe f939 	bl	800ec70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80109fe:	4d1b      	ldr	r5, [pc, #108]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8010a00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010a02:	04a4      	lsls	r4, r4, #18
 8010a04:	e005      	b.n	8010a12 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a06:	f7fe f933 	bl	800ec70 <HAL_GetTick>
 8010a0a:	1b80      	subs	r0, r0, r6
 8010a0c:	2864      	cmp	r0, #100	; 0x64
 8010a0e:	d900      	bls.n	8010a12 <HAL_RCC_OscConfig+0x4d2>
 8010a10:	e703      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010a12:	682b      	ldr	r3, [r5, #0]
 8010a14:	4223      	tst	r3, r4
 8010a16:	d0f6      	beq.n	8010a06 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8010a18:	2000      	movs	r0, #0
 8010a1a:	e6ff      	b.n	801081c <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a20:	4e12      	ldr	r6, [pc, #72]	; (8010a6c <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a22:	4393      	bics	r3, r2
 8010a24:	622b      	str	r3, [r5, #32]
 8010a26:	6a2b      	ldr	r3, [r5, #32]
 8010a28:	3203      	adds	r2, #3
 8010a2a:	4393      	bics	r3, r2
 8010a2c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8010a2e:	f7fe f91f 	bl	800ec70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a32:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8010a34:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a36:	4f12      	ldr	r7, [pc, #72]	; (8010a80 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a38:	e006      	b.n	8010a48 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a3a:	f7fe f919 	bl	800ec70 <HAL_GetTick>
 8010a3e:	4643      	mov	r3, r8
 8010a40:	1ac0      	subs	r0, r0, r3
 8010a42:	42b8      	cmp	r0, r7
 8010a44:	d900      	bls.n	8010a48 <HAL_RCC_OscConfig+0x508>
 8010a46:	e6e8      	b.n	801081a <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010a48:	6a33      	ldr	r3, [r6, #32]
 8010a4a:	421d      	tst	r5, r3
 8010a4c:	d1f5      	bne.n	8010a3a <HAL_RCC_OscConfig+0x4fa>
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	e5fa      	b.n	8010648 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010a52:	6a2a      	ldr	r2, [r5, #32]
 8010a54:	4313      	orrs	r3, r2
 8010a56:	622b      	str	r3, [r5, #32]
 8010a58:	e6b1      	b.n	80107be <HAL_RCC_OscConfig+0x27e>
 8010a5a:	2204      	movs	r2, #4
 8010a5c:	6a2b      	ldr	r3, [r5, #32]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	622b      	str	r3, [r5, #32]
 8010a62:	6a2b      	ldr	r3, [r5, #32]
 8010a64:	3a03      	subs	r2, #3
 8010a66:	4313      	orrs	r3, r2
 8010a68:	622b      	str	r3, [r5, #32]
 8010a6a:	e6a8      	b.n	80107be <HAL_RCC_OscConfig+0x27e>
 8010a6c:	40021000 	.word	0x40021000
 8010a70:	fffeffff 	.word	0xfffeffff
 8010a74:	fffbffff 	.word	0xfffbffff
 8010a78:	feffffff 	.word	0xfeffffff
 8010a7c:	ffc27fff 	.word	0xffc27fff
 8010a80:	00001388 	.word	0x00001388

08010a84 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a86:	46ce      	mov	lr, r9
 8010a88:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a8a:	2301      	movs	r3, #1
{
 8010a8c:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a8e:	4985      	ldr	r1, [pc, #532]	; (8010ca4 <HAL_RCC_ClockConfig+0x220>)
{
 8010a90:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a92:	680a      	ldr	r2, [r1, #0]
{
 8010a94:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8010a96:	401a      	ands	r2, r3
 8010a98:	42a2      	cmp	r2, r4
 8010a9a:	d20c      	bcs.n	8010ab6 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a9c:	680a      	ldr	r2, [r1, #0]
 8010a9e:	439a      	bics	r2, r3
 8010aa0:	4322      	orrs	r2, r4
 8010aa2:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010aa4:	680a      	ldr	r2, [r1, #0]
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	42a3      	cmp	r3, r4
 8010aaa:	d054      	beq.n	8010b56 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 8010aac:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8010aae:	bc0c      	pop	{r2, r3}
 8010ab0:	4690      	mov	r8, r2
 8010ab2:	4699      	mov	r9, r3
 8010ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010ab6:	6803      	ldr	r3, [r0, #0]
 8010ab8:	079a      	lsls	r2, r3, #30
 8010aba:	d506      	bpl.n	8010aca <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010abc:	20f0      	movs	r0, #240	; 0xf0
 8010abe:	497a      	ldr	r1, [pc, #488]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
 8010ac0:	684a      	ldr	r2, [r1, #4]
 8010ac2:	4382      	bics	r2, r0
 8010ac4:	68a8      	ldr	r0, [r5, #8]
 8010ac6:	4302      	orrs	r2, r0
 8010ac8:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010aca:	07db      	lsls	r3, r3, #31
 8010acc:	d52a      	bpl.n	8010b24 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ace:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ad0:	4a75      	ldr	r2, [pc, #468]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d073      	beq.n	8010bbe <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	d075      	beq.n	8010bc6 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d100      	bne.n	8010ae0 <HAL_RCC_ClockConfig+0x5c>
 8010ade:	e09c      	b.n	8010c1a <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010ae0:	6812      	ldr	r2, [r2, #0]
 8010ae2:	0792      	lsls	r2, r2, #30
 8010ae4:	d5e2      	bpl.n	8010aac <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010ae6:	2103      	movs	r1, #3
 8010ae8:	4e6f      	ldr	r6, [pc, #444]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
 8010aea:	6872      	ldr	r2, [r6, #4]
 8010aec:	438a      	bics	r2, r1
 8010aee:	4313      	orrs	r3, r2
 8010af0:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8010af2:	f7fe f8bd 	bl	800ec70 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010af6:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010af8:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d07d      	beq.n	8010bfa <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d100      	bne.n	8010b04 <HAL_RCC_ClockConfig+0x80>
 8010b02:	e093      	b.n	8010c2c <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010b04:	2b03      	cmp	r3, #3
 8010b06:	d066      	beq.n	8010bd6 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010b08:	230c      	movs	r3, #12
 8010b0a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010b0c:	4b67      	ldr	r3, [pc, #412]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010b0e:	4699      	mov	r9, r3
 8010b10:	e004      	b.n	8010b1c <HAL_RCC_ClockConfig+0x98>
 8010b12:	f7fe f8ad 	bl	800ec70 <HAL_GetTick>
 8010b16:	1bc0      	subs	r0, r0, r7
 8010b18:	4548      	cmp	r0, r9
 8010b1a:	d86c      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010b1c:	4642      	mov	r2, r8
 8010b1e:	6873      	ldr	r3, [r6, #4]
 8010b20:	421a      	tst	r2, r3
 8010b22:	d1f6      	bne.n	8010b12 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b24:	2201      	movs	r2, #1
 8010b26:	495f      	ldr	r1, [pc, #380]	; (8010ca4 <HAL_RCC_ClockConfig+0x220>)
 8010b28:	680b      	ldr	r3, [r1, #0]
 8010b2a:	4393      	bics	r3, r2
 8010b2c:	4323      	orrs	r3, r4
 8010b2e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010b30:	680b      	ldr	r3, [r1, #0]
 8010b32:	401a      	ands	r2, r3
 8010b34:	42a2      	cmp	r2, r4
 8010b36:	d1b9      	bne.n	8010aac <HAL_RCC_ClockConfig+0x28>
 8010b38:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b3a:	075b      	lsls	r3, r3, #29
 8010b3c:	d506      	bpl.n	8010b4c <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010b3e:	4a5a      	ldr	r2, [pc, #360]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
 8010b40:	495b      	ldr	r1, [pc, #364]	; (8010cb0 <HAL_RCC_ClockConfig+0x22c>)
 8010b42:	6853      	ldr	r3, [r2, #4]
 8010b44:	400b      	ands	r3, r1
 8010b46:	68e9      	ldr	r1, [r5, #12]
 8010b48:	430b      	orrs	r3, r1
 8010b4a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	f7fe f865 	bl	800ec1c <HAL_InitTick>
  return HAL_OK;
 8010b52:	2000      	movs	r0, #0
 8010b54:	e7ab      	b.n	8010aae <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b56:	6803      	ldr	r3, [r0, #0]
 8010b58:	079a      	lsls	r2, r3, #30
 8010b5a:	d506      	bpl.n	8010b6a <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010b5c:	20f0      	movs	r0, #240	; 0xf0
 8010b5e:	4952      	ldr	r1, [pc, #328]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
 8010b60:	684a      	ldr	r2, [r1, #4]
 8010b62:	4382      	bics	r2, r0
 8010b64:	68a8      	ldr	r0, [r5, #8]
 8010b66:	4302      	orrs	r2, r0
 8010b68:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010b6a:	07da      	lsls	r2, r3, #31
 8010b6c:	d5e5      	bpl.n	8010b3a <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b6e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b70:	4a4d      	ldr	r2, [pc, #308]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d056      	beq.n	8010c24 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010b76:	2b02      	cmp	r3, #2
 8010b78:	d029      	beq.n	8010bce <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010b7a:	2b03      	cmp	r3, #3
 8010b7c:	d073      	beq.n	8010c66 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010b7e:	6812      	ldr	r2, [r2, #0]
 8010b80:	0792      	lsls	r2, r2, #30
 8010b82:	d593      	bpl.n	8010aac <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010b84:	2103      	movs	r1, #3
 8010b86:	4c48      	ldr	r4, [pc, #288]	; (8010ca8 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010b88:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010b8a:	6862      	ldr	r2, [r4, #4]
 8010b8c:	438a      	bics	r2, r1
 8010b8e:	4313      	orrs	r3, r2
 8010b90:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8010b92:	f7fe f86d 	bl	800ec70 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b96:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8010b98:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d056      	beq.n	8010c4c <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	d065      	beq.n	8010c6e <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	d070      	beq.n	8010c88 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ba6:	4b41      	ldr	r3, [pc, #260]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010ba8:	4698      	mov	r8, r3
 8010baa:	e004      	b.n	8010bb6 <HAL_RCC_ClockConfig+0x132>
 8010bac:	f7fe f860 	bl	800ec70 <HAL_GetTick>
 8010bb0:	1b80      	subs	r0, r0, r6
 8010bb2:	4540      	cmp	r0, r8
 8010bb4:	d81f      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010bb6:	6863      	ldr	r3, [r4, #4]
 8010bb8:	421f      	tst	r7, r3
 8010bba:	d1f7      	bne.n	8010bac <HAL_RCC_ClockConfig+0x128>
 8010bbc:	e7bc      	b.n	8010b38 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010bbe:	6812      	ldr	r2, [r2, #0]
 8010bc0:	0392      	lsls	r2, r2, #14
 8010bc2:	d490      	bmi.n	8010ae6 <HAL_RCC_ClockConfig+0x62>
 8010bc4:	e772      	b.n	8010aac <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bc6:	6812      	ldr	r2, [r2, #0]
 8010bc8:	0192      	lsls	r2, r2, #6
 8010bca:	d48c      	bmi.n	8010ae6 <HAL_RCC_ClockConfig+0x62>
 8010bcc:	e76e      	b.n	8010aac <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bce:	6812      	ldr	r2, [r2, #0]
 8010bd0:	0192      	lsls	r2, r2, #6
 8010bd2:	d4d7      	bmi.n	8010b84 <HAL_RCC_ClockConfig+0x100>
 8010bd4:	e76a      	b.n	8010aac <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010bd6:	3309      	adds	r3, #9
 8010bd8:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010bda:	4b34      	ldr	r3, [pc, #208]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010bdc:	4699      	mov	r9, r3
 8010bde:	e004      	b.n	8010bea <HAL_RCC_ClockConfig+0x166>
 8010be0:	f7fe f846 	bl	800ec70 <HAL_GetTick>
 8010be4:	1bc0      	subs	r0, r0, r7
 8010be6:	4548      	cmp	r0, r9
 8010be8:	d805      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010bea:	4642      	mov	r2, r8
 8010bec:	6873      	ldr	r3, [r6, #4]
 8010bee:	4013      	ands	r3, r2
 8010bf0:	2b0c      	cmp	r3, #12
 8010bf2:	d1f5      	bne.n	8010be0 <HAL_RCC_ClockConfig+0x15c>
 8010bf4:	e796      	b.n	8010b24 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8010bf6:	2003      	movs	r0, #3
 8010bf8:	e759      	b.n	8010aae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010bfa:	330b      	adds	r3, #11
 8010bfc:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010bfe:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010c00:	4699      	mov	r9, r3
 8010c02:	e004      	b.n	8010c0e <HAL_RCC_ClockConfig+0x18a>
 8010c04:	f7fe f834 	bl	800ec70 <HAL_GetTick>
 8010c08:	1bc0      	subs	r0, r0, r7
 8010c0a:	4548      	cmp	r0, r9
 8010c0c:	d8f3      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c0e:	4642      	mov	r2, r8
 8010c10:	6873      	ldr	r3, [r6, #4]
 8010c12:	4013      	ands	r3, r2
 8010c14:	2b04      	cmp	r3, #4
 8010c16:	d1f5      	bne.n	8010c04 <HAL_RCC_ClockConfig+0x180>
 8010c18:	e784      	b.n	8010b24 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010c1c:	03d2      	lsls	r2, r2, #15
 8010c1e:	d500      	bpl.n	8010c22 <HAL_RCC_ClockConfig+0x19e>
 8010c20:	e761      	b.n	8010ae6 <HAL_RCC_ClockConfig+0x62>
 8010c22:	e743      	b.n	8010aac <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010c24:	6812      	ldr	r2, [r2, #0]
 8010c26:	0392      	lsls	r2, r2, #14
 8010c28:	d4ac      	bmi.n	8010b84 <HAL_RCC_ClockConfig+0x100>
 8010c2a:	e73f      	b.n	8010aac <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c2c:	330a      	adds	r3, #10
 8010c2e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c30:	4b1e      	ldr	r3, [pc, #120]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010c32:	4699      	mov	r9, r3
 8010c34:	e004      	b.n	8010c40 <HAL_RCC_ClockConfig+0x1bc>
 8010c36:	f7fe f81b 	bl	800ec70 <HAL_GetTick>
 8010c3a:	1bc0      	subs	r0, r0, r7
 8010c3c:	4548      	cmp	r0, r9
 8010c3e:	d8da      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c40:	4642      	mov	r2, r8
 8010c42:	6873      	ldr	r3, [r6, #4]
 8010c44:	4013      	ands	r3, r2
 8010c46:	2b08      	cmp	r3, #8
 8010c48:	d1f5      	bne.n	8010c36 <HAL_RCC_ClockConfig+0x1b2>
 8010c4a:	e76b      	b.n	8010b24 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c4c:	4b17      	ldr	r3, [pc, #92]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010c4e:	4698      	mov	r8, r3
 8010c50:	e004      	b.n	8010c5c <HAL_RCC_ClockConfig+0x1d8>
 8010c52:	f7fe f80d 	bl	800ec70 <HAL_GetTick>
 8010c56:	1b80      	subs	r0, r0, r6
 8010c58:	4540      	cmp	r0, r8
 8010c5a:	d8cc      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c5c:	6863      	ldr	r3, [r4, #4]
 8010c5e:	403b      	ands	r3, r7
 8010c60:	2b04      	cmp	r3, #4
 8010c62:	d1f6      	bne.n	8010c52 <HAL_RCC_ClockConfig+0x1ce>
 8010c64:	e768      	b.n	8010b38 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010c66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010c68:	03d2      	lsls	r2, r2, #15
 8010c6a:	d48b      	bmi.n	8010b84 <HAL_RCC_ClockConfig+0x100>
 8010c6c:	e71e      	b.n	8010aac <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c6e:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010c70:	4698      	mov	r8, r3
 8010c72:	e004      	b.n	8010c7e <HAL_RCC_ClockConfig+0x1fa>
 8010c74:	f7fd fffc 	bl	800ec70 <HAL_GetTick>
 8010c78:	1b80      	subs	r0, r0, r6
 8010c7a:	4540      	cmp	r0, r8
 8010c7c:	d8bb      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010c7e:	6863      	ldr	r3, [r4, #4]
 8010c80:	403b      	ands	r3, r7
 8010c82:	2b08      	cmp	r3, #8
 8010c84:	d1f6      	bne.n	8010c74 <HAL_RCC_ClockConfig+0x1f0>
 8010c86:	e757      	b.n	8010b38 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c88:	4b08      	ldr	r3, [pc, #32]	; (8010cac <HAL_RCC_ClockConfig+0x228>)
 8010c8a:	4698      	mov	r8, r3
 8010c8c:	e004      	b.n	8010c98 <HAL_RCC_ClockConfig+0x214>
 8010c8e:	f7fd ffef 	bl	800ec70 <HAL_GetTick>
 8010c92:	1b80      	subs	r0, r0, r6
 8010c94:	4540      	cmp	r0, r8
 8010c96:	d8ae      	bhi.n	8010bf6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010c98:	6863      	ldr	r3, [r4, #4]
 8010c9a:	403b      	ands	r3, r7
 8010c9c:	2b0c      	cmp	r3, #12
 8010c9e:	d1f6      	bne.n	8010c8e <HAL_RCC_ClockConfig+0x20a>
 8010ca0:	e74a      	b.n	8010b38 <HAL_RCC_ClockConfig+0xb4>
 8010ca2:	46c0      	nop			; (mov r8, r8)
 8010ca4:	40022000 	.word	0x40022000
 8010ca8:	40021000 	.word	0x40021000
 8010cac:	00001388 	.word	0x00001388
 8010cb0:	fffff8ff 	.word	0xfffff8ff

08010cb4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010cb8:	4669      	mov	r1, sp
 8010cba:	4b1c      	ldr	r3, [pc, #112]	; (8010d2c <HAL_RCC_GetSysClockFreq+0x78>)
 8010cbc:	000a      	movs	r2, r1
 8010cbe:	0018      	movs	r0, r3
 8010cc0:	c870      	ldmia	r0!, {r4, r5, r6}
 8010cc2:	c270      	stmia	r2!, {r4, r5, r6}
 8010cc4:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010cc6:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010cc8:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010cca:	aa04      	add	r2, sp, #16
 8010ccc:	0010      	movs	r0, r2
 8010cce:	cb70      	ldmia	r3!, {r4, r5, r6}
 8010cd0:	c070      	stmia	r0!, {r4, r5, r6}
 8010cd2:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010cd4:	4d16      	ldr	r5, [pc, #88]	; (8010d30 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010cd6:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010cd8:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8010cda:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8010cdc:	4018      	ands	r0, r3
 8010cde:	2808      	cmp	r0, #8
 8010ce0:	d00a      	beq.n	8010cf8 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010ce2:	380c      	subs	r0, #12
 8010ce4:	4243      	negs	r3, r0
 8010ce6:	4158      	adcs	r0, r3
 8010ce8:	4b12      	ldr	r3, [pc, #72]	; (8010d34 <HAL_RCC_GetSysClockFreq+0x80>)
 8010cea:	4240      	negs	r0, r0
 8010cec:	4018      	ands	r0, r3
 8010cee:	4b12      	ldr	r3, [pc, #72]	; (8010d38 <HAL_RCC_GetSysClockFreq+0x84>)
 8010cf0:	469c      	mov	ip, r3
 8010cf2:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010cf4:	b008      	add	sp, #32
 8010cf6:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010cf8:	200f      	movs	r0, #15
 8010cfa:	0c9c      	lsrs	r4, r3, #18
 8010cfc:	4004      	ands	r4, r0
 8010cfe:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010d00:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8010d02:	4008      	ands	r0, r1
 8010d04:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010d06:	22c0      	movs	r2, #192	; 0xc0
 8010d08:	2080      	movs	r0, #128	; 0x80
 8010d0a:	0252      	lsls	r2, r2, #9
 8010d0c:	4013      	ands	r3, r2
 8010d0e:	0240      	lsls	r0, r0, #9
 8010d10:	4283      	cmp	r3, r0
 8010d12:	d001      	beq.n	8010d18 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d004      	beq.n	8010d22 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010d18:	4807      	ldr	r0, [pc, #28]	; (8010d38 <HAL_RCC_GetSysClockFreq+0x84>)
 8010d1a:	f7ef fa19 	bl	8000150 <__udivsi3>
 8010d1e:	4360      	muls	r0, r4
 8010d20:	e7e8      	b.n	8010cf4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8010d22:	4806      	ldr	r0, [pc, #24]	; (8010d3c <HAL_RCC_GetSysClockFreq+0x88>)
 8010d24:	f7ef fa14 	bl	8000150 <__udivsi3>
 8010d28:	4360      	muls	r0, r4
 8010d2a:	e7e3      	b.n	8010cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8010d2c:	080170f4 	.word	0x080170f4
 8010d30:	40021000 	.word	0x40021000
 8010d34:	02625a00 	.word	0x02625a00
 8010d38:	007a1200 	.word	0x007a1200
 8010d3c:	02dc6c00 	.word	0x02dc6c00

08010d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010d40:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010d42:	f7ff ffb7 	bl	8010cb4 <HAL_RCC_GetSysClockFreq>
 8010d46:	4b05      	ldr	r3, [pc, #20]	; (8010d5c <HAL_RCC_GetHCLKFreq+0x1c>)
 8010d48:	4a05      	ldr	r2, [pc, #20]	; (8010d60 <HAL_RCC_GetHCLKFreq+0x20>)
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	3220      	adds	r2, #32
 8010d4e:	061b      	lsls	r3, r3, #24
 8010d50:	0f1b      	lsrs	r3, r3, #28
 8010d52:	5cd3      	ldrb	r3, [r2, r3]
 8010d54:	40d8      	lsrs	r0, r3
 8010d56:	4b03      	ldr	r3, [pc, #12]	; (8010d64 <HAL_RCC_GetHCLKFreq+0x24>)
 8010d58:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010d5a:	bd10      	pop	{r4, pc}
 8010d5c:	40021000 	.word	0x40021000
 8010d60:	080170f4 	.word	0x080170f4
 8010d64:	200000b4 	.word	0x200000b4

08010d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010d68:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8010d6a:	f7ff ffa3 	bl	8010cb4 <HAL_RCC_GetSysClockFreq>
 8010d6e:	4908      	ldr	r1, [pc, #32]	; (8010d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010d70:	4a08      	ldr	r2, [pc, #32]	; (8010d94 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8010d72:	684b      	ldr	r3, [r1, #4]
 8010d74:	3220      	adds	r2, #32
 8010d76:	061b      	lsls	r3, r3, #24
 8010d78:	0f1b      	lsrs	r3, r3, #28
 8010d7a:	5cd3      	ldrb	r3, [r2, r3]
 8010d7c:	40d8      	lsrs	r0, r3
 8010d7e:	4b06      	ldr	r3, [pc, #24]	; (8010d98 <HAL_RCC_GetPCLK1Freq+0x30>)
 8010d80:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8010d82:	684b      	ldr	r3, [r1, #4]
 8010d84:	055b      	lsls	r3, r3, #21
 8010d86:	0f5b      	lsrs	r3, r3, #29
 8010d88:	5cd3      	ldrb	r3, [r2, r3]
 8010d8a:	40d8      	lsrs	r0, r3
}    
 8010d8c:	bd10      	pop	{r4, pc}
 8010d8e:	46c0      	nop			; (mov r8, r8)
 8010d90:	40021000 	.word	0x40021000
 8010d94:	080170f4 	.word	0x080170f4
 8010d98:	200000b4 	.word	0x200000b4

08010d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d9e:	46c6      	mov	lr, r8
 8010da0:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010da2:	6803      	ldr	r3, [r0, #0]
{
 8010da4:	b082      	sub	sp, #8
 8010da6:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010da8:	03da      	lsls	r2, r3, #15
 8010daa:	d507      	bpl.n	8010dbc <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010dac:	493e      	ldr	r1, [pc, #248]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dae:	6840      	ldr	r0, [r0, #4]
 8010db0:	6a0a      	ldr	r2, [r1, #32]
 8010db2:	4042      	eors	r2, r0
 8010db4:	20c0      	movs	r0, #192	; 0xc0
 8010db6:	0080      	lsls	r0, r0, #2
 8010db8:	4202      	tst	r2, r0
 8010dba:	d131      	bne.n	8010e20 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010dbc:	07da      	lsls	r2, r3, #31
 8010dbe:	d506      	bpl.n	8010dce <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010dc0:	2003      	movs	r0, #3
 8010dc2:	4939      	ldr	r1, [pc, #228]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dc4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010dc6:	4382      	bics	r2, r0
 8010dc8:	68a0      	ldr	r0, [r4, #8]
 8010dca:	4302      	orrs	r2, r0
 8010dcc:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010dce:	079a      	lsls	r2, r3, #30
 8010dd0:	d506      	bpl.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010dd2:	4935      	ldr	r1, [pc, #212]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dd4:	4835      	ldr	r0, [pc, #212]	; (8010eac <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8010dd6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010dd8:	4002      	ands	r2, r0
 8010dda:	68e0      	ldr	r0, [r4, #12]
 8010ddc:	4302      	orrs	r2, r0
 8010dde:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010de0:	035a      	lsls	r2, r3, #13
 8010de2:	d506      	bpl.n	8010df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010de4:	4930      	ldr	r1, [pc, #192]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010de6:	4832      	ldr	r0, [pc, #200]	; (8010eb0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8010de8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010dea:	4002      	ands	r2, r0
 8010dec:	6920      	ldr	r0, [r4, #16]
 8010dee:	4302      	orrs	r2, r0
 8010df0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010df2:	069a      	lsls	r2, r3, #26
 8010df4:	d506      	bpl.n	8010e04 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010df6:	2010      	movs	r0, #16
 8010df8:	492b      	ldr	r1, [pc, #172]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010dfa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010dfc:	4382      	bics	r2, r0
 8010dfe:	6960      	ldr	r0, [r4, #20]
 8010e00:	4302      	orrs	r2, r0
 8010e02:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8010e04:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010e06:	055b      	lsls	r3, r3, #21
 8010e08:	d506      	bpl.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010e0a:	2140      	movs	r1, #64	; 0x40
 8010e0c:	4a26      	ldr	r2, [pc, #152]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010e0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010e10:	438b      	bics	r3, r1
 8010e12:	69a1      	ldr	r1, [r4, #24]
 8010e14:	430b      	orrs	r3, r1
 8010e16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8010e18:	b002      	add	sp, #8
 8010e1a:	bc04      	pop	{r2}
 8010e1c:	4690      	mov	r8, r2
 8010e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e20:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010e22:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e24:	69ca      	ldr	r2, [r1, #28]
 8010e26:	0540      	lsls	r0, r0, #21
 8010e28:	4302      	orrs	r2, r0
 8010e2a:	61ca      	str	r2, [r1, #28]
 8010e2c:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010e2e:	4d21      	ldr	r5, [pc, #132]	; (8010eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e30:	4003      	ands	r3, r0
 8010e32:	9301      	str	r3, [sp, #4]
 8010e34:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010e36:	682b      	ldr	r3, [r5, #0]
 8010e38:	0076      	lsls	r6, r6, #1
 8010e3a:	4333      	orrs	r3, r6
 8010e3c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010e3e:	f7fd ff17 	bl	800ec70 <HAL_GetTick>
 8010e42:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010e44:	e004      	b.n	8010e50 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010e46:	f7fd ff13 	bl	800ec70 <HAL_GetTick>
 8010e4a:	1bc0      	subs	r0, r0, r7
 8010e4c:	2864      	cmp	r0, #100	; 0x64
 8010e4e:	d829      	bhi.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010e50:	682b      	ldr	r3, [r5, #0]
 8010e52:	4233      	tst	r3, r6
 8010e54:	d0f7      	beq.n	8010e46 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e56:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e58:	4d13      	ldr	r5, [pc, #76]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e5a:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e5c:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e5e:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e60:	4b15      	ldr	r3, [pc, #84]	; (8010eb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8010e62:	4302      	orrs	r2, r0
 8010e64:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010e66:	6a2a      	ldr	r2, [r5, #32]
 8010e68:	4814      	ldr	r0, [pc, #80]	; (8010ebc <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010e6a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010e6c:	4002      	ands	r2, r0
 8010e6e:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8010e70:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8010e72:	078b      	lsls	r3, r1, #30
 8010e74:	d408      	bmi.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8010e76:	4a0c      	ldr	r2, [pc, #48]	; (8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8010e78:	490f      	ldr	r1, [pc, #60]	; (8010eb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8010e7a:	6a13      	ldr	r3, [r2, #32]
 8010e7c:	400b      	ands	r3, r1
 8010e7e:	6861      	ldr	r1, [r4, #4]
 8010e80:	430b      	orrs	r3, r1
 8010e82:	6213      	str	r3, [r2, #32]
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	e799      	b.n	8010dbc <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8010e88:	f7fd fef2 	bl	800ec70 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e8c:	4b0c      	ldr	r3, [pc, #48]	; (8010ec0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8010e8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010e90:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e92:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010e94:	6a2b      	ldr	r3, [r5, #32]
 8010e96:	421e      	tst	r6, r3
 8010e98:	d1ed      	bne.n	8010e76 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e9a:	f7fd fee9 	bl	800ec70 <HAL_GetTick>
 8010e9e:	1bc0      	subs	r0, r0, r7
 8010ea0:	4540      	cmp	r0, r8
 8010ea2:	d9f7      	bls.n	8010e94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8010ea4:	2003      	movs	r0, #3
 8010ea6:	e7b7      	b.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010ea8:	40021000 	.word	0x40021000
 8010eac:	fffcffff 	.word	0xfffcffff
 8010eb0:	fff3ffff 	.word	0xfff3ffff
 8010eb4:	40007000 	.word	0x40007000
 8010eb8:	fffffcff 	.word	0xfffffcff
 8010ebc:	fffeffff 	.word	0xfffeffff
 8010ec0:	00001388 	.word	0x00001388

08010ec4 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8010ec4:	4770      	bx	lr
 8010ec6:	46c0      	nop			; (mov r8, r8)

08010ec8 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010ec8:	6803      	ldr	r3, [r0, #0]
{
 8010eca:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010ecc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ece:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010ed0:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ed2:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8010ed4:	681c      	ldr	r4, [r3, #0]
 8010ed6:	4b13      	ldr	r3, [pc, #76]	; (8010f24 <HAL_RTC_GetTime+0x5c>)
 8010ed8:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010eda:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010edc:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ede:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010ee0:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010ee2:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010ee4:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010ee6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010ee8:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010eea:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010eec:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010eee:	2a00      	cmp	r2, #0
 8010ef0:	d115      	bne.n	8010f1e <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8010ef2:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010ef4:	0900      	lsrs	r0, r0, #4
 8010ef6:	0082      	lsls	r2, r0, #2
 8010ef8:	1810      	adds	r0, r2, r0
 8010efa:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010efc:	4035      	ands	r5, r6
 8010efe:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f00:	0918      	lsrs	r0, r3, #4
 8010f02:	0082      	lsls	r2, r0, #2
 8010f04:	1812      	adds	r2, r2, r0
 8010f06:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f08:	4033      	ands	r3, r6
 8010f0a:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f0c:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010f0e:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f10:	0093      	lsls	r3, r2, #2
 8010f12:	189b      	adds	r3, r3, r2
 8010f14:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f16:	4034      	ands	r4, r6
 8010f18:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010f1a:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8010f1c:	708c      	strb	r4, [r1, #2]
}
 8010f1e:	2000      	movs	r0, #0
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	46c0      	nop			; (mov r8, r8)
 8010f24:	007f7f7f 	.word	0x007f7f7f

08010f28 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010f28:	6803      	ldr	r3, [r0, #0]
 8010f2a:	4815      	ldr	r0, [pc, #84]	; (8010f80 <HAL_RTC_GetDate+0x58>)
 8010f2c:	685b      	ldr	r3, [r3, #4]
{
 8010f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010f30:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f32:	201f      	movs	r0, #31
 8010f34:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010f36:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010f38:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f3a:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010f3c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f3e:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010f40:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010f42:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010f44:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010f46:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8010f48:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8010f4a:	2a00      	cmp	r2, #0
 8010f4c:	d115      	bne.n	8010f7a <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 8010f4e:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f50:	093b      	lsrs	r3, r7, #4
 8010f52:	009a      	lsls	r2, r3, #2
 8010f54:	18d2      	adds	r2, r2, r3
 8010f56:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f58:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f5a:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8010f5c:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f5e:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010f60:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f62:	092a      	lsrs	r2, r5, #4
 8010f64:	18c0      	adds	r0, r0, r3
 8010f66:	0093      	lsls	r3, r2, #2
 8010f68:	189b      	adds	r3, r3, r2
 8010f6a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f6c:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010f6e:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8010f70:	4035      	ands	r5, r6
 8010f72:	1904      	adds	r4, r0, r4
 8010f74:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010f76:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8010f78:	708b      	strb	r3, [r1, #2]
}
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7e:	46c0      	nop			; (mov r8, r8)
 8010f80:	00ffff3f 	.word	0x00ffff3f

08010f84 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010f84:	21a0      	movs	r1, #160	; 0xa0
 8010f86:	6802      	ldr	r2, [r0, #0]
{
 8010f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010f8a:	68d3      	ldr	r3, [r2, #12]
{
 8010f8c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010f8e:	438b      	bics	r3, r1
 8010f90:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8010f92:	f7fd fe6d 	bl	800ec70 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010f96:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8010f98:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010f9a:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010f9c:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010f9e:	e004      	b.n	8010faa <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fa0:	f7fd fe66 	bl	800ec70 <HAL_GetTick>
 8010fa4:	1bc0      	subs	r0, r0, r7
 8010fa6:	42b0      	cmp	r0, r6
 8010fa8:	d805      	bhi.n	8010fb6 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	421d      	tst	r5, r3
 8010fb0:	d0f6      	beq.n	8010fa0 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8010fb2:	2000      	movs	r0, #0
}
 8010fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8010fb6:	2003      	movs	r0, #3
 8010fb8:	e7fc      	b.n	8010fb4 <HAL_RTC_WaitForSynchro+0x30>
 8010fba:	46c0      	nop			; (mov r8, r8)

08010fbc <RTC_EnterInitMode>:
{
 8010fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fbe:	6803      	ldr	r3, [r0, #0]
{
 8010fc0:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fc2:	68da      	ldr	r2, [r3, #12]
 8010fc4:	0652      	lsls	r2, r2, #25
 8010fc6:	d501      	bpl.n	8010fcc <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8010fc8:	2000      	movs	r0, #0
}
 8010fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010fcc:	2201      	movs	r2, #1
 8010fce:	4252      	negs	r2, r2
 8010fd0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8010fd2:	f7fd fe4d 	bl	800ec70 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fd6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8010fd8:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fda:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fdc:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fde:	e004      	b.n	8010fea <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010fe0:	f7fd fe46 	bl	800ec70 <HAL_GetTick>
 8010fe4:	1bc0      	subs	r0, r0, r7
 8010fe6:	42b0      	cmp	r0, r6
 8010fe8:	d804      	bhi.n	8010ff4 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	421d      	tst	r5, r3
 8010ff0:	d0f6      	beq.n	8010fe0 <RTC_EnterInitMode+0x24>
 8010ff2:	e7e9      	b.n	8010fc8 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8010ff4:	2003      	movs	r0, #3
 8010ff6:	e7e8      	b.n	8010fca <RTC_EnterInitMode+0xe>

08010ff8 <HAL_RTC_Init>:
{
 8010ff8:	b570      	push	{r4, r5, r6, lr}
 8010ffa:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8010ffc:	d03e      	beq.n	801107c <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8010ffe:	7f43      	ldrb	r3, [r0, #29]
 8011000:	b2db      	uxtb	r3, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	d036      	beq.n	8011074 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011006:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011008:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801100a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801100c:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801100e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011010:	625a      	str	r2, [r3, #36]	; 0x24
 8011012:	3a77      	subs	r2, #119	; 0x77
 8011014:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011016:	f7ff ffd1 	bl	8010fbc <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801101a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801101c:	2800      	cmp	r0, #0
 801101e:	d123      	bne.n	8011068 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011020:	689a      	ldr	r2, [r3, #8]
 8011022:	4917      	ldr	r1, [pc, #92]	; (8011080 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011024:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011026:	400a      	ands	r2, r1
 8011028:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801102a:	6862      	ldr	r2, [r4, #4]
 801102c:	6899      	ldr	r1, [r3, #8]
 801102e:	432a      	orrs	r2, r5
 8011030:	6965      	ldr	r5, [r4, #20]
 8011032:	432a      	orrs	r2, r5
 8011034:	430a      	orrs	r2, r1
 8011036:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011038:	68e2      	ldr	r2, [r4, #12]
 801103a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801103c:	68a2      	ldr	r2, [r4, #8]
 801103e:	6919      	ldr	r1, [r3, #16]
 8011040:	0412      	lsls	r2, r2, #16
 8011042:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011044:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011046:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011048:	68da      	ldr	r2, [r3, #12]
 801104a:	438a      	bics	r2, r1
 801104c:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801104e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011050:	490c      	ldr	r1, [pc, #48]	; (8011084 <HAL_RTC_Init+0x8c>)
 8011052:	400a      	ands	r2, r1
 8011054:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011058:	69a1      	ldr	r1, [r4, #24]
 801105a:	430a      	orrs	r2, r1
 801105c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801105e:	22ff      	movs	r2, #255	; 0xff
 8011060:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011062:	2301      	movs	r3, #1
 8011064:	7763      	strb	r3, [r4, #29]
}
 8011066:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011068:	22ff      	movs	r2, #255	; 0xff
 801106a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801106c:	2304      	movs	r3, #4
    return HAL_ERROR;
 801106e:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011070:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011072:	e7f8      	b.n	8011066 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011074:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011076:	f7ff ff25 	bl	8010ec4 <HAL_RTC_MspInit>
 801107a:	e7c4      	b.n	8011006 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 801107c:	2001      	movs	r0, #1
 801107e:	e7f2      	b.n	8011066 <HAL_RTC_Init+0x6e>
 8011080:	ff8fffbf 	.word	0xff8fffbf
 8011084:	fffbffff 	.word	0xfffbffff

08011088 <HAL_RTC_SetTime>:
{
 8011088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801108a:	7f03      	ldrb	r3, [r0, #28]
{
 801108c:	0004      	movs	r4, r0
 801108e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011090:	2b01      	cmp	r3, #1
 8011092:	d100      	bne.n	8011096 <HAL_RTC_SetTime+0xe>
 8011094:	e074      	b.n	8011180 <HAL_RTC_SetTime+0xf8>
 8011096:	2301      	movs	r3, #1
 8011098:	6806      	ldr	r6, [r0, #0]
 801109a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801109c:	3301      	adds	r3, #1
 801109e:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80110a0:	68b3      	ldr	r3, [r6, #8]
 80110a2:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	d031      	beq.n	801110c <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80110a8:	403b      	ands	r3, r7
 80110aa:	d065      	beq.n	8011178 <HAL_RTC_SetTime+0xf0>
 80110ac:	7a0b      	ldrb	r3, [r1, #8]
 80110ae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110b0:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80110b2:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110b4:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80110b6:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110b8:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 80110ba:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80110bc:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80110be:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80110c0:	23ca      	movs	r3, #202	; 0xca
 80110c2:	6273      	str	r3, [r6, #36]	; 0x24
 80110c4:	3b77      	subs	r3, #119	; 0x77
 80110c6:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80110c8:	0020      	movs	r0, r4
 80110ca:	f7ff ff77 	bl	8010fbc <RTC_EnterInitMode>
 80110ce:	1e06      	subs	r6, r0, #0
 80110d0:	d149      	bne.n	8011166 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80110d2:	4935      	ldr	r1, [pc, #212]	; (80111a8 <HAL_RTC_SetTime+0x120>)
 80110d4:	6822      	ldr	r2, [r4, #0]
 80110d6:	4039      	ands	r1, r7
 80110d8:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80110da:	6893      	ldr	r3, [r2, #8]
 80110dc:	4933      	ldr	r1, [pc, #204]	; (80111ac <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80110de:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80110e0:	400b      	ands	r3, r1
 80110e2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80110e4:	68eb      	ldr	r3, [r5, #12]
 80110e6:	6891      	ldr	r1, [r2, #8]
 80110e8:	4303      	orrs	r3, r0
 80110ea:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80110ec:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80110ee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80110f0:	68d3      	ldr	r3, [r2, #12]
 80110f2:	438b      	bics	r3, r1
 80110f4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80110f6:	6893      	ldr	r3, [r2, #8]
 80110f8:	069b      	lsls	r3, r3, #26
 80110fa:	d543      	bpl.n	8011184 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110fc:	23ff      	movs	r3, #255	; 0xff
 80110fe:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011100:	3bfe      	subs	r3, #254	; 0xfe
 8011102:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011104:	2300      	movs	r3, #0
 8011106:	7723      	strb	r3, [r4, #28]
}
 8011108:	0030      	movs	r0, r6
 801110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801110c:	401f      	ands	r7, r3
 801110e:	d035      	beq.n	801117c <HAL_RTC_SetTime+0xf4>
 8011110:	7a0f      	ldrb	r7, [r1, #8]
 8011112:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011114:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8011116:	2300      	movs	r3, #0
  while(Value >= 10)
 8011118:	2809      	cmp	r0, #9
 801111a:	d906      	bls.n	801112a <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 801111c:	380a      	subs	r0, #10
 801111e:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011120:	3301      	adds	r3, #1
  while(Value >= 10)
 8011122:	2809      	cmp	r0, #9
 8011124:	d8fa      	bhi.n	801111c <HAL_RTC_SetTime+0x94>
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801112a:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801112c:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801112e:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011130:	2100      	movs	r1, #0
  while(Value >= 10)
 8011132:	2b09      	cmp	r3, #9
 8011134:	d906      	bls.n	8011144 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011136:	3b0a      	subs	r3, #10
 8011138:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801113a:	3101      	adds	r1, #1
  while(Value >= 10)
 801113c:	2b09      	cmp	r3, #9
 801113e:	d8fa      	bhi.n	8011136 <HAL_RTC_SetTime+0xae>
 8011140:	0109      	lsls	r1, r1, #4
 8011142:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011144:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011146:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011148:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 801114a:	2909      	cmp	r1, #9
 801114c:	d929      	bls.n	80111a2 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 801114e:	390a      	subs	r1, #10
 8011150:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011152:	3201      	adds	r2, #1
  while(Value >= 10)
 8011154:	2909      	cmp	r1, #9
 8011156:	d8fa      	bhi.n	801114e <HAL_RTC_SetTime+0xc6>
 8011158:	0112      	lsls	r2, r2, #4
 801115a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801115c:	4307      	orrs	r7, r0
 801115e:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011160:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011162:	430f      	orrs	r7, r1
 8011164:	e7ac      	b.n	80110c0 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011166:	22ff      	movs	r2, #255	; 0xff
 8011168:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 801116a:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801116c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801116e:	2304      	movs	r3, #4
 8011170:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011172:	2300      	movs	r3, #0
 8011174:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011176:	e7c7      	b.n	8011108 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011178:	720b      	strb	r3, [r1, #8]
 801117a:	e799      	b.n	80110b0 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 801117c:	720f      	strb	r7, [r1, #8]
 801117e:	e7c9      	b.n	8011114 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011180:	2602      	movs	r6, #2
 8011182:	e7c1      	b.n	8011108 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011184:	0020      	movs	r0, r4
 8011186:	f7ff fefd 	bl	8010f84 <HAL_RTC_WaitForSynchro>
 801118a:	2800      	cmp	r0, #0
 801118c:	d101      	bne.n	8011192 <HAL_RTC_SetTime+0x10a>
 801118e:	6822      	ldr	r2, [r4, #0]
 8011190:	e7b4      	b.n	80110fc <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011192:	22ff      	movs	r2, #255	; 0xff
 8011194:	6823      	ldr	r3, [r4, #0]
 8011196:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011198:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801119a:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 801119c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 801119e:	2601      	movs	r6, #1
 80111a0:	e7b2      	b.n	8011108 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 80111a2:	2200      	movs	r2, #0
 80111a4:	e7da      	b.n	801115c <HAL_RTC_SetTime+0xd4>
 80111a6:	46c0      	nop			; (mov r8, r8)
 80111a8:	007f7f7f 	.word	0x007f7f7f
 80111ac:	fffbffff 	.word	0xfffbffff

080111b0 <HAL_RTC_SetDate>:
{
 80111b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80111b2:	7f03      	ldrb	r3, [r0, #28]
{
 80111b4:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d062      	beq.n	8011280 <HAL_RTC_SetDate+0xd0>
 80111ba:	2301      	movs	r3, #1
 80111bc:	780f      	ldrb	r7, [r1, #0]
 80111be:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80111c0:	3301      	adds	r3, #1
 80111c2:	7743      	strb	r3, [r0, #29]
 80111c4:	7848      	ldrb	r0, [r1, #1]
 80111c6:	788e      	ldrb	r6, [r1, #2]
 80111c8:	78cb      	ldrb	r3, [r1, #3]
 80111ca:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80111cc:	2a00      	cmp	r2, #0
 80111ce:	d022      	beq.n	8011216 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80111d0:	041b      	lsls	r3, r3, #16
 80111d2:	433b      	orrs	r3, r7
 80111d4:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 80111d6:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80111d8:	4334      	orrs	r4, r6
 80111da:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111dc:	22ca      	movs	r2, #202	; 0xca
 80111de:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111e0:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111e2:	625a      	str	r2, [r3, #36]	; 0x24
 80111e4:	3a77      	subs	r2, #119	; 0x77
 80111e6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111e8:	f7ff fee8 	bl	8010fbc <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80111ec:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80111ee:	1e06      	subs	r6, r0, #0
 80111f0:	d13e      	bne.n	8011270 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111f2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80111f4:	4a2b      	ldr	r2, [pc, #172]	; (80112a4 <HAL_RTC_SetDate+0xf4>)
 80111f6:	4014      	ands	r4, r2
 80111f8:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80111fa:	68da      	ldr	r2, [r3, #12]
 80111fc:	438a      	bics	r2, r1
 80111fe:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011200:	689a      	ldr	r2, [r3, #8]
 8011202:	0692      	lsls	r2, r2, #26
 8011204:	d53e      	bpl.n	8011284 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011206:	22ff      	movs	r2, #255	; 0xff
 8011208:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801120a:	2301      	movs	r3, #1
 801120c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 801120e:	2300      	movs	r3, #0
 8011210:	772b      	strb	r3, [r5, #28]
}
 8011212:	0030      	movs	r0, r6
 8011214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011216:	2410      	movs	r4, #16
 8011218:	4204      	tst	r4, r0
 801121a:	d003      	beq.n	8011224 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 801121c:	43a0      	bics	r0, r4
 801121e:	300a      	adds	r0, #10
 8011220:	b2c0      	uxtb	r0, r0
 8011222:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011224:	2100      	movs	r1, #0
  while(Value >= 10)
 8011226:	2b09      	cmp	r3, #9
 8011228:	d906      	bls.n	8011238 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 801122a:	3b0a      	subs	r3, #10
 801122c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 801122e:	3101      	adds	r1, #1
  while(Value >= 10)
 8011230:	2b09      	cmp	r3, #9
 8011232:	d8fa      	bhi.n	801122a <HAL_RTC_SetDate+0x7a>
 8011234:	0109      	lsls	r1, r1, #4
 8011236:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011238:	430b      	orrs	r3, r1
 801123a:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 801123c:	2100      	movs	r1, #0
  while(Value >= 10)
 801123e:	2809      	cmp	r0, #9
 8011240:	d906      	bls.n	8011250 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011242:	380a      	subs	r0, #10
 8011244:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011246:	3101      	adds	r1, #1
  while(Value >= 10)
 8011248:	2809      	cmp	r0, #9
 801124a:	d8fa      	bhi.n	8011242 <HAL_RTC_SetDate+0x92>
 801124c:	0109      	lsls	r1, r1, #4
 801124e:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011250:	4308      	orrs	r0, r1
 8011252:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011254:	2e09      	cmp	r6, #9
 8011256:	d922      	bls.n	801129e <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011258:	3e0a      	subs	r6, #10
 801125a:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 801125c:	3201      	adds	r2, #1
  while(Value >= 10)
 801125e:	2e09      	cmp	r6, #9
 8011260:	d8fa      	bhi.n	8011258 <HAL_RTC_SetDate+0xa8>
 8011262:	0112      	lsls	r2, r2, #4
 8011264:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011266:	433b      	orrs	r3, r7
 8011268:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801126a:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801126c:	431c      	orrs	r4, r3
 801126e:	e7b5      	b.n	80111dc <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011270:	22ff      	movs	r2, #255	; 0xff
 8011272:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011274:	2304      	movs	r3, #4
 8011276:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011278:	2300      	movs	r3, #0
    return HAL_ERROR;
 801127a:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 801127c:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 801127e:	e7c8      	b.n	8011212 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011280:	2602      	movs	r6, #2
 8011282:	e7c6      	b.n	8011212 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011284:	0028      	movs	r0, r5
 8011286:	f7ff fe7d 	bl	8010f84 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801128a:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801128c:	2800      	cmp	r0, #0
 801128e:	d0ba      	beq.n	8011206 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011290:	22ff      	movs	r2, #255	; 0xff
 8011292:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011294:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011296:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011298:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 801129a:	2601      	movs	r6, #1
 801129c:	e7b9      	b.n	8011212 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 801129e:	2400      	movs	r4, #0
 80112a0:	e7e1      	b.n	8011266 <HAL_RTC_SetDate+0xb6>
 80112a2:	46c0      	nop			; (mov r8, r8)
 80112a4:	00ffff3f 	.word	0x00ffff3f

080112a8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112a8:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80112aa:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112ac:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80112ae:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80112b0:	600a      	str	r2, [r1, #0]
}
 80112b2:	4770      	bx	lr

080112b4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112b4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80112b6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80112b8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80112ba:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80112bc:	6808      	ldr	r0, [r1, #0]
}
 80112be:	4770      	bx	lr

080112c0 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80112c0:	4770      	bx	lr
 80112c2:	46c0      	nop			; (mov r8, r8)

080112c4 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80112c4:	2239      	movs	r2, #57	; 0x39
 80112c6:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80112c8:	2101      	movs	r1, #1
{
 80112ca:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 80112cc:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80112ce:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 80112d0:	6823      	ldr	r3, [r4, #0]
 80112d2:	430b      	orrs	r3, r1
 80112d4:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80112d6:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80112d8:	2000      	movs	r0, #0
 80112da:	bd10      	pop	{r4, pc}

080112dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112dc:	4a22      	ldr	r2, [pc, #136]	; (8011368 <TIM_Base_SetConfig+0x8c>)
{
 80112de:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 80112e0:	6803      	ldr	r3, [r0, #0]
 80112e2:	688d      	ldr	r5, [r1, #8]
 80112e4:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112e6:	4290      	cmp	r0, r2
 80112e8:	d02c      	beq.n	8011344 <TIM_Base_SetConfig+0x68>
 80112ea:	2280      	movs	r2, #128	; 0x80
 80112ec:	05d2      	lsls	r2, r2, #23
 80112ee:	4290      	cmp	r0, r2
 80112f0:	d012      	beq.n	8011318 <TIM_Base_SetConfig+0x3c>
 80112f2:	4a1e      	ldr	r2, [pc, #120]	; (801136c <TIM_Base_SetConfig+0x90>)
 80112f4:	4290      	cmp	r0, r2
 80112f6:	d00f      	beq.n	8011318 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112f8:	4a1d      	ldr	r2, [pc, #116]	; (8011370 <TIM_Base_SetConfig+0x94>)
 80112fa:	4290      	cmp	r0, r2
 80112fc:	d02e      	beq.n	801135c <TIM_Base_SetConfig+0x80>
 80112fe:	4a1d      	ldr	r2, [pc, #116]	; (8011374 <TIM_Base_SetConfig+0x98>)
 8011300:	4290      	cmp	r0, r2
 8011302:	d023      	beq.n	801134c <TIM_Base_SetConfig+0x70>
 8011304:	4a1c      	ldr	r2, [pc, #112]	; (8011378 <TIM_Base_SetConfig+0x9c>)
 8011306:	4290      	cmp	r0, r2
 8011308:	d020      	beq.n	801134c <TIM_Base_SetConfig+0x70>
 801130a:	4a1c      	ldr	r2, [pc, #112]	; (801137c <TIM_Base_SetConfig+0xa0>)
 801130c:	4290      	cmp	r0, r2
 801130e:	d01d      	beq.n	801134c <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011310:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011312:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011314:	6284      	str	r4, [r0, #40]	; 0x28
 8011316:	e012      	b.n	801133e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011318:	2270      	movs	r2, #112	; 0x70
 801131a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801131c:	684a      	ldr	r2, [r1, #4]
 801131e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011320:	4a17      	ldr	r2, [pc, #92]	; (8011380 <TIM_Base_SetConfig+0xa4>)
 8011322:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011324:	68ca      	ldr	r2, [r1, #12]
 8011326:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011328:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801132a:	4b13      	ldr	r3, [pc, #76]	; (8011378 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 801132c:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801132e:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011330:	4298      	cmp	r0, r3
 8011332:	d002      	beq.n	801133a <TIM_Base_SetConfig+0x5e>
 8011334:	4b11      	ldr	r3, [pc, #68]	; (801137c <TIM_Base_SetConfig+0xa0>)
 8011336:	4298      	cmp	r0, r3
 8011338:	d101      	bne.n	801133e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801133a:	690b      	ldr	r3, [r1, #16]
 801133c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 801133e:	2301      	movs	r3, #1
 8011340:	6143      	str	r3, [r0, #20]
}
 8011342:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011344:	2270      	movs	r2, #112	; 0x70
 8011346:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011348:	684a      	ldr	r2, [r1, #4]
 801134a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801134c:	4a0c      	ldr	r2, [pc, #48]	; (8011380 <TIM_Base_SetConfig+0xa4>)
 801134e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011350:	68ca      	ldr	r2, [r1, #12]
 8011352:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011354:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011356:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011358:	6284      	str	r4, [r0, #40]	; 0x28
 801135a:	e7ee      	b.n	801133a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 801135c:	4a08      	ldr	r2, [pc, #32]	; (8011380 <TIM_Base_SetConfig+0xa4>)
 801135e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011360:	68ca      	ldr	r2, [r1, #12]
 8011362:	4313      	orrs	r3, r2
 8011364:	e7d4      	b.n	8011310 <TIM_Base_SetConfig+0x34>
 8011366:	46c0      	nop			; (mov r8, r8)
 8011368:	40012c00 	.word	0x40012c00
 801136c:	40000400 	.word	0x40000400
 8011370:	40002000 	.word	0x40002000
 8011374:	40014000 	.word	0x40014000
 8011378:	40014400 	.word	0x40014400
 801137c:	40014800 	.word	0x40014800
 8011380:	fffffcff 	.word	0xfffffcff

08011384 <HAL_TIM_Base_Init>:
{
 8011384:	b570      	push	{r4, r5, r6, lr}
 8011386:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011388:	d014      	beq.n	80113b4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801138a:	2339      	movs	r3, #57	; 0x39
 801138c:	5cc3      	ldrb	r3, [r0, r3]
 801138e:	b2db      	uxtb	r3, r3
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00a      	beq.n	80113aa <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011394:	2302      	movs	r3, #2
 8011396:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011398:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 801139a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801139c:	1d21      	adds	r1, r4, #4
 801139e:	f7ff ff9d 	bl	80112dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80113a2:	2301      	movs	r3, #1
  return HAL_OK;
 80113a4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80113a6:	5563      	strb	r3, [r4, r5]
}
 80113a8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80113aa:	2238      	movs	r2, #56	; 0x38
 80113ac:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 80113ae:	f7ff ff87 	bl	80112c0 <HAL_TIM_Base_MspInit>
 80113b2:	e7ef      	b.n	8011394 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80113b4:	2001      	movs	r0, #1
 80113b6:	e7f7      	b.n	80113a8 <HAL_TIM_Base_Init+0x24>

080113b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80113b8:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80113ba:	2438      	movs	r4, #56	; 0x38
 80113bc:	5d03      	ldrb	r3, [r0, r4]
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d019      	beq.n	80113f6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 80113c2:	2539      	movs	r5, #57	; 0x39
 80113c4:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80113c6:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80113c8:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80113ca:	6803      	ldr	r3, [r0, #0]
 80113cc:	685a      	ldr	r2, [r3, #4]
 80113ce:	43b2      	bics	r2, r6
 80113d0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80113d6:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113d8:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80113da:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80113dc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80113de:	689a      	ldr	r2, [r3, #8]
 80113e0:	43b2      	bics	r2, r6
 80113e2:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80113e4:	689a      	ldr	r2, [r3, #8]
 80113e6:	430a      	orrs	r2, r1
 80113e8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80113ea:	2301      	movs	r3, #1
 80113ec:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 80113ee:	2300      	movs	r3, #0
 80113f0:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 80113f2:	2000      	movs	r0, #0
}
 80113f4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80113f6:	2002      	movs	r0, #2
 80113f8:	e7fc      	b.n	80113f4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80113fa:	46c0      	nop			; (mov r8, r8)

080113fc <HAL_UART_MspDeInit>:
 80113fc:	4770      	bx	lr
 80113fe:	46c0      	nop			; (mov r8, r8)

08011400 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011400:	b570      	push	{r4, r5, r6, lr}
 8011402:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011404:	2001      	movs	r0, #1
  if(huart == NULL)
 8011406:	2c00      	cmp	r4, #0
 8011408:	d012      	beq.n	8011430 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 801140a:	2669      	movs	r6, #105	; 0x69
 801140c:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 801140e:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011410:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	4382      	bics	r2, r0
 8011418:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801141a:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 801141c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801141e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011420:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011422:	f7ff ffeb 	bl	80113fc <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8011426:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8011428:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801142a:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801142c:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801142e:	54e5      	strb	r5, [r4, r3]
}
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	46c0      	nop			; (mov r8, r8)

08011434 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011434:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011436:	2069      	movs	r0, #105	; 0x69
{
 8011438:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801143a:	5c1c      	ldrb	r4, [r3, r0]
 801143c:	2c01      	cmp	r4, #1
 801143e:	d003      	beq.n	8011448 <HAL_UART_Transmit_IT+0x14>
 8011440:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011442:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011444:	2c22      	cmp	r4, #34	; 0x22
 8011446:	d122      	bne.n	801148e <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8011448:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801144a:	2900      	cmp	r1, #0
 801144c:	d01f      	beq.n	801148e <HAL_UART_Transmit_IT+0x5a>
 801144e:	2a00      	cmp	r2, #0
 8011450:	d01d      	beq.n	801148e <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8011452:	2468      	movs	r4, #104	; 0x68
 8011454:	5d1d      	ldrb	r5, [r3, r4]
 8011456:	2d01      	cmp	r5, #1
 8011458:	d01d      	beq.n	8011496 <HAL_UART_Transmit_IT+0x62>
 801145a:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 801145c:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 801145e:	2150      	movs	r1, #80	; 0x50
 8011460:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011462:	3102      	adds	r1, #2
 8011464:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011466:	2200      	movs	r2, #0
 8011468:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801146a:	3269      	adds	r2, #105	; 0x69
 801146c:	5c99      	ldrb	r1, [r3, r2]
 801146e:	2922      	cmp	r1, #34	; 0x22
 8011470:	d00e      	beq.n	8011490 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011472:	2112      	movs	r1, #18
 8011474:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011476:	2001      	movs	r0, #1
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	6891      	ldr	r1, [r2, #8]
 801147c:	4301      	orrs	r1, r0
 801147e:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011480:	2000      	movs	r0, #0
 8011482:	2168      	movs	r1, #104	; 0x68
 8011484:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011486:	6813      	ldr	r3, [r2, #0]
 8011488:	3118      	adds	r1, #24
 801148a:	430b      	orrs	r3, r1
 801148c:	6013      	str	r3, [r2, #0]
  }
}
 801148e:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011490:	3110      	adds	r1, #16
 8011492:	5499      	strb	r1, [r3, r2]
 8011494:	e7ef      	b.n	8011476 <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 8011496:	2002      	movs	r0, #2
 8011498:	e7f9      	b.n	801148e <HAL_UART_Transmit_IT+0x5a>
 801149a:	46c0      	nop			; (mov r8, r8)

0801149c <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801149c:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801149e:	2069      	movs	r0, #105	; 0x69
{
 80114a0:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114a2:	5c1c      	ldrb	r4, [r3, r0]
 80114a4:	2c01      	cmp	r4, #1
 80114a6:	d003      	beq.n	80114b0 <HAL_UART_Receive_IT+0x14>
 80114a8:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80114aa:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80114ac:	2c12      	cmp	r4, #18
 80114ae:	d134      	bne.n	801151a <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 80114b0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80114b2:	2900      	cmp	r1, #0
 80114b4:	d031      	beq.n	801151a <HAL_UART_Receive_IT+0x7e>
 80114b6:	2a00      	cmp	r2, #0
 80114b8:	d02f      	beq.n	801151a <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 80114ba:	2468      	movs	r4, #104	; 0x68
 80114bc:	5d1d      	ldrb	r5, [r3, r4]
 80114be:	2d01      	cmp	r5, #1
 80114c0:	d041      	beq.n	8011546 <HAL_UART_Receive_IT+0xaa>
 80114c2:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 80114c4:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80114c6:	2158      	movs	r1, #88	; 0x58
 80114c8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80114ca:	3102      	adds	r1, #2
 80114cc:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 80114ce:	2180      	movs	r1, #128	; 0x80
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	0149      	lsls	r1, r1, #5
 80114d4:	428a      	cmp	r2, r1
 80114d6:	d021      	beq.n	801151c <HAL_UART_Receive_IT+0x80>
 80114d8:	2a00      	cmp	r2, #0
 80114da:	d129      	bne.n	8011530 <HAL_UART_Receive_IT+0x94>
 80114dc:	691a      	ldr	r2, [r3, #16]
 80114de:	2a00      	cmp	r2, #0
 80114e0:	d133      	bne.n	801154a <HAL_UART_Receive_IT+0xae>
 80114e2:	225c      	movs	r2, #92	; 0x5c
 80114e4:	21ff      	movs	r1, #255	; 0xff
 80114e6:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114e8:	2200      	movs	r2, #0
 80114ea:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80114ec:	3269      	adds	r2, #105	; 0x69
 80114ee:	5c99      	ldrb	r1, [r3, r2]
 80114f0:	2912      	cmp	r1, #18
 80114f2:	d01a      	beq.n	801152a <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80114f4:	2122      	movs	r1, #34	; 0x22
 80114f6:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80114f8:	2180      	movs	r1, #128	; 0x80
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	0049      	lsls	r1, r1, #1
 80114fe:	6810      	ldr	r0, [r2, #0]
 8011500:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011502:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011504:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011506:	6891      	ldr	r1, [r2, #8]
 8011508:	4301      	orrs	r1, r0
 801150a:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 801150c:	2000      	movs	r0, #0
 801150e:	2168      	movs	r1, #104	; 0x68
 8011510:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011512:	6813      	ldr	r3, [r2, #0]
 8011514:	3948      	subs	r1, #72	; 0x48
 8011516:	430b      	orrs	r3, r1
 8011518:	6013      	str	r3, [r2, #0]
  }
}
 801151a:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 801151c:	691a      	ldr	r2, [r3, #16]
 801151e:	2a00      	cmp	r2, #0
 8011520:	d1df      	bne.n	80114e2 <HAL_UART_Receive_IT+0x46>
 8011522:	490c      	ldr	r1, [pc, #48]	; (8011554 <HAL_UART_Receive_IT+0xb8>)
 8011524:	325c      	adds	r2, #92	; 0x5c
 8011526:	5299      	strh	r1, [r3, r2]
 8011528:	e7de      	b.n	80114e8 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801152a:	3120      	adds	r1, #32
 801152c:	5499      	strb	r1, [r3, r2]
 801152e:	e7e3      	b.n	80114f8 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8011530:	2180      	movs	r1, #128	; 0x80
 8011532:	0549      	lsls	r1, r1, #21
 8011534:	428a      	cmp	r2, r1
 8011536:	d1d7      	bne.n	80114e8 <HAL_UART_Receive_IT+0x4c>
 8011538:	691a      	ldr	r2, [r3, #16]
 801153a:	2a00      	cmp	r2, #0
 801153c:	d005      	beq.n	801154a <HAL_UART_Receive_IT+0xae>
 801153e:	225c      	movs	r2, #92	; 0x5c
 8011540:	213f      	movs	r1, #63	; 0x3f
 8011542:	5299      	strh	r1, [r3, r2]
 8011544:	e7d0      	b.n	80114e8 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8011546:	2002      	movs	r0, #2
 8011548:	e7e7      	b.n	801151a <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 801154a:	225c      	movs	r2, #92	; 0x5c
 801154c:	217f      	movs	r1, #127	; 0x7f
 801154e:	5299      	strh	r1, [r3, r2]
 8011550:	e7ca      	b.n	80114e8 <HAL_UART_Receive_IT+0x4c>
 8011552:	46c0      	nop			; (mov r8, r8)
 8011554:	000001ff 	.word	0x000001ff

08011558 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801155c:	2069      	movs	r0, #105	; 0x69
 801155e:	5c25      	ldrb	r5, [r4, r0]
 8011560:	2d01      	cmp	r5, #1
 8011562:	d003      	beq.n	801156c <HAL_UART_Receive_DMA+0x14>
 8011564:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011566:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011568:	2b12      	cmp	r3, #18
 801156a:	d12b      	bne.n	80115c4 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 801156c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801156e:	2900      	cmp	r1, #0
 8011570:	d028      	beq.n	80115c4 <HAL_UART_Receive_DMA+0x6c>
 8011572:	2a00      	cmp	r2, #0
 8011574:	d026      	beq.n	80115c4 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 8011576:	2368      	movs	r3, #104	; 0x68
 8011578:	5ce5      	ldrb	r5, [r4, r3]
 801157a:	2d01      	cmp	r5, #1
 801157c:	d026      	beq.n	80115cc <HAL_UART_Receive_DMA+0x74>
 801157e:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011580:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011582:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011584:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011586:	2300      	movs	r3, #0
 8011588:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801158a:	3369      	adds	r3, #105	; 0x69
 801158c:	5ce0      	ldrb	r0, [r4, r3]
 801158e:	2812      	cmp	r0, #18
 8011590:	d019      	beq.n	80115c6 <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011592:	2022      	movs	r0, #34	; 0x22
 8011594:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011596:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011598:	4b0d      	ldr	r3, [pc, #52]	; (80115d0 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801159a:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801159c:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801159e:	4b0d      	ldr	r3, [pc, #52]	; (80115d4 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80115a0:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80115a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80115a4:	4b0c      	ldr	r3, [pc, #48]	; (80115d8 <HAL_UART_Receive_DMA+0x80>)
 80115a6:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80115a8:	0013      	movs	r3, r2
 80115aa:	000a      	movs	r2, r1
 80115ac:	0029      	movs	r1, r5
 80115ae:	f7fd ffdb 	bl	800f568 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80115b2:	2140      	movs	r1, #64	; 0x40
 80115b4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80115b6:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80115b8:	6893      	ldr	r3, [r2, #8]
 80115ba:	430b      	orrs	r3, r1
 80115bc:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80115be:	2368      	movs	r3, #104	; 0x68
 80115c0:	2200      	movs	r2, #0
 80115c2:	54e2      	strb	r2, [r4, r3]
  }
}
 80115c4:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80115c6:	3020      	adds	r0, #32
 80115c8:	54e0      	strb	r0, [r4, r3]
 80115ca:	e7e4      	b.n	8011596 <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 80115cc:	2002      	movs	r0, #2
 80115ce:	e7f9      	b.n	80115c4 <HAL_UART_Receive_DMA+0x6c>
 80115d0:	080115dd 	.word	0x080115dd
 80115d4:	08011619 	.word	0x08011619
 80115d8:	08011625 	.word	0x08011625

080115dc <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80115dc:	6803      	ldr	r3, [r0, #0]
{
 80115de:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80115e0:	6819      	ldr	r1, [r3, #0]
 80115e2:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80115e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80115e6:	400b      	ands	r3, r1
 80115e8:	d10c      	bne.n	8011604 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 80115ea:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80115ec:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 80115ee:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80115f0:	6811      	ldr	r1, [r2, #0]
 80115f2:	688b      	ldr	r3, [r1, #8]
 80115f4:	4383      	bics	r3, r0
 80115f6:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80115f8:	2369      	movs	r3, #105	; 0x69
 80115fa:	5cd1      	ldrb	r1, [r2, r3]
 80115fc:	2932      	cmp	r1, #50	; 0x32
 80115fe:	d005      	beq.n	801160c <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8011600:	2101      	movs	r1, #1
 8011602:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8011604:	0010      	movs	r0, r2
 8011606:	f7fa fe05 	bl	800c214 <HAL_UART_RxCpltCallback>
}
 801160a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801160c:	3920      	subs	r1, #32
 801160e:	54d1      	strb	r1, [r2, r3]
 8011610:	e7f8      	b.n	8011604 <UART_DMAReceiveCplt+0x28>
 8011612:	46c0      	nop			; (mov r8, r8)

08011614 <HAL_UART_RxHalfCpltCallback>:
 8011614:	4770      	bx	lr
 8011616:	46c0      	nop			; (mov r8, r8)

08011618 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011618:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801161a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801161c:	f7ff fffa 	bl	8011614 <HAL_UART_RxHalfCpltCallback>
}
 8011620:	bd10      	pop	{r4, pc}
 8011622:	46c0      	nop			; (mov r8, r8)

08011624 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8011624:	2300      	movs	r3, #0
 8011626:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011628:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 801162a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 801162c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801162e:	3a08      	subs	r2, #8
 8011630:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8011632:	3369      	adds	r3, #105	; 0x69
 8011634:	3a51      	subs	r2, #81	; 0x51
 8011636:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011638:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801163a:	320f      	adds	r2, #15
 801163c:	4313      	orrs	r3, r2
 801163e:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8011640:	f7fa fdc4 	bl	800c1cc <HAL_UART_ErrorCallback>
}
 8011644:	bd10      	pop	{r4, pc}
 8011646:	46c0      	nop			; (mov r8, r8)

08011648 <UART_SetConfig>:
{
 8011648:	b570      	push	{r4, r5, r6, lr}
 801164a:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801164c:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801164e:	69c1      	ldr	r1, [r0, #28]
 8011650:	6883      	ldr	r3, [r0, #8]
 8011652:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011654:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011656:	4303      	orrs	r3, r0
 8011658:	6968      	ldr	r0, [r5, #20]
 801165a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801165c:	4861      	ldr	r0, [pc, #388]	; (80117e4 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801165e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011660:	4002      	ands	r2, r0
 8011662:	4313      	orrs	r3, r2
 8011664:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011666:	6863      	ldr	r3, [r4, #4]
 8011668:	4a5f      	ldr	r2, [pc, #380]	; (80117e8 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801166a:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801166c:	4013      	ands	r3, r2
 801166e:	68ea      	ldr	r2, [r5, #12]
 8011670:	4313      	orrs	r3, r2
 8011672:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8011674:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8011676:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8011678:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801167a:	485c      	ldr	r0, [pc, #368]	; (80117ec <UART_SetConfig+0x1a4>)
 801167c:	4002      	ands	r2, r0
 801167e:	4313      	orrs	r3, r2
 8011680:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011682:	4b5b      	ldr	r3, [pc, #364]	; (80117f0 <UART_SetConfig+0x1a8>)
 8011684:	429c      	cmp	r4, r3
 8011686:	d044      	beq.n	8011712 <UART_SetConfig+0xca>
 8011688:	4b5a      	ldr	r3, [pc, #360]	; (80117f4 <UART_SetConfig+0x1ac>)
 801168a:	429c      	cmp	r4, r3
 801168c:	d018      	beq.n	80116c0 <UART_SetConfig+0x78>
 801168e:	4b5a      	ldr	r3, [pc, #360]	; (80117f8 <UART_SetConfig+0x1b0>)
 8011690:	429c      	cmp	r4, r3
 8011692:	d100      	bne.n	8011696 <UART_SetConfig+0x4e>
 8011694:	e085      	b.n	80117a2 <UART_SetConfig+0x15a>
 8011696:	4b59      	ldr	r3, [pc, #356]	; (80117fc <UART_SetConfig+0x1b4>)
 8011698:	429c      	cmp	r4, r3
 801169a:	d031      	beq.n	8011700 <UART_SetConfig+0xb8>
 801169c:	4b58      	ldr	r3, [pc, #352]	; (8011800 <UART_SetConfig+0x1b8>)
 801169e:	429c      	cmp	r4, r3
 80116a0:	d02e      	beq.n	8011700 <UART_SetConfig+0xb8>
 80116a2:	4b58      	ldr	r3, [pc, #352]	; (8011804 <UART_SetConfig+0x1bc>)
 80116a4:	429c      	cmp	r4, r3
 80116a6:	d02b      	beq.n	8011700 <UART_SetConfig+0xb8>
 80116a8:	4b57      	ldr	r3, [pc, #348]	; (8011808 <UART_SetConfig+0x1c0>)
 80116aa:	429c      	cmp	r4, r3
 80116ac:	d028      	beq.n	8011700 <UART_SetConfig+0xb8>
 80116ae:	4b57      	ldr	r3, [pc, #348]	; (801180c <UART_SetConfig+0x1c4>)
 80116b0:	429c      	cmp	r4, r3
 80116b2:	d025      	beq.n	8011700 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116b4:	2380      	movs	r3, #128	; 0x80
 80116b6:	021b      	lsls	r3, r3, #8
 80116b8:	4299      	cmp	r1, r3
 80116ba:	d050      	beq.n	801175e <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 80116bc:	2001      	movs	r0, #1
 80116be:	e01c      	b.n	80116fa <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80116c0:	20c0      	movs	r0, #192	; 0xc0
 80116c2:	2280      	movs	r2, #128	; 0x80
 80116c4:	4b52      	ldr	r3, [pc, #328]	; (8011810 <UART_SetConfig+0x1c8>)
 80116c6:	0280      	lsls	r0, r0, #10
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	0252      	lsls	r2, r2, #9
 80116cc:	4003      	ands	r3, r0
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d049      	beq.n	8011766 <UART_SetConfig+0x11e>
 80116d2:	d913      	bls.n	80116fc <UART_SetConfig+0xb4>
 80116d4:	2280      	movs	r2, #128	; 0x80
 80116d6:	0292      	lsls	r2, r2, #10
 80116d8:	4293      	cmp	r3, r2
 80116da:	d100      	bne.n	80116de <UART_SetConfig+0x96>
 80116dc:	e070      	b.n	80117c0 <UART_SetConfig+0x178>
 80116de:	4283      	cmp	r3, r0
 80116e0:	d1e8      	bne.n	80116b4 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116e2:	2380      	movs	r3, #128	; 0x80
 80116e4:	021b      	lsls	r3, r3, #8
 80116e6:	4299      	cmp	r1, r3
 80116e8:	d056      	beq.n	8011798 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80116ea:	6869      	ldr	r1, [r5, #4]
 80116ec:	4849      	ldr	r0, [pc, #292]	; (8011814 <UART_SetConfig+0x1cc>)
 80116ee:	f7ee fd2f 	bl	8000150 <__udivsi3>
 80116f2:	0400      	lsls	r0, r0, #16
 80116f4:	0c00      	lsrs	r0, r0, #16
 80116f6:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80116f8:	2000      	movs	r0, #0
}
 80116fa:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1d9      	bne.n	80116b4 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011700:	2380      	movs	r3, #128	; 0x80
 8011702:	021b      	lsls	r3, r3, #8
 8011704:	4299      	cmp	r1, r3
 8011706:	d060      	beq.n	80117ca <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011708:	f7ff fb2e 	bl	8010d68 <HAL_RCC_GetPCLK1Freq>
 801170c:	682c      	ldr	r4, [r5, #0]
 801170e:	6869      	ldr	r1, [r5, #4]
 8011710:	e7ed      	b.n	80116ee <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011712:	4b3f      	ldr	r3, [pc, #252]	; (8011810 <UART_SetConfig+0x1c8>)
 8011714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011716:	2303      	movs	r3, #3
 8011718:	4013      	ands	r3, r2
 801171a:	4a3f      	ldr	r2, [pc, #252]	; (8011818 <UART_SetConfig+0x1d0>)
 801171c:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801171e:	2280      	movs	r2, #128	; 0x80
 8011720:	0212      	lsls	r2, r2, #8
 8011722:	4291      	cmp	r1, r2
 8011724:	d00e      	beq.n	8011744 <UART_SetConfig+0xfc>
    switch (clocksource)
 8011726:	2b02      	cmp	r3, #2
 8011728:	d0df      	beq.n	80116ea <UART_SetConfig+0xa2>
 801172a:	d956      	bls.n	80117da <UART_SetConfig+0x192>
 801172c:	2b04      	cmp	r3, #4
 801172e:	d01e      	beq.n	801176e <UART_SetConfig+0x126>
 8011730:	2b08      	cmp	r3, #8
 8011732:	d1c3      	bne.n	80116bc <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8011734:	2080      	movs	r0, #128	; 0x80
 8011736:	6869      	ldr	r1, [r5, #4]
 8011738:	0200      	lsls	r0, r0, #8
 801173a:	f7ee fd09 	bl	8000150 <__udivsi3>
 801173e:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011740:	2000      	movs	r0, #0
        break;
 8011742:	e7da      	b.n	80116fa <UART_SetConfig+0xb2>
    switch (clocksource)
 8011744:	2b02      	cmp	r3, #2
 8011746:	d027      	beq.n	8011798 <UART_SetConfig+0x150>
 8011748:	d907      	bls.n	801175a <UART_SetConfig+0x112>
 801174a:	2b04      	cmp	r3, #4
 801174c:	d014      	beq.n	8011778 <UART_SetConfig+0x130>
 801174e:	2b08      	cmp	r3, #8
 8011750:	d105      	bne.n	801175e <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011752:	2080      	movs	r0, #128	; 0x80
 8011754:	6869      	ldr	r1, [r5, #4]
 8011756:	0240      	lsls	r0, r0, #9
 8011758:	e020      	b.n	801179c <UART_SetConfig+0x154>
    switch (clocksource)
 801175a:	2b00      	cmp	r3, #0
 801175c:	d035      	beq.n	80117ca <UART_SetConfig+0x182>
 801175e:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8011760:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8011762:	60e3      	str	r3, [r4, #12]
 8011764:	e7c9      	b.n	80116fa <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011766:	2380      	movs	r3, #128	; 0x80
 8011768:	021b      	lsls	r3, r3, #8
 801176a:	4299      	cmp	r1, r3
 801176c:	d004      	beq.n	8011778 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801176e:	f7ff faa1 	bl	8010cb4 <HAL_RCC_GetSysClockFreq>
 8011772:	682c      	ldr	r4, [r5, #0]
 8011774:	6869      	ldr	r1, [r5, #4]
 8011776:	e7ba      	b.n	80116ee <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011778:	f7ff fa9c 	bl	8010cb4 <HAL_RCC_GetSysClockFreq>
 801177c:	6869      	ldr	r1, [r5, #4]
 801177e:	0040      	lsls	r0, r0, #1
 8011780:	f7ee fce6 	bl	8000150 <__udivsi3>
 8011784:	682c      	ldr	r4, [r5, #0]
 8011786:	220f      	movs	r2, #15
 8011788:	0703      	lsls	r3, r0, #28
 801178a:	0f5b      	lsrs	r3, r3, #29
 801178c:	4390      	bics	r0, r2
 801178e:	4303      	orrs	r3, r0
 8011790:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8011792:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8011794:	60e3      	str	r3, [r4, #12]
 8011796:	e7b0      	b.n	80116fa <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011798:	6869      	ldr	r1, [r5, #4]
 801179a:	4820      	ldr	r0, [pc, #128]	; (801181c <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801179c:	f7ee fcd8 	bl	8000150 <__udivsi3>
 80117a0:	e7f1      	b.n	8011786 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117a2:	20c0      	movs	r0, #192	; 0xc0
 80117a4:	2280      	movs	r2, #128	; 0x80
 80117a6:	4b1a      	ldr	r3, [pc, #104]	; (8011810 <UART_SetConfig+0x1c8>)
 80117a8:	0300      	lsls	r0, r0, #12
 80117aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ac:	02d2      	lsls	r2, r2, #11
 80117ae:	4003      	ands	r3, r0
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d0d8      	beq.n	8011766 <UART_SetConfig+0x11e>
 80117b4:	d9a2      	bls.n	80116fc <UART_SetConfig+0xb4>
 80117b6:	2280      	movs	r2, #128	; 0x80
 80117b8:	0312      	lsls	r2, r2, #12
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d000      	beq.n	80117c0 <UART_SetConfig+0x178>
 80117be:	e78e      	b.n	80116de <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117c0:	2380      	movs	r3, #128	; 0x80
 80117c2:	021b      	lsls	r3, r3, #8
 80117c4:	4299      	cmp	r1, r3
 80117c6:	d1b5      	bne.n	8011734 <UART_SetConfig+0xec>
 80117c8:	e7c3      	b.n	8011752 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80117ca:	f7ff facd 	bl	8010d68 <HAL_RCC_GetPCLK1Freq>
 80117ce:	6869      	ldr	r1, [r5, #4]
 80117d0:	0040      	lsls	r0, r0, #1
 80117d2:	f7ee fcbd 	bl	8000150 <__udivsi3>
 80117d6:	682c      	ldr	r4, [r5, #0]
 80117d8:	e7d5      	b.n	8011786 <UART_SetConfig+0x13e>
    switch (clocksource)
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d094      	beq.n	8011708 <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 80117de:	2001      	movs	r0, #1
 80117e0:	e78b      	b.n	80116fa <UART_SetConfig+0xb2>
 80117e2:	46c0      	nop			; (mov r8, r8)
 80117e4:	efff69f3 	.word	0xefff69f3
 80117e8:	ffffcfff 	.word	0xffffcfff
 80117ec:	fffff4ff 	.word	0xfffff4ff
 80117f0:	40013800 	.word	0x40013800
 80117f4:	40004400 	.word	0x40004400
 80117f8:	40004800 	.word	0x40004800
 80117fc:	40004c00 	.word	0x40004c00
 8011800:	40005000 	.word	0x40005000
 8011804:	40011400 	.word	0x40011400
 8011808:	40011800 	.word	0x40011800
 801180c:	40011c00 	.word	0x40011c00
 8011810:	40021000 	.word	0x40021000
 8011814:	007a1200 	.word	0x007a1200
 8011818:	08017124 	.word	0x08017124
 801181c:	00f42400 	.word	0x00f42400

08011820 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011820:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8011822:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011824:	07da      	lsls	r2, r3, #31
 8011826:	d506      	bpl.n	8011836 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011828:	6801      	ldr	r1, [r0, #0]
 801182a:	4c28      	ldr	r4, [pc, #160]	; (80118cc <UART_AdvFeatureConfig+0xac>)
 801182c:	684a      	ldr	r2, [r1, #4]
 801182e:	4022      	ands	r2, r4
 8011830:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011832:	4322      	orrs	r2, r4
 8011834:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011836:	079a      	lsls	r2, r3, #30
 8011838:	d506      	bpl.n	8011848 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801183a:	6801      	ldr	r1, [r0, #0]
 801183c:	4c24      	ldr	r4, [pc, #144]	; (80118d0 <UART_AdvFeatureConfig+0xb0>)
 801183e:	684a      	ldr	r2, [r1, #4]
 8011840:	4022      	ands	r2, r4
 8011842:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011844:	4322      	orrs	r2, r4
 8011846:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011848:	075a      	lsls	r2, r3, #29
 801184a:	d506      	bpl.n	801185a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801184c:	6801      	ldr	r1, [r0, #0]
 801184e:	4c21      	ldr	r4, [pc, #132]	; (80118d4 <UART_AdvFeatureConfig+0xb4>)
 8011850:	684a      	ldr	r2, [r1, #4]
 8011852:	4022      	ands	r2, r4
 8011854:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011856:	4322      	orrs	r2, r4
 8011858:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801185a:	071a      	lsls	r2, r3, #28
 801185c:	d506      	bpl.n	801186c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801185e:	6801      	ldr	r1, [r0, #0]
 8011860:	4c1d      	ldr	r4, [pc, #116]	; (80118d8 <UART_AdvFeatureConfig+0xb8>)
 8011862:	684a      	ldr	r2, [r1, #4]
 8011864:	4022      	ands	r2, r4
 8011866:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011868:	4322      	orrs	r2, r4
 801186a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801186c:	06da      	lsls	r2, r3, #27
 801186e:	d506      	bpl.n	801187e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011870:	6801      	ldr	r1, [r0, #0]
 8011872:	4c1a      	ldr	r4, [pc, #104]	; (80118dc <UART_AdvFeatureConfig+0xbc>)
 8011874:	688a      	ldr	r2, [r1, #8]
 8011876:	4022      	ands	r2, r4
 8011878:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801187a:	4322      	orrs	r2, r4
 801187c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801187e:	069a      	lsls	r2, r3, #26
 8011880:	d506      	bpl.n	8011890 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011882:	6801      	ldr	r1, [r0, #0]
 8011884:	4c16      	ldr	r4, [pc, #88]	; (80118e0 <UART_AdvFeatureConfig+0xc0>)
 8011886:	688a      	ldr	r2, [r1, #8]
 8011888:	4022      	ands	r2, r4
 801188a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801188c:	4322      	orrs	r2, r4
 801188e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011890:	065a      	lsls	r2, r3, #25
 8011892:	d50a      	bpl.n	80118aa <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011894:	6801      	ldr	r1, [r0, #0]
 8011896:	4d13      	ldr	r5, [pc, #76]	; (80118e4 <UART_AdvFeatureConfig+0xc4>)
 8011898:	684a      	ldr	r2, [r1, #4]
 801189a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801189c:	402a      	ands	r2, r5
 801189e:	4322      	orrs	r2, r4
 80118a0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118a2:	2280      	movs	r2, #128	; 0x80
 80118a4:	0352      	lsls	r2, r2, #13
 80118a6:	4294      	cmp	r4, r2
 80118a8:	d009      	beq.n	80118be <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118aa:	061b      	lsls	r3, r3, #24
 80118ac:	d506      	bpl.n	80118bc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118ae:	6802      	ldr	r2, [r0, #0]
 80118b0:	490d      	ldr	r1, [pc, #52]	; (80118e8 <UART_AdvFeatureConfig+0xc8>)
 80118b2:	6853      	ldr	r3, [r2, #4]
 80118b4:	400b      	ands	r3, r1
 80118b6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80118b8:	430b      	orrs	r3, r1
 80118ba:	6053      	str	r3, [r2, #4]
}
 80118bc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118be:	684a      	ldr	r2, [r1, #4]
 80118c0:	4c0a      	ldr	r4, [pc, #40]	; (80118ec <UART_AdvFeatureConfig+0xcc>)
 80118c2:	4022      	ands	r2, r4
 80118c4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80118c6:	4322      	orrs	r2, r4
 80118c8:	604a      	str	r2, [r1, #4]
 80118ca:	e7ee      	b.n	80118aa <UART_AdvFeatureConfig+0x8a>
 80118cc:	fffdffff 	.word	0xfffdffff
 80118d0:	fffeffff 	.word	0xfffeffff
 80118d4:	fffbffff 	.word	0xfffbffff
 80118d8:	ffff7fff 	.word	0xffff7fff
 80118dc:	ffffefff 	.word	0xffffefff
 80118e0:	ffffdfff 	.word	0xffffdfff
 80118e4:	ffefffff 	.word	0xffefffff
 80118e8:	fff7ffff 	.word	0xfff7ffff
 80118ec:	ff9fffff 	.word	0xff9fffff

080118f0 <UART_WaitOnFlagUntilTimeout>:
{
 80118f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118f2:	46c6      	mov	lr, r8
 80118f4:	4690      	mov	r8, r2
 80118f6:	b500      	push	{lr}
 80118f8:	001d      	movs	r5, r3
 80118fa:	0006      	movs	r6, r0
 80118fc:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 80118fe:	f7fd f9b7 	bl	800ec70 <HAL_GetTick>
  if(Status == RESET)
 8011902:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8011904:	0007      	movs	r7, r0
  if(Status == RESET)
 8011906:	2b00      	cmp	r3, #0
 8011908:	d112      	bne.n	8011930 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801190a:	6832      	ldr	r2, [r6, #0]
 801190c:	e001      	b.n	8011912 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 801190e:	1c6b      	adds	r3, r5, #1
 8011910:	d117      	bne.n	8011942 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011912:	69d3      	ldr	r3, [r2, #28]
 8011914:	4023      	ands	r3, r4
 8011916:	42a3      	cmp	r3, r4
 8011918:	d1f9      	bne.n	801190e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801191a:	2000      	movs	r0, #0
}
 801191c:	bc04      	pop	{r2}
 801191e:	4690      	mov	r8, r2
 8011920:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011922:	2d00      	cmp	r5, #0
 8011924:	d015      	beq.n	8011952 <UART_WaitOnFlagUntilTimeout+0x62>
 8011926:	f7fd f9a3 	bl	800ec70 <HAL_GetTick>
 801192a:	1bc0      	subs	r0, r0, r7
 801192c:	42a8      	cmp	r0, r5
 801192e:	d80f      	bhi.n	8011950 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011930:	6832      	ldr	r2, [r6, #0]
 8011932:	e001      	b.n	8011938 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8011934:	1c6b      	adds	r3, r5, #1
 8011936:	d1f4      	bne.n	8011922 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011938:	69d3      	ldr	r3, [r2, #28]
 801193a:	4023      	ands	r3, r4
 801193c:	42a3      	cmp	r3, r4
 801193e:	d0f9      	beq.n	8011934 <UART_WaitOnFlagUntilTimeout+0x44>
 8011940:	e7eb      	b.n	801191a <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011942:	2d00      	cmp	r5, #0
 8011944:	d005      	beq.n	8011952 <UART_WaitOnFlagUntilTimeout+0x62>
 8011946:	f7fd f993 	bl	800ec70 <HAL_GetTick>
 801194a:	1bc0      	subs	r0, r0, r7
 801194c:	42a8      	cmp	r0, r5
 801194e:	d9dc      	bls.n	801190a <UART_WaitOnFlagUntilTimeout+0x1a>
 8011950:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011952:	2180      	movs	r1, #128	; 0x80
 8011954:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8011956:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011958:	438b      	bics	r3, r1
 801195a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801195c:	6813      	ldr	r3, [r2, #0]
 801195e:	3960      	subs	r1, #96	; 0x60
 8011960:	438b      	bics	r3, r1
 8011962:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011964:	6813      	ldr	r3, [r2, #0]
 8011966:	4907      	ldr	r1, [pc, #28]	; (8011984 <UART_WaitOnFlagUntilTimeout+0x94>)
 8011968:	400b      	ands	r3, r1
 801196a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801196c:	6893      	ldr	r3, [r2, #8]
 801196e:	3103      	adds	r1, #3
 8011970:	31ff      	adds	r1, #255	; 0xff
 8011972:	438b      	bics	r3, r1
 8011974:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 8011976:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8011978:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801197a:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 801197c:	3b01      	subs	r3, #1
 801197e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011980:	e7cc      	b.n	801191c <UART_WaitOnFlagUntilTimeout+0x2c>
 8011982:	46c0      	nop			; (mov r8, r8)
 8011984:	fffffeff 	.word	0xfffffeff

08011988 <HAL_UART_Transmit>:
{
 8011988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801198a:	46c6      	mov	lr, r8
 801198c:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801198e:	2369      	movs	r3, #105	; 0x69
{
 8011990:	b500      	push	{lr}
 8011992:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011994:	5cc1      	ldrb	r1, [r0, r3]
{
 8011996:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011998:	2901      	cmp	r1, #1
 801199a:	d003      	beq.n	80119a4 <HAL_UART_Transmit+0x1c>
 801199c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801199e:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80119a0:	2b22      	cmp	r3, #34	; 0x22
 80119a2:	d147      	bne.n	8011a34 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80119a4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80119a6:	2d00      	cmp	r5, #0
 80119a8:	d044      	beq.n	8011a34 <HAL_UART_Transmit+0xac>
 80119aa:	2a00      	cmp	r2, #0
 80119ac:	d042      	beq.n	8011a34 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80119ae:	2368      	movs	r3, #104	; 0x68
 80119b0:	5ce1      	ldrb	r1, [r4, r3]
 80119b2:	2901      	cmp	r1, #1
 80119b4:	d046      	beq.n	8011a44 <HAL_UART_Transmit+0xbc>
 80119b6:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119b8:	2300      	movs	r3, #0
 80119ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80119bc:	3369      	adds	r3, #105	; 0x69
 80119be:	5ce1      	ldrb	r1, [r4, r3]
 80119c0:	2922      	cmp	r1, #34	; 0x22
 80119c2:	d03a      	beq.n	8011a3a <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80119c4:	2112      	movs	r1, #18
 80119c6:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80119c8:	2350      	movs	r3, #80	; 0x50
 80119ca:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119cc:	2380      	movs	r3, #128	; 0x80
 80119ce:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 80119d0:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119d2:	4698      	mov	r8, r3
 80119d4:	e005      	b.n	80119e2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80119d6:	782a      	ldrb	r2, [r5, #0]
 80119d8:	3501      	adds	r5, #1
 80119da:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80119dc:	5ba2      	ldrh	r2, [r4, r6]
 80119de:	2a00      	cmp	r2, #0
 80119e0:	d018      	beq.n	8011a14 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 80119e2:	3a01      	subs	r2, #1
 80119e4:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80119e6:	003b      	movs	r3, r7
 80119e8:	2200      	movs	r2, #0
 80119ea:	2180      	movs	r1, #128	; 0x80
 80119ec:	0020      	movs	r0, r4
 80119ee:	f7ff ff7f 	bl	80118f0 <UART_WaitOnFlagUntilTimeout>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d124      	bne.n	8011a40 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119f6:	68a2      	ldr	r2, [r4, #8]
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	4542      	cmp	r2, r8
 80119fc:	d1eb      	bne.n	80119d6 <HAL_UART_Transmit+0x4e>
 80119fe:	6922      	ldr	r2, [r4, #16]
 8011a00:	2a00      	cmp	r2, #0
 8011a02:	d1e8      	bne.n	80119d6 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011a04:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8011a06:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011a08:	05d2      	lsls	r2, r2, #23
 8011a0a:	0dd2      	lsrs	r2, r2, #23
 8011a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8011a0e:	5ba2      	ldrh	r2, [r4, r6]
 8011a10:	2a00      	cmp	r2, #0
 8011a12:	d1e6      	bne.n	80119e2 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8011a14:	003b      	movs	r3, r7
 8011a16:	2140      	movs	r1, #64	; 0x40
 8011a18:	0020      	movs	r0, r4
 8011a1a:	f7ff ff69 	bl	80118f0 <UART_WaitOnFlagUntilTimeout>
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	d10e      	bne.n	8011a40 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011a22:	2369      	movs	r3, #105	; 0x69
 8011a24:	5ce2      	ldrb	r2, [r4, r3]
 8011a26:	2a32      	cmp	r2, #50	; 0x32
 8011a28:	d00e      	beq.n	8011a48 <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8011a2e:	2368      	movs	r3, #104	; 0x68
 8011a30:	2200      	movs	r2, #0
 8011a32:	54e2      	strb	r2, [r4, r3]
}
 8011a34:	bc04      	pop	{r2}
 8011a36:	4690      	mov	r8, r2
 8011a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011a3a:	3110      	adds	r1, #16
 8011a3c:	54e1      	strb	r1, [r4, r3]
 8011a3e:	e7c3      	b.n	80119c8 <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8011a40:	2003      	movs	r0, #3
 8011a42:	e7f7      	b.n	8011a34 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8011a44:	2002      	movs	r0, #2
 8011a46:	e7f5      	b.n	8011a34 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011a48:	3a10      	subs	r2, #16
 8011a4a:	54e2      	strb	r2, [r4, r3]
 8011a4c:	e7ef      	b.n	8011a2e <HAL_UART_Transmit+0xa6>
 8011a4e:	46c0      	nop			; (mov r8, r8)

08011a50 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a50:	2300      	movs	r3, #0
{
 8011a52:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011a54:	4a1a      	ldr	r2, [pc, #104]	; (8011ac0 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a56:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011a58:	6803      	ldr	r3, [r0, #0]
{
 8011a5a:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d00d      	beq.n	8011a7c <UART_CheckIdleState+0x2c>
 8011a60:	4a18      	ldr	r2, [pc, #96]	; (8011ac4 <UART_CheckIdleState+0x74>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d00a      	beq.n	8011a7c <UART_CheckIdleState+0x2c>
 8011a66:	4a18      	ldr	r2, [pc, #96]	; (8011ac8 <UART_CheckIdleState+0x78>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d007      	beq.n	8011a7c <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8011a6c:	2369      	movs	r3, #105	; 0x69
 8011a6e:	2201      	movs	r2, #1
 8011a70:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011a72:	2200      	movs	r2, #0
  return HAL_OK;
 8011a74:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8011a76:	3b01      	subs	r3, #1
 8011a78:	54e2      	strb	r2, [r4, r3]
}
 8011a7a:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a7c:	681a      	ldr	r2, [r3, #0]
 8011a7e:	0712      	lsls	r2, r2, #28
 8011a80:	d40e      	bmi.n	8011aa0 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	075b      	lsls	r3, r3, #29
 8011a86:	d5f1      	bpl.n	8011a6c <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011a88:	23fa      	movs	r3, #250	; 0xfa
 8011a8a:	2180      	movs	r1, #128	; 0x80
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	2200      	movs	r2, #0
 8011a90:	03c9      	lsls	r1, r1, #15
 8011a92:	0020      	movs	r0, r4
 8011a94:	f7ff ff2c 	bl	80118f0 <UART_WaitOnFlagUntilTimeout>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d0e7      	beq.n	8011a6c <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8011a9c:	2003      	movs	r0, #3
 8011a9e:	e7ec      	b.n	8011a7a <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011aa0:	23fa      	movs	r3, #250	; 0xfa
 8011aa2:	2180      	movs	r1, #128	; 0x80
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	0389      	lsls	r1, r1, #14
 8011aaa:	0020      	movs	r0, r4
 8011aac:	f7ff ff20 	bl	80118f0 <UART_WaitOnFlagUntilTimeout>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d1f3      	bne.n	8011a9c <UART_CheckIdleState+0x4c>
 8011ab4:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	075b      	lsls	r3, r3, #29
 8011aba:	d5d7      	bpl.n	8011a6c <UART_CheckIdleState+0x1c>
 8011abc:	e7e4      	b.n	8011a88 <UART_CheckIdleState+0x38>
 8011abe:	46c0      	nop			; (mov r8, r8)
 8011ac0:	40013800 	.word	0x40013800
 8011ac4:	40004400 	.word	0x40004400
 8011ac8:	40004800 	.word	0x40004800

08011acc <HAL_UART_Init>:
{
 8011acc:	b510      	push	{r4, lr}
 8011ace:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011ad0:	d02a      	beq.n	8011b28 <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 8011ad2:	2369      	movs	r3, #105	; 0x69
 8011ad4:	5cc3      	ldrb	r3, [r0, r3]
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d020      	beq.n	8011b1e <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8011adc:	2369      	movs	r3, #105	; 0x69
 8011ade:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8011ae0:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8011ae2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8011ae4:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ae6:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8011ae8:	6813      	ldr	r3, [r2, #0]
 8011aea:	438b      	bics	r3, r1
 8011aec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011aee:	f7ff fdab 	bl	8011648 <UART_SetConfig>
 8011af2:	2801      	cmp	r0, #1
 8011af4:	d018      	beq.n	8011b28 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d117      	bne.n	8011b2c <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	490d      	ldr	r1, [pc, #52]	; (8011b34 <HAL_UART_Init+0x68>)
 8011b00:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8011b02:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011b04:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011b06:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011b08:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8011b0a:	689a      	ldr	r2, [r3, #8]
 8011b0c:	438a      	bics	r2, r1
 8011b0e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	3929      	subs	r1, #41	; 0x29
 8011b14:	430a      	orrs	r2, r1
 8011b16:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011b18:	f7ff ff9a 	bl	8011a50 <UART_CheckIdleState>
}
 8011b1c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011b1e:	2268      	movs	r2, #104	; 0x68
 8011b20:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8011b22:	f7fa ff1b 	bl	800c95c <HAL_UART_MspInit>
 8011b26:	e7d9      	b.n	8011adc <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8011b28:	2001      	movs	r0, #1
 8011b2a:	e7f7      	b.n	8011b1c <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 8011b2c:	0020      	movs	r0, r4
 8011b2e:	f7ff fe77 	bl	8011820 <UART_AdvFeatureConfig>
 8011b32:	e7e3      	b.n	8011afc <HAL_UART_Init+0x30>
 8011b34:	ffffb7ff 	.word	0xffffb7ff

08011b38 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b38:	2269      	movs	r2, #105	; 0x69
{
 8011b3a:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b3c:	5c81      	ldrb	r1, [r0, r2]
{
 8011b3e:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b40:	2912      	cmp	r1, #18
 8011b42:	d003      	beq.n	8011b4c <UART_Transmit_IT+0x14>
 8011b44:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8011b46:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011b48:	2a32      	cmp	r2, #50	; 0x32
 8011b4a:	d112      	bne.n	8011b72 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8011b4c:	2252      	movs	r2, #82	; 0x52
 8011b4e:	5a9a      	ldrh	r2, [r3, r2]
 8011b50:	6819      	ldr	r1, [r3, #0]
 8011b52:	2a00      	cmp	r2, #0
 8011b54:	d00e      	beq.n	8011b74 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b56:	2480      	movs	r4, #128	; 0x80
 8011b58:	689d      	ldr	r5, [r3, #8]
 8011b5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011b5c:	0164      	lsls	r4, r4, #5
 8011b5e:	42a5      	cmp	r5, r4
 8011b60:	d012      	beq.n	8011b88 <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8011b62:	1c44      	adds	r4, r0, #1
 8011b64:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011b66:	7800      	ldrb	r0, [r0, #0]
 8011b68:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8011b6a:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8011b6c:	2000      	movs	r0, #0
      huart->TxXferCount--;
 8011b6e:	3a01      	subs	r2, #1
 8011b70:	525a      	strh	r2, [r3, r1]
  }
}
 8011b72:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011b74:	680b      	ldr	r3, [r1, #0]
 8011b76:	3280      	adds	r2, #128	; 0x80
 8011b78:	4393      	bics	r3, r2
 8011b7a:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011b7c:	680b      	ldr	r3, [r1, #0]
 8011b7e:	3a40      	subs	r2, #64	; 0x40
 8011b80:	4313      	orrs	r3, r2
 8011b82:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8011b84:	2000      	movs	r0, #0
 8011b86:	e7f4      	b.n	8011b72 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b88:	691c      	ldr	r4, [r3, #16]
 8011b8a:	2c00      	cmp	r4, #0
 8011b8c:	d1e9      	bne.n	8011b62 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011b8e:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8011b90:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011b92:	05e4      	lsls	r4, r4, #23
 8011b94:	0de4      	lsrs	r4, r4, #23
 8011b96:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011b98:	64d8      	str	r0, [r3, #76]	; 0x4c
 8011b9a:	e7e6      	b.n	8011b6a <UART_Transmit_IT+0x32>

08011b9c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011b9c:	2140      	movs	r1, #64	; 0x40
 8011b9e:	6803      	ldr	r3, [r0, #0]
{
 8011ba0:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	438a      	bics	r2, r1
 8011ba6:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011ba8:	2269      	movs	r2, #105	; 0x69
 8011baa:	5c81      	ldrb	r1, [r0, r2]
 8011bac:	2932      	cmp	r1, #50	; 0x32
 8011bae:	d008      	beq.n	8011bc2 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011bb0:	2401      	movs	r4, #1
 8011bb2:	6899      	ldr	r1, [r3, #8]
 8011bb4:	43a1      	bics	r1, r4
 8011bb6:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8011bb8:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8011bba:	f7fa faef 	bl	800c19c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011bc2:	2322      	movs	r3, #34	; 0x22
 8011bc4:	5483      	strb	r3, [r0, r2]
 8011bc6:	e7f8      	b.n	8011bba <UART_EndTransmit_IT+0x1e>

08011bc8 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011bc8:	2369      	movs	r3, #105	; 0x69
{
 8011bca:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011bcc:	5cc2      	ldrb	r2, [r0, r3]
 8011bce:	2a22      	cmp	r2, #34	; 0x22
 8011bd0:	d003      	beq.n	8011bda <UART_Receive_IT+0x12>
 8011bd2:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011bd4:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011bd6:	2b32      	cmp	r3, #50	; 0x32
 8011bd8:	d12b      	bne.n	8011c32 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 8011bda:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bdc:	2180      	movs	r1, #128	; 0x80
 8011bde:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8011be0:	5ac3      	ldrh	r3, [r0, r3]
 8011be2:	6804      	ldr	r4, [r0, #0]
 8011be4:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011be6:	0149      	lsls	r1, r1, #5
 8011be8:	428d      	cmp	r5, r1
 8011bea:	d024      	beq.n	8011c36 <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011bec:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011bee:	1c54      	adds	r4, r2, #1
 8011bf0:	400b      	ands	r3, r1
 8011bf2:	6544      	str	r4, [r0, #84]	; 0x54
 8011bf4:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8011bf6:	225a      	movs	r2, #90	; 0x5a
 8011bf8:	5a83      	ldrh	r3, [r0, r2]
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8011c00:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d115      	bne.n	8011c32 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011c06:	2120      	movs	r1, #32
 8011c08:	6803      	ldr	r3, [r0, #0]
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	438a      	bics	r2, r1
 8011c0e:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011c10:	2269      	movs	r2, #105	; 0x69
 8011c12:	5c81      	ldrb	r1, [r0, r2]
 8011c14:	2932      	cmp	r1, #50	; 0x32
 8011c16:	d017      	beq.n	8011c48 <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011c18:	6819      	ldr	r1, [r3, #0]
 8011c1a:	4c0d      	ldr	r4, [pc, #52]	; (8011c50 <UART_Receive_IT+0x88>)
 8011c1c:	4021      	ands	r1, r4
 8011c1e:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011c20:	6899      	ldr	r1, [r3, #8]
 8011c22:	3403      	adds	r4, #3
 8011c24:	34ff      	adds	r4, #255	; 0xff
 8011c26:	43a1      	bics	r1, r4
 8011c28:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 8011c2a:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 8011c2c:	f7fa faf2 	bl	800c214 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011c30:	2200      	movs	r2, #0
  }
}
 8011c32:	0010      	movs	r0, r2
 8011c34:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c36:	6901      	ldr	r1, [r0, #16]
 8011c38:	2900      	cmp	r1, #0
 8011c3a:	d1d7      	bne.n	8011bec <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8011c3c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8011c3e:	400b      	ands	r3, r1
 8011c40:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8011c42:	3202      	adds	r2, #2
 8011c44:	6542      	str	r2, [r0, #84]	; 0x54
 8011c46:	e7d6      	b.n	8011bf6 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011c48:	2312      	movs	r3, #18
 8011c4a:	5483      	strb	r3, [r0, r2]
 8011c4c:	e7ee      	b.n	8011c2c <UART_Receive_IT+0x64>
 8011c4e:	46c0      	nop			; (mov r8, r8)
 8011c50:	fffffeff 	.word	0xfffffeff

08011c54 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011c54:	4770      	bx	lr
 8011c56:	46c0      	nop			; (mov r8, r8)

08011c58 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011c58:	2201      	movs	r2, #1
 8011c5a:	6803      	ldr	r3, [r0, #0]
{
 8011c5c:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011c5e:	69d9      	ldr	r1, [r3, #28]
{
 8011c60:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011c62:	420a      	tst	r2, r1
 8011c64:	d002      	beq.n	8011c6c <HAL_UART_IRQHandler+0x14>
 8011c66:	6819      	ldr	r1, [r3, #0]
 8011c68:	05c9      	lsls	r1, r1, #23
 8011c6a:	d456      	bmi.n	8011d1a <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	69d9      	ldr	r1, [r3, #28]
 8011c70:	420a      	tst	r2, r1
 8011c72:	d003      	beq.n	8011c7c <HAL_UART_IRQHandler+0x24>
 8011c74:	2101      	movs	r1, #1
 8011c76:	6898      	ldr	r0, [r3, #8]
 8011c78:	4201      	tst	r1, r0
 8011c7a:	d146      	bne.n	8011d0a <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011c7c:	2204      	movs	r2, #4
 8011c7e:	69d9      	ldr	r1, [r3, #28]
 8011c80:	420a      	tst	r2, r1
 8011c82:	d003      	beq.n	8011c8c <HAL_UART_IRQHandler+0x34>
 8011c84:	2101      	movs	r1, #1
 8011c86:	6898      	ldr	r0, [r3, #8]
 8011c88:	4201      	tst	r1, r0
 8011c8a:	d136      	bne.n	8011cfa <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011c8c:	2208      	movs	r2, #8
 8011c8e:	69d9      	ldr	r1, [r3, #28]
 8011c90:	420a      	tst	r2, r1
 8011c92:	d003      	beq.n	8011c9c <HAL_UART_IRQHandler+0x44>
 8011c94:	2101      	movs	r1, #1
 8011c96:	6898      	ldr	r0, [r3, #8]
 8011c98:	4201      	tst	r1, r0
 8011c9a:	d120      	bne.n	8011cde <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c9c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011c9e:	2a00      	cmp	r2, #0
 8011ca0:	d126      	bne.n	8011cf0 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8011ca2:	2280      	movs	r2, #128	; 0x80
 8011ca4:	69d9      	ldr	r1, [r3, #28]
 8011ca6:	0352      	lsls	r2, r2, #13
 8011ca8:	4211      	tst	r1, r2
 8011caa:	d002      	beq.n	8011cb2 <HAL_UART_IRQHandler+0x5a>
 8011cac:	6899      	ldr	r1, [r3, #8]
 8011cae:	0249      	lsls	r1, r1, #9
 8011cb0:	d43e      	bmi.n	8011d30 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011cb2:	2220      	movs	r2, #32
 8011cb4:	69d9      	ldr	r1, [r3, #28]
 8011cb6:	420a      	tst	r2, r1
 8011cb8:	d002      	beq.n	8011cc0 <HAL_UART_IRQHandler+0x68>
 8011cba:	6819      	ldr	r1, [r3, #0]
 8011cbc:	420a      	tst	r2, r1
 8011cbe:	d140      	bne.n	8011d42 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011cc0:	2280      	movs	r2, #128	; 0x80
 8011cc2:	69d9      	ldr	r1, [r3, #28]
 8011cc4:	420a      	tst	r2, r1
 8011cc6:	d002      	beq.n	8011cce <HAL_UART_IRQHandler+0x76>
 8011cc8:	6819      	ldr	r1, [r3, #0]
 8011cca:	420a      	tst	r2, r1
 8011ccc:	d142      	bne.n	8011d54 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011cce:	2240      	movs	r2, #64	; 0x40
 8011cd0:	69d9      	ldr	r1, [r3, #28]
 8011cd2:	420a      	tst	r2, r1
 8011cd4:	d002      	beq.n	8011cdc <HAL_UART_IRQHandler+0x84>
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	421a      	tst	r2, r3
 8011cda:	d125      	bne.n	8011d28 <HAL_UART_IRQHandler+0xd0>
}
 8011cdc:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011cde:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011ce0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011ce2:	4302      	orrs	r2, r0
 8011ce4:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011ce6:	2269      	movs	r2, #105	; 0x69
 8011ce8:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011cea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011cec:	2a00      	cmp	r2, #0
 8011cee:	d0d8      	beq.n	8011ca2 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8011cf0:	0020      	movs	r0, r4
 8011cf2:	f7fa fa6b 	bl	800c1cc <HAL_UART_ErrorCallback>
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	e7d3      	b.n	8011ca2 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011cfa:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011cfc:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011cfe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011d00:	4302      	orrs	r2, r0
 8011d02:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011d04:	2269      	movs	r2, #105	; 0x69
 8011d06:	54a1      	strb	r1, [r4, r2]
 8011d08:	e7c0      	b.n	8011c8c <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d0a:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011d0c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d0e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011d10:	4302      	orrs	r2, r0
 8011d12:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011d14:	2269      	movs	r2, #105	; 0x69
 8011d16:	54a1      	strb	r1, [r4, r2]
 8011d18:	e7b0      	b.n	8011c7c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011d1a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011d1c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8011d1e:	4311      	orrs	r1, r2
 8011d20:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011d22:	2169      	movs	r1, #105	; 0x69
 8011d24:	5442      	strb	r2, [r0, r1]
 8011d26:	e7a1      	b.n	8011c6c <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8011d28:	0020      	movs	r0, r4
 8011d2a:	f7ff ff37 	bl	8011b9c <UART_EndTransmit_IT>
}
 8011d2e:	e7d5      	b.n	8011cdc <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011d30:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8011d32:	2369      	movs	r3, #105	; 0x69
 8011d34:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8011d36:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8011d38:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011d3a:	f7ff ff8b 	bl	8011c54 <HAL_UARTEx_WakeupCallback>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	e7b7      	b.n	8011cb2 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8011d42:	0020      	movs	r0, r4
 8011d44:	f7ff ff40 	bl	8011bc8 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d48:	2108      	movs	r1, #8
 8011d4a:	6823      	ldr	r3, [r4, #0]
 8011d4c:	699a      	ldr	r2, [r3, #24]
 8011d4e:	430a      	orrs	r2, r1
 8011d50:	619a      	str	r2, [r3, #24]
 8011d52:	e7b5      	b.n	8011cc0 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8011d54:	0020      	movs	r0, r4
 8011d56:	f7ff feef 	bl	8011b38 <UART_Transmit_IT>
 8011d5a:	6823      	ldr	r3, [r4, #0]
 8011d5c:	e7b7      	b.n	8011cce <HAL_UART_IRQHandler+0x76>
 8011d5e:	46c0      	nop			; (mov r8, r8)

08011d60 <main>:
uint8_t buff_rx[5];
/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8011d60:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8011d62:	f7f1 fdeb 	bl	800393c <Module_Init>
 8011d66:	e7fe      	b.n	8011d66 <main+0x6>

08011d68 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8011d68:	b510      	push	{r4, lr}
	HAL_UART_Receive_DMA(&huart1, buff_rx,sizeof(buff_rx));
 8011d6a:	2205      	movs	r2, #5
 8011d6c:	4902      	ldr	r1, [pc, #8]	; (8011d78 <UserTask+0x10>)
 8011d6e:	4803      	ldr	r0, [pc, #12]	; (8011d7c <UserTask+0x14>)
 8011d70:	f7ff fbf2 	bl	8011558 <HAL_UART_Receive_DMA>
 8011d74:	e7fe      	b.n	8011d74 <UserTask+0xc>
 8011d76:	46c0      	nop			; (mov r8, r8)
 8011d78:	20006dd8 	.word	0x20006dd8
 8011d7c:	20006a44 	.word	0x20006a44

08011d80 <atof>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	2100      	movs	r1, #0
 8011d84:	f001 fb74 	bl	8013470 <strtod>
 8011d88:	bd10      	pop	{r4, pc}

08011d8a <atoi>:
 8011d8a:	b510      	push	{r4, lr}
 8011d8c:	220a      	movs	r2, #10
 8011d8e:	2100      	movs	r1, #0
 8011d90:	f001 fc3a 	bl	8013608 <strtol>
 8011d94:	bd10      	pop	{r4, pc}

08011d96 <atol>:
 8011d96:	b510      	push	{r4, lr}
 8011d98:	220a      	movs	r2, #10
 8011d9a:	2100      	movs	r1, #0
 8011d9c:	f001 fc34 	bl	8013608 <strtol>
 8011da0:	bd10      	pop	{r4, pc}
	...

08011da4 <calloc>:
 8011da4:	b510      	push	{r4, lr}
 8011da6:	4b03      	ldr	r3, [pc, #12]	; (8011db4 <calloc+0x10>)
 8011da8:	000a      	movs	r2, r1
 8011daa:	0001      	movs	r1, r0
 8011dac:	6818      	ldr	r0, [r3, #0]
 8011dae:	f000 f803 	bl	8011db8 <_calloc_r>
 8011db2:	bd10      	pop	{r4, pc}
 8011db4:	200000cc 	.word	0x200000cc

08011db8 <_calloc_r>:
 8011db8:	b510      	push	{r4, lr}
 8011dba:	4351      	muls	r1, r2
 8011dbc:	f000 f872 	bl	8011ea4 <_malloc_r>
 8011dc0:	1e04      	subs	r4, r0, #0
 8011dc2:	d01a      	beq.n	8011dfa <_calloc_r+0x42>
 8011dc4:	0003      	movs	r3, r0
 8011dc6:	3b08      	subs	r3, #8
 8011dc8:	685a      	ldr	r2, [r3, #4]
 8011dca:	2303      	movs	r3, #3
 8011dcc:	439a      	bics	r2, r3
 8011dce:	3a04      	subs	r2, #4
 8011dd0:	2a24      	cmp	r2, #36	; 0x24
 8011dd2:	d819      	bhi.n	8011e08 <_calloc_r+0x50>
 8011dd4:	0003      	movs	r3, r0
 8011dd6:	2a13      	cmp	r2, #19
 8011dd8:	d90b      	bls.n	8011df2 <_calloc_r+0x3a>
 8011dda:	2100      	movs	r1, #0
 8011ddc:	3308      	adds	r3, #8
 8011dde:	6001      	str	r1, [r0, #0]
 8011de0:	6041      	str	r1, [r0, #4]
 8011de2:	2a1b      	cmp	r2, #27
 8011de4:	d905      	bls.n	8011df2 <_calloc_r+0x3a>
 8011de6:	6081      	str	r1, [r0, #8]
 8011de8:	60c1      	str	r1, [r0, #12]
 8011dea:	2a24      	cmp	r2, #36	; 0x24
 8011dec:	d007      	beq.n	8011dfe <_calloc_r+0x46>
 8011dee:	0003      	movs	r3, r0
 8011df0:	3310      	adds	r3, #16
 8011df2:	2200      	movs	r2, #0
 8011df4:	601a      	str	r2, [r3, #0]
 8011df6:	605a      	str	r2, [r3, #4]
 8011df8:	609a      	str	r2, [r3, #8]
 8011dfa:	0020      	movs	r0, r4
 8011dfc:	bd10      	pop	{r4, pc}
 8011dfe:	0003      	movs	r3, r0
 8011e00:	6101      	str	r1, [r0, #16]
 8011e02:	3318      	adds	r3, #24
 8011e04:	6141      	str	r1, [r0, #20]
 8011e06:	e7f4      	b.n	8011df2 <_calloc_r+0x3a>
 8011e08:	2100      	movs	r1, #0
 8011e0a:	f000 fa8d 	bl	8012328 <memset>
 8011e0e:	e7f4      	b.n	8011dfa <_calloc_r+0x42>

08011e10 <__libc_init_array>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	2600      	movs	r6, #0
 8011e14:	4d0c      	ldr	r5, [pc, #48]	; (8011e48 <__libc_init_array+0x38>)
 8011e16:	4c0d      	ldr	r4, [pc, #52]	; (8011e4c <__libc_init_array+0x3c>)
 8011e18:	1b64      	subs	r4, r4, r5
 8011e1a:	10a4      	asrs	r4, r4, #2
 8011e1c:	42a6      	cmp	r6, r4
 8011e1e:	d109      	bne.n	8011e34 <__libc_init_array+0x24>
 8011e20:	2600      	movs	r6, #0
 8011e22:	f004 fe41 	bl	8016aa8 <_init>
 8011e26:	4d0a      	ldr	r5, [pc, #40]	; (8011e50 <__libc_init_array+0x40>)
 8011e28:	4c0a      	ldr	r4, [pc, #40]	; (8011e54 <__libc_init_array+0x44>)
 8011e2a:	1b64      	subs	r4, r4, r5
 8011e2c:	10a4      	asrs	r4, r4, #2
 8011e2e:	42a6      	cmp	r6, r4
 8011e30:	d105      	bne.n	8011e3e <__libc_init_array+0x2e>
 8011e32:	bd70      	pop	{r4, r5, r6, pc}
 8011e34:	00b3      	lsls	r3, r6, #2
 8011e36:	58eb      	ldr	r3, [r5, r3]
 8011e38:	4798      	blx	r3
 8011e3a:	3601      	adds	r6, #1
 8011e3c:	e7ee      	b.n	8011e1c <__libc_init_array+0xc>
 8011e3e:	00b3      	lsls	r3, r6, #2
 8011e40:	58eb      	ldr	r3, [r5, r3]
 8011e42:	4798      	blx	r3
 8011e44:	3601      	adds	r6, #1
 8011e46:	e7f2      	b.n	8011e2e <__libc_init_array+0x1e>
 8011e48:	08019ccc 	.word	0x08019ccc
 8011e4c:	08019ccc 	.word	0x08019ccc
 8011e50:	08019ccc 	.word	0x08019ccc
 8011e54:	08019cd4 	.word	0x08019cd4

08011e58 <__locale_ctype_ptr_l>:
 8011e58:	30ec      	adds	r0, #236	; 0xec
 8011e5a:	6800      	ldr	r0, [r0, #0]
 8011e5c:	4770      	bx	lr
	...

08011e60 <__locale_ctype_ptr>:
 8011e60:	4b04      	ldr	r3, [pc, #16]	; (8011e74 <__locale_ctype_ptr+0x14>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d100      	bne.n	8011e6c <__locale_ctype_ptr+0xc>
 8011e6a:	4b03      	ldr	r3, [pc, #12]	; (8011e78 <__locale_ctype_ptr+0x18>)
 8011e6c:	33ec      	adds	r3, #236	; 0xec
 8011e6e:	6818      	ldr	r0, [r3, #0]
 8011e70:	4770      	bx	lr
 8011e72:	46c0      	nop			; (mov r8, r8)
 8011e74:	200000cc 	.word	0x200000cc
 8011e78:	200004f8 	.word	0x200004f8

08011e7c <malloc>:
 8011e7c:	b510      	push	{r4, lr}
 8011e7e:	4b03      	ldr	r3, [pc, #12]	; (8011e8c <malloc+0x10>)
 8011e80:	0001      	movs	r1, r0
 8011e82:	6818      	ldr	r0, [r3, #0]
 8011e84:	f000 f80e 	bl	8011ea4 <_malloc_r>
 8011e88:	bd10      	pop	{r4, pc}
 8011e8a:	46c0      	nop			; (mov r8, r8)
 8011e8c:	200000cc 	.word	0x200000cc

08011e90 <free>:
 8011e90:	b510      	push	{r4, lr}
 8011e92:	4b03      	ldr	r3, [pc, #12]	; (8011ea0 <free+0x10>)
 8011e94:	0001      	movs	r1, r0
 8011e96:	6818      	ldr	r0, [r3, #0]
 8011e98:	f003 fd10 	bl	80158bc <_free_r>
 8011e9c:	bd10      	pop	{r4, pc}
 8011e9e:	46c0      	nop			; (mov r8, r8)
 8011ea0:	200000cc 	.word	0x200000cc

08011ea4 <_malloc_r>:
 8011ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ea6:	000d      	movs	r5, r1
 8011ea8:	b085      	sub	sp, #20
 8011eaa:	350b      	adds	r5, #11
 8011eac:	9001      	str	r0, [sp, #4]
 8011eae:	2d16      	cmp	r5, #22
 8011eb0:	d908      	bls.n	8011ec4 <_malloc_r+0x20>
 8011eb2:	2307      	movs	r3, #7
 8011eb4:	439d      	bics	r5, r3
 8011eb6:	d506      	bpl.n	8011ec6 <_malloc_r+0x22>
 8011eb8:	230c      	movs	r3, #12
 8011eba:	9a01      	ldr	r2, [sp, #4]
 8011ebc:	6013      	str	r3, [r2, #0]
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	b005      	add	sp, #20
 8011ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ec4:	2510      	movs	r5, #16
 8011ec6:	428d      	cmp	r5, r1
 8011ec8:	d3f6      	bcc.n	8011eb8 <_malloc_r+0x14>
 8011eca:	9801      	ldr	r0, [sp, #4]
 8011ecc:	f000 fa34 	bl	8012338 <__malloc_lock>
 8011ed0:	23f8      	movs	r3, #248	; 0xf8
 8011ed2:	33ff      	adds	r3, #255	; 0xff
 8011ed4:	4ac4      	ldr	r2, [pc, #784]	; (80121e8 <_malloc_r+0x344>)
 8011ed6:	429d      	cmp	r5, r3
 8011ed8:	d820      	bhi.n	8011f1c <_malloc_r+0x78>
 8011eda:	0029      	movs	r1, r5
 8011edc:	3108      	adds	r1, #8
 8011ede:	1851      	adds	r1, r2, r1
 8011ee0:	0008      	movs	r0, r1
 8011ee2:	684c      	ldr	r4, [r1, #4]
 8011ee4:	3808      	subs	r0, #8
 8011ee6:	08eb      	lsrs	r3, r5, #3
 8011ee8:	4284      	cmp	r4, r0
 8011eea:	d104      	bne.n	8011ef6 <_malloc_r+0x52>
 8011eec:	68cc      	ldr	r4, [r1, #12]
 8011eee:	3302      	adds	r3, #2
 8011ef0:	469c      	mov	ip, r3
 8011ef2:	42a1      	cmp	r1, r4
 8011ef4:	d02a      	beq.n	8011f4c <_malloc_r+0xa8>
 8011ef6:	2303      	movs	r3, #3
 8011ef8:	6862      	ldr	r2, [r4, #4]
 8011efa:	68a1      	ldr	r1, [r4, #8]
 8011efc:	439a      	bics	r2, r3
 8011efe:	0013      	movs	r3, r2
 8011f00:	68e2      	ldr	r2, [r4, #12]
 8011f02:	18e3      	adds	r3, r4, r3
 8011f04:	60ca      	str	r2, [r1, #12]
 8011f06:	6091      	str	r1, [r2, #8]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	6859      	ldr	r1, [r3, #4]
 8011f0c:	430a      	orrs	r2, r1
 8011f0e:	605a      	str	r2, [r3, #4]
 8011f10:	9801      	ldr	r0, [sp, #4]
 8011f12:	f000 fa19 	bl	8012348 <__malloc_unlock>
 8011f16:	0020      	movs	r0, r4
 8011f18:	3008      	adds	r0, #8
 8011f1a:	e7d1      	b.n	8011ec0 <_malloc_r+0x1c>
 8011f1c:	0a69      	lsrs	r1, r5, #9
 8011f1e:	233f      	movs	r3, #63	; 0x3f
 8011f20:	2900      	cmp	r1, #0
 8011f22:	d003      	beq.n	8011f2c <_malloc_r+0x88>
 8011f24:	2904      	cmp	r1, #4
 8011f26:	d828      	bhi.n	8011f7a <_malloc_r+0xd6>
 8011f28:	09ab      	lsrs	r3, r5, #6
 8011f2a:	3338      	adds	r3, #56	; 0x38
 8011f2c:	2103      	movs	r1, #3
 8011f2e:	468c      	mov	ip, r1
 8011f30:	00d8      	lsls	r0, r3, #3
 8011f32:	1880      	adds	r0, r0, r2
 8011f34:	68c4      	ldr	r4, [r0, #12]
 8011f36:	4284      	cmp	r4, r0
 8011f38:	d006      	beq.n	8011f48 <_malloc_r+0xa4>
 8011f3a:	4666      	mov	r6, ip
 8011f3c:	6861      	ldr	r1, [r4, #4]
 8011f3e:	43b1      	bics	r1, r6
 8011f40:	1b4f      	subs	r7, r1, r5
 8011f42:	2f0f      	cmp	r7, #15
 8011f44:	dd31      	ble.n	8011faa <_malloc_r+0x106>
 8011f46:	3b01      	subs	r3, #1
 8011f48:	3301      	adds	r3, #1
 8011f4a:	469c      	mov	ip, r3
 8011f4c:	6914      	ldr	r4, [r2, #16]
 8011f4e:	49a7      	ldr	r1, [pc, #668]	; (80121ec <_malloc_r+0x348>)
 8011f50:	428c      	cmp	r4, r1
 8011f52:	d055      	beq.n	8012000 <_malloc_r+0x15c>
 8011f54:	2303      	movs	r3, #3
 8011f56:	6860      	ldr	r0, [r4, #4]
 8011f58:	4398      	bics	r0, r3
 8011f5a:	0003      	movs	r3, r0
 8011f5c:	1b46      	subs	r6, r0, r5
 8011f5e:	2e0f      	cmp	r6, #15
 8011f60:	dd31      	ble.n	8011fc6 <_malloc_r+0x122>
 8011f62:	2701      	movs	r7, #1
 8011f64:	1960      	adds	r0, r4, r5
 8011f66:	433d      	orrs	r5, r7
 8011f68:	4337      	orrs	r7, r6
 8011f6a:	6065      	str	r5, [r4, #4]
 8011f6c:	6150      	str	r0, [r2, #20]
 8011f6e:	6110      	str	r0, [r2, #16]
 8011f70:	60c1      	str	r1, [r0, #12]
 8011f72:	6081      	str	r1, [r0, #8]
 8011f74:	6047      	str	r7, [r0, #4]
 8011f76:	50e6      	str	r6, [r4, r3]
 8011f78:	e7ca      	b.n	8011f10 <_malloc_r+0x6c>
 8011f7a:	2914      	cmp	r1, #20
 8011f7c:	d802      	bhi.n	8011f84 <_malloc_r+0xe0>
 8011f7e:	000b      	movs	r3, r1
 8011f80:	335b      	adds	r3, #91	; 0x5b
 8011f82:	e7d3      	b.n	8011f2c <_malloc_r+0x88>
 8011f84:	2954      	cmp	r1, #84	; 0x54
 8011f86:	d802      	bhi.n	8011f8e <_malloc_r+0xea>
 8011f88:	0b2b      	lsrs	r3, r5, #12
 8011f8a:	336e      	adds	r3, #110	; 0x6e
 8011f8c:	e7ce      	b.n	8011f2c <_malloc_r+0x88>
 8011f8e:	23aa      	movs	r3, #170	; 0xaa
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4299      	cmp	r1, r3
 8011f94:	d802      	bhi.n	8011f9c <_malloc_r+0xf8>
 8011f96:	0beb      	lsrs	r3, r5, #15
 8011f98:	3377      	adds	r3, #119	; 0x77
 8011f9a:	e7c7      	b.n	8011f2c <_malloc_r+0x88>
 8011f9c:	4894      	ldr	r0, [pc, #592]	; (80121f0 <_malloc_r+0x34c>)
 8011f9e:	237e      	movs	r3, #126	; 0x7e
 8011fa0:	4281      	cmp	r1, r0
 8011fa2:	d8c3      	bhi.n	8011f2c <_malloc_r+0x88>
 8011fa4:	0cab      	lsrs	r3, r5, #18
 8011fa6:	337c      	adds	r3, #124	; 0x7c
 8011fa8:	e7c0      	b.n	8011f2c <_malloc_r+0x88>
 8011faa:	68e6      	ldr	r6, [r4, #12]
 8011fac:	2f00      	cmp	r7, #0
 8011fae:	db08      	blt.n	8011fc2 <_malloc_r+0x11e>
 8011fb0:	68a3      	ldr	r3, [r4, #8]
 8011fb2:	1861      	adds	r1, r4, r1
 8011fb4:	60de      	str	r6, [r3, #12]
 8011fb6:	60b3      	str	r3, [r6, #8]
 8011fb8:	2301      	movs	r3, #1
 8011fba:	684a      	ldr	r2, [r1, #4]
 8011fbc:	4313      	orrs	r3, r2
 8011fbe:	604b      	str	r3, [r1, #4]
 8011fc0:	e7a6      	b.n	8011f10 <_malloc_r+0x6c>
 8011fc2:	0034      	movs	r4, r6
 8011fc4:	e7b7      	b.n	8011f36 <_malloc_r+0x92>
 8011fc6:	6151      	str	r1, [r2, #20]
 8011fc8:	6111      	str	r1, [r2, #16]
 8011fca:	2e00      	cmp	r6, #0
 8011fcc:	db05      	blt.n	8011fda <_malloc_r+0x136>
 8011fce:	2101      	movs	r1, #1
 8011fd0:	1823      	adds	r3, r4, r0
 8011fd2:	685a      	ldr	r2, [r3, #4]
 8011fd4:	4311      	orrs	r1, r2
 8011fd6:	6059      	str	r1, [r3, #4]
 8011fd8:	e79a      	b.n	8011f10 <_malloc_r+0x6c>
 8011fda:	4986      	ldr	r1, [pc, #536]	; (80121f4 <_malloc_r+0x350>)
 8011fdc:	6857      	ldr	r7, [r2, #4]
 8011fde:	4288      	cmp	r0, r1
 8011fe0:	d900      	bls.n	8011fe4 <_malloc_r+0x140>
 8011fe2:	e090      	b.n	8012106 <_malloc_r+0x262>
 8011fe4:	08c3      	lsrs	r3, r0, #3
 8011fe6:	39ff      	subs	r1, #255	; 0xff
 8011fe8:	1098      	asrs	r0, r3, #2
 8011fea:	39ff      	subs	r1, #255	; 0xff
 8011fec:	4081      	lsls	r1, r0
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	4339      	orrs	r1, r7
 8011ff2:	6051      	str	r1, [r2, #4]
 8011ff4:	189a      	adds	r2, r3, r2
 8011ff6:	6893      	ldr	r3, [r2, #8]
 8011ff8:	60e2      	str	r2, [r4, #12]
 8011ffa:	60a3      	str	r3, [r4, #8]
 8011ffc:	6094      	str	r4, [r2, #8]
 8011ffe:	60dc      	str	r4, [r3, #12]
 8012000:	4663      	mov	r3, ip
 8012002:	2201      	movs	r2, #1
 8012004:	4978      	ldr	r1, [pc, #480]	; (80121e8 <_malloc_r+0x344>)
 8012006:	109b      	asrs	r3, r3, #2
 8012008:	6848      	ldr	r0, [r1, #4]
 801200a:	409a      	lsls	r2, r3
 801200c:	4290      	cmp	r0, r2
 801200e:	d32d      	bcc.n	801206c <_malloc_r+0x1c8>
 8012010:	4202      	tst	r2, r0
 8012012:	d109      	bne.n	8012028 <_malloc_r+0x184>
 8012014:	2303      	movs	r3, #3
 8012016:	4664      	mov	r4, ip
 8012018:	439c      	bics	r4, r3
 801201a:	0023      	movs	r3, r4
 801201c:	3304      	adds	r3, #4
 801201e:	469c      	mov	ip, r3
 8012020:	0052      	lsls	r2, r2, #1
 8012022:	4202      	tst	r2, r0
 8012024:	d100      	bne.n	8012028 <_malloc_r+0x184>
 8012026:	e0a4      	b.n	8012172 <_malloc_r+0x2ce>
 8012028:	4663      	mov	r3, ip
 801202a:	00db      	lsls	r3, r3, #3
 801202c:	18cb      	adds	r3, r1, r3
 801202e:	9303      	str	r3, [sp, #12]
 8012030:	001f      	movs	r7, r3
 8012032:	4663      	mov	r3, ip
 8012034:	9302      	str	r3, [sp, #8]
 8012036:	68fc      	ldr	r4, [r7, #12]
 8012038:	42bc      	cmp	r4, r7
 801203a:	d000      	beq.n	801203e <_malloc_r+0x19a>
 801203c:	e09c      	b.n	8012178 <_malloc_r+0x2d4>
 801203e:	2003      	movs	r0, #3
 8012040:	9b02      	ldr	r3, [sp, #8]
 8012042:	3708      	adds	r7, #8
 8012044:	3301      	adds	r3, #1
 8012046:	9302      	str	r3, [sp, #8]
 8012048:	4203      	tst	r3, r0
 801204a:	d1f4      	bne.n	8012036 <_malloc_r+0x192>
 801204c:	4663      	mov	r3, ip
 801204e:	2003      	movs	r0, #3
 8012050:	4203      	tst	r3, r0
 8012052:	d000      	beq.n	8012056 <_malloc_r+0x1b2>
 8012054:	e0b3      	b.n	80121be <_malloc_r+0x31a>
 8012056:	684b      	ldr	r3, [r1, #4]
 8012058:	4393      	bics	r3, r2
 801205a:	604b      	str	r3, [r1, #4]
 801205c:	4b62      	ldr	r3, [pc, #392]	; (80121e8 <_malloc_r+0x344>)
 801205e:	0052      	lsls	r2, r2, #1
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	4293      	cmp	r3, r2
 8012064:	d302      	bcc.n	801206c <_malloc_r+0x1c8>
 8012066:	2a00      	cmp	r2, #0
 8012068:	d000      	beq.n	801206c <_malloc_r+0x1c8>
 801206a:	e0b9      	b.n	80121e0 <_malloc_r+0x33c>
 801206c:	2303      	movs	r3, #3
 801206e:	688f      	ldr	r7, [r1, #8]
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	439a      	bics	r2, r3
 8012074:	9202      	str	r2, [sp, #8]
 8012076:	42aa      	cmp	r2, r5
 8012078:	d303      	bcc.n	8012082 <_malloc_r+0x1de>
 801207a:	1b52      	subs	r2, r2, r5
 801207c:	2a0f      	cmp	r2, #15
 801207e:	dd00      	ble.n	8012082 <_malloc_r+0x1de>
 8012080:	e116      	b.n	80122b0 <_malloc_r+0x40c>
 8012082:	4b5d      	ldr	r3, [pc, #372]	; (80121f8 <_malloc_r+0x354>)
 8012084:	2008      	movs	r0, #8
 8012086:	681e      	ldr	r6, [r3, #0]
 8012088:	f002 fd26 	bl	8014ad8 <sysconf>
 801208c:	4b5b      	ldr	r3, [pc, #364]	; (80121fc <_malloc_r+0x358>)
 801208e:	3610      	adds	r6, #16
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	1976      	adds	r6, r6, r5
 8012094:	9003      	str	r0, [sp, #12]
 8012096:	3301      	adds	r3, #1
 8012098:	d003      	beq.n	80120a2 <_malloc_r+0x1fe>
 801209a:	3e01      	subs	r6, #1
 801209c:	1836      	adds	r6, r6, r0
 801209e:	4243      	negs	r3, r0
 80120a0:	401e      	ands	r6, r3
 80120a2:	0031      	movs	r1, r6
 80120a4:	9801      	ldr	r0, [sp, #4]
 80120a6:	f000 fb27 	bl	80126f8 <_sbrk_r>
 80120aa:	0004      	movs	r4, r0
 80120ac:	1c43      	adds	r3, r0, #1
 80120ae:	d100      	bne.n	80120b2 <_malloc_r+0x20e>
 80120b0:	e0d6      	b.n	8012260 <_malloc_r+0x3bc>
 80120b2:	9b02      	ldr	r3, [sp, #8]
 80120b4:	18fb      	adds	r3, r7, r3
 80120b6:	4283      	cmp	r3, r0
 80120b8:	d903      	bls.n	80120c2 <_malloc_r+0x21e>
 80120ba:	4a4b      	ldr	r2, [pc, #300]	; (80121e8 <_malloc_r+0x344>)
 80120bc:	4297      	cmp	r7, r2
 80120be:	d000      	beq.n	80120c2 <_malloc_r+0x21e>
 80120c0:	e0ce      	b.n	8012260 <_malloc_r+0x3bc>
 80120c2:	494f      	ldr	r1, [pc, #316]	; (8012200 <_malloc_r+0x35c>)
 80120c4:	680a      	ldr	r2, [r1, #0]
 80120c6:	18b2      	adds	r2, r6, r2
 80120c8:	600a      	str	r2, [r1, #0]
 80120ca:	9903      	ldr	r1, [sp, #12]
 80120cc:	4694      	mov	ip, r2
 80120ce:	1e48      	subs	r0, r1, #1
 80120d0:	42a3      	cmp	r3, r4
 80120d2:	d000      	beq.n	80120d6 <_malloc_r+0x232>
 80120d4:	e09a      	b.n	801220c <_malloc_r+0x368>
 80120d6:	4203      	tst	r3, r0
 80120d8:	d000      	beq.n	80120dc <_malloc_r+0x238>
 80120da:	e097      	b.n	801220c <_malloc_r+0x368>
 80120dc:	9a02      	ldr	r2, [sp, #8]
 80120de:	4b42      	ldr	r3, [pc, #264]	; (80121e8 <_malloc_r+0x344>)
 80120e0:	1992      	adds	r2, r2, r6
 80120e2:	2601      	movs	r6, #1
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	4316      	orrs	r6, r2
 80120e8:	605e      	str	r6, [r3, #4]
 80120ea:	4b45      	ldr	r3, [pc, #276]	; (8012200 <_malloc_r+0x35c>)
 80120ec:	4a45      	ldr	r2, [pc, #276]	; (8012204 <_malloc_r+0x360>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	6811      	ldr	r1, [r2, #0]
 80120f2:	428b      	cmp	r3, r1
 80120f4:	d900      	bls.n	80120f8 <_malloc_r+0x254>
 80120f6:	6013      	str	r3, [r2, #0]
 80120f8:	4a43      	ldr	r2, [pc, #268]	; (8012208 <_malloc_r+0x364>)
 80120fa:	6811      	ldr	r1, [r2, #0]
 80120fc:	428b      	cmp	r3, r1
 80120fe:	d800      	bhi.n	8012102 <_malloc_r+0x25e>
 8012100:	e0ae      	b.n	8012260 <_malloc_r+0x3bc>
 8012102:	6013      	str	r3, [r2, #0]
 8012104:	e0ac      	b.n	8012260 <_malloc_r+0x3bc>
 8012106:	0a40      	lsrs	r0, r0, #9
 8012108:	2804      	cmp	r0, #4
 801210a:	d810      	bhi.n	801212e <_malloc_r+0x28a>
 801210c:	0999      	lsrs	r1, r3, #6
 801210e:	3138      	adds	r1, #56	; 0x38
 8012110:	00ce      	lsls	r6, r1, #3
 8012112:	18b6      	adds	r6, r6, r2
 8012114:	68b0      	ldr	r0, [r6, #8]
 8012116:	4286      	cmp	r6, r0
 8012118:	d124      	bne.n	8012164 <_malloc_r+0x2c0>
 801211a:	2301      	movs	r3, #1
 801211c:	1089      	asrs	r1, r1, #2
 801211e:	408b      	lsls	r3, r1
 8012120:	433b      	orrs	r3, r7
 8012122:	6053      	str	r3, [r2, #4]
 8012124:	60e6      	str	r6, [r4, #12]
 8012126:	60a0      	str	r0, [r4, #8]
 8012128:	60b4      	str	r4, [r6, #8]
 801212a:	60c4      	str	r4, [r0, #12]
 801212c:	e768      	b.n	8012000 <_malloc_r+0x15c>
 801212e:	2814      	cmp	r0, #20
 8012130:	d802      	bhi.n	8012138 <_malloc_r+0x294>
 8012132:	0001      	movs	r1, r0
 8012134:	315b      	adds	r1, #91	; 0x5b
 8012136:	e7eb      	b.n	8012110 <_malloc_r+0x26c>
 8012138:	2854      	cmp	r0, #84	; 0x54
 801213a:	d802      	bhi.n	8012142 <_malloc_r+0x29e>
 801213c:	0b19      	lsrs	r1, r3, #12
 801213e:	316e      	adds	r1, #110	; 0x6e
 8012140:	e7e6      	b.n	8012110 <_malloc_r+0x26c>
 8012142:	21aa      	movs	r1, #170	; 0xaa
 8012144:	0049      	lsls	r1, r1, #1
 8012146:	4288      	cmp	r0, r1
 8012148:	d802      	bhi.n	8012150 <_malloc_r+0x2ac>
 801214a:	0bd9      	lsrs	r1, r3, #15
 801214c:	3177      	adds	r1, #119	; 0x77
 801214e:	e7df      	b.n	8012110 <_malloc_r+0x26c>
 8012150:	4e27      	ldr	r6, [pc, #156]	; (80121f0 <_malloc_r+0x34c>)
 8012152:	217e      	movs	r1, #126	; 0x7e
 8012154:	42b0      	cmp	r0, r6
 8012156:	d8db      	bhi.n	8012110 <_malloc_r+0x26c>
 8012158:	0c99      	lsrs	r1, r3, #18
 801215a:	317c      	adds	r1, #124	; 0x7c
 801215c:	e7d8      	b.n	8012110 <_malloc_r+0x26c>
 801215e:	6880      	ldr	r0, [r0, #8]
 8012160:	4286      	cmp	r6, r0
 8012162:	d004      	beq.n	801216e <_malloc_r+0x2ca>
 8012164:	2103      	movs	r1, #3
 8012166:	6842      	ldr	r2, [r0, #4]
 8012168:	438a      	bics	r2, r1
 801216a:	429a      	cmp	r2, r3
 801216c:	d8f7      	bhi.n	801215e <_malloc_r+0x2ba>
 801216e:	68c6      	ldr	r6, [r0, #12]
 8012170:	e7d8      	b.n	8012124 <_malloc_r+0x280>
 8012172:	2304      	movs	r3, #4
 8012174:	449c      	add	ip, r3
 8012176:	e753      	b.n	8012020 <_malloc_r+0x17c>
 8012178:	2003      	movs	r0, #3
 801217a:	6863      	ldr	r3, [r4, #4]
 801217c:	4383      	bics	r3, r0
 801217e:	1b5e      	subs	r6, r3, r5
 8012180:	68e0      	ldr	r0, [r4, #12]
 8012182:	2e0f      	cmp	r6, #15
 8012184:	dd0e      	ble.n	80121a4 <_malloc_r+0x300>
 8012186:	2701      	movs	r7, #1
 8012188:	1962      	adds	r2, r4, r5
 801218a:	433d      	orrs	r5, r7
 801218c:	6065      	str	r5, [r4, #4]
 801218e:	68a5      	ldr	r5, [r4, #8]
 8012190:	4337      	orrs	r7, r6
 8012192:	60e8      	str	r0, [r5, #12]
 8012194:	6085      	str	r5, [r0, #8]
 8012196:	614a      	str	r2, [r1, #20]
 8012198:	610a      	str	r2, [r1, #16]
 801219a:	4914      	ldr	r1, [pc, #80]	; (80121ec <_malloc_r+0x348>)
 801219c:	6057      	str	r7, [r2, #4]
 801219e:	60d1      	str	r1, [r2, #12]
 80121a0:	6091      	str	r1, [r2, #8]
 80121a2:	e6e8      	b.n	8011f76 <_malloc_r+0xd2>
 80121a4:	2e00      	cmp	r6, #0
 80121a6:	db08      	blt.n	80121ba <_malloc_r+0x316>
 80121a8:	2201      	movs	r2, #1
 80121aa:	18e3      	adds	r3, r4, r3
 80121ac:	6859      	ldr	r1, [r3, #4]
 80121ae:	430a      	orrs	r2, r1
 80121b0:	605a      	str	r2, [r3, #4]
 80121b2:	68a3      	ldr	r3, [r4, #8]
 80121b4:	60d8      	str	r0, [r3, #12]
 80121b6:	6083      	str	r3, [r0, #8]
 80121b8:	e6aa      	b.n	8011f10 <_malloc_r+0x6c>
 80121ba:	0004      	movs	r4, r0
 80121bc:	e73c      	b.n	8012038 <_malloc_r+0x194>
 80121be:	2301      	movs	r3, #1
 80121c0:	425b      	negs	r3, r3
 80121c2:	449c      	add	ip, r3
 80121c4:	9b03      	ldr	r3, [sp, #12]
 80121c6:	6818      	ldr	r0, [r3, #0]
 80121c8:	3b08      	subs	r3, #8
 80121ca:	9003      	str	r0, [sp, #12]
 80121cc:	4298      	cmp	r0, r3
 80121ce:	d100      	bne.n	80121d2 <_malloc_r+0x32e>
 80121d0:	e73c      	b.n	801204c <_malloc_r+0x1a8>
 80121d2:	e743      	b.n	801205c <_malloc_r+0x1b8>
 80121d4:	2004      	movs	r0, #4
 80121d6:	0052      	lsls	r2, r2, #1
 80121d8:	4484      	add	ip, r0
 80121da:	421a      	tst	r2, r3
 80121dc:	d0fa      	beq.n	80121d4 <_malloc_r+0x330>
 80121de:	e723      	b.n	8012028 <_malloc_r+0x184>
 80121e0:	9802      	ldr	r0, [sp, #8]
 80121e2:	4684      	mov	ip, r0
 80121e4:	e7f9      	b.n	80121da <_malloc_r+0x336>
 80121e6:	46c0      	nop			; (mov r8, r8)
 80121e8:	20000664 	.word	0x20000664
 80121ec:	2000066c 	.word	0x2000066c
 80121f0:	00000554 	.word	0x00000554
 80121f4:	000001ff 	.word	0x000001ff
 80121f8:	200067b8 	.word	0x200067b8
 80121fc:	20000a6c 	.word	0x20000a6c
 8012200:	20006788 	.word	0x20006788
 8012204:	200067b0 	.word	0x200067b0
 8012208:	200067b4 	.word	0x200067b4
 801220c:	492e      	ldr	r1, [pc, #184]	; (80122c8 <_malloc_r+0x424>)
 801220e:	680a      	ldr	r2, [r1, #0]
 8012210:	3201      	adds	r2, #1
 8012212:	d133      	bne.n	801227c <_malloc_r+0x3d8>
 8012214:	600c      	str	r4, [r1, #0]
 8012216:	2307      	movs	r3, #7
 8012218:	4023      	ands	r3, r4
 801221a:	d002      	beq.n	8012222 <_malloc_r+0x37e>
 801221c:	2208      	movs	r2, #8
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	18e4      	adds	r4, r4, r3
 8012222:	9a03      	ldr	r2, [sp, #12]
 8012224:	19a6      	adds	r6, r4, r6
 8012226:	18d3      	adds	r3, r2, r3
 8012228:	4006      	ands	r6, r0
 801222a:	1b9e      	subs	r6, r3, r6
 801222c:	0031      	movs	r1, r6
 801222e:	9801      	ldr	r0, [sp, #4]
 8012230:	f000 fa62 	bl	80126f8 <_sbrk_r>
 8012234:	1c43      	adds	r3, r0, #1
 8012236:	d101      	bne.n	801223c <_malloc_r+0x398>
 8012238:	0020      	movs	r0, r4
 801223a:	2600      	movs	r6, #0
 801223c:	4a23      	ldr	r2, [pc, #140]	; (80122cc <_malloc_r+0x428>)
 801223e:	1b00      	subs	r0, r0, r4
 8012240:	6813      	ldr	r3, [r2, #0]
 8012242:	199b      	adds	r3, r3, r6
 8012244:	6013      	str	r3, [r2, #0]
 8012246:	2301      	movs	r3, #1
 8012248:	4a21      	ldr	r2, [pc, #132]	; (80122d0 <_malloc_r+0x42c>)
 801224a:	1986      	adds	r6, r0, r6
 801224c:	431e      	orrs	r6, r3
 801224e:	6094      	str	r4, [r2, #8]
 8012250:	6066      	str	r6, [r4, #4]
 8012252:	4297      	cmp	r7, r2
 8012254:	d100      	bne.n	8012258 <_malloc_r+0x3b4>
 8012256:	e748      	b.n	80120ea <_malloc_r+0x246>
 8012258:	9a02      	ldr	r2, [sp, #8]
 801225a:	2a0f      	cmp	r2, #15
 801225c:	d813      	bhi.n	8012286 <_malloc_r+0x3e2>
 801225e:	6063      	str	r3, [r4, #4]
 8012260:	2203      	movs	r2, #3
 8012262:	4b1b      	ldr	r3, [pc, #108]	; (80122d0 <_malloc_r+0x42c>)
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	4393      	bics	r3, r2
 801226a:	1b5a      	subs	r2, r3, r5
 801226c:	42ab      	cmp	r3, r5
 801226e:	d301      	bcc.n	8012274 <_malloc_r+0x3d0>
 8012270:	2a0f      	cmp	r2, #15
 8012272:	dc1d      	bgt.n	80122b0 <_malloc_r+0x40c>
 8012274:	9801      	ldr	r0, [sp, #4]
 8012276:	f000 f867 	bl	8012348 <__malloc_unlock>
 801227a:	e620      	b.n	8011ebe <_malloc_r+0x1a>
 801227c:	1ae3      	subs	r3, r4, r3
 801227e:	4a13      	ldr	r2, [pc, #76]	; (80122cc <_malloc_r+0x428>)
 8012280:	4463      	add	r3, ip
 8012282:	6013      	str	r3, [r2, #0]
 8012284:	e7c7      	b.n	8012216 <_malloc_r+0x372>
 8012286:	2207      	movs	r2, #7
 8012288:	9e02      	ldr	r6, [sp, #8]
 801228a:	3e0c      	subs	r6, #12
 801228c:	4396      	bics	r6, r2
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	4013      	ands	r3, r2
 8012292:	2205      	movs	r2, #5
 8012294:	4333      	orrs	r3, r6
 8012296:	607b      	str	r3, [r7, #4]
 8012298:	19bb      	adds	r3, r7, r6
 801229a:	605a      	str	r2, [r3, #4]
 801229c:	609a      	str	r2, [r3, #8]
 801229e:	2e0f      	cmp	r6, #15
 80122a0:	d800      	bhi.n	80122a4 <_malloc_r+0x400>
 80122a2:	e722      	b.n	80120ea <_malloc_r+0x246>
 80122a4:	0039      	movs	r1, r7
 80122a6:	9801      	ldr	r0, [sp, #4]
 80122a8:	3108      	adds	r1, #8
 80122aa:	f003 fb07 	bl	80158bc <_free_r>
 80122ae:	e71c      	b.n	80120ea <_malloc_r+0x246>
 80122b0:	2301      	movs	r3, #1
 80122b2:	0018      	movs	r0, r3
 80122b4:	4906      	ldr	r1, [pc, #24]	; (80122d0 <_malloc_r+0x42c>)
 80122b6:	4328      	orrs	r0, r5
 80122b8:	688c      	ldr	r4, [r1, #8]
 80122ba:	4313      	orrs	r3, r2
 80122bc:	1965      	adds	r5, r4, r5
 80122be:	6060      	str	r0, [r4, #4]
 80122c0:	608d      	str	r5, [r1, #8]
 80122c2:	606b      	str	r3, [r5, #4]
 80122c4:	e624      	b.n	8011f10 <_malloc_r+0x6c>
 80122c6:	46c0      	nop			; (mov r8, r8)
 80122c8:	20000a6c 	.word	0x20000a6c
 80122cc:	20006788 	.word	0x20006788
 80122d0:	20000664 	.word	0x20000664

080122d4 <__ascii_mbtowc>:
 80122d4:	b082      	sub	sp, #8
 80122d6:	2900      	cmp	r1, #0
 80122d8:	d100      	bne.n	80122dc <__ascii_mbtowc+0x8>
 80122da:	a901      	add	r1, sp, #4
 80122dc:	1e10      	subs	r0, r2, #0
 80122de:	d006      	beq.n	80122ee <__ascii_mbtowc+0x1a>
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d006      	beq.n	80122f2 <__ascii_mbtowc+0x1e>
 80122e4:	7813      	ldrb	r3, [r2, #0]
 80122e6:	600b      	str	r3, [r1, #0]
 80122e8:	7810      	ldrb	r0, [r2, #0]
 80122ea:	1e43      	subs	r3, r0, #1
 80122ec:	4198      	sbcs	r0, r3
 80122ee:	b002      	add	sp, #8
 80122f0:	4770      	bx	lr
 80122f2:	2002      	movs	r0, #2
 80122f4:	4240      	negs	r0, r0
 80122f6:	e7fa      	b.n	80122ee <__ascii_mbtowc+0x1a>

080122f8 <memcmp>:
 80122f8:	b530      	push	{r4, r5, lr}
 80122fa:	2400      	movs	r4, #0
 80122fc:	42a2      	cmp	r2, r4
 80122fe:	d101      	bne.n	8012304 <memcmp+0xc>
 8012300:	2000      	movs	r0, #0
 8012302:	e005      	b.n	8012310 <memcmp+0x18>
 8012304:	5d03      	ldrb	r3, [r0, r4]
 8012306:	1c65      	adds	r5, r4, #1
 8012308:	5d0c      	ldrb	r4, [r1, r4]
 801230a:	42a3      	cmp	r3, r4
 801230c:	d001      	beq.n	8012312 <memcmp+0x1a>
 801230e:	1b18      	subs	r0, r3, r4
 8012310:	bd30      	pop	{r4, r5, pc}
 8012312:	002c      	movs	r4, r5
 8012314:	e7f2      	b.n	80122fc <memcmp+0x4>

08012316 <memcpy>:
 8012316:	2300      	movs	r3, #0
 8012318:	b510      	push	{r4, lr}
 801231a:	429a      	cmp	r2, r3
 801231c:	d100      	bne.n	8012320 <memcpy+0xa>
 801231e:	bd10      	pop	{r4, pc}
 8012320:	5ccc      	ldrb	r4, [r1, r3]
 8012322:	54c4      	strb	r4, [r0, r3]
 8012324:	3301      	adds	r3, #1
 8012326:	e7f8      	b.n	801231a <memcpy+0x4>

08012328 <memset>:
 8012328:	0003      	movs	r3, r0
 801232a:	1812      	adds	r2, r2, r0
 801232c:	4293      	cmp	r3, r2
 801232e:	d100      	bne.n	8012332 <memset+0xa>
 8012330:	4770      	bx	lr
 8012332:	7019      	strb	r1, [r3, #0]
 8012334:	3301      	adds	r3, #1
 8012336:	e7f9      	b.n	801232c <memset+0x4>

08012338 <__malloc_lock>:
 8012338:	b510      	push	{r4, lr}
 801233a:	4802      	ldr	r0, [pc, #8]	; (8012344 <__malloc_lock+0xc>)
 801233c:	f003 feb2 	bl	80160a4 <__retarget_lock_acquire_recursive>
 8012340:	bd10      	pop	{r4, pc}
 8012342:	46c0      	nop			; (mov r8, r8)
 8012344:	20006de1 	.word	0x20006de1

08012348 <__malloc_unlock>:
 8012348:	b510      	push	{r4, lr}
 801234a:	4802      	ldr	r0, [pc, #8]	; (8012354 <__malloc_unlock+0xc>)
 801234c:	f003 feab 	bl	80160a6 <__retarget_lock_release_recursive>
 8012350:	bd10      	pop	{r4, pc}
 8012352:	46c0      	nop			; (mov r8, r8)
 8012354:	20006de1 	.word	0x20006de1

08012358 <rand>:
 8012358:	4b09      	ldr	r3, [pc, #36]	; (8012380 <rand+0x28>)
 801235a:	b510      	push	{r4, lr}
 801235c:	681c      	ldr	r4, [r3, #0]
 801235e:	4a09      	ldr	r2, [pc, #36]	; (8012384 <rand+0x2c>)
 8012360:	34a8      	adds	r4, #168	; 0xa8
 8012362:	6820      	ldr	r0, [r4, #0]
 8012364:	6861      	ldr	r1, [r4, #4]
 8012366:	4b08      	ldr	r3, [pc, #32]	; (8012388 <rand+0x30>)
 8012368:	f7ee f900 	bl	800056c <__aeabi_lmul>
 801236c:	2201      	movs	r2, #1
 801236e:	2300      	movs	r3, #0
 8012370:	1880      	adds	r0, r0, r2
 8012372:	4159      	adcs	r1, r3
 8012374:	6020      	str	r0, [r4, #0]
 8012376:	6061      	str	r1, [r4, #4]
 8012378:	0048      	lsls	r0, r1, #1
 801237a:	0840      	lsrs	r0, r0, #1
 801237c:	bd10      	pop	{r4, pc}
 801237e:	46c0      	nop			; (mov r8, r8)
 8012380:	200000cc 	.word	0x200000cc
 8012384:	4c957f2d 	.word	0x4c957f2d
 8012388:	5851f42d 	.word	0x5851f42d

0801238c <realloc>:
 801238c:	b510      	push	{r4, lr}
 801238e:	4b03      	ldr	r3, [pc, #12]	; (801239c <realloc+0x10>)
 8012390:	000a      	movs	r2, r1
 8012392:	0001      	movs	r1, r0
 8012394:	6818      	ldr	r0, [r3, #0]
 8012396:	f000 f803 	bl	80123a0 <_realloc_r>
 801239a:	bd10      	pop	{r4, pc}
 801239c:	200000cc 	.word	0x200000cc

080123a0 <_realloc_r>:
 80123a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a2:	b087      	sub	sp, #28
 80123a4:	9003      	str	r0, [sp, #12]
 80123a6:	1e0c      	subs	r4, r1, #0
 80123a8:	9205      	str	r2, [sp, #20]
 80123aa:	d106      	bne.n	80123ba <_realloc_r+0x1a>
 80123ac:	0011      	movs	r1, r2
 80123ae:	f7ff fd79 	bl	8011ea4 <_malloc_r>
 80123b2:	0007      	movs	r7, r0
 80123b4:	0038      	movs	r0, r7
 80123b6:	b007      	add	sp, #28
 80123b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123ba:	9803      	ldr	r0, [sp, #12]
 80123bc:	f7ff ffbc 	bl	8012338 <__malloc_lock>
 80123c0:	0023      	movs	r3, r4
 80123c2:	3b08      	subs	r3, #8
 80123c4:	685f      	ldr	r7, [r3, #4]
 80123c6:	9302      	str	r3, [sp, #8]
 80123c8:	003a      	movs	r2, r7
 80123ca:	2303      	movs	r3, #3
 80123cc:	9e05      	ldr	r6, [sp, #20]
 80123ce:	439a      	bics	r2, r3
 80123d0:	360b      	adds	r6, #11
 80123d2:	9204      	str	r2, [sp, #16]
 80123d4:	2e16      	cmp	r6, #22
 80123d6:	d908      	bls.n	80123ea <_realloc_r+0x4a>
 80123d8:	3304      	adds	r3, #4
 80123da:	439e      	bics	r6, r3
 80123dc:	9601      	str	r6, [sp, #4]
 80123de:	d506      	bpl.n	80123ee <_realloc_r+0x4e>
 80123e0:	230c      	movs	r3, #12
 80123e2:	9a03      	ldr	r2, [sp, #12]
 80123e4:	2700      	movs	r7, #0
 80123e6:	6013      	str	r3, [r2, #0]
 80123e8:	e7e4      	b.n	80123b4 <_realloc_r+0x14>
 80123ea:	2310      	movs	r3, #16
 80123ec:	9301      	str	r3, [sp, #4]
 80123ee:	9b01      	ldr	r3, [sp, #4]
 80123f0:	9a05      	ldr	r2, [sp, #20]
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d3f4      	bcc.n	80123e0 <_realloc_r+0x40>
 80123f6:	9b01      	ldr	r3, [sp, #4]
 80123f8:	9a04      	ldr	r2, [sp, #16]
 80123fa:	4293      	cmp	r3, r2
 80123fc:	dc00      	bgt.n	8012400 <_realloc_r+0x60>
 80123fe:	e16f      	b.n	80126e0 <_realloc_r+0x340>
 8012400:	9b02      	ldr	r3, [sp, #8]
 8012402:	48bc      	ldr	r0, [pc, #752]	; (80126f4 <_realloc_r+0x354>)
 8012404:	189b      	adds	r3, r3, r2
 8012406:	6882      	ldr	r2, [r0, #8]
 8012408:	4694      	mov	ip, r2
 801240a:	685a      	ldr	r2, [r3, #4]
 801240c:	459c      	cmp	ip, r3
 801240e:	d006      	beq.n	801241e <_realloc_r+0x7e>
 8012410:	2501      	movs	r5, #1
 8012412:	0011      	movs	r1, r2
 8012414:	43a9      	bics	r1, r5
 8012416:	1859      	adds	r1, r3, r1
 8012418:	6849      	ldr	r1, [r1, #4]
 801241a:	4229      	tst	r1, r5
 801241c:	d146      	bne.n	80124ac <_realloc_r+0x10c>
 801241e:	2103      	movs	r1, #3
 8012420:	438a      	bics	r2, r1
 8012422:	9904      	ldr	r1, [sp, #16]
 8012424:	188e      	adds	r6, r1, r2
 8012426:	9901      	ldr	r1, [sp, #4]
 8012428:	459c      	cmp	ip, r3
 801242a:	d117      	bne.n	801245c <_realloc_r+0xbc>
 801242c:	3110      	adds	r1, #16
 801242e:	42b1      	cmp	r1, r6
 8012430:	dc3e      	bgt.n	80124b0 <_realloc_r+0x110>
 8012432:	9901      	ldr	r1, [sp, #4]
 8012434:	9b02      	ldr	r3, [sp, #8]
 8012436:	468c      	mov	ip, r1
 8012438:	4463      	add	r3, ip
 801243a:	6083      	str	r3, [r0, #8]
 801243c:	001a      	movs	r2, r3
 801243e:	1a73      	subs	r3, r6, r1
 8012440:	2601      	movs	r6, #1
 8012442:	4333      	orrs	r3, r6
 8012444:	6053      	str	r3, [r2, #4]
 8012446:	0023      	movs	r3, r4
 8012448:	3b08      	subs	r3, #8
 801244a:	685a      	ldr	r2, [r3, #4]
 801244c:	9803      	ldr	r0, [sp, #12]
 801244e:	4016      	ands	r6, r2
 8012450:	430e      	orrs	r6, r1
 8012452:	605e      	str	r6, [r3, #4]
 8012454:	f7ff ff78 	bl	8012348 <__malloc_unlock>
 8012458:	0027      	movs	r7, r4
 801245a:	e7ab      	b.n	80123b4 <_realloc_r+0x14>
 801245c:	42b1      	cmp	r1, r6
 801245e:	dc27      	bgt.n	80124b0 <_realloc_r+0x110>
 8012460:	68da      	ldr	r2, [r3, #12]
 8012462:	689b      	ldr	r3, [r3, #8]
 8012464:	60da      	str	r2, [r3, #12]
 8012466:	6093      	str	r3, [r2, #8]
 8012468:	9b01      	ldr	r3, [sp, #4]
 801246a:	9a02      	ldr	r2, [sp, #8]
 801246c:	1af4      	subs	r4, r6, r3
 801246e:	9b02      	ldr	r3, [sp, #8]
 8012470:	1992      	adds	r2, r2, r6
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	9304      	str	r3, [sp, #16]
 8012476:	2301      	movs	r3, #1
 8012478:	9804      	ldr	r0, [sp, #16]
 801247a:	4018      	ands	r0, r3
 801247c:	2c0f      	cmp	r4, #15
 801247e:	d800      	bhi.n	8012482 <_realloc_r+0xe2>
 8012480:	e130      	b.n	80126e4 <_realloc_r+0x344>
 8012482:	9d01      	ldr	r5, [sp, #4]
 8012484:	9902      	ldr	r1, [sp, #8]
 8012486:	4328      	orrs	r0, r5
 8012488:	1949      	adds	r1, r1, r5
 801248a:	9d02      	ldr	r5, [sp, #8]
 801248c:	431c      	orrs	r4, r3
 801248e:	6068      	str	r0, [r5, #4]
 8012490:	604c      	str	r4, [r1, #4]
 8012492:	6850      	ldr	r0, [r2, #4]
 8012494:	3108      	adds	r1, #8
 8012496:	4303      	orrs	r3, r0
 8012498:	6053      	str	r3, [r2, #4]
 801249a:	9803      	ldr	r0, [sp, #12]
 801249c:	f003 fa0e 	bl	80158bc <_free_r>
 80124a0:	9803      	ldr	r0, [sp, #12]
 80124a2:	f7ff ff51 	bl	8012348 <__malloc_unlock>
 80124a6:	9f02      	ldr	r7, [sp, #8]
 80124a8:	3708      	adds	r7, #8
 80124aa:	e783      	b.n	80123b4 <_realloc_r+0x14>
 80124ac:	2200      	movs	r2, #0
 80124ae:	0013      	movs	r3, r2
 80124b0:	07f9      	lsls	r1, r7, #31
 80124b2:	d500      	bpl.n	80124b6 <_realloc_r+0x116>
 80124b4:	e0c6      	b.n	8012644 <_realloc_r+0x2a4>
 80124b6:	0021      	movs	r1, r4
 80124b8:	3908      	subs	r1, #8
 80124ba:	680d      	ldr	r5, [r1, #0]
 80124bc:	9902      	ldr	r1, [sp, #8]
 80124be:	1b4d      	subs	r5, r1, r5
 80124c0:	2103      	movs	r1, #3
 80124c2:	686f      	ldr	r7, [r5, #4]
 80124c4:	438f      	bics	r7, r1
 80124c6:	9904      	ldr	r1, [sp, #16]
 80124c8:	187f      	adds	r7, r7, r1
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d100      	bne.n	80124d0 <_realloc_r+0x130>
 80124ce:	e084      	b.n	80125da <_realloc_r+0x23a>
 80124d0:	19d6      	adds	r6, r2, r7
 80124d2:	459c      	cmp	ip, r3
 80124d4:	d148      	bne.n	8012568 <_realloc_r+0x1c8>
 80124d6:	9b01      	ldr	r3, [sp, #4]
 80124d8:	3310      	adds	r3, #16
 80124da:	42b3      	cmp	r3, r6
 80124dc:	dc7d      	bgt.n	80125da <_realloc_r+0x23a>
 80124de:	68aa      	ldr	r2, [r5, #8]
 80124e0:	68eb      	ldr	r3, [r5, #12]
 80124e2:	002f      	movs	r7, r5
 80124e4:	60d3      	str	r3, [r2, #12]
 80124e6:	609a      	str	r2, [r3, #8]
 80124e8:	000a      	movs	r2, r1
 80124ea:	3a04      	subs	r2, #4
 80124ec:	3708      	adds	r7, #8
 80124ee:	2a24      	cmp	r2, #36	; 0x24
 80124f0:	d835      	bhi.n	801255e <_realloc_r+0x1be>
 80124f2:	003b      	movs	r3, r7
 80124f4:	2a13      	cmp	r2, #19
 80124f6:	d908      	bls.n	801250a <_realloc_r+0x16a>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	60ab      	str	r3, [r5, #8]
 80124fc:	6863      	ldr	r3, [r4, #4]
 80124fe:	60eb      	str	r3, [r5, #12]
 8012500:	2a1b      	cmp	r2, #27
 8012502:	d81a      	bhi.n	801253a <_realloc_r+0x19a>
 8012504:	002b      	movs	r3, r5
 8012506:	3408      	adds	r4, #8
 8012508:	3310      	adds	r3, #16
 801250a:	6822      	ldr	r2, [r4, #0]
 801250c:	601a      	str	r2, [r3, #0]
 801250e:	6862      	ldr	r2, [r4, #4]
 8012510:	605a      	str	r2, [r3, #4]
 8012512:	68a2      	ldr	r2, [r4, #8]
 8012514:	609a      	str	r2, [r3, #8]
 8012516:	9b01      	ldr	r3, [sp, #4]
 8012518:	18ea      	adds	r2, r5, r3
 801251a:	4b76      	ldr	r3, [pc, #472]	; (80126f4 <_realloc_r+0x354>)
 801251c:	609a      	str	r2, [r3, #8]
 801251e:	9b01      	ldr	r3, [sp, #4]
 8012520:	1af3      	subs	r3, r6, r3
 8012522:	2601      	movs	r6, #1
 8012524:	4333      	orrs	r3, r6
 8012526:	6053      	str	r3, [r2, #4]
 8012528:	686b      	ldr	r3, [r5, #4]
 801252a:	401e      	ands	r6, r3
 801252c:	9b01      	ldr	r3, [sp, #4]
 801252e:	431e      	orrs	r6, r3
 8012530:	606e      	str	r6, [r5, #4]
 8012532:	9803      	ldr	r0, [sp, #12]
 8012534:	f7ff ff08 	bl	8012348 <__malloc_unlock>
 8012538:	e73c      	b.n	80123b4 <_realloc_r+0x14>
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	612b      	str	r3, [r5, #16]
 801253e:	68e3      	ldr	r3, [r4, #12]
 8012540:	616b      	str	r3, [r5, #20]
 8012542:	2a24      	cmp	r2, #36	; 0x24
 8012544:	d003      	beq.n	801254e <_realloc_r+0x1ae>
 8012546:	002b      	movs	r3, r5
 8012548:	3410      	adds	r4, #16
 801254a:	3318      	adds	r3, #24
 801254c:	e7dd      	b.n	801250a <_realloc_r+0x16a>
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	61ab      	str	r3, [r5, #24]
 8012552:	002b      	movs	r3, r5
 8012554:	6962      	ldr	r2, [r4, #20]
 8012556:	3320      	adds	r3, #32
 8012558:	61ea      	str	r2, [r5, #28]
 801255a:	3418      	adds	r4, #24
 801255c:	e7d5      	b.n	801250a <_realloc_r+0x16a>
 801255e:	0021      	movs	r1, r4
 8012560:	0038      	movs	r0, r7
 8012562:	f003 fdac 	bl	80160be <memmove>
 8012566:	e7d6      	b.n	8012516 <_realloc_r+0x176>
 8012568:	9a01      	ldr	r2, [sp, #4]
 801256a:	42b2      	cmp	r2, r6
 801256c:	dc35      	bgt.n	80125da <_realloc_r+0x23a>
 801256e:	0028      	movs	r0, r5
 8012570:	68da      	ldr	r2, [r3, #12]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	3008      	adds	r0, #8
 8012576:	60da      	str	r2, [r3, #12]
 8012578:	6093      	str	r3, [r2, #8]
 801257a:	68aa      	ldr	r2, [r5, #8]
 801257c:	68eb      	ldr	r3, [r5, #12]
 801257e:	60d3      	str	r3, [r2, #12]
 8012580:	609a      	str	r2, [r3, #8]
 8012582:	9a04      	ldr	r2, [sp, #16]
 8012584:	3a04      	subs	r2, #4
 8012586:	2a24      	cmp	r2, #36	; 0x24
 8012588:	d823      	bhi.n	80125d2 <_realloc_r+0x232>
 801258a:	2a13      	cmp	r2, #19
 801258c:	d907      	bls.n	801259e <_realloc_r+0x1fe>
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	60ab      	str	r3, [r5, #8]
 8012592:	6863      	ldr	r3, [r4, #4]
 8012594:	60eb      	str	r3, [r5, #12]
 8012596:	2a1b      	cmp	r2, #27
 8012598:	d809      	bhi.n	80125ae <_realloc_r+0x20e>
 801259a:	3408      	adds	r4, #8
 801259c:	3008      	adds	r0, #8
 801259e:	6823      	ldr	r3, [r4, #0]
 80125a0:	6003      	str	r3, [r0, #0]
 80125a2:	6863      	ldr	r3, [r4, #4]
 80125a4:	6043      	str	r3, [r0, #4]
 80125a6:	68a3      	ldr	r3, [r4, #8]
 80125a8:	6083      	str	r3, [r0, #8]
 80125aa:	9502      	str	r5, [sp, #8]
 80125ac:	e75c      	b.n	8012468 <_realloc_r+0xc8>
 80125ae:	68a3      	ldr	r3, [r4, #8]
 80125b0:	612b      	str	r3, [r5, #16]
 80125b2:	68e3      	ldr	r3, [r4, #12]
 80125b4:	616b      	str	r3, [r5, #20]
 80125b6:	2a24      	cmp	r2, #36	; 0x24
 80125b8:	d003      	beq.n	80125c2 <_realloc_r+0x222>
 80125ba:	0028      	movs	r0, r5
 80125bc:	3410      	adds	r4, #16
 80125be:	3018      	adds	r0, #24
 80125c0:	e7ed      	b.n	801259e <_realloc_r+0x1fe>
 80125c2:	0028      	movs	r0, r5
 80125c4:	6923      	ldr	r3, [r4, #16]
 80125c6:	3020      	adds	r0, #32
 80125c8:	61ab      	str	r3, [r5, #24]
 80125ca:	6963      	ldr	r3, [r4, #20]
 80125cc:	3418      	adds	r4, #24
 80125ce:	61eb      	str	r3, [r5, #28]
 80125d0:	e7e5      	b.n	801259e <_realloc_r+0x1fe>
 80125d2:	0021      	movs	r1, r4
 80125d4:	f003 fd73 	bl	80160be <memmove>
 80125d8:	e7e7      	b.n	80125aa <_realloc_r+0x20a>
 80125da:	9b01      	ldr	r3, [sp, #4]
 80125dc:	42bb      	cmp	r3, r7
 80125de:	dc31      	bgt.n	8012644 <_realloc_r+0x2a4>
 80125e0:	0028      	movs	r0, r5
 80125e2:	68aa      	ldr	r2, [r5, #8]
 80125e4:	68eb      	ldr	r3, [r5, #12]
 80125e6:	3008      	adds	r0, #8
 80125e8:	60d3      	str	r3, [r2, #12]
 80125ea:	609a      	str	r2, [r3, #8]
 80125ec:	9a04      	ldr	r2, [sp, #16]
 80125ee:	3a04      	subs	r2, #4
 80125f0:	2a24      	cmp	r2, #36	; 0x24
 80125f2:	d823      	bhi.n	801263c <_realloc_r+0x29c>
 80125f4:	2a13      	cmp	r2, #19
 80125f6:	d907      	bls.n	8012608 <_realloc_r+0x268>
 80125f8:	6823      	ldr	r3, [r4, #0]
 80125fa:	60ab      	str	r3, [r5, #8]
 80125fc:	6863      	ldr	r3, [r4, #4]
 80125fe:	60eb      	str	r3, [r5, #12]
 8012600:	2a1b      	cmp	r2, #27
 8012602:	d809      	bhi.n	8012618 <_realloc_r+0x278>
 8012604:	3408      	adds	r4, #8
 8012606:	3008      	adds	r0, #8
 8012608:	6823      	ldr	r3, [r4, #0]
 801260a:	6003      	str	r3, [r0, #0]
 801260c:	6863      	ldr	r3, [r4, #4]
 801260e:	6043      	str	r3, [r0, #4]
 8012610:	68a3      	ldr	r3, [r4, #8]
 8012612:	6083      	str	r3, [r0, #8]
 8012614:	003e      	movs	r6, r7
 8012616:	e7c8      	b.n	80125aa <_realloc_r+0x20a>
 8012618:	68a3      	ldr	r3, [r4, #8]
 801261a:	612b      	str	r3, [r5, #16]
 801261c:	68e3      	ldr	r3, [r4, #12]
 801261e:	616b      	str	r3, [r5, #20]
 8012620:	2a24      	cmp	r2, #36	; 0x24
 8012622:	d003      	beq.n	801262c <_realloc_r+0x28c>
 8012624:	0028      	movs	r0, r5
 8012626:	3410      	adds	r4, #16
 8012628:	3018      	adds	r0, #24
 801262a:	e7ed      	b.n	8012608 <_realloc_r+0x268>
 801262c:	0028      	movs	r0, r5
 801262e:	6923      	ldr	r3, [r4, #16]
 8012630:	3020      	adds	r0, #32
 8012632:	61ab      	str	r3, [r5, #24]
 8012634:	6963      	ldr	r3, [r4, #20]
 8012636:	3418      	adds	r4, #24
 8012638:	61eb      	str	r3, [r5, #28]
 801263a:	e7e5      	b.n	8012608 <_realloc_r+0x268>
 801263c:	0021      	movs	r1, r4
 801263e:	f003 fd3e 	bl	80160be <memmove>
 8012642:	e7e7      	b.n	8012614 <_realloc_r+0x274>
 8012644:	9905      	ldr	r1, [sp, #20]
 8012646:	9803      	ldr	r0, [sp, #12]
 8012648:	f7ff fc2c 	bl	8011ea4 <_malloc_r>
 801264c:	1e07      	subs	r7, r0, #0
 801264e:	d100      	bne.n	8012652 <_realloc_r+0x2b2>
 8012650:	e76f      	b.n	8012532 <_realloc_r+0x192>
 8012652:	0023      	movs	r3, r4
 8012654:	2201      	movs	r2, #1
 8012656:	3b08      	subs	r3, #8
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	4393      	bics	r3, r2
 801265c:	9a02      	ldr	r2, [sp, #8]
 801265e:	18d3      	adds	r3, r2, r3
 8012660:	0002      	movs	r2, r0
 8012662:	3a08      	subs	r2, #8
 8012664:	4293      	cmp	r3, r2
 8012666:	d105      	bne.n	8012674 <_realloc_r+0x2d4>
 8012668:	685e      	ldr	r6, [r3, #4]
 801266a:	2303      	movs	r3, #3
 801266c:	439e      	bics	r6, r3
 801266e:	9b04      	ldr	r3, [sp, #16]
 8012670:	18f6      	adds	r6, r6, r3
 8012672:	e6f9      	b.n	8012468 <_realloc_r+0xc8>
 8012674:	9a04      	ldr	r2, [sp, #16]
 8012676:	3a04      	subs	r2, #4
 8012678:	2a24      	cmp	r2, #36	; 0x24
 801267a:	d82d      	bhi.n	80126d8 <_realloc_r+0x338>
 801267c:	2a13      	cmp	r2, #19
 801267e:	d928      	bls.n	80126d2 <_realloc_r+0x332>
 8012680:	6823      	ldr	r3, [r4, #0]
 8012682:	6003      	str	r3, [r0, #0]
 8012684:	6863      	ldr	r3, [r4, #4]
 8012686:	6043      	str	r3, [r0, #4]
 8012688:	2a1b      	cmp	r2, #27
 801268a:	d80e      	bhi.n	80126aa <_realloc_r+0x30a>
 801268c:	0022      	movs	r2, r4
 801268e:	0003      	movs	r3, r0
 8012690:	3208      	adds	r2, #8
 8012692:	3308      	adds	r3, #8
 8012694:	6811      	ldr	r1, [r2, #0]
 8012696:	6019      	str	r1, [r3, #0]
 8012698:	6851      	ldr	r1, [r2, #4]
 801269a:	6059      	str	r1, [r3, #4]
 801269c:	6892      	ldr	r2, [r2, #8]
 801269e:	609a      	str	r2, [r3, #8]
 80126a0:	0021      	movs	r1, r4
 80126a2:	9803      	ldr	r0, [sp, #12]
 80126a4:	f003 f90a 	bl	80158bc <_free_r>
 80126a8:	e743      	b.n	8012532 <_realloc_r+0x192>
 80126aa:	68a3      	ldr	r3, [r4, #8]
 80126ac:	6083      	str	r3, [r0, #8]
 80126ae:	68e3      	ldr	r3, [r4, #12]
 80126b0:	60c3      	str	r3, [r0, #12]
 80126b2:	2a24      	cmp	r2, #36	; 0x24
 80126b4:	d004      	beq.n	80126c0 <_realloc_r+0x320>
 80126b6:	0022      	movs	r2, r4
 80126b8:	0003      	movs	r3, r0
 80126ba:	3210      	adds	r2, #16
 80126bc:	3310      	adds	r3, #16
 80126be:	e7e9      	b.n	8012694 <_realloc_r+0x2f4>
 80126c0:	6923      	ldr	r3, [r4, #16]
 80126c2:	0022      	movs	r2, r4
 80126c4:	6103      	str	r3, [r0, #16]
 80126c6:	0003      	movs	r3, r0
 80126c8:	6961      	ldr	r1, [r4, #20]
 80126ca:	3218      	adds	r2, #24
 80126cc:	3318      	adds	r3, #24
 80126ce:	6141      	str	r1, [r0, #20]
 80126d0:	e7e0      	b.n	8012694 <_realloc_r+0x2f4>
 80126d2:	0003      	movs	r3, r0
 80126d4:	0022      	movs	r2, r4
 80126d6:	e7dd      	b.n	8012694 <_realloc_r+0x2f4>
 80126d8:	0021      	movs	r1, r4
 80126da:	f003 fcf0 	bl	80160be <memmove>
 80126de:	e7df      	b.n	80126a0 <_realloc_r+0x300>
 80126e0:	9e04      	ldr	r6, [sp, #16]
 80126e2:	e6c1      	b.n	8012468 <_realloc_r+0xc8>
 80126e4:	9902      	ldr	r1, [sp, #8]
 80126e6:	4306      	orrs	r6, r0
 80126e8:	604e      	str	r6, [r1, #4]
 80126ea:	6851      	ldr	r1, [r2, #4]
 80126ec:	430b      	orrs	r3, r1
 80126ee:	6053      	str	r3, [r2, #4]
 80126f0:	e6d6      	b.n	80124a0 <_realloc_r+0x100>
 80126f2:	46c0      	nop			; (mov r8, r8)
 80126f4:	20000664 	.word	0x20000664

080126f8 <_sbrk_r>:
 80126f8:	2300      	movs	r3, #0
 80126fa:	b570      	push	{r4, r5, r6, lr}
 80126fc:	4c06      	ldr	r4, [pc, #24]	; (8012718 <_sbrk_r+0x20>)
 80126fe:	0005      	movs	r5, r0
 8012700:	0008      	movs	r0, r1
 8012702:	6023      	str	r3, [r4, #0]
 8012704:	f004 f9c0 	bl	8016a88 <_sbrk>
 8012708:	1c43      	adds	r3, r0, #1
 801270a:	d103      	bne.n	8012714 <_sbrk_r+0x1c>
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d000      	beq.n	8012714 <_sbrk_r+0x1c>
 8012712:	602b      	str	r3, [r5, #0]
 8012714:	bd70      	pop	{r4, r5, r6, pc}
 8012716:	46c0      	nop			; (mov r8, r8)
 8012718:	20006de8 	.word	0x20006de8

0801271c <sprintf>:
 801271c:	b40e      	push	{r1, r2, r3}
 801271e:	b500      	push	{lr}
 8012720:	490b      	ldr	r1, [pc, #44]	; (8012750 <sprintf+0x34>)
 8012722:	b09c      	sub	sp, #112	; 0x70
 8012724:	ab1d      	add	r3, sp, #116	; 0x74
 8012726:	9002      	str	r0, [sp, #8]
 8012728:	9006      	str	r0, [sp, #24]
 801272a:	9107      	str	r1, [sp, #28]
 801272c:	9104      	str	r1, [sp, #16]
 801272e:	4809      	ldr	r0, [pc, #36]	; (8012754 <sprintf+0x38>)
 8012730:	4909      	ldr	r1, [pc, #36]	; (8012758 <sprintf+0x3c>)
 8012732:	cb04      	ldmia	r3!, {r2}
 8012734:	9105      	str	r1, [sp, #20]
 8012736:	6800      	ldr	r0, [r0, #0]
 8012738:	a902      	add	r1, sp, #8
 801273a:	9301      	str	r3, [sp, #4]
 801273c:	f000 ff78 	bl	8013630 <_svfprintf_r>
 8012740:	2300      	movs	r3, #0
 8012742:	9a02      	ldr	r2, [sp, #8]
 8012744:	7013      	strb	r3, [r2, #0]
 8012746:	b01c      	add	sp, #112	; 0x70
 8012748:	bc08      	pop	{r3}
 801274a:	b003      	add	sp, #12
 801274c:	4718      	bx	r3
 801274e:	46c0      	nop			; (mov r8, r8)
 8012750:	7fffffff 	.word	0x7fffffff
 8012754:	200000cc 	.word	0x200000cc
 8012758:	ffff0208 	.word	0xffff0208

0801275c <strcat>:
 801275c:	0002      	movs	r2, r0
 801275e:	b510      	push	{r4, lr}
 8012760:	7813      	ldrb	r3, [r2, #0]
 8012762:	1c54      	adds	r4, r2, #1
 8012764:	2b00      	cmp	r3, #0
 8012766:	d105      	bne.n	8012774 <strcat+0x18>
 8012768:	5ccc      	ldrb	r4, [r1, r3]
 801276a:	54d4      	strb	r4, [r2, r3]
 801276c:	3301      	adds	r3, #1
 801276e:	2c00      	cmp	r4, #0
 8012770:	d1fa      	bne.n	8012768 <strcat+0xc>
 8012772:	bd10      	pop	{r4, pc}
 8012774:	0022      	movs	r2, r4
 8012776:	e7f3      	b.n	8012760 <strcat+0x4>

08012778 <strchr>:
 8012778:	b2c9      	uxtb	r1, r1
 801277a:	7803      	ldrb	r3, [r0, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d004      	beq.n	801278a <strchr+0x12>
 8012780:	428b      	cmp	r3, r1
 8012782:	d100      	bne.n	8012786 <strchr+0xe>
 8012784:	4770      	bx	lr
 8012786:	3001      	adds	r0, #1
 8012788:	e7f7      	b.n	801277a <strchr+0x2>
 801278a:	424b      	negs	r3, r1
 801278c:	4159      	adcs	r1, r3
 801278e:	4249      	negs	r1, r1
 8012790:	4008      	ands	r0, r1
 8012792:	e7f7      	b.n	8012784 <strchr+0xc>

08012794 <strcpy>:
 8012794:	0003      	movs	r3, r0
 8012796:	780a      	ldrb	r2, [r1, #0]
 8012798:	3101      	adds	r1, #1
 801279a:	701a      	strb	r2, [r3, #0]
 801279c:	3301      	adds	r3, #1
 801279e:	2a00      	cmp	r2, #0
 80127a0:	d1f9      	bne.n	8012796 <strcpy+0x2>
 80127a2:	4770      	bx	lr

080127a4 <strncmp>:
 80127a4:	2300      	movs	r3, #0
 80127a6:	b530      	push	{r4, r5, lr}
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d00a      	beq.n	80127c2 <strncmp+0x1e>
 80127ac:	3a01      	subs	r2, #1
 80127ae:	5cc4      	ldrb	r4, [r0, r3]
 80127b0:	5ccd      	ldrb	r5, [r1, r3]
 80127b2:	42ac      	cmp	r4, r5
 80127b4:	d104      	bne.n	80127c0 <strncmp+0x1c>
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d002      	beq.n	80127c0 <strncmp+0x1c>
 80127ba:	3301      	adds	r3, #1
 80127bc:	2c00      	cmp	r4, #0
 80127be:	d1f6      	bne.n	80127ae <strncmp+0xa>
 80127c0:	1b63      	subs	r3, r4, r5
 80127c2:	0018      	movs	r0, r3
 80127c4:	bd30      	pop	{r4, r5, pc}

080127c6 <strncpy>:
 80127c6:	b530      	push	{r4, r5, lr}
 80127c8:	0005      	movs	r5, r0
 80127ca:	2a00      	cmp	r2, #0
 80127cc:	d100      	bne.n	80127d0 <strncpy+0xa>
 80127ce:	bd30      	pop	{r4, r5, pc}
 80127d0:	780c      	ldrb	r4, [r1, #0]
 80127d2:	3a01      	subs	r2, #1
 80127d4:	1c6b      	adds	r3, r5, #1
 80127d6:	702c      	strb	r4, [r5, #0]
 80127d8:	3101      	adds	r1, #1
 80127da:	2c00      	cmp	r4, #0
 80127dc:	d105      	bne.n	80127ea <strncpy+0x24>
 80127de:	189a      	adds	r2, r3, r2
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d0f4      	beq.n	80127ce <strncpy+0x8>
 80127e4:	701c      	strb	r4, [r3, #0]
 80127e6:	3301      	adds	r3, #1
 80127e8:	e7fa      	b.n	80127e0 <strncpy+0x1a>
 80127ea:	001d      	movs	r5, r3
 80127ec:	e7ed      	b.n	80127ca <strncpy+0x4>
	...

080127f0 <sulp>:
 80127f0:	b570      	push	{r4, r5, r6, lr}
 80127f2:	0016      	movs	r6, r2
 80127f4:	000d      	movs	r5, r1
 80127f6:	f003 ff17 	bl	8016628 <__ulp>
 80127fa:	2e00      	cmp	r6, #0
 80127fc:	d00d      	beq.n	801281a <sulp+0x2a>
 80127fe:	236b      	movs	r3, #107	; 0x6b
 8012800:	006a      	lsls	r2, r5, #1
 8012802:	0d52      	lsrs	r2, r2, #21
 8012804:	1a9b      	subs	r3, r3, r2
 8012806:	2b00      	cmp	r3, #0
 8012808:	dd07      	ble.n	801281a <sulp+0x2a>
 801280a:	2400      	movs	r4, #0
 801280c:	4a03      	ldr	r2, [pc, #12]	; (801281c <sulp+0x2c>)
 801280e:	051b      	lsls	r3, r3, #20
 8012810:	189d      	adds	r5, r3, r2
 8012812:	002b      	movs	r3, r5
 8012814:	0022      	movs	r2, r4
 8012816:	f7ef fb0d 	bl	8001e34 <__aeabi_dmul>
 801281a:	bd70      	pop	{r4, r5, r6, pc}
 801281c:	3ff00000 	.word	0x3ff00000

08012820 <_strtod_l>:
 8012820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012822:	b0a7      	sub	sp, #156	; 0x9c
 8012824:	9307      	str	r3, [sp, #28]
 8012826:	2300      	movs	r3, #0
 8012828:	9004      	str	r0, [sp, #16]
 801282a:	9807      	ldr	r0, [sp, #28]
 801282c:	9322      	str	r3, [sp, #136]	; 0x88
 801282e:	9106      	str	r1, [sp, #24]
 8012830:	921d      	str	r2, [sp, #116]	; 0x74
 8012832:	f003 fc28 	bl	8016086 <__localeconv_l>
 8012836:	0005      	movs	r5, r0
 8012838:	6800      	ldr	r0, [r0, #0]
 801283a:	f7ed fc6d 	bl	8000118 <strlen>
 801283e:	2600      	movs	r6, #0
 8012840:	2700      	movs	r7, #0
 8012842:	9b06      	ldr	r3, [sp, #24]
 8012844:	9005      	str	r0, [sp, #20]
 8012846:	9321      	str	r3, [sp, #132]	; 0x84
 8012848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801284a:	781a      	ldrb	r2, [r3, #0]
 801284c:	2a0d      	cmp	r2, #13
 801284e:	d839      	bhi.n	80128c4 <_strtod_l+0xa4>
 8012850:	2a09      	cmp	r2, #9
 8012852:	d23d      	bcs.n	80128d0 <_strtod_l+0xb0>
 8012854:	2a00      	cmp	r2, #0
 8012856:	d044      	beq.n	80128e2 <_strtod_l+0xc2>
 8012858:	2300      	movs	r3, #0
 801285a:	9313      	str	r3, [sp, #76]	; 0x4c
 801285c:	2200      	movs	r2, #0
 801285e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8012860:	920c      	str	r2, [sp, #48]	; 0x30
 8012862:	7823      	ldrb	r3, [r4, #0]
 8012864:	2b30      	cmp	r3, #48	; 0x30
 8012866:	d000      	beq.n	801286a <_strtod_l+0x4a>
 8012868:	e07e      	b.n	8012968 <_strtod_l+0x148>
 801286a:	7863      	ldrb	r3, [r4, #1]
 801286c:	2b58      	cmp	r3, #88	; 0x58
 801286e:	d002      	beq.n	8012876 <_strtod_l+0x56>
 8012870:	2b78      	cmp	r3, #120	; 0x78
 8012872:	d000      	beq.n	8012876 <_strtod_l+0x56>
 8012874:	e06e      	b.n	8012954 <_strtod_l+0x134>
 8012876:	9b07      	ldr	r3, [sp, #28]
 8012878:	4a96      	ldr	r2, [pc, #600]	; (8012ad4 <_strtod_l+0x2b4>)
 801287a:	9302      	str	r3, [sp, #8]
 801287c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801287e:	a921      	add	r1, sp, #132	; 0x84
 8012880:	9301      	str	r3, [sp, #4]
 8012882:	ab22      	add	r3, sp, #136	; 0x88
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	9804      	ldr	r0, [sp, #16]
 8012888:	ab23      	add	r3, sp, #140	; 0x8c
 801288a:	f003 f914 	bl	8015ab6 <__gethex>
 801288e:	2507      	movs	r5, #7
 8012890:	9005      	str	r0, [sp, #20]
 8012892:	4005      	ands	r5, r0
 8012894:	d005      	beq.n	80128a2 <_strtod_l+0x82>
 8012896:	2d06      	cmp	r5, #6
 8012898:	d12f      	bne.n	80128fa <_strtod_l+0xda>
 801289a:	2300      	movs	r3, #0
 801289c:	3401      	adds	r4, #1
 801289e:	9421      	str	r4, [sp, #132]	; 0x84
 80128a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80128a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <_strtod_l+0x8e>
 80128a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80128ac:	601a      	str	r2, [r3, #0]
 80128ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d01d      	beq.n	80128f0 <_strtod_l+0xd0>
 80128b4:	2380      	movs	r3, #128	; 0x80
 80128b6:	0032      	movs	r2, r6
 80128b8:	061b      	lsls	r3, r3, #24
 80128ba:	18fb      	adds	r3, r7, r3
 80128bc:	0010      	movs	r0, r2
 80128be:	0019      	movs	r1, r3
 80128c0:	b027      	add	sp, #156	; 0x9c
 80128c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128c4:	2a2b      	cmp	r2, #43	; 0x2b
 80128c6:	d016      	beq.n	80128f6 <_strtod_l+0xd6>
 80128c8:	2a2d      	cmp	r2, #45	; 0x2d
 80128ca:	d003      	beq.n	80128d4 <_strtod_l+0xb4>
 80128cc:	2a20      	cmp	r2, #32
 80128ce:	d1c3      	bne.n	8012858 <_strtod_l+0x38>
 80128d0:	3301      	adds	r3, #1
 80128d2:	e7b8      	b.n	8012846 <_strtod_l+0x26>
 80128d4:	2201      	movs	r2, #1
 80128d6:	9213      	str	r2, [sp, #76]	; 0x4c
 80128d8:	1c5a      	adds	r2, r3, #1
 80128da:	9221      	str	r2, [sp, #132]	; 0x84
 80128dc:	785b      	ldrb	r3, [r3, #1]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d1bc      	bne.n	801285c <_strtod_l+0x3c>
 80128e2:	9b06      	ldr	r3, [sp, #24]
 80128e4:	9321      	str	r3, [sp, #132]	; 0x84
 80128e6:	2300      	movs	r3, #0
 80128e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80128ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d1db      	bne.n	80128a8 <_strtod_l+0x88>
 80128f0:	0032      	movs	r2, r6
 80128f2:	003b      	movs	r3, r7
 80128f4:	e7e2      	b.n	80128bc <_strtod_l+0x9c>
 80128f6:	2200      	movs	r2, #0
 80128f8:	e7ed      	b.n	80128d6 <_strtod_l+0xb6>
 80128fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80128fc:	2a00      	cmp	r2, #0
 80128fe:	d007      	beq.n	8012910 <_strtod_l+0xf0>
 8012900:	2135      	movs	r1, #53	; 0x35
 8012902:	a824      	add	r0, sp, #144	; 0x90
 8012904:	f003 ff7d 	bl	8016802 <__copybits>
 8012908:	9922      	ldr	r1, [sp, #136]	; 0x88
 801290a:	9804      	ldr	r0, [sp, #16]
 801290c:	f003 fc12 	bl	8016134 <_Bfree>
 8012910:	1e68      	subs	r0, r5, #1
 8012912:	2804      	cmp	r0, #4
 8012914:	d806      	bhi.n	8012924 <_strtod_l+0x104>
 8012916:	f7ed fc07 	bl	8000128 <__gnu_thumb1_case_uqi>
 801291a:	030c      	.short	0x030c
 801291c:	1917      	.short	0x1917
 801291e:	0c          	.byte	0x0c
 801291f:	00          	.byte	0x00
 8012920:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012922:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012924:	9b05      	ldr	r3, [sp, #20]
 8012926:	071b      	lsls	r3, r3, #28
 8012928:	d5bb      	bpl.n	80128a2 <_strtod_l+0x82>
 801292a:	2380      	movs	r3, #128	; 0x80
 801292c:	061b      	lsls	r3, r3, #24
 801292e:	431f      	orrs	r7, r3
 8012930:	e7b7      	b.n	80128a2 <_strtod_l+0x82>
 8012932:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012934:	4a68      	ldr	r2, [pc, #416]	; (8012ad8 <_strtod_l+0x2b8>)
 8012936:	4969      	ldr	r1, [pc, #420]	; (8012adc <_strtod_l+0x2bc>)
 8012938:	401a      	ands	r2, r3
 801293a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801293c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801293e:	185b      	adds	r3, r3, r1
 8012940:	051b      	lsls	r3, r3, #20
 8012942:	431a      	orrs	r2, r3
 8012944:	0017      	movs	r7, r2
 8012946:	e7ed      	b.n	8012924 <_strtod_l+0x104>
 8012948:	4f65      	ldr	r7, [pc, #404]	; (8012ae0 <_strtod_l+0x2c0>)
 801294a:	e7eb      	b.n	8012924 <_strtod_l+0x104>
 801294c:	2601      	movs	r6, #1
 801294e:	4f65      	ldr	r7, [pc, #404]	; (8012ae4 <_strtod_l+0x2c4>)
 8012950:	4276      	negs	r6, r6
 8012952:	e7e7      	b.n	8012924 <_strtod_l+0x104>
 8012954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012956:	1c5a      	adds	r2, r3, #1
 8012958:	9221      	str	r2, [sp, #132]	; 0x84
 801295a:	785b      	ldrb	r3, [r3, #1]
 801295c:	2b30      	cmp	r3, #48	; 0x30
 801295e:	d0f9      	beq.n	8012954 <_strtod_l+0x134>
 8012960:	2b00      	cmp	r3, #0
 8012962:	d09e      	beq.n	80128a2 <_strtod_l+0x82>
 8012964:	2301      	movs	r3, #1
 8012966:	930c      	str	r3, [sp, #48]	; 0x30
 8012968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801296a:	220a      	movs	r2, #10
 801296c:	9312      	str	r3, [sp, #72]	; 0x48
 801296e:	2300      	movs	r3, #0
 8012970:	930b      	str	r3, [sp, #44]	; 0x2c
 8012972:	9308      	str	r3, [sp, #32]
 8012974:	930a      	str	r3, [sp, #40]	; 0x28
 8012976:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012978:	7804      	ldrb	r4, [r0, #0]
 801297a:	0023      	movs	r3, r4
 801297c:	3b30      	subs	r3, #48	; 0x30
 801297e:	b2d9      	uxtb	r1, r3
 8012980:	2909      	cmp	r1, #9
 8012982:	d934      	bls.n	80129ee <_strtod_l+0x1ce>
 8012984:	9a05      	ldr	r2, [sp, #20]
 8012986:	6829      	ldr	r1, [r5, #0]
 8012988:	f7ff ff0c 	bl	80127a4 <strncmp>
 801298c:	2800      	cmp	r0, #0
 801298e:	d040      	beq.n	8012a12 <_strtod_l+0x1f2>
 8012990:	2000      	movs	r0, #0
 8012992:	0023      	movs	r3, r4
 8012994:	4684      	mov	ip, r0
 8012996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012998:	9007      	str	r0, [sp, #28]
 801299a:	9205      	str	r2, [sp, #20]
 801299c:	2220      	movs	r2, #32
 801299e:	0019      	movs	r1, r3
 80129a0:	4391      	bics	r1, r2
 80129a2:	000a      	movs	r2, r1
 80129a4:	2100      	movs	r1, #0
 80129a6:	2a45      	cmp	r2, #69	; 0x45
 80129a8:	d000      	beq.n	80129ac <_strtod_l+0x18c>
 80129aa:	e0bf      	b.n	8012b2c <_strtod_l+0x30c>
 80129ac:	9b05      	ldr	r3, [sp, #20]
 80129ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129b0:	4303      	orrs	r3, r0
 80129b2:	4313      	orrs	r3, r2
 80129b4:	428b      	cmp	r3, r1
 80129b6:	d094      	beq.n	80128e2 <_strtod_l+0xc2>
 80129b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129ba:	9306      	str	r3, [sp, #24]
 80129bc:	3301      	adds	r3, #1
 80129be:	9321      	str	r3, [sp, #132]	; 0x84
 80129c0:	9b06      	ldr	r3, [sp, #24]
 80129c2:	785b      	ldrb	r3, [r3, #1]
 80129c4:	2b2b      	cmp	r3, #43	; 0x2b
 80129c6:	d100      	bne.n	80129ca <_strtod_l+0x1aa>
 80129c8:	e082      	b.n	8012ad0 <_strtod_l+0x2b0>
 80129ca:	000c      	movs	r4, r1
 80129cc:	2b2d      	cmp	r3, #45	; 0x2d
 80129ce:	d105      	bne.n	80129dc <_strtod_l+0x1bc>
 80129d0:	2401      	movs	r4, #1
 80129d2:	9b06      	ldr	r3, [sp, #24]
 80129d4:	3302      	adds	r3, #2
 80129d6:	9321      	str	r3, [sp, #132]	; 0x84
 80129d8:	9b06      	ldr	r3, [sp, #24]
 80129da:	789b      	ldrb	r3, [r3, #2]
 80129dc:	001a      	movs	r2, r3
 80129de:	3a30      	subs	r2, #48	; 0x30
 80129e0:	2a09      	cmp	r2, #9
 80129e2:	d800      	bhi.n	80129e6 <_strtod_l+0x1c6>
 80129e4:	e084      	b.n	8012af0 <_strtod_l+0x2d0>
 80129e6:	9a06      	ldr	r2, [sp, #24]
 80129e8:	2100      	movs	r1, #0
 80129ea:	9221      	str	r2, [sp, #132]	; 0x84
 80129ec:	e09e      	b.n	8012b2c <_strtod_l+0x30c>
 80129ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129f0:	2908      	cmp	r1, #8
 80129f2:	dc09      	bgt.n	8012a08 <_strtod_l+0x1e8>
 80129f4:	9908      	ldr	r1, [sp, #32]
 80129f6:	4351      	muls	r1, r2
 80129f8:	18cb      	adds	r3, r1, r3
 80129fa:	9308      	str	r3, [sp, #32]
 80129fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129fe:	3001      	adds	r0, #1
 8012a00:	3301      	adds	r3, #1
 8012a02:	930a      	str	r3, [sp, #40]	; 0x28
 8012a04:	9021      	str	r0, [sp, #132]	; 0x84
 8012a06:	e7b6      	b.n	8012976 <_strtod_l+0x156>
 8012a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a0a:	4351      	muls	r1, r2
 8012a0c:	18cb      	adds	r3, r1, r3
 8012a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a10:	e7f4      	b.n	80129fc <_strtod_l+0x1dc>
 8012a12:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a14:	9b05      	ldr	r3, [sp, #20]
 8012a16:	4694      	mov	ip, r2
 8012a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a1a:	4463      	add	r3, ip
 8012a1c:	9321      	str	r3, [sp, #132]	; 0x84
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	2a00      	cmp	r2, #0
 8012a22:	d036      	beq.n	8012a92 <_strtod_l+0x272>
 8012a24:	4684      	mov	ip, r0
 8012a26:	9205      	str	r2, [sp, #20]
 8012a28:	001a      	movs	r2, r3
 8012a2a:	3a30      	subs	r2, #48	; 0x30
 8012a2c:	2a09      	cmp	r2, #9
 8012a2e:	d912      	bls.n	8012a56 <_strtod_l+0x236>
 8012a30:	2201      	movs	r2, #1
 8012a32:	9207      	str	r2, [sp, #28]
 8012a34:	e7b2      	b.n	801299c <_strtod_l+0x17c>
 8012a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a38:	3001      	adds	r0, #1
 8012a3a:	1c5a      	adds	r2, r3, #1
 8012a3c:	9221      	str	r2, [sp, #132]	; 0x84
 8012a3e:	785b      	ldrb	r3, [r3, #1]
 8012a40:	2b30      	cmp	r3, #48	; 0x30
 8012a42:	d0f8      	beq.n	8012a36 <_strtod_l+0x216>
 8012a44:	001a      	movs	r2, r3
 8012a46:	3a31      	subs	r2, #49	; 0x31
 8012a48:	2a08      	cmp	r2, #8
 8012a4a:	d83c      	bhi.n	8012ac6 <_strtod_l+0x2a6>
 8012a4c:	4684      	mov	ip, r0
 8012a4e:	2000      	movs	r0, #0
 8012a50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a52:	9005      	str	r0, [sp, #20]
 8012a54:	9212      	str	r2, [sp, #72]	; 0x48
 8012a56:	3b30      	subs	r3, #48	; 0x30
 8012a58:	1c42      	adds	r2, r0, #1
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d013      	beq.n	8012a86 <_strtod_l+0x266>
 8012a5e:	210a      	movs	r1, #10
 8012a60:	4494      	add	ip, r2
 8012a62:	9a05      	ldr	r2, [sp, #20]
 8012a64:	1885      	adds	r5, r0, r2
 8012a66:	42aa      	cmp	r2, r5
 8012a68:	d115      	bne.n	8012a96 <_strtod_l+0x276>
 8012a6a:	9905      	ldr	r1, [sp, #20]
 8012a6c:	9a05      	ldr	r2, [sp, #20]
 8012a6e:	3101      	adds	r1, #1
 8012a70:	1809      	adds	r1, r1, r0
 8012a72:	1812      	adds	r2, r2, r0
 8012a74:	9105      	str	r1, [sp, #20]
 8012a76:	2a08      	cmp	r2, #8
 8012a78:	dc1b      	bgt.n	8012ab2 <_strtod_l+0x292>
 8012a7a:	220a      	movs	r2, #10
 8012a7c:	9908      	ldr	r1, [sp, #32]
 8012a7e:	434a      	muls	r2, r1
 8012a80:	189b      	adds	r3, r3, r2
 8012a82:	2200      	movs	r2, #0
 8012a84:	9308      	str	r3, [sp, #32]
 8012a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a88:	0010      	movs	r0, r2
 8012a8a:	1c59      	adds	r1, r3, #1
 8012a8c:	9121      	str	r1, [sp, #132]	; 0x84
 8012a8e:	785b      	ldrb	r3, [r3, #1]
 8012a90:	e7ca      	b.n	8012a28 <_strtod_l+0x208>
 8012a92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012a94:	e7d4      	b.n	8012a40 <_strtod_l+0x220>
 8012a96:	1c54      	adds	r4, r2, #1
 8012a98:	2a08      	cmp	r2, #8
 8012a9a:	dc04      	bgt.n	8012aa6 <_strtod_l+0x286>
 8012a9c:	9a08      	ldr	r2, [sp, #32]
 8012a9e:	434a      	muls	r2, r1
 8012aa0:	9208      	str	r2, [sp, #32]
 8012aa2:	0022      	movs	r2, r4
 8012aa4:	e7df      	b.n	8012a66 <_strtod_l+0x246>
 8012aa6:	2c10      	cmp	r4, #16
 8012aa8:	dcfb      	bgt.n	8012aa2 <_strtod_l+0x282>
 8012aaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012aac:	434a      	muls	r2, r1
 8012aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8012ab0:	e7f7      	b.n	8012aa2 <_strtod_l+0x282>
 8012ab2:	9905      	ldr	r1, [sp, #20]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	2910      	cmp	r1, #16
 8012ab8:	dce5      	bgt.n	8012a86 <_strtod_l+0x266>
 8012aba:	210a      	movs	r1, #10
 8012abc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012abe:	4341      	muls	r1, r0
 8012ac0:	185b      	adds	r3, r3, r1
 8012ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ac4:	e7df      	b.n	8012a86 <_strtod_l+0x266>
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	4694      	mov	ip, r2
 8012aca:	9205      	str	r2, [sp, #20]
 8012acc:	3201      	adds	r2, #1
 8012ace:	e7b0      	b.n	8012a32 <_strtod_l+0x212>
 8012ad0:	000c      	movs	r4, r1
 8012ad2:	e77e      	b.n	80129d2 <_strtod_l+0x1b2>
 8012ad4:	08019a0c 	.word	0x08019a0c
 8012ad8:	ffefffff 	.word	0xffefffff
 8012adc:	00000433 	.word	0x00000433
 8012ae0:	7ff00000 	.word	0x7ff00000
 8012ae4:	7fffffff 	.word	0x7fffffff
 8012ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012aea:	1c5a      	adds	r2, r3, #1
 8012aec:	9221      	str	r2, [sp, #132]	; 0x84
 8012aee:	785b      	ldrb	r3, [r3, #1]
 8012af0:	2b30      	cmp	r3, #48	; 0x30
 8012af2:	d0f9      	beq.n	8012ae8 <_strtod_l+0x2c8>
 8012af4:	001a      	movs	r2, r3
 8012af6:	3a31      	subs	r2, #49	; 0x31
 8012af8:	2100      	movs	r1, #0
 8012afa:	2a08      	cmp	r2, #8
 8012afc:	d816      	bhi.n	8012b2c <_strtod_l+0x30c>
 8012afe:	3b30      	subs	r3, #48	; 0x30
 8012b00:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8012b02:	930e      	str	r3, [sp, #56]	; 0x38
 8012b04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b06:	1c59      	adds	r1, r3, #1
 8012b08:	9121      	str	r1, [sp, #132]	; 0x84
 8012b0a:	785b      	ldrb	r3, [r3, #1]
 8012b0c:	001a      	movs	r2, r3
 8012b0e:	3a30      	subs	r2, #48	; 0x30
 8012b10:	2a09      	cmp	r2, #9
 8012b12:	d932      	bls.n	8012b7a <_strtod_l+0x35a>
 8012b14:	1b4a      	subs	r2, r1, r5
 8012b16:	4dad      	ldr	r5, [pc, #692]	; (8012dcc <_strtod_l+0x5ac>)
 8012b18:	0029      	movs	r1, r5
 8012b1a:	2a08      	cmp	r2, #8
 8012b1c:	dc03      	bgt.n	8012b26 <_strtod_l+0x306>
 8012b1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012b20:	42a9      	cmp	r1, r5
 8012b22:	dd00      	ble.n	8012b26 <_strtod_l+0x306>
 8012b24:	0029      	movs	r1, r5
 8012b26:	2c00      	cmp	r4, #0
 8012b28:	d000      	beq.n	8012b2c <_strtod_l+0x30c>
 8012b2a:	4249      	negs	r1, r1
 8012b2c:	9a05      	ldr	r2, [sp, #20]
 8012b2e:	2a00      	cmp	r2, #0
 8012b30:	d149      	bne.n	8012bc6 <_strtod_l+0x3a6>
 8012b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b34:	4310      	orrs	r0, r2
 8012b36:	d000      	beq.n	8012b3a <_strtod_l+0x31a>
 8012b38:	e6b3      	b.n	80128a2 <_strtod_l+0x82>
 8012b3a:	9a07      	ldr	r2, [sp, #28]
 8012b3c:	2a00      	cmp	r2, #0
 8012b3e:	d000      	beq.n	8012b42 <_strtod_l+0x322>
 8012b40:	e6cf      	b.n	80128e2 <_strtod_l+0xc2>
 8012b42:	2b4e      	cmp	r3, #78	; 0x4e
 8012b44:	d025      	beq.n	8012b92 <_strtod_l+0x372>
 8012b46:	dc1f      	bgt.n	8012b88 <_strtod_l+0x368>
 8012b48:	2b49      	cmp	r3, #73	; 0x49
 8012b4a:	d000      	beq.n	8012b4e <_strtod_l+0x32e>
 8012b4c:	e6c9      	b.n	80128e2 <_strtod_l+0xc2>
 8012b4e:	49a0      	ldr	r1, [pc, #640]	; (8012dd0 <_strtod_l+0x5b0>)
 8012b50:	a821      	add	r0, sp, #132	; 0x84
 8012b52:	f003 f9ed 	bl	8015f30 <__match>
 8012b56:	2800      	cmp	r0, #0
 8012b58:	d100      	bne.n	8012b5c <_strtod_l+0x33c>
 8012b5a:	e6c2      	b.n	80128e2 <_strtod_l+0xc2>
 8012b5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b5e:	499d      	ldr	r1, [pc, #628]	; (8012dd4 <_strtod_l+0x5b4>)
 8012b60:	3b01      	subs	r3, #1
 8012b62:	a821      	add	r0, sp, #132	; 0x84
 8012b64:	9321      	str	r3, [sp, #132]	; 0x84
 8012b66:	f003 f9e3 	bl	8015f30 <__match>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d102      	bne.n	8012b74 <_strtod_l+0x354>
 8012b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b70:	3301      	adds	r3, #1
 8012b72:	9321      	str	r3, [sp, #132]	; 0x84
 8012b74:	4f98      	ldr	r7, [pc, #608]	; (8012dd8 <_strtod_l+0x5b8>)
 8012b76:	2600      	movs	r6, #0
 8012b78:	e693      	b.n	80128a2 <_strtod_l+0x82>
 8012b7a:	220a      	movs	r2, #10
 8012b7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012b7e:	434a      	muls	r2, r1
 8012b80:	18d2      	adds	r2, r2, r3
 8012b82:	3a30      	subs	r2, #48	; 0x30
 8012b84:	920e      	str	r2, [sp, #56]	; 0x38
 8012b86:	e7bd      	b.n	8012b04 <_strtod_l+0x2e4>
 8012b88:	2b69      	cmp	r3, #105	; 0x69
 8012b8a:	d0e0      	beq.n	8012b4e <_strtod_l+0x32e>
 8012b8c:	2b6e      	cmp	r3, #110	; 0x6e
 8012b8e:	d000      	beq.n	8012b92 <_strtod_l+0x372>
 8012b90:	e6a7      	b.n	80128e2 <_strtod_l+0xc2>
 8012b92:	4992      	ldr	r1, [pc, #584]	; (8012ddc <_strtod_l+0x5bc>)
 8012b94:	a821      	add	r0, sp, #132	; 0x84
 8012b96:	f003 f9cb 	bl	8015f30 <__match>
 8012b9a:	2800      	cmp	r0, #0
 8012b9c:	d100      	bne.n	8012ba0 <_strtod_l+0x380>
 8012b9e:	e6a0      	b.n	80128e2 <_strtod_l+0xc2>
 8012ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	2b28      	cmp	r3, #40	; 0x28
 8012ba6:	d10c      	bne.n	8012bc2 <_strtod_l+0x3a2>
 8012ba8:	aa24      	add	r2, sp, #144	; 0x90
 8012baa:	498d      	ldr	r1, [pc, #564]	; (8012de0 <_strtod_l+0x5c0>)
 8012bac:	a821      	add	r0, sp, #132	; 0x84
 8012bae:	f003 f9d3 	bl	8015f58 <__hexnan>
 8012bb2:	2805      	cmp	r0, #5
 8012bb4:	d105      	bne.n	8012bc2 <_strtod_l+0x3a2>
 8012bb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012bb8:	4a87      	ldr	r2, [pc, #540]	; (8012dd8 <_strtod_l+0x5b8>)
 8012bba:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012bbc:	431a      	orrs	r2, r3
 8012bbe:	0017      	movs	r7, r2
 8012bc0:	e66f      	b.n	80128a2 <_strtod_l+0x82>
 8012bc2:	4f88      	ldr	r7, [pc, #544]	; (8012de4 <_strtod_l+0x5c4>)
 8012bc4:	e7d7      	b.n	8012b76 <_strtod_l+0x356>
 8012bc6:	4663      	mov	r3, ip
 8012bc8:	1acb      	subs	r3, r1, r3
 8012bca:	9307      	str	r3, [sp, #28]
 8012bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d101      	bne.n	8012bd6 <_strtod_l+0x3b6>
 8012bd2:	9b05      	ldr	r3, [sp, #20]
 8012bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8012bd6:	9c05      	ldr	r4, [sp, #20]
 8012bd8:	2c10      	cmp	r4, #16
 8012bda:	dd00      	ble.n	8012bde <_strtod_l+0x3be>
 8012bdc:	2410      	movs	r4, #16
 8012bde:	9808      	ldr	r0, [sp, #32]
 8012be0:	f7ef ff6e 	bl	8002ac0 <__aeabi_ui2d>
 8012be4:	9b05      	ldr	r3, [sp, #20]
 8012be6:	0006      	movs	r6, r0
 8012be8:	000f      	movs	r7, r1
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	dc15      	bgt.n	8012c1a <_strtod_l+0x3fa>
 8012bee:	9b07      	ldr	r3, [sp, #28]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d100      	bne.n	8012bf6 <_strtod_l+0x3d6>
 8012bf4:	e655      	b.n	80128a2 <_strtod_l+0x82>
 8012bf6:	9b07      	ldr	r3, [sp, #28]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	dc00      	bgt.n	8012bfe <_strtod_l+0x3de>
 8012bfc:	e07d      	b.n	8012cfa <_strtod_l+0x4da>
 8012bfe:	2b16      	cmp	r3, #22
 8012c00:	dc62      	bgt.n	8012cc8 <_strtod_l+0x4a8>
 8012c02:	00dc      	lsls	r4, r3, #3
 8012c04:	4b78      	ldr	r3, [pc, #480]	; (8012de8 <_strtod_l+0x5c8>)
 8012c06:	0032      	movs	r2, r6
 8012c08:	1919      	adds	r1, r3, r4
 8012c0a:	003b      	movs	r3, r7
 8012c0c:	6808      	ldr	r0, [r1, #0]
 8012c0e:	6849      	ldr	r1, [r1, #4]
 8012c10:	f7ef f910 	bl	8001e34 <__aeabi_dmul>
 8012c14:	0006      	movs	r6, r0
 8012c16:	000f      	movs	r7, r1
 8012c18:	e643      	b.n	80128a2 <_strtod_l+0x82>
 8012c1a:	0022      	movs	r2, r4
 8012c1c:	4b72      	ldr	r3, [pc, #456]	; (8012de8 <_strtod_l+0x5c8>)
 8012c1e:	3a09      	subs	r2, #9
 8012c20:	00d2      	lsls	r2, r2, #3
 8012c22:	189b      	adds	r3, r3, r2
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	f7ef f904 	bl	8001e34 <__aeabi_dmul>
 8012c2c:	0006      	movs	r6, r0
 8012c2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012c30:	000f      	movs	r7, r1
 8012c32:	f7ef ff45 	bl	8002ac0 <__aeabi_ui2d>
 8012c36:	000b      	movs	r3, r1
 8012c38:	0002      	movs	r2, r0
 8012c3a:	0039      	movs	r1, r7
 8012c3c:	0030      	movs	r0, r6
 8012c3e:	f7ee f9d3 	bl	8000fe8 <__aeabi_dadd>
 8012c42:	9b05      	ldr	r3, [sp, #20]
 8012c44:	0006      	movs	r6, r0
 8012c46:	000f      	movs	r7, r1
 8012c48:	2b0f      	cmp	r3, #15
 8012c4a:	ddd0      	ble.n	8012bee <_strtod_l+0x3ce>
 8012c4c:	9b05      	ldr	r3, [sp, #20]
 8012c4e:	1b1c      	subs	r4, r3, r4
 8012c50:	9b07      	ldr	r3, [sp, #28]
 8012c52:	18e4      	adds	r4, r4, r3
 8012c54:	2c00      	cmp	r4, #0
 8012c56:	dc00      	bgt.n	8012c5a <_strtod_l+0x43a>
 8012c58:	e094      	b.n	8012d84 <_strtod_l+0x564>
 8012c5a:	230f      	movs	r3, #15
 8012c5c:	4023      	ands	r3, r4
 8012c5e:	d00a      	beq.n	8012c76 <_strtod_l+0x456>
 8012c60:	4961      	ldr	r1, [pc, #388]	; (8012de8 <_strtod_l+0x5c8>)
 8012c62:	00db      	lsls	r3, r3, #3
 8012c64:	18c9      	adds	r1, r1, r3
 8012c66:	0032      	movs	r2, r6
 8012c68:	6808      	ldr	r0, [r1, #0]
 8012c6a:	6849      	ldr	r1, [r1, #4]
 8012c6c:	003b      	movs	r3, r7
 8012c6e:	f7ef f8e1 	bl	8001e34 <__aeabi_dmul>
 8012c72:	0006      	movs	r6, r0
 8012c74:	000f      	movs	r7, r1
 8012c76:	230f      	movs	r3, #15
 8012c78:	439c      	bics	r4, r3
 8012c7a:	d06e      	beq.n	8012d5a <_strtod_l+0x53a>
 8012c7c:	3326      	adds	r3, #38	; 0x26
 8012c7e:	33ff      	adds	r3, #255	; 0xff
 8012c80:	429c      	cmp	r4, r3
 8012c82:	dd48      	ble.n	8012d16 <_strtod_l+0x4f6>
 8012c84:	2400      	movs	r4, #0
 8012c86:	9405      	str	r4, [sp, #20]
 8012c88:	940b      	str	r4, [sp, #44]	; 0x2c
 8012c8a:	940a      	str	r4, [sp, #40]	; 0x28
 8012c8c:	2322      	movs	r3, #34	; 0x22
 8012c8e:	2600      	movs	r6, #0
 8012c90:	9a04      	ldr	r2, [sp, #16]
 8012c92:	4f51      	ldr	r7, [pc, #324]	; (8012dd8 <_strtod_l+0x5b8>)
 8012c94:	6013      	str	r3, [r2, #0]
 8012c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c98:	42b3      	cmp	r3, r6
 8012c9a:	d100      	bne.n	8012c9e <_strtod_l+0x47e>
 8012c9c:	e601      	b.n	80128a2 <_strtod_l+0x82>
 8012c9e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012ca0:	9804      	ldr	r0, [sp, #16]
 8012ca2:	f003 fa47 	bl	8016134 <_Bfree>
 8012ca6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012ca8:	9804      	ldr	r0, [sp, #16]
 8012caa:	f003 fa43 	bl	8016134 <_Bfree>
 8012cae:	9905      	ldr	r1, [sp, #20]
 8012cb0:	9804      	ldr	r0, [sp, #16]
 8012cb2:	f003 fa3f 	bl	8016134 <_Bfree>
 8012cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012cb8:	9804      	ldr	r0, [sp, #16]
 8012cba:	f003 fa3b 	bl	8016134 <_Bfree>
 8012cbe:	0021      	movs	r1, r4
 8012cc0:	9804      	ldr	r0, [sp, #16]
 8012cc2:	f003 fa37 	bl	8016134 <_Bfree>
 8012cc6:	e5ec      	b.n	80128a2 <_strtod_l+0x82>
 8012cc8:	2325      	movs	r3, #37	; 0x25
 8012cca:	9a05      	ldr	r2, [sp, #20]
 8012ccc:	1a9b      	subs	r3, r3, r2
 8012cce:	9a07      	ldr	r2, [sp, #28]
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	dbbb      	blt.n	8012c4c <_strtod_l+0x42c>
 8012cd4:	230f      	movs	r3, #15
 8012cd6:	9a05      	ldr	r2, [sp, #20]
 8012cd8:	4c43      	ldr	r4, [pc, #268]	; (8012de8 <_strtod_l+0x5c8>)
 8012cda:	1a9d      	subs	r5, r3, r2
 8012cdc:	00e9      	lsls	r1, r5, #3
 8012cde:	1861      	adds	r1, r4, r1
 8012ce0:	0032      	movs	r2, r6
 8012ce2:	6808      	ldr	r0, [r1, #0]
 8012ce4:	6849      	ldr	r1, [r1, #4]
 8012ce6:	003b      	movs	r3, r7
 8012ce8:	f7ef f8a4 	bl	8001e34 <__aeabi_dmul>
 8012cec:	9b07      	ldr	r3, [sp, #28]
 8012cee:	1b5e      	subs	r6, r3, r5
 8012cf0:	00f6      	lsls	r6, r6, #3
 8012cf2:	19a6      	adds	r6, r4, r6
 8012cf4:	6832      	ldr	r2, [r6, #0]
 8012cf6:	6873      	ldr	r3, [r6, #4]
 8012cf8:	e78a      	b.n	8012c10 <_strtod_l+0x3f0>
 8012cfa:	9b07      	ldr	r3, [sp, #28]
 8012cfc:	3316      	adds	r3, #22
 8012cfe:	dba5      	blt.n	8012c4c <_strtod_l+0x42c>
 8012d00:	9b07      	ldr	r3, [sp, #28]
 8012d02:	0030      	movs	r0, r6
 8012d04:	00da      	lsls	r2, r3, #3
 8012d06:	4b38      	ldr	r3, [pc, #224]	; (8012de8 <_strtod_l+0x5c8>)
 8012d08:	0039      	movs	r1, r7
 8012d0a:	1a9b      	subs	r3, r3, r2
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	f7ee fc86 	bl	8001620 <__aeabi_ddiv>
 8012d14:	e77e      	b.n	8012c14 <_strtod_l+0x3f4>
 8012d16:	2300      	movs	r3, #0
 8012d18:	0030      	movs	r0, r6
 8012d1a:	0039      	movs	r1, r7
 8012d1c:	001d      	movs	r5, r3
 8012d1e:	1124      	asrs	r4, r4, #4
 8012d20:	2c01      	cmp	r4, #1
 8012d22:	dc1d      	bgt.n	8012d60 <_strtod_l+0x540>
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d001      	beq.n	8012d2c <_strtod_l+0x50c>
 8012d28:	0006      	movs	r6, r0
 8012d2a:	000f      	movs	r7, r1
 8012d2c:	4b2f      	ldr	r3, [pc, #188]	; (8012dec <_strtod_l+0x5cc>)
 8012d2e:	00ed      	lsls	r5, r5, #3
 8012d30:	18ff      	adds	r7, r7, r3
 8012d32:	4b2f      	ldr	r3, [pc, #188]	; (8012df0 <_strtod_l+0x5d0>)
 8012d34:	0032      	movs	r2, r6
 8012d36:	195d      	adds	r5, r3, r5
 8012d38:	6828      	ldr	r0, [r5, #0]
 8012d3a:	6869      	ldr	r1, [r5, #4]
 8012d3c:	003b      	movs	r3, r7
 8012d3e:	f7ef f879 	bl	8001e34 <__aeabi_dmul>
 8012d42:	4b25      	ldr	r3, [pc, #148]	; (8012dd8 <_strtod_l+0x5b8>)
 8012d44:	4a2b      	ldr	r2, [pc, #172]	; (8012df4 <_strtod_l+0x5d4>)
 8012d46:	0006      	movs	r6, r0
 8012d48:	400b      	ands	r3, r1
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	d89a      	bhi.n	8012c84 <_strtod_l+0x464>
 8012d4e:	4a2a      	ldr	r2, [pc, #168]	; (8012df8 <_strtod_l+0x5d8>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d913      	bls.n	8012d7c <_strtod_l+0x55c>
 8012d54:	2601      	movs	r6, #1
 8012d56:	4f29      	ldr	r7, [pc, #164]	; (8012dfc <_strtod_l+0x5dc>)
 8012d58:	4276      	negs	r6, r6
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	9306      	str	r3, [sp, #24]
 8012d5e:	e07b      	b.n	8012e58 <_strtod_l+0x638>
 8012d60:	2201      	movs	r2, #1
 8012d62:	4214      	tst	r4, r2
 8012d64:	d007      	beq.n	8012d76 <_strtod_l+0x556>
 8012d66:	4a22      	ldr	r2, [pc, #136]	; (8012df0 <_strtod_l+0x5d0>)
 8012d68:	00eb      	lsls	r3, r5, #3
 8012d6a:	189b      	adds	r3, r3, r2
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	f7ef f860 	bl	8001e34 <__aeabi_dmul>
 8012d74:	2301      	movs	r3, #1
 8012d76:	3501      	adds	r5, #1
 8012d78:	1064      	asrs	r4, r4, #1
 8012d7a:	e7d1      	b.n	8012d20 <_strtod_l+0x500>
 8012d7c:	23d4      	movs	r3, #212	; 0xd4
 8012d7e:	049b      	lsls	r3, r3, #18
 8012d80:	18cf      	adds	r7, r1, r3
 8012d82:	e7ea      	b.n	8012d5a <_strtod_l+0x53a>
 8012d84:	2c00      	cmp	r4, #0
 8012d86:	d0e8      	beq.n	8012d5a <_strtod_l+0x53a>
 8012d88:	230f      	movs	r3, #15
 8012d8a:	4264      	negs	r4, r4
 8012d8c:	4023      	ands	r3, r4
 8012d8e:	d00a      	beq.n	8012da6 <_strtod_l+0x586>
 8012d90:	4a15      	ldr	r2, [pc, #84]	; (8012de8 <_strtod_l+0x5c8>)
 8012d92:	00db      	lsls	r3, r3, #3
 8012d94:	18d3      	adds	r3, r2, r3
 8012d96:	0030      	movs	r0, r6
 8012d98:	681a      	ldr	r2, [r3, #0]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	0039      	movs	r1, r7
 8012d9e:	f7ee fc3f 	bl	8001620 <__aeabi_ddiv>
 8012da2:	0006      	movs	r6, r0
 8012da4:	000f      	movs	r7, r1
 8012da6:	1124      	asrs	r4, r4, #4
 8012da8:	d0d7      	beq.n	8012d5a <_strtod_l+0x53a>
 8012daa:	2c1f      	cmp	r4, #31
 8012dac:	dd28      	ble.n	8012e00 <_strtod_l+0x5e0>
 8012dae:	2400      	movs	r4, #0
 8012db0:	9405      	str	r4, [sp, #20]
 8012db2:	940b      	str	r4, [sp, #44]	; 0x2c
 8012db4:	940a      	str	r4, [sp, #40]	; 0x28
 8012db6:	2322      	movs	r3, #34	; 0x22
 8012db8:	9a04      	ldr	r2, [sp, #16]
 8012dba:	2600      	movs	r6, #0
 8012dbc:	6013      	str	r3, [r2, #0]
 8012dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012dc0:	2700      	movs	r7, #0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d000      	beq.n	8012dc8 <_strtod_l+0x5a8>
 8012dc6:	e76a      	b.n	8012c9e <_strtod_l+0x47e>
 8012dc8:	e56b      	b.n	80128a2 <_strtod_l+0x82>
 8012dca:	46c0      	nop			; (mov r8, r8)
 8012dcc:	00004e1f 	.word	0x00004e1f
 8012dd0:	08019a65 	.word	0x08019a65
 8012dd4:	08019bb8 	.word	0x08019bb8
 8012dd8:	7ff00000 	.word	0x7ff00000
 8012ddc:	08019a6d 	.word	0x08019a6d
 8012de0:	08019a20 	.word	0x08019a20
 8012de4:	fff80000 	.word	0xfff80000
 8012de8:	08019bf0 	.word	0x08019bf0
 8012dec:	fcb00000 	.word	0xfcb00000
 8012df0:	08019bc8 	.word	0x08019bc8
 8012df4:	7ca00000 	.word	0x7ca00000
 8012df8:	7c900000 	.word	0x7c900000
 8012dfc:	7fefffff 	.word	0x7fefffff
 8012e00:	2310      	movs	r3, #16
 8012e02:	4023      	ands	r3, r4
 8012e04:	9306      	str	r3, [sp, #24]
 8012e06:	d001      	beq.n	8012e0c <_strtod_l+0x5ec>
 8012e08:	236a      	movs	r3, #106	; 0x6a
 8012e0a:	9306      	str	r3, [sp, #24]
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	0030      	movs	r0, r6
 8012e10:	0039      	movs	r1, r7
 8012e12:	001d      	movs	r5, r3
 8012e14:	2c00      	cmp	r4, #0
 8012e16:	dd00      	ble.n	8012e1a <_strtod_l+0x5fa>
 8012e18:	e10e      	b.n	8013038 <_strtod_l+0x818>
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d001      	beq.n	8012e22 <_strtod_l+0x602>
 8012e1e:	0006      	movs	r6, r0
 8012e20:	000f      	movs	r7, r1
 8012e22:	9b06      	ldr	r3, [sp, #24]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d00f      	beq.n	8012e48 <_strtod_l+0x628>
 8012e28:	236b      	movs	r3, #107	; 0x6b
 8012e2a:	0079      	lsls	r1, r7, #1
 8012e2c:	0d49      	lsrs	r1, r1, #21
 8012e2e:	003a      	movs	r2, r7
 8012e30:	1a5b      	subs	r3, r3, r1
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	dd08      	ble.n	8012e48 <_strtod_l+0x628>
 8012e36:	2b1f      	cmp	r3, #31
 8012e38:	dc00      	bgt.n	8012e3c <_strtod_l+0x61c>
 8012e3a:	e112      	b.n	8013062 <_strtod_l+0x842>
 8012e3c:	2600      	movs	r6, #0
 8012e3e:	2b34      	cmp	r3, #52	; 0x34
 8012e40:	dc00      	bgt.n	8012e44 <_strtod_l+0x624>
 8012e42:	e107      	b.n	8013054 <_strtod_l+0x834>
 8012e44:	27dc      	movs	r7, #220	; 0xdc
 8012e46:	04bf      	lsls	r7, r7, #18
 8012e48:	2200      	movs	r2, #0
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	0030      	movs	r0, r6
 8012e4e:	0039      	movs	r1, r7
 8012e50:	f7ed fb04 	bl	800045c <__aeabi_dcmpeq>
 8012e54:	2800      	cmp	r0, #0
 8012e56:	d1aa      	bne.n	8012dae <_strtod_l+0x58e>
 8012e58:	9b08      	ldr	r3, [sp, #32]
 8012e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e5c:	9300      	str	r3, [sp, #0]
 8012e5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e60:	9b05      	ldr	r3, [sp, #20]
 8012e62:	9804      	ldr	r0, [sp, #16]
 8012e64:	f003 f9ae 	bl	80161c4 <__s2b>
 8012e68:	900b      	str	r0, [sp, #44]	; 0x2c
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d100      	bne.n	8012e70 <_strtod_l+0x650>
 8012e6e:	e709      	b.n	8012c84 <_strtod_l+0x464>
 8012e70:	9b07      	ldr	r3, [sp, #28]
 8012e72:	9a07      	ldr	r2, [sp, #28]
 8012e74:	17db      	asrs	r3, r3, #31
 8012e76:	4252      	negs	r2, r2
 8012e78:	4013      	ands	r3, r2
 8012e7a:	9315      	str	r3, [sp, #84]	; 0x54
 8012e7c:	9b07      	ldr	r3, [sp, #28]
 8012e7e:	2400      	movs	r4, #0
 8012e80:	43db      	mvns	r3, r3
 8012e82:	9a07      	ldr	r2, [sp, #28]
 8012e84:	17db      	asrs	r3, r3, #31
 8012e86:	401a      	ands	r2, r3
 8012e88:	921c      	str	r2, [sp, #112]	; 0x70
 8012e8a:	9405      	str	r4, [sp, #20]
 8012e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e8e:	9804      	ldr	r0, [sp, #16]
 8012e90:	6859      	ldr	r1, [r3, #4]
 8012e92:	f003 f927 	bl	80160e4 <_Balloc>
 8012e96:	900a      	str	r0, [sp, #40]	; 0x28
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d100      	bne.n	8012e9e <_strtod_l+0x67e>
 8012e9c:	e6f6      	b.n	8012c8c <_strtod_l+0x46c>
 8012e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012ea2:	691b      	ldr	r3, [r3, #16]
 8012ea4:	310c      	adds	r1, #12
 8012ea6:	1c9a      	adds	r2, r3, #2
 8012ea8:	0092      	lsls	r2, r2, #2
 8012eaa:	300c      	adds	r0, #12
 8012eac:	9308      	str	r3, [sp, #32]
 8012eae:	f7ff fa32 	bl	8012316 <memcpy>
 8012eb2:	ab24      	add	r3, sp, #144	; 0x90
 8012eb4:	9301      	str	r3, [sp, #4]
 8012eb6:	ab23      	add	r3, sp, #140	; 0x8c
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	0032      	movs	r2, r6
 8012ebc:	003b      	movs	r3, r7
 8012ebe:	9804      	ldr	r0, [sp, #16]
 8012ec0:	960e      	str	r6, [sp, #56]	; 0x38
 8012ec2:	970f      	str	r7, [sp, #60]	; 0x3c
 8012ec4:	f003 fc22 	bl	801670c <__d2b>
 8012ec8:	9022      	str	r0, [sp, #136]	; 0x88
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d100      	bne.n	8012ed0 <_strtod_l+0x6b0>
 8012ece:	e6dd      	b.n	8012c8c <_strtod_l+0x46c>
 8012ed0:	2101      	movs	r1, #1
 8012ed2:	9804      	ldr	r0, [sp, #16]
 8012ed4:	f003 f9fd 	bl	80162d2 <__i2b>
 8012ed8:	9005      	str	r0, [sp, #20]
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d100      	bne.n	8012ee0 <_strtod_l+0x6c0>
 8012ede:	e6d5      	b.n	8012c8c <_strtod_l+0x46c>
 8012ee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	da00      	bge.n	8012ee8 <_strtod_l+0x6c8>
 8012ee6:	e0c1      	b.n	801306c <_strtod_l+0x84c>
 8012ee8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012eea:	189d      	adds	r5, r3, r2
 8012eec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012eee:	4694      	mov	ip, r2
 8012ef0:	9906      	ldr	r1, [sp, #24]
 8012ef2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012ef4:	1a5b      	subs	r3, r3, r1
 8012ef6:	2136      	movs	r1, #54	; 0x36
 8012ef8:	189b      	adds	r3, r3, r2
 8012efa:	1a8a      	subs	r2, r1, r2
 8012efc:	49b2      	ldr	r1, [pc, #712]	; (80131c8 <_strtod_l+0x9a8>)
 8012efe:	3b01      	subs	r3, #1
 8012f00:	2001      	movs	r0, #1
 8012f02:	428b      	cmp	r3, r1
 8012f04:	db00      	blt.n	8012f08 <_strtod_l+0x6e8>
 8012f06:	e0bd      	b.n	8013084 <_strtod_l+0x864>
 8012f08:	1ac9      	subs	r1, r1, r3
 8012f0a:	1a52      	subs	r2, r2, r1
 8012f0c:	291f      	cmp	r1, #31
 8012f0e:	dd00      	ble.n	8012f12 <_strtod_l+0x6f2>
 8012f10:	e0b1      	b.n	8013076 <_strtod_l+0x856>
 8012f12:	4088      	lsls	r0, r1
 8012f14:	2300      	movs	r3, #0
 8012f16:	9014      	str	r0, [sp, #80]	; 0x50
 8012f18:	9310      	str	r3, [sp, #64]	; 0x40
 8012f1a:	18ab      	adds	r3, r5, r2
 8012f1c:	9308      	str	r3, [sp, #32]
 8012f1e:	0013      	movs	r3, r2
 8012f20:	9a06      	ldr	r2, [sp, #24]
 8012f22:	4463      	add	r3, ip
 8012f24:	18d3      	adds	r3, r2, r3
 8012f26:	9a08      	ldr	r2, [sp, #32]
 8012f28:	930c      	str	r3, [sp, #48]	; 0x30
 8012f2a:	002b      	movs	r3, r5
 8012f2c:	4295      	cmp	r5, r2
 8012f2e:	dd00      	ble.n	8012f32 <_strtod_l+0x712>
 8012f30:	0013      	movs	r3, r2
 8012f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f34:	4293      	cmp	r3, r2
 8012f36:	dd00      	ble.n	8012f3a <_strtod_l+0x71a>
 8012f38:	0013      	movs	r3, r2
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	dd06      	ble.n	8012f4c <_strtod_l+0x72c>
 8012f3e:	9a08      	ldr	r2, [sp, #32]
 8012f40:	1aed      	subs	r5, r5, r3
 8012f42:	1ad2      	subs	r2, r2, r3
 8012f44:	9208      	str	r2, [sp, #32]
 8012f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f48:	1ad2      	subs	r2, r2, r3
 8012f4a:	920c      	str	r2, [sp, #48]	; 0x30
 8012f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d017      	beq.n	8012f82 <_strtod_l+0x762>
 8012f52:	001a      	movs	r2, r3
 8012f54:	9905      	ldr	r1, [sp, #20]
 8012f56:	9804      	ldr	r0, [sp, #16]
 8012f58:	f003 fa54 	bl	8016404 <__pow5mult>
 8012f5c:	9005      	str	r0, [sp, #20]
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d100      	bne.n	8012f64 <_strtod_l+0x744>
 8012f62:	e693      	b.n	8012c8c <_strtod_l+0x46c>
 8012f64:	0001      	movs	r1, r0
 8012f66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012f68:	9804      	ldr	r0, [sp, #16]
 8012f6a:	f003 f9bb 	bl	80162e4 <__multiply>
 8012f6e:	9012      	str	r0, [sp, #72]	; 0x48
 8012f70:	2800      	cmp	r0, #0
 8012f72:	d100      	bne.n	8012f76 <_strtod_l+0x756>
 8012f74:	e68a      	b.n	8012c8c <_strtod_l+0x46c>
 8012f76:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012f78:	9804      	ldr	r0, [sp, #16]
 8012f7a:	f003 f8db 	bl	8016134 <_Bfree>
 8012f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f80:	9322      	str	r3, [sp, #136]	; 0x88
 8012f82:	9b08      	ldr	r3, [sp, #32]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	dd00      	ble.n	8012f8a <_strtod_l+0x76a>
 8012f88:	e07f      	b.n	801308a <_strtod_l+0x86a>
 8012f8a:	9b07      	ldr	r3, [sp, #28]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	dd08      	ble.n	8012fa2 <_strtod_l+0x782>
 8012f90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012f92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f94:	9804      	ldr	r0, [sp, #16]
 8012f96:	f003 fa35 	bl	8016404 <__pow5mult>
 8012f9a:	900a      	str	r0, [sp, #40]	; 0x28
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d100      	bne.n	8012fa2 <_strtod_l+0x782>
 8012fa0:	e674      	b.n	8012c8c <_strtod_l+0x46c>
 8012fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	dd08      	ble.n	8012fba <_strtod_l+0x79a>
 8012fa8:	001a      	movs	r2, r3
 8012faa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012fac:	9804      	ldr	r0, [sp, #16]
 8012fae:	f003 fa6b 	bl	8016488 <__lshift>
 8012fb2:	900a      	str	r0, [sp, #40]	; 0x28
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d100      	bne.n	8012fba <_strtod_l+0x79a>
 8012fb8:	e668      	b.n	8012c8c <_strtod_l+0x46c>
 8012fba:	2d00      	cmp	r5, #0
 8012fbc:	dd08      	ble.n	8012fd0 <_strtod_l+0x7b0>
 8012fbe:	002a      	movs	r2, r5
 8012fc0:	9905      	ldr	r1, [sp, #20]
 8012fc2:	9804      	ldr	r0, [sp, #16]
 8012fc4:	f003 fa60 	bl	8016488 <__lshift>
 8012fc8:	9005      	str	r0, [sp, #20]
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d100      	bne.n	8012fd0 <_strtod_l+0x7b0>
 8012fce:	e65d      	b.n	8012c8c <_strtod_l+0x46c>
 8012fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012fd4:	9804      	ldr	r0, [sp, #16]
 8012fd6:	f003 fac3 	bl	8016560 <__mdiff>
 8012fda:	1e04      	subs	r4, r0, #0
 8012fdc:	d100      	bne.n	8012fe0 <_strtod_l+0x7c0>
 8012fde:	e655      	b.n	8012c8c <_strtod_l+0x46c>
 8012fe0:	2500      	movs	r5, #0
 8012fe2:	68c3      	ldr	r3, [r0, #12]
 8012fe4:	9905      	ldr	r1, [sp, #20]
 8012fe6:	60c5      	str	r5, [r0, #12]
 8012fe8:	9312      	str	r3, [sp, #72]	; 0x48
 8012fea:	f003 fa9f 	bl	801652c <__mcmp>
 8012fee:	42a8      	cmp	r0, r5
 8012ff0:	da55      	bge.n	801309e <_strtod_l+0x87e>
 8012ff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012ff4:	42ab      	cmp	r3, r5
 8012ff6:	d11b      	bne.n	8013030 <_strtod_l+0x810>
 8012ff8:	42ae      	cmp	r6, r5
 8012ffa:	d119      	bne.n	8013030 <_strtod_l+0x810>
 8012ffc:	033b      	lsls	r3, r7, #12
 8012ffe:	42ab      	cmp	r3, r5
 8013000:	d116      	bne.n	8013030 <_strtod_l+0x810>
 8013002:	22d6      	movs	r2, #214	; 0xd6
 8013004:	4b71      	ldr	r3, [pc, #452]	; (80131cc <_strtod_l+0x9ac>)
 8013006:	04d2      	lsls	r2, r2, #19
 8013008:	403b      	ands	r3, r7
 801300a:	4293      	cmp	r3, r2
 801300c:	d910      	bls.n	8013030 <_strtod_l+0x810>
 801300e:	6963      	ldr	r3, [r4, #20]
 8013010:	42ab      	cmp	r3, r5
 8013012:	d102      	bne.n	801301a <_strtod_l+0x7fa>
 8013014:	6923      	ldr	r3, [r4, #16]
 8013016:	2b01      	cmp	r3, #1
 8013018:	dd0a      	ble.n	8013030 <_strtod_l+0x810>
 801301a:	0021      	movs	r1, r4
 801301c:	2201      	movs	r2, #1
 801301e:	9804      	ldr	r0, [sp, #16]
 8013020:	f003 fa32 	bl	8016488 <__lshift>
 8013024:	9905      	ldr	r1, [sp, #20]
 8013026:	0004      	movs	r4, r0
 8013028:	f003 fa80 	bl	801652c <__mcmp>
 801302c:	2800      	cmp	r0, #0
 801302e:	dc6b      	bgt.n	8013108 <_strtod_l+0x8e8>
 8013030:	9b06      	ldr	r3, [sp, #24]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d178      	bne.n	8013128 <_strtod_l+0x908>
 8013036:	e632      	b.n	8012c9e <_strtod_l+0x47e>
 8013038:	2201      	movs	r2, #1
 801303a:	4214      	tst	r4, r2
 801303c:	d007      	beq.n	801304e <_strtod_l+0x82e>
 801303e:	4a64      	ldr	r2, [pc, #400]	; (80131d0 <_strtod_l+0x9b0>)
 8013040:	00eb      	lsls	r3, r5, #3
 8013042:	18d3      	adds	r3, r2, r3
 8013044:	681a      	ldr	r2, [r3, #0]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	f7ee fef4 	bl	8001e34 <__aeabi_dmul>
 801304c:	2301      	movs	r3, #1
 801304e:	3501      	adds	r5, #1
 8013050:	1064      	asrs	r4, r4, #1
 8013052:	e6df      	b.n	8012e14 <_strtod_l+0x5f4>
 8013054:	2101      	movs	r1, #1
 8013056:	3b20      	subs	r3, #32
 8013058:	4249      	negs	r1, r1
 801305a:	4099      	lsls	r1, r3
 801305c:	400a      	ands	r2, r1
 801305e:	0017      	movs	r7, r2
 8013060:	e6f2      	b.n	8012e48 <_strtod_l+0x628>
 8013062:	2201      	movs	r2, #1
 8013064:	4252      	negs	r2, r2
 8013066:	409a      	lsls	r2, r3
 8013068:	4016      	ands	r6, r2
 801306a:	e6ed      	b.n	8012e48 <_strtod_l+0x628>
 801306c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801306e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013070:	1ad2      	subs	r2, r2, r3
 8013072:	4694      	mov	ip, r2
 8013074:	e73c      	b.n	8012ef0 <_strtod_l+0x6d0>
 8013076:	4957      	ldr	r1, [pc, #348]	; (80131d4 <_strtod_l+0x9b4>)
 8013078:	1acb      	subs	r3, r1, r3
 801307a:	0001      	movs	r1, r0
 801307c:	4099      	lsls	r1, r3
 801307e:	9110      	str	r1, [sp, #64]	; 0x40
 8013080:	9014      	str	r0, [sp, #80]	; 0x50
 8013082:	e74a      	b.n	8012f1a <_strtod_l+0x6fa>
 8013084:	2300      	movs	r3, #0
 8013086:	9310      	str	r3, [sp, #64]	; 0x40
 8013088:	e7fa      	b.n	8013080 <_strtod_l+0x860>
 801308a:	9a08      	ldr	r2, [sp, #32]
 801308c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801308e:	9804      	ldr	r0, [sp, #16]
 8013090:	f003 f9fa 	bl	8016488 <__lshift>
 8013094:	9022      	str	r0, [sp, #136]	; 0x88
 8013096:	2800      	cmp	r0, #0
 8013098:	d000      	beq.n	801309c <_strtod_l+0x87c>
 801309a:	e776      	b.n	8012f8a <_strtod_l+0x76a>
 801309c:	e5f6      	b.n	8012c8c <_strtod_l+0x46c>
 801309e:	970c      	str	r7, [sp, #48]	; 0x30
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d000      	beq.n	80130a6 <_strtod_l+0x886>
 80130a4:	e0a0      	b.n	80131e8 <_strtod_l+0x9c8>
 80130a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130a8:	033b      	lsls	r3, r7, #12
 80130aa:	0b1b      	lsrs	r3, r3, #12
 80130ac:	2a00      	cmp	r2, #0
 80130ae:	d027      	beq.n	8013100 <_strtod_l+0x8e0>
 80130b0:	4a49      	ldr	r2, [pc, #292]	; (80131d8 <_strtod_l+0x9b8>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d157      	bne.n	8013166 <_strtod_l+0x946>
 80130b6:	2201      	movs	r2, #1
 80130b8:	9b06      	ldr	r3, [sp, #24]
 80130ba:	4252      	negs	r2, r2
 80130bc:	0031      	movs	r1, r6
 80130be:	0010      	movs	r0, r2
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d00b      	beq.n	80130dc <_strtod_l+0x8bc>
 80130c4:	25d4      	movs	r5, #212	; 0xd4
 80130c6:	4b41      	ldr	r3, [pc, #260]	; (80131cc <_strtod_l+0x9ac>)
 80130c8:	04ed      	lsls	r5, r5, #19
 80130ca:	403b      	ands	r3, r7
 80130cc:	0010      	movs	r0, r2
 80130ce:	42ab      	cmp	r3, r5
 80130d0:	d804      	bhi.n	80130dc <_strtod_l+0x8bc>
 80130d2:	306c      	adds	r0, #108	; 0x6c
 80130d4:	0d1b      	lsrs	r3, r3, #20
 80130d6:	1ac3      	subs	r3, r0, r3
 80130d8:	409a      	lsls	r2, r3
 80130da:	0010      	movs	r0, r2
 80130dc:	4281      	cmp	r1, r0
 80130de:	d142      	bne.n	8013166 <_strtod_l+0x946>
 80130e0:	4b3e      	ldr	r3, [pc, #248]	; (80131dc <_strtod_l+0x9bc>)
 80130e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d102      	bne.n	80130ee <_strtod_l+0x8ce>
 80130e8:	1c4b      	adds	r3, r1, #1
 80130ea:	d100      	bne.n	80130ee <_strtod_l+0x8ce>
 80130ec:	e5ce      	b.n	8012c8c <_strtod_l+0x46c>
 80130ee:	4b37      	ldr	r3, [pc, #220]	; (80131cc <_strtod_l+0x9ac>)
 80130f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130f2:	2600      	movs	r6, #0
 80130f4:	401a      	ands	r2, r3
 80130f6:	0013      	movs	r3, r2
 80130f8:	2280      	movs	r2, #128	; 0x80
 80130fa:	0352      	lsls	r2, r2, #13
 80130fc:	189f      	adds	r7, r3, r2
 80130fe:	e797      	b.n	8013030 <_strtod_l+0x810>
 8013100:	2b00      	cmp	r3, #0
 8013102:	d130      	bne.n	8013166 <_strtod_l+0x946>
 8013104:	2e00      	cmp	r6, #0
 8013106:	d12e      	bne.n	8013166 <_strtod_l+0x946>
 8013108:	9906      	ldr	r1, [sp, #24]
 801310a:	003b      	movs	r3, r7
 801310c:	4a2f      	ldr	r2, [pc, #188]	; (80131cc <_strtod_l+0x9ac>)
 801310e:	2900      	cmp	r1, #0
 8013110:	d020      	beq.n	8013154 <_strtod_l+0x934>
 8013112:	0011      	movs	r1, r2
 8013114:	20d6      	movs	r0, #214	; 0xd6
 8013116:	4039      	ands	r1, r7
 8013118:	04c0      	lsls	r0, r0, #19
 801311a:	4281      	cmp	r1, r0
 801311c:	dc1a      	bgt.n	8013154 <_strtod_l+0x934>
 801311e:	23dc      	movs	r3, #220	; 0xdc
 8013120:	049b      	lsls	r3, r3, #18
 8013122:	4299      	cmp	r1, r3
 8013124:	dc00      	bgt.n	8013128 <_strtod_l+0x908>
 8013126:	e646      	b.n	8012db6 <_strtod_l+0x596>
 8013128:	4b2d      	ldr	r3, [pc, #180]	; (80131e0 <_strtod_l+0x9c0>)
 801312a:	0030      	movs	r0, r6
 801312c:	931b      	str	r3, [sp, #108]	; 0x6c
 801312e:	2300      	movs	r3, #0
 8013130:	931a      	str	r3, [sp, #104]	; 0x68
 8013132:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013136:	0039      	movs	r1, r7
 8013138:	f7ee fe7c 	bl	8001e34 <__aeabi_dmul>
 801313c:	0006      	movs	r6, r0
 801313e:	000f      	movs	r7, r1
 8013140:	1e0b      	subs	r3, r1, #0
 8013142:	d000      	beq.n	8013146 <_strtod_l+0x926>
 8013144:	e5ab      	b.n	8012c9e <_strtod_l+0x47e>
 8013146:	2800      	cmp	r0, #0
 8013148:	d000      	beq.n	801314c <_strtod_l+0x92c>
 801314a:	e5a8      	b.n	8012c9e <_strtod_l+0x47e>
 801314c:	9a04      	ldr	r2, [sp, #16]
 801314e:	3322      	adds	r3, #34	; 0x22
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	e5a4      	b.n	8012c9e <_strtod_l+0x47e>
 8013154:	2601      	movs	r6, #1
 8013156:	4013      	ands	r3, r2
 8013158:	4a22      	ldr	r2, [pc, #136]	; (80131e4 <_strtod_l+0x9c4>)
 801315a:	4276      	negs	r6, r6
 801315c:	189b      	adds	r3, r3, r2
 801315e:	4a1e      	ldr	r2, [pc, #120]	; (80131d8 <_strtod_l+0x9b8>)
 8013160:	431a      	orrs	r2, r3
 8013162:	0017      	movs	r7, r2
 8013164:	e764      	b.n	8013030 <_strtod_l+0x810>
 8013166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013168:	2b00      	cmp	r3, #0
 801316a:	d015      	beq.n	8013198 <_strtod_l+0x978>
 801316c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801316e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013170:	4213      	tst	r3, r2
 8013172:	d100      	bne.n	8013176 <_strtod_l+0x956>
 8013174:	e75c      	b.n	8013030 <_strtod_l+0x810>
 8013176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013178:	9a06      	ldr	r2, [sp, #24]
 801317a:	0030      	movs	r0, r6
 801317c:	0039      	movs	r1, r7
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00f      	beq.n	80131a2 <_strtod_l+0x982>
 8013182:	f7ff fb35 	bl	80127f0 <sulp>
 8013186:	0002      	movs	r2, r0
 8013188:	000b      	movs	r3, r1
 801318a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801318c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801318e:	f7ed ff2b 	bl	8000fe8 <__aeabi_dadd>
 8013192:	0006      	movs	r6, r0
 8013194:	000f      	movs	r7, r1
 8013196:	e74b      	b.n	8013030 <_strtod_l+0x810>
 8013198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801319a:	4233      	tst	r3, r6
 801319c:	d100      	bne.n	80131a0 <_strtod_l+0x980>
 801319e:	e747      	b.n	8013030 <_strtod_l+0x810>
 80131a0:	e7e9      	b.n	8013176 <_strtod_l+0x956>
 80131a2:	f7ff fb25 	bl	80127f0 <sulp>
 80131a6:	0002      	movs	r2, r0
 80131a8:	000b      	movs	r3, r1
 80131aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80131ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80131ae:	f7ef f8b3 	bl	8002318 <__aeabi_dsub>
 80131b2:	2200      	movs	r2, #0
 80131b4:	2300      	movs	r3, #0
 80131b6:	0006      	movs	r6, r0
 80131b8:	000f      	movs	r7, r1
 80131ba:	f7ed f94f 	bl	800045c <__aeabi_dcmpeq>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d000      	beq.n	80131c4 <_strtod_l+0x9a4>
 80131c2:	e5f8      	b.n	8012db6 <_strtod_l+0x596>
 80131c4:	e734      	b.n	8013030 <_strtod_l+0x810>
 80131c6:	46c0      	nop			; (mov r8, r8)
 80131c8:	fffffc02 	.word	0xfffffc02
 80131cc:	7ff00000 	.word	0x7ff00000
 80131d0:	08019a38 	.word	0x08019a38
 80131d4:	fffffbe2 	.word	0xfffffbe2
 80131d8:	000fffff 	.word	0x000fffff
 80131dc:	7fefffff 	.word	0x7fefffff
 80131e0:	39500000 	.word	0x39500000
 80131e4:	fff00000 	.word	0xfff00000
 80131e8:	9905      	ldr	r1, [sp, #20]
 80131ea:	0020      	movs	r0, r4
 80131ec:	f003 fae2 	bl	80167b4 <__ratio>
 80131f0:	2380      	movs	r3, #128	; 0x80
 80131f2:	2200      	movs	r2, #0
 80131f4:	05db      	lsls	r3, r3, #23
 80131f6:	9008      	str	r0, [sp, #32]
 80131f8:	9109      	str	r1, [sp, #36]	; 0x24
 80131fa:	f7ed f93f 	bl	800047c <__aeabi_dcmple>
 80131fe:	2800      	cmp	r0, #0
 8013200:	d100      	bne.n	8013204 <_strtod_l+0x9e4>
 8013202:	e07f      	b.n	8013304 <_strtod_l+0xae4>
 8013204:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013206:	2b00      	cmp	r3, #0
 8013208:	d04b      	beq.n	80132a2 <_strtod_l+0xa82>
 801320a:	2200      	movs	r2, #0
 801320c:	4b8a      	ldr	r3, [pc, #552]	; (8013438 <_strtod_l+0xc18>)
 801320e:	9210      	str	r2, [sp, #64]	; 0x40
 8013210:	9311      	str	r3, [sp, #68]	; 0x44
 8013212:	4b89      	ldr	r3, [pc, #548]	; (8013438 <_strtod_l+0xc18>)
 8013214:	9308      	str	r3, [sp, #32]
 8013216:	4a89      	ldr	r2, [pc, #548]	; (801343c <_strtod_l+0xc1c>)
 8013218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801321a:	4013      	ands	r3, r2
 801321c:	9314      	str	r3, [sp, #80]	; 0x50
 801321e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013220:	4b87      	ldr	r3, [pc, #540]	; (8013440 <_strtod_l+0xc20>)
 8013222:	429a      	cmp	r2, r3
 8013224:	d000      	beq.n	8013228 <_strtod_l+0xa08>
 8013226:	e0ba      	b.n	801339e <_strtod_l+0xb7e>
 8013228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801322a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801322c:	921a      	str	r2, [sp, #104]	; 0x68
 801322e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013230:	4a84      	ldr	r2, [pc, #528]	; (8013444 <_strtod_l+0xc24>)
 8013232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013234:	4694      	mov	ip, r2
 8013236:	4463      	add	r3, ip
 8013238:	001f      	movs	r7, r3
 801323a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801323c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801323e:	0030      	movs	r0, r6
 8013240:	0039      	movs	r1, r7
 8013242:	920c      	str	r2, [sp, #48]	; 0x30
 8013244:	930d      	str	r3, [sp, #52]	; 0x34
 8013246:	f003 f9ef 	bl	8016628 <__ulp>
 801324a:	0002      	movs	r2, r0
 801324c:	000b      	movs	r3, r1
 801324e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013250:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013252:	f7ee fdef 	bl	8001e34 <__aeabi_dmul>
 8013256:	0032      	movs	r2, r6
 8013258:	003b      	movs	r3, r7
 801325a:	f7ed fec5 	bl	8000fe8 <__aeabi_dadd>
 801325e:	4a77      	ldr	r2, [pc, #476]	; (801343c <_strtod_l+0xc1c>)
 8013260:	4b79      	ldr	r3, [pc, #484]	; (8013448 <_strtod_l+0xc28>)
 8013262:	0006      	movs	r6, r0
 8013264:	400a      	ands	r2, r1
 8013266:	429a      	cmp	r2, r3
 8013268:	d964      	bls.n	8013334 <_strtod_l+0xb14>
 801326a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801326c:	4a77      	ldr	r2, [pc, #476]	; (801344c <_strtod_l+0xc2c>)
 801326e:	4293      	cmp	r3, r2
 8013270:	d103      	bne.n	801327a <_strtod_l+0xa5a>
 8013272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013274:	3301      	adds	r3, #1
 8013276:	d100      	bne.n	801327a <_strtod_l+0xa5a>
 8013278:	e508      	b.n	8012c8c <_strtod_l+0x46c>
 801327a:	2601      	movs	r6, #1
 801327c:	4f73      	ldr	r7, [pc, #460]	; (801344c <_strtod_l+0xc2c>)
 801327e:	4276      	negs	r6, r6
 8013280:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013282:	9804      	ldr	r0, [sp, #16]
 8013284:	f002 ff56 	bl	8016134 <_Bfree>
 8013288:	990a      	ldr	r1, [sp, #40]	; 0x28
 801328a:	9804      	ldr	r0, [sp, #16]
 801328c:	f002 ff52 	bl	8016134 <_Bfree>
 8013290:	9905      	ldr	r1, [sp, #20]
 8013292:	9804      	ldr	r0, [sp, #16]
 8013294:	f002 ff4e 	bl	8016134 <_Bfree>
 8013298:	0021      	movs	r1, r4
 801329a:	9804      	ldr	r0, [sp, #16]
 801329c:	f002 ff4a 	bl	8016134 <_Bfree>
 80132a0:	e5f4      	b.n	8012e8c <_strtod_l+0x66c>
 80132a2:	2e00      	cmp	r6, #0
 80132a4:	d11e      	bne.n	80132e4 <_strtod_l+0xac4>
 80132a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132a8:	031b      	lsls	r3, r3, #12
 80132aa:	d121      	bne.n	80132f0 <_strtod_l+0xad0>
 80132ac:	9808      	ldr	r0, [sp, #32]
 80132ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132b0:	2200      	movs	r2, #0
 80132b2:	4b61      	ldr	r3, [pc, #388]	; (8013438 <_strtod_l+0xc18>)
 80132b4:	f7ed f8d8 	bl	8000468 <__aeabi_dcmplt>
 80132b8:	2800      	cmp	r0, #0
 80132ba:	d11f      	bne.n	80132fc <_strtod_l+0xadc>
 80132bc:	9808      	ldr	r0, [sp, #32]
 80132be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132c0:	2200      	movs	r2, #0
 80132c2:	4b63      	ldr	r3, [pc, #396]	; (8013450 <_strtod_l+0xc30>)
 80132c4:	f7ee fdb6 	bl	8001e34 <__aeabi_dmul>
 80132c8:	0005      	movs	r5, r0
 80132ca:	9108      	str	r1, [sp, #32]
 80132cc:	2280      	movs	r2, #128	; 0x80
 80132ce:	0612      	lsls	r2, r2, #24
 80132d0:	4694      	mov	ip, r2
 80132d2:	9b08      	ldr	r3, [sp, #32]
 80132d4:	951e      	str	r5, [sp, #120]	; 0x78
 80132d6:	4463      	add	r3, ip
 80132d8:	931f      	str	r3, [sp, #124]	; 0x7c
 80132da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80132dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80132de:	9210      	str	r2, [sp, #64]	; 0x40
 80132e0:	9311      	str	r3, [sp, #68]	; 0x44
 80132e2:	e798      	b.n	8013216 <_strtod_l+0x9f6>
 80132e4:	2e01      	cmp	r6, #1
 80132e6:	d103      	bne.n	80132f0 <_strtod_l+0xad0>
 80132e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d100      	bne.n	80132f0 <_strtod_l+0xad0>
 80132ee:	e562      	b.n	8012db6 <_strtod_l+0x596>
 80132f0:	2200      	movs	r2, #0
 80132f2:	4b58      	ldr	r3, [pc, #352]	; (8013454 <_strtod_l+0xc34>)
 80132f4:	2500      	movs	r5, #0
 80132f6:	9210      	str	r2, [sp, #64]	; 0x40
 80132f8:	9311      	str	r3, [sp, #68]	; 0x44
 80132fa:	e78a      	b.n	8013212 <_strtod_l+0x9f2>
 80132fc:	4b54      	ldr	r3, [pc, #336]	; (8013450 <_strtod_l+0xc30>)
 80132fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013300:	9308      	str	r3, [sp, #32]
 8013302:	e7e3      	b.n	80132cc <_strtod_l+0xaac>
 8013304:	4b52      	ldr	r3, [pc, #328]	; (8013450 <_strtod_l+0xc30>)
 8013306:	9808      	ldr	r0, [sp, #32]
 8013308:	9909      	ldr	r1, [sp, #36]	; 0x24
 801330a:	2200      	movs	r2, #0
 801330c:	f7ee fd92 	bl	8001e34 <__aeabi_dmul>
 8013310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013312:	0005      	movs	r5, r0
 8013314:	9108      	str	r1, [sp, #32]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d107      	bne.n	801332a <_strtod_l+0xb0a>
 801331a:	2380      	movs	r3, #128	; 0x80
 801331c:	061b      	lsls	r3, r3, #24
 801331e:	18cb      	adds	r3, r1, r3
 8013320:	9016      	str	r0, [sp, #88]	; 0x58
 8013322:	9317      	str	r3, [sp, #92]	; 0x5c
 8013324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013328:	e7d9      	b.n	80132de <_strtod_l+0xabe>
 801332a:	0002      	movs	r2, r0
 801332c:	9b08      	ldr	r3, [sp, #32]
 801332e:	9216      	str	r2, [sp, #88]	; 0x58
 8013330:	9317      	str	r3, [sp, #92]	; 0x5c
 8013332:	e7f7      	b.n	8013324 <_strtod_l+0xb04>
 8013334:	23d4      	movs	r3, #212	; 0xd4
 8013336:	049b      	lsls	r3, r3, #18
 8013338:	18cf      	adds	r7, r1, r3
 801333a:	9b06      	ldr	r3, [sp, #24]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d19f      	bne.n	8013280 <_strtod_l+0xa60>
 8013340:	4b3e      	ldr	r3, [pc, #248]	; (801343c <_strtod_l+0xc1c>)
 8013342:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013344:	970c      	str	r7, [sp, #48]	; 0x30
 8013346:	403b      	ands	r3, r7
 8013348:	429a      	cmp	r2, r3
 801334a:	d199      	bne.n	8013280 <_strtod_l+0xa60>
 801334c:	9908      	ldr	r1, [sp, #32]
 801334e:	0028      	movs	r0, r5
 8013350:	f7ef fb46 	bl	80029e0 <__aeabi_d2iz>
 8013354:	f7ef fb7a 	bl	8002a4c <__aeabi_i2d>
 8013358:	000b      	movs	r3, r1
 801335a:	0002      	movs	r2, r0
 801335c:	9908      	ldr	r1, [sp, #32]
 801335e:	0028      	movs	r0, r5
 8013360:	f7ee ffda 	bl	8002318 <__aeabi_dsub>
 8013364:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013366:	9008      	str	r0, [sp, #32]
 8013368:	9109      	str	r1, [sp, #36]	; 0x24
 801336a:	2b00      	cmp	r3, #0
 801336c:	d104      	bne.n	8013378 <_strtod_l+0xb58>
 801336e:	2e00      	cmp	r6, #0
 8013370:	d102      	bne.n	8013378 <_strtod_l+0xb58>
 8013372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013374:	031b      	lsls	r3, r3, #12
 8013376:	d058      	beq.n	801342a <_strtod_l+0xc0a>
 8013378:	9808      	ldr	r0, [sp, #32]
 801337a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801337c:	4a36      	ldr	r2, [pc, #216]	; (8013458 <_strtod_l+0xc38>)
 801337e:	4b37      	ldr	r3, [pc, #220]	; (801345c <_strtod_l+0xc3c>)
 8013380:	f7ed f872 	bl	8000468 <__aeabi_dcmplt>
 8013384:	2800      	cmp	r0, #0
 8013386:	d000      	beq.n	801338a <_strtod_l+0xb6a>
 8013388:	e489      	b.n	8012c9e <_strtod_l+0x47e>
 801338a:	9808      	ldr	r0, [sp, #32]
 801338c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801338e:	4a34      	ldr	r2, [pc, #208]	; (8013460 <_strtod_l+0xc40>)
 8013390:	4b2f      	ldr	r3, [pc, #188]	; (8013450 <_strtod_l+0xc30>)
 8013392:	f7ed f87d 	bl	8000490 <__aeabi_dcmpgt>
 8013396:	2800      	cmp	r0, #0
 8013398:	d100      	bne.n	801339c <_strtod_l+0xb7c>
 801339a:	e771      	b.n	8013280 <_strtod_l+0xa60>
 801339c:	e47f      	b.n	8012c9e <_strtod_l+0x47e>
 801339e:	9b06      	ldr	r3, [sp, #24]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d02a      	beq.n	80133fa <_strtod_l+0xbda>
 80133a4:	23d4      	movs	r3, #212	; 0xd4
 80133a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133a8:	04db      	lsls	r3, r3, #19
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d825      	bhi.n	80133fa <_strtod_l+0xbda>
 80133ae:	4a2d      	ldr	r2, [pc, #180]	; (8013464 <_strtod_l+0xc44>)
 80133b0:	4b2d      	ldr	r3, [pc, #180]	; (8013468 <_strtod_l+0xc48>)
 80133b2:	0028      	movs	r0, r5
 80133b4:	9908      	ldr	r1, [sp, #32]
 80133b6:	f7ed f861 	bl	800047c <__aeabi_dcmple>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d016      	beq.n	80133ec <_strtod_l+0xbcc>
 80133be:	0028      	movs	r0, r5
 80133c0:	9908      	ldr	r1, [sp, #32]
 80133c2:	f7ed f915 	bl	80005f0 <__aeabi_d2uiz>
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d100      	bne.n	80133cc <_strtod_l+0xbac>
 80133ca:	3001      	adds	r0, #1
 80133cc:	f7ef fb78 	bl	8002ac0 <__aeabi_ui2d>
 80133d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133d2:	0005      	movs	r5, r0
 80133d4:	9108      	str	r1, [sp, #32]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d122      	bne.n	8013420 <_strtod_l+0xc00>
 80133da:	2380      	movs	r3, #128	; 0x80
 80133dc:	061b      	lsls	r3, r3, #24
 80133de:	18cb      	adds	r3, r1, r3
 80133e0:	9018      	str	r0, [sp, #96]	; 0x60
 80133e2:	9319      	str	r3, [sp, #100]	; 0x64
 80133e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80133e8:	9210      	str	r2, [sp, #64]	; 0x40
 80133ea:	9311      	str	r3, [sp, #68]	; 0x44
 80133ec:	22d6      	movs	r2, #214	; 0xd6
 80133ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133f0:	04d2      	lsls	r2, r2, #19
 80133f2:	189b      	adds	r3, r3, r2
 80133f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133f6:	1a9b      	subs	r3, r3, r2
 80133f8:	9311      	str	r3, [sp, #68]	; 0x44
 80133fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80133fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80133fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013400:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013402:	f003 f911 	bl	8016628 <__ulp>
 8013406:	0002      	movs	r2, r0
 8013408:	000b      	movs	r3, r1
 801340a:	0030      	movs	r0, r6
 801340c:	0039      	movs	r1, r7
 801340e:	f7ee fd11 	bl	8001e34 <__aeabi_dmul>
 8013412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013416:	f7ed fde7 	bl	8000fe8 <__aeabi_dadd>
 801341a:	0006      	movs	r6, r0
 801341c:	000f      	movs	r7, r1
 801341e:	e78c      	b.n	801333a <_strtod_l+0xb1a>
 8013420:	0002      	movs	r2, r0
 8013422:	9b08      	ldr	r3, [sp, #32]
 8013424:	9218      	str	r2, [sp, #96]	; 0x60
 8013426:	9319      	str	r3, [sp, #100]	; 0x64
 8013428:	e7dc      	b.n	80133e4 <_strtod_l+0xbc4>
 801342a:	4a0b      	ldr	r2, [pc, #44]	; (8013458 <_strtod_l+0xc38>)
 801342c:	4b0f      	ldr	r3, [pc, #60]	; (801346c <_strtod_l+0xc4c>)
 801342e:	9808      	ldr	r0, [sp, #32]
 8013430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013432:	f7ed f819 	bl	8000468 <__aeabi_dcmplt>
 8013436:	e7ae      	b.n	8013396 <_strtod_l+0xb76>
 8013438:	3ff00000 	.word	0x3ff00000
 801343c:	7ff00000 	.word	0x7ff00000
 8013440:	7fe00000 	.word	0x7fe00000
 8013444:	fcb00000 	.word	0xfcb00000
 8013448:	7c9fffff 	.word	0x7c9fffff
 801344c:	7fefffff 	.word	0x7fefffff
 8013450:	3fe00000 	.word	0x3fe00000
 8013454:	bff00000 	.word	0xbff00000
 8013458:	94a03595 	.word	0x94a03595
 801345c:	3fdfffff 	.word	0x3fdfffff
 8013460:	35afe535 	.word	0x35afe535
 8013464:	ffc00000 	.word	0xffc00000
 8013468:	41dfffff 	.word	0x41dfffff
 801346c:	3fcfffff 	.word	0x3fcfffff

08013470 <strtod>:
 8013470:	4b06      	ldr	r3, [pc, #24]	; (801348c <strtod+0x1c>)
 8013472:	b510      	push	{r4, lr}
 8013474:	0004      	movs	r4, r0
 8013476:	6818      	ldr	r0, [r3, #0]
 8013478:	000a      	movs	r2, r1
 801347a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801347c:	2b00      	cmp	r3, #0
 801347e:	d100      	bne.n	8013482 <strtod+0x12>
 8013480:	4b03      	ldr	r3, [pc, #12]	; (8013490 <strtod+0x20>)
 8013482:	0021      	movs	r1, r4
 8013484:	f7ff f9cc 	bl	8012820 <_strtod_l>
 8013488:	bd10      	pop	{r4, pc}
 801348a:	46c0      	nop			; (mov r8, r8)
 801348c:	200000cc 	.word	0x200000cc
 8013490:	200004f8 	.word	0x200004f8

08013494 <strtok>:
 8013494:	4b03      	ldr	r3, [pc, #12]	; (80134a4 <strtok+0x10>)
 8013496:	b510      	push	{r4, lr}
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	2301      	movs	r3, #1
 801349c:	325c      	adds	r2, #92	; 0x5c
 801349e:	f000 f803 	bl	80134a8 <__strtok_r>
 80134a2:	bd10      	pop	{r4, pc}
 80134a4:	200000cc 	.word	0x200000cc

080134a8 <__strtok_r>:
 80134a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d104      	bne.n	80134b8 <__strtok_r+0x10>
 80134ae:	6810      	ldr	r0, [r2, #0]
 80134b0:	2800      	cmp	r0, #0
 80134b2:	d101      	bne.n	80134b8 <__strtok_r+0x10>
 80134b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134b6:	0020      	movs	r0, r4
 80134b8:	000e      	movs	r6, r1
 80134ba:	7805      	ldrb	r5, [r0, #0]
 80134bc:	1c44      	adds	r4, r0, #1
 80134be:	7837      	ldrb	r7, [r6, #0]
 80134c0:	2f00      	cmp	r7, #0
 80134c2:	d104      	bne.n	80134ce <__strtok_r+0x26>
 80134c4:	2d00      	cmp	r5, #0
 80134c6:	d110      	bne.n	80134ea <__strtok_r+0x42>
 80134c8:	6015      	str	r5, [r2, #0]
 80134ca:	0028      	movs	r0, r5
 80134cc:	e7f2      	b.n	80134b4 <__strtok_r+0xc>
 80134ce:	3601      	adds	r6, #1
 80134d0:	42bd      	cmp	r5, r7
 80134d2:	d1f4      	bne.n	80134be <__strtok_r+0x16>
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1ee      	bne.n	80134b6 <__strtok_r+0xe>
 80134d8:	6014      	str	r4, [r2, #0]
 80134da:	7003      	strb	r3, [r0, #0]
 80134dc:	e7ea      	b.n	80134b4 <__strtok_r+0xc>
 80134de:	0033      	movs	r3, r6
 80134e0:	e00d      	b.n	80134fe <__strtok_r+0x56>
 80134e2:	3501      	adds	r5, #1
 80134e4:	2f00      	cmp	r7, #0
 80134e6:	d103      	bne.n	80134f0 <__strtok_r+0x48>
 80134e8:	001c      	movs	r4, r3
 80134ea:	000d      	movs	r5, r1
 80134ec:	7826      	ldrb	r6, [r4, #0]
 80134ee:	1c63      	adds	r3, r4, #1
 80134f0:	782f      	ldrb	r7, [r5, #0]
 80134f2:	42be      	cmp	r6, r7
 80134f4:	d1f5      	bne.n	80134e2 <__strtok_r+0x3a>
 80134f6:	2e00      	cmp	r6, #0
 80134f8:	d0f1      	beq.n	80134de <__strtok_r+0x36>
 80134fa:	2100      	movs	r1, #0
 80134fc:	7021      	strb	r1, [r4, #0]
 80134fe:	6013      	str	r3, [r2, #0]
 8013500:	e7d8      	b.n	80134b4 <__strtok_r+0xc>
	...

08013504 <_strtol_l.isra.0>:
 8013504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013506:	001f      	movs	r7, r3
 8013508:	000e      	movs	r6, r1
 801350a:	b087      	sub	sp, #28
 801350c:	9005      	str	r0, [sp, #20]
 801350e:	9101      	str	r1, [sp, #4]
 8013510:	9202      	str	r2, [sp, #8]
 8013512:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013514:	7834      	ldrb	r4, [r6, #0]
 8013516:	f7fe fc9f 	bl	8011e58 <__locale_ctype_ptr_l>
 801351a:	2208      	movs	r2, #8
 801351c:	1900      	adds	r0, r0, r4
 801351e:	7843      	ldrb	r3, [r0, #1]
 8013520:	1c75      	adds	r5, r6, #1
 8013522:	4013      	ands	r3, r2
 8013524:	d136      	bne.n	8013594 <_strtol_l.isra.0+0x90>
 8013526:	2c2d      	cmp	r4, #45	; 0x2d
 8013528:	d136      	bne.n	8013598 <_strtol_l.isra.0+0x94>
 801352a:	1cb5      	adds	r5, r6, #2
 801352c:	7874      	ldrb	r4, [r6, #1]
 801352e:	2601      	movs	r6, #1
 8013530:	2f00      	cmp	r7, #0
 8013532:	d062      	beq.n	80135fa <_strtol_l.isra.0+0xf6>
 8013534:	2f10      	cmp	r7, #16
 8013536:	d109      	bne.n	801354c <_strtol_l.isra.0+0x48>
 8013538:	2c30      	cmp	r4, #48	; 0x30
 801353a:	d107      	bne.n	801354c <_strtol_l.isra.0+0x48>
 801353c:	2220      	movs	r2, #32
 801353e:	782b      	ldrb	r3, [r5, #0]
 8013540:	4393      	bics	r3, r2
 8013542:	2b58      	cmp	r3, #88	; 0x58
 8013544:	d154      	bne.n	80135f0 <_strtol_l.isra.0+0xec>
 8013546:	2710      	movs	r7, #16
 8013548:	786c      	ldrb	r4, [r5, #1]
 801354a:	3502      	adds	r5, #2
 801354c:	4b2d      	ldr	r3, [pc, #180]	; (8013604 <_strtol_l.isra.0+0x100>)
 801354e:	0039      	movs	r1, r7
 8013550:	18f3      	adds	r3, r6, r3
 8013552:	0018      	movs	r0, r3
 8013554:	9303      	str	r3, [sp, #12]
 8013556:	f7ec fe81 	bl	800025c <__aeabi_uidivmod>
 801355a:	9104      	str	r1, [sp, #16]
 801355c:	2101      	movs	r1, #1
 801355e:	2300      	movs	r3, #0
 8013560:	4249      	negs	r1, r1
 8013562:	0002      	movs	r2, r0
 8013564:	468c      	mov	ip, r1
 8013566:	0018      	movs	r0, r3
 8013568:	0021      	movs	r1, r4
 801356a:	3930      	subs	r1, #48	; 0x30
 801356c:	2909      	cmp	r1, #9
 801356e:	d81a      	bhi.n	80135a6 <_strtol_l.isra.0+0xa2>
 8013570:	000c      	movs	r4, r1
 8013572:	42a7      	cmp	r7, r4
 8013574:	dd23      	ble.n	80135be <_strtol_l.isra.0+0xba>
 8013576:	1c59      	adds	r1, r3, #1
 8013578:	d009      	beq.n	801358e <_strtol_l.isra.0+0x8a>
 801357a:	4663      	mov	r3, ip
 801357c:	4282      	cmp	r2, r0
 801357e:	d306      	bcc.n	801358e <_strtol_l.isra.0+0x8a>
 8013580:	d102      	bne.n	8013588 <_strtol_l.isra.0+0x84>
 8013582:	9904      	ldr	r1, [sp, #16]
 8013584:	42a1      	cmp	r1, r4
 8013586:	db02      	blt.n	801358e <_strtol_l.isra.0+0x8a>
 8013588:	2301      	movs	r3, #1
 801358a:	4378      	muls	r0, r7
 801358c:	1820      	adds	r0, r4, r0
 801358e:	782c      	ldrb	r4, [r5, #0]
 8013590:	3501      	adds	r5, #1
 8013592:	e7e9      	b.n	8013568 <_strtol_l.isra.0+0x64>
 8013594:	002e      	movs	r6, r5
 8013596:	e7bc      	b.n	8013512 <_strtol_l.isra.0+0xe>
 8013598:	2c2b      	cmp	r4, #43	; 0x2b
 801359a:	d001      	beq.n	80135a0 <_strtol_l.isra.0+0x9c>
 801359c:	001e      	movs	r6, r3
 801359e:	e7c7      	b.n	8013530 <_strtol_l.isra.0+0x2c>
 80135a0:	1cb5      	adds	r5, r6, #2
 80135a2:	7874      	ldrb	r4, [r6, #1]
 80135a4:	e7fa      	b.n	801359c <_strtol_l.isra.0+0x98>
 80135a6:	0021      	movs	r1, r4
 80135a8:	3941      	subs	r1, #65	; 0x41
 80135aa:	2919      	cmp	r1, #25
 80135ac:	d801      	bhi.n	80135b2 <_strtol_l.isra.0+0xae>
 80135ae:	3c37      	subs	r4, #55	; 0x37
 80135b0:	e7df      	b.n	8013572 <_strtol_l.isra.0+0x6e>
 80135b2:	0021      	movs	r1, r4
 80135b4:	3961      	subs	r1, #97	; 0x61
 80135b6:	2919      	cmp	r1, #25
 80135b8:	d801      	bhi.n	80135be <_strtol_l.isra.0+0xba>
 80135ba:	3c57      	subs	r4, #87	; 0x57
 80135bc:	e7d9      	b.n	8013572 <_strtol_l.isra.0+0x6e>
 80135be:	1c5a      	adds	r2, r3, #1
 80135c0:	d108      	bne.n	80135d4 <_strtol_l.isra.0+0xd0>
 80135c2:	9a05      	ldr	r2, [sp, #20]
 80135c4:	3323      	adds	r3, #35	; 0x23
 80135c6:	6013      	str	r3, [r2, #0]
 80135c8:	9b02      	ldr	r3, [sp, #8]
 80135ca:	9803      	ldr	r0, [sp, #12]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d109      	bne.n	80135e4 <_strtol_l.isra.0+0xe0>
 80135d0:	b007      	add	sp, #28
 80135d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d4:	2e00      	cmp	r6, #0
 80135d6:	d000      	beq.n	80135da <_strtol_l.isra.0+0xd6>
 80135d8:	4240      	negs	r0, r0
 80135da:	9a02      	ldr	r2, [sp, #8]
 80135dc:	2a00      	cmp	r2, #0
 80135de:	d0f7      	beq.n	80135d0 <_strtol_l.isra.0+0xcc>
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d001      	beq.n	80135e8 <_strtol_l.isra.0+0xe4>
 80135e4:	1e6b      	subs	r3, r5, #1
 80135e6:	9301      	str	r3, [sp, #4]
 80135e8:	9b02      	ldr	r3, [sp, #8]
 80135ea:	9a01      	ldr	r2, [sp, #4]
 80135ec:	601a      	str	r2, [r3, #0]
 80135ee:	e7ef      	b.n	80135d0 <_strtol_l.isra.0+0xcc>
 80135f0:	2430      	movs	r4, #48	; 0x30
 80135f2:	2f00      	cmp	r7, #0
 80135f4:	d1aa      	bne.n	801354c <_strtol_l.isra.0+0x48>
 80135f6:	2708      	movs	r7, #8
 80135f8:	e7a8      	b.n	801354c <_strtol_l.isra.0+0x48>
 80135fa:	2c30      	cmp	r4, #48	; 0x30
 80135fc:	d09e      	beq.n	801353c <_strtol_l.isra.0+0x38>
 80135fe:	270a      	movs	r7, #10
 8013600:	e7a4      	b.n	801354c <_strtol_l.isra.0+0x48>
 8013602:	46c0      	nop			; (mov r8, r8)
 8013604:	7fffffff 	.word	0x7fffffff

08013608 <strtol>:
 8013608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801360a:	0013      	movs	r3, r2
 801360c:	4a06      	ldr	r2, [pc, #24]	; (8013628 <strtol+0x20>)
 801360e:	0005      	movs	r5, r0
 8013610:	6810      	ldr	r0, [r2, #0]
 8013612:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013614:	2c00      	cmp	r4, #0
 8013616:	d100      	bne.n	801361a <strtol+0x12>
 8013618:	4c04      	ldr	r4, [pc, #16]	; (801362c <strtol+0x24>)
 801361a:	000a      	movs	r2, r1
 801361c:	9400      	str	r4, [sp, #0]
 801361e:	0029      	movs	r1, r5
 8013620:	f7ff ff70 	bl	8013504 <_strtol_l.isra.0>
 8013624:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013626:	46c0      	nop			; (mov r8, r8)
 8013628:	200000cc 	.word	0x200000cc
 801362c:	200004f8 	.word	0x200004f8

08013630 <_svfprintf_r>:
 8013630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013632:	b0d9      	sub	sp, #356	; 0x164
 8013634:	910b      	str	r1, [sp, #44]	; 0x2c
 8013636:	9209      	str	r2, [sp, #36]	; 0x24
 8013638:	001c      	movs	r4, r3
 801363a:	900a      	str	r0, [sp, #40]	; 0x28
 801363c:	f002 fd26 	bl	801608c <_localeconv_r>
 8013640:	6803      	ldr	r3, [r0, #0]
 8013642:	0018      	movs	r0, r3
 8013644:	931c      	str	r3, [sp, #112]	; 0x70
 8013646:	f7ec fd67 	bl	8000118 <strlen>
 801364a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801364c:	9014      	str	r0, [sp, #80]	; 0x50
 801364e:	899b      	ldrh	r3, [r3, #12]
 8013650:	061b      	lsls	r3, r3, #24
 8013652:	d518      	bpl.n	8013686 <_svfprintf_r+0x56>
 8013654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013656:	691b      	ldr	r3, [r3, #16]
 8013658:	9308      	str	r3, [sp, #32]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d113      	bne.n	8013686 <_svfprintf_r+0x56>
 801365e:	2140      	movs	r1, #64	; 0x40
 8013660:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013662:	f7fe fc1f 	bl	8011ea4 <_malloc_r>
 8013666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013668:	6018      	str	r0, [r3, #0]
 801366a:	6118      	str	r0, [r3, #16]
 801366c:	2800      	cmp	r0, #0
 801366e:	d107      	bne.n	8013680 <_svfprintf_r+0x50>
 8013670:	230c      	movs	r3, #12
 8013672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013674:	6013      	str	r3, [r2, #0]
 8013676:	3b0d      	subs	r3, #13
 8013678:	9315      	str	r3, [sp, #84]	; 0x54
 801367a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801367c:	b059      	add	sp, #356	; 0x164
 801367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013680:	2340      	movs	r3, #64	; 0x40
 8013682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013684:	6153      	str	r3, [r2, #20]
 8013686:	2600      	movs	r6, #0
 8013688:	af2f      	add	r7, sp, #188	; 0xbc
 801368a:	972c      	str	r7, [sp, #176]	; 0xb0
 801368c:	962e      	str	r6, [sp, #184]	; 0xb8
 801368e:	962d      	str	r6, [sp, #180]	; 0xb4
 8013690:	960d      	str	r6, [sp, #52]	; 0x34
 8013692:	961a      	str	r6, [sp, #104]	; 0x68
 8013694:	9619      	str	r6, [sp, #100]	; 0x64
 8013696:	961e      	str	r6, [sp, #120]	; 0x78
 8013698:	961d      	str	r6, [sp, #116]	; 0x74
 801369a:	9613      	str	r6, [sp, #76]	; 0x4c
 801369c:	961b      	str	r6, [sp, #108]	; 0x6c
 801369e:	961f      	str	r6, [sp, #124]	; 0x7c
 80136a0:	9615      	str	r6, [sp, #84]	; 0x54
 80136a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80136a4:	782b      	ldrb	r3, [r5, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <_svfprintf_r+0x80>
 80136aa:	2b25      	cmp	r3, #37	; 0x25
 80136ac:	d000      	beq.n	80136b0 <_svfprintf_r+0x80>
 80136ae:	e095      	b.n	80137dc <_svfprintf_r+0x1ac>
 80136b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136b2:	1aee      	subs	r6, r5, r3
 80136b4:	d017      	beq.n	80136e6 <_svfprintf_r+0xb6>
 80136b6:	603b      	str	r3, [r7, #0]
 80136b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80136ba:	607e      	str	r6, [r7, #4]
 80136bc:	199b      	adds	r3, r3, r6
 80136be:	932e      	str	r3, [sp, #184]	; 0xb8
 80136c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80136c2:	3708      	adds	r7, #8
 80136c4:	9308      	str	r3, [sp, #32]
 80136c6:	3301      	adds	r3, #1
 80136c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80136ca:	2b07      	cmp	r3, #7
 80136cc:	dd08      	ble.n	80136e0 <_svfprintf_r+0xb0>
 80136ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80136d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80136d4:	f003 f900 	bl	80168d8 <__ssprint_r>
 80136d8:	2800      	cmp	r0, #0
 80136da:	d000      	beq.n	80136de <_svfprintf_r+0xae>
 80136dc:	e2d9      	b.n	8013c92 <_svfprintf_r+0x662>
 80136de:	af2f      	add	r7, sp, #188	; 0xbc
 80136e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136e2:	199b      	adds	r3, r3, r6
 80136e4:	9315      	str	r3, [sp, #84]	; 0x54
 80136e6:	782b      	ldrb	r3, [r5, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <_svfprintf_r+0xc0>
 80136ec:	f001 f9e5 	bl	8014aba <_svfprintf_r+0x148a>
 80136f0:	1c6b      	adds	r3, r5, #1
 80136f2:	221b      	movs	r2, #27
 80136f4:	9311      	str	r3, [sp, #68]	; 0x44
 80136f6:	2300      	movs	r3, #0
 80136f8:	a91e      	add	r1, sp, #120	; 0x78
 80136fa:	1852      	adds	r2, r2, r1
 80136fc:	7013      	strb	r3, [r2, #0]
 80136fe:	2201      	movs	r2, #1
 8013700:	001e      	movs	r6, r3
 8013702:	2520      	movs	r5, #32
 8013704:	4252      	negs	r2, r2
 8013706:	9208      	str	r2, [sp, #32]
 8013708:	9316      	str	r3, [sp, #88]	; 0x58
 801370a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	930e      	str	r3, [sp, #56]	; 0x38
 8013710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013712:	3301      	adds	r3, #1
 8013714:	9311      	str	r3, [sp, #68]	; 0x44
 8013716:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013718:	3820      	subs	r0, #32
 801371a:	285a      	cmp	r0, #90	; 0x5a
 801371c:	d901      	bls.n	8013722 <_svfprintf_r+0xf2>
 801371e:	f000 fe3d 	bl	801439c <_svfprintf_r+0xd6c>
 8013722:	f7ec fd0b 	bl	800013c <__gnu_thumb1_case_shi>
 8013726:	009e      	.short	0x009e
 8013728:	063b063b 	.word	0x063b063b
 801372c:	063b00a7 	.word	0x063b00a7
 8013730:	063b063b 	.word	0x063b063b
 8013734:	063b0080 	.word	0x063b0080
 8013738:	00a9063b 	.word	0x00a9063b
 801373c:	063b00b3 	.word	0x063b00b3
 8013740:	00b900b1 	.word	0x00b900b1
 8013744:	00dd063b 	.word	0x00dd063b
 8013748:	00df00df 	.word	0x00df00df
 801374c:	00df00df 	.word	0x00df00df
 8013750:	00df00df 	.word	0x00df00df
 8013754:	00df00df 	.word	0x00df00df
 8013758:	063b00df 	.word	0x063b00df
 801375c:	063b063b 	.word	0x063b063b
 8013760:	063b063b 	.word	0x063b063b
 8013764:	063b063b 	.word	0x063b063b
 8013768:	063b0240 	.word	0x063b0240
 801376c:	01fd010a 	.word	0x01fd010a
 8013770:	02400240 	.word	0x02400240
 8013774:	063b0240 	.word	0x063b0240
 8013778:	063b063b 	.word	0x063b063b
 801377c:	00f1063b 	.word	0x00f1063b
 8013780:	063b063b 	.word	0x063b063b
 8013784:	063b04e2 	.word	0x063b04e2
 8013788:	063b063b 	.word	0x063b063b
 801378c:	063b0537 	.word	0x063b0537
 8013790:	063b0557 	.word	0x063b0557
 8013794:	005d063b 	.word	0x005d063b
 8013798:	063b063b 	.word	0x063b063b
 801379c:	063b063b 	.word	0x063b063b
 80137a0:	063b063b 	.word	0x063b063b
 80137a4:	063b063b 	.word	0x063b063b
 80137a8:	063b0240 	.word	0x063b0240
 80137ac:	01ff010a 	.word	0x01ff010a
 80137b0:	02400240 	.word	0x02400240
 80137b4:	00f30240 	.word	0x00f30240
 80137b8:	010601ff 	.word	0x010601ff
 80137bc:	00ff063b 	.word	0x00ff063b
 80137c0:	04c5063b 	.word	0x04c5063b
 80137c4:	052704e4 	.word	0x052704e4
 80137c8:	063b0106 	.word	0x063b0106
 80137cc:	fff20537 	.word	0xfff20537
 80137d0:	063b0559 	.word	0x063b0559
 80137d4:	0582063b 	.word	0x0582063b
 80137d8:	fff2063b 	.word	0xfff2063b
 80137dc:	3501      	adds	r5, #1
 80137de:	e761      	b.n	80136a4 <_svfprintf_r+0x74>
 80137e0:	4bcb      	ldr	r3, [pc, #812]	; (8013b10 <_svfprintf_r+0x4e0>)
 80137e2:	2220      	movs	r2, #32
 80137e4:	931e      	str	r3, [sp, #120]	; 0x78
 80137e6:	4032      	ands	r2, r6
 80137e8:	d101      	bne.n	80137ee <_svfprintf_r+0x1be>
 80137ea:	f000 fd21 	bl	8014230 <_svfprintf_r+0xc00>
 80137ee:	2307      	movs	r3, #7
 80137f0:	3407      	adds	r4, #7
 80137f2:	439c      	bics	r4, r3
 80137f4:	0023      	movs	r3, r4
 80137f6:	3308      	adds	r3, #8
 80137f8:	9312      	str	r3, [sp, #72]	; 0x48
 80137fa:	6823      	ldr	r3, [r4, #0]
 80137fc:	6864      	ldr	r4, [r4, #4]
 80137fe:	9306      	str	r3, [sp, #24]
 8013800:	9407      	str	r4, [sp, #28]
 8013802:	07f3      	lsls	r3, r6, #31
 8013804:	d50a      	bpl.n	801381c <_svfprintf_r+0x1ec>
 8013806:	9b06      	ldr	r3, [sp, #24]
 8013808:	9a07      	ldr	r2, [sp, #28]
 801380a:	4313      	orrs	r3, r2
 801380c:	d006      	beq.n	801381c <_svfprintf_r+0x1ec>
 801380e:	2230      	movs	r2, #48	; 0x30
 8013810:	ab25      	add	r3, sp, #148	; 0x94
 8013812:	701a      	strb	r2, [r3, #0]
 8013814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013816:	705a      	strb	r2, [r3, #1]
 8013818:	2302      	movs	r3, #2
 801381a:	431e      	orrs	r6, r3
 801381c:	4bbd      	ldr	r3, [pc, #756]	; (8013b14 <_svfprintf_r+0x4e4>)
 801381e:	401e      	ands	r6, r3
 8013820:	2302      	movs	r3, #2
 8013822:	f000 fc74 	bl	801410e <_svfprintf_r+0xade>
 8013826:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013828:	f002 fc30 	bl	801608c <_localeconv_r>
 801382c:	6843      	ldr	r3, [r0, #4]
 801382e:	0018      	movs	r0, r3
 8013830:	931f      	str	r3, [sp, #124]	; 0x7c
 8013832:	f7ec fc71 	bl	8000118 <strlen>
 8013836:	901b      	str	r0, [sp, #108]	; 0x6c
 8013838:	980a      	ldr	r0, [sp, #40]	; 0x28
 801383a:	f002 fc27 	bl	801608c <_localeconv_r>
 801383e:	6883      	ldr	r3, [r0, #8]
 8013840:	9313      	str	r3, [sp, #76]	; 0x4c
 8013842:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013844:	2b00      	cmp	r3, #0
 8013846:	d100      	bne.n	801384a <_svfprintf_r+0x21a>
 8013848:	e75f      	b.n	801370a <_svfprintf_r+0xda>
 801384a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801384c:	2b00      	cmp	r3, #0
 801384e:	d100      	bne.n	8013852 <_svfprintf_r+0x222>
 8013850:	e75b      	b.n	801370a <_svfprintf_r+0xda>
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d100      	bne.n	801385a <_svfprintf_r+0x22a>
 8013858:	e757      	b.n	801370a <_svfprintf_r+0xda>
 801385a:	2380      	movs	r3, #128	; 0x80
 801385c:	00db      	lsls	r3, r3, #3
 801385e:	431e      	orrs	r6, r3
 8013860:	e753      	b.n	801370a <_svfprintf_r+0xda>
 8013862:	231b      	movs	r3, #27
 8013864:	aa1e      	add	r2, sp, #120	; 0x78
 8013866:	189b      	adds	r3, r3, r2
 8013868:	781a      	ldrb	r2, [r3, #0]
 801386a:	2a00      	cmp	r2, #0
 801386c:	d000      	beq.n	8013870 <_svfprintf_r+0x240>
 801386e:	e74c      	b.n	801370a <_svfprintf_r+0xda>
 8013870:	701d      	strb	r5, [r3, #0]
 8013872:	e74a      	b.n	801370a <_svfprintf_r+0xda>
 8013874:	2301      	movs	r3, #1
 8013876:	e7f2      	b.n	801385e <_svfprintf_r+0x22e>
 8013878:	6823      	ldr	r3, [r4, #0]
 801387a:	3404      	adds	r4, #4
 801387c:	9316      	str	r3, [sp, #88]	; 0x58
 801387e:	2b00      	cmp	r3, #0
 8013880:	db00      	blt.n	8013884 <_svfprintf_r+0x254>
 8013882:	e742      	b.n	801370a <_svfprintf_r+0xda>
 8013884:	425b      	negs	r3, r3
 8013886:	9316      	str	r3, [sp, #88]	; 0x58
 8013888:	2304      	movs	r3, #4
 801388a:	e7e8      	b.n	801385e <_svfprintf_r+0x22e>
 801388c:	231b      	movs	r3, #27
 801388e:	aa1e      	add	r2, sp, #120	; 0x78
 8013890:	189b      	adds	r3, r3, r2
 8013892:	222b      	movs	r2, #43	; 0x2b
 8013894:	701a      	strb	r2, [r3, #0]
 8013896:	e738      	b.n	801370a <_svfprintf_r+0xda>
 8013898:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801389a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801389c:	7812      	ldrb	r2, [r2, #0]
 801389e:	3301      	adds	r3, #1
 80138a0:	920e      	str	r2, [sp, #56]	; 0x38
 80138a2:	2a2a      	cmp	r2, #42	; 0x2a
 80138a4:	d008      	beq.n	80138b8 <_svfprintf_r+0x288>
 80138a6:	2200      	movs	r2, #0
 80138a8:	9208      	str	r2, [sp, #32]
 80138aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80138ac:	001a      	movs	r2, r3
 80138ae:	3930      	subs	r1, #48	; 0x30
 80138b0:	2909      	cmp	r1, #9
 80138b2:	d90c      	bls.n	80138ce <_svfprintf_r+0x29e>
 80138b4:	9211      	str	r2, [sp, #68]	; 0x44
 80138b6:	e72e      	b.n	8013716 <_svfprintf_r+0xe6>
 80138b8:	6821      	ldr	r1, [r4, #0]
 80138ba:	1d22      	adds	r2, r4, #4
 80138bc:	9108      	str	r1, [sp, #32]
 80138be:	2900      	cmp	r1, #0
 80138c0:	da02      	bge.n	80138c8 <_svfprintf_r+0x298>
 80138c2:	2101      	movs	r1, #1
 80138c4:	4249      	negs	r1, r1
 80138c6:	9108      	str	r1, [sp, #32]
 80138c8:	0014      	movs	r4, r2
 80138ca:	9311      	str	r3, [sp, #68]	; 0x44
 80138cc:	e71d      	b.n	801370a <_svfprintf_r+0xda>
 80138ce:	200a      	movs	r0, #10
 80138d0:	9a08      	ldr	r2, [sp, #32]
 80138d2:	4342      	muls	r2, r0
 80138d4:	1852      	adds	r2, r2, r1
 80138d6:	9208      	str	r2, [sp, #32]
 80138d8:	781a      	ldrb	r2, [r3, #0]
 80138da:	3301      	adds	r3, #1
 80138dc:	920e      	str	r2, [sp, #56]	; 0x38
 80138de:	e7e4      	b.n	80138aa <_svfprintf_r+0x27a>
 80138e0:	2380      	movs	r3, #128	; 0x80
 80138e2:	e7bc      	b.n	801385e <_svfprintf_r+0x22e>
 80138e4:	2300      	movs	r3, #0
 80138e6:	9316      	str	r3, [sp, #88]	; 0x58
 80138e8:	220a      	movs	r2, #10
 80138ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80138ec:	4353      	muls	r3, r2
 80138ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138f0:	3a30      	subs	r2, #48	; 0x30
 80138f2:	18d3      	adds	r3, r2, r3
 80138f4:	9316      	str	r3, [sp, #88]	; 0x58
 80138f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138f8:	1c5a      	adds	r2, r3, #1
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	9211      	str	r2, [sp, #68]	; 0x44
 80138fe:	930e      	str	r3, [sp, #56]	; 0x38
 8013900:	3b30      	subs	r3, #48	; 0x30
 8013902:	2b09      	cmp	r3, #9
 8013904:	d9f0      	bls.n	80138e8 <_svfprintf_r+0x2b8>
 8013906:	e7d5      	b.n	80138b4 <_svfprintf_r+0x284>
 8013908:	2308      	movs	r3, #8
 801390a:	e7a8      	b.n	801385e <_svfprintf_r+0x22e>
 801390c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	2b68      	cmp	r3, #104	; 0x68
 8013912:	d105      	bne.n	8013920 <_svfprintf_r+0x2f0>
 8013914:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013916:	3301      	adds	r3, #1
 8013918:	9311      	str	r3, [sp, #68]	; 0x44
 801391a:	2380      	movs	r3, #128	; 0x80
 801391c:	009b      	lsls	r3, r3, #2
 801391e:	e79e      	b.n	801385e <_svfprintf_r+0x22e>
 8013920:	2340      	movs	r3, #64	; 0x40
 8013922:	e79c      	b.n	801385e <_svfprintf_r+0x22e>
 8013924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	2b6c      	cmp	r3, #108	; 0x6c
 801392a:	d104      	bne.n	8013936 <_svfprintf_r+0x306>
 801392c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801392e:	3301      	adds	r3, #1
 8013930:	9311      	str	r3, [sp, #68]	; 0x44
 8013932:	432e      	orrs	r6, r5
 8013934:	e6e9      	b.n	801370a <_svfprintf_r+0xda>
 8013936:	2310      	movs	r3, #16
 8013938:	e791      	b.n	801385e <_svfprintf_r+0x22e>
 801393a:	1d23      	adds	r3, r4, #4
 801393c:	6822      	ldr	r2, [r4, #0]
 801393e:	9312      	str	r3, [sp, #72]	; 0x48
 8013940:	ab3f      	add	r3, sp, #252	; 0xfc
 8013942:	701a      	strb	r2, [r3, #0]
 8013944:	221b      	movs	r2, #27
 8013946:	2000      	movs	r0, #0
 8013948:	a91e      	add	r1, sp, #120	; 0x78
 801394a:	1852      	adds	r2, r2, r1
 801394c:	7010      	strb	r0, [r2, #0]
 801394e:	2201      	movs	r2, #1
 8013950:	0005      	movs	r5, r0
 8013952:	900c      	str	r0, [sp, #48]	; 0x30
 8013954:	9208      	str	r2, [sp, #32]
 8013956:	9017      	str	r0, [sp, #92]	; 0x5c
 8013958:	9010      	str	r0, [sp, #64]	; 0x40
 801395a:	900f      	str	r0, [sp, #60]	; 0x3c
 801395c:	9309      	str	r3, [sp, #36]	; 0x24
 801395e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013960:	9a08      	ldr	r2, [sp, #32]
 8013962:	9318      	str	r3, [sp, #96]	; 0x60
 8013964:	4293      	cmp	r3, r2
 8013966:	da00      	bge.n	801396a <_svfprintf_r+0x33a>
 8013968:	9218      	str	r2, [sp, #96]	; 0x60
 801396a:	231b      	movs	r3, #27
 801396c:	aa1e      	add	r2, sp, #120	; 0x78
 801396e:	189b      	adds	r3, r3, r2
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	1e5a      	subs	r2, r3, #1
 8013974:	4193      	sbcs	r3, r2
 8013976:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013978:	18d3      	adds	r3, r2, r3
 801397a:	9318      	str	r3, [sp, #96]	; 0x60
 801397c:	2302      	movs	r3, #2
 801397e:	4033      	ands	r3, r6
 8013980:	9320      	str	r3, [sp, #128]	; 0x80
 8013982:	d002      	beq.n	801398a <_svfprintf_r+0x35a>
 8013984:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013986:	3302      	adds	r3, #2
 8013988:	9318      	str	r3, [sp, #96]	; 0x60
 801398a:	2384      	movs	r3, #132	; 0x84
 801398c:	4033      	ands	r3, r6
 801398e:	9321      	str	r3, [sp, #132]	; 0x84
 8013990:	d121      	bne.n	80139d6 <_svfprintf_r+0x3a6>
 8013992:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013994:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013996:	1a9c      	subs	r4, r3, r2
 8013998:	2c00      	cmp	r4, #0
 801399a:	dd1c      	ble.n	80139d6 <_svfprintf_r+0x3a6>
 801399c:	0039      	movs	r1, r7
 801399e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80139a0:	485d      	ldr	r0, [pc, #372]	; (8013b18 <_svfprintf_r+0x4e8>)
 80139a2:	9322      	str	r3, [sp, #136]	; 0x88
 80139a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80139a6:	3301      	adds	r3, #1
 80139a8:	3108      	adds	r1, #8
 80139aa:	6038      	str	r0, [r7, #0]
 80139ac:	2c10      	cmp	r4, #16
 80139ae:	dd01      	ble.n	80139b4 <_svfprintf_r+0x384>
 80139b0:	f000 fd08 	bl	80143c4 <_svfprintf_r+0xd94>
 80139b4:	607c      	str	r4, [r7, #4]
 80139b6:	18a4      	adds	r4, r4, r2
 80139b8:	942e      	str	r4, [sp, #184]	; 0xb8
 80139ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80139bc:	000f      	movs	r7, r1
 80139be:	2b07      	cmp	r3, #7
 80139c0:	dd09      	ble.n	80139d6 <_svfprintf_r+0x3a6>
 80139c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80139c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139c8:	f002 ff86 	bl	80168d8 <__ssprint_r>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d001      	beq.n	80139d4 <_svfprintf_r+0x3a4>
 80139d0:	f001 f852 	bl	8014a78 <_svfprintf_r+0x1448>
 80139d4:	af2f      	add	r7, sp, #188	; 0xbc
 80139d6:	231b      	movs	r3, #27
 80139d8:	aa1e      	add	r2, sp, #120	; 0x78
 80139da:	189b      	adds	r3, r3, r2
 80139dc:	781a      	ldrb	r2, [r3, #0]
 80139de:	2a00      	cmp	r2, #0
 80139e0:	d017      	beq.n	8013a12 <_svfprintf_r+0x3e2>
 80139e2:	603b      	str	r3, [r7, #0]
 80139e4:	2301      	movs	r3, #1
 80139e6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80139e8:	607b      	str	r3, [r7, #4]
 80139ea:	0013      	movs	r3, r2
 80139ec:	3301      	adds	r3, #1
 80139ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80139f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80139f2:	3708      	adds	r7, #8
 80139f4:	9322      	str	r3, [sp, #136]	; 0x88
 80139f6:	3301      	adds	r3, #1
 80139f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80139fa:	2b07      	cmp	r3, #7
 80139fc:	dd09      	ble.n	8013a12 <_svfprintf_r+0x3e2>
 80139fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8013a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a04:	f002 ff68 	bl	80168d8 <__ssprint_r>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d001      	beq.n	8013a10 <_svfprintf_r+0x3e0>
 8013a0c:	f001 f834 	bl	8014a78 <_svfprintf_r+0x1448>
 8013a10:	af2f      	add	r7, sp, #188	; 0xbc
 8013a12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d019      	beq.n	8013a4c <_svfprintf_r+0x41c>
 8013a18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013a1a:	9320      	str	r3, [sp, #128]	; 0x80
 8013a1c:	ab25      	add	r3, sp, #148	; 0x94
 8013a1e:	603b      	str	r3, [r7, #0]
 8013a20:	2302      	movs	r3, #2
 8013a22:	607b      	str	r3, [r7, #4]
 8013a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013a26:	3708      	adds	r7, #8
 8013a28:	3302      	adds	r3, #2
 8013a2a:	932e      	str	r3, [sp, #184]	; 0xb8
 8013a2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013a2e:	9320      	str	r3, [sp, #128]	; 0x80
 8013a30:	3301      	adds	r3, #1
 8013a32:	932d      	str	r3, [sp, #180]	; 0xb4
 8013a34:	2b07      	cmp	r3, #7
 8013a36:	dd09      	ble.n	8013a4c <_svfprintf_r+0x41c>
 8013a38:	aa2c      	add	r2, sp, #176	; 0xb0
 8013a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a3e:	f002 ff4b 	bl	80168d8 <__ssprint_r>
 8013a42:	2800      	cmp	r0, #0
 8013a44:	d001      	beq.n	8013a4a <_svfprintf_r+0x41a>
 8013a46:	f001 f817 	bl	8014a78 <_svfprintf_r+0x1448>
 8013a4a:	af2f      	add	r7, sp, #188	; 0xbc
 8013a4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a4e:	2b80      	cmp	r3, #128	; 0x80
 8013a50:	d121      	bne.n	8013a96 <_svfprintf_r+0x466>
 8013a52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a54:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a56:	1a9c      	subs	r4, r3, r2
 8013a58:	2c00      	cmp	r4, #0
 8013a5a:	dd1c      	ble.n	8013a96 <_svfprintf_r+0x466>
 8013a5c:	0039      	movs	r1, r7
 8013a5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013a60:	482e      	ldr	r0, [pc, #184]	; (8013b1c <_svfprintf_r+0x4ec>)
 8013a62:	9320      	str	r3, [sp, #128]	; 0x80
 8013a64:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013a66:	3301      	adds	r3, #1
 8013a68:	3108      	adds	r1, #8
 8013a6a:	6038      	str	r0, [r7, #0]
 8013a6c:	2c10      	cmp	r4, #16
 8013a6e:	dd01      	ble.n	8013a74 <_svfprintf_r+0x444>
 8013a70:	f000 fcbc 	bl	80143ec <_svfprintf_r+0xdbc>
 8013a74:	607c      	str	r4, [r7, #4]
 8013a76:	18a4      	adds	r4, r4, r2
 8013a78:	942e      	str	r4, [sp, #184]	; 0xb8
 8013a7a:	932d      	str	r3, [sp, #180]	; 0xb4
 8013a7c:	000f      	movs	r7, r1
 8013a7e:	2b07      	cmp	r3, #7
 8013a80:	dd09      	ble.n	8013a96 <_svfprintf_r+0x466>
 8013a82:	aa2c      	add	r2, sp, #176	; 0xb0
 8013a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a88:	f002 ff26 	bl	80168d8 <__ssprint_r>
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d001      	beq.n	8013a94 <_svfprintf_r+0x464>
 8013a90:	f000 fff2 	bl	8014a78 <_svfprintf_r+0x1448>
 8013a94:	af2f      	add	r7, sp, #188	; 0xbc
 8013a96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a98:	9a08      	ldr	r2, [sp, #32]
 8013a9a:	1a9c      	subs	r4, r3, r2
 8013a9c:	2c00      	cmp	r4, #0
 8013a9e:	dd1c      	ble.n	8013ada <_svfprintf_r+0x4aa>
 8013aa0:	0039      	movs	r1, r7
 8013aa2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013aa4:	481d      	ldr	r0, [pc, #116]	; (8013b1c <_svfprintf_r+0x4ec>)
 8013aa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8013aa8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013aaa:	3301      	adds	r3, #1
 8013aac:	3108      	adds	r1, #8
 8013aae:	6038      	str	r0, [r7, #0]
 8013ab0:	2c10      	cmp	r4, #16
 8013ab2:	dd01      	ble.n	8013ab8 <_svfprintf_r+0x488>
 8013ab4:	f000 fcb4 	bl	8014420 <_svfprintf_r+0xdf0>
 8013ab8:	18a2      	adds	r2, r4, r2
 8013aba:	607c      	str	r4, [r7, #4]
 8013abc:	922e      	str	r2, [sp, #184]	; 0xb8
 8013abe:	932d      	str	r3, [sp, #180]	; 0xb4
 8013ac0:	000f      	movs	r7, r1
 8013ac2:	2b07      	cmp	r3, #7
 8013ac4:	dd09      	ble.n	8013ada <_svfprintf_r+0x4aa>
 8013ac6:	aa2c      	add	r2, sp, #176	; 0xb0
 8013ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013aca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013acc:	f002 ff04 	bl	80168d8 <__ssprint_r>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	d001      	beq.n	8013ad8 <_svfprintf_r+0x4a8>
 8013ad4:	f000 ffd0 	bl	8014a78 <_svfprintf_r+0x1448>
 8013ad8:	af2f      	add	r7, sp, #188	; 0xbc
 8013ada:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013adc:	9317      	str	r3, [sp, #92]	; 0x5c
 8013ade:	05f3      	lsls	r3, r6, #23
 8013ae0:	d501      	bpl.n	8013ae6 <_svfprintf_r+0x4b6>
 8013ae2:	f000 fcb1 	bl	8014448 <_svfprintf_r+0xe18>
 8013ae6:	9a08      	ldr	r2, [sp, #32]
 8013ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aea:	4694      	mov	ip, r2
 8013aec:	603b      	str	r3, [r7, #0]
 8013aee:	9b08      	ldr	r3, [sp, #32]
 8013af0:	607b      	str	r3, [r7, #4]
 8013af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013af4:	4463      	add	r3, ip
 8013af6:	932e      	str	r3, [sp, #184]	; 0xb8
 8013af8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013afa:	9308      	str	r3, [sp, #32]
 8013afc:	3301      	adds	r3, #1
 8013afe:	932d      	str	r3, [sp, #180]	; 0xb4
 8013b00:	2b07      	cmp	r3, #7
 8013b02:	dd01      	ble.n	8013b08 <_svfprintf_r+0x4d8>
 8013b04:	f000 fd94 	bl	8014630 <_svfprintf_r+0x1000>
 8013b08:	3708      	adds	r7, #8
 8013b0a:	f000 fce4 	bl	80144d6 <_svfprintf_r+0xea6>
 8013b0e:	46c0      	nop			; (mov r8, r8)
 8013b10:	08019a81 	.word	0x08019a81
 8013b14:	fffffbff 	.word	0xfffffbff
 8013b18:	08019a94 	.word	0x08019a94
 8013b1c:	08019aa4 	.word	0x08019aa4
 8013b20:	2310      	movs	r3, #16
 8013b22:	431e      	orrs	r6, r3
 8013b24:	06b3      	lsls	r3, r6, #26
 8013b26:	d52c      	bpl.n	8013b82 <_svfprintf_r+0x552>
 8013b28:	2307      	movs	r3, #7
 8013b2a:	3407      	adds	r4, #7
 8013b2c:	439c      	bics	r4, r3
 8013b2e:	0023      	movs	r3, r4
 8013b30:	3308      	adds	r3, #8
 8013b32:	9312      	str	r3, [sp, #72]	; 0x48
 8013b34:	6823      	ldr	r3, [r4, #0]
 8013b36:	6864      	ldr	r4, [r4, #4]
 8013b38:	9306      	str	r3, [sp, #24]
 8013b3a:	9407      	str	r4, [sp, #28]
 8013b3c:	9b07      	ldr	r3, [sp, #28]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	da0b      	bge.n	8013b5a <_svfprintf_r+0x52a>
 8013b42:	9906      	ldr	r1, [sp, #24]
 8013b44:	9a07      	ldr	r2, [sp, #28]
 8013b46:	2400      	movs	r4, #0
 8013b48:	424b      	negs	r3, r1
 8013b4a:	4194      	sbcs	r4, r2
 8013b4c:	9306      	str	r3, [sp, #24]
 8013b4e:	9407      	str	r4, [sp, #28]
 8013b50:	231b      	movs	r3, #27
 8013b52:	aa1e      	add	r2, sp, #120	; 0x78
 8013b54:	189b      	adds	r3, r3, r2
 8013b56:	222d      	movs	r2, #45	; 0x2d
 8013b58:	701a      	strb	r2, [r3, #0]
 8013b5a:	9b08      	ldr	r3, [sp, #32]
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	d000      	beq.n	8013b62 <_svfprintf_r+0x532>
 8013b60:	e382      	b.n	8014268 <_svfprintf_r+0xc38>
 8013b62:	9b07      	ldr	r3, [sp, #28]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d000      	beq.n	8013b6a <_svfprintf_r+0x53a>
 8013b68:	e3b0      	b.n	80142cc <_svfprintf_r+0xc9c>
 8013b6a:	9b06      	ldr	r3, [sp, #24]
 8013b6c:	2b09      	cmp	r3, #9
 8013b6e:	d900      	bls.n	8013b72 <_svfprintf_r+0x542>
 8013b70:	e3ac      	b.n	80142cc <_svfprintf_r+0xc9c>
 8013b72:	23e7      	movs	r3, #231	; 0xe7
 8013b74:	aa1e      	add	r2, sp, #120	; 0x78
 8013b76:	189b      	adds	r3, r3, r2
 8013b78:	9a06      	ldr	r2, [sp, #24]
 8013b7a:	3230      	adds	r2, #48	; 0x30
 8013b7c:	701a      	strb	r2, [r3, #0]
 8013b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b80:	e395      	b.n	80142ae <_svfprintf_r+0xc7e>
 8013b82:	1d23      	adds	r3, r4, #4
 8013b84:	9312      	str	r3, [sp, #72]	; 0x48
 8013b86:	06f3      	lsls	r3, r6, #27
 8013b88:	d504      	bpl.n	8013b94 <_svfprintf_r+0x564>
 8013b8a:	6823      	ldr	r3, [r4, #0]
 8013b8c:	9306      	str	r3, [sp, #24]
 8013b8e:	17db      	asrs	r3, r3, #31
 8013b90:	9307      	str	r3, [sp, #28]
 8013b92:	e7d3      	b.n	8013b3c <_svfprintf_r+0x50c>
 8013b94:	6823      	ldr	r3, [r4, #0]
 8013b96:	0672      	lsls	r2, r6, #25
 8013b98:	d501      	bpl.n	8013b9e <_svfprintf_r+0x56e>
 8013b9a:	b21b      	sxth	r3, r3
 8013b9c:	e7f6      	b.n	8013b8c <_svfprintf_r+0x55c>
 8013b9e:	05b2      	lsls	r2, r6, #22
 8013ba0:	d5f4      	bpl.n	8013b8c <_svfprintf_r+0x55c>
 8013ba2:	b25b      	sxtb	r3, r3
 8013ba4:	e7f2      	b.n	8013b8c <_svfprintf_r+0x55c>
 8013ba6:	2307      	movs	r3, #7
 8013ba8:	3407      	adds	r4, #7
 8013baa:	439c      	bics	r4, r3
 8013bac:	0023      	movs	r3, r4
 8013bae:	2201      	movs	r2, #1
 8013bb0:	3308      	adds	r3, #8
 8013bb2:	9312      	str	r3, [sp, #72]	; 0x48
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	4252      	negs	r2, r2
 8013bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8013bba:	6863      	ldr	r3, [r4, #4]
 8013bbc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013bbe:	005c      	lsls	r4, r3, #1
 8013bc0:	0864      	lsrs	r4, r4, #1
 8013bc2:	9319      	str	r3, [sp, #100]	; 0x64
 8013bc4:	0028      	movs	r0, r5
 8013bc6:	4bcf      	ldr	r3, [pc, #828]	; (8013f04 <_svfprintf_r+0x8d4>)
 8013bc8:	0021      	movs	r1, r4
 8013bca:	f7ee feed 	bl	80029a8 <__aeabi_dcmpun>
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	d125      	bne.n	8013c1e <_svfprintf_r+0x5ee>
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	4bcb      	ldr	r3, [pc, #812]	; (8013f04 <_svfprintf_r+0x8d4>)
 8013bd6:	4252      	negs	r2, r2
 8013bd8:	0028      	movs	r0, r5
 8013bda:	0021      	movs	r1, r4
 8013bdc:	f7ec fc4e 	bl	800047c <__aeabi_dcmple>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d11c      	bne.n	8013c1e <_svfprintf_r+0x5ee>
 8013be4:	2200      	movs	r2, #0
 8013be6:	2300      	movs	r3, #0
 8013be8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013bea:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013bec:	f7ec fc3c 	bl	8000468 <__aeabi_dcmplt>
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d004      	beq.n	8013bfe <_svfprintf_r+0x5ce>
 8013bf4:	231b      	movs	r3, #27
 8013bf6:	aa1e      	add	r2, sp, #120	; 0x78
 8013bf8:	189b      	adds	r3, r3, r2
 8013bfa:	222d      	movs	r2, #45	; 0x2d
 8013bfc:	701a      	strb	r2, [r3, #0]
 8013bfe:	4bc2      	ldr	r3, [pc, #776]	; (8013f08 <_svfprintf_r+0x8d8>)
 8013c00:	9309      	str	r3, [sp, #36]	; 0x24
 8013c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c04:	2b47      	cmp	r3, #71	; 0x47
 8013c06:	dc01      	bgt.n	8013c0c <_svfprintf_r+0x5dc>
 8013c08:	4bc0      	ldr	r3, [pc, #768]	; (8013f0c <_svfprintf_r+0x8dc>)
 8013c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c0c:	2380      	movs	r3, #128	; 0x80
 8013c0e:	439e      	bics	r6, r3
 8013c10:	2300      	movs	r3, #0
 8013c12:	930c      	str	r3, [sp, #48]	; 0x30
 8013c14:	3303      	adds	r3, #3
 8013c16:	9308      	str	r3, [sp, #32]
 8013c18:	2300      	movs	r3, #0
 8013c1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8013c1c:	e34f      	b.n	80142be <_svfprintf_r+0xc8e>
 8013c1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c22:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013c24:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013c26:	f7ee febf 	bl	80029a8 <__aeabi_dcmpun>
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d00e      	beq.n	8013c4c <_svfprintf_r+0x61c>
 8013c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	da04      	bge.n	8013c3e <_svfprintf_r+0x60e>
 8013c34:	231b      	movs	r3, #27
 8013c36:	aa1e      	add	r2, sp, #120	; 0x78
 8013c38:	189b      	adds	r3, r3, r2
 8013c3a:	222d      	movs	r2, #45	; 0x2d
 8013c3c:	701a      	strb	r2, [r3, #0]
 8013c3e:	4bb4      	ldr	r3, [pc, #720]	; (8013f10 <_svfprintf_r+0x8e0>)
 8013c40:	9309      	str	r3, [sp, #36]	; 0x24
 8013c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c44:	2b47      	cmp	r3, #71	; 0x47
 8013c46:	dce1      	bgt.n	8013c0c <_svfprintf_r+0x5dc>
 8013c48:	4bb2      	ldr	r3, [pc, #712]	; (8013f14 <_svfprintf_r+0x8e4>)
 8013c4a:	e7de      	b.n	8013c0a <_svfprintf_r+0x5da>
 8013c4c:	2320      	movs	r3, #32
 8013c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c50:	439a      	bics	r2, r3
 8013c52:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c54:	2a41      	cmp	r2, #65	; 0x41
 8013c56:	d124      	bne.n	8013ca2 <_svfprintf_r+0x672>
 8013c58:	2230      	movs	r2, #48	; 0x30
 8013c5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013c5c:	ab25      	add	r3, sp, #148	; 0x94
 8013c5e:	701a      	strb	r2, [r3, #0]
 8013c60:	3228      	adds	r2, #40	; 0x28
 8013c62:	2961      	cmp	r1, #97	; 0x61
 8013c64:	d100      	bne.n	8013c68 <_svfprintf_r+0x638>
 8013c66:	3220      	adds	r2, #32
 8013c68:	705a      	strb	r2, [r3, #1]
 8013c6a:	2302      	movs	r3, #2
 8013c6c:	431e      	orrs	r6, r3
 8013c6e:	9b08      	ldr	r3, [sp, #32]
 8013c70:	2b63      	cmp	r3, #99	; 0x63
 8013c72:	dc00      	bgt.n	8013c76 <_svfprintf_r+0x646>
 8013c74:	e09e      	b.n	8013db4 <_svfprintf_r+0x784>
 8013c76:	1c59      	adds	r1, r3, #1
 8013c78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c7a:	f7fe f913 	bl	8011ea4 <_malloc_r>
 8013c7e:	9009      	str	r0, [sp, #36]	; 0x24
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d000      	beq.n	8013c86 <_svfprintf_r+0x656>
 8013c84:	e09b      	b.n	8013dbe <_svfprintf_r+0x78e>
 8013c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c88:	899a      	ldrh	r2, [r3, #12]
 8013c8a:	2340      	movs	r3, #64	; 0x40
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c90:	8193      	strh	r3, [r2, #12]
 8013c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c94:	899b      	ldrh	r3, [r3, #12]
 8013c96:	065b      	lsls	r3, r3, #25
 8013c98:	d400      	bmi.n	8013c9c <_svfprintf_r+0x66c>
 8013c9a:	e4ee      	b.n	801367a <_svfprintf_r+0x4a>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	425b      	negs	r3, r3
 8013ca0:	e4ea      	b.n	8013678 <_svfprintf_r+0x48>
 8013ca2:	9b08      	ldr	r3, [sp, #32]
 8013ca4:	900c      	str	r0, [sp, #48]	; 0x30
 8013ca6:	3301      	adds	r3, #1
 8013ca8:	d100      	bne.n	8013cac <_svfprintf_r+0x67c>
 8013caa:	e08b      	b.n	8013dc4 <_svfprintf_r+0x794>
 8013cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cae:	2b47      	cmp	r3, #71	; 0x47
 8013cb0:	d103      	bne.n	8013cba <_svfprintf_r+0x68a>
 8013cb2:	9b08      	ldr	r3, [sp, #32]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d100      	bne.n	8013cba <_svfprintf_r+0x68a>
 8013cb8:	e087      	b.n	8013dca <_svfprintf_r+0x79a>
 8013cba:	2380      	movs	r3, #128	; 0x80
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	4333      	orrs	r3, r6
 8013cc0:	9320      	str	r3, [sp, #128]	; 0x80
 8013cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cc4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	db00      	blt.n	8013ccc <_svfprintf_r+0x69c>
 8013cca:	e082      	b.n	8013dd2 <_svfprintf_r+0x7a2>
 8013ccc:	2280      	movs	r2, #128	; 0x80
 8013cce:	0612      	lsls	r2, r2, #24
 8013cd0:	4694      	mov	ip, r2
 8013cd2:	4463      	add	r3, ip
 8013cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8013cd6:	232d      	movs	r3, #45	; 0x2d
 8013cd8:	9322      	str	r3, [sp, #136]	; 0x88
 8013cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cdc:	2b41      	cmp	r3, #65	; 0x41
 8013cde:	d000      	beq.n	8013ce2 <_svfprintf_r+0x6b2>
 8013ce0:	e105      	b.n	8013eee <_svfprintf_r+0x8be>
 8013ce2:	aa26      	add	r2, sp, #152	; 0x98
 8013ce4:	0020      	movs	r0, r4
 8013ce6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ce8:	f002 fdc4 	bl	8016874 <frexp>
 8013cec:	23ff      	movs	r3, #255	; 0xff
 8013cee:	2200      	movs	r2, #0
 8013cf0:	059b      	lsls	r3, r3, #22
 8013cf2:	f7ee f89f 	bl	8001e34 <__aeabi_dmul>
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	0004      	movs	r4, r0
 8013cfc:	000d      	movs	r5, r1
 8013cfe:	f7ec fbad 	bl	800045c <__aeabi_dcmpeq>
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d001      	beq.n	8013d0a <_svfprintf_r+0x6da>
 8013d06:	2301      	movs	r3, #1
 8013d08:	9326      	str	r3, [sp, #152]	; 0x98
 8013d0a:	4b83      	ldr	r3, [pc, #524]	; (8013f18 <_svfprintf_r+0x8e8>)
 8013d0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d10:	2b61      	cmp	r3, #97	; 0x61
 8013d12:	d101      	bne.n	8013d18 <_svfprintf_r+0x6e8>
 8013d14:	4b81      	ldr	r3, [pc, #516]	; (8013f1c <_svfprintf_r+0x8ec>)
 8013d16:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d18:	9b08      	ldr	r3, [sp, #32]
 8013d1a:	3b01      	subs	r3, #1
 8013d1c:	9310      	str	r3, [sp, #64]	; 0x40
 8013d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d20:	9318      	str	r3, [sp, #96]	; 0x60
 8013d22:	2200      	movs	r2, #0
 8013d24:	4b7e      	ldr	r3, [pc, #504]	; (8013f20 <_svfprintf_r+0x8f0>)
 8013d26:	0020      	movs	r0, r4
 8013d28:	0029      	movs	r1, r5
 8013d2a:	f7ee f883 	bl	8001e34 <__aeabi_dmul>
 8013d2e:	000d      	movs	r5, r1
 8013d30:	0004      	movs	r4, r0
 8013d32:	f7ee fe55 	bl	80029e0 <__aeabi_d2iz>
 8013d36:	9021      	str	r0, [sp, #132]	; 0x84
 8013d38:	f7ee fe88 	bl	8002a4c <__aeabi_i2d>
 8013d3c:	0002      	movs	r2, r0
 8013d3e:	000b      	movs	r3, r1
 8013d40:	0020      	movs	r0, r4
 8013d42:	0029      	movs	r1, r5
 8013d44:	f7ee fae8 	bl	8002318 <__aeabi_dsub>
 8013d48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013d4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8013d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d52:	0004      	movs	r4, r0
 8013d54:	5c9b      	ldrb	r3, [r3, r2]
 8013d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d58:	000d      	movs	r5, r1
 8013d5a:	7013      	strb	r3, [r2, #0]
 8013d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d5e:	9323      	str	r3, [sp, #140]	; 0x8c
 8013d60:	3301      	adds	r3, #1
 8013d62:	d00a      	beq.n	8013d7a <_svfprintf_r+0x74a>
 8013d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d66:	2200      	movs	r2, #0
 8013d68:	3b01      	subs	r3, #1
 8013d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8013d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d6e:	9318      	str	r3, [sp, #96]	; 0x60
 8013d70:	2300      	movs	r3, #0
 8013d72:	f7ec fb73 	bl	800045c <__aeabi_dcmpeq>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d0d3      	beq.n	8013d22 <_svfprintf_r+0x6f2>
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	4b69      	ldr	r3, [pc, #420]	; (8013f24 <_svfprintf_r+0x8f4>)
 8013d7e:	0020      	movs	r0, r4
 8013d80:	0029      	movs	r1, r5
 8013d82:	f7ec fb85 	bl	8000490 <__aeabi_dcmpgt>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	d126      	bne.n	8013dd8 <_svfprintf_r+0x7a8>
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	4b65      	ldr	r3, [pc, #404]	; (8013f24 <_svfprintf_r+0x8f4>)
 8013d8e:	0020      	movs	r0, r4
 8013d90:	0029      	movs	r1, r5
 8013d92:	f7ec fb63 	bl	800045c <__aeabi_dcmpeq>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	d002      	beq.n	8013da0 <_svfprintf_r+0x770>
 8013d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d9c:	07db      	lsls	r3, r3, #31
 8013d9e:	d41b      	bmi.n	8013dd8 <_svfprintf_r+0x7a8>
 8013da0:	2130      	movs	r1, #48	; 0x30
 8013da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013da4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013da6:	1898      	adds	r0, r3, r2
 8013da8:	930d      	str	r3, [sp, #52]	; 0x34
 8013daa:	1ac2      	subs	r2, r0, r3
 8013dac:	d426      	bmi.n	8013dfc <_svfprintf_r+0x7cc>
 8013dae:	7019      	strb	r1, [r3, #0]
 8013db0:	3301      	adds	r3, #1
 8013db2:	e7f9      	b.n	8013da8 <_svfprintf_r+0x778>
 8013db4:	2300      	movs	r3, #0
 8013db6:	930c      	str	r3, [sp, #48]	; 0x30
 8013db8:	ab3f      	add	r3, sp, #252	; 0xfc
 8013dba:	9309      	str	r3, [sp, #36]	; 0x24
 8013dbc:	e77d      	b.n	8013cba <_svfprintf_r+0x68a>
 8013dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8013dc2:	e77a      	b.n	8013cba <_svfprintf_r+0x68a>
 8013dc4:	2306      	movs	r3, #6
 8013dc6:	9308      	str	r3, [sp, #32]
 8013dc8:	e777      	b.n	8013cba <_svfprintf_r+0x68a>
 8013dca:	9b08      	ldr	r3, [sp, #32]
 8013dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8013dce:	2301      	movs	r3, #1
 8013dd0:	e7f9      	b.n	8013dc6 <_svfprintf_r+0x796>
 8013dd2:	930d      	str	r3, [sp, #52]	; 0x34
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	e77f      	b.n	8013cd8 <_svfprintf_r+0x6a8>
 8013dd8:	2030      	movs	r0, #48	; 0x30
 8013dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ddc:	932a      	str	r3, [sp, #168]	; 0xa8
 8013dde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013de0:	7bda      	ldrb	r2, [r3, #15]
 8013de2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013de4:	3b01      	subs	r3, #1
 8013de6:	932a      	str	r3, [sp, #168]	; 0xa8
 8013de8:	7819      	ldrb	r1, [r3, #0]
 8013dea:	4291      	cmp	r1, r2
 8013dec:	d07d      	beq.n	8013eea <_svfprintf_r+0x8ba>
 8013dee:	1c4a      	adds	r2, r1, #1
 8013df0:	b2d2      	uxtb	r2, r2
 8013df2:	2939      	cmp	r1, #57	; 0x39
 8013df4:	d101      	bne.n	8013dfa <_svfprintf_r+0x7ca>
 8013df6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013df8:	7a92      	ldrb	r2, [r2, #10]
 8013dfa:	701a      	strb	r2, [r3, #0]
 8013dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e00:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8013e02:	1a9b      	subs	r3, r3, r2
 8013e04:	930d      	str	r3, [sp, #52]	; 0x34
 8013e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e08:	2b47      	cmp	r3, #71	; 0x47
 8013e0a:	d000      	beq.n	8013e0e <_svfprintf_r+0x7de>
 8013e0c:	e0d2      	b.n	8013fb4 <_svfprintf_r+0x984>
 8013e0e:	1ceb      	adds	r3, r5, #3
 8013e10:	db03      	blt.n	8013e1a <_svfprintf_r+0x7ea>
 8013e12:	9b08      	ldr	r3, [sp, #32]
 8013e14:	42ab      	cmp	r3, r5
 8013e16:	db00      	blt.n	8013e1a <_svfprintf_r+0x7ea>
 8013e18:	e0fd      	b.n	8014016 <_svfprintf_r+0x9e6>
 8013e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e1c:	3b02      	subs	r3, #2
 8013e1e:	930e      	str	r3, [sp, #56]	; 0x38
 8013e20:	2238      	movs	r2, #56	; 0x38
 8013e22:	466b      	mov	r3, sp
 8013e24:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013e26:	189b      	adds	r3, r3, r2
 8013e28:	3a18      	subs	r2, #24
 8013e2a:	4391      	bics	r1, r2
 8013e2c:	1e6c      	subs	r4, r5, #1
 8013e2e:	000a      	movs	r2, r1
 8013e30:	9426      	str	r4, [sp, #152]	; 0x98
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	2100      	movs	r1, #0
 8013e36:	2a41      	cmp	r2, #65	; 0x41
 8013e38:	d102      	bne.n	8013e40 <_svfprintf_r+0x810>
 8013e3a:	330f      	adds	r3, #15
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	3101      	adds	r1, #1
 8013e40:	aa28      	add	r2, sp, #160	; 0xa0
 8013e42:	7013      	strb	r3, [r2, #0]
 8013e44:	232b      	movs	r3, #43	; 0x2b
 8013e46:	2c00      	cmp	r4, #0
 8013e48:	da02      	bge.n	8013e50 <_svfprintf_r+0x820>
 8013e4a:	2401      	movs	r4, #1
 8013e4c:	232d      	movs	r3, #45	; 0x2d
 8013e4e:	1b64      	subs	r4, r4, r5
 8013e50:	7053      	strb	r3, [r2, #1]
 8013e52:	2c09      	cmp	r4, #9
 8013e54:	dc00      	bgt.n	8013e58 <_svfprintf_r+0x828>
 8013e56:	e0c7      	b.n	8013fe8 <_svfprintf_r+0x9b8>
 8013e58:	2537      	movs	r5, #55	; 0x37
 8013e5a:	ab1e      	add	r3, sp, #120	; 0x78
 8013e5c:	18ed      	adds	r5, r5, r3
 8013e5e:	1e6b      	subs	r3, r5, #1
 8013e60:	0020      	movs	r0, r4
 8013e62:	210a      	movs	r1, #10
 8013e64:	9308      	str	r3, [sp, #32]
 8013e66:	f7ec fae3 	bl	8000430 <__aeabi_idivmod>
 8013e6a:	1e6b      	subs	r3, r5, #1
 8013e6c:	3130      	adds	r1, #48	; 0x30
 8013e6e:	7019      	strb	r1, [r3, #0]
 8013e70:	0020      	movs	r0, r4
 8013e72:	210a      	movs	r1, #10
 8013e74:	f7ec f9f6 	bl	8000264 <__divsi3>
 8013e78:	0004      	movs	r4, r0
 8013e7a:	2809      	cmp	r0, #9
 8013e7c:	dd00      	ble.n	8013e80 <_svfprintf_r+0x850>
 8013e7e:	e0ac      	b.n	8013fda <_svfprintf_r+0x9aa>
 8013e80:	232a      	movs	r3, #42	; 0x2a
 8013e82:	2137      	movs	r1, #55	; 0x37
 8013e84:	aa1e      	add	r2, sp, #120	; 0x78
 8013e86:	3d02      	subs	r5, #2
 8013e88:	3430      	adds	r4, #48	; 0x30
 8013e8a:	702c      	strb	r4, [r5, #0]
 8013e8c:	189b      	adds	r3, r3, r2
 8013e8e:	1889      	adds	r1, r1, r2
 8013e90:	001a      	movs	r2, r3
 8013e92:	428d      	cmp	r5, r1
 8013e94:	d200      	bcs.n	8013e98 <_svfprintf_r+0x868>
 8013e96:	e0a2      	b.n	8013fde <_svfprintf_r+0x9ae>
 8013e98:	ab28      	add	r3, sp, #160	; 0xa0
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	931d      	str	r3, [sp, #116]	; 0x74
 8013e9e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ea2:	4694      	mov	ip, r2
 8013ea4:	4463      	add	r3, ip
 8013ea6:	9308      	str	r3, [sp, #32]
 8013ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	dc01      	bgt.n	8013eb2 <_svfprintf_r+0x882>
 8013eae:	07f3      	lsls	r3, r6, #31
 8013eb0:	d504      	bpl.n	8013ebc <_svfprintf_r+0x88c>
 8013eb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013eb4:	9b08      	ldr	r3, [sp, #32]
 8013eb6:	4694      	mov	ip, r2
 8013eb8:	4463      	add	r3, ip
 8013eba:	9308      	str	r3, [sp, #32]
 8013ebc:	2280      	movs	r2, #128	; 0x80
 8013ebe:	4b1a      	ldr	r3, [pc, #104]	; (8013f28 <_svfprintf_r+0x8f8>)
 8013ec0:	0052      	lsls	r2, r2, #1
 8013ec2:	4033      	ands	r3, r6
 8013ec4:	431a      	orrs	r2, r3
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	001d      	movs	r5, r3
 8013eca:	9220      	str	r2, [sp, #128]	; 0x80
 8013ecc:	9310      	str	r3, [sp, #64]	; 0x40
 8013ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d100      	bne.n	8013ed8 <_svfprintf_r+0x8a8>
 8013ed6:	e270      	b.n	80143ba <_svfprintf_r+0xd8a>
 8013ed8:	231b      	movs	r3, #27
 8013eda:	aa1e      	add	r2, sp, #120	; 0x78
 8013edc:	189b      	adds	r3, r3, r2
 8013ede:	222d      	movs	r2, #45	; 0x2d
 8013ee0:	701a      	strb	r2, [r3, #0]
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8013ee8:	e539      	b.n	801395e <_svfprintf_r+0x32e>
 8013eea:	7018      	strb	r0, [r3, #0]
 8013eec:	e779      	b.n	8013de2 <_svfprintf_r+0x7b2>
 8013eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ef0:	2b46      	cmp	r3, #70	; 0x46
 8013ef2:	d01b      	beq.n	8013f2c <_svfprintf_r+0x8fc>
 8013ef4:	9d08      	ldr	r5, [sp, #32]
 8013ef6:	2b45      	cmp	r3, #69	; 0x45
 8013ef8:	d101      	bne.n	8013efe <_svfprintf_r+0x8ce>
 8013efa:	9b08      	ldr	r3, [sp, #32]
 8013efc:	1c5d      	adds	r5, r3, #1
 8013efe:	2302      	movs	r3, #2
 8013f00:	e016      	b.n	8013f30 <_svfprintf_r+0x900>
 8013f02:	46c0      	nop			; (mov r8, r8)
 8013f04:	7fefffff 	.word	0x7fefffff
 8013f08:	08019a64 	.word	0x08019a64
 8013f0c:	08019a60 	.word	0x08019a60
 8013f10:	08019a6c 	.word	0x08019a6c
 8013f14:	08019a68 	.word	0x08019a68
 8013f18:	08019a81 	.word	0x08019a81
 8013f1c:	08019a70 	.word	0x08019a70
 8013f20:	40300000 	.word	0x40300000
 8013f24:	3fe00000 	.word	0x3fe00000
 8013f28:	fffffbff 	.word	0xfffffbff
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	9d08      	ldr	r5, [sp, #32]
 8013f30:	aa2a      	add	r2, sp, #168	; 0xa8
 8013f32:	9204      	str	r2, [sp, #16]
 8013f34:	aa27      	add	r2, sp, #156	; 0x9c
 8013f36:	9203      	str	r2, [sp, #12]
 8013f38:	aa26      	add	r2, sp, #152	; 0x98
 8013f3a:	9202      	str	r2, [sp, #8]
 8013f3c:	9300      	str	r3, [sp, #0]
 8013f3e:	9501      	str	r5, [sp, #4]
 8013f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f42:	0022      	movs	r2, r4
 8013f44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f46:	f000 fe79 	bl	8014c3c <_dtoa_r>
 8013f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f4c:	9009      	str	r0, [sp, #36]	; 0x24
 8013f4e:	2b47      	cmp	r3, #71	; 0x47
 8013f50:	d101      	bne.n	8013f56 <_svfprintf_r+0x926>
 8013f52:	07f3      	lsls	r3, r6, #31
 8013f54:	d524      	bpl.n	8013fa0 <_svfprintf_r+0x970>
 8013f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f58:	195b      	adds	r3, r3, r5
 8013f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8013f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f5e:	2b46      	cmp	r3, #70	; 0x46
 8013f60:	d113      	bne.n	8013f8a <_svfprintf_r+0x95a>
 8013f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f64:	781b      	ldrb	r3, [r3, #0]
 8013f66:	2b30      	cmp	r3, #48	; 0x30
 8013f68:	d10a      	bne.n	8013f80 <_svfprintf_r+0x950>
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	0020      	movs	r0, r4
 8013f70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f72:	f7ec fa73 	bl	800045c <__aeabi_dcmpeq>
 8013f76:	2800      	cmp	r0, #0
 8013f78:	d102      	bne.n	8013f80 <_svfprintf_r+0x950>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	1b5d      	subs	r5, r3, r5
 8013f7e:	9526      	str	r5, [sp, #152]	; 0x98
 8013f80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013f82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f84:	4694      	mov	ip, r2
 8013f86:	4463      	add	r3, ip
 8013f88:	9310      	str	r3, [sp, #64]	; 0x40
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	0020      	movs	r0, r4
 8013f90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f92:	f7ec fa63 	bl	800045c <__aeabi_dcmpeq>
 8013f96:	2230      	movs	r2, #48	; 0x30
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d006      	beq.n	8013faa <_svfprintf_r+0x97a>
 8013f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f9e:	932a      	str	r3, [sp, #168]	; 0xa8
 8013fa0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013fa2:	e72c      	b.n	8013dfe <_svfprintf_r+0x7ce>
 8013fa4:	1c59      	adds	r1, r3, #1
 8013fa6:	912a      	str	r1, [sp, #168]	; 0xa8
 8013fa8:	701a      	strb	r2, [r3, #0]
 8013faa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013fac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013fae:	4299      	cmp	r1, r3
 8013fb0:	d8f8      	bhi.n	8013fa4 <_svfprintf_r+0x974>
 8013fb2:	e7f5      	b.n	8013fa0 <_svfprintf_r+0x970>
 8013fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fb6:	2b46      	cmp	r3, #70	; 0x46
 8013fb8:	d000      	beq.n	8013fbc <_svfprintf_r+0x98c>
 8013fba:	e731      	b.n	8013e20 <_svfprintf_r+0x7f0>
 8013fbc:	9b08      	ldr	r3, [sp, #32]
 8013fbe:	2d00      	cmp	r5, #0
 8013fc0:	dd21      	ble.n	8014006 <_svfprintf_r+0x9d6>
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d101      	bne.n	8013fca <_svfprintf_r+0x99a>
 8013fc6:	07f3      	lsls	r3, r6, #31
 8013fc8:	d54a      	bpl.n	8014060 <_svfprintf_r+0xa30>
 8013fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fcc:	18eb      	adds	r3, r5, r3
 8013fce:	9a08      	ldr	r2, [sp, #32]
 8013fd0:	18d3      	adds	r3, r2, r3
 8013fd2:	9308      	str	r3, [sp, #32]
 8013fd4:	2366      	movs	r3, #102	; 0x66
 8013fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8013fd8:	e034      	b.n	8014044 <_svfprintf_r+0xa14>
 8013fda:	9d08      	ldr	r5, [sp, #32]
 8013fdc:	e73f      	b.n	8013e5e <_svfprintf_r+0x82e>
 8013fde:	782a      	ldrb	r2, [r5, #0]
 8013fe0:	3501      	adds	r5, #1
 8013fe2:	701a      	strb	r2, [r3, #0]
 8013fe4:	3301      	adds	r3, #1
 8013fe6:	e753      	b.n	8013e90 <_svfprintf_r+0x860>
 8013fe8:	232a      	movs	r3, #42	; 0x2a
 8013fea:	aa1e      	add	r2, sp, #120	; 0x78
 8013fec:	189b      	adds	r3, r3, r2
 8013fee:	2900      	cmp	r1, #0
 8013ff0:	d105      	bne.n	8013ffe <_svfprintf_r+0x9ce>
 8013ff2:	2230      	movs	r2, #48	; 0x30
 8013ff4:	ab28      	add	r3, sp, #160	; 0xa0
 8013ff6:	709a      	strb	r2, [r3, #2]
 8013ff8:	232b      	movs	r3, #43	; 0x2b
 8013ffa:	aa1e      	add	r2, sp, #120	; 0x78
 8013ffc:	189b      	adds	r3, r3, r2
 8013ffe:	3430      	adds	r4, #48	; 0x30
 8014000:	1c5a      	adds	r2, r3, #1
 8014002:	701c      	strb	r4, [r3, #0]
 8014004:	e748      	b.n	8013e98 <_svfprintf_r+0x868>
 8014006:	2b00      	cmp	r3, #0
 8014008:	d102      	bne.n	8014010 <_svfprintf_r+0x9e0>
 801400a:	3301      	adds	r3, #1
 801400c:	421e      	tst	r6, r3
 801400e:	d029      	beq.n	8014064 <_svfprintf_r+0xa34>
 8014010:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014012:	3301      	adds	r3, #1
 8014014:	e7db      	b.n	8013fce <_svfprintf_r+0x99e>
 8014016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014018:	42ab      	cmp	r3, r5
 801401a:	dc06      	bgt.n	801402a <_svfprintf_r+0x9fa>
 801401c:	07f3      	lsls	r3, r6, #31
 801401e:	d524      	bpl.n	801406a <_svfprintf_r+0xa3a>
 8014020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014022:	18eb      	adds	r3, r5, r3
 8014024:	9308      	str	r3, [sp, #32]
 8014026:	2367      	movs	r3, #103	; 0x67
 8014028:	e7d5      	b.n	8013fd6 <_svfprintf_r+0x9a6>
 801402a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801402c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801402e:	4694      	mov	ip, r2
 8014030:	4463      	add	r3, ip
 8014032:	9308      	str	r3, [sp, #32]
 8014034:	2367      	movs	r3, #103	; 0x67
 8014036:	930e      	str	r3, [sp, #56]	; 0x38
 8014038:	2d00      	cmp	r5, #0
 801403a:	dc03      	bgt.n	8014044 <_svfprintf_r+0xa14>
 801403c:	9b08      	ldr	r3, [sp, #32]
 801403e:	1b5b      	subs	r3, r3, r5
 8014040:	3301      	adds	r3, #1
 8014042:	9308      	str	r3, [sp, #32]
 8014044:	2380      	movs	r3, #128	; 0x80
 8014046:	00db      	lsls	r3, r3, #3
 8014048:	401e      	ands	r6, r3
 801404a:	2300      	movs	r3, #0
 801404c:	960f      	str	r6, [sp, #60]	; 0x3c
 801404e:	9310      	str	r3, [sp, #64]	; 0x40
 8014050:	2e00      	cmp	r6, #0
 8014052:	d100      	bne.n	8014056 <_svfprintf_r+0xa26>
 8014054:	e73c      	b.n	8013ed0 <_svfprintf_r+0x8a0>
 8014056:	2d00      	cmp	r5, #0
 8014058:	dc27      	bgt.n	80140aa <_svfprintf_r+0xa7a>
 801405a:	2300      	movs	r3, #0
 801405c:	930f      	str	r3, [sp, #60]	; 0x3c
 801405e:	e737      	b.n	8013ed0 <_svfprintf_r+0x8a0>
 8014060:	9508      	str	r5, [sp, #32]
 8014062:	e7b7      	b.n	8013fd4 <_svfprintf_r+0x9a4>
 8014064:	2266      	movs	r2, #102	; 0x66
 8014066:	920e      	str	r2, [sp, #56]	; 0x38
 8014068:	e7eb      	b.n	8014042 <_svfprintf_r+0xa12>
 801406a:	9508      	str	r5, [sp, #32]
 801406c:	e7db      	b.n	8014026 <_svfprintf_r+0x9f6>
 801406e:	42ab      	cmp	r3, r5
 8014070:	da0e      	bge.n	8014090 <_svfprintf_r+0xa60>
 8014072:	1aed      	subs	r5, r5, r3
 8014074:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014076:	785b      	ldrb	r3, [r3, #1]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d012      	beq.n	80140a2 <_svfprintf_r+0xa72>
 801407c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801407e:	3301      	adds	r3, #1
 8014080:	930f      	str	r3, [sp, #60]	; 0x3c
 8014082:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014084:	3301      	adds	r3, #1
 8014086:	9313      	str	r3, [sp, #76]	; 0x4c
 8014088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	2bff      	cmp	r3, #255	; 0xff
 801408e:	d1ee      	bne.n	801406e <_svfprintf_r+0xa3e>
 8014090:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014094:	189b      	adds	r3, r3, r2
 8014096:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014098:	4353      	muls	r3, r2
 801409a:	9a08      	ldr	r2, [sp, #32]
 801409c:	189b      	adds	r3, r3, r2
 801409e:	9308      	str	r3, [sp, #32]
 80140a0:	e716      	b.n	8013ed0 <_svfprintf_r+0x8a0>
 80140a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140a4:	3301      	adds	r3, #1
 80140a6:	9310      	str	r3, [sp, #64]	; 0x40
 80140a8:	e7ee      	b.n	8014088 <_svfprintf_r+0xa58>
 80140aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80140ae:	e7eb      	b.n	8014088 <_svfprintf_r+0xa58>
 80140b0:	0022      	movs	r2, r4
 80140b2:	ca08      	ldmia	r2!, {r3}
 80140b4:	9212      	str	r2, [sp, #72]	; 0x48
 80140b6:	06b2      	lsls	r2, r6, #26
 80140b8:	d508      	bpl.n	80140cc <_svfprintf_r+0xa9c>
 80140ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140bc:	601a      	str	r2, [r3, #0]
 80140be:	17d2      	asrs	r2, r2, #31
 80140c0:	605a      	str	r2, [r3, #4]
 80140c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80140c6:	9309      	str	r3, [sp, #36]	; 0x24
 80140c8:	f7ff faeb 	bl	80136a2 <_svfprintf_r+0x72>
 80140cc:	06f2      	lsls	r2, r6, #27
 80140ce:	d502      	bpl.n	80140d6 <_svfprintf_r+0xaa6>
 80140d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140d2:	601a      	str	r2, [r3, #0]
 80140d4:	e7f5      	b.n	80140c2 <_svfprintf_r+0xa92>
 80140d6:	0672      	lsls	r2, r6, #25
 80140d8:	d502      	bpl.n	80140e0 <_svfprintf_r+0xab0>
 80140da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140dc:	801a      	strh	r2, [r3, #0]
 80140de:	e7f0      	b.n	80140c2 <_svfprintf_r+0xa92>
 80140e0:	05b2      	lsls	r2, r6, #22
 80140e2:	d5f5      	bpl.n	80140d0 <_svfprintf_r+0xaa0>
 80140e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80140e6:	701a      	strb	r2, [r3, #0]
 80140e8:	e7eb      	b.n	80140c2 <_svfprintf_r+0xa92>
 80140ea:	2310      	movs	r3, #16
 80140ec:	431e      	orrs	r6, r3
 80140ee:	2220      	movs	r2, #32
 80140f0:	4032      	ands	r2, r6
 80140f2:	d025      	beq.n	8014140 <_svfprintf_r+0xb10>
 80140f4:	2307      	movs	r3, #7
 80140f6:	3407      	adds	r4, #7
 80140f8:	439c      	bics	r4, r3
 80140fa:	0023      	movs	r3, r4
 80140fc:	3308      	adds	r3, #8
 80140fe:	9312      	str	r3, [sp, #72]	; 0x48
 8014100:	6823      	ldr	r3, [r4, #0]
 8014102:	6864      	ldr	r4, [r4, #4]
 8014104:	9306      	str	r3, [sp, #24]
 8014106:	9407      	str	r4, [sp, #28]
 8014108:	4bc2      	ldr	r3, [pc, #776]	; (8014414 <_svfprintf_r+0xde4>)
 801410a:	401e      	ands	r6, r3
 801410c:	2300      	movs	r3, #0
 801410e:	221b      	movs	r2, #27
 8014110:	a91e      	add	r1, sp, #120	; 0x78
 8014112:	1852      	adds	r2, r2, r1
 8014114:	2100      	movs	r1, #0
 8014116:	7011      	strb	r1, [r2, #0]
 8014118:	9a08      	ldr	r2, [sp, #32]
 801411a:	3201      	adds	r2, #1
 801411c:	d100      	bne.n	8014120 <_svfprintf_r+0xaf0>
 801411e:	e0a6      	b.n	801426e <_svfprintf_r+0xc3e>
 8014120:	0032      	movs	r2, r6
 8014122:	2180      	movs	r1, #128	; 0x80
 8014124:	9807      	ldr	r0, [sp, #28]
 8014126:	438e      	bics	r6, r1
 8014128:	9906      	ldr	r1, [sp, #24]
 801412a:	4301      	orrs	r1, r0
 801412c:	d000      	beq.n	8014130 <_svfprintf_r+0xb00>
 801412e:	e09e      	b.n	801426e <_svfprintf_r+0xc3e>
 8014130:	9908      	ldr	r1, [sp, #32]
 8014132:	2900      	cmp	r1, #0
 8014134:	d100      	bne.n	8014138 <_svfprintf_r+0xb08>
 8014136:	e125      	b.n	8014384 <_svfprintf_r+0xd54>
 8014138:	2b01      	cmp	r3, #1
 801413a:	d000      	beq.n	801413e <_svfprintf_r+0xb0e>
 801413c:	e09a      	b.n	8014274 <_svfprintf_r+0xc44>
 801413e:	e518      	b.n	8013b72 <_svfprintf_r+0x542>
 8014140:	1d23      	adds	r3, r4, #4
 8014142:	9312      	str	r3, [sp, #72]	; 0x48
 8014144:	2310      	movs	r3, #16
 8014146:	4033      	ands	r3, r6
 8014148:	d003      	beq.n	8014152 <_svfprintf_r+0xb22>
 801414a:	6823      	ldr	r3, [r4, #0]
 801414c:	9306      	str	r3, [sp, #24]
 801414e:	9207      	str	r2, [sp, #28]
 8014150:	e7da      	b.n	8014108 <_svfprintf_r+0xad8>
 8014152:	2240      	movs	r2, #64	; 0x40
 8014154:	4032      	ands	r2, r6
 8014156:	d004      	beq.n	8014162 <_svfprintf_r+0xb32>
 8014158:	6822      	ldr	r2, [r4, #0]
 801415a:	b292      	uxth	r2, r2
 801415c:	9206      	str	r2, [sp, #24]
 801415e:	9307      	str	r3, [sp, #28]
 8014160:	e7d2      	b.n	8014108 <_svfprintf_r+0xad8>
 8014162:	2380      	movs	r3, #128	; 0x80
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4033      	ands	r3, r6
 8014168:	d002      	beq.n	8014170 <_svfprintf_r+0xb40>
 801416a:	6823      	ldr	r3, [r4, #0]
 801416c:	b2db      	uxtb	r3, r3
 801416e:	e7ed      	b.n	801414c <_svfprintf_r+0xb1c>
 8014170:	6822      	ldr	r2, [r4, #0]
 8014172:	e7f3      	b.n	801415c <_svfprintf_r+0xb2c>
 8014174:	1d23      	adds	r3, r4, #4
 8014176:	49a8      	ldr	r1, [pc, #672]	; (8014418 <_svfprintf_r+0xde8>)
 8014178:	aa25      	add	r2, sp, #148	; 0x94
 801417a:	9312      	str	r3, [sp, #72]	; 0x48
 801417c:	6823      	ldr	r3, [r4, #0]
 801417e:	8011      	strh	r1, [r2, #0]
 8014180:	4aa6      	ldr	r2, [pc, #664]	; (801441c <_svfprintf_r+0xdec>)
 8014182:	9306      	str	r3, [sp, #24]
 8014184:	2300      	movs	r3, #0
 8014186:	921e      	str	r2, [sp, #120]	; 0x78
 8014188:	2278      	movs	r2, #120	; 0x78
 801418a:	9307      	str	r3, [sp, #28]
 801418c:	3302      	adds	r3, #2
 801418e:	431e      	orrs	r6, r3
 8014190:	920e      	str	r2, [sp, #56]	; 0x38
 8014192:	e7bc      	b.n	801410e <_svfprintf_r+0xade>
 8014194:	1d23      	adds	r3, r4, #4
 8014196:	9312      	str	r3, [sp, #72]	; 0x48
 8014198:	6823      	ldr	r3, [r4, #0]
 801419a:	2400      	movs	r4, #0
 801419c:	9309      	str	r3, [sp, #36]	; 0x24
 801419e:	231b      	movs	r3, #27
 80141a0:	aa1e      	add	r2, sp, #120	; 0x78
 80141a2:	189b      	adds	r3, r3, r2
 80141a4:	701c      	strb	r4, [r3, #0]
 80141a6:	9b08      	ldr	r3, [sp, #32]
 80141a8:	3301      	adds	r3, #1
 80141aa:	d00e      	beq.n	80141ca <_svfprintf_r+0xb9a>
 80141ac:	9a08      	ldr	r2, [sp, #32]
 80141ae:	0021      	movs	r1, r4
 80141b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141b2:	f001 ff79 	bl	80160a8 <memchr>
 80141b6:	900c      	str	r0, [sp, #48]	; 0x30
 80141b8:	42a0      	cmp	r0, r4
 80141ba:	d100      	bne.n	80141be <_svfprintf_r+0xb8e>
 80141bc:	e100      	b.n	80143c0 <_svfprintf_r+0xd90>
 80141be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141c0:	1a83      	subs	r3, r0, r2
 80141c2:	9308      	str	r3, [sp, #32]
 80141c4:	940c      	str	r4, [sp, #48]	; 0x30
 80141c6:	0023      	movs	r3, r4
 80141c8:	e527      	b.n	8013c1a <_svfprintf_r+0x5ea>
 80141ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141cc:	f7eb ffa4 	bl	8000118 <strlen>
 80141d0:	9008      	str	r0, [sp, #32]
 80141d2:	e7f7      	b.n	80141c4 <_svfprintf_r+0xb94>
 80141d4:	2310      	movs	r3, #16
 80141d6:	431e      	orrs	r6, r3
 80141d8:	2220      	movs	r2, #32
 80141da:	4032      	ands	r2, r6
 80141dc:	d00b      	beq.n	80141f6 <_svfprintf_r+0xbc6>
 80141de:	2307      	movs	r3, #7
 80141e0:	3407      	adds	r4, #7
 80141e2:	439c      	bics	r4, r3
 80141e4:	0023      	movs	r3, r4
 80141e6:	3308      	adds	r3, #8
 80141e8:	9312      	str	r3, [sp, #72]	; 0x48
 80141ea:	6823      	ldr	r3, [r4, #0]
 80141ec:	6864      	ldr	r4, [r4, #4]
 80141ee:	9306      	str	r3, [sp, #24]
 80141f0:	9407      	str	r4, [sp, #28]
 80141f2:	2301      	movs	r3, #1
 80141f4:	e78b      	b.n	801410e <_svfprintf_r+0xade>
 80141f6:	1d23      	adds	r3, r4, #4
 80141f8:	9312      	str	r3, [sp, #72]	; 0x48
 80141fa:	2310      	movs	r3, #16
 80141fc:	4033      	ands	r3, r6
 80141fe:	d003      	beq.n	8014208 <_svfprintf_r+0xbd8>
 8014200:	6823      	ldr	r3, [r4, #0]
 8014202:	9306      	str	r3, [sp, #24]
 8014204:	9207      	str	r2, [sp, #28]
 8014206:	e7f4      	b.n	80141f2 <_svfprintf_r+0xbc2>
 8014208:	2240      	movs	r2, #64	; 0x40
 801420a:	4032      	ands	r2, r6
 801420c:	d004      	beq.n	8014218 <_svfprintf_r+0xbe8>
 801420e:	6822      	ldr	r2, [r4, #0]
 8014210:	b292      	uxth	r2, r2
 8014212:	9206      	str	r2, [sp, #24]
 8014214:	9307      	str	r3, [sp, #28]
 8014216:	e7ec      	b.n	80141f2 <_svfprintf_r+0xbc2>
 8014218:	2380      	movs	r3, #128	; 0x80
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	4033      	ands	r3, r6
 801421e:	d002      	beq.n	8014226 <_svfprintf_r+0xbf6>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	b2db      	uxtb	r3, r3
 8014224:	e7ed      	b.n	8014202 <_svfprintf_r+0xbd2>
 8014226:	6822      	ldr	r2, [r4, #0]
 8014228:	e7f3      	b.n	8014212 <_svfprintf_r+0xbe2>
 801422a:	4b7c      	ldr	r3, [pc, #496]	; (801441c <_svfprintf_r+0xdec>)
 801422c:	f7ff fad9 	bl	80137e2 <_svfprintf_r+0x1b2>
 8014230:	1d23      	adds	r3, r4, #4
 8014232:	9312      	str	r3, [sp, #72]	; 0x48
 8014234:	2310      	movs	r3, #16
 8014236:	4033      	ands	r3, r6
 8014238:	d004      	beq.n	8014244 <_svfprintf_r+0xc14>
 801423a:	6823      	ldr	r3, [r4, #0]
 801423c:	9306      	str	r3, [sp, #24]
 801423e:	9207      	str	r2, [sp, #28]
 8014240:	f7ff fadf 	bl	8013802 <_svfprintf_r+0x1d2>
 8014244:	2240      	movs	r2, #64	; 0x40
 8014246:	4032      	ands	r2, r6
 8014248:	d005      	beq.n	8014256 <_svfprintf_r+0xc26>
 801424a:	6822      	ldr	r2, [r4, #0]
 801424c:	b292      	uxth	r2, r2
 801424e:	9206      	str	r2, [sp, #24]
 8014250:	9307      	str	r3, [sp, #28]
 8014252:	f7ff fad6 	bl	8013802 <_svfprintf_r+0x1d2>
 8014256:	2380      	movs	r3, #128	; 0x80
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	4033      	ands	r3, r6
 801425c:	d002      	beq.n	8014264 <_svfprintf_r+0xc34>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	b2db      	uxtb	r3, r3
 8014262:	e7eb      	b.n	801423c <_svfprintf_r+0xc0c>
 8014264:	6822      	ldr	r2, [r4, #0]
 8014266:	e7f2      	b.n	801424e <_svfprintf_r+0xc1e>
 8014268:	0032      	movs	r2, r6
 801426a:	2301      	movs	r3, #1
 801426c:	e759      	b.n	8014122 <_svfprintf_r+0xaf2>
 801426e:	2b01      	cmp	r3, #1
 8014270:	d100      	bne.n	8014274 <_svfprintf_r+0xc44>
 8014272:	e476      	b.n	8013b62 <_svfprintf_r+0x532>
 8014274:	2b02      	cmp	r3, #2
 8014276:	d06b      	beq.n	8014350 <_svfprintf_r+0xd20>
 8014278:	2507      	movs	r5, #7
 801427a:	ab58      	add	r3, sp, #352	; 0x160
 801427c:	1e5a      	subs	r2, r3, #1
 801427e:	9209      	str	r2, [sp, #36]	; 0x24
 8014280:	9a06      	ldr	r2, [sp, #24]
 8014282:	1e59      	subs	r1, r3, #1
 8014284:	402a      	ands	r2, r5
 8014286:	3230      	adds	r2, #48	; 0x30
 8014288:	700a      	strb	r2, [r1, #0]
 801428a:	9907      	ldr	r1, [sp, #28]
 801428c:	074c      	lsls	r4, r1, #29
 801428e:	9906      	ldr	r1, [sp, #24]
 8014290:	08c8      	lsrs	r0, r1, #3
 8014292:	9907      	ldr	r1, [sp, #28]
 8014294:	4304      	orrs	r4, r0
 8014296:	08c9      	lsrs	r1, r1, #3
 8014298:	9107      	str	r1, [sp, #28]
 801429a:	0021      	movs	r1, r4
 801429c:	9807      	ldr	r0, [sp, #28]
 801429e:	9406      	str	r4, [sp, #24]
 80142a0:	4301      	orrs	r1, r0
 80142a2:	d111      	bne.n	80142c8 <_svfprintf_r+0xc98>
 80142a4:	07f1      	lsls	r1, r6, #31
 80142a6:	d502      	bpl.n	80142ae <_svfprintf_r+0xc7e>
 80142a8:	3b02      	subs	r3, #2
 80142aa:	2a30      	cmp	r2, #48	; 0x30
 80142ac:	d173      	bne.n	8014396 <_svfprintf_r+0xd66>
 80142ae:	9b08      	ldr	r3, [sp, #32]
 80142b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80142b4:	ab58      	add	r3, sp, #352	; 0x160
 80142b6:	1a9b      	subs	r3, r3, r2
 80142b8:	9308      	str	r3, [sp, #32]
 80142ba:	2300      	movs	r3, #0
 80142bc:	930c      	str	r3, [sp, #48]	; 0x30
 80142be:	9310      	str	r3, [sp, #64]	; 0x40
 80142c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80142c2:	001d      	movs	r5, r3
 80142c4:	f7ff fb4b 	bl	801395e <_svfprintf_r+0x32e>
 80142c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142ca:	e7d7      	b.n	801427c <_svfprintf_r+0xc4c>
 80142cc:	2480      	movs	r4, #128	; 0x80
 80142ce:	2300      	movs	r3, #0
 80142d0:	00e4      	lsls	r4, r4, #3
 80142d2:	930d      	str	r3, [sp, #52]	; 0x34
 80142d4:	4034      	ands	r4, r6
 80142d6:	ab58      	add	r3, sp, #352	; 0x160
 80142d8:	3b01      	subs	r3, #1
 80142da:	9309      	str	r3, [sp, #36]	; 0x24
 80142dc:	220a      	movs	r2, #10
 80142de:	9806      	ldr	r0, [sp, #24]
 80142e0:	9907      	ldr	r1, [sp, #28]
 80142e2:	2300      	movs	r3, #0
 80142e4:	f7ec f922 	bl	800052c <__aeabi_uldivmod>
 80142e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142ea:	3230      	adds	r2, #48	; 0x30
 80142ec:	701a      	strb	r2, [r3, #0]
 80142ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142f0:	3301      	adds	r3, #1
 80142f2:	930d      	str	r3, [sp, #52]	; 0x34
 80142f4:	2c00      	cmp	r4, #0
 80142f6:	d01d      	beq.n	8014334 <_svfprintf_r+0xd04>
 80142f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d118      	bne.n	8014334 <_svfprintf_r+0xd04>
 8014302:	2aff      	cmp	r2, #255	; 0xff
 8014304:	d016      	beq.n	8014334 <_svfprintf_r+0xd04>
 8014306:	9b07      	ldr	r3, [sp, #28]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d102      	bne.n	8014312 <_svfprintf_r+0xce2>
 801430c:	9b06      	ldr	r3, [sp, #24]
 801430e:	2b09      	cmp	r3, #9
 8014310:	d910      	bls.n	8014334 <_svfprintf_r+0xd04>
 8014312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014314:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014316:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014318:	1a9b      	subs	r3, r3, r2
 801431a:	0018      	movs	r0, r3
 801431c:	9309      	str	r3, [sp, #36]	; 0x24
 801431e:	f7fe fa52 	bl	80127c6 <strncpy>
 8014322:	2200      	movs	r2, #0
 8014324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014326:	920d      	str	r2, [sp, #52]	; 0x34
 8014328:	785b      	ldrb	r3, [r3, #1]
 801432a:	1e5a      	subs	r2, r3, #1
 801432c:	4193      	sbcs	r3, r2
 801432e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014330:	18d3      	adds	r3, r2, r3
 8014332:	9313      	str	r3, [sp, #76]	; 0x4c
 8014334:	220a      	movs	r2, #10
 8014336:	9806      	ldr	r0, [sp, #24]
 8014338:	9907      	ldr	r1, [sp, #28]
 801433a:	2300      	movs	r3, #0
 801433c:	f7ec f8f6 	bl	800052c <__aeabi_uldivmod>
 8014340:	9006      	str	r0, [sp, #24]
 8014342:	9107      	str	r1, [sp, #28]
 8014344:	9b06      	ldr	r3, [sp, #24]
 8014346:	9a07      	ldr	r2, [sp, #28]
 8014348:	4313      	orrs	r3, r2
 801434a:	d0b0      	beq.n	80142ae <_svfprintf_r+0xc7e>
 801434c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434e:	e7c3      	b.n	80142d8 <_svfprintf_r+0xca8>
 8014350:	200f      	movs	r0, #15
 8014352:	ab58      	add	r3, sp, #352	; 0x160
 8014354:	9309      	str	r3, [sp, #36]	; 0x24
 8014356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014358:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801435a:	3b01      	subs	r3, #1
 801435c:	9309      	str	r3, [sp, #36]	; 0x24
 801435e:	9b06      	ldr	r3, [sp, #24]
 8014360:	4003      	ands	r3, r0
 8014362:	5cd3      	ldrb	r3, [r2, r3]
 8014364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014366:	7013      	strb	r3, [r2, #0]
 8014368:	9b07      	ldr	r3, [sp, #28]
 801436a:	0719      	lsls	r1, r3, #28
 801436c:	9b06      	ldr	r3, [sp, #24]
 801436e:	091a      	lsrs	r2, r3, #4
 8014370:	9b07      	ldr	r3, [sp, #28]
 8014372:	4311      	orrs	r1, r2
 8014374:	091b      	lsrs	r3, r3, #4
 8014376:	9307      	str	r3, [sp, #28]
 8014378:	000b      	movs	r3, r1
 801437a:	9a07      	ldr	r2, [sp, #28]
 801437c:	9106      	str	r1, [sp, #24]
 801437e:	4313      	orrs	r3, r2
 8014380:	d1e9      	bne.n	8014356 <_svfprintf_r+0xd26>
 8014382:	e794      	b.n	80142ae <_svfprintf_r+0xc7e>
 8014384:	a958      	add	r1, sp, #352	; 0x160
 8014386:	9109      	str	r1, [sp, #36]	; 0x24
 8014388:	2b00      	cmp	r3, #0
 801438a:	d190      	bne.n	80142ae <_svfprintf_r+0xc7e>
 801438c:	07d3      	lsls	r3, r2, #31
 801438e:	d58e      	bpl.n	80142ae <_svfprintf_r+0xc7e>
 8014390:	23e7      	movs	r3, #231	; 0xe7
 8014392:	aa1e      	add	r2, sp, #120	; 0x78
 8014394:	189b      	adds	r3, r3, r2
 8014396:	2230      	movs	r2, #48	; 0x30
 8014398:	f7ff fbf0 	bl	8013b7c <_svfprintf_r+0x54c>
 801439c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d100      	bne.n	80143a4 <_svfprintf_r+0xd74>
 80143a2:	e38a      	b.n	8014aba <_svfprintf_r+0x148a>
 80143a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143a6:	ab3f      	add	r3, sp, #252	; 0xfc
 80143a8:	701a      	strb	r2, [r3, #0]
 80143aa:	221b      	movs	r2, #27
 80143ac:	2000      	movs	r0, #0
 80143ae:	a91e      	add	r1, sp, #120	; 0x78
 80143b0:	1852      	adds	r2, r2, r1
 80143b2:	7010      	strb	r0, [r2, #0]
 80143b4:	9412      	str	r4, [sp, #72]	; 0x48
 80143b6:	f7ff faca 	bl	801394e <_svfprintf_r+0x31e>
 80143ba:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80143bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80143be:	e592      	b.n	8013ee6 <_svfprintf_r+0x8b6>
 80143c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143c2:	e42a      	b.n	8013c1a <_svfprintf_r+0x5ea>
 80143c4:	2010      	movs	r0, #16
 80143c6:	1812      	adds	r2, r2, r0
 80143c8:	6078      	str	r0, [r7, #4]
 80143ca:	922e      	str	r2, [sp, #184]	; 0xb8
 80143cc:	932d      	str	r3, [sp, #180]	; 0xb4
 80143ce:	2b07      	cmp	r3, #7
 80143d0:	dd08      	ble.n	80143e4 <_svfprintf_r+0xdb4>
 80143d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80143d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143d8:	f002 fa7e 	bl	80168d8 <__ssprint_r>
 80143dc:	2800      	cmp	r0, #0
 80143de:	d000      	beq.n	80143e2 <_svfprintf_r+0xdb2>
 80143e0:	e34a      	b.n	8014a78 <_svfprintf_r+0x1448>
 80143e2:	a92f      	add	r1, sp, #188	; 0xbc
 80143e4:	3c10      	subs	r4, #16
 80143e6:	000f      	movs	r7, r1
 80143e8:	f7ff fad8 	bl	801399c <_svfprintf_r+0x36c>
 80143ec:	2010      	movs	r0, #16
 80143ee:	1812      	adds	r2, r2, r0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	922e      	str	r2, [sp, #184]	; 0xb8
 80143f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80143f6:	2b07      	cmp	r3, #7
 80143f8:	dd08      	ble.n	801440c <_svfprintf_r+0xddc>
 80143fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80143fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014400:	f002 fa6a 	bl	80168d8 <__ssprint_r>
 8014404:	2800      	cmp	r0, #0
 8014406:	d000      	beq.n	801440a <_svfprintf_r+0xdda>
 8014408:	e336      	b.n	8014a78 <_svfprintf_r+0x1448>
 801440a:	a92f      	add	r1, sp, #188	; 0xbc
 801440c:	3c10      	subs	r4, #16
 801440e:	000f      	movs	r7, r1
 8014410:	f7ff fb24 	bl	8013a5c <_svfprintf_r+0x42c>
 8014414:	fffffbff 	.word	0xfffffbff
 8014418:	00007830 	.word	0x00007830
 801441c:	08019a70 	.word	0x08019a70
 8014420:	2010      	movs	r0, #16
 8014422:	1812      	adds	r2, r2, r0
 8014424:	6078      	str	r0, [r7, #4]
 8014426:	922e      	str	r2, [sp, #184]	; 0xb8
 8014428:	932d      	str	r3, [sp, #180]	; 0xb4
 801442a:	2b07      	cmp	r3, #7
 801442c:	dd08      	ble.n	8014440 <_svfprintf_r+0xe10>
 801442e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014432:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014434:	f002 fa50 	bl	80168d8 <__ssprint_r>
 8014438:	2800      	cmp	r0, #0
 801443a:	d000      	beq.n	801443e <_svfprintf_r+0xe0e>
 801443c:	e31c      	b.n	8014a78 <_svfprintf_r+0x1448>
 801443e:	a92f      	add	r1, sp, #188	; 0xbc
 8014440:	3c10      	subs	r4, #16
 8014442:	000f      	movs	r7, r1
 8014444:	f7ff fb2c 	bl	8013aa0 <_svfprintf_r+0x470>
 8014448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801444a:	2b65      	cmp	r3, #101	; 0x65
 801444c:	dc00      	bgt.n	8014450 <_svfprintf_r+0xe20>
 801444e:	e259      	b.n	8014904 <_svfprintf_r+0x12d4>
 8014450:	2200      	movs	r2, #0
 8014452:	2300      	movs	r3, #0
 8014454:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014456:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014458:	f7ec f800 	bl	800045c <__aeabi_dcmpeq>
 801445c:	2800      	cmp	r0, #0
 801445e:	d07c      	beq.n	801455a <_svfprintf_r+0xf2a>
 8014460:	4b81      	ldr	r3, [pc, #516]	; (8014668 <_svfprintf_r+0x1038>)
 8014462:	603b      	str	r3, [r7, #0]
 8014464:	2301      	movs	r3, #1
 8014466:	607b      	str	r3, [r7, #4]
 8014468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801446a:	3708      	adds	r7, #8
 801446c:	3301      	adds	r3, #1
 801446e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014470:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014472:	9308      	str	r3, [sp, #32]
 8014474:	3301      	adds	r3, #1
 8014476:	932d      	str	r3, [sp, #180]	; 0xb4
 8014478:	2b07      	cmp	r3, #7
 801447a:	dd08      	ble.n	801448e <_svfprintf_r+0xe5e>
 801447c:	aa2c      	add	r2, sp, #176	; 0xb0
 801447e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014480:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014482:	f002 fa29 	bl	80168d8 <__ssprint_r>
 8014486:	2800      	cmp	r0, #0
 8014488:	d000      	beq.n	801448c <_svfprintf_r+0xe5c>
 801448a:	e2f5      	b.n	8014a78 <_svfprintf_r+0x1448>
 801448c:	af2f      	add	r7, sp, #188	; 0xbc
 801448e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014492:	4293      	cmp	r3, r2
 8014494:	db01      	blt.n	801449a <_svfprintf_r+0xe6a>
 8014496:	07f3      	lsls	r3, r6, #31
 8014498:	d51d      	bpl.n	80144d6 <_svfprintf_r+0xea6>
 801449a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801449c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801449e:	4694      	mov	ip, r2
 80144a0:	603b      	str	r3, [r7, #0]
 80144a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80144a4:	607b      	str	r3, [r7, #4]
 80144a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144a8:	3708      	adds	r7, #8
 80144aa:	4463      	add	r3, ip
 80144ac:	932e      	str	r3, [sp, #184]	; 0xb8
 80144ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144b0:	9308      	str	r3, [sp, #32]
 80144b2:	3301      	adds	r3, #1
 80144b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80144b6:	2b07      	cmp	r3, #7
 80144b8:	dd08      	ble.n	80144cc <_svfprintf_r+0xe9c>
 80144ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80144bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144c0:	f002 fa0a 	bl	80168d8 <__ssprint_r>
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d000      	beq.n	80144ca <_svfprintf_r+0xe9a>
 80144c8:	e2d6      	b.n	8014a78 <_svfprintf_r+0x1448>
 80144ca:	af2f      	add	r7, sp, #188	; 0xbc
 80144cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ce:	2510      	movs	r5, #16
 80144d0:	1e5c      	subs	r4, r3, #1
 80144d2:	2c00      	cmp	r4, #0
 80144d4:	dc2f      	bgt.n	8014536 <_svfprintf_r+0xf06>
 80144d6:	0773      	lsls	r3, r6, #29
 80144d8:	d500      	bpl.n	80144dc <_svfprintf_r+0xeac>
 80144da:	e2af      	b.n	8014a3c <_svfprintf_r+0x140c>
 80144dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80144de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80144e0:	4293      	cmp	r3, r2
 80144e2:	da00      	bge.n	80144e6 <_svfprintf_r+0xeb6>
 80144e4:	0013      	movs	r3, r2
 80144e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80144e8:	18d3      	adds	r3, r2, r3
 80144ea:	9315      	str	r3, [sp, #84]	; 0x54
 80144ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144ee:	9308      	str	r3, [sp, #32]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d007      	beq.n	8014504 <_svfprintf_r+0xed4>
 80144f4:	aa2c      	add	r2, sp, #176	; 0xb0
 80144f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144fa:	f002 f9ed 	bl	80168d8 <__ssprint_r>
 80144fe:	2800      	cmp	r0, #0
 8014500:	d000      	beq.n	8014504 <_svfprintf_r+0xed4>
 8014502:	e2b9      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014504:	2300      	movs	r3, #0
 8014506:	932d      	str	r3, [sp, #180]	; 0xb4
 8014508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801450a:	2b00      	cmp	r3, #0
 801450c:	d000      	beq.n	8014510 <_svfprintf_r+0xee0>
 801450e:	e2cf      	b.n	8014ab0 <_svfprintf_r+0x1480>
 8014510:	af2f      	add	r7, sp, #188	; 0xbc
 8014512:	e5d6      	b.n	80140c2 <_svfprintf_r+0xa92>
 8014514:	3210      	adds	r2, #16
 8014516:	607d      	str	r5, [r7, #4]
 8014518:	922e      	str	r2, [sp, #184]	; 0xb8
 801451a:	932d      	str	r3, [sp, #180]	; 0xb4
 801451c:	2b07      	cmp	r3, #7
 801451e:	dd08      	ble.n	8014532 <_svfprintf_r+0xf02>
 8014520:	aa2c      	add	r2, sp, #176	; 0xb0
 8014522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014524:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014526:	f002 f9d7 	bl	80168d8 <__ssprint_r>
 801452a:	2800      	cmp	r0, #0
 801452c:	d000      	beq.n	8014530 <_svfprintf_r+0xf00>
 801452e:	e2a3      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014530:	a92f      	add	r1, sp, #188	; 0xbc
 8014532:	000f      	movs	r7, r1
 8014534:	3c10      	subs	r4, #16
 8014536:	0039      	movs	r1, r7
 8014538:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801453a:	484c      	ldr	r0, [pc, #304]	; (801466c <_svfprintf_r+0x103c>)
 801453c:	9308      	str	r3, [sp, #32]
 801453e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014540:	3301      	adds	r3, #1
 8014542:	3108      	adds	r1, #8
 8014544:	6038      	str	r0, [r7, #0]
 8014546:	2c10      	cmp	r4, #16
 8014548:	dce4      	bgt.n	8014514 <_svfprintf_r+0xee4>
 801454a:	607c      	str	r4, [r7, #4]
 801454c:	18a4      	adds	r4, r4, r2
 801454e:	942e      	str	r4, [sp, #184]	; 0xb8
 8014550:	932d      	str	r3, [sp, #180]	; 0xb4
 8014552:	000f      	movs	r7, r1
 8014554:	2b07      	cmp	r3, #7
 8014556:	ddbe      	ble.n	80144d6 <_svfprintf_r+0xea6>
 8014558:	e06a      	b.n	8014630 <_svfprintf_r+0x1000>
 801455a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801455c:	2b00      	cmp	r3, #0
 801455e:	dd00      	ble.n	8014562 <_svfprintf_r+0xf32>
 8014560:	e086      	b.n	8014670 <_svfprintf_r+0x1040>
 8014562:	4b41      	ldr	r3, [pc, #260]	; (8014668 <_svfprintf_r+0x1038>)
 8014564:	603b      	str	r3, [r7, #0]
 8014566:	2301      	movs	r3, #1
 8014568:	607b      	str	r3, [r7, #4]
 801456a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801456c:	3708      	adds	r7, #8
 801456e:	3301      	adds	r3, #1
 8014570:	932e      	str	r3, [sp, #184]	; 0xb8
 8014572:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014574:	9308      	str	r3, [sp, #32]
 8014576:	3301      	adds	r3, #1
 8014578:	932d      	str	r3, [sp, #180]	; 0xb4
 801457a:	2b07      	cmp	r3, #7
 801457c:	dd08      	ble.n	8014590 <_svfprintf_r+0xf60>
 801457e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014582:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014584:	f002 f9a8 	bl	80168d8 <__ssprint_r>
 8014588:	2800      	cmp	r0, #0
 801458a:	d000      	beq.n	801458e <_svfprintf_r+0xf5e>
 801458c:	e274      	b.n	8014a78 <_svfprintf_r+0x1448>
 801458e:	af2f      	add	r7, sp, #188	; 0xbc
 8014590:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014592:	2b00      	cmp	r3, #0
 8014594:	d104      	bne.n	80145a0 <_svfprintf_r+0xf70>
 8014596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <_svfprintf_r+0xf70>
 801459c:	07f3      	lsls	r3, r6, #31
 801459e:	d59a      	bpl.n	80144d6 <_svfprintf_r+0xea6>
 80145a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80145a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80145a4:	4694      	mov	ip, r2
 80145a6:	603b      	str	r3, [r7, #0]
 80145a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80145aa:	607b      	str	r3, [r7, #4]
 80145ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80145ae:	3708      	adds	r7, #8
 80145b0:	4463      	add	r3, ip
 80145b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80145b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145b6:	9308      	str	r3, [sp, #32]
 80145b8:	3301      	adds	r3, #1
 80145ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80145bc:	2b07      	cmp	r3, #7
 80145be:	dd08      	ble.n	80145d2 <_svfprintf_r+0xfa2>
 80145c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80145c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145c6:	f002 f987 	bl	80168d8 <__ssprint_r>
 80145ca:	2800      	cmp	r0, #0
 80145cc:	d000      	beq.n	80145d0 <_svfprintf_r+0xfa0>
 80145ce:	e253      	b.n	8014a78 <_svfprintf_r+0x1448>
 80145d0:	af2f      	add	r7, sp, #188	; 0xbc
 80145d2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80145d4:	2c00      	cmp	r4, #0
 80145d6:	da1a      	bge.n	801460e <_svfprintf_r+0xfde>
 80145d8:	0039      	movs	r1, r7
 80145da:	2510      	movs	r5, #16
 80145dc:	4264      	negs	r4, r4
 80145de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80145e0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80145e2:	9308      	str	r3, [sp, #32]
 80145e4:	1c5a      	adds	r2, r3, #1
 80145e6:	4b21      	ldr	r3, [pc, #132]	; (801466c <_svfprintf_r+0x103c>)
 80145e8:	3708      	adds	r7, #8
 80145ea:	600b      	str	r3, [r1, #0]
 80145ec:	2c10      	cmp	r4, #16
 80145ee:	dc29      	bgt.n	8014644 <_svfprintf_r+0x1014>
 80145f0:	604c      	str	r4, [r1, #4]
 80145f2:	1824      	adds	r4, r4, r0
 80145f4:	942e      	str	r4, [sp, #184]	; 0xb8
 80145f6:	922d      	str	r2, [sp, #180]	; 0xb4
 80145f8:	2a07      	cmp	r2, #7
 80145fa:	dd08      	ble.n	801460e <_svfprintf_r+0xfde>
 80145fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80145fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014600:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014602:	f002 f969 	bl	80168d8 <__ssprint_r>
 8014606:	2800      	cmp	r0, #0
 8014608:	d000      	beq.n	801460c <_svfprintf_r+0xfdc>
 801460a:	e235      	b.n	8014a78 <_svfprintf_r+0x1448>
 801460c:	af2f      	add	r7, sp, #188	; 0xbc
 801460e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014612:	468c      	mov	ip, r1
 8014614:	603b      	str	r3, [r7, #0]
 8014616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014618:	607b      	str	r3, [r7, #4]
 801461a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801461c:	4463      	add	r3, ip
 801461e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014622:	1c5a      	adds	r2, r3, #1
 8014624:	9308      	str	r3, [sp, #32]
 8014626:	922d      	str	r2, [sp, #180]	; 0xb4
 8014628:	2a07      	cmp	r2, #7
 801462a:	dc01      	bgt.n	8014630 <_svfprintf_r+0x1000>
 801462c:	f7ff fa6c 	bl	8013b08 <_svfprintf_r+0x4d8>
 8014630:	aa2c      	add	r2, sp, #176	; 0xb0
 8014632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014634:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014636:	f002 f94f 	bl	80168d8 <__ssprint_r>
 801463a:	2800      	cmp	r0, #0
 801463c:	d000      	beq.n	8014640 <_svfprintf_r+0x1010>
 801463e:	e21b      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014640:	af2f      	add	r7, sp, #188	; 0xbc
 8014642:	e748      	b.n	80144d6 <_svfprintf_r+0xea6>
 8014644:	3010      	adds	r0, #16
 8014646:	604d      	str	r5, [r1, #4]
 8014648:	902e      	str	r0, [sp, #184]	; 0xb8
 801464a:	922d      	str	r2, [sp, #180]	; 0xb4
 801464c:	2a07      	cmp	r2, #7
 801464e:	dd08      	ble.n	8014662 <_svfprintf_r+0x1032>
 8014650:	aa2c      	add	r2, sp, #176	; 0xb0
 8014652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014654:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014656:	f002 f93f 	bl	80168d8 <__ssprint_r>
 801465a:	2800      	cmp	r0, #0
 801465c:	d000      	beq.n	8014660 <_svfprintf_r+0x1030>
 801465e:	e20b      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014660:	af2f      	add	r7, sp, #188	; 0xbc
 8014662:	3c10      	subs	r4, #16
 8014664:	0039      	movs	r1, r7
 8014666:	e7ba      	b.n	80145de <_svfprintf_r+0xfae>
 8014668:	08019a92 	.word	0x08019a92
 801466c:	08019aa4 	.word	0x08019aa4
 8014670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014672:	002c      	movs	r4, r5
 8014674:	429d      	cmp	r5, r3
 8014676:	dd00      	ble.n	801467a <_svfprintf_r+0x104a>
 8014678:	001c      	movs	r4, r3
 801467a:	2c00      	cmp	r4, #0
 801467c:	dd15      	ble.n	80146aa <_svfprintf_r+0x107a>
 801467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014680:	607c      	str	r4, [r7, #4]
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014686:	3708      	adds	r7, #8
 8014688:	18e3      	adds	r3, r4, r3
 801468a:	932e      	str	r3, [sp, #184]	; 0xb8
 801468c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801468e:	9308      	str	r3, [sp, #32]
 8014690:	3301      	adds	r3, #1
 8014692:	932d      	str	r3, [sp, #180]	; 0xb4
 8014694:	2b07      	cmp	r3, #7
 8014696:	dd08      	ble.n	80146aa <_svfprintf_r+0x107a>
 8014698:	aa2c      	add	r2, sp, #176	; 0xb0
 801469a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801469c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801469e:	f002 f91b 	bl	80168d8 <__ssprint_r>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	d000      	beq.n	80146a8 <_svfprintf_r+0x1078>
 80146a6:	e1e7      	b.n	8014a78 <_svfprintf_r+0x1448>
 80146a8:	af2f      	add	r7, sp, #188	; 0xbc
 80146aa:	43e3      	mvns	r3, r4
 80146ac:	17db      	asrs	r3, r3, #31
 80146ae:	401c      	ands	r4, r3
 80146b0:	1b2c      	subs	r4, r5, r4
 80146b2:	2c00      	cmp	r4, #0
 80146b4:	dd1a      	ble.n	80146ec <_svfprintf_r+0x10bc>
 80146b6:	0039      	movs	r1, r7
 80146b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146ba:	48d4      	ldr	r0, [pc, #848]	; (8014a0c <_svfprintf_r+0x13dc>)
 80146bc:	9308      	str	r3, [sp, #32]
 80146be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80146c0:	3301      	adds	r3, #1
 80146c2:	3108      	adds	r1, #8
 80146c4:	6038      	str	r0, [r7, #0]
 80146c6:	2c10      	cmp	r4, #16
 80146c8:	dd00      	ble.n	80146cc <_svfprintf_r+0x109c>
 80146ca:	e089      	b.n	80147e0 <_svfprintf_r+0x11b0>
 80146cc:	607c      	str	r4, [r7, #4]
 80146ce:	18a4      	adds	r4, r4, r2
 80146d0:	942e      	str	r4, [sp, #184]	; 0xb8
 80146d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80146d4:	000f      	movs	r7, r1
 80146d6:	2b07      	cmp	r3, #7
 80146d8:	dd08      	ble.n	80146ec <_svfprintf_r+0x10bc>
 80146da:	aa2c      	add	r2, sp, #176	; 0xb0
 80146dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146e0:	f002 f8fa 	bl	80168d8 <__ssprint_r>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d000      	beq.n	80146ea <_svfprintf_r+0x10ba>
 80146e8:	e1c6      	b.n	8014a78 <_svfprintf_r+0x1448>
 80146ea:	af2f      	add	r7, sp, #188	; 0xbc
 80146ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146ee:	195d      	adds	r5, r3, r5
 80146f0:	0573      	lsls	r3, r6, #21
 80146f2:	d50d      	bpl.n	8014710 <_svfprintf_r+0x10e0>
 80146f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d000      	beq.n	80146fc <_svfprintf_r+0x10cc>
 80146fa:	e084      	b.n	8014806 <_svfprintf_r+0x11d6>
 80146fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d000      	beq.n	8014704 <_svfprintf_r+0x10d4>
 8014702:	e083      	b.n	801480c <_svfprintf_r+0x11dc>
 8014704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014708:	189b      	adds	r3, r3, r2
 801470a:	429d      	cmp	r5, r3
 801470c:	d900      	bls.n	8014710 <_svfprintf_r+0x10e0>
 801470e:	001d      	movs	r5, r3
 8014710:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014714:	4293      	cmp	r3, r2
 8014716:	db01      	blt.n	801471c <_svfprintf_r+0x10ec>
 8014718:	07f3      	lsls	r3, r6, #31
 801471a:	d518      	bpl.n	801474e <_svfprintf_r+0x111e>
 801471c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801471e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014720:	4694      	mov	ip, r2
 8014722:	603b      	str	r3, [r7, #0]
 8014724:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014726:	607b      	str	r3, [r7, #4]
 8014728:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801472a:	3708      	adds	r7, #8
 801472c:	4463      	add	r3, ip
 801472e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014730:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014732:	9308      	str	r3, [sp, #32]
 8014734:	3301      	adds	r3, #1
 8014736:	932d      	str	r3, [sp, #180]	; 0xb4
 8014738:	2b07      	cmp	r3, #7
 801473a:	dd08      	ble.n	801474e <_svfprintf_r+0x111e>
 801473c:	aa2c      	add	r2, sp, #176	; 0xb0
 801473e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014740:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014742:	f002 f8c9 	bl	80168d8 <__ssprint_r>
 8014746:	2800      	cmp	r0, #0
 8014748:	d000      	beq.n	801474c <_svfprintf_r+0x111c>
 801474a:	e195      	b.n	8014a78 <_svfprintf_r+0x1448>
 801474c:	af2f      	add	r7, sp, #188	; 0xbc
 801474e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014752:	4694      	mov	ip, r2
 8014754:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014756:	4463      	add	r3, ip
 8014758:	1b5b      	subs	r3, r3, r5
 801475a:	1a54      	subs	r4, r2, r1
 801475c:	429c      	cmp	r4, r3
 801475e:	dd00      	ble.n	8014762 <_svfprintf_r+0x1132>
 8014760:	001c      	movs	r4, r3
 8014762:	2c00      	cmp	r4, #0
 8014764:	dd14      	ble.n	8014790 <_svfprintf_r+0x1160>
 8014766:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014768:	603d      	str	r5, [r7, #0]
 801476a:	18e3      	adds	r3, r4, r3
 801476c:	932e      	str	r3, [sp, #184]	; 0xb8
 801476e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014770:	607c      	str	r4, [r7, #4]
 8014772:	9308      	str	r3, [sp, #32]
 8014774:	3301      	adds	r3, #1
 8014776:	932d      	str	r3, [sp, #180]	; 0xb4
 8014778:	3708      	adds	r7, #8
 801477a:	2b07      	cmp	r3, #7
 801477c:	dd08      	ble.n	8014790 <_svfprintf_r+0x1160>
 801477e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014782:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014784:	f002 f8a8 	bl	80168d8 <__ssprint_r>
 8014788:	2800      	cmp	r0, #0
 801478a:	d000      	beq.n	801478e <_svfprintf_r+0x115e>
 801478c:	e174      	b.n	8014a78 <_svfprintf_r+0x1448>
 801478e:	af2f      	add	r7, sp, #188	; 0xbc
 8014790:	43e3      	mvns	r3, r4
 8014792:	17db      	asrs	r3, r3, #31
 8014794:	401c      	ands	r4, r3
 8014796:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801479a:	2510      	movs	r5, #16
 801479c:	1a9b      	subs	r3, r3, r2
 801479e:	1b1c      	subs	r4, r3, r4
 80147a0:	2c00      	cmp	r4, #0
 80147a2:	dc00      	bgt.n	80147a6 <_svfprintf_r+0x1176>
 80147a4:	e697      	b.n	80144d6 <_svfprintf_r+0xea6>
 80147a6:	0039      	movs	r1, r7
 80147a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80147aa:	4898      	ldr	r0, [pc, #608]	; (8014a0c <_svfprintf_r+0x13dc>)
 80147ac:	9308      	str	r3, [sp, #32]
 80147ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80147b0:	3301      	adds	r3, #1
 80147b2:	3108      	adds	r1, #8
 80147b4:	6038      	str	r0, [r7, #0]
 80147b6:	2c10      	cmp	r4, #16
 80147b8:	dc00      	bgt.n	80147bc <_svfprintf_r+0x118c>
 80147ba:	e6c6      	b.n	801454a <_svfprintf_r+0xf1a>
 80147bc:	3210      	adds	r2, #16
 80147be:	607d      	str	r5, [r7, #4]
 80147c0:	922e      	str	r2, [sp, #184]	; 0xb8
 80147c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80147c4:	2b07      	cmp	r3, #7
 80147c6:	dd08      	ble.n	80147da <_svfprintf_r+0x11aa>
 80147c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80147ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147ce:	f002 f883 	bl	80168d8 <__ssprint_r>
 80147d2:	2800      	cmp	r0, #0
 80147d4:	d000      	beq.n	80147d8 <_svfprintf_r+0x11a8>
 80147d6:	e14f      	b.n	8014a78 <_svfprintf_r+0x1448>
 80147d8:	a92f      	add	r1, sp, #188	; 0xbc
 80147da:	3c10      	subs	r4, #16
 80147dc:	000f      	movs	r7, r1
 80147de:	e7e2      	b.n	80147a6 <_svfprintf_r+0x1176>
 80147e0:	2010      	movs	r0, #16
 80147e2:	1812      	adds	r2, r2, r0
 80147e4:	6078      	str	r0, [r7, #4]
 80147e6:	922e      	str	r2, [sp, #184]	; 0xb8
 80147e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80147ea:	2b07      	cmp	r3, #7
 80147ec:	dd08      	ble.n	8014800 <_svfprintf_r+0x11d0>
 80147ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80147f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147f4:	f002 f870 	bl	80168d8 <__ssprint_r>
 80147f8:	2800      	cmp	r0, #0
 80147fa:	d000      	beq.n	80147fe <_svfprintf_r+0x11ce>
 80147fc:	e13c      	b.n	8014a78 <_svfprintf_r+0x1448>
 80147fe:	a92f      	add	r1, sp, #188	; 0xbc
 8014800:	3c10      	subs	r4, #16
 8014802:	000f      	movs	r7, r1
 8014804:	e757      	b.n	80146b6 <_svfprintf_r+0x1086>
 8014806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014808:	2b00      	cmp	r3, #0
 801480a:	d061      	beq.n	80148d0 <_svfprintf_r+0x12a0>
 801480c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801480e:	3b01      	subs	r3, #1
 8014810:	9310      	str	r3, [sp, #64]	; 0x40
 8014812:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014814:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014816:	4694      	mov	ip, r2
 8014818:	603b      	str	r3, [r7, #0]
 801481a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801481c:	607b      	str	r3, [r7, #4]
 801481e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014820:	3708      	adds	r7, #8
 8014822:	4463      	add	r3, ip
 8014824:	932e      	str	r3, [sp, #184]	; 0xb8
 8014826:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014828:	9308      	str	r3, [sp, #32]
 801482a:	3301      	adds	r3, #1
 801482c:	932d      	str	r3, [sp, #180]	; 0xb4
 801482e:	2b07      	cmp	r3, #7
 8014830:	dd08      	ble.n	8014844 <_svfprintf_r+0x1214>
 8014832:	aa2c      	add	r2, sp, #176	; 0xb0
 8014834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014836:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014838:	f002 f84e 	bl	80168d8 <__ssprint_r>
 801483c:	2800      	cmp	r0, #0
 801483e:	d000      	beq.n	8014842 <_svfprintf_r+0x1212>
 8014840:	e11a      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014842:	af2f      	add	r7, sp, #188	; 0xbc
 8014844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014848:	189b      	adds	r3, r3, r2
 801484a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801484c:	1b5b      	subs	r3, r3, r5
 801484e:	7814      	ldrb	r4, [r2, #0]
 8014850:	429c      	cmp	r4, r3
 8014852:	dd00      	ble.n	8014856 <_svfprintf_r+0x1226>
 8014854:	001c      	movs	r4, r3
 8014856:	2c00      	cmp	r4, #0
 8014858:	dd14      	ble.n	8014884 <_svfprintf_r+0x1254>
 801485a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801485c:	603d      	str	r5, [r7, #0]
 801485e:	18e3      	adds	r3, r4, r3
 8014860:	932e      	str	r3, [sp, #184]	; 0xb8
 8014862:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014864:	607c      	str	r4, [r7, #4]
 8014866:	9308      	str	r3, [sp, #32]
 8014868:	3301      	adds	r3, #1
 801486a:	932d      	str	r3, [sp, #180]	; 0xb4
 801486c:	3708      	adds	r7, #8
 801486e:	2b07      	cmp	r3, #7
 8014870:	dd08      	ble.n	8014884 <_svfprintf_r+0x1254>
 8014872:	aa2c      	add	r2, sp, #176	; 0xb0
 8014874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014876:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014878:	f002 f82e 	bl	80168d8 <__ssprint_r>
 801487c:	2800      	cmp	r0, #0
 801487e:	d000      	beq.n	8014882 <_svfprintf_r+0x1252>
 8014880:	e0fa      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014882:	af2f      	add	r7, sp, #188	; 0xbc
 8014884:	43e3      	mvns	r3, r4
 8014886:	17db      	asrs	r3, r3, #31
 8014888:	401c      	ands	r4, r3
 801488a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	1b1c      	subs	r4, r3, r4
 8014890:	2c00      	cmp	r4, #0
 8014892:	dd19      	ble.n	80148c8 <_svfprintf_r+0x1298>
 8014894:	0039      	movs	r1, r7
 8014896:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014898:	485c      	ldr	r0, [pc, #368]	; (8014a0c <_svfprintf_r+0x13dc>)
 801489a:	9308      	str	r3, [sp, #32]
 801489c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801489e:	3301      	adds	r3, #1
 80148a0:	3108      	adds	r1, #8
 80148a2:	6038      	str	r0, [r7, #0]
 80148a4:	2c10      	cmp	r4, #16
 80148a6:	dc1a      	bgt.n	80148de <_svfprintf_r+0x12ae>
 80148a8:	607c      	str	r4, [r7, #4]
 80148aa:	18a4      	adds	r4, r4, r2
 80148ac:	942e      	str	r4, [sp, #184]	; 0xb8
 80148ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80148b0:	000f      	movs	r7, r1
 80148b2:	2b07      	cmp	r3, #7
 80148b4:	dd08      	ble.n	80148c8 <_svfprintf_r+0x1298>
 80148b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80148b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148bc:	f002 f80c 	bl	80168d8 <__ssprint_r>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d000      	beq.n	80148c6 <_svfprintf_r+0x1296>
 80148c4:	e0d8      	b.n	8014a78 <_svfprintf_r+0x1448>
 80148c6:	af2f      	add	r7, sp, #188	; 0xbc
 80148c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	18ed      	adds	r5, r5, r3
 80148ce:	e711      	b.n	80146f4 <_svfprintf_r+0x10c4>
 80148d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148d2:	3b01      	subs	r3, #1
 80148d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80148d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148d8:	3b01      	subs	r3, #1
 80148da:	930f      	str	r3, [sp, #60]	; 0x3c
 80148dc:	e799      	b.n	8014812 <_svfprintf_r+0x11e2>
 80148de:	2010      	movs	r0, #16
 80148e0:	1812      	adds	r2, r2, r0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	922e      	str	r2, [sp, #184]	; 0xb8
 80148e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80148e8:	2b07      	cmp	r3, #7
 80148ea:	dd08      	ble.n	80148fe <_svfprintf_r+0x12ce>
 80148ec:	aa2c      	add	r2, sp, #176	; 0xb0
 80148ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148f2:	f001 fff1 	bl	80168d8 <__ssprint_r>
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d000      	beq.n	80148fc <_svfprintf_r+0x12cc>
 80148fa:	e0bd      	b.n	8014a78 <_svfprintf_r+0x1448>
 80148fc:	a92f      	add	r1, sp, #188	; 0xbc
 80148fe:	3c10      	subs	r4, #16
 8014900:	000f      	movs	r7, r1
 8014902:	e7c7      	b.n	8014894 <_svfprintf_r+0x1264>
 8014904:	003c      	movs	r4, r7
 8014906:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014908:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801490a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801490c:	9308      	str	r3, [sp, #32]
 801490e:	3101      	adds	r1, #1
 8014910:	3301      	adds	r3, #1
 8014912:	3408      	adds	r4, #8
 8014914:	2a01      	cmp	r2, #1
 8014916:	dc03      	bgt.n	8014920 <_svfprintf_r+0x12f0>
 8014918:	2201      	movs	r2, #1
 801491a:	4216      	tst	r6, r2
 801491c:	d100      	bne.n	8014920 <_svfprintf_r+0x12f0>
 801491e:	e088      	b.n	8014a32 <_svfprintf_r+0x1402>
 8014920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014922:	912e      	str	r1, [sp, #184]	; 0xb8
 8014924:	603a      	str	r2, [r7, #0]
 8014926:	2201      	movs	r2, #1
 8014928:	932d      	str	r3, [sp, #180]	; 0xb4
 801492a:	607a      	str	r2, [r7, #4]
 801492c:	2b07      	cmp	r3, #7
 801492e:	dd08      	ble.n	8014942 <_svfprintf_r+0x1312>
 8014930:	aa2c      	add	r2, sp, #176	; 0xb0
 8014932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014934:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014936:	f001 ffcf 	bl	80168d8 <__ssprint_r>
 801493a:	2800      	cmp	r0, #0
 801493c:	d000      	beq.n	8014940 <_svfprintf_r+0x1310>
 801493e:	e09b      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014940:	ac2f      	add	r4, sp, #188	; 0xbc
 8014942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014944:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014946:	4694      	mov	ip, r2
 8014948:	6023      	str	r3, [r4, #0]
 801494a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801494c:	6063      	str	r3, [r4, #4]
 801494e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014950:	3408      	adds	r4, #8
 8014952:	4463      	add	r3, ip
 8014954:	932e      	str	r3, [sp, #184]	; 0xb8
 8014956:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014958:	9308      	str	r3, [sp, #32]
 801495a:	3301      	adds	r3, #1
 801495c:	932d      	str	r3, [sp, #180]	; 0xb4
 801495e:	2b07      	cmp	r3, #7
 8014960:	dd08      	ble.n	8014974 <_svfprintf_r+0x1344>
 8014962:	aa2c      	add	r2, sp, #176	; 0xb0
 8014964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014966:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014968:	f001 ffb6 	bl	80168d8 <__ssprint_r>
 801496c:	2800      	cmp	r0, #0
 801496e:	d000      	beq.n	8014972 <_svfprintf_r+0x1342>
 8014970:	e082      	b.n	8014a78 <_svfprintf_r+0x1448>
 8014972:	ac2f      	add	r4, sp, #188	; 0xbc
 8014974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014976:	2200      	movs	r2, #0
 8014978:	1e5d      	subs	r5, r3, #1
 801497a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801497c:	2300      	movs	r3, #0
 801497e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014980:	f7eb fd6c 	bl	800045c <__aeabi_dcmpeq>
 8014984:	2800      	cmp	r0, #0
 8014986:	d12c      	bne.n	80149e2 <_svfprintf_r+0x13b2>
 8014988:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801498a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801498c:	9308      	str	r3, [sp, #32]
 801498e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014990:	6065      	str	r5, [r4, #4]
 8014992:	1c5a      	adds	r2, r3, #1
 8014994:	930e      	str	r3, [sp, #56]	; 0x38
 8014996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014998:	922d      	str	r2, [sp, #180]	; 0xb4
 801499a:	3301      	adds	r3, #1
 801499c:	6023      	str	r3, [r4, #0]
 801499e:	9b08      	ldr	r3, [sp, #32]
 80149a0:	3408      	adds	r4, #8
 80149a2:	3b01      	subs	r3, #1
 80149a4:	185b      	adds	r3, r3, r1
 80149a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80149a8:	2a07      	cmp	r2, #7
 80149aa:	dd07      	ble.n	80149bc <_svfprintf_r+0x138c>
 80149ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80149ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149b2:	f001 ff91 	bl	80168d8 <__ssprint_r>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d15e      	bne.n	8014a78 <_svfprintf_r+0x1448>
 80149ba:	ac2f      	add	r4, sp, #188	; 0xbc
 80149bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80149be:	ab28      	add	r3, sp, #160	; 0xa0
 80149c0:	4694      	mov	ip, r2
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80149c6:	6063      	str	r3, [r4, #4]
 80149c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80149ca:	4463      	add	r3, ip
 80149cc:	932e      	str	r3, [sp, #184]	; 0xb8
 80149ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149d0:	9308      	str	r3, [sp, #32]
 80149d2:	3301      	adds	r3, #1
 80149d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80149d6:	2b07      	cmp	r3, #7
 80149d8:	dd00      	ble.n	80149dc <_svfprintf_r+0x13ac>
 80149da:	e629      	b.n	8014630 <_svfprintf_r+0x1000>
 80149dc:	3408      	adds	r4, #8
 80149de:	0027      	movs	r7, r4
 80149e0:	e579      	b.n	80144d6 <_svfprintf_r+0xea6>
 80149e2:	2710      	movs	r7, #16
 80149e4:	2d00      	cmp	r5, #0
 80149e6:	dde9      	ble.n	80149bc <_svfprintf_r+0x138c>
 80149e8:	0021      	movs	r1, r4
 80149ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80149ec:	4807      	ldr	r0, [pc, #28]	; (8014a0c <_svfprintf_r+0x13dc>)
 80149ee:	9308      	str	r3, [sp, #32]
 80149f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80149f2:	3301      	adds	r3, #1
 80149f4:	3108      	adds	r1, #8
 80149f6:	6020      	str	r0, [r4, #0]
 80149f8:	2d10      	cmp	r5, #16
 80149fa:	dc09      	bgt.n	8014a10 <_svfprintf_r+0x13e0>
 80149fc:	6065      	str	r5, [r4, #4]
 80149fe:	000c      	movs	r4, r1
 8014a00:	18ad      	adds	r5, r5, r2
 8014a02:	952e      	str	r5, [sp, #184]	; 0xb8
 8014a04:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a06:	2b07      	cmp	r3, #7
 8014a08:	ddd8      	ble.n	80149bc <_svfprintf_r+0x138c>
 8014a0a:	e7cf      	b.n	80149ac <_svfprintf_r+0x137c>
 8014a0c:	08019aa4 	.word	0x08019aa4
 8014a10:	3210      	adds	r2, #16
 8014a12:	6067      	str	r7, [r4, #4]
 8014a14:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a16:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a18:	2b07      	cmp	r3, #7
 8014a1a:	dd07      	ble.n	8014a2c <_svfprintf_r+0x13fc>
 8014a1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a22:	f001 ff59 	bl	80168d8 <__ssprint_r>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d126      	bne.n	8014a78 <_svfprintf_r+0x1448>
 8014a2a:	a92f      	add	r1, sp, #188	; 0xbc
 8014a2c:	3d10      	subs	r5, #16
 8014a2e:	000c      	movs	r4, r1
 8014a30:	e7da      	b.n	80149e8 <_svfprintf_r+0x13b8>
 8014a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a34:	912e      	str	r1, [sp, #184]	; 0xb8
 8014a36:	c705      	stmia	r7!, {r0, r2}
 8014a38:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a3a:	e7e4      	b.n	8014a06 <_svfprintf_r+0x13d6>
 8014a3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014a3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a40:	2510      	movs	r5, #16
 8014a42:	1a9c      	subs	r4, r3, r2
 8014a44:	2c00      	cmp	r4, #0
 8014a46:	dc00      	bgt.n	8014a4a <_svfprintf_r+0x141a>
 8014a48:	e548      	b.n	80144dc <_svfprintf_r+0xeac>
 8014a4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014a4c:	4921      	ldr	r1, [pc, #132]	; (8014ad4 <_svfprintf_r+0x14a4>)
 8014a4e:	9308      	str	r3, [sp, #32]
 8014a50:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014a52:	3301      	adds	r3, #1
 8014a54:	6039      	str	r1, [r7, #0]
 8014a56:	2c10      	cmp	r4, #16
 8014a58:	dc19      	bgt.n	8014a8e <_svfprintf_r+0x145e>
 8014a5a:	607c      	str	r4, [r7, #4]
 8014a5c:	18a4      	adds	r4, r4, r2
 8014a5e:	942e      	str	r4, [sp, #184]	; 0xb8
 8014a60:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a62:	2b07      	cmp	r3, #7
 8014a64:	dc00      	bgt.n	8014a68 <_svfprintf_r+0x1438>
 8014a66:	e539      	b.n	80144dc <_svfprintf_r+0xeac>
 8014a68:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a6e:	f001 ff33 	bl	80168d8 <__ssprint_r>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	d100      	bne.n	8014a78 <_svfprintf_r+0x1448>
 8014a76:	e531      	b.n	80144dc <_svfprintf_r+0xeac>
 8014a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d101      	bne.n	8014a82 <_svfprintf_r+0x1452>
 8014a7e:	f7ff f908 	bl	8013c92 <_svfprintf_r+0x662>
 8014a82:	0019      	movs	r1, r3
 8014a84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a86:	f000 ff19 	bl	80158bc <_free_r>
 8014a8a:	f7ff f902 	bl	8013c92 <_svfprintf_r+0x662>
 8014a8e:	3210      	adds	r2, #16
 8014a90:	607d      	str	r5, [r7, #4]
 8014a92:	922e      	str	r2, [sp, #184]	; 0xb8
 8014a94:	932d      	str	r3, [sp, #180]	; 0xb4
 8014a96:	3708      	adds	r7, #8
 8014a98:	2b07      	cmp	r3, #7
 8014a9a:	dd07      	ble.n	8014aac <_svfprintf_r+0x147c>
 8014a9c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014aa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014aa2:	f001 ff19 	bl	80168d8 <__ssprint_r>
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	d1e6      	bne.n	8014a78 <_svfprintf_r+0x1448>
 8014aaa:	af2f      	add	r7, sp, #188	; 0xbc
 8014aac:	3c10      	subs	r4, #16
 8014aae:	e7cc      	b.n	8014a4a <_svfprintf_r+0x141a>
 8014ab0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ab4:	f000 ff02 	bl	80158bc <_free_r>
 8014ab8:	e52a      	b.n	8014510 <_svfprintf_r+0xee0>
 8014aba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014abc:	9306      	str	r3, [sp, #24]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d101      	bne.n	8014ac6 <_svfprintf_r+0x1496>
 8014ac2:	f7ff f8e6 	bl	8013c92 <_svfprintf_r+0x662>
 8014ac6:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014aca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014acc:	f001 ff04 	bl	80168d8 <__ssprint_r>
 8014ad0:	f7ff f8df 	bl	8013c92 <_svfprintf_r+0x662>
 8014ad4:	08019a94 	.word	0x08019a94

08014ad8 <sysconf>:
 8014ad8:	2380      	movs	r3, #128	; 0x80
 8014ada:	b510      	push	{r4, lr}
 8014adc:	015b      	lsls	r3, r3, #5
 8014ade:	2808      	cmp	r0, #8
 8014ae0:	d004      	beq.n	8014aec <sysconf+0x14>
 8014ae2:	f000 fe7d 	bl	80157e0 <__errno>
 8014ae6:	2316      	movs	r3, #22
 8014ae8:	6003      	str	r3, [r0, #0]
 8014aea:	3b17      	subs	r3, #23
 8014aec:	0018      	movs	r0, r3
 8014aee:	bd10      	pop	{r4, pc}

08014af0 <__ascii_wctomb>:
 8014af0:	1e0b      	subs	r3, r1, #0
 8014af2:	d004      	beq.n	8014afe <__ascii_wctomb+0xe>
 8014af4:	2aff      	cmp	r2, #255	; 0xff
 8014af6:	d904      	bls.n	8014b02 <__ascii_wctomb+0x12>
 8014af8:	238a      	movs	r3, #138	; 0x8a
 8014afa:	6003      	str	r3, [r0, #0]
 8014afc:	3b8b      	subs	r3, #139	; 0x8b
 8014afe:	0018      	movs	r0, r3
 8014b00:	4770      	bx	lr
 8014b02:	700a      	strb	r2, [r1, #0]
 8014b04:	2301      	movs	r3, #1
 8014b06:	e7fa      	b.n	8014afe <__ascii_wctomb+0xe>

08014b08 <register_fini>:
 8014b08:	4b03      	ldr	r3, [pc, #12]	; (8014b18 <register_fini+0x10>)
 8014b0a:	b510      	push	{r4, lr}
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d002      	beq.n	8014b16 <register_fini+0xe>
 8014b10:	4802      	ldr	r0, [pc, #8]	; (8014b1c <register_fini+0x14>)
 8014b12:	f000 f805 	bl	8014b20 <atexit>
 8014b16:	bd10      	pop	{r4, pc}
 8014b18:	00000000 	.word	0x00000000
 8014b1c:	080157ed 	.word	0x080157ed

08014b20 <atexit>:
 8014b20:	2300      	movs	r3, #0
 8014b22:	b510      	push	{r4, lr}
 8014b24:	0001      	movs	r1, r0
 8014b26:	001a      	movs	r2, r3
 8014b28:	0018      	movs	r0, r3
 8014b2a:	f001 ff53 	bl	80169d4 <__register_exitproc>
 8014b2e:	bd10      	pop	{r4, pc}

08014b30 <quorem>:
 8014b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b32:	6903      	ldr	r3, [r0, #16]
 8014b34:	690c      	ldr	r4, [r1, #16]
 8014b36:	b089      	sub	sp, #36	; 0x24
 8014b38:	0007      	movs	r7, r0
 8014b3a:	9105      	str	r1, [sp, #20]
 8014b3c:	2600      	movs	r6, #0
 8014b3e:	42a3      	cmp	r3, r4
 8014b40:	db65      	blt.n	8014c0e <quorem+0xde>
 8014b42:	000b      	movs	r3, r1
 8014b44:	3c01      	subs	r4, #1
 8014b46:	3314      	adds	r3, #20
 8014b48:	00a5      	lsls	r5, r4, #2
 8014b4a:	9303      	str	r3, [sp, #12]
 8014b4c:	195b      	adds	r3, r3, r5
 8014b4e:	9304      	str	r3, [sp, #16]
 8014b50:	0003      	movs	r3, r0
 8014b52:	3314      	adds	r3, #20
 8014b54:	9302      	str	r3, [sp, #8]
 8014b56:	195d      	adds	r5, r3, r5
 8014b58:	9b04      	ldr	r3, [sp, #16]
 8014b5a:	6828      	ldr	r0, [r5, #0]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	1c59      	adds	r1, r3, #1
 8014b60:	9301      	str	r3, [sp, #4]
 8014b62:	f7eb faf5 	bl	8000150 <__udivsi3>
 8014b66:	9001      	str	r0, [sp, #4]
 8014b68:	42b0      	cmp	r0, r6
 8014b6a:	d029      	beq.n	8014bc0 <quorem+0x90>
 8014b6c:	9b03      	ldr	r3, [sp, #12]
 8014b6e:	9802      	ldr	r0, [sp, #8]
 8014b70:	469c      	mov	ip, r3
 8014b72:	9606      	str	r6, [sp, #24]
 8014b74:	4662      	mov	r2, ip
 8014b76:	ca08      	ldmia	r2!, {r3}
 8014b78:	4694      	mov	ip, r2
 8014b7a:	9a01      	ldr	r2, [sp, #4]
 8014b7c:	b299      	uxth	r1, r3
 8014b7e:	4351      	muls	r1, r2
 8014b80:	0c1b      	lsrs	r3, r3, #16
 8014b82:	4353      	muls	r3, r2
 8014b84:	1989      	adds	r1, r1, r6
 8014b86:	0c0a      	lsrs	r2, r1, #16
 8014b88:	189b      	adds	r3, r3, r2
 8014b8a:	9307      	str	r3, [sp, #28]
 8014b8c:	0c1e      	lsrs	r6, r3, #16
 8014b8e:	6803      	ldr	r3, [r0, #0]
 8014b90:	b289      	uxth	r1, r1
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	9b06      	ldr	r3, [sp, #24]
 8014b96:	18d2      	adds	r2, r2, r3
 8014b98:	6803      	ldr	r3, [r0, #0]
 8014b9a:	1a52      	subs	r2, r2, r1
 8014b9c:	0c19      	lsrs	r1, r3, #16
 8014b9e:	466b      	mov	r3, sp
 8014ba0:	8b9b      	ldrh	r3, [r3, #28]
 8014ba2:	1acb      	subs	r3, r1, r3
 8014ba4:	1411      	asrs	r1, r2, #16
 8014ba6:	185b      	adds	r3, r3, r1
 8014ba8:	1419      	asrs	r1, r3, #16
 8014baa:	b292      	uxth	r2, r2
 8014bac:	041b      	lsls	r3, r3, #16
 8014bae:	431a      	orrs	r2, r3
 8014bb0:	9b04      	ldr	r3, [sp, #16]
 8014bb2:	9106      	str	r1, [sp, #24]
 8014bb4:	c004      	stmia	r0!, {r2}
 8014bb6:	4563      	cmp	r3, ip
 8014bb8:	d2dc      	bcs.n	8014b74 <quorem+0x44>
 8014bba:	682b      	ldr	r3, [r5, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d02d      	beq.n	8014c1c <quorem+0xec>
 8014bc0:	9905      	ldr	r1, [sp, #20]
 8014bc2:	0038      	movs	r0, r7
 8014bc4:	f001 fcb2 	bl	801652c <__mcmp>
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	db1f      	blt.n	8014c0c <quorem+0xdc>
 8014bcc:	2500      	movs	r5, #0
 8014bce:	9b01      	ldr	r3, [sp, #4]
 8014bd0:	9802      	ldr	r0, [sp, #8]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	9903      	ldr	r1, [sp, #12]
 8014bd6:	9301      	str	r3, [sp, #4]
 8014bd8:	6802      	ldr	r2, [r0, #0]
 8014bda:	c908      	ldmia	r1!, {r3}
 8014bdc:	b292      	uxth	r2, r2
 8014bde:	1955      	adds	r5, r2, r5
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	1aaa      	subs	r2, r5, r2
 8014be4:	6805      	ldr	r5, [r0, #0]
 8014be6:	0c1b      	lsrs	r3, r3, #16
 8014be8:	0c2d      	lsrs	r5, r5, #16
 8014bea:	1aeb      	subs	r3, r5, r3
 8014bec:	1415      	asrs	r5, r2, #16
 8014bee:	195b      	adds	r3, r3, r5
 8014bf0:	141d      	asrs	r5, r3, #16
 8014bf2:	b292      	uxth	r2, r2
 8014bf4:	041b      	lsls	r3, r3, #16
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	c008      	stmia	r0!, {r3}
 8014bfa:	9b04      	ldr	r3, [sp, #16]
 8014bfc:	428b      	cmp	r3, r1
 8014bfe:	d2eb      	bcs.n	8014bd8 <quorem+0xa8>
 8014c00:	9a02      	ldr	r2, [sp, #8]
 8014c02:	00a3      	lsls	r3, r4, #2
 8014c04:	18d3      	adds	r3, r2, r3
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	2a00      	cmp	r2, #0
 8014c0a:	d011      	beq.n	8014c30 <quorem+0x100>
 8014c0c:	9e01      	ldr	r6, [sp, #4]
 8014c0e:	0030      	movs	r0, r6
 8014c10:	b009      	add	sp, #36	; 0x24
 8014c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c14:	682b      	ldr	r3, [r5, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d104      	bne.n	8014c24 <quorem+0xf4>
 8014c1a:	3c01      	subs	r4, #1
 8014c1c:	9b02      	ldr	r3, [sp, #8]
 8014c1e:	3d04      	subs	r5, #4
 8014c20:	42ab      	cmp	r3, r5
 8014c22:	d3f7      	bcc.n	8014c14 <quorem+0xe4>
 8014c24:	613c      	str	r4, [r7, #16]
 8014c26:	e7cb      	b.n	8014bc0 <quorem+0x90>
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	2a00      	cmp	r2, #0
 8014c2c:	d104      	bne.n	8014c38 <quorem+0x108>
 8014c2e:	3c01      	subs	r4, #1
 8014c30:	9a02      	ldr	r2, [sp, #8]
 8014c32:	3b04      	subs	r3, #4
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d3f7      	bcc.n	8014c28 <quorem+0xf8>
 8014c38:	613c      	str	r4, [r7, #16]
 8014c3a:	e7e7      	b.n	8014c0c <quorem+0xdc>

08014c3c <_dtoa_r>:
 8014c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3e:	0014      	movs	r4, r2
 8014c40:	001d      	movs	r5, r3
 8014c42:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014c44:	b09b      	sub	sp, #108	; 0x6c
 8014c46:	9002      	str	r0, [sp, #8]
 8014c48:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8014c4a:	9406      	str	r4, [sp, #24]
 8014c4c:	9507      	str	r5, [sp, #28]
 8014c4e:	2900      	cmp	r1, #0
 8014c50:	d009      	beq.n	8014c66 <_dtoa_r+0x2a>
 8014c52:	2301      	movs	r3, #1
 8014c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c56:	4093      	lsls	r3, r2
 8014c58:	604a      	str	r2, [r1, #4]
 8014c5a:	608b      	str	r3, [r1, #8]
 8014c5c:	f001 fa6a 	bl	8016134 <_Bfree>
 8014c60:	2300      	movs	r3, #0
 8014c62:	9a02      	ldr	r2, [sp, #8]
 8014c64:	6413      	str	r3, [r2, #64]	; 0x40
 8014c66:	2d00      	cmp	r5, #0
 8014c68:	da20      	bge.n	8014cac <_dtoa_r+0x70>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	6033      	str	r3, [r6, #0]
 8014c6e:	006b      	lsls	r3, r5, #1
 8014c70:	085b      	lsrs	r3, r3, #1
 8014c72:	9307      	str	r3, [sp, #28]
 8014c74:	9c07      	ldr	r4, [sp, #28]
 8014c76:	4bb2      	ldr	r3, [pc, #712]	; (8014f40 <_dtoa_r+0x304>)
 8014c78:	0022      	movs	r2, r4
 8014c7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c7c:	401a      	ands	r2, r3
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d117      	bne.n	8014cb2 <_dtoa_r+0x76>
 8014c82:	4bb0      	ldr	r3, [pc, #704]	; (8014f44 <_dtoa_r+0x308>)
 8014c84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014c86:	6013      	str	r3, [r2, #0]
 8014c88:	9b06      	ldr	r3, [sp, #24]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d103      	bne.n	8014c96 <_dtoa_r+0x5a>
 8014c8e:	0324      	lsls	r4, r4, #12
 8014c90:	d101      	bne.n	8014c96 <_dtoa_r+0x5a>
 8014c92:	f000 fd89 	bl	80157a8 <_dtoa_r+0xb6c>
 8014c96:	4bac      	ldr	r3, [pc, #688]	; (8014f48 <_dtoa_r+0x30c>)
 8014c98:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014c9a:	9308      	str	r3, [sp, #32]
 8014c9c:	2a00      	cmp	r2, #0
 8014c9e:	d002      	beq.n	8014ca6 <_dtoa_r+0x6a>
 8014ca0:	4baa      	ldr	r3, [pc, #680]	; (8014f4c <_dtoa_r+0x310>)
 8014ca2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014ca4:	6013      	str	r3, [r2, #0]
 8014ca6:	9808      	ldr	r0, [sp, #32]
 8014ca8:	b01b      	add	sp, #108	; 0x6c
 8014caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cac:	2300      	movs	r3, #0
 8014cae:	6033      	str	r3, [r6, #0]
 8014cb0:	e7e0      	b.n	8014c74 <_dtoa_r+0x38>
 8014cb2:	9e06      	ldr	r6, [sp, #24]
 8014cb4:	9f07      	ldr	r7, [sp, #28]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	2300      	movs	r3, #0
 8014cba:	0030      	movs	r0, r6
 8014cbc:	0039      	movs	r1, r7
 8014cbe:	f7eb fbcd 	bl	800045c <__aeabi_dcmpeq>
 8014cc2:	1e05      	subs	r5, r0, #0
 8014cc4:	d00b      	beq.n	8014cde <_dtoa_r+0xa2>
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014cca:	6013      	str	r3, [r2, #0]
 8014ccc:	4ba0      	ldr	r3, [pc, #640]	; (8014f50 <_dtoa_r+0x314>)
 8014cce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014cd0:	9308      	str	r3, [sp, #32]
 8014cd2:	2a00      	cmp	r2, #0
 8014cd4:	d0e7      	beq.n	8014ca6 <_dtoa_r+0x6a>
 8014cd6:	4a9f      	ldr	r2, [pc, #636]	; (8014f54 <_dtoa_r+0x318>)
 8014cd8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014cda:	600a      	str	r2, [r1, #0]
 8014cdc:	e7e3      	b.n	8014ca6 <_dtoa_r+0x6a>
 8014cde:	ab18      	add	r3, sp, #96	; 0x60
 8014ce0:	9301      	str	r3, [sp, #4]
 8014ce2:	ab19      	add	r3, sp, #100	; 0x64
 8014ce4:	9300      	str	r3, [sp, #0]
 8014ce6:	0032      	movs	r2, r6
 8014ce8:	003b      	movs	r3, r7
 8014cea:	9802      	ldr	r0, [sp, #8]
 8014cec:	f001 fd0e 	bl	801670c <__d2b>
 8014cf0:	0063      	lsls	r3, r4, #1
 8014cf2:	9003      	str	r0, [sp, #12]
 8014cf4:	0d5b      	lsrs	r3, r3, #21
 8014cf6:	d074      	beq.n	8014de2 <_dtoa_r+0x1a6>
 8014cf8:	033a      	lsls	r2, r7, #12
 8014cfa:	4c97      	ldr	r4, [pc, #604]	; (8014f58 <_dtoa_r+0x31c>)
 8014cfc:	0b12      	lsrs	r2, r2, #12
 8014cfe:	4314      	orrs	r4, r2
 8014d00:	0021      	movs	r1, r4
 8014d02:	4a96      	ldr	r2, [pc, #600]	; (8014f5c <_dtoa_r+0x320>)
 8014d04:	0030      	movs	r0, r6
 8014d06:	9516      	str	r5, [sp, #88]	; 0x58
 8014d08:	189e      	adds	r6, r3, r2
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	4b94      	ldr	r3, [pc, #592]	; (8014f60 <_dtoa_r+0x324>)
 8014d0e:	f7ed fb03 	bl	8002318 <__aeabi_dsub>
 8014d12:	4a94      	ldr	r2, [pc, #592]	; (8014f64 <_dtoa_r+0x328>)
 8014d14:	4b94      	ldr	r3, [pc, #592]	; (8014f68 <_dtoa_r+0x32c>)
 8014d16:	f7ed f88d 	bl	8001e34 <__aeabi_dmul>
 8014d1a:	4a94      	ldr	r2, [pc, #592]	; (8014f6c <_dtoa_r+0x330>)
 8014d1c:	4b94      	ldr	r3, [pc, #592]	; (8014f70 <_dtoa_r+0x334>)
 8014d1e:	f7ec f963 	bl	8000fe8 <__aeabi_dadd>
 8014d22:	0004      	movs	r4, r0
 8014d24:	0030      	movs	r0, r6
 8014d26:	000d      	movs	r5, r1
 8014d28:	f7ed fe90 	bl	8002a4c <__aeabi_i2d>
 8014d2c:	4a91      	ldr	r2, [pc, #580]	; (8014f74 <_dtoa_r+0x338>)
 8014d2e:	4b92      	ldr	r3, [pc, #584]	; (8014f78 <_dtoa_r+0x33c>)
 8014d30:	f7ed f880 	bl	8001e34 <__aeabi_dmul>
 8014d34:	0002      	movs	r2, r0
 8014d36:	000b      	movs	r3, r1
 8014d38:	0020      	movs	r0, r4
 8014d3a:	0029      	movs	r1, r5
 8014d3c:	f7ec f954 	bl	8000fe8 <__aeabi_dadd>
 8014d40:	0004      	movs	r4, r0
 8014d42:	000d      	movs	r5, r1
 8014d44:	f7ed fe4c 	bl	80029e0 <__aeabi_d2iz>
 8014d48:	2200      	movs	r2, #0
 8014d4a:	0007      	movs	r7, r0
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	0020      	movs	r0, r4
 8014d50:	0029      	movs	r1, r5
 8014d52:	f7eb fb89 	bl	8000468 <__aeabi_dcmplt>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d009      	beq.n	8014d6e <_dtoa_r+0x132>
 8014d5a:	0038      	movs	r0, r7
 8014d5c:	f7ed fe76 	bl	8002a4c <__aeabi_i2d>
 8014d60:	002b      	movs	r3, r5
 8014d62:	0022      	movs	r2, r4
 8014d64:	f7eb fb7a 	bl	800045c <__aeabi_dcmpeq>
 8014d68:	4243      	negs	r3, r0
 8014d6a:	4158      	adcs	r0, r3
 8014d6c:	1a3f      	subs	r7, r7, r0
 8014d6e:	2301      	movs	r3, #1
 8014d70:	9314      	str	r3, [sp, #80]	; 0x50
 8014d72:	2f16      	cmp	r7, #22
 8014d74:	d80d      	bhi.n	8014d92 <_dtoa_r+0x156>
 8014d76:	4981      	ldr	r1, [pc, #516]	; (8014f7c <_dtoa_r+0x340>)
 8014d78:	00fb      	lsls	r3, r7, #3
 8014d7a:	18c9      	adds	r1, r1, r3
 8014d7c:	6808      	ldr	r0, [r1, #0]
 8014d7e:	6849      	ldr	r1, [r1, #4]
 8014d80:	9a06      	ldr	r2, [sp, #24]
 8014d82:	9b07      	ldr	r3, [sp, #28]
 8014d84:	f7eb fb84 	bl	8000490 <__aeabi_dcmpgt>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d046      	beq.n	8014e1a <_dtoa_r+0x1de>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	3f01      	subs	r7, #1
 8014d90:	9314      	str	r3, [sp, #80]	; 0x50
 8014d92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014d94:	1b9e      	subs	r6, r3, r6
 8014d96:	2300      	movs	r3, #0
 8014d98:	930a      	str	r3, [sp, #40]	; 0x28
 8014d9a:	0033      	movs	r3, r6
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014da0:	d504      	bpl.n	8014dac <_dtoa_r+0x170>
 8014da2:	2301      	movs	r3, #1
 8014da4:	1b9b      	subs	r3, r3, r6
 8014da6:	930a      	str	r3, [sp, #40]	; 0x28
 8014da8:	2300      	movs	r3, #0
 8014daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8014dac:	2f00      	cmp	r7, #0
 8014dae:	db36      	blt.n	8014e1e <_dtoa_r+0x1e2>
 8014db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014db2:	9711      	str	r7, [sp, #68]	; 0x44
 8014db4:	19db      	adds	r3, r3, r7
 8014db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014db8:	2300      	movs	r3, #0
 8014dba:	9304      	str	r3, [sp, #16]
 8014dbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014dbe:	2401      	movs	r4, #1
 8014dc0:	2b09      	cmp	r3, #9
 8014dc2:	d900      	bls.n	8014dc6 <_dtoa_r+0x18a>
 8014dc4:	e082      	b.n	8014ecc <_dtoa_r+0x290>
 8014dc6:	2b05      	cmp	r3, #5
 8014dc8:	dd02      	ble.n	8014dd0 <_dtoa_r+0x194>
 8014dca:	2400      	movs	r4, #0
 8014dcc:	3b04      	subs	r3, #4
 8014dce:	9320      	str	r3, [sp, #128]	; 0x80
 8014dd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014dd2:	1e98      	subs	r0, r3, #2
 8014dd4:	2803      	cmp	r0, #3
 8014dd6:	d900      	bls.n	8014dda <_dtoa_r+0x19e>
 8014dd8:	e082      	b.n	8014ee0 <_dtoa_r+0x2a4>
 8014dda:	f7eb f9a5 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014dde:	7573      	.short	0x7573
 8014de0:	6828      	.short	0x6828
 8014de2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014de4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014de6:	189e      	adds	r6, r3, r2
 8014de8:	4b65      	ldr	r3, [pc, #404]	; (8014f80 <_dtoa_r+0x344>)
 8014dea:	18f2      	adds	r2, r6, r3
 8014dec:	2a20      	cmp	r2, #32
 8014dee:	dd0f      	ble.n	8014e10 <_dtoa_r+0x1d4>
 8014df0:	2340      	movs	r3, #64	; 0x40
 8014df2:	1a9b      	subs	r3, r3, r2
 8014df4:	409c      	lsls	r4, r3
 8014df6:	4b63      	ldr	r3, [pc, #396]	; (8014f84 <_dtoa_r+0x348>)
 8014df8:	9806      	ldr	r0, [sp, #24]
 8014dfa:	18f3      	adds	r3, r6, r3
 8014dfc:	40d8      	lsrs	r0, r3
 8014dfe:	4320      	orrs	r0, r4
 8014e00:	f7ed fe5e 	bl	8002ac0 <__aeabi_ui2d>
 8014e04:	2301      	movs	r3, #1
 8014e06:	4c60      	ldr	r4, [pc, #384]	; (8014f88 <_dtoa_r+0x34c>)
 8014e08:	3e01      	subs	r6, #1
 8014e0a:	1909      	adds	r1, r1, r4
 8014e0c:	9316      	str	r3, [sp, #88]	; 0x58
 8014e0e:	e77c      	b.n	8014d0a <_dtoa_r+0xce>
 8014e10:	2320      	movs	r3, #32
 8014e12:	9806      	ldr	r0, [sp, #24]
 8014e14:	1a9b      	subs	r3, r3, r2
 8014e16:	4098      	lsls	r0, r3
 8014e18:	e7f2      	b.n	8014e00 <_dtoa_r+0x1c4>
 8014e1a:	9014      	str	r0, [sp, #80]	; 0x50
 8014e1c:	e7b9      	b.n	8014d92 <_dtoa_r+0x156>
 8014e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e20:	1bdb      	subs	r3, r3, r7
 8014e22:	930a      	str	r3, [sp, #40]	; 0x28
 8014e24:	427b      	negs	r3, r7
 8014e26:	9304      	str	r3, [sp, #16]
 8014e28:	2300      	movs	r3, #0
 8014e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8014e2c:	e7c6      	b.n	8014dbc <_dtoa_r+0x180>
 8014e2e:	2301      	movs	r3, #1
 8014e30:	930d      	str	r3, [sp, #52]	; 0x34
 8014e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	dd57      	ble.n	8014ee8 <_dtoa_r+0x2ac>
 8014e38:	930c      	str	r3, [sp, #48]	; 0x30
 8014e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	9902      	ldr	r1, [sp, #8]
 8014e40:	644a      	str	r2, [r1, #68]	; 0x44
 8014e42:	3204      	adds	r2, #4
 8014e44:	0010      	movs	r0, r2
 8014e46:	9902      	ldr	r1, [sp, #8]
 8014e48:	3014      	adds	r0, #20
 8014e4a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8014e4c:	4298      	cmp	r0, r3
 8014e4e:	d950      	bls.n	8014ef2 <_dtoa_r+0x2b6>
 8014e50:	9802      	ldr	r0, [sp, #8]
 8014e52:	f001 f947 	bl	80160e4 <_Balloc>
 8014e56:	9b02      	ldr	r3, [sp, #8]
 8014e58:	9008      	str	r0, [sp, #32]
 8014e5a:	6418      	str	r0, [r3, #64]	; 0x40
 8014e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e5e:	2b0e      	cmp	r3, #14
 8014e60:	d900      	bls.n	8014e64 <_dtoa_r+0x228>
 8014e62:	e10c      	b.n	801507e <_dtoa_r+0x442>
 8014e64:	2c00      	cmp	r4, #0
 8014e66:	d100      	bne.n	8014e6a <_dtoa_r+0x22e>
 8014e68:	e109      	b.n	801507e <_dtoa_r+0x442>
 8014e6a:	9b06      	ldr	r3, [sp, #24]
 8014e6c:	9c07      	ldr	r4, [sp, #28]
 8014e6e:	9312      	str	r3, [sp, #72]	; 0x48
 8014e70:	9413      	str	r4, [sp, #76]	; 0x4c
 8014e72:	2f00      	cmp	r7, #0
 8014e74:	dc00      	bgt.n	8014e78 <_dtoa_r+0x23c>
 8014e76:	e08b      	b.n	8014f90 <_dtoa_r+0x354>
 8014e78:	210f      	movs	r1, #15
 8014e7a:	003a      	movs	r2, r7
 8014e7c:	4b3f      	ldr	r3, [pc, #252]	; (8014f7c <_dtoa_r+0x340>)
 8014e7e:	400a      	ands	r2, r1
 8014e80:	00d2      	lsls	r2, r2, #3
 8014e82:	189b      	adds	r3, r3, r2
 8014e84:	681d      	ldr	r5, [r3, #0]
 8014e86:	685e      	ldr	r6, [r3, #4]
 8014e88:	2302      	movs	r3, #2
 8014e8a:	113c      	asrs	r4, r7, #4
 8014e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8014e8e:	06e3      	lsls	r3, r4, #27
 8014e90:	d50b      	bpl.n	8014eaa <_dtoa_r+0x26e>
 8014e92:	4b3e      	ldr	r3, [pc, #248]	; (8014f8c <_dtoa_r+0x350>)
 8014e94:	400c      	ands	r4, r1
 8014e96:	6a1a      	ldr	r2, [r3, #32]
 8014e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014e9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014e9e:	f7ec fbbf 	bl	8001620 <__aeabi_ddiv>
 8014ea2:	2303      	movs	r3, #3
 8014ea4:	9006      	str	r0, [sp, #24]
 8014ea6:	9107      	str	r1, [sp, #28]
 8014ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8014eaa:	2300      	movs	r3, #0
 8014eac:	e03b      	b.n	8014f26 <_dtoa_r+0x2ea>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	930d      	str	r3, [sp, #52]	; 0x34
 8014eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014eb4:	18fb      	adds	r3, r7, r3
 8014eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8014eb8:	3301      	adds	r3, #1
 8014eba:	9309      	str	r3, [sp, #36]	; 0x24
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	dcbd      	bgt.n	8014e3c <_dtoa_r+0x200>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	e7bb      	b.n	8014e3c <_dtoa_r+0x200>
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	e7b3      	b.n	8014e30 <_dtoa_r+0x1f4>
 8014ec8:	2300      	movs	r3, #0
 8014eca:	e7f1      	b.n	8014eb0 <_dtoa_r+0x274>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	940d      	str	r4, [sp, #52]	; 0x34
 8014ed0:	9320      	str	r3, [sp, #128]	; 0x80
 8014ed2:	3b01      	subs	r3, #1
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8014eda:	3313      	adds	r3, #19
 8014edc:	9221      	str	r2, [sp, #132]	; 0x84
 8014ede:	e7ad      	b.n	8014e3c <_dtoa_r+0x200>
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8014ee4:	3b02      	subs	r3, #2
 8014ee6:	e7f5      	b.n	8014ed4 <_dtoa_r+0x298>
 8014ee8:	2301      	movs	r3, #1
 8014eea:	930c      	str	r3, [sp, #48]	; 0x30
 8014eec:	9309      	str	r3, [sp, #36]	; 0x24
 8014eee:	001a      	movs	r2, r3
 8014ef0:	e7f4      	b.n	8014edc <_dtoa_r+0x2a0>
 8014ef2:	9802      	ldr	r0, [sp, #8]
 8014ef4:	3101      	adds	r1, #1
 8014ef6:	6441      	str	r1, [r0, #68]	; 0x44
 8014ef8:	0052      	lsls	r2, r2, #1
 8014efa:	e7a3      	b.n	8014e44 <_dtoa_r+0x208>
 8014efc:	2301      	movs	r3, #1
 8014efe:	421c      	tst	r4, r3
 8014f00:	d00e      	beq.n	8014f20 <_dtoa_r+0x2e4>
 8014f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f04:	4a21      	ldr	r2, [pc, #132]	; (8014f8c <_dtoa_r+0x350>)
 8014f06:	3301      	adds	r3, #1
 8014f08:	930e      	str	r3, [sp, #56]	; 0x38
 8014f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f0c:	0028      	movs	r0, r5
 8014f0e:	00db      	lsls	r3, r3, #3
 8014f10:	189b      	adds	r3, r3, r2
 8014f12:	0031      	movs	r1, r6
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	f7ec ff8c 	bl	8001e34 <__aeabi_dmul>
 8014f1c:	0005      	movs	r5, r0
 8014f1e:	000e      	movs	r6, r1
 8014f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f22:	1064      	asrs	r4, r4, #1
 8014f24:	3301      	adds	r3, #1
 8014f26:	9310      	str	r3, [sp, #64]	; 0x40
 8014f28:	2c00      	cmp	r4, #0
 8014f2a:	d1e7      	bne.n	8014efc <_dtoa_r+0x2c0>
 8014f2c:	9806      	ldr	r0, [sp, #24]
 8014f2e:	9907      	ldr	r1, [sp, #28]
 8014f30:	002a      	movs	r2, r5
 8014f32:	0033      	movs	r3, r6
 8014f34:	f7ec fb74 	bl	8001620 <__aeabi_ddiv>
 8014f38:	9006      	str	r0, [sp, #24]
 8014f3a:	9107      	str	r1, [sp, #28]
 8014f3c:	e043      	b.n	8014fc6 <_dtoa_r+0x38a>
 8014f3e:	46c0      	nop			; (mov r8, r8)
 8014f40:	7ff00000 	.word	0x7ff00000
 8014f44:	0000270f 	.word	0x0000270f
 8014f48:	08019bbe 	.word	0x08019bbe
 8014f4c:	08019bc1 	.word	0x08019bc1
 8014f50:	08019a92 	.word	0x08019a92
 8014f54:	08019a93 	.word	0x08019a93
 8014f58:	3ff00000 	.word	0x3ff00000
 8014f5c:	fffffc01 	.word	0xfffffc01
 8014f60:	3ff80000 	.word	0x3ff80000
 8014f64:	636f4361 	.word	0x636f4361
 8014f68:	3fd287a7 	.word	0x3fd287a7
 8014f6c:	8b60c8b3 	.word	0x8b60c8b3
 8014f70:	3fc68a28 	.word	0x3fc68a28
 8014f74:	509f79fb 	.word	0x509f79fb
 8014f78:	3fd34413 	.word	0x3fd34413
 8014f7c:	08019bf0 	.word	0x08019bf0
 8014f80:	00000432 	.word	0x00000432
 8014f84:	00000412 	.word	0x00000412
 8014f88:	fe100000 	.word	0xfe100000
 8014f8c:	08019bc8 	.word	0x08019bc8
 8014f90:	2302      	movs	r3, #2
 8014f92:	930e      	str	r3, [sp, #56]	; 0x38
 8014f94:	2f00      	cmp	r7, #0
 8014f96:	d016      	beq.n	8014fc6 <_dtoa_r+0x38a>
 8014f98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014f9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014f9c:	427c      	negs	r4, r7
 8014f9e:	330d      	adds	r3, #13
 8014fa0:	4023      	ands	r3, r4
 8014fa2:	4acf      	ldr	r2, [pc, #828]	; (80152e0 <_dtoa_r+0x6a4>)
 8014fa4:	00db      	lsls	r3, r3, #3
 8014fa6:	18d3      	adds	r3, r2, r3
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	f7ec ff42 	bl	8001e34 <__aeabi_dmul>
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	2601      	movs	r6, #1
 8014fb4:	001d      	movs	r5, r3
 8014fb6:	9006      	str	r0, [sp, #24]
 8014fb8:	9107      	str	r1, [sp, #28]
 8014fba:	1124      	asrs	r4, r4, #4
 8014fbc:	2c00      	cmp	r4, #0
 8014fbe:	d000      	beq.n	8014fc2 <_dtoa_r+0x386>
 8014fc0:	e08c      	b.n	80150dc <_dtoa_r+0x4a0>
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d1b8      	bne.n	8014f38 <_dtoa_r+0x2fc>
 8014fc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d100      	bne.n	8014fce <_dtoa_r+0x392>
 8014fcc:	e096      	b.n	80150fc <_dtoa_r+0x4c0>
 8014fce:	9c06      	ldr	r4, [sp, #24]
 8014fd0:	9d07      	ldr	r5, [sp, #28]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	4bc3      	ldr	r3, [pc, #780]	; (80152e4 <_dtoa_r+0x6a8>)
 8014fd6:	0020      	movs	r0, r4
 8014fd8:	0029      	movs	r1, r5
 8014fda:	f7eb fa45 	bl	8000468 <__aeabi_dcmplt>
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	d100      	bne.n	8014fe4 <_dtoa_r+0x3a8>
 8014fe2:	e08b      	b.n	80150fc <_dtoa_r+0x4c0>
 8014fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d100      	bne.n	8014fec <_dtoa_r+0x3b0>
 8014fea:	e087      	b.n	80150fc <_dtoa_r+0x4c0>
 8014fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	dd41      	ble.n	8015076 <_dtoa_r+0x43a>
 8014ff2:	4bbd      	ldr	r3, [pc, #756]	; (80152e8 <_dtoa_r+0x6ac>)
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	0020      	movs	r0, r4
 8014ff8:	0029      	movs	r1, r5
 8014ffa:	f7ec ff1b 	bl	8001e34 <__aeabi_dmul>
 8014ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015000:	9006      	str	r0, [sp, #24]
 8015002:	9107      	str	r1, [sp, #28]
 8015004:	3301      	adds	r3, #1
 8015006:	930e      	str	r3, [sp, #56]	; 0x38
 8015008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801500a:	1e7e      	subs	r6, r7, #1
 801500c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801500e:	9310      	str	r3, [sp, #64]	; 0x40
 8015010:	f7ed fd1c 	bl	8002a4c <__aeabi_i2d>
 8015014:	9a06      	ldr	r2, [sp, #24]
 8015016:	9b07      	ldr	r3, [sp, #28]
 8015018:	f7ec ff0c 	bl	8001e34 <__aeabi_dmul>
 801501c:	2200      	movs	r2, #0
 801501e:	4bb3      	ldr	r3, [pc, #716]	; (80152ec <_dtoa_r+0x6b0>)
 8015020:	f7eb ffe2 	bl	8000fe8 <__aeabi_dadd>
 8015024:	4ab2      	ldr	r2, [pc, #712]	; (80152f0 <_dtoa_r+0x6b4>)
 8015026:	900e      	str	r0, [sp, #56]	; 0x38
 8015028:	910f      	str	r1, [sp, #60]	; 0x3c
 801502a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801502c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801502e:	4694      	mov	ip, r2
 8015030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015032:	4463      	add	r3, ip
 8015034:	9315      	str	r3, [sp, #84]	; 0x54
 8015036:	001d      	movs	r5, r3
 8015038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801503a:	2b00      	cmp	r3, #0
 801503c:	d161      	bne.n	8015102 <_dtoa_r+0x4c6>
 801503e:	9806      	ldr	r0, [sp, #24]
 8015040:	9907      	ldr	r1, [sp, #28]
 8015042:	2200      	movs	r2, #0
 8015044:	4bab      	ldr	r3, [pc, #684]	; (80152f4 <_dtoa_r+0x6b8>)
 8015046:	f7ed f967 	bl	8002318 <__aeabi_dsub>
 801504a:	0022      	movs	r2, r4
 801504c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801504e:	9006      	str	r0, [sp, #24]
 8015050:	9107      	str	r1, [sp, #28]
 8015052:	f7eb fa1d 	bl	8000490 <__aeabi_dcmpgt>
 8015056:	2800      	cmp	r0, #0
 8015058:	d000      	beq.n	801505c <_dtoa_r+0x420>
 801505a:	e2aa      	b.n	80155b2 <_dtoa_r+0x976>
 801505c:	48a6      	ldr	r0, [pc, #664]	; (80152f8 <_dtoa_r+0x6bc>)
 801505e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015060:	4684      	mov	ip, r0
 8015062:	4461      	add	r1, ip
 8015064:	000b      	movs	r3, r1
 8015066:	9806      	ldr	r0, [sp, #24]
 8015068:	9907      	ldr	r1, [sp, #28]
 801506a:	0022      	movs	r2, r4
 801506c:	f7eb f9fc 	bl	8000468 <__aeabi_dcmplt>
 8015070:	2800      	cmp	r0, #0
 8015072:	d000      	beq.n	8015076 <_dtoa_r+0x43a>
 8015074:	e297      	b.n	80155a6 <_dtoa_r+0x96a>
 8015076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015078:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801507a:	9306      	str	r3, [sp, #24]
 801507c:	9407      	str	r4, [sp, #28]
 801507e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015080:	2b00      	cmp	r3, #0
 8015082:	da00      	bge.n	8015086 <_dtoa_r+0x44a>
 8015084:	e15e      	b.n	8015344 <_dtoa_r+0x708>
 8015086:	2f0e      	cmp	r7, #14
 8015088:	dd00      	ble.n	801508c <_dtoa_r+0x450>
 801508a:	e15b      	b.n	8015344 <_dtoa_r+0x708>
 801508c:	4b94      	ldr	r3, [pc, #592]	; (80152e0 <_dtoa_r+0x6a4>)
 801508e:	00fa      	lsls	r2, r7, #3
 8015090:	189b      	adds	r3, r3, r2
 8015092:	685c      	ldr	r4, [r3, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	9304      	str	r3, [sp, #16]
 8015098:	9405      	str	r4, [sp, #20]
 801509a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801509c:	2b00      	cmp	r3, #0
 801509e:	db00      	blt.n	80150a2 <_dtoa_r+0x466>
 80150a0:	e0da      	b.n	8015258 <_dtoa_r+0x61c>
 80150a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	dd00      	ble.n	80150aa <_dtoa_r+0x46e>
 80150a8:	e0d6      	b.n	8015258 <_dtoa_r+0x61c>
 80150aa:	d000      	beq.n	80150ae <_dtoa_r+0x472>
 80150ac:	e27f      	b.n	80155ae <_dtoa_r+0x972>
 80150ae:	9804      	ldr	r0, [sp, #16]
 80150b0:	9905      	ldr	r1, [sp, #20]
 80150b2:	2200      	movs	r2, #0
 80150b4:	4b8f      	ldr	r3, [pc, #572]	; (80152f4 <_dtoa_r+0x6b8>)
 80150b6:	f7ec febd 	bl	8001e34 <__aeabi_dmul>
 80150ba:	9a06      	ldr	r2, [sp, #24]
 80150bc:	9b07      	ldr	r3, [sp, #28]
 80150be:	f7eb f9f1 	bl	80004a4 <__aeabi_dcmpge>
 80150c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150c4:	9304      	str	r3, [sp, #16]
 80150c6:	001e      	movs	r6, r3
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d000      	beq.n	80150ce <_dtoa_r+0x492>
 80150cc:	e251      	b.n	8015572 <_dtoa_r+0x936>
 80150ce:	9b08      	ldr	r3, [sp, #32]
 80150d0:	9a08      	ldr	r2, [sp, #32]
 80150d2:	1c5d      	adds	r5, r3, #1
 80150d4:	2331      	movs	r3, #49	; 0x31
 80150d6:	3701      	adds	r7, #1
 80150d8:	7013      	strb	r3, [r2, #0]
 80150da:	e24d      	b.n	8015578 <_dtoa_r+0x93c>
 80150dc:	4234      	tst	r4, r6
 80150de:	d00a      	beq.n	80150f6 <_dtoa_r+0x4ba>
 80150e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150e2:	4a86      	ldr	r2, [pc, #536]	; (80152fc <_dtoa_r+0x6c0>)
 80150e4:	3301      	adds	r3, #1
 80150e6:	930e      	str	r3, [sp, #56]	; 0x38
 80150e8:	00eb      	lsls	r3, r5, #3
 80150ea:	189b      	adds	r3, r3, r2
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	f7ec fea0 	bl	8001e34 <__aeabi_dmul>
 80150f4:	0033      	movs	r3, r6
 80150f6:	1064      	asrs	r4, r4, #1
 80150f8:	3501      	adds	r5, #1
 80150fa:	e75f      	b.n	8014fbc <_dtoa_r+0x380>
 80150fc:	003e      	movs	r6, r7
 80150fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015100:	e784      	b.n	801500c <_dtoa_r+0x3d0>
 8015102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015104:	1e5a      	subs	r2, r3, #1
 8015106:	4b76      	ldr	r3, [pc, #472]	; (80152e0 <_dtoa_r+0x6a4>)
 8015108:	00d2      	lsls	r2, r2, #3
 801510a:	189b      	adds	r3, r3, r2
 801510c:	6818      	ldr	r0, [r3, #0]
 801510e:	6859      	ldr	r1, [r3, #4]
 8015110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015112:	2b00      	cmp	r3, #0
 8015114:	d04b      	beq.n	80151ae <_dtoa_r+0x572>
 8015116:	0002      	movs	r2, r0
 8015118:	000b      	movs	r3, r1
 801511a:	2000      	movs	r0, #0
 801511c:	4978      	ldr	r1, [pc, #480]	; (8015300 <_dtoa_r+0x6c4>)
 801511e:	f7ec fa7f 	bl	8001620 <__aeabi_ddiv>
 8015122:	002b      	movs	r3, r5
 8015124:	0022      	movs	r2, r4
 8015126:	f7ed f8f7 	bl	8002318 <__aeabi_dsub>
 801512a:	9b08      	ldr	r3, [sp, #32]
 801512c:	900e      	str	r0, [sp, #56]	; 0x38
 801512e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015130:	9315      	str	r3, [sp, #84]	; 0x54
 8015132:	9806      	ldr	r0, [sp, #24]
 8015134:	9907      	ldr	r1, [sp, #28]
 8015136:	f7ed fc53 	bl	80029e0 <__aeabi_d2iz>
 801513a:	0004      	movs	r4, r0
 801513c:	f7ed fc86 	bl	8002a4c <__aeabi_i2d>
 8015140:	0002      	movs	r2, r0
 8015142:	000b      	movs	r3, r1
 8015144:	9806      	ldr	r0, [sp, #24]
 8015146:	9907      	ldr	r1, [sp, #28]
 8015148:	f7ed f8e6 	bl	8002318 <__aeabi_dsub>
 801514c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801514e:	3430      	adds	r4, #48	; 0x30
 8015150:	1c5d      	adds	r5, r3, #1
 8015152:	701c      	strb	r4, [r3, #0]
 8015154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015158:	9006      	str	r0, [sp, #24]
 801515a:	9107      	str	r1, [sp, #28]
 801515c:	f7eb f984 	bl	8000468 <__aeabi_dcmplt>
 8015160:	2800      	cmp	r0, #0
 8015162:	d16c      	bne.n	801523e <_dtoa_r+0x602>
 8015164:	9a06      	ldr	r2, [sp, #24]
 8015166:	9b07      	ldr	r3, [sp, #28]
 8015168:	2000      	movs	r0, #0
 801516a:	495e      	ldr	r1, [pc, #376]	; (80152e4 <_dtoa_r+0x6a8>)
 801516c:	f7ed f8d4 	bl	8002318 <__aeabi_dsub>
 8015170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015174:	f7eb f978 	bl	8000468 <__aeabi_dcmplt>
 8015178:	2800      	cmp	r0, #0
 801517a:	d000      	beq.n	801517e <_dtoa_r+0x542>
 801517c:	e0c3      	b.n	8015306 <_dtoa_r+0x6ca>
 801517e:	9b08      	ldr	r3, [sp, #32]
 8015180:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015182:	1aeb      	subs	r3, r5, r3
 8015184:	429a      	cmp	r2, r3
 8015186:	dc00      	bgt.n	801518a <_dtoa_r+0x54e>
 8015188:	e775      	b.n	8015076 <_dtoa_r+0x43a>
 801518a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801518c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801518e:	2200      	movs	r2, #0
 8015190:	4b55      	ldr	r3, [pc, #340]	; (80152e8 <_dtoa_r+0x6ac>)
 8015192:	f7ec fe4f 	bl	8001e34 <__aeabi_dmul>
 8015196:	2200      	movs	r2, #0
 8015198:	900e      	str	r0, [sp, #56]	; 0x38
 801519a:	910f      	str	r1, [sp, #60]	; 0x3c
 801519c:	9806      	ldr	r0, [sp, #24]
 801519e:	9907      	ldr	r1, [sp, #28]
 80151a0:	4b51      	ldr	r3, [pc, #324]	; (80152e8 <_dtoa_r+0x6ac>)
 80151a2:	f7ec fe47 	bl	8001e34 <__aeabi_dmul>
 80151a6:	9515      	str	r5, [sp, #84]	; 0x54
 80151a8:	9006      	str	r0, [sp, #24]
 80151aa:	9107      	str	r1, [sp, #28]
 80151ac:	e7c1      	b.n	8015132 <_dtoa_r+0x4f6>
 80151ae:	0022      	movs	r2, r4
 80151b0:	002b      	movs	r3, r5
 80151b2:	f7ec fe3f 	bl	8001e34 <__aeabi_dmul>
 80151b6:	9c08      	ldr	r4, [sp, #32]
 80151b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151ba:	0023      	movs	r3, r4
 80151bc:	4694      	mov	ip, r2
 80151be:	900e      	str	r0, [sp, #56]	; 0x38
 80151c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80151c2:	4463      	add	r3, ip
 80151c4:	9315      	str	r3, [sp, #84]	; 0x54
 80151c6:	9806      	ldr	r0, [sp, #24]
 80151c8:	9907      	ldr	r1, [sp, #28]
 80151ca:	f7ed fc09 	bl	80029e0 <__aeabi_d2iz>
 80151ce:	0005      	movs	r5, r0
 80151d0:	f7ed fc3c 	bl	8002a4c <__aeabi_i2d>
 80151d4:	000b      	movs	r3, r1
 80151d6:	0002      	movs	r2, r0
 80151d8:	9806      	ldr	r0, [sp, #24]
 80151da:	9907      	ldr	r1, [sp, #28]
 80151dc:	f7ed f89c 	bl	8002318 <__aeabi_dsub>
 80151e0:	3530      	adds	r5, #48	; 0x30
 80151e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151e4:	7025      	strb	r5, [r4, #0]
 80151e6:	3401      	adds	r4, #1
 80151e8:	9006      	str	r0, [sp, #24]
 80151ea:	9107      	str	r1, [sp, #28]
 80151ec:	42a3      	cmp	r3, r4
 80151ee:	d12a      	bne.n	8015246 <_dtoa_r+0x60a>
 80151f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80151f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80151f4:	9a08      	ldr	r2, [sp, #32]
 80151f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151f8:	4694      	mov	ip, r2
 80151fa:	4463      	add	r3, ip
 80151fc:	2200      	movs	r2, #0
 80151fe:	001d      	movs	r5, r3
 8015200:	4b3f      	ldr	r3, [pc, #252]	; (8015300 <_dtoa_r+0x6c4>)
 8015202:	f7eb fef1 	bl	8000fe8 <__aeabi_dadd>
 8015206:	0002      	movs	r2, r0
 8015208:	000b      	movs	r3, r1
 801520a:	9806      	ldr	r0, [sp, #24]
 801520c:	9907      	ldr	r1, [sp, #28]
 801520e:	f7eb f93f 	bl	8000490 <__aeabi_dcmpgt>
 8015212:	2800      	cmp	r0, #0
 8015214:	d000      	beq.n	8015218 <_dtoa_r+0x5dc>
 8015216:	e076      	b.n	8015306 <_dtoa_r+0x6ca>
 8015218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801521a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801521c:	2000      	movs	r0, #0
 801521e:	4938      	ldr	r1, [pc, #224]	; (8015300 <_dtoa_r+0x6c4>)
 8015220:	f7ed f87a 	bl	8002318 <__aeabi_dsub>
 8015224:	0002      	movs	r2, r0
 8015226:	000b      	movs	r3, r1
 8015228:	9806      	ldr	r0, [sp, #24]
 801522a:	9907      	ldr	r1, [sp, #28]
 801522c:	f7eb f91c 	bl	8000468 <__aeabi_dcmplt>
 8015230:	2800      	cmp	r0, #0
 8015232:	d100      	bne.n	8015236 <_dtoa_r+0x5fa>
 8015234:	e71f      	b.n	8015076 <_dtoa_r+0x43a>
 8015236:	1e6b      	subs	r3, r5, #1
 8015238:	781a      	ldrb	r2, [r3, #0]
 801523a:	2a30      	cmp	r2, #48	; 0x30
 801523c:	d001      	beq.n	8015242 <_dtoa_r+0x606>
 801523e:	0037      	movs	r7, r6
 8015240:	e03f      	b.n	80152c2 <_dtoa_r+0x686>
 8015242:	001d      	movs	r5, r3
 8015244:	e7f7      	b.n	8015236 <_dtoa_r+0x5fa>
 8015246:	9806      	ldr	r0, [sp, #24]
 8015248:	9907      	ldr	r1, [sp, #28]
 801524a:	2200      	movs	r2, #0
 801524c:	4b26      	ldr	r3, [pc, #152]	; (80152e8 <_dtoa_r+0x6ac>)
 801524e:	f7ec fdf1 	bl	8001e34 <__aeabi_dmul>
 8015252:	9006      	str	r0, [sp, #24]
 8015254:	9107      	str	r1, [sp, #28]
 8015256:	e7b6      	b.n	80151c6 <_dtoa_r+0x58a>
 8015258:	9e08      	ldr	r6, [sp, #32]
 801525a:	9a04      	ldr	r2, [sp, #16]
 801525c:	9b05      	ldr	r3, [sp, #20]
 801525e:	9806      	ldr	r0, [sp, #24]
 8015260:	9907      	ldr	r1, [sp, #28]
 8015262:	f7ec f9dd 	bl	8001620 <__aeabi_ddiv>
 8015266:	f7ed fbbb 	bl	80029e0 <__aeabi_d2iz>
 801526a:	0004      	movs	r4, r0
 801526c:	f7ed fbee 	bl	8002a4c <__aeabi_i2d>
 8015270:	9a04      	ldr	r2, [sp, #16]
 8015272:	9b05      	ldr	r3, [sp, #20]
 8015274:	f7ec fdde 	bl	8001e34 <__aeabi_dmul>
 8015278:	0002      	movs	r2, r0
 801527a:	000b      	movs	r3, r1
 801527c:	9806      	ldr	r0, [sp, #24]
 801527e:	9907      	ldr	r1, [sp, #28]
 8015280:	f7ed f84a 	bl	8002318 <__aeabi_dsub>
 8015284:	0023      	movs	r3, r4
 8015286:	3330      	adds	r3, #48	; 0x30
 8015288:	7033      	strb	r3, [r6, #0]
 801528a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801528c:	9b08      	ldr	r3, [sp, #32]
 801528e:	1c75      	adds	r5, r6, #1
 8015290:	1aeb      	subs	r3, r5, r3
 8015292:	429a      	cmp	r2, r3
 8015294:	d148      	bne.n	8015328 <_dtoa_r+0x6ec>
 8015296:	0002      	movs	r2, r0
 8015298:	000b      	movs	r3, r1
 801529a:	f7eb fea5 	bl	8000fe8 <__aeabi_dadd>
 801529e:	9a04      	ldr	r2, [sp, #16]
 80152a0:	9b05      	ldr	r3, [sp, #20]
 80152a2:	9006      	str	r0, [sp, #24]
 80152a4:	9107      	str	r1, [sp, #28]
 80152a6:	f7eb f8f3 	bl	8000490 <__aeabi_dcmpgt>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d12a      	bne.n	8015304 <_dtoa_r+0x6c8>
 80152ae:	9a04      	ldr	r2, [sp, #16]
 80152b0:	9b05      	ldr	r3, [sp, #20]
 80152b2:	9806      	ldr	r0, [sp, #24]
 80152b4:	9907      	ldr	r1, [sp, #28]
 80152b6:	f7eb f8d1 	bl	800045c <__aeabi_dcmpeq>
 80152ba:	2800      	cmp	r0, #0
 80152bc:	d001      	beq.n	80152c2 <_dtoa_r+0x686>
 80152be:	07e3      	lsls	r3, r4, #31
 80152c0:	d420      	bmi.n	8015304 <_dtoa_r+0x6c8>
 80152c2:	9903      	ldr	r1, [sp, #12]
 80152c4:	9802      	ldr	r0, [sp, #8]
 80152c6:	f000 ff35 	bl	8016134 <_Bfree>
 80152ca:	2300      	movs	r3, #0
 80152cc:	702b      	strb	r3, [r5, #0]
 80152ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80152d0:	3701      	adds	r7, #1
 80152d2:	601f      	str	r7, [r3, #0]
 80152d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d100      	bne.n	80152dc <_dtoa_r+0x6a0>
 80152da:	e4e4      	b.n	8014ca6 <_dtoa_r+0x6a>
 80152dc:	601d      	str	r5, [r3, #0]
 80152de:	e4e2      	b.n	8014ca6 <_dtoa_r+0x6a>
 80152e0:	08019bf0 	.word	0x08019bf0
 80152e4:	3ff00000 	.word	0x3ff00000
 80152e8:	40240000 	.word	0x40240000
 80152ec:	401c0000 	.word	0x401c0000
 80152f0:	fcc00000 	.word	0xfcc00000
 80152f4:	40140000 	.word	0x40140000
 80152f8:	7cc00000 	.word	0x7cc00000
 80152fc:	08019bc8 	.word	0x08019bc8
 8015300:	3fe00000 	.word	0x3fe00000
 8015304:	003e      	movs	r6, r7
 8015306:	1e6b      	subs	r3, r5, #1
 8015308:	781a      	ldrb	r2, [r3, #0]
 801530a:	2a39      	cmp	r2, #57	; 0x39
 801530c:	d106      	bne.n	801531c <_dtoa_r+0x6e0>
 801530e:	9a08      	ldr	r2, [sp, #32]
 8015310:	429a      	cmp	r2, r3
 8015312:	d107      	bne.n	8015324 <_dtoa_r+0x6e8>
 8015314:	2330      	movs	r3, #48	; 0x30
 8015316:	7013      	strb	r3, [r2, #0]
 8015318:	0013      	movs	r3, r2
 801531a:	3601      	adds	r6, #1
 801531c:	781a      	ldrb	r2, [r3, #0]
 801531e:	3201      	adds	r2, #1
 8015320:	701a      	strb	r2, [r3, #0]
 8015322:	e78c      	b.n	801523e <_dtoa_r+0x602>
 8015324:	001d      	movs	r5, r3
 8015326:	e7ee      	b.n	8015306 <_dtoa_r+0x6ca>
 8015328:	2200      	movs	r2, #0
 801532a:	4ba4      	ldr	r3, [pc, #656]	; (80155bc <_dtoa_r+0x980>)
 801532c:	f7ec fd82 	bl	8001e34 <__aeabi_dmul>
 8015330:	2200      	movs	r2, #0
 8015332:	2300      	movs	r3, #0
 8015334:	9006      	str	r0, [sp, #24]
 8015336:	9107      	str	r1, [sp, #28]
 8015338:	002e      	movs	r6, r5
 801533a:	f7eb f88f 	bl	800045c <__aeabi_dcmpeq>
 801533e:	2800      	cmp	r0, #0
 8015340:	d08b      	beq.n	801525a <_dtoa_r+0x61e>
 8015342:	e7be      	b.n	80152c2 <_dtoa_r+0x686>
 8015344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015346:	2a00      	cmp	r2, #0
 8015348:	d100      	bne.n	801534c <_dtoa_r+0x710>
 801534a:	e0da      	b.n	8015502 <_dtoa_r+0x8c6>
 801534c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801534e:	2a01      	cmp	r2, #1
 8015350:	dd00      	ble.n	8015354 <_dtoa_r+0x718>
 8015352:	e0bd      	b.n	80154d0 <_dtoa_r+0x894>
 8015354:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015356:	2a00      	cmp	r2, #0
 8015358:	d100      	bne.n	801535c <_dtoa_r+0x720>
 801535a:	e0b5      	b.n	80154c8 <_dtoa_r+0x88c>
 801535c:	4a98      	ldr	r2, [pc, #608]	; (80155c0 <_dtoa_r+0x984>)
 801535e:	189b      	adds	r3, r3, r2
 8015360:	9d04      	ldr	r5, [sp, #16]
 8015362:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015366:	2101      	movs	r1, #1
 8015368:	18d2      	adds	r2, r2, r3
 801536a:	920a      	str	r2, [sp, #40]	; 0x28
 801536c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801536e:	9802      	ldr	r0, [sp, #8]
 8015370:	18d3      	adds	r3, r2, r3
 8015372:	930b      	str	r3, [sp, #44]	; 0x2c
 8015374:	f000 ffad 	bl	80162d2 <__i2b>
 8015378:	0006      	movs	r6, r0
 801537a:	2c00      	cmp	r4, #0
 801537c:	dd0e      	ble.n	801539c <_dtoa_r+0x760>
 801537e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015380:	2b00      	cmp	r3, #0
 8015382:	dd0b      	ble.n	801539c <_dtoa_r+0x760>
 8015384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015386:	0023      	movs	r3, r4
 8015388:	4294      	cmp	r4, r2
 801538a:	dd00      	ble.n	801538e <_dtoa_r+0x752>
 801538c:	0013      	movs	r3, r2
 801538e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015390:	1ae4      	subs	r4, r4, r3
 8015392:	1ad2      	subs	r2, r2, r3
 8015394:	920a      	str	r2, [sp, #40]	; 0x28
 8015396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	930b      	str	r3, [sp, #44]	; 0x2c
 801539c:	9b04      	ldr	r3, [sp, #16]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d01f      	beq.n	80153e2 <_dtoa_r+0x7a6>
 80153a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d100      	bne.n	80153aa <_dtoa_r+0x76e>
 80153a8:	e0af      	b.n	801550a <_dtoa_r+0x8ce>
 80153aa:	2d00      	cmp	r5, #0
 80153ac:	d011      	beq.n	80153d2 <_dtoa_r+0x796>
 80153ae:	0031      	movs	r1, r6
 80153b0:	002a      	movs	r2, r5
 80153b2:	9802      	ldr	r0, [sp, #8]
 80153b4:	f001 f826 	bl	8016404 <__pow5mult>
 80153b8:	9a03      	ldr	r2, [sp, #12]
 80153ba:	0001      	movs	r1, r0
 80153bc:	0006      	movs	r6, r0
 80153be:	9802      	ldr	r0, [sp, #8]
 80153c0:	f000 ff90 	bl	80162e4 <__multiply>
 80153c4:	9903      	ldr	r1, [sp, #12]
 80153c6:	9010      	str	r0, [sp, #64]	; 0x40
 80153c8:	9802      	ldr	r0, [sp, #8]
 80153ca:	f000 feb3 	bl	8016134 <_Bfree>
 80153ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153d0:	9303      	str	r3, [sp, #12]
 80153d2:	9b04      	ldr	r3, [sp, #16]
 80153d4:	1b5a      	subs	r2, r3, r5
 80153d6:	d004      	beq.n	80153e2 <_dtoa_r+0x7a6>
 80153d8:	9903      	ldr	r1, [sp, #12]
 80153da:	9802      	ldr	r0, [sp, #8]
 80153dc:	f001 f812 	bl	8016404 <__pow5mult>
 80153e0:	9003      	str	r0, [sp, #12]
 80153e2:	2101      	movs	r1, #1
 80153e4:	9802      	ldr	r0, [sp, #8]
 80153e6:	f000 ff74 	bl	80162d2 <__i2b>
 80153ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153ec:	9004      	str	r0, [sp, #16]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d100      	bne.n	80153f4 <_dtoa_r+0x7b8>
 80153f2:	e1e3      	b.n	80157bc <_dtoa_r+0xb80>
 80153f4:	001a      	movs	r2, r3
 80153f6:	0001      	movs	r1, r0
 80153f8:	9802      	ldr	r0, [sp, #8]
 80153fa:	f001 f803 	bl	8016404 <__pow5mult>
 80153fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015400:	9004      	str	r0, [sp, #16]
 8015402:	2b01      	cmp	r3, #1
 8015404:	dd00      	ble.n	8015408 <_dtoa_r+0x7cc>
 8015406:	e082      	b.n	801550e <_dtoa_r+0x8d2>
 8015408:	2500      	movs	r5, #0
 801540a:	9b06      	ldr	r3, [sp, #24]
 801540c:	42ab      	cmp	r3, r5
 801540e:	d10e      	bne.n	801542e <_dtoa_r+0x7f2>
 8015410:	9b07      	ldr	r3, [sp, #28]
 8015412:	031b      	lsls	r3, r3, #12
 8015414:	42ab      	cmp	r3, r5
 8015416:	d10a      	bne.n	801542e <_dtoa_r+0x7f2>
 8015418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801541a:	9a07      	ldr	r2, [sp, #28]
 801541c:	4213      	tst	r3, r2
 801541e:	d006      	beq.n	801542e <_dtoa_r+0x7f2>
 8015420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015422:	3501      	adds	r5, #1
 8015424:	3301      	adds	r3, #1
 8015426:	930a      	str	r3, [sp, #40]	; 0x28
 8015428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801542a:	3301      	adds	r3, #1
 801542c:	930b      	str	r3, [sp, #44]	; 0x2c
 801542e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015430:	2001      	movs	r0, #1
 8015432:	2b00      	cmp	r3, #0
 8015434:	d16c      	bne.n	8015510 <_dtoa_r+0x8d4>
 8015436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015438:	1818      	adds	r0, r3, r0
 801543a:	231f      	movs	r3, #31
 801543c:	4018      	ands	r0, r3
 801543e:	d07e      	beq.n	801553e <_dtoa_r+0x902>
 8015440:	3301      	adds	r3, #1
 8015442:	1a1b      	subs	r3, r3, r0
 8015444:	2b04      	cmp	r3, #4
 8015446:	dd70      	ble.n	801552a <_dtoa_r+0x8ee>
 8015448:	231c      	movs	r3, #28
 801544a:	1a18      	subs	r0, r3, r0
 801544c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801544e:	1824      	adds	r4, r4, r0
 8015450:	181b      	adds	r3, r3, r0
 8015452:	930a      	str	r3, [sp, #40]	; 0x28
 8015454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015456:	181b      	adds	r3, r3, r0
 8015458:	930b      	str	r3, [sp, #44]	; 0x2c
 801545a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801545c:	2b00      	cmp	r3, #0
 801545e:	dd05      	ble.n	801546c <_dtoa_r+0x830>
 8015460:	001a      	movs	r2, r3
 8015462:	9903      	ldr	r1, [sp, #12]
 8015464:	9802      	ldr	r0, [sp, #8]
 8015466:	f001 f80f 	bl	8016488 <__lshift>
 801546a:	9003      	str	r0, [sp, #12]
 801546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801546e:	2b00      	cmp	r3, #0
 8015470:	dd05      	ble.n	801547e <_dtoa_r+0x842>
 8015472:	001a      	movs	r2, r3
 8015474:	9904      	ldr	r1, [sp, #16]
 8015476:	9802      	ldr	r0, [sp, #8]
 8015478:	f001 f806 	bl	8016488 <__lshift>
 801547c:	9004      	str	r0, [sp, #16]
 801547e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015480:	2b00      	cmp	r3, #0
 8015482:	d05e      	beq.n	8015542 <_dtoa_r+0x906>
 8015484:	9904      	ldr	r1, [sp, #16]
 8015486:	9803      	ldr	r0, [sp, #12]
 8015488:	f001 f850 	bl	801652c <__mcmp>
 801548c:	2800      	cmp	r0, #0
 801548e:	da58      	bge.n	8015542 <_dtoa_r+0x906>
 8015490:	2300      	movs	r3, #0
 8015492:	220a      	movs	r2, #10
 8015494:	9903      	ldr	r1, [sp, #12]
 8015496:	9802      	ldr	r0, [sp, #8]
 8015498:	f000 fe56 	bl	8016148 <__multadd>
 801549c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801549e:	3f01      	subs	r7, #1
 80154a0:	9003      	str	r0, [sp, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d100      	bne.n	80154a8 <_dtoa_r+0x86c>
 80154a6:	e190      	b.n	80157ca <_dtoa_r+0xb8e>
 80154a8:	2300      	movs	r3, #0
 80154aa:	0031      	movs	r1, r6
 80154ac:	220a      	movs	r2, #10
 80154ae:	9802      	ldr	r0, [sp, #8]
 80154b0:	f000 fe4a 	bl	8016148 <__multadd>
 80154b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154b6:	0006      	movs	r6, r0
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	dd00      	ble.n	80154be <_dtoa_r+0x882>
 80154bc:	e088      	b.n	80155d0 <_dtoa_r+0x994>
 80154be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80154c0:	2b02      	cmp	r3, #2
 80154c2:	dc00      	bgt.n	80154c6 <_dtoa_r+0x88a>
 80154c4:	e084      	b.n	80155d0 <_dtoa_r+0x994>
 80154c6:	e044      	b.n	8015552 <_dtoa_r+0x916>
 80154c8:	2336      	movs	r3, #54	; 0x36
 80154ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80154cc:	1a9b      	subs	r3, r3, r2
 80154ce:	e747      	b.n	8015360 <_dtoa_r+0x724>
 80154d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154d2:	1e5d      	subs	r5, r3, #1
 80154d4:	9b04      	ldr	r3, [sp, #16]
 80154d6:	42ab      	cmp	r3, r5
 80154d8:	db08      	blt.n	80154ec <_dtoa_r+0x8b0>
 80154da:	1b5d      	subs	r5, r3, r5
 80154dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154de:	2b00      	cmp	r3, #0
 80154e0:	da0c      	bge.n	80154fc <_dtoa_r+0x8c0>
 80154e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154e6:	1a9c      	subs	r4, r3, r2
 80154e8:	2300      	movs	r3, #0
 80154ea:	e73b      	b.n	8015364 <_dtoa_r+0x728>
 80154ec:	9b04      	ldr	r3, [sp, #16]
 80154ee:	9504      	str	r5, [sp, #16]
 80154f0:	1aea      	subs	r2, r5, r3
 80154f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154f4:	2500      	movs	r5, #0
 80154f6:	189b      	adds	r3, r3, r2
 80154f8:	9311      	str	r3, [sp, #68]	; 0x44
 80154fa:	e7ef      	b.n	80154dc <_dtoa_r+0x8a0>
 80154fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80154fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015500:	e730      	b.n	8015364 <_dtoa_r+0x728>
 8015502:	9d04      	ldr	r5, [sp, #16]
 8015504:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015506:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015508:	e737      	b.n	801537a <_dtoa_r+0x73e>
 801550a:	9a04      	ldr	r2, [sp, #16]
 801550c:	e764      	b.n	80153d8 <_dtoa_r+0x79c>
 801550e:	2500      	movs	r5, #0
 8015510:	9b04      	ldr	r3, [sp, #16]
 8015512:	9a04      	ldr	r2, [sp, #16]
 8015514:	691b      	ldr	r3, [r3, #16]
 8015516:	9310      	str	r3, [sp, #64]	; 0x40
 8015518:	3303      	adds	r3, #3
 801551a:	009b      	lsls	r3, r3, #2
 801551c:	18d3      	adds	r3, r2, r3
 801551e:	6858      	ldr	r0, [r3, #4]
 8015520:	f000 fe8e 	bl	8016240 <__hi0bits>
 8015524:	2320      	movs	r3, #32
 8015526:	1a18      	subs	r0, r3, r0
 8015528:	e785      	b.n	8015436 <_dtoa_r+0x7fa>
 801552a:	2b04      	cmp	r3, #4
 801552c:	d095      	beq.n	801545a <_dtoa_r+0x81e>
 801552e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015530:	331c      	adds	r3, #28
 8015532:	18d2      	adds	r2, r2, r3
 8015534:	920a      	str	r2, [sp, #40]	; 0x28
 8015536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015538:	18e4      	adds	r4, r4, r3
 801553a:	18d3      	adds	r3, r2, r3
 801553c:	e78c      	b.n	8015458 <_dtoa_r+0x81c>
 801553e:	0003      	movs	r3, r0
 8015540:	e7f5      	b.n	801552e <_dtoa_r+0x8f2>
 8015542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015544:	2b00      	cmp	r3, #0
 8015546:	dc3d      	bgt.n	80155c4 <_dtoa_r+0x988>
 8015548:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801554a:	2b02      	cmp	r3, #2
 801554c:	dd3a      	ble.n	80155c4 <_dtoa_r+0x988>
 801554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015550:	930c      	str	r3, [sp, #48]	; 0x30
 8015552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015554:	2b00      	cmp	r3, #0
 8015556:	d10c      	bne.n	8015572 <_dtoa_r+0x936>
 8015558:	9904      	ldr	r1, [sp, #16]
 801555a:	2205      	movs	r2, #5
 801555c:	9802      	ldr	r0, [sp, #8]
 801555e:	f000 fdf3 	bl	8016148 <__multadd>
 8015562:	9004      	str	r0, [sp, #16]
 8015564:	0001      	movs	r1, r0
 8015566:	9803      	ldr	r0, [sp, #12]
 8015568:	f000 ffe0 	bl	801652c <__mcmp>
 801556c:	2800      	cmp	r0, #0
 801556e:	dd00      	ble.n	8015572 <_dtoa_r+0x936>
 8015570:	e5ad      	b.n	80150ce <_dtoa_r+0x492>
 8015572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015574:	9d08      	ldr	r5, [sp, #32]
 8015576:	43df      	mvns	r7, r3
 8015578:	2300      	movs	r3, #0
 801557a:	9309      	str	r3, [sp, #36]	; 0x24
 801557c:	9904      	ldr	r1, [sp, #16]
 801557e:	9802      	ldr	r0, [sp, #8]
 8015580:	f000 fdd8 	bl	8016134 <_Bfree>
 8015584:	2e00      	cmp	r6, #0
 8015586:	d100      	bne.n	801558a <_dtoa_r+0x94e>
 8015588:	e69b      	b.n	80152c2 <_dtoa_r+0x686>
 801558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801558c:	2b00      	cmp	r3, #0
 801558e:	d005      	beq.n	801559c <_dtoa_r+0x960>
 8015590:	42b3      	cmp	r3, r6
 8015592:	d003      	beq.n	801559c <_dtoa_r+0x960>
 8015594:	0019      	movs	r1, r3
 8015596:	9802      	ldr	r0, [sp, #8]
 8015598:	f000 fdcc 	bl	8016134 <_Bfree>
 801559c:	0031      	movs	r1, r6
 801559e:	9802      	ldr	r0, [sp, #8]
 80155a0:	f000 fdc8 	bl	8016134 <_Bfree>
 80155a4:	e68d      	b.n	80152c2 <_dtoa_r+0x686>
 80155a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155a8:	9304      	str	r3, [sp, #16]
 80155aa:	001e      	movs	r6, r3
 80155ac:	e7e1      	b.n	8015572 <_dtoa_r+0x936>
 80155ae:	2300      	movs	r3, #0
 80155b0:	e7fa      	b.n	80155a8 <_dtoa_r+0x96c>
 80155b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155b4:	0037      	movs	r7, r6
 80155b6:	9304      	str	r3, [sp, #16]
 80155b8:	001e      	movs	r6, r3
 80155ba:	e588      	b.n	80150ce <_dtoa_r+0x492>
 80155bc:	40240000 	.word	0x40240000
 80155c0:	00000433 	.word	0x00000433
 80155c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d100      	bne.n	80155cc <_dtoa_r+0x990>
 80155ca:	e0b2      	b.n	8015732 <_dtoa_r+0xaf6>
 80155cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155ce:	930c      	str	r3, [sp, #48]	; 0x30
 80155d0:	2c00      	cmp	r4, #0
 80155d2:	dd05      	ble.n	80155e0 <_dtoa_r+0x9a4>
 80155d4:	0031      	movs	r1, r6
 80155d6:	0022      	movs	r2, r4
 80155d8:	9802      	ldr	r0, [sp, #8]
 80155da:	f000 ff55 	bl	8016488 <__lshift>
 80155de:	0006      	movs	r6, r0
 80155e0:	0030      	movs	r0, r6
 80155e2:	2d00      	cmp	r5, #0
 80155e4:	d011      	beq.n	801560a <_dtoa_r+0x9ce>
 80155e6:	6871      	ldr	r1, [r6, #4]
 80155e8:	9802      	ldr	r0, [sp, #8]
 80155ea:	f000 fd7b 	bl	80160e4 <_Balloc>
 80155ee:	0031      	movs	r1, r6
 80155f0:	0004      	movs	r4, r0
 80155f2:	6933      	ldr	r3, [r6, #16]
 80155f4:	310c      	adds	r1, #12
 80155f6:	1c9a      	adds	r2, r3, #2
 80155f8:	0092      	lsls	r2, r2, #2
 80155fa:	300c      	adds	r0, #12
 80155fc:	f7fc fe8b 	bl	8012316 <memcpy>
 8015600:	2201      	movs	r2, #1
 8015602:	0021      	movs	r1, r4
 8015604:	9802      	ldr	r0, [sp, #8]
 8015606:	f000 ff3f 	bl	8016488 <__lshift>
 801560a:	9609      	str	r6, [sp, #36]	; 0x24
 801560c:	0006      	movs	r6, r0
 801560e:	9b08      	ldr	r3, [sp, #32]
 8015610:	930a      	str	r3, [sp, #40]	; 0x28
 8015612:	9904      	ldr	r1, [sp, #16]
 8015614:	9803      	ldr	r0, [sp, #12]
 8015616:	f7ff fa8b 	bl	8014b30 <quorem>
 801561a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801561c:	900d      	str	r0, [sp, #52]	; 0x34
 801561e:	0004      	movs	r4, r0
 8015620:	9803      	ldr	r0, [sp, #12]
 8015622:	f000 ff83 	bl	801652c <__mcmp>
 8015626:	0032      	movs	r2, r6
 8015628:	9010      	str	r0, [sp, #64]	; 0x40
 801562a:	9904      	ldr	r1, [sp, #16]
 801562c:	9802      	ldr	r0, [sp, #8]
 801562e:	f000 ff97 	bl	8016560 <__mdiff>
 8015632:	2301      	movs	r3, #1
 8015634:	930b      	str	r3, [sp, #44]	; 0x2c
 8015636:	68c3      	ldr	r3, [r0, #12]
 8015638:	3430      	adds	r4, #48	; 0x30
 801563a:	0005      	movs	r5, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d104      	bne.n	801564a <_dtoa_r+0xa0e>
 8015640:	0001      	movs	r1, r0
 8015642:	9803      	ldr	r0, [sp, #12]
 8015644:	f000 ff72 	bl	801652c <__mcmp>
 8015648:	900b      	str	r0, [sp, #44]	; 0x2c
 801564a:	0029      	movs	r1, r5
 801564c:	9802      	ldr	r0, [sp, #8]
 801564e:	f000 fd71 	bl	8016134 <_Bfree>
 8015652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015656:	4313      	orrs	r3, r2
 8015658:	d10e      	bne.n	8015678 <_dtoa_r+0xa3c>
 801565a:	9a06      	ldr	r2, [sp, #24]
 801565c:	3301      	adds	r3, #1
 801565e:	4213      	tst	r3, r2
 8015660:	d10a      	bne.n	8015678 <_dtoa_r+0xa3c>
 8015662:	2c39      	cmp	r4, #57	; 0x39
 8015664:	d026      	beq.n	80156b4 <_dtoa_r+0xa78>
 8015666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015668:	2b00      	cmp	r3, #0
 801566a:	dd01      	ble.n	8015670 <_dtoa_r+0xa34>
 801566c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801566e:	3431      	adds	r4, #49	; 0x31
 8015670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015672:	1c5d      	adds	r5, r3, #1
 8015674:	701c      	strb	r4, [r3, #0]
 8015676:	e781      	b.n	801557c <_dtoa_r+0x940>
 8015678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801567a:	2b00      	cmp	r3, #0
 801567c:	db07      	blt.n	801568e <_dtoa_r+0xa52>
 801567e:	001d      	movs	r5, r3
 8015680:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015682:	431d      	orrs	r5, r3
 8015684:	d122      	bne.n	80156cc <_dtoa_r+0xa90>
 8015686:	2301      	movs	r3, #1
 8015688:	9a06      	ldr	r2, [sp, #24]
 801568a:	4213      	tst	r3, r2
 801568c:	d11e      	bne.n	80156cc <_dtoa_r+0xa90>
 801568e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015690:	2b00      	cmp	r3, #0
 8015692:	dded      	ble.n	8015670 <_dtoa_r+0xa34>
 8015694:	9903      	ldr	r1, [sp, #12]
 8015696:	2201      	movs	r2, #1
 8015698:	9802      	ldr	r0, [sp, #8]
 801569a:	f000 fef5 	bl	8016488 <__lshift>
 801569e:	9904      	ldr	r1, [sp, #16]
 80156a0:	9003      	str	r0, [sp, #12]
 80156a2:	f000 ff43 	bl	801652c <__mcmp>
 80156a6:	2800      	cmp	r0, #0
 80156a8:	dc02      	bgt.n	80156b0 <_dtoa_r+0xa74>
 80156aa:	d1e1      	bne.n	8015670 <_dtoa_r+0xa34>
 80156ac:	07e3      	lsls	r3, r4, #31
 80156ae:	d5df      	bpl.n	8015670 <_dtoa_r+0xa34>
 80156b0:	2c39      	cmp	r4, #57	; 0x39
 80156b2:	d1db      	bne.n	801566c <_dtoa_r+0xa30>
 80156b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156b8:	1c5d      	adds	r5, r3, #1
 80156ba:	2339      	movs	r3, #57	; 0x39
 80156bc:	7013      	strb	r3, [r2, #0]
 80156be:	1e6b      	subs	r3, r5, #1
 80156c0:	781a      	ldrb	r2, [r3, #0]
 80156c2:	2a39      	cmp	r2, #57	; 0x39
 80156c4:	d067      	beq.n	8015796 <_dtoa_r+0xb5a>
 80156c6:	3201      	adds	r2, #1
 80156c8:	701a      	strb	r2, [r3, #0]
 80156ca:	e757      	b.n	801557c <_dtoa_r+0x940>
 80156cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156ce:	1c5d      	adds	r5, r3, #1
 80156d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	dd04      	ble.n	80156e0 <_dtoa_r+0xaa4>
 80156d6:	2c39      	cmp	r4, #57	; 0x39
 80156d8:	d0ec      	beq.n	80156b4 <_dtoa_r+0xa78>
 80156da:	3401      	adds	r4, #1
 80156dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156de:	e7c9      	b.n	8015674 <_dtoa_r+0xa38>
 80156e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156e4:	701c      	strb	r4, [r3, #0]
 80156e6:	9b08      	ldr	r3, [sp, #32]
 80156e8:	1aeb      	subs	r3, r5, r3
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d03e      	beq.n	801576c <_dtoa_r+0xb30>
 80156ee:	2300      	movs	r3, #0
 80156f0:	220a      	movs	r2, #10
 80156f2:	9903      	ldr	r1, [sp, #12]
 80156f4:	9802      	ldr	r0, [sp, #8]
 80156f6:	f000 fd27 	bl	8016148 <__multadd>
 80156fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156fc:	9003      	str	r0, [sp, #12]
 80156fe:	42b3      	cmp	r3, r6
 8015700:	d109      	bne.n	8015716 <_dtoa_r+0xada>
 8015702:	2300      	movs	r3, #0
 8015704:	220a      	movs	r2, #10
 8015706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015708:	9802      	ldr	r0, [sp, #8]
 801570a:	f000 fd1d 	bl	8016148 <__multadd>
 801570e:	9009      	str	r0, [sp, #36]	; 0x24
 8015710:	0006      	movs	r6, r0
 8015712:	950a      	str	r5, [sp, #40]	; 0x28
 8015714:	e77d      	b.n	8015612 <_dtoa_r+0x9d6>
 8015716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015718:	2300      	movs	r3, #0
 801571a:	220a      	movs	r2, #10
 801571c:	9802      	ldr	r0, [sp, #8]
 801571e:	f000 fd13 	bl	8016148 <__multadd>
 8015722:	2300      	movs	r3, #0
 8015724:	9009      	str	r0, [sp, #36]	; 0x24
 8015726:	220a      	movs	r2, #10
 8015728:	0031      	movs	r1, r6
 801572a:	9802      	ldr	r0, [sp, #8]
 801572c:	f000 fd0c 	bl	8016148 <__multadd>
 8015730:	e7ee      	b.n	8015710 <_dtoa_r+0xad4>
 8015732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015734:	930c      	str	r3, [sp, #48]	; 0x30
 8015736:	9b08      	ldr	r3, [sp, #32]
 8015738:	9306      	str	r3, [sp, #24]
 801573a:	9904      	ldr	r1, [sp, #16]
 801573c:	9803      	ldr	r0, [sp, #12]
 801573e:	f7ff f9f7 	bl	8014b30 <quorem>
 8015742:	9b06      	ldr	r3, [sp, #24]
 8015744:	3030      	adds	r0, #48	; 0x30
 8015746:	1c5d      	adds	r5, r3, #1
 8015748:	7018      	strb	r0, [r3, #0]
 801574a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801574c:	9b08      	ldr	r3, [sp, #32]
 801574e:	0004      	movs	r4, r0
 8015750:	1aeb      	subs	r3, r5, r3
 8015752:	429a      	cmp	r2, r3
 8015754:	dd08      	ble.n	8015768 <_dtoa_r+0xb2c>
 8015756:	2300      	movs	r3, #0
 8015758:	220a      	movs	r2, #10
 801575a:	9903      	ldr	r1, [sp, #12]
 801575c:	9802      	ldr	r0, [sp, #8]
 801575e:	f000 fcf3 	bl	8016148 <__multadd>
 8015762:	9506      	str	r5, [sp, #24]
 8015764:	9003      	str	r0, [sp, #12]
 8015766:	e7e8      	b.n	801573a <_dtoa_r+0xafe>
 8015768:	2300      	movs	r3, #0
 801576a:	9309      	str	r3, [sp, #36]	; 0x24
 801576c:	9903      	ldr	r1, [sp, #12]
 801576e:	2201      	movs	r2, #1
 8015770:	9802      	ldr	r0, [sp, #8]
 8015772:	f000 fe89 	bl	8016488 <__lshift>
 8015776:	9904      	ldr	r1, [sp, #16]
 8015778:	9003      	str	r0, [sp, #12]
 801577a:	f000 fed7 	bl	801652c <__mcmp>
 801577e:	2800      	cmp	r0, #0
 8015780:	dc9d      	bgt.n	80156be <_dtoa_r+0xa82>
 8015782:	d101      	bne.n	8015788 <_dtoa_r+0xb4c>
 8015784:	07e3      	lsls	r3, r4, #31
 8015786:	d49a      	bmi.n	80156be <_dtoa_r+0xa82>
 8015788:	1e6b      	subs	r3, r5, #1
 801578a:	781a      	ldrb	r2, [r3, #0]
 801578c:	2a30      	cmp	r2, #48	; 0x30
 801578e:	d000      	beq.n	8015792 <_dtoa_r+0xb56>
 8015790:	e6f4      	b.n	801557c <_dtoa_r+0x940>
 8015792:	001d      	movs	r5, r3
 8015794:	e7f8      	b.n	8015788 <_dtoa_r+0xb4c>
 8015796:	9a08      	ldr	r2, [sp, #32]
 8015798:	429a      	cmp	r2, r3
 801579a:	d103      	bne.n	80157a4 <_dtoa_r+0xb68>
 801579c:	2331      	movs	r3, #49	; 0x31
 801579e:	3701      	adds	r7, #1
 80157a0:	7013      	strb	r3, [r2, #0]
 80157a2:	e6eb      	b.n	801557c <_dtoa_r+0x940>
 80157a4:	001d      	movs	r5, r3
 80157a6:	e78a      	b.n	80156be <_dtoa_r+0xa82>
 80157a8:	4b0b      	ldr	r3, [pc, #44]	; (80157d8 <_dtoa_r+0xb9c>)
 80157aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157ac:	9308      	str	r3, [sp, #32]
 80157ae:	4b0b      	ldr	r3, [pc, #44]	; (80157dc <_dtoa_r+0xba0>)
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	d001      	beq.n	80157b8 <_dtoa_r+0xb7c>
 80157b4:	f7ff fa75 	bl	8014ca2 <_dtoa_r+0x66>
 80157b8:	f7ff fa75 	bl	8014ca6 <_dtoa_r+0x6a>
 80157bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157be:	2b01      	cmp	r3, #1
 80157c0:	dc00      	bgt.n	80157c4 <_dtoa_r+0xb88>
 80157c2:	e621      	b.n	8015408 <_dtoa_r+0x7cc>
 80157c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80157c6:	2001      	movs	r0, #1
 80157c8:	e635      	b.n	8015436 <_dtoa_r+0x7fa>
 80157ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	dcb2      	bgt.n	8015736 <_dtoa_r+0xafa>
 80157d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157d2:	2b02      	cmp	r3, #2
 80157d4:	ddaf      	ble.n	8015736 <_dtoa_r+0xafa>
 80157d6:	e6bc      	b.n	8015552 <_dtoa_r+0x916>
 80157d8:	08019bb5 	.word	0x08019bb5
 80157dc:	08019bbd 	.word	0x08019bbd

080157e0 <__errno>:
 80157e0:	4b01      	ldr	r3, [pc, #4]	; (80157e8 <__errno+0x8>)
 80157e2:	6818      	ldr	r0, [r3, #0]
 80157e4:	4770      	bx	lr
 80157e6:	46c0      	nop			; (mov r8, r8)
 80157e8:	200000cc 	.word	0x200000cc

080157ec <__libc_fini_array>:
 80157ec:	b570      	push	{r4, r5, r6, lr}
 80157ee:	4d07      	ldr	r5, [pc, #28]	; (801580c <__libc_fini_array+0x20>)
 80157f0:	4c07      	ldr	r4, [pc, #28]	; (8015810 <__libc_fini_array+0x24>)
 80157f2:	1b64      	subs	r4, r4, r5
 80157f4:	10a4      	asrs	r4, r4, #2
 80157f6:	2c00      	cmp	r4, #0
 80157f8:	d102      	bne.n	8015800 <__libc_fini_array+0x14>
 80157fa:	f001 f95b 	bl	8016ab4 <_fini>
 80157fe:	bd70      	pop	{r4, r5, r6, pc}
 8015800:	3c01      	subs	r4, #1
 8015802:	00a3      	lsls	r3, r4, #2
 8015804:	58eb      	ldr	r3, [r5, r3]
 8015806:	4798      	blx	r3
 8015808:	e7f5      	b.n	80157f6 <__libc_fini_array+0xa>
 801580a:	46c0      	nop			; (mov r8, r8)
 801580c:	08019cd4 	.word	0x08019cd4
 8015810:	08019cd8 	.word	0x08019cd8

08015814 <_malloc_trim_r>:
 8015814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015816:	0005      	movs	r5, r0
 8015818:	2008      	movs	r0, #8
 801581a:	000c      	movs	r4, r1
 801581c:	f7ff f95c 	bl	8014ad8 <sysconf>
 8015820:	0007      	movs	r7, r0
 8015822:	0028      	movs	r0, r5
 8015824:	f7fc fd88 	bl	8012338 <__malloc_lock>
 8015828:	2203      	movs	r2, #3
 801582a:	4e21      	ldr	r6, [pc, #132]	; (80158b0 <_malloc_trim_r+0x9c>)
 801582c:	0039      	movs	r1, r7
 801582e:	68b3      	ldr	r3, [r6, #8]
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	4393      	bics	r3, r2
 8015834:	1b18      	subs	r0, r3, r4
 8015836:	3811      	subs	r0, #17
 8015838:	19c0      	adds	r0, r0, r7
 801583a:	9301      	str	r3, [sp, #4]
 801583c:	f7ea fc88 	bl	8000150 <__udivsi3>
 8015840:	1e44      	subs	r4, r0, #1
 8015842:	437c      	muls	r4, r7
 8015844:	42a7      	cmp	r7, r4
 8015846:	dd04      	ble.n	8015852 <_malloc_trim_r+0x3e>
 8015848:	0028      	movs	r0, r5
 801584a:	f7fc fd7d 	bl	8012348 <__malloc_unlock>
 801584e:	2000      	movs	r0, #0
 8015850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015852:	2100      	movs	r1, #0
 8015854:	0028      	movs	r0, r5
 8015856:	f7fc ff4f 	bl	80126f8 <_sbrk_r>
 801585a:	68b3      	ldr	r3, [r6, #8]
 801585c:	9a01      	ldr	r2, [sp, #4]
 801585e:	189b      	adds	r3, r3, r2
 8015860:	4298      	cmp	r0, r3
 8015862:	d1f1      	bne.n	8015848 <_malloc_trim_r+0x34>
 8015864:	4261      	negs	r1, r4
 8015866:	0028      	movs	r0, r5
 8015868:	f7fc ff46 	bl	80126f8 <_sbrk_r>
 801586c:	1c43      	adds	r3, r0, #1
 801586e:	d110      	bne.n	8015892 <_malloc_trim_r+0x7e>
 8015870:	2100      	movs	r1, #0
 8015872:	0028      	movs	r0, r5
 8015874:	f7fc ff40 	bl	80126f8 <_sbrk_r>
 8015878:	68b2      	ldr	r2, [r6, #8]
 801587a:	1a81      	subs	r1, r0, r2
 801587c:	290f      	cmp	r1, #15
 801587e:	dde3      	ble.n	8015848 <_malloc_trim_r+0x34>
 8015880:	4b0c      	ldr	r3, [pc, #48]	; (80158b4 <_malloc_trim_r+0xa0>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	1ac0      	subs	r0, r0, r3
 8015886:	4b0c      	ldr	r3, [pc, #48]	; (80158b8 <_malloc_trim_r+0xa4>)
 8015888:	6018      	str	r0, [r3, #0]
 801588a:	2301      	movs	r3, #1
 801588c:	430b      	orrs	r3, r1
 801588e:	6053      	str	r3, [r2, #4]
 8015890:	e7da      	b.n	8015848 <_malloc_trim_r+0x34>
 8015892:	68b2      	ldr	r2, [r6, #8]
 8015894:	2601      	movs	r6, #1
 8015896:	9b01      	ldr	r3, [sp, #4]
 8015898:	0028      	movs	r0, r5
 801589a:	1b1b      	subs	r3, r3, r4
 801589c:	4333      	orrs	r3, r6
 801589e:	6053      	str	r3, [r2, #4]
 80158a0:	4b05      	ldr	r3, [pc, #20]	; (80158b8 <_malloc_trim_r+0xa4>)
 80158a2:	681a      	ldr	r2, [r3, #0]
 80158a4:	1b14      	subs	r4, r2, r4
 80158a6:	601c      	str	r4, [r3, #0]
 80158a8:	f7fc fd4e 	bl	8012348 <__malloc_unlock>
 80158ac:	0030      	movs	r0, r6
 80158ae:	e7cf      	b.n	8015850 <_malloc_trim_r+0x3c>
 80158b0:	20000664 	.word	0x20000664
 80158b4:	20000a6c 	.word	0x20000a6c
 80158b8:	20006788 	.word	0x20006788

080158bc <_free_r>:
 80158bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158be:	1e0d      	subs	r5, r1, #0
 80158c0:	9001      	str	r0, [sp, #4]
 80158c2:	d02d      	beq.n	8015920 <_free_r+0x64>
 80158c4:	f7fc fd38 	bl	8012338 <__malloc_lock>
 80158c8:	2301      	movs	r3, #1
 80158ca:	0029      	movs	r1, r5
 80158cc:	469c      	mov	ip, r3
 80158ce:	3908      	subs	r1, #8
 80158d0:	684f      	ldr	r7, [r1, #4]
 80158d2:	4662      	mov	r2, ip
 80158d4:	003b      	movs	r3, r7
 80158d6:	4666      	mov	r6, ip
 80158d8:	4393      	bics	r3, r2
 80158da:	18c8      	adds	r0, r1, r3
 80158dc:	6845      	ldr	r5, [r0, #4]
 80158de:	3202      	adds	r2, #2
 80158e0:	4395      	bics	r5, r2
 80158e2:	4a4a      	ldr	r2, [pc, #296]	; (8015a0c <_free_r+0x150>)
 80158e4:	4037      	ands	r7, r6
 80158e6:	6896      	ldr	r6, [r2, #8]
 80158e8:	4286      	cmp	r6, r0
 80158ea:	d11a      	bne.n	8015922 <_free_r+0x66>
 80158ec:	195b      	adds	r3, r3, r5
 80158ee:	2f00      	cmp	r7, #0
 80158f0:	d106      	bne.n	8015900 <_free_r+0x44>
 80158f2:	6808      	ldr	r0, [r1, #0]
 80158f4:	1a09      	subs	r1, r1, r0
 80158f6:	688d      	ldr	r5, [r1, #8]
 80158f8:	181b      	adds	r3, r3, r0
 80158fa:	68c8      	ldr	r0, [r1, #12]
 80158fc:	60e8      	str	r0, [r5, #12]
 80158fe:	6085      	str	r5, [r0, #8]
 8015900:	2001      	movs	r0, #1
 8015902:	4318      	orrs	r0, r3
 8015904:	6048      	str	r0, [r1, #4]
 8015906:	6091      	str	r1, [r2, #8]
 8015908:	4a41      	ldr	r2, [pc, #260]	; (8015a10 <_free_r+0x154>)
 801590a:	6812      	ldr	r2, [r2, #0]
 801590c:	429a      	cmp	r2, r3
 801590e:	d804      	bhi.n	801591a <_free_r+0x5e>
 8015910:	4b40      	ldr	r3, [pc, #256]	; (8015a14 <_free_r+0x158>)
 8015912:	9801      	ldr	r0, [sp, #4]
 8015914:	6819      	ldr	r1, [r3, #0]
 8015916:	f7ff ff7d 	bl	8015814 <_malloc_trim_r>
 801591a:	9801      	ldr	r0, [sp, #4]
 801591c:	f7fc fd14 	bl	8012348 <__malloc_unlock>
 8015920:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015922:	2600      	movs	r6, #0
 8015924:	6045      	str	r5, [r0, #4]
 8015926:	42b7      	cmp	r7, r6
 8015928:	d109      	bne.n	801593e <_free_r+0x82>
 801592a:	680f      	ldr	r7, [r1, #0]
 801592c:	4c3a      	ldr	r4, [pc, #232]	; (8015a18 <_free_r+0x15c>)
 801592e:	1bc9      	subs	r1, r1, r7
 8015930:	19db      	adds	r3, r3, r7
 8015932:	688f      	ldr	r7, [r1, #8]
 8015934:	42a7      	cmp	r7, r4
 8015936:	d02b      	beq.n	8015990 <_free_r+0xd4>
 8015938:	68cc      	ldr	r4, [r1, #12]
 801593a:	60fc      	str	r4, [r7, #12]
 801593c:	60a7      	str	r7, [r4, #8]
 801593e:	1947      	adds	r7, r0, r5
 8015940:	687c      	ldr	r4, [r7, #4]
 8015942:	2701      	movs	r7, #1
 8015944:	423c      	tst	r4, r7
 8015946:	d10b      	bne.n	8015960 <_free_r+0xa4>
 8015948:	195b      	adds	r3, r3, r5
 801594a:	6885      	ldr	r5, [r0, #8]
 801594c:	2e00      	cmp	r6, #0
 801594e:	d121      	bne.n	8015994 <_free_r+0xd8>
 8015950:	4c31      	ldr	r4, [pc, #196]	; (8015a18 <_free_r+0x15c>)
 8015952:	42a5      	cmp	r5, r4
 8015954:	d11e      	bne.n	8015994 <_free_r+0xd8>
 8015956:	003e      	movs	r6, r7
 8015958:	6151      	str	r1, [r2, #20]
 801595a:	6111      	str	r1, [r2, #16]
 801595c:	60cd      	str	r5, [r1, #12]
 801595e:	608d      	str	r5, [r1, #8]
 8015960:	2001      	movs	r0, #1
 8015962:	0005      	movs	r5, r0
 8015964:	431d      	orrs	r5, r3
 8015966:	604d      	str	r5, [r1, #4]
 8015968:	50cb      	str	r3, [r1, r3]
 801596a:	2e00      	cmp	r6, #0
 801596c:	d1d5      	bne.n	801591a <_free_r+0x5e>
 801596e:	4d2b      	ldr	r5, [pc, #172]	; (8015a1c <_free_r+0x160>)
 8015970:	42ab      	cmp	r3, r5
 8015972:	d813      	bhi.n	801599c <_free_r+0xe0>
 8015974:	08db      	lsrs	r3, r3, #3
 8015976:	109d      	asrs	r5, r3, #2
 8015978:	40a8      	lsls	r0, r5
 801597a:	6854      	ldr	r4, [r2, #4]
 801597c:	00db      	lsls	r3, r3, #3
 801597e:	4320      	orrs	r0, r4
 8015980:	6050      	str	r0, [r2, #4]
 8015982:	189a      	adds	r2, r3, r2
 8015984:	6893      	ldr	r3, [r2, #8]
 8015986:	60ca      	str	r2, [r1, #12]
 8015988:	608b      	str	r3, [r1, #8]
 801598a:	6091      	str	r1, [r2, #8]
 801598c:	60d9      	str	r1, [r3, #12]
 801598e:	e7c4      	b.n	801591a <_free_r+0x5e>
 8015990:	4666      	mov	r6, ip
 8015992:	e7d4      	b.n	801593e <_free_r+0x82>
 8015994:	68c0      	ldr	r0, [r0, #12]
 8015996:	60e8      	str	r0, [r5, #12]
 8015998:	6085      	str	r5, [r0, #8]
 801599a:	e7e1      	b.n	8015960 <_free_r+0xa4>
 801599c:	0a5d      	lsrs	r5, r3, #9
 801599e:	2d04      	cmp	r5, #4
 80159a0:	d812      	bhi.n	80159c8 <_free_r+0x10c>
 80159a2:	0998      	lsrs	r0, r3, #6
 80159a4:	3038      	adds	r0, #56	; 0x38
 80159a6:	00c6      	lsls	r6, r0, #3
 80159a8:	18b6      	adds	r6, r6, r2
 80159aa:	68b5      	ldr	r5, [r6, #8]
 80159ac:	2703      	movs	r7, #3
 80159ae:	42ae      	cmp	r6, r5
 80159b0:	d125      	bne.n	80159fe <_free_r+0x142>
 80159b2:	2301      	movs	r3, #1
 80159b4:	1080      	asrs	r0, r0, #2
 80159b6:	4083      	lsls	r3, r0
 80159b8:	6850      	ldr	r0, [r2, #4]
 80159ba:	4303      	orrs	r3, r0
 80159bc:	6053      	str	r3, [r2, #4]
 80159be:	60ce      	str	r6, [r1, #12]
 80159c0:	608d      	str	r5, [r1, #8]
 80159c2:	60b1      	str	r1, [r6, #8]
 80159c4:	60e9      	str	r1, [r5, #12]
 80159c6:	e7a8      	b.n	801591a <_free_r+0x5e>
 80159c8:	2d14      	cmp	r5, #20
 80159ca:	d802      	bhi.n	80159d2 <_free_r+0x116>
 80159cc:	0028      	movs	r0, r5
 80159ce:	305b      	adds	r0, #91	; 0x5b
 80159d0:	e7e9      	b.n	80159a6 <_free_r+0xea>
 80159d2:	2d54      	cmp	r5, #84	; 0x54
 80159d4:	d802      	bhi.n	80159dc <_free_r+0x120>
 80159d6:	0b18      	lsrs	r0, r3, #12
 80159d8:	306e      	adds	r0, #110	; 0x6e
 80159da:	e7e4      	b.n	80159a6 <_free_r+0xea>
 80159dc:	20aa      	movs	r0, #170	; 0xaa
 80159de:	0040      	lsls	r0, r0, #1
 80159e0:	4285      	cmp	r5, r0
 80159e2:	d802      	bhi.n	80159ea <_free_r+0x12e>
 80159e4:	0bd8      	lsrs	r0, r3, #15
 80159e6:	3077      	adds	r0, #119	; 0x77
 80159e8:	e7dd      	b.n	80159a6 <_free_r+0xea>
 80159ea:	4e0d      	ldr	r6, [pc, #52]	; (8015a20 <_free_r+0x164>)
 80159ec:	207e      	movs	r0, #126	; 0x7e
 80159ee:	42b5      	cmp	r5, r6
 80159f0:	d8d9      	bhi.n	80159a6 <_free_r+0xea>
 80159f2:	0c98      	lsrs	r0, r3, #18
 80159f4:	307c      	adds	r0, #124	; 0x7c
 80159f6:	e7d6      	b.n	80159a6 <_free_r+0xea>
 80159f8:	68ad      	ldr	r5, [r5, #8]
 80159fa:	42ae      	cmp	r6, r5
 80159fc:	d003      	beq.n	8015a06 <_free_r+0x14a>
 80159fe:	686a      	ldr	r2, [r5, #4]
 8015a00:	43ba      	bics	r2, r7
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d8f8      	bhi.n	80159f8 <_free_r+0x13c>
 8015a06:	68ee      	ldr	r6, [r5, #12]
 8015a08:	e7d9      	b.n	80159be <_free_r+0x102>
 8015a0a:	46c0      	nop			; (mov r8, r8)
 8015a0c:	20000664 	.word	0x20000664
 8015a10:	20000a70 	.word	0x20000a70
 8015a14:	200067b8 	.word	0x200067b8
 8015a18:	2000066c 	.word	0x2000066c
 8015a1c:	000001ff 	.word	0x000001ff
 8015a20:	00000554 	.word	0x00000554

08015a24 <rshift>:
 8015a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a26:	0004      	movs	r4, r0
 8015a28:	6905      	ldr	r5, [r0, #16]
 8015a2a:	3414      	adds	r4, #20
 8015a2c:	114b      	asrs	r3, r1, #5
 8015a2e:	0026      	movs	r6, r4
 8015a30:	429d      	cmp	r5, r3
 8015a32:	dd14      	ble.n	8015a5e <rshift+0x3a>
 8015a34:	221f      	movs	r2, #31
 8015a36:	00ad      	lsls	r5, r5, #2
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	4011      	ands	r1, r2
 8015a3c:	1965      	adds	r5, r4, r5
 8015a3e:	18e3      	adds	r3, r4, r3
 8015a40:	0022      	movs	r2, r4
 8015a42:	2900      	cmp	r1, #0
 8015a44:	d01e      	beq.n	8015a84 <rshift+0x60>
 8015a46:	cb04      	ldmia	r3!, {r2}
 8015a48:	2720      	movs	r7, #32
 8015a4a:	40ca      	lsrs	r2, r1
 8015a4c:	46a4      	mov	ip, r4
 8015a4e:	1a7f      	subs	r7, r7, r1
 8015a50:	4666      	mov	r6, ip
 8015a52:	429d      	cmp	r5, r3
 8015a54:	d80b      	bhi.n	8015a6e <rshift+0x4a>
 8015a56:	6032      	str	r2, [r6, #0]
 8015a58:	2a00      	cmp	r2, #0
 8015a5a:	d000      	beq.n	8015a5e <rshift+0x3a>
 8015a5c:	3604      	adds	r6, #4
 8015a5e:	1b33      	subs	r3, r6, r4
 8015a60:	109b      	asrs	r3, r3, #2
 8015a62:	6103      	str	r3, [r0, #16]
 8015a64:	42a6      	cmp	r6, r4
 8015a66:	d101      	bne.n	8015a6c <rshift+0x48>
 8015a68:	2300      	movs	r3, #0
 8015a6a:	6143      	str	r3, [r0, #20]
 8015a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a6e:	681e      	ldr	r6, [r3, #0]
 8015a70:	40be      	lsls	r6, r7
 8015a72:	4332      	orrs	r2, r6
 8015a74:	4666      	mov	r6, ip
 8015a76:	c604      	stmia	r6!, {r2}
 8015a78:	cb04      	ldmia	r3!, {r2}
 8015a7a:	46b4      	mov	ip, r6
 8015a7c:	40ca      	lsrs	r2, r1
 8015a7e:	e7e7      	b.n	8015a50 <rshift+0x2c>
 8015a80:	cb02      	ldmia	r3!, {r1}
 8015a82:	c202      	stmia	r2!, {r1}
 8015a84:	0016      	movs	r6, r2
 8015a86:	429d      	cmp	r5, r3
 8015a88:	d8fa      	bhi.n	8015a80 <rshift+0x5c>
 8015a8a:	e7e8      	b.n	8015a5e <rshift+0x3a>

08015a8c <__hexdig_fun>:
 8015a8c:	0003      	movs	r3, r0
 8015a8e:	3b30      	subs	r3, #48	; 0x30
 8015a90:	2b09      	cmp	r3, #9
 8015a92:	d803      	bhi.n	8015a9c <__hexdig_fun+0x10>
 8015a94:	3820      	subs	r0, #32
 8015a96:	b2c3      	uxtb	r3, r0
 8015a98:	0018      	movs	r0, r3
 8015a9a:	4770      	bx	lr
 8015a9c:	0003      	movs	r3, r0
 8015a9e:	3b61      	subs	r3, #97	; 0x61
 8015aa0:	2b05      	cmp	r3, #5
 8015aa2:	d801      	bhi.n	8015aa8 <__hexdig_fun+0x1c>
 8015aa4:	3847      	subs	r0, #71	; 0x47
 8015aa6:	e7f6      	b.n	8015a96 <__hexdig_fun+0xa>
 8015aa8:	0002      	movs	r2, r0
 8015aaa:	3a41      	subs	r2, #65	; 0x41
 8015aac:	2300      	movs	r3, #0
 8015aae:	2a05      	cmp	r2, #5
 8015ab0:	d8f2      	bhi.n	8015a98 <__hexdig_fun+0xc>
 8015ab2:	3827      	subs	r0, #39	; 0x27
 8015ab4:	e7ef      	b.n	8015a96 <__hexdig_fun+0xa>

08015ab6 <__gethex>:
 8015ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ab8:	b08d      	sub	sp, #52	; 0x34
 8015aba:	9005      	str	r0, [sp, #20]
 8015abc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015abe:	9109      	str	r1, [sp, #36]	; 0x24
 8015ac0:	9202      	str	r2, [sp, #8]
 8015ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8015ac4:	f000 fadf 	bl	8016086 <__localeconv_l>
 8015ac8:	6803      	ldr	r3, [r0, #0]
 8015aca:	0018      	movs	r0, r3
 8015acc:	9307      	str	r3, [sp, #28]
 8015ace:	f7ea fb23 	bl	8000118 <strlen>
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	9b07      	ldr	r3, [sp, #28]
 8015ad6:	4252      	negs	r2, r2
 8015ad8:	181b      	adds	r3, r3, r0
 8015ada:	3b01      	subs	r3, #1
 8015adc:	781b      	ldrb	r3, [r3, #0]
 8015ade:	9004      	str	r0, [sp, #16]
 8015ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ae4:	6819      	ldr	r1, [r3, #0]
 8015ae6:	1c8b      	adds	r3, r1, #2
 8015ae8:	1a52      	subs	r2, r2, r1
 8015aea:	18d1      	adds	r1, r2, r3
 8015aec:	9301      	str	r3, [sp, #4]
 8015aee:	9108      	str	r1, [sp, #32]
 8015af0:	9901      	ldr	r1, [sp, #4]
 8015af2:	3301      	adds	r3, #1
 8015af4:	7808      	ldrb	r0, [r1, #0]
 8015af6:	2830      	cmp	r0, #48	; 0x30
 8015af8:	d0f7      	beq.n	8015aea <__gethex+0x34>
 8015afa:	f7ff ffc7 	bl	8015a8c <__hexdig_fun>
 8015afe:	1e07      	subs	r7, r0, #0
 8015b00:	d000      	beq.n	8015b04 <__gethex+0x4e>
 8015b02:	e06f      	b.n	8015be4 <__gethex+0x12e>
 8015b04:	9a04      	ldr	r2, [sp, #16]
 8015b06:	9907      	ldr	r1, [sp, #28]
 8015b08:	9801      	ldr	r0, [sp, #4]
 8015b0a:	f7fc fe4b 	bl	80127a4 <strncmp>
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	d000      	beq.n	8015b14 <__gethex+0x5e>
 8015b12:	e06d      	b.n	8015bf0 <__gethex+0x13a>
 8015b14:	9b01      	ldr	r3, [sp, #4]
 8015b16:	9a04      	ldr	r2, [sp, #16]
 8015b18:	189c      	adds	r4, r3, r2
 8015b1a:	7820      	ldrb	r0, [r4, #0]
 8015b1c:	f7ff ffb6 	bl	8015a8c <__hexdig_fun>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	d069      	beq.n	8015bf8 <__gethex+0x142>
 8015b24:	9401      	str	r4, [sp, #4]
 8015b26:	9b01      	ldr	r3, [sp, #4]
 8015b28:	7818      	ldrb	r0, [r3, #0]
 8015b2a:	2830      	cmp	r0, #48	; 0x30
 8015b2c:	d009      	beq.n	8015b42 <__gethex+0x8c>
 8015b2e:	f7ff ffad 	bl	8015a8c <__hexdig_fun>
 8015b32:	4243      	negs	r3, r0
 8015b34:	4143      	adcs	r3, r0
 8015b36:	9303      	str	r3, [sp, #12]
 8015b38:	2301      	movs	r3, #1
 8015b3a:	0026      	movs	r6, r4
 8015b3c:	9308      	str	r3, [sp, #32]
 8015b3e:	9c01      	ldr	r4, [sp, #4]
 8015b40:	e004      	b.n	8015b4c <__gethex+0x96>
 8015b42:	9b01      	ldr	r3, [sp, #4]
 8015b44:	3301      	adds	r3, #1
 8015b46:	9301      	str	r3, [sp, #4]
 8015b48:	e7ed      	b.n	8015b26 <__gethex+0x70>
 8015b4a:	3401      	adds	r4, #1
 8015b4c:	7820      	ldrb	r0, [r4, #0]
 8015b4e:	f7ff ff9d 	bl	8015a8c <__hexdig_fun>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d1f9      	bne.n	8015b4a <__gethex+0x94>
 8015b56:	9a04      	ldr	r2, [sp, #16]
 8015b58:	9907      	ldr	r1, [sp, #28]
 8015b5a:	0020      	movs	r0, r4
 8015b5c:	f7fc fe22 	bl	80127a4 <strncmp>
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d109      	bne.n	8015b78 <__gethex+0xc2>
 8015b64:	2e00      	cmp	r6, #0
 8015b66:	d10a      	bne.n	8015b7e <__gethex+0xc8>
 8015b68:	9b04      	ldr	r3, [sp, #16]
 8015b6a:	18e4      	adds	r4, r4, r3
 8015b6c:	0026      	movs	r6, r4
 8015b6e:	7820      	ldrb	r0, [r4, #0]
 8015b70:	f7ff ff8c 	bl	8015a8c <__hexdig_fun>
 8015b74:	2800      	cmp	r0, #0
 8015b76:	d139      	bne.n	8015bec <__gethex+0x136>
 8015b78:	2700      	movs	r7, #0
 8015b7a:	42be      	cmp	r6, r7
 8015b7c:	d001      	beq.n	8015b82 <__gethex+0xcc>
 8015b7e:	1b37      	subs	r7, r6, r4
 8015b80:	00bf      	lsls	r7, r7, #2
 8015b82:	7823      	ldrb	r3, [r4, #0]
 8015b84:	2b50      	cmp	r3, #80	; 0x50
 8015b86:	d001      	beq.n	8015b8c <__gethex+0xd6>
 8015b88:	2b70      	cmp	r3, #112	; 0x70
 8015b8a:	d142      	bne.n	8015c12 <__gethex+0x15c>
 8015b8c:	7863      	ldrb	r3, [r4, #1]
 8015b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8015b90:	d034      	beq.n	8015bfc <__gethex+0x146>
 8015b92:	2b2d      	cmp	r3, #45	; 0x2d
 8015b94:	d036      	beq.n	8015c04 <__gethex+0x14e>
 8015b96:	2300      	movs	r3, #0
 8015b98:	1c66      	adds	r6, r4, #1
 8015b9a:	9306      	str	r3, [sp, #24]
 8015b9c:	7830      	ldrb	r0, [r6, #0]
 8015b9e:	f7ff ff75 	bl	8015a8c <__hexdig_fun>
 8015ba2:	1e43      	subs	r3, r0, #1
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b18      	cmp	r3, #24
 8015ba8:	d833      	bhi.n	8015c12 <__gethex+0x15c>
 8015baa:	3810      	subs	r0, #16
 8015bac:	0005      	movs	r5, r0
 8015bae:	3601      	adds	r6, #1
 8015bb0:	7830      	ldrb	r0, [r6, #0]
 8015bb2:	f7ff ff6b 	bl	8015a8c <__hexdig_fun>
 8015bb6:	1e43      	subs	r3, r0, #1
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2b18      	cmp	r3, #24
 8015bbc:	d924      	bls.n	8015c08 <__gethex+0x152>
 8015bbe:	9b06      	ldr	r3, [sp, #24]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d000      	beq.n	8015bc6 <__gethex+0x110>
 8015bc4:	426d      	negs	r5, r5
 8015bc6:	197f      	adds	r7, r7, r5
 8015bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bca:	601e      	str	r6, [r3, #0]
 8015bcc:	9b03      	ldr	r3, [sp, #12]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d021      	beq.n	8015c16 <__gethex+0x160>
 8015bd2:	9b08      	ldr	r3, [sp, #32]
 8015bd4:	2606      	movs	r6, #6
 8015bd6:	425a      	negs	r2, r3
 8015bd8:	4153      	adcs	r3, r2
 8015bda:	425b      	negs	r3, r3
 8015bdc:	401e      	ands	r6, r3
 8015bde:	0030      	movs	r0, r6
 8015be0:	b00d      	add	sp, #52	; 0x34
 8015be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015be4:	2300      	movs	r3, #0
 8015be6:	9303      	str	r3, [sp, #12]
 8015be8:	001e      	movs	r6, r3
 8015bea:	e7a8      	b.n	8015b3e <__gethex+0x88>
 8015bec:	3401      	adds	r4, #1
 8015bee:	e7be      	b.n	8015b6e <__gethex+0xb8>
 8015bf0:	9c01      	ldr	r4, [sp, #4]
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	9303      	str	r3, [sp, #12]
 8015bf6:	e7c4      	b.n	8015b82 <__gethex+0xcc>
 8015bf8:	0007      	movs	r7, r0
 8015bfa:	e7fa      	b.n	8015bf2 <__gethex+0x13c>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	9306      	str	r3, [sp, #24]
 8015c00:	1ca6      	adds	r6, r4, #2
 8015c02:	e7cb      	b.n	8015b9c <__gethex+0xe6>
 8015c04:	2301      	movs	r3, #1
 8015c06:	e7fa      	b.n	8015bfe <__gethex+0x148>
 8015c08:	230a      	movs	r3, #10
 8015c0a:	435d      	muls	r5, r3
 8015c0c:	182d      	adds	r5, r5, r0
 8015c0e:	3d10      	subs	r5, #16
 8015c10:	e7cd      	b.n	8015bae <__gethex+0xf8>
 8015c12:	0026      	movs	r6, r4
 8015c14:	e7d8      	b.n	8015bc8 <__gethex+0x112>
 8015c16:	9b01      	ldr	r3, [sp, #4]
 8015c18:	9903      	ldr	r1, [sp, #12]
 8015c1a:	1ae3      	subs	r3, r4, r3
 8015c1c:	3b01      	subs	r3, #1
 8015c1e:	2b07      	cmp	r3, #7
 8015c20:	dc47      	bgt.n	8015cb2 <__gethex+0x1fc>
 8015c22:	9805      	ldr	r0, [sp, #20]
 8015c24:	f000 fa5e 	bl	80160e4 <_Balloc>
 8015c28:	0003      	movs	r3, r0
 8015c2a:	3314      	adds	r3, #20
 8015c2c:	9303      	str	r3, [sp, #12]
 8015c2e:	9308      	str	r3, [sp, #32]
 8015c30:	2300      	movs	r3, #0
 8015c32:	0005      	movs	r5, r0
 8015c34:	001e      	movs	r6, r3
 8015c36:	9306      	str	r3, [sp, #24]
 8015c38:	9b01      	ldr	r3, [sp, #4]
 8015c3a:	42a3      	cmp	r3, r4
 8015c3c:	d33c      	bcc.n	8015cb8 <__gethex+0x202>
 8015c3e:	9c08      	ldr	r4, [sp, #32]
 8015c40:	9b03      	ldr	r3, [sp, #12]
 8015c42:	c440      	stmia	r4!, {r6}
 8015c44:	1ae4      	subs	r4, r4, r3
 8015c46:	10a4      	asrs	r4, r4, #2
 8015c48:	612c      	str	r4, [r5, #16]
 8015c4a:	0030      	movs	r0, r6
 8015c4c:	f000 faf8 	bl	8016240 <__hi0bits>
 8015c50:	9b02      	ldr	r3, [sp, #8]
 8015c52:	0164      	lsls	r4, r4, #5
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	1a26      	subs	r6, r4, r0
 8015c58:	9301      	str	r3, [sp, #4]
 8015c5a:	429e      	cmp	r6, r3
 8015c5c:	dd5f      	ble.n	8015d1e <__gethex+0x268>
 8015c5e:	1af6      	subs	r6, r6, r3
 8015c60:	0031      	movs	r1, r6
 8015c62:	0028      	movs	r0, r5
 8015c64:	f000 fde3 	bl	801682e <__any_on>
 8015c68:	1e04      	subs	r4, r0, #0
 8015c6a:	d00f      	beq.n	8015c8c <__gethex+0x1d6>
 8015c6c:	2401      	movs	r4, #1
 8015c6e:	211f      	movs	r1, #31
 8015c70:	0020      	movs	r0, r4
 8015c72:	1e73      	subs	r3, r6, #1
 8015c74:	4019      	ands	r1, r3
 8015c76:	4088      	lsls	r0, r1
 8015c78:	0001      	movs	r1, r0
 8015c7a:	115a      	asrs	r2, r3, #5
 8015c7c:	9803      	ldr	r0, [sp, #12]
 8015c7e:	0092      	lsls	r2, r2, #2
 8015c80:	5812      	ldr	r2, [r2, r0]
 8015c82:	420a      	tst	r2, r1
 8015c84:	d002      	beq.n	8015c8c <__gethex+0x1d6>
 8015c86:	42a3      	cmp	r3, r4
 8015c88:	dc41      	bgt.n	8015d0e <__gethex+0x258>
 8015c8a:	2402      	movs	r4, #2
 8015c8c:	0031      	movs	r1, r6
 8015c8e:	0028      	movs	r0, r5
 8015c90:	f7ff fec8 	bl	8015a24 <rshift>
 8015c94:	19bf      	adds	r7, r7, r6
 8015c96:	9b02      	ldr	r3, [sp, #8]
 8015c98:	689b      	ldr	r3, [r3, #8]
 8015c9a:	9304      	str	r3, [sp, #16]
 8015c9c:	42bb      	cmp	r3, r7
 8015c9e:	da4e      	bge.n	8015d3e <__gethex+0x288>
 8015ca0:	0029      	movs	r1, r5
 8015ca2:	9805      	ldr	r0, [sp, #20]
 8015ca4:	f000 fa46 	bl	8016134 <_Bfree>
 8015ca8:	2300      	movs	r3, #0
 8015caa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015cac:	26a3      	movs	r6, #163	; 0xa3
 8015cae:	6013      	str	r3, [r2, #0]
 8015cb0:	e795      	b.n	8015bde <__gethex+0x128>
 8015cb2:	3101      	adds	r1, #1
 8015cb4:	105b      	asrs	r3, r3, #1
 8015cb6:	e7b2      	b.n	8015c1e <__gethex+0x168>
 8015cb8:	1e63      	subs	r3, r4, #1
 8015cba:	9309      	str	r3, [sp, #36]	; 0x24
 8015cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d015      	beq.n	8015cf0 <__gethex+0x23a>
 8015cc4:	9b06      	ldr	r3, [sp, #24]
 8015cc6:	2b20      	cmp	r3, #32
 8015cc8:	d105      	bne.n	8015cd6 <__gethex+0x220>
 8015cca:	9b08      	ldr	r3, [sp, #32]
 8015ccc:	601e      	str	r6, [r3, #0]
 8015cce:	2600      	movs	r6, #0
 8015cd0:	3304      	adds	r3, #4
 8015cd2:	9308      	str	r3, [sp, #32]
 8015cd4:	9606      	str	r6, [sp, #24]
 8015cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd8:	7818      	ldrb	r0, [r3, #0]
 8015cda:	f7ff fed7 	bl	8015a8c <__hexdig_fun>
 8015cde:	230f      	movs	r3, #15
 8015ce0:	4018      	ands	r0, r3
 8015ce2:	9b06      	ldr	r3, [sp, #24]
 8015ce4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015ce6:	4098      	lsls	r0, r3
 8015ce8:	3304      	adds	r3, #4
 8015cea:	4306      	orrs	r6, r0
 8015cec:	9306      	str	r3, [sp, #24]
 8015cee:	e7a3      	b.n	8015c38 <__gethex+0x182>
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	9a04      	ldr	r2, [sp, #16]
 8015cf4:	1a9c      	subs	r4, r3, r2
 8015cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cf8:	191c      	adds	r4, r3, r4
 8015cfa:	9b01      	ldr	r3, [sp, #4]
 8015cfc:	429c      	cmp	r4, r3
 8015cfe:	d3e1      	bcc.n	8015cc4 <__gethex+0x20e>
 8015d00:	9907      	ldr	r1, [sp, #28]
 8015d02:	0020      	movs	r0, r4
 8015d04:	f7fc fd4e 	bl	80127a4 <strncmp>
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	d1db      	bne.n	8015cc4 <__gethex+0x20e>
 8015d0c:	e794      	b.n	8015c38 <__gethex+0x182>
 8015d0e:	1eb1      	subs	r1, r6, #2
 8015d10:	0028      	movs	r0, r5
 8015d12:	f000 fd8c 	bl	801682e <__any_on>
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d0b7      	beq.n	8015c8a <__gethex+0x1d4>
 8015d1a:	2403      	movs	r4, #3
 8015d1c:	e7b6      	b.n	8015c8c <__gethex+0x1d6>
 8015d1e:	9b01      	ldr	r3, [sp, #4]
 8015d20:	2400      	movs	r4, #0
 8015d22:	429e      	cmp	r6, r3
 8015d24:	dab7      	bge.n	8015c96 <__gethex+0x1e0>
 8015d26:	1b9e      	subs	r6, r3, r6
 8015d28:	0029      	movs	r1, r5
 8015d2a:	0032      	movs	r2, r6
 8015d2c:	9805      	ldr	r0, [sp, #20]
 8015d2e:	f000 fbab 	bl	8016488 <__lshift>
 8015d32:	0003      	movs	r3, r0
 8015d34:	3314      	adds	r3, #20
 8015d36:	0005      	movs	r5, r0
 8015d38:	1bbf      	subs	r7, r7, r6
 8015d3a:	9303      	str	r3, [sp, #12]
 8015d3c:	e7ab      	b.n	8015c96 <__gethex+0x1e0>
 8015d3e:	9b02      	ldr	r3, [sp, #8]
 8015d40:	685e      	ldr	r6, [r3, #4]
 8015d42:	42be      	cmp	r6, r7
 8015d44:	dd6b      	ble.n	8015e1e <__gethex+0x368>
 8015d46:	9b01      	ldr	r3, [sp, #4]
 8015d48:	1bf6      	subs	r6, r6, r7
 8015d4a:	42b3      	cmp	r3, r6
 8015d4c:	dc32      	bgt.n	8015db4 <__gethex+0x2fe>
 8015d4e:	9b02      	ldr	r3, [sp, #8]
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	2b02      	cmp	r3, #2
 8015d54:	d026      	beq.n	8015da4 <__gethex+0x2ee>
 8015d56:	2b03      	cmp	r3, #3
 8015d58:	d028      	beq.n	8015dac <__gethex+0x2f6>
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d119      	bne.n	8015d92 <__gethex+0x2dc>
 8015d5e:	9b01      	ldr	r3, [sp, #4]
 8015d60:	42b3      	cmp	r3, r6
 8015d62:	d116      	bne.n	8015d92 <__gethex+0x2dc>
 8015d64:	2b01      	cmp	r3, #1
 8015d66:	dc0d      	bgt.n	8015d84 <__gethex+0x2ce>
 8015d68:	9b02      	ldr	r3, [sp, #8]
 8015d6a:	2662      	movs	r6, #98	; 0x62
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	9301      	str	r3, [sp, #4]
 8015d70:	9a01      	ldr	r2, [sp, #4]
 8015d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d74:	601a      	str	r2, [r3, #0]
 8015d76:	2301      	movs	r3, #1
 8015d78:	9a03      	ldr	r2, [sp, #12]
 8015d7a:	612b      	str	r3, [r5, #16]
 8015d7c:	6013      	str	r3, [r2, #0]
 8015d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d80:	601d      	str	r5, [r3, #0]
 8015d82:	e72c      	b.n	8015bde <__gethex+0x128>
 8015d84:	9901      	ldr	r1, [sp, #4]
 8015d86:	0028      	movs	r0, r5
 8015d88:	3901      	subs	r1, #1
 8015d8a:	f000 fd50 	bl	801682e <__any_on>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	d1ea      	bne.n	8015d68 <__gethex+0x2b2>
 8015d92:	0029      	movs	r1, r5
 8015d94:	9805      	ldr	r0, [sp, #20]
 8015d96:	f000 f9cd 	bl	8016134 <_Bfree>
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d9e:	2650      	movs	r6, #80	; 0x50
 8015da0:	6013      	str	r3, [r2, #0]
 8015da2:	e71c      	b.n	8015bde <__gethex+0x128>
 8015da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d0de      	beq.n	8015d68 <__gethex+0x2b2>
 8015daa:	e7f2      	b.n	8015d92 <__gethex+0x2dc>
 8015dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d1da      	bne.n	8015d68 <__gethex+0x2b2>
 8015db2:	e7ee      	b.n	8015d92 <__gethex+0x2dc>
 8015db4:	1e77      	subs	r7, r6, #1
 8015db6:	2c00      	cmp	r4, #0
 8015db8:	d12f      	bne.n	8015e1a <__gethex+0x364>
 8015dba:	2f00      	cmp	r7, #0
 8015dbc:	d004      	beq.n	8015dc8 <__gethex+0x312>
 8015dbe:	0039      	movs	r1, r7
 8015dc0:	0028      	movs	r0, r5
 8015dc2:	f000 fd34 	bl	801682e <__any_on>
 8015dc6:	0004      	movs	r4, r0
 8015dc8:	231f      	movs	r3, #31
 8015dca:	117a      	asrs	r2, r7, #5
 8015dcc:	401f      	ands	r7, r3
 8015dce:	3b1e      	subs	r3, #30
 8015dd0:	40bb      	lsls	r3, r7
 8015dd2:	9903      	ldr	r1, [sp, #12]
 8015dd4:	0092      	lsls	r2, r2, #2
 8015dd6:	5852      	ldr	r2, [r2, r1]
 8015dd8:	421a      	tst	r2, r3
 8015dda:	d001      	beq.n	8015de0 <__gethex+0x32a>
 8015ddc:	2302      	movs	r3, #2
 8015dde:	431c      	orrs	r4, r3
 8015de0:	9b01      	ldr	r3, [sp, #4]
 8015de2:	0031      	movs	r1, r6
 8015de4:	1b9b      	subs	r3, r3, r6
 8015de6:	2602      	movs	r6, #2
 8015de8:	0028      	movs	r0, r5
 8015dea:	9301      	str	r3, [sp, #4]
 8015dec:	f7ff fe1a 	bl	8015a24 <rshift>
 8015df0:	9b02      	ldr	r3, [sp, #8]
 8015df2:	685f      	ldr	r7, [r3, #4]
 8015df4:	2c00      	cmp	r4, #0
 8015df6:	d040      	beq.n	8015e7a <__gethex+0x3c4>
 8015df8:	9b02      	ldr	r3, [sp, #8]
 8015dfa:	68db      	ldr	r3, [r3, #12]
 8015dfc:	2b02      	cmp	r3, #2
 8015dfe:	d010      	beq.n	8015e22 <__gethex+0x36c>
 8015e00:	2b03      	cmp	r3, #3
 8015e02:	d012      	beq.n	8015e2a <__gethex+0x374>
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d106      	bne.n	8015e16 <__gethex+0x360>
 8015e08:	07a2      	lsls	r2, r4, #30
 8015e0a:	d504      	bpl.n	8015e16 <__gethex+0x360>
 8015e0c:	9a03      	ldr	r2, [sp, #12]
 8015e0e:	6812      	ldr	r2, [r2, #0]
 8015e10:	4314      	orrs	r4, r2
 8015e12:	421c      	tst	r4, r3
 8015e14:	d10c      	bne.n	8015e30 <__gethex+0x37a>
 8015e16:	2310      	movs	r3, #16
 8015e18:	e02e      	b.n	8015e78 <__gethex+0x3c2>
 8015e1a:	2401      	movs	r4, #1
 8015e1c:	e7d4      	b.n	8015dc8 <__gethex+0x312>
 8015e1e:	2601      	movs	r6, #1
 8015e20:	e7e8      	b.n	8015df4 <__gethex+0x33e>
 8015e22:	2301      	movs	r3, #1
 8015e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015e26:	1a9b      	subs	r3, r3, r2
 8015e28:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d0f2      	beq.n	8015e16 <__gethex+0x360>
 8015e30:	692c      	ldr	r4, [r5, #16]
 8015e32:	00a3      	lsls	r3, r4, #2
 8015e34:	9304      	str	r3, [sp, #16]
 8015e36:	002b      	movs	r3, r5
 8015e38:	00a2      	lsls	r2, r4, #2
 8015e3a:	3314      	adds	r3, #20
 8015e3c:	1899      	adds	r1, r3, r2
 8015e3e:	2200      	movs	r2, #0
 8015e40:	4694      	mov	ip, r2
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	1c50      	adds	r0, r2, #1
 8015e46:	d01d      	beq.n	8015e84 <__gethex+0x3ce>
 8015e48:	3201      	adds	r2, #1
 8015e4a:	601a      	str	r2, [r3, #0]
 8015e4c:	002b      	movs	r3, r5
 8015e4e:	3314      	adds	r3, #20
 8015e50:	2e02      	cmp	r6, #2
 8015e52:	d13a      	bne.n	8015eca <__gethex+0x414>
 8015e54:	9a02      	ldr	r2, [sp, #8]
 8015e56:	9901      	ldr	r1, [sp, #4]
 8015e58:	6812      	ldr	r2, [r2, #0]
 8015e5a:	3a01      	subs	r2, #1
 8015e5c:	428a      	cmp	r2, r1
 8015e5e:	d10a      	bne.n	8015e76 <__gethex+0x3c0>
 8015e60:	114a      	asrs	r2, r1, #5
 8015e62:	211f      	movs	r1, #31
 8015e64:	9801      	ldr	r0, [sp, #4]
 8015e66:	0092      	lsls	r2, r2, #2
 8015e68:	4001      	ands	r1, r0
 8015e6a:	2001      	movs	r0, #1
 8015e6c:	0004      	movs	r4, r0
 8015e6e:	408c      	lsls	r4, r1
 8015e70:	58d3      	ldr	r3, [r2, r3]
 8015e72:	4223      	tst	r3, r4
 8015e74:	d148      	bne.n	8015f08 <__gethex+0x452>
 8015e76:	2320      	movs	r3, #32
 8015e78:	431e      	orrs	r6, r3
 8015e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e7c:	601d      	str	r5, [r3, #0]
 8015e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e80:	601f      	str	r7, [r3, #0]
 8015e82:	e6ac      	b.n	8015bde <__gethex+0x128>
 8015e84:	4662      	mov	r2, ip
 8015e86:	c304      	stmia	r3!, {r2}
 8015e88:	4299      	cmp	r1, r3
 8015e8a:	d8da      	bhi.n	8015e42 <__gethex+0x38c>
 8015e8c:	68ab      	ldr	r3, [r5, #8]
 8015e8e:	429c      	cmp	r4, r3
 8015e90:	db12      	blt.n	8015eb8 <__gethex+0x402>
 8015e92:	686b      	ldr	r3, [r5, #4]
 8015e94:	9805      	ldr	r0, [sp, #20]
 8015e96:	1c59      	adds	r1, r3, #1
 8015e98:	f000 f924 	bl	80160e4 <_Balloc>
 8015e9c:	0029      	movs	r1, r5
 8015e9e:	692b      	ldr	r3, [r5, #16]
 8015ea0:	9003      	str	r0, [sp, #12]
 8015ea2:	1c9a      	adds	r2, r3, #2
 8015ea4:	0092      	lsls	r2, r2, #2
 8015ea6:	310c      	adds	r1, #12
 8015ea8:	300c      	adds	r0, #12
 8015eaa:	f7fc fa34 	bl	8012316 <memcpy>
 8015eae:	0029      	movs	r1, r5
 8015eb0:	9805      	ldr	r0, [sp, #20]
 8015eb2:	f000 f93f 	bl	8016134 <_Bfree>
 8015eb6:	9d03      	ldr	r5, [sp, #12]
 8015eb8:	692b      	ldr	r3, [r5, #16]
 8015eba:	1c5a      	adds	r2, r3, #1
 8015ebc:	612a      	str	r2, [r5, #16]
 8015ebe:	2201      	movs	r2, #1
 8015ec0:	3304      	adds	r3, #4
 8015ec2:	009b      	lsls	r3, r3, #2
 8015ec4:	18eb      	adds	r3, r5, r3
 8015ec6:	605a      	str	r2, [r3, #4]
 8015ec8:	e7c0      	b.n	8015e4c <__gethex+0x396>
 8015eca:	692a      	ldr	r2, [r5, #16]
 8015ecc:	42a2      	cmp	r2, r4
 8015ece:	dd0a      	ble.n	8015ee6 <__gethex+0x430>
 8015ed0:	2101      	movs	r1, #1
 8015ed2:	0028      	movs	r0, r5
 8015ed4:	f7ff fda6 	bl	8015a24 <rshift>
 8015ed8:	9b02      	ldr	r3, [sp, #8]
 8015eda:	3701      	adds	r7, #1
 8015edc:	689b      	ldr	r3, [r3, #8]
 8015ede:	2601      	movs	r6, #1
 8015ee0:	42bb      	cmp	r3, r7
 8015ee2:	dac8      	bge.n	8015e76 <__gethex+0x3c0>
 8015ee4:	e6dc      	b.n	8015ca0 <__gethex+0x1ea>
 8015ee6:	241f      	movs	r4, #31
 8015ee8:	9a01      	ldr	r2, [sp, #4]
 8015eea:	2601      	movs	r6, #1
 8015eec:	4022      	ands	r2, r4
 8015eee:	1e14      	subs	r4, r2, #0
 8015ef0:	d0c1      	beq.n	8015e76 <__gethex+0x3c0>
 8015ef2:	9a04      	ldr	r2, [sp, #16]
 8015ef4:	189b      	adds	r3, r3, r2
 8015ef6:	3b04      	subs	r3, #4
 8015ef8:	6818      	ldr	r0, [r3, #0]
 8015efa:	f000 f9a1 	bl	8016240 <__hi0bits>
 8015efe:	2120      	movs	r1, #32
 8015f00:	1b0c      	subs	r4, r1, r4
 8015f02:	42a0      	cmp	r0, r4
 8015f04:	dbe4      	blt.n	8015ed0 <__gethex+0x41a>
 8015f06:	e7b6      	b.n	8015e76 <__gethex+0x3c0>
 8015f08:	0006      	movs	r6, r0
 8015f0a:	e7b4      	b.n	8015e76 <__gethex+0x3c0>

08015f0c <L_shift>:
 8015f0c:	2308      	movs	r3, #8
 8015f0e:	b570      	push	{r4, r5, r6, lr}
 8015f10:	2520      	movs	r5, #32
 8015f12:	1a9a      	subs	r2, r3, r2
 8015f14:	0092      	lsls	r2, r2, #2
 8015f16:	1aad      	subs	r5, r5, r2
 8015f18:	6843      	ldr	r3, [r0, #4]
 8015f1a:	6806      	ldr	r6, [r0, #0]
 8015f1c:	001c      	movs	r4, r3
 8015f1e:	40ac      	lsls	r4, r5
 8015f20:	40d3      	lsrs	r3, r2
 8015f22:	4334      	orrs	r4, r6
 8015f24:	6004      	str	r4, [r0, #0]
 8015f26:	6043      	str	r3, [r0, #4]
 8015f28:	3004      	adds	r0, #4
 8015f2a:	4288      	cmp	r0, r1
 8015f2c:	d3f4      	bcc.n	8015f18 <L_shift+0xc>
 8015f2e:	bd70      	pop	{r4, r5, r6, pc}

08015f30 <__match>:
 8015f30:	b530      	push	{r4, r5, lr}
 8015f32:	6803      	ldr	r3, [r0, #0]
 8015f34:	780c      	ldrb	r4, [r1, #0]
 8015f36:	3301      	adds	r3, #1
 8015f38:	2c00      	cmp	r4, #0
 8015f3a:	d102      	bne.n	8015f42 <__match+0x12>
 8015f3c:	6003      	str	r3, [r0, #0]
 8015f3e:	2001      	movs	r0, #1
 8015f40:	bd30      	pop	{r4, r5, pc}
 8015f42:	781a      	ldrb	r2, [r3, #0]
 8015f44:	0015      	movs	r5, r2
 8015f46:	3d41      	subs	r5, #65	; 0x41
 8015f48:	2d19      	cmp	r5, #25
 8015f4a:	d800      	bhi.n	8015f4e <__match+0x1e>
 8015f4c:	3220      	adds	r2, #32
 8015f4e:	3101      	adds	r1, #1
 8015f50:	42a2      	cmp	r2, r4
 8015f52:	d0ef      	beq.n	8015f34 <__match+0x4>
 8015f54:	2000      	movs	r0, #0
 8015f56:	e7f3      	b.n	8015f40 <__match+0x10>

08015f58 <__hexnan>:
 8015f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f5a:	b08b      	sub	sp, #44	; 0x2c
 8015f5c:	9201      	str	r2, [sp, #4]
 8015f5e:	680a      	ldr	r2, [r1, #0]
 8015f60:	9901      	ldr	r1, [sp, #4]
 8015f62:	1153      	asrs	r3, r2, #5
 8015f64:	009b      	lsls	r3, r3, #2
 8015f66:	18cb      	adds	r3, r1, r3
 8015f68:	9304      	str	r3, [sp, #16]
 8015f6a:	231f      	movs	r3, #31
 8015f6c:	401a      	ands	r2, r3
 8015f6e:	9008      	str	r0, [sp, #32]
 8015f70:	9206      	str	r2, [sp, #24]
 8015f72:	d002      	beq.n	8015f7a <__hexnan+0x22>
 8015f74:	9b04      	ldr	r3, [sp, #16]
 8015f76:	3304      	adds	r3, #4
 8015f78:	9304      	str	r3, [sp, #16]
 8015f7a:	9b04      	ldr	r3, [sp, #16]
 8015f7c:	2500      	movs	r5, #0
 8015f7e:	1f1e      	subs	r6, r3, #4
 8015f80:	0037      	movs	r7, r6
 8015f82:	0034      	movs	r4, r6
 8015f84:	9b08      	ldr	r3, [sp, #32]
 8015f86:	6035      	str	r5, [r6, #0]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	9507      	str	r5, [sp, #28]
 8015f8c:	9305      	str	r3, [sp, #20]
 8015f8e:	9502      	str	r5, [sp, #8]
 8015f90:	9b05      	ldr	r3, [sp, #20]
 8015f92:	3301      	adds	r3, #1
 8015f94:	9309      	str	r3, [sp, #36]	; 0x24
 8015f96:	9b05      	ldr	r3, [sp, #20]
 8015f98:	785b      	ldrb	r3, [r3, #1]
 8015f9a:	9303      	str	r3, [sp, #12]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d028      	beq.n	8015ff2 <__hexnan+0x9a>
 8015fa0:	9803      	ldr	r0, [sp, #12]
 8015fa2:	f7ff fd73 	bl	8015a8c <__hexdig_fun>
 8015fa6:	2800      	cmp	r0, #0
 8015fa8:	d145      	bne.n	8016036 <__hexnan+0xde>
 8015faa:	9b03      	ldr	r3, [sp, #12]
 8015fac:	2b20      	cmp	r3, #32
 8015fae:	d819      	bhi.n	8015fe4 <__hexnan+0x8c>
 8015fb0:	9b02      	ldr	r3, [sp, #8]
 8015fb2:	9a07      	ldr	r2, [sp, #28]
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	dd12      	ble.n	8015fde <__hexnan+0x86>
 8015fb8:	42bc      	cmp	r4, r7
 8015fba:	d206      	bcs.n	8015fca <__hexnan+0x72>
 8015fbc:	2d07      	cmp	r5, #7
 8015fbe:	dc04      	bgt.n	8015fca <__hexnan+0x72>
 8015fc0:	002a      	movs	r2, r5
 8015fc2:	0039      	movs	r1, r7
 8015fc4:	0020      	movs	r0, r4
 8015fc6:	f7ff ffa1 	bl	8015f0c <L_shift>
 8015fca:	9b01      	ldr	r3, [sp, #4]
 8015fcc:	2508      	movs	r5, #8
 8015fce:	429c      	cmp	r4, r3
 8015fd0:	d905      	bls.n	8015fde <__hexnan+0x86>
 8015fd2:	1f27      	subs	r7, r4, #4
 8015fd4:	2500      	movs	r5, #0
 8015fd6:	003c      	movs	r4, r7
 8015fd8:	9b02      	ldr	r3, [sp, #8]
 8015fda:	603d      	str	r5, [r7, #0]
 8015fdc:	9307      	str	r3, [sp, #28]
 8015fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fe0:	9305      	str	r3, [sp, #20]
 8015fe2:	e7d5      	b.n	8015f90 <__hexnan+0x38>
 8015fe4:	9b03      	ldr	r3, [sp, #12]
 8015fe6:	2b29      	cmp	r3, #41	; 0x29
 8015fe8:	d14a      	bne.n	8016080 <__hexnan+0x128>
 8015fea:	9b05      	ldr	r3, [sp, #20]
 8015fec:	9a08      	ldr	r2, [sp, #32]
 8015fee:	3302      	adds	r3, #2
 8015ff0:	6013      	str	r3, [r2, #0]
 8015ff2:	9b02      	ldr	r3, [sp, #8]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d043      	beq.n	8016080 <__hexnan+0x128>
 8015ff8:	42bc      	cmp	r4, r7
 8015ffa:	d206      	bcs.n	801600a <__hexnan+0xb2>
 8015ffc:	2d07      	cmp	r5, #7
 8015ffe:	dc04      	bgt.n	801600a <__hexnan+0xb2>
 8016000:	002a      	movs	r2, r5
 8016002:	0039      	movs	r1, r7
 8016004:	0020      	movs	r0, r4
 8016006:	f7ff ff81 	bl	8015f0c <L_shift>
 801600a:	9b01      	ldr	r3, [sp, #4]
 801600c:	429c      	cmp	r4, r3
 801600e:	d926      	bls.n	801605e <__hexnan+0x106>
 8016010:	cc04      	ldmia	r4!, {r2}
 8016012:	601a      	str	r2, [r3, #0]
 8016014:	3304      	adds	r3, #4
 8016016:	42a6      	cmp	r6, r4
 8016018:	d2fa      	bcs.n	8016010 <__hexnan+0xb8>
 801601a:	2200      	movs	r2, #0
 801601c:	c304      	stmia	r3!, {r2}
 801601e:	429e      	cmp	r6, r3
 8016020:	d2fc      	bcs.n	801601c <__hexnan+0xc4>
 8016022:	6833      	ldr	r3, [r6, #0]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d104      	bne.n	8016032 <__hexnan+0xda>
 8016028:	9b01      	ldr	r3, [sp, #4]
 801602a:	429e      	cmp	r6, r3
 801602c:	d126      	bne.n	801607c <__hexnan+0x124>
 801602e:	2301      	movs	r3, #1
 8016030:	6033      	str	r3, [r6, #0]
 8016032:	2005      	movs	r0, #5
 8016034:	e025      	b.n	8016082 <__hexnan+0x12a>
 8016036:	9b02      	ldr	r3, [sp, #8]
 8016038:	3501      	adds	r5, #1
 801603a:	3301      	adds	r3, #1
 801603c:	9302      	str	r3, [sp, #8]
 801603e:	2d08      	cmp	r5, #8
 8016040:	dd06      	ble.n	8016050 <__hexnan+0xf8>
 8016042:	9b01      	ldr	r3, [sp, #4]
 8016044:	429c      	cmp	r4, r3
 8016046:	d9ca      	bls.n	8015fde <__hexnan+0x86>
 8016048:	2300      	movs	r3, #0
 801604a:	2501      	movs	r5, #1
 801604c:	3c04      	subs	r4, #4
 801604e:	6023      	str	r3, [r4, #0]
 8016050:	220f      	movs	r2, #15
 8016052:	6823      	ldr	r3, [r4, #0]
 8016054:	4010      	ands	r0, r2
 8016056:	011b      	lsls	r3, r3, #4
 8016058:	4318      	orrs	r0, r3
 801605a:	6020      	str	r0, [r4, #0]
 801605c:	e7bf      	b.n	8015fde <__hexnan+0x86>
 801605e:	9b06      	ldr	r3, [sp, #24]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0de      	beq.n	8016022 <__hexnan+0xca>
 8016064:	2120      	movs	r1, #32
 8016066:	9a06      	ldr	r2, [sp, #24]
 8016068:	9b04      	ldr	r3, [sp, #16]
 801606a:	1a89      	subs	r1, r1, r2
 801606c:	2201      	movs	r2, #1
 801606e:	4252      	negs	r2, r2
 8016070:	40ca      	lsrs	r2, r1
 8016072:	3b04      	subs	r3, #4
 8016074:	6819      	ldr	r1, [r3, #0]
 8016076:	400a      	ands	r2, r1
 8016078:	601a      	str	r2, [r3, #0]
 801607a:	e7d2      	b.n	8016022 <__hexnan+0xca>
 801607c:	3e04      	subs	r6, #4
 801607e:	e7d0      	b.n	8016022 <__hexnan+0xca>
 8016080:	2004      	movs	r0, #4
 8016082:	b00b      	add	sp, #44	; 0x2c
 8016084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016086 <__localeconv_l>:
 8016086:	30f0      	adds	r0, #240	; 0xf0
 8016088:	4770      	bx	lr
	...

0801608c <_localeconv_r>:
 801608c:	4b03      	ldr	r3, [pc, #12]	; (801609c <_localeconv_r+0x10>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016092:	2800      	cmp	r0, #0
 8016094:	d100      	bne.n	8016098 <_localeconv_r+0xc>
 8016096:	4802      	ldr	r0, [pc, #8]	; (80160a0 <_localeconv_r+0x14>)
 8016098:	30f0      	adds	r0, #240	; 0xf0
 801609a:	4770      	bx	lr
 801609c:	200000cc 	.word	0x200000cc
 80160a0:	200004f8 	.word	0x200004f8

080160a4 <__retarget_lock_acquire_recursive>:
 80160a4:	4770      	bx	lr

080160a6 <__retarget_lock_release_recursive>:
 80160a6:	4770      	bx	lr

080160a8 <memchr>:
 80160a8:	b2c9      	uxtb	r1, r1
 80160aa:	1882      	adds	r2, r0, r2
 80160ac:	4290      	cmp	r0, r2
 80160ae:	d101      	bne.n	80160b4 <memchr+0xc>
 80160b0:	2000      	movs	r0, #0
 80160b2:	4770      	bx	lr
 80160b4:	7803      	ldrb	r3, [r0, #0]
 80160b6:	428b      	cmp	r3, r1
 80160b8:	d0fb      	beq.n	80160b2 <memchr+0xa>
 80160ba:	3001      	adds	r0, #1
 80160bc:	e7f6      	b.n	80160ac <memchr+0x4>

080160be <memmove>:
 80160be:	b510      	push	{r4, lr}
 80160c0:	4288      	cmp	r0, r1
 80160c2:	d902      	bls.n	80160ca <memmove+0xc>
 80160c4:	188b      	adds	r3, r1, r2
 80160c6:	4298      	cmp	r0, r3
 80160c8:	d303      	bcc.n	80160d2 <memmove+0x14>
 80160ca:	2300      	movs	r3, #0
 80160cc:	e007      	b.n	80160de <memmove+0x20>
 80160ce:	5c8b      	ldrb	r3, [r1, r2]
 80160d0:	5483      	strb	r3, [r0, r2]
 80160d2:	3a01      	subs	r2, #1
 80160d4:	d2fb      	bcs.n	80160ce <memmove+0x10>
 80160d6:	bd10      	pop	{r4, pc}
 80160d8:	5ccc      	ldrb	r4, [r1, r3]
 80160da:	54c4      	strb	r4, [r0, r3]
 80160dc:	3301      	adds	r3, #1
 80160de:	429a      	cmp	r2, r3
 80160e0:	d1fa      	bne.n	80160d8 <memmove+0x1a>
 80160e2:	e7f8      	b.n	80160d6 <memmove+0x18>

080160e4 <_Balloc>:
 80160e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80160e6:	b570      	push	{r4, r5, r6, lr}
 80160e8:	0004      	movs	r4, r0
 80160ea:	000d      	movs	r5, r1
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d012      	beq.n	8016116 <_Balloc+0x32>
 80160f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80160f2:	00ab      	lsls	r3, r5, #2
 80160f4:	18d3      	adds	r3, r2, r3
 80160f6:	6818      	ldr	r0, [r3, #0]
 80160f8:	2800      	cmp	r0, #0
 80160fa:	d115      	bne.n	8016128 <_Balloc+0x44>
 80160fc:	2101      	movs	r1, #1
 80160fe:	000e      	movs	r6, r1
 8016100:	40ae      	lsls	r6, r5
 8016102:	1d72      	adds	r2, r6, #5
 8016104:	0092      	lsls	r2, r2, #2
 8016106:	0020      	movs	r0, r4
 8016108:	f7fb fe56 	bl	8011db8 <_calloc_r>
 801610c:	2800      	cmp	r0, #0
 801610e:	d009      	beq.n	8016124 <_Balloc+0x40>
 8016110:	6045      	str	r5, [r0, #4]
 8016112:	6086      	str	r6, [r0, #8]
 8016114:	e00a      	b.n	801612c <_Balloc+0x48>
 8016116:	2221      	movs	r2, #33	; 0x21
 8016118:	2104      	movs	r1, #4
 801611a:	f7fb fe4d 	bl	8011db8 <_calloc_r>
 801611e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016120:	2800      	cmp	r0, #0
 8016122:	d1e5      	bne.n	80160f0 <_Balloc+0xc>
 8016124:	2000      	movs	r0, #0
 8016126:	bd70      	pop	{r4, r5, r6, pc}
 8016128:	6802      	ldr	r2, [r0, #0]
 801612a:	601a      	str	r2, [r3, #0]
 801612c:	2300      	movs	r3, #0
 801612e:	6103      	str	r3, [r0, #16]
 8016130:	60c3      	str	r3, [r0, #12]
 8016132:	e7f8      	b.n	8016126 <_Balloc+0x42>

08016134 <_Bfree>:
 8016134:	2900      	cmp	r1, #0
 8016136:	d006      	beq.n	8016146 <_Bfree+0x12>
 8016138:	684b      	ldr	r3, [r1, #4]
 801613a:	009a      	lsls	r2, r3, #2
 801613c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801613e:	189b      	adds	r3, r3, r2
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	600a      	str	r2, [r1, #0]
 8016144:	6019      	str	r1, [r3, #0]
 8016146:	4770      	bx	lr

08016148 <__multadd>:
 8016148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801614a:	001e      	movs	r6, r3
 801614c:	2314      	movs	r3, #20
 801614e:	469c      	mov	ip, r3
 8016150:	0007      	movs	r7, r0
 8016152:	000c      	movs	r4, r1
 8016154:	2000      	movs	r0, #0
 8016156:	690d      	ldr	r5, [r1, #16]
 8016158:	448c      	add	ip, r1
 801615a:	4663      	mov	r3, ip
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	3001      	adds	r0, #1
 8016160:	b299      	uxth	r1, r3
 8016162:	4663      	mov	r3, ip
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4351      	muls	r1, r2
 8016168:	0c1b      	lsrs	r3, r3, #16
 801616a:	4353      	muls	r3, r2
 801616c:	1989      	adds	r1, r1, r6
 801616e:	0c0e      	lsrs	r6, r1, #16
 8016170:	199b      	adds	r3, r3, r6
 8016172:	b289      	uxth	r1, r1
 8016174:	0c1e      	lsrs	r6, r3, #16
 8016176:	041b      	lsls	r3, r3, #16
 8016178:	185b      	adds	r3, r3, r1
 801617a:	4661      	mov	r1, ip
 801617c:	c108      	stmia	r1!, {r3}
 801617e:	468c      	mov	ip, r1
 8016180:	4285      	cmp	r5, r0
 8016182:	dcea      	bgt.n	801615a <__multadd+0x12>
 8016184:	2e00      	cmp	r6, #0
 8016186:	d01b      	beq.n	80161c0 <__multadd+0x78>
 8016188:	68a3      	ldr	r3, [r4, #8]
 801618a:	42ab      	cmp	r3, r5
 801618c:	dc12      	bgt.n	80161b4 <__multadd+0x6c>
 801618e:	6863      	ldr	r3, [r4, #4]
 8016190:	0038      	movs	r0, r7
 8016192:	1c59      	adds	r1, r3, #1
 8016194:	f7ff ffa6 	bl	80160e4 <_Balloc>
 8016198:	0021      	movs	r1, r4
 801619a:	6923      	ldr	r3, [r4, #16]
 801619c:	9001      	str	r0, [sp, #4]
 801619e:	1c9a      	adds	r2, r3, #2
 80161a0:	0092      	lsls	r2, r2, #2
 80161a2:	310c      	adds	r1, #12
 80161a4:	300c      	adds	r0, #12
 80161a6:	f7fc f8b6 	bl	8012316 <memcpy>
 80161aa:	0021      	movs	r1, r4
 80161ac:	0038      	movs	r0, r7
 80161ae:	f7ff ffc1 	bl	8016134 <_Bfree>
 80161b2:	9c01      	ldr	r4, [sp, #4]
 80161b4:	1d2b      	adds	r3, r5, #4
 80161b6:	009b      	lsls	r3, r3, #2
 80161b8:	18e3      	adds	r3, r4, r3
 80161ba:	3501      	adds	r5, #1
 80161bc:	605e      	str	r6, [r3, #4]
 80161be:	6125      	str	r5, [r4, #16]
 80161c0:	0020      	movs	r0, r4
 80161c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080161c4 <__s2b>:
 80161c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161c6:	0006      	movs	r6, r0
 80161c8:	0018      	movs	r0, r3
 80161ca:	000c      	movs	r4, r1
 80161cc:	3008      	adds	r0, #8
 80161ce:	2109      	movs	r1, #9
 80161d0:	9301      	str	r3, [sp, #4]
 80161d2:	0015      	movs	r5, r2
 80161d4:	f7ea f846 	bl	8000264 <__divsi3>
 80161d8:	2301      	movs	r3, #1
 80161da:	2100      	movs	r1, #0
 80161dc:	4283      	cmp	r3, r0
 80161de:	db1f      	blt.n	8016220 <__s2b+0x5c>
 80161e0:	0030      	movs	r0, r6
 80161e2:	f7ff ff7f 	bl	80160e4 <_Balloc>
 80161e6:	9b08      	ldr	r3, [sp, #32]
 80161e8:	6143      	str	r3, [r0, #20]
 80161ea:	2301      	movs	r3, #1
 80161ec:	6103      	str	r3, [r0, #16]
 80161ee:	2d09      	cmp	r5, #9
 80161f0:	dd19      	ble.n	8016226 <__s2b+0x62>
 80161f2:	0023      	movs	r3, r4
 80161f4:	3309      	adds	r3, #9
 80161f6:	001f      	movs	r7, r3
 80161f8:	9300      	str	r3, [sp, #0]
 80161fa:	1964      	adds	r4, r4, r5
 80161fc:	783b      	ldrb	r3, [r7, #0]
 80161fe:	0001      	movs	r1, r0
 8016200:	3b30      	subs	r3, #48	; 0x30
 8016202:	220a      	movs	r2, #10
 8016204:	0030      	movs	r0, r6
 8016206:	3701      	adds	r7, #1
 8016208:	f7ff ff9e 	bl	8016148 <__multadd>
 801620c:	42a7      	cmp	r7, r4
 801620e:	d1f5      	bne.n	80161fc <__s2b+0x38>
 8016210:	9b00      	ldr	r3, [sp, #0]
 8016212:	195c      	adds	r4, r3, r5
 8016214:	3c08      	subs	r4, #8
 8016216:	002f      	movs	r7, r5
 8016218:	9b01      	ldr	r3, [sp, #4]
 801621a:	429f      	cmp	r7, r3
 801621c:	db06      	blt.n	801622c <__s2b+0x68>
 801621e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016220:	005b      	lsls	r3, r3, #1
 8016222:	3101      	adds	r1, #1
 8016224:	e7da      	b.n	80161dc <__s2b+0x18>
 8016226:	340a      	adds	r4, #10
 8016228:	2509      	movs	r5, #9
 801622a:	e7f4      	b.n	8016216 <__s2b+0x52>
 801622c:	1b63      	subs	r3, r4, r5
 801622e:	5ddb      	ldrb	r3, [r3, r7]
 8016230:	0001      	movs	r1, r0
 8016232:	3b30      	subs	r3, #48	; 0x30
 8016234:	220a      	movs	r2, #10
 8016236:	0030      	movs	r0, r6
 8016238:	f7ff ff86 	bl	8016148 <__multadd>
 801623c:	3701      	adds	r7, #1
 801623e:	e7eb      	b.n	8016218 <__s2b+0x54>

08016240 <__hi0bits>:
 8016240:	0003      	movs	r3, r0
 8016242:	0c02      	lsrs	r2, r0, #16
 8016244:	2000      	movs	r0, #0
 8016246:	4282      	cmp	r2, r0
 8016248:	d101      	bne.n	801624e <__hi0bits+0xe>
 801624a:	041b      	lsls	r3, r3, #16
 801624c:	3010      	adds	r0, #16
 801624e:	0e1a      	lsrs	r2, r3, #24
 8016250:	d101      	bne.n	8016256 <__hi0bits+0x16>
 8016252:	3008      	adds	r0, #8
 8016254:	021b      	lsls	r3, r3, #8
 8016256:	0f1a      	lsrs	r2, r3, #28
 8016258:	d101      	bne.n	801625e <__hi0bits+0x1e>
 801625a:	3004      	adds	r0, #4
 801625c:	011b      	lsls	r3, r3, #4
 801625e:	0f9a      	lsrs	r2, r3, #30
 8016260:	d101      	bne.n	8016266 <__hi0bits+0x26>
 8016262:	3002      	adds	r0, #2
 8016264:	009b      	lsls	r3, r3, #2
 8016266:	2b00      	cmp	r3, #0
 8016268:	db03      	blt.n	8016272 <__hi0bits+0x32>
 801626a:	3001      	adds	r0, #1
 801626c:	005b      	lsls	r3, r3, #1
 801626e:	d400      	bmi.n	8016272 <__hi0bits+0x32>
 8016270:	2020      	movs	r0, #32
 8016272:	4770      	bx	lr

08016274 <__lo0bits>:
 8016274:	2207      	movs	r2, #7
 8016276:	6803      	ldr	r3, [r0, #0]
 8016278:	b510      	push	{r4, lr}
 801627a:	0001      	movs	r1, r0
 801627c:	401a      	ands	r2, r3
 801627e:	d00d      	beq.n	801629c <__lo0bits+0x28>
 8016280:	2401      	movs	r4, #1
 8016282:	2000      	movs	r0, #0
 8016284:	4223      	tst	r3, r4
 8016286:	d105      	bne.n	8016294 <__lo0bits+0x20>
 8016288:	3002      	adds	r0, #2
 801628a:	4203      	tst	r3, r0
 801628c:	d003      	beq.n	8016296 <__lo0bits+0x22>
 801628e:	40e3      	lsrs	r3, r4
 8016290:	0020      	movs	r0, r4
 8016292:	600b      	str	r3, [r1, #0]
 8016294:	bd10      	pop	{r4, pc}
 8016296:	089b      	lsrs	r3, r3, #2
 8016298:	600b      	str	r3, [r1, #0]
 801629a:	e7fb      	b.n	8016294 <__lo0bits+0x20>
 801629c:	b29c      	uxth	r4, r3
 801629e:	0010      	movs	r0, r2
 80162a0:	2c00      	cmp	r4, #0
 80162a2:	d101      	bne.n	80162a8 <__lo0bits+0x34>
 80162a4:	2010      	movs	r0, #16
 80162a6:	0c1b      	lsrs	r3, r3, #16
 80162a8:	b2da      	uxtb	r2, r3
 80162aa:	2a00      	cmp	r2, #0
 80162ac:	d101      	bne.n	80162b2 <__lo0bits+0x3e>
 80162ae:	3008      	adds	r0, #8
 80162b0:	0a1b      	lsrs	r3, r3, #8
 80162b2:	071a      	lsls	r2, r3, #28
 80162b4:	d101      	bne.n	80162ba <__lo0bits+0x46>
 80162b6:	3004      	adds	r0, #4
 80162b8:	091b      	lsrs	r3, r3, #4
 80162ba:	079a      	lsls	r2, r3, #30
 80162bc:	d101      	bne.n	80162c2 <__lo0bits+0x4e>
 80162be:	3002      	adds	r0, #2
 80162c0:	089b      	lsrs	r3, r3, #2
 80162c2:	07da      	lsls	r2, r3, #31
 80162c4:	d4e8      	bmi.n	8016298 <__lo0bits+0x24>
 80162c6:	085b      	lsrs	r3, r3, #1
 80162c8:	d001      	beq.n	80162ce <__lo0bits+0x5a>
 80162ca:	3001      	adds	r0, #1
 80162cc:	e7e4      	b.n	8016298 <__lo0bits+0x24>
 80162ce:	2020      	movs	r0, #32
 80162d0:	e7e0      	b.n	8016294 <__lo0bits+0x20>

080162d2 <__i2b>:
 80162d2:	b510      	push	{r4, lr}
 80162d4:	000c      	movs	r4, r1
 80162d6:	2101      	movs	r1, #1
 80162d8:	f7ff ff04 	bl	80160e4 <_Balloc>
 80162dc:	2301      	movs	r3, #1
 80162de:	6144      	str	r4, [r0, #20]
 80162e0:	6103      	str	r3, [r0, #16]
 80162e2:	bd10      	pop	{r4, pc}

080162e4 <__multiply>:
 80162e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162e6:	690b      	ldr	r3, [r1, #16]
 80162e8:	0014      	movs	r4, r2
 80162ea:	6912      	ldr	r2, [r2, #16]
 80162ec:	b089      	sub	sp, #36	; 0x24
 80162ee:	000d      	movs	r5, r1
 80162f0:	4293      	cmp	r3, r2
 80162f2:	da01      	bge.n	80162f8 <__multiply+0x14>
 80162f4:	0025      	movs	r5, r4
 80162f6:	000c      	movs	r4, r1
 80162f8:	692f      	ldr	r7, [r5, #16]
 80162fa:	6926      	ldr	r6, [r4, #16]
 80162fc:	6869      	ldr	r1, [r5, #4]
 80162fe:	19bb      	adds	r3, r7, r6
 8016300:	9302      	str	r3, [sp, #8]
 8016302:	68ab      	ldr	r3, [r5, #8]
 8016304:	19ba      	adds	r2, r7, r6
 8016306:	4293      	cmp	r3, r2
 8016308:	da00      	bge.n	801630c <__multiply+0x28>
 801630a:	3101      	adds	r1, #1
 801630c:	f7ff feea 	bl	80160e4 <_Balloc>
 8016310:	0002      	movs	r2, r0
 8016312:	19bb      	adds	r3, r7, r6
 8016314:	3214      	adds	r2, #20
 8016316:	009b      	lsls	r3, r3, #2
 8016318:	18d3      	adds	r3, r2, r3
 801631a:	469c      	mov	ip, r3
 801631c:	2100      	movs	r1, #0
 801631e:	0013      	movs	r3, r2
 8016320:	9004      	str	r0, [sp, #16]
 8016322:	4563      	cmp	r3, ip
 8016324:	d31d      	bcc.n	8016362 <__multiply+0x7e>
 8016326:	3514      	adds	r5, #20
 8016328:	00bf      	lsls	r7, r7, #2
 801632a:	19eb      	adds	r3, r5, r7
 801632c:	3414      	adds	r4, #20
 801632e:	00b6      	lsls	r6, r6, #2
 8016330:	9305      	str	r3, [sp, #20]
 8016332:	19a3      	adds	r3, r4, r6
 8016334:	9503      	str	r5, [sp, #12]
 8016336:	9401      	str	r4, [sp, #4]
 8016338:	9307      	str	r3, [sp, #28]
 801633a:	9b07      	ldr	r3, [sp, #28]
 801633c:	9901      	ldr	r1, [sp, #4]
 801633e:	4299      	cmp	r1, r3
 8016340:	d311      	bcc.n	8016366 <__multiply+0x82>
 8016342:	9b02      	ldr	r3, [sp, #8]
 8016344:	2b00      	cmp	r3, #0
 8016346:	dd06      	ble.n	8016356 <__multiply+0x72>
 8016348:	2304      	movs	r3, #4
 801634a:	425b      	negs	r3, r3
 801634c:	449c      	add	ip, r3
 801634e:	4663      	mov	r3, ip
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d051      	beq.n	80163fa <__multiply+0x116>
 8016356:	9b04      	ldr	r3, [sp, #16]
 8016358:	9a02      	ldr	r2, [sp, #8]
 801635a:	0018      	movs	r0, r3
 801635c:	611a      	str	r2, [r3, #16]
 801635e:	b009      	add	sp, #36	; 0x24
 8016360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016362:	c302      	stmia	r3!, {r1}
 8016364:	e7dd      	b.n	8016322 <__multiply+0x3e>
 8016366:	9b01      	ldr	r3, [sp, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	b298      	uxth	r0, r3
 801636c:	2800      	cmp	r0, #0
 801636e:	d01c      	beq.n	80163aa <__multiply+0xc6>
 8016370:	0015      	movs	r5, r2
 8016372:	2600      	movs	r6, #0
 8016374:	9f03      	ldr	r7, [sp, #12]
 8016376:	cf02      	ldmia	r7!, {r1}
 8016378:	682c      	ldr	r4, [r5, #0]
 801637a:	b28b      	uxth	r3, r1
 801637c:	4343      	muls	r3, r0
 801637e:	0c09      	lsrs	r1, r1, #16
 8016380:	4341      	muls	r1, r0
 8016382:	b2a4      	uxth	r4, r4
 8016384:	191b      	adds	r3, r3, r4
 8016386:	199b      	adds	r3, r3, r6
 8016388:	000e      	movs	r6, r1
 801638a:	6829      	ldr	r1, [r5, #0]
 801638c:	9506      	str	r5, [sp, #24]
 801638e:	0c09      	lsrs	r1, r1, #16
 8016390:	1871      	adds	r1, r6, r1
 8016392:	0c1e      	lsrs	r6, r3, #16
 8016394:	1989      	adds	r1, r1, r6
 8016396:	0c0e      	lsrs	r6, r1, #16
 8016398:	b29b      	uxth	r3, r3
 801639a:	0409      	lsls	r1, r1, #16
 801639c:	430b      	orrs	r3, r1
 801639e:	c508      	stmia	r5!, {r3}
 80163a0:	9b05      	ldr	r3, [sp, #20]
 80163a2:	42bb      	cmp	r3, r7
 80163a4:	d8e7      	bhi.n	8016376 <__multiply+0x92>
 80163a6:	9b06      	ldr	r3, [sp, #24]
 80163a8:	605e      	str	r6, [r3, #4]
 80163aa:	9b01      	ldr	r3, [sp, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	0c1d      	lsrs	r5, r3, #16
 80163b0:	d01e      	beq.n	80163f0 <__multiply+0x10c>
 80163b2:	0010      	movs	r0, r2
 80163b4:	2700      	movs	r7, #0
 80163b6:	6813      	ldr	r3, [r2, #0]
 80163b8:	9e03      	ldr	r6, [sp, #12]
 80163ba:	6831      	ldr	r1, [r6, #0]
 80163bc:	6804      	ldr	r4, [r0, #0]
 80163be:	b289      	uxth	r1, r1
 80163c0:	4369      	muls	r1, r5
 80163c2:	0c24      	lsrs	r4, r4, #16
 80163c4:	1909      	adds	r1, r1, r4
 80163c6:	19c9      	adds	r1, r1, r7
 80163c8:	040f      	lsls	r7, r1, #16
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	433b      	orrs	r3, r7
 80163ce:	6003      	str	r3, [r0, #0]
 80163d0:	ce80      	ldmia	r6!, {r7}
 80163d2:	6843      	ldr	r3, [r0, #4]
 80163d4:	0c3f      	lsrs	r7, r7, #16
 80163d6:	436f      	muls	r7, r5
 80163d8:	b29b      	uxth	r3, r3
 80163da:	18fb      	adds	r3, r7, r3
 80163dc:	0c09      	lsrs	r1, r1, #16
 80163de:	185b      	adds	r3, r3, r1
 80163e0:	9905      	ldr	r1, [sp, #20]
 80163e2:	9006      	str	r0, [sp, #24]
 80163e4:	0c1f      	lsrs	r7, r3, #16
 80163e6:	3004      	adds	r0, #4
 80163e8:	42b1      	cmp	r1, r6
 80163ea:	d8e6      	bhi.n	80163ba <__multiply+0xd6>
 80163ec:	9906      	ldr	r1, [sp, #24]
 80163ee:	604b      	str	r3, [r1, #4]
 80163f0:	9b01      	ldr	r3, [sp, #4]
 80163f2:	3204      	adds	r2, #4
 80163f4:	3304      	adds	r3, #4
 80163f6:	9301      	str	r3, [sp, #4]
 80163f8:	e79f      	b.n	801633a <__multiply+0x56>
 80163fa:	9b02      	ldr	r3, [sp, #8]
 80163fc:	3b01      	subs	r3, #1
 80163fe:	9302      	str	r3, [sp, #8]
 8016400:	e79f      	b.n	8016342 <__multiply+0x5e>
	...

08016404 <__pow5mult>:
 8016404:	2303      	movs	r3, #3
 8016406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016408:	4013      	ands	r3, r2
 801640a:	0006      	movs	r6, r0
 801640c:	000f      	movs	r7, r1
 801640e:	0015      	movs	r5, r2
 8016410:	2b00      	cmp	r3, #0
 8016412:	d008      	beq.n	8016426 <__pow5mult+0x22>
 8016414:	491a      	ldr	r1, [pc, #104]	; (8016480 <__pow5mult+0x7c>)
 8016416:	3b01      	subs	r3, #1
 8016418:	009a      	lsls	r2, r3, #2
 801641a:	5852      	ldr	r2, [r2, r1]
 801641c:	2300      	movs	r3, #0
 801641e:	0039      	movs	r1, r7
 8016420:	f7ff fe92 	bl	8016148 <__multadd>
 8016424:	0007      	movs	r7, r0
 8016426:	10ad      	asrs	r5, r5, #2
 8016428:	d027      	beq.n	801647a <__pow5mult+0x76>
 801642a:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801642c:	2c00      	cmp	r4, #0
 801642e:	d107      	bne.n	8016440 <__pow5mult+0x3c>
 8016430:	4914      	ldr	r1, [pc, #80]	; (8016484 <__pow5mult+0x80>)
 8016432:	0030      	movs	r0, r6
 8016434:	f7ff ff4d 	bl	80162d2 <__i2b>
 8016438:	2300      	movs	r3, #0
 801643a:	0004      	movs	r4, r0
 801643c:	64b0      	str	r0, [r6, #72]	; 0x48
 801643e:	6003      	str	r3, [r0, #0]
 8016440:	2301      	movs	r3, #1
 8016442:	421d      	tst	r5, r3
 8016444:	d00a      	beq.n	801645c <__pow5mult+0x58>
 8016446:	0039      	movs	r1, r7
 8016448:	0022      	movs	r2, r4
 801644a:	0030      	movs	r0, r6
 801644c:	f7ff ff4a 	bl	80162e4 <__multiply>
 8016450:	0039      	movs	r1, r7
 8016452:	9001      	str	r0, [sp, #4]
 8016454:	0030      	movs	r0, r6
 8016456:	f7ff fe6d 	bl	8016134 <_Bfree>
 801645a:	9f01      	ldr	r7, [sp, #4]
 801645c:	106d      	asrs	r5, r5, #1
 801645e:	d00c      	beq.n	801647a <__pow5mult+0x76>
 8016460:	6820      	ldr	r0, [r4, #0]
 8016462:	2800      	cmp	r0, #0
 8016464:	d107      	bne.n	8016476 <__pow5mult+0x72>
 8016466:	0022      	movs	r2, r4
 8016468:	0021      	movs	r1, r4
 801646a:	0030      	movs	r0, r6
 801646c:	f7ff ff3a 	bl	80162e4 <__multiply>
 8016470:	2300      	movs	r3, #0
 8016472:	6020      	str	r0, [r4, #0]
 8016474:	6003      	str	r3, [r0, #0]
 8016476:	0004      	movs	r4, r0
 8016478:	e7e2      	b.n	8016440 <__pow5mult+0x3c>
 801647a:	0038      	movs	r0, r7
 801647c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801647e:	46c0      	nop			; (mov r8, r8)
 8016480:	08019cb8 	.word	0x08019cb8
 8016484:	00000271 	.word	0x00000271

08016488 <__lshift>:
 8016488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801648a:	000d      	movs	r5, r1
 801648c:	0017      	movs	r7, r2
 801648e:	692b      	ldr	r3, [r5, #16]
 8016490:	1154      	asrs	r4, r2, #5
 8016492:	b085      	sub	sp, #20
 8016494:	18e3      	adds	r3, r4, r3
 8016496:	9301      	str	r3, [sp, #4]
 8016498:	3301      	adds	r3, #1
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	6849      	ldr	r1, [r1, #4]
 801649e:	68ab      	ldr	r3, [r5, #8]
 80164a0:	9002      	str	r0, [sp, #8]
 80164a2:	9a00      	ldr	r2, [sp, #0]
 80164a4:	4293      	cmp	r3, r2
 80164a6:	db35      	blt.n	8016514 <__lshift+0x8c>
 80164a8:	9802      	ldr	r0, [sp, #8]
 80164aa:	f7ff fe1b 	bl	80160e4 <_Balloc>
 80164ae:	2300      	movs	r3, #0
 80164b0:	0002      	movs	r2, r0
 80164b2:	0006      	movs	r6, r0
 80164b4:	0019      	movs	r1, r3
 80164b6:	3214      	adds	r2, #20
 80164b8:	42a3      	cmp	r3, r4
 80164ba:	db2e      	blt.n	801651a <__lshift+0x92>
 80164bc:	43e3      	mvns	r3, r4
 80164be:	17db      	asrs	r3, r3, #31
 80164c0:	401c      	ands	r4, r3
 80164c2:	002b      	movs	r3, r5
 80164c4:	00a4      	lsls	r4, r4, #2
 80164c6:	1914      	adds	r4, r2, r4
 80164c8:	692a      	ldr	r2, [r5, #16]
 80164ca:	3314      	adds	r3, #20
 80164cc:	0092      	lsls	r2, r2, #2
 80164ce:	189a      	adds	r2, r3, r2
 80164d0:	4694      	mov	ip, r2
 80164d2:	221f      	movs	r2, #31
 80164d4:	4017      	ands	r7, r2
 80164d6:	d024      	beq.n	8016522 <__lshift+0x9a>
 80164d8:	3201      	adds	r2, #1
 80164da:	1bd2      	subs	r2, r2, r7
 80164dc:	9203      	str	r2, [sp, #12]
 80164de:	2200      	movs	r2, #0
 80164e0:	6819      	ldr	r1, [r3, #0]
 80164e2:	0020      	movs	r0, r4
 80164e4:	40b9      	lsls	r1, r7
 80164e6:	430a      	orrs	r2, r1
 80164e8:	c404      	stmia	r4!, {r2}
 80164ea:	cb04      	ldmia	r3!, {r2}
 80164ec:	9903      	ldr	r1, [sp, #12]
 80164ee:	40ca      	lsrs	r2, r1
 80164f0:	459c      	cmp	ip, r3
 80164f2:	d8f5      	bhi.n	80164e0 <__lshift+0x58>
 80164f4:	6042      	str	r2, [r0, #4]
 80164f6:	2a00      	cmp	r2, #0
 80164f8:	d002      	beq.n	8016500 <__lshift+0x78>
 80164fa:	9b01      	ldr	r3, [sp, #4]
 80164fc:	3302      	adds	r3, #2
 80164fe:	9300      	str	r3, [sp, #0]
 8016500:	9b00      	ldr	r3, [sp, #0]
 8016502:	9802      	ldr	r0, [sp, #8]
 8016504:	3b01      	subs	r3, #1
 8016506:	6133      	str	r3, [r6, #16]
 8016508:	0029      	movs	r1, r5
 801650a:	f7ff fe13 	bl	8016134 <_Bfree>
 801650e:	0030      	movs	r0, r6
 8016510:	b005      	add	sp, #20
 8016512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016514:	3101      	adds	r1, #1
 8016516:	005b      	lsls	r3, r3, #1
 8016518:	e7c3      	b.n	80164a2 <__lshift+0x1a>
 801651a:	0098      	lsls	r0, r3, #2
 801651c:	5011      	str	r1, [r2, r0]
 801651e:	3301      	adds	r3, #1
 8016520:	e7ca      	b.n	80164b8 <__lshift+0x30>
 8016522:	cb04      	ldmia	r3!, {r2}
 8016524:	c404      	stmia	r4!, {r2}
 8016526:	459c      	cmp	ip, r3
 8016528:	d8fb      	bhi.n	8016522 <__lshift+0x9a>
 801652a:	e7e9      	b.n	8016500 <__lshift+0x78>

0801652c <__mcmp>:
 801652c:	690a      	ldr	r2, [r1, #16]
 801652e:	6903      	ldr	r3, [r0, #16]
 8016530:	b530      	push	{r4, r5, lr}
 8016532:	1a9b      	subs	r3, r3, r2
 8016534:	d10d      	bne.n	8016552 <__mcmp+0x26>
 8016536:	0092      	lsls	r2, r2, #2
 8016538:	3014      	adds	r0, #20
 801653a:	3114      	adds	r1, #20
 801653c:	1884      	adds	r4, r0, r2
 801653e:	1889      	adds	r1, r1, r2
 8016540:	3c04      	subs	r4, #4
 8016542:	3904      	subs	r1, #4
 8016544:	6825      	ldr	r5, [r4, #0]
 8016546:	680a      	ldr	r2, [r1, #0]
 8016548:	4295      	cmp	r5, r2
 801654a:	d004      	beq.n	8016556 <__mcmp+0x2a>
 801654c:	2301      	movs	r3, #1
 801654e:	4295      	cmp	r5, r2
 8016550:	d304      	bcc.n	801655c <__mcmp+0x30>
 8016552:	0018      	movs	r0, r3
 8016554:	bd30      	pop	{r4, r5, pc}
 8016556:	42a0      	cmp	r0, r4
 8016558:	d3f2      	bcc.n	8016540 <__mcmp+0x14>
 801655a:	e7fa      	b.n	8016552 <__mcmp+0x26>
 801655c:	425b      	negs	r3, r3
 801655e:	e7f8      	b.n	8016552 <__mcmp+0x26>

08016560 <__mdiff>:
 8016560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016562:	000d      	movs	r5, r1
 8016564:	b085      	sub	sp, #20
 8016566:	0007      	movs	r7, r0
 8016568:	0011      	movs	r1, r2
 801656a:	0028      	movs	r0, r5
 801656c:	0014      	movs	r4, r2
 801656e:	f7ff ffdd 	bl	801652c <__mcmp>
 8016572:	1e06      	subs	r6, r0, #0
 8016574:	d108      	bne.n	8016588 <__mdiff+0x28>
 8016576:	0001      	movs	r1, r0
 8016578:	0038      	movs	r0, r7
 801657a:	f7ff fdb3 	bl	80160e4 <_Balloc>
 801657e:	2301      	movs	r3, #1
 8016580:	6146      	str	r6, [r0, #20]
 8016582:	6103      	str	r3, [r0, #16]
 8016584:	b005      	add	sp, #20
 8016586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016588:	2301      	movs	r3, #1
 801658a:	9301      	str	r3, [sp, #4]
 801658c:	2800      	cmp	r0, #0
 801658e:	db04      	blt.n	801659a <__mdiff+0x3a>
 8016590:	0023      	movs	r3, r4
 8016592:	002c      	movs	r4, r5
 8016594:	001d      	movs	r5, r3
 8016596:	2300      	movs	r3, #0
 8016598:	9301      	str	r3, [sp, #4]
 801659a:	6861      	ldr	r1, [r4, #4]
 801659c:	0038      	movs	r0, r7
 801659e:	f7ff fda1 	bl	80160e4 <_Balloc>
 80165a2:	002f      	movs	r7, r5
 80165a4:	2200      	movs	r2, #0
 80165a6:	9b01      	ldr	r3, [sp, #4]
 80165a8:	6926      	ldr	r6, [r4, #16]
 80165aa:	60c3      	str	r3, [r0, #12]
 80165ac:	3414      	adds	r4, #20
 80165ae:	00b3      	lsls	r3, r6, #2
 80165b0:	18e3      	adds	r3, r4, r3
 80165b2:	9302      	str	r3, [sp, #8]
 80165b4:	692b      	ldr	r3, [r5, #16]
 80165b6:	3714      	adds	r7, #20
 80165b8:	009b      	lsls	r3, r3, #2
 80165ba:	18fb      	adds	r3, r7, r3
 80165bc:	9303      	str	r3, [sp, #12]
 80165be:	0003      	movs	r3, r0
 80165c0:	4694      	mov	ip, r2
 80165c2:	3314      	adds	r3, #20
 80165c4:	cc20      	ldmia	r4!, {r5}
 80165c6:	cf04      	ldmia	r7!, {r2}
 80165c8:	9201      	str	r2, [sp, #4]
 80165ca:	b2aa      	uxth	r2, r5
 80165cc:	4494      	add	ip, r2
 80165ce:	466a      	mov	r2, sp
 80165d0:	4661      	mov	r1, ip
 80165d2:	8892      	ldrh	r2, [r2, #4]
 80165d4:	0c2d      	lsrs	r5, r5, #16
 80165d6:	1a8a      	subs	r2, r1, r2
 80165d8:	9901      	ldr	r1, [sp, #4]
 80165da:	0c09      	lsrs	r1, r1, #16
 80165dc:	1a69      	subs	r1, r5, r1
 80165de:	1415      	asrs	r5, r2, #16
 80165e0:	1949      	adds	r1, r1, r5
 80165e2:	140d      	asrs	r5, r1, #16
 80165e4:	b292      	uxth	r2, r2
 80165e6:	0409      	lsls	r1, r1, #16
 80165e8:	430a      	orrs	r2, r1
 80165ea:	601a      	str	r2, [r3, #0]
 80165ec:	9a03      	ldr	r2, [sp, #12]
 80165ee:	46ac      	mov	ip, r5
 80165f0:	3304      	adds	r3, #4
 80165f2:	42ba      	cmp	r2, r7
 80165f4:	d8e6      	bhi.n	80165c4 <__mdiff+0x64>
 80165f6:	9902      	ldr	r1, [sp, #8]
 80165f8:	001a      	movs	r2, r3
 80165fa:	428c      	cmp	r4, r1
 80165fc:	d305      	bcc.n	801660a <__mdiff+0xaa>
 80165fe:	3a04      	subs	r2, #4
 8016600:	6813      	ldr	r3, [r2, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d00e      	beq.n	8016624 <__mdiff+0xc4>
 8016606:	6106      	str	r6, [r0, #16]
 8016608:	e7bc      	b.n	8016584 <__mdiff+0x24>
 801660a:	cc04      	ldmia	r4!, {r2}
 801660c:	b291      	uxth	r1, r2
 801660e:	4461      	add	r1, ip
 8016610:	140d      	asrs	r5, r1, #16
 8016612:	0c12      	lsrs	r2, r2, #16
 8016614:	1952      	adds	r2, r2, r5
 8016616:	1415      	asrs	r5, r2, #16
 8016618:	b289      	uxth	r1, r1
 801661a:	0412      	lsls	r2, r2, #16
 801661c:	430a      	orrs	r2, r1
 801661e:	46ac      	mov	ip, r5
 8016620:	c304      	stmia	r3!, {r2}
 8016622:	e7e8      	b.n	80165f6 <__mdiff+0x96>
 8016624:	3e01      	subs	r6, #1
 8016626:	e7ea      	b.n	80165fe <__mdiff+0x9e>

08016628 <__ulp>:
 8016628:	000b      	movs	r3, r1
 801662a:	4910      	ldr	r1, [pc, #64]	; (801666c <__ulp+0x44>)
 801662c:	b510      	push	{r4, lr}
 801662e:	4019      	ands	r1, r3
 8016630:	4b0f      	ldr	r3, [pc, #60]	; (8016670 <__ulp+0x48>)
 8016632:	18c9      	adds	r1, r1, r3
 8016634:	2900      	cmp	r1, #0
 8016636:	dd04      	ble.n	8016642 <__ulp+0x1a>
 8016638:	2200      	movs	r2, #0
 801663a:	000b      	movs	r3, r1
 801663c:	0010      	movs	r0, r2
 801663e:	0019      	movs	r1, r3
 8016640:	bd10      	pop	{r4, pc}
 8016642:	4249      	negs	r1, r1
 8016644:	1509      	asrs	r1, r1, #20
 8016646:	2200      	movs	r2, #0
 8016648:	2300      	movs	r3, #0
 801664a:	2913      	cmp	r1, #19
 801664c:	dc04      	bgt.n	8016658 <__ulp+0x30>
 801664e:	2080      	movs	r0, #128	; 0x80
 8016650:	0300      	lsls	r0, r0, #12
 8016652:	4108      	asrs	r0, r1
 8016654:	0003      	movs	r3, r0
 8016656:	e7f1      	b.n	801663c <__ulp+0x14>
 8016658:	3914      	subs	r1, #20
 801665a:	2001      	movs	r0, #1
 801665c:	291e      	cmp	r1, #30
 801665e:	dc02      	bgt.n	8016666 <__ulp+0x3e>
 8016660:	241f      	movs	r4, #31
 8016662:	1a61      	subs	r1, r4, r1
 8016664:	4088      	lsls	r0, r1
 8016666:	0002      	movs	r2, r0
 8016668:	e7e8      	b.n	801663c <__ulp+0x14>
 801666a:	46c0      	nop			; (mov r8, r8)
 801666c:	7ff00000 	.word	0x7ff00000
 8016670:	fcc00000 	.word	0xfcc00000

08016674 <__b2d>:
 8016674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016676:	0006      	movs	r6, r0
 8016678:	6903      	ldr	r3, [r0, #16]
 801667a:	3614      	adds	r6, #20
 801667c:	009b      	lsls	r3, r3, #2
 801667e:	18f3      	adds	r3, r6, r3
 8016680:	1f1d      	subs	r5, r3, #4
 8016682:	682c      	ldr	r4, [r5, #0]
 8016684:	000f      	movs	r7, r1
 8016686:	0020      	movs	r0, r4
 8016688:	9301      	str	r3, [sp, #4]
 801668a:	f7ff fdd9 	bl	8016240 <__hi0bits>
 801668e:	2320      	movs	r3, #32
 8016690:	1a1b      	subs	r3, r3, r0
 8016692:	603b      	str	r3, [r7, #0]
 8016694:	491c      	ldr	r1, [pc, #112]	; (8016708 <__b2d+0x94>)
 8016696:	280a      	cmp	r0, #10
 8016698:	dc16      	bgt.n	80166c8 <__b2d+0x54>
 801669a:	230b      	movs	r3, #11
 801669c:	0027      	movs	r7, r4
 801669e:	1a1b      	subs	r3, r3, r0
 80166a0:	40df      	lsrs	r7, r3
 80166a2:	4339      	orrs	r1, r7
 80166a4:	469c      	mov	ip, r3
 80166a6:	000b      	movs	r3, r1
 80166a8:	2100      	movs	r1, #0
 80166aa:	42ae      	cmp	r6, r5
 80166ac:	d202      	bcs.n	80166b4 <__b2d+0x40>
 80166ae:	9901      	ldr	r1, [sp, #4]
 80166b0:	3908      	subs	r1, #8
 80166b2:	6809      	ldr	r1, [r1, #0]
 80166b4:	3015      	adds	r0, #21
 80166b6:	4084      	lsls	r4, r0
 80166b8:	4660      	mov	r0, ip
 80166ba:	40c1      	lsrs	r1, r0
 80166bc:	430c      	orrs	r4, r1
 80166be:	0022      	movs	r2, r4
 80166c0:	0010      	movs	r0, r2
 80166c2:	0019      	movs	r1, r3
 80166c4:	b003      	add	sp, #12
 80166c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c8:	2700      	movs	r7, #0
 80166ca:	42ae      	cmp	r6, r5
 80166cc:	d202      	bcs.n	80166d4 <__b2d+0x60>
 80166ce:	9d01      	ldr	r5, [sp, #4]
 80166d0:	3d08      	subs	r5, #8
 80166d2:	682f      	ldr	r7, [r5, #0]
 80166d4:	380b      	subs	r0, #11
 80166d6:	4684      	mov	ip, r0
 80166d8:	1e03      	subs	r3, r0, #0
 80166da:	d012      	beq.n	8016702 <__b2d+0x8e>
 80166dc:	409c      	lsls	r4, r3
 80166de:	2020      	movs	r0, #32
 80166e0:	4321      	orrs	r1, r4
 80166e2:	003c      	movs	r4, r7
 80166e4:	1ac0      	subs	r0, r0, r3
 80166e6:	40c4      	lsrs	r4, r0
 80166e8:	4321      	orrs	r1, r4
 80166ea:	000b      	movs	r3, r1
 80166ec:	2100      	movs	r1, #0
 80166ee:	42b5      	cmp	r5, r6
 80166f0:	d901      	bls.n	80166f6 <__b2d+0x82>
 80166f2:	3d04      	subs	r5, #4
 80166f4:	6829      	ldr	r1, [r5, #0]
 80166f6:	4664      	mov	r4, ip
 80166f8:	40c1      	lsrs	r1, r0
 80166fa:	40a7      	lsls	r7, r4
 80166fc:	430f      	orrs	r7, r1
 80166fe:	003a      	movs	r2, r7
 8016700:	e7de      	b.n	80166c0 <__b2d+0x4c>
 8016702:	4321      	orrs	r1, r4
 8016704:	000b      	movs	r3, r1
 8016706:	e7fa      	b.n	80166fe <__b2d+0x8a>
 8016708:	3ff00000 	.word	0x3ff00000

0801670c <__d2b>:
 801670c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801670e:	001d      	movs	r5, r3
 8016710:	2101      	movs	r1, #1
 8016712:	0014      	movs	r4, r2
 8016714:	9f08      	ldr	r7, [sp, #32]
 8016716:	f7ff fce5 	bl	80160e4 <_Balloc>
 801671a:	032b      	lsls	r3, r5, #12
 801671c:	006d      	lsls	r5, r5, #1
 801671e:	0006      	movs	r6, r0
 8016720:	0b1b      	lsrs	r3, r3, #12
 8016722:	0d6d      	lsrs	r5, r5, #21
 8016724:	d124      	bne.n	8016770 <__d2b+0x64>
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	2c00      	cmp	r4, #0
 801672a:	d027      	beq.n	801677c <__d2b+0x70>
 801672c:	4668      	mov	r0, sp
 801672e:	9400      	str	r4, [sp, #0]
 8016730:	f7ff fda0 	bl	8016274 <__lo0bits>
 8016734:	9c00      	ldr	r4, [sp, #0]
 8016736:	2800      	cmp	r0, #0
 8016738:	d01e      	beq.n	8016778 <__d2b+0x6c>
 801673a:	9b01      	ldr	r3, [sp, #4]
 801673c:	2120      	movs	r1, #32
 801673e:	001a      	movs	r2, r3
 8016740:	1a09      	subs	r1, r1, r0
 8016742:	408a      	lsls	r2, r1
 8016744:	40c3      	lsrs	r3, r0
 8016746:	4322      	orrs	r2, r4
 8016748:	6172      	str	r2, [r6, #20]
 801674a:	9301      	str	r3, [sp, #4]
 801674c:	9c01      	ldr	r4, [sp, #4]
 801674e:	61b4      	str	r4, [r6, #24]
 8016750:	1e63      	subs	r3, r4, #1
 8016752:	419c      	sbcs	r4, r3
 8016754:	3401      	adds	r4, #1
 8016756:	6134      	str	r4, [r6, #16]
 8016758:	2d00      	cmp	r5, #0
 801675a:	d018      	beq.n	801678e <__d2b+0x82>
 801675c:	4b12      	ldr	r3, [pc, #72]	; (80167a8 <__d2b+0x9c>)
 801675e:	18ed      	adds	r5, r5, r3
 8016760:	2335      	movs	r3, #53	; 0x35
 8016762:	182d      	adds	r5, r5, r0
 8016764:	603d      	str	r5, [r7, #0]
 8016766:	1a18      	subs	r0, r3, r0
 8016768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801676a:	6018      	str	r0, [r3, #0]
 801676c:	0030      	movs	r0, r6
 801676e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016770:	2280      	movs	r2, #128	; 0x80
 8016772:	0352      	lsls	r2, r2, #13
 8016774:	4313      	orrs	r3, r2
 8016776:	e7d6      	b.n	8016726 <__d2b+0x1a>
 8016778:	6174      	str	r4, [r6, #20]
 801677a:	e7e7      	b.n	801674c <__d2b+0x40>
 801677c:	a801      	add	r0, sp, #4
 801677e:	f7ff fd79 	bl	8016274 <__lo0bits>
 8016782:	2401      	movs	r4, #1
 8016784:	9b01      	ldr	r3, [sp, #4]
 8016786:	6134      	str	r4, [r6, #16]
 8016788:	6173      	str	r3, [r6, #20]
 801678a:	3020      	adds	r0, #32
 801678c:	e7e4      	b.n	8016758 <__d2b+0x4c>
 801678e:	4b07      	ldr	r3, [pc, #28]	; (80167ac <__d2b+0xa0>)
 8016790:	18c0      	adds	r0, r0, r3
 8016792:	4b07      	ldr	r3, [pc, #28]	; (80167b0 <__d2b+0xa4>)
 8016794:	6038      	str	r0, [r7, #0]
 8016796:	18e3      	adds	r3, r4, r3
 8016798:	009b      	lsls	r3, r3, #2
 801679a:	18f3      	adds	r3, r6, r3
 801679c:	6958      	ldr	r0, [r3, #20]
 801679e:	f7ff fd4f 	bl	8016240 <__hi0bits>
 80167a2:	0164      	lsls	r4, r4, #5
 80167a4:	1a20      	subs	r0, r4, r0
 80167a6:	e7df      	b.n	8016768 <__d2b+0x5c>
 80167a8:	fffffbcd 	.word	0xfffffbcd
 80167ac:	fffffbce 	.word	0xfffffbce
 80167b0:	3fffffff 	.word	0x3fffffff

080167b4 <__ratio>:
 80167b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167b6:	b085      	sub	sp, #20
 80167b8:	000f      	movs	r7, r1
 80167ba:	a902      	add	r1, sp, #8
 80167bc:	0006      	movs	r6, r0
 80167be:	f7ff ff59 	bl	8016674 <__b2d>
 80167c2:	0004      	movs	r4, r0
 80167c4:	000d      	movs	r5, r1
 80167c6:	0038      	movs	r0, r7
 80167c8:	a903      	add	r1, sp, #12
 80167ca:	9400      	str	r4, [sp, #0]
 80167cc:	9501      	str	r5, [sp, #4]
 80167ce:	f7ff ff51 	bl	8016674 <__b2d>
 80167d2:	6936      	ldr	r6, [r6, #16]
 80167d4:	693f      	ldr	r7, [r7, #16]
 80167d6:	0002      	movs	r2, r0
 80167d8:	1bf7      	subs	r7, r6, r7
 80167da:	017e      	lsls	r6, r7, #5
 80167dc:	46b4      	mov	ip, r6
 80167de:	9f03      	ldr	r7, [sp, #12]
 80167e0:	9e02      	ldr	r6, [sp, #8]
 80167e2:	000b      	movs	r3, r1
 80167e4:	1bf6      	subs	r6, r6, r7
 80167e6:	4466      	add	r6, ip
 80167e8:	0537      	lsls	r7, r6, #20
 80167ea:	2e00      	cmp	r6, #0
 80167ec:	dd07      	ble.n	80167fe <__ratio+0x4a>
 80167ee:	1979      	adds	r1, r7, r5
 80167f0:	9101      	str	r1, [sp, #4]
 80167f2:	9800      	ldr	r0, [sp, #0]
 80167f4:	9901      	ldr	r1, [sp, #4]
 80167f6:	f7ea ff13 	bl	8001620 <__aeabi_ddiv>
 80167fa:	b005      	add	sp, #20
 80167fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167fe:	1bcb      	subs	r3, r1, r7
 8016800:	e7f7      	b.n	80167f2 <__ratio+0x3e>

08016802 <__copybits>:
 8016802:	0013      	movs	r3, r2
 8016804:	3901      	subs	r1, #1
 8016806:	b510      	push	{r4, lr}
 8016808:	1149      	asrs	r1, r1, #5
 801680a:	6912      	ldr	r2, [r2, #16]
 801680c:	3101      	adds	r1, #1
 801680e:	0089      	lsls	r1, r1, #2
 8016810:	3314      	adds	r3, #20
 8016812:	0092      	lsls	r2, r2, #2
 8016814:	1841      	adds	r1, r0, r1
 8016816:	189a      	adds	r2, r3, r2
 8016818:	429a      	cmp	r2, r3
 801681a:	d803      	bhi.n	8016824 <__copybits+0x22>
 801681c:	2300      	movs	r3, #0
 801681e:	4281      	cmp	r1, r0
 8016820:	d803      	bhi.n	801682a <__copybits+0x28>
 8016822:	bd10      	pop	{r4, pc}
 8016824:	cb10      	ldmia	r3!, {r4}
 8016826:	c010      	stmia	r0!, {r4}
 8016828:	e7f6      	b.n	8016818 <__copybits+0x16>
 801682a:	c008      	stmia	r0!, {r3}
 801682c:	e7f7      	b.n	801681e <__copybits+0x1c>

0801682e <__any_on>:
 801682e:	0002      	movs	r2, r0
 8016830:	6900      	ldr	r0, [r0, #16]
 8016832:	b510      	push	{r4, lr}
 8016834:	3214      	adds	r2, #20
 8016836:	114b      	asrs	r3, r1, #5
 8016838:	4298      	cmp	r0, r3
 801683a:	db12      	blt.n	8016862 <__any_on+0x34>
 801683c:	dd0b      	ble.n	8016856 <__any_on+0x28>
 801683e:	201f      	movs	r0, #31
 8016840:	4001      	ands	r1, r0
 8016842:	d008      	beq.n	8016856 <__any_on+0x28>
 8016844:	0098      	lsls	r0, r3, #2
 8016846:	5884      	ldr	r4, [r0, r2]
 8016848:	0020      	movs	r0, r4
 801684a:	40c8      	lsrs	r0, r1
 801684c:	4088      	lsls	r0, r1
 801684e:	0001      	movs	r1, r0
 8016850:	2001      	movs	r0, #1
 8016852:	428c      	cmp	r4, r1
 8016854:	d104      	bne.n	8016860 <__any_on+0x32>
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	18d3      	adds	r3, r2, r3
 801685a:	4293      	cmp	r3, r2
 801685c:	d803      	bhi.n	8016866 <__any_on+0x38>
 801685e:	2000      	movs	r0, #0
 8016860:	bd10      	pop	{r4, pc}
 8016862:	0003      	movs	r3, r0
 8016864:	e7f7      	b.n	8016856 <__any_on+0x28>
 8016866:	3b04      	subs	r3, #4
 8016868:	6819      	ldr	r1, [r3, #0]
 801686a:	2900      	cmp	r1, #0
 801686c:	d0f5      	beq.n	801685a <__any_on+0x2c>
 801686e:	2001      	movs	r0, #1
 8016870:	e7f6      	b.n	8016860 <__any_on+0x32>
	...

08016874 <frexp>:
 8016874:	b570      	push	{r4, r5, r6, lr}
 8016876:	0014      	movs	r4, r2
 8016878:	2500      	movs	r5, #0
 801687a:	6025      	str	r5, [r4, #0]
 801687c:	4d10      	ldr	r5, [pc, #64]	; (80168c0 <frexp+0x4c>)
 801687e:	004b      	lsls	r3, r1, #1
 8016880:	000a      	movs	r2, r1
 8016882:	085b      	lsrs	r3, r3, #1
 8016884:	42ab      	cmp	r3, r5
 8016886:	dc1a      	bgt.n	80168be <frexp+0x4a>
 8016888:	001d      	movs	r5, r3
 801688a:	4305      	orrs	r5, r0
 801688c:	d017      	beq.n	80168be <frexp+0x4a>
 801688e:	4d0d      	ldr	r5, [pc, #52]	; (80168c4 <frexp+0x50>)
 8016890:	42ab      	cmp	r3, r5
 8016892:	dc09      	bgt.n	80168a8 <frexp+0x34>
 8016894:	2200      	movs	r2, #0
 8016896:	4b0c      	ldr	r3, [pc, #48]	; (80168c8 <frexp+0x54>)
 8016898:	f7eb facc 	bl	8001e34 <__aeabi_dmul>
 801689c:	2536      	movs	r5, #54	; 0x36
 801689e:	000a      	movs	r2, r1
 80168a0:	004b      	lsls	r3, r1, #1
 80168a2:	426d      	negs	r5, r5
 80168a4:	085b      	lsrs	r3, r3, #1
 80168a6:	6025      	str	r5, [r4, #0]
 80168a8:	4d08      	ldr	r5, [pc, #32]	; (80168cc <frexp+0x58>)
 80168aa:	151b      	asrs	r3, r3, #20
 80168ac:	195b      	adds	r3, r3, r5
 80168ae:	6825      	ldr	r5, [r4, #0]
 80168b0:	18eb      	adds	r3, r5, r3
 80168b2:	6023      	str	r3, [r4, #0]
 80168b4:	4b06      	ldr	r3, [pc, #24]	; (80168d0 <frexp+0x5c>)
 80168b6:	401a      	ands	r2, r3
 80168b8:	4b06      	ldr	r3, [pc, #24]	; (80168d4 <frexp+0x60>)
 80168ba:	4313      	orrs	r3, r2
 80168bc:	0019      	movs	r1, r3
 80168be:	bd70      	pop	{r4, r5, r6, pc}
 80168c0:	7fefffff 	.word	0x7fefffff
 80168c4:	000fffff 	.word	0x000fffff
 80168c8:	43500000 	.word	0x43500000
 80168cc:	fffffc02 	.word	0xfffffc02
 80168d0:	800fffff 	.word	0x800fffff
 80168d4:	3fe00000 	.word	0x3fe00000

080168d8 <__ssprint_r>:
 80168d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168da:	6893      	ldr	r3, [r2, #8]
 80168dc:	b087      	sub	sp, #28
 80168de:	9002      	str	r0, [sp, #8]
 80168e0:	000c      	movs	r4, r1
 80168e2:	0016      	movs	r6, r2
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d063      	beq.n	80169b0 <__ssprint_r+0xd8>
 80168e8:	6813      	ldr	r3, [r2, #0]
 80168ea:	9303      	str	r3, [sp, #12]
 80168ec:	2300      	movs	r3, #0
 80168ee:	001f      	movs	r7, r3
 80168f0:	9305      	str	r3, [sp, #20]
 80168f2:	2f00      	cmp	r7, #0
 80168f4:	d02e      	beq.n	8016954 <__ssprint_r+0x7c>
 80168f6:	68a5      	ldr	r5, [r4, #8]
 80168f8:	42af      	cmp	r7, r5
 80168fa:	d347      	bcc.n	801698c <__ssprint_r+0xb4>
 80168fc:	2390      	movs	r3, #144	; 0x90
 80168fe:	89a2      	ldrh	r2, [r4, #12]
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	421a      	tst	r2, r3
 8016904:	d042      	beq.n	801698c <__ssprint_r+0xb4>
 8016906:	2003      	movs	r0, #3
 8016908:	6921      	ldr	r1, [r4, #16]
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	1a5b      	subs	r3, r3, r1
 801690e:	9304      	str	r3, [sp, #16]
 8016910:	6963      	ldr	r3, [r4, #20]
 8016912:	4343      	muls	r3, r0
 8016914:	0fd8      	lsrs	r0, r3, #31
 8016916:	18c3      	adds	r3, r0, r3
 8016918:	105b      	asrs	r3, r3, #1
 801691a:	9301      	str	r3, [sp, #4]
 801691c:	9b04      	ldr	r3, [sp, #16]
 801691e:	9801      	ldr	r0, [sp, #4]
 8016920:	3301      	adds	r3, #1
 8016922:	19db      	adds	r3, r3, r7
 8016924:	4283      	cmp	r3, r0
 8016926:	d900      	bls.n	801692a <__ssprint_r+0x52>
 8016928:	9301      	str	r3, [sp, #4]
 801692a:	0553      	lsls	r3, r2, #21
 801692c:	d544      	bpl.n	80169b8 <__ssprint_r+0xe0>
 801692e:	9901      	ldr	r1, [sp, #4]
 8016930:	9802      	ldr	r0, [sp, #8]
 8016932:	f7fb fab7 	bl	8011ea4 <_malloc_r>
 8016936:	1e05      	subs	r5, r0, #0
 8016938:	d114      	bne.n	8016964 <__ssprint_r+0x8c>
 801693a:	230c      	movs	r3, #12
 801693c:	9a02      	ldr	r2, [sp, #8]
 801693e:	2001      	movs	r0, #1
 8016940:	6013      	str	r3, [r2, #0]
 8016942:	2340      	movs	r3, #64	; 0x40
 8016944:	89a2      	ldrh	r2, [r4, #12]
 8016946:	4240      	negs	r0, r0
 8016948:	4313      	orrs	r3, r2
 801694a:	81a3      	strh	r3, [r4, #12]
 801694c:	2300      	movs	r3, #0
 801694e:	60b3      	str	r3, [r6, #8]
 8016950:	6073      	str	r3, [r6, #4]
 8016952:	e02f      	b.n	80169b4 <__ssprint_r+0xdc>
 8016954:	9b03      	ldr	r3, [sp, #12]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	9305      	str	r3, [sp, #20]
 801695a:	9b03      	ldr	r3, [sp, #12]
 801695c:	685f      	ldr	r7, [r3, #4]
 801695e:	3308      	adds	r3, #8
 8016960:	9303      	str	r3, [sp, #12]
 8016962:	e7c6      	b.n	80168f2 <__ssprint_r+0x1a>
 8016964:	9a04      	ldr	r2, [sp, #16]
 8016966:	6921      	ldr	r1, [r4, #16]
 8016968:	f7fb fcd5 	bl	8012316 <memcpy>
 801696c:	89a3      	ldrh	r3, [r4, #12]
 801696e:	4a18      	ldr	r2, [pc, #96]	; (80169d0 <__ssprint_r+0xf8>)
 8016970:	401a      	ands	r2, r3
 8016972:	2380      	movs	r3, #128	; 0x80
 8016974:	4313      	orrs	r3, r2
 8016976:	81a3      	strh	r3, [r4, #12]
 8016978:	9b04      	ldr	r3, [sp, #16]
 801697a:	6125      	str	r5, [r4, #16]
 801697c:	18ed      	adds	r5, r5, r3
 801697e:	6025      	str	r5, [r4, #0]
 8016980:	003d      	movs	r5, r7
 8016982:	9b01      	ldr	r3, [sp, #4]
 8016984:	9a04      	ldr	r2, [sp, #16]
 8016986:	6163      	str	r3, [r4, #20]
 8016988:	1a9b      	subs	r3, r3, r2
 801698a:	60a3      	str	r3, [r4, #8]
 801698c:	42bd      	cmp	r5, r7
 801698e:	d900      	bls.n	8016992 <__ssprint_r+0xba>
 8016990:	003d      	movs	r5, r7
 8016992:	002a      	movs	r2, r5
 8016994:	9905      	ldr	r1, [sp, #20]
 8016996:	6820      	ldr	r0, [r4, #0]
 8016998:	f7ff fb91 	bl	80160be <memmove>
 801699c:	68a3      	ldr	r3, [r4, #8]
 801699e:	1b5b      	subs	r3, r3, r5
 80169a0:	60a3      	str	r3, [r4, #8]
 80169a2:	6823      	ldr	r3, [r4, #0]
 80169a4:	195d      	adds	r5, r3, r5
 80169a6:	68b3      	ldr	r3, [r6, #8]
 80169a8:	6025      	str	r5, [r4, #0]
 80169aa:	1bdb      	subs	r3, r3, r7
 80169ac:	60b3      	str	r3, [r6, #8]
 80169ae:	d1d1      	bne.n	8016954 <__ssprint_r+0x7c>
 80169b0:	2000      	movs	r0, #0
 80169b2:	6070      	str	r0, [r6, #4]
 80169b4:	b007      	add	sp, #28
 80169b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169b8:	9a01      	ldr	r2, [sp, #4]
 80169ba:	9802      	ldr	r0, [sp, #8]
 80169bc:	f7fb fcf0 	bl	80123a0 <_realloc_r>
 80169c0:	1e05      	subs	r5, r0, #0
 80169c2:	d1d9      	bne.n	8016978 <__ssprint_r+0xa0>
 80169c4:	6921      	ldr	r1, [r4, #16]
 80169c6:	9802      	ldr	r0, [sp, #8]
 80169c8:	f7fe ff78 	bl	80158bc <_free_r>
 80169cc:	e7b5      	b.n	801693a <__ssprint_r+0x62>
 80169ce:	46c0      	nop			; (mov r8, r8)
 80169d0:	fffffb7f 	.word	0xfffffb7f

080169d4 <__register_exitproc>:
 80169d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169d6:	4d29      	ldr	r5, [pc, #164]	; (8016a7c <__register_exitproc+0xa8>)
 80169d8:	0006      	movs	r6, r0
 80169da:	6828      	ldr	r0, [r5, #0]
 80169dc:	9301      	str	r3, [sp, #4]
 80169de:	9100      	str	r1, [sp, #0]
 80169e0:	0017      	movs	r7, r2
 80169e2:	f7ff fb5f 	bl	80160a4 <__retarget_lock_acquire_recursive>
 80169e6:	4b26      	ldr	r3, [pc, #152]	; (8016a80 <__register_exitproc+0xac>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	001c      	movs	r4, r3
 80169ec:	34fc      	adds	r4, #252	; 0xfc
 80169ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80169f0:	2800      	cmp	r0, #0
 80169f2:	d103      	bne.n	80169fc <__register_exitproc+0x28>
 80169f4:	334d      	adds	r3, #77	; 0x4d
 80169f6:	33ff      	adds	r3, #255	; 0xff
 80169f8:	0018      	movs	r0, r3
 80169fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80169fc:	6843      	ldr	r3, [r0, #4]
 80169fe:	2b1f      	cmp	r3, #31
 8016a00:	dd18      	ble.n	8016a34 <__register_exitproc+0x60>
 8016a02:	4b20      	ldr	r3, [pc, #128]	; (8016a84 <__register_exitproc+0xb0>)
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d105      	bne.n	8016a14 <__register_exitproc+0x40>
 8016a08:	6828      	ldr	r0, [r5, #0]
 8016a0a:	f7ff fb4c 	bl	80160a6 <__retarget_lock_release_recursive>
 8016a0e:	2001      	movs	r0, #1
 8016a10:	4240      	negs	r0, r0
 8016a12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a14:	20c8      	movs	r0, #200	; 0xc8
 8016a16:	0040      	lsls	r0, r0, #1
 8016a18:	f7fb fa30 	bl	8011e7c <malloc>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	d0f3      	beq.n	8016a08 <__register_exitproc+0x34>
 8016a20:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016a22:	2300      	movs	r3, #0
 8016a24:	6002      	str	r2, [r0, #0]
 8016a26:	22c4      	movs	r2, #196	; 0xc4
 8016a28:	0052      	lsls	r2, r2, #1
 8016a2a:	6043      	str	r3, [r0, #4]
 8016a2c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016a2e:	5083      	str	r3, [r0, r2]
 8016a30:	3204      	adds	r2, #4
 8016a32:	5083      	str	r3, [r0, r2]
 8016a34:	6843      	ldr	r3, [r0, #4]
 8016a36:	2e00      	cmp	r6, #0
 8016a38:	d014      	beq.n	8016a64 <__register_exitproc+0x90>
 8016a3a:	009a      	lsls	r2, r3, #2
 8016a3c:	1882      	adds	r2, r0, r2
 8016a3e:	0011      	movs	r1, r2
 8016a40:	3188      	adds	r1, #136	; 0x88
 8016a42:	600f      	str	r7, [r1, #0]
 8016a44:	2101      	movs	r1, #1
 8016a46:	0004      	movs	r4, r0
 8016a48:	4099      	lsls	r1, r3
 8016a4a:	3485      	adds	r4, #133	; 0x85
 8016a4c:	34ff      	adds	r4, #255	; 0xff
 8016a4e:	6865      	ldr	r5, [r4, #4]
 8016a50:	32fc      	adds	r2, #252	; 0xfc
 8016a52:	430d      	orrs	r5, r1
 8016a54:	6065      	str	r5, [r4, #4]
 8016a56:	9d01      	ldr	r5, [sp, #4]
 8016a58:	60d5      	str	r5, [r2, #12]
 8016a5a:	2e02      	cmp	r6, #2
 8016a5c:	d102      	bne.n	8016a64 <__register_exitproc+0x90>
 8016a5e:	68a2      	ldr	r2, [r4, #8]
 8016a60:	4311      	orrs	r1, r2
 8016a62:	60a1      	str	r1, [r4, #8]
 8016a64:	1c5a      	adds	r2, r3, #1
 8016a66:	6042      	str	r2, [r0, #4]
 8016a68:	3302      	adds	r3, #2
 8016a6a:	9a00      	ldr	r2, [sp, #0]
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	501a      	str	r2, [r3, r0]
 8016a70:	4b02      	ldr	r3, [pc, #8]	; (8016a7c <__register_exitproc+0xa8>)
 8016a72:	6818      	ldr	r0, [r3, #0]
 8016a74:	f7ff fb17 	bl	80160a6 <__retarget_lock_release_recursive>
 8016a78:	2000      	movs	r0, #0
 8016a7a:	e7ca      	b.n	8016a12 <__register_exitproc+0x3e>
 8016a7c:	20000a74 	.word	0x20000a74
 8016a80:	080199fc 	.word	0x080199fc
 8016a84:	08011e7d 	.word	0x08011e7d

08016a88 <_sbrk>:
 8016a88:	4b05      	ldr	r3, [pc, #20]	; (8016aa0 <_sbrk+0x18>)
 8016a8a:	0002      	movs	r2, r0
 8016a8c:	6819      	ldr	r1, [r3, #0]
 8016a8e:	2900      	cmp	r1, #0
 8016a90:	d101      	bne.n	8016a96 <_sbrk+0xe>
 8016a92:	4904      	ldr	r1, [pc, #16]	; (8016aa4 <_sbrk+0x1c>)
 8016a94:	6019      	str	r1, [r3, #0]
 8016a96:	6818      	ldr	r0, [r3, #0]
 8016a98:	1882      	adds	r2, r0, r2
 8016a9a:	601a      	str	r2, [r3, #0]
 8016a9c:	4770      	bx	lr
 8016a9e:	46c0      	nop			; (mov r8, r8)
 8016aa0:	200067bc 	.word	0x200067bc
 8016aa4:	20006df0 	.word	0x20006df0

08016aa8 <_init>:
 8016aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aaa:	46c0      	nop			; (mov r8, r8)
 8016aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aae:	bc08      	pop	{r3}
 8016ab0:	469e      	mov	lr, r3
 8016ab2:	4770      	bx	lr

08016ab4 <_fini>:
 8016ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ab6:	46c0      	nop			; (mov r8, r8)
 8016ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aba:	bc08      	pop	{r3}
 8016abc:	469e      	mov	lr, r3
 8016abe:	4770      	bx	lr
