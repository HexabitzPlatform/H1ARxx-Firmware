
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee0  08017d50  08017d50  00027d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac30  0801ac30  00030ab4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac30  0801ac30  0002ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac38  0801ac38  00030ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ac38  0801ac38  0002ac38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac40  0801ac40  0002ac40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ab4  20000000  0801ac44  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fd8  20000ab8  0801b6f8  00030ab8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006a90  0801b6f8  00036a90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030ab4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052279  00000000  00000000  00030adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009408  00000000  00000000  00082d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001d265  00000000  00000000  0008c15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  000a93c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002178  00000000  00000000  000aae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000280ee  00000000  00000000  000acfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009d19  00000000  00000000  000d50c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000deddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006514  00000000  00000000  000dee34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000e5348  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000e5414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ab8 	.word	0x20000ab8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017d38 	.word	0x08017d38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000abc 	.word	0x20000abc
 8000100:	08017d38 	.word	0x08017d38

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 f9af 	bl	80017b0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f8f9 	bl	8001654 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f9a1 	bl	80017b0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f997 	bl	80017b0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f91b 	bl	80016cc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 f911 	bl	80016cc <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fa2b 	bl	800091c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9af 	bl	8000834 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa1d 	bl	800091c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa13 	bl	800091c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9bd 	bl	8000884 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f9b3 	bl	8000884 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f89e 	bl	800069c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0415      	lsls	r5, r2, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	000f      	movs	r7, r1
 8000574:	0001      	movs	r1, r0
 8000576:	002e      	movs	r6, r5
 8000578:	46c6      	mov	lr, r8
 800057a:	4684      	mov	ip, r0
 800057c:	0400      	lsls	r0, r0, #16
 800057e:	0c14      	lsrs	r4, r2, #16
 8000580:	0c00      	lsrs	r0, r0, #16
 8000582:	0c09      	lsrs	r1, r1, #16
 8000584:	4346      	muls	r6, r0
 8000586:	434d      	muls	r5, r1
 8000588:	4360      	muls	r0, r4
 800058a:	4361      	muls	r1, r4
 800058c:	1940      	adds	r0, r0, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	1824      	adds	r4, r4, r0
 8000592:	b500      	push	{lr}
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	0240      	lsls	r0, r0, #9
 800059c:	4680      	mov	r8, r0
 800059e:	4441      	add	r1, r8
 80005a0:	0c25      	lsrs	r5, r4, #16
 80005a2:	186d      	adds	r5, r5, r1
 80005a4:	4661      	mov	r1, ip
 80005a6:	4359      	muls	r1, r3
 80005a8:	437a      	muls	r2, r7
 80005aa:	0430      	lsls	r0, r6, #16
 80005ac:	1949      	adds	r1, r1, r5
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	0c00      	lsrs	r0, r0, #16
 80005b2:	1820      	adds	r0, r4, r0
 80005b4:	1889      	adds	r1, r1, r2
 80005b6:	bc80      	pop	{r7}
 80005b8:	46b8      	mov	r8, r7
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005bc <__aeabi_d2uiz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__aeabi_d2uiz+0x38>)
 80005c2:	0004      	movs	r4, r0
 80005c4:	000d      	movs	r5, r1
 80005c6:	f7ff ff6d 	bl	80004a4 <__aeabi_dcmpge>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d104      	bne.n	80005d8 <__aeabi_d2uiz+0x1c>
 80005ce:	0020      	movs	r0, r4
 80005d0:	0029      	movs	r1, r5
 80005d2:	f001 ff79 	bl	80024c8 <__aeabi_d2iz>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <__aeabi_d2uiz+0x38>)
 80005da:	2200      	movs	r2, #0
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fbc2 	bl	8001d68 <__aeabi_dsub>
 80005e4:	f001 ff70 	bl	80024c8 <__aeabi_d2iz>
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	061b      	lsls	r3, r3, #24
 80005ec:	469c      	mov	ip, r3
 80005ee:	4460      	add	r0, ip
 80005f0:	e7f1      	b.n	80005d6 <__aeabi_d2uiz+0x1a>
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	41e00000 	.word	0x41e00000

080005f8 <__aeabi_d2lz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0005      	movs	r5, r0
 80005fc:	000c      	movs	r4, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	0028      	movs	r0, r5
 8000604:	0021      	movs	r1, r4
 8000606:	f7ff ff2f 	bl	8000468 <__aeabi_dcmplt>
 800060a:	2800      	cmp	r0, #0
 800060c:	d108      	bne.n	8000620 <__aeabi_d2lz+0x28>
 800060e:	0028      	movs	r0, r5
 8000610:	0021      	movs	r1, r4
 8000612:	f000 f80f 	bl	8000634 <__aeabi_d2ulz>
 8000616:	0002      	movs	r2, r0
 8000618:	000b      	movs	r3, r1
 800061a:	0010      	movs	r0, r2
 800061c:	0019      	movs	r1, r3
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	061b      	lsls	r3, r3, #24
 8000624:	18e1      	adds	r1, r4, r3
 8000626:	0028      	movs	r0, r5
 8000628:	f000 f804 	bl	8000634 <__aeabi_d2ulz>
 800062c:	2300      	movs	r3, #0
 800062e:	4242      	negs	r2, r0
 8000630:	418b      	sbcs	r3, r1
 8000632:	e7f2      	b.n	800061a <__aeabi_d2lz+0x22>

08000634 <__aeabi_d2ulz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <__aeabi_d2ulz+0x34>)
 800063a:	000d      	movs	r5, r1
 800063c:	0004      	movs	r4, r0
 800063e:	f001 f927 	bl	8001890 <__aeabi_dmul>
 8000642:	f7ff ffbb 	bl	80005bc <__aeabi_d2uiz>
 8000646:	0006      	movs	r6, r0
 8000648:	f001 ffa4 	bl	8002594 <__aeabi_ui2d>
 800064c:	2200      	movs	r2, #0
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <__aeabi_d2ulz+0x38>)
 8000650:	f001 f91e 	bl	8001890 <__aeabi_dmul>
 8000654:	0002      	movs	r2, r0
 8000656:	000b      	movs	r3, r1
 8000658:	0020      	movs	r0, r4
 800065a:	0029      	movs	r1, r5
 800065c:	f001 fb84 	bl	8001d68 <__aeabi_dsub>
 8000660:	f7ff ffac 	bl	80005bc <__aeabi_d2uiz>
 8000664:	0031      	movs	r1, r6
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	3df00000 	.word	0x3df00000
 800066c:	41f00000 	.word	0x41f00000

08000670 <__aeabi_l2d>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	0006      	movs	r6, r0
 8000674:	0008      	movs	r0, r1
 8000676:	f001 ff5d 	bl	8002534 <__aeabi_i2d>
 800067a:	2200      	movs	r2, #0
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <__aeabi_l2d+0x28>)
 800067e:	f001 f907 	bl	8001890 <__aeabi_dmul>
 8000682:	000d      	movs	r5, r1
 8000684:	0004      	movs	r4, r0
 8000686:	0030      	movs	r0, r6
 8000688:	f001 ff84 	bl	8002594 <__aeabi_ui2d>
 800068c:	002b      	movs	r3, r5
 800068e:	0022      	movs	r2, r4
 8000690:	f000 f98e 	bl	80009b0 <__aeabi_dadd>
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	41f00000 	.word	0x41f00000

0800069c <__udivmoddi4>:
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	4657      	mov	r7, sl
 80006a0:	464e      	mov	r6, r9
 80006a2:	4645      	mov	r5, r8
 80006a4:	46de      	mov	lr, fp
 80006a6:	b5e0      	push	{r5, r6, r7, lr}
 80006a8:	0004      	movs	r4, r0
 80006aa:	000d      	movs	r5, r1
 80006ac:	4692      	mov	sl, r2
 80006ae:	4699      	mov	r9, r3
 80006b0:	b083      	sub	sp, #12
 80006b2:	428b      	cmp	r3, r1
 80006b4:	d830      	bhi.n	8000718 <__udivmoddi4+0x7c>
 80006b6:	d02d      	beq.n	8000714 <__udivmoddi4+0x78>
 80006b8:	4649      	mov	r1, r9
 80006ba:	4650      	mov	r0, sl
 80006bc:	f002 f87e 	bl	80027bc <__clzdi2>
 80006c0:	0029      	movs	r1, r5
 80006c2:	0006      	movs	r6, r0
 80006c4:	0020      	movs	r0, r4
 80006c6:	f002 f879 	bl	80027bc <__clzdi2>
 80006ca:	1a33      	subs	r3, r6, r0
 80006cc:	4698      	mov	r8, r3
 80006ce:	3b20      	subs	r3, #32
 80006d0:	469b      	mov	fp, r3
 80006d2:	d433      	bmi.n	800073c <__udivmoddi4+0xa0>
 80006d4:	465a      	mov	r2, fp
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	001f      	movs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d83a      	bhi.n	800075e <__udivmoddi4+0xc2>
 80006e8:	42af      	cmp	r7, r5
 80006ea:	d100      	bne.n	80006ee <__udivmoddi4+0x52>
 80006ec:	e078      	b.n	80007e0 <__udivmoddi4+0x144>
 80006ee:	465b      	mov	r3, fp
 80006f0:	1ba4      	subs	r4, r4, r6
 80006f2:	41bd      	sbcs	r5, r7
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da00      	bge.n	80006fa <__udivmoddi4+0x5e>
 80006f8:	e075      	b.n	80007e6 <__udivmoddi4+0x14a>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	465a      	mov	r2, fp
 8000706:	4093      	lsls	r3, r2
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2301      	movs	r3, #1
 800070c:	4642      	mov	r2, r8
 800070e:	4093      	lsls	r3, r2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	e028      	b.n	8000766 <__udivmoddi4+0xca>
 8000714:	4282      	cmp	r2, r0
 8000716:	d9cf      	bls.n	80006b8 <__udivmoddi4+0x1c>
 8000718:	2200      	movs	r2, #0
 800071a:	2300      	movs	r3, #0
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <__udivmoddi4+0x8e>
 8000726:	601c      	str	r4, [r3, #0]
 8000728:	605d      	str	r5, [r3, #4]
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	b003      	add	sp, #12
 8000730:	bcf0      	pop	{r4, r5, r6, r7}
 8000732:	46bb      	mov	fp, r7
 8000734:	46b2      	mov	sl, r6
 8000736:	46a9      	mov	r9, r5
 8000738:	46a0      	mov	r8, r4
 800073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073c:	4642      	mov	r2, r8
 800073e:	2320      	movs	r3, #32
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	4652      	mov	r2, sl
 8000744:	40da      	lsrs	r2, r3
 8000746:	4641      	mov	r1, r8
 8000748:	0013      	movs	r3, r2
 800074a:	464a      	mov	r2, r9
 800074c:	408a      	lsls	r2, r1
 800074e:	0017      	movs	r7, r2
 8000750:	4642      	mov	r2, r8
 8000752:	431f      	orrs	r7, r3
 8000754:	4653      	mov	r3, sl
 8000756:	4093      	lsls	r3, r2
 8000758:	001e      	movs	r6, r3
 800075a:	42af      	cmp	r7, r5
 800075c:	d9c4      	bls.n	80006e8 <__udivmoddi4+0x4c>
 800075e:	2200      	movs	r2, #0
 8000760:	2300      	movs	r3, #0
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	4643      	mov	r3, r8
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0d9      	beq.n	8000720 <__udivmoddi4+0x84>
 800076c:	07fb      	lsls	r3, r7, #31
 800076e:	0872      	lsrs	r2, r6, #1
 8000770:	431a      	orrs	r2, r3
 8000772:	4646      	mov	r6, r8
 8000774:	087b      	lsrs	r3, r7, #1
 8000776:	e00e      	b.n	8000796 <__udivmoddi4+0xfa>
 8000778:	42ab      	cmp	r3, r5
 800077a:	d101      	bne.n	8000780 <__udivmoddi4+0xe4>
 800077c:	42a2      	cmp	r2, r4
 800077e:	d80c      	bhi.n	800079a <__udivmoddi4+0xfe>
 8000780:	1aa4      	subs	r4, r4, r2
 8000782:	419d      	sbcs	r5, r3
 8000784:	2001      	movs	r0, #1
 8000786:	1924      	adds	r4, r4, r4
 8000788:	416d      	adcs	r5, r5
 800078a:	2100      	movs	r1, #0
 800078c:	3e01      	subs	r6, #1
 800078e:	1824      	adds	r4, r4, r0
 8000790:	414d      	adcs	r5, r1
 8000792:	2e00      	cmp	r6, #0
 8000794:	d006      	beq.n	80007a4 <__udivmoddi4+0x108>
 8000796:	42ab      	cmp	r3, r5
 8000798:	d9ee      	bls.n	8000778 <__udivmoddi4+0xdc>
 800079a:	3e01      	subs	r6, #1
 800079c:	1924      	adds	r4, r4, r4
 800079e:	416d      	adcs	r5, r5
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d1f8      	bne.n	8000796 <__udivmoddi4+0xfa>
 80007a4:	9800      	ldr	r0, [sp, #0]
 80007a6:	9901      	ldr	r1, [sp, #4]
 80007a8:	465b      	mov	r3, fp
 80007aa:	1900      	adds	r0, r0, r4
 80007ac:	4169      	adcs	r1, r5
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db24      	blt.n	80007fc <__udivmoddi4+0x160>
 80007b2:	002b      	movs	r3, r5
 80007b4:	465a      	mov	r2, fp
 80007b6:	4644      	mov	r4, r8
 80007b8:	40d3      	lsrs	r3, r2
 80007ba:	002a      	movs	r2, r5
 80007bc:	40e2      	lsrs	r2, r4
 80007be:	001c      	movs	r4, r3
 80007c0:	465b      	mov	r3, fp
 80007c2:	0015      	movs	r5, r2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db2a      	blt.n	800081e <__udivmoddi4+0x182>
 80007c8:	0026      	movs	r6, r4
 80007ca:	409e      	lsls	r6, r3
 80007cc:	0033      	movs	r3, r6
 80007ce:	0026      	movs	r6, r4
 80007d0:	4647      	mov	r7, r8
 80007d2:	40be      	lsls	r6, r7
 80007d4:	0032      	movs	r2, r6
 80007d6:	1a80      	subs	r0, r0, r2
 80007d8:	4199      	sbcs	r1, r3
 80007da:	9000      	str	r0, [sp, #0]
 80007dc:	9101      	str	r1, [sp, #4]
 80007de:	e79f      	b.n	8000720 <__udivmoddi4+0x84>
 80007e0:	42a3      	cmp	r3, r4
 80007e2:	d8bc      	bhi.n	800075e <__udivmoddi4+0xc2>
 80007e4:	e783      	b.n	80006ee <__udivmoddi4+0x52>
 80007e6:	4642      	mov	r2, r8
 80007e8:	2320      	movs	r3, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	2200      	movs	r2, #0
 80007f0:	9100      	str	r1, [sp, #0]
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	40da      	lsrs	r2, r3
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	e786      	b.n	800070a <__udivmoddi4+0x6e>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2320      	movs	r3, #32
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	002a      	movs	r2, r5
 8000804:	4646      	mov	r6, r8
 8000806:	409a      	lsls	r2, r3
 8000808:	0023      	movs	r3, r4
 800080a:	40f3      	lsrs	r3, r6
 800080c:	4644      	mov	r4, r8
 800080e:	4313      	orrs	r3, r2
 8000810:	002a      	movs	r2, r5
 8000812:	40e2      	lsrs	r2, r4
 8000814:	001c      	movs	r4, r3
 8000816:	465b      	mov	r3, fp
 8000818:	0015      	movs	r5, r2
 800081a:	2b00      	cmp	r3, #0
 800081c:	dad4      	bge.n	80007c8 <__udivmoddi4+0x12c>
 800081e:	4642      	mov	r2, r8
 8000820:	002f      	movs	r7, r5
 8000822:	2320      	movs	r3, #32
 8000824:	0026      	movs	r6, r4
 8000826:	4097      	lsls	r7, r2
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	40de      	lsrs	r6, r3
 800082c:	003b      	movs	r3, r7
 800082e:	4333      	orrs	r3, r6
 8000830:	e7cd      	b.n	80007ce <__udivmoddi4+0x132>
 8000832:	46c0      	nop			; (mov r8, r8)

08000834 <__eqsf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0042      	lsls	r2, r0, #1
 8000838:	024e      	lsls	r6, r1, #9
 800083a:	004c      	lsls	r4, r1, #1
 800083c:	0245      	lsls	r5, r0, #9
 800083e:	0a6d      	lsrs	r5, r5, #9
 8000840:	0e12      	lsrs	r2, r2, #24
 8000842:	0fc3      	lsrs	r3, r0, #31
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e24      	lsrs	r4, r4, #24
 8000848:	0fc9      	lsrs	r1, r1, #31
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00f      	beq.n	800086e <__eqsf2+0x3a>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d011      	beq.n	8000876 <__eqsf2+0x42>
 8000852:	2001      	movs	r0, #1
 8000854:	42a2      	cmp	r2, r4
 8000856:	d000      	beq.n	800085a <__eqsf2+0x26>
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	42b5      	cmp	r5, r6
 800085c:	d1fc      	bne.n	8000858 <__eqsf2+0x24>
 800085e:	428b      	cmp	r3, r1
 8000860:	d00d      	beq.n	800087e <__eqsf2+0x4a>
 8000862:	2a00      	cmp	r2, #0
 8000864:	d1f8      	bne.n	8000858 <__eqsf2+0x24>
 8000866:	0028      	movs	r0, r5
 8000868:	1e45      	subs	r5, r0, #1
 800086a:	41a8      	sbcs	r0, r5
 800086c:	e7f4      	b.n	8000858 <__eqsf2+0x24>
 800086e:	2001      	movs	r0, #1
 8000870:	2d00      	cmp	r5, #0
 8000872:	d1f1      	bne.n	8000858 <__eqsf2+0x24>
 8000874:	e7eb      	b.n	800084e <__eqsf2+0x1a>
 8000876:	2001      	movs	r0, #1
 8000878:	2e00      	cmp	r6, #0
 800087a:	d1ed      	bne.n	8000858 <__eqsf2+0x24>
 800087c:	e7e9      	b.n	8000852 <__eqsf2+0x1e>
 800087e:	2000      	movs	r0, #0
 8000880:	e7ea      	b.n	8000858 <__eqsf2+0x24>
 8000882:	46c0      	nop			; (mov r8, r8)

08000884 <__gesf2>:
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	0042      	lsls	r2, r0, #1
 8000888:	0246      	lsls	r6, r0, #9
 800088a:	024d      	lsls	r5, r1, #9
 800088c:	004c      	lsls	r4, r1, #1
 800088e:	0fc3      	lsrs	r3, r0, #31
 8000890:	0a76      	lsrs	r6, r6, #9
 8000892:	0e12      	lsrs	r2, r2, #24
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	0e24      	lsrs	r4, r4, #24
 8000898:	0fc8      	lsrs	r0, r1, #31
 800089a:	2aff      	cmp	r2, #255	; 0xff
 800089c:	d01f      	beq.n	80008de <__gesf2+0x5a>
 800089e:	2cff      	cmp	r4, #255	; 0xff
 80008a0:	d010      	beq.n	80008c4 <__gesf2+0x40>
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d11f      	bne.n	80008e6 <__gesf2+0x62>
 80008a6:	4271      	negs	r1, r6
 80008a8:	4171      	adcs	r1, r6
 80008aa:	2c00      	cmp	r4, #0
 80008ac:	d101      	bne.n	80008b2 <__gesf2+0x2e>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d01e      	beq.n	80008f0 <__gesf2+0x6c>
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d10e      	bne.n	80008d4 <__gesf2+0x50>
 80008b6:	4283      	cmp	r3, r0
 80008b8:	d01e      	beq.n	80008f8 <__gesf2+0x74>
 80008ba:	2102      	movs	r1, #2
 80008bc:	1e58      	subs	r0, r3, #1
 80008be:	4008      	ands	r0, r1
 80008c0:	3801      	subs	r0, #1
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d126      	bne.n	8000916 <__gesf2+0x92>
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d1f4      	bne.n	80008b6 <__gesf2+0x32>
 80008cc:	4271      	negs	r1, r6
 80008ce:	4171      	adcs	r1, r6
 80008d0:	2900      	cmp	r1, #0
 80008d2:	d0f0      	beq.n	80008b6 <__gesf2+0x32>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1f4      	bne.n	80008c2 <__gesf2+0x3e>
 80008d8:	2001      	movs	r0, #1
 80008da:	4240      	negs	r0, r0
 80008dc:	e7f1      	b.n	80008c2 <__gesf2+0x3e>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d119      	bne.n	8000916 <__gesf2+0x92>
 80008e2:	2cff      	cmp	r4, #255	; 0xff
 80008e4:	d0ee      	beq.n	80008c4 <__gesf2+0x40>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d1e5      	bne.n	80008b6 <__gesf2+0x32>
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d1e3      	bne.n	80008b6 <__gesf2+0x32>
 80008ee:	e7e4      	b.n	80008ba <__gesf2+0x36>
 80008f0:	2000      	movs	r0, #0
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d0e5      	beq.n	80008c2 <__gesf2+0x3e>
 80008f6:	e7e0      	b.n	80008ba <__gesf2+0x36>
 80008f8:	42a2      	cmp	r2, r4
 80008fa:	dc05      	bgt.n	8000908 <__gesf2+0x84>
 80008fc:	dbea      	blt.n	80008d4 <__gesf2+0x50>
 80008fe:	42ae      	cmp	r6, r5
 8000900:	d802      	bhi.n	8000908 <__gesf2+0x84>
 8000902:	d3e7      	bcc.n	80008d4 <__gesf2+0x50>
 8000904:	2000      	movs	r0, #0
 8000906:	e7dc      	b.n	80008c2 <__gesf2+0x3e>
 8000908:	4241      	negs	r1, r0
 800090a:	4141      	adcs	r1, r0
 800090c:	4248      	negs	r0, r1
 800090e:	2102      	movs	r1, #2
 8000910:	4008      	ands	r0, r1
 8000912:	3801      	subs	r0, #1
 8000914:	e7d5      	b.n	80008c2 <__gesf2+0x3e>
 8000916:	2002      	movs	r0, #2
 8000918:	4240      	negs	r0, r0
 800091a:	e7d2      	b.n	80008c2 <__gesf2+0x3e>

0800091c <__lesf2>:
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	0042      	lsls	r2, r0, #1
 8000920:	0246      	lsls	r6, r0, #9
 8000922:	024d      	lsls	r5, r1, #9
 8000924:	004c      	lsls	r4, r1, #1
 8000926:	0fc3      	lsrs	r3, r0, #31
 8000928:	0a76      	lsrs	r6, r6, #9
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	0e24      	lsrs	r4, r4, #24
 8000930:	0fc8      	lsrs	r0, r1, #31
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d00d      	beq.n	8000952 <__lesf2+0x36>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d00f      	beq.n	800095a <__lesf2+0x3e>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d123      	bne.n	8000986 <__lesf2+0x6a>
 800093e:	4271      	negs	r1, r6
 8000940:	4171      	adcs	r1, r6
 8000942:	2c00      	cmp	r4, #0
 8000944:	d10f      	bne.n	8000966 <__lesf2+0x4a>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d10d      	bne.n	8000966 <__lesf2+0x4a>
 800094a:	2000      	movs	r0, #0
 800094c:	2e00      	cmp	r6, #0
 800094e:	d014      	beq.n	800097a <__lesf2+0x5e>
 8000950:	e00d      	b.n	800096e <__lesf2+0x52>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d110      	bne.n	8000978 <__lesf2+0x5c>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d115      	bne.n	8000986 <__lesf2+0x6a>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d10c      	bne.n	8000978 <__lesf2+0x5c>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d103      	bne.n	800096a <__lesf2+0x4e>
 8000962:	4271      	negs	r1, r6
 8000964:	4171      	adcs	r1, r6
 8000966:	2900      	cmp	r1, #0
 8000968:	d108      	bne.n	800097c <__lesf2+0x60>
 800096a:	4283      	cmp	r3, r0
 800096c:	d010      	beq.n	8000990 <__lesf2+0x74>
 800096e:	2102      	movs	r1, #2
 8000970:	1e58      	subs	r0, r3, #1
 8000972:	4008      	ands	r0, r1
 8000974:	3801      	subs	r0, #1
 8000976:	e000      	b.n	800097a <__lesf2+0x5e>
 8000978:	2002      	movs	r0, #2
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	2800      	cmp	r0, #0
 800097e:	d1fc      	bne.n	800097a <__lesf2+0x5e>
 8000980:	2001      	movs	r0, #1
 8000982:	4240      	negs	r0, r0
 8000984:	e7f9      	b.n	800097a <__lesf2+0x5e>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d1ef      	bne.n	800096a <__lesf2+0x4e>
 800098a:	2d00      	cmp	r5, #0
 800098c:	d1ed      	bne.n	800096a <__lesf2+0x4e>
 800098e:	e7ee      	b.n	800096e <__lesf2+0x52>
 8000990:	42a2      	cmp	r2, r4
 8000992:	dc05      	bgt.n	80009a0 <__lesf2+0x84>
 8000994:	dbf2      	blt.n	800097c <__lesf2+0x60>
 8000996:	42ae      	cmp	r6, r5
 8000998:	d802      	bhi.n	80009a0 <__lesf2+0x84>
 800099a:	d3ef      	bcc.n	800097c <__lesf2+0x60>
 800099c:	2000      	movs	r0, #0
 800099e:	e7ec      	b.n	800097a <__lesf2+0x5e>
 80009a0:	4241      	negs	r1, r0
 80009a2:	4141      	adcs	r1, r0
 80009a4:	4248      	negs	r0, r1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4008      	ands	r0, r1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7e5      	b.n	800097a <__lesf2+0x5e>
 80009ae:	46c0      	nop			; (mov r8, r8)

080009b0 <__aeabi_dadd>:
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	464f      	mov	r7, r9
 80009b4:	46d6      	mov	lr, sl
 80009b6:	4646      	mov	r6, r8
 80009b8:	000d      	movs	r5, r1
 80009ba:	0001      	movs	r1, r0
 80009bc:	0018      	movs	r0, r3
 80009be:	b5c0      	push	{r6, r7, lr}
 80009c0:	0017      	movs	r7, r2
 80009c2:	032b      	lsls	r3, r5, #12
 80009c4:	0a5a      	lsrs	r2, r3, #9
 80009c6:	0f4b      	lsrs	r3, r1, #29
 80009c8:	4313      	orrs	r3, r2
 80009ca:	00ca      	lsls	r2, r1, #3
 80009cc:	4691      	mov	r9, r2
 80009ce:	0302      	lsls	r2, r0, #12
 80009d0:	006e      	lsls	r6, r5, #1
 80009d2:	0041      	lsls	r1, r0, #1
 80009d4:	0a52      	lsrs	r2, r2, #9
 80009d6:	0fec      	lsrs	r4, r5, #31
 80009d8:	0f7d      	lsrs	r5, r7, #29
 80009da:	4315      	orrs	r5, r2
 80009dc:	0d76      	lsrs	r6, r6, #21
 80009de:	0d49      	lsrs	r1, r1, #21
 80009e0:	0fc0      	lsrs	r0, r0, #31
 80009e2:	4682      	mov	sl, r0
 80009e4:	46ac      	mov	ip, r5
 80009e6:	00ff      	lsls	r7, r7, #3
 80009e8:	1a72      	subs	r2, r6, r1
 80009ea:	4284      	cmp	r4, r0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x40>
 80009ee:	e098      	b.n	8000b22 <__aeabi_dadd+0x172>
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	dc00      	bgt.n	80009f6 <__aeabi_dadd+0x46>
 80009f4:	e081      	b.n	8000afa <__aeabi_dadd+0x14a>
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x4c>
 80009fa:	e0b6      	b.n	8000b6a <__aeabi_dadd+0x1ba>
 80009fc:	49c9      	ldr	r1, [pc, #804]	; (8000d24 <__aeabi_dadd+0x374>)
 80009fe:	428e      	cmp	r6, r1
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dadd+0x54>
 8000a02:	e172      	b.n	8000cea <__aeabi_dadd+0x33a>
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0028      	movs	r0, r5
 8000a08:	0409      	lsls	r1, r1, #16
 8000a0a:	4308      	orrs	r0, r1
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	2a38      	cmp	r2, #56	; 0x38
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_dadd+0x64>
 8000a12:	e15e      	b.n	8000cd2 <__aeabi_dadd+0x322>
 8000a14:	2a1f      	cmp	r2, #31
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x6a>
 8000a18:	e1ee      	b.n	8000df8 <__aeabi_dadd+0x448>
 8000a1a:	2020      	movs	r0, #32
 8000a1c:	0039      	movs	r1, r7
 8000a1e:	4665      	mov	r5, ip
 8000a20:	1a80      	subs	r0, r0, r2
 8000a22:	4087      	lsls	r7, r0
 8000a24:	40d1      	lsrs	r1, r2
 8000a26:	4085      	lsls	r5, r0
 8000a28:	430d      	orrs	r5, r1
 8000a2a:	0039      	movs	r1, r7
 8000a2c:	1e4f      	subs	r7, r1, #1
 8000a2e:	41b9      	sbcs	r1, r7
 8000a30:	4667      	mov	r7, ip
 8000a32:	40d7      	lsrs	r7, r2
 8000a34:	4329      	orrs	r1, r5
 8000a36:	1bdb      	subs	r3, r3, r7
 8000a38:	464a      	mov	r2, r9
 8000a3a:	1a55      	subs	r5, r2, r1
 8000a3c:	45a9      	cmp	r9, r5
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	4249      	negs	r1, r1
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	4698      	mov	r8, r3
 8000a46:	4643      	mov	r3, r8
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	d400      	bmi.n	8000a4e <__aeabi_dadd+0x9e>
 8000a4c:	e0cc      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	025b      	lsls	r3, r3, #9
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	4698      	mov	r8, r3
 8000a56:	4643      	mov	r3, r8
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0xae>
 8000a5c:	e12c      	b.n	8000cb8 <__aeabi_dadd+0x308>
 8000a5e:	4640      	mov	r0, r8
 8000a60:	f001 fe8e 	bl	8002780 <__clzsi2>
 8000a64:	0001      	movs	r1, r0
 8000a66:	3908      	subs	r1, #8
 8000a68:	2220      	movs	r2, #32
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	4643      	mov	r3, r8
 8000a6e:	1a52      	subs	r2, r2, r1
 8000a70:	408b      	lsls	r3, r1
 8000a72:	40d0      	lsrs	r0, r2
 8000a74:	408d      	lsls	r5, r1
 8000a76:	4303      	orrs	r3, r0
 8000a78:	428e      	cmp	r6, r1
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dadd+0xce>
 8000a7c:	e117      	b.n	8000cae <__aeabi_dadd+0x2fe>
 8000a7e:	1b8e      	subs	r6, r1, r6
 8000a80:	1c72      	adds	r2, r6, #1
 8000a82:	2a1f      	cmp	r2, #31
 8000a84:	dd00      	ble.n	8000a88 <__aeabi_dadd+0xd8>
 8000a86:	e1a7      	b.n	8000dd8 <__aeabi_dadd+0x428>
 8000a88:	2120      	movs	r1, #32
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	002e      	movs	r6, r5
 8000a8e:	1a89      	subs	r1, r1, r2
 8000a90:	408d      	lsls	r5, r1
 8000a92:	4088      	lsls	r0, r1
 8000a94:	40d6      	lsrs	r6, r2
 8000a96:	40d3      	lsrs	r3, r2
 8000a98:	1e69      	subs	r1, r5, #1
 8000a9a:	418d      	sbcs	r5, r1
 8000a9c:	4330      	orrs	r0, r6
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	4305      	orrs	r5, r0
 8000aa4:	076b      	lsls	r3, r5, #29
 8000aa6:	d009      	beq.n	8000abc <__aeabi_dadd+0x10c>
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	402b      	ands	r3, r5
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d005      	beq.n	8000abc <__aeabi_dadd+0x10c>
 8000ab0:	1d2b      	adds	r3, r5, #4
 8000ab2:	42ab      	cmp	r3, r5
 8000ab4:	41ad      	sbcs	r5, r5
 8000ab6:	426d      	negs	r5, r5
 8000ab8:	44a8      	add	r8, r5
 8000aba:	001d      	movs	r5, r3
 8000abc:	4643      	mov	r3, r8
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	d400      	bmi.n	8000ac4 <__aeabi_dadd+0x114>
 8000ac2:	e094      	b.n	8000bee <__aeabi_dadd+0x23e>
 8000ac4:	4b97      	ldr	r3, [pc, #604]	; (8000d24 <__aeabi_dadd+0x374>)
 8000ac6:	1c72      	adds	r2, r6, #1
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x11e>
 8000acc:	e09d      	b.n	8000c0a <__aeabi_dadd+0x25a>
 8000ace:	4641      	mov	r1, r8
 8000ad0:	4b95      	ldr	r3, [pc, #596]	; (8000d28 <__aeabi_dadd+0x378>)
 8000ad2:	08ed      	lsrs	r5, r5, #3
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	000b      	movs	r3, r1
 8000ad8:	0552      	lsls	r2, r2, #21
 8000ada:	0749      	lsls	r1, r1, #29
 8000adc:	025b      	lsls	r3, r3, #9
 8000ade:	4329      	orrs	r1, r5
 8000ae0:	0b1b      	lsrs	r3, r3, #12
 8000ae2:	0d52      	lsrs	r2, r2, #21
 8000ae4:	0512      	lsls	r2, r2, #20
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	07e4      	lsls	r4, r4, #31
 8000aea:	4323      	orrs	r3, r4
 8000aec:	0008      	movs	r0, r1
 8000aee:	0019      	movs	r1, r3
 8000af0:	bce0      	pop	{r5, r6, r7}
 8000af2:	46ba      	mov	sl, r7
 8000af4:	46b1      	mov	r9, r6
 8000af6:	46a8      	mov	r8, r5
 8000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d043      	beq.n	8000b86 <__aeabi_dadd+0x1d6>
 8000afe:	1b8a      	subs	r2, r1, r6
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x156>
 8000b04:	e12a      	b.n	8000d5c <__aeabi_dadd+0x3ac>
 8000b06:	464c      	mov	r4, r9
 8000b08:	431c      	orrs	r4, r3
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x15e>
 8000b0c:	e1d1      	b.n	8000eb2 <__aeabi_dadd+0x502>
 8000b0e:	1e54      	subs	r4, r2, #1
 8000b10:	2a01      	cmp	r2, #1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x166>
 8000b14:	e21f      	b.n	8000f56 <__aeabi_dadd+0x5a6>
 8000b16:	4d83      	ldr	r5, [pc, #524]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b18:	42aa      	cmp	r2, r5
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x16e>
 8000b1c:	e272      	b.n	8001004 <__aeabi_dadd+0x654>
 8000b1e:	0022      	movs	r2, r4
 8000b20:	e123      	b.n	8000d6a <__aeabi_dadd+0x3ba>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	dc00      	bgt.n	8000b28 <__aeabi_dadd+0x178>
 8000b26:	e098      	b.n	8000c5a <__aeabi_dadd+0x2aa>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	d042      	beq.n	8000bb2 <__aeabi_dadd+0x202>
 8000b2c:	497d      	ldr	r1, [pc, #500]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b2e:	428e      	cmp	r6, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x184>
 8000b32:	e0da      	b.n	8000cea <__aeabi_dadd+0x33a>
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0028      	movs	r0, r5
 8000b38:	0409      	lsls	r1, r1, #16
 8000b3a:	4308      	orrs	r0, r1
 8000b3c:	4684      	mov	ip, r0
 8000b3e:	2a38      	cmp	r2, #56	; 0x38
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x194>
 8000b42:	e129      	b.n	8000d98 <__aeabi_dadd+0x3e8>
 8000b44:	2a1f      	cmp	r2, #31
 8000b46:	dc00      	bgt.n	8000b4a <__aeabi_dadd+0x19a>
 8000b48:	e187      	b.n	8000e5a <__aeabi_dadd+0x4aa>
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	4665      	mov	r5, ip
 8000b4e:	3920      	subs	r1, #32
 8000b50:	40cd      	lsrs	r5, r1
 8000b52:	2a20      	cmp	r2, #32
 8000b54:	d004      	beq.n	8000b60 <__aeabi_dadd+0x1b0>
 8000b56:	2040      	movs	r0, #64	; 0x40
 8000b58:	4661      	mov	r1, ip
 8000b5a:	1a82      	subs	r2, r0, r2
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	430f      	orrs	r7, r1
 8000b60:	0039      	movs	r1, r7
 8000b62:	1e4f      	subs	r7, r1, #1
 8000b64:	41b9      	sbcs	r1, r7
 8000b66:	430d      	orrs	r5, r1
 8000b68:	e11b      	b.n	8000da2 <__aeabi_dadd+0x3f2>
 8000b6a:	0029      	movs	r1, r5
 8000b6c:	4339      	orrs	r1, r7
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x1c2>
 8000b70:	e0b5      	b.n	8000cde <__aeabi_dadd+0x32e>
 8000b72:	1e51      	subs	r1, r2, #1
 8000b74:	2a01      	cmp	r2, #1
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x1ca>
 8000b78:	e1ab      	b.n	8000ed2 <__aeabi_dadd+0x522>
 8000b7a:	486a      	ldr	r0, [pc, #424]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b7c:	4282      	cmp	r2, r0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x1d2>
 8000b80:	e1b2      	b.n	8000ee8 <__aeabi_dadd+0x538>
 8000b82:	000a      	movs	r2, r1
 8000b84:	e743      	b.n	8000a0e <__aeabi_dadd+0x5e>
 8000b86:	4969      	ldr	r1, [pc, #420]	; (8000d2c <__aeabi_dadd+0x37c>)
 8000b88:	1c75      	adds	r5, r6, #1
 8000b8a:	420d      	tst	r5, r1
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dadd+0x1e0>
 8000b8e:	e0cf      	b.n	8000d30 <__aeabi_dadd+0x380>
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	d000      	beq.n	8000b96 <__aeabi_dadd+0x1e6>
 8000b94:	e193      	b.n	8000ebe <__aeabi_dadd+0x50e>
 8000b96:	4649      	mov	r1, r9
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0x1ee>
 8000b9c:	e1d1      	b.n	8000f42 <__aeabi_dadd+0x592>
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	4339      	orrs	r1, r7
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_dadd+0x1f6>
 8000ba4:	e1e3      	b.n	8000f6e <__aeabi_dadd+0x5be>
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	0758      	lsls	r0, r3, #29
 8000baa:	08c9      	lsrs	r1, r1, #3
 8000bac:	4301      	orrs	r1, r0
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	e026      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	4339      	orrs	r1, r7
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dadd+0x20a>
 8000bb8:	e091      	b.n	8000cde <__aeabi_dadd+0x32e>
 8000bba:	1e51      	subs	r1, r2, #1
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d005      	beq.n	8000bcc <__aeabi_dadd+0x21c>
 8000bc0:	4858      	ldr	r0, [pc, #352]	; (8000d24 <__aeabi_dadd+0x374>)
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x218>
 8000bc6:	e18f      	b.n	8000ee8 <__aeabi_dadd+0x538>
 8000bc8:	000a      	movs	r2, r1
 8000bca:	e7b8      	b.n	8000b3e <__aeabi_dadd+0x18e>
 8000bcc:	003d      	movs	r5, r7
 8000bce:	444d      	add	r5, r9
 8000bd0:	454d      	cmp	r5, r9
 8000bd2:	4189      	sbcs	r1, r1
 8000bd4:	4463      	add	r3, ip
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4249      	negs	r1, r1
 8000bda:	4488      	add	r8, r1
 8000bdc:	4643      	mov	r3, r8
 8000bde:	2602      	movs	r6, #2
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	d500      	bpl.n	8000be6 <__aeabi_dadd+0x236>
 8000be4:	e0eb      	b.n	8000dbe <__aeabi_dadd+0x40e>
 8000be6:	3e01      	subs	r6, #1
 8000be8:	076b      	lsls	r3, r5, #29
 8000bea:	d000      	beq.n	8000bee <__aeabi_dadd+0x23e>
 8000bec:	e75c      	b.n	8000aa8 <__aeabi_dadd+0xf8>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	08e9      	lsrs	r1, r5, #3
 8000bf2:	075a      	lsls	r2, r3, #29
 8000bf4:	4311      	orrs	r1, r2
 8000bf6:	0032      	movs	r2, r6
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	484a      	ldr	r0, [pc, #296]	; (8000d24 <__aeabi_dadd+0x374>)
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	d021      	beq.n	8000c44 <__aeabi_dadd+0x294>
 8000c00:	031b      	lsls	r3, r3, #12
 8000c02:	0552      	lsls	r2, r2, #21
 8000c04:	0b1b      	lsrs	r3, r3, #12
 8000c06:	0d52      	lsrs	r2, r2, #21
 8000c08:	e76c      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e769      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000c10:	002a      	movs	r2, r5
 8000c12:	433a      	orrs	r2, r7
 8000c14:	d069      	beq.n	8000cea <__aeabi_dadd+0x33a>
 8000c16:	464a      	mov	r2, r9
 8000c18:	0758      	lsls	r0, r3, #29
 8000c1a:	08d1      	lsrs	r1, r2, #3
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	031b      	lsls	r3, r3, #12
 8000c22:	4308      	orrs	r0, r1
 8000c24:	421a      	tst	r2, r3
 8000c26:	d007      	beq.n	8000c38 <__aeabi_dadd+0x288>
 8000c28:	0029      	movs	r1, r5
 8000c2a:	08ed      	lsrs	r5, r5, #3
 8000c2c:	421d      	tst	r5, r3
 8000c2e:	d103      	bne.n	8000c38 <__aeabi_dadd+0x288>
 8000c30:	002a      	movs	r2, r5
 8000c32:	08ff      	lsrs	r7, r7, #3
 8000c34:	0748      	lsls	r0, r1, #29
 8000c36:	4338      	orrs	r0, r7
 8000c38:	0f43      	lsrs	r3, r0, #29
 8000c3a:	00c1      	lsls	r1, r0, #3
 8000c3c:	075b      	lsls	r3, r3, #29
 8000c3e:	08c9      	lsrs	r1, r1, #3
 8000c40:	4319      	orrs	r1, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	000a      	movs	r2, r1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x29c>
 8000c4a:	e213      	b.n	8001074 <__aeabi_dadd+0x6c4>
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0312      	lsls	r2, r2, #12
 8000c50:	4313      	orrs	r3, r2
 8000c52:	031b      	lsls	r3, r3, #12
 8000c54:	4a33      	ldr	r2, [pc, #204]	; (8000d24 <__aeabi_dadd+0x374>)
 8000c56:	0b1b      	lsrs	r3, r3, #12
 8000c58:	e744      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d04b      	beq.n	8000cf6 <__aeabi_dadd+0x346>
 8000c5e:	1b8a      	subs	r2, r1, r6
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x2b6>
 8000c64:	e0e7      	b.n	8000e36 <__aeabi_dadd+0x486>
 8000c66:	482f      	ldr	r0, [pc, #188]	; (8000d24 <__aeabi_dadd+0x374>)
 8000c68:	4281      	cmp	r1, r0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x2be>
 8000c6c:	e195      	b.n	8000f9a <__aeabi_dadd+0x5ea>
 8000c6e:	2080      	movs	r0, #128	; 0x80
 8000c70:	0400      	lsls	r0, r0, #16
 8000c72:	4303      	orrs	r3, r0
 8000c74:	2a38      	cmp	r2, #56	; 0x38
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_dadd+0x2ca>
 8000c78:	e143      	b.n	8000f02 <__aeabi_dadd+0x552>
 8000c7a:	2a1f      	cmp	r2, #31
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0x2d0>
 8000c7e:	e1db      	b.n	8001038 <__aeabi_dadd+0x688>
 8000c80:	2020      	movs	r0, #32
 8000c82:	001d      	movs	r5, r3
 8000c84:	464e      	mov	r6, r9
 8000c86:	1a80      	subs	r0, r0, r2
 8000c88:	4085      	lsls	r5, r0
 8000c8a:	40d6      	lsrs	r6, r2
 8000c8c:	4335      	orrs	r5, r6
 8000c8e:	464e      	mov	r6, r9
 8000c90:	4086      	lsls	r6, r0
 8000c92:	0030      	movs	r0, r6
 8000c94:	40d3      	lsrs	r3, r2
 8000c96:	1e46      	subs	r6, r0, #1
 8000c98:	41b0      	sbcs	r0, r6
 8000c9a:	449c      	add	ip, r3
 8000c9c:	4305      	orrs	r5, r0
 8000c9e:	19ed      	adds	r5, r5, r7
 8000ca0:	42bd      	cmp	r5, r7
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	4463      	add	r3, ip
 8000ca8:	4698      	mov	r8, r3
 8000caa:	000e      	movs	r6, r1
 8000cac:	e07f      	b.n	8000dae <__aeabi_dadd+0x3fe>
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <__aeabi_dadd+0x378>)
 8000cb0:	1a76      	subs	r6, r6, r1
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	e6f5      	b.n	8000aa4 <__aeabi_dadd+0xf4>
 8000cb8:	0028      	movs	r0, r5
 8000cba:	f001 fd61 	bl	8002780 <__clzsi2>
 8000cbe:	0001      	movs	r1, r0
 8000cc0:	3118      	adds	r1, #24
 8000cc2:	291f      	cmp	r1, #31
 8000cc4:	dc00      	bgt.n	8000cc8 <__aeabi_dadd+0x318>
 8000cc6:	e6cf      	b.n	8000a68 <__aeabi_dadd+0xb8>
 8000cc8:	002b      	movs	r3, r5
 8000cca:	3808      	subs	r0, #8
 8000ccc:	4083      	lsls	r3, r0
 8000cce:	2500      	movs	r5, #0
 8000cd0:	e6d2      	b.n	8000a78 <__aeabi_dadd+0xc8>
 8000cd2:	4662      	mov	r2, ip
 8000cd4:	433a      	orrs	r2, r7
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	1e4f      	subs	r7, r1, #1
 8000cda:	41b9      	sbcs	r1, r7
 8000cdc:	e6ac      	b.n	8000a38 <__aeabi_dadd+0x88>
 8000cde:	4649      	mov	r1, r9
 8000ce0:	0758      	lsls	r0, r3, #29
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	4301      	orrs	r1, r0
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	e787      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000cea:	4649      	mov	r1, r9
 8000cec:	075a      	lsls	r2, r3, #29
 8000cee:	08c9      	lsrs	r1, r1, #3
 8000cf0:	4311      	orrs	r1, r2
 8000cf2:	08db      	lsrs	r3, r3, #3
 8000cf4:	e7a6      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <__aeabi_dadd+0x37c>)
 8000cf8:	1c70      	adds	r0, r6, #1
 8000cfa:	4208      	tst	r0, r1
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x350>
 8000cfe:	e0bb      	b.n	8000e78 <__aeabi_dadd+0x4c8>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x356>
 8000d04:	e114      	b.n	8000f30 <__aeabi_dadd+0x580>
 8000d06:	4649      	mov	r1, r9
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x35e>
 8000d0c:	e175      	b.n	8000ffa <__aeabi_dadd+0x64a>
 8000d0e:	0029      	movs	r1, r5
 8000d10:	4339      	orrs	r1, r7
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x366>
 8000d14:	e17e      	b.n	8001014 <__aeabi_dadd+0x664>
 8000d16:	4649      	mov	r1, r9
 8000d18:	0758      	lsls	r0, r3, #29
 8000d1a:	08c9      	lsrs	r1, r1, #3
 8000d1c:	4301      	orrs	r1, r0
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	e76e      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	000007ff 	.word	0x000007ff
 8000d28:	ff7fffff 	.word	0xff7fffff
 8000d2c:	000007fe 	.word	0x000007fe
 8000d30:	4649      	mov	r1, r9
 8000d32:	1bcd      	subs	r5, r1, r7
 8000d34:	4661      	mov	r1, ip
 8000d36:	1a58      	subs	r0, r3, r1
 8000d38:	45a9      	cmp	r9, r5
 8000d3a:	4189      	sbcs	r1, r1
 8000d3c:	4249      	negs	r1, r1
 8000d3e:	4688      	mov	r8, r1
 8000d40:	0001      	movs	r1, r0
 8000d42:	4640      	mov	r0, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	4688      	mov	r8, r1
 8000d48:	0209      	lsls	r1, r1, #8
 8000d4a:	d500      	bpl.n	8000d4e <__aeabi_dadd+0x39e>
 8000d4c:	e0a6      	b.n	8000e9c <__aeabi_dadd+0x4ec>
 8000d4e:	4641      	mov	r1, r8
 8000d50:	4329      	orrs	r1, r5
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x3a6>
 8000d54:	e67f      	b.n	8000a56 <__aeabi_dadd+0xa6>
 8000d56:	2300      	movs	r3, #0
 8000d58:	2400      	movs	r4, #0
 8000d5a:	e751      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000d5c:	4cc7      	ldr	r4, [pc, #796]	; (800107c <__aeabi_dadd+0x6cc>)
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x3b4>
 8000d62:	e0c7      	b.n	8000ef4 <__aeabi_dadd+0x544>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	4323      	orrs	r3, r4
 8000d6a:	2a38      	cmp	r2, #56	; 0x38
 8000d6c:	dc54      	bgt.n	8000e18 <__aeabi_dadd+0x468>
 8000d6e:	2a1f      	cmp	r2, #31
 8000d70:	dd00      	ble.n	8000d74 <__aeabi_dadd+0x3c4>
 8000d72:	e0cc      	b.n	8000f0e <__aeabi_dadd+0x55e>
 8000d74:	2420      	movs	r4, #32
 8000d76:	4648      	mov	r0, r9
 8000d78:	1aa4      	subs	r4, r4, r2
 8000d7a:	001d      	movs	r5, r3
 8000d7c:	464e      	mov	r6, r9
 8000d7e:	40a0      	lsls	r0, r4
 8000d80:	40d6      	lsrs	r6, r2
 8000d82:	40a5      	lsls	r5, r4
 8000d84:	0004      	movs	r4, r0
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	4662      	mov	r2, ip
 8000d8a:	4335      	orrs	r5, r6
 8000d8c:	1e66      	subs	r6, r4, #1
 8000d8e:	41b4      	sbcs	r4, r6
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	469c      	mov	ip, r3
 8000d94:	4325      	orrs	r5, r4
 8000d96:	e044      	b.n	8000e22 <__aeabi_dadd+0x472>
 8000d98:	4662      	mov	r2, ip
 8000d9a:	433a      	orrs	r2, r7
 8000d9c:	0015      	movs	r5, r2
 8000d9e:	1e6f      	subs	r7, r5, #1
 8000da0:	41bd      	sbcs	r5, r7
 8000da2:	444d      	add	r5, r9
 8000da4:	454d      	cmp	r5, r9
 8000da6:	4189      	sbcs	r1, r1
 8000da8:	4249      	negs	r1, r1
 8000daa:	4688      	mov	r8, r1
 8000dac:	4498      	add	r8, r3
 8000dae:	4643      	mov	r3, r8
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	d400      	bmi.n	8000db6 <__aeabi_dadd+0x406>
 8000db4:	e718      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000db6:	4bb1      	ldr	r3, [pc, #708]	; (800107c <__aeabi_dadd+0x6cc>)
 8000db8:	3601      	adds	r6, #1
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	d049      	beq.n	8000e52 <__aeabi_dadd+0x4a2>
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	4baf      	ldr	r3, [pc, #700]	; (8001080 <__aeabi_dadd+0x6d0>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	086a      	lsrs	r2, r5, #1
 8000dca:	400d      	ands	r5, r1
 8000dcc:	4315      	orrs	r5, r2
 8000dce:	07d9      	lsls	r1, r3, #31
 8000dd0:	085b      	lsrs	r3, r3, #1
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	430d      	orrs	r5, r1
 8000dd6:	e665      	b.n	8000aa4 <__aeabi_dadd+0xf4>
 8000dd8:	0018      	movs	r0, r3
 8000dda:	3e1f      	subs	r6, #31
 8000ddc:	40f0      	lsrs	r0, r6
 8000dde:	2a20      	cmp	r2, #32
 8000de0:	d003      	beq.n	8000dea <__aeabi_dadd+0x43a>
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	431d      	orrs	r5, r3
 8000dea:	1e69      	subs	r1, r5, #1
 8000dec:	418d      	sbcs	r5, r1
 8000dee:	2300      	movs	r3, #0
 8000df0:	2600      	movs	r6, #0
 8000df2:	4698      	mov	r8, r3
 8000df4:	4305      	orrs	r5, r0
 8000df6:	e6f7      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000df8:	0011      	movs	r1, r2
 8000dfa:	4665      	mov	r5, ip
 8000dfc:	3920      	subs	r1, #32
 8000dfe:	40cd      	lsrs	r5, r1
 8000e00:	2a20      	cmp	r2, #32
 8000e02:	d004      	beq.n	8000e0e <__aeabi_dadd+0x45e>
 8000e04:	2040      	movs	r0, #64	; 0x40
 8000e06:	4661      	mov	r1, ip
 8000e08:	1a82      	subs	r2, r0, r2
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	430f      	orrs	r7, r1
 8000e0e:	0039      	movs	r1, r7
 8000e10:	1e4f      	subs	r7, r1, #1
 8000e12:	41b9      	sbcs	r1, r7
 8000e14:	4329      	orrs	r1, r5
 8000e16:	e60f      	b.n	8000a38 <__aeabi_dadd+0x88>
 8000e18:	464a      	mov	r2, r9
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	001d      	movs	r5, r3
 8000e1e:	1e6b      	subs	r3, r5, #1
 8000e20:	419d      	sbcs	r5, r3
 8000e22:	1b7d      	subs	r5, r7, r5
 8000e24:	42af      	cmp	r7, r5
 8000e26:	419b      	sbcs	r3, r3
 8000e28:	4662      	mov	r2, ip
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4654      	mov	r4, sl
 8000e32:	000e      	movs	r6, r1
 8000e34:	e607      	b.n	8000a46 <__aeabi_dadd+0x96>
 8000e36:	4648      	mov	r0, r9
 8000e38:	4318      	orrs	r0, r3
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x48e>
 8000e3c:	e0b3      	b.n	8000fa6 <__aeabi_dadd+0x5f6>
 8000e3e:	1e50      	subs	r0, r2, #1
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x496>
 8000e44:	e10d      	b.n	8001062 <__aeabi_dadd+0x6b2>
 8000e46:	4d8d      	ldr	r5, [pc, #564]	; (800107c <__aeabi_dadd+0x6cc>)
 8000e48:	42aa      	cmp	r2, r5
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x49e>
 8000e4c:	e0a5      	b.n	8000f9a <__aeabi_dadd+0x5ea>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	e710      	b.n	8000c74 <__aeabi_dadd+0x2c4>
 8000e52:	0032      	movs	r2, r6
 8000e54:	2300      	movs	r3, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	e644      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	0038      	movs	r0, r7
 8000e5e:	1a89      	subs	r1, r1, r2
 8000e60:	4665      	mov	r5, ip
 8000e62:	408f      	lsls	r7, r1
 8000e64:	408d      	lsls	r5, r1
 8000e66:	40d0      	lsrs	r0, r2
 8000e68:	1e79      	subs	r1, r7, #1
 8000e6a:	418f      	sbcs	r7, r1
 8000e6c:	4305      	orrs	r5, r0
 8000e6e:	433d      	orrs	r5, r7
 8000e70:	4667      	mov	r7, ip
 8000e72:	40d7      	lsrs	r7, r2
 8000e74:	19db      	adds	r3, r3, r7
 8000e76:	e794      	b.n	8000da2 <__aeabi_dadd+0x3f2>
 8000e78:	4a80      	ldr	r2, [pc, #512]	; (800107c <__aeabi_dadd+0x6cc>)
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x4d0>
 8000e7e:	e0ec      	b.n	800105a <__aeabi_dadd+0x6aa>
 8000e80:	0039      	movs	r1, r7
 8000e82:	4449      	add	r1, r9
 8000e84:	4549      	cmp	r1, r9
 8000e86:	4192      	sbcs	r2, r2
 8000e88:	4463      	add	r3, ip
 8000e8a:	4252      	negs	r2, r2
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	07dd      	lsls	r5, r3, #31
 8000e90:	0849      	lsrs	r1, r1, #1
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	4698      	mov	r8, r3
 8000e96:	0006      	movs	r6, r0
 8000e98:	430d      	orrs	r5, r1
 8000e9a:	e6a5      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000e9c:	464a      	mov	r2, r9
 8000e9e:	1abd      	subs	r5, r7, r2
 8000ea0:	42af      	cmp	r7, r5
 8000ea2:	4189      	sbcs	r1, r1
 8000ea4:	4662      	mov	r2, ip
 8000ea6:	4249      	negs	r1, r1
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	1a5b      	subs	r3, r3, r1
 8000eac:	4698      	mov	r8, r3
 8000eae:	4654      	mov	r4, sl
 8000eb0:	e5d1      	b.n	8000a56 <__aeabi_dadd+0xa6>
 8000eb2:	076c      	lsls	r4, r5, #29
 8000eb4:	08f9      	lsrs	r1, r7, #3
 8000eb6:	4321      	orrs	r1, r4
 8000eb8:	08eb      	lsrs	r3, r5, #3
 8000eba:	0004      	movs	r4, r0
 8000ebc:	e69d      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000ebe:	464a      	mov	r2, r9
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	d175      	bne.n	8000fb0 <__aeabi_dadd+0x600>
 8000ec4:	4661      	mov	r1, ip
 8000ec6:	4339      	orrs	r1, r7
 8000ec8:	d114      	bne.n	8000ef4 <__aeabi_dadd+0x544>
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	2400      	movs	r4, #0
 8000ece:	031b      	lsls	r3, r3, #12
 8000ed0:	e6bc      	b.n	8000c4c <__aeabi_dadd+0x29c>
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	1bd5      	subs	r5, r2, r7
 8000ed6:	45a9      	cmp	r9, r5
 8000ed8:	4189      	sbcs	r1, r1
 8000eda:	4662      	mov	r2, ip
 8000edc:	4249      	negs	r1, r1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	2601      	movs	r6, #1
 8000ee6:	e5ae      	b.n	8000a46 <__aeabi_dadd+0x96>
 8000ee8:	464a      	mov	r2, r9
 8000eea:	08d1      	lsrs	r1, r2, #3
 8000eec:	075a      	lsls	r2, r3, #29
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e6a7      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	08f9      	lsrs	r1, r7, #3
 8000ef8:	075a      	lsls	r2, r3, #29
 8000efa:	4654      	mov	r4, sl
 8000efc:	4311      	orrs	r1, r2
 8000efe:	08db      	lsrs	r3, r3, #3
 8000f00:	e6a0      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000f02:	464a      	mov	r2, r9
 8000f04:	4313      	orrs	r3, r2
 8000f06:	001d      	movs	r5, r3
 8000f08:	1e6b      	subs	r3, r5, #1
 8000f0a:	419d      	sbcs	r5, r3
 8000f0c:	e6c7      	b.n	8000c9e <__aeabi_dadd+0x2ee>
 8000f0e:	0014      	movs	r4, r2
 8000f10:	001e      	movs	r6, r3
 8000f12:	3c20      	subs	r4, #32
 8000f14:	40e6      	lsrs	r6, r4
 8000f16:	2a20      	cmp	r2, #32
 8000f18:	d005      	beq.n	8000f26 <__aeabi_dadd+0x576>
 8000f1a:	2440      	movs	r4, #64	; 0x40
 8000f1c:	1aa2      	subs	r2, r4, r2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	464a      	mov	r2, r9
 8000f22:	431a      	orrs	r2, r3
 8000f24:	4691      	mov	r9, r2
 8000f26:	464d      	mov	r5, r9
 8000f28:	1e6b      	subs	r3, r5, #1
 8000f2a:	419d      	sbcs	r5, r3
 8000f2c:	4335      	orrs	r5, r6
 8000f2e:	e778      	b.n	8000e22 <__aeabi_dadd+0x472>
 8000f30:	464a      	mov	r2, r9
 8000f32:	431a      	orrs	r2, r3
 8000f34:	d000      	beq.n	8000f38 <__aeabi_dadd+0x588>
 8000f36:	e66b      	b.n	8000c10 <__aeabi_dadd+0x260>
 8000f38:	076b      	lsls	r3, r5, #29
 8000f3a:	08f9      	lsrs	r1, r7, #3
 8000f3c:	4319      	orrs	r1, r3
 8000f3e:	08eb      	lsrs	r3, r5, #3
 8000f40:	e680      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000f42:	4661      	mov	r1, ip
 8000f44:	4339      	orrs	r1, r7
 8000f46:	d054      	beq.n	8000ff2 <__aeabi_dadd+0x642>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	08f9      	lsrs	r1, r7, #3
 8000f4c:	075c      	lsls	r4, r3, #29
 8000f4e:	4321      	orrs	r1, r4
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	0004      	movs	r4, r0
 8000f54:	e654      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000f56:	464a      	mov	r2, r9
 8000f58:	1abd      	subs	r5, r7, r2
 8000f5a:	42af      	cmp	r7, r5
 8000f5c:	4189      	sbcs	r1, r1
 8000f5e:	4662      	mov	r2, ip
 8000f60:	4249      	negs	r1, r1
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	4698      	mov	r8, r3
 8000f68:	0004      	movs	r4, r0
 8000f6a:	2601      	movs	r6, #1
 8000f6c:	e56b      	b.n	8000a46 <__aeabi_dadd+0x96>
 8000f6e:	464a      	mov	r2, r9
 8000f70:	1bd5      	subs	r5, r2, r7
 8000f72:	45a9      	cmp	r9, r5
 8000f74:	4189      	sbcs	r1, r1
 8000f76:	4662      	mov	r2, ip
 8000f78:	4249      	negs	r1, r1
 8000f7a:	1a9a      	subs	r2, r3, r2
 8000f7c:	1a52      	subs	r2, r2, r1
 8000f7e:	4690      	mov	r8, r2
 8000f80:	0212      	lsls	r2, r2, #8
 8000f82:	d532      	bpl.n	8000fea <__aeabi_dadd+0x63a>
 8000f84:	464a      	mov	r2, r9
 8000f86:	1abd      	subs	r5, r7, r2
 8000f88:	42af      	cmp	r7, r5
 8000f8a:	4189      	sbcs	r1, r1
 8000f8c:	4662      	mov	r2, ip
 8000f8e:	4249      	negs	r1, r1
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	1a5b      	subs	r3, r3, r1
 8000f94:	4698      	mov	r8, r3
 8000f96:	0004      	movs	r4, r0
 8000f98:	e584      	b.n	8000aa4 <__aeabi_dadd+0xf4>
 8000f9a:	4663      	mov	r3, ip
 8000f9c:	08f9      	lsrs	r1, r7, #3
 8000f9e:	075a      	lsls	r2, r3, #29
 8000fa0:	4311      	orrs	r1, r2
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	e64e      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000fa6:	08f9      	lsrs	r1, r7, #3
 8000fa8:	0768      	lsls	r0, r5, #29
 8000faa:	4301      	orrs	r1, r0
 8000fac:	08eb      	lsrs	r3, r5, #3
 8000fae:	e624      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	433a      	orrs	r2, r7
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x608>
 8000fb6:	e698      	b.n	8000cea <__aeabi_dadd+0x33a>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	08d1      	lsrs	r1, r2, #3
 8000fbc:	075a      	lsls	r2, r3, #29
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	031b      	lsls	r3, r3, #12
 8000fc6:	421a      	tst	r2, r3
 8000fc8:	d008      	beq.n	8000fdc <__aeabi_dadd+0x62c>
 8000fca:	4660      	mov	r0, ip
 8000fcc:	08c5      	lsrs	r5, r0, #3
 8000fce:	421d      	tst	r5, r3
 8000fd0:	d104      	bne.n	8000fdc <__aeabi_dadd+0x62c>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	002a      	movs	r2, r5
 8000fd6:	08f9      	lsrs	r1, r7, #3
 8000fd8:	0743      	lsls	r3, r0, #29
 8000fda:	4319      	orrs	r1, r3
 8000fdc:	0f4b      	lsrs	r3, r1, #29
 8000fde:	00c9      	lsls	r1, r1, #3
 8000fe0:	075b      	lsls	r3, r3, #29
 8000fe2:	08c9      	lsrs	r1, r1, #3
 8000fe4:	4319      	orrs	r1, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	e62c      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000fea:	4641      	mov	r1, r8
 8000fec:	4329      	orrs	r1, r5
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_dadd+0x642>
 8000ff0:	e5fa      	b.n	8000be8 <__aeabi_dadd+0x238>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	000a      	movs	r2, r1
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	e602      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000ffa:	076b      	lsls	r3, r5, #29
 8000ffc:	08f9      	lsrs	r1, r7, #3
 8000ffe:	4319      	orrs	r1, r3
 8001000:	08eb      	lsrs	r3, r5, #3
 8001002:	e5fd      	b.n	8000c00 <__aeabi_dadd+0x250>
 8001004:	4663      	mov	r3, ip
 8001006:	08f9      	lsrs	r1, r7, #3
 8001008:	075b      	lsls	r3, r3, #29
 800100a:	4319      	orrs	r1, r3
 800100c:	4663      	mov	r3, ip
 800100e:	0004      	movs	r4, r0
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	e617      	b.n	8000c44 <__aeabi_dadd+0x294>
 8001014:	003d      	movs	r5, r7
 8001016:	444d      	add	r5, r9
 8001018:	4463      	add	r3, ip
 800101a:	454d      	cmp	r5, r9
 800101c:	4189      	sbcs	r1, r1
 800101e:	4698      	mov	r8, r3
 8001020:	4249      	negs	r1, r1
 8001022:	4488      	add	r8, r1
 8001024:	4643      	mov	r3, r8
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	d400      	bmi.n	800102c <__aeabi_dadd+0x67c>
 800102a:	e5dd      	b.n	8000be8 <__aeabi_dadd+0x238>
 800102c:	4642      	mov	r2, r8
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <__aeabi_dadd+0x6d0>)
 8001030:	2601      	movs	r6, #1
 8001032:	401a      	ands	r2, r3
 8001034:	4690      	mov	r8, r2
 8001036:	e5d7      	b.n	8000be8 <__aeabi_dadd+0x238>
 8001038:	0010      	movs	r0, r2
 800103a:	001e      	movs	r6, r3
 800103c:	3820      	subs	r0, #32
 800103e:	40c6      	lsrs	r6, r0
 8001040:	2a20      	cmp	r2, #32
 8001042:	d005      	beq.n	8001050 <__aeabi_dadd+0x6a0>
 8001044:	2040      	movs	r0, #64	; 0x40
 8001046:	1a82      	subs	r2, r0, r2
 8001048:	4093      	lsls	r3, r2
 800104a:	464a      	mov	r2, r9
 800104c:	431a      	orrs	r2, r3
 800104e:	4691      	mov	r9, r2
 8001050:	464d      	mov	r5, r9
 8001052:	1e6b      	subs	r3, r5, #1
 8001054:	419d      	sbcs	r5, r3
 8001056:	4335      	orrs	r5, r6
 8001058:	e621      	b.n	8000c9e <__aeabi_dadd+0x2ee>
 800105a:	0002      	movs	r2, r0
 800105c:	2300      	movs	r3, #0
 800105e:	2100      	movs	r1, #0
 8001060:	e540      	b.n	8000ae4 <__aeabi_dadd+0x134>
 8001062:	464a      	mov	r2, r9
 8001064:	19d5      	adds	r5, r2, r7
 8001066:	42bd      	cmp	r5, r7
 8001068:	4189      	sbcs	r1, r1
 800106a:	4463      	add	r3, ip
 800106c:	4698      	mov	r8, r3
 800106e:	4249      	negs	r1, r1
 8001070:	4488      	add	r8, r1
 8001072:	e5b3      	b.n	8000bdc <__aeabi_dadd+0x22c>
 8001074:	2100      	movs	r1, #0
 8001076:	4a01      	ldr	r2, [pc, #4]	; (800107c <__aeabi_dadd+0x6cc>)
 8001078:	000b      	movs	r3, r1
 800107a:	e533      	b.n	8000ae4 <__aeabi_dadd+0x134>
 800107c:	000007ff 	.word	0x000007ff
 8001080:	ff7fffff 	.word	0xff7fffff

08001084 <__aeabi_ddiv>:
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	4657      	mov	r7, sl
 8001088:	464e      	mov	r6, r9
 800108a:	4645      	mov	r5, r8
 800108c:	46de      	mov	lr, fp
 800108e:	b5e0      	push	{r5, r6, r7, lr}
 8001090:	4681      	mov	r9, r0
 8001092:	0005      	movs	r5, r0
 8001094:	030c      	lsls	r4, r1, #12
 8001096:	0048      	lsls	r0, r1, #1
 8001098:	4692      	mov	sl, r2
 800109a:	001f      	movs	r7, r3
 800109c:	b085      	sub	sp, #20
 800109e:	0b24      	lsrs	r4, r4, #12
 80010a0:	0d40      	lsrs	r0, r0, #21
 80010a2:	0fce      	lsrs	r6, r1, #31
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d059      	beq.n	800115c <__aeabi_ddiv+0xd8>
 80010a8:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <__aeabi_ddiv+0x244>)
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x2c>
 80010ae:	e098      	b.n	80011e2 <__aeabi_ddiv+0x15e>
 80010b0:	0f6b      	lsrs	r3, r5, #29
 80010b2:	00e4      	lsls	r4, r4, #3
 80010b4:	431c      	orrs	r4, r3
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	4323      	orrs	r3, r4
 80010bc:	4698      	mov	r8, r3
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <__aeabi_ddiv+0x248>)
 80010c0:	00ed      	lsls	r5, r5, #3
 80010c2:	469b      	mov	fp, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	4699      	mov	r9, r3
 80010c8:	4483      	add	fp, r0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	033c      	lsls	r4, r7, #12
 80010ce:	007b      	lsls	r3, r7, #1
 80010d0:	4650      	mov	r0, sl
 80010d2:	0b24      	lsrs	r4, r4, #12
 80010d4:	0d5b      	lsrs	r3, r3, #21
 80010d6:	0fff      	lsrs	r7, r7, #31
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d067      	beq.n	80011ac <__aeabi_ddiv+0x128>
 80010dc:	4a7a      	ldr	r2, [pc, #488]	; (80012c8 <__aeabi_ddiv+0x244>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d018      	beq.n	8001114 <__aeabi_ddiv+0x90>
 80010e2:	497a      	ldr	r1, [pc, #488]	; (80012cc <__aeabi_ddiv+0x248>)
 80010e4:	0f42      	lsrs	r2, r0, #29
 80010e6:	468c      	mov	ip, r1
 80010e8:	00e4      	lsls	r4, r4, #3
 80010ea:	4659      	mov	r1, fp
 80010ec:	4314      	orrs	r4, r2
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	4463      	add	r3, ip
 80010f2:	0412      	lsls	r2, r2, #16
 80010f4:	1acb      	subs	r3, r1, r3
 80010f6:	4314      	orrs	r4, r2
 80010f8:	469b      	mov	fp, r3
 80010fa:	00c2      	lsls	r2, r0, #3
 80010fc:	2000      	movs	r0, #0
 80010fe:	0033      	movs	r3, r6
 8001100:	407b      	eors	r3, r7
 8001102:	469a      	mov	sl, r3
 8001104:	464b      	mov	r3, r9
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d900      	bls.n	800110c <__aeabi_ddiv+0x88>
 800110a:	e0ef      	b.n	80012ec <__aeabi_ddiv+0x268>
 800110c:	4970      	ldr	r1, [pc, #448]	; (80012d0 <__aeabi_ddiv+0x24c>)
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	58cb      	ldr	r3, [r1, r3]
 8001112:	469f      	mov	pc, r3
 8001114:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <__aeabi_ddiv+0x250>)
 8001116:	4652      	mov	r2, sl
 8001118:	469c      	mov	ip, r3
 800111a:	4322      	orrs	r2, r4
 800111c:	44e3      	add	fp, ip
 800111e:	2a00      	cmp	r2, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_ddiv+0xa0>
 8001122:	e095      	b.n	8001250 <__aeabi_ddiv+0x1cc>
 8001124:	4649      	mov	r1, r9
 8001126:	2302      	movs	r3, #2
 8001128:	4319      	orrs	r1, r3
 800112a:	4689      	mov	r9, r1
 800112c:	2400      	movs	r4, #0
 800112e:	2002      	movs	r0, #2
 8001130:	e7e5      	b.n	80010fe <__aeabi_ddiv+0x7a>
 8001132:	2300      	movs	r3, #0
 8001134:	2400      	movs	r4, #0
 8001136:	2500      	movs	r5, #0
 8001138:	4652      	mov	r2, sl
 800113a:	051b      	lsls	r3, r3, #20
 800113c:	4323      	orrs	r3, r4
 800113e:	07d2      	lsls	r2, r2, #31
 8001140:	4313      	orrs	r3, r2
 8001142:	0028      	movs	r0, r5
 8001144:	0019      	movs	r1, r3
 8001146:	b005      	add	sp, #20
 8001148:	bcf0      	pop	{r4, r5, r6, r7}
 800114a:	46bb      	mov	fp, r7
 800114c:	46b2      	mov	sl, r6
 800114e:	46a9      	mov	r9, r5
 8001150:	46a0      	mov	r8, r4
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	2400      	movs	r4, #0
 8001156:	2500      	movs	r5, #0
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <__aeabi_ddiv+0x244>)
 800115a:	e7ed      	b.n	8001138 <__aeabi_ddiv+0xb4>
 800115c:	464b      	mov	r3, r9
 800115e:	4323      	orrs	r3, r4
 8001160:	4698      	mov	r8, r3
 8001162:	d100      	bne.n	8001166 <__aeabi_ddiv+0xe2>
 8001164:	e089      	b.n	800127a <__aeabi_ddiv+0x1f6>
 8001166:	2c00      	cmp	r4, #0
 8001168:	d100      	bne.n	800116c <__aeabi_ddiv+0xe8>
 800116a:	e1e0      	b.n	800152e <__aeabi_ddiv+0x4aa>
 800116c:	0020      	movs	r0, r4
 800116e:	f001 fb07 	bl	8002780 <__clzsi2>
 8001172:	0001      	movs	r1, r0
 8001174:	0002      	movs	r2, r0
 8001176:	390b      	subs	r1, #11
 8001178:	231d      	movs	r3, #29
 800117a:	1a5b      	subs	r3, r3, r1
 800117c:	4649      	mov	r1, r9
 800117e:	0010      	movs	r0, r2
 8001180:	40d9      	lsrs	r1, r3
 8001182:	3808      	subs	r0, #8
 8001184:	4084      	lsls	r4, r0
 8001186:	000b      	movs	r3, r1
 8001188:	464d      	mov	r5, r9
 800118a:	4323      	orrs	r3, r4
 800118c:	4698      	mov	r8, r3
 800118e:	4085      	lsls	r5, r0
 8001190:	4851      	ldr	r0, [pc, #324]	; (80012d8 <__aeabi_ddiv+0x254>)
 8001192:	033c      	lsls	r4, r7, #12
 8001194:	1a83      	subs	r3, r0, r2
 8001196:	469b      	mov	fp, r3
 8001198:	2300      	movs	r3, #0
 800119a:	4699      	mov	r9, r3
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	007b      	lsls	r3, r7, #1
 80011a0:	4650      	mov	r0, sl
 80011a2:	0b24      	lsrs	r4, r4, #12
 80011a4:	0d5b      	lsrs	r3, r3, #21
 80011a6:	0fff      	lsrs	r7, r7, #31
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d197      	bne.n	80010dc <__aeabi_ddiv+0x58>
 80011ac:	4652      	mov	r2, sl
 80011ae:	4322      	orrs	r2, r4
 80011b0:	d055      	beq.n	800125e <__aeabi_ddiv+0x1da>
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x134>
 80011b6:	e1ca      	b.n	800154e <__aeabi_ddiv+0x4ca>
 80011b8:	0020      	movs	r0, r4
 80011ba:	f001 fae1 	bl	8002780 <__clzsi2>
 80011be:	0002      	movs	r2, r0
 80011c0:	3a0b      	subs	r2, #11
 80011c2:	231d      	movs	r3, #29
 80011c4:	0001      	movs	r1, r0
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	4652      	mov	r2, sl
 80011ca:	3908      	subs	r1, #8
 80011cc:	40da      	lsrs	r2, r3
 80011ce:	408c      	lsls	r4, r1
 80011d0:	4314      	orrs	r4, r2
 80011d2:	4652      	mov	r2, sl
 80011d4:	408a      	lsls	r2, r1
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <__aeabi_ddiv+0x258>)
 80011d8:	4458      	add	r0, fp
 80011da:	469b      	mov	fp, r3
 80011dc:	4483      	add	fp, r0
 80011de:	2000      	movs	r0, #0
 80011e0:	e78d      	b.n	80010fe <__aeabi_ddiv+0x7a>
 80011e2:	464b      	mov	r3, r9
 80011e4:	4323      	orrs	r3, r4
 80011e6:	4698      	mov	r8, r3
 80011e8:	d140      	bne.n	800126c <__aeabi_ddiv+0x1e8>
 80011ea:	2308      	movs	r3, #8
 80011ec:	4699      	mov	r9, r3
 80011ee:	3b06      	subs	r3, #6
 80011f0:	2500      	movs	r5, #0
 80011f2:	4683      	mov	fp, r0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	e769      	b.n	80010cc <__aeabi_ddiv+0x48>
 80011f8:	46b2      	mov	sl, r6
 80011fa:	9b00      	ldr	r3, [sp, #0]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d0a9      	beq.n	8001154 <__aeabi_ddiv+0xd0>
 8001200:	2b03      	cmp	r3, #3
 8001202:	d100      	bne.n	8001206 <__aeabi_ddiv+0x182>
 8001204:	e211      	b.n	800162a <__aeabi_ddiv+0x5a6>
 8001206:	2b01      	cmp	r3, #1
 8001208:	d093      	beq.n	8001132 <__aeabi_ddiv+0xae>
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <__aeabi_ddiv+0x25c>)
 800120c:	445a      	add	r2, fp
 800120e:	2a00      	cmp	r2, #0
 8001210:	dc00      	bgt.n	8001214 <__aeabi_ddiv+0x190>
 8001212:	e13c      	b.n	800148e <__aeabi_ddiv+0x40a>
 8001214:	076b      	lsls	r3, r5, #29
 8001216:	d000      	beq.n	800121a <__aeabi_ddiv+0x196>
 8001218:	e1a7      	b.n	800156a <__aeabi_ddiv+0x4e6>
 800121a:	08ed      	lsrs	r5, r5, #3
 800121c:	4643      	mov	r3, r8
 800121e:	01db      	lsls	r3, r3, #7
 8001220:	d506      	bpl.n	8001230 <__aeabi_ddiv+0x1ac>
 8001222:	4642      	mov	r2, r8
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <__aeabi_ddiv+0x260>)
 8001226:	401a      	ands	r2, r3
 8001228:	4690      	mov	r8, r2
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	445a      	add	r2, fp
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <__aeabi_ddiv+0x264>)
 8001232:	429a      	cmp	r2, r3
 8001234:	dc8e      	bgt.n	8001154 <__aeabi_ddiv+0xd0>
 8001236:	4643      	mov	r3, r8
 8001238:	0552      	lsls	r2, r2, #21
 800123a:	0758      	lsls	r0, r3, #29
 800123c:	025c      	lsls	r4, r3, #9
 800123e:	4305      	orrs	r5, r0
 8001240:	0b24      	lsrs	r4, r4, #12
 8001242:	0d53      	lsrs	r3, r2, #21
 8001244:	e778      	b.n	8001138 <__aeabi_ddiv+0xb4>
 8001246:	46ba      	mov	sl, r7
 8001248:	46a0      	mov	r8, r4
 800124a:	0015      	movs	r5, r2
 800124c:	9000      	str	r0, [sp, #0]
 800124e:	e7d4      	b.n	80011fa <__aeabi_ddiv+0x176>
 8001250:	464a      	mov	r2, r9
 8001252:	2303      	movs	r3, #3
 8001254:	431a      	orrs	r2, r3
 8001256:	4691      	mov	r9, r2
 8001258:	2003      	movs	r0, #3
 800125a:	4652      	mov	r2, sl
 800125c:	e74f      	b.n	80010fe <__aeabi_ddiv+0x7a>
 800125e:	4649      	mov	r1, r9
 8001260:	2301      	movs	r3, #1
 8001262:	4319      	orrs	r1, r3
 8001264:	4689      	mov	r9, r1
 8001266:	2400      	movs	r4, #0
 8001268:	2001      	movs	r0, #1
 800126a:	e748      	b.n	80010fe <__aeabi_ddiv+0x7a>
 800126c:	230c      	movs	r3, #12
 800126e:	4699      	mov	r9, r3
 8001270:	3b09      	subs	r3, #9
 8001272:	46a0      	mov	r8, r4
 8001274:	4683      	mov	fp, r0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	e728      	b.n	80010cc <__aeabi_ddiv+0x48>
 800127a:	2304      	movs	r3, #4
 800127c:	4699      	mov	r9, r3
 800127e:	2300      	movs	r3, #0
 8001280:	469b      	mov	fp, r3
 8001282:	3301      	adds	r3, #1
 8001284:	2500      	movs	r5, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	e720      	b.n	80010cc <__aeabi_ddiv+0x48>
 800128a:	2300      	movs	r3, #0
 800128c:	2480      	movs	r4, #128	; 0x80
 800128e:	469a      	mov	sl, r3
 8001290:	2500      	movs	r5, #0
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <__aeabi_ddiv+0x244>)
 8001294:	0324      	lsls	r4, r4, #12
 8001296:	e74f      	b.n	8001138 <__aeabi_ddiv+0xb4>
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	4641      	mov	r1, r8
 800129c:	031b      	lsls	r3, r3, #12
 800129e:	4219      	tst	r1, r3
 80012a0:	d008      	beq.n	80012b4 <__aeabi_ddiv+0x230>
 80012a2:	421c      	tst	r4, r3
 80012a4:	d106      	bne.n	80012b4 <__aeabi_ddiv+0x230>
 80012a6:	431c      	orrs	r4, r3
 80012a8:	0324      	lsls	r4, r4, #12
 80012aa:	46ba      	mov	sl, r7
 80012ac:	0015      	movs	r5, r2
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <__aeabi_ddiv+0x244>)
 80012b0:	0b24      	lsrs	r4, r4, #12
 80012b2:	e741      	b.n	8001138 <__aeabi_ddiv+0xb4>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	46b2      	mov	sl, r6
 80012c0:	4b01      	ldr	r3, [pc, #4]	; (80012c8 <__aeabi_ddiv+0x244>)
 80012c2:	0b24      	lsrs	r4, r4, #12
 80012c4:	e738      	b.n	8001138 <__aeabi_ddiv+0xb4>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	000007ff 	.word	0x000007ff
 80012cc:	fffffc01 	.word	0xfffffc01
 80012d0:	08017d60 	.word	0x08017d60
 80012d4:	fffff801 	.word	0xfffff801
 80012d8:	fffffc0d 	.word	0xfffffc0d
 80012dc:	000003f3 	.word	0x000003f3
 80012e0:	000003ff 	.word	0x000003ff
 80012e4:	feffffff 	.word	0xfeffffff
 80012e8:	000007fe 	.word	0x000007fe
 80012ec:	4544      	cmp	r4, r8
 80012ee:	d200      	bcs.n	80012f2 <__aeabi_ddiv+0x26e>
 80012f0:	e116      	b.n	8001520 <__aeabi_ddiv+0x49c>
 80012f2:	d100      	bne.n	80012f6 <__aeabi_ddiv+0x272>
 80012f4:	e111      	b.n	800151a <__aeabi_ddiv+0x496>
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	469c      	mov	ip, r3
 80012fc:	002e      	movs	r6, r5
 80012fe:	4640      	mov	r0, r8
 8001300:	2500      	movs	r5, #0
 8001302:	44e3      	add	fp, ip
 8001304:	0223      	lsls	r3, r4, #8
 8001306:	0e14      	lsrs	r4, r2, #24
 8001308:	431c      	orrs	r4, r3
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	4699      	mov	r9, r3
 800130e:	0423      	lsls	r3, r4, #16
 8001310:	0c1f      	lsrs	r7, r3, #16
 8001312:	0212      	lsls	r2, r2, #8
 8001314:	4649      	mov	r1, r9
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	9701      	str	r7, [sp, #4]
 800131a:	f7fe ff9f 	bl	800025c <__aeabi_uidivmod>
 800131e:	0002      	movs	r2, r0
 8001320:	437a      	muls	r2, r7
 8001322:	040b      	lsls	r3, r1, #16
 8001324:	0c31      	lsrs	r1, r6, #16
 8001326:	4680      	mov	r8, r0
 8001328:	4319      	orrs	r1, r3
 800132a:	428a      	cmp	r2, r1
 800132c:	d90b      	bls.n	8001346 <__aeabi_ddiv+0x2c2>
 800132e:	2301      	movs	r3, #1
 8001330:	425b      	negs	r3, r3
 8001332:	469c      	mov	ip, r3
 8001334:	1909      	adds	r1, r1, r4
 8001336:	44e0      	add	r8, ip
 8001338:	428c      	cmp	r4, r1
 800133a:	d804      	bhi.n	8001346 <__aeabi_ddiv+0x2c2>
 800133c:	428a      	cmp	r2, r1
 800133e:	d902      	bls.n	8001346 <__aeabi_ddiv+0x2c2>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	4698      	mov	r8, r3
 8001344:	1909      	adds	r1, r1, r4
 8001346:	1a88      	subs	r0, r1, r2
 8001348:	4649      	mov	r1, r9
 800134a:	f7fe ff87 	bl	800025c <__aeabi_uidivmod>
 800134e:	0409      	lsls	r1, r1, #16
 8001350:	468c      	mov	ip, r1
 8001352:	0431      	lsls	r1, r6, #16
 8001354:	4666      	mov	r6, ip
 8001356:	9a01      	ldr	r2, [sp, #4]
 8001358:	0c09      	lsrs	r1, r1, #16
 800135a:	4342      	muls	r2, r0
 800135c:	0003      	movs	r3, r0
 800135e:	4331      	orrs	r1, r6
 8001360:	428a      	cmp	r2, r1
 8001362:	d904      	bls.n	800136e <__aeabi_ddiv+0x2ea>
 8001364:	1909      	adds	r1, r1, r4
 8001366:	3b01      	subs	r3, #1
 8001368:	428c      	cmp	r4, r1
 800136a:	d800      	bhi.n	800136e <__aeabi_ddiv+0x2ea>
 800136c:	e111      	b.n	8001592 <__aeabi_ddiv+0x50e>
 800136e:	1a89      	subs	r1, r1, r2
 8001370:	4642      	mov	r2, r8
 8001372:	9e00      	ldr	r6, [sp, #0]
 8001374:	0412      	lsls	r2, r2, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	0c33      	lsrs	r3, r6, #16
 800137a:	001f      	movs	r7, r3
 800137c:	0c10      	lsrs	r0, r2, #16
 800137e:	4690      	mov	r8, r2
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	0413      	lsls	r3, r2, #16
 8001384:	0432      	lsls	r2, r6, #16
 8001386:	0c16      	lsrs	r6, r2, #16
 8001388:	0032      	movs	r2, r6
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	435a      	muls	r2, r3
 800138e:	9603      	str	r6, [sp, #12]
 8001390:	437b      	muls	r3, r7
 8001392:	4346      	muls	r6, r0
 8001394:	4378      	muls	r0, r7
 8001396:	0c17      	lsrs	r7, r2, #16
 8001398:	46bc      	mov	ip, r7
 800139a:	199b      	adds	r3, r3, r6
 800139c:	4463      	add	r3, ip
 800139e:	429e      	cmp	r6, r3
 80013a0:	d903      	bls.n	80013aa <__aeabi_ddiv+0x326>
 80013a2:	2680      	movs	r6, #128	; 0x80
 80013a4:	0276      	lsls	r6, r6, #9
 80013a6:	46b4      	mov	ip, r6
 80013a8:	4460      	add	r0, ip
 80013aa:	0c1e      	lsrs	r6, r3, #16
 80013ac:	1830      	adds	r0, r6, r0
 80013ae:	0416      	lsls	r6, r2, #16
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	0c36      	lsrs	r6, r6, #16
 80013b4:	199e      	adds	r6, r3, r6
 80013b6:	4281      	cmp	r1, r0
 80013b8:	d200      	bcs.n	80013bc <__aeabi_ddiv+0x338>
 80013ba:	e09c      	b.n	80014f6 <__aeabi_ddiv+0x472>
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x33c>
 80013be:	e097      	b.n	80014f0 <__aeabi_ddiv+0x46c>
 80013c0:	1bae      	subs	r6, r5, r6
 80013c2:	1a09      	subs	r1, r1, r0
 80013c4:	42b5      	cmp	r5, r6
 80013c6:	4180      	sbcs	r0, r0
 80013c8:	4240      	negs	r0, r0
 80013ca:	1a08      	subs	r0, r1, r0
 80013cc:	4284      	cmp	r4, r0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_ddiv+0x34e>
 80013d0:	e111      	b.n	80015f6 <__aeabi_ddiv+0x572>
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe ff42 	bl	800025c <__aeabi_uidivmod>
 80013d8:	9a01      	ldr	r2, [sp, #4]
 80013da:	040b      	lsls	r3, r1, #16
 80013dc:	4342      	muls	r2, r0
 80013de:	0c31      	lsrs	r1, r6, #16
 80013e0:	0005      	movs	r5, r0
 80013e2:	4319      	orrs	r1, r3
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d907      	bls.n	80013f8 <__aeabi_ddiv+0x374>
 80013e8:	1909      	adds	r1, r1, r4
 80013ea:	3d01      	subs	r5, #1
 80013ec:	428c      	cmp	r4, r1
 80013ee:	d803      	bhi.n	80013f8 <__aeabi_ddiv+0x374>
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d901      	bls.n	80013f8 <__aeabi_ddiv+0x374>
 80013f4:	1e85      	subs	r5, r0, #2
 80013f6:	1909      	adds	r1, r1, r4
 80013f8:	1a88      	subs	r0, r1, r2
 80013fa:	4649      	mov	r1, r9
 80013fc:	f7fe ff2e 	bl	800025c <__aeabi_uidivmod>
 8001400:	0409      	lsls	r1, r1, #16
 8001402:	468c      	mov	ip, r1
 8001404:	0431      	lsls	r1, r6, #16
 8001406:	4666      	mov	r6, ip
 8001408:	9a01      	ldr	r2, [sp, #4]
 800140a:	0c09      	lsrs	r1, r1, #16
 800140c:	4342      	muls	r2, r0
 800140e:	0003      	movs	r3, r0
 8001410:	4331      	orrs	r1, r6
 8001412:	428a      	cmp	r2, r1
 8001414:	d907      	bls.n	8001426 <__aeabi_ddiv+0x3a2>
 8001416:	1909      	adds	r1, r1, r4
 8001418:	3b01      	subs	r3, #1
 800141a:	428c      	cmp	r4, r1
 800141c:	d803      	bhi.n	8001426 <__aeabi_ddiv+0x3a2>
 800141e:	428a      	cmp	r2, r1
 8001420:	d901      	bls.n	8001426 <__aeabi_ddiv+0x3a2>
 8001422:	1e83      	subs	r3, r0, #2
 8001424:	1909      	adds	r1, r1, r4
 8001426:	9e03      	ldr	r6, [sp, #12]
 8001428:	1a89      	subs	r1, r1, r2
 800142a:	0032      	movs	r2, r6
 800142c:	042d      	lsls	r5, r5, #16
 800142e:	431d      	orrs	r5, r3
 8001430:	9f02      	ldr	r7, [sp, #8]
 8001432:	042b      	lsls	r3, r5, #16
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	435a      	muls	r2, r3
 8001438:	437b      	muls	r3, r7
 800143a:	469c      	mov	ip, r3
 800143c:	0c28      	lsrs	r0, r5, #16
 800143e:	4346      	muls	r6, r0
 8001440:	0c13      	lsrs	r3, r2, #16
 8001442:	44b4      	add	ip, r6
 8001444:	4463      	add	r3, ip
 8001446:	4378      	muls	r0, r7
 8001448:	429e      	cmp	r6, r3
 800144a:	d903      	bls.n	8001454 <__aeabi_ddiv+0x3d0>
 800144c:	2680      	movs	r6, #128	; 0x80
 800144e:	0276      	lsls	r6, r6, #9
 8001450:	46b4      	mov	ip, r6
 8001452:	4460      	add	r0, ip
 8001454:	0c1e      	lsrs	r6, r3, #16
 8001456:	0412      	lsls	r2, r2, #16
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c12      	lsrs	r2, r2, #16
 800145c:	1830      	adds	r0, r6, r0
 800145e:	189b      	adds	r3, r3, r2
 8001460:	4281      	cmp	r1, r0
 8001462:	d306      	bcc.n	8001472 <__aeabi_ddiv+0x3ee>
 8001464:	d002      	beq.n	800146c <__aeabi_ddiv+0x3e8>
 8001466:	2301      	movs	r3, #1
 8001468:	431d      	orrs	r5, r3
 800146a:	e6ce      	b.n	800120a <__aeabi_ddiv+0x186>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_ddiv+0x3ee>
 8001470:	e6cb      	b.n	800120a <__aeabi_ddiv+0x186>
 8001472:	1861      	adds	r1, r4, r1
 8001474:	1e6e      	subs	r6, r5, #1
 8001476:	42a1      	cmp	r1, r4
 8001478:	d200      	bcs.n	800147c <__aeabi_ddiv+0x3f8>
 800147a:	e0a4      	b.n	80015c6 <__aeabi_ddiv+0x542>
 800147c:	4281      	cmp	r1, r0
 800147e:	d200      	bcs.n	8001482 <__aeabi_ddiv+0x3fe>
 8001480:	e0c9      	b.n	8001616 <__aeabi_ddiv+0x592>
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0x402>
 8001484:	e0d9      	b.n	800163a <__aeabi_ddiv+0x5b6>
 8001486:	0035      	movs	r5, r6
 8001488:	e7ed      	b.n	8001466 <__aeabi_ddiv+0x3e2>
 800148a:	2501      	movs	r5, #1
 800148c:	426d      	negs	r5, r5
 800148e:	2101      	movs	r1, #1
 8001490:	1a89      	subs	r1, r1, r2
 8001492:	2938      	cmp	r1, #56	; 0x38
 8001494:	dd00      	ble.n	8001498 <__aeabi_ddiv+0x414>
 8001496:	e64c      	b.n	8001132 <__aeabi_ddiv+0xae>
 8001498:	291f      	cmp	r1, #31
 800149a:	dc00      	bgt.n	800149e <__aeabi_ddiv+0x41a>
 800149c:	e07f      	b.n	800159e <__aeabi_ddiv+0x51a>
 800149e:	231f      	movs	r3, #31
 80014a0:	425b      	negs	r3, r3
 80014a2:	1a9a      	subs	r2, r3, r2
 80014a4:	4643      	mov	r3, r8
 80014a6:	40d3      	lsrs	r3, r2
 80014a8:	2920      	cmp	r1, #32
 80014aa:	d004      	beq.n	80014b6 <__aeabi_ddiv+0x432>
 80014ac:	4644      	mov	r4, r8
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <__aeabi_ddiv+0x5c0>)
 80014b0:	445a      	add	r2, fp
 80014b2:	4094      	lsls	r4, r2
 80014b4:	4325      	orrs	r5, r4
 80014b6:	1e6a      	subs	r2, r5, #1
 80014b8:	4195      	sbcs	r5, r2
 80014ba:	2207      	movs	r2, #7
 80014bc:	432b      	orrs	r3, r5
 80014be:	0015      	movs	r5, r2
 80014c0:	2400      	movs	r4, #0
 80014c2:	401d      	ands	r5, r3
 80014c4:	421a      	tst	r2, r3
 80014c6:	d100      	bne.n	80014ca <__aeabi_ddiv+0x446>
 80014c8:	e0a1      	b.n	800160e <__aeabi_ddiv+0x58a>
 80014ca:	220f      	movs	r2, #15
 80014cc:	2400      	movs	r4, #0
 80014ce:	401a      	ands	r2, r3
 80014d0:	2a04      	cmp	r2, #4
 80014d2:	d100      	bne.n	80014d6 <__aeabi_ddiv+0x452>
 80014d4:	e098      	b.n	8001608 <__aeabi_ddiv+0x584>
 80014d6:	1d1a      	adds	r2, r3, #4
 80014d8:	429a      	cmp	r2, r3
 80014da:	419b      	sbcs	r3, r3
 80014dc:	425b      	negs	r3, r3
 80014de:	18e4      	adds	r4, r4, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	0222      	lsls	r2, r4, #8
 80014e4:	d400      	bmi.n	80014e8 <__aeabi_ddiv+0x464>
 80014e6:	e08f      	b.n	8001608 <__aeabi_ddiv+0x584>
 80014e8:	2301      	movs	r3, #1
 80014ea:	2400      	movs	r4, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	e623      	b.n	8001138 <__aeabi_ddiv+0xb4>
 80014f0:	42b5      	cmp	r5, r6
 80014f2:	d300      	bcc.n	80014f6 <__aeabi_ddiv+0x472>
 80014f4:	e764      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 80014f6:	4643      	mov	r3, r8
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	9b00      	ldr	r3, [sp, #0]
 80014fc:	469c      	mov	ip, r3
 80014fe:	4465      	add	r5, ip
 8001500:	001f      	movs	r7, r3
 8001502:	429d      	cmp	r5, r3
 8001504:	419b      	sbcs	r3, r3
 8001506:	425b      	negs	r3, r3
 8001508:	191b      	adds	r3, r3, r4
 800150a:	18c9      	adds	r1, r1, r3
 800150c:	428c      	cmp	r4, r1
 800150e:	d23a      	bcs.n	8001586 <__aeabi_ddiv+0x502>
 8001510:	4288      	cmp	r0, r1
 8001512:	d863      	bhi.n	80015dc <__aeabi_ddiv+0x558>
 8001514:	d060      	beq.n	80015d8 <__aeabi_ddiv+0x554>
 8001516:	4690      	mov	r8, r2
 8001518:	e752      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 800151a:	42aa      	cmp	r2, r5
 800151c:	d900      	bls.n	8001520 <__aeabi_ddiv+0x49c>
 800151e:	e6ea      	b.n	80012f6 <__aeabi_ddiv+0x272>
 8001520:	4643      	mov	r3, r8
 8001522:	07de      	lsls	r6, r3, #31
 8001524:	0858      	lsrs	r0, r3, #1
 8001526:	086b      	lsrs	r3, r5, #1
 8001528:	431e      	orrs	r6, r3
 800152a:	07ed      	lsls	r5, r5, #31
 800152c:	e6ea      	b.n	8001304 <__aeabi_ddiv+0x280>
 800152e:	4648      	mov	r0, r9
 8001530:	f001 f926 	bl	8002780 <__clzsi2>
 8001534:	0001      	movs	r1, r0
 8001536:	0002      	movs	r2, r0
 8001538:	3115      	adds	r1, #21
 800153a:	3220      	adds	r2, #32
 800153c:	291c      	cmp	r1, #28
 800153e:	dc00      	bgt.n	8001542 <__aeabi_ddiv+0x4be>
 8001540:	e61a      	b.n	8001178 <__aeabi_ddiv+0xf4>
 8001542:	464b      	mov	r3, r9
 8001544:	3808      	subs	r0, #8
 8001546:	4083      	lsls	r3, r0
 8001548:	2500      	movs	r5, #0
 800154a:	4698      	mov	r8, r3
 800154c:	e620      	b.n	8001190 <__aeabi_ddiv+0x10c>
 800154e:	f001 f917 	bl	8002780 <__clzsi2>
 8001552:	0003      	movs	r3, r0
 8001554:	001a      	movs	r2, r3
 8001556:	3215      	adds	r2, #21
 8001558:	3020      	adds	r0, #32
 800155a:	2a1c      	cmp	r2, #28
 800155c:	dc00      	bgt.n	8001560 <__aeabi_ddiv+0x4dc>
 800155e:	e630      	b.n	80011c2 <__aeabi_ddiv+0x13e>
 8001560:	4654      	mov	r4, sl
 8001562:	3b08      	subs	r3, #8
 8001564:	2200      	movs	r2, #0
 8001566:	409c      	lsls	r4, r3
 8001568:	e635      	b.n	80011d6 <__aeabi_ddiv+0x152>
 800156a:	230f      	movs	r3, #15
 800156c:	402b      	ands	r3, r5
 800156e:	2b04      	cmp	r3, #4
 8001570:	d100      	bne.n	8001574 <__aeabi_ddiv+0x4f0>
 8001572:	e652      	b.n	800121a <__aeabi_ddiv+0x196>
 8001574:	2305      	movs	r3, #5
 8001576:	425b      	negs	r3, r3
 8001578:	42ab      	cmp	r3, r5
 800157a:	419b      	sbcs	r3, r3
 800157c:	3504      	adds	r5, #4
 800157e:	425b      	negs	r3, r3
 8001580:	08ed      	lsrs	r5, r5, #3
 8001582:	4498      	add	r8, r3
 8001584:	e64a      	b.n	800121c <__aeabi_ddiv+0x198>
 8001586:	428c      	cmp	r4, r1
 8001588:	d1c5      	bne.n	8001516 <__aeabi_ddiv+0x492>
 800158a:	42af      	cmp	r7, r5
 800158c:	d9c0      	bls.n	8001510 <__aeabi_ddiv+0x48c>
 800158e:	4690      	mov	r8, r2
 8001590:	e716      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 8001592:	428a      	cmp	r2, r1
 8001594:	d800      	bhi.n	8001598 <__aeabi_ddiv+0x514>
 8001596:	e6ea      	b.n	800136e <__aeabi_ddiv+0x2ea>
 8001598:	1e83      	subs	r3, r0, #2
 800159a:	1909      	adds	r1, r1, r4
 800159c:	e6e7      	b.n	800136e <__aeabi_ddiv+0x2ea>
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <__aeabi_ddiv+0x5c4>)
 80015a0:	0028      	movs	r0, r5
 80015a2:	445a      	add	r2, fp
 80015a4:	4643      	mov	r3, r8
 80015a6:	4095      	lsls	r5, r2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	40c8      	lsrs	r0, r1
 80015ac:	1e6a      	subs	r2, r5, #1
 80015ae:	4195      	sbcs	r5, r2
 80015b0:	4644      	mov	r4, r8
 80015b2:	4303      	orrs	r3, r0
 80015b4:	432b      	orrs	r3, r5
 80015b6:	40cc      	lsrs	r4, r1
 80015b8:	075a      	lsls	r2, r3, #29
 80015ba:	d092      	beq.n	80014e2 <__aeabi_ddiv+0x45e>
 80015bc:	220f      	movs	r2, #15
 80015be:	401a      	ands	r2, r3
 80015c0:	2a04      	cmp	r2, #4
 80015c2:	d188      	bne.n	80014d6 <__aeabi_ddiv+0x452>
 80015c4:	e78d      	b.n	80014e2 <__aeabi_ddiv+0x45e>
 80015c6:	0035      	movs	r5, r6
 80015c8:	4281      	cmp	r1, r0
 80015ca:	d000      	beq.n	80015ce <__aeabi_ddiv+0x54a>
 80015cc:	e74b      	b.n	8001466 <__aeabi_ddiv+0x3e2>
 80015ce:	9a00      	ldr	r2, [sp, #0]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d000      	beq.n	80015d6 <__aeabi_ddiv+0x552>
 80015d4:	e747      	b.n	8001466 <__aeabi_ddiv+0x3e2>
 80015d6:	e618      	b.n	800120a <__aeabi_ddiv+0x186>
 80015d8:	42ae      	cmp	r6, r5
 80015da:	d99c      	bls.n	8001516 <__aeabi_ddiv+0x492>
 80015dc:	2302      	movs	r3, #2
 80015de:	425b      	negs	r3, r3
 80015e0:	469c      	mov	ip, r3
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	44e0      	add	r8, ip
 80015e6:	469c      	mov	ip, r3
 80015e8:	4465      	add	r5, ip
 80015ea:	429d      	cmp	r5, r3
 80015ec:	419b      	sbcs	r3, r3
 80015ee:	425b      	negs	r3, r3
 80015f0:	191b      	adds	r3, r3, r4
 80015f2:	18c9      	adds	r1, r1, r3
 80015f4:	e6e4      	b.n	80013c0 <__aeabi_ddiv+0x33c>
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <__aeabi_ddiv+0x5c8>)
 80015f8:	445a      	add	r2, fp
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	dc00      	bgt.n	8001600 <__aeabi_ddiv+0x57c>
 80015fe:	e744      	b.n	800148a <__aeabi_ddiv+0x406>
 8001600:	2301      	movs	r3, #1
 8001602:	2500      	movs	r5, #0
 8001604:	4498      	add	r8, r3
 8001606:	e609      	b.n	800121c <__aeabi_ddiv+0x198>
 8001608:	0765      	lsls	r5, r4, #29
 800160a:	0264      	lsls	r4, r4, #9
 800160c:	0b24      	lsrs	r4, r4, #12
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	431d      	orrs	r5, r3
 8001612:	2300      	movs	r3, #0
 8001614:	e590      	b.n	8001138 <__aeabi_ddiv+0xb4>
 8001616:	9e00      	ldr	r6, [sp, #0]
 8001618:	3d02      	subs	r5, #2
 800161a:	0072      	lsls	r2, r6, #1
 800161c:	42b2      	cmp	r2, r6
 800161e:	41bf      	sbcs	r7, r7
 8001620:	427f      	negs	r7, r7
 8001622:	193c      	adds	r4, r7, r4
 8001624:	1909      	adds	r1, r1, r4
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	e7ce      	b.n	80015c8 <__aeabi_ddiv+0x544>
 800162a:	2480      	movs	r4, #128	; 0x80
 800162c:	4643      	mov	r3, r8
 800162e:	0324      	lsls	r4, r4, #12
 8001630:	431c      	orrs	r4, r3
 8001632:	0324      	lsls	r4, r4, #12
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <__aeabi_ddiv+0x5cc>)
 8001636:	0b24      	lsrs	r4, r4, #12
 8001638:	e57e      	b.n	8001138 <__aeabi_ddiv+0xb4>
 800163a:	9a00      	ldr	r2, [sp, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ea      	bcc.n	8001616 <__aeabi_ddiv+0x592>
 8001640:	0035      	movs	r5, r6
 8001642:	e7c4      	b.n	80015ce <__aeabi_ddiv+0x54a>
 8001644:	0000043e 	.word	0x0000043e
 8001648:	0000041e 	.word	0x0000041e
 800164c:	000003ff 	.word	0x000003ff
 8001650:	000007ff 	.word	0x000007ff

08001654 <__eqdf2>:
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	464f      	mov	r7, r9
 8001658:	4646      	mov	r6, r8
 800165a:	46d6      	mov	lr, sl
 800165c:	4694      	mov	ip, r2
 800165e:	4691      	mov	r9, r2
 8001660:	031a      	lsls	r2, r3, #12
 8001662:	0b12      	lsrs	r2, r2, #12
 8001664:	4d18      	ldr	r5, [pc, #96]	; (80016c8 <__eqdf2+0x74>)
 8001666:	b5c0      	push	{r6, r7, lr}
 8001668:	004c      	lsls	r4, r1, #1
 800166a:	030f      	lsls	r7, r1, #12
 800166c:	4692      	mov	sl, r2
 800166e:	005a      	lsls	r2, r3, #1
 8001670:	0006      	movs	r6, r0
 8001672:	4680      	mov	r8, r0
 8001674:	0b3f      	lsrs	r7, r7, #12
 8001676:	2001      	movs	r0, #1
 8001678:	0d64      	lsrs	r4, r4, #21
 800167a:	0fc9      	lsrs	r1, r1, #31
 800167c:	0d52      	lsrs	r2, r2, #21
 800167e:	0fdb      	lsrs	r3, r3, #31
 8001680:	42ac      	cmp	r4, r5
 8001682:	d00a      	beq.n	800169a <__eqdf2+0x46>
 8001684:	42aa      	cmp	r2, r5
 8001686:	d003      	beq.n	8001690 <__eqdf2+0x3c>
 8001688:	4294      	cmp	r4, r2
 800168a:	d101      	bne.n	8001690 <__eqdf2+0x3c>
 800168c:	4557      	cmp	r7, sl
 800168e:	d00d      	beq.n	80016ac <__eqdf2+0x58>
 8001690:	bce0      	pop	{r5, r6, r7}
 8001692:	46ba      	mov	sl, r7
 8001694:	46b1      	mov	r9, r6
 8001696:	46a8      	mov	r8, r5
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169a:	003d      	movs	r5, r7
 800169c:	4335      	orrs	r5, r6
 800169e:	d1f7      	bne.n	8001690 <__eqdf2+0x3c>
 80016a0:	42a2      	cmp	r2, r4
 80016a2:	d1f5      	bne.n	8001690 <__eqdf2+0x3c>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4665      	mov	r5, ip
 80016a8:	432a      	orrs	r2, r5
 80016aa:	d1f1      	bne.n	8001690 <__eqdf2+0x3c>
 80016ac:	2001      	movs	r0, #1
 80016ae:	45c8      	cmp	r8, r9
 80016b0:	d1ee      	bne.n	8001690 <__eqdf2+0x3c>
 80016b2:	4299      	cmp	r1, r3
 80016b4:	d006      	beq.n	80016c4 <__eqdf2+0x70>
 80016b6:	2c00      	cmp	r4, #0
 80016b8:	d1ea      	bne.n	8001690 <__eqdf2+0x3c>
 80016ba:	433e      	orrs	r6, r7
 80016bc:	0030      	movs	r0, r6
 80016be:	1e46      	subs	r6, r0, #1
 80016c0:	41b0      	sbcs	r0, r6
 80016c2:	e7e5      	b.n	8001690 <__eqdf2+0x3c>
 80016c4:	2000      	movs	r0, #0
 80016c6:	e7e3      	b.n	8001690 <__eqdf2+0x3c>
 80016c8:	000007ff 	.word	0x000007ff

080016cc <__gedf2>:
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	464e      	mov	r6, r9
 80016d0:	4645      	mov	r5, r8
 80016d2:	4657      	mov	r7, sl
 80016d4:	46de      	mov	lr, fp
 80016d6:	0004      	movs	r4, r0
 80016d8:	0018      	movs	r0, r3
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	0016      	movs	r6, r2
 80016de:	031b      	lsls	r3, r3, #12
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	4d32      	ldr	r5, [pc, #200]	; (80017ac <__gedf2+0xe0>)
 80016e4:	030f      	lsls	r7, r1, #12
 80016e6:	004a      	lsls	r2, r1, #1
 80016e8:	4699      	mov	r9, r3
 80016ea:	0043      	lsls	r3, r0, #1
 80016ec:	46a4      	mov	ip, r4
 80016ee:	46b0      	mov	r8, r6
 80016f0:	0b3f      	lsrs	r7, r7, #12
 80016f2:	0d52      	lsrs	r2, r2, #21
 80016f4:	0fc9      	lsrs	r1, r1, #31
 80016f6:	0d5b      	lsrs	r3, r3, #21
 80016f8:	0fc0      	lsrs	r0, r0, #31
 80016fa:	42aa      	cmp	r2, r5
 80016fc:	d029      	beq.n	8001752 <__gedf2+0x86>
 80016fe:	42ab      	cmp	r3, r5
 8001700:	d018      	beq.n	8001734 <__gedf2+0x68>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d12a      	bne.n	800175c <__gedf2+0x90>
 8001706:	433c      	orrs	r4, r7
 8001708:	46a3      	mov	fp, r4
 800170a:	4265      	negs	r5, r4
 800170c:	4165      	adcs	r5, r4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <__gedf2+0x4c>
 8001712:	464c      	mov	r4, r9
 8001714:	4326      	orrs	r6, r4
 8001716:	d027      	beq.n	8001768 <__gedf2+0x9c>
 8001718:	2d00      	cmp	r5, #0
 800171a:	d115      	bne.n	8001748 <__gedf2+0x7c>
 800171c:	4281      	cmp	r1, r0
 800171e:	d028      	beq.n	8001772 <__gedf2+0xa6>
 8001720:	2002      	movs	r0, #2
 8001722:	3901      	subs	r1, #1
 8001724:	4008      	ands	r0, r1
 8001726:	3801      	subs	r0, #1
 8001728:	bcf0      	pop	{r4, r5, r6, r7}
 800172a:	46bb      	mov	fp, r7
 800172c:	46b2      	mov	sl, r6
 800172e:	46a9      	mov	r9, r5
 8001730:	46a0      	mov	r8, r4
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	464d      	mov	r5, r9
 8001736:	432e      	orrs	r6, r5
 8001738:	d12f      	bne.n	800179a <__gedf2+0xce>
 800173a:	2a00      	cmp	r2, #0
 800173c:	d1ee      	bne.n	800171c <__gedf2+0x50>
 800173e:	433c      	orrs	r4, r7
 8001740:	4265      	negs	r5, r4
 8001742:	4165      	adcs	r5, r4
 8001744:	2d00      	cmp	r5, #0
 8001746:	d0e9      	beq.n	800171c <__gedf2+0x50>
 8001748:	2800      	cmp	r0, #0
 800174a:	d1ed      	bne.n	8001728 <__gedf2+0x5c>
 800174c:	2001      	movs	r0, #1
 800174e:	4240      	negs	r0, r0
 8001750:	e7ea      	b.n	8001728 <__gedf2+0x5c>
 8001752:	003d      	movs	r5, r7
 8001754:	4325      	orrs	r5, r4
 8001756:	d120      	bne.n	800179a <__gedf2+0xce>
 8001758:	4293      	cmp	r3, r2
 800175a:	d0eb      	beq.n	8001734 <__gedf2+0x68>
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1dd      	bne.n	800171c <__gedf2+0x50>
 8001760:	464c      	mov	r4, r9
 8001762:	4326      	orrs	r6, r4
 8001764:	d1da      	bne.n	800171c <__gedf2+0x50>
 8001766:	e7db      	b.n	8001720 <__gedf2+0x54>
 8001768:	465b      	mov	r3, fp
 800176a:	2000      	movs	r0, #0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0db      	beq.n	8001728 <__gedf2+0x5c>
 8001770:	e7d6      	b.n	8001720 <__gedf2+0x54>
 8001772:	429a      	cmp	r2, r3
 8001774:	dc0a      	bgt.n	800178c <__gedf2+0xc0>
 8001776:	dbe7      	blt.n	8001748 <__gedf2+0x7c>
 8001778:	454f      	cmp	r7, r9
 800177a:	d8d1      	bhi.n	8001720 <__gedf2+0x54>
 800177c:	d010      	beq.n	80017a0 <__gedf2+0xd4>
 800177e:	2000      	movs	r0, #0
 8001780:	454f      	cmp	r7, r9
 8001782:	d2d1      	bcs.n	8001728 <__gedf2+0x5c>
 8001784:	2900      	cmp	r1, #0
 8001786:	d0e1      	beq.n	800174c <__gedf2+0x80>
 8001788:	0008      	movs	r0, r1
 800178a:	e7cd      	b.n	8001728 <__gedf2+0x5c>
 800178c:	4243      	negs	r3, r0
 800178e:	4158      	adcs	r0, r3
 8001790:	2302      	movs	r3, #2
 8001792:	4240      	negs	r0, r0
 8001794:	4018      	ands	r0, r3
 8001796:	3801      	subs	r0, #1
 8001798:	e7c6      	b.n	8001728 <__gedf2+0x5c>
 800179a:	2002      	movs	r0, #2
 800179c:	4240      	negs	r0, r0
 800179e:	e7c3      	b.n	8001728 <__gedf2+0x5c>
 80017a0:	45c4      	cmp	ip, r8
 80017a2:	d8bd      	bhi.n	8001720 <__gedf2+0x54>
 80017a4:	2000      	movs	r0, #0
 80017a6:	45c4      	cmp	ip, r8
 80017a8:	d2be      	bcs.n	8001728 <__gedf2+0x5c>
 80017aa:	e7eb      	b.n	8001784 <__gedf2+0xb8>
 80017ac:	000007ff 	.word	0x000007ff

080017b0 <__ledf2>:
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	464e      	mov	r6, r9
 80017b4:	4645      	mov	r5, r8
 80017b6:	4657      	mov	r7, sl
 80017b8:	46de      	mov	lr, fp
 80017ba:	0004      	movs	r4, r0
 80017bc:	0018      	movs	r0, r3
 80017be:	b5e0      	push	{r5, r6, r7, lr}
 80017c0:	0016      	movs	r6, r2
 80017c2:	031b      	lsls	r3, r3, #12
 80017c4:	0b1b      	lsrs	r3, r3, #12
 80017c6:	4d31      	ldr	r5, [pc, #196]	; (800188c <__ledf2+0xdc>)
 80017c8:	030f      	lsls	r7, r1, #12
 80017ca:	004a      	lsls	r2, r1, #1
 80017cc:	4699      	mov	r9, r3
 80017ce:	0043      	lsls	r3, r0, #1
 80017d0:	46a4      	mov	ip, r4
 80017d2:	46b0      	mov	r8, r6
 80017d4:	0b3f      	lsrs	r7, r7, #12
 80017d6:	0d52      	lsrs	r2, r2, #21
 80017d8:	0fc9      	lsrs	r1, r1, #31
 80017da:	0d5b      	lsrs	r3, r3, #21
 80017dc:	0fc0      	lsrs	r0, r0, #31
 80017de:	42aa      	cmp	r2, r5
 80017e0:	d011      	beq.n	8001806 <__ledf2+0x56>
 80017e2:	42ab      	cmp	r3, r5
 80017e4:	d014      	beq.n	8001810 <__ledf2+0x60>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d12f      	bne.n	800184a <__ledf2+0x9a>
 80017ea:	433c      	orrs	r4, r7
 80017ec:	46a3      	mov	fp, r4
 80017ee:	4265      	negs	r5, r4
 80017f0:	4165      	adcs	r5, r4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <__ledf2+0x70>
 80017f6:	464c      	mov	r4, r9
 80017f8:	4326      	orrs	r6, r4
 80017fa:	d111      	bne.n	8001820 <__ledf2+0x70>
 80017fc:	465b      	mov	r3, fp
 80017fe:	2000      	movs	r0, #0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <__ledf2+0x84>
 8001804:	e010      	b.n	8001828 <__ledf2+0x78>
 8001806:	003d      	movs	r5, r7
 8001808:	4325      	orrs	r5, r4
 800180a:	d112      	bne.n	8001832 <__ledf2+0x82>
 800180c:	4293      	cmp	r3, r2
 800180e:	d11c      	bne.n	800184a <__ledf2+0x9a>
 8001810:	464d      	mov	r5, r9
 8001812:	432e      	orrs	r6, r5
 8001814:	d10d      	bne.n	8001832 <__ledf2+0x82>
 8001816:	2a00      	cmp	r2, #0
 8001818:	d104      	bne.n	8001824 <__ledf2+0x74>
 800181a:	433c      	orrs	r4, r7
 800181c:	4265      	negs	r5, r4
 800181e:	4165      	adcs	r5, r4
 8001820:	2d00      	cmp	r5, #0
 8001822:	d10d      	bne.n	8001840 <__ledf2+0x90>
 8001824:	4281      	cmp	r1, r0
 8001826:	d016      	beq.n	8001856 <__ledf2+0xa6>
 8001828:	2002      	movs	r0, #2
 800182a:	3901      	subs	r1, #1
 800182c:	4008      	ands	r0, r1
 800182e:	3801      	subs	r0, #1
 8001830:	e000      	b.n	8001834 <__ledf2+0x84>
 8001832:	2002      	movs	r0, #2
 8001834:	bcf0      	pop	{r4, r5, r6, r7}
 8001836:	46bb      	mov	fp, r7
 8001838:	46b2      	mov	sl, r6
 800183a:	46a9      	mov	r9, r5
 800183c:	46a0      	mov	r8, r4
 800183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001840:	2800      	cmp	r0, #0
 8001842:	d1f7      	bne.n	8001834 <__ledf2+0x84>
 8001844:	2001      	movs	r0, #1
 8001846:	4240      	negs	r0, r0
 8001848:	e7f4      	b.n	8001834 <__ledf2+0x84>
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ea      	bne.n	8001824 <__ledf2+0x74>
 800184e:	464c      	mov	r4, r9
 8001850:	4326      	orrs	r6, r4
 8001852:	d1e7      	bne.n	8001824 <__ledf2+0x74>
 8001854:	e7e8      	b.n	8001828 <__ledf2+0x78>
 8001856:	429a      	cmp	r2, r3
 8001858:	dd06      	ble.n	8001868 <__ledf2+0xb8>
 800185a:	4243      	negs	r3, r0
 800185c:	4158      	adcs	r0, r3
 800185e:	2302      	movs	r3, #2
 8001860:	4240      	negs	r0, r0
 8001862:	4018      	ands	r0, r3
 8001864:	3801      	subs	r0, #1
 8001866:	e7e5      	b.n	8001834 <__ledf2+0x84>
 8001868:	429a      	cmp	r2, r3
 800186a:	dbe9      	blt.n	8001840 <__ledf2+0x90>
 800186c:	454f      	cmp	r7, r9
 800186e:	d8db      	bhi.n	8001828 <__ledf2+0x78>
 8001870:	d006      	beq.n	8001880 <__ledf2+0xd0>
 8001872:	2000      	movs	r0, #0
 8001874:	454f      	cmp	r7, r9
 8001876:	d2dd      	bcs.n	8001834 <__ledf2+0x84>
 8001878:	2900      	cmp	r1, #0
 800187a:	d0e3      	beq.n	8001844 <__ledf2+0x94>
 800187c:	0008      	movs	r0, r1
 800187e:	e7d9      	b.n	8001834 <__ledf2+0x84>
 8001880:	45c4      	cmp	ip, r8
 8001882:	d8d1      	bhi.n	8001828 <__ledf2+0x78>
 8001884:	2000      	movs	r0, #0
 8001886:	45c4      	cmp	ip, r8
 8001888:	d2d4      	bcs.n	8001834 <__ledf2+0x84>
 800188a:	e7f5      	b.n	8001878 <__ledf2+0xc8>
 800188c:	000007ff 	.word	0x000007ff

08001890 <__aeabi_dmul>:
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	4657      	mov	r7, sl
 8001894:	464e      	mov	r6, r9
 8001896:	4645      	mov	r5, r8
 8001898:	46de      	mov	lr, fp
 800189a:	b5e0      	push	{r5, r6, r7, lr}
 800189c:	4698      	mov	r8, r3
 800189e:	030c      	lsls	r4, r1, #12
 80018a0:	004b      	lsls	r3, r1, #1
 80018a2:	0006      	movs	r6, r0
 80018a4:	4692      	mov	sl, r2
 80018a6:	b087      	sub	sp, #28
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	0d5b      	lsrs	r3, r3, #21
 80018ac:	0fcf      	lsrs	r7, r1, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <__aeabi_dmul+0xfc>
 80018b2:	4add      	ldr	r2, [pc, #884]	; (8001c28 <__aeabi_dmul+0x398>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d100      	bne.n	80018ba <__aeabi_dmul+0x2a>
 80018b8:	e086      	b.n	80019c8 <__aeabi_dmul+0x138>
 80018ba:	0f42      	lsrs	r2, r0, #29
 80018bc:	00e4      	lsls	r4, r4, #3
 80018be:	4314      	orrs	r4, r2
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	4314      	orrs	r4, r2
 80018c6:	4ad9      	ldr	r2, [pc, #868]	; (8001c2c <__aeabi_dmul+0x39c>)
 80018c8:	00c5      	lsls	r5, r0, #3
 80018ca:	4694      	mov	ip, r2
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	4699      	mov	r9, r3
 80018d4:	469b      	mov	fp, r3
 80018d6:	4643      	mov	r3, r8
 80018d8:	4642      	mov	r2, r8
 80018da:	031e      	lsls	r6, r3, #12
 80018dc:	0fd2      	lsrs	r2, r2, #31
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4650      	mov	r0, sl
 80018e2:	4690      	mov	r8, r2
 80018e4:	0b36      	lsrs	r6, r6, #12
 80018e6:	0d5b      	lsrs	r3, r3, #21
 80018e8:	d100      	bne.n	80018ec <__aeabi_dmul+0x5c>
 80018ea:	e078      	b.n	80019de <__aeabi_dmul+0x14e>
 80018ec:	4ace      	ldr	r2, [pc, #824]	; (8001c28 <__aeabi_dmul+0x398>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <__aeabi_dmul+0x9e>
 80018f2:	49ce      	ldr	r1, [pc, #824]	; (8001c2c <__aeabi_dmul+0x39c>)
 80018f4:	0f42      	lsrs	r2, r0, #29
 80018f6:	468c      	mov	ip, r1
 80018f8:	9900      	ldr	r1, [sp, #0]
 80018fa:	4463      	add	r3, ip
 80018fc:	00f6      	lsls	r6, r6, #3
 80018fe:	468c      	mov	ip, r1
 8001900:	4316      	orrs	r6, r2
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	449c      	add	ip, r3
 8001906:	0412      	lsls	r2, r2, #16
 8001908:	4663      	mov	r3, ip
 800190a:	4316      	orrs	r6, r2
 800190c:	00c2      	lsls	r2, r0, #3
 800190e:	2000      	movs	r0, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	9900      	ldr	r1, [sp, #0]
 8001914:	4643      	mov	r3, r8
 8001916:	3101      	adds	r1, #1
 8001918:	468c      	mov	ip, r1
 800191a:	4649      	mov	r1, r9
 800191c:	407b      	eors	r3, r7
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	290f      	cmp	r1, #15
 8001922:	d900      	bls.n	8001926 <__aeabi_dmul+0x96>
 8001924:	e07e      	b.n	8001a24 <__aeabi_dmul+0x194>
 8001926:	4bc2      	ldr	r3, [pc, #776]	; (8001c30 <__aeabi_dmul+0x3a0>)
 8001928:	0089      	lsls	r1, r1, #2
 800192a:	5859      	ldr	r1, [r3, r1]
 800192c:	468f      	mov	pc, r1
 800192e:	4652      	mov	r2, sl
 8001930:	9b00      	ldr	r3, [sp, #0]
 8001932:	4332      	orrs	r2, r6
 8001934:	d000      	beq.n	8001938 <__aeabi_dmul+0xa8>
 8001936:	e156      	b.n	8001be6 <__aeabi_dmul+0x356>
 8001938:	49bb      	ldr	r1, [pc, #748]	; (8001c28 <__aeabi_dmul+0x398>)
 800193a:	2600      	movs	r6, #0
 800193c:	468c      	mov	ip, r1
 800193e:	4463      	add	r3, ip
 8001940:	4649      	mov	r1, r9
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2302      	movs	r3, #2
 8001946:	4319      	orrs	r1, r3
 8001948:	4689      	mov	r9, r1
 800194a:	2002      	movs	r0, #2
 800194c:	e7e1      	b.n	8001912 <__aeabi_dmul+0x82>
 800194e:	4643      	mov	r3, r8
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	0034      	movs	r4, r6
 8001954:	0015      	movs	r5, r2
 8001956:	4683      	mov	fp, r0
 8001958:	465b      	mov	r3, fp
 800195a:	2b02      	cmp	r3, #2
 800195c:	d05e      	beq.n	8001a1c <__aeabi_dmul+0x18c>
 800195e:	2b03      	cmp	r3, #3
 8001960:	d100      	bne.n	8001964 <__aeabi_dmul+0xd4>
 8001962:	e1f3      	b.n	8001d4c <__aeabi_dmul+0x4bc>
 8001964:	2b01      	cmp	r3, #1
 8001966:	d000      	beq.n	800196a <__aeabi_dmul+0xda>
 8001968:	e118      	b.n	8001b9c <__aeabi_dmul+0x30c>
 800196a:	2200      	movs	r2, #0
 800196c:	2400      	movs	r4, #0
 800196e:	2500      	movs	r5, #0
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	0512      	lsls	r2, r2, #20
 8001974:	4322      	orrs	r2, r4
 8001976:	07db      	lsls	r3, r3, #31
 8001978:	431a      	orrs	r2, r3
 800197a:	0028      	movs	r0, r5
 800197c:	0011      	movs	r1, r2
 800197e:	b007      	add	sp, #28
 8001980:	bcf0      	pop	{r4, r5, r6, r7}
 8001982:	46bb      	mov	fp, r7
 8001984:	46b2      	mov	sl, r6
 8001986:	46a9      	mov	r9, r5
 8001988:	46a0      	mov	r8, r4
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	0025      	movs	r5, r4
 800198e:	4305      	orrs	r5, r0
 8001990:	d100      	bne.n	8001994 <__aeabi_dmul+0x104>
 8001992:	e141      	b.n	8001c18 <__aeabi_dmul+0x388>
 8001994:	2c00      	cmp	r4, #0
 8001996:	d100      	bne.n	800199a <__aeabi_dmul+0x10a>
 8001998:	e1ad      	b.n	8001cf6 <__aeabi_dmul+0x466>
 800199a:	0020      	movs	r0, r4
 800199c:	f000 fef0 	bl	8002780 <__clzsi2>
 80019a0:	0001      	movs	r1, r0
 80019a2:	0002      	movs	r2, r0
 80019a4:	390b      	subs	r1, #11
 80019a6:	231d      	movs	r3, #29
 80019a8:	0010      	movs	r0, r2
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	0031      	movs	r1, r6
 80019ae:	0035      	movs	r5, r6
 80019b0:	3808      	subs	r0, #8
 80019b2:	4084      	lsls	r4, r0
 80019b4:	40d9      	lsrs	r1, r3
 80019b6:	4085      	lsls	r5, r0
 80019b8:	430c      	orrs	r4, r1
 80019ba:	489e      	ldr	r0, [pc, #632]	; (8001c34 <__aeabi_dmul+0x3a4>)
 80019bc:	1a83      	subs	r3, r0, r2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	4699      	mov	r9, r3
 80019c4:	469b      	mov	fp, r3
 80019c6:	e786      	b.n	80018d6 <__aeabi_dmul+0x46>
 80019c8:	0005      	movs	r5, r0
 80019ca:	4325      	orrs	r5, r4
 80019cc:	d000      	beq.n	80019d0 <__aeabi_dmul+0x140>
 80019ce:	e11c      	b.n	8001c0a <__aeabi_dmul+0x37a>
 80019d0:	2208      	movs	r2, #8
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2302      	movs	r3, #2
 80019d6:	2400      	movs	r4, #0
 80019d8:	4691      	mov	r9, r2
 80019da:	469b      	mov	fp, r3
 80019dc:	e77b      	b.n	80018d6 <__aeabi_dmul+0x46>
 80019de:	4652      	mov	r2, sl
 80019e0:	4332      	orrs	r2, r6
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dmul+0x156>
 80019e4:	e10a      	b.n	8001bfc <__aeabi_dmul+0x36c>
 80019e6:	2e00      	cmp	r6, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x15c>
 80019ea:	e176      	b.n	8001cda <__aeabi_dmul+0x44a>
 80019ec:	0030      	movs	r0, r6
 80019ee:	f000 fec7 	bl	8002780 <__clzsi2>
 80019f2:	0002      	movs	r2, r0
 80019f4:	3a0b      	subs	r2, #11
 80019f6:	231d      	movs	r3, #29
 80019f8:	0001      	movs	r1, r0
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	4652      	mov	r2, sl
 80019fe:	3908      	subs	r1, #8
 8001a00:	40da      	lsrs	r2, r3
 8001a02:	408e      	lsls	r6, r1
 8001a04:	4316      	orrs	r6, r2
 8001a06:	4652      	mov	r2, sl
 8001a08:	408a      	lsls	r2, r1
 8001a0a:	9b00      	ldr	r3, [sp, #0]
 8001a0c:	4989      	ldr	r1, [pc, #548]	; (8001c34 <__aeabi_dmul+0x3a4>)
 8001a0e:	1a18      	subs	r0, r3, r0
 8001a10:	0003      	movs	r3, r0
 8001a12:	468c      	mov	ip, r1
 8001a14:	4463      	add	r3, ip
 8001a16:	2000      	movs	r0, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	e77a      	b.n	8001912 <__aeabi_dmul+0x82>
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	2500      	movs	r5, #0
 8001a20:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <__aeabi_dmul+0x398>)
 8001a22:	e7a5      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001a24:	0c2f      	lsrs	r7, r5, #16
 8001a26:	042d      	lsls	r5, r5, #16
 8001a28:	0c2d      	lsrs	r5, r5, #16
 8001a2a:	002b      	movs	r3, r5
 8001a2c:	0c11      	lsrs	r1, r2, #16
 8001a2e:	0412      	lsls	r2, r2, #16
 8001a30:	0c12      	lsrs	r2, r2, #16
 8001a32:	4353      	muls	r3, r2
 8001a34:	4698      	mov	r8, r3
 8001a36:	0013      	movs	r3, r2
 8001a38:	0028      	movs	r0, r5
 8001a3a:	437b      	muls	r3, r7
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4348      	muls	r0, r1
 8001a40:	4448      	add	r0, r9
 8001a42:	4683      	mov	fp, r0
 8001a44:	4640      	mov	r0, r8
 8001a46:	000b      	movs	r3, r1
 8001a48:	0c00      	lsrs	r0, r0, #16
 8001a4a:	4682      	mov	sl, r0
 8001a4c:	4658      	mov	r0, fp
 8001a4e:	437b      	muls	r3, r7
 8001a50:	4450      	add	r0, sl
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	4581      	cmp	r9, r0
 8001a56:	d906      	bls.n	8001a66 <__aeabi_dmul+0x1d6>
 8001a58:	469a      	mov	sl, r3
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	025b      	lsls	r3, r3, #9
 8001a5e:	4699      	mov	r9, r3
 8001a60:	44ca      	add	sl, r9
 8001a62:	4653      	mov	r3, sl
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	0c03      	lsrs	r3, r0, #16
 8001a68:	469b      	mov	fp, r3
 8001a6a:	4643      	mov	r3, r8
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	0400      	lsls	r0, r0, #16
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	4698      	mov	r8, r3
 8001a74:	0003      	movs	r3, r0
 8001a76:	4443      	add	r3, r8
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	0c33      	lsrs	r3, r6, #16
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	002b      	movs	r3, r5
 8001a80:	0436      	lsls	r6, r6, #16
 8001a82:	0c36      	lsrs	r6, r6, #16
 8001a84:	4373      	muls	r3, r6
 8001a86:	4698      	mov	r8, r3
 8001a88:	0033      	movs	r3, r6
 8001a8a:	437b      	muls	r3, r7
 8001a8c:	469a      	mov	sl, r3
 8001a8e:	464b      	mov	r3, r9
 8001a90:	435d      	muls	r5, r3
 8001a92:	435f      	muls	r7, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	4455      	add	r5, sl
 8001a98:	0c18      	lsrs	r0, r3, #16
 8001a9a:	1940      	adds	r0, r0, r5
 8001a9c:	4582      	cmp	sl, r0
 8001a9e:	d903      	bls.n	8001aa8 <__aeabi_dmul+0x218>
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	469a      	mov	sl, r3
 8001aa6:	4457      	add	r7, sl
 8001aa8:	0c05      	lsrs	r5, r0, #16
 8001aaa:	19eb      	adds	r3, r5, r7
 8001aac:	9305      	str	r3, [sp, #20]
 8001aae:	4643      	mov	r3, r8
 8001ab0:	041d      	lsls	r5, r3, #16
 8001ab2:	0c2d      	lsrs	r5, r5, #16
 8001ab4:	0400      	lsls	r0, r0, #16
 8001ab6:	1940      	adds	r0, r0, r5
 8001ab8:	0c25      	lsrs	r5, r4, #16
 8001aba:	0424      	lsls	r4, r4, #16
 8001abc:	0c24      	lsrs	r4, r4, #16
 8001abe:	0027      	movs	r7, r4
 8001ac0:	4357      	muls	r7, r2
 8001ac2:	436a      	muls	r2, r5
 8001ac4:	4690      	mov	r8, r2
 8001ac6:	002a      	movs	r2, r5
 8001ac8:	0c3b      	lsrs	r3, r7, #16
 8001aca:	469a      	mov	sl, r3
 8001acc:	434a      	muls	r2, r1
 8001ace:	4361      	muls	r1, r4
 8001ad0:	4441      	add	r1, r8
 8001ad2:	4451      	add	r1, sl
 8001ad4:	4483      	add	fp, r0
 8001ad6:	4588      	cmp	r8, r1
 8001ad8:	d903      	bls.n	8001ae2 <__aeabi_dmul+0x252>
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	025b      	lsls	r3, r3, #9
 8001ade:	4698      	mov	r8, r3
 8001ae0:	4442      	add	r2, r8
 8001ae2:	043f      	lsls	r7, r7, #16
 8001ae4:	0c0b      	lsrs	r3, r1, #16
 8001ae6:	0c3f      	lsrs	r7, r7, #16
 8001ae8:	0409      	lsls	r1, r1, #16
 8001aea:	19c9      	adds	r1, r1, r7
 8001aec:	0027      	movs	r7, r4
 8001aee:	4698      	mov	r8, r3
 8001af0:	464b      	mov	r3, r9
 8001af2:	4377      	muls	r7, r6
 8001af4:	435c      	muls	r4, r3
 8001af6:	436e      	muls	r6, r5
 8001af8:	435d      	muls	r5, r3
 8001afa:	0c3b      	lsrs	r3, r7, #16
 8001afc:	4699      	mov	r9, r3
 8001afe:	19a4      	adds	r4, r4, r6
 8001b00:	444c      	add	r4, r9
 8001b02:	4442      	add	r2, r8
 8001b04:	9503      	str	r5, [sp, #12]
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d904      	bls.n	8001b14 <__aeabi_dmul+0x284>
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	4698      	mov	r8, r3
 8001b10:	4445      	add	r5, r8
 8001b12:	9503      	str	r5, [sp, #12]
 8001b14:	9b02      	ldr	r3, [sp, #8]
 8001b16:	043f      	lsls	r7, r7, #16
 8001b18:	445b      	add	r3, fp
 8001b1a:	001e      	movs	r6, r3
 8001b1c:	4283      	cmp	r3, r0
 8001b1e:	4180      	sbcs	r0, r0
 8001b20:	0423      	lsls	r3, r4, #16
 8001b22:	4698      	mov	r8, r3
 8001b24:	9b05      	ldr	r3, [sp, #20]
 8001b26:	0c3f      	lsrs	r7, r7, #16
 8001b28:	4447      	add	r7, r8
 8001b2a:	4698      	mov	r8, r3
 8001b2c:	1876      	adds	r6, r6, r1
 8001b2e:	428e      	cmp	r6, r1
 8001b30:	4189      	sbcs	r1, r1
 8001b32:	4447      	add	r7, r8
 8001b34:	4240      	negs	r0, r0
 8001b36:	183d      	adds	r5, r7, r0
 8001b38:	46a8      	mov	r8, r5
 8001b3a:	4693      	mov	fp, r2
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	468a      	mov	sl, r1
 8001b40:	44c3      	add	fp, r8
 8001b42:	429f      	cmp	r7, r3
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	4580      	cmp	r8, r0
 8001b48:	4180      	sbcs	r0, r0
 8001b4a:	9b03      	ldr	r3, [sp, #12]
 8001b4c:	44da      	add	sl, fp
 8001b4e:	4698      	mov	r8, r3
 8001b50:	4653      	mov	r3, sl
 8001b52:	4240      	negs	r0, r0
 8001b54:	427f      	negs	r7, r7
 8001b56:	4307      	orrs	r7, r0
 8001b58:	0c24      	lsrs	r4, r4, #16
 8001b5a:	4593      	cmp	fp, r2
 8001b5c:	4192      	sbcs	r2, r2
 8001b5e:	458a      	cmp	sl, r1
 8001b60:	4189      	sbcs	r1, r1
 8001b62:	193f      	adds	r7, r7, r4
 8001b64:	0ddc      	lsrs	r4, r3, #23
 8001b66:	9b04      	ldr	r3, [sp, #16]
 8001b68:	0275      	lsls	r5, r6, #9
 8001b6a:	431d      	orrs	r5, r3
 8001b6c:	1e68      	subs	r0, r5, #1
 8001b6e:	4185      	sbcs	r5, r0
 8001b70:	4653      	mov	r3, sl
 8001b72:	4252      	negs	r2, r2
 8001b74:	4249      	negs	r1, r1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	18bf      	adds	r7, r7, r2
 8001b7a:	4447      	add	r7, r8
 8001b7c:	0df6      	lsrs	r6, r6, #23
 8001b7e:	027f      	lsls	r7, r7, #9
 8001b80:	4335      	orrs	r5, r6
 8001b82:	025a      	lsls	r2, r3, #9
 8001b84:	433c      	orrs	r4, r7
 8001b86:	4315      	orrs	r5, r2
 8001b88:	01fb      	lsls	r3, r7, #7
 8001b8a:	d400      	bmi.n	8001b8e <__aeabi_dmul+0x2fe>
 8001b8c:	e0c1      	b.n	8001d12 <__aeabi_dmul+0x482>
 8001b8e:	2101      	movs	r1, #1
 8001b90:	086a      	lsrs	r2, r5, #1
 8001b92:	400d      	ands	r5, r1
 8001b94:	4315      	orrs	r5, r2
 8001b96:	07e2      	lsls	r2, r4, #31
 8001b98:	4315      	orrs	r5, r2
 8001b9a:	0864      	lsrs	r4, r4, #1
 8001b9c:	4926      	ldr	r1, [pc, #152]	; (8001c38 <__aeabi_dmul+0x3a8>)
 8001b9e:	4461      	add	r1, ip
 8001ba0:	2900      	cmp	r1, #0
 8001ba2:	dd56      	ble.n	8001c52 <__aeabi_dmul+0x3c2>
 8001ba4:	076b      	lsls	r3, r5, #29
 8001ba6:	d009      	beq.n	8001bbc <__aeabi_dmul+0x32c>
 8001ba8:	220f      	movs	r2, #15
 8001baa:	402a      	ands	r2, r5
 8001bac:	2a04      	cmp	r2, #4
 8001bae:	d005      	beq.n	8001bbc <__aeabi_dmul+0x32c>
 8001bb0:	1d2a      	adds	r2, r5, #4
 8001bb2:	42aa      	cmp	r2, r5
 8001bb4:	41ad      	sbcs	r5, r5
 8001bb6:	426d      	negs	r5, r5
 8001bb8:	1964      	adds	r4, r4, r5
 8001bba:	0015      	movs	r5, r2
 8001bbc:	01e3      	lsls	r3, r4, #7
 8001bbe:	d504      	bpl.n	8001bca <__aeabi_dmul+0x33a>
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <__aeabi_dmul+0x3ac>)
 8001bc4:	00c9      	lsls	r1, r1, #3
 8001bc6:	4014      	ands	r4, r2
 8001bc8:	4461      	add	r1, ip
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <__aeabi_dmul+0x3b0>)
 8001bcc:	4291      	cmp	r1, r2
 8001bce:	dd00      	ble.n	8001bd2 <__aeabi_dmul+0x342>
 8001bd0:	e724      	b.n	8001a1c <__aeabi_dmul+0x18c>
 8001bd2:	0762      	lsls	r2, r4, #29
 8001bd4:	08ed      	lsrs	r5, r5, #3
 8001bd6:	0264      	lsls	r4, r4, #9
 8001bd8:	0549      	lsls	r1, r1, #21
 8001bda:	4315      	orrs	r5, r2
 8001bdc:	0b24      	lsrs	r4, r4, #12
 8001bde:	0d4a      	lsrs	r2, r1, #21
 8001be0:	e6c6      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001be2:	9701      	str	r7, [sp, #4]
 8001be4:	e6b8      	b.n	8001958 <__aeabi_dmul+0xc8>
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <__aeabi_dmul+0x398>)
 8001be8:	2003      	movs	r0, #3
 8001bea:	4694      	mov	ip, r2
 8001bec:	4463      	add	r3, ip
 8001bee:	464a      	mov	r2, r9
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	e68a      	b.n	8001912 <__aeabi_dmul+0x82>
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	2301      	movs	r3, #1
 8001c00:	4319      	orrs	r1, r3
 8001c02:	4689      	mov	r9, r1
 8001c04:	2600      	movs	r6, #0
 8001c06:	2001      	movs	r0, #1
 8001c08:	e683      	b.n	8001912 <__aeabi_dmul+0x82>
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2303      	movs	r3, #3
 8001c10:	0005      	movs	r5, r0
 8001c12:	4691      	mov	r9, r2
 8001c14:	469b      	mov	fp, r3
 8001c16:	e65e      	b.n	80018d6 <__aeabi_dmul+0x46>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	4699      	mov	r9, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	2400      	movs	r4, #0
 8001c24:	469b      	mov	fp, r3
 8001c26:	e656      	b.n	80018d6 <__aeabi_dmul+0x46>
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	fffffc01 	.word	0xfffffc01
 8001c30:	08017da0 	.word	0x08017da0
 8001c34:	fffffc0d 	.word	0xfffffc0d
 8001c38:	000003ff 	.word	0x000003ff
 8001c3c:	feffffff 	.word	0xfeffffff
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	2300      	movs	r3, #0
 8001c46:	2480      	movs	r4, #128	; 0x80
 8001c48:	2500      	movs	r5, #0
 8001c4a:	4a44      	ldr	r2, [pc, #272]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	0324      	lsls	r4, r4, #12
 8001c50:	e68e      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001c52:	2001      	movs	r0, #1
 8001c54:	1a40      	subs	r0, r0, r1
 8001c56:	2838      	cmp	r0, #56	; 0x38
 8001c58:	dd00      	ble.n	8001c5c <__aeabi_dmul+0x3cc>
 8001c5a:	e686      	b.n	800196a <__aeabi_dmul+0xda>
 8001c5c:	281f      	cmp	r0, #31
 8001c5e:	dd5b      	ble.n	8001d18 <__aeabi_dmul+0x488>
 8001c60:	221f      	movs	r2, #31
 8001c62:	0023      	movs	r3, r4
 8001c64:	4252      	negs	r2, r2
 8001c66:	1a51      	subs	r1, r2, r1
 8001c68:	40cb      	lsrs	r3, r1
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	2820      	cmp	r0, #32
 8001c6e:	d003      	beq.n	8001c78 <__aeabi_dmul+0x3e8>
 8001c70:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <__aeabi_dmul+0x4d0>)
 8001c72:	4462      	add	r2, ip
 8001c74:	4094      	lsls	r4, r2
 8001c76:	4325      	orrs	r5, r4
 8001c78:	1e6a      	subs	r2, r5, #1
 8001c7a:	4195      	sbcs	r5, r2
 8001c7c:	002a      	movs	r2, r5
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	2107      	movs	r1, #7
 8001c82:	000d      	movs	r5, r1
 8001c84:	2400      	movs	r4, #0
 8001c86:	4015      	ands	r5, r2
 8001c88:	4211      	tst	r1, r2
 8001c8a:	d05b      	beq.n	8001d44 <__aeabi_dmul+0x4b4>
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	2400      	movs	r4, #0
 8001c90:	4011      	ands	r1, r2
 8001c92:	2904      	cmp	r1, #4
 8001c94:	d053      	beq.n	8001d3e <__aeabi_dmul+0x4ae>
 8001c96:	1d11      	adds	r1, r2, #4
 8001c98:	4291      	cmp	r1, r2
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	18a4      	adds	r4, r4, r2
 8001ca0:	000a      	movs	r2, r1
 8001ca2:	0223      	lsls	r3, r4, #8
 8001ca4:	d54b      	bpl.n	8001d3e <__aeabi_dmul+0x4ae>
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2400      	movs	r4, #0
 8001caa:	2500      	movs	r5, #0
 8001cac:	e660      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	031b      	lsls	r3, r3, #12
 8001cb2:	421c      	tst	r4, r3
 8001cb4:	d009      	beq.n	8001cca <__aeabi_dmul+0x43a>
 8001cb6:	421e      	tst	r6, r3
 8001cb8:	d107      	bne.n	8001cca <__aeabi_dmul+0x43a>
 8001cba:	4333      	orrs	r3, r6
 8001cbc:	031c      	lsls	r4, r3, #12
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	0015      	movs	r5, r2
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	e652      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	0312      	lsls	r2, r2, #12
 8001cce:	4314      	orrs	r4, r2
 8001cd0:	0324      	lsls	r4, r4, #12
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	9701      	str	r7, [sp, #4]
 8001cd8:	e64a      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001cda:	f000 fd51 	bl	8002780 <__clzsi2>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	3215      	adds	r2, #21
 8001ce4:	3020      	adds	r0, #32
 8001ce6:	2a1c      	cmp	r2, #28
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_dmul+0x45c>
 8001cea:	e684      	b.n	80019f6 <__aeabi_dmul+0x166>
 8001cec:	4656      	mov	r6, sl
 8001cee:	3b08      	subs	r3, #8
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	409e      	lsls	r6, r3
 8001cf4:	e689      	b.n	8001a0a <__aeabi_dmul+0x17a>
 8001cf6:	f000 fd43 	bl	8002780 <__clzsi2>
 8001cfa:	0001      	movs	r1, r0
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	3115      	adds	r1, #21
 8001d00:	3220      	adds	r2, #32
 8001d02:	291c      	cmp	r1, #28
 8001d04:	dc00      	bgt.n	8001d08 <__aeabi_dmul+0x478>
 8001d06:	e64e      	b.n	80019a6 <__aeabi_dmul+0x116>
 8001d08:	0034      	movs	r4, r6
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4084      	lsls	r4, r0
 8001d10:	e653      	b.n	80019ba <__aeabi_dmul+0x12a>
 8001d12:	9b00      	ldr	r3, [sp, #0]
 8001d14:	469c      	mov	ip, r3
 8001d16:	e741      	b.n	8001b9c <__aeabi_dmul+0x30c>
 8001d18:	4912      	ldr	r1, [pc, #72]	; (8001d64 <__aeabi_dmul+0x4d4>)
 8001d1a:	0022      	movs	r2, r4
 8001d1c:	4461      	add	r1, ip
 8001d1e:	002e      	movs	r6, r5
 8001d20:	408d      	lsls	r5, r1
 8001d22:	408a      	lsls	r2, r1
 8001d24:	40c6      	lsrs	r6, r0
 8001d26:	1e69      	subs	r1, r5, #1
 8001d28:	418d      	sbcs	r5, r1
 8001d2a:	4332      	orrs	r2, r6
 8001d2c:	432a      	orrs	r2, r5
 8001d2e:	40c4      	lsrs	r4, r0
 8001d30:	0753      	lsls	r3, r2, #29
 8001d32:	d0b6      	beq.n	8001ca2 <__aeabi_dmul+0x412>
 8001d34:	210f      	movs	r1, #15
 8001d36:	4011      	ands	r1, r2
 8001d38:	2904      	cmp	r1, #4
 8001d3a:	d1ac      	bne.n	8001c96 <__aeabi_dmul+0x406>
 8001d3c:	e7b1      	b.n	8001ca2 <__aeabi_dmul+0x412>
 8001d3e:	0765      	lsls	r5, r4, #29
 8001d40:	0264      	lsls	r4, r4, #9
 8001d42:	0b24      	lsrs	r4, r4, #12
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	4315      	orrs	r5, r2
 8001d48:	2200      	movs	r2, #0
 8001d4a:	e611      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4a01      	ldr	r2, [pc, #4]	; (8001d5c <__aeabi_dmul+0x4cc>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e60a      	b.n	8001970 <__aeabi_dmul+0xe0>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	0000043e 	.word	0x0000043e
 8001d64:	0000041e 	.word	0x0000041e

08001d68 <__aeabi_dsub>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	4657      	mov	r7, sl
 8001d6c:	464e      	mov	r6, r9
 8001d6e:	4645      	mov	r5, r8
 8001d70:	46de      	mov	lr, fp
 8001d72:	0004      	movs	r4, r0
 8001d74:	b5e0      	push	{r5, r6, r7, lr}
 8001d76:	001f      	movs	r7, r3
 8001d78:	0010      	movs	r0, r2
 8001d7a:	030b      	lsls	r3, r1, #12
 8001d7c:	0f62      	lsrs	r2, r4, #29
 8001d7e:	004e      	lsls	r6, r1, #1
 8001d80:	0fcd      	lsrs	r5, r1, #31
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	0339      	lsls	r1, r7, #12
 8001d86:	4313      	orrs	r3, r2
 8001d88:	0a49      	lsrs	r1, r1, #9
 8001d8a:	00e2      	lsls	r2, r4, #3
 8001d8c:	0f44      	lsrs	r4, r0, #29
 8001d8e:	4321      	orrs	r1, r4
 8001d90:	4cc2      	ldr	r4, [pc, #776]	; (800209c <__aeabi_dsub+0x334>)
 8001d92:	4691      	mov	r9, r2
 8001d94:	4692      	mov	sl, r2
 8001d96:	00c0      	lsls	r0, r0, #3
 8001d98:	007a      	lsls	r2, r7, #1
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	0d76      	lsrs	r6, r6, #21
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fff      	lsrs	r7, r7, #31
 8001da2:	42a2      	cmp	r2, r4
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x40>
 8001da6:	e0b4      	b.n	8001f12 <__aeabi_dsub+0x1aa>
 8001da8:	2401      	movs	r4, #1
 8001daa:	4067      	eors	r7, r4
 8001dac:	46bb      	mov	fp, r7
 8001dae:	42bd      	cmp	r5, r7
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4c>
 8001db2:	e088      	b.n	8001ec6 <__aeabi_dsub+0x15e>
 8001db4:	1ab4      	subs	r4, r6, r2
 8001db6:	46a4      	mov	ip, r4
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	dc00      	bgt.n	8001dbe <__aeabi_dsub+0x56>
 8001dbc:	e0b2      	b.n	8001f24 <__aeabi_dsub+0x1bc>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x5c>
 8001dc2:	e0c5      	b.n	8001f50 <__aeabi_dsub+0x1e8>
 8001dc4:	4ab5      	ldr	r2, [pc, #724]	; (800209c <__aeabi_dsub+0x334>)
 8001dc6:	4296      	cmp	r6, r2
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x64>
 8001dca:	e28b      	b.n	80022e4 <__aeabi_dsub+0x57c>
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0412      	lsls	r2, r2, #16
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	2a38      	cmp	r2, #56	; 0x38
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0x72>
 8001dd8:	e1a1      	b.n	800211e <__aeabi_dsub+0x3b6>
 8001dda:	2a1f      	cmp	r2, #31
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dsub+0x78>
 8001dde:	e216      	b.n	800220e <__aeabi_dsub+0x4a6>
 8001de0:	2720      	movs	r7, #32
 8001de2:	000c      	movs	r4, r1
 8001de4:	1abf      	subs	r7, r7, r2
 8001de6:	40bc      	lsls	r4, r7
 8001de8:	0002      	movs	r2, r0
 8001dea:	46a0      	mov	r8, r4
 8001dec:	4664      	mov	r4, ip
 8001dee:	40b8      	lsls	r0, r7
 8001df0:	40e2      	lsrs	r2, r4
 8001df2:	4644      	mov	r4, r8
 8001df4:	4314      	orrs	r4, r2
 8001df6:	0002      	movs	r2, r0
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	4660      	mov	r0, ip
 8001dfe:	40c1      	lsrs	r1, r0
 8001e00:	4322      	orrs	r2, r4
 8001e02:	1a5b      	subs	r3, r3, r1
 8001e04:	4649      	mov	r1, r9
 8001e06:	1a8c      	subs	r4, r1, r2
 8001e08:	45a1      	cmp	r9, r4
 8001e0a:	4192      	sbcs	r2, r2
 8001e0c:	4252      	negs	r2, r2
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	4698      	mov	r8, r3
 8001e12:	4643      	mov	r3, r8
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d400      	bmi.n	8001e1a <__aeabi_dsub+0xb2>
 8001e18:	e117      	b.n	800204a <__aeabi_dsub+0x2e2>
 8001e1a:	4643      	mov	r3, r8
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	0a5b      	lsrs	r3, r3, #9
 8001e20:	4698      	mov	r8, r3
 8001e22:	4643      	mov	r3, r8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0xc2>
 8001e28:	e16c      	b.n	8002104 <__aeabi_dsub+0x39c>
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	f000 fca8 	bl	8002780 <__clzsi2>
 8001e30:	0002      	movs	r2, r0
 8001e32:	3a08      	subs	r2, #8
 8001e34:	2120      	movs	r1, #32
 8001e36:	0020      	movs	r0, r4
 8001e38:	4643      	mov	r3, r8
 8001e3a:	1a89      	subs	r1, r1, r2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	40c8      	lsrs	r0, r1
 8001e40:	4094      	lsls	r4, r2
 8001e42:	4303      	orrs	r3, r0
 8001e44:	4296      	cmp	r6, r2
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0xe2>
 8001e48:	e157      	b.n	80020fa <__aeabi_dsub+0x392>
 8001e4a:	1b96      	subs	r6, r2, r6
 8001e4c:	1c71      	adds	r1, r6, #1
 8001e4e:	291f      	cmp	r1, #31
 8001e50:	dd00      	ble.n	8001e54 <__aeabi_dsub+0xec>
 8001e52:	e1cb      	b.n	80021ec <__aeabi_dsub+0x484>
 8001e54:	2220      	movs	r2, #32
 8001e56:	0018      	movs	r0, r3
 8001e58:	0026      	movs	r6, r4
 8001e5a:	1a52      	subs	r2, r2, r1
 8001e5c:	4094      	lsls	r4, r2
 8001e5e:	4090      	lsls	r0, r2
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	40cb      	lsrs	r3, r1
 8001e64:	1e62      	subs	r2, r4, #1
 8001e66:	4194      	sbcs	r4, r2
 8001e68:	4330      	orrs	r0, r6
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	2600      	movs	r6, #0
 8001e6e:	4304      	orrs	r4, r0
 8001e70:	0763      	lsls	r3, r4, #29
 8001e72:	d009      	beq.n	8001e88 <__aeabi_dsub+0x120>
 8001e74:	230f      	movs	r3, #15
 8001e76:	4023      	ands	r3, r4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d005      	beq.n	8001e88 <__aeabi_dsub+0x120>
 8001e7c:	1d23      	adds	r3, r4, #4
 8001e7e:	42a3      	cmp	r3, r4
 8001e80:	41a4      	sbcs	r4, r4
 8001e82:	4264      	negs	r4, r4
 8001e84:	44a0      	add	r8, r4
 8001e86:	001c      	movs	r4, r3
 8001e88:	4643      	mov	r3, r8
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	d400      	bmi.n	8001e90 <__aeabi_dsub+0x128>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x2e8>
 8001e90:	4b82      	ldr	r3, [pc, #520]	; (800209c <__aeabi_dsub+0x334>)
 8001e92:	3601      	adds	r6, #1
 8001e94:	429e      	cmp	r6, r3
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x132>
 8001e98:	e0fb      	b.n	8002092 <__aeabi_dsub+0x32a>
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <__aeabi_dsub+0x338>)
 8001e9e:	08e4      	lsrs	r4, r4, #3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	0571      	lsls	r1, r6, #21
 8001ea6:	0752      	lsls	r2, r2, #29
 8001ea8:	025b      	lsls	r3, r3, #9
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	0b1b      	lsrs	r3, r3, #12
 8001eae:	0d49      	lsrs	r1, r1, #21
 8001eb0:	0509      	lsls	r1, r1, #20
 8001eb2:	07ed      	lsls	r5, r5, #31
 8001eb4:	4319      	orrs	r1, r3
 8001eb6:	4329      	orrs	r1, r5
 8001eb8:	0010      	movs	r0, r2
 8001eba:	bcf0      	pop	{r4, r5, r6, r7}
 8001ebc:	46bb      	mov	fp, r7
 8001ebe:	46b2      	mov	sl, r6
 8001ec0:	46a9      	mov	r9, r5
 8001ec2:	46a0      	mov	r8, r4
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec6:	1ab4      	subs	r4, r6, r2
 8001ec8:	46a4      	mov	ip, r4
 8001eca:	2c00      	cmp	r4, #0
 8001ecc:	dd58      	ble.n	8001f80 <__aeabi_dsub+0x218>
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x16c>
 8001ed2:	e09e      	b.n	8002012 <__aeabi_dsub+0x2aa>
 8001ed4:	4a71      	ldr	r2, [pc, #452]	; (800209c <__aeabi_dsub+0x334>)
 8001ed6:	4296      	cmp	r6, r2
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x174>
 8001eda:	e13b      	b.n	8002154 <__aeabi_dsub+0x3ec>
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	0412      	lsls	r2, r2, #16
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	2a38      	cmp	r2, #56	; 0x38
 8001ee6:	dd00      	ble.n	8001eea <__aeabi_dsub+0x182>
 8001ee8:	e0c1      	b.n	800206e <__aeabi_dsub+0x306>
 8001eea:	2a1f      	cmp	r2, #31
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_dsub+0x188>
 8001eee:	e1bb      	b.n	8002268 <__aeabi_dsub+0x500>
 8001ef0:	000c      	movs	r4, r1
 8001ef2:	3a20      	subs	r2, #32
 8001ef4:	40d4      	lsrs	r4, r2
 8001ef6:	0022      	movs	r2, r4
 8001ef8:	4664      	mov	r4, ip
 8001efa:	2c20      	cmp	r4, #32
 8001efc:	d004      	beq.n	8001f08 <__aeabi_dsub+0x1a0>
 8001efe:	2740      	movs	r7, #64	; 0x40
 8001f00:	1b3f      	subs	r7, r7, r4
 8001f02:	40b9      	lsls	r1, r7
 8001f04:	4308      	orrs	r0, r1
 8001f06:	4680      	mov	r8, r0
 8001f08:	4644      	mov	r4, r8
 8001f0a:	1e61      	subs	r1, r4, #1
 8001f0c:	418c      	sbcs	r4, r1
 8001f0e:	4314      	orrs	r4, r2
 8001f10:	e0b1      	b.n	8002076 <__aeabi_dsub+0x30e>
 8001f12:	000c      	movs	r4, r1
 8001f14:	4304      	orrs	r4, r0
 8001f16:	d02a      	beq.n	8001f6e <__aeabi_dsub+0x206>
 8001f18:	46bb      	mov	fp, r7
 8001f1a:	42bd      	cmp	r5, r7
 8001f1c:	d02d      	beq.n	8001f7a <__aeabi_dsub+0x212>
 8001f1e:	4c61      	ldr	r4, [pc, #388]	; (80020a4 <__aeabi_dsub+0x33c>)
 8001f20:	46a4      	mov	ip, r4
 8001f22:	44b4      	add	ip, r6
 8001f24:	4664      	mov	r4, ip
 8001f26:	2c00      	cmp	r4, #0
 8001f28:	d05c      	beq.n	8001fe4 <__aeabi_dsub+0x27c>
 8001f2a:	1b94      	subs	r4, r2, r6
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	2e00      	cmp	r6, #0
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x1cc>
 8001f32:	e115      	b.n	8002160 <__aeabi_dsub+0x3f8>
 8001f34:	464d      	mov	r5, r9
 8001f36:	431d      	orrs	r5, r3
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x1d4>
 8001f3a:	e1c3      	b.n	80022c4 <__aeabi_dsub+0x55c>
 8001f3c:	1e65      	subs	r5, r4, #1
 8001f3e:	2c01      	cmp	r4, #1
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x1dc>
 8001f42:	e20c      	b.n	800235e <__aeabi_dsub+0x5f6>
 8001f44:	4e55      	ldr	r6, [pc, #340]	; (800209c <__aeabi_dsub+0x334>)
 8001f46:	42b4      	cmp	r4, r6
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x1e4>
 8001f4a:	e1f8      	b.n	800233e <__aeabi_dsub+0x5d6>
 8001f4c:	46ac      	mov	ip, r5
 8001f4e:	e10e      	b.n	800216e <__aeabi_dsub+0x406>
 8001f50:	000a      	movs	r2, r1
 8001f52:	4302      	orrs	r2, r0
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x1f0>
 8001f56:	e136      	b.n	80021c6 <__aeabi_dsub+0x45e>
 8001f58:	0022      	movs	r2, r4
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	2c01      	cmp	r4, #1
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x1fa>
 8001f60:	e1c6      	b.n	80022f0 <__aeabi_dsub+0x588>
 8001f62:	4c4e      	ldr	r4, [pc, #312]	; (800209c <__aeabi_dsub+0x334>)
 8001f64:	45a4      	cmp	ip, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x202>
 8001f68:	e0f4      	b.n	8002154 <__aeabi_dsub+0x3ec>
 8001f6a:	4694      	mov	ip, r2
 8001f6c:	e731      	b.n	8001dd2 <__aeabi_dsub+0x6a>
 8001f6e:	2401      	movs	r4, #1
 8001f70:	4067      	eors	r7, r4
 8001f72:	46bb      	mov	fp, r7
 8001f74:	42bd      	cmp	r5, r7
 8001f76:	d000      	beq.n	8001f7a <__aeabi_dsub+0x212>
 8001f78:	e71c      	b.n	8001db4 <__aeabi_dsub+0x4c>
 8001f7a:	4c4a      	ldr	r4, [pc, #296]	; (80020a4 <__aeabi_dsub+0x33c>)
 8001f7c:	46a4      	mov	ip, r4
 8001f7e:	44b4      	add	ip, r6
 8001f80:	4664      	mov	r4, ip
 8001f82:	2c00      	cmp	r4, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x220>
 8001f86:	e0cf      	b.n	8002128 <__aeabi_dsub+0x3c0>
 8001f88:	1b94      	subs	r4, r2, r6
 8001f8a:	46a4      	mov	ip, r4
 8001f8c:	2e00      	cmp	r6, #0
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x22a>
 8001f90:	e15c      	b.n	800224c <__aeabi_dsub+0x4e4>
 8001f92:	4e42      	ldr	r6, [pc, #264]	; (800209c <__aeabi_dsub+0x334>)
 8001f94:	42b2      	cmp	r2, r6
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x232>
 8001f98:	e1ec      	b.n	8002374 <__aeabi_dsub+0x60c>
 8001f9a:	2680      	movs	r6, #128	; 0x80
 8001f9c:	0436      	lsls	r6, r6, #16
 8001f9e:	4333      	orrs	r3, r6
 8001fa0:	4664      	mov	r4, ip
 8001fa2:	2c38      	cmp	r4, #56	; 0x38
 8001fa4:	dd00      	ble.n	8001fa8 <__aeabi_dsub+0x240>
 8001fa6:	e1b3      	b.n	8002310 <__aeabi_dsub+0x5a8>
 8001fa8:	2c1f      	cmp	r4, #31
 8001faa:	dd00      	ble.n	8001fae <__aeabi_dsub+0x246>
 8001fac:	e238      	b.n	8002420 <__aeabi_dsub+0x6b8>
 8001fae:	2620      	movs	r6, #32
 8001fb0:	1b36      	subs	r6, r6, r4
 8001fb2:	001c      	movs	r4, r3
 8001fb4:	40b4      	lsls	r4, r6
 8001fb6:	464f      	mov	r7, r9
 8001fb8:	46a0      	mov	r8, r4
 8001fba:	4664      	mov	r4, ip
 8001fbc:	40e7      	lsrs	r7, r4
 8001fbe:	4644      	mov	r4, r8
 8001fc0:	433c      	orrs	r4, r7
 8001fc2:	464f      	mov	r7, r9
 8001fc4:	40b7      	lsls	r7, r6
 8001fc6:	003e      	movs	r6, r7
 8001fc8:	1e77      	subs	r7, r6, #1
 8001fca:	41be      	sbcs	r6, r7
 8001fcc:	4334      	orrs	r4, r6
 8001fce:	4666      	mov	r6, ip
 8001fd0:	40f3      	lsrs	r3, r6
 8001fd2:	18c9      	adds	r1, r1, r3
 8001fd4:	1824      	adds	r4, r4, r0
 8001fd6:	4284      	cmp	r4, r0
 8001fd8:	419b      	sbcs	r3, r3
 8001fda:	425b      	negs	r3, r3
 8001fdc:	4698      	mov	r8, r3
 8001fde:	0016      	movs	r6, r2
 8001fe0:	4488      	add	r8, r1
 8001fe2:	e04e      	b.n	8002082 <__aeabi_dsub+0x31a>
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <__aeabi_dsub+0x340>)
 8001fe6:	1c74      	adds	r4, r6, #1
 8001fe8:	4214      	tst	r4, r2
 8001fea:	d000      	beq.n	8001fee <__aeabi_dsub+0x286>
 8001fec:	e0d6      	b.n	800219c <__aeabi_dsub+0x434>
 8001fee:	464a      	mov	r2, r9
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	2e00      	cmp	r6, #0
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dsub+0x290>
 8001ff6:	e15b      	b.n	80022b0 <__aeabi_dsub+0x548>
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x296>
 8001ffc:	e1a5      	b.n	800234a <__aeabi_dsub+0x5e2>
 8001ffe:	000a      	movs	r2, r1
 8002000:	4302      	orrs	r2, r0
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x29e>
 8002004:	e1bb      	b.n	800237e <__aeabi_dsub+0x616>
 8002006:	464a      	mov	r2, r9
 8002008:	0759      	lsls	r1, r3, #29
 800200a:	08d2      	lsrs	r2, r2, #3
 800200c:	430a      	orrs	r2, r1
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	e027      	b.n	8002062 <__aeabi_dsub+0x2fa>
 8002012:	000a      	movs	r2, r1
 8002014:	4302      	orrs	r2, r0
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x2b2>
 8002018:	e174      	b.n	8002304 <__aeabi_dsub+0x59c>
 800201a:	0022      	movs	r2, r4
 800201c:	3a01      	subs	r2, #1
 800201e:	2c01      	cmp	r4, #1
 8002020:	d005      	beq.n	800202e <__aeabi_dsub+0x2c6>
 8002022:	4c1e      	ldr	r4, [pc, #120]	; (800209c <__aeabi_dsub+0x334>)
 8002024:	45a4      	cmp	ip, r4
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x2c2>
 8002028:	e094      	b.n	8002154 <__aeabi_dsub+0x3ec>
 800202a:	4694      	mov	ip, r2
 800202c:	e759      	b.n	8001ee2 <__aeabi_dsub+0x17a>
 800202e:	4448      	add	r0, r9
 8002030:	4548      	cmp	r0, r9
 8002032:	4192      	sbcs	r2, r2
 8002034:	185b      	adds	r3, r3, r1
 8002036:	4698      	mov	r8, r3
 8002038:	0004      	movs	r4, r0
 800203a:	4252      	negs	r2, r2
 800203c:	4490      	add	r8, r2
 800203e:	4643      	mov	r3, r8
 8002040:	2602      	movs	r6, #2
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d500      	bpl.n	8002048 <__aeabi_dsub+0x2e0>
 8002046:	e0c4      	b.n	80021d2 <__aeabi_dsub+0x46a>
 8002048:	3e01      	subs	r6, #1
 800204a:	0763      	lsls	r3, r4, #29
 800204c:	d000      	beq.n	8002050 <__aeabi_dsub+0x2e8>
 800204e:	e711      	b.n	8001e74 <__aeabi_dsub+0x10c>
 8002050:	4643      	mov	r3, r8
 8002052:	46b4      	mov	ip, r6
 8002054:	0759      	lsls	r1, r3, #29
 8002056:	08e2      	lsrs	r2, r4, #3
 8002058:	430a      	orrs	r2, r1
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	490f      	ldr	r1, [pc, #60]	; (800209c <__aeabi_dsub+0x334>)
 800205e:	458c      	cmp	ip, r1
 8002060:	d040      	beq.n	80020e4 <__aeabi_dsub+0x37c>
 8002062:	4661      	mov	r1, ip
 8002064:	031b      	lsls	r3, r3, #12
 8002066:	0549      	lsls	r1, r1, #21
 8002068:	0b1b      	lsrs	r3, r3, #12
 800206a:	0d49      	lsrs	r1, r1, #21
 800206c:	e720      	b.n	8001eb0 <__aeabi_dsub+0x148>
 800206e:	4301      	orrs	r1, r0
 8002070:	000c      	movs	r4, r1
 8002072:	1e61      	subs	r1, r4, #1
 8002074:	418c      	sbcs	r4, r1
 8002076:	444c      	add	r4, r9
 8002078:	454c      	cmp	r4, r9
 800207a:	4192      	sbcs	r2, r2
 800207c:	4252      	negs	r2, r2
 800207e:	4690      	mov	r8, r2
 8002080:	4498      	add	r8, r3
 8002082:	4643      	mov	r3, r8
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	d5e0      	bpl.n	800204a <__aeabi_dsub+0x2e2>
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__aeabi_dsub+0x334>)
 800208a:	3601      	adds	r6, #1
 800208c:	429e      	cmp	r6, r3
 800208e:	d000      	beq.n	8002092 <__aeabi_dsub+0x32a>
 8002090:	e09f      	b.n	80021d2 <__aeabi_dsub+0x46a>
 8002092:	0031      	movs	r1, r6
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	e70a      	b.n	8001eb0 <__aeabi_dsub+0x148>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	ff7fffff 	.word	0xff7fffff
 80020a4:	fffff801 	.word	0xfffff801
 80020a8:	000007fe 	.word	0x000007fe
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x34a>
 80020b0:	e160      	b.n	8002374 <__aeabi_dsub+0x60c>
 80020b2:	000a      	movs	r2, r1
 80020b4:	4302      	orrs	r2, r0
 80020b6:	d04d      	beq.n	8002154 <__aeabi_dsub+0x3ec>
 80020b8:	464a      	mov	r2, r9
 80020ba:	075c      	lsls	r4, r3, #29
 80020bc:	08d2      	lsrs	r2, r2, #3
 80020be:	4322      	orrs	r2, r4
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	08db      	lsrs	r3, r3, #3
 80020c4:	0324      	lsls	r4, r4, #12
 80020c6:	4223      	tst	r3, r4
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x372>
 80020ca:	08ce      	lsrs	r6, r1, #3
 80020cc:	4226      	tst	r6, r4
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x372>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0033      	movs	r3, r6
 80020d4:	08c2      	lsrs	r2, r0, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430a      	orrs	r2, r1
 80020da:	0f51      	lsrs	r1, r2, #29
 80020dc:	00d2      	lsls	r2, r2, #3
 80020de:	08d2      	lsrs	r2, r2, #3
 80020e0:	0749      	lsls	r1, r1, #29
 80020e2:	430a      	orrs	r2, r1
 80020e4:	0011      	movs	r1, r2
 80020e6:	4319      	orrs	r1, r3
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x384>
 80020ea:	e1c8      	b.n	800247e <__aeabi_dsub+0x716>
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0309      	lsls	r1, r1, #12
 80020f0:	430b      	orrs	r3, r1
 80020f2:	031b      	lsls	r3, r3, #12
 80020f4:	49d5      	ldr	r1, [pc, #852]	; (800244c <__aeabi_dsub+0x6e4>)
 80020f6:	0b1b      	lsrs	r3, r3, #12
 80020f8:	e6da      	b.n	8001eb0 <__aeabi_dsub+0x148>
 80020fa:	49d5      	ldr	r1, [pc, #852]	; (8002450 <__aeabi_dsub+0x6e8>)
 80020fc:	1ab6      	subs	r6, r6, r2
 80020fe:	400b      	ands	r3, r1
 8002100:	4698      	mov	r8, r3
 8002102:	e6b5      	b.n	8001e70 <__aeabi_dsub+0x108>
 8002104:	0020      	movs	r0, r4
 8002106:	f000 fb3b 	bl	8002780 <__clzsi2>
 800210a:	0002      	movs	r2, r0
 800210c:	3218      	adds	r2, #24
 800210e:	2a1f      	cmp	r2, #31
 8002110:	dc00      	bgt.n	8002114 <__aeabi_dsub+0x3ac>
 8002112:	e68f      	b.n	8001e34 <__aeabi_dsub+0xcc>
 8002114:	0023      	movs	r3, r4
 8002116:	3808      	subs	r0, #8
 8002118:	4083      	lsls	r3, r0
 800211a:	2400      	movs	r4, #0
 800211c:	e692      	b.n	8001e44 <__aeabi_dsub+0xdc>
 800211e:	4308      	orrs	r0, r1
 8002120:	0002      	movs	r2, r0
 8002122:	1e50      	subs	r0, r2, #1
 8002124:	4182      	sbcs	r2, r0
 8002126:	e66d      	b.n	8001e04 <__aeabi_dsub+0x9c>
 8002128:	4cca      	ldr	r4, [pc, #808]	; (8002454 <__aeabi_dsub+0x6ec>)
 800212a:	1c72      	adds	r2, r6, #1
 800212c:	4222      	tst	r2, r4
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x3ca>
 8002130:	e0ad      	b.n	800228e <__aeabi_dsub+0x526>
 8002132:	464a      	mov	r2, r9
 8002134:	431a      	orrs	r2, r3
 8002136:	2e00      	cmp	r6, #0
 8002138:	d1b8      	bne.n	80020ac <__aeabi_dsub+0x344>
 800213a:	2a00      	cmp	r2, #0
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x3d8>
 800213e:	e158      	b.n	80023f2 <__aeabi_dsub+0x68a>
 8002140:	000a      	movs	r2, r1
 8002142:	4302      	orrs	r2, r0
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x3e0>
 8002146:	e159      	b.n	80023fc <__aeabi_dsub+0x694>
 8002148:	464a      	mov	r2, r9
 800214a:	0759      	lsls	r1, r3, #29
 800214c:	08d2      	lsrs	r2, r2, #3
 800214e:	430a      	orrs	r2, r1
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	e786      	b.n	8002062 <__aeabi_dsub+0x2fa>
 8002154:	464a      	mov	r2, r9
 8002156:	0759      	lsls	r1, r3, #29
 8002158:	08d2      	lsrs	r2, r2, #3
 800215a:	430a      	orrs	r2, r1
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	e7c1      	b.n	80020e4 <__aeabi_dsub+0x37c>
 8002160:	4dba      	ldr	r5, [pc, #744]	; (800244c <__aeabi_dsub+0x6e4>)
 8002162:	42aa      	cmp	r2, r5
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x400>
 8002166:	e11e      	b.n	80023a6 <__aeabi_dsub+0x63e>
 8002168:	2580      	movs	r5, #128	; 0x80
 800216a:	042d      	lsls	r5, r5, #16
 800216c:	432b      	orrs	r3, r5
 800216e:	4664      	mov	r4, ip
 8002170:	2c38      	cmp	r4, #56	; 0x38
 8002172:	dc5d      	bgt.n	8002230 <__aeabi_dsub+0x4c8>
 8002174:	2c1f      	cmp	r4, #31
 8002176:	dd00      	ble.n	800217a <__aeabi_dsub+0x412>
 8002178:	e0d0      	b.n	800231c <__aeabi_dsub+0x5b4>
 800217a:	2520      	movs	r5, #32
 800217c:	4667      	mov	r7, ip
 800217e:	1b2d      	subs	r5, r5, r4
 8002180:	464e      	mov	r6, r9
 8002182:	001c      	movs	r4, r3
 8002184:	40fe      	lsrs	r6, r7
 8002186:	40ac      	lsls	r4, r5
 8002188:	4334      	orrs	r4, r6
 800218a:	464e      	mov	r6, r9
 800218c:	40ae      	lsls	r6, r5
 800218e:	0035      	movs	r5, r6
 8002190:	40fb      	lsrs	r3, r7
 8002192:	1e6e      	subs	r6, r5, #1
 8002194:	41b5      	sbcs	r5, r6
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	432c      	orrs	r4, r5
 800219a:	e04e      	b.n	800223a <__aeabi_dsub+0x4d2>
 800219c:	464a      	mov	r2, r9
 800219e:	1a14      	subs	r4, r2, r0
 80021a0:	45a1      	cmp	r9, r4
 80021a2:	4192      	sbcs	r2, r2
 80021a4:	4252      	negs	r2, r2
 80021a6:	4690      	mov	r8, r2
 80021a8:	1a5f      	subs	r7, r3, r1
 80021aa:	003a      	movs	r2, r7
 80021ac:	4647      	mov	r7, r8
 80021ae:	1bd2      	subs	r2, r2, r7
 80021b0:	4690      	mov	r8, r2
 80021b2:	0212      	lsls	r2, r2, #8
 80021b4:	d500      	bpl.n	80021b8 <__aeabi_dsub+0x450>
 80021b6:	e08b      	b.n	80022d0 <__aeabi_dsub+0x568>
 80021b8:	4642      	mov	r2, r8
 80021ba:	4322      	orrs	r2, r4
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dsub+0x458>
 80021be:	e630      	b.n	8001e22 <__aeabi_dsub+0xba>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2500      	movs	r5, #0
 80021c4:	e74d      	b.n	8002062 <__aeabi_dsub+0x2fa>
 80021c6:	464a      	mov	r2, r9
 80021c8:	0759      	lsls	r1, r3, #29
 80021ca:	08d2      	lsrs	r2, r2, #3
 80021cc:	430a      	orrs	r2, r1
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	e744      	b.n	800205c <__aeabi_dsub+0x2f4>
 80021d2:	4642      	mov	r2, r8
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <__aeabi_dsub+0x6e8>)
 80021d6:	0861      	lsrs	r1, r4, #1
 80021d8:	401a      	ands	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	2201      	movs	r2, #1
 80021de:	4014      	ands	r4, r2
 80021e0:	430c      	orrs	r4, r1
 80021e2:	07da      	lsls	r2, r3, #31
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	4698      	mov	r8, r3
 80021e8:	4314      	orrs	r4, r2
 80021ea:	e641      	b.n	8001e70 <__aeabi_dsub+0x108>
 80021ec:	001a      	movs	r2, r3
 80021ee:	3e1f      	subs	r6, #31
 80021f0:	40f2      	lsrs	r2, r6
 80021f2:	0016      	movs	r6, r2
 80021f4:	2920      	cmp	r1, #32
 80021f6:	d003      	beq.n	8002200 <__aeabi_dsub+0x498>
 80021f8:	2240      	movs	r2, #64	; 0x40
 80021fa:	1a51      	subs	r1, r2, r1
 80021fc:	408b      	lsls	r3, r1
 80021fe:	431c      	orrs	r4, r3
 8002200:	1e62      	subs	r2, r4, #1
 8002202:	4194      	sbcs	r4, r2
 8002204:	2300      	movs	r3, #0
 8002206:	4334      	orrs	r4, r6
 8002208:	4698      	mov	r8, r3
 800220a:	2600      	movs	r6, #0
 800220c:	e71d      	b.n	800204a <__aeabi_dsub+0x2e2>
 800220e:	000c      	movs	r4, r1
 8002210:	3a20      	subs	r2, #32
 8002212:	40d4      	lsrs	r4, r2
 8002214:	0022      	movs	r2, r4
 8002216:	4664      	mov	r4, ip
 8002218:	2c20      	cmp	r4, #32
 800221a:	d004      	beq.n	8002226 <__aeabi_dsub+0x4be>
 800221c:	2740      	movs	r7, #64	; 0x40
 800221e:	1b3f      	subs	r7, r7, r4
 8002220:	40b9      	lsls	r1, r7
 8002222:	4308      	orrs	r0, r1
 8002224:	4680      	mov	r8, r0
 8002226:	4644      	mov	r4, r8
 8002228:	1e61      	subs	r1, r4, #1
 800222a:	418c      	sbcs	r4, r1
 800222c:	4322      	orrs	r2, r4
 800222e:	e5e9      	b.n	8001e04 <__aeabi_dsub+0x9c>
 8002230:	464c      	mov	r4, r9
 8002232:	4323      	orrs	r3, r4
 8002234:	001c      	movs	r4, r3
 8002236:	1e63      	subs	r3, r4, #1
 8002238:	419c      	sbcs	r4, r3
 800223a:	1b04      	subs	r4, r0, r4
 800223c:	42a0      	cmp	r0, r4
 800223e:	419b      	sbcs	r3, r3
 8002240:	425b      	negs	r3, r3
 8002242:	1acb      	subs	r3, r1, r3
 8002244:	4698      	mov	r8, r3
 8002246:	465d      	mov	r5, fp
 8002248:	0016      	movs	r6, r2
 800224a:	e5e2      	b.n	8001e12 <__aeabi_dsub+0xaa>
 800224c:	464e      	mov	r6, r9
 800224e:	431e      	orrs	r6, r3
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x4ec>
 8002252:	e0ae      	b.n	80023b2 <__aeabi_dsub+0x64a>
 8002254:	1e66      	subs	r6, r4, #1
 8002256:	2c01      	cmp	r4, #1
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x4f4>
 800225a:	e0fd      	b.n	8002458 <__aeabi_dsub+0x6f0>
 800225c:	4f7b      	ldr	r7, [pc, #492]	; (800244c <__aeabi_dsub+0x6e4>)
 800225e:	42bc      	cmp	r4, r7
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x4fc>
 8002262:	e107      	b.n	8002474 <__aeabi_dsub+0x70c>
 8002264:	46b4      	mov	ip, r6
 8002266:	e69b      	b.n	8001fa0 <__aeabi_dsub+0x238>
 8002268:	4664      	mov	r4, ip
 800226a:	2220      	movs	r2, #32
 800226c:	1b12      	subs	r2, r2, r4
 800226e:	000c      	movs	r4, r1
 8002270:	4094      	lsls	r4, r2
 8002272:	0007      	movs	r7, r0
 8002274:	4090      	lsls	r0, r2
 8002276:	46a0      	mov	r8, r4
 8002278:	4664      	mov	r4, ip
 800227a:	1e42      	subs	r2, r0, #1
 800227c:	4190      	sbcs	r0, r2
 800227e:	4662      	mov	r2, ip
 8002280:	40e7      	lsrs	r7, r4
 8002282:	4644      	mov	r4, r8
 8002284:	40d1      	lsrs	r1, r2
 8002286:	433c      	orrs	r4, r7
 8002288:	4304      	orrs	r4, r0
 800228a:	185b      	adds	r3, r3, r1
 800228c:	e6f3      	b.n	8002076 <__aeabi_dsub+0x30e>
 800228e:	4c6f      	ldr	r4, [pc, #444]	; (800244c <__aeabi_dsub+0x6e4>)
 8002290:	42a2      	cmp	r2, r4
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x52e>
 8002294:	e0d5      	b.n	8002442 <__aeabi_dsub+0x6da>
 8002296:	4448      	add	r0, r9
 8002298:	185b      	adds	r3, r3, r1
 800229a:	4548      	cmp	r0, r9
 800229c:	4189      	sbcs	r1, r1
 800229e:	4249      	negs	r1, r1
 80022a0:	185b      	adds	r3, r3, r1
 80022a2:	07dc      	lsls	r4, r3, #31
 80022a4:	0840      	lsrs	r0, r0, #1
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	4698      	mov	r8, r3
 80022aa:	0016      	movs	r6, r2
 80022ac:	4304      	orrs	r4, r0
 80022ae:	e6cc      	b.n	800204a <__aeabi_dsub+0x2e2>
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d000      	beq.n	80022b6 <__aeabi_dsub+0x54e>
 80022b4:	e082      	b.n	80023bc <__aeabi_dsub+0x654>
 80022b6:	000a      	movs	r2, r1
 80022b8:	4302      	orrs	r2, r0
 80022ba:	d140      	bne.n	800233e <__aeabi_dsub+0x5d6>
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	2500      	movs	r5, #0
 80022c0:	031b      	lsls	r3, r3, #12
 80022c2:	e713      	b.n	80020ec <__aeabi_dsub+0x384>
 80022c4:	074b      	lsls	r3, r1, #29
 80022c6:	08c2      	lsrs	r2, r0, #3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	465d      	mov	r5, fp
 80022cc:	08cb      	lsrs	r3, r1, #3
 80022ce:	e6c5      	b.n	800205c <__aeabi_dsub+0x2f4>
 80022d0:	464a      	mov	r2, r9
 80022d2:	1a84      	subs	r4, r0, r2
 80022d4:	42a0      	cmp	r0, r4
 80022d6:	4192      	sbcs	r2, r2
 80022d8:	1acb      	subs	r3, r1, r3
 80022da:	4252      	negs	r2, r2
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	4698      	mov	r8, r3
 80022e0:	465d      	mov	r5, fp
 80022e2:	e59e      	b.n	8001e22 <__aeabi_dsub+0xba>
 80022e4:	464a      	mov	r2, r9
 80022e6:	0759      	lsls	r1, r3, #29
 80022e8:	08d2      	lsrs	r2, r2, #3
 80022ea:	430a      	orrs	r2, r1
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	e6f9      	b.n	80020e4 <__aeabi_dsub+0x37c>
 80022f0:	464a      	mov	r2, r9
 80022f2:	1a14      	subs	r4, r2, r0
 80022f4:	45a1      	cmp	r9, r4
 80022f6:	4192      	sbcs	r2, r2
 80022f8:	1a5b      	subs	r3, r3, r1
 80022fa:	4252      	negs	r2, r2
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	4698      	mov	r8, r3
 8002300:	2601      	movs	r6, #1
 8002302:	e586      	b.n	8001e12 <__aeabi_dsub+0xaa>
 8002304:	464a      	mov	r2, r9
 8002306:	0759      	lsls	r1, r3, #29
 8002308:	08d2      	lsrs	r2, r2, #3
 800230a:	430a      	orrs	r2, r1
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	e6a5      	b.n	800205c <__aeabi_dsub+0x2f4>
 8002310:	464c      	mov	r4, r9
 8002312:	4323      	orrs	r3, r4
 8002314:	001c      	movs	r4, r3
 8002316:	1e63      	subs	r3, r4, #1
 8002318:	419c      	sbcs	r4, r3
 800231a:	e65b      	b.n	8001fd4 <__aeabi_dsub+0x26c>
 800231c:	4665      	mov	r5, ip
 800231e:	001e      	movs	r6, r3
 8002320:	3d20      	subs	r5, #32
 8002322:	40ee      	lsrs	r6, r5
 8002324:	2c20      	cmp	r4, #32
 8002326:	d005      	beq.n	8002334 <__aeabi_dsub+0x5cc>
 8002328:	2540      	movs	r5, #64	; 0x40
 800232a:	1b2d      	subs	r5, r5, r4
 800232c:	40ab      	lsls	r3, r5
 800232e:	464c      	mov	r4, r9
 8002330:	431c      	orrs	r4, r3
 8002332:	46a2      	mov	sl, r4
 8002334:	4654      	mov	r4, sl
 8002336:	1e63      	subs	r3, r4, #1
 8002338:	419c      	sbcs	r4, r3
 800233a:	4334      	orrs	r4, r6
 800233c:	e77d      	b.n	800223a <__aeabi_dsub+0x4d2>
 800233e:	074b      	lsls	r3, r1, #29
 8002340:	08c2      	lsrs	r2, r0, #3
 8002342:	431a      	orrs	r2, r3
 8002344:	465d      	mov	r5, fp
 8002346:	08cb      	lsrs	r3, r1, #3
 8002348:	e6cc      	b.n	80020e4 <__aeabi_dsub+0x37c>
 800234a:	000a      	movs	r2, r1
 800234c:	4302      	orrs	r2, r0
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x5ea>
 8002350:	e736      	b.n	80021c0 <__aeabi_dsub+0x458>
 8002352:	074b      	lsls	r3, r1, #29
 8002354:	08c2      	lsrs	r2, r0, #3
 8002356:	431a      	orrs	r2, r3
 8002358:	465d      	mov	r5, fp
 800235a:	08cb      	lsrs	r3, r1, #3
 800235c:	e681      	b.n	8002062 <__aeabi_dsub+0x2fa>
 800235e:	464a      	mov	r2, r9
 8002360:	1a84      	subs	r4, r0, r2
 8002362:	42a0      	cmp	r0, r4
 8002364:	4192      	sbcs	r2, r2
 8002366:	1acb      	subs	r3, r1, r3
 8002368:	4252      	negs	r2, r2
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	4698      	mov	r8, r3
 800236e:	465d      	mov	r5, fp
 8002370:	2601      	movs	r6, #1
 8002372:	e54e      	b.n	8001e12 <__aeabi_dsub+0xaa>
 8002374:	074b      	lsls	r3, r1, #29
 8002376:	08c2      	lsrs	r2, r0, #3
 8002378:	431a      	orrs	r2, r3
 800237a:	08cb      	lsrs	r3, r1, #3
 800237c:	e6b2      	b.n	80020e4 <__aeabi_dsub+0x37c>
 800237e:	464a      	mov	r2, r9
 8002380:	1a14      	subs	r4, r2, r0
 8002382:	45a1      	cmp	r9, r4
 8002384:	4192      	sbcs	r2, r2
 8002386:	1a5f      	subs	r7, r3, r1
 8002388:	4252      	negs	r2, r2
 800238a:	1aba      	subs	r2, r7, r2
 800238c:	4690      	mov	r8, r2
 800238e:	0212      	lsls	r2, r2, #8
 8002390:	d56b      	bpl.n	800246a <__aeabi_dsub+0x702>
 8002392:	464a      	mov	r2, r9
 8002394:	1a84      	subs	r4, r0, r2
 8002396:	42a0      	cmp	r0, r4
 8002398:	4192      	sbcs	r2, r2
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	4252      	negs	r2, r2
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	4698      	mov	r8, r3
 80023a2:	465d      	mov	r5, fp
 80023a4:	e564      	b.n	8001e70 <__aeabi_dsub+0x108>
 80023a6:	074b      	lsls	r3, r1, #29
 80023a8:	08c2      	lsrs	r2, r0, #3
 80023aa:	431a      	orrs	r2, r3
 80023ac:	465d      	mov	r5, fp
 80023ae:	08cb      	lsrs	r3, r1, #3
 80023b0:	e698      	b.n	80020e4 <__aeabi_dsub+0x37c>
 80023b2:	074b      	lsls	r3, r1, #29
 80023b4:	08c2      	lsrs	r2, r0, #3
 80023b6:	431a      	orrs	r2, r3
 80023b8:	08cb      	lsrs	r3, r1, #3
 80023ba:	e64f      	b.n	800205c <__aeabi_dsub+0x2f4>
 80023bc:	000a      	movs	r2, r1
 80023be:	4302      	orrs	r2, r0
 80023c0:	d090      	beq.n	80022e4 <__aeabi_dsub+0x57c>
 80023c2:	464a      	mov	r2, r9
 80023c4:	075c      	lsls	r4, r3, #29
 80023c6:	08d2      	lsrs	r2, r2, #3
 80023c8:	4314      	orrs	r4, r2
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	0312      	lsls	r2, r2, #12
 80023d0:	4213      	tst	r3, r2
 80023d2:	d008      	beq.n	80023e6 <__aeabi_dsub+0x67e>
 80023d4:	08ce      	lsrs	r6, r1, #3
 80023d6:	4216      	tst	r6, r2
 80023d8:	d105      	bne.n	80023e6 <__aeabi_dsub+0x67e>
 80023da:	08c0      	lsrs	r0, r0, #3
 80023dc:	0749      	lsls	r1, r1, #29
 80023de:	4308      	orrs	r0, r1
 80023e0:	0004      	movs	r4, r0
 80023e2:	465d      	mov	r5, fp
 80023e4:	0033      	movs	r3, r6
 80023e6:	0f61      	lsrs	r1, r4, #29
 80023e8:	00e2      	lsls	r2, r4, #3
 80023ea:	0749      	lsls	r1, r1, #29
 80023ec:	08d2      	lsrs	r2, r2, #3
 80023ee:	430a      	orrs	r2, r1
 80023f0:	e678      	b.n	80020e4 <__aeabi_dsub+0x37c>
 80023f2:	074b      	lsls	r3, r1, #29
 80023f4:	08c2      	lsrs	r2, r0, #3
 80023f6:	431a      	orrs	r2, r3
 80023f8:	08cb      	lsrs	r3, r1, #3
 80023fa:	e632      	b.n	8002062 <__aeabi_dsub+0x2fa>
 80023fc:	4448      	add	r0, r9
 80023fe:	185b      	adds	r3, r3, r1
 8002400:	4548      	cmp	r0, r9
 8002402:	4192      	sbcs	r2, r2
 8002404:	4698      	mov	r8, r3
 8002406:	4252      	negs	r2, r2
 8002408:	4490      	add	r8, r2
 800240a:	4643      	mov	r3, r8
 800240c:	0004      	movs	r4, r0
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	d400      	bmi.n	8002414 <__aeabi_dsub+0x6ac>
 8002412:	e61a      	b.n	800204a <__aeabi_dsub+0x2e2>
 8002414:	4642      	mov	r2, r8
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <__aeabi_dsub+0x6e8>)
 8002418:	2601      	movs	r6, #1
 800241a:	401a      	ands	r2, r3
 800241c:	4690      	mov	r8, r2
 800241e:	e614      	b.n	800204a <__aeabi_dsub+0x2e2>
 8002420:	4666      	mov	r6, ip
 8002422:	001f      	movs	r7, r3
 8002424:	3e20      	subs	r6, #32
 8002426:	40f7      	lsrs	r7, r6
 8002428:	2c20      	cmp	r4, #32
 800242a:	d005      	beq.n	8002438 <__aeabi_dsub+0x6d0>
 800242c:	2640      	movs	r6, #64	; 0x40
 800242e:	1b36      	subs	r6, r6, r4
 8002430:	40b3      	lsls	r3, r6
 8002432:	464c      	mov	r4, r9
 8002434:	431c      	orrs	r4, r3
 8002436:	46a2      	mov	sl, r4
 8002438:	4654      	mov	r4, sl
 800243a:	1e63      	subs	r3, r4, #1
 800243c:	419c      	sbcs	r4, r3
 800243e:	433c      	orrs	r4, r7
 8002440:	e5c8      	b.n	8001fd4 <__aeabi_dsub+0x26c>
 8002442:	0011      	movs	r1, r2
 8002444:	2300      	movs	r3, #0
 8002446:	2200      	movs	r2, #0
 8002448:	e532      	b.n	8001eb0 <__aeabi_dsub+0x148>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	000007ff 	.word	0x000007ff
 8002450:	ff7fffff 	.word	0xff7fffff
 8002454:	000007fe 	.word	0x000007fe
 8002458:	464a      	mov	r2, r9
 800245a:	1814      	adds	r4, r2, r0
 800245c:	4284      	cmp	r4, r0
 800245e:	4192      	sbcs	r2, r2
 8002460:	185b      	adds	r3, r3, r1
 8002462:	4698      	mov	r8, r3
 8002464:	4252      	negs	r2, r2
 8002466:	4490      	add	r8, r2
 8002468:	e5e9      	b.n	800203e <__aeabi_dsub+0x2d6>
 800246a:	4642      	mov	r2, r8
 800246c:	4322      	orrs	r2, r4
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x70a>
 8002470:	e6a6      	b.n	80021c0 <__aeabi_dsub+0x458>
 8002472:	e5ea      	b.n	800204a <__aeabi_dsub+0x2e2>
 8002474:	074b      	lsls	r3, r1, #29
 8002476:	08c2      	lsrs	r2, r0, #3
 8002478:	431a      	orrs	r2, r3
 800247a:	08cb      	lsrs	r3, r1, #3
 800247c:	e632      	b.n	80020e4 <__aeabi_dsub+0x37c>
 800247e:	2200      	movs	r2, #0
 8002480:	4901      	ldr	r1, [pc, #4]	; (8002488 <__aeabi_dsub+0x720>)
 8002482:	0013      	movs	r3, r2
 8002484:	e514      	b.n	8001eb0 <__aeabi_dsub+0x148>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	000007ff 	.word	0x000007ff

0800248c <__aeabi_dcmpun>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	0005      	movs	r5, r0
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <__aeabi_dcmpun+0x38>)
 8002492:	030c      	lsls	r4, r1, #12
 8002494:	0016      	movs	r6, r2
 8002496:	0049      	lsls	r1, r1, #1
 8002498:	031a      	lsls	r2, r3, #12
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	0b24      	lsrs	r4, r4, #12
 800249e:	0d49      	lsrs	r1, r1, #21
 80024a0:	0b12      	lsrs	r2, r2, #12
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	4281      	cmp	r1, r0
 80024a6:	d008      	beq.n	80024ba <__aeabi_dcmpun+0x2e>
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__aeabi_dcmpun+0x38>)
 80024aa:	2000      	movs	r0, #0
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d103      	bne.n	80024b8 <__aeabi_dcmpun+0x2c>
 80024b0:	4332      	orrs	r2, r6
 80024b2:	0010      	movs	r0, r2
 80024b4:	1e42      	subs	r2, r0, #1
 80024b6:	4190      	sbcs	r0, r2
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	2001      	movs	r0, #1
 80024bc:	432c      	orrs	r4, r5
 80024be:	d1fb      	bne.n	80024b8 <__aeabi_dcmpun+0x2c>
 80024c0:	e7f2      	b.n	80024a8 <__aeabi_dcmpun+0x1c>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	000007ff 	.word	0x000007ff

080024c8 <__aeabi_d2iz>:
 80024c8:	000a      	movs	r2, r1
 80024ca:	b530      	push	{r4, r5, lr}
 80024cc:	4c13      	ldr	r4, [pc, #76]	; (800251c <__aeabi_d2iz+0x54>)
 80024ce:	0053      	lsls	r3, r2, #1
 80024d0:	0309      	lsls	r1, r1, #12
 80024d2:	0005      	movs	r5, r0
 80024d4:	0b09      	lsrs	r1, r1, #12
 80024d6:	2000      	movs	r0, #0
 80024d8:	0d5b      	lsrs	r3, r3, #21
 80024da:	0fd2      	lsrs	r2, r2, #31
 80024dc:	42a3      	cmp	r3, r4
 80024de:	dd04      	ble.n	80024ea <__aeabi_d2iz+0x22>
 80024e0:	480f      	ldr	r0, [pc, #60]	; (8002520 <__aeabi_d2iz+0x58>)
 80024e2:	4283      	cmp	r3, r0
 80024e4:	dd02      	ble.n	80024ec <__aeabi_d2iz+0x24>
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <__aeabi_d2iz+0x5c>)
 80024e8:	18d0      	adds	r0, r2, r3
 80024ea:	bd30      	pop	{r4, r5, pc}
 80024ec:	2080      	movs	r0, #128	; 0x80
 80024ee:	0340      	lsls	r0, r0, #13
 80024f0:	4301      	orrs	r1, r0
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <__aeabi_d2iz+0x60>)
 80024f4:	1ac0      	subs	r0, r0, r3
 80024f6:	281f      	cmp	r0, #31
 80024f8:	dd08      	ble.n	800250c <__aeabi_d2iz+0x44>
 80024fa:	480c      	ldr	r0, [pc, #48]	; (800252c <__aeabi_d2iz+0x64>)
 80024fc:	1ac3      	subs	r3, r0, r3
 80024fe:	40d9      	lsrs	r1, r3
 8002500:	000b      	movs	r3, r1
 8002502:	4258      	negs	r0, r3
 8002504:	2a00      	cmp	r2, #0
 8002506:	d1f0      	bne.n	80024ea <__aeabi_d2iz+0x22>
 8002508:	0018      	movs	r0, r3
 800250a:	e7ee      	b.n	80024ea <__aeabi_d2iz+0x22>
 800250c:	4c08      	ldr	r4, [pc, #32]	; (8002530 <__aeabi_d2iz+0x68>)
 800250e:	40c5      	lsrs	r5, r0
 8002510:	46a4      	mov	ip, r4
 8002512:	4463      	add	r3, ip
 8002514:	4099      	lsls	r1, r3
 8002516:	000b      	movs	r3, r1
 8002518:	432b      	orrs	r3, r5
 800251a:	e7f2      	b.n	8002502 <__aeabi_d2iz+0x3a>
 800251c:	000003fe 	.word	0x000003fe
 8002520:	0000041d 	.word	0x0000041d
 8002524:	7fffffff 	.word	0x7fffffff
 8002528:	00000433 	.word	0x00000433
 800252c:	00000413 	.word	0x00000413
 8002530:	fffffbed 	.word	0xfffffbed

08002534 <__aeabi_i2d>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2800      	cmp	r0, #0
 8002538:	d016      	beq.n	8002568 <__aeabi_i2d+0x34>
 800253a:	17c3      	asrs	r3, r0, #31
 800253c:	18c5      	adds	r5, r0, r3
 800253e:	405d      	eors	r5, r3
 8002540:	0fc4      	lsrs	r4, r0, #31
 8002542:	0028      	movs	r0, r5
 8002544:	f000 f91c 	bl	8002780 <__clzsi2>
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <__aeabi_i2d+0x5c>)
 800254a:	1a12      	subs	r2, r2, r0
 800254c:	280a      	cmp	r0, #10
 800254e:	dc16      	bgt.n	800257e <__aeabi_i2d+0x4a>
 8002550:	0003      	movs	r3, r0
 8002552:	002e      	movs	r6, r5
 8002554:	3315      	adds	r3, #21
 8002556:	409e      	lsls	r6, r3
 8002558:	230b      	movs	r3, #11
 800255a:	1a18      	subs	r0, r3, r0
 800255c:	40c5      	lsrs	r5, r0
 800255e:	0553      	lsls	r3, r2, #21
 8002560:	032d      	lsls	r5, r5, #12
 8002562:	0b2d      	lsrs	r5, r5, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e003      	b.n	8002570 <__aeabi_i2d+0x3c>
 8002568:	2400      	movs	r4, #0
 800256a:	2300      	movs	r3, #0
 800256c:	2500      	movs	r5, #0
 800256e:	2600      	movs	r6, #0
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	432b      	orrs	r3, r5
 8002574:	07e4      	lsls	r4, r4, #31
 8002576:	4323      	orrs	r3, r4
 8002578:	0030      	movs	r0, r6
 800257a:	0019      	movs	r1, r3
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	380b      	subs	r0, #11
 8002580:	4085      	lsls	r5, r0
 8002582:	0553      	lsls	r3, r2, #21
 8002584:	032d      	lsls	r5, r5, #12
 8002586:	2600      	movs	r6, #0
 8002588:	0b2d      	lsrs	r5, r5, #12
 800258a:	0d5b      	lsrs	r3, r3, #21
 800258c:	e7f0      	b.n	8002570 <__aeabi_i2d+0x3c>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	0000041e 	.word	0x0000041e

08002594 <__aeabi_ui2d>:
 8002594:	b510      	push	{r4, lr}
 8002596:	1e04      	subs	r4, r0, #0
 8002598:	d010      	beq.n	80025bc <__aeabi_ui2d+0x28>
 800259a:	f000 f8f1 	bl	8002780 <__clzsi2>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <__aeabi_ui2d+0x48>)
 80025a0:	1a1b      	subs	r3, r3, r0
 80025a2:	280a      	cmp	r0, #10
 80025a4:	dc11      	bgt.n	80025ca <__aeabi_ui2d+0x36>
 80025a6:	220b      	movs	r2, #11
 80025a8:	0021      	movs	r1, r4
 80025aa:	1a12      	subs	r2, r2, r0
 80025ac:	40d1      	lsrs	r1, r2
 80025ae:	3015      	adds	r0, #21
 80025b0:	030a      	lsls	r2, r1, #12
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4084      	lsls	r4, r0
 80025b6:	0b12      	lsrs	r2, r2, #12
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	e001      	b.n	80025c0 <__aeabi_ui2d+0x2c>
 80025bc:	2300      	movs	r3, #0
 80025be:	2200      	movs	r2, #0
 80025c0:	051b      	lsls	r3, r3, #20
 80025c2:	4313      	orrs	r3, r2
 80025c4:	0020      	movs	r0, r4
 80025c6:	0019      	movs	r1, r3
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	0022      	movs	r2, r4
 80025cc:	380b      	subs	r0, #11
 80025ce:	4082      	lsls	r2, r0
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	0312      	lsls	r2, r2, #12
 80025d4:	2400      	movs	r4, #0
 80025d6:	0b12      	lsrs	r2, r2, #12
 80025d8:	0d5b      	lsrs	r3, r3, #21
 80025da:	e7f1      	b.n	80025c0 <__aeabi_ui2d+0x2c>
 80025dc:	0000041e 	.word	0x0000041e

080025e0 <__aeabi_f2d>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	0043      	lsls	r3, r0, #1
 80025e4:	0246      	lsls	r6, r0, #9
 80025e6:	0fc4      	lsrs	r4, r0, #31
 80025e8:	20fe      	movs	r0, #254	; 0xfe
 80025ea:	0e1b      	lsrs	r3, r3, #24
 80025ec:	1c59      	adds	r1, r3, #1
 80025ee:	0a75      	lsrs	r5, r6, #9
 80025f0:	4208      	tst	r0, r1
 80025f2:	d00c      	beq.n	800260e <__aeabi_f2d+0x2e>
 80025f4:	22e0      	movs	r2, #224	; 0xe0
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4694      	mov	ip, r2
 80025fa:	076d      	lsls	r5, r5, #29
 80025fc:	0b36      	lsrs	r6, r6, #12
 80025fe:	4463      	add	r3, ip
 8002600:	051b      	lsls	r3, r3, #20
 8002602:	4333      	orrs	r3, r6
 8002604:	07e4      	lsls	r4, r4, #31
 8002606:	4323      	orrs	r3, r4
 8002608:	0028      	movs	r0, r5
 800260a:	0019      	movs	r1, r3
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <__aeabi_f2d+0x5c>
 8002612:	2d00      	cmp	r5, #0
 8002614:	d01b      	beq.n	800264e <__aeabi_f2d+0x6e>
 8002616:	0028      	movs	r0, r5
 8002618:	f000 f8b2 	bl	8002780 <__clzsi2>
 800261c:	280a      	cmp	r0, #10
 800261e:	dc1c      	bgt.n	800265a <__aeabi_f2d+0x7a>
 8002620:	230b      	movs	r3, #11
 8002622:	002a      	movs	r2, r5
 8002624:	1a1b      	subs	r3, r3, r0
 8002626:	40da      	lsrs	r2, r3
 8002628:	0003      	movs	r3, r0
 800262a:	3315      	adds	r3, #21
 800262c:	409d      	lsls	r5, r3
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <__aeabi_f2d+0x88>)
 8002630:	0312      	lsls	r2, r2, #12
 8002632:	1a1b      	subs	r3, r3, r0
 8002634:	055b      	lsls	r3, r3, #21
 8002636:	0b16      	lsrs	r6, r2, #12
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	e7e1      	b.n	8002600 <__aeabi_f2d+0x20>
 800263c:	2d00      	cmp	r5, #0
 800263e:	d009      	beq.n	8002654 <__aeabi_f2d+0x74>
 8002640:	0b32      	lsrs	r2, r6, #12
 8002642:	2680      	movs	r6, #128	; 0x80
 8002644:	0336      	lsls	r6, r6, #12
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <__aeabi_f2d+0x8c>)
 8002648:	076d      	lsls	r5, r5, #29
 800264a:	4316      	orrs	r6, r2
 800264c:	e7d8      	b.n	8002600 <__aeabi_f2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2600      	movs	r6, #0
 8002652:	e7d5      	b.n	8002600 <__aeabi_f2d+0x20>
 8002654:	2600      	movs	r6, #0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <__aeabi_f2d+0x8c>)
 8002658:	e7d2      	b.n	8002600 <__aeabi_f2d+0x20>
 800265a:	0003      	movs	r3, r0
 800265c:	002a      	movs	r2, r5
 800265e:	3b0b      	subs	r3, #11
 8002660:	409a      	lsls	r2, r3
 8002662:	2500      	movs	r5, #0
 8002664:	e7e3      	b.n	800262e <__aeabi_f2d+0x4e>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	00000389 	.word	0x00000389
 800266c:	000007ff 	.word	0x000007ff

08002670 <__aeabi_d2f>:
 8002670:	0002      	movs	r2, r0
 8002672:	004b      	lsls	r3, r1, #1
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	0308      	lsls	r0, r1, #12
 8002678:	0d5b      	lsrs	r3, r3, #21
 800267a:	4e3d      	ldr	r6, [pc, #244]	; (8002770 <__aeabi_d2f+0x100>)
 800267c:	0fcc      	lsrs	r4, r1, #31
 800267e:	0a40      	lsrs	r0, r0, #9
 8002680:	0f51      	lsrs	r1, r2, #29
 8002682:	1c5f      	adds	r7, r3, #1
 8002684:	4308      	orrs	r0, r1
 8002686:	00d5      	lsls	r5, r2, #3
 8002688:	4237      	tst	r7, r6
 800268a:	d00a      	beq.n	80026a2 <__aeabi_d2f+0x32>
 800268c:	4939      	ldr	r1, [pc, #228]	; (8002774 <__aeabi_d2f+0x104>)
 800268e:	185e      	adds	r6, r3, r1
 8002690:	2efe      	cmp	r6, #254	; 0xfe
 8002692:	dd16      	ble.n	80026c2 <__aeabi_d2f+0x52>
 8002694:	23ff      	movs	r3, #255	; 0xff
 8002696:	2100      	movs	r1, #0
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	430b      	orrs	r3, r1
 800269c:	07e0      	lsls	r0, r4, #31
 800269e:	4318      	orrs	r0, r3
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <__aeabi_d2f+0x44>
 80026a6:	4328      	orrs	r0, r5
 80026a8:	d027      	beq.n	80026fa <__aeabi_d2f+0x8a>
 80026aa:	2105      	movs	r1, #5
 80026ac:	0189      	lsls	r1, r1, #6
 80026ae:	0a49      	lsrs	r1, r1, #9
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e7f1      	b.n	8002698 <__aeabi_d2f+0x28>
 80026b4:	4305      	orrs	r5, r0
 80026b6:	d0ed      	beq.n	8002694 <__aeabi_d2f+0x24>
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	03c9      	lsls	r1, r1, #15
 80026bc:	23ff      	movs	r3, #255	; 0xff
 80026be:	4301      	orrs	r1, r0
 80026c0:	e7ea      	b.n	8002698 <__aeabi_d2f+0x28>
 80026c2:	2e00      	cmp	r6, #0
 80026c4:	dd1c      	ble.n	8002700 <__aeabi_d2f+0x90>
 80026c6:	0192      	lsls	r2, r2, #6
 80026c8:	0011      	movs	r1, r2
 80026ca:	1e4a      	subs	r2, r1, #1
 80026cc:	4191      	sbcs	r1, r2
 80026ce:	00c0      	lsls	r0, r0, #3
 80026d0:	0f6d      	lsrs	r5, r5, #29
 80026d2:	4301      	orrs	r1, r0
 80026d4:	4329      	orrs	r1, r5
 80026d6:	074b      	lsls	r3, r1, #29
 80026d8:	d048      	beq.n	800276c <__aeabi_d2f+0xfc>
 80026da:	230f      	movs	r3, #15
 80026dc:	400b      	ands	r3, r1
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d000      	beq.n	80026e4 <__aeabi_d2f+0x74>
 80026e2:	3104      	adds	r1, #4
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	04db      	lsls	r3, r3, #19
 80026e8:	400b      	ands	r3, r1
 80026ea:	d03f      	beq.n	800276c <__aeabi_d2f+0xfc>
 80026ec:	1c72      	adds	r2, r6, #1
 80026ee:	2efe      	cmp	r6, #254	; 0xfe
 80026f0:	d0d0      	beq.n	8002694 <__aeabi_d2f+0x24>
 80026f2:	0189      	lsls	r1, r1, #6
 80026f4:	0a49      	lsrs	r1, r1, #9
 80026f6:	b2d3      	uxtb	r3, r2
 80026f8:	e7ce      	b.n	8002698 <__aeabi_d2f+0x28>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	e7cb      	b.n	8002698 <__aeabi_d2f+0x28>
 8002700:	0032      	movs	r2, r6
 8002702:	3217      	adds	r2, #23
 8002704:	db22      	blt.n	800274c <__aeabi_d2f+0xdc>
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	221e      	movs	r2, #30
 800270a:	0409      	lsls	r1, r1, #16
 800270c:	4308      	orrs	r0, r1
 800270e:	1b92      	subs	r2, r2, r6
 8002710:	2a1f      	cmp	r2, #31
 8002712:	dd1d      	ble.n	8002750 <__aeabi_d2f+0xe0>
 8002714:	2102      	movs	r1, #2
 8002716:	4249      	negs	r1, r1
 8002718:	1b8e      	subs	r6, r1, r6
 800271a:	0001      	movs	r1, r0
 800271c:	40f1      	lsrs	r1, r6
 800271e:	000e      	movs	r6, r1
 8002720:	2a20      	cmp	r2, #32
 8002722:	d004      	beq.n	800272e <__aeabi_d2f+0xbe>
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <__aeabi_d2f+0x108>)
 8002726:	4694      	mov	ip, r2
 8002728:	4463      	add	r3, ip
 800272a:	4098      	lsls	r0, r3
 800272c:	4305      	orrs	r5, r0
 800272e:	0029      	movs	r1, r5
 8002730:	1e4d      	subs	r5, r1, #1
 8002732:	41a9      	sbcs	r1, r5
 8002734:	4331      	orrs	r1, r6
 8002736:	2600      	movs	r6, #0
 8002738:	074b      	lsls	r3, r1, #29
 800273a:	d1ce      	bne.n	80026da <__aeabi_d2f+0x6a>
 800273c:	2080      	movs	r0, #128	; 0x80
 800273e:	000b      	movs	r3, r1
 8002740:	04c0      	lsls	r0, r0, #19
 8002742:	2201      	movs	r2, #1
 8002744:	4003      	ands	r3, r0
 8002746:	4201      	tst	r1, r0
 8002748:	d1d3      	bne.n	80026f2 <__aeabi_d2f+0x82>
 800274a:	e7af      	b.n	80026ac <__aeabi_d2f+0x3c>
 800274c:	2300      	movs	r3, #0
 800274e:	e7ac      	b.n	80026aa <__aeabi_d2f+0x3a>
 8002750:	490a      	ldr	r1, [pc, #40]	; (800277c <__aeabi_d2f+0x10c>)
 8002752:	468c      	mov	ip, r1
 8002754:	0029      	movs	r1, r5
 8002756:	4463      	add	r3, ip
 8002758:	40d1      	lsrs	r1, r2
 800275a:	409d      	lsls	r5, r3
 800275c:	000a      	movs	r2, r1
 800275e:	0029      	movs	r1, r5
 8002760:	4098      	lsls	r0, r3
 8002762:	1e4d      	subs	r5, r1, #1
 8002764:	41a9      	sbcs	r1, r5
 8002766:	4301      	orrs	r1, r0
 8002768:	4311      	orrs	r1, r2
 800276a:	e7e4      	b.n	8002736 <__aeabi_d2f+0xc6>
 800276c:	0033      	movs	r3, r6
 800276e:	e79d      	b.n	80026ac <__aeabi_d2f+0x3c>
 8002770:	000007fe 	.word	0x000007fe
 8002774:	fffffc80 	.word	0xfffffc80
 8002778:	fffffca2 	.word	0xfffffca2
 800277c:	fffffc82 	.word	0xfffffc82

08002780 <__clzsi2>:
 8002780:	211c      	movs	r1, #28
 8002782:	2301      	movs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	4298      	cmp	r0, r3
 8002788:	d301      	bcc.n	800278e <__clzsi2+0xe>
 800278a:	0c00      	lsrs	r0, r0, #16
 800278c:	3910      	subs	r1, #16
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	4298      	cmp	r0, r3
 8002792:	d301      	bcc.n	8002798 <__clzsi2+0x18>
 8002794:	0a00      	lsrs	r0, r0, #8
 8002796:	3908      	subs	r1, #8
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	4298      	cmp	r0, r3
 800279c:	d301      	bcc.n	80027a2 <__clzsi2+0x22>
 800279e:	0900      	lsrs	r0, r0, #4
 80027a0:	3904      	subs	r1, #4
 80027a2:	a202      	add	r2, pc, #8	; (adr r2, 80027ac <__clzsi2+0x2c>)
 80027a4:	5c10      	ldrb	r0, [r2, r0]
 80027a6:	1840      	adds	r0, r0, r1
 80027a8:	4770      	bx	lr
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	02020304 	.word	0x02020304
 80027b0:	01010101 	.word	0x01010101
	...

080027bc <__clzdi2>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	2900      	cmp	r1, #0
 80027c0:	d103      	bne.n	80027ca <__clzdi2+0xe>
 80027c2:	f7ff ffdd 	bl	8002780 <__clzsi2>
 80027c6:	3020      	adds	r0, #32
 80027c8:	e002      	b.n	80027d0 <__clzdi2+0x14>
 80027ca:	1c08      	adds	r0, r1, #0
 80027cc:	f7ff ffd8 	bl	8002780 <__clzsi2>
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)

080027d4 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	0005      	movs	r5, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 80027d8:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 80027da:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <minArr+0xe>
		smallest = arr[0];
 80027e0:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <minArr+0x38>)
 80027e4:	781e      	ldrb	r6, [r3, #0]
 80027e6:	2e00      	cmp	r6, #0
 80027e8:	dd0e      	ble.n	8002808 <minArr+0x34>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2000      	movs	r0, #0
 80027ee:	e002      	b.n	80027f6 <minArr+0x22>
 80027f0:	3301      	adds	r3, #1
 80027f2:	42b3      	cmp	r3, r6
 80027f4:	da09      	bge.n	800280a <minArr+0x36>
		if ((arr[i] < smallest) && !Q[i]) {
 80027f6:	5cea      	ldrb	r2, [r5, r3]
 80027f8:	42a2      	cmp	r2, r4
 80027fa:	d2f9      	bcs.n	80027f0 <minArr+0x1c>
 80027fc:	5ccf      	ldrb	r7, [r1, r3]
 80027fe:	2f00      	cmp	r7, #0
 8002800:	d1f6      	bne.n	80027f0 <minArr+0x1c>
			smallest = arr[i];
			index = i;
 8002802:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 8002804:	0014      	movs	r4, r2
 8002806:	e7f3      	b.n	80027f0 <minArr+0x1c>
	for (int i=0 ; i<N ; i++) {
 8002808:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	2000001c 	.word	0x2000001c

08002810 <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 8002810:	b510      	push	{r4, lr}
 8002812:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <QnotEmpty+0x20>)
 8002816:	781c      	ldrb	r4, [r3, #0]
 8002818:	2c00      	cmp	r4, #0
 800281a:	dd07      	ble.n	800282c <QnotEmpty+0x1c>
 800281c:	2300      	movs	r3, #0
	char temp = 1;
 800281e:	2001      	movs	r0, #1
		temp &= Q[i];
 8002820:	5cca      	ldrb	r2, [r1, r3]
 8002822:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 8002824:	3301      	adds	r3, #1
 8002826:	42a3      	cmp	r3, r4
 8002828:	dbfa      	blt.n	8002820 <QnotEmpty+0x10>
	}	
	
	return temp;
}
 800282a:	bd10      	pop	{r4, pc}
	char temp = 1;
 800282c:	2001      	movs	r0, #1
 800282e:	e7fc      	b.n	800282a <QnotEmpty+0x1a>
 8002830:	2000001c 	.word	0x2000001c

08002834 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	46de      	mov	lr, fp
 8002838:	4657      	mov	r7, sl
 800283a:	464e      	mov	r6, r9
 800283c:	4645      	mov	r5, r8
 800283e:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f00e ff57 	bl	80116f4 <malloc>
 8002846:	4680      	mov	r8, r0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8002848:	2800      	cmp	r0, #0
 800284a:	d06c      	beq.n	8002926 <LoadROsnippets+0xf2>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 800284c:	4b38      	ldr	r3, [pc, #224]	; (8002930 <LoadROsnippets+0xfc>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2bfe      	cmp	r3, #254	; 0xfe
 8002852:	d16a      	bne.n	800292a <LoadROsnippets+0xf6>
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <LoadROsnippets+0x100>)
 8002856:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 8002858:	4c35      	ldr	r4, [pc, #212]	; (8002930 <LoadROsnippets+0xfc>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 800285a:	2301      	movs	r3, #1
 800285c:	4443      	add	r3, r8
 800285e:	469a      	mov	sl, r3
 8002860:	e026      	b.n	80028b0 <LoadROsnippets+0x7c>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8002862:	2500      	movs	r5, #0
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
			++currentAdd; ++i;
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8002864:	4643      	mov	r3, r8
 8002866:	195b      	adds	r3, r3, r5
 8002868:	3b01      	subs	r3, #1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <LoadROsnippets+0x40>
 8002870:	3501      	adds	r5, #1
 8002872:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 8002874:	0028      	movs	r0, r5
 8002876:	f00e ff3d 	bl	80116f4 <malloc>
 800287a:	465b      	mov	r3, fp
 800287c:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 800287e:	2800      	cmp	r0, #0
 8002880:	d03d      	beq.n	80028fe <LoadROsnippets+0xca>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 8002882:	002a      	movs	r2, r5
 8002884:	4641      	mov	r1, r8
 8002886:	f00f f96b 	bl	8011b60 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <LoadROsnippets+0x104>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <LoadROsnippets+0x104>)
 8002892:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8002894:	002a      	movs	r2, r5
 8002896:	2100      	movs	r1, #0
 8002898:	4640      	mov	r0, r8
 800289a:	f00f f96a 	bl	8011b72 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 800289e:	783b      	ldrb	r3, [r7, #0]
 80028a0:	2bfe      	cmp	r3, #254	; 0xfe
 80028a2:	d136      	bne.n	8002912 <LoadROsnippets+0xde>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 80028a4:	3bea      	subs	r3, #234	; 0xea
 80028a6:	469c      	mov	ip, r3
 80028a8:	44e1      	add	r9, ip
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <LoadROsnippets+0x108>)
 80028ac:	4599      	cmp	r9, r3
 80028ae:	d030      	beq.n	8002912 <LoadROsnippets+0xde>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80028b0:	0021      	movs	r1, r4
 80028b2:	3114      	adds	r1, #20
{
 80028b4:	0023      	movs	r3, r4
 80028b6:	4642      	mov	r2, r8
 80028b8:	1b16      	subs	r6, r2, r4
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	54f2      	strb	r2, [r6, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80028be:	3301      	adds	r3, #1
 80028c0:	428b      	cmp	r3, r1
 80028c2:	d1fa      	bne.n	80028ba <LoadROsnippets+0x86>
 80028c4:	3414      	adds	r4, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80028c6:	46cb      	mov	fp, r9
 80028c8:	2214      	movs	r2, #20
 80028ca:	4651      	mov	r1, sl
 80028cc:	4648      	mov	r0, r9
 80028ce:	f00f f947 	bl	8011b60 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80028d2:	2214      	movs	r2, #20
 80028d4:	2100      	movs	r1, #0
 80028d6:	4640      	mov	r0, r8
 80028d8:	f00f f94b 	bl	8011b72 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80028dc:	0027      	movs	r7, r4
 80028de:	7823      	ldrb	r3, [r4, #0]
 80028e0:	2bfd      	cmp	r3, #253	; 0xfd
 80028e2:	d8be      	bhi.n	8002862 <LoadROsnippets+0x2e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80028e4:	2500      	movs	r5, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 80028e6:	3e14      	subs	r6, #20
 80028e8:	5533      	strb	r3, [r6, r4]
			++currentAdd; ++i;
 80028ea:	3401      	adds	r4, #1
 80028ec:	3501      	adds	r5, #1
 80028ee:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 80028f0:	0027      	movs	r7, r4
 80028f2:	7823      	ldrb	r3, [r4, #0]
 80028f4:	2bfd      	cmp	r3, #253	; 0xfd
 80028f6:	d8b5      	bhi.n	8002864 <LoadROsnippets+0x30>
 80028f8:	2d32      	cmp	r5, #50	; 0x32
 80028fa:	d1f5      	bne.n	80028e8 <LoadROsnippets+0xb4>
 80028fc:	e7b2      	b.n	8002864 <LoadROsnippets+0x30>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 80028fe:	2214      	movs	r2, #20
 8002900:	2100      	movs	r1, #0
 8002902:	4658      	mov	r0, fp
 8002904:	f00f f935 	bl	8011b72 <memset>
			free(snipBuffer);			
 8002908:	4640      	mov	r0, r8
 800290a:	f00e fefd 	bl	8011708 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800290e:	200e      	movs	r0, #14
 8002910:	e003      	b.n	800291a <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 8002912:	4640      	mov	r0, r8
 8002914:	f00e fef8 	bl	8011708 <free>
	return BOS_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	bcf0      	pop	{r4, r5, r6, r7}
 800291c:	46bb      	mov	fp, r7
 800291e:	46b2      	mov	sl, r6
 8002920:	46a9      	mov	r9, r5
 8002922:	46a0      	mov	r8, r4
 8002924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8002926:	20fb      	movs	r0, #251	; 0xfb
 8002928:	e7f7      	b.n	800291a <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 800292a:	20ff      	movs	r0, #255	; 0xff
 800292c:	e7f5      	b.n	800291a <LoadROsnippets+0xe6>
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	0801dc00 	.word	0x0801dc00
 8002934:	2000661c 	.word	0x2000661c
 8002938:	20000ec7 	.word	0x20000ec7
 800293c:	20006680 	.word	0x20006680

08002940 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <SaveEEportsDir+0x3c>)
 8002944:	781d      	ldrb	r5, [r3, #0]
 8002946:	2d00      	cmp	r5, #0
 8002948:	d016      	beq.n	8002978 <SaveEEportsDir+0x38>
 800294a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800294c:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 800294e:	4f0c      	ldr	r7, [pc, #48]	; (8002980 <SaveEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 8002950:	001e      	movs	r6, r3
 8002952:	e008      	b.n	8002966 <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8002954:	1c60      	adds	r0, r4, #1
 8002956:	f004 fb5f 	bl	8007018 <EE_WriteVariable>
 800295a:	e009      	b.n	8002970 <SaveEEportsDir+0x30>
	for(uint8_t i=1 ; i<=N ; i++)
 800295c:	3401      	adds	r4, #1
 800295e:	b2e4      	uxtb	r4, r4
 8002960:	7833      	ldrb	r3, [r6, #0]
 8002962:	42a3      	cmp	r3, r4
 8002964:	d308      	bcc.n	8002978 <SaveEEportsDir+0x38>
		if (arrayPortsDir[i-1])
 8002966:	1e63      	subs	r3, r4, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	5bd9      	ldrh	r1, [r3, r7]
 800296c:	2900      	cmp	r1, #0
 800296e:	d1f1      	bne.n	8002954 <SaveEEportsDir+0x14>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002970:	2c19      	cmp	r4, #25
 8002972:	d9f3      	bls.n	800295c <SaveEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8002974:	250a      	movs	r5, #10
 8002976:	e7f1      	b.n	800295c <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 8002978:	0028      	movs	r0, r5
 800297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800297c:	2000001c 	.word	0x2000001c
 8002980:	20006a18 	.word	0x20006a18

08002984 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8002986:	2204      	movs	r2, #4
 8002988:	2100      	movs	r1, #0
 800298a:	4810      	ldr	r0, [pc, #64]	; (80029cc <ClearEEportsDir+0x48>)
 800298c:	f00f f8f1 	bl	8011b72 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <ClearEEportsDir+0x4c>)
 8002992:	781d      	ldrb	r5, [r3, #0]
 8002994:	2d00      	cmp	r5, #0
 8002996:	d016      	beq.n	80029c6 <ClearEEportsDir+0x42>
 8002998:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800299a:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 800299c:	4f0b      	ldr	r7, [pc, #44]	; (80029cc <ClearEEportsDir+0x48>)
	for(uint8_t i=1 ; i<=N ; i++)
 800299e:	001e      	movs	r6, r3
 80029a0:	e008      	b.n	80029b4 <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80029a2:	1c60      	adds	r0, r4, #1
 80029a4:	f004 fb38 	bl	8007018 <EE_WriteVariable>
 80029a8:	e009      	b.n	80029be <ClearEEportsDir+0x3a>
	for(uint8_t i=1 ; i<=N ; i++)
 80029aa:	3401      	adds	r4, #1
 80029ac:	b2e4      	uxtb	r4, r4
 80029ae:	7833      	ldrb	r3, [r6, #0]
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	d308      	bcc.n	80029c6 <ClearEEportsDir+0x42>
		if (arrayPortsDir[i-1])
 80029b4:	1e63      	subs	r3, r4, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	5bd9      	ldrh	r1, [r3, r7]
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d1f1      	bne.n	80029a2 <ClearEEportsDir+0x1e>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80029be:	2c19      	cmp	r4, #25
 80029c0:	d9f3      	bls.n	80029aa <ClearEEportsDir+0x26>
			result = BOS_ERR_EEPROM;
 80029c2:	250a      	movs	r5, #10
 80029c4:	e7f1      	b.n	80029aa <ClearEEportsDir+0x26>
	}
	
	return result;
}
 80029c6:	0028      	movs	r0, r5
 80029c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	20006a18 	.word	0x20006a18
 80029d0:	2000001c 	.word	0x2000001c

080029d4 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <LoadEEportsDir+0x3c>)
 80029d8:	781d      	ldrb	r5, [r3, #0]
 80029da:	2d00      	cmp	r5, #0
 80029dc:	d016      	beq.n	8002a0c <LoadEEportsDir+0x38>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <LoadEEportsDir+0x40>)
 80029e0:	2002      	movs	r0, #2
 80029e2:	f004 faed 	bl	8006fc0 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 80029e6:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80029e8:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 80029ea:	4e09      	ldr	r6, [pc, #36]	; (8002a10 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80029ec:	4f09      	ldr	r7, [pc, #36]	; (8002a14 <LoadEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 80029ee:	3401      	adds	r4, #1
 80029f0:	b2e4      	uxtb	r4, r4
 80029f2:	7833      	ldrb	r3, [r6, #0]
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	d309      	bcc.n	8002a0c <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80029f8:	1e61      	subs	r1, r4, #1
 80029fa:	0049      	lsls	r1, r1, #1
 80029fc:	19c9      	adds	r1, r1, r7
 80029fe:	1c60      	adds	r0, r4, #1
 8002a00:	f004 fade 	bl	8006fc0 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002a04:	2c19      	cmp	r4, #25
 8002a06:	d9f2      	bls.n	80029ee <LoadEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 8002a08:	250a      	movs	r5, #10
 8002a0a:	e7f0      	b.n	80029ee <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 8002a0c:	0028      	movs	r0, r5
 8002a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a10:	2000001c 	.word	0x2000001c
 8002a14:	20006a18 	.word	0x20006a18

08002a18 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	46de      	mov	lr, fp
 8002a1c:	464f      	mov	r7, r9
 8002a1e:	4646      	mov	r6, r8
 8002a20:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002a22:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	4699      	mov	r9, r3
	{
		if (moduleAlias[i][0]) 				
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <SaveEEalias+0x7c>)
 8002a2a:	469b      	mov	fp, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002a2c:	4f1a      	ldr	r7, [pc, #104]	; (8002a98 <SaveEEalias+0x80>)
 8002a2e:	e004      	b.n	8002a3a <SaveEEalias+0x22>
 8002a30:	3501      	adds	r5, #1
 8002a32:	b2ed      	uxtb	r5, r5
 8002a34:	783b      	ldrb	r3, [r7, #0]
 8002a36:	42ab      	cmp	r3, r5
 8002a38:	d325      	bcc.n	8002a86 <SaveEEalias+0x6e>
		if (moduleAlias[i][0]) 				
 8002a3a:	00ab      	lsls	r3, r5, #2
 8002a3c:	195b      	adds	r3, r3, r5
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	465a      	mov	r2, fp
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f3      	beq.n	8002a30 <SaveEEalias+0x18>
 8002a48:	00ae      	lsls	r6, r5, #2
 8002a4a:	1976      	adds	r6, r6, r5
 8002a4c:	0076      	lsls	r6, r6, #1
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <SaveEEalias+0x7c>)
 8002a50:	469c      	mov	ip, r3
 8002a52:	4466      	add	r6, ip
 8002a54:	464c      	mov	r4, r9
 8002a56:	341c      	adds	r4, #28
 8002a58:	b2a4      	uxth	r4, r4
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	3321      	adds	r3, #33	; 0x21
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4698      	mov	r8, r3
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8002a62:	7833      	ldrb	r3, [r6, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	7871      	ldrb	r1, [r6, #1]
 8002a68:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8002a6a:	b289      	uxth	r1, r1
 8002a6c:	0020      	movs	r0, r4
 8002a6e:	f004 fad3 	bl	8007018 <EE_WriteVariable>
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002a72:	3602      	adds	r6, #2
 8002a74:	3401      	adds	r4, #1
 8002a76:	b2a4      	uxth	r4, r4
 8002a78:	45a0      	cmp	r8, r4
 8002a7a:	d1f2      	bne.n	8002a62 <SaveEEalias+0x4a>
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	3305      	adds	r3, #5
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4699      	mov	r9, r3
 8002a84:	e7d4      	b.n	8002a30 <SaveEEalias+0x18>
			}
		}			
	}
	
	return result;
}
 8002a86:	2000      	movs	r0, #0
 8002a88:	bce0      	pop	{r5, r6, r7}
 8002a8a:	46bb      	mov	fp, r7
 8002a8c:	46b1      	mov	r9, r6
 8002a8e:	46a8      	mov	r8, r5
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	20000d44 	.word	0x20000d44
 8002a98:	2000001c 	.word	0x2000001c

08002a9c <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	46de      	mov	lr, fp
 8002aa0:	4657      	mov	r7, sl
 8002aa2:	464e      	mov	r6, r9
 8002aa4:	4645      	mov	r5, r8
 8002aa6:	b5e0      	push	{r5, r6, r7, lr}
 8002aa8:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 8002aaa:	466b      	mov	r3, sp
 8002aac:	2200      	movs	r2, #0
 8002aae:	80da      	strh	r2, [r3, #6]
 8002ab0:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4698      	mov	r8, r3
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <LoadEEalias+0x84>)
 8002ab8:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8002aba:	469a      	mov	sl, r3
 8002abc:	e010      	b.n	8002ae0 <LoadEEalias+0x44>
 8002abe:	464b      	mov	r3, r9
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	444b      	add	r3, r9
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4453      	add	r3, sl
 8002ac8:	2200      	movs	r2, #0
 8002aca:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002acc:	4643      	mov	r3, r8
 8002ace:	3301      	adds	r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4698      	mov	r8, r3
 8002ad4:	3705      	adds	r7, #5
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <LoadEEalias+0x88>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4543      	cmp	r3, r8
 8002ade:	d317      	bcc.n	8002b10 <LoadEEalias+0x74>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002ae0:	1f7c      	subs	r4, r7, #5
 8002ae2:	b2a4      	uxth	r4, r4
 8002ae4:	4643      	mov	r3, r8
 8002ae6:	009d      	lsls	r5, r3, #2
 8002ae8:	4445      	add	r5, r8
 8002aea:	006d      	lsls	r5, r5, #1
 8002aec:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8002aee:	466b      	mov	r3, sp
 8002af0:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8002af2:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8002af4:	0031      	movs	r1, r6
 8002af6:	0020      	movs	r0, r4
 8002af8:	f004 fa62 	bl	8006fc0 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8002afc:	8833      	ldrh	r3, [r6, #0]
 8002afe:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002b04:	3401      	adds	r4, #1
 8002b06:	b2a4      	uxth	r4, r4
 8002b08:	3502      	adds	r5, #2
 8002b0a:	42a7      	cmp	r7, r4
 8002b0c:	d1f2      	bne.n	8002af4 <LoadEEalias+0x58>
 8002b0e:	e7d6      	b.n	8002abe <LoadEEalias+0x22>
	}
	
	return result;
}
 8002b10:	2000      	movs	r0, #0
 8002b12:	b003      	add	sp, #12
 8002b14:	bcf0      	pop	{r4, r5, r6, r7}
 8002b16:	46bb      	mov	fp, r7
 8002b18:	46b2      	mov	sl, r6
 8002b1a:	46a9      	mov	r9, r5
 8002b1c:	46a0      	mov	r8, r4
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b20:	20000d44 	.word	0x20000d44
 8002b24:	2000001c 	.word	0x2000001c

08002b28 <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	46d6      	mov	lr, sl
 8002b2c:	464f      	mov	r7, r9
 8002b2e:	4646      	mov	r6, r8
 8002b30:	b5c0      	push	{r6, r7, lr}
 8002b32:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002b34:	466b      	mov	r3, sp
 8002b36:	2200      	movs	r2, #0
 8002b38:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 8002b3a:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <LoadEEgroup+0xa0>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01d      	beq.n	8002b7e <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002b42:	2400      	movs	r4, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8002b44:	4e21      	ldr	r6, [pc, #132]	; (8002bcc <LoadEEgroup+0xa4>)
	for(i=0 ; i<N ; i++)			// N modules
 8002b46:	4d20      	ldr	r5, [pc, #128]	; (8002bc8 <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8002b48:	b2e1      	uxtb	r1, r4
 8002b4a:	0049      	lsls	r1, r1, #1
 8002b4c:	1871      	adds	r1, r6, r1
 8002b4e:	0020      	movs	r0, r4
 8002b50:	30cb      	adds	r0, #203	; 0xcb
 8002b52:	b280      	uxth	r0, r0
 8002b54:	f004 fa34 	bl	8006fc0 <EE_ReadVariable>
		add++;
 8002b58:	1c63      	adds	r3, r4, #1
 8002b5a:	b29c      	uxth	r4, r3
	for(i=0 ; i<N ; i++)			// N modules
 8002b5c:	782a      	ldrb	r2, [r5, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8f1      	bhi.n	8002b48 <LoadEEgroup+0x20>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <LoadEEgroup+0xa8>)
 8002b66:	4699      	mov	r9, r3
 8002b68:	0027      	movs	r7, r4
 8002b6a:	379e      	adds	r7, #158	; 0x9e
 8002b6c:	b2bf      	uxth	r7, r7
 8002b6e:	34d0      	adds	r4, #208	; 0xd0
 8002b70:	b2a3      	uxth	r3, r4
 8002b72:	4698      	mov	r8, r3
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002b74:	466b      	mov	r3, sp
 8002b76:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002b78:	2300      	movs	r3, #0
 8002b7a:	469a      	mov	sl, r3
 8002b7c:	e00b      	b.n	8002b96 <LoadEEgroup+0x6e>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002b7e:	2400      	movs	r4, #0
 8002b80:	e7f0      	b.n	8002b64 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002b82:	464b      	mov	r3, r9
 8002b84:	4652      	mov	r2, sl
 8002b86:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002b88:	230a      	movs	r3, #10
 8002b8a:	469c      	mov	ip, r3
 8002b8c:	44e1      	add	r9, ip
 8002b8e:	3705      	adds	r7, #5
 8002b90:	b2bf      	uxth	r7, r7
 8002b92:	4547      	cmp	r7, r8
 8002b94:	d010      	beq.n	8002bb8 <LoadEEgroup+0x90>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002b96:	1f7c      	subs	r4, r7, #5
 8002b98:	b2a4      	uxth	r4, r4
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002b9a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002b9c:	0031      	movs	r1, r6
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f004 fa0e 	bl	8006fc0 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8002ba4:	8833      	ldrh	r3, [r6, #0]
 8002ba6:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002bac:	3401      	adds	r4, #1
 8002bae:	b2a4      	uxth	r4, r4
 8002bb0:	3502      	adds	r5, #2
 8002bb2:	42bc      	cmp	r4, r7
 8002bb4:	d1f2      	bne.n	8002b9c <LoadEEgroup+0x74>
 8002bb6:	e7e4      	b.n	8002b82 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002bb8:	2000      	movs	r0, #0
 8002bba:	b002      	add	sp, #8
 8002bbc:	bce0      	pop	{r5, r6, r7}
 8002bbe:	46ba      	mov	sl, r7
 8002bc0:	46b1      	mov	r9, r6
 8002bc2:	46a8      	mov	r8, r5
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	2000001c 	.word	0x2000001c
 8002bcc:	20000ccc 	.word	0x20000ccc
 8002bd0:	20000c68 	.word	0x20000c68

08002bd4 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8002bd8:	210e      	movs	r1, #14
 8002bda:	4469      	add	r1, sp
 8002bdc:	2300      	movs	r3, #0
 8002bde:	800b      	strh	r3, [r1, #0]
 8002be0:	aa03      	add	r2, sp, #12
 8002be2:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8002be4:	20e4      	movs	r0, #228	; 0xe4
 8002be6:	f004 f9eb 	bl	8006fc0 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002bea:	2500      	movs	r5, #0
	if (!status1) {
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d102      	bne.n	8002bf6 <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8002bf0:	230e      	movs	r3, #14
 8002bf2:	446b      	add	r3, sp
 8002bf4:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8002bf6:	210e      	movs	r1, #14
 8002bf8:	4469      	add	r1, sp
 8002bfa:	20e5      	movs	r0, #229	; 0xe5
 8002bfc:	f004 f9e0 	bl	8006fc0 <EE_ReadVariable>
 8002c00:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8002c02:	a903      	add	r1, sp, #12
 8002c04:	20e6      	movs	r0, #230	; 0xe6
 8002c06:	f004 f9db 	bl	8006fc0 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002c0a:	4304      	orrs	r4, r0
 8002c0c:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002c0e:	2600      	movs	r6, #0
	if (!status1 && !status2) {
 8002c10:	2c00      	cmp	r4, #0
 8002c12:	d106      	bne.n	8002c22 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8002c14:	230e      	movs	r3, #14
 8002c16:	446b      	add	r3, sp
 8002c18:	881e      	ldrh	r6, [r3, #0]
 8002c1a:	0436      	lsls	r6, r6, #16
 8002c1c:	ab03      	add	r3, sp, #12
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8002c22:	210e      	movs	r1, #14
 8002c24:	4469      	add	r1, sp
 8002c26:	20e7      	movs	r0, #231	; 0xe7
 8002c28:	f004 f9ca 	bl	8006fc0 <EE_ReadVariable>
 8002c2c:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8002c2e:	a903      	add	r1, sp, #12
 8002c30:	20e8      	movs	r0, #232	; 0xe8
 8002c32:	f004 f9c5 	bl	8006fc0 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002c36:	4320      	orrs	r0, r4
 8002c38:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002c3a:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d106      	bne.n	8002c4e <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8002c40:	230e      	movs	r3, #14
 8002c42:	446b      	add	r3, sp
 8002c44:	881c      	ldrh	r4, [r3, #0]
 8002c46:	0424      	lsls	r4, r4, #16
 8002c48:	ab03      	add	r3, sp, #12
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8002c4e:	210e      	movs	r1, #14
 8002c50:	4469      	add	r1, sp
 8002c52:	20e9      	movs	r0, #233	; 0xe9
 8002c54:	f004 f9b4 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) {
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d107      	bne.n	8002c6c <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8002c5c:	230e      	movs	r3, #14
 8002c5e:	446b      	add	r3, sp
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	0a19      	lsrs	r1, r3, #8
 8002c64:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <LoadEEstreams+0x134>)
 8002c66:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <LoadEEstreams+0x138>)
 8002c6a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8002c6c:	210e      	movs	r1, #14
 8002c6e:	4469      	add	r1, sp
 8002c70:	20ea      	movs	r0, #234	; 0xea
 8002c72:	f004 f9a5 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) {
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d107      	bne.n	8002c8a <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 8002c7a:	230e      	movs	r3, #14
 8002c7c:	446b      	add	r3, sp
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	0a19      	lsrs	r1, r3, #8
 8002c82:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <LoadEEstreams+0x13c>)
 8002c84:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8002c86:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <LoadEEstreams+0x140>)
 8002c88:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8002c8a:	210e      	movs	r1, #14
 8002c8c:	4469      	add	r1, sp
 8002c8e:	20eb      	movs	r0, #235	; 0xeb
 8002c90:	f004 f996 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) {
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d107      	bne.n	8002ca8 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8002c98:	230e      	movs	r3, #14
 8002c9a:	446b      	add	r3, sp
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	0a19      	lsrs	r1, r3, #8
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <LoadEEstreams+0x144>)
 8002ca2:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <LoadEEstreams+0x148>)
 8002ca6:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <LoadEEstreams+0x134>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <LoadEEstreams+0xe4>
 8002cb0:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <LoadEEstreams+0x138>)
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	d112      	bne.n	8002cde <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <LoadEEstreams+0x13c>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <LoadEEstreams+0xf4>
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <LoadEEstreams+0x140>)
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	d111      	bne.n	8002cec <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <LoadEEstreams+0x144>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <LoadEEstreams+0x104>
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <LoadEEstreams+0x148>)
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d110      	bne.n	8002cfa <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 8002cd8:	2000      	movs	r0, #0
 8002cda:	b004      	add	sp, #16
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	0022      	movs	r2, r4
 8002ce2:	0031      	movs	r1, r6
 8002ce4:	0028      	movs	r0, r5
 8002ce6:	f005 fb7d 	bl	80083e4 <SetupDMAStreams>
 8002cea:	e7e5      	b.n	8002cb8 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	0022      	movs	r2, r4
 8002cf0:	0031      	movs	r1, r6
 8002cf2:	0028      	movs	r0, r5
 8002cf4:	f005 fb76 	bl	80083e4 <SetupDMAStreams>
 8002cf8:	e7e6      	b.n	8002cc8 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8002cfa:	9200      	str	r2, [sp, #0]
 8002cfc:	0022      	movs	r2, r4
 8002cfe:	0031      	movs	r1, r6
 8002d00:	0028      	movs	r0, r5
 8002d02:	f005 fb6f 	bl	80083e4 <SetupDMAStreams>
 8002d06:	e7e7      	b.n	8002cd8 <LoadEEstreams+0x104>
 8002d08:	20000df2 	.word	0x20000df2
 8002d0c:	20000c65 	.word	0x20000c65
 8002d10:	20000df3 	.word	0x20000df3
 8002d14:	20000c66 	.word	0x20000c66
 8002d18:	20000df4 	.word	0x20000df4
 8002d1c:	20000c67 	.word	0x20000c67

08002d20 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	46de      	mov	lr, fp
 8002d24:	4657      	mov	r7, sl
 8002d26:	464e      	mov	r6, r9
 8002d28:	4645      	mov	r5, r8
 8002d2a:	b5e0      	push	{r5, r6, r7, lr}
 8002d2c:	000f      	movs	r7, r1
 8002d2e:	0016      	movs	r6, r2
 8002d30:	001c      	movs	r4, r3
 8002d32:	ab0a      	add	r3, sp, #40	; 0x28
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	469b      	mov	fp, r3
 8002d38:	ab0b      	add	r3, sp, #44	; 0x2c
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	469a      	mov	sl, r3
 8002d3e:	ab0c      	add	r3, sp, #48	; 0x30
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4699      	mov	r9, r3
 8002d44:	ab0d      	add	r3, sp, #52	; 0x34
 8002d46:	781d      	ldrb	r5, [r3, #0]
 8002d48:	ab0e      	add	r3, sp, #56	; 0x38
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8002d4e:	0001      	movs	r1, r0
 8002d50:	20e4      	movs	r0, #228	; 0xe4
 8002d52:	f004 f961 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8002d56:	0a39      	lsrs	r1, r7, #8
 8002d58:	b289      	uxth	r1, r1
 8002d5a:	20e5      	movs	r0, #229	; 0xe5
 8002d5c:	f004 f95c 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8002d60:	b2b9      	uxth	r1, r7
 8002d62:	20e6      	movs	r0, #230	; 0xe6
 8002d64:	f004 f958 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8002d68:	0a31      	lsrs	r1, r6, #8
 8002d6a:	b289      	uxth	r1, r1
 8002d6c:	20e7      	movs	r0, #231	; 0xe7
 8002d6e:	f004 f953 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8002d72:	b2b1      	uxth	r1, r6
 8002d74:	20e8      	movs	r0, #232	; 0xe8
 8002d76:	f004 f94f 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8002d7a:	0224      	lsls	r4, r4, #8
 8002d7c:	445c      	add	r4, fp
 8002d7e:	b2a1      	uxth	r1, r4
 8002d80:	20e9      	movs	r0, #233	; 0xe9
 8002d82:	f004 f949 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8002d86:	4653      	mov	r3, sl
 8002d88:	0219      	lsls	r1, r3, #8
 8002d8a:	4449      	add	r1, r9
 8002d8c:	b289      	uxth	r1, r1
 8002d8e:	20ea      	movs	r0, #234	; 0xea
 8002d90:	f004 f942 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8002d94:	022d      	lsls	r5, r5, #8
 8002d96:	4445      	add	r5, r8
 8002d98:	b2a9      	uxth	r1, r5
 8002d9a:	20eb      	movs	r0, #235	; 0xeb
 8002d9c:	f004 f93c 	bl	8007018 <EE_WriteVariable>
	
	return result;
}
 8002da0:	2000      	movs	r0, #0
 8002da2:	bcf0      	pop	{r4, r5, r6, r7}
 8002da4:	46bb      	mov	fp, r7
 8002da6:	46b2      	mov	sl, r6
 8002da8:	46a9      	mov	r9, r5
 8002daa:	46a0      	mov	r8, r4
 8002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002db0 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8002db0:	b510      	push	{r4, lr}
 8002db2:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8002db4:	208a      	movs	r0, #138	; 0x8a
 8002db6:	466b      	mov	r3, sp
 8002db8:	1d99      	adds	r1, r3, #6
 8002dba:	0040      	lsls	r0, r0, #1
 8002dbc:	f004 f900 	bl	8006fc0 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d000      	beq.n	8002dc6 <LoadEEparams+0x16>
 8002dc4:	e064      	b.n	8002e90 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8002dc6:	466b      	mov	r3, sp
 8002dc8:	3306      	adds	r3, #6
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	4a46      	ldr	r2, [pc, #280]	; (8002ee8 <LoadEEparams+0x138>)
 8002dce:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8002dd4:	2016      	movs	r0, #22
 8002dd6:	466b      	mov	r3, sp
 8002dd8:	1d99      	adds	r1, r3, #6
 8002dda:	30ff      	adds	r0, #255	; 0xff
 8002ddc:	f004 f8f0 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) 
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d15c      	bne.n	8002e9e <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8002de4:	466b      	mov	r3, sp
 8002de6:	88da      	ldrh	r2, [r3, #6]
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <LoadEEparams+0x138>)
 8002dea:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8002dec:	208b      	movs	r0, #139	; 0x8b
 8002dee:	466b      	mov	r3, sp
 8002df0:	1d99      	adds	r1, r3, #6
 8002df2:	0040      	lsls	r0, r0, #1
 8002df4:	f004 f8e4 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) 
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d153      	bne.n	8002ea4 <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime = temp1;
 8002dfc:	466b      	mov	r3, sp
 8002dfe:	88da      	ldrh	r2, [r3, #6]
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <LoadEEparams+0x138>)
 8002e02:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8002e04:	2018      	movs	r0, #24
 8002e06:	466b      	mov	r3, sp
 8002e08:	1d99      	adds	r1, r3, #6
 8002e0a:	30ff      	adds	r0, #255	; 0xff
 8002e0c:	f004 f8d8 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) {
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d14a      	bne.n	8002eaa <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 8002e14:	466b      	mov	r3, sp
 8002e16:	3306      	adds	r3, #6
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <LoadEEparams+0x138>)
 8002e1c:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8002e22:	208c      	movs	r0, #140	; 0x8c
 8002e24:	466b      	mov	r3, sp
 8002e26:	1d99      	adds	r1, r3, #6
 8002e28:	0040      	lsls	r0, r0, #1
 8002e2a:	f004 f8c9 	bl	8006fc0 <EE_ReadVariable>
 8002e2e:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8002e30:	201a      	movs	r0, #26
 8002e32:	a901      	add	r1, sp, #4
 8002e34:	30ff      	adds	r0, #255	; 0xff
 8002e36:	f004 f8c3 	bl	8006fc0 <EE_ReadVariable>
	if (!status1 && !status2) 
 8002e3a:	4304      	orrs	r4, r0
 8002e3c:	b2a4      	uxth	r4, r4
 8002e3e:	2c00      	cmp	r4, #0
 8002e40:	d13a      	bne.n	8002eb8 <LoadEEparams+0x108>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8002e42:	ab01      	add	r3, sp, #4
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	466a      	mov	r2, sp
 8002e4a:	3206      	adds	r2, #6
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	4a25      	ldr	r2, [pc, #148]	; (8002ee8 <LoadEEparams+0x138>)
 8002e52:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8002e54:	208d      	movs	r0, #141	; 0x8d
 8002e56:	466b      	mov	r3, sp
 8002e58:	1d99      	adds	r1, r3, #6
 8002e5a:	0040      	lsls	r0, r0, #1
 8002e5c:	f004 f8b0 	bl	8006fc0 <EE_ReadVariable>
	if (!status1) {
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d137      	bne.n	8002ed4 <LoadEEparams+0x124>
		BOS.daylightsaving = (int8_t)temp1;
 8002e64:	466b      	mov	r3, sp
 8002e66:	3306      	adds	r3, #6
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <LoadEEparams+0x138>)
 8002e6c:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8002e72:	201c      	movs	r0, #28
 8002e74:	466b      	mov	r3, sp
 8002e76:	1d99      	adds	r1, r3, #6
 8002e78:	30ff      	adds	r0, #255	; 0xff
 8002e7a:	f004 f8a1 	bl	8006fc0 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d12e      	bne.n	8002ee0 <LoadEEparams+0x130>
		BOS.disableCLI = (uint8_t)temp1;
 8002e82:	466b      	mov	r3, sp
 8002e84:	799a      	ldrb	r2, [r3, #6]
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <LoadEEparams+0x138>)
 8002e88:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <LoadEEparams+0x138>)
 8002e92:	4a16      	ldr	r2, [pc, #88]	; (8002eec <LoadEEparams+0x13c>)
 8002e94:	7991      	ldrb	r1, [r2, #6]
 8002e96:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8002e98:	79d2      	ldrb	r2, [r2, #7]
 8002e9a:	71da      	strb	r2, [r3, #7]
 8002e9c:	e79a      	b.n	8002dd4 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <LoadEEparams+0x13c>)
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	e7a1      	b.n	8002de8 <LoadEEparams+0x38>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <LoadEEparams+0x13c>)
 8002ea6:	885a      	ldrh	r2, [r3, #2]
 8002ea8:	e7aa      	b.n	8002e00 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <LoadEEparams+0x138>)
 8002eac:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <LoadEEparams+0x13c>)
 8002eae:	7911      	ldrb	r1, [r2, #4]
 8002eb0:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8002eb2:	7952      	ldrb	r2, [r2, #5]
 8002eb4:	715a      	strb	r2, [r3, #5]
 8002eb6:	e7b4      	b.n	8002e22 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <LoadEEparams+0x140>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <LoadEEparams+0x138>)
 8002ec2:	22e1      	movs	r2, #225	; 0xe1
 8002ec4:	0252      	lsls	r2, r2, #9
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e7c4      	b.n	8002e54 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <LoadEEparams+0x13c>)
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <LoadEEparams+0x138>)
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	e7bf      	b.n	8002e54 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <LoadEEparams+0x138>)
 8002ed6:	2218      	movs	r2, #24
 8002ed8:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8002eda:	2200      	movs	r2, #0
 8002edc:	731a      	strb	r2, [r3, #12]
 8002ede:	e7c8      	b.n	8002e72 <LoadEEparams+0xc2>
		BOS.disableCLI = BOS_default.disableCLI;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <LoadEEparams+0x13c>)
 8002ee2:	7eda      	ldrb	r2, [r3, #27]
 8002ee4:	e7cf      	b.n	8002e86 <LoadEEparams+0xd6>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	20006600 	.word	0x20006600
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000ad6 	.word	0x20000ad6

08002ef4 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8002ef4:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 8002ef6:	4c1a      	ldr	r4, [pc, #104]	; (8002f60 <SaveEEparams+0x6c>)
 8002ef8:	79e3      	ldrb	r3, [r4, #7]
 8002efa:	015b      	lsls	r3, r3, #5
 8002efc:	79a1      	ldrb	r1, [r4, #6]
 8002efe:	4319      	orrs	r1, r3
 8002f00:	208a      	movs	r0, #138	; 0x8a
 8002f02:	0040      	lsls	r0, r0, #1
 8002f04:	f004 f888 	bl	8007018 <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8002f08:	8821      	ldrh	r1, [r4, #0]
 8002f0a:	2016      	movs	r0, #22
 8002f0c:	30ff      	adds	r0, #255	; 0xff
 8002f0e:	f004 f883 	bl	8007018 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8002f12:	8861      	ldrh	r1, [r4, #2]
 8002f14:	208b      	movs	r0, #139	; 0x8b
 8002f16:	0040      	lsls	r0, r0, #1
 8002f18:	f004 f87e 	bl	8007018 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8002f1c:	7963      	ldrb	r3, [r4, #5]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	7b21      	ldrb	r1, [r4, #12]
 8002f22:	4319      	orrs	r1, r3
 8002f24:	2018      	movs	r0, #24
 8002f26:	30ff      	adds	r0, #255	; 0xff
 8002f28:	f004 f876 	bl	8007018 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8002f2c:	8921      	ldrh	r1, [r4, #8]
 8002f2e:	208c      	movs	r0, #140	; 0x8c
 8002f30:	0040      	lsls	r0, r0, #1
 8002f32:	f004 f871 	bl	8007018 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8002f36:	8961      	ldrh	r1, [r4, #10]
 8002f38:	201a      	movs	r0, #26
 8002f3a:	30ff      	adds	r0, #255	; 0xff
 8002f3c:	f004 f86c 	bl	8007018 <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8002f40:	7b63      	ldrb	r3, [r4, #13]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	7921      	ldrb	r1, [r4, #4]
 8002f46:	4319      	orrs	r1, r3
 8002f48:	208d      	movs	r0, #141	; 0x8d
 8002f4a:	0040      	lsls	r0, r0, #1
 8002f4c:	f004 f864 	bl	8007018 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8002f50:	7ee1      	ldrb	r1, [r4, #27]
 8002f52:	201c      	movs	r0, #28
 8002f54:	30ff      	adds	r0, #255	; 0xff
 8002f56:	f004 f85f 	bl	8007018 <EE_WriteVariable>
	
	return result;
}
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	20006600 	.word	0x20006600

08002f64 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	46ce      	mov	lr, r9
 8002f68:	4647      	mov	r7, r8
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8002f6e:	231e      	movs	r3, #30
 8002f70:	446b      	add	r3, sp
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8002f76:	4e36      	ldr	r6, [pc, #216]	; (8003050 <LoadEEbuttons+0xec>)
	uint16_t temp16 = 0, status1 = 0; 
 8002f78:	24ec      	movs	r4, #236	; 0xec
 8002f7a:	2501      	movs	r5, #1
 8002f7c:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
				button[i+1].releasedY3Sec = (uint8_t)temp16;
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4698      	mov	r8, r3
 8002f82:	e04c      	b.n	800301e <LoadEEbuttons+0xba>
				button[i+1].type = temp8 & 0x0F;
 8002f84:	72b2      	strb	r2, [r6, #10]
				button[i+1].events = (uint8_t)temp16;
 8002f86:	7473      	strb	r3, [r6, #17]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8002f88:	00a8      	lsls	r0, r5, #2
 8002f8a:	b283      	uxth	r3, r0
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	0018      	movs	r0, r3
 8002f90:	30e9      	adds	r0, #233	; 0xe9
 8002f92:	b280      	uxth	r0, r0
 8002f94:	231e      	movs	r3, #30
 8002f96:	446b      	add	r3, sp
 8002f98:	0019      	movs	r1, r3
 8002f9a:	f004 f811 	bl	8006fc0 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8002f9e:	466b      	mov	r3, sp
 8002fa0:	8bdb      	ldrh	r3, [r3, #30]
 8002fa2:	0a1a      	lsrs	r2, r3, #8
 8002fa4:	72f2      	strb	r2, [r6, #11]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8002fa6:	73b3      	strb	r3, [r6, #14]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8002fa8:	4648      	mov	r0, r9
 8002faa:	30ea      	adds	r0, #234	; 0xea
 8002fac:	b280      	uxth	r0, r0
 8002fae:	231e      	movs	r3, #30
 8002fb0:	446b      	add	r3, sp
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	f004 f804 	bl	8006fc0 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8002fb8:	466b      	mov	r3, sp
 8002fba:	8bdb      	ldrh	r3, [r3, #30]
 8002fbc:	0a1a      	lsrs	r2, r3, #8
 8002fbe:	7332      	strb	r2, [r6, #12]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8002fc0:	73f3      	strb	r3, [r6, #15]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8002fc2:	4648      	mov	r0, r9
 8002fc4:	30eb      	adds	r0, #235	; 0xeb
 8002fc6:	b280      	uxth	r0, r0
 8002fc8:	231e      	movs	r3, #30
 8002fca:	446b      	add	r3, sp
 8002fcc:	0019      	movs	r1, r3
 8002fce:	f003 fff7 	bl	8006fc0 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8002fd2:	466b      	mov	r3, sp
 8002fd4:	8bdb      	ldrh	r3, [r3, #30]
 8002fd6:	0a1a      	lsrs	r2, r3, #8
 8002fd8:	7372      	strb	r2, [r6, #13]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8002fda:	7433      	strb	r3, [r6, #16]
				AddPortButton(button[i+1].type, i+1);
 8002fdc:	b2eb      	uxtb	r3, r5
 8002fde:	7ab0      	ldrb	r0, [r6, #10]
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	f004 ff20 	bl	8007e28 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8002fe8:	7c71      	ldrb	r1, [r6, #17]
 8002fea:	7af3      	ldrb	r3, [r6, #11]
 8002fec:	104a      	asrs	r2, r1, #1
 8002fee:	4640      	mov	r0, r8
 8002ff0:	4002      	ands	r2, r0
 8002ff2:	4001      	ands	r1, r0
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	9005      	str	r0, [sp, #20]
 8002ff8:	7c30      	ldrb	r0, [r6, #16]
 8002ffa:	9004      	str	r0, [sp, #16]
 8002ffc:	7bf0      	ldrb	r0, [r6, #15]
 8002ffe:	9003      	str	r0, [sp, #12]
 8003000:	7bb0      	ldrb	r0, [r6, #14]
 8003002:	9002      	str	r0, [sp, #8]
 8003004:	7b70      	ldrb	r0, [r6, #13]
 8003006:	9001      	str	r0, [sp, #4]
 8003008:	7b30      	ldrb	r0, [r6, #12]
 800300a:	9000      	str	r0, [sp, #0]
 800300c:	4648      	mov	r0, r9
 800300e:	f005 f825 	bl	800805c <SetButtonEvents>
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003012:	3501      	adds	r5, #1
 8003014:	3404      	adds	r4, #4
 8003016:	b2a4      	uxth	r4, r4
 8003018:	3609      	adds	r6, #9
 800301a:	2d08      	cmp	r5, #8
 800301c:	d012      	beq.n	8003044 <LoadEEbuttons+0xe0>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 800301e:	231e      	movs	r3, #30
 8003020:	446b      	add	r3, sp
 8003022:	0019      	movs	r1, r3
 8003024:	0020      	movs	r0, r4
 8003026:	f003 ffcb 	bl	8006fc0 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 800302a:	2800      	cmp	r0, #0
 800302c:	d1f1      	bne.n	8003012 <LoadEEbuttons+0xae>
			temp8 = (uint8_t)(temp16 >> 8);
 800302e:	466b      	mov	r3, sp
 8003030:	8bdb      	ldrh	r3, [r3, #30]
 8003032:	0a19      	lsrs	r1, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8003034:	0b1a      	lsrs	r2, r3, #12
 8003036:	42aa      	cmp	r2, r5
 8003038:	d1eb      	bne.n	8003012 <LoadEEbuttons+0xae>
 800303a:	003a      	movs	r2, r7
 800303c:	400a      	ands	r2, r1
 800303e:	420f      	tst	r7, r1
 8003040:	d0e7      	beq.n	8003012 <LoadEEbuttons+0xae>
 8003042:	e79f      	b.n	8002f84 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b009      	add	sp, #36	; 0x24
 8003048:	bcc0      	pop	{r6, r7}
 800304a:	46b9      	mov	r9, r7
 800304c:	46b0      	mov	r8, r6
 800304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003050:	200011b0 	.word	0x200011b0

08003054 <LoadEEvars>:
{
 8003054:	b510      	push	{r4, lr}
	LoadEEportsDir();
 8003056:	f7ff fcbd 	bl	80029d4 <LoadEEportsDir>
	LoadEEalias();
 800305a:	f7ff fd1f 	bl	8002a9c <LoadEEalias>
	LoadEEgroup();
 800305e:	f7ff fd63 	bl	8002b28 <LoadEEgroup>
	LoadEEstreams();
 8003062:	f7ff fdb7 	bl	8002bd4 <LoadEEstreams>
	LoadEEparams();	
 8003066:	f7ff fea3 	bl	8002db0 <LoadEEparams>
	LoadEEbuttons();	
 800306a:	f7ff ff7b 	bl	8002f64 <LoadEEbuttons>
	LoadROsnippets();
 800306e:	f7ff fbe1 	bl	8002834 <LoadROsnippets>
}
 8003072:	bd10      	pop	{r4, pc}

08003074 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003074:	b530      	push	{r4, r5, lr}
 8003076:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003078:	ab04      	add	r3, sp, #16
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	ab07      	add	r3, sp, #28
 800307e:	2212      	movs	r2, #18
 8003080:	446a      	add	r2, sp
 8003082:	a908      	add	r1, sp, #32
 8003084:	2001      	movs	r0, #1
 8003086:	f008 fd3f 	bl	800bb08 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 800308a:	ac03      	add	r4, sp, #12
 800308c:	9400      	str	r4, [sp, #0]
 800308e:	ab05      	add	r3, sp, #20
 8003090:	220e      	movs	r2, #14
 8003092:	446a      	add	r2, sp
 8003094:	a906      	add	r1, sp, #24
 8003096:	2002      	movs	r0, #2
 8003098:	f008 fd36 	bl	800bb08 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309c:	2301      	movs	r3, #1
 800309e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2500      	movs	r5, #0
 80030a2:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 80030a4:	466b      	mov	r3, sp
 80030a6:	8a5b      	ldrh	r3, [r3, #18]
 80030a8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 80030aa:	a909      	add	r1, sp, #36	; 0x24
 80030ac:	9808      	ldr	r0, [sp, #32]
 80030ae:	f00c fc6d 	bl	800f98c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b2:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 80030b4:	2302      	movs	r3, #2
 80030b6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 80030b8:	8823      	ldrh	r3, [r4, #0]
 80030ba:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 80030bc:	a909      	add	r1, sp, #36	; 0x24
 80030be:	9805      	ldr	r0, [sp, #20]
 80030c0:	f00c fc64 	bl	800f98c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80030c4:	466b      	mov	r3, sp
 80030c6:	8a59      	ldrh	r1, [r3, #18]
 80030c8:	2200      	movs	r2, #0
 80030ca:	9808      	ldr	r0, [sp, #32]
 80030cc:	f00c fd4e 	bl	800fb6c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 80030d0:	2005      	movs	r0, #5
 80030d2:	f009 f8bf 	bl	800c254 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 80030d6:	8821      	ldrh	r1, [r4, #0]
 80030d8:	9805      	ldr	r0, [sp, #20]
 80030da:	f00c fd41 	bl	800fb60 <HAL_GPIO_ReadPin>
 80030de:	0003      	movs	r3, r0
		{
			return 1;
		}
	}

	return 0;
 80030e0:	2000      	movs	r0, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <IsLowerCLIbaud+0x76>
}
 80030e6:	b00f      	add	sp, #60	; 0x3c
 80030e8:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80030ea:	3312      	adds	r3, #18
 80030ec:	446b      	add	r3, sp
 80030ee:	8819      	ldrh	r1, [r3, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	9808      	ldr	r0, [sp, #32]
 80030f4:	f00c fd3a 	bl	800fb6c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 80030f8:	2005      	movs	r0, #5
 80030fa:	f009 f8ab 	bl	800c254 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 80030fe:	ab03      	add	r3, sp, #12
 8003100:	8819      	ldrh	r1, [r3, #0]
 8003102:	9805      	ldr	r0, [sp, #20]
 8003104:	f00c fd2c 	bl	800fb60 <HAL_GPIO_ReadPin>
 8003108:	3801      	subs	r0, #1
 800310a:	4243      	negs	r3, r0
 800310c:	4158      	adcs	r0, r3
			return 1;
 800310e:	b2c0      	uxtb	r0, r0
 8003110:	e7e9      	b.n	80030e6 <IsLowerCLIbaud+0x72>
	...

08003114 <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003114:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <EE_FormatForFactoryReset+0x20>)
 8003118:	4a07      	ldr	r2, [pc, #28]	; (8003138 <EE_FormatForFactoryReset+0x24>)
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d100      	bne.n	8003122 <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 8003120:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 8003122:	f004 f829 	bl	8007178 <EE_Format>
 8003126:	2800      	cmp	r0, #0
 8003128:	d1fa      	bne.n	8003120 <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 800312a:	4b03      	ldr	r3, [pc, #12]	; (8003138 <EE_FormatForFactoryReset+0x24>)
 800312c:	4a01      	ldr	r2, [pc, #4]	; (8003134 <EE_FormatForFactoryReset+0x20>)
 800312e:	601a      	str	r2, [r3, #0]
}
 8003130:	e7f6      	b.n	8003120 <EE_FormatForFactoryReset+0xc>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	beefdead 	.word	0xbeefdead
 8003138:	20007ff0 	.word	0x20007ff0

0800313c <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 800313c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 800313e:	f009 fa6f 	bl	800c620 <GetUart>
 8003142:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003144:	23e1      	movs	r3, #225	; 0xe1
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	015b      	lsls	r3, r3, #5
 8003154:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003156:	f00e f933 	bl	80113c0 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	2120      	movs	r1, #32
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bd10      	pop	{r4, pc}
	...

08003168 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003168:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <IsModuleParameter+0x14>)
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	f7fc ffc9 	bl	8000104 <strcmp>
 8003172:	4243      	negs	r3, r0
 8003174:	4158      	adcs	r0, r3
 8003176:	b2c0      	uxtb	r0, r0
			return i+1;
  }
	return 0;
}
 8003178:	bd10      	pop	{r4, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	200000dc 	.word	0x200000dc

08003180 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 8003184:	491b      	ldr	r1, [pc, #108]	; (80031f4 <IsMathOperator+0x74>)
 8003186:	f7fc ffbd 	bl	8000104 <strcmp>
 800318a:	0006      	movs	r6, r0
 800318c:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 800318e:	4c1a      	ldr	r4, [pc, #104]	; (80031f8 <IsMathOperator+0x78>)
		if (!strcmp(string, "="))
 8003190:	2e00      	cmp	r6, #0
 8003192:	d023      	beq.n	80031dc <IsMathOperator+0x5c>
		else if (!strcmp(string, ">"))
 8003194:	0021      	movs	r1, r4
 8003196:	0028      	movs	r0, r5
 8003198:	f7fc ffb4 	bl	8000104 <strcmp>
 800319c:	2800      	cmp	r0, #0
 800319e:	d01f      	beq.n	80031e0 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <IsMathOperator+0x7c>)
 80031a2:	0028      	movs	r0, r5
 80031a4:	f7fc ffae 	bl	8000104 <strcmp>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d01b      	beq.n	80031e4 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 80031ac:	4914      	ldr	r1, [pc, #80]	; (8003200 <IsMathOperator+0x80>)
 80031ae:	0028      	movs	r0, r5
 80031b0:	f7fc ffa8 	bl	8000104 <strcmp>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d017      	beq.n	80031e8 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 80031b8:	4912      	ldr	r1, [pc, #72]	; (8003204 <IsMathOperator+0x84>)
 80031ba:	0028      	movs	r0, r5
 80031bc:	f7fc ffa2 	bl	8000104 <strcmp>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d013      	beq.n	80031ec <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 80031c4:	4910      	ldr	r1, [pc, #64]	; (8003208 <IsMathOperator+0x88>)
 80031c6:	0028      	movs	r0, r5
 80031c8:	f7fc ff9c 	bl	8000104 <strcmp>
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d00f      	beq.n	80031f0 <IsMathOperator+0x70>
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 80031d0:	3f01      	subs	r7, #1
 80031d2:	b2ff      	uxtb	r7, r7
 80031d4:	2f00      	cmp	r7, #0
 80031d6:	d1db      	bne.n	8003190 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
  }
	return 0;
}
 80031d8:	0038      	movs	r0, r7
 80031da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80031dc:	2701      	movs	r7, #1
 80031de:	e7fb      	b.n	80031d8 <IsMathOperator+0x58>
			return MATH_GREATER;
 80031e0:	2702      	movs	r7, #2
 80031e2:	e7f9      	b.n	80031d8 <IsMathOperator+0x58>
			return MATH_SMALLER;
 80031e4:	2703      	movs	r7, #3
 80031e6:	e7f7      	b.n	80031d8 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80031e8:	2704      	movs	r7, #4
 80031ea:	e7f5      	b.n	80031d8 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80031ec:	2705      	movs	r7, #5
 80031ee:	e7f3      	b.n	80031d8 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 80031f0:	2706      	movs	r7, #6
 80031f2:	e7f1      	b.n	80031d8 <IsMathOperator+0x58>
 80031f4:	08017de0 	.word	0x08017de0
 80031f8:	08017de4 	.word	0x08017de4
 80031fc:	08017de8 	.word	0x08017de8
 8003200:	08017dec 	.word	0x08017dec
 8003204:	08017df0 	.word	0x08017df0
 8003208:	08017df4 	.word	0x08017df4

0800320c <BOS_Init>:
*/

/* --- BitzOS initialization. 
*/
void BOS_Init(void)
{
 800320c:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 800320e:	f008 fed9 	bl	800bfc4 <RTC_Init>
	GetTimeDate();
 8003212:	f008 ff77 	bl	800c104 <GetTimeDate>

	/* EEPROM Init */
	EE_Init();
 8003216:	f004 f813 	bl	8007240 <EE_Init>
	
  /* Initialize all configured peripherals */
  GPIO_Init();
 800321a:	f008 fc3f 	bl	800ba9c <GPIO_Init>
	DMA_Init();
 800321e:	f007 fbb7 	bl	800a990 <DMA_Init>
	TIM_USEC_Init();
 8003222:	f008 ffa3 	bl	800c16c <TIM_USEC_Init>
	CRC_Init();
 8003226:	f008 fbe5 	bl	800b9f4 <CRC_Init>
	TIM_MSEC_Init();
 800322a:	f008 ffd1 	bl	800c1d0 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if (IsFactoryReset())
 800322e:	f008 fcd7 	bl	800bbe0 <IsFactoryReset>
 8003232:	2800      	cmp	r0, #0
 8003234:	d11a      	bne.n	800326c <BOS_Init+0x60>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if (IsLowerCLIbaud())
 8003236:	f7ff ff1d 	bl	8003074 <IsLowerCLIbaud>
 800323a:	2800      	cmp	r0, #0
 800323c:	d021      	beq.n	8003282 <BOS_Init+0x76>
	{
		CLI_LOW_Baudrate_Flag = 1;
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <BOS_Init+0x128>)
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003244:	2032      	movs	r0, #50	; 0x32
 8003246:	f009 f805 	bl	800c254 <StartMilliDelay>
		Module_Init();	
 800324a:	f007 fb31 	bl	800a8b0 <Module_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <BOS_Init+0x12c>)
 8003250:	22e1      	movs	r2, #225	; 0xe1
 8003252:	0252      	lsls	r2, r2, #9
 8003254:	609a      	str	r2, [r3, #8]
		/* Update all ports to lower baudrate */
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003256:	2401      	movs	r4, #1
		{	
			UpdateBaudrate(port, BOS.clibaudrate);
 8003258:	001d      	movs	r5, r3
 800325a:	68a9      	ldr	r1, [r5, #8]
 800325c:	0020      	movs	r0, r4
 800325e:	f009 fa71 	bl	800c744 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003262:	3401      	adds	r4, #1
 8003264:	b2e4      	uxtb	r4, r4
 8003266:	2c07      	cmp	r4, #7
 8003268:	d1f7      	bne.n	800325a <BOS_Init+0x4e>
 800326a:	e00f      	b.n	800328c <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 800326c:	f7ff ff52 	bl	8003114 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003270:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	4b31      	ldr	r3, [pc, #196]	; (800333c <BOS_Init+0x130>)
 8003276:	4a32      	ldr	r2, [pc, #200]	; (8003340 <BOS_Init+0x134>)
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	e7fd      	b.n	800327e <BOS_Init+0x72>
		}
	}
	else
	{
		/* Initialize the module with default baudrate */
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003282:	2032      	movs	r0, #50	; 0x32
 8003284:	f008 ffe6 	bl	800c254 <StartMilliDelay>
		Module_Init();				
 8003288:	f007 fb12 	bl	800a8b0 <Module_Init>
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 800328c:	f7ff fee2 	bl	8003054 <LoadEEvars>
#ifndef __N
	UpdateMyPortsDir();
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003290:	f007 ffec 	bl	800b26c <SetupMessagingRxDMAs>

	/* Startup indicator sequence */
	if (myID == 0)		/* Native module */
 8003294:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <BOS_Init+0x138>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d117      	bne.n	80032cc <BOS_Init+0xc0>
	{
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 800329c:	2580      	movs	r5, #128	; 0x80
 800329e:	012d      	lsls	r5, r5, #4
 80032a0:	2490      	movs	r4, #144	; 0x90
 80032a2:	05e4      	lsls	r4, r4, #23
 80032a4:	2201      	movs	r2, #1
 80032a6:	0029      	movs	r1, r5
 80032a8:	0020      	movs	r0, r4
 80032aa:	f00c fc5f 	bl	800fb6c <HAL_GPIO_WritePin>
 80032ae:	20fa      	movs	r0, #250	; 0xfa
 80032b0:	0040      	lsls	r0, r0, #1
 80032b2:	f008 ffcf 	bl	800c254 <StartMilliDelay>
 80032b6:	2200      	movs	r2, #0
 80032b8:	0029      	movs	r1, r5
 80032ba:	0020      	movs	r0, r4
 80032bc:	f00c fc56 	bl	800fb6c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80032c0:	f003 fdf4 	bl	8006eac <ResetUartORE>

	BOS_initialized = 1;
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <BOS_Init+0x13c>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
}
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 80032cc:	2580      	movs	r5, #128	; 0x80
 80032ce:	012d      	lsls	r5, r5, #4
 80032d0:	2490      	movs	r4, #144	; 0x90
 80032d2:	05e4      	lsls	r4, r4, #23
 80032d4:	2201      	movs	r2, #1
 80032d6:	0029      	movs	r1, r5
 80032d8:	0020      	movs	r0, r4
 80032da:	f00c fc47 	bl	800fb6c <HAL_GPIO_WritePin>
 80032de:	20fa      	movs	r0, #250	; 0xfa
 80032e0:	0040      	lsls	r0, r0, #1
 80032e2:	f008 ffb7 	bl	800c254 <StartMilliDelay>
 80032e6:	2200      	movs	r2, #0
 80032e8:	0029      	movs	r1, r5
 80032ea:	0020      	movs	r0, r4
 80032ec:	f00c fc3e 	bl	800fb6c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80032f0:	2064      	movs	r0, #100	; 0x64
 80032f2:	f008 ffaf 	bl	800c254 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80032f6:	2201      	movs	r2, #1
 80032f8:	0029      	movs	r1, r5
 80032fa:	0020      	movs	r0, r4
 80032fc:	f00c fc36 	bl	800fb6c <HAL_GPIO_WritePin>
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	f008 ffa7 	bl	800c254 <StartMilliDelay>
 8003306:	2200      	movs	r2, #0
 8003308:	0029      	movs	r1, r5
 800330a:	0020      	movs	r0, r4
 800330c:	f00c fc2e 	bl	800fb6c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003310:	2064      	movs	r0, #100	; 0x64
 8003312:	f008 ff9f 	bl	800c254 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003316:	2201      	movs	r2, #1
 8003318:	0029      	movs	r1, r5
 800331a:	0020      	movs	r0, r4
 800331c:	f00c fc26 	bl	800fb6c <HAL_GPIO_WritePin>
 8003320:	2064      	movs	r0, #100	; 0x64
 8003322:	f008 ff97 	bl	800c254 <StartMilliDelay>
 8003326:	2200      	movs	r2, #0
 8003328:	0029      	movs	r1, r5
 800332a:	0020      	movs	r0, r4
 800332c:	f00c fc1e 	bl	800fb6c <HAL_GPIO_WritePin>
 8003330:	e7c6      	b.n	80032c0 <BOS_Init+0xb4>
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	20000ad6 	.word	0x20000ad6
 8003338:	20006600 	.word	0x20006600
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	05fa0004 	.word	0x05fa0004
 8003344:	20000070 	.word	0x20000070
 8003348:	20000ad5 	.word	0x20000ad5

0800334c <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 800334c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334e:	46de      	mov	lr, fp
 8003350:	4657      	mov	r7, sl
 8003352:	464e      	mov	r6, r9
 8003354:	4645      	mov	r5, r8
 8003356:	b5e0      	push	{r5, r6, r7, lr}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 800335c:	4b44      	ldr	r3, [pc, #272]	; (8003470 <FindBroadcastRoutes+0x124>)
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	1dd3      	adds	r3, r2, #7
 8003362:	08db      	lsrs	r3, r3, #3
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4669      	mov	r1, sp
 8003368:	1acb      	subs	r3, r1, r3
 800336a:	469d      	mov	sp, r3
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 800336c:	2a00      	cmp	r2, #0
 800336e:	d009      	beq.n	8003384 <FindBroadcastRoutes+0x38>
 8003370:	4c40      	ldr	r4, [pc, #256]	; (8003474 <FindBroadcastRoutes+0x128>)
 8003372:	2100      	movs	r1, #0
	{	
		modules[m] = 0;
 8003374:	2500      	movs	r5, #0
 8003376:	545d      	strb	r5, [r3, r1]
		bcastRoutes[m] = 0;
 8003378:	8025      	strh	r5, [r4, #0]
	for(m=0 ; m<N ; m++)
 800337a:	3101      	adds	r1, #1
 800337c:	3402      	adds	r4, #2
 800337e:	b2ce      	uxtb	r6, r1
 8003380:	42b2      	cmp	r2, r6
 8003382:	d8f8      	bhi.n	8003376 <FindBroadcastRoutes+0x2a>
	}
	modules[src-1] = ++level;					// Tag the source
 8003384:	3801      	subs	r0, #1
 8003386:	2101      	movs	r1, #1
 8003388:	5419      	strb	r1, [r3, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 800338a:	00c5      	lsls	r5, r0, #3
 800338c:	1a2d      	subs	r5, r5, r0
 800338e:	006d      	lsls	r5, r5, #1
 8003390:	3502      	adds	r5, #2
 8003392:	4939      	ldr	r1, [pc, #228]	; (8003478 <FindBroadcastRoutes+0x12c>)
 8003394:	194d      	adds	r5, r1, r5
	modules[src-1] = ++level;					// Tag the source
 8003396:	2400      	movs	r4, #0
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003398:	4e36      	ldr	r6, [pc, #216]	; (8003474 <FindBroadcastRoutes+0x128>)
 800339a:	0040      	lsls	r0, r0, #1
 800339c:	2101      	movs	r1, #1
 800339e:	4688      	mov	r8, r1
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 80033a0:	3101      	adds	r1, #1
 80033a2:	468c      	mov	ip, r1
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	469b      	mov	fp, r3
 80033a8:	e003      	b.n	80033b2 <FindBroadcastRoutes+0x66>
	for(p=1 ; p<=NumOfPorts ; p++)
 80033aa:	3401      	adds	r4, #1
 80033ac:	3502      	adds	r5, #2
 80033ae:	2c06      	cmp	r4, #6
 80033b0:	d011      	beq.n	80033d6 <FindBroadcastRoutes+0x8a>
		if (array[src-1][p]) 
 80033b2:	8829      	ldrh	r1, [r5, #0]
 80033b4:	2900      	cmp	r1, #0
 80033b6:	d0f8      	beq.n	80033aa <FindBroadcastRoutes+0x5e>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 80033b8:	5b82      	ldrh	r2, [r0, r6]
 80033ba:	4691      	mov	r9, r2
 80033bc:	4642      	mov	r2, r8
 80033be:	40a2      	lsls	r2, r4
 80033c0:	4692      	mov	sl, r2
 80033c2:	464a      	mov	r2, r9
 80033c4:	4653      	mov	r3, sl
 80033c6:	431a      	orrs	r2, r3
 80033c8:	5382      	strh	r2, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 80033ca:	08c9      	lsrs	r1, r1, #3
 80033cc:	4459      	add	r1, fp
 80033ce:	3901      	subs	r1, #1
 80033d0:	4663      	mov	r3, ip
 80033d2:	700b      	strb	r3, [r1, #0]
 80033d4:	e7e9      	b.n	80033aa <FindBroadcastRoutes+0x5e>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	465b      	mov	r3, fp
	++level;													// Move one level
 80033da:	2102      	movs	r1, #2
 80033dc:	468c      	mov	ip, r1
 80033de:	4926      	ldr	r1, [pc, #152]	; (8003478 <FindBroadcastRoutes+0x12c>)
 80033e0:	3102      	adds	r1, #2
 80033e2:	468b      	mov	fp, r1
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 80033e4:	0019      	movs	r1, r3
 80033e6:	4663      	mov	r3, ip
 80033e8:	4694      	mov	ip, r2
 80033ea:	000a      	movs	r2, r1
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 80033ec:	4661      	mov	r1, ip
 80033ee:	2900      	cmp	r1, #0
 80033f0:	d012      	beq.n	8003418 <FindBroadcastRoutes+0xcc>
		++level;																					// Move one level
 80033f2:	3301      	adds	r3, #1
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4e1f      	ldr	r6, [pc, #124]	; (8003474 <FindBroadcastRoutes+0x128>)
 80033f8:	2100      	movs	r1, #0
		untaged = 0;																			// Reset the untaged counter
 80033fa:	2000      	movs	r0, #0
 80033fc:	4682      	mov	sl, r0
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	4681      	mov	r9, r0
 8003402:	5c50      	ldrb	r0, [r2, r1]
 8003404:	4548      	cmp	r0, r9
 8003406:	d010      	beq.n	800342a <FindBroadcastRoutes+0xde>
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003408:	3101      	adds	r1, #1
 800340a:	3602      	adds	r6, #2
 800340c:	b2c8      	uxtb	r0, r1
 800340e:	4584      	cmp	ip, r0
 8003410:	d8f7      	bhi.n	8003402 <FindBroadcastRoutes+0xb6>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003412:	4651      	mov	r1, sl
 8003414:	2900      	cmp	r1, #0
 8003416:	d1e9      	bne.n	80033ec <FindBroadcastRoutes+0xa0>

	
	return result;
}
 8003418:	2000      	movs	r0, #0
 800341a:	46bd      	mov	sp, r7
 800341c:	b003      	add	sp, #12
 800341e:	bcf0      	pop	{r4, r5, r6, r7}
 8003420:	46bb      	mov	fp, r7
 8003422:	46b2      	mov	sl, r6
 8003424:	46a9      	mov	r9, r5
 8003426:	46a0      	mov	r8, r4
 8003428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342a:	00cc      	lsls	r4, r1, #3
 800342c:	1a64      	subs	r4, r4, r1
 800342e:	0064      	lsls	r4, r4, #1
 8003430:	445c      	add	r4, fp
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003432:	2500      	movs	r5, #0
 8003434:	4698      	mov	r8, r3
 8003436:	6079      	str	r1, [r7, #4]
 8003438:	e003      	b.n	8003442 <FindBroadcastRoutes+0xf6>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 800343a:	3501      	adds	r5, #1
 800343c:	3402      	adds	r4, #2
 800343e:	2d06      	cmp	r5, #6
 8003440:	d013      	beq.n	800346a <FindBroadcastRoutes+0x11e>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003442:	8820      	ldrh	r0, [r4, #0]
 8003444:	2800      	cmp	r0, #0
 8003446:	d0f8      	beq.n	800343a <FindBroadcastRoutes+0xee>
 8003448:	08c0      	lsrs	r0, r0, #3
 800344a:	3801      	subs	r0, #1
 800344c:	5c13      	ldrb	r3, [r2, r0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f3      	bne.n	800343a <FindBroadcastRoutes+0xee>
						bcastRoutes[m] |= (0x01 << (p-1));
 8003452:	8833      	ldrh	r3, [r6, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	40a9      	lsls	r1, r5
 8003458:	430b      	orrs	r3, r1
 800345a:	8033      	strh	r3, [r6, #0]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 800345c:	4643      	mov	r3, r8
 800345e:	5413      	strb	r3, [r2, r0]
						++untaged;
 8003460:	4653      	mov	r3, sl
 8003462:	3301      	adds	r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	469a      	mov	sl, r3
 8003468:	e7e7      	b.n	800343a <FindBroadcastRoutes+0xee>
 800346a:	4643      	mov	r3, r8
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	e7cb      	b.n	8003408 <FindBroadcastRoutes+0xbc>
 8003470:	2000001c 	.word	0x2000001c
 8003474:	20000adc 	.word	0x20000adc
 8003478:	20000020 	.word	0x20000020

0800347c <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 800347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347e:	46de      	mov	lr, fp
 8003480:	4657      	mov	r7, sl
 8003482:	464e      	mov	r6, r9
 8003484:	4645      	mov	r5, r8
 8003486:	b5e0      	push	{r5, r6, r7, lr}
 8003488:	b091      	sub	sp, #68	; 0x44
 800348a:	0006      	movs	r6, r0
 800348c:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 800348e:	2400      	movs	r4, #0
 8003490:	9403      	str	r4, [sp, #12]
 8003492:	222e      	movs	r2, #46	; 0x2e
 8003494:	2100      	movs	r1, #0
 8003496:	a804      	add	r0, sp, #16
 8003498:	f00e fb6b 	bl	8011b72 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 800349c:	2202      	movs	r2, #2
 800349e:	2100      	movs	r1, #0
 80034a0:	485a      	ldr	r0, [pc, #360]	; (800360c <FindRoute+0x190>)
 80034a2:	f00e fb66 	bl	8011b72 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 80034a6:	0031      	movs	r1, r6
 80034a8:	1e70      	subs	r0, r6, #1
 80034aa:	4b59      	ldr	r3, [pc, #356]	; (8003610 <FindRoute+0x194>)
 80034ac:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 80034ae:	4b59      	ldr	r3, [pc, #356]	; (8003614 <FindRoute+0x198>)
 80034b0:	541c      	strb	r4, [r3, r0]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 80034b2:	00c6      	lsls	r6, r0, #3
 80034b4:	1a36      	subs	r6, r6, r0
 80034b6:	0076      	lsls	r6, r6, #1
 80034b8:	3602      	adds	r6, #2
 80034ba:	4b57      	ldr	r3, [pc, #348]	; (8003618 <FindRoute+0x19c>)
 80034bc:	199b      	adds	r3, r3, r6
 80034be:	9301      	str	r3, [sp, #4]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 80034c0:	001a      	movs	r2, r3
	for(int col=1 ; col<=6 ; col++)
 80034c2:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 80034c4:	4653      	mov	r3, sl
 80034c6:	b29c      	uxth	r4, r3
 80034c8:	e003      	b.n	80034d2 <FindRoute+0x56>
	for(int col=1 ; col<=6 ; col++)
 80034ca:	3001      	adds	r0, #1
 80034cc:	3202      	adds	r2, #2
 80034ce:	2807      	cmp	r0, #7
 80034d0:	d00f      	beq.n	80034f2 <FindRoute+0x76>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 80034d2:	8813      	ldrh	r3, [r2, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f8      	beq.n	80034ca <FindRoute+0x4e>
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	42a3      	cmp	r3, r4
 80034dc:	d1f5      	bne.n	80034ca <FindRoute+0x4e>
			routeDist[desID-1] = 1;
 80034de:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <FindRoute+0x194>)
 80034e0:	4453      	add	r3, sl
 80034e2:	3b01      	subs	r3, #1
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <FindRoute+0x190>)
 80034ea:	4652      	mov	r2, sl
 80034ec:	701a      	strb	r2, [r3, #0]
			return col;	
 80034ee:	b2c0      	uxtb	r0, r0
 80034f0:	e084      	b.n	80035fc <FindRoute+0x180>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <FindRoute+0x1a0>)
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	2a00      	cmp	r2, #0
 80034f8:	dd14      	ble.n	8003524 <FindRoute+0xa8>
 80034fa:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 80034fc:	4844      	ldr	r0, [pc, #272]	; (8003610 <FindRoute+0x194>)
 80034fe:	1e44      	subs	r4, r0, #1
 8003500:	20ff      	movs	r0, #255	; 0xff
 8003502:	4680      	mov	r8, r0
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003504:	4843      	ldr	r0, [pc, #268]	; (8003614 <FindRoute+0x198>)
 8003506:	3801      	subs	r0, #1
 8003508:	2500      	movs	r5, #0
 800350a:	46ac      	mov	ip, r5
 800350c:	e002      	b.n	8003514 <FindRoute+0x98>
	for (int i=1 ; i<=N ; i++)   					
 800350e:	3301      	adds	r3, #1
 8003510:	4293      	cmp	r3, r2
 8003512:	dc07      	bgt.n	8003524 <FindRoute+0xa8>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003514:	4299      	cmp	r1, r3
 8003516:	d0fa      	beq.n	800350e <FindRoute+0x92>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003518:	4645      	mov	r5, r8
 800351a:	54e5      	strb	r5, [r4, r3]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 800351c:	181d      	adds	r5, r3, r0
 800351e:	4666      	mov	r6, ip
 8003520:	702e      	strb	r6, [r5, #0]
 8003522:	e7f4      	b.n	800350e <FindRoute+0x92>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003524:	2400      	movs	r4, #0
 8003526:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <FindRoute+0x19c>)
 8003528:	4698      	mov	r8, r3
 800352a:	230e      	movs	r3, #14
 800352c:	4443      	add	r3, r8
 800352e:	4699      	mov	r9, r3
			if (array[u-1][n])										// There's a neighbor v at this port n
			{	
				v = (array[u-1][n]>>3);
				if (!Q[v-1])												// v is still in Q
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8003530:	4d37      	ldr	r5, [pc, #220]	; (8003610 <FindRoute+0x194>)
 8003532:	46d3      	mov	fp, sl
	while (!QnotEmpty(Q))
 8003534:	a803      	add	r0, sp, #12
 8003536:	f7ff f96b 	bl	8002810 <QnotEmpty>
 800353a:	2800      	cmp	r0, #0
 800353c:	d12f      	bne.n	800359e <FindRoute+0x122>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 800353e:	a903      	add	r1, sp, #12
 8003540:	4833      	ldr	r0, [pc, #204]	; (8003610 <FindRoute+0x194>)
 8003542:	f7ff f947 	bl	80027d4 <minArr>
 8003546:	3001      	adds	r0, #1
 8003548:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 800354a:	455c      	cmp	r4, fp
 800354c:	d00c      	beq.n	8003568 <FindRoute+0xec>
			Q[u-1] = 1;													// Remove u from Q 
 800354e:	1e67      	subs	r7, r4, #1
 8003550:	ab03      	add	r3, sp, #12
 8003552:	2201      	movs	r2, #1
 8003554:	55da      	strb	r2, [r3, r7]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003556:	00f8      	lsls	r0, r7, #3
 8003558:	1bc0      	subs	r0, r0, r7
 800355a:	0040      	lsls	r0, r0, #1
 800355c:	1c81      	adds	r1, r0, #2
 800355e:	4441      	add	r1, r8
 8003560:	4448      	add	r0, r9
				if (!Q[v-1])												// v is still in Q
 8003562:	001a      	movs	r2, r3
 8003564:	46ba      	mov	sl, r7
 8003566:	e005      	b.n	8003574 <FindRoute+0xf8>
 8003568:	46da      	mov	sl, fp
		u = minArr(routeDist, Q)+1;						// Source node in first case
 800356a:	465c      	mov	r4, fp
 800356c:	e018      	b.n	80035a0 <FindRoute+0x124>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 800356e:	3102      	adds	r1, #2
 8003570:	4281      	cmp	r1, r0
 8003572:	d0df      	beq.n	8003534 <FindRoute+0xb8>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8003574:	880b      	ldrh	r3, [r1, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f9      	beq.n	800356e <FindRoute+0xf2>
				v = (array[u-1][n]>>3);
 800357a:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	5cd6      	ldrb	r6, [r2, r3]
 8003582:	2e00      	cmp	r6, #0
 8003584:	d1f3      	bne.n	800356e <FindRoute+0xf2>
					alt = routeDist[u-1] + 1;					// Add one hop
 8003586:	4656      	mov	r6, sl
 8003588:	5dae      	ldrb	r6, [r5, r6]
 800358a:	3601      	adds	r6, #1
 800358c:	b2f6      	uxtb	r6, r6
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 800358e:	5cef      	ldrb	r7, [r5, r3]
 8003590:	42b7      	cmp	r7, r6
 8003592:	d9ec      	bls.n	800356e <FindRoute+0xf2>
					{
						routeDist[v-1] = alt; 
 8003594:	4f1e      	ldr	r7, [pc, #120]	; (8003610 <FindRoute+0x194>)
 8003596:	54fe      	strb	r6, [r7, r3]
						routePrev[v-1] = u; 
 8003598:	4e1e      	ldr	r6, [pc, #120]	; (8003614 <FindRoute+0x198>)
 800359a:	54f4      	strb	r4, [r6, r3]
 800359c:	e7e7      	b.n	800356e <FindRoute+0xf2>
 800359e:	46da      	mov	sl, fp
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <FindRoute+0x198>)
 80035a2:	191b      	adds	r3, r3, r4
 80035a4:	3b01      	subs	r3, #1
 80035a6:	7819      	ldrb	r1, [r3, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	2900      	cmp	r1, #0
 80035ac:	d00d      	beq.n	80035ca <FindRoute+0x14e>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 80035ae:	4d17      	ldr	r5, [pc, #92]	; (800360c <FindRoute+0x190>)
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80035b0:	4818      	ldr	r0, [pc, #96]	; (8003614 <FindRoute+0x198>)
 80035b2:	e000      	b.n	80035b6 <FindRoute+0x13a>
 80035b4:	0011      	movs	r1, r2
		route[j++] = u;          				// Push the vertex onto the stack
 80035b6:	001a      	movs	r2, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	54ac      	strb	r4, [r5, r2]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80035be:	1842      	adds	r2, r0, r1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	000c      	movs	r4, r1
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	d1f4      	bne.n	80035b4 <FindRoute+0x138>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 80035ca:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 80035cc:	4c0f      	ldr	r4, [pc, #60]	; (800360c <FindRoute+0x190>)
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <FindRoute+0x194>)
 80035d0:	4453      	add	r3, sl
 80035d2:	001f      	movs	r7, r3
 80035d4:	3f01      	subs	r7, #1
 80035d6:	9901      	ldr	r1, [sp, #4]
 80035d8:	e003      	b.n	80035e2 <FindRoute+0x166>
	for(int col=1 ; col<=6 ; col++)	
 80035da:	3001      	adds	r0, #1
 80035dc:	3102      	adds	r1, #2
 80035de:	2807      	cmp	r0, #7
 80035e0:	d00b      	beq.n	80035fa <FindRoute+0x17e>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 80035e2:	880b      	ldrh	r3, [r1, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f8      	beq.n	80035da <FindRoute+0x15e>
 80035e8:	783a      	ldrb	r2, [r7, #0]
 80035ea:	18a2      	adds	r2, r4, r2
 80035ec:	3a01      	subs	r2, #1
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d1f1      	bne.n	80035da <FindRoute+0x15e>
			return col;	
 80035f6:	b2c0      	uxtb	r0, r0
 80035f8:	e000      	b.n	80035fc <FindRoute+0x180>
		}
	}	

	return 0;			
 80035fa:	2000      	movs	r0, #0
}
 80035fc:	b011      	add	sp, #68	; 0x44
 80035fe:	bcf0      	pop	{r4, r5, r6, r7}
 8003600:	46bb      	mov	fp, r7
 8003602:	46b2      	mov	sl, r6
 8003604:	46a9      	mov	r9, r5
 8003606:	46a0      	mov	r8, r4
 8003608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	200066b8 	.word	0x200066b8
 8003610:	20000dec 	.word	0x20000dec
 8003614:	20000df0 	.word	0x20000df0
 8003618:	20000020 	.word	0x20000020
 800361c:	2000001c 	.word	0x2000001c

08003620 <remoteBootloaderUpdate>:
{
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	46ce      	mov	lr, r9
 8003624:	4647      	mov	r7, r8
 8003626:	b580      	push	{r7, lr}
 8003628:	b085      	sub	sp, #20
 800362a:	4680      	mov	r8, r0
 800362c:	000d      	movs	r5, r1
 800362e:	0016      	movs	r6, r2
 8003630:	001f      	movs	r7, r3
	myOutport = FindRoute(myID, dst);
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <remoteBootloaderUpdate+0xec>)
 8003634:	7818      	ldrb	r0, [r3, #0]
 8003636:	f7ff ff21 	bl	800347c <FindRoute>
 800363a:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 800363c:	2f00      	cmp	r7, #0
 800363e:	d024      	beq.n	800368a <remoteBootloaderUpdate+0x6a>
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <remoteBootloaderUpdate+0xec>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	42ab      	cmp	r3, r5
 8003646:	d05e      	beq.n	8003706 <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003648:	2200      	movs	r2, #0
 800364a:	4691      	mov	r9, r2
	if (src == myID)
 800364c:	4543      	cmp	r3, r8
 800364e:	d050      	beq.n	80036f2 <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 8003650:	0030      	movs	r0, r6
 8003652:	f7ff fd73 	bl	800313c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003656:	0020      	movs	r0, r4
 8003658:	f7ff fd70 	bl	800313c <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <remoteBootloaderUpdate+0xec>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	454b      	cmp	r3, r9
 8003662:	d03f      	beq.n	80036e4 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <remoteBootloaderUpdate+0xec>)
 8003666:	7819      	ldrb	r1, [r3, #0]
 8003668:	2300      	movs	r3, #0
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	9302      	str	r3, [sp, #8]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	3303      	adds	r3, #3
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	000b      	movs	r3, r1
 8003678:	0022      	movs	r2, r4
 800367a:	0030      	movs	r0, r6
 800367c:	f005 fa1e 	bl	8008abc <StartScastDMAStream>
}
 8003680:	b005      	add	sp, #20
 8003682:	bcc0      	pop	{r6, r7}
 8003684:	46b9      	mov	r9, r7
 8003686:	46b0      	mov	r8, r6
 8003688:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 800368a:	4b21      	ldr	r3, [pc, #132]	; (8003710 <remoteBootloaderUpdate+0xf0>)
 800368c:	195b      	adds	r3, r3, r5
 800368e:	3b01      	subs	r3, #1
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	2a01      	cmp	r2, #1
 8003694:	d022      	beq.n	80036dc <remoteBootloaderUpdate+0xbc>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <remoteBootloaderUpdate+0xf4>)
 8003698:	189b      	adds	r3, r3, r2
 800369a:	3b01      	subs	r3, #1
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4699      	mov	r9, r3
	if (src == myID)
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <remoteBootloaderUpdate+0xec>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4543      	cmp	r3, r8
 80036a6:	d1d3      	bne.n	8003650 <remoteBootloaderUpdate+0x30>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80036a8:	f009 fa2e 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 80036ac:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <remoteBootloaderUpdate+0xf8>)
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	002a      	movs	r2, r5
 80036b4:	f00e fc52 	bl	8011f5c <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <remoteBootloaderUpdate+0xfc>)
 80036ba:	6819      	ldr	r1, [r3, #0]
 80036bc:	4640      	mov	r0, r8
 80036be:	f00e fc6d 	bl	8011f9c <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 80036c2:	4640      	mov	r0, r8
 80036c4:	f7fc fd28 	bl	8000118 <strlen>
 80036c8:	b282      	uxth	r2, r0
 80036ca:	2332      	movs	r3, #50	; 0x32
 80036cc:	4641      	mov	r1, r8
 80036ce:	0030      	movs	r0, r6
 80036d0:	f008 fff4 	bl	800c6bc <writePxITMutex>
		Delay_ms(100);
 80036d4:	2064      	movs	r0, #100	; 0x64
 80036d6:	f00b f967 	bl	800e9a8 <HAL_Delay>
 80036da:	e7b9      	b.n	8003650 <remoteBootloaderUpdate+0x30>
			lastModule = myID;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <remoteBootloaderUpdate+0xec>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	4699      	mov	r9, r3
 80036e2:	e7dd      	b.n	80036a0 <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport), REVERSED);
 80036e4:	0020      	movs	r0, r4
 80036e6:	f008 ff9b 	bl	800c620 <GetUart>
 80036ea:	2101      	movs	r1, #1
 80036ec:	f009 f834 	bl	800c758 <SwapUartPins>
 80036f0:	e7b8      	b.n	8003664 <remoteBootloaderUpdate+0x44>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80036f2:	f009 fa09 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 80036f6:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <remoteBootloaderUpdate+0x100>)
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	003b      	movs	r3, r7
 80036fe:	002a      	movs	r2, r5
 8003700:	f00e fc2c 	bl	8011f5c <sprintf>
 8003704:	e7d8      	b.n	80036b8 <remoteBootloaderUpdate+0x98>
		lastModule = myID;
 8003706:	46a9      	mov	r9, r5
		myOutport = outport;
 8003708:	003c      	movs	r4, r7
 800370a:	e79f      	b.n	800364c <remoteBootloaderUpdate+0x2c>
 800370c:	20000070 	.word	0x20000070
 8003710:	20000dec 	.word	0x20000dec
 8003714:	200066b8 	.word	0x200066b8
 8003718:	20000098 	.word	0x20000098
 800371c:	200000a0 	.word	0x200000a0
 8003720:	2000009c 	.word	0x2000009c

08003724 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003726:	46de      	mov	lr, fp
 8003728:	4657      	mov	r7, sl
 800372a:	464e      	mov	r6, r9
 800372c:	4645      	mov	r5, r8
 800372e:	b5e0      	push	{r5, r6, r7, lr}
 8003730:	b083      	sub	sp, #12
 8003732:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003734:	4c5b      	ldr	r4, [pc, #364]	; (80038a4 <DisplayTopology+0x180>)
 8003736:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <DisplayTopology+0x184>)
 8003738:	0022      	movs	r2, r4
 800373a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800373c:	c223      	stmia	r2!, {r0, r1, r5}
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	6011      	str	r1, [r2, #0]
 8003742:	889b      	ldrh	r3, [r3, #4]
 8003744:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003746:	0020      	movs	r0, r4
 8003748:	f7fc fce6 	bl	8000118 <strlen>
 800374c:	b282      	uxth	r2, r0
 800374e:	2301      	movs	r3, #1
 8003750:	425b      	negs	r3, r3
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	3333      	adds	r3, #51	; 0x33
 8003756:	0021      	movs	r1, r4
 8003758:	0038      	movs	r0, r7
 800375a:	f008 ff83 	bl	800c664 <writePxMutex>
 800375e:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 8003760:	4b52      	ldr	r3, [pc, #328]	; (80038ac <DisplayTopology+0x188>)
 8003762:	4698      	mov	r8, r3
 8003764:	4d4f      	ldr	r5, [pc, #316]	; (80038a4 <DisplayTopology+0x180>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003766:	2601      	movs	r6, #1
 8003768:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 800376a:	0022      	movs	r2, r4
 800376c:	4641      	mov	r1, r8
 800376e:	0028      	movs	r0, r5
 8003770:	f00e fbf4 	bl	8011f5c <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003774:	0028      	movs	r0, r5
 8003776:	f7fc fccf 	bl	8000118 <strlen>
 800377a:	b282      	uxth	r2, r0
 800377c:	9600      	str	r6, [sp, #0]
 800377e:	2332      	movs	r3, #50	; 0x32
 8003780:	0029      	movs	r1, r5
 8003782:	0038      	movs	r0, r7
 8003784:	f008 ff6e 	bl	800c664 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8003788:	3401      	adds	r4, #1
 800378a:	2c07      	cmp	r4, #7
 800378c:	d1ed      	bne.n	800376a <DisplayTopology+0x46>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 800378e:	2301      	movs	r3, #1
 8003790:	425b      	negs	r3, r3
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	3333      	adds	r3, #51	; 0x33
 8003796:	2203      	movs	r2, #3
 8003798:	4945      	ldr	r1, [pc, #276]	; (80038b0 <DisplayTopology+0x18c>)
 800379a:	0038      	movs	r0, r7
 800379c:	f008 ff62 	bl	800c664 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 80037a0:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <DisplayTopology+0x190>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d06d      	beq.n	8003884 <DisplayTopology+0x160>
 80037a8:	2300      	movs	r3, #0
 80037aa:	469b      	mov	fp, r3
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 80037ac:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <DisplayTopology+0x194>)
 80037ae:	469a      	mov	sl, r3
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80037b0:	2601      	movs	r6, #1
 80037b2:	4276      	negs	r6, r6
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <DisplayTopology+0x198>)
 80037b6:	4699      	mov	r9, r3
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 80037b8:	46b8      	mov	r8, r7
 80037ba:	e02b      	b.n	8003814 <DisplayTopology+0xf0>
 80037bc:	2307      	movs	r3, #7
 80037be:	4013      	ands	r3, r2
 80037c0:	08d2      	lsrs	r2, r2, #3
 80037c2:	493f      	ldr	r1, [pc, #252]	; (80038c0 <DisplayTopology+0x19c>)
 80037c4:	4837      	ldr	r0, [pc, #220]	; (80038a4 <DisplayTopology+0x180>)
 80037c6:	f00e fbc9 	bl	8011f5c <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 80037ca:	4d36      	ldr	r5, [pc, #216]	; (80038a4 <DisplayTopology+0x180>)
 80037cc:	0028      	movs	r0, r5
 80037ce:	f7fc fca3 	bl	8000118 <strlen>
 80037d2:	b282      	uxth	r2, r0
 80037d4:	9600      	str	r6, [sp, #0]
 80037d6:	2332      	movs	r3, #50	; 0x32
 80037d8:	0029      	movs	r1, r5
 80037da:	4640      	mov	r0, r8
 80037dc:	f008 ff42 	bl	800c664 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 80037e0:	3402      	adds	r4, #2
 80037e2:	42bc      	cmp	r4, r7
 80037e4:	d007      	beq.n	80037f6 <DisplayTopology+0xd2>
			if (!array[row][col])
 80037e6:	8822      	ldrh	r2, [r4, #0]
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	d1e7      	bne.n	80037bc <DisplayTopology+0x98>
				sprintf(pcUserMessage, "%d\t",0);
 80037ec:	4935      	ldr	r1, [pc, #212]	; (80038c4 <DisplayTopology+0x1a0>)
 80037ee:	482d      	ldr	r0, [pc, #180]	; (80038a4 <DisplayTopology+0x180>)
 80037f0:	f00e fbb4 	bl	8011f5c <sprintf>
 80037f4:	e7e9      	b.n	80037ca <DisplayTopology+0xa6>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 80037f6:	9600      	str	r6, [sp, #0]
 80037f8:	2332      	movs	r3, #50	; 0x32
 80037fa:	2202      	movs	r2, #2
 80037fc:	4932      	ldr	r1, [pc, #200]	; (80038c8 <DisplayTopology+0x1a4>)
 80037fe:	4640      	mov	r0, r8
 8003800:	f008 ff30 	bl	800c664 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8003804:	465b      	mov	r3, fp
 8003806:	3301      	adds	r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	469b      	mov	fp, r3
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <DisplayTopology+0x190>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	455b      	cmp	r3, fp
 8003812:	d936      	bls.n	8003882 <DisplayTopology+0x15e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8003814:	465b      	mov	r3, fp
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	4c22      	ldr	r4, [pc, #136]	; (80038a4 <DisplayTopology+0x180>)
 800381a:	4651      	mov	r1, sl
 800381c:	0020      	movs	r0, r4
 800381e:	f00e fb9d 	bl	8011f5c <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003822:	0020      	movs	r0, r4
 8003824:	f7fc fc78 	bl	8000118 <strlen>
 8003828:	b282      	uxth	r2, r0
 800382a:	9600      	str	r6, [sp, #0]
 800382c:	2332      	movs	r3, #50	; 0x32
 800382e:	0021      	movs	r1, r4
 8003830:	4640      	mov	r0, r8
 8003832:	f008 ff17 	bl	800c664 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003836:	465b      	mov	r3, fp
 8003838:	00df      	lsls	r7, r3, #3
 800383a:	1afb      	subs	r3, r7, r3
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	464a      	mov	r2, r9
 8003840:	5a9b      	ldrh	r3, [r3, r2]
 8003842:	0059      	lsls	r1, r3, #1
 8003844:	18c9      	adds	r1, r1, r3
 8003846:	0049      	lsls	r1, r1, #1
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <DisplayTopology+0x1a8>)
 800384a:	18c9      	adds	r1, r1, r3
 800384c:	2205      	movs	r2, #5
 800384e:	0020      	movs	r0, r4
 8003850:	f00e fbd8 	bl	8012004 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8003854:	9600      	str	r6, [sp, #0]
 8003856:	2332      	movs	r3, #50	; 0x32
 8003858:	2205      	movs	r2, #5
 800385a:	0021      	movs	r1, r4
 800385c:	4640      	mov	r0, r8
 800385e:	f008 ff01 	bl	800c664 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8003862:	9600      	str	r6, [sp, #0]
 8003864:	2332      	movs	r3, #50	; 0x32
 8003866:	2201      	movs	r2, #1
 8003868:	4919      	ldr	r1, [pc, #100]	; (80038d0 <DisplayTopology+0x1ac>)
 800386a:	4640      	mov	r0, r8
 800386c:	f008 fefa 	bl	800c664 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8003870:	465b      	mov	r3, fp
 8003872:	1aff      	subs	r7, r7, r3
 8003874:	007f      	lsls	r7, r7, #1
 8003876:	1cbc      	adds	r4, r7, #2
 8003878:	444c      	add	r4, r9
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <DisplayTopology+0x1b0>)
 800387c:	469c      	mov	ip, r3
 800387e:	4467      	add	r7, ip
 8003880:	e7b1      	b.n	80037e6 <DisplayTopology+0xc2>
 8003882:	4647      	mov	r7, r8
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003884:	2301      	movs	r3, #1
 8003886:	425b      	negs	r3, r3
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	3333      	adds	r3, #51	; 0x33
 800388c:	2201      	movs	r2, #1
 800388e:	4912      	ldr	r1, [pc, #72]	; (80038d8 <DisplayTopology+0x1b4>)
 8003890:	0038      	movs	r0, r7
 8003892:	f008 fee7 	bl	800c664 <writePxMutex>
}
 8003896:	b003      	add	sp, #12
 8003898:	bcf0      	pop	{r4, r5, r6, r7}
 800389a:	46bb      	mov	fp, r7
 800389c:	46b2      	mov	sl, r6
 800389e:	46a9      	mov	r9, r5
 80038a0:	46a0      	mov	r8, r4
 80038a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a4:	20000d7c 	.word	0x20000d7c
 80038a8:	08017df8 	.word	0x08017df8
 80038ac:	08017e0c 	.word	0x08017e0c
 80038b0:	08018800 	.word	0x08018800
 80038b4:	2000001c 	.word	0x2000001c
 80038b8:	08017e14 	.word	0x08017e14
 80038bc:	20000020 	.word	0x20000020
 80038c0:	08017e24 	.word	0x08017e24
 80038c4:	08017e20 	.word	0x08017e20
 80038c8:	08017f30 	.word	0x08017f30
 80038cc:	080182a8 	.word	0x080182a8
 80038d0:	08017e08 	.word	0x08017e08
 80038d4:	2000002e 	.word	0x2000002e
 80038d8:	08019b94 	.word	0x08019b94

080038dc <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	46d6      	mov	lr, sl
 80038e0:	464f      	mov	r7, r9
 80038e2:	4646      	mov	r6, r8
 80038e4:	b5c0      	push	{r6, r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	4680      	mov	r8, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 80038ea:	4c31      	ldr	r4, [pc, #196]	; (80039b0 <DisplayPortsDir+0xd4>)
 80038ec:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <DisplayPortsDir+0xd8>)
 80038ee:	0022      	movs	r2, r4
 80038f0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80038f2:	c223      	stmia	r2!, {r0, r1, r5}
 80038f4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80038f6:	c223      	stmia	r2!, {r0, r1, r5}
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80038fc:	0020      	movs	r0, r4
 80038fe:	f7fc fc0b 	bl	8000118 <strlen>
 8003902:	b282      	uxth	r2, r0
 8003904:	2301      	movs	r3, #1
 8003906:	425b      	negs	r3, r3
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	3333      	adds	r3, #51	; 0x33
 800390c:	0021      	movs	r1, r4
 800390e:	4640      	mov	r0, r8
 8003910:	f008 fea8 	bl	800c664 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 8003914:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <DisplayPortsDir+0xdc>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2701      	movs	r7, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02c      	beq.n	8003978 <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800391e:	4e27      	ldr	r6, [pc, #156]	; (80039bc <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <DisplayPortsDir+0xe4>)
 8003922:	4699      	mov	r9, r3
 8003924:	e024      	b.n	8003970 <DisplayPortsDir+0x94>
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <DisplayPortsDir+0xd4>)
 8003928:	469a      	mov	sl, r3
 800392a:	0023      	movs	r3, r4
 800392c:	003a      	movs	r2, r7
 800392e:	4649      	mov	r1, r9
 8003930:	4650      	mov	r0, sl
 8003932:	f00e fb13 	bl	8011f5c <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003936:	4650      	mov	r0, sl
 8003938:	f7fc fbee 	bl	8000118 <strlen>
 800393c:	b282      	uxth	r2, r0
 800393e:	2301      	movs	r3, #1
 8003940:	425b      	negs	r3, r3
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	3333      	adds	r3, #51	; 0x33
 8003946:	4651      	mov	r1, sl
 8003948:	4640      	mov	r0, r8
 800394a:	f008 fe8b 	bl	800c664 <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 800394e:	2c0a      	cmp	r4, #10
 8003950:	d008      	beq.n	8003964 <DisplayPortsDir+0x88>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003952:	0021      	movs	r1, r4
 8003954:	3401      	adds	r4, #1
 8003956:	5baa      	ldrh	r2, [r5, r6]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	410b      	asrs	r3, r1
 800395e:	4213      	tst	r3, r2
 8003960:	d0f5      	beq.n	800394e <DisplayPortsDir+0x72>
 8003962:	e7e0      	b.n	8003926 <DisplayPortsDir+0x4a>
	for (uint8_t i=1 ; i<=N ; i++) 
 8003964:	3701      	adds	r7, #1
 8003966:	b2ff      	uxtb	r7, r7
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <DisplayPortsDir+0xdc>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	42bb      	cmp	r3, r7
 800396e:	d303      	bcc.n	8003978 <DisplayPortsDir+0x9c>
{
 8003970:	2400      	movs	r4, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003972:	1e7d      	subs	r5, r7, #1
 8003974:	006d      	lsls	r5, r5, #1
 8003976:	e7ec      	b.n	8003952 <DisplayPortsDir+0x76>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <DisplayPortsDir+0xd4>)
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <DisplayPortsDir+0xe8>)
 800397c:	0022      	movs	r2, r4
 800397e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003980:	c223      	stmia	r2!, {r0, r1, r5}
 8003982:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003984:	c223      	stmia	r2!, {r0, r1, r5}
 8003986:	cb03      	ldmia	r3!, {r0, r1}
 8003988:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800398a:	0020      	movs	r0, r4
 800398c:	f7fc fbc4 	bl	8000118 <strlen>
 8003990:	b282      	uxth	r2, r0
 8003992:	2301      	movs	r3, #1
 8003994:	425b      	negs	r3, r3
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	3333      	adds	r3, #51	; 0x33
 800399a:	0021      	movs	r1, r4
 800399c:	4640      	mov	r0, r8
 800399e:	f008 fe61 	bl	800c664 <writePxMutex>
}
 80039a2:	b002      	add	sp, #8
 80039a4:	bce0      	pop	{r5, r6, r7}
 80039a6:	46ba      	mov	sl, r7
 80039a8:	46b1      	mov	r9, r6
 80039aa:	46a8      	mov	r8, r5
 80039ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	20000d7c 	.word	0x20000d7c
 80039b4:	08017e2c 	.word	0x08017e2c
 80039b8:	2000001c 	.word	0x2000001c
 80039bc:	20006a18 	.word	0x20006a18
 80039c0:	08017e48 	.word	0x08017e48
 80039c4:	08017e5c 	.word	0x08017e5c

080039c8 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 80039c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ca:	46d6      	mov	lr, sl
 80039cc:	464f      	mov	r7, r9
 80039ce:	4646      	mov	r6, r8
 80039d0:	b5c0      	push	{r6, r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80039d6:	f009 f897 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 80039da:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 80039dc:	2300      	movs	r3, #0
 80039de:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 80039e0:	4b91      	ldr	r3, [pc, #580]	; (8003c28 <DisplayModuleStatus+0x260>)
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	4d91      	ldr	r5, [pc, #580]	; (8003c2c <DisplayModuleStatus+0x264>)
 80039e6:	4992      	ldr	r1, [pc, #584]	; (8003c30 <DisplayModuleStatus+0x268>)
 80039e8:	0028      	movs	r0, r5
 80039ea:	f00e fab7 	bl	8011f5c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80039ee:	0029      	movs	r1, r5
 80039f0:	0020      	movs	r0, r4
 80039f2:	f00e fad3 	bl	8011f9c <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 80039f6:	4b8f      	ldr	r3, [pc, #572]	; (8003c34 <DisplayModuleStatus+0x26c>)
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	498f      	ldr	r1, [pc, #572]	; (8003c38 <DisplayModuleStatus+0x270>)
 80039fc:	0028      	movs	r0, r5
 80039fe:	f00e faad 	bl	8011f5c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003a02:	0029      	movs	r1, r5
 8003a04:	0020      	movs	r0, r4
 8003a06:	f00e fac9 	bl	8011f9c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	3b02      	subs	r3, #2
 8003a10:	2200      	movs	r2, #0
 8003a12:	498a      	ldr	r1, [pc, #552]	; (8003c3c <DisplayModuleStatus+0x274>)
 8003a14:	0028      	movs	r0, r5
 8003a16:	f00e faa1 	bl	8011f5c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003a1a:	0029      	movs	r1, r5
 8003a1c:	0020      	movs	r0, r4
 8003a1e:	f00e fabd 	bl	8011f9c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <DisplayModuleStatus+0x278>)
 8003a24:	4987      	ldr	r1, [pc, #540]	; (8003c44 <DisplayModuleStatus+0x27c>)
 8003a26:	0028      	movs	r0, r5
 8003a28:	f00e fa98 	bl	8011f5c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003a2c:	0029      	movs	r1, r5
 8003a2e:	0020      	movs	r0, r4
 8003a30:	f00e fab4 	bl	8011f9c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8003a34:	4a84      	ldr	r2, [pc, #528]	; (8003c48 <DisplayModuleStatus+0x280>)
 8003a36:	4985      	ldr	r1, [pc, #532]	; (8003c4c <DisplayModuleStatus+0x284>)
 8003a38:	0028      	movs	r0, r5
 8003a3a:	f00e fa8f 	bl	8011f5c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003a3e:	0029      	movs	r1, r5
 8003a40:	0020      	movs	r0, r4
 8003a42:	f00e faab 	bl	8011f9c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8003a46:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <DisplayModuleStatus+0x288>)
 8003a48:	002a      	movs	r2, r5
 8003a4a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003a4c:	c243      	stmia	r2!, {r0, r1, r6}
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	8899      	ldrh	r1, [r3, #4]
 8003a54:	8091      	strh	r1, [r2, #4]
 8003a56:	799b      	ldrb	r3, [r3, #6]
 8003a58:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 8003a5a:	0029      	movs	r1, r5
 8003a5c:	0020      	movs	r0, r4
 8003a5e:	f00e fa9d 	bl	8011f9c <strcat>
 8003a62:	2501      	movs	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 8003a64:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <DisplayModuleStatus+0x28c>)
 8003a66:	4699      	mov	r9, r3
 8003a68:	4f70      	ldr	r7, [pc, #448]	; (8003c2c <DisplayModuleStatus+0x264>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 8003a6a:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <DisplayModuleStatus+0x290>)
 8003a6c:	469a      	mov	sl, r3
 8003a6e:	e00e      	b.n	8003a8e <DisplayModuleStatus+0xc6>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8003a70:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003a72:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <DisplayModuleStatus+0x294>)
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	6019      	str	r1, [r3, #0]
 8003a78:	8891      	ldrh	r1, [r2, #4]
 8003a7a:	8099      	strh	r1, [r3, #4]
 8003a7c:	7992      	ldrb	r2, [r2, #6]
 8003a7e:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8003a80:	496a      	ldr	r1, [pc, #424]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003a82:	0020      	movs	r0, r4
 8003a84:	f00e fa8a 	bl	8011f9c <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8003a88:	3501      	adds	r5, #1
 8003a8a:	2d07      	cmp	r5, #7
 8003a8c:	d039      	beq.n	8003b02 <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage, "P%d: ", i);
 8003a8e:	002a      	movs	r2, r5
 8003a90:	4649      	mov	r1, r9
 8003a92:	0038      	movs	r0, r7
 8003a94:	f00e fa62 	bl	8011f5c <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8003a98:	0039      	movs	r1, r7
 8003a9a:	0020      	movs	r0, r4
 8003a9c:	f00e fa7e 	bl	8011f9c <strcat>
		switch (portStatus[i])
 8003aa0:	4653      	mov	r3, sl
 8003aa2:	5ceb      	ldrb	r3, [r5, r3]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d8eb      	bhi.n	8003a80 <DisplayModuleStatus+0xb8>
 8003aa8:	4653      	mov	r3, sl
 8003aaa:	5ceb      	ldrb	r3, [r5, r3]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a6c      	ldr	r2, [pc, #432]	; (8003c60 <DisplayModuleStatus+0x298>)
 8003ab0:	58d3      	ldr	r3, [r2, r3]
 8003ab2:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8003ab4:	495d      	ldr	r1, [pc, #372]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003ab6:	4b6b      	ldr	r3, [pc, #428]	; (8003c64 <DisplayModuleStatus+0x29c>)
 8003ab8:	000a      	movs	r2, r1
 8003aba:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003abc:	c243      	stmia	r2!, {r0, r1, r6}
 8003abe:	cb03      	ldmia	r3!, {r0, r1}
 8003ac0:	c203      	stmia	r2!, {r0, r1}
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	7013      	strb	r3, [r2, #0]
 8003ac6:	e7db      	b.n	8003a80 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <DisplayModuleStatus+0x2a0>)
 8003acc:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ace:	c243      	stmia	r2!, {r0, r1, r6}
 8003ad0:	e7d6      	b.n	8003a80 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8003ad2:	4956      	ldr	r1, [pc, #344]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <DisplayModuleStatus+0x2a4>)
 8003ad6:	000a      	movs	r2, r1
 8003ad8:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ada:	c243      	stmia	r2!, {r0, r1, r6}
 8003adc:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ade:	c243      	stmia	r2!, {r0, r1, r6}
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	8013      	strh	r3, [r2, #0]
 8003ae4:	e7cc      	b.n	8003a80 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8003ae6:	4951      	ldr	r1, [pc, #324]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <DisplayModuleStatus+0x2a8>)
 8003aea:	000a      	movs	r2, r1
 8003aec:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003aee:	c243      	stmia	r2!, {r0, r1, r6}
 8003af0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003af2:	c243      	stmia	r2!, {r0, r1, r6}
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	6011      	str	r1, [r2, #0]
 8003af8:	8899      	ldrh	r1, [r3, #4]
 8003afa:	8091      	strh	r1, [r2, #4]
 8003afc:	799b      	ldrb	r3, [r3, #6]
 8003afe:	7193      	strb	r3, [r2, #6]
 8003b00:	e7be      	b.n	8003a80 <DisplayModuleStatus+0xb8>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8003b02:	494a      	ldr	r1, [pc, #296]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003b04:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <DisplayModuleStatus+0x2ac>)
 8003b06:	000a      	movs	r2, r1
 8003b08:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003b0a:	c261      	stmia	r2!, {r0, r5, r6}
 8003b0c:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003b0e:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003b10:	0020      	movs	r0, r4
 8003b12:	f00e fa43 	bl	8011f9c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8003b16:	4e58      	ldr	r6, [pc, #352]	; (8003c78 <DisplayModuleStatus+0x2b0>)
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003b18:	2701      	movs	r7, #1
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
				strcat( (char *) pcOutputString, pcUserMessage);
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003b1a:	4d44      	ldr	r5, [pc, #272]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003b1c:	e00e      	b.n	8003b3c <DisplayModuleStatus+0x174>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003b20:	469a      	mov	sl, r3
 8003b22:	003a      	movs	r2, r7
 8003b24:	4955      	ldr	r1, [pc, #340]	; (8003c7c <DisplayModuleStatus+0x2b4>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f00e fa18 	bl	8011f5c <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	0020      	movs	r0, r4
 8003b30:	f00e fa34 	bl	8011f9c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8003b34:	3701      	adds	r7, #1
 8003b36:	3638      	adds	r6, #56	; 0x38
 8003b38:	2f07      	cmp	r7, #7
 8003b3a:	d017      	beq.n	8003b6c <DisplayModuleStatus+0x1a4>
		if (streamDMA[i-1].Instance == 0) {
 8003b3c:	6833      	ldr	r3, [r6, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ed      	beq.n	8003b1e <DisplayModuleStatus+0x156>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003b42:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003b44:	f006 fed2 	bl	800a8ec <GetPort>
 8003b48:	4682      	mov	sl, r0
 8003b4a:	00bb      	lsls	r3, r7, #2
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <DisplayModuleStatus+0x2b8>)
 8003b4e:	58d0      	ldr	r0, [r2, r3]
 8003b50:	f006 fecc 	bl	800a8ec <GetPort>
 8003b54:	9000      	str	r0, [sp, #0]
 8003b56:	4653      	mov	r3, sl
 8003b58:	003a      	movs	r2, r7
 8003b5a:	494a      	ldr	r1, [pc, #296]	; (8003c84 <DisplayModuleStatus+0x2bc>)
 8003b5c:	0028      	movs	r0, r5
 8003b5e:	f00e f9fd 	bl	8011f5c <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003b62:	0029      	movs	r1, r5
 8003b64:	0020      	movs	r0, r4
 8003b66:	f00e fa19 	bl	8011f9c <strcat>
 8003b6a:	e7e3      	b.n	8003b34 <DisplayModuleStatus+0x16c>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003b6c:	0020      	movs	r0, r4
 8003b6e:	f7fc fad3 	bl	8000118 <strlen>
 8003b72:	1820      	adds	r0, r4, r0
 8003b74:	2203      	movs	r2, #3
 8003b76:	4944      	ldr	r1, [pc, #272]	; (8003c88 <DisplayModuleStatus+0x2c0>)
 8003b78:	f00d fff2 	bl	8011b60 <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8003b7c:	0020      	movs	r0, r4
 8003b7e:	f7fc facb 	bl	8000118 <strlen>
 8003b82:	1820      	adds	r0, r4, r0
 8003b84:	221d      	movs	r2, #29
 8003b86:	4941      	ldr	r1, [pc, #260]	; (8003c8c <DisplayModuleStatus+0x2c4>)
 8003b88:	f00d ffea 	bl	8011b60 <memcpy>
	temp = strlen( (char *) pcOutputString);
 8003b8c:	0020      	movs	r0, r4
 8003b8e:	f7fc fac3 	bl	8000118 <strlen>
 8003b92:	4681      	mov	r9, r0
 8003b94:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003b96:	4e3e      	ldr	r6, [pc, #248]	; (8003c90 <DisplayModuleStatus+0x2c8>)
 8003b98:	4f23      	ldr	r7, [pc, #140]	; (8003c28 <DisplayModuleStatus+0x260>)
 8003b9a:	e00c      	b.n	8003bb6 <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <DisplayModuleStatus+0x264>)
 8003b9e:	469a      	mov	sl, r3
 8003ba0:	002a      	movs	r2, r5
 8003ba2:	493c      	ldr	r1, [pc, #240]	; (8003c94 <DisplayModuleStatus+0x2cc>)
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f00e f9d9 	bl	8011f5c <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 8003baa:	4651      	mov	r1, sl
 8003bac:	0020      	movs	r0, r4
 8003bae:	f00e f9f5 	bl	8011f9c <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003bb2:	2d06      	cmp	r5, #6
 8003bb4:	d00b      	beq.n	8003bce <DisplayModuleStatus+0x206>
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003bb6:	0029      	movs	r1, r5
 8003bb8:	3501      	adds	r5, #1
 8003bba:	783b      	ldrb	r3, [r7, #0]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	5b9a      	ldrh	r2, [r3, r6]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	410b      	asrs	r3, r1
 8003bc8:	4213      	tst	r3, r2
 8003bca:	d0f2      	beq.n	8003bb2 <DisplayModuleStatus+0x1ea>
 8003bcc:	e7e6      	b.n	8003b9c <DisplayModuleStatus+0x1d4>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8003bce:	0020      	movs	r0, r4
 8003bd0:	f7fc faa2 	bl	8000118 <strlen>
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	041e      	lsls	r6, r3, #16
 8003bd8:	0c36      	lsrs	r6, r6, #16
 8003bda:	42b0      	cmp	r0, r6
 8003bdc:	d010      	beq.n	8003c00 <DisplayModuleStatus+0x238>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003bde:	0020      	movs	r0, r4
 8003be0:	f7fc fa9a 	bl	8000118 <strlen>
 8003be4:	1820      	adds	r0, r4, r0
 8003be6:	2203      	movs	r2, #3
 8003be8:	4927      	ldr	r1, [pc, #156]	; (8003c88 <DisplayModuleStatus+0x2c0>)
 8003bea:	f00d ffb9 	bl	8011b60 <memcpy>
	
	/* Display output */
	if (port)
 8003bee:	4643      	mov	r3, r8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <DisplayModuleStatus+0x244>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bce0      	pop	{r5, r6, r7}
 8003bf8:	46ba      	mov	sl, r7
 8003bfa:	46b1      	mov	r9, r6
 8003bfc:	46a8      	mov	r8, r5
 8003bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8003c00:	1820      	adds	r0, r4, r0
 8003c02:	2205      	movs	r2, #5
 8003c04:	4924      	ldr	r1, [pc, #144]	; (8003c98 <DisplayModuleStatus+0x2d0>)
 8003c06:	f00d ffab 	bl	8011b60 <memcpy>
 8003c0a:	e7e8      	b.n	8003bde <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8003c0c:	0020      	movs	r0, r4
 8003c0e:	f7fc fa83 	bl	8000118 <strlen>
 8003c12:	b282      	uxth	r2, r0
 8003c14:	2301      	movs	r3, #1
 8003c16:	425b      	negs	r3, r3
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	3333      	adds	r3, #51	; 0x33
 8003c1c:	0021      	movs	r1, r4
 8003c1e:	4640      	mov	r0, r8
 8003c20:	f008 fd20 	bl	800c664 <writePxMutex>
}
 8003c24:	e7e6      	b.n	8003bf4 <DisplayModuleStatus+0x22c>
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000070 	.word	0x20000070
 8003c2c:	20000d7c 	.word	0x20000d7c
 8003c30:	08017e7c 	.word	0x08017e7c
 8003c34:	20000ad7 	.word	0x20000ad7
 8003c38:	08017e98 	.word	0x08017e98
 8003c3c:	08017eb4 	.word	0x08017eb4
 8003c40:	08017ed4 	.word	0x08017ed4
 8003c44:	08017ee0 	.word	0x08017ee0
 8003c48:	08017ef8 	.word	0x08017ef8
 8003c4c:	08017f04 	.word	0x08017f04
 8003c50:	08017f20 	.word	0x08017f20
 8003c54:	08017f34 	.word	0x08017f34
 8003c58:	20000dcc 	.word	0x20000dcc
 8003c5c:	08017f3c 	.word	0x08017f3c
 8003c60:	08018038 	.word	0x08018038
 8003c64:	08017f44 	.word	0x08017f44
 8003c68:	08017f5c 	.word	0x08017f5c
 8003c6c:	08017f68 	.word	0x08017f68
 8003c70:	08017f84 	.word	0x08017f84
 8003c74:	08017fa4 	.word	0x08017fa4
 8003c78:	200015d0 	.word	0x200015d0
 8003c7c:	08017fbc 	.word	0x08017fbc
 8003c80:	2000114c 	.word	0x2000114c
 8003c84:	08017fd8 	.word	0x08017fd8
 8003c88:	08017f30 	.word	0x08017f30
 8003c8c:	08018008 	.word	0x08018008
 8003c90:	20006a18 	.word	0x20006a18
 8003c94:	08018028 	.word	0x08018028
 8003c98:	08018030 	.word	0x08018030

08003c9c <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 8003c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9e:	46c6      	mov	lr, r8
 8003ca0:	b500      	push	{lr}
 8003ca2:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 8003ca4:	4929      	ldr	r1, [pc, #164]	; (8003d4c <GetID+0xb0>)
 8003ca6:	f7fc fa2d 	bl	8000104 <strcmp>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d010      	beq.n	8003cd0 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 8003cae:	4928      	ldr	r1, [pc, #160]	; (8003d50 <GetID+0xb4>)
 8003cb0:	0030      	movs	r0, r6
 8003cb2:	f7fc fa27 	bl	8000104 <strcmp>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d045      	beq.n	8003d46 <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 8003cba:	7833      	ldrb	r3, [r6, #0]
 8003cbc:	4698      	mov	r8, r3
 8003cbe:	2b23      	cmp	r3, #35	; 0x23
 8003cc0:	d00b      	beq.n	8003cda <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <GetID+0xb8>)
 8003cc4:	781f      	ldrb	r7, [r3, #0]
 8003cc6:	2f00      	cmp	r7, #0
 8003cc8:	d02a      	beq.n	8003d20 <GetID+0x84>
 8003cca:	4d23      	ldr	r5, [pc, #140]	; (8003d58 <GetID+0xbc>)
 8003ccc:	2400      	movs	r4, #0
 8003cce:	e01c      	b.n	8003d0a <GetID+0x6e>
		return myID;
 8003cd0:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <GetID+0xc0>)
 8003cd2:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	46b8      	mov	r8, r7
 8003cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 8003cda:	1c70      	adds	r0, r6, #1
 8003cdc:	f00d fcdf 	bl	801169e <atol>
 8003ce0:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <GetID+0x52>
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <GetID+0xb8>)
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d206      	bcs.n	8003cfc <GetID+0x60>
		else if (id == myID)
 8003cee:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <GetID+0xc0>)
 8003cf0:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 8003cf2:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1ed      	bne.n	8003cd4 <GetID+0x38>
			return myID;
 8003cf8:	b218      	sxth	r0, r3
 8003cfa:	e7eb      	b.n	8003cd4 <GetID+0x38>
			return id;
 8003cfc:	b218      	sxth	r0, r3
 8003cfe:	e7e9      	b.n	8003cd4 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 8003d00:	3401      	adds	r4, #1
 8003d02:	b2e4      	uxtb	r4, r4
 8003d04:	350a      	adds	r5, #10
 8003d06:	42bc      	cmp	r4, r7
 8003d08:	d00a      	beq.n	8003d20 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 8003d0a:	0029      	movs	r1, r5
 8003d0c:	0030      	movs	r0, r6
 8003d0e:	f7fc f9f9 	bl	8000104 <strcmp>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d1f4      	bne.n	8003d00 <GetID+0x64>
 8003d16:	4643      	mov	r3, r8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f1      	beq.n	8003d00 <GetID+0x64>
 8003d1c:	b220      	sxth	r0, r4
 8003d1e:	e7d9      	b.n	8003cd4 <GetID+0x38>
 8003d20:	4f0f      	ldr	r7, [pc, #60]	; (8003d60 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 8003d22:	2500      	movs	r5, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8003d24:	0039      	movs	r1, r7
 8003d26:	0030      	movs	r0, r6
 8003d28:	f7fc f9ec 	bl	8000104 <strcmp>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d005      	beq.n	8003d3c <GetID+0xa0>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8003d30:	3501      	adds	r5, #1
 8003d32:	370a      	adds	r7, #10
 8003d34:	2d0a      	cmp	r5, #10
 8003d36:	d1f5      	bne.n	8003d24 <GetID+0x88>
		return BOS_ERR_WrongName;			
 8003d38:	2064      	movs	r0, #100	; 0x64
 8003d3a:	e7cb      	b.n	8003cd4 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8003d3c:	022c      	lsls	r4, r5, #8
 8003d3e:	20fe      	movs	r0, #254	; 0xfe
 8003d40:	4320      	orrs	r0, r4
 8003d42:	b200      	sxth	r0, r0
 8003d44:	e7c6      	b.n	8003cd4 <GetID+0x38>
		return BOS_BROADCAST;				
 8003d46:	20ff      	movs	r0, #255	; 0xff
 8003d48:	e7c4      	b.n	8003cd4 <GetID+0x38>
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	0801804c 	.word	0x0801804c
 8003d50:	08018050 	.word	0x08018050
 8003d54:	2000001c 	.word	0x2000001c
 8003d58:	20000d44 	.word	0x20000d44
 8003d5c:	20000070 	.word	0x20000070
 8003d60:	20000c68 	.word	0x20000c68

08003d64 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b083      	sub	sp, #12
 8003d68:	9001      	str	r0, [sp, #4]
 8003d6a:	000f      	movs	r7, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 8003d6c:	4c29      	ldr	r4, [pc, #164]	; (8003e14 <NameModule+0xb0>)
 8003d6e:	0025      	movs	r5, r4
 8003d70:	3510      	adds	r5, #16
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 8003d72:	0021      	movs	r1, r4
 8003d74:	0038      	movs	r0, r7
 8003d76:	f7fc f9c5 	bl	8000104 <strcmp>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d040      	beq.n	8003e00 <NameModule+0x9c>
	for(i=0 ; i<NumOfKeywords ; i++)
 8003d7e:	3404      	adds	r4, #4
 8003d80:	42ac      	cmp	r4, r5
 8003d82:	d1f6      	bne.n	8003d72 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8003d84:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <NameModule+0xb4>)
 8003d86:	781e      	ldrb	r6, [r3, #0]
 8003d88:	2e01      	cmp	r6, #1
 8003d8a:	dd0c      	ble.n	8003da6 <NameModule+0x42>
 8003d8c:	4c23      	ldr	r4, [pc, #140]	; (8003e1c <NameModule+0xb8>)
 8003d8e:	340a      	adds	r4, #10
 8003d90:	2501      	movs	r5, #1
	{
		if (!strcmp(alias, moduleAlias[i]))	
 8003d92:	0021      	movs	r1, r4
 8003d94:	0038      	movs	r0, r7
 8003d96:	f7fc f9b5 	bl	8000104 <strcmp>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d032      	beq.n	8003e04 <NameModule+0xa0>
	for(i=1 ; i<N ; i++)
 8003d9e:	3501      	adds	r5, #1
 8003da0:	340a      	adds	r4, #10
 8003da2:	42b5      	cmp	r5, r6
 8003da4:	dbf5      	blt.n	8003d92 <NameModule+0x2e>
 8003da6:	4c1e      	ldr	r4, [pc, #120]	; (8003e20 <NameModule+0xbc>)
 8003da8:	0025      	movs	r5, r4
 8003daa:	3564      	adds	r5, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 8003dac:	0021      	movs	r1, r4
 8003dae:	0038      	movs	r0, r7
 8003db0:	f7fc f9a8 	bl	8000104 <strcmp>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d028      	beq.n	8003e0a <NameModule+0xa6>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003db8:	340a      	adds	r4, #10
 8003dba:	42ac      	cmp	r4, r5
 8003dbc:	d1f6      	bne.n	8003dac <NameModule+0x48>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003dbe:	4c19      	ldr	r4, [pc, #100]	; (8003e24 <NameModule+0xc0>)
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <NameModule+0xc4>)
 8003dc2:	601c      	str	r4, [r3, #0]
 8003dc4:	001e      	movs	r6, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8003dca:	0028      	movs	r0, r5
 8003dcc:	f7fc f9a4 	bl	8000118 <strlen>
 8003dd0:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8003dd2:	0029      	movs	r1, r5
 8003dd4:	0038      	movs	r0, r7
 8003dd6:	f00e f904 	bl	8011fe2 <strncmp>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d017      	beq.n	8003e0e <NameModule+0xaa>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003dde:	6864      	ldr	r4, [r4, #4]
 8003de0:	6034      	str	r4, [r6, #0]
 8003de2:	2c00      	cmp	r4, #0
 8003de4:	d1ef      	bne.n	8003dc6 <NameModule+0x62>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8003de6:	9b01      	ldr	r3, [sp, #4]
 8003de8:	0098      	lsls	r0, r3, #2
 8003dea:	469c      	mov	ip, r3
 8003dec:	4460      	add	r0, ip
 8003dee:	0040      	lsls	r0, r0, #1
 8003df0:	4e0a      	ldr	r6, [pc, #40]	; (8003e1c <NameModule+0xb8>)
 8003df2:	1830      	adds	r0, r6, r0
 8003df4:	0039      	movs	r1, r7
 8003df6:	f00e f8ec 	bl	8011fd2 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 8003dfa:	f7fe fe0d 	bl	8002a18 <SaveEEalias>
	
	return result;
 8003dfe:	e002      	b.n	8003e06 <NameModule+0xa2>
			return BOS_ERR_Keyword;
 8003e00:	2006      	movs	r0, #6
 8003e02:	e000      	b.n	8003e06 <NameModule+0xa2>
			return BOS_ERR_ExistingAlias;
 8003e04:	2007      	movs	r0, #7
}
 8003e06:	b003      	add	sp, #12
 8003e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8003e0a:	2007      	movs	r0, #7
 8003e0c:	e7fb      	b.n	8003e06 <NameModule+0xa2>
			return BOS_ERR_ExistingCmd;
 8003e0e:	2008      	movs	r0, #8
 8003e10:	e7f9      	b.n	8003e06 <NameModule+0xa2>
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	08018284 	.word	0x08018284
 8003e18:	2000001c 	.word	0x2000001c
 8003e1c:	20000d44 	.word	0x20000d44
 8003e20:	20000c68 	.word	0x20000c68
 8003e24:	200000f0 	.word	0x200000f0
 8003e28:	20000dd4 	.word	0x20000dd4

08003e2c <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	46ce      	mov	lr, r9
 8003e30:	b500      	push	{lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	9001      	str	r0, [sp, #4]
 8003e36:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003e38:	4f36      	ldr	r7, [pc, #216]	; (8003f14 <AddModuleToGroup+0xe8>)
{
 8003e3a:	003d      	movs	r5, r7
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003e3c:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8003e3e:	0029      	movs	r1, r5
 8003e40:	0030      	movs	r0, r6
 8003e42:	f7fc f95f 	bl	8000104 <strcmp>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d048      	beq.n	8003edc <AddModuleToGroup+0xb0>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003e4a:	3401      	adds	r4, #1
 8003e4c:	350a      	adds	r5, #10
 8003e4e:	2c0a      	cmp	r4, #10
 8003e50:	d1f5      	bne.n	8003e3e <AddModuleToGroup+0x12>
 8003e52:	4c31      	ldr	r4, [pc, #196]	; (8003f18 <AddModuleToGroup+0xec>)
 8003e54:	0025      	movs	r5, r4
 8003e56:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 8003e58:	0021      	movs	r1, r4
 8003e5a:	0030      	movs	r0, r6
 8003e5c:	f7fc f952 	bl	8000104 <strcmp>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d051      	beq.n	8003f08 <AddModuleToGroup+0xdc>
	for(j=0 ; j<NumOfKeywords ; j++)
 8003e64:	3404      	adds	r4, #4
 8003e66:	42ac      	cmp	r4, r5
 8003e68:	d1f6      	bne.n	8003e58 <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 8003e6a:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <AddModuleToGroup+0xf0>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	4699      	mov	r9, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	dd0c      	ble.n	8003e8e <AddModuleToGroup+0x62>
 8003e74:	4c2a      	ldr	r4, [pc, #168]	; (8003f20 <AddModuleToGroup+0xf4>)
 8003e76:	340a      	adds	r4, #10
 8003e78:	2501      	movs	r5, #1
	{
		if (!strcmp(group, moduleAlias[j]))	
 8003e7a:	0021      	movs	r1, r4
 8003e7c:	0030      	movs	r0, r6
 8003e7e:	f7fc f941 	bl	8000104 <strcmp>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d042      	beq.n	8003f0c <AddModuleToGroup+0xe0>
	for(j=1 ; j<N ; j++)
 8003e86:	3501      	adds	r5, #1
 8003e88:	340a      	adds	r4, #10
 8003e8a:	454d      	cmp	r5, r9
 8003e8c:	dbf5      	blt.n	8003e7a <AddModuleToGroup+0x4e>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003e8e:	4c25      	ldr	r4, [pc, #148]	; (8003f24 <AddModuleToGroup+0xf8>)
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <AddModuleToGroup+0xfc>)
 8003e92:	601c      	str	r4, [r3, #0]
 8003e94:	4699      	mov	r9, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8003e9a:	0028      	movs	r0, r5
 8003e9c:	f7fc f93c 	bl	8000118 <strlen>
 8003ea0:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8003ea2:	0029      	movs	r1, r5
 8003ea4:	0030      	movs	r0, r6
 8003ea6:	f00e f89c 	bl	8011fe2 <strncmp>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d030      	beq.n	8003f10 <AddModuleToGroup+0xe4>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003eae:	6864      	ldr	r4, [r4, #4]
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	601c      	str	r4, [r3, #0]
 8003eb4:	2c00      	cmp	r4, #0
 8003eb6:	d1ee      	bne.n	8003e96 <AddModuleToGroup+0x6a>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 8003eb8:	783b      	ldrb	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01b      	beq.n	8003ef6 <AddModuleToGroup+0xca>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003ebe:	3401      	adds	r4, #1
 8003ec0:	370a      	adds	r7, #10
 8003ec2:	2c0a      	cmp	r4, #10
 8003ec4:	d1f8      	bne.n	8003eb8 <AddModuleToGroup+0x8c>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 8003ec6:	9f01      	ldr	r7, [sp, #4]
 8003ec8:	3f01      	subs	r7, #1
 8003eca:	4918      	ldr	r1, [pc, #96]	; (8003f2c <AddModuleToGroup+0x100>)
 8003ecc:	007f      	lsls	r7, r7, #1
 8003ece:	2201      	movs	r2, #1
 8003ed0:	40a2      	lsls	r2, r4
 8003ed2:	5a7b      	ldrh	r3, [r7, r1]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e008      	b.n	8003eee <AddModuleToGroup+0xc2>
			groupModules[module-1] |= (0x0001<<i);	
 8003edc:	9f01      	ldr	r7, [sp, #4]
 8003ede:	3f01      	subs	r7, #1
 8003ee0:	4912      	ldr	r1, [pc, #72]	; (8003f2c <AddModuleToGroup+0x100>)
 8003ee2:	007f      	lsls	r7, r7, #1
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	40a2      	lsls	r2, r4
 8003ee8:	5a7b      	ldrh	r3, [r7, r1]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	527b      	strh	r3, [r7, r1]
}
 8003eee:	b002      	add	sp, #8
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	46b9      	mov	r9, r7
 8003ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i], group);	
 8003ef6:	00a0      	lsls	r0, r4, #2
 8003ef8:	1900      	adds	r0, r0, r4
 8003efa:	0040      	lsls	r0, r0, #1
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <AddModuleToGroup+0xe8>)
 8003efe:	1818      	adds	r0, r3, r0
 8003f00:	0031      	movs	r1, r6
 8003f02:	f00e f866 	bl	8011fd2 <strcpy>
			break;
 8003f06:	e7de      	b.n	8003ec6 <AddModuleToGroup+0x9a>
			return BOS_ERR_Keyword;
 8003f08:	2006      	movs	r0, #6
 8003f0a:	e7f0      	b.n	8003eee <AddModuleToGroup+0xc2>
			return BOS_ERR_ExistingAlias;
 8003f0c:	2007      	movs	r0, #7
 8003f0e:	e7ee      	b.n	8003eee <AddModuleToGroup+0xc2>
			return BOS_ERR_ExistingCmd;
 8003f10:	2008      	movs	r0, #8
 8003f12:	e7ec      	b.n	8003eee <AddModuleToGroup+0xc2>
 8003f14:	20000c68 	.word	0x20000c68
 8003f18:	08018284 	.word	0x08018284
 8003f1c:	2000001c 	.word	0x2000001c
 8003f20:	20000d44 	.word	0x20000d44
 8003f24:	200000f0 	.word	0x200000f0
 8003f28:	20000dd8 	.word	0x20000dd8
 8003f2c:	20000ccc 	.word	0x20000ccc

08003f30 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	46de      	mov	lr, fp
 8003f34:	4657      	mov	r7, sl
 8003f36:	464e      	mov	r6, r9
 8003f38:	4645      	mov	r5, r8
 8003f3a:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <ReadPortsDir+0x9c>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4699      	mov	r9, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d03a      	beq.n	8003fbc <ReadPortsDir+0x8c>
 8003f46:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4699      	mov	r9, r3
	{
		if (i != myID) {
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <ReadPortsDir+0xa0>)
 8003f4e:	4698      	mov	r8, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8003f50:	469b      	mov	fp, r3
 8003f52:	4f20      	ldr	r7, [pc, #128]	; (8003fd4 <ReadPortsDir+0xa4>)
			if (responseStatus != BOS_OK)	{
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <ReadPortsDir+0xa8>)
 8003f56:	469a      	mov	sl, r3
 8003f58:	e01d      	b.n	8003f96 <ReadPortsDir+0x66>
 8003f5a:	2400      	movs	r4, #0
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003f5c:	2680      	movs	r6, #128	; 0x80
 8003f5e:	0236      	lsls	r6, r6, #8
 8003f60:	e002      	b.n	8003f68 <ReadPortsDir+0x38>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8003f62:	3401      	adds	r4, #1
 8003f64:	2c06      	cmp	r4, #6
 8003f66:	d010      	beq.n	8003f8a <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003f68:	1c60      	adds	r0, r4, #1
 8003f6a:	b2c0      	uxtb	r0, r0
 8003f6c:	f008 fb58 	bl	800c620 <GetUart>
 8003f70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f72:	42b3      	cmp	r3, r6
 8003f74:	d1f5      	bne.n	8003f62 <ReadPortsDir+0x32>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8003f76:	465b      	mov	r3, fp
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	5bda      	ldrh	r2, [r3, r7]
 8003f80:	0031      	movs	r1, r6
 8003f82:	4121      	asrs	r1, r4
 8003f84:	430a      	orrs	r2, r1
 8003f86:	53da      	strh	r2, [r3, r7]
 8003f88:	e7eb      	b.n	8003f62 <ReadPortsDir+0x32>
	for (uint8_t i=1 ; i<=N ; i++) 
 8003f8a:	3501      	adds	r5, #1
 8003f8c:	b2ed      	uxtb	r5, r5
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <ReadPortsDir+0x9c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	42ab      	cmp	r3, r5
 8003f94:	d312      	bcc.n	8003fbc <ReadPortsDir+0x8c>
		if (i != myID) {
 8003f96:	4643      	mov	r3, r8
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	42ab      	cmp	r3, r5
 8003f9c:	d0dd      	beq.n	8003f5a <ReadPortsDir+0x2a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2113      	movs	r1, #19
 8003fa2:	0028      	movs	r0, r5
 8003fa4:	f004 fd64 	bl	8008a70 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8003fa8:	2032      	movs	r0, #50	; 0x32
 8003faa:	f008 f953 	bl	800c254 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8003fae:	4653      	mov	r3, sl
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0e9      	beq.n	8003f8a <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	e7e6      	b.n	8003f8a <ReadPortsDir+0x5a>
			}
		}
	}
	
	return result;
}
 8003fbc:	4648      	mov	r0, r9
 8003fbe:	bcf0      	pop	{r4, r5, r6, r7}
 8003fc0:	46bb      	mov	fp, r7
 8003fc2:	46b2      	mov	sl, r6
 8003fc4:	46a9      	mov	r9, r5
 8003fc6:	46a0      	mov	r8, r4
 8003fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	2000001c 	.word	0x2000001c
 8003fd0:	20000070 	.word	0x20000070
 8003fd4:	20006a18 	.word	0x20006a18
 8003fd8:	20000de8 	.word	0x20000de8

08003fdc <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8003fe0:	201e      	movs	r0, #30
 8003fe2:	f00d fb87 	bl	80116f4 <malloc>
 8003fe6:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8003fe8:	221e      	movs	r2, #30
 8003fea:	2100      	movs	r1, #0
 8003fec:	f00d fdc1 	bl	8011b72 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8003ff0:	4908      	ldr	r1, [pc, #32]	; (8004014 <GetDateString+0x38>)
 8003ff2:	7d8b      	ldrb	r3, [r1, #22]
 8003ff4:	7d0a      	ldrb	r2, [r1, #20]
 8003ff6:	3a01      	subs	r2, #1
 8003ff8:	0092      	lsls	r2, r2, #2
 8003ffa:	4807      	ldr	r0, [pc, #28]	; (8004018 <GetDateString+0x3c>)
 8003ffc:	5812      	ldr	r2, [r2, r0]
 8003ffe:	8b08      	ldrh	r0, [r1, #24]
 8004000:	9001      	str	r0, [sp, #4]
 8004002:	7d49      	ldrb	r1, [r1, #21]
 8004004:	9100      	str	r1, [sp, #0]
 8004006:	4905      	ldr	r1, [pc, #20]	; (800401c <GetDateString+0x40>)
 8004008:	0020      	movs	r0, r4
 800400a:	f00d ffa7 	bl	8011f5c <sprintf>
  return buffer;
}
 800400e:	0020      	movs	r0, r4
 8004010:	b002      	add	sp, #8
 8004012:	bd10      	pop	{r4, pc}
 8004014:	20006600 	.word	0x20006600
 8004018:	0801832c 	.word	0x0801832c
 800401c:	08018294 	.word	0x08018294

08004020 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004020:	b500      	push	{lr}
 8004022:	b085      	sub	sp, #20
 8004024:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <Bridge+0x24>)
 8004028:	7819      	ldrb	r1, [r3, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	9303      	str	r3, [sp, #12]
 800402e:	3b02      	subs	r3, #2
 8004030:	9302      	str	r3, [sp, #8]
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	3303      	adds	r3, #3
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	000b      	movs	r3, r1
 800403a:	f004 fd3f 	bl	8008abc <StartScastDMAStream>
}
 800403e:	b005      	add	sp, #20
 8004040:	bd00      	pop	{pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	20000070 	.word	0x20000070

08004048 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004048:	b530      	push	{r4, r5, lr}
 800404a:	b087      	sub	sp, #28
 800404c:	0005      	movs	r5, r0
 800404e:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004050:	2300      	movs	r3, #0
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	9302      	str	r3, [sp, #8]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	2100      	movs	r1, #0
 8004060:	2000      	movs	r0, #0
 8004062:	f7fe fe5d 	bl	8002d20 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8004066:	1e6a      	subs	r2, r5, #1
 8004068:	00d3      	lsls	r3, r2, #3
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <Unbridge+0x78>)
 8004070:	589b      	ldr	r3, [r3, r2]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d014      	beq.n	80040a0 <Unbridge+0x58>
 8004076:	1e62      	subs	r2, r4, #1
 8004078:	00d3      	lsls	r3, r2, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <Unbridge+0x78>)
 8004080:	589b      	ldr	r3, [r3, r2]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8004086:	0028      	movs	r0, r5
 8004088:	f002 fe80 	bl	8006d8c <SwitchStreamDMAToMsg>
 800408c:	2000      	movs	r0, #0
 800408e:	e013      	b.n	80040b8 <Unbridge+0x70>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004090:	0028      	movs	r0, r5
 8004092:	f002 fe7b 	bl	8006d8c <SwitchStreamDMAToMsg>
 8004096:	0020      	movs	r0, r4
 8004098:	f002 fe78 	bl	8006d8c <SwitchStreamDMAToMsg>
 800409c:	2000      	movs	r0, #0
 800409e:	e00b      	b.n	80040b8 <Unbridge+0x70>
	else if (streamDMA[port2-1].Instance != 0)
 80040a0:	1e62      	subs	r2, r4, #1
 80040a2:	00d3      	lsls	r3, r2, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <Unbridge+0x78>)
 80040aa:	589b      	ldr	r3, [r3, r2]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 80040b0:	0020      	movs	r0, r4
 80040b2:	f002 fe6b 	bl	8006d8c <SwitchStreamDMAToMsg>
 80040b6:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 80040b8:	b007      	add	sp, #28
 80040ba:	bd30      	pop	{r4, r5, pc}
	else {return BOS_ERR_WrongValue;}
 80040bc:	2068      	movs	r0, #104	; 0x68
 80040be:	e7fb      	b.n	80040b8 <Unbridge+0x70>
 80040c0:	200015d0 	.word	0x200015d0

080040c4 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 80040c4:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 80040c6:	7803      	ldrb	r3, [r0, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00f      	beq.n	80040ec <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 80040cc:	4d08      	ldr	r5, [pc, #32]	; (80040f0 <StringToLowerCase+0x2c>)
 80040ce:	2403      	movs	r4, #3
 80040d0:	e004      	b.n	80040dc <StringToLowerCase+0x18>
 80040d2:	7001      	strb	r1, [r0, #0]
	for(int i = 0; string[i]; i++){
 80040d4:	3001      	adds	r0, #1
 80040d6:	7803      	ldrb	r3, [r0, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 80040dc:	5cea      	ldrb	r2, [r5, r3]
 80040de:	4022      	ands	r2, r4
 80040e0:	0019      	movs	r1, r3
 80040e2:	2a01      	cmp	r2, #1
 80040e4:	d1f5      	bne.n	80040d2 <StringToLowerCase+0xe>
 80040e6:	3320      	adds	r3, #32
 80040e8:	0019      	movs	r1, r3
 80040ea:	e7f2      	b.n	80040d2 <StringToLowerCase+0xe>
	}
}
 80040ec:	bd30      	pop	{r4, r5, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	0801a7cd 	.word	0x0801a7cd

080040f4 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	46ce      	mov	lr, r9
 80040f8:	4647      	mov	r7, r8
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b089      	sub	sp, #36	; 0x24
 80040fe:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004100:	4bde      	ldr	r3, [pc, #888]	; (800447c <ParseSnippetCondition+0x388>)
 8004102:	781c      	ldrb	r4, [r3, #0]
 8004104:	2c05      	cmp	r4, #5
 8004106:	d100      	bne.n	800410a <ParseSnippetCondition+0x16>
 8004108:	e21a      	b.n	8004540 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 800410a:	49dd      	ldr	r1, [pc, #884]	; (8004480 <ParseSnippetCondition+0x38c>)
 800410c:	00a3      	lsls	r3, r4, #2
 800410e:	191a      	adds	r2, r3, r4
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	2000      	movs	r0, #0
 8004114:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004116:	191a      	adds	r2, r3, r4
 8004118:	0092      	lsls	r2, r2, #2
 800411a:	188a      	adds	r2, r1, r2
 800411c:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 800411e:	1918      	adds	r0, r3, r4
 8004120:	0080      	lsls	r0, r0, #2
 8004122:	3002      	adds	r0, #2
 8004124:	1840      	adds	r0, r0, r1
 8004126:	2204      	movs	r2, #4
 8004128:	2100      	movs	r1, #0
 800412a:	f00d fd22 	bl	8011b72 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 800412e:	782b      	ldrb	r3, [r5, #0]
 8004130:	2b62      	cmp	r3, #98	; 0x62
 8004132:	d102      	bne.n	800413a <ParseSnippetCondition+0x46>
 8004134:	78ab      	ldrb	r3, [r5, #2]
 8004136:	2b2e      	cmp	r3, #46	; 0x2e
 8004138:	d032      	beq.n	80041a0 <ParseSnippetCondition+0xac>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 800413a:	4cd2      	ldr	r4, [pc, #840]	; (8004484 <ParseSnippetCondition+0x390>)
 800413c:	0029      	movs	r1, r5
 800413e:	0020      	movs	r0, r4
 8004140:	f00d ff47 	bl	8011fd2 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004144:	4dd0      	ldr	r5, [pc, #832]	; (8004488 <ParseSnippetCondition+0x394>)
 8004146:	0029      	movs	r1, r5
 8004148:	0020      	movs	r0, r4
 800414a:	f00e fdb9 	bl	8012cc0 <strtok>
 800414e:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8004150:	0029      	movs	r1, r5
 8004152:	2000      	movs	r0, #0
 8004154:	f00e fdb4 	bl	8012cc0 <strtok>
 8004158:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 800415a:	0029      	movs	r1, r5
 800415c:	2000      	movs	r0, #0
 800415e:	f00e fdaf 	bl	8012cc0 <strtok>
 8004162:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004164:	2c00      	cmp	r4, #0
 8004166:	d100      	bne.n	800416a <ParseSnippetCondition+0x76>
 8004168:	e1ec      	b.n	8004544 <ParseSnippetCondition+0x450>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 800416a:	0020      	movs	r0, r4
 800416c:	f7fe fffc 	bl	8003168 <IsModuleParameter>
 8004170:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004172:	d100      	bne.n	8004176 <ParseSnippetCondition+0x82>
 8004174:	e194      	b.n	80044a0 <ParseSnippetCondition+0x3ac>
 8004176:	2e00      	cmp	r6, #0
 8004178:	d000      	beq.n	800417c <ParseSnippetCondition+0x88>
 800417a:	e193      	b.n	80044a4 <ParseSnippetCondition+0x3b0>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 800417c:	3667      	adds	r6, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 800417e:	2d00      	cmp	r5, #0
 8004180:	d000      	beq.n	8004184 <ParseSnippetCondition+0x90>
 8004182:	e1ba      	b.n	80044fa <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004184:	4dbd      	ldr	r5, [pc, #756]	; (800447c <ParseSnippetCondition+0x388>)
 8004186:	782b      	ldrb	r3, [r5, #0]
 8004188:	49bd      	ldr	r1, [pc, #756]	; (8004480 <ParseSnippetCondition+0x38c>)
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	18d0      	adds	r0, r2, r3
 800418e:	0080      	lsls	r0, r0, #2
 8004190:	3e65      	subs	r6, #101	; 0x65
 8004192:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004194:	180a      	adds	r2, r1, r0
 8004196:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004198:	3301      	adds	r3, #1
 800419a:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 800419c:	2600      	movs	r6, #0
 800419e:	e1ac      	b.n	80044fa <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 80041a0:	786f      	ldrb	r7, [r5, #1]
 80041a2:	3f30      	subs	r7, #48	; 0x30
 80041a4:	b2ff      	uxtb	r7, r7
	BOS_Status status = BOS_OK;
 80041a6:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 80041a8:	2f06      	cmp	r7, #6
 80041aa:	d900      	bls.n	80041ae <ParseSnippetCondition+0xba>
 80041ac:	e1a5      	b.n	80044fa <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80041ae:	4ab4      	ldr	r2, [pc, #720]	; (8004480 <ParseSnippetCondition+0x38c>)
 80041b0:	00a3      	lsls	r3, r4, #2
 80041b2:	1919      	adds	r1, r3, r4
 80041b4:	0089      	lsls	r1, r1, #2
 80041b6:	2001      	movs	r0, #1
 80041b8:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 80041ba:	1853      	adds	r3, r2, r1
 80041bc:	2200      	movs	r2, #0
 80041be:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 80041c0:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 80041c2:	1cee      	adds	r6, r5, #3
 80041c4:	3207      	adds	r2, #7
 80041c6:	49b1      	ldr	r1, [pc, #708]	; (800448c <ParseSnippetCondition+0x398>)
 80041c8:	0030      	movs	r0, r6
 80041ca:	f00d ff0a 	bl	8011fe2 <strncmp>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d124      	bne.n	800421c <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 80041d2:	00a3      	lsls	r3, r4, #2
 80041d4:	191c      	adds	r4, r3, r4
 80041d6:	00a4      	lsls	r4, r4, #2
 80041d8:	4ba9      	ldr	r3, [pc, #676]	; (8004480 <ParseSnippetCondition+0x38c>)
 80041da:	191c      	adds	r4, r3, r4
 80041dc:	2305      	movs	r3, #5
 80041de:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80041e0:	00fa      	lsls	r2, r7, #3
 80041e2:	19d2      	adds	r2, r2, r7
 80041e4:	4baa      	ldr	r3, [pc, #680]	; (8004490 <ParseSnippetCondition+0x39c>)
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	7a1b      	ldrb	r3, [r3, #8]
 80041ea:	2201      	movs	r2, #1
 80041ec:	0016      	movs	r6, r2
 80041ee:	401e      	ands	r6, r3
 80041f0:	421a      	tst	r2, r3
 80041f2:	d005      	beq.n	8004200 <ParseSnippetCondition+0x10c>
				status = BOS_OK;
 80041f4:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80041f6:	4aa1      	ldr	r2, [pc, #644]	; (800447c <ParseSnippetCondition+0x388>)
 80041f8:	7813      	ldrb	r3, [r2, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	7013      	strb	r3, [r2, #0]
 80041fe:	e17c      	b.n	80044fa <ParseSnippetCondition+0x406>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004200:	2301      	movs	r3, #1
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	2300      	movs	r3, #0
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	2101      	movs	r1, #1
 8004214:	0038      	movs	r0, r7
 8004216:	f003 ff21 	bl	800805c <SetButtonEvents>
 800421a:	e7ec      	b.n	80041f6 <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 800421c:	220e      	movs	r2, #14
 800421e:	499d      	ldr	r1, [pc, #628]	; (8004494 <ParseSnippetCondition+0x3a0>)
 8004220:	0030      	movs	r0, r6
 8004222:	f00d fede 	bl	8011fe2 <strncmp>
 8004226:	2800      	cmp	r0, #0
 8004228:	d120      	bne.n	800426c <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 800422a:	00a3      	lsls	r3, r4, #2
 800422c:	191c      	adds	r4, r3, r4
 800422e:	00a4      	lsls	r4, r4, #2
 8004230:	4b93      	ldr	r3, [pc, #588]	; (8004480 <ParseSnippetCondition+0x38c>)
 8004232:	191c      	adds	r4, r3, r4
 8004234:	2306      	movs	r3, #6
 8004236:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004238:	00fa      	lsls	r2, r7, #3
 800423a:	19d2      	adds	r2, r2, r7
 800423c:	4b94      	ldr	r3, [pc, #592]	; (8004490 <ParseSnippetCondition+0x39c>)
 800423e:	189b      	adds	r3, r3, r2
 8004240:	7a1b      	ldrb	r3, [r3, #8]
 8004242:	2202      	movs	r2, #2
 8004244:	0016      	movs	r6, r2
 8004246:	401e      	ands	r6, r3
 8004248:	421a      	tst	r2, r3
 800424a:	d001      	beq.n	8004250 <ParseSnippetCondition+0x15c>
				status = BOS_OK;					
 800424c:	2600      	movs	r6, #0
 800424e:	e7d2      	b.n	80041f6 <ParseSnippetCondition+0x102>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004250:	2301      	movs	r3, #1
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	2300      	movs	r3, #0
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	9303      	str	r3, [sp, #12]
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	3a01      	subs	r2, #1
 8004262:	2100      	movs	r1, #0
 8004264:	0038      	movs	r0, r7
 8004266:	f003 fef9 	bl	800805c <SetButtonEvents>
 800426a:	e7c4      	b.n	80041f6 <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 800426c:	220c      	movs	r2, #12
 800426e:	498a      	ldr	r1, [pc, #552]	; (8004498 <ParseSnippetCondition+0x3a4>)
 8004270:	0030      	movs	r0, r6
 8004272:	f00d feb6 	bl	8011fe2 <strncmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	d17b      	bne.n	8004372 <ParseSnippetCondition+0x27e>
				if (!button[port].pressedX1Sec) {	
 800427a:	00fa      	lsls	r2, r7, #3
 800427c:	19d2      	adds	r2, r2, r7
 800427e:	4b84      	ldr	r3, [pc, #528]	; (8004490 <ParseSnippetCondition+0x39c>)
 8004280:	189b      	adds	r3, r3, r2
 8004282:	789e      	ldrb	r6, [r3, #2]
 8004284:	2e00      	cmp	r6, #0
 8004286:	d00f      	beq.n	80042a8 <ParseSnippetCondition+0x1b4>
				} else if (!button[port].pressedX2Sec) {	
 8004288:	00fa      	lsls	r2, r7, #3
 800428a:	19d2      	adds	r2, r2, r7
 800428c:	4b80      	ldr	r3, [pc, #512]	; (8004490 <ParseSnippetCondition+0x39c>)
 800428e:	189b      	adds	r3, r3, r2
 8004290:	78de      	ldrb	r6, [r3, #3]
 8004292:	2e00      	cmp	r6, #0
 8004294:	d029      	beq.n	80042ea <ParseSnippetCondition+0x1f6>
				} else if (!button[port].pressedX3Sec) {	
 8004296:	00fa      	lsls	r2, r7, #3
 8004298:	19d2      	adds	r2, r2, r7
 800429a:	4b7d      	ldr	r3, [pc, #500]	; (8004490 <ParseSnippetCondition+0x39c>)
 800429c:	189b      	adds	r3, r3, r2
 800429e:	791e      	ldrb	r6, [r3, #4]
 80042a0:	2e00      	cmp	r6, #0
 80042a2:	d044      	beq.n	800432e <ParseSnippetCondition+0x23a>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80042a4:	260c      	movs	r6, #12
 80042a6:	e7a6      	b.n	80041f6 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 80042a8:	4b75      	ldr	r3, [pc, #468]	; (8004480 <ParseSnippetCondition+0x38c>)
 80042aa:	4698      	mov	r8, r3
 80042ac:	00a3      	lsls	r3, r4, #2
 80042ae:	191b      	adds	r3, r3, r4
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4443      	add	r3, r8
 80042b4:	2209      	movs	r2, #9
 80042b6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80042b8:	0028      	movs	r0, r5
 80042ba:	300f      	adds	r0, #15
 80042bc:	f00d f9e9 	bl	8011692 <atoi>
 80042c0:	b2c3      	uxtb	r3, r0
 80042c2:	4a6e      	ldr	r2, [pc, #440]	; (800447c <ParseSnippetCondition+0x388>)
 80042c4:	7811      	ldrb	r1, [r2, #0]
 80042c6:	008a      	lsls	r2, r1, #2
 80042c8:	1852      	adds	r2, r2, r1
 80042ca:	0092      	lsls	r2, r2, #2
 80042cc:	4442      	add	r2, r8
 80042ce:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80042d0:	2201      	movs	r2, #1
 80042d2:	9205      	str	r2, [sp, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	9204      	str	r2, [sp, #16]
 80042d8:	9203      	str	r2, [sp, #12]
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	9201      	str	r2, [sp, #4]
 80042de:	9200      	str	r2, [sp, #0]
 80042e0:	2100      	movs	r1, #0
 80042e2:	0038      	movs	r0, r7
 80042e4:	f003 feba 	bl	800805c <SetButtonEvents>
					status = BOS_OK;
 80042e8:	e785      	b.n	80041f6 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <ParseSnippetCondition+0x38c>)
 80042ec:	4698      	mov	r8, r3
 80042ee:	00a3      	lsls	r3, r4, #2
 80042f0:	191b      	adds	r3, r3, r4
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4443      	add	r3, r8
 80042f6:	220a      	movs	r2, #10
 80042f8:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80042fa:	0028      	movs	r0, r5
 80042fc:	300f      	adds	r0, #15
 80042fe:	f00d f9c8 	bl	8011692 <atoi>
 8004302:	b2c0      	uxtb	r0, r0
 8004304:	4b5d      	ldr	r3, [pc, #372]	; (800447c <ParseSnippetCondition+0x388>)
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	0093      	lsls	r3, r2, #2
 800430a:	189b      	adds	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4443      	add	r3, r8
 8004310:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004312:	2301      	movs	r3, #1
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	2300      	movs	r3, #0
 8004318:	9304      	str	r3, [sp, #16]
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	9302      	str	r3, [sp, #8]
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	9000      	str	r0, [sp, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	2100      	movs	r1, #0
 8004326:	0038      	movs	r0, r7
 8004328:	f003 fe98 	bl	800805c <SetButtonEvents>
					status = BOS_OK;		
 800432c:	e763      	b.n	80041f6 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 800432e:	4b54      	ldr	r3, [pc, #336]	; (8004480 <ParseSnippetCondition+0x38c>)
 8004330:	4698      	mov	r8, r3
 8004332:	00a3      	lsls	r3, r4, #2
 8004334:	191b      	adds	r3, r3, r4
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4443      	add	r3, r8
 800433a:	220b      	movs	r2, #11
 800433c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800433e:	0028      	movs	r0, r5
 8004340:	300f      	adds	r0, #15
 8004342:	f00d f9a6 	bl	8011692 <atoi>
 8004346:	b2c0      	uxtb	r0, r0
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <ParseSnippetCondition+0x388>)
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	0093      	lsls	r3, r2, #2
 800434e:	189b      	adds	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4443      	add	r3, r8
 8004354:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004356:	2301      	movs	r3, #1
 8004358:	9305      	str	r3, [sp, #20]
 800435a:	2300      	movs	r3, #0
 800435c:	9304      	str	r3, [sp, #16]
 800435e:	9303      	str	r3, [sp, #12]
 8004360:	9302      	str	r3, [sp, #8]
 8004362:	9001      	str	r0, [sp, #4]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	2100      	movs	r1, #0
 800436a:	0038      	movs	r0, r7
 800436c:	f003 fe76 	bl	800805c <SetButtonEvents>
					status = BOS_OK;	
 8004370:	e741      	b.n	80041f6 <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004372:	220d      	movs	r2, #13
 8004374:	4949      	ldr	r1, [pc, #292]	; (800449c <ParseSnippetCondition+0x3a8>)
 8004376:	0030      	movs	r0, r6
 8004378:	f00d fe33 	bl	8011fe2 <strncmp>
	BOS_Status status = BOS_OK;
 800437c:	2600      	movs	r6, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 800437e:	2800      	cmp	r0, #0
 8004380:	d000      	beq.n	8004384 <ParseSnippetCondition+0x290>
 8004382:	e738      	b.n	80041f6 <ParseSnippetCondition+0x102>
				if (!button[port].releasedY1Sec) {	
 8004384:	00fa      	lsls	r2, r7, #3
 8004386:	19d2      	adds	r2, r2, r7
 8004388:	4b41      	ldr	r3, [pc, #260]	; (8004490 <ParseSnippetCondition+0x39c>)
 800438a:	189b      	adds	r3, r3, r2
 800438c:	795e      	ldrb	r6, [r3, #5]
 800438e:	2e00      	cmp	r6, #0
 8004390:	d00f      	beq.n	80043b2 <ParseSnippetCondition+0x2be>
				} else if (!button[port].releasedY2Sec) {	
 8004392:	00fa      	lsls	r2, r7, #3
 8004394:	19d2      	adds	r2, r2, r7
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <ParseSnippetCondition+0x39c>)
 8004398:	189b      	adds	r3, r3, r2
 800439a:	799e      	ldrb	r6, [r3, #6]
 800439c:	2e00      	cmp	r6, #0
 800439e:	d02a      	beq.n	80043f6 <ParseSnippetCondition+0x302>
				} else if (!button[port].releasedY3Sec) {	
 80043a0:	00fa      	lsls	r2, r7, #3
 80043a2:	19d2      	adds	r2, r2, r7
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <ParseSnippetCondition+0x39c>)
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	79de      	ldrb	r6, [r3, #7]
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	d044      	beq.n	8004438 <ParseSnippetCondition+0x344>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80043ae:	260d      	movs	r6, #13
 80043b0:	e721      	b.n	80041f6 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 80043b2:	4b33      	ldr	r3, [pc, #204]	; (8004480 <ParseSnippetCondition+0x38c>)
 80043b4:	4698      	mov	r8, r3
 80043b6:	00a3      	lsls	r3, r4, #2
 80043b8:	191b      	adds	r3, r3, r4
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4443      	add	r3, r8
 80043be:	220c      	movs	r2, #12
 80043c0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80043c2:	0028      	movs	r0, r5
 80043c4:	3010      	adds	r0, #16
 80043c6:	f00d f964 	bl	8011692 <atoi>
 80043ca:	b2c0      	uxtb	r0, r0
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <ParseSnippetCondition+0x388>)
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	0093      	lsls	r3, r2, #2
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4443      	add	r3, r8
 80043d8:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 80043da:	2301      	movs	r3, #1
 80043dc:	9305      	str	r3, [sp, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	9304      	str	r3, [sp, #16]
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	9002      	str	r0, [sp, #8]
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	0038      	movs	r0, r7
 80043f0:	f003 fe34 	bl	800805c <SetButtonEvents>
					status = BOS_OK;
 80043f4:	e6ff      	b.n	80041f6 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 80043f6:	4b22      	ldr	r3, [pc, #136]	; (8004480 <ParseSnippetCondition+0x38c>)
 80043f8:	4698      	mov	r8, r3
 80043fa:	2314      	movs	r3, #20
 80043fc:	4699      	mov	r9, r3
 80043fe:	435c      	muls	r4, r3
 8004400:	4444      	add	r4, r8
 8004402:	3b07      	subs	r3, #7
 8004404:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004406:	0028      	movs	r0, r5
 8004408:	3010      	adds	r0, #16
 800440a:	f00d f942 	bl	8011692 <atoi>
 800440e:	b2c0      	uxtb	r0, r0
 8004410:	4b1a      	ldr	r3, [pc, #104]	; (800447c <ParseSnippetCondition+0x388>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	464a      	mov	r2, r9
 8004416:	4353      	muls	r3, r2
 8004418:	4443      	add	r3, r8
 800441a:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 800441c:	2301      	movs	r3, #1
 800441e:	9305      	str	r3, [sp, #20]
 8004420:	2100      	movs	r1, #0
 8004422:	9104      	str	r1, [sp, #16]
 8004424:	9003      	str	r0, [sp, #12]
 8004426:	9102      	str	r1, [sp, #8]
 8004428:	9101      	str	r1, [sp, #4]
 800442a:	9100      	str	r1, [sp, #0]
 800442c:	000b      	movs	r3, r1
 800442e:	000a      	movs	r2, r1
 8004430:	0038      	movs	r0, r7
 8004432:	f003 fe13 	bl	800805c <SetButtonEvents>
					status = BOS_OK;		
 8004436:	e6de      	b.n	80041f6 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <ParseSnippetCondition+0x38c>)
 800443a:	4698      	mov	r8, r3
 800443c:	2314      	movs	r3, #20
 800443e:	4699      	mov	r9, r3
 8004440:	435c      	muls	r4, r3
 8004442:	4444      	add	r4, r8
 8004444:	3b06      	subs	r3, #6
 8004446:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004448:	0028      	movs	r0, r5
 800444a:	3010      	adds	r0, #16
 800444c:	f00d f921 	bl	8011692 <atoi>
 8004450:	b2c0      	uxtb	r0, r0
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <ParseSnippetCondition+0x388>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	464a      	mov	r2, r9
 8004458:	4353      	muls	r3, r2
 800445a:	4443      	add	r3, r8
 800445c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 800445e:	2301      	movs	r3, #1
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	9004      	str	r0, [sp, #16]
 8004464:	2100      	movs	r1, #0
 8004466:	9103      	str	r1, [sp, #12]
 8004468:	9102      	str	r1, [sp, #8]
 800446a:	9101      	str	r1, [sp, #4]
 800446c:	9100      	str	r1, [sp, #0]
 800446e:	000b      	movs	r3, r1
 8004470:	000a      	movs	r2, r1
 8004472:	0038      	movs	r0, r7
 8004474:	f003 fdf2 	bl	800805c <SetButtonEvents>
					status = BOS_OK;	
 8004478:	e6bd      	b.n	80041f6 <ParseSnippetCondition+0x102>
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	20000ec7 	.word	0x20000ec7
 8004480:	2000661c 	.word	0x2000661c
 8004484:	20000e2c 	.word	0x20000e2c
 8004488:	08017f38 	.word	0x08017f38
 800448c:	08018adc 	.word	0x08018adc
 8004490:	200011b0 	.word	0x200011b0
 8004494:	08018348 	.word	0x08018348
 8004498:	08018358 	.word	0x08018358
 800449c:	08018368 	.word	0x08018368
			else if (secondPart != NULL && thirdPart != NULL) 
 80044a0:	2e00      	cmp	r6, #0
 80044a2:	d051      	beq.n	8004548 <ParseSnippetCondition+0x454>
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	d051      	beq.n	800454c <ParseSnippetCondition+0x458>
				modPar2 = IsModuleParameter(thirdPart);
 80044a8:	0028      	movs	r0, r5
 80044aa:	f7fe fe5d 	bl	8003168 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d029      	beq.n	8004506 <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 80044b2:	4b28      	ldr	r3, [pc, #160]	; (8004554 <ParseSnippetCondition+0x460>)
 80044b4:	781d      	ldrb	r5, [r3, #0]
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <ParseSnippetCondition+0x464>)
 80044b8:	00ab      	lsls	r3, r5, #2
 80044ba:	1959      	adds	r1, r3, r5
 80044bc:	0089      	lsls	r1, r1, #2
 80044be:	2704      	movs	r7, #4
 80044c0:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80044c2:	1959      	adds	r1, r3, r5
 80044c4:	0089      	lsls	r1, r1, #2
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 80044ca:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 80044cc:	4c21      	ldr	r4, [pc, #132]	; (8004554 <ParseSnippetCondition+0x460>)
 80044ce:	7825      	ldrb	r5, [r4, #0]
 80044d0:	0030      	movs	r0, r6
 80044d2:	f7fe fe55 	bl	8003180 <IsMathOperator>
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <ParseSnippetCondition+0x464>)
 80044d8:	00ab      	lsls	r3, r5, #2
 80044da:	195b      	adds	r3, r3, r5
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	18d3      	adds	r3, r2, r3
 80044e0:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 80044e2:	7821      	ldrb	r1, [r4, #0]
 80044e4:	008b      	lsls	r3, r1, #2
 80044e6:	185b      	adds	r3, r3, r1
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02e      	beq.n	8004550 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 80044f2:	3101      	adds	r1, #1
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <ParseSnippetCondition+0x460>)
 80044f6:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 80044f8:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80044fa:	0030      	movs	r0, r6
 80044fc:	b009      	add	sp, #36	; 0x24
 80044fe:	bcc0      	pop	{r6, r7}
 8004500:	46b9      	mov	r9, r7
 8004502:	46b0      	mov	r8, r6
 8004504:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <ParseSnippetCondition+0x460>)
 8004508:	4698      	mov	r8, r3
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	4f12      	ldr	r7, [pc, #72]	; (8004558 <ParseSnippetCondition+0x464>)
 800450e:	0093      	lsls	r3, r2, #2
 8004510:	1899      	adds	r1, r3, r2
 8004512:	0089      	lsls	r1, r1, #2
 8004514:	2003      	movs	r0, #3
 8004516:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004518:	187b      	adds	r3, r7, r1
 800451a:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 800451c:	0028      	movs	r0, r5
 800451e:	f00d f8b3 	bl	8011688 <atof>
 8004522:	f7fe f8a5 	bl	8002670 <__aeabi_d2f>
 8004526:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004528:	4643      	mov	r3, r8
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	0098      	lsls	r0, r3, #2
 800452e:	18c0      	adds	r0, r0, r3
 8004530:	0080      	lsls	r0, r0, #2
 8004532:	3006      	adds	r0, #6
 8004534:	19c0      	adds	r0, r0, r7
 8004536:	2204      	movs	r2, #4
 8004538:	a907      	add	r1, sp, #28
 800453a:	f00d fb11 	bl	8011b60 <memcpy>
 800453e:	e7c5      	b.n	80044cc <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004540:	260e      	movs	r6, #14
 8004542:	e7da      	b.n	80044fa <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 8004544:	2667      	movs	r6, #103	; 0x67
 8004546:	e7d8      	b.n	80044fa <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8004548:	2667      	movs	r6, #103	; 0x67
 800454a:	e7d6      	b.n	80044fa <ParseSnippetCondition+0x406>
 800454c:	2667      	movs	r6, #103	; 0x67
 800454e:	e7d4      	b.n	80044fa <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8004550:	2667      	movs	r6, #103	; 0x67
 8004552:	e7d2      	b.n	80044fa <ParseSnippetCondition+0x406>
 8004554:	20000ec7 	.word	0x20000ec7
 8004558:	2000661c 	.word	0x2000661c

0800455c <AddSnippet>:
{
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	000c      	movs	r4, r1
	switch (code)
 8004560:	2802      	cmp	r0, #2
 8004562:	d017      	beq.n	8004594 <AddSnippet+0x38>
 8004564:	2803      	cmp	r0, #3
 8004566:	d003      	beq.n	8004570 <AddSnippet+0x14>
 8004568:	2801      	cmp	r0, #1
 800456a:	d00f      	beq.n	800458c <AddSnippet+0x30>
 800456c:	2000      	movs	r0, #0
}
 800456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <AddSnippet+0xec>)
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	3a01      	subs	r2, #1
 8004576:	0093      	lsls	r3, r2, #2
 8004578:	189b      	adds	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4a33      	ldr	r2, [pc, #204]	; (800464c <AddSnippet+0xf0>)
 800457e:	18d3      	adds	r3, r2, r3
 8004580:	2201      	movs	r2, #1
 8004582:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004584:	f006 f874 	bl	800a670 <SaveToRO>
	return BOS_OK;
 8004588:	2000      	movs	r0, #0
			break;
 800458a:	e7f0      	b.n	800456e <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 800458c:	0008      	movs	r0, r1
 800458e:	f7ff fdb1 	bl	80040f4 <ParseSnippetCondition>
 8004592:	e7ec      	b.n	800456e <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <AddSnippet+0xec>)
 8004596:	781d      	ldrb	r5, [r3, #0]
 8004598:	3d01      	subs	r5, #1
 800459a:	00ab      	lsls	r3, r5, #2
 800459c:	195b      	adds	r3, r3, r5
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <AddSnippet+0xf0>)
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	68de      	ldr	r6, [r3, #12]
 80045a6:	2e00      	cmp	r6, #0
 80045a8:	d032      	beq.n	8004610 <AddSnippet+0xb4>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 80045aa:	0030      	movs	r0, r6
 80045ac:	f7fb fdb4 	bl	8000118 <strlen>
 80045b0:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 80045b2:	0020      	movs	r0, r4
 80045b4:	f7fb fdb0 	bl	8000118 <strlen>
 80045b8:	1839      	adds	r1, r7, r0
 80045ba:	3102      	adds	r1, #2
 80045bc:	0030      	movs	r0, r6
 80045be:	f00d fb0b 	bl	8011bd8 <realloc>
 80045c2:	4e22      	ldr	r6, [pc, #136]	; (800464c <AddSnippet+0xf0>)
 80045c4:	00ab      	lsls	r3, r5, #2
 80045c6:	195d      	adds	r5, r3, r5
 80045c8:	00ad      	lsls	r5, r5, #2
 80045ca:	1975      	adds	r5, r6, r5
 80045cc:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 80045ce:	4d1e      	ldr	r5, [pc, #120]	; (8004648 <AddSnippet+0xec>)
 80045d0:	782a      	ldrb	r2, [r5, #0]
 80045d2:	3a01      	subs	r2, #1
 80045d4:	0093      	lsls	r3, r2, #2
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	18f3      	adds	r3, r6, r3
 80045dc:	1c7a      	adds	r2, r7, #1
 80045de:	68d8      	ldr	r0, [r3, #12]
 80045e0:	1880      	adds	r0, r0, r2
 80045e2:	0021      	movs	r1, r4
 80045e4:	f00d fcf5 	bl	8011fd2 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 80045e8:	782a      	ldrb	r2, [r5, #0]
 80045ea:	3a01      	subs	r2, #1
 80045ec:	0093      	lsls	r3, r2, #2
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	18f3      	adds	r3, r6, r3
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2213      	movs	r2, #19
 80045f8:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 80045fa:	782a      	ldrb	r2, [r5, #0]
 80045fc:	3a01      	subs	r2, #1
 80045fe:	0093      	lsls	r3, r2, #2
 8004600:	189b      	adds	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	18f6      	adds	r6, r6, r3
 8004606:	68f3      	ldr	r3, [r6, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <AddSnippet+0xd6>
	return BOS_OK;
 800460c:	2000      	movs	r0, #0
 800460e:	e7ae      	b.n	800456e <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004610:	0008      	movs	r0, r1
 8004612:	f7fb fd81 	bl	8000118 <strlen>
 8004616:	3001      	adds	r0, #1
 8004618:	f00d f86c 	bl	80116f4 <malloc>
 800461c:	00ab      	lsls	r3, r5, #2
 800461e:	195d      	adds	r5, r3, r5
 8004620:	00ad      	lsls	r5, r5, #2
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <AddSnippet+0xf0>)
 8004624:	195d      	adds	r5, r3, r5
 8004626:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004628:	0021      	movs	r1, r4
 800462a:	f00d fcd2 	bl	8011fd2 <strcpy>
	return BOS_OK;
 800462e:	2000      	movs	r0, #0
 8004630:	e79d      	b.n	800456e <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004632:	0090      	lsls	r0, r2, #2
 8004634:	1880      	adds	r0, r0, r2
 8004636:	0080      	lsls	r0, r0, #2
 8004638:	4a04      	ldr	r2, [pc, #16]	; (800464c <AddSnippet+0xf0>)
 800463a:	1880      	adds	r0, r0, r2
 800463c:	2214      	movs	r2, #20
 800463e:	2100      	movs	r1, #0
 8004640:	f00d fa97 	bl	8011b72 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004644:	200e      	movs	r0, #14
 8004646:	e792      	b.n	800456e <AddSnippet+0x12>
 8004648:	20000ec7 	.word	0x20000ec7
 800464c:	2000661c 	.word	0x2000661c

08004650 <CLI_CommandParser>:
{
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	46de      	mov	lr, fp
 8004654:	4657      	mov	r7, sl
 8004656:	464e      	mov	r6, r9
 8004658:	4645      	mov	r5, r8
 800465a:	b5e0      	push	{r5, r6, r7, lr}
 800465c:	b08b      	sub	sp, #44	; 0x2c
 800465e:	9004      	str	r0, [sp, #16]
 8004660:	9103      	str	r1, [sp, #12]
 8004662:	0015      	movs	r5, r2
 8004664:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8004666:	2300      	movs	r3, #0
 8004668:	9307      	str	r3, [sp, #28]
 800466a:	2205      	movs	r2, #5
 800466c:	2100      	movs	r1, #0
 800466e:	a808      	add	r0, sp, #32
 8004670:	f00d fa7f 	bl	8011b72 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004674:	4bd8      	ldr	r3, [pc, #864]	; (80049d8 <CLI_CommandParser+0x388>)
 8004676:	4699      	mov	r9, r3
 8004678:	e129      	b.n	80048ce <CLI_CommandParser+0x27e>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 800467a:	1ce9      	adds	r1, r5, #3
 800467c:	3001      	adds	r0, #1
 800467e:	f7ff ff6d 	bl	800455c <AddSnippet>
 8004682:	2800      	cmp	r0, #0
 8004684:	d105      	bne.n	8004692 <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 8004686:	4bd4      	ldr	r3, [pc, #848]	; (80049d8 <CLI_CommandParser+0x388>)
 8004688:	2202      	movs	r2, #2
 800468a:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 800468c:	230d      	movs	r3, #13
 800468e:	7023      	strb	r3, [r4, #0]
 8004690:	e027      	b.n	80046e2 <CLI_CommandParser+0x92>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004692:	2252      	movs	r2, #82	; 0x52
 8004694:	49d1      	ldr	r1, [pc, #836]	; (80049dc <CLI_CommandParser+0x38c>)
 8004696:	0020      	movs	r0, r4
 8004698:	f00d fa62 	bl	8011b60 <memcpy>
				recordSnippet = 0;
 800469c:	4bce      	ldr	r3, [pc, #824]	; (80049d8 <CLI_CommandParser+0x388>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e01e      	b.n	80046e2 <CLI_CommandParser+0x92>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 80046a4:	2206      	movs	r2, #6
 80046a6:	49ce      	ldr	r1, [pc, #824]	; (80049e0 <CLI_CommandParser+0x390>)
 80046a8:	0028      	movs	r0, r5
 80046aa:	f00d fc9a 	bl	8011fe2 <strncmp>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d00b      	beq.n	80046ca <CLI_CommandParser+0x7a>
		else if (recordSnippet == SNIPPET_COMMANDS)
 80046b2:	2e02      	cmp	r6, #2
 80046b4:	d000      	beq.n	80046b8 <CLI_CommandParser+0x68>
 80046b6:	e11a      	b.n	80048ee <CLI_CommandParser+0x29e>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 80046b8:	0029      	movs	r1, r5
 80046ba:	2002      	movs	r0, #2
 80046bc:	f7ff ff4e 	bl	800455c <AddSnippet>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d124      	bne.n	800470e <CLI_CommandParser+0xbe>
				pcOutputString[0] = '\r';
 80046c4:	230d      	movs	r3, #13
 80046c6:	7023      	strb	r3, [r4, #0]
 80046c8:	e00b      	b.n	80046e2 <CLI_CommandParser+0x92>
			recordSnippet = 0;
 80046ca:	4bc3      	ldr	r3, [pc, #780]	; (80049d8 <CLI_CommandParser+0x388>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 80046d0:	49c4      	ldr	r1, [pc, #784]	; (80049e4 <CLI_CommandParser+0x394>)
 80046d2:	3003      	adds	r0, #3
 80046d4:	f7ff ff42 	bl	800455c <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 80046d8:	2241      	movs	r2, #65	; 0x41
 80046da:	49c3      	ldr	r1, [pc, #780]	; (80049e8 <CLI_CommandParser+0x398>)
 80046dc:	0020      	movs	r0, r4
 80046de:	f00d fa3f 	bl	8011b60 <memcpy>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 80046e2:	7823      	ldrb	r3, [r4, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d100      	bne.n	80046ea <CLI_CommandParser+0x9a>
 80046e8:	e1a8      	b.n	8004a3c <CLI_CommandParser+0x3ec>
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d100      	bne.n	80046f2 <CLI_CommandParser+0xa2>
 80046f0:	e1bf      	b.n	8004a72 <CLI_CommandParser+0x422>
 80046f2:	2700      	movs	r7, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 80046f4:	0020      	movs	r0, r4
 80046f6:	f7fb fd0f 	bl	8000118 <strlen>
 80046fa:	b282      	uxth	r2, r0
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	3333      	adds	r3, #51	; 0x33
 8004704:	0021      	movs	r1, r4
 8004706:	9804      	ldr	r0, [sp, #16]
 8004708:	f007 ffac 	bl	800c664 <writePxMutex>
 800470c:	e0d4      	b.n	80048b8 <CLI_CommandParser+0x268>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800470e:	2252      	movs	r2, #82	; 0x52
 8004710:	49b2      	ldr	r1, [pc, #712]	; (80049dc <CLI_CommandParser+0x38c>)
 8004712:	0020      	movs	r0, r4
 8004714:	f00d fa24 	bl	8011b60 <memcpy>
 8004718:	e7e3      	b.n	80046e2 <CLI_CommandParser+0x92>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800471a:	2299      	movs	r2, #153	; 0x99
 800471c:	1c70      	adds	r0, r6, #1
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	0021      	movs	r1, r4
 8004722:	f008 f967 	bl	800c9f4 <FreeRTOS_CLIProcessCommand>
 8004726:	0007      	movs	r7, r0
 8004728:	e0c2      	b.n	80048b0 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 800472a:	2227      	movs	r2, #39	; 0x27
 800472c:	49af      	ldr	r1, [pc, #700]	; (80049ec <CLI_CommandParser+0x39c>)
 800472e:	0020      	movs	r0, r4
 8004730:	f00d fa16 	bl	8011b60 <memcpy>
					xReturned = pdFALSE;
 8004734:	e7d5      	b.n	80046e2 <CLI_CommandParser+0x92>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 8004736:	2225      	movs	r2, #37	; 0x25
 8004738:	49ad      	ldr	r1, [pc, #692]	; (80049f0 <CLI_CommandParser+0x3a0>)
 800473a:	0020      	movs	r0, r4
 800473c:	f00d fa10 	bl	8011b60 <memcpy>
					xReturned = pdFALSE;						
 8004740:	e7cf      	b.n	80046e2 <CLI_CommandParser+0x92>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004742:	2202      	movs	r2, #2
 8004744:	2100      	movs	r1, #0
 8004746:	48ab      	ldr	r0, [pc, #684]	; (80049f4 <CLI_CommandParser+0x3a4>)
 8004748:	f00d fa13 	bl	8011b72 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800474c:	3601      	adds	r6, #1
 800474e:	0028      	movs	r0, r5
 8004750:	f7fb fce2 	bl	8000118 <strlen>
 8004754:	0007      	movs	r7, r0
 8004756:	a807      	add	r0, sp, #28
 8004758:	f7fb fcde 	bl	8000118 <strlen>
 800475c:	3f01      	subs	r7, #1
 800475e:	1a3a      	subs	r2, r7, r0
 8004760:	0031      	movs	r1, r6
 8004762:	48a5      	ldr	r0, [pc, #660]	; (80049f8 <CLI_CommandParser+0x3a8>)
 8004764:	f00d fc4e 	bl	8012004 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004768:	0028      	movs	r0, r5
 800476a:	f7fb fcd5 	bl	8000118 <strlen>
 800476e:	0007      	movs	r7, r0
 8004770:	a807      	add	r0, sp, #28
 8004772:	f7fb fcd1 	bl	8000118 <strlen>
 8004776:	1a3b      	subs	r3, r7, r0
 8004778:	b29b      	uxth	r3, r3
 800477a:	2217      	movs	r2, #23
 800477c:	21ff      	movs	r1, #255	; 0xff
 800477e:	4640      	mov	r0, r8
 8004780:	f004 f94e 	bl	8008a20 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004784:	2299      	movs	r2, #153	; 0x99
 8004786:	0092      	lsls	r2, r2, #2
 8004788:	0021      	movs	r1, r4
 800478a:	0030      	movs	r0, r6
 800478c:	f008 f932 	bl	800c9f4 <FreeRTOS_CLIProcessCommand>
 8004790:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8004792:	0020      	movs	r0, r4
 8004794:	f7fb fcc0 	bl	8000118 <strlen>
 8004798:	1820      	adds	r0, r4, r0
 800479a:	221d      	movs	r2, #29
 800479c:	4997      	ldr	r1, [pc, #604]	; (80049fc <CLI_CommandParser+0x3ac>)
 800479e:	f00d f9df 	bl	8011b60 <memcpy>
 80047a2:	e085      	b.n	80048b0 <CLI_CommandParser+0x260>
					group = id >> 8;
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	1218      	asrs	r0, r3, #8
 80047a8:	b2c3      	uxtb	r3, r0
 80047aa:	469a      	mov	sl, r3
 80047ac:	4b94      	ldr	r3, [pc, #592]	; (8004a00 <CLI_CommandParser+0x3b0>)
 80047ae:	469b      	mov	fp, r3
 80047b0:	4652      	mov	r2, sl
 80047b2:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80047b4:	2202      	movs	r2, #2
 80047b6:	2100      	movs	r1, #0
 80047b8:	488e      	ldr	r0, [pc, #568]	; (80049f4 <CLI_CommandParser+0x3a4>)
 80047ba:	f00d f9da 	bl	8011b72 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 80047be:	1c73      	adds	r3, r6, #1
 80047c0:	9305      	str	r3, [sp, #20]
 80047c2:	0028      	movs	r0, r5
 80047c4:	f7fb fca8 	bl	8000118 <strlen>
 80047c8:	0006      	movs	r6, r0
 80047ca:	a807      	add	r0, sp, #28
 80047cc:	f7fb fca4 	bl	8000118 <strlen>
 80047d0:	3e01      	subs	r6, #1
 80047d2:	1a32      	subs	r2, r6, r0
 80047d4:	9905      	ldr	r1, [sp, #20]
 80047d6:	4888      	ldr	r0, [pc, #544]	; (80049f8 <CLI_CommandParser+0x3a8>)
 80047d8:	f00d fc14 	bl	8012004 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80047dc:	0028      	movs	r0, r5
 80047de:	f7fb fc9b 	bl	8000118 <strlen>
 80047e2:	0006      	movs	r6, r0
 80047e4:	a807      	add	r0, sp, #28
 80047e6:	f7fb fc97 	bl	8000118 <strlen>
 80047ea:	1a33      	subs	r3, r6, r0
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2217      	movs	r2, #23
 80047f0:	4651      	mov	r1, sl
 80047f2:	4640      	mov	r0, r8
 80047f4:	f004 f914 	bl	8008a20 <BroadcastMessage>
					if (InGroup(myID, group))
 80047f8:	4b82      	ldr	r3, [pc, #520]	; (8004a04 <CLI_CommandParser+0x3b4>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4a81      	ldr	r2, [pc, #516]	; (8004a08 <CLI_CommandParser+0x3b8>)
 8004802:	5a9b      	ldrh	r3, [r3, r2]
 8004804:	465a      	mov	r2, fp
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	4113      	asrs	r3, r2
 800480a:	07db      	lsls	r3, r3, #31
 800480c:	d406      	bmi.n	800481c <CLI_CommandParser+0x1cc>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 800480e:	ab07      	add	r3, sp, #28
 8004810:	0022      	movs	r2, r4
 8004812:	497e      	ldr	r1, [pc, #504]	; (8004a0c <CLI_CommandParser+0x3bc>)
 8004814:	0020      	movs	r0, r4
 8004816:	f00d fba1 	bl	8011f5c <sprintf>
 800481a:	e049      	b.n	80048b0 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800481c:	2299      	movs	r2, #153	; 0x99
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	0021      	movs	r1, r4
 8004822:	9805      	ldr	r0, [sp, #20]
 8004824:	f008 f8e6 	bl	800c9f4 <FreeRTOS_CLIProcessCommand>
 8004828:	0007      	movs	r7, r0
 800482a:	e7f0      	b.n	800480e <CLI_CommandParser+0x1be>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 800482c:	0028      	movs	r0, r5
 800482e:	f7fb fc73 	bl	8000118 <strlen>
 8004832:	0007      	movs	r7, r0
 8004834:	a807      	add	r0, sp, #28
 8004836:	f7fb fc6f 	bl	8000118 <strlen>
 800483a:	3f01      	subs	r7, #1
 800483c:	1a3a      	subs	r2, r7, r0
 800483e:	0031      	movs	r1, r6
 8004840:	486d      	ldr	r0, [pc, #436]	; (80049f8 <CLI_CommandParser+0x3a8>)
 8004842:	f00d fbdf 	bl	8012004 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8004846:	0028      	movs	r0, r5
 8004848:	f7fb fc66 	bl	8000118 <strlen>
 800484c:	0006      	movs	r6, r0
 800484e:	a807      	add	r0, sp, #28
 8004850:	f7fb fc62 	bl	8000118 <strlen>
 8004854:	3e01      	subs	r6, #1
 8004856:	1a36      	subs	r6, r6, r0
 8004858:	b2b2      	uxth	r2, r6
 800485a:	2117      	movs	r1, #23
 800485c:	4650      	mov	r0, sl
 800485e:	f004 f907 	bl	8008a70 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8004862:	9a05      	ldr	r2, [sp, #20]
 8004864:	496a      	ldr	r1, [pc, #424]	; (8004a10 <CLI_CommandParser+0x3c0>)
 8004866:	0020      	movs	r0, r4
 8004868:	f00d fb78 	bl	8011f5c <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <CLI_CommandParser+0x228>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <CLI_CommandParser+0x23a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004878:	0020      	movs	r0, r4
 800487a:	f7fb fc4d 	bl	8000118 <strlen>
 800487e:	0002      	movs	r2, r0
 8004880:	2100      	movs	r1, #0
 8004882:	0020      	movs	r0, r4
 8004884:	f00d f975 	bl	8011b72 <memset>
 8004888:	e07c      	b.n	8004984 <CLI_CommandParser+0x334>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800488a:	0020      	movs	r0, r4
 800488c:	f7fb fc44 	bl	8000118 <strlen>
 8004890:	b282      	uxth	r2, r0
 8004892:	2301      	movs	r3, #1
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	3331      	adds	r3, #49	; 0x31
 8004898:	0021      	movs	r1, r4
 800489a:	9804      	ldr	r0, [sp, #16]
 800489c:	f007 fee2 	bl	800c664 <writePxMutex>
 80048a0:	e7ea      	b.n	8004878 <CLI_CommandParser+0x228>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 80048a2:	2299      	movs	r2, #153	; 0x99
 80048a4:	0092      	lsls	r2, r2, #2
 80048a6:	0021      	movs	r1, r4
 80048a8:	0028      	movs	r0, r5
 80048aa:	f008 f8a3 	bl	800c9f4 <FreeRTOS_CLIProcessCommand>
 80048ae:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 80048b0:	7823      	ldrb	r3, [r4, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d000      	beq.n	80048b8 <CLI_CommandParser+0x268>
 80048b6:	e07f      	b.n	80049b8 <CLI_CommandParser+0x368>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80048b8:	0020      	movs	r0, r4
 80048ba:	f7fb fc2d 	bl	8000118 <strlen>
 80048be:	0002      	movs	r2, r0
 80048c0:	2100      	movs	r1, #0
 80048c2:	0020      	movs	r0, r4
 80048c4:	f00d f955 	bl	8011b72 <memset>
	} while( xReturned != pdFALSE );
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	d100      	bne.n	80048ce <CLI_CommandParser+0x27e>
 80048cc:	e0be      	b.n	8004a4c <CLI_CommandParser+0x3fc>
		StringToLowerCase(( char * )cInputString);
 80048ce:	0028      	movs	r0, r5
 80048d0:	f7ff fbf8 	bl	80040c4 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 80048d4:	464b      	mov	r3, r9
 80048d6:	781e      	ldrb	r6, [r3, #0]
 80048d8:	2e00      	cmp	r6, #0
 80048da:	d000      	beq.n	80048de <CLI_CommandParser+0x28e>
 80048dc:	e6e2      	b.n	80046a4 <CLI_CommandParser+0x54>
 80048de:	2203      	movs	r2, #3
 80048e0:	494c      	ldr	r1, [pc, #304]	; (8004a14 <CLI_CommandParser+0x3c4>)
 80048e2:	0028      	movs	r0, r5
 80048e4:	f00d fb7d 	bl	8011fe2 <strncmp>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d100      	bne.n	80048ee <CLI_CommandParser+0x29e>
 80048ec:	e6c5      	b.n	800467a <CLI_CommandParser+0x2a>
			loc = strchr( ( char * ) cInputString, '.');
 80048ee:	212e      	movs	r1, #46	; 0x2e
 80048f0:	0028      	movs	r0, r5
 80048f2:	f00d fb60 	bl	8011fb6 <strchr>
 80048f6:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80048f8:	d0d3      	beq.n	80048a2 <CLI_CommandParser+0x252>
 80048fa:	3803      	subs	r0, #3
 80048fc:	2203      	movs	r2, #3
 80048fe:	4946      	ldr	r1, [pc, #280]	; (8004a18 <CLI_CommandParser+0x3c8>)
 8004900:	f00d fb6f 	bl	8011fe2 <strncmp>
 8004904:	2800      	cmp	r0, #0
 8004906:	d0cc      	beq.n	80048a2 <CLI_CommandParser+0x252>
 8004908:	7873      	ldrb	r3, [r6, #1]
 800490a:	4a44      	ldr	r2, [pc, #272]	; (8004a1c <CLI_CommandParser+0x3cc>)
 800490c:	5cd3      	ldrb	r3, [r2, r3]
 800490e:	075b      	lsls	r3, r3, #29
 8004910:	d4c7      	bmi.n	80048a2 <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8004912:	1b72      	subs	r2, r6, r5
 8004914:	0029      	movs	r1, r5
 8004916:	a807      	add	r0, sp, #28
 8004918:	f00d fb74 	bl	8012004 <strncpy>
				id = GetID(idString);
 800491c:	a807      	add	r0, sp, #28
 800491e:	f7ff f9bd 	bl	8003c9c <GetID>
 8004922:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8004924:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <CLI_CommandParser+0x3b4>)
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	4690      	mov	r8, r2
 800492a:	4290      	cmp	r0, r2
 800492c:	d100      	bne.n	8004930 <CLI_CommandParser+0x2e0>
 800492e:	e6f4      	b.n	800471a <CLI_CommandParser+0xca>
				}	else if (id == BOS_ERR_WrongName) {		
 8004930:	2864      	cmp	r0, #100	; 0x64
 8004932:	d100      	bne.n	8004936 <CLI_CommandParser+0x2e6>
 8004934:	e6f9      	b.n	800472a <CLI_CommandParser+0xda>
				}	else if (id == BOS_ERR_WrongID) {
 8004936:	2866      	cmp	r0, #102	; 0x66
 8004938:	d100      	bne.n	800493c <CLI_CommandParser+0x2ec>
 800493a:	e6fc      	b.n	8004736 <CLI_CommandParser+0xe6>
				}	else if (id == BOS_BROADCAST) {
 800493c:	28ff      	cmp	r0, #255	; 0xff
 800493e:	d100      	bne.n	8004942 <CLI_CommandParser+0x2f2>
 8004940:	e6ff      	b.n	8004742 <CLI_CommandParser+0xf2>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8004942:	466b      	mov	r3, sp
 8004944:	7d1b      	ldrb	r3, [r3, #20]
 8004946:	469a      	mov	sl, r3
 8004948:	2bfe      	cmp	r3, #254	; 0xfe
 800494a:	d100      	bne.n	800494e <CLI_CommandParser+0x2fe>
 800494c:	e72a      	b.n	80047a4 <CLI_CommandParser+0x154>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 800494e:	3601      	adds	r6, #1
 8004950:	2206      	movs	r2, #6
 8004952:	4933      	ldr	r1, [pc, #204]	; (8004a20 <CLI_CommandParser+0x3d0>)
 8004954:	0030      	movs	r0, r6
 8004956:	f00d fb44 	bl	8011fe2 <strncmp>
 800495a:	2800      	cmp	r0, #0
 800495c:	d000      	beq.n	8004960 <CLI_CommandParser+0x310>
 800495e:	e765      	b.n	800482c <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;				
 8004960:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <CLI_CommandParser+0x3d4>)
 8004962:	2200      	movs	r2, #0
 8004964:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004966:	2119      	movs	r1, #25
 8004968:	4650      	mov	r0, sl
 800496a:	f004 f881 	bl	8008a70 <SendMessageToModule>
						osDelay(100);
 800496e:	2064      	movs	r0, #100	; 0x64
 8004970:	f007 ffa7 	bl	800c8c2 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8004974:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <CLI_CommandParser+0x3d8>)
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <CLI_CommandParser+0x3b4>)
 800497a:	7818      	ldrb	r0, [r3, #0]
 800497c:	2300      	movs	r3, #0
 800497e:	4651      	mov	r1, sl
 8004980:	f7fe fe4e 	bl	8003620 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <CLI_CommandParser+0x3d4>)
 8004986:	799b      	ldrb	r3, [r3, #6]
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d000      	beq.n	800498e <CLI_CommandParser+0x33e>
 800498c:	e6a9      	b.n	80046e2 <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 800498e:	21fa      	movs	r1, #250	; 0xfa
 8004990:	0089      	lsls	r1, r1, #2
 8004992:	2001      	movs	r0, #1
 8004994:	f009 fbb2 	bl	800e0fc <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <CLI_CommandParser+0x3dc>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d100      	bne.n	80049a2 <CLI_CommandParser+0x352>
 80049a0:	e69f      	b.n	80046e2 <CLI_CommandParser+0x92>
									++timedoutMsg;
 80049a2:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <CLI_CommandParser+0x3e0>)
 80049a4:	8813      	ldrh	r3, [r2, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 80049aa:	9b05      	ldr	r3, [sp, #20]
 80049ac:	0022      	movs	r2, r4
 80049ae:	4921      	ldr	r1, [pc, #132]	; (8004a34 <CLI_CommandParser+0x3e4>)
 80049b0:	0020      	movs	r0, r4
 80049b2:	f00d fad3 	bl	8011f5c <sprintf>
 80049b6:	e694      	b.n	80046e2 <CLI_CommandParser+0x92>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d100      	bne.n	80049c0 <CLI_CommandParser+0x370>
 80049be:	e77b      	b.n	80048b8 <CLI_CommandParser+0x268>
 80049c0:	e698      	b.n	80046f4 <CLI_CommandParser+0xa4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 80049c2:	2301      	movs	r3, #1
 80049c4:	425b      	negs	r3, r3
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	3333      	adds	r3, #51	; 0x33
 80049ca:	2238      	movs	r2, #56	; 0x38
 80049cc:	491a      	ldr	r1, [pc, #104]	; (8004a38 <CLI_CommandParser+0x3e8>)
 80049ce:	9804      	ldr	r0, [sp, #16]
 80049d0:	f007 fe48 	bl	800c664 <writePxMutex>
}
 80049d4:	e046      	b.n	8004a64 <CLI_CommandParser+0x414>
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	20000ef4 	.word	0x20000ef4
 80049dc:	0801837c 	.word	0x0801837c
 80049e0:	080183d0 	.word	0x080183d0
 80049e4:	08017e10 	.word	0x08017e10
 80049e8:	080183d8 	.word	0x080183d8
 80049ec:	08018420 	.word	0x08018420
 80049f0:	08018448 	.word	0x08018448
 80049f4:	20000b10 	.word	0x20000b10
 80049f8:	20000d14 	.word	0x20000d14
 80049fc:	08018470 	.word	0x08018470
 8004a00:	20000ec6 	.word	0x20000ec6
 8004a04:	20000070 	.word	0x20000070
 8004a08:	20000ccc 	.word	0x20000ccc
 8004a0c:	08018490 	.word	0x08018490
 8004a10:	080184c4 	.word	0x080184c4
 8004a14:	08018378 	.word	0x08018378
 8004a18:	0801841c 	.word	0x0801841c
 8004a1c:	0801a7cd 	.word	0x0801a7cd
 8004a20:	080184bc 	.word	0x080184bc
 8004a24:	20006600 	.word	0x20006600
 8004a28:	20000ad7 	.word	0x20000ad7
 8004a2c:	20000de8 	.word	0x20000de8
 8004a30:	200013d6 	.word	0x200013d6
 8004a34:	080184e8 	.word	0x080184e8
 8004a38:	08018508 	.word	0x08018508
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004a3c:	0020      	movs	r0, r4
 8004a3e:	f7fb fb6b 	bl	8000118 <strlen>
 8004a42:	0002      	movs	r2, r0
 8004a44:	2100      	movs	r1, #0
 8004a46:	0020      	movs	r0, r4
 8004a48:	f00d f893 	bl	8011b72 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8004a4c:	2209      	movs	r2, #9
 8004a4e:	2100      	movs	r1, #0
 8004a50:	a807      	add	r0, sp, #28
 8004a52:	f00d f88e 	bl	8011b72 <memset>
	if(!recordSnippet && enableOutput)
 8004a56:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <CLI_CommandParser+0x434>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <CLI_CommandParser+0x414>
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ae      	bne.n	80049c2 <CLI_CommandParser+0x372>
}
 8004a64:	b00b      	add	sp, #44	; 0x2c
 8004a66:	bcf0      	pop	{r4, r5, r6, r7}
 8004a68:	46bb      	mov	fp, r7
 8004a6a:	46b2      	mov	sl, r6
 8004a6c:	46a9      	mov	r9, r5
 8004a6e:	46a0      	mov	r8, r4
 8004a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004a72:	0020      	movs	r0, r4
 8004a74:	f7fb fb50 	bl	8000118 <strlen>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	0020      	movs	r0, r4
 8004a7e:	f00d f878 	bl	8011b72 <memset>
	} while( xReturned != pdFALSE );
 8004a82:	e7e3      	b.n	8004a4c <CLI_CommandParser+0x3fc>
 8004a84:	20000ef4 	.word	0x20000ef4

08004a88 <prvCLITask>:
{
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8a:	46d6      	mov	lr, sl
 8004a8c:	464f      	mov	r7, r9
 8004a8e:	4646      	mov	r6, r8
 8004a90:	b5c0      	push	{r6, r7, lr}
 8004a92:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004a94:	2101      	movs	r1, #1
 8004a96:	4249      	negs	r1, r1
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f009 fb2f 	bl	800e0fc <ulTaskNotifyTake>
	cRxedChar = '\0';
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	446b      	add	r3, sp
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004aa6:	f008 f82f 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 8004aaa:	4682      	mov	sl, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8004aac:	23e1      	movs	r3, #225	; 0xe1
 8004aae:	031b      	lsls	r3, r3, #12
 8004ab0:	4a58      	ldr	r2, [pc, #352]	; (8004c14 <prvCLITask+0x18c>)
 8004ab2:	6892      	ldr	r2, [r2, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d00f      	beq.n	8004ad8 <prvCLITask+0x50>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004ab8:	2401      	movs	r4, #1
			if (port != PcPort)
 8004aba:	4e57      	ldr	r6, [pc, #348]	; (8004c18 <prvCLITask+0x190>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004abc:	001d      	movs	r5, r3
 8004abe:	e003      	b.n	8004ac8 <prvCLITask+0x40>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	b2e4      	uxtb	r4, r4
 8004ac4:	2c07      	cmp	r4, #7
 8004ac6:	d007      	beq.n	8004ad8 <prvCLITask+0x50>
			if (port != PcPort)
 8004ac8:	7833      	ldrb	r3, [r6, #0]
 8004aca:	42a3      	cmp	r3, r4
 8004acc:	d0f8      	beq.n	8004ac0 <prvCLITask+0x38>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004ace:	0029      	movs	r1, r5
 8004ad0:	0020      	movs	r0, r4
 8004ad2:	f007 fe37 	bl	800c744 <UpdateBaudrate>
 8004ad6:	e7f3      	b.n	8004ac0 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8004ad8:	4b50      	ldr	r3, [pc, #320]	; (8004c1c <prvCLITask+0x194>)
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	0053      	lsls	r3, r2, #1
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4a4f      	ldr	r2, [pc, #316]	; (8004c20 <prvCLITask+0x198>)
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	4a4f      	ldr	r2, [pc, #316]	; (8004c24 <prvCLITask+0x19c>)
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	4c4f      	ldr	r4, [pc, #316]	; (8004c28 <prvCLITask+0x1a0>)
 8004aec:	4d4a      	ldr	r5, [pc, #296]	; (8004c18 <prvCLITask+0x190>)
 8004aee:	7829      	ldrb	r1, [r5, #0]
 8004af0:	9100      	str	r1, [sp, #0]
 8004af2:	494e      	ldr	r1, [pc, #312]	; (8004c2c <prvCLITask+0x1a4>)
 8004af4:	0020      	movs	r0, r4
 8004af6:	f00d fa31 	bl	8011f5c <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8004afa:	7828      	ldrb	r0, [r5, #0]
 8004afc:	230a      	movs	r3, #10
 8004afe:	4a4c      	ldr	r2, [pc, #304]	; (8004c30 <prvCLITask+0x1a8>)
 8004b00:	494c      	ldr	r1, [pc, #304]	; (8004c34 <prvCLITask+0x1ac>)
 8004b02:	f007 fddb 	bl	800c6bc <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 8004b06:	0020      	movs	r0, r4
 8004b08:	f7fb fb06 	bl	8000118 <strlen>
 8004b0c:	b282      	uxth	r2, r0
 8004b0e:	7828      	ldrb	r0, [r5, #0]
 8004b10:	230a      	movs	r3, #10
 8004b12:	0021      	movs	r1, r4
 8004b14:	f007 fdd2 	bl	800c6bc <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4698      	mov	r8, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004b1c:	4b46      	ldr	r3, [pc, #280]	; (8004c38 <prvCLITask+0x1b0>)
 8004b1e:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004b20:	001f      	movs	r7, r3
 8004b22:	e05c      	b.n	8004bde <prvCLITask+0x156>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8004b24:	200f      	movs	r0, #15
 8004b26:	4468      	add	r0, sp
 8004b28:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 8004b2a:	0198      	lsls	r0, r3, #6
 8004b2c:	4a43      	ldr	r2, [pc, #268]	; (8004c3c <prvCLITask+0x1b4>)
 8004b2e:	1812      	adds	r2, r2, r0
 8004b30:	2000      	movs	r0, #0
 8004b32:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 8004b34:	4a40      	ldr	r2, [pc, #256]	; (8004c38 <prvCLITask+0x1b0>)
 8004b36:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 8004b38:	240f      	movs	r4, #15
 8004b3a:	446c      	add	r4, sp
 8004b3c:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <prvCLITask+0x190>)
 8004b3e:	7818      	ldrb	r0, [r3, #0]
 8004b40:	230a      	movs	r3, #10
 8004b42:	2201      	movs	r2, #1
 8004b44:	0021      	movs	r1, r4
 8004b46:	f007 fdb9 	bl	800c6bc <writePxITMutex>
		if( cRxedChar == '\r' )
 8004b4a:	7823      	ldrb	r3, [r4, #0]
 8004b4c:	2b0d      	cmp	r3, #13
 8004b4e:	d027      	beq.n	8004ba0 <prvCLITask+0x118>
			if( cRxedChar == '\n' )
 8004b50:	2b0a      	cmp	r3, #10
 8004b52:	d042      	beq.n	8004bda <prvCLITask+0x152>
			else if( cRxedChar == '\b' )
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d051      	beq.n	8004bfc <prvCLITask+0x174>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8004b58:	001a      	movs	r2, r3
 8004b5a:	3a20      	subs	r2, #32
 8004b5c:	2a5e      	cmp	r2, #94	; 0x5e
 8004b5e:	d83c      	bhi.n	8004bda <prvCLITask+0x152>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8004b60:	4642      	mov	r2, r8
 8004b62:	2a31      	cmp	r2, #49	; 0x31
 8004b64:	dc39      	bgt.n	8004bda <prvCLITask+0x152>
						cInputString[ cInputIndex ] = cRxedChar;
 8004b66:	4a36      	ldr	r2, [pc, #216]	; (8004c40 <prvCLITask+0x1b8>)
 8004b68:	4641      	mov	r1, r8
 8004b6a:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8004b6c:	4643      	mov	r3, r8
 8004b6e:	3301      	adds	r3, #1
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	4698      	mov	r8, r3
 8004b74:	e031      	b.n	8004bda <prvCLITask+0x152>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004b76:	2200      	movs	r2, #0
 8004b78:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8004b7a:	f009 fd9b 	bl	800e6b4 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004b7e:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8004b80:	7833      	ldrb	r3, [r6, #0]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	019a      	lsls	r2, r3, #6
 8004b86:	18aa      	adds	r2, r5, r2
 8004b88:	5d12      	ldrb	r2, [r2, r4]
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	d1ca      	bne.n	8004b24 <prvCLITask+0x9c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8004b8e:	2c3f      	cmp	r4, #63	; 0x3f
 8004b90:	d0f1      	beq.n	8004b76 <prvCLITask+0xee>
			taskYIELD();
 8004b92:	f009 fd8f 	bl	800e6b4 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004b96:	3401      	adds	r4, #1
 8004b98:	b2a4      	uxth	r4, r4
 8004b9a:	2c3f      	cmp	r4, #63	; 0x3f
 8004b9c:	d9f0      	bls.n	8004b80 <prvCLITask+0xf8>
 8004b9e:	e7cb      	b.n	8004b38 <prvCLITask+0xb0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <prvCLITask+0x190>)
 8004ba2:	7818      	ldrb	r0, [r3, #0]
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	4926      	ldr	r1, [pc, #152]	; (8004c44 <prvCLITask+0x1bc>)
 8004baa:	f007 fd87 	bl	800c6bc <writePxITMutex>
			if( cInputIndex == 0 )
 8004bae:	4643      	mov	r3, r8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01e      	beq.n	8004bf2 <prvCLITask+0x16a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 8004bb4:	4c22      	ldr	r4, [pc, #136]	; (8004c40 <prvCLITask+0x1b8>)
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <prvCLITask+0x190>)
 8004bb8:	7818      	ldrb	r0, [r3, #0]
 8004bba:	4653      	mov	r3, sl
 8004bbc:	0022      	movs	r2, r4
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	f7ff fd46 	bl	8004650 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 8004bc4:	0021      	movs	r1, r4
 8004bc6:	4820      	ldr	r0, [pc, #128]	; (8004c48 <prvCLITask+0x1c0>)
 8004bc8:	f00d fa03 	bl	8011fd2 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8004bcc:	2232      	movs	r2, #50	; 0x32
 8004bce:	2100      	movs	r1, #0
 8004bd0:	0020      	movs	r0, r4
 8004bd2:	f00c ffce 	bl	8011b72 <memset>
			cInputIndex = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4698      	mov	r8, r3
		taskYIELD();
 8004bda:	f009 fd6b 	bl	800e6b4 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004bde:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <prvCLITask+0x190>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	444b      	add	r3, r9
 8004be4:	3b01      	subs	r3, #1
 8004be6:	781c      	ldrb	r4, [r3, #0]
 8004be8:	2c3f      	cmp	r4, #63	; 0x3f
 8004bea:	d8a5      	bhi.n	8004b38 <prvCLITask+0xb0>
			if (UARTRxBuf[PcPort-1][chr]) {
 8004bec:	4e0a      	ldr	r6, [pc, #40]	; (8004c18 <prvCLITask+0x190>)
 8004bee:	4d13      	ldr	r5, [pc, #76]	; (8004c3c <prvCLITask+0x1b4>)
 8004bf0:	e7c6      	b.n	8004b80 <prvCLITask+0xf8>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8004bf2:	4915      	ldr	r1, [pc, #84]	; (8004c48 <prvCLITask+0x1c0>)
 8004bf4:	4812      	ldr	r0, [pc, #72]	; (8004c40 <prvCLITask+0x1b8>)
 8004bf6:	f00d f9ec 	bl	8011fd2 <strcpy>
 8004bfa:	e7db      	b.n	8004bb4 <prvCLITask+0x12c>
				if( cInputIndex > 0 )
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	ddeb      	ble.n	8004bda <prvCLITask+0x152>
					cInputIndex--;
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	4698      	mov	r8, r3
					cInputString[ cInputIndex ] = '\0';
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <prvCLITask+0x1b8>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	545a      	strb	r2, [r3, r1]
 8004c10:	e7e3      	b.n	8004bda <prvCLITask+0x152>
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	20006600 	.word	0x20006600
 8004c18:	20000ad7 	.word	0x20000ad7
 8004c1c:	20000072 	.word	0x20000072
 8004c20:	080182a8 	.word	0x080182a8
 8004c24:	20000070 	.word	0x20000070
 8004c28:	20000ec8 	.word	0x20000ec8
 8004c2c:	08018544 	.word	0x08018544
 8004c30:	00000293 	.word	0x00000293
 8004c34:	08018570 	.word	0x08018570
 8004c38:	200010f8 	.word	0x200010f8
 8004c3c:	20000f78 	.word	0x20000f78
 8004c40:	20000df8 	.word	0x20000df8
 8004c44:	08019908 	.word	0x08019908
 8004c48:	20000e94 	.word	0x20000e94

08004c4c <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004c50:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <ParseSnippetCommand+0x78>)
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0093      	lsls	r3, r2, #2
 8004c58:	189b      	adds	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <ParseSnippetCommand+0x7c>)
 8004c5e:	18d3      	adds	r3, r2, r3
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d02c      	beq.n	8004cc0 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8004c66:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <ParseSnippetCommand+0x80>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d014      	beq.n	8004c98 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8004c6e:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <ParseSnippetCommand+0x80>)
 8004c70:	681e      	ldr	r6, [r3, #0]
 8004c72:	7833      	ldrb	r3, [r6, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d012      	beq.n	8004c9e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 8004c78:	2113      	movs	r1, #19
 8004c7a:	0030      	movs	r0, r6
 8004c7c:	f00d f99b 	bl	8011fb6 <strchr>
 8004c80:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 8004c82:	d011      	beq.n	8004ca8 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8004c84:	1b82      	subs	r2, r0, r6
 8004c86:	0031      	movs	r1, r6
 8004c88:	0020      	movs	r0, r4
 8004c8a:	f00d f9bb 	bl	8012004 <strncpy>
		ptrStart = ptrEnd+1;
 8004c8e:	3501      	adds	r5, #1
 8004c90:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <ParseSnippetCommand+0x80>)
 8004c92:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8004c94:	2001      	movs	r0, #1
}
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <ParseSnippetCommand+0x80>)
 8004c9a:	6018      	str	r0, [r3, #0]
 8004c9c:	e7e7      	b.n	8004c6e <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <ParseSnippetCommand+0x80>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
		return false;
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e7f6      	b.n	8004c96 <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 8004ca8:	0031      	movs	r1, r6
 8004caa:	0020      	movs	r0, r4
 8004cac:	f00d f991 	bl	8011fd2 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8004cb0:	0020      	movs	r0, r4
 8004cb2:	f7fb fa31 	bl	8000118 <strlen>
 8004cb6:	1836      	adds	r6, r6, r0
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <ParseSnippetCommand+0x80>)
 8004cba:	601e      	str	r6, [r3, #0]
	return true;
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	e7ea      	b.n	8004c96 <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e7e8      	b.n	8004c96 <ParseSnippetCommand+0x4a>
 8004cc4:	20000ec7 	.word	0x20000ec7
 8004cc8:	2000661c 	.word	0x2000661c
 8004ccc:	20000ef0 	.word	0x20000ef0

08004cd0 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8004cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 8004cd6:	0083      	lsls	r3, r0, #2
 8004cd8:	181b      	adds	r3, r3, r0
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4a3e      	ldr	r2, [pc, #248]	; (8004dd8 <CheckSnippetCondition+0x108>)
 8004cde:	5c9b      	ldrb	r3, [r3, r2]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d021      	beq.n	8004d28 <CheckSnippetCondition+0x58>
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d130      	bne.n	8004d4c <CheckSnippetCondition+0x7c>
			break;
			
						
		case SNIP_COND_MODULE_PARAM_CONST :	
			// Get the constant and module parameter values. 
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8004cea:	4d3b      	ldr	r5, [pc, #236]	; (8004dd8 <CheckSnippetCondition+0x108>)
 8004cec:	00a6      	lsls	r6, r4, #2
 8004cee:	1933      	adds	r3, r6, r4
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	18eb      	adds	r3, r5, r3
 8004cf4:	78da      	ldrb	r2, [r3, #3]
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	0053      	lsls	r3, r2, #1
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a37      	ldr	r2, [pc, #220]	; (8004ddc <CheckSnippetCondition+0x10c>)
 8004d00:	589b      	ldr	r3, [r3, r2]
 8004d02:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004d04:	1931      	adds	r1, r6, r4
 8004d06:	0089      	lsls	r1, r1, #2
 8004d08:	3106      	adds	r1, #6
 8004d0a:	1949      	adds	r1, r1, r5
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	a801      	add	r0, sp, #4
 8004d10:	f00c ff26 	bl	8011b60 <memcpy>
			// Compare them mathematically
			switch (snippets[index].cond.mathOperator)
 8004d14:	1936      	adds	r6, r6, r4
 8004d16:	00b6      	lsls	r6, r6, #2
 8004d18:	19ad      	adds	r5, r5, r6
 8004d1a:	786b      	ldrb	r3, [r5, #1]
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d853      	bhi.n	8004dc8 <CheckSnippetCondition+0xf8>
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <CheckSnippetCondition+0x110>)
 8004d24:	58d3      	ldr	r3, [r2, r3]
 8004d26:	469f      	mov	pc, r3
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <CheckSnippetCondition+0x108>)
 8004d2a:	0080      	lsls	r0, r0, #2
 8004d2c:	1903      	adds	r3, r0, r4
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	18d3      	adds	r3, r2, r3
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8004d32:	7899      	ldrb	r1, [r3, #2]
 8004d34:	00cb      	lsls	r3, r1, #3
 8004d36:	185b      	adds	r3, r3, r1
 8004d38:	1900      	adds	r0, r0, r4
 8004d3a:	0080      	lsls	r0, r0, #2
 8004d3c:	1812      	adds	r2, r2, r0
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <CheckSnippetCondition+0x114>)
 8004d40:	5c58      	ldrb	r0, [r3, r1]
 8004d42:	78d3      	ldrb	r3, [r2, #3]
 8004d44:	1ac0      	subs	r0, r0, r3
 8004d46:	4243      	negs	r3, r0
 8004d48:	4158      	adcs	r0, r3
 8004d4a:	b2c0      	uxtb	r0, r0
  	default:
  		break;
  }
	
	return false;
}
 8004d4c:	b003      	add	sp, #12
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8004d50:	1c39      	adds	r1, r7, #0
 8004d52:	9801      	ldr	r0, [sp, #4]
 8004d54:	f7fb fbbc 	bl	80004d0 <__aeabi_fcmpeq>
 8004d58:	1e43      	subs	r3, r0, #1
 8004d5a:	4198      	sbcs	r0, r3
 8004d5c:	e7f6      	b.n	8004d4c <CheckSnippetCondition+0x7c>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8004d5e:	1c39      	adds	r1, r7, #0
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	f7fb fbbb 	bl	80004dc <__aeabi_fcmplt>
 8004d66:	1e43      	subs	r3, r0, #1
 8004d68:	4198      	sbcs	r0, r3
 8004d6a:	e7ef      	b.n	8004d4c <CheckSnippetCondition+0x7c>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8004d6c:	1c39      	adds	r1, r7, #0
 8004d6e:	9801      	ldr	r0, [sp, #4]
 8004d70:	f7fb fbc8 	bl	8000504 <__aeabi_fcmpgt>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d029      	beq.n	8004dcc <CheckSnippetCondition+0xfc>
 8004d78:	2100      	movs	r1, #0
 8004d7a:	1c38      	adds	r0, r7, #0
 8004d7c:	f7fb fba8 	bl	80004d0 <__aeabi_fcmpeq>
 8004d80:	4243      	negs	r3, r0
 8004d82:	4158      	adcs	r0, r3
 8004d84:	e7e2      	b.n	8004d4c <CheckSnippetCondition+0x7c>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 8004d86:	1c39      	adds	r1, r7, #0
 8004d88:	9801      	ldr	r0, [sp, #4]
 8004d8a:	f7fb fbb1 	bl	80004f0 <__aeabi_fcmple>
 8004d8e:	1e43      	subs	r3, r0, #1
 8004d90:	4198      	sbcs	r0, r3
 8004d92:	e7db      	b.n	8004d4c <CheckSnippetCondition+0x7c>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8004d94:	1c39      	adds	r1, r7, #0
 8004d96:	9801      	ldr	r0, [sp, #4]
 8004d98:	f7fb fbbe 	bl	8000518 <__aeabi_fcmpge>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d017      	beq.n	8004dd0 <CheckSnippetCondition+0x100>
 8004da0:	2100      	movs	r1, #0
 8004da2:	1c38      	adds	r0, r7, #0
 8004da4:	f7fb fb94 	bl	80004d0 <__aeabi_fcmpeq>
 8004da8:	4243      	negs	r3, r0
 8004daa:	4158      	adcs	r0, r3
 8004dac:	e7ce      	b.n	8004d4c <CheckSnippetCondition+0x7c>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8004dae:	1c39      	adds	r1, r7, #0
 8004db0:	9801      	ldr	r0, [sp, #4]
 8004db2:	f7fb fb8d 	bl	80004d0 <__aeabi_fcmpeq>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d10c      	bne.n	8004dd4 <CheckSnippetCondition+0x104>
 8004dba:	2100      	movs	r1, #0
 8004dbc:	1c38      	adds	r0, r7, #0
 8004dbe:	f7fb fb87 	bl	80004d0 <__aeabi_fcmpeq>
 8004dc2:	4243      	negs	r3, r0
 8004dc4:	4158      	adcs	r0, r3
 8004dc6:	e7c1      	b.n	8004d4c <CheckSnippetCondition+0x7c>
			switch (snippets[index].cond.mathOperator)
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e7bf      	b.n	8004d4c <CheckSnippetCondition+0x7c>
	return false;
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e7bd      	b.n	8004d4c <CheckSnippetCondition+0x7c>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e7bb      	b.n	8004d4c <CheckSnippetCondition+0x7c>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	e7b9      	b.n	8004d4c <CheckSnippetCondition+0x7c>
 8004dd8:	2000661c 	.word	0x2000661c
 8004ddc:	200000dc 	.word	0x200000dc
 8004de0:	08018804 	.word	0x08018804
 8004de4:	200011b0 	.word	0x200011b0

08004de8 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	46ce      	mov	lr, r9
 8004dec:	4647      	mov	r7, r8
 8004dee:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8004df0:	f007 fe8a 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 8004df4:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <ExecuteSnippet+0x90>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d036      	beq.n	8004e6c <ExecuteSnippet+0x84>
 8004dfe:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 8004e00:	4f1e      	ldr	r7, [pc, #120]	; (8004e7c <ExecuteSnippet+0x94>)
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8004e02:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <ExecuteSnippet+0x98>)
 8004e04:	4698      	mov	r8, r3
 8004e06:	e01a      	b.n	8004e3e <ExecuteSnippet+0x56>
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <ExecuteSnippet+0x9c>)
 8004e0a:	7818      	ldrb	r0, [r3, #0]
 8004e0c:	0033      	movs	r3, r6
 8004e0e:	4642      	mov	r2, r8
 8004e10:	2100      	movs	r1, #0
 8004e12:	f7ff fc1d 	bl	8004650 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8004e16:	0030      	movs	r0, r6
 8004e18:	f7fb f97e 	bl	8000118 <strlen>
 8004e1c:	0002      	movs	r2, r0
 8004e1e:	2100      	movs	r1, #0
 8004e20:	0030      	movs	r0, r6
 8004e22:	f00c fea6 	bl	8011b72 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004e26:	4649      	mov	r1, r9
 8004e28:	68e8      	ldr	r0, [r5, #12]
 8004e2a:	f7ff ff0f 	bl	8004c4c <ParseSnippetCommand>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d1ea      	bne.n	8004e08 <ExecuteSnippet+0x20>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004e32:	3401      	adds	r4, #1
 8004e34:	b2a4      	uxth	r4, r4
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <ExecuteSnippet+0x90>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	d916      	bls.n	8004e6c <ExecuteSnippet+0x84>
		if (snippets[s].state)								// Check for activated Snippets
 8004e3e:	00a3      	lsls	r3, r4, #2
 8004e40:	191b      	adds	r3, r3, r4
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	7c1b      	ldrb	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f2      	beq.n	8004e32 <ExecuteSnippet+0x4a>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8004e4c:	b2e0      	uxtb	r0, r4
 8004e4e:	f7ff ff3f 	bl	8004cd0 <CheckSnippetCondition>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0ed      	beq.n	8004e32 <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <ExecuteSnippet+0xa0>)
 8004e58:	2220      	movs	r2, #32
 8004e5a:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <ExecuteSnippet+0x98>)
 8004e5e:	4699      	mov	r9, r3
 8004e60:	00a3      	lsls	r3, r4, #2
 8004e62:	191d      	adds	r5, r3, r4
 8004e64:	00ad      	lsls	r5, r5, #2
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <ExecuteSnippet+0x94>)
 8004e68:	195d      	adds	r5, r3, r5
 8004e6a:	e7dc      	b.n	8004e26 <ExecuteSnippet+0x3e>
			}
		}
  }
	
	return result;
}
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	bcc0      	pop	{r6, r7}
 8004e70:	46b9      	mov	r9, r7
 8004e72:	46b0      	mov	r8, r6
 8004e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	20000ec7 	.word	0x20000ec7
 8004e7c:	2000661c 	.word	0x2000661c
 8004e80:	20000e60 	.word	0x20000e60
 8004e84:	20000ad7 	.word	0x20000ad7
 8004e88:	20006600 	.word	0x20006600

08004e8c <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	0004      	movs	r4, r0
 8004e92:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8004e98:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d015      	beq.n	8004eca <setBaudrateCommand+0x3e>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004e9e:	aa01      	add	r2, sp, #4
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	0028      	movs	r0, r5
 8004ea4:	f007 fe34 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	56c3      	ldrsb	r3, [r0, r3]
 8004eac:	2b70      	cmp	r3, #112	; 0x70
 8004eae:	d00e      	beq.n	8004ece <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004eb0:	466a      	mov	r2, sp
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	0028      	movs	r0, r5
 8004eb6:	f007 fe2b 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8004eba:	f00c fbf0 	bl	801169e <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8004ebe:	2213      	movs	r2, #19
 8004ec0:	4910      	ldr	r1, [pc, #64]	; (8004f04 <setBaudrateCommand+0x78>)
 8004ec2:	0020      	movs	r0, r4
 8004ec4:	f00c fe4c 	bl	8011b60 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8004ec8:	e018      	b.n	8004efc <setBaudrateCommand+0x70>
	configASSERT( pcWriteBuffer );
 8004eca:	b672      	cpsid	i
 8004ecc:	e7fe      	b.n	8004ecc <setBaudrateCommand+0x40>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f00c fbe5 	bl	801169e <atol>
 8004ed4:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004ed6:	466a      	mov	r2, sp
 8004ed8:	2102      	movs	r1, #2
 8004eda:	0028      	movs	r0, r5
 8004edc:	f007 fe18 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8004ee0:	f00c fbdd 	bl	801169e <atol>
 8004ee4:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 8004ee6:	b2f0      	uxtb	r0, r6
 8004ee8:	0029      	movs	r1, r5
 8004eea:	f007 fc2b 	bl	800c744 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8004eee:	23ff      	movs	r3, #255	; 0xff
 8004ef0:	4033      	ands	r3, r6
 8004ef2:	002a      	movs	r2, r5
 8004ef4:	4904      	ldr	r1, [pc, #16]	; (8004f08 <setBaudrateCommand+0x7c>)
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	f00d f830 	bl	8011f5c <sprintf>
}
 8004efc:	2000      	movs	r0, #0
 8004efe:	b002      	add	sp, #8
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	08018848 	.word	0x08018848
 8004f08:	08018820 	.word	0x08018820

08004f0c <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004f0c:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d006      	beq.n	8004f20 <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <flashsizeCommand+0x18>)
 8004f14:	881a      	ldrh	r2, [r3, #0]
 8004f16:	4904      	ldr	r1, [pc, #16]	; (8004f28 <flashsizeCommand+0x1c>)
 8004f18:	f00d f820 	bl	8011f5c <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8004f20:	b672      	cpsid	i
 8004f22:	e7fe      	b.n	8004f22 <flashsizeCommand+0x16>
 8004f24:	1ffff7cc 	.word	0x1ffff7cc
 8004f28:	0801885c 	.word	0x0801885c

08004f2c <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2e:	46d6      	mov	lr, sl
 8004f30:	464f      	mov	r7, r9
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b085      	sub	sp, #20
 8004f36:	0004      	movs	r4, r0
 8004f38:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8004f3e:	4b63      	ldr	r3, [pc, #396]	; (80050cc <testportCommand+0x1a0>)
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	ab02      	add	r3, sp, #8
 8004f44:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004f46:	2c00      	cmp	r4, #0
 8004f48:	d012      	beq.n	8004f70 <testportCommand+0x44>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004f4a:	aa03      	add	r2, sp, #12
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	f007 fddf 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8004f52:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8004f54:	495e      	ldr	r1, [pc, #376]	; (80050d0 <testportCommand+0x1a4>)
 8004f56:	f7fb f8d5 	bl	8000104 <strcmp>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d174      	bne.n	8005048 <testportCommand+0x11c>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8004f5e:	4b5d      	ldr	r3, [pc, #372]	; (80050d4 <testportCommand+0x1a8>)
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	4b5d      	ldr	r3, [pc, #372]	; (80050d8 <testportCommand+0x1ac>)
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	3b01      	subs	r3, #1
 8004f68:	781f      	ldrb	r7, [r3, #0]
 8004f6a:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8004f6c:	4e59      	ldr	r6, [pc, #356]	; (80050d4 <testportCommand+0x1a8>)
 8004f6e:	e03e      	b.n	8004fee <testportCommand+0xc2>
	configASSERT( pcWriteBuffer );
 8004f70:	b672      	cpsid	i
 8004f72:	e7fe      	b.n	8004f72 <testportCommand+0x46>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8004f74:	002a      	movs	r2, r5
 8004f76:	4959      	ldr	r1, [pc, #356]	; (80050dc <testportCommand+0x1b0>)
 8004f78:	0020      	movs	r0, r4
 8004f7a:	f00c ffef 	bl	8011f5c <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004f7e:	0020      	movs	r0, r4
 8004f80:	f7fb f8ca 	bl	8000118 <strlen>
 8004f84:	b282      	uxth	r2, r0
 8004f86:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <testportCommand+0x1a8>)
 8004f88:	7818      	ldrb	r0, [r3, #0]
 8004f8a:	2364      	movs	r3, #100	; 0x64
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	3b5a      	subs	r3, #90	; 0x5a
 8004f90:	0021      	movs	r1, r4
 8004f92:	f007 fb67 	bl	800c664 <writePxMutex>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8004f96:	2254      	movs	r2, #84	; 0x54
 8004f98:	4951      	ldr	r1, [pc, #324]	; (80050e0 <testportCommand+0x1b4>)
 8004f9a:	0020      	movs	r0, r4
 8004f9c:	f00c fde0 	bl	8011b60 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8004fa0:	0020      	movs	r0, r4
 8004fa2:	f7fb f8b9 	bl	8000118 <strlen>
 8004fa6:	b282      	uxth	r2, r0
 8004fa8:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <testportCommand+0x1a8>)
 8004faa:	7818      	ldrb	r0, [r3, #0]
 8004fac:	2364      	movs	r3, #100	; 0x64
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	3b5a      	subs	r3, #90	; 0x5a
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	f007 fb56 	bl	800c664 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004fb8:	3701      	adds	r7, #1
 8004fba:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <testportCommand+0x1a8>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	019b      	lsls	r3, r3, #6
 8004fc2:	4a48      	ldr	r2, [pc, #288]	; (80050e4 <testportCommand+0x1b8>)
 8004fc4:	18d3      	adds	r3, r2, r3
 8004fc6:	5ddb      	ldrb	r3, [r3, r7]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10d      	bne.n	8004fe8 <testportCommand+0xbc>
 8004fcc:	4692      	mov	sl, r2
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <testportCommand+0x1a8>)
 8004fd0:	4699      	mov	r9, r3
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f009 fce8 	bl	800e9a8 <HAL_Delay>
 8004fd8:	464b      	mov	r3, r9
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	019b      	lsls	r3, r3, #6
 8004fe0:	4453      	add	r3, sl
 8004fe2:	5ddb      	ldrb	r3, [r3, r7]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f4      	beq.n	8004fd2 <testportCommand+0xa6>
    for (ports=1;ports<=NumOfPorts;ports++)
 8004fe8:	3501      	adds	r5, #1
 8004fea:	2d07      	cmp	r5, #7
 8004fec:	d035      	beq.n	800505a <testportCommand+0x12e>
 8004fee:	b2eb      	uxtb	r3, r5
 8004ff0:	4699      	mov	r9, r3
      if(PcPort!=ports)
 8004ff2:	7833      	ldrb	r3, [r6, #0]
 8004ff4:	454b      	cmp	r3, r9
 8004ff6:	d0f7      	beq.n	8004fe8 <testportCommand+0xbc>
        WriteVaule[0]=rand();
 8004ff8:	f00c fdd4 	bl	8011ba4 <rand>
 8004ffc:	466b      	mov	r3, sp
 8004ffe:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005000:	2364      	movs	r3, #100	; 0x64
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	3b5a      	subs	r3, #90	; 0x5a
 8005006:	2201      	movs	r2, #1
 8005008:	a902      	add	r1, sp, #8
 800500a:	4648      	mov	r0, r9
 800500c:	f007 fb2a 	bl	800c664 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005010:	4648      	mov	r0, r9
 8005012:	f007 fb05 	bl	800c620 <GetUart>
 8005016:	6803      	ldr	r3, [r0, #0]
 8005018:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 800501a:	466a      	mov	r2, sp
 800501c:	7a12      	ldrb	r2, [r2, #8]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	429a      	cmp	r2, r3
 8005022:	d0a7      	beq.n	8004f74 <testportCommand+0x48>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8005024:	002a      	movs	r2, r5
 8005026:	4930      	ldr	r1, [pc, #192]	; (80050e8 <testportCommand+0x1bc>)
 8005028:	0020      	movs	r0, r4
 800502a:	f00c ff97 	bl	8011f5c <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 800502e:	0020      	movs	r0, r4
 8005030:	f7fb f872 	bl	8000118 <strlen>
 8005034:	b282      	uxth	r2, r0
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <testportCommand+0x1a8>)
 8005038:	7818      	ldrb	r0, [r3, #0]
 800503a:	2364      	movs	r3, #100	; 0x64
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	3b5a      	subs	r3, #90	; 0x5a
 8005040:	0021      	movs	r1, r4
 8005042:	f007 fb0f 	bl	800c664 <writePxMutex>
 8005046:	e7a6      	b.n	8004f96 <testportCommand+0x6a>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005048:	2300      	movs	r3, #0
 800504a:	56eb      	ldrsb	r3, [r5, r3]
 800504c:	2b70      	cmp	r3, #112	; 0x70
 800504e:	d00a      	beq.n	8005066 <testportCommand+0x13a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005050:	220f      	movs	r2, #15
 8005052:	4926      	ldr	r1, [pc, #152]	; (80050ec <testportCommand+0x1c0>)
 8005054:	0020      	movs	r0, r4
 8005056:	f00c fd83 	bl	8011b60 <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 800505a:	2000      	movs	r0, #0
 800505c:	b005      	add	sp, #20
 800505e:	bcc0      	pop	{r6, r7}
 8005060:	46ba      	mov	sl, r7
 8005062:	46b1      	mov	r9, r6
 8005064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005066:	1c68      	adds	r0, r5, #1
 8005068:	f00c fb19 	bl	801169e <atol>
 800506c:	0005      	movs	r5, r0
 800506e:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 8005070:	1e73      	subs	r3, r6, #1
 8005072:	2b05      	cmp	r3, #5
 8005074:	d905      	bls.n	8005082 <testportCommand+0x156>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005076:	221b      	movs	r2, #27
 8005078:	491d      	ldr	r1, [pc, #116]	; (80050f0 <testportCommand+0x1c4>)
 800507a:	0020      	movs	r0, r4
 800507c:	f00c fd70 	bl	8011b60 <memcpy>
	return pdFALSE;
 8005080:	e7eb      	b.n	800505a <testportCommand+0x12e>
        WriteVaule[0]=rand();
 8005082:	f00c fd8f 	bl	8011ba4 <rand>
 8005086:	466b      	mov	r3, sp
 8005088:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 800508a:	2364      	movs	r3, #100	; 0x64
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	3b32      	subs	r3, #50	; 0x32
 8005090:	2201      	movs	r2, #1
 8005092:	a902      	add	r1, sp, #8
 8005094:	0030      	movs	r0, r6
 8005096:	f007 fae5 	bl	800c664 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 800509a:	0030      	movs	r0, r6
 800509c:	f007 fac0 	bl	800c620 <GetUart>
 80050a0:	6803      	ldr	r3, [r0, #0]
 80050a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 80050a4:	466a      	mov	r2, sp
 80050a6:	7a12      	ldrb	r2, [r2, #8]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d006      	beq.n	80050bc <testportCommand+0x190>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	402a      	ands	r2, r5
 80050b2:	490d      	ldr	r1, [pc, #52]	; (80050e8 <testportCommand+0x1bc>)
 80050b4:	0020      	movs	r0, r4
 80050b6:	f00c ff51 	bl	8011f5c <sprintf>
 80050ba:	e7ce      	b.n	800505a <testportCommand+0x12e>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	402a      	ands	r2, r5
 80050c0:	4906      	ldr	r1, [pc, #24]	; (80050dc <testportCommand+0x1b0>)
 80050c2:	0020      	movs	r0, r4
 80050c4:	f00c ff4a 	bl	8011f5c <sprintf>
 80050c8:	e7c7      	b.n	800505a <testportCommand+0x12e>
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	0801892c 	.word	0x0801892c
 80050d0:	08018050 	.word	0x08018050
 80050d4:	20000ad7 	.word	0x20000ad7
 80050d8:	200010f8 	.word	0x200010f8
 80050dc:	0801887c 	.word	0x0801887c
 80050e0:	080188ac 	.word	0x080188ac
 80050e4:	20000f78 	.word	0x20000f78
 80050e8:	08018898 	.word	0x08018898
 80050ec:	08018900 	.word	0x08018900
 80050f0:	08018910 	.word	0x08018910

080050f4 <unbridgeCommand>:
{	
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	b083      	sub	sp, #12
 80050f8:	0004      	movs	r4, r0
 80050fa:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005102:	2800      	cmp	r0, #0
 8005104:	d017      	beq.n	8005136 <unbridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005106:	aa01      	add	r2, sp, #4
 8005108:	2101      	movs	r1, #1
 800510a:	0028      	movs	r0, r5
 800510c:	f007 fd00 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005110:	2300      	movs	r3, #0
 8005112:	56c3      	ldrsb	r3, [r0, r3]
 8005114:	2b70      	cmp	r3, #112	; 0x70
 8005116:	d010      	beq.n	800513a <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005118:	466a      	mov	r2, sp
 800511a:	2102      	movs	r1, #2
 800511c:	0028      	movs	r0, r5
 800511e:	f007 fcf7 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005122:	2300      	movs	r3, #0
 8005124:	56c3      	ldrsb	r3, [r0, r3]
 8005126:	2b70      	cmp	r3, #112	; 0x70
 8005128:	d028      	beq.n	800517c <unbridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 800512a:	220f      	movs	r2, #15
 800512c:	491a      	ldr	r1, [pc, #104]	; (8005198 <unbridgeCommand+0xa4>)
 800512e:	0020      	movs	r0, r4
 8005130:	f00c fd16 	bl	8011b60 <memcpy>
 8005134:	e02d      	b.n	8005192 <unbridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005136:	b672      	cpsid	i
 8005138:	e7fe      	b.n	8005138 <unbridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800513a:	3001      	adds	r0, #1
 800513c:	f00c faaf 	bl	801169e <atol>
 8005140:	0006      	movs	r6, r0
 8005142:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005144:	466a      	mov	r2, sp
 8005146:	2102      	movs	r1, #2
 8005148:	0028      	movs	r0, r5
 800514a:	f007 fce1 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800514e:	2300      	movs	r3, #0
 8005150:	56c3      	ldrsb	r3, [r0, r3]
 8005152:	2b70      	cmp	r3, #112	; 0x70
 8005154:	d1e9      	bne.n	800512a <unbridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005156:	3001      	adds	r0, #1
 8005158:	f00c faa1 	bl	801169e <atol>
 800515c:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 800515e:	b2c1      	uxtb	r1, r0
 8005160:	0038      	movs	r0, r7
 8005162:	f7fe ff71 	bl	8004048 <Unbridge>
	if (result == BOS_OK) 
 8005166:	2800      	cmp	r0, #0
 8005168:	d10c      	bne.n	8005184 <unbridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	002b      	movs	r3, r5
 800516e:	4013      	ands	r3, r2
 8005170:	4032      	ands	r2, r6
 8005172:	490a      	ldr	r1, [pc, #40]	; (800519c <unbridgeCommand+0xa8>)
 8005174:	0020      	movs	r0, r4
 8005176:	f00c fef1 	bl	8011f5c <sprintf>
 800517a:	e00a      	b.n	8005192 <unbridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800517c:	3001      	adds	r0, #1
 800517e:	f00c fa8e 	bl	801169e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005182:	e7d2      	b.n	800512a <unbridgeCommand+0x36>
 8005184:	2867      	cmp	r0, #103	; 0x67
 8005186:	d0d0      	beq.n	800512a <unbridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005188:	2219      	movs	r2, #25
 800518a:	4905      	ldr	r1, [pc, #20]	; (80051a0 <unbridgeCommand+0xac>)
 800518c:	0020      	movs	r0, r4
 800518e:	f00c fce7 	bl	8011b60 <memcpy>
}
 8005192:	2000      	movs	r0, #0
 8005194:	b003      	add	sp, #12
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005198:	08018900 	.word	0x08018900
 800519c:	08018930 	.word	0x08018930
 80051a0:	08018950 	.word	0x08018950

080051a4 <bridgeCommand>:
{	
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a6:	b083      	sub	sp, #12
 80051a8:	0004      	movs	r4, r0
 80051aa:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d017      	beq.n	80051e6 <bridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80051b6:	aa01      	add	r2, sp, #4
 80051b8:	2101      	movs	r1, #1
 80051ba:	0028      	movs	r0, r5
 80051bc:	f007 fca8 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80051c0:	2300      	movs	r3, #0
 80051c2:	56c3      	ldrsb	r3, [r0, r3]
 80051c4:	2b70      	cmp	r3, #112	; 0x70
 80051c6:	d010      	beq.n	80051ea <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80051c8:	466a      	mov	r2, sp
 80051ca:	2102      	movs	r1, #2
 80051cc:	0028      	movs	r0, r5
 80051ce:	f007 fc9f 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80051d2:	2300      	movs	r3, #0
 80051d4:	56c3      	ldrsb	r3, [r0, r3]
 80051d6:	2b70      	cmp	r3, #112	; 0x70
 80051d8:	d028      	beq.n	800522c <bridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 80051da:	220f      	movs	r2, #15
 80051dc:	491a      	ldr	r1, [pc, #104]	; (8005248 <bridgeCommand+0xa4>)
 80051de:	0020      	movs	r0, r4
 80051e0:	f00c fcbe 	bl	8011b60 <memcpy>
 80051e4:	e02d      	b.n	8005242 <bridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 80051e6:	b672      	cpsid	i
 80051e8:	e7fe      	b.n	80051e8 <bridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80051ea:	3001      	adds	r0, #1
 80051ec:	f00c fa57 	bl	801169e <atol>
 80051f0:	0006      	movs	r6, r0
 80051f2:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80051f4:	466a      	mov	r2, sp
 80051f6:	2102      	movs	r1, #2
 80051f8:	0028      	movs	r0, r5
 80051fa:	f007 fc89 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80051fe:	2300      	movs	r3, #0
 8005200:	56c3      	ldrsb	r3, [r0, r3]
 8005202:	2b70      	cmp	r3, #112	; 0x70
 8005204:	d1e9      	bne.n	80051da <bridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005206:	3001      	adds	r0, #1
 8005208:	f00c fa49 	bl	801169e <atol>
 800520c:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 800520e:	b2c1      	uxtb	r1, r0
 8005210:	0038      	movs	r0, r7
 8005212:	f7fe ff05 	bl	8004020 <Bridge>
	if (result == BOS_OK) 
 8005216:	2800      	cmp	r0, #0
 8005218:	d10c      	bne.n	8005234 <bridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 800521a:	22ff      	movs	r2, #255	; 0xff
 800521c:	002b      	movs	r3, r5
 800521e:	4013      	ands	r3, r2
 8005220:	4032      	ands	r2, r6
 8005222:	490a      	ldr	r1, [pc, #40]	; (800524c <bridgeCommand+0xa8>)
 8005224:	0020      	movs	r0, r4
 8005226:	f00c fe99 	bl	8011f5c <sprintf>
 800522a:	e00a      	b.n	8005242 <bridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800522c:	3001      	adds	r0, #1
 800522e:	f00c fa36 	bl	801169e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005232:	e7d2      	b.n	80051da <bridgeCommand+0x36>
 8005234:	2867      	cmp	r0, #103	; 0x67
 8005236:	d0d0      	beq.n	80051da <bridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005238:	2217      	movs	r2, #23
 800523a:	4905      	ldr	r1, [pc, #20]	; (8005250 <bridgeCommand+0xac>)
 800523c:	0020      	movs	r0, r4
 800523e:	f00c fc8f 	bl	8011b60 <memcpy>
}
 8005242:	2000      	movs	r0, #0
 8005244:	b003      	add	sp, #12
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005248:	08018900 	.word	0x08018900
 800524c:	0801896c 	.word	0x0801896c
 8005250:	08018990 	.word	0x08018990

08005254 <delSnipCommand>:
{	
 8005254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005256:	46de      	mov	lr, fp
 8005258:	4657      	mov	r7, sl
 800525a:	464e      	mov	r6, r9
 800525c:	4645      	mov	r5, r8
 800525e:	b5e0      	push	{r5, r6, r7, lr}
 8005260:	b083      	sub	sp, #12
 8005262:	0007      	movs	r7, r0
 8005264:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800526a:	2f00      	cmp	r7, #0
 800526c:	d013      	beq.n	8005296 <delSnipCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800526e:	aa01      	add	r2, sp, #4
 8005270:	2101      	movs	r1, #1
 8005272:	f007 fc4d 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005276:	f00c fa0c 	bl	8011692 <atoi>
 800527a:	4681      	mov	r9, r0
 800527c:	b2c5      	uxtb	r5, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 800527e:	2d00      	cmp	r5, #0
 8005280:	d003      	beq.n	800528a <delSnipCommand+0x36>
 8005282:	4b31      	ldr	r3, [pc, #196]	; (8005348 <delSnipCommand+0xf4>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	42ab      	cmp	r3, r5
 8005288:	d207      	bcs.n	800529a <delSnipCommand+0x46>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 800528a:	2223      	movs	r2, #35	; 0x23
 800528c:	492f      	ldr	r1, [pc, #188]	; (800534c <delSnipCommand+0xf8>)
 800528e:	0038      	movs	r0, r7
 8005290:	f00c fc66 	bl	8011b60 <memcpy>
	return pdFALSE;
 8005294:	e04f      	b.n	8005336 <delSnipCommand+0xe2>
	configASSERT( pcWriteBuffer );
 8005296:	b672      	cpsid	i
 8005298:	e7fe      	b.n	8005298 <delSnipCommand+0x44>
		snippets[index-1].cond.conditionType = 0;
 800529a:	24ff      	movs	r4, #255	; 0xff
 800529c:	4004      	ands	r4, r0
 800529e:	3c01      	subs	r4, #1
 80052a0:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <delSnipCommand+0xfc>)
 80052a2:	4698      	mov	r8, r3
 80052a4:	00a6      	lsls	r6, r4, #2
 80052a6:	1933      	adds	r3, r6, r4
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	2200      	movs	r2, #0
 80052ac:	4692      	mov	sl, r2
 80052ae:	4642      	mov	r2, r8
 80052b0:	4651      	mov	r1, sl
 80052b2:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 80052b4:	1933      	adds	r3, r6, r4
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4443      	add	r3, r8
 80052ba:	469b      	mov	fp, r3
 80052bc:	4652      	mov	r2, sl
 80052be:	7059      	strb	r1, [r3, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 80052c0:	1930      	adds	r0, r6, r4
 80052c2:	0080      	lsls	r0, r0, #2
 80052c4:	3002      	adds	r0, #2
 80052c6:	4440      	add	r0, r8
 80052c8:	3204      	adds	r2, #4
 80052ca:	f00c fc52 	bl	8011b72 <memset>
		snippets[index-1].state = false;
 80052ce:	465b      	mov	r3, fp
 80052d0:	4652      	mov	r2, sl
 80052d2:	741a      	strb	r2, [r3, #16]
		free(snippets[index-1].cmd);
 80052d4:	68d8      	ldr	r0, [r3, #12]
 80052d6:	f00c fa17 	bl	8011708 <free>
		snippets[index-1].cmd = NULL;
 80052da:	465c      	mov	r4, fp
 80052dc:	4653      	mov	r3, sl
 80052de:	60e3      	str	r3, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <delSnipCommand+0xf4>)
 80052e2:	781e      	ldrb	r6, [r3, #0]
 80052e4:	42b5      	cmp	r5, r6
 80052e6:	d21c      	bcs.n	8005322 <delSnipCommand+0xce>
 80052e8:	20ff      	movs	r0, #255	; 0xff
 80052ea:	464b      	mov	r3, r9
 80052ec:	4018      	ands	r0, r3
 80052ee:	0084      	lsls	r4, r0, #2
 80052f0:	1824      	adds	r4, r4, r0
 80052f2:	00a4      	lsls	r4, r4, #2
 80052f4:	4b16      	ldr	r3, [pc, #88]	; (8005350 <delSnipCommand+0xfc>)
 80052f6:	18e4      	adds	r4, r4, r3
 80052f8:	e004      	b.n	8005304 <delSnipCommand+0xb0>
 80052fa:	3501      	adds	r5, #1
 80052fc:	b2ed      	uxtb	r5, r5
 80052fe:	3414      	adds	r4, #20
 8005300:	42b5      	cmp	r5, r6
 8005302:	d00e      	beq.n	8005322 <delSnipCommand+0xce>
			if (snippets[s].cond.conditionType) {
 8005304:	7823      	ldrb	r3, [r4, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f7      	beq.n	80052fa <delSnipCommand+0xa6>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 800530a:	2214      	movs	r2, #20
 800530c:	0021      	movs	r1, r4
 800530e:	0020      	movs	r0, r4
 8005310:	3814      	subs	r0, #20
 8005312:	f00c fc25 	bl	8011b60 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005316:	2214      	movs	r2, #20
 8005318:	2100      	movs	r1, #0
 800531a:	0020      	movs	r0, r4
 800531c:	f00c fc29 	bl	8011b72 <memset>
 8005320:	e7eb      	b.n	80052fa <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 8005322:	3e01      	subs	r6, #1
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <delSnipCommand+0xf4>)
 8005326:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005328:	f005 f9a2 	bl	800a670 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 800532c:	2236      	movs	r2, #54	; 0x36
 800532e:	4909      	ldr	r1, [pc, #36]	; (8005354 <delSnipCommand+0x100>)
 8005330:	0038      	movs	r0, r7
 8005332:	f00c fc15 	bl	8011b60 <memcpy>
}
 8005336:	2000      	movs	r0, #0
 8005338:	b003      	add	sp, #12
 800533a:	bcf0      	pop	{r4, r5, r6, r7}
 800533c:	46bb      	mov	fp, r7
 800533e:	46b2      	mov	sl, r6
 8005340:	46a9      	mov	r9, r5
 8005342:	46a0      	mov	r8, r4
 8005344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	20000ec7 	.word	0x20000ec7
 800534c:	080189e0 	.word	0x080189e0
 8005350:	2000661c 	.word	0x2000661c
 8005354:	080189a8 	.word	0x080189a8

08005358 <pauseSnipCommand>:
{	
 8005358:	b510      	push	{r4, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	0004      	movs	r4, r0
 800535e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005364:	2c00      	cmp	r4, #0
 8005366:	d014      	beq.n	8005392 <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005368:	aa01      	add	r2, sp, #4
 800536a:	2101      	movs	r1, #1
 800536c:	f007 fbd0 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005370:	f00c f98f 	bl	8011692 <atoi>
 8005374:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <pauseSnipCommand+0x2a>
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <pauseSnipCommand+0x64>)
 800537c:	7812      	ldrb	r2, [r2, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d209      	bcs.n	8005396 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005382:	2223      	movs	r2, #35	; 0x23
 8005384:	490e      	ldr	r1, [pc, #56]	; (80053c0 <pauseSnipCommand+0x68>)
 8005386:	0020      	movs	r0, r4
 8005388:	f00c fbea 	bl	8011b60 <memcpy>
}
 800538c:	2000      	movs	r0, #0
 800538e:	b002      	add	sp, #8
 8005390:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005392:	b672      	cpsid	i
 8005394:	e7fe      	b.n	8005394 <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 8005396:	23ff      	movs	r3, #255	; 0xff
 8005398:	4003      	ands	r3, r0
 800539a:	3b01      	subs	r3, #1
 800539c:	009a      	lsls	r2, r3, #2
 800539e:	18d3      	adds	r3, r2, r3
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <pauseSnipCommand+0x6c>)
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	2200      	movs	r2, #0
 80053a8:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 80053aa:	f005 f961 	bl	800a670 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80053ae:	2235      	movs	r2, #53	; 0x35
 80053b0:	4905      	ldr	r1, [pc, #20]	; (80053c8 <pauseSnipCommand+0x70>)
 80053b2:	0020      	movs	r0, r4
 80053b4:	f00c fbd4 	bl	8011b60 <memcpy>
 80053b8:	e7e8      	b.n	800538c <pauseSnipCommand+0x34>
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	20000ec7 	.word	0x20000ec7
 80053c0:	080189e0 	.word	0x080189e0
 80053c4:	2000661c 	.word	0x2000661c
 80053c8:	08018a04 	.word	0x08018a04

080053cc <actSnipCommand>:
{	
 80053cc:	b510      	push	{r4, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	0004      	movs	r4, r0
 80053d2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80053d8:	2c00      	cmp	r4, #0
 80053da:	d014      	beq.n	8005406 <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80053dc:	aa01      	add	r2, sp, #4
 80053de:	2101      	movs	r1, #1
 80053e0:	f007 fb96 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80053e4:	f00c f955 	bl	8011692 <atoi>
 80053e8:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <actSnipCommand+0x2a>
 80053ee:	4a10      	ldr	r2, [pc, #64]	; (8005430 <actSnipCommand+0x64>)
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d209      	bcs.n	800540a <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80053f6:	2223      	movs	r2, #35	; 0x23
 80053f8:	490e      	ldr	r1, [pc, #56]	; (8005434 <actSnipCommand+0x68>)
 80053fa:	0020      	movs	r0, r4
 80053fc:	f00c fbb0 	bl	8011b60 <memcpy>
}
 8005400:	2000      	movs	r0, #0
 8005402:	b002      	add	sp, #8
 8005404:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005406:	b672      	cpsid	i
 8005408:	e7fe      	b.n	8005408 <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 800540a:	23ff      	movs	r3, #255	; 0xff
 800540c:	4003      	ands	r3, r0
 800540e:	3b01      	subs	r3, #1
 8005410:	009a      	lsls	r2, r3, #2
 8005412:	18d3      	adds	r3, r2, r3
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4a08      	ldr	r2, [pc, #32]	; (8005438 <actSnipCommand+0x6c>)
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	2201      	movs	r2, #1
 800541c:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 800541e:	f005 f927 	bl	800a670 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005422:	2238      	movs	r2, #56	; 0x38
 8005424:	4905      	ldr	r1, [pc, #20]	; (800543c <actSnipCommand+0x70>)
 8005426:	0020      	movs	r0, r4
 8005428:	f00c fb9a 	bl	8011b60 <memcpy>
 800542c:	e7e8      	b.n	8005400 <actSnipCommand+0x34>
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	20000ec7 	.word	0x20000ec7
 8005434:	080189e0 	.word	0x080189e0
 8005438:	2000661c 	.word	0x2000661c
 800543c:	08018a3c 	.word	0x08018a3c

08005440 <snipCommand>:
{	
 8005440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005442:	46de      	mov	lr, fp
 8005444:	4657      	mov	r7, sl
 8005446:	464e      	mov	r6, r9
 8005448:	4645      	mov	r5, r8
 800544a:	b5e0      	push	{r5, r6, r7, lr}
 800544c:	b08b      	sub	sp, #44	; 0x2c
 800544e:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005450:	aa06      	add	r2, sp, #24
 8005452:	4b80      	ldr	r3, [pc, #512]	; (8005654 <snipCommand+0x214>)
 8005454:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005456:	c223      	stmia	r2!, {r0, r1, r5}
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 800545c:	2c00      	cmp	r4, #0
 800545e:	d013      	beq.n	8005488 <snipCommand+0x48>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005460:	4b7d      	ldr	r3, [pc, #500]	; (8005658 <snipCommand+0x218>)
 8005462:	7818      	ldrb	r0, [r3, #0]
 8005464:	2301      	movs	r3, #1
 8005466:	425b      	negs	r3, r3
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	3333      	adds	r3, #51	; 0x33
 800546c:	2237      	movs	r2, #55	; 0x37
 800546e:	497b      	ldr	r1, [pc, #492]	; (800565c <snipCommand+0x21c>)
 8005470:	f007 f8f8 	bl	800c664 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005474:	4b7a      	ldr	r3, [pc, #488]	; (8005660 <snipCommand+0x220>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d100      	bne.n	800547e <snipCommand+0x3e>
 800547c:	e0dd      	b.n	800563a <snipCommand+0x1fa>
 800547e:	2700      	movs	r7, #0
		if (snippets[s].cond.conditionType)
 8005480:	4b78      	ldr	r3, [pc, #480]	; (8005664 <snipCommand+0x224>)
 8005482:	4698      	mov	r8, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005484:	4d78      	ldr	r5, [pc, #480]	; (8005668 <snipCommand+0x228>)
 8005486:	e0c3      	b.n	8005610 <snipCommand+0x1d0>
	configASSERT( pcWriteBuffer );
 8005488:	b672      	cpsid	i
 800548a:	e7fe      	b.n	800548a <snipCommand+0x4a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 800548c:	4b75      	ldr	r3, [pc, #468]	; (8005664 <snipCommand+0x224>)
 800548e:	469b      	mov	fp, r3
 8005490:	00b3      	lsls	r3, r6, #2
 8005492:	4699      	mov	r9, r3
 8005494:	199b      	adds	r3, r3, r6
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	445b      	add	r3, fp
 800549a:	7c1a      	ldrb	r2, [r3, #16]
 800549c:	00d3      	lsls	r3, r2, #3
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	aa06      	add	r2, sp, #24
 80054a2:	4694      	mov	ip, r2
 80054a4:	4463      	add	r3, ip
 80054a6:	003a      	movs	r2, r7
 80054a8:	4970      	ldr	r1, [pc, #448]	; (800566c <snipCommand+0x22c>)
 80054aa:	0020      	movs	r0, r4
 80054ac:	f00c fd56 	bl	8011f5c <sprintf>
		switch (snippets[s].cond.conditionType)
 80054b0:	464b      	mov	r3, r9
 80054b2:	199b      	adds	r3, r3, r6
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	465a      	mov	r2, fp
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d11c      	bne.n	80054f8 <snipCommand+0xb8>
				switch (snippets[s].cond.buffer1[1])
 80054be:	00b3      	lsls	r3, r6, #2
 80054c0:	199b      	adds	r3, r3, r6
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4a67      	ldr	r2, [pc, #412]	; (8005664 <snipCommand+0x224>)
 80054c6:	18d3      	adds	r3, r2, r3
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	2b0b      	cmp	r3, #11
 80054cc:	d842      	bhi.n	8005554 <snipCommand+0x114>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d861      	bhi.n	8005596 <snipCommand+0x156>
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d051      	beq.n	800557a <snipCommand+0x13a>
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d000      	beq.n	80054dc <snipCommand+0x9c>
 80054da:	e0a5      	b.n	8005628 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 80054dc:	00b3      	lsls	r3, r6, #2
 80054de:	199e      	adds	r6, r3, r6
 80054e0:	00b6      	lsls	r6, r6, #2
 80054e2:	4b60      	ldr	r3, [pc, #384]	; (8005664 <snipCommand+0x224>)
 80054e4:	199e      	adds	r6, r3, r6
 80054e6:	78b3      	ldrb	r3, [r6, #2]
 80054e8:	68f2      	ldr	r2, [r6, #12]
 80054ea:	9200      	str	r2, [sp, #0]
 80054ec:	0022      	movs	r2, r4
 80054ee:	4960      	ldr	r1, [pc, #384]	; (8005670 <snipCommand+0x230>)
 80054f0:	0020      	movs	r0, r4
 80054f2:	f00c fd33 	bl	8011f5c <sprintf>
        		break;
 80054f6:	e097      	b.n	8005628 <snipCommand+0x1e8>
		switch (snippets[s].cond.conditionType)
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d000      	beq.n	80054fe <snipCommand+0xbe>
 80054fc:	e094      	b.n	8005628 <snipCommand+0x1e8>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80054fe:	00b1      	lsls	r1, r6, #2
 8005500:	1989      	adds	r1, r1, r6
 8005502:	0089      	lsls	r1, r1, #2
 8005504:	3106      	adds	r1, #6
 8005506:	4b57      	ldr	r3, [pc, #348]	; (8005664 <snipCommand+0x224>)
 8005508:	4699      	mov	r9, r3
 800550a:	4449      	add	r1, r9
 800550c:	2204      	movs	r2, #4
 800550e:	a805      	add	r0, sp, #20
 8005510:	f00c fb26 	bl	8011b60 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8005514:	00b3      	lsls	r3, r6, #2
 8005516:	199e      	adds	r6, r3, r6
 8005518:	00b6      	lsls	r6, r6, #2
 800551a:	444e      	add	r6, r9
 800551c:	78f2      	ldrb	r2, [r6, #3]
 800551e:	3a01      	subs	r2, #1
 8005520:	0053      	lsls	r3, r2, #1
 8005522:	189b      	adds	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a53      	ldr	r2, [pc, #332]	; (8005674 <snipCommand+0x234>)
 8005528:	18d3      	adds	r3, r2, r3
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4699      	mov	r9, r3
 800552e:	9805      	ldr	r0, [sp, #20]
 8005530:	f7fd f856 	bl	80025e0 <__aeabi_f2d>
 8005534:	9002      	str	r0, [sp, #8]
 8005536:	9103      	str	r1, [sp, #12]
 8005538:	7873      	ldrb	r3, [r6, #1]
 800553a:	3b01      	subs	r3, #1
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	18d2      	adds	r2, r2, r3
 8005540:	4b4d      	ldr	r3, [pc, #308]	; (8005678 <snipCommand+0x238>)
 8005542:	189b      	adds	r3, r3, r2
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	464b      	mov	r3, r9
 8005548:	0022      	movs	r2, r4
 800554a:	494c      	ldr	r1, [pc, #304]	; (800567c <snipCommand+0x23c>)
 800554c:	0020      	movs	r0, r4
 800554e:	f00c fd05 	bl	8011f5c <sprintf>
				break;
 8005552:	e069      	b.n	8005628 <snipCommand+0x1e8>
 8005554:	3b0c      	subs	r3, #12
 8005556:	2b02      	cmp	r3, #2
 8005558:	d866      	bhi.n	8005628 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 800555a:	00b2      	lsls	r2, r6, #2
 800555c:	1996      	adds	r6, r2, r6
 800555e:	00b6      	lsls	r6, r6, #2
 8005560:	4a40      	ldr	r2, [pc, #256]	; (8005664 <snipCommand+0x224>)
 8005562:	1992      	adds	r2, r2, r6
 8005564:	7893      	ldrb	r3, [r2, #2]
 8005566:	68d1      	ldr	r1, [r2, #12]
 8005568:	9101      	str	r1, [sp, #4]
 800556a:	7912      	ldrb	r2, [r2, #4]
 800556c:	9200      	str	r2, [sp, #0]
 800556e:	0022      	movs	r2, r4
 8005570:	4943      	ldr	r1, [pc, #268]	; (8005680 <snipCommand+0x240>)
 8005572:	0020      	movs	r0, r4
 8005574:	f00c fcf2 	bl	8011f5c <sprintf>
        		break;						
 8005578:	e056      	b.n	8005628 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 800557a:	00b3      	lsls	r3, r6, #2
 800557c:	199e      	adds	r6, r3, r6
 800557e:	00b6      	lsls	r6, r6, #2
 8005580:	4b38      	ldr	r3, [pc, #224]	; (8005664 <snipCommand+0x224>)
 8005582:	199e      	adds	r6, r3, r6
 8005584:	78b3      	ldrb	r3, [r6, #2]
 8005586:	68f2      	ldr	r2, [r6, #12]
 8005588:	9200      	str	r2, [sp, #0]
 800558a:	0022      	movs	r2, r4
 800558c:	493d      	ldr	r1, [pc, #244]	; (8005684 <snipCommand+0x244>)
 800558e:	0020      	movs	r0, r4
 8005590:	f00c fce4 	bl	8011f5c <sprintf>
        		break;
 8005594:	e048      	b.n	8005628 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005596:	00b2      	lsls	r2, r6, #2
 8005598:	1996      	adds	r6, r2, r6
 800559a:	00b6      	lsls	r6, r6, #2
 800559c:	4a31      	ldr	r2, [pc, #196]	; (8005664 <snipCommand+0x224>)
 800559e:	1992      	adds	r2, r2, r6
 80055a0:	7893      	ldrb	r3, [r2, #2]
 80055a2:	68d1      	ldr	r1, [r2, #12]
 80055a4:	9101      	str	r1, [sp, #4]
 80055a6:	7912      	ldrb	r2, [r2, #4]
 80055a8:	9200      	str	r2, [sp, #0]
 80055aa:	0022      	movs	r2, r4
 80055ac:	4936      	ldr	r1, [pc, #216]	; (8005688 <snipCommand+0x248>)
 80055ae:	0020      	movs	r0, r4
 80055b0:	f00c fcd4 	bl	8011f5c <sprintf>
        		break;
 80055b4:	e038      	b.n	8005628 <snipCommand+0x1e8>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 80055b6:	002b      	movs	r3, r5
 80055b8:	0022      	movs	r2, r4
 80055ba:	4934      	ldr	r1, [pc, #208]	; (800568c <snipCommand+0x24c>)
 80055bc:	0020      	movs	r0, r4
 80055be:	f00c fccd 	bl	8011f5c <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 80055c2:	0028      	movs	r0, r5
 80055c4:	f7fa fda8 	bl	8000118 <strlen>
 80055c8:	0002      	movs	r2, r0
 80055ca:	2100      	movs	r1, #0
 80055cc:	0028      	movs	r0, r5
 80055ce:	f00c fad0 	bl	8011b72 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 80055d2:	4649      	mov	r1, r9
 80055d4:	68f0      	ldr	r0, [r6, #12]
 80055d6:	f7ff fb39 	bl	8004c4c <ParseSnippetCommand>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d1eb      	bne.n	80055b6 <snipCommand+0x176>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 80055de:	0020      	movs	r0, r4
 80055e0:	f7fa fd9a 	bl	8000118 <strlen>
 80055e4:	1820      	adds	r0, r4, r0
 80055e6:	220c      	movs	r2, #12
 80055e8:	4929      	ldr	r1, [pc, #164]	; (8005690 <snipCommand+0x250>)
 80055ea:	f00c fab9 	bl	8011b60 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80055ee:	0020      	movs	r0, r4
 80055f0:	f7fa fd92 	bl	8000118 <strlen>
 80055f4:	b282      	uxth	r2, r0
 80055f6:	4b18      	ldr	r3, [pc, #96]	; (8005658 <snipCommand+0x218>)
 80055f8:	7818      	ldrb	r0, [r3, #0]
 80055fa:	2301      	movs	r3, #1
 80055fc:	425b      	negs	r3, r3
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	3333      	adds	r3, #51	; 0x33
 8005602:	0021      	movs	r1, r4
 8005604:	f007 f82e 	bl	800c664 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005608:	4b15      	ldr	r3, [pc, #84]	; (8005660 <snipCommand+0x220>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	42bb      	cmp	r3, r7
 800560e:	d914      	bls.n	800563a <snipCommand+0x1fa>
 8005610:	003e      	movs	r6, r7
 8005612:	3701      	adds	r7, #1
 8005614:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8005616:	46b2      	mov	sl, r6
 8005618:	00b3      	lsls	r3, r6, #2
 800561a:	199b      	adds	r3, r3, r6
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4642      	mov	r2, r8
 8005620:	5c9b      	ldrb	r3, [r3, r2]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d000      	beq.n	8005628 <snipCommand+0x1e8>
 8005626:	e731      	b.n	800548c <snipCommand+0x4c>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005628:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <snipCommand+0x228>)
 800562a:	4699      	mov	r9, r3
 800562c:	4653      	mov	r3, sl
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4453      	add	r3, sl
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4e0b      	ldr	r6, [pc, #44]	; (8005664 <snipCommand+0x224>)
 8005636:	18f6      	adds	r6, r6, r3
 8005638:	e7cb      	b.n	80055d2 <snipCommand+0x192>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 800563a:	22a7      	movs	r2, #167	; 0xa7
 800563c:	4915      	ldr	r1, [pc, #84]	; (8005694 <snipCommand+0x254>)
 800563e:	0020      	movs	r0, r4
 8005640:	f00c fa8e 	bl	8011b60 <memcpy>
}
 8005644:	2000      	movs	r0, #0
 8005646:	b00b      	add	sp, #44	; 0x2c
 8005648:	bcf0      	pop	{r4, r5, r6, r7}
 800564a:	46bb      	mov	fp, r7
 800564c:	46b2      	mov	sl, r6
 800564e:	46a9      	mov	r9, r5
 8005650:	46a0      	mov	r8, r4
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005654:	08017d50 	.word	0x08017d50
 8005658:	20000ad7 	.word	0x20000ad7
 800565c:	08018a74 	.word	0x08018a74
 8005660:	20000ec7 	.word	0x20000ec7
 8005664:	2000661c 	.word	0x2000661c
 8005668:	20000ef8 	.word	0x20000ef8
 800566c:	08018aac 	.word	0x08018aac
 8005670:	08018acc 	.word	0x08018acc
 8005674:	200000dc 	.word	0x200000dc
 8005678:	0801a268 	.word	0x0801a268
 800567c:	08018b18 	.word	0x08018b18
 8005680:	08018afc 	.word	0x08018afc
 8005684:	08018ab8 	.word	0x08018ab8
 8005688:	08018ae4 	.word	0x08018ae4
 800568c:	08018b28 	.word	0x08018b28
 8005690:	08018b30 	.word	0x08018b30
 8005694:	08018b3c 	.word	0x08018b3c

08005698 <idcodeCommand>:
{	
 8005698:	b510      	push	{r4, lr}
 800569a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800569c:	d00c      	beq.n	80056b8 <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 800569e:	f009 f997 	bl	800e9d0 <HAL_GetDEVID>
	switch (dev)
 80056a2:	0403      	lsls	r3, r0, #16
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <idcodeCommand+0x80>)
 80056a8:	4694      	mov	ip, r2
 80056aa:	4463      	add	r3, ip
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d82c      	bhi.n	800570a <idcodeCommand+0x72>
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a1a      	ldr	r2, [pc, #104]	; (800571c <idcodeCommand+0x84>)
 80056b4:	58d3      	ldr	r3, [r2, r3]
 80056b6:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 80056b8:	b672      	cpsid	i
 80056ba:	e7fe      	b.n	80056ba <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <idcodeCommand+0x88>)
 80056be:	4919      	ldr	r1, [pc, #100]	; (8005724 <idcodeCommand+0x8c>)
 80056c0:	0020      	movs	r0, r4
 80056c2:	f00c fc4b 	bl	8011f5c <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 80056c6:	f009 f97d 	bl	800e9c4 <HAL_GetREVID>
 80056ca:	0b03      	lsrs	r3, r0, #12
 80056cc:	0022      	movs	r2, r4
 80056ce:	4916      	ldr	r1, [pc, #88]	; (8005728 <idcodeCommand+0x90>)
 80056d0:	0020      	movs	r0, r4
 80056d2:	f00c fc43 	bl	8011f5c <sprintf>
}
 80056d6:	2000      	movs	r0, #0
 80056d8:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 80056da:	4a14      	ldr	r2, [pc, #80]	; (800572c <idcodeCommand+0x94>)
 80056dc:	4911      	ldr	r1, [pc, #68]	; (8005724 <idcodeCommand+0x8c>)
 80056de:	0020      	movs	r0, r4
 80056e0:	f00c fc3c 	bl	8011f5c <sprintf>
  		break;
 80056e4:	e7ef      	b.n	80056c6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <idcodeCommand+0x98>)
 80056e8:	490e      	ldr	r1, [pc, #56]	; (8005724 <idcodeCommand+0x8c>)
 80056ea:	0020      	movs	r0, r4
 80056ec:	f00c fc36 	bl	8011f5c <sprintf>
  		break;
 80056f0:	e7e9      	b.n	80056c6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <idcodeCommand+0x9c>)
 80056f4:	490b      	ldr	r1, [pc, #44]	; (8005724 <idcodeCommand+0x8c>)
 80056f6:	0020      	movs	r0, r4
 80056f8:	f00c fc30 	bl	8011f5c <sprintf>
  		break;
 80056fc:	e7e3      	b.n	80056c6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <idcodeCommand+0xa0>)
 8005700:	4908      	ldr	r1, [pc, #32]	; (8005724 <idcodeCommand+0x8c>)
 8005702:	0020      	movs	r0, r4
 8005704:	f00c fc2a 	bl	8011f5c <sprintf>
  		break;
 8005708:	e7dd      	b.n	80056c6 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <idcodeCommand+0xa4>)
 800570c:	4905      	ldr	r1, [pc, #20]	; (8005724 <idcodeCommand+0x8c>)
 800570e:	0020      	movs	r0, r4
 8005710:	f00c fc24 	bl	8011f5c <sprintf>
  		break;
 8005714:	e7d7      	b.n	80056c6 <idcodeCommand+0x2e>
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	fffffbc0 	.word	0xfffffbc0
 800571c:	08018c54 	.word	0x08018c54
 8005720:	08018be4 	.word	0x08018be4
 8005724:	08018bf0 	.word	0x08018bf0
 8005728:	08018c3c 	.word	0x08018c3c
 800572c:	08018c04 	.word	0x08018c04
 8005730:	08018c10 	.word	0x08018c10
 8005734:	08018c1c 	.word	0x08018c1c
 8005738:	08018c28 	.word	0x08018c28
 800573c:	08018c34 	.word	0x08018c34

08005740 <uuidCommand>:
{
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005744:	d023      	beq.n	800578e <uuidCommand+0x4e>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8005746:	220e      	movs	r2, #14
 8005748:	4912      	ldr	r1, [pc, #72]	; (8005794 <uuidCommand+0x54>)
 800574a:	f00c fa09 	bl	8011b60 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <uuidCommand+0x58>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4d12      	ldr	r5, [pc, #72]	; (800579c <uuidCommand+0x5c>)
 8005754:	0022      	movs	r2, r4
 8005756:	0029      	movs	r1, r5
 8005758:	0020      	movs	r0, r4
 800575a:	f00c fbff 	bl	8011f5c <sprintf>
 800575e:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <uuidCommand+0x60>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	0022      	movs	r2, r4
 8005764:	0029      	movs	r1, r5
 8005766:	0020      	movs	r0, r4
 8005768:	f00c fbf8 	bl	8011f5c <sprintf>
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <uuidCommand+0x64>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0022      	movs	r2, r4
 8005772:	0029      	movs	r1, r5
 8005774:	0020      	movs	r0, r4
 8005776:	f00c fbf1 	bl	8011f5c <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 800577a:	0020      	movs	r0, r4
 800577c:	f7fa fccc 	bl	8000118 <strlen>
 8005780:	1820      	adds	r0, r4, r0
 8005782:	2203      	movs	r2, #3
 8005784:	4908      	ldr	r1, [pc, #32]	; (80057a8 <uuidCommand+0x68>)
 8005786:	f00c f9eb 	bl	8011b60 <memcpy>
}
 800578a:	2000      	movs	r0, #0
 800578c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800578e:	b672      	cpsid	i
 8005790:	e7fe      	b.n	8005790 <uuidCommand+0x50>
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	08018c78 	.word	0x08018c78
 8005798:	1ffff7ac 	.word	0x1ffff7ac
 800579c:	08018c88 	.word	0x08018c88
 80057a0:	1ffff7b0 	.word	0x1ffff7b0
 80057a4:	1ffff7b4 	.word	0x1ffff7b4
 80057a8:	08019908 	.word	0x08019908

080057ac <timeCommand>:
{
 80057ac:	b510      	push	{r4, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80057b2:	d00a      	beq.n	80057ca <timeCommand+0x1e>
	GetTimeDate();
 80057b4:	f006 fca6 	bl	800c104 <GetTimeDate>
	if (BOS.hourformat == 24)
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <timeCommand+0x80>)
 80057ba:	7b5b      	ldrb	r3, [r3, #13]
 80057bc:	2b18      	cmp	r3, #24
 80057be:	d006      	beq.n	80057ce <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	d010      	beq.n	80057e6 <timeCommand+0x3a>
}
 80057c4:	2000      	movs	r0, #0
 80057c6:	b004      	add	sp, #16
 80057c8:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80057ca:	b672      	cpsid	i
 80057cc:	e7fe      	b.n	80057cc <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 80057ce:	4917      	ldr	r1, [pc, #92]	; (800582c <timeCommand+0x80>)
 80057d0:	7c4b      	ldrb	r3, [r1, #17]
 80057d2:	7c8a      	ldrb	r2, [r1, #18]
 80057d4:	89c8      	ldrh	r0, [r1, #14]
 80057d6:	9001      	str	r0, [sp, #4]
 80057d8:	7c09      	ldrb	r1, [r1, #16]
 80057da:	9100      	str	r1, [sp, #0]
 80057dc:	4914      	ldr	r1, [pc, #80]	; (8005830 <timeCommand+0x84>)
 80057de:	0020      	movs	r0, r4
 80057e0:	f00c fbbc 	bl	8011f5c <sprintf>
 80057e4:	e7ee      	b.n	80057c4 <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <timeCommand+0x80>)
 80057e8:	7cdb      	ldrb	r3, [r3, #19]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d00f      	beq.n	800580e <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d1e8      	bne.n	80057c4 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 80057f2:	490e      	ldr	r1, [pc, #56]	; (800582c <timeCommand+0x80>)
 80057f4:	7c4b      	ldrb	r3, [r1, #17]
 80057f6:	7c8a      	ldrb	r2, [r1, #18]
 80057f8:	480e      	ldr	r0, [pc, #56]	; (8005834 <timeCommand+0x88>)
 80057fa:	9002      	str	r0, [sp, #8]
 80057fc:	89c8      	ldrh	r0, [r1, #14]
 80057fe:	9001      	str	r0, [sp, #4]
 8005800:	7c09      	ldrb	r1, [r1, #16]
 8005802:	9100      	str	r1, [sp, #0]
 8005804:	490c      	ldr	r1, [pc, #48]	; (8005838 <timeCommand+0x8c>)
 8005806:	0020      	movs	r0, r4
 8005808:	f00c fba8 	bl	8011f5c <sprintf>
 800580c:	e7da      	b.n	80057c4 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 800580e:	4907      	ldr	r1, [pc, #28]	; (800582c <timeCommand+0x80>)
 8005810:	7c4b      	ldrb	r3, [r1, #17]
 8005812:	7c8a      	ldrb	r2, [r1, #18]
 8005814:	4809      	ldr	r0, [pc, #36]	; (800583c <timeCommand+0x90>)
 8005816:	9002      	str	r0, [sp, #8]
 8005818:	89c8      	ldrh	r0, [r1, #14]
 800581a:	9001      	str	r0, [sp, #4]
 800581c:	7c09      	ldrb	r1, [r1, #16]
 800581e:	9100      	str	r1, [sp, #0]
 8005820:	4905      	ldr	r1, [pc, #20]	; (8005838 <timeCommand+0x8c>)
 8005822:	0020      	movs	r0, r4
 8005824:	f00c fb9a 	bl	8011f5c <sprintf>
 8005828:	e7cc      	b.n	80057c4 <timeCommand+0x18>
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	20006600 	.word	0x20006600
 8005830:	08018c90 	.word	0x08018c90
 8005834:	08018ce8 	.word	0x08018ce8
 8005838:	08018cb8 	.word	0x08018cb8
 800583c:	08018ce4 	.word	0x08018ce4

08005840 <dateCommand>:
{
 8005840:	b510      	push	{r4, lr}
 8005842:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005844:	d00a      	beq.n	800585c <dateCommand+0x1c>
	GetTimeDate();
 8005846:	f006 fc5d 	bl	800c104 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 800584a:	f7fe fbc7 	bl	8003fdc <GetDateString>
 800584e:	0002      	movs	r2, r0
 8005850:	4903      	ldr	r1, [pc, #12]	; (8005860 <dateCommand+0x20>)
 8005852:	0020      	movs	r0, r4
 8005854:	f00c fb82 	bl	8011f5c <sprintf>
}
 8005858:	2000      	movs	r0, #0
 800585a:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800585c:	b672      	cpsid	i
 800585e:	e7fe      	b.n	800585e <dateCommand+0x1e>
 8005860:	08018cec 	.word	0x08018cec

08005864 <getCommand>:
{
 8005864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005866:	46c6      	mov	lr, r8
 8005868:	b500      	push	{lr}
 800586a:	b082      	sub	sp, #8
 800586c:	0004      	movs	r4, r0
 800586e:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005876:	2800      	cmp	r0, #0
 8005878:	d026      	beq.n	80058c8 <getCommand+0x64>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800587a:	aa01      	add	r2, sp, #4
 800587c:	2101      	movs	r1, #1
 800587e:	0028      	movs	r0, r5
 8005880:	f007 f946 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005884:	0006      	movs	r6, r0
 8005886:	4b74      	ldr	r3, [pc, #464]	; (8005a58 <getCommand+0x1f4>)
 8005888:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800588a:	2204      	movs	r2, #4
 800588c:	4973      	ldr	r1, [pc, #460]	; (8005a5c <getCommand+0x1f8>)
 800588e:	f00c fba8 	bl	8011fe2 <strncmp>
 8005892:	2800      	cmp	r0, #0
 8005894:	d000      	beq.n	8005898 <getCommand+0x34>
 8005896:	e092      	b.n	80059be <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005898:	1d37      	adds	r7, r6, #4
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	1f1d      	subs	r5, r3, #4
 800589e:	002a      	movs	r2, r5
 80058a0:	496f      	ldr	r1, [pc, #444]	; (8005a60 <getCommand+0x1fc>)
 80058a2:	0038      	movs	r0, r7
 80058a4:	f00c fb9d 	bl	8011fe2 <strncmp>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d121      	bne.n	80058f0 <getCommand+0x8c>
			if (BOS.response == BOS_RESPONSE_ALL)
 80058ac:	4b6d      	ldr	r3, [pc, #436]	; (8005a64 <getCommand+0x200>)
 80058ae:	799b      	ldrb	r3, [r3, #6]
 80058b0:	2b60      	cmp	r3, #96	; 0x60
 80058b2:	d00b      	beq.n	80058cc <getCommand+0x68>
			else if (BOS.response == BOS_RESPONSE_MSG)
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d00f      	beq.n	80058d8 <getCommand+0x74>
			else if (BOS.response == BOS_RESPONSE_NONE)
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d013      	beq.n	80058e4 <getCommand+0x80>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 80058bc:	0032      	movs	r2, r6
 80058be:	496a      	ldr	r1, [pc, #424]	; (8005a68 <getCommand+0x204>)
 80058c0:	0020      	movs	r0, r4
 80058c2:	f00c fb4b 	bl	8011f5c <sprintf>
 80058c6:	e086      	b.n	80059d6 <getCommand+0x172>
	configASSERT( pcWriteBuffer );
 80058c8:	b672      	cpsid	i
 80058ca:	e7fe      	b.n	80058ca <getCommand+0x66>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80058cc:	4a67      	ldr	r2, [pc, #412]	; (8005a6c <getCommand+0x208>)
 80058ce:	4968      	ldr	r1, [pc, #416]	; (8005a70 <getCommand+0x20c>)
 80058d0:	0020      	movs	r0, r4
 80058d2:	f00c fb43 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80058d6:	e07e      	b.n	80059d6 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80058d8:	4a66      	ldr	r2, [pc, #408]	; (8005a74 <getCommand+0x210>)
 80058da:	4965      	ldr	r1, [pc, #404]	; (8005a70 <getCommand+0x20c>)
 80058dc:	0020      	movs	r0, r4
 80058de:	f00c fb3d 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80058e2:	e078      	b.n	80059d6 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80058e4:	4a64      	ldr	r2, [pc, #400]	; (8005a78 <getCommand+0x214>)
 80058e6:	4962      	ldr	r1, [pc, #392]	; (8005a70 <getCommand+0x20c>)
 80058e8:	0020      	movs	r0, r4
 80058ea:	f00c fb37 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80058ee:	e072      	b.n	80059d6 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80058f0:	002a      	movs	r2, r5
 80058f2:	4962      	ldr	r1, [pc, #392]	; (8005a7c <getCommand+0x218>)
 80058f4:	0038      	movs	r0, r7
 80058f6:	f00c fb74 	bl	8011fe2 <strncmp>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d119      	bne.n	8005932 <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 80058fe:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <getCommand+0x200>)
 8005900:	79db      	ldrb	r3, [r3, #7]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d009      	beq.n	800591a <getCommand+0xb6>
			else if (BOS.trace == TRACE_MESSAGE)
 8005906:	2b01      	cmp	r3, #1
 8005908:	d00d      	beq.n	8005926 <getCommand+0xc2>
			else if (BOS.trace == TRACE_NONE)
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1d6      	bne.n	80058bc <getCommand+0x58>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 800590e:	4a5a      	ldr	r2, [pc, #360]	; (8005a78 <getCommand+0x214>)
 8005910:	4957      	ldr	r1, [pc, #348]	; (8005a70 <getCommand+0x20c>)
 8005912:	0020      	movs	r0, r4
 8005914:	f00c fb22 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8005918:	e05d      	b.n	80059d6 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 800591a:	4a54      	ldr	r2, [pc, #336]	; (8005a6c <getCommand+0x208>)
 800591c:	4954      	ldr	r1, [pc, #336]	; (8005a70 <getCommand+0x20c>)
 800591e:	0020      	movs	r0, r4
 8005920:	f00c fb1c 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8005924:	e057      	b.n	80059d6 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8005926:	4a53      	ldr	r2, [pc, #332]	; (8005a74 <getCommand+0x210>)
 8005928:	4951      	ldr	r1, [pc, #324]	; (8005a70 <getCommand+0x20c>)
 800592a:	0020      	movs	r0, r4
 800592c:	f00c fb16 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8005930:	e051      	b.n	80059d6 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8005932:	002a      	movs	r2, r5
 8005934:	4952      	ldr	r1, [pc, #328]	; (8005a80 <getCommand+0x21c>)
 8005936:	0038      	movs	r0, r7
 8005938:	f00c fb53 	bl	8011fe2 <strncmp>
 800593c:	2800      	cmp	r0, #0
 800593e:	d022      	beq.n	8005986 <getCommand+0x122>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005940:	002a      	movs	r2, r5
 8005942:	4950      	ldr	r1, [pc, #320]	; (8005a84 <getCommand+0x220>)
 8005944:	0038      	movs	r0, r7
 8005946:	f00c fb4c 	bl	8011fe2 <strncmp>
 800594a:	2800      	cmp	r0, #0
 800594c:	d022      	beq.n	8005994 <getCommand+0x130>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800594e:	002a      	movs	r2, r5
 8005950:	494d      	ldr	r1, [pc, #308]	; (8005a88 <getCommand+0x224>)
 8005952:	0038      	movs	r0, r7
 8005954:	f00c fb45 	bl	8011fe2 <strncmp>
 8005958:	2800      	cmp	r0, #0
 800595a:	d022      	beq.n	80059a2 <getCommand+0x13e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 800595c:	002a      	movs	r2, r5
 800595e:	494b      	ldr	r1, [pc, #300]	; (8005a8c <getCommand+0x228>)
 8005960:	0038      	movs	r0, r7
 8005962:	f00c fb3e 	bl	8011fe2 <strncmp>
 8005966:	2800      	cmp	r0, #0
 8005968:	d022      	beq.n	80059b0 <getCommand+0x14c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 800596a:	002a      	movs	r2, r5
 800596c:	4948      	ldr	r1, [pc, #288]	; (8005a90 <getCommand+0x22c>)
 800596e:	0038      	movs	r0, r7
 8005970:	f00c fb37 	bl	8011fe2 <strncmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	d129      	bne.n	80059cc <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8005978:	4b3a      	ldr	r3, [pc, #232]	; (8005a64 <getCommand+0x200>)
 800597a:	795a      	ldrb	r2, [r3, #5]
 800597c:	4945      	ldr	r1, [pc, #276]	; (8005a94 <getCommand+0x230>)
 800597e:	0020      	movs	r0, r4
 8005980:	f00c faec 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8005984:	e027      	b.n	80059d6 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8005986:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <getCommand+0x200>)
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	4942      	ldr	r1, [pc, #264]	; (8005a94 <getCommand+0x230>)
 800598c:	0020      	movs	r0, r4
 800598e:	f00c fae5 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8005992:	e020      	b.n	80059d6 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8005994:	4b33      	ldr	r3, [pc, #204]	; (8005a64 <getCommand+0x200>)
 8005996:	881a      	ldrh	r2, [r3, #0]
 8005998:	493e      	ldr	r1, [pc, #248]	; (8005a94 <getCommand+0x230>)
 800599a:	0020      	movs	r0, r4
 800599c:	f00c fade 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80059a0:	e019      	b.n	80059d6 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 80059a2:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <getCommand+0x200>)
 80059a4:	885a      	ldrh	r2, [r3, #2]
 80059a6:	493b      	ldr	r1, [pc, #236]	; (8005a94 <getCommand+0x230>)
 80059a8:	0020      	movs	r0, r4
 80059aa:	f00c fad7 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80059ae:	e012      	b.n	80059d6 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 80059b0:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <getCommand+0x200>)
 80059b2:	791a      	ldrb	r2, [r3, #4]
 80059b4:	4937      	ldr	r1, [pc, #220]	; (8005a94 <getCommand+0x230>)
 80059b6:	0020      	movs	r0, r4
 80059b8:	f00c fad0 	bl	8011f5c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80059bc:	e00b      	b.n	80059d6 <getCommand+0x172>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 80059be:	2205      	movs	r2, #5
 80059c0:	4935      	ldr	r1, [pc, #212]	; (8005a98 <getCommand+0x234>)
 80059c2:	0030      	movs	r0, r6
 80059c4:	f00c fb0d 	bl	8011fe2 <strncmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d009      	beq.n	80059e0 <getCommand+0x17c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80059cc:	2213      	movs	r2, #19
 80059ce:	4933      	ldr	r1, [pc, #204]	; (8005a9c <getCommand+0x238>)
 80059d0:	0020      	movs	r0, r4
 80059d2:	f00c f8c5 	bl	8011b60 <memcpy>
}
 80059d6:	2000      	movs	r0, #0
 80059d8:	b002      	add	sp, #8
 80059da:	bc80      	pop	{r7}
 80059dc:	46b8      	mov	r8, r7
 80059de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80059e0:	466a      	mov	r2, sp
 80059e2:	2102      	movs	r1, #2
 80059e4:	0028      	movs	r0, r5
 80059e6:	f007 f893 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 80059ea:	0006      	movs	r6, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80059ec:	4f2c      	ldr	r7, [pc, #176]	; (8005aa0 <getCommand+0x23c>)
 80059ee:	2500      	movs	r5, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 80059f0:	0039      	movs	r1, r7
 80059f2:	0030      	movs	r0, r6
 80059f4:	f7fa fb86 	bl	8000104 <strcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d01c      	beq.n	8005a36 <getCommand+0x1d2>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80059fc:	3501      	adds	r5, #1
 80059fe:	b2ed      	uxtb	r5, r5
 8005a00:	370a      	adds	r7, #10
 8005a02:	2d0a      	cmp	r5, #10
 8005a04:	d1f4      	bne.n	80059f0 <getCommand+0x18c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 8005a06:	0032      	movs	r2, r6
 8005a08:	4926      	ldr	r1, [pc, #152]	; (8005aa4 <getCommand+0x240>)
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	f00c faa6 	bl	8011f5c <sprintf>
			return pdFALSE;
 8005a10:	e7e1      	b.n	80059d6 <getCommand+0x172>
			for(j=1 ; j<=N ; j++)						// N modules
 8005a12:	3501      	adds	r5, #1
 8005a14:	b2ed      	uxtb	r5, r5
 8005a16:	783b      	ldrb	r3, [r7, #0]
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	d3dc      	bcc.n	80059d6 <getCommand+0x172>
				if (InGroup(j, i))
 8005a1c:	1e6b      	subs	r3, r5, #1
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4642      	mov	r2, r8
 8005a22:	5a9b      	ldrh	r3, [r3, r2]
 8005a24:	421e      	tst	r6, r3
 8005a26:	d0f4      	beq.n	8005a12 <getCommand+0x1ae>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8005a28:	002b      	movs	r3, r5
 8005a2a:	0022      	movs	r2, r4
 8005a2c:	491e      	ldr	r1, [pc, #120]	; (8005aa8 <getCommand+0x244>)
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f00c fa94 	bl	8011f5c <sprintf>
 8005a34:	e7ed      	b.n	8005a12 <getCommand+0x1ae>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 8005a36:	0032      	movs	r2, r6
 8005a38:	491c      	ldr	r1, [pc, #112]	; (8005aac <getCommand+0x248>)
 8005a3a:	0020      	movs	r0, r4
 8005a3c:	f00c fa8e 	bl	8011f5c <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <getCommand+0x24c>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0c6      	beq.n	80059d6 <getCommand+0x172>
 8005a48:	2601      	movs	r6, #1
 8005a4a:	40ae      	lsls	r6, r5
 8005a4c:	2501      	movs	r5, #1
				if (InGroup(j, i))
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <getCommand+0x250>)
 8005a50:	4698      	mov	r8, r3
			for(j=1 ; j<=N ; j++)						// N modules
 8005a52:	4f17      	ldr	r7, [pc, #92]	; (8005ab0 <getCommand+0x24c>)
 8005a54:	e7e2      	b.n	8005a1c <getCommand+0x1b8>
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	20000f3c 	.word	0x20000f3c
 8005a5c:	08018d04 	.word	0x08018d04
 8005a60:	08018d0c 	.word	0x08018d0c
 8005a64:	20006600 	.word	0x20006600
 8005a68:	08018da0 	.word	0x08018da0
 8005a6c:	08018050 	.word	0x08018050
 8005a70:	08017f18 	.word	0x08017f18
 8005a74:	08018d18 	.word	0x08018d18
 8005a78:	08018d1c 	.word	0x08018d1c
 8005a7c:	08018d24 	.word	0x08018d24
 8005a80:	08018d2c 	.word	0x08018d2c
 8005a84:	08018d38 	.word	0x08018d38
 8005a88:	08018d44 	.word	0x08018d44
 8005a8c:	08018d54 	.word	0x08018d54
 8005a90:	08018d68 	.word	0x08018d68
 8005a94:	080184e0 	.word	0x080184e0
 8005a98:	08018d7c 	.word	0x08018d7c
 8005a9c:	08018d8c 	.word	0x08018d8c
 8005aa0:	20000c68 	.word	0x20000c68
 8005aa4:	08018dc0 	.word	0x08018dc0
 8005aa8:	08018d84 	.word	0x08018d84
 8005aac:	08018ddc 	.word	0x08018ddc
 8005ab0:	2000001c 	.word	0x2000001c
 8005ab4:	20000ccc 	.word	0x20000ccc

08005ab8 <defaultCommand>:
{
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	0004      	movs	r4, r0
 8005abe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005ac4:	2c00      	cmp	r4, #0
 8005ac6:	d01a      	beq.n	8005afe <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005ac8:	aa01      	add	r2, sp, #4
 8005aca:	2101      	movs	r1, #1
 8005acc:	f007 f820 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005ad0:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005ad2:	9e01      	ldr	r6, [sp, #4]
 8005ad4:	0032      	movs	r2, r6
 8005ad6:	491e      	ldr	r1, [pc, #120]	; (8005b50 <defaultCommand+0x98>)
 8005ad8:	f00c fa83 	bl	8011fe2 <strncmp>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d010      	beq.n	8005b02 <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005ae0:	0032      	movs	r2, r6
 8005ae2:	491c      	ldr	r1, [pc, #112]	; (8005b54 <defaultCommand+0x9c>)
 8005ae4:	0028      	movs	r0, r5
 8005ae6:	f00c fa7c 	bl	8011fe2 <strncmp>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d01a      	beq.n	8005b24 <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005aee:	220f      	movs	r2, #15
 8005af0:	4919      	ldr	r1, [pc, #100]	; (8005b58 <defaultCommand+0xa0>)
 8005af2:	0020      	movs	r0, r4
 8005af4:	f00c f834 	bl	8011b60 <memcpy>
}
 8005af8:	2000      	movs	r0, #0
 8005afa:	b002      	add	sp, #8
 8005afc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8005afe:	b672      	cpsid	i
 8005b00:	e7fe      	b.n	8005b00 <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005b02:	4916      	ldr	r1, [pc, #88]	; (8005b5c <defaultCommand+0xa4>)
 8005b04:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <defaultCommand+0xa8>)
 8005b06:	000a      	movs	r2, r1
 8005b08:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005b0a:	c223      	stmia	r2!, {r0, r1, r5}
 8005b0c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005b0e:	c223      	stmia	r2!, {r0, r1, r5}
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005b14:	f7fd f9ee 	bl	8002ef4 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8005b18:	2227      	movs	r2, #39	; 0x27
 8005b1a:	4912      	ldr	r1, [pc, #72]	; (8005b64 <defaultCommand+0xac>)
 8005b1c:	0020      	movs	r0, r4
 8005b1e:	f00c f81f 	bl	8011b60 <memcpy>
	if (result == BOS_ERR_WrongValue)
 8005b22:	e7e9      	b.n	8005af8 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005b24:	2200      	movs	r2, #0
 8005b26:	2116      	movs	r1, #22
 8005b28:	20ff      	movs	r0, #255	; 0xff
 8005b2a:	f002 ffa1 	bl	8008a70 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <defaultCommand+0xb0>)
 8005b30:	2202      	movs	r2, #2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	2064      	movs	r0, #100	; 0x64
 8005b36:	f006 fec4 	bl	800c8c2 <osDelay>
		ClearEEportsDir();
 8005b3a:	f7fc ff23 	bl	8002984 <ClearEEportsDir>
		osDelay(100);
 8005b3e:	2064      	movs	r0, #100	; 0x64
 8005b40:	f006 febf 	bl	800c8c2 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8005b44:	2240      	movs	r2, #64	; 0x40
 8005b46:	4909      	ldr	r1, [pc, #36]	; (8005b6c <defaultCommand+0xb4>)
 8005b48:	0020      	movs	r0, r4
 8005b4a:	f00c f809 	bl	8011b60 <memcpy>
	if (result == BOS_ERR_WrongValue)
 8005b4e:	e7d3      	b.n	8005af8 <defaultCommand+0x40>
 8005b50:	08018df0 	.word	0x08018df0
 8005b54:	08018e20 	.word	0x08018e20
 8005b58:	08018e28 	.word	0x08018e28
 8005b5c:	20006600 	.word	0x20006600
 8005b60:	20000000 	.word	0x20000000
 8005b64:	08018df8 	.word	0x08018df8
 8005b68:	20000cd0 	.word	0x20000cd0
 8005b6c:	08018e38 	.word	0x08018e38

08005b70 <setCommand>:
{
 8005b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b72:	46d6      	mov	lr, sl
 8005b74:	464f      	mov	r7, r9
 8005b76:	4646      	mov	r6, r8
 8005b78:	b5c0      	push	{r6, r7, lr}
 8005b7a:	b08e      	sub	sp, #56	; 0x38
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	0014      	movs	r4, r2
 8005b80:	2700      	movs	r7, #0
 8005b82:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8005b84:	970d      	str	r7, [sp, #52]	; 0x34
 8005b86:	970c      	str	r7, [sp, #48]	; 0x30
 8005b88:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8005b8a:	970a      	str	r7, [sp, #40]	; 0x28
 8005b8c:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d023      	beq.n	8005bda <setCommand+0x6a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005b92:	aa0d      	add	r2, sp, #52	; 0x34
 8005b94:	2101      	movs	r1, #1
 8005b96:	0020      	movs	r0, r4
 8005b98:	f006 ffba 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005b9c:	0005      	movs	r5, r0
 8005b9e:	4bd6      	ldr	r3, [pc, #856]	; (8005ef8 <setCommand+0x388>)
 8005ba0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	49d5      	ldr	r1, [pc, #852]	; (8005efc <setCommand+0x38c>)
 8005ba6:	f00c fa1c 	bl	8011fe2 <strncmp>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d017      	beq.n	8005bde <setCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 8005bae:	2204      	movs	r2, #4
 8005bb0:	49d3      	ldr	r1, [pc, #844]	; (8005f00 <setCommand+0x390>)
 8005bb2:	0028      	movs	r0, r5
 8005bb4:	f00c fa15 	bl	8011fe2 <strncmp>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d100      	bne.n	8005bbe <setCommand+0x4e>
 8005bbc:	e15b      	b.n	8005e76 <setCommand+0x306>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	49d0      	ldr	r1, [pc, #832]	; (8005f04 <setCommand+0x394>)
 8005bc2:	0028      	movs	r0, r5
 8005bc4:	f00c fa0d 	bl	8011fe2 <strncmp>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d100      	bne.n	8005bce <setCommand+0x5e>
 8005bcc:	e1f8      	b.n	8005fc0 <setCommand+0x450>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005bce:	2213      	movs	r2, #19
 8005bd0:	49cd      	ldr	r1, [pc, #820]	; (8005f08 <setCommand+0x398>)
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	f00b ffc4 	bl	8011b60 <memcpy>
 8005bd8:	e33c      	b.n	8006254 <setCommand+0x6e4>
	configASSERT( pcWriteBuffer );
 8005bda:	b672      	cpsid	i
 8005bdc:	e7fe      	b.n	8005bdc <setCommand+0x6c>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005bde:	aa0c      	add	r2, sp, #48	; 0x30
 8005be0:	2102      	movs	r1, #2
 8005be2:	0020      	movs	r0, r4
 8005be4:	f006 ff94 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005be8:	0004      	movs	r4, r0
 8005bea:	4bc8      	ldr	r3, [pc, #800]	; (8005f0c <setCommand+0x39c>)
 8005bec:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005bee:	4bc2      	ldr	r3, [pc, #776]	; (8005ef8 <setCommand+0x388>)
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	3504      	adds	r5, #4
 8005bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bf6:	1f1e      	subs	r6, r3, #4
 8005bf8:	0032      	movs	r2, r6
 8005bfa:	49c5      	ldr	r1, [pc, #788]	; (8005f10 <setCommand+0x3a0>)
 8005bfc:	0028      	movs	r0, r5
 8005bfe:	f00c f9f0 	bl	8011fe2 <strncmp>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d150      	bne.n	8005ca8 <setCommand+0x138>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c08:	002a      	movs	r2, r5
 8005c0a:	49c2      	ldr	r1, [pc, #776]	; (8005f14 <setCommand+0x3a4>)
 8005c0c:	0020      	movs	r0, r4
 8005c0e:	f00c f9e8 	bl	8011fe2 <strncmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d01a      	beq.n	8005c4c <setCommand+0xdc>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005c16:	002a      	movs	r2, r5
 8005c18:	49bf      	ldr	r1, [pc, #764]	; (8005f18 <setCommand+0x3a8>)
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	f00c f9e1 	bl	8011fe2 <strncmp>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d01f      	beq.n	8005c64 <setCommand+0xf4>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8005c24:	002a      	movs	r2, r5
 8005c26:	49bd      	ldr	r1, [pc, #756]	; (8005f1c <setCommand+0x3ac>)
 8005c28:	0020      	movs	r0, r4
 8005c2a:	f00c f9da 	bl	8011fe2 <strncmp>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d024      	beq.n	8005c7c <setCommand+0x10c>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8005c32:	002a      	movs	r2, r5
 8005c34:	49ba      	ldr	r1, [pc, #744]	; (8005f20 <setCommand+0x3b0>)
 8005c36:	0020      	movs	r0, r4
 8005c38:	f00c f9d3 	bl	8011fe2 <strncmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d029      	beq.n	8005c94 <setCommand+0x124>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005c40:	220f      	movs	r2, #15
 8005c42:	49b8      	ldr	r1, [pc, #736]	; (8005f24 <setCommand+0x3b4>)
 8005c44:	4650      	mov	r0, sl
 8005c46:	f00b ff8b 	bl	8011b60 <memcpy>
 8005c4a:	e303      	b.n	8006254 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 8005c4c:	4bb6      	ldr	r3, [pc, #728]	; (8005f28 <setCommand+0x3b8>)
 8005c4e:	2260      	movs	r2, #96	; 0x60
 8005c50:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005c52:	79d9      	ldrb	r1, [r3, #7]
 8005c54:	0209      	lsls	r1, r1, #8
 8005c56:	2360      	movs	r3, #96	; 0x60
 8005c58:	4319      	orrs	r1, r3
 8005c5a:	308a      	adds	r0, #138	; 0x8a
 8005c5c:	0040      	lsls	r0, r0, #1
 8005c5e:	f001 f9db 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005c62:	e1a1      	b.n	8005fa8 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 8005c64:	4bb0      	ldr	r3, [pc, #704]	; (8005f28 <setCommand+0x3b8>)
 8005c66:	2220      	movs	r2, #32
 8005c68:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005c6a:	79d9      	ldrb	r1, [r3, #7]
 8005c6c:	0209      	lsls	r1, r1, #8
 8005c6e:	2320      	movs	r3, #32
 8005c70:	4319      	orrs	r1, r3
 8005c72:	308a      	adds	r0, #138	; 0x8a
 8005c74:	0040      	lsls	r0, r0, #1
 8005c76:	f001 f9cf 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005c7a:	e195      	b.n	8005fa8 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 8005c7c:	4baa      	ldr	r3, [pc, #680]	; (8005f28 <setCommand+0x3b8>)
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005c82:	79d9      	ldrb	r1, [r3, #7]
 8005c84:	0209      	lsls	r1, r1, #8
 8005c86:	2340      	movs	r3, #64	; 0x40
 8005c88:	4319      	orrs	r1, r3
 8005c8a:	308a      	adds	r0, #138	; 0x8a
 8005c8c:	0040      	lsls	r0, r0, #1
 8005c8e:	f001 f9c3 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005c92:	e189      	b.n	8005fa8 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 8005c94:	4ba4      	ldr	r3, [pc, #656]	; (8005f28 <setCommand+0x3b8>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005c9a:	79d9      	ldrb	r1, [r3, #7]
 8005c9c:	0209      	lsls	r1, r1, #8
 8005c9e:	308a      	adds	r0, #138	; 0x8a
 8005ca0:	0040      	lsls	r0, r0, #1
 8005ca2:	f001 f9b9 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005ca6:	e17f      	b.n	8005fa8 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8005ca8:	0032      	movs	r2, r6
 8005caa:	49a0      	ldr	r1, [pc, #640]	; (8005f2c <setCommand+0x3bc>)
 8005cac:	0028      	movs	r0, r5
 8005cae:	f00c f998 	bl	8011fe2 <strncmp>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d149      	bne.n	8005d4a <setCommand+0x1da>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb8:	002a      	movs	r2, r5
 8005cba:	4996      	ldr	r1, [pc, #600]	; (8005f14 <setCommand+0x3a4>)
 8005cbc:	0020      	movs	r0, r4
 8005cbe:	f00c f990 	bl	8011fe2 <strncmp>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d01d      	beq.n	8005d02 <setCommand+0x192>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005cc6:	002a      	movs	r2, r5
 8005cc8:	4993      	ldr	r1, [pc, #588]	; (8005f18 <setCommand+0x3a8>)
 8005cca:	0020      	movs	r0, r4
 8005ccc:	f00c f989 	bl	8011fe2 <strncmp>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d022      	beq.n	8005d1a <setCommand+0x1aa>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8005cd4:	002a      	movs	r2, r5
 8005cd6:	498e      	ldr	r1, [pc, #568]	; (8005f10 <setCommand+0x3a0>)
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f00c f982 	bl	8011fe2 <strncmp>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d027      	beq.n	8005d32 <setCommand+0x1c2>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8005ce2:	002a      	movs	r2, r5
 8005ce4:	498e      	ldr	r1, [pc, #568]	; (8005f20 <setCommand+0x3b0>)
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f00c f97b 	bl	8011fe2 <strncmp>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d1a7      	bne.n	8005c40 <setCommand+0xd0>
				BOS.trace = TRACE_NONE;
 8005cf0:	4b8d      	ldr	r3, [pc, #564]	; (8005f28 <setCommand+0x3b8>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005cf6:	7999      	ldrb	r1, [r3, #6]
 8005cf8:	308a      	adds	r0, #138	; 0x8a
 8005cfa:	0040      	lsls	r0, r0, #1
 8005cfc:	f001 f98c 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005d00:	e152      	b.n	8005fa8 <setCommand+0x438>
				BOS.trace = TRACE_BOTH;
 8005d02:	4b89      	ldr	r3, [pc, #548]	; (8005f28 <setCommand+0x3b8>)
 8005d04:	2203      	movs	r2, #3
 8005d06:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005d08:	799b      	ldrb	r3, [r3, #6]
 8005d0a:	21c0      	movs	r1, #192	; 0xc0
 8005d0c:	0089      	lsls	r1, r1, #2
 8005d0e:	4319      	orrs	r1, r3
 8005d10:	308a      	adds	r0, #138	; 0x8a
 8005d12:	0040      	lsls	r0, r0, #1
 8005d14:	f001 f980 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005d18:	e146      	b.n	8005fa8 <setCommand+0x438>
				BOS.trace = TRACE_MESSAGE;
 8005d1a:	4b83      	ldr	r3, [pc, #524]	; (8005f28 <setCommand+0x3b8>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005d20:	799b      	ldrb	r3, [r3, #6]
 8005d22:	2180      	movs	r1, #128	; 0x80
 8005d24:	0049      	lsls	r1, r1, #1
 8005d26:	4319      	orrs	r1, r3
 8005d28:	308a      	adds	r0, #138	; 0x8a
 8005d2a:	0040      	lsls	r0, r0, #1
 8005d2c:	f001 f974 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005d30:	e13a      	b.n	8005fa8 <setCommand+0x438>
				BOS.trace = TRACE_RESPONSE;
 8005d32:	4b7d      	ldr	r3, [pc, #500]	; (8005f28 <setCommand+0x3b8>)
 8005d34:	2202      	movs	r2, #2
 8005d36:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005d38:	799b      	ldrb	r3, [r3, #6]
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	0089      	lsls	r1, r1, #2
 8005d3e:	4319      	orrs	r1, r3
 8005d40:	308a      	adds	r0, #138	; 0x8a
 8005d42:	0040      	lsls	r0, r0, #1
 8005d44:	f001 f968 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005d48:	e12e      	b.n	8005fa8 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8005d4a:	0032      	movs	r2, r6
 8005d4c:	4978      	ldr	r1, [pc, #480]	; (8005f30 <setCommand+0x3c0>)
 8005d4e:	0028      	movs	r0, r5
 8005d50:	f00c f947 	bl	8011fe2 <strncmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d02f      	beq.n	8005db8 <setCommand+0x248>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005d58:	0032      	movs	r2, r6
 8005d5a:	4976      	ldr	r1, [pc, #472]	; (8005f34 <setCommand+0x3c4>)
 8005d5c:	0028      	movs	r0, r5
 8005d5e:	f00c f940 	bl	8011fe2 <strncmp>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d058      	beq.n	8005e18 <setCommand+0x2a8>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005d66:	0032      	movs	r2, r6
 8005d68:	4973      	ldr	r1, [pc, #460]	; (8005f38 <setCommand+0x3c8>)
 8005d6a:	0028      	movs	r0, r5
 8005d6c:	f00c f939 	bl	8011fe2 <strncmp>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d05f      	beq.n	8005e34 <setCommand+0x2c4>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005d74:	0032      	movs	r2, r6
 8005d76:	4971      	ldr	r1, [pc, #452]	; (8005f3c <setCommand+0x3cc>)
 8005d78:	0028      	movs	r0, r5
 8005d7a:	f00c f932 	bl	8011fe2 <strncmp>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d066      	beq.n	8005e50 <setCommand+0x2e0>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005d82:	0032      	movs	r2, r6
 8005d84:	496e      	ldr	r1, [pc, #440]	; (8005f40 <setCommand+0x3d0>)
 8005d86:	0028      	movs	r0, r5
 8005d88:	f00c f92b 	bl	8011fe2 <strncmp>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d000      	beq.n	8005d92 <setCommand+0x222>
 8005d90:	e71d      	b.n	8005bce <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8005d92:	0020      	movs	r0, r4
 8005d94:	f00b fc7d 	bl	8011692 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005d98:	1e43      	subs	r3, r0, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2bfe      	cmp	r3, #254	; 0xfe
 8005d9e:	d900      	bls.n	8005da2 <setCommand+0x232>
 8005da0:	e74e      	b.n	8005c40 <setCommand+0xd0>
				BOS.buttons.maxInterClickTime = temp16;
 8005da2:	4b61      	ldr	r3, [pc, #388]	; (8005f28 <setCommand+0x3b8>)
 8005da4:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005da6:	0200      	lsls	r0, r0, #8
 8005da8:	7919      	ldrb	r1, [r3, #4]
 8005daa:	4301      	orrs	r1, r0
 8005dac:	b289      	uxth	r1, r1
 8005dae:	2018      	movs	r0, #24
 8005db0:	30ff      	adds	r0, #255	; 0xff
 8005db2:	f001 f931 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005db6:	e0f7      	b.n	8005fa8 <setCommand+0x438>
			temp2 = atoi((const char *)pcParameterString2);
 8005db8:	0020      	movs	r0, r4
 8005dba:	f00b fc6a 	bl	8011692 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8005dbe:	23e1      	movs	r3, #225	; 0xe1
 8005dc0:	031b      	lsls	r3, r3, #12
 8005dc2:	4298      	cmp	r0, r3
 8005dc4:	d900      	bls.n	8005dc8 <setCommand+0x258>
 8005dc6:	e73b      	b.n	8005c40 <setCommand+0xd0>
				BOS.clibaudrate = temp2;
 8005dc8:	4c57      	ldr	r4, [pc, #348]	; (8005f28 <setCommand+0x3b8>)
 8005dca:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8005dcc:	b281      	uxth	r1, r0
 8005dce:	208c      	movs	r0, #140	; 0x8c
 8005dd0:	0040      	lsls	r0, r0, #1
 8005dd2:	f001 f921 	bl	8007018 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8005dd6:	8961      	ldrh	r1, [r4, #10]
 8005dd8:	201a      	movs	r0, #26
 8005dda:	30ff      	adds	r0, #255	; 0xff
 8005ddc:	f001 f91c 	bl	8007018 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8005de0:	4b45      	ldr	r3, [pc, #276]	; (8005ef8 <setCommand+0x388>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005de8:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8005dea:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <setCommand+0x39c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4955      	ldr	r1, [pc, #340]	; (8005f44 <setCommand+0x3d4>)
 8005df0:	4650      	mov	r0, sl
 8005df2:	f00c f8b3 	bl	8011f5c <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 8005df6:	4650      	mov	r0, sl
 8005df8:	f7fa f98e 	bl	8000118 <strlen>
 8005dfc:	4450      	add	r0, sl
 8005dfe:	2230      	movs	r2, #48	; 0x30
 8005e00:	4951      	ldr	r1, [pc, #324]	; (8005f48 <setCommand+0x3d8>)
 8005e02:	f00b fead 	bl	8011b60 <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8005e06:	4650      	mov	r0, sl
 8005e08:	f7fa f986 	bl	8000118 <strlen>
 8005e0c:	4450      	add	r0, sl
 8005e0e:	22a3      	movs	r2, #163	; 0xa3
 8005e10:	494e      	ldr	r1, [pc, #312]	; (8005f4c <setCommand+0x3dc>)
 8005e12:	f00b fea5 	bl	8011b60 <memcpy>
 8005e16:	e21d      	b.n	8006254 <setCommand+0x6e4>
			temp16 = atoi((const char *)pcParameterString2);
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f00b fc3a 	bl	8011692 <atoi>
 8005e1e:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005e20:	2900      	cmp	r1, #0
 8005e22:	d100      	bne.n	8005e26 <setCommand+0x2b6>
 8005e24:	e70c      	b.n	8005c40 <setCommand+0xd0>
				BOS.buttons.debounce = temp16;
 8005e26:	4b40      	ldr	r3, [pc, #256]	; (8005f28 <setCommand+0x3b8>)
 8005e28:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8005e2a:	2016      	movs	r0, #22
 8005e2c:	30ff      	adds	r0, #255	; 0xff
 8005e2e:	f001 f8f3 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005e32:	e0b9      	b.n	8005fa8 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8005e34:	0020      	movs	r0, r4
 8005e36:	f00b fc2c 	bl	8011692 <atoi>
 8005e3a:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d100      	bne.n	8005e42 <setCommand+0x2d2>
 8005e40:	e6fe      	b.n	8005c40 <setCommand+0xd0>
				BOS.buttons.singleClickTime = temp16;
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <setCommand+0x3b8>)
 8005e44:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8005e46:	208b      	movs	r0, #139	; 0x8b
 8005e48:	0040      	lsls	r0, r0, #1
 8005e4a:	f001 f8e5 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005e4e:	e0ab      	b.n	8005fa8 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8005e50:	0020      	movs	r0, r4
 8005e52:	f00b fc1e 	bl	8011692 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005e56:	1e43      	subs	r3, r0, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8005e5c:	d900      	bls.n	8005e60 <setCommand+0x2f0>
 8005e5e:	e6ef      	b.n	8005c40 <setCommand+0xd0>
				BOS.buttons.minInterClickTime = temp16;
 8005e60:	b2c0      	uxtb	r0, r0
 8005e62:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <setCommand+0x3b8>)
 8005e64:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005e66:	7959      	ldrb	r1, [r3, #5]
 8005e68:	0209      	lsls	r1, r1, #8
 8005e6a:	4301      	orrs	r1, r0
 8005e6c:	2018      	movs	r0, #24
 8005e6e:	30ff      	adds	r0, #255	; 0xff
 8005e70:	f001 f8d2 	bl	8007018 <EE_WriteVariable>
	if (result == BOS_OK) 
 8005e74:	e098      	b.n	8005fa8 <setCommand+0x438>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005e76:	aa0c      	add	r2, sp, #48	; 0x30
 8005e78:	2102      	movs	r1, #2
 8005e7a:	0020      	movs	r0, r4
 8005e7c:	f006 fe48 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005e80:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <setCommand+0x39c>)
 8005e82:	4698      	mov	r8, r3
 8005e84:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005e86:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e88:	2103      	movs	r1, #3
 8005e8a:	0020      	movs	r0, r4
 8005e8c:	f006 fe40 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005e90:	4d2f      	ldr	r5, [pc, #188]	; (8005f50 <setCommand+0x3e0>)
 8005e92:	6028      	str	r0, [r5, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005e94:	aa0a      	add	r2, sp, #40	; 0x28
 8005e96:	2104      	movs	r1, #4
 8005e98:	0020      	movs	r0, r4
 8005e9a:	f006 fe39 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <setCommand+0x3e4>)
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005ea4:	aa09      	add	r2, sp, #36	; 0x24
 8005ea6:	2105      	movs	r1, #5
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f006 fe31 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005eae:	4f2a      	ldr	r7, [pc, #168]	; (8005f58 <setCommand+0x3e8>)
 8005eb0:	6038      	str	r0, [r7, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8005eb2:	4643      	mov	r3, r8
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	f00b fbec 	bl	8011692 <atoi>
 8005eba:	b2c3      	uxtb	r3, r0
 8005ebc:	4698      	mov	r8, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8005ebe:	6828      	ldr	r0, [r5, #0]
 8005ec0:	f00b fbe7 	bl	8011692 <atoi>
 8005ec4:	0005      	movs	r5, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f00b fbe2 	bl	8011692 <atoi>
 8005ece:	0004      	movs	r4, r0
		if (pcParameterString5 != NULL) {
 8005ed0:	683f      	ldr	r7, [r7, #0]
 8005ed2:	2f00      	cmp	r7, #0
 8005ed4:	d047      	beq.n	8005f66 <setCommand+0x3f6>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	4920      	ldr	r1, [pc, #128]	; (8005f5c <setCommand+0x3ec>)
 8005eda:	0038      	movs	r0, r7
 8005edc:	f00c f881 	bl	8011fe2 <strncmp>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d03f      	beq.n	8005f64 <setCommand+0x3f4>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	491e      	ldr	r1, [pc, #120]	; (8005f60 <setCommand+0x3f0>)
 8005ee8:	0038      	movs	r0, r7
 8005eea:	f00c f87a 	bl	8011fe2 <strncmp>
				temp84 = RTC_PM;
 8005eee:	2602      	movs	r6, #2
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d038      	beq.n	8005f66 <setCommand+0x3f6>
				result = BOS_ERR_WrongValue;
 8005ef4:	2668      	movs	r6, #104	; 0x68
 8005ef6:	e1aa      	b.n	800624e <setCommand+0x6de>
 8005ef8:	20000f38 	.word	0x20000f38
 8005efc:	08018d04 	.word	0x08018d04
 8005f00:	08018f6c 	.word	0x08018f6c
 8005f04:	08018f7c 	.word	0x08018f7c
 8005f08:	08018d8c 	.word	0x08018d8c
 8005f0c:	20000f44 	.word	0x20000f44
 8005f10:	08018d0c 	.word	0x08018d0c
 8005f14:	08018050 	.word	0x08018050
 8005f18:	08018e78 	.word	0x08018e78
 8005f1c:	08018e80 	.word	0x08018e80
 8005f20:	08018d1c 	.word	0x08018d1c
 8005f24:	08018e28 	.word	0x08018e28
 8005f28:	20006600 	.word	0x20006600
 8005f2c:	08018d24 	.word	0x08018d24
 8005f30:	08018d2c 	.word	0x08018d2c
 8005f34:	08018d38 	.word	0x08018d38
 8005f38:	08018d44 	.word	0x08018d44
 8005f3c:	08018d54 	.word	0x08018d54
 8005f40:	08018d68 	.word	0x08018d68
 8005f44:	08018e84 	.word	0x08018e84
 8005f48:	08018e98 	.word	0x08018e98
 8005f4c:	08018ec8 	.word	0x08018ec8
 8005f50:	20000f4c 	.word	0x20000f4c
 8005f54:	20000f50 	.word	0x20000f50
 8005f58:	20000f54 	.word	0x20000f54
 8005f5c:	08018f74 	.word	0x08018f74
 8005f60:	08018f78 	.word	0x08018f78
				temp84 = RTC_AM;
 8005f64:	2601      	movs	r6, #1
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8005f66:	4643      	mov	r3, r8
 8005f68:	2b17      	cmp	r3, #23
 8005f6a:	d900      	bls.n	8005f6e <setCommand+0x3fe>
 8005f6c:	e668      	b.n	8005c40 <setCommand+0xd0>
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8005f6e:	b2ed      	uxtb	r5, r5
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8005f70:	2d3b      	cmp	r5, #59	; 0x3b
 8005f72:	d900      	bls.n	8005f76 <setCommand+0x406>
 8005f74:	e664      	b.n	8005c40 <setCommand+0xd0>
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8005f76:	b2e4      	uxtb	r4, r4
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8005f78:	2c3b      	cmp	r4, #59	; 0x3b
 8005f7a:	d900      	bls.n	8005f7e <setCommand+0x40e>
 8005f7c:	e660      	b.n	8005c40 <setCommand+0xd0>
				GetTimeDate();				
 8005f7e:	f006 f8c1 	bl	800c104 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8005f82:	4fb8      	ldr	r7, [pc, #736]	; (8006264 <setCommand+0x6f4>)
 8005f84:	7d3b      	ldrb	r3, [r7, #20]
 8005f86:	8b3a      	ldrh	r2, [r7, #24]
 8005f88:	7d79      	ldrb	r1, [r7, #21]
 8005f8a:	7db8      	ldrb	r0, [r7, #22]
 8005f8c:	7b3f      	ldrb	r7, [r7, #12]
 8005f8e:	b27f      	sxtb	r7, r7
 8005f90:	9704      	str	r7, [sp, #16]
 8005f92:	9603      	str	r6, [sp, #12]
 8005f94:	4646      	mov	r6, r8
 8005f96:	9602      	str	r6, [sp, #8]
 8005f98:	9501      	str	r5, [sp, #4]
 8005f9a:	9400      	str	r4, [sp, #0]
 8005f9c:	f006 f858 	bl	800c050 <BOS_CalendarConfig>
 8005fa0:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d000      	beq.n	8005fa8 <setCommand+0x438>
 8005fa6:	e14f      	b.n	8006248 <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8005fa8:	4baf      	ldr	r3, [pc, #700]	; (8006268 <setCommand+0x6f8>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fb0:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8005fb2:	4bae      	ldr	r3, [pc, #696]	; (800626c <setCommand+0x6fc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	49ae      	ldr	r1, [pc, #696]	; (8006270 <setCommand+0x700>)
 8005fb8:	4650      	mov	r0, sl
 8005fba:	f00b ffcf 	bl	8011f5c <sprintf>
	return pdFALSE;
 8005fbe:	e149      	b.n	8006254 <setCommand+0x6e4>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005fc0:	aa0c      	add	r2, sp, #48	; 0x30
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	0020      	movs	r0, r4
 8005fc6:	f006 fda3 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005fca:	4da8      	ldr	r5, [pc, #672]	; (800626c <setCommand+0x6fc>)
 8005fcc:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fd0:	2103      	movs	r1, #3
 8005fd2:	0020      	movs	r0, r4
 8005fd4:	f006 fd9c 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005fd8:	4ba6      	ldr	r3, [pc, #664]	; (8006274 <setCommand+0x704>)
 8005fda:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005fdc:	aa0a      	add	r2, sp, #40	; 0x28
 8005fde:	2104      	movs	r1, #4
 8005fe0:	0020      	movs	r0, r4
 8005fe2:	f006 fd95 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005fe6:	4ea4      	ldr	r6, [pc, #656]	; (8006278 <setCommand+0x708>)
 8005fe8:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005fea:	aa09      	add	r2, sp, #36	; 0x24
 8005fec:	2105      	movs	r1, #5
 8005fee:	0020      	movs	r0, r4
 8005ff0:	f006 fd8e 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8005ff4:	4ca1      	ldr	r4, [pc, #644]	; (800627c <setCommand+0x70c>)
 8005ff6:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8005ff8:	6830      	ldr	r0, [r6, #0]
 8005ffa:	f00b fb4a 	bl	8011692 <atoi>
 8005ffe:	9006      	str	r0, [sp, #24]
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	f00b fb46 	bl	8011692 <atoi>
 8006006:	9007      	str	r0, [sp, #28]
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006008:	682c      	ldr	r4, [r5, #0]
 800600a:	2206      	movs	r2, #6
 800600c:	499c      	ldr	r1, [pc, #624]	; (8006280 <setCommand+0x710>)
 800600e:	0020      	movs	r0, r4
 8006010:	f00b ffe7 	bl	8011fe2 <strncmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	d100      	bne.n	800601a <setCommand+0x4aa>
 8006018:	e170      	b.n	80062fc <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 800601a:	2207      	movs	r2, #7
 800601c:	4999      	ldr	r1, [pc, #612]	; (8006284 <setCommand+0x714>)
 800601e:	0020      	movs	r0, r4
 8006020:	f00b ffdf 	bl	8011fe2 <strncmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	d100      	bne.n	800602a <setCommand+0x4ba>
 8006028:	e199      	b.n	800635e <setCommand+0x7ee>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 800602a:	2209      	movs	r2, #9
 800602c:	4996      	ldr	r1, [pc, #600]	; (8006288 <setCommand+0x718>)
 800602e:	0020      	movs	r0, r4
 8006030:	f00b ffd7 	bl	8011fe2 <strncmp>
 8006034:	2800      	cmp	r0, #0
 8006036:	d100      	bne.n	800603a <setCommand+0x4ca>
 8006038:	e193      	b.n	8006362 <setCommand+0x7f2>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 800603a:	2208      	movs	r2, #8
 800603c:	4993      	ldr	r1, [pc, #588]	; (800628c <setCommand+0x71c>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00b ffcf 	bl	8011fe2 <strncmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	d100      	bne.n	800604a <setCommand+0x4da>
 8006048:	e18d      	b.n	8006366 <setCommand+0x7f6>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 800604a:	2206      	movs	r2, #6
 800604c:	4990      	ldr	r1, [pc, #576]	; (8006290 <setCommand+0x720>)
 800604e:	0020      	movs	r0, r4
 8006050:	f00b ffc7 	bl	8011fe2 <strncmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	d100      	bne.n	800605a <setCommand+0x4ea>
 8006058:	e187      	b.n	800636a <setCommand+0x7fa>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 800605a:	2208      	movs	r2, #8
 800605c:	498d      	ldr	r1, [pc, #564]	; (8006294 <setCommand+0x724>)
 800605e:	0020      	movs	r0, r4
 8006060:	f00b ffbf 	bl	8011fe2 <strncmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	d100      	bne.n	800606a <setCommand+0x4fa>
 8006068:	e181      	b.n	800636e <setCommand+0x7fe>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 800606a:	2206      	movs	r2, #6
 800606c:	498a      	ldr	r1, [pc, #552]	; (8006298 <setCommand+0x728>)
 800606e:	0020      	movs	r0, r4
 8006070:	f00b ffb7 	bl	8011fe2 <strncmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	d100      	bne.n	800607a <setCommand+0x50a>
 8006078:	e17b      	b.n	8006372 <setCommand+0x802>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800607a:	4b7e      	ldr	r3, [pc, #504]	; (8006274 <setCommand+0x704>)
 800607c:	681c      	ldr	r4, [r3, #0]
 800607e:	2207      	movs	r2, #7
 8006080:	4986      	ldr	r1, [pc, #536]	; (800629c <setCommand+0x72c>)
 8006082:	0020      	movs	r0, r4
 8006084:	f00b ffad 	bl	8011fe2 <strncmp>
 8006088:	2800      	cmp	r0, #0
 800608a:	d100      	bne.n	800608e <setCommand+0x51e>
 800608c:	e0ab      	b.n	80061e6 <setCommand+0x676>
			result = BOS_ERR_WrongValue;		
 800608e:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006090:	2202      	movs	r2, #2
 8006092:	4983      	ldr	r1, [pc, #524]	; (80062a0 <setCommand+0x730>)
 8006094:	0020      	movs	r0, r4
 8006096:	f00b ffa4 	bl	8011fe2 <strncmp>
 800609a:	2800      	cmp	r0, #0
 800609c:	d100      	bne.n	80060a0 <setCommand+0x530>
 800609e:	e0a5      	b.n	80061ec <setCommand+0x67c>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 80060a0:	2208      	movs	r2, #8
 80060a2:	4980      	ldr	r1, [pc, #512]	; (80062a4 <setCommand+0x734>)
 80060a4:	0020      	movs	r0, r4
 80060a6:	f00b ff9c 	bl	8011fe2 <strncmp>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d100      	bne.n	80060b0 <setCommand+0x540>
 80060ae:	e0a1      	b.n	80061f4 <setCommand+0x684>
 80060b0:	2202      	movs	r2, #2
 80060b2:	497d      	ldr	r1, [pc, #500]	; (80062a8 <setCommand+0x738>)
 80060b4:	0020      	movs	r0, r4
 80060b6:	f00b ff94 	bl	8011fe2 <strncmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d100      	bne.n	80060c0 <setCommand+0x550>
 80060be:	e09b      	b.n	80061f8 <setCommand+0x688>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 80060c0:	2205      	movs	r2, #5
 80060c2:	497a      	ldr	r1, [pc, #488]	; (80062ac <setCommand+0x73c>)
 80060c4:	0020      	movs	r0, r4
 80060c6:	f00b ff8c 	bl	8011fe2 <strncmp>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d100      	bne.n	80060d0 <setCommand+0x560>
 80060ce:	e095      	b.n	80061fc <setCommand+0x68c>
 80060d0:	2202      	movs	r2, #2
 80060d2:	4977      	ldr	r1, [pc, #476]	; (80062b0 <setCommand+0x740>)
 80060d4:	0020      	movs	r0, r4
 80060d6:	f00b ff84 	bl	8011fe2 <strncmp>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d100      	bne.n	80060e0 <setCommand+0x570>
 80060de:	e08f      	b.n	8006200 <setCommand+0x690>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 80060e0:	2205      	movs	r2, #5
 80060e2:	4974      	ldr	r1, [pc, #464]	; (80062b4 <setCommand+0x744>)
 80060e4:	0020      	movs	r0, r4
 80060e6:	f00b ff7c 	bl	8011fe2 <strncmp>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d100      	bne.n	80060f0 <setCommand+0x580>
 80060ee:	e089      	b.n	8006204 <setCommand+0x694>
 80060f0:	2202      	movs	r2, #2
 80060f2:	4971      	ldr	r1, [pc, #452]	; (80062b8 <setCommand+0x748>)
 80060f4:	0020      	movs	r0, r4
 80060f6:	f00b ff74 	bl	8011fe2 <strncmp>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d100      	bne.n	8006100 <setCommand+0x590>
 80060fe:	e083      	b.n	8006208 <setCommand+0x698>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8006100:	2203      	movs	r2, #3
 8006102:	496e      	ldr	r1, [pc, #440]	; (80062bc <setCommand+0x74c>)
 8006104:	0020      	movs	r0, r4
 8006106:	f00b ff6c 	bl	8011fe2 <strncmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	d07e      	beq.n	800620c <setCommand+0x69c>
 800610e:	2202      	movs	r2, #2
 8006110:	496b      	ldr	r1, [pc, #428]	; (80062c0 <setCommand+0x750>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00b ff65 	bl	8011fe2 <strncmp>
 8006118:	2800      	cmp	r0, #0
 800611a:	d079      	beq.n	8006210 <setCommand+0x6a0>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 800611c:	2204      	movs	r2, #4
 800611e:	4969      	ldr	r1, [pc, #420]	; (80062c4 <setCommand+0x754>)
 8006120:	0020      	movs	r0, r4
 8006122:	f00b ff5e 	bl	8011fe2 <strncmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	d074      	beq.n	8006214 <setCommand+0x6a4>
 800612a:	2202      	movs	r2, #2
 800612c:	4966      	ldr	r1, [pc, #408]	; (80062c8 <setCommand+0x758>)
 800612e:	0020      	movs	r0, r4
 8006130:	f00b ff57 	bl	8011fe2 <strncmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	d06f      	beq.n	8006218 <setCommand+0x6a8>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006138:	2204      	movs	r2, #4
 800613a:	4964      	ldr	r1, [pc, #400]	; (80062cc <setCommand+0x75c>)
 800613c:	0020      	movs	r0, r4
 800613e:	f00b ff50 	bl	8011fe2 <strncmp>
 8006142:	2800      	cmp	r0, #0
 8006144:	d06a      	beq.n	800621c <setCommand+0x6ac>
 8006146:	2202      	movs	r2, #2
 8006148:	4961      	ldr	r1, [pc, #388]	; (80062d0 <setCommand+0x760>)
 800614a:	0020      	movs	r0, r4
 800614c:	f00b ff49 	bl	8011fe2 <strncmp>
 8006150:	2800      	cmp	r0, #0
 8006152:	d065      	beq.n	8006220 <setCommand+0x6b0>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006154:	2205      	movs	r2, #5
 8006156:	495f      	ldr	r1, [pc, #380]	; (80062d4 <setCommand+0x764>)
 8006158:	0020      	movs	r0, r4
 800615a:	f00b ff42 	bl	8011fe2 <strncmp>
 800615e:	2800      	cmp	r0, #0
 8006160:	d060      	beq.n	8006224 <setCommand+0x6b4>
 8006162:	2202      	movs	r2, #2
 8006164:	495c      	ldr	r1, [pc, #368]	; (80062d8 <setCommand+0x768>)
 8006166:	0020      	movs	r0, r4
 8006168:	f00b ff3b 	bl	8011fe2 <strncmp>
 800616c:	2800      	cmp	r0, #0
 800616e:	d05b      	beq.n	8006228 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006170:	2209      	movs	r2, #9
 8006172:	495a      	ldr	r1, [pc, #360]	; (80062dc <setCommand+0x76c>)
 8006174:	0020      	movs	r0, r4
 8006176:	f00b ff34 	bl	8011fe2 <strncmp>
 800617a:	2800      	cmp	r0, #0
 800617c:	d056      	beq.n	800622c <setCommand+0x6bc>
 800617e:	2202      	movs	r2, #2
 8006180:	4957      	ldr	r1, [pc, #348]	; (80062e0 <setCommand+0x770>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00b ff2d 	bl	8011fe2 <strncmp>
 8006188:	2800      	cmp	r0, #0
 800618a:	d051      	beq.n	8006230 <setCommand+0x6c0>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 800618c:	2207      	movs	r2, #7
 800618e:	4955      	ldr	r1, [pc, #340]	; (80062e4 <setCommand+0x774>)
 8006190:	0020      	movs	r0, r4
 8006192:	f00b ff26 	bl	8011fe2 <strncmp>
 8006196:	2800      	cmp	r0, #0
 8006198:	d04c      	beq.n	8006234 <setCommand+0x6c4>
 800619a:	2202      	movs	r2, #2
 800619c:	4952      	ldr	r1, [pc, #328]	; (80062e8 <setCommand+0x778>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00b ff1f 	bl	8011fe2 <strncmp>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d047      	beq.n	8006238 <setCommand+0x6c8>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 80061a8:	2208      	movs	r2, #8
 80061aa:	4950      	ldr	r1, [pc, #320]	; (80062ec <setCommand+0x77c>)
 80061ac:	0020      	movs	r0, r4
 80061ae:	f00b ff18 	bl	8011fe2 <strncmp>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d042      	beq.n	800623c <setCommand+0x6cc>
 80061b6:	2202      	movs	r2, #2
 80061b8:	494d      	ldr	r1, [pc, #308]	; (80062f0 <setCommand+0x780>)
 80061ba:	0020      	movs	r0, r4
 80061bc:	f00b ff11 	bl	8011fe2 <strncmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d03d      	beq.n	8006240 <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 80061c4:	2208      	movs	r2, #8
 80061c6:	494b      	ldr	r1, [pc, #300]	; (80062f4 <setCommand+0x784>)
 80061c8:	0020      	movs	r0, r4
 80061ca:	f00b ff0a 	bl	8011fe2 <strncmp>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d038      	beq.n	8006244 <setCommand+0x6d4>
 80061d2:	2202      	movs	r2, #2
 80061d4:	4948      	ldr	r1, [pc, #288]	; (80062f8 <setCommand+0x788>)
 80061d6:	0020      	movs	r0, r4
 80061d8:	f00b ff03 	bl	8011fe2 <strncmp>
			temp82 = DECEMBER;
 80061dc:	250c      	movs	r5, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 80061de:	2800      	cmp	r0, #0
 80061e0:	d005      	beq.n	80061ee <setCommand+0x67e>
			result = BOS_ERR_WrongValue;	
 80061e2:	2668      	movs	r6, #104	; 0x68
	else if (result == BOS_ERR_WrongParam)
 80061e4:	e033      	b.n	800624e <setCommand+0x6de>
			result = BOS_ERR_WrongValue;		
 80061e6:	2668      	movs	r6, #104	; 0x68
			temp82 = JANUARY;
 80061e8:	2501      	movs	r5, #1
 80061ea:	e000      	b.n	80061ee <setCommand+0x67e>
 80061ec:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 80061ee:	2e00      	cmp	r6, #0
 80061f0:	d12d      	bne.n	800624e <setCommand+0x6de>
 80061f2:	e090      	b.n	8006316 <setCommand+0x7a6>
			temp82 = FEBRUARY;
 80061f4:	2502      	movs	r5, #2
 80061f6:	e7fa      	b.n	80061ee <setCommand+0x67e>
 80061f8:	2502      	movs	r5, #2
 80061fa:	e7f8      	b.n	80061ee <setCommand+0x67e>
			temp82 = MARCH;
 80061fc:	2503      	movs	r5, #3
 80061fe:	e7f6      	b.n	80061ee <setCommand+0x67e>
 8006200:	2503      	movs	r5, #3
 8006202:	e7f4      	b.n	80061ee <setCommand+0x67e>
			temp82 = APRIL;
 8006204:	2504      	movs	r5, #4
 8006206:	e7f2      	b.n	80061ee <setCommand+0x67e>
 8006208:	2504      	movs	r5, #4
 800620a:	e7f0      	b.n	80061ee <setCommand+0x67e>
			temp82 = MAY;
 800620c:	2505      	movs	r5, #5
 800620e:	e7ee      	b.n	80061ee <setCommand+0x67e>
 8006210:	2505      	movs	r5, #5
 8006212:	e7ec      	b.n	80061ee <setCommand+0x67e>
			temp82 = JUNE;
 8006214:	2506      	movs	r5, #6
 8006216:	e7ea      	b.n	80061ee <setCommand+0x67e>
 8006218:	2506      	movs	r5, #6
 800621a:	e7e8      	b.n	80061ee <setCommand+0x67e>
			temp82 = JULY;
 800621c:	2507      	movs	r5, #7
 800621e:	e7e6      	b.n	80061ee <setCommand+0x67e>
 8006220:	2507      	movs	r5, #7
 8006222:	e7e4      	b.n	80061ee <setCommand+0x67e>
			temp82 = AUGUST;
 8006224:	2508      	movs	r5, #8
 8006226:	e7e2      	b.n	80061ee <setCommand+0x67e>
 8006228:	2508      	movs	r5, #8
 800622a:	e7e0      	b.n	80061ee <setCommand+0x67e>
			temp82 = SEPTEMBER;
 800622c:	2509      	movs	r5, #9
 800622e:	e7de      	b.n	80061ee <setCommand+0x67e>
 8006230:	2509      	movs	r5, #9
 8006232:	e7dc      	b.n	80061ee <setCommand+0x67e>
			temp82 = OCTOBER;
 8006234:	250a      	movs	r5, #10
 8006236:	e7da      	b.n	80061ee <setCommand+0x67e>
 8006238:	250a      	movs	r5, #10
 800623a:	e7d8      	b.n	80061ee <setCommand+0x67e>
			temp82 = NOVEMBER;
 800623c:	250b      	movs	r5, #11
 800623e:	e7d6      	b.n	80061ee <setCommand+0x67e>
 8006240:	250b      	movs	r5, #11
 8006242:	e7d4      	b.n	80061ee <setCommand+0x67e>
			temp82 = DECEMBER;
 8006244:	250c      	movs	r5, #12
 8006246:	e7d2      	b.n	80061ee <setCommand+0x67e>
	else if (result == BOS_ERR_WrongParam)
 8006248:	2e67      	cmp	r6, #103	; 0x67
 800624a:	d100      	bne.n	800624e <setCommand+0x6de>
 800624c:	e4bf      	b.n	8005bce <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 800624e:	2e68      	cmp	r6, #104	; 0x68
 8006250:	d100      	bne.n	8006254 <setCommand+0x6e4>
 8006252:	e4f5      	b.n	8005c40 <setCommand+0xd0>
}
 8006254:	2000      	movs	r0, #0
 8006256:	b00e      	add	sp, #56	; 0x38
 8006258:	bce0      	pop	{r5, r6, r7}
 800625a:	46ba      	mov	sl, r7
 800625c:	46b1      	mov	r9, r6
 800625e:	46a8      	mov	r8, r5
 8006260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	20006600 	.word	0x20006600
 8006268:	20000f38 	.word	0x20000f38
 800626c:	20000f44 	.word	0x20000f44
 8006270:	08018e84 	.word	0x08018e84
 8006274:	20000f4c 	.word	0x20000f4c
 8006278:	20000f50 	.word	0x20000f50
 800627c:	20000f54 	.word	0x20000f54
 8006280:	08018f84 	.word	0x08018f84
 8006284:	08018f8c 	.word	0x08018f8c
 8006288:	08018f94 	.word	0x08018f94
 800628c:	08018fa0 	.word	0x08018fa0
 8006290:	08018fac 	.word	0x08018fac
 8006294:	08018fb4 	.word	0x08018fb4
 8006298:	08018fc0 	.word	0x08018fc0
 800629c:	08018fc8 	.word	0x08018fc8
 80062a0:	08018fd0 	.word	0x08018fd0
 80062a4:	08018fd4 	.word	0x08018fd4
 80062a8:	08018fe0 	.word	0x08018fe0
 80062ac:	08018fe4 	.word	0x08018fe4
 80062b0:	08018fec 	.word	0x08018fec
 80062b4:	08018ff0 	.word	0x08018ff0
 80062b8:	08018ff8 	.word	0x08018ff8
 80062bc:	08018ffc 	.word	0x08018ffc
 80062c0:	08019000 	.word	0x08019000
 80062c4:	08019004 	.word	0x08019004
 80062c8:	0801900c 	.word	0x0801900c
 80062cc:	08019010 	.word	0x08019010
 80062d0:	08019018 	.word	0x08019018
 80062d4:	0801901c 	.word	0x0801901c
 80062d8:	08019024 	.word	0x08019024
 80062dc:	08019028 	.word	0x08019028
 80062e0:	08019034 	.word	0x08019034
 80062e4:	08019038 	.word	0x08019038
 80062e8:	08019040 	.word	0x08019040
 80062ec:	08019044 	.word	0x08019044
 80062f0:	08019050 	.word	0x08019050
 80062f4:	08019054 	.word	0x08019054
 80062f8:	08019060 	.word	0x08019060
			temp81 = MONDAY;
 80062fc:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80062fe:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <setCommand+0x808>)
 8006300:	681c      	ldr	r4, [r3, #0]
 8006302:	2207      	movs	r2, #7
 8006304:	491d      	ldr	r1, [pc, #116]	; (800637c <setCommand+0x80c>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00b fe6b 	bl	8011fe2 <strncmp>
			temp82 = JANUARY;
 800630c:	2501      	movs	r5, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800630e:	2600      	movs	r6, #0
 8006310:	2800      	cmp	r0, #0
 8006312:	d000      	beq.n	8006316 <setCommand+0x7a6>
 8006314:	e6bc      	b.n	8006090 <setCommand+0x520>
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006316:	466b      	mov	r3, sp
 8006318:	7e1e      	ldrb	r6, [r3, #24]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 800631a:	1e73      	subs	r3, r6, #1
 800631c:	2b1e      	cmp	r3, #30
 800631e:	d900      	bls.n	8006322 <setCommand+0x7b2>
 8006320:	e48e      	b.n	8005c40 <setCommand+0xd0>
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006322:	466b      	mov	r3, sp
 8006324:	8b9c      	ldrh	r4, [r3, #28]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006326:	4b16      	ldr	r3, [pc, #88]	; (8006380 <setCommand+0x810>)
 8006328:	18e3      	adds	r3, r4, r3
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b64      	cmp	r3, #100	; 0x64
 800632e:	d900      	bls.n	8006332 <setCommand+0x7c2>
 8006330:	e486      	b.n	8005c40 <setCommand+0xd0>
				GetTimeDate();
 8006332:	f005 fee7 	bl	800c104 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <setCommand+0x814>)
 8006338:	220c      	movs	r2, #12
 800633a:	569a      	ldrsb	r2, [r3, r2]
 800633c:	9204      	str	r2, [sp, #16]
 800633e:	7cda      	ldrb	r2, [r3, #19]
 8006340:	9203      	str	r2, [sp, #12]
 8006342:	7c9a      	ldrb	r2, [r3, #18]
 8006344:	9202      	str	r2, [sp, #8]
 8006346:	7c5a      	ldrb	r2, [r3, #17]
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	7c1b      	ldrb	r3, [r3, #16]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	003b      	movs	r3, r7
 8006350:	0022      	movs	r2, r4
 8006352:	0031      	movs	r1, r6
 8006354:	0028      	movs	r0, r5
 8006356:	f005 fe7b 	bl	800c050 <BOS_CalendarConfig>
 800635a:	0006      	movs	r6, r0
 800635c:	e621      	b.n	8005fa2 <setCommand+0x432>
			temp81 = TUESDAY;
 800635e:	2702      	movs	r7, #2
 8006360:	e7cd      	b.n	80062fe <setCommand+0x78e>
			temp81 = WEDNESDAY;
 8006362:	2703      	movs	r7, #3
 8006364:	e7cb      	b.n	80062fe <setCommand+0x78e>
			temp81 = THURSDAY;
 8006366:	2704      	movs	r7, #4
 8006368:	e7c9      	b.n	80062fe <setCommand+0x78e>
			temp81 = FRIDAY;
 800636a:	2705      	movs	r7, #5
 800636c:	e7c7      	b.n	80062fe <setCommand+0x78e>
			temp81 = SATURDAY;
 800636e:	2706      	movs	r7, #6
 8006370:	e7c5      	b.n	80062fe <setCommand+0x78e>
			temp81 = SUNDAY;
 8006372:	2707      	movs	r7, #7
 8006374:	e7c3      	b.n	80062fe <setCommand+0x78e>
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	20000f4c 	.word	0x20000f4c
 800637c:	08018fc8 	.word	0x08018fc8
 8006380:	fffff830 	.word	0xfffff830
 8006384:	20006600 	.word	0x20006600

08006388 <removebuttonCommand>:
{
 8006388:	b530      	push	{r4, r5, lr}
 800638a:	b083      	sub	sp, #12
 800638c:	0005      	movs	r5, r0
 800638e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006390:	2300      	movs	r3, #0
 8006392:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006394:	2d00      	cmp	r5, #0
 8006396:	d010      	beq.n	80063ba <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006398:	aa01      	add	r2, sp, #4
 800639a:	2101      	movs	r1, #1
 800639c:	f006 fbb8 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80063a0:	2300      	movs	r3, #0
 80063a2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 80063a4:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 80063a6:	2b70      	cmp	r3, #112	; 0x70
 80063a8:	d009      	beq.n	80063be <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 80063aa:	0020      	movs	r0, r4
 80063ac:	f001 fdce 	bl	8007f4c <RemovePortButton>
	if (result == BOS_OK) 
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d009      	beq.n	80063c8 <removebuttonCommand+0x40>
}
 80063b4:	2000      	movs	r0, #0
 80063b6:	b003      	add	sp, #12
 80063b8:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 80063ba:	b672      	cpsid	i
 80063bc:	e7fe      	b.n	80063bc <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80063be:	3001      	adds	r0, #1
 80063c0:	f00b f96d 	bl	801169e <atol>
 80063c4:	b2c4      	uxtb	r4, r0
 80063c6:	e7f0      	b.n	80063aa <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 80063c8:	0023      	movs	r3, r4
 80063ca:	0022      	movs	r2, r4
 80063cc:	4902      	ldr	r1, [pc, #8]	; (80063d8 <removebuttonCommand+0x50>)
 80063ce:	0028      	movs	r0, r5
 80063d0:	f00b fdc4 	bl	8011f5c <sprintf>
 80063d4:	e7ee      	b.n	80063b4 <removebuttonCommand+0x2c>
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	08019064 	.word	0x08019064

080063dc <addbuttonCommand>:
{
 80063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063de:	46c6      	mov	lr, r8
 80063e0:	b500      	push	{lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	0006      	movs	r6, r0
 80063e6:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 80063e8:	2300      	movs	r3, #0
 80063ea:	9303      	str	r3, [sp, #12]
 80063ec:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d03d      	beq.n	800646e <addbuttonCommand+0x92>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80063f2:	aa03      	add	r2, sp, #12
 80063f4:	2101      	movs	r1, #1
 80063f6:	0038      	movs	r0, r7
 80063f8:	f006 fb8a 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 80063fc:	0005      	movs	r5, r0
 80063fe:	4b25      	ldr	r3, [pc, #148]	; (8006494 <addbuttonCommand+0xb8>)
 8006400:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	4698      	mov	r8, r3
 8006406:	001a      	movs	r2, r3
 8006408:	4923      	ldr	r1, [pc, #140]	; (8006498 <addbuttonCommand+0xbc>)
 800640a:	f00b fdea 	bl	8011fe2 <strncmp>
		type = MOMENTARY_NO;
 800640e:	2401      	movs	r4, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006410:	2800      	cmp	r0, #0
 8006412:	d017      	beq.n	8006444 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006414:	4642      	mov	r2, r8
 8006416:	4921      	ldr	r1, [pc, #132]	; (800649c <addbuttonCommand+0xc0>)
 8006418:	0028      	movs	r0, r5
 800641a:	f00b fde2 	bl	8011fe2 <strncmp>
		type = MOMENTARY_NC;
 800641e:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006420:	2800      	cmp	r0, #0
 8006422:	d00f      	beq.n	8006444 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006424:	4642      	mov	r2, r8
 8006426:	491e      	ldr	r1, [pc, #120]	; (80064a0 <addbuttonCommand+0xc4>)
 8006428:	0028      	movs	r0, r5
 800642a:	f00b fdda 	bl	8011fe2 <strncmp>
		type = ONOFF_NO;
 800642e:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006430:	2800      	cmp	r0, #0
 8006432:	d007      	beq.n	8006444 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006434:	4642      	mov	r2, r8
 8006436:	491b      	ldr	r1, [pc, #108]	; (80064a4 <addbuttonCommand+0xc8>)
 8006438:	0028      	movs	r0, r5
 800643a:	f00b fdd2 	bl	8011fe2 <strncmp>
		type = ONOFF_NC;
 800643e:	4244      	negs	r4, r0
 8006440:	4144      	adcs	r4, r0
 8006442:	00a4      	lsls	r4, r4, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006444:	aa02      	add	r2, sp, #8
 8006446:	2102      	movs	r1, #2
 8006448:	0038      	movs	r0, r7
 800644a:	f006 fb61 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800644e:	2300      	movs	r3, #0
 8006450:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006452:	2500      	movs	r5, #0
	if (pcParameterString2[0] == 'p') {
 8006454:	2b70      	cmp	r3, #112	; 0x70
 8006456:	d00c      	beq.n	8006472 <addbuttonCommand+0x96>
	result = AddPortButton(type, port);
 8006458:	0029      	movs	r1, r5
 800645a:	0020      	movs	r0, r4
 800645c:	f001 fce4 	bl	8007e28 <AddPortButton>
	if (result == BOS_OK) 
 8006460:	2800      	cmp	r0, #0
 8006462:	d00b      	beq.n	800647c <addbuttonCommand+0xa0>
}
 8006464:	2000      	movs	r0, #0
 8006466:	b004      	add	sp, #16
 8006468:	bc80      	pop	{r7}
 800646a:	46b8      	mov	r8, r7
 800646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 800646e:	b672      	cpsid	i
 8006470:	e7fe      	b.n	8006470 <addbuttonCommand+0x94>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006472:	3001      	adds	r0, #1
 8006474:	f00b f913 	bl	801169e <atol>
 8006478:	b2c5      	uxtb	r5, r0
 800647a:	e7ed      	b.n	8006458 <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <addbuttonCommand+0xb8>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	2300      	movs	r3, #0
 8006482:	9903      	ldr	r1, [sp, #12]
 8006484:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006486:	9500      	str	r5, [sp, #0]
 8006488:	002b      	movs	r3, r5
 800648a:	4907      	ldr	r1, [pc, #28]	; (80064a8 <addbuttonCommand+0xcc>)
 800648c:	0030      	movs	r0, r6
 800648e:	f00b fd65 	bl	8011f5c <sprintf>
 8006492:	e7e7      	b.n	8006464 <addbuttonCommand+0x88>
 8006494:	20000f34 	.word	0x20000f34
 8006498:	0801908c 	.word	0x0801908c
 800649c:	0801909c 	.word	0x0801909c
 80064a0:	080190ac 	.word	0x080190ac
 80064a4:	080190b8 	.word	0x080190b8
 80064a8:	080190c4 	.word	0x080190c4

080064ac <scastCommand>:
{
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	46de      	mov	lr, fp
 80064b0:	4657      	mov	r7, sl
 80064b2:	464e      	mov	r6, r9
 80064b4:	4645      	mov	r5, r8
 80064b6:	b5e0      	push	{r5, r6, r7, lr}
 80064b8:	b099      	sub	sp, #100	; 0x64
 80064ba:	0006      	movs	r6, r0
 80064bc:	9007      	str	r0, [sp, #28]
 80064be:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 80064c0:	2500      	movs	r5, #0
 80064c2:	9517      	str	r5, [sp, #92]	; 0x5c
 80064c4:	9516      	str	r5, [sp, #88]	; 0x58
 80064c6:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 80064c8:	9514      	str	r5, [sp, #80]	; 0x50
 80064ca:	9513      	str	r5, [sp, #76]	; 0x4c
 80064cc:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 80064ce:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 80064d0:	950e      	str	r5, [sp, #56]	; 0x38
 80064d2:	2206      	movs	r2, #6
 80064d4:	2100      	movs	r1, #0
 80064d6:	a80f      	add	r0, sp, #60	; 0x3c
 80064d8:	f00b fb4b 	bl	8011b72 <memset>
 80064dc:	950b      	str	r5, [sp, #44]	; 0x2c
 80064de:	2206      	movs	r2, #6
 80064e0:	2100      	movs	r1, #0
 80064e2:	a80c      	add	r0, sp, #48	; 0x30
 80064e4:	f00b fb45 	bl	8011b72 <memset>
 80064e8:	9508      	str	r5, [sp, #32]
 80064ea:	2206      	movs	r2, #6
 80064ec:	2100      	movs	r1, #0
 80064ee:	a809      	add	r0, sp, #36	; 0x24
 80064f0:	f00b fb3f 	bl	8011b72 <memset>
	configASSERT( pcWriteBuffer );
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	d100      	bne.n	80064fa <scastCommand+0x4e>
 80064f8:	e07c      	b.n	80065f4 <scastCommand+0x148>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80064fa:	aa17      	add	r2, sp, #92	; 0x5c
 80064fc:	2101      	movs	r1, #1
 80064fe:	0020      	movs	r0, r4
 8006500:	f006 fb06 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006504:	2300      	movs	r3, #0
 8006506:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006508:	2700      	movs	r7, #0
	if (pcParameterString1[0] == 'P') {
 800650a:	2b50      	cmp	r3, #80	; 0x50
 800650c:	d100      	bne.n	8006510 <scastCommand+0x64>
 800650e:	e073      	b.n	80065f8 <scastCommand+0x14c>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006510:	aa16      	add	r2, sp, #88	; 0x58
 8006512:	2102      	movs	r1, #2
 8006514:	0020      	movs	r0, r4
 8006516:	f006 fafb 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 800651a:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 800651c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800651e:	a80e      	add	r0, sp, #56	; 0x38
 8006520:	f00b fd70 	bl	8012004 <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006524:	a80e      	add	r0, sp, #56	; 0x38
 8006526:	f7fd fbb9 	bl	8003c9c <GetID>
 800652a:	b2c3      	uxtb	r3, r0
 800652c:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800652e:	aa15      	add	r2, sp, #84	; 0x54
 8006530:	2103      	movs	r1, #3
 8006532:	0020      	movs	r0, r4
 8006534:	f006 faec 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006538:	2300      	movs	r3, #0
 800653a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 800653c:	2200      	movs	r2, #0
 800653e:	4690      	mov	r8, r2
	if (pcParameterString3[0] == 'p') {
 8006540:	2b70      	cmp	r3, #112	; 0x70
 8006542:	d05e      	beq.n	8006602 <scastCommand+0x156>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006544:	aa14      	add	r2, sp, #80	; 0x50
 8006546:	2104      	movs	r1, #4
 8006548:	0020      	movs	r0, r4
 800654a:	f006 fae1 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 800654e:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8006550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006552:	a80b      	add	r0, sp, #44	; 0x2c
 8006554:	f00b fd56 	bl	8012004 <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006558:	a80b      	add	r0, sp, #44	; 0x2c
 800655a:	f7fd fb9f 	bl	8003c9c <GetID>
 800655e:	b2c3      	uxtb	r3, r0
 8006560:	4699      	mov	r9, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006562:	aa13      	add	r2, sp, #76	; 0x4c
 8006564:	2105      	movs	r1, #5
 8006566:	0020      	movs	r0, r4
 8006568:	f006 fad2 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 800656c:	0006      	movs	r6, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 800656e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006570:	469a      	mov	sl, r3
 8006572:	001a      	movs	r2, r3
 8006574:	492d      	ldr	r1, [pc, #180]	; (800662c <scastCommand+0x180>)
 8006576:	f00b fd34 	bl	8011fe2 <strncmp>
		direction = FORWARD;
 800657a:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 800657c:	2800      	cmp	r0, #0
 800657e:	d00f      	beq.n	80065a0 <scastCommand+0xf4>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006580:	4652      	mov	r2, sl
 8006582:	492b      	ldr	r1, [pc, #172]	; (8006630 <scastCommand+0x184>)
 8006584:	0030      	movs	r0, r6
 8006586:	f00b fd2c 	bl	8011fe2 <strncmp>
		direction = BACKWARD;
 800658a:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 800658c:	2800      	cmp	r0, #0
 800658e:	d007      	beq.n	80065a0 <scastCommand+0xf4>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006590:	4652      	mov	r2, sl
 8006592:	4928      	ldr	r1, [pc, #160]	; (8006634 <scastCommand+0x188>)
 8006594:	0030      	movs	r0, r6
 8006596:	f00b fd24 	bl	8011fe2 <strncmp>
		direction = BIDIRECTIONAL;
 800659a:	4245      	negs	r5, r0
 800659c:	4145      	adcs	r5, r0
 800659e:	006d      	lsls	r5, r5, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 80065a0:	4652      	mov	r2, sl
 80065a2:	0031      	movs	r1, r6
 80065a4:	a808      	add	r0, sp, #32
 80065a6:	f00b fd2d 	bl	8012004 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 80065aa:	aa12      	add	r2, sp, #72	; 0x48
 80065ac:	2106      	movs	r1, #6
 80065ae:	0020      	movs	r0, r4
 80065b0:	f006 faae 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 80065b4:	f00b f873 	bl	801169e <atol>
 80065b8:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 80065ba:	aa11      	add	r2, sp, #68	; 0x44
 80065bc:	2107      	movs	r1, #7
 80065be:	0020      	movs	r0, r4
 80065c0:	f006 faa6 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 80065c4:	f00b f86b 	bl	801169e <atol>
 80065c8:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 80065ca:	2300      	movs	r3, #0
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	9002      	str	r0, [sp, #8]
 80065d0:	9601      	str	r6, [sp, #4]
 80065d2:	9500      	str	r5, [sp, #0]
 80065d4:	464b      	mov	r3, r9
 80065d6:	4642      	mov	r2, r8
 80065d8:	4659      	mov	r1, fp
 80065da:	0038      	movs	r0, r7
 80065dc:	f002 fa6e 	bl	8008abc <StartScastDMAStream>
	if (result == BOS_OK) 
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d014      	beq.n	800660e <scastCommand+0x162>
}
 80065e4:	2000      	movs	r0, #0
 80065e6:	b019      	add	sp, #100	; 0x64
 80065e8:	bcf0      	pop	{r4, r5, r6, r7}
 80065ea:	46bb      	mov	fp, r7
 80065ec:	46b2      	mov	sl, r6
 80065ee:	46a9      	mov	r9, r5
 80065f0:	46a0      	mov	r8, r4
 80065f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80065f4:	b672      	cpsid	i
 80065f6:	e7fe      	b.n	80065f6 <scastCommand+0x14a>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80065f8:	3001      	adds	r0, #1
 80065fa:	f00b f850 	bl	801169e <atol>
 80065fe:	b2c7      	uxtb	r7, r0
 8006600:	e786      	b.n	8006510 <scastCommand+0x64>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006602:	3001      	adds	r0, #1
 8006604:	f00b f84b 	bl	801169e <atol>
 8006608:	b2c3      	uxtb	r3, r0
 800660a:	4698      	mov	r8, r3
 800660c:	e79a      	b.n	8006544 <scastCommand+0x98>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 800660e:	9404      	str	r4, [sp, #16]
 8006610:	9603      	str	r6, [sp, #12]
 8006612:	ab0b      	add	r3, sp, #44	; 0x2c
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	4643      	mov	r3, r8
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	ab0e      	add	r3, sp, #56	; 0x38
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	003b      	movs	r3, r7
 8006620:	aa08      	add	r2, sp, #32
 8006622:	4905      	ldr	r1, [pc, #20]	; (8006638 <scastCommand+0x18c>)
 8006624:	9807      	ldr	r0, [sp, #28]
 8006626:	f00b fc99 	bl	8011f5c <sprintf>
 800662a:	e7db      	b.n	80065e4 <scastCommand+0x138>
 800662c:	080190f8 	.word	0x080190f8
 8006630:	08019100 	.word	0x08019100
 8006634:	0801910c 	.word	0x0801910c
 8006638:	0801911c 	.word	0x0801911c

0800663c <infoCommand>:
{
 800663c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006642:	d036      	beq.n	80066b2 <infoCommand+0x76>
	if (N > 1)
 8006644:	4b27      	ldr	r3, [pc, #156]	; (80066e4 <infoCommand+0xa8>)
 8006646:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8006648:	2500      	movs	r5, #0
	if (N > 1)
 800664a:	2b01      	cmp	r3, #1
 800664c:	d833      	bhi.n	80066b6 <infoCommand+0x7a>
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800664e:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <infoCommand+0xa8>)
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	4925      	ldr	r1, [pc, #148]	; (80066e8 <infoCommand+0xac>)
 8006654:	0020      	movs	r0, r4
 8006656:	f00b fc81 	bl	8011f5c <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800665a:	0020      	movs	r0, r4
 800665c:	f7f9 fd5c 	bl	8000118 <strlen>
 8006660:	b282      	uxth	r2, r0
 8006662:	4e22      	ldr	r6, [pc, #136]	; (80066ec <infoCommand+0xb0>)
 8006664:	7830      	ldrb	r0, [r6, #0]
 8006666:	2701      	movs	r7, #1
 8006668:	427f      	negs	r7, r7
 800666a:	9700      	str	r7, [sp, #0]
 800666c:	2332      	movs	r3, #50	; 0x32
 800666e:	0021      	movs	r1, r4
 8006670:	f005 fff8 	bl	800c664 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006674:	2213      	movs	r2, #19
 8006676:	491e      	ldr	r1, [pc, #120]	; (80066f0 <infoCommand+0xb4>)
 8006678:	0020      	movs	r0, r4
 800667a:	f00b fa71 	bl	8011b60 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800667e:	0020      	movs	r0, r4
 8006680:	f7f9 fd4a 	bl	8000118 <strlen>
 8006684:	b282      	uxth	r2, r0
 8006686:	7830      	ldrb	r0, [r6, #0]
 8006688:	9700      	str	r7, [sp, #0]
 800668a:	2332      	movs	r3, #50	; 0x32
 800668c:	0021      	movs	r1, r4
 800668e:	f005 ffe9 	bl	800c664 <writePxMutex>
	DisplayTopology(PcPort);
 8006692:	7830      	ldrb	r0, [r6, #0]
 8006694:	f7fd f846 	bl	8003724 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006698:	7830      	ldrb	r0, [r6, #0]
 800669a:	f7fd f91f 	bl	80038dc <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 800669e:	2d02      	cmp	r5, #2
 80066a0:	d00d      	beq.n	80066be <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 80066a2:	2202      	movs	r2, #2
 80066a4:	4913      	ldr	r1, [pc, #76]	; (80066f4 <infoCommand+0xb8>)
 80066a6:	0020      	movs	r0, r4
 80066a8:	f00b fa5a 	bl	8011b60 <memcpy>
}
 80066ac:	2000      	movs	r0, #0
 80066ae:	b003      	add	sp, #12
 80066b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80066b2:	b672      	cpsid	i
 80066b4:	e7fe      	b.n	80066b4 <infoCommand+0x78>
		result = ReadPortsDir();
 80066b6:	f7fd fc3b 	bl	8003f30 <ReadPortsDir>
 80066ba:	0005      	movs	r5, r0
 80066bc:	e7c7      	b.n	800664e <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 80066be:	2244      	movs	r2, #68	; 0x44
 80066c0:	490d      	ldr	r1, [pc, #52]	; (80066f8 <infoCommand+0xbc>)
 80066c2:	0020      	movs	r0, r4
 80066c4:	f00b fa4c 	bl	8011b60 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 80066c8:	0020      	movs	r0, r4
 80066ca:	f7f9 fd25 	bl	8000118 <strlen>
 80066ce:	b282      	uxth	r2, r0
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <infoCommand+0xb0>)
 80066d2:	7818      	ldrb	r0, [r3, #0]
 80066d4:	003b      	movs	r3, r7
 80066d6:	9700      	str	r7, [sp, #0]
 80066d8:	3333      	adds	r3, #51	; 0x33
 80066da:	0021      	movs	r1, r4
 80066dc:	f005 ffc2 	bl	800c664 <writePxMutex>
 80066e0:	e7df      	b.n	80066a2 <infoCommand+0x66>
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	2000001c 	.word	0x2000001c
 80066e8:	080191a4 	.word	0x080191a4
 80066ec:	20000ad7 	.word	0x20000ad7
 80066f0:	080191c0 	.word	0x080191c0
 80066f4:	08017f38 	.word	0x08017f38
 80066f8:	080191d4 	.word	0x080191d4

080066fc <statusCommand>:
{
 80066fc:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 80066fe:	2800      	cmp	r0, #0
 8006700:	d004      	beq.n	800670c <statusCommand+0x10>
	DisplayModuleStatus(0);
 8006702:	2000      	movs	r0, #0
 8006704:	f7fd f960 	bl	80039c8 <DisplayModuleStatus>
}
 8006708:	2000      	movs	r0, #0
 800670a:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800670c:	b672      	cpsid	i
 800670e:	e7fe      	b.n	800670e <statusCommand+0x12>

08006710 <groupCommand>:
{
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	46ce      	mov	lr, r9
 8006714:	4647      	mov	r7, r8
 8006716:	b580      	push	{r7, lr}
 8006718:	b08f      	sub	sp, #60	; 0x3c
 800671a:	0004      	movs	r4, r0
 800671c:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 800671e:	2500      	movs	r5, #0
 8006720:	9504      	str	r5, [sp, #16]
 8006722:	2223      	movs	r2, #35	; 0x23
 8006724:	2100      	movs	r1, #0
 8006726:	a805      	add	r0, sp, #20
 8006728:	f00b fa23 	bl	8011b72 <memset>
 800672c:	9501      	str	r5, [sp, #4]
 800672e:	2206      	movs	r2, #6
 8006730:	2100      	movs	r1, #0
 8006732:	a802      	add	r0, sp, #8
 8006734:	f00b fa1d 	bl	8011b72 <memset>
	configASSERT( pcWriteBuffer );
 8006738:	2c00      	cmp	r4, #0
 800673a:	d02c      	beq.n	8006796 <groupCommand+0x86>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800673c:	4d56      	ldr	r5, [pc, #344]	; (8006898 <groupCommand+0x188>)
 800673e:	002a      	movs	r2, r5
 8006740:	2101      	movs	r1, #1
 8006742:	0030      	movs	r0, r6
 8006744:	f006 f9e4 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8006748:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 800674a:	682a      	ldr	r2, [r5, #0]
 800674c:	a801      	add	r0, sp, #4
 800674e:	f00b fc59 	bl	8012004 <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006752:	4d52      	ldr	r5, [pc, #328]	; (800689c <groupCommand+0x18c>)
 8006754:	002f      	movs	r7, r5
 8006756:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8006758:	0029      	movs	r1, r5
 800675a:	a801      	add	r0, sp, #4
 800675c:	f7f9 fcd2 	bl	8000104 <strcmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	d01a      	beq.n	800679a <groupCommand+0x8a>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006764:	350a      	adds	r5, #10
 8006766:	42af      	cmp	r7, r5
 8006768:	d1f6      	bne.n	8006758 <groupCommand+0x48>
	type = 1;
 800676a:	2701      	movs	r7, #1
	count = 2;
 800676c:	4b4c      	ldr	r3, [pc, #304]	; (80068a0 <groupCommand+0x190>)
 800676e:	2202      	movs	r2, #2
 8006770:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8006772:	3208      	adds	r2, #8
 8006774:	494b      	ldr	r1, [pc, #300]	; (80068a4 <groupCommand+0x194>)
 8006776:	0020      	movs	r0, r4
 8006778:	f00b f9f2 	bl	8011b60 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 800677c:	4a4a      	ldr	r2, [pc, #296]	; (80068a8 <groupCommand+0x198>)
 800677e:	2102      	movs	r1, #2
 8006780:	0030      	movs	r0, r6
 8006782:	f006 f9c5 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 8006786:	1e01      	subs	r1, r0, #0
 8006788:	4b48      	ldr	r3, [pc, #288]	; (80068ac <groupCommand+0x19c>)
 800678a:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 800678c:	d100      	bne.n	8006790 <groupCommand+0x80>
 800678e:	e072      	b.n	8006876 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006790:	4b45      	ldr	r3, [pc, #276]	; (80068a8 <groupCommand+0x198>)
 8006792:	4698      	mov	r8, r3
 8006794:	e024      	b.n	80067e0 <groupCommand+0xd0>
	configASSERT( pcWriteBuffer );
 8006796:	b672      	cpsid	i
 8006798:	e7fe      	b.n	8006798 <groupCommand+0x88>
			type = 0; break;
 800679a:	2700      	movs	r7, #0
 800679c:	e7e6      	b.n	800676c <groupCommand+0x5c>
	else if (count == 2)
 800679e:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <groupCommand+0x190>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d03f      	beq.n	8006828 <groupCommand+0x118>
	} else if (result == BOS_ERR_Keyword)
 80067a8:	2806      	cmp	r0, #6
 80067aa:	d04d      	beq.n	8006848 <groupCommand+0x138>
	else if (result == BOS_ERR_ExistingAlias)
 80067ac:	2807      	cmp	r0, #7
 80067ae:	d051      	beq.n	8006854 <groupCommand+0x144>
	else if (result == BOS_ERR_ExistingCmd)
 80067b0:	2808      	cmp	r0, #8
 80067b2:	d15a      	bne.n	800686a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80067b4:	aa01      	add	r2, sp, #4
 80067b6:	493e      	ldr	r1, [pc, #248]	; (80068b0 <groupCommand+0x1a0>)
 80067b8:	0020      	movs	r0, r4
 80067ba:	f00b fbcf 	bl	8011f5c <sprintf>
 80067be:	e054      	b.n	800686a <groupCommand+0x15a>
		strcat( ( char * ) pcWriteBuffer, module);
 80067c0:	a904      	add	r1, sp, #16
 80067c2:	0020      	movs	r0, r4
 80067c4:	f00b fbea 	bl	8011f9c <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 80067c8:	1c69      	adds	r1, r5, #1
 80067ca:	b249      	sxtb	r1, r1
 80067cc:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <groupCommand+0x190>)
 80067ce:	7019      	strb	r1, [r3, #0]
 80067d0:	4a35      	ldr	r2, [pc, #212]	; (80068a8 <groupCommand+0x198>)
 80067d2:	0030      	movs	r0, r6
 80067d4:	f006 f99c 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 80067d8:	1e01      	subs	r1, r0, #0
 80067da:	4b34      	ldr	r3, [pc, #208]	; (80068ac <groupCommand+0x19c>)
 80067dc:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80067de:	d04a      	beq.n	8006876 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80067e0:	4643      	mov	r3, r8
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4699      	mov	r9, r3
 80067e6:	ad04      	add	r5, sp, #16
 80067e8:	001a      	movs	r2, r3
 80067ea:	0028      	movs	r0, r5
 80067ec:	f00b fc0a 	bl	8012004 <strncpy>
 80067f0:	2300      	movs	r3, #0
 80067f2:	464a      	mov	r2, r9
 80067f4:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 80067f6:	0028      	movs	r0, r5
 80067f8:	f7fd fa50 	bl	8003c9c <GetID>
		if (modID < 0)	break;
 80067fc:	2800      	cmp	r0, #0
 80067fe:	db2f      	blt.n	8006860 <groupCommand+0x150>
		result = AddModuleToGroup(modID, alias);
 8006800:	b2c0      	uxtb	r0, r0
 8006802:	a901      	add	r1, sp, #4
 8006804:	f7fd fb12 	bl	8003e2c <AddModuleToGroup>
		if (result != BOS_OK)	break;
 8006808:	2800      	cmp	r0, #0
 800680a:	d1c8      	bne.n	800679e <groupCommand+0x8e>
		if (count > 2)
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <groupCommand+0x190>)
 800680e:	2500      	movs	r5, #0
 8006810:	575d      	ldrsb	r5, [r3, r5]
 8006812:	2d02      	cmp	r5, #2
 8006814:	ddd4      	ble.n	80067c0 <groupCommand+0xb0>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 8006816:	0020      	movs	r0, r4
 8006818:	f7f9 fc7e 	bl	8000118 <strlen>
 800681c:	1820      	adds	r0, r4, r0
 800681e:	2203      	movs	r2, #3
 8006820:	4924      	ldr	r1, [pc, #144]	; (80068b4 <groupCommand+0x1a4>)
 8006822:	f00b f99d 	bl	8011b60 <memcpy>
 8006826:	e7cb      	b.n	80067c0 <groupCommand+0xb0>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8006828:	aa01      	add	r2, sp, #4
 800682a:	4923      	ldr	r1, [pc, #140]	; (80068b8 <groupCommand+0x1a8>)
 800682c:	0020      	movs	r0, r4
 800682e:	f00b fb95 	bl	8011f5c <sprintf>
 8006832:	e01a      	b.n	800686a <groupCommand+0x15a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006834:	aa01      	add	r2, sp, #4
 8006836:	4921      	ldr	r1, [pc, #132]	; (80068bc <groupCommand+0x1ac>)
 8006838:	a804      	add	r0, sp, #16
 800683a:	f00b fb8f 	bl	8011f5c <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800683e:	a904      	add	r1, sp, #16
 8006840:	0020      	movs	r0, r4
 8006842:	f00b fbab 	bl	8011f9c <strcat>
 8006846:	e010      	b.n	800686a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 8006848:	aa01      	add	r2, sp, #4
 800684a:	491d      	ldr	r1, [pc, #116]	; (80068c0 <groupCommand+0x1b0>)
 800684c:	0020      	movs	r0, r4
 800684e:	f00b fb85 	bl	8011f5c <sprintf>
 8006852:	e00a      	b.n	800686a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 8006854:	aa01      	add	r2, sp, #4
 8006856:	491b      	ldr	r1, [pc, #108]	; (80068c4 <groupCommand+0x1b4>)
 8006858:	0020      	movs	r0, r4
 800685a:	f00b fb7f 	bl	8011f5c <sprintf>
 800685e:	e004      	b.n	800686a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8006860:	aa04      	add	r2, sp, #16
 8006862:	4919      	ldr	r1, [pc, #100]	; (80068c8 <groupCommand+0x1b8>)
 8006864:	0020      	movs	r0, r4
 8006866:	f00b fb79 	bl	8011f5c <sprintf>
}
 800686a:	2000      	movs	r0, #0
 800686c:	b00f      	add	sp, #60	; 0x3c
 800686e:	bcc0      	pop	{r6, r7}
 8006870:	46b9      	mov	r9, r7
 8006872:	46b0      	mov	r8, r6
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <groupCommand+0x190>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b25b      	sxtb	r3, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d0d3      	beq.n	8006828 <groupCommand+0x118>
	else if (result == BOS_OK && type) {
 8006880:	2f00      	cmp	r7, #0
 8006882:	d1d7      	bne.n	8006834 <groupCommand+0x124>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8006884:	aa01      	add	r2, sp, #4
 8006886:	4911      	ldr	r1, [pc, #68]	; (80068cc <groupCommand+0x1bc>)
 8006888:	a804      	add	r0, sp, #16
 800688a:	f00b fb67 	bl	8011f5c <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800688e:	a904      	add	r1, sp, #16
 8006890:	0020      	movs	r0, r4
 8006892:	f00b fb83 	bl	8011f9c <strcat>
 8006896:	e7e8      	b.n	800686a <groupCommand+0x15a>
 8006898:	20000f64 	.word	0x20000f64
 800689c:	20000c68 	.word	0x20000c68
 80068a0:	20000f2a 	.word	0x20000f2a
 80068a4:	08019218 	.word	0x08019218
 80068a8:	20000f58 	.word	0x20000f58
 80068ac:	20000f2c 	.word	0x20000f2c
 80068b0:	08019304 	.word	0x08019304
 80068b4:	08019224 	.word	0x08019224
 80068b8:	08019228 	.word	0x08019228
 80068bc:	08019254 	.word	0x08019254
 80068c0:	08019290 	.word	0x08019290
 80068c4:	080192d0 	.word	0x080192d0
 80068c8:	08019344 	.word	0x08019344
 80068cc:	08019270 	.word	0x08019270

080068d0 <nameCommand>:
{
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	0004      	movs	r4, r0
 80068d4:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	d01a      	beq.n	8006910 <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80068da:	4d1d      	ldr	r5, [pc, #116]	; (8006950 <nameCommand+0x80>)
 80068dc:	002a      	movs	r2, r5
 80068de:	2101      	movs	r1, #1
 80068e0:	f006 f916 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 80068e4:	0001      	movs	r1, r0
 80068e6:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <nameCommand+0x84>)
 80068e8:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	2b09      	cmp	r3, #9
 80068ee:	dd01      	ble.n	80068f4 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80068f0:	2300      	movs	r3, #0
 80068f2:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 80068f4:	4b18      	ldr	r3, [pc, #96]	; (8006958 <nameCommand+0x88>)
 80068f6:	7818      	ldrb	r0, [r3, #0]
 80068f8:	f7fd fa34 	bl	8003d64 <NameModule>
	if (result == BOS_OK)
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d009      	beq.n	8006914 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006900:	2806      	cmp	r0, #6
 8006902:	d010      	beq.n	8006926 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006904:	2807      	cmp	r0, #7
 8006906:	d015      	beq.n	8006934 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8006908:	2808      	cmp	r0, #8
 800690a:	d01a      	beq.n	8006942 <nameCommand+0x72>
}
 800690c:	2000      	movs	r0, #0
 800690e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006910:	b672      	cpsid	i
 8006912:	e7fe      	b.n	8006912 <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <nameCommand+0x84>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a0f      	ldr	r2, [pc, #60]	; (8006958 <nameCommand+0x88>)
 800691a:	7812      	ldrb	r2, [r2, #0]
 800691c:	490f      	ldr	r1, [pc, #60]	; (800695c <nameCommand+0x8c>)
 800691e:	0020      	movs	r0, r4
 8006920:	f00b fb1c 	bl	8011f5c <sprintf>
 8006924:	e7f2      	b.n	800690c <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <nameCommand+0x84>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	490d      	ldr	r1, [pc, #52]	; (8006960 <nameCommand+0x90>)
 800692c:	0020      	movs	r0, r4
 800692e:	f00b fb15 	bl	8011f5c <sprintf>
 8006932:	e7eb      	b.n	800690c <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <nameCommand+0x84>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	490a      	ldr	r1, [pc, #40]	; (8006964 <nameCommand+0x94>)
 800693a:	0020      	movs	r0, r4
 800693c:	f00b fb0e 	bl	8011f5c <sprintf>
 8006940:	e7e4      	b.n	800690c <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <nameCommand+0x84>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <nameCommand+0x98>)
 8006948:	0020      	movs	r0, r4
 800694a:	f00b fb07 	bl	8011f5c <sprintf>
 800694e:	e7dd      	b.n	800690c <nameCommand+0x3c>
 8006950:	20000f60 	.word	0x20000f60
 8006954:	20000f30 	.word	0x20000f30
 8006958:	20000070 	.word	0x20000070
 800695c:	08019368 	.word	0x08019368
 8006960:	08019290 	.word	0x08019290
 8006964:	080192d0 	.word	0x080192d0
 8006968:	08019304 	.word	0x08019304

0800696c <bootloaderUpdateCommand>:
{
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	46c6      	mov	lr, r8
 8006970:	b500      	push	{lr}
 8006972:	b082      	sub	sp, #8
 8006974:	0004      	movs	r4, r0
 8006976:	0017      	movs	r7, r2
 8006978:	2600      	movs	r6, #0
 800697a:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 800697c:	2800      	cmp	r0, #0
 800697e:	d04f      	beq.n	8006a20 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006980:	4a4d      	ldr	r2, [pc, #308]	; (8006ab8 <bootloaderUpdateCommand+0x14c>)
 8006982:	2101      	movs	r1, #1
 8006984:	0038      	movs	r0, r7
 8006986:	f006 f8c3 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 800698a:	2800      	cmp	r0, #0
 800698c:	d04a      	beq.n	8006a24 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 800698e:	4b4a      	ldr	r3, [pc, #296]	; (8006ab8 <bootloaderUpdateCommand+0x14c>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	494a      	ldr	r1, [pc, #296]	; (8006abc <bootloaderUpdateCommand+0x150>)
 8006994:	f00b fb25 	bl	8011fe2 <strncmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	d137      	bne.n	8006a0c <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800699c:	4a48      	ldr	r2, [pc, #288]	; (8006ac0 <bootloaderUpdateCommand+0x154>)
 800699e:	2102      	movs	r1, #2
 80069a0:	0038      	movs	r0, r7
 80069a2:	f006 f8b5 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <bootloaderUpdateCommand+0x158>)
 80069a8:	4698      	mov	r8, r3
 80069aa:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80069ac:	4a46      	ldr	r2, [pc, #280]	; (8006ac8 <bootloaderUpdateCommand+0x15c>)
 80069ae:	2103      	movs	r1, #3
 80069b0:	0038      	movs	r0, r7
 80069b2:	f006 f8ad 	bl	800cb10 <FreeRTOS_CLIGetParameter>
 80069b6:	4b45      	ldr	r3, [pc, #276]	; (8006acc <bootloaderUpdateCommand+0x160>)
 80069b8:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 80069ba:	4643      	mov	r3, r8
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 80069c2:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 80069c4:	2b23      	cmp	r3, #35	; 0x23
 80069c6:	d057      	beq.n	8006a78 <bootloaderUpdateCommand+0x10c>
			if (pcParameterString3[0] == 'p') {
 80069c8:	4b40      	ldr	r3, [pc, #256]	; (8006acc <bootloaderUpdateCommand+0x160>)
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	2300      	movs	r3, #0
 80069ce:	56c3      	ldrsb	r3, [r0, r3]
 80069d0:	2b70      	cmp	r3, #112	; 0x70
 80069d2:	d057      	beq.n	8006a84 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 80069d4:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 80069d6:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <bootloaderUpdateCommand+0x164>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	42b3      	cmp	r3, r6
 80069dc:	d057      	beq.n	8006a8e <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 80069de:	4b3d      	ldr	r3, [pc, #244]	; (8006ad4 <bootloaderUpdateCommand+0x168>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 80069e4:	4b3c      	ldr	r3, [pc, #240]	; (8006ad8 <bootloaderUpdateCommand+0x16c>)
 80069e6:	701d      	strb	r5, [r3, #0]
 80069e8:	3201      	adds	r2, #1
 80069ea:	211a      	movs	r1, #26
 80069ec:	0030      	movs	r0, r6
 80069ee:	f002 f83f 	bl	8008a70 <SendMessageToModule>
				osDelay(100);			
 80069f2:	2064      	movs	r0, #100	; 0x64
 80069f4:	f005 ff65 	bl	800c8c2 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 80069f8:	4b38      	ldr	r3, [pc, #224]	; (8006adc <bootloaderUpdateCommand+0x170>)
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <bootloaderUpdateCommand+0x164>)
 80069fe:	7818      	ldrb	r0, [r3, #0]
 8006a00:	002b      	movs	r3, r5
 8006a02:	0031      	movs	r1, r6
 8006a04:	f7fc fe0c 	bl	8003620 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006a08:	2f68      	cmp	r7, #104	; 0x68
 8006a0a:	d104      	bne.n	8006a16 <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8006a0c:	220f      	movs	r2, #15
 8006a0e:	4934      	ldr	r1, [pc, #208]	; (8006ae0 <bootloaderUpdateCommand+0x174>)
 8006a10:	0020      	movs	r0, r4
 8006a12:	f00b f8a5 	bl	8011b60 <memcpy>
}
 8006a16:	2000      	movs	r0, #0
 8006a18:	b002      	add	sp, #8
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	46b8      	mov	r8, r7
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006a20:	b672      	cpsid	i
 8006a22:	e7fe      	b.n	8006a22 <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8006a24:	4b2a      	ldr	r3, [pc, #168]	; (8006ad0 <bootloaderUpdateCommand+0x164>)
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	492e      	ldr	r1, [pc, #184]	; (8006ae4 <bootloaderUpdateCommand+0x178>)
 8006a2a:	0020      	movs	r0, r4
 8006a2c:	f00b fa96 	bl	8011f5c <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006a30:	4b2d      	ldr	r3, [pc, #180]	; (8006ae8 <bootloaderUpdateCommand+0x17c>)
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	0020      	movs	r0, r4
 8006a36:	f00b fab1 	bl	8011f9c <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	f7f9 fb6c 	bl	8000118 <strlen>
 8006a40:	b282      	uxth	r2, r0
 8006a42:	4b26      	ldr	r3, [pc, #152]	; (8006adc <bootloaderUpdateCommand+0x170>)
 8006a44:	7818      	ldrb	r0, [r3, #0]
 8006a46:	2301      	movs	r3, #1
 8006a48:	425b      	negs	r3, r3
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	3333      	adds	r3, #51	; 0x33
 8006a4e:	0021      	movs	r1, r4
 8006a50:	f005 fe08 	bl	800c664 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <bootloaderUpdateCommand+0x180>)
 8006a56:	4a26      	ldr	r2, [pc, #152]	; (8006af0 <bootloaderUpdateCommand+0x184>)
 8006a58:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006a5a:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <bootloaderUpdateCommand+0x188>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006a60:	200a      	movs	r0, #10
 8006a62:	f005 ff2e 	bl	800c8c2 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <bootloaderUpdateCommand+0x18c>)
 8006a6c:	4a23      	ldr	r2, [pc, #140]	; (8006afc <bootloaderUpdateCommand+0x190>)
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006a74:	46c0      	nop			; (mov r8, r8)
 8006a76:	e7fd      	b.n	8006a74 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f00a fe10 	bl	801169e <atol>
 8006a7e:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006a80:	2700      	movs	r7, #0
 8006a82:	e7a1      	b.n	80069c8 <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006a84:	3001      	adds	r0, #1
 8006a86:	f00a fe0a 	bl	801169e <atol>
 8006a8a:	b2c5      	uxtb	r5, r0
 8006a8c:	e7a3      	b.n	80069d6 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	3319      	adds	r3, #25
 8006a94:	2200      	movs	r2, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	0028      	movs	r0, r5
 8006a9a:	f001 fdc1 	bl	8008620 <SendMessageFromPort>
				osDelay(100);
 8006a9e:	2064      	movs	r0, #100	; 0x64
 8006aa0:	f005 ff0f 	bl	800c8c2 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <bootloaderUpdateCommand+0x164>)
 8006aa6:	7818      	ldrb	r0, [r3, #0]
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <bootloaderUpdateCommand+0x170>)
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	002b      	movs	r3, r5
 8006aae:	0001      	movs	r1, r0
 8006ab0:	f7fc fdb6 	bl	8003620 <remoteBootloaderUpdate>
 8006ab4:	e7a8      	b.n	8006a08 <bootloaderUpdateCommand+0x9c>
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	20000f5c 	.word	0x20000f5c
 8006abc:	080193a0 	.word	0x080193a0
 8006ac0:	20000f68 	.word	0x20000f68
 8006ac4:	20000f40 	.word	0x20000f40
 8006ac8:	20000f6c 	.word	0x20000f6c
 8006acc:	20000f48 	.word	0x20000f48
 8006ad0:	20000070 	.word	0x20000070
 8006ad4:	20006600 	.word	0x20006600
 8006ad8:	20000d14 	.word	0x20000d14
 8006adc:	20000ad7 	.word	0x20000ad7
 8006ae0:	08018e28 	.word	0x08018e28
 8006ae4:	08019380 	.word	0x08019380
 8006ae8:	20000094 	.word	0x20000094
 8006aec:	20007ff0 	.word	0x20007ff0
 8006af0:	deadbeef 	.word	0xdeadbeef
 8006af4:	20000cd0 	.word	0x20000cd0
 8006af8:	e000ed00 	.word	0xe000ed00
 8006afc:	05fa0004 	.word	0x05fa0004

08006b00 <pingCommand>:
{
 8006b00:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d01e      	beq.n	8006b44 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8006b06:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <pingCommand+0x5c>)
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	0093      	lsls	r3, r2, #2
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	4913      	ldr	r1, [pc, #76]	; (8006b60 <pingCommand+0x60>)
 8006b12:	5c5b      	ldrb	r3, [r3, r1]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d117      	bne.n	8006b48 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8006b18:	4912      	ldr	r1, [pc, #72]	; (8006b64 <pingCommand+0x64>)
 8006b1a:	f00b fa1f 	bl	8011f5c <sprintf>
	RTOS_IND_blink(200);	
 8006b1e:	2580      	movs	r5, #128	; 0x80
 8006b20:	012d      	lsls	r5, r5, #4
 8006b22:	2490      	movs	r4, #144	; 0x90
 8006b24:	05e4      	lsls	r4, r4, #23
 8006b26:	2201      	movs	r2, #1
 8006b28:	0029      	movs	r1, r5
 8006b2a:	0020      	movs	r0, r4
 8006b2c:	f009 f81e 	bl	800fb6c <HAL_GPIO_WritePin>
 8006b30:	20c8      	movs	r0, #200	; 0xc8
 8006b32:	f005 fec6 	bl	800c8c2 <osDelay>
 8006b36:	2200      	movs	r2, #0
 8006b38:	0029      	movs	r1, r5
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	f009 f816 	bl	800fb6c <HAL_GPIO_WritePin>
}
 8006b40:	2000      	movs	r0, #0
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006b44:	b672      	cpsid	i
 8006b46:	e7fe      	b.n	8006b46 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8006b48:	0093      	lsls	r3, r2, #2
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	4904      	ldr	r1, [pc, #16]	; (8006b60 <pingCommand+0x60>)
 8006b50:	185b      	adds	r3, r3, r1
 8006b52:	4905      	ldr	r1, [pc, #20]	; (8006b68 <pingCommand+0x68>)
 8006b54:	f00b fa02 	bl	8011f5c <sprintf>
 8006b58:	e7e1      	b.n	8006b1e <pingCommand+0x1e>
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	20000070 	.word	0x20000070
 8006b60:	20000d44 	.word	0x20000d44
 8006b64:	080193a4 	.word	0x080193a4
 8006b68:	080193b8 	.word	0x080193b8

08006b6c <prvRunTimeStatsCommand>:
{
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006b70:	d009      	beq.n	8006b86 <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8006b72:	2251      	movs	r2, #81	; 0x51
 8006b74:	4905      	ldr	r1, [pc, #20]	; (8006b8c <prvRunTimeStatsCommand+0x20>)
 8006b76:	f00a fff3 	bl	8011b60 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	3050      	adds	r0, #80	; 0x50
 8006b7e:	f007 fa4d 	bl	800e01c <vTaskGetRunTimeStats>
}
 8006b82:	2000      	movs	r0, #0
 8006b84:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006b86:	b672      	cpsid	i
 8006b88:	e7fe      	b.n	8006b88 <prvRunTimeStatsCommand+0x1c>
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	080193d4 	.word	0x080193d4

08006b90 <prvTaskStatsCommand>:
{
 8006b90:	b510      	push	{r4, lr}
 8006b92:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006b94:	d009      	beq.n	8006baa <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 8006b96:	225b      	movs	r2, #91	; 0x5b
 8006b98:	4905      	ldr	r1, [pc, #20]	; (8006bb0 <prvTaskStatsCommand+0x20>)
 8006b9a:	f00a ffe1 	bl	8011b60 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 8006b9e:	0020      	movs	r0, r4
 8006ba0:	305a      	adds	r0, #90	; 0x5a
 8006ba2:	f007 f9cd 	bl	800df40 <vTaskList>
}
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006baa:	b672      	cpsid	i
 8006bac:	e7fe      	b.n	8006bac <prvTaskStatsCommand+0x1c>
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	08019428 	.word	0x08019428

08006bb4 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d008      	beq.n	8006bca <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <resetCommand+0x1c>)
 8006bbe:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <resetCommand+0x20>)
 8006bc0:	60da      	str	r2, [r3, #12]
 8006bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	e7fd      	b.n	8006bc6 <resetCommand+0x12>
 8006bca:	b672      	cpsid	i
 8006bcc:	e7fe      	b.n	8006bcc <resetCommand+0x18>
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	e000ed00 	.word	0xe000ed00
 8006bd4:	05fa0004 	.word	0x05fa0004

08006bd8 <RegisterUserCLICommands>:
}
 8006bd8:	4770      	bx	lr
	...

08006bdc <vRegisterCLICommands>:
{
 8006bdc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 8006bde:	482e      	ldr	r0, [pc, #184]	; (8006c98 <vRegisterCLICommands+0xbc>)
 8006be0:	f005 feec 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8006be4:	482d      	ldr	r0, [pc, #180]	; (8006c9c <vRegisterCLICommands+0xc0>)
 8006be6:	f005 fee9 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 8006bea:	482d      	ldr	r0, [pc, #180]	; (8006ca0 <vRegisterCLICommands+0xc4>)
 8006bec:	f005 fee6 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8006bf0:	482c      	ldr	r0, [pc, #176]	; (8006ca4 <vRegisterCLICommands+0xc8>)
 8006bf2:	f005 fee3 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 8006bf6:	482c      	ldr	r0, [pc, #176]	; (8006ca8 <vRegisterCLICommands+0xcc>)
 8006bf8:	f005 fee0 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8006bfc:	482b      	ldr	r0, [pc, #172]	; (8006cac <vRegisterCLICommands+0xd0>)
 8006bfe:	f005 fedd 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 8006c02:	482b      	ldr	r0, [pc, #172]	; (8006cb0 <vRegisterCLICommands+0xd4>)
 8006c04:	f005 feda 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 8006c08:	482a      	ldr	r0, [pc, #168]	; (8006cb4 <vRegisterCLICommands+0xd8>)
 8006c0a:	f005 fed7 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 8006c0e:	482a      	ldr	r0, [pc, #168]	; (8006cb8 <vRegisterCLICommands+0xdc>)
 8006c10:	f005 fed4 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 8006c14:	4829      	ldr	r0, [pc, #164]	; (8006cbc <vRegisterCLICommands+0xe0>)
 8006c16:	f005 fed1 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8006c1a:	4829      	ldr	r0, [pc, #164]	; (8006cc0 <vRegisterCLICommands+0xe4>)
 8006c1c:	f005 fece 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 8006c20:	4828      	ldr	r0, [pc, #160]	; (8006cc4 <vRegisterCLICommands+0xe8>)
 8006c22:	f005 fecb 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8006c26:	4828      	ldr	r0, [pc, #160]	; (8006cc8 <vRegisterCLICommands+0xec>)
 8006c28:	f005 fec8 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8006c2c:	4827      	ldr	r0, [pc, #156]	; (8006ccc <vRegisterCLICommands+0xf0>)
 8006c2e:	f005 fec5 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8006c32:	4827      	ldr	r0, [pc, #156]	; (8006cd0 <vRegisterCLICommands+0xf4>)
 8006c34:	f005 fec2 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8006c38:	4826      	ldr	r0, [pc, #152]	; (8006cd4 <vRegisterCLICommands+0xf8>)
 8006c3a:	f005 febf 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8006c3e:	4826      	ldr	r0, [pc, #152]	; (8006cd8 <vRegisterCLICommands+0xfc>)
 8006c40:	f005 febc 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8006c44:	4825      	ldr	r0, [pc, #148]	; (8006cdc <vRegisterCLICommands+0x100>)
 8006c46:	f005 feb9 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8006c4a:	4825      	ldr	r0, [pc, #148]	; (8006ce0 <vRegisterCLICommands+0x104>)
 8006c4c:	f005 feb6 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8006c50:	4824      	ldr	r0, [pc, #144]	; (8006ce4 <vRegisterCLICommands+0x108>)
 8006c52:	f005 feb3 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8006c56:	4824      	ldr	r0, [pc, #144]	; (8006ce8 <vRegisterCLICommands+0x10c>)
 8006c58:	f005 feb0 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8006c5c:	4823      	ldr	r0, [pc, #140]	; (8006cec <vRegisterCLICommands+0x110>)
 8006c5e:	f005 fead 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8006c62:	4823      	ldr	r0, [pc, #140]	; (8006cf0 <vRegisterCLICommands+0x114>)
 8006c64:	f005 feaa 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8006c68:	4822      	ldr	r0, [pc, #136]	; (8006cf4 <vRegisterCLICommands+0x118>)
 8006c6a:	f005 fea7 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8006c6e:	4822      	ldr	r0, [pc, #136]	; (8006cf8 <vRegisterCLICommands+0x11c>)
 8006c70:	f005 fea4 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8006c74:	4821      	ldr	r0, [pc, #132]	; (8006cfc <vRegisterCLICommands+0x120>)
 8006c76:	f005 fea1 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8006c7a:	4821      	ldr	r0, [pc, #132]	; (8006d00 <vRegisterCLICommands+0x124>)
 8006c7c:	f005 fe9e 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 8006c80:	4820      	ldr	r0, [pc, #128]	; (8006d04 <vRegisterCLICommands+0x128>)
 8006c82:	f005 fe9b 	bl	800c9bc <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 28;			// Add "help" command
 8006c86:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <vRegisterCLICommands+0x12c>)
 8006c88:	221c      	movs	r2, #28
 8006c8a:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8006c8c:	f003 fe2c 	bl	800a8e8 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8006c90:	f7ff ffa2 	bl	8006bd8 <RegisterUserCLICommands>
}
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	0801a2bc 	.word	0x0801a2bc
 8006c9c:	0801a2ac 	.word	0x0801a2ac
 8006ca0:	0801a29c 	.word	0x0801a29c
 8006ca4:	0801a1c8 	.word	0x0801a1c8
 8006ca8:	0801a2dc 	.word	0x0801a2dc
 8006cac:	0801a27c 	.word	0x0801a27c
 8006cb0:	0801a238 	.word	0x0801a238
 8006cb4:	0801a32c 	.word	0x0801a32c
 8006cb8:	0801a258 	.word	0x0801a258
 8006cbc:	0801a2ec 	.word	0x0801a2ec
 8006cc0:	0801a1b8 	.word	0x0801a1b8
 8006cc4:	0801a2cc 	.word	0x0801a2cc
 8006cc8:	0801a30c 	.word	0x0801a30c
 8006ccc:	0801a228 	.word	0x0801a228
 8006cd0:	0801a1f8 	.word	0x0801a1f8
 8006cd4:	0801a34c 	.word	0x0801a34c
 8006cd8:	0801a1e8 	.word	0x0801a1e8
 8006cdc:	0801a2fc 	.word	0x0801a2fc
 8006ce0:	0801a36c 	.word	0x0801a36c
 8006ce4:	0801a248 	.word	0x0801a248
 8006ce8:	0801a218 	.word	0x0801a218
 8006cec:	0801a31c 	.word	0x0801a31c
 8006cf0:	0801a1a8 	.word	0x0801a1a8
 8006cf4:	0801a28c 	.word	0x0801a28c
 8006cf8:	0801a208 	.word	0x0801a208
 8006cfc:	0801a1d8 	.word	0x0801a1d8
 8006d00:	0801a35c 	.word	0x0801a35c
 8006d04:	0801a33c 	.word	0x0801a33c
 8006d08:	20006584 	.word	0x20006584

08006d0c <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8006d0c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 8006d0e:	1e45      	subs	r5, r0, #1
 8006d10:	00ec      	lsls	r4, r5, #3
 8006d12:	1b60      	subs	r0, r4, r5
 8006d14:	00c0      	lsls	r0, r0, #3
 8006d16:	4e05      	ldr	r6, [pc, #20]	; (8006d2c <StopMsgDMA+0x20>)
 8006d18:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006d1a:	f008 f866 	bl	800edea <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006d1e:	1b64      	subs	r4, r4, r5
 8006d20:	00e4      	lsls	r4, r4, #3
 8006d22:	59a3      	ldr	r3, [r4, r6]
 8006d24:	2200      	movs	r2, #0
 8006d26:	605a      	str	r2, [r3, #4]
}
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	200013d8 	.word	0x200013d8

08006d30 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8006d30:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8006d32:	1e44      	subs	r4, r0, #1
 8006d34:	00e5      	lsls	r5, r4, #3
 8006d36:	1b28      	subs	r0, r5, r4
 8006d38:	00c0      	lsls	r0, r0, #3
 8006d3a:	4e07      	ldr	r6, [pc, #28]	; (8006d58 <StopStreamDMA+0x28>)
 8006d3c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006d3e:	f008 f854 	bl	800edea <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006d42:	1b2d      	subs	r5, r5, r4
 8006d44:	00ed      	lsls	r5, r5, #3
 8006d46:	59aa      	ldr	r2, [r5, r6]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8006d4c:	00a4      	lsls	r4, r4, #2
 8006d4e:	4a03      	ldr	r2, [pc, #12]	; (8006d5c <StopStreamDMA+0x2c>)
 8006d50:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8006d52:	4a03      	ldr	r2, [pc, #12]	; (8006d60 <StopStreamDMA+0x30>)
 8006d54:	50a3      	str	r3, [r4, r2]

}
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	200015d0 	.word	0x200015d0
 8006d5c:	20001138 	.word	0x20001138
 8006d60:	20001168 	.word	0x20001168

08006d64 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8006d64:	b510      	push	{r4, lr}
 8006d66:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8006d68:	f7ff ffd0 	bl	8006d0c <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8006d6c:	3c01      	subs	r4, #1
 8006d6e:	00e0      	lsls	r0, r4, #3
 8006d70:	1b02      	subs	r2, r0, r4
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	4903      	ldr	r1, [pc, #12]	; (8006d84 <SwitchMsgDMAToStream+0x20>)
 8006d76:	5851      	ldr	r1, [r2, r1]
 8006d78:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <SwitchMsgDMAToStream+0x24>)
 8006d7a:	18d0      	adds	r0, r2, r3
 8006d7c:	f003 fe64 	bl	800aa48 <DMA_STREAM_CH_Init>
}
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	200013d8 	.word	0x200013d8
 8006d88:	200015d0 	.word	0x200015d0

08006d8c <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8006d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8e:	46c6      	mov	lr, r8
 8006d90:	b500      	push	{lr}
 8006d92:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8006d94:	f7ff ffcc 	bl	8006d30 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8006d98:	1e7c      	subs	r4, r7, #1
 8006d9a:	00e5      	lsls	r5, r4, #3
 8006d9c:	1b2e      	subs	r6, r5, r4
 8006d9e:	00f6      	lsls	r6, r6, #3
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <SwitchStreamDMAToMsg+0x5c>)
 8006da2:	18f6      	adds	r6, r6, r3
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <SwitchStreamDMAToMsg+0x60>)
 8006da6:	4698      	mov	r8, r3
 8006da8:	1b2b      	subs	r3, r5, r4
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4642      	mov	r2, r8
 8006dae:	5899      	ldr	r1, [r3, r2]
 8006db0:	0030      	movs	r0, r6
 8006db2:	f003 fdcb 	bl	800a94c <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 8006db6:	1b2b      	subs	r3, r5, r4
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4443      	add	r3, r8
 8006dbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006dbe:	f003 fd95 	bl	800a8ec <GetPort>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4a0a      	ldr	r2, [pc, #40]	; (8006df0 <SwitchStreamDMAToMsg+0x64>)
 8006dc6:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8006dc8:	1b2d      	subs	r5, r5, r4
 8006dca:	00ed      	lsls	r5, r5, #3
 8006dcc:	4642      	mov	r2, r8
 8006dce:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8006dd0:	00a4      	lsls	r4, r4, #2
 8006dd2:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <SwitchStreamDMAToMsg+0x68>)
 8006dd4:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 8006dd6:	0038      	movs	r0, r7
 8006dd8:	f005 fc22 	bl	800c620 <GetUart>
 8006ddc:	0031      	movs	r1, r6
 8006dde:	f004 fa2d 	bl	800b23c <DMA_MSG_RX_Setup>
		
}
 8006de2:	bc80      	pop	{r7}
 8006de4:	46b8      	mov	r8, r7
 8006de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de8:	200013d8 	.word	0x200013d8
 8006dec:	200015d0 	.word	0x200015d0
 8006df0:	20000dcc 	.word	0x20000dcc
 8006df4:	20001150 	.word	0x20001150

08006df8 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	0005      	movs	r5, r0
 8006dfc:	000e      	movs	r6, r1
 8006dfe:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8006e00:	f003 fd74 	bl	800a8ec <GetPort>
 8006e04:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <StartDMAstream+0x44>)
 8006e08:	5c1b      	ldrb	r3, [r3, r0]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d902      	bls.n	8006e14 <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8006e0e:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d112      	bne.n	8006e3a <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8006e14:	0020      	movs	r0, r4
 8006e16:	f7ff ffa5 	bl	8006d64 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8006e1a:	1e63      	subs	r3, r4, #1
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <StartDMAstream+0x48>)
 8006e20:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 8006e22:	4a06      	ldr	r2, [pc, #24]	; (8006e3c <StartDMAstream+0x44>)
 8006e24:	2102      	movs	r1, #2
 8006e26:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8006e28:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <StartDMAstream+0x4c>)
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8006e2e:	003a      	movs	r2, r7
 8006e30:	0031      	movs	r1, r6
 8006e32:	0028      	movs	r0, r5
 8006e34:	f004 fa6c 	bl	800b310 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8006e38:	2000      	movs	r0, #0
}
 8006e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e3c:	20000dcc 	.word	0x20000dcc
 8006e40:	20001150 	.word	0x20001150
 8006e44:	20001138 	.word	0x20001138

08006e48 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <DMA_IRQHandler+0x50>)
 8006e4e:	5c1b      	ldrb	r3, [r3, r0]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d008      	beq.n	8006e66 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 8006e54:	3c01      	subs	r4, #1
 8006e56:	00e0      	lsls	r0, r4, #3
 8006e58:	1b00      	subs	r0, r0, r4
 8006e5a:	00c0      	lsls	r0, r0, #3
 8006e5c:	4c0f      	ldr	r4, [pc, #60]	; (8006e9c <DMA_IRQHandler+0x54>)
 8006e5e:	1900      	adds	r0, r0, r4
 8006e60:	f007 ffec 	bl	800ee3c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 8006e66:	1e45      	subs	r5, r0, #1
 8006e68:	00e8      	lsls	r0, r5, #3
 8006e6a:	1b40      	subs	r0, r0, r5
 8006e6c:	00c0      	lsls	r0, r0, #3
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <DMA_IRQHandler+0x58>)
 8006e70:	18c0      	adds	r0, r0, r3
 8006e72:	f007 ffe3 	bl	800ee3c <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 8006e76:	00aa      	lsls	r2, r5, #2
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <DMA_IRQHandler+0x5c>)
 8006e7a:	58d2      	ldr	r2, [r2, r3]
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d006      	beq.n	8006e8e <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8006e80:	4909      	ldr	r1, [pc, #36]	; (8006ea8 <DMA_IRQHandler+0x60>)
 8006e82:	00ad      	lsls	r5, r5, #2
 8006e84:	586b      	ldr	r3, [r5, r1]
 8006e86:	3301      	adds	r3, #1
 8006e88:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d8ea      	bhi.n	8006e64 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8006e8e:	0020      	movs	r0, r4
 8006e90:	f7ff ff4e 	bl	8006d30 <StopStreamDMA>
}
 8006e94:	e7e6      	b.n	8006e64 <DMA_IRQHandler+0x1c>
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	20000dcc 	.word	0x20000dcc
 8006e9c:	200013d8 	.word	0x200013d8
 8006ea0:	200015d0 	.word	0x200015d0
 8006ea4:	20001168 	.word	0x20001168
 8006ea8:	20001138 	.word	0x20001138

08006eac <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <ResetUartORE+0x28>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8006eb4:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <ResetUartORE+0x2c>)
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8006eba:	4a08      	ldr	r2, [pc, #32]	; (8006edc <ResetUartORE+0x30>)
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8006ec0:	4a07      	ldr	r2, [pc, #28]	; (8006ee0 <ResetUartORE+0x34>)
 8006ec2:	6812      	ldr	r2, [r2, #0]
 8006ec4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8006ec6:	4a07      	ldr	r2, [pc, #28]	; (8006ee4 <ResetUartORE+0x38>)
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8006ecc:	4a06      	ldr	r2, [pc, #24]	; (8006ee8 <ResetUartORE+0x3c>)
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	6213      	str	r3, [r2, #32]
#endif
}
 8006ed2:	4770      	bx	lr
 8006ed4:	2000679c 	.word	0x2000679c
 8006ed8:	200068ec 	.word	0x200068ec
 8006edc:	200066bc 	.word	0x200066bc
 8006ee0:	2000687c 	.word	0x2000687c
 8006ee4:	2000672c 	.word	0x2000672c
 8006ee8:	2000680c 	.word	0x2000680c

08006eec <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	0006      	movs	r6, r0
 8006ef0:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8006ef2:	f008 fc13 	bl	800f71c <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8006ef6:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <EE_VerifyPageFullWriteVariable+0xb4>)
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 8006f06:	4928      	ldr	r1, [pc, #160]	; (8006fa8 <EE_VerifyPageFullWriteVariable+0xbc>)
 8006f08:	428a      	cmp	r2, r1
 8006f0a:	d007      	beq.n	8006f1c <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	e005      	b.n	8006f1c <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d140      	bne.n	8006f96 <EE_VerifyPageFullWriteVariable+0xaa>
        if (PageStatusB == RECEIVE_DATA)
 8006f14:	4924      	ldr	r1, [pc, #144]	; (8006fa8 <EE_VerifyPageFullWriteVariable+0xbc>)
 8006f16:	428b      	cmp	r3, r1
 8006f18:	d03f      	beq.n	8006f9a <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEA;         /* PageA valid */
 8006f1a:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <EE_VerifyPageFullWriteVariable+0xc0>)
 8006f1e:	189c      	adds	r4, r3, r2
 8006f20:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8006f22:	02db      	lsls	r3, r3, #11
 8006f24:	4a22      	ldr	r2, [pc, #136]	; (8006fb0 <EE_VerifyPageFullWriteVariable+0xc4>)
 8006f26:	4694      	mov	ip, r2
 8006f28:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	3201      	adds	r2, #1
 8006f2e:	d006      	beq.n	8006f3e <EE_VerifyPageFullWriteVariable+0x52>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8006f30:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d3f9      	bcc.n	8006f2a <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }
	
	HAL_FLASH_Lock();
 8006f36:	f008 fc05 	bl	800f744 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8006f3a:	2080      	movs	r0, #128	; 0x80
}
 8006f3c:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8006f3e:	002a      	movs	r2, r5
 8006f40:	2300      	movs	r3, #0
 8006f42:	0021      	movs	r1, r4
 8006f44:	2001      	movs	r0, #1
 8006f46:	f008 fc35 	bl	800f7b4 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f4a:	481a      	ldr	r0, [pc, #104]	; (8006fb4 <EE_VerifyPageFullWriteVariable+0xc8>)
 8006f4c:	f008 fc04 	bl	800f758 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d003      	beq.n	8006f5c <EE_VerifyPageFullWriteVariable+0x70>
        return pFlash.ErrorCode;
 8006f54:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <EE_VerifyPageFullWriteVariable+0xcc>)
 8006f56:	69d8      	ldr	r0, [r3, #28]
 8006f58:	b280      	uxth	r0, r0
 8006f5a:	e7ef      	b.n	8006f3c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006f5c:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <EE_VerifyPageFullWriteVariable+0xd0>)
 8006f5e:	6913      	ldr	r3, [r2, #16]
 8006f60:	2101      	movs	r1, #1
 8006f62:	438b      	bics	r3, r1
 8006f64:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8006f66:	1ca1      	adds	r1, r4, #2
 8006f68:	0032      	movs	r2, r6
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	f008 fc21 	bl	800f7b4 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f72:	4810      	ldr	r0, [pc, #64]	; (8006fb4 <EE_VerifyPageFullWriteVariable+0xc8>)
 8006f74:	f008 fbf0 	bl	800f758 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d003      	beq.n	8006f84 <EE_VerifyPageFullWriteVariable+0x98>
        return pFlash.ErrorCode;
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <EE_VerifyPageFullWriteVariable+0xcc>)
 8006f7e:	69d8      	ldr	r0, [r3, #28]
 8006f80:	b280      	uxth	r0, r0
 8006f82:	e7db      	b.n	8006f3c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006f84:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <EE_VerifyPageFullWriteVariable+0xd0>)
 8006f86:	6913      	ldr	r3, [r2, #16]
 8006f88:	2101      	movs	r1, #1
 8006f8a:	438b      	bics	r3, r1
 8006f8c:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <EE_VerifyPageFullWriteVariable+0xcc>)
 8006f90:	69d8      	ldr	r0, [r3, #28]
 8006f92:	b280      	uxth	r0, r0
 8006f94:	e7d2      	b.n	8006f3c <EE_VerifyPageFullWriteVariable+0x50>
    return  NO_VALID_PAGE;
 8006f96:	20ab      	movs	r0, #171	; 0xab
 8006f98:	e7d0      	b.n	8006f3c <EE_VerifyPageFullWriteVariable+0x50>
          return PAGEB;         /* PageB valid */
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e7be      	b.n	8006f1c <EE_VerifyPageFullWriteVariable+0x30>
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	0801e000 	.word	0x0801e000
 8006fa4:	0801f000 	.word	0x0801f000
 8006fa8:	0000eeee 	.word	0x0000eeee
 8006fac:	0001003c 	.word	0x0001003c
 8006fb0:	0801effe 	.word	0x0801effe
 8006fb4:	0000c350 	.word	0x0000c350
 8006fb8:	20006a60 	.word	0x20006a60
 8006fbc:	40022000 	.word	0x40022000

08006fc0 <EE_ReadVariable>:
{
 8006fc0:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <EE_ReadVariable+0x48>)
 8006fc4:	881c      	ldrh	r4, [r3, #0]
 8006fc6:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8006fc8:	4b10      	ldr	r3, [pc, #64]	; (800700c <EE_ReadVariable+0x4c>)
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8006fce:	2c00      	cmp	r4, #0
 8006fd0:	d009      	beq.n	8006fe6 <EE_ReadVariable+0x26>
      else if (PageStatusB == VALID_PAGE)
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d006      	beq.n	8006fe4 <EE_ReadVariable+0x24>
    return  NO_VALID_PAGE;
 8006fd6:	20ab      	movs	r0, #171	; 0xab
 8006fd8:	e003      	b.n	8006fe2 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 8006fda:	3b02      	subs	r3, #2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8006fe0:	2000      	movs	r0, #0
}
 8006fe2:	bd10      	pop	{r4, pc}
        return PAGEB;           /* PageB valid */
 8006fe4:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8006fe6:	02e3      	lsls	r3, r4, #11
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <EE_ReadVariable+0x50>)
 8006fea:	4694      	mov	ip, r2
 8006fec:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8006fee:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 8006ff0:	4a08      	ldr	r2, [pc, #32]	; (8007014 <EE_ReadVariable+0x54>)
 8006ff2:	4694      	mov	ip, r2
 8006ff4:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 8006ff6:	881a      	ldrh	r2, [r3, #0]
 8006ff8:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8006ffa:	4282      	cmp	r2, r0
 8006ffc:	d0ed      	beq.n	8006fda <EE_ReadVariable+0x1a>
      Address = Address - 4;
 8006ffe:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 8007000:	42a3      	cmp	r3, r4
 8007002:	d8f8      	bhi.n	8006ff6 <EE_ReadVariable+0x36>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8007004:	2001      	movs	r0, #1
 8007006:	e7ec      	b.n	8006fe2 <EE_ReadVariable+0x22>
 8007008:	0801e000 	.word	0x0801e000
 800700c:	0801f000 	.word	0x0801f000
 8007010:	0801effe 	.word	0x0801effe
 8007014:	0801e002 	.word	0x0801e002

08007018 <EE_WriteVariable>:
{
 8007018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701a:	46de      	mov	lr, fp
 800701c:	4657      	mov	r7, sl
 800701e:	464e      	mov	r6, r9
 8007020:	4645      	mov	r5, r8
 8007022:	b5e0      	push	{r5, r6, r7, lr}
 8007024:	b083      	sub	sp, #12
 8007026:	0006      	movs	r6, r0
 8007028:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 800702a:	f008 fb77 	bl	800f71c <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800702e:	0029      	movs	r1, r5
 8007030:	0030      	movs	r0, r6
 8007032:	f7ff ff5b 	bl	8006eec <EE_VerifyPageFullWriteVariable>
 8007036:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007038:	2880      	cmp	r0, #128	; 0x80
 800703a:	d009      	beq.n	8007050 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 800703c:	f008 fb82 	bl	800f744 <HAL_FLASH_Lock>
}
 8007040:	0020      	movs	r0, r4
 8007042:	b003      	add	sp, #12
 8007044:	bcf0      	pop	{r4, r5, r6, r7}
 8007046:	46bb      	mov	fp, r7
 8007048:	46b2      	mov	sl, r6
 800704a:	46a9      	mov	r9, r5
 800704c:	46a0      	mov	r8, r4
 800704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007050:	f008 fb64 	bl	800f71c <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007054:	4b40      	ldr	r3, [pc, #256]	; (8007158 <EE_WriteVariable+0x140>)
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800705a:	4a40      	ldr	r2, [pc, #256]	; (800715c <EE_WriteVariable+0x144>)
 800705c:	8812      	ldrh	r2, [r2, #0]
 800705e:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007060:	2b00      	cmp	r3, #0
 8007062:	d007      	beq.n	8007074 <EE_WriteVariable+0x5c>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8007064:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 8007066:	2a00      	cmp	r2, #0
 8007068:	d1e8      	bne.n	800703c <EE_WriteVariable+0x24>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 800706a:	4b3c      	ldr	r3, [pc, #240]	; (800715c <EE_WriteVariable+0x144>)
 800706c:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 800706e:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <EE_WriteVariable+0x140>)
 8007070:	469a      	mov	sl, r3
 8007072:	e003      	b.n	800707c <EE_WriteVariable+0x64>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007074:	4b38      	ldr	r3, [pc, #224]	; (8007158 <EE_WriteVariable+0x140>)
 8007076:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007078:	4b38      	ldr	r3, [pc, #224]	; (800715c <EE_WriteVariable+0x144>)
 800707a:	469a      	mov	sl, r3
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800707c:	4a38      	ldr	r2, [pc, #224]	; (8007160 <EE_WriteVariable+0x148>)
 800707e:	2300      	movs	r3, #0
 8007080:	4651      	mov	r1, sl
 8007082:	2001      	movs	r0, #1
 8007084:	f008 fb96 	bl	800f7b4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007088:	4836      	ldr	r0, [pc, #216]	; (8007164 <EE_WriteVariable+0x14c>)
 800708a:	f008 fb65 	bl	800f758 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800708e:	2800      	cmp	r0, #0
 8007090:	d003      	beq.n	800709a <EE_WriteVariable+0x82>
  {
    return pFlash.ErrorCode;
 8007092:	4b35      	ldr	r3, [pc, #212]	; (8007168 <EE_WriteVariable+0x150>)
 8007094:	69dc      	ldr	r4, [r3, #28]
 8007096:	b2a4      	uxth	r4, r4
 8007098:	e7d0      	b.n	800703c <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800709a:	4a34      	ldr	r2, [pc, #208]	; (800716c <EE_WriteVariable+0x154>)
 800709c:	6913      	ldr	r3, [r2, #16]
 800709e:	2101      	movs	r1, #1
 80070a0:	438b      	bics	r3, r1
 80070a2:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80070a4:	0029      	movs	r1, r5
 80070a6:	0030      	movs	r0, r6
 80070a8:	f7ff ff20 	bl	8006eec <EE_VerifyPageFullWriteVariable>
 80070ac:	9001      	str	r0, [sp, #4]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d150      	bne.n	8007154 <EE_WriteVariable+0x13c>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80070b2:	2501      	movs	r5, #1
  {
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80070b4:	4b2e      	ldr	r3, [pc, #184]	; (8007170 <EE_WriteVariable+0x158>)
 80070b6:	4698      	mov	r8, r3
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80070b8:	4699      	mov	r9, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80070ba:	4f2e      	ldr	r7, [pc, #184]	; (8007174 <EE_WriteVariable+0x15c>)
 80070bc:	e003      	b.n	80070c6 <EE_WriteVariable+0xae>
 80070be:	3501      	adds	r5, #1
 80070c0:	b2ad      	uxth	r5, r5
 80070c2:	42bd      	cmp	r5, r7
 80070c4:	d00f      	beq.n	80070e6 <EE_WriteVariable+0xce>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 80070c6:	42ae      	cmp	r6, r5
 80070c8:	d0f9      	beq.n	80070be <EE_WriteVariable+0xa6>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80070ca:	4641      	mov	r1, r8
 80070cc:	0028      	movs	r0, r5
 80070ce:	f7ff ff77 	bl	8006fc0 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 80070d2:	2801      	cmp	r0, #1
 80070d4:	d0f3      	beq.n	80070be <EE_WriteVariable+0xa6>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80070d6:	464b      	mov	r3, r9
 80070d8:	8819      	ldrh	r1, [r3, #0]
 80070da:	0028      	movs	r0, r5
 80070dc:	f7ff ff06 	bl	8006eec <EE_VerifyPageFullWriteVariable>
 80070e0:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80070e2:	d0ec      	beq.n	80070be <EE_WriteVariable+0xa6>
 80070e4:	e7aa      	b.n	800703c <EE_WriteVariable+0x24>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 80070e6:	4658      	mov	r0, fp
 80070e8:	f008 fbdc 	bl	800f8a4 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070ec:	481d      	ldr	r0, [pc, #116]	; (8007164 <EE_WriteVariable+0x14c>)
 80070ee:	f008 fb33 	bl	800f758 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d003      	beq.n	80070fe <EE_WriteVariable+0xe6>
  {
    return pFlash.ErrorCode;
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <EE_WriteVariable+0x150>)
 80070f8:	69dc      	ldr	r4, [r3, #28]
 80070fa:	b2a4      	uxth	r4, r4
 80070fc:	e79e      	b.n	800703c <EE_WriteVariable+0x24>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80070fe:	2080      	movs	r0, #128	; 0x80
 8007100:	0100      	lsls	r0, r0, #4
 8007102:	4458      	add	r0, fp
 8007104:	f008 fbce 	bl	800f8a4 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007108:	4816      	ldr	r0, [pc, #88]	; (8007164 <EE_WriteVariable+0x14c>)
 800710a:	f008 fb25 	bl	800f758 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 800710e:	2800      	cmp	r0, #0
 8007110:	d003      	beq.n	800711a <EE_WriteVariable+0x102>
		{
			return pFlash.ErrorCode;
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <EE_WriteVariable+0x150>)
 8007114:	69dc      	ldr	r4, [r3, #28]
 8007116:	b2a4      	uxth	r4, r4
 8007118:	e790      	b.n	800703c <EE_WriteVariable+0x24>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800711a:	4a14      	ldr	r2, [pc, #80]	; (800716c <EE_WriteVariable+0x154>)
 800711c:	6913      	ldr	r3, [r2, #16]
 800711e:	2102      	movs	r1, #2
 8007120:	438b      	bics	r3, r1
 8007122:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	4651      	mov	r1, sl
 800712a:	2001      	movs	r0, #1
 800712c:	f008 fb42 	bl	800f7b4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007130:	480c      	ldr	r0, [pc, #48]	; (8007164 <EE_WriteVariable+0x14c>)
 8007132:	f008 fb11 	bl	800f758 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007136:	2800      	cmp	r0, #0
 8007138:	d003      	beq.n	8007142 <EE_WriteVariable+0x12a>
  {
    return pFlash.ErrorCode;
 800713a:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <EE_WriteVariable+0x150>)
 800713c:	69dc      	ldr	r4, [r3, #28]
 800713e:	b2a4      	uxth	r4, r4
 8007140:	e77c      	b.n	800703c <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <EE_WriteVariable+0x154>)
 8007144:	6913      	ldr	r3, [r2, #16]
 8007146:	2101      	movs	r1, #1
 8007148:	438b      	bics	r3, r1
 800714a:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 800714c:	f008 fafa 	bl	800f744 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007150:	9c01      	ldr	r4, [sp, #4]
 8007152:	e773      	b.n	800703c <EE_WriteVariable+0x24>
    return EepromStatus;
 8007154:	9c01      	ldr	r4, [sp, #4]
 8007156:	e771      	b.n	800703c <EE_WriteVariable+0x24>
 8007158:	0801e000 	.word	0x0801e000
 800715c:	0801f000 	.word	0x0801f000
 8007160:	0000eeee 	.word	0x0000eeee
 8007164:	0000c350 	.word	0x0000c350
 8007168:	20006a60 	.word	0x20006a60
 800716c:	40022000 	.word	0x40022000
 8007170:	20001180 	.word	0x20001180
 8007174:	00000401 	.word	0x00000401

08007178 <EE_Format>:
{
 8007178:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800717a:	f008 facf 	bl	800f71c <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800717e:	4829      	ldr	r0, [pc, #164]	; (8007224 <EE_Format+0xac>)
 8007180:	f008 fb90 	bl	800f8a4 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007184:	4828      	ldr	r0, [pc, #160]	; (8007228 <EE_Format+0xb0>)
 8007186:	f008 fae7 	bl	800f758 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800718a:	2800      	cmp	r0, #0
 800718c:	d003      	beq.n	8007196 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800718e:	4b27      	ldr	r3, [pc, #156]	; (800722c <EE_Format+0xb4>)
 8007190:	69d8      	ldr	r0, [r3, #28]
 8007192:	b280      	uxth	r0, r0
}
 8007194:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007196:	4826      	ldr	r0, [pc, #152]	; (8007230 <EE_Format+0xb8>)
 8007198:	f008 fb84 	bl	800f8a4 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800719c:	4822      	ldr	r0, [pc, #136]	; (8007228 <EE_Format+0xb0>)
 800719e:	f008 fadb 	bl	800f758 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d003      	beq.n	80071ae <EE_Format+0x36>
			return pFlash.ErrorCode;
 80071a6:	4b21      	ldr	r3, [pc, #132]	; (800722c <EE_Format+0xb4>)
 80071a8:	69d8      	ldr	r0, [r3, #28]
 80071aa:	b280      	uxth	r0, r0
 80071ac:	e7f2      	b.n	8007194 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80071ae:	4a21      	ldr	r2, [pc, #132]	; (8007234 <EE_Format+0xbc>)
 80071b0:	6913      	ldr	r3, [r2, #16]
 80071b2:	2102      	movs	r1, #2
 80071b4:	438b      	bics	r3, r1
 80071b6:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4919      	ldr	r1, [pc, #100]	; (8007224 <EE_Format+0xac>)
 80071be:	2001      	movs	r0, #1
 80071c0:	f008 faf8 	bl	800f7b4 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071c4:	4818      	ldr	r0, [pc, #96]	; (8007228 <EE_Format+0xb0>)
 80071c6:	f008 fac7 	bl	800f758 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d003      	beq.n	80071d6 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 80071ce:	4b17      	ldr	r3, [pc, #92]	; (800722c <EE_Format+0xb4>)
 80071d0:	69d8      	ldr	r0, [r3, #28]
 80071d2:	b280      	uxth	r0, r0
 80071d4:	e7de      	b.n	8007194 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80071d6:	4a17      	ldr	r2, [pc, #92]	; (8007234 <EE_Format+0xbc>)
 80071d8:	6913      	ldr	r3, [r2, #16]
 80071da:	2101      	movs	r1, #1
 80071dc:	438b      	bics	r3, r1
 80071de:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80071e0:	4815      	ldr	r0, [pc, #84]	; (8007238 <EE_Format+0xc0>)
 80071e2:	f008 fb5f 	bl	800f8a4 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071e6:	4810      	ldr	r0, [pc, #64]	; (8007228 <EE_Format+0xb0>)
 80071e8:	f008 fab6 	bl	800f758 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d003      	beq.n	80071f8 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80071f0:	4b0e      	ldr	r3, [pc, #56]	; (800722c <EE_Format+0xb4>)
 80071f2:	69d8      	ldr	r0, [r3, #28]
 80071f4:	b280      	uxth	r0, r0
 80071f6:	e7cd      	b.n	8007194 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80071f8:	4810      	ldr	r0, [pc, #64]	; (800723c <EE_Format+0xc4>)
 80071fa:	f008 fb53 	bl	800f8a4 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071fe:	480a      	ldr	r0, [pc, #40]	; (8007228 <EE_Format+0xb0>)
 8007200:	f008 faaa 	bl	800f758 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007204:	2800      	cmp	r0, #0
 8007206:	d003      	beq.n	8007210 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007208:	4b08      	ldr	r3, [pc, #32]	; (800722c <EE_Format+0xb4>)
 800720a:	69d8      	ldr	r0, [r3, #28]
 800720c:	b280      	uxth	r0, r0
 800720e:	e7c1      	b.n	8007194 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007210:	4a08      	ldr	r2, [pc, #32]	; (8007234 <EE_Format+0xbc>)
 8007212:	6913      	ldr	r3, [r2, #16]
 8007214:	2101      	movs	r1, #1
 8007216:	438b      	bics	r3, r1
 8007218:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800721a:	f008 fa93 	bl	800f744 <HAL_FLASH_Lock>
  return FlashStatus;
 800721e:	2000      	movs	r0, #0
 8007220:	e7b8      	b.n	8007194 <EE_Format+0x1c>
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	0801e000 	.word	0x0801e000
 8007228:	0000c350 	.word	0x0000c350
 800722c:	20006a60 	.word	0x20006a60
 8007230:	0801e800 	.word	0x0801e800
 8007234:	40022000 	.word	0x40022000
 8007238:	0801f000 	.word	0x0801f000
 800723c:	0801f800 	.word	0x0801f800

08007240 <EE_Init>:
{
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	46ce      	mov	lr, r9
 8007244:	4647      	mov	r7, r8
 8007246:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 8007248:	f008 fa68 	bl	800f71c <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800724c:	4bbf      	ldr	r3, [pc, #764]	; (800754c <EE_Init+0x30c>)
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007252:	4abf      	ldr	r2, [pc, #764]	; (8007550 <EE_Init+0x310>)
 8007254:	8812      	ldrh	r2, [r2, #0]
 8007256:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007258:	49be      	ldr	r1, [pc, #760]	; (8007554 <EE_Init+0x314>)
 800725a:	428b      	cmp	r3, r1
 800725c:	d100      	bne.n	8007260 <EE_Init+0x20>
 800725e:	e075      	b.n	800734c <EE_Init+0x10c>
 8007260:	49bd      	ldr	r1, [pc, #756]	; (8007558 <EE_Init+0x318>)
 8007262:	428b      	cmp	r3, r1
 8007264:	d012      	beq.n	800728c <EE_Init+0x4c>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d100      	bne.n	800726c <EE_Init+0x2c>
 800726a:	e10b      	b.n	8007484 <EE_Init+0x244>
      FlashStatus = EE_Format();
 800726c:	f7ff ff84 	bl	8007178 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007270:	48ba      	ldr	r0, [pc, #744]	; (800755c <EE_Init+0x31c>)
 8007272:	f008 fa71 	bl	800f758 <FLASH_WaitForLastOperation>
 8007276:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007278:	2d00      	cmp	r5, #0
 800727a:	d102      	bne.n	8007282 <EE_Init+0x42>
	HAL_FLASH_Lock();
 800727c:	f008 fa62 	bl	800f744 <HAL_FLASH_Lock>
  return HAL_OK;
 8007280:	2500      	movs	r5, #0
}
 8007282:	0028      	movs	r0, r5
 8007284:	bcc0      	pop	{r6, r7}
 8007286:	46b9      	mov	r9, r7
 8007288:	46b0      	mov	r8, r6
 800728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800728c:	2a00      	cmp	r2, #0
 800728e:	d00d      	beq.n	80072ac <EE_Init+0x6c>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007290:	4bb0      	ldr	r3, [pc, #704]	; (8007554 <EE_Init+0x314>)
 8007292:	429a      	cmp	r2, r3
 8007294:	d028      	beq.n	80072e8 <EE_Init+0xa8>
        FlashStatus = EE_Format();
 8007296:	f7ff ff6f 	bl	8007178 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800729a:	48b0      	ldr	r0, [pc, #704]	; (800755c <EE_Init+0x31c>)
 800729c:	f008 fa5c 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d0eb      	beq.n	800727c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 80072a4:	4bae      	ldr	r3, [pc, #696]	; (8007560 <EE_Init+0x320>)
 80072a6:	69dd      	ldr	r5, [r3, #28]
 80072a8:	b2ad      	uxth	r5, r5
 80072aa:	e7ea      	b.n	8007282 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 80072ac:	48a7      	ldr	r0, [pc, #668]	; (800754c <EE_Init+0x30c>)
 80072ae:	f008 faf9 	bl	800f8a4 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072b2:	48aa      	ldr	r0, [pc, #680]	; (800755c <EE_Init+0x31c>)
 80072b4:	f008 fa50 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d003      	beq.n	80072c4 <EE_Init+0x84>
          return pFlash.ErrorCode;
 80072bc:	4ba8      	ldr	r3, [pc, #672]	; (8007560 <EE_Init+0x320>)
 80072be:	69dd      	ldr	r5, [r3, #28]
 80072c0:	b2ad      	uxth	r5, r5
 80072c2:	e7de      	b.n	8007282 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80072c4:	48a7      	ldr	r0, [pc, #668]	; (8007564 <EE_Init+0x324>)
 80072c6:	f008 faed 	bl	800f8a4 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072ca:	48a4      	ldr	r0, [pc, #656]	; (800755c <EE_Init+0x31c>)
 80072cc:	f008 fa44 	bl	800f758 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d105      	bne.n	80072e0 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80072d4:	4aa4      	ldr	r2, [pc, #656]	; (8007568 <EE_Init+0x328>)
 80072d6:	6913      	ldr	r3, [r2, #16]
 80072d8:	2102      	movs	r1, #2
 80072da:	438b      	bics	r3, r1
 80072dc:	6113      	str	r3, [r2, #16]
 80072de:	e7cd      	b.n	800727c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80072e0:	4b9f      	ldr	r3, [pc, #636]	; (8007560 <EE_Init+0x320>)
 80072e2:	69dd      	ldr	r5, [r3, #28]
 80072e4:	b2ad      	uxth	r5, r5
 80072e6:	e7cc      	b.n	8007282 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80072e8:	4898      	ldr	r0, [pc, #608]	; (800754c <EE_Init+0x30c>)
 80072ea:	f008 fadb 	bl	800f8a4 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072ee:	489b      	ldr	r0, [pc, #620]	; (800755c <EE_Init+0x31c>)
 80072f0:	f008 fa32 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d003      	beq.n	8007300 <EE_Init+0xc0>
          return pFlash.ErrorCode;
 80072f8:	4b99      	ldr	r3, [pc, #612]	; (8007560 <EE_Init+0x320>)
 80072fa:	69dd      	ldr	r5, [r3, #28]
 80072fc:	b2ad      	uxth	r5, r5
 80072fe:	e7c0      	b.n	8007282 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007300:	4898      	ldr	r0, [pc, #608]	; (8007564 <EE_Init+0x324>)
 8007302:	f008 facf 	bl	800f8a4 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007306:	4895      	ldr	r0, [pc, #596]	; (800755c <EE_Init+0x31c>)
 8007308:	f008 fa26 	bl	800f758 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800730c:	2800      	cmp	r0, #0
 800730e:	d003      	beq.n	8007318 <EE_Init+0xd8>
						return pFlash.ErrorCode;
 8007310:	4b93      	ldr	r3, [pc, #588]	; (8007560 <EE_Init+0x320>)
 8007312:	69dd      	ldr	r5, [r3, #28]
 8007314:	b2ad      	uxth	r5, r5
 8007316:	e7b4      	b.n	8007282 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007318:	4a93      	ldr	r2, [pc, #588]	; (8007568 <EE_Init+0x328>)
 800731a:	6913      	ldr	r3, [r2, #16]
 800731c:	2102      	movs	r1, #2
 800731e:	438b      	bics	r3, r1
 8007320:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	498a      	ldr	r1, [pc, #552]	; (8007550 <EE_Init+0x310>)
 8007328:	2001      	movs	r0, #1
 800732a:	f008 fa43 	bl	800f7b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800732e:	488b      	ldr	r0, [pc, #556]	; (800755c <EE_Init+0x31c>)
 8007330:	f008 fa12 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007334:	2800      	cmp	r0, #0
 8007336:	d105      	bne.n	8007344 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007338:	4a8b      	ldr	r2, [pc, #556]	; (8007568 <EE_Init+0x328>)
 800733a:	6913      	ldr	r3, [r2, #16]
 800733c:	2101      	movs	r1, #1
 800733e:	438b      	bics	r3, r1
 8007340:	6113      	str	r3, [r2, #16]
 8007342:	e79b      	b.n	800727c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007344:	4b86      	ldr	r3, [pc, #536]	; (8007560 <EE_Init+0x320>)
 8007346:	69dd      	ldr	r5, [r3, #28]
 8007348:	b2ad      	uxth	r5, r5
 800734a:	e79a      	b.n	8007282 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800734c:	2a00      	cmp	r2, #0
 800734e:	d158      	bne.n	8007402 <EE_Init+0x1c2>
 8007350:	2401      	movs	r4, #1
  int16_t x = -1;
 8007352:	2601      	movs	r6, #1
 8007354:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007356:	4f85      	ldr	r7, [pc, #532]	; (800756c <EE_Init+0x32c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007358:	4b85      	ldr	r3, [pc, #532]	; (8007570 <EE_Init+0x330>)
 800735a:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800735c:	4699      	mov	r9, r3
 800735e:	e005      	b.n	800736c <EE_Init+0x12c>
            x = VarIdx;
 8007360:	b226      	sxth	r6, r4
 8007362:	e008      	b.n	8007376 <EE_Init+0x136>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007364:	3401      	adds	r4, #1
 8007366:	4b83      	ldr	r3, [pc, #524]	; (8007574 <EE_Init+0x334>)
 8007368:	429c      	cmp	r4, r3
 800736a:	d018      	beq.n	800739e <EE_Init+0x15e>
 800736c:	b2a5      	uxth	r5, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800736e:	883b      	ldrh	r3, [r7, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	42ab      	cmp	r3, r5
 8007374:	d0f4      	beq.n	8007360 <EE_Init+0x120>
          if (VarIdx != x)
 8007376:	42a6      	cmp	r6, r4
 8007378:	d0f4      	beq.n	8007364 <EE_Init+0x124>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800737a:	4641      	mov	r1, r8
 800737c:	0028      	movs	r0, r5
 800737e:	f7ff fe1f 	bl	8006fc0 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007382:	2801      	cmp	r0, #1
 8007384:	d0ee      	beq.n	8007364 <EE_Init+0x124>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007386:	464b      	mov	r3, r9
 8007388:	8819      	ldrh	r1, [r3, #0]
 800738a:	0028      	movs	r0, r5
 800738c:	f7ff fdae 	bl	8006eec <EE_VerifyPageFullWriteVariable>
 8007390:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007392:	4872      	ldr	r0, [pc, #456]	; (800755c <EE_Init+0x31c>)
 8007394:	f008 f9e0 	bl	800f758 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007398:	2800      	cmp	r0, #0
 800739a:	d0e3      	beq.n	8007364 <EE_Init+0x124>
 800739c:	e771      	b.n	8007282 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	496a      	ldr	r1, [pc, #424]	; (800754c <EE_Init+0x30c>)
 80073a4:	2001      	movs	r0, #1
 80073a6:	f008 fa05 	bl	800f7b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80073aa:	486c      	ldr	r0, [pc, #432]	; (800755c <EE_Init+0x31c>)
 80073ac:	f008 f9d4 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d003      	beq.n	80073bc <EE_Init+0x17c>
          return pFlash.ErrorCode;
 80073b4:	4b6a      	ldr	r3, [pc, #424]	; (8007560 <EE_Init+0x320>)
 80073b6:	69dd      	ldr	r5, [r3, #28]
 80073b8:	b2ad      	uxth	r5, r5
 80073ba:	e762      	b.n	8007282 <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80073bc:	4a6a      	ldr	r2, [pc, #424]	; (8007568 <EE_Init+0x328>)
 80073be:	6913      	ldr	r3, [r2, #16]
 80073c0:	2101      	movs	r1, #1
 80073c2:	438b      	bics	r3, r1
 80073c4:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80073c6:	4862      	ldr	r0, [pc, #392]	; (8007550 <EE_Init+0x310>)
 80073c8:	f008 fa6c 	bl	800f8a4 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80073cc:	4863      	ldr	r0, [pc, #396]	; (800755c <EE_Init+0x31c>)
 80073ce:	f008 f9c3 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d003      	beq.n	80073de <EE_Init+0x19e>
          return pFlash.ErrorCode;
 80073d6:	4b62      	ldr	r3, [pc, #392]	; (8007560 <EE_Init+0x320>)
 80073d8:	69dd      	ldr	r5, [r3, #28]
 80073da:	b2ad      	uxth	r5, r5
 80073dc:	e751      	b.n	8007282 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80073de:	4866      	ldr	r0, [pc, #408]	; (8007578 <EE_Init+0x338>)
 80073e0:	f008 fa60 	bl	800f8a4 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80073e4:	485d      	ldr	r0, [pc, #372]	; (800755c <EE_Init+0x31c>)
 80073e6:	f008 f9b7 	bl	800f758 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d105      	bne.n	80073fa <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80073ee:	4a5e      	ldr	r2, [pc, #376]	; (8007568 <EE_Init+0x328>)
 80073f0:	6913      	ldr	r3, [r2, #16]
 80073f2:	2102      	movs	r1, #2
 80073f4:	438b      	bics	r3, r1
 80073f6:	6113      	str	r3, [r2, #16]
 80073f8:	e740      	b.n	800727c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80073fa:	4b59      	ldr	r3, [pc, #356]	; (8007560 <EE_Init+0x320>)
 80073fc:	69dd      	ldr	r5, [r3, #28]
 80073fe:	b2ad      	uxth	r5, r5
 8007400:	e73f      	b.n	8007282 <EE_Init+0x42>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007402:	4b55      	ldr	r3, [pc, #340]	; (8007558 <EE_Init+0x318>)
 8007404:	429a      	cmp	r2, r3
 8007406:	d00b      	beq.n	8007420 <EE_Init+0x1e0>
        FlashStatus = EE_Format();
 8007408:	f7ff feb6 	bl	8007178 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800740c:	4853      	ldr	r0, [pc, #332]	; (800755c <EE_Init+0x31c>)
 800740e:	f008 f9a3 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007412:	2800      	cmp	r0, #0
 8007414:	d100      	bne.n	8007418 <EE_Init+0x1d8>
 8007416:	e731      	b.n	800727c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007418:	4b51      	ldr	r3, [pc, #324]	; (8007560 <EE_Init+0x320>)
 800741a:	69dd      	ldr	r5, [r3, #28]
 800741c:	b2ad      	uxth	r5, r5
 800741e:	e730      	b.n	8007282 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007420:	484b      	ldr	r0, [pc, #300]	; (8007550 <EE_Init+0x310>)
 8007422:	f008 fa3f 	bl	800f8a4 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007426:	484d      	ldr	r0, [pc, #308]	; (800755c <EE_Init+0x31c>)
 8007428:	f008 f996 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800742c:	2800      	cmp	r0, #0
 800742e:	d003      	beq.n	8007438 <EE_Init+0x1f8>
          return pFlash.ErrorCode;
 8007430:	4b4b      	ldr	r3, [pc, #300]	; (8007560 <EE_Init+0x320>)
 8007432:	69dd      	ldr	r5, [r3, #28]
 8007434:	b2ad      	uxth	r5, r5
 8007436:	e724      	b.n	8007282 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007438:	484f      	ldr	r0, [pc, #316]	; (8007578 <EE_Init+0x338>)
 800743a:	f008 fa33 	bl	800f8a4 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800743e:	4847      	ldr	r0, [pc, #284]	; (800755c <EE_Init+0x31c>)
 8007440:	f008 f98a 	bl	800f758 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007444:	2800      	cmp	r0, #0
 8007446:	d003      	beq.n	8007450 <EE_Init+0x210>
						return pFlash.ErrorCode;
 8007448:	4b45      	ldr	r3, [pc, #276]	; (8007560 <EE_Init+0x320>)
 800744a:	69dd      	ldr	r5, [r3, #28]
 800744c:	b2ad      	uxth	r5, r5
 800744e:	e718      	b.n	8007282 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007450:	4a45      	ldr	r2, [pc, #276]	; (8007568 <EE_Init+0x328>)
 8007452:	6913      	ldr	r3, [r2, #16]
 8007454:	2102      	movs	r1, #2
 8007456:	438b      	bics	r3, r1
 8007458:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800745a:	2200      	movs	r2, #0
 800745c:	2300      	movs	r3, #0
 800745e:	493b      	ldr	r1, [pc, #236]	; (800754c <EE_Init+0x30c>)
 8007460:	2001      	movs	r0, #1
 8007462:	f008 f9a7 	bl	800f7b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007466:	483d      	ldr	r0, [pc, #244]	; (800755c <EE_Init+0x31c>)
 8007468:	f008 f976 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800746c:	2800      	cmp	r0, #0
 800746e:	d105      	bne.n	800747c <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007470:	4a3d      	ldr	r2, [pc, #244]	; (8007568 <EE_Init+0x328>)
 8007472:	6913      	ldr	r3, [r2, #16]
 8007474:	2101      	movs	r1, #1
 8007476:	438b      	bics	r3, r1
 8007478:	6113      	str	r3, [r2, #16]
 800747a:	e6ff      	b.n	800727c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 800747c:	4b38      	ldr	r3, [pc, #224]	; (8007560 <EE_Init+0x320>)
 800747e:	69dd      	ldr	r5, [r3, #28]
 8007480:	b2ad      	uxth	r5, r5
 8007482:	e6fe      	b.n	8007282 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007484:	2a00      	cmp	r2, #0
 8007486:	d00a      	beq.n	800749e <EE_Init+0x25e>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007488:	4b33      	ldr	r3, [pc, #204]	; (8007558 <EE_Init+0x318>)
 800748a:	429a      	cmp	r2, r3
 800748c:	d011      	beq.n	80074b2 <EE_Init+0x272>
 800748e:	2401      	movs	r4, #1
  int16_t x = -1;
 8007490:	2601      	movs	r6, #1
 8007492:	4276      	negs	r6, r6
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007494:	4f39      	ldr	r7, [pc, #228]	; (800757c <EE_Init+0x33c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007496:	4b36      	ldr	r3, [pc, #216]	; (8007570 <EE_Init+0x330>)
 8007498:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800749a:	4699      	mov	r9, r3
 800749c:	e02d      	b.n	80074fa <EE_Init+0x2ba>
        FlashStatus = EE_Format();
 800749e:	f7ff fe6b 	bl	8007178 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80074a2:	482e      	ldr	r0, [pc, #184]	; (800755c <EE_Init+0x31c>)
 80074a4:	f008 f958 	bl	800f758 <FLASH_WaitForLastOperation>
 80074a8:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	d100      	bne.n	80074b0 <EE_Init+0x270>
 80074ae:	e6e5      	b.n	800727c <EE_Init+0x3c>
 80074b0:	e6e7      	b.n	8007282 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80074b2:	4827      	ldr	r0, [pc, #156]	; (8007550 <EE_Init+0x310>)
 80074b4:	f008 f9f6 	bl	800f8a4 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80074b8:	4828      	ldr	r0, [pc, #160]	; (800755c <EE_Init+0x31c>)
 80074ba:	f008 f94d 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80074be:	2800      	cmp	r0, #0
 80074c0:	d003      	beq.n	80074ca <EE_Init+0x28a>
          return pFlash.ErrorCode;
 80074c2:	4b27      	ldr	r3, [pc, #156]	; (8007560 <EE_Init+0x320>)
 80074c4:	69dd      	ldr	r5, [r3, #28]
 80074c6:	b2ad      	uxth	r5, r5
 80074c8:	e6db      	b.n	8007282 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80074ca:	482b      	ldr	r0, [pc, #172]	; (8007578 <EE_Init+0x338>)
 80074cc:	f008 f9ea 	bl	800f8a4 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80074d0:	4822      	ldr	r0, [pc, #136]	; (800755c <EE_Init+0x31c>)
 80074d2:	f008 f941 	bl	800f758 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d105      	bne.n	80074e6 <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80074da:	4a23      	ldr	r2, [pc, #140]	; (8007568 <EE_Init+0x328>)
 80074dc:	6913      	ldr	r3, [r2, #16]
 80074de:	2102      	movs	r1, #2
 80074e0:	438b      	bics	r3, r1
 80074e2:	6113      	str	r3, [r2, #16]
 80074e4:	e6ca      	b.n	800727c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80074e6:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <EE_Init+0x320>)
 80074e8:	69dd      	ldr	r5, [r3, #28]
 80074ea:	b2ad      	uxth	r5, r5
 80074ec:	e6c9      	b.n	8007282 <EE_Init+0x42>
            x = VarIdx;
 80074ee:	b226      	sxth	r6, r4
 80074f0:	e008      	b.n	8007504 <EE_Init+0x2c4>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80074f2:	3401      	adds	r4, #1
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <EE_Init+0x334>)
 80074f6:	429c      	cmp	r4, r3
 80074f8:	d018      	beq.n	800752c <EE_Init+0x2ec>
 80074fa:	b2a5      	uxth	r5, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 80074fc:	883b      	ldrh	r3, [r7, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	42ab      	cmp	r3, r5
 8007502:	d0f4      	beq.n	80074ee <EE_Init+0x2ae>
          if (VarIdx != x)
 8007504:	42a6      	cmp	r6, r4
 8007506:	d0f4      	beq.n	80074f2 <EE_Init+0x2b2>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007508:	4641      	mov	r1, r8
 800750a:	0028      	movs	r0, r5
 800750c:	f7ff fd58 	bl	8006fc0 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007510:	2801      	cmp	r0, #1
 8007512:	d0ee      	beq.n	80074f2 <EE_Init+0x2b2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007514:	464b      	mov	r3, r9
 8007516:	8819      	ldrh	r1, [r3, #0]
 8007518:	0028      	movs	r0, r5
 800751a:	f7ff fce7 	bl	8006eec <EE_VerifyPageFullWriteVariable>
 800751e:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007520:	480e      	ldr	r0, [pc, #56]	; (800755c <EE_Init+0x31c>)
 8007522:	f008 f919 	bl	800f758 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007526:	2800      	cmp	r0, #0
 8007528:	d0e3      	beq.n	80074f2 <EE_Init+0x2b2>
 800752a:	e6aa      	b.n	8007282 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800752c:	2200      	movs	r2, #0
 800752e:	2300      	movs	r3, #0
 8007530:	4907      	ldr	r1, [pc, #28]	; (8007550 <EE_Init+0x310>)
 8007532:	2001      	movs	r0, #1
 8007534:	f008 f93e 	bl	800f7b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007538:	4808      	ldr	r0, [pc, #32]	; (800755c <EE_Init+0x31c>)
 800753a:	f008 f90d 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800753e:	2800      	cmp	r0, #0
 8007540:	d01e      	beq.n	8007580 <EE_Init+0x340>
          return pFlash.ErrorCode;
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <EE_Init+0x320>)
 8007544:	69dd      	ldr	r5, [r3, #28]
 8007546:	b2ad      	uxth	r5, r5
 8007548:	e69b      	b.n	8007282 <EE_Init+0x42>
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	0801e000 	.word	0x0801e000
 8007550:	0801f000 	.word	0x0801f000
 8007554:	0000eeee 	.word	0x0000eeee
 8007558:	0000ffff 	.word	0x0000ffff
 800755c:	0000c350 	.word	0x0000c350
 8007560:	20006a60 	.word	0x20006a60
 8007564:	0801e800 	.word	0x0801e800
 8007568:	40022000 	.word	0x40022000
 800756c:	0801e006 	.word	0x0801e006
 8007570:	20001180 	.word	0x20001180
 8007574:	00000401 	.word	0x00000401
 8007578:	0801f800 	.word	0x0801f800
 800757c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007580:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <EE_Init+0x388>)
 8007582:	6913      	ldr	r3, [r2, #16]
 8007584:	2101      	movs	r1, #1
 8007586:	438b      	bics	r3, r1
 8007588:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800758a:	4810      	ldr	r0, [pc, #64]	; (80075cc <EE_Init+0x38c>)
 800758c:	f008 f98a 	bl	800f8a4 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007590:	480f      	ldr	r0, [pc, #60]	; (80075d0 <EE_Init+0x390>)
 8007592:	f008 f8e1 	bl	800f758 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007596:	2800      	cmp	r0, #0
 8007598:	d003      	beq.n	80075a2 <EE_Init+0x362>
          return pFlash.ErrorCode;
 800759a:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <EE_Init+0x394>)
 800759c:	69dd      	ldr	r5, [r3, #28]
 800759e:	b2ad      	uxth	r5, r5
 80075a0:	e66f      	b.n	8007282 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80075a2:	480d      	ldr	r0, [pc, #52]	; (80075d8 <EE_Init+0x398>)
 80075a4:	f008 f97e 	bl	800f8a4 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80075a8:	4809      	ldr	r0, [pc, #36]	; (80075d0 <EE_Init+0x390>)
 80075aa:	f008 f8d5 	bl	800f758 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d105      	bne.n	80075be <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80075b2:	4a05      	ldr	r2, [pc, #20]	; (80075c8 <EE_Init+0x388>)
 80075b4:	6913      	ldr	r3, [r2, #16]
 80075b6:	2102      	movs	r1, #2
 80075b8:	438b      	bics	r3, r1
 80075ba:	6113      	str	r3, [r2, #16]
 80075bc:	e65e      	b.n	800727c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <EE_Init+0x394>)
 80075c0:	69dd      	ldr	r5, [r3, #28]
 80075c2:	b2ad      	uxth	r5, r5
 80075c4:	e65d      	b.n	8007282 <EE_Init+0x42>
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	40022000 	.word	0x40022000
 80075cc:	0801e000 	.word	0x0801e000
 80075d0:	0000c350 	.word	0x0000c350
 80075d4:	20006a60 	.word	0x20006a60
 80075d8:	0801e800 	.word	0x0801e800

080075dc <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	46c6      	mov	lr, r8
 80075e0:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 80075e2:	4c2a      	ldr	r4, [pc, #168]	; (800768c <StartDefaultTask+0xb0>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 80075e4:	0026      	movs	r6, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 80075e6:	46a0      	mov	r8, r4
 80075e8:	e01f      	b.n	800762a <StartDefaultTask+0x4e>
				RTOS_IND_blink(100);
 80075ea:	2580      	movs	r5, #128	; 0x80
 80075ec:	012d      	lsls	r5, r5, #4
 80075ee:	2790      	movs	r7, #144	; 0x90
 80075f0:	05ff      	lsls	r7, r7, #23
 80075f2:	2201      	movs	r2, #1
 80075f4:	0029      	movs	r1, r5
 80075f6:	0038      	movs	r0, r7
 80075f8:	f008 fab8 	bl	800fb6c <HAL_GPIO_WritePin>
 80075fc:	2064      	movs	r0, #100	; 0x64
 80075fe:	f005 f960 	bl	800c8c2 <osDelay>
 8007602:	2200      	movs	r2, #0
 8007604:	0029      	movs	r1, r5
 8007606:	0038      	movs	r0, r7
 8007608:	f008 fab0 	bl	800fb6c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800760c:	2300      	movs	r3, #0
 800760e:	7033      	strb	r3, [r6, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007610:	f000 f9f6 	bl	8007a00 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007614:	f7fd fbe8 	bl	8004de8 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007618:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <StartDefaultTask+0xb4>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <StartDefaultTask+0x4a>
 8007620:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <StartDefaultTask+0xb8>)
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007626:	f007 f845 	bl	800e6b4 <vPortYield>
		switch (indMode)
 800762a:	7823      	ldrb	r3, [r4, #0]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d0dc      	beq.n	80075ea <StartDefaultTask+0xe>
 8007630:	2b03      	cmp	r3, #3
 8007632:	d016      	beq.n	8007662 <StartDefaultTask+0x86>
 8007634:	2b01      	cmp	r3, #1
 8007636:	d1eb      	bne.n	8007610 <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 8007638:	2580      	movs	r5, #128	; 0x80
 800763a:	012d      	lsls	r5, r5, #4
 800763c:	2790      	movs	r7, #144	; 0x90
 800763e:	05ff      	lsls	r7, r7, #23
 8007640:	2201      	movs	r2, #1
 8007642:	0029      	movs	r1, r5
 8007644:	0038      	movs	r0, r7
 8007646:	f008 fa91 	bl	800fb6c <HAL_GPIO_WritePin>
 800764a:	20c8      	movs	r0, #200	; 0xc8
 800764c:	f005 f939 	bl	800c8c2 <osDelay>
 8007650:	2200      	movs	r2, #0
 8007652:	0029      	movs	r1, r5
 8007654:	0038      	movs	r0, r7
 8007656:	f008 fa89 	bl	800fb6c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <StartDefaultTask+0xb0>)
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
				break;
 8007660:	e7d6      	b.n	8007610 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8007662:	2580      	movs	r5, #128	; 0x80
 8007664:	012d      	lsls	r5, r5, #4
 8007666:	2790      	movs	r7, #144	; 0x90
 8007668:	05ff      	lsls	r7, r7, #23
 800766a:	2201      	movs	r2, #1
 800766c:	0029      	movs	r1, r5
 800766e:	0038      	movs	r0, r7
 8007670:	f008 fa7c 	bl	800fb6c <HAL_GPIO_WritePin>
 8007674:	201e      	movs	r0, #30
 8007676:	f005 f924 	bl	800c8c2 <osDelay>
 800767a:	2200      	movs	r2, #0
 800767c:	0029      	movs	r1, r5
 800767e:	0038      	movs	r0, r7
 8007680:	f008 fa74 	bl	800fb6c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007684:	2300      	movs	r3, #0
 8007686:	4642      	mov	r2, r8
 8007688:	7013      	strb	r3, [r2, #0]
				break;
 800768a:	e7c1      	b.n	8007610 <StartDefaultTask+0x34>
 800768c:	20000cd0 	.word	0x20000cd0
 8007690:	200011f8 	.word	0x200011f8
 8007694:	200011f7 	.word	0x200011f7

08007698 <MX_FREERTOS_Init>:
{
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	b090      	sub	sp, #64	; 0x40
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 800769c:	25a0      	movs	r5, #160	; 0xa0
 800769e:	006d      	lsls	r5, r5, #1
 80076a0:	2400      	movs	r4, #0
 80076a2:	9403      	str	r4, [sp, #12]
 80076a4:	9402      	str	r4, [sp, #8]
 80076a6:	4b5e      	ldr	r3, [pc, #376]	; (8007820 <MX_FREERTOS_Init+0x188>)
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	2603      	movs	r6, #3
 80076ac:	9600      	str	r6, [sp, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	002a      	movs	r2, r5
 80076b2:	495c      	ldr	r1, [pc, #368]	; (8007824 <MX_FREERTOS_Init+0x18c>)
 80076b4:	485c      	ldr	r0, [pc, #368]	; (8007828 <MX_FREERTOS_Init+0x190>)
 80076b6:	f005 ff19 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 80076ba:	9403      	str	r4, [sp, #12]
 80076bc:	9402      	str	r4, [sp, #8]
 80076be:	4b5b      	ldr	r3, [pc, #364]	; (800782c <MX_FREERTOS_Init+0x194>)
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	9600      	str	r6, [sp, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	002a      	movs	r2, r5
 80076c8:	4959      	ldr	r1, [pc, #356]	; (8007830 <MX_FREERTOS_Init+0x198>)
 80076ca:	485a      	ldr	r0, [pc, #360]	; (8007834 <MX_FREERTOS_Init+0x19c>)
 80076cc:	f005 ff0e 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 80076d0:	9403      	str	r4, [sp, #12]
 80076d2:	9402      	str	r4, [sp, #8]
 80076d4:	4b58      	ldr	r3, [pc, #352]	; (8007838 <MX_FREERTOS_Init+0x1a0>)
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	9600      	str	r6, [sp, #0]
 80076da:	2300      	movs	r3, #0
 80076dc:	002a      	movs	r2, r5
 80076de:	4957      	ldr	r1, [pc, #348]	; (800783c <MX_FREERTOS_Init+0x1a4>)
 80076e0:	4857      	ldr	r0, [pc, #348]	; (8007840 <MX_FREERTOS_Init+0x1a8>)
 80076e2:	f005 ff03 	bl	800d4ec <xTaskGenericCreate>
	vRegisterCLICommands();
 80076e6:	f7ff fa79 	bl	8006bdc <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 80076ea:	9403      	str	r4, [sp, #12]
 80076ec:	9402      	str	r4, [sp, #8]
 80076ee:	4b55      	ldr	r3, [pc, #340]	; (8007844 <MX_FREERTOS_Init+0x1ac>)
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	9600      	str	r6, [sp, #0]
 80076f4:	2300      	movs	r3, #0
 80076f6:	002a      	movs	r2, r5
 80076f8:	4953      	ldr	r1, [pc, #332]	; (8007848 <MX_FREERTOS_Init+0x1b0>)
 80076fa:	4854      	ldr	r0, [pc, #336]	; (800784c <MX_FREERTOS_Init+0x1b4>)
 80076fc:	f005 fef6 	bl	800d4ec <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007700:	4d53      	ldr	r5, [pc, #332]	; (8007850 <MX_FREERTOS_Init+0x1b8>)
 8007702:	9403      	str	r4, [sp, #12]
 8007704:	9402      	str	r4, [sp, #8]
 8007706:	4b53      	ldr	r3, [pc, #332]	; (8007854 <MX_FREERTOS_Init+0x1bc>)
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	3601      	adds	r6, #1
 800770c:	9600      	str	r6, [sp, #0]
 800770e:	2301      	movs	r3, #1
 8007710:	22a0      	movs	r2, #160	; 0xa0
 8007712:	4951      	ldr	r1, [pc, #324]	; (8007858 <MX_FREERTOS_Init+0x1c0>)
 8007714:	0028      	movs	r0, r5
 8007716:	f005 fee9 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800771a:	9403      	str	r4, [sp, #12]
 800771c:	9402      	str	r4, [sp, #8]
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <MX_FREERTOS_Init+0x1c4>)
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	9600      	str	r6, [sp, #0]
 8007724:	2302      	movs	r3, #2
 8007726:	22a0      	movs	r2, #160	; 0xa0
 8007728:	494d      	ldr	r1, [pc, #308]	; (8007860 <MX_FREERTOS_Init+0x1c8>)
 800772a:	0028      	movs	r0, r5
 800772c:	f005 fede 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007730:	9403      	str	r4, [sp, #12]
 8007732:	9402      	str	r4, [sp, #8]
 8007734:	4b4b      	ldr	r3, [pc, #300]	; (8007864 <MX_FREERTOS_Init+0x1cc>)
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	9600      	str	r6, [sp, #0]
 800773a:	2303      	movs	r3, #3
 800773c:	22a0      	movs	r2, #160	; 0xa0
 800773e:	494a      	ldr	r1, [pc, #296]	; (8007868 <MX_FREERTOS_Init+0x1d0>)
 8007740:	0028      	movs	r0, r5
 8007742:	f005 fed3 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8007746:	9403      	str	r4, [sp, #12]
 8007748:	9402      	str	r4, [sp, #8]
 800774a:	4b48      	ldr	r3, [pc, #288]	; (800786c <MX_FREERTOS_Init+0x1d4>)
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	9600      	str	r6, [sp, #0]
 8007750:	2304      	movs	r3, #4
 8007752:	22a0      	movs	r2, #160	; 0xa0
 8007754:	4946      	ldr	r1, [pc, #280]	; (8007870 <MX_FREERTOS_Init+0x1d8>)
 8007756:	0028      	movs	r0, r5
 8007758:	f005 fec8 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800775c:	9403      	str	r4, [sp, #12]
 800775e:	9402      	str	r4, [sp, #8]
 8007760:	4b44      	ldr	r3, [pc, #272]	; (8007874 <MX_FREERTOS_Init+0x1dc>)
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	9600      	str	r6, [sp, #0]
 8007766:	2305      	movs	r3, #5
 8007768:	22a0      	movs	r2, #160	; 0xa0
 800776a:	4943      	ldr	r1, [pc, #268]	; (8007878 <MX_FREERTOS_Init+0x1e0>)
 800776c:	0028      	movs	r0, r5
 800776e:	f005 febd 	bl	800d4ec <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P6MsgTask", configMINIMAL_STACK_SIZE, (void *) P6, osPriorityAboveNormal-osPriorityIdle, &P6MsgTaskHandle);
 8007772:	9403      	str	r4, [sp, #12]
 8007774:	9402      	str	r4, [sp, #8]
 8007776:	4b41      	ldr	r3, [pc, #260]	; (800787c <MX_FREERTOS_Init+0x1e4>)
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	9600      	str	r6, [sp, #0]
 800777c:	2306      	movs	r3, #6
 800777e:	22a0      	movs	r2, #160	; 0xa0
 8007780:	493f      	ldr	r1, [pc, #252]	; (8007880 <MX_FREERTOS_Init+0x1e8>)
 8007782:	0028      	movs	r0, r5
 8007784:	f005 feb2 	bl	800d4ec <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007788:	940f      	str	r4, [sp, #60]	; 0x3c
 800778a:	2101      	movs	r1, #1
 800778c:	a80f      	add	r0, sp, #60	; 0x3c
 800778e:	f005 f8a0 	bl	800c8d2 <osSemaphoreCreate>
 8007792:	4e3c      	ldr	r6, [pc, #240]	; (8007884 <MX_FREERTOS_Init+0x1ec>)
 8007794:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8007796:	940e      	str	r4, [sp, #56]	; 0x38
 8007798:	2101      	movs	r1, #1
 800779a:	a80e      	add	r0, sp, #56	; 0x38
 800779c:	f005 f899 	bl	800c8d2 <osSemaphoreCreate>
 80077a0:	4d39      	ldr	r5, [pc, #228]	; (8007888 <MX_FREERTOS_Init+0x1f0>)
 80077a2:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 80077a4:	940d      	str	r4, [sp, #52]	; 0x34
 80077a6:	2101      	movs	r1, #1
 80077a8:	a80d      	add	r0, sp, #52	; 0x34
 80077aa:	f005 f892 	bl	800c8d2 <osSemaphoreCreate>
 80077ae:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 80077b0:	940c      	str	r4, [sp, #48]	; 0x30
 80077b2:	2101      	movs	r1, #1
 80077b4:	a80c      	add	r0, sp, #48	; 0x30
 80077b6:	f005 f88c 	bl	800c8d2 <osSemaphoreCreate>
 80077ba:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 80077bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80077be:	2101      	movs	r1, #1
 80077c0:	a80b      	add	r0, sp, #44	; 0x2c
 80077c2:	f005 f886 	bl	800c8d2 <osSemaphoreCreate>
 80077c6:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 80077c8:	940a      	str	r4, [sp, #40]	; 0x28
 80077ca:	2101      	movs	r1, #1
 80077cc:	a80a      	add	r0, sp, #40	; 0x28
 80077ce:	f005 f880 	bl	800c8d2 <osSemaphoreCreate>
 80077d2:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 80077d4:	9409      	str	r4, [sp, #36]	; 0x24
 80077d6:	2101      	movs	r1, #1
 80077d8:	a809      	add	r0, sp, #36	; 0x24
 80077da:	f005 f87a 	bl	800c8d2 <osSemaphoreCreate>
 80077de:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 80077e0:	9408      	str	r4, [sp, #32]
 80077e2:	2101      	movs	r1, #1
 80077e4:	a808      	add	r0, sp, #32
 80077e6:	f005 f874 	bl	800c8d2 <osSemaphoreCreate>
 80077ea:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 80077ec:	9407      	str	r4, [sp, #28]
 80077ee:	2101      	movs	r1, #1
 80077f0:	a807      	add	r0, sp, #28
 80077f2:	f005 f86e 	bl	800c8d2 <osSemaphoreCreate>
 80077f6:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 80077f8:	9406      	str	r4, [sp, #24]
 80077fa:	2101      	movs	r1, #1
 80077fc:	a806      	add	r0, sp, #24
 80077fe:	f005 f868 	bl	800c8d2 <osSemaphoreCreate>
 8007802:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11); PxRxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP11), 1);
 8007804:	9405      	str	r4, [sp, #20]
 8007806:	2101      	movs	r1, #1
 8007808:	a805      	add	r0, sp, #20
 800780a:	f005 f862 	bl	800c8d2 <osSemaphoreCreate>
 800780e:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12); PxTxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP12), 1);
 8007810:	9404      	str	r4, [sp, #16]
 8007812:	2101      	movs	r1, #1
 8007814:	a804      	add	r0, sp, #16
 8007816:	f005 f85c 	bl	800c8d2 <osSemaphoreCreate>
 800781a:	61a8      	str	r0, [r5, #24]
}
 800781c:	b010      	add	sp, #64	; 0x40
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	200011a4 	.word	0x200011a4
 8007824:	0801a37c 	.word	0x0801a37c
 8007828:	080075dd 	.word	0x080075dd
 800782c:	20001184 	.word	0x20001184
 8007830:	0801a388 	.word	0x0801a388
 8007834:	08008c59 	.word	0x08008c59
 8007838:	200011a0 	.word	0x200011a0
 800783c:	0801a394 	.word	0x0801a394
 8007840:	08011687 	.word	0x08011687
 8007844:	200011ac 	.word	0x200011ac
 8007848:	0801a3a0 	.word	0x0801a3a0
 800784c:	08004a89 	.word	0x08004a89
 8007850:	08009029 	.word	0x08009029
 8007854:	20001188 	.word	0x20001188
 8007858:	0801a3a8 	.word	0x0801a3a8
 800785c:	2000118c 	.word	0x2000118c
 8007860:	0801a3b4 	.word	0x0801a3b4
 8007864:	20001190 	.word	0x20001190
 8007868:	0801a3c0 	.word	0x0801a3c0
 800786c:	20001194 	.word	0x20001194
 8007870:	0801a3cc 	.word	0x0801a3cc
 8007874:	20001198 	.word	0x20001198
 8007878:	0801a3d8 	.word	0x0801a3d8
 800787c:	2000119c 	.word	0x2000119c
 8007880:	0801a3e4 	.word	0x0801a3e4
 8007884:	2000669c 	.word	0x2000669c
 8007888:	20006680 	.word	0x20006680

0800788c <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800788c:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800788e:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	4904      	ldr	r1, [pc, #16]	; (80078a4 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007894:	f7f8 fc5c 	bl	8000150 <__udivsi3>
 8007898:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800789a:	6018      	str	r0, [r3, #0]
}
 800789c:	bd10      	pop	{r4, pc}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	200000e8 	.word	0x200000e8
 80078a4:	00002710 	.word	0x00002710
 80078a8:	200011a8 	.word	0x200011a8

080078ac <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 80078ac:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <ulMainGetRunTimeCounterValue+0x40>)
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	21fa      	movs	r1, #250	; 0xfa
 80078b4:	0089      	lsls	r1, r1, #2
 80078b6:	f7f8 fc4b 	bl	8000150 <__udivsi3>
 80078ba:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <ulMainGetRunTimeCounterValue+0x44>)
 80078be:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 80078c0:	f005 ffb4 	bl	800d82c <xTaskGetTickCountFromISR>
 80078c4:	0003      	movs	r3, r0

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80078c6:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <ulMainGetRunTimeCounterValue+0x48>)
 80078c8:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80078ca:	1b28      	subs	r0, r5, r4
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80078cc:	0152      	lsls	r2, r2, #5
 80078ce:	d503      	bpl.n	80078d8 <ulMainGetRunTimeCounterValue+0x2c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 80078d0:	3301      	adds	r3, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80078d2:	4a07      	ldr	r2, [pc, #28]	; (80078f0 <ulMainGetRunTimeCounterValue+0x44>)
 80078d4:	6810      	ldr	r0, [r2, #0]
 80078d6:	1a28      	subs	r0, r5, r0
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 80078d8:	009c      	lsls	r4, r3, #2
 80078da:	18e4      	adds	r4, r4, r3
 80078dc:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <ulMainGetRunTimeCounterValue+0x4c>)
 80078e0:	6819      	ldr	r1, [r3, #0]
 80078e2:	f7f8 fc35 	bl	8000150 <__udivsi3>
 80078e6:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	200000e8 	.word	0x200000e8
 80078f0:	e000e018 	.word	0xe000e018
 80078f4:	e000ed04 	.word	0xe000ed04
 80078f8:	200011a8 	.word	0x200011a8

080078fc <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 80078fc:	4770      	bx	lr

080078fe <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 80078fe:	4770      	bx	lr

08007900 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 8007900:	4770      	bx	lr

08007902 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 8007902:	4770      	bx	lr

08007904 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 8007904:	4770      	bx	lr

08007906 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 8007906:	4770      	bx	lr

08007908 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 8007908:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 800790a:	00c2      	lsls	r2, r0, #3
 800790c:	1812      	adds	r2, r2, r0
 800790e:	4b1b      	ldr	r3, [pc, #108]	; (800797c <CheckForTimedButtonPress+0x74>)
 8007910:	189b      	adds	r3, r3, r2
 8007912:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 8007914:	0082      	lsls	r2, r0, #2
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <CheckForTimedButtonPress+0x78>)
 8007918:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800791a:	0163      	lsls	r3, r4, #5
 800791c:	1b1b      	subs	r3, r3, r4
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	191b      	adds	r3, r3, r4
 8007922:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 8007924:	4299      	cmp	r1, r3
 8007926:	d01c      	beq.n	8007962 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007928:	00c2      	lsls	r2, r0, #3
 800792a:	1812      	adds	r2, r2, r0
 800792c:	4b13      	ldr	r3, [pc, #76]	; (800797c <CheckForTimedButtonPress+0x74>)
 800792e:	189b      	adds	r3, r3, r2
 8007930:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007932:	0163      	lsls	r3, r4, #5
 8007934:	1b1b      	subs	r3, r3, r4
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	191b      	adds	r3, r3, r4
 800793a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 800793c:	4299      	cmp	r1, r3
 800793e:	d017      	beq.n	8007970 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007940:	00c2      	lsls	r2, r0, #3
 8007942:	1812      	adds	r2, r2, r0
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <CheckForTimedButtonPress+0x74>)
 8007946:	189b      	adds	r3, r3, r2
 8007948:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800794a:	0163      	lsls	r3, r4, #5
 800794c:	1b1b      	subs	r3, r3, r4
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	191b      	adds	r3, r3, r4
 8007952:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8007954:	4299      	cmp	r1, r3
 8007956:	d109      	bne.n	800796c <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8007958:	0010      	movs	r0, r2
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <CheckForTimedButtonPress+0x74>)
 800795c:	220a      	movs	r2, #10
 800795e:	54c2      	strb	r2, [r0, r3]
 8007960:	e004      	b.n	800796c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8007962:	00c3      	lsls	r3, r0, #3
 8007964:	1818      	adds	r0, r3, r0
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <CheckForTimedButtonPress+0x74>)
 8007968:	2209      	movs	r2, #9
 800796a:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 800796c:	2000      	movs	r0, #0
 800796e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8007970:	0010      	movs	r0, r2
 8007972:	4b02      	ldr	r3, [pc, #8]	; (800797c <CheckForTimedButtonPress+0x74>)
 8007974:	220a      	movs	r2, #10
 8007976:	54c2      	strb	r2, [r0, r3]
 8007978:	e7f8      	b.n	800796c <CheckForTimedButtonPress+0x64>
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	200011b0 	.word	0x200011b0
 8007980:	200011fc 	.word	0x200011fc

08007984 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8007984:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007986:	00c2      	lsls	r2, r0, #3
 8007988:	1812      	adds	r2, r2, r0
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <CheckForTimedButtonRelease+0x74>)
 800798c:	189b      	adds	r3, r3, r2
 800798e:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 8007990:	0082      	lsls	r2, r0, #2
 8007992:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <CheckForTimedButtonRelease+0x78>)
 8007994:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007996:	0163      	lsls	r3, r4, #5
 8007998:	1b1b      	subs	r3, r3, r4
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	191b      	adds	r3, r3, r4
 800799e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 80079a0:	4299      	cmp	r1, r3
 80079a2:	d01c      	beq.n	80079de <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80079a4:	00c2      	lsls	r2, r0, #3
 80079a6:	1812      	adds	r2, r2, r0
 80079a8:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <CheckForTimedButtonRelease+0x74>)
 80079aa:	189b      	adds	r3, r3, r2
 80079ac:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80079ae:	0163      	lsls	r3, r4, #5
 80079b0:	1b1b      	subs	r3, r3, r4
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	191b      	adds	r3, r3, r4
 80079b6:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d017      	beq.n	80079ec <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 80079bc:	00c2      	lsls	r2, r0, #3
 80079be:	1812      	adds	r2, r2, r0
 80079c0:	4b0d      	ldr	r3, [pc, #52]	; (80079f8 <CheckForTimedButtonRelease+0x74>)
 80079c2:	189b      	adds	r3, r3, r2
 80079c4:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80079c6:	0163      	lsls	r3, r4, #5
 80079c8:	1b1b      	subs	r3, r3, r4
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	191b      	adds	r3, r3, r4
 80079ce:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d109      	bne.n	80079e8 <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 80079d4:	0010      	movs	r0, r2
 80079d6:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <CheckForTimedButtonRelease+0x74>)
 80079d8:	220d      	movs	r2, #13
 80079da:	54c2      	strb	r2, [r0, r3]
 80079dc:	e004      	b.n	80079e8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80079de:	00c3      	lsls	r3, r0, #3
 80079e0:	1818      	adds	r0, r3, r0
 80079e2:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <CheckForTimedButtonRelease+0x74>)
 80079e4:	220c      	movs	r2, #12
 80079e6:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 80079e8:	2000      	movs	r0, #0
 80079ea:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80079ec:	0010      	movs	r0, r2
 80079ee:	4b02      	ldr	r3, [pc, #8]	; (80079f8 <CheckForTimedButtonRelease+0x74>)
 80079f0:	220d      	movs	r2, #13
 80079f2:	54c2      	strb	r2, [r0, r3]
 80079f4:	e7f8      	b.n	80079e8 <CheckForTimedButtonRelease+0x64>
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	200011b0 	.word	0x200011b0
 80079fc:	20001218 	.word	0x20001218

08007a00 <CheckAttachedButtons>:
{
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	46de      	mov	lr, fp
 8007a04:	4657      	mov	r7, sl
 8007a06:	464e      	mov	r6, r9
 8007a08:	4645      	mov	r5, r8
 8007a0a:	b5e0      	push	{r5, r6, r7, lr}
 8007a0c:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007a0e:	4dbf      	ldr	r5, [pc, #764]	; (8007d0c <CheckAttachedButtons+0x30c>)
 8007a10:	3509      	adds	r5, #9
 8007a12:	4ebf      	ldr	r6, [pc, #764]	; (8007d10 <CheckAttachedButtons+0x310>)
 8007a14:	3604      	adds	r6, #4
 8007a16:	4bbf      	ldr	r3, [pc, #764]	; (8007d14 <CheckAttachedButtons+0x314>)
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	4bbe      	ldr	r3, [pc, #760]	; (8007d18 <CheckAttachedButtons+0x318>)
 8007a1e:	3301      	adds	r3, #1
 8007a20:	4699      	mov	r9, r3
 8007a22:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	9302      	str	r3, [sp, #8]
 8007a28:	9303      	str	r3, [sp, #12]
 8007a2a:	e121      	b.n	8007c70 <CheckAttachedButtons+0x270>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 8007a2c:	230e      	movs	r3, #14
 8007a2e:	aa02      	add	r2, sp, #8
 8007a30:	4694      	mov	ip, r2
 8007a32:	4463      	add	r3, ip
 8007a34:	8819      	ldrh	r1, [r3, #0]
 8007a36:	2201      	movs	r2, #1
 8007a38:	9807      	ldr	r0, [sp, #28]
 8007a3a:	f008 f897 	bl	800fb6c <HAL_GPIO_WritePin>
 8007a3e:	200a      	movs	r0, #10
 8007a40:	f004 fbf6 	bl	800c230 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8007a44:	ab05      	add	r3, sp, #20
 8007a46:	8819      	ldrh	r1, [r3, #0]
 8007a48:	9806      	ldr	r0, [sp, #24]
 8007a4a:	f008 f889 	bl	800fb60 <HAL_GPIO_ReadPin>
 8007a4e:	9003      	str	r0, [sp, #12]
 8007a50:	e134      	b.n	8007cbc <CheckAttachedButtons+0x2bc>
			switch (button[i].type)
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d10e      	bne.n	8007a74 <CheckAttachedButtons+0x74>
					if (connected == GPIO_PIN_SET)	
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d100      	bne.n	8007a5e <CheckAttachedButtons+0x5e>
 8007a5c:	e1d7      	b.n	8007e0e <CheckAttachedButtons+0x40e>
					else if (connected == GPIO_PIN_RESET) 
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d108      	bne.n	8007a74 <CheckAttachedButtons+0x74>
 8007a62:	2302      	movs	r3, #2
 8007a64:	9302      	str	r3, [sp, #8]
 8007a66:	e031      	b.n	8007acc <CheckAttachedButtons+0xcc>
					if (connected == GPIO_PIN_SET)	
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d02c      	beq.n	8007ac8 <CheckAttachedButtons+0xc8>
					else if (connected == GPIO_PIN_RESET)
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d100      	bne.n	8007a74 <CheckAttachedButtons+0x74>
 8007a72:	e1c9      	b.n	8007e08 <CheckAttachedButtons+0x408>
			if (state == CLOSED || state == ON)												
 8007a74:	9b02      	ldr	r3, [sp, #8]
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d028      	beq.n	8007acc <CheckAttachedButtons+0xcc>
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d026      	beq.n	8007acc <CheckAttachedButtons+0xcc>
			if (state == OPEN || state == OFF)												
 8007a7e:	23fd      	movs	r3, #253	; 0xfd
 8007a80:	9a02      	ldr	r2, [sp, #8]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d129      	bne.n	8007adc <CheckAttachedButtons+0xdc>
				if (releaseCounter[i] < 0xFFFF)
 8007a88:	0031      	movs	r1, r6
 8007a8a:	6832      	ldr	r2, [r6, #0]
 8007a8c:	48a3      	ldr	r0, [pc, #652]	; (8007d1c <CheckAttachedButtons+0x31c>)
					releaseCounter[i] = 0;																	// Reset debounce counter		
 8007a8e:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 8007a90:	4282      	cmp	r2, r0
 8007a92:	d800      	bhi.n	8007a96 <CheckAttachedButtons+0x96>
					++releaseCounter[i];																		// Advance the debounce counter
 8007a94:	1c53      	adds	r3, r2, #1
 8007a96:	600b      	str	r3, [r1, #0]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007a98:	4ba1      	ldr	r3, [pc, #644]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d045      	beq.n	8007b2c <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	4b9f      	ldr	r3, [pc, #636]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007aa6:	795b      	ldrb	r3, [r3, #5]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d917      	bls.n	8007adc <CheckAttachedButtons+0xdc>
					clicked = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	4a9c      	ldr	r2, [pc, #624]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007ab0:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8007ab2:	464a      	mov	r2, r9
 8007ab4:	7013      	strb	r3, [r2, #0]
 8007ab6:	e011      	b.n	8007adc <CheckAttachedButtons+0xdc>
					if (connected == GPIO_PIN_SET)	
 8007ab8:	9b03      	ldr	r3, [sp, #12]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d02f      	beq.n	8007b1e <CheckAttachedButtons+0x11e>
					else if (connected == GPIO_PIN_RESET) 
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1d8      	bne.n	8007a74 <CheckAttachedButtons+0x74>
						state = OFF;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	e7df      	b.n	8007a88 <CheckAttachedButtons+0x88>
						state = CLOSED;
 8007ac8:	2304      	movs	r3, #4
 8007aca:	9302      	str	r3, [sp, #8]
				if (pressCounter[i] < 0xFFFF)	
 8007acc:	4643      	mov	r3, r8
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a92      	ldr	r2, [pc, #584]	; (8007d1c <CheckAttachedButtons+0x31c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d826      	bhi.n	8007b24 <CheckAttachedButtons+0x124>
					++pressCounter[i];																			// Advance the debounce counter
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	4642      	mov	r2, r8
 8007ada:	6013      	str	r3, [r2, #0]
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8007adc:	4647      	mov	r7, r8
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	4b90      	ldr	r3, [pc, #576]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d352      	bcc.n	8007b8e <CheckAttachedButtons+0x18e>
				if (pressCounter[i] == BOS.buttons.debounce)
 8007ae8:	d02a      	beq.n	8007b40 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8007aea:	6832      	ldr	r2, [r6, #0]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d201      	bcs.n	8007af4 <CheckAttachedButtons+0xf4>
					releaseCounter[i] = 0;					
 8007af0:	2300      	movs	r3, #0
 8007af2:	6033      	str	r3, [r6, #0]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	4a8b      	ldr	r2, [pc, #556]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007af8:	8852      	ldrh	r2, [r2, #2]
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d938      	bls.n	8007b70 <CheckAttachedButtons+0x170>
 8007afe:	22fa      	movs	r2, #250	; 0xfa
 8007b00:	0052      	lsls	r2, r2, #1
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d234      	bcs.n	8007b70 <CheckAttachedButtons+0x170>
					if (clicked == 0)
 8007b06:	4b86      	ldr	r3, [pc, #536]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d11e      	bne.n	8007b4c <CheckAttachedButtons+0x14c>
						clicked = 1;																					// Record a possible single click 
 8007b0e:	4b84      	ldr	r3, [pc, #528]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007b10:	3af4      	subs	r2, #244	; 0xf4
 8007b12:	3aff      	subs	r2, #255	; 0xff
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	e03a      	b.n	8007b8e <CheckAttachedButtons+0x18e>
						state = CLOSED;
 8007b18:	2304      	movs	r3, #4
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	e7d6      	b.n	8007acc <CheckAttachedButtons+0xcc>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	9302      	str	r3, [sp, #8]
 8007b22:	e7d3      	b.n	8007acc <CheckAttachedButtons+0xcc>
					pressCounter[i] = 0;																		// Reset debounce counter					
 8007b24:	2300      	movs	r3, #0
 8007b26:	4642      	mov	r2, r8
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	e7d7      	b.n	8007adc <CheckAttachedButtons+0xdc>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	4a7c      	ldr	r2, [pc, #496]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007b32:	7952      	ldrb	r2, [r2, #5]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d3b9      	bcc.n	8007aac <CheckAttachedButtons+0xac>
					++dblCounter[i];			
 8007b38:	3301      	adds	r3, #1
 8007b3a:	464a      	mov	r2, r9
 8007b3c:	7013      	strb	r3, [r2, #0]
 8007b3e:	e7cd      	b.n	8007adc <CheckAttachedButtons+0xdc>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 8007b40:	2207      	movs	r2, #7
 8007b42:	4651      	mov	r1, sl
 8007b44:	700a      	strb	r2, [r1, #0]
					++pressCounter[i];
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	603a      	str	r2, [r7, #0]
 8007b4a:	e7ce      	b.n	8007aea <CheckAttachedButtons+0xea>
					else if (clicked == 2) {
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11e      	bne.n	8007b8e <CheckAttachedButtons+0x18e>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8007b50:	4649      	mov	r1, r9
 8007b52:	780b      	ldrb	r3, [r1, #0]
 8007b54:	4a73      	ldr	r2, [pc, #460]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007b56:	7912      	ldrb	r2, [r2, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d218      	bcs.n	8007b8e <CheckAttachedButtons+0x18e>
 8007b5c:	4a71      	ldr	r2, [pc, #452]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007b5e:	7952      	ldrb	r2, [r2, #5]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d914      	bls.n	8007b8e <CheckAttachedButtons+0x18e>
							clicked = 3;																				// Record a possible double click 
 8007b64:	4b6e      	ldr	r3, [pc, #440]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007b66:	2203      	movs	r2, #3
 8007b68:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	700b      	strb	r3, [r1, #0]
 8007b6e:	e00e      	b.n	8007b8e <CheckAttachedButtons+0x18e>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8007b70:	3bf5      	subs	r3, #245	; 0xf5
 8007b72:	3bff      	subs	r3, #255	; 0xff
 8007b74:	4a6c      	ldr	r2, [pc, #432]	; (8007d28 <CheckAttachedButtons+0x328>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d809      	bhi.n	8007b8e <CheckAttachedButtons+0x18e>
					if (clicked)	clicked = 0;															// Cannot be a click
 8007b7a:	4b69      	ldr	r3, [pc, #420]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <CheckAttachedButtons+0x188>
 8007b82:	4b67      	ldr	r3, [pc, #412]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8007b88:	0020      	movs	r0, r4
 8007b8a:	f7ff febd 	bl	8007908 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8007b8e:	0031      	movs	r1, r6
 8007b90:	6832      	ldr	r2, [r6, #0]
 8007b92:	4b64      	ldr	r3, [pc, #400]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d349      	bcc.n	8007c2e <CheckAttachedButtons+0x22e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 8007b9a:	d028      	beq.n	8007bee <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d201      	bcs.n	8007ba6 <CheckAttachedButtons+0x1a6>
					pressCounter[i] = 0;				
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	603b      	str	r3, [r7, #0]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8007ba6:	680b      	ldr	r3, [r1, #0]
 8007ba8:	4a5e      	ldr	r2, [pc, #376]	; (8007d24 <CheckAttachedButtons+0x324>)
 8007baa:	8852      	ldrh	r2, [r2, #2]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d939      	bls.n	8007c24 <CheckAttachedButtons+0x224>
 8007bb0:	22fa      	movs	r2, #250	; 0xfa
 8007bb2:	0052      	lsls	r2, r2, #1
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d235      	bcs.n	8007c24 <CheckAttachedButtons+0x224>
					if (clicked == 1)
 8007bb8:	4b59      	ldr	r3, [pc, #356]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d01c      	beq.n	8007bfa <CheckAttachedButtons+0x1fa>
					else if (clicked == 3)
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d134      	bne.n	8007c2e <CheckAttachedButtons+0x22e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8007bc4:	3303      	adds	r3, #3
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	7013      	strb	r3, [r2, #0]
						clicked = 0;																					// Prepare for a single click					
 8007bca:	4b55      	ldr	r3, [pc, #340]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8007bd0:	4b56      	ldr	r3, [pc, #344]	; (8007d2c <CheckAttachedButtons+0x32c>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d13e      	bne.n	8007c56 <CheckAttachedButtons+0x256>
 8007bd8:	4653      	mov	r3, sl
 8007bda:	7a1b      	ldrb	r3, [r3, #8]
 8007bdc:	079b      	lsls	r3, r3, #30
 8007bde:	d53a      	bpl.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007be0:	4b52      	ldr	r3, [pc, #328]	; (8007d2c <CheckAttachedButtons+0x32c>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8007be6:	0020      	movs	r0, r4
 8007be8:	f7ff fe8b 	bl	8007902 <buttonDblClickedCallback>
 8007bec:	e033      	b.n	8007c56 <CheckAttachedButtons+0x256>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8007bee:	2208      	movs	r2, #8
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	7002      	strb	r2, [r0, #0]
					++releaseCounter[i];
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	6032      	str	r2, [r6, #0]
 8007bf8:	e7d0      	b.n	8007b9c <CheckAttachedButtons+0x19c>
						button[i].state = CLICKED;														// Record a single button click event
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	7013      	strb	r3, [r2, #0]
						clicked = 2;																					// Prepare for a double click
 8007c00:	4b47      	ldr	r3, [pc, #284]	; (8007d20 <CheckAttachedButtons+0x320>)
 8007c02:	2202      	movs	r2, #2
 8007c04:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 8007c06:	4b49      	ldr	r3, [pc, #292]	; (8007d2c <CheckAttachedButtons+0x32c>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d123      	bne.n	8007c56 <CheckAttachedButtons+0x256>
 8007c0e:	4653      	mov	r3, sl
 8007c10:	7a1b      	ldrb	r3, [r3, #8]
 8007c12:	07db      	lsls	r3, r3, #31
 8007c14:	d51f      	bpl.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007c16:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <CheckAttachedButtons+0x32c>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8007c1c:	0020      	movs	r0, r4
 8007c1e:	f7ff fe6f 	bl	8007900 <buttonClickedCallback>
 8007c22:	e018      	b.n	8007c56 <CheckAttachedButtons+0x256>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 8007c24:	3bf5      	subs	r3, #245	; 0xf5
 8007c26:	3bff      	subs	r3, #255	; 0xff
 8007c28:	4a3f      	ldr	r2, [pc, #252]	; (8007d28 <CheckAttachedButtons+0x328>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d909      	bls.n	8007c42 <CheckAttachedButtons+0x242>
			switch (button[i].state)
 8007c2e:	4653      	mov	r3, sl
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	3b05      	subs	r3, #5
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	2a09      	cmp	r2, #9
 8007c38:	d80d      	bhi.n	8007c56 <CheckAttachedButtons+0x256>
 8007c3a:	0093      	lsls	r3, r2, #2
 8007c3c:	4a3c      	ldr	r2, [pc, #240]	; (8007d30 <CheckAttachedButtons+0x330>)
 8007c3e:	58d3      	ldr	r3, [r2, r3]
 8007c40:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8007c42:	0020      	movs	r0, r4
 8007c44:	f7ff fe9e 	bl	8007984 <CheckForTimedButtonRelease>
 8007c48:	e7f1      	b.n	8007c2e <CheckAttachedButtons+0x22e>
					buttonPressedCallback(i);
 8007c4a:	0020      	movs	r0, r4
 8007c4c:	f7ff fe56 	bl	80078fc <buttonPressedCallback>
					button[i].state = NONE;
 8007c50:	2300      	movs	r3, #0
 8007c52:	4652      	mov	r2, sl
 8007c54:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007c56:	3401      	adds	r4, #1
 8007c58:	b2e4      	uxtb	r4, r4
 8007c5a:	3509      	adds	r5, #9
 8007c5c:	3604      	adds	r6, #4
 8007c5e:	2304      	movs	r3, #4
 8007c60:	469c      	mov	ip, r3
 8007c62:	44e0      	add	r8, ip
 8007c64:	3b03      	subs	r3, #3
 8007c66:	469c      	mov	ip, r3
 8007c68:	44e1      	add	r9, ip
 8007c6a:	2c07      	cmp	r4, #7
 8007c6c:	d100      	bne.n	8007c70 <CheckAttachedButtons+0x270>
 8007c6e:	e0d1      	b.n	8007e14 <CheckAttachedButtons+0x414>
		if (button[i].type)			// Only check defined butons
 8007c70:	46aa      	mov	sl, r5
 8007c72:	786b      	ldrb	r3, [r5, #1]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0ee      	beq.n	8007c56 <CheckAttachedButtons+0x256>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <CheckAttachedButtons+0x32c>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d100      	bne.n	8007c82 <CheckAttachedButtons+0x282>
 8007c80:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8007c82:	230e      	movs	r3, #14
 8007c84:	aa02      	add	r2, sp, #8
 8007c86:	4694      	mov	ip, r2
 8007c88:	4463      	add	r3, ip
 8007c8a:	469b      	mov	fp, r3
 8007c8c:	af05      	add	r7, sp, #20
 8007c8e:	9700      	str	r7, [sp, #0]
 8007c90:	ab06      	add	r3, sp, #24
 8007c92:	465a      	mov	r2, fp
 8007c94:	a907      	add	r1, sp, #28
 8007c96:	0020      	movs	r0, r4
 8007c98:	f003 ff36 	bl	800bb08 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	8819      	ldrh	r1, [r3, #0]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9807      	ldr	r0, [sp, #28]
 8007ca4:	f007 ff62 	bl	800fb6c <HAL_GPIO_WritePin>
 8007ca8:	200a      	movs	r0, #10
 8007caa:	f004 fac1 	bl	800c230 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8007cae:	8839      	ldrh	r1, [r7, #0]
 8007cb0:	9806      	ldr	r0, [sp, #24]
 8007cb2:	f007 ff55 	bl	800fb60 <HAL_GPIO_ReadPin>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d100      	bne.n	8007cbc <CheckAttachedButtons+0x2bc>
 8007cba:	e6b7      	b.n	8007a2c <CheckAttachedButtons+0x2c>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8007cbc:	230e      	movs	r3, #14
 8007cbe:	aa02      	add	r2, sp, #8
 8007cc0:	4694      	mov	ip, r2
 8007cc2:	4463      	add	r3, ip
 8007cc4:	8819      	ldrh	r1, [r3, #0]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	9807      	ldr	r0, [sp, #28]
 8007cca:	f007 ff4f 	bl	800fb6c <HAL_GPIO_WritePin>
			switch (button[i].type)
 8007cce:	4653      	mov	r3, sl
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d100      	bne.n	8007cd8 <CheckAttachedButtons+0x2d8>
 8007cd6:	e6ef      	b.n	8007ab8 <CheckAttachedButtons+0xb8>
 8007cd8:	d900      	bls.n	8007cdc <CheckAttachedButtons+0x2dc>
 8007cda:	e6ba      	b.n	8007a52 <CheckAttachedButtons+0x52>
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d100      	bne.n	8007ce2 <CheckAttachedButtons+0x2e2>
 8007ce0:	e6c2      	b.n	8007a68 <CheckAttachedButtons+0x68>
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d000      	beq.n	8007ce8 <CheckAttachedButtons+0x2e8>
 8007ce6:	e6c5      	b.n	8007a74 <CheckAttachedButtons+0x74>
					if (connected == GPIO_PIN_SET)	
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d100      	bne.n	8007cf0 <CheckAttachedButtons+0x2f0>
 8007cee:	e713      	b.n	8007b18 <CheckAttachedButtons+0x118>
					else if (connected == GPIO_PIN_RESET) 
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d000      	beq.n	8007cf6 <CheckAttachedButtons+0x2f6>
 8007cf4:	e6be      	b.n	8007a74 <CheckAttachedButtons+0x74>
						state = OPEN;	
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	e6c5      	b.n	8007a88 <CheckAttachedButtons+0x88>
					buttonReleasedCallback(i);
 8007cfc:	0020      	movs	r0, r4
 8007cfe:	f7ff fdfe 	bl	80078fe <buttonReleasedCallback>
					button[i].state = NONE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	4652      	mov	r2, sl
 8007d06:	7013      	strb	r3, [r2, #0]
      		break;
 8007d08:	e7a5      	b.n	8007c56 <CheckAttachedButtons+0x256>
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	200011b0 	.word	0x200011b0
 8007d10:	20001218 	.word	0x20001218
 8007d14:	200011fc 	.word	0x200011fc
 8007d18:	200011f0 	.word	0x200011f0
 8007d1c:	0000fffe 	.word	0x0000fffe
 8007d20:	200011ef 	.word	0x200011ef
 8007d24:	20006600 	.word	0x20006600
 8007d28:	0000fe0a 	.word	0x0000fe0a
 8007d2c:	200011f7 	.word	0x200011f7
 8007d30:	0801a3f0 	.word	0x0801a3f0
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8007d34:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d18c      	bne.n	8007c56 <CheckAttachedButtons+0x256>
 8007d3c:	4653      	mov	r3, sl
 8007d3e:	7a1b      	ldrb	r3, [r3, #8]
 8007d40:	075b      	lsls	r3, r3, #29
 8007d42:	d588      	bpl.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007d44:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	0020      	movs	r0, r4
 8007d4e:	f7ff fdd9 	bl	8007904 <buttonPressedForXCallback>
 8007d52:	e780      	b.n	8007c56 <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8007d54:	4b33      	ldr	r3, [pc, #204]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d000      	beq.n	8007d5e <CheckAttachedButtons+0x35e>
 8007d5c:	e77b      	b.n	8007c56 <CheckAttachedButtons+0x256>
 8007d5e:	4653      	mov	r3, sl
 8007d60:	7a1b      	ldrb	r3, [r3, #8]
 8007d62:	071b      	lsls	r3, r3, #28
 8007d64:	d400      	bmi.n	8007d68 <CheckAttachedButtons+0x368>
 8007d66:	e776      	b.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007d68:	4b2e      	ldr	r3, [pc, #184]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8007d6e:	2102      	movs	r1, #2
 8007d70:	0020      	movs	r0, r4
 8007d72:	f7ff fdc7 	bl	8007904 <buttonPressedForXCallback>
 8007d76:	e76e      	b.n	8007c56 <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8007d78:	4b2a      	ldr	r3, [pc, #168]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d000      	beq.n	8007d82 <CheckAttachedButtons+0x382>
 8007d80:	e769      	b.n	8007c56 <CheckAttachedButtons+0x256>
 8007d82:	4653      	mov	r3, sl
 8007d84:	7a1b      	ldrb	r3, [r3, #8]
 8007d86:	06db      	lsls	r3, r3, #27
 8007d88:	d400      	bmi.n	8007d8c <CheckAttachedButtons+0x38c>
 8007d8a:	e764      	b.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007d8c:	4b25      	ldr	r3, [pc, #148]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8007d92:	2103      	movs	r1, #3
 8007d94:	0020      	movs	r0, r4
 8007d96:	f7ff fdb5 	bl	8007904 <buttonPressedForXCallback>
 8007d9a:	e75c      	b.n	8007c56 <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8007d9c:	4b21      	ldr	r3, [pc, #132]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d000      	beq.n	8007da6 <CheckAttachedButtons+0x3a6>
 8007da4:	e757      	b.n	8007c56 <CheckAttachedButtons+0x256>
 8007da6:	4653      	mov	r3, sl
 8007da8:	7a1b      	ldrb	r3, [r3, #8]
 8007daa:	069b      	lsls	r3, r3, #26
 8007dac:	d400      	bmi.n	8007db0 <CheckAttachedButtons+0x3b0>
 8007dae:	e752      	b.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007db0:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 8007db6:	2101      	movs	r1, #1
 8007db8:	0020      	movs	r0, r4
 8007dba:	f7ff fda4 	bl	8007906 <buttonReleasedForYCallback>
 8007dbe:	e74a      	b.n	8007c56 <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8007dc0:	4b18      	ldr	r3, [pc, #96]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d000      	beq.n	8007dca <CheckAttachedButtons+0x3ca>
 8007dc8:	e745      	b.n	8007c56 <CheckAttachedButtons+0x256>
 8007dca:	4653      	mov	r3, sl
 8007dcc:	7a1b      	ldrb	r3, [r3, #8]
 8007dce:	065b      	lsls	r3, r3, #25
 8007dd0:	d400      	bmi.n	8007dd4 <CheckAttachedButtons+0x3d4>
 8007dd2:	e740      	b.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8007dda:	2102      	movs	r1, #2
 8007ddc:	0020      	movs	r0, r4
 8007dde:	f7ff fd92 	bl	8007906 <buttonReleasedForYCallback>
 8007de2:	e738      	b.n	8007c56 <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d000      	beq.n	8007dee <CheckAttachedButtons+0x3ee>
 8007dec:	e733      	b.n	8007c56 <CheckAttachedButtons+0x256>
 8007dee:	4653      	mov	r3, sl
 8007df0:	7a1b      	ldrb	r3, [r3, #8]
 8007df2:	2b7f      	cmp	r3, #127	; 0x7f
 8007df4:	d800      	bhi.n	8007df8 <CheckAttachedButtons+0x3f8>
 8007df6:	e72e      	b.n	8007c56 <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <CheckAttachedButtons+0x424>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8007dfe:	2103      	movs	r1, #3
 8007e00:	0020      	movs	r0, r4
 8007e02:	f7ff fd80 	bl	8007906 <buttonReleasedForYCallback>
 8007e06:	e726      	b.n	8007c56 <CheckAttachedButtons+0x256>
						state = OPEN;			
 8007e08:	2303      	movs	r3, #3
 8007e0a:	9302      	str	r3, [sp, #8]
 8007e0c:	e63c      	b.n	8007a88 <CheckAttachedButtons+0x88>
						state = OFF;
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	9302      	str	r3, [sp, #8]
			if (state == OPEN || state == OFF)												
 8007e12:	e639      	b.n	8007a88 <CheckAttachedButtons+0x88>
}
 8007e14:	b009      	add	sp, #36	; 0x24
 8007e16:	bcf0      	pop	{r4, r5, r6, r7}
 8007e18:	46bb      	mov	fp, r7
 8007e1a:	46b2      	mov	sl, r6
 8007e1c:	46a9      	mov	r9, r5
 8007e1e:	46a0      	mov	r8, r4
 8007e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	200011f7 	.word	0x200011f7

08007e28 <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b08d      	sub	sp, #52	; 0x34
 8007e2c:	0006      	movs	r6, r0
 8007e2e:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8007e30:	4b41      	ldr	r3, [pc, #260]	; (8007f38 <AddPortButton+0x110>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d157      	bne.n	8007ee8 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8007e38:	4b40      	ldr	r3, [pc, #256]	; (8007f3c <AddPortButton+0x114>)
 8007e3a:	2204      	movs	r2, #4
 8007e3c:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8007e3e:	4b3e      	ldr	r3, [pc, #248]	; (8007f38 <AddPortButton+0x110>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d15a      	bne.n	8007efc <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8007e46:	2512      	movs	r5, #18
 8007e48:	446d      	add	r5, sp
 8007e4a:	af04      	add	r7, sp, #16
 8007e4c:	9700      	str	r7, [sp, #0]
 8007e4e:	ab05      	add	r3, sp, #20
 8007e50:	002a      	movs	r2, r5
 8007e52:	a906      	add	r1, sp, #24
 8007e54:	0020      	movs	r0, r4
 8007e56:	f003 fe57 	bl	800bb08 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8007e5a:	882b      	ldrh	r3, [r5, #0]
 8007e5c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e62:	2500      	movs	r5, #0
 8007e64:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007e66:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8007e68:	a907      	add	r1, sp, #28
 8007e6a:	9806      	ldr	r0, [sp, #24]
 8007e6c:	f007 fd8e 	bl	800f98c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8007e70:	883b      	ldrh	r3, [r7, #0]
 8007e72:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e74:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007e76:	2302      	movs	r3, #2
 8007e78:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 8007e7a:	a907      	add	r1, sp, #28
 8007e7c:	9805      	ldr	r0, [sp, #20]
 8007e7e:	f007 fd85 	bl	800f98c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8007e82:	00e2      	lsls	r2, r4, #3
 8007e84:	1912      	adds	r2, r2, r4
 8007e86:	4b2e      	ldr	r3, [pc, #184]	; (8007f40 <AddPortButton+0x118>)
 8007e88:	189b      	adds	r3, r3, r2
 8007e8a:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007e8c:	0025      	movs	r5, r4
 8007e8e:	353a      	adds	r5, #58	; 0x3a
 8007e90:	00ad      	lsls	r5, r5, #2
 8007e92:	210e      	movs	r1, #14
 8007e94:	4469      	add	r1, sp
 8007e96:	0028      	movs	r0, r5
 8007e98:	f7ff f892 	bl	8006fc0 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d133      	bne.n	8007f08 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8007ea0:	230e      	movs	r3, #14
 8007ea2:	446b      	add	r3, sp
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8007ea8:	0b1b      	lsrs	r3, r3, #12
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	d103      	bne.n	8007eb6 <AddPortButton+0x8e>
 8007eae:	230f      	movs	r3, #15
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	42b3      	cmp	r3, r6
 8007eb4:	d015      	beq.n	8007ee2 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8007eb6:	0324      	lsls	r4, r4, #12
 8007eb8:	0231      	lsls	r1, r6, #8
 8007eba:	4321      	orrs	r1, r4
 8007ebc:	b289      	uxth	r1, r1
 8007ebe:	230e      	movs	r3, #14
 8007ec0:	446b      	add	r3, sp
 8007ec2:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8007ec4:	0028      	movs	r0, r5
 8007ec6:	f7ff f8a7 	bl	8007018 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007eca:	1c68      	adds	r0, r5, #1
 8007ecc:	2100      	movs	r1, #0
 8007ece:	f7ff f8a3 	bl	8007018 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007ed2:	1ca8      	adds	r0, r5, #2
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f7ff f89f 	bl	8007018 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8007eda:	1ce8      	adds	r0, r5, #3
 8007edc:	2100      	movs	r1, #0
 8007ede:	f7ff f89b 	bl	8007018 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	b00d      	add	sp, #52	; 0x34
 8007ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8007ee8:	008d      	lsls	r5, r1, #2
 8007eea:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <AddPortButton+0x11c>)
 8007eec:	58e8      	ldr	r0, [r5, r3]
 8007eee:	f004 fd35 	bl	800c95c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <AddPortButton+0x120>)
 8007ef4:	58e8      	ldr	r0, [r5, r3]
 8007ef6:	f004 fd31 	bl	800c95c <osSemaphoreRelease>
 8007efa:	e79d      	b.n	8007e38 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8007efc:	0020      	movs	r0, r4
 8007efe:	f004 fb8f 	bl	800c620 <GetUart>
 8007f02:	f008 fe00 	bl	8010b06 <HAL_UART_DeInit>
 8007f06:	e79e      	b.n	8007e46 <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8007f08:	0324      	lsls	r4, r4, #12
 8007f0a:	0231      	lsls	r1, r6, #8
 8007f0c:	4321      	orrs	r1, r4
 8007f0e:	b289      	uxth	r1, r1
 8007f10:	230e      	movs	r3, #14
 8007f12:	446b      	add	r3, sp
 8007f14:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8007f16:	0028      	movs	r0, r5
 8007f18:	f7ff f87e 	bl	8007018 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007f1c:	1c68      	adds	r0, r5, #1
 8007f1e:	2100      	movs	r1, #0
 8007f20:	f7ff f87a 	bl	8007018 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007f24:	1ca8      	adds	r0, r5, #2
 8007f26:	2100      	movs	r1, #0
 8007f28:	f7ff f876 	bl	8007018 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8007f2c:	1ce8      	adds	r0, r5, #3
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f7ff f872 	bl	8007018 <EE_WriteVariable>
 8007f34:	e7d5      	b.n	8007ee2 <AddPortButton+0xba>
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	20000ad5 	.word	0x20000ad5
 8007f3c:	20000dcc 	.word	0x20000dcc
 8007f40:	200011b0 	.word	0x200011b0
 8007f44:	2000669c 	.word	0x2000669c
 8007f48:	20006680 	.word	0x20006680

08007f4c <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8007f52:	4837      	ldr	r0, [pc, #220]	; (8008030 <RemovePortButton+0xe4>)
 8007f54:	00e9      	lsls	r1, r5, #3
 8007f56:	1949      	adds	r1, r1, r5
 8007f58:	1842      	adds	r2, r0, r1
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8007f5e:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8007f60:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8007f62:	7093      	strb	r3, [r2, #2]
 8007f64:	70d3      	strb	r3, [r2, #3]
 8007f66:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8007f68:	7153      	strb	r3, [r2, #5]
 8007f6a:	7193      	strb	r3, [r2, #6]
 8007f6c:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007f6e:	002c      	movs	r4, r5
 8007f70:	343a      	adds	r4, #58	; 0x3a
 8007f72:	00a4      	lsls	r4, r4, #2
 8007f74:	466b      	mov	r3, sp
 8007f76:	1d99      	adds	r1, r3, #6
 8007f78:	0020      	movs	r0, r4
 8007f7a:	f7ff f821 	bl	8006fc0 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d02b      	beq.n	8007fda <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8007f82:	0028      	movs	r0, r5
 8007f84:	f004 fb4c 	bl	800c620 <GetUart>
 8007f88:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 8007f8a:	6803      	ldr	r3, [r0, #0]
 8007f8c:	4a29      	ldr	r2, [pc, #164]	; (8008034 <RemovePortButton+0xe8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d034      	beq.n	8007ffc <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8007f92:	4a29      	ldr	r2, [pc, #164]	; (8008038 <RemovePortButton+0xec>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d035      	beq.n	8008004 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8007f98:	4a28      	ldr	r2, [pc, #160]	; (800803c <RemovePortButton+0xf0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d036      	beq.n	800800c <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 8007f9e:	4a28      	ldr	r2, [pc, #160]	; (8008040 <RemovePortButton+0xf4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d037      	beq.n	8008014 <RemovePortButton+0xc8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 8007fa4:	4a27      	ldr	r2, [pc, #156]	; (8008044 <RemovePortButton+0xf8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d038      	beq.n	800801c <RemovePortButton+0xd0>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 8007faa:	4a27      	ldr	r2, [pc, #156]	; (8008048 <RemovePortButton+0xfc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d039      	beq.n	8008024 <RemovePortButton+0xd8>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8007fb0:	4a26      	ldr	r2, [pc, #152]	; (800804c <RemovePortButton+0x100>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d03a      	beq.n	800802c <RemovePortButton+0xe0>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 8007fb6:	4a26      	ldr	r2, [pc, #152]	; (8008050 <RemovePortButton+0x104>)
 8007fb8:	4694      	mov	ip, r2
 8007fba:	4463      	add	r3, ip
 8007fbc:	1e5c      	subs	r4, r3, #1
 8007fbe:	41a3      	sbcs	r3, r4
 8007fc0:	425c      	negs	r4, r3
 8007fc2:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8007fc4:	4b23      	ldr	r3, [pc, #140]	; (8008054 <RemovePortButton+0x108>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8007fca:	3201      	adds	r2, #1
 8007fcc:	4922      	ldr	r1, [pc, #136]	; (8008058 <RemovePortButton+0x10c>)
 8007fce:	0030      	movs	r0, r6
 8007fd0:	f008 fdf2 	bl	8010bb8 <HAL_UART_Receive_IT>
	
	return result;
}
 8007fd4:	0020      	movs	r0, r4
 8007fd6:	b002      	add	sp, #8
 8007fd8:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8007fda:	2100      	movs	r1, #0
 8007fdc:	0020      	movs	r0, r4
 8007fde:	f7ff f81b 	bl	8007018 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007fe2:	1c60      	adds	r0, r4, #1
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f7ff f817 	bl	8007018 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007fea:	1ca0      	adds	r0, r4, #2
 8007fec:	2100      	movs	r1, #0
 8007fee:	f7ff f813 	bl	8007018 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8007ff2:	1ce0      	adds	r0, r4, #3
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	f7ff f80f 	bl	8007018 <EE_WriteVariable>
 8007ffa:	e7c2      	b.n	8007f82 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8007ffc:	f004 f93c 	bl	800c278 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008000:	2400      	movs	r4, #0
 8008002:	e7df      	b.n	8007fc4 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008004:	f004 f950 	bl	800c2a8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008008:	2400      	movs	r4, #0
 800800a:	e7db      	b.n	8007fc4 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800800c:	f004 f964 	bl	800c2d8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008010:	2400      	movs	r4, #0
 8008012:	e7d7      	b.n	8007fc4 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008014:	f004 f978 	bl	800c308 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008018:	2400      	movs	r4, #0
 800801a:	e7d3      	b.n	8007fc4 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800801c:	f004 f98c 	bl	800c338 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008020:	2400      	movs	r4, #0
 8008022:	e7cf      	b.n	8007fc4 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008024:	f004 f9a0 	bl	800c368 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008028:	2400      	movs	r4, #0
 800802a:	e7cb      	b.n	8007fc4 <RemovePortButton+0x78>
 800802c:	2400      	movs	r4, #0
 800802e:	e7c9      	b.n	8007fc4 <RemovePortButton+0x78>
 8008030:	200011b0 	.word	0x200011b0
 8008034:	40013800 	.word	0x40013800
 8008038:	40004400 	.word	0x40004400
 800803c:	40004800 	.word	0x40004800
 8008040:	40004c00 	.word	0x40004c00
 8008044:	40005000 	.word	0x40005000
 8008048:	40011400 	.word	0x40011400
 800804c:	40011800 	.word	0x40011800
 8008050:	bffee400 	.word	0xbffee400
 8008054:	20000dcc 	.word	0x20000dcc
 8008058:	20000c64 	.word	0x20000c64

0800805c <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 800805c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805e:	46de      	mov	lr, fp
 8008060:	4657      	mov	r7, sl
 8008062:	464e      	mov	r6, r9
 8008064:	4645      	mov	r5, r8
 8008066:	b5e0      	push	{r5, r6, r7, lr}
 8008068:	b085      	sub	sp, #20
 800806a:	0005      	movs	r5, r0
 800806c:	469c      	mov	ip, r3
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	ab0e      	add	r3, sp, #56	; 0x38
 8008072:	781e      	ldrb	r6, [r3, #0]
 8008074:	ab0f      	add	r3, sp, #60	; 0x3c
 8008076:	781f      	ldrb	r7, [r3, #0]
 8008078:	ab10      	add	r3, sp, #64	; 0x40
 800807a:	7818      	ldrb	r0, [r3, #0]
 800807c:	4681      	mov	r9, r0
 800807e:	ab11      	add	r3, sp, #68	; 0x44
 8008080:	7818      	ldrb	r0, [r3, #0]
 8008082:	4682      	mov	sl, r0
 8008084:	ab12      	add	r3, sp, #72	; 0x48
 8008086:	7818      	ldrb	r0, [r3, #0]
 8008088:	4680      	mov	r8, r0
 800808a:	ab13      	add	r3, sp, #76	; 0x4c
 800808c:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 800808e:	00ec      	lsls	r4, r5, #3
 8008090:	1964      	adds	r4, r4, r5
 8008092:	4bcd      	ldr	r3, [pc, #820]	; (80083c8 <SetButtonEvents+0x36c>)
 8008094:	191b      	adds	r3, r3, r4
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d100      	bne.n	800809e <SetButtonEvents+0x42>
 800809c:	e08c      	b.n	80081b8 <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 800809e:	00ec      	lsls	r4, r5, #3
 80080a0:	1964      	adds	r4, r4, r5
 80080a2:	4bc9      	ldr	r3, [pc, #804]	; (80083c8 <SetButtonEvents+0x36c>)
 80080a4:	191b      	adds	r3, r3, r4
 80080a6:	4664      	mov	r4, ip
 80080a8:	709c      	strb	r4, [r3, #2]
 80080aa:	70de      	strb	r6, [r3, #3]
 80080ac:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 80080ae:	464c      	mov	r4, r9
 80080b0:	715c      	strb	r4, [r3, #5]
 80080b2:	4654      	mov	r4, sl
 80080b4:	719c      	strb	r4, [r3, #6]
 80080b6:	4644      	mov	r4, r8
 80080b8:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 80080ba:	2801      	cmp	r0, #1
 80080bc:	d100      	bne.n	80080c0 <SetButtonEvents+0x64>
 80080be:	e0ec      	b.n	800829a <SetButtonEvents+0x23e>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d000      	beq.n	80080c6 <SetButtonEvents+0x6a>
 80080c4:	e124      	b.n	8008310 <SetButtonEvents+0x2b4>
 80080c6:	2900      	cmp	r1, #0
 80080c8:	d000      	beq.n	80080cc <SetButtonEvents+0x70>
 80080ca:	e170      	b.n	80083ae <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 80080cc:	00e9      	lsls	r1, r5, #3
 80080ce:	1949      	adds	r1, r1, r5
 80080d0:	4bbd      	ldr	r3, [pc, #756]	; (80083c8 <SetButtonEvents+0x36c>)
 80080d2:	185b      	adds	r3, r3, r1
 80080d4:	7a19      	ldrb	r1, [r3, #8]
 80080d6:	2401      	movs	r4, #1
 80080d8:	43a1      	bics	r1, r4
 80080da:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d100      	bne.n	80080e2 <SetButtonEvents+0x86>
 80080e0:	e0c3      	b.n	800826a <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80080e2:	00ea      	lsls	r2, r5, #3
 80080e4:	1952      	adds	r2, r2, r5
 80080e6:	4bb8      	ldr	r3, [pc, #736]	; (80083c8 <SetButtonEvents+0x36c>)
 80080e8:	189b      	adds	r3, r3, r2
 80080ea:	7a1a      	ldrb	r2, [r3, #8]
 80080ec:	2102      	movs	r1, #2
 80080ee:	430a      	orrs	r2, r1
 80080f0:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 80080f2:	2801      	cmp	r0, #1
 80080f4:	d100      	bne.n	80080f8 <SetButtonEvents+0x9c>
 80080f6:	e0da      	b.n	80082ae <SetButtonEvents+0x252>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d100      	bne.n	80080fe <SetButtonEvents+0xa2>
 80080fc:	e0bd      	b.n	800827a <SetButtonEvents+0x21e>
 80080fe:	e107      	b.n	8008310 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008100:	00ea      	lsls	r2, r5, #3
 8008102:	1952      	adds	r2, r2, r5
 8008104:	4bb0      	ldr	r3, [pc, #704]	; (80083c8 <SetButtonEvents+0x36c>)
 8008106:	189b      	adds	r3, r3, r2
 8008108:	7a1a      	ldrb	r2, [r3, #8]
 800810a:	2110      	movs	r1, #16
 800810c:	430a      	orrs	r2, r1
 800810e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008110:	2801      	cmp	r0, #1
 8008112:	d100      	bne.n	8008116 <SetButtonEvents+0xba>
 8008114:	e0e3      	b.n	80082de <SetButtonEvents+0x282>
 8008116:	2800      	cmp	r0, #0
 8008118:	d000      	beq.n	800811c <SetButtonEvents+0xc0>
 800811a:	e0f9      	b.n	8008310 <SetButtonEvents+0x2b4>
 800811c:	464b      	mov	r3, r9
 800811e:	2b00      	cmp	r3, #0
 8008120:	d063      	beq.n	80081ea <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008122:	00ea      	lsls	r2, r5, #3
 8008124:	1952      	adds	r2, r2, r5
 8008126:	4ba8      	ldr	r3, [pc, #672]	; (80083c8 <SetButtonEvents+0x36c>)
 8008128:	189b      	adds	r3, r3, r2
 800812a:	7a1a      	ldrb	r2, [r3, #8]
 800812c:	2120      	movs	r1, #32
 800812e:	430a      	orrs	r2, r1
 8008130:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008132:	e00a      	b.n	800814a <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008134:	00ea      	lsls	r2, r5, #3
 8008136:	1952      	adds	r2, r2, r5
 8008138:	4ba3      	ldr	r3, [pc, #652]	; (80083c8 <SetButtonEvents+0x36c>)
 800813a:	189b      	adds	r3, r3, r2
 800813c:	7a1a      	ldrb	r2, [r3, #8]
 800813e:	2120      	movs	r1, #32
 8008140:	430a      	orrs	r2, r1
 8008142:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008144:	2801      	cmp	r0, #1
 8008146:	d100      	bne.n	800814a <SetButtonEvents+0xee>
 8008148:	e0d1      	b.n	80082ee <SetButtonEvents+0x292>
 800814a:	2800      	cmp	r0, #0
 800814c:	d000      	beq.n	8008150 <SetButtonEvents+0xf4>
 800814e:	e0df      	b.n	8008310 <SetButtonEvents+0x2b4>
 8008150:	4653      	mov	r3, sl
 8008152:	2b00      	cmp	r3, #0
 8008154:	d054      	beq.n	8008200 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008156:	00ea      	lsls	r2, r5, #3
 8008158:	1952      	adds	r2, r2, r5
 800815a:	4b9b      	ldr	r3, [pc, #620]	; (80083c8 <SetButtonEvents+0x36c>)
 800815c:	189b      	adds	r3, r3, r2
 800815e:	7a1a      	ldrb	r2, [r3, #8]
 8008160:	2140      	movs	r1, #64	; 0x40
 8008162:	430a      	orrs	r2, r1
 8008164:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008166:	e00a      	b.n	800817e <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008168:	00ea      	lsls	r2, r5, #3
 800816a:	1952      	adds	r2, r2, r5
 800816c:	4b96      	ldr	r3, [pc, #600]	; (80083c8 <SetButtonEvents+0x36c>)
 800816e:	189b      	adds	r3, r3, r2
 8008170:	7a1a      	ldrb	r2, [r3, #8]
 8008172:	2140      	movs	r1, #64	; 0x40
 8008174:	430a      	orrs	r2, r1
 8008176:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008178:	2801      	cmp	r0, #1
 800817a:	d100      	bne.n	800817e <SetButtonEvents+0x122>
 800817c:	e0bf      	b.n	80082fe <SetButtonEvents+0x2a2>
 800817e:	2800      	cmp	r0, #0
 8008180:	d046      	beq.n	8008210 <SetButtonEvents+0x1b4>
 8008182:	e0c5      	b.n	8008310 <SetButtonEvents+0x2b4>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008184:	0a19      	lsrs	r1, r3, #8
 8008186:	0209      	lsls	r1, r1, #8
 8008188:	4301      	orrs	r1, r0
 800818a:	ab02      	add	r3, sp, #8
 800818c:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 800818e:	0020      	movs	r0, r4
 8008190:	f7fe ff42 	bl	8007018 <EE_WriteVariable>
 8008194:	e0d3      	b.n	800833e <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008196:	464b      	mov	r3, r9
 8008198:	4319      	orrs	r1, r3
 800819a:	4658      	mov	r0, fp
 800819c:	f7fe ff3c 	bl	8007018 <EE_WriteVariable>
 80081a0:	e0dd      	b.n	800835e <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 80081a2:	0019      	movs	r1, r3
 80081a4:	0028      	movs	r0, r5
 80081a6:	f7fe ff37 	bl	8007018 <EE_WriteVariable>
 80081aa:	e0ea      	b.n	8008382 <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 80081ac:	0019      	movs	r1, r3
 80081ae:	0020      	movs	r0, r4
 80081b0:	f7fe ff32 	bl	8007018 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 80081b4:	2000      	movs	r0, #0
 80081b6:	e0f3      	b.n	80083a0 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80081b8:	200b      	movs	r0, #11
 80081ba:	e0f1      	b.n	80083a0 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 80081bc:	200b      	movs	r0, #11
 80081be:	e0ef      	b.n	80083a0 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 80081c0:	00ea      	lsls	r2, r5, #3
 80081c2:	1952      	adds	r2, r2, r5
 80081c4:	4b80      	ldr	r3, [pc, #512]	; (80083c8 <SetButtonEvents+0x36c>)
 80081c6:	189b      	adds	r3, r3, r2
 80081c8:	7a1a      	ldrb	r2, [r3, #8]
 80081ca:	2108      	movs	r1, #8
 80081cc:	438a      	bics	r2, r1
 80081ce:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 80081d0:	2f00      	cmp	r7, #0
 80081d2:	d195      	bne.n	8008100 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 80081d4:	00ea      	lsls	r2, r5, #3
 80081d6:	1952      	adds	r2, r2, r5
 80081d8:	4b7b      	ldr	r3, [pc, #492]	; (80083c8 <SetButtonEvents+0x36c>)
 80081da:	189b      	adds	r3, r3, r2
 80081dc:	7a1a      	ldrb	r2, [r3, #8]
 80081de:	2110      	movs	r1, #16
 80081e0:	438a      	bics	r2, r1
 80081e2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 80081e4:	464b      	mov	r3, r9
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1a4      	bne.n	8008134 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 80081ea:	00ea      	lsls	r2, r5, #3
 80081ec:	1952      	adds	r2, r2, r5
 80081ee:	4b76      	ldr	r3, [pc, #472]	; (80083c8 <SetButtonEvents+0x36c>)
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	7a1a      	ldrb	r2, [r3, #8]
 80081f4:	2120      	movs	r1, #32
 80081f6:	438a      	bics	r2, r1
 80081f8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 80081fa:	4653      	mov	r3, sl
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1b3      	bne.n	8008168 <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008200:	00ea      	lsls	r2, r5, #3
 8008202:	1952      	adds	r2, r2, r5
 8008204:	4b70      	ldr	r3, [pc, #448]	; (80083c8 <SetButtonEvents+0x36c>)
 8008206:	189b      	adds	r3, r3, r2
 8008208:	7a1a      	ldrb	r2, [r3, #8]
 800820a:	2140      	movs	r1, #64	; 0x40
 800820c:	438a      	bics	r2, r1
 800820e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008210:	4643      	mov	r3, r8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d173      	bne.n	80082fe <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008216:	00ea      	lsls	r2, r5, #3
 8008218:	1952      	adds	r2, r2, r5
 800821a:	4b6b      	ldr	r3, [pc, #428]	; (80083c8 <SetButtonEvents+0x36c>)
 800821c:	189b      	adds	r3, r3, r2
 800821e:	7a19      	ldrb	r1, [r3, #8]
 8008220:	227f      	movs	r2, #127	; 0x7f
 8008222:	400a      	ands	r2, r1
 8008224:	721a      	strb	r2, [r3, #8]
 8008226:	e073      	b.n	8008310 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008228:	00ea      	lsls	r2, r5, #3
 800822a:	1952      	adds	r2, r2, r5
 800822c:	4b66      	ldr	r3, [pc, #408]	; (80083c8 <SetButtonEvents+0x36c>)
 800822e:	189b      	adds	r3, r3, r2
 8008230:	7a1a      	ldrb	r2, [r3, #8]
 8008232:	2104      	movs	r1, #4
 8008234:	438a      	bics	r2, r1
 8008236:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008238:	2e00      	cmp	r6, #0
 800823a:	d0c1      	beq.n	80081c0 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800823c:	00ea      	lsls	r2, r5, #3
 800823e:	1952      	adds	r2, r2, r5
 8008240:	4b61      	ldr	r3, [pc, #388]	; (80083c8 <SetButtonEvents+0x36c>)
 8008242:	189b      	adds	r3, r3, r2
 8008244:	7a1a      	ldrb	r2, [r3, #8]
 8008246:	2108      	movs	r1, #8
 8008248:	430a      	orrs	r2, r1
 800824a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 800824c:	2801      	cmp	r0, #1
 800824e:	d03e      	beq.n	80082ce <SetButtonEvents+0x272>
 8008250:	2800      	cmp	r0, #0
 8008252:	d15d      	bne.n	8008310 <SetButtonEvents+0x2b4>
 8008254:	2f00      	cmp	r7, #0
 8008256:	d0bd      	beq.n	80081d4 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008258:	00ea      	lsls	r2, r5, #3
 800825a:	1952      	adds	r2, r2, r5
 800825c:	4b5a      	ldr	r3, [pc, #360]	; (80083c8 <SetButtonEvents+0x36c>)
 800825e:	189b      	adds	r3, r3, r2
 8008260:	7a1a      	ldrb	r2, [r3, #8]
 8008262:	2110      	movs	r1, #16
 8008264:	430a      	orrs	r2, r1
 8008266:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008268:	e755      	b.n	8008116 <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 800826a:	00ea      	lsls	r2, r5, #3
 800826c:	1952      	adds	r2, r2, r5
 800826e:	4b56      	ldr	r3, [pc, #344]	; (80083c8 <SetButtonEvents+0x36c>)
 8008270:	189b      	adds	r3, r3, r2
 8008272:	7a1a      	ldrb	r2, [r3, #8]
 8008274:	2102      	movs	r1, #2
 8008276:	438a      	bics	r2, r1
 8008278:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0d3      	beq.n	8008228 <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008280:	00ea      	lsls	r2, r5, #3
 8008282:	1952      	adds	r2, r2, r5
 8008284:	4b50      	ldr	r3, [pc, #320]	; (80083c8 <SetButtonEvents+0x36c>)
 8008286:	189b      	adds	r3, r3, r2
 8008288:	7a1a      	ldrb	r2, [r3, #8]
 800828a:	2104      	movs	r1, #4
 800828c:	430a      	orrs	r2, r1
 800828e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008290:	2801      	cmp	r0, #1
 8008292:	d014      	beq.n	80082be <SetButtonEvents+0x262>
 8008294:	2800      	cmp	r0, #0
 8008296:	d0cf      	beq.n	8008238 <SetButtonEvents+0x1dc>
 8008298:	e03a      	b.n	8008310 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800829a:	00eb      	lsls	r3, r5, #3
 800829c:	195b      	adds	r3, r3, r5
 800829e:	4a4a      	ldr	r2, [pc, #296]	; (80083c8 <SetButtonEvents+0x36c>)
 80082a0:	18d2      	adds	r2, r2, r3
 80082a2:	7a13      	ldrb	r3, [r2, #8]
 80082a4:	2101      	movs	r1, #1
 80082a6:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80082a8:	2102      	movs	r1, #2
 80082aa:	430b      	orrs	r3, r1
 80082ac:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80082ae:	00ea      	lsls	r2, r5, #3
 80082b0:	1952      	adds	r2, r2, r5
 80082b2:	4b45      	ldr	r3, [pc, #276]	; (80083c8 <SetButtonEvents+0x36c>)
 80082b4:	189b      	adds	r3, r3, r2
 80082b6:	7a1a      	ldrb	r2, [r3, #8]
 80082b8:	2104      	movs	r1, #4
 80082ba:	430a      	orrs	r2, r1
 80082bc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80082be:	00ea      	lsls	r2, r5, #3
 80082c0:	1952      	adds	r2, r2, r5
 80082c2:	4b41      	ldr	r3, [pc, #260]	; (80083c8 <SetButtonEvents+0x36c>)
 80082c4:	189b      	adds	r3, r3, r2
 80082c6:	7a1a      	ldrb	r2, [r3, #8]
 80082c8:	2108      	movs	r1, #8
 80082ca:	430a      	orrs	r2, r1
 80082cc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80082ce:	00ea      	lsls	r2, r5, #3
 80082d0:	1952      	adds	r2, r2, r5
 80082d2:	4b3d      	ldr	r3, [pc, #244]	; (80083c8 <SetButtonEvents+0x36c>)
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	7a1a      	ldrb	r2, [r3, #8]
 80082d8:	2110      	movs	r1, #16
 80082da:	430a      	orrs	r2, r1
 80082dc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80082de:	00ea      	lsls	r2, r5, #3
 80082e0:	1952      	adds	r2, r2, r5
 80082e2:	4b39      	ldr	r3, [pc, #228]	; (80083c8 <SetButtonEvents+0x36c>)
 80082e4:	189b      	adds	r3, r3, r2
 80082e6:	7a1a      	ldrb	r2, [r3, #8]
 80082e8:	2120      	movs	r1, #32
 80082ea:	430a      	orrs	r2, r1
 80082ec:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80082ee:	00ea      	lsls	r2, r5, #3
 80082f0:	1952      	adds	r2, r2, r5
 80082f2:	4b35      	ldr	r3, [pc, #212]	; (80083c8 <SetButtonEvents+0x36c>)
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	7a1a      	ldrb	r2, [r3, #8]
 80082f8:	2140      	movs	r1, #64	; 0x40
 80082fa:	430a      	orrs	r2, r1
 80082fc:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 80082fe:	00ea      	lsls	r2, r5, #3
 8008300:	1952      	adds	r2, r2, r5
 8008302:	4b31      	ldr	r3, [pc, #196]	; (80083c8 <SetButtonEvents+0x36c>)
 8008304:	189b      	adds	r3, r3, r2
 8008306:	7a19      	ldrb	r1, [r3, #8]
 8008308:	2280      	movs	r2, #128	; 0x80
 800830a:	4252      	negs	r2, r2
 800830c:	430a      	orrs	r2, r1
 800830e:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008310:	002c      	movs	r4, r5
 8008312:	343a      	adds	r4, #58	; 0x3a
 8008314:	00a4      	lsls	r4, r4, #2
 8008316:	ab02      	add	r3, sp, #8
 8008318:	1d99      	adds	r1, r3, #6
 800831a:	0020      	movs	r0, r4
 800831c:	f7fe fe50 	bl	8006fc0 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008320:	2800      	cmp	r0, #0
 8008322:	d000      	beq.n	8008326 <SetButtonEvents+0x2ca>
 8008324:	e74a      	b.n	80081bc <SetButtonEvents+0x160>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008326:	ab02      	add	r3, sp, #8
 8008328:	1d9a      	adds	r2, r3, #6
 800832a:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 800832c:	00e8      	lsls	r0, r5, #3
 800832e:	1945      	adds	r5, r0, r5
 8008330:	4825      	ldr	r0, [pc, #148]	; (80083c8 <SetButtonEvents+0x36c>)
 8008332:	1940      	adds	r0, r0, r5
 8008334:	7a00      	ldrb	r0, [r0, #8]
 8008336:	7812      	ldrb	r2, [r2, #0]
 8008338:	4282      	cmp	r2, r0
 800833a:	d000      	beq.n	800833e <SetButtonEvents+0x2e2>
 800833c:	e722      	b.n	8008184 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 800833e:	1c63      	adds	r3, r4, #1
 8008340:	469b      	mov	fp, r3
 8008342:	ab02      	add	r3, sp, #8
 8008344:	1d9d      	adds	r5, r3, #6
 8008346:	0029      	movs	r1, r5
 8008348:	4658      	mov	r0, fp
 800834a:	f7fe fe39 	bl	8006fc0 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	0219      	lsls	r1, r3, #8
 8008352:	882a      	ldrh	r2, [r5, #0]
 8008354:	464b      	mov	r3, r9
 8008356:	430b      	orrs	r3, r1
 8008358:	429a      	cmp	r2, r3
 800835a:	d000      	beq.n	800835e <SetButtonEvents+0x302>
 800835c:	e71b      	b.n	8008196 <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 800835e:	1ca5      	adds	r5, r4, #2
 8008360:	2306      	movs	r3, #6
 8008362:	aa02      	add	r2, sp, #8
 8008364:	4694      	mov	ip, r2
 8008366:	4463      	add	r3, ip
 8008368:	4699      	mov	r9, r3
 800836a:	0019      	movs	r1, r3
 800836c:	0028      	movs	r0, r5
 800836e:	f7fe fe27 	bl	8006fc0 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008372:	0236      	lsls	r6, r6, #8
 8008374:	464b      	mov	r3, r9
 8008376:	881a      	ldrh	r2, [r3, #0]
 8008378:	4653      	mov	r3, sl
 800837a:	4333      	orrs	r3, r6
 800837c:	429a      	cmp	r2, r3
 800837e:	d000      	beq.n	8008382 <SetButtonEvents+0x326>
 8008380:	e70f      	b.n	80081a2 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008382:	3403      	adds	r4, #3
 8008384:	ab02      	add	r3, sp, #8
 8008386:	1d9d      	adds	r5, r3, #6
 8008388:	0029      	movs	r1, r5
 800838a:	0020      	movs	r0, r4
 800838c:	f7fe fe18 	bl	8006fc0 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008390:	023f      	lsls	r7, r7, #8
 8008392:	882a      	ldrh	r2, [r5, #0]
 8008394:	4643      	mov	r3, r8
 8008396:	433b      	orrs	r3, r7
	return result;
 8008398:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 800839a:	429a      	cmp	r2, r3
 800839c:	d000      	beq.n	80083a0 <SetButtonEvents+0x344>
 800839e:	e705      	b.n	80081ac <SetButtonEvents+0x150>
}
 80083a0:	b005      	add	sp, #20
 80083a2:	bcf0      	pop	{r4, r5, r6, r7}
 80083a4:	46bb      	mov	fp, r7
 80083a6:	46b2      	mov	sl, r6
 80083a8:	46a9      	mov	r9, r5
 80083aa:	46a0      	mov	r8, r4
 80083ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 80083ae:	00e9      	lsls	r1, r5, #3
 80083b0:	1949      	adds	r1, r1, r5
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <SetButtonEvents+0x36c>)
 80083b4:	185b      	adds	r3, r3, r1
 80083b6:	7a19      	ldrb	r1, [r3, #8]
 80083b8:	2401      	movs	r4, #1
 80083ba:	4321      	orrs	r1, r4
 80083bc:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 80083be:	2800      	cmp	r0, #0
 80083c0:	d100      	bne.n	80083c4 <SetButtonEvents+0x368>
 80083c2:	e68b      	b.n	80080dc <SetButtonEvents+0x80>
 80083c4:	e7a4      	b.n	8008310 <SetButtonEvents+0x2b4>
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	200011b0 	.word	0x200011b0

080083cc <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 80083cc:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 80083ce:	f006 f90f 	bl	800e5f0 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80083d2:	b2c4      	uxtb	r4, r0
 80083d4:	0020      	movs	r0, r4
 80083d6:	f7fe fcab 	bl	8006d30 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80083da:	0020      	movs	r0, r4
 80083dc:	f7fe fcd6 	bl	8006d8c <SwitchStreamDMAToMsg>
}
 80083e0:	bd10      	pop	{r4, pc}
	...

080083e4 <SetupDMAStreams>:
{
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	0005      	movs	r5, r0
 80083ea:	000c      	movs	r4, r1
 80083ec:	0016      	movs	r6, r2
 80083ee:	220f      	movs	r2, #15
 80083f0:	446a      	add	r2, sp
 80083f2:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80083f4:	aa08      	add	r2, sp, #32
 80083f6:	7810      	ldrb	r0, [r2, #0]
 80083f8:	4283      	cmp	r3, r0
 80083fa:	d057      	beq.n	80084ac <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d100      	bne.n	8008402 <SetupDMAStreams+0x1e>
 8008400:	e0ba      	b.n	8008578 <SetupDMAStreams+0x194>
 8008402:	2800      	cmp	r0, #0
 8008404:	d100      	bne.n	8008408 <SetupDMAStreams+0x24>
 8008406:	e0ba      	b.n	800857e <SetupDMAStreams+0x19a>
	if (direction == FORWARD) 
 8008408:	2d00      	cmp	r5, #0
 800840a:	d054      	beq.n	80084b6 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 800840c:	2d01      	cmp	r5, #1
 800840e:	d100      	bne.n	8008412 <SetupDMAStreams+0x2e>
 8008410:	e089      	b.n	8008526 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8008412:	2067      	movs	r0, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008414:	2d02      	cmp	r5, #2
 8008416:	d000      	beq.n	800841a <SetupDMAStreams+0x36>
 8008418:	e0af      	b.n	800857a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 800841a:	0018      	movs	r0, r3
 800841c:	f004 f900 	bl	800c620 <GetUart>
 8008420:	0005      	movs	r5, r0
 8008422:	ab08      	add	r3, sp, #32
 8008424:	7818      	ldrb	r0, [r3, #0]
 8008426:	f004 f8fb 	bl	800c620 <GetUart>
 800842a:	0001      	movs	r1, r0
 800842c:	2201      	movs	r2, #1
 800842e:	0028      	movs	r0, r5
 8008430:	f7fe fce2 	bl	8006df8 <StartDMAstream>
 8008434:	2817      	cmp	r0, #23
 8008436:	d100      	bne.n	800843a <SetupDMAStreams+0x56>
 8008438:	e09f      	b.n	800857a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 800843a:	0170      	lsls	r0, r6, #5
 800843c:	1b80      	subs	r0, r0, r6
 800843e:	0080      	lsls	r0, r0, #2
 8008440:	1980      	adds	r0, r0, r6
 8008442:	00c0      	lsls	r0, r0, #3
 8008444:	21fa      	movs	r1, #250	; 0xfa
 8008446:	0089      	lsls	r1, r1, #2
 8008448:	f7f7 fe82 	bl	8000150 <__udivsi3>
 800844c:	0005      	movs	r5, r0
 800844e:	4b4d      	ldr	r3, [pc, #308]	; (8008584 <SetupDMAStreams+0x1a0>)
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	230f      	movs	r3, #15
 8008454:	446b      	add	r3, sp
 8008456:	2200      	movs	r2, #0
 8008458:	0001      	movs	r1, r0
 800845a:	484b      	ldr	r0, [pc, #300]	; (8008588 <SetupDMAStreams+0x1a4>)
 800845c:	f005 ff6c 	bl	800e338 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008460:	466b      	mov	r3, sp
 8008462:	7bdb      	ldrb	r3, [r3, #15]
 8008464:	3b01      	subs	r3, #1
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4a48      	ldr	r2, [pc, #288]	; (800858c <SetupDMAStreams+0x1a8>)
 800846a:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 800846c:	ab08      	add	r3, sp, #32
 800846e:	7818      	ldrb	r0, [r3, #0]
 8008470:	f004 f8d6 	bl	800c620 <GetUart>
 8008474:	0006      	movs	r6, r0
 8008476:	466b      	mov	r3, sp
 8008478:	7bd8      	ldrb	r0, [r3, #15]
 800847a:	f004 f8d1 	bl	800c620 <GetUart>
 800847e:	0001      	movs	r1, r0
 8008480:	2201      	movs	r2, #1
 8008482:	0030      	movs	r0, r6
 8008484:	f7fe fcb8 	bl	8006df8 <StartDMAstream>
 8008488:	2817      	cmp	r0, #23
 800848a:	d076      	beq.n	800857a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 800848c:	4b3d      	ldr	r3, [pc, #244]	; (8008584 <SetupDMAStreams+0x1a0>)
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	ab08      	add	r3, sp, #32
 8008492:	2200      	movs	r2, #0
 8008494:	0029      	movs	r1, r5
 8008496:	483c      	ldr	r0, [pc, #240]	; (8008588 <SetupDMAStreams+0x1a4>)
 8008498:	f005 ff4e 	bl	800e338 <xTimerCreate>
 800849c:	0006      	movs	r6, r0
		dmaStreamTotal[dst-1] = count;
 800849e:	ab08      	add	r3, sp, #32
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4a39      	ldr	r2, [pc, #228]	; (800858c <SetupDMAStreams+0x1a8>)
 80084a8:	509c      	str	r4, [r3, r2]
 80084aa:	e02c      	b.n	8008506 <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 80084ac:	4a38      	ldr	r2, [pc, #224]	; (8008590 <SetupDMAStreams+0x1ac>)
 80084ae:	2102      	movs	r1, #2
 80084b0:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80084b2:	2067      	movs	r0, #103	; 0x67
 80084b4:	e061      	b.n	800857a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80084b6:	0018      	movs	r0, r3
 80084b8:	f004 f8b2 	bl	800c620 <GetUart>
 80084bc:	0005      	movs	r5, r0
 80084be:	ab08      	add	r3, sp, #32
 80084c0:	7818      	ldrb	r0, [r3, #0]
 80084c2:	f004 f8ad 	bl	800c620 <GetUart>
 80084c6:	0001      	movs	r1, r0
 80084c8:	2201      	movs	r2, #1
 80084ca:	0028      	movs	r0, r5
 80084cc:	f7fe fc94 	bl	8006df8 <StartDMAstream>
 80084d0:	2817      	cmp	r0, #23
 80084d2:	d052      	beq.n	800857a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 80084d4:	250f      	movs	r5, #15
 80084d6:	446d      	add	r5, sp
 80084d8:	0170      	lsls	r0, r6, #5
 80084da:	1b80      	subs	r0, r0, r6
 80084dc:	0080      	lsls	r0, r0, #2
 80084de:	1980      	adds	r0, r0, r6
 80084e0:	00c0      	lsls	r0, r0, #3
 80084e2:	21fa      	movs	r1, #250	; 0xfa
 80084e4:	0089      	lsls	r1, r1, #2
 80084e6:	f7f7 fe33 	bl	8000150 <__udivsi3>
 80084ea:	0001      	movs	r1, r0
 80084ec:	4b25      	ldr	r3, [pc, #148]	; (8008584 <SetupDMAStreams+0x1a0>)
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	002b      	movs	r3, r5
 80084f2:	2200      	movs	r2, #0
 80084f4:	4824      	ldr	r0, [pc, #144]	; (8008588 <SetupDMAStreams+0x1a4>)
 80084f6:	f005 ff1f 	bl	800e338 <xTimerCreate>
 80084fa:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 80084fc:	782b      	ldrb	r3, [r5, #0]
 80084fe:	3b01      	subs	r3, #1
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4a22      	ldr	r2, [pc, #136]	; (800858c <SetupDMAStreams+0x1a8>)
 8008504:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 8008506:	2000      	movs	r0, #0
	if (xTimerStream != NULL)
 8008508:	2e00      	cmp	r6, #0
 800850a:	d036      	beq.n	800857a <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 800850c:	f005 f988 	bl	800d820 <xTaskGetTickCount>
 8008510:	0002      	movs	r2, r0
 8008512:	2301      	movs	r3, #1
 8008514:	425b      	negs	r3, r3
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	2300      	movs	r3, #0
 800851a:	2101      	movs	r1, #1
 800851c:	0030      	movs	r0, r6
 800851e:	f005 ff2b 	bl	800e378 <xTimerGenericCommand>
	return BOS_OK;
 8008522:	2000      	movs	r0, #0
 8008524:	e029      	b.n	800857a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008526:	f004 f87b 	bl	800c620 <GetUart>
 800852a:	0005      	movs	r5, r0
 800852c:	230f      	movs	r3, #15
 800852e:	446b      	add	r3, sp
 8008530:	7818      	ldrb	r0, [r3, #0]
 8008532:	f004 f875 	bl	800c620 <GetUart>
 8008536:	0001      	movs	r1, r0
 8008538:	2201      	movs	r2, #1
 800853a:	0028      	movs	r0, r5
 800853c:	f7fe fc5c 	bl	8006df8 <StartDMAstream>
 8008540:	2817      	cmp	r0, #23
 8008542:	d01a      	beq.n	800857a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008544:	0170      	lsls	r0, r6, #5
 8008546:	1b80      	subs	r0, r0, r6
 8008548:	0080      	lsls	r0, r0, #2
 800854a:	1980      	adds	r0, r0, r6
 800854c:	00c0      	lsls	r0, r0, #3
 800854e:	21fa      	movs	r1, #250	; 0xfa
 8008550:	0089      	lsls	r1, r1, #2
 8008552:	f7f7 fdfd 	bl	8000150 <__udivsi3>
 8008556:	0001      	movs	r1, r0
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <SetupDMAStreams+0x1a0>)
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	ab08      	add	r3, sp, #32
 800855e:	2200      	movs	r2, #0
 8008560:	4809      	ldr	r0, [pc, #36]	; (8008588 <SetupDMAStreams+0x1a4>)
 8008562:	f005 fee9 	bl	800e338 <xTimerCreate>
 8008566:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 8008568:	230f      	movs	r3, #15
 800856a:	446b      	add	r3, sp
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	3b01      	subs	r3, #1
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4a06      	ldr	r2, [pc, #24]	; (800858c <SetupDMAStreams+0x1a8>)
 8008574:	509c      	str	r4, [r3, r2]
 8008576:	e7c6      	b.n	8008506 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8008578:	2067      	movs	r0, #103	; 0x67
}
 800857a:	b004      	add	sp, #16
 800857c:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 800857e:	2067      	movs	r0, #103	; 0x67
 8008580:	e7fb      	b.n	800857a <SetupDMAStreams+0x196>
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	080083cd 	.word	0x080083cd
 8008588:	0801a418 	.word	0x0801a418
 800858c:	20001168 	.word	0x20001168
 8008590:	20000dcc 	.word	0x20000dcc

08008594 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008594:	b510      	push	{r4, lr}
	switch (port)
 8008596:	2806      	cmp	r0, #6
 8008598:	d80a      	bhi.n	80085b0 <NotifyMessagingTask+0x1c>
 800859a:	0080      	lsls	r0, r0, #2
 800859c:	4b19      	ldr	r3, [pc, #100]	; (8008604 <NotifyMessagingTask+0x70>)
 800859e:	581b      	ldr	r3, [r3, r0]
 80085a0:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 80085a2:	4b19      	ldr	r3, [pc, #100]	; (8008608 <NotifyMessagingTask+0x74>)
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	2202      	movs	r2, #2
 80085aa:	2100      	movs	r1, #0
 80085ac:	f005 fdf2 	bl	800e194 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 80085b0:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 80085b2:	4b16      	ldr	r3, [pc, #88]	; (800860c <NotifyMessagingTask+0x78>)
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	2202      	movs	r2, #2
 80085ba:	2100      	movs	r1, #0
 80085bc:	f005 fdea 	bl	800e194 <xTaskGenericNotify>
 80085c0:	e7f6      	b.n	80085b0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 80085c2:	4b13      	ldr	r3, [pc, #76]	; (8008610 <NotifyMessagingTask+0x7c>)
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	2300      	movs	r3, #0
 80085c8:	2202      	movs	r2, #2
 80085ca:	2100      	movs	r1, #0
 80085cc:	f005 fde2 	bl	800e194 <xTaskGenericNotify>
 80085d0:	e7ee      	b.n	80085b0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <NotifyMessagingTask+0x80>)
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	2300      	movs	r3, #0
 80085d8:	2202      	movs	r2, #2
 80085da:	2100      	movs	r1, #0
 80085dc:	f005 fdda 	bl	800e194 <xTaskGenericNotify>
 80085e0:	e7e6      	b.n	80085b0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 80085e2:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <NotifyMessagingTask+0x84>)
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	2202      	movs	r2, #2
 80085ea:	2100      	movs	r1, #0
 80085ec:	f005 fdd2 	bl	800e194 <xTaskGenericNotify>
 80085f0:	e7de      	b.n	80085b0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle);	break;
 80085f2:	4b0a      	ldr	r3, [pc, #40]	; (800861c <NotifyMessagingTask+0x88>)
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	2300      	movs	r3, #0
 80085f8:	2202      	movs	r2, #2
 80085fa:	2100      	movs	r1, #0
 80085fc:	f005 fdca 	bl	800e194 <xTaskGenericNotify>
}
 8008600:	e7d6      	b.n	80085b0 <NotifyMessagingTask+0x1c>
 8008602:	46c0      	nop			; (mov r8, r8)
 8008604:	0801a424 	.word	0x0801a424
 8008608:	20001188 	.word	0x20001188
 800860c:	2000118c 	.word	0x2000118c
 8008610:	20001190 	.word	0x20001190
 8008614:	20001194 	.word	0x20001194
 8008618:	20001198 	.word	0x20001198
 800861c:	2000119c 	.word	0x2000119c

08008620 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008622:	46de      	mov	lr, fp
 8008624:	4657      	mov	r7, sl
 8008626:	464e      	mov	r6, r9
 8008628:	4645      	mov	r5, r8
 800862a:	b5e0      	push	{r5, r6, r7, lr}
 800862c:	b085      	sub	sp, #20
 800862e:	0005      	movs	r5, r0
 8008630:	9102      	str	r1, [sp, #8]
 8008632:	0014      	movs	r4, r2
 8008634:	001e      	movs	r6, r3
 8008636:	ab0e      	add	r3, sp, #56	; 0x38
 8008638:	881f      	ldrh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 800863a:	0003      	movs	r3, r0
 800863c:	4313      	orrs	r3, r2
 800863e:	d100      	bne.n	8008642 <SendMessageFromPort+0x22>
 8008640:	e173      	b.n	800892a <SendMessageFromPort+0x30a>
 8008642:	2800      	cmp	r0, #0
 8008644:	d14c      	bne.n	80086e0 <SendMessageFromPort+0xc0>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008646:	2afd      	cmp	r2, #253	; 0xfd
 8008648:	d800      	bhi.n	800864c <SendMessageFromPort+0x2c>
 800864a:	e170      	b.n	800892e <SendMessageFromPort+0x30e>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 800864c:	2000      	movs	r0, #0
 800864e:	f005 f849 	bl	800d6e4 <uxTaskPriorityGet>
 8008652:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008654:	2105      	movs	r1, #5
 8008656:	2000      	movs	r0, #0
 8008658:	f005 f854 	bl	800d704 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 800865c:	4bbf      	ldr	r3, [pc, #764]	; (800895c <SendMessageFromPort+0x33c>)
 800865e:	2248      	movs	r2, #72	; 0x48
 8008660:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008662:	3212      	adds	r2, #18
 8008664:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008666:	9b02      	ldr	r3, [sp, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d000      	beq.n	800866e <SendMessageFromPort+0x4e>
 800866c:	e172      	b.n	8008954 <SendMessageFromPort+0x334>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 800866e:	1e7b      	subs	r3, r7, #1
 8008670:	4abb      	ldr	r2, [pc, #748]	; (8008960 <SendMessageFromPort+0x340>)
 8008672:	5cd7      	ldrb	r7, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8008674:	4abb      	ldr	r2, [pc, #748]	; (8008964 <SendMessageFromPort+0x344>)
 8008676:	4690      	mov	r8, r2
 8008678:	00d9      	lsls	r1, r3, #3
 800867a:	1ac9      	subs	r1, r1, r3
 800867c:	00c9      	lsls	r1, r1, #3
 800867e:	4bba      	ldr	r3, [pc, #744]	; (8008968 <SendMessageFromPort+0x348>)
 8008680:	18c9      	adds	r1, r1, r3
 8008682:	003a      	movs	r2, r7
 8008684:	4640      	mov	r0, r8
 8008686:	f009 fa6b 	bl	8011b60 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 800868a:	2303      	movs	r3, #3
 800868c:	425b      	negs	r3, r3
 800868e:	469c      	mov	ip, r3
 8008690:	44e0      	add	r8, ip
 8008692:	4643      	mov	r3, r8
 8008694:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8008696:	1cfb      	adds	r3, r7, #3
 8008698:	469b      	mov	fp, r3
 800869a:	4bb4      	ldr	r3, [pc, #720]	; (800896c <SendMessageFromPort+0x34c>)
 800869c:	469a      	mov	sl, r3
 800869e:	465a      	mov	r2, fp
 80086a0:	4641      	mov	r1, r8
 80086a2:	0018      	movs	r0, r3
 80086a4:	f009 fa5c 	bl	8011b60 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80086a8:	b2bb      	uxth	r3, r7
 80086aa:	4699      	mov	r9, r3
 80086ac:	4659      	mov	r1, fp
 80086ae:	4650      	mov	r0, sl
 80086b0:	f003 f9c2 	bl	800ba38 <CalculateCRC8>
 80086b4:	4643      	mov	r3, r8
 80086b6:	465a      	mov	r2, fp
 80086b8:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 80086ba:	2238      	movs	r2, #56	; 0x38
 80086bc:	2100      	movs	r1, #0
 80086be:	4650      	mov	r0, sl
 80086c0:	f009 fa57 	bl	8011b72 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80086c4:	2cfd      	cmp	r4, #253	; 0xfd
 80086c6:	d800      	bhi.n	80086ca <SendMessageFromPort+0xaa>
 80086c8:	e102      	b.n	80088d0 <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d000      	beq.n	80086d0 <SendMessageFromPort+0xb0>
 80086ce:	e0f5      	b.n	80088bc <SendMessageFromPort+0x29c>
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d000      	beq.n	80086d8 <SendMessageFromPort+0xb8>
 80086d6:	e0f1      	b.n	80088bc <SendMessageFromPort+0x29c>
			src = message[4];
 80086d8:	4ba0      	ldr	r3, [pc, #640]	; (800895c <SendMessageFromPort+0x33c>)
 80086da:	791b      	ldrb	r3, [r3, #4]
 80086dc:	9302      	str	r3, [sp, #8]
 80086de:	e0ed      	b.n	80088bc <SendMessageFromPort+0x29c>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <SendMessageFromPort+0xcc>
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	d100      	bne.n	80086ec <SendMessageFromPort+0xcc>
 80086ea:	e122      	b.n	8008932 <SendMessageFromPort+0x312>
	TaskPriority = uxTaskPriorityGet( NULL );
 80086ec:	2000      	movs	r0, #0
 80086ee:	f004 fff9 	bl	800d6e4 <uxTaskPriorityGet>
 80086f2:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80086f4:	2105      	movs	r1, #5
 80086f6:	2000      	movs	r0, #0
 80086f8:	f005 f804 	bl	800d704 <vTaskPrioritySet>
	message[0] = 'H';						
 80086fc:	4b97      	ldr	r3, [pc, #604]	; (800895c <SendMessageFromPort+0x33c>)
 80086fe:	2248      	movs	r2, #72	; 0x48
 8008700:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008702:	3212      	adds	r2, #18
 8008704:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008706:	2e00      	cmp	r6, #0
 8008708:	d0b1      	beq.n	800866e <SendMessageFromPort+0x4e>
		if (src == 0)		src = myID;
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d078      	beq.n	8008802 <SendMessageFromPort+0x1e2>
		message[2] = length;	
 8008710:	4992      	ldr	r1, [pc, #584]	; (800895c <SendMessageFromPort+0x33c>)
 8008712:	2300      	movs	r3, #0
 8008714:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 8008716:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 800871c:	4a94      	ldr	r2, [pc, #592]	; (8008970 <SendMessageFromPort+0x350>)
 800871e:	79d3      	ldrb	r3, [r2, #7]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	7992      	ldrb	r2, [r2, #6]
 8008724:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 8008726:	22ff      	movs	r2, #255	; 0xff
 8008728:	42b2      	cmp	r2, r6
 800872a:	4192      	sbcs	r2, r2
 800872c:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 800872e:	0052      	lsls	r2, r2, #1
 8008730:	4313      	orrs	r3, r2
 8008732:	b2db      	uxtb	r3, r3
 8008734:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8008736:	718e      	strb	r6, [r1, #6]
		if (extendCode == true) {
 8008738:	2200      	movs	r2, #0
 800873a:	4693      	mov	fp, r2
 800873c:	2eff      	cmp	r6, #255	; 0xff
 800873e:	d903      	bls.n	8008748 <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 8008740:	0a32      	lsrs	r2, r6, #8
 8008742:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008744:	2201      	movs	r2, #1
 8008746:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8008748:	2f2e      	cmp	r7, #46	; 0x2e
 800874a:	d95e      	bls.n	800880a <SendMessageFromPort+0x1ea>
			message[5] |= 0x80;		
 800874c:	2280      	movs	r2, #128	; 0x80
 800874e:	4252      	negs	r2, r2
 8008750:	4313      	orrs	r3, r2
 8008752:	4a82      	ldr	r2, [pc, #520]	; (800895c <SendMessageFromPort+0x33c>)
 8008754:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8008756:	4b87      	ldr	r3, [pc, #540]	; (8008974 <SendMessageFromPort+0x354>)
 8008758:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 800875a:	232e      	movs	r3, #46	; 0x2e
 800875c:	469a      	mov	sl, r3
					totalNumberOfParams -= numberOfParams;
 800875e:	4b85      	ldr	r3, [pc, #532]	; (8008974 <SendMessageFromPort+0x354>)
 8008760:	4699      	mov	r9, r3
					ptrShift += numberOfParams;
 8008762:	4b85      	ldr	r3, [pc, #532]	; (8008978 <SendMessageFromPort+0x358>)
 8008764:	4698      	mov	r8, r3
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8008766:	4653      	mov	r3, sl
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	0033      	movs	r3, r6
 800876c:	0022      	movs	r2, r4
 800876e:	9902      	ldr	r1, [sp, #8]
 8008770:	0028      	movs	r0, r5
 8008772:	f7ff ff55 	bl	8008620 <SendMessageFromPort>
					osDelay(10);
 8008776:	200a      	movs	r0, #10
 8008778:	f004 f8a3 	bl	800c8c2 <osDelay>
					totalNumberOfParams -= numberOfParams;
 800877c:	464b      	mov	r3, r9
 800877e:	881f      	ldrh	r7, [r3, #0]
 8008780:	3f2e      	subs	r7, #46	; 0x2e
 8008782:	b2bf      	uxth	r7, r7
 8008784:	801f      	strh	r7, [r3, #0]
					ptrShift += numberOfParams;
 8008786:	4643      	mov	r3, r8
 8008788:	8819      	ldrh	r1, [r3, #0]
 800878a:	312e      	adds	r1, #46	; 0x2e
 800878c:	b289      	uxth	r1, r1
 800878e:	8019      	strh	r1, [r3, #0]
			while (totalNumberOfParams != 0)
 8008790:	2f00      	cmp	r7, #0
 8008792:	d049      	beq.n	8008828 <SendMessageFromPort+0x208>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8008794:	2f2d      	cmp	r7, #45	; 0x2d
 8008796:	d8e6      	bhi.n	8008766 <SendMessageFromPort+0x146>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8008798:	4b70      	ldr	r3, [pc, #448]	; (800895c <SendMessageFromPort+0x33c>)
 800879a:	7958      	ldrb	r0, [r3, #5]
 800879c:	227f      	movs	r2, #127	; 0x7f
 800879e:	4002      	ands	r2, r0
 80087a0:	715a      	strb	r2, [r3, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80087a2:	465a      	mov	r2, fp
 80087a4:	1dd0      	adds	r0, r2, #7
 80087a6:	18c0      	adds	r0, r0, r3
 80087a8:	4b74      	ldr	r3, [pc, #464]	; (800897c <SendMessageFromPort+0x35c>)
 80087aa:	18c9      	adds	r1, r1, r3
 80087ac:	003a      	movs	r2, r7
 80087ae:	f009 f9d7 	bl	8011b60 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	4a70      	ldr	r2, [pc, #448]	; (8008978 <SendMessageFromPort+0x358>)
 80087b6:	8013      	strh	r3, [r2, #0]
 80087b8:	4a6e      	ldr	r2, [pc, #440]	; (8008974 <SendMessageFromPort+0x354>)
 80087ba:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 80087bc:	465b      	mov	r3, fp
 80087be:	1d1e      	adds	r6, r3, #4
 80087c0:	19f6      	adds	r6, r6, r7
 80087c2:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 80087c4:	4b6e      	ldr	r3, [pc, #440]	; (8008980 <SendMessageFromPort+0x360>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d05c      	beq.n	8008886 <SendMessageFromPort+0x266>
			if (dstGroupID < BOS_BROADCAST)
 80087cc:	4b6d      	ldr	r3, [pc, #436]	; (8008984 <SendMessageFromPort+0x364>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2bff      	cmp	r3, #255	; 0xff
 80087d2:	d100      	bne.n	80087d6 <SendMessageFromPort+0x1b6>
 80087d4:	e0af      	b.n	8008936 <SendMessageFromPort+0x316>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80087d6:	4a6c      	ldr	r2, [pc, #432]	; (8008988 <SendMessageFromPort+0x368>)
 80087d8:	7812      	ldrb	r2, [r2, #0]
 80087da:	4690      	mov	r8, r2
 80087dc:	2a00      	cmp	r2, #0
 80087de:	d075      	beq.n	80088cc <SendMessageFromPort+0x2ac>
 80087e0:	2201      	movs	r2, #1
 80087e2:	409a      	lsls	r2, r3
 80087e4:	4694      	mov	ip, r2
 80087e6:	4869      	ldr	r0, [pc, #420]	; (800898c <SendMessageFromPort+0x36c>)
 80087e8:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 80087ea:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80087ec:	495b      	ldr	r1, [pc, #364]	; (800895c <SendMessageFromPort+0x33c>)
 80087ee:	4689      	mov	r9, r1
 80087f0:	44b9      	add	r9, r7
 80087f2:	0029      	movs	r1, r5
 80087f4:	4645      	mov	r5, r8
 80087f6:	46a2      	mov	sl, r4
 80087f8:	4664      	mov	r4, ip
 80087fa:	46b4      	mov	ip, r6
 80087fc:	465e      	mov	r6, fp
 80087fe:	4688      	mov	r8, r1
 8008800:	e01e      	b.n	8008840 <SendMessageFromPort+0x220>
		if (src == 0)		src = myID;
 8008802:	4b63      	ldr	r3, [pc, #396]	; (8008990 <SendMessageFromPort+0x370>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	e782      	b.n	8008710 <SendMessageFromPort+0xf0>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800880a:	465b      	mov	r3, fp
 800880c:	3307      	adds	r3, #7
 800880e:	4853      	ldr	r0, [pc, #332]	; (800895c <SendMessageFromPort+0x33c>)
 8008810:	1818      	adds	r0, r3, r0
 8008812:	4b59      	ldr	r3, [pc, #356]	; (8008978 <SendMessageFromPort+0x358>)
 8008814:	8819      	ldrh	r1, [r3, #0]
 8008816:	4b59      	ldr	r3, [pc, #356]	; (800897c <SendMessageFromPort+0x35c>)
 8008818:	18c9      	adds	r1, r1, r3
 800881a:	003a      	movs	r2, r7
 800881c:	f009 f9a0 	bl	8011b60 <memcpy>
			length = numberOfParams + shift + 4;
 8008820:	1d3e      	adds	r6, r7, #4
 8008822:	445e      	add	r6, fp
 8008824:	b2f6      	uxtb	r6, r6
 8008826:	e7cd      	b.n	80087c4 <SendMessageFromPort+0x1a4>
 8008828:	2600      	movs	r6, #0
 800882a:	372e      	adds	r7, #46	; 0x2e
 800882c:	e7ca      	b.n	80087c4 <SendMessageFromPort+0x1a4>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 800882e:	4649      	mov	r1, r9
 8008830:	1889      	adds	r1, r1, r2
 8008832:	1989      	adds	r1, r1, r6
 8008834:	718b      	strb	r3, [r1, #6]
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8008836:	3301      	adds	r3, #1
 8008838:	b29b      	uxth	r3, r3
 800883a:	3002      	adds	r0, #2
 800883c:	42ab      	cmp	r3, r5
 800883e:	d809      	bhi.n	8008854 <SendMessageFromPort+0x234>
					if (InGroup(i, dstGroupID))
 8008840:	8801      	ldrh	r1, [r0, #0]
 8008842:	420c      	tst	r4, r1
 8008844:	d0f7      	beq.n	8008836 <SendMessageFromPort+0x216>
						++groupMembers;							// Add this member
 8008846:	3201      	adds	r2, #1
 8008848:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800884a:	18b9      	adds	r1, r7, r2
 800884c:	292c      	cmp	r1, #44	; 0x2c
 800884e:	ddee      	ble.n	800882e <SendMessageFromPort+0x20e>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008850:	2069      	movs	r0, #105	; 0x69
 8008852:	e04d      	b.n	80088f0 <SendMessageFromPort+0x2d0>
 8008854:	46b3      	mov	fp, r6
 8008856:	4666      	mov	r6, ip
 8008858:	4645      	mov	r5, r8
 800885a:	4654      	mov	r4, sl
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 800885c:	465b      	mov	r3, fp
 800885e:	3307      	adds	r3, #7
 8008860:	19db      	adds	r3, r3, r7
 8008862:	189b      	adds	r3, r3, r2
 8008864:	493d      	ldr	r1, [pc, #244]	; (800895c <SendMessageFromPort+0x33c>)
 8008866:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8008868:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800886a:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 800886c:	2f2b      	cmp	r7, #43	; 0x2b
 800886e:	dc3f      	bgt.n	80088f0 <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 8008870:	4848      	ldr	r0, [pc, #288]	; (8008994 <SendMessageFromPort+0x374>)
 8008872:	7801      	ldrb	r1, [r0, #0]
 8008874:	3101      	adds	r1, #1
 8008876:	b2c9      	uxtb	r1, r1
 8008878:	7001      	strb	r1, [r0, #0]
 800887a:	4838      	ldr	r0, [pc, #224]	; (800895c <SendMessageFromPort+0x33c>)
 800887c:	18c3      	adds	r3, r0, r3
 800887e:	7059      	strb	r1, [r3, #1]
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008880:	3602      	adds	r6, #2
 8008882:	18b6      	adds	r6, r6, r2
 8008884:	b2f6      	uxtb	r6, r6
	message[2] = length;
 8008886:	4b35      	ldr	r3, [pc, #212]	; (800895c <SendMessageFromPort+0x33c>)
 8008888:	4698      	mov	r8, r3
 800888a:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 800888c:	1cf3      	adds	r3, r6, #3
 800888e:	469a      	mov	sl, r3
 8008890:	4f36      	ldr	r7, [pc, #216]	; (800896c <SendMessageFromPort+0x34c>)
 8008892:	001a      	movs	r2, r3
 8008894:	4641      	mov	r1, r8
 8008896:	0038      	movs	r0, r7
 8008898:	f009 f962 	bl	8011b60 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 800889c:	b2b3      	uxth	r3, r6
 800889e:	4699      	mov	r9, r3
 80088a0:	4651      	mov	r1, sl
 80088a2:	0038      	movs	r0, r7
 80088a4:	f003 f8c8 	bl	800ba38 <CalculateCRC8>
 80088a8:	4643      	mov	r3, r8
 80088aa:	4652      	mov	r2, sl
 80088ac:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 80088ae:	2238      	movs	r2, #56	; 0x38
 80088b0:	2100      	movs	r1, #0
 80088b2:	0038      	movs	r0, r7
 80088b4:	f009 f95d 	bl	8011b72 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80088b8:	2cfd      	cmp	r4, #253	; 0xfd
 80088ba:	d909      	bls.n	80088d0 <SendMessageFromPort+0x2b0>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80088bc:	9802      	ldr	r0, [sp, #8]
 80088be:	f7fa fd45 	bl	800334c <FindBroadcastRoutes>
 80088c2:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80088c4:	4e34      	ldr	r6, [pc, #208]	; (8008998 <SendMessageFromPort+0x378>)
 80088c6:	4d32      	ldr	r5, [pc, #200]	; (8008990 <SendMessageFromPort+0x370>)
			{
				/* Transmit the message from this port */
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80088c8:	464f      	mov	r7, r9
 80088ca:	e024      	b.n	8008916 <SendMessageFromPort+0x2f6>
			uint8_t groupMembers = 0;
 80088cc:	2200      	movs	r2, #0
 80088ce:	e7c5      	b.n	800885c <SendMessageFromPort+0x23c>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 80088d0:	464a      	mov	r2, r9
 80088d2:	3204      	adds	r2, #4
 80088d4:	b292      	uxth	r2, r2
 80088d6:	2332      	movs	r3, #50	; 0x32
 80088d8:	4920      	ldr	r1, [pc, #128]	; (800895c <SendMessageFromPort+0x33c>)
 80088da:	0028      	movs	r0, r5
 80088dc:	f003 ff0e 	bl	800c6fc <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 80088e0:	9903      	ldr	r1, [sp, #12]
 80088e2:	2000      	movs	r0, #0
 80088e4:	f004 ff0e 	bl	800d704 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 80088e8:	4b2c      	ldr	r3, [pc, #176]	; (800899c <SendMessageFromPort+0x37c>)
 80088ea:	2202      	movs	r2, #2
 80088ec:	701a      	strb	r2, [r3, #0]
	
	return result;
 80088ee:	2000      	movs	r0, #0
}
 80088f0:	b005      	add	sp, #20
 80088f2:	bcf0      	pop	{r4, r5, r6, r7}
 80088f4:	46bb      	mov	fp, r7
 80088f6:	46b2      	mov	sl, r6
 80088f8:	46a9      	mov	r9, r5
 80088fa:	46a0      	mov	r8, r4
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80088fe:	1d3a      	adds	r2, r7, #4
 8008900:	b292      	uxth	r2, r2
 8008902:	2332      	movs	r3, #50	; 0x32
 8008904:	4915      	ldr	r1, [pc, #84]	; (800895c <SendMessageFromPort+0x33c>)
 8008906:	f003 fef9 	bl	800c6fc <writePxDMAMutex>
				Delay_ms(1);
 800890a:	2001      	movs	r0, #1
 800890c:	f006 f84c 	bl	800e9a8 <HAL_Delay>
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8008910:	3401      	adds	r4, #1
 8008912:	2c06      	cmp	r4, #6
 8008914:	d0e4      	beq.n	80088e0 <SendMessageFromPort+0x2c0>
 8008916:	1c60      	adds	r0, r4, #1
 8008918:	b2c0      	uxtb	r0, r0
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 800891a:	782b      	ldrb	r3, [r5, #0]
 800891c:	3b01      	subs	r3, #1
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	5b9b      	ldrh	r3, [r3, r6]
 8008922:	4123      	asrs	r3, r4
 8008924:	07db      	lsls	r3, r3, #31
 8008926:	d5f3      	bpl.n	8008910 <SendMessageFromPort+0x2f0>
 8008928:	e7e9      	b.n	80088fe <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam; 
 800892a:	2067      	movs	r0, #103	; 0x67
 800892c:	e7e0      	b.n	80088f0 <SendMessageFromPort+0x2d0>
 800892e:	2067      	movs	r0, #103	; 0x67
 8008930:	e7de      	b.n	80088f0 <SendMessageFromPort+0x2d0>
 8008932:	2067      	movs	r0, #103	; 0x67
 8008934:	e7dc      	b.n	80088f0 <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008936:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8008938:	2f2c      	cmp	r7, #44	; 0x2c
 800893a:	d8d9      	bhi.n	80088f0 <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams] = ++bcastID;
 800893c:	4a15      	ldr	r2, [pc, #84]	; (8008994 <SendMessageFromPort+0x374>)
 800893e:	7813      	ldrb	r3, [r2, #0]
 8008940:	3301      	adds	r3, #1
 8008942:	b2db      	uxtb	r3, r3
 8008944:	7013      	strb	r3, [r2, #0]
 8008946:	4a05      	ldr	r2, [pc, #20]	; (800895c <SendMessageFromPort+0x33c>)
 8008948:	445a      	add	r2, fp
 800894a:	19d7      	adds	r7, r2, r7
 800894c:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 800894e:	3601      	adds	r6, #1
 8008950:	b2f6      	uxtb	r6, r6
 8008952:	e798      	b.n	8008886 <SendMessageFromPort+0x266>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008954:	2e00      	cmp	r6, #0
 8008956:	d100      	bne.n	800895a <SendMessageFromPort+0x33a>
 8008958:	e689      	b.n	800866e <SendMessageFromPort+0x4e>
 800895a:	e6d9      	b.n	8008710 <SendMessageFromPort+0xf0>
 800895c:	20000cd4 	.word	0x20000cd4
 8008960:	20000d0c 	.word	0x20000d0c
 8008964:	20000cd7 	.word	0x20000cd7
 8008968:	20000b14 	.word	0x20000b14
 800896c:	20001100 	.word	0x20001100
 8008970:	20006600 	.word	0x20006600
 8008974:	20001236 	.word	0x20001236
 8008978:	20001234 	.word	0x20001234
 800897c:	20000d14 	.word	0x20000d14
 8008980:	20000ad4 	.word	0x20000ad4
 8008984:	2000003c 	.word	0x2000003c
 8008988:	2000001c 	.word	0x2000001c
 800898c:	20000ccc 	.word	0x20000ccc
 8008990:	20000070 	.word	0x20000070
 8008994:	20000ad8 	.word	0x20000ad8
 8008998:	20000adc 	.word	0x20000adc
 800899c:	20000de8 	.word	0x20000de8

080089a0 <ForwardReceivedMessage>:
{
 80089a0:	b530      	push	{r4, r5, lr}
 80089a2:	b083      	sub	sp, #12
 80089a4:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <ForwardReceivedMessage+0x34>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80089ac:	1e42      	subs	r2, r0, #1
 80089ae:	00d3      	lsls	r3, r2, #3
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <ForwardReceivedMessage+0x38>)
 80089b6:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 80089b8:	4b08      	ldr	r3, [pc, #32]	; (80089dc <ForwardReceivedMessage+0x3c>)
 80089ba:	7818      	ldrb	r0, [r3, #0]
 80089bc:	0029      	movs	r1, r5
 80089be:	f7fa fd5d 	bl	800347c <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 80089c2:	9400      	str	r4, [sp, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	002a      	movs	r2, r5
 80089c8:	2100      	movs	r1, #0
 80089ca:	f7ff fe29 	bl	8008620 <SendMessageFromPort>
}
 80089ce:	2000      	movs	r0, #0
 80089d0:	b003      	add	sp, #12
 80089d2:	bd30      	pop	{r4, r5, pc}
 80089d4:	20000ad4 	.word	0x20000ad4
 80089d8:	20000b14 	.word	0x20000b14
 80089dc:	20000070 	.word	0x20000070

080089e0 <BroadcastReceivedMessage>:
{
 80089e0:	b500      	push	{lr}
 80089e2:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <BroadcastReceivedMessage+0x38>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <BroadcastReceivedMessage+0x3c>)
 80089ec:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80089ee:	28ff      	cmp	r0, #255	; 0xff
 80089f0:	d009      	beq.n	8008a06 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 80089f2:	9100      	str	r1, [sp, #0]
 80089f4:	2300      	movs	r3, #0
 80089f6:	22fe      	movs	r2, #254	; 0xfe
 80089f8:	2100      	movs	r1, #0
 80089fa:	2000      	movs	r0, #0
 80089fc:	f7ff fe10 	bl	8008620 <SendMessageFromPort>
}
 8008a00:	2000      	movs	r0, #0
 8008a02:	b003      	add	sp, #12
 8008a04:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8008a06:	9100      	str	r1, [sp, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	32ff      	adds	r2, #255	; 0xff
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f7ff fe06 	bl	8008620 <SendMessageFromPort>
 8008a14:	e7f4      	b.n	8008a00 <BroadcastReceivedMessage+0x20>
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	20000ad4 	.word	0x20000ad4
 8008a1c:	2000003c 	.word	0x2000003c

08008a20 <BroadcastMessage>:
{
 8008a20:	b530      	push	{r4, r5, lr}
 8008a22:	b083      	sub	sp, #12
 8008a24:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <BroadcastMessage+0x44>)
 8008a28:	2501      	movs	r5, #1
 8008a2a:	701d      	strb	r5, [r3, #0]
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <BroadcastMessage+0x48>)
 8008a2e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8008a30:	29ff      	cmp	r1, #255	; 0xff
 8008a32:	d00e      	beq.n	8008a52 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8008a34:	9400      	str	r4, [sp, #0]
 8008a36:	0013      	movs	r3, r2
 8008a38:	22fe      	movs	r2, #254	; 0xfe
 8008a3a:	0001      	movs	r1, r0
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f7ff fdef 	bl	8008620 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8008a42:	0022      	movs	r2, r4
 8008a44:	2100      	movs	r1, #0
 8008a46:	4809      	ldr	r0, [pc, #36]	; (8008a6c <BroadcastMessage+0x4c>)
 8008a48:	f009 f893 	bl	8011b72 <memset>
}
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	b003      	add	sp, #12
 8008a50:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8008a52:	9400      	str	r4, [sp, #0]
 8008a54:	0013      	movs	r3, r2
 8008a56:	22ff      	movs	r2, #255	; 0xff
 8008a58:	0001      	movs	r1, r0
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	f7ff fde0 	bl	8008620 <SendMessageFromPort>
 8008a60:	e7ef      	b.n	8008a42 <BroadcastMessage+0x22>
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	20000ad4 	.word	0x20000ad4
 8008a68:	2000003c 	.word	0x2000003c
 8008a6c:	20000d14 	.word	0x20000d14

08008a70 <SendMessageToModule>:
{
 8008a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a72:	b083      	sub	sp, #12
 8008a74:	0004      	movs	r4, r0
 8008a76:	000e      	movs	r6, r1
 8008a78:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 8008a7a:	28ff      	cmp	r0, #255	; 0xff
 8008a7c:	d012      	beq.n	8008aa4 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 8008a7e:	4f0d      	ldr	r7, [pc, #52]	; (8008ab4 <SendMessageToModule+0x44>)
 8008a80:	7838      	ldrb	r0, [r7, #0]
 8008a82:	0021      	movs	r1, r4
 8008a84:	f7fa fcfa 	bl	800347c <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8008a88:	7839      	ldrb	r1, [r7, #0]
 8008a8a:	9500      	str	r5, [sp, #0]
 8008a8c:	0033      	movs	r3, r6
 8008a8e:	0022      	movs	r2, r4
 8008a90:	f7ff fdc6 	bl	8008620 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8008a94:	002a      	movs	r2, r5
 8008a96:	2100      	movs	r1, #0
 8008a98:	4807      	ldr	r0, [pc, #28]	; (8008ab8 <SendMessageToModule+0x48>)
 8008a9a:	f009 f86a 	bl	8011b72 <memset>
}
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	b003      	add	sp, #12
 8008aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8008aa4:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <SendMessageToModule+0x44>)
 8008aa6:	7818      	ldrb	r0, [r3, #0]
 8008aa8:	0013      	movs	r3, r2
 8008aaa:	000a      	movs	r2, r1
 8008aac:	21ff      	movs	r1, #255	; 0xff
 8008aae:	f7ff ffb7 	bl	8008a20 <BroadcastMessage>
 8008ab2:	e7f4      	b.n	8008a9e <SendMessageToModule+0x2e>
 8008ab4:	20000070 	.word	0x20000070
 8008ab8:	20000d14 	.word	0x20000d14

08008abc <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 8008abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008abe:	46de      	mov	lr, fp
 8008ac0:	4657      	mov	r7, sl
 8008ac2:	464e      	mov	r6, r9
 8008ac4:	4645      	mov	r5, r8
 8008ac6:	b5e0      	push	{r5, r6, r7, lr}
 8008ac8:	b091      	sub	sp, #68	; 0x44
 8008aca:	9007      	str	r0, [sp, #28]
 8008acc:	000d      	movs	r5, r1
 8008ace:	9206      	str	r2, [sp, #24]
 8008ad0:	4698      	mov	r8, r3
 8008ad2:	ab1a      	add	r3, sp, #104	; 0x68
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	469a      	mov	sl, r3
 8008ad8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008ada:	ab1d      	add	r3, sp, #116	; 0x74
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8008ae0:	4b5a      	ldr	r3, [pc, #360]	; (8008c4c <StartScastDMAStream+0x190>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	d11c      	bne.n	8008b22 <StartScastDMAStream+0x66>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008ae8:	0e3b      	lsrs	r3, r7, #24
 8008aea:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8008aec:	0c3b      	lsrs	r3, r7, #16
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8008af2:	0a3b      	lsrs	r3, r7, #8
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008af8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008afa:	0e1b      	lsrs	r3, r3, #24
 8008afc:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8008afe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008b00:	0c1b      	lsrs	r3, r3, #16
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 8008b06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b0e:	4e50      	ldr	r6, [pc, #320]	; (8008c50 <StartScastDMAStream+0x194>)
 8008b10:	1c73      	adds	r3, r6, #1
 8008b12:	4699      	mov	r9, r3
				temp2 = dstP;
 8008b14:	9b06      	ldr	r3, [sp, #24]
 8008b16:	930e      	str	r3, [sp, #56]	; 0x38
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008b18:	4c4e      	ldr	r4, [pc, #312]	; (8008c54 <StartScastDMAStream+0x198>)
 8008b1a:	971b      	str	r7, [sp, #108]	; 0x6c
 8008b1c:	4647      	mov	r7, r8
 8008b1e:	4688      	mov	r8, r1
 8008b20:	e054      	b.n	8008bcc <StartScastDMAStream+0x110>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008b22:	4b4c      	ldr	r3, [pc, #304]	; (8008c54 <StartScastDMAStream+0x198>)
 8008b24:	0e3a      	lsrs	r2, r7, #24
 8008b26:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8008b28:	0c3a      	lsrs	r2, r7, #16
 8008b2a:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8008b2c:	0a3a      	lsrs	r2, r7, #8
 8008b2e:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8008b30:	70df      	strb	r7, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008b32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b34:	0e12      	lsrs	r2, r2, #24
 8008b36:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8008b38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b3a:	0c12      	lsrs	r2, r2, #16
 8008b3c:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8008b3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b40:	0a12      	lsrs	r2, r2, #8
 8008b42:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8008b44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b46:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8008b48:	4652      	mov	r2, sl
 8008b4a:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8008b4c:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8008b4e:	4642      	mov	r2, r8
 8008b50:	729a      	strb	r2, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8008b52:	9a06      	ldr	r2, [sp, #24]
 8008b54:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 8008b56:	465a      	mov	r2, fp
 8008b58:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8008b5a:	220d      	movs	r2, #13
 8008b5c:	211c      	movs	r1, #28
 8008b5e:	0028      	movs	r0, r5
 8008b60:	f7ff ff86 	bl	8008a70 <SendMessageToModule>
		return result;
 8008b64:	e056      	b.n	8008c14 <StartScastDMAStream+0x158>
				temp1 = FindRoute(route[i], srcM);
 8008b66:	4641      	mov	r1, r8
 8008b68:	f7fa fc88 	bl	800347c <FindRoute>
 8008b6c:	900f      	str	r0, [sp, #60]	; 0x3c
			FindRoute(srcM, dstM);
 8008b6e:	0039      	movs	r1, r7
 8008b70:	4640      	mov	r0, r8
 8008b72:	f7fa fc83 	bl	800347c <FindRoute>
			if (route[i] == dstM) {
 8008b76:	7868      	ldrb	r0, [r5, #1]
				temp2 = dstP;
 8008b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			if (route[i] == dstM) {
 8008b7a:	42b8      	cmp	r0, r7
 8008b7c:	d135      	bne.n	8008bea <StartScastDMAStream+0x12e>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008b7e:	9a08      	ldr	r2, [sp, #32]
 8008b80:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8008b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b84:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8008b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b88:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8008b8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b8c:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b90:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8008b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b94:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 8008b96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b98:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8008b9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b9c:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8008b9e:	4652      	mov	r2, sl
 8008ba0:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8008ba2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ba4:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8008ba6:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8008ba8:	465b      	mov	r3, fp
 8008baa:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8008bac:	0039      	movs	r1, r7
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7fa fc64 	bl	800347c <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8008bb4:	7868      	ldrb	r0, [r5, #1]
 8008bb6:	220c      	movs	r2, #12
 8008bb8:	211b      	movs	r1, #27
 8008bba:	f7ff ff59 	bl	8008a70 <SendMessageToModule>
			osDelay(10);
 8008bbe:	200a      	movs	r0, #10
 8008bc0:	f003 fe7f 	bl	800c8c2 <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8008bc4:	1c73      	adds	r3, r6, #1
 8008bc6:	454e      	cmp	r6, r9
 8008bc8:	d014      	beq.n	8008bf4 <StartScastDMAStream+0x138>
 8008bca:	001e      	movs	r6, r3
		FindRoute(srcM, dstM);
 8008bcc:	0039      	movs	r1, r7
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7fa fc54 	bl	800347c <FindRoute>
		if (route[i]) 
 8008bd4:	0035      	movs	r5, r6
 8008bd6:	7870      	ldrb	r0, [r6, #1]
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d0f3      	beq.n	8008bc4 <StartScastDMAStream+0x108>
			if (route[i+1]) {
 8008bdc:	78b1      	ldrb	r1, [r6, #2]
 8008bde:	2900      	cmp	r1, #0
 8008be0:	d0c1      	beq.n	8008b66 <StartScastDMAStream+0xaa>
				temp1 = FindRoute(route[i], route[i+1]);
 8008be2:	f7fa fc4b 	bl	800347c <FindRoute>
 8008be6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008be8:	e7c1      	b.n	8008b6e <StartScastDMAStream+0xb2>
				temp2 = FindRoute(route[i], route[i-1]);
 8008bea:	7829      	ldrb	r1, [r5, #0]
 8008bec:	f7fa fc46 	bl	800347c <FindRoute>
 8008bf0:	0003      	movs	r3, r0
 8008bf2:	e7c4      	b.n	8008b7e <StartScastDMAStream+0xc2>
 8008bf4:	4645      	mov	r5, r8
 8008bf6:	46b8      	mov	r8, r7
 8008bf8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
		}
	}
	
	if (srcM == dstM)
 8008bfa:	4545      	cmp	r5, r8
 8008bfc:	d112      	bne.n	8008c24 <StartScastDMAStream+0x168>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	9b07      	ldr	r3, [sp, #28]
 8008c04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c06:	0039      	movs	r1, r7
 8008c08:	4650      	mov	r0, sl
 8008c0a:	f7ff fbeb 	bl	80083e4 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 8008c0e:	465b      	mov	r3, fp
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10d      	bne.n	8008c30 <StartScastDMAStream+0x174>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 8008c14:	2000      	movs	r0, #0
 8008c16:	b011      	add	sp, #68	; 0x44
 8008c18:	bcf0      	pop	{r4, r5, r6, r7}
 8008c1a:	46bb      	mov	fp, r7
 8008c1c:	46b2      	mov	sl, r6
 8008c1e:	46a9      	mov	r9, r5
 8008c20:	46a0      	mov	r8, r4
 8008c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 8008c24:	4641      	mov	r1, r8
 8008c26:	0028      	movs	r0, r5
 8008c28:	f7fa fc28 	bl	800347c <FindRoute>
 8008c2c:	9006      	str	r0, [sp, #24]
 8008c2e:	e7e6      	b.n	8008bfe <StartScastDMAStream+0x142>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8008c30:	2300      	movs	r3, #0
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	9b07      	ldr	r3, [sp, #28]
 8008c40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c42:	0039      	movs	r1, r7
 8008c44:	4650      	mov	r0, sl
 8008c46:	f7fa f86b 	bl	8002d20 <SaveEEstreams>
 8008c4a:	e7e3      	b.n	8008c14 <StartScastDMAStream+0x158>
 8008c4c:	20000070 	.word	0x20000070
 8008c50:	200066b7 	.word	0x200066b7
 8008c54:	20000d14 	.word	0x20000d14

08008c58 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 8008c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5a:	46de      	mov	lr, fp
 8008c5c:	4657      	mov	r7, sl
 8008c5e:	464e      	mov	r6, r9
 8008c60:	4645      	mov	r5, r8
 8008c62:	b5e0      	push	{r5, r6, r7, lr}
 8008c64:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
				++rejectedMsg;							
			}	
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
 8008c6a:	4bbc      	ldr	r3, [pc, #752]	; (8008f5c <BackEndTask+0x304>)
 8008c6c:	469b      	mov	fp, r3
 8008c6e:	e16d      	b.n	8008f4c <BackEndTask+0x2f4>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008c70:	9504      	str	r5, [sp, #16]
 8008c72:	9603      	str	r6, [sp, #12]
 8008c74:	7833      	ldrb	r3, [r6, #0]
 8008c76:	2b3f      	cmp	r3, #63	; 0x3f
 8008c78:	dd00      	ble.n	8008c7c <BackEndTask+0x24>
 8008c7a:	e192      	b.n	8008fa2 <BackEndTask+0x34a>
 8008c7c:	001a      	movs	r2, r3
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8008c7e:	1c78      	adds	r0, r7, #1
 8008c80:	e185      	b.n	8008f8e <BackEndTask+0x336>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008c82:	2a3f      	cmp	r2, #63	; 0x3f
 8008c84:	d004      	beq.n	8008c90 <BackEndTask+0x38>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008c86:	3201      	adds	r2, #1
 8008c88:	2a40      	cmp	r2, #64	; 0x40
 8008c8a:	d000      	beq.n	8008c8e <BackEndTask+0x36>
 8008c8c:	e17f      	b.n	8008f8e <BackEndTask+0x336>
 8008c8e:	e188      	b.n	8008fa2 <BackEndTask+0x34a>
 8008c90:	0039      	movs	r1, r7
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008c92:	5cba      	ldrb	r2, [r7, r2]
 8008c94:	2a48      	cmp	r2, #72	; 0x48
 8008c96:	d026      	beq.n	8008ce6 <BackEndTask+0x8e>
							if (BOS.disableCLI == false)
 8008c98:	4ab1      	ldr	r2, [pc, #708]	; (8008f60 <BackEndTask+0x308>)
 8008c9a:	7ed2      	ldrb	r2, [r2, #27]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d02c      	beq.n	8008cfa <BackEndTask+0xa2>
		for (port=1 ; port <= NumOfPorts; port++)
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	3401      	adds	r4, #1
 8008ca4:	3740      	adds	r7, #64	; 0x40
 8008ca6:	3601      	adds	r6, #1
 8008ca8:	2d06      	cmp	r5, #6
 8008caa:	d100      	bne.n	8008cae <BackEndTask+0x56>
 8008cac:	e14c      	b.n	8008f48 <BackEndTask+0x2f0>
 8008cae:	1c6b      	adds	r3, r5, #1
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	469a      	mov	sl, r3
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8008cb4:	9400      	str	r4, [sp, #0]
 8008cb6:	7823      	ldrb	r3, [r4, #0]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d9d9      	bls.n	8008c70 <BackEndTask+0x18>
			if (MsgDMAStopped[port-1] == true) {
 8008cbc:	465b      	mov	r3, fp
 8008cbe:	5d5b      	ldrb	r3, [r3, r5]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0ed      	beq.n	8008ca0 <BackEndTask+0x48>
				MsgDMAStopped[port-1] = false;
 8008cc4:	4ba5      	ldr	r3, [pc, #660]	; (8008f5c <BackEndTask+0x304>)
 8008cc6:	18eb      	adds	r3, r5, r3
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8008ccc:	9b00      	ldr	r3, [sp, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b05      	cmp	r3, #5
 8008cd2:	d100      	bne.n	8008cd6 <BackEndTask+0x7e>
 8008cd4:	e134      	b.n	8008f40 <BackEndTask+0x2e8>
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	f003 fca2 	bl	800c620 <GetUart>
 8008cdc:	2240      	movs	r2, #64	; 0x40
 8008cde:	0039      	movs	r1, r7
 8008ce0:	f008 f82e 	bl	8010d40 <HAL_UART_Receive_DMA>
 8008ce4:	e7dc      	b.n	8008ca0 <BackEndTask+0x48>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008ce6:	783a      	ldrb	r2, [r7, #0]
 8008ce8:	2a5a      	cmp	r2, #90	; 0x5a
 8008cea:	d1d5      	bne.n	8008c98 <BackEndTask+0x40>
					packetLength = UARTRxBuf[port-1][1];
 8008cec:	787b      	ldrb	r3, [r7, #1]
 8008cee:	9302      	str	r3, [sp, #8]
					parseStart = 2;
 8008cf0:	233f      	movs	r3, #63	; 0x3f
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	3b3d      	subs	r3, #61	; 0x3d
 8008cf6:	9305      	str	r3, [sp, #20]
 8008cf8:	e034      	b.n	8008d64 <BackEndTask+0x10c>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008cfa:	1c7a      	adds	r2, r7, #1
 8008cfc:	4694      	mov	ip, r2
 8008cfe:	e021      	b.n	8008d44 <BackEndTask+0xec>
 8008d00:	2b3f      	cmp	r3, #63	; 0x3f
 8008d02:	d11c      	bne.n	8008d3e <BackEndTask+0xe6>
 8008d04:	780a      	ldrb	r2, [r1, #0]
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	d1ca      	bne.n	8008ca0 <BackEndTask+0x48>
										UARTRxBuf[port-1][j] = 0;
 8008d0a:	9a04      	ldr	r2, [sp, #16]
 8008d0c:	0191      	lsls	r1, r2, #6
 8008d0e:	4a95      	ldr	r2, [pc, #596]	; (8008f64 <BackEndTask+0x30c>)
 8008d10:	1852      	adds	r2, r2, r1
 8008d12:	2100      	movs	r1, #0
 8008d14:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8008d16:	3301      	adds	r3, #1
 8008d18:	9a03      	ldr	r2, [sp, #12]
 8008d1a:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8008d1c:	4b92      	ldr	r3, [pc, #584]	; (8008f68 <BackEndTask+0x310>)
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	4892      	ldr	r0, [pc, #584]	; (8008f6c <BackEndTask+0x314>)
 8008d22:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 8008d24:	2203      	movs	r2, #3
 8008d26:	9900      	ldr	r1, [sp, #0]
 8008d28:	700a      	strb	r2, [r1, #0]
										PcPort = port;
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8008d2e:	4b90      	ldr	r3, [pc, #576]	; (8008f70 <BackEndTask+0x318>)
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	2202      	movs	r2, #2
 8008d36:	2100      	movs	r1, #0
 8008d38:	f005 fa2c 	bl	800e194 <xTaskGenericNotify>
										break;
 8008d3c:	e7b0      	b.n	8008ca0 <BackEndTask+0x48>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008d3e:	3301      	adds	r3, #1
 8008d40:	2b40      	cmp	r3, #64	; 0x40
 8008d42:	d0ad      	beq.n	8008ca0 <BackEndTask+0x48>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008d44:	5cca      	ldrb	r2, [r1, r3]
 8008d46:	2a0d      	cmp	r2, #13
 8008d48:	d1f9      	bne.n	8008d3e <BackEndTask+0xe6>
 8008d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d4c:	dcd8      	bgt.n	8008d00 <BackEndTask+0xa8>
 8008d4e:	4662      	mov	r2, ip
 8008d50:	5cd2      	ldrb	r2, [r2, r3]
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d0d9      	beq.n	8008d0a <BackEndTask+0xb2>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008d56:	3301      	adds	r3, #1
 8008d58:	e7f4      	b.n	8008d44 <BackEndTask+0xec>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 8008d5a:	233f      	movs	r3, #63	; 0x3f
 8008d5c:	5cfb      	ldrb	r3, [r7, r3]
 8008d5e:	9302      	str	r3, [sp, #8]
					parseStart = 0;				
 8008d60:	2300      	movs	r3, #0
 8008d62:	9305      	str	r3, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	3303      	adds	r3, #3
 8008d68:	4698      	mov	r8, r3
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	4443      	add	r3, r8
 8008d6e:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 8008d70:	2340      	movs	r3, #64	; 0x40
 8008d72:	425b      	negs	r3, r3
 8008d74:	469c      	mov	ip, r3
 8008d76:	44e1      	add	r9, ip
 8008d78:	e133      	b.n	8008fe2 <BackEndTask+0x38a>
					packetLength = UARTRxBuf[port-1][0];
 8008d7a:	783b      	ldrb	r3, [r7, #0]
 8008d7c:	9302      	str	r3, [sp, #8]
					parseStart = 1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	9305      	str	r3, [sp, #20]
 8008d82:	e7ef      	b.n	8008d64 <BackEndTask+0x10c>
					Delay_ms(1);
 8008d84:	2001      	movs	r0, #1
 8008d86:	f005 fe0f 	bl	800e9a8 <HAL_Delay>
					if (packetStart < packetEnd) {
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	4599      	cmp	r9, r3
 8008d8e:	dd50      	ble.n	8008e32 <BackEndTask+0x1da>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 8008d90:	01a9      	lsls	r1, r5, #6
 8008d92:	469c      	mov	ip, r3
 8008d94:	4461      	add	r1, ip
 8008d96:	4b73      	ldr	r3, [pc, #460]	; (8008f64 <BackEndTask+0x30c>)
 8008d98:	469c      	mov	ip, r3
 8008d9a:	4461      	add	r1, ip
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	4875      	ldr	r0, [pc, #468]	; (8008f74 <BackEndTask+0x31c>)
 8008da0:	f008 fede 	bl	8011b60 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	1cd9      	adds	r1, r3, #3
 8008da8:	4872      	ldr	r0, [pc, #456]	; (8008f74 <BackEndTask+0x31c>)
 8008daa:	f002 fe45 	bl	800ba38 <CalculateCRC8>
 8008dae:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8008db0:	2238      	movs	r2, #56	; 0x38
 8008db2:	2100      	movs	r1, #0
 8008db4:	486f      	ldr	r0, [pc, #444]	; (8008f74 <BackEndTask+0x31c>)
 8008db6:	f008 fedc 	bl	8011b72 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8008dba:	9b04      	ldr	r3, [sp, #16]
 8008dbc:	019b      	lsls	r3, r3, #6
 8008dbe:	4a69      	ldr	r2, [pc, #420]	; (8008f64 <BackEndTask+0x30c>)
 8008dc0:	4694      	mov	ip, r2
 8008dc2:	4463      	add	r3, ip
 8008dc4:	464a      	mov	r2, r9
 8008dc6:	5c9b      	ldrb	r3, [r3, r2]
 8008dc8:	4543      	cmp	r3, r8
 8008dca:	d000      	beq.n	8008dce <BackEndTask+0x176>
 8008dcc:	e111      	b.n	8008ff2 <BackEndTask+0x39a>
						portStatus[port] = MSG;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	9a00      	ldr	r2, [sp, #0]
 8008dd2:	7013      	strb	r3, [r2, #0]
						messageLength[port-1] = packetLength;	
 8008dd4:	4b68      	ldr	r3, [pc, #416]	; (8008f78 <BackEndTask+0x320>)
 8008dd6:	9a02      	ldr	r2, [sp, #8]
 8008dd8:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 8008dda:	233f      	movs	r3, #63	; 0x3f
 8008ddc:	9905      	ldr	r1, [sp, #20]
 8008dde:	1a5b      	subs	r3, r3, r1
 8008de0:	4293      	cmp	r3, r2
 8008de2:	db6b      	blt.n	8008ebc <BackEndTask+0x264>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8008de4:	00e8      	lsls	r0, r5, #3
 8008de6:	1b40      	subs	r0, r0, r5
 8008de8:	00c0      	lsls	r0, r0, #3
 8008dea:	4b64      	ldr	r3, [pc, #400]	; (8008f7c <BackEndTask+0x324>)
 8008dec:	18c0      	adds	r0, r0, r3
 8008dee:	01a9      	lsls	r1, r5, #6
 8008df0:	9b05      	ldr	r3, [sp, #20]
 8008df2:	469c      	mov	ip, r3
 8008df4:	4461      	add	r1, ip
 8008df6:	4b5b      	ldr	r3, [pc, #364]	; (8008f64 <BackEndTask+0x30c>)
 8008df8:	18c9      	adds	r1, r1, r3
 8008dfa:	f008 feb1 	bl	8011b60 <memcpy>
						if (packetStart < packetEnd) {
 8008dfe:	9b01      	ldr	r3, [sp, #4]
 8008e00:	4599      	cmp	r9, r3
 8008e02:	dc00      	bgt.n	8008e06 <BackEndTask+0x1ae>
 8008e04:	e081      	b.n	8008f0a <BackEndTask+0x2b2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8008e06:	9a02      	ldr	r2, [sp, #8]
 8008e08:	3204      	adds	r2, #4
 8008e0a:	01a8      	lsls	r0, r5, #6
 8008e0c:	469c      	mov	ip, r3
 8008e0e:	4460      	add	r0, ip
 8008e10:	4b54      	ldr	r3, [pc, #336]	; (8008f64 <BackEndTask+0x30c>)
 8008e12:	18c0      	adds	r0, r0, r3
 8008e14:	2100      	movs	r1, #0
 8008e16:	f008 feac 	bl	8011b72 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	9a03      	ldr	r2, [sp, #12]
 8008e20:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8008e22:	4a57      	ldr	r2, [pc, #348]	; (8008f80 <BackEndTask+0x328>)
 8008e24:	8813      	ldrh	r3, [r2, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	f7ff fbb2 	bl	8008594 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8008e30:	e736      	b.n	8008ca0 <BackEndTask+0x48>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 8008e32:	01a9      	lsls	r1, r5, #6
 8008e34:	2240      	movs	r2, #64	; 0x40
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	1ad0      	subs	r0, r2, r3
 8008e3a:	9107      	str	r1, [sp, #28]
 8008e3c:	469c      	mov	ip, r3
 8008e3e:	4461      	add	r1, ip
 8008e40:	4b48      	ldr	r3, [pc, #288]	; (8008f64 <BackEndTask+0x30c>)
 8008e42:	469c      	mov	ip, r3
 8008e44:	4461      	add	r1, ip
 8008e46:	9006      	str	r0, [sp, #24]
 8008e48:	0002      	movs	r2, r0
 8008e4a:	484a      	ldr	r0, [pc, #296]	; (8008f74 <BackEndTask+0x31c>)
 8008e4c:	f008 fe88 	bl	8011b60 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 8008e50:	4848      	ldr	r0, [pc, #288]	; (8008f74 <BackEndTask+0x31c>)
 8008e52:	9906      	ldr	r1, [sp, #24]
 8008e54:	468c      	mov	ip, r1
 8008e56:	4460      	add	r0, ip
 8008e58:	4643      	mov	r3, r8
 8008e5a:	1a5a      	subs	r2, r3, r1
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	0019      	movs	r1, r3
 8008e60:	4b40      	ldr	r3, [pc, #256]	; (8008f64 <BackEndTask+0x30c>)
 8008e62:	469c      	mov	ip, r3
 8008e64:	4461      	add	r1, ip
 8008e66:	f008 fe7b 	bl	8011b60 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	1cd9      	adds	r1, r3, #3
 8008e6e:	4841      	ldr	r0, [pc, #260]	; (8008f74 <BackEndTask+0x31c>)
 8008e70:	f002 fde2 	bl	800ba38 <CalculateCRC8>
 8008e74:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8008e76:	2238      	movs	r2, #56	; 0x38
 8008e78:	2100      	movs	r1, #0
 8008e7a:	483e      	ldr	r0, [pc, #248]	; (8008f74 <BackEndTask+0x31c>)
 8008e7c:	f008 fe79 	bl	8011b72 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8008e80:	9b04      	ldr	r3, [sp, #16]
 8008e82:	019b      	lsls	r3, r3, #6
 8008e84:	4a37      	ldr	r2, [pc, #220]	; (8008f64 <BackEndTask+0x30c>)
 8008e86:	4694      	mov	ip, r2
 8008e88:	4463      	add	r3, ip
 8008e8a:	464a      	mov	r2, r9
 8008e8c:	5c9b      	ldrb	r3, [r3, r2]
 8008e8e:	4543      	cmp	r3, r8
 8008e90:	d09d      	beq.n	8008dce <BackEndTask+0x176>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008e92:	2240      	movs	r2, #64	; 0x40
 8008e94:	9b01      	ldr	r3, [sp, #4]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	4690      	mov	r8, r2
 8008e9a:	01a8      	lsls	r0, r5, #6
 8008e9c:	469c      	mov	ip, r3
 8008e9e:	4460      	add	r0, ip
 8008ea0:	4b30      	ldr	r3, [pc, #192]	; (8008f64 <BackEndTask+0x30c>)
 8008ea2:	18c0      	adds	r0, r0, r3
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	f008 fe64 	bl	8011b72 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8008eaa:	9a02      	ldr	r2, [sp, #8]
 8008eac:	3204      	adds	r2, #4
 8008eae:	4643      	mov	r3, r8
 8008eb0:	1ad2      	subs	r2, r2, r3
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	0038      	movs	r0, r7
 8008eb6:	f008 fe5c 	bl	8011b72 <memset>
 8008eba:	e0a5      	b.n	8009008 <BackEndTask+0x3b0>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8008ebc:	00eb      	lsls	r3, r5, #3
 8008ebe:	1b5b      	subs	r3, r3, r5
 8008ec0:	00d9      	lsls	r1, r3, #3
 8008ec2:	01ab      	lsls	r3, r5, #6
 8008ec4:	2240      	movs	r2, #64	; 0x40
 8008ec6:	9805      	ldr	r0, [sp, #20]
 8008ec8:	1a12      	subs	r2, r2, r0
 8008eca:	4690      	mov	r8, r2
 8008ecc:	4a2b      	ldr	r2, [pc, #172]	; (8008f7c <BackEndTask+0x324>)
 8008ece:	0010      	movs	r0, r2
 8008ed0:	9104      	str	r1, [sp, #16]
 8008ed2:	468c      	mov	ip, r1
 8008ed4:	4460      	add	r0, ip
 8008ed6:	9a05      	ldr	r2, [sp, #20]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	469c      	mov	ip, r3
 8008edc:	4462      	add	r2, ip
 8008ede:	4b21      	ldr	r3, [pc, #132]	; (8008f64 <BackEndTask+0x30c>)
 8008ee0:	18d1      	adds	r1, r2, r3
 8008ee2:	4642      	mov	r2, r8
 8008ee4:	f008 fe3c 	bl	8011b60 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8008ee8:	9904      	ldr	r1, [sp, #16]
 8008eea:	0008      	movs	r0, r1
 8008eec:	4440      	add	r0, r8
 8008eee:	4a23      	ldr	r2, [pc, #140]	; (8008f7c <BackEndTask+0x324>)
 8008ef0:	4694      	mov	ip, r2
 8008ef2:	4460      	add	r0, ip
 8008ef4:	9a02      	ldr	r2, [sp, #8]
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	1a52      	subs	r2, r2, r1
 8008efa:	9b00      	ldr	r3, [sp, #0]
 8008efc:	0019      	movs	r1, r3
 8008efe:	4b19      	ldr	r3, [pc, #100]	; (8008f64 <BackEndTask+0x30c>)
 8008f00:	4698      	mov	r8, r3
 8008f02:	4441      	add	r1, r8
 8008f04:	f008 fe2c 	bl	8011b60 <memcpy>
 8008f08:	e779      	b.n	8008dfe <BackEndTask+0x1a6>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008f0a:	01ab      	lsls	r3, r5, #6
 8008f0c:	2240      	movs	r2, #64	; 0x40
 8008f0e:	9901      	ldr	r1, [sp, #4]
 8008f10:	1a52      	subs	r2, r2, r1
 8008f12:	4690      	mov	r8, r2
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	0018      	movs	r0, r3
 8008f18:	468c      	mov	ip, r1
 8008f1a:	4460      	add	r0, ip
 8008f1c:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <BackEndTask+0x30c>)
 8008f1e:	18c0      	adds	r0, r0, r3
 8008f20:	2100      	movs	r1, #0
 8008f22:	f008 fe26 	bl	8011b72 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8008f26:	9a02      	ldr	r2, [sp, #8]
 8008f28:	3204      	adds	r2, #4
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	1a52      	subs	r2, r2, r1
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	490c      	ldr	r1, [pc, #48]	; (8008f64 <BackEndTask+0x30c>)
 8008f32:	468c      	mov	ip, r1
 8008f34:	4463      	add	r3, ip
 8008f36:	0018      	movs	r0, r3
 8008f38:	2100      	movs	r1, #0
 8008f3a:	f008 fe1a 	bl	8011b72 <memset>
 8008f3e:	e76c      	b.n	8008e1a <BackEndTask+0x1c2>
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	9a00      	ldr	r2, [sp, #0]
 8008f44:	7013      	strb	r3, [r2, #0]
 8008f46:	e6c6      	b.n	8008cd6 <BackEndTask+0x7e>
			}				
		}
		
		taskYIELD();
 8008f48:	f005 fbb4 	bl	800e6b4 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <BackEndTask+0x32c>)
 8008f4e:	4698      	mov	r8, r3
 8008f50:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <BackEndTask+0x330>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8008f52:	4f04      	ldr	r7, [pc, #16]	; (8008f64 <BackEndTask+0x30c>)
 8008f54:	2500      	movs	r5, #0
 8008f56:	4644      	mov	r4, r8
 8008f58:	001e      	movs	r6, r3
 8008f5a:	e6a8      	b.n	8008cae <BackEndTask+0x56>
 8008f5c:	20000f70 	.word	0x20000f70
 8008f60:	20006600 	.word	0x20006600
 8008f64:	20000f78 	.word	0x20000f78
 8008f68:	20000ad7 	.word	0x20000ad7
 8008f6c:	20000dcc 	.word	0x20000dcc
 8008f70:	200011ac 	.word	0x200011ac
 8008f74:	20001100 	.word	0x20001100
 8008f78:	20000d0c 	.word	0x20000d0c
 8008f7c:	20000b14 	.word	0x20000b14
 8008f80:	20001238 	.word	0x20001238
 8008f84:	20000dcd 	.word	0x20000dcd
 8008f88:	200010f8 	.word	0x200010f8
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008f8c:	3201      	adds	r2, #1
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8008f8e:	2a3e      	cmp	r2, #62	; 0x3e
 8008f90:	dd00      	ble.n	8008f94 <BackEndTask+0x33c>
 8008f92:	e676      	b.n	8008c82 <BackEndTask+0x2a>
 8008f94:	5cb9      	ldrb	r1, [r7, r2]
 8008f96:	2948      	cmp	r1, #72	; 0x48
 8008f98:	d1f8      	bne.n	8008f8c <BackEndTask+0x334>
 8008f9a:	5c81      	ldrb	r1, [r0, r2]
 8008f9c:	295a      	cmp	r1, #90	; 0x5a
 8008f9e:	d1f5      	bne.n	8008f8c <BackEndTask+0x334>
 8008fa0:	9201      	str	r2, [sp, #4]
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	2b3d      	cmp	r3, #61	; 0x3d
 8008fa6:	d100      	bne.n	8008faa <BackEndTask+0x352>
 8008fa8:	e6d7      	b.n	8008d5a <BackEndTask+0x102>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 8008faa:	9b01      	ldr	r3, [sp, #4]
 8008fac:	2b3e      	cmp	r3, #62	; 0x3e
 8008fae:	d100      	bne.n	8008fb2 <BackEndTask+0x35a>
 8008fb0:	e6e3      	b.n	8008d7a <BackEndTask+0x122>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	2b3f      	cmp	r3, #63	; 0x3f
 8008fb6:	d100      	bne.n	8008fba <BackEndTask+0x362>
 8008fb8:	e698      	b.n	8008cec <BackEndTask+0x94>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	019b      	lsls	r3, r3, #6
 8008fbe:	4a17      	ldr	r2, [pc, #92]	; (800901c <BackEndTask+0x3c4>)
 8008fc0:	4694      	mov	ip, r2
 8008fc2:	4463      	add	r3, ip
 8008fc4:	9a01      	ldr	r2, [sp, #4]
 8008fc6:	4694      	mov	ip, r2
 8008fc8:	4463      	add	r3, ip
 8008fca:	7899      	ldrb	r1, [r3, #2]
 8008fcc:	9102      	str	r1, [sp, #8]
					parseStart = packetStart+3;
 8008fce:	0013      	movs	r3, r2
 8008fd0:	3203      	adds	r2, #3
 8008fd2:	9205      	str	r2, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8008fd4:	1cca      	adds	r2, r1, #3
 8008fd6:	4690      	mov	r8, r2
 8008fd8:	4443      	add	r3, r8
 8008fda:	4699      	mov	r9, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 8008fdc:	2b3f      	cmp	r3, #63	; 0x3f
 8008fde:	dd00      	ble.n	8008fe2 <BackEndTask+0x38a>
 8008fe0:	e6c6      	b.n	8008d70 <BackEndTask+0x118>
				if (packetStart != packetEnd)										// Non-empty packet
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	4599      	cmp	r9, r3
 8008fe6:	d000      	beq.n	8008fea <BackEndTask+0x392>
 8008fe8:	e6cc      	b.n	8008d84 <BackEndTask+0x12c>
				if (packetStart < packetEnd) {
 8008fea:	9b01      	ldr	r3, [sp, #4]
 8008fec:	4599      	cmp	r9, r3
 8008fee:	dc00      	bgt.n	8008ff2 <BackEndTask+0x39a>
 8008ff0:	e74f      	b.n	8008e92 <BackEndTask+0x23a>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8008ff2:	9a02      	ldr	r2, [sp, #8]
 8008ff4:	3204      	adds	r2, #4
 8008ff6:	01a8      	lsls	r0, r5, #6
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	469c      	mov	ip, r3
 8008ffc:	4460      	add	r0, ip
 8008ffe:	4b07      	ldr	r3, [pc, #28]	; (800901c <BackEndTask+0x3c4>)
 8009000:	18c0      	adds	r0, r0, r3
 8009002:	2100      	movs	r1, #0
 8009004:	f008 fdb5 	bl	8011b72 <memset>
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009008:	464b      	mov	r3, r9
 800900a:	3301      	adds	r3, #1
 800900c:	9a03      	ldr	r2, [sp, #12]
 800900e:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 8009010:	4a03      	ldr	r2, [pc, #12]	; (8009020 <BackEndTask+0x3c8>)
 8009012:	8813      	ldrh	r3, [r2, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	8013      	strh	r3, [r2, #0]
 8009018:	e650      	b.n	8008cbc <BackEndTask+0x64>
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	20000f78 	.word	0x20000f78
 8009020:	200013d4 	.word	0x200013d4

08009024 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8009024:	2001      	movs	r0, #1
 8009026:	4770      	bx	lr

08009028 <PxMessagingTask>:
{
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902a:	46de      	mov	lr, fp
 800902c:	4657      	mov	r7, sl
 800902e:	464e      	mov	r6, r9
 8009030:	4645      	mov	r5, r8
 8009032:	b5e0      	push	{r5, r6, r7, lr}
 8009034:	b095      	sub	sp, #84	; 0x54
 8009036:	2300      	movs	r3, #0
 8009038:	9306      	str	r3, [sp, #24]
 800903a:	930a      	str	r3, [sp, #40]	; 0x28
	port = (int8_t)(unsigned) argument;
 800903c:	b2c3      	uxtb	r3, r0
 800903e:	9308      	str	r3, [sp, #32]
 8009040:	27ff      	movs	r7, #255	; 0xff
 8009042:	4007      	ands	r7, r0
		if (messageLength[port-1])
 8009044:	1e7c      	subs	r4, r7, #1
 8009046:	00e3      	lsls	r3, r4, #3
 8009048:	1b1b      	subs	r3, r3, r4
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	9309      	str	r3, [sp, #36]	; 0x24
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 800904e:	4ada      	ldr	r2, [pc, #872]	; (80093b8 <PxMessagingTask+0x390>)
 8009050:	18d3      	adds	r3, r2, r3
 8009052:	9304      	str	r3, [sp, #16]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	930b      	str	r3, [sp, #44]	; 0x2c
 8009058:	2500      	movs	r5, #0
			if (cMessage[port-1][2]>>7) {
 800905a:	00e3      	lsls	r3, r4, #3
 800905c:	1b1b      	subs	r3, r3, r4
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	469a      	mov	sl, r3
 8009062:	0013      	movs	r3, r2
 8009064:	4453      	add	r3, sl
 8009066:	9307      	str	r3, [sp, #28]
 8009068:	3302      	adds	r3, #2
 800906a:	469b      	mov	fp, r3
 800906c:	46a8      	mov	r8, r5
 800906e:	4656      	mov	r6, sl
 8009070:	e021      	b.n	80090b6 <PxMessagingTask+0x8e>
				code = cMessage[port-1][3+shift];
 8009072:	4ad1      	ldr	r2, [pc, #836]	; (80093b8 <PxMessagingTask+0x390>)
 8009074:	1992      	adds	r2, r2, r6
 8009076:	18d3      	adds	r3, r2, r3
 8009078:	78db      	ldrb	r3, [r3, #3]
 800907a:	4699      	mov	r9, r3
 800907c:	e046      	b.n	800910c <PxMessagingTask+0xe4>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 800907e:	464b      	mov	r3, r9
 8009080:	2b19      	cmp	r3, #25
 8009082:	d05b      	beq.n	800913c <PxMessagingTask+0x114>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009084:	2b1a      	cmp	r3, #26
 8009086:	d063      	beq.n	8009150 <PxMessagingTask+0x128>
		if (result == BOS_ERR_UnknownMessage) {
 8009088:	4643      	mov	r3, r8
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <PxMessagingTask+0x6a>
 800908e:	f001 fa52 	bl	800a536 <PxMessagingTask+0x150e>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009092:	4dca      	ldr	r5, [pc, #808]	; (80093bc <PxMessagingTask+0x394>)
 8009094:	5d2a      	ldrb	r2, [r5, r4]
 8009096:	2100      	movs	r1, #0
 8009098:	9804      	ldr	r0, [sp, #16]
 800909a:	f008 fd6a 	bl	8011b72 <memset>
		messageLength[port-1] = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 80090a2:	4bc7      	ldr	r3, [pc, #796]	; (80093c0 <PxMessagingTask+0x398>)
 80090a4:	5ddb      	ldrb	r3, [r3, r7]
 80090a6:	3b02      	subs	r3, #2
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d902      	bls.n	80090b2 <PxMessagingTask+0x8a>
			portStatus[port] = FREE;
 80090ac:	4bc4      	ldr	r3, [pc, #784]	; (80093c0 <PxMessagingTask+0x398>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 80090b2:	f005 faff 	bl	800e6b4 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80090b6:	2101      	movs	r1, #1
 80090b8:	4249      	negs	r1, r1
 80090ba:	2001      	movs	r0, #1
 80090bc:	f005 f81e 	bl	800e0fc <ulTaskNotifyTake>
		if (messageLength[port-1])
 80090c0:	4bbe      	ldr	r3, [pc, #760]	; (80093bc <PxMessagingTask+0x394>)
 80090c2:	5d19      	ldrb	r1, [r3, r4]
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d0df      	beq.n	8009088 <PxMessagingTask+0x60>
			if (cMessage[port-1][2]>>7) {
 80090c8:	465b      	mov	r3, fp
 80090ca:	781a      	ldrb	r2, [r3, #0]
 80090cc:	09d3      	lsrs	r3, r2, #7
 80090ce:	48bd      	ldr	r0, [pc, #756]	; (80093c4 <PxMessagingTask+0x39c>)
 80090d0:	7003      	strb	r3, [r0, #0]
			dst = cMessage[port-1][0]; 
 80090d2:	4bb9      	ldr	r3, [pc, #740]	; (80093b8 <PxMessagingTask+0x390>)
 80090d4:	5cf3      	ldrb	r3, [r6, r3]
 80090d6:	469a      	mov	sl, r3
			src = cMessage[port-1][1];	
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	9306      	str	r3, [sp, #24]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 80090de:	2301      	movs	r3, #1
 80090e0:	4013      	ands	r3, r2
			shift = 0;
 80090e2:	9305      	str	r3, [sp, #20]
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 80090e4:	4db8      	ldr	r5, [pc, #736]	; (80093c8 <PxMessagingTask+0x3a0>)
 80090e6:	0710      	lsls	r0, r2, #28
 80090e8:	0f80      	lsrs	r0, r0, #30
 80090ea:	71e8      	strb	r0, [r5, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 80090ec:	2060      	movs	r0, #96	; 0x60
 80090ee:	4010      	ands	r0, r2
 80090f0:	71a8      	strb	r0, [r5, #6]
			if (extendCode == true) {		
 80090f2:	0792      	lsls	r2, r2, #30
 80090f4:	d5bd      	bpl.n	8009072 <PxMessagingTask+0x4a>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 80090f6:	4ab0      	ldr	r2, [pc, #704]	; (80093b8 <PxMessagingTask+0x390>)
 80090f8:	1992      	adds	r2, r2, r6
 80090fa:	18d2      	adds	r2, r2, r3
 80090fc:	7910      	ldrb	r0, [r2, #4]
 80090fe:	0200      	lsls	r0, r0, #8
 8009100:	78d2      	ldrb	r2, [r2, #3]
 8009102:	1812      	adds	r2, r2, r0
 8009104:	b292      	uxth	r2, r2
 8009106:	4691      	mov	r9, r2
				++shift;
 8009108:	3301      	adds	r3, #1
 800910a:	9305      	str	r3, [sp, #20]
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 800910c:	4653      	mov	r3, sl
 800910e:	3b01      	subs	r3, #1
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2bfc      	cmp	r3, #252	; 0xfc
 8009114:	d829      	bhi.n	800916a <PxMessagingTask+0x142>
 8009116:	4bad      	ldr	r3, [pc, #692]	; (80093cc <PxMessagingTask+0x3a4>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	4553      	cmp	r3, sl
 800911c:	d070      	beq.n	8009200 <PxMessagingTask+0x1d8>
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <PxMessagingTask+0xfe>
 8009122:	f001 fa36 	bl	800a592 <PxMessagingTask+0x156a>
				ForwardReceivedMessage(port);
 8009126:	9808      	ldr	r0, [sp, #32]
 8009128:	f7ff fc3a 	bl	80089a0 <ForwardReceivedMessage>
				if (BOS.trace)
 800912c:	4ba6      	ldr	r3, [pc, #664]	; (80093c8 <PxMessagingTask+0x3a0>)
 800912e:	79db      	ldrb	r3, [r3, #7]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0a4      	beq.n	800907e <PxMessagingTask+0x56>
					indMode = IND_SHORT_BLINK;
 8009134:	4ba6      	ldr	r3, [pc, #664]	; (80093d0 <PxMessagingTask+0x3a8>)
 8009136:	2203      	movs	r2, #3
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	e7a0      	b.n	800907e <PxMessagingTask+0x56>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 800913c:	2064      	movs	r0, #100	; 0x64
 800913e:	f005 fc33 	bl	800e9a8 <HAL_Delay>
 8009142:	2300      	movs	r3, #0
 8009144:	9a08      	ldr	r2, [sp, #32]
 8009146:	4651      	mov	r1, sl
 8009148:	9806      	ldr	r0, [sp, #24]
 800914a:	f7fa fa69 	bl	8003620 <remoteBootloaderUpdate>
 800914e:	e79b      	b.n	8009088 <PxMessagingTask+0x60>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009150:	2064      	movs	r0, #100	; 0x64
 8009152:	f005 fc29 	bl	800e9a8 <HAL_Delay>
 8009156:	4b98      	ldr	r3, [pc, #608]	; (80093b8 <PxMessagingTask+0x390>)
 8009158:	199b      	adds	r3, r3, r6
 800915a:	9a05      	ldr	r2, [sp, #20]
 800915c:	5c9b      	ldrb	r3, [r3, r2]
 800915e:	9a08      	ldr	r2, [sp, #32]
 8009160:	4651      	mov	r1, sl
 8009162:	9806      	ldr	r0, [sp, #24]
 8009164:	f7fa fa5c 	bl	8003620 <remoteBootloaderUpdate>
 8009168:	e78e      	b.n	8009088 <PxMessagingTask+0x60>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800916a:	4653      	mov	r3, sl
 800916c:	2bff      	cmp	r3, #255	; 0xff
 800916e:	d03c      	beq.n	80091ea <PxMessagingTask+0x1c2>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009170:	2bfe      	cmp	r3, #254	; 0xfe
 8009172:	d145      	bne.n	8009200 <PxMessagingTask+0x1d8>
 8009174:	4b90      	ldr	r3, [pc, #576]	; (80093b8 <PxMessagingTask+0x390>)
 8009176:	199b      	adds	r3, r3, r6
 8009178:	1859      	adds	r1, r3, r1
 800917a:	3901      	subs	r1, #1
 800917c:	780b      	ldrb	r3, [r1, #0]
 800917e:	4a95      	ldr	r2, [pc, #596]	; (80093d4 <PxMessagingTask+0x3ac>)
 8009180:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 8009182:	2103      	movs	r1, #3
 8009184:	4688      	mov	r8, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009186:	429a      	cmp	r2, r3
 8009188:	d083      	beq.n	8009092 <PxMessagingTask+0x6a>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800918a:	4a92      	ldr	r2, [pc, #584]	; (80093d4 <PxMessagingTask+0x3ac>)
 800918c:	7013      	strb	r3, [r2, #0]
 800918e:	4a92      	ldr	r2, [pc, #584]	; (80093d8 <PxMessagingTask+0x3b0>)
 8009190:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8009192:	9908      	ldr	r1, [sp, #32]
 8009194:	20fe      	movs	r0, #254	; 0xfe
 8009196:	f7ff fc23 	bl	80089e0 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800919a:	4b88      	ldr	r3, [pc, #544]	; (80093bc <PxMessagingTask+0x394>)
 800919c:	5d19      	ldrb	r1, [r3, r4]
 800919e:	4b86      	ldr	r3, [pc, #536]	; (80093b8 <PxMessagingTask+0x390>)
 80091a0:	199b      	adds	r3, r3, r6
 80091a2:	185b      	adds	r3, r3, r1
 80091a4:	1e5a      	subs	r2, r3, #1
 80091a6:	2000      	movs	r0, #0
 80091a8:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 80091aa:	3b02      	subs	r3, #2
 80091ac:	781a      	ldrb	r2, [r3, #0]
 80091ae:	920a      	str	r2, [sp, #40]	; 0x28
					for(i=0 ; i<temp ; i++)
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d101      	bne.n	80091b8 <PxMessagingTask+0x190>
 80091b4:	f001 f9dc 	bl	800a570 <PxMessagingTask+0x1548>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 80091b8:	4b84      	ldr	r3, [pc, #528]	; (80093cc <PxMessagingTask+0x3a4>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	469c      	mov	ip, r3
 80091be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c0:	18c8      	adds	r0, r1, r3
 80091c2:	1a80      	subs	r0, r0, r2
 80091c4:	3802      	subs	r0, #2
 80091c6:	4b7c      	ldr	r3, [pc, #496]	; (80093b8 <PxMessagingTask+0x390>)
 80091c8:	18c0      	adds	r0, r0, r3
 80091ca:	2300      	movs	r3, #0
 80091cc:	4665      	mov	r5, ip
 80091ce:	468c      	mov	ip, r1
 80091d0:	0011      	movs	r1, r2
 80091d2:	5cc2      	ldrb	r2, [r0, r3]
 80091d4:	42aa      	cmp	r2, r5
 80091d6:	d101      	bne.n	80091dc <PxMessagingTask+0x1b4>
 80091d8:	f001 f9c2 	bl	800a560 <PxMessagingTask+0x1538>
					for(i=0 ; i<temp ; i++)
 80091dc:	3301      	adds	r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	428a      	cmp	r2, r1
 80091e2:	d3f6      	bcc.n	80091d2 <PxMessagingTask+0x1aa>
					result = BOS_ERR_WrongID;
 80091e4:	2366      	movs	r3, #102	; 0x66
 80091e6:	4698      	mov	r8, r3
 80091e8:	e753      	b.n	8009092 <PxMessagingTask+0x6a>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80091ea:	4b73      	ldr	r3, [pc, #460]	; (80093b8 <PxMessagingTask+0x390>)
 80091ec:	199b      	adds	r3, r3, r6
 80091ee:	1859      	adds	r1, r3, r1
 80091f0:	3901      	subs	r1, #1
 80091f2:	780b      	ldrb	r3, [r1, #0]
 80091f4:	4a77      	ldr	r2, [pc, #476]	; (80093d4 <PxMessagingTask+0x3ac>)
 80091f6:	7812      	ldrb	r2, [r2, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d115      	bne.n	8009228 <PxMessagingTask+0x200>
					result = BOS_ERR_MSG_Reflection;
 80091fc:	2303      	movs	r3, #3
 80091fe:	4698      	mov	r8, r3
				if (result == BOS_OK)
 8009200:	4643      	mov	r3, r8
 8009202:	2b00      	cmp	r3, #0
 8009204:	d000      	beq.n	8009208 <PxMessagingTask+0x1e0>
 8009206:	e73f      	b.n	8009088 <PxMessagingTask+0x60>
				shift += 4;
 8009208:	9d05      	ldr	r5, [sp, #20]
 800920a:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800920c:	4b6b      	ldr	r3, [pc, #428]	; (80093bc <PxMessagingTask+0x394>)
 800920e:	5d19      	ldrb	r1, [r3, r4]
 8009210:	1b48      	subs	r0, r1, r5
 8009212:	b2c3      	uxtb	r3, r0
 8009214:	4698      	mov	r8, r3
					switch (code)
 8009216:	464b      	mov	r3, r9
 8009218:	2b23      	cmp	r3, #35	; 0x23
 800921a:	d901      	bls.n	8009220 <PxMessagingTask+0x1f8>
 800921c:	f001 f96d 	bl	800a4fa <PxMessagingTask+0x14d2>
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4a6e      	ldr	r2, [pc, #440]	; (80093dc <PxMessagingTask+0x3b4>)
 8009224:	58d3      	ldr	r3, [r2, r3]
 8009226:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009228:	4a6a      	ldr	r2, [pc, #424]	; (80093d4 <PxMessagingTask+0x3ac>)
 800922a:	7013      	strb	r3, [r2, #0]
 800922c:	4a6a      	ldr	r2, [pc, #424]	; (80093d8 <PxMessagingTask+0x3b0>)
 800922e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009230:	9908      	ldr	r1, [sp, #32]
 8009232:	20ff      	movs	r0, #255	; 0xff
 8009234:	f7ff fbd4 	bl	80089e0 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009238:	4b60      	ldr	r3, [pc, #384]	; (80093bc <PxMessagingTask+0x394>)
 800923a:	5d1a      	ldrb	r2, [r3, r4]
 800923c:	4b5e      	ldr	r3, [pc, #376]	; (80093b8 <PxMessagingTask+0x390>)
 800923e:	199b      	adds	r3, r3, r6
 8009240:	189b      	adds	r3, r3, r2
 8009242:	3b01      	subs	r3, #1
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	e7da      	b.n	8009200 <PxMessagingTask+0x1d8>
							for (p=0 ; p<numOfParams ; p++) 
 800924a:	4643      	mov	r3, r8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d023      	beq.n	8009298 <PxMessagingTask+0x270>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	3b01      	subs	r3, #1
 8009254:	469c      	mov	ip, r3
 8009256:	005a      	lsls	r2, r3, #1
 8009258:	4b61      	ldr	r3, [pc, #388]	; (80093e0 <PxMessagingTask+0x3b8>)
 800925a:	5ad3      	ldrh	r3, [r2, r3]
 800925c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800925e:	4691      	mov	r9, r2
 8009260:	444d      	add	r5, r9
 8009262:	4a55      	ldr	r2, [pc, #340]	; (80093b8 <PxMessagingTask+0x390>)
 8009264:	18ad      	adds	r5, r5, r2
 8009266:	2200      	movs	r2, #0
 8009268:	2080      	movs	r0, #128	; 0x80
 800926a:	0200      	lsls	r0, r0, #8
 800926c:	4641      	mov	r1, r8
 800926e:	46a0      	mov	r8, r4
 8009270:	46b1      	mov	r9, r6
 8009272:	001e      	movs	r6, r3
 8009274:	000c      	movs	r4, r1
 8009276:	5ca9      	ldrb	r1, [r5, r2]
 8009278:	3901      	subs	r1, #1
 800927a:	0003      	movs	r3, r0
 800927c:	410b      	asrs	r3, r1
 800927e:	431e      	orrs	r6, r3
 8009280:	b2b6      	uxth	r6, r6
							for (p=0 ; p<numOfParams ; p++) 
 8009282:	3201      	adds	r2, #1
 8009284:	b2d3      	uxtb	r3, r2
 8009286:	429c      	cmp	r4, r3
 8009288:	d8f5      	bhi.n	8009276 <PxMessagingTask+0x24e>
 800928a:	4644      	mov	r4, r8
 800928c:	0033      	movs	r3, r6
 800928e:	464e      	mov	r6, r9
 8009290:	4662      	mov	r2, ip
 8009292:	0050      	lsls	r0, r2, #1
 8009294:	4a52      	ldr	r2, [pc, #328]	; (80093e0 <PxMessagingTask+0x3b8>)
 8009296:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8009298:	4b52      	ldr	r3, [pc, #328]	; (80093e4 <PxMessagingTask+0x3bc>)
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
							break;		
 800929e:	2300      	movs	r3, #0
 80092a0:	4698      	mov	r8, r3
 80092a2:	e6f6      	b.n	8009092 <PxMessagingTask+0x6a>
							indMode = IND_PING;	osDelay(10);
 80092a4:	4b4a      	ldr	r3, [pc, #296]	; (80093d0 <PxMessagingTask+0x3a8>)
 80092a6:	2201      	movs	r2, #1
 80092a8:	701a      	strb	r2, [r3, #0]
 80092aa:	200a      	movs	r0, #10
 80092ac:	f003 fb09 	bl	800c8c2 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 80092b0:	4b45      	ldr	r3, [pc, #276]	; (80093c8 <PxMessagingTask+0x3a0>)
 80092b2:	799b      	ldrb	r3, [r3, #6]
 80092b4:	2240      	movs	r2, #64	; 0x40
 80092b6:	4393      	bics	r3, r2
 80092b8:	2200      	movs	r2, #0
 80092ba:	4690      	mov	r8, r2
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d000      	beq.n	80092c2 <PxMessagingTask+0x29a>
 80092c0:	e6e7      	b.n	8009092 <PxMessagingTask+0x6a>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 80092c2:	2102      	movs	r1, #2
 80092c4:	9806      	ldr	r0, [sp, #24]
 80092c6:	f7ff fbd3 	bl	8008a70 <SendMessageToModule>
 80092ca:	e6e2      	b.n	8009092 <PxMessagingTask+0x6a>
							if (!moduleAlias[myID][0])
 80092cc:	4b3f      	ldr	r3, [pc, #252]	; (80093cc <PxMessagingTask+0x3a4>)
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	0093      	lsls	r3, r2, #2
 80092d2:	189b      	adds	r3, r3, r2
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	4a44      	ldr	r2, [pc, #272]	; (80093e8 <PxMessagingTask+0x3c0>)
 80092d8:	5c9b      	ldrb	r3, [r3, r2]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d118      	bne.n	8009310 <PxMessagingTask+0x2e8>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 80092de:	9a06      	ldr	r2, [sp, #24]
 80092e0:	4942      	ldr	r1, [pc, #264]	; (80093ec <PxMessagingTask+0x3c4>)
 80092e2:	4843      	ldr	r0, [pc, #268]	; (80093f0 <PxMessagingTask+0x3c8>)
 80092e4:	f008 fe3a 	bl	8011f5c <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80092e8:	4d41      	ldr	r5, [pc, #260]	; (80093f0 <PxMessagingTask+0x3c8>)
 80092ea:	0028      	movs	r0, r5
 80092ec:	f7f6 ff14 	bl	8000118 <strlen>
 80092f0:	b282      	uxth	r2, r0
 80092f2:	4b40      	ldr	r3, [pc, #256]	; (80093f4 <PxMessagingTask+0x3cc>)
 80092f4:	7818      	ldrb	r0, [r3, #0]
 80092f6:	2301      	movs	r3, #1
 80092f8:	425b      	negs	r3, r3
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	3333      	adds	r3, #51	; 0x33
 80092fe:	0029      	movs	r1, r5
 8009300:	f003 f9b0 	bl	800c664 <writePxMutex>
							responseStatus = BOS_OK;								
 8009304:	4b37      	ldr	r3, [pc, #220]	; (80093e4 <PxMessagingTask+0x3bc>)
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
							break;
 800930a:	2300      	movs	r3, #0
 800930c:	4698      	mov	r8, r3
 800930e:	e6c0      	b.n	8009092 <PxMessagingTask+0x6a>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009310:	230a      	movs	r3, #10
 8009312:	9906      	ldr	r1, [sp, #24]
 8009314:	434b      	muls	r3, r1
 8009316:	4a34      	ldr	r2, [pc, #208]	; (80093e8 <PxMessagingTask+0x3c0>)
 8009318:	189b      	adds	r3, r3, r2
 800931a:	000a      	movs	r2, r1
 800931c:	4936      	ldr	r1, [pc, #216]	; (80093f8 <PxMessagingTask+0x3d0>)
 800931e:	4834      	ldr	r0, [pc, #208]	; (80093f0 <PxMessagingTask+0x3c8>)
 8009320:	f008 fe1c 	bl	8011f5c <sprintf>
 8009324:	e7e0      	b.n	80092e8 <PxMessagingTask+0x2c0>
							IND_ON();
 8009326:	2180      	movs	r1, #128	; 0x80
 8009328:	2090      	movs	r0, #144	; 0x90
 800932a:	2201      	movs	r2, #1
 800932c:	0109      	lsls	r1, r1, #4
 800932e:	05c0      	lsls	r0, r0, #23
 8009330:	f006 fc1c 	bl	800fb6c <HAL_GPIO_WritePin>
							break;
 8009334:	2300      	movs	r3, #0
 8009336:	4698      	mov	r8, r3
 8009338:	e6ab      	b.n	8009092 <PxMessagingTask+0x6a>
							IND_OFF();
 800933a:	2180      	movs	r1, #128	; 0x80
 800933c:	2090      	movs	r0, #144	; 0x90
 800933e:	2200      	movs	r2, #0
 8009340:	0109      	lsls	r1, r1, #4
 8009342:	05c0      	lsls	r0, r0, #23
 8009344:	f006 fc12 	bl	800fb6c <HAL_GPIO_WritePin>
							break;
 8009348:	2300      	movs	r3, #0
 800934a:	4698      	mov	r8, r3
 800934c:	e6a1      	b.n	8009092 <PxMessagingTask+0x6a>
							IND_toggle();
 800934e:	2180      	movs	r1, #128	; 0x80
 8009350:	2090      	movs	r0, #144	; 0x90
 8009352:	0109      	lsls	r1, r1, #4
 8009354:	05c0      	lsls	r0, r0, #23
 8009356:	f006 fc0f 	bl	800fb78 <HAL_GPIO_TogglePin>
							break;
 800935a:	2300      	movs	r3, #0
 800935c:	4698      	mov	r8, r3
 800935e:	e698      	b.n	8009092 <PxMessagingTask+0x6a>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8009360:	4b26      	ldr	r3, [pc, #152]	; (80093fc <PxMessagingTask+0x3d4>)
 8009362:	469c      	mov	ip, r3
 8009364:	00a3      	lsls	r3, r4, #2
 8009366:	4a14      	ldr	r2, [pc, #80]	; (80093b8 <PxMessagingTask+0x390>)
 8009368:	4691      	mov	r9, r2
 800936a:	44b1      	add	r9, r6
 800936c:	464a      	mov	r2, r9
 800936e:	1950      	adds	r0, r2, r5
 8009370:	7881      	ldrb	r1, [r0, #2]
 8009372:	4688      	mov	r8, r1
 8009374:	9906      	ldr	r1, [sp, #24]
 8009376:	0209      	lsls	r1, r1, #8
 8009378:	4441      	add	r1, r8
 800937a:	4662      	mov	r2, ip
 800937c:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 800937e:	4463      	add	r3, ip
 8009380:	464a      	mov	r2, r9
 8009382:	5d51      	ldrb	r1, [r2, r5]
 8009384:	0209      	lsls	r1, r1, #8
 8009386:	7842      	ldrb	r2, [r0, #1]
 8009388:	1852      	adds	r2, r2, r1
 800938a:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 800938c:	4b1c      	ldr	r3, [pc, #112]	; (8009400 <PxMessagingTask+0x3d8>)
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <PxMessagingTask+0x3dc>)
 8009392:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009398:	9d08      	ldr	r5, [sp, #32]
 800939a:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 800939c:	2002      	movs	r0, #2
 800939e:	f003 fa90 	bl	800c8c2 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 80093a2:	2303      	movs	r3, #3
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	2200      	movs	r2, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	0028      	movs	r0, r5
 80093ae:	f7ff f937 	bl	8008620 <SendMessageFromPort>
							break;
 80093b2:	2300      	movs	r3, #0
 80093b4:	4698      	mov	r8, r3
 80093b6:	e66c      	b.n	8009092 <PxMessagingTask+0x6a>
 80093b8:	20000b14 	.word	0x20000b14
 80093bc:	20000d0c 	.word	0x20000d0c
 80093c0:	20000dcc 	.word	0x20000dcc
 80093c4:	20000cd1 	.word	0x20000cd1
 80093c8:	20006600 	.word	0x20006600
 80093cc:	20000070 	.word	0x20000070
 80093d0:	20000cd0 	.word	0x20000cd0
 80093d4:	2000123a 	.word	0x2000123a
 80093d8:	20000ad8 	.word	0x20000ad8
 80093dc:	0801a440 	.word	0x0801a440
 80093e0:	20006a18 	.word	0x20006a18
 80093e4:	20000de8 	.word	0x20000de8
 80093e8:	20000d44 	.word	0x20000d44
 80093ec:	080193a4 	.word	0x080193a4
 80093f0:	20001384 	.word	0x20001384
 80093f4:	20000ad7 	.word	0x20000ad7
 80093f8:	080193b8 	.word	0x080193b8
 80093fc:	20000d64 	.word	0x20000d64
 8009400:	20000072 	.word	0x20000072
 8009404:	20000d14 	.word	0x20000d14
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009408:	4bd6      	ldr	r3, [pc, #856]	; (8009764 <PxMessagingTask+0x73c>)
 800940a:	469c      	mov	ip, r3
 800940c:	00a3      	lsls	r3, r4, #2
 800940e:	4ad6      	ldr	r2, [pc, #856]	; (8009768 <PxMessagingTask+0x740>)
 8009410:	4691      	mov	r9, r2
 8009412:	44b1      	add	r9, r6
 8009414:	464a      	mov	r2, r9
 8009416:	1950      	adds	r0, r2, r5
 8009418:	7881      	ldrb	r1, [r0, #2]
 800941a:	4688      	mov	r8, r1
 800941c:	9906      	ldr	r1, [sp, #24]
 800941e:	0209      	lsls	r1, r1, #8
 8009420:	4441      	add	r1, r8
 8009422:	4662      	mov	r2, ip
 8009424:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009426:	4463      	add	r3, ip
 8009428:	464a      	mov	r2, r9
 800942a:	5d51      	ldrb	r1, [r2, r5]
 800942c:	0209      	lsls	r1, r1, #8
 800942e:	7842      	ldrb	r2, [r0, #1]
 8009430:	1852      	adds	r2, r2, r1
 8009432:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009434:	4bcd      	ldr	r3, [pc, #820]	; (800976c <PxMessagingTask+0x744>)
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
							break;
 800943a:	2300      	movs	r3, #0
 800943c:	4698      	mov	r8, r3
 800943e:	e628      	b.n	8009092 <PxMessagingTask+0x6a>
 8009440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009442:	18eb      	adds	r3, r5, r3
 8009444:	3b01      	subs	r3, #1
 8009446:	4ac8      	ldr	r2, [pc, #800]	; (8009768 <PxMessagingTask+0x740>)
 8009448:	4699      	mov	r9, r3
 800944a:	4491      	add	r9, r2
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800944c:	2301      	movs	r3, #1
 800944e:	46a0      	mov	r8, r4
 8009450:	46b2      	mov	sl, r6
 8009452:	464e      	mov	r6, r9
 8009454:	46a9      	mov	r9, r5
 8009456:	9d08      	ldr	r5, [sp, #32]
 8009458:	001c      	movs	r4, r3
 800945a:	e002      	b.n	8009462 <PxMessagingTask+0x43a>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800945c:	3401      	adds	r4, #1
 800945e:	2c07      	cmp	r4, #7
 8009460:	d008      	beq.n	8009474 <PxMessagingTask+0x44c>
 8009462:	b2e0      	uxtb	r0, r4
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8009464:	42a8      	cmp	r0, r5
 8009466:	d0f9      	beq.n	800945c <PxMessagingTask+0x434>
 8009468:	f003 f8da 	bl	800c620 <GetUart>
 800946c:	5d31      	ldrb	r1, [r6, r4]
 800946e:	f003 f973 	bl	800c758 <SwapUartPins>
 8009472:	e7f3      	b.n	800945c <PxMessagingTask+0x434>
 8009474:	4644      	mov	r4, r8
 8009476:	464d      	mov	r5, r9
 8009478:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 800947a:	9808      	ldr	r0, [sp, #32]
 800947c:	f003 f8d0 	bl	800c620 <GetUart>
 8009480:	4bb9      	ldr	r3, [pc, #740]	; (8009768 <PxMessagingTask+0x740>)
 8009482:	199b      	adds	r3, r3, r6
 8009484:	195d      	adds	r5, r3, r5
 8009486:	7aa9      	ldrb	r1, [r5, #10]
 8009488:	f003 f966 	bl	800c758 <SwapUartPins>
							break;
 800948c:	2300      	movs	r3, #0
 800948e:	4698      	mov	r8, r3
 8009490:	e5ff      	b.n	8009092 <PxMessagingTask+0x6a>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009492:	002a      	movs	r2, r5
 8009494:	4bb4      	ldr	r3, [pc, #720]	; (8009768 <PxMessagingTask+0x740>)
 8009496:	199b      	adds	r3, r3, r6
 8009498:	5d5b      	ldrb	r3, [r3, r5]
 800949a:	4698      	mov	r8, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d108      	bne.n	80094b2 <PxMessagingTask+0x48a>
								myID = cMessage[port-1][1+shift];
 80094a0:	2238      	movs	r2, #56	; 0x38
 80094a2:	4362      	muls	r2, r4
 80094a4:	4bb0      	ldr	r3, [pc, #704]	; (8009768 <PxMessagingTask+0x740>)
 80094a6:	189b      	adds	r3, r3, r2
 80094a8:	195d      	adds	r5, r3, r5
 80094aa:	786a      	ldrb	r2, [r5, #1]
 80094ac:	4bb0      	ldr	r3, [pc, #704]	; (8009770 <PxMessagingTask+0x748>)
 80094ae:	701a      	strb	r2, [r3, #0]
 80094b0:	e5ef      	b.n	8009092 <PxMessagingTask+0x6a>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d002      	beq.n	80094bc <PxMessagingTask+0x494>
 80094b6:	2300      	movs	r3, #0
 80094b8:	4698      	mov	r8, r3
 80094ba:	e5ea      	b.n	8009092 <PxMessagingTask+0x6a>
								messageParams[0] = 0;											/* change own ID */
 80094bc:	49ad      	ldr	r1, [pc, #692]	; (8009774 <PxMessagingTask+0x74c>)
 80094be:	2500      	movs	r5, #0
 80094c0:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 80094c2:	2038      	movs	r0, #56	; 0x38
 80094c4:	4360      	muls	r0, r4
 80094c6:	4ba8      	ldr	r3, [pc, #672]	; (8009768 <PxMessagingTask+0x740>)
 80094c8:	181b      	adds	r3, r3, r0
 80094ca:	189b      	adds	r3, r3, r2
 80094cc:	785a      	ldrb	r2, [r3, #1]
 80094ce:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 80094d0:	7898      	ldrb	r0, [r3, #2]
 80094d2:	2303      	movs	r3, #3
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	330d      	adds	r3, #13
 80094d8:	002a      	movs	r2, r5
 80094da:	0029      	movs	r1, r5
 80094dc:	f7ff f8a0 	bl	8008620 <SendMessageFromPort>
 80094e0:	46a8      	mov	r8, r5
 80094e2:	e5d6      	b.n	8009092 <PxMessagingTask+0x6a>
							if (longMessage) {
 80094e4:	4ba4      	ldr	r3, [pc, #656]	; (8009778 <PxMessagingTask+0x750>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	4699      	mov	r9, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d014      	beq.n	8009518 <PxMessagingTask+0x4f0>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 80094ee:	4ba3      	ldr	r3, [pc, #652]	; (800977c <PxMessagingTask+0x754>)
 80094f0:	469a      	mov	sl, r3
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	4699      	mov	r9, r3
 80094f6:	48a2      	ldr	r0, [pc, #648]	; (8009780 <PxMessagingTask+0x758>)
 80094f8:	4448      	add	r0, r9
 80094fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fc:	469c      	mov	ip, r3
 80094fe:	4465      	add	r5, ip
 8009500:	4999      	ldr	r1, [pc, #612]	; (8009768 <PxMessagingTask+0x740>)
 8009502:	1869      	adds	r1, r5, r1
 8009504:	4642      	mov	r2, r8
 8009506:	f008 fb2b 	bl	8011b60 <memcpy>
								longMessageLastPtr += numOfParams;
 800950a:	464d      	mov	r5, r9
 800950c:	4445      	add	r5, r8
 800950e:	4653      	mov	r3, sl
 8009510:	801d      	strh	r5, [r3, #0]
 8009512:	2300      	movs	r3, #0
 8009514:	4698      	mov	r8, r3
 8009516:	e5bc      	b.n	8009092 <PxMessagingTask+0x6a>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009518:	4b98      	ldr	r3, [pc, #608]	; (800977c <PxMessagingTask+0x754>)
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	4a98      	ldr	r2, [pc, #608]	; (8009780 <PxMessagingTask+0x758>)
 800951e:	4692      	mov	sl, r2
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	0018      	movs	r0, r3
 8009524:	4450      	add	r0, sl
 8009526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009528:	468c      	mov	ip, r1
 800952a:	4465      	add	r5, ip
 800952c:	498e      	ldr	r1, [pc, #568]	; (8009768 <PxMessagingTask+0x740>)
 800952e:	1869      	adds	r1, r5, r1
 8009530:	4642      	mov	r2, r8
 8009532:	f008 fb15 	bl	8011b60 <memcpy>
								longMessageLastPtr += numOfParams;
 8009536:	9b05      	ldr	r3, [sp, #20]
 8009538:	4443      	add	r3, r8
 800953a:	b29d      	uxth	r5, r3
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 800953c:	2116      	movs	r1, #22
 800953e:	0028      	movs	r0, r5
 8009540:	f7f6 fe06 	bl	8000150 <__udivsi3>
 8009544:	4b8f      	ldr	r3, [pc, #572]	; (8009784 <PxMessagingTask+0x75c>)
 8009546:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8009548:	002a      	movs	r2, r5
 800954a:	4651      	mov	r1, sl
 800954c:	488e      	ldr	r0, [pc, #568]	; (8009788 <PxMessagingTask+0x760>)
 800954e:	f008 fb07 	bl	8011b60 <memcpy>
								longMessageLastPtr = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	4a89      	ldr	r2, [pc, #548]	; (800977c <PxMessagingTask+0x754>)
 8009556:	8013      	strh	r3, [r2, #0]
 8009558:	46c8      	mov	r8, r9
 800955a:	e59a      	b.n	8009092 <PxMessagingTask+0x6a>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800955c:	2501      	movs	r5, #1
 800955e:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009560:	2280      	movs	r2, #128	; 0x80
 8009562:	0212      	lsls	r2, r2, #8
 8009564:	4690      	mov	r8, r2
									messageParams[temp++] = p;
 8009566:	46a1      	mov	r9, r4
 8009568:	001c      	movs	r4, r3
 800956a:	e003      	b.n	8009574 <PxMessagingTask+0x54c>
								for (p=1 ; p<=NumOfPorts ; p++) {
 800956c:	3501      	adds	r5, #1
 800956e:	b2ed      	uxtb	r5, r5
 8009570:	2d07      	cmp	r5, #7
 8009572:	d00a      	beq.n	800958a <PxMessagingTask+0x562>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009574:	0028      	movs	r0, r5
 8009576:	f003 f853 	bl	800c620 <GetUart>
 800957a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800957c:	4543      	cmp	r3, r8
 800957e:	d1f5      	bne.n	800956c <PxMessagingTask+0x544>
									messageParams[temp++] = p;
 8009580:	1c63      	adds	r3, r4, #1
 8009582:	4a7c      	ldr	r2, [pc, #496]	; (8009774 <PxMessagingTask+0x74c>)
 8009584:	5515      	strb	r5, [r2, r4]
 8009586:	b2dc      	uxtb	r4, r3
 8009588:	e7f0      	b.n	800956c <PxMessagingTask+0x544>
 800958a:	0023      	movs	r3, r4
 800958c:	940a      	str	r4, [sp, #40]	; 0x28
 800958e:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8009590:	b29a      	uxth	r2, r3
 8009592:	2114      	movs	r1, #20
 8009594:	9806      	ldr	r0, [sp, #24]
 8009596:	f7ff fa6b 	bl	8008a70 <SendMessageToModule>
							break;
 800959a:	2300      	movs	r3, #0
 800959c:	4698      	mov	r8, r3
 800959e:	e578      	b.n	8009092 <PxMessagingTask+0x6a>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 80095a0:	4b71      	ldr	r3, [pc, #452]	; (8009768 <PxMessagingTask+0x740>)
 80095a2:	199b      	adds	r3, r3, r6
 80095a4:	5d5a      	ldrb	r2, [r3, r5]
 80095a6:	0612      	lsls	r2, r2, #24
 80095a8:	195b      	adds	r3, r3, r5
 80095aa:	78d9      	ldrb	r1, [r3, #3]
 80095ac:	1852      	adds	r2, r2, r1
 80095ae:	7859      	ldrb	r1, [r3, #1]
 80095b0:	0409      	lsls	r1, r1, #16
 80095b2:	1852      	adds	r2, r2, r1
 80095b4:	7899      	ldrb	r1, [r3, #2]
 80095b6:	0209      	lsls	r1, r1, #8
 80095b8:	4691      	mov	r9, r2
 80095ba:	4489      	add	r9, r1
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 80095bc:	791b      	ldrb	r3, [r3, #4]
 80095be:	2bff      	cmp	r3, #255	; 0xff
 80095c0:	d015      	beq.n	80095ee <PxMessagingTask+0x5c6>
									for (p=0 ; p<numOfParams ; p++) 
 80095c2:	4643      	mov	r3, r8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d010      	beq.n	80095ea <PxMessagingTask+0x5c2>
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	469c      	mov	ip, r3
 80095cc:	4465      	add	r5, ip
 80095ce:	3504      	adds	r5, #4
 80095d0:	4b65      	ldr	r3, [pc, #404]	; (8009768 <PxMessagingTask+0x740>)
 80095d2:	46aa      	mov	sl, r5
 80095d4:	449a      	add	sl, r3
 80095d6:	2500      	movs	r5, #0
 80095d8:	9405      	str	r4, [sp, #20]
 80095da:	464b      	mov	r3, r9
 80095dc:	46b9      	mov	r9, r7
 80095de:	4647      	mov	r7, r8
 80095e0:	0032      	movs	r2, r6
 80095e2:	4656      	mov	r6, sl
 80095e4:	4692      	mov	sl, r2
 80095e6:	4698      	mov	r8, r3
 80095e8:	e015      	b.n	8009616 <PxMessagingTask+0x5ee>
								temp = temp32 = 0;
 80095ea:	930a      	str	r3, [sp, #40]	; 0x28
 80095ec:	e551      	b.n	8009092 <PxMessagingTask+0x6a>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80095ee:	2501      	movs	r5, #1
 80095f0:	46a0      	mov	r8, r4
 80095f2:	464c      	mov	r4, r9
										UpdateBaudrate(p, temp32); 
 80095f4:	0021      	movs	r1, r4
 80095f6:	0028      	movs	r0, r5
 80095f8:	f003 f8a4 	bl	800c744 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80095fc:	3501      	adds	r5, #1
 80095fe:	b2ed      	uxtb	r5, r5
 8009600:	2d07      	cmp	r5, #7
 8009602:	d1f7      	bne.n	80095f4 <PxMessagingTask+0x5cc>
 8009604:	4644      	mov	r4, r8
								temp = temp32 = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	930a      	str	r3, [sp, #40]	; 0x28
 800960a:	4698      	mov	r8, r3
 800960c:	e541      	b.n	8009092 <PxMessagingTask+0x6a>
									for (p=0 ; p<numOfParams ; p++) 
 800960e:	3501      	adds	r5, #1
 8009610:	b2eb      	uxtb	r3, r5
 8009612:	429f      	cmp	r7, r3
 8009614:	d908      	bls.n	8009628 <PxMessagingTask+0x600>
										temp = cMessage[port-1][4+shift+p];
 8009616:	5d74      	ldrb	r4, [r6, r5]
										if (temp>0 && temp<=NumOfPorts)	{
 8009618:	1e63      	subs	r3, r4, #1
 800961a:	2b05      	cmp	r3, #5
 800961c:	d8f7      	bhi.n	800960e <PxMessagingTask+0x5e6>
											UpdateBaudrate(temp, temp32); 
 800961e:	4641      	mov	r1, r8
 8009620:	0020      	movs	r0, r4
 8009622:	f003 f88f 	bl	800c744 <UpdateBaudrate>
 8009626:	e7f2      	b.n	800960e <PxMessagingTask+0x5e6>
 8009628:	940a      	str	r4, [sp, #40]	; 0x28
 800962a:	9c05      	ldr	r4, [sp, #20]
 800962c:	464f      	mov	r7, r9
 800962e:	4656      	mov	r6, sl
 8009630:	2300      	movs	r3, #0
 8009632:	4698      	mov	r8, r3
 8009634:	e52d      	b.n	8009092 <PxMessagingTask+0x6a>
								SaveToRO();
 8009636:	f001 f81b 	bl	800a670 <SaveToRO>
							SaveEEportsDir();
 800963a:	f7f9 f981 	bl	8002940 <SaveEEportsDir>
							indMode = IND_PING;
 800963e:	4b53      	ldr	r3, [pc, #332]	; (800978c <PxMessagingTask+0x764>)
 8009640:	2201      	movs	r2, #1
 8009642:	701a      	strb	r2, [r3, #0]
							break;
 8009644:	2300      	movs	r3, #0
 8009646:	4698      	mov	r8, r3
 8009648:	e523      	b.n	8009092 <PxMessagingTask+0x6a>
							ClearEEportsDir();
 800964a:	f7f9 f99b 	bl	8002984 <ClearEEportsDir>
							osDelay(100);
 800964e:	2064      	movs	r0, #100	; 0x64
 8009650:	f003 f937 	bl	800c8c2 <osDelay>
							indMode = IND_TOPOLOGY;
 8009654:	4b4d      	ldr	r3, [pc, #308]	; (800978c <PxMessagingTask+0x764>)
 8009656:	2202      	movs	r2, #2
 8009658:	701a      	strb	r2, [r3, #0]
							break;
 800965a:	2300      	movs	r3, #0
 800965c:	4698      	mov	r8, r3
 800965e:	e518      	b.n	8009092 <PxMessagingTask+0x6a>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009660:	f003 fa52 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 8009664:	4681      	mov	r9, r0
							if (dst == BOS_BROADCAST)
 8009666:	4653      	mov	r3, sl
 8009668:	2bff      	cmp	r3, #255	; 0xff
 800966a:	d012      	beq.n	8009692 <PxMessagingTask+0x66a>
							else if (dst == BOS_MULTICAST)
 800966c:	2bfe      	cmp	r3, #254	; 0xfe
 800966e:	d01a      	beq.n	80096a6 <PxMessagingTask+0x67e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009672:	469c      	mov	ip, r3
 8009674:	4465      	add	r5, ip
 8009676:	493c      	ldr	r1, [pc, #240]	; (8009768 <PxMessagingTask+0x740>)
 8009678:	1869      	adds	r1, r5, r1
 800967a:	4642      	mov	r2, r8
 800967c:	4844      	ldr	r0, [pc, #272]	; (8009790 <PxMessagingTask+0x768>)
 800967e:	f008 fa6f 	bl	8011b60 <memcpy>
								temp = PcPort; PcPort = port;
 8009682:	4d44      	ldr	r5, [pc, #272]	; (8009794 <PxMessagingTask+0x76c>)
								if (BOS.response == BOS_RESPONSE_ALL)
 8009684:	4b44      	ldr	r3, [pc, #272]	; (8009798 <PxMessagingTask+0x770>)
 8009686:	469a      	mov	sl, r3
 8009688:	9405      	str	r4, [sp, #20]
 800968a:	46b8      	mov	r8, r7
 800968c:	464f      	mov	r7, r9
 800968e:	46b1      	mov	r9, r6
 8009690:	e017      	b.n	80096c2 <PxMessagingTask+0x69a>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009692:	4642      	mov	r2, r8
 8009694:	3a01      	subs	r2, #1
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	18e9      	adds	r1, r5, r3
 800969a:	4d33      	ldr	r5, [pc, #204]	; (8009768 <PxMessagingTask+0x740>)
 800969c:	1949      	adds	r1, r1, r5
 800969e:	483c      	ldr	r0, [pc, #240]	; (8009790 <PxMessagingTask+0x768>)
 80096a0:	f008 fa5e 	bl	8011b60 <memcpy>
 80096a4:	e7ed      	b.n	8009682 <PxMessagingTask+0x65a>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 80096a6:	4643      	mov	r3, r8
 80096a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096aa:	1a9a      	subs	r2, r3, r2
 80096ac:	3a02      	subs	r2, #2
 80096ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b0:	18e9      	adds	r1, r5, r3
 80096b2:	4d2d      	ldr	r5, [pc, #180]	; (8009768 <PxMessagingTask+0x740>)
 80096b4:	1949      	adds	r1, r1, r5
 80096b6:	4836      	ldr	r0, [pc, #216]	; (8009790 <PxMessagingTask+0x768>)
 80096b8:	f008 fa52 	bl	8011b60 <memcpy>
 80096bc:	e7e1      	b.n	8009682 <PxMessagingTask+0x65a>
							while( xReturned != pdFALSE );								
 80096be:	2c00      	cmp	r4, #0
 80096c0:	d022      	beq.n	8009708 <PxMessagingTask+0x6e0>
								temp = PcPort; PcPort = port;
 80096c2:	782e      	ldrb	r6, [r5, #0]
 80096c4:	9b08      	ldr	r3, [sp, #32]
 80096c6:	702b      	strb	r3, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80096c8:	2299      	movs	r2, #153	; 0x99
 80096ca:	0092      	lsls	r2, r2, #2
 80096cc:	0039      	movs	r1, r7
 80096ce:	4830      	ldr	r0, [pc, #192]	; (8009790 <PxMessagingTask+0x768>)
 80096d0:	f003 f990 	bl	800c9f4 <FreeRTOS_CLIProcessCommand>
 80096d4:	0004      	movs	r4, r0
								PcPort = temp;
 80096d6:	702e      	strb	r6, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 80096d8:	4653      	mov	r3, sl
 80096da:	799b      	ldrb	r3, [r3, #6]
 80096dc:	2b60      	cmp	r3, #96	; 0x60
 80096de:	d1ee      	bne.n	80096be <PxMessagingTask+0x696>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 80096e0:	0038      	movs	r0, r7
 80096e2:	f7f6 fd19 	bl	8000118 <strlen>
 80096e6:	0002      	movs	r2, r0
 80096e8:	0039      	movs	r1, r7
 80096ea:	4822      	ldr	r0, [pc, #136]	; (8009774 <PxMessagingTask+0x74c>)
 80096ec:	f008 fa38 	bl	8011b60 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 80096f0:	0038      	movs	r0, r7
 80096f2:	f7f6 fd11 	bl	8000118 <strlen>
 80096f6:	b282      	uxth	r2, r0
 80096f8:	2118      	movs	r1, #24
 80096fa:	9806      	ldr	r0, [sp, #24]
 80096fc:	f7ff f9b8 	bl	8008a70 <SendMessageToModule>
									osDelay(10); 
 8009700:	200a      	movs	r0, #10
 8009702:	f003 f8de 	bl	800c8c2 <osDelay>
 8009706:	e7da      	b.n	80096be <PxMessagingTask+0x696>
 8009708:	9c05      	ldr	r4, [sp, #20]
 800970a:	960a      	str	r6, [sp, #40]	; 0x28
 800970c:	4647      	mov	r7, r8
 800970e:	464e      	mov	r6, r9
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009710:	2232      	movs	r2, #50	; 0x32
 8009712:	2100      	movs	r1, #0
 8009714:	481e      	ldr	r0, [pc, #120]	; (8009790 <PxMessagingTask+0x768>)
 8009716:	f008 fa2c 	bl	8011b72 <memset>
							break;
 800971a:	2300      	movs	r3, #0
 800971c:	4698      	mov	r8, r3
 800971e:	e4b8      	b.n	8009092 <PxMessagingTask+0x6a>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009720:	f003 f9f2 	bl	800cb08 <FreeRTOS_CLIGetOutputBuffer>
 8009724:	4681      	mov	r9, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009726:	f7f6 fcf7 	bl	8000118 <strlen>
 800972a:	0002      	movs	r2, r0
 800972c:	2100      	movs	r1, #0
 800972e:	4648      	mov	r0, r9
 8009730:	f008 fa1f 	bl	8011b72 <memset>
							if (longMessage) {
 8009734:	4b10      	ldr	r3, [pc, #64]	; (8009778 <PxMessagingTask+0x750>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	469a      	mov	sl, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d02e      	beq.n	800979c <PxMessagingTask+0x774>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800973e:	4b0f      	ldr	r3, [pc, #60]	; (800977c <PxMessagingTask+0x754>)
 8009740:	469a      	mov	sl, r3
 8009742:	8818      	ldrh	r0, [r3, #0]
 8009744:	4448      	add	r0, r9
 8009746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009748:	469c      	mov	ip, r3
 800974a:	4465      	add	r5, ip
 800974c:	4906      	ldr	r1, [pc, #24]	; (8009768 <PxMessagingTask+0x740>)
 800974e:	1869      	adds	r1, r5, r1
 8009750:	4642      	mov	r2, r8
 8009752:	f008 fa05 	bl	8011b60 <memcpy>
								longMessageLastPtr += numOfParams;
 8009756:	4653      	mov	r3, sl
 8009758:	881d      	ldrh	r5, [r3, #0]
 800975a:	4445      	add	r5, r8
 800975c:	801d      	strh	r5, [r3, #0]
 800975e:	2300      	movs	r3, #0
 8009760:	4698      	mov	r8, r3
 8009762:	e496      	b.n	8009092 <PxMessagingTask+0x6a>
 8009764:	20000d64 	.word	0x20000d64
 8009768:	20000b14 	.word	0x20000b14
 800976c:	20000de8 	.word	0x20000de8
 8009770:	20000070 	.word	0x20000070
 8009774:	20000d14 	.word	0x20000d14
 8009778:	20000cd1 	.word	0x20000cd1
 800977c:	20000cd2 	.word	0x20000cd2
 8009780:	20001270 	.word	0x20001270
 8009784:	2000001c 	.word	0x2000001c
 8009788:	200000a4 	.word	0x200000a4
 800978c:	20000cd0 	.word	0x20000cd0
 8009790:	2000123c 	.word	0x2000123c
 8009794:	20000ad7 	.word	0x20000ad7
 8009798:	20006600 	.word	0x20006600
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800979c:	4be8      	ldr	r3, [pc, #928]	; (8009b40 <PxMessagingTask+0xb18>)
 800979e:	8818      	ldrh	r0, [r3, #0]
 80097a0:	4448      	add	r0, r9
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	469c      	mov	ip, r3
 80097a6:	4465      	add	r5, ip
 80097a8:	49e6      	ldr	r1, [pc, #920]	; (8009b44 <PxMessagingTask+0xb1c>)
 80097aa:	1869      	adds	r1, r5, r1
 80097ac:	4642      	mov	r2, r8
 80097ae:	f008 f9d7 	bl	8011b60 <memcpy>
								longMessageLastPtr = 0;
 80097b2:	2100      	movs	r1, #0
 80097b4:	4be2      	ldr	r3, [pc, #904]	; (8009b40 <PxMessagingTask+0xb18>)
 80097b6:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 80097b8:	4be3      	ldr	r3, [pc, #908]	; (8009b48 <PxMessagingTask+0xb20>)
 80097ba:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 80097bc:	000b      	movs	r3, r1
 80097be:	000a      	movs	r2, r1
 80097c0:	48e2      	ldr	r0, [pc, #904]	; (8009b4c <PxMessagingTask+0xb24>)
 80097c2:	6800      	ldr	r0, [r0, #0]
 80097c4:	f004 fce6 	bl	800e194 <xTaskGenericNotify>
 80097c8:	46d0      	mov	r8, sl
 80097ca:	e462      	b.n	8009092 <PxMessagingTask+0x6a>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80097cc:	4be0      	ldr	r3, [pc, #896]	; (8009b50 <PxMessagingTask+0xb28>)
 80097ce:	4ae1      	ldr	r2, [pc, #900]	; (8009b54 <PxMessagingTask+0xb2c>)
 80097d0:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 80097d2:	4be1      	ldr	r3, [pc, #900]	; (8009b58 <PxMessagingTask+0xb30>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 80097d8:	200a      	movs	r0, #10
 80097da:	f003 f872 	bl	800c8c2 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	4bde      	ldr	r3, [pc, #888]	; (8009b5c <PxMessagingTask+0xb34>)
 80097e4:	4ade      	ldr	r2, [pc, #888]	; (8009b60 <PxMessagingTask+0xb38>)
 80097e6:	60da      	str	r2, [r3, #12]
 80097e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80097ec:	46c0      	nop			; (mov r8, r8)
 80097ee:	e7fd      	b.n	80097ec <PxMessagingTask+0x7c4>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 80097f0:	4bd4      	ldr	r3, [pc, #848]	; (8009b44 <PxMessagingTask+0xb1c>)
 80097f2:	4698      	mov	r8, r3
 80097f4:	44b0      	add	r8, r6
 80097f6:	4643      	mov	r3, r8
 80097f8:	5d58      	ldrb	r0, [r3, r5]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	3319      	adds	r3, #25
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	f7fe ff0c 	bl	8008620 <SendMessageFromPort>
								osDelay(100);
 8009808:	2064      	movs	r0, #100	; 0x64
 800980a:	f003 f85a 	bl	800c8c2 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 800980e:	4643      	mov	r3, r8
 8009810:	5d5b      	ldrb	r3, [r3, r5]
 8009812:	4ad4      	ldr	r2, [pc, #848]	; (8009b64 <PxMessagingTask+0xb3c>)
 8009814:	7811      	ldrb	r1, [r2, #0]
 8009816:	9a08      	ldr	r2, [sp, #32]
 8009818:	9806      	ldr	r0, [sp, #24]
 800981a:	f7f9 ff01 	bl	8003620 <remoteBootloaderUpdate>
								break;
 800981e:	2300      	movs	r3, #0
 8009820:	4698      	mov	r8, r3
 8009822:	e436      	b.n	8009092 <PxMessagingTask+0x6a>
							temp = cMessage[port-1][11+shift];
 8009824:	46aa      	mov	sl, r5
 8009826:	230b      	movs	r3, #11
 8009828:	4699      	mov	r9, r3
 800982a:	44a9      	add	r9, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800982c:	4643      	mov	r3, r8
 800982e:	2b0f      	cmp	r3, #15
 8009830:	d011      	beq.n	8009856 <PxMessagingTask+0x82e>
							temp = cMessage[port-1][11+shift];
 8009832:	2238      	movs	r2, #56	; 0x38
 8009834:	4362      	muls	r2, r4
 8009836:	4bc3      	ldr	r3, [pc, #780]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009838:	189b      	adds	r3, r3, r2
 800983a:	464a      	mov	r2, r9
 800983c:	5c9b      	ldrb	r3, [r3, r2]
 800983e:	9305      	str	r3, [sp, #20]
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8009840:	4643      	mov	r3, r8
 8009842:	2b11      	cmp	r3, #17
 8009844:	d10e      	bne.n	8009864 <PxMessagingTask+0x83c>
 8009846:	2238      	movs	r2, #56	; 0x38
 8009848:	4362      	muls	r2, r4
 800984a:	4bbe      	ldr	r3, [pc, #760]	; (8009b44 <PxMessagingTask+0xb1c>)
 800984c:	189b      	adds	r3, r3, r2
 800984e:	4453      	add	r3, sl
 8009850:	7bdb      	ldrb	r3, [r3, #15]
 8009852:	9305      	str	r3, [sp, #20]
 8009854:	e006      	b.n	8009864 <PxMessagingTask+0x83c>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009856:	2238      	movs	r2, #56	; 0x38
 8009858:	4362      	muls	r2, r4
 800985a:	4bba      	ldr	r3, [pc, #744]	; (8009b44 <PxMessagingTask+0xb1c>)
 800985c:	189b      	adds	r3, r3, r2
 800985e:	195d      	adds	r5, r3, r5
 8009860:	7b6b      	ldrb	r3, [r5, #13]
 8009862:	9305      	str	r3, [sp, #20]
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009864:	4653      	mov	r3, sl
 8009866:	1c58      	adds	r0, r3, #1
 8009868:	900a      	str	r0, [sp, #40]	; 0x28
 800986a:	1c9d      	adds	r5, r3, #2
 800986c:	950d      	str	r5, [sp, #52]	; 0x34
 800986e:	1cd9      	adds	r1, r3, #3
 8009870:	910e      	str	r1, [sp, #56]	; 0x38
 8009872:	4bb4      	ldr	r3, [pc, #720]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009874:	199b      	adds	r3, r3, r6
 8009876:	4652      	mov	r2, sl
 8009878:	5c9a      	ldrb	r2, [r3, r2]
 800987a:	0612      	lsls	r2, r2, #24
 800987c:	5c59      	ldrb	r1, [r3, r1]
 800987e:	1852      	adds	r2, r2, r1
 8009880:	5c19      	ldrb	r1, [r3, r0]
 8009882:	0409      	lsls	r1, r1, #16
 8009884:	1852      	adds	r2, r2, r1
 8009886:	5d59      	ldrb	r1, [r3, r5]
 8009888:	0209      	lsls	r1, r1, #8
 800988a:	1852      	adds	r2, r2, r1
 800988c:	920c      	str	r2, [sp, #48]	; 0x30
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800988e:	4652      	mov	r2, sl
 8009890:	3204      	adds	r2, #4
 8009892:	920f      	str	r2, [sp, #60]	; 0x3c
 8009894:	2105      	movs	r1, #5
 8009896:	4451      	add	r1, sl
 8009898:	468c      	mov	ip, r1
 800989a:	4651      	mov	r1, sl
 800989c:	3106      	adds	r1, #6
 800989e:	4650      	mov	r0, sl
 80098a0:	3007      	adds	r0, #7
 80098a2:	5c9d      	ldrb	r5, [r3, r2]
 80098a4:	062d      	lsls	r5, r5, #24
 80098a6:	4662      	mov	r2, ip
 80098a8:	5c9a      	ldrb	r2, [r3, r2]
 80098aa:	0412      	lsls	r2, r2, #16
 80098ac:	18aa      	adds	r2, r5, r2
 80098ae:	5c1d      	ldrb	r5, [r3, r0]
 80098b0:	1952      	adds	r2, r2, r5
 80098b2:	5c5d      	ldrb	r5, [r3, r1]
 80098b4:	022d      	lsls	r5, r5, #8
 80098b6:	1955      	adds	r5, r2, r5
							if (temp == false)
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d159      	bne.n	8009972 <PxMessagingTask+0x94a>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 80098be:	4ba1      	ldr	r3, [pc, #644]	; (8009b44 <PxMessagingTask+0xb1c>)
 80098c0:	199b      	adds	r3, r3, r6
 80098c2:	4453      	add	r3, sl
 80098c4:	7a5b      	ldrb	r3, [r3, #9]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <PxMessagingTask+0x8b2>
 80098ca:	2138      	movs	r1, #56	; 0x38
 80098cc:	4361      	muls	r1, r4
 80098ce:	4a9d      	ldr	r2, [pc, #628]	; (8009b44 <PxMessagingTask+0xb1c>)
 80098d0:	1852      	adds	r2, r2, r1
 80098d2:	4452      	add	r2, sl
 80098d4:	7a92      	ldrb	r2, [r2, #10]
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d123      	bne.n	8009922 <PxMessagingTask+0x8fa>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 80098da:	4b9a      	ldr	r3, [pc, #616]	; (8009b44 <PxMessagingTask+0xb1c>)
 80098dc:	199b      	adds	r3, r3, r6
 80098de:	464a      	mov	r2, r9
 80098e0:	5c9b      	ldrb	r3, [r3, r2]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <PxMessagingTask+0x8ce>
 80098e6:	2138      	movs	r1, #56	; 0x38
 80098e8:	4361      	muls	r1, r4
 80098ea:	4a96      	ldr	r2, [pc, #600]	; (8009b44 <PxMessagingTask+0xb1c>)
 80098ec:	1852      	adds	r2, r2, r1
 80098ee:	4452      	add	r2, sl
 80098f0:	7b12      	ldrb	r2, [r2, #12]
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	d120      	bne.n	8009938 <PxMessagingTask+0x910>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 80098f6:	4b93      	ldr	r3, [pc, #588]	; (8009b44 <PxMessagingTask+0xb1c>)
 80098f8:	199b      	adds	r3, r3, r6
 80098fa:	4453      	add	r3, sl
 80098fc:	7b5b      	ldrb	r3, [r3, #13]
 80098fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009900:	4698      	mov	r8, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <PxMessagingTask+0x8e2>
 8009906:	f7ff fbc4 	bl	8009092 <PxMessagingTask+0x6a>
 800990a:	2238      	movs	r2, #56	; 0x38
 800990c:	4362      	muls	r2, r4
 800990e:	4b8d      	ldr	r3, [pc, #564]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009910:	189b      	adds	r3, r3, r2
 8009912:	4453      	add	r3, sl
 8009914:	7b9b      	ldrb	r3, [r3, #14]
 8009916:	4698      	mov	r8, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d118      	bne.n	800994e <PxMessagingTask+0x926>
 800991c:	930a      	str	r3, [sp, #40]	; 0x28
 800991e:	f7ff fbb8 	bl	8009092 <PxMessagingTask+0x6a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 8009922:	0008      	movs	r0, r1
 8009924:	4987      	ldr	r1, [pc, #540]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009926:	1809      	adds	r1, r1, r0
 8009928:	4451      	add	r1, sl
 800992a:	7a08      	ldrb	r0, [r1, #8]
 800992c:	9200      	str	r2, [sp, #0]
 800992e:	002a      	movs	r2, r5
 8009930:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009932:	f7fe fd57 	bl	80083e4 <SetupDMAStreams>
 8009936:	e7d0      	b.n	80098da <PxMessagingTask+0x8b2>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8009938:	0008      	movs	r0, r1
 800993a:	4982      	ldr	r1, [pc, #520]	; (8009b44 <PxMessagingTask+0xb1c>)
 800993c:	1809      	adds	r1, r1, r0
 800993e:	4451      	add	r1, sl
 8009940:	7a08      	ldrb	r0, [r1, #8]
 8009942:	9200      	str	r2, [sp, #0]
 8009944:	002a      	movs	r2, r5
 8009946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009948:	f7fe fd4c 	bl	80083e4 <SetupDMAStreams>
 800994c:	e7d3      	b.n	80098f6 <PxMessagingTask+0x8ce>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800994e:	2238      	movs	r2, #56	; 0x38
 8009950:	4362      	muls	r2, r4
 8009952:	4b7c      	ldr	r3, [pc, #496]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009954:	189b      	adds	r3, r3, r2
 8009956:	4453      	add	r3, sl
 8009958:	7a18      	ldrb	r0, [r3, #8]
 800995a:	4643      	mov	r3, r8
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009960:	002a      	movs	r2, r5
 8009962:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009964:	f7fe fd3e 	bl	80083e4 <SetupDMAStreams>
 8009968:	9b05      	ldr	r3, [sp, #20]
 800996a:	930a      	str	r3, [sp, #40]	; 0x28
 800996c:	4698      	mov	r8, r3
 800996e:	f7ff fb90 	bl	8009092 <PxMessagingTask+0x6a>
 8009972:	4652      	mov	r2, sl
 8009974:	4663      	mov	r3, ip
 8009976:	9305      	str	r3, [sp, #20]
 8009978:	468a      	mov	sl, r1
 800997a:	4645      	mov	r5, r8
 800997c:	46c8      	mov	r8, r9
 800997e:	4681      	mov	r9, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8009980:	2338      	movs	r3, #56	; 0x38
 8009982:	4363      	muls	r3, r4
 8009984:	4e6f      	ldr	r6, [pc, #444]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009986:	18f6      	adds	r6, r6, r3
 8009988:	9204      	str	r2, [sp, #16]
 800998a:	18b7      	adds	r7, r6, r2
 800998c:	7a39      	ldrb	r1, [r7, #8]
 800998e:	20e4      	movs	r0, #228	; 0xe4
 8009990:	f7fd fb42 	bl	8007018 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 8009994:	9a04      	ldr	r2, [sp, #16]
 8009996:	5cb3      	ldrb	r3, [r6, r2]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800999c:	5c31      	ldrb	r1, [r6, r0]
 800999e:	18c9      	adds	r1, r1, r3
 80099a0:	b289      	uxth	r1, r1
 80099a2:	20e5      	movs	r0, #229	; 0xe5
 80099a4:	f7fd fb38 	bl	8007018 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 80099a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80099aa:	5c33      	ldrb	r3, [r6, r0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099b0:	5c31      	ldrb	r1, [r6, r0]
 80099b2:	18c9      	adds	r1, r1, r3
 80099b4:	b289      	uxth	r1, r1
 80099b6:	20e6      	movs	r0, #230	; 0xe6
 80099b8:	f7fd fb2e 	bl	8007018 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 80099bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80099be:	5c33      	ldrb	r3, [r6, r0]
 80099c0:	021b      	lsls	r3, r3, #8
 80099c2:	9a05      	ldr	r2, [sp, #20]
 80099c4:	5cb1      	ldrb	r1, [r6, r2]
 80099c6:	18c9      	adds	r1, r1, r3
 80099c8:	b289      	uxth	r1, r1
 80099ca:	20e7      	movs	r0, #231	; 0xe7
 80099cc:	f7fd fb24 	bl	8007018 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 80099d0:	4653      	mov	r3, sl
 80099d2:	5cf3      	ldrb	r3, [r6, r3]
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	464a      	mov	r2, r9
 80099d8:	5cb1      	ldrb	r1, [r6, r2]
 80099da:	18c9      	adds	r1, r1, r3
 80099dc:	b289      	uxth	r1, r1
 80099de:	20e8      	movs	r0, #232	; 0xe8
 80099e0:	f7fd fb1a 	bl	8007018 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 80099e4:	7a7b      	ldrb	r3, [r7, #9]
 80099e6:	021b      	lsls	r3, r3, #8
 80099e8:	7ab9      	ldrb	r1, [r7, #10]
 80099ea:	18c9      	adds	r1, r1, r3
 80099ec:	b289      	uxth	r1, r1
 80099ee:	20e9      	movs	r0, #233	; 0xe9
 80099f0:	f7fd fb12 	bl	8007018 <EE_WriteVariable>
								if (numOfParams == 19)
 80099f4:	2d13      	cmp	r5, #19
 80099f6:	d00a      	beq.n	8009a0e <PxMessagingTask+0x9e6>
								if (numOfParams == 21)
 80099f8:	2d15      	cmp	r5, #21
 80099fa:	d019      	beq.n	8009a30 <PxMessagingTask+0xa08>
  __ASM volatile ("dsb 0xF":::"memory");
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	4b56      	ldr	r3, [pc, #344]	; (8009b5c <PxMessagingTask+0xb34>)
 8009a02:	4a57      	ldr	r2, [pc, #348]	; (8009b60 <PxMessagingTask+0xb38>)
 8009a04:	60da      	str	r2, [r3, #12]
 8009a06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	e7fd      	b.n	8009a0a <PxMessagingTask+0x9e2>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 8009a0e:	2338      	movs	r3, #56	; 0x38
 8009a10:	4363      	muls	r3, r4
 8009a12:	4c4c      	ldr	r4, [pc, #304]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009a14:	18e4      	adds	r4, r4, r3
 8009a16:	4643      	mov	r3, r8
 8009a18:	5ce3      	ldrb	r3, [r4, r3]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	9a04      	ldr	r2, [sp, #16]
 8009a1e:	4694      	mov	ip, r2
 8009a20:	4464      	add	r4, ip
 8009a22:	7b21      	ldrb	r1, [r4, #12]
 8009a24:	18c9      	adds	r1, r1, r3
 8009a26:	b289      	uxth	r1, r1
 8009a28:	20ea      	movs	r0, #234	; 0xea
 8009a2a:	f7fd faf5 	bl	8007018 <EE_WriteVariable>
								if (numOfParams == 21)
 8009a2e:	e7e5      	b.n	80099fc <PxMessagingTask+0x9d4>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 8009a30:	2338      	movs	r3, #56	; 0x38
 8009a32:	435c      	muls	r4, r3
 8009a34:	4b43      	ldr	r3, [pc, #268]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009a36:	191b      	adds	r3, r3, r4
 8009a38:	9a04      	ldr	r2, [sp, #16]
 8009a3a:	4694      	mov	ip, r2
 8009a3c:	4463      	add	r3, ip
 8009a3e:	7b5a      	ldrb	r2, [r3, #13]
 8009a40:	0212      	lsls	r2, r2, #8
 8009a42:	7b99      	ldrb	r1, [r3, #14]
 8009a44:	1889      	adds	r1, r1, r2
 8009a46:	b289      	uxth	r1, r1
 8009a48:	20eb      	movs	r0, #235	; 0xeb
 8009a4a:	f7fd fae5 	bl	8007018 <EE_WriteVariable>
 8009a4e:	e7d5      	b.n	80099fc <PxMessagingTask+0x9d4>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009a50:	493c      	ldr	r1, [pc, #240]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009a52:	1989      	adds	r1, r1, r6
 8009a54:	194b      	adds	r3, r1, r5
 8009a56:	7a9a      	ldrb	r2, [r3, #10]
 8009a58:	4691      	mov	r9, r2
 8009a5a:	7ada      	ldrb	r2, [r3, #11]
 8009a5c:	4690      	mov	r8, r2
 8009a5e:	4a41      	ldr	r2, [pc, #260]	; (8009b64 <PxMessagingTask+0xb3c>)
 8009a60:	7812      	ldrb	r2, [r2, #0]
 8009a62:	4694      	mov	ip, r2
 8009a64:	7a5a      	ldrb	r2, [r3, #9]
 8009a66:	9205      	str	r2, [sp, #20]
 8009a68:	7b1a      	ldrb	r2, [r3, #12]
 8009a6a:	1e50      	subs	r0, r2, #1
 8009a6c:	4182      	sbcs	r2, r0
 8009a6e:	9203      	str	r2, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 8009a70:	791a      	ldrb	r2, [r3, #4]
 8009a72:	0612      	lsls	r2, r2, #24
 8009a74:	4692      	mov	sl, r2
 8009a76:	795a      	ldrb	r2, [r3, #5]
 8009a78:	0412      	lsls	r2, r2, #16
 8009a7a:	4452      	add	r2, sl
 8009a7c:	79d8      	ldrb	r0, [r3, #7]
 8009a7e:	4682      	mov	sl, r0
 8009a80:	4452      	add	r2, sl
 8009a82:	7998      	ldrb	r0, [r3, #6]
 8009a84:	0200      	lsls	r0, r0, #8
 8009a86:	4682      	mov	sl, r0
 8009a88:	4452      	add	r2, sl
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009a8a:	9202      	str	r2, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009a8c:	5d4a      	ldrb	r2, [r1, r5]
 8009a8e:	0612      	lsls	r2, r2, #24
 8009a90:	78d9      	ldrb	r1, [r3, #3]
 8009a92:	1852      	adds	r2, r2, r1
 8009a94:	7859      	ldrb	r1, [r3, #1]
 8009a96:	0409      	lsls	r1, r1, #16
 8009a98:	1852      	adds	r2, r2, r1
 8009a9a:	7899      	ldrb	r1, [r3, #2]
 8009a9c:	0209      	lsls	r1, r1, #8
 8009a9e:	1852      	adds	r2, r2, r1
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009aa0:	9201      	str	r2, [sp, #4]
 8009aa2:	7a1b      	ldrb	r3, [r3, #8]
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	464b      	mov	r3, r9
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	4661      	mov	r1, ip
 8009aac:	9805      	ldr	r0, [sp, #20]
 8009aae:	f7ff f805 	bl	8008abc <StartScastDMAStream>
							break;								
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4698      	mov	r8, r3
 8009ab6:	f7ff faec 	bl	8009092 <PxMessagingTask+0x6a>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 8009aba:	4b22      	ldr	r3, [pc, #136]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009abc:	199b      	adds	r3, r3, r6
 8009abe:	5d5b      	ldrb	r3, [r3, r5]
 8009ac0:	4698      	mov	r8, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d000      	beq.n	8009ac8 <PxMessagingTask+0xaa0>
 8009ac6:	e097      	b.n	8009bf8 <PxMessagingTask+0xbd0>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8009ac8:	2238      	movs	r2, #56	; 0x38
 8009aca:	4362      	muls	r2, r4
 8009acc:	4b1d      	ldr	r3, [pc, #116]	; (8009b44 <PxMessagingTask+0xb1c>)
 8009ace:	189b      	adds	r3, r3, r2
 8009ad0:	195d      	adds	r5, r3, r5
 8009ad2:	78ab      	ldrb	r3, [r5, #2]
 8009ad4:	061b      	lsls	r3, r3, #24
 8009ad6:	78ea      	ldrb	r2, [r5, #3]
 8009ad8:	0412      	lsls	r2, r2, #16
 8009ada:	189b      	adds	r3, r3, r2
 8009adc:	796a      	ldrb	r2, [r5, #5]
 8009ade:	189b      	adds	r3, r3, r2
 8009ae0:	792a      	ldrb	r2, [r5, #4]
 8009ae2:	0212      	lsls	r2, r2, #8
 8009ae4:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 8009ae6:	786a      	ldrb	r2, [r5, #1]
 8009ae8:	3a01      	subs	r2, #1
 8009aea:	b2d1      	uxtb	r1, r2
 8009aec:	2907      	cmp	r1, #7
 8009aee:	d901      	bls.n	8009af4 <PxMessagingTask+0xacc>
 8009af0:	f7ff faca 	bl	8009088 <PxMessagingTask+0x60>
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	0092      	lsls	r2, r2, #2
 8009af8:	491b      	ldr	r1, [pc, #108]	; (8009b68 <PxMessagingTask+0xb40>)
 8009afa:	588a      	ldr	r2, [r1, r2]
 8009afc:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 8009afe:	781a      	ldrb	r2, [r3, #0]
 8009b00:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <PxMessagingTask+0xb44>)
 8009b02:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009b04:	2201      	movs	r2, #1
 8009b06:	211f      	movs	r1, #31
 8009b08:	9806      	ldr	r0, [sp, #24]
 8009b0a:	f7fe ffb1 	bl	8008a70 <SendMessageToModule>
 8009b0e:	f7ff fac0 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[0] = *(__IO int8_t *)temp32; 
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <PxMessagingTask+0xb44>)
 8009b16:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009b18:	2201      	movs	r2, #1
 8009b1a:	211f      	movs	r1, #31
 8009b1c:	9806      	ldr	r0, [sp, #24]
 8009b1e:	f7fe ffa7 	bl	8008a70 <SendMessageToModule>
 8009b22:	f7ff fab6 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 8009b26:	8819      	ldrh	r1, [r3, #0]
 8009b28:	4a10      	ldr	r2, [pc, #64]	; (8009b6c <PxMessagingTask+0xb44>)
 8009b2a:	7011      	strb	r1, [r2, #0]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	0a1b      	lsrs	r3, r3, #8
 8009b30:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009b32:	2202      	movs	r2, #2
 8009b34:	211f      	movs	r1, #31
 8009b36:	9806      	ldr	r0, [sp, #24]
 8009b38:	f7fe ff9a 	bl	8008a70 <SendMessageToModule>
 8009b3c:	f7ff faa9 	bl	8009092 <PxMessagingTask+0x6a>
 8009b40:	20000cd2 	.word	0x20000cd2
 8009b44:	20000b14 	.word	0x20000b14
 8009b48:	20000de8 	.word	0x20000de8
 8009b4c:	200011ac 	.word	0x200011ac
 8009b50:	20007ff0 	.word	0x20007ff0
 8009b54:	deadbeef 	.word	0xdeadbeef
 8009b58:	20000cd0 	.word	0x20000cd0
 8009b5c:	e000ed00 	.word	0xe000ed00
 8009b60:	05fa0004 	.word	0x05fa0004
 8009b64:	20000070 	.word	0x20000070
 8009b68:	0801a4d0 	.word	0x0801a4d0
 8009b6c:	20000d14 	.word	0x20000d14
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009b70:	8819      	ldrh	r1, [r3, #0]
 8009b72:	4aeb      	ldr	r2, [pc, #940]	; (8009f20 <PxMessagingTask+0xef8>)
 8009b74:	7011      	strb	r1, [r2, #0]
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	b21b      	sxth	r3, r3
 8009b7a:	121b      	asrs	r3, r3, #8
 8009b7c:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009b7e:	2202      	movs	r2, #2
 8009b80:	211f      	movs	r1, #31
 8009b82:	9806      	ldr	r0, [sp, #24]
 8009b84:	f7fe ff74 	bl	8008a70 <SendMessageToModule>
 8009b88:	f7ff fa83 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009b8c:	6819      	ldr	r1, [r3, #0]
 8009b8e:	4ae4      	ldr	r2, [pc, #912]	; (8009f20 <PxMessagingTask+0xef8>)
 8009b90:	7011      	strb	r1, [r2, #0]
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	0a09      	lsrs	r1, r1, #8
 8009b96:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009b98:	6819      	ldr	r1, [r3, #0]
 8009b9a:	0c09      	lsrs	r1, r1, #16
 8009b9c:	7091      	strb	r1, [r2, #2]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	0e1b      	lsrs	r3, r3, #24
 8009ba2:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	211f      	movs	r1, #31
 8009ba8:	9806      	ldr	r0, [sp, #24]
 8009baa:	f7fe ff61 	bl	8008a70 <SendMessageToModule>
 8009bae:	f7ff fa70 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009bb2:	6819      	ldr	r1, [r3, #0]
 8009bb4:	4ada      	ldr	r2, [pc, #872]	; (8009f20 <PxMessagingTask+0xef8>)
 8009bb6:	7011      	strb	r1, [r2, #0]
 8009bb8:	6819      	ldr	r1, [r3, #0]
 8009bba:	1209      	asrs	r1, r1, #8
 8009bbc:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009bbe:	6819      	ldr	r1, [r3, #0]
 8009bc0:	1409      	asrs	r1, r1, #16
 8009bc2:	7091      	strb	r1, [r2, #2]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	161b      	asrs	r3, r3, #24
 8009bc8:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 8009bca:	2204      	movs	r2, #4
 8009bcc:	211f      	movs	r1, #31
 8009bce:	9806      	ldr	r0, [sp, #24]
 8009bd0:	f7fe ff4e 	bl	8008a70 <SendMessageToModule>
 8009bd4:	f7ff fa5d 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 8009bd8:	7819      	ldrb	r1, [r3, #0]
 8009bda:	4ad1      	ldr	r2, [pc, #836]	; (8009f20 <PxMessagingTask+0xef8>)
 8009bdc:	7011      	strb	r1, [r2, #0]
 8009bde:	7859      	ldrb	r1, [r3, #1]
 8009be0:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 8009be2:	7899      	ldrb	r1, [r3, #2]
 8009be4:	7091      	strb	r1, [r2, #2]
 8009be6:	78db      	ldrb	r3, [r3, #3]
 8009be8:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 8009bea:	2208      	movs	r2, #8
 8009bec:	211f      	movs	r1, #31
 8009bee:	9806      	ldr	r0, [sp, #24]
 8009bf0:	f7fe ff3e 	bl	8008a70 <SendMessageToModule>
 8009bf4:	f7ff fa4d 	bl	8009092 <PxMessagingTask+0x6a>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d01d      	beq.n	8009c38 <PxMessagingTask+0xc10>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 8009bfc:	d801      	bhi.n	8009c02 <PxMessagingTask+0xbda>
 8009bfe:	f000 fca7 	bl	800a550 <PxMessagingTask+0x1528>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 8009c02:	001d      	movs	r5, r3
 8009c04:	3d04      	subs	r5, #4
 8009c06:	00ad      	lsls	r5, r5, #2
 8009c08:	4bc6      	ldr	r3, [pc, #792]	; (8009f24 <PxMessagingTask+0xefc>)
 8009c0a:	58ea      	ldr	r2, [r5, r3]
 8009c0c:	250f      	movs	r5, #15
 8009c0e:	4015      	ands	r5, r2
 8009c10:	46a8      	mov	r8, r5
 8009c12:	4bc3      	ldr	r3, [pc, #780]	; (8009f20 <PxMessagingTask+0xef8>)
 8009c14:	701d      	strb	r5, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 8009c16:	d100      	bne.n	8009c1a <PxMessagingTask+0xbf2>
 8009c18:	e0af      	b.n	8009d7a <PxMessagingTask+0xd52>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 8009c1a:	0c12      	lsrs	r2, r2, #16
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	059b      	lsls	r3, r3, #22
 8009c20:	18d3      	adds	r3, r2, r3
										switch (messageParams[0])											// requested format
 8009c22:	3d01      	subs	r5, #1
 8009c24:	b2e9      	uxtb	r1, r5
 8009c26:	2907      	cmp	r1, #7
 8009c28:	d901      	bls.n	8009c2e <PxMessagingTask+0xc06>
 8009c2a:	f000 fc80 	bl	800a52e <PxMessagingTask+0x1506>
 8009c2e:	b2ed      	uxtb	r5, r5
 8009c30:	00ad      	lsls	r5, r5, #2
 8009c32:	49bd      	ldr	r1, [pc, #756]	; (8009f28 <PxMessagingTask+0xf00>)
 8009c34:	5949      	ldr	r1, [r1, r5]
 8009c36:	468f      	mov	pc, r1
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 8009c38:	4bbc      	ldr	r3, [pc, #752]	; (8009f2c <PxMessagingTask+0xf04>)
 8009c3a:	2038      	movs	r0, #56	; 0x38
 8009c3c:	4360      	muls	r0, r4
 8009c3e:	1818      	adds	r0, r3, r0
 8009c40:	1841      	adds	r1, r0, r1
 8009c42:	3901      	subs	r1, #1
 8009c44:	2000      	movs	r0, #0
 8009c46:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 8009c48:	1c68      	adds	r0, r5, #1
 8009c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c4c:	4694      	mov	ip, r2
 8009c4e:	4460      	add	r0, ip
 8009c50:	18c0      	adds	r0, r0, r3
 8009c52:	f7f9 fa89 	bl	8003168 <IsModuleParameter>
 8009c56:	1e05      	subs	r5, r0, #0
 8009c58:	900a      	str	r0, [sp, #40]	; 0x28
									if (temp == 0) {																					// Parameter does not exist
 8009c5a:	d013      	beq.n	8009c84 <PxMessagingTask+0xc5c>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 8009c5c:	3d01      	subs	r5, #1
 8009c5e:	4ab4      	ldr	r2, [pc, #720]	; (8009f30 <PxMessagingTask+0xf08>)
 8009c60:	230c      	movs	r3, #12
 8009c62:	435d      	muls	r5, r3
 8009c64:	58ab      	ldr	r3, [r5, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 8009c66:	1952      	adds	r2, r2, r5
 8009c68:	7912      	ldrb	r2, [r2, #4]
 8009c6a:	49ad      	ldr	r1, [pc, #692]	; (8009f20 <PxMessagingTask+0xef8>)
 8009c6c:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 8009c6e:	3a01      	subs	r2, #1
 8009c70:	b2d1      	uxtb	r1, r2
 8009c72:	2907      	cmp	r1, #7
 8009c74:	d901      	bls.n	8009c7a <PxMessagingTask+0xc52>
 8009c76:	f000 fc56 	bl	800a526 <PxMessagingTask+0x14fe>
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	0092      	lsls	r2, r2, #2
 8009c7e:	49ad      	ldr	r1, [pc, #692]	; (8009f34 <PxMessagingTask+0xf0c>)
 8009c80:	588a      	ldr	r2, [r1, r2]
 8009c82:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8009c84:	2201      	movs	r2, #1
 8009c86:	211f      	movs	r1, #31
 8009c88:	9806      	ldr	r0, [sp, #24]
 8009c8a:	f7fe fef1 	bl	8008a70 <SendMessageToModule>
 8009c8e:	46a8      	mov	r8, r5
 8009c90:	f7ff f9ff 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	4ba2      	ldr	r3, [pc, #648]	; (8009f20 <PxMessagingTask+0xef8>)
 8009c98:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	211f      	movs	r1, #31
 8009c9e:	9806      	ldr	r0, [sp, #24]
 8009ca0:	f7fe fee6 	bl	8008a70 <SendMessageToModule>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4698      	mov	r8, r3
 8009ca8:	f7ff f9f3 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = *(__IO int8_t *)temp32; 
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	4b9c      	ldr	r3, [pc, #624]	; (8009f20 <PxMessagingTask+0xef8>)
 8009cb0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	211f      	movs	r1, #31
 8009cb6:	9806      	ldr	r0, [sp, #24]
 8009cb8:	f7fe feda 	bl	8008a70 <SendMessageToModule>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4698      	mov	r8, r3
 8009cc0:	f7ff f9e7 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009cc4:	8819      	ldrh	r1, [r3, #0]
 8009cc6:	4a96      	ldr	r2, [pc, #600]	; (8009f20 <PxMessagingTask+0xef8>)
 8009cc8:	7051      	strb	r1, [r2, #1]
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	0a1b      	lsrs	r3, r3, #8
 8009cce:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009cd0:	2203      	movs	r2, #3
 8009cd2:	211f      	movs	r1, #31
 8009cd4:	9806      	ldr	r0, [sp, #24]
 8009cd6:	f7fe fecb 	bl	8008a70 <SendMessageToModule>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4698      	mov	r8, r3
 8009cde:	f7ff f9d8 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009ce2:	8819      	ldrh	r1, [r3, #0]
 8009ce4:	4a8e      	ldr	r2, [pc, #568]	; (8009f20 <PxMessagingTask+0xef8>)
 8009ce6:	7051      	strb	r1, [r2, #1]
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	b21b      	sxth	r3, r3
 8009cec:	121b      	asrs	r3, r3, #8
 8009cee:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009cf0:	2203      	movs	r2, #3
 8009cf2:	211f      	movs	r1, #31
 8009cf4:	9806      	ldr	r0, [sp, #24]
 8009cf6:	f7fe febb 	bl	8008a70 <SendMessageToModule>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4698      	mov	r8, r3
 8009cfe:	f7ff f9c8 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	4a86      	ldr	r2, [pc, #536]	; (8009f20 <PxMessagingTask+0xef8>)
 8009d06:	7051      	strb	r1, [r2, #1]
 8009d08:	6819      	ldr	r1, [r3, #0]
 8009d0a:	0a09      	lsrs	r1, r1, #8
 8009d0c:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009d0e:	6819      	ldr	r1, [r3, #0]
 8009d10:	0c09      	lsrs	r1, r1, #16
 8009d12:	70d1      	strb	r1, [r2, #3]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	0e1b      	lsrs	r3, r3, #24
 8009d18:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009d1a:	2205      	movs	r2, #5
 8009d1c:	211f      	movs	r1, #31
 8009d1e:	9806      	ldr	r0, [sp, #24]
 8009d20:	f7fe fea6 	bl	8008a70 <SendMessageToModule>
 8009d24:	2300      	movs	r3, #0
 8009d26:	4698      	mov	r8, r3
 8009d28:	f7ff f9b3 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009d2c:	6819      	ldr	r1, [r3, #0]
 8009d2e:	4a7c      	ldr	r2, [pc, #496]	; (8009f20 <PxMessagingTask+0xef8>)
 8009d30:	7051      	strb	r1, [r2, #1]
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	1209      	asrs	r1, r1, #8
 8009d36:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009d38:	6819      	ldr	r1, [r3, #0]
 8009d3a:	1409      	asrs	r1, r1, #16
 8009d3c:	70d1      	strb	r1, [r2, #3]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	161b      	asrs	r3, r3, #24
 8009d42:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8009d44:	2205      	movs	r2, #5
 8009d46:	211f      	movs	r1, #31
 8009d48:	9806      	ldr	r0, [sp, #24]
 8009d4a:	f7fe fe91 	bl	8008a70 <SendMessageToModule>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4698      	mov	r8, r3
 8009d52:	f7ff f99e 	bl	8009092 <PxMessagingTask+0x6a>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 8009d56:	7819      	ldrb	r1, [r3, #0]
 8009d58:	4a71      	ldr	r2, [pc, #452]	; (8009f20 <PxMessagingTask+0xef8>)
 8009d5a:	7051      	strb	r1, [r2, #1]
 8009d5c:	7859      	ldrb	r1, [r3, #1]
 8009d5e:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8009d60:	7899      	ldrb	r1, [r3, #2]
 8009d62:	70d1      	strb	r1, [r2, #3]
 8009d64:	78db      	ldrb	r3, [r3, #3]
 8009d66:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8009d68:	2209      	movs	r2, #9
 8009d6a:	211f      	movs	r1, #31
 8009d6c:	9806      	ldr	r0, [sp, #24]
 8009d6e:	f7fe fe7f 	bl	8008a70 <SendMessageToModule>
 8009d72:	2300      	movs	r3, #0
 8009d74:	4698      	mov	r8, r3
 8009d76:	f7ff f98c 	bl	8009092 <PxMessagingTask+0x6a>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	211f      	movs	r1, #31
 8009d7e:	9806      	ldr	r0, [sp, #24]
 8009d80:	f7fe fe76 	bl	8008a70 <SendMessageToModule>
 8009d84:	f7ff f985 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	4b65      	ldr	r3, [pc, #404]	; (8009f20 <PxMessagingTask+0xef8>)
 8009d8c:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009d8e:	2202      	movs	r2, #2
 8009d90:	211f      	movs	r1, #31
 8009d92:	9806      	ldr	r0, [sp, #24]
 8009d94:	f7fe fe6c 	bl	8008a70 <SendMessageToModule>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	f7ff f979 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = *(__IO int8_t *)temp32; 
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	4b5f      	ldr	r3, [pc, #380]	; (8009f20 <PxMessagingTask+0xef8>)
 8009da4:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009da6:	2202      	movs	r2, #2
 8009da8:	211f      	movs	r1, #31
 8009daa:	9806      	ldr	r0, [sp, #24]
 8009dac:	f7fe fe60 	bl	8008a70 <SendMessageToModule>
 8009db0:	2300      	movs	r3, #0
 8009db2:	4698      	mov	r8, r3
 8009db4:	f7ff f96d 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009db8:	8819      	ldrh	r1, [r3, #0]
 8009dba:	4a59      	ldr	r2, [pc, #356]	; (8009f20 <PxMessagingTask+0xef8>)
 8009dbc:	7051      	strb	r1, [r2, #1]
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	0a1b      	lsrs	r3, r3, #8
 8009dc2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	211f      	movs	r1, #31
 8009dc8:	9806      	ldr	r0, [sp, #24]
 8009dca:	f7fe fe51 	bl	8008a70 <SendMessageToModule>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4698      	mov	r8, r3
 8009dd2:	f7ff f95e 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009dd6:	8819      	ldrh	r1, [r3, #0]
 8009dd8:	4a51      	ldr	r2, [pc, #324]	; (8009f20 <PxMessagingTask+0xef8>)
 8009dda:	7051      	strb	r1, [r2, #1]
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b21b      	sxth	r3, r3
 8009de0:	121b      	asrs	r3, r3, #8
 8009de2:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009de4:	2203      	movs	r2, #3
 8009de6:	211f      	movs	r1, #31
 8009de8:	9806      	ldr	r0, [sp, #24]
 8009dea:	f7fe fe41 	bl	8008a70 <SendMessageToModule>
 8009dee:	2300      	movs	r3, #0
 8009df0:	4698      	mov	r8, r3
 8009df2:	f7ff f94e 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009df6:	6819      	ldr	r1, [r3, #0]
 8009df8:	4a49      	ldr	r2, [pc, #292]	; (8009f20 <PxMessagingTask+0xef8>)
 8009dfa:	7051      	strb	r1, [r2, #1]
 8009dfc:	6819      	ldr	r1, [r3, #0]
 8009dfe:	0a09      	lsrs	r1, r1, #8
 8009e00:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009e02:	6819      	ldr	r1, [r3, #0]
 8009e04:	0c09      	lsrs	r1, r1, #16
 8009e06:	70d1      	strb	r1, [r2, #3]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	0e1b      	lsrs	r3, r3, #24
 8009e0c:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009e0e:	2205      	movs	r2, #5
 8009e10:	211f      	movs	r1, #31
 8009e12:	9806      	ldr	r0, [sp, #24]
 8009e14:	f7fe fe2c 	bl	8008a70 <SendMessageToModule>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	f7ff f939 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009e20:	6819      	ldr	r1, [r3, #0]
 8009e22:	4a3f      	ldr	r2, [pc, #252]	; (8009f20 <PxMessagingTask+0xef8>)
 8009e24:	7051      	strb	r1, [r2, #1]
 8009e26:	6819      	ldr	r1, [r3, #0]
 8009e28:	1209      	asrs	r1, r1, #8
 8009e2a:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009e2c:	6819      	ldr	r1, [r3, #0]
 8009e2e:	1409      	asrs	r1, r1, #16
 8009e30:	70d1      	strb	r1, [r2, #3]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	161b      	asrs	r3, r3, #24
 8009e36:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8009e38:	2205      	movs	r2, #5
 8009e3a:	211f      	movs	r1, #31
 8009e3c:	9806      	ldr	r0, [sp, #24]
 8009e3e:	f7fe fe17 	bl	8008a70 <SendMessageToModule>
 8009e42:	2300      	movs	r3, #0
 8009e44:	4698      	mov	r8, r3
 8009e46:	f7ff f924 	bl	8009092 <PxMessagingTask+0x6a>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 8009e4a:	7819      	ldrb	r1, [r3, #0]
 8009e4c:	4b34      	ldr	r3, [pc, #208]	; (8009f20 <PxMessagingTask+0xef8>)
 8009e4e:	7059      	strb	r1, [r3, #1]
 8009e50:	4939      	ldr	r1, [pc, #228]	; (8009f38 <PxMessagingTask+0xf10>)
 8009e52:	1851      	adds	r1, r2, r1
 8009e54:	7809      	ldrb	r1, [r1, #0]
 8009e56:	7099      	strb	r1, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8009e58:	4938      	ldr	r1, [pc, #224]	; (8009f3c <PxMessagingTask+0xf14>)
 8009e5a:	1851      	adds	r1, r2, r1
 8009e5c:	7809      	ldrb	r1, [r1, #0]
 8009e5e:	70d9      	strb	r1, [r3, #3]
 8009e60:	4937      	ldr	r1, [pc, #220]	; (8009f40 <PxMessagingTask+0xf18>)
 8009e62:	468c      	mov	ip, r1
 8009e64:	4462      	add	r2, ip
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8009e6a:	2209      	movs	r2, #9
 8009e6c:	211f      	movs	r1, #31
 8009e6e:	9806      	ldr	r0, [sp, #24]
 8009e70:	f7fe fdfe 	bl	8008a70 <SendMessageToModule>
 8009e74:	2300      	movs	r3, #0
 8009e76:	4698      	mov	r8, r3
 8009e78:	f7ff f90b 	bl	8009092 <PxMessagingTask+0x6a>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8009e7c:	4b31      	ldr	r3, [pc, #196]	; (8009f44 <PxMessagingTask+0xf1c>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2002      	movs	r0, #2
 8009e84:	4240      	negs	r0, r0
 8009e86:	17c1      	asrs	r1, r0, #31
 8009e88:	1812      	adds	r2, r2, r0
 8009e8a:	414b      	adcs	r3, r1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <PxMessagingTask+0xe7e>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 8009e90:	4b2d      	ldr	r3, [pc, #180]	; (8009f48 <PxMessagingTask+0xf20>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b10      	cmp	r3, #16
 8009e96:	d100      	bne.n	8009e9a <PxMessagingTask+0xe72>
 8009e98:	e35e      	b.n	800a558 <PxMessagingTask+0x1530>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	4b2a      	ldr	r3, [pc, #168]	; (8009f48 <PxMessagingTask+0xf20>)
 8009e9e:	701d      	strb	r5, [r3, #0]
 8009ea0:	46a8      	mov	r8, r5
 8009ea2:	f7ff f8f6 	bl	8009092 <PxMessagingTask+0x6a>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <PxMessagingTask+0xe86>
 8009eaa:	2a01      	cmp	r2, #1
 8009eac:	d8f0      	bhi.n	8009e90 <PxMessagingTask+0xe68>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 8009eae:	2138      	movs	r1, #56	; 0x38
 8009eb0:	4361      	muls	r1, r4
 8009eb2:	4a1e      	ldr	r2, [pc, #120]	; (8009f2c <PxMessagingTask+0xf04>)
 8009eb4:	1852      	adds	r2, r2, r1
 8009eb6:	5d52      	ldrb	r2, [r2, r5]
 8009eb8:	4690      	mov	r8, r2
 8009eba:	4a24      	ldr	r2, [pc, #144]	; (8009f4c <PxMessagingTask+0xf24>)
 8009ebc:	4641      	mov	r1, r8
 8009ebe:	7011      	strb	r1, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 8009ec0:	2908      	cmp	r1, #8
 8009ec2:	d8e5      	bhi.n	8009e90 <PxMessagingTask+0xe68>
 8009ec4:	008a      	lsls	r2, r1, #2
 8009ec6:	4922      	ldr	r1, [pc, #136]	; (8009f50 <PxMessagingTask+0xf28>)
 8009ec8:	588a      	ldr	r2, [r1, r2]
 8009eca:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8009ecc:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <PxMessagingTask+0xf20>)
 8009ece:	2210      	movs	r2, #16
 8009ed0:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 8009ed2:	f7ff f8de 	bl	8009092 <PxMessagingTask+0x6a>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 8009ed6:	4a1b      	ldr	r2, [pc, #108]	; (8009f44 <PxMessagingTask+0xf1c>)
 8009ed8:	2038      	movs	r0, #56	; 0x38
 8009eda:	4360      	muls	r0, r4
 8009edc:	4913      	ldr	r1, [pc, #76]	; (8009f2c <PxMessagingTask+0xf04>)
 8009ede:	1809      	adds	r1, r1, r0
 8009ee0:	1949      	adds	r1, r1, r5
 8009ee2:	784b      	ldrb	r3, [r1, #1]
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	6053      	str	r3, [r2, #4]
 8009eea:	e7d1      	b.n	8009e90 <PxMessagingTask+0xe68>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 8009eec:	4a15      	ldr	r2, [pc, #84]	; (8009f44 <PxMessagingTask+0xf1c>)
 8009eee:	2038      	movs	r0, #56	; 0x38
 8009ef0:	4360      	muls	r0, r4
 8009ef2:	490e      	ldr	r1, [pc, #56]	; (8009f2c <PxMessagingTask+0xf04>)
 8009ef4:	1809      	adds	r1, r1, r0
 8009ef6:	1949      	adds	r1, r1, r5
 8009ef8:	2301      	movs	r3, #1
 8009efa:	56cb      	ldrsb	r3, [r1, r3]
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	17db      	asrs	r3, r3, #31
 8009f00:	6053      	str	r3, [r2, #4]
 8009f02:	e7c5      	b.n	8009e90 <PxMessagingTask+0xe68>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 8009f04:	4a0f      	ldr	r2, [pc, #60]	; (8009f44 <PxMessagingTask+0xf1c>)
 8009f06:	2038      	movs	r0, #56	; 0x38
 8009f08:	4360      	muls	r0, r4
 8009f0a:	4908      	ldr	r1, [pc, #32]	; (8009f2c <PxMessagingTask+0xf04>)
 8009f0c:	1809      	adds	r1, r1, r0
 8009f0e:	1949      	adds	r1, r1, r5
 8009f10:	788b      	ldrb	r3, [r1, #2]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	7849      	ldrb	r1, [r1, #1]
 8009f16:	185b      	adds	r3, r3, r1
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	17db      	asrs	r3, r3, #31
 8009f1c:	6053      	str	r3, [r2, #4]
 8009f1e:	e7b7      	b.n	8009e90 <PxMessagingTask+0xe68>
 8009f20:	20000d14 	.word	0x20000d14
 8009f24:	20006588 	.word	0x20006588
 8009f28:	0801a4f0 	.word	0x0801a4f0
 8009f2c:	20000b14 	.word	0x20000b14
 8009f30:	200000dc 	.word	0x200000dc
 8009f34:	0801a510 	.word	0x0801a510
 8009f38:	20000001 	.word	0x20000001
 8009f3c:	20000002 	.word	0x20000002
 8009f40:	20000003 	.word	0x20000003
 8009f44:	20000de0 	.word	0x20000de0
 8009f48:	20000de8 	.word	0x20000de8
 8009f4c:	20000090 	.word	0x20000090
 8009f50:	0801a530 	.word	0x0801a530
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 8009f54:	4adc      	ldr	r2, [pc, #880]	; (800a2c8 <PxMessagingTask+0x12a0>)
 8009f56:	2038      	movs	r0, #56	; 0x38
 8009f58:	4360      	muls	r0, r4
 8009f5a:	49dc      	ldr	r1, [pc, #880]	; (800a2cc <PxMessagingTask+0x12a4>)
 8009f5c:	1809      	adds	r1, r1, r0
 8009f5e:	1949      	adds	r1, r1, r5
 8009f60:	788b      	ldrb	r3, [r1, #2]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	7849      	ldrb	r1, [r1, #1]
 8009f66:	185b      	adds	r3, r3, r1
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	17db      	asrs	r3, r3, #31
 8009f6c:	6053      	str	r3, [r2, #4]
 8009f6e:	e78f      	b.n	8009e90 <PxMessagingTask+0xe68>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8009f70:	4ad5      	ldr	r2, [pc, #852]	; (800a2c8 <PxMessagingTask+0x12a0>)
 8009f72:	2038      	movs	r0, #56	; 0x38
 8009f74:	4360      	muls	r0, r4
 8009f76:	49d5      	ldr	r1, [pc, #852]	; (800a2cc <PxMessagingTask+0x12a4>)
 8009f78:	1809      	adds	r1, r1, r0
 8009f7a:	1949      	adds	r1, r1, r5
 8009f7c:	788b      	ldrb	r3, [r1, #2]
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	78c8      	ldrb	r0, [r1, #3]
 8009f82:	0400      	lsls	r0, r0, #16
 8009f84:	181b      	adds	r3, r3, r0
 8009f86:	7848      	ldrb	r0, [r1, #1]
 8009f88:	181b      	adds	r3, r3, r0
 8009f8a:	7909      	ldrb	r1, [r1, #4]
 8009f8c:	0609      	lsls	r1, r1, #24
 8009f8e:	185b      	adds	r3, r3, r1
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	2300      	movs	r3, #0
 8009f94:	6053      	str	r3, [r2, #4]
 8009f96:	e77b      	b.n	8009e90 <PxMessagingTask+0xe68>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 8009f98:	4acb      	ldr	r2, [pc, #812]	; (800a2c8 <PxMessagingTask+0x12a0>)
 8009f9a:	2038      	movs	r0, #56	; 0x38
 8009f9c:	4360      	muls	r0, r4
 8009f9e:	49cb      	ldr	r1, [pc, #812]	; (800a2cc <PxMessagingTask+0x12a4>)
 8009fa0:	1809      	adds	r1, r1, r0
 8009fa2:	1949      	adds	r1, r1, r5
 8009fa4:	788b      	ldrb	r3, [r1, #2]
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	7848      	ldrb	r0, [r1, #1]
 8009faa:	181b      	adds	r3, r3, r0
 8009fac:	78c8      	ldrb	r0, [r1, #3]
 8009fae:	0400      	lsls	r0, r0, #16
 8009fb0:	181b      	adds	r3, r3, r0
 8009fb2:	7909      	ldrb	r1, [r1, #4]
 8009fb4:	0609      	lsls	r1, r1, #24
 8009fb6:	185b      	adds	r3, r3, r1
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	17db      	asrs	r3, r3, #31
 8009fbc:	6053      	str	r3, [r2, #4]
 8009fbe:	e767      	b.n	8009e90 <PxMessagingTask+0xe68>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8009fc0:	4ac1      	ldr	r2, [pc, #772]	; (800a2c8 <PxMessagingTask+0x12a0>)
 8009fc2:	2038      	movs	r0, #56	; 0x38
 8009fc4:	4360      	muls	r0, r4
 8009fc6:	49c1      	ldr	r1, [pc, #772]	; (800a2cc <PxMessagingTask+0x12a4>)
 8009fc8:	1809      	adds	r1, r1, r0
 8009fca:	1949      	adds	r1, r1, r5
 8009fcc:	788b      	ldrb	r3, [r1, #2]
 8009fce:	021b      	lsls	r3, r3, #8
 8009fd0:	78c8      	ldrb	r0, [r1, #3]
 8009fd2:	0400      	lsls	r0, r0, #16
 8009fd4:	181b      	adds	r3, r3, r0
 8009fd6:	7848      	ldrb	r0, [r1, #1]
 8009fd8:	181b      	adds	r3, r3, r0
 8009fda:	7909      	ldrb	r1, [r1, #4]
 8009fdc:	0609      	lsls	r1, r1, #24
 8009fde:	185b      	adds	r3, r3, r1
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6053      	str	r3, [r2, #4]
 8009fe6:	e753      	b.n	8009e90 <PxMessagingTask+0xe68>
							responseStatus = BOS_OK;		// Initialize response
 8009fe8:	4bb9      	ldr	r3, [pc, #740]	; (800a2d0 <PxMessagingTask+0x12a8>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 8009fee:	46a8      	mov	r8, r5
 8009ff0:	4bb6      	ldr	r3, [pc, #728]	; (800a2cc <PxMessagingTask+0x12a4>)
 8009ff2:	199b      	adds	r3, r3, r6
 8009ff4:	5d5b      	ldrb	r3, [r3, r5]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d100      	bne.n	8009ffc <PxMessagingTask+0xfd4>
 8009ffa:	e116      	b.n	800a22a <PxMessagingTask+0x1202>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 8009ffc:	2b1e      	cmp	r3, #30
 8009ffe:	d900      	bls.n	800a002 <PxMessagingTask+0xfda>
 800a000:	e0fb      	b.n	800a1fa <PxMessagingTask+0x11d2>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a002:	1e5d      	subs	r5, r3, #1
 800a004:	00aa      	lsls	r2, r5, #2
 800a006:	4bb3      	ldr	r3, [pc, #716]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a008:	58d2      	ldr	r2, [r2, r3]
 800a00a:	0c13      	lsrs	r3, r2, #16
 800a00c:	2180      	movs	r1, #128	; 0x80
 800a00e:	0589      	lsls	r1, r1, #22
 800a010:	468c      	mov	ip, r1
 800a012:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a014:	2101      	movs	r1, #1
 800a016:	4441      	add	r1, r8
 800a018:	4689      	mov	r9, r1
 800a01a:	2038      	movs	r0, #56	; 0x38
 800a01c:	4360      	muls	r0, r4
 800a01e:	49ab      	ldr	r1, [pc, #684]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a020:	1809      	adds	r1, r1, r0
 800a022:	4648      	mov	r0, r9
 800a024:	5c09      	ldrb	r1, [r1, r0]
 800a026:	468a      	mov	sl, r1
 800a028:	3901      	subs	r1, #1
 800a02a:	b2c8      	uxtb	r0, r1
 800a02c:	2807      	cmp	r0, #7
 800a02e:	d80d      	bhi.n	800a04c <PxMessagingTask+0x1024>
 800a030:	b2c9      	uxtb	r1, r1
 800a032:	0089      	lsls	r1, r1, #2
 800a034:	48a8      	ldr	r0, [pc, #672]	; (800a2d8 <PxMessagingTask+0x12b0>)
 800a036:	5841      	ldr	r1, [r0, r1]
 800a038:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a03a:	0712      	lsls	r2, r2, #28
 800a03c:	d022      	beq.n	800a084 <PxMessagingTask+0x105c>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a03e:	2138      	movs	r1, #56	; 0x38
 800a040:	4361      	muls	r1, r4
 800a042:	4aa2      	ldr	r2, [pc, #648]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a044:	1852      	adds	r2, r2, r1
 800a046:	4442      	add	r2, r8
 800a048:	7892      	ldrb	r2, [r2, #2]
 800a04a:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a04c:	2338      	movs	r3, #56	; 0x38
 800a04e:	4363      	muls	r3, r4
 800a050:	4a9e      	ldr	r2, [pc, #632]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a052:	18d2      	adds	r2, r2, r3
 800a054:	4643      	mov	r3, r8
 800a056:	5cd3      	ldrb	r3, [r2, r3]
 800a058:	3b01      	subs	r3, #1
 800a05a:	0098      	lsls	r0, r3, #2
 800a05c:	499d      	ldr	r1, [pc, #628]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a05e:	5841      	ldr	r1, [r0, r1]
 800a060:	4648      	mov	r0, r9
 800a062:	5c12      	ldrb	r2, [r2, r0]
 800a064:	200f      	movs	r0, #15
 800a066:	4008      	ands	r0, r1
 800a068:	4290      	cmp	r0, r2
 800a06a:	d100      	bne.n	800a06e <PxMessagingTask+0x1046>
 800a06c:	e0c8      	b.n	800a200 <PxMessagingTask+0x11d8>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	489a      	ldr	r0, [pc, #616]	; (800a2dc <PxMessagingTask+0x12b4>)
 800a072:	4684      	mov	ip, r0
 800a074:	4462      	add	r2, ip
 800a076:	400a      	ands	r2, r1
 800a078:	4996      	ldr	r1, [pc, #600]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a07a:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a07c:	4b94      	ldr	r3, [pc, #592]	; (800a2d0 <PxMessagingTask+0x12a8>)
 800a07e:	2214      	movs	r2, #20
 800a080:	701a      	strb	r2, [r3, #0]
 800a082:	e0bd      	b.n	800a200 <PxMessagingTask+0x11d8>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a084:	2001      	movs	r0, #1
 800a086:	f007 fb35 	bl	80116f4 <malloc>
 800a08a:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a08c:	d005      	beq.n	800a09a <PxMessagingTask+0x1072>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a08e:	00ad      	lsls	r5, r5, #2
 800a090:	0400      	lsls	r0, r0, #16
 800a092:	4450      	add	r0, sl
 800a094:	4a8f      	ldr	r2, [pc, #572]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a096:	50a8      	str	r0, [r5, r2]
 800a098:	e7d1      	b.n	800a03e <PxMessagingTask+0x1016>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a09a:	4b8d      	ldr	r3, [pc, #564]	; (800a2d0 <PxMessagingTask+0x12a8>)
 800a09c:	2212      	movs	r2, #18
 800a09e:	701a      	strb	r2, [r3, #0]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a0a0:	e7d4      	b.n	800a04c <PxMessagingTask+0x1024>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a0a2:	0712      	lsls	r2, r2, #28
 800a0a4:	d008      	beq.n	800a0b8 <PxMessagingTask+0x1090>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a0a6:	2138      	movs	r1, #56	; 0x38
 800a0a8:	4361      	muls	r1, r4
 800a0aa:	4a88      	ldr	r2, [pc, #544]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a0ac:	1852      	adds	r2, r2, r1
 800a0ae:	4442      	add	r2, r8
 800a0b0:	7892      	ldrb	r2, [r2, #2]
 800a0b2:	b252      	sxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	e7c9      	b.n	800a04c <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f007 fb1b 	bl	80116f4 <malloc>
 800a0be:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a0c0:	d100      	bne.n	800a0c4 <PxMessagingTask+0x109c>
 800a0c2:	e259      	b.n	800a578 <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a0c4:	00ad      	lsls	r5, r5, #2
 800a0c6:	0400      	lsls	r0, r0, #16
 800a0c8:	3002      	adds	r0, #2
 800a0ca:	4a82      	ldr	r2, [pc, #520]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a0cc:	50a8      	str	r0, [r5, r2]
 800a0ce:	e7ea      	b.n	800a0a6 <PxMessagingTask+0x107e>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a0d0:	0712      	lsls	r2, r2, #28
 800a0d2:	d00b      	beq.n	800a0ec <PxMessagingTask+0x10c4>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a0d4:	2138      	movs	r1, #56	; 0x38
 800a0d6:	4361      	muls	r1, r4
 800a0d8:	4a7c      	ldr	r2, [pc, #496]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a0da:	1852      	adds	r2, r2, r1
 800a0dc:	4442      	add	r2, r8
 800a0de:	78d1      	ldrb	r1, [r2, #3]
 800a0e0:	0209      	lsls	r1, r1, #8
 800a0e2:	7892      	ldrb	r2, [r2, #2]
 800a0e4:	1852      	adds	r2, r2, r1
 800a0e6:	b292      	uxth	r2, r2
 800a0e8:	801a      	strh	r2, [r3, #0]
 800a0ea:	e7af      	b.n	800a04c <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a0ec:	2002      	movs	r0, #2
 800a0ee:	f007 fb01 	bl	80116f4 <malloc>
 800a0f2:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a0f4:	d100      	bne.n	800a0f8 <PxMessagingTask+0x10d0>
 800a0f6:	e23f      	b.n	800a578 <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a0f8:	00ad      	lsls	r5, r5, #2
 800a0fa:	0400      	lsls	r0, r0, #16
 800a0fc:	3003      	adds	r0, #3
 800a0fe:	4a75      	ldr	r2, [pc, #468]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a100:	50a8      	str	r0, [r5, r2]
 800a102:	e7e7      	b.n	800a0d4 <PxMessagingTask+0x10ac>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a104:	0712      	lsls	r2, r2, #28
 800a106:	d00b      	beq.n	800a120 <PxMessagingTask+0x10f8>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800a108:	2138      	movs	r1, #56	; 0x38
 800a10a:	4361      	muls	r1, r4
 800a10c:	4a6f      	ldr	r2, [pc, #444]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a10e:	1852      	adds	r2, r2, r1
 800a110:	4442      	add	r2, r8
 800a112:	78d1      	ldrb	r1, [r2, #3]
 800a114:	0209      	lsls	r1, r1, #8
 800a116:	7892      	ldrb	r2, [r2, #2]
 800a118:	1852      	adds	r2, r2, r1
 800a11a:	b212      	sxth	r2, r2
 800a11c:	801a      	strh	r2, [r3, #0]
 800a11e:	e795      	b.n	800a04c <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800a120:	2002      	movs	r0, #2
 800a122:	f007 fae7 	bl	80116f4 <malloc>
 800a126:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a128:	d100      	bne.n	800a12c <PxMessagingTask+0x1104>
 800a12a:	e225      	b.n	800a578 <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a12c:	00ad      	lsls	r5, r5, #2
 800a12e:	0400      	lsls	r0, r0, #16
 800a130:	3004      	adds	r0, #4
 800a132:	4a68      	ldr	r2, [pc, #416]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a134:	50a8      	str	r0, [r5, r2]
 800a136:	e7e7      	b.n	800a108 <PxMessagingTask+0x10e0>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a138:	0712      	lsls	r2, r2, #28
 800a13a:	d010      	beq.n	800a15e <PxMessagingTask+0x1136>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800a13c:	2238      	movs	r2, #56	; 0x38
 800a13e:	4362      	muls	r2, r4
 800a140:	4962      	ldr	r1, [pc, #392]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a142:	1889      	adds	r1, r1, r2
 800a144:	4441      	add	r1, r8
 800a146:	78ca      	ldrb	r2, [r1, #3]
 800a148:	0212      	lsls	r2, r2, #8
 800a14a:	7908      	ldrb	r0, [r1, #4]
 800a14c:	0400      	lsls	r0, r0, #16
 800a14e:	1812      	adds	r2, r2, r0
 800a150:	7888      	ldrb	r0, [r1, #2]
 800a152:	1812      	adds	r2, r2, r0
 800a154:	7949      	ldrb	r1, [r1, #5]
 800a156:	0609      	lsls	r1, r1, #24
 800a158:	1852      	adds	r2, r2, r1
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	e776      	b.n	800a04c <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800a15e:	2004      	movs	r0, #4
 800a160:	f007 fac8 	bl	80116f4 <malloc>
 800a164:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a166:	d100      	bne.n	800a16a <PxMessagingTask+0x1142>
 800a168:	e206      	b.n	800a578 <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a16a:	00ad      	lsls	r5, r5, #2
 800a16c:	0400      	lsls	r0, r0, #16
 800a16e:	3005      	adds	r0, #5
 800a170:	4a58      	ldr	r2, [pc, #352]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a172:	50a8      	str	r0, [r5, r2]
 800a174:	e7e2      	b.n	800a13c <PxMessagingTask+0x1114>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a176:	0712      	lsls	r2, r2, #28
 800a178:	d010      	beq.n	800a19c <PxMessagingTask+0x1174>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800a17a:	2238      	movs	r2, #56	; 0x38
 800a17c:	4362      	muls	r2, r4
 800a17e:	4953      	ldr	r1, [pc, #332]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a180:	1889      	adds	r1, r1, r2
 800a182:	4441      	add	r1, r8
 800a184:	78ca      	ldrb	r2, [r1, #3]
 800a186:	0212      	lsls	r2, r2, #8
 800a188:	7888      	ldrb	r0, [r1, #2]
 800a18a:	1812      	adds	r2, r2, r0
 800a18c:	7908      	ldrb	r0, [r1, #4]
 800a18e:	0400      	lsls	r0, r0, #16
 800a190:	1812      	adds	r2, r2, r0
 800a192:	7949      	ldrb	r1, [r1, #5]
 800a194:	0609      	lsls	r1, r1, #24
 800a196:	1852      	adds	r2, r2, r1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	e757      	b.n	800a04c <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800a19c:	2004      	movs	r0, #4
 800a19e:	f007 faa9 	bl	80116f4 <malloc>
 800a1a2:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a1a4:	d100      	bne.n	800a1a8 <PxMessagingTask+0x1180>
 800a1a6:	e1e7      	b.n	800a578 <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a1a8:	00ad      	lsls	r5, r5, #2
 800a1aa:	0400      	lsls	r0, r0, #16
 800a1ac:	3006      	adds	r0, #6
 800a1ae:	4a49      	ldr	r2, [pc, #292]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a1b0:	50a8      	str	r0, [r5, r2]
 800a1b2:	e7e2      	b.n	800a17a <PxMessagingTask+0x1152>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a1b4:	0712      	lsls	r2, r2, #28
 800a1b6:	d014      	beq.n	800a1e2 <PxMessagingTask+0x11ba>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800a1b8:	2238      	movs	r2, #56	; 0x38
 800a1ba:	4362      	muls	r2, r4
 800a1bc:	4943      	ldr	r1, [pc, #268]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a1be:	1889      	adds	r1, r1, r2
 800a1c0:	4441      	add	r1, r8
 800a1c2:	78ca      	ldrb	r2, [r1, #3]
 800a1c4:	0212      	lsls	r2, r2, #8
 800a1c6:	7908      	ldrb	r0, [r1, #4]
 800a1c8:	0400      	lsls	r0, r0, #16
 800a1ca:	1812      	adds	r2, r2, r0
 800a1cc:	7888      	ldrb	r0, [r1, #2]
 800a1ce:	1812      	adds	r2, r2, r0
 800a1d0:	7949      	ldrb	r1, [r1, #5]
 800a1d2:	0609      	lsls	r1, r1, #24
 800a1d4:	1852      	adds	r2, r2, r1
 800a1d6:	493c      	ldr	r1, [pc, #240]	; (800a2c8 <PxMessagingTask+0x12a0>)
 800a1d8:	600a      	str	r2, [r1, #0]
 800a1da:	2000      	movs	r0, #0
 800a1dc:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	e734      	b.n	800a04c <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800a1e2:	2004      	movs	r0, #4
 800a1e4:	f007 fa86 	bl	80116f4 <malloc>
 800a1e8:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a1ea:	d100      	bne.n	800a1ee <PxMessagingTask+0x11c6>
 800a1ec:	e1c4      	b.n	800a578 <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a1ee:	00ad      	lsls	r5, r5, #2
 800a1f0:	0400      	lsls	r0, r0, #16
 800a1f2:	3007      	adds	r0, #7
 800a1f4:	4a37      	ldr	r2, [pc, #220]	; (800a2d4 <PxMessagingTask+0x12ac>)
 800a1f6:	50a8      	str	r0, [r5, r2]
 800a1f8:	e7de      	b.n	800a1b8 <PxMessagingTask+0x1190>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800a1fa:	4b35      	ldr	r3, [pc, #212]	; (800a2d0 <PxMessagingTask+0x12a8>)
 800a1fc:	2213      	movs	r2, #19
 800a1fe:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a200:	4b37      	ldr	r3, [pc, #220]	; (800a2e0 <PxMessagingTask+0x12b8>)
 800a202:	799b      	ldrb	r3, [r3, #6]
 800a204:	2240      	movs	r2, #64	; 0x40
 800a206:	4393      	bics	r3, r2
 800a208:	2200      	movs	r2, #0
 800a20a:	4690      	mov	r8, r2
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d001      	beq.n	800a214 <PxMessagingTask+0x11ec>
 800a210:	f7fe ff3f 	bl	8009092 <PxMessagingTask+0x6a>
								messageParams[0] = responseStatus;
 800a214:	4b2e      	ldr	r3, [pc, #184]	; (800a2d0 <PxMessagingTask+0x12a8>)
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	4b32      	ldr	r3, [pc, #200]	; (800a2e4 <PxMessagingTask+0x12bc>)
 800a21a:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a21c:	2201      	movs	r2, #1
 800a21e:	2121      	movs	r1, #33	; 0x21
 800a220:	9806      	ldr	r0, [sp, #24]
 800a222:	f7fe fc25 	bl	8008a70 <SendMessageToModule>
 800a226:	f7fe ff34 	bl	8009092 <PxMessagingTask+0x6a>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a22a:	2238      	movs	r2, #56	; 0x38
 800a22c:	4362      	muls	r2, r4
 800a22e:	4b27      	ldr	r3, [pc, #156]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a230:	189b      	adds	r3, r3, r2
 800a232:	195d      	adds	r5, r3, r5
 800a234:	78ab      	ldrb	r3, [r5, #2]
 800a236:	061b      	lsls	r3, r3, #24
 800a238:	78ea      	ldrb	r2, [r5, #3]
 800a23a:	0412      	lsls	r2, r2, #16
 800a23c:	189b      	adds	r3, r3, r2
 800a23e:	796a      	ldrb	r2, [r5, #5]
 800a240:	189b      	adds	r3, r3, r2
 800a242:	792d      	ldrb	r5, [r5, #4]
 800a244:	022d      	lsls	r5, r5, #8
 800a246:	195d      	adds	r5, r3, r5
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800a248:	23e0      	movs	r3, #224	; 0xe0
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	18ea      	adds	r2, r5, r3
 800a24e:	2380      	movs	r3, #128	; 0x80
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	429a      	cmp	r2, r3
 800a254:	d300      	bcc.n	800a258 <PxMessagingTask+0x1230>
 800a256:	e080      	b.n	800a35a <PxMessagingTask+0x1332>
									switch (cMessage[port-1][1+shift])															// Requested format
 800a258:	2238      	movs	r2, #56	; 0x38
 800a25a:	4362      	muls	r2, r4
 800a25c:	4b1b      	ldr	r3, [pc, #108]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a25e:	189b      	adds	r3, r3, r2
 800a260:	4443      	add	r3, r8
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	3b01      	subs	r3, #1
 800a266:	b2da      	uxtb	r2, r3
 800a268:	2a07      	cmp	r2, #7
 800a26a:	d8c9      	bhi.n	800a200 <PxMessagingTask+0x11d8>
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <PxMessagingTask+0x12c0>)
 800a272:	58d3      	ldr	r3, [r2, r3]
 800a274:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800a276:	2238      	movs	r2, #56	; 0x38
 800a278:	4362      	muls	r2, r4
 800a27a:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a27c:	189b      	adds	r3, r3, r2
 800a27e:	4443      	add	r3, r8
 800a280:	799b      	ldrb	r3, [r3, #6]
 800a282:	702b      	strb	r3, [r5, #0]
 800a284:	e7bc      	b.n	800a200 <PxMessagingTask+0x11d8>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800a286:	2238      	movs	r2, #56	; 0x38
 800a288:	4362      	muls	r2, r4
 800a28a:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a28c:	189b      	adds	r3, r3, r2
 800a28e:	4443      	add	r3, r8
 800a290:	799b      	ldrb	r3, [r3, #6]
 800a292:	b25b      	sxtb	r3, r3
 800a294:	702b      	strb	r3, [r5, #0]
 800a296:	e7b3      	b.n	800a200 <PxMessagingTask+0x11d8>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800a298:	2238      	movs	r2, #56	; 0x38
 800a29a:	4362      	muls	r2, r4
 800a29c:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a29e:	189b      	adds	r3, r3, r2
 800a2a0:	4443      	add	r3, r8
 800a2a2:	79da      	ldrb	r2, [r3, #7]
 800a2a4:	0212      	lsls	r2, r2, #8
 800a2a6:	799b      	ldrb	r3, [r3, #6]
 800a2a8:	189b      	adds	r3, r3, r2
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	802b      	strh	r3, [r5, #0]
 800a2ae:	e7a7      	b.n	800a200 <PxMessagingTask+0x11d8>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800a2b0:	2238      	movs	r2, #56	; 0x38
 800a2b2:	4362      	muls	r2, r4
 800a2b4:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <PxMessagingTask+0x12a4>)
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	4443      	add	r3, r8
 800a2ba:	79da      	ldrb	r2, [r3, #7]
 800a2bc:	0212      	lsls	r2, r2, #8
 800a2be:	799b      	ldrb	r3, [r3, #6]
 800a2c0:	189b      	adds	r3, r3, r2
 800a2c2:	b21b      	sxth	r3, r3
 800a2c4:	802b      	strh	r3, [r5, #0]
 800a2c6:	e79b      	b.n	800a200 <PxMessagingTask+0x11d8>
 800a2c8:	20000de0 	.word	0x20000de0
 800a2cc:	20000b14 	.word	0x20000b14
 800a2d0:	20000de8 	.word	0x20000de8
 800a2d4:	20006588 	.word	0x20006588
 800a2d8:	0801a554 	.word	0x0801a554
 800a2dc:	0000fff0 	.word	0x0000fff0
 800a2e0:	20006600 	.word	0x20006600
 800a2e4:	20000d14 	.word	0x20000d14
 800a2e8:	0801a574 	.word	0x0801a574
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800a2ec:	2338      	movs	r3, #56	; 0x38
 800a2ee:	4363      	muls	r3, r4
 800a2f0:	4aad      	ldr	r2, [pc, #692]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a2f2:	18d2      	adds	r2, r2, r3
 800a2f4:	4442      	add	r2, r8
 800a2f6:	79d3      	ldrb	r3, [r2, #7]
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	7a11      	ldrb	r1, [r2, #8]
 800a2fc:	0409      	lsls	r1, r1, #16
 800a2fe:	185b      	adds	r3, r3, r1
 800a300:	7991      	ldrb	r1, [r2, #6]
 800a302:	185b      	adds	r3, r3, r1
 800a304:	7a52      	ldrb	r2, [r2, #9]
 800a306:	0612      	lsls	r2, r2, #24
 800a308:	189b      	adds	r3, r3, r2
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	e778      	b.n	800a200 <PxMessagingTask+0x11d8>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800a30e:	2338      	movs	r3, #56	; 0x38
 800a310:	4363      	muls	r3, r4
 800a312:	4aa5      	ldr	r2, [pc, #660]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a314:	18d2      	adds	r2, r2, r3
 800a316:	4442      	add	r2, r8
 800a318:	79d3      	ldrb	r3, [r2, #7]
 800a31a:	021b      	lsls	r3, r3, #8
 800a31c:	7991      	ldrb	r1, [r2, #6]
 800a31e:	185b      	adds	r3, r3, r1
 800a320:	7a11      	ldrb	r1, [r2, #8]
 800a322:	0409      	lsls	r1, r1, #16
 800a324:	185b      	adds	r3, r3, r1
 800a326:	7a52      	ldrb	r2, [r2, #9]
 800a328:	0612      	lsls	r2, r2, #24
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	e767      	b.n	800a200 <PxMessagingTask+0x11d8>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a330:	2338      	movs	r3, #56	; 0x38
 800a332:	4363      	muls	r3, r4
 800a334:	4a9c      	ldr	r2, [pc, #624]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a336:	18d2      	adds	r2, r2, r3
 800a338:	4442      	add	r2, r8
 800a33a:	79d3      	ldrb	r3, [r2, #7]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	7a11      	ldrb	r1, [r2, #8]
 800a340:	0409      	lsls	r1, r1, #16
 800a342:	185b      	adds	r3, r3, r1
 800a344:	7991      	ldrb	r1, [r2, #6]
 800a346:	185b      	adds	r3, r3, r1
 800a348:	7a52      	ldrb	r2, [r2, #9]
 800a34a:	0612      	lsls	r2, r2, #24
 800a34c:	189b      	adds	r3, r3, r2
 800a34e:	4a97      	ldr	r2, [pc, #604]	; (800a5ac <PxMessagingTask+0x1584>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	2100      	movs	r1, #0
 800a354:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	e752      	b.n	800a200 <PxMessagingTask+0x11d8>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800a35a:	2280      	movs	r2, #128	; 0x80
 800a35c:	0292      	lsls	r2, r2, #10
 800a35e:	23f8      	movs	r3, #248	; 0xf8
 800a360:	061b      	lsls	r3, r3, #24
 800a362:	18eb      	adds	r3, r5, r3
 800a364:	4293      	cmp	r3, r2
 800a366:	d303      	bcc.n	800a370 <PxMessagingTask+0x1348>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a368:	4b91      	ldr	r3, [pc, #580]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a36a:	2215      	movs	r2, #21
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	e747      	b.n	800a200 <PxMessagingTask+0x11d8>
									HAL_FLASH_Unlock();
 800a370:	f005 f9d4 	bl	800f71c <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800a374:	464b      	mov	r3, r9
 800a376:	2b22      	cmp	r3, #34	; 0x22
 800a378:	d012      	beq.n	800a3a0 <PxMessagingTask+0x1378>
									if (responseStatus == BOS_OK)
 800a37a:	4b8d      	ldr	r3, [pc, #564]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d129      	bne.n	800a3d6 <PxMessagingTask+0x13ae>
										switch (cMessage[port-1][1+shift])															// Requested format
 800a382:	2238      	movs	r2, #56	; 0x38
 800a384:	4362      	muls	r2, r4
 800a386:	4b88      	ldr	r3, [pc, #544]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a388:	189b      	adds	r3, r3, r2
 800a38a:	4443      	add	r3, r8
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	3b01      	subs	r3, #1
 800a390:	b2da      	uxtb	r2, r3
 800a392:	2a07      	cmp	r2, #7
 800a394:	d81f      	bhi.n	800a3d6 <PxMessagingTask+0x13ae>
 800a396:	b2db      	uxtb	r3, r3
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4a86      	ldr	r2, [pc, #536]	; (800a5b4 <PxMessagingTask+0x158c>)
 800a39c:	58d3      	ldr	r3, [r2, r3]
 800a39e:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress = temp32;
 800a3a4:	9512      	str	r5, [sp, #72]	; 0x48
										erase.NbPages = 1;
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	9313      	str	r3, [sp, #76]	; 0x4c
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800a3aa:	a910      	add	r1, sp, #64	; 0x40
 800a3ac:	a811      	add	r0, sp, #68	; 0x44
 800a3ae:	f005 fa8b 	bl	800f8c8 <HAL_FLASHEx_Erase>
 800a3b2:	900b      	str	r0, [sp, #44]	; 0x2c
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d102      	bne.n	800a3be <PxMessagingTask+0x1396>
 800a3b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	d0dd      	beq.n	800a37a <PxMessagingTask+0x1352>
 800a3be:	4b7c      	ldr	r3, [pc, #496]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a3c0:	2216      	movs	r2, #22
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e7d9      	b.n	800a37a <PxMessagingTask+0x1352>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a3c6:	882b      	ldrh	r3, [r5, #0]
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	4a7b      	ldr	r2, [pc, #492]	; (800a5b8 <PxMessagingTask+0x1590>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00c      	beq.n	800a3ea <PxMessagingTask+0x13c2>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a3d0:	4b77      	ldr	r3, [pc, #476]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a3d2:	2216      	movs	r2, #22
 800a3d4:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a3d6:	f005 f9b5 	bl	800f744 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800a3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d100      	bne.n	800a3e2 <PxMessagingTask+0x13ba>
 800a3e0:	e70e      	b.n	800a200 <PxMessagingTask+0x11d8>
 800a3e2:	4b73      	ldr	r3, [pc, #460]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a3e4:	2216      	movs	r2, #22
 800a3e6:	701a      	strb	r2, [r3, #0]
 800a3e8:	e70a      	b.n	800a200 <PxMessagingTask+0x11d8>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a3ea:	2238      	movs	r2, #56	; 0x38
 800a3ec:	4362      	muls	r2, r4
 800a3ee:	4b6e      	ldr	r3, [pc, #440]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a3f0:	189b      	adds	r3, r3, r2
 800a3f2:	4443      	add	r3, r8
 800a3f4:	799a      	ldrb	r2, [r3, #6]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	496c      	ldr	r1, [pc, #432]	; (800a5ac <PxMessagingTask+0x1584>)
 800a3fa:	600a      	str	r2, [r1, #0]
 800a3fc:	604b      	str	r3, [r1, #4]
 800a3fe:	0029      	movs	r1, r5
 800a400:	2001      	movs	r0, #1
 800a402:	f005 f9d7 	bl	800f7b4 <HAL_FLASH_Program>
 800a406:	900b      	str	r0, [sp, #44]	; 0x2c
 800a408:	e7e5      	b.n	800a3d6 <PxMessagingTask+0x13ae>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a40a:	882b      	ldrh	r3, [r5, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	4a6a      	ldr	r2, [pc, #424]	; (800a5b8 <PxMessagingTask+0x1590>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d003      	beq.n	800a41c <PxMessagingTask+0x13f4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a414:	4b66      	ldr	r3, [pc, #408]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a416:	2216      	movs	r2, #22
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	e7dc      	b.n	800a3d6 <PxMessagingTask+0x13ae>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800a41c:	2238      	movs	r2, #56	; 0x38
 800a41e:	4362      	muls	r2, r4
 800a420:	4b61      	ldr	r3, [pc, #388]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a422:	189b      	adds	r3, r3, r2
 800a424:	4443      	add	r3, r8
 800a426:	79da      	ldrb	r2, [r3, #7]
 800a428:	0212      	lsls	r2, r2, #8
 800a42a:	799b      	ldrb	r3, [r3, #6]
 800a42c:	18d2      	adds	r2, r2, r3
 800a42e:	2300      	movs	r3, #0
 800a430:	495e      	ldr	r1, [pc, #376]	; (800a5ac <PxMessagingTask+0x1584>)
 800a432:	600a      	str	r2, [r1, #0]
 800a434:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a436:	0029      	movs	r1, r5
 800a438:	2001      	movs	r0, #1
 800a43a:	f005 f9bb 	bl	800f7b4 <HAL_FLASH_Program>
 800a43e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a440:	e7c9      	b.n	800a3d6 <PxMessagingTask+0x13ae>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a442:	682b      	ldr	r3, [r5, #0]
 800a444:	3301      	adds	r3, #1
 800a446:	d003      	beq.n	800a450 <PxMessagingTask+0x1428>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a448:	4b59      	ldr	r3, [pc, #356]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a44a:	2216      	movs	r2, #22
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	e7c2      	b.n	800a3d6 <PxMessagingTask+0x13ae>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800a450:	2238      	movs	r2, #56	; 0x38
 800a452:	4362      	muls	r2, r4
 800a454:	4b54      	ldr	r3, [pc, #336]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a456:	189b      	adds	r3, r3, r2
 800a458:	4443      	add	r3, r8
 800a45a:	79da      	ldrb	r2, [r3, #7]
 800a45c:	0212      	lsls	r2, r2, #8
 800a45e:	7a19      	ldrb	r1, [r3, #8]
 800a460:	0409      	lsls	r1, r1, #16
 800a462:	1852      	adds	r2, r2, r1
 800a464:	7999      	ldrb	r1, [r3, #6]
 800a466:	1852      	adds	r2, r2, r1
 800a468:	7a5b      	ldrb	r3, [r3, #9]
 800a46a:	061b      	lsls	r3, r3, #24
 800a46c:	18d2      	adds	r2, r2, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	494e      	ldr	r1, [pc, #312]	; (800a5ac <PxMessagingTask+0x1584>)
 800a472:	600a      	str	r2, [r1, #0]
 800a474:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800a476:	0029      	movs	r1, r5
 800a478:	2002      	movs	r0, #2
 800a47a:	f005 f99b 	bl	800f7b4 <HAL_FLASH_Program>
 800a47e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a480:	e7a9      	b.n	800a3d6 <PxMessagingTask+0x13ae>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	3301      	adds	r3, #1
 800a486:	d003      	beq.n	800a490 <PxMessagingTask+0x1468>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a488:	4b49      	ldr	r3, [pc, #292]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a48a:	2216      	movs	r2, #22
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e7a2      	b.n	800a3d6 <PxMessagingTask+0x13ae>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a490:	2238      	movs	r2, #56	; 0x38
 800a492:	4362      	muls	r2, r4
 800a494:	4b44      	ldr	r3, [pc, #272]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a496:	189b      	adds	r3, r3, r2
 800a498:	4443      	add	r3, r8
 800a49a:	79da      	ldrb	r2, [r3, #7]
 800a49c:	0212      	lsls	r2, r2, #8
 800a49e:	7a19      	ldrb	r1, [r3, #8]
 800a4a0:	0409      	lsls	r1, r1, #16
 800a4a2:	1852      	adds	r2, r2, r1
 800a4a4:	7999      	ldrb	r1, [r3, #6]
 800a4a6:	1852      	adds	r2, r2, r1
 800a4a8:	7a5b      	ldrb	r3, [r3, #9]
 800a4aa:	061b      	lsls	r3, r3, #24
 800a4ac:	18d2      	adds	r2, r2, r3
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	493e      	ldr	r1, [pc, #248]	; (800a5ac <PxMessagingTask+0x1584>)
 800a4b2:	600a      	str	r2, [r1, #0]
 800a4b4:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800a4b6:	0029      	movs	r1, r5
 800a4b8:	2003      	movs	r0, #3
 800a4ba:	f005 f97b 	bl	800f7b4 <HAL_FLASH_Program>
 800a4be:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4c0:	e789      	b.n	800a3d6 <PxMessagingTask+0x13ae>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800a4c2:	4b39      	ldr	r3, [pc, #228]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a4c4:	199b      	adds	r3, r3, r6
 800a4c6:	5d5a      	ldrb	r2, [r3, r5]
 800a4c8:	4b39      	ldr	r3, [pc, #228]	; (800a5b0 <PxMessagingTask+0x1588>)
 800a4ca:	701a      	strb	r2, [r3, #0]
							break;	
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4698      	mov	r8, r3
 800a4d0:	f7fe fddf 	bl	8009092 <PxMessagingTask+0x6a>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	3a01      	subs	r2, #1
 800a4d8:	b292      	uxth	r2, r2
 800a4da:	1c69      	adds	r1, r5, #1
 800a4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4de:	469c      	mov	ip, r3
 800a4e0:	4461      	add	r1, ip
 800a4e2:	4b31      	ldr	r3, [pc, #196]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a4e4:	18c9      	adds	r1, r1, r3
 800a4e6:	199b      	adds	r3, r3, r6
 800a4e8:	5d58      	ldrb	r0, [r3, r5]
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	f002 f8b9 	bl	800c664 <writePxMutex>
							break;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4698      	mov	r8, r3
 800a4f6:	f7fe fdcc 	bl	8009092 <PxMessagingTask+0x6a>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800a4fa:	9500      	str	r5, [sp, #0]
 800a4fc:	4653      	mov	r3, sl
 800a4fe:	9a06      	ldr	r2, [sp, #24]
 800a500:	9908      	ldr	r1, [sp, #32]
 800a502:	4648      	mov	r0, r9
 800a504:	f7fe fd8e 	bl	8009024 <User_MessagingParser>
 800a508:	4680      	mov	r8, r0
							if (result == BOS_ERR_UnknownMessage) {
 800a50a:	2801      	cmp	r0, #1
 800a50c:	d001      	beq.n	800a512 <PxMessagingTask+0x14ea>
 800a50e:	f7fe fdc0 	bl	8009092 <PxMessagingTask+0x6a>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800a512:	9500      	str	r5, [sp, #0]
 800a514:	4653      	mov	r3, sl
 800a516:	9a06      	ldr	r2, [sp, #24]
 800a518:	9908      	ldr	r1, [sp, #32]
 800a51a:	4648      	mov	r0, r9
 800a51c:	f000 f9e2 	bl	800a8e4 <Module_MessagingTask>
 800a520:	4680      	mov	r8, r0
 800a522:	f7fe fdb1 	bl	8009088 <PxMessagingTask+0x60>
										messageParams[0] = modParam[temp-1].paramFormat;
 800a526:	2300      	movs	r3, #0
 800a528:	4698      	mov	r8, r3
 800a52a:	f7fe fdad 	bl	8009088 <PxMessagingTask+0x60>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a52e:	2300      	movs	r3, #0
 800a530:	4698      	mov	r8, r3
 800a532:	f7fe fda9 	bl	8009088 <PxMessagingTask+0x60>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	9806      	ldr	r0, [sp, #24]
 800a53c:	f7fe fa98 	bl	8008a70 <SendMessageToModule>
			result = BOS_OK;			
 800a540:	2300      	movs	r3, #0
 800a542:	4698      	mov	r8, r3
 800a544:	f7fe fda5 	bl	8009092 <PxMessagingTask+0x6a>
 800a548:	2300      	movs	r3, #0
 800a54a:	4698      	mov	r8, r3
 800a54c:	f7fe fda1 	bl	8009092 <PxMessagingTask+0x6a>
									}
 800a550:	2300      	movs	r3, #0
 800a552:	4698      	mov	r8, r3
 800a554:	f7fe fd9d 	bl	8009092 <PxMessagingTask+0x6a>
 800a558:	2300      	movs	r3, #0
 800a55a:	4698      	mov	r8, r3
 800a55c:	f7fe fd99 	bl	8009092 <PxMessagingTask+0x6a>
 800a560:	4661      	mov	r1, ip
				shift += 4;
 800a562:	9d05      	ldr	r5, [sp, #20]
 800a564:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800a566:	1b48      	subs	r0, r1, r5
 800a568:	b2c3      	uxtb	r3, r0
 800a56a:	4698      	mov	r8, r3
				if (result == BOS_OK)
 800a56c:	f7fe fe53 	bl	8009216 <PxMessagingTask+0x1ee>
					result = BOS_ERR_WrongID;
 800a570:	2366      	movs	r3, #102	; 0x66
 800a572:	4698      	mov	r8, r3
		if (result == BOS_ERR_UnknownMessage) {
 800a574:	f7fe fd8d 	bl	8009092 <PxMessagingTask+0x6a>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a578:	2338      	movs	r3, #56	; 0x38
 800a57a:	4363      	muls	r3, r4
 800a57c:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <PxMessagingTask+0x1580>)
 800a57e:	18d2      	adds	r2, r2, r3
 800a580:	4643      	mov	r3, r8
 800a582:	5cd3      	ldrb	r3, [r2, r3]
 800a584:	3b01      	subs	r3, #1
 800a586:	0098      	lsls	r0, r3, #2
 800a588:	490c      	ldr	r1, [pc, #48]	; (800a5bc <PxMessagingTask+0x1594>)
 800a58a:	5841      	ldr	r1, [r0, r1]
 800a58c:	4648      	mov	r0, r9
 800a58e:	5c12      	ldrb	r2, [r2, r0]
 800a590:	e56d      	b.n	800a06e <PxMessagingTask+0x1046>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800a592:	4553      	cmp	r3, sl
 800a594:	d101      	bne.n	800a59a <PxMessagingTask+0x1572>
 800a596:	f7fe fe33 	bl	8009200 <PxMessagingTask+0x1d8>
 800a59a:	464b      	mov	r3, r9
 800a59c:	2b10      	cmp	r3, #16
 800a59e:	d001      	beq.n	800a5a4 <PxMessagingTask+0x157c>
 800a5a0:	f7fe fdc1 	bl	8009126 <PxMessagingTask+0xfe>
 800a5a4:	f7fe fe2c 	bl	8009200 <PxMessagingTask+0x1d8>
 800a5a8:	20000b14 	.word	0x20000b14
 800a5ac:	20000de0 	.word	0x20000de0
 800a5b0:	20000de8 	.word	0x20000de8
 800a5b4:	0801a594 	.word	0x0801a594
 800a5b8:	0000ffff 	.word	0x0000ffff
 800a5bc:	20006588 	.word	0x20006588

0800a5c0 <SystemClock_Config>:
	|												 Private Functions	 														|
   ----------------------------------------------------------------------- 
*/

void SystemClock_Config(void)
{
 800a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c2:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a5c4:	2401      	movs	r4, #1
 800a5c6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a5c8:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a5ca:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a5d0:	2702      	movs	r7, #2
 800a5d2:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a5d4:	2680      	movs	r6, #128	; 0x80
 800a5d6:	0276      	lsls	r6, r6, #9
 800a5d8:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	035b      	lsls	r3, r3, #13
 800a5de:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a5e4:	a80d      	add	r0, sp, #52	; 0x34
 800a5e6:	f005 fad7 	bl	800fb98 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800a5ea:	2307      	movs	r3, #7
 800a5ec:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a5ee:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a5f0:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a5f2:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	a809      	add	r0, sp, #36	; 0x24
 800a5f8:	f005 fd92 	bl	8010120 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800a5fc:	4b1a      	ldr	r3, [pc, #104]	; (800a668 <SystemClock_Config+0xa8>)
 800a5fe:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a600:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a602:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a604:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a606:	a802      	add	r0, sp, #8
 800a608:	f005 ff3a 	bl	8010480 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800a60c:	4d17      	ldr	r5, [pc, #92]	; (800a66c <SystemClock_Config+0xac>)
 800a60e:	69ea      	ldr	r2, [r5, #28]
 800a610:	2180      	movs	r1, #128	; 0x80
 800a612:	0549      	lsls	r1, r1, #21
 800a614:	430a      	orrs	r2, r1
 800a616:	61ea      	str	r2, [r5, #28]
 800a618:	69eb      	ldr	r3, [r5, #28]
 800a61a:	400b      	ands	r3, r1
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800a620:	f005 fab0 	bl	800fb84 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a624:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a626:	23c0      	movs	r3, #192	; 0xc0
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a62c:	a802      	add	r0, sp, #8
 800a62e:	f005 ff27 	bl	8010480 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a632:	f005 ff01 	bl	8010438 <HAL_RCC_GetHCLKFreq>
 800a636:	21fa      	movs	r1, #250	; 0xfa
 800a638:	0089      	lsls	r1, r1, #2
 800a63a:	f7f5 fd89 	bl	8000150 <__udivsi3>
 800a63e:	f004 fa15 	bl	800ea6c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a642:	2004      	movs	r0, #4
 800a644:	f004 fa2e 	bl	800eaa4 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800a648:	69ab      	ldr	r3, [r5, #24]
 800a64a:	4323      	orrs	r3, r4
 800a64c:	61ab      	str	r3, [r5, #24]
 800a64e:	69ab      	ldr	r3, [r5, #24]
 800a650:	401c      	ands	r4, r3
 800a652:	9401      	str	r4, [sp, #4]
 800a654:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a656:	2001      	movs	r0, #1
 800a658:	2200      	movs	r2, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	4240      	negs	r0, r0
 800a65e:	f004 f9bf 	bl	800e9e0 <HAL_NVIC_SetPriority>
	
}
 800a662:	b01b      	add	sp, #108	; 0x6c
 800a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	00040003 	.word	0x00040003
 800a66c:	40021000 	.word	0x40021000

0800a670 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800a670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a672:	46de      	mov	lr, fp
 800a674:	4657      	mov	r7, sl
 800a676:	464e      	mov	r6, r9
 800a678:	4645      	mov	r5, r8
 800a67a:	b5e0      	push	{r5, r6, r7, lr}
 800a67c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800a67e:	2300      	movs	r3, #0
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	2211      	movs	r2, #17
 800a684:	2100      	movs	r1, #0
 800a686:	a803      	add	r0, sp, #12
 800a688:	f007 fa73 	bl	8011b72 <memset>
	
	HAL_FLASH_Unlock();
 800a68c:	f005 f846 	bl	800f71c <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800a690:	487d      	ldr	r0, [pc, #500]	; (800a888 <SaveToRO+0x218>)
 800a692:	f005 f907 	bl	800f8a4 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a696:	487d      	ldr	r0, [pc, #500]	; (800a88c <SaveToRO+0x21c>)
 800a698:	f005 f85e 	bl	800f758 <FLASH_WaitForLastOperation>
 800a69c:	9000      	str	r0, [sp, #0]
 800a69e:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d112      	bne.n	800a6ca <SaveToRO+0x5a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a6a4:	4a7a      	ldr	r2, [pc, #488]	; (800a890 <SaveToRO+0x220>)
 800a6a6:	6913      	ldr	r3, [r2, #16]
 800a6a8:	2102      	movs	r1, #2
 800a6aa:	438b      	bics	r3, r1
 800a6ac:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800a6ae:	4b79      	ldr	r3, [pc, #484]	; (800a894 <SaveToRO+0x224>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d115      	bne.n	800a6e2 <SaveToRO+0x72>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a6b6:	4b78      	ldr	r3, [pc, #480]	; (800a898 <SaveToRO+0x228>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d100      	bne.n	800a6c0 <SaveToRO+0x50>
 800a6be:	e0e0      	b.n	800a882 <SaveToRO+0x212>
 800a6c0:	9d00      	ldr	r5, [sp, #0]
 800a6c2:	4e76      	ldr	r6, [pc, #472]	; (800a89c <SaveToRO+0x22c>)
	{
		if (snippets[s].cond.conditionType) 
 800a6c4:	4b76      	ldr	r3, [pc, #472]	; (800a8a0 <SaveToRO+0x230>)
 800a6c6:	469a      	mov	sl, r3
 800a6c8:	e095      	b.n	800a7f6 <SaveToRO+0x186>
		return pFlash.ErrorCode;
 800a6ca:	4b76      	ldr	r3, [pc, #472]	; (800a8a4 <SaveToRO+0x234>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	9301      	str	r3, [sp, #4]
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800a6d2:	9801      	ldr	r0, [sp, #4]
 800a6d4:	b009      	add	sp, #36	; 0x24
 800a6d6:	bcf0      	pop	{r4, r5, r6, r7}
 800a6d8:	46bb      	mov	fp, r7
 800a6da:	46b2      	mov	sl, r6
 800a6dc:	46a9      	mov	r9, r5
 800a6de:	46a0      	mov	r8, r4
 800a6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800a6e2:	4a71      	ldr	r2, [pc, #452]	; (800a8a8 <SaveToRO+0x238>)
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	0212      	lsls	r2, r2, #8
 800a6e8:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a6ea:	b292      	uxth	r2, r2
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4966      	ldr	r1, [pc, #408]	; (800a888 <SaveToRO+0x218>)
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	f005 f85f 	bl	800f7b4 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a6f6:	4865      	ldr	r0, [pc, #404]	; (800a88c <SaveToRO+0x21c>)
 800a6f8:	f005 f82e 	bl	800f758 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d112      	bne.n	800a726 <SaveToRO+0xb6>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a700:	4a63      	ldr	r2, [pc, #396]	; (800a890 <SaveToRO+0x220>)
 800a702:	6913      	ldr	r3, [r2, #16]
 800a704:	2101      	movs	r1, #1
 800a706:	438b      	bics	r3, r1
 800a708:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800a70a:	4b67      	ldr	r3, [pc, #412]	; (800a8a8 <SaveToRO+0x238>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2201      	movs	r2, #1
 800a710:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800a712:	2602      	movs	r6, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0ce      	beq.n	800a6b6 <SaveToRO+0x46>
 800a718:	4b64      	ldr	r3, [pc, #400]	; (800a8ac <SaveToRO+0x23c>)
 800a71a:	469a      	mov	sl, r3
 800a71c:	2308      	movs	r3, #8
 800a71e:	4453      	add	r3, sl
 800a720:	469b      	mov	fp, r3
				if (array[i-1][0]) {
 800a722:	46d0      	mov	r8, sl
 800a724:	e02c      	b.n	800a780 <SaveToRO+0x110>
			return pFlash.ErrorCode;
 800a726:	4b5f      	ldr	r3, [pc, #380]	; (800a8a4 <SaveToRO+0x234>)
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	e7d0      	b.n	800a6d2 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800a730:	4b5c      	ldr	r3, [pc, #368]	; (800a8a4 <SaveToRO+0x234>)
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	e7cb      	b.n	800a6d2 <SaveToRO+0x62>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a73a:	3402      	adds	r4, #2
 800a73c:	42ac      	cmp	r4, r5
 800a73e:	d017      	beq.n	800a770 <SaveToRO+0x100>
				if (array[i-1][0]) {
 800a740:	4643      	mov	r3, r8
 800a742:	5afb      	ldrh	r3, [r7, r3]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0f8      	beq.n	800a73a <SaveToRO+0xca>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800a748:	8822      	ldrh	r2, [r4, #0]
 800a74a:	4b4f      	ldr	r3, [pc, #316]	; (800a888 <SaveToRO+0x218>)
 800a74c:	18f1      	adds	r1, r6, r3
 800a74e:	2300      	movs	r3, #0
 800a750:	2001      	movs	r0, #1
 800a752:	f005 f82f 	bl	800f7b4 <HAL_FLASH_Program>
					add += 2;
 800a756:	3602      	adds	r6, #2
 800a758:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a75a:	484c      	ldr	r0, [pc, #304]	; (800a88c <SaveToRO+0x21c>)
 800a75c:	f004 fffc 	bl	800f758 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a760:	2800      	cmp	r0, #0
 800a762:	d1e5      	bne.n	800a730 <SaveToRO+0xc0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a764:	4a4a      	ldr	r2, [pc, #296]	; (800a890 <SaveToRO+0x220>)
 800a766:	6913      	ldr	r3, [r2, #16]
 800a768:	2101      	movs	r1, #1
 800a76a:	438b      	bics	r3, r1
 800a76c:	6113      	str	r3, [r2, #16]
 800a76e:	e7e4      	b.n	800a73a <SaveToRO+0xca>
		for(uint8_t i=1 ; i<=N ; i++)
 800a770:	464b      	mov	r3, r9
 800a772:	3301      	adds	r3, #1
 800a774:	b2db      	uxtb	r3, r3
 800a776:	4699      	mov	r9, r3
 800a778:	4b4b      	ldr	r3, [pc, #300]	; (800a8a8 <SaveToRO+0x238>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	454b      	cmp	r3, r9
 800a77e:	d39a      	bcc.n	800a6b6 <SaveToRO+0x46>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a780:	464b      	mov	r3, r9
 800a782:	00dd      	lsls	r5, r3, #3
 800a784:	1aed      	subs	r5, r5, r3
 800a786:	006d      	lsls	r5, r5, #1
 800a788:	002c      	movs	r4, r5
 800a78a:	3c0e      	subs	r4, #14
 800a78c:	4454      	add	r4, sl
 800a78e:	445d      	add	r5, fp
				if (array[i-1][0]) {
 800a790:	3b01      	subs	r3, #1
 800a792:	00df      	lsls	r7, r3, #3
 800a794:	1aff      	subs	r7, r7, r3
 800a796:	007f      	lsls	r7, r7, #1
 800a798:	e7d2      	b.n	800a740 <SaveToRO+0xd0>
					return pFlash.ErrorCode;
 800a79a:	4b42      	ldr	r3, [pc, #264]	; (800a8a4 <SaveToRO+0x234>)
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	e796      	b.n	800a6d2 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a7a4:	4643      	mov	r3, r8
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	4393      	bics	r3, r2
 800a7ac:	4642      	mov	r2, r8
 800a7ae:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a7b0:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a7b2:	3401      	adds	r4, #1
 800a7b4:	b2e4      	uxtb	r4, r4
 800a7b6:	68ef      	ldr	r7, [r5, #12]
 800a7b8:	0038      	movs	r0, r7
 800a7ba:	f7f5 fcad 	bl	8000118 <strlen>
 800a7be:	3001      	adds	r0, #1
 800a7c0:	0840      	lsrs	r0, r0, #1
 800a7c2:	4284      	cmp	r4, r0
 800a7c4:	d210      	bcs.n	800a7e8 <SaveToRO+0x178>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800a7c6:	0063      	lsls	r3, r4, #1
 800a7c8:	5afa      	ldrh	r2, [r7, r3]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	0031      	movs	r1, r6
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f004 fff0 	bl	800f7b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a7d4:	4658      	mov	r0, fp
 800a7d6:	f004 ffbf 	bl	800f758 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d0e2      	beq.n	800a7a4 <SaveToRO+0x134>
					return pFlash.ErrorCode;
 800a7de:	4b31      	ldr	r3, [pc, #196]	; (800a8a4 <SaveToRO+0x234>)
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	e774      	b.n	800a6d2 <SaveToRO+0x62>
 800a7e8:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a7ea:	3501      	adds	r5, #1
 800a7ec:	b2ed      	uxtb	r5, r5
 800a7ee:	4b2a      	ldr	r3, [pc, #168]	; (800a898 <SaveToRO+0x228>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	42ab      	cmp	r3, r5
 800a7f4:	d945      	bls.n	800a882 <SaveToRO+0x212>
		if (snippets[s].cond.conditionType) 
 800a7f6:	9500      	str	r5, [sp, #0]
 800a7f8:	00ab      	lsls	r3, r5, #2
 800a7fa:	195b      	adds	r3, r3, r5
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4652      	mov	r2, sl
 800a800:	5c9b      	ldrb	r3, [r3, r2]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0f1      	beq.n	800a7ea <SaveToRO+0x17a>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a806:	23fe      	movs	r3, #254	; 0xfe
 800a808:	aa02      	add	r2, sp, #8
 800a80a:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800a80c:	00a9      	lsls	r1, r5, #2
 800a80e:	1949      	adds	r1, r1, r5
 800a810:	0089      	lsls	r1, r1, #2
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <SaveToRO+0x230>)
 800a814:	469c      	mov	ip, r3
 800a816:	4461      	add	r1, ip
 800a818:	2214      	movs	r2, #20
 800a81a:	ab02      	add	r3, sp, #8
 800a81c:	1c58      	adds	r0, r3, #1
 800a81e:	f007 f99f 	bl	8011b60 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a822:	2314      	movs	r3, #20
 800a824:	469b      	mov	fp, r3
 800a826:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a828:	ab02      	add	r3, sp, #8
 800a82a:	1b9b      	subs	r3, r3, r6
 800a82c:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a82e:	4b17      	ldr	r3, [pc, #92]	; (800a88c <SaveToRO+0x21c>)
 800a830:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a832:	4f17      	ldr	r7, [pc, #92]	; (800a890 <SaveToRO+0x220>)
 800a834:	4644      	mov	r4, r8
 800a836:	46a8      	mov	r8, r5
 800a838:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a83a:	5ba2      	ldrh	r2, [r4, r6]
 800a83c:	2300      	movs	r3, #0
 800a83e:	0031      	movs	r1, r6
 800a840:	2001      	movs	r0, #1
 800a842:	f004 ffb7 	bl	800f7b4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a846:	4648      	mov	r0, r9
 800a848:	f004 ff86 	bl	800f758 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d1a4      	bne.n	800a79a <SaveToRO+0x12a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	2201      	movs	r2, #1
 800a854:	4393      	bics	r3, r2
 800a856:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800a858:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a85a:	42b5      	cmp	r5, r6
 800a85c:	d1ed      	bne.n	800a83a <SaveToRO+0x1ca>
 800a85e:	0004      	movs	r4, r0
 800a860:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a862:	9a00      	ldr	r2, [sp, #0]
 800a864:	0093      	lsls	r3, r2, #2
 800a866:	4694      	mov	ip, r2
 800a868:	4463      	add	r3, ip
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4a0c      	ldr	r2, [pc, #48]	; (800a8a0 <SaveToRO+0x230>)
 800a86e:	4691      	mov	r9, r2
 800a870:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a872:	4b06      	ldr	r3, [pc, #24]	; (800a88c <SaveToRO+0x21c>)
 800a874:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <SaveToRO+0x220>)
 800a878:	4698      	mov	r8, r3
 800a87a:	464b      	mov	r3, r9
 800a87c:	46a9      	mov	r9, r5
 800a87e:	001d      	movs	r5, r3
 800a880:	e799      	b.n	800a7b6 <SaveToRO+0x146>
	HAL_FLASH_Lock();
 800a882:	f004 ff5f 	bl	800f744 <HAL_FLASH_Lock>
	return result;
 800a886:	e724      	b.n	800a6d2 <SaveToRO+0x62>
 800a888:	0801d800 	.word	0x0801d800
 800a88c:	0000c350 	.word	0x0000c350
 800a890:	40022000 	.word	0x40022000
 800a894:	20000070 	.word	0x20000070
 800a898:	20000ec7 	.word	0x20000ec7
 800a89c:	0801dc00 	.word	0x0801dc00
 800a8a0:	2000661c 	.word	0x2000661c
 800a8a4:	20006a60 	.word	0x20006a60
 800a8a8:	2000001c 	.word	0x2000001c
 800a8ac:	200000c0 	.word	0x200000c0

0800a8b0 <Module_Init>:
}
/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Init(void)
{
 800a8b0:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART1_UART_Init();
 800a8b2:	f001 fce1 	bl	800c278 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a8b6:	f001 fcf7 	bl	800c2a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800a8ba:	f001 fd0d 	bl	800c2d8 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800a8be:	f001 fd3b 	bl	800c338 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800a8c2:	f001 fd51 	bl	800c368 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART4_UART_Init();
 800a8c6:	f001 fd1f 	bl	800c308 <MX_USART4_UART_Init>
	
	/* Bridge USB and P5 ports by default - only if PUSB is not bridged with any other port */
	if (portStatus[PUSB] != STREAM)
 800a8ca:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <Module_Init+0x30>)
 800a8cc:	799b      	ldrb	r3, [r3, #6]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d100      	bne.n	800a8d4 <Module_Init+0x24>
		Bridge(PUSB, P5);
	
}
 800a8d2:	bd10      	pop	{r4, pc}
		Bridge(PUSB, P5);
 800a8d4:	2105      	movs	r1, #5
 800a8d6:	2006      	movs	r0, #6
 800a8d8:	f7f9 fba2 	bl	8004020 <Bridge>
}
 800a8dc:	e7f9      	b.n	800a8d2 <Module_Init+0x22>
 800a8de:	46c0      	nop			; (mov r8, r8)
 800a8e0:	20000dcc 	.word	0x20000dcc

0800a8e4 <Module_MessagingTask>:
			result = H1AR0_ERR_UnknownMessage;
			break;
	}			

	return result;	
}
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	4770      	bx	lr

0800a8e8 <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800a8e8:	4770      	bx	lr
	...

0800a8ec <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <GetPort+0x48>)
 800a8f0:	4298      	cmp	r0, r3
 800a8f2:	d015      	beq.n	800a920 <GetPort+0x34>
			return P1;
	else if (huart->Instance == USART6)
 800a8f4:	4b10      	ldr	r3, [pc, #64]	; (800a938 <GetPort+0x4c>)
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	d014      	beq.n	800a924 <GetPort+0x38>
			return P2;
	else if (huart->Instance == USART3)
 800a8fa:	4b10      	ldr	r3, [pc, #64]	; (800a93c <GetPort+0x50>)
 800a8fc:	4298      	cmp	r0, r3
 800a8fe:	d013      	beq.n	800a928 <GetPort+0x3c>
			return P3;
	else if (huart->Instance == USART1)
 800a900:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <GetPort+0x54>)
 800a902:	4298      	cmp	r0, r3
 800a904:	d012      	beq.n	800a92c <GetPort+0x40>
			return P4;
	else if (huart->Instance == USART5)
 800a906:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <GetPort+0x58>)
 800a908:	4298      	cmp	r0, r3
 800a90a:	d011      	beq.n	800a930 <GetPort+0x44>
			return P5;
	else if (huart->Instance == USART4)
			return P6;
 800a90c:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <GetPort+0x5c>)
 800a90e:	469c      	mov	ip, r3
 800a910:	4460      	add	r0, ip
 800a912:	1e43      	subs	r3, r0, #1
 800a914:	4198      	sbcs	r0, r3
 800a916:	4240      	negs	r0, r0
 800a918:	2305      	movs	r3, #5
 800a91a:	4398      	bics	r0, r3
 800a91c:	3006      	adds	r0, #6
		
	return 0;
}
 800a91e:	4770      	bx	lr
			return P1;
 800a920:	2001      	movs	r0, #1
 800a922:	e7fc      	b.n	800a91e <GetPort+0x32>
			return P2;
 800a924:	2002      	movs	r0, #2
 800a926:	e7fa      	b.n	800a91e <GetPort+0x32>
			return P3;
 800a928:	2003      	movs	r0, #3
 800a92a:	e7f8      	b.n	800a91e <GetPort+0x32>
			return P4;
 800a92c:	2004      	movs	r0, #4
 800a92e:	e7f6      	b.n	800a91e <GetPort+0x32>
			return P5;
 800a930:	2005      	movs	r0, #5
 800a932:	e7f4      	b.n	800a91e <GetPort+0x32>
 800a934:	40004400 	.word	0x40004400
 800a938:	40011400 	.word	0x40011400
 800a93c:	40004800 	.word	0x40004800
 800a940:	40013800 	.word	0x40013800
 800a944:	40005000 	.word	0x40005000
 800a948:	bfffb400 	.word	0xbfffb400

0800a94c <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a94c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a94e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a950:	2300      	movs	r3, #0
 800a952:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a954:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a956:	2280      	movs	r2, #128	; 0x80
 800a958:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a95a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a95c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a95e:	3320      	adds	r3, #32
 800a960:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a962:	2380      	movs	r3, #128	; 0x80
 800a964:	019b      	lsls	r3, r3, #6
 800a966:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a968:	f004 f9e0 	bl	800ed2c <HAL_DMA_Init>
}
 800a96c:	bd10      	pop	{r4, pc}

0800a96e <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a96e:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a970:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a972:	2310      	movs	r3, #16
 800a974:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a976:	2300      	movs	r3, #0
 800a978:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a97a:	2280      	movs	r2, #128	; 0x80
 800a97c:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a97e:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a980:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a982:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a984:	2380      	movs	r3, #128	; 0x80
 800a986:	019b      	lsls	r3, r3, #6
 800a988:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a98a:	f004 f9cf 	bl	800ed2c <HAL_DMA_Init>
}
 800a98e:	bd10      	pop	{r4, pc}

0800a990 <DMA_Init>:
{
 800a990:	b510      	push	{r4, lr}
 800a992:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800a994:	4b20      	ldr	r3, [pc, #128]	; (800aa18 <DMA_Init+0x88>)
 800a996:	6959      	ldr	r1, [r3, #20]
 800a998:	2201      	movs	r2, #1
 800a99a:	4311      	orrs	r1, r2
 800a99c:	6159      	str	r1, [r3, #20]
 800a99e:	6959      	ldr	r1, [r3, #20]
 800a9a0:	400a      	ands	r2, r1
 800a9a2:	9200      	str	r2, [sp, #0]
 800a9a4:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a9a6:	6959      	ldr	r1, [r3, #20]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	4311      	orrs	r1, r2
 800a9ac:	6159      	str	r1, [r3, #20]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	401a      	ands	r2, r3
 800a9b2:	9201      	str	r2, [sp, #4]
 800a9b4:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800a9b6:	4c19      	ldr	r4, [pc, #100]	; (800aa1c <DMA_Init+0x8c>)
 800a9b8:	4919      	ldr	r1, [pc, #100]	; (800aa20 <DMA_Init+0x90>)
 800a9ba:	0020      	movs	r0, r4
 800a9bc:	f7ff ffc6 	bl	800a94c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800a9c0:	0020      	movs	r0, r4
 800a9c2:	3038      	adds	r0, #56	; 0x38
 800a9c4:	4917      	ldr	r1, [pc, #92]	; (800aa24 <DMA_Init+0x94>)
 800a9c6:	f7ff ffc1 	bl	800a94c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800a9ca:	0020      	movs	r0, r4
 800a9cc:	3070      	adds	r0, #112	; 0x70
 800a9ce:	4916      	ldr	r1, [pc, #88]	; (800aa28 <DMA_Init+0x98>)
 800a9d0:	f7ff ffbc 	bl	800a94c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800a9d4:	0020      	movs	r0, r4
 800a9d6:	30a8      	adds	r0, #168	; 0xa8
 800a9d8:	4914      	ldr	r1, [pc, #80]	; (800aa2c <DMA_Init+0x9c>)
 800a9da:	f7ff ffb7 	bl	800a94c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800a9de:	0020      	movs	r0, r4
 800a9e0:	30e0      	adds	r0, #224	; 0xe0
 800a9e2:	4913      	ldr	r1, [pc, #76]	; (800aa30 <DMA_Init+0xa0>)
 800a9e4:	f7ff ffb2 	bl	800a94c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800a9e8:	0020      	movs	r0, r4
 800a9ea:	3019      	adds	r0, #25
 800a9ec:	30ff      	adds	r0, #255	; 0xff
 800a9ee:	4911      	ldr	r1, [pc, #68]	; (800aa34 <DMA_Init+0xa4>)
 800a9f0:	f7ff ffac 	bl	800a94c <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800a9f4:	4c10      	ldr	r4, [pc, #64]	; (800aa38 <DMA_Init+0xa8>)
 800a9f6:	4911      	ldr	r1, [pc, #68]	; (800aa3c <DMA_Init+0xac>)
 800a9f8:	0020      	movs	r0, r4
 800a9fa:	f7ff ffb8 	bl	800a96e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800a9fe:	0020      	movs	r0, r4
 800aa00:	3038      	adds	r0, #56	; 0x38
 800aa02:	490f      	ldr	r1, [pc, #60]	; (800aa40 <DMA_Init+0xb0>)
 800aa04:	f7ff ffb3 	bl	800a96e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800aa08:	0020      	movs	r0, r4
 800aa0a:	3070      	adds	r0, #112	; 0x70
 800aa0c:	490d      	ldr	r1, [pc, #52]	; (800aa44 <DMA_Init+0xb4>)
 800aa0e:	f7ff ffae 	bl	800a96e <DMA_MSG_TX_CH_Init>
}
 800aa12:	b002      	add	sp, #8
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	40021000 	.word	0x40021000
 800aa1c:	200013d8 	.word	0x200013d8
 800aa20:	40020008 	.word	0x40020008
 800aa24:	40020030 	.word	0x40020030
 800aa28:	40020058 	.word	0x40020058
 800aa2c:	4002006c 	.word	0x4002006c
 800aa30:	4002041c 	.word	0x4002041c
 800aa34:	40020430 	.word	0x40020430
 800aa38:	20001528 	.word	0x20001528
 800aa3c:	4002001c 	.word	0x4002001c
 800aa40:	40020044 	.word	0x40020044
 800aa44:	40020080 	.word	0x40020080

0800aa48 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800aa48:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800aa4a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aa50:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800aa52:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa54:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa56:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800aa58:	3320      	adds	r3, #32
 800aa5a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800aa5c:	2380      	movs	r3, #128	; 0x80
 800aa5e:	015b      	lsls	r3, r3, #5
 800aa60:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800aa62:	f004 f963 	bl	800ed2c <HAL_DMA_Init>
}
 800aa66:	bd10      	pop	{r4, pc}

0800aa68 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800aa68:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800aa6a:	6803      	ldr	r3, [r0, #0]
 800aa6c:	4821      	ldr	r0, [pc, #132]	; (800aaf4 <SetupDMAInterrupts+0x8c>)
 800aa6e:	4283      	cmp	r3, r0
 800aa70:	d037      	beq.n	800aae2 <SetupDMAInterrupts+0x7a>
 800aa72:	d90e      	bls.n	800aa92 <SetupDMAInterrupts+0x2a>
 800aa74:	4820      	ldr	r0, [pc, #128]	; (800aaf8 <SetupDMAInterrupts+0x90>)
 800aa76:	4283      	cmp	r3, r0
 800aa78:	d033      	beq.n	800aae2 <SetupDMAInterrupts+0x7a>
 800aa7a:	d919      	bls.n	800aab0 <SetupDMAInterrupts+0x48>
 800aa7c:	481f      	ldr	r0, [pc, #124]	; (800aafc <SetupDMAInterrupts+0x94>)
 800aa7e:	4283      	cmp	r3, r0
 800aa80:	d024      	beq.n	800aacc <SetupDMAInterrupts+0x64>
 800aa82:	d92b      	bls.n	800aadc <SetupDMAInterrupts+0x74>
 800aa84:	4a1e      	ldr	r2, [pc, #120]	; (800ab00 <SetupDMAInterrupts+0x98>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d020      	beq.n	800aacc <SetupDMAInterrupts+0x64>
 800aa8a:	4a1e      	ldr	r2, [pc, #120]	; (800ab04 <SetupDMAInterrupts+0x9c>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d01d      	beq.n	800aacc <SetupDMAInterrupts+0x64>
 800aa90:	e00d      	b.n	800aaae <SetupDMAInterrupts+0x46>
 800aa92:	4a1d      	ldr	r2, [pc, #116]	; (800ab08 <SetupDMAInterrupts+0xa0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d107      	bne.n	800aaa8 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2009      	movs	r0, #9
 800aa9c:	f003 ffa0 	bl	800e9e0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800aaa0:	2009      	movs	r0, #9
 800aaa2:	f003 ffcf 	bl	800ea44 <HAL_NVIC_EnableIRQ>
			break;
 800aaa6:	e002      	b.n	800aaae <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800aaa8:	4a18      	ldr	r2, [pc, #96]	; (800ab0c <SetupDMAInterrupts+0xa4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d019      	beq.n	800aae2 <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800aaae:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800aab0:	4817      	ldr	r0, [pc, #92]	; (800ab10 <SetupDMAInterrupts+0xa8>)
 800aab2:	4283      	cmp	r3, r0
 800aab4:	d00a      	beq.n	800aacc <SetupDMAInterrupts+0x64>
 800aab6:	d903      	bls.n	800aac0 <SetupDMAInterrupts+0x58>
 800aab8:	4a16      	ldr	r2, [pc, #88]	; (800ab14 <SetupDMAInterrupts+0xac>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d006      	beq.n	800aacc <SetupDMAInterrupts+0x64>
 800aabe:	e7f6      	b.n	800aaae <SetupDMAInterrupts+0x46>
 800aac0:	4a15      	ldr	r2, [pc, #84]	; (800ab18 <SetupDMAInterrupts+0xb0>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d002      	beq.n	800aacc <SetupDMAInterrupts+0x64>
 800aac6:	4a15      	ldr	r2, [pc, #84]	; (800ab1c <SetupDMAInterrupts+0xb4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d1f0      	bne.n	800aaae <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800aacc:	2200      	movs	r2, #0
 800aace:	200b      	movs	r0, #11
 800aad0:	f003 ff86 	bl	800e9e0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800aad4:	200b      	movs	r0, #11
 800aad6:	f003 ffb5 	bl	800ea44 <HAL_NVIC_EnableIRQ>
}
 800aada:	e7e8      	b.n	800aaae <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800aadc:	4a10      	ldr	r2, [pc, #64]	; (800ab20 <SetupDMAInterrupts+0xb8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d1e5      	bne.n	800aaae <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800aae2:	2200      	movs	r2, #0
 800aae4:	200a      	movs	r0, #10
 800aae6:	f003 ff7b 	bl	800e9e0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800aaea:	200a      	movs	r0, #10
 800aaec:	f003 ffaa 	bl	800ea44 <HAL_NVIC_EnableIRQ>
			break;
 800aaf0:	e7dd      	b.n	800aaae <SetupDMAInterrupts+0x46>
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	40020030 	.word	0x40020030
 800aaf8:	40020408 	.word	0x40020408
 800aafc:	40020430 	.word	0x40020430
 800ab00:	40020444 	.word	0x40020444
 800ab04:	40020458 	.word	0x40020458
 800ab08:	40020008 	.word	0x40020008
 800ab0c:	4002001c 	.word	0x4002001c
 800ab10:	4002006c 	.word	0x4002006c
 800ab14:	40020080 	.word	0x40020080
 800ab18:	40020044 	.word	0x40020044
 800ab1c:	40020058 	.word	0x40020058
 800ab20:	4002041c 	.word	0x4002041c

0800ab24 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800ab24:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ab26:	6803      	ldr	r3, [r0, #0]
 800ab28:	491b      	ldr	r1, [pc, #108]	; (800ab98 <UnSetupDMAInterrupts+0x74>)
 800ab2a:	428b      	cmp	r3, r1
 800ab2c:	d02f      	beq.n	800ab8e <UnSetupDMAInterrupts+0x6a>
 800ab2e:	d90e      	bls.n	800ab4e <UnSetupDMAInterrupts+0x2a>
 800ab30:	491a      	ldr	r1, [pc, #104]	; (800ab9c <UnSetupDMAInterrupts+0x78>)
 800ab32:	428b      	cmp	r3, r1
 800ab34:	d02b      	beq.n	800ab8e <UnSetupDMAInterrupts+0x6a>
 800ab36:	d915      	bls.n	800ab64 <UnSetupDMAInterrupts+0x40>
 800ab38:	4919      	ldr	r1, [pc, #100]	; (800aba0 <UnSetupDMAInterrupts+0x7c>)
 800ab3a:	428b      	cmp	r3, r1
 800ab3c:	d020      	beq.n	800ab80 <UnSetupDMAInterrupts+0x5c>
 800ab3e:	d923      	bls.n	800ab88 <UnSetupDMAInterrupts+0x64>
 800ab40:	4a18      	ldr	r2, [pc, #96]	; (800aba4 <UnSetupDMAInterrupts+0x80>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d01c      	beq.n	800ab80 <UnSetupDMAInterrupts+0x5c>
 800ab46:	4a18      	ldr	r2, [pc, #96]	; (800aba8 <UnSetupDMAInterrupts+0x84>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d019      	beq.n	800ab80 <UnSetupDMAInterrupts+0x5c>
 800ab4c:	e009      	b.n	800ab62 <UnSetupDMAInterrupts+0x3e>
 800ab4e:	4a17      	ldr	r2, [pc, #92]	; (800abac <UnSetupDMAInterrupts+0x88>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d103      	bne.n	800ab5c <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ab54:	2009      	movs	r0, #9
 800ab56:	f003 ff7f 	bl	800ea58 <HAL_NVIC_DisableIRQ>
			break;
 800ab5a:	e002      	b.n	800ab62 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ab5c:	4a14      	ldr	r2, [pc, #80]	; (800abb0 <UnSetupDMAInterrupts+0x8c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d015      	beq.n	800ab8e <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800ab62:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ab64:	4913      	ldr	r1, [pc, #76]	; (800abb4 <UnSetupDMAInterrupts+0x90>)
 800ab66:	428b      	cmp	r3, r1
 800ab68:	d00a      	beq.n	800ab80 <UnSetupDMAInterrupts+0x5c>
 800ab6a:	d903      	bls.n	800ab74 <UnSetupDMAInterrupts+0x50>
 800ab6c:	4a12      	ldr	r2, [pc, #72]	; (800abb8 <UnSetupDMAInterrupts+0x94>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d006      	beq.n	800ab80 <UnSetupDMAInterrupts+0x5c>
 800ab72:	e7f6      	b.n	800ab62 <UnSetupDMAInterrupts+0x3e>
 800ab74:	4a11      	ldr	r2, [pc, #68]	; (800abbc <UnSetupDMAInterrupts+0x98>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d002      	beq.n	800ab80 <UnSetupDMAInterrupts+0x5c>
 800ab7a:	4a11      	ldr	r2, [pc, #68]	; (800abc0 <UnSetupDMAInterrupts+0x9c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d1f0      	bne.n	800ab62 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ab80:	200b      	movs	r0, #11
 800ab82:	f003 ff69 	bl	800ea58 <HAL_NVIC_DisableIRQ>
}
 800ab86:	e7ec      	b.n	800ab62 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ab88:	4a0e      	ldr	r2, [pc, #56]	; (800abc4 <UnSetupDMAInterrupts+0xa0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d1e9      	bne.n	800ab62 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ab8e:	200a      	movs	r0, #10
 800ab90:	f003 ff62 	bl	800ea58 <HAL_NVIC_DisableIRQ>
			break;
 800ab94:	e7e5      	b.n	800ab62 <UnSetupDMAInterrupts+0x3e>
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	40020030 	.word	0x40020030
 800ab9c:	40020408 	.word	0x40020408
 800aba0:	40020430 	.word	0x40020430
 800aba4:	40020444 	.word	0x40020444
 800aba8:	40020458 	.word	0x40020458
 800abac:	40020008 	.word	0x40020008
 800abb0:	4002001c 	.word	0x4002001c
 800abb4:	4002006c 	.word	0x4002006c
 800abb8:	40020080 	.word	0x40020080
 800abbc:	40020044 	.word	0x40020044
 800abc0:	40020058 	.word	0x40020058
 800abc4:	4002041c 	.word	0x4002041c

0800abc8 <DMA_MSG_TX_UnSetup>:
{	
 800abc8:	b510      	push	{r4, lr}
 800abca:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800abcc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800abce:	f7ff ffa9 	bl	800ab24 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800abd2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800abd4:	2300      	movs	r3, #0
 800abd6:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800abd8:	6623      	str	r3, [r4, #96]	; 0x60
}
 800abda:	bd10      	pop	{r4, pc}

0800abdc <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800abdc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800abde:	6803      	ldr	r3, [r0, #0]
 800abe0:	4ac3      	ldr	r2, [pc, #780]	; (800aef0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d03e      	beq.n	800ac64 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800abe6:	4ac3      	ldr	r2, [pc, #780]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d100      	bne.n	800abee <RemapAndLinkDMAtoUARTRx+0x12>
 800abec:	e096      	b.n	800ad1c <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800abee:	4ac2      	ldr	r2, [pc, #776]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d100      	bne.n	800abf6 <RemapAndLinkDMAtoUARTRx+0x1a>
 800abf4:	e0eb      	b.n	800adce <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800abf6:	4ac1      	ldr	r2, [pc, #772]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x320>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d100      	bne.n	800abfe <RemapAndLinkDMAtoUARTRx+0x22>
 800abfc:	e141      	b.n	800ae82 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800abfe:	4ac0      	ldr	r2, [pc, #768]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d100      	bne.n	800ac06 <RemapAndLinkDMAtoUARTRx+0x2a>
 800ac04:	e1bd      	b.n	800af82 <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800ac06:	4abf      	ldr	r2, [pc, #764]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d100      	bne.n	800ac0e <RemapAndLinkDMAtoUARTRx+0x32>
 800ac0c:	e213      	b.n	800b036 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800ac0e:	4abe      	ldr	r2, [pc, #760]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d100      	bne.n	800ac16 <RemapAndLinkDMAtoUARTRx+0x3a>
 800ac14:	e269      	b.n	800b0ea <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800ac16:	4abd      	ldr	r2, [pc, #756]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x330>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d136      	bne.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
 800ac1c:	680b      	ldr	r3, [r1, #0]
 800ac1e:	4abc      	ldr	r2, [pc, #752]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d100      	bne.n	800ac26 <RemapAndLinkDMAtoUARTRx+0x4a>
 800ac24:	e2bb      	b.n	800b19e <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800ac26:	4abb      	ldr	r2, [pc, #748]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d100      	bne.n	800ac2e <RemapAndLinkDMAtoUARTRx+0x52>
 800ac2c:	e2c1      	b.n	800b1b2 <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800ac2e:	4aba      	ldr	r2, [pc, #744]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d100      	bne.n	800ac36 <RemapAndLinkDMAtoUARTRx+0x5a>
 800ac34:	e2c9      	b.n	800b1ca <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800ac36:	4ab9      	ldr	r2, [pc, #740]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x340>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d100      	bne.n	800ac3e <RemapAndLinkDMAtoUARTRx+0x62>
 800ac3c:	e2d1      	b.n	800b1e2 <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800ac3e:	4ab8      	ldr	r2, [pc, #736]	; (800af20 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d100      	bne.n	800ac46 <RemapAndLinkDMAtoUARTRx+0x6a>
 800ac44:	e2d9      	b.n	800b1fa <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ac46:	4ab7      	ldr	r2, [pc, #732]	; (800af24 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d11e      	bne.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ac4c:	4ab6      	ldr	r2, [pc, #728]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ac4e:	23a8      	movs	r3, #168	; 0xa8
 800ac50:	58d4      	ldr	r4, [r2, r3]
 800ac52:	4db6      	ldr	r5, [pc, #728]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ac54:	402c      	ands	r4, r5
 800ac56:	50d4      	str	r4, [r2, r3]
 800ac58:	58d5      	ldr	r5, [r2, r3]
 800ac5a:	24f0      	movs	r4, #240	; 0xf0
 800ac5c:	0124      	lsls	r4, r4, #4
 800ac5e:	432c      	orrs	r4, r5
 800ac60:	50d4      	str	r4, [r2, r3]
 800ac62:	e012      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ac64:	680b      	ldr	r3, [r1, #0]
 800ac66:	4aaa      	ldr	r2, [pc, #680]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d011      	beq.n	800ac90 <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800ac6c:	4aa9      	ldr	r2, [pc, #676]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d019      	beq.n	800aca6 <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800ac72:	4aa9      	ldr	r2, [pc, #676]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d022      	beq.n	800acbe <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800ac78:	4aa8      	ldr	r2, [pc, #672]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x340>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d02b      	beq.n	800acd6 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800ac7e:	4aa8      	ldr	r2, [pc, #672]	; (800af20 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d034      	beq.n	800acee <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800ac84:	4aa7      	ldr	r2, [pc, #668]	; (800af24 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d03c      	beq.n	800ad04 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800ac8a:	6641      	str	r1, [r0, #100]	; 0x64
 800ac8c:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800ac90:	4aa7      	ldr	r2, [pc, #668]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ac92:	23a8      	movs	r3, #168	; 0xa8
 800ac94:	58d4      	ldr	r4, [r2, r3]
 800ac96:	250f      	movs	r5, #15
 800ac98:	43ac      	bics	r4, r5
 800ac9a:	50d4      	str	r4, [r2, r3]
 800ac9c:	58d4      	ldr	r4, [r2, r3]
 800ac9e:	3d07      	subs	r5, #7
 800aca0:	432c      	orrs	r4, r5
 800aca2:	50d4      	str	r4, [r2, r3]
 800aca4:	e7f1      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800aca6:	4aa2      	ldr	r2, [pc, #648]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aca8:	23a8      	movs	r3, #168	; 0xa8
 800acaa:	58d4      	ldr	r4, [r2, r3]
 800acac:	4d9f      	ldr	r5, [pc, #636]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800acae:	402c      	ands	r4, r5
 800acb0:	50d4      	str	r4, [r2, r3]
 800acb2:	58d5      	ldr	r5, [r2, r3]
 800acb4:	2480      	movs	r4, #128	; 0x80
 800acb6:	0124      	lsls	r4, r4, #4
 800acb8:	432c      	orrs	r4, r5
 800acba:	50d4      	str	r4, [r2, r3]
 800acbc:	e7e5      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800acbe:	4a9c      	ldr	r2, [pc, #624]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800acc0:	23a8      	movs	r3, #168	; 0xa8
 800acc2:	58d4      	ldr	r4, [r2, r3]
 800acc4:	4d9b      	ldr	r5, [pc, #620]	; (800af34 <RemapAndLinkDMAtoUARTRx+0x358>)
 800acc6:	402c      	ands	r4, r5
 800acc8:	50d4      	str	r4, [r2, r3]
 800acca:	58d5      	ldr	r5, [r2, r3]
 800accc:	2480      	movs	r4, #128	; 0x80
 800acce:	0324      	lsls	r4, r4, #12
 800acd0:	432c      	orrs	r4, r5
 800acd2:	50d4      	str	r4, [r2, r3]
 800acd4:	e7d9      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800acd6:	4a96      	ldr	r2, [pc, #600]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800acd8:	23a8      	movs	r3, #168	; 0xa8
 800acda:	58d4      	ldr	r4, [r2, r3]
 800acdc:	4d96      	ldr	r5, [pc, #600]	; (800af38 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800acde:	402c      	ands	r4, r5
 800ace0:	50d4      	str	r4, [r2, r3]
 800ace2:	58d5      	ldr	r5, [r2, r3]
 800ace4:	2480      	movs	r4, #128	; 0x80
 800ace6:	0424      	lsls	r4, r4, #16
 800ace8:	432c      	orrs	r4, r5
 800acea:	50d4      	str	r4, [r2, r3]
 800acec:	e7cd      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800acee:	4a8e      	ldr	r2, [pc, #568]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800acf0:	23a8      	movs	r3, #168	; 0xa8
 800acf2:	58d4      	ldr	r4, [r2, r3]
 800acf4:	25f0      	movs	r5, #240	; 0xf0
 800acf6:	43ac      	bics	r4, r5
 800acf8:	50d4      	str	r4, [r2, r3]
 800acfa:	58d4      	ldr	r4, [r2, r3]
 800acfc:	3d70      	subs	r5, #112	; 0x70
 800acfe:	432c      	orrs	r4, r5
 800ad00:	50d4      	str	r4, [r2, r3]
 800ad02:	e7c2      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ad04:	4a88      	ldr	r2, [pc, #544]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ad06:	23a8      	movs	r3, #168	; 0xa8
 800ad08:	58d4      	ldr	r4, [r2, r3]
 800ad0a:	4d88      	ldr	r5, [pc, #544]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ad0c:	402c      	ands	r4, r5
 800ad0e:	50d4      	str	r4, [r2, r3]
 800ad10:	58d5      	ldr	r5, [r2, r3]
 800ad12:	2480      	movs	r4, #128	; 0x80
 800ad14:	0124      	lsls	r4, r4, #4
 800ad16:	432c      	orrs	r4, r5
 800ad18:	50d4      	str	r4, [r2, r3]
 800ad1a:	e7b6      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ad1c:	680b      	ldr	r3, [r1, #0]
 800ad1e:	4a7c      	ldr	r2, [pc, #496]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d01a      	beq.n	800ad5a <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ad24:	4a7b      	ldr	r2, [pc, #492]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d022      	beq.n	800ad70 <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ad2a:	4a7b      	ldr	r2, [pc, #492]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d02b      	beq.n	800ad88 <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ad30:	4a7a      	ldr	r2, [pc, #488]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x340>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d034      	beq.n	800ada0 <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ad36:	4a7a      	ldr	r2, [pc, #488]	; (800af20 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d03d      	beq.n	800adb8 <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ad3c:	4a79      	ldr	r2, [pc, #484]	; (800af24 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d1a3      	bne.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ad42:	4a79      	ldr	r2, [pc, #484]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ad44:	23a8      	movs	r3, #168	; 0xa8
 800ad46:	58d4      	ldr	r4, [r2, r3]
 800ad48:	4d78      	ldr	r5, [pc, #480]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ad4a:	402c      	ands	r4, r5
 800ad4c:	50d4      	str	r4, [r2, r3]
 800ad4e:	58d5      	ldr	r5, [r2, r3]
 800ad50:	2490      	movs	r4, #144	; 0x90
 800ad52:	0124      	lsls	r4, r4, #4
 800ad54:	432c      	orrs	r4, r5
 800ad56:	50d4      	str	r4, [r2, r3]
 800ad58:	e797      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ad5a:	4a75      	ldr	r2, [pc, #468]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ad5c:	23a8      	movs	r3, #168	; 0xa8
 800ad5e:	58d4      	ldr	r4, [r2, r3]
 800ad60:	250f      	movs	r5, #15
 800ad62:	43ac      	bics	r4, r5
 800ad64:	50d4      	str	r4, [r2, r3]
 800ad66:	58d4      	ldr	r4, [r2, r3]
 800ad68:	3d06      	subs	r5, #6
 800ad6a:	432c      	orrs	r4, r5
 800ad6c:	50d4      	str	r4, [r2, r3]
 800ad6e:	e78c      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ad70:	4a6f      	ldr	r2, [pc, #444]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ad72:	23a8      	movs	r3, #168	; 0xa8
 800ad74:	58d4      	ldr	r4, [r2, r3]
 800ad76:	4d6d      	ldr	r5, [pc, #436]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ad78:	402c      	ands	r4, r5
 800ad7a:	50d4      	str	r4, [r2, r3]
 800ad7c:	58d5      	ldr	r5, [r2, r3]
 800ad7e:	2490      	movs	r4, #144	; 0x90
 800ad80:	0124      	lsls	r4, r4, #4
 800ad82:	432c      	orrs	r4, r5
 800ad84:	50d4      	str	r4, [r2, r3]
 800ad86:	e780      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ad88:	4a69      	ldr	r2, [pc, #420]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ad8a:	23a8      	movs	r3, #168	; 0xa8
 800ad8c:	58d4      	ldr	r4, [r2, r3]
 800ad8e:	4d69      	ldr	r5, [pc, #420]	; (800af34 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ad90:	402c      	ands	r4, r5
 800ad92:	50d4      	str	r4, [r2, r3]
 800ad94:	58d5      	ldr	r5, [r2, r3]
 800ad96:	2490      	movs	r4, #144	; 0x90
 800ad98:	0324      	lsls	r4, r4, #12
 800ad9a:	432c      	orrs	r4, r5
 800ad9c:	50d4      	str	r4, [r2, r3]
 800ad9e:	e774      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ada0:	4a63      	ldr	r2, [pc, #396]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ada2:	23a8      	movs	r3, #168	; 0xa8
 800ada4:	58d4      	ldr	r4, [r2, r3]
 800ada6:	4d64      	ldr	r5, [pc, #400]	; (800af38 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ada8:	402c      	ands	r4, r5
 800adaa:	50d4      	str	r4, [r2, r3]
 800adac:	58d5      	ldr	r5, [r2, r3]
 800adae:	2490      	movs	r4, #144	; 0x90
 800adb0:	0424      	lsls	r4, r4, #16
 800adb2:	432c      	orrs	r4, r5
 800adb4:	50d4      	str	r4, [r2, r3]
 800adb6:	e768      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800adb8:	4a5b      	ldr	r2, [pc, #364]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800adba:	23a8      	movs	r3, #168	; 0xa8
 800adbc:	58d4      	ldr	r4, [r2, r3]
 800adbe:	25f0      	movs	r5, #240	; 0xf0
 800adc0:	43ac      	bics	r4, r5
 800adc2:	50d4      	str	r4, [r2, r3]
 800adc4:	58d4      	ldr	r4, [r2, r3]
 800adc6:	3d60      	subs	r5, #96	; 0x60
 800adc8:	432c      	orrs	r4, r5
 800adca:	50d4      	str	r4, [r2, r3]
 800adcc:	e75d      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800adce:	680b      	ldr	r3, [r1, #0]
 800add0:	4a4f      	ldr	r2, [pc, #316]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x334>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d01b      	beq.n	800ae0e <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800add6:	4a4f      	ldr	r2, [pc, #316]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x338>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d023      	beq.n	800ae24 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800addc:	4a4e      	ldr	r2, [pc, #312]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d02c      	beq.n	800ae3c <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ade2:	4a4e      	ldr	r2, [pc, #312]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x340>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d035      	beq.n	800ae54 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ade8:	4a4d      	ldr	r2, [pc, #308]	; (800af20 <RemapAndLinkDMAtoUARTRx+0x344>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d03e      	beq.n	800ae6c <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800adee:	4a4d      	ldr	r2, [pc, #308]	; (800af24 <RemapAndLinkDMAtoUARTRx+0x348>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d000      	beq.n	800adf6 <RemapAndLinkDMAtoUARTRx+0x21a>
 800adf4:	e749      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800adf6:	4a4c      	ldr	r2, [pc, #304]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800adf8:	23a8      	movs	r3, #168	; 0xa8
 800adfa:	58d4      	ldr	r4, [r2, r3]
 800adfc:	4d4b      	ldr	r5, [pc, #300]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800adfe:	402c      	ands	r4, r5
 800ae00:	50d4      	str	r4, [r2, r3]
 800ae02:	58d5      	ldr	r5, [r2, r3]
 800ae04:	24a0      	movs	r4, #160	; 0xa0
 800ae06:	0124      	lsls	r4, r4, #4
 800ae08:	432c      	orrs	r4, r5
 800ae0a:	50d4      	str	r4, [r2, r3]
 800ae0c:	e73d      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ae0e:	4a48      	ldr	r2, [pc, #288]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ae10:	23a8      	movs	r3, #168	; 0xa8
 800ae12:	58d4      	ldr	r4, [r2, r3]
 800ae14:	250f      	movs	r5, #15
 800ae16:	43ac      	bics	r4, r5
 800ae18:	50d4      	str	r4, [r2, r3]
 800ae1a:	58d4      	ldr	r4, [r2, r3]
 800ae1c:	3d05      	subs	r5, #5
 800ae1e:	432c      	orrs	r4, r5
 800ae20:	50d4      	str	r4, [r2, r3]
 800ae22:	e732      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800ae24:	4a42      	ldr	r2, [pc, #264]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ae26:	23a8      	movs	r3, #168	; 0xa8
 800ae28:	58d4      	ldr	r4, [r2, r3]
 800ae2a:	4d40      	ldr	r5, [pc, #256]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800ae2c:	402c      	ands	r4, r5
 800ae2e:	50d4      	str	r4, [r2, r3]
 800ae30:	58d5      	ldr	r5, [r2, r3]
 800ae32:	24a0      	movs	r4, #160	; 0xa0
 800ae34:	0124      	lsls	r4, r4, #4
 800ae36:	432c      	orrs	r4, r5
 800ae38:	50d4      	str	r4, [r2, r3]
 800ae3a:	e726      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800ae3c:	4a3c      	ldr	r2, [pc, #240]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ae3e:	23a8      	movs	r3, #168	; 0xa8
 800ae40:	58d4      	ldr	r4, [r2, r3]
 800ae42:	4d3c      	ldr	r5, [pc, #240]	; (800af34 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ae44:	402c      	ands	r4, r5
 800ae46:	50d4      	str	r4, [r2, r3]
 800ae48:	58d5      	ldr	r5, [r2, r3]
 800ae4a:	24a0      	movs	r4, #160	; 0xa0
 800ae4c:	0324      	lsls	r4, r4, #12
 800ae4e:	432c      	orrs	r4, r5
 800ae50:	50d4      	str	r4, [r2, r3]
 800ae52:	e71a      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800ae54:	4a36      	ldr	r2, [pc, #216]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ae56:	23a8      	movs	r3, #168	; 0xa8
 800ae58:	58d4      	ldr	r4, [r2, r3]
 800ae5a:	4d37      	ldr	r5, [pc, #220]	; (800af38 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ae5c:	402c      	ands	r4, r5
 800ae5e:	50d4      	str	r4, [r2, r3]
 800ae60:	58d5      	ldr	r5, [r2, r3]
 800ae62:	24a0      	movs	r4, #160	; 0xa0
 800ae64:	0424      	lsls	r4, r4, #16
 800ae66:	432c      	orrs	r4, r5
 800ae68:	50d4      	str	r4, [r2, r3]
 800ae6a:	e70e      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800ae6c:	4a2e      	ldr	r2, [pc, #184]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ae6e:	23a8      	movs	r3, #168	; 0xa8
 800ae70:	58d4      	ldr	r4, [r2, r3]
 800ae72:	25f0      	movs	r5, #240	; 0xf0
 800ae74:	43ac      	bics	r4, r5
 800ae76:	50d4      	str	r4, [r2, r3]
 800ae78:	58d4      	ldr	r4, [r2, r3]
 800ae7a:	3d50      	subs	r5, #80	; 0x50
 800ae7c:	432c      	orrs	r4, r5
 800ae7e:	50d4      	str	r4, [r2, r3]
 800ae80:	e703      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800ae82:	680b      	ldr	r3, [r1, #0]
 800ae84:	4a22      	ldr	r2, [pc, #136]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d01b      	beq.n	800aec2 <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ae8a:	4a22      	ldr	r2, [pc, #136]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x338>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d023      	beq.n	800aed8 <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ae90:	4a21      	ldr	r2, [pc, #132]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d052      	beq.n	800af3c <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ae96:	4a21      	ldr	r2, [pc, #132]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d05b      	beq.n	800af54 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ae9c:	4a20      	ldr	r2, [pc, #128]	; (800af20 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d064      	beq.n	800af6c <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800aea2:	4a20      	ldr	r2, [pc, #128]	; (800af24 <RemapAndLinkDMAtoUARTRx+0x348>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d000      	beq.n	800aeaa <RemapAndLinkDMAtoUARTRx+0x2ce>
 800aea8:	e6ef      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800aeac:	23a8      	movs	r3, #168	; 0xa8
 800aeae:	58d4      	ldr	r4, [r2, r3]
 800aeb0:	4d1e      	ldr	r5, [pc, #120]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800aeb2:	402c      	ands	r4, r5
 800aeb4:	50d4      	str	r4, [r2, r3]
 800aeb6:	58d5      	ldr	r5, [r2, r3]
 800aeb8:	24b0      	movs	r4, #176	; 0xb0
 800aeba:	0124      	lsls	r4, r4, #4
 800aebc:	432c      	orrs	r4, r5
 800aebe:	50d4      	str	r4, [r2, r3]
 800aec0:	e6e3      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800aec2:	4a1b      	ldr	r2, [pc, #108]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aec4:	23a8      	movs	r3, #168	; 0xa8
 800aec6:	58d4      	ldr	r4, [r2, r3]
 800aec8:	250f      	movs	r5, #15
 800aeca:	43ac      	bics	r4, r5
 800aecc:	50d4      	str	r4, [r2, r3]
 800aece:	58d4      	ldr	r4, [r2, r3]
 800aed0:	3d04      	subs	r5, #4
 800aed2:	432c      	orrs	r4, r5
 800aed4:	50d4      	str	r4, [r2, r3]
 800aed6:	e6d8      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800aed8:	4a15      	ldr	r2, [pc, #84]	; (800af30 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aeda:	23a8      	movs	r3, #168	; 0xa8
 800aedc:	58d4      	ldr	r4, [r2, r3]
 800aede:	4d13      	ldr	r5, [pc, #76]	; (800af2c <RemapAndLinkDMAtoUARTRx+0x350>)
 800aee0:	402c      	ands	r4, r5
 800aee2:	50d4      	str	r4, [r2, r3]
 800aee4:	58d5      	ldr	r5, [r2, r3]
 800aee6:	24b0      	movs	r4, #176	; 0xb0
 800aee8:	0124      	lsls	r4, r4, #4
 800aeea:	432c      	orrs	r4, r5
 800aeec:	50d4      	str	r4, [r2, r3]
 800aeee:	e6cc      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
 800aef0:	40013800 	.word	0x40013800
 800aef4:	40004400 	.word	0x40004400
 800aef8:	40004800 	.word	0x40004800
 800aefc:	40004c00 	.word	0x40004c00
 800af00:	40005000 	.word	0x40005000
 800af04:	40011400 	.word	0x40011400
 800af08:	40011800 	.word	0x40011800
 800af0c:	40011c00 	.word	0x40011c00
 800af10:	40020008 	.word	0x40020008
 800af14:	40020030 	.word	0x40020030
 800af18:	40020058 	.word	0x40020058
 800af1c:	4002006c 	.word	0x4002006c
 800af20:	4002041c 	.word	0x4002041c
 800af24:	40020430 	.word	0x40020430
 800af28:	40020400 	.word	0x40020400
 800af2c:	fffff0ff 	.word	0xfffff0ff
 800af30:	40020000 	.word	0x40020000
 800af34:	fff0ffff 	.word	0xfff0ffff
 800af38:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800af3c:	4ab4      	ldr	r2, [pc, #720]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800af3e:	23a8      	movs	r3, #168	; 0xa8
 800af40:	58d4      	ldr	r4, [r2, r3]
 800af42:	4db4      	ldr	r5, [pc, #720]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x638>)
 800af44:	402c      	ands	r4, r5
 800af46:	50d4      	str	r4, [r2, r3]
 800af48:	58d5      	ldr	r5, [r2, r3]
 800af4a:	24b0      	movs	r4, #176	; 0xb0
 800af4c:	0324      	lsls	r4, r4, #12
 800af4e:	432c      	orrs	r4, r5
 800af50:	50d4      	str	r4, [r2, r3]
 800af52:	e69a      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800af54:	4aae      	ldr	r2, [pc, #696]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800af56:	23a8      	movs	r3, #168	; 0xa8
 800af58:	58d4      	ldr	r4, [r2, r3]
 800af5a:	4daf      	ldr	r5, [pc, #700]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800af5c:	402c      	ands	r4, r5
 800af5e:	50d4      	str	r4, [r2, r3]
 800af60:	58d5      	ldr	r5, [r2, r3]
 800af62:	24b0      	movs	r4, #176	; 0xb0
 800af64:	0424      	lsls	r4, r4, #16
 800af66:	432c      	orrs	r4, r5
 800af68:	50d4      	str	r4, [r2, r3]
 800af6a:	e68e      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800af6c:	4aab      	ldr	r2, [pc, #684]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800af6e:	23a8      	movs	r3, #168	; 0xa8
 800af70:	58d4      	ldr	r4, [r2, r3]
 800af72:	25f0      	movs	r5, #240	; 0xf0
 800af74:	43ac      	bics	r4, r5
 800af76:	50d4      	str	r4, [r2, r3]
 800af78:	58d4      	ldr	r4, [r2, r3]
 800af7a:	3d40      	subs	r5, #64	; 0x40
 800af7c:	432c      	orrs	r4, r5
 800af7e:	50d4      	str	r4, [r2, r3]
 800af80:	e683      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800af82:	680b      	ldr	r3, [r1, #0]
 800af84:	4aa6      	ldr	r2, [pc, #664]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x644>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d01b      	beq.n	800afc2 <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800af8a:	4aa6      	ldr	r2, [pc, #664]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x648>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d023      	beq.n	800afd8 <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800af90:	4aa5      	ldr	r2, [pc, #660]	; (800b228 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d02c      	beq.n	800aff0 <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800af96:	4aa5      	ldr	r2, [pc, #660]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x650>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d035      	beq.n	800b008 <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800af9c:	4aa4      	ldr	r2, [pc, #656]	; (800b230 <RemapAndLinkDMAtoUARTRx+0x654>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d03e      	beq.n	800b020 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800afa2:	4aa4      	ldr	r2, [pc, #656]	; (800b234 <RemapAndLinkDMAtoUARTRx+0x658>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d000      	beq.n	800afaa <RemapAndLinkDMAtoUARTRx+0x3ce>
 800afa8:	e66f      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800afaa:	4a9c      	ldr	r2, [pc, #624]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800afac:	23a8      	movs	r3, #168	; 0xa8
 800afae:	58d4      	ldr	r4, [r2, r3]
 800afb0:	4da1      	ldr	r5, [pc, #644]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800afb2:	402c      	ands	r4, r5
 800afb4:	50d4      	str	r4, [r2, r3]
 800afb6:	58d5      	ldr	r5, [r2, r3]
 800afb8:	24c0      	movs	r4, #192	; 0xc0
 800afba:	0124      	lsls	r4, r4, #4
 800afbc:	432c      	orrs	r4, r5
 800afbe:	50d4      	str	r4, [r2, r3]
 800afc0:	e663      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800afc2:	4a93      	ldr	r2, [pc, #588]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800afc4:	23a8      	movs	r3, #168	; 0xa8
 800afc6:	58d4      	ldr	r4, [r2, r3]
 800afc8:	250f      	movs	r5, #15
 800afca:	43ac      	bics	r4, r5
 800afcc:	50d4      	str	r4, [r2, r3]
 800afce:	58d4      	ldr	r4, [r2, r3]
 800afd0:	3d03      	subs	r5, #3
 800afd2:	432c      	orrs	r4, r5
 800afd4:	50d4      	str	r4, [r2, r3]
 800afd6:	e658      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800afd8:	4a8d      	ldr	r2, [pc, #564]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800afda:	23a8      	movs	r3, #168	; 0xa8
 800afdc:	58d4      	ldr	r4, [r2, r3]
 800afde:	4d96      	ldr	r5, [pc, #600]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800afe0:	402c      	ands	r4, r5
 800afe2:	50d4      	str	r4, [r2, r3]
 800afe4:	58d5      	ldr	r5, [r2, r3]
 800afe6:	24c0      	movs	r4, #192	; 0xc0
 800afe8:	0124      	lsls	r4, r4, #4
 800afea:	432c      	orrs	r4, r5
 800afec:	50d4      	str	r4, [r2, r3]
 800afee:	e64c      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800aff0:	4a87      	ldr	r2, [pc, #540]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800aff2:	23a8      	movs	r3, #168	; 0xa8
 800aff4:	58d4      	ldr	r4, [r2, r3]
 800aff6:	4d87      	ldr	r5, [pc, #540]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x638>)
 800aff8:	402c      	ands	r4, r5
 800affa:	50d4      	str	r4, [r2, r3]
 800affc:	58d5      	ldr	r5, [r2, r3]
 800affe:	24c0      	movs	r4, #192	; 0xc0
 800b000:	0324      	lsls	r4, r4, #12
 800b002:	432c      	orrs	r4, r5
 800b004:	50d4      	str	r4, [r2, r3]
 800b006:	e640      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b008:	4a81      	ldr	r2, [pc, #516]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b00a:	23a8      	movs	r3, #168	; 0xa8
 800b00c:	58d4      	ldr	r4, [r2, r3]
 800b00e:	4d82      	ldr	r5, [pc, #520]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b010:	402c      	ands	r4, r5
 800b012:	50d4      	str	r4, [r2, r3]
 800b014:	58d5      	ldr	r5, [r2, r3]
 800b016:	24c0      	movs	r4, #192	; 0xc0
 800b018:	0424      	lsls	r4, r4, #16
 800b01a:	432c      	orrs	r4, r5
 800b01c:	50d4      	str	r4, [r2, r3]
 800b01e:	e634      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b020:	4a7e      	ldr	r2, [pc, #504]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800b022:	23a8      	movs	r3, #168	; 0xa8
 800b024:	58d4      	ldr	r4, [r2, r3]
 800b026:	25f0      	movs	r5, #240	; 0xf0
 800b028:	43ac      	bics	r4, r5
 800b02a:	50d4      	str	r4, [r2, r3]
 800b02c:	58d4      	ldr	r4, [r2, r3]
 800b02e:	3d30      	subs	r5, #48	; 0x30
 800b030:	432c      	orrs	r4, r5
 800b032:	50d4      	str	r4, [r2, r3]
 800b034:	e629      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b036:	680b      	ldr	r3, [r1, #0]
 800b038:	4a79      	ldr	r2, [pc, #484]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d01b      	beq.n	800b076 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b03e:	4a79      	ldr	r2, [pc, #484]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d023      	beq.n	800b08c <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b044:	4a78      	ldr	r2, [pc, #480]	; (800b228 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d02c      	beq.n	800b0a4 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b04a:	4a78      	ldr	r2, [pc, #480]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x650>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d035      	beq.n	800b0bc <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b050:	4a77      	ldr	r2, [pc, #476]	; (800b230 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d03e      	beq.n	800b0d4 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b056:	4a77      	ldr	r2, [pc, #476]	; (800b234 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d000      	beq.n	800b05e <RemapAndLinkDMAtoUARTRx+0x482>
 800b05c:	e615      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b05e:	4a6f      	ldr	r2, [pc, #444]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800b060:	23a8      	movs	r3, #168	; 0xa8
 800b062:	58d4      	ldr	r4, [r2, r3]
 800b064:	4d74      	ldr	r5, [pc, #464]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b066:	402c      	ands	r4, r5
 800b068:	50d4      	str	r4, [r2, r3]
 800b06a:	58d5      	ldr	r5, [r2, r3]
 800b06c:	24d0      	movs	r4, #208	; 0xd0
 800b06e:	0124      	lsls	r4, r4, #4
 800b070:	432c      	orrs	r4, r5
 800b072:	50d4      	str	r4, [r2, r3]
 800b074:	e609      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b076:	4a66      	ldr	r2, [pc, #408]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b078:	23a8      	movs	r3, #168	; 0xa8
 800b07a:	58d4      	ldr	r4, [r2, r3]
 800b07c:	250f      	movs	r5, #15
 800b07e:	43ac      	bics	r4, r5
 800b080:	50d4      	str	r4, [r2, r3]
 800b082:	58d4      	ldr	r4, [r2, r3]
 800b084:	3d02      	subs	r5, #2
 800b086:	432c      	orrs	r4, r5
 800b088:	50d4      	str	r4, [r2, r3]
 800b08a:	e5fe      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b08c:	4a60      	ldr	r2, [pc, #384]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b08e:	23a8      	movs	r3, #168	; 0xa8
 800b090:	58d4      	ldr	r4, [r2, r3]
 800b092:	4d69      	ldr	r5, [pc, #420]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b094:	402c      	ands	r4, r5
 800b096:	50d4      	str	r4, [r2, r3]
 800b098:	58d5      	ldr	r5, [r2, r3]
 800b09a:	24d0      	movs	r4, #208	; 0xd0
 800b09c:	0124      	lsls	r4, r4, #4
 800b09e:	432c      	orrs	r4, r5
 800b0a0:	50d4      	str	r4, [r2, r3]
 800b0a2:	e5f2      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b0a4:	4a5a      	ldr	r2, [pc, #360]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b0a6:	23a8      	movs	r3, #168	; 0xa8
 800b0a8:	58d4      	ldr	r4, [r2, r3]
 800b0aa:	4d5a      	ldr	r5, [pc, #360]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b0ac:	402c      	ands	r4, r5
 800b0ae:	50d4      	str	r4, [r2, r3]
 800b0b0:	58d5      	ldr	r5, [r2, r3]
 800b0b2:	24d0      	movs	r4, #208	; 0xd0
 800b0b4:	0324      	lsls	r4, r4, #12
 800b0b6:	432c      	orrs	r4, r5
 800b0b8:	50d4      	str	r4, [r2, r3]
 800b0ba:	e5e6      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b0bc:	4a54      	ldr	r2, [pc, #336]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b0be:	23a8      	movs	r3, #168	; 0xa8
 800b0c0:	58d4      	ldr	r4, [r2, r3]
 800b0c2:	4d55      	ldr	r5, [pc, #340]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b0c4:	402c      	ands	r4, r5
 800b0c6:	50d4      	str	r4, [r2, r3]
 800b0c8:	58d5      	ldr	r5, [r2, r3]
 800b0ca:	24d0      	movs	r4, #208	; 0xd0
 800b0cc:	0424      	lsls	r4, r4, #16
 800b0ce:	432c      	orrs	r4, r5
 800b0d0:	50d4      	str	r4, [r2, r3]
 800b0d2:	e5da      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b0d4:	4a51      	ldr	r2, [pc, #324]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800b0d6:	23a8      	movs	r3, #168	; 0xa8
 800b0d8:	58d4      	ldr	r4, [r2, r3]
 800b0da:	25f0      	movs	r5, #240	; 0xf0
 800b0dc:	43ac      	bics	r4, r5
 800b0de:	50d4      	str	r4, [r2, r3]
 800b0e0:	58d4      	ldr	r4, [r2, r3]
 800b0e2:	3d20      	subs	r5, #32
 800b0e4:	432c      	orrs	r4, r5
 800b0e6:	50d4      	str	r4, [r2, r3]
 800b0e8:	e5cf      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b0ea:	680b      	ldr	r3, [r1, #0]
 800b0ec:	4a4c      	ldr	r2, [pc, #304]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d01b      	beq.n	800b12a <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b0f2:	4a4c      	ldr	r2, [pc, #304]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d023      	beq.n	800b140 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b0f8:	4a4b      	ldr	r2, [pc, #300]	; (800b228 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d02c      	beq.n	800b158 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b0fe:	4a4b      	ldr	r2, [pc, #300]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x650>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d035      	beq.n	800b170 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b104:	4a4a      	ldr	r2, [pc, #296]	; (800b230 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d03e      	beq.n	800b188 <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b10a:	4a4a      	ldr	r2, [pc, #296]	; (800b234 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d000      	beq.n	800b112 <RemapAndLinkDMAtoUARTRx+0x536>
 800b110:	e5bb      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b112:	4a42      	ldr	r2, [pc, #264]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800b114:	23a8      	movs	r3, #168	; 0xa8
 800b116:	58d4      	ldr	r4, [r2, r3]
 800b118:	4d47      	ldr	r5, [pc, #284]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b11a:	402c      	ands	r4, r5
 800b11c:	50d4      	str	r4, [r2, r3]
 800b11e:	58d5      	ldr	r5, [r2, r3]
 800b120:	24e0      	movs	r4, #224	; 0xe0
 800b122:	0124      	lsls	r4, r4, #4
 800b124:	432c      	orrs	r4, r5
 800b126:	50d4      	str	r4, [r2, r3]
 800b128:	e5af      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b12a:	4a39      	ldr	r2, [pc, #228]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b12c:	23a8      	movs	r3, #168	; 0xa8
 800b12e:	58d4      	ldr	r4, [r2, r3]
 800b130:	250f      	movs	r5, #15
 800b132:	43ac      	bics	r4, r5
 800b134:	50d4      	str	r4, [r2, r3]
 800b136:	58d4      	ldr	r4, [r2, r3]
 800b138:	3d01      	subs	r5, #1
 800b13a:	432c      	orrs	r4, r5
 800b13c:	50d4      	str	r4, [r2, r3]
 800b13e:	e5a4      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b140:	4a33      	ldr	r2, [pc, #204]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b142:	23a8      	movs	r3, #168	; 0xa8
 800b144:	58d4      	ldr	r4, [r2, r3]
 800b146:	4d3c      	ldr	r5, [pc, #240]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b148:	402c      	ands	r4, r5
 800b14a:	50d4      	str	r4, [r2, r3]
 800b14c:	58d5      	ldr	r5, [r2, r3]
 800b14e:	24e0      	movs	r4, #224	; 0xe0
 800b150:	0124      	lsls	r4, r4, #4
 800b152:	432c      	orrs	r4, r5
 800b154:	50d4      	str	r4, [r2, r3]
 800b156:	e598      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b158:	4a2d      	ldr	r2, [pc, #180]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b15a:	23a8      	movs	r3, #168	; 0xa8
 800b15c:	58d4      	ldr	r4, [r2, r3]
 800b15e:	4d2d      	ldr	r5, [pc, #180]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b160:	402c      	ands	r4, r5
 800b162:	50d4      	str	r4, [r2, r3]
 800b164:	58d5      	ldr	r5, [r2, r3]
 800b166:	24e0      	movs	r4, #224	; 0xe0
 800b168:	0324      	lsls	r4, r4, #12
 800b16a:	432c      	orrs	r4, r5
 800b16c:	50d4      	str	r4, [r2, r3]
 800b16e:	e58c      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b170:	4a27      	ldr	r2, [pc, #156]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b172:	23a8      	movs	r3, #168	; 0xa8
 800b174:	58d4      	ldr	r4, [r2, r3]
 800b176:	4d28      	ldr	r5, [pc, #160]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b178:	402c      	ands	r4, r5
 800b17a:	50d4      	str	r4, [r2, r3]
 800b17c:	58d5      	ldr	r5, [r2, r3]
 800b17e:	24e0      	movs	r4, #224	; 0xe0
 800b180:	0424      	lsls	r4, r4, #16
 800b182:	432c      	orrs	r4, r5
 800b184:	50d4      	str	r4, [r2, r3]
 800b186:	e580      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b188:	4a24      	ldr	r2, [pc, #144]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800b18a:	23a8      	movs	r3, #168	; 0xa8
 800b18c:	58d4      	ldr	r4, [r2, r3]
 800b18e:	25f0      	movs	r5, #240	; 0xf0
 800b190:	43ac      	bics	r4, r5
 800b192:	50d4      	str	r4, [r2, r3]
 800b194:	58d4      	ldr	r4, [r2, r3]
 800b196:	3d10      	subs	r5, #16
 800b198:	432c      	orrs	r4, r5
 800b19a:	50d4      	str	r4, [r2, r3]
 800b19c:	e575      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b19e:	4a1c      	ldr	r2, [pc, #112]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b1a0:	23a8      	movs	r3, #168	; 0xa8
 800b1a2:	58d5      	ldr	r5, [r2, r3]
 800b1a4:	260f      	movs	r6, #15
 800b1a6:	43b5      	bics	r5, r6
 800b1a8:	50d5      	str	r5, [r2, r3]
 800b1aa:	58d4      	ldr	r4, [r2, r3]
 800b1ac:	4334      	orrs	r4, r6
 800b1ae:	50d4      	str	r4, [r2, r3]
 800b1b0:	e56b      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b1b2:	4a17      	ldr	r2, [pc, #92]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b1b4:	23a8      	movs	r3, #168	; 0xa8
 800b1b6:	58d4      	ldr	r4, [r2, r3]
 800b1b8:	4d1f      	ldr	r5, [pc, #124]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b1ba:	402c      	ands	r4, r5
 800b1bc:	50d4      	str	r4, [r2, r3]
 800b1be:	58d5      	ldr	r5, [r2, r3]
 800b1c0:	24f0      	movs	r4, #240	; 0xf0
 800b1c2:	0124      	lsls	r4, r4, #4
 800b1c4:	432c      	orrs	r4, r5
 800b1c6:	50d4      	str	r4, [r2, r3]
 800b1c8:	e55f      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b1ca:	4a11      	ldr	r2, [pc, #68]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b1cc:	23a8      	movs	r3, #168	; 0xa8
 800b1ce:	58d4      	ldr	r4, [r2, r3]
 800b1d0:	4d10      	ldr	r5, [pc, #64]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b1d2:	402c      	ands	r4, r5
 800b1d4:	50d4      	str	r4, [r2, r3]
 800b1d6:	58d5      	ldr	r5, [r2, r3]
 800b1d8:	24f0      	movs	r4, #240	; 0xf0
 800b1da:	0324      	lsls	r4, r4, #12
 800b1dc:	432c      	orrs	r4, r5
 800b1de:	50d4      	str	r4, [r2, r3]
 800b1e0:	e553      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b1e2:	4a0b      	ldr	r2, [pc, #44]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b1e4:	23a8      	movs	r3, #168	; 0xa8
 800b1e6:	58d4      	ldr	r4, [r2, r3]
 800b1e8:	4d0b      	ldr	r5, [pc, #44]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b1ea:	402c      	ands	r4, r5
 800b1ec:	50d4      	str	r4, [r2, r3]
 800b1ee:	58d5      	ldr	r5, [r2, r3]
 800b1f0:	24f0      	movs	r4, #240	; 0xf0
 800b1f2:	0424      	lsls	r4, r4, #16
 800b1f4:	432c      	orrs	r4, r5
 800b1f6:	50d4      	str	r4, [r2, r3]
 800b1f8:	e547      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b1fa:	4a08      	ldr	r2, [pc, #32]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x640>)
 800b1fc:	23a8      	movs	r3, #168	; 0xa8
 800b1fe:	58d5      	ldr	r5, [r2, r3]
 800b200:	26f0      	movs	r6, #240	; 0xf0
 800b202:	43b5      	bics	r5, r6
 800b204:	50d5      	str	r5, [r2, r3]
 800b206:	58d4      	ldr	r4, [r2, r3]
 800b208:	4334      	orrs	r4, r6
 800b20a:	50d4      	str	r4, [r2, r3]
 800b20c:	e53d      	b.n	800ac8a <RemapAndLinkDMAtoUARTRx+0xae>
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	40020000 	.word	0x40020000
 800b214:	fff0ffff 	.word	0xfff0ffff
 800b218:	ff0fffff 	.word	0xff0fffff
 800b21c:	40020400 	.word	0x40020400
 800b220:	40020008 	.word	0x40020008
 800b224:	40020030 	.word	0x40020030
 800b228:	40020058 	.word	0x40020058
 800b22c:	4002006c 	.word	0x4002006c
 800b230:	4002041c 	.word	0x4002041c
 800b234:	40020430 	.word	0x40020430
 800b238:	fffff0ff 	.word	0xfffff0ff

0800b23c <DMA_MSG_RX_Setup>:
{	
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	0004      	movs	r4, r0
 800b240:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b242:	f7ff fccb 	bl	800abdc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b246:	2100      	movs	r1, #0
 800b248:	0028      	movs	r0, r5
 800b24a:	f7ff fc0d 	bl	800aa68 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800b24e:	0020      	movs	r0, r4
 800b250:	f7ff fb4c 	bl	800a8ec <GetPort>
 800b254:	1e41      	subs	r1, r0, #1
 800b256:	0189      	lsls	r1, r1, #6
 800b258:	4803      	ldr	r0, [pc, #12]	; (800b268 <DMA_MSG_RX_Setup+0x2c>)
 800b25a:	1809      	adds	r1, r1, r0
 800b25c:	2240      	movs	r2, #64	; 0x40
 800b25e:	0020      	movs	r0, r4
 800b260:	f005 fd6e 	bl	8010d40 <HAL_UART_Receive_DMA>
}
 800b264:	bd70      	pop	{r4, r5, r6, pc}
 800b266:	46c0      	nop			; (mov r8, r8)
 800b268:	20000f78 	.word	0x20000f78

0800b26c <SetupMessagingRxDMAs>:
{	
 800b26c:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b26e:	4b1b      	ldr	r3, [pc, #108]	; (800b2dc <SetupMessagingRxDMAs+0x70>)
 800b270:	785b      	ldrb	r3, [r3, #1]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d014      	beq.n	800b2a0 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800b276:	4b19      	ldr	r3, [pc, #100]	; (800b2dc <SetupMessagingRxDMAs+0x70>)
 800b278:	789b      	ldrb	r3, [r3, #2]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d015      	beq.n	800b2aa <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800b27e:	4b17      	ldr	r3, [pc, #92]	; (800b2dc <SetupMessagingRxDMAs+0x70>)
 800b280:	78db      	ldrb	r3, [r3, #3]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d016      	beq.n	800b2b4 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800b286:	4b15      	ldr	r3, [pc, #84]	; (800b2dc <SetupMessagingRxDMAs+0x70>)
 800b288:	791b      	ldrb	r3, [r3, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d017      	beq.n	800b2be <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <SetupMessagingRxDMAs+0x70>)
 800b290:	795b      	ldrb	r3, [r3, #5]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d018      	beq.n	800b2c8 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800b296:	4b11      	ldr	r3, [pc, #68]	; (800b2dc <SetupMessagingRxDMAs+0x70>)
 800b298:	799b      	ldrb	r3, [r3, #6]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d019      	beq.n	800b2d2 <SetupMessagingRxDMAs+0x66>
}
 800b29e:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b2a0:	490f      	ldr	r1, [pc, #60]	; (800b2e0 <SetupMessagingRxDMAs+0x74>)
 800b2a2:	4810      	ldr	r0, [pc, #64]	; (800b2e4 <SetupMessagingRxDMAs+0x78>)
 800b2a4:	f7ff ffca 	bl	800b23c <DMA_MSG_RX_Setup>
 800b2a8:	e7e5      	b.n	800b276 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b2aa:	490f      	ldr	r1, [pc, #60]	; (800b2e8 <SetupMessagingRxDMAs+0x7c>)
 800b2ac:	480f      	ldr	r0, [pc, #60]	; (800b2ec <SetupMessagingRxDMAs+0x80>)
 800b2ae:	f7ff ffc5 	bl	800b23c <DMA_MSG_RX_Setup>
 800b2b2:	e7e4      	b.n	800b27e <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b2b4:	490e      	ldr	r1, [pc, #56]	; (800b2f0 <SetupMessagingRxDMAs+0x84>)
 800b2b6:	480f      	ldr	r0, [pc, #60]	; (800b2f4 <SetupMessagingRxDMAs+0x88>)
 800b2b8:	f7ff ffc0 	bl	800b23c <DMA_MSG_RX_Setup>
 800b2bc:	e7e3      	b.n	800b286 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b2be:	490e      	ldr	r1, [pc, #56]	; (800b2f8 <SetupMessagingRxDMAs+0x8c>)
 800b2c0:	480e      	ldr	r0, [pc, #56]	; (800b2fc <SetupMessagingRxDMAs+0x90>)
 800b2c2:	f7ff ffbb 	bl	800b23c <DMA_MSG_RX_Setup>
 800b2c6:	e7e2      	b.n	800b28e <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b2c8:	490d      	ldr	r1, [pc, #52]	; (800b300 <SetupMessagingRxDMAs+0x94>)
 800b2ca:	480e      	ldr	r0, [pc, #56]	; (800b304 <SetupMessagingRxDMAs+0x98>)
 800b2cc:	f7ff ffb6 	bl	800b23c <DMA_MSG_RX_Setup>
 800b2d0:	e7e1      	b.n	800b296 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800b2d2:	490d      	ldr	r1, [pc, #52]	; (800b308 <SetupMessagingRxDMAs+0x9c>)
 800b2d4:	480d      	ldr	r0, [pc, #52]	; (800b30c <SetupMessagingRxDMAs+0xa0>)
 800b2d6:	f7ff ffb1 	bl	800b23c <DMA_MSG_RX_Setup>
}
 800b2da:	e7e0      	b.n	800b29e <SetupMessagingRxDMAs+0x32>
 800b2dc:	20000dcc 	.word	0x20000dcc
 800b2e0:	200013d8 	.word	0x200013d8
 800b2e4:	200068ec 	.word	0x200068ec
 800b2e8:	20001410 	.word	0x20001410
 800b2ec:	2000680c 	.word	0x2000680c
 800b2f0:	20001448 	.word	0x20001448
 800b2f4:	200066bc 	.word	0x200066bc
 800b2f8:	20001480 	.word	0x20001480
 800b2fc:	2000679c 	.word	0x2000679c
 800b300:	200014b8 	.word	0x200014b8
 800b304:	2000672c 	.word	0x2000672c
 800b308:	200014f0 	.word	0x200014f0
 800b30c:	2000687c 	.word	0x2000687c

0800b310 <DMA_STREAM_Setup>:
{	
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	0005      	movs	r5, r0
 800b314:	000f      	movs	r7, r1
 800b316:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b318:	f7ff fae8 	bl	800a8ec <GetPort>
	hDMA = &streamDMA[port-1];
 800b31c:	3801      	subs	r0, #1
 800b31e:	00c4      	lsls	r4, r0, #3
 800b320:	1a24      	subs	r4, r4, r0
 800b322:	00e4      	lsls	r4, r4, #3
 800b324:	4809      	ldr	r0, [pc, #36]	; (800b34c <DMA_STREAM_Setup+0x3c>)
 800b326:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b328:	0021      	movs	r1, r4
 800b32a:	0028      	movs	r0, r5
 800b32c:	f7ff fc56 	bl	800abdc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b330:	2101      	movs	r1, #1
 800b332:	0020      	movs	r0, r4
 800b334:	f7ff fb98 	bl	800aa68 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b338:	2369      	movs	r3, #105	; 0x69
 800b33a:	2201      	movs	r2, #1
 800b33c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	3128      	adds	r1, #40	; 0x28
 800b342:	0032      	movs	r2, r6
 800b344:	0028      	movs	r0, r5
 800b346:	f005 fcfb 	bl	8010d40 <HAL_UART_Receive_DMA>
}
 800b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34c:	200015d0 	.word	0x200015d0

0800b350 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b350:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b352:	6803      	ldr	r3, [r0, #0]
 800b354:	4ac3      	ldr	r2, [pc, #780]	; (800b664 <RemapAndLinkDMAtoUARTTx+0x314>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d03e      	beq.n	800b3d8 <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b35a:	4ac3      	ldr	r2, [pc, #780]	; (800b668 <RemapAndLinkDMAtoUARTTx+0x318>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d100      	bne.n	800b362 <RemapAndLinkDMAtoUARTTx+0x12>
 800b360:	e096      	b.n	800b490 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b362:	4ac2      	ldr	r2, [pc, #776]	; (800b66c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d100      	bne.n	800b36a <RemapAndLinkDMAtoUARTTx+0x1a>
 800b368:	e0eb      	b.n	800b542 <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800b36a:	4ac1      	ldr	r2, [pc, #772]	; (800b670 <RemapAndLinkDMAtoUARTTx+0x320>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d100      	bne.n	800b372 <RemapAndLinkDMAtoUARTTx+0x22>
 800b370:	e141      	b.n	800b5f6 <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800b372:	4ac0      	ldr	r2, [pc, #768]	; (800b674 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d100      	bne.n	800b37a <RemapAndLinkDMAtoUARTTx+0x2a>
 800b378:	e1bd      	b.n	800b6f6 <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800b37a:	4abf      	ldr	r2, [pc, #764]	; (800b678 <RemapAndLinkDMAtoUARTTx+0x328>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d100      	bne.n	800b382 <RemapAndLinkDMAtoUARTTx+0x32>
 800b380:	e213      	b.n	800b7aa <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800b382:	4abe      	ldr	r2, [pc, #760]	; (800b67c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d100      	bne.n	800b38a <RemapAndLinkDMAtoUARTTx+0x3a>
 800b388:	e269      	b.n	800b85e <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800b38a:	4abd      	ldr	r2, [pc, #756]	; (800b680 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d136      	bne.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
 800b390:	680b      	ldr	r3, [r1, #0]
 800b392:	4abc      	ldr	r2, [pc, #752]	; (800b684 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d100      	bne.n	800b39a <RemapAndLinkDMAtoUARTTx+0x4a>
 800b398:	e2bb      	b.n	800b912 <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800b39a:	4abb      	ldr	r2, [pc, #748]	; (800b688 <RemapAndLinkDMAtoUARTTx+0x338>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d100      	bne.n	800b3a2 <RemapAndLinkDMAtoUARTTx+0x52>
 800b3a0:	e2c1      	b.n	800b926 <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800b3a2:	4aba      	ldr	r2, [pc, #744]	; (800b68c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d100      	bne.n	800b3aa <RemapAndLinkDMAtoUARTTx+0x5a>
 800b3a8:	e2c9      	b.n	800b93e <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800b3aa:	4ab9      	ldr	r2, [pc, #740]	; (800b690 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d100      	bne.n	800b3b2 <RemapAndLinkDMAtoUARTTx+0x62>
 800b3b0:	e2d1      	b.n	800b956 <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800b3b2:	4ab8      	ldr	r2, [pc, #736]	; (800b694 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d100      	bne.n	800b3ba <RemapAndLinkDMAtoUARTTx+0x6a>
 800b3b8:	e2d7      	b.n	800b96a <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800b3ba:	4ab7      	ldr	r2, [pc, #732]	; (800b698 <RemapAndLinkDMAtoUARTTx+0x348>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d11e      	bne.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800b3c0:	4ab6      	ldr	r2, [pc, #728]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b3c2:	23a8      	movs	r3, #168	; 0xa8
 800b3c4:	58d4      	ldr	r4, [r2, r3]
 800b3c6:	4db6      	ldr	r5, [pc, #728]	; (800b6a0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b3c8:	402c      	ands	r4, r5
 800b3ca:	50d4      	str	r4, [r2, r3]
 800b3cc:	58d5      	ldr	r5, [r2, r3]
 800b3ce:	24f0      	movs	r4, #240	; 0xf0
 800b3d0:	0324      	lsls	r4, r4, #12
 800b3d2:	432c      	orrs	r4, r5
 800b3d4:	50d4      	str	r4, [r2, r3]
 800b3d6:	e012      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b3d8:	680b      	ldr	r3, [r1, #0]
 800b3da:	4aaa      	ldr	r2, [pc, #680]	; (800b684 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d011      	beq.n	800b404 <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800b3e0:	4aa9      	ldr	r2, [pc, #676]	; (800b688 <RemapAndLinkDMAtoUARTTx+0x338>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d019      	beq.n	800b41a <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800b3e6:	4aa9      	ldr	r2, [pc, #676]	; (800b68c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d022      	beq.n	800b432 <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800b3ec:	4aa8      	ldr	r2, [pc, #672]	; (800b690 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d02b      	beq.n	800b44a <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800b3f2:	4aa8      	ldr	r2, [pc, #672]	; (800b694 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d033      	beq.n	800b460 <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800b3f8:	4aa7      	ldr	r2, [pc, #668]	; (800b698 <RemapAndLinkDMAtoUARTTx+0x348>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d03c      	beq.n	800b478 <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800b3fe:	6601      	str	r1, [r0, #96]	; 0x60
 800b400:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b402:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800b404:	4aa7      	ldr	r2, [pc, #668]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b406:	23a8      	movs	r3, #168	; 0xa8
 800b408:	58d4      	ldr	r4, [r2, r3]
 800b40a:	25f0      	movs	r5, #240	; 0xf0
 800b40c:	43ac      	bics	r4, r5
 800b40e:	50d4      	str	r4, [r2, r3]
 800b410:	58d4      	ldr	r4, [r2, r3]
 800b412:	3d70      	subs	r5, #112	; 0x70
 800b414:	432c      	orrs	r4, r5
 800b416:	50d4      	str	r4, [r2, r3]
 800b418:	e7f1      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800b41a:	4aa2      	ldr	r2, [pc, #648]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b41c:	23a8      	movs	r3, #168	; 0xa8
 800b41e:	58d4      	ldr	r4, [r2, r3]
 800b420:	4da1      	ldr	r5, [pc, #644]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b422:	402c      	ands	r4, r5
 800b424:	50d4      	str	r4, [r2, r3]
 800b426:	58d5      	ldr	r5, [r2, r3]
 800b428:	2480      	movs	r4, #128	; 0x80
 800b42a:	0224      	lsls	r4, r4, #8
 800b42c:	432c      	orrs	r4, r5
 800b42e:	50d4      	str	r4, [r2, r3]
 800b430:	e7e5      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800b432:	4a9c      	ldr	r2, [pc, #624]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b434:	23a8      	movs	r3, #168	; 0xa8
 800b436:	58d4      	ldr	r4, [r2, r3]
 800b438:	4d9c      	ldr	r5, [pc, #624]	; (800b6ac <RemapAndLinkDMAtoUARTTx+0x35c>)
 800b43a:	402c      	ands	r4, r5
 800b43c:	50d4      	str	r4, [r2, r3]
 800b43e:	58d5      	ldr	r5, [r2, r3]
 800b440:	2480      	movs	r4, #128	; 0x80
 800b442:	0524      	lsls	r4, r4, #20
 800b444:	432c      	orrs	r4, r5
 800b446:	50d4      	str	r4, [r2, r3]
 800b448:	e7d9      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800b44a:	4a94      	ldr	r2, [pc, #592]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b44c:	23a8      	movs	r3, #168	; 0xa8
 800b44e:	58d4      	ldr	r4, [r2, r3]
 800b450:	250f      	movs	r5, #15
 800b452:	43ac      	bics	r4, r5
 800b454:	50d4      	str	r4, [r2, r3]
 800b456:	58d4      	ldr	r4, [r2, r3]
 800b458:	3d07      	subs	r5, #7
 800b45a:	432c      	orrs	r4, r5
 800b45c:	50d4      	str	r4, [r2, r3]
 800b45e:	e7ce      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800b460:	4a8e      	ldr	r2, [pc, #568]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b462:	23a8      	movs	r3, #168	; 0xa8
 800b464:	58d4      	ldr	r4, [r2, r3]
 800b466:	4d90      	ldr	r5, [pc, #576]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b468:	402c      	ands	r4, r5
 800b46a:	50d4      	str	r4, [r2, r3]
 800b46c:	58d5      	ldr	r5, [r2, r3]
 800b46e:	2480      	movs	r4, #128	; 0x80
 800b470:	0224      	lsls	r4, r4, #8
 800b472:	432c      	orrs	r4, r5
 800b474:	50d4      	str	r4, [r2, r3]
 800b476:	e7c2      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800b478:	4a88      	ldr	r2, [pc, #544]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b47a:	23a8      	movs	r3, #168	; 0xa8
 800b47c:	58d4      	ldr	r4, [r2, r3]
 800b47e:	4d88      	ldr	r5, [pc, #544]	; (800b6a0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b480:	402c      	ands	r4, r5
 800b482:	50d4      	str	r4, [r2, r3]
 800b484:	58d5      	ldr	r5, [r2, r3]
 800b486:	2480      	movs	r4, #128	; 0x80
 800b488:	0324      	lsls	r4, r4, #12
 800b48a:	432c      	orrs	r4, r5
 800b48c:	50d4      	str	r4, [r2, r3]
 800b48e:	e7b6      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b490:	680b      	ldr	r3, [r1, #0]
 800b492:	4a7c      	ldr	r2, [pc, #496]	; (800b684 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d01a      	beq.n	800b4ce <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800b498:	4a7b      	ldr	r2, [pc, #492]	; (800b688 <RemapAndLinkDMAtoUARTTx+0x338>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d022      	beq.n	800b4e4 <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800b49e:	4a7b      	ldr	r2, [pc, #492]	; (800b68c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d02b      	beq.n	800b4fc <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800b4a4:	4a7a      	ldr	r2, [pc, #488]	; (800b690 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d034      	beq.n	800b514 <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800b4aa:	4a7a      	ldr	r2, [pc, #488]	; (800b694 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d03c      	beq.n	800b52a <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800b4b0:	4a79      	ldr	r2, [pc, #484]	; (800b698 <RemapAndLinkDMAtoUARTTx+0x348>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d1a3      	bne.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800b4b6:	4a79      	ldr	r2, [pc, #484]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b4b8:	23a8      	movs	r3, #168	; 0xa8
 800b4ba:	58d4      	ldr	r4, [r2, r3]
 800b4bc:	4d78      	ldr	r5, [pc, #480]	; (800b6a0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b4be:	402c      	ands	r4, r5
 800b4c0:	50d4      	str	r4, [r2, r3]
 800b4c2:	58d5      	ldr	r5, [r2, r3]
 800b4c4:	2490      	movs	r4, #144	; 0x90
 800b4c6:	0324      	lsls	r4, r4, #12
 800b4c8:	432c      	orrs	r4, r5
 800b4ca:	50d4      	str	r4, [r2, r3]
 800b4cc:	e797      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800b4ce:	4a75      	ldr	r2, [pc, #468]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b4d0:	23a8      	movs	r3, #168	; 0xa8
 800b4d2:	58d4      	ldr	r4, [r2, r3]
 800b4d4:	25f0      	movs	r5, #240	; 0xf0
 800b4d6:	43ac      	bics	r4, r5
 800b4d8:	50d4      	str	r4, [r2, r3]
 800b4da:	58d4      	ldr	r4, [r2, r3]
 800b4dc:	3d60      	subs	r5, #96	; 0x60
 800b4de:	432c      	orrs	r4, r5
 800b4e0:	50d4      	str	r4, [r2, r3]
 800b4e2:	e78c      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800b4e4:	4a6f      	ldr	r2, [pc, #444]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b4e6:	23a8      	movs	r3, #168	; 0xa8
 800b4e8:	58d4      	ldr	r4, [r2, r3]
 800b4ea:	4d6f      	ldr	r5, [pc, #444]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b4ec:	402c      	ands	r4, r5
 800b4ee:	50d4      	str	r4, [r2, r3]
 800b4f0:	58d5      	ldr	r5, [r2, r3]
 800b4f2:	2490      	movs	r4, #144	; 0x90
 800b4f4:	0224      	lsls	r4, r4, #8
 800b4f6:	432c      	orrs	r4, r5
 800b4f8:	50d4      	str	r4, [r2, r3]
 800b4fa:	e780      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800b4fc:	4a69      	ldr	r2, [pc, #420]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b4fe:	23a8      	movs	r3, #168	; 0xa8
 800b500:	58d4      	ldr	r4, [r2, r3]
 800b502:	4d6a      	ldr	r5, [pc, #424]	; (800b6ac <RemapAndLinkDMAtoUARTTx+0x35c>)
 800b504:	402c      	ands	r4, r5
 800b506:	50d4      	str	r4, [r2, r3]
 800b508:	58d5      	ldr	r5, [r2, r3]
 800b50a:	2490      	movs	r4, #144	; 0x90
 800b50c:	0524      	lsls	r4, r4, #20
 800b50e:	432c      	orrs	r4, r5
 800b510:	50d4      	str	r4, [r2, r3]
 800b512:	e774      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800b514:	4a61      	ldr	r2, [pc, #388]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b516:	23a8      	movs	r3, #168	; 0xa8
 800b518:	58d4      	ldr	r4, [r2, r3]
 800b51a:	250f      	movs	r5, #15
 800b51c:	43ac      	bics	r4, r5
 800b51e:	50d4      	str	r4, [r2, r3]
 800b520:	58d4      	ldr	r4, [r2, r3]
 800b522:	3d06      	subs	r5, #6
 800b524:	432c      	orrs	r4, r5
 800b526:	50d4      	str	r4, [r2, r3]
 800b528:	e769      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800b52a:	4a5c      	ldr	r2, [pc, #368]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b52c:	23a8      	movs	r3, #168	; 0xa8
 800b52e:	58d4      	ldr	r4, [r2, r3]
 800b530:	4d5d      	ldr	r5, [pc, #372]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b532:	402c      	ands	r4, r5
 800b534:	50d4      	str	r4, [r2, r3]
 800b536:	58d5      	ldr	r5, [r2, r3]
 800b538:	2490      	movs	r4, #144	; 0x90
 800b53a:	0224      	lsls	r4, r4, #8
 800b53c:	432c      	orrs	r4, r5
 800b53e:	50d4      	str	r4, [r2, r3]
 800b540:	e75d      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b542:	680b      	ldr	r3, [r1, #0]
 800b544:	4a4f      	ldr	r2, [pc, #316]	; (800b684 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d01b      	beq.n	800b582 <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800b54a:	4a4f      	ldr	r2, [pc, #316]	; (800b688 <RemapAndLinkDMAtoUARTTx+0x338>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d023      	beq.n	800b598 <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800b550:	4a4e      	ldr	r2, [pc, #312]	; (800b68c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d02c      	beq.n	800b5b0 <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800b556:	4a4e      	ldr	r2, [pc, #312]	; (800b690 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d035      	beq.n	800b5c8 <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800b55c:	4a4d      	ldr	r2, [pc, #308]	; (800b694 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d03d      	beq.n	800b5de <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800b562:	4a4d      	ldr	r2, [pc, #308]	; (800b698 <RemapAndLinkDMAtoUARTTx+0x348>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d000      	beq.n	800b56a <RemapAndLinkDMAtoUARTTx+0x21a>
 800b568:	e749      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800b56a:	4a4c      	ldr	r2, [pc, #304]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b56c:	23a8      	movs	r3, #168	; 0xa8
 800b56e:	58d4      	ldr	r4, [r2, r3]
 800b570:	4d4b      	ldr	r5, [pc, #300]	; (800b6a0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b572:	402c      	ands	r4, r5
 800b574:	50d4      	str	r4, [r2, r3]
 800b576:	58d5      	ldr	r5, [r2, r3]
 800b578:	24a0      	movs	r4, #160	; 0xa0
 800b57a:	0324      	lsls	r4, r4, #12
 800b57c:	432c      	orrs	r4, r5
 800b57e:	50d4      	str	r4, [r2, r3]
 800b580:	e73d      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800b582:	4a48      	ldr	r2, [pc, #288]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b584:	23a8      	movs	r3, #168	; 0xa8
 800b586:	58d4      	ldr	r4, [r2, r3]
 800b588:	25f0      	movs	r5, #240	; 0xf0
 800b58a:	43ac      	bics	r4, r5
 800b58c:	50d4      	str	r4, [r2, r3]
 800b58e:	58d4      	ldr	r4, [r2, r3]
 800b590:	3d50      	subs	r5, #80	; 0x50
 800b592:	432c      	orrs	r4, r5
 800b594:	50d4      	str	r4, [r2, r3]
 800b596:	e732      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800b598:	4a42      	ldr	r2, [pc, #264]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b59a:	23a8      	movs	r3, #168	; 0xa8
 800b59c:	58d4      	ldr	r4, [r2, r3]
 800b59e:	4d42      	ldr	r5, [pc, #264]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b5a0:	402c      	ands	r4, r5
 800b5a2:	50d4      	str	r4, [r2, r3]
 800b5a4:	58d5      	ldr	r5, [r2, r3]
 800b5a6:	24a0      	movs	r4, #160	; 0xa0
 800b5a8:	0224      	lsls	r4, r4, #8
 800b5aa:	432c      	orrs	r4, r5
 800b5ac:	50d4      	str	r4, [r2, r3]
 800b5ae:	e726      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800b5b0:	4a3c      	ldr	r2, [pc, #240]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b5b2:	23a8      	movs	r3, #168	; 0xa8
 800b5b4:	58d4      	ldr	r4, [r2, r3]
 800b5b6:	4d3d      	ldr	r5, [pc, #244]	; (800b6ac <RemapAndLinkDMAtoUARTTx+0x35c>)
 800b5b8:	402c      	ands	r4, r5
 800b5ba:	50d4      	str	r4, [r2, r3]
 800b5bc:	58d5      	ldr	r5, [r2, r3]
 800b5be:	24a0      	movs	r4, #160	; 0xa0
 800b5c0:	0524      	lsls	r4, r4, #20
 800b5c2:	432c      	orrs	r4, r5
 800b5c4:	50d4      	str	r4, [r2, r3]
 800b5c6:	e71a      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800b5c8:	4a34      	ldr	r2, [pc, #208]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b5ca:	23a8      	movs	r3, #168	; 0xa8
 800b5cc:	58d4      	ldr	r4, [r2, r3]
 800b5ce:	250f      	movs	r5, #15
 800b5d0:	43ac      	bics	r4, r5
 800b5d2:	50d4      	str	r4, [r2, r3]
 800b5d4:	58d4      	ldr	r4, [r2, r3]
 800b5d6:	3d05      	subs	r5, #5
 800b5d8:	432c      	orrs	r4, r5
 800b5da:	50d4      	str	r4, [r2, r3]
 800b5dc:	e70f      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800b5de:	4a2f      	ldr	r2, [pc, #188]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b5e0:	23a8      	movs	r3, #168	; 0xa8
 800b5e2:	58d4      	ldr	r4, [r2, r3]
 800b5e4:	4d30      	ldr	r5, [pc, #192]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b5e6:	402c      	ands	r4, r5
 800b5e8:	50d4      	str	r4, [r2, r3]
 800b5ea:	58d5      	ldr	r5, [r2, r3]
 800b5ec:	24a0      	movs	r4, #160	; 0xa0
 800b5ee:	0224      	lsls	r4, r4, #8
 800b5f0:	432c      	orrs	r4, r5
 800b5f2:	50d4      	str	r4, [r2, r3]
 800b5f4:	e703      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800b5f6:	680b      	ldr	r3, [r1, #0]
 800b5f8:	4a22      	ldr	r2, [pc, #136]	; (800b684 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d01b      	beq.n	800b636 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800b5fe:	4a22      	ldr	r2, [pc, #136]	; (800b688 <RemapAndLinkDMAtoUARTTx+0x338>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d023      	beq.n	800b64c <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800b604:	4a21      	ldr	r2, [pc, #132]	; (800b68c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d052      	beq.n	800b6b0 <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800b60a:	4a21      	ldr	r2, [pc, #132]	; (800b690 <RemapAndLinkDMAtoUARTTx+0x340>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d05b      	beq.n	800b6c8 <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800b610:	4a20      	ldr	r2, [pc, #128]	; (800b694 <RemapAndLinkDMAtoUARTTx+0x344>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d063      	beq.n	800b6de <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800b616:	4a20      	ldr	r2, [pc, #128]	; (800b698 <RemapAndLinkDMAtoUARTTx+0x348>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d000      	beq.n	800b61e <RemapAndLinkDMAtoUARTTx+0x2ce>
 800b61c:	e6ef      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800b61e:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800b620:	23a8      	movs	r3, #168	; 0xa8
 800b622:	58d4      	ldr	r4, [r2, r3]
 800b624:	4d1e      	ldr	r5, [pc, #120]	; (800b6a0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800b626:	402c      	ands	r4, r5
 800b628:	50d4      	str	r4, [r2, r3]
 800b62a:	58d5      	ldr	r5, [r2, r3]
 800b62c:	24b0      	movs	r4, #176	; 0xb0
 800b62e:	0324      	lsls	r4, r4, #12
 800b630:	432c      	orrs	r4, r5
 800b632:	50d4      	str	r4, [r2, r3]
 800b634:	e6e3      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800b636:	4a1b      	ldr	r2, [pc, #108]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b638:	23a8      	movs	r3, #168	; 0xa8
 800b63a:	58d4      	ldr	r4, [r2, r3]
 800b63c:	25f0      	movs	r5, #240	; 0xf0
 800b63e:	43ac      	bics	r4, r5
 800b640:	50d4      	str	r4, [r2, r3]
 800b642:	58d4      	ldr	r4, [r2, r3]
 800b644:	3d40      	subs	r5, #64	; 0x40
 800b646:	432c      	orrs	r4, r5
 800b648:	50d4      	str	r4, [r2, r3]
 800b64a:	e6d8      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800b64c:	4a15      	ldr	r2, [pc, #84]	; (800b6a4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800b64e:	23a8      	movs	r3, #168	; 0xa8
 800b650:	58d4      	ldr	r4, [r2, r3]
 800b652:	4d15      	ldr	r5, [pc, #84]	; (800b6a8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800b654:	402c      	ands	r4, r5
 800b656:	50d4      	str	r4, [r2, r3]
 800b658:	58d5      	ldr	r5, [r2, r3]
 800b65a:	24b0      	movs	r4, #176	; 0xb0
 800b65c:	0224      	lsls	r4, r4, #8
 800b65e:	432c      	orrs	r4, r5
 800b660:	50d4      	str	r4, [r2, r3]
 800b662:	e6cc      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
 800b664:	40013800 	.word	0x40013800
 800b668:	40004400 	.word	0x40004400
 800b66c:	40004800 	.word	0x40004800
 800b670:	40004c00 	.word	0x40004c00
 800b674:	40005000 	.word	0x40005000
 800b678:	40011400 	.word	0x40011400
 800b67c:	40011800 	.word	0x40011800
 800b680:	40011c00 	.word	0x40011c00
 800b684:	4002001c 	.word	0x4002001c
 800b688:	40020044 	.word	0x40020044
 800b68c:	40020080 	.word	0x40020080
 800b690:	40020408 	.word	0x40020408
 800b694:	40020444 	.word	0x40020444
 800b698:	40020458 	.word	0x40020458
 800b69c:	40020400 	.word	0x40020400
 800b6a0:	fff0ffff 	.word	0xfff0ffff
 800b6a4:	40020000 	.word	0x40020000
 800b6a8:	ffff0fff 	.word	0xffff0fff
 800b6ac:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800b6b0:	4ab4      	ldr	r2, [pc, #720]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b6b2:	23a8      	movs	r3, #168	; 0xa8
 800b6b4:	58d4      	ldr	r4, [r2, r3]
 800b6b6:	4db4      	ldr	r5, [pc, #720]	; (800b988 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b6b8:	402c      	ands	r4, r5
 800b6ba:	50d4      	str	r4, [r2, r3]
 800b6bc:	58d5      	ldr	r5, [r2, r3]
 800b6be:	24b0      	movs	r4, #176	; 0xb0
 800b6c0:	0524      	lsls	r4, r4, #20
 800b6c2:	432c      	orrs	r4, r5
 800b6c4:	50d4      	str	r4, [r2, r3]
 800b6c6:	e69a      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800b6c8:	4ab0      	ldr	r2, [pc, #704]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b6ca:	23a8      	movs	r3, #168	; 0xa8
 800b6cc:	58d4      	ldr	r4, [r2, r3]
 800b6ce:	250f      	movs	r5, #15
 800b6d0:	43ac      	bics	r4, r5
 800b6d2:	50d4      	str	r4, [r2, r3]
 800b6d4:	58d4      	ldr	r4, [r2, r3]
 800b6d6:	3d04      	subs	r5, #4
 800b6d8:	432c      	orrs	r4, r5
 800b6da:	50d4      	str	r4, [r2, r3]
 800b6dc:	e68f      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800b6de:	4aab      	ldr	r2, [pc, #684]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b6e0:	23a8      	movs	r3, #168	; 0xa8
 800b6e2:	58d4      	ldr	r4, [r2, r3]
 800b6e4:	4daa      	ldr	r5, [pc, #680]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b6e6:	402c      	ands	r4, r5
 800b6e8:	50d4      	str	r4, [r2, r3]
 800b6ea:	58d5      	ldr	r5, [r2, r3]
 800b6ec:	24b0      	movs	r4, #176	; 0xb0
 800b6ee:	0224      	lsls	r4, r4, #8
 800b6f0:	432c      	orrs	r4, r5
 800b6f2:	50d4      	str	r4, [r2, r3]
 800b6f4:	e683      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800b6f6:	680b      	ldr	r3, [r1, #0]
 800b6f8:	4aa6      	ldr	r2, [pc, #664]	; (800b994 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d01b      	beq.n	800b736 <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800b6fe:	4aa6      	ldr	r2, [pc, #664]	; (800b998 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d023      	beq.n	800b74c <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800b704:	4aa5      	ldr	r2, [pc, #660]	; (800b99c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d02c      	beq.n	800b764 <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800b70a:	4aa5      	ldr	r2, [pc, #660]	; (800b9a0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d035      	beq.n	800b77c <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800b710:	4aa4      	ldr	r2, [pc, #656]	; (800b9a4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d03d      	beq.n	800b792 <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800b716:	4aa4      	ldr	r2, [pc, #656]	; (800b9a8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d000      	beq.n	800b71e <RemapAndLinkDMAtoUARTTx+0x3ce>
 800b71c:	e66f      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800b71e:	4a9b      	ldr	r2, [pc, #620]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b720:	23a8      	movs	r3, #168	; 0xa8
 800b722:	58d4      	ldr	r4, [r2, r3]
 800b724:	4da1      	ldr	r5, [pc, #644]	; (800b9ac <RemapAndLinkDMAtoUARTTx+0x65c>)
 800b726:	402c      	ands	r4, r5
 800b728:	50d4      	str	r4, [r2, r3]
 800b72a:	58d5      	ldr	r5, [r2, r3]
 800b72c:	24c0      	movs	r4, #192	; 0xc0
 800b72e:	0324      	lsls	r4, r4, #12
 800b730:	432c      	orrs	r4, r5
 800b732:	50d4      	str	r4, [r2, r3]
 800b734:	e663      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800b736:	4a93      	ldr	r2, [pc, #588]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b738:	23a8      	movs	r3, #168	; 0xa8
 800b73a:	58d4      	ldr	r4, [r2, r3]
 800b73c:	25f0      	movs	r5, #240	; 0xf0
 800b73e:	43ac      	bics	r4, r5
 800b740:	50d4      	str	r4, [r2, r3]
 800b742:	58d4      	ldr	r4, [r2, r3]
 800b744:	3d30      	subs	r5, #48	; 0x30
 800b746:	432c      	orrs	r4, r5
 800b748:	50d4      	str	r4, [r2, r3]
 800b74a:	e658      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800b74c:	4a8d      	ldr	r2, [pc, #564]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b74e:	23a8      	movs	r3, #168	; 0xa8
 800b750:	58d4      	ldr	r4, [r2, r3]
 800b752:	4d8f      	ldr	r5, [pc, #572]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b754:	402c      	ands	r4, r5
 800b756:	50d4      	str	r4, [r2, r3]
 800b758:	58d5      	ldr	r5, [r2, r3]
 800b75a:	24c0      	movs	r4, #192	; 0xc0
 800b75c:	0224      	lsls	r4, r4, #8
 800b75e:	432c      	orrs	r4, r5
 800b760:	50d4      	str	r4, [r2, r3]
 800b762:	e64c      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800b764:	4a87      	ldr	r2, [pc, #540]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b766:	23a8      	movs	r3, #168	; 0xa8
 800b768:	58d4      	ldr	r4, [r2, r3]
 800b76a:	4d87      	ldr	r5, [pc, #540]	; (800b988 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b76c:	402c      	ands	r4, r5
 800b76e:	50d4      	str	r4, [r2, r3]
 800b770:	58d5      	ldr	r5, [r2, r3]
 800b772:	24c0      	movs	r4, #192	; 0xc0
 800b774:	0524      	lsls	r4, r4, #20
 800b776:	432c      	orrs	r4, r5
 800b778:	50d4      	str	r4, [r2, r3]
 800b77a:	e640      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800b77c:	4a83      	ldr	r2, [pc, #524]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b77e:	23a8      	movs	r3, #168	; 0xa8
 800b780:	58d4      	ldr	r4, [r2, r3]
 800b782:	250f      	movs	r5, #15
 800b784:	43ac      	bics	r4, r5
 800b786:	50d4      	str	r4, [r2, r3]
 800b788:	58d4      	ldr	r4, [r2, r3]
 800b78a:	3d03      	subs	r5, #3
 800b78c:	432c      	orrs	r4, r5
 800b78e:	50d4      	str	r4, [r2, r3]
 800b790:	e635      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800b792:	4a7e      	ldr	r2, [pc, #504]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b794:	23a8      	movs	r3, #168	; 0xa8
 800b796:	58d4      	ldr	r4, [r2, r3]
 800b798:	4d7d      	ldr	r5, [pc, #500]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b79a:	402c      	ands	r4, r5
 800b79c:	50d4      	str	r4, [r2, r3]
 800b79e:	58d5      	ldr	r5, [r2, r3]
 800b7a0:	24c0      	movs	r4, #192	; 0xc0
 800b7a2:	0224      	lsls	r4, r4, #8
 800b7a4:	432c      	orrs	r4, r5
 800b7a6:	50d4      	str	r4, [r2, r3]
 800b7a8:	e629      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800b7aa:	680b      	ldr	r3, [r1, #0]
 800b7ac:	4a79      	ldr	r2, [pc, #484]	; (800b994 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d01b      	beq.n	800b7ea <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800b7b2:	4a79      	ldr	r2, [pc, #484]	; (800b998 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d023      	beq.n	800b800 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800b7b8:	4a78      	ldr	r2, [pc, #480]	; (800b99c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d02c      	beq.n	800b818 <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800b7be:	4a78      	ldr	r2, [pc, #480]	; (800b9a0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d035      	beq.n	800b830 <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800b7c4:	4a77      	ldr	r2, [pc, #476]	; (800b9a4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d03d      	beq.n	800b846 <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800b7ca:	4a77      	ldr	r2, [pc, #476]	; (800b9a8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d000      	beq.n	800b7d2 <RemapAndLinkDMAtoUARTTx+0x482>
 800b7d0:	e615      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800b7d2:	4a6e      	ldr	r2, [pc, #440]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b7d4:	23a8      	movs	r3, #168	; 0xa8
 800b7d6:	58d4      	ldr	r4, [r2, r3]
 800b7d8:	4d74      	ldr	r5, [pc, #464]	; (800b9ac <RemapAndLinkDMAtoUARTTx+0x65c>)
 800b7da:	402c      	ands	r4, r5
 800b7dc:	50d4      	str	r4, [r2, r3]
 800b7de:	58d5      	ldr	r5, [r2, r3]
 800b7e0:	24d0      	movs	r4, #208	; 0xd0
 800b7e2:	0324      	lsls	r4, r4, #12
 800b7e4:	432c      	orrs	r4, r5
 800b7e6:	50d4      	str	r4, [r2, r3]
 800b7e8:	e609      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800b7ea:	4a66      	ldr	r2, [pc, #408]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b7ec:	23a8      	movs	r3, #168	; 0xa8
 800b7ee:	58d4      	ldr	r4, [r2, r3]
 800b7f0:	25f0      	movs	r5, #240	; 0xf0
 800b7f2:	43ac      	bics	r4, r5
 800b7f4:	50d4      	str	r4, [r2, r3]
 800b7f6:	58d4      	ldr	r4, [r2, r3]
 800b7f8:	3d20      	subs	r5, #32
 800b7fa:	432c      	orrs	r4, r5
 800b7fc:	50d4      	str	r4, [r2, r3]
 800b7fe:	e5fe      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800b800:	4a60      	ldr	r2, [pc, #384]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b802:	23a8      	movs	r3, #168	; 0xa8
 800b804:	58d4      	ldr	r4, [r2, r3]
 800b806:	4d62      	ldr	r5, [pc, #392]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b808:	402c      	ands	r4, r5
 800b80a:	50d4      	str	r4, [r2, r3]
 800b80c:	58d5      	ldr	r5, [r2, r3]
 800b80e:	24d0      	movs	r4, #208	; 0xd0
 800b810:	0224      	lsls	r4, r4, #8
 800b812:	432c      	orrs	r4, r5
 800b814:	50d4      	str	r4, [r2, r3]
 800b816:	e5f2      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800b818:	4a5a      	ldr	r2, [pc, #360]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b81a:	23a8      	movs	r3, #168	; 0xa8
 800b81c:	58d4      	ldr	r4, [r2, r3]
 800b81e:	4d5a      	ldr	r5, [pc, #360]	; (800b988 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b820:	402c      	ands	r4, r5
 800b822:	50d4      	str	r4, [r2, r3]
 800b824:	58d5      	ldr	r5, [r2, r3]
 800b826:	24d0      	movs	r4, #208	; 0xd0
 800b828:	0524      	lsls	r4, r4, #20
 800b82a:	432c      	orrs	r4, r5
 800b82c:	50d4      	str	r4, [r2, r3]
 800b82e:	e5e6      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800b830:	4a56      	ldr	r2, [pc, #344]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b832:	23a8      	movs	r3, #168	; 0xa8
 800b834:	58d4      	ldr	r4, [r2, r3]
 800b836:	250f      	movs	r5, #15
 800b838:	43ac      	bics	r4, r5
 800b83a:	50d4      	str	r4, [r2, r3]
 800b83c:	58d4      	ldr	r4, [r2, r3]
 800b83e:	3d02      	subs	r5, #2
 800b840:	432c      	orrs	r4, r5
 800b842:	50d4      	str	r4, [r2, r3]
 800b844:	e5db      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800b846:	4a51      	ldr	r2, [pc, #324]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b848:	23a8      	movs	r3, #168	; 0xa8
 800b84a:	58d4      	ldr	r4, [r2, r3]
 800b84c:	4d50      	ldr	r5, [pc, #320]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b84e:	402c      	ands	r4, r5
 800b850:	50d4      	str	r4, [r2, r3]
 800b852:	58d5      	ldr	r5, [r2, r3]
 800b854:	24d0      	movs	r4, #208	; 0xd0
 800b856:	0224      	lsls	r4, r4, #8
 800b858:	432c      	orrs	r4, r5
 800b85a:	50d4      	str	r4, [r2, r3]
 800b85c:	e5cf      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800b85e:	680b      	ldr	r3, [r1, #0]
 800b860:	4a4c      	ldr	r2, [pc, #304]	; (800b994 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d01b      	beq.n	800b89e <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800b866:	4a4c      	ldr	r2, [pc, #304]	; (800b998 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d023      	beq.n	800b8b4 <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800b86c:	4a4b      	ldr	r2, [pc, #300]	; (800b99c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d02c      	beq.n	800b8cc <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800b872:	4a4b      	ldr	r2, [pc, #300]	; (800b9a0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d035      	beq.n	800b8e4 <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800b878:	4a4a      	ldr	r2, [pc, #296]	; (800b9a4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d03d      	beq.n	800b8fa <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800b87e:	4a4a      	ldr	r2, [pc, #296]	; (800b9a8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d000      	beq.n	800b886 <RemapAndLinkDMAtoUARTTx+0x536>
 800b884:	e5bb      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800b886:	4a41      	ldr	r2, [pc, #260]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b888:	23a8      	movs	r3, #168	; 0xa8
 800b88a:	58d4      	ldr	r4, [r2, r3]
 800b88c:	4d47      	ldr	r5, [pc, #284]	; (800b9ac <RemapAndLinkDMAtoUARTTx+0x65c>)
 800b88e:	402c      	ands	r4, r5
 800b890:	50d4      	str	r4, [r2, r3]
 800b892:	58d5      	ldr	r5, [r2, r3]
 800b894:	24e0      	movs	r4, #224	; 0xe0
 800b896:	0324      	lsls	r4, r4, #12
 800b898:	432c      	orrs	r4, r5
 800b89a:	50d4      	str	r4, [r2, r3]
 800b89c:	e5af      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800b89e:	4a39      	ldr	r2, [pc, #228]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b8a0:	23a8      	movs	r3, #168	; 0xa8
 800b8a2:	58d4      	ldr	r4, [r2, r3]
 800b8a4:	25f0      	movs	r5, #240	; 0xf0
 800b8a6:	43ac      	bics	r4, r5
 800b8a8:	50d4      	str	r4, [r2, r3]
 800b8aa:	58d4      	ldr	r4, [r2, r3]
 800b8ac:	3d10      	subs	r5, #16
 800b8ae:	432c      	orrs	r4, r5
 800b8b0:	50d4      	str	r4, [r2, r3]
 800b8b2:	e5a4      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800b8b4:	4a33      	ldr	r2, [pc, #204]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b8b6:	23a8      	movs	r3, #168	; 0xa8
 800b8b8:	58d4      	ldr	r4, [r2, r3]
 800b8ba:	4d35      	ldr	r5, [pc, #212]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b8bc:	402c      	ands	r4, r5
 800b8be:	50d4      	str	r4, [r2, r3]
 800b8c0:	58d5      	ldr	r5, [r2, r3]
 800b8c2:	24e0      	movs	r4, #224	; 0xe0
 800b8c4:	0224      	lsls	r4, r4, #8
 800b8c6:	432c      	orrs	r4, r5
 800b8c8:	50d4      	str	r4, [r2, r3]
 800b8ca:	e598      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800b8cc:	4a2d      	ldr	r2, [pc, #180]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b8ce:	23a8      	movs	r3, #168	; 0xa8
 800b8d0:	58d4      	ldr	r4, [r2, r3]
 800b8d2:	4d2d      	ldr	r5, [pc, #180]	; (800b988 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b8d4:	402c      	ands	r4, r5
 800b8d6:	50d4      	str	r4, [r2, r3]
 800b8d8:	58d5      	ldr	r5, [r2, r3]
 800b8da:	24e0      	movs	r4, #224	; 0xe0
 800b8dc:	0524      	lsls	r4, r4, #20
 800b8de:	432c      	orrs	r4, r5
 800b8e0:	50d4      	str	r4, [r2, r3]
 800b8e2:	e58c      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800b8e4:	4a29      	ldr	r2, [pc, #164]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b8e6:	23a8      	movs	r3, #168	; 0xa8
 800b8e8:	58d4      	ldr	r4, [r2, r3]
 800b8ea:	250f      	movs	r5, #15
 800b8ec:	43ac      	bics	r4, r5
 800b8ee:	50d4      	str	r4, [r2, r3]
 800b8f0:	58d4      	ldr	r4, [r2, r3]
 800b8f2:	3d01      	subs	r5, #1
 800b8f4:	432c      	orrs	r4, r5
 800b8f6:	50d4      	str	r4, [r2, r3]
 800b8f8:	e581      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800b8fa:	4a24      	ldr	r2, [pc, #144]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b8fc:	23a8      	movs	r3, #168	; 0xa8
 800b8fe:	58d4      	ldr	r4, [r2, r3]
 800b900:	4d23      	ldr	r5, [pc, #140]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b902:	402c      	ands	r4, r5
 800b904:	50d4      	str	r4, [r2, r3]
 800b906:	58d5      	ldr	r5, [r2, r3]
 800b908:	24e0      	movs	r4, #224	; 0xe0
 800b90a:	0224      	lsls	r4, r4, #8
 800b90c:	432c      	orrs	r4, r5
 800b90e:	50d4      	str	r4, [r2, r3]
 800b910:	e575      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800b912:	4a1c      	ldr	r2, [pc, #112]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b914:	23a8      	movs	r3, #168	; 0xa8
 800b916:	58d5      	ldr	r5, [r2, r3]
 800b918:	26f0      	movs	r6, #240	; 0xf0
 800b91a:	43b5      	bics	r5, r6
 800b91c:	50d5      	str	r5, [r2, r3]
 800b91e:	58d4      	ldr	r4, [r2, r3]
 800b920:	4334      	orrs	r4, r6
 800b922:	50d4      	str	r4, [r2, r3]
 800b924:	e56b      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800b926:	4a17      	ldr	r2, [pc, #92]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b928:	23a8      	movs	r3, #168	; 0xa8
 800b92a:	58d4      	ldr	r4, [r2, r3]
 800b92c:	4d18      	ldr	r5, [pc, #96]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b92e:	402c      	ands	r4, r5
 800b930:	50d4      	str	r4, [r2, r3]
 800b932:	58d5      	ldr	r5, [r2, r3]
 800b934:	24f0      	movs	r4, #240	; 0xf0
 800b936:	0224      	lsls	r4, r4, #8
 800b938:	432c      	orrs	r4, r5
 800b93a:	50d4      	str	r4, [r2, r3]
 800b93c:	e55f      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800b93e:	4a11      	ldr	r2, [pc, #68]	; (800b984 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b940:	23a8      	movs	r3, #168	; 0xa8
 800b942:	58d4      	ldr	r4, [r2, r3]
 800b944:	4d10      	ldr	r5, [pc, #64]	; (800b988 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b946:	402c      	ands	r4, r5
 800b948:	50d4      	str	r4, [r2, r3]
 800b94a:	58d5      	ldr	r5, [r2, r3]
 800b94c:	24f0      	movs	r4, #240	; 0xf0
 800b94e:	0524      	lsls	r4, r4, #20
 800b950:	432c      	orrs	r4, r5
 800b952:	50d4      	str	r4, [r2, r3]
 800b954:	e553      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800b956:	4a0d      	ldr	r2, [pc, #52]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b958:	23a8      	movs	r3, #168	; 0xa8
 800b95a:	58d5      	ldr	r5, [r2, r3]
 800b95c:	260f      	movs	r6, #15
 800b95e:	43b5      	bics	r5, r6
 800b960:	50d5      	str	r5, [r2, r3]
 800b962:	58d4      	ldr	r4, [r2, r3]
 800b964:	4334      	orrs	r4, r6
 800b966:	50d4      	str	r4, [r2, r3]
 800b968:	e549      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800b96a:	4a08      	ldr	r2, [pc, #32]	; (800b98c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b96c:	23a8      	movs	r3, #168	; 0xa8
 800b96e:	58d4      	ldr	r4, [r2, r3]
 800b970:	4d07      	ldr	r5, [pc, #28]	; (800b990 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b972:	402c      	ands	r4, r5
 800b974:	50d4      	str	r4, [r2, r3]
 800b976:	58d5      	ldr	r5, [r2, r3]
 800b978:	24f0      	movs	r4, #240	; 0xf0
 800b97a:	0224      	lsls	r4, r4, #8
 800b97c:	432c      	orrs	r4, r5
 800b97e:	50d4      	str	r4, [r2, r3]
 800b980:	e53d      	b.n	800b3fe <RemapAndLinkDMAtoUARTTx+0xae>
 800b982:	46c0      	nop			; (mov r8, r8)
 800b984:	40020000 	.word	0x40020000
 800b988:	f0ffffff 	.word	0xf0ffffff
 800b98c:	40020400 	.word	0x40020400
 800b990:	ffff0fff 	.word	0xffff0fff
 800b994:	4002001c 	.word	0x4002001c
 800b998:	40020044 	.word	0x40020044
 800b99c:	40020080 	.word	0x40020080
 800b9a0:	40020408 	.word	0x40020408
 800b9a4:	40020444 	.word	0x40020444
 800b9a8:	40020458 	.word	0x40020458
 800b9ac:	fff0ffff 	.word	0xfff0ffff

0800b9b0 <DMA_MSG_TX_Setup>:
{	
 800b9b0:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800b9b2:	4b0d      	ldr	r3, [pc, #52]	; (800b9e8 <DMA_MSG_TX_Setup+0x38>)
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d012      	beq.n	800b9e0 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800b9ba:	4b0b      	ldr	r3, [pc, #44]	; (800b9e8 <DMA_MSG_TX_Setup+0x38>)
 800b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d010      	beq.n	800b9e4 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800b9c2:	4a09      	ldr	r2, [pc, #36]	; (800b9e8 <DMA_MSG_TX_Setup+0x38>)
 800b9c4:	2394      	movs	r3, #148	; 0x94
 800b9c6:	58d3      	ldr	r3, [r2, r3]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d007      	beq.n	800b9dc <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800b9cc:	0021      	movs	r1, r4
 800b9ce:	f7ff fcbf 	bl	800b350 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	0020      	movs	r0, r4
 800b9d6:	f7ff f847 	bl	800aa68 <SetupDMAInterrupts>
}
 800b9da:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800b9dc:	4c03      	ldr	r4, [pc, #12]	; (800b9ec <DMA_MSG_TX_Setup+0x3c>)
 800b9de:	e7f5      	b.n	800b9cc <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800b9e0:	4c01      	ldr	r4, [pc, #4]	; (800b9e8 <DMA_MSG_TX_Setup+0x38>)
 800b9e2:	e7f3      	b.n	800b9cc <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800b9e4:	4c02      	ldr	r4, [pc, #8]	; (800b9f0 <DMA_MSG_TX_Setup+0x40>)
 800b9e6:	e7f1      	b.n	800b9cc <DMA_MSG_TX_Setup+0x1c>
 800b9e8:	20001528 	.word	0x20001528
 800b9ec:	20001598 	.word	0x20001598
 800b9f0:	20001560 	.word	0x20001560

0800b9f4 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b9f4:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b9f6:	4807      	ldr	r0, [pc, #28]	; (800ba14 <CRC_Init+0x20>)
 800b9f8:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <CRC_Init+0x24>)
 800b9fa:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b9fc:	2310      	movs	r3, #16
 800b9fe:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800ba00:	2300      	movs	r3, #0
 800ba02:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ba04:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800ba06:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800ba08:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800ba0a:	3303      	adds	r3, #3
 800ba0c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800ba0e:	f003 f8bd 	bl	800eb8c <HAL_CRC_Init>
}
 800ba12:	bd10      	pop	{r4, pc}
 800ba14:	2000695c 	.word	0x2000695c
 800ba18:	40023000 	.word	0x40023000

0800ba1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ba1c:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800ba1e:	4a05      	ldr	r2, [pc, #20]	; (800ba34 <HAL_CRC_MspInit+0x18>)
 800ba20:	6951      	ldr	r1, [r2, #20]
 800ba22:	2340      	movs	r3, #64	; 0x40
 800ba24:	4319      	orrs	r1, r3
 800ba26:	6151      	str	r1, [r2, #20]
 800ba28:	6952      	ldr	r2, [r2, #20]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	9b01      	ldr	r3, [sp, #4]
}
 800ba30:	b002      	add	sp, #8
 800ba32:	4770      	bx	lr
 800ba34:	40021000 	.word	0x40021000

0800ba38 <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	0004      	movs	r4, r0
 800ba3c:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d015      	beq.n	800ba6e <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800ba42:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800ba44:	2900      	cmp	r1, #0
 800ba46:	d100      	bne.n	800ba4a <CalculateCRC8+0x12>
}
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ba4a:	088e      	lsrs	r6, r1, #2
 800ba4c:	0032      	movs	r2, r6
 800ba4e:	0021      	movs	r1, r4
 800ba50:	4808      	ldr	r0, [pc, #32]	; (800ba74 <CalculateCRC8+0x3c>)
 800ba52:	f003 f8f7 	bl	800ec44 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800ba56:	07ab      	lsls	r3, r5, #30
 800ba58:	d101      	bne.n	800ba5e <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ba5a:	b2c0      	uxtb	r0, r0
 800ba5c:	e7f4      	b.n	800ba48 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800ba5e:	0131      	lsls	r1, r6, #4
 800ba60:	1861      	adds	r1, r4, r1
 800ba62:	2201      	movs	r2, #1
 800ba64:	4803      	ldr	r0, [pc, #12]	; (800ba74 <CalculateCRC8+0x3c>)
 800ba66:	f003 f8c2 	bl	800ebee <HAL_CRC_Accumulate>
 800ba6a:	b2c0      	uxtb	r0, r0
 800ba6c:	e7ec      	b.n	800ba48 <CalculateCRC8+0x10>
	return 0;
 800ba6e:	2000      	movs	r0, #0
 800ba70:	e7ea      	b.n	800ba48 <CalculateCRC8+0x10>
 800ba72:	46c0      	nop			; (mov r8, r8)
 800ba74:	2000695c 	.word	0x2000695c

0800ba78 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800ba78:	b500      	push	{lr}
 800ba7a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ba7c:	2380      	movs	r3, #128	; 0x80
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba82:	2301      	movs	r3, #1
 800ba84:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ba8a:	3303      	adds	r3, #3
 800ba8c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ba8e:	2090      	movs	r0, #144	; 0x90
 800ba90:	a901      	add	r1, sp, #4
 800ba92:	05c0      	lsls	r0, r0, #23
 800ba94:	f003 ff7a 	bl	800f98c <HAL_GPIO_Init>
}
 800ba98:	b007      	add	sp, #28
 800ba9a:	bd00      	pop	{pc}

0800ba9c <GPIO_Init>:
{
 800ba9c:	b500      	push	{lr}
 800ba9e:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800baa0:	4b18      	ldr	r3, [pc, #96]	; (800bb04 <GPIO_Init+0x68>)
 800baa2:	6959      	ldr	r1, [r3, #20]
 800baa4:	2080      	movs	r0, #128	; 0x80
 800baa6:	0300      	lsls	r0, r0, #12
 800baa8:	4301      	orrs	r1, r0
 800baaa:	6159      	str	r1, [r3, #20]
 800baac:	695a      	ldr	r2, [r3, #20]
 800baae:	4002      	ands	r2, r0
 800bab0:	9201      	str	r2, [sp, #4]
 800bab2:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800bab4:	6959      	ldr	r1, [r3, #20]
 800bab6:	2080      	movs	r0, #128	; 0x80
 800bab8:	0280      	lsls	r0, r0, #10
 800baba:	4301      	orrs	r1, r0
 800babc:	6159      	str	r1, [r3, #20]
 800babe:	695a      	ldr	r2, [r3, #20]
 800bac0:	4002      	ands	r2, r0
 800bac2:	9202      	str	r2, [sp, #8]
 800bac4:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800bac6:	6959      	ldr	r1, [r3, #20]
 800bac8:	2080      	movs	r0, #128	; 0x80
 800baca:	0340      	lsls	r0, r0, #13
 800bacc:	4301      	orrs	r1, r0
 800bace:	6159      	str	r1, [r3, #20]
 800bad0:	695a      	ldr	r2, [r3, #20]
 800bad2:	4002      	ands	r2, r0
 800bad4:	9203      	str	r2, [sp, #12]
 800bad6:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800bad8:	6959      	ldr	r1, [r3, #20]
 800bada:	2080      	movs	r0, #128	; 0x80
 800badc:	02c0      	lsls	r0, r0, #11
 800bade:	4301      	orrs	r1, r0
 800bae0:	6159      	str	r1, [r3, #20]
 800bae2:	695a      	ldr	r2, [r3, #20]
 800bae4:	4002      	ands	r2, r0
 800bae6:	9204      	str	r2, [sp, #16]
 800bae8:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800baea:	695a      	ldr	r2, [r3, #20]
 800baec:	2180      	movs	r1, #128	; 0x80
 800baee:	03c9      	lsls	r1, r1, #15
 800baf0:	430a      	orrs	r2, r1
 800baf2:	615a      	str	r2, [r3, #20]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	400b      	ands	r3, r1
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800bafc:	f7ff ffbc 	bl	800ba78 <IND_LED_Init>
}
 800bb00:	b007      	add	sp, #28
 800bb02:	bd00      	pop	{pc}
 800bb04:	40021000 	.word	0x40021000

0800bb08 <GetPortGPIOs>:

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	000e      	movs	r6, r1
 800bb0c:	0015      	movs	r5, r2
 800bb0e:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800bb10:	f000 fd86 	bl	800c620 <GetUart>
 800bb14:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800bb16:	482b      	ldr	r0, [pc, #172]	; (800bbc4 <GetPortGPIOs+0xbc>)
 800bb18:	4284      	cmp	r4, r0
 800bb1a:	d01a      	beq.n	800bb52 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800bb1c:	4b2a      	ldr	r3, [pc, #168]	; (800bbc8 <GetPortGPIOs+0xc0>)
 800bb1e:	429c      	cmp	r4, r3
 800bb20:	d024      	beq.n	800bb6c <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800bb22:	4b2a      	ldr	r3, [pc, #168]	; (800bbcc <GetPortGPIOs+0xc4>)
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d02c      	beq.n	800bb82 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800bb28:	4b29      	ldr	r3, [pc, #164]	; (800bbd0 <GetPortGPIOs+0xc8>)
 800bb2a:	429c      	cmp	r4, r3
 800bb2c:	d035      	beq.n	800bb9a <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800bb2e:	4b29      	ldr	r3, [pc, #164]	; (800bbd4 <GetPortGPIOs+0xcc>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	d03d      	beq.n	800bbb0 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800bb34:	4b28      	ldr	r3, [pc, #160]	; (800bbd8 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800bb36:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	d116      	bne.n	800bb6a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bb3c:	2390      	movs	r3, #144	; 0x90
 800bb3e:	05db      	lsls	r3, r3, #23
 800bb40:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800bb42:	2210      	movs	r2, #16
 800bb44:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bb46:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800bb48:	2320      	movs	r3, #32
 800bb4a:	9a06      	ldr	r2, [sp, #24]
 800bb4c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb4e:	2000      	movs	r0, #0
 800bb50:	e00b      	b.n	800bb6a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bb52:	2390      	movs	r3, #144	; 0x90
 800bb54:	05db      	lsls	r3, r3, #23
 800bb56:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800bb58:	2280      	movs	r2, #128	; 0x80
 800bb5a:	0092      	lsls	r2, r2, #2
 800bb5c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800bb5e:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800bb60:	2380      	movs	r3, #128	; 0x80
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	9a06      	ldr	r2, [sp, #24]
 800bb66:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb68:	2000      	movs	r0, #0
	
	return result;	
}
 800bb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bb6c:	2390      	movs	r3, #144	; 0x90
 800bb6e:	05db      	lsls	r3, r3, #23
 800bb70:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800bb72:	2204      	movs	r2, #4
 800bb74:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bb76:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800bb78:	2308      	movs	r3, #8
 800bb7a:	9a06      	ldr	r2, [sp, #24]
 800bb7c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e7f3      	b.n	800bb6a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bb82:	4b16      	ldr	r3, [pc, #88]	; (800bbdc <GetPortGPIOs+0xd4>)
 800bb84:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800bb86:	2280      	movs	r2, #128	; 0x80
 800bb88:	00d2      	lsls	r2, r2, #3
 800bb8a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800bb8c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800bb8e:	2380      	movs	r3, #128	; 0x80
 800bb90:	011b      	lsls	r3, r3, #4
 800bb92:	9a06      	ldr	r2, [sp, #24]
 800bb94:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb96:	2000      	movs	r0, #0
 800bb98:	e7e7      	b.n	800bb6a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800bb9a:	2390      	movs	r3, #144	; 0x90
 800bb9c:	05db      	lsls	r3, r3, #23
 800bb9e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800bba0:	2201      	movs	r2, #1
 800bba2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800bba4:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART4_RX_PIN;
 800bba6:	2302      	movs	r3, #2
 800bba8:	9a06      	ldr	r2, [sp, #24]
 800bbaa:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bbac:	2000      	movs	r0, #0
 800bbae:	e7dc      	b.n	800bb6a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <GetPortGPIOs+0xd4>)
 800bbb2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800bbb4:	2208      	movs	r2, #8
 800bbb6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800bbb8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800bbba:	2310      	movs	r3, #16
 800bbbc:	9a06      	ldr	r2, [sp, #24]
 800bbbe:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	e7d2      	b.n	800bb6a <GetPortGPIOs+0x62>
 800bbc4:	2000679c 	.word	0x2000679c
 800bbc8:	200068ec 	.word	0x200068ec
 800bbcc:	200066bc 	.word	0x200066bc
 800bbd0:	2000687c 	.word	0x2000687c
 800bbd4:	2000672c 	.word	0x2000672c
 800bbd8:	2000680c 	.word	0x2000680c
 800bbdc:	48000400 	.word	0x48000400

0800bbe0 <IsFactoryReset>:

/* --- Check for factory reset condition: 
				- P1 TXD is connected to last port RXD    
*/
uint8_t IsFactoryReset(void)
{
 800bbe0:	b530      	push	{r4, r5, lr}
 800bbe2:	b093      	sub	sp, #76	; 0x4c
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800bbe4:	4b39      	ldr	r3, [pc, #228]	; (800bccc <IsFactoryReset+0xec>)
 800bbe6:	6959      	ldr	r1, [r3, #20]
 800bbe8:	2080      	movs	r0, #128	; 0x80
 800bbea:	0280      	lsls	r0, r0, #10
 800bbec:	4301      	orrs	r1, r0
 800bbee:	6159      	str	r1, [r3, #20]
 800bbf0:	695a      	ldr	r2, [r3, #20]
 800bbf2:	4002      	ands	r2, r0
 800bbf4:	9203      	str	r2, [sp, #12]
 800bbf6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800bbf8:	6959      	ldr	r1, [r3, #20]
 800bbfa:	2080      	movs	r0, #128	; 0x80
 800bbfc:	02c0      	lsls	r0, r0, #11
 800bbfe:	4301      	orrs	r1, r0
 800bc00:	6159      	str	r1, [r3, #20]
 800bc02:	695a      	ldr	r2, [r3, #20]
 800bc04:	4002      	ands	r2, r0
 800bc06:	9204      	str	r2, [sp, #16]
 800bc08:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800bc0a:	6959      	ldr	r1, [r3, #20]
 800bc0c:	2080      	movs	r0, #128	; 0x80
 800bc0e:	0300      	lsls	r0, r0, #12
 800bc10:	4301      	orrs	r1, r0
 800bc12:	6159      	str	r1, [r3, #20]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	4002      	ands	r2, r0
 800bc18:	9205      	str	r2, [sp, #20]
 800bc1a:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800bc1c:	695a      	ldr	r2, [r3, #20]
 800bc1e:	2180      	movs	r1, #128	; 0x80
 800bc20:	0349      	lsls	r1, r1, #13
 800bc22:	430a      	orrs	r2, r1
 800bc24:	615a      	str	r2, [r3, #20]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	400b      	ands	r3, r1
 800bc2a:	9306      	str	r3, [sp, #24]
 800bc2c:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bc2e:	ab08      	add	r3, sp, #32
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	ab0b      	add	r3, sp, #44	; 0x2c
 800bc34:	2222      	movs	r2, #34	; 0x22
 800bc36:	446a      	add	r2, sp
 800bc38:	a90c      	add	r1, sp, #48	; 0x30
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	f7ff ff64 	bl	800bb08 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bc40:	ac07      	add	r4, sp, #28
 800bc42:	9400      	str	r4, [sp, #0]
 800bc44:	ab09      	add	r3, sp, #36	; 0x24
 800bc46:	221e      	movs	r2, #30
 800bc48:	446a      	add	r2, sp
 800bc4a:	a90a      	add	r1, sp, #40	; 0x28
 800bc4c:	2006      	movs	r0, #6
 800bc4e:	f7ff ff5b 	bl	800bb08 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc52:	2301      	movs	r3, #1
 800bc54:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc56:	2500      	movs	r5, #0
 800bc58:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bc5a:	466b      	mov	r3, sp
 800bc5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bc5e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bc60:	a90d      	add	r1, sp, #52	; 0x34
 800bc62:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bc64:	f003 fe92 	bl	800f98c <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc68:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bc6e:	8823      	ldrh	r3, [r4, #0]
 800bc70:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bc72:	a90d      	add	r1, sp, #52	; 0x34
 800bc74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc76:	f003 fe89 	bl	800f98c <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800bc7a:	466b      	mov	r3, sp
 800bc7c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800bc7e:	2200      	movs	r2, #0
 800bc80:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bc82:	f003 ff73 	bl	800fb6c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800bc86:	2005      	movs	r0, #5
 800bc88:	f000 fae4 	bl	800c254 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800bc8c:	8821      	ldrh	r1, [r4, #0]
 800bc8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc90:	f003 ff66 	bl	800fb60 <HAL_GPIO_ReadPin>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d006      	beq.n	800bca6 <IsFactoryReset+0xc6>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bc98:	4b0d      	ldr	r3, [pc, #52]	; (800bcd0 <IsFactoryReset+0xf0>)
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	4252      	negs	r2, r2
 800bc9e:	601a      	str	r2, [r3, #0]
	
	return 0;
 800bca0:	2000      	movs	r0, #0
}
 800bca2:	b013      	add	sp, #76	; 0x4c
 800bca4:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800bca6:	2322      	movs	r3, #34	; 0x22
 800bca8:	446b      	add	r3, sp
 800bcaa:	8819      	ldrh	r1, [r3, #0]
 800bcac:	2201      	movs	r2, #1
 800bcae:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bcb0:	f003 ff5c 	bl	800fb6c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800bcb4:	2005      	movs	r0, #5
 800bcb6:	f000 facd 	bl	800c254 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800bcba:	ab07      	add	r3, sp, #28
 800bcbc:	8819      	ldrh	r1, [r3, #0]
 800bcbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcc0:	f003 ff4e 	bl	800fb60 <HAL_GPIO_ReadPin>
 800bcc4:	2801      	cmp	r0, #1
 800bcc6:	d1e7      	bne.n	800bc98 <IsFactoryReset+0xb8>
 800bcc8:	e7eb      	b.n	800bca2 <IsFactoryReset+0xc2>
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	40021000 	.word	0x40021000
 800bcd0:	20007ff0 	.word	0x20007ff0

0800bcd4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800bcd4:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800bcd6:	f002 fe59 	bl	800e98c <HAL_IncTick>
  osSystickHandler();  
 800bcda:	f000 fe65 	bl	800c9a8 <osSystickHandler>

}
 800bcde:	bd10      	pop	{r4, pc}

0800bce0 <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800bce0:	e7fe      	b.n	800bce0 <HardFault_Handler>
	...

0800bce4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800bce4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800bce6:	4802      	ldr	r0, [pc, #8]	; (800bcf0 <USART1_IRQHandler+0xc>)
 800bce8:	f005 fc43 	bl	8011572 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800bcec:	bd10      	pop	{r4, pc}
 800bcee:	46c0      	nop			; (mov r8, r8)
 800bcf0:	2000679c 	.word	0x2000679c

0800bcf4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800bcf4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800bcf6:	4802      	ldr	r0, [pc, #8]	; (800bd00 <USART2_IRQHandler+0xc>)
 800bcf8:	f005 fc3b 	bl	8011572 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800bcfc:	bd10      	pop	{r4, pc}
 800bcfe:	46c0      	nop			; (mov r8, r8)
 800bd00:	200068ec 	.word	0x200068ec

0800bd04 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800bd04:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800bd06:	4806      	ldr	r0, [pc, #24]	; (800bd20 <USART3_8_IRQHandler+0x1c>)
 800bd08:	f005 fc33 	bl	8011572 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800bd0c:	4805      	ldr	r0, [pc, #20]	; (800bd24 <USART3_8_IRQHandler+0x20>)
 800bd0e:	f005 fc30 	bl	8011572 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800bd12:	4805      	ldr	r0, [pc, #20]	; (800bd28 <USART3_8_IRQHandler+0x24>)
 800bd14:	f005 fc2d 	bl	8011572 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800bd18:	4804      	ldr	r0, [pc, #16]	; (800bd2c <USART3_8_IRQHandler+0x28>)
 800bd1a:	f005 fc2a 	bl	8011572 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800bd1e:	bd10      	pop	{r4, pc}
 800bd20:	200066bc 	.word	0x200066bc
 800bd24:	2000687c 	.word	0x2000687c
 800bd28:	2000672c 	.word	0x2000672c
 800bd2c:	2000680c 	.word	0x2000680c

0800bd30 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800bd30:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800bd32:	2001      	movs	r0, #1
 800bd34:	f7fb f888 	bl	8006e48 <DMA_IRQHandler>
	
}
 800bd38:	bd10      	pop	{r4, pc}
	...

0800bd3c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800bd3c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	06db      	lsls	r3, r3, #27
 800bd44:	d40b      	bmi.n	800bd5e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800bd46:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	05db      	lsls	r3, r3, #23
 800bd4c:	d40b      	bmi.n	800bd66 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800bd4e:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	06db      	lsls	r3, r3, #27
 800bd54:	d506      	bpl.n	800bd64 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800bd56:	4808      	ldr	r0, [pc, #32]	; (800bd78 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800bd58:	f003 f870 	bl	800ee3c <HAL_DMA_IRQHandler>
	}
}
 800bd5c:	e002      	b.n	800bd64 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800bd5e:	2005      	movs	r0, #5
 800bd60:	f7fb f872 	bl	8006e48 <DMA_IRQHandler>
}
 800bd64:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800bd66:	2002      	movs	r0, #2
 800bd68:	f7fb f86e 	bl	8006e48 <DMA_IRQHandler>
 800bd6c:	e7fa      	b.n	800bd64 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800bd6e:	46c0      	nop			; (mov r8, r8)
 800bd70:	40020400 	.word	0x40020400
 800bd74:	40020000 	.word	0x40020000
 800bd78:	20001528 	.word	0x20001528

0800bd7c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800bd7c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800bd7e:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	03db      	lsls	r3, r3, #15
 800bd84:	d413      	bmi.n	800bdae <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800bd86:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	02db      	lsls	r3, r3, #11
 800bd8c:	d413      	bmi.n	800bdb6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800bd8e:	4b11      	ldr	r3, [pc, #68]	; (800bdd4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	05db      	lsls	r3, r3, #23
 800bd94:	d413      	bmi.n	800bdbe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800bd96:	4b0e      	ldr	r3, [pc, #56]	; (800bdd0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	04db      	lsls	r3, r3, #19
 800bd9c:	d413      	bmi.n	800bdc6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	01db      	lsls	r3, r3, #7
 800bda4:	d506      	bpl.n	800bdb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800bda6:	480c      	ldr	r0, [pc, #48]	; (800bdd8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800bda8:	f003 f848 	bl	800ee3c <HAL_DMA_IRQHandler>
	}
}
 800bdac:	e002      	b.n	800bdb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800bdae:	2003      	movs	r0, #3
 800bdb0:	f7fb f84a 	bl	8006e48 <DMA_IRQHandler>
}
 800bdb4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800bdb6:	2004      	movs	r0, #4
 800bdb8:	f7fb f846 	bl	8006e48 <DMA_IRQHandler>
 800bdbc:	e7fa      	b.n	800bdb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800bdbe:	2006      	movs	r0, #6
 800bdc0:	f7fb f842 	bl	8006e48 <DMA_IRQHandler>
 800bdc4:	e7f6      	b.n	800bdb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800bdc6:	4805      	ldr	r0, [pc, #20]	; (800bddc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800bdc8:	f003 f838 	bl	800ee3c <HAL_DMA_IRQHandler>
 800bdcc:	e7f2      	b.n	800bdb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	40020000 	.word	0x40020000
 800bdd4:	40020400 	.word	0x40020400
 800bdd8:	20001598 	.word	0x20001598
 800bddc:	20001560 	.word	0x20001560

0800bde0 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bde0:	b510      	push	{r4, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800bde6:	2300      	movs	r3, #0
 800bde8:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800bdea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800bdf0:	f7fe feea 	bl	800abc8 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800bdf4:	0020      	movs	r0, r4
 800bdf6:	f7fe fd79 	bl	800a8ec <GetPort>
 800bdfa:	0080      	lsls	r0, r0, #2
 800bdfc:	4b03      	ldr	r3, [pc, #12]	; (800be0c <HAL_UART_TxCpltCallback+0x2c>)
 800bdfe:	58c0      	ldr	r0, [r0, r3]
 800be00:	a901      	add	r1, sp, #4
 800be02:	f001 f96b 	bl	800d0dc <xQueueGiveFromISR>
}
 800be06:	b002      	add	sp, #8
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	20006680 	.word	0x20006680

0800be10 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be10:	b510      	push	{r4, lr}
 800be12:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800be14:	2369      	movs	r3, #105	; 0x69
 800be16:	2201      	movs	r2, #1
 800be18:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800be1a:	f7fe fd67 	bl	800a8ec <GetPort>
	if (portStatus[port] == STREAM) {
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <HAL_UART_ErrorCallback+0x40>)
 800be20:	5c1b      	ldrb	r3, [r3, r0]
 800be22:	2b02      	cmp	r3, #2
 800be24:	d005      	beq.n	800be32 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <HAL_UART_ErrorCallback+0x44>)
 800be28:	1818      	adds	r0, r3, r0
 800be2a:	3801      	subs	r0, #1
 800be2c:	2301      	movs	r3, #1
 800be2e:	7003      	strb	r3, [r0, #0]
	}	
}
 800be30:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800be32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	b292      	uxth	r2, r2
 800be3a:	1e43      	subs	r3, r0, #1
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4906      	ldr	r1, [pc, #24]	; (800be58 <HAL_UART_ErrorCallback+0x48>)
 800be40:	585b      	ldr	r3, [r3, r1]
 800be42:	6819      	ldr	r1, [r3, #0]
 800be44:	3128      	adds	r1, #40	; 0x28
 800be46:	0020      	movs	r0, r4
 800be48:	f004 ff7a 	bl	8010d40 <HAL_UART_Receive_DMA>
 800be4c:	e7f0      	b.n	800be30 <HAL_UART_ErrorCallback+0x20>
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	20000dcc 	.word	0x20000dcc
 800be54:	20000f70 	.word	0x20000f70
 800be58:	20001150 	.word	0x20001150

0800be5c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be5c:	b510      	push	{r4, lr}
 800be5e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800be60:	f7fe fd44 	bl	800a8ec <GetPort>
 800be64:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <HAL_UART_RxCpltCallback+0x58>)
 800be66:	5c1b      	ldrb	r3, [r3, r0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d006      	beq.n	800be7a <HAL_UART_RxCpltCallback+0x1e>
 800be6c:	0020      	movs	r0, r4
 800be6e:	f7fe fd3d 	bl	800a8ec <GetPort>
 800be72:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <HAL_UART_RxCpltCallback+0x58>)
 800be74:	5c1b      	ldrb	r3, [r3, r0]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d11a      	bne.n	800beb0 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800be7a:	0020      	movs	r0, r4
 800be7c:	f7fe fd36 	bl	800a8ec <GetPort>
 800be80:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <HAL_UART_RxCpltCallback+0x5c>)
 800be82:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800be84:	0020      	movs	r0, r4
 800be86:	f7fe fd31 	bl	800a8ec <GetPort>
 800be8a:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <HAL_UART_RxCpltCallback+0x58>)
 800be8c:	2205      	movs	r2, #5
 800be8e:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800be90:	0020      	movs	r0, r4
 800be92:	f7fe fd2b 	bl	800a8ec <GetPort>
 800be96:	4b09      	ldr	r3, [pc, #36]	; (800bebc <HAL_UART_RxCpltCallback+0x60>)
 800be98:	181b      	adds	r3, r3, r0
 800be9a:	3b01      	subs	r3, #1
 800be9c:	2200      	movs	r2, #0
 800be9e:	701a      	strb	r2, [r3, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800bea0:	0020      	movs	r0, r4
 800bea2:	f7fe fd23 	bl	800a8ec <GetPort>
 800bea6:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <HAL_UART_RxCpltCallback+0x64>)
 800bea8:	181b      	adds	r3, r3, r0
 800beaa:	3b01      	subs	r3, #1
 800beac:	2201      	movs	r2, #1
 800beae:	701a      	strb	r2, [r3, #0]
	}
}
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	20000dcc 	.word	0x20000dcc
 800beb8:	20006600 	.word	0x20006600
 800bebc:	200010f8 	.word	0x200010f8
 800bec0:	20000f70 	.word	0x20000f70

0800bec4 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800bec4:	b672      	cpsid	i
	for( ;; );
 800bec6:	e7fe      	b.n	800bec6 <vApplicationStackOverflowHook+0x2>

0800bec8 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800bec8:	b672      	cpsid	i
	for( ;; );
 800beca:	e7fe      	b.n	800beca <vApplicationMallocFailedHook+0x2>

0800becc <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800becc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bece:	46ce      	mov	lr, r9
 800bed0:	4647      	mov	r7, r8
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b08f      	sub	sp, #60	; 0x3c
 800bed6:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800bed8:	ac05      	add	r4, sp, #20
 800beda:	4b34      	ldr	r3, [pc, #208]	; (800bfac <RTC_CalendarConfig+0xe0>)
 800bedc:	0022      	movs	r2, r4
 800bede:	cb43      	ldmia	r3!, {r0, r1, r6}
 800bee0:	c243      	stmia	r2!, {r0, r1, r6}
 800bee2:	aa02      	add	r2, sp, #8
 800bee4:	4b32      	ldr	r3, [pc, #200]	; (800bfb0 <RTC_CalendarConfig+0xe4>)
 800bee6:	cb03      	ldmia	r3!, {r0, r1}
 800bee8:	c203      	stmia	r2!, {r0, r1}
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800beee:	2015      	movs	r0, #21
 800bef0:	ab02      	add	r3, sp, #8
 800bef2:	469c      	mov	ip, r3
 800bef4:	4460      	add	r0, ip
 800bef6:	f005 fbcc 	bl	8011692 <atoi>
 800befa:	b2c3      	uxtb	r3, r0
 800befc:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800befe:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800bf00:	a806      	add	r0, sp, #24
 800bf02:	f005 fbc6 	bl	8011692 <atoi>
 800bf06:	b2c3      	uxtb	r3, r0
 800bf08:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800bf0a:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800bf0c:	4e29      	ldr	r6, [pc, #164]	; (800bfb4 <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800bf0e:	2401      	movs	r4, #1
 800bf10:	e003      	b.n	800bf1a <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800bf12:	3401      	adds	r4, #1
 800bf14:	3604      	adds	r6, #4
 800bf16:	2c0d      	cmp	r4, #13
 800bf18:	d007      	beq.n	800bf2a <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800bf1a:	6831      	ldr	r1, [r6, #0]
 800bf1c:	a805      	add	r0, sp, #20
 800bf1e:	f7f4 f8f1 	bl	8000104 <strcmp>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d1f5      	bne.n	800bf12 <RTC_CalendarConfig+0x46>
			month = i + 1;
 800bf26:	b2e5      	uxtb	r5, r4
 800bf28:	e7f3      	b.n	800bf12 <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800bf2a:	ab02      	add	r3, sp, #8
 800bf2c:	1d98      	adds	r0, r3, #6
 800bf2e:	f005 fbb0 	bl	8011692 <atoi>
 800bf32:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800bf34:	af05      	add	r7, sp, #20
 800bf36:	2400      	movs	r4, #0
 800bf38:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800bf3a:	ab02      	add	r3, sp, #8
 800bf3c:	1cd8      	adds	r0, r3, #3
 800bf3e:	f005 fba8 	bl	8011692 <atoi>
 800bf42:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800bf44:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800bf46:	a802      	add	r0, sp, #8
 800bf48:	f005 fba3 	bl	8011692 <atoi>
 800bf4c:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800bf4e:	a90d      	add	r1, sp, #52	; 0x34
 800bf50:	464b      	mov	r3, r9
 800bf52:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800bf54:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800bf56:	4643      	mov	r3, r8
 800bf58:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4815      	ldr	r0, [pc, #84]	; (800bfb8 <RTC_CalendarConfig+0xec>)
 800bf62:	f004 fc43 	bl	80107ec <HAL_RTC_SetDate>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d11c      	bne.n	800bfa4 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800bf6a:	a908      	add	r1, sp, #32
 800bf6c:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800bf6e:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800bf74:	2300      	movs	r3, #0
 800bf76:	720b      	strb	r3, [r1, #8]
 800bf78:	4a10      	ldr	r2, [pc, #64]	; (800bfbc <RTC_CalendarConfig+0xf0>)
 800bf7a:	3018      	adds	r0, #24
 800bf7c:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800bf7e:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800bf80:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800bf82:	2200      	movs	r2, #0
 800bf84:	480c      	ldr	r0, [pc, #48]	; (800bfb8 <RTC_CalendarConfig+0xec>)
 800bf86:	f004 fbb1 	bl	80106ec <HAL_RTC_SetTime>
 800bf8a:	1e04      	subs	r4, r0, #0
 800bf8c:	d10c      	bne.n	800bfa8 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800bf8e:	4a0c      	ldr	r2, [pc, #48]	; (800bfc0 <RTC_CalendarConfig+0xf4>)
 800bf90:	2101      	movs	r1, #1
 800bf92:	4809      	ldr	r0, [pc, #36]	; (800bfb8 <RTC_CalendarConfig+0xec>)
 800bf94:	f004 fcee 	bl	8010974 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800bf98:	0020      	movs	r0, r4
 800bf9a:	b00f      	add	sp, #60	; 0x3c
 800bf9c:	bcc0      	pop	{r6, r7}
 800bf9e:	46b9      	mov	r9, r7
 800bfa0:	46b0      	mov	r8, r6
 800bfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800bfa4:	24ff      	movs	r4, #255	; 0xff
 800bfa6:	e7f7      	b.n	800bf98 <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800bfa8:	24ff      	movs	r4, #255	; 0xff
 800bfaa:	e7f5      	b.n	800bf98 <RTC_CalendarConfig+0xcc>
 800bfac:	08017ed4 	.word	0x08017ed4
 800bfb0:	0801a5b4 	.word	0x0801a5b4
 800bfb4:	20000040 	.word	0x20000040
 800bfb8:	20006980 	.word	0x20006980
 800bfbc:	20006600 	.word	0x20006600
 800bfc0:	000032f2 	.word	0x000032f2

0800bfc4 <RTC_Init>:
{
 800bfc4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800bfc6:	4a1c      	ldr	r2, [pc, #112]	; (800c038 <RTC_Init+0x74>)
 800bfc8:	6a11      	ldr	r1, [r2, #32]
 800bfca:	2380      	movs	r3, #128	; 0x80
 800bfcc:	021b      	lsls	r3, r3, #8
 800bfce:	430b      	orrs	r3, r1
 800bfd0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800bfd2:	481a      	ldr	r0, [pc, #104]	; (800c03c <RTC_Init+0x78>)
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <RTC_Init+0x7c>)
 800bfd6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800bfdc:	227c      	movs	r2, #124	; 0x7c
 800bfde:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800bfe0:	4a18      	ldr	r2, [pc, #96]	; (800c044 <RTC_Init+0x80>)
 800bfe2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bfe4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bfe6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bfe8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800bfea:	f004 fb21 	bl	8010630 <HAL_RTC_Init>
 800bfee:	1e04      	subs	r4, r0, #0
 800bff0:	d11f      	bne.n	800c032 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800bff2:	2101      	movs	r1, #1
 800bff4:	4811      	ldr	r0, [pc, #68]	; (800c03c <RTC_Init+0x78>)
 800bff6:	f004 fcc3 	bl	8010980 <HAL_RTCEx_BKUPRead>
 800bffa:	4b13      	ldr	r3, [pc, #76]	; (800c048 <RTC_Init+0x84>)
 800bffc:	4298      	cmp	r0, r3
 800bffe:	d10e      	bne.n	800c01e <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800c000:	4b0d      	ldr	r3, [pc, #52]	; (800c038 <RTC_Init+0x74>)
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	011b      	lsls	r3, r3, #4
 800c006:	d502      	bpl.n	800c00e <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800c008:	4b10      	ldr	r3, [pc, #64]	; (800c04c <RTC_Init+0x88>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800c00e:	4b0a      	ldr	r3, [pc, #40]	; (800c038 <RTC_Init+0x74>)
 800c010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c012:	015b      	lsls	r3, r3, #5
 800c014:	d505      	bpl.n	800c022 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <RTC_Init+0x88>)
 800c018:	2201      	movs	r2, #1
 800c01a:	701a      	strb	r2, [r3, #0]
 800c01c:	e001      	b.n	800c022 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800c01e:	f7ff ff55 	bl	800becc <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800c022:	4a05      	ldr	r2, [pc, #20]	; (800c038 <RTC_Init+0x74>)
 800c024:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c026:	2380      	movs	r3, #128	; 0x80
 800c028:	045b      	lsls	r3, r3, #17
 800c02a:	430b      	orrs	r3, r1
 800c02c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c02e:	0020      	movs	r0, r4
 800c030:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800c032:	24ff      	movs	r4, #255	; 0xff
 800c034:	e7fb      	b.n	800c02e <RTC_Init+0x6a>
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	40021000 	.word	0x40021000
 800c03c:	20006980 	.word	0x20006980
 800c040:	40002800 	.word	0x40002800
 800c044:	000007cf 	.word	0x000007cf
 800c048:	000032f2 	.word	0x000032f2
 800c04c:	20001720 	.word	0x20001720

0800c050 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800c050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c052:	46c6      	mov	lr, r8
 800c054:	b500      	push	{lr}
 800c056:	b086      	sub	sp, #24
 800c058:	ac0c      	add	r4, sp, #48	; 0x30
 800c05a:	7827      	ldrb	r7, [r4, #0]
 800c05c:	ac0d      	add	r4, sp, #52	; 0x34
 800c05e:	7824      	ldrb	r4, [r4, #0]
 800c060:	46a0      	mov	r8, r4
 800c062:	ac0e      	add	r4, sp, #56	; 0x38
 800c064:	7825      	ldrb	r5, [r4, #0]
 800c066:	ac0f      	add	r4, sp, #60	; 0x3c
 800c068:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800c06a:	ac05      	add	r4, sp, #20
 800c06c:	3230      	adds	r2, #48	; 0x30
 800c06e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800c070:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800c072:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800c074:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800c076:	2200      	movs	r2, #0
 800c078:	0021      	movs	r1, r4
 800c07a:	481f      	ldr	r0, [pc, #124]	; (800c0f8 <BOS_CalendarConfig+0xa8>)
 800c07c:	f004 fbb6 	bl	80107ec <HAL_RTC_SetDate>
 800c080:	2800      	cmp	r0, #0
 800c082:	d134      	bne.n	800c0ee <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800c084:	466b      	mov	r3, sp
 800c086:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800c088:	4642      	mov	r2, r8
 800c08a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800c08c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800c08e:	2300      	movs	r3, #0
 800c090:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800c092:	2e01      	cmp	r6, #1
 800c094:	d01e      	beq.n	800c0d4 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800c096:	2e02      	cmp	r6, #2
 800c098:	d022      	beq.n	800c0e0 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c09a:	4b18      	ldr	r3, [pc, #96]	; (800c0fc <BOS_CalendarConfig+0xac>)
 800c09c:	2218      	movs	r2, #24
 800c09e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	4669      	mov	r1, sp
 800c0a4:	4814      	ldr	r0, [pc, #80]	; (800c0f8 <BOS_CalendarConfig+0xa8>)
 800c0a6:	f004 fb21 	bl	80106ec <HAL_RTC_SetTime>
 800c0aa:	1e04      	subs	r4, r0, #0
 800c0ac:	d121      	bne.n	800c0f2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c0ae:	4a13      	ldr	r2, [pc, #76]	; (800c0fc <BOS_CalendarConfig+0xac>)
 800c0b0:	7b53      	ldrb	r3, [r2, #13]
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	7911      	ldrb	r1, [r2, #4]
 800c0b6:	4319      	orrs	r1, r3
 800c0b8:	208d      	movs	r0, #141	; 0x8d
 800c0ba:	0040      	lsls	r0, r0, #1
 800c0bc:	f7fa ffac 	bl	8007018 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c0c0:	4a0f      	ldr	r2, [pc, #60]	; (800c100 <BOS_CalendarConfig+0xb0>)
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	480c      	ldr	r0, [pc, #48]	; (800c0f8 <BOS_CalendarConfig+0xa8>)
 800c0c6:	f004 fc55 	bl	8010974 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800c0ca:	0020      	movs	r0, r4
 800c0cc:	b006      	add	sp, #24
 800c0ce:	bc80      	pop	{r7}
 800c0d0:	46b8      	mov	r8, r7
 800c0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c0d4:	466a      	mov	r2, sp
 800c0d6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800c0d8:	4b08      	ldr	r3, [pc, #32]	; (800c0fc <BOS_CalendarConfig+0xac>)
 800c0da:	220c      	movs	r2, #12
 800c0dc:	735a      	strb	r2, [r3, #13]
 800c0de:	e7df      	b.n	800c0a0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	466a      	mov	r2, sp
 800c0e4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <BOS_CalendarConfig+0xac>)
 800c0e8:	220c      	movs	r2, #12
 800c0ea:	735a      	strb	r2, [r3, #13]
 800c0ec:	e7d8      	b.n	800c0a0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800c0ee:	24ff      	movs	r4, #255	; 0xff
 800c0f0:	e7eb      	b.n	800c0ca <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800c0f2:	24ff      	movs	r4, #255	; 0xff
 800c0f4:	e7e9      	b.n	800c0ca <BOS_CalendarConfig+0x7a>
 800c0f6:	46c0      	nop			; (mov r8, r8)
 800c0f8:	20006980 	.word	0x20006980
 800c0fc:	20006600 	.word	0x20006600
 800c100:	000032f2 	.word	0x000032f2

0800c104 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c104:	b530      	push	{r4, r5, lr}
 800c106:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c108:	4d16      	ldr	r5, [pc, #88]	; (800c164 <GetTimeDate+0x60>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	a902      	add	r1, sp, #8
 800c10e:	0028      	movs	r0, r5
 800c110:	f004 fbe8 	bl	80108e4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c114:	ac07      	add	r4, sp, #28
 800c116:	2200      	movs	r2, #0
 800c118:	0021      	movs	r1, r4
 800c11a:	0028      	movs	r0, r5
 800c11c:	f004 fc08 	bl	8010930 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c120:	4b11      	ldr	r3, [pc, #68]	; (800c168 <GetTimeDate+0x64>)
 800c122:	aa02      	add	r2, sp, #8
 800c124:	7a12      	ldrb	r2, [r2, #8]
 800c126:	09d2      	lsrs	r2, r2, #7
 800c128:	3201      	adds	r2, #1
 800c12a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c12c:	9a03      	ldr	r2, [sp, #12]
 800c12e:	9201      	str	r2, [sp, #4]
 800c130:	0852      	lsrs	r2, r2, #1
 800c132:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c134:	aa02      	add	r2, sp, #8
 800c136:	7892      	ldrb	r2, [r2, #2]
 800c138:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c13a:	aa02      	add	r2, sp, #8
 800c13c:	7852      	ldrb	r2, [r2, #1]
 800c13e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c140:	aa02      	add	r2, sp, #8
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c146:	78a2      	ldrb	r2, [r4, #2]
 800c148:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c14a:	7862      	ldrb	r2, [r4, #1]
 800c14c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c14e:	7822      	ldrb	r2, [r4, #0]
 800c150:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c152:	78e2      	ldrb	r2, [r4, #3]
 800c154:	21fa      	movs	r1, #250	; 0xfa
 800c156:	00c9      	lsls	r1, r1, #3
 800c158:	468c      	mov	ip, r1
 800c15a:	4462      	add	r2, ip
 800c15c:	831a      	strh	r2, [r3, #24]
}
 800c15e:	b009      	add	sp, #36	; 0x24
 800c160:	bd30      	pop	{r4, r5, pc}
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	20006980 	.word	0x20006980
 800c168:	20006600 	.word	0x20006600

0800c16c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800c16c:	b530      	push	{r4, r5, lr}
 800c16e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c170:	4a12      	ldr	r2, [pc, #72]	; (800c1bc <TIM_USEC_Init+0x50>)
 800c172:	69d1      	ldr	r1, [r2, #28]
 800c174:	2080      	movs	r0, #128	; 0x80
 800c176:	0040      	lsls	r0, r0, #1
 800c178:	4301      	orrs	r1, r0
 800c17a:	61d1      	str	r1, [r2, #28]
 800c17c:	69d3      	ldr	r3, [r2, #28]
 800c17e:	4003      	ands	r3, r0
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c184:	4c0e      	ldr	r4, [pc, #56]	; (800c1c0 <TIM_USEC_Init+0x54>)
 800c186:	4b0f      	ldr	r3, [pc, #60]	; (800c1c4 <TIM_USEC_Init+0x58>)
 800c188:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c18a:	f004 f969 	bl	8010460 <HAL_RCC_GetPCLK1Freq>
 800c18e:	490e      	ldr	r1, [pc, #56]	; (800c1c8 <TIM_USEC_Init+0x5c>)
 800c190:	f7f3 ffde 	bl	8000150 <__udivsi3>
 800c194:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c196:	2500      	movs	r5, #0
 800c198:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800c19a:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <TIM_USEC_Init+0x60>)
 800c19c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800c19e:	0020      	movs	r0, r4
 800c1a0:	f004 fc70 	bl	8010a84 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c1a4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c1a6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c1a8:	a902      	add	r1, sp, #8
 800c1aa:	0020      	movs	r0, r4
 800c1ac:	f004 fc84 	bl	8010ab8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c1b0:	0020      	movs	r0, r4
 800c1b2:	f004 fbec 	bl	801098e <HAL_TIM_Base_Start>
}
 800c1b6:	b005      	add	sp, #20
 800c1b8:	bd30      	pop	{r4, r5, pc}
 800c1ba:	46c0      	nop			; (mov r8, r8)
 800c1bc:	40021000 	.word	0x40021000
 800c1c0:	200069dc 	.word	0x200069dc
 800c1c4:	40002000 	.word	0x40002000
 800c1c8:	000f4240 	.word	0x000f4240
 800c1cc:	0000ffff 	.word	0x0000ffff

0800c1d0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800c1d0:	b530      	push	{r4, r5, lr}
 800c1d2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c1d4:	4a12      	ldr	r2, [pc, #72]	; (800c220 <TIM_MSEC_Init+0x50>)
 800c1d6:	6991      	ldr	r1, [r2, #24]
 800c1d8:	2080      	movs	r0, #128	; 0x80
 800c1da:	0240      	lsls	r0, r0, #9
 800c1dc:	4301      	orrs	r1, r0
 800c1de:	6191      	str	r1, [r2, #24]
 800c1e0:	6993      	ldr	r3, [r2, #24]
 800c1e2:	4003      	ands	r3, r0
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800c1e8:	4c0e      	ldr	r4, [pc, #56]	; (800c224 <TIM_MSEC_Init+0x54>)
 800c1ea:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <TIM_MSEC_Init+0x58>)
 800c1ec:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c1ee:	f004 f937 	bl	8010460 <HAL_RCC_GetPCLK1Freq>
 800c1f2:	21fa      	movs	r1, #250	; 0xfa
 800c1f4:	0089      	lsls	r1, r1, #2
 800c1f6:	f7f3 ffab 	bl	8000150 <__udivsi3>
 800c1fa:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c1fc:	2500      	movs	r5, #0
 800c1fe:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800c200:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <TIM_MSEC_Init+0x5c>)
 800c202:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800c204:	0020      	movs	r0, r4
 800c206:	f004 fc3d 	bl	8010a84 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c20a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c20c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c20e:	a902      	add	r1, sp, #8
 800c210:	0020      	movs	r0, r4
 800c212:	f004 fc51 	bl	8010ab8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800c216:	0020      	movs	r0, r4
 800c218:	f004 fbb9 	bl	801098e <HAL_TIM_Base_Start>
}
 800c21c:	b005      	add	sp, #20
 800c21e:	bd30      	pop	{r4, r5, pc}
 800c220:	40021000 	.word	0x40021000
 800c224:	200069a0 	.word	0x200069a0
 800c228:	40014000 	.word	0x40014000
 800c22c:	0000ffff 	.word	0x0000ffff

0800c230 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800c230:	b510      	push	{r4, lr}
 800c232:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800c234:	f002 fa4a 	bl	800e6cc <vPortEnterCritical>
	
	if (Delay)
 800c238:	2c00      	cmp	r4, #0
 800c23a:	d006      	beq.n	800c24a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800c23c:	4b04      	ldr	r3, [pc, #16]	; (800c250 <StartMicroDelay+0x20>)
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800c242:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c244:	1a5b      	subs	r3, r3, r1
 800c246:	42a3      	cmp	r3, r4
 800c248:	d9fb      	bls.n	800c242 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c24a:	f002 fa4b 	bl	800e6e4 <vPortExitCritical>
}
 800c24e:	bd10      	pop	{r4, pc}
 800c250:	200069dc 	.word	0x200069dc

0800c254 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800c254:	b510      	push	{r4, lr}
 800c256:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800c258:	f002 fa38 	bl	800e6cc <vPortEnterCritical>
	
	if (Delay)
 800c25c:	2c00      	cmp	r4, #0
 800c25e:	d006      	beq.n	800c26e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800c260:	4b04      	ldr	r3, [pc, #16]	; (800c274 <StartMilliDelay+0x20>)
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800c266:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c268:	1a5b      	subs	r3, r3, r1
 800c26a:	42a3      	cmp	r3, r4
 800c26c:	d9fb      	bls.n	800c266 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c26e:	f002 fa39 	bl	800e6e4 <vPortExitCritical>
}
 800c272:	bd10      	pop	{r4, pc}
 800c274:	200069a0 	.word	0x200069a0

0800c278 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800c278:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800c27a:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <MX_USART1_UART_Init+0x28>)
 800c27c:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <MX_USART1_UART_Init+0x2c>)
 800c27e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c280:	23e1      	movs	r3, #225	; 0xe1
 800c282:	031b      	lsls	r3, r3, #12
 800c284:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c286:	2300      	movs	r3, #0
 800c288:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c28a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c28c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c28e:	220c      	movs	r2, #12
 800c290:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c292:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c294:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c296:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c298:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800c29a:	f005 f891 	bl	80113c0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800c29e:	bd10      	pop	{r4, pc}
 800c2a0:	2000679c 	.word	0x2000679c
 800c2a4:	40013800 	.word	0x40013800

0800c2a8 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800c2a8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800c2aa:	4809      	ldr	r0, [pc, #36]	; (800c2d0 <MX_USART2_UART_Init+0x28>)
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <MX_USART2_UART_Init+0x2c>)
 800c2ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c2b0:	23e1      	movs	r3, #225	; 0xe1
 800c2b2:	031b      	lsls	r3, r3, #12
 800c2b4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c2ba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c2bc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c2be:	220c      	movs	r2, #12
 800c2c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c2c6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2c8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800c2ca:	f005 f879 	bl	80113c0 <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	200068ec 	.word	0x200068ec
 800c2d4:	40004400 	.word	0x40004400

0800c2d8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800c2d8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800c2da:	4809      	ldr	r0, [pc, #36]	; (800c300 <MX_USART3_UART_Init+0x28>)
 800c2dc:	4b09      	ldr	r3, [pc, #36]	; (800c304 <MX_USART3_UART_Init+0x2c>)
 800c2de:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c2e0:	23e1      	movs	r3, #225	; 0xe1
 800c2e2:	031b      	lsls	r3, r3, #12
 800c2e4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c2ea:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c2ec:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c2ee:	220c      	movs	r2, #12
 800c2f0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2f2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2f4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c2f6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2f8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800c2fa:	f005 f861 	bl	80113c0 <HAL_UART_Init>
	#if _P3pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800c2fe:	bd10      	pop	{r4, pc}
 800c300:	200066bc 	.word	0x200066bc
 800c304:	40004800 	.word	0x40004800

0800c308 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800c308:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800c30a:	4809      	ldr	r0, [pc, #36]	; (800c330 <MX_USART4_UART_Init+0x28>)
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <MX_USART4_UART_Init+0x2c>)
 800c30e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c310:	23e1      	movs	r3, #225	; 0xe1
 800c312:	031b      	lsls	r3, r3, #12
 800c314:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c316:	2300      	movs	r3, #0
 800c318:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c31a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c31c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c31e:	220c      	movs	r2, #12
 800c320:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c322:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c324:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c326:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c328:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800c32a:	f005 f849 	bl	80113c0 <HAL_UART_Init>
	#if _P6pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800c32e:	bd10      	pop	{r4, pc}
 800c330:	2000687c 	.word	0x2000687c
 800c334:	40004c00 	.word	0x40004c00

0800c338 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800c338:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800c33a:	4809      	ldr	r0, [pc, #36]	; (800c360 <MX_USART5_UART_Init+0x28>)
 800c33c:	4b09      	ldr	r3, [pc, #36]	; (800c364 <MX_USART5_UART_Init+0x2c>)
 800c33e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c340:	23e1      	movs	r3, #225	; 0xe1
 800c342:	031b      	lsls	r3, r3, #12
 800c344:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c346:	2300      	movs	r3, #0
 800c348:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c34a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c34c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c34e:	220c      	movs	r2, #12
 800c350:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c352:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c354:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c356:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c358:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800c35a:	f005 f831 	bl	80113c0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800c35e:	bd10      	pop	{r4, pc}
 800c360:	2000672c 	.word	0x2000672c
 800c364:	40005000 	.word	0x40005000

0800c368 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800c368:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800c36a:	4809      	ldr	r0, [pc, #36]	; (800c390 <MX_USART6_UART_Init+0x28>)
 800c36c:	4b09      	ldr	r3, [pc, #36]	; (800c394 <MX_USART6_UART_Init+0x2c>)
 800c36e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c370:	23e1      	movs	r3, #225	; 0xe1
 800c372:	031b      	lsls	r3, r3, #12
 800c374:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c376:	2300      	movs	r3, #0
 800c378:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c37a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c37c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c37e:	220c      	movs	r2, #12
 800c380:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c382:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c384:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c386:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c388:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800c38a:	f005 f819 	bl	80113c0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	2000680c 	.word	0x2000680c
 800c394:	40011400 	.word	0x40011400

0800c398 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c39a:	46ce      	mov	lr, r9
 800c39c:	4647      	mov	r7, r8
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800c3a2:	6803      	ldr	r3, [r0, #0]
 800c3a4:	4a96      	ldr	r2, [pc, #600]	; (800c600 <HAL_UART_MspInit+0x268>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d016      	beq.n	800c3d8 <HAL_UART_MspInit+0x40>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800c3aa:	4a96      	ldr	r2, [pc, #600]	; (800c604 <HAL_UART_MspInit+0x26c>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d041      	beq.n	800c434 <HAL_UART_MspInit+0x9c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800c3b0:	4a95      	ldr	r2, [pc, #596]	; (800c608 <HAL_UART_MspInit+0x270>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d06a      	beq.n	800c48c <HAL_UART_MspInit+0xf4>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800c3b6:	4a95      	ldr	r2, [pc, #596]	; (800c60c <HAL_UART_MspInit+0x274>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d100      	bne.n	800c3be <HAL_UART_MspInit+0x26>
 800c3bc:	e096      	b.n	800c4ec <HAL_UART_MspInit+0x154>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800c3be:	4a94      	ldr	r2, [pc, #592]	; (800c610 <HAL_UART_MspInit+0x278>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d100      	bne.n	800c3c6 <HAL_UART_MspInit+0x2e>
 800c3c4:	e0bf      	b.n	800c546 <HAL_UART_MspInit+0x1ae>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800c3c6:	4a93      	ldr	r2, [pc, #588]	; (800c614 <HAL_UART_MspInit+0x27c>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d100      	bne.n	800c3ce <HAL_UART_MspInit+0x36>
 800c3cc:	e0e9      	b.n	800c5a2 <HAL_UART_MspInit+0x20a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800c3ce:	b00d      	add	sp, #52	; 0x34
 800c3d0:	bcc0      	pop	{r6, r7}
 800c3d2:	46b9      	mov	r9, r7
 800c3d4:	46b0      	mov	r8, r6
 800c3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800c3d8:	4a8f      	ldr	r2, [pc, #572]	; (800c618 <HAL_UART_MspInit+0x280>)
 800c3da:	6991      	ldr	r1, [r2, #24]
 800c3dc:	2080      	movs	r0, #128	; 0x80
 800c3de:	01c0      	lsls	r0, r0, #7
 800c3e0:	4301      	orrs	r1, r0
 800c3e2:	6191      	str	r1, [r2, #24]
 800c3e4:	6993      	ldr	r3, [r2, #24]
 800c3e6:	4003      	ands	r3, r0
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800c3ec:	2380      	movs	r3, #128	; 0x80
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3f2:	2702      	movs	r7, #2
 800c3f4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c3f6:	2401      	movs	r4, #1
 800c3f8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c3fa:	2603      	movs	r6, #3
 800c3fc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800c3fe:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800c400:	2590      	movs	r5, #144	; 0x90
 800c402:	05ed      	lsls	r5, r5, #23
 800c404:	a907      	add	r1, sp, #28
 800c406:	0028      	movs	r0, r5
 800c408:	f003 fac0 	bl	800f98c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800c40c:	2380      	movs	r3, #128	; 0x80
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c412:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c414:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c416:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800c418:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800c41a:	a907      	add	r1, sp, #28
 800c41c:	0028      	movs	r0, r5
 800c41e:	f003 fab5 	bl	800f98c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800c422:	2200      	movs	r2, #0
 800c424:	2101      	movs	r1, #1
 800c426:	201b      	movs	r0, #27
 800c428:	f002 fada 	bl	800e9e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c42c:	201b      	movs	r0, #27
 800c42e:	f002 fb09 	bl	800ea44 <HAL_NVIC_EnableIRQ>
 800c432:	e7cc      	b.n	800c3ce <HAL_UART_MspInit+0x36>
    __USART2_CLK_ENABLE();
 800c434:	4a78      	ldr	r2, [pc, #480]	; (800c618 <HAL_UART_MspInit+0x280>)
 800c436:	69d1      	ldr	r1, [r2, #28]
 800c438:	2080      	movs	r0, #128	; 0x80
 800c43a:	0280      	lsls	r0, r0, #10
 800c43c:	4301      	orrs	r1, r0
 800c43e:	61d1      	str	r1, [r2, #28]
 800c440:	69d3      	ldr	r3, [r2, #28]
 800c442:	4003      	ands	r3, r0
 800c444:	9302      	str	r3, [sp, #8]
 800c446:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800c448:	2304      	movs	r3, #4
 800c44a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c44c:	2702      	movs	r7, #2
 800c44e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c450:	2401      	movs	r4, #1
 800c452:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c454:	2603      	movs	r6, #3
 800c456:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800c458:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800c45a:	2590      	movs	r5, #144	; 0x90
 800c45c:	05ed      	lsls	r5, r5, #23
 800c45e:	a907      	add	r1, sp, #28
 800c460:	0028      	movs	r0, r5
 800c462:	f003 fa93 	bl	800f98c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800c466:	2308      	movs	r3, #8
 800c468:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c46a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c46c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c46e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800c470:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800c472:	a907      	add	r1, sp, #28
 800c474:	0028      	movs	r0, r5
 800c476:	f003 fa89 	bl	800f98c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800c47a:	2200      	movs	r2, #0
 800c47c:	2101      	movs	r1, #1
 800c47e:	201c      	movs	r0, #28
 800c480:	f002 faae 	bl	800e9e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c484:	201c      	movs	r0, #28
 800c486:	f002 fadd 	bl	800ea44 <HAL_NVIC_EnableIRQ>
 800c48a:	e7a0      	b.n	800c3ce <HAL_UART_MspInit+0x36>
    __USART3_CLK_ENABLE();
 800c48c:	4a62      	ldr	r2, [pc, #392]	; (800c618 <HAL_UART_MspInit+0x280>)
 800c48e:	69d1      	ldr	r1, [r2, #28]
 800c490:	2080      	movs	r0, #128	; 0x80
 800c492:	02c0      	lsls	r0, r0, #11
 800c494:	4301      	orrs	r1, r0
 800c496:	61d1      	str	r1, [r2, #28]
 800c498:	69d3      	ldr	r3, [r2, #28]
 800c49a:	4003      	ands	r3, r0
 800c49c:	9303      	str	r3, [sp, #12]
 800c49e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800c4a0:	2380      	movs	r3, #128	; 0x80
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	4698      	mov	r8, r3
 800c4aa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c4ac:	2701      	movs	r7, #1
 800c4ae:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4b0:	2603      	movs	r6, #3
 800c4b2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800c4b4:	2504      	movs	r5, #4
 800c4b6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800c4b8:	4c58      	ldr	r4, [pc, #352]	; (800c61c <HAL_UART_MspInit+0x284>)
 800c4ba:	a907      	add	r1, sp, #28
 800c4bc:	0020      	movs	r0, r4
 800c4be:	f003 fa65 	bl	800f98c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800c4c2:	2380      	movs	r3, #128	; 0x80
 800c4c4:	011b      	lsls	r3, r3, #4
 800c4c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4c8:	4643      	mov	r3, r8
 800c4ca:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c4cc:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4ce:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800c4d0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800c4d2:	a907      	add	r1, sp, #28
 800c4d4:	0020      	movs	r0, r4
 800c4d6:	f003 fa59 	bl	800f98c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2101      	movs	r1, #1
 800c4de:	201d      	movs	r0, #29
 800c4e0:	f002 fa7e 	bl	800e9e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c4e4:	201d      	movs	r0, #29
 800c4e6:	f002 faad 	bl	800ea44 <HAL_NVIC_EnableIRQ>
 800c4ea:	e770      	b.n	800c3ce <HAL_UART_MspInit+0x36>
    __USART4_CLK_ENABLE();
 800c4ec:	4a4a      	ldr	r2, [pc, #296]	; (800c618 <HAL_UART_MspInit+0x280>)
 800c4ee:	69d1      	ldr	r1, [r2, #28]
 800c4f0:	2080      	movs	r0, #128	; 0x80
 800c4f2:	0300      	lsls	r0, r0, #12
 800c4f4:	4301      	orrs	r1, r0
 800c4f6:	61d1      	str	r1, [r2, #28]
 800c4f8:	69d3      	ldr	r3, [r2, #28]
 800c4fa:	4003      	ands	r3, r0
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800c500:	2401      	movs	r4, #1
 800c502:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c504:	2502      	movs	r5, #2
 800c506:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c508:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c50a:	2303      	movs	r3, #3
 800c50c:	4698      	mov	r8, r3
 800c50e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800c510:	2704      	movs	r7, #4
 800c512:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800c514:	2690      	movs	r6, #144	; 0x90
 800c516:	05f6      	lsls	r6, r6, #23
 800c518:	a907      	add	r1, sp, #28
 800c51a:	0030      	movs	r0, r6
 800c51c:	f003 fa36 	bl	800f98c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800c520:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c522:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c524:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c526:	4643      	mov	r3, r8
 800c528:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800c52a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800c52c:	a907      	add	r1, sp, #28
 800c52e:	0030      	movs	r0, r6
 800c530:	f003 fa2c 	bl	800f98c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c534:	2200      	movs	r2, #0
 800c536:	2101      	movs	r1, #1
 800c538:	201d      	movs	r0, #29
 800c53a:	f002 fa51 	bl	800e9e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c53e:	201d      	movs	r0, #29
 800c540:	f002 fa80 	bl	800ea44 <HAL_NVIC_EnableIRQ>
 800c544:	e743      	b.n	800c3ce <HAL_UART_MspInit+0x36>
    __USART5_CLK_ENABLE();
 800c546:	4a34      	ldr	r2, [pc, #208]	; (800c618 <HAL_UART_MspInit+0x280>)
 800c548:	69d1      	ldr	r1, [r2, #28]
 800c54a:	2080      	movs	r0, #128	; 0x80
 800c54c:	0340      	lsls	r0, r0, #13
 800c54e:	4301      	orrs	r1, r0
 800c550:	61d1      	str	r1, [r2, #28]
 800c552:	69d3      	ldr	r3, [r2, #28]
 800c554:	4003      	ands	r3, r0
 800c556:	9305      	str	r3, [sp, #20]
 800c558:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800c55a:	2308      	movs	r3, #8
 800c55c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c55e:	3b06      	subs	r3, #6
 800c560:	4698      	mov	r8, r3
 800c562:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c564:	2701      	movs	r7, #1
 800c566:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c568:	2603      	movs	r6, #3
 800c56a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800c56c:	2504      	movs	r5, #4
 800c56e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800c570:	4c2a      	ldr	r4, [pc, #168]	; (800c61c <HAL_UART_MspInit+0x284>)
 800c572:	a907      	add	r1, sp, #28
 800c574:	0020      	movs	r0, r4
 800c576:	f003 fa09 	bl	800f98c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800c57a:	2310      	movs	r3, #16
 800c57c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c57e:	4643      	mov	r3, r8
 800c580:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c582:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c584:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800c586:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800c588:	a907      	add	r1, sp, #28
 800c58a:	0020      	movs	r0, r4
 800c58c:	f003 f9fe 	bl	800f98c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c590:	2200      	movs	r2, #0
 800c592:	2101      	movs	r1, #1
 800c594:	201d      	movs	r0, #29
 800c596:	f002 fa23 	bl	800e9e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c59a:	201d      	movs	r0, #29
 800c59c:	f002 fa52 	bl	800ea44 <HAL_NVIC_EnableIRQ>
 800c5a0:	e715      	b.n	800c3ce <HAL_UART_MspInit+0x36>
    __USART6_CLK_ENABLE();
 800c5a2:	4b1d      	ldr	r3, [pc, #116]	; (800c618 <HAL_UART_MspInit+0x280>)
 800c5a4:	699a      	ldr	r2, [r3, #24]
 800c5a6:	2420      	movs	r4, #32
 800c5a8:	4322      	orrs	r2, r4
 800c5aa:	619a      	str	r2, [r3, #24]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	4023      	ands	r3, r4
 800c5b0:	9306      	str	r3, [sp, #24]
 800c5b2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5b8:	3b0e      	subs	r3, #14
 800c5ba:	4699      	mov	r9, r3
 800c5bc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	4698      	mov	r8, r3
 800c5c2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c5c4:	2703      	movs	r7, #3
 800c5c6:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800c5c8:	2605      	movs	r6, #5
 800c5ca:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800c5cc:	2590      	movs	r5, #144	; 0x90
 800c5ce:	05ed      	lsls	r5, r5, #23
 800c5d0:	a907      	add	r1, sp, #28
 800c5d2:	0028      	movs	r0, r5
 800c5d4:	f003 f9da 	bl	800f98c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800c5d8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5da:	464b      	mov	r3, r9
 800c5dc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5de:	4643      	mov	r3, r8
 800c5e0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c5e2:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800c5e4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800c5e6:	a907      	add	r1, sp, #28
 800c5e8:	0028      	movs	r0, r5
 800c5ea:	f003 f9cf 	bl	800f98c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	201d      	movs	r0, #29
 800c5f4:	f002 f9f4 	bl	800e9e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c5f8:	201d      	movs	r0, #29
 800c5fa:	f002 fa23 	bl	800ea44 <HAL_NVIC_EnableIRQ>
}
 800c5fe:	e6e6      	b.n	800c3ce <HAL_UART_MspInit+0x36>
 800c600:	40013800 	.word	0x40013800
 800c604:	40004400 	.word	0x40004400
 800c608:	40004800 	.word	0x40004800
 800c60c:	40004c00 	.word	0x40004c00
 800c610:	40005000 	.word	0x40005000
 800c614:	40011400 	.word	0x40011400
 800c618:	40021000 	.word	0x40021000
 800c61c:	48000400 	.word	0x48000400

0800c620 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800c620:	2806      	cmp	r0, #6
 800c622:	d80d      	bhi.n	800c640 <GetUart+0x20>
 800c624:	0080      	lsls	r0, r0, #2
 800c626:	4b08      	ldr	r3, [pc, #32]	; (800c648 <GetUart+0x28>)
 800c628:	581b      	ldr	r3, [r3, r0]
 800c62a:	469f      	mov	pc, r3
		case P5 :
			return P5uart;
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800c62c:	4807      	ldr	r0, [pc, #28]	; (800c64c <GetUart+0x2c>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800c62e:	4770      	bx	lr
			return P3uart;
 800c630:	4807      	ldr	r0, [pc, #28]	; (800c650 <GetUart+0x30>)
 800c632:	e7fc      	b.n	800c62e <GetUart+0xe>
			return P4uart;
 800c634:	4807      	ldr	r0, [pc, #28]	; (800c654 <GetUart+0x34>)
 800c636:	e7fa      	b.n	800c62e <GetUart+0xe>
			return P5uart;
 800c638:	4807      	ldr	r0, [pc, #28]	; (800c658 <GetUart+0x38>)
 800c63a:	e7f8      	b.n	800c62e <GetUart+0xe>
			return P6uart;
 800c63c:	4807      	ldr	r0, [pc, #28]	; (800c65c <GetUart+0x3c>)
 800c63e:	e7f6      	b.n	800c62e <GetUart+0xe>
			return 0;
 800c640:	2000      	movs	r0, #0
 800c642:	e7f4      	b.n	800c62e <GetUart+0xe>
			return P1uart;	
 800c644:	4806      	ldr	r0, [pc, #24]	; (800c660 <GetUart+0x40>)
 800c646:	e7f2      	b.n	800c62e <GetUart+0xe>
 800c648:	0801a5c0 	.word	0x0801a5c0
 800c64c:	2000680c 	.word	0x2000680c
 800c650:	200066bc 	.word	0x200066bc
 800c654:	2000679c 	.word	0x2000679c
 800c658:	2000672c 	.word	0x2000672c
 800c65c:	2000687c 	.word	0x2000687c
 800c660:	200068ec 	.word	0x200068ec

0800c664 <writePxMutex>:
{
 800c664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c666:	46ce      	mov	lr, r9
 800c668:	b500      	push	{lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	0006      	movs	r6, r0
 800c66e:	000f      	movs	r7, r1
 800c670:	4691      	mov	r9, r2
 800c672:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800c674:	f7ff ffd4 	bl	800c620 <GetUart>
 800c678:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800c67a:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d016      	beq.n	800c6ae <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c680:	00b3      	lsls	r3, r6, #2
 800c682:	4a0d      	ldr	r2, [pc, #52]	; (800c6b8 <writePxMutex+0x54>)
 800c684:	5898      	ldr	r0, [r3, r2]
 800c686:	9901      	ldr	r1, [sp, #4]
 800c688:	f000 f93a 	bl	800c900 <osSemaphoreWait>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d10e      	bne.n	800c6ae <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800c690:	9b08      	ldr	r3, [sp, #32]
 800c692:	464a      	mov	r2, r9
 800c694:	0039      	movs	r1, r7
 800c696:	0028      	movs	r0, r5
 800c698:	f004 fde6 	bl	8011268 <HAL_UART_Transmit>
 800c69c:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800c69e:	d001      	beq.n	800c6a4 <writePxMutex+0x40>
 800c6a0:	2803      	cmp	r0, #3
 800c6a2:	d1f5      	bne.n	800c690 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c6a4:	00b6      	lsls	r6, r6, #2
 800c6a6:	4b04      	ldr	r3, [pc, #16]	; (800c6b8 <writePxMutex+0x54>)
 800c6a8:	58f0      	ldr	r0, [r6, r3]
 800c6aa:	f000 f957 	bl	800c95c <osSemaphoreRelease>
}
 800c6ae:	0020      	movs	r0, r4
 800c6b0:	b002      	add	sp, #8
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	46b9      	mov	r9, r7
 800c6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b8:	20006680 	.word	0x20006680

0800c6bc <writePxITMutex>:
{
 800c6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	0004      	movs	r4, r0
 800c6c2:	9101      	str	r1, [sp, #4]
 800c6c4:	0017      	movs	r7, r2
 800c6c6:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800c6c8:	f7ff ffaa 	bl	800c620 <GetUart>
 800c6cc:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800c6ce:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800c6d0:	2e00      	cmp	r6, #0
 800c6d2:	d009      	beq.n	800c6e8 <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c6d4:	00a4      	lsls	r4, r4, #2
 800c6d6:	4b08      	ldr	r3, [pc, #32]	; (800c6f8 <writePxITMutex+0x3c>)
 800c6d8:	58e0      	ldr	r0, [r4, r3]
 800c6da:	0029      	movs	r1, r5
 800c6dc:	f000 f910 	bl	800c900 <osSemaphoreWait>
 800c6e0:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800c6e2:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <writePxITMutex+0x30>
}
 800c6e8:	b003      	add	sp, #12
 800c6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800c6ec:	003a      	movs	r2, r7
 800c6ee:	9901      	ldr	r1, [sp, #4]
 800c6f0:	0030      	movs	r0, r6
 800c6f2:	f004 fa24 	bl	8010b3e <HAL_UART_Transmit_IT>
 800c6f6:	e7f7      	b.n	800c6e8 <writePxITMutex+0x2c>
 800c6f8:	20006680 	.word	0x20006680

0800c6fc <writePxDMAMutex>:
{
 800c6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6fe:	b083      	sub	sp, #12
 800c700:	0004      	movs	r4, r0
 800c702:	9101      	str	r1, [sp, #4]
 800c704:	0017      	movs	r7, r2
 800c706:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800c708:	f7ff ff8a 	bl	800c620 <GetUart>
 800c70c:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800c70e:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800c710:	2e00      	cmp	r6, #0
 800c712:	d009      	beq.n	800c728 <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c714:	00a4      	lsls	r4, r4, #2
 800c716:	4b0a      	ldr	r3, [pc, #40]	; (800c740 <writePxDMAMutex+0x44>)
 800c718:	58e0      	ldr	r0, [r4, r3]
 800c71a:	0029      	movs	r1, r5
 800c71c:	f000 f8f0 	bl	800c900 <osSemaphoreWait>
 800c720:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800c722:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <writePxDMAMutex+0x30>
}
 800c728:	b003      	add	sp, #12
 800c72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800c72c:	0030      	movs	r0, r6
 800c72e:	f7ff f93f 	bl	800b9b0 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800c732:	003a      	movs	r2, r7
 800c734:	9901      	ldr	r1, [sp, #4]
 800c736:	0030      	movs	r0, r6
 800c738:	f004 fab0 	bl	8010c9c <HAL_UART_Transmit_DMA>
 800c73c:	e7f4      	b.n	800c728 <writePxDMAMutex+0x2c>
 800c73e:	46c0      	nop			; (mov r8, r8)
 800c740:	20006680 	.word	0x20006680

0800c744 <UpdateBaudrate>:
{
 800c744:	b510      	push	{r4, lr}
 800c746:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800c748:	f7ff ff6a 	bl	800c620 <GetUart>
	huart->Init.BaudRate = baudrate;
 800c74c:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800c74e:	f004 fe37 	bl	80113c0 <HAL_UART_Init>
}
 800c752:	2000      	movs	r0, #0
 800c754:	bd10      	pop	{r4, pc}
	...

0800c758 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800c75c:	d003      	beq.n	800c766 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800c75e:	2901      	cmp	r1, #1
 800c760:	d002      	beq.n	800c768 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800c762:	2900      	cmp	r1, #0
 800c764:	d016      	beq.n	800c794 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800c766:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c768:	f7fe f8c0 	bl	800a8ec <GetPort>
 800c76c:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <SwapUartPins+0x68>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	3b01      	subs	r3, #1
 800c772:	4d14      	ldr	r5, [pc, #80]	; (800c7c4 <SwapUartPins+0x6c>)
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	3801      	subs	r0, #1
 800c778:	2180      	movs	r1, #128	; 0x80
 800c77a:	0209      	lsls	r1, r1, #8
 800c77c:	000a      	movs	r2, r1
 800c77e:	4102      	asrs	r2, r0
 800c780:	5b58      	ldrh	r0, [r3, r5]
 800c782:	4302      	orrs	r2, r0
 800c784:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c786:	2308      	movs	r3, #8
 800c788:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c78a:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800c78c:	0020      	movs	r0, r4
 800c78e:	f004 fe17 	bl	80113c0 <HAL_UART_Init>
 800c792:	e7e8      	b.n	800c766 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800c794:	f7fe f8aa 	bl	800a8ec <GetPort>
 800c798:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <SwapUartPins+0x68>)
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	4d09      	ldr	r5, [pc, #36]	; (800c7c4 <SwapUartPins+0x6c>)
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	3801      	subs	r0, #1
 800c7a4:	2180      	movs	r1, #128	; 0x80
 800c7a6:	0209      	lsls	r1, r1, #8
 800c7a8:	4101      	asrs	r1, r0
 800c7aa:	5b5a      	ldrh	r2, [r3, r5]
 800c7ac:	438a      	bics	r2, r1
 800c7ae:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c7b0:	2308      	movs	r3, #8
 800c7b2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800c7b8:	0020      	movs	r0, r4
 800c7ba:	f004 fe01 	bl	80113c0 <HAL_UART_Init>
}
 800c7be:	e7d2      	b.n	800c766 <SwapUartPins+0xe>
 800c7c0:	20000070 	.word	0x20000070
 800c7c4:	20006a18 	.word	0x20006a18

0800c7c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c7c8:	4816      	ldr	r0, [pc, #88]	; (800c824 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800c7ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c7cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c7ce:	e003      	b.n	800c7d8 <LoopCopyDataInit>

0800c7d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c7d0:	4b15      	ldr	r3, [pc, #84]	; (800c828 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800c7d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c7d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c7d6:	3104      	adds	r1, #4

0800c7d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c7d8:	4814      	ldr	r0, [pc, #80]	; (800c82c <LoopForever+0xc>)
  ldr r3, =_edata
 800c7da:	4b15      	ldr	r3, [pc, #84]	; (800c830 <LoopForever+0x10>)
  adds r2, r0, r1
 800c7dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c7de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c7e0:	d3f6      	bcc.n	800c7d0 <CopyDataInit>
  ldr r2, =_sbss
 800c7e2:	4a14      	ldr	r2, [pc, #80]	; (800c834 <LoopForever+0x14>)
  b LoopFillZerobss
 800c7e4:	e002      	b.n	800c7ec <LoopFillZerobss>

0800c7e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c7e6:	2300      	movs	r3, #0
  str  r3, [r2]
 800c7e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c7ea:	3204      	adds	r2, #4

0800c7ec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800c7ec:	4b12      	ldr	r3, [pc, #72]	; (800c838 <LoopForever+0x18>)
  cmp r2, r3
 800c7ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c7f0:	d3f9      	bcc.n	800c7e6 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800c7f2:	4812      	ldr	r0, [pc, #72]	; (800c83c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800c7f4:	4912      	ldr	r1, [pc, #72]	; (800c840 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800c7f6:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800c7f8:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800c7fa:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800c7fc:	d005      	beq.n	800c80a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800c7fe:	f000 f82b 	bl	800c858 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800c802:	f004 ff53 	bl	80116ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c806:	f004 ff32 	bl	801166e <main>

0800c80a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800c80a:	480e      	ldr	r0, [pc, #56]	; (800c844 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800c80c:	490e      	ldr	r1, [pc, #56]	; (800c848 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800c80e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800c810:	480e      	ldr	r0, [pc, #56]	; (800c84c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800c812:	490d      	ldr	r1, [pc, #52]	; (800c848 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800c814:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800c816:	480e      	ldr	r0, [pc, #56]	; (800c850 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800c818:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800c81a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800c81c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800c81e:	4700      	bx	r0

0800c820 <LoopForever>:


LoopForever:
    b LoopForever
 800c820:	e7fe      	b.n	800c820 <LoopForever>
 800c822:	0000      	.short	0x0000
  ldr   r0, =_estack
 800c824:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800c828:	0801ac44 	.word	0x0801ac44
  ldr r0, =_sdata
 800c82c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c830:	20000ab4 	.word	0x20000ab4
  ldr r2, =_sbss
 800c834:	20000ab8 	.word	0x20000ab8
  ldr r3, = _ebss
 800c838:	20006a90 	.word	0x20006a90
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800c83c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800c840:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800c844:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800c848:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800c84c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800c850:	1fffd800 	.word	0x1fffd800

0800c854 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c854:	e7fe      	b.n	800c854 <ADC1_COMP_IRQHandler>
	...

0800c858 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c858:	4b11      	ldr	r3, [pc, #68]	; (800c8a0 <SystemInit+0x48>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	2101      	movs	r1, #1
 800c85e:	430a      	orrs	r2, r1
 800c860:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	480f      	ldr	r0, [pc, #60]	; (800c8a4 <SystemInit+0x4c>)
 800c866:	4002      	ands	r2, r0
 800c868:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	480e      	ldr	r0, [pc, #56]	; (800c8a8 <SystemInit+0x50>)
 800c86e:	4002      	ands	r2, r0
 800c870:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	480d      	ldr	r0, [pc, #52]	; (800c8ac <SystemInit+0x54>)
 800c876:	4002      	ands	r2, r0
 800c878:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	480c      	ldr	r0, [pc, #48]	; (800c8b0 <SystemInit+0x58>)
 800c87e:	4002      	ands	r2, r0
 800c880:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800c882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c884:	200f      	movs	r0, #15
 800c886:	4382      	bics	r2, r0
 800c888:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800c88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c88c:	4809      	ldr	r0, [pc, #36]	; (800c8b4 <SystemInit+0x5c>)
 800c88e:	4002      	ands	r2, r0
 800c890:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800c892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c894:	438a      	bics	r2, r1
 800c896:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c898:	2200      	movs	r2, #0
 800c89a:	609a      	str	r2, [r3, #8]

}
 800c89c:	4770      	bx	lr
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	40021000 	.word	0x40021000
 800c8a4:	08ffb80c 	.word	0x08ffb80c
 800c8a8:	fef6ffff 	.word	0xfef6ffff
 800c8ac:	fffbffff 	.word	0xfffbffff
 800c8b0:	ffc0ffff 	.word	0xffc0ffff
 800c8b4:	fff0feac 	.word	0xfff0feac

0800c8b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c8b8:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800c8ba:	f000 ff7d 	bl	800d7b8 <vTaskStartScheduler>
  
  return osOK;
}
 800c8be:	2000      	movs	r0, #0
 800c8c0:	bd10      	pop	{r4, pc}

0800c8c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c8c2:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d100      	bne.n	800c8ca <osDelay+0x8>
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	f001 f8bd 	bl	800da48 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	bd10      	pop	{r4, pc}

0800c8d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800c8d2:	b510      	push	{r4, lr}
 800c8d4:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800c8d6:	2901      	cmp	r1, #1
 800c8d8:	d005      	beq.n	800c8e6 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800c8da:	2100      	movs	r1, #0
 800c8dc:	f000 fb06 	bl	800ceec <xQueueCreateCountingSemaphore>
 800c8e0:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800c8e2:	0020      	movs	r0, r4
 800c8e4:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f000 fada 	bl	800cea2 <xQueueGenericCreate>
 800c8ee:	1e04      	subs	r4, r0, #0
 800c8f0:	d0f7      	beq.n	800c8e2 <osSemaphoreCreate+0x10>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	f000 fb0c 	bl	800cf14 <xQueueGenericSend>
 800c8fc:	e7f1      	b.n	800c8e2 <osSemaphoreCreate+0x10>
	...

0800c900 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c900:	b500      	push	{lr}
 800c902:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c904:	2300      	movs	r3, #0
 800c906:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800c908:	2800      	cmp	r0, #0
 800c90a:	d020      	beq.n	800c94e <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c90c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00e      	beq.n	800c932 <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c914:	aa01      	add	r2, sp, #4
 800c916:	2100      	movs	r1, #0
 800c918:	f000 fcc7 	bl	800d2aa <xQueueReceiveFromISR>
 800c91c:	2801      	cmp	r0, #1
 800c91e:	d118      	bne.n	800c952 <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c920:	9801      	ldr	r0, [sp, #4]
 800c922:	2800      	cmp	r0, #0
 800c924:	d011      	beq.n	800c94a <osSemaphoreWait+0x4a>
 800c926:	4b0c      	ldr	r3, [pc, #48]	; (800c958 <osSemaphoreWait+0x58>)
 800c928:	2280      	movs	r2, #128	; 0x80
 800c92a:	0552      	lsls	r2, r2, #21
 800c92c:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800c92e:	2000      	movs	r0, #0
 800c930:	e00b      	b.n	800c94a <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c932:	2300      	movs	r3, #0
 800c934:	000a      	movs	r2, r1
 800c936:	2100      	movs	r1, #0
 800c938:	f000 fc0c 	bl	800d154 <xQueueGenericReceive>
    return osErrorOS;
 800c93c:	3801      	subs	r0, #1
 800c93e:	4243      	negs	r3, r0
 800c940:	4158      	adcs	r0, r3
 800c942:	4240      	negs	r0, r0
 800c944:	23fe      	movs	r3, #254	; 0xfe
 800c946:	4398      	bics	r0, r3
 800c948:	30ff      	adds	r0, #255	; 0xff
}
 800c94a:	b003      	add	sp, #12
 800c94c:	bd00      	pop	{pc}
    return osErrorParameter;
 800c94e:	2080      	movs	r0, #128	; 0x80
 800c950:	e7fb      	b.n	800c94a <osSemaphoreWait+0x4a>
      return osErrorOS;
 800c952:	20ff      	movs	r0, #255	; 0xff
 800c954:	e7f9      	b.n	800c94a <osSemaphoreWait+0x4a>
 800c956:	46c0      	nop			; (mov r8, r8)
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c95c:	b510      	push	{r4, lr}
 800c95e:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	9301      	str	r3, [sp, #4]
 800c964:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800c968:	2c00      	cmp	r4, #0
 800c96a:	d00d      	beq.n	800c988 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c96c:	a901      	add	r1, sp, #4
 800c96e:	f000 fbb5 	bl	800d0dc <xQueueGiveFromISR>
 800c972:	2801      	cmp	r0, #1
 800c974:	d113      	bne.n	800c99e <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800c976:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c978:	9b01      	ldr	r3, [sp, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00c      	beq.n	800c998 <osSemaphoreRelease+0x3c>
 800c97e:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <osSemaphoreRelease+0x48>)
 800c980:	2280      	movs	r2, #128	; 0x80
 800c982:	0552      	lsls	r2, r2, #21
 800c984:	601a      	str	r2, [r3, #0]
 800c986:	e007      	b.n	800c998 <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c988:	2300      	movs	r3, #0
 800c98a:	2200      	movs	r2, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	f000 fac1 	bl	800cf14 <xQueueGenericSend>
 800c992:	2801      	cmp	r0, #1
 800c994:	d000      	beq.n	800c998 <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800c996:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800c998:	0020      	movs	r0, r4
 800c99a:	b002      	add	sp, #8
 800c99c:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800c99e:	24ff      	movs	r4, #255	; 0xff
 800c9a0:	e7fa      	b.n	800c998 <osSemaphoreRelease+0x3c>
 800c9a2:	46c0      	nop			; (mov r8, r8)
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c9a8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c9aa:	f001 fa41 	bl	800de30 <xTaskGetSchedulerState>
 800c9ae:	2801      	cmp	r0, #1
 800c9b0:	d100      	bne.n	800c9b4 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c9b2:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800c9b4:	f001 fed0 	bl	800e758 <xPortSysTickHandler>
}
 800c9b8:	e7fb      	b.n	800c9b2 <osSystickHandler+0xa>
	...

0800c9bc <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800c9c0:	d011      	beq.n	800c9e6 <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800c9c2:	2008      	movs	r0, #8
 800c9c4:	f001 ff04 	bl	800e7d0 <pvPortMalloc>
 800c9c8:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800c9ca:	d00e      	beq.n	800c9ea <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800c9cc:	f001 fe7e 	bl	800e6cc <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800c9d0:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800c9d6:	4b06      	ldr	r3, [pc, #24]	; (800c9f0 <FreeRTOS_CLIRegisterCommand+0x34>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800c9dc:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800c9de:	f001 fe81 	bl	800e6e4 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800c9e6:	b672      	cpsid	i
 800c9e8:	e7fe      	b.n	800c9e8 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800c9ea:	b672      	cpsid	i
 800c9ec:	e7fe      	b.n	800c9ec <FreeRTOS_CLIRegisterCommand+0x30>
 800c9ee:	46c0      	nop			; (mov r8, r8)
 800c9f0:	200000ec 	.word	0x200000ec

0800c9f4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800c9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9f6:	46de      	mov	lr, fp
 800c9f8:	4657      	mov	r7, sl
 800c9fa:	464e      	mov	r6, r9
 800c9fc:	4645      	mov	r5, r8
 800c9fe:	b5e0      	push	{r5, r6, r7, lr}
 800ca00:	b083      	sub	sp, #12
 800ca02:	0006      	movs	r6, r0
 800ca04:	4689      	mov	r9, r1
 800ca06:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800ca08:	4b3b      	ldr	r3, [pc, #236]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d012      	beq.n	800ca36 <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	0032      	movs	r2, r6
 800ca16:	9901      	ldr	r1, [sp, #4]
 800ca18:	4648      	mov	r0, r9
 800ca1a:	4798      	blx	r3
 800ca1c:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800ca1e:	d102      	bne.n	800ca26 <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800ca20:	4b35      	ldr	r3, [pc, #212]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ca26:	0028      	movs	r0, r5
 800ca28:	b003      	add	sp, #12
 800ca2a:	bcf0      	pop	{r4, r5, r6, r7}
 800ca2c:	46bb      	mov	fp, r7
 800ca2e:	46b2      	mov	sl, r6
 800ca30:	46a9      	mov	r9, r5
 800ca32:	46a0      	mov	r8, r4
 800ca34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ca36:	4c31      	ldr	r4, [pc, #196]	; (800cafc <FreeRTOS_CLIProcessCommand+0x108>)
 800ca38:	4b2f      	ldr	r3, [pc, #188]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800ca3a:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ca3c:	2320      	movs	r3, #32
 800ca3e:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ca40:	4b2d      	ldr	r3, [pc, #180]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800ca42:	469b      	mov	fp, r3
 800ca44:	e00a      	b.n	800ca5c <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ca46:	0029      	movs	r1, r5
 800ca48:	0030      	movs	r0, r6
 800ca4a:	f005 faca 	bl	8011fe2 <strncmp>
 800ca4e:	1e05      	subs	r5, r0, #0
 800ca50:	d012      	beq.n	800ca78 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ca52:	6864      	ldr	r4, [r4, #4]
 800ca54:	465b      	mov	r3, fp
 800ca56:	601c      	str	r4, [r3, #0]
 800ca58:	2c00      	cmp	r4, #0
 800ca5a:	d015      	beq.n	800ca88 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ca5c:	6827      	ldr	r7, [r4, #0]
 800ca5e:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ca60:	0028      	movs	r0, r5
 800ca62:	f7f3 fb59 	bl	8000118 <strlen>
 800ca66:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ca68:	5c33      	ldrb	r3, [r6, r0]
 800ca6a:	4651      	mov	r1, sl
 800ca6c:	438b      	bics	r3, r1
 800ca6e:	b259      	sxtb	r1, r3
 800ca70:	4688      	mov	r8, r1
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1ed      	bne.n	800ca52 <FreeRTOS_CLIProcessCommand+0x5e>
 800ca76:	e7e6      	b.n	800ca46 <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ca78:	7b3f      	ldrb	r7, [r7, #12]
 800ca7a:	b27f      	sxtb	r7, r7
 800ca7c:	2f00      	cmp	r7, #0
 800ca7e:	da0a      	bge.n	800ca96 <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ca80:	4b1d      	ldr	r3, [pc, #116]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1c3      	bne.n	800ca10 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ca88:	9a01      	ldr	r2, [sp, #4]
 800ca8a:	491d      	ldr	r1, [pc, #116]	; (800cb00 <FreeRTOS_CLIProcessCommand+0x10c>)
 800ca8c:	4648      	mov	r0, r9
 800ca8e:	f005 fab9 	bl	8012004 <strncpy>
		xReturn = pdFALSE;
 800ca92:	2500      	movs	r5, #0
	return xReturn;
 800ca94:	e7c7      	b.n	800ca26 <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ca96:	2300      	movs	r3, #0
 800ca98:	56f3      	ldrsb	r3, [r6, r3]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d02a      	beq.n	800caf4 <FreeRTOS_CLIProcessCommand+0x100>
 800ca9e:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800caa0:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800caa2:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800caa4:	2001      	movs	r0, #1
 800caa6:	e00b      	b.n	800cac0 <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800caa8:	2a01      	cmp	r2, #1
 800caaa:	d004      	beq.n	800cab6 <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800caac:	4643      	mov	r3, r8
 800caae:	3301      	adds	r3, #1
 800cab0:	b25b      	sxtb	r3, r3
 800cab2:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800cab4:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800cab6:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800cab8:	2300      	movs	r3, #0
 800caba:	56e3      	ldrsb	r3, [r4, r3]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800cac0:	2b20      	cmp	r3, #32
 800cac2:	d0f1      	beq.n	800caa8 <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800cac4:	000a      	movs	r2, r1
 800cac6:	e7f6      	b.n	800cab6 <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800cac8:	2a01      	cmp	r2, #1
 800caca:	d00e      	beq.n	800caea <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0d9      	beq.n	800ca88 <FreeRTOS_CLIProcessCommand+0x94>
 800cad4:	4547      	cmp	r7, r8
 800cad6:	d09b      	beq.n	800ca10 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800cad8:	9a01      	ldr	r2, [sp, #4]
 800cada:	490a      	ldr	r1, [pc, #40]	; (800cb04 <FreeRTOS_CLIProcessCommand+0x110>)
 800cadc:	4648      	mov	r0, r9
 800cade:	f005 fa91 	bl	8012004 <strncpy>
		pxCommand = NULL;
 800cae2:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <FreeRTOS_CLIProcessCommand+0x104>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	e79d      	b.n	800ca26 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800caea:	4643      	mov	r3, r8
 800caec:	3b01      	subs	r3, #1
 800caee:	b25b      	sxtb	r3, r3
 800caf0:	4698      	mov	r8, r3
 800caf2:	e7eb      	b.n	800cacc <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800caf4:	4698      	mov	r8, r3
 800caf6:	e7e9      	b.n	800cacc <FreeRTOS_CLIProcessCommand+0xd8>
 800caf8:	2000198c 	.word	0x2000198c
 800cafc:	200000f0 	.word	0x200000f0
 800cb00:	0801a634 	.word	0x0801a634
 800cb04:	0801a5dc 	.word	0x0801a5dc

0800cb08 <FreeRTOS_CLIGetOutputBuffer>:
}
 800cb08:	4800      	ldr	r0, [pc, #0]	; (800cb0c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800cb0a:	4770      	bx	lr
 800cb0c:	20001724 	.word	0x20001724

0800cb10 <FreeRTOS_CLIGetParameter>:
{
 800cb10:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800cb16:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800cb18:	e00d      	b.n	800cb36 <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	56c3      	ldrsb	r3, [r0, r3]
 800cb1e:	2b20      	cmp	r3, #32
 800cb20:	d104      	bne.n	800cb2c <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800cb22:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800cb24:	2300      	movs	r3, #0
 800cb26:	56c3      	ldrsb	r3, [r0, r3]
 800cb28:	2b20      	cmp	r3, #32
 800cb2a:	d0fa      	beq.n	800cb22 <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d029      	beq.n	800cb84 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800cb30:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800cb32:	42a1      	cmp	r1, r4
 800cb34:	d00f      	beq.n	800cb56 <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800cb36:	428c      	cmp	r4, r1
 800cb38:	d026      	beq.n	800cb88 <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	56c3      	ldrsb	r3, [r0, r3]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d006      	beq.n	800cb50 <FreeRTOS_CLIGetParameter+0x40>
 800cb42:	2b20      	cmp	r3, #32
 800cb44:	d0e9      	beq.n	800cb1a <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800cb46:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cb48:	2300      	movs	r3, #0
 800cb4a:	56c3      	ldrsb	r3, [r0, r3]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1f8      	bne.n	800cb42 <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800cb50:	2300      	movs	r3, #0
 800cb52:	56c3      	ldrsb	r3, [r0, r3]
 800cb54:	e7ea      	b.n	800cb2c <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cb56:	2300      	movs	r3, #0
 800cb58:	56c3      	ldrsb	r3, [r0, r3]
 800cb5a:	0001      	movs	r1, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00f      	beq.n	800cb80 <FreeRTOS_CLIGetParameter+0x70>
 800cb60:	2b20      	cmp	r3, #32
 800cb62:	d007      	beq.n	800cb74 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800cb64:	6813      	ldr	r3, [r2, #0]
 800cb66:	3301      	adds	r3, #1
 800cb68:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800cb6a:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	56cb      	ldrsb	r3, [r1, r3]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1f5      	bne.n	800cb60 <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800cb74:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800cb76:	1e5a      	subs	r2, r3, #1
 800cb78:	4193      	sbcs	r3, r2
 800cb7a:	425b      	negs	r3, r3
 800cb7c:	4018      	ands	r0, r3
 800cb7e:	e004      	b.n	800cb8a <FreeRTOS_CLIGetParameter+0x7a>
 800cb80:	2000      	movs	r0, #0
 800cb82:	e002      	b.n	800cb8a <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800cb84:	2000      	movs	r0, #0
 800cb86:	e000      	b.n	800cb8a <FreeRTOS_CLIGetParameter+0x7a>
 800cb88:	2000      	movs	r0, #0
}
 800cb8a:	bd10      	pop	{r4, pc}

0800cb8c <prvHelpCommand>:
{
 800cb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb8e:	46c6      	mov	lr, r8
 800cb90:	b500      	push	{lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	0005      	movs	r5, r0
 800cb96:	000c      	movs	r4, r1
 800cb98:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800cb9e:	aa01      	add	r2, sp, #4
 800cba0:	2101      	movs	r1, #1
 800cba2:	f7ff ffb5 	bl	800cb10 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d02a      	beq.n	800cc00 <prvHelpCommand+0x74>
 800cbaa:	2206      	movs	r2, #6
 800cbac:	4932      	ldr	r1, [pc, #200]	; (800cc78 <prvHelpCommand+0xec>)
 800cbae:	f005 fa18 	bl	8011fe2 <strncmp>
 800cbb2:	1e06      	subs	r6, r0, #0
 800cbb4:	d14b      	bne.n	800cc4e <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800cbb6:	4b31      	ldr	r3, [pc, #196]	; (800cc7c <prvHelpCommand+0xf0>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b07      	cmp	r3, #7
 800cbbc:	d015      	beq.n	800cbea <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	b2d2      	uxtb	r2, r2
 800cbc2:	4690      	mov	r8, r2
 800cbc4:	4a2d      	ldr	r2, [pc, #180]	; (800cc7c <prvHelpCommand+0xf0>)
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	7011      	strb	r1, [r2, #0]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4a2c      	ldr	r2, [pc, #176]	; (800cc80 <prvHelpCommand+0xf4>)
 800cbce:	5899      	ldr	r1, [r3, r2]
 800cbd0:	0022      	movs	r2, r4
 800cbd2:	0028      	movs	r0, r5
 800cbd4:	f005 fa16 	bl	8012004 <strncpy>
			xReturn = pdTRUE;
 800cbd8:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800cbda:	4643      	mov	r3, r8
 800cbdc:	2b07      	cmp	r3, #7
 800cbde:	d136      	bne.n	800cc4e <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800cbe0:	4b26      	ldr	r3, [pc, #152]	; (800cc7c <prvHelpCommand+0xf0>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	0037      	movs	r7, r6
 800cbe8:	e031      	b.n	800cc4e <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800cbea:	4b24      	ldr	r3, [pc, #144]	; (800cc7c <prvHelpCommand+0xf0>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	4b23      	ldr	r3, [pc, #140]	; (800cc80 <prvHelpCommand+0xf4>)
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	0022      	movs	r2, r4
 800cbf6:	0028      	movs	r0, r5
 800cbf8:	f005 fa04 	bl	8012004 <strncpy>
			xReturn = pdTRUE;
 800cbfc:	2701      	movs	r7, #1
 800cbfe:	e026      	b.n	800cc4e <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800cc00:	4b20      	ldr	r3, [pc, #128]	; (800cc84 <prvHelpCommand+0xf8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d027      	beq.n	800cc58 <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800cc08:	4b1f      	ldr	r3, [pc, #124]	; (800cc88 <prvHelpCommand+0xfc>)
 800cc0a:	781e      	ldrb	r6, [r3, #0]
 800cc0c:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <prvHelpCommand+0x100>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	42b3      	cmp	r3, r6
 800cc12:	d228      	bcs.n	800cc66 <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800cc14:	0022      	movs	r2, r4
 800cc16:	3a08      	subs	r2, #8
 800cc18:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <prvHelpCommand+0xf8>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6859      	ldr	r1, [r3, #4]
 800cc20:	0028      	movs	r0, r5
 800cc22:	3008      	adds	r0, #8
 800cc24:	f005 f9ee 	bl	8012004 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800cc28:	1c68      	adds	r0, r5, #1
 800cc2a:	4919      	ldr	r1, [pc, #100]	; (800cc90 <prvHelpCommand+0x104>)
 800cc2c:	f005 f9d1 	bl	8011fd2 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800cc30:	2328      	movs	r3, #40	; 0x28
 800cc32:	702b      	strb	r3, [r5, #0]
 800cc34:	3301      	adds	r3, #1
 800cc36:	71ab      	strb	r3, [r5, #6]
 800cc38:	3b09      	subs	r3, #9
 800cc3a:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800cc3c:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <prvHelpCommand+0xf8>)
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	6857      	ldr	r7, [r2, #4]
 800cc42:	601f      	str	r7, [r3, #0]
		counter++;
 800cc44:	3601      	adds	r6, #1
 800cc46:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <prvHelpCommand+0xfc>)
 800cc48:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800cc4a:	1e7b      	subs	r3, r7, #1
 800cc4c:	419f      	sbcs	r7, r3
}
 800cc4e:	0038      	movs	r0, r7
 800cc50:	b002      	add	sp, #8
 800cc52:	bc80      	pop	{r7}
 800cc54:	46b8      	mov	r8, r7
 800cc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800cc58:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <prvHelpCommand+0xf8>)
 800cc5a:	4a0e      	ldr	r2, [pc, #56]	; (800cc94 <prvHelpCommand+0x108>)
 800cc5c:	601a      	str	r2, [r3, #0]
			counter = 1;
 800cc5e:	4b0a      	ldr	r3, [pc, #40]	; (800cc88 <prvHelpCommand+0xfc>)
 800cc60:	2201      	movs	r2, #1
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	e7d0      	b.n	800cc08 <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800cc66:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <prvHelpCommand+0xf8>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6859      	ldr	r1, [r3, #4]
 800cc6e:	0022      	movs	r2, r4
 800cc70:	0028      	movs	r0, r5
 800cc72:	f005 f9c7 	bl	8012004 <strncpy>
 800cc76:	e7e1      	b.n	800cc3c <prvHelpCommand+0xb0>
 800cc78:	08018df0 	.word	0x08018df0
 800cc7c:	20001994 	.word	0x20001994
 800cc80:	20000074 	.word	0x20000074
 800cc84:	20001990 	.word	0x20001990
 800cc88:	20001988 	.word	0x20001988
 800cc8c:	20006584 	.word	0x20006584
 800cc90:	080182fc 	.word	0x080182fc
 800cc94:	200000f0 	.word	0x200000f0

0800cc98 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc98:	0003      	movs	r3, r0
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc9e:	2201      	movs	r2, #1
 800cca0:	4252      	negs	r2, r2
 800cca2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccac:	4770      	bx	lr

0800ccae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccb2:	4770      	bx	lr

0800ccb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ccb4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ccb6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccb8:	689a      	ldr	r2, [r3, #8]
 800ccba:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccbc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccbe:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ccc0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ccc2:	6803      	ldr	r3, [r0, #0]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	6003      	str	r3, [r0, #0]
}
 800ccc8:	4770      	bx	lr

0800ccca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccca:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cccc:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccce:	0003      	movs	r3, r0
 800ccd0:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800ccd2:	1c62      	adds	r2, r4, #1
 800ccd4:	d00e      	beq.n	800ccf4 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd6:	001a      	movs	r2, r3
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	681d      	ldr	r5, [r3, #0]
 800ccdc:	42a5      	cmp	r5, r4
 800ccde:	d9fa      	bls.n	800ccd6 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cce0:	6853      	ldr	r3, [r2, #4]
 800cce2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cce4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cce6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800cce8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ccea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ccec:	6803      	ldr	r3, [r0, #0]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	6003      	str	r3, [r0, #0]
}
 800ccf2:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccf4:	6902      	ldr	r2, [r0, #16]
 800ccf6:	e7f3      	b.n	800cce0 <vListInsert+0x16>

0800ccf8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ccf8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ccfa:	6841      	ldr	r1, [r0, #4]
 800ccfc:	6882      	ldr	r2, [r0, #8]
 800ccfe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd00:	6841      	ldr	r1, [r0, #4]
 800cd02:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	4282      	cmp	r2, r0
 800cd08:	d005      	beq.n	800cd16 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	1e50      	subs	r0, r2, #1
 800cd12:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800cd14:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd16:	6882      	ldr	r2, [r0, #8]
 800cd18:	605a      	str	r2, [r3, #4]
 800cd1a:	e7f6      	b.n	800cd0a <uxListRemove+0x12>

0800cd1c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	0004      	movs	r4, r0
 800cd20:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd22:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cd24:	2a00      	cmp	r2, #0
 800cd26:	d10d      	bne.n	800cd44 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800cd28:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d003      	beq.n	800cd38 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800cd30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd32:	3301      	adds	r3, #1
 800cd34:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800cd36:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800cd38:	6860      	ldr	r0, [r4, #4]
 800cd3a:	f001 f8c7 	bl	800decc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	6063      	str	r3, [r4, #4]
 800cd42:	e7f5      	b.n	800cd30 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	d10e      	bne.n	800cd66 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800cd48:	6880      	ldr	r0, [r0, #8]
 800cd4a:	f004 ff09 	bl	8011b60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800cd4e:	68a3      	ldr	r3, [r4, #8]
 800cd50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cd52:	4694      	mov	ip, r2
 800cd54:	4463      	add	r3, ip
 800cd56:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800cd58:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d3e7      	bcc.n	800cd30 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	60a3      	str	r3, [r4, #8]
 800cd64:	e7e4      	b.n	800cd30 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd66:	68c0      	ldr	r0, [r0, #12]
 800cd68:	f004 fefa 	bl	8011b60 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800cd6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd6e:	425a      	negs	r2, r3
 800cd70:	68e1      	ldr	r1, [r4, #12]
 800cd72:	1acb      	subs	r3, r1, r3
 800cd74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd76:	6821      	ldr	r1, [r4, #0]
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	d203      	bcs.n	800cd84 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800cd7c:	6863      	ldr	r3, [r4, #4]
 800cd7e:	469c      	mov	ip, r3
 800cd80:	4462      	add	r2, ip
 800cd82:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800cd84:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800cd86:	2d02      	cmp	r5, #2
 800cd88:	d1d2      	bne.n	800cd30 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d0cf      	beq.n	800cd30 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800cd90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd92:	3b01      	subs	r3, #1
 800cd94:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd96:	e7cb      	b.n	800cd30 <prvCopyDataToQueue+0x14>

0800cd98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	0003      	movs	r3, r0
 800cd9c:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	d00a      	beq.n	800cdba <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cda4:	68d9      	ldr	r1, [r3, #12]
 800cda6:	1889      	adds	r1, r1, r2
 800cda8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cdaa:	685c      	ldr	r4, [r3, #4]
 800cdac:	42a1      	cmp	r1, r4
 800cdae:	d301      	bcc.n	800cdb4 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800cdb0:	6819      	ldr	r1, [r3, #0]
 800cdb2:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800cdb4:	68d9      	ldr	r1, [r3, #12]
 800cdb6:	f004 fed3 	bl	8011b60 <memcpy>
	}
}
 800cdba:	bd10      	pop	{r4, pc}

0800cdbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cdc0:	f001 fc84 	bl	800e6cc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800cdc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dd13      	ble.n	800cdf2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdca:	0025      	movs	r5, r4
 800cdcc:	3524      	adds	r5, #36	; 0x24
 800cdce:	e007      	b.n	800cde0 <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800cdd0:	f001 f828 	bl	800de24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800cdd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800cdda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dd08      	ble.n	800cdf2 <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d005      	beq.n	800cdf2 <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cde6:	0028      	movs	r0, r5
 800cde8:	f000 ff9a 	bl	800dd20 <xTaskRemoveFromEventList>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d0f1      	beq.n	800cdd4 <prvUnlockQueue+0x18>
 800cdf0:	e7ee      	b.n	800cdd0 <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	425b      	negs	r3, r3
 800cdf6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800cdf8:	f001 fc74 	bl	800e6e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cdfc:	f001 fc66 	bl	800e6cc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ce00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dd13      	ble.n	800ce2e <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce06:	0025      	movs	r5, r4
 800ce08:	3510      	adds	r5, #16
 800ce0a:	e007      	b.n	800ce1c <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800ce0c:	f001 f80a 	bl	800de24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800ce10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce12:	3b01      	subs	r3, #1
 800ce14:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ce16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	dd08      	ble.n	800ce2e <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce1c:	6923      	ldr	r3, [r4, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d005      	beq.n	800ce2e <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce22:	0028      	movs	r0, r5
 800ce24:	f000 ff7c 	bl	800dd20 <xTaskRemoveFromEventList>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d0f1      	beq.n	800ce10 <prvUnlockQueue+0x54>
 800ce2c:	e7ee      	b.n	800ce0c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	425b      	negs	r3, r3
 800ce32:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ce34:	f001 fc56 	bl	800e6e4 <vPortExitCritical>
}
 800ce38:	bd70      	pop	{r4, r5, r6, pc}

0800ce3a <xQueueGenericReset>:
{
 800ce3a:	b570      	push	{r4, r5, r6, lr}
 800ce3c:	0004      	movs	r4, r0
 800ce3e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d01a      	beq.n	800ce7a <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800ce44:	f001 fc42 	bl	800e6cc <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ce48:	6822      	ldr	r2, [r4, #0]
 800ce4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ce4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce4e:	434b      	muls	r3, r1
 800ce50:	18d0      	adds	r0, r2, r3
 800ce52:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce54:	2000      	movs	r0, #0
 800ce56:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce58:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ce5a:	1a5b      	subs	r3, r3, r1
 800ce5c:	18d3      	adds	r3, r2, r3
 800ce5e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ce60:	2301      	movs	r3, #1
 800ce62:	425b      	negs	r3, r3
 800ce64:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ce66:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ce68:	2d00      	cmp	r5, #0
 800ce6a:	d111      	bne.n	800ce90 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d105      	bne.n	800ce7e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800ce72:	f001 fc37 	bl	800e6e4 <vPortExitCritical>
}
 800ce76:	2001      	movs	r0, #1
 800ce78:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800ce7a:	b672      	cpsid	i
 800ce7c:	e7fe      	b.n	800ce7c <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ce7e:	0020      	movs	r0, r4
 800ce80:	3010      	adds	r0, #16
 800ce82:	f000 ff4d 	bl	800dd20 <xTaskRemoveFromEventList>
 800ce86:	2801      	cmp	r0, #1
 800ce88:	d1f3      	bne.n	800ce72 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800ce8a:	f001 fc13 	bl	800e6b4 <vPortYield>
 800ce8e:	e7f0      	b.n	800ce72 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce90:	0020      	movs	r0, r4
 800ce92:	3010      	adds	r0, #16
 800ce94:	f7ff ff00 	bl	800cc98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce98:	0020      	movs	r0, r4
 800ce9a:	3024      	adds	r0, #36	; 0x24
 800ce9c:	f7ff fefc 	bl	800cc98 <vListInitialise>
 800cea0:	e7e7      	b.n	800ce72 <xQueueGenericReset+0x38>

0800cea2 <xQueueGenericCreate>:
{
 800cea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea4:	0005      	movs	r5, r0
 800cea6:	000e      	movs	r6, r1
 800cea8:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d101      	bne.n	800ceb2 <xQueueGenericCreate+0x10>
 800ceae:	b672      	cpsid	i
 800ceb0:	e7fe      	b.n	800ceb0 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ceb2:	2900      	cmp	r1, #0
 800ceb4:	d013      	beq.n	800cede <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb6:	0008      	movs	r0, r1
 800ceb8:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ceba:	3055      	adds	r0, #85	; 0x55
 800cebc:	f001 fc88 	bl	800e7d0 <pvPortMalloc>
 800cec0:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800cec2:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800cec4:	2c00      	cmp	r4, #0
 800cec6:	d00f      	beq.n	800cee8 <xQueueGenericCreate+0x46>
 800cec8:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ceca:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800cecc:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cece:	2101      	movs	r1, #1
 800ced0:	0020      	movs	r0, r4
 800ced2:	f7ff ffb2 	bl	800ce3a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ced6:	2350      	movs	r3, #80	; 0x50
 800ced8:	54e7      	strb	r7, [r4, r3]
}
 800ceda:	0020      	movs	r0, r4
 800cedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800cede:	2054      	movs	r0, #84	; 0x54
 800cee0:	f001 fc76 	bl	800e7d0 <pvPortMalloc>
 800cee4:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800cee6:	d1ef      	bne.n	800cec8 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800cee8:	b672      	cpsid	i
 800ceea:	e7fe      	b.n	800ceea <xQueueGenericCreate+0x48>

0800ceec <xQueueCreateCountingSemaphore>:
	{
 800ceec:	b510      	push	{r4, lr}
 800ceee:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d101      	bne.n	800cef8 <xQueueCreateCountingSemaphore+0xc>
 800cef4:	b672      	cpsid	i
 800cef6:	e7fe      	b.n	800cef6 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cef8:	4288      	cmp	r0, r1
 800cefa:	d201      	bcs.n	800cf00 <xQueueCreateCountingSemaphore+0x14>
 800cefc:	b672      	cpsid	i
 800cefe:	e7fe      	b.n	800cefe <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cf00:	2202      	movs	r2, #2
 800cf02:	2100      	movs	r1, #0
 800cf04:	f7ff ffcd 	bl	800cea2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d001      	beq.n	800cf10 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cf0c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800cf0e:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800cf10:	b672      	cpsid	i
 800cf12:	e7fe      	b.n	800cf12 <xQueueCreateCountingSemaphore+0x26>

0800cf14 <xQueueGenericSend>:
{
 800cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf16:	46ce      	mov	lr, r9
 800cf18:	4647      	mov	r7, r8
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b085      	sub	sp, #20
 800cf1e:	0004      	movs	r4, r0
 800cf20:	000e      	movs	r6, r1
 800cf22:	9201      	str	r2, [sp, #4]
 800cf24:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d008      	beq.n	800cf3c <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	d008      	beq.n	800cf40 <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf2e:	2d02      	cmp	r5, #2
 800cf30:	d10b      	bne.n	800cf4a <xQueueGenericSend+0x36>
 800cf32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d008      	beq.n	800cf4a <xQueueGenericSend+0x36>
 800cf38:	b672      	cpsid	i
 800cf3a:	e7fe      	b.n	800cf3a <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800cf3c:	b672      	cpsid	i
 800cf3e:	e7fe      	b.n	800cf3e <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0f3      	beq.n	800cf2e <xQueueGenericSend+0x1a>
 800cf46:	b672      	cpsid	i
 800cf48:	e7fe      	b.n	800cf48 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf4a:	f000 ff71 	bl	800de30 <xTaskGetSchedulerState>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d104      	bne.n	800cf5c <xQueueGenericSend+0x48>
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d005      	beq.n	800cf64 <xQueueGenericSend+0x50>
 800cf58:	b672      	cpsid	i
 800cf5a:	e7fe      	b.n	800cf5a <xQueueGenericSend+0x46>
 800cf5c:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800cf5e:	2300      	movs	r3, #0
 800cf60:	4698      	mov	r8, r3
 800cf62:	e033      	b.n	800cfcc <xQueueGenericSend+0xb8>
 800cf64:	2700      	movs	r7, #0
 800cf66:	e7fa      	b.n	800cf5e <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf68:	002a      	movs	r2, r5
 800cf6a:	0031      	movs	r1, r6
 800cf6c:	0020      	movs	r0, r4
 800cf6e:	f7ff fed5 	bl	800cd1c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d109      	bne.n	800cf8c <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d110      	bne.n	800cf9e <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800cf7c:	f001 fbb2 	bl	800e6e4 <vPortExitCritical>
				return pdPASS;
 800cf80:	2001      	movs	r0, #1
}
 800cf82:	b005      	add	sp, #20
 800cf84:	bcc0      	pop	{r6, r7}
 800cf86:	46b9      	mov	r9, r7
 800cf88:	46b0      	mov	r8, r6
 800cf8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800cf8c:	0020      	movs	r0, r4
 800cf8e:	3024      	adds	r0, #36	; 0x24
 800cf90:	f000 fec6 	bl	800dd20 <xTaskRemoveFromEventList>
 800cf94:	2801      	cmp	r0, #1
 800cf96:	d1f1      	bne.n	800cf7c <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800cf98:	f001 fb8c 	bl	800e6b4 <vPortYield>
 800cf9c:	e7ee      	b.n	800cf7c <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800cf9e:	f001 fb89 	bl	800e6b4 <vPortYield>
 800cfa2:	e7eb      	b.n	800cf7c <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800cfa4:	f001 fb9e 	bl	800e6e4 <vPortExitCritical>
					return errQUEUE_FULL;
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e7ea      	b.n	800cf82 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800cfac:	a802      	add	r0, sp, #8
 800cfae:	f000 fef7 	bl	800dda0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfb2:	e018      	b.n	800cfe6 <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800cfb4:	4643      	mov	r3, r8
 800cfb6:	6463      	str	r3, [r4, #68]	; 0x44
 800cfb8:	e01e      	b.n	800cff8 <xQueueGenericSend+0xe4>
 800cfba:	4643      	mov	r3, r8
 800cfbc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cfbe:	e01e      	b.n	800cffe <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800cfc0:	0020      	movs	r0, r4
 800cfc2:	f7ff fefb 	bl	800cdbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfc6:	f000 fccb 	bl	800d960 <xTaskResumeAll>
 800cfca:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800cfcc:	f001 fb7e 	bl	800e6cc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cfd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d3c7      	bcc.n	800cf68 <xQueueGenericSend+0x54>
 800cfd8:	2d02      	cmp	r5, #2
 800cfda:	d0c5      	beq.n	800cf68 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfdc:	9b01      	ldr	r3, [sp, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d0e0      	beq.n	800cfa4 <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800cfe2:	2f00      	cmp	r7, #0
 800cfe4:	d0e2      	beq.n	800cfac <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800cfe6:	f001 fb7d 	bl	800e6e4 <vPortExitCritical>
		vTaskSuspendAll();
 800cfea:	f000 fc11 	bl	800d810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfee:	f001 fb6d 	bl	800e6cc <vPortEnterCritical>
 800cff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cff4:	3301      	adds	r3, #1
 800cff6:	d0dd      	beq.n	800cfb4 <xQueueGenericSend+0xa0>
 800cff8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cffa:	3301      	adds	r3, #1
 800cffc:	d0dd      	beq.n	800cfba <xQueueGenericSend+0xa6>
 800cffe:	f001 fb71 	bl	800e6e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d002:	a901      	add	r1, sp, #4
 800d004:	a802      	add	r0, sp, #8
 800d006:	f000 fedb 	bl	800ddc0 <xTaskCheckForTimeOut>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d117      	bne.n	800d03e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d00e:	f001 fb5d 	bl	800e6cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d012:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d014:	4699      	mov	r9, r3
 800d016:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d018:	f001 fb64 	bl	800e6e4 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d01c:	45b9      	cmp	r9, r7
 800d01e:	d1cf      	bne.n	800cfc0 <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d020:	0020      	movs	r0, r4
 800d022:	3010      	adds	r0, #16
 800d024:	9901      	ldr	r1, [sp, #4]
 800d026:	f000 fe3d 	bl	800dca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d02a:	0020      	movs	r0, r4
 800d02c:	f7ff fec6 	bl	800cdbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d030:	f000 fc96 	bl	800d960 <xTaskResumeAll>
 800d034:	2800      	cmp	r0, #0
 800d036:	d1c8      	bne.n	800cfca <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800d038:	f001 fb3c 	bl	800e6b4 <vPortYield>
 800d03c:	e7c5      	b.n	800cfca <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800d03e:	0020      	movs	r0, r4
 800d040:	f7ff febc 	bl	800cdbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d044:	f000 fc8c 	bl	800d960 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d048:	2000      	movs	r0, #0
 800d04a:	e79a      	b.n	800cf82 <xQueueGenericSend+0x6e>

0800d04c <xQueueGenericSendFromISR>:
{
 800d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04e:	b083      	sub	sp, #12
 800d050:	0004      	movs	r4, r0
 800d052:	000d      	movs	r5, r1
 800d054:	0017      	movs	r7, r2
 800d056:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800d058:	2800      	cmp	r0, #0
 800d05a:	d008      	beq.n	800d06e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d05c:	2900      	cmp	r1, #0
 800d05e:	d008      	beq.n	800d072 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d060:	2e02      	cmp	r6, #2
 800d062:	d12d      	bne.n	800d0c0 <xQueueGenericSendFromISR+0x74>
 800d064:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d066:	2b01      	cmp	r3, #1
 800d068:	d019      	beq.n	800d09e <xQueueGenericSendFromISR+0x52>
 800d06a:	b672      	cpsid	i
 800d06c:	e7fe      	b.n	800d06c <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800d06e:	b672      	cpsid	i
 800d070:	e7fe      	b.n	800d070 <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d072:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0f3      	beq.n	800d060 <xQueueGenericSendFromISR+0x14>
 800d078:	b672      	cpsid	i
 800d07a:	e7fe      	b.n	800d07a <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800d07c:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	d025      	beq.n	800d0d0 <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d084:	0020      	movs	r0, r4
 800d086:	3024      	adds	r0, #36	; 0x24
 800d088:	f000 fe4a 	bl	800dd20 <xTaskRemoveFromEventList>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d01f      	beq.n	800d0d0 <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800d090:	2f00      	cmp	r7, #0
 800d092:	d002      	beq.n	800d09a <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d094:	2301      	movs	r3, #1
 800d096:	603b      	str	r3, [r7, #0]
 800d098:	e01a      	b.n	800d0d0 <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800d09a:	2501      	movs	r5, #1
 800d09c:	e018      	b.n	800d0d0 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d09e:	f001 fb31 	bl	800e704 <ulSetInterruptMaskFromISR>
 800d0a2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0a6:	0032      	movs	r2, r6
 800d0a8:	0029      	movs	r1, r5
 800d0aa:	0020      	movs	r0, r4
 800d0ac:	f7ff fe36 	bl	800cd1c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d0b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	d0e2      	beq.n	800d07c <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800d0b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d0bc:	2501      	movs	r5, #1
 800d0be:	e007      	b.n	800d0d0 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0c0:	f001 fb20 	bl	800e704 <ulSetInterruptMaskFromISR>
 800d0c4:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d0c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d3eb      	bcc.n	800d0a6 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800d0ce:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d0d0:	9801      	ldr	r0, [sp, #4]
 800d0d2:	f001 fb1c 	bl	800e70e <vClearInterruptMaskFromISR>
}
 800d0d6:	0028      	movs	r0, r5
 800d0d8:	b003      	add	sp, #12
 800d0da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0dc <xQueueGiveFromISR>:
{
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	0004      	movs	r4, r0
 800d0e0:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d004      	beq.n	800d0f0 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <xQueueGiveFromISR+0x18>
 800d0ec:	b672      	cpsid	i
 800d0ee:	e7fe      	b.n	800d0ee <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800d0f0:	b672      	cpsid	i
 800d0f2:	e7fe      	b.n	800d0f2 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d0f4:	6803      	ldr	r3, [r0, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d016      	beq.n	800d128 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0fa:	f001 fb03 	bl	800e704 <ulSetInterruptMaskFromISR>
 800d0fe:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800d102:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d104:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d106:	4293      	cmp	r3, r2
 800d108:	d209      	bcs.n	800d11e <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800d10a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d10c:	3301      	adds	r3, #1
 800d10e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d110:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d112:	3301      	adds	r3, #1
 800d114:	d00d      	beq.n	800d132 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800d116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d118:	3301      	adds	r3, #1
 800d11a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d11c:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d11e:	0038      	movs	r0, r7
 800d120:	f001 faf5 	bl	800e70e <vClearInterruptMaskFromISR>
}
 800d124:	0028      	movs	r0, r5
 800d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d128:	6843      	ldr	r3, [r0, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0e5      	beq.n	800d0fa <xQueueGiveFromISR+0x1e>
 800d12e:	b672      	cpsid	i
 800d130:	e7fe      	b.n	800d130 <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800d132:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f1      	beq.n	800d11e <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d13a:	0020      	movs	r0, r4
 800d13c:	3024      	adds	r0, #36	; 0x24
 800d13e:	f000 fdef 	bl	800dd20 <xTaskRemoveFromEventList>
 800d142:	2800      	cmp	r0, #0
 800d144:	d0eb      	beq.n	800d11e <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800d146:	2e00      	cmp	r6, #0
 800d148:	d002      	beq.n	800d150 <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d14a:	2301      	movs	r3, #1
 800d14c:	6033      	str	r3, [r6, #0]
 800d14e:	e7e6      	b.n	800d11e <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800d150:	2501      	movs	r5, #1
 800d152:	e7e4      	b.n	800d11e <xQueueGiveFromISR+0x42>

0800d154 <xQueueGenericReceive>:
{
 800d154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d156:	46c6      	mov	lr, r8
 800d158:	b500      	push	{lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	0004      	movs	r4, r0
 800d15e:	000d      	movs	r5, r1
 800d160:	9201      	str	r2, [sp, #4]
 800d162:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800d164:	2800      	cmp	r0, #0
 800d166:	d00a      	beq.n	800d17e <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d168:	2900      	cmp	r1, #0
 800d16a:	d00a      	beq.n	800d182 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d16c:	f000 fe60 	bl	800de30 <xTaskGetSchedulerState>
 800d170:	2800      	cmp	r0, #0
 800d172:	d10b      	bne.n	800d18c <xQueueGenericReceive+0x38>
 800d174:	9b01      	ldr	r3, [sp, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00b      	beq.n	800d192 <xQueueGenericReceive+0x3e>
 800d17a:	b672      	cpsid	i
 800d17c:	e7fe      	b.n	800d17c <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800d17e:	b672      	cpsid	i
 800d180:	e7fe      	b.n	800d180 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d182:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0f1      	beq.n	800d16c <xQueueGenericReceive+0x18>
 800d188:	b672      	cpsid	i
 800d18a:	e7fe      	b.n	800d18a <xQueueGenericReceive+0x36>
 800d18c:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800d18e:	2600      	movs	r6, #0
 800d190:	e04d      	b.n	800d22e <xQueueGenericReceive+0xda>
 800d192:	2700      	movs	r7, #0
 800d194:	e7fb      	b.n	800d18e <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d196:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d198:	0029      	movs	r1, r5
 800d19a:	0020      	movs	r0, r4
 800d19c:	f7ff fdfc 	bl	800cd98 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d1a0:	4643      	mov	r3, r8
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d11c      	bne.n	800d1e0 <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800d1a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d009      	beq.n	800d1c6 <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1b2:	6923      	ldr	r3, [r4, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800d1b8:	f001 fa94 	bl	800e6e4 <vPortExitCritical>
				return pdPASS;
 800d1bc:	2001      	movs	r0, #1
}
 800d1be:	b004      	add	sp, #16
 800d1c0:	bc80      	pop	{r7}
 800d1c2:	46b8      	mov	r8, r7
 800d1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d1c6:	f000 ff8b 	bl	800e0e0 <pvTaskIncrementMutexHeldCount>
 800d1ca:	6060      	str	r0, [r4, #4]
 800d1cc:	e7f1      	b.n	800d1b2 <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d1ce:	0020      	movs	r0, r4
 800d1d0:	3010      	adds	r0, #16
 800d1d2:	f000 fda5 	bl	800dd20 <xTaskRemoveFromEventList>
 800d1d6:	2801      	cmp	r0, #1
 800d1d8:	d1ee      	bne.n	800d1b8 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800d1da:	f001 fa6b 	bl	800e6b4 <vPortYield>
 800d1de:	e7eb      	b.n	800d1b8 <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d1e0:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d0e7      	beq.n	800d1b8 <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1e8:	0020      	movs	r0, r4
 800d1ea:	3024      	adds	r0, #36	; 0x24
 800d1ec:	f000 fd98 	bl	800dd20 <xTaskRemoveFromEventList>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d0e1      	beq.n	800d1b8 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800d1f4:	f001 fa5e 	bl	800e6b4 <vPortYield>
 800d1f8:	e7de      	b.n	800d1b8 <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800d1fa:	f001 fa73 	bl	800e6e4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d1fe:	2000      	movs	r0, #0
 800d200:	e7dd      	b.n	800d1be <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800d202:	a802      	add	r0, sp, #8
 800d204:	f000 fdcc 	bl	800dda0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d208:	e01b      	b.n	800d242 <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800d20a:	6466      	str	r6, [r4, #68]	; 0x44
 800d20c:	e022      	b.n	800d254 <xQueueGenericReceive+0x100>
 800d20e:	64a6      	str	r6, [r4, #72]	; 0x48
 800d210:	e023      	b.n	800d25a <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800d212:	f001 fa5b 	bl	800e6cc <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d216:	6860      	ldr	r0, [r4, #4]
 800d218:	f000 fe1a 	bl	800de50 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d21c:	f001 fa62 	bl	800e6e4 <vPortExitCritical>
 800d220:	e02d      	b.n	800d27e <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800d222:	0020      	movs	r0, r4
 800d224:	f7ff fdca 	bl	800cdbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d228:	f000 fb9a 	bl	800d960 <xTaskResumeAll>
 800d22c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800d22e:	f001 fa4d 	bl	800e6cc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1ae      	bne.n	800d196 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d238:	9b01      	ldr	r3, [sp, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d0dd      	beq.n	800d1fa <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800d23e:	2f00      	cmp	r7, #0
 800d240:	d0df      	beq.n	800d202 <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800d242:	f001 fa4f 	bl	800e6e4 <vPortExitCritical>
		vTaskSuspendAll();
 800d246:	f000 fae3 	bl	800d810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d24a:	f001 fa3f 	bl	800e6cc <vPortEnterCritical>
 800d24e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d250:	3301      	adds	r3, #1
 800d252:	d0da      	beq.n	800d20a <xQueueGenericReceive+0xb6>
 800d254:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d256:	3301      	adds	r3, #1
 800d258:	d0d9      	beq.n	800d20e <xQueueGenericReceive+0xba>
 800d25a:	f001 fa43 	bl	800e6e4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d25e:	a901      	add	r1, sp, #4
 800d260:	a802      	add	r0, sp, #8
 800d262:	f000 fdad 	bl	800ddc0 <xTaskCheckForTimeOut>
 800d266:	2800      	cmp	r0, #0
 800d268:	d118      	bne.n	800d29c <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800d26a:	f001 fa2f 	bl	800e6cc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d26e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800d270:	f001 fa38 	bl	800e6e4 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d274:	2f00      	cmp	r7, #0
 800d276:	d1d4      	bne.n	800d222 <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d0c9      	beq.n	800d212 <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d27e:	0020      	movs	r0, r4
 800d280:	3024      	adds	r0, #36	; 0x24
 800d282:	9901      	ldr	r1, [sp, #4]
 800d284:	f000 fd0e 	bl	800dca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d288:	0020      	movs	r0, r4
 800d28a:	f7ff fd97 	bl	800cdbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d28e:	f000 fb67 	bl	800d960 <xTaskResumeAll>
 800d292:	2800      	cmp	r0, #0
 800d294:	d1ca      	bne.n	800d22c <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800d296:	f001 fa0d 	bl	800e6b4 <vPortYield>
 800d29a:	e7c7      	b.n	800d22c <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800d29c:	0020      	movs	r0, r4
 800d29e:	f7ff fd8d 	bl	800cdbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2a2:	f000 fb5d 	bl	800d960 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	e789      	b.n	800d1be <xQueueGenericReceive+0x6a>

0800d2aa <xQueueReceiveFromISR>:
{
 800d2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ac:	46c6      	mov	lr, r8
 800d2ae:	b500      	push	{lr}
 800d2b0:	0004      	movs	r4, r0
 800d2b2:	000f      	movs	r7, r1
 800d2b4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d00f      	beq.n	800d2da <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ba:	2900      	cmp	r1, #0
 800d2bc:	d00f      	beq.n	800d2de <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2be:	f001 fa21 	bl	800e704 <ulSetInterruptMaskFromISR>
 800d2c2:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800d2c6:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10d      	bne.n	800d2e8 <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	f001 fa1e 	bl	800e70e <vClearInterruptMaskFromISR>
}
 800d2d2:	0028      	movs	r0, r5
 800d2d4:	bc80      	pop	{r7}
 800d2d6:	46b8      	mov	r8, r7
 800d2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800d2da:	b672      	cpsid	i
 800d2dc:	e7fe      	b.n	800d2dc <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d0ec      	beq.n	800d2be <xQueueReceiveFromISR+0x14>
 800d2e4:	b672      	cpsid	i
 800d2e6:	e7fe      	b.n	800d2e6 <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2e8:	0039      	movs	r1, r7
 800d2ea:	0020      	movs	r0, r4
 800d2ec:	f7ff fd54 	bl	800cd98 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d2f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d2f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	d004      	beq.n	800d306 <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800d2fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d2fe:	3301      	adds	r3, #1
 800d300:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d302:	2501      	movs	r5, #1
 800d304:	e7e2      	b.n	800d2cc <xQueueReceiveFromISR+0x22>
 800d306:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d308:	6923      	ldr	r3, [r4, #16]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0de      	beq.n	800d2cc <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d30e:	0020      	movs	r0, r4
 800d310:	3010      	adds	r0, #16
 800d312:	f000 fd05 	bl	800dd20 <xTaskRemoveFromEventList>
 800d316:	2800      	cmp	r0, #0
 800d318:	d0d8      	beq.n	800d2cc <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800d31a:	2e00      	cmp	r6, #0
 800d31c:	d002      	beq.n	800d324 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d31e:	2301      	movs	r3, #1
 800d320:	6033      	str	r3, [r6, #0]
 800d322:	e7d3      	b.n	800d2cc <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800d324:	2501      	movs	r5, #1
 800d326:	e7d1      	b.n	800d2cc <xQueueReceiveFromISR+0x22>

0800d328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d328:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d32a:	4a08      	ldr	r2, [pc, #32]	; (800d34c <vQueueAddToRegistry+0x24>)
 800d32c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d32e:	6814      	ldr	r4, [r2, #0]
 800d330:	2c00      	cmp	r4, #0
 800d332:	d004      	beq.n	800d33e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d334:	3301      	adds	r3, #1
 800d336:	3208      	adds	r2, #8
 800d338:	2b08      	cmp	r3, #8
 800d33a:	d1f8      	bne.n	800d32e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d33c:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d33e:	4a03      	ldr	r2, [pc, #12]	; (800d34c <vQueueAddToRegistry+0x24>)
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d344:	18d3      	adds	r3, r2, r3
 800d346:	6058      	str	r0, [r3, #4]
				break;
 800d348:	e7f8      	b.n	800d33c <vQueueAddToRegistry+0x14>
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	20006a1c 	.word	0x20006a1c

0800d350 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	0004      	movs	r4, r0
 800d354:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d356:	f001 f9b9 	bl	800e6cc <vPortEnterCritical>
 800d35a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d35c:	3301      	adds	r3, #1
 800d35e:	d00b      	beq.n	800d378 <vQueueWaitForMessageRestricted+0x28>
 800d360:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d362:	3301      	adds	r3, #1
 800d364:	d00b      	beq.n	800d37e <vQueueWaitForMessageRestricted+0x2e>
 800d366:	f001 f9bd 	bl	800e6e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d36a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d009      	beq.n	800d384 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d370:	0020      	movs	r0, r4
 800d372:	f7ff fd23 	bl	800cdbc <prvUnlockQueue>
	}
 800d376:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d378:	2300      	movs	r3, #0
 800d37a:	6463      	str	r3, [r4, #68]	; 0x44
 800d37c:	e7f0      	b.n	800d360 <vQueueWaitForMessageRestricted+0x10>
 800d37e:	2300      	movs	r3, #0
 800d380:	64a3      	str	r3, [r4, #72]	; 0x48
 800d382:	e7f0      	b.n	800d366 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d384:	0020      	movs	r0, r4
 800d386:	3024      	adds	r0, #36	; 0x24
 800d388:	0029      	movs	r1, r5
 800d38a:	f000 fcaf 	bl	800dcec <vTaskPlaceOnEventListRestricted>
 800d38e:	e7ef      	b.n	800d370 <vQueueWaitForMessageRestricted+0x20>

0800d390 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800d390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d392:	46de      	mov	lr, fp
 800d394:	4657      	mov	r7, sl
 800d396:	464e      	mov	r6, r9
 800d398:	4645      	mov	r5, r8
 800d39a:	b5e0      	push	{r5, r6, r7, lr}
 800d39c:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d39e:	680b      	ldr	r3, [r1, #0]
 800d3a0:	469b      	mov	fp, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d045      	beq.n	800d432 <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d3a6:	684b      	ldr	r3, [r1, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	604b      	str	r3, [r1, #4]
 800d3ac:	2008      	movs	r0, #8
 800d3ae:	4684      	mov	ip, r0
 800d3b0:	448c      	add	ip, r1
 800d3b2:	4563      	cmp	r3, ip
 800d3b4:	d007      	beq.n	800d3c6 <prvListTaskWithinSingleList+0x36>
 800d3b6:	684b      	ldr	r3, [r1, #4]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	4699      	mov	r9, r3
 800d3c4:	e01c      	b.n	800d400 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d3c6:	68cb      	ldr	r3, [r1, #12]
 800d3c8:	604b      	str	r3, [r1, #4]
 800d3ca:	e7f4      	b.n	800d3b6 <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	604b      	str	r3, [r1, #4]
 800d3d0:	e01b      	b.n	800d40a <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d3d2:	4648      	mov	r0, r9
 800d3d4:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d3d6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800d3d8:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d3da:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800d3dc:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d3de:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d3e0:	783d      	ldrb	r5, [r7, #0]
 800d3e2:	2da5      	cmp	r5, #165	; 0xa5
 800d3e4:	d123      	bne.n	800d42e <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800d3e6:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800d3e8:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d3ea:	5d78      	ldrb	r0, [r7, r5]
 800d3ec:	28a5      	cmp	r0, #165	; 0xa5
 800d3ee:	d0fb      	beq.n	800d3e8 <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d3f0:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800d3f2:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	4682      	mov	sl, r0
 800d3f8:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800d3fa:	3420      	adds	r4, #32
 800d3fc:	4598      	cmp	r8, r3
 800d3fe:	d018      	beq.n	800d432 <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d400:	684b      	ldr	r3, [r1, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	604b      	str	r3, [r1, #4]
 800d406:	459c      	cmp	ip, r3
 800d408:	d0e0      	beq.n	800d3cc <prvListTaskWithinSingleList+0x3c>
 800d40a:	684b      	ldr	r3, [r1, #4]
 800d40c:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800d40e:	0026      	movs	r6, r4
 800d410:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800d412:	001d      	movs	r5, r3
 800d414:	3534      	adds	r5, #52	; 0x34
 800d416:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d418:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800d41a:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800d41c:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800d41e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800d420:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800d422:	2a03      	cmp	r2, #3
 800d424:	d1d7      	bne.n	800d3d6 <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800d426:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d428:	2d00      	cmp	r5, #0
 800d42a:	d1d2      	bne.n	800d3d2 <prvListTaskWithinSingleList+0x42>
 800d42c:	e7d3      	b.n	800d3d6 <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800d42e:	2500      	movs	r5, #0
 800d430:	e7de      	b.n	800d3f0 <prvListTaskWithinSingleList+0x60>
	}
 800d432:	4658      	mov	r0, fp
 800d434:	bcf0      	pop	{r4, r5, r6, r7}
 800d436:	46bb      	mov	fp, r7
 800d438:	46b2      	mov	sl, r6
 800d43a:	46a9      	mov	r9, r5
 800d43c:	46a0      	mov	r8, r4
 800d43e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d440 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d440:	4b08      	ldr	r3, [pc, #32]	; (800d464 <prvResetNextTaskUnblockTime+0x24>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d104      	bne.n	800d454 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <prvResetNextTaskUnblockTime+0x28>)
 800d44c:	2201      	movs	r2, #1
 800d44e:	4252      	negs	r2, r2
 800d450:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800d452:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d454:	4b03      	ldr	r3, [pc, #12]	; (800d464 <prvResetNextTaskUnblockTime+0x24>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	4b02      	ldr	r3, [pc, #8]	; (800d468 <prvResetNextTaskUnblockTime+0x28>)
 800d460:	601a      	str	r2, [r3, #0]
}
 800d462:	e7f6      	b.n	800d452 <prvResetNextTaskUnblockTime+0x12>
 800d464:	2000199c 	.word	0x2000199c
 800d468:	200000f8 	.word	0x200000f8

0800d46c <prvAddCurrentTaskToDelayedList>:
{
 800d46c:	b510      	push	{r4, lr}
 800d46e:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d470:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <prvAddCurrentTaskToDelayedList+0x40>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800d476:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <prvAddCurrentTaskToDelayedList+0x44>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4283      	cmp	r3, r0
 800d47c:	d907      	bls.n	800d48e <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d47e:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <prvAddCurrentTaskToDelayedList+0x48>)
 800d480:	6818      	ldr	r0, [r3, #0]
 800d482:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <prvAddCurrentTaskToDelayedList+0x40>)
 800d484:	6819      	ldr	r1, [r3, #0]
 800d486:	3104      	adds	r1, #4
 800d488:	f7ff fc1f 	bl	800ccca <vListInsert>
}
 800d48c:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d48e:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <prvAddCurrentTaskToDelayedList+0x4c>)
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	4b06      	ldr	r3, [pc, #24]	; (800d4ac <prvAddCurrentTaskToDelayedList+0x40>)
 800d494:	6819      	ldr	r1, [r3, #0]
 800d496:	3104      	adds	r1, #4
 800d498:	f7ff fc17 	bl	800ccca <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800d49c:	4b07      	ldr	r3, [pc, #28]	; (800d4bc <prvAddCurrentTaskToDelayedList+0x50>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d9f3      	bls.n	800d48c <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800d4a4:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <prvAddCurrentTaskToDelayedList+0x50>)
 800d4a6:	601c      	str	r4, [r3, #0]
}
 800d4a8:	e7f0      	b.n	800d48c <prvAddCurrentTaskToDelayedList+0x20>
 800d4aa:	46c0      	nop			; (mov r8, r8)
 800d4ac:	20001998 	.word	0x20001998
 800d4b0:	20001ab8 	.word	0x20001ab8
 800d4b4:	200019a0 	.word	0x200019a0
 800d4b8:	2000199c 	.word	0x2000199c
 800d4bc:	200000f8 	.word	0x200000f8

0800d4c0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d4c4:	f004 fd85 	bl	8011fd2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	f7f2 fe25 	bl	8000118 <strlen>
 800d4ce:	280b      	cmp	r0, #11
 800d4d0:	dc08      	bgt.n	800d4e4 <prvWriteNameToBuffer+0x24>
 800d4d2:	1823      	adds	r3, r4, r0
 800d4d4:	0021      	movs	r1, r4
 800d4d6:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800d4d8:	2220      	movs	r2, #32
 800d4da:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d4dc:	3301      	adds	r3, #1
 800d4de:	428b      	cmp	r3, r1
 800d4e0:	d1fb      	bne.n	800d4da <prvWriteNameToBuffer+0x1a>
 800d4e2:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800d4e4:	1820      	adds	r0, r4, r0
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <xTaskGenericCreate>:
{
 800d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ee:	46de      	mov	lr, fp
 800d4f0:	4657      	mov	r7, sl
 800d4f2:	464e      	mov	r6, r9
 800d4f4:	4645      	mov	r5, r8
 800d4f6:	b5e0      	push	{r5, r6, r7, lr}
 800d4f8:	b083      	sub	sp, #12
 800d4fa:	9001      	str	r0, [sp, #4]
 800d4fc:	4688      	mov	r8, r1
 800d4fe:	0017      	movs	r7, r2
 800d500:	469a      	mov	sl, r3
 800d502:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d504:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800d506:	2800      	cmp	r0, #0
 800d508:	d003      	beq.n	800d512 <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800d50a:	2e06      	cmp	r6, #6
 800d50c:	d903      	bls.n	800d516 <xTaskGenericCreate+0x2a>
 800d50e:	b672      	cpsid	i
 800d510:	e7fe      	b.n	800d510 <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800d512:	b672      	cpsid	i
 800d514:	e7fe      	b.n	800d514 <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d516:	2d00      	cmp	r5, #0
 800d518:	d05b      	beq.n	800d5d2 <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800d51a:	2060      	movs	r0, #96	; 0x60
 800d51c:	f001 f958 	bl	800e7d0 <pvPortMalloc>
 800d520:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800d522:	d064      	beq.n	800d5ee <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800d524:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800d526:	00ba      	lsls	r2, r7, #2
 800d528:	21a5      	movs	r1, #165	; 0xa5
 800d52a:	0028      	movs	r0, r5
 800d52c:	f004 fb21 	bl	8011b72 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800d530:	4b5e      	ldr	r3, [pc, #376]	; (800d6ac <xTaskGenericCreate+0x1c0>)
 800d532:	18fd      	adds	r5, r7, r3
 800d534:	00ad      	lsls	r5, r5, #2
 800d536:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d538:	469c      	mov	ip, r3
 800d53a:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d53c:	2307      	movs	r3, #7
 800d53e:	439d      	bics	r5, r3
 800d540:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d542:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800d544:	0021      	movs	r1, r4
 800d546:	3134      	adds	r1, #52	; 0x34
 800d548:	4642      	mov	r2, r8
 800d54a:	5cd2      	ldrb	r2, [r2, r3]
 800d54c:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800d54e:	2a00      	cmp	r2, #0
 800d550:	d002      	beq.n	800d558 <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d552:	3301      	adds	r3, #1
 800d554:	2b0d      	cmp	r3, #13
 800d556:	d1f7      	bne.n	800d548 <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	2200      	movs	r2, #0
 800d55c:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d55e:	0035      	movs	r5, r6
 800d560:	2e06      	cmp	r6, #6
 800d562:	d900      	bls.n	800d566 <xTaskGenericCreate+0x7a>
 800d564:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800d566:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800d568:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800d56a:	2700      	movs	r7, #0
 800d56c:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800d56e:	1d23      	adds	r3, r4, #4
 800d570:	469b      	mov	fp, r3
 800d572:	0018      	movs	r0, r3
 800d574:	f7ff fb9b 	bl	800ccae <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800d578:	0020      	movs	r0, r4
 800d57a:	3018      	adds	r0, #24
 800d57c:	f7ff fb97 	bl	800ccae <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800d580:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d582:	2307      	movs	r3, #7
 800d584:	1b5b      	subs	r3, r3, r5
 800d586:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800d588:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800d58a:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800d58c:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800d58e:	235c      	movs	r3, #92	; 0x5c
 800d590:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d592:	4652      	mov	r2, sl
 800d594:	9901      	ldr	r1, [sp, #4]
 800d596:	4648      	mov	r0, r9
 800d598:	f001 f850 	bl	800e63c <pxPortInitialiseStack>
 800d59c:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800d59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d000      	beq.n	800d5a6 <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5a4:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800d5a6:	f001 f891 	bl	800e6cc <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800d5aa:	4a41      	ldr	r2, [pc, #260]	; (800d6b0 <xTaskGenericCreate+0x1c4>)
 800d5ac:	6813      	ldr	r3, [r2, #0]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800d5b2:	4b40      	ldr	r3, [pc, #256]	; (800d6b4 <xTaskGenericCreate+0x1c8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d01d      	beq.n	800d5f6 <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800d5ba:	4b3f      	ldr	r3, [pc, #252]	; (800d6b8 <xTaskGenericCreate+0x1cc>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d11e      	bne.n	800d600 <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800d5c2:	4b3c      	ldr	r3, [pc, #240]	; (800d6b4 <xTaskGenericCreate+0x1c8>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c8:	42b3      	cmp	r3, r6
 800d5ca:	d819      	bhi.n	800d600 <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800d5cc:	4b39      	ldr	r3, [pc, #228]	; (800d6b4 <xTaskGenericCreate+0x1c8>)
 800d5ce:	601c      	str	r4, [r3, #0]
 800d5d0:	e016      	b.n	800d600 <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d2:	0090      	lsls	r0, r2, #2
 800d5d4:	f001 f8fc 	bl	800e7d0 <pvPortMalloc>
 800d5d8:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800d5da:	d19e      	bne.n	800d51a <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5dc:	2001      	movs	r0, #1
 800d5de:	4240      	negs	r0, r0
}
 800d5e0:	b003      	add	sp, #12
 800d5e2:	bcf0      	pop	{r4, r5, r6, r7}
 800d5e4:	46bb      	mov	fp, r7
 800d5e6:	46b2      	mov	sl, r6
 800d5e8:	46a9      	mov	r9, r5
 800d5ea:	46a0      	mov	r8, r4
 800d5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800d5ee:	0028      	movs	r0, r5
 800d5f0:	f001 f980 	bl	800e8f4 <vPortFree>
	if( pxNewTCB != NULL )
 800d5f4:	e7f2      	b.n	800d5dc <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800d5f6:	4b2f      	ldr	r3, [pc, #188]	; (800d6b4 <xTaskGenericCreate+0x1c8>)
 800d5f8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5fa:	6813      	ldr	r3, [r2, #0]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d023      	beq.n	800d648 <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800d600:	4a2e      	ldr	r2, [pc, #184]	; (800d6bc <xTaskGenericCreate+0x1d0>)
 800d602:	6813      	ldr	r3, [r2, #0]
 800d604:	3301      	adds	r3, #1
 800d606:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d608:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800d60a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d60c:	4a2c      	ldr	r2, [pc, #176]	; (800d6c0 <xTaskGenericCreate+0x1d4>)
 800d60e:	6812      	ldr	r2, [r2, #0]
 800d610:	4293      	cmp	r3, r2
 800d612:	d901      	bls.n	800d618 <xTaskGenericCreate+0x12c>
 800d614:	4a2a      	ldr	r2, [pc, #168]	; (800d6c0 <xTaskGenericCreate+0x1d4>)
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	0098      	lsls	r0, r3, #2
 800d61a:	18c0      	adds	r0, r0, r3
 800d61c:	0080      	lsls	r0, r0, #2
 800d61e:	4b29      	ldr	r3, [pc, #164]	; (800d6c4 <xTaskGenericCreate+0x1d8>)
 800d620:	18c0      	adds	r0, r0, r3
 800d622:	4659      	mov	r1, fp
 800d624:	f7ff fb46 	bl	800ccb4 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800d628:	f001 f85c 	bl	800e6e4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800d62c:	4b22      	ldr	r3, [pc, #136]	; (800d6b8 <xTaskGenericCreate+0x1cc>)
 800d62e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800d630:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800d632:	2b00      	cmp	r3, #0
 800d634:	d0d4      	beq.n	800d5e0 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800d636:	4b1f      	ldr	r3, [pc, #124]	; (800d6b4 <xTaskGenericCreate+0x1c8>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63c:	42b3      	cmp	r3, r6
 800d63e:	d2cf      	bcs.n	800d5e0 <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800d640:	f001 f838 	bl	800e6b4 <vPortYield>
			xReturn = pdPASS;
 800d644:	2001      	movs	r0, #1
 800d646:	e7cb      	b.n	800d5e0 <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d648:	4d1e      	ldr	r5, [pc, #120]	; (800d6c4 <xTaskGenericCreate+0x1d8>)
 800d64a:	0028      	movs	r0, r5
 800d64c:	f7ff fb24 	bl	800cc98 <vListInitialise>
 800d650:	0028      	movs	r0, r5
 800d652:	3014      	adds	r0, #20
 800d654:	f7ff fb20 	bl	800cc98 <vListInitialise>
 800d658:	0028      	movs	r0, r5
 800d65a:	3028      	adds	r0, #40	; 0x28
 800d65c:	f7ff fb1c 	bl	800cc98 <vListInitialise>
 800d660:	0028      	movs	r0, r5
 800d662:	303c      	adds	r0, #60	; 0x3c
 800d664:	f7ff fb18 	bl	800cc98 <vListInitialise>
 800d668:	0028      	movs	r0, r5
 800d66a:	3050      	adds	r0, #80	; 0x50
 800d66c:	f7ff fb14 	bl	800cc98 <vListInitialise>
 800d670:	0028      	movs	r0, r5
 800d672:	3064      	adds	r0, #100	; 0x64
 800d674:	f7ff fb10 	bl	800cc98 <vListInitialise>
 800d678:	0028      	movs	r0, r5
 800d67a:	3078      	adds	r0, #120	; 0x78
 800d67c:	f7ff fb0c 	bl	800cc98 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800d680:	4f11      	ldr	r7, [pc, #68]	; (800d6c8 <xTaskGenericCreate+0x1dc>)
 800d682:	0038      	movs	r0, r7
 800d684:	f7ff fb08 	bl	800cc98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d688:	4d10      	ldr	r5, [pc, #64]	; (800d6cc <xTaskGenericCreate+0x1e0>)
 800d68a:	0028      	movs	r0, r5
 800d68c:	f7ff fb04 	bl	800cc98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d690:	480f      	ldr	r0, [pc, #60]	; (800d6d0 <xTaskGenericCreate+0x1e4>)
 800d692:	f7ff fb01 	bl	800cc98 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d696:	480f      	ldr	r0, [pc, #60]	; (800d6d4 <xTaskGenericCreate+0x1e8>)
 800d698:	f7ff fafe 	bl	800cc98 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d69c:	480e      	ldr	r0, [pc, #56]	; (800d6d8 <xTaskGenericCreate+0x1ec>)
 800d69e:	f7ff fafb 	bl	800cc98 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6a2:	4b0e      	ldr	r3, [pc, #56]	; (800d6dc <xTaskGenericCreate+0x1f0>)
 800d6a4:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6a6:	4b0e      	ldr	r3, [pc, #56]	; (800d6e0 <xTaskGenericCreate+0x1f4>)
 800d6a8:	601d      	str	r5, [r3, #0]
}
 800d6aa:	e7a9      	b.n	800d600 <xTaskGenericCreate+0x114>
 800d6ac:	3fffffff 	.word	0x3fffffff
 800d6b0:	20001a34 	.word	0x20001a34
 800d6b4:	20001998 	.word	0x20001998
 800d6b8:	20001a8c 	.word	0x20001a8c
 800d6bc:	20001a40 	.word	0x20001a40
 800d6c0:	20001a48 	.word	0x20001a48
 800d6c4:	200019a4 	.word	0x200019a4
 800d6c8:	20001a4c 	.word	0x20001a4c
 800d6cc:	20001a60 	.word	0x20001a60
 800d6d0:	20001a78 	.word	0x20001a78
 800d6d4:	20001aa4 	.word	0x20001aa4
 800d6d8:	20001a90 	.word	0x20001a90
 800d6dc:	2000199c 	.word	0x2000199c
 800d6e0:	200019a0 	.word	0x200019a0

0800d6e4 <uxTaskPriorityGet>:
	{
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800d6e8:	f000 fff0 	bl	800e6cc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800d6ec:	2c00      	cmp	r4, #0
 800d6ee:	d004      	beq.n	800d6fa <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800d6f0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800d6f2:	f000 fff7 	bl	800e6e4 <vPortExitCritical>
	}
 800d6f6:	0020      	movs	r0, r4
 800d6f8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800d6fa:	4b01      	ldr	r3, [pc, #4]	; (800d700 <uxTaskPriorityGet+0x1c>)
 800d6fc:	681c      	ldr	r4, [r3, #0]
 800d6fe:	e7f7      	b.n	800d6f0 <uxTaskPriorityGet+0xc>
 800d700:	20001998 	.word	0x20001998

0800d704 <vTaskPrioritySet>:
	{
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	0004      	movs	r4, r0
 800d708:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800d70a:	2906      	cmp	r1, #6
 800d70c:	d901      	bls.n	800d712 <vTaskPrioritySet+0xe>
 800d70e:	b672      	cpsid	i
 800d710:	e7fe      	b.n	800d710 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800d712:	f000 ffdb 	bl	800e6cc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800d716:	2c00      	cmp	r4, #0
 800d718:	d00e      	beq.n	800d738 <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800d71a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800d71c:	428d      	cmp	r5, r1
 800d71e:	d027      	beq.n	800d770 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800d720:	d90d      	bls.n	800d73e <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800d722:	4b22      	ldr	r3, [pc, #136]	; (800d7ac <vTaskPrioritySet+0xa8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	42a3      	cmp	r3, r4
 800d728:	d025      	beq.n	800d776 <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800d72a:	4b20      	ldr	r3, [pc, #128]	; (800d7ac <vTaskPrioritySet+0xa8>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d730:	2600      	movs	r6, #0
 800d732:	429d      	cmp	r5, r3
 800d734:	4176      	adcs	r6, r6
 800d736:	e007      	b.n	800d748 <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800d738:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <vTaskPrioritySet+0xa8>)
 800d73a:	681c      	ldr	r4, [r3, #0]
 800d73c:	e7ed      	b.n	800d71a <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800d73e:	4b1b      	ldr	r3, [pc, #108]	; (800d7ac <vTaskPrioritySet+0xa8>)
 800d740:	681e      	ldr	r6, [r3, #0]
 800d742:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800d744:	4273      	negs	r3, r6
 800d746:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800d74a:	4291      	cmp	r1, r2
 800d74c:	d015      	beq.n	800d77a <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800d74e:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d750:	69a3      	ldr	r3, [r4, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	db02      	blt.n	800d75c <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d756:	2307      	movs	r3, #7
 800d758:	1b5d      	subs	r5, r3, r5
 800d75a:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800d75c:	0093      	lsls	r3, r2, #2
 800d75e:	189b      	adds	r3, r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4a13      	ldr	r2, [pc, #76]	; (800d7b0 <vTaskPrioritySet+0xac>)
 800d764:	189b      	adds	r3, r3, r2
 800d766:	6962      	ldr	r2, [r4, #20]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d008      	beq.n	800d77e <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800d76c:	2e01      	cmp	r6, #1
 800d76e:	d01a      	beq.n	800d7a6 <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800d770:	f000 ffb8 	bl	800e6e4 <vPortExitCritical>
	}
 800d774:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800d776:	2600      	movs	r6, #0
 800d778:	e7e6      	b.n	800d748 <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800d77a:	62e5      	str	r5, [r4, #44]	; 0x2c
 800d77c:	e7e7      	b.n	800d74e <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800d77e:	1d25      	adds	r5, r4, #4
 800d780:	0028      	movs	r0, r5
 800d782:	f7ff fab9 	bl	800ccf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d788:	4a0a      	ldr	r2, [pc, #40]	; (800d7b4 <vTaskPrioritySet+0xb0>)
 800d78a:	6812      	ldr	r2, [r2, #0]
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d901      	bls.n	800d794 <vTaskPrioritySet+0x90>
 800d790:	4a08      	ldr	r2, [pc, #32]	; (800d7b4 <vTaskPrioritySet+0xb0>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	0098      	lsls	r0, r3, #2
 800d796:	18c0      	adds	r0, r0, r3
 800d798:	0080      	lsls	r0, r0, #2
 800d79a:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <vTaskPrioritySet+0xac>)
 800d79c:	18c0      	adds	r0, r0, r3
 800d79e:	0029      	movs	r1, r5
 800d7a0:	f7ff fa88 	bl	800ccb4 <vListInsertEnd>
 800d7a4:	e7e2      	b.n	800d76c <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800d7a6:	f000 ff85 	bl	800e6b4 <vPortYield>
 800d7aa:	e7e1      	b.n	800d770 <vTaskPrioritySet+0x6c>
 800d7ac:	20001998 	.word	0x20001998
 800d7b0:	200019a4 	.word	0x200019a4
 800d7b4:	20001a48 	.word	0x20001a48

0800d7b8 <vTaskStartScheduler>:
{
 800d7b8:	b500      	push	{lr}
 800d7ba:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9303      	str	r3, [sp, #12]
 800d7c0:	9302      	str	r3, [sp, #8]
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	22a0      	movs	r2, #160	; 0xa0
 800d7c8:	490d      	ldr	r1, [pc, #52]	; (800d800 <vTaskStartScheduler+0x48>)
 800d7ca:	480e      	ldr	r0, [pc, #56]	; (800d804 <vTaskStartScheduler+0x4c>)
 800d7cc:	f7ff fe8e 	bl	800d4ec <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800d7d0:	2801      	cmp	r0, #1
 800d7d2:	d003      	beq.n	800d7dc <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d110      	bne.n	800d7fa <vTaskStartScheduler+0x42>
 800d7d8:	b672      	cpsid	i
 800d7da:	e7fe      	b.n	800d7da <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800d7dc:	f000 fd8c 	bl	800e2f8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d7e0:	2801      	cmp	r0, #1
 800d7e2:	d1f7      	bne.n	800d7d4 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800d7e4:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800d7e6:	4b08      	ldr	r3, [pc, #32]	; (800d808 <vTaskStartScheduler+0x50>)
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d7ec:	4b07      	ldr	r3, [pc, #28]	; (800d80c <vTaskStartScheduler+0x54>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d7f2:	f7fa f84b 	bl	800788c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800d7f6:	f000 ff33 	bl	800e660 <xPortStartScheduler>
}
 800d7fa:	b005      	add	sp, #20
 800d7fc:	bd00      	pop	{pc}
 800d7fe:	46c0      	nop			; (mov r8, r8)
 800d800:	0801a718 	.word	0x0801a718
 800d804:	0800da91 	.word	0x0800da91
 800d808:	20001a8c 	.word	0x20001a8c
 800d80c:	20001ab8 	.word	0x20001ab8

0800d810 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d810:	4a02      	ldr	r2, [pc, #8]	; (800d81c <vTaskSuspendAll+0xc>)
 800d812:	6813      	ldr	r3, [r2, #0]
 800d814:	3301      	adds	r3, #1
 800d816:	6013      	str	r3, [r2, #0]
}
 800d818:	4770      	bx	lr
 800d81a:	46c0      	nop			; (mov r8, r8)
 800d81c:	20001a3c 	.word	0x20001a3c

0800d820 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d820:	4b01      	ldr	r3, [pc, #4]	; (800d828 <xTaskGetTickCount+0x8>)
 800d822:	6818      	ldr	r0, [r3, #0]
}
 800d824:	4770      	bx	lr
 800d826:	46c0      	nop			; (mov r8, r8)
 800d828:	20001ab8 	.word	0x20001ab8

0800d82c <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800d82c:	4b01      	ldr	r3, [pc, #4]	; (800d834 <xTaskGetTickCountFromISR+0x8>)
 800d82e:	6818      	ldr	r0, [r3, #0]
}
 800d830:	4770      	bx	lr
 800d832:	46c0      	nop			; (mov r8, r8)
 800d834:	20001ab8 	.word	0x20001ab8

0800d838 <xTaskIncrementTick>:
{
 800d838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d83a:	46ce      	mov	lr, r9
 800d83c:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d83e:	4b3d      	ldr	r3, [pc, #244]	; (800d934 <xTaskIncrementTick+0xfc>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d167      	bne.n	800d916 <xTaskIncrementTick+0xde>
		++xTickCount;
 800d846:	4b3c      	ldr	r3, [pc, #240]	; (800d938 <xTaskIncrementTick+0x100>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	3201      	adds	r2, #1
 800d84c:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800d84e:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800d850:	2e00      	cmp	r6, #0
 800d852:	d112      	bne.n	800d87a <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 800d854:	4b39      	ldr	r3, [pc, #228]	; (800d93c <xTaskIncrementTick+0x104>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <xTaskIncrementTick+0x2a>
 800d85e:	b672      	cpsid	i
 800d860:	e7fe      	b.n	800d860 <xTaskIncrementTick+0x28>
 800d862:	4a36      	ldr	r2, [pc, #216]	; (800d93c <xTaskIncrementTick+0x104>)
 800d864:	6811      	ldr	r1, [r2, #0]
 800d866:	4b36      	ldr	r3, [pc, #216]	; (800d940 <xTaskIncrementTick+0x108>)
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	6010      	str	r0, [r2, #0]
 800d86c:	6019      	str	r1, [r3, #0]
 800d86e:	4a35      	ldr	r2, [pc, #212]	; (800d944 <xTaskIncrementTick+0x10c>)
 800d870:	6813      	ldr	r3, [r2, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	f7ff fde3 	bl	800d440 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800d87a:	4b33      	ldr	r3, [pc, #204]	; (800d948 <xTaskIncrementTick+0x110>)
 800d87c:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d87e:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800d880:	42b3      	cmp	r3, r6
 800d882:	d80b      	bhi.n	800d89c <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d884:	4b2d      	ldr	r3, [pc, #180]	; (800d93c <xTaskIncrementTick+0x104>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d88e:	4d2b      	ldr	r5, [pc, #172]	; (800d93c <xTaskIncrementTick+0x104>)
 800d890:	e027      	b.n	800d8e2 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800d892:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800d894:	4b2c      	ldr	r3, [pc, #176]	; (800d948 <xTaskIncrementTick+0x110>)
 800d896:	2201      	movs	r2, #1
 800d898:	4252      	negs	r2, r2
 800d89a:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d89c:	4b2b      	ldr	r3, [pc, #172]	; (800d94c <xTaskIncrementTick+0x114>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a2:	0093      	lsls	r3, r2, #2
 800d8a4:	189b      	adds	r3, r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	4a29      	ldr	r2, [pc, #164]	; (800d950 <xTaskIncrementTick+0x118>)
 800d8aa:	589b      	ldr	r3, [r3, r2]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d937      	bls.n	800d920 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d8b0:	2401      	movs	r4, #1
 800d8b2:	e035      	b.n	800d920 <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800d8b4:	4a24      	ldr	r2, [pc, #144]	; (800d948 <xTaskIncrementTick+0x110>)
 800d8b6:	6013      	str	r3, [r2, #0]
							break;
 800d8b8:	e7f0      	b.n	800d89c <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 800d8ba:	0098      	lsls	r0, r3, #2
 800d8bc:	18c0      	adds	r0, r0, r3
 800d8be:	0080      	lsls	r0, r0, #2
 800d8c0:	4b23      	ldr	r3, [pc, #140]	; (800d950 <xTaskIncrementTick+0x118>)
 800d8c2:	18c0      	adds	r0, r0, r3
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7ff f9f5 	bl	800ccb4 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8ca:	4b20      	ldr	r3, [pc, #128]	; (800d94c <xTaskIncrementTick+0x114>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d300      	bcc.n	800d8d8 <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 800d8d6:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8d8:	4b18      	ldr	r3, [pc, #96]	; (800d93c <xTaskIncrementTick+0x104>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d0d8      	beq.n	800d894 <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d8e2:	682b      	ldr	r3, [r5, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800d8e8:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 800d8ea:	429e      	cmp	r6, r3
 800d8ec:	d3e2      	bcc.n	800d8b4 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800d8ee:	1d3b      	adds	r3, r7, #4
 800d8f0:	4699      	mov	r9, r3
 800d8f2:	0018      	movs	r0, r3
 800d8f4:	f7ff fa00 	bl	800ccf8 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8fe:	0038      	movs	r0, r7
 800d900:	3018      	adds	r0, #24
 800d902:	f7ff f9f9 	bl	800ccf8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d908:	4a12      	ldr	r2, [pc, #72]	; (800d954 <xTaskIncrementTick+0x11c>)
 800d90a:	6812      	ldr	r2, [r2, #0]
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d9d4      	bls.n	800d8ba <xTaskIncrementTick+0x82>
 800d910:	4a10      	ldr	r2, [pc, #64]	; (800d954 <xTaskIncrementTick+0x11c>)
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	e7d1      	b.n	800d8ba <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800d916:	4a10      	ldr	r2, [pc, #64]	; (800d958 <xTaskIncrementTick+0x120>)
 800d918:	6813      	ldr	r3, [r2, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d91e:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800d920:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <xTaskIncrementTick+0x124>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d000      	beq.n	800d92a <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800d928:	2401      	movs	r4, #1
}
 800d92a:	0020      	movs	r0, r4
 800d92c:	bc80      	pop	{r7}
 800d92e:	46b9      	mov	r9, r7
 800d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d932:	46c0      	nop			; (mov r8, r8)
 800d934:	20001a3c 	.word	0x20001a3c
 800d938:	20001ab8 	.word	0x20001ab8
 800d93c:	2000199c 	.word	0x2000199c
 800d940:	200019a0 	.word	0x200019a0
 800d944:	20001a74 	.word	0x20001a74
 800d948:	200000f8 	.word	0x200000f8
 800d94c:	20001998 	.word	0x20001998
 800d950:	200019a4 	.word	0x200019a4
 800d954:	20001a48 	.word	0x20001a48
 800d958:	20001a38 	.word	0x20001a38
 800d95c:	20001abc 	.word	0x20001abc

0800d960 <xTaskResumeAll>:
{
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800d962:	4b31      	ldr	r3, [pc, #196]	; (800da28 <xTaskResumeAll+0xc8>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d101      	bne.n	800d96e <xTaskResumeAll+0xe>
 800d96a:	b672      	cpsid	i
 800d96c:	e7fe      	b.n	800d96c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800d96e:	f000 fead 	bl	800e6cc <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d972:	4b2d      	ldr	r3, [pc, #180]	; (800da28 <xTaskResumeAll+0xc8>)
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	3a01      	subs	r2, #1
 800d978:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d97a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800d97c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d14b      	bne.n	800da1a <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d982:	4b2a      	ldr	r3, [pc, #168]	; (800da2c <xTaskResumeAll+0xcc>)
 800d984:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800d986:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d046      	beq.n	800da1a <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d98c:	4d28      	ldr	r5, [pc, #160]	; (800da30 <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d98e:	002c      	movs	r4, r5
 800d990:	e00d      	b.n	800d9ae <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 800d992:	0098      	lsls	r0, r3, #2
 800d994:	18c0      	adds	r0, r0, r3
 800d996:	0080      	lsls	r0, r0, #2
 800d998:	4b26      	ldr	r3, [pc, #152]	; (800da34 <xTaskResumeAll+0xd4>)
 800d99a:	18c0      	adds	r0, r0, r3
 800d99c:	0039      	movs	r1, r7
 800d99e:	f7ff f989 	bl	800ccb4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9a2:	4b25      	ldr	r3, [pc, #148]	; (800da38 <xTaskResumeAll+0xd8>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800d9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d214      	bcs.n	800d9d8 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9ae:	682b      	ldr	r3, [r5, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d015      	beq.n	800d9e0 <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d9b4:	68e3      	ldr	r3, [r4, #12]
 800d9b6:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9b8:	0030      	movs	r0, r6
 800d9ba:	3018      	adds	r0, #24
 800d9bc:	f7ff f99c 	bl	800ccf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800d9c0:	1d37      	adds	r7, r6, #4
 800d9c2:	0038      	movs	r0, r7
 800d9c4:	f7ff f998 	bl	800ccf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d9c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d9ca:	4a1c      	ldr	r2, [pc, #112]	; (800da3c <xTaskResumeAll+0xdc>)
 800d9cc:	6812      	ldr	r2, [r2, #0]
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d9df      	bls.n	800d992 <xTaskResumeAll+0x32>
 800d9d2:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <xTaskResumeAll+0xdc>)
 800d9d4:	6013      	str	r3, [r2, #0]
 800d9d6:	e7dc      	b.n	800d992 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800d9d8:	4b19      	ldr	r3, [pc, #100]	; (800da40 <xTaskResumeAll+0xe0>)
 800d9da:	2201      	movs	r2, #1
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	e7e6      	b.n	800d9ae <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800d9e0:	4b18      	ldr	r3, [pc, #96]	; (800da44 <xTaskResumeAll+0xe4>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d013      	beq.n	800da10 <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800d9e8:	4b16      	ldr	r3, [pc, #88]	; (800da44 <xTaskResumeAll+0xe4>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00f      	beq.n	800da10 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 800d9f0:	4d13      	ldr	r5, [pc, #76]	; (800da40 <xTaskResumeAll+0xe0>)
 800d9f2:	2601      	movs	r6, #1
						--uxPendedTicks;
 800d9f4:	4c13      	ldr	r4, [pc, #76]	; (800da44 <xTaskResumeAll+0xe4>)
 800d9f6:	e005      	b.n	800da04 <xTaskResumeAll+0xa4>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d005      	beq.n	800da10 <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 800da04:	f7ff ff18 	bl	800d838 <xTaskIncrementTick>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d0f5      	beq.n	800d9f8 <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 800da0c:	602e      	str	r6, [r5, #0]
 800da0e:	e7f3      	b.n	800d9f8 <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 800da10:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <xTaskResumeAll+0xe0>)
 800da12:	681c      	ldr	r4, [r3, #0]
 800da14:	2c01      	cmp	r4, #1
 800da16:	d004      	beq.n	800da22 <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800da18:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800da1a:	f000 fe63 	bl	800e6e4 <vPortExitCritical>
}
 800da1e:	0020      	movs	r0, r4
 800da20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800da22:	f000 fe47 	bl	800e6b4 <vPortYield>
 800da26:	e7f8      	b.n	800da1a <xTaskResumeAll+0xba>
 800da28:	20001a3c 	.word	0x20001a3c
 800da2c:	20001a34 	.word	0x20001a34
 800da30:	20001a78 	.word	0x20001a78
 800da34:	200019a4 	.word	0x200019a4
 800da38:	20001998 	.word	0x20001998
 800da3c:	20001a48 	.word	0x20001a48
 800da40:	20001abc 	.word	0x20001abc
 800da44:	20001a38 	.word	0x20001a38

0800da48 <vTaskDelay>:
	{
 800da48:	b510      	push	{r4, lr}
 800da4a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da4c:	d016      	beq.n	800da7c <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800da4e:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <vTaskDelay+0x3c>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <vTaskDelay+0x12>
 800da56:	b672      	cpsid	i
 800da58:	e7fe      	b.n	800da58 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800da5a:	f7ff fed9 	bl	800d810 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800da5e:	4b0a      	ldr	r3, [pc, #40]	; (800da88 <vTaskDelay+0x40>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800da64:	4b09      	ldr	r3, [pc, #36]	; (800da8c <vTaskDelay+0x44>)
 800da66:	6818      	ldr	r0, [r3, #0]
 800da68:	3004      	adds	r0, #4
 800da6a:	f7ff f945 	bl	800ccf8 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800da6e:	0020      	movs	r0, r4
 800da70:	f7ff fcfc 	bl	800d46c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800da74:	f7ff ff74 	bl	800d960 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800da78:	2800      	cmp	r0, #0
 800da7a:	d101      	bne.n	800da80 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800da7c:	f000 fe1a 	bl	800e6b4 <vPortYield>
	}
 800da80:	bd10      	pop	{r4, pc}
 800da82:	46c0      	nop			; (mov r8, r8)
 800da84:	20001a3c 	.word	0x20001a3c
 800da88:	20001ab8 	.word	0x20001ab8
 800da8c:	20001998 	.word	0x20001998

0800da90 <prvIdleTask>:
{
 800da90:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800da92:	4e16      	ldr	r6, [pc, #88]	; (800daec <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800da94:	4d16      	ldr	r5, [pc, #88]	; (800daf0 <prvIdleTask+0x60>)
 800da96:	e003      	b.n	800daa0 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da98:	4b16      	ldr	r3, [pc, #88]	; (800daf4 <prvIdleTask+0x64>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d822      	bhi.n	800dae6 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800daa0:	6833      	ldr	r3, [r6, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0f8      	beq.n	800da98 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800daa6:	f7ff feb3 	bl	800d810 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800daaa:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800daac:	f7ff ff58 	bl	800d960 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800dab0:	2c00      	cmp	r4, #0
 800dab2:	d0f5      	beq.n	800daa0 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800dab4:	f000 fe0a 	bl	800e6cc <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dab8:	4b0d      	ldr	r3, [pc, #52]	; (800daf0 <prvIdleTask+0x60>)
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800dabe:	1d20      	adds	r0, r4, #4
 800dac0:	f7ff f91a 	bl	800ccf8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800dac4:	4a0c      	ldr	r2, [pc, #48]	; (800daf8 <prvIdleTask+0x68>)
 800dac6:	6813      	ldr	r3, [r2, #0]
 800dac8:	3b01      	subs	r3, #1
 800daca:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800dacc:	4a07      	ldr	r2, [pc, #28]	; (800daec <prvIdleTask+0x5c>)
 800dace:	6813      	ldr	r3, [r2, #0]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800dad4:	f000 fe06 	bl	800e6e4 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800dad8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dada:	f000 ff0b 	bl	800e8f4 <vPortFree>
		vPortFree( pxTCB );
 800dade:	0020      	movs	r0, r4
 800dae0:	f000 ff08 	bl	800e8f4 <vPortFree>
	}
 800dae4:	e7dc      	b.n	800daa0 <prvIdleTask+0x10>
				taskYIELD();
 800dae6:	f000 fde5 	bl	800e6b4 <vPortYield>
 800daea:	e7d9      	b.n	800daa0 <prvIdleTask+0x10>
 800daec:	20001a44 	.word	0x20001a44
 800daf0:	20001aa4 	.word	0x20001aa4
 800daf4:	200019a4 	.word	0x200019a4
 800daf8:	20001a34 	.word	0x20001a34

0800dafc <uxTaskGetSystemState>:
	{
 800dafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dafe:	46c6      	mov	lr, r8
 800db00:	b500      	push	{lr}
 800db02:	0006      	movs	r6, r0
 800db04:	000d      	movs	r5, r1
 800db06:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800db08:	f7ff fe82 	bl	800d810 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800db0c:	4b1e      	ldr	r3, [pc, #120]	; (800db88 <uxTaskGetSystemState+0x8c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800db10:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800db12:	42ab      	cmp	r3, r5
 800db14:	d832      	bhi.n	800db7c <uxTaskGetSystemState+0x80>
 800db16:	4d1d      	ldr	r5, [pc, #116]	; (800db8c <uxTaskGetSystemState+0x90>)
 800db18:	002f      	movs	r7, r5
 800db1a:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800db1c:	0160      	lsls	r0, r4, #5
 800db1e:	1830      	adds	r0, r6, r0
 800db20:	2201      	movs	r2, #1
 800db22:	0029      	movs	r1, r5
 800db24:	f7ff fc34 	bl	800d390 <prvListTaskWithinSingleList>
 800db28:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db2a:	002b      	movs	r3, r5
 800db2c:	3d14      	subs	r5, #20
 800db2e:	42bb      	cmp	r3, r7
 800db30:	d1f4      	bne.n	800db1c <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800db32:	4b17      	ldr	r3, [pc, #92]	; (800db90 <uxTaskGetSystemState+0x94>)
 800db34:	6819      	ldr	r1, [r3, #0]
 800db36:	0160      	lsls	r0, r4, #5
 800db38:	1830      	adds	r0, r6, r0
 800db3a:	2202      	movs	r2, #2
 800db3c:	f7ff fc28 	bl	800d390 <prvListTaskWithinSingleList>
 800db40:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800db42:	4b14      	ldr	r3, [pc, #80]	; (800db94 <uxTaskGetSystemState+0x98>)
 800db44:	6819      	ldr	r1, [r3, #0]
 800db46:	0160      	lsls	r0, r4, #5
 800db48:	1830      	adds	r0, r6, r0
 800db4a:	2202      	movs	r2, #2
 800db4c:	f7ff fc20 	bl	800d390 <prvListTaskWithinSingleList>
 800db50:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800db52:	0160      	lsls	r0, r4, #5
 800db54:	1830      	adds	r0, r6, r0
 800db56:	2204      	movs	r2, #4
 800db58:	490f      	ldr	r1, [pc, #60]	; (800db98 <uxTaskGetSystemState+0x9c>)
 800db5a:	f7ff fc19 	bl	800d390 <prvListTaskWithinSingleList>
 800db5e:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800db60:	0160      	lsls	r0, r4, #5
 800db62:	1830      	adds	r0, r6, r0
 800db64:	2203      	movs	r2, #3
 800db66:	490d      	ldr	r1, [pc, #52]	; (800db9c <uxTaskGetSystemState+0xa0>)
 800db68:	f7ff fc12 	bl	800d390 <prvListTaskWithinSingleList>
 800db6c:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800db6e:	4643      	mov	r3, r8
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800db74:	f7f9 fe9a 	bl	80078ac <ulMainGetRunTimeCounterValue>
 800db78:	4643      	mov	r3, r8
 800db7a:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800db7c:	f7ff fef0 	bl	800d960 <xTaskResumeAll>
	}
 800db80:	0020      	movs	r0, r4
 800db82:	bc80      	pop	{r7}
 800db84:	46b8      	mov	r8, r7
 800db86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db88:	20001a34 	.word	0x20001a34
 800db8c:	20001a1c 	.word	0x20001a1c
 800db90:	2000199c 	.word	0x2000199c
 800db94:	200019a0 	.word	0x200019a0
 800db98:	20001aa4 	.word	0x20001aa4
 800db9c:	20001a90 	.word	0x20001a90

0800dba0 <vTaskSwitchContext>:
{
 800dba0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dba2:	4b39      	ldr	r3, [pc, #228]	; (800dc88 <vTaskSwitchContext+0xe8>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800dbaa:	4b38      	ldr	r3, [pc, #224]	; (800dc8c <vTaskSwitchContext+0xec>)
 800dbac:	2201      	movs	r2, #1
 800dbae:	601a      	str	r2, [r3, #0]
}
 800dbb0:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800dbb2:	4b36      	ldr	r3, [pc, #216]	; (800dc8c <vTaskSwitchContext+0xec>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dbb8:	f7f9 fe78 	bl	80078ac <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800dbbc:	4b34      	ldr	r3, [pc, #208]	; (800dc90 <vTaskSwitchContext+0xf0>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4298      	cmp	r0, r3
 800dbc2:	d905      	bls.n	800dbd0 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800dbc4:	4a33      	ldr	r2, [pc, #204]	; (800dc94 <vTaskSwitchContext+0xf4>)
 800dbc6:	6812      	ldr	r2, [r2, #0]
 800dbc8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800dbca:	1acb      	subs	r3, r1, r3
 800dbcc:	181b      	adds	r3, r3, r0
 800dbce:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800dbd0:	4b2f      	ldr	r3, [pc, #188]	; (800dc90 <vTaskSwitchContext+0xf0>)
 800dbd2:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dbd4:	4b2f      	ldr	r3, [pc, #188]	; (800dc94 <vTaskSwitchContext+0xf4>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	6812      	ldr	r2, [r2, #0]
 800dbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d93b      	bls.n	800dc5a <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dbe2:	4b2c      	ldr	r3, [pc, #176]	; (800dc94 <vTaskSwitchContext+0xf4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dbe8:	2214      	movs	r2, #20
 800dbea:	492b      	ldr	r1, [pc, #172]	; (800dc98 <vTaskSwitchContext+0xf8>)
 800dbec:	f003 ffaa 	bl	8011b44 <memcmp>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d139      	bne.n	800dc68 <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dbf4:	4b29      	ldr	r3, [pc, #164]	; (800dc9c <vTaskSwitchContext+0xfc>)
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	0093      	lsls	r3, r2, #2
 800dbfa:	189b      	adds	r3, r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4a28      	ldr	r2, [pc, #160]	; (800dca0 <vTaskSwitchContext+0x100>)
 800dc00:	589b      	ldr	r3, [r3, r2]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d10f      	bne.n	800dc26 <vTaskSwitchContext+0x86>
 800dc06:	4825      	ldr	r0, [pc, #148]	; (800dc9c <vTaskSwitchContext+0xfc>)
 800dc08:	0002      	movs	r2, r0
 800dc0a:	6803      	ldr	r3, [r0, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d032      	beq.n	800dc76 <vTaskSwitchContext+0xd6>
 800dc10:	6813      	ldr	r3, [r2, #0]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	6013      	str	r3, [r2, #0]
 800dc16:	6811      	ldr	r1, [r2, #0]
 800dc18:	008b      	lsls	r3, r1, #2
 800dc1a:	185b      	adds	r3, r3, r1
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4920      	ldr	r1, [pc, #128]	; (800dca0 <vTaskSwitchContext+0x100>)
 800dc20:	585b      	ldr	r3, [r3, r1]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0f1      	beq.n	800dc0a <vTaskSwitchContext+0x6a>
 800dc26:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <vTaskSwitchContext+0xfc>)
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	4c1d      	ldr	r4, [pc, #116]	; (800dca0 <vTaskSwitchContext+0x100>)
 800dc2c:	0093      	lsls	r3, r2, #2
 800dc2e:	1899      	adds	r1, r3, r2
 800dc30:	0089      	lsls	r1, r1, #2
 800dc32:	1861      	adds	r1, r4, r1
 800dc34:	6848      	ldr	r0, [r1, #4]
 800dc36:	6840      	ldr	r0, [r0, #4]
 800dc38:	6048      	str	r0, [r1, #4]
 800dc3a:	189b      	adds	r3, r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	3308      	adds	r3, #8
 800dc40:	191b      	adds	r3, r3, r4
 800dc42:	4298      	cmp	r0, r3
 800dc44:	d019      	beq.n	800dc7a <vTaskSwitchContext+0xda>
 800dc46:	0093      	lsls	r3, r2, #2
 800dc48:	189a      	adds	r2, r3, r2
 800dc4a:	0092      	lsls	r2, r2, #2
 800dc4c:	4b14      	ldr	r3, [pc, #80]	; (800dca0 <vTaskSwitchContext+0x100>)
 800dc4e:	189a      	adds	r2, r3, r2
 800dc50:	6853      	ldr	r3, [r2, #4]
 800dc52:	68da      	ldr	r2, [r3, #12]
 800dc54:	4b0f      	ldr	r3, [pc, #60]	; (800dc94 <vTaskSwitchContext+0xf4>)
 800dc56:	601a      	str	r2, [r3, #0]
}
 800dc58:	e7aa      	b.n	800dbb0 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dc5a:	4b0e      	ldr	r3, [pc, #56]	; (800dc94 <vTaskSwitchContext+0xf4>)
 800dc5c:	6818      	ldr	r0, [r3, #0]
 800dc5e:	6819      	ldr	r1, [r3, #0]
 800dc60:	3134      	adds	r1, #52	; 0x34
 800dc62:	f7fe f92f 	bl	800bec4 <vApplicationStackOverflowHook>
 800dc66:	e7bc      	b.n	800dbe2 <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dc68:	4b0a      	ldr	r3, [pc, #40]	; (800dc94 <vTaskSwitchContext+0xf4>)
 800dc6a:	6818      	ldr	r0, [r3, #0]
 800dc6c:	6819      	ldr	r1, [r3, #0]
 800dc6e:	3134      	adds	r1, #52	; 0x34
 800dc70:	f7fe f928 	bl	800bec4 <vApplicationStackOverflowHook>
 800dc74:	e7be      	b.n	800dbf4 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dc76:	b672      	cpsid	i
 800dc78:	e7fe      	b.n	800dc78 <vTaskSwitchContext+0xd8>
 800dc7a:	6840      	ldr	r0, [r0, #4]
 800dc7c:	0093      	lsls	r3, r2, #2
 800dc7e:	189b      	adds	r3, r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	18e3      	adds	r3, r4, r3
 800dc84:	6058      	str	r0, [r3, #4]
 800dc86:	e7de      	b.n	800dc46 <vTaskSwitchContext+0xa6>
 800dc88:	20001a3c 	.word	0x20001a3c
 800dc8c:	20001abc 	.word	0x20001abc
 800dc90:	20001a30 	.word	0x20001a30
 800dc94:	20001998 	.word	0x20001998
 800dc98:	0801a748 	.word	0x0801a748
 800dc9c:	20001a48 	.word	0x20001a48
 800dca0:	200019a4 	.word	0x200019a4

0800dca4 <vTaskPlaceOnEventList>:
{
 800dca4:	b570      	push	{r4, r5, r6, lr}
 800dca6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d010      	beq.n	800dcce <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcac:	4d0c      	ldr	r5, [pc, #48]	; (800dce0 <vTaskPlaceOnEventList+0x3c>)
 800dcae:	6829      	ldr	r1, [r5, #0]
 800dcb0:	3118      	adds	r1, #24
 800dcb2:	f7ff f80a 	bl	800ccca <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dcb6:	6828      	ldr	r0, [r5, #0]
 800dcb8:	3004      	adds	r0, #4
 800dcba:	f7ff f81d 	bl	800ccf8 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800dcbe:	1c63      	adds	r3, r4, #1
 800dcc0:	d007      	beq.n	800dcd2 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800dcc2:	4b08      	ldr	r3, [pc, #32]	; (800dce4 <vTaskPlaceOnEventList+0x40>)
 800dcc4:	6818      	ldr	r0, [r3, #0]
 800dcc6:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800dcc8:	f7ff fbd0 	bl	800d46c <prvAddCurrentTaskToDelayedList>
}
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800dcce:	b672      	cpsid	i
 800dcd0:	e7fe      	b.n	800dcd0 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800dcd2:	4b03      	ldr	r3, [pc, #12]	; (800dce0 <vTaskPlaceOnEventList+0x3c>)
 800dcd4:	6819      	ldr	r1, [r3, #0]
 800dcd6:	3104      	adds	r1, #4
 800dcd8:	4803      	ldr	r0, [pc, #12]	; (800dce8 <vTaskPlaceOnEventList+0x44>)
 800dcda:	f7fe ffeb 	bl	800ccb4 <vListInsertEnd>
 800dcde:	e7f5      	b.n	800dccc <vTaskPlaceOnEventList+0x28>
 800dce0:	20001998 	.word	0x20001998
 800dce4:	20001ab8 	.word	0x20001ab8
 800dce8:	20001a90 	.word	0x20001a90

0800dcec <vTaskPlaceOnEventListRestricted>:
	{
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d00e      	beq.n	800dd12 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcf4:	4d08      	ldr	r5, [pc, #32]	; (800dd18 <vTaskPlaceOnEventListRestricted+0x2c>)
 800dcf6:	6829      	ldr	r1, [r5, #0]
 800dcf8:	3118      	adds	r1, #24
 800dcfa:	f7fe ffdb 	bl	800ccb4 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dcfe:	6828      	ldr	r0, [r5, #0]
 800dd00:	3004      	adds	r0, #4
 800dd02:	f7fe fff9 	bl	800ccf8 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800dd06:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <vTaskPlaceOnEventListRestricted+0x30>)
 800dd08:	6818      	ldr	r0, [r3, #0]
 800dd0a:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800dd0c:	f7ff fbae 	bl	800d46c <prvAddCurrentTaskToDelayedList>
	}
 800dd10:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800dd12:	b672      	cpsid	i
 800dd14:	e7fe      	b.n	800dd14 <vTaskPlaceOnEventListRestricted+0x28>
 800dd16:	46c0      	nop			; (mov r8, r8)
 800dd18:	20001998 	.word	0x20001998
 800dd1c:	20001ab8 	.word	0x20001ab8

0800dd20 <xTaskRemoveFromEventList>:
{
 800dd20:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800dd22:	68c3      	ldr	r3, [r0, #12]
 800dd24:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dd26:	2c00      	cmp	r4, #0
 800dd28:	d027      	beq.n	800dd7a <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd2a:	0025      	movs	r5, r4
 800dd2c:	3518      	adds	r5, #24
 800dd2e:	0028      	movs	r0, r5
 800dd30:	f7fe ffe2 	bl	800ccf8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd34:	4b14      	ldr	r3, [pc, #80]	; (800dd88 <xTaskRemoveFromEventList+0x68>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d120      	bne.n	800dd7e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800dd3c:	1d25      	adds	r5, r4, #4
 800dd3e:	0028      	movs	r0, r5
 800dd40:	f7fe ffda 	bl	800ccf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd46:	4a11      	ldr	r2, [pc, #68]	; (800dd8c <xTaskRemoveFromEventList+0x6c>)
 800dd48:	6812      	ldr	r2, [r2, #0]
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d901      	bls.n	800dd52 <xTaskRemoveFromEventList+0x32>
 800dd4e:	4a0f      	ldr	r2, [pc, #60]	; (800dd8c <xTaskRemoveFromEventList+0x6c>)
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	0098      	lsls	r0, r3, #2
 800dd54:	18c0      	adds	r0, r0, r3
 800dd56:	0080      	lsls	r0, r0, #2
 800dd58:	4b0d      	ldr	r3, [pc, #52]	; (800dd90 <xTaskRemoveFromEventList+0x70>)
 800dd5a:	18c0      	adds	r0, r0, r3
 800dd5c:	0029      	movs	r1, r5
 800dd5e:	f7fe ffa9 	bl	800ccb4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd62:	4b0c      	ldr	r3, [pc, #48]	; (800dd94 <xTaskRemoveFromEventList+0x74>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800dd6a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d903      	bls.n	800dd78 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800dd70:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <xTaskRemoveFromEventList+0x78>)
 800dd72:	2201      	movs	r2, #1
 800dd74:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800dd76:	3001      	adds	r0, #1
}
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800dd7a:	b672      	cpsid	i
 800dd7c:	e7fe      	b.n	800dd7c <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd7e:	0029      	movs	r1, r5
 800dd80:	4806      	ldr	r0, [pc, #24]	; (800dd9c <xTaskRemoveFromEventList+0x7c>)
 800dd82:	f7fe ff97 	bl	800ccb4 <vListInsertEnd>
 800dd86:	e7ec      	b.n	800dd62 <xTaskRemoveFromEventList+0x42>
 800dd88:	20001a3c 	.word	0x20001a3c
 800dd8c:	20001a48 	.word	0x20001a48
 800dd90:	200019a4 	.word	0x200019a4
 800dd94:	20001998 	.word	0x20001998
 800dd98:	20001abc 	.word	0x20001abc
 800dd9c:	20001a78 	.word	0x20001a78

0800dda0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d006      	beq.n	800ddb2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dda4:	4b04      	ldr	r3, [pc, #16]	; (800ddb8 <vTaskSetTimeOutState+0x18>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddaa:	4b04      	ldr	r3, [pc, #16]	; (800ddbc <vTaskSetTimeOutState+0x1c>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	6043      	str	r3, [r0, #4]
}
 800ddb0:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ddb2:	b672      	cpsid	i
 800ddb4:	e7fe      	b.n	800ddb4 <vTaskSetTimeOutState+0x14>
 800ddb6:	46c0      	nop			; (mov r8, r8)
 800ddb8:	20001a74 	.word	0x20001a74
 800ddbc:	20001ab8 	.word	0x20001ab8

0800ddc0 <xTaskCheckForTimeOut>:
{
 800ddc0:	b570      	push	{r4, r5, r6, lr}
 800ddc2:	0004      	movs	r4, r0
 800ddc4:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d01e      	beq.n	800de08 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800ddca:	2900      	cmp	r1, #0
 800ddcc:	d01e      	beq.n	800de0c <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800ddce:	f000 fc7d 	bl	800e6cc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ddd2:	4b12      	ldr	r3, [pc, #72]	; (800de1c <xTaskCheckForTimeOut+0x5c>)
 800ddd4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	1c59      	adds	r1, r3, #1
 800ddda:	d019      	beq.n	800de10 <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dddc:	4910      	ldr	r1, [pc, #64]	; (800de20 <xTaskCheckForTimeOut+0x60>)
 800ddde:	6809      	ldr	r1, [r1, #0]
 800dde0:	6820      	ldr	r0, [r4, #0]
 800dde2:	4288      	cmp	r0, r1
 800dde4:	d003      	beq.n	800ddee <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800dde6:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dde8:	6861      	ldr	r1, [r4, #4]
 800ddea:	4291      	cmp	r1, r2
 800ddec:	d911      	bls.n	800de12 <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ddee:	6861      	ldr	r1, [r4, #4]
 800ddf0:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ddf2:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ddf4:	4283      	cmp	r3, r0
 800ddf6:	d90c      	bls.n	800de12 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	185b      	adds	r3, r3, r1
 800ddfc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ddfe:	0020      	movs	r0, r4
 800de00:	f7ff ffce 	bl	800dda0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800de04:	2600      	movs	r6, #0
 800de06:	e004      	b.n	800de12 <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 800de08:	b672      	cpsid	i
 800de0a:	e7fe      	b.n	800de0a <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 800de0c:	b672      	cpsid	i
 800de0e:	e7fe      	b.n	800de0e <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 800de10:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800de12:	f000 fc67 	bl	800e6e4 <vPortExitCritical>
}
 800de16:	0030      	movs	r0, r6
 800de18:	bd70      	pop	{r4, r5, r6, pc}
 800de1a:	46c0      	nop			; (mov r8, r8)
 800de1c:	20001ab8 	.word	0x20001ab8
 800de20:	20001a74 	.word	0x20001a74

0800de24 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800de24:	4b01      	ldr	r3, [pc, #4]	; (800de2c <vTaskMissedYield+0x8>)
 800de26:	2201      	movs	r2, #1
 800de28:	601a      	str	r2, [r3, #0]
}
 800de2a:	4770      	bx	lr
 800de2c:	20001abc 	.word	0x20001abc

0800de30 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800de30:	4b05      	ldr	r3, [pc, #20]	; (800de48 <xTaskGetSchedulerState+0x18>)
 800de32:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de34:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800de36:	2b00      	cmp	r3, #0
 800de38:	d004      	beq.n	800de44 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de3a:	4b04      	ldr	r3, [pc, #16]	; (800de4c <xTaskGetSchedulerState+0x1c>)
 800de3c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800de3e:	4243      	negs	r3, r0
 800de40:	4158      	adcs	r0, r3
 800de42:	0040      	lsls	r0, r0, #1
	}
 800de44:	4770      	bx	lr
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	20001a8c 	.word	0x20001a8c
 800de4c:	20001a3c 	.word	0x20001a3c

0800de50 <vTaskPriorityInherit>:
	{
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800de54:	d01a      	beq.n	800de8c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de56:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800de58:	4b19      	ldr	r3, [pc, #100]	; (800dec0 <vTaskPriorityInherit+0x70>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5e:	429a      	cmp	r2, r3
 800de60:	d214      	bcs.n	800de8c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de62:	6983      	ldr	r3, [r0, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	db05      	blt.n	800de74 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de68:	4b15      	ldr	r3, [pc, #84]	; (800dec0 <vTaskPriorityInherit+0x70>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800de6e:	2307      	movs	r3, #7
 800de70:	1a5b      	subs	r3, r3, r1
 800de72:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800de74:	0093      	lsls	r3, r2, #2
 800de76:	189b      	adds	r3, r3, r2
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4a12      	ldr	r2, [pc, #72]	; (800dec4 <vTaskPriorityInherit+0x74>)
 800de7c:	189b      	adds	r3, r3, r2
 800de7e:	6962      	ldr	r2, [r4, #20]
 800de80:	429a      	cmp	r2, r3
 800de82:	d004      	beq.n	800de8e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de84:	4b0e      	ldr	r3, [pc, #56]	; (800dec0 <vTaskPriorityInherit+0x70>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800de8c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800de8e:	1d25      	adds	r5, r4, #4
 800de90:	0028      	movs	r0, r5
 800de92:	f7fe ff31 	bl	800ccf8 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de96:	4b0a      	ldr	r3, [pc, #40]	; (800dec0 <vTaskPriorityInherit+0x70>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800de9e:	4a0a      	ldr	r2, [pc, #40]	; (800dec8 <vTaskPriorityInherit+0x78>)
 800dea0:	6812      	ldr	r2, [r2, #0]
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d808      	bhi.n	800deb8 <vTaskPriorityInherit+0x68>
 800dea6:	0098      	lsls	r0, r3, #2
 800dea8:	18c0      	adds	r0, r0, r3
 800deaa:	0080      	lsls	r0, r0, #2
 800deac:	4b05      	ldr	r3, [pc, #20]	; (800dec4 <vTaskPriorityInherit+0x74>)
 800deae:	18c0      	adds	r0, r0, r3
 800deb0:	0029      	movs	r1, r5
 800deb2:	f7fe feff 	bl	800ccb4 <vListInsertEnd>
	}
 800deb6:	e7e9      	b.n	800de8c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800deb8:	4a03      	ldr	r2, [pc, #12]	; (800dec8 <vTaskPriorityInherit+0x78>)
 800deba:	6013      	str	r3, [r2, #0]
 800debc:	e7f3      	b.n	800dea6 <vTaskPriorityInherit+0x56>
 800debe:	46c0      	nop			; (mov r8, r8)
 800dec0:	20001998 	.word	0x20001998
 800dec4:	200019a4 	.word	0x200019a4
 800dec8:	20001a48 	.word	0x20001a48

0800decc <xTaskPriorityDisinherit>:
	{
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ded0:	d02c      	beq.n	800df2c <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800ded2:	4b18      	ldr	r3, [pc, #96]	; (800df34 <xTaskPriorityDisinherit+0x68>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4283      	cmp	r3, r0
 800ded8:	d001      	beq.n	800dede <xTaskPriorityDisinherit+0x12>
 800deda:	b672      	cpsid	i
 800dedc:	e7fe      	b.n	800dedc <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800dede:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <xTaskPriorityDisinherit+0x1c>
 800dee4:	b672      	cpsid	i
 800dee6:	e7fe      	b.n	800dee6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800dee8:	3b01      	subs	r3, #1
 800deea:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800deec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800deee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800def0:	428a      	cmp	r2, r1
 800def2:	d01d      	beq.n	800df30 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800def4:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800def6:	2b00      	cmp	r3, #0
 800def8:	d119      	bne.n	800df2e <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800defa:	1d25      	adds	r5, r4, #4
 800defc:	0028      	movs	r0, r5
 800defe:	f7fe fefb 	bl	800ccf8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df04:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df06:	2207      	movs	r2, #7
 800df08:	1ad2      	subs	r2, r2, r3
 800df0a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800df0c:	4a0a      	ldr	r2, [pc, #40]	; (800df38 <xTaskPriorityDisinherit+0x6c>)
 800df0e:	6812      	ldr	r2, [r2, #0]
 800df10:	4293      	cmp	r3, r2
 800df12:	d901      	bls.n	800df18 <xTaskPriorityDisinherit+0x4c>
 800df14:	4a08      	ldr	r2, [pc, #32]	; (800df38 <xTaskPriorityDisinherit+0x6c>)
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	0098      	lsls	r0, r3, #2
 800df1a:	18c0      	adds	r0, r0, r3
 800df1c:	0080      	lsls	r0, r0, #2
 800df1e:	4b07      	ldr	r3, [pc, #28]	; (800df3c <xTaskPriorityDisinherit+0x70>)
 800df20:	18c0      	adds	r0, r0, r3
 800df22:	0029      	movs	r1, r5
 800df24:	f7fe fec6 	bl	800ccb4 <vListInsertEnd>
					xReturn = pdTRUE;
 800df28:	2001      	movs	r0, #1
 800df2a:	e000      	b.n	800df2e <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800df2c:	2000      	movs	r0, #0
	}
 800df2e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800df30:	2000      	movs	r0, #0
 800df32:	e7fc      	b.n	800df2e <xTaskPriorityDisinherit+0x62>
 800df34:	20001998 	.word	0x20001998
 800df38:	20001a48 	.word	0x20001a48
 800df3c:	200019a4 	.word	0x200019a4

0800df40 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800df40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df42:	46ce      	mov	lr, r9
 800df44:	4647      	mov	r7, r8
 800df46:	b580      	push	{r7, lr}
 800df48:	b085      	sub	sp, #20
 800df4a:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800df4c:	2300      	movs	r3, #0
 800df4e:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800df50:	4b30      	ldr	r3, [pc, #192]	; (800e014 <vTaskList+0xd4>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800df56:	6818      	ldr	r0, [r3, #0]
 800df58:	0140      	lsls	r0, r0, #5
 800df5a:	f000 fc39 	bl	800e7d0 <pvPortMalloc>
 800df5e:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800df60:	d053      	beq.n	800e00a <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800df62:	9903      	ldr	r1, [sp, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	f7ff fdc9 	bl	800dafc <uxTaskGetSystemState>
 800df6a:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800df6c:	2300      	movs	r3, #0
 800df6e:	9302      	str	r3, [sp, #8]
 800df70:	9a02      	ldr	r2, [sp, #8]
 800df72:	9b03      	ldr	r3, [sp, #12]
 800df74:	429a      	cmp	r2, r3
 800df76:	d245      	bcs.n	800e004 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800df78:	2343      	movs	r3, #67	; 0x43
 800df7a:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800df7c:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800df7e:	4b26      	ldr	r3, [pc, #152]	; (800e018 <vTaskList+0xd8>)
 800df80:	4699      	mov	r9, r3
 800df82:	e02a      	b.n	800dfda <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800df84:	3a02      	subs	r2, #2
 800df86:	1e53      	subs	r3, r2, #1
 800df88:	419a      	sbcs	r2, r3
 800df8a:	4256      	negs	r6, r2
 800df8c:	43be      	bics	r6, r7
 800df8e:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	015b      	lsls	r3, r3, #5
 800df94:	18eb      	adds	r3, r5, r3
 800df96:	6859      	ldr	r1, [r3, #4]
 800df98:	0020      	movs	r0, r4
 800df9a:	f7ff fa91 	bl	800d4c0 <prvWriteNameToBuffer>
 800df9e:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800dfa0:	9b02      	ldr	r3, [sp, #8]
 800dfa2:	9a02      	ldr	r2, [sp, #8]
 800dfa4:	9902      	ldr	r1, [sp, #8]
 800dfa6:	015b      	lsls	r3, r3, #5
 800dfa8:	18eb      	adds	r3, r5, r3
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	0149      	lsls	r1, r1, #5
 800dfae:	1869      	adds	r1, r5, r1
 800dfb0:	6889      	ldr	r1, [r1, #8]
 800dfb2:	9101      	str	r1, [sp, #4]
 800dfb4:	0152      	lsls	r2, r2, #5
 800dfb6:	18aa      	adds	r2, r5, r2
 800dfb8:	8b92      	ldrh	r2, [r2, #28]
 800dfba:	9200      	str	r2, [sp, #0]
 800dfbc:	0032      	movs	r2, r6
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	f003 ffcc 	bl	8011f5c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800dfc4:	0020      	movs	r0, r4
 800dfc6:	f7f2 f8a7 	bl	8000118 <strlen>
 800dfca:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800dfcc:	9b02      	ldr	r3, [sp, #8]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	9302      	str	r3, [sp, #8]
 800dfd2:	9a02      	ldr	r2, [sp, #8]
 800dfd4:	9b03      	ldr	r3, [sp, #12]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d214      	bcs.n	800e004 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800dfda:	9b02      	ldr	r3, [sp, #8]
 800dfdc:	015b      	lsls	r3, r3, #5
 800dfde:	18eb      	adds	r3, r5, r3
 800dfe0:	7b1a      	ldrb	r2, [r3, #12]
 800dfe2:	2a03      	cmp	r2, #3
 800dfe4:	d00c      	beq.n	800e000 <vTaskList+0xc0>
 800dfe6:	d803      	bhi.n	800dff0 <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 800dfe8:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800dfea:	2a01      	cmp	r2, #1
 800dfec:	d1ca      	bne.n	800df84 <vTaskList+0x44>
 800dfee:	e7cf      	b.n	800df90 <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800dff0:	3a04      	subs	r2, #4
 800dff2:	1e53      	subs	r3, r2, #1
 800dff4:	419a      	sbcs	r2, r3
 800dff6:	4256      	negs	r6, r2
 800dff8:	4643      	mov	r3, r8
 800dffa:	439e      	bics	r6, r3
 800dffc:	3644      	adds	r6, #68	; 0x44
 800dffe:	e7c7      	b.n	800df90 <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800e000:	2653      	movs	r6, #83	; 0x53
 800e002:	e7c5      	b.n	800df90 <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e004:	0028      	movs	r0, r5
 800e006:	f000 fc75 	bl	800e8f4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e00a:	b005      	add	sp, #20
 800e00c:	bcc0      	pop	{r6, r7}
 800e00e:	46b9      	mov	r9, r7
 800e010:	46b0      	mov	r8, r6
 800e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e014:	20001a34 	.word	0x20001a34
 800e018:	0801a720 	.word	0x0801a720

0800e01c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e01e:	46c6      	mov	lr, r8
 800e020:	b500      	push	{lr}
 800e022:	b084      	sub	sp, #16
 800e024:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800e026:	2300      	movs	r3, #0
 800e028:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e02a:	4b2a      	ldr	r3, [pc, #168]	; (800e0d4 <vTaskGetRunTimeStats+0xb8>)
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800e030:	6818      	ldr	r0, [r3, #0]
 800e032:	0140      	lsls	r0, r0, #5
 800e034:	f000 fbcc 	bl	800e7d0 <pvPortMalloc>
 800e038:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800e03a:	d015      	beq.n	800e068 <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e03c:	9903      	ldr	r1, [sp, #12]
 800e03e:	aa01      	add	r2, sp, #4
 800e040:	f7ff fd5c 	bl	800dafc <uxTaskGetSystemState>
 800e044:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e046:	9d01      	ldr	r5, [sp, #4]
 800e048:	2164      	movs	r1, #100	; 0x64
 800e04a:	0028      	movs	r0, r5
 800e04c:	f7f2 f880 	bl	8000150 <__udivsi3>
 800e050:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800e052:	2d63      	cmp	r5, #99	; 0x63
 800e054:	d905      	bls.n	800e062 <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e056:	2300      	movs	r3, #0
 800e058:	9302      	str	r3, [sp, #8]
 800e05a:	9a02      	ldr	r2, [sp, #8]
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d318      	bcc.n	800e094 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800e062:	0038      	movs	r0, r7
 800e064:	f000 fc46 	bl	800e8f4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e068:	b004      	add	sp, #16
 800e06a:	bc80      	pop	{r7}
 800e06c:	46b8      	mov	r8, r7
 800e06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800e070:	9b02      	ldr	r3, [sp, #8]
 800e072:	015b      	lsls	r3, r3, #5
 800e074:	18fb      	adds	r3, r7, r3
 800e076:	699a      	ldr	r2, [r3, #24]
 800e078:	4917      	ldr	r1, [pc, #92]	; (800e0d8 <vTaskGetRunTimeStats+0xbc>)
 800e07a:	f003 ff6f 	bl	8011f5c <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800e07e:	0020      	movs	r0, r4
 800e080:	f7f2 f84a 	bl	8000118 <strlen>
 800e084:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800e086:	9b02      	ldr	r3, [sp, #8]
 800e088:	3301      	adds	r3, #1
 800e08a:	9302      	str	r3, [sp, #8]
 800e08c:	9a02      	ldr	r2, [sp, #8]
 800e08e:	9b03      	ldr	r3, [sp, #12]
 800e090:	429a      	cmp	r2, r3
 800e092:	d2e6      	bcs.n	800e062 <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e094:	9b02      	ldr	r3, [sp, #8]
 800e096:	015b      	lsls	r3, r3, #5
 800e098:	18fb      	adds	r3, r7, r3
 800e09a:	699e      	ldr	r6, [r3, #24]
 800e09c:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e09e:	9b02      	ldr	r3, [sp, #8]
 800e0a0:	015b      	lsls	r3, r3, #5
 800e0a2:	18fb      	adds	r3, r7, r3
 800e0a4:	6859      	ldr	r1, [r3, #4]
 800e0a6:	0020      	movs	r0, r4
 800e0a8:	f7ff fa0a 	bl	800d4c0 <prvWriteNameToBuffer>
 800e0ac:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800e0ae:	42ae      	cmp	r6, r5
 800e0b0:	d3de      	bcc.n	800e070 <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e0b2:	9b02      	ldr	r3, [sp, #8]
 800e0b4:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e0b6:	0029      	movs	r1, r5
 800e0b8:	0030      	movs	r0, r6
 800e0ba:	f7f2 f849 	bl	8000150 <__udivsi3>
 800e0be:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800e0c0:	4642      	mov	r2, r8
 800e0c2:	0152      	lsls	r2, r2, #5
 800e0c4:	18ba      	adds	r2, r7, r2
 800e0c6:	6992      	ldr	r2, [r2, #24]
 800e0c8:	4904      	ldr	r1, [pc, #16]	; (800e0dc <vTaskGetRunTimeStats+0xc0>)
 800e0ca:	0020      	movs	r0, r4
 800e0cc:	f003 ff46 	bl	8011f5c <sprintf>
 800e0d0:	e7d5      	b.n	800e07e <vTaskGetRunTimeStats+0x62>
 800e0d2:	46c0      	nop			; (mov r8, r8)
 800e0d4:	20001a34 	.word	0x20001a34
 800e0d8:	0801a73c 	.word	0x0801a73c
 800e0dc:	0801a730 	.word	0x0801a730

0800e0e0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e0e0:	4b05      	ldr	r3, [pc, #20]	; (800e0f8 <pvTaskIncrementMutexHeldCount+0x18>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d004      	beq.n	800e0f2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0e8:	4b03      	ldr	r3, [pc, #12]	; (800e0f8 <pvTaskIncrementMutexHeldCount+0x18>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e0f2:	4b01      	ldr	r3, [pc, #4]	; (800e0f8 <pvTaskIncrementMutexHeldCount+0x18>)
 800e0f4:	6818      	ldr	r0, [r3, #0]
	}
 800e0f6:	4770      	bx	lr
 800e0f8:	20001998 	.word	0x20001998

0800e0fc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	0004      	movs	r4, r0
 800e100:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e102:	f000 fae3 	bl	800e6cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e106:	4b20      	ldr	r3, [pc, #128]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d106      	bne.n	800e11e <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800e110:	4b1d      	ldr	r3, [pc, #116]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	235c      	movs	r3, #92	; 0x5c
 800e116:	2101      	movs	r1, #1
 800e118:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800e11a:	2d00      	cmp	r5, #0
 800e11c:	d117      	bne.n	800e14e <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e11e:	f000 fae1 	bl	800e6e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e122:	f000 fad3 	bl	800e6cc <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e126:	4b18      	ldr	r3, [pc, #96]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	d005      	beq.n	800e13c <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800e130:	2c00      	cmp	r4, #0
 800e132:	d022      	beq.n	800e17a <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e134:	4b14      	ldr	r3, [pc, #80]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2200      	movs	r2, #0
 800e13a:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800e13c:	4b12      	ldr	r3, [pc, #72]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	235c      	movs	r3, #92	; 0x5c
 800e142:	2100      	movs	r1, #0
 800e144:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e146:	f000 facd 	bl	800e6e4 <vPortExitCritical>

		return ulReturn;
	}
 800e14a:	0028      	movs	r0, r5
 800e14c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e14e:	4b0e      	ldr	r3, [pc, #56]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e150:	6818      	ldr	r0, [r3, #0]
 800e152:	3004      	adds	r0, #4
 800e154:	f7fe fdd0 	bl	800ccf8 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e158:	1c6b      	adds	r3, r5, #1
 800e15a:	d007      	beq.n	800e16c <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800e15c:	4b0b      	ldr	r3, [pc, #44]	; (800e18c <ulTaskNotifyTake+0x90>)
 800e15e:	6818      	ldr	r0, [r3, #0]
 800e160:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e162:	f7ff f983 	bl	800d46c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e166:	f000 faa5 	bl	800e6b4 <vPortYield>
 800e16a:	e7d8      	b.n	800e11e <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e16c:	4b06      	ldr	r3, [pc, #24]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e16e:	6819      	ldr	r1, [r3, #0]
 800e170:	3104      	adds	r1, #4
 800e172:	4807      	ldr	r0, [pc, #28]	; (800e190 <ulTaskNotifyTake+0x94>)
 800e174:	f7fe fd9e 	bl	800ccb4 <vListInsertEnd>
 800e178:	e7f5      	b.n	800e166 <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800e17a:	4b03      	ldr	r3, [pc, #12]	; (800e188 <ulTaskNotifyTake+0x8c>)
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e180:	3b01      	subs	r3, #1
 800e182:	6593      	str	r3, [r2, #88]	; 0x58
 800e184:	e7da      	b.n	800e13c <ulTaskNotifyTake+0x40>
 800e186:	46c0      	nop			; (mov r8, r8)
 800e188:	20001998 	.word	0x20001998
 800e18c:	20001ab8 	.word	0x20001ab8
 800e190:	20001a90 	.word	0x20001a90

0800e194 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	0004      	movs	r4, r0
 800e198:	000e      	movs	r6, r1
 800e19a:	0015      	movs	r5, r2
 800e19c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d015      	beq.n	800e1ce <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e1a2:	f000 fa93 	bl	800e6cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e1a6:	2f00      	cmp	r7, #0
 800e1a8:	d001      	beq.n	800e1ae <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e1aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e1ac:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e1ae:	225c      	movs	r2, #92	; 0x5c
 800e1b0:	5ca3      	ldrb	r3, [r4, r2]
 800e1b2:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800e1b4:	2102      	movs	r1, #2
 800e1b6:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800e1b8:	2d03      	cmp	r5, #3
 800e1ba:	d01a      	beq.n	800e1f2 <xTaskGenericNotify+0x5e>
 800e1bc:	d809      	bhi.n	800e1d2 <xTaskGenericNotify+0x3e>
 800e1be:	2d01      	cmp	r5, #1
 800e1c0:	d00d      	beq.n	800e1de <xTaskGenericNotify+0x4a>
 800e1c2:	2d02      	cmp	r5, #2
 800e1c4:	d10e      	bne.n	800e1e4 <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e1c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e1c8:	3201      	adds	r2, #1
 800e1ca:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e1cc:	e00a      	b.n	800e1e4 <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 800e1ce:	b672      	cpsid	i
 800e1d0:	e7fe      	b.n	800e1d0 <xTaskGenericNotify+0x3c>
			switch( eAction )
 800e1d2:	2d04      	cmp	r5, #4
 800e1d4:	d106      	bne.n	800e1e4 <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d02f      	beq.n	800e23a <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e1da:	65a6      	str	r6, [r4, #88]	; 0x58
 800e1dc:	e002      	b.n	800e1e4 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 800e1de:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e1e0:	4316      	orrs	r6, r2
 800e1e2:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e1e4:	2501      	movs	r5, #1
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d005      	beq.n	800e1f6 <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e1ea:	f000 fa7b 	bl	800e6e4 <vPortExitCritical>

		return xReturn;
	}
 800e1ee:	0028      	movs	r0, r5
 800e1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 800e1f2:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800e1f4:	e7f6      	b.n	800e1e4 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e1f6:	1d25      	adds	r5, r4, #4
 800e1f8:	0028      	movs	r0, r5
 800e1fa:	f7fe fd7d 	bl	800ccf8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e1fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e200:	4a0f      	ldr	r2, [pc, #60]	; (800e240 <xTaskGenericNotify+0xac>)
 800e202:	6812      	ldr	r2, [r2, #0]
 800e204:	4293      	cmp	r3, r2
 800e206:	d901      	bls.n	800e20c <xTaskGenericNotify+0x78>
 800e208:	4a0d      	ldr	r2, [pc, #52]	; (800e240 <xTaskGenericNotify+0xac>)
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	0098      	lsls	r0, r3, #2
 800e20e:	18c0      	adds	r0, r0, r3
 800e210:	0080      	lsls	r0, r0, #2
 800e212:	4b0c      	ldr	r3, [pc, #48]	; (800e244 <xTaskGenericNotify+0xb0>)
 800e214:	18c0      	adds	r0, r0, r3
 800e216:	0029      	movs	r1, r5
 800e218:	f7fe fd4c 	bl	800ccb4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e21c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <xTaskGenericNotify+0x92>
 800e222:	b672      	cpsid	i
 800e224:	e7fe      	b.n	800e224 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e226:	4b08      	ldr	r3, [pc, #32]	; (800e248 <xTaskGenericNotify+0xb4>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22e:	2501      	movs	r5, #1
 800e230:	429a      	cmp	r2, r3
 800e232:	d9da      	bls.n	800e1ea <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 800e234:	f000 fa3e 	bl	800e6b4 <vPortYield>
 800e238:	e7d7      	b.n	800e1ea <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 800e23a:	2500      	movs	r5, #0
 800e23c:	e7d5      	b.n	800e1ea <xTaskGenericNotify+0x56>
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	20001a48 	.word	0x20001a48
 800e244:	200019a4 	.word	0x200019a4
 800e248:	20001998 	.word	0x20001998

0800e24c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e24c:	b510      	push	{r4, lr}
 800e24e:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e250:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e252:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e254:	4291      	cmp	r1, r2
 800e256:	d80c      	bhi.n	800e272 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e258:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e25a:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e25c:	69a3      	ldr	r3, [r4, #24]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d300      	bcc.n	800e264 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800e262:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e264:	1d21      	adds	r1, r4, #4
 800e266:	4b09      	ldr	r3, [pc, #36]	; (800e28c <prvInsertTimerInActiveList+0x40>)
 800e268:	6818      	ldr	r0, [r3, #0]
 800e26a:	f7fe fd2e 	bl	800ccca <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e26e:	2000      	movs	r0, #0
 800e270:	e7f7      	b.n	800e262 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e272:	429a      	cmp	r2, r3
 800e274:	d202      	bcs.n	800e27c <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800e276:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e278:	4299      	cmp	r1, r3
 800e27a:	d2f2      	bcs.n	800e262 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e27c:	1d21      	adds	r1, r4, #4
 800e27e:	4b04      	ldr	r3, [pc, #16]	; (800e290 <prvInsertTimerInActiveList+0x44>)
 800e280:	6818      	ldr	r0, [r3, #0]
 800e282:	f7fe fd22 	bl	800ccca <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e286:	2000      	movs	r0, #0
 800e288:	e7eb      	b.n	800e262 <prvInsertTimerInActiveList+0x16>
 800e28a:	46c0      	nop			; (mov r8, r8)
 800e28c:	20001ac4 	.word	0x20001ac4
 800e290:	20001ac0 	.word	0x20001ac0

0800e294 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e294:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e296:	f000 fa19 	bl	800e6cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e29a:	4b11      	ldr	r3, [pc, #68]	; (800e2e0 <prvCheckForValidListAndQueue+0x4c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d002      	beq.n	800e2a8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2a2:	f000 fa1f 	bl	800e6e4 <vPortExitCritical>
}
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800e2a8:	4d0e      	ldr	r5, [pc, #56]	; (800e2e4 <prvCheckForValidListAndQueue+0x50>)
 800e2aa:	0028      	movs	r0, r5
 800e2ac:	f7fe fcf4 	bl	800cc98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2b0:	4c0d      	ldr	r4, [pc, #52]	; (800e2e8 <prvCheckForValidListAndQueue+0x54>)
 800e2b2:	0020      	movs	r0, r4
 800e2b4:	f7fe fcf0 	bl	800cc98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	; (800e2ec <prvCheckForValidListAndQueue+0x58>)
 800e2ba:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2bc:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <prvCheckForValidListAndQueue+0x5c>)
 800e2be:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2110      	movs	r1, #16
 800e2c4:	2004      	movs	r0, #4
 800e2c6:	f7fe fdec 	bl	800cea2 <xQueueGenericCreate>
 800e2ca:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <prvCheckForValidListAndQueue+0x4c>)
 800e2cc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d003      	beq.n	800e2da <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2d2:	4908      	ldr	r1, [pc, #32]	; (800e2f4 <prvCheckForValidListAndQueue+0x60>)
 800e2d4:	f7ff f828 	bl	800d328 <vQueueAddToRegistry>
 800e2d8:	e7e3      	b.n	800e2a2 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800e2da:	b672      	cpsid	i
 800e2dc:	e7fe      	b.n	800e2dc <prvCheckForValidListAndQueue+0x48>
 800e2de:	46c0      	nop			; (mov r8, r8)
 800e2e0:	20001af4 	.word	0x20001af4
 800e2e4:	20001ac8 	.word	0x20001ac8
 800e2e8:	20001adc 	.word	0x20001adc
 800e2ec:	20001ac0 	.word	0x20001ac0
 800e2f0:	20001ac4 	.word	0x20001ac4
 800e2f4:	0801a75c 	.word	0x0801a75c

0800e2f8 <xTimerCreateTimerTask>:
{
 800e2f8:	b500      	push	{lr}
 800e2fa:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e2fc:	f7ff ffca 	bl	800e294 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e300:	4b0a      	ldr	r3, [pc, #40]	; (800e32c <xTimerCreateTimerTask+0x34>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00d      	beq.n	800e324 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e308:	2300      	movs	r3, #0
 800e30a:	9303      	str	r3, [sp, #12]
 800e30c:	9302      	str	r3, [sp, #8]
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	3303      	adds	r3, #3
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	2300      	movs	r3, #0
 800e316:	22a0      	movs	r2, #160	; 0xa0
 800e318:	4905      	ldr	r1, [pc, #20]	; (800e330 <xTimerCreateTimerTask+0x38>)
 800e31a:	4806      	ldr	r0, [pc, #24]	; (800e334 <xTimerCreateTimerTask+0x3c>)
 800e31c:	f7ff f8e6 	bl	800d4ec <xTaskGenericCreate>
	configASSERT( xReturn );
 800e320:	2800      	cmp	r0, #0
 800e322:	d101      	bne.n	800e328 <xTimerCreateTimerTask+0x30>
 800e324:	b672      	cpsid	i
 800e326:	e7fe      	b.n	800e326 <xTimerCreateTimerTask+0x2e>
}
 800e328:	b005      	add	sp, #20
 800e32a:	bd00      	pop	{pc}
 800e32c:	20001af4 	.word	0x20001af4
 800e330:	0801a764 	.word	0x0801a764
 800e334:	0800e481 	.word	0x0800e481

0800e338 <xTimerCreate>:
{
 800e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33a:	46c6      	mov	lr, r8
 800e33c:	b500      	push	{lr}
 800e33e:	4680      	mov	r8, r0
 800e340:	000d      	movs	r5, r1
 800e342:	0017      	movs	r7, r2
 800e344:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e346:	2900      	cmp	r1, #0
 800e348:	d014      	beq.n	800e374 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e34a:	202c      	movs	r0, #44	; 0x2c
 800e34c:	f000 fa40 	bl	800e7d0 <pvPortMalloc>
 800e350:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e352:	d00b      	beq.n	800e36c <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e354:	f7ff ff9e 	bl	800e294 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e358:	4643      	mov	r3, r8
 800e35a:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e35c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e35e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e360:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e362:	9b06      	ldr	r3, [sp, #24]
 800e364:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e366:	1d20      	adds	r0, r4, #4
 800e368:	f7fe fca1 	bl	800ccae <vListInitialiseItem>
}
 800e36c:	0020      	movs	r0, r4
 800e36e:	bc80      	pop	{r7}
 800e370:	46b8      	mov	r8, r7
 800e372:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e374:	b672      	cpsid	i
 800e376:	e7fe      	b.n	800e376 <xTimerCreate+0x3e>

0800e378 <xTimerGenericCommand>:
{
 800e378:	b530      	push	{r4, r5, lr}
 800e37a:	b085      	sub	sp, #20
 800e37c:	0004      	movs	r4, r0
 800e37e:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800e380:	4b12      	ldr	r3, [pc, #72]	; (800e3cc <xTimerGenericCommand+0x54>)
 800e382:	6818      	ldr	r0, [r3, #0]
 800e384:	2800      	cmp	r0, #0
 800e386:	d01f      	beq.n	800e3c8 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800e388:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e38a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e38c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e38e:	2905      	cmp	r1, #5
 800e390:	dc13      	bgt.n	800e3ba <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e392:	f7ff fd4d 	bl	800de30 <xTaskGetSchedulerState>
 800e396:	2802      	cmp	r0, #2
 800e398:	d007      	beq.n	800e3aa <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e39a:	4b0c      	ldr	r3, [pc, #48]	; (800e3cc <xTimerGenericCommand+0x54>)
 800e39c:	6818      	ldr	r0, [r3, #0]
 800e39e:	2300      	movs	r3, #0
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	4669      	mov	r1, sp
 800e3a4:	f7fe fdb6 	bl	800cf14 <xQueueGenericSend>
 800e3a8:	e00c      	b.n	800e3c4 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e3aa:	4b08      	ldr	r3, [pc, #32]	; (800e3cc <xTimerGenericCommand+0x54>)
 800e3ac:	6818      	ldr	r0, [r3, #0]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	9a08      	ldr	r2, [sp, #32]
 800e3b2:	4669      	mov	r1, sp
 800e3b4:	f7fe fdae 	bl	800cf14 <xQueueGenericSend>
 800e3b8:	e004      	b.n	800e3c4 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	002a      	movs	r2, r5
 800e3be:	4669      	mov	r1, sp
 800e3c0:	f7fe fe44 	bl	800d04c <xQueueGenericSendFromISR>
}
 800e3c4:	b005      	add	sp, #20
 800e3c6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800e3c8:	2000      	movs	r0, #0
	return xReturn;
 800e3ca:	e7fb      	b.n	800e3c4 <xTimerGenericCommand+0x4c>
 800e3cc:	20001af4 	.word	0x20001af4

0800e3d0 <prvSampleTimeNow>:
{
 800e3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3d2:	46d6      	mov	lr, sl
 800e3d4:	464f      	mov	r7, r9
 800e3d6:	4646      	mov	r6, r8
 800e3d8:	b5c0      	push	{r6, r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 800e3de:	f7ff fa1f 	bl	800d820 <xTaskGetTickCount>
 800e3e2:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800e3e4:	4b23      	ldr	r3, [pc, #140]	; (800e474 <prvSampleTimeNow+0xa4>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4283      	cmp	r3, r0
 800e3ea:	d80a      	bhi.n	800e402 <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800e3f0:	4b20      	ldr	r3, [pc, #128]	; (800e474 <prvSampleTimeNow+0xa4>)
 800e3f2:	601c      	str	r4, [r3, #0]
}
 800e3f4:	0020      	movs	r0, r4
 800e3f6:	b004      	add	sp, #16
 800e3f8:	bce0      	pop	{r5, r6, r7}
 800e3fa:	46ba      	mov	sl, r7
 800e3fc:	46b1      	mov	r9, r6
 800e3fe:	46a8      	mov	r8, r5
 800e400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e402:	4b1d      	ldr	r3, [pc, #116]	; (800e478 <prvSampleTimeNow+0xa8>)
 800e404:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e406:	2300      	movs	r3, #0
 800e408:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e40a:	4643      	mov	r3, r8
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	2a00      	cmp	r2, #0
 800e412:	d026      	beq.n	800e462 <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e41a:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e41c:	1d2f      	adds	r7, r5, #4
 800e41e:	0038      	movs	r0, r7
 800e420:	f7fe fc6a 	bl	800ccf8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e424:	0028      	movs	r0, r5
 800e426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e428:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e42a:	69eb      	ldr	r3, [r5, #28]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d1ec      	bne.n	800e40a <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e430:	69ab      	ldr	r3, [r5, #24]
 800e432:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800e434:	459a      	cmp	sl, r3
 800e436:	d209      	bcs.n	800e44c <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e438:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e43a:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e43c:	4b0e      	ldr	r3, [pc, #56]	; (800e478 <prvSampleTimeNow+0xa8>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	9303      	str	r3, [sp, #12]
 800e442:	0039      	movs	r1, r7
 800e444:	0018      	movs	r0, r3
 800e446:	f7fe fc40 	bl	800ccca <vListInsert>
 800e44a:	e7de      	b.n	800e40a <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e44c:	464b      	mov	r3, r9
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	4652      	mov	r2, sl
 800e452:	4649      	mov	r1, r9
 800e454:	0028      	movs	r0, r5
 800e456:	f7ff ff8f 	bl	800e378 <xTimerGenericCommand>
				configASSERT( xResult );
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d1d5      	bne.n	800e40a <prvSampleTimeNow+0x3a>
 800e45e:	b672      	cpsid	i
 800e460:	e7fe      	b.n	800e460 <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 800e462:	4a06      	ldr	r2, [pc, #24]	; (800e47c <prvSampleTimeNow+0xac>)
 800e464:	4904      	ldr	r1, [pc, #16]	; (800e478 <prvSampleTimeNow+0xa8>)
 800e466:	6810      	ldr	r0, [r2, #0]
 800e468:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e46a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e46c:	2301      	movs	r3, #1
 800e46e:	6033      	str	r3, [r6, #0]
 800e470:	e7be      	b.n	800e3f0 <prvSampleTimeNow+0x20>
 800e472:	46c0      	nop			; (mov r8, r8)
 800e474:	20001af0 	.word	0x20001af0
 800e478:	20001ac0 	.word	0x20001ac0
 800e47c:	20001ac4 	.word	0x20001ac4

0800e480 <prvTimerTask>:
{
 800e480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e482:	b08d      	sub	sp, #52	; 0x34
 800e484:	4d57      	ldr	r5, [pc, #348]	; (800e5e4 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e486:	4b58      	ldr	r3, [pc, #352]	; (800e5e8 <prvTimerTask+0x168>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e48c:	2e00      	cmp	r6, #0
 800e48e:	d100      	bne.n	800e492 <prvTimerTask+0x12>
 800e490:	e09b      	b.n	800e5ca <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800e496:	f7ff f9bb 	bl	800d810 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e49a:	a808      	add	r0, sp, #32
 800e49c:	f7ff ff98 	bl	800e3d0 <prvSampleTimeNow>
 800e4a0:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e4a2:	9b08      	ldr	r3, [sp, #32]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d000      	beq.n	800e4aa <prvTimerTask+0x2a>
 800e4a8:	e099      	b.n	800e5de <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e4aa:	4286      	cmp	r6, r0
 800e4ac:	d90a      	bls.n	800e4c4 <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e4ae:	1b31      	subs	r1, r6, r4
 800e4b0:	4b4e      	ldr	r3, [pc, #312]	; (800e5ec <prvTimerTask+0x16c>)
 800e4b2:	6818      	ldr	r0, [r3, #0]
 800e4b4:	f7fe ff4c 	bl	800d350 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e4b8:	f7ff fa52 	bl	800d960 <xTaskResumeAll>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d025      	beq.n	800e50c <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4c0:	4c4a      	ldr	r4, [pc, #296]	; (800e5ec <prvTimerTask+0x16c>)
}
 800e4c2:	e033      	b.n	800e52c <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 800e4c4:	f7ff fa4c 	bl	800d960 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4c8:	4b47      	ldr	r3, [pc, #284]	; (800e5e8 <prvTimerTask+0x168>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4d0:	1d38      	adds	r0, r7, #4
 800e4d2:	f7fe fc11 	bl	800ccf8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d003      	beq.n	800e4e4 <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	0038      	movs	r0, r7
 800e4e0:	4798      	blx	r3
}
 800e4e2:	e7ed      	b.n	800e4c0 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	18f1      	adds	r1, r6, r3
 800e4e8:	0033      	movs	r3, r6
 800e4ea:	0022      	movs	r2, r4
 800e4ec:	0038      	movs	r0, r7
 800e4ee:	f7ff fead 	bl	800e24c <prvInsertTimerInActiveList>
 800e4f2:	2801      	cmp	r0, #1
 800e4f4:	d1f2      	bne.n	800e4dc <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	9100      	str	r1, [sp, #0]
 800e4fa:	000b      	movs	r3, r1
 800e4fc:	0032      	movs	r2, r6
 800e4fe:	0038      	movs	r0, r7
 800e500:	f7ff ff3a 	bl	800e378 <xTimerGenericCommand>
			configASSERT( xResult );
 800e504:	2800      	cmp	r0, #0
 800e506:	d1e9      	bne.n	800e4dc <prvTimerTask+0x5c>
 800e508:	b672      	cpsid	i
 800e50a:	e7fe      	b.n	800e50a <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 800e50c:	f000 f8d2 	bl	800e6b4 <vPortYield>
 800e510:	e7d6      	b.n	800e4c0 <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e514:	9303      	str	r3, [sp, #12]
 800e516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e518:	9304      	str	r3, [sp, #16]
 800e51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	9903      	ldr	r1, [sp, #12]
 800e520:	9804      	ldr	r0, [sp, #16]
 800e522:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e524:	9b08      	ldr	r3, [sp, #32]
 800e526:	9303      	str	r3, [sp, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	da0b      	bge.n	800e544 <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e52c:	2300      	movs	r3, #0
 800e52e:	2200      	movs	r2, #0
 800e530:	a908      	add	r1, sp, #32
 800e532:	6820      	ldr	r0, [r4, #0]
 800e534:	f7fe fe0e 	bl	800d154 <xQueueGenericReceive>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d0a4      	beq.n	800e486 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e53c:	9b08      	ldr	r3, [sp, #32]
 800e53e:	9303      	str	r3, [sp, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	dbe6      	blt.n	800e512 <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e544:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e546:	6973      	ldr	r3, [r6, #20]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e54c:	1d30      	adds	r0, r6, #4
 800e54e:	f7fe fbd3 	bl	800ccf8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e552:	a807      	add	r0, sp, #28
 800e554:	f7ff ff3c 	bl	800e3d0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	9303      	str	r3, [sp, #12]
 800e55c:	2b09      	cmp	r3, #9
 800e55e:	d8e5      	bhi.n	800e52c <prvTimerTask+0xac>
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	58eb      	ldr	r3, [r5, r3]
 800e564:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800e566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e568:	69b2      	ldr	r2, [r6, #24]
 800e56a:	4694      	mov	ip, r2
 800e56c:	4463      	add	r3, ip
 800e56e:	0019      	movs	r1, r3
 800e570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e572:	0002      	movs	r2, r0
 800e574:	0030      	movs	r0, r6
 800e576:	f7ff fe69 	bl	800e24c <prvInsertTimerInActiveList>
 800e57a:	2801      	cmp	r0, #1
 800e57c:	d1d6      	bne.n	800e52c <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e57e:	0030      	movs	r0, r6
 800e580:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e582:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e584:	69f3      	ldr	r3, [r6, #28]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d1d0      	bne.n	800e52c <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e58c:	69b1      	ldr	r1, [r6, #24]
 800e58e:	468c      	mov	ip, r1
 800e590:	4463      	add	r3, ip
 800e592:	001a      	movs	r2, r3
 800e594:	2300      	movs	r3, #0
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	2100      	movs	r1, #0
 800e59a:	0030      	movs	r0, r6
 800e59c:	f7ff feec 	bl	800e378 <xTimerGenericCommand>
							configASSERT( xResult );
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d1c3      	bne.n	800e52c <prvTimerTask+0xac>
 800e5a4:	b672      	cpsid	i
 800e5a6:	e7fe      	b.n	800e5a6 <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e5a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5aa:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e5ac:	2900      	cmp	r1, #0
 800e5ae:	d006      	beq.n	800e5be <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e5b0:	1841      	adds	r1, r0, r1
 800e5b2:	0003      	movs	r3, r0
 800e5b4:	0002      	movs	r2, r0
 800e5b6:	0030      	movs	r0, r6
 800e5b8:	f7ff fe48 	bl	800e24c <prvInsertTimerInActiveList>
					break;
 800e5bc:	e7b6      	b.n	800e52c <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e5be:	b672      	cpsid	i
 800e5c0:	e7fe      	b.n	800e5c0 <prvTimerTask+0x140>
					vPortFree( pxTimer );
 800e5c2:	0030      	movs	r0, r6
 800e5c4:	f000 f996 	bl	800e8f4 <vPortFree>
					break;
 800e5c8:	e7b0      	b.n	800e52c <prvTimerTask+0xac>
	vTaskSuspendAll();
 800e5ca:	f7ff f921 	bl	800d810 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5ce:	a808      	add	r0, sp, #32
 800e5d0:	f7ff fefe 	bl	800e3d0 <prvSampleTimeNow>
 800e5d4:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e5d6:	9b08      	ldr	r3, [sp, #32]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d100      	bne.n	800e5de <prvTimerTask+0x15e>
 800e5dc:	e767      	b.n	800e4ae <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 800e5de:	f7ff f9bf 	bl	800d960 <xTaskResumeAll>
 800e5e2:	e76d      	b.n	800e4c0 <prvTimerTask+0x40>
 800e5e4:	0801a76c 	.word	0x0801a76c
 800e5e8:	20001ac0 	.word	0x20001ac0
 800e5ec:	20001af4 	.word	0x20001af4

0800e5f0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e5f0:	b510      	push	{r4, lr}
 800e5f2:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800e5f4:	d006      	beq.n	800e604 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800e5f6:	f000 f869 	bl	800e6cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e5fa:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800e5fc:	f000 f872 	bl	800e6e4 <vPortExitCritical>

	return pvReturn;
}
 800e600:	0020      	movs	r0, r4
 800e602:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 800e604:	b672      	cpsid	i
 800e606:	e7fe      	b.n	800e606 <pvTimerGetTimerID+0x16>

0800e608 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e608:	4b03      	ldr	r3, [pc, #12]	; (800e618 <prvTaskExitError+0x10>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3301      	adds	r3, #1
 800e60e:	d001      	beq.n	800e614 <prvTaskExitError+0xc>
 800e610:	b672      	cpsid	i
 800e612:	e7fe      	b.n	800e612 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800e614:	b672      	cpsid	i
	for( ;; );
 800e616:	e7fe      	b.n	800e616 <prvTaskExitError+0xe>
 800e618:	200000fc 	.word	0x200000fc

0800e61c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e61c:	4a06      	ldr	r2, [pc, #24]	; (800e638 <pxCurrentTCBConst2>)
 800e61e:	6813      	ldr	r3, [r2, #0]
 800e620:	6818      	ldr	r0, [r3, #0]
 800e622:	3020      	adds	r0, #32
 800e624:	f380 8809 	msr	PSP, r0
 800e628:	2002      	movs	r0, #2
 800e62a:	f380 8814 	msr	CONTROL, r0
 800e62e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e630:	46ae      	mov	lr, r5
 800e632:	b662      	cpsie	i
 800e634:	bd00      	pop	{pc}
 800e636:	46c0      	nop			; (mov r8, r8)

0800e638 <pxCurrentTCBConst2>:
 800e638:	20001998 	.word	0x20001998

0800e63c <pxPortInitialiseStack>:
{
 800e63c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e63e:	1f03      	subs	r3, r0, #4
 800e640:	2480      	movs	r4, #128	; 0x80
 800e642:	0464      	lsls	r4, r4, #17
 800e644:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e646:	3b04      	subs	r3, #4
 800e648:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e64a:	3b04      	subs	r3, #4
 800e64c:	4902      	ldr	r1, [pc, #8]	; (800e658 <pxPortInitialiseStack+0x1c>)
 800e64e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e650:	3b14      	subs	r3, #20
 800e652:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e654:	3840      	subs	r0, #64	; 0x40
}
 800e656:	bd10      	pop	{r4, pc}
 800e658:	0800e609 	.word	0x0800e609

0800e65c <SVC_Handler>:
}
 800e65c:	4770      	bx	lr
	...

0800e660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e660:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e662:	4b0f      	ldr	r3, [pc, #60]	; (800e6a0 <xPortStartScheduler+0x40>)
 800e664:	6819      	ldr	r1, [r3, #0]
 800e666:	22ff      	movs	r2, #255	; 0xff
 800e668:	0412      	lsls	r2, r2, #16
 800e66a:	430a      	orrs	r2, r1
 800e66c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e66e:	6819      	ldr	r1, [r3, #0]
 800e670:	22ff      	movs	r2, #255	; 0xff
 800e672:	0612      	lsls	r2, r2, #24
 800e674:	430a      	orrs	r2, r1
 800e676:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e678:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <xPortStartScheduler+0x44>)
 800e67a:	6818      	ldr	r0, [r3, #0]
 800e67c:	21fa      	movs	r1, #250	; 0xfa
 800e67e:	0089      	lsls	r1, r1, #2
 800e680:	f7f1 fd66 	bl	8000150 <__udivsi3>
 800e684:	3801      	subs	r0, #1
 800e686:	4b08      	ldr	r3, [pc, #32]	; (800e6a8 <xPortStartScheduler+0x48>)
 800e688:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e68a:	4b08      	ldr	r3, [pc, #32]	; (800e6ac <xPortStartScheduler+0x4c>)
 800e68c:	2207      	movs	r2, #7
 800e68e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800e690:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <xPortStartScheduler+0x50>)
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800e696:	f7ff ffc1 	bl	800e61c <vPortStartFirstTask>
	prvTaskExitError();
 800e69a:	f7ff ffb5 	bl	800e608 <prvTaskExitError>
 800e69e:	46c0      	nop			; (mov r8, r8)
 800e6a0:	e000ed20 	.word	0xe000ed20
 800e6a4:	200000e8 	.word	0x200000e8
 800e6a8:	e000e014 	.word	0xe000e014
 800e6ac:	e000e010 	.word	0xe000e010
 800e6b0:	200000fc 	.word	0x200000fc

0800e6b4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e6b4:	4b04      	ldr	r3, [pc, #16]	; (800e6c8 <vPortYield+0x14>)
 800e6b6:	2280      	movs	r2, #128	; 0x80
 800e6b8:	0552      	lsls	r2, r2, #21
 800e6ba:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800e6bc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e6c0:	f3bf 8f6f 	isb	sy
}
 800e6c4:	4770      	bx	lr
 800e6c6:	46c0      	nop			; (mov r8, r8)
 800e6c8:	e000ed04 	.word	0xe000ed04

0800e6cc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800e6cc:	b672      	cpsid	i
    uxCriticalNesting++;
 800e6ce:	4a04      	ldr	r2, [pc, #16]	; (800e6e0 <vPortEnterCritical+0x14>)
 800e6d0:	6813      	ldr	r3, [r2, #0]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800e6d6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e6da:	f3bf 8f6f 	isb	sy
}
 800e6de:	4770      	bx	lr
 800e6e0:	200000fc 	.word	0x200000fc

0800e6e4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e6e4:	4b06      	ldr	r3, [pc, #24]	; (800e700 <vPortExitCritical+0x1c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d101      	bne.n	800e6f0 <vPortExitCritical+0xc>
 800e6ec:	b672      	cpsid	i
 800e6ee:	e7fe      	b.n	800e6ee <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	4a03      	ldr	r2, [pc, #12]	; (800e700 <vPortExitCritical+0x1c>)
 800e6f4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d100      	bne.n	800e6fc <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800e6fa:	b662      	cpsie	i
}
 800e6fc:	4770      	bx	lr
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	200000fc 	.word	0x200000fc

0800e704 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800e704:	f3ef 8010 	mrs	r0, PRIMASK
 800e708:	b672      	cpsid	i
 800e70a:	4770      	bx	lr
}
 800e70c:	2000      	movs	r0, #0

0800e70e <vClearInterruptMaskFromISR>:
	__asm volatile(
 800e70e:	f380 8810 	msr	PRIMASK, r0
 800e712:	4770      	bx	lr

0800e714 <PendSV_Handler>:
	__asm volatile
 800e714:	f3ef 8009 	mrs	r0, PSP
 800e718:	4b0e      	ldr	r3, [pc, #56]	; (800e754 <pxCurrentTCBConst>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	3820      	subs	r0, #32
 800e71e:	6010      	str	r0, [r2, #0]
 800e720:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e722:	4644      	mov	r4, r8
 800e724:	464d      	mov	r5, r9
 800e726:	4656      	mov	r6, sl
 800e728:	465f      	mov	r7, fp
 800e72a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e72c:	b508      	push	{r3, lr}
 800e72e:	b672      	cpsid	i
 800e730:	f7ff fa36 	bl	800dba0 <vTaskSwitchContext>
 800e734:	b662      	cpsie	i
 800e736:	bc0c      	pop	{r2, r3}
 800e738:	6811      	ldr	r1, [r2, #0]
 800e73a:	6808      	ldr	r0, [r1, #0]
 800e73c:	3010      	adds	r0, #16
 800e73e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e740:	46a0      	mov	r8, r4
 800e742:	46a9      	mov	r9, r5
 800e744:	46b2      	mov	sl, r6
 800e746:	46bb      	mov	fp, r7
 800e748:	f380 8809 	msr	PSP, r0
 800e74c:	3820      	subs	r0, #32
 800e74e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e750:	4718      	bx	r3
 800e752:	46c0      	nop			; (mov r8, r8)

0800e754 <pxCurrentTCBConst>:
 800e754:	20001998 	.word	0x20001998

0800e758 <xPortSysTickHandler>:
{
 800e758:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e75a:	f7ff ffd3 	bl	800e704 <ulSetInterruptMaskFromISR>
 800e75e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800e760:	f7ff f86a 	bl	800d838 <xTaskIncrementTick>
 800e764:	2800      	cmp	r0, #0
 800e766:	d003      	beq.n	800e770 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e768:	4b03      	ldr	r3, [pc, #12]	; (800e778 <xPortSysTickHandler+0x20>)
 800e76a:	2280      	movs	r2, #128	; 0x80
 800e76c:	0552      	lsls	r2, r2, #21
 800e76e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e770:	0020      	movs	r0, r4
 800e772:	f7ff ffcc 	bl	800e70e <vClearInterruptMaskFromISR>
}
 800e776:	bd10      	pop	{r4, pc}
 800e778:	e000ed04 	.word	0xe000ed04

0800e77c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e77c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e77e:	4b12      	ldr	r3, [pc, #72]	; (800e7c8 <prvInsertBlockIntoFreeList+0x4c>)
 800e780:	001a      	movs	r2, r3
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4283      	cmp	r3, r0
 800e786:	d3fb      	bcc.n	800e780 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e788:	6851      	ldr	r1, [r2, #4]
 800e78a:	1854      	adds	r4, r2, r1
 800e78c:	42a0      	cmp	r0, r4
 800e78e:	d008      	beq.n	800e7a2 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e790:	6841      	ldr	r1, [r0, #4]
 800e792:	1844      	adds	r4, r0, r1
 800e794:	42a3      	cmp	r3, r4
 800e796:	d009      	beq.n	800e7ac <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e798:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e79a:	4290      	cmp	r0, r2
 800e79c:	d000      	beq.n	800e7a0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e79e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7a0:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7a2:	6840      	ldr	r0, [r0, #4]
 800e7a4:	1841      	adds	r1, r0, r1
 800e7a6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e7a8:	0010      	movs	r0, r2
 800e7aa:	e7f1      	b.n	800e790 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7ac:	4c07      	ldr	r4, [pc, #28]	; (800e7cc <prvInsertBlockIntoFreeList+0x50>)
 800e7ae:	6824      	ldr	r4, [r4, #0]
 800e7b0:	42a3      	cmp	r3, r4
 800e7b2:	d006      	beq.n	800e7c2 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	1859      	adds	r1, r3, r1
 800e7b8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7ba:	6813      	ldr	r3, [r2, #0]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6003      	str	r3, [r0, #0]
 800e7c0:	e7eb      	b.n	800e79a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7c2:	6004      	str	r4, [r0, #0]
 800e7c4:	e7e9      	b.n	800e79a <prvInsertBlockIntoFreeList+0x1e>
 800e7c6:	46c0      	nop			; (mov r8, r8)
 800e7c8:	20006540 	.word	0x20006540
 800e7cc:	20001af8 	.word	0x20001af8

0800e7d0 <pvPortMalloc>:
{
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800e7d4:	f7ff f81c 	bl	800d810 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e7d8:	4b3f      	ldr	r3, [pc, #252]	; (800e8d8 <pvPortMalloc+0x108>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d015      	beq.n	800e80c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7e0:	4b3e      	ldr	r3, [pc, #248]	; (800e8dc <pvPortMalloc+0x10c>)
 800e7e2:	681e      	ldr	r6, [r3, #0]
 800e7e4:	4234      	tst	r4, r6
 800e7e6:	d135      	bne.n	800e854 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 800e7e8:	2c00      	cmp	r4, #0
 800e7ea:	d03a      	beq.n	800e862 <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 800e7ec:	0023      	movs	r3, r4
 800e7ee:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7f0:	0762      	lsls	r2, r4, #29
 800e7f2:	d002      	beq.n	800e7fa <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7f4:	2207      	movs	r2, #7
 800e7f6:	4393      	bics	r3, r2
 800e7f8:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d031      	beq.n	800e862 <pvPortMalloc+0x92>
 800e7fe:	4a38      	ldr	r2, [pc, #224]	; (800e8e0 <pvPortMalloc+0x110>)
 800e800:	6815      	ldr	r5, [r2, #0]
 800e802:	429d      	cmp	r5, r3
 800e804:	d330      	bcc.n	800e868 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800e806:	4a37      	ldr	r2, [pc, #220]	; (800e8e4 <pvPortMalloc+0x114>)
 800e808:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e80a:	e032      	b.n	800e872 <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 800e80c:	4a36      	ldr	r2, [pc, #216]	; (800e8e8 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e80e:	0753      	lsls	r3, r2, #29
 800e810:	d01e      	beq.n	800e850 <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800e812:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800e814:	2307      	movs	r3, #7
 800e816:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800e818:	4b34      	ldr	r3, [pc, #208]	; (800e8ec <pvPortMalloc+0x11c>)
 800e81a:	18d3      	adds	r3, r2, r3
 800e81c:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800e81e:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e820:	4830      	ldr	r0, [pc, #192]	; (800e8e4 <pvPortMalloc+0x114>)
 800e822:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e824:	2100      	movs	r1, #0
 800e826:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e828:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800e82a:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800e82c:	2007      	movs	r0, #7
 800e82e:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800e830:	4829      	ldr	r0, [pc, #164]	; (800e8d8 <pvPortMalloc+0x108>)
 800e832:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e834:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e836:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800e838:	1a99      	subs	r1, r3, r2
 800e83a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e83c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e83e:	4b2c      	ldr	r3, [pc, #176]	; (800e8f0 <pvPortMalloc+0x120>)
 800e840:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e842:	4b27      	ldr	r3, [pc, #156]	; (800e8e0 <pvPortMalloc+0x110>)
 800e844:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e846:	4b25      	ldr	r3, [pc, #148]	; (800e8dc <pvPortMalloc+0x10c>)
 800e848:	2280      	movs	r2, #128	; 0x80
 800e84a:	0612      	lsls	r2, r2, #24
 800e84c:	601a      	str	r2, [r3, #0]
}
 800e84e:	e7c7      	b.n	800e7e0 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e850:	4b26      	ldr	r3, [pc, #152]	; (800e8ec <pvPortMalloc+0x11c>)
 800e852:	e7e5      	b.n	800e820 <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 800e854:	f7ff f884 	bl	800d960 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800e858:	f7fd fb36 	bl	800bec8 <vApplicationMallocFailedHook>
 800e85c:	2700      	movs	r7, #0
}
 800e85e:	0038      	movs	r0, r7
 800e860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 800e862:	f7ff f87d 	bl	800d960 <xTaskResumeAll>
		if( pvReturn == NULL )
 800e866:	e7f7      	b.n	800e858 <pvPortMalloc+0x88>
	( void ) xTaskResumeAll();
 800e868:	f7ff f87a 	bl	800d960 <xTaskResumeAll>
		if( pvReturn == NULL )
 800e86c:	e7f4      	b.n	800e858 <pvPortMalloc+0x88>
 800e86e:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e870:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e872:	6861      	ldr	r1, [r4, #4]
 800e874:	4299      	cmp	r1, r3
 800e876:	d202      	bcs.n	800e87e <pvPortMalloc+0xae>
 800e878:	6821      	ldr	r1, [r4, #0]
 800e87a:	2900      	cmp	r1, #0
 800e87c:	d1f7      	bne.n	800e86e <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800e87e:	4916      	ldr	r1, [pc, #88]	; (800e8d8 <pvPortMalloc+0x108>)
 800e880:	6809      	ldr	r1, [r1, #0]
 800e882:	42a1      	cmp	r1, r4
 800e884:	d00c      	beq.n	800e8a0 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e886:	6817      	ldr	r7, [r2, #0]
 800e888:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e88a:	6821      	ldr	r1, [r4, #0]
 800e88c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e88e:	6862      	ldr	r2, [r4, #4]
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	2a10      	cmp	r2, #16
 800e894:	d90b      	bls.n	800e8ae <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e896:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e898:	0741      	lsls	r1, r0, #29
 800e89a:	d004      	beq.n	800e8a6 <pvPortMalloc+0xd6>
 800e89c:	b672      	cpsid	i
 800e89e:	e7fe      	b.n	800e89e <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 800e8a0:	f7ff f85e 	bl	800d960 <xTaskResumeAll>
		if( pvReturn == NULL )
 800e8a4:	e7d8      	b.n	800e858 <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8a6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8a8:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800e8aa:	f7ff ff67 	bl	800e77c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8ae:	6862      	ldr	r2, [r4, #4]
 800e8b0:	1aad      	subs	r5, r5, r2
 800e8b2:	490b      	ldr	r1, [pc, #44]	; (800e8e0 <pvPortMalloc+0x110>)
 800e8b4:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8b6:	490e      	ldr	r1, [pc, #56]	; (800e8f0 <pvPortMalloc+0x120>)
 800e8b8:	6809      	ldr	r1, [r1, #0]
 800e8ba:	428d      	cmp	r5, r1
 800e8bc:	d201      	bcs.n	800e8c2 <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8be:	490c      	ldr	r1, [pc, #48]	; (800e8f0 <pvPortMalloc+0x120>)
 800e8c0:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8c2:	4316      	orrs	r6, r2
 800e8c4:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800e8ca:	f7ff f849 	bl	800d960 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8ce:	077b      	lsls	r3, r7, #29
 800e8d0:	d0c5      	beq.n	800e85e <pvPortMalloc+0x8e>
 800e8d2:	b672      	cpsid	i
 800e8d4:	e7fe      	b.n	800e8d4 <pvPortMalloc+0x104>
 800e8d6:	46c0      	nop			; (mov r8, r8)
 800e8d8:	20001af8 	.word	0x20001af8
 800e8dc:	20006534 	.word	0x20006534
 800e8e0:	20006538 	.word	0x20006538
 800e8e4:	20006540 	.word	0x20006540
 800e8e8:	20001afc 	.word	0x20001afc
 800e8ec:	00004a38 	.word	0x00004a38
 800e8f0:	2000653c 	.word	0x2000653c

0800e8f4 <vPortFree>:
{
 800e8f4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d020      	beq.n	800e93c <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8fa:	0003      	movs	r3, r0
 800e8fc:	3b08      	subs	r3, #8
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	4a0f      	ldr	r2, [pc, #60]	; (800e940 <vPortFree+0x4c>)
 800e902:	6812      	ldr	r2, [r2, #0]
 800e904:	421a      	tst	r2, r3
 800e906:	d101      	bne.n	800e90c <vPortFree+0x18>
 800e908:	b672      	cpsid	i
 800e90a:	e7fe      	b.n	800e90a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e90c:	0001      	movs	r1, r0
 800e90e:	3908      	subs	r1, #8
 800e910:	6809      	ldr	r1, [r1, #0]
 800e912:	2900      	cmp	r1, #0
 800e914:	d001      	beq.n	800e91a <vPortFree+0x26>
 800e916:	b672      	cpsid	i
 800e918:	e7fe      	b.n	800e918 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e91a:	3808      	subs	r0, #8
 800e91c:	0004      	movs	r4, r0
 800e91e:	4393      	bics	r3, r2
 800e920:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800e922:	f7fe ff75 	bl	800d810 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e926:	4a07      	ldr	r2, [pc, #28]	; (800e944 <vPortFree+0x50>)
 800e928:	6863      	ldr	r3, [r4, #4]
 800e92a:	6811      	ldr	r1, [r2, #0]
 800e92c:	468c      	mov	ip, r1
 800e92e:	4463      	add	r3, ip
 800e930:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e932:	0020      	movs	r0, r4
 800e934:	f7ff ff22 	bl	800e77c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800e938:	f7ff f812 	bl	800d960 <xTaskResumeAll>
}
 800e93c:	bd10      	pop	{r4, pc}
 800e93e:	46c0      	nop			; (mov r8, r8)
 800e940:	20006534 	.word	0x20006534
 800e944:	20006538 	.word	0x20006538

0800e948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e948:	b510      	push	{r4, lr}
 800e94a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800e94c:	f001 fd74 	bl	8010438 <HAL_RCC_GetHCLKFreq>
 800e950:	21fa      	movs	r1, #250	; 0xfa
 800e952:	0089      	lsls	r1, r1, #2
 800e954:	f7f1 fbfc 	bl	8000150 <__udivsi3>
 800e958:	f000 f888 	bl	800ea6c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800e95c:	2001      	movs	r0, #1
 800e95e:	2200      	movs	r2, #0
 800e960:	0021      	movs	r1, r4
 800e962:	4240      	negs	r0, r0
 800e964:	f000 f83c 	bl	800e9e0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800e968:	2000      	movs	r0, #0
 800e96a:	bd10      	pop	{r4, pc}

0800e96c <HAL_Init>:
{
 800e96c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e96e:	4a06      	ldr	r2, [pc, #24]	; (800e988 <HAL_Init+0x1c>)
 800e970:	6813      	ldr	r3, [r2, #0]
 800e972:	2110      	movs	r1, #16
 800e974:	430b      	orrs	r3, r1
 800e976:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800e978:	2000      	movs	r0, #0
 800e97a:	f7ff ffe5 	bl	800e948 <HAL_InitTick>
  HAL_MspInit();
 800e97e:	f001 f8ff 	bl	800fb80 <HAL_MspInit>
}
 800e982:	2000      	movs	r0, #0
 800e984:	bd10      	pop	{r4, pc}
 800e986:	46c0      	nop			; (mov r8, r8)
 800e988:	40022000 	.word	0x40022000

0800e98c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800e98c:	4a02      	ldr	r2, [pc, #8]	; (800e998 <HAL_IncTick+0xc>)
 800e98e:	6813      	ldr	r3, [r2, #0]
 800e990:	3301      	adds	r3, #1
 800e992:	6013      	str	r3, [r2, #0]
}
 800e994:	4770      	bx	lr
 800e996:	46c0      	nop			; (mov r8, r8)
 800e998:	20006548 	.word	0x20006548

0800e99c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e99c:	4b01      	ldr	r3, [pc, #4]	; (800e9a4 <HAL_GetTick+0x8>)
 800e99e:	6818      	ldr	r0, [r3, #0]
}
 800e9a0:	4770      	bx	lr
 800e9a2:	46c0      	nop			; (mov r8, r8)
 800e9a4:	20006548 	.word	0x20006548

0800e9a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800e9a8:	b510      	push	{r4, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800e9ae:	f7ff fff5 	bl	800e99c <HAL_GetTick>
 800e9b2:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800e9b4:	f7ff fff2 	bl	800e99c <HAL_GetTick>
 800e9b8:	9b01      	ldr	r3, [sp, #4]
 800e9ba:	1b00      	subs	r0, r0, r4
 800e9bc:	4298      	cmp	r0, r3
 800e9be:	d3f9      	bcc.n	800e9b4 <HAL_Delay+0xc>
  {
  }
}
 800e9c0:	b002      	add	sp, #8
 800e9c2:	bd10      	pop	{r4, pc}

0800e9c4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800e9c4:	4b01      	ldr	r3, [pc, #4]	; (800e9cc <HAL_GetREVID+0x8>)
 800e9c6:	6818      	ldr	r0, [r3, #0]
 800e9c8:	0c00      	lsrs	r0, r0, #16
}
 800e9ca:	4770      	bx	lr
 800e9cc:	40015800 	.word	0x40015800

0800e9d0 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800e9d0:	4b02      	ldr	r3, [pc, #8]	; (800e9dc <HAL_GetDEVID+0xc>)
 800e9d2:	6818      	ldr	r0, [r3, #0]
 800e9d4:	0500      	lsls	r0, r0, #20
 800e9d6:	0d00      	lsrs	r0, r0, #20
}
 800e9d8:	4770      	bx	lr
 800e9da:	46c0      	nop			; (mov r8, r8)
 800e9dc:	40015800 	.word	0x40015800

0800e9e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e9e0:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	db14      	blt.n	800ea10 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e9e6:	0884      	lsrs	r4, r0, #2
 800e9e8:	00a4      	lsls	r4, r4, #2
 800e9ea:	4b14      	ldr	r3, [pc, #80]	; (800ea3c <HAL_NVIC_SetPriority+0x5c>)
 800e9ec:	469c      	mov	ip, r3
 800e9ee:	4464      	add	r4, ip
 800e9f0:	26c0      	movs	r6, #192	; 0xc0
 800e9f2:	00b6      	lsls	r6, r6, #2
 800e9f4:	59a5      	ldr	r5, [r4, r6]
 800e9f6:	2203      	movs	r2, #3
 800e9f8:	4010      	ands	r0, r2
 800e9fa:	00c0      	lsls	r0, r0, #3
 800e9fc:	23ff      	movs	r3, #255	; 0xff
 800e9fe:	001a      	movs	r2, r3
 800ea00:	4082      	lsls	r2, r0
 800ea02:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ea04:	0189      	lsls	r1, r1, #6
 800ea06:	400b      	ands	r3, r1
 800ea08:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea0a:	432b      	orrs	r3, r5
 800ea0c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea10:	230f      	movs	r3, #15
 800ea12:	4003      	ands	r3, r0
 800ea14:	3b08      	subs	r3, #8
 800ea16:	089b      	lsrs	r3, r3, #2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4a09      	ldr	r2, [pc, #36]	; (800ea40 <HAL_NVIC_SetPriority+0x60>)
 800ea1c:	4694      	mov	ip, r2
 800ea1e:	4463      	add	r3, ip
 800ea20:	69dd      	ldr	r5, [r3, #28]
 800ea22:	2403      	movs	r4, #3
 800ea24:	4020      	ands	r0, r4
 800ea26:	00c0      	lsls	r0, r0, #3
 800ea28:	22ff      	movs	r2, #255	; 0xff
 800ea2a:	0014      	movs	r4, r2
 800ea2c:	4084      	lsls	r4, r0
 800ea2e:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ea30:	0189      	lsls	r1, r1, #6
 800ea32:	400a      	ands	r2, r1
 800ea34:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea36:	432a      	orrs	r2, r5
 800ea38:	61da      	str	r2, [r3, #28]
 800ea3a:	e7e8      	b.n	800ea0e <HAL_NVIC_SetPriority+0x2e>
 800ea3c:	e000e100 	.word	0xe000e100
 800ea40:	e000ed00 	.word	0xe000ed00

0800ea44 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ea44:	231f      	movs	r3, #31
 800ea46:	4018      	ands	r0, r3
 800ea48:	3b1e      	subs	r3, #30
 800ea4a:	4083      	lsls	r3, r0
 800ea4c:	4a01      	ldr	r2, [pc, #4]	; (800ea54 <HAL_NVIC_EnableIRQ+0x10>)
 800ea4e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ea50:	4770      	bx	lr
 800ea52:	46c0      	nop			; (mov r8, r8)
 800ea54:	e000e100 	.word	0xe000e100

0800ea58 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ea58:	231f      	movs	r3, #31
 800ea5a:	4018      	ands	r0, r3
 800ea5c:	3b1e      	subs	r3, #30
 800ea5e:	4083      	lsls	r3, r0
 800ea60:	4901      	ldr	r1, [pc, #4]	; (800ea68 <HAL_NVIC_DisableIRQ+0x10>)
 800ea62:	2280      	movs	r2, #128	; 0x80
 800ea64:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ea66:	4770      	bx	lr
 800ea68:	e000e100 	.word	0xe000e100

0800ea6c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800ea6c:	3801      	subs	r0, #1
 800ea6e:	2380      	movs	r3, #128	; 0x80
 800ea70:	045b      	lsls	r3, r3, #17
 800ea72:	4298      	cmp	r0, r3
 800ea74:	d20f      	bcs.n	800ea96 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ea76:	4a09      	ldr	r2, [pc, #36]	; (800ea9c <HAL_SYSTICK_Config+0x30>)
 800ea78:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea7a:	4809      	ldr	r0, [pc, #36]	; (800eaa0 <HAL_SYSTICK_Config+0x34>)
 800ea7c:	6a03      	ldr	r3, [r0, #32]
 800ea7e:	021b      	lsls	r3, r3, #8
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	21c0      	movs	r1, #192	; 0xc0
 800ea84:	0609      	lsls	r1, r1, #24
 800ea86:	430b      	orrs	r3, r1
 800ea88:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ea8e:	3307      	adds	r3, #7
 800ea90:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ea92:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ea94:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800ea96:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800ea98:	e7fc      	b.n	800ea94 <HAL_SYSTICK_Config+0x28>
 800ea9a:	46c0      	nop			; (mov r8, r8)
 800ea9c:	e000e010 	.word	0xe000e010
 800eaa0:	e000ed00 	.word	0xe000ed00

0800eaa4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800eaa4:	2804      	cmp	r0, #4
 800eaa6:	d005      	beq.n	800eab4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800eaa8:	4a05      	ldr	r2, [pc, #20]	; (800eac0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800eaaa:	6813      	ldr	r3, [r2, #0]
 800eaac:	2104      	movs	r1, #4
 800eaae:	438b      	bics	r3, r1
 800eab0:	6013      	str	r3, [r2, #0]
  }
}
 800eab2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800eab4:	4a02      	ldr	r2, [pc, #8]	; (800eac0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800eab6:	6813      	ldr	r3, [r2, #0]
 800eab8:	2104      	movs	r1, #4
 800eaba:	430b      	orrs	r3, r1
 800eabc:	6013      	str	r3, [r2, #0]
 800eabe:	e7f8      	b.n	800eab2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800eac0:	e000e010 	.word	0xe000e010

0800eac4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800eac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac6:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800eac8:	0892      	lsrs	r2, r2, #2
 800eaca:	2d03      	cmp	r5, #3
 800eacc:	d927      	bls.n	800eb1e <CRC_Handle_8+0x5a>
 800eace:	000c      	movs	r4, r1
 800ead0:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800ead2:	7823      	ldrb	r3, [r4, #0]
 800ead4:	061b      	lsls	r3, r3, #24
 800ead6:	7866      	ldrb	r6, [r4, #1]
 800ead8:	0436      	lsls	r6, r6, #16
 800eada:	4333      	orrs	r3, r6
 800eadc:	78e6      	ldrb	r6, [r4, #3]
 800eade:	4333      	orrs	r3, r6
 800eae0:	78a6      	ldrb	r6, [r4, #2]
 800eae2:	0236      	lsls	r6, r6, #8
 800eae4:	4333      	orrs	r3, r6
 800eae6:	6806      	ldr	r6, [r0, #0]
 800eae8:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800eaea:	3701      	adds	r7, #1
 800eaec:	3404      	adds	r4, #4
 800eaee:	4297      	cmp	r7, r2
 800eaf0:	d3ef      	bcc.n	800ead2 <CRC_Handle_8+0xe>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	2d03      	cmp	r5, #3
 800eaf6:	d900      	bls.n	800eafa <CRC_Handle_8+0x36>
 800eaf8:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800eafa:	2203      	movs	r2, #3
 800eafc:	0014      	movs	r4, r2
 800eafe:	402c      	ands	r4, r5
 800eb00:	422a      	tst	r2, r5
 800eb02:	d012      	beq.n	800eb2a <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 800eb04:	2c01      	cmp	r4, #1
 800eb06:	d00c      	beq.n	800eb22 <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800eb08:	2c02      	cmp	r4, #2
 800eb0a:	d111      	bne.n	800eb30 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	5cca      	ldrb	r2, [r1, r3]
 800eb10:	0212      	lsls	r2, r2, #8
 800eb12:	18cb      	adds	r3, r1, r3
 800eb14:	785b      	ldrb	r3, [r3, #1]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	6802      	ldr	r2, [r0, #0]
 800eb1a:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 800eb1c:	e005      	b.n	800eb2a <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 800eb1e:	2300      	movs	r3, #0
 800eb20:	e7eb      	b.n	800eafa <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	5c5b      	ldrb	r3, [r3, r1]
 800eb26:	6802      	ldr	r2, [r0, #0]
 800eb28:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800eb2a:	6803      	ldr	r3, [r0, #0]
 800eb2c:	6818      	ldr	r0, [r3, #0]
}
 800eb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 800eb30:	2c03      	cmp	r4, #3
 800eb32:	d1fa      	bne.n	800eb2a <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	5ccc      	ldrb	r4, [r1, r3]
 800eb38:	0224      	lsls	r4, r4, #8
 800eb3a:	18cb      	adds	r3, r1, r3
 800eb3c:	785a      	ldrb	r2, [r3, #1]
 800eb3e:	4322      	orrs	r2, r4
 800eb40:	6801      	ldr	r1, [r0, #0]
 800eb42:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800eb44:	789b      	ldrb	r3, [r3, #2]
 800eb46:	6802      	ldr	r2, [r0, #0]
 800eb48:	7013      	strb	r3, [r2, #0]
 800eb4a:	e7ee      	b.n	800eb2a <CRC_Handle_8+0x66>

0800eb4c <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800eb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb4e:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800eb50:	0852      	lsrs	r2, r2, #1
 800eb52:	2e01      	cmp	r6, #1
 800eb54:	d918      	bls.n	800eb88 <CRC_Handle_16+0x3c>
 800eb56:	000c      	movs	r4, r1
 800eb58:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800eb5a:	8823      	ldrh	r3, [r4, #0]
 800eb5c:	041b      	lsls	r3, r3, #16
 800eb5e:	8867      	ldrh	r7, [r4, #2]
 800eb60:	433b      	orrs	r3, r7
 800eb62:	6807      	ldr	r7, [r0, #0]
 800eb64:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800eb66:	3501      	adds	r5, #1
 800eb68:	3404      	adds	r4, #4
 800eb6a:	4295      	cmp	r5, r2
 800eb6c:	d3f5      	bcc.n	800eb5a <CRC_Handle_16+0xe>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	2e01      	cmp	r6, #1
 800eb72:	d900      	bls.n	800eb76 <CRC_Handle_16+0x2a>
 800eb74:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 800eb76:	07f2      	lsls	r2, r6, #31
 800eb78:	d503      	bpl.n	800eb82 <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	5a5b      	ldrh	r3, [r3, r1]
 800eb7e:	6802      	ldr	r2, [r0, #0]
 800eb80:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800eb82:	6803      	ldr	r3, [r0, #0]
 800eb84:	6818      	ldr	r0, [r3, #0]
}
 800eb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e7f4      	b.n	800eb76 <CRC_Handle_16+0x2a>

0800eb8c <HAL_CRC_Init>:
{
 800eb8c:	b510      	push	{r4, lr}
 800eb8e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800eb90:	d029      	beq.n	800ebe6 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800eb92:	7f43      	ldrb	r3, [r0, #29]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d01e      	beq.n	800ebd6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800eb98:	2302      	movs	r3, #2
 800eb9a:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800eb9c:	0020      	movs	r0, r4
 800eb9e:	f000 f8ab 	bl	800ecf8 <HAL_CRCEx_Init>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d121      	bne.n	800ebea <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800eba6:	7963      	ldrb	r3, [r4, #5]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d118      	bne.n	800ebde <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	4252      	negs	r2, r2
 800ebb2:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ebb4:	6822      	ldr	r2, [r4, #0]
 800ebb6:	6893      	ldr	r3, [r2, #8]
 800ebb8:	2160      	movs	r1, #96	; 0x60
 800ebba:	438b      	bics	r3, r1
 800ebbc:	6961      	ldr	r1, [r4, #20]
 800ebbe:	430b      	orrs	r3, r1
 800ebc0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ebc2:	6822      	ldr	r2, [r4, #0]
 800ebc4:	6893      	ldr	r3, [r2, #8]
 800ebc6:	2180      	movs	r1, #128	; 0x80
 800ebc8:	438b      	bics	r3, r1
 800ebca:	69a1      	ldr	r1, [r4, #24]
 800ebcc:	430b      	orrs	r3, r1
 800ebce:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	7763      	strb	r3, [r4, #29]
}
 800ebd4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ebd6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ebd8:	f7fc ff20 	bl	800ba1c <HAL_CRC_MspInit>
 800ebdc:	e7dc      	b.n	800eb98 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	6922      	ldr	r2, [r4, #16]
 800ebe2:	611a      	str	r2, [r3, #16]
 800ebe4:	e7e6      	b.n	800ebb4 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	e7f4      	b.n	800ebd4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800ebea:	2001      	movs	r0, #1
 800ebec:	e7f2      	b.n	800ebd4 <HAL_CRC_Init+0x48>

0800ebee <HAL_CRC_Accumulate>:
{
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ebf2:	7f03      	ldrb	r3, [r0, #28]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d023      	beq.n	800ec40 <HAL_CRC_Accumulate+0x52>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800ec00:	6a03      	ldr	r3, [r0, #32]
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d019      	beq.n	800ec3a <HAL_CRC_Accumulate+0x4c>
 800ec06:	2b03      	cmp	r3, #3
 800ec08:	d007      	beq.n	800ec1a <HAL_CRC_Accumulate+0x2c>
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d012      	beq.n	800ec34 <HAL_CRC_Accumulate+0x46>
 800ec0e:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800ec10:	2301      	movs	r3, #1
 800ec12:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ec14:	2300      	movs	r3, #0
 800ec16:	7723      	strb	r3, [r4, #28]
}
 800ec18:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800ec1a:	2a00      	cmp	r2, #0
 800ec1c:	d007      	beq.n	800ec2e <HAL_CRC_Accumulate+0x40>
 800ec1e:	000b      	movs	r3, r1
 800ec20:	0092      	lsls	r2, r2, #2
 800ec22:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ec24:	6822      	ldr	r2, [r4, #0]
 800ec26:	cb01      	ldmia	r3!, {r0}
 800ec28:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800ec2a:	428b      	cmp	r3, r1
 800ec2c:	d1fa      	bne.n	800ec24 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	6818      	ldr	r0, [r3, #0]
      break;
 800ec32:	e7ed      	b.n	800ec10 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ec34:	f7ff ff46 	bl	800eac4 <CRC_Handle_8>
      break;
 800ec38:	e7ea      	b.n	800ec10 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ec3a:	f7ff ff87 	bl	800eb4c <CRC_Handle_16>
      break;
 800ec3e:	e7e7      	b.n	800ec10 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800ec40:	2002      	movs	r0, #2
 800ec42:	e7e9      	b.n	800ec18 <HAL_CRC_Accumulate+0x2a>

0800ec44 <HAL_CRC_Calculate>:
{
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ec48:	7f03      	ldrb	r3, [r0, #28]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d029      	beq.n	800eca2 <HAL_CRC_Calculate+0x5e>
 800ec4e:	2501      	movs	r5, #1
 800ec50:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ec52:	2302      	movs	r3, #2
 800ec54:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ec56:	6800      	ldr	r0, [r0, #0]
 800ec58:	6883      	ldr	r3, [r0, #8]
 800ec5a:	432b      	orrs	r3, r5
 800ec5c:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800ec5e:	6a23      	ldr	r3, [r4, #32]
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d01a      	beq.n	800ec9a <HAL_CRC_Calculate+0x56>
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d007      	beq.n	800ec78 <HAL_CRC_Calculate+0x34>
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d012      	beq.n	800ec92 <HAL_CRC_Calculate+0x4e>
 800ec6c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800ec6e:	2301      	movs	r3, #1
 800ec70:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ec72:	2300      	movs	r3, #0
 800ec74:	7723      	strb	r3, [r4, #28]
}
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	d007      	beq.n	800ec8c <HAL_CRC_Calculate+0x48>
 800ec7c:	000b      	movs	r3, r1
 800ec7e:	0092      	lsls	r2, r2, #2
 800ec80:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ec82:	6822      	ldr	r2, [r4, #0]
 800ec84:	cb01      	ldmia	r3!, {r0}
 800ec86:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800ec88:	428b      	cmp	r3, r1
 800ec8a:	d1fa      	bne.n	800ec82 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	6818      	ldr	r0, [r3, #0]
      break;
 800ec90:	e7ed      	b.n	800ec6e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ec92:	0020      	movs	r0, r4
 800ec94:	f7ff ff16 	bl	800eac4 <CRC_Handle_8>
      break;
 800ec98:	e7e9      	b.n	800ec6e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ec9a:	0020      	movs	r0, r4
 800ec9c:	f7ff ff56 	bl	800eb4c <CRC_Handle_16>
      break;
 800eca0:	e7e5      	b.n	800ec6e <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800eca2:	2002      	movs	r0, #2
 800eca4:	e7e7      	b.n	800ec76 <HAL_CRC_Calculate+0x32>

0800eca6 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800eca6:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800eca8:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800ecaa:	2501      	movs	r5, #1
 800ecac:	002c      	movs	r4, r5
 800ecae:	409c      	lsls	r4, r3
 800ecb0:	4221      	tst	r1, r4
 800ecb2:	d105      	bne.n	800ecc0 <HAL_CRCEx_Polynomial_Set+0x1a>
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	d2f9      	bcs.n	800ecac <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800ecb8:	2a10      	cmp	r2, #16
 800ecba:	d103      	bne.n	800ecc4 <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 800ecbc:	2001      	movs	r0, #1
 800ecbe:	e00e      	b.n	800ecde <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800ecc0:	2a10      	cmp	r2, #16
 800ecc2:	d011      	beq.n	800ece8 <HAL_CRCEx_Polynomial_Set+0x42>
 800ecc4:	2a18      	cmp	r2, #24
 800ecc6:	d00b      	beq.n	800ece0 <HAL_CRCEx_Polynomial_Set+0x3a>
 800ecc8:	2a08      	cmp	r2, #8
 800ecca:	d011      	beq.n	800ecf0 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800eccc:	6803      	ldr	r3, [r0, #0]
 800ecce:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800ecd0:	6801      	ldr	r1, [r0, #0]
 800ecd2:	688b      	ldr	r3, [r1, #8]
 800ecd4:	2018      	movs	r0, #24
 800ecd6:	4383      	bics	r3, r0
 800ecd8:	431a      	orrs	r2, r3
 800ecda:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800ecdc:	2000      	movs	r0, #0
}
 800ecde:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800ece0:	2b06      	cmp	r3, #6
 800ece2:	d9f3      	bls.n	800eccc <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800ece4:	2001      	movs	r0, #1
 800ece6:	e7fa      	b.n	800ecde <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800ece8:	2b07      	cmp	r3, #7
 800ecea:	d9ef      	bls.n	800eccc <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800ecec:	2001      	movs	r0, #1
 800ecee:	e7f6      	b.n	800ecde <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 800ecf0:	2b0f      	cmp	r3, #15
 800ecf2:	d9eb      	bls.n	800eccc <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	e7f2      	b.n	800ecde <HAL_CRCEx_Polynomial_Set+0x38>

0800ecf8 <HAL_CRCEx_Init>:
{
 800ecf8:	b510      	push	{r4, lr}
 800ecfa:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ecfc:	7900      	ldrb	r0, [r0, #4]
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d108      	bne.n	800ed14 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	4908      	ldr	r1, [pc, #32]	; (800ed28 <HAL_CRCEx_Init+0x30>)
 800ed06:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	6893      	ldr	r3, [r2, #8]
 800ed0c:	2118      	movs	r1, #24
 800ed0e:	438b      	bics	r3, r1
 800ed10:	6093      	str	r3, [r2, #8]
}
 800ed12:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ed14:	68da      	ldr	r2, [r3, #12]
 800ed16:	6899      	ldr	r1, [r3, #8]
 800ed18:	0018      	movs	r0, r3
 800ed1a:	f7ff ffc4 	bl	800eca6 <HAL_CRCEx_Polynomial_Set>
 800ed1e:	1e43      	subs	r3, r0, #1
 800ed20:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800ed22:	b2c0      	uxtb	r0, r0
 800ed24:	e7f5      	b.n	800ed12 <HAL_CRCEx_Init+0x1a>
 800ed26:	46c0      	nop			; (mov r8, r8)
 800ed28:	04c11db7 	.word	0x04c11db7

0800ed2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800ed2c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d022      	beq.n	800ed78 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800ed32:	2321      	movs	r3, #33	; 0x21
 800ed34:	5cc3      	ldrb	r3, [r0, r3]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800ed3a:	3320      	adds	r3, #32
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ed40:	2121      	movs	r1, #33	; 0x21
 800ed42:	2302      	movs	r3, #2
 800ed44:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ed46:	6804      	ldr	r4, [r0, #0]
 800ed48:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ed4a:	4a0c      	ldr	r2, [pc, #48]	; (800ed7c <HAL_DMA_Init+0x50>)
 800ed4c:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ed4e:	6843      	ldr	r3, [r0, #4]
 800ed50:	6885      	ldr	r5, [r0, #8]
 800ed52:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed54:	68c5      	ldr	r5, [r0, #12]
 800ed56:	432b      	orrs	r3, r5
 800ed58:	6905      	ldr	r5, [r0, #16]
 800ed5a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed5c:	6945      	ldr	r5, [r0, #20]
 800ed5e:	432b      	orrs	r3, r5
 800ed60:	6985      	ldr	r5, [r0, #24]
 800ed62:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800ed64:	69c5      	ldr	r5, [r0, #28]
 800ed66:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800ed68:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800ed6a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ed70:	3301      	adds	r3, #1
 800ed72:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800ed74:	2000      	movs	r0, #0
}  
 800ed76:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ed78:	2001      	movs	r0, #1
 800ed7a:	e7fc      	b.n	800ed76 <HAL_DMA_Init+0x4a>
 800ed7c:	ffffc00f 	.word	0xffffc00f

0800ed80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ed80:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800ed82:	2420      	movs	r4, #32
 800ed84:	5d04      	ldrb	r4, [r0, r4]
 800ed86:	2c01      	cmp	r4, #1
 800ed88:	d02d      	beq.n	800ede6 <HAL_DMA_Start_IT+0x66>
 800ed8a:	2601      	movs	r6, #1
 800ed8c:	2420      	movs	r4, #32
 800ed8e:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800ed90:	3401      	adds	r4, #1
 800ed92:	2502      	movs	r5, #2
 800ed94:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ed96:	6805      	ldr	r5, [r0, #0]
 800ed98:	682c      	ldr	r4, [r5, #0]
 800ed9a:	43b4      	bics	r4, r6
 800ed9c:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ed9e:	6804      	ldr	r4, [r0, #0]
 800eda0:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eda2:	6843      	ldr	r3, [r0, #4]
 800eda4:	2b10      	cmp	r3, #16
 800eda6:	d019      	beq.n	800eddc <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800eda8:	6803      	ldr	r3, [r0, #0]
 800edaa:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800edac:	6803      	ldr	r3, [r0, #0]
 800edae:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800edb0:	6802      	ldr	r2, [r0, #0]
 800edb2:	6813      	ldr	r3, [r2, #0]
 800edb4:	2102      	movs	r1, #2
 800edb6:	430b      	orrs	r3, r1
 800edb8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800edba:	6802      	ldr	r2, [r0, #0]
 800edbc:	6813      	ldr	r3, [r2, #0]
 800edbe:	3102      	adds	r1, #2
 800edc0:	430b      	orrs	r3, r1
 800edc2:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800edc4:	6802      	ldr	r2, [r0, #0]
 800edc6:	6813      	ldr	r3, [r2, #0]
 800edc8:	3104      	adds	r1, #4
 800edca:	430b      	orrs	r3, r1
 800edcc:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 800edce:	6802      	ldr	r2, [r0, #0]
 800edd0:	6813      	ldr	r3, [r2, #0]
 800edd2:	3907      	subs	r1, #7
 800edd4:	430b      	orrs	r3, r1
 800edd6:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 800edd8:	2000      	movs	r0, #0
} 
 800edda:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800eddc:	6803      	ldr	r3, [r0, #0]
 800edde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800ede0:	6803      	ldr	r3, [r0, #0]
 800ede2:	60d9      	str	r1, [r3, #12]
 800ede4:	e7e4      	b.n	800edb0 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 800ede6:	2002      	movs	r0, #2
 800ede8:	e7f7      	b.n	800edda <HAL_DMA_Start_IT+0x5a>

0800edea <HAL_DMA_Abort>:
{
 800edea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edec:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800edee:	6802      	ldr	r2, [r0, #0]
 800edf0:	6813      	ldr	r3, [r2, #0]
 800edf2:	2101      	movs	r1, #1
 800edf4:	438b      	bics	r3, r1
 800edf6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800edf8:	f7ff fdd0 	bl	800e99c <HAL_GetTick>
 800edfc:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800edfe:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ee00:	27fa      	movs	r7, #250	; 0xfa
 800ee02:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	421e      	tst	r6, r3
 800ee0a:	d00f      	beq.n	800ee2c <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ee0c:	f7ff fdc6 	bl	800e99c <HAL_GetTick>
 800ee10:	1b40      	subs	r0, r0, r5
 800ee12:	42b8      	cmp	r0, r7
 800ee14:	d9f6      	bls.n	800ee04 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800ee16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee18:	2220      	movs	r2, #32
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ee1e:	2321      	movs	r3, #33	; 0x21
 800ee20:	2103      	movs	r1, #3
 800ee22:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800ee24:	2300      	movs	r3, #0
 800ee26:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800ee28:	2003      	movs	r0, #3
 800ee2a:	e006      	b.n	800ee3a <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 800ee2c:	2321      	movs	r3, #33	; 0x21
 800ee2e:	2201      	movs	r2, #1
 800ee30:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800ee32:	3b01      	subs	r3, #1
 800ee34:	2200      	movs	r2, #0
 800ee36:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 800ee38:	2000      	movs	r0, #0
}
 800ee3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee3c <HAL_DMA_IRQHandler>:
{        
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ee40:	6803      	ldr	r3, [r0, #0]
 800ee42:	4ab1      	ldr	r2, [pc, #708]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d97e      	bls.n	800ef46 <HAL_DMA_IRQHandler+0x10a>
 800ee48:	4ab0      	ldr	r2, [pc, #704]	; (800f10c <HAL_DMA_IRQHandler+0x2d0>)
 800ee4a:	6811      	ldr	r1, [r2, #0]
 800ee4c:	4ab0      	ldr	r2, [pc, #704]	; (800f110 <HAL_DMA_IRQHandler+0x2d4>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d026      	beq.n	800eea0 <HAL_DMA_IRQHandler+0x64>
 800ee52:	4ab0      	ldr	r2, [pc, #704]	; (800f114 <HAL_DMA_IRQHandler+0x2d8>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d05e      	beq.n	800ef16 <HAL_DMA_IRQHandler+0xda>
 800ee58:	4aaf      	ldr	r2, [pc, #700]	; (800f118 <HAL_DMA_IRQHandler+0x2dc>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d05d      	beq.n	800ef1a <HAL_DMA_IRQHandler+0xde>
 800ee5e:	4aaf      	ldr	r2, [pc, #700]	; (800f11c <HAL_DMA_IRQHandler+0x2e0>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d05d      	beq.n	800ef20 <HAL_DMA_IRQHandler+0xe4>
 800ee64:	4aae      	ldr	r2, [pc, #696]	; (800f120 <HAL_DMA_IRQHandler+0x2e4>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d05d      	beq.n	800ef26 <HAL_DMA_IRQHandler+0xea>
 800ee6a:	4aae      	ldr	r2, [pc, #696]	; (800f124 <HAL_DMA_IRQHandler+0x2e8>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d05d      	beq.n	800ef2c <HAL_DMA_IRQHandler+0xf0>
 800ee70:	4aa5      	ldr	r2, [pc, #660]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d05d      	beq.n	800ef32 <HAL_DMA_IRQHandler+0xf6>
 800ee76:	4aac      	ldr	r2, [pc, #688]	; (800f128 <HAL_DMA_IRQHandler+0x2ec>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d05d      	beq.n	800ef38 <HAL_DMA_IRQHandler+0xfc>
 800ee7c:	4aab      	ldr	r2, [pc, #684]	; (800f12c <HAL_DMA_IRQHandler+0x2f0>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d05c      	beq.n	800ef3c <HAL_DMA_IRQHandler+0x100>
 800ee82:	4aab      	ldr	r2, [pc, #684]	; (800f130 <HAL_DMA_IRQHandler+0x2f4>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d05b      	beq.n	800ef40 <HAL_DMA_IRQHandler+0x104>
 800ee88:	4aaa      	ldr	r2, [pc, #680]	; (800f134 <HAL_DMA_IRQHandler+0x2f8>)
 800ee8a:	189a      	adds	r2, r3, r2
 800ee8c:	4250      	negs	r0, r2
 800ee8e:	4142      	adcs	r2, r0
 800ee90:	4252      	negs	r2, r2
 800ee92:	48a9      	ldr	r0, [pc, #676]	; (800f138 <HAL_DMA_IRQHandler+0x2fc>)
 800ee94:	4002      	ands	r2, r0
 800ee96:	2080      	movs	r0, #128	; 0x80
 800ee98:	0300      	lsls	r0, r0, #12
 800ee9a:	4684      	mov	ip, r0
 800ee9c:	4462      	add	r2, ip
 800ee9e:	e000      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800eea0:	2208      	movs	r2, #8
 800eea2:	420a      	tst	r2, r1
 800eea4:	d001      	beq.n	800eeaa <HAL_DMA_IRQHandler+0x6e>
 800eea6:	f000 fbfb 	bl	800f6a0 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800eeaa:	4a98      	ldr	r2, [pc, #608]	; (800f10c <HAL_DMA_IRQHandler+0x2d0>)
 800eeac:	6811      	ldr	r1, [r2, #0]
 800eeae:	4a98      	ldr	r2, [pc, #608]	; (800f110 <HAL_DMA_IRQHandler+0x2d4>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d100      	bne.n	800eeb6 <HAL_DMA_IRQHandler+0x7a>
 800eeb4:	e18d      	b.n	800f1d2 <HAL_DMA_IRQHandler+0x396>
 800eeb6:	4a97      	ldr	r2, [pc, #604]	; (800f114 <HAL_DMA_IRQHandler+0x2d8>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d100      	bne.n	800eebe <HAL_DMA_IRQHandler+0x82>
 800eebc:	e18e      	b.n	800f1dc <HAL_DMA_IRQHandler+0x3a0>
 800eebe:	4a96      	ldr	r2, [pc, #600]	; (800f118 <HAL_DMA_IRQHandler+0x2dc>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d100      	bne.n	800eec6 <HAL_DMA_IRQHandler+0x8a>
 800eec4:	e18c      	b.n	800f1e0 <HAL_DMA_IRQHandler+0x3a4>
 800eec6:	4a95      	ldr	r2, [pc, #596]	; (800f11c <HAL_DMA_IRQHandler+0x2e0>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d100      	bne.n	800eece <HAL_DMA_IRQHandler+0x92>
 800eecc:	e18b      	b.n	800f1e6 <HAL_DMA_IRQHandler+0x3aa>
 800eece:	4a94      	ldr	r2, [pc, #592]	; (800f120 <HAL_DMA_IRQHandler+0x2e4>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d100      	bne.n	800eed6 <HAL_DMA_IRQHandler+0x9a>
 800eed4:	e18a      	b.n	800f1ec <HAL_DMA_IRQHandler+0x3b0>
 800eed6:	4a93      	ldr	r2, [pc, #588]	; (800f124 <HAL_DMA_IRQHandler+0x2e8>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d100      	bne.n	800eede <HAL_DMA_IRQHandler+0xa2>
 800eedc:	e189      	b.n	800f1f2 <HAL_DMA_IRQHandler+0x3b6>
 800eede:	4a8a      	ldr	r2, [pc, #552]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d100      	bne.n	800eee6 <HAL_DMA_IRQHandler+0xaa>
 800eee4:	e188      	b.n	800f1f8 <HAL_DMA_IRQHandler+0x3bc>
 800eee6:	4a90      	ldr	r2, [pc, #576]	; (800f128 <HAL_DMA_IRQHandler+0x2ec>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d100      	bne.n	800eeee <HAL_DMA_IRQHandler+0xb2>
 800eeec:	e187      	b.n	800f1fe <HAL_DMA_IRQHandler+0x3c2>
 800eeee:	4a8f      	ldr	r2, [pc, #572]	; (800f12c <HAL_DMA_IRQHandler+0x2f0>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d100      	bne.n	800eef6 <HAL_DMA_IRQHandler+0xba>
 800eef4:	e185      	b.n	800f202 <HAL_DMA_IRQHandler+0x3c6>
 800eef6:	4a8e      	ldr	r2, [pc, #568]	; (800f130 <HAL_DMA_IRQHandler+0x2f4>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d100      	bne.n	800eefe <HAL_DMA_IRQHandler+0xc2>
 800eefc:	e183      	b.n	800f206 <HAL_DMA_IRQHandler+0x3ca>
 800eefe:	4a8d      	ldr	r2, [pc, #564]	; (800f134 <HAL_DMA_IRQHandler+0x2f8>)
 800ef00:	189a      	adds	r2, r3, r2
 800ef02:	4250      	negs	r0, r2
 800ef04:	4142      	adcs	r2, r0
 800ef06:	4252      	negs	r2, r2
 800ef08:	488c      	ldr	r0, [pc, #560]	; (800f13c <HAL_DMA_IRQHandler+0x300>)
 800ef0a:	4002      	ands	r2, r0
 800ef0c:	2080      	movs	r0, #128	; 0x80
 800ef0e:	02c0      	lsls	r0, r0, #11
 800ef10:	4684      	mov	ip, r0
 800ef12:	4462      	add	r2, ip
 800ef14:	e15e      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ef16:	2280      	movs	r2, #128	; 0x80
 800ef18:	e7c3      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef1a:	2280      	movs	r2, #128	; 0x80
 800ef1c:	0112      	lsls	r2, r2, #4
 800ef1e:	e7c0      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef20:	2280      	movs	r2, #128	; 0x80
 800ef22:	0212      	lsls	r2, r2, #8
 800ef24:	e7bd      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef26:	2280      	movs	r2, #128	; 0x80
 800ef28:	0312      	lsls	r2, r2, #12
 800ef2a:	e7ba      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef2c:	2280      	movs	r2, #128	; 0x80
 800ef2e:	0412      	lsls	r2, r2, #16
 800ef30:	e7b7      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef32:	2280      	movs	r2, #128	; 0x80
 800ef34:	0512      	lsls	r2, r2, #20
 800ef36:	e7b4      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef38:	2208      	movs	r2, #8
 800ef3a:	e7b2      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef3c:	2280      	movs	r2, #128	; 0x80
 800ef3e:	e7b0      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef40:	2280      	movs	r2, #128	; 0x80
 800ef42:	0112      	lsls	r2, r2, #4
 800ef44:	e7ad      	b.n	800eea2 <HAL_DMA_IRQHandler+0x66>
 800ef46:	4a7e      	ldr	r2, [pc, #504]	; (800f140 <HAL_DMA_IRQHandler+0x304>)
 800ef48:	6811      	ldr	r1, [r2, #0]
 800ef4a:	4a71      	ldr	r2, [pc, #452]	; (800f110 <HAL_DMA_IRQHandler+0x2d4>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d026      	beq.n	800ef9e <HAL_DMA_IRQHandler+0x162>
 800ef50:	4a70      	ldr	r2, [pc, #448]	; (800f114 <HAL_DMA_IRQHandler+0x2d8>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d05d      	beq.n	800f012 <HAL_DMA_IRQHandler+0x1d6>
 800ef56:	4a70      	ldr	r2, [pc, #448]	; (800f118 <HAL_DMA_IRQHandler+0x2dc>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d05c      	beq.n	800f016 <HAL_DMA_IRQHandler+0x1da>
 800ef5c:	4a6f      	ldr	r2, [pc, #444]	; (800f11c <HAL_DMA_IRQHandler+0x2e0>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d05c      	beq.n	800f01c <HAL_DMA_IRQHandler+0x1e0>
 800ef62:	4a6f      	ldr	r2, [pc, #444]	; (800f120 <HAL_DMA_IRQHandler+0x2e4>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d05c      	beq.n	800f022 <HAL_DMA_IRQHandler+0x1e6>
 800ef68:	4a6e      	ldr	r2, [pc, #440]	; (800f124 <HAL_DMA_IRQHandler+0x2e8>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d05c      	beq.n	800f028 <HAL_DMA_IRQHandler+0x1ec>
 800ef6e:	4a66      	ldr	r2, [pc, #408]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d05c      	beq.n	800f02e <HAL_DMA_IRQHandler+0x1f2>
 800ef74:	4a6c      	ldr	r2, [pc, #432]	; (800f128 <HAL_DMA_IRQHandler+0x2ec>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d05c      	beq.n	800f034 <HAL_DMA_IRQHandler+0x1f8>
 800ef7a:	4a6c      	ldr	r2, [pc, #432]	; (800f12c <HAL_DMA_IRQHandler+0x2f0>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d05b      	beq.n	800f038 <HAL_DMA_IRQHandler+0x1fc>
 800ef80:	4a6b      	ldr	r2, [pc, #428]	; (800f130 <HAL_DMA_IRQHandler+0x2f4>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d05a      	beq.n	800f03c <HAL_DMA_IRQHandler+0x200>
 800ef86:	4a6b      	ldr	r2, [pc, #428]	; (800f134 <HAL_DMA_IRQHandler+0x2f8>)
 800ef88:	189a      	adds	r2, r3, r2
 800ef8a:	4250      	negs	r0, r2
 800ef8c:	4142      	adcs	r2, r0
 800ef8e:	4252      	negs	r2, r2
 800ef90:	4869      	ldr	r0, [pc, #420]	; (800f138 <HAL_DMA_IRQHandler+0x2fc>)
 800ef92:	4002      	ands	r2, r0
 800ef94:	2080      	movs	r0, #128	; 0x80
 800ef96:	0300      	lsls	r0, r0, #12
 800ef98:	4684      	mov	ip, r0
 800ef9a:	4462      	add	r2, ip
 800ef9c:	e000      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800ef9e:	2208      	movs	r2, #8
 800efa0:	420a      	tst	r2, r1
 800efa2:	d000      	beq.n	800efa6 <HAL_DMA_IRQHandler+0x16a>
 800efa4:	e376      	b.n	800f694 <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800efa6:	4a66      	ldr	r2, [pc, #408]	; (800f140 <HAL_DMA_IRQHandler+0x304>)
 800efa8:	6811      	ldr	r1, [r2, #0]
 800efaa:	4a59      	ldr	r2, [pc, #356]	; (800f110 <HAL_DMA_IRQHandler+0x2d4>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d100      	bne.n	800efb2 <HAL_DMA_IRQHandler+0x176>
 800efb0:	e12c      	b.n	800f20c <HAL_DMA_IRQHandler+0x3d0>
 800efb2:	4a58      	ldr	r2, [pc, #352]	; (800f114 <HAL_DMA_IRQHandler+0x2d8>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d100      	bne.n	800efba <HAL_DMA_IRQHandler+0x17e>
 800efb8:	e16e      	b.n	800f298 <HAL_DMA_IRQHandler+0x45c>
 800efba:	4a57      	ldr	r2, [pc, #348]	; (800f118 <HAL_DMA_IRQHandler+0x2dc>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d100      	bne.n	800efc2 <HAL_DMA_IRQHandler+0x186>
 800efc0:	e16c      	b.n	800f29c <HAL_DMA_IRQHandler+0x460>
 800efc2:	4a56      	ldr	r2, [pc, #344]	; (800f11c <HAL_DMA_IRQHandler+0x2e0>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d100      	bne.n	800efca <HAL_DMA_IRQHandler+0x18e>
 800efc8:	e16b      	b.n	800f2a2 <HAL_DMA_IRQHandler+0x466>
 800efca:	4a55      	ldr	r2, [pc, #340]	; (800f120 <HAL_DMA_IRQHandler+0x2e4>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d100      	bne.n	800efd2 <HAL_DMA_IRQHandler+0x196>
 800efd0:	e16a      	b.n	800f2a8 <HAL_DMA_IRQHandler+0x46c>
 800efd2:	4a54      	ldr	r2, [pc, #336]	; (800f124 <HAL_DMA_IRQHandler+0x2e8>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d100      	bne.n	800efda <HAL_DMA_IRQHandler+0x19e>
 800efd8:	e169      	b.n	800f2ae <HAL_DMA_IRQHandler+0x472>
 800efda:	4a4b      	ldr	r2, [pc, #300]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d100      	bne.n	800efe2 <HAL_DMA_IRQHandler+0x1a6>
 800efe0:	e168      	b.n	800f2b4 <HAL_DMA_IRQHandler+0x478>
 800efe2:	4a51      	ldr	r2, [pc, #324]	; (800f128 <HAL_DMA_IRQHandler+0x2ec>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d100      	bne.n	800efea <HAL_DMA_IRQHandler+0x1ae>
 800efe8:	e167      	b.n	800f2ba <HAL_DMA_IRQHandler+0x47e>
 800efea:	4a50      	ldr	r2, [pc, #320]	; (800f12c <HAL_DMA_IRQHandler+0x2f0>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d100      	bne.n	800eff2 <HAL_DMA_IRQHandler+0x1b6>
 800eff0:	e165      	b.n	800f2be <HAL_DMA_IRQHandler+0x482>
 800eff2:	4a4f      	ldr	r2, [pc, #316]	; (800f130 <HAL_DMA_IRQHandler+0x2f4>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d100      	bne.n	800effa <HAL_DMA_IRQHandler+0x1be>
 800eff8:	e163      	b.n	800f2c2 <HAL_DMA_IRQHandler+0x486>
 800effa:	4a4e      	ldr	r2, [pc, #312]	; (800f134 <HAL_DMA_IRQHandler+0x2f8>)
 800effc:	189a      	adds	r2, r3, r2
 800effe:	4250      	negs	r0, r2
 800f000:	4142      	adcs	r2, r0
 800f002:	4252      	negs	r2, r2
 800f004:	484d      	ldr	r0, [pc, #308]	; (800f13c <HAL_DMA_IRQHandler+0x300>)
 800f006:	4002      	ands	r2, r0
 800f008:	2080      	movs	r0, #128	; 0x80
 800f00a:	02c0      	lsls	r0, r0, #11
 800f00c:	4684      	mov	ip, r0
 800f00e:	4462      	add	r2, ip
 800f010:	e0fd      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800f012:	2280      	movs	r2, #128	; 0x80
 800f014:	e7c4      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f016:	2280      	movs	r2, #128	; 0x80
 800f018:	0112      	lsls	r2, r2, #4
 800f01a:	e7c1      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f01c:	2280      	movs	r2, #128	; 0x80
 800f01e:	0212      	lsls	r2, r2, #8
 800f020:	e7be      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f022:	2280      	movs	r2, #128	; 0x80
 800f024:	0312      	lsls	r2, r2, #12
 800f026:	e7bb      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f028:	2280      	movs	r2, #128	; 0x80
 800f02a:	0412      	lsls	r2, r2, #16
 800f02c:	e7b8      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f02e:	2280      	movs	r2, #128	; 0x80
 800f030:	0512      	lsls	r2, r2, #20
 800f032:	e7b5      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f034:	2208      	movs	r2, #8
 800f036:	e7b3      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f038:	2280      	movs	r2, #128	; 0x80
 800f03a:	e7b1      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
 800f03c:	2280      	movs	r2, #128	; 0x80
 800f03e:	0112      	lsls	r2, r2, #4
 800f040:	e7ae      	b.n	800efa0 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	2108      	movs	r1, #8
 800f046:	438a      	bics	r2, r1
 800f048:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	4a2e      	ldr	r2, [pc, #184]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d978      	bls.n	800f144 <HAL_DMA_IRQHandler+0x308>
 800f052:	4a2f      	ldr	r2, [pc, #188]	; (800f110 <HAL_DMA_IRQHandler+0x2d4>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d027      	beq.n	800f0a8 <HAL_DMA_IRQHandler+0x26c>
 800f058:	4a2e      	ldr	r2, [pc, #184]	; (800f114 <HAL_DMA_IRQHandler+0x2d8>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d03c      	beq.n	800f0d8 <HAL_DMA_IRQHandler+0x29c>
 800f05e:	4a2e      	ldr	r2, [pc, #184]	; (800f118 <HAL_DMA_IRQHandler+0x2dc>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d03b      	beq.n	800f0dc <HAL_DMA_IRQHandler+0x2a0>
 800f064:	4a2d      	ldr	r2, [pc, #180]	; (800f11c <HAL_DMA_IRQHandler+0x2e0>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d03b      	beq.n	800f0e2 <HAL_DMA_IRQHandler+0x2a6>
 800f06a:	4a2d      	ldr	r2, [pc, #180]	; (800f120 <HAL_DMA_IRQHandler+0x2e4>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d03b      	beq.n	800f0e8 <HAL_DMA_IRQHandler+0x2ac>
 800f070:	4a2c      	ldr	r2, [pc, #176]	; (800f124 <HAL_DMA_IRQHandler+0x2e8>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d03b      	beq.n	800f0ee <HAL_DMA_IRQHandler+0x2b2>
 800f076:	4a24      	ldr	r2, [pc, #144]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d03b      	beq.n	800f0f4 <HAL_DMA_IRQHandler+0x2b8>
 800f07c:	4a2a      	ldr	r2, [pc, #168]	; (800f128 <HAL_DMA_IRQHandler+0x2ec>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d03b      	beq.n	800f0fa <HAL_DMA_IRQHandler+0x2be>
 800f082:	4a2a      	ldr	r2, [pc, #168]	; (800f12c <HAL_DMA_IRQHandler+0x2f0>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d03a      	beq.n	800f0fe <HAL_DMA_IRQHandler+0x2c2>
 800f088:	4a29      	ldr	r2, [pc, #164]	; (800f130 <HAL_DMA_IRQHandler+0x2f4>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d039      	beq.n	800f102 <HAL_DMA_IRQHandler+0x2c6>
 800f08e:	4a29      	ldr	r2, [pc, #164]	; (800f134 <HAL_DMA_IRQHandler+0x2f8>)
 800f090:	4694      	mov	ip, r2
 800f092:	4463      	add	r3, ip
 800f094:	425a      	negs	r2, r3
 800f096:	4153      	adcs	r3, r2
 800f098:	425b      	negs	r3, r3
 800f09a:	4a27      	ldr	r2, [pc, #156]	; (800f138 <HAL_DMA_IRQHandler+0x2fc>)
 800f09c:	4013      	ands	r3, r2
 800f09e:	2280      	movs	r2, #128	; 0x80
 800f0a0:	0312      	lsls	r2, r2, #12
 800f0a2:	4694      	mov	ip, r2
 800f0a4:	4463      	add	r3, ip
 800f0a6:	e000      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0a8:	2308      	movs	r3, #8
 800f0aa:	4a18      	ldr	r2, [pc, #96]	; (800f10c <HAL_DMA_IRQHandler+0x2d0>)
 800f0ac:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800f0ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800f0b6:	2321      	movs	r3, #33	; 0x21
 800f0b8:	3203      	adds	r2, #3
 800f0ba:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	2200      	movs	r2, #0
 800f0c0:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f0c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 800f0c8:	0020      	movs	r0, r4
 800f0ca:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f0cc:	6823      	ldr	r3, [r4, #0]
 800f0ce:	4a0e      	ldr	r2, [pc, #56]	; (800f108 <HAL_DMA_IRQHandler+0x2cc>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d800      	bhi.n	800f0d6 <HAL_DMA_IRQHandler+0x29a>
 800f0d4:	e767      	b.n	800efa6 <HAL_DMA_IRQHandler+0x16a>
 800f0d6:	e6e8      	b.n	800eeaa <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800f0d8:	2380      	movs	r3, #128	; 0x80
 800f0da:	e7e6      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0dc:	2380      	movs	r3, #128	; 0x80
 800f0de:	011b      	lsls	r3, r3, #4
 800f0e0:	e7e3      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0e2:	2380      	movs	r3, #128	; 0x80
 800f0e4:	021b      	lsls	r3, r3, #8
 800f0e6:	e7e0      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0e8:	2380      	movs	r3, #128	; 0x80
 800f0ea:	031b      	lsls	r3, r3, #12
 800f0ec:	e7dd      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0ee:	2380      	movs	r3, #128	; 0x80
 800f0f0:	041b      	lsls	r3, r3, #16
 800f0f2:	e7da      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0f4:	2380      	movs	r3, #128	; 0x80
 800f0f6:	051b      	lsls	r3, r3, #20
 800f0f8:	e7d7      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0fa:	2308      	movs	r3, #8
 800f0fc:	e7d5      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f0fe:	2380      	movs	r3, #128	; 0x80
 800f100:	e7d3      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f102:	2380      	movs	r3, #128	; 0x80
 800f104:	011b      	lsls	r3, r3, #4
 800f106:	e7d0      	b.n	800f0aa <HAL_DMA_IRQHandler+0x26e>
 800f108:	40020080 	.word	0x40020080
 800f10c:	40020400 	.word	0x40020400
 800f110:	40020008 	.word	0x40020008
 800f114:	4002001c 	.word	0x4002001c
 800f118:	40020030 	.word	0x40020030
 800f11c:	40020044 	.word	0x40020044
 800f120:	40020058 	.word	0x40020058
 800f124:	4002006c 	.word	0x4002006c
 800f128:	40020408 	.word	0x40020408
 800f12c:	4002041c 	.word	0x4002041c
 800f130:	40020430 	.word	0x40020430
 800f134:	bffdfbbc 	.word	0xbffdfbbc
 800f138:	fff88000 	.word	0xfff88000
 800f13c:	fffc4000 	.word	0xfffc4000
 800f140:	40020000 	.word	0x40020000
 800f144:	4ab3      	ldr	r2, [pc, #716]	; (800f414 <HAL_DMA_IRQHandler+0x5d8>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d027      	beq.n	800f19a <HAL_DMA_IRQHandler+0x35e>
 800f14a:	4ab3      	ldr	r2, [pc, #716]	; (800f418 <HAL_DMA_IRQHandler+0x5dc>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d028      	beq.n	800f1a2 <HAL_DMA_IRQHandler+0x366>
 800f150:	4ab2      	ldr	r2, [pc, #712]	; (800f41c <HAL_DMA_IRQHandler+0x5e0>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d027      	beq.n	800f1a6 <HAL_DMA_IRQHandler+0x36a>
 800f156:	4ab2      	ldr	r2, [pc, #712]	; (800f420 <HAL_DMA_IRQHandler+0x5e4>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d027      	beq.n	800f1ac <HAL_DMA_IRQHandler+0x370>
 800f15c:	4ab1      	ldr	r2, [pc, #708]	; (800f424 <HAL_DMA_IRQHandler+0x5e8>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d027      	beq.n	800f1b2 <HAL_DMA_IRQHandler+0x376>
 800f162:	4ab1      	ldr	r2, [pc, #708]	; (800f428 <HAL_DMA_IRQHandler+0x5ec>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d027      	beq.n	800f1b8 <HAL_DMA_IRQHandler+0x37c>
 800f168:	4ab0      	ldr	r2, [pc, #704]	; (800f42c <HAL_DMA_IRQHandler+0x5f0>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d027      	beq.n	800f1be <HAL_DMA_IRQHandler+0x382>
 800f16e:	4ab0      	ldr	r2, [pc, #704]	; (800f430 <HAL_DMA_IRQHandler+0x5f4>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d027      	beq.n	800f1c4 <HAL_DMA_IRQHandler+0x388>
 800f174:	4aaf      	ldr	r2, [pc, #700]	; (800f434 <HAL_DMA_IRQHandler+0x5f8>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d026      	beq.n	800f1c8 <HAL_DMA_IRQHandler+0x38c>
 800f17a:	4aaf      	ldr	r2, [pc, #700]	; (800f438 <HAL_DMA_IRQHandler+0x5fc>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d025      	beq.n	800f1cc <HAL_DMA_IRQHandler+0x390>
 800f180:	4aae      	ldr	r2, [pc, #696]	; (800f43c <HAL_DMA_IRQHandler+0x600>)
 800f182:	4694      	mov	ip, r2
 800f184:	4463      	add	r3, ip
 800f186:	425a      	negs	r2, r3
 800f188:	4153      	adcs	r3, r2
 800f18a:	425b      	negs	r3, r3
 800f18c:	4aac      	ldr	r2, [pc, #688]	; (800f440 <HAL_DMA_IRQHandler+0x604>)
 800f18e:	4013      	ands	r3, r2
 800f190:	2280      	movs	r2, #128	; 0x80
 800f192:	0312      	lsls	r2, r2, #12
 800f194:	4694      	mov	ip, r2
 800f196:	4463      	add	r3, ip
 800f198:	e000      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f19a:	2308      	movs	r3, #8
 800f19c:	4aa9      	ldr	r2, [pc, #676]	; (800f444 <HAL_DMA_IRQHandler+0x608>)
 800f19e:	6053      	str	r3, [r2, #4]
 800f1a0:	e785      	b.n	800f0ae <HAL_DMA_IRQHandler+0x272>
 800f1a2:	2380      	movs	r3, #128	; 0x80
 800f1a4:	e7fa      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1a6:	2380      	movs	r3, #128	; 0x80
 800f1a8:	011b      	lsls	r3, r3, #4
 800f1aa:	e7f7      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1ac:	2380      	movs	r3, #128	; 0x80
 800f1ae:	021b      	lsls	r3, r3, #8
 800f1b0:	e7f4      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1b2:	2380      	movs	r3, #128	; 0x80
 800f1b4:	031b      	lsls	r3, r3, #12
 800f1b6:	e7f1      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1b8:	2380      	movs	r3, #128	; 0x80
 800f1ba:	041b      	lsls	r3, r3, #16
 800f1bc:	e7ee      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1be:	2380      	movs	r3, #128	; 0x80
 800f1c0:	051b      	lsls	r3, r3, #20
 800f1c2:	e7eb      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1c4:	2308      	movs	r3, #8
 800f1c6:	e7e9      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1c8:	2380      	movs	r3, #128	; 0x80
 800f1ca:	e7e7      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
 800f1cc:	2380      	movs	r3, #128	; 0x80
 800f1ce:	011b      	lsls	r3, r3, #4
 800f1d0:	e7e4      	b.n	800f19c <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f1d2:	2204      	movs	r2, #4
 800f1d4:	420a      	tst	r2, r1
 800f1d6:	d11d      	bne.n	800f214 <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f1d8:	6821      	ldr	r1, [r4, #0]
 800f1da:	e085      	b.n	800f2e8 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f1dc:	2240      	movs	r2, #64	; 0x40
 800f1de:	e7f9      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f1e0:	2280      	movs	r2, #128	; 0x80
 800f1e2:	00d2      	lsls	r2, r2, #3
 800f1e4:	e7f6      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f1e6:	2280      	movs	r2, #128	; 0x80
 800f1e8:	01d2      	lsls	r2, r2, #7
 800f1ea:	e7f3      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f1ec:	2280      	movs	r2, #128	; 0x80
 800f1ee:	02d2      	lsls	r2, r2, #11
 800f1f0:	e7f0      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f1f2:	2280      	movs	r2, #128	; 0x80
 800f1f4:	03d2      	lsls	r2, r2, #15
 800f1f6:	e7ed      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f1f8:	2280      	movs	r2, #128	; 0x80
 800f1fa:	04d2      	lsls	r2, r2, #19
 800f1fc:	e7ea      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f1fe:	2204      	movs	r2, #4
 800f200:	e7e8      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f202:	2240      	movs	r2, #64	; 0x40
 800f204:	e7e6      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f206:	2280      	movs	r2, #128	; 0x80
 800f208:	00d2      	lsls	r2, r2, #3
 800f20a:	e7e3      	b.n	800f1d4 <HAL_DMA_IRQHandler+0x398>
 800f20c:	2204      	movs	r2, #4
 800f20e:	420a      	tst	r2, r1
 800f210:	d100      	bne.n	800f214 <HAL_DMA_IRQHandler+0x3d8>
 800f212:	e208      	b.n	800f626 <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	0752      	lsls	r2, r2, #29
 800f218:	d561      	bpl.n	800f2de <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	0692      	lsls	r2, r2, #26
 800f21e:	d403      	bmi.n	800f228 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	2104      	movs	r1, #4
 800f224:	438a      	bics	r2, r1
 800f226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	4a80      	ldr	r2, [pc, #512]	; (800f42c <HAL_DMA_IRQHandler+0x5f0>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d800      	bhi.n	800f232 <HAL_DMA_IRQHandler+0x3f6>
 800f230:	e0a8      	b.n	800f384 <HAL_DMA_IRQHandler+0x548>
 800f232:	4a78      	ldr	r2, [pc, #480]	; (800f414 <HAL_DMA_IRQHandler+0x5d8>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d047      	beq.n	800f2c8 <HAL_DMA_IRQHandler+0x48c>
 800f238:	4a77      	ldr	r2, [pc, #476]	; (800f418 <HAL_DMA_IRQHandler+0x5dc>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d100      	bne.n	800f240 <HAL_DMA_IRQHandler+0x404>
 800f23e:	e089      	b.n	800f354 <HAL_DMA_IRQHandler+0x518>
 800f240:	4a76      	ldr	r2, [pc, #472]	; (800f41c <HAL_DMA_IRQHandler+0x5e0>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d100      	bne.n	800f248 <HAL_DMA_IRQHandler+0x40c>
 800f246:	e087      	b.n	800f358 <HAL_DMA_IRQHandler+0x51c>
 800f248:	4a75      	ldr	r2, [pc, #468]	; (800f420 <HAL_DMA_IRQHandler+0x5e4>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d100      	bne.n	800f250 <HAL_DMA_IRQHandler+0x414>
 800f24e:	e086      	b.n	800f35e <HAL_DMA_IRQHandler+0x522>
 800f250:	4a74      	ldr	r2, [pc, #464]	; (800f424 <HAL_DMA_IRQHandler+0x5e8>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d100      	bne.n	800f258 <HAL_DMA_IRQHandler+0x41c>
 800f256:	e085      	b.n	800f364 <HAL_DMA_IRQHandler+0x528>
 800f258:	4a73      	ldr	r2, [pc, #460]	; (800f428 <HAL_DMA_IRQHandler+0x5ec>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d100      	bne.n	800f260 <HAL_DMA_IRQHandler+0x424>
 800f25e:	e084      	b.n	800f36a <HAL_DMA_IRQHandler+0x52e>
 800f260:	4a72      	ldr	r2, [pc, #456]	; (800f42c <HAL_DMA_IRQHandler+0x5f0>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d100      	bne.n	800f268 <HAL_DMA_IRQHandler+0x42c>
 800f266:	e083      	b.n	800f370 <HAL_DMA_IRQHandler+0x534>
 800f268:	4a71      	ldr	r2, [pc, #452]	; (800f430 <HAL_DMA_IRQHandler+0x5f4>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d100      	bne.n	800f270 <HAL_DMA_IRQHandler+0x434>
 800f26e:	e082      	b.n	800f376 <HAL_DMA_IRQHandler+0x53a>
 800f270:	4a70      	ldr	r2, [pc, #448]	; (800f434 <HAL_DMA_IRQHandler+0x5f8>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d100      	bne.n	800f278 <HAL_DMA_IRQHandler+0x43c>
 800f276:	e080      	b.n	800f37a <HAL_DMA_IRQHandler+0x53e>
 800f278:	4a6f      	ldr	r2, [pc, #444]	; (800f438 <HAL_DMA_IRQHandler+0x5fc>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d07f      	beq.n	800f37e <HAL_DMA_IRQHandler+0x542>
 800f27e:	4a6f      	ldr	r2, [pc, #444]	; (800f43c <HAL_DMA_IRQHandler+0x600>)
 800f280:	4694      	mov	ip, r2
 800f282:	4463      	add	r3, ip
 800f284:	425a      	negs	r2, r3
 800f286:	4153      	adcs	r3, r2
 800f288:	425b      	negs	r3, r3
 800f28a:	4a6f      	ldr	r2, [pc, #444]	; (800f448 <HAL_DMA_IRQHandler+0x60c>)
 800f28c:	4013      	ands	r3, r2
 800f28e:	2280      	movs	r2, #128	; 0x80
 800f290:	02d2      	lsls	r2, r2, #11
 800f292:	4694      	mov	ip, r2
 800f294:	4463      	add	r3, ip
 800f296:	e018      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f298:	2240      	movs	r2, #64	; 0x40
 800f29a:	e7b8      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f29c:	2280      	movs	r2, #128	; 0x80
 800f29e:	00d2      	lsls	r2, r2, #3
 800f2a0:	e7b5      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2a2:	2280      	movs	r2, #128	; 0x80
 800f2a4:	01d2      	lsls	r2, r2, #7
 800f2a6:	e7b2      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2a8:	2280      	movs	r2, #128	; 0x80
 800f2aa:	02d2      	lsls	r2, r2, #11
 800f2ac:	e7af      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2ae:	2280      	movs	r2, #128	; 0x80
 800f2b0:	03d2      	lsls	r2, r2, #15
 800f2b2:	e7ac      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2b4:	2280      	movs	r2, #128	; 0x80
 800f2b6:	04d2      	lsls	r2, r2, #19
 800f2b8:	e7a9      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2ba:	2204      	movs	r2, #4
 800f2bc:	e7a7      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2be:	2240      	movs	r2, #64	; 0x40
 800f2c0:	e7a5      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
 800f2c2:	2280      	movs	r2, #128	; 0x80
 800f2c4:	00d2      	lsls	r2, r2, #3
 800f2c6:	e7a2      	b.n	800f20e <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f2c8:	2304      	movs	r3, #4
 800f2ca:	4a60      	ldr	r2, [pc, #384]	; (800f44c <HAL_DMA_IRQHandler+0x610>)
 800f2cc:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800f2ce:	2321      	movs	r3, #33	; 0x21
 800f2d0:	2211      	movs	r2, #17
 800f2d2:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f2d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 800f2da:	0020      	movs	r0, r4
 800f2dc:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f2de:	6821      	ldr	r1, [r4, #0]
 800f2e0:	4b52      	ldr	r3, [pc, #328]	; (800f42c <HAL_DMA_IRQHandler+0x5f0>)
 800f2e2:	4299      	cmp	r1, r3
 800f2e4:	d800      	bhi.n	800f2e8 <HAL_DMA_IRQHandler+0x4ac>
 800f2e6:	e19f      	b.n	800f628 <HAL_DMA_IRQHandler+0x7ec>
 800f2e8:	4b58      	ldr	r3, [pc, #352]	; (800f44c <HAL_DMA_IRQHandler+0x610>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	4a49      	ldr	r2, [pc, #292]	; (800f414 <HAL_DMA_IRQHandler+0x5d8>)
 800f2ee:	4291      	cmp	r1, r2
 800f2f0:	d100      	bne.n	800f2f4 <HAL_DMA_IRQHandler+0x4b8>
 800f2f2:	e0af      	b.n	800f454 <HAL_DMA_IRQHandler+0x618>
 800f2f4:	4a48      	ldr	r2, [pc, #288]	; (800f418 <HAL_DMA_IRQHandler+0x5dc>)
 800f2f6:	4291      	cmp	r1, r2
 800f2f8:	d100      	bne.n	800f2fc <HAL_DMA_IRQHandler+0x4c0>
 800f2fa:	e0ee      	b.n	800f4da <HAL_DMA_IRQHandler+0x69e>
 800f2fc:	4a47      	ldr	r2, [pc, #284]	; (800f41c <HAL_DMA_IRQHandler+0x5e0>)
 800f2fe:	4291      	cmp	r1, r2
 800f300:	d100      	bne.n	800f304 <HAL_DMA_IRQHandler+0x4c8>
 800f302:	e0ec      	b.n	800f4de <HAL_DMA_IRQHandler+0x6a2>
 800f304:	4a46      	ldr	r2, [pc, #280]	; (800f420 <HAL_DMA_IRQHandler+0x5e4>)
 800f306:	4291      	cmp	r1, r2
 800f308:	d100      	bne.n	800f30c <HAL_DMA_IRQHandler+0x4d0>
 800f30a:	e0eb      	b.n	800f4e4 <HAL_DMA_IRQHandler+0x6a8>
 800f30c:	4b45      	ldr	r3, [pc, #276]	; (800f424 <HAL_DMA_IRQHandler+0x5e8>)
 800f30e:	4299      	cmp	r1, r3
 800f310:	d100      	bne.n	800f314 <HAL_DMA_IRQHandler+0x4d8>
 800f312:	e0ea      	b.n	800f4ea <HAL_DMA_IRQHandler+0x6ae>
 800f314:	4b44      	ldr	r3, [pc, #272]	; (800f428 <HAL_DMA_IRQHandler+0x5ec>)
 800f316:	4299      	cmp	r1, r3
 800f318:	d100      	bne.n	800f31c <HAL_DMA_IRQHandler+0x4e0>
 800f31a:	e0e9      	b.n	800f4f0 <HAL_DMA_IRQHandler+0x6b4>
 800f31c:	4b43      	ldr	r3, [pc, #268]	; (800f42c <HAL_DMA_IRQHandler+0x5f0>)
 800f31e:	4299      	cmp	r1, r3
 800f320:	d100      	bne.n	800f324 <HAL_DMA_IRQHandler+0x4e8>
 800f322:	e0e8      	b.n	800f4f6 <HAL_DMA_IRQHandler+0x6ba>
 800f324:	4b42      	ldr	r3, [pc, #264]	; (800f430 <HAL_DMA_IRQHandler+0x5f4>)
 800f326:	4299      	cmp	r1, r3
 800f328:	d100      	bne.n	800f32c <HAL_DMA_IRQHandler+0x4f0>
 800f32a:	e0e7      	b.n	800f4fc <HAL_DMA_IRQHandler+0x6c0>
 800f32c:	4b41      	ldr	r3, [pc, #260]	; (800f434 <HAL_DMA_IRQHandler+0x5f8>)
 800f32e:	4299      	cmp	r1, r3
 800f330:	d100      	bne.n	800f334 <HAL_DMA_IRQHandler+0x4f8>
 800f332:	e0e5      	b.n	800f500 <HAL_DMA_IRQHandler+0x6c4>
 800f334:	4b40      	ldr	r3, [pc, #256]	; (800f438 <HAL_DMA_IRQHandler+0x5fc>)
 800f336:	4299      	cmp	r1, r3
 800f338:	d100      	bne.n	800f33c <HAL_DMA_IRQHandler+0x500>
 800f33a:	e0e3      	b.n	800f504 <HAL_DMA_IRQHandler+0x6c8>
 800f33c:	4b3f      	ldr	r3, [pc, #252]	; (800f43c <HAL_DMA_IRQHandler+0x600>)
 800f33e:	18ca      	adds	r2, r1, r3
 800f340:	4253      	negs	r3, r2
 800f342:	415a      	adcs	r2, r3
 800f344:	4252      	negs	r2, r2
 800f346:	4b42      	ldr	r3, [pc, #264]	; (800f450 <HAL_DMA_IRQHandler+0x614>)
 800f348:	4013      	ands	r3, r2
 800f34a:	2280      	movs	r2, #128	; 0x80
 800f34c:	0292      	lsls	r2, r2, #10
 800f34e:	4694      	mov	ip, r2
 800f350:	4463      	add	r3, ip
 800f352:	e080      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f354:	2340      	movs	r3, #64	; 0x40
 800f356:	e7b8      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f358:	2380      	movs	r3, #128	; 0x80
 800f35a:	00db      	lsls	r3, r3, #3
 800f35c:	e7b5      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f35e:	2380      	movs	r3, #128	; 0x80
 800f360:	01db      	lsls	r3, r3, #7
 800f362:	e7b2      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f364:	2380      	movs	r3, #128	; 0x80
 800f366:	02db      	lsls	r3, r3, #11
 800f368:	e7af      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f36a:	2380      	movs	r3, #128	; 0x80
 800f36c:	03db      	lsls	r3, r3, #15
 800f36e:	e7ac      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f370:	2380      	movs	r3, #128	; 0x80
 800f372:	04db      	lsls	r3, r3, #19
 800f374:	e7a9      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f376:	2304      	movs	r3, #4
 800f378:	e7a7      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f37a:	2340      	movs	r3, #64	; 0x40
 800f37c:	e7a5      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f37e:	2380      	movs	r3, #128	; 0x80
 800f380:	00db      	lsls	r3, r3, #3
 800f382:	e7a2      	b.n	800f2ca <HAL_DMA_IRQHandler+0x48e>
 800f384:	4a23      	ldr	r2, [pc, #140]	; (800f414 <HAL_DMA_IRQHandler+0x5d8>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d027      	beq.n	800f3da <HAL_DMA_IRQHandler+0x59e>
 800f38a:	4a23      	ldr	r2, [pc, #140]	; (800f418 <HAL_DMA_IRQHandler+0x5dc>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d028      	beq.n	800f3e2 <HAL_DMA_IRQHandler+0x5a6>
 800f390:	4a22      	ldr	r2, [pc, #136]	; (800f41c <HAL_DMA_IRQHandler+0x5e0>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d027      	beq.n	800f3e6 <HAL_DMA_IRQHandler+0x5aa>
 800f396:	4a22      	ldr	r2, [pc, #136]	; (800f420 <HAL_DMA_IRQHandler+0x5e4>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d027      	beq.n	800f3ec <HAL_DMA_IRQHandler+0x5b0>
 800f39c:	4a21      	ldr	r2, [pc, #132]	; (800f424 <HAL_DMA_IRQHandler+0x5e8>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d027      	beq.n	800f3f2 <HAL_DMA_IRQHandler+0x5b6>
 800f3a2:	4a21      	ldr	r2, [pc, #132]	; (800f428 <HAL_DMA_IRQHandler+0x5ec>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d027      	beq.n	800f3f8 <HAL_DMA_IRQHandler+0x5bc>
 800f3a8:	4a20      	ldr	r2, [pc, #128]	; (800f42c <HAL_DMA_IRQHandler+0x5f0>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d027      	beq.n	800f3fe <HAL_DMA_IRQHandler+0x5c2>
 800f3ae:	4a20      	ldr	r2, [pc, #128]	; (800f430 <HAL_DMA_IRQHandler+0x5f4>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d027      	beq.n	800f404 <HAL_DMA_IRQHandler+0x5c8>
 800f3b4:	4a1f      	ldr	r2, [pc, #124]	; (800f434 <HAL_DMA_IRQHandler+0x5f8>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d026      	beq.n	800f408 <HAL_DMA_IRQHandler+0x5cc>
 800f3ba:	4a1f      	ldr	r2, [pc, #124]	; (800f438 <HAL_DMA_IRQHandler+0x5fc>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d025      	beq.n	800f40c <HAL_DMA_IRQHandler+0x5d0>
 800f3c0:	4a1e      	ldr	r2, [pc, #120]	; (800f43c <HAL_DMA_IRQHandler+0x600>)
 800f3c2:	4694      	mov	ip, r2
 800f3c4:	4463      	add	r3, ip
 800f3c6:	425a      	negs	r2, r3
 800f3c8:	4153      	adcs	r3, r2
 800f3ca:	425b      	negs	r3, r3
 800f3cc:	4a1e      	ldr	r2, [pc, #120]	; (800f448 <HAL_DMA_IRQHandler+0x60c>)
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	2280      	movs	r2, #128	; 0x80
 800f3d2:	02d2      	lsls	r2, r2, #11
 800f3d4:	4694      	mov	ip, r2
 800f3d6:	4463      	add	r3, ip
 800f3d8:	e000      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f3da:	2304      	movs	r3, #4
 800f3dc:	4a19      	ldr	r2, [pc, #100]	; (800f444 <HAL_DMA_IRQHandler+0x608>)
 800f3de:	6053      	str	r3, [r2, #4]
 800f3e0:	e775      	b.n	800f2ce <HAL_DMA_IRQHandler+0x492>
 800f3e2:	2340      	movs	r3, #64	; 0x40
 800f3e4:	e7fa      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f3e6:	2380      	movs	r3, #128	; 0x80
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	e7f7      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f3ec:	2380      	movs	r3, #128	; 0x80
 800f3ee:	01db      	lsls	r3, r3, #7
 800f3f0:	e7f4      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f3f2:	2380      	movs	r3, #128	; 0x80
 800f3f4:	02db      	lsls	r3, r3, #11
 800f3f6:	e7f1      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f3f8:	2380      	movs	r3, #128	; 0x80
 800f3fa:	03db      	lsls	r3, r3, #15
 800f3fc:	e7ee      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f3fe:	2380      	movs	r3, #128	; 0x80
 800f400:	04db      	lsls	r3, r3, #19
 800f402:	e7eb      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f404:	2304      	movs	r3, #4
 800f406:	e7e9      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f408:	2340      	movs	r3, #64	; 0x40
 800f40a:	e7e7      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f40c:	2380      	movs	r3, #128	; 0x80
 800f40e:	00db      	lsls	r3, r3, #3
 800f410:	e7e4      	b.n	800f3dc <HAL_DMA_IRQHandler+0x5a0>
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	40020008 	.word	0x40020008
 800f418:	4002001c 	.word	0x4002001c
 800f41c:	40020030 	.word	0x40020030
 800f420:	40020044 	.word	0x40020044
 800f424:	40020058 	.word	0x40020058
 800f428:	4002006c 	.word	0x4002006c
 800f42c:	40020080 	.word	0x40020080
 800f430:	40020408 	.word	0x40020408
 800f434:	4002041c 	.word	0x4002041c
 800f438:	40020430 	.word	0x40020430
 800f43c:	bffdfbbc 	.word	0xbffdfbbc
 800f440:	fff88000 	.word	0xfff88000
 800f444:	40020000 	.word	0x40020000
 800f448:	fffc4000 	.word	0xfffc4000
 800f44c:	40020400 	.word	0x40020400
 800f450:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f454:	2302      	movs	r3, #2
 800f456:	4003      	ands	r3, r0
 800f458:	1e5a      	subs	r2, r3, #1
 800f45a:	4193      	sbcs	r3, r2
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d100      	bne.n	800f464 <HAL_DMA_IRQHandler+0x628>
 800f462:	e080      	b.n	800f566 <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f464:	680b      	ldr	r3, [r1, #0]
 800f466:	079b      	lsls	r3, r3, #30
 800f468:	d57d      	bpl.n	800f566 <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f46a:	680b      	ldr	r3, [r1, #0]
 800f46c:	069b      	lsls	r3, r3, #26
 800f46e:	d403      	bmi.n	800f478 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800f470:	680b      	ldr	r3, [r1, #0]
 800f472:	2202      	movs	r2, #2
 800f474:	4393      	bics	r3, r2
 800f476:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f478:	6823      	ldr	r3, [r4, #0]
 800f47a:	4a8d      	ldr	r2, [pc, #564]	; (800f6b0 <HAL_DMA_IRQHandler+0x874>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d800      	bhi.n	800f482 <HAL_DMA_IRQHandler+0x646>
 800f480:	e08a      	b.n	800f598 <HAL_DMA_IRQHandler+0x75c>
 800f482:	4a8c      	ldr	r2, [pc, #560]	; (800f6b4 <HAL_DMA_IRQHandler+0x878>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d05e      	beq.n	800f546 <HAL_DMA_IRQHandler+0x70a>
 800f488:	4a8b      	ldr	r2, [pc, #556]	; (800f6b8 <HAL_DMA_IRQHandler+0x87c>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d100      	bne.n	800f490 <HAL_DMA_IRQHandler+0x654>
 800f48e:	e06b      	b.n	800f568 <HAL_DMA_IRQHandler+0x72c>
 800f490:	4a8a      	ldr	r2, [pc, #552]	; (800f6bc <HAL_DMA_IRQHandler+0x880>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d06a      	beq.n	800f56c <HAL_DMA_IRQHandler+0x730>
 800f496:	4a8a      	ldr	r2, [pc, #552]	; (800f6c0 <HAL_DMA_IRQHandler+0x884>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d06a      	beq.n	800f572 <HAL_DMA_IRQHandler+0x736>
 800f49c:	4a89      	ldr	r2, [pc, #548]	; (800f6c4 <HAL_DMA_IRQHandler+0x888>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d06a      	beq.n	800f578 <HAL_DMA_IRQHandler+0x73c>
 800f4a2:	4a89      	ldr	r2, [pc, #548]	; (800f6c8 <HAL_DMA_IRQHandler+0x88c>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d06a      	beq.n	800f57e <HAL_DMA_IRQHandler+0x742>
 800f4a8:	4a81      	ldr	r2, [pc, #516]	; (800f6b0 <HAL_DMA_IRQHandler+0x874>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d06a      	beq.n	800f584 <HAL_DMA_IRQHandler+0x748>
 800f4ae:	4a87      	ldr	r2, [pc, #540]	; (800f6cc <HAL_DMA_IRQHandler+0x890>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d06a      	beq.n	800f58a <HAL_DMA_IRQHandler+0x74e>
 800f4b4:	4a86      	ldr	r2, [pc, #536]	; (800f6d0 <HAL_DMA_IRQHandler+0x894>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d069      	beq.n	800f58e <HAL_DMA_IRQHandler+0x752>
 800f4ba:	4a86      	ldr	r2, [pc, #536]	; (800f6d4 <HAL_DMA_IRQHandler+0x898>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d068      	beq.n	800f592 <HAL_DMA_IRQHandler+0x756>
 800f4c0:	4a85      	ldr	r2, [pc, #532]	; (800f6d8 <HAL_DMA_IRQHandler+0x89c>)
 800f4c2:	4694      	mov	ip, r2
 800f4c4:	4463      	add	r3, ip
 800f4c6:	425a      	negs	r2, r3
 800f4c8:	4153      	adcs	r3, r2
 800f4ca:	425b      	negs	r3, r3
 800f4cc:	4a83      	ldr	r2, [pc, #524]	; (800f6dc <HAL_DMA_IRQHandler+0x8a0>)
 800f4ce:	4013      	ands	r3, r2
 800f4d0:	2280      	movs	r2, #128	; 0x80
 800f4d2:	0292      	lsls	r2, r2, #10
 800f4d4:	4694      	mov	ip, r2
 800f4d6:	4463      	add	r3, ip
 800f4d8:	e036      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f4da:	2320      	movs	r3, #32
 800f4dc:	e7bb      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f4de:	2380      	movs	r3, #128	; 0x80
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	e7b8      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f4e4:	2380      	movs	r3, #128	; 0x80
 800f4e6:	019b      	lsls	r3, r3, #6
 800f4e8:	e7b5      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f4ea:	2380      	movs	r3, #128	; 0x80
 800f4ec:	029b      	lsls	r3, r3, #10
 800f4ee:	e7b2      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f4f0:	2380      	movs	r3, #128	; 0x80
 800f4f2:	039b      	lsls	r3, r3, #14
 800f4f4:	e7af      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f4f6:	2380      	movs	r3, #128	; 0x80
 800f4f8:	049b      	lsls	r3, r3, #18
 800f4fa:	e7ac      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f4fc:	2302      	movs	r3, #2
 800f4fe:	e7aa      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f500:	2320      	movs	r3, #32
 800f502:	e7a8      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f504:	2380      	movs	r3, #128	; 0x80
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	e7a5      	b.n	800f456 <HAL_DMA_IRQHandler+0x61a>
 800f50a:	2302      	movs	r3, #2
 800f50c:	4003      	ands	r3, r0
 800f50e:	1e5a      	subs	r2, r3, #1
 800f510:	4193      	sbcs	r3, r2
 800f512:	b2db      	uxtb	r3, r3
 800f514:	e7a3      	b.n	800f45e <HAL_DMA_IRQHandler+0x622>
 800f516:	2320      	movs	r3, #32
 800f518:	e7f8      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f51a:	2380      	movs	r3, #128	; 0x80
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	e7f5      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f520:	2380      	movs	r3, #128	; 0x80
 800f522:	019b      	lsls	r3, r3, #6
 800f524:	e7f2      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f526:	2380      	movs	r3, #128	; 0x80
 800f528:	029b      	lsls	r3, r3, #10
 800f52a:	e7ef      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f52c:	2380      	movs	r3, #128	; 0x80
 800f52e:	039b      	lsls	r3, r3, #14
 800f530:	e7ec      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f532:	2380      	movs	r3, #128	; 0x80
 800f534:	049b      	lsls	r3, r3, #18
 800f536:	e7e9      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f538:	2302      	movs	r3, #2
 800f53a:	e7e7      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f53c:	2320      	movs	r3, #32
 800f53e:	e7e5      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
 800f540:	2380      	movs	r3, #128	; 0x80
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	e7e2      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f546:	2302      	movs	r3, #2
 800f548:	4a65      	ldr	r2, [pc, #404]	; (800f6e0 <HAL_DMA_IRQHandler+0x8a4>)
 800f54a:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f54c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f54e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f550:	2321      	movs	r3, #33	; 0x21
 800f552:	2201      	movs	r2, #1
 800f554:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f556:	3b01      	subs	r3, #1
 800f558:	2200      	movs	r2, #0
 800f55a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f55c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 800f562:	0020      	movs	r0, r4
 800f564:	4798      	blx	r3
}  
 800f566:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f568:	2320      	movs	r3, #32
 800f56a:	e7ed      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f56c:	2380      	movs	r3, #128	; 0x80
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	e7ea      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f572:	2380      	movs	r3, #128	; 0x80
 800f574:	019b      	lsls	r3, r3, #6
 800f576:	e7e7      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f578:	2380      	movs	r3, #128	; 0x80
 800f57a:	029b      	lsls	r3, r3, #10
 800f57c:	e7e4      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f57e:	2380      	movs	r3, #128	; 0x80
 800f580:	039b      	lsls	r3, r3, #14
 800f582:	e7e1      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f584:	2380      	movs	r3, #128	; 0x80
 800f586:	049b      	lsls	r3, r3, #18
 800f588:	e7de      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f58a:	2302      	movs	r3, #2
 800f58c:	e7dc      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f58e:	2320      	movs	r3, #32
 800f590:	e7da      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f592:	2380      	movs	r3, #128	; 0x80
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	e7d7      	b.n	800f548 <HAL_DMA_IRQHandler+0x70c>
 800f598:	4a46      	ldr	r2, [pc, #280]	; (800f6b4 <HAL_DMA_IRQHandler+0x878>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d027      	beq.n	800f5ee <HAL_DMA_IRQHandler+0x7b2>
 800f59e:	4a46      	ldr	r2, [pc, #280]	; (800f6b8 <HAL_DMA_IRQHandler+0x87c>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d028      	beq.n	800f5f6 <HAL_DMA_IRQHandler+0x7ba>
 800f5a4:	4a45      	ldr	r2, [pc, #276]	; (800f6bc <HAL_DMA_IRQHandler+0x880>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d027      	beq.n	800f5fa <HAL_DMA_IRQHandler+0x7be>
 800f5aa:	4a45      	ldr	r2, [pc, #276]	; (800f6c0 <HAL_DMA_IRQHandler+0x884>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d027      	beq.n	800f600 <HAL_DMA_IRQHandler+0x7c4>
 800f5b0:	4a44      	ldr	r2, [pc, #272]	; (800f6c4 <HAL_DMA_IRQHandler+0x888>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d027      	beq.n	800f606 <HAL_DMA_IRQHandler+0x7ca>
 800f5b6:	4a44      	ldr	r2, [pc, #272]	; (800f6c8 <HAL_DMA_IRQHandler+0x88c>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d027      	beq.n	800f60c <HAL_DMA_IRQHandler+0x7d0>
 800f5bc:	4a3c      	ldr	r2, [pc, #240]	; (800f6b0 <HAL_DMA_IRQHandler+0x874>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d027      	beq.n	800f612 <HAL_DMA_IRQHandler+0x7d6>
 800f5c2:	4a42      	ldr	r2, [pc, #264]	; (800f6cc <HAL_DMA_IRQHandler+0x890>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d027      	beq.n	800f618 <HAL_DMA_IRQHandler+0x7dc>
 800f5c8:	4a41      	ldr	r2, [pc, #260]	; (800f6d0 <HAL_DMA_IRQHandler+0x894>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d026      	beq.n	800f61c <HAL_DMA_IRQHandler+0x7e0>
 800f5ce:	4a41      	ldr	r2, [pc, #260]	; (800f6d4 <HAL_DMA_IRQHandler+0x898>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d025      	beq.n	800f620 <HAL_DMA_IRQHandler+0x7e4>
 800f5d4:	4a40      	ldr	r2, [pc, #256]	; (800f6d8 <HAL_DMA_IRQHandler+0x89c>)
 800f5d6:	4694      	mov	ip, r2
 800f5d8:	4463      	add	r3, ip
 800f5da:	425a      	negs	r2, r3
 800f5dc:	4153      	adcs	r3, r2
 800f5de:	425b      	negs	r3, r3
 800f5e0:	4a3e      	ldr	r2, [pc, #248]	; (800f6dc <HAL_DMA_IRQHandler+0x8a0>)
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	2280      	movs	r2, #128	; 0x80
 800f5e6:	0292      	lsls	r2, r2, #10
 800f5e8:	4694      	mov	ip, r2
 800f5ea:	4463      	add	r3, ip
 800f5ec:	e000      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f5ee:	2302      	movs	r3, #2
 800f5f0:	4a3c      	ldr	r2, [pc, #240]	; (800f6e4 <HAL_DMA_IRQHandler+0x8a8>)
 800f5f2:	6053      	str	r3, [r2, #4]
 800f5f4:	e7aa      	b.n	800f54c <HAL_DMA_IRQHandler+0x710>
 800f5f6:	2320      	movs	r3, #32
 800f5f8:	e7fa      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f5fa:	2380      	movs	r3, #128	; 0x80
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	e7f7      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f600:	2380      	movs	r3, #128	; 0x80
 800f602:	019b      	lsls	r3, r3, #6
 800f604:	e7f4      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f606:	2380      	movs	r3, #128	; 0x80
 800f608:	029b      	lsls	r3, r3, #10
 800f60a:	e7f1      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f60c:	2380      	movs	r3, #128	; 0x80
 800f60e:	039b      	lsls	r3, r3, #14
 800f610:	e7ee      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f612:	2380      	movs	r3, #128	; 0x80
 800f614:	049b      	lsls	r3, r3, #18
 800f616:	e7eb      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f618:	2302      	movs	r3, #2
 800f61a:	e7e9      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f61c:	2320      	movs	r3, #32
 800f61e:	e7e7      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
 800f620:	2380      	movs	r3, #128	; 0x80
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	e7e4      	b.n	800f5f0 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f626:	6821      	ldr	r1, [r4, #0]
 800f628:	4b2e      	ldr	r3, [pc, #184]	; (800f6e4 <HAL_DMA_IRQHandler+0x8a8>)
 800f62a:	6818      	ldr	r0, [r3, #0]
 800f62c:	4a21      	ldr	r2, [pc, #132]	; (800f6b4 <HAL_DMA_IRQHandler+0x878>)
 800f62e:	4291      	cmp	r1, r2
 800f630:	d100      	bne.n	800f634 <HAL_DMA_IRQHandler+0x7f8>
 800f632:	e76a      	b.n	800f50a <HAL_DMA_IRQHandler+0x6ce>
 800f634:	4a20      	ldr	r2, [pc, #128]	; (800f6b8 <HAL_DMA_IRQHandler+0x87c>)
 800f636:	4291      	cmp	r1, r2
 800f638:	d100      	bne.n	800f63c <HAL_DMA_IRQHandler+0x800>
 800f63a:	e76c      	b.n	800f516 <HAL_DMA_IRQHandler+0x6da>
 800f63c:	4a1f      	ldr	r2, [pc, #124]	; (800f6bc <HAL_DMA_IRQHandler+0x880>)
 800f63e:	4291      	cmp	r1, r2
 800f640:	d100      	bne.n	800f644 <HAL_DMA_IRQHandler+0x808>
 800f642:	e76a      	b.n	800f51a <HAL_DMA_IRQHandler+0x6de>
 800f644:	4a1e      	ldr	r2, [pc, #120]	; (800f6c0 <HAL_DMA_IRQHandler+0x884>)
 800f646:	4291      	cmp	r1, r2
 800f648:	d100      	bne.n	800f64c <HAL_DMA_IRQHandler+0x810>
 800f64a:	e769      	b.n	800f520 <HAL_DMA_IRQHandler+0x6e4>
 800f64c:	4b1d      	ldr	r3, [pc, #116]	; (800f6c4 <HAL_DMA_IRQHandler+0x888>)
 800f64e:	4299      	cmp	r1, r3
 800f650:	d100      	bne.n	800f654 <HAL_DMA_IRQHandler+0x818>
 800f652:	e768      	b.n	800f526 <HAL_DMA_IRQHandler+0x6ea>
 800f654:	4b1c      	ldr	r3, [pc, #112]	; (800f6c8 <HAL_DMA_IRQHandler+0x88c>)
 800f656:	4299      	cmp	r1, r3
 800f658:	d100      	bne.n	800f65c <HAL_DMA_IRQHandler+0x820>
 800f65a:	e767      	b.n	800f52c <HAL_DMA_IRQHandler+0x6f0>
 800f65c:	4b14      	ldr	r3, [pc, #80]	; (800f6b0 <HAL_DMA_IRQHandler+0x874>)
 800f65e:	4299      	cmp	r1, r3
 800f660:	d100      	bne.n	800f664 <HAL_DMA_IRQHandler+0x828>
 800f662:	e766      	b.n	800f532 <HAL_DMA_IRQHandler+0x6f6>
 800f664:	4b19      	ldr	r3, [pc, #100]	; (800f6cc <HAL_DMA_IRQHandler+0x890>)
 800f666:	4299      	cmp	r1, r3
 800f668:	d100      	bne.n	800f66c <HAL_DMA_IRQHandler+0x830>
 800f66a:	e765      	b.n	800f538 <HAL_DMA_IRQHandler+0x6fc>
 800f66c:	4b18      	ldr	r3, [pc, #96]	; (800f6d0 <HAL_DMA_IRQHandler+0x894>)
 800f66e:	4299      	cmp	r1, r3
 800f670:	d100      	bne.n	800f674 <HAL_DMA_IRQHandler+0x838>
 800f672:	e763      	b.n	800f53c <HAL_DMA_IRQHandler+0x700>
 800f674:	4b17      	ldr	r3, [pc, #92]	; (800f6d4 <HAL_DMA_IRQHandler+0x898>)
 800f676:	4299      	cmp	r1, r3
 800f678:	d100      	bne.n	800f67c <HAL_DMA_IRQHandler+0x840>
 800f67a:	e761      	b.n	800f540 <HAL_DMA_IRQHandler+0x704>
 800f67c:	4b16      	ldr	r3, [pc, #88]	; (800f6d8 <HAL_DMA_IRQHandler+0x89c>)
 800f67e:	18ca      	adds	r2, r1, r3
 800f680:	4253      	negs	r3, r2
 800f682:	415a      	adcs	r2, r3
 800f684:	4252      	negs	r2, r2
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <HAL_DMA_IRQHandler+0x8a0>)
 800f688:	4013      	ands	r3, r2
 800f68a:	2280      	movs	r2, #128	; 0x80
 800f68c:	0292      	lsls	r2, r2, #10
 800f68e:	4694      	mov	ip, r2
 800f690:	4463      	add	r3, ip
 800f692:	e73b      	b.n	800f50c <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	0712      	lsls	r2, r2, #28
 800f698:	d500      	bpl.n	800f69c <HAL_DMA_IRQHandler+0x860>
 800f69a:	e4d2      	b.n	800f042 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	e482      	b.n	800efa6 <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	0712      	lsls	r2, r2, #28
 800f6a4:	d500      	bpl.n	800f6a8 <HAL_DMA_IRQHandler+0x86c>
 800f6a6:	e4cc      	b.n	800f042 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	f7ff fbfe 	bl	800eeaa <HAL_DMA_IRQHandler+0x6e>
 800f6ae:	46c0      	nop			; (mov r8, r8)
 800f6b0:	40020080 	.word	0x40020080
 800f6b4:	40020008 	.word	0x40020008
 800f6b8:	4002001c 	.word	0x4002001c
 800f6bc:	40020030 	.word	0x40020030
 800f6c0:	40020044 	.word	0x40020044
 800f6c4:	40020058 	.word	0x40020058
 800f6c8:	4002006c 	.word	0x4002006c
 800f6cc:	40020408 	.word	0x40020408
 800f6d0:	4002041c 	.word	0x4002041c
 800f6d4:	40020430 	.word	0x40020430
 800f6d8:	bffdfbbc 	.word	0xbffdfbbc
 800f6dc:	fffe2000 	.word	0xfffe2000
 800f6e0:	40020400 	.word	0x40020400
 800f6e4:	40020000 	.word	0x40020000

0800f6e8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f6e8:	4b0a      	ldr	r3, [pc, #40]	; (800f714 <FLASH_SetErrorCode+0x2c>)
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	06db      	lsls	r3, r3, #27
 800f6ee:	d504      	bpl.n	800f6fa <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f6f0:	4a09      	ldr	r2, [pc, #36]	; (800f718 <FLASH_SetErrorCode+0x30>)
 800f6f2:	69d3      	ldr	r3, [r2, #28]
 800f6f4:	2102      	movs	r1, #2
 800f6f6:	430b      	orrs	r3, r1
 800f6f8:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f6fa:	4b06      	ldr	r3, [pc, #24]	; (800f714 <FLASH_SetErrorCode+0x2c>)
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	075b      	lsls	r3, r3, #29
 800f700:	d504      	bpl.n	800f70c <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800f702:	4a05      	ldr	r2, [pc, #20]	; (800f718 <FLASH_SetErrorCode+0x30>)
 800f704:	69d3      	ldr	r3, [r2, #28]
 800f706:	2101      	movs	r1, #1
 800f708:	430b      	orrs	r3, r1
 800f70a:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800f70c:	4b01      	ldr	r3, [pc, #4]	; (800f714 <FLASH_SetErrorCode+0x2c>)
 800f70e:	2214      	movs	r2, #20
 800f710:	60da      	str	r2, [r3, #12]
}  
 800f712:	4770      	bx	lr
 800f714:	40022000 	.word	0x40022000
 800f718:	20006a60 	.word	0x20006a60

0800f71c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800f71c:	4b06      	ldr	r3, [pc, #24]	; (800f738 <HAL_FLASH_Unlock+0x1c>)
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	061b      	lsls	r3, r3, #24
 800f722:	d506      	bpl.n	800f732 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f724:	4b04      	ldr	r3, [pc, #16]	; (800f738 <HAL_FLASH_Unlock+0x1c>)
 800f726:	4a05      	ldr	r2, [pc, #20]	; (800f73c <HAL_FLASH_Unlock+0x20>)
 800f728:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f72a:	4a05      	ldr	r2, [pc, #20]	; (800f740 <HAL_FLASH_Unlock+0x24>)
 800f72c:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 800f72e:	2000      	movs	r0, #0
}
 800f730:	4770      	bx	lr
    return HAL_ERROR;
 800f732:	2001      	movs	r0, #1
 800f734:	e7fc      	b.n	800f730 <HAL_FLASH_Unlock+0x14>
 800f736:	46c0      	nop			; (mov r8, r8)
 800f738:	40022000 	.word	0x40022000
 800f73c:	45670123 	.word	0x45670123
 800f740:	cdef89ab 	.word	0xcdef89ab

0800f744 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800f744:	4a03      	ldr	r2, [pc, #12]	; (800f754 <HAL_FLASH_Lock+0x10>)
 800f746:	6913      	ldr	r3, [r2, #16]
 800f748:	2180      	movs	r1, #128	; 0x80
 800f74a:	430b      	orrs	r3, r1
 800f74c:	6113      	str	r3, [r2, #16]
}
 800f74e:	2000      	movs	r0, #0
 800f750:	4770      	bx	lr
 800f752:	46c0      	nop			; (mov r8, r8)
 800f754:	40022000 	.word	0x40022000

0800f758 <FLASH_WaitForLastOperation>:
{
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f75c:	f7ff f91e 	bl	800e99c <HAL_GetTick>
 800f760:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f762:	4e13      	ldr	r6, [pc, #76]	; (800f7b0 <FLASH_WaitForLastOperation+0x58>)
 800f764:	2501      	movs	r5, #1
 800f766:	68f3      	ldr	r3, [r6, #12]
 800f768:	421d      	tst	r5, r3
 800f76a:	d00a      	beq.n	800f782 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800f76c:	1c63      	adds	r3, r4, #1
 800f76e:	d0fa      	beq.n	800f766 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f770:	2c00      	cmp	r4, #0
 800f772:	d01b      	beq.n	800f7ac <FLASH_WaitForLastOperation+0x54>
 800f774:	f7ff f912 	bl	800e99c <HAL_GetTick>
 800f778:	1bc0      	subs	r0, r0, r7
 800f77a:	42a0      	cmp	r0, r4
 800f77c:	d9f3      	bls.n	800f766 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 800f77e:	2003      	movs	r0, #3
 800f780:	e00f      	b.n	800f7a2 <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f782:	4b0b      	ldr	r3, [pc, #44]	; (800f7b0 <FLASH_WaitForLastOperation+0x58>)
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	069b      	lsls	r3, r3, #26
 800f788:	d502      	bpl.n	800f790 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <FLASH_WaitForLastOperation+0x58>)
 800f78c:	2220      	movs	r2, #32
 800f78e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <FLASH_WaitForLastOperation+0x58>)
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	06db      	lsls	r3, r3, #27
 800f796:	d405      	bmi.n	800f7a4 <FLASH_WaitForLastOperation+0x4c>
 800f798:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <FLASH_WaitForLastOperation+0x58>)
 800f79a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 800f79c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f79e:	075b      	lsls	r3, r3, #29
 800f7a0:	d400      	bmi.n	800f7a4 <FLASH_WaitForLastOperation+0x4c>
}
 800f7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 800f7a4:	f7ff ffa0 	bl	800f6e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f7a8:	2001      	movs	r0, #1
 800f7aa:	e7fa      	b.n	800f7a2 <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 800f7ac:	2003      	movs	r0, #3
 800f7ae:	e7f8      	b.n	800f7a2 <FLASH_WaitForLastOperation+0x4a>
 800f7b0:	40022000 	.word	0x40022000

0800f7b4 <HAL_FLASH_Program>:
{
 800f7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7b6:	46de      	mov	lr, fp
 800f7b8:	4657      	mov	r7, sl
 800f7ba:	464e      	mov	r6, r9
 800f7bc:	4645      	mov	r5, r8
 800f7be:	b5e0      	push	{r5, r6, r7, lr}
 800f7c0:	b083      	sub	sp, #12
 800f7c2:	0004      	movs	r4, r0
 800f7c4:	000e      	movs	r6, r1
 800f7c6:	9201      	str	r2, [sp, #4]
 800f7c8:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800f7ca:	4b2a      	ldr	r3, [pc, #168]	; (800f874 <HAL_FLASH_Program+0xc0>)
 800f7cc:	7e1b      	ldrb	r3, [r3, #24]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d04e      	beq.n	800f870 <HAL_FLASH_Program+0xbc>
 800f7d2:	4b28      	ldr	r3, [pc, #160]	; (800f874 <HAL_FLASH_Program+0xc0>)
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f7d8:	4827      	ldr	r0, [pc, #156]	; (800f878 <HAL_FLASH_Program+0xc4>)
 800f7da:	f7ff ffbd 	bl	800f758 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d13c      	bne.n	800f85c <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800f7e2:	2c01      	cmp	r4, #1
 800f7e4:	d010      	beq.n	800f808 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 800f7e6:	3c02      	subs	r4, #2
 800f7e8:	4260      	negs	r0, r4
 800f7ea:	4144      	adcs	r4, r0
 800f7ec:	4264      	negs	r4, r4
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	439c      	bics	r4, r3
 800f7f2:	46a0      	mov	r8, r4
 800f7f4:	3303      	adds	r3, #3
 800f7f6:	469c      	mov	ip, r3
 800f7f8:	44e0      	add	r8, ip
 800f7fa:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7fc:	4b1d      	ldr	r3, [pc, #116]	; (800f874 <HAL_FLASH_Program+0xc0>)
 800f7fe:	469b      	mov	fp, r3
 800f800:	2300      	movs	r3, #0
 800f802:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f804:	4c1d      	ldr	r4, [pc, #116]	; (800f87c <HAL_FLASH_Program+0xc8>)
 800f806:	e021      	b.n	800f84c <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 800f808:	2301      	movs	r3, #1
 800f80a:	4698      	mov	r8, r3
 800f80c:	e7f5      	b.n	800f7fa <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800f80e:	2220      	movs	r2, #32
 800f810:	1ad2      	subs	r2, r2, r3
 800f812:	4649      	mov	r1, r9
 800f814:	4091      	lsls	r1, r2
 800f816:	000a      	movs	r2, r1
 800f818:	9901      	ldr	r1, [sp, #4]
 800f81a:	40d9      	lsrs	r1, r3
 800f81c:	000b      	movs	r3, r1
 800f81e:	4313      	orrs	r3, r2
 800f820:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f822:	465a      	mov	r2, fp
 800f824:	4651      	mov	r1, sl
 800f826:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f828:	6922      	ldr	r2, [r4, #16]
 800f82a:	2701      	movs	r7, #1
 800f82c:	433a      	orrs	r2, r7
 800f82e:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 800f830:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f832:	4811      	ldr	r0, [pc, #68]	; (800f878 <HAL_FLASH_Program+0xc4>)
 800f834:	f7ff ff90 	bl	800f758 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	43bb      	bics	r3, r7
 800f83c:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 800f83e:	2800      	cmp	r0, #0
 800f840:	d10c      	bne.n	800f85c <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 800f842:	3501      	adds	r5, #1
 800f844:	3602      	adds	r6, #2
 800f846:	b2eb      	uxtb	r3, r5
 800f848:	4598      	cmp	r8, r3
 800f84a:	d907      	bls.n	800f85c <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800f84c:	012b      	lsls	r3, r5, #4
 800f84e:	2220      	movs	r2, #32
 800f850:	4252      	negs	r2, r2
 800f852:	189a      	adds	r2, r3, r2
 800f854:	d4db      	bmi.n	800f80e <HAL_FLASH_Program+0x5a>
 800f856:	464b      	mov	r3, r9
 800f858:	40d3      	lsrs	r3, r2
 800f85a:	e7e1      	b.n	800f820 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 800f85c:	4b05      	ldr	r3, [pc, #20]	; (800f874 <HAL_FLASH_Program+0xc0>)
 800f85e:	2200      	movs	r2, #0
 800f860:	761a      	strb	r2, [r3, #24]
}
 800f862:	b003      	add	sp, #12
 800f864:	bcf0      	pop	{r4, r5, r6, r7}
 800f866:	46bb      	mov	fp, r7
 800f868:	46b2      	mov	sl, r6
 800f86a:	46a9      	mov	r9, r5
 800f86c:	46a0      	mov	r8, r4
 800f86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800f870:	2002      	movs	r0, #2
 800f872:	e7f6      	b.n	800f862 <HAL_FLASH_Program+0xae>
 800f874:	20006a60 	.word	0x20006a60
 800f878:	0000c350 	.word	0x0000c350
 800f87c:	40022000 	.word	0x40022000

0800f880 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f880:	4b06      	ldr	r3, [pc, #24]	; (800f89c <FLASH_MassErase+0x1c>)
 800f882:	2200      	movs	r2, #0
 800f884:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800f886:	4b06      	ldr	r3, [pc, #24]	; (800f8a0 <FLASH_MassErase+0x20>)
 800f888:	691a      	ldr	r2, [r3, #16]
 800f88a:	2104      	movs	r1, #4
 800f88c:	430a      	orrs	r2, r1
 800f88e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800f890:	691a      	ldr	r2, [r3, #16]
 800f892:	313c      	adds	r1, #60	; 0x3c
 800f894:	430a      	orrs	r2, r1
 800f896:	611a      	str	r2, [r3, #16]
}
 800f898:	4770      	bx	lr
 800f89a:	46c0      	nop			; (mov r8, r8)
 800f89c:	20006a60 	.word	0x20006a60
 800f8a0:	40022000 	.word	0x40022000

0800f8a4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f8a4:	4b06      	ldr	r3, [pc, #24]	; (800f8c0 <FLASH_PageErase+0x1c>)
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800f8aa:	4b06      	ldr	r3, [pc, #24]	; (800f8c4 <FLASH_PageErase+0x20>)
 800f8ac:	691a      	ldr	r2, [r3, #16]
 800f8ae:	2102      	movs	r1, #2
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800f8b4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800f8b6:	691a      	ldr	r2, [r3, #16]
 800f8b8:	313e      	adds	r1, #62	; 0x3e
 800f8ba:	430a      	orrs	r2, r1
 800f8bc:	611a      	str	r2, [r3, #16]
}
 800f8be:	4770      	bx	lr
 800f8c0:	20006a60 	.word	0x20006a60
 800f8c4:	40022000 	.word	0x40022000

0800f8c8 <HAL_FLASHEx_Erase>:
{
 800f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ca:	46ce      	mov	lr, r9
 800f8cc:	4647      	mov	r7, r8
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	0005      	movs	r5, r0
 800f8d2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f8d4:	4b2a      	ldr	r3, [pc, #168]	; (800f980 <HAL_FLASHEx_Erase+0xb8>)
 800f8d6:	7e1b      	ldrb	r3, [r3, #24]
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d04e      	beq.n	800f97a <HAL_FLASHEx_Erase+0xb2>
 800f8dc:	4b28      	ldr	r3, [pc, #160]	; (800f980 <HAL_FLASHEx_Erase+0xb8>)
 800f8de:	2201      	movs	r2, #1
 800f8e0:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f8e2:	6803      	ldr	r3, [r0, #0]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d02a      	beq.n	800f93e <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f8e8:	4826      	ldr	r0, [pc, #152]	; (800f984 <HAL_FLASHEx_Erase+0xbc>)
 800f8ea:	f7ff ff35 	bl	800f758 <FLASH_WaitForLastOperation>
 800f8ee:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800f8f0:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d12a      	bne.n	800f94c <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 800f8fc:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800f8fe:	68ab      	ldr	r3, [r5, #8]
 800f900:	02db      	lsls	r3, r3, #11
 800f902:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 800f904:	429c      	cmp	r4, r3
 800f906:	d236      	bcs.n	800f976 <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f908:	4b1e      	ldr	r3, [pc, #120]	; (800f984 <HAL_FLASHEx_Erase+0xbc>)
 800f90a:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f90c:	4e1e      	ldr	r6, [pc, #120]	; (800f988 <HAL_FLASHEx_Erase+0xc0>)
 800f90e:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 800f910:	0020      	movs	r0, r4
 800f912:	f7ff ffc7 	bl	800f8a4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f916:	4648      	mov	r0, r9
 800f918:	f7ff ff1e 	bl	800f758 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f91c:	6933      	ldr	r3, [r6, #16]
 800f91e:	43bb      	bics	r3, r7
 800f920:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 800f922:	2800      	cmp	r0, #0
 800f924:	d124      	bne.n	800f970 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 800f926:	2380      	movs	r3, #128	; 0x80
 800f928:	011b      	lsls	r3, r3, #4
 800f92a:	469c      	mov	ip, r3
 800f92c:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800f92e:	68ab      	ldr	r3, [r5, #8]
 800f930:	02db      	lsls	r3, r3, #11
 800f932:	686a      	ldr	r2, [r5, #4]
 800f934:	4694      	mov	ip, r2
 800f936:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800f938:	42a3      	cmp	r3, r4
 800f93a:	d8e9      	bhi.n	800f910 <HAL_FLASHEx_Erase+0x48>
 800f93c:	e006      	b.n	800f94c <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f93e:	4811      	ldr	r0, [pc, #68]	; (800f984 <HAL_FLASHEx_Erase+0xbc>)
 800f940:	f7ff ff0a 	bl	800f758 <FLASH_WaitForLastOperation>
 800f944:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800f946:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d006      	beq.n	800f95a <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 800f94c:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <HAL_FLASHEx_Erase+0xb8>)
 800f94e:	2200      	movs	r2, #0
 800f950:	761a      	strb	r2, [r3, #24]
}
 800f952:	bcc0      	pop	{r6, r7}
 800f954:	46b9      	mov	r9, r7
 800f956:	46b0      	mov	r8, r6
 800f958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 800f95a:	f7ff ff91 	bl	800f880 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f95e:	4809      	ldr	r0, [pc, #36]	; (800f984 <HAL_FLASHEx_Erase+0xbc>)
 800f960:	f7ff fefa 	bl	800f758 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800f964:	4a08      	ldr	r2, [pc, #32]	; (800f988 <HAL_FLASHEx_Erase+0xc0>)
 800f966:	6913      	ldr	r3, [r2, #16]
 800f968:	2104      	movs	r1, #4
 800f96a:	438b      	bics	r3, r1
 800f96c:	6113      	str	r3, [r2, #16]
 800f96e:	e7ed      	b.n	800f94c <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 800f970:	4643      	mov	r3, r8
 800f972:	601c      	str	r4, [r3, #0]
            break;
 800f974:	e7ea      	b.n	800f94c <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 800f976:	2001      	movs	r0, #1
 800f978:	e7e8      	b.n	800f94c <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 800f97a:	2002      	movs	r0, #2
 800f97c:	e7e9      	b.n	800f952 <HAL_FLASHEx_Erase+0x8a>
 800f97e:	46c0      	nop			; (mov r8, r8)
 800f980:	20006a60 	.word	0x20006a60
 800f984:	0000c350 	.word	0x0000c350
 800f988:	40022000 	.word	0x40022000

0800f98c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800f98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f98e:	46de      	mov	lr, fp
 800f990:	4657      	mov	r7, sl
 800f992:	464e      	mov	r6, r9
 800f994:	4645      	mov	r5, r8
 800f996:	b5e0      	push	{r5, r6, r7, lr}
 800f998:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 800f99a:	680a      	ldr	r2, [r1, #0]
 800f99c:	2a00      	cmp	r2, #0
 800f99e:	d100      	bne.n	800f9a2 <HAL_GPIO_Init+0x16>
 800f9a0:	e0c9      	b.n	800fb36 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 800f9a2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800f9a4:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800f9a6:	2510      	movs	r5, #16
 800f9a8:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800f9aa:	2580      	movs	r5, #128	; 0x80
 800f9ac:	056d      	lsls	r5, r5, #21
 800f9ae:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f9b0:	4d64      	ldr	r5, [pc, #400]	; (800fb44 <HAL_GPIO_Init+0x1b8>)
 800f9b2:	1945      	adds	r5, r0, r5
 800f9b4:	1e6e      	subs	r6, r5, #1
 800f9b6:	41b5      	sbcs	r5, r6
 800f9b8:	3504      	adds	r5, #4
 800f9ba:	46a9      	mov	r9, r5
 800f9bc:	e044      	b.n	800fa48 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 800f9be:	08da      	lsrs	r2, r3, #3
 800f9c0:	0092      	lsls	r2, r2, #2
 800f9c2:	1882      	adds	r2, r0, r2
 800f9c4:	9201      	str	r2, [sp, #4]
 800f9c6:	6a15      	ldr	r5, [r2, #32]
 800f9c8:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 800f9ca:	2507      	movs	r5, #7
 800f9cc:	401d      	ands	r5, r3
 800f9ce:	00ad      	lsls	r5, r5, #2
 800f9d0:	270f      	movs	r7, #15
 800f9d2:	40af      	lsls	r7, r5
 800f9d4:	46bb      	mov	fp, r7
 800f9d6:	4657      	mov	r7, sl
 800f9d8:	465a      	mov	r2, fp
 800f9da:	4397      	bics	r7, r2
 800f9dc:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 800f9de:	690f      	ldr	r7, [r1, #16]
 800f9e0:	40af      	lsls	r7, r5
 800f9e2:	003d      	movs	r5, r7
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 800f9e8:	9a01      	ldr	r2, [sp, #4]
 800f9ea:	6215      	str	r5, [r2, #32]
 800f9ec:	e037      	b.n	800fa5e <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f9ee:	2500      	movs	r5, #0
 800f9f0:	465f      	mov	r7, fp
 800f9f2:	40bd      	lsls	r5, r7
 800f9f4:	4657      	mov	r7, sl
 800f9f6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800f9f8:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f9fa:	4a53      	ldr	r2, [pc, #332]	; (800fb48 <HAL_GPIO_Init+0x1bc>)
 800f9fc:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800f9fe:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fa00:	684f      	ldr	r7, [r1, #4]
 800fa02:	03ff      	lsls	r7, r7, #15
 800fa04:	d500      	bpl.n	800fa08 <HAL_GPIO_Init+0x7c>
 800fa06:	e08e      	b.n	800fb26 <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800fa08:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 800fa0a:	4f4f      	ldr	r7, [pc, #316]	; (800fb48 <HAL_GPIO_Init+0x1bc>)
 800fa0c:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 800fa0e:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fa10:	684f      	ldr	r7, [r1, #4]
 800fa12:	03bf      	lsls	r7, r7, #14
 800fa14:	d500      	bpl.n	800fa18 <HAL_GPIO_Init+0x8c>
 800fa16:	e088      	b.n	800fb2a <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800fa18:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800fa1a:	4f4b      	ldr	r7, [pc, #300]	; (800fb48 <HAL_GPIO_Init+0x1bc>)
 800fa1c:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fa1e:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fa20:	684f      	ldr	r7, [r1, #4]
 800fa22:	02ff      	lsls	r7, r7, #11
 800fa24:	d500      	bpl.n	800fa28 <HAL_GPIO_Init+0x9c>
 800fa26:	e082      	b.n	800fb2e <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800fa28:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 800fa2a:	4f47      	ldr	r7, [pc, #284]	; (800fb48 <HAL_GPIO_Init+0x1bc>)
 800fa2c:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 800fa2e:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fa30:	684f      	ldr	r7, [r1, #4]
 800fa32:	02bf      	lsls	r7, r7, #10
 800fa34:	d47d      	bmi.n	800fb32 <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800fa36:	402a      	ands	r2, r5
 800fa38:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 800fa3a:	4a43      	ldr	r2, [pc, #268]	; (800fb48 <HAL_GPIO_Init+0x1bc>)
 800fa3c:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 800fa3e:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 800fa40:	680a      	ldr	r2, [r1, #0]
 800fa42:	0015      	movs	r5, r2
 800fa44:	40dd      	lsrs	r5, r3
 800fa46:	d076      	beq.n	800fb36 <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800fa48:	0025      	movs	r5, r4
 800fa4a:	409d      	lsls	r5, r3
 800fa4c:	0016      	movs	r6, r2
 800fa4e:	402e      	ands	r6, r5
    if(iocurrent)
 800fa50:	422a      	tst	r2, r5
 800fa52:	d0f4      	beq.n	800fa3e <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800fa54:	684a      	ldr	r2, [r1, #4]
 800fa56:	4665      	mov	r5, ip
 800fa58:	43aa      	bics	r2, r5
 800fa5a:	2a02      	cmp	r2, #2
 800fa5c:	d0af      	beq.n	800f9be <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800fa5e:	6802      	ldr	r2, [r0, #0]
 800fa60:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800fa62:	005d      	lsls	r5, r3, #1
 800fa64:	2203      	movs	r2, #3
 800fa66:	40aa      	lsls	r2, r5
 800fa68:	43d7      	mvns	r7, r2
 800fa6a:	46ba      	mov	sl, r7
 800fa6c:	465f      	mov	r7, fp
 800fa6e:	4397      	bics	r7, r2
 800fa70:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800fa72:	684a      	ldr	r2, [r1, #4]
 800fa74:	2703      	movs	r7, #3
 800fa76:	403a      	ands	r2, r7
 800fa78:	40aa      	lsls	r2, r5
 800fa7a:	465f      	mov	r7, fp
 800fa7c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800fa7e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fa80:	684a      	ldr	r2, [r1, #4]
 800fa82:	4667      	mov	r7, ip
 800fa84:	43ba      	bics	r2, r7
 800fa86:	3a01      	subs	r2, #1
 800fa88:	2a01      	cmp	r2, #1
 800fa8a:	d812      	bhi.n	800fab2 <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 800fa8c:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800fa8e:	4657      	mov	r7, sl
 800fa90:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800fa92:	68ca      	ldr	r2, [r1, #12]
 800fa94:	40aa      	lsls	r2, r5
 800fa96:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 800fa98:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800fa9a:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800fa9c:	0027      	movs	r7, r4
 800fa9e:	409f      	lsls	r7, r3
 800faa0:	43ba      	bics	r2, r7
 800faa2:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800faa4:	684a      	ldr	r2, [r1, #4]
 800faa6:	0912      	lsrs	r2, r2, #4
 800faa8:	4022      	ands	r2, r4
 800faaa:	409a      	lsls	r2, r3
 800faac:	465f      	mov	r7, fp
 800faae:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 800fab0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800fab2:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800fab4:	4657      	mov	r7, sl
 800fab6:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800fab8:	688a      	ldr	r2, [r1, #8]
 800faba:	40aa      	lsls	r2, r5
 800fabc:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 800fabe:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800fac0:	684a      	ldr	r2, [r1, #4]
 800fac2:	4645      	mov	r5, r8
 800fac4:	422a      	tst	r2, r5
 800fac6:	d0ba      	beq.n	800fa3e <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fac8:	4a20      	ldr	r2, [pc, #128]	; (800fb4c <HAL_GPIO_Init+0x1c0>)
 800faca:	6995      	ldr	r5, [r2, #24]
 800facc:	4325      	orrs	r5, r4
 800face:	6195      	str	r5, [r2, #24]
 800fad0:	6992      	ldr	r2, [r2, #24]
 800fad2:	4022      	ands	r2, r4
 800fad4:	9203      	str	r2, [sp, #12]
 800fad6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800fad8:	089a      	lsrs	r2, r3, #2
 800fada:	0092      	lsls	r2, r2, #2
 800fadc:	4d1c      	ldr	r5, [pc, #112]	; (800fb50 <HAL_GPIO_Init+0x1c4>)
 800fade:	46aa      	mov	sl, r5
 800fae0:	4452      	add	r2, sl
 800fae2:	6895      	ldr	r5, [r2, #8]
 800fae4:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800fae6:	2503      	movs	r5, #3
 800fae8:	401d      	ands	r5, r3
 800faea:	00ad      	lsls	r5, r5, #2
 800faec:	46ab      	mov	fp, r5
 800faee:	250f      	movs	r5, #15
 800faf0:	465f      	mov	r7, fp
 800faf2:	40bd      	lsls	r5, r7
 800faf4:	4657      	mov	r7, sl
 800faf6:	43af      	bics	r7, r5
 800faf8:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800fafa:	2590      	movs	r5, #144	; 0x90
 800fafc:	05ed      	lsls	r5, r5, #23
 800fafe:	42a8      	cmp	r0, r5
 800fb00:	d100      	bne.n	800fb04 <HAL_GPIO_Init+0x178>
 800fb02:	e774      	b.n	800f9ee <HAL_GPIO_Init+0x62>
 800fb04:	4d13      	ldr	r5, [pc, #76]	; (800fb54 <HAL_GPIO_Init+0x1c8>)
 800fb06:	42a8      	cmp	r0, r5
 800fb08:	d007      	beq.n	800fb1a <HAL_GPIO_Init+0x18e>
 800fb0a:	4d13      	ldr	r5, [pc, #76]	; (800fb58 <HAL_GPIO_Init+0x1cc>)
 800fb0c:	42a8      	cmp	r0, r5
 800fb0e:	d006      	beq.n	800fb1e <HAL_GPIO_Init+0x192>
 800fb10:	4d12      	ldr	r5, [pc, #72]	; (800fb5c <HAL_GPIO_Init+0x1d0>)
 800fb12:	42a8      	cmp	r0, r5
 800fb14:	d005      	beq.n	800fb22 <HAL_GPIO_Init+0x196>
 800fb16:	464d      	mov	r5, r9
 800fb18:	e76a      	b.n	800f9f0 <HAL_GPIO_Init+0x64>
 800fb1a:	0025      	movs	r5, r4
 800fb1c:	e768      	b.n	800f9f0 <HAL_GPIO_Init+0x64>
 800fb1e:	2502      	movs	r5, #2
 800fb20:	e766      	b.n	800f9f0 <HAL_GPIO_Init+0x64>
 800fb22:	2503      	movs	r5, #3
 800fb24:	e764      	b.n	800f9f0 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 800fb26:	4332      	orrs	r2, r6
 800fb28:	e76f      	b.n	800fa0a <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 800fb2a:	4332      	orrs	r2, r6
 800fb2c:	e775      	b.n	800fa1a <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 800fb2e:	4332      	orrs	r2, r6
 800fb30:	e77b      	b.n	800fa2a <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 800fb32:	4316      	orrs	r6, r2
 800fb34:	e781      	b.n	800fa3a <HAL_GPIO_Init+0xae>
  } 
}
 800fb36:	b005      	add	sp, #20
 800fb38:	bcf0      	pop	{r4, r5, r6, r7}
 800fb3a:	46bb      	mov	fp, r7
 800fb3c:	46b2      	mov	sl, r6
 800fb3e:	46a9      	mov	r9, r5
 800fb40:	46a0      	mov	r8, r4
 800fb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb44:	b7fff000 	.word	0xb7fff000
 800fb48:	40010400 	.word	0x40010400
 800fb4c:	40021000 	.word	0x40021000
 800fb50:	40010000 	.word	0x40010000
 800fb54:	48000400 	.word	0x48000400
 800fb58:	48000800 	.word	0x48000800
 800fb5c:	48000c00 	.word	0x48000c00

0800fb60 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fb60:	6900      	ldr	r0, [r0, #16]
 800fb62:	4008      	ands	r0, r1
 800fb64:	1e41      	subs	r1, r0, #1
 800fb66:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800fb68:	b2c0      	uxtb	r0, r0
  }
 800fb6a:	4770      	bx	lr

0800fb6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800fb6c:	2a00      	cmp	r2, #0
 800fb6e:	d001      	beq.n	800fb74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800fb70:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800fb72:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800fb74:	6281      	str	r1, [r0, #40]	; 0x28
}
 800fb76:	e7fc      	b.n	800fb72 <HAL_GPIO_WritePin+0x6>

0800fb78 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800fb78:	6943      	ldr	r3, [r0, #20]
 800fb7a:	4059      	eors	r1, r3
 800fb7c:	6141      	str	r1, [r0, #20]
}
 800fb7e:	4770      	bx	lr

0800fb80 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 800fb80:	4770      	bx	lr
	...

0800fb84 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800fb84:	4a03      	ldr	r2, [pc, #12]	; (800fb94 <HAL_PWR_EnableBkUpAccess+0x10>)
 800fb86:	6811      	ldr	r1, [r2, #0]
 800fb88:	2380      	movs	r3, #128	; 0x80
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	430b      	orrs	r3, r1
 800fb8e:	6013      	str	r3, [r2, #0]
}
 800fb90:	4770      	bx	lr
 800fb92:	46c0      	nop			; (mov r8, r8)
 800fb94:	40007000 	.word	0x40007000

0800fb98 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb9a:	46c6      	mov	lr, r8
 800fb9c:	b500      	push	{lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fba2:	6803      	ldr	r3, [r0, #0]
 800fba4:	07db      	lsls	r3, r3, #31
 800fba6:	d538      	bpl.n	800fc1a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800fba8:	4bbd      	ldr	r3, [pc, #756]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fbaa:	685a      	ldr	r2, [r3, #4]
 800fbac:	230c      	movs	r3, #12
 800fbae:	4013      	ands	r3, r2
 800fbb0:	2b04      	cmp	r3, #4
 800fbb2:	d02a      	beq.n	800fc0a <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800fbb4:	4bba      	ldr	r3, [pc, #744]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	230c      	movs	r3, #12
 800fbba:	4013      	ands	r3, r2
 800fbbc:	2b08      	cmp	r3, #8
 800fbbe:	d108      	bne.n	800fbd2 <HAL_RCC_OscConfig+0x3a>
 800fbc0:	4bb7      	ldr	r3, [pc, #732]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	22c0      	movs	r2, #192	; 0xc0
 800fbc6:	0252      	lsls	r2, r2, #9
 800fbc8:	4013      	ands	r3, r2
 800fbca:	2280      	movs	r2, #128	; 0x80
 800fbcc:	0252      	lsls	r2, r2, #9
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d01b      	beq.n	800fc0a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800fbd2:	4bb3      	ldr	r3, [pc, #716]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	49b3      	ldr	r1, [pc, #716]	; (800fea4 <HAL_RCC_OscConfig+0x30c>)
 800fbd8:	400a      	ands	r2, r1
 800fbda:	601a      	str	r2, [r3, #0]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	49b2      	ldr	r1, [pc, #712]	; (800fea8 <HAL_RCC_OscConfig+0x310>)
 800fbe0:	400a      	ands	r2, r1
 800fbe2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbe4:	f7fe feda 	bl	800e99c <HAL_GetTick>
 800fbe8:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fbea:	4fad      	ldr	r7, [pc, #692]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fbec:	2680      	movs	r6, #128	; 0x80
 800fbee:	02b6      	lsls	r6, r6, #10
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	4233      	tst	r3, r6
 800fbf4:	d039      	beq.n	800fc6a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fbf6:	f7fe fed1 	bl	800e99c <HAL_GetTick>
 800fbfa:	1b40      	subs	r0, r0, r5
 800fbfc:	2864      	cmp	r0, #100	; 0x64
 800fbfe:	d9f7      	bls.n	800fbf0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 800fc00:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800fc02:	b002      	add	sp, #8
 800fc04:	bc80      	pop	{r7}
 800fc06:	46b8      	mov	r8, r7
 800fc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fc0a:	4ba5      	ldr	r3, [pc, #660]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	039b      	lsls	r3, r3, #14
 800fc10:	d503      	bpl.n	800fc1a <HAL_RCC_OscConfig+0x82>
 800fc12:	6863      	ldr	r3, [r4, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d100      	bne.n	800fc1a <HAL_RCC_OscConfig+0x82>
 800fc18:	e274      	b.n	8010104 <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	079b      	lsls	r3, r3, #30
 800fc1e:	d400      	bmi.n	800fc22 <HAL_RCC_OscConfig+0x8a>
 800fc20:	e08d      	b.n	800fd3e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800fc22:	4b9f      	ldr	r3, [pc, #636]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	220c      	movs	r2, #12
 800fc28:	421a      	tst	r2, r3
 800fc2a:	d077      	beq.n	800fd1c <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800fc2c:	4b9c      	ldr	r3, [pc, #624]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	230c      	movs	r3, #12
 800fc32:	4013      	ands	r3, r2
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d068      	beq.n	800fd0a <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fc38:	68e3      	ldr	r3, [r4, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d100      	bne.n	800fc40 <HAL_RCC_OscConfig+0xa8>
 800fc3e:	e0a1      	b.n	800fd84 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 800fc40:	4a97      	ldr	r2, [pc, #604]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc42:	6813      	ldr	r3, [r2, #0]
 800fc44:	2101      	movs	r1, #1
 800fc46:	430b      	orrs	r3, r1
 800fc48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fc4a:	f7fe fea7 	bl	800e99c <HAL_GetTick>
 800fc4e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fc50:	4f93      	ldr	r7, [pc, #588]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc52:	2602      	movs	r6, #2
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	421e      	tst	r6, r3
 800fc58:	d000      	beq.n	800fc5c <HAL_RCC_OscConfig+0xc4>
 800fc5a:	e08a      	b.n	800fd72 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fc5c:	f7fe fe9e 	bl	800e99c <HAL_GetTick>
 800fc60:	1b40      	subs	r0, r0, r5
 800fc62:	2864      	cmp	r0, #100	; 0x64
 800fc64:	d9f6      	bls.n	800fc54 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 800fc66:	2003      	movs	r0, #3
 800fc68:	e7cb      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fc6a:	6863      	ldr	r3, [r4, #4]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d00b      	beq.n	800fc88 <HAL_RCC_OscConfig+0xf0>
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d122      	bne.n	800fcba <HAL_RCC_OscConfig+0x122>
 800fc74:	4b8a      	ldr	r3, [pc, #552]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	498a      	ldr	r1, [pc, #552]	; (800fea4 <HAL_RCC_OscConfig+0x30c>)
 800fc7a:	400a      	ands	r2, r1
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	4989      	ldr	r1, [pc, #548]	; (800fea8 <HAL_RCC_OscConfig+0x310>)
 800fc82:	400a      	ands	r2, r1
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	e005      	b.n	800fc94 <HAL_RCC_OscConfig+0xfc>
 800fc88:	4a85      	ldr	r2, [pc, #532]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fc8a:	6811      	ldr	r1, [r2, #0]
 800fc8c:	2380      	movs	r3, #128	; 0x80
 800fc8e:	025b      	lsls	r3, r3, #9
 800fc90:	430b      	orrs	r3, r1
 800fc92:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d027      	beq.n	800fcea <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 800fc9a:	f7fe fe7f 	bl	800e99c <HAL_GetTick>
 800fc9e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fca0:	4f7f      	ldr	r7, [pc, #508]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fca2:	2680      	movs	r6, #128	; 0x80
 800fca4:	02b6      	lsls	r6, r6, #10
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	4233      	tst	r3, r6
 800fcaa:	d1b6      	bne.n	800fc1a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fcac:	f7fe fe76 	bl	800e99c <HAL_GetTick>
 800fcb0:	1b40      	subs	r0, r0, r5
 800fcb2:	2864      	cmp	r0, #100	; 0x64
 800fcb4:	d9f7      	bls.n	800fca6 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800fcb6:	2003      	movs	r0, #3
 800fcb8:	e7a3      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fcba:	2b05      	cmp	r3, #5
 800fcbc:	d009      	beq.n	800fcd2 <HAL_RCC_OscConfig+0x13a>
 800fcbe:	4b78      	ldr	r3, [pc, #480]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	4978      	ldr	r1, [pc, #480]	; (800fea4 <HAL_RCC_OscConfig+0x30c>)
 800fcc4:	400a      	ands	r2, r1
 800fcc6:	601a      	str	r2, [r3, #0]
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	4977      	ldr	r1, [pc, #476]	; (800fea8 <HAL_RCC_OscConfig+0x310>)
 800fccc:	400a      	ands	r2, r1
 800fcce:	601a      	str	r2, [r3, #0]
 800fcd0:	e7e0      	b.n	800fc94 <HAL_RCC_OscConfig+0xfc>
 800fcd2:	4b73      	ldr	r3, [pc, #460]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fcd4:	6819      	ldr	r1, [r3, #0]
 800fcd6:	2280      	movs	r2, #128	; 0x80
 800fcd8:	02d2      	lsls	r2, r2, #11
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	601a      	str	r2, [r3, #0]
 800fcde:	6819      	ldr	r1, [r3, #0]
 800fce0:	2280      	movs	r2, #128	; 0x80
 800fce2:	0252      	lsls	r2, r2, #9
 800fce4:	430a      	orrs	r2, r1
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	e7d4      	b.n	800fc94 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 800fcea:	f7fe fe57 	bl	800e99c <HAL_GetTick>
 800fcee:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fcf0:	4f6b      	ldr	r7, [pc, #428]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fcf2:	2680      	movs	r6, #128	; 0x80
 800fcf4:	02b6      	lsls	r6, r6, #10
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	4233      	tst	r3, r6
 800fcfa:	d08e      	beq.n	800fc1a <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fcfc:	f7fe fe4e 	bl	800e99c <HAL_GetTick>
 800fd00:	1b40      	subs	r0, r0, r5
 800fd02:	2864      	cmp	r0, #100	; 0x64
 800fd04:	d9f7      	bls.n	800fcf6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 800fd06:	2003      	movs	r0, #3
 800fd08:	e77b      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800fd0a:	4b65      	ldr	r3, [pc, #404]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	22c0      	movs	r2, #192	; 0xc0
 800fd10:	0252      	lsls	r2, r2, #9
 800fd12:	4013      	ands	r3, r2
 800fd14:	2280      	movs	r2, #128	; 0x80
 800fd16:	0212      	lsls	r2, r2, #8
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d18d      	bne.n	800fc38 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd1c:	4b60      	ldr	r3, [pc, #384]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	079b      	lsls	r3, r3, #30
 800fd22:	d504      	bpl.n	800fd2e <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 800fd24:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd26:	68e3      	ldr	r3, [r4, #12]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d000      	beq.n	800fd2e <HAL_RCC_OscConfig+0x196>
 800fd2c:	e769      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd2e:	495c      	ldr	r1, [pc, #368]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd30:	680a      	ldr	r2, [r1, #0]
 800fd32:	6923      	ldr	r3, [r4, #16]
 800fd34:	00db      	lsls	r3, r3, #3
 800fd36:	20f8      	movs	r0, #248	; 0xf8
 800fd38:	4382      	bics	r2, r0
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	071b      	lsls	r3, r3, #28
 800fd42:	d547      	bpl.n	800fdd4 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fd44:	6a23      	ldr	r3, [r4, #32]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d030      	beq.n	800fdac <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 800fd4a:	4a55      	ldr	r2, [pc, #340]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd4c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fd4e:	2101      	movs	r1, #1
 800fd50:	430b      	orrs	r3, r1
 800fd52:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 800fd54:	f7fe fe22 	bl	800e99c <HAL_GetTick>
 800fd58:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fd5a:	4f51      	ldr	r7, [pc, #324]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd5c:	2602      	movs	r6, #2
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	421e      	tst	r6, r3
 800fd62:	d137      	bne.n	800fdd4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fd64:	f7fe fe1a 	bl	800e99c <HAL_GetTick>
 800fd68:	1b40      	subs	r0, r0, r5
 800fd6a:	2864      	cmp	r0, #100	; 0x64
 800fd6c:	d9f7      	bls.n	800fd5e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 800fd6e:	2003      	movs	r0, #3
 800fd70:	e747      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd72:	494b      	ldr	r1, [pc, #300]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd74:	680a      	ldr	r2, [r1, #0]
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	00db      	lsls	r3, r3, #3
 800fd7a:	20f8      	movs	r0, #248	; 0xf8
 800fd7c:	4382      	bics	r2, r0
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	600b      	str	r3, [r1, #0]
 800fd82:	e7dc      	b.n	800fd3e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 800fd84:	4a46      	ldr	r2, [pc, #280]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd86:	6813      	ldr	r3, [r2, #0]
 800fd88:	2101      	movs	r1, #1
 800fd8a:	438b      	bics	r3, r1
 800fd8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fd8e:	f7fe fe05 	bl	800e99c <HAL_GetTick>
 800fd92:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fd94:	4f42      	ldr	r7, [pc, #264]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fd96:	2602      	movs	r6, #2
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	421e      	tst	r6, r3
 800fd9c:	d0cf      	beq.n	800fd3e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fd9e:	f7fe fdfd 	bl	800e99c <HAL_GetTick>
 800fda2:	1b40      	subs	r0, r0, r5
 800fda4:	2864      	cmp	r0, #100	; 0x64
 800fda6:	d9f7      	bls.n	800fd98 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 800fda8:	2003      	movs	r0, #3
 800fdaa:	e72a      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 800fdac:	4a3c      	ldr	r2, [pc, #240]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fdae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	438b      	bics	r3, r1
 800fdb4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 800fdb6:	f7fe fdf1 	bl	800e99c <HAL_GetTick>
 800fdba:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdbc:	4f38      	ldr	r7, [pc, #224]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fdbe:	2602      	movs	r6, #2
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc2:	421e      	tst	r6, r3
 800fdc4:	d006      	beq.n	800fdd4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdc6:	f7fe fde9 	bl	800e99c <HAL_GetTick>
 800fdca:	1b40      	subs	r0, r0, r5
 800fdcc:	2864      	cmp	r0, #100	; 0x64
 800fdce:	d9f7      	bls.n	800fdc0 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 800fdd0:	2003      	movs	r0, #3
 800fdd2:	e716      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	075b      	lsls	r3, r3, #29
 800fdd8:	d442      	bmi.n	800fe60 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800fdda:	6823      	ldr	r3, [r4, #0]
 800fddc:	06db      	lsls	r3, r3, #27
 800fdde:	d512      	bpl.n	800fe06 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800fde0:	6963      	ldr	r3, [r4, #20]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d100      	bne.n	800fde8 <HAL_RCC_OscConfig+0x250>
 800fde6:	e0ce      	b.n	800ff86 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800fde8:	3305      	adds	r3, #5
 800fdea:	d000      	beq.n	800fdee <HAL_RCC_OscConfig+0x256>
 800fdec:	e0ec      	b.n	800ffc8 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 800fdee:	4a2c      	ldr	r2, [pc, #176]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fdf0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fdf2:	2104      	movs	r1, #4
 800fdf4:	438b      	bics	r3, r1
 800fdf6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800fdf8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fdfa:	69a3      	ldr	r3, [r4, #24]
 800fdfc:	00db      	lsls	r3, r3, #3
 800fdfe:	20f8      	movs	r0, #248	; 0xf8
 800fe00:	4381      	bics	r1, r0
 800fe02:	430b      	orrs	r3, r1
 800fe04:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fe06:	6823      	ldr	r3, [r4, #0]
 800fe08:	069b      	lsls	r3, r3, #26
 800fe0a:	d400      	bmi.n	800fe0e <HAL_RCC_OscConfig+0x276>
 800fe0c:	e106      	b.n	801001c <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800fe0e:	4b24      	ldr	r3, [pc, #144]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fe10:	685a      	ldr	r2, [r3, #4]
 800fe12:	230c      	movs	r3, #12
 800fe14:	4013      	ands	r3, r2
 800fe16:	2b0c      	cmp	r3, #12
 800fe18:	d100      	bne.n	800fe1c <HAL_RCC_OscConfig+0x284>
 800fe1a:	e0f6      	b.n	801000a <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800fe1c:	4b20      	ldr	r3, [pc, #128]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fe1e:	685a      	ldr	r2, [r3, #4]
 800fe20:	230c      	movs	r3, #12
 800fe22:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800fe24:	2b08      	cmp	r3, #8
 800fe26:	d100      	bne.n	800fe2a <HAL_RCC_OscConfig+0x292>
 800fe28:	e0e7      	b.n	800fffa <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fe2a:	69e3      	ldr	r3, [r4, #28]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d100      	bne.n	800fe32 <HAL_RCC_OscConfig+0x29a>
 800fe30:	e116      	b.n	8010060 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 800fe32:	4a1b      	ldr	r2, [pc, #108]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fe34:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fe36:	2380      	movs	r3, #128	; 0x80
 800fe38:	025b      	lsls	r3, r3, #9
 800fe3a:	430b      	orrs	r3, r1
 800fe3c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 800fe3e:	f7fe fdad 	bl	800e99c <HAL_GetTick>
 800fe42:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800fe44:	4f16      	ldr	r7, [pc, #88]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fe46:	2680      	movs	r6, #128	; 0x80
 800fe48:	0276      	lsls	r6, r6, #9
 800fe4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4c:	4233      	tst	r3, r6
 800fe4e:	d000      	beq.n	800fe52 <HAL_RCC_OscConfig+0x2ba>
 800fe50:	e0e4      	b.n	801001c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe52:	f7fe fda3 	bl	800e99c <HAL_GetTick>
 800fe56:	1b40      	subs	r0, r0, r5
 800fe58:	2864      	cmp	r0, #100	; 0x64
 800fe5a:	d9f6      	bls.n	800fe4a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800fe5c:	2003      	movs	r0, #3
 800fe5e:	e6d0      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800fe60:	4a0f      	ldr	r2, [pc, #60]	; (800fea0 <HAL_RCC_OscConfig+0x308>)
 800fe62:	69d1      	ldr	r1, [r2, #28]
 800fe64:	2080      	movs	r0, #128	; 0x80
 800fe66:	0540      	lsls	r0, r0, #21
 800fe68:	4301      	orrs	r1, r0
 800fe6a:	61d1      	str	r1, [r2, #28]
 800fe6c:	69d3      	ldr	r3, [r2, #28]
 800fe6e:	4003      	ands	r3, r0
 800fe70:	9301      	str	r3, [sp, #4]
 800fe72:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe74:	4a0d      	ldr	r2, [pc, #52]	; (800feac <HAL_RCC_OscConfig+0x314>)
 800fe76:	6811      	ldr	r1, [r2, #0]
 800fe78:	2380      	movs	r3, #128	; 0x80
 800fe7a:	005b      	lsls	r3, r3, #1
 800fe7c:	430b      	orrs	r3, r1
 800fe7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fe80:	f7fe fd8c 	bl	800e99c <HAL_GetTick>
 800fe84:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800fe86:	4f09      	ldr	r7, [pc, #36]	; (800feac <HAL_RCC_OscConfig+0x314>)
 800fe88:	2680      	movs	r6, #128	; 0x80
 800fe8a:	0076      	lsls	r6, r6, #1
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	4233      	tst	r3, r6
 800fe90:	d10e      	bne.n	800feb0 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800fe92:	f7fe fd83 	bl	800e99c <HAL_GetTick>
 800fe96:	1b40      	subs	r0, r0, r5
 800fe98:	2864      	cmp	r0, #100	; 0x64
 800fe9a:	d9f7      	bls.n	800fe8c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 800fe9c:	2003      	movs	r0, #3
 800fe9e:	e6b0      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
 800fea0:	40021000 	.word	0x40021000
 800fea4:	fffeffff 	.word	0xfffeffff
 800fea8:	fffbffff 	.word	0xfffbffff
 800feac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800feb0:	4b96      	ldr	r3, [pc, #600]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800feb2:	6a1a      	ldr	r2, [r3, #32]
 800feb4:	2101      	movs	r1, #1
 800feb6:	438a      	bics	r2, r1
 800feb8:	621a      	str	r2, [r3, #32]
 800feba:	6a1a      	ldr	r2, [r3, #32]
 800febc:	3103      	adds	r1, #3
 800febe:	438a      	bics	r2, r1
 800fec0:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 800fec2:	f7fe fd6b 	bl	800e99c <HAL_GetTick>
 800fec6:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fec8:	4f90      	ldr	r7, [pc, #576]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800feca:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fecc:	4b90      	ldr	r3, [pc, #576]	; (8010110 <HAL_RCC_OscConfig+0x578>)
 800fece:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fed0:	6a3b      	ldr	r3, [r7, #32]
 800fed2:	421e      	tst	r6, r3
 800fed4:	d006      	beq.n	800fee4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fed6:	f7fe fd61 	bl	800e99c <HAL_GetTick>
 800feda:	1b40      	subs	r0, r0, r5
 800fedc:	4540      	cmp	r0, r8
 800fede:	d9f7      	bls.n	800fed0 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 800fee0:	2003      	movs	r0, #3
 800fee2:	e68e      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fee4:	68a3      	ldr	r3, [r4, #8]
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d00b      	beq.n	800ff02 <HAL_RCC_OscConfig+0x36a>
 800feea:	2b00      	cmp	r3, #0
 800feec:	d123      	bne.n	800ff36 <HAL_RCC_OscConfig+0x39e>
 800feee:	4b87      	ldr	r3, [pc, #540]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800fef0:	6a1a      	ldr	r2, [r3, #32]
 800fef2:	2101      	movs	r1, #1
 800fef4:	438a      	bics	r2, r1
 800fef6:	621a      	str	r2, [r3, #32]
 800fef8:	6a1a      	ldr	r2, [r3, #32]
 800fefa:	3103      	adds	r1, #3
 800fefc:	438a      	bics	r2, r1
 800fefe:	621a      	str	r2, [r3, #32]
 800ff00:	e004      	b.n	800ff0c <HAL_RCC_OscConfig+0x374>
 800ff02:	4a82      	ldr	r2, [pc, #520]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ff04:	6a13      	ldr	r3, [r2, #32]
 800ff06:	2101      	movs	r1, #1
 800ff08:	430b      	orrs	r3, r1
 800ff0a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ff0c:	68a3      	ldr	r3, [r4, #8]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d027      	beq.n	800ff62 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 800ff12:	f7fe fd43 	bl	800e99c <HAL_GetTick>
 800ff16:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff18:	4f7c      	ldr	r7, [pc, #496]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ff1a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff1c:	4b7c      	ldr	r3, [pc, #496]	; (8010110 <HAL_RCC_OscConfig+0x578>)
 800ff1e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	421e      	tst	r6, r3
 800ff24:	d000      	beq.n	800ff28 <HAL_RCC_OscConfig+0x390>
 800ff26:	e758      	b.n	800fdda <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff28:	f7fe fd38 	bl	800e99c <HAL_GetTick>
 800ff2c:	1b40      	subs	r0, r0, r5
 800ff2e:	4540      	cmp	r0, r8
 800ff30:	d9f6      	bls.n	800ff20 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 800ff32:	2003      	movs	r0, #3
 800ff34:	e665      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff36:	2b05      	cmp	r3, #5
 800ff38:	d009      	beq.n	800ff4e <HAL_RCC_OscConfig+0x3b6>
 800ff3a:	4b74      	ldr	r3, [pc, #464]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ff3c:	6a1a      	ldr	r2, [r3, #32]
 800ff3e:	2101      	movs	r1, #1
 800ff40:	438a      	bics	r2, r1
 800ff42:	621a      	str	r2, [r3, #32]
 800ff44:	6a1a      	ldr	r2, [r3, #32]
 800ff46:	3103      	adds	r1, #3
 800ff48:	438a      	bics	r2, r1
 800ff4a:	621a      	str	r2, [r3, #32]
 800ff4c:	e7de      	b.n	800ff0c <HAL_RCC_OscConfig+0x374>
 800ff4e:	4b6f      	ldr	r3, [pc, #444]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ff50:	6a1a      	ldr	r2, [r3, #32]
 800ff52:	2104      	movs	r1, #4
 800ff54:	430a      	orrs	r2, r1
 800ff56:	621a      	str	r2, [r3, #32]
 800ff58:	6a1a      	ldr	r2, [r3, #32]
 800ff5a:	3903      	subs	r1, #3
 800ff5c:	430a      	orrs	r2, r1
 800ff5e:	621a      	str	r2, [r3, #32]
 800ff60:	e7d4      	b.n	800ff0c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 800ff62:	f7fe fd1b 	bl	800e99c <HAL_GetTick>
 800ff66:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff68:	4f68      	ldr	r7, [pc, #416]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ff6a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff6c:	4b68      	ldr	r3, [pc, #416]	; (8010110 <HAL_RCC_OscConfig+0x578>)
 800ff6e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff70:	6a3b      	ldr	r3, [r7, #32]
 800ff72:	421e      	tst	r6, r3
 800ff74:	d100      	bne.n	800ff78 <HAL_RCC_OscConfig+0x3e0>
 800ff76:	e730      	b.n	800fdda <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff78:	f7fe fd10 	bl	800e99c <HAL_GetTick>
 800ff7c:	1b40      	subs	r0, r0, r5
 800ff7e:	4540      	cmp	r0, r8
 800ff80:	d9f6      	bls.n	800ff70 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 800ff82:	2003      	movs	r0, #3
 800ff84:	e63d      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 800ff86:	4b61      	ldr	r3, [pc, #388]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ff88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff8a:	2104      	movs	r1, #4
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800ff90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff92:	3903      	subs	r1, #3
 800ff94:	430a      	orrs	r2, r1
 800ff96:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800ff98:	f7fe fd00 	bl	800e99c <HAL_GetTick>
 800ff9c:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800ff9e:	4f5b      	ldr	r7, [pc, #364]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ffa0:	2602      	movs	r6, #2
 800ffa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa4:	421e      	tst	r6, r3
 800ffa6:	d106      	bne.n	800ffb6 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800ffa8:	f7fe fcf8 	bl	800e99c <HAL_GetTick>
 800ffac:	1b40      	subs	r0, r0, r5
 800ffae:	2864      	cmp	r0, #100	; 0x64
 800ffb0:	d9f7      	bls.n	800ffa2 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800ffb2:	2003      	movs	r0, #3
 800ffb4:	e625      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800ffb6:	4955      	ldr	r1, [pc, #340]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ffb8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800ffba:	69a3      	ldr	r3, [r4, #24]
 800ffbc:	00db      	lsls	r3, r3, #3
 800ffbe:	20f8      	movs	r0, #248	; 0xf8
 800ffc0:	4382      	bics	r2, r0
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	634b      	str	r3, [r1, #52]	; 0x34
 800ffc6:	e71e      	b.n	800fe06 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 800ffc8:	4b50      	ldr	r3, [pc, #320]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ffca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffcc:	2104      	movs	r1, #4
 800ffce:	430a      	orrs	r2, r1
 800ffd0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800ffd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffd4:	3903      	subs	r1, #3
 800ffd6:	438a      	bics	r2, r1
 800ffd8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800ffda:	f7fe fcdf 	bl	800e99c <HAL_GetTick>
 800ffde:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800ffe0:	4f4a      	ldr	r7, [pc, #296]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800ffe2:	2602      	movs	r6, #2
 800ffe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe6:	421e      	tst	r6, r3
 800ffe8:	d100      	bne.n	800ffec <HAL_RCC_OscConfig+0x454>
 800ffea:	e70c      	b.n	800fe06 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800ffec:	f7fe fcd6 	bl	800e99c <HAL_GetTick>
 800fff0:	1b40      	subs	r0, r0, r5
 800fff2:	2864      	cmp	r0, #100	; 0x64
 800fff4:	d9f6      	bls.n	800ffe4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 800fff6:	2003      	movs	r0, #3
 800fff8:	e603      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800fffa:	4b44      	ldr	r3, [pc, #272]	; (801010c <HAL_RCC_OscConfig+0x574>)
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	22c0      	movs	r2, #192	; 0xc0
 8010000:	0252      	lsls	r2, r2, #9
 8010002:	4013      	ands	r3, r2
 8010004:	4293      	cmp	r3, r2
 8010006:	d000      	beq.n	801000a <HAL_RCC_OscConfig+0x472>
 8010008:	e70f      	b.n	800fe2a <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801000a:	4b40      	ldr	r3, [pc, #256]	; (801010c <HAL_RCC_OscConfig+0x574>)
 801000c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801000e:	03db      	lsls	r3, r3, #15
 8010010:	d504      	bpl.n	801001c <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8010012:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010014:	69e3      	ldr	r3, [r4, #28]
 8010016:	2b01      	cmp	r3, #1
 8010018:	d000      	beq.n	801001c <HAL_RCC_OscConfig+0x484>
 801001a:	e5f2      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801001c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 801001e:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010020:	2b00      	cmp	r3, #0
 8010022:	d100      	bne.n	8010026 <HAL_RCC_OscConfig+0x48e>
 8010024:	e5ed      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010026:	4a39      	ldr	r2, [pc, #228]	; (801010c <HAL_RCC_OscConfig+0x574>)
 8010028:	6851      	ldr	r1, [r2, #4]
 801002a:	220c      	movs	r2, #12
 801002c:	400a      	ands	r2, r1
 801002e:	2a08      	cmp	r2, #8
 8010030:	d06a      	beq.n	8010108 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010032:	2b02      	cmp	r3, #2
 8010034:	d029      	beq.n	801008a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8010036:	4a35      	ldr	r2, [pc, #212]	; (801010c <HAL_RCC_OscConfig+0x574>)
 8010038:	6813      	ldr	r3, [r2, #0]
 801003a:	4936      	ldr	r1, [pc, #216]	; (8010114 <HAL_RCC_OscConfig+0x57c>)
 801003c:	400b      	ands	r3, r1
 801003e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010040:	f7fe fcac 	bl	800e99c <HAL_GetTick>
 8010044:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010046:	4e31      	ldr	r6, [pc, #196]	; (801010c <HAL_RCC_OscConfig+0x574>)
 8010048:	2580      	movs	r5, #128	; 0x80
 801004a:	04ad      	lsls	r5, r5, #18
 801004c:	6833      	ldr	r3, [r6, #0]
 801004e:	422b      	tst	r3, r5
 8010050:	d056      	beq.n	8010100 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010052:	f7fe fca3 	bl	800e99c <HAL_GetTick>
 8010056:	1b00      	subs	r0, r0, r4
 8010058:	2864      	cmp	r0, #100	; 0x64
 801005a:	d9f7      	bls.n	801004c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 801005c:	2003      	movs	r0, #3
 801005e:	e5d0      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8010060:	4a2a      	ldr	r2, [pc, #168]	; (801010c <HAL_RCC_OscConfig+0x574>)
 8010062:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010064:	492c      	ldr	r1, [pc, #176]	; (8010118 <HAL_RCC_OscConfig+0x580>)
 8010066:	400b      	ands	r3, r1
 8010068:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801006a:	f7fe fc97 	bl	800e99c <HAL_GetTick>
 801006e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010070:	4f26      	ldr	r7, [pc, #152]	; (801010c <HAL_RCC_OscConfig+0x574>)
 8010072:	2680      	movs	r6, #128	; 0x80
 8010074:	0276      	lsls	r6, r6, #9
 8010076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010078:	4233      	tst	r3, r6
 801007a:	d0cf      	beq.n	801001c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801007c:	f7fe fc8e 	bl	800e99c <HAL_GetTick>
 8010080:	1b40      	subs	r0, r0, r5
 8010082:	2864      	cmp	r0, #100	; 0x64
 8010084:	d9f7      	bls.n	8010076 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8010086:	2003      	movs	r0, #3
 8010088:	e5bb      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801008a:	4a20      	ldr	r2, [pc, #128]	; (801010c <HAL_RCC_OscConfig+0x574>)
 801008c:	6813      	ldr	r3, [r2, #0]
 801008e:	4921      	ldr	r1, [pc, #132]	; (8010114 <HAL_RCC_OscConfig+0x57c>)
 8010090:	400b      	ands	r3, r1
 8010092:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010094:	f7fe fc82 	bl	800e99c <HAL_GetTick>
 8010098:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801009a:	4f1c      	ldr	r7, [pc, #112]	; (801010c <HAL_RCC_OscConfig+0x574>)
 801009c:	2680      	movs	r6, #128	; 0x80
 801009e:	04b6      	lsls	r6, r6, #18
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	4233      	tst	r3, r6
 80100a4:	d006      	beq.n	80100b4 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80100a6:	f7fe fc79 	bl	800e99c <HAL_GetTick>
 80100aa:	1b40      	subs	r0, r0, r5
 80100ac:	2864      	cmp	r0, #100	; 0x64
 80100ae:	d9f7      	bls.n	80100a0 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80100b0:	2003      	movs	r0, #3
 80100b2:	e5a6      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80100b4:	4b15      	ldr	r3, [pc, #84]	; (801010c <HAL_RCC_OscConfig+0x574>)
 80100b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b8:	210f      	movs	r1, #15
 80100ba:	438a      	bics	r2, r1
 80100bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80100be:	430a      	orrs	r2, r1
 80100c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80100c2:	6859      	ldr	r1, [r3, #4]
 80100c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80100c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80100c8:	4302      	orrs	r2, r0
 80100ca:	4814      	ldr	r0, [pc, #80]	; (801011c <HAL_RCC_OscConfig+0x584>)
 80100cc:	4001      	ands	r1, r0
 80100ce:	430a      	orrs	r2, r1
 80100d0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80100d2:	6819      	ldr	r1, [r3, #0]
 80100d4:	2280      	movs	r2, #128	; 0x80
 80100d6:	0452      	lsls	r2, r2, #17
 80100d8:	430a      	orrs	r2, r1
 80100da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80100dc:	f7fe fc5e 	bl	800e99c <HAL_GetTick>
 80100e0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80100e2:	4e0a      	ldr	r6, [pc, #40]	; (801010c <HAL_RCC_OscConfig+0x574>)
 80100e4:	2580      	movs	r5, #128	; 0x80
 80100e6:	04ad      	lsls	r5, r5, #18
 80100e8:	6833      	ldr	r3, [r6, #0]
 80100ea:	422b      	tst	r3, r5
 80100ec:	d106      	bne.n	80100fc <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80100ee:	f7fe fc55 	bl	800e99c <HAL_GetTick>
 80100f2:	1b00      	subs	r0, r0, r4
 80100f4:	2864      	cmp	r0, #100	; 0x64
 80100f6:	d9f7      	bls.n	80100e8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80100f8:	2003      	movs	r0, #3
 80100fa:	e582      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80100fc:	2000      	movs	r0, #0
 80100fe:	e580      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
 8010100:	2000      	movs	r0, #0
 8010102:	e57e      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 8010104:	2001      	movs	r0, #1
 8010106:	e57c      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8010108:	2001      	movs	r0, #1
 801010a:	e57a      	b.n	800fc02 <HAL_RCC_OscConfig+0x6a>
 801010c:	40021000 	.word	0x40021000
 8010110:	00001388 	.word	0x00001388
 8010114:	feffffff 	.word	0xfeffffff
 8010118:	fffeffff 	.word	0xfffeffff
 801011c:	ffc27fff 	.word	0xffc27fff

08010120 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010122:	46ce      	mov	lr, r9
 8010124:	4647      	mov	r7, r8
 8010126:	b580      	push	{r7, lr}
 8010128:	0004      	movs	r4, r0
 801012a:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801012c:	4b96      	ldr	r3, [pc, #600]	; (8010388 <HAL_RCC_ClockConfig+0x268>)
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	2301      	movs	r3, #1
 8010132:	4013      	ands	r3, r2
 8010134:	428b      	cmp	r3, r1
 8010136:	d300      	bcc.n	801013a <HAL_RCC_ClockConfig+0x1a>
 8010138:	e086      	b.n	8010248 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801013a:	4993      	ldr	r1, [pc, #588]	; (8010388 <HAL_RCC_ClockConfig+0x268>)
 801013c:	680b      	ldr	r3, [r1, #0]
 801013e:	2201      	movs	r2, #1
 8010140:	4393      	bics	r3, r2
 8010142:	432b      	orrs	r3, r5
 8010144:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010146:	680b      	ldr	r3, [r1, #0]
 8010148:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801014a:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801014c:	42aa      	cmp	r2, r5
 801014e:	d000      	beq.n	8010152 <HAL_RCC_ClockConfig+0x32>
 8010150:	e111      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010152:	6823      	ldr	r3, [r4, #0]
 8010154:	079b      	lsls	r3, r3, #30
 8010156:	d506      	bpl.n	8010166 <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010158:	4a8c      	ldr	r2, [pc, #560]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 801015a:	6853      	ldr	r3, [r2, #4]
 801015c:	21f0      	movs	r1, #240	; 0xf0
 801015e:	438b      	bics	r3, r1
 8010160:	68a1      	ldr	r1, [r4, #8]
 8010162:	430b      	orrs	r3, r1
 8010164:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010166:	6823      	ldr	r3, [r4, #0]
 8010168:	07db      	lsls	r3, r3, #31
 801016a:	d400      	bmi.n	801016e <HAL_RCC_ClockConfig+0x4e>
 801016c:	e0f5      	b.n	801035a <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801016e:	6862      	ldr	r2, [r4, #4]
 8010170:	2a01      	cmp	r2, #1
 8010172:	d009      	beq.n	8010188 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010174:	2a02      	cmp	r2, #2
 8010176:	d02b      	beq.n	80101d0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010178:	2a03      	cmp	r2, #3
 801017a:	d02f      	beq.n	80101dc <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801017c:	4b83      	ldr	r3, [pc, #524]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	079b      	lsls	r3, r3, #30
 8010182:	d406      	bmi.n	8010192 <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 8010184:	2001      	movs	r0, #1
 8010186:	e0f6      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010188:	4b80      	ldr	r3, [pc, #512]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	039b      	lsls	r3, r3, #14
 801018e:	d400      	bmi.n	8010192 <HAL_RCC_ClockConfig+0x72>
 8010190:	e0f5      	b.n	801037e <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010192:	497e      	ldr	r1, [pc, #504]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010194:	684b      	ldr	r3, [r1, #4]
 8010196:	2003      	movs	r0, #3
 8010198:	4383      	bics	r3, r0
 801019a:	4313      	orrs	r3, r2
 801019c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801019e:	f7fe fbfd 	bl	800e99c <HAL_GetTick>
 80101a2:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101a4:	6863      	ldr	r3, [r4, #4]
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d01e      	beq.n	80101e8 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d02c      	beq.n	8010208 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	d03a      	beq.n	8010228 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80101b2:	4f76      	ldr	r7, [pc, #472]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80101b4:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101b6:	4b76      	ldr	r3, [pc, #472]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 80101b8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	421e      	tst	r6, r3
 80101be:	d100      	bne.n	80101c2 <HAL_RCC_ClockConfig+0xa2>
 80101c0:	e0cb      	b.n	801035a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101c2:	f7fe fbeb 	bl	800e99c <HAL_GetTick>
 80101c6:	1b40      	subs	r0, r0, r5
 80101c8:	4540      	cmp	r0, r8
 80101ca:	d9f6      	bls.n	80101ba <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80101cc:	2003      	movs	r0, #3
 80101ce:	e0d2      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101d0:	4b6e      	ldr	r3, [pc, #440]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	019b      	lsls	r3, r3, #6
 80101d6:	d4dc      	bmi.n	8010192 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80101d8:	2001      	movs	r0, #1
 80101da:	e0cc      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80101dc:	4b6b      	ldr	r3, [pc, #428]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80101de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101e0:	03db      	lsls	r3, r3, #15
 80101e2:	d4d6      	bmi.n	8010192 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80101e4:	2001      	movs	r0, #1
 80101e6:	e0c6      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80101e8:	4f68      	ldr	r7, [pc, #416]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80101ea:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101ec:	4b68      	ldr	r3, [pc, #416]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 80101ee:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4033      	ands	r3, r6
 80101f4:	2b04      	cmp	r3, #4
 80101f6:	d100      	bne.n	80101fa <HAL_RCC_ClockConfig+0xda>
 80101f8:	e0af      	b.n	801035a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101fa:	f7fe fbcf 	bl	800e99c <HAL_GetTick>
 80101fe:	1b40      	subs	r0, r0, r5
 8010200:	4540      	cmp	r0, r8
 8010202:	d9f5      	bls.n	80101f0 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 8010204:	2003      	movs	r0, #3
 8010206:	e0b6      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010208:	4f60      	ldr	r7, [pc, #384]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 801020a:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801020c:	4b60      	ldr	r3, [pc, #384]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 801020e:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4033      	ands	r3, r6
 8010214:	2b08      	cmp	r3, #8
 8010216:	d100      	bne.n	801021a <HAL_RCC_ClockConfig+0xfa>
 8010218:	e09f      	b.n	801035a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801021a:	f7fe fbbf 	bl	800e99c <HAL_GetTick>
 801021e:	1b40      	subs	r0, r0, r5
 8010220:	4540      	cmp	r0, r8
 8010222:	d9f5      	bls.n	8010210 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 8010224:	2003      	movs	r0, #3
 8010226:	e0a6      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010228:	4f58      	ldr	r7, [pc, #352]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 801022a:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801022c:	4b58      	ldr	r3, [pc, #352]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 801022e:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4033      	ands	r3, r6
 8010234:	2b0c      	cmp	r3, #12
 8010236:	d100      	bne.n	801023a <HAL_RCC_ClockConfig+0x11a>
 8010238:	e08f      	b.n	801035a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801023a:	f7fe fbaf 	bl	800e99c <HAL_GetTick>
 801023e:	1b40      	subs	r0, r0, r5
 8010240:	4540      	cmp	r0, r8
 8010242:	d9f5      	bls.n	8010230 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 8010244:	2003      	movs	r0, #3
 8010246:	e096      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010248:	6803      	ldr	r3, [r0, #0]
 801024a:	079b      	lsls	r3, r3, #30
 801024c:	d506      	bpl.n	801025c <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801024e:	4a4f      	ldr	r2, [pc, #316]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010250:	6853      	ldr	r3, [r2, #4]
 8010252:	21f0      	movs	r1, #240	; 0xf0
 8010254:	438b      	bics	r3, r1
 8010256:	6881      	ldr	r1, [r0, #8]
 8010258:	430b      	orrs	r3, r1
 801025a:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	07db      	lsls	r3, r3, #31
 8010260:	d570      	bpl.n	8010344 <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010262:	6862      	ldr	r2, [r4, #4]
 8010264:	2a01      	cmp	r2, #1
 8010266:	d009      	beq.n	801027c <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010268:	2a02      	cmp	r2, #2
 801026a:	d02c      	beq.n	80102c6 <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801026c:	2a03      	cmp	r2, #3
 801026e:	d030      	beq.n	80102d2 <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010270:	4b46      	ldr	r3, [pc, #280]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	079b      	lsls	r3, r3, #30
 8010276:	d406      	bmi.n	8010286 <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8010278:	2001      	movs	r0, #1
 801027a:	e07c      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801027c:	4b43      	ldr	r3, [pc, #268]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	039b      	lsls	r3, r3, #14
 8010282:	d400      	bmi.n	8010286 <HAL_RCC_ClockConfig+0x166>
 8010284:	e07d      	b.n	8010382 <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010286:	4941      	ldr	r1, [pc, #260]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010288:	684b      	ldr	r3, [r1, #4]
 801028a:	2003      	movs	r0, #3
 801028c:	4383      	bics	r3, r0
 801028e:	4313      	orrs	r3, r2
 8010290:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010292:	f7fe fb83 	bl	800e99c <HAL_GetTick>
 8010296:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010298:	6863      	ldr	r3, [r4, #4]
 801029a:	2b01      	cmp	r3, #1
 801029c:	d01f      	beq.n	80102de <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d02e      	beq.n	8010300 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80102a2:	2b03      	cmp	r3, #3
 80102a4:	d03d      	beq.n	8010322 <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80102a6:	4b39      	ldr	r3, [pc, #228]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80102a8:	4698      	mov	r8, r3
 80102aa:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102ac:	4b38      	ldr	r3, [pc, #224]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 80102ae:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80102b0:	4643      	mov	r3, r8
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	421f      	tst	r7, r3
 80102b6:	d045      	beq.n	8010344 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102b8:	f7fe fb70 	bl	800e99c <HAL_GetTick>
 80102bc:	1b80      	subs	r0, r0, r6
 80102be:	4548      	cmp	r0, r9
 80102c0:	d9f6      	bls.n	80102b0 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 80102c2:	2003      	movs	r0, #3
 80102c4:	e057      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80102c6:	4b31      	ldr	r3, [pc, #196]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	019b      	lsls	r3, r3, #6
 80102cc:	d4db      	bmi.n	8010286 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80102ce:	2001      	movs	r0, #1
 80102d0:	e051      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80102d2:	4b2e      	ldr	r3, [pc, #184]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80102d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102d6:	03db      	lsls	r3, r3, #15
 80102d8:	d4d5      	bmi.n	8010286 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80102da:	2001      	movs	r0, #1
 80102dc:	e04b      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80102de:	4b2b      	ldr	r3, [pc, #172]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 80102e0:	4698      	mov	r8, r3
 80102e2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102e4:	4b2a      	ldr	r3, [pc, #168]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 80102e6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80102e8:	4643      	mov	r3, r8
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	403b      	ands	r3, r7
 80102ee:	2b04      	cmp	r3, #4
 80102f0:	d028      	beq.n	8010344 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102f2:	f7fe fb53 	bl	800e99c <HAL_GetTick>
 80102f6:	1b80      	subs	r0, r0, r6
 80102f8:	4548      	cmp	r0, r9
 80102fa:	d9f5      	bls.n	80102e8 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 80102fc:	2003      	movs	r0, #3
 80102fe:	e03a      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010300:	4b22      	ldr	r3, [pc, #136]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010302:	4698      	mov	r8, r3
 8010304:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010306:	4b22      	ldr	r3, [pc, #136]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 8010308:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801030a:	4643      	mov	r3, r8
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	403b      	ands	r3, r7
 8010310:	2b08      	cmp	r3, #8
 8010312:	d017      	beq.n	8010344 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010314:	f7fe fb42 	bl	800e99c <HAL_GetTick>
 8010318:	1b80      	subs	r0, r0, r6
 801031a:	4548      	cmp	r0, r9
 801031c:	d9f5      	bls.n	801030a <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 801031e:	2003      	movs	r0, #3
 8010320:	e029      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8010322:	4b1a      	ldr	r3, [pc, #104]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010324:	4698      	mov	r8, r3
 8010326:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010328:	4b19      	ldr	r3, [pc, #100]	; (8010390 <HAL_RCC_ClockConfig+0x270>)
 801032a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801032c:	4643      	mov	r3, r8
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	403b      	ands	r3, r7
 8010332:	2b0c      	cmp	r3, #12
 8010334:	d006      	beq.n	8010344 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010336:	f7fe fb31 	bl	800e99c <HAL_GetTick>
 801033a:	1b80      	subs	r0, r0, r6
 801033c:	4548      	cmp	r0, r9
 801033e:	d9f5      	bls.n	801032c <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8010340:	2003      	movs	r0, #3
 8010342:	e018      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010344:	4910      	ldr	r1, [pc, #64]	; (8010388 <HAL_RCC_ClockConfig+0x268>)
 8010346:	680b      	ldr	r3, [r1, #0]
 8010348:	2201      	movs	r2, #1
 801034a:	4393      	bics	r3, r2
 801034c:	432b      	orrs	r3, r5
 801034e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010350:	680b      	ldr	r3, [r1, #0]
 8010352:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8010354:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010356:	42aa      	cmp	r2, r5
 8010358:	d10d      	bne.n	8010376 <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801035a:	6823      	ldr	r3, [r4, #0]
 801035c:	075b      	lsls	r3, r3, #29
 801035e:	d506      	bpl.n	801036e <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010360:	4a0a      	ldr	r2, [pc, #40]	; (801038c <HAL_RCC_ClockConfig+0x26c>)
 8010362:	6853      	ldr	r3, [r2, #4]
 8010364:	490b      	ldr	r1, [pc, #44]	; (8010394 <HAL_RCC_ClockConfig+0x274>)
 8010366:	400b      	ands	r3, r1
 8010368:	68e1      	ldr	r1, [r4, #12]
 801036a:	430b      	orrs	r3, r1
 801036c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 801036e:	2000      	movs	r0, #0
 8010370:	f7fe faea 	bl	800e948 <HAL_InitTick>
  
  return HAL_OK;
 8010374:	2000      	movs	r0, #0
}
 8010376:	bcc0      	pop	{r6, r7}
 8010378:	46b9      	mov	r9, r7
 801037a:	46b0      	mov	r8, r6
 801037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 801037e:	2001      	movs	r0, #1
 8010380:	e7f9      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 8010382:	2001      	movs	r0, #1
 8010384:	e7f7      	b.n	8010376 <HAL_RCC_ClockConfig+0x256>
 8010386:	46c0      	nop			; (mov r8, r8)
 8010388:	40022000 	.word	0x40022000
 801038c:	40021000 	.word	0x40021000
 8010390:	00001388 	.word	0x00001388
 8010394:	fffff8ff 	.word	0xfffff8ff

08010398 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010398:	b510      	push	{r4, lr}
 801039a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 801039c:	aa04      	add	r2, sp, #16
 801039e:	4b20      	ldr	r3, [pc, #128]	; (8010420 <HAL_RCC_GetSysClockFreq+0x88>)
 80103a0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80103a2:	c213      	stmia	r2!, {r0, r1, r4}
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80103a8:	466a      	mov	r2, sp
 80103aa:	4b1e      	ldr	r3, [pc, #120]	; (8010424 <HAL_RCC_GetSysClockFreq+0x8c>)
 80103ac:	cb13      	ldmia	r3!, {r0, r1, r4}
 80103ae:	c213      	stmia	r2!, {r0, r1, r4}
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80103b4:	4b1c      	ldr	r3, [pc, #112]	; (8010428 <HAL_RCC_GetSysClockFreq+0x90>)
 80103b6:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80103b8:	200c      	movs	r0, #12
 80103ba:	4018      	ands	r0, r3
 80103bc:	2808      	cmp	r0, #8
 80103be:	d00a      	beq.n	80103d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80103c0:	380c      	subs	r0, #12
 80103c2:	1e43      	subs	r3, r0, #1
 80103c4:	4198      	sbcs	r0, r3
 80103c6:	4240      	negs	r0, r0
 80103c8:	4b18      	ldr	r3, [pc, #96]	; (801042c <HAL_RCC_GetSysClockFreq+0x94>)
 80103ca:	4018      	ands	r0, r3
 80103cc:	4b18      	ldr	r3, [pc, #96]	; (8010430 <HAL_RCC_GetSysClockFreq+0x98>)
 80103ce:	469c      	mov	ip, r3
 80103d0:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80103d2:	b008      	add	sp, #32
 80103d4:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80103d6:	0c99      	lsrs	r1, r3, #18
 80103d8:	220f      	movs	r2, #15
 80103da:	4011      	ands	r1, r2
 80103dc:	a804      	add	r0, sp, #16
 80103de:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80103e0:	4911      	ldr	r1, [pc, #68]	; (8010428 <HAL_RCC_GetSysClockFreq+0x90>)
 80103e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80103e4:	400a      	ands	r2, r1
 80103e6:	4669      	mov	r1, sp
 80103e8:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80103ea:	22c0      	movs	r2, #192	; 0xc0
 80103ec:	0252      	lsls	r2, r2, #9
 80103ee:	4013      	ands	r3, r2
 80103f0:	2280      	movs	r2, #128	; 0x80
 80103f2:	0252      	lsls	r2, r2, #9
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d008      	beq.n	801040a <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80103f8:	22c0      	movs	r2, #192	; 0xc0
 80103fa:	0252      	lsls	r2, r2, #9
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d009      	beq.n	8010414 <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8010400:	480c      	ldr	r0, [pc, #48]	; (8010434 <HAL_RCC_GetSysClockFreq+0x9c>)
 8010402:	f7ef fea5 	bl	8000150 <__udivsi3>
 8010406:	4360      	muls	r0, r4
 8010408:	e7e3      	b.n	80103d2 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 801040a:	480a      	ldr	r0, [pc, #40]	; (8010434 <HAL_RCC_GetSysClockFreq+0x9c>)
 801040c:	f7ef fea0 	bl	8000150 <__udivsi3>
 8010410:	4360      	muls	r0, r4
 8010412:	e7de      	b.n	80103d2 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8010414:	4806      	ldr	r0, [pc, #24]	; (8010430 <HAL_RCC_GetSysClockFreq+0x98>)
 8010416:	f7ef fe9b 	bl	8000150 <__udivsi3>
 801041a:	4360      	muls	r0, r4
 801041c:	e7d9      	b.n	80103d2 <HAL_RCC_GetSysClockFreq+0x3a>
 801041e:	46c0      	nop			; (mov r8, r8)
 8010420:	0801a794 	.word	0x0801a794
 8010424:	0801a7a8 	.word	0x0801a7a8
 8010428:	40021000 	.word	0x40021000
 801042c:	fd9da600 	.word	0xfd9da600
 8010430:	02dc6c00 	.word	0x02dc6c00
 8010434:	007a1200 	.word	0x007a1200

08010438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010438:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801043a:	f7ff ffad 	bl	8010398 <HAL_RCC_GetSysClockFreq>
 801043e:	4b05      	ldr	r3, [pc, #20]	; (8010454 <HAL_RCC_GetHCLKFreq+0x1c>)
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	061b      	lsls	r3, r3, #24
 8010444:	0f1b      	lsrs	r3, r3, #28
 8010446:	4a04      	ldr	r2, [pc, #16]	; (8010458 <HAL_RCC_GetHCLKFreq+0x20>)
 8010448:	5cd3      	ldrb	r3, [r2, r3]
 801044a:	40d8      	lsrs	r0, r3
 801044c:	4b03      	ldr	r3, [pc, #12]	; (801045c <HAL_RCC_GetHCLKFreq+0x24>)
 801044e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8010450:	bd10      	pop	{r4, pc}
 8010452:	46c0      	nop			; (mov r8, r8)
 8010454:	40021000 	.word	0x40021000
 8010458:	0801a7bc 	.word	0x0801a7bc
 801045c:	200000e8 	.word	0x200000e8

08010460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010460:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8010462:	f7ff ffe9 	bl	8010438 <HAL_RCC_GetHCLKFreq>
 8010466:	4b04      	ldr	r3, [pc, #16]	; (8010478 <HAL_RCC_GetPCLK1Freq+0x18>)
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	055b      	lsls	r3, r3, #21
 801046c:	0f5b      	lsrs	r3, r3, #29
 801046e:	4a03      	ldr	r2, [pc, #12]	; (801047c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010470:	5cd3      	ldrb	r3, [r2, r3]
 8010472:	40d8      	lsrs	r0, r3
}    
 8010474:	bd10      	pop	{r4, pc}
 8010476:	46c0      	nop			; (mov r8, r8)
 8010478:	40021000 	.word	0x40021000
 801047c:	0801a7bc 	.word	0x0801a7bc

08010480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010482:	46c6      	mov	lr, r8
 8010484:	b500      	push	{lr}
 8010486:	b082      	sub	sp, #8
 8010488:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801048a:	6803      	ldr	r3, [r0, #0]
 801048c:	03db      	lsls	r3, r3, #15
 801048e:	d507      	bpl.n	80104a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010490:	4b43      	ldr	r3, [pc, #268]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010492:	6a1b      	ldr	r3, [r3, #32]
 8010494:	6842      	ldr	r2, [r0, #4]
 8010496:	4053      	eors	r3, r2
 8010498:	22c0      	movs	r2, #192	; 0xc0
 801049a:	0092      	lsls	r2, r2, #2
 801049c:	4213      	tst	r3, r2
 801049e:	d136      	bne.n	801050e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80104a0:	6823      	ldr	r3, [r4, #0]
 80104a2:	07db      	lsls	r3, r3, #31
 80104a4:	d506      	bpl.n	80104b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80104a6:	4a3e      	ldr	r2, [pc, #248]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80104a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104aa:	2103      	movs	r1, #3
 80104ac:	438b      	bics	r3, r1
 80104ae:	68a1      	ldr	r1, [r4, #8]
 80104b0:	430b      	orrs	r3, r1
 80104b2:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	079b      	lsls	r3, r3, #30
 80104b8:	d506      	bpl.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80104ba:	4a39      	ldr	r2, [pc, #228]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80104bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104be:	4939      	ldr	r1, [pc, #228]	; (80105a4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80104c0:	400b      	ands	r3, r1
 80104c2:	68e1      	ldr	r1, [r4, #12]
 80104c4:	430b      	orrs	r3, r1
 80104c6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	035b      	lsls	r3, r3, #13
 80104cc:	d506      	bpl.n	80104dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80104ce:	4a34      	ldr	r2, [pc, #208]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80104d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104d2:	4935      	ldr	r1, [pc, #212]	; (80105a8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80104d4:	400b      	ands	r3, r1
 80104d6:	6921      	ldr	r1, [r4, #16]
 80104d8:	430b      	orrs	r3, r1
 80104da:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	069b      	lsls	r3, r3, #26
 80104e0:	d506      	bpl.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80104e2:	4a2f      	ldr	r2, [pc, #188]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80104e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104e6:	2110      	movs	r1, #16
 80104e8:	438b      	bics	r3, r1
 80104ea:	6961      	ldr	r1, [r4, #20]
 80104ec:	430b      	orrs	r3, r1
 80104ee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80104f0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	055b      	lsls	r3, r3, #21
 80104f6:	d506      	bpl.n	8010506 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80104f8:	4a29      	ldr	r2, [pc, #164]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80104fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104fc:	2140      	movs	r1, #64	; 0x40
 80104fe:	438b      	bics	r3, r1
 8010500:	69a1      	ldr	r1, [r4, #24]
 8010502:	430b      	orrs	r3, r1
 8010504:	6313      	str	r3, [r2, #48]	; 0x30
}
 8010506:	b002      	add	sp, #8
 8010508:	bc80      	pop	{r7}
 801050a:	46b8      	mov	r8, r7
 801050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 801050e:	4a24      	ldr	r2, [pc, #144]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010510:	69d1      	ldr	r1, [r2, #28]
 8010512:	2080      	movs	r0, #128	; 0x80
 8010514:	0540      	lsls	r0, r0, #21
 8010516:	4301      	orrs	r1, r0
 8010518:	61d1      	str	r1, [r2, #28]
 801051a:	69d3      	ldr	r3, [r2, #28]
 801051c:	4003      	ands	r3, r0
 801051e:	9301      	str	r3, [sp, #4]
 8010520:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010522:	4a22      	ldr	r2, [pc, #136]	; (80105ac <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8010524:	6811      	ldr	r1, [r2, #0]
 8010526:	2380      	movs	r3, #128	; 0x80
 8010528:	005b      	lsls	r3, r3, #1
 801052a:	430b      	orrs	r3, r1
 801052c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801052e:	f7fe fa35 	bl	800e99c <HAL_GetTick>
 8010532:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8010534:	4f1d      	ldr	r7, [pc, #116]	; (80105ac <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8010536:	2680      	movs	r6, #128	; 0x80
 8010538:	0076      	lsls	r6, r6, #1
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	4233      	tst	r3, r6
 801053e:	d106      	bne.n	801054e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010540:	f7fe fa2c 	bl	800e99c <HAL_GetTick>
 8010544:	1b40      	subs	r0, r0, r5
 8010546:	2864      	cmp	r0, #100	; 0x64
 8010548:	d9f7      	bls.n	801053a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801054a:	2003      	movs	r0, #3
 801054c:	e7db      	b.n	8010506 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801054e:	4b14      	ldr	r3, [pc, #80]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010550:	6a18      	ldr	r0, [r3, #32]
 8010552:	4a17      	ldr	r2, [pc, #92]	; (80105b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8010554:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8010556:	6a1d      	ldr	r5, [r3, #32]
 8010558:	2180      	movs	r1, #128	; 0x80
 801055a:	0249      	lsls	r1, r1, #9
 801055c:	4329      	orrs	r1, r5
 801055e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010560:	6a19      	ldr	r1, [r3, #32]
 8010562:	4d14      	ldr	r5, [pc, #80]	; (80105b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8010564:	4029      	ands	r1, r5
 8010566:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8010568:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801056a:	0783      	lsls	r3, r0, #30
 801056c:	d407      	bmi.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801056e:	4a0c      	ldr	r2, [pc, #48]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010570:	6a13      	ldr	r3, [r2, #32]
 8010572:	490f      	ldr	r1, [pc, #60]	; (80105b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8010574:	400b      	ands	r3, r1
 8010576:	6861      	ldr	r1, [r4, #4]
 8010578:	430b      	orrs	r3, r1
 801057a:	6213      	str	r3, [r2, #32]
 801057c:	e790      	b.n	80104a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801057e:	f7fe fa0d 	bl	800e99c <HAL_GetTick>
 8010582:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010584:	4f06      	ldr	r7, [pc, #24]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010586:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010588:	4b0b      	ldr	r3, [pc, #44]	; (80105b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 801058a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	421e      	tst	r6, r3
 8010590:	d1ed      	bne.n	801056e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010592:	f7fe fa03 	bl	800e99c <HAL_GetTick>
 8010596:	1b40      	subs	r0, r0, r5
 8010598:	4540      	cmp	r0, r8
 801059a:	d9f7      	bls.n	801058c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 801059c:	2003      	movs	r0, #3
 801059e:	e7b2      	b.n	8010506 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80105a0:	40021000 	.word	0x40021000
 80105a4:	fffcffff 	.word	0xfffcffff
 80105a8:	fff3ffff 	.word	0xfff3ffff
 80105ac:	40007000 	.word	0x40007000
 80105b0:	fffffcff 	.word	0xfffffcff
 80105b4:	fffeffff 	.word	0xfffeffff
 80105b8:	00001388 	.word	0x00001388

080105bc <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80105bc:	4770      	bx	lr

080105be <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80105be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80105c2:	6802      	ldr	r2, [r0, #0]
 80105c4:	68d3      	ldr	r3, [r2, #12]
 80105c6:	21a0      	movs	r1, #160	; 0xa0
 80105c8:	438b      	bics	r3, r1
 80105ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80105cc:	f7fe f9e6 	bl	800e99c <HAL_GetTick>
 80105d0:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80105d2:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80105d4:	27fa      	movs	r7, #250	; 0xfa
 80105d6:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	421e      	tst	r6, r3
 80105de:	d106      	bne.n	80105ee <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80105e0:	f7fe f9dc 	bl	800e99c <HAL_GetTick>
 80105e4:	1b40      	subs	r0, r0, r5
 80105e6:	42b8      	cmp	r0, r7
 80105e8:	d9f6      	bls.n	80105d8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80105ea:	2003      	movs	r0, #3
 80105ec:	e000      	b.n	80105f0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80105ee:	2000      	movs	r0, #0
}
 80105f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080105f2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80105f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80105f6:	6803      	ldr	r3, [r0, #0]
 80105f8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80105fa:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80105fc:	0652      	lsls	r2, r2, #25
 80105fe:	d500      	bpl.n	8010602 <RTC_EnterInitMode+0x10>
}
 8010600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010602:	2201      	movs	r2, #1
 8010604:	4252      	negs	r2, r2
 8010606:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8010608:	f7fe f9c8 	bl	800e99c <HAL_GetTick>
 801060c:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801060e:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010610:	27fa      	movs	r7, #250	; 0xfa
 8010612:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	421e      	tst	r6, r3
 801061a:	d106      	bne.n	801062a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801061c:	f7fe f9be 	bl	800e99c <HAL_GetTick>
 8010620:	1b40      	subs	r0, r0, r5
 8010622:	42b8      	cmp	r0, r7
 8010624:	d9f6      	bls.n	8010614 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8010626:	2003      	movs	r0, #3
 8010628:	e7ea      	b.n	8010600 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 801062a:	2000      	movs	r0, #0
 801062c:	e7e8      	b.n	8010600 <RTC_EnterInitMode+0xe>
	...

08010630 <HAL_RTC_Init>:
{
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8010634:	d046      	beq.n	80106c4 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8010636:	7f43      	ldrb	r3, [r0, #29]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d013      	beq.n	8010664 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801063c:	2302      	movs	r3, #2
 801063e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010640:	6823      	ldr	r3, [r4, #0]
 8010642:	22ca      	movs	r2, #202	; 0xca
 8010644:	625a      	str	r2, [r3, #36]	; 0x24
 8010646:	6823      	ldr	r3, [r4, #0]
 8010648:	3a77      	subs	r2, #119	; 0x77
 801064a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801064c:	0020      	movs	r0, r4
 801064e:	f7ff ffd0 	bl	80105f2 <RTC_EnterInitMode>
 8010652:	2800      	cmp	r0, #0
 8010654:	d00a      	beq.n	801066c <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	22ff      	movs	r2, #255	; 0xff
 801065a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801065c:	2304      	movs	r3, #4
 801065e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8010660:	2001      	movs	r0, #1
}
 8010662:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8010664:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8010666:	f7ff ffa9 	bl	80105bc <HAL_RTC_MspInit>
 801066a:	e7e7      	b.n	801063c <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801066c:	6822      	ldr	r2, [r4, #0]
 801066e:	6893      	ldr	r3, [r2, #8]
 8010670:	4915      	ldr	r1, [pc, #84]	; (80106c8 <HAL_RTC_Init+0x98>)
 8010672:	400b      	ands	r3, r1
 8010674:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010676:	6822      	ldr	r2, [r4, #0]
 8010678:	6891      	ldr	r1, [r2, #8]
 801067a:	6863      	ldr	r3, [r4, #4]
 801067c:	6925      	ldr	r5, [r4, #16]
 801067e:	432b      	orrs	r3, r5
 8010680:	6965      	ldr	r5, [r4, #20]
 8010682:	432b      	orrs	r3, r5
 8010684:	430b      	orrs	r3, r1
 8010686:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010688:	6823      	ldr	r3, [r4, #0]
 801068a:	68e2      	ldr	r2, [r4, #12]
 801068c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801068e:	6822      	ldr	r2, [r4, #0]
 8010690:	6911      	ldr	r1, [r2, #16]
 8010692:	68a3      	ldr	r3, [r4, #8]
 8010694:	041b      	lsls	r3, r3, #16
 8010696:	430b      	orrs	r3, r1
 8010698:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801069a:	6822      	ldr	r2, [r4, #0]
 801069c:	68d3      	ldr	r3, [r2, #12]
 801069e:	2180      	movs	r1, #128	; 0x80
 80106a0:	438b      	bics	r3, r1
 80106a2:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80106a4:	6822      	ldr	r2, [r4, #0]
 80106a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80106a8:	4908      	ldr	r1, [pc, #32]	; (80106cc <HAL_RTC_Init+0x9c>)
 80106aa:	400b      	ands	r3, r1
 80106ac:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80106ae:	6822      	ldr	r2, [r4, #0]
 80106b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80106b2:	69a1      	ldr	r1, [r4, #24]
 80106b4:	430b      	orrs	r3, r1
 80106b6:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	22ff      	movs	r2, #255	; 0xff
 80106bc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80106be:	2301      	movs	r3, #1
 80106c0:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80106c2:	e7ce      	b.n	8010662 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 80106c4:	2001      	movs	r0, #1
 80106c6:	e7cc      	b.n	8010662 <HAL_RTC_Init+0x32>
 80106c8:	ff8fffbf 	.word	0xff8fffbf
 80106cc:	fffbffff 	.word	0xfffbffff

080106d0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80106d0:	2809      	cmp	r0, #9
 80106d2:	d909      	bls.n	80106e8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80106d4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80106d6:	3301      	adds	r3, #1
    Value -= 10;
 80106d8:	380a      	subs	r0, #10
 80106da:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80106dc:	2809      	cmp	r0, #9
 80106de:	d8fa      	bhi.n	80106d6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80106e0:	011b      	lsls	r3, r3, #4
 80106e2:	4318      	orrs	r0, r3
 80106e4:	b2c0      	uxtb	r0, r0
}
 80106e6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	e7f9      	b.n	80106e0 <RTC_ByteToBcd2+0x10>

080106ec <HAL_RTC_SetTime>:
{
 80106ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ee:	0004      	movs	r4, r0
 80106f0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80106f2:	7f03      	ldrb	r3, [r0, #28]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d100      	bne.n	80106fa <HAL_RTC_SetTime+0xe>
 80106f8:	e072      	b.n	80107e0 <HAL_RTC_SetTime+0xf4>
 80106fa:	2301      	movs	r3, #1
 80106fc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80106fe:	3301      	adds	r3, #1
 8010700:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8010702:	2a00      	cmp	r2, #0
 8010704:	d144      	bne.n	8010790 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010706:	6803      	ldr	r3, [r0, #0]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	065b      	lsls	r3, r3, #25
 801070c:	d401      	bmi.n	8010712 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 801070e:	2300      	movs	r3, #0
 8010710:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8010712:	7830      	ldrb	r0, [r6, #0]
 8010714:	f7ff ffdc 	bl	80106d0 <RTC_ByteToBcd2>
 8010718:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801071a:	7870      	ldrb	r0, [r6, #1]
 801071c:	f7ff ffd8 	bl	80106d0 <RTC_ByteToBcd2>
 8010720:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8010722:	78b0      	ldrb	r0, [r6, #2]
 8010724:	f7ff ffd4 	bl	80106d0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8010728:	7a33      	ldrb	r3, [r6, #8]
 801072a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801072c:	4303      	orrs	r3, r0
 801072e:	042d      	lsls	r5, r5, #16
 8010730:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8010732:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8010734:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	22ca      	movs	r2, #202	; 0xca
 801073a:	625a      	str	r2, [r3, #36]	; 0x24
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	3a77      	subs	r2, #119	; 0x77
 8010740:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010742:	0020      	movs	r0, r4
 8010744:	f7ff ff55 	bl	80105f2 <RTC_EnterInitMode>
 8010748:	1e07      	subs	r7, r0, #0
 801074a:	d132      	bne.n	80107b2 <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	4825      	ldr	r0, [pc, #148]	; (80107e4 <HAL_RTC_SetTime+0xf8>)
 8010750:	4005      	ands	r5, r0
 8010752:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8010754:	6822      	ldr	r2, [r4, #0]
 8010756:	6893      	ldr	r3, [r2, #8]
 8010758:	4923      	ldr	r1, [pc, #140]	; (80107e8 <HAL_RTC_SetTime+0xfc>)
 801075a:	400b      	ands	r3, r1
 801075c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801075e:	6822      	ldr	r2, [r4, #0]
 8010760:	6891      	ldr	r1, [r2, #8]
 8010762:	68f3      	ldr	r3, [r6, #12]
 8010764:	6930      	ldr	r0, [r6, #16]
 8010766:	4303      	orrs	r3, r0
 8010768:	430b      	orrs	r3, r1
 801076a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801076c:	6822      	ldr	r2, [r4, #0]
 801076e:	68d3      	ldr	r3, [r2, #12]
 8010770:	2180      	movs	r1, #128	; 0x80
 8010772:	438b      	bics	r3, r1
 8010774:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010776:	6823      	ldr	r3, [r4, #0]
 8010778:	689b      	ldr	r3, [r3, #8]
 801077a:	069b      	lsls	r3, r3, #26
 801077c:	d522      	bpl.n	80107c4 <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801077e:	6823      	ldr	r3, [r4, #0]
 8010780:	22ff      	movs	r2, #255	; 0xff
 8010782:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8010784:	2301      	movs	r3, #1
 8010786:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8010788:	2300      	movs	r3, #0
 801078a:	7723      	strb	r3, [r4, #28]
}
 801078c:	0038      	movs	r0, r7
 801078e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010790:	6803      	ldr	r3, [r0, #0]
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	065b      	lsls	r3, r3, #25
 8010796:	d401      	bmi.n	801079c <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8010798:	2300      	movs	r3, #0
 801079a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801079c:	7835      	ldrb	r5, [r6, #0]
 801079e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80107a0:	7870      	ldrb	r0, [r6, #1]
 80107a2:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80107a4:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80107a6:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80107a8:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80107aa:	7a30      	ldrb	r0, [r6, #8]
 80107ac:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80107ae:	4305      	orrs	r5, r0
 80107b0:	e7c1      	b.n	8010736 <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80107b2:	6823      	ldr	r3, [r4, #0]
 80107b4:	22ff      	movs	r2, #255	; 0xff
 80107b6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80107b8:	2304      	movs	r3, #4
 80107ba:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80107bc:	2300      	movs	r3, #0
 80107be:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80107c0:	2701      	movs	r7, #1
 80107c2:	e7e3      	b.n	801078c <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80107c4:	0020      	movs	r0, r4
 80107c6:	f7ff fefa 	bl	80105be <HAL_RTC_WaitForSynchro>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d0d7      	beq.n	801077e <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80107ce:	6823      	ldr	r3, [r4, #0]
 80107d0:	22ff      	movs	r2, #255	; 0xff
 80107d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80107d4:	2304      	movs	r3, #4
 80107d6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80107d8:	2300      	movs	r3, #0
 80107da:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80107dc:	2701      	movs	r7, #1
 80107de:	e7d5      	b.n	801078c <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 80107e0:	2702      	movs	r7, #2
 80107e2:	e7d3      	b.n	801078c <HAL_RTC_SetTime+0xa0>
 80107e4:	007f7f7f 	.word	0x007f7f7f
 80107e8:	fffbffff 	.word	0xfffbffff

080107ec <HAL_RTC_SetDate>:
{
 80107ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ee:	46c6      	mov	lr, r8
 80107f0:	b500      	push	{lr}
 80107f2:	0004      	movs	r4, r0
 80107f4:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80107f6:	7f03      	ldrb	r3, [r0, #28]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d037      	beq.n	801086c <HAL_RTC_SetDate+0x80>
 80107fc:	2301      	movs	r3, #1
 80107fe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8010800:	3301      	adds	r3, #1
 8010802:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8010804:	2a00      	cmp	r2, #0
 8010806:	d133      	bne.n	8010870 <HAL_RTC_SetDate+0x84>
 8010808:	784b      	ldrb	r3, [r1, #1]
 801080a:	06da      	lsls	r2, r3, #27
 801080c:	d503      	bpl.n	8010816 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 801080e:	2210      	movs	r2, #16
 8010810:	4393      	bics	r3, r2
 8010812:	330a      	adds	r3, #10
 8010814:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010816:	78f0      	ldrb	r0, [r6, #3]
 8010818:	f7ff ff5a 	bl	80106d0 <RTC_ByteToBcd2>
 801081c:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801081e:	7870      	ldrb	r0, [r6, #1]
 8010820:	f7ff ff56 	bl	80106d0 <RTC_ByteToBcd2>
 8010824:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8010826:	78b0      	ldrb	r0, [r6, #2]
 8010828:	f7ff ff52 	bl	80106d0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 801082c:	7833      	ldrb	r3, [r6, #0]
 801082e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8010830:	4303      	orrs	r3, r0
 8010832:	042d      	lsls	r5, r5, #16
 8010834:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8010836:	4643      	mov	r3, r8
 8010838:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801083a:	4305      	orrs	r5, r0
 801083c:	e022      	b.n	8010884 <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	22ff      	movs	r2, #255	; 0xff
 8010842:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010844:	2304      	movs	r3, #4
 8010846:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010848:	2300      	movs	r3, #0
 801084a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801084c:	2601      	movs	r6, #1
 801084e:	e038      	b.n	80108c2 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010850:	0020      	movs	r0, r4
 8010852:	f7ff feb4 	bl	80105be <HAL_RTC_WaitForSynchro>
 8010856:	2800      	cmp	r0, #0
 8010858:	d02c      	beq.n	80108b4 <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801085a:	6823      	ldr	r3, [r4, #0]
 801085c:	22ff      	movs	r2, #255	; 0xff
 801085e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010860:	2304      	movs	r3, #4
 8010862:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8010864:	2300      	movs	r3, #0
 8010866:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8010868:	2601      	movs	r6, #1
 801086a:	e02a      	b.n	80108c2 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 801086c:	2602      	movs	r6, #2
 801086e:	e028      	b.n	80108c2 <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010870:	78cd      	ldrb	r5, [r1, #3]
 8010872:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8010874:	7848      	ldrb	r0, [r1, #1]
 8010876:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010878:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 801087a:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 801087c:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 801087e:	7808      	ldrb	r0, [r1, #0]
 8010880:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010882:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	22ca      	movs	r2, #202	; 0xca
 8010888:	625a      	str	r2, [r3, #36]	; 0x24
 801088a:	6823      	ldr	r3, [r4, #0]
 801088c:	3a77      	subs	r2, #119	; 0x77
 801088e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010890:	0020      	movs	r0, r4
 8010892:	f7ff feae 	bl	80105f2 <RTC_EnterInitMode>
 8010896:	1e06      	subs	r6, r0, #0
 8010898:	d1d1      	bne.n	801083e <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801089a:	6823      	ldr	r3, [r4, #0]
 801089c:	480b      	ldr	r0, [pc, #44]	; (80108cc <HAL_RTC_SetDate+0xe0>)
 801089e:	4005      	ands	r5, r0
 80108a0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80108a2:	6822      	ldr	r2, [r4, #0]
 80108a4:	68d3      	ldr	r3, [r2, #12]
 80108a6:	2180      	movs	r1, #128	; 0x80
 80108a8:	438b      	bics	r3, r1
 80108aa:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	069b      	lsls	r3, r3, #26
 80108b2:	d5cd      	bpl.n	8010850 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	22ff      	movs	r2, #255	; 0xff
 80108b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80108ba:	2301      	movs	r3, #1
 80108bc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80108be:	2300      	movs	r3, #0
 80108c0:	7723      	strb	r3, [r4, #28]
}
 80108c2:	0030      	movs	r0, r6
 80108c4:	bc80      	pop	{r7}
 80108c6:	46b8      	mov	r8, r7
 80108c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ca:	46c0      	nop			; (mov r8, r8)
 80108cc:	00ffff3f 	.word	0x00ffff3f

080108d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80108d0:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80108d2:	0902      	lsrs	r2, r0, #4
 80108d4:	0090      	lsls	r0, r2, #2
 80108d6:	1880      	adds	r0, r0, r2
 80108d8:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80108da:	220f      	movs	r2, #15
 80108dc:	4013      	ands	r3, r2
 80108de:	18c0      	adds	r0, r0, r3
 80108e0:	b2c0      	uxtb	r0, r0
}
 80108e2:	4770      	bx	lr

080108e4 <HAL_RTC_GetTime>:
{
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80108e8:	6803      	ldr	r3, [r0, #0]
 80108ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ec:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80108ee:	6803      	ldr	r3, [r0, #0]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	490e      	ldr	r1, [pc, #56]	; (801092c <HAL_RTC_GetTime+0x48>)
 80108f4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80108f6:	0c19      	lsrs	r1, r3, #16
 80108f8:	203f      	movs	r0, #63	; 0x3f
 80108fa:	4008      	ands	r0, r1
 80108fc:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80108fe:	0a1e      	lsrs	r6, r3, #8
 8010900:	b2f6      	uxtb	r6, r6
 8010902:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010904:	b2dd      	uxtb	r5, r3
 8010906:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8010908:	2340      	movs	r3, #64	; 0x40
 801090a:	400b      	ands	r3, r1
 801090c:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 801090e:	2a00      	cmp	r2, #0
 8010910:	d10a      	bne.n	8010928 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010912:	f7ff ffdd 	bl	80108d0 <RTC_Bcd2ToByte>
 8010916:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010918:	0030      	movs	r0, r6
 801091a:	f7ff ffd9 	bl	80108d0 <RTC_Bcd2ToByte>
 801091e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8010920:	0028      	movs	r0, r5
 8010922:	f7ff ffd5 	bl	80108d0 <RTC_Bcd2ToByte>
 8010926:	70a0      	strb	r0, [r4, #2]
}
 8010928:	2000      	movs	r0, #0
 801092a:	bd70      	pop	{r4, r5, r6, pc}
 801092c:	007f7f7f 	.word	0x007f7f7f

08010930 <HAL_RTC_GetDate>:
{
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8010934:	6803      	ldr	r3, [r0, #0]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	490d      	ldr	r1, [pc, #52]	; (8010970 <HAL_RTC_GetDate+0x40>)
 801093a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801093c:	0c18      	lsrs	r0, r3, #16
 801093e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010940:	04dd      	lsls	r5, r3, #19
 8010942:	0eed      	lsrs	r5, r5, #27
 8010944:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010946:	b2de      	uxtb	r6, r3
 8010948:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801094a:	041b      	lsls	r3, r3, #16
 801094c:	0f5b      	lsrs	r3, r3, #29
 801094e:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8010950:	2a00      	cmp	r2, #0
 8010952:	d10a      	bne.n	801096a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010954:	f7ff ffbc 	bl	80108d0 <RTC_Bcd2ToByte>
 8010958:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801095a:	0028      	movs	r0, r5
 801095c:	f7ff ffb8 	bl	80108d0 <RTC_Bcd2ToByte>
 8010960:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8010962:	0030      	movs	r0, r6
 8010964:	f7ff ffb4 	bl	80108d0 <RTC_Bcd2ToByte>
 8010968:	70a0      	strb	r0, [r4, #2]
}
 801096a:	2000      	movs	r0, #0
 801096c:	bd70      	pop	{r4, r5, r6, pc}
 801096e:	46c0      	nop			; (mov r8, r8)
 8010970:	00ffff3f 	.word	0x00ffff3f

08010974 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010974:	6803      	ldr	r3, [r0, #0]
 8010976:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010978:	0089      	lsls	r1, r1, #2
 801097a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801097c:	600a      	str	r2, [r1, #0]
}
 801097e:	4770      	bx	lr

08010980 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010980:	6803      	ldr	r3, [r0, #0]
 8010982:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010984:	0089      	lsls	r1, r1, #2
 8010986:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8010988:	6808      	ldr	r0, [r1, #0]
}
 801098a:	4770      	bx	lr

0801098c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801098c:	4770      	bx	lr

0801098e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801098e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8010990:	2239      	movs	r2, #57	; 0x39
 8010992:	2302      	movs	r3, #2
 8010994:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010996:	6804      	ldr	r4, [r0, #0]
 8010998:	6823      	ldr	r3, [r4, #0]
 801099a:	2101      	movs	r1, #1
 801099c:	430b      	orrs	r3, r1
 801099e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80109a0:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80109a2:	2000      	movs	r0, #0
 80109a4:	bd10      	pop	{r4, pc}
	...

080109a8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80109a8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80109aa:	4a2f      	ldr	r2, [pc, #188]	; (8010a68 <TIM_Base_SetConfig+0xc0>)
 80109ac:	4290      	cmp	r0, r2
 80109ae:	d044      	beq.n	8010a3a <TIM_Base_SetConfig+0x92>
 80109b0:	2280      	movs	r2, #128	; 0x80
 80109b2:	05d2      	lsls	r2, r2, #23
 80109b4:	4290      	cmp	r0, r2
 80109b6:	d032      	beq.n	8010a1e <TIM_Base_SetConfig+0x76>
 80109b8:	4a2c      	ldr	r2, [pc, #176]	; (8010a6c <TIM_Base_SetConfig+0xc4>)
 80109ba:	4290      	cmp	r0, r2
 80109bc:	d04f      	beq.n	8010a5e <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80109be:	4a2c      	ldr	r2, [pc, #176]	; (8010a70 <TIM_Base_SetConfig+0xc8>)
 80109c0:	4290      	cmp	r0, r2
 80109c2:	d030      	beq.n	8010a26 <TIM_Base_SetConfig+0x7e>
 80109c4:	4a2b      	ldr	r2, [pc, #172]	; (8010a74 <TIM_Base_SetConfig+0xcc>)
 80109c6:	4290      	cmp	r0, r2
 80109c8:	d01f      	beq.n	8010a0a <TIM_Base_SetConfig+0x62>
 80109ca:	4a2b      	ldr	r2, [pc, #172]	; (8010a78 <TIM_Base_SetConfig+0xd0>)
 80109cc:	4290      	cmp	r0, r2
 80109ce:	d012      	beq.n	80109f6 <TIM_Base_SetConfig+0x4e>
 80109d0:	4a2a      	ldr	r2, [pc, #168]	; (8010a7c <TIM_Base_SetConfig+0xd4>)
 80109d2:	4290      	cmp	r0, r2
 80109d4:	d005      	beq.n	80109e2 <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80109d6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80109d8:	688b      	ldr	r3, [r1, #8]
 80109da:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80109dc:	680b      	ldr	r3, [r1, #0]
 80109de:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80109e0:	e03a      	b.n	8010a58 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 80109e2:	4a27      	ldr	r2, [pc, #156]	; (8010a80 <TIM_Base_SetConfig+0xd8>)
 80109e4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109e6:	68ca      	ldr	r2, [r1, #12]
 80109e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80109ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80109ec:	688b      	ldr	r3, [r1, #8]
 80109ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80109f0:	680b      	ldr	r3, [r1, #0]
 80109f2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80109f4:	e02e      	b.n	8010a54 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80109f6:	4a22      	ldr	r2, [pc, #136]	; (8010a80 <TIM_Base_SetConfig+0xd8>)
 80109f8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109fa:	68ca      	ldr	r2, [r1, #12]
 80109fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80109fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a00:	688b      	ldr	r3, [r1, #8]
 8010a02:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010a04:	680b      	ldr	r3, [r1, #0]
 8010a06:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a08:	e024      	b.n	8010a54 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8010a0a:	4a1d      	ldr	r2, [pc, #116]	; (8010a80 <TIM_Base_SetConfig+0xd8>)
 8010a0c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010a0e:	68ca      	ldr	r2, [r1, #12]
 8010a10:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010a12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a14:	688b      	ldr	r3, [r1, #8]
 8010a16:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010a18:	680b      	ldr	r3, [r1, #0]
 8010a1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a1c:	e01a      	b.n	8010a54 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a1e:	2270      	movs	r2, #112	; 0x70
 8010a20:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010a22:	684a      	ldr	r2, [r1, #4]
 8010a24:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010a26:	4a16      	ldr	r2, [pc, #88]	; (8010a80 <TIM_Base_SetConfig+0xd8>)
 8010a28:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010a2a:	68ca      	ldr	r2, [r1, #12]
 8010a2c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010a2e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a30:	688b      	ldr	r3, [r1, #8]
 8010a32:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010a34:	680b      	ldr	r3, [r1, #0]
 8010a36:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a38:	e00e      	b.n	8010a58 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a3a:	2270      	movs	r2, #112	; 0x70
 8010a3c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010a3e:	684a      	ldr	r2, [r1, #4]
 8010a40:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010a42:	4a0f      	ldr	r2, [pc, #60]	; (8010a80 <TIM_Base_SetConfig+0xd8>)
 8010a44:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010a46:	68ca      	ldr	r2, [r1, #12]
 8010a48:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010a4a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a4c:	688b      	ldr	r3, [r1, #8]
 8010a4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010a50:	680b      	ldr	r3, [r1, #0]
 8010a52:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a54:	690b      	ldr	r3, [r1, #16]
 8010a56:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	6143      	str	r3, [r0, #20]
}
 8010a5c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a5e:	2270      	movs	r2, #112	; 0x70
 8010a60:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010a62:	684a      	ldr	r2, [r1, #4]
 8010a64:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a66:	e7de      	b.n	8010a26 <TIM_Base_SetConfig+0x7e>
 8010a68:	40012c00 	.word	0x40012c00
 8010a6c:	40000400 	.word	0x40000400
 8010a70:	40002000 	.word	0x40002000
 8010a74:	40014000 	.word	0x40014000
 8010a78:	40014400 	.word	0x40014400
 8010a7c:	40014800 	.word	0x40014800
 8010a80:	fffffcff 	.word	0xfffffcff

08010a84 <HAL_TIM_Base_Init>:
{
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8010a88:	d014      	beq.n	8010ab4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8010a8a:	2339      	movs	r3, #57	; 0x39
 8010a8c:	5cc3      	ldrb	r3, [r0, r3]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8010a92:	2539      	movs	r5, #57	; 0x39
 8010a94:	2302      	movs	r3, #2
 8010a96:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a98:	0021      	movs	r1, r4
 8010a9a:	c901      	ldmia	r1!, {r0}
 8010a9c:	f7ff ff84 	bl	80109a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8010aa4:	2000      	movs	r0, #0
}
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8010aa8:	3338      	adds	r3, #56	; 0x38
 8010aaa:	2200      	movs	r2, #0
 8010aac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8010aae:	f7ff ff6d 	bl	801098c <HAL_TIM_Base_MspInit>
 8010ab2:	e7ee      	b.n	8010a92 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	e7f6      	b.n	8010aa6 <HAL_TIM_Base_Init+0x22>

08010ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8010ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8010aba:	2338      	movs	r3, #56	; 0x38
 8010abc:	5cc3      	ldrb	r3, [r0, r3]
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d01e      	beq.n	8010b00 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8010ac2:	2238      	movs	r2, #56	; 0x38
 8010ac4:	2501      	movs	r5, #1
 8010ac6:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8010ac8:	2439      	movs	r4, #57	; 0x39
 8010aca:	2302      	movs	r3, #2
 8010acc:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8010ace:	6806      	ldr	r6, [r0, #0]
 8010ad0:	6873      	ldr	r3, [r6, #4]
 8010ad2:	2770      	movs	r7, #112	; 0x70
 8010ad4:	43bb      	bics	r3, r7
 8010ad6:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8010ad8:	6806      	ldr	r6, [r0, #0]
 8010ada:	6873      	ldr	r3, [r6, #4]
 8010adc:	680f      	ldr	r7, [r1, #0]
 8010ade:	433b      	orrs	r3, r7
 8010ae0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8010ae2:	6806      	ldr	r6, [r0, #0]
 8010ae4:	68b3      	ldr	r3, [r6, #8]
 8010ae6:	2780      	movs	r7, #128	; 0x80
 8010ae8:	43bb      	bics	r3, r7
 8010aea:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8010aec:	6806      	ldr	r6, [r0, #0]
 8010aee:	68b3      	ldr	r3, [r6, #8]
 8010af0:	6849      	ldr	r1, [r1, #4]
 8010af2:	430b      	orrs	r3, r1
 8010af4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8010af6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8010af8:	2300      	movs	r3, #0
 8010afa:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8010afc:	2000      	movs	r0, #0
}
 8010afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8010b00:	2002      	movs	r0, #2
 8010b02:	e7fc      	b.n	8010afe <HAL_TIMEx_MasterConfigSynchronization+0x46>

08010b04 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8010b04:	4770      	bx	lr

08010b06 <HAL_UART_DeInit>:
{
 8010b06:	b570      	push	{r4, r5, r6, lr}
 8010b08:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8010b0a:	d016      	beq.n	8010b3a <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8010b0c:	2669      	movs	r6, #105	; 0x69
 8010b0e:	2302      	movs	r3, #2
 8010b10:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8010b12:	6802      	ldr	r2, [r0, #0]
 8010b14:	6813      	ldr	r3, [r2, #0]
 8010b16:	2101      	movs	r1, #1
 8010b18:	438b      	bics	r3, r1
 8010b1a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8010b1c:	6803      	ldr	r3, [r0, #0]
 8010b1e:	2500      	movs	r5, #0
 8010b20:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8010b22:	6803      	ldr	r3, [r0, #0]
 8010b24:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8010b26:	6803      	ldr	r3, [r0, #0]
 8010b28:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8010b2a:	f7ff ffeb 	bl	8010b04 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b2e:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8010b30:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8010b32:	2368      	movs	r3, #104	; 0x68
 8010b34:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8010b36:	2000      	movs	r0, #0
}
 8010b38:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010b3a:	2001      	movs	r0, #1
 8010b3c:	e7fc      	b.n	8010b38 <HAL_UART_DeInit+0x32>

08010b3e <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b3e:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8010b40:	2369      	movs	r3, #105	; 0x69
 8010b42:	5cc3      	ldrb	r3, [r0, r3]
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d003      	beq.n	8010b50 <HAL_UART_Transmit_IT+0x12>
 8010b48:	2369      	movs	r3, #105	; 0x69
 8010b4a:	5cc3      	ldrb	r3, [r0, r3]
 8010b4c:	2b22      	cmp	r3, #34	; 0x22
 8010b4e:	d12b      	bne.n	8010ba8 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8010b50:	2900      	cmp	r1, #0
 8010b52:	d02b      	beq.n	8010bac <HAL_UART_Transmit_IT+0x6e>
 8010b54:	2a00      	cmp	r2, #0
 8010b56:	d02b      	beq.n	8010bb0 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b58:	2368      	movs	r3, #104	; 0x68
 8010b5a:	5cc3      	ldrb	r3, [r0, r3]
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d029      	beq.n	8010bb4 <HAL_UART_Transmit_IT+0x76>
 8010b60:	2368      	movs	r3, #104	; 0x68
 8010b62:	2401      	movs	r4, #1
 8010b64:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8010b66:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8010b68:	3b18      	subs	r3, #24
 8010b6a:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8010b6c:	3302      	adds	r3, #2
 8010b6e:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b70:	2300      	movs	r3, #0
 8010b72:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8010b74:	3369      	adds	r3, #105	; 0x69
 8010b76:	5cc3      	ldrb	r3, [r0, r3]
 8010b78:	2b22      	cmp	r3, #34	; 0x22
 8010b7a:	d011      	beq.n	8010ba0 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8010b7c:	2369      	movs	r3, #105	; 0x69
 8010b7e:	2212      	movs	r2, #18
 8010b80:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010b82:	6802      	ldr	r2, [r0, #0]
 8010b84:	6893      	ldr	r3, [r2, #8]
 8010b86:	2101      	movs	r1, #1
 8010b88:	430b      	orrs	r3, r1
 8010b8a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010b8c:	2368      	movs	r3, #104	; 0x68
 8010b8e:	2200      	movs	r2, #0
 8010b90:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8010b92:	6802      	ldr	r2, [r0, #0]
 8010b94:	6813      	ldr	r3, [r2, #0]
 8010b96:	317f      	adds	r1, #127	; 0x7f
 8010b98:	430b      	orrs	r3, r1
 8010b9a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8010b9c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010b9e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010ba0:	3347      	adds	r3, #71	; 0x47
 8010ba2:	2232      	movs	r2, #50	; 0x32
 8010ba4:	54c2      	strb	r2, [r0, r3]
 8010ba6:	e7ec      	b.n	8010b82 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8010ba8:	2002      	movs	r0, #2
 8010baa:	e7f8      	b.n	8010b9e <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 8010bac:	2001      	movs	r0, #1
 8010bae:	e7f6      	b.n	8010b9e <HAL_UART_Transmit_IT+0x60>
 8010bb0:	2001      	movs	r0, #1
 8010bb2:	e7f4      	b.n	8010b9e <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8010bb4:	2002      	movs	r0, #2
 8010bb6:	e7f2      	b.n	8010b9e <HAL_UART_Transmit_IT+0x60>

08010bb8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010bb8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8010bba:	2369      	movs	r3, #105	; 0x69
 8010bbc:	5cc3      	ldrb	r3, [r0, r3]
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d003      	beq.n	8010bca <HAL_UART_Receive_IT+0x12>
 8010bc2:	2369      	movs	r3, #105	; 0x69
 8010bc4:	5cc3      	ldrb	r3, [r0, r3]
 8010bc6:	2b12      	cmp	r3, #18
 8010bc8:	d15d      	bne.n	8010c86 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8010bca:	2900      	cmp	r1, #0
 8010bcc:	d05d      	beq.n	8010c8a <HAL_UART_Receive_IT+0xd2>
 8010bce:	2a00      	cmp	r2, #0
 8010bd0:	d05d      	beq.n	8010c8e <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010bd2:	2368      	movs	r3, #104	; 0x68
 8010bd4:	5cc3      	ldrb	r3, [r0, r3]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d05b      	beq.n	8010c92 <HAL_UART_Receive_IT+0xda>
 8010bda:	2368      	movs	r3, #104	; 0x68
 8010bdc:	2401      	movs	r4, #1
 8010bde:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8010be0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8010be2:	3b10      	subs	r3, #16
 8010be4:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8010be6:	3302      	adds	r3, #2
 8010be8:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010bea:	6883      	ldr	r3, [r0, #8]
 8010bec:	2280      	movs	r2, #128	; 0x80
 8010bee:	0152      	lsls	r2, r2, #5
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d008      	beq.n	8010c06 <HAL_UART_Receive_IT+0x4e>
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d115      	bne.n	8010c24 <HAL_UART_Receive_IT+0x6c>
 8010bf8:	6903      	ldr	r3, [r0, #16]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d10e      	bne.n	8010c1c <HAL_UART_Receive_IT+0x64>
 8010bfe:	335c      	adds	r3, #92	; 0x5c
 8010c00:	22ff      	movs	r2, #255	; 0xff
 8010c02:	52c2      	strh	r2, [r0, r3]
 8010c04:	e012      	b.n	8010c2c <HAL_UART_Receive_IT+0x74>
 8010c06:	6903      	ldr	r3, [r0, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d103      	bne.n	8010c14 <HAL_UART_Receive_IT+0x5c>
 8010c0c:	335c      	adds	r3, #92	; 0x5c
 8010c0e:	4a22      	ldr	r2, [pc, #136]	; (8010c98 <HAL_UART_Receive_IT+0xe0>)
 8010c10:	52c2      	strh	r2, [r0, r3]
 8010c12:	e00b      	b.n	8010c2c <HAL_UART_Receive_IT+0x74>
 8010c14:	235c      	movs	r3, #92	; 0x5c
 8010c16:	22ff      	movs	r2, #255	; 0xff
 8010c18:	52c2      	strh	r2, [r0, r3]
 8010c1a:	e007      	b.n	8010c2c <HAL_UART_Receive_IT+0x74>
 8010c1c:	235c      	movs	r3, #92	; 0x5c
 8010c1e:	227f      	movs	r2, #127	; 0x7f
 8010c20:	52c2      	strh	r2, [r0, r3]
 8010c22:	e003      	b.n	8010c2c <HAL_UART_Receive_IT+0x74>
 8010c24:	2280      	movs	r2, #128	; 0x80
 8010c26:	0552      	lsls	r2, r2, #21
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d01d      	beq.n	8010c68 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8010c30:	3369      	adds	r3, #105	; 0x69
 8010c32:	5cc3      	ldrb	r3, [r0, r3]
 8010c34:	2b12      	cmp	r3, #18
 8010c36:	d022      	beq.n	8010c7e <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8010c38:	2369      	movs	r3, #105	; 0x69
 8010c3a:	2222      	movs	r2, #34	; 0x22
 8010c3c:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010c3e:	6802      	ldr	r2, [r0, #0]
 8010c40:	6811      	ldr	r1, [r2, #0]
 8010c42:	2380      	movs	r3, #128	; 0x80
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	430b      	orrs	r3, r1
 8010c48:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010c4a:	6802      	ldr	r2, [r0, #0]
 8010c4c:	6893      	ldr	r3, [r2, #8]
 8010c4e:	2101      	movs	r1, #1
 8010c50:	430b      	orrs	r3, r1
 8010c52:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010c54:	2368      	movs	r3, #104	; 0x68
 8010c56:	2200      	movs	r2, #0
 8010c58:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010c5a:	6802      	ldr	r2, [r0, #0]
 8010c5c:	6813      	ldr	r3, [r2, #0]
 8010c5e:	311f      	adds	r1, #31
 8010c60:	430b      	orrs	r3, r1
 8010c62:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8010c64:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010c66:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8010c68:	6903      	ldr	r3, [r0, #16]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d103      	bne.n	8010c76 <HAL_UART_Receive_IT+0xbe>
 8010c6e:	335c      	adds	r3, #92	; 0x5c
 8010c70:	227f      	movs	r2, #127	; 0x7f
 8010c72:	52c2      	strh	r2, [r0, r3]
 8010c74:	e7da      	b.n	8010c2c <HAL_UART_Receive_IT+0x74>
 8010c76:	235c      	movs	r3, #92	; 0x5c
 8010c78:	223f      	movs	r2, #63	; 0x3f
 8010c7a:	52c2      	strh	r2, [r0, r3]
 8010c7c:	e7d6      	b.n	8010c2c <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010c7e:	3357      	adds	r3, #87	; 0x57
 8010c80:	2232      	movs	r2, #50	; 0x32
 8010c82:	54c2      	strb	r2, [r0, r3]
 8010c84:	e7db      	b.n	8010c3e <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8010c86:	2002      	movs	r0, #2
 8010c88:	e7ed      	b.n	8010c66 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8010c8a:	2001      	movs	r0, #1
 8010c8c:	e7eb      	b.n	8010c66 <HAL_UART_Receive_IT+0xae>
 8010c8e:	2001      	movs	r0, #1
 8010c90:	e7e9      	b.n	8010c66 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8010c92:	2002      	movs	r0, #2
 8010c94:	e7e7      	b.n	8010c66 <HAL_UART_Receive_IT+0xae>
 8010c96:	46c0      	nop			; (mov r8, r8)
 8010c98:	000001ff 	.word	0x000001ff

08010c9c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	0004      	movs	r4, r0
 8010ca0:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8010ca2:	2269      	movs	r2, #105	; 0x69
 8010ca4:	5c82      	ldrb	r2, [r0, r2]
 8010ca6:	2a01      	cmp	r2, #1
 8010ca8:	d003      	beq.n	8010cb2 <HAL_UART_Transmit_DMA+0x16>
 8010caa:	2269      	movs	r2, #105	; 0x69
 8010cac:	5c82      	ldrb	r2, [r0, r2]
 8010cae:	2a22      	cmp	r2, #34	; 0x22
 8010cb0:	d137      	bne.n	8010d22 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8010cb2:	2900      	cmp	r1, #0
 8010cb4:	d037      	beq.n	8010d26 <HAL_UART_Transmit_DMA+0x8a>
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d037      	beq.n	8010d2a <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010cba:	2268      	movs	r2, #104	; 0x68
 8010cbc:	5ca2      	ldrb	r2, [r4, r2]
 8010cbe:	2a01      	cmp	r2, #1
 8010cc0:	d035      	beq.n	8010d2e <HAL_UART_Transmit_DMA+0x92>
 8010cc2:	2268      	movs	r2, #104	; 0x68
 8010cc4:	2001      	movs	r0, #1
 8010cc6:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8010cc8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8010cca:	3a18      	subs	r2, #24
 8010ccc:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8010cce:	3202      	adds	r2, #2
 8010cd0:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8010cd6:	3269      	adds	r2, #105	; 0x69
 8010cd8:	5ca2      	ldrb	r2, [r4, r2]
 8010cda:	2a22      	cmp	r2, #34	; 0x22
 8010cdc:	d01d      	beq.n	8010d1a <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8010cde:	2269      	movs	r2, #105	; 0x69
 8010ce0:	2012      	movs	r0, #18
 8010ce2:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010ce4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010ce6:	4813      	ldr	r0, [pc, #76]	; (8010d34 <HAL_UART_Transmit_DMA+0x98>)
 8010ce8:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010cea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010cec:	4812      	ldr	r0, [pc, #72]	; (8010d38 <HAL_UART_Transmit_DMA+0x9c>)
 8010cee:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010cf0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010cf2:	4812      	ldr	r0, [pc, #72]	; (8010d3c <HAL_UART_Transmit_DMA+0xa0>)
 8010cf4:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8010cf6:	6822      	ldr	r2, [r4, #0]
 8010cf8:	3228      	adds	r2, #40	; 0x28
 8010cfa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8010cfc:	f7fe f840 	bl	800ed80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010d00:	6823      	ldr	r3, [r4, #0]
 8010d02:	2240      	movs	r2, #64	; 0x40
 8010d04:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8010d06:	6822      	ldr	r2, [r4, #0]
 8010d08:	6893      	ldr	r3, [r2, #8]
 8010d0a:	2180      	movs	r1, #128	; 0x80
 8010d0c:	430b      	orrs	r3, r1
 8010d0e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010d10:	2368      	movs	r3, #104	; 0x68
 8010d12:	2200      	movs	r2, #0
 8010d14:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8010d16:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010d18:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010d1a:	3247      	adds	r2, #71	; 0x47
 8010d1c:	3031      	adds	r0, #49	; 0x31
 8010d1e:	54a0      	strb	r0, [r4, r2]
 8010d20:	e7e0      	b.n	8010ce4 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 8010d22:	2002      	movs	r0, #2
 8010d24:	e7f8      	b.n	8010d18 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8010d26:	2001      	movs	r0, #1
 8010d28:	e7f6      	b.n	8010d18 <HAL_UART_Transmit_DMA+0x7c>
 8010d2a:	2001      	movs	r0, #1
 8010d2c:	e7f4      	b.n	8010d18 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8010d2e:	2002      	movs	r0, #2
 8010d30:	e7f2      	b.n	8010d18 <HAL_UART_Transmit_DMA+0x7c>
 8010d32:	46c0      	nop			; (mov r8, r8)
 8010d34:	08010ddd 	.word	0x08010ddd
 8010d38:	08010e0f 	.word	0x08010e0f
 8010d3c:	08010e5f 	.word	0x08010e5f

08010d40 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010d40:	b510      	push	{r4, lr}
 8010d42:	0004      	movs	r4, r0
 8010d44:	0008      	movs	r0, r1
 8010d46:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8010d48:	2269      	movs	r2, #105	; 0x69
 8010d4a:	5ca2      	ldrb	r2, [r4, r2]
 8010d4c:	2a01      	cmp	r2, #1
 8010d4e:	d003      	beq.n	8010d58 <HAL_UART_Receive_DMA+0x18>
 8010d50:	2269      	movs	r2, #105	; 0x69
 8010d52:	5ca2      	ldrb	r2, [r4, r2]
 8010d54:	2a12      	cmp	r2, #18
 8010d56:	d133      	bne.n	8010dc0 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d033      	beq.n	8010dc4 <HAL_UART_Receive_DMA+0x84>
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d033      	beq.n	8010dc8 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010d60:	2268      	movs	r2, #104	; 0x68
 8010d62:	5ca2      	ldrb	r2, [r4, r2]
 8010d64:	2a01      	cmp	r2, #1
 8010d66:	d031      	beq.n	8010dcc <HAL_UART_Receive_DMA+0x8c>
 8010d68:	2268      	movs	r2, #104	; 0x68
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8010d6e:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8010d70:	3a10      	subs	r2, #16
 8010d72:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d74:	2200      	movs	r2, #0
 8010d76:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8010d78:	3269      	adds	r2, #105	; 0x69
 8010d7a:	5ca2      	ldrb	r2, [r4, r2]
 8010d7c:	2a12      	cmp	r2, #18
 8010d7e:	d01b      	beq.n	8010db8 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8010d80:	2269      	movs	r2, #105	; 0x69
 8010d82:	2122      	movs	r1, #34	; 0x22
 8010d84:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d88:	4911      	ldr	r1, [pc, #68]	; (8010dd0 <HAL_UART_Receive_DMA+0x90>)
 8010d8a:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010d8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d8e:	4911      	ldr	r1, [pc, #68]	; (8010dd4 <HAL_UART_Receive_DMA+0x94>)
 8010d90:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d94:	4910      	ldr	r1, [pc, #64]	; (8010dd8 <HAL_UART_Receive_DMA+0x98>)
 8010d96:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8010d98:	6821      	ldr	r1, [r4, #0]
 8010d9a:	3124      	adds	r1, #36	; 0x24
 8010d9c:	0002      	movs	r2, r0
 8010d9e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8010da0:	f7fd ffee 	bl	800ed80 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8010da4:	6822      	ldr	r2, [r4, #0]
 8010da6:	6893      	ldr	r3, [r2, #8]
 8010da8:	2140      	movs	r1, #64	; 0x40
 8010daa:	430b      	orrs	r3, r1
 8010dac:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8010dae:	2368      	movs	r3, #104	; 0x68
 8010db0:	2200      	movs	r2, #0
 8010db2:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8010db4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010db6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010db8:	3257      	adds	r2, #87	; 0x57
 8010dba:	3131      	adds	r1, #49	; 0x31
 8010dbc:	54a1      	strb	r1, [r4, r2]
 8010dbe:	e7e2      	b.n	8010d86 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8010dc0:	2002      	movs	r0, #2
 8010dc2:	e7f8      	b.n	8010db6 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8010dc4:	2001      	movs	r0, #1
 8010dc6:	e7f6      	b.n	8010db6 <HAL_UART_Receive_DMA+0x76>
 8010dc8:	2001      	movs	r0, #1
 8010dca:	e7f4      	b.n	8010db6 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 8010dcc:	2002      	movs	r0, #2
 8010dce:	e7f2      	b.n	8010db6 <HAL_UART_Receive_DMA+0x76>
 8010dd0:	08010e19 	.word	0x08010e19
 8010dd4:	08010e55 	.word	0x08010e55
 8010dd8:	08010e5f 	.word	0x08010e5f

08010ddc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010de0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	069b      	lsls	r3, r3, #26
 8010de8:	d40d      	bmi.n	8010e06 <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 8010dea:	2352      	movs	r3, #82	; 0x52
 8010dec:	2200      	movs	r2, #0
 8010dee:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8010df0:	6802      	ldr	r2, [r0, #0]
 8010df2:	6893      	ldr	r3, [r2, #8]
 8010df4:	2180      	movs	r1, #128	; 0x80
 8010df6:	438b      	bics	r3, r1
 8010df8:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010dfa:	6802      	ldr	r2, [r0, #0]
 8010dfc:	6813      	ldr	r3, [r2, #0]
 8010dfe:	3940      	subs	r1, #64	; 0x40
 8010e00:	430b      	orrs	r3, r1
 8010e02:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8010e04:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8010e06:	f7fa ffeb 	bl	800bde0 <HAL_UART_TxCpltCallback>
}
 8010e0a:	e7fb      	b.n	8010e04 <UART_DMATransmitCplt+0x28>

08010e0c <HAL_UART_TxHalfCpltCallback>:
}
 8010e0c:	4770      	bx	lr

08010e0e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e0e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8010e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e12:	f7ff fffb 	bl	8010e0c <HAL_UART_TxHalfCpltCallback>
}
 8010e16:	bd10      	pop	{r4, pc}

08010e18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010e1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	069b      	lsls	r3, r3, #26
 8010e24:	d40e      	bmi.n	8010e44 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 8010e26:	235a      	movs	r3, #90	; 0x5a
 8010e28:	2200      	movs	r2, #0
 8010e2a:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8010e2c:	6802      	ldr	r2, [r0, #0]
 8010e2e:	6893      	ldr	r3, [r2, #8]
 8010e30:	2140      	movs	r1, #64	; 0x40
 8010e32:	438b      	bics	r3, r1
 8010e34:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8010e36:	2369      	movs	r3, #105	; 0x69
 8010e38:	5cc3      	ldrb	r3, [r0, r3]
 8010e3a:	2b32      	cmp	r3, #50	; 0x32
 8010e3c:	d005      	beq.n	8010e4a <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8010e3e:	2369      	movs	r3, #105	; 0x69
 8010e40:	2201      	movs	r2, #1
 8010e42:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8010e44:	f7fb f80a 	bl	800be5c <HAL_UART_RxCpltCallback>
}
 8010e48:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8010e4a:	3337      	adds	r3, #55	; 0x37
 8010e4c:	2212      	movs	r2, #18
 8010e4e:	54c2      	strb	r2, [r0, r3]
 8010e50:	e7f8      	b.n	8010e44 <UART_DMAReceiveCplt+0x2c>

08010e52 <HAL_UART_RxHalfCpltCallback>:
}
 8010e52:	4770      	bx	lr

08010e54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e54:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8010e56:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e58:	f7ff fffb 	bl	8010e52 <HAL_UART_RxHalfCpltCallback>
}
 8010e5c:	bd10      	pop	{r4, pc}

08010e5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e5e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010e60:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	225a      	movs	r2, #90	; 0x5a
 8010e66:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8010e68:	3a08      	subs	r2, #8
 8010e6a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8010e6c:	3369      	adds	r3, #105	; 0x69
 8010e6e:	3a51      	subs	r2, #81	; 0x51
 8010e70:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e72:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8010e74:	320f      	adds	r2, #15
 8010e76:	4313      	orrs	r3, r2
 8010e78:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8010e7a:	f7fa ffc9 	bl	800be10 <HAL_UART_ErrorCallback>
}
 8010e7e:	bd10      	pop	{r4, pc}

08010e80 <UART_SetConfig>:
{
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8010e84:	6801      	ldr	r1, [r0, #0]
 8010e86:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e88:	6883      	ldr	r3, [r0, #8]
 8010e8a:	6900      	ldr	r0, [r0, #16]
 8010e8c:	4303      	orrs	r3, r0
 8010e8e:	6960      	ldr	r0, [r4, #20]
 8010e90:	4303      	orrs	r3, r0
 8010e92:	69e0      	ldr	r0, [r4, #28]
 8010e94:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8010e96:	487a      	ldr	r0, [pc, #488]	; (8011080 <UART_SetConfig+0x200>)
 8010e98:	4002      	ands	r2, r0
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e9e:	6822      	ldr	r2, [r4, #0]
 8010ea0:	6853      	ldr	r3, [r2, #4]
 8010ea2:	4978      	ldr	r1, [pc, #480]	; (8011084 <UART_SetConfig+0x204>)
 8010ea4:	400b      	ands	r3, r1
 8010ea6:	68e1      	ldr	r1, [r4, #12]
 8010ea8:	430b      	orrs	r3, r1
 8010eaa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8010eac:	6821      	ldr	r1, [r4, #0]
 8010eae:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8010eb0:	69a3      	ldr	r3, [r4, #24]
 8010eb2:	6a20      	ldr	r0, [r4, #32]
 8010eb4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8010eb6:	4874      	ldr	r0, [pc, #464]	; (8011088 <UART_SetConfig+0x208>)
 8010eb8:	4002      	ands	r2, r0
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ebe:	6825      	ldr	r5, [r4, #0]
 8010ec0:	4b72      	ldr	r3, [pc, #456]	; (801108c <UART_SetConfig+0x20c>)
 8010ec2:	429d      	cmp	r5, r3
 8010ec4:	d021      	beq.n	8010f0a <UART_SetConfig+0x8a>
 8010ec6:	4b72      	ldr	r3, [pc, #456]	; (8011090 <UART_SetConfig+0x210>)
 8010ec8:	429d      	cmp	r5, r3
 8010eca:	d03a      	beq.n	8010f42 <UART_SetConfig+0xc2>
 8010ecc:	4b71      	ldr	r3, [pc, #452]	; (8011094 <UART_SetConfig+0x214>)
 8010ece:	429d      	cmp	r5, r3
 8010ed0:	d061      	beq.n	8010f96 <UART_SetConfig+0x116>
 8010ed2:	4b71      	ldr	r3, [pc, #452]	; (8011098 <UART_SetConfig+0x218>)
 8010ed4:	429d      	cmp	r5, r3
 8010ed6:	d100      	bne.n	8010eda <UART_SetConfig+0x5a>
 8010ed8:	e0a8      	b.n	801102c <UART_SetConfig+0x1ac>
 8010eda:	4b70      	ldr	r3, [pc, #448]	; (801109c <UART_SetConfig+0x21c>)
 8010edc:	429d      	cmp	r5, r3
 8010ede:	d100      	bne.n	8010ee2 <UART_SetConfig+0x62>
 8010ee0:	e0a4      	b.n	801102c <UART_SetConfig+0x1ac>
 8010ee2:	4b6f      	ldr	r3, [pc, #444]	; (80110a0 <UART_SetConfig+0x220>)
 8010ee4:	429d      	cmp	r5, r3
 8010ee6:	d100      	bne.n	8010eea <UART_SetConfig+0x6a>
 8010ee8:	e0a0      	b.n	801102c <UART_SetConfig+0x1ac>
 8010eea:	4b6e      	ldr	r3, [pc, #440]	; (80110a4 <UART_SetConfig+0x224>)
 8010eec:	429d      	cmp	r5, r3
 8010eee:	d100      	bne.n	8010ef2 <UART_SetConfig+0x72>
 8010ef0:	e09c      	b.n	801102c <UART_SetConfig+0x1ac>
 8010ef2:	4b6d      	ldr	r3, [pc, #436]	; (80110a8 <UART_SetConfig+0x228>)
 8010ef4:	429d      	cmp	r5, r3
 8010ef6:	d100      	bne.n	8010efa <UART_SetConfig+0x7a>
 8010ef8:	e098      	b.n	801102c <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010efa:	2380      	movs	r3, #128	; 0x80
 8010efc:	021b      	lsls	r3, r3, #8
 8010efe:	69e2      	ldr	r2, [r4, #28]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d100      	bne.n	8010f06 <UART_SetConfig+0x86>
 8010f04:	e08c      	b.n	8011020 <UART_SetConfig+0x1a0>
 8010f06:	2001      	movs	r0, #1
 8010f08:	e089      	b.n	801101e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f0a:	4b68      	ldr	r3, [pc, #416]	; (80110ac <UART_SetConfig+0x22c>)
 8010f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f0e:	2303      	movs	r3, #3
 8010f10:	4013      	ands	r3, r2
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d100      	bne.n	8010f18 <UART_SetConfig+0x98>
 8010f16:	e0a6      	b.n	8011066 <UART_SetConfig+0x1e6>
 8010f18:	d82f      	bhi.n	8010f7a <UART_SetConfig+0xfa>
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d069      	beq.n	8010ff2 <UART_SetConfig+0x172>
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d120      	bne.n	8010f64 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f22:	2380      	movs	r3, #128	; 0x80
 8010f24:	021b      	lsls	r3, r3, #8
 8010f26:	69e2      	ldr	r2, [r4, #28]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d049      	beq.n	8010fc0 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8010f2c:	f7ff fa34 	bl	8010398 <HAL_RCC_GetSysClockFreq>
 8010f30:	6825      	ldr	r5, [r4, #0]
 8010f32:	6861      	ldr	r1, [r4, #4]
 8010f34:	f7ef f90c 	bl	8000150 <__udivsi3>
 8010f38:	0400      	lsls	r0, r0, #16
 8010f3a:	0c00      	lsrs	r0, r0, #16
 8010f3c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f3e:	2000      	movs	r0, #0
        break;
 8010f40:	e06d      	b.n	801101e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f42:	4b5a      	ldr	r3, [pc, #360]	; (80110ac <UART_SetConfig+0x22c>)
 8010f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f46:	22c0      	movs	r2, #192	; 0xc0
 8010f48:	0292      	lsls	r2, r2, #10
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	2280      	movs	r2, #128	; 0x80
 8010f4e:	0292      	lsls	r2, r2, #10
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d100      	bne.n	8010f56 <UART_SetConfig+0xd6>
 8010f54:	e087      	b.n	8011066 <UART_SetConfig+0x1e6>
 8010f56:	d80c      	bhi.n	8010f72 <UART_SetConfig+0xf2>
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d04a      	beq.n	8010ff2 <UART_SetConfig+0x172>
 8010f5c:	2280      	movs	r2, #128	; 0x80
 8010f5e:	0252      	lsls	r2, r2, #9
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d0de      	beq.n	8010f22 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f64:	2380      	movs	r3, #128	; 0x80
 8010f66:	021b      	lsls	r3, r3, #8
 8010f68:	69e2      	ldr	r2, [r4, #28]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d05b      	beq.n	8011026 <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 8010f6e:	2001      	movs	r0, #1
 8010f70:	e055      	b.n	801101e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f72:	22c0      	movs	r2, #192	; 0xc0
 8010f74:	0292      	lsls	r2, r2, #10
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d1f4      	bne.n	8010f64 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f7a:	2380      	movs	r3, #128	; 0x80
 8010f7c:	021b      	lsls	r3, r3, #8
 8010f7e:	69e2      	ldr	r2, [r4, #28]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d02f      	beq.n	8010fe4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8010f84:	6861      	ldr	r1, [r4, #4]
 8010f86:	484a      	ldr	r0, [pc, #296]	; (80110b0 <UART_SetConfig+0x230>)
 8010f88:	f7ef f8e2 	bl	8000150 <__udivsi3>
 8010f8c:	0400      	lsls	r0, r0, #16
 8010f8e:	0c00      	lsrs	r0, r0, #16
 8010f90:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f92:	2000      	movs	r0, #0
        break;
 8010f94:	e043      	b.n	801101e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f96:	4b45      	ldr	r3, [pc, #276]	; (80110ac <UART_SetConfig+0x22c>)
 8010f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f9a:	22c0      	movs	r2, #192	; 0xc0
 8010f9c:	0312      	lsls	r2, r2, #12
 8010f9e:	4013      	ands	r3, r2
 8010fa0:	2280      	movs	r2, #128	; 0x80
 8010fa2:	0312      	lsls	r2, r2, #12
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d051      	beq.n	801104c <UART_SetConfig+0x1cc>
 8010fa8:	d813      	bhi.n	8010fd2 <UART_SetConfig+0x152>
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d021      	beq.n	8010ff2 <UART_SetConfig+0x172>
 8010fae:	2280      	movs	r2, #128	; 0x80
 8010fb0:	02d2      	lsls	r2, r2, #11
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d1d6      	bne.n	8010f64 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010fb6:	2380      	movs	r3, #128	; 0x80
 8010fb8:	021b      	lsls	r3, r3, #8
 8010fba:	69e2      	ldr	r2, [r4, #28]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d1b5      	bne.n	8010f2c <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8010fc0:	f7ff f9ea 	bl	8010398 <HAL_RCC_GetSysClockFreq>
 8010fc4:	0040      	lsls	r0, r0, #1
 8010fc6:	6861      	ldr	r1, [r4, #4]
 8010fc8:	f7ef f8c2 	bl	8000150 <__udivsi3>
 8010fcc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8010fce:	2000      	movs	r0, #0
        break;
 8010fd0:	e01c      	b.n	801100c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010fd2:	22c0      	movs	r2, #192	; 0xc0
 8010fd4:	0312      	lsls	r2, r2, #12
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d1c4      	bne.n	8010f64 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010fda:	2380      	movs	r3, #128	; 0x80
 8010fdc:	021b      	lsls	r3, r3, #8
 8010fde:	69e2      	ldr	r2, [r4, #28]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d1cf      	bne.n	8010f84 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8010fe4:	6861      	ldr	r1, [r4, #4]
 8010fe6:	4833      	ldr	r0, [pc, #204]	; (80110b4 <UART_SetConfig+0x234>)
 8010fe8:	f7ef f8b2 	bl	8000150 <__udivsi3>
 8010fec:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8010fee:	2000      	movs	r0, #0
        break;
 8010ff0:	e00c      	b.n	801100c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ff2:	2380      	movs	r3, #128	; 0x80
 8010ff4:	021b      	lsls	r3, r3, #8
 8010ff6:	69e2      	ldr	r2, [r4, #28]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d11c      	bne.n	8011036 <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8010ffc:	f7ff fa30 	bl	8010460 <HAL_RCC_GetPCLK1Freq>
 8011000:	0040      	lsls	r0, r0, #1
 8011002:	6861      	ldr	r1, [r4, #4]
 8011004:	f7ef f8a4 	bl	8000150 <__udivsi3>
 8011008:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801100a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 801100c:	220f      	movs	r2, #15
 801100e:	0019      	movs	r1, r3
 8011010:	4391      	bics	r1, r2
 8011012:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8011014:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8011016:	071b      	lsls	r3, r3, #28
 8011018:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 801101a:	4313      	orrs	r3, r2
 801101c:	60cb      	str	r3, [r1, #12]
}
 801101e:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8011020:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8011022:	2300      	movs	r3, #0
 8011024:	e7f2      	b.n	801100c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011026:	2001      	movs	r0, #1
 8011028:	2300      	movs	r3, #0
 801102a:	e7ef      	b.n	801100c <UART_SetConfig+0x18c>
 801102c:	2380      	movs	r3, #128	; 0x80
 801102e:	021b      	lsls	r3, r3, #8
 8011030:	69e2      	ldr	r2, [r4, #28]
 8011032:	429a      	cmp	r2, r3
 8011034:	d0e2      	beq.n	8010ffc <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011036:	f7ff fa13 	bl	8010460 <HAL_RCC_GetPCLK1Freq>
 801103a:	6825      	ldr	r5, [r4, #0]
 801103c:	6861      	ldr	r1, [r4, #4]
 801103e:	f7ef f887 	bl	8000150 <__udivsi3>
 8011042:	0400      	lsls	r0, r0, #16
 8011044:	0c00      	lsrs	r0, r0, #16
 8011046:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011048:	2000      	movs	r0, #0
  return ret;
 801104a:	e7e8      	b.n	801101e <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801104c:	2380      	movs	r3, #128	; 0x80
 801104e:	021b      	lsls	r3, r3, #8
 8011050:	69e2      	ldr	r2, [r4, #28]
 8011052:	429a      	cmp	r2, r3
 8011054:	d10c      	bne.n	8011070 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011056:	6861      	ldr	r1, [r4, #4]
 8011058:	2080      	movs	r0, #128	; 0x80
 801105a:	0240      	lsls	r0, r0, #9
 801105c:	f7ef f878 	bl	8000150 <__udivsi3>
 8011060:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8011062:	2000      	movs	r0, #0
        break;
 8011064:	e7d2      	b.n	801100c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011066:	2380      	movs	r3, #128	; 0x80
 8011068:	021b      	lsls	r3, r3, #8
 801106a:	69e2      	ldr	r2, [r4, #28]
 801106c:	429a      	cmp	r2, r3
 801106e:	d0f2      	beq.n	8011056 <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8011070:	6861      	ldr	r1, [r4, #4]
 8011072:	2080      	movs	r0, #128	; 0x80
 8011074:	0200      	lsls	r0, r0, #8
 8011076:	f7ef f86b 	bl	8000150 <__udivsi3>
 801107a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801107c:	2000      	movs	r0, #0
        break;
 801107e:	e7ce      	b.n	801101e <UART_SetConfig+0x19e>
 8011080:	efff69f3 	.word	0xefff69f3
 8011084:	ffffcfff 	.word	0xffffcfff
 8011088:	fffff4ff 	.word	0xfffff4ff
 801108c:	40013800 	.word	0x40013800
 8011090:	40004400 	.word	0x40004400
 8011094:	40004800 	.word	0x40004800
 8011098:	40004c00 	.word	0x40004c00
 801109c:	40005000 	.word	0x40005000
 80110a0:	40011400 	.word	0x40011400
 80110a4:	40011800 	.word	0x40011800
 80110a8:	40011c00 	.word	0x40011c00
 80110ac:	40021000 	.word	0x40021000
 80110b0:	007a1200 	.word	0x007a1200
 80110b4:	00f42400 	.word	0x00f42400

080110b8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80110b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80110ba:	07db      	lsls	r3, r3, #31
 80110bc:	d506      	bpl.n	80110cc <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80110be:	6802      	ldr	r2, [r0, #0]
 80110c0:	6853      	ldr	r3, [r2, #4]
 80110c2:	492c      	ldr	r1, [pc, #176]	; (8011174 <UART_AdvFeatureConfig+0xbc>)
 80110c4:	400b      	ands	r3, r1
 80110c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80110c8:	430b      	orrs	r3, r1
 80110ca:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80110cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80110ce:	079b      	lsls	r3, r3, #30
 80110d0:	d506      	bpl.n	80110e0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80110d2:	6802      	ldr	r2, [r0, #0]
 80110d4:	6853      	ldr	r3, [r2, #4]
 80110d6:	4928      	ldr	r1, [pc, #160]	; (8011178 <UART_AdvFeatureConfig+0xc0>)
 80110d8:	400b      	ands	r3, r1
 80110da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80110dc:	430b      	orrs	r3, r1
 80110de:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80110e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80110e2:	075b      	lsls	r3, r3, #29
 80110e4:	d506      	bpl.n	80110f4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80110e6:	6802      	ldr	r2, [r0, #0]
 80110e8:	6853      	ldr	r3, [r2, #4]
 80110ea:	4924      	ldr	r1, [pc, #144]	; (801117c <UART_AdvFeatureConfig+0xc4>)
 80110ec:	400b      	ands	r3, r1
 80110ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80110f0:	430b      	orrs	r3, r1
 80110f2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80110f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80110f6:	071b      	lsls	r3, r3, #28
 80110f8:	d506      	bpl.n	8011108 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80110fa:	6802      	ldr	r2, [r0, #0]
 80110fc:	6853      	ldr	r3, [r2, #4]
 80110fe:	4920      	ldr	r1, [pc, #128]	; (8011180 <UART_AdvFeatureConfig+0xc8>)
 8011100:	400b      	ands	r3, r1
 8011102:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8011104:	430b      	orrs	r3, r1
 8011106:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011108:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801110a:	06db      	lsls	r3, r3, #27
 801110c:	d506      	bpl.n	801111c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801110e:	6802      	ldr	r2, [r0, #0]
 8011110:	6893      	ldr	r3, [r2, #8]
 8011112:	491c      	ldr	r1, [pc, #112]	; (8011184 <UART_AdvFeatureConfig+0xcc>)
 8011114:	400b      	ands	r3, r1
 8011116:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8011118:	430b      	orrs	r3, r1
 801111a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801111c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801111e:	069b      	lsls	r3, r3, #26
 8011120:	d506      	bpl.n	8011130 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011122:	6802      	ldr	r2, [r0, #0]
 8011124:	6893      	ldr	r3, [r2, #8]
 8011126:	4918      	ldr	r1, [pc, #96]	; (8011188 <UART_AdvFeatureConfig+0xd0>)
 8011128:	400b      	ands	r3, r1
 801112a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801112c:	430b      	orrs	r3, r1
 801112e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011130:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011132:	065b      	lsls	r3, r3, #25
 8011134:	d50b      	bpl.n	801114e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011136:	6802      	ldr	r2, [r0, #0]
 8011138:	6853      	ldr	r3, [r2, #4]
 801113a:	4914      	ldr	r1, [pc, #80]	; (801118c <UART_AdvFeatureConfig+0xd4>)
 801113c:	400b      	ands	r3, r1
 801113e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011140:	430b      	orrs	r3, r1
 8011142:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011144:	2380      	movs	r3, #128	; 0x80
 8011146:	035b      	lsls	r3, r3, #13
 8011148:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801114a:	429a      	cmp	r2, r3
 801114c:	d00a      	beq.n	8011164 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801114e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011150:	061b      	lsls	r3, r3, #24
 8011152:	d506      	bpl.n	8011162 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011154:	6802      	ldr	r2, [r0, #0]
 8011156:	6853      	ldr	r3, [r2, #4]
 8011158:	490d      	ldr	r1, [pc, #52]	; (8011190 <UART_AdvFeatureConfig+0xd8>)
 801115a:	400b      	ands	r3, r1
 801115c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801115e:	430b      	orrs	r3, r1
 8011160:	6053      	str	r3, [r2, #4]
}
 8011162:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011164:	6802      	ldr	r2, [r0, #0]
 8011166:	6853      	ldr	r3, [r2, #4]
 8011168:	490a      	ldr	r1, [pc, #40]	; (8011194 <UART_AdvFeatureConfig+0xdc>)
 801116a:	400b      	ands	r3, r1
 801116c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801116e:	430b      	orrs	r3, r1
 8011170:	6053      	str	r3, [r2, #4]
 8011172:	e7ec      	b.n	801114e <UART_AdvFeatureConfig+0x96>
 8011174:	fffdffff 	.word	0xfffdffff
 8011178:	fffeffff 	.word	0xfffeffff
 801117c:	fffbffff 	.word	0xfffbffff
 8011180:	ffff7fff 	.word	0xffff7fff
 8011184:	ffffefff 	.word	0xffffefff
 8011188:	ffffdfff 	.word	0xffffdfff
 801118c:	ffefffff 	.word	0xffefffff
 8011190:	fff7ffff 	.word	0xfff7ffff
 8011194:	ff9fffff 	.word	0xff9fffff

08011198 <UART_WaitOnFlagUntilTimeout>:
{
 8011198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801119a:	46c6      	mov	lr, r8
 801119c:	b500      	push	{lr}
 801119e:	0007      	movs	r7, r0
 80111a0:	000c      	movs	r4, r1
 80111a2:	0016      	movs	r6, r2
 80111a4:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80111a6:	f7fd fbf9 	bl	800e99c <HAL_GetTick>
 80111aa:	4680      	mov	r8, r0
  if(Status == RESET)
 80111ac:	2e00      	cmp	r6, #0
 80111ae:	d029      	beq.n	8011204 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	69da      	ldr	r2, [r3, #28]
 80111b4:	4022      	ands	r2, r4
 80111b6:	42a2      	cmp	r2, r4
 80111b8:	d152      	bne.n	8011260 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80111ba:	1c6a      	adds	r2, r5, #1
 80111bc:	d0f9      	beq.n	80111b2 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80111be:	2d00      	cmp	r5, #0
 80111c0:	d005      	beq.n	80111ce <UART_WaitOnFlagUntilTimeout+0x36>
 80111c2:	f7fd fbeb 	bl	800e99c <HAL_GetTick>
 80111c6:	4643      	mov	r3, r8
 80111c8:	1ac0      	subs	r0, r0, r3
 80111ca:	42a8      	cmp	r0, r5
 80111cc:	d9f0      	bls.n	80111b0 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80111ce:	683a      	ldr	r2, [r7, #0]
 80111d0:	6813      	ldr	r3, [r2, #0]
 80111d2:	2180      	movs	r1, #128	; 0x80
 80111d4:	438b      	bics	r3, r1
 80111d6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80111d8:	683a      	ldr	r2, [r7, #0]
 80111da:	6813      	ldr	r3, [r2, #0]
 80111dc:	3960      	subs	r1, #96	; 0x60
 80111de:	438b      	bics	r3, r1
 80111e0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80111e2:	683a      	ldr	r2, [r7, #0]
 80111e4:	6813      	ldr	r3, [r2, #0]
 80111e6:	491f      	ldr	r1, [pc, #124]	; (8011264 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80111e8:	400b      	ands	r3, r1
 80111ea:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80111ec:	6839      	ldr	r1, [r7, #0]
 80111ee:	688b      	ldr	r3, [r1, #8]
 80111f0:	2201      	movs	r2, #1
 80111f2:	4393      	bics	r3, r2
 80111f4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80111f6:	2369      	movs	r3, #105	; 0x69
 80111f8:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80111fa:	3b01      	subs	r3, #1
 80111fc:	2200      	movs	r2, #0
 80111fe:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011200:	2003      	movs	r0, #3
 8011202:	e02a      	b.n	801125a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	69d9      	ldr	r1, [r3, #28]
 8011208:	4021      	ands	r1, r4
 801120a:	42a1      	cmp	r1, r4
 801120c:	d024      	beq.n	8011258 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801120e:	1c6a      	adds	r2, r5, #1
 8011210:	d0f9      	beq.n	8011206 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011212:	2d00      	cmp	r5, #0
 8011214:	d005      	beq.n	8011222 <UART_WaitOnFlagUntilTimeout+0x8a>
 8011216:	f7fd fbc1 	bl	800e99c <HAL_GetTick>
 801121a:	4643      	mov	r3, r8
 801121c:	1ac0      	subs	r0, r0, r3
 801121e:	42a8      	cmp	r0, r5
 8011220:	d9f0      	bls.n	8011204 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	6813      	ldr	r3, [r2, #0]
 8011226:	2180      	movs	r1, #128	; 0x80
 8011228:	438b      	bics	r3, r1
 801122a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	6813      	ldr	r3, [r2, #0]
 8011230:	3960      	subs	r1, #96	; 0x60
 8011232:	438b      	bics	r3, r1
 8011234:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011236:	683a      	ldr	r2, [r7, #0]
 8011238:	6813      	ldr	r3, [r2, #0]
 801123a:	490a      	ldr	r1, [pc, #40]	; (8011264 <UART_WaitOnFlagUntilTimeout+0xcc>)
 801123c:	400b      	ands	r3, r1
 801123e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011240:	6839      	ldr	r1, [r7, #0]
 8011242:	688b      	ldr	r3, [r1, #8]
 8011244:	2201      	movs	r2, #1
 8011246:	4393      	bics	r3, r2
 8011248:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801124a:	2369      	movs	r3, #105	; 0x69
 801124c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 801124e:	3b01      	subs	r3, #1
 8011250:	2200      	movs	r2, #0
 8011252:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011254:	2003      	movs	r0, #3
 8011256:	e000      	b.n	801125a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8011258:	0030      	movs	r0, r6
}
 801125a:	bc80      	pop	{r7}
 801125c:	46b8      	mov	r8, r7
 801125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8011260:	2000      	movs	r0, #0
 8011262:	e7fa      	b.n	801125a <UART_WaitOnFlagUntilTimeout+0xc2>
 8011264:	fffffeff 	.word	0xfffffeff

08011268 <HAL_UART_Transmit>:
{
 8011268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801126a:	46c6      	mov	lr, r8
 801126c:	b500      	push	{lr}
 801126e:	0004      	movs	r4, r0
 8011270:	000d      	movs	r5, r1
 8011272:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011274:	2369      	movs	r3, #105	; 0x69
 8011276:	5cc3      	ldrb	r3, [r0, r3]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d003      	beq.n	8011284 <HAL_UART_Transmit+0x1c>
 801127c:	2369      	movs	r3, #105	; 0x69
 801127e:	5cc3      	ldrb	r3, [r0, r3]
 8011280:	2b22      	cmp	r3, #34	; 0x22
 8011282:	d152      	bne.n	801132a <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8011284:	2d00      	cmp	r5, #0
 8011286:	d054      	beq.n	8011332 <HAL_UART_Transmit+0xca>
 8011288:	2a00      	cmp	r2, #0
 801128a:	d054      	beq.n	8011336 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 801128c:	2368      	movs	r3, #104	; 0x68
 801128e:	5ce3      	ldrb	r3, [r4, r3]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d052      	beq.n	801133a <HAL_UART_Transmit+0xd2>
 8011294:	2368      	movs	r3, #104	; 0x68
 8011296:	2101      	movs	r1, #1
 8011298:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801129a:	2300      	movs	r3, #0
 801129c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801129e:	3369      	adds	r3, #105	; 0x69
 80112a0:	5ce3      	ldrb	r3, [r4, r3]
 80112a2:	2b22      	cmp	r3, #34	; 0x22
 80112a4:	d009      	beq.n	80112ba <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80112a6:	2369      	movs	r3, #105	; 0x69
 80112a8:	2112      	movs	r1, #18
 80112aa:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80112ac:	2350      	movs	r3, #80	; 0x50
 80112ae:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80112b0:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112b2:	2380      	movs	r3, #128	; 0x80
 80112b4:	015b      	lsls	r3, r3, #5
 80112b6:	4698      	mov	r8, r3
 80112b8:	e00a      	b.n	80112d0 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80112ba:	3347      	adds	r3, #71	; 0x47
 80112bc:	3131      	adds	r1, #49	; 0x31
 80112be:	54e1      	strb	r1, [r4, r3]
 80112c0:	e7f4      	b.n	80112ac <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80112c2:	782b      	ldrb	r3, [r5, #0]
 80112c4:	6822      	ldr	r2, [r4, #0]
 80112c6:	8513      	strh	r3, [r2, #40]	; 0x28
 80112c8:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 80112ca:	5ba2      	ldrh	r2, [r4, r6]
 80112cc:	2a00      	cmp	r2, #0
 80112ce:	d016      	beq.n	80112fe <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80112d0:	3a01      	subs	r2, #1
 80112d2:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80112d4:	003b      	movs	r3, r7
 80112d6:	2200      	movs	r2, #0
 80112d8:	2180      	movs	r1, #128	; 0x80
 80112da:	0020      	movs	r0, r4
 80112dc:	f7ff ff5c 	bl	8011198 <UART_WaitOnFlagUntilTimeout>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d12c      	bne.n	801133e <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112e4:	68a3      	ldr	r3, [r4, #8]
 80112e6:	4543      	cmp	r3, r8
 80112e8:	d1eb      	bne.n	80112c2 <HAL_UART_Transmit+0x5a>
 80112ea:	6923      	ldr	r3, [r4, #16]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1e8      	bne.n	80112c2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80112f0:	882b      	ldrh	r3, [r5, #0]
 80112f2:	05db      	lsls	r3, r3, #23
 80112f4:	0ddb      	lsrs	r3, r3, #23
 80112f6:	6822      	ldr	r2, [r4, #0]
 80112f8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80112fa:	3502      	adds	r5, #2
 80112fc:	e7e5      	b.n	80112ca <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80112fe:	003b      	movs	r3, r7
 8011300:	2140      	movs	r1, #64	; 0x40
 8011302:	0020      	movs	r0, r4
 8011304:	f7ff ff48 	bl	8011198 <UART_WaitOnFlagUntilTimeout>
 8011308:	2800      	cmp	r0, #0
 801130a:	d11a      	bne.n	8011342 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801130c:	2369      	movs	r3, #105	; 0x69
 801130e:	5ce3      	ldrb	r3, [r4, r3]
 8011310:	2b32      	cmp	r3, #50	; 0x32
 8011312:	d006      	beq.n	8011322 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8011314:	2369      	movs	r3, #105	; 0x69
 8011316:	2201      	movs	r2, #1
 8011318:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801131a:	2368      	movs	r3, #104	; 0x68
 801131c:	2200      	movs	r2, #0
 801131e:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011320:	e004      	b.n	801132c <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011322:	3337      	adds	r3, #55	; 0x37
 8011324:	2222      	movs	r2, #34	; 0x22
 8011326:	54e2      	strb	r2, [r4, r3]
 8011328:	e7f7      	b.n	801131a <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 801132a:	2002      	movs	r0, #2
}
 801132c:	bc80      	pop	{r7}
 801132e:	46b8      	mov	r8, r7
 8011330:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8011332:	2001      	movs	r0, #1
 8011334:	e7fa      	b.n	801132c <HAL_UART_Transmit+0xc4>
 8011336:	2001      	movs	r0, #1
 8011338:	e7f8      	b.n	801132c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801133a:	2002      	movs	r0, #2
 801133c:	e7f6      	b.n	801132c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 801133e:	2003      	movs	r0, #3
 8011340:	e7f4      	b.n	801132c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8011342:	2003      	movs	r0, #3
 8011344:	e7f2      	b.n	801132c <HAL_UART_Transmit+0xc4>
	...

08011348 <UART_CheckIdleState>:
{
 8011348:	b510      	push	{r4, lr}
 801134a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801134c:	2300      	movs	r3, #0
 801134e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8011350:	6803      	ldr	r3, [r0, #0]
 8011352:	4a18      	ldr	r2, [pc, #96]	; (80113b4 <UART_CheckIdleState+0x6c>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d005      	beq.n	8011364 <UART_CheckIdleState+0x1c>
 8011358:	4a17      	ldr	r2, [pc, #92]	; (80113b8 <UART_CheckIdleState+0x70>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d002      	beq.n	8011364 <UART_CheckIdleState+0x1c>
 801135e:	4a17      	ldr	r2, [pc, #92]	; (80113bc <UART_CheckIdleState+0x74>)
 8011360:	4293      	cmp	r3, r2
 8011362:	d106      	bne.n	8011372 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	071b      	lsls	r3, r3, #28
 8011368:	d40b      	bmi.n	8011382 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801136a:	6823      	ldr	r3, [r4, #0]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	075b      	lsls	r3, r3, #29
 8011370:	d413      	bmi.n	801139a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8011372:	2369      	movs	r3, #105	; 0x69
 8011374:	2201      	movs	r2, #1
 8011376:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011378:	3b01      	subs	r3, #1
 801137a:	2200      	movs	r2, #0
 801137c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801137e:	2000      	movs	r0, #0
}
 8011380:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011382:	23fa      	movs	r3, #250	; 0xfa
 8011384:	2180      	movs	r1, #128	; 0x80
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	2200      	movs	r2, #0
 801138a:	0389      	lsls	r1, r1, #14
 801138c:	0020      	movs	r0, r4
 801138e:	f7ff ff03 	bl	8011198 <UART_WaitOnFlagUntilTimeout>
 8011392:	2800      	cmp	r0, #0
 8011394:	d0e9      	beq.n	801136a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8011396:	2003      	movs	r0, #3
 8011398:	e7f2      	b.n	8011380 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801139a:	23fa      	movs	r3, #250	; 0xfa
 801139c:	2180      	movs	r1, #128	; 0x80
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	2200      	movs	r2, #0
 80113a2:	03c9      	lsls	r1, r1, #15
 80113a4:	0020      	movs	r0, r4
 80113a6:	f7ff fef7 	bl	8011198 <UART_WaitOnFlagUntilTimeout>
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d0e1      	beq.n	8011372 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80113ae:	2003      	movs	r0, #3
 80113b0:	e7e6      	b.n	8011380 <UART_CheckIdleState+0x38>
 80113b2:	46c0      	nop			; (mov r8, r8)
 80113b4:	40013800 	.word	0x40013800
 80113b8:	40004400 	.word	0x40004400
 80113bc:	40004800 	.word	0x40004800

080113c0 <HAL_UART_Init>:
{
 80113c0:	b510      	push	{r4, lr}
 80113c2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80113c4:	d030      	beq.n	8011428 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80113c6:	2369      	movs	r3, #105	; 0x69
 80113c8:	5cc3      	ldrb	r3, [r0, r3]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d022      	beq.n	8011414 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80113ce:	2369      	movs	r3, #105	; 0x69
 80113d0:	2202      	movs	r2, #2
 80113d2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80113d4:	6822      	ldr	r2, [r4, #0]
 80113d6:	6813      	ldr	r3, [r2, #0]
 80113d8:	2101      	movs	r1, #1
 80113da:	438b      	bics	r3, r1
 80113dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80113de:	0020      	movs	r0, r4
 80113e0:	f7ff fd4e 	bl	8010e80 <UART_SetConfig>
 80113e4:	2801      	cmp	r0, #1
 80113e6:	d014      	beq.n	8011412 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80113e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d118      	bne.n	8011420 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80113ee:	6822      	ldr	r2, [r4, #0]
 80113f0:	6853      	ldr	r3, [r2, #4]
 80113f2:	490e      	ldr	r1, [pc, #56]	; (801142c <HAL_UART_Init+0x6c>)
 80113f4:	400b      	ands	r3, r1
 80113f6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80113f8:	6822      	ldr	r2, [r4, #0]
 80113fa:	6893      	ldr	r3, [r2, #8]
 80113fc:	212a      	movs	r1, #42	; 0x2a
 80113fe:	438b      	bics	r3, r1
 8011400:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8011402:	6822      	ldr	r2, [r4, #0]
 8011404:	6813      	ldr	r3, [r2, #0]
 8011406:	3929      	subs	r1, #41	; 0x29
 8011408:	430b      	orrs	r3, r1
 801140a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801140c:	0020      	movs	r0, r4
 801140e:	f7ff ff9b 	bl	8011348 <UART_CheckIdleState>
}
 8011412:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011414:	3368      	adds	r3, #104	; 0x68
 8011416:	2200      	movs	r2, #0
 8011418:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801141a:	f7fa ffbd 	bl	800c398 <HAL_UART_MspInit>
 801141e:	e7d6      	b.n	80113ce <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8011420:	0020      	movs	r0, r4
 8011422:	f7ff fe49 	bl	80110b8 <UART_AdvFeatureConfig>
 8011426:	e7e2      	b.n	80113ee <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8011428:	2001      	movs	r0, #1
 801142a:	e7f2      	b.n	8011412 <HAL_UART_Init+0x52>
 801142c:	ffffb7ff 	.word	0xffffb7ff

08011430 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8011430:	2369      	movs	r3, #105	; 0x69
 8011432:	5cc3      	ldrb	r3, [r0, r3]
 8011434:	2b12      	cmp	r3, #18
 8011436:	d003      	beq.n	8011440 <UART_Transmit_IT+0x10>
 8011438:	2369      	movs	r3, #105	; 0x69
 801143a:	5cc3      	ldrb	r3, [r0, r3]
 801143c:	2b32      	cmp	r3, #50	; 0x32
 801143e:	d12d      	bne.n	801149c <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8011440:	2352      	movs	r3, #82	; 0x52
 8011442:	5ac3      	ldrh	r3, [r0, r3]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d10b      	bne.n	8011460 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011448:	6802      	ldr	r2, [r0, #0]
 801144a:	6813      	ldr	r3, [r2, #0]
 801144c:	2180      	movs	r1, #128	; 0x80
 801144e:	438b      	bics	r3, r1
 8011450:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011452:	6802      	ldr	r2, [r0, #0]
 8011454:	6813      	ldr	r3, [r2, #0]
 8011456:	3940      	subs	r1, #64	; 0x40
 8011458:	430b      	orrs	r3, r1
 801145a:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 801145c:	2000      	movs	r0, #0
 801145e:	e00f      	b.n	8011480 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011460:	2380      	movs	r3, #128	; 0x80
 8011462:	015b      	lsls	r3, r3, #5
 8011464:	6882      	ldr	r2, [r0, #8]
 8011466:	429a      	cmp	r2, r3
 8011468:	d00b      	beq.n	8011482 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801146a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801146c:	1c5a      	adds	r2, r3, #1
 801146e:	64c2      	str	r2, [r0, #76]	; 0x4c
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	6802      	ldr	r2, [r0, #0]
 8011474:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8011476:	2252      	movs	r2, #82	; 0x52
 8011478:	5a83      	ldrh	r3, [r0, r2]
 801147a:	3b01      	subs	r3, #1
 801147c:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 801147e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011480:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011482:	6903      	ldr	r3, [r0, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d1f0      	bne.n	801146a <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011488:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801148a:	881b      	ldrh	r3, [r3, #0]
 801148c:	05db      	lsls	r3, r3, #23
 801148e:	0ddb      	lsrs	r3, r3, #23
 8011490:	6802      	ldr	r2, [r0, #0]
 8011492:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011494:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011496:	3302      	adds	r3, #2
 8011498:	64c3      	str	r3, [r0, #76]	; 0x4c
 801149a:	e7ec      	b.n	8011476 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 801149c:	2002      	movs	r0, #2
 801149e:	e7ef      	b.n	8011480 <UART_Transmit_IT+0x50>

080114a0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80114a0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80114a2:	6802      	ldr	r2, [r0, #0]
 80114a4:	6813      	ldr	r3, [r2, #0]
 80114a6:	2140      	movs	r1, #64	; 0x40
 80114a8:	438b      	bics	r3, r1
 80114aa:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80114ac:	2369      	movs	r3, #105	; 0x69
 80114ae:	5cc3      	ldrb	r3, [r0, r3]
 80114b0:	2b32      	cmp	r3, #50	; 0x32
 80114b2:	d00a      	beq.n	80114ca <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80114b4:	6801      	ldr	r1, [r0, #0]
 80114b6:	688b      	ldr	r3, [r1, #8]
 80114b8:	2201      	movs	r2, #1
 80114ba:	4393      	bics	r3, r2
 80114bc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80114be:	2369      	movs	r3, #105	; 0x69
 80114c0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80114c2:	f7fa fc8d 	bl	800bde0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80114c6:	2000      	movs	r0, #0
 80114c8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80114ca:	3337      	adds	r3, #55	; 0x37
 80114cc:	2222      	movs	r2, #34	; 0x22
 80114ce:	54c2      	strb	r2, [r0, r3]
 80114d0:	e7f7      	b.n	80114c2 <UART_EndTransmit_IT+0x22>
	...

080114d4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80114d4:	b510      	push	{r4, lr}
 80114d6:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80114d8:	2269      	movs	r2, #105	; 0x69
 80114da:	5c82      	ldrb	r2, [r0, r2]
 80114dc:	2a22      	cmp	r2, #34	; 0x22
 80114de:	d003      	beq.n	80114e8 <UART_Receive_IT+0x14>
 80114e0:	2269      	movs	r2, #105	; 0x69
 80114e2:	5c82      	ldrb	r2, [r0, r2]
 80114e4:	2a32      	cmp	r2, #50	; 0x32
 80114e6:	d13f      	bne.n	8011568 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 80114e8:	225c      	movs	r2, #92	; 0x5c
 80114ea:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114ec:	2180      	movs	r1, #128	; 0x80
 80114ee:	0149      	lsls	r1, r1, #5
 80114f0:	689a      	ldr	r2, [r3, #8]
 80114f2:	428a      	cmp	r2, r1
 80114f4:	d028      	beq.n	8011548 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80114fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80114fc:	1c4c      	adds	r4, r1, #1
 80114fe:	655c      	str	r4, [r3, #84]	; 0x54
 8011500:	4002      	ands	r2, r0
 8011502:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8011504:	215a      	movs	r1, #90	; 0x5a
 8011506:	5a5a      	ldrh	r2, [r3, r1]
 8011508:	3a01      	subs	r2, #1
 801150a:	b292      	uxth	r2, r2
 801150c:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 801150e:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8011510:	2a00      	cmp	r2, #0
 8011512:	d118      	bne.n	8011546 <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011514:	6819      	ldr	r1, [r3, #0]
 8011516:	680a      	ldr	r2, [r1, #0]
 8011518:	3020      	adds	r0, #32
 801151a:	4382      	bics	r2, r0
 801151c:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801151e:	2269      	movs	r2, #105	; 0x69
 8011520:	5c9a      	ldrb	r2, [r3, r2]
 8011522:	2a32      	cmp	r2, #50	; 0x32
 8011524:	d01c      	beq.n	8011560 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011526:	6819      	ldr	r1, [r3, #0]
 8011528:	680a      	ldr	r2, [r1, #0]
 801152a:	4810      	ldr	r0, [pc, #64]	; (801156c <UART_Receive_IT+0x98>)
 801152c:	4002      	ands	r2, r0
 801152e:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011530:	6818      	ldr	r0, [r3, #0]
 8011532:	6882      	ldr	r2, [r0, #8]
 8011534:	2101      	movs	r1, #1
 8011536:	438a      	bics	r2, r1
 8011538:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 801153a:	2269      	movs	r2, #105	; 0x69
 801153c:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 801153e:	0018      	movs	r0, r3
 8011540:	f7fa fc8c 	bl	800be5c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8011544:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011546:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011548:	691a      	ldr	r2, [r3, #16]
 801154a:	2a00      	cmp	r2, #0
 801154c:	d1d3      	bne.n	80114f6 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8011552:	4002      	ands	r2, r0
 8011554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011556:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8011558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801155a:	3202      	adds	r2, #2
 801155c:	655a      	str	r2, [r3, #84]	; 0x54
 801155e:	e7d1      	b.n	8011504 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011560:	3237      	adds	r2, #55	; 0x37
 8011562:	2112      	movs	r1, #18
 8011564:	5499      	strb	r1, [r3, r2]
 8011566:	e7ea      	b.n	801153e <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8011568:	2002      	movs	r0, #2
 801156a:	e7ec      	b.n	8011546 <UART_Receive_IT+0x72>
 801156c:	fffffeff 	.word	0xfffffeff

08011570 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011570:	4770      	bx	lr

08011572 <HAL_UART_IRQHandler>:
{
 8011572:	b510      	push	{r4, lr}
 8011574:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8011576:	6803      	ldr	r3, [r0, #0]
 8011578:	69da      	ldr	r2, [r3, #28]
 801157a:	07d2      	lsls	r2, r2, #31
 801157c:	d509      	bpl.n	8011592 <HAL_UART_IRQHandler+0x20>
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	05d2      	lsls	r2, r2, #23
 8011582:	d506      	bpl.n	8011592 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011584:	2201      	movs	r2, #1
 8011586:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011588:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801158a:	4313      	orrs	r3, r2
 801158c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801158e:	2369      	movs	r3, #105	; 0x69
 8011590:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	69da      	ldr	r2, [r3, #28]
 8011596:	0792      	lsls	r2, r2, #30
 8011598:	d50b      	bpl.n	80115b2 <HAL_UART_IRQHandler+0x40>
 801159a:	689a      	ldr	r2, [r3, #8]
 801159c:	07d2      	lsls	r2, r2, #31
 801159e:	d508      	bpl.n	80115b2 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80115a0:	2202      	movs	r2, #2
 80115a2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80115a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80115a6:	3202      	adds	r2, #2
 80115a8:	4313      	orrs	r3, r2
 80115aa:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80115ac:	2369      	movs	r3, #105	; 0x69
 80115ae:	3a03      	subs	r2, #3
 80115b0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	69da      	ldr	r2, [r3, #28]
 80115b6:	0752      	lsls	r2, r2, #29
 80115b8:	d50b      	bpl.n	80115d2 <HAL_UART_IRQHandler+0x60>
 80115ba:	689a      	ldr	r2, [r3, #8]
 80115bc:	07d2      	lsls	r2, r2, #31
 80115be:	d508      	bpl.n	80115d2 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80115c0:	2204      	movs	r2, #4
 80115c2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80115c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80115c6:	3a02      	subs	r2, #2
 80115c8:	4313      	orrs	r3, r2
 80115ca:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80115cc:	2369      	movs	r3, #105	; 0x69
 80115ce:	3a01      	subs	r2, #1
 80115d0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80115d2:	6823      	ldr	r3, [r4, #0]
 80115d4:	69da      	ldr	r2, [r3, #28]
 80115d6:	0712      	lsls	r2, r2, #28
 80115d8:	d50a      	bpl.n	80115f0 <HAL_UART_IRQHandler+0x7e>
 80115da:	689a      	ldr	r2, [r3, #8]
 80115dc:	07d2      	lsls	r2, r2, #31
 80115de:	d507      	bpl.n	80115f0 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80115e0:	2208      	movs	r2, #8
 80115e2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80115e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80115e6:	4313      	orrs	r3, r2
 80115e8:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80115ea:	2369      	movs	r3, #105	; 0x69
 80115ec:	3a07      	subs	r2, #7
 80115ee:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80115f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d11c      	bne.n	8011630 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80115f6:	6823      	ldr	r3, [r4, #0]
 80115f8:	69da      	ldr	r2, [r3, #28]
 80115fa:	02d2      	lsls	r2, r2, #11
 80115fc:	d502      	bpl.n	8011604 <HAL_UART_IRQHandler+0x92>
 80115fe:	689a      	ldr	r2, [r3, #8]
 8011600:	0252      	lsls	r2, r2, #9
 8011602:	d419      	bmi.n	8011638 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8011604:	6823      	ldr	r3, [r4, #0]
 8011606:	69da      	ldr	r2, [r3, #28]
 8011608:	0692      	lsls	r2, r2, #26
 801160a:	d502      	bpl.n	8011612 <HAL_UART_IRQHandler+0xa0>
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	069b      	lsls	r3, r3, #26
 8011610:	d41c      	bmi.n	801164c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	69da      	ldr	r2, [r3, #28]
 8011616:	0612      	lsls	r2, r2, #24
 8011618:	d502      	bpl.n	8011620 <HAL_UART_IRQHandler+0xae>
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	061b      	lsls	r3, r3, #24
 801161e:	d41e      	bmi.n	801165e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	69da      	ldr	r2, [r3, #28]
 8011624:	0652      	lsls	r2, r2, #25
 8011626:	d502      	bpl.n	801162e <HAL_UART_IRQHandler+0xbc>
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	065b      	lsls	r3, r3, #25
 801162c:	d41b      	bmi.n	8011666 <HAL_UART_IRQHandler+0xf4>
}
 801162e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8011630:	0020      	movs	r0, r4
 8011632:	f7fa fbed 	bl	800be10 <HAL_UART_ErrorCallback>
 8011636:	e7de      	b.n	80115f6 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8011638:	2280      	movs	r2, #128	; 0x80
 801163a:	0352      	lsls	r2, r2, #13
 801163c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801163e:	2369      	movs	r3, #105	; 0x69
 8011640:	2201      	movs	r2, #1
 8011642:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8011644:	0020      	movs	r0, r4
 8011646:	f7ff ff93 	bl	8011570 <HAL_UARTEx_WakeupCallback>
 801164a:	e7db      	b.n	8011604 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 801164c:	0020      	movs	r0, r4
 801164e:	f7ff ff41 	bl	80114d4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011652:	6822      	ldr	r2, [r4, #0]
 8011654:	6993      	ldr	r3, [r2, #24]
 8011656:	2108      	movs	r1, #8
 8011658:	430b      	orrs	r3, r1
 801165a:	6193      	str	r3, [r2, #24]
 801165c:	e7d9      	b.n	8011612 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801165e:	0020      	movs	r0, r4
 8011660:	f7ff fee6 	bl	8011430 <UART_Transmit_IT>
 8011664:	e7dc      	b.n	8011620 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8011666:	0020      	movs	r0, r4
 8011668:	f7ff ff1a 	bl	80114a0 <UART_EndTransmit_IT>
}
 801166c:	e7df      	b.n	801162e <HAL_UART_IRQHandler+0xbc>

0801166e <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 801166e:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011670:	f7fd f97c 	bl	800e96c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8011674:	f7f8 ffa4 	bl	800a5c0 <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 8011678:	f7f1 fdc8 	bl	800320c <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 801167c:	f7f6 f80c 	bl	8007698 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8011680:	f7fb f91a 	bl	800c8b8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  while (1)
 8011684:	e7fe      	b.n	8011684 <main+0x16>

08011686 <UserTask>:
void UserTask(void * argument)
{

	
  /* Infinite loop */
  for(;;)
 8011686:	e7fe      	b.n	8011686 <UserTask>

08011688 <atof>:
 8011688:	b510      	push	{r4, lr}
 801168a:	2100      	movs	r1, #0
 801168c:	f001 fb0a 	bl	8012ca4 <strtod>
 8011690:	bd10      	pop	{r4, pc}

08011692 <atoi>:
 8011692:	b510      	push	{r4, lr}
 8011694:	220a      	movs	r2, #10
 8011696:	2100      	movs	r1, #0
 8011698:	f001 fbda 	bl	8012e50 <strtol>
 801169c:	bd10      	pop	{r4, pc}

0801169e <atol>:
 801169e:	b510      	push	{r4, lr}
 80116a0:	220a      	movs	r2, #10
 80116a2:	2100      	movs	r1, #0
 80116a4:	f001 fbd4 	bl	8012e50 <strtol>
 80116a8:	bd10      	pop	{r4, pc}
	...

080116ac <__libc_init_array>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	2600      	movs	r6, #0
 80116b0:	4d0c      	ldr	r5, [pc, #48]	; (80116e4 <__libc_init_array+0x38>)
 80116b2:	4c0d      	ldr	r4, [pc, #52]	; (80116e8 <__libc_init_array+0x3c>)
 80116b4:	1b64      	subs	r4, r4, r5
 80116b6:	10a4      	asrs	r4, r4, #2
 80116b8:	42a6      	cmp	r6, r4
 80116ba:	d109      	bne.n	80116d0 <__libc_init_array+0x24>
 80116bc:	2600      	movs	r6, #0
 80116be:	f006 fb3b 	bl	8017d38 <_init>
 80116c2:	4d0a      	ldr	r5, [pc, #40]	; (80116ec <__libc_init_array+0x40>)
 80116c4:	4c0a      	ldr	r4, [pc, #40]	; (80116f0 <__libc_init_array+0x44>)
 80116c6:	1b64      	subs	r4, r4, r5
 80116c8:	10a4      	asrs	r4, r4, #2
 80116ca:	42a6      	cmp	r6, r4
 80116cc:	d105      	bne.n	80116da <__libc_init_array+0x2e>
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	00b3      	lsls	r3, r6, #2
 80116d2:	58eb      	ldr	r3, [r5, r3]
 80116d4:	4798      	blx	r3
 80116d6:	3601      	adds	r6, #1
 80116d8:	e7ee      	b.n	80116b8 <__libc_init_array+0xc>
 80116da:	00b3      	lsls	r3, r6, #2
 80116dc:	58eb      	ldr	r3, [r5, r3]
 80116de:	4798      	blx	r3
 80116e0:	3601      	adds	r6, #1
 80116e2:	e7f2      	b.n	80116ca <__libc_init_array+0x1e>
 80116e4:	0801ac38 	.word	0x0801ac38
 80116e8:	0801ac38 	.word	0x0801ac38
 80116ec:	0801ac38 	.word	0x0801ac38
 80116f0:	0801ac40 	.word	0x0801ac40

080116f4 <malloc>:
 80116f4:	b510      	push	{r4, lr}
 80116f6:	4b03      	ldr	r3, [pc, #12]	; (8011704 <malloc+0x10>)
 80116f8:	0001      	movs	r1, r0
 80116fa:	6818      	ldr	r0, [r3, #0]
 80116fc:	f000 f80e 	bl	801171c <_malloc_r>
 8011700:	bd10      	pop	{r4, pc}
 8011702:	46c0      	nop			; (mov r8, r8)
 8011704:	20000100 	.word	0x20000100

08011708 <free>:
 8011708:	b510      	push	{r4, lr}
 801170a:	4b03      	ldr	r3, [pc, #12]	; (8011718 <free+0x10>)
 801170c:	0001      	movs	r1, r0
 801170e:	6818      	ldr	r0, [r3, #0]
 8011710:	f003 fd2e 	bl	8015170 <_free_r>
 8011714:	bd10      	pop	{r4, pc}
 8011716:	46c0      	nop			; (mov r8, r8)
 8011718:	20000100 	.word	0x20000100

0801171c <_malloc_r>:
 801171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801171e:	000d      	movs	r5, r1
 8011720:	b087      	sub	sp, #28
 8011722:	350b      	adds	r5, #11
 8011724:	9001      	str	r0, [sp, #4]
 8011726:	2d16      	cmp	r5, #22
 8011728:	d908      	bls.n	801173c <_malloc_r+0x20>
 801172a:	2207      	movs	r2, #7
 801172c:	4395      	bics	r5, r2
 801172e:	d506      	bpl.n	801173e <_malloc_r+0x22>
 8011730:	230c      	movs	r3, #12
 8011732:	9a01      	ldr	r2, [sp, #4]
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	2000      	movs	r0, #0
 8011738:	b007      	add	sp, #28
 801173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173c:	2510      	movs	r5, #16
 801173e:	42a9      	cmp	r1, r5
 8011740:	d8f6      	bhi.n	8011730 <_malloc_r+0x14>
 8011742:	9801      	ldr	r0, [sp, #4]
 8011744:	f000 fa1e 	bl	8011b84 <__malloc_lock>
 8011748:	23fc      	movs	r3, #252	; 0xfc
 801174a:	48bd      	ldr	r0, [pc, #756]	; (8011a40 <_malloc_r+0x324>)
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	429d      	cmp	r5, r3
 8011750:	d21a      	bcs.n	8011788 <_malloc_r+0x6c>
 8011752:	002a      	movs	r2, r5
 8011754:	3208      	adds	r2, #8
 8011756:	1882      	adds	r2, r0, r2
 8011758:	0011      	movs	r1, r2
 801175a:	6854      	ldr	r4, [r2, #4]
 801175c:	3908      	subs	r1, #8
 801175e:	08eb      	lsrs	r3, r5, #3
 8011760:	428c      	cmp	r4, r1
 8011762:	d103      	bne.n	801176c <_malloc_r+0x50>
 8011764:	68d4      	ldr	r4, [r2, #12]
 8011766:	3302      	adds	r3, #2
 8011768:	42a2      	cmp	r2, r4
 801176a:	d023      	beq.n	80117b4 <_malloc_r+0x98>
 801176c:	2303      	movs	r3, #3
 801176e:	6862      	ldr	r2, [r4, #4]
 8011770:	68a1      	ldr	r1, [r4, #8]
 8011772:	439a      	bics	r2, r3
 8011774:	0013      	movs	r3, r2
 8011776:	68e2      	ldr	r2, [r4, #12]
 8011778:	18e3      	adds	r3, r4, r3
 801177a:	60ca      	str	r2, [r1, #12]
 801177c:	6091      	str	r1, [r2, #8]
 801177e:	2201      	movs	r2, #1
 8011780:	6859      	ldr	r1, [r3, #4]
 8011782:	430a      	orrs	r2, r1
 8011784:	605a      	str	r2, [r3, #4]
 8011786:	e02b      	b.n	80117e0 <_malloc_r+0xc4>
 8011788:	233f      	movs	r3, #63	; 0x3f
 801178a:	0a6a      	lsrs	r2, r5, #9
 801178c:	d003      	beq.n	8011796 <_malloc_r+0x7a>
 801178e:	2a04      	cmp	r2, #4
 8011790:	d82c      	bhi.n	80117ec <_malloc_r+0xd0>
 8011792:	09ab      	lsrs	r3, r5, #6
 8011794:	3338      	adds	r3, #56	; 0x38
 8011796:	2203      	movs	r2, #3
 8011798:	4694      	mov	ip, r2
 801179a:	00d9      	lsls	r1, r3, #3
 801179c:	1809      	adds	r1, r1, r0
 801179e:	68cc      	ldr	r4, [r1, #12]
 80117a0:	428c      	cmp	r4, r1
 80117a2:	d006      	beq.n	80117b2 <_malloc_r+0x96>
 80117a4:	4666      	mov	r6, ip
 80117a6:	6862      	ldr	r2, [r4, #4]
 80117a8:	43b2      	bics	r2, r6
 80117aa:	1b57      	subs	r7, r2, r5
 80117ac:	2f0f      	cmp	r7, #15
 80117ae:	dd35      	ble.n	801181c <_malloc_r+0x100>
 80117b0:	3b01      	subs	r3, #1
 80117b2:	3301      	adds	r3, #1
 80117b4:	6904      	ldr	r4, [r0, #16]
 80117b6:	49a3      	ldr	r1, [pc, #652]	; (8011a44 <_malloc_r+0x328>)
 80117b8:	428c      	cmp	r4, r1
 80117ba:	d056      	beq.n	801186a <_malloc_r+0x14e>
 80117bc:	2203      	movs	r2, #3
 80117be:	6866      	ldr	r6, [r4, #4]
 80117c0:	4396      	bics	r6, r2
 80117c2:	0032      	movs	r2, r6
 80117c4:	1b76      	subs	r6, r6, r5
 80117c6:	2e0f      	cmp	r6, #15
 80117c8:	dd36      	ble.n	8011838 <_malloc_r+0x11c>
 80117ca:	2701      	movs	r7, #1
 80117cc:	1963      	adds	r3, r4, r5
 80117ce:	433d      	orrs	r5, r7
 80117d0:	4337      	orrs	r7, r6
 80117d2:	6065      	str	r5, [r4, #4]
 80117d4:	6143      	str	r3, [r0, #20]
 80117d6:	6103      	str	r3, [r0, #16]
 80117d8:	60d9      	str	r1, [r3, #12]
 80117da:	6099      	str	r1, [r3, #8]
 80117dc:	605f      	str	r7, [r3, #4]
 80117de:	50a6      	str	r6, [r4, r2]
 80117e0:	9801      	ldr	r0, [sp, #4]
 80117e2:	f000 f9d7 	bl	8011b94 <__malloc_unlock>
 80117e6:	0020      	movs	r0, r4
 80117e8:	3008      	adds	r0, #8
 80117ea:	e7a5      	b.n	8011738 <_malloc_r+0x1c>
 80117ec:	2a14      	cmp	r2, #20
 80117ee:	d802      	bhi.n	80117f6 <_malloc_r+0xda>
 80117f0:	0013      	movs	r3, r2
 80117f2:	335b      	adds	r3, #91	; 0x5b
 80117f4:	e7cf      	b.n	8011796 <_malloc_r+0x7a>
 80117f6:	2a54      	cmp	r2, #84	; 0x54
 80117f8:	d802      	bhi.n	8011800 <_malloc_r+0xe4>
 80117fa:	0b2b      	lsrs	r3, r5, #12
 80117fc:	336e      	adds	r3, #110	; 0x6e
 80117fe:	e7ca      	b.n	8011796 <_malloc_r+0x7a>
 8011800:	23aa      	movs	r3, #170	; 0xaa
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	429a      	cmp	r2, r3
 8011806:	d802      	bhi.n	801180e <_malloc_r+0xf2>
 8011808:	0beb      	lsrs	r3, r5, #15
 801180a:	3377      	adds	r3, #119	; 0x77
 801180c:	e7c3      	b.n	8011796 <_malloc_r+0x7a>
 801180e:	498e      	ldr	r1, [pc, #568]	; (8011a48 <_malloc_r+0x32c>)
 8011810:	237e      	movs	r3, #126	; 0x7e
 8011812:	428a      	cmp	r2, r1
 8011814:	d8bf      	bhi.n	8011796 <_malloc_r+0x7a>
 8011816:	0cab      	lsrs	r3, r5, #18
 8011818:	337c      	adds	r3, #124	; 0x7c
 801181a:	e7bc      	b.n	8011796 <_malloc_r+0x7a>
 801181c:	68e6      	ldr	r6, [r4, #12]
 801181e:	2f00      	cmp	r7, #0
 8011820:	db08      	blt.n	8011834 <_malloc_r+0x118>
 8011822:	68a3      	ldr	r3, [r4, #8]
 8011824:	60de      	str	r6, [r3, #12]
 8011826:	60b3      	str	r3, [r6, #8]
 8011828:	2301      	movs	r3, #1
 801182a:	18a2      	adds	r2, r4, r2
 801182c:	6851      	ldr	r1, [r2, #4]
 801182e:	430b      	orrs	r3, r1
 8011830:	6053      	str	r3, [r2, #4]
 8011832:	e7d5      	b.n	80117e0 <_malloc_r+0xc4>
 8011834:	0034      	movs	r4, r6
 8011836:	e7b3      	b.n	80117a0 <_malloc_r+0x84>
 8011838:	6141      	str	r1, [r0, #20]
 801183a:	6101      	str	r1, [r0, #16]
 801183c:	2e00      	cmp	r6, #0
 801183e:	daf3      	bge.n	8011828 <_malloc_r+0x10c>
 8011840:	6841      	ldr	r1, [r0, #4]
 8011842:	468c      	mov	ip, r1
 8011844:	2180      	movs	r1, #128	; 0x80
 8011846:	0089      	lsls	r1, r1, #2
 8011848:	428a      	cmp	r2, r1
 801184a:	d300      	bcc.n	801184e <_malloc_r+0x132>
 801184c:	e089      	b.n	8011962 <_malloc_r+0x246>
 801184e:	0956      	lsrs	r6, r2, #5
 8011850:	08d1      	lsrs	r1, r2, #3
 8011852:	2201      	movs	r2, #1
 8011854:	40b2      	lsls	r2, r6
 8011856:	4666      	mov	r6, ip
 8011858:	00c9      	lsls	r1, r1, #3
 801185a:	4332      	orrs	r2, r6
 801185c:	6042      	str	r2, [r0, #4]
 801185e:	1808      	adds	r0, r1, r0
 8011860:	6882      	ldr	r2, [r0, #8]
 8011862:	60e0      	str	r0, [r4, #12]
 8011864:	60a2      	str	r2, [r4, #8]
 8011866:	6084      	str	r4, [r0, #8]
 8011868:	60d4      	str	r4, [r2, #12]
 801186a:	2201      	movs	r2, #1
 801186c:	4874      	ldr	r0, [pc, #464]	; (8011a40 <_malloc_r+0x324>)
 801186e:	1099      	asrs	r1, r3, #2
 8011870:	408a      	lsls	r2, r1
 8011872:	6841      	ldr	r1, [r0, #4]
 8011874:	4291      	cmp	r1, r2
 8011876:	d325      	bcc.n	80118c4 <_malloc_r+0x1a8>
 8011878:	420a      	tst	r2, r1
 801187a:	d105      	bne.n	8011888 <_malloc_r+0x16c>
 801187c:	2403      	movs	r4, #3
 801187e:	43a3      	bics	r3, r4
 8011880:	0052      	lsls	r2, r2, #1
 8011882:	3304      	adds	r3, #4
 8011884:	420a      	tst	r2, r1
 8011886:	d0fb      	beq.n	8011880 <_malloc_r+0x164>
 8011888:	00d9      	lsls	r1, r3, #3
 801188a:	1841      	adds	r1, r0, r1
 801188c:	468c      	mov	ip, r1
 801188e:	9302      	str	r3, [sp, #8]
 8011890:	68cc      	ldr	r4, [r1, #12]
 8011892:	428c      	cmp	r4, r1
 8011894:	d000      	beq.n	8011898 <_malloc_r+0x17c>
 8011896:	e09b      	b.n	80119d0 <_malloc_r+0x2b4>
 8011898:	2603      	movs	r6, #3
 801189a:	9c02      	ldr	r4, [sp, #8]
 801189c:	3108      	adds	r1, #8
 801189e:	3401      	adds	r4, #1
 80118a0:	9402      	str	r4, [sp, #8]
 80118a2:	4234      	tst	r4, r6
 80118a4:	d1f4      	bne.n	8011890 <_malloc_r+0x174>
 80118a6:	2103      	movs	r1, #3
 80118a8:	420b      	tst	r3, r1
 80118aa:	d000      	beq.n	80118ae <_malloc_r+0x192>
 80118ac:	e0b7      	b.n	8011a1e <_malloc_r+0x302>
 80118ae:	6843      	ldr	r3, [r0, #4]
 80118b0:	4393      	bics	r3, r2
 80118b2:	6043      	str	r3, [r0, #4]
 80118b4:	4b62      	ldr	r3, [pc, #392]	; (8011a40 <_malloc_r+0x324>)
 80118b6:	0052      	lsls	r2, r2, #1
 80118b8:	6859      	ldr	r1, [r3, #4]
 80118ba:	4291      	cmp	r1, r2
 80118bc:	d302      	bcc.n	80118c4 <_malloc_r+0x1a8>
 80118be:	2a00      	cmp	r2, #0
 80118c0:	d000      	beq.n	80118c4 <_malloc_r+0x1a8>
 80118c2:	e0bb      	b.n	8011a3c <_malloc_r+0x320>
 80118c4:	2303      	movs	r3, #3
 80118c6:	6886      	ldr	r6, [r0, #8]
 80118c8:	6872      	ldr	r2, [r6, #4]
 80118ca:	439a      	bics	r2, r3
 80118cc:	9202      	str	r2, [sp, #8]
 80118ce:	42aa      	cmp	r2, r5
 80118d0:	d303      	bcc.n	80118da <_malloc_r+0x1be>
 80118d2:	1b51      	subs	r1, r2, r5
 80118d4:	290f      	cmp	r1, #15
 80118d6:	dd00      	ble.n	80118da <_malloc_r+0x1be>
 80118d8:	e125      	b.n	8011b26 <_malloc_r+0x40a>
 80118da:	9b02      	ldr	r3, [sp, #8]
 80118dc:	2008      	movs	r0, #8
 80118de:	18f3      	adds	r3, r6, r3
 80118e0:	9303      	str	r3, [sp, #12]
 80118e2:	4b5a      	ldr	r3, [pc, #360]	; (8011a4c <_malloc_r+0x330>)
 80118e4:	681f      	ldr	r7, [r3, #0]
 80118e6:	f002 fd43 	bl	8014370 <sysconf>
 80118ea:	4b59      	ldr	r3, [pc, #356]	; (8011a50 <_malloc_r+0x334>)
 80118ec:	3710      	adds	r7, #16
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	197f      	adds	r7, r7, r5
 80118f2:	9004      	str	r0, [sp, #16]
 80118f4:	3301      	adds	r3, #1
 80118f6:	d003      	beq.n	8011900 <_malloc_r+0x1e4>
 80118f8:	3f01      	subs	r7, #1
 80118fa:	183f      	adds	r7, r7, r0
 80118fc:	4243      	negs	r3, r0
 80118fe:	401f      	ands	r7, r3
 8011900:	0039      	movs	r1, r7
 8011902:	9801      	ldr	r0, [sp, #4]
 8011904:	f000 fb18 	bl	8011f38 <_sbrk_r>
 8011908:	0004      	movs	r4, r0
 801190a:	1c43      	adds	r3, r0, #1
 801190c:	d100      	bne.n	8011910 <_malloc_r+0x1f4>
 801190e:	e0de      	b.n	8011ace <_malloc_r+0x3b2>
 8011910:	9b03      	ldr	r3, [sp, #12]
 8011912:	4283      	cmp	r3, r0
 8011914:	d903      	bls.n	801191e <_malloc_r+0x202>
 8011916:	4b4a      	ldr	r3, [pc, #296]	; (8011a40 <_malloc_r+0x324>)
 8011918:	429e      	cmp	r6, r3
 801191a:	d000      	beq.n	801191e <_malloc_r+0x202>
 801191c:	e0d7      	b.n	8011ace <_malloc_r+0x3b2>
 801191e:	4b4d      	ldr	r3, [pc, #308]	; (8011a54 <_malloc_r+0x338>)
 8011920:	9903      	ldr	r1, [sp, #12]
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	18ba      	adds	r2, r7, r2
 8011926:	601a      	str	r2, [r3, #0]
 8011928:	9b04      	ldr	r3, [sp, #16]
 801192a:	3b01      	subs	r3, #1
 801192c:	42a1      	cmp	r1, r4
 801192e:	d000      	beq.n	8011932 <_malloc_r+0x216>
 8011930:	e096      	b.n	8011a60 <_malloc_r+0x344>
 8011932:	4219      	tst	r1, r3
 8011934:	d000      	beq.n	8011938 <_malloc_r+0x21c>
 8011936:	e093      	b.n	8011a60 <_malloc_r+0x344>
 8011938:	2601      	movs	r6, #1
 801193a:	4b41      	ldr	r3, [pc, #260]	; (8011a40 <_malloc_r+0x324>)
 801193c:	9a02      	ldr	r2, [sp, #8]
 801193e:	689b      	ldr	r3, [r3, #8]
 8011940:	19d7      	adds	r7, r2, r7
 8011942:	433e      	orrs	r6, r7
 8011944:	605e      	str	r6, [r3, #4]
 8011946:	4b43      	ldr	r3, [pc, #268]	; (8011a54 <_malloc_r+0x338>)
 8011948:	4a43      	ldr	r2, [pc, #268]	; (8011a58 <_malloc_r+0x33c>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	6811      	ldr	r1, [r2, #0]
 801194e:	428b      	cmp	r3, r1
 8011950:	d900      	bls.n	8011954 <_malloc_r+0x238>
 8011952:	6013      	str	r3, [r2, #0]
 8011954:	4a41      	ldr	r2, [pc, #260]	; (8011a5c <_malloc_r+0x340>)
 8011956:	6811      	ldr	r1, [r2, #0]
 8011958:	428b      	cmp	r3, r1
 801195a:	d800      	bhi.n	801195e <_malloc_r+0x242>
 801195c:	e0b7      	b.n	8011ace <_malloc_r+0x3b2>
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	e0b5      	b.n	8011ace <_malloc_r+0x3b2>
 8011962:	0a56      	lsrs	r6, r2, #9
 8011964:	2e04      	cmp	r6, #4
 8011966:	d811      	bhi.n	801198c <_malloc_r+0x270>
 8011968:	0991      	lsrs	r1, r2, #6
 801196a:	3138      	adds	r1, #56	; 0x38
 801196c:	00cf      	lsls	r7, r1, #3
 801196e:	183f      	adds	r7, r7, r0
 8011970:	68be      	ldr	r6, [r7, #8]
 8011972:	42b7      	cmp	r7, r6
 8011974:	d125      	bne.n	80119c2 <_malloc_r+0x2a6>
 8011976:	2201      	movs	r2, #1
 8011978:	1089      	asrs	r1, r1, #2
 801197a:	408a      	lsls	r2, r1
 801197c:	4661      	mov	r1, ip
 801197e:	430a      	orrs	r2, r1
 8011980:	6042      	str	r2, [r0, #4]
 8011982:	60e7      	str	r7, [r4, #12]
 8011984:	60a6      	str	r6, [r4, #8]
 8011986:	60bc      	str	r4, [r7, #8]
 8011988:	60f4      	str	r4, [r6, #12]
 801198a:	e76e      	b.n	801186a <_malloc_r+0x14e>
 801198c:	2e14      	cmp	r6, #20
 801198e:	d802      	bhi.n	8011996 <_malloc_r+0x27a>
 8011990:	0031      	movs	r1, r6
 8011992:	315b      	adds	r1, #91	; 0x5b
 8011994:	e7ea      	b.n	801196c <_malloc_r+0x250>
 8011996:	2e54      	cmp	r6, #84	; 0x54
 8011998:	d802      	bhi.n	80119a0 <_malloc_r+0x284>
 801199a:	0b11      	lsrs	r1, r2, #12
 801199c:	316e      	adds	r1, #110	; 0x6e
 801199e:	e7e5      	b.n	801196c <_malloc_r+0x250>
 80119a0:	21aa      	movs	r1, #170	; 0xaa
 80119a2:	0049      	lsls	r1, r1, #1
 80119a4:	428e      	cmp	r6, r1
 80119a6:	d802      	bhi.n	80119ae <_malloc_r+0x292>
 80119a8:	0bd1      	lsrs	r1, r2, #15
 80119aa:	3177      	adds	r1, #119	; 0x77
 80119ac:	e7de      	b.n	801196c <_malloc_r+0x250>
 80119ae:	4f26      	ldr	r7, [pc, #152]	; (8011a48 <_malloc_r+0x32c>)
 80119b0:	217e      	movs	r1, #126	; 0x7e
 80119b2:	42be      	cmp	r6, r7
 80119b4:	d8da      	bhi.n	801196c <_malloc_r+0x250>
 80119b6:	0c91      	lsrs	r1, r2, #18
 80119b8:	317c      	adds	r1, #124	; 0x7c
 80119ba:	e7d7      	b.n	801196c <_malloc_r+0x250>
 80119bc:	68b6      	ldr	r6, [r6, #8]
 80119be:	42b7      	cmp	r7, r6
 80119c0:	d004      	beq.n	80119cc <_malloc_r+0x2b0>
 80119c2:	2003      	movs	r0, #3
 80119c4:	6871      	ldr	r1, [r6, #4]
 80119c6:	4381      	bics	r1, r0
 80119c8:	4291      	cmp	r1, r2
 80119ca:	d8f7      	bhi.n	80119bc <_malloc_r+0x2a0>
 80119cc:	68f7      	ldr	r7, [r6, #12]
 80119ce:	e7d8      	b.n	8011982 <_malloc_r+0x266>
 80119d0:	2703      	movs	r7, #3
 80119d2:	6866      	ldr	r6, [r4, #4]
 80119d4:	43be      	bics	r6, r7
 80119d6:	9603      	str	r6, [sp, #12]
 80119d8:	1b77      	subs	r7, r6, r5
 80119da:	68e6      	ldr	r6, [r4, #12]
 80119dc:	2f0f      	cmp	r7, #15
 80119de:	dd10      	ble.n	8011a02 <_malloc_r+0x2e6>
 80119e0:	2201      	movs	r2, #1
 80119e2:	68a1      	ldr	r1, [r4, #8]
 80119e4:	1963      	adds	r3, r4, r5
 80119e6:	4315      	orrs	r5, r2
 80119e8:	6065      	str	r5, [r4, #4]
 80119ea:	60ce      	str	r6, [r1, #12]
 80119ec:	60b1      	str	r1, [r6, #8]
 80119ee:	6143      	str	r3, [r0, #20]
 80119f0:	6103      	str	r3, [r0, #16]
 80119f2:	4814      	ldr	r0, [pc, #80]	; (8011a44 <_malloc_r+0x328>)
 80119f4:	433a      	orrs	r2, r7
 80119f6:	60d8      	str	r0, [r3, #12]
 80119f8:	6098      	str	r0, [r3, #8]
 80119fa:	605a      	str	r2, [r3, #4]
 80119fc:	9b03      	ldr	r3, [sp, #12]
 80119fe:	50e7      	str	r7, [r4, r3]
 8011a00:	e6ee      	b.n	80117e0 <_malloc_r+0xc4>
 8011a02:	2f00      	cmp	r7, #0
 8011a04:	db09      	blt.n	8011a1a <_malloc_r+0x2fe>
 8011a06:	9b03      	ldr	r3, [sp, #12]
 8011a08:	18e1      	adds	r1, r4, r3
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	684a      	ldr	r2, [r1, #4]
 8011a0e:	4313      	orrs	r3, r2
 8011a10:	604b      	str	r3, [r1, #4]
 8011a12:	68a3      	ldr	r3, [r4, #8]
 8011a14:	60de      	str	r6, [r3, #12]
 8011a16:	60b3      	str	r3, [r6, #8]
 8011a18:	e6e2      	b.n	80117e0 <_malloc_r+0xc4>
 8011a1a:	0034      	movs	r4, r6
 8011a1c:	e739      	b.n	8011892 <_malloc_r+0x176>
 8011a1e:	2108      	movs	r1, #8
 8011a20:	4249      	negs	r1, r1
 8011a22:	448c      	add	ip, r1
 8011a24:	4661      	mov	r1, ip
 8011a26:	6889      	ldr	r1, [r1, #8]
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	4561      	cmp	r1, ip
 8011a2c:	d100      	bne.n	8011a30 <_malloc_r+0x314>
 8011a2e:	e73a      	b.n	80118a6 <_malloc_r+0x18a>
 8011a30:	e740      	b.n	80118b4 <_malloc_r+0x198>
 8011a32:	3304      	adds	r3, #4
 8011a34:	0052      	lsls	r2, r2, #1
 8011a36:	420a      	tst	r2, r1
 8011a38:	d0fb      	beq.n	8011a32 <_malloc_r+0x316>
 8011a3a:	e725      	b.n	8011888 <_malloc_r+0x16c>
 8011a3c:	9b02      	ldr	r3, [sp, #8]
 8011a3e:	e7fa      	b.n	8011a36 <_malloc_r+0x31a>
 8011a40:	20000530 	.word	0x20000530
 8011a44:	20000538 	.word	0x20000538
 8011a48:	00000554 	.word	0x00000554
 8011a4c:	2000657c 	.word	0x2000657c
 8011a50:	20000938 	.word	0x20000938
 8011a54:	2000654c 	.word	0x2000654c
 8011a58:	20006574 	.word	0x20006574
 8011a5c:	20006578 	.word	0x20006578
 8011a60:	4935      	ldr	r1, [pc, #212]	; (8011b38 <_malloc_r+0x41c>)
 8011a62:	6808      	ldr	r0, [r1, #0]
 8011a64:	3001      	adds	r0, #1
 8011a66:	d140      	bne.n	8011aea <_malloc_r+0x3ce>
 8011a68:	600c      	str	r4, [r1, #0]
 8011a6a:	2207      	movs	r2, #7
 8011a6c:	0021      	movs	r1, r4
 8011a6e:	4011      	ands	r1, r2
 8011a70:	2000      	movs	r0, #0
 8011a72:	9103      	str	r1, [sp, #12]
 8011a74:	4214      	tst	r4, r2
 8011a76:	d002      	beq.n	8011a7e <_malloc_r+0x362>
 8011a78:	3008      	adds	r0, #8
 8011a7a:	1a40      	subs	r0, r0, r1
 8011a7c:	1824      	adds	r4, r4, r0
 8011a7e:	19e2      	adds	r2, r4, r7
 8011a80:	9205      	str	r2, [sp, #20]
 8011a82:	9f05      	ldr	r7, [sp, #20]
 8011a84:	9a04      	ldr	r2, [sp, #16]
 8011a86:	401f      	ands	r7, r3
 8011a88:	1810      	adds	r0, r2, r0
 8011a8a:	1bc7      	subs	r7, r0, r7
 8011a8c:	401f      	ands	r7, r3
 8011a8e:	0039      	movs	r1, r7
 8011a90:	9801      	ldr	r0, [sp, #4]
 8011a92:	f000 fa51 	bl	8011f38 <_sbrk_r>
 8011a96:	1c43      	adds	r3, r0, #1
 8011a98:	d107      	bne.n	8011aaa <_malloc_r+0x38e>
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d02a      	beq.n	8011af6 <_malloc_r+0x3da>
 8011aa0:	0018      	movs	r0, r3
 8011aa2:	2700      	movs	r7, #0
 8011aa4:	9b05      	ldr	r3, [sp, #20]
 8011aa6:	3808      	subs	r0, #8
 8011aa8:	1818      	adds	r0, r3, r0
 8011aaa:	4a24      	ldr	r2, [pc, #144]	; (8011b3c <_malloc_r+0x420>)
 8011aac:	1b00      	subs	r0, r0, r4
 8011aae:	6813      	ldr	r3, [r2, #0]
 8011ab0:	19db      	adds	r3, r3, r7
 8011ab2:	6013      	str	r3, [r2, #0]
 8011ab4:	2201      	movs	r2, #1
 8011ab6:	4b22      	ldr	r3, [pc, #136]	; (8011b40 <_malloc_r+0x424>)
 8011ab8:	19c7      	adds	r7, r0, r7
 8011aba:	4317      	orrs	r7, r2
 8011abc:	609c      	str	r4, [r3, #8]
 8011abe:	6067      	str	r7, [r4, #4]
 8011ac0:	429e      	cmp	r6, r3
 8011ac2:	d100      	bne.n	8011ac6 <_malloc_r+0x3aa>
 8011ac4:	e73f      	b.n	8011946 <_malloc_r+0x22a>
 8011ac6:	9b02      	ldr	r3, [sp, #8]
 8011ac8:	2b0f      	cmp	r3, #15
 8011aca:	d817      	bhi.n	8011afc <_malloc_r+0x3e0>
 8011acc:	6062      	str	r2, [r4, #4]
 8011ace:	2203      	movs	r2, #3
 8011ad0:	4b1b      	ldr	r3, [pc, #108]	; (8011b40 <_malloc_r+0x424>)
 8011ad2:	689b      	ldr	r3, [r3, #8]
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	4393      	bics	r3, r2
 8011ad8:	1b59      	subs	r1, r3, r5
 8011ada:	42ab      	cmp	r3, r5
 8011adc:	d301      	bcc.n	8011ae2 <_malloc_r+0x3c6>
 8011ade:	290f      	cmp	r1, #15
 8011ae0:	dc21      	bgt.n	8011b26 <_malloc_r+0x40a>
 8011ae2:	9801      	ldr	r0, [sp, #4]
 8011ae4:	f000 f856 	bl	8011b94 <__malloc_unlock>
 8011ae8:	e625      	b.n	8011736 <_malloc_r+0x1a>
 8011aea:	9903      	ldr	r1, [sp, #12]
 8011aec:	1a61      	subs	r1, r4, r1
 8011aee:	1889      	adds	r1, r1, r2
 8011af0:	4a12      	ldr	r2, [pc, #72]	; (8011b3c <_malloc_r+0x420>)
 8011af2:	6011      	str	r1, [r2, #0]
 8011af4:	e7b9      	b.n	8011a6a <_malloc_r+0x34e>
 8011af6:	9805      	ldr	r0, [sp, #20]
 8011af8:	9f03      	ldr	r7, [sp, #12]
 8011afa:	e7d6      	b.n	8011aaa <_malloc_r+0x38e>
 8011afc:	2307      	movs	r3, #7
 8011afe:	9f02      	ldr	r7, [sp, #8]
 8011b00:	3f0c      	subs	r7, #12
 8011b02:	439f      	bics	r7, r3
 8011b04:	6873      	ldr	r3, [r6, #4]
 8011b06:	401a      	ands	r2, r3
 8011b08:	433a      	orrs	r2, r7
 8011b0a:	6072      	str	r2, [r6, #4]
 8011b0c:	2205      	movs	r2, #5
 8011b0e:	19f3      	adds	r3, r6, r7
 8011b10:	605a      	str	r2, [r3, #4]
 8011b12:	609a      	str	r2, [r3, #8]
 8011b14:	2f0f      	cmp	r7, #15
 8011b16:	d800      	bhi.n	8011b1a <_malloc_r+0x3fe>
 8011b18:	e715      	b.n	8011946 <_malloc_r+0x22a>
 8011b1a:	0031      	movs	r1, r6
 8011b1c:	9801      	ldr	r0, [sp, #4]
 8011b1e:	3108      	adds	r1, #8
 8011b20:	f003 fb26 	bl	8015170 <_free_r>
 8011b24:	e70f      	b.n	8011946 <_malloc_r+0x22a>
 8011b26:	2201      	movs	r2, #1
 8011b28:	0013      	movs	r3, r2
 8011b2a:	4805      	ldr	r0, [pc, #20]	; (8011b40 <_malloc_r+0x424>)
 8011b2c:	432b      	orrs	r3, r5
 8011b2e:	6884      	ldr	r4, [r0, #8]
 8011b30:	6063      	str	r3, [r4, #4]
 8011b32:	1963      	adds	r3, r4, r5
 8011b34:	6083      	str	r3, [r0, #8]
 8011b36:	e624      	b.n	8011782 <_malloc_r+0x66>
 8011b38:	20000938 	.word	0x20000938
 8011b3c:	2000654c 	.word	0x2000654c
 8011b40:	20000530 	.word	0x20000530

08011b44 <memcmp>:
 8011b44:	b530      	push	{r4, r5, lr}
 8011b46:	2400      	movs	r4, #0
 8011b48:	3901      	subs	r1, #1
 8011b4a:	42a2      	cmp	r2, r4
 8011b4c:	d101      	bne.n	8011b52 <memcmp+0xe>
 8011b4e:	2000      	movs	r0, #0
 8011b50:	e005      	b.n	8011b5e <memcmp+0x1a>
 8011b52:	5d03      	ldrb	r3, [r0, r4]
 8011b54:	3401      	adds	r4, #1
 8011b56:	5d0d      	ldrb	r5, [r1, r4]
 8011b58:	42ab      	cmp	r3, r5
 8011b5a:	d0f6      	beq.n	8011b4a <memcmp+0x6>
 8011b5c:	1b58      	subs	r0, r3, r5
 8011b5e:	bd30      	pop	{r4, r5, pc}

08011b60 <memcpy>:
 8011b60:	2300      	movs	r3, #0
 8011b62:	b510      	push	{r4, lr}
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d100      	bne.n	8011b6a <memcpy+0xa>
 8011b68:	bd10      	pop	{r4, pc}
 8011b6a:	5ccc      	ldrb	r4, [r1, r3]
 8011b6c:	54c4      	strb	r4, [r0, r3]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	e7f8      	b.n	8011b64 <memcpy+0x4>

08011b72 <memset>:
 8011b72:	0003      	movs	r3, r0
 8011b74:	1882      	adds	r2, r0, r2
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d100      	bne.n	8011b7c <memset+0xa>
 8011b7a:	4770      	bx	lr
 8011b7c:	7019      	strb	r1, [r3, #0]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	e7f9      	b.n	8011b76 <memset+0x4>
	...

08011b84 <__malloc_lock>:
 8011b84:	b510      	push	{r4, lr}
 8011b86:	4802      	ldr	r0, [pc, #8]	; (8011b90 <__malloc_lock+0xc>)
 8011b88:	f003 ff24 	bl	80159d4 <__retarget_lock_acquire_recursive>
 8011b8c:	bd10      	pop	{r4, pc}
 8011b8e:	46c0      	nop			; (mov r8, r8)
 8011b90:	20006a84 	.word	0x20006a84

08011b94 <__malloc_unlock>:
 8011b94:	b510      	push	{r4, lr}
 8011b96:	4802      	ldr	r0, [pc, #8]	; (8011ba0 <__malloc_unlock+0xc>)
 8011b98:	f003 ff1d 	bl	80159d6 <__retarget_lock_release_recursive>
 8011b9c:	bd10      	pop	{r4, pc}
 8011b9e:	46c0      	nop			; (mov r8, r8)
 8011ba0:	20006a84 	.word	0x20006a84

08011ba4 <rand>:
 8011ba4:	4b09      	ldr	r3, [pc, #36]	; (8011bcc <rand+0x28>)
 8011ba6:	b510      	push	{r4, lr}
 8011ba8:	681c      	ldr	r4, [r3, #0]
 8011baa:	4a09      	ldr	r2, [pc, #36]	; (8011bd0 <rand+0x2c>)
 8011bac:	34a8      	adds	r4, #168	; 0xa8
 8011bae:	6820      	ldr	r0, [r4, #0]
 8011bb0:	6861      	ldr	r1, [r4, #4]
 8011bb2:	4b08      	ldr	r3, [pc, #32]	; (8011bd4 <rand+0x30>)
 8011bb4:	f7ee fcda 	bl	800056c <__aeabi_lmul>
 8011bb8:	2201      	movs	r2, #1
 8011bba:	2300      	movs	r3, #0
 8011bbc:	1880      	adds	r0, r0, r2
 8011bbe:	4159      	adcs	r1, r3
 8011bc0:	6020      	str	r0, [r4, #0]
 8011bc2:	6061      	str	r1, [r4, #4]
 8011bc4:	0048      	lsls	r0, r1, #1
 8011bc6:	0840      	lsrs	r0, r0, #1
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	46c0      	nop			; (mov r8, r8)
 8011bcc:	20000100 	.word	0x20000100
 8011bd0:	4c957f2d 	.word	0x4c957f2d
 8011bd4:	5851f42d 	.word	0x5851f42d

08011bd8 <realloc>:
 8011bd8:	b510      	push	{r4, lr}
 8011bda:	4b03      	ldr	r3, [pc, #12]	; (8011be8 <realloc+0x10>)
 8011bdc:	000a      	movs	r2, r1
 8011bde:	0001      	movs	r1, r0
 8011be0:	6818      	ldr	r0, [r3, #0]
 8011be2:	f000 f803 	bl	8011bec <_realloc_r>
 8011be6:	bd10      	pop	{r4, pc}
 8011be8:	20000100 	.word	0x20000100

08011bec <_realloc_r>:
 8011bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bee:	b087      	sub	sp, #28
 8011bf0:	1e0c      	subs	r4, r1, #0
 8011bf2:	9002      	str	r0, [sp, #8]
 8011bf4:	9205      	str	r2, [sp, #20]
 8011bf6:	d106      	bne.n	8011c06 <_realloc_r+0x1a>
 8011bf8:	0011      	movs	r1, r2
 8011bfa:	f7ff fd8f 	bl	801171c <_malloc_r>
 8011bfe:	0007      	movs	r7, r0
 8011c00:	0038      	movs	r0, r7
 8011c02:	b007      	add	sp, #28
 8011c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c06:	9802      	ldr	r0, [sp, #8]
 8011c08:	f7ff ffbc 	bl	8011b84 <__malloc_lock>
 8011c0c:	9e05      	ldr	r6, [sp, #20]
 8011c0e:	360b      	adds	r6, #11
 8011c10:	2e16      	cmp	r6, #22
 8011c12:	d908      	bls.n	8011c26 <_realloc_r+0x3a>
 8011c14:	2307      	movs	r3, #7
 8011c16:	439e      	bics	r6, r3
 8011c18:	9601      	str	r6, [sp, #4]
 8011c1a:	d506      	bpl.n	8011c2a <_realloc_r+0x3e>
 8011c1c:	230c      	movs	r3, #12
 8011c1e:	9a02      	ldr	r2, [sp, #8]
 8011c20:	2700      	movs	r7, #0
 8011c22:	6013      	str	r3, [r2, #0]
 8011c24:	e7ec      	b.n	8011c00 <_realloc_r+0x14>
 8011c26:	2310      	movs	r3, #16
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	9b01      	ldr	r3, [sp, #4]
 8011c2c:	9a05      	ldr	r2, [sp, #20]
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d3f4      	bcc.n	8011c1c <_realloc_r+0x30>
 8011c32:	0023      	movs	r3, r4
 8011c34:	3b08      	subs	r3, #8
 8011c36:	685f      	ldr	r7, [r3, #4]
 8011c38:	9304      	str	r3, [sp, #16]
 8011c3a:	003a      	movs	r2, r7
 8011c3c:	2303      	movs	r3, #3
 8011c3e:	439a      	bics	r2, r3
 8011c40:	9b01      	ldr	r3, [sp, #4]
 8011c42:	9203      	str	r2, [sp, #12]
 8011c44:	4293      	cmp	r3, r2
 8011c46:	dc00      	bgt.n	8011c4a <_realloc_r+0x5e>
 8011c48:	e16b      	b.n	8011f22 <_realloc_r+0x336>
 8011c4a:	9b04      	ldr	r3, [sp, #16]
 8011c4c:	48b9      	ldr	r0, [pc, #740]	; (8011f34 <_realloc_r+0x348>)
 8011c4e:	189b      	adds	r3, r3, r2
 8011c50:	6882      	ldr	r2, [r0, #8]
 8011c52:	4694      	mov	ip, r2
 8011c54:	685a      	ldr	r2, [r3, #4]
 8011c56:	459c      	cmp	ip, r3
 8011c58:	d006      	beq.n	8011c68 <_realloc_r+0x7c>
 8011c5a:	2501      	movs	r5, #1
 8011c5c:	0011      	movs	r1, r2
 8011c5e:	43a9      	bics	r1, r5
 8011c60:	1859      	adds	r1, r3, r1
 8011c62:	6849      	ldr	r1, [r1, #4]
 8011c64:	4229      	tst	r1, r5
 8011c66:	d126      	bne.n	8011cb6 <_realloc_r+0xca>
 8011c68:	2103      	movs	r1, #3
 8011c6a:	438a      	bics	r2, r1
 8011c6c:	9903      	ldr	r1, [sp, #12]
 8011c6e:	188e      	adds	r6, r1, r2
 8011c70:	9901      	ldr	r1, [sp, #4]
 8011c72:	459c      	cmp	ip, r3
 8011c74:	d117      	bne.n	8011ca6 <_realloc_r+0xba>
 8011c76:	3110      	adds	r1, #16
 8011c78:	42b1      	cmp	r1, r6
 8011c7a:	dc1e      	bgt.n	8011cba <_realloc_r+0xce>
 8011c7c:	9901      	ldr	r1, [sp, #4]
 8011c7e:	9b04      	ldr	r3, [sp, #16]
 8011c80:	468c      	mov	ip, r1
 8011c82:	4463      	add	r3, ip
 8011c84:	6083      	str	r3, [r0, #8]
 8011c86:	001a      	movs	r2, r3
 8011c88:	1a73      	subs	r3, r6, r1
 8011c8a:	2601      	movs	r6, #1
 8011c8c:	4333      	orrs	r3, r6
 8011c8e:	6053      	str	r3, [r2, #4]
 8011c90:	0023      	movs	r3, r4
 8011c92:	3b08      	subs	r3, #8
 8011c94:	685a      	ldr	r2, [r3, #4]
 8011c96:	9802      	ldr	r0, [sp, #8]
 8011c98:	4016      	ands	r6, r2
 8011c9a:	430e      	orrs	r6, r1
 8011c9c:	605e      	str	r6, [r3, #4]
 8011c9e:	f7ff ff79 	bl	8011b94 <__malloc_unlock>
 8011ca2:	0027      	movs	r7, r4
 8011ca4:	e7ac      	b.n	8011c00 <_realloc_r+0x14>
 8011ca6:	42b1      	cmp	r1, r6
 8011ca8:	dc07      	bgt.n	8011cba <_realloc_r+0xce>
 8011caa:	68da      	ldr	r2, [r3, #12]
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	60da      	str	r2, [r3, #12]
 8011cb0:	6093      	str	r3, [r2, #8]
 8011cb2:	9d04      	ldr	r5, [sp, #16]
 8011cb4:	e07f      	b.n	8011db6 <_realloc_r+0x1ca>
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	0013      	movs	r3, r2
 8011cba:	07f9      	lsls	r1, r7, #31
 8011cbc:	d500      	bpl.n	8011cc0 <_realloc_r+0xd4>
 8011cbe:	e0e2      	b.n	8011e86 <_realloc_r+0x29a>
 8011cc0:	0021      	movs	r1, r4
 8011cc2:	3908      	subs	r1, #8
 8011cc4:	680d      	ldr	r5, [r1, #0]
 8011cc6:	9904      	ldr	r1, [sp, #16]
 8011cc8:	1b4d      	subs	r5, r1, r5
 8011cca:	2103      	movs	r1, #3
 8011ccc:	686f      	ldr	r7, [r5, #4]
 8011cce:	438f      	bics	r7, r1
 8011cd0:	9903      	ldr	r1, [sp, #12]
 8011cd2:	187f      	adds	r7, r7, r1
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d100      	bne.n	8011cda <_realloc_r+0xee>
 8011cd8:	e0a0      	b.n	8011e1c <_realloc_r+0x230>
 8011cda:	19d6      	adds	r6, r2, r7
 8011cdc:	459c      	cmp	ip, r3
 8011cde:	d149      	bne.n	8011d74 <_realloc_r+0x188>
 8011ce0:	9b01      	ldr	r3, [sp, #4]
 8011ce2:	3310      	adds	r3, #16
 8011ce4:	42b3      	cmp	r3, r6
 8011ce6:	dd00      	ble.n	8011cea <_realloc_r+0xfe>
 8011ce8:	e098      	b.n	8011e1c <_realloc_r+0x230>
 8011cea:	68aa      	ldr	r2, [r5, #8]
 8011cec:	68eb      	ldr	r3, [r5, #12]
 8011cee:	002f      	movs	r7, r5
 8011cf0:	60d3      	str	r3, [r2, #12]
 8011cf2:	609a      	str	r2, [r3, #8]
 8011cf4:	000a      	movs	r2, r1
 8011cf6:	3a04      	subs	r2, #4
 8011cf8:	3708      	adds	r7, #8
 8011cfa:	2a24      	cmp	r2, #36	; 0x24
 8011cfc:	d835      	bhi.n	8011d6a <_realloc_r+0x17e>
 8011cfe:	003b      	movs	r3, r7
 8011d00:	2a13      	cmp	r2, #19
 8011d02:	d908      	bls.n	8011d16 <_realloc_r+0x12a>
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	60ab      	str	r3, [r5, #8]
 8011d08:	6863      	ldr	r3, [r4, #4]
 8011d0a:	60eb      	str	r3, [r5, #12]
 8011d0c:	2a1b      	cmp	r2, #27
 8011d0e:	d81a      	bhi.n	8011d46 <_realloc_r+0x15a>
 8011d10:	002b      	movs	r3, r5
 8011d12:	3408      	adds	r4, #8
 8011d14:	3310      	adds	r3, #16
 8011d16:	6822      	ldr	r2, [r4, #0]
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	6862      	ldr	r2, [r4, #4]
 8011d1c:	605a      	str	r2, [r3, #4]
 8011d1e:	68a2      	ldr	r2, [r4, #8]
 8011d20:	609a      	str	r2, [r3, #8]
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	18ea      	adds	r2, r5, r3
 8011d26:	4b83      	ldr	r3, [pc, #524]	; (8011f34 <_realloc_r+0x348>)
 8011d28:	609a      	str	r2, [r3, #8]
 8011d2a:	9b01      	ldr	r3, [sp, #4]
 8011d2c:	1af3      	subs	r3, r6, r3
 8011d2e:	2601      	movs	r6, #1
 8011d30:	4333      	orrs	r3, r6
 8011d32:	6053      	str	r3, [r2, #4]
 8011d34:	686b      	ldr	r3, [r5, #4]
 8011d36:	401e      	ands	r6, r3
 8011d38:	9b01      	ldr	r3, [sp, #4]
 8011d3a:	431e      	orrs	r6, r3
 8011d3c:	606e      	str	r6, [r5, #4]
 8011d3e:	9802      	ldr	r0, [sp, #8]
 8011d40:	f7ff ff28 	bl	8011b94 <__malloc_unlock>
 8011d44:	e75c      	b.n	8011c00 <_realloc_r+0x14>
 8011d46:	68a3      	ldr	r3, [r4, #8]
 8011d48:	612b      	str	r3, [r5, #16]
 8011d4a:	68e3      	ldr	r3, [r4, #12]
 8011d4c:	616b      	str	r3, [r5, #20]
 8011d4e:	2a24      	cmp	r2, #36	; 0x24
 8011d50:	d003      	beq.n	8011d5a <_realloc_r+0x16e>
 8011d52:	002b      	movs	r3, r5
 8011d54:	3410      	adds	r4, #16
 8011d56:	3318      	adds	r3, #24
 8011d58:	e7dd      	b.n	8011d16 <_realloc_r+0x12a>
 8011d5a:	6923      	ldr	r3, [r4, #16]
 8011d5c:	61ab      	str	r3, [r5, #24]
 8011d5e:	002b      	movs	r3, r5
 8011d60:	6962      	ldr	r2, [r4, #20]
 8011d62:	3320      	adds	r3, #32
 8011d64:	61ea      	str	r2, [r5, #28]
 8011d66:	3418      	adds	r4, #24
 8011d68:	e7d5      	b.n	8011d16 <_realloc_r+0x12a>
 8011d6a:	0021      	movs	r1, r4
 8011d6c:	0038      	movs	r0, r7
 8011d6e:	f003 fe50 	bl	8015a12 <memmove>
 8011d72:	e7d6      	b.n	8011d22 <_realloc_r+0x136>
 8011d74:	9a01      	ldr	r2, [sp, #4]
 8011d76:	42b2      	cmp	r2, r6
 8011d78:	dc50      	bgt.n	8011e1c <_realloc_r+0x230>
 8011d7a:	0028      	movs	r0, r5
 8011d7c:	68da      	ldr	r2, [r3, #12]
 8011d7e:	689b      	ldr	r3, [r3, #8]
 8011d80:	3008      	adds	r0, #8
 8011d82:	60da      	str	r2, [r3, #12]
 8011d84:	6093      	str	r3, [r2, #8]
 8011d86:	68aa      	ldr	r2, [r5, #8]
 8011d88:	68eb      	ldr	r3, [r5, #12]
 8011d8a:	60d3      	str	r3, [r2, #12]
 8011d8c:	609a      	str	r2, [r3, #8]
 8011d8e:	9a03      	ldr	r2, [sp, #12]
 8011d90:	3a04      	subs	r2, #4
 8011d92:	2a24      	cmp	r2, #36	; 0x24
 8011d94:	d83e      	bhi.n	8011e14 <_realloc_r+0x228>
 8011d96:	2a13      	cmp	r2, #19
 8011d98:	d907      	bls.n	8011daa <_realloc_r+0x1be>
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	60ab      	str	r3, [r5, #8]
 8011d9e:	6863      	ldr	r3, [r4, #4]
 8011da0:	60eb      	str	r3, [r5, #12]
 8011da2:	2a1b      	cmp	r2, #27
 8011da4:	d824      	bhi.n	8011df0 <_realloc_r+0x204>
 8011da6:	3408      	adds	r4, #8
 8011da8:	3008      	adds	r0, #8
 8011daa:	6823      	ldr	r3, [r4, #0]
 8011dac:	6003      	str	r3, [r0, #0]
 8011dae:	6863      	ldr	r3, [r4, #4]
 8011db0:	6043      	str	r3, [r0, #4]
 8011db2:	68a3      	ldr	r3, [r4, #8]
 8011db4:	6083      	str	r3, [r0, #8]
 8011db6:	9b01      	ldr	r3, [sp, #4]
 8011db8:	6868      	ldr	r0, [r5, #4]
 8011dba:	1af4      	subs	r4, r6, r3
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	19aa      	adds	r2, r5, r6
 8011dc0:	4018      	ands	r0, r3
 8011dc2:	2c0f      	cmp	r4, #15
 8011dc4:	d800      	bhi.n	8011dc8 <_realloc_r+0x1dc>
 8011dc6:	e0ae      	b.n	8011f26 <_realloc_r+0x33a>
 8011dc8:	9901      	ldr	r1, [sp, #4]
 8011dca:	9e01      	ldr	r6, [sp, #4]
 8011dcc:	1869      	adds	r1, r5, r1
 8011dce:	4330      	orrs	r0, r6
 8011dd0:	431c      	orrs	r4, r3
 8011dd2:	6068      	str	r0, [r5, #4]
 8011dd4:	604c      	str	r4, [r1, #4]
 8011dd6:	6850      	ldr	r0, [r2, #4]
 8011dd8:	3108      	adds	r1, #8
 8011dda:	4303      	orrs	r3, r0
 8011ddc:	6053      	str	r3, [r2, #4]
 8011dde:	9802      	ldr	r0, [sp, #8]
 8011de0:	f003 f9c6 	bl	8015170 <_free_r>
 8011de4:	9802      	ldr	r0, [sp, #8]
 8011de6:	3508      	adds	r5, #8
 8011de8:	f7ff fed4 	bl	8011b94 <__malloc_unlock>
 8011dec:	002f      	movs	r7, r5
 8011dee:	e707      	b.n	8011c00 <_realloc_r+0x14>
 8011df0:	68a3      	ldr	r3, [r4, #8]
 8011df2:	612b      	str	r3, [r5, #16]
 8011df4:	68e3      	ldr	r3, [r4, #12]
 8011df6:	616b      	str	r3, [r5, #20]
 8011df8:	2a24      	cmp	r2, #36	; 0x24
 8011dfa:	d003      	beq.n	8011e04 <_realloc_r+0x218>
 8011dfc:	0028      	movs	r0, r5
 8011dfe:	3410      	adds	r4, #16
 8011e00:	3018      	adds	r0, #24
 8011e02:	e7d2      	b.n	8011daa <_realloc_r+0x1be>
 8011e04:	0028      	movs	r0, r5
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	3020      	adds	r0, #32
 8011e0a:	61ab      	str	r3, [r5, #24]
 8011e0c:	6963      	ldr	r3, [r4, #20]
 8011e0e:	3418      	adds	r4, #24
 8011e10:	61eb      	str	r3, [r5, #28]
 8011e12:	e7ca      	b.n	8011daa <_realloc_r+0x1be>
 8011e14:	0021      	movs	r1, r4
 8011e16:	f003 fdfc 	bl	8015a12 <memmove>
 8011e1a:	e7cc      	b.n	8011db6 <_realloc_r+0x1ca>
 8011e1c:	9b01      	ldr	r3, [sp, #4]
 8011e1e:	42bb      	cmp	r3, r7
 8011e20:	dc31      	bgt.n	8011e86 <_realloc_r+0x29a>
 8011e22:	0028      	movs	r0, r5
 8011e24:	68aa      	ldr	r2, [r5, #8]
 8011e26:	68eb      	ldr	r3, [r5, #12]
 8011e28:	3008      	adds	r0, #8
 8011e2a:	60d3      	str	r3, [r2, #12]
 8011e2c:	609a      	str	r2, [r3, #8]
 8011e2e:	9a03      	ldr	r2, [sp, #12]
 8011e30:	3a04      	subs	r2, #4
 8011e32:	2a24      	cmp	r2, #36	; 0x24
 8011e34:	d823      	bhi.n	8011e7e <_realloc_r+0x292>
 8011e36:	2a13      	cmp	r2, #19
 8011e38:	d907      	bls.n	8011e4a <_realloc_r+0x25e>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	60ab      	str	r3, [r5, #8]
 8011e3e:	6863      	ldr	r3, [r4, #4]
 8011e40:	60eb      	str	r3, [r5, #12]
 8011e42:	2a1b      	cmp	r2, #27
 8011e44:	d809      	bhi.n	8011e5a <_realloc_r+0x26e>
 8011e46:	3408      	adds	r4, #8
 8011e48:	3008      	adds	r0, #8
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	6003      	str	r3, [r0, #0]
 8011e4e:	6863      	ldr	r3, [r4, #4]
 8011e50:	6043      	str	r3, [r0, #4]
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	6083      	str	r3, [r0, #8]
 8011e56:	003e      	movs	r6, r7
 8011e58:	e7ad      	b.n	8011db6 <_realloc_r+0x1ca>
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	612b      	str	r3, [r5, #16]
 8011e5e:	68e3      	ldr	r3, [r4, #12]
 8011e60:	616b      	str	r3, [r5, #20]
 8011e62:	2a24      	cmp	r2, #36	; 0x24
 8011e64:	d003      	beq.n	8011e6e <_realloc_r+0x282>
 8011e66:	0028      	movs	r0, r5
 8011e68:	3410      	adds	r4, #16
 8011e6a:	3018      	adds	r0, #24
 8011e6c:	e7ed      	b.n	8011e4a <_realloc_r+0x25e>
 8011e6e:	0028      	movs	r0, r5
 8011e70:	6923      	ldr	r3, [r4, #16]
 8011e72:	3020      	adds	r0, #32
 8011e74:	61ab      	str	r3, [r5, #24]
 8011e76:	6963      	ldr	r3, [r4, #20]
 8011e78:	3418      	adds	r4, #24
 8011e7a:	61eb      	str	r3, [r5, #28]
 8011e7c:	e7e5      	b.n	8011e4a <_realloc_r+0x25e>
 8011e7e:	0021      	movs	r1, r4
 8011e80:	f003 fdc7 	bl	8015a12 <memmove>
 8011e84:	e7e7      	b.n	8011e56 <_realloc_r+0x26a>
 8011e86:	9905      	ldr	r1, [sp, #20]
 8011e88:	9802      	ldr	r0, [sp, #8]
 8011e8a:	f7ff fc47 	bl	801171c <_malloc_r>
 8011e8e:	1e07      	subs	r7, r0, #0
 8011e90:	d100      	bne.n	8011e94 <_realloc_r+0x2a8>
 8011e92:	e754      	b.n	8011d3e <_realloc_r+0x152>
 8011e94:	0023      	movs	r3, r4
 8011e96:	2201      	movs	r2, #1
 8011e98:	3b08      	subs	r3, #8
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	4393      	bics	r3, r2
 8011e9e:	9a04      	ldr	r2, [sp, #16]
 8011ea0:	18d3      	adds	r3, r2, r3
 8011ea2:	0002      	movs	r2, r0
 8011ea4:	3a08      	subs	r2, #8
 8011ea6:	4293      	cmp	r3, r2
 8011ea8:	d105      	bne.n	8011eb6 <_realloc_r+0x2ca>
 8011eaa:	685e      	ldr	r6, [r3, #4]
 8011eac:	2303      	movs	r3, #3
 8011eae:	439e      	bics	r6, r3
 8011eb0:	9b03      	ldr	r3, [sp, #12]
 8011eb2:	18f6      	adds	r6, r6, r3
 8011eb4:	e6fd      	b.n	8011cb2 <_realloc_r+0xc6>
 8011eb6:	9a03      	ldr	r2, [sp, #12]
 8011eb8:	3a04      	subs	r2, #4
 8011eba:	2a24      	cmp	r2, #36	; 0x24
 8011ebc:	d82d      	bhi.n	8011f1a <_realloc_r+0x32e>
 8011ebe:	2a13      	cmp	r2, #19
 8011ec0:	d928      	bls.n	8011f14 <_realloc_r+0x328>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	6003      	str	r3, [r0, #0]
 8011ec6:	6863      	ldr	r3, [r4, #4]
 8011ec8:	6043      	str	r3, [r0, #4]
 8011eca:	2a1b      	cmp	r2, #27
 8011ecc:	d80e      	bhi.n	8011eec <_realloc_r+0x300>
 8011ece:	0022      	movs	r2, r4
 8011ed0:	0003      	movs	r3, r0
 8011ed2:	3208      	adds	r2, #8
 8011ed4:	3308      	adds	r3, #8
 8011ed6:	6811      	ldr	r1, [r2, #0]
 8011ed8:	6019      	str	r1, [r3, #0]
 8011eda:	6851      	ldr	r1, [r2, #4]
 8011edc:	6059      	str	r1, [r3, #4]
 8011ede:	6892      	ldr	r2, [r2, #8]
 8011ee0:	609a      	str	r2, [r3, #8]
 8011ee2:	0021      	movs	r1, r4
 8011ee4:	9802      	ldr	r0, [sp, #8]
 8011ee6:	f003 f943 	bl	8015170 <_free_r>
 8011eea:	e728      	b.n	8011d3e <_realloc_r+0x152>
 8011eec:	68a3      	ldr	r3, [r4, #8]
 8011eee:	6083      	str	r3, [r0, #8]
 8011ef0:	68e3      	ldr	r3, [r4, #12]
 8011ef2:	60c3      	str	r3, [r0, #12]
 8011ef4:	2a24      	cmp	r2, #36	; 0x24
 8011ef6:	d004      	beq.n	8011f02 <_realloc_r+0x316>
 8011ef8:	0022      	movs	r2, r4
 8011efa:	0003      	movs	r3, r0
 8011efc:	3210      	adds	r2, #16
 8011efe:	3310      	adds	r3, #16
 8011f00:	e7e9      	b.n	8011ed6 <_realloc_r+0x2ea>
 8011f02:	6923      	ldr	r3, [r4, #16]
 8011f04:	0022      	movs	r2, r4
 8011f06:	6103      	str	r3, [r0, #16]
 8011f08:	0003      	movs	r3, r0
 8011f0a:	6961      	ldr	r1, [r4, #20]
 8011f0c:	3218      	adds	r2, #24
 8011f0e:	3318      	adds	r3, #24
 8011f10:	6141      	str	r1, [r0, #20]
 8011f12:	e7e0      	b.n	8011ed6 <_realloc_r+0x2ea>
 8011f14:	0003      	movs	r3, r0
 8011f16:	0022      	movs	r2, r4
 8011f18:	e7dd      	b.n	8011ed6 <_realloc_r+0x2ea>
 8011f1a:	0021      	movs	r1, r4
 8011f1c:	f003 fd79 	bl	8015a12 <memmove>
 8011f20:	e7df      	b.n	8011ee2 <_realloc_r+0x2f6>
 8011f22:	9e03      	ldr	r6, [sp, #12]
 8011f24:	e6c5      	b.n	8011cb2 <_realloc_r+0xc6>
 8011f26:	4306      	orrs	r6, r0
 8011f28:	606e      	str	r6, [r5, #4]
 8011f2a:	6851      	ldr	r1, [r2, #4]
 8011f2c:	430b      	orrs	r3, r1
 8011f2e:	6053      	str	r3, [r2, #4]
 8011f30:	e758      	b.n	8011de4 <_realloc_r+0x1f8>
 8011f32:	46c0      	nop			; (mov r8, r8)
 8011f34:	20000530 	.word	0x20000530

08011f38 <_sbrk_r>:
 8011f38:	2300      	movs	r3, #0
 8011f3a:	b570      	push	{r4, r5, r6, lr}
 8011f3c:	4d06      	ldr	r5, [pc, #24]	; (8011f58 <_sbrk_r+0x20>)
 8011f3e:	0004      	movs	r4, r0
 8011f40:	0008      	movs	r0, r1
 8011f42:	602b      	str	r3, [r5, #0]
 8011f44:	f005 fede 	bl	8017d04 <_sbrk>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d103      	bne.n	8011f54 <_sbrk_r+0x1c>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d000      	beq.n	8011f54 <_sbrk_r+0x1c>
 8011f52:	6023      	str	r3, [r4, #0]
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	46c0      	nop			; (mov r8, r8)
 8011f58:	20006a8c 	.word	0x20006a8c

08011f5c <sprintf>:
 8011f5c:	b40e      	push	{r1, r2, r3}
 8011f5e:	b500      	push	{lr}
 8011f60:	490b      	ldr	r1, [pc, #44]	; (8011f90 <sprintf+0x34>)
 8011f62:	b09c      	sub	sp, #112	; 0x70
 8011f64:	ab1d      	add	r3, sp, #116	; 0x74
 8011f66:	9002      	str	r0, [sp, #8]
 8011f68:	9006      	str	r0, [sp, #24]
 8011f6a:	9107      	str	r1, [sp, #28]
 8011f6c:	9104      	str	r1, [sp, #16]
 8011f6e:	4809      	ldr	r0, [pc, #36]	; (8011f94 <sprintf+0x38>)
 8011f70:	4909      	ldr	r1, [pc, #36]	; (8011f98 <sprintf+0x3c>)
 8011f72:	cb04      	ldmia	r3!, {r2}
 8011f74:	9105      	str	r1, [sp, #20]
 8011f76:	6800      	ldr	r0, [r0, #0]
 8011f78:	a902      	add	r1, sp, #8
 8011f7a:	9301      	str	r3, [sp, #4]
 8011f7c:	f000 ff74 	bl	8012e68 <_svfprintf_r>
 8011f80:	2300      	movs	r3, #0
 8011f82:	9a02      	ldr	r2, [sp, #8]
 8011f84:	7013      	strb	r3, [r2, #0]
 8011f86:	b01c      	add	sp, #112	; 0x70
 8011f88:	bc08      	pop	{r3}
 8011f8a:	b003      	add	sp, #12
 8011f8c:	4718      	bx	r3
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	7fffffff 	.word	0x7fffffff
 8011f94:	20000100 	.word	0x20000100
 8011f98:	ffff0208 	.word	0xffff0208

08011f9c <strcat>:
 8011f9c:	0002      	movs	r2, r0
 8011f9e:	b510      	push	{r4, lr}
 8011fa0:	7813      	ldrb	r3, [r2, #0]
 8011fa2:	0014      	movs	r4, r2
 8011fa4:	3201      	adds	r2, #1
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1fa      	bne.n	8011fa0 <strcat+0x4>
 8011faa:	5cca      	ldrb	r2, [r1, r3]
 8011fac:	54e2      	strb	r2, [r4, r3]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	2a00      	cmp	r2, #0
 8011fb2:	d1fa      	bne.n	8011faa <strcat+0xe>
 8011fb4:	bd10      	pop	{r4, pc}

08011fb6 <strchr>:
 8011fb6:	b2c9      	uxtb	r1, r1
 8011fb8:	7803      	ldrb	r3, [r0, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d004      	beq.n	8011fc8 <strchr+0x12>
 8011fbe:	428b      	cmp	r3, r1
 8011fc0:	d100      	bne.n	8011fc4 <strchr+0xe>
 8011fc2:	4770      	bx	lr
 8011fc4:	3001      	adds	r0, #1
 8011fc6:	e7f7      	b.n	8011fb8 <strchr+0x2>
 8011fc8:	424b      	negs	r3, r1
 8011fca:	4159      	adcs	r1, r3
 8011fcc:	4249      	negs	r1, r1
 8011fce:	4008      	ands	r0, r1
 8011fd0:	e7f7      	b.n	8011fc2 <strchr+0xc>

08011fd2 <strcpy>:
 8011fd2:	0003      	movs	r3, r0
 8011fd4:	780a      	ldrb	r2, [r1, #0]
 8011fd6:	3101      	adds	r1, #1
 8011fd8:	701a      	strb	r2, [r3, #0]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	2a00      	cmp	r2, #0
 8011fde:	d1f9      	bne.n	8011fd4 <strcpy+0x2>
 8011fe0:	4770      	bx	lr

08011fe2 <strncmp>:
 8011fe2:	b530      	push	{r4, r5, lr}
 8011fe4:	0005      	movs	r5, r0
 8011fe6:	1e10      	subs	r0, r2, #0
 8011fe8:	d00b      	beq.n	8012002 <strncmp+0x20>
 8011fea:	2400      	movs	r4, #0
 8011fec:	3a01      	subs	r2, #1
 8011fee:	5d2b      	ldrb	r3, [r5, r4]
 8011ff0:	5d08      	ldrb	r0, [r1, r4]
 8011ff2:	4283      	cmp	r3, r0
 8011ff4:	d104      	bne.n	8012000 <strncmp+0x1e>
 8011ff6:	4294      	cmp	r4, r2
 8011ff8:	d002      	beq.n	8012000 <strncmp+0x1e>
 8011ffa:	3401      	adds	r4, #1
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1f6      	bne.n	8011fee <strncmp+0xc>
 8012000:	1a18      	subs	r0, r3, r0
 8012002:	bd30      	pop	{r4, r5, pc}

08012004 <strncpy>:
 8012004:	0003      	movs	r3, r0
 8012006:	b530      	push	{r4, r5, lr}
 8012008:	001d      	movs	r5, r3
 801200a:	2a00      	cmp	r2, #0
 801200c:	d006      	beq.n	801201c <strncpy+0x18>
 801200e:	780c      	ldrb	r4, [r1, #0]
 8012010:	3a01      	subs	r2, #1
 8012012:	3301      	adds	r3, #1
 8012014:	702c      	strb	r4, [r5, #0]
 8012016:	3101      	adds	r1, #1
 8012018:	2c00      	cmp	r4, #0
 801201a:	d1f5      	bne.n	8012008 <strncpy+0x4>
 801201c:	2100      	movs	r1, #0
 801201e:	189a      	adds	r2, r3, r2
 8012020:	4293      	cmp	r3, r2
 8012022:	d100      	bne.n	8012026 <strncpy+0x22>
 8012024:	bd30      	pop	{r4, r5, pc}
 8012026:	7019      	strb	r1, [r3, #0]
 8012028:	3301      	adds	r3, #1
 801202a:	e7f9      	b.n	8012020 <strncpy+0x1c>

0801202c <sulp>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	0016      	movs	r6, r2
 8012030:	000d      	movs	r5, r1
 8012032:	f004 f837 	bl	80160a4 <__ulp>
 8012036:	2e00      	cmp	r6, #0
 8012038:	d00d      	beq.n	8012056 <sulp+0x2a>
 801203a:	236b      	movs	r3, #107	; 0x6b
 801203c:	006a      	lsls	r2, r5, #1
 801203e:	0d52      	lsrs	r2, r2, #21
 8012040:	1a9b      	subs	r3, r3, r2
 8012042:	2b00      	cmp	r3, #0
 8012044:	dd07      	ble.n	8012056 <sulp+0x2a>
 8012046:	2400      	movs	r4, #0
 8012048:	4a03      	ldr	r2, [pc, #12]	; (8012058 <sulp+0x2c>)
 801204a:	051b      	lsls	r3, r3, #20
 801204c:	189d      	adds	r5, r3, r2
 801204e:	002b      	movs	r3, r5
 8012050:	0022      	movs	r2, r4
 8012052:	f7ef fc1d 	bl	8001890 <__aeabi_dmul>
 8012056:	bd70      	pop	{r4, r5, r6, pc}
 8012058:	3ff00000 	.word	0x3ff00000

0801205c <_strtod_l>:
 801205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801205e:	001d      	movs	r5, r3
 8012060:	2300      	movs	r3, #0
 8012062:	b0a7      	sub	sp, #156	; 0x9c
 8012064:	9322      	str	r3, [sp, #136]	; 0x88
 8012066:	4bae      	ldr	r3, [pc, #696]	; (8012320 <_strtod_l+0x2c4>)
 8012068:	9005      	str	r0, [sp, #20]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	9108      	str	r1, [sp, #32]
 801206e:	0018      	movs	r0, r3
 8012070:	9307      	str	r3, [sp, #28]
 8012072:	921d      	str	r2, [sp, #116]	; 0x74
 8012074:	f7ee f850 	bl	8000118 <strlen>
 8012078:	2600      	movs	r6, #0
 801207a:	0004      	movs	r4, r0
 801207c:	2700      	movs	r7, #0
 801207e:	9b08      	ldr	r3, [sp, #32]
 8012080:	9321      	str	r3, [sp, #132]	; 0x84
 8012082:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012084:	7813      	ldrb	r3, [r2, #0]
 8012086:	2b2b      	cmp	r3, #43	; 0x2b
 8012088:	d058      	beq.n	801213c <_strtod_l+0xe0>
 801208a:	d844      	bhi.n	8012116 <_strtod_l+0xba>
 801208c:	2b0d      	cmp	r3, #13
 801208e:	d83d      	bhi.n	801210c <_strtod_l+0xb0>
 8012090:	2b08      	cmp	r3, #8
 8012092:	d83d      	bhi.n	8012110 <_strtod_l+0xb4>
 8012094:	2b00      	cmp	r3, #0
 8012096:	d047      	beq.n	8012128 <_strtod_l+0xcc>
 8012098:	2300      	movs	r3, #0
 801209a:	9310      	str	r3, [sp, #64]	; 0x40
 801209c:	2200      	movs	r2, #0
 801209e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120a0:	920a      	str	r2, [sp, #40]	; 0x28
 80120a2:	9306      	str	r3, [sp, #24]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	2b30      	cmp	r3, #48	; 0x30
 80120a8:	d000      	beq.n	80120ac <_strtod_l+0x50>
 80120aa:	e083      	b.n	80121b4 <_strtod_l+0x158>
 80120ac:	9b06      	ldr	r3, [sp, #24]
 80120ae:	3220      	adds	r2, #32
 80120b0:	785b      	ldrb	r3, [r3, #1]
 80120b2:	4393      	bics	r3, r2
 80120b4:	2b58      	cmp	r3, #88	; 0x58
 80120b6:	d000      	beq.n	80120ba <_strtod_l+0x5e>
 80120b8:	e072      	b.n	80121a0 <_strtod_l+0x144>
 80120ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120bc:	9502      	str	r5, [sp, #8]
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	ab22      	add	r3, sp, #136	; 0x88
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	4a97      	ldr	r2, [pc, #604]	; (8012324 <_strtod_l+0x2c8>)
 80120c6:	ab23      	add	r3, sp, #140	; 0x8c
 80120c8:	9805      	ldr	r0, [sp, #20]
 80120ca:	a921      	add	r1, sp, #132	; 0x84
 80120cc:	f003 f96c 	bl	80153a8 <__gethex>
 80120d0:	2307      	movs	r3, #7
 80120d2:	0005      	movs	r5, r0
 80120d4:	0004      	movs	r4, r0
 80120d6:	401d      	ands	r5, r3
 80120d8:	4218      	tst	r0, r3
 80120da:	d006      	beq.n	80120ea <_strtod_l+0x8e>
 80120dc:	2d06      	cmp	r5, #6
 80120de:	d12f      	bne.n	8012140 <_strtod_l+0xe4>
 80120e0:	9b06      	ldr	r3, [sp, #24]
 80120e2:	3301      	adds	r3, #1
 80120e4:	9321      	str	r3, [sp, #132]	; 0x84
 80120e6:	2300      	movs	r3, #0
 80120e8:	9310      	str	r3, [sp, #64]	; 0x40
 80120ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d002      	beq.n	80120f6 <_strtod_l+0x9a>
 80120f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120f4:	601a      	str	r2, [r3, #0]
 80120f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d01c      	beq.n	8012136 <_strtod_l+0xda>
 80120fc:	2380      	movs	r3, #128	; 0x80
 80120fe:	0032      	movs	r2, r6
 8012100:	061b      	lsls	r3, r3, #24
 8012102:	18fb      	adds	r3, r7, r3
 8012104:	0010      	movs	r0, r2
 8012106:	0019      	movs	r1, r3
 8012108:	b027      	add	sp, #156	; 0x9c
 801210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801210c:	2b20      	cmp	r3, #32
 801210e:	d1c3      	bne.n	8012098 <_strtod_l+0x3c>
 8012110:	3201      	adds	r2, #1
 8012112:	9221      	str	r2, [sp, #132]	; 0x84
 8012114:	e7b5      	b.n	8012082 <_strtod_l+0x26>
 8012116:	2b2d      	cmp	r3, #45	; 0x2d
 8012118:	d1be      	bne.n	8012098 <_strtod_l+0x3c>
 801211a:	3b2c      	subs	r3, #44	; 0x2c
 801211c:	9310      	str	r3, [sp, #64]	; 0x40
 801211e:	1c53      	adds	r3, r2, #1
 8012120:	9321      	str	r3, [sp, #132]	; 0x84
 8012122:	7853      	ldrb	r3, [r2, #1]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d1b9      	bne.n	801209c <_strtod_l+0x40>
 8012128:	9b08      	ldr	r3, [sp, #32]
 801212a:	9321      	str	r3, [sp, #132]	; 0x84
 801212c:	2300      	movs	r3, #0
 801212e:	9310      	str	r3, [sp, #64]	; 0x40
 8012130:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1dc      	bne.n	80120f0 <_strtod_l+0x94>
 8012136:	0032      	movs	r2, r6
 8012138:	003b      	movs	r3, r7
 801213a:	e7e3      	b.n	8012104 <_strtod_l+0xa8>
 801213c:	2300      	movs	r3, #0
 801213e:	e7ed      	b.n	801211c <_strtod_l+0xc0>
 8012140:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012142:	2a00      	cmp	r2, #0
 8012144:	d007      	beq.n	8012156 <_strtod_l+0xfa>
 8012146:	2135      	movs	r1, #53	; 0x35
 8012148:	a824      	add	r0, sp, #144	; 0x90
 801214a:	f004 f8aa 	bl	80162a2 <__copybits>
 801214e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012150:	9805      	ldr	r0, [sp, #20]
 8012152:	f003 fc99 	bl	8015a88 <_Bfree>
 8012156:	1e68      	subs	r0, r5, #1
 8012158:	2805      	cmp	r0, #5
 801215a:	d806      	bhi.n	801216a <_strtod_l+0x10e>
 801215c:	f7ed ffe4 	bl	8000128 <__gnu_thumb1_case_uqi>
 8012160:	1c190b0e 	.word	0x1c190b0e
 8012164:	030e      	.short	0x030e
 8012166:	2700      	movs	r7, #0
 8012168:	003e      	movs	r6, r7
 801216a:	0723      	lsls	r3, r4, #28
 801216c:	d5bd      	bpl.n	80120ea <_strtod_l+0x8e>
 801216e:	2380      	movs	r3, #128	; 0x80
 8012170:	061b      	lsls	r3, r3, #24
 8012172:	431f      	orrs	r7, r3
 8012174:	e7b9      	b.n	80120ea <_strtod_l+0x8e>
 8012176:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012178:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801217a:	e7f6      	b.n	801216a <_strtod_l+0x10e>
 801217c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801217e:	4a6a      	ldr	r2, [pc, #424]	; (8012328 <_strtod_l+0x2cc>)
 8012180:	496a      	ldr	r1, [pc, #424]	; (801232c <_strtod_l+0x2d0>)
 8012182:	401a      	ands	r2, r3
 8012184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012186:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012188:	185b      	adds	r3, r3, r1
 801218a:	051b      	lsls	r3, r3, #20
 801218c:	431a      	orrs	r2, r3
 801218e:	0017      	movs	r7, r2
 8012190:	e7eb      	b.n	801216a <_strtod_l+0x10e>
 8012192:	2600      	movs	r6, #0
 8012194:	4f66      	ldr	r7, [pc, #408]	; (8012330 <_strtod_l+0x2d4>)
 8012196:	e7e8      	b.n	801216a <_strtod_l+0x10e>
 8012198:	2601      	movs	r6, #1
 801219a:	4f66      	ldr	r7, [pc, #408]	; (8012334 <_strtod_l+0x2d8>)
 801219c:	4276      	negs	r6, r6
 801219e:	e7e4      	b.n	801216a <_strtod_l+0x10e>
 80121a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121a2:	1c5a      	adds	r2, r3, #1
 80121a4:	9221      	str	r2, [sp, #132]	; 0x84
 80121a6:	785b      	ldrb	r3, [r3, #1]
 80121a8:	2b30      	cmp	r3, #48	; 0x30
 80121aa:	d0f9      	beq.n	80121a0 <_strtod_l+0x144>
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d09c      	beq.n	80120ea <_strtod_l+0x8e>
 80121b0:	2301      	movs	r3, #1
 80121b2:	930a      	str	r3, [sp, #40]	; 0x28
 80121b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121b6:	220a      	movs	r2, #10
 80121b8:	9311      	str	r3, [sp, #68]	; 0x44
 80121ba:	2300      	movs	r3, #0
 80121bc:	930e      	str	r3, [sp, #56]	; 0x38
 80121be:	930b      	str	r3, [sp, #44]	; 0x2c
 80121c0:	9309      	str	r3, [sp, #36]	; 0x24
 80121c2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80121c4:	7805      	ldrb	r5, [r0, #0]
 80121c6:	002b      	movs	r3, r5
 80121c8:	3b30      	subs	r3, #48	; 0x30
 80121ca:	b2d9      	uxtb	r1, r3
 80121cc:	2909      	cmp	r1, #9
 80121ce:	d927      	bls.n	8012220 <_strtod_l+0x1c4>
 80121d0:	0022      	movs	r2, r4
 80121d2:	9907      	ldr	r1, [sp, #28]
 80121d4:	f7ff ff05 	bl	8011fe2 <strncmp>
 80121d8:	2800      	cmp	r0, #0
 80121da:	d033      	beq.n	8012244 <_strtod_l+0x1e8>
 80121dc:	2000      	movs	r0, #0
 80121de:	002b      	movs	r3, r5
 80121e0:	4684      	mov	ip, r0
 80121e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121e4:	900c      	str	r0, [sp, #48]	; 0x30
 80121e6:	9206      	str	r2, [sp, #24]
 80121e8:	2220      	movs	r2, #32
 80121ea:	0019      	movs	r1, r3
 80121ec:	4391      	bics	r1, r2
 80121ee:	000a      	movs	r2, r1
 80121f0:	2100      	movs	r1, #0
 80121f2:	9107      	str	r1, [sp, #28]
 80121f4:	2a45      	cmp	r2, #69	; 0x45
 80121f6:	d000      	beq.n	80121fa <_strtod_l+0x19e>
 80121f8:	e0c5      	b.n	8012386 <_strtod_l+0x32a>
 80121fa:	9b06      	ldr	r3, [sp, #24]
 80121fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121fe:	4303      	orrs	r3, r0
 8012200:	4313      	orrs	r3, r2
 8012202:	428b      	cmp	r3, r1
 8012204:	d090      	beq.n	8012128 <_strtod_l+0xcc>
 8012206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012208:	9308      	str	r3, [sp, #32]
 801220a:	3301      	adds	r3, #1
 801220c:	9321      	str	r3, [sp, #132]	; 0x84
 801220e:	9b08      	ldr	r3, [sp, #32]
 8012210:	785b      	ldrb	r3, [r3, #1]
 8012212:	2b2b      	cmp	r3, #43	; 0x2b
 8012214:	d075      	beq.n	8012302 <_strtod_l+0x2a6>
 8012216:	000c      	movs	r4, r1
 8012218:	2b2d      	cmp	r3, #45	; 0x2d
 801221a:	d178      	bne.n	801230e <_strtod_l+0x2b2>
 801221c:	2401      	movs	r4, #1
 801221e:	e071      	b.n	8012304 <_strtod_l+0x2a8>
 8012220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012222:	2908      	cmp	r1, #8
 8012224:	dc09      	bgt.n	801223a <_strtod_l+0x1de>
 8012226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012228:	4351      	muls	r1, r2
 801222a:	185b      	adds	r3, r3, r1
 801222c:	930b      	str	r3, [sp, #44]	; 0x2c
 801222e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012230:	3001      	adds	r0, #1
 8012232:	3301      	adds	r3, #1
 8012234:	9309      	str	r3, [sp, #36]	; 0x24
 8012236:	9021      	str	r0, [sp, #132]	; 0x84
 8012238:	e7c3      	b.n	80121c2 <_strtod_l+0x166>
 801223a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801223c:	4351      	muls	r1, r2
 801223e:	185b      	adds	r3, r3, r1
 8012240:	930e      	str	r3, [sp, #56]	; 0x38
 8012242:	e7f4      	b.n	801222e <_strtod_l+0x1d2>
 8012244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012248:	191c      	adds	r4, r3, r4
 801224a:	9421      	str	r4, [sp, #132]	; 0x84
 801224c:	7823      	ldrb	r3, [r4, #0]
 801224e:	2a00      	cmp	r2, #0
 8012250:	d039      	beq.n	80122c6 <_strtod_l+0x26a>
 8012252:	900c      	str	r0, [sp, #48]	; 0x30
 8012254:	9206      	str	r2, [sp, #24]
 8012256:	001a      	movs	r2, r3
 8012258:	3a30      	subs	r2, #48	; 0x30
 801225a:	2a09      	cmp	r2, #9
 801225c:	d912      	bls.n	8012284 <_strtod_l+0x228>
 801225e:	2201      	movs	r2, #1
 8012260:	4694      	mov	ip, r2
 8012262:	e7c1      	b.n	80121e8 <_strtod_l+0x18c>
 8012264:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012266:	3001      	adds	r0, #1
 8012268:	1c5a      	adds	r2, r3, #1
 801226a:	9221      	str	r2, [sp, #132]	; 0x84
 801226c:	785b      	ldrb	r3, [r3, #1]
 801226e:	2b30      	cmp	r3, #48	; 0x30
 8012270:	d0f8      	beq.n	8012264 <_strtod_l+0x208>
 8012272:	001a      	movs	r2, r3
 8012274:	3a31      	subs	r2, #49	; 0x31
 8012276:	2a08      	cmp	r2, #8
 8012278:	d83e      	bhi.n	80122f8 <_strtod_l+0x29c>
 801227a:	900c      	str	r0, [sp, #48]	; 0x30
 801227c:	2000      	movs	r0, #0
 801227e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012280:	9006      	str	r0, [sp, #24]
 8012282:	9211      	str	r2, [sp, #68]	; 0x44
 8012284:	001a      	movs	r2, r3
 8012286:	9906      	ldr	r1, [sp, #24]
 8012288:	1c44      	adds	r4, r0, #1
 801228a:	3a30      	subs	r2, #48	; 0x30
 801228c:	2b30      	cmp	r3, #48	; 0x30
 801228e:	d013      	beq.n	80122b8 <_strtod_l+0x25c>
 8012290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012292:	191b      	adds	r3, r3, r4
 8012294:	930c      	str	r3, [sp, #48]	; 0x30
 8012296:	1844      	adds	r4, r0, r1
 8012298:	000b      	movs	r3, r1
 801229a:	210a      	movs	r1, #10
 801229c:	429c      	cmp	r4, r3
 801229e:	d114      	bne.n	80122ca <_strtod_l+0x26e>
 80122a0:	9b06      	ldr	r3, [sp, #24]
 80122a2:	1c59      	adds	r1, r3, #1
 80122a4:	1809      	adds	r1, r1, r0
 80122a6:	1818      	adds	r0, r3, r0
 80122a8:	2808      	cmp	r0, #8
 80122aa:	dc1c      	bgt.n	80122e6 <_strtod_l+0x28a>
 80122ac:	230a      	movs	r3, #10
 80122ae:	2400      	movs	r4, #0
 80122b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80122b2:	4343      	muls	r3, r0
 80122b4:	18d3      	adds	r3, r2, r3
 80122b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80122b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122ba:	0020      	movs	r0, r4
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	9221      	str	r2, [sp, #132]	; 0x84
 80122c0:	785b      	ldrb	r3, [r3, #1]
 80122c2:	9106      	str	r1, [sp, #24]
 80122c4:	e7c7      	b.n	8012256 <_strtod_l+0x1fa>
 80122c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122c8:	e7d1      	b.n	801226e <_strtod_l+0x212>
 80122ca:	2b08      	cmp	r3, #8
 80122cc:	dc04      	bgt.n	80122d8 <_strtod_l+0x27c>
 80122ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80122d0:	434d      	muls	r5, r1
 80122d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80122d4:	3301      	adds	r3, #1
 80122d6:	e7e1      	b.n	801229c <_strtod_l+0x240>
 80122d8:	1c5d      	adds	r5, r3, #1
 80122da:	2d10      	cmp	r5, #16
 80122dc:	dcfa      	bgt.n	80122d4 <_strtod_l+0x278>
 80122de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80122e0:	434d      	muls	r5, r1
 80122e2:	950e      	str	r5, [sp, #56]	; 0x38
 80122e4:	e7f6      	b.n	80122d4 <_strtod_l+0x278>
 80122e6:	2400      	movs	r4, #0
 80122e8:	2910      	cmp	r1, #16
 80122ea:	dce5      	bgt.n	80122b8 <_strtod_l+0x25c>
 80122ec:	230a      	movs	r3, #10
 80122ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80122f0:	4343      	muls	r3, r0
 80122f2:	18d3      	adds	r3, r2, r3
 80122f4:	930e      	str	r3, [sp, #56]	; 0x38
 80122f6:	e7df      	b.n	80122b8 <_strtod_l+0x25c>
 80122f8:	2200      	movs	r2, #0
 80122fa:	920c      	str	r2, [sp, #48]	; 0x30
 80122fc:	9206      	str	r2, [sp, #24]
 80122fe:	3201      	adds	r2, #1
 8012300:	e7ae      	b.n	8012260 <_strtod_l+0x204>
 8012302:	2400      	movs	r4, #0
 8012304:	9b08      	ldr	r3, [sp, #32]
 8012306:	3302      	adds	r3, #2
 8012308:	9321      	str	r3, [sp, #132]	; 0x84
 801230a:	9b08      	ldr	r3, [sp, #32]
 801230c:	789b      	ldrb	r3, [r3, #2]
 801230e:	001a      	movs	r2, r3
 8012310:	3a30      	subs	r2, #48	; 0x30
 8012312:	2a09      	cmp	r2, #9
 8012314:	d914      	bls.n	8012340 <_strtod_l+0x2e4>
 8012316:	9a08      	ldr	r2, [sp, #32]
 8012318:	9221      	str	r2, [sp, #132]	; 0x84
 801231a:	2200      	movs	r2, #0
 801231c:	e032      	b.n	8012384 <_strtod_l+0x328>
 801231e:	46c0      	nop			; (mov r8, r8)
 8012320:	0801aa64 	.word	0x0801aa64
 8012324:	0801a8d4 	.word	0x0801a8d4
 8012328:	ffefffff 	.word	0xffefffff
 801232c:	00000433 	.word	0x00000433
 8012330:	7ff00000 	.word	0x7ff00000
 8012334:	7fffffff 	.word	0x7fffffff
 8012338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801233a:	1c5a      	adds	r2, r3, #1
 801233c:	9221      	str	r2, [sp, #132]	; 0x84
 801233e:	785b      	ldrb	r3, [r3, #1]
 8012340:	2b30      	cmp	r3, #48	; 0x30
 8012342:	d0f9      	beq.n	8012338 <_strtod_l+0x2dc>
 8012344:	2200      	movs	r2, #0
 8012346:	9207      	str	r2, [sp, #28]
 8012348:	001a      	movs	r2, r3
 801234a:	3a31      	subs	r2, #49	; 0x31
 801234c:	2a08      	cmp	r2, #8
 801234e:	d81a      	bhi.n	8012386 <_strtod_l+0x32a>
 8012350:	3b30      	subs	r3, #48	; 0x30
 8012352:	001a      	movs	r2, r3
 8012354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012356:	9307      	str	r3, [sp, #28]
 8012358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801235a:	1c59      	adds	r1, r3, #1
 801235c:	9121      	str	r1, [sp, #132]	; 0x84
 801235e:	785b      	ldrb	r3, [r3, #1]
 8012360:	001d      	movs	r5, r3
 8012362:	3d30      	subs	r5, #48	; 0x30
 8012364:	2d09      	cmp	r5, #9
 8012366:	d939      	bls.n	80123dc <_strtod_l+0x380>
 8012368:	9d07      	ldr	r5, [sp, #28]
 801236a:	1b49      	subs	r1, r1, r5
 801236c:	4daf      	ldr	r5, [pc, #700]	; (801262c <_strtod_l+0x5d0>)
 801236e:	9507      	str	r5, [sp, #28]
 8012370:	2908      	cmp	r1, #8
 8012372:	dc03      	bgt.n	801237c <_strtod_l+0x320>
 8012374:	9207      	str	r2, [sp, #28]
 8012376:	42aa      	cmp	r2, r5
 8012378:	dd00      	ble.n	801237c <_strtod_l+0x320>
 801237a:	9507      	str	r5, [sp, #28]
 801237c:	2c00      	cmp	r4, #0
 801237e:	d002      	beq.n	8012386 <_strtod_l+0x32a>
 8012380:	9a07      	ldr	r2, [sp, #28]
 8012382:	4252      	negs	r2, r2
 8012384:	9207      	str	r2, [sp, #28]
 8012386:	9a06      	ldr	r2, [sp, #24]
 8012388:	2a00      	cmp	r2, #0
 801238a:	d14b      	bne.n	8012424 <_strtod_l+0x3c8>
 801238c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801238e:	4310      	orrs	r0, r2
 8012390:	d000      	beq.n	8012394 <_strtod_l+0x338>
 8012392:	e6aa      	b.n	80120ea <_strtod_l+0x8e>
 8012394:	4662      	mov	r2, ip
 8012396:	2a00      	cmp	r2, #0
 8012398:	d000      	beq.n	801239c <_strtod_l+0x340>
 801239a:	e6c5      	b.n	8012128 <_strtod_l+0xcc>
 801239c:	2b69      	cmp	r3, #105	; 0x69
 801239e:	d025      	beq.n	80123ec <_strtod_l+0x390>
 80123a0:	dc21      	bgt.n	80123e6 <_strtod_l+0x38a>
 80123a2:	2b49      	cmp	r3, #73	; 0x49
 80123a4:	d022      	beq.n	80123ec <_strtod_l+0x390>
 80123a6:	2b4e      	cmp	r3, #78	; 0x4e
 80123a8:	d000      	beq.n	80123ac <_strtod_l+0x350>
 80123aa:	e6bd      	b.n	8012128 <_strtod_l+0xcc>
 80123ac:	49a0      	ldr	r1, [pc, #640]	; (8012630 <_strtod_l+0x5d4>)
 80123ae:	a821      	add	r0, sp, #132	; 0x84
 80123b0:	f003 fa48 	bl	8015844 <__match>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d100      	bne.n	80123ba <_strtod_l+0x35e>
 80123b8:	e6b6      	b.n	8012128 <_strtod_l+0xcc>
 80123ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b28      	cmp	r3, #40	; 0x28
 80123c0:	d12a      	bne.n	8012418 <_strtod_l+0x3bc>
 80123c2:	499c      	ldr	r1, [pc, #624]	; (8012634 <_strtod_l+0x5d8>)
 80123c4:	aa24      	add	r2, sp, #144	; 0x90
 80123c6:	a821      	add	r0, sp, #132	; 0x84
 80123c8:	f003 fa50 	bl	801586c <__hexnan>
 80123cc:	2805      	cmp	r0, #5
 80123ce:	d123      	bne.n	8012418 <_strtod_l+0x3bc>
 80123d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80123d2:	4a99      	ldr	r2, [pc, #612]	; (8012638 <_strtod_l+0x5dc>)
 80123d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80123d6:	431a      	orrs	r2, r3
 80123d8:	0017      	movs	r7, r2
 80123da:	e686      	b.n	80120ea <_strtod_l+0x8e>
 80123dc:	210a      	movs	r1, #10
 80123de:	434a      	muls	r2, r1
 80123e0:	18d2      	adds	r2, r2, r3
 80123e2:	3a30      	subs	r2, #48	; 0x30
 80123e4:	e7b8      	b.n	8012358 <_strtod_l+0x2fc>
 80123e6:	2b6e      	cmp	r3, #110	; 0x6e
 80123e8:	d0e0      	beq.n	80123ac <_strtod_l+0x350>
 80123ea:	e69d      	b.n	8012128 <_strtod_l+0xcc>
 80123ec:	4993      	ldr	r1, [pc, #588]	; (801263c <_strtod_l+0x5e0>)
 80123ee:	a821      	add	r0, sp, #132	; 0x84
 80123f0:	f003 fa28 	bl	8015844 <__match>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	d100      	bne.n	80123fa <_strtod_l+0x39e>
 80123f8:	e696      	b.n	8012128 <_strtod_l+0xcc>
 80123fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123fc:	4990      	ldr	r1, [pc, #576]	; (8012640 <_strtod_l+0x5e4>)
 80123fe:	3b01      	subs	r3, #1
 8012400:	a821      	add	r0, sp, #132	; 0x84
 8012402:	9321      	str	r3, [sp, #132]	; 0x84
 8012404:	f003 fa1e 	bl	8015844 <__match>
 8012408:	2800      	cmp	r0, #0
 801240a:	d102      	bne.n	8012412 <_strtod_l+0x3b6>
 801240c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801240e:	3301      	adds	r3, #1
 8012410:	9321      	str	r3, [sp, #132]	; 0x84
 8012412:	2600      	movs	r6, #0
 8012414:	4f88      	ldr	r7, [pc, #544]	; (8012638 <_strtod_l+0x5dc>)
 8012416:	e668      	b.n	80120ea <_strtod_l+0x8e>
 8012418:	488a      	ldr	r0, [pc, #552]	; (8012644 <_strtod_l+0x5e8>)
 801241a:	f003 ffb9 	bl	8016390 <nan>
 801241e:	0006      	movs	r6, r0
 8012420:	000f      	movs	r7, r1
 8012422:	e662      	b.n	80120ea <_strtod_l+0x8e>
 8012424:	9b07      	ldr	r3, [sp, #28]
 8012426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012428:	1a9b      	subs	r3, r3, r2
 801242a:	930a      	str	r3, [sp, #40]	; 0x28
 801242c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801242e:	2b00      	cmp	r3, #0
 8012430:	d101      	bne.n	8012436 <_strtod_l+0x3da>
 8012432:	9b06      	ldr	r3, [sp, #24]
 8012434:	9309      	str	r3, [sp, #36]	; 0x24
 8012436:	9c06      	ldr	r4, [sp, #24]
 8012438:	2c10      	cmp	r4, #16
 801243a:	dd00      	ble.n	801243e <_strtod_l+0x3e2>
 801243c:	2410      	movs	r4, #16
 801243e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012440:	f7f0 f8a8 	bl	8002594 <__aeabi_ui2d>
 8012444:	9b06      	ldr	r3, [sp, #24]
 8012446:	0006      	movs	r6, r0
 8012448:	000f      	movs	r7, r1
 801244a:	2b09      	cmp	r3, #9
 801244c:	dd15      	ble.n	801247a <_strtod_l+0x41e>
 801244e:	0022      	movs	r2, r4
 8012450:	4b7d      	ldr	r3, [pc, #500]	; (8012648 <_strtod_l+0x5ec>)
 8012452:	3a09      	subs	r2, #9
 8012454:	00d2      	lsls	r2, r2, #3
 8012456:	189b      	adds	r3, r3, r2
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	f7ef fa18 	bl	8001890 <__aeabi_dmul>
 8012460:	0006      	movs	r6, r0
 8012462:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012464:	000f      	movs	r7, r1
 8012466:	f7f0 f895 	bl	8002594 <__aeabi_ui2d>
 801246a:	0002      	movs	r2, r0
 801246c:	000b      	movs	r3, r1
 801246e:	0030      	movs	r0, r6
 8012470:	0039      	movs	r1, r7
 8012472:	f7ee fa9d 	bl	80009b0 <__aeabi_dadd>
 8012476:	0006      	movs	r6, r0
 8012478:	000f      	movs	r7, r1
 801247a:	9b06      	ldr	r3, [sp, #24]
 801247c:	2b0f      	cmp	r3, #15
 801247e:	dc39      	bgt.n	80124f4 <_strtod_l+0x498>
 8012480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012482:	2b00      	cmp	r3, #0
 8012484:	d100      	bne.n	8012488 <_strtod_l+0x42c>
 8012486:	e630      	b.n	80120ea <_strtod_l+0x8e>
 8012488:	dd24      	ble.n	80124d4 <_strtod_l+0x478>
 801248a:	2b16      	cmp	r3, #22
 801248c:	dc09      	bgt.n	80124a2 <_strtod_l+0x446>
 801248e:	00dd      	lsls	r5, r3, #3
 8012490:	0032      	movs	r2, r6
 8012492:	003b      	movs	r3, r7
 8012494:	4c6c      	ldr	r4, [pc, #432]	; (8012648 <_strtod_l+0x5ec>)
 8012496:	1964      	adds	r4, r4, r5
 8012498:	6820      	ldr	r0, [r4, #0]
 801249a:	6861      	ldr	r1, [r4, #4]
 801249c:	f7ef f9f8 	bl	8001890 <__aeabi_dmul>
 80124a0:	e7bd      	b.n	801241e <_strtod_l+0x3c2>
 80124a2:	2325      	movs	r3, #37	; 0x25
 80124a4:	9a06      	ldr	r2, [sp, #24]
 80124a6:	1a9b      	subs	r3, r3, r2
 80124a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124aa:	4293      	cmp	r3, r2
 80124ac:	db22      	blt.n	80124f4 <_strtod_l+0x498>
 80124ae:	240f      	movs	r4, #15
 80124b0:	9b06      	ldr	r3, [sp, #24]
 80124b2:	4d65      	ldr	r5, [pc, #404]	; (8012648 <_strtod_l+0x5ec>)
 80124b4:	1ae4      	subs	r4, r4, r3
 80124b6:	00e1      	lsls	r1, r4, #3
 80124b8:	1869      	adds	r1, r5, r1
 80124ba:	0032      	movs	r2, r6
 80124bc:	6808      	ldr	r0, [r1, #0]
 80124be:	6849      	ldr	r1, [r1, #4]
 80124c0:	003b      	movs	r3, r7
 80124c2:	f7ef f9e5 	bl	8001890 <__aeabi_dmul>
 80124c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124c8:	1b1c      	subs	r4, r3, r4
 80124ca:	00e4      	lsls	r4, r4, #3
 80124cc:	192c      	adds	r4, r5, r4
 80124ce:	6822      	ldr	r2, [r4, #0]
 80124d0:	6863      	ldr	r3, [r4, #4]
 80124d2:	e7e3      	b.n	801249c <_strtod_l+0x440>
 80124d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d6:	3316      	adds	r3, #22
 80124d8:	db0c      	blt.n	80124f4 <_strtod_l+0x498>
 80124da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124dc:	9a07      	ldr	r2, [sp, #28]
 80124de:	0030      	movs	r0, r6
 80124e0:	1a9a      	subs	r2, r3, r2
 80124e2:	4b59      	ldr	r3, [pc, #356]	; (8012648 <_strtod_l+0x5ec>)
 80124e4:	00d2      	lsls	r2, r2, #3
 80124e6:	189b      	adds	r3, r3, r2
 80124e8:	0039      	movs	r1, r7
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	f7ee fdc9 	bl	8001084 <__aeabi_ddiv>
 80124f2:	e794      	b.n	801241e <_strtod_l+0x3c2>
 80124f4:	9b06      	ldr	r3, [sp, #24]
 80124f6:	1b1c      	subs	r4, r3, r4
 80124f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124fa:	18e4      	adds	r4, r4, r3
 80124fc:	2c00      	cmp	r4, #0
 80124fe:	dd70      	ble.n	80125e2 <_strtod_l+0x586>
 8012500:	230f      	movs	r3, #15
 8012502:	0021      	movs	r1, r4
 8012504:	4019      	ands	r1, r3
 8012506:	421c      	tst	r4, r3
 8012508:	d00a      	beq.n	8012520 <_strtod_l+0x4c4>
 801250a:	00cb      	lsls	r3, r1, #3
 801250c:	494e      	ldr	r1, [pc, #312]	; (8012648 <_strtod_l+0x5ec>)
 801250e:	0032      	movs	r2, r6
 8012510:	18c9      	adds	r1, r1, r3
 8012512:	6808      	ldr	r0, [r1, #0]
 8012514:	6849      	ldr	r1, [r1, #4]
 8012516:	003b      	movs	r3, r7
 8012518:	f7ef f9ba 	bl	8001890 <__aeabi_dmul>
 801251c:	0006      	movs	r6, r0
 801251e:	000f      	movs	r7, r1
 8012520:	230f      	movs	r3, #15
 8012522:	439c      	bics	r4, r3
 8012524:	d048      	beq.n	80125b8 <_strtod_l+0x55c>
 8012526:	3326      	adds	r3, #38	; 0x26
 8012528:	33ff      	adds	r3, #255	; 0xff
 801252a:	429c      	cmp	r4, r3
 801252c:	dd22      	ble.n	8012574 <_strtod_l+0x518>
 801252e:	2300      	movs	r3, #0
 8012530:	9306      	str	r3, [sp, #24]
 8012532:	9307      	str	r3, [sp, #28]
 8012534:	930b      	str	r3, [sp, #44]	; 0x2c
 8012536:	9309      	str	r3, [sp, #36]	; 0x24
 8012538:	2322      	movs	r3, #34	; 0x22
 801253a:	2600      	movs	r6, #0
 801253c:	9a05      	ldr	r2, [sp, #20]
 801253e:	4f3e      	ldr	r7, [pc, #248]	; (8012638 <_strtod_l+0x5dc>)
 8012540:	6013      	str	r3, [r2, #0]
 8012542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012544:	42b3      	cmp	r3, r6
 8012546:	d100      	bne.n	801254a <_strtod_l+0x4ee>
 8012548:	e5cf      	b.n	80120ea <_strtod_l+0x8e>
 801254a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801254c:	9805      	ldr	r0, [sp, #20]
 801254e:	f003 fa9b 	bl	8015a88 <_Bfree>
 8012552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012554:	9805      	ldr	r0, [sp, #20]
 8012556:	f003 fa97 	bl	8015a88 <_Bfree>
 801255a:	9907      	ldr	r1, [sp, #28]
 801255c:	9805      	ldr	r0, [sp, #20]
 801255e:	f003 fa93 	bl	8015a88 <_Bfree>
 8012562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012564:	9805      	ldr	r0, [sp, #20]
 8012566:	f003 fa8f 	bl	8015a88 <_Bfree>
 801256a:	9906      	ldr	r1, [sp, #24]
 801256c:	9805      	ldr	r0, [sp, #20]
 801256e:	f003 fa8b 	bl	8015a88 <_Bfree>
 8012572:	e5ba      	b.n	80120ea <_strtod_l+0x8e>
 8012574:	2300      	movs	r3, #0
 8012576:	0030      	movs	r0, r6
 8012578:	0039      	movs	r1, r7
 801257a:	001d      	movs	r5, r3
 801257c:	1124      	asrs	r4, r4, #4
 801257e:	2c01      	cmp	r4, #1
 8012580:	dc1d      	bgt.n	80125be <_strtod_l+0x562>
 8012582:	2b00      	cmp	r3, #0
 8012584:	d001      	beq.n	801258a <_strtod_l+0x52e>
 8012586:	0006      	movs	r6, r0
 8012588:	000f      	movs	r7, r1
 801258a:	4b30      	ldr	r3, [pc, #192]	; (801264c <_strtod_l+0x5f0>)
 801258c:	00ed      	lsls	r5, r5, #3
 801258e:	18ff      	adds	r7, r7, r3
 8012590:	4b2f      	ldr	r3, [pc, #188]	; (8012650 <_strtod_l+0x5f4>)
 8012592:	0032      	movs	r2, r6
 8012594:	195d      	adds	r5, r3, r5
 8012596:	6828      	ldr	r0, [r5, #0]
 8012598:	6869      	ldr	r1, [r5, #4]
 801259a:	003b      	movs	r3, r7
 801259c:	f7ef f978 	bl	8001890 <__aeabi_dmul>
 80125a0:	4b25      	ldr	r3, [pc, #148]	; (8012638 <_strtod_l+0x5dc>)
 80125a2:	4a2c      	ldr	r2, [pc, #176]	; (8012654 <_strtod_l+0x5f8>)
 80125a4:	0006      	movs	r6, r0
 80125a6:	400b      	ands	r3, r1
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d8c0      	bhi.n	801252e <_strtod_l+0x4d2>
 80125ac:	4a2a      	ldr	r2, [pc, #168]	; (8012658 <_strtod_l+0x5fc>)
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d913      	bls.n	80125da <_strtod_l+0x57e>
 80125b2:	2601      	movs	r6, #1
 80125b4:	4f29      	ldr	r7, [pc, #164]	; (801265c <_strtod_l+0x600>)
 80125b6:	4276      	negs	r6, r6
 80125b8:	2300      	movs	r3, #0
 80125ba:	9308      	str	r3, [sp, #32]
 80125bc:	e087      	b.n	80126ce <_strtod_l+0x672>
 80125be:	2201      	movs	r2, #1
 80125c0:	4214      	tst	r4, r2
 80125c2:	d007      	beq.n	80125d4 <_strtod_l+0x578>
 80125c4:	4a22      	ldr	r2, [pc, #136]	; (8012650 <_strtod_l+0x5f4>)
 80125c6:	00eb      	lsls	r3, r5, #3
 80125c8:	189b      	adds	r3, r3, r2
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	f7ef f95f 	bl	8001890 <__aeabi_dmul>
 80125d2:	2301      	movs	r3, #1
 80125d4:	3501      	adds	r5, #1
 80125d6:	1064      	asrs	r4, r4, #1
 80125d8:	e7d1      	b.n	801257e <_strtod_l+0x522>
 80125da:	23d4      	movs	r3, #212	; 0xd4
 80125dc:	049b      	lsls	r3, r3, #18
 80125de:	18cf      	adds	r7, r1, r3
 80125e0:	e7ea      	b.n	80125b8 <_strtod_l+0x55c>
 80125e2:	2c00      	cmp	r4, #0
 80125e4:	d0e8      	beq.n	80125b8 <_strtod_l+0x55c>
 80125e6:	4264      	negs	r4, r4
 80125e8:	220f      	movs	r2, #15
 80125ea:	0023      	movs	r3, r4
 80125ec:	4013      	ands	r3, r2
 80125ee:	4214      	tst	r4, r2
 80125f0:	d00a      	beq.n	8012608 <_strtod_l+0x5ac>
 80125f2:	00da      	lsls	r2, r3, #3
 80125f4:	4b14      	ldr	r3, [pc, #80]	; (8012648 <_strtod_l+0x5ec>)
 80125f6:	0030      	movs	r0, r6
 80125f8:	189b      	adds	r3, r3, r2
 80125fa:	0039      	movs	r1, r7
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	f7ee fd40 	bl	8001084 <__aeabi_ddiv>
 8012604:	0006      	movs	r6, r0
 8012606:	000f      	movs	r7, r1
 8012608:	1124      	asrs	r4, r4, #4
 801260a:	d0d5      	beq.n	80125b8 <_strtod_l+0x55c>
 801260c:	2c1f      	cmp	r4, #31
 801260e:	dd27      	ble.n	8012660 <_strtod_l+0x604>
 8012610:	2300      	movs	r3, #0
 8012612:	9306      	str	r3, [sp, #24]
 8012614:	9307      	str	r3, [sp, #28]
 8012616:	930b      	str	r3, [sp, #44]	; 0x2c
 8012618:	9309      	str	r3, [sp, #36]	; 0x24
 801261a:	2322      	movs	r3, #34	; 0x22
 801261c:	9a05      	ldr	r2, [sp, #20]
 801261e:	2600      	movs	r6, #0
 8012620:	6013      	str	r3, [r2, #0]
 8012622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012624:	2700      	movs	r7, #0
 8012626:	2b00      	cmp	r3, #0
 8012628:	d18f      	bne.n	801254a <_strtod_l+0x4ee>
 801262a:	e55e      	b.n	80120ea <_strtod_l+0x8e>
 801262c:	00004e1f 	.word	0x00004e1f
 8012630:	0801a935 	.word	0x0801a935
 8012634:	0801a8e8 	.word	0x0801a8e8
 8012638:	7ff00000 	.word	0x7ff00000
 801263c:	0801a92d 	.word	0x0801a92d
 8012640:	0801a983 	.word	0x0801a983
 8012644:	0801ac0f 	.word	0x0801ac0f
 8012648:	0801ab00 	.word	0x0801ab00
 801264c:	fcb00000 	.word	0xfcb00000
 8012650:	0801aad8 	.word	0x0801aad8
 8012654:	7ca00000 	.word	0x7ca00000
 8012658:	7c900000 	.word	0x7c900000
 801265c:	7fefffff 	.word	0x7fefffff
 8012660:	2310      	movs	r3, #16
 8012662:	0022      	movs	r2, r4
 8012664:	401a      	ands	r2, r3
 8012666:	9208      	str	r2, [sp, #32]
 8012668:	421c      	tst	r4, r3
 801266a:	d001      	beq.n	8012670 <_strtod_l+0x614>
 801266c:	335a      	adds	r3, #90	; 0x5a
 801266e:	9308      	str	r3, [sp, #32]
 8012670:	0030      	movs	r0, r6
 8012672:	0039      	movs	r1, r7
 8012674:	2300      	movs	r3, #0
 8012676:	4dca      	ldr	r5, [pc, #808]	; (80129a0 <_strtod_l+0x944>)
 8012678:	2201      	movs	r2, #1
 801267a:	4214      	tst	r4, r2
 801267c:	d004      	beq.n	8012688 <_strtod_l+0x62c>
 801267e:	682a      	ldr	r2, [r5, #0]
 8012680:	686b      	ldr	r3, [r5, #4]
 8012682:	f7ef f905 	bl	8001890 <__aeabi_dmul>
 8012686:	2301      	movs	r3, #1
 8012688:	1064      	asrs	r4, r4, #1
 801268a:	3508      	adds	r5, #8
 801268c:	2c00      	cmp	r4, #0
 801268e:	d1f3      	bne.n	8012678 <_strtod_l+0x61c>
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <_strtod_l+0x63c>
 8012694:	0006      	movs	r6, r0
 8012696:	000f      	movs	r7, r1
 8012698:	9b08      	ldr	r3, [sp, #32]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00f      	beq.n	80126be <_strtod_l+0x662>
 801269e:	236b      	movs	r3, #107	; 0x6b
 80126a0:	0079      	lsls	r1, r7, #1
 80126a2:	0d49      	lsrs	r1, r1, #21
 80126a4:	003a      	movs	r2, r7
 80126a6:	1a5b      	subs	r3, r3, r1
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	dd08      	ble.n	80126be <_strtod_l+0x662>
 80126ac:	2b1f      	cmp	r3, #31
 80126ae:	dc00      	bgt.n	80126b2 <_strtod_l+0x656>
 80126b0:	e126      	b.n	8012900 <_strtod_l+0x8a4>
 80126b2:	2600      	movs	r6, #0
 80126b4:	2b34      	cmp	r3, #52	; 0x34
 80126b6:	dc00      	bgt.n	80126ba <_strtod_l+0x65e>
 80126b8:	e11b      	b.n	80128f2 <_strtod_l+0x896>
 80126ba:	27dc      	movs	r7, #220	; 0xdc
 80126bc:	04bf      	lsls	r7, r7, #18
 80126be:	2200      	movs	r2, #0
 80126c0:	2300      	movs	r3, #0
 80126c2:	0030      	movs	r0, r6
 80126c4:	0039      	movs	r1, r7
 80126c6:	f7ed fec9 	bl	800045c <__aeabi_dcmpeq>
 80126ca:	2800      	cmp	r0, #0
 80126cc:	d1a0      	bne.n	8012610 <_strtod_l+0x5b4>
 80126ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126d2:	9300      	str	r3, [sp, #0]
 80126d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80126d6:	9b06      	ldr	r3, [sp, #24]
 80126d8:	9805      	ldr	r0, [sp, #20]
 80126da:	f003 fa23 	bl	8015b24 <__s2b>
 80126de:	900b      	str	r0, [sp, #44]	; 0x2c
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d100      	bne.n	80126e6 <_strtod_l+0x68a>
 80126e4:	e723      	b.n	801252e <_strtod_l+0x4d2>
 80126e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126e8:	9907      	ldr	r1, [sp, #28]
 80126ea:	17da      	asrs	r2, r3, #31
 80126ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126ee:	1a5b      	subs	r3, r3, r1
 80126f0:	401a      	ands	r2, r3
 80126f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126f4:	9215      	str	r2, [sp, #84]	; 0x54
 80126f6:	43db      	mvns	r3, r3
 80126f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126fa:	17db      	asrs	r3, r3, #31
 80126fc:	401a      	ands	r2, r3
 80126fe:	2300      	movs	r3, #0
 8012700:	921c      	str	r2, [sp, #112]	; 0x70
 8012702:	9306      	str	r3, [sp, #24]
 8012704:	9307      	str	r3, [sp, #28]
 8012706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012708:	9805      	ldr	r0, [sp, #20]
 801270a:	6859      	ldr	r1, [r3, #4]
 801270c:	f003 f994 	bl	8015a38 <_Balloc>
 8012710:	9009      	str	r0, [sp, #36]	; 0x24
 8012712:	2800      	cmp	r0, #0
 8012714:	d100      	bne.n	8012718 <_strtod_l+0x6bc>
 8012716:	e70f      	b.n	8012538 <_strtod_l+0x4dc>
 8012718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801271a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801271c:	691b      	ldr	r3, [r3, #16]
 801271e:	310c      	adds	r1, #12
 8012720:	1c9a      	adds	r2, r3, #2
 8012722:	0092      	lsls	r2, r2, #2
 8012724:	300c      	adds	r0, #12
 8012726:	930c      	str	r3, [sp, #48]	; 0x30
 8012728:	f7ff fa1a 	bl	8011b60 <memcpy>
 801272c:	ab24      	add	r3, sp, #144	; 0x90
 801272e:	9301      	str	r3, [sp, #4]
 8012730:	ab23      	add	r3, sp, #140	; 0x8c
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	0032      	movs	r2, r6
 8012736:	003b      	movs	r3, r7
 8012738:	9805      	ldr	r0, [sp, #20]
 801273a:	960e      	str	r6, [sp, #56]	; 0x38
 801273c:	970f      	str	r7, [sp, #60]	; 0x3c
 801273e:	f003 fd25 	bl	801618c <__d2b>
 8012742:	9022      	str	r0, [sp, #136]	; 0x88
 8012744:	2800      	cmp	r0, #0
 8012746:	d100      	bne.n	801274a <_strtod_l+0x6ee>
 8012748:	e6f6      	b.n	8012538 <_strtod_l+0x4dc>
 801274a:	2101      	movs	r1, #1
 801274c:	9805      	ldr	r0, [sp, #20]
 801274e:	f003 fa7d 	bl	8015c4c <__i2b>
 8012752:	9007      	str	r0, [sp, #28]
 8012754:	2800      	cmp	r0, #0
 8012756:	d100      	bne.n	801275a <_strtod_l+0x6fe>
 8012758:	e6ee      	b.n	8012538 <_strtod_l+0x4dc>
 801275a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801275c:	2b00      	cmp	r3, #0
 801275e:	da00      	bge.n	8012762 <_strtod_l+0x706>
 8012760:	e0d3      	b.n	801290a <_strtod_l+0x8ae>
 8012762:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012764:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012766:	189d      	adds	r5, r3, r2
 8012768:	9908      	ldr	r1, [sp, #32]
 801276a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801276c:	1a5b      	subs	r3, r3, r1
 801276e:	2136      	movs	r1, #54	; 0x36
 8012770:	189b      	adds	r3, r3, r2
 8012772:	1a8a      	subs	r2, r1, r2
 8012774:	498b      	ldr	r1, [pc, #556]	; (80129a4 <_strtod_l+0x948>)
 8012776:	3b01      	subs	r3, #1
 8012778:	2001      	movs	r0, #1
 801277a:	428b      	cmp	r3, r1
 801277c:	db00      	blt.n	8012780 <_strtod_l+0x724>
 801277e:	e0cf      	b.n	8012920 <_strtod_l+0x8c4>
 8012780:	1ac9      	subs	r1, r1, r3
 8012782:	1a52      	subs	r2, r2, r1
 8012784:	291f      	cmp	r1, #31
 8012786:	dd00      	ble.n	801278a <_strtod_l+0x72e>
 8012788:	e0c3      	b.n	8012912 <_strtod_l+0x8b6>
 801278a:	4088      	lsls	r0, r1
 801278c:	2300      	movs	r3, #0
 801278e:	9014      	str	r0, [sp, #80]	; 0x50
 8012790:	9312      	str	r3, [sp, #72]	; 0x48
 8012792:	18ab      	adds	r3, r5, r2
 8012794:	930c      	str	r3, [sp, #48]	; 0x30
 8012796:	18a4      	adds	r4, r4, r2
 8012798:	9b08      	ldr	r3, [sp, #32]
 801279a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801279c:	191c      	adds	r4, r3, r4
 801279e:	002b      	movs	r3, r5
 80127a0:	4295      	cmp	r5, r2
 80127a2:	dd00      	ble.n	80127a6 <_strtod_l+0x74a>
 80127a4:	0013      	movs	r3, r2
 80127a6:	42a3      	cmp	r3, r4
 80127a8:	dd00      	ble.n	80127ac <_strtod_l+0x750>
 80127aa:	0023      	movs	r3, r4
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	dd04      	ble.n	80127ba <_strtod_l+0x75e>
 80127b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127b2:	1ae4      	subs	r4, r4, r3
 80127b4:	1ad2      	subs	r2, r2, r3
 80127b6:	920c      	str	r2, [sp, #48]	; 0x30
 80127b8:	1aed      	subs	r5, r5, r3
 80127ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127bc:	2b00      	cmp	r3, #0
 80127be:	dd17      	ble.n	80127f0 <_strtod_l+0x794>
 80127c0:	001a      	movs	r2, r3
 80127c2:	9907      	ldr	r1, [sp, #28]
 80127c4:	9805      	ldr	r0, [sp, #20]
 80127c6:	f003 fb07 	bl	8015dd8 <__pow5mult>
 80127ca:	9007      	str	r0, [sp, #28]
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d100      	bne.n	80127d2 <_strtod_l+0x776>
 80127d0:	e6b2      	b.n	8012538 <_strtod_l+0x4dc>
 80127d2:	0001      	movs	r1, r0
 80127d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80127d6:	9805      	ldr	r0, [sp, #20]
 80127d8:	f003 fa4e 	bl	8015c78 <__multiply>
 80127dc:	9011      	str	r0, [sp, #68]	; 0x44
 80127de:	2800      	cmp	r0, #0
 80127e0:	d100      	bne.n	80127e4 <_strtod_l+0x788>
 80127e2:	e6a9      	b.n	8012538 <_strtod_l+0x4dc>
 80127e4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80127e6:	9805      	ldr	r0, [sp, #20]
 80127e8:	f003 f94e 	bl	8015a88 <_Bfree>
 80127ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80127ee:	9322      	str	r3, [sp, #136]	; 0x88
 80127f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	dd00      	ble.n	80127f8 <_strtod_l+0x79c>
 80127f6:	e096      	b.n	8012926 <_strtod_l+0x8ca>
 80127f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	dd08      	ble.n	8012810 <_strtod_l+0x7b4>
 80127fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012802:	9805      	ldr	r0, [sp, #20]
 8012804:	f003 fae8 	bl	8015dd8 <__pow5mult>
 8012808:	9009      	str	r0, [sp, #36]	; 0x24
 801280a:	2800      	cmp	r0, #0
 801280c:	d100      	bne.n	8012810 <_strtod_l+0x7b4>
 801280e:	e693      	b.n	8012538 <_strtod_l+0x4dc>
 8012810:	2c00      	cmp	r4, #0
 8012812:	dd08      	ble.n	8012826 <_strtod_l+0x7ca>
 8012814:	0022      	movs	r2, r4
 8012816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012818:	9805      	ldr	r0, [sp, #20]
 801281a:	f003 fb1f 	bl	8015e5c <__lshift>
 801281e:	9009      	str	r0, [sp, #36]	; 0x24
 8012820:	2800      	cmp	r0, #0
 8012822:	d100      	bne.n	8012826 <_strtod_l+0x7ca>
 8012824:	e688      	b.n	8012538 <_strtod_l+0x4dc>
 8012826:	2d00      	cmp	r5, #0
 8012828:	dd08      	ble.n	801283c <_strtod_l+0x7e0>
 801282a:	002a      	movs	r2, r5
 801282c:	9907      	ldr	r1, [sp, #28]
 801282e:	9805      	ldr	r0, [sp, #20]
 8012830:	f003 fb14 	bl	8015e5c <__lshift>
 8012834:	9007      	str	r0, [sp, #28]
 8012836:	2800      	cmp	r0, #0
 8012838:	d100      	bne.n	801283c <_strtod_l+0x7e0>
 801283a:	e67d      	b.n	8012538 <_strtod_l+0x4dc>
 801283c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801283e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012840:	9805      	ldr	r0, [sp, #20]
 8012842:	f003 fb97 	bl	8015f74 <__mdiff>
 8012846:	9006      	str	r0, [sp, #24]
 8012848:	2800      	cmp	r0, #0
 801284a:	d100      	bne.n	801284e <_strtod_l+0x7f2>
 801284c:	e674      	b.n	8012538 <_strtod_l+0x4dc>
 801284e:	2200      	movs	r2, #0
 8012850:	68c3      	ldr	r3, [r0, #12]
 8012852:	9907      	ldr	r1, [sp, #28]
 8012854:	60c2      	str	r2, [r0, #12]
 8012856:	9311      	str	r3, [sp, #68]	; 0x44
 8012858:	f003 fb70 	bl	8015f3c <__mcmp>
 801285c:	2800      	cmp	r0, #0
 801285e:	da6c      	bge.n	801293a <_strtod_l+0x8de>
 8012860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012862:	4333      	orrs	r3, r6
 8012864:	d000      	beq.n	8012868 <_strtod_l+0x80c>
 8012866:	e097      	b.n	8012998 <_strtod_l+0x93c>
 8012868:	033b      	lsls	r3, r7, #12
 801286a:	d000      	beq.n	801286e <_strtod_l+0x812>
 801286c:	e094      	b.n	8012998 <_strtod_l+0x93c>
 801286e:	22d6      	movs	r2, #214	; 0xd6
 8012870:	4b4d      	ldr	r3, [pc, #308]	; (80129a8 <_strtod_l+0x94c>)
 8012872:	04d2      	lsls	r2, r2, #19
 8012874:	403b      	ands	r3, r7
 8012876:	4293      	cmp	r3, r2
 8012878:	d800      	bhi.n	801287c <_strtod_l+0x820>
 801287a:	e08d      	b.n	8012998 <_strtod_l+0x93c>
 801287c:	9b06      	ldr	r3, [sp, #24]
 801287e:	695b      	ldr	r3, [r3, #20]
 8012880:	930a      	str	r3, [sp, #40]	; 0x28
 8012882:	2b00      	cmp	r3, #0
 8012884:	d105      	bne.n	8012892 <_strtod_l+0x836>
 8012886:	9b06      	ldr	r3, [sp, #24]
 8012888:	691b      	ldr	r3, [r3, #16]
 801288a:	930a      	str	r3, [sp, #40]	; 0x28
 801288c:	2b01      	cmp	r3, #1
 801288e:	dc00      	bgt.n	8012892 <_strtod_l+0x836>
 8012890:	e082      	b.n	8012998 <_strtod_l+0x93c>
 8012892:	9906      	ldr	r1, [sp, #24]
 8012894:	2201      	movs	r2, #1
 8012896:	9805      	ldr	r0, [sp, #20]
 8012898:	f003 fae0 	bl	8015e5c <__lshift>
 801289c:	9907      	ldr	r1, [sp, #28]
 801289e:	9006      	str	r0, [sp, #24]
 80128a0:	f003 fb4c 	bl	8015f3c <__mcmp>
 80128a4:	2800      	cmp	r0, #0
 80128a6:	dd77      	ble.n	8012998 <_strtod_l+0x93c>
 80128a8:	9908      	ldr	r1, [sp, #32]
 80128aa:	003b      	movs	r3, r7
 80128ac:	4a3e      	ldr	r2, [pc, #248]	; (80129a8 <_strtod_l+0x94c>)
 80128ae:	2900      	cmp	r1, #0
 80128b0:	d100      	bne.n	80128b4 <_strtod_l+0x858>
 80128b2:	e09e      	b.n	80129f2 <_strtod_l+0x996>
 80128b4:	0011      	movs	r1, r2
 80128b6:	20d6      	movs	r0, #214	; 0xd6
 80128b8:	4039      	ands	r1, r7
 80128ba:	04c0      	lsls	r0, r0, #19
 80128bc:	4281      	cmp	r1, r0
 80128be:	dd00      	ble.n	80128c2 <_strtod_l+0x866>
 80128c0:	e097      	b.n	80129f2 <_strtod_l+0x996>
 80128c2:	23dc      	movs	r3, #220	; 0xdc
 80128c4:	049b      	lsls	r3, r3, #18
 80128c6:	4299      	cmp	r1, r3
 80128c8:	dc00      	bgt.n	80128cc <_strtod_l+0x870>
 80128ca:	e6a6      	b.n	801261a <_strtod_l+0x5be>
 80128cc:	4b37      	ldr	r3, [pc, #220]	; (80129ac <_strtod_l+0x950>)
 80128ce:	0030      	movs	r0, r6
 80128d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80128d2:	2300      	movs	r3, #0
 80128d4:	931a      	str	r3, [sp, #104]	; 0x68
 80128d6:	0039      	movs	r1, r7
 80128d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80128da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80128dc:	f7ee ffd8 	bl	8001890 <__aeabi_dmul>
 80128e0:	0006      	movs	r6, r0
 80128e2:	000f      	movs	r7, r1
 80128e4:	4308      	orrs	r0, r1
 80128e6:	d000      	beq.n	80128ea <_strtod_l+0x88e>
 80128e8:	e62f      	b.n	801254a <_strtod_l+0x4ee>
 80128ea:	2322      	movs	r3, #34	; 0x22
 80128ec:	9a05      	ldr	r2, [sp, #20]
 80128ee:	6013      	str	r3, [r2, #0]
 80128f0:	e62b      	b.n	801254a <_strtod_l+0x4ee>
 80128f2:	2101      	movs	r1, #1
 80128f4:	3b20      	subs	r3, #32
 80128f6:	4249      	negs	r1, r1
 80128f8:	4099      	lsls	r1, r3
 80128fa:	400a      	ands	r2, r1
 80128fc:	0017      	movs	r7, r2
 80128fe:	e6de      	b.n	80126be <_strtod_l+0x662>
 8012900:	2201      	movs	r2, #1
 8012902:	4252      	negs	r2, r2
 8012904:	409a      	lsls	r2, r3
 8012906:	4016      	ands	r6, r2
 8012908:	e6d9      	b.n	80126be <_strtod_l+0x662>
 801290a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801290c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801290e:	1ad4      	subs	r4, r2, r3
 8012910:	e72a      	b.n	8012768 <_strtod_l+0x70c>
 8012912:	4927      	ldr	r1, [pc, #156]	; (80129b0 <_strtod_l+0x954>)
 8012914:	1acb      	subs	r3, r1, r3
 8012916:	0001      	movs	r1, r0
 8012918:	4099      	lsls	r1, r3
 801291a:	9112      	str	r1, [sp, #72]	; 0x48
 801291c:	9014      	str	r0, [sp, #80]	; 0x50
 801291e:	e738      	b.n	8012792 <_strtod_l+0x736>
 8012920:	2300      	movs	r3, #0
 8012922:	9312      	str	r3, [sp, #72]	; 0x48
 8012924:	e7fa      	b.n	801291c <_strtod_l+0x8c0>
 8012926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012928:	9922      	ldr	r1, [sp, #136]	; 0x88
 801292a:	9805      	ldr	r0, [sp, #20]
 801292c:	f003 fa96 	bl	8015e5c <__lshift>
 8012930:	9022      	str	r0, [sp, #136]	; 0x88
 8012932:	2800      	cmp	r0, #0
 8012934:	d000      	beq.n	8012938 <_strtod_l+0x8dc>
 8012936:	e75f      	b.n	80127f8 <_strtod_l+0x79c>
 8012938:	e5fe      	b.n	8012538 <_strtod_l+0x4dc>
 801293a:	970c      	str	r7, [sp, #48]	; 0x30
 801293c:	2800      	cmp	r0, #0
 801293e:	d176      	bne.n	8012a2e <_strtod_l+0x9d2>
 8012940:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012942:	033b      	lsls	r3, r7, #12
 8012944:	0b1b      	lsrs	r3, r3, #12
 8012946:	2a00      	cmp	r2, #0
 8012948:	d038      	beq.n	80129bc <_strtod_l+0x960>
 801294a:	4a1a      	ldr	r2, [pc, #104]	; (80129b4 <_strtod_l+0x958>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d138      	bne.n	80129c2 <_strtod_l+0x966>
 8012950:	2201      	movs	r2, #1
 8012952:	9b08      	ldr	r3, [sp, #32]
 8012954:	4252      	negs	r2, r2
 8012956:	0031      	movs	r1, r6
 8012958:	0010      	movs	r0, r2
 801295a:	2b00      	cmp	r3, #0
 801295c:	d00b      	beq.n	8012976 <_strtod_l+0x91a>
 801295e:	24d4      	movs	r4, #212	; 0xd4
 8012960:	4b11      	ldr	r3, [pc, #68]	; (80129a8 <_strtod_l+0x94c>)
 8012962:	0010      	movs	r0, r2
 8012964:	403b      	ands	r3, r7
 8012966:	04e4      	lsls	r4, r4, #19
 8012968:	42a3      	cmp	r3, r4
 801296a:	d804      	bhi.n	8012976 <_strtod_l+0x91a>
 801296c:	306c      	adds	r0, #108	; 0x6c
 801296e:	0d1b      	lsrs	r3, r3, #20
 8012970:	1ac3      	subs	r3, r0, r3
 8012972:	409a      	lsls	r2, r3
 8012974:	0010      	movs	r0, r2
 8012976:	4281      	cmp	r1, r0
 8012978:	d123      	bne.n	80129c2 <_strtod_l+0x966>
 801297a:	4b0f      	ldr	r3, [pc, #60]	; (80129b8 <_strtod_l+0x95c>)
 801297c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801297e:	429a      	cmp	r2, r3
 8012980:	d102      	bne.n	8012988 <_strtod_l+0x92c>
 8012982:	1c4b      	adds	r3, r1, #1
 8012984:	d100      	bne.n	8012988 <_strtod_l+0x92c>
 8012986:	e5d7      	b.n	8012538 <_strtod_l+0x4dc>
 8012988:	4b07      	ldr	r3, [pc, #28]	; (80129a8 <_strtod_l+0x94c>)
 801298a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801298c:	2600      	movs	r6, #0
 801298e:	401a      	ands	r2, r3
 8012990:	0013      	movs	r3, r2
 8012992:	2280      	movs	r2, #128	; 0x80
 8012994:	0352      	lsls	r2, r2, #13
 8012996:	189f      	adds	r7, r3, r2
 8012998:	9b08      	ldr	r3, [sp, #32]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d196      	bne.n	80128cc <_strtod_l+0x870>
 801299e:	e5d4      	b.n	801254a <_strtod_l+0x4ee>
 80129a0:	0801a900 	.word	0x0801a900
 80129a4:	fffffc02 	.word	0xfffffc02
 80129a8:	7ff00000 	.word	0x7ff00000
 80129ac:	39500000 	.word	0x39500000
 80129b0:	fffffbe2 	.word	0xfffffbe2
 80129b4:	000fffff 	.word	0x000fffff
 80129b8:	7fefffff 	.word	0x7fefffff
 80129bc:	4333      	orrs	r3, r6
 80129be:	d100      	bne.n	80129c2 <_strtod_l+0x966>
 80129c0:	e772      	b.n	80128a8 <_strtod_l+0x84c>
 80129c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d01d      	beq.n	8012a04 <_strtod_l+0x9a8>
 80129c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80129cc:	4213      	tst	r3, r2
 80129ce:	d0e3      	beq.n	8012998 <_strtod_l+0x93c>
 80129d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80129d2:	0030      	movs	r0, r6
 80129d4:	0039      	movs	r1, r7
 80129d6:	9a08      	ldr	r2, [sp, #32]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d017      	beq.n	8012a0c <_strtod_l+0x9b0>
 80129dc:	f7ff fb26 	bl	801202c <sulp>
 80129e0:	0002      	movs	r2, r0
 80129e2:	000b      	movs	r3, r1
 80129e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80129e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80129e8:	f7ed ffe2 	bl	80009b0 <__aeabi_dadd>
 80129ec:	0006      	movs	r6, r0
 80129ee:	000f      	movs	r7, r1
 80129f0:	e7d2      	b.n	8012998 <_strtod_l+0x93c>
 80129f2:	2601      	movs	r6, #1
 80129f4:	4013      	ands	r3, r2
 80129f6:	4a9b      	ldr	r2, [pc, #620]	; (8012c64 <_strtod_l+0xc08>)
 80129f8:	4276      	negs	r6, r6
 80129fa:	189b      	adds	r3, r3, r2
 80129fc:	4a9a      	ldr	r2, [pc, #616]	; (8012c68 <_strtod_l+0xc0c>)
 80129fe:	431a      	orrs	r2, r3
 8012a00:	0017      	movs	r7, r2
 8012a02:	e7c9      	b.n	8012998 <_strtod_l+0x93c>
 8012a04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a06:	4233      	tst	r3, r6
 8012a08:	d0c6      	beq.n	8012998 <_strtod_l+0x93c>
 8012a0a:	e7e1      	b.n	80129d0 <_strtod_l+0x974>
 8012a0c:	f7ff fb0e 	bl	801202c <sulp>
 8012a10:	0002      	movs	r2, r0
 8012a12:	000b      	movs	r3, r1
 8012a14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012a16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a18:	f7ef f9a6 	bl	8001d68 <__aeabi_dsub>
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	0006      	movs	r6, r0
 8012a22:	000f      	movs	r7, r1
 8012a24:	f7ed fd1a 	bl	800045c <__aeabi_dcmpeq>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d0b5      	beq.n	8012998 <_strtod_l+0x93c>
 8012a2c:	e5f5      	b.n	801261a <_strtod_l+0x5be>
 8012a2e:	9907      	ldr	r1, [sp, #28]
 8012a30:	9806      	ldr	r0, [sp, #24]
 8012a32:	f003 fc0f 	bl	8016254 <__ratio>
 8012a36:	2380      	movs	r3, #128	; 0x80
 8012a38:	2200      	movs	r2, #0
 8012a3a:	05db      	lsls	r3, r3, #23
 8012a3c:	0004      	movs	r4, r0
 8012a3e:	000d      	movs	r5, r1
 8012a40:	f7ed fd1c 	bl	800047c <__aeabi_dcmple>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	d079      	beq.n	8012b3c <_strtod_l+0xae0>
 8012a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d04b      	beq.n	8012ae6 <_strtod_l+0xa8a>
 8012a4e:	2300      	movs	r3, #0
 8012a50:	4c86      	ldr	r4, [pc, #536]	; (8012c6c <_strtod_l+0xc10>)
 8012a52:	2500      	movs	r5, #0
 8012a54:	9312      	str	r3, [sp, #72]	; 0x48
 8012a56:	9413      	str	r4, [sp, #76]	; 0x4c
 8012a58:	4c84      	ldr	r4, [pc, #528]	; (8012c6c <_strtod_l+0xc10>)
 8012a5a:	4a85      	ldr	r2, [pc, #532]	; (8012c70 <_strtod_l+0xc14>)
 8012a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a5e:	4013      	ands	r3, r2
 8012a60:	9314      	str	r3, [sp, #80]	; 0x50
 8012a62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a64:	4b83      	ldr	r3, [pc, #524]	; (8012c74 <_strtod_l+0xc18>)
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d000      	beq.n	8012a6c <_strtod_l+0xa10>
 8012a6a:	e0b0      	b.n	8012bce <_strtod_l+0xb72>
 8012a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a70:	921a      	str	r2, [sp, #104]	; 0x68
 8012a72:	931b      	str	r3, [sp, #108]	; 0x6c
 8012a74:	4a80      	ldr	r2, [pc, #512]	; (8012c78 <_strtod_l+0xc1c>)
 8012a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a78:	4694      	mov	ip, r2
 8012a7a:	4463      	add	r3, ip
 8012a7c:	001f      	movs	r7, r3
 8012a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a82:	0030      	movs	r0, r6
 8012a84:	0039      	movs	r1, r7
 8012a86:	920c      	str	r2, [sp, #48]	; 0x30
 8012a88:	930d      	str	r3, [sp, #52]	; 0x34
 8012a8a:	f003 fb0b 	bl	80160a4 <__ulp>
 8012a8e:	0002      	movs	r2, r0
 8012a90:	000b      	movs	r3, r1
 8012a92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012a94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a96:	f7ee fefb 	bl	8001890 <__aeabi_dmul>
 8012a9a:	0032      	movs	r2, r6
 8012a9c:	003b      	movs	r3, r7
 8012a9e:	f7ed ff87 	bl	80009b0 <__aeabi_dadd>
 8012aa2:	4a73      	ldr	r2, [pc, #460]	; (8012c70 <_strtod_l+0xc14>)
 8012aa4:	4b75      	ldr	r3, [pc, #468]	; (8012c7c <_strtod_l+0xc20>)
 8012aa6:	0006      	movs	r6, r0
 8012aa8:	400a      	ands	r2, r1
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d95e      	bls.n	8012b6c <_strtod_l+0xb10>
 8012aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ab0:	4a73      	ldr	r2, [pc, #460]	; (8012c80 <_strtod_l+0xc24>)
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	d103      	bne.n	8012abe <_strtod_l+0xa62>
 8012ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ab8:	3301      	adds	r3, #1
 8012aba:	d100      	bne.n	8012abe <_strtod_l+0xa62>
 8012abc:	e53c      	b.n	8012538 <_strtod_l+0x4dc>
 8012abe:	2601      	movs	r6, #1
 8012ac0:	4f6f      	ldr	r7, [pc, #444]	; (8012c80 <_strtod_l+0xc24>)
 8012ac2:	4276      	negs	r6, r6
 8012ac4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012ac6:	9805      	ldr	r0, [sp, #20]
 8012ac8:	f002 ffde 	bl	8015a88 <_Bfree>
 8012acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ace:	9805      	ldr	r0, [sp, #20]
 8012ad0:	f002 ffda 	bl	8015a88 <_Bfree>
 8012ad4:	9907      	ldr	r1, [sp, #28]
 8012ad6:	9805      	ldr	r0, [sp, #20]
 8012ad8:	f002 ffd6 	bl	8015a88 <_Bfree>
 8012adc:	9906      	ldr	r1, [sp, #24]
 8012ade:	9805      	ldr	r0, [sp, #20]
 8012ae0:	f002 ffd2 	bl	8015a88 <_Bfree>
 8012ae4:	e60f      	b.n	8012706 <_strtod_l+0x6aa>
 8012ae6:	2e00      	cmp	r6, #0
 8012ae8:	d11c      	bne.n	8012b24 <_strtod_l+0xac8>
 8012aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012aec:	031b      	lsls	r3, r3, #12
 8012aee:	d11f      	bne.n	8012b30 <_strtod_l+0xad4>
 8012af0:	2200      	movs	r2, #0
 8012af2:	0020      	movs	r0, r4
 8012af4:	0029      	movs	r1, r5
 8012af6:	4b5d      	ldr	r3, [pc, #372]	; (8012c6c <_strtod_l+0xc10>)
 8012af8:	f7ed fcb6 	bl	8000468 <__aeabi_dcmplt>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d11a      	bne.n	8012b36 <_strtod_l+0xada>
 8012b00:	0020      	movs	r0, r4
 8012b02:	0029      	movs	r1, r5
 8012b04:	2200      	movs	r2, #0
 8012b06:	4b5f      	ldr	r3, [pc, #380]	; (8012c84 <_strtod_l+0xc28>)
 8012b08:	f7ee fec2 	bl	8001890 <__aeabi_dmul>
 8012b0c:	0005      	movs	r5, r0
 8012b0e:	000c      	movs	r4, r1
 8012b10:	2380      	movs	r3, #128	; 0x80
 8012b12:	061b      	lsls	r3, r3, #24
 8012b14:	18e3      	adds	r3, r4, r3
 8012b16:	951e      	str	r5, [sp, #120]	; 0x78
 8012b18:	931f      	str	r3, [sp, #124]	; 0x7c
 8012b1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012b1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b1e:	9212      	str	r2, [sp, #72]	; 0x48
 8012b20:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b22:	e79a      	b.n	8012a5a <_strtod_l+0x9fe>
 8012b24:	2e01      	cmp	r6, #1
 8012b26:	d103      	bne.n	8012b30 <_strtod_l+0xad4>
 8012b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d100      	bne.n	8012b30 <_strtod_l+0xad4>
 8012b2e:	e574      	b.n	801261a <_strtod_l+0x5be>
 8012b30:	2300      	movs	r3, #0
 8012b32:	4c55      	ldr	r4, [pc, #340]	; (8012c88 <_strtod_l+0xc2c>)
 8012b34:	e78d      	b.n	8012a52 <_strtod_l+0x9f6>
 8012b36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012b38:	4c52      	ldr	r4, [pc, #328]	; (8012c84 <_strtod_l+0xc28>)
 8012b3a:	e7e9      	b.n	8012b10 <_strtod_l+0xab4>
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	0020      	movs	r0, r4
 8012b40:	0029      	movs	r1, r5
 8012b42:	4b50      	ldr	r3, [pc, #320]	; (8012c84 <_strtod_l+0xc28>)
 8012b44:	f7ee fea4 	bl	8001890 <__aeabi_dmul>
 8012b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b4a:	0005      	movs	r5, r0
 8012b4c:	000b      	movs	r3, r1
 8012b4e:	000c      	movs	r4, r1
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	d107      	bne.n	8012b64 <_strtod_l+0xb08>
 8012b54:	2280      	movs	r2, #128	; 0x80
 8012b56:	0612      	lsls	r2, r2, #24
 8012b58:	188b      	adds	r3, r1, r2
 8012b5a:	9016      	str	r0, [sp, #88]	; 0x58
 8012b5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8012b5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b62:	e7dc      	b.n	8012b1e <_strtod_l+0xac2>
 8012b64:	0002      	movs	r2, r0
 8012b66:	9216      	str	r2, [sp, #88]	; 0x58
 8012b68:	9317      	str	r3, [sp, #92]	; 0x5c
 8012b6a:	e7f8      	b.n	8012b5e <_strtod_l+0xb02>
 8012b6c:	23d4      	movs	r3, #212	; 0xd4
 8012b6e:	049b      	lsls	r3, r3, #18
 8012b70:	18cf      	adds	r7, r1, r3
 8012b72:	9b08      	ldr	r3, [sp, #32]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d1a5      	bne.n	8012ac4 <_strtod_l+0xa68>
 8012b78:	4b3d      	ldr	r3, [pc, #244]	; (8012c70 <_strtod_l+0xc14>)
 8012b7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b7c:	403b      	ands	r3, r7
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d1a0      	bne.n	8012ac4 <_strtod_l+0xa68>
 8012b82:	0028      	movs	r0, r5
 8012b84:	0021      	movs	r1, r4
 8012b86:	f7ed fd37 	bl	80005f8 <__aeabi_d2lz>
 8012b8a:	f7ed fd71 	bl	8000670 <__aeabi_l2d>
 8012b8e:	0002      	movs	r2, r0
 8012b90:	000b      	movs	r3, r1
 8012b92:	0028      	movs	r0, r5
 8012b94:	0021      	movs	r1, r4
 8012b96:	f7ef f8e7 	bl	8001d68 <__aeabi_dsub>
 8012b9a:	033b      	lsls	r3, r7, #12
 8012b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b9e:	0b1b      	lsrs	r3, r3, #12
 8012ba0:	4333      	orrs	r3, r6
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	0004      	movs	r4, r0
 8012ba6:	000d      	movs	r5, r1
 8012ba8:	4a38      	ldr	r2, [pc, #224]	; (8012c8c <_strtod_l+0xc30>)
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d055      	beq.n	8012c5a <_strtod_l+0xbfe>
 8012bae:	4b38      	ldr	r3, [pc, #224]	; (8012c90 <_strtod_l+0xc34>)
 8012bb0:	f7ed fc5a 	bl	8000468 <__aeabi_dcmplt>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d000      	beq.n	8012bba <_strtod_l+0xb5e>
 8012bb8:	e4c7      	b.n	801254a <_strtod_l+0x4ee>
 8012bba:	0020      	movs	r0, r4
 8012bbc:	0029      	movs	r1, r5
 8012bbe:	4a35      	ldr	r2, [pc, #212]	; (8012c94 <_strtod_l+0xc38>)
 8012bc0:	4b30      	ldr	r3, [pc, #192]	; (8012c84 <_strtod_l+0xc28>)
 8012bc2:	f7ed fc65 	bl	8000490 <__aeabi_dcmpgt>
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	d100      	bne.n	8012bcc <_strtod_l+0xb70>
 8012bca:	e77b      	b.n	8012ac4 <_strtod_l+0xa68>
 8012bcc:	e4bd      	b.n	801254a <_strtod_l+0x4ee>
 8012bce:	9b08      	ldr	r3, [sp, #32]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d02b      	beq.n	8012c2c <_strtod_l+0xbd0>
 8012bd4:	23d4      	movs	r3, #212	; 0xd4
 8012bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012bd8:	04db      	lsls	r3, r3, #19
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d826      	bhi.n	8012c2c <_strtod_l+0xbd0>
 8012bde:	0028      	movs	r0, r5
 8012be0:	0021      	movs	r1, r4
 8012be2:	4a2d      	ldr	r2, [pc, #180]	; (8012c98 <_strtod_l+0xc3c>)
 8012be4:	4b2d      	ldr	r3, [pc, #180]	; (8012c9c <_strtod_l+0xc40>)
 8012be6:	f7ed fc49 	bl	800047c <__aeabi_dcmple>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d017      	beq.n	8012c1e <_strtod_l+0xbc2>
 8012bee:	0028      	movs	r0, r5
 8012bf0:	0021      	movs	r1, r4
 8012bf2:	f7ed fce3 	bl	80005bc <__aeabi_d2uiz>
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	d100      	bne.n	8012bfc <_strtod_l+0xba0>
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	f7ef fcca 	bl	8002594 <__aeabi_ui2d>
 8012c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c02:	0005      	movs	r5, r0
 8012c04:	000b      	movs	r3, r1
 8012c06:	000c      	movs	r4, r1
 8012c08:	2a00      	cmp	r2, #0
 8012c0a:	d122      	bne.n	8012c52 <_strtod_l+0xbf6>
 8012c0c:	2280      	movs	r2, #128	; 0x80
 8012c0e:	0612      	lsls	r2, r2, #24
 8012c10:	188b      	adds	r3, r1, r2
 8012c12:	9018      	str	r0, [sp, #96]	; 0x60
 8012c14:	9319      	str	r3, [sp, #100]	; 0x64
 8012c16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c1a:	9212      	str	r2, [sp, #72]	; 0x48
 8012c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8012c1e:	22d6      	movs	r2, #214	; 0xd6
 8012c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c22:	04d2      	lsls	r2, r2, #19
 8012c24:	189b      	adds	r3, r3, r2
 8012c26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012c28:	1a9b      	subs	r3, r3, r2
 8012c2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8012c2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012c2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012c30:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012c32:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8012c34:	f003 fa36 	bl	80160a4 <__ulp>
 8012c38:	0002      	movs	r2, r0
 8012c3a:	000b      	movs	r3, r1
 8012c3c:	0030      	movs	r0, r6
 8012c3e:	0039      	movs	r1, r7
 8012c40:	f7ee fe26 	bl	8001890 <__aeabi_dmul>
 8012c44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c48:	f7ed feb2 	bl	80009b0 <__aeabi_dadd>
 8012c4c:	0006      	movs	r6, r0
 8012c4e:	000f      	movs	r7, r1
 8012c50:	e78f      	b.n	8012b72 <_strtod_l+0xb16>
 8012c52:	0002      	movs	r2, r0
 8012c54:	9218      	str	r2, [sp, #96]	; 0x60
 8012c56:	9319      	str	r3, [sp, #100]	; 0x64
 8012c58:	e7dd      	b.n	8012c16 <_strtod_l+0xbba>
 8012c5a:	4b11      	ldr	r3, [pc, #68]	; (8012ca0 <_strtod_l+0xc44>)
 8012c5c:	f7ed fc04 	bl	8000468 <__aeabi_dcmplt>
 8012c60:	e7b1      	b.n	8012bc6 <_strtod_l+0xb6a>
 8012c62:	46c0      	nop			; (mov r8, r8)
 8012c64:	fff00000 	.word	0xfff00000
 8012c68:	000fffff 	.word	0x000fffff
 8012c6c:	3ff00000 	.word	0x3ff00000
 8012c70:	7ff00000 	.word	0x7ff00000
 8012c74:	7fe00000 	.word	0x7fe00000
 8012c78:	fcb00000 	.word	0xfcb00000
 8012c7c:	7c9fffff 	.word	0x7c9fffff
 8012c80:	7fefffff 	.word	0x7fefffff
 8012c84:	3fe00000 	.word	0x3fe00000
 8012c88:	bff00000 	.word	0xbff00000
 8012c8c:	94a03595 	.word	0x94a03595
 8012c90:	3fdfffff 	.word	0x3fdfffff
 8012c94:	35afe535 	.word	0x35afe535
 8012c98:	ffc00000 	.word	0xffc00000
 8012c9c:	41dfffff 	.word	0x41dfffff
 8012ca0:	3fcfffff 	.word	0x3fcfffff

08012ca4 <strtod>:
 8012ca4:	b510      	push	{r4, lr}
 8012ca6:	000a      	movs	r2, r1
 8012ca8:	0001      	movs	r1, r0
 8012caa:	4803      	ldr	r0, [pc, #12]	; (8012cb8 <strtod+0x14>)
 8012cac:	4b03      	ldr	r3, [pc, #12]	; (8012cbc <strtod+0x18>)
 8012cae:	6800      	ldr	r0, [r0, #0]
 8012cb0:	f7ff f9d4 	bl	801205c <_strtod_l>
 8012cb4:	bd10      	pop	{r4, pc}
 8012cb6:	46c0      	nop			; (mov r8, r8)
 8012cb8:	20000100 	.word	0x20000100
 8012cbc:	20000948 	.word	0x20000948

08012cc0 <strtok>:
 8012cc0:	4b03      	ldr	r3, [pc, #12]	; (8012cd0 <strtok+0x10>)
 8012cc2:	b510      	push	{r4, lr}
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	325c      	adds	r2, #92	; 0x5c
 8012cca:	f000 f803 	bl	8012cd4 <__strtok_r>
 8012cce:	bd10      	pop	{r4, pc}
 8012cd0:	20000100 	.word	0x20000100

08012cd4 <__strtok_r>:
 8012cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d102      	bne.n	8012ce0 <__strtok_r+0xc>
 8012cda:	6810      	ldr	r0, [r2, #0]
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d013      	beq.n	8012d08 <__strtok_r+0x34>
 8012ce0:	0004      	movs	r4, r0
 8012ce2:	0020      	movs	r0, r4
 8012ce4:	000e      	movs	r6, r1
 8012ce6:	7805      	ldrb	r5, [r0, #0]
 8012ce8:	3401      	adds	r4, #1
 8012cea:	7837      	ldrb	r7, [r6, #0]
 8012cec:	2f00      	cmp	r7, #0
 8012cee:	d104      	bne.n	8012cfa <__strtok_r+0x26>
 8012cf0:	2d00      	cmp	r5, #0
 8012cf2:	d10f      	bne.n	8012d14 <__strtok_r+0x40>
 8012cf4:	0028      	movs	r0, r5
 8012cf6:	6015      	str	r5, [r2, #0]
 8012cf8:	e006      	b.n	8012d08 <__strtok_r+0x34>
 8012cfa:	3601      	adds	r6, #1
 8012cfc:	42bd      	cmp	r5, r7
 8012cfe:	d1f4      	bne.n	8012cea <__strtok_r+0x16>
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d1ee      	bne.n	8012ce2 <__strtok_r+0xe>
 8012d04:	6014      	str	r4, [r2, #0]
 8012d06:	7003      	strb	r3, [r0, #0]
 8012d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d0a:	002f      	movs	r7, r5
 8012d0c:	e00f      	b.n	8012d2e <__strtok_r+0x5a>
 8012d0e:	3301      	adds	r3, #1
 8012d10:	2e00      	cmp	r6, #0
 8012d12:	d104      	bne.n	8012d1e <__strtok_r+0x4a>
 8012d14:	0023      	movs	r3, r4
 8012d16:	3401      	adds	r4, #1
 8012d18:	781d      	ldrb	r5, [r3, #0]
 8012d1a:	0027      	movs	r7, r4
 8012d1c:	000b      	movs	r3, r1
 8012d1e:	781e      	ldrb	r6, [r3, #0]
 8012d20:	42b5      	cmp	r5, r6
 8012d22:	d1f4      	bne.n	8012d0e <__strtok_r+0x3a>
 8012d24:	2d00      	cmp	r5, #0
 8012d26:	d0f0      	beq.n	8012d0a <__strtok_r+0x36>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	3c01      	subs	r4, #1
 8012d2c:	7023      	strb	r3, [r4, #0]
 8012d2e:	6017      	str	r7, [r2, #0]
 8012d30:	e7ea      	b.n	8012d08 <__strtok_r+0x34>
	...

08012d34 <_strtol_l.isra.0>:
 8012d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d36:	b087      	sub	sp, #28
 8012d38:	001e      	movs	r6, r3
 8012d3a:	9005      	str	r0, [sp, #20]
 8012d3c:	9101      	str	r1, [sp, #4]
 8012d3e:	9202      	str	r2, [sp, #8]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d045      	beq.n	8012dd0 <_strtol_l.isra.0+0x9c>
 8012d44:	0008      	movs	r0, r1
 8012d46:	2b24      	cmp	r3, #36	; 0x24
 8012d48:	d842      	bhi.n	8012dd0 <_strtol_l.isra.0+0x9c>
 8012d4a:	4b3f      	ldr	r3, [pc, #252]	; (8012e48 <_strtol_l.isra.0+0x114>)
 8012d4c:	2208      	movs	r2, #8
 8012d4e:	469c      	mov	ip, r3
 8012d50:	0003      	movs	r3, r0
 8012d52:	4661      	mov	r1, ip
 8012d54:	781c      	ldrb	r4, [r3, #0]
 8012d56:	1c45      	adds	r5, r0, #1
 8012d58:	5d09      	ldrb	r1, [r1, r4]
 8012d5a:	0028      	movs	r0, r5
 8012d5c:	000f      	movs	r7, r1
 8012d5e:	4017      	ands	r7, r2
 8012d60:	4211      	tst	r1, r2
 8012d62:	d1f5      	bne.n	8012d50 <_strtol_l.isra.0+0x1c>
 8012d64:	2c2d      	cmp	r4, #45	; 0x2d
 8012d66:	d13a      	bne.n	8012dde <_strtol_l.isra.0+0xaa>
 8012d68:	2701      	movs	r7, #1
 8012d6a:	782c      	ldrb	r4, [r5, #0]
 8012d6c:	1c9d      	adds	r5, r3, #2
 8012d6e:	2e00      	cmp	r6, #0
 8012d70:	d065      	beq.n	8012e3e <_strtol_l.isra.0+0x10a>
 8012d72:	2e10      	cmp	r6, #16
 8012d74:	d109      	bne.n	8012d8a <_strtol_l.isra.0+0x56>
 8012d76:	2c30      	cmp	r4, #48	; 0x30
 8012d78:	d107      	bne.n	8012d8a <_strtol_l.isra.0+0x56>
 8012d7a:	2220      	movs	r2, #32
 8012d7c:	782b      	ldrb	r3, [r5, #0]
 8012d7e:	4393      	bics	r3, r2
 8012d80:	2b58      	cmp	r3, #88	; 0x58
 8012d82:	d157      	bne.n	8012e34 <_strtol_l.isra.0+0x100>
 8012d84:	2610      	movs	r6, #16
 8012d86:	786c      	ldrb	r4, [r5, #1]
 8012d88:	3502      	adds	r5, #2
 8012d8a:	4b30      	ldr	r3, [pc, #192]	; (8012e4c <_strtol_l.isra.0+0x118>)
 8012d8c:	0031      	movs	r1, r6
 8012d8e:	18fb      	adds	r3, r7, r3
 8012d90:	0018      	movs	r0, r3
 8012d92:	9303      	str	r3, [sp, #12]
 8012d94:	f7ed fa62 	bl	800025c <__aeabi_uidivmod>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	4684      	mov	ip, r0
 8012d9e:	0018      	movs	r0, r3
 8012da0:	9104      	str	r1, [sp, #16]
 8012da2:	4252      	negs	r2, r2
 8012da4:	0021      	movs	r1, r4
 8012da6:	3930      	subs	r1, #48	; 0x30
 8012da8:	2909      	cmp	r1, #9
 8012daa:	d81d      	bhi.n	8012de8 <_strtol_l.isra.0+0xb4>
 8012dac:	000c      	movs	r4, r1
 8012dae:	42a6      	cmp	r6, r4
 8012db0:	dd28      	ble.n	8012e04 <_strtol_l.isra.0+0xd0>
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	db24      	blt.n	8012e00 <_strtol_l.isra.0+0xcc>
 8012db6:	0013      	movs	r3, r2
 8012db8:	4584      	cmp	ip, r0
 8012dba:	d306      	bcc.n	8012dca <_strtol_l.isra.0+0x96>
 8012dbc:	d102      	bne.n	8012dc4 <_strtol_l.isra.0+0x90>
 8012dbe:	9904      	ldr	r1, [sp, #16]
 8012dc0:	42a1      	cmp	r1, r4
 8012dc2:	db02      	blt.n	8012dca <_strtol_l.isra.0+0x96>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	4370      	muls	r0, r6
 8012dc8:	1820      	adds	r0, r4, r0
 8012dca:	782c      	ldrb	r4, [r5, #0]
 8012dcc:	3501      	adds	r5, #1
 8012dce:	e7e9      	b.n	8012da4 <_strtol_l.isra.0+0x70>
 8012dd0:	f002 f960 	bl	8015094 <__errno>
 8012dd4:	2316      	movs	r3, #22
 8012dd6:	6003      	str	r3, [r0, #0]
 8012dd8:	2000      	movs	r0, #0
 8012dda:	b007      	add	sp, #28
 8012ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dde:	2c2b      	cmp	r4, #43	; 0x2b
 8012de0:	d1c5      	bne.n	8012d6e <_strtol_l.isra.0+0x3a>
 8012de2:	782c      	ldrb	r4, [r5, #0]
 8012de4:	1c9d      	adds	r5, r3, #2
 8012de6:	e7c2      	b.n	8012d6e <_strtol_l.isra.0+0x3a>
 8012de8:	0021      	movs	r1, r4
 8012dea:	3941      	subs	r1, #65	; 0x41
 8012dec:	2919      	cmp	r1, #25
 8012dee:	d801      	bhi.n	8012df4 <_strtol_l.isra.0+0xc0>
 8012df0:	3c37      	subs	r4, #55	; 0x37
 8012df2:	e7dc      	b.n	8012dae <_strtol_l.isra.0+0x7a>
 8012df4:	0021      	movs	r1, r4
 8012df6:	3961      	subs	r1, #97	; 0x61
 8012df8:	2919      	cmp	r1, #25
 8012dfa:	d803      	bhi.n	8012e04 <_strtol_l.isra.0+0xd0>
 8012dfc:	3c57      	subs	r4, #87	; 0x57
 8012dfe:	e7d6      	b.n	8012dae <_strtol_l.isra.0+0x7a>
 8012e00:	0013      	movs	r3, r2
 8012e02:	e7e2      	b.n	8012dca <_strtol_l.isra.0+0x96>
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	da09      	bge.n	8012e1c <_strtol_l.isra.0+0xe8>
 8012e08:	2322      	movs	r3, #34	; 0x22
 8012e0a:	9a05      	ldr	r2, [sp, #20]
 8012e0c:	9803      	ldr	r0, [sp, #12]
 8012e0e:	6013      	str	r3, [r2, #0]
 8012e10:	9b02      	ldr	r3, [sp, #8]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d0e1      	beq.n	8012dda <_strtol_l.isra.0+0xa6>
 8012e16:	1e6b      	subs	r3, r5, #1
 8012e18:	9301      	str	r3, [sp, #4]
 8012e1a:	e007      	b.n	8012e2c <_strtol_l.isra.0+0xf8>
 8012e1c:	2f00      	cmp	r7, #0
 8012e1e:	d000      	beq.n	8012e22 <_strtol_l.isra.0+0xee>
 8012e20:	4240      	negs	r0, r0
 8012e22:	9a02      	ldr	r2, [sp, #8]
 8012e24:	2a00      	cmp	r2, #0
 8012e26:	d0d8      	beq.n	8012dda <_strtol_l.isra.0+0xa6>
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d1f4      	bne.n	8012e16 <_strtol_l.isra.0+0xe2>
 8012e2c:	9b02      	ldr	r3, [sp, #8]
 8012e2e:	9a01      	ldr	r2, [sp, #4]
 8012e30:	601a      	str	r2, [r3, #0]
 8012e32:	e7d2      	b.n	8012dda <_strtol_l.isra.0+0xa6>
 8012e34:	2430      	movs	r4, #48	; 0x30
 8012e36:	2e00      	cmp	r6, #0
 8012e38:	d1a7      	bne.n	8012d8a <_strtol_l.isra.0+0x56>
 8012e3a:	3608      	adds	r6, #8
 8012e3c:	e7a5      	b.n	8012d8a <_strtol_l.isra.0+0x56>
 8012e3e:	2c30      	cmp	r4, #48	; 0x30
 8012e40:	d09b      	beq.n	8012d7a <_strtol_l.isra.0+0x46>
 8012e42:	260a      	movs	r6, #10
 8012e44:	e7a1      	b.n	8012d8a <_strtol_l.isra.0+0x56>
 8012e46:	46c0      	nop			; (mov r8, r8)
 8012e48:	0801a7cd 	.word	0x0801a7cd
 8012e4c:	7fffffff 	.word	0x7fffffff

08012e50 <strtol>:
 8012e50:	b510      	push	{r4, lr}
 8012e52:	0013      	movs	r3, r2
 8012e54:	000a      	movs	r2, r1
 8012e56:	0001      	movs	r1, r0
 8012e58:	4802      	ldr	r0, [pc, #8]	; (8012e64 <strtol+0x14>)
 8012e5a:	6800      	ldr	r0, [r0, #0]
 8012e5c:	f7ff ff6a 	bl	8012d34 <_strtol_l.isra.0>
 8012e60:	bd10      	pop	{r4, pc}
 8012e62:	46c0      	nop			; (mov r8, r8)
 8012e64:	20000100 	.word	0x20000100

08012e68 <_svfprintf_r>:
 8012e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e6a:	b0d9      	sub	sp, #356	; 0x164
 8012e6c:	001c      	movs	r4, r3
 8012e6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8012e70:	9208      	str	r2, [sp, #32]
 8012e72:	900a      	str	r0, [sp, #40]	; 0x28
 8012e74:	f002 fda8 	bl	80159c8 <_localeconv_r>
 8012e78:	6803      	ldr	r3, [r0, #0]
 8012e7a:	0018      	movs	r0, r3
 8012e7c:	931c      	str	r3, [sp, #112]	; 0x70
 8012e7e:	f7ed f94b 	bl	8000118 <strlen>
 8012e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e84:	9016      	str	r0, [sp, #88]	; 0x58
 8012e86:	899b      	ldrh	r3, [r3, #12]
 8012e88:	061b      	lsls	r3, r3, #24
 8012e8a:	d518      	bpl.n	8012ebe <_svfprintf_r+0x56>
 8012e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e8e:	691b      	ldr	r3, [r3, #16]
 8012e90:	9309      	str	r3, [sp, #36]	; 0x24
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d113      	bne.n	8012ebe <_svfprintf_r+0x56>
 8012e96:	2140      	movs	r1, #64	; 0x40
 8012e98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012e9a:	f7fe fc3f 	bl	801171c <_malloc_r>
 8012e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ea0:	6018      	str	r0, [r3, #0]
 8012ea2:	6118      	str	r0, [r3, #16]
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	d107      	bne.n	8012eb8 <_svfprintf_r+0x50>
 8012ea8:	230c      	movs	r3, #12
 8012eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eac:	6013      	str	r3, [r2, #0]
 8012eae:	3b0d      	subs	r3, #13
 8012eb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8012eb2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012eb4:	b059      	add	sp, #356	; 0x164
 8012eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb8:	2340      	movs	r3, #64	; 0x40
 8012eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ebc:	6153      	str	r3, [r2, #20]
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	932e      	str	r3, [sp, #184]	; 0xb8
 8012ec4:	932d      	str	r3, [sp, #180]	; 0xb4
 8012ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8012ec8:	2300      	movs	r3, #0
 8012eca:	9214      	str	r2, [sp, #80]	; 0x50
 8012ecc:	9315      	str	r3, [sp, #84]	; 0x54
 8012ece:	2300      	movs	r3, #0
 8012ed0:	af2f      	add	r7, sp, #188	; 0xbc
 8012ed2:	972c      	str	r7, [sp, #176]	; 0xb0
 8012ed4:	931f      	str	r3, [sp, #124]	; 0x7c
 8012ed6:	931e      	str	r3, [sp, #120]	; 0x78
 8012ed8:	9312      	str	r3, [sp, #72]	; 0x48
 8012eda:	931b      	str	r3, [sp, #108]	; 0x6c
 8012edc:	931d      	str	r3, [sp, #116]	; 0x74
 8012ede:	9317      	str	r3, [sp, #92]	; 0x5c
 8012ee0:	9d08      	ldr	r5, [sp, #32]
 8012ee2:	782b      	ldrb	r3, [r5, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d002      	beq.n	8012eee <_svfprintf_r+0x86>
 8012ee8:	2b25      	cmp	r3, #37	; 0x25
 8012eea:	d000      	beq.n	8012eee <_svfprintf_r+0x86>
 8012eec:	e092      	b.n	8013014 <_svfprintf_r+0x1ac>
 8012eee:	9b08      	ldr	r3, [sp, #32]
 8012ef0:	1aee      	subs	r6, r5, r3
 8012ef2:	429d      	cmp	r5, r3
 8012ef4:	d017      	beq.n	8012f26 <_svfprintf_r+0xbe>
 8012ef6:	603b      	str	r3, [r7, #0]
 8012ef8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012efa:	607e      	str	r6, [r7, #4]
 8012efc:	199b      	adds	r3, r3, r6
 8012efe:	932e      	str	r3, [sp, #184]	; 0xb8
 8012f00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012f02:	3708      	adds	r7, #8
 8012f04:	9309      	str	r3, [sp, #36]	; 0x24
 8012f06:	3301      	adds	r3, #1
 8012f08:	932d      	str	r3, [sp, #180]	; 0xb4
 8012f0a:	2b07      	cmp	r3, #7
 8012f0c:	dd08      	ble.n	8012f20 <_svfprintf_r+0xb8>
 8012f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012f12:	aa2c      	add	r2, sp, #176	; 0xb0
 8012f14:	f003 fa42 	bl	801639c <__ssprint_r>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	d000      	beq.n	8012f1e <_svfprintf_r+0xb6>
 8012f1c:	e2aa      	b.n	8013474 <_svfprintf_r+0x60c>
 8012f1e:	af2f      	add	r7, sp, #188	; 0xbc
 8012f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012f22:	199b      	adds	r3, r3, r6
 8012f24:	9317      	str	r3, [sp, #92]	; 0x5c
 8012f26:	782b      	ldrb	r3, [r5, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <_svfprintf_r+0xc8>
 8012f2c:	f001 f9d2 	bl	80142d4 <_svfprintf_r+0x146c>
 8012f30:	221b      	movs	r2, #27
 8012f32:	2300      	movs	r3, #0
 8012f34:	a91e      	add	r1, sp, #120	; 0x78
 8012f36:	1852      	adds	r2, r2, r1
 8012f38:	7013      	strb	r3, [r2, #0]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	001e      	movs	r6, r3
 8012f3e:	4252      	negs	r2, r2
 8012f40:	3501      	adds	r5, #1
 8012f42:	9209      	str	r2, [sp, #36]	; 0x24
 8012f44:	9318      	str	r3, [sp, #96]	; 0x60
 8012f46:	1c6b      	adds	r3, r5, #1
 8012f48:	9313      	str	r3, [sp, #76]	; 0x4c
 8012f4a:	782b      	ldrb	r3, [r5, #0]
 8012f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f4e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012f50:	3820      	subs	r0, #32
 8012f52:	285a      	cmp	r0, #90	; 0x5a
 8012f54:	d901      	bls.n	8012f5a <_svfprintf_r+0xf2>
 8012f56:	f000 fe2e 	bl	8013bb6 <_svfprintf_r+0xd4e>
 8012f5a:	f7ed f8ef 	bl	800013c <__gnu_thumb1_case_uhi>
 8012f5e:	0078      	.short	0x0078
 8012f60:	062c062c 	.word	0x062c062c
 8012f64:	062c0082 	.word	0x062c0082
 8012f68:	062c062c 	.word	0x062c062c
 8012f6c:	062c005d 	.word	0x062c005d
 8012f70:	0084062c 	.word	0x0084062c
 8012f74:	062c008c 	.word	0x062c008c
 8012f78:	0091008a 	.word	0x0091008a
 8012f7c:	00b2062c 	.word	0x00b2062c
 8012f80:	00b400b4 	.word	0x00b400b4
 8012f84:	00b400b4 	.word	0x00b400b4
 8012f88:	00b400b4 	.word	0x00b400b4
 8012f8c:	00b400b4 	.word	0x00b400b4
 8012f90:	062c00b4 	.word	0x062c00b4
 8012f94:	062c062c 	.word	0x062c062c
 8012f98:	062c062c 	.word	0x062c062c
 8012f9c:	062c062c 	.word	0x062c062c
 8012fa0:	062c0216 	.word	0x062c0216
 8012fa4:	01cf00e0 	.word	0x01cf00e0
 8012fa8:	02160216 	.word	0x02160216
 8012fac:	062c0216 	.word	0x062c0216
 8012fb0:	062c062c 	.word	0x062c062c
 8012fb4:	00c7062c 	.word	0x00c7062c
 8012fb8:	062c062c 	.word	0x062c062c
 8012fbc:	062c04d6 	.word	0x062c04d6
 8012fc0:	062c062c 	.word	0x062c062c
 8012fc4:	062c051d 	.word	0x062c051d
 8012fc8:	062c053d 	.word	0x062c053d
 8012fcc:	056e062c 	.word	0x056e062c
 8012fd0:	062c062c 	.word	0x062c062c
 8012fd4:	062c062c 	.word	0x062c062c
 8012fd8:	062c062c 	.word	0x062c062c
 8012fdc:	062c062c 	.word	0x062c062c
 8012fe0:	062c0216 	.word	0x062c0216
 8012fe4:	01d100e0 	.word	0x01d100e0
 8012fe8:	02160216 	.word	0x02160216
 8012fec:	00c90216 	.word	0x00c90216
 8012ff0:	00dc01d1 	.word	0x00dc01d1
 8012ff4:	00d5062c 	.word	0x00d5062c
 8012ff8:	04b9062c 	.word	0x04b9062c
 8012ffc:	050d04d8 	.word	0x050d04d8
 8013000:	062c00dc 	.word	0x062c00dc
 8013004:	0080051d 	.word	0x0080051d
 8013008:	062c053f 	.word	0x062c053f
 801300c:	058e062c 	.word	0x058e062c
 8013010:	0080062c 	.word	0x0080062c
 8013014:	3501      	adds	r5, #1
 8013016:	e764      	b.n	8012ee2 <_svfprintf_r+0x7a>
 8013018:	980a      	ldr	r0, [sp, #40]	; 0x28
 801301a:	f002 fcd5 	bl	80159c8 <_localeconv_r>
 801301e:	6843      	ldr	r3, [r0, #4]
 8013020:	0018      	movs	r0, r3
 8013022:	931d      	str	r3, [sp, #116]	; 0x74
 8013024:	f7ed f878 	bl	8000118 <strlen>
 8013028:	901b      	str	r0, [sp, #108]	; 0x6c
 801302a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801302c:	f002 fccc 	bl	80159c8 <_localeconv_r>
 8013030:	6883      	ldr	r3, [r0, #8]
 8013032:	9312      	str	r3, [sp, #72]	; 0x48
 8013034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013036:	2b00      	cmp	r3, #0
 8013038:	d011      	beq.n	801305e <_svfprintf_r+0x1f6>
 801303a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00e      	beq.n	801305e <_svfprintf_r+0x1f6>
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d00b      	beq.n	801305e <_svfprintf_r+0x1f6>
 8013046:	2380      	movs	r3, #128	; 0x80
 8013048:	00db      	lsls	r3, r3, #3
 801304a:	431e      	orrs	r6, r3
 801304c:	e007      	b.n	801305e <_svfprintf_r+0x1f6>
 801304e:	231b      	movs	r3, #27
 8013050:	aa1e      	add	r2, sp, #120	; 0x78
 8013052:	189b      	adds	r3, r3, r2
 8013054:	781a      	ldrb	r2, [r3, #0]
 8013056:	2a00      	cmp	r2, #0
 8013058:	d101      	bne.n	801305e <_svfprintf_r+0x1f6>
 801305a:	3220      	adds	r2, #32
 801305c:	701a      	strb	r2, [r3, #0]
 801305e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013060:	e771      	b.n	8012f46 <_svfprintf_r+0xde>
 8013062:	2301      	movs	r3, #1
 8013064:	e7f1      	b.n	801304a <_svfprintf_r+0x1e2>
 8013066:	cc08      	ldmia	r4!, {r3}
 8013068:	9318      	str	r3, [sp, #96]	; 0x60
 801306a:	2b00      	cmp	r3, #0
 801306c:	daf7      	bge.n	801305e <_svfprintf_r+0x1f6>
 801306e:	425b      	negs	r3, r3
 8013070:	9318      	str	r3, [sp, #96]	; 0x60
 8013072:	2304      	movs	r3, #4
 8013074:	e7e9      	b.n	801304a <_svfprintf_r+0x1e2>
 8013076:	231b      	movs	r3, #27
 8013078:	aa1e      	add	r2, sp, #120	; 0x78
 801307a:	189b      	adds	r3, r3, r2
 801307c:	222b      	movs	r2, #43	; 0x2b
 801307e:	e7ed      	b.n	801305c <_svfprintf_r+0x1f4>
 8013080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013082:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013084:	7812      	ldrb	r2, [r2, #0]
 8013086:	3301      	adds	r3, #1
 8013088:	920f      	str	r2, [sp, #60]	; 0x3c
 801308a:	2a2a      	cmp	r2, #42	; 0x2a
 801308c:	d010      	beq.n	80130b0 <_svfprintf_r+0x248>
 801308e:	2200      	movs	r2, #0
 8013090:	9209      	str	r2, [sp, #36]	; 0x24
 8013092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013094:	9313      	str	r3, [sp, #76]	; 0x4c
 8013096:	3a30      	subs	r2, #48	; 0x30
 8013098:	2a09      	cmp	r2, #9
 801309a:	d900      	bls.n	801309e <_svfprintf_r+0x236>
 801309c:	e757      	b.n	8012f4e <_svfprintf_r+0xe6>
 801309e:	210a      	movs	r1, #10
 80130a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130a2:	4348      	muls	r0, r1
 80130a4:	1882      	adds	r2, r0, r2
 80130a6:	9209      	str	r2, [sp, #36]	; 0x24
 80130a8:	781a      	ldrb	r2, [r3, #0]
 80130aa:	3301      	adds	r3, #1
 80130ac:	920f      	str	r2, [sp, #60]	; 0x3c
 80130ae:	e7f0      	b.n	8013092 <_svfprintf_r+0x22a>
 80130b0:	cc04      	ldmia	r4!, {r2}
 80130b2:	9209      	str	r2, [sp, #36]	; 0x24
 80130b4:	2a00      	cmp	r2, #0
 80130b6:	da02      	bge.n	80130be <_svfprintf_r+0x256>
 80130b8:	2201      	movs	r2, #1
 80130ba:	4252      	negs	r2, r2
 80130bc:	9209      	str	r2, [sp, #36]	; 0x24
 80130be:	9313      	str	r3, [sp, #76]	; 0x4c
 80130c0:	e7cd      	b.n	801305e <_svfprintf_r+0x1f6>
 80130c2:	2380      	movs	r3, #128	; 0x80
 80130c4:	e7c1      	b.n	801304a <_svfprintf_r+0x1e2>
 80130c6:	2200      	movs	r2, #0
 80130c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80130ca:	9218      	str	r2, [sp, #96]	; 0x60
 80130cc:	210a      	movs	r1, #10
 80130ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80130d0:	434a      	muls	r2, r1
 80130d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80130d4:	3930      	subs	r1, #48	; 0x30
 80130d6:	188a      	adds	r2, r1, r2
 80130d8:	9218      	str	r2, [sp, #96]	; 0x60
 80130da:	001a      	movs	r2, r3
 80130dc:	7812      	ldrb	r2, [r2, #0]
 80130de:	3301      	adds	r3, #1
 80130e0:	920f      	str	r2, [sp, #60]	; 0x3c
 80130e2:	3a30      	subs	r2, #48	; 0x30
 80130e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80130e6:	2a09      	cmp	r2, #9
 80130e8:	d9f0      	bls.n	80130cc <_svfprintf_r+0x264>
 80130ea:	e730      	b.n	8012f4e <_svfprintf_r+0xe6>
 80130ec:	2308      	movs	r3, #8
 80130ee:	e7ac      	b.n	801304a <_svfprintf_r+0x1e2>
 80130f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b68      	cmp	r3, #104	; 0x68
 80130f6:	d105      	bne.n	8013104 <_svfprintf_r+0x29c>
 80130f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80130fa:	3301      	adds	r3, #1
 80130fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80130fe:	2380      	movs	r3, #128	; 0x80
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	e7a2      	b.n	801304a <_svfprintf_r+0x1e2>
 8013104:	2340      	movs	r3, #64	; 0x40
 8013106:	e7a0      	b.n	801304a <_svfprintf_r+0x1e2>
 8013108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2b6c      	cmp	r3, #108	; 0x6c
 801310e:	d104      	bne.n	801311a <_svfprintf_r+0x2b2>
 8013110:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013112:	3301      	adds	r3, #1
 8013114:	9313      	str	r3, [sp, #76]	; 0x4c
 8013116:	2320      	movs	r3, #32
 8013118:	e797      	b.n	801304a <_svfprintf_r+0x1e2>
 801311a:	2310      	movs	r3, #16
 801311c:	e795      	b.n	801304a <_svfprintf_r+0x1e2>
 801311e:	0022      	movs	r2, r4
 8013120:	ca08      	ldmia	r2!, {r3}
 8013122:	a83f      	add	r0, sp, #252	; 0xfc
 8013124:	920e      	str	r2, [sp, #56]	; 0x38
 8013126:	221b      	movs	r2, #27
 8013128:	7003      	strb	r3, [r0, #0]
 801312a:	2300      	movs	r3, #0
 801312c:	a91e      	add	r1, sp, #120	; 0x78
 801312e:	1852      	adds	r2, r2, r1
 8013130:	7013      	strb	r3, [r2, #0]
 8013132:	930c      	str	r3, [sp, #48]	; 0x30
 8013134:	3301      	adds	r3, #1
 8013136:	9309      	str	r3, [sp, #36]	; 0x24
 8013138:	2300      	movs	r3, #0
 801313a:	001d      	movs	r5, r3
 801313c:	9319      	str	r3, [sp, #100]	; 0x64
 801313e:	9310      	str	r3, [sp, #64]	; 0x40
 8013140:	9311      	str	r3, [sp, #68]	; 0x44
 8013142:	9008      	str	r0, [sp, #32]
 8013144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013148:	931a      	str	r3, [sp, #104]	; 0x68
 801314a:	4293      	cmp	r3, r2
 801314c:	da00      	bge.n	8013150 <_svfprintf_r+0x2e8>
 801314e:	921a      	str	r2, [sp, #104]	; 0x68
 8013150:	231b      	movs	r3, #27
 8013152:	aa1e      	add	r2, sp, #120	; 0x78
 8013154:	189b      	adds	r3, r3, r2
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	1e5a      	subs	r2, r3, #1
 801315a:	4193      	sbcs	r3, r2
 801315c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801315e:	18d3      	adds	r3, r2, r3
 8013160:	931a      	str	r3, [sp, #104]	; 0x68
 8013162:	0032      	movs	r2, r6
 8013164:	2302      	movs	r3, #2
 8013166:	401a      	ands	r2, r3
 8013168:	9220      	str	r2, [sp, #128]	; 0x80
 801316a:	421e      	tst	r6, r3
 801316c:	d002      	beq.n	8013174 <_svfprintf_r+0x30c>
 801316e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013170:	3302      	adds	r3, #2
 8013172:	931a      	str	r3, [sp, #104]	; 0x68
 8013174:	2384      	movs	r3, #132	; 0x84
 8013176:	0032      	movs	r2, r6
 8013178:	401a      	ands	r2, r3
 801317a:	9221      	str	r2, [sp, #132]	; 0x84
 801317c:	421e      	tst	r6, r3
 801317e:	d121      	bne.n	80131c4 <_svfprintf_r+0x35c>
 8013180:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013182:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013184:	1a9c      	subs	r4, r3, r2
 8013186:	2c00      	cmp	r4, #0
 8013188:	dd1c      	ble.n	80131c4 <_svfprintf_r+0x35c>
 801318a:	0039      	movs	r1, r7
 801318c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801318e:	48c5      	ldr	r0, [pc, #788]	; (80134a4 <_svfprintf_r+0x63c>)
 8013190:	9322      	str	r3, [sp, #136]	; 0x88
 8013192:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013194:	3301      	adds	r3, #1
 8013196:	3108      	adds	r1, #8
 8013198:	6038      	str	r0, [r7, #0]
 801319a:	2c10      	cmp	r4, #16
 801319c:	dd01      	ble.n	80131a2 <_svfprintf_r+0x33a>
 801319e:	f000 fd1d 	bl	8013bdc <_svfprintf_r+0xd74>
 80131a2:	607c      	str	r4, [r7, #4]
 80131a4:	18a4      	adds	r4, r4, r2
 80131a6:	000f      	movs	r7, r1
 80131a8:	942e      	str	r4, [sp, #184]	; 0xb8
 80131aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80131ac:	2b07      	cmp	r3, #7
 80131ae:	dd09      	ble.n	80131c4 <_svfprintf_r+0x35c>
 80131b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80131b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80131b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80131b6:	f003 f8f1 	bl	801639c <__ssprint_r>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d001      	beq.n	80131c2 <_svfprintf_r+0x35a>
 80131be:	f001 f868 	bl	8014292 <_svfprintf_r+0x142a>
 80131c2:	af2f      	add	r7, sp, #188	; 0xbc
 80131c4:	231b      	movs	r3, #27
 80131c6:	aa1e      	add	r2, sp, #120	; 0x78
 80131c8:	189b      	adds	r3, r3, r2
 80131ca:	781a      	ldrb	r2, [r3, #0]
 80131cc:	2a00      	cmp	r2, #0
 80131ce:	d017      	beq.n	8013200 <_svfprintf_r+0x398>
 80131d0:	603b      	str	r3, [r7, #0]
 80131d2:	2301      	movs	r3, #1
 80131d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80131d6:	607b      	str	r3, [r7, #4]
 80131d8:	0013      	movs	r3, r2
 80131da:	3301      	adds	r3, #1
 80131dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80131de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80131e0:	3708      	adds	r7, #8
 80131e2:	9322      	str	r3, [sp, #136]	; 0x88
 80131e4:	3301      	adds	r3, #1
 80131e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80131e8:	2b07      	cmp	r3, #7
 80131ea:	dd09      	ble.n	8013200 <_svfprintf_r+0x398>
 80131ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80131ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80131f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80131f2:	f003 f8d3 	bl	801639c <__ssprint_r>
 80131f6:	2800      	cmp	r0, #0
 80131f8:	d001      	beq.n	80131fe <_svfprintf_r+0x396>
 80131fa:	f001 f84a 	bl	8014292 <_svfprintf_r+0x142a>
 80131fe:	af2f      	add	r7, sp, #188	; 0xbc
 8013200:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013202:	2b00      	cmp	r3, #0
 8013204:	d019      	beq.n	801323a <_svfprintf_r+0x3d2>
 8013206:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013208:	9320      	str	r3, [sp, #128]	; 0x80
 801320a:	ab25      	add	r3, sp, #148	; 0x94
 801320c:	603b      	str	r3, [r7, #0]
 801320e:	2302      	movs	r3, #2
 8013210:	607b      	str	r3, [r7, #4]
 8013212:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013214:	3708      	adds	r7, #8
 8013216:	3302      	adds	r3, #2
 8013218:	932e      	str	r3, [sp, #184]	; 0xb8
 801321a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801321c:	9320      	str	r3, [sp, #128]	; 0x80
 801321e:	3301      	adds	r3, #1
 8013220:	932d      	str	r3, [sp, #180]	; 0xb4
 8013222:	2b07      	cmp	r3, #7
 8013224:	dd09      	ble.n	801323a <_svfprintf_r+0x3d2>
 8013226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013228:	980a      	ldr	r0, [sp, #40]	; 0x28
 801322a:	aa2c      	add	r2, sp, #176	; 0xb0
 801322c:	f003 f8b6 	bl	801639c <__ssprint_r>
 8013230:	2800      	cmp	r0, #0
 8013232:	d001      	beq.n	8013238 <_svfprintf_r+0x3d0>
 8013234:	f001 f82d 	bl	8014292 <_svfprintf_r+0x142a>
 8013238:	af2f      	add	r7, sp, #188	; 0xbc
 801323a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801323c:	2b80      	cmp	r3, #128	; 0x80
 801323e:	d121      	bne.n	8013284 <_svfprintf_r+0x41c>
 8013240:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013242:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013244:	1a9c      	subs	r4, r3, r2
 8013246:	2c00      	cmp	r4, #0
 8013248:	dd1c      	ble.n	8013284 <_svfprintf_r+0x41c>
 801324a:	0039      	movs	r1, r7
 801324c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801324e:	4896      	ldr	r0, [pc, #600]	; (80134a8 <_svfprintf_r+0x640>)
 8013250:	9320      	str	r3, [sp, #128]	; 0x80
 8013252:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013254:	3301      	adds	r3, #1
 8013256:	3108      	adds	r1, #8
 8013258:	6038      	str	r0, [r7, #0]
 801325a:	2c10      	cmp	r4, #16
 801325c:	dd01      	ble.n	8013262 <_svfprintf_r+0x3fa>
 801325e:	f000 fcd1 	bl	8013c04 <_svfprintf_r+0xd9c>
 8013262:	607c      	str	r4, [r7, #4]
 8013264:	18a4      	adds	r4, r4, r2
 8013266:	000f      	movs	r7, r1
 8013268:	942e      	str	r4, [sp, #184]	; 0xb8
 801326a:	932d      	str	r3, [sp, #180]	; 0xb4
 801326c:	2b07      	cmp	r3, #7
 801326e:	dd09      	ble.n	8013284 <_svfprintf_r+0x41c>
 8013270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013272:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013274:	aa2c      	add	r2, sp, #176	; 0xb0
 8013276:	f003 f891 	bl	801639c <__ssprint_r>
 801327a:	2800      	cmp	r0, #0
 801327c:	d001      	beq.n	8013282 <_svfprintf_r+0x41a>
 801327e:	f001 f808 	bl	8014292 <_svfprintf_r+0x142a>
 8013282:	af2f      	add	r7, sp, #188	; 0xbc
 8013284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013288:	1a9c      	subs	r4, r3, r2
 801328a:	2c00      	cmp	r4, #0
 801328c:	dd1c      	ble.n	80132c8 <_svfprintf_r+0x460>
 801328e:	0039      	movs	r1, r7
 8013290:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013292:	4885      	ldr	r0, [pc, #532]	; (80134a8 <_svfprintf_r+0x640>)
 8013294:	9319      	str	r3, [sp, #100]	; 0x64
 8013296:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013298:	3301      	adds	r3, #1
 801329a:	3108      	adds	r1, #8
 801329c:	6038      	str	r0, [r7, #0]
 801329e:	2c10      	cmp	r4, #16
 80132a0:	dd01      	ble.n	80132a6 <_svfprintf_r+0x43e>
 80132a2:	f000 fcc3 	bl	8013c2c <_svfprintf_r+0xdc4>
 80132a6:	1912      	adds	r2, r2, r4
 80132a8:	607c      	str	r4, [r7, #4]
 80132aa:	922e      	str	r2, [sp, #184]	; 0xb8
 80132ac:	000f      	movs	r7, r1
 80132ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80132b0:	2b07      	cmp	r3, #7
 80132b2:	dd09      	ble.n	80132c8 <_svfprintf_r+0x460>
 80132b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80132b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80132ba:	f003 f86f 	bl	801639c <__ssprint_r>
 80132be:	2800      	cmp	r0, #0
 80132c0:	d001      	beq.n	80132c6 <_svfprintf_r+0x45e>
 80132c2:	f000 ffe6 	bl	8014292 <_svfprintf_r+0x142a>
 80132c6:	af2f      	add	r7, sp, #188	; 0xbc
 80132c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80132ca:	9319      	str	r3, [sp, #100]	; 0x64
 80132cc:	05f3      	lsls	r3, r6, #23
 80132ce:	d501      	bpl.n	80132d4 <_svfprintf_r+0x46c>
 80132d0:	f000 fcc8 	bl	8013c64 <_svfprintf_r+0xdfc>
 80132d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132d6:	9b08      	ldr	r3, [sp, #32]
 80132d8:	4694      	mov	ip, r2
 80132da:	603b      	str	r3, [r7, #0]
 80132dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132de:	607b      	str	r3, [r7, #4]
 80132e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80132e2:	4463      	add	r3, ip
 80132e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80132e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80132e8:	9308      	str	r3, [sp, #32]
 80132ea:	3301      	adds	r3, #1
 80132ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80132ee:	2b07      	cmp	r3, #7
 80132f0:	dd01      	ble.n	80132f6 <_svfprintf_r+0x48e>
 80132f2:	f000 fda8 	bl	8013e46 <_svfprintf_r+0xfde>
 80132f6:	3708      	adds	r7, #8
 80132f8:	f000 fcfb 	bl	8013cf2 <_svfprintf_r+0xe8a>
 80132fc:	2310      	movs	r3, #16
 80132fe:	431e      	orrs	r6, r3
 8013300:	06b3      	lsls	r3, r6, #26
 8013302:	d530      	bpl.n	8013366 <_svfprintf_r+0x4fe>
 8013304:	2307      	movs	r3, #7
 8013306:	3407      	adds	r4, #7
 8013308:	439c      	bics	r4, r3
 801330a:	0022      	movs	r2, r4
 801330c:	ca18      	ldmia	r2!, {r3, r4}
 801330e:	9306      	str	r3, [sp, #24]
 8013310:	9407      	str	r4, [sp, #28]
 8013312:	920e      	str	r2, [sp, #56]	; 0x38
 8013314:	9a07      	ldr	r2, [sp, #28]
 8013316:	2301      	movs	r3, #1
 8013318:	2a00      	cmp	r2, #0
 801331a:	da0b      	bge.n	8013334 <_svfprintf_r+0x4cc>
 801331c:	9c06      	ldr	r4, [sp, #24]
 801331e:	9d07      	ldr	r5, [sp, #28]
 8013320:	2200      	movs	r2, #0
 8013322:	4261      	negs	r1, r4
 8013324:	41aa      	sbcs	r2, r5
 8013326:	9106      	str	r1, [sp, #24]
 8013328:	9207      	str	r2, [sp, #28]
 801332a:	221b      	movs	r2, #27
 801332c:	a91e      	add	r1, sp, #120	; 0x78
 801332e:	1852      	adds	r2, r2, r1
 8013330:	212d      	movs	r1, #45	; 0x2d
 8013332:	7011      	strb	r1, [r2, #0]
 8013334:	9907      	ldr	r1, [sp, #28]
 8013336:	9a06      	ldr	r2, [sp, #24]
 8013338:	430a      	orrs	r2, r1
 801333a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801333c:	3101      	adds	r1, #1
 801333e:	d101      	bne.n	8013344 <_svfprintf_r+0x4dc>
 8013340:	f000 ffd5 	bl	80142ee <_svfprintf_r+0x1486>
 8013344:	2180      	movs	r1, #128	; 0x80
 8013346:	0035      	movs	r5, r6
 8013348:	438d      	bics	r5, r1
 801334a:	2a00      	cmp	r2, #0
 801334c:	d001      	beq.n	8013352 <_svfprintf_r+0x4ea>
 801334e:	f000 ffd3 	bl	80142f8 <_svfprintf_r+0x1490>
 8013352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013354:	2a00      	cmp	r2, #0
 8013356:	d101      	bne.n	801335c <_svfprintf_r+0x4f4>
 8013358:	f000 fc20 	bl	8013b9c <_svfprintf_r+0xd34>
 801335c:	2b01      	cmp	r3, #1
 801335e:	d001      	beq.n	8013364 <_svfprintf_r+0x4fc>
 8013360:	f000 ffce 	bl	8014300 <_svfprintf_r+0x1498>
 8013364:	e3b1      	b.n	8013aca <_svfprintf_r+0xc62>
 8013366:	1d23      	adds	r3, r4, #4
 8013368:	930e      	str	r3, [sp, #56]	; 0x38
 801336a:	06f3      	lsls	r3, r6, #27
 801336c:	d504      	bpl.n	8013378 <_svfprintf_r+0x510>
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	9306      	str	r3, [sp, #24]
 8013372:	17db      	asrs	r3, r3, #31
 8013374:	9307      	str	r3, [sp, #28]
 8013376:	e7cd      	b.n	8013314 <_svfprintf_r+0x4ac>
 8013378:	6823      	ldr	r3, [r4, #0]
 801337a:	0672      	lsls	r2, r6, #25
 801337c:	d501      	bpl.n	8013382 <_svfprintf_r+0x51a>
 801337e:	b21b      	sxth	r3, r3
 8013380:	e7f6      	b.n	8013370 <_svfprintf_r+0x508>
 8013382:	05b2      	lsls	r2, r6, #22
 8013384:	d5f4      	bpl.n	8013370 <_svfprintf_r+0x508>
 8013386:	b25b      	sxtb	r3, r3
 8013388:	e7f2      	b.n	8013370 <_svfprintf_r+0x508>
 801338a:	2307      	movs	r3, #7
 801338c:	3407      	adds	r4, #7
 801338e:	439c      	bics	r4, r3
 8013390:	0022      	movs	r2, r4
 8013392:	ca18      	ldmia	r2!, {r3, r4}
 8013394:	920e      	str	r2, [sp, #56]	; 0x38
 8013396:	2201      	movs	r2, #1
 8013398:	9314      	str	r3, [sp, #80]	; 0x50
 801339a:	9415      	str	r4, [sp, #84]	; 0x54
 801339c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801339e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80133a0:	005c      	lsls	r4, r3, #1
 80133a2:	0864      	lsrs	r4, r4, #1
 80133a4:	0028      	movs	r0, r5
 80133a6:	0021      	movs	r1, r4
 80133a8:	4b40      	ldr	r3, [pc, #256]	; (80134ac <_svfprintf_r+0x644>)
 80133aa:	4252      	negs	r2, r2
 80133ac:	f7ef f86e 	bl	800248c <__aeabi_dcmpun>
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d126      	bne.n	8013402 <_svfprintf_r+0x59a>
 80133b4:	2201      	movs	r2, #1
 80133b6:	0028      	movs	r0, r5
 80133b8:	0021      	movs	r1, r4
 80133ba:	4b3c      	ldr	r3, [pc, #240]	; (80134ac <_svfprintf_r+0x644>)
 80133bc:	4252      	negs	r2, r2
 80133be:	f7ed f85d 	bl	800047c <__aeabi_dcmple>
 80133c2:	2800      	cmp	r0, #0
 80133c4:	d11d      	bne.n	8013402 <_svfprintf_r+0x59a>
 80133c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80133c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80133ca:	2200      	movs	r2, #0
 80133cc:	2300      	movs	r3, #0
 80133ce:	f7ed f84b 	bl	8000468 <__aeabi_dcmplt>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d004      	beq.n	80133e0 <_svfprintf_r+0x578>
 80133d6:	231b      	movs	r3, #27
 80133d8:	aa1e      	add	r2, sp, #120	; 0x78
 80133da:	189b      	adds	r3, r3, r2
 80133dc:	222d      	movs	r2, #45	; 0x2d
 80133de:	701a      	strb	r2, [r3, #0]
 80133e0:	4b33      	ldr	r3, [pc, #204]	; (80134b0 <_svfprintf_r+0x648>)
 80133e2:	9308      	str	r3, [sp, #32]
 80133e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133e6:	2b47      	cmp	r3, #71	; 0x47
 80133e8:	dd01      	ble.n	80133ee <_svfprintf_r+0x586>
 80133ea:	4b32      	ldr	r3, [pc, #200]	; (80134b4 <_svfprintf_r+0x64c>)
 80133ec:	9308      	str	r3, [sp, #32]
 80133ee:	2380      	movs	r3, #128	; 0x80
 80133f0:	439e      	bics	r6, r3
 80133f2:	2300      	movs	r3, #0
 80133f4:	930c      	str	r3, [sp, #48]	; 0x30
 80133f6:	3303      	adds	r3, #3
 80133f8:	9309      	str	r3, [sp, #36]	; 0x24
 80133fa:	2300      	movs	r3, #0
 80133fc:	9319      	str	r3, [sp, #100]	; 0x64
 80133fe:	f000 ffae 	bl	801435e <_svfprintf_r+0x14f6>
 8013402:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013406:	0010      	movs	r0, r2
 8013408:	0019      	movs	r1, r3
 801340a:	f7ef f83f 	bl	800248c <__aeabi_dcmpun>
 801340e:	2800      	cmp	r0, #0
 8013410:	d00e      	beq.n	8013430 <_svfprintf_r+0x5c8>
 8013412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013414:	2b00      	cmp	r3, #0
 8013416:	da04      	bge.n	8013422 <_svfprintf_r+0x5ba>
 8013418:	231b      	movs	r3, #27
 801341a:	aa1e      	add	r2, sp, #120	; 0x78
 801341c:	189b      	adds	r3, r3, r2
 801341e:	222d      	movs	r2, #45	; 0x2d
 8013420:	701a      	strb	r2, [r3, #0]
 8013422:	4b25      	ldr	r3, [pc, #148]	; (80134b8 <_svfprintf_r+0x650>)
 8013424:	9308      	str	r3, [sp, #32]
 8013426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013428:	2b47      	cmp	r3, #71	; 0x47
 801342a:	dde0      	ble.n	80133ee <_svfprintf_r+0x586>
 801342c:	4b23      	ldr	r3, [pc, #140]	; (80134bc <_svfprintf_r+0x654>)
 801342e:	e7dd      	b.n	80133ec <_svfprintf_r+0x584>
 8013430:	2320      	movs	r3, #32
 8013432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013434:	439a      	bics	r2, r3
 8013436:	9210      	str	r2, [sp, #64]	; 0x40
 8013438:	2a41      	cmp	r2, #65	; 0x41
 801343a:	d123      	bne.n	8013484 <_svfprintf_r+0x61c>
 801343c:	2230      	movs	r2, #48	; 0x30
 801343e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013440:	ab25      	add	r3, sp, #148	; 0x94
 8013442:	701a      	strb	r2, [r3, #0]
 8013444:	3248      	adds	r2, #72	; 0x48
 8013446:	2961      	cmp	r1, #97	; 0x61
 8013448:	d000      	beq.n	801344c <_svfprintf_r+0x5e4>
 801344a:	3a20      	subs	r2, #32
 801344c:	705a      	strb	r2, [r3, #1]
 801344e:	2302      	movs	r3, #2
 8013450:	431e      	orrs	r6, r3
 8013452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013454:	2b63      	cmp	r3, #99	; 0x63
 8013456:	dd33      	ble.n	80134c0 <_svfprintf_r+0x658>
 8013458:	980a      	ldr	r0, [sp, #40]	; 0x28
 801345a:	1c59      	adds	r1, r3, #1
 801345c:	f7fe f95e 	bl	801171c <_malloc_r>
 8013460:	9008      	str	r0, [sp, #32]
 8013462:	2800      	cmp	r0, #0
 8013464:	d000      	beq.n	8013468 <_svfprintf_r+0x600>
 8013466:	e141      	b.n	80136ec <_svfprintf_r+0x884>
 8013468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801346a:	899a      	ldrh	r2, [r3, #12]
 801346c:	2340      	movs	r3, #64	; 0x40
 801346e:	4313      	orrs	r3, r2
 8013470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013472:	8193      	strh	r3, [r2, #12]
 8013474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013476:	899b      	ldrh	r3, [r3, #12]
 8013478:	065b      	lsls	r3, r3, #25
 801347a:	d400      	bmi.n	801347e <_svfprintf_r+0x616>
 801347c:	e519      	b.n	8012eb2 <_svfprintf_r+0x4a>
 801347e:	2301      	movs	r3, #1
 8013480:	425b      	negs	r3, r3
 8013482:	e515      	b.n	8012eb0 <_svfprintf_r+0x48>
 8013484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013486:	900c      	str	r0, [sp, #48]	; 0x30
 8013488:	3301      	adds	r3, #1
 801348a:	d100      	bne.n	801348e <_svfprintf_r+0x626>
 801348c:	e131      	b.n	80136f2 <_svfprintf_r+0x88a>
 801348e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013490:	2b47      	cmp	r3, #71	; 0x47
 8013492:	d119      	bne.n	80134c8 <_svfprintf_r+0x660>
 8013494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013496:	2b00      	cmp	r3, #0
 8013498:	d116      	bne.n	80134c8 <_svfprintf_r+0x660>
 801349a:	930c      	str	r3, [sp, #48]	; 0x30
 801349c:	3301      	adds	r3, #1
 801349e:	9309      	str	r3, [sp, #36]	; 0x24
 80134a0:	e012      	b.n	80134c8 <_svfprintf_r+0x660>
 80134a2:	46c0      	nop			; (mov r8, r8)
 80134a4:	0801a95c 	.word	0x0801a95c
 80134a8:	0801a96c 	.word	0x0801a96c
 80134ac:	7fefffff 	.word	0x7fefffff
 80134b0:	0801a928 	.word	0x0801a928
 80134b4:	0801a92c 	.word	0x0801a92c
 80134b8:	0801a930 	.word	0x0801a930
 80134bc:	0801a934 	.word	0x0801a934
 80134c0:	2300      	movs	r3, #0
 80134c2:	930c      	str	r3, [sp, #48]	; 0x30
 80134c4:	ab3f      	add	r3, sp, #252	; 0xfc
 80134c6:	9308      	str	r3, [sp, #32]
 80134c8:	2380      	movs	r3, #128	; 0x80
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	4333      	orrs	r3, r6
 80134ce:	9320      	str	r3, [sp, #128]	; 0x80
 80134d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	db00      	blt.n	80134da <_svfprintf_r+0x672>
 80134d8:	e10d      	b.n	80136f6 <_svfprintf_r+0x88e>
 80134da:	2280      	movs	r2, #128	; 0x80
 80134dc:	0612      	lsls	r2, r2, #24
 80134de:	4694      	mov	ip, r2
 80134e0:	4463      	add	r3, ip
 80134e2:	930d      	str	r3, [sp, #52]	; 0x34
 80134e4:	232d      	movs	r3, #45	; 0x2d
 80134e6:	9322      	str	r3, [sp, #136]	; 0x88
 80134e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134ea:	2b41      	cmp	r3, #65	; 0x41
 80134ec:	d000      	beq.n	80134f0 <_svfprintf_r+0x688>
 80134ee:	e11b      	b.n	8013728 <_svfprintf_r+0x8c0>
 80134f0:	0020      	movs	r0, r4
 80134f2:	aa26      	add	r2, sp, #152	; 0x98
 80134f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80134f6:	f002 ff19 	bl	801632c <frexp>
 80134fa:	23ff      	movs	r3, #255	; 0xff
 80134fc:	2200      	movs	r2, #0
 80134fe:	059b      	lsls	r3, r3, #22
 8013500:	f7ee f9c6 	bl	8001890 <__aeabi_dmul>
 8013504:	2200      	movs	r2, #0
 8013506:	2300      	movs	r3, #0
 8013508:	0004      	movs	r4, r0
 801350a:	000d      	movs	r5, r1
 801350c:	f7ec ffa6 	bl	800045c <__aeabi_dcmpeq>
 8013510:	2800      	cmp	r0, #0
 8013512:	d001      	beq.n	8013518 <_svfprintf_r+0x6b0>
 8013514:	2301      	movs	r3, #1
 8013516:	9326      	str	r3, [sp, #152]	; 0x98
 8013518:	4bc6      	ldr	r3, [pc, #792]	; (8013834 <_svfprintf_r+0x9cc>)
 801351a:	9319      	str	r3, [sp, #100]	; 0x64
 801351c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801351e:	2b61      	cmp	r3, #97	; 0x61
 8013520:	d001      	beq.n	8013526 <_svfprintf_r+0x6be>
 8013522:	4bc5      	ldr	r3, [pc, #788]	; (8013838 <_svfprintf_r+0x9d0>)
 8013524:	9319      	str	r3, [sp, #100]	; 0x64
 8013526:	9b08      	ldr	r3, [sp, #32]
 8013528:	930d      	str	r3, [sp, #52]	; 0x34
 801352a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801352c:	3b01      	subs	r3, #1
 801352e:	9311      	str	r3, [sp, #68]	; 0x44
 8013530:	2200      	movs	r2, #0
 8013532:	4bc2      	ldr	r3, [pc, #776]	; (801383c <_svfprintf_r+0x9d4>)
 8013534:	0020      	movs	r0, r4
 8013536:	0029      	movs	r1, r5
 8013538:	f7ee f9aa 	bl	8001890 <__aeabi_dmul>
 801353c:	000d      	movs	r5, r1
 801353e:	0004      	movs	r4, r0
 8013540:	f7ee ffc2 	bl	80024c8 <__aeabi_d2iz>
 8013544:	9021      	str	r0, [sp, #132]	; 0x84
 8013546:	f7ee fff5 	bl	8002534 <__aeabi_i2d>
 801354a:	0002      	movs	r2, r0
 801354c:	000b      	movs	r3, r1
 801354e:	0020      	movs	r0, r4
 8013550:	0029      	movs	r1, r5
 8013552:	f7ee fc09 	bl	8001d68 <__aeabi_dsub>
 8013556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013558:	000d      	movs	r5, r1
 801355a:	001a      	movs	r2, r3
 801355c:	3201      	adds	r2, #1
 801355e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013560:	920d      	str	r2, [sp, #52]	; 0x34
 8013562:	9223      	str	r2, [sp, #140]	; 0x8c
 8013564:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013566:	0004      	movs	r4, r0
 8013568:	5c52      	ldrb	r2, [r2, r1]
 801356a:	701a      	strb	r2, [r3, #0]
 801356c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801356e:	931a      	str	r3, [sp, #104]	; 0x68
 8013570:	3301      	adds	r3, #1
 8013572:	d00a      	beq.n	801358a <_svfprintf_r+0x722>
 8013574:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013576:	2200      	movs	r2, #0
 8013578:	3b01      	subs	r3, #1
 801357a:	9311      	str	r3, [sp, #68]	; 0x44
 801357c:	0020      	movs	r0, r4
 801357e:	2300      	movs	r3, #0
 8013580:	0029      	movs	r1, r5
 8013582:	f7ec ff6b 	bl	800045c <__aeabi_dcmpeq>
 8013586:	2800      	cmp	r0, #0
 8013588:	d0d2      	beq.n	8013530 <_svfprintf_r+0x6c8>
 801358a:	2200      	movs	r2, #0
 801358c:	0020      	movs	r0, r4
 801358e:	0029      	movs	r1, r5
 8013590:	4bab      	ldr	r3, [pc, #684]	; (8013840 <_svfprintf_r+0x9d8>)
 8013592:	f7ec ff7d 	bl	8000490 <__aeabi_dcmpgt>
 8013596:	2800      	cmp	r0, #0
 8013598:	d10c      	bne.n	80135b4 <_svfprintf_r+0x74c>
 801359a:	2200      	movs	r2, #0
 801359c:	0020      	movs	r0, r4
 801359e:	0029      	movs	r1, r5
 80135a0:	4ba7      	ldr	r3, [pc, #668]	; (8013840 <_svfprintf_r+0x9d8>)
 80135a2:	f7ec ff5b 	bl	800045c <__aeabi_dcmpeq>
 80135a6:	2800      	cmp	r0, #0
 80135a8:	d100      	bne.n	80135ac <_svfprintf_r+0x744>
 80135aa:	e0b7      	b.n	801371c <_svfprintf_r+0x8b4>
 80135ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135ae:	07db      	lsls	r3, r3, #31
 80135b0:	d400      	bmi.n	80135b4 <_svfprintf_r+0x74c>
 80135b2:	e0b3      	b.n	801371c <_svfprintf_r+0x8b4>
 80135b4:	2030      	movs	r0, #48	; 0x30
 80135b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135b8:	932a      	str	r3, [sp, #168]	; 0xa8
 80135ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80135bc:	7bdb      	ldrb	r3, [r3, #15]
 80135be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80135c0:	3a01      	subs	r2, #1
 80135c2:	922a      	str	r2, [sp, #168]	; 0xa8
 80135c4:	7811      	ldrb	r1, [r2, #0]
 80135c6:	4299      	cmp	r1, r3
 80135c8:	d100      	bne.n	80135cc <_svfprintf_r+0x764>
 80135ca:	e097      	b.n	80136fc <_svfprintf_r+0x894>
 80135cc:	1c4b      	adds	r3, r1, #1
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	2939      	cmp	r1, #57	; 0x39
 80135d2:	d101      	bne.n	80135d8 <_svfprintf_r+0x770>
 80135d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80135d6:	7a9b      	ldrb	r3, [r3, #10]
 80135d8:	7013      	strb	r3, [r2, #0]
 80135da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80135dc:	9a08      	ldr	r2, [sp, #32]
 80135de:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80135e0:	1a9b      	subs	r3, r3, r2
 80135e2:	930d      	str	r3, [sp, #52]	; 0x34
 80135e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80135e6:	2b47      	cmp	r3, #71	; 0x47
 80135e8:	d000      	beq.n	80135ec <_svfprintf_r+0x784>
 80135ea:	e0eb      	b.n	80137c4 <_svfprintf_r+0x95c>
 80135ec:	1ceb      	adds	r3, r5, #3
 80135ee:	db03      	blt.n	80135f8 <_svfprintf_r+0x790>
 80135f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135f2:	42ab      	cmp	r3, r5
 80135f4:	db00      	blt.n	80135f8 <_svfprintf_r+0x790>
 80135f6:	e113      	b.n	8013820 <_svfprintf_r+0x9b8>
 80135f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135fa:	3b02      	subs	r3, #2
 80135fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80135fe:	223c      	movs	r2, #60	; 0x3c
 8013600:	466b      	mov	r3, sp
 8013602:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013604:	189b      	adds	r3, r3, r2
 8013606:	1e6c      	subs	r4, r5, #1
 8013608:	3a1c      	subs	r2, #28
 801360a:	2000      	movs	r0, #0
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	9426      	str	r4, [sp, #152]	; 0x98
 8013610:	4391      	bics	r1, r2
 8013612:	2941      	cmp	r1, #65	; 0x41
 8013614:	d102      	bne.n	801361c <_svfprintf_r+0x7b4>
 8013616:	330f      	adds	r3, #15
 8013618:	b2db      	uxtb	r3, r3
 801361a:	3001      	adds	r0, #1
 801361c:	a928      	add	r1, sp, #160	; 0xa0
 801361e:	700b      	strb	r3, [r1, #0]
 8013620:	232b      	movs	r3, #43	; 0x2b
 8013622:	2c00      	cmp	r4, #0
 8013624:	da02      	bge.n	801362c <_svfprintf_r+0x7c4>
 8013626:	2401      	movs	r4, #1
 8013628:	3302      	adds	r3, #2
 801362a:	1b64      	subs	r4, r4, r5
 801362c:	704b      	strb	r3, [r1, #1]
 801362e:	2c09      	cmp	r4, #9
 8013630:	dc00      	bgt.n	8013634 <_svfprintf_r+0x7cc>
 8013632:	e0e1      	b.n	80137f8 <_svfprintf_r+0x990>
 8013634:	2337      	movs	r3, #55	; 0x37
 8013636:	250a      	movs	r5, #10
 8013638:	aa1e      	add	r2, sp, #120	; 0x78
 801363a:	189b      	adds	r3, r3, r2
 801363c:	9310      	str	r3, [sp, #64]	; 0x40
 801363e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013640:	0020      	movs	r0, r4
 8013642:	9309      	str	r3, [sp, #36]	; 0x24
 8013644:	0029      	movs	r1, r5
 8013646:	3b01      	subs	r3, #1
 8013648:	9310      	str	r3, [sp, #64]	; 0x40
 801364a:	f7ec fef1 	bl	8000430 <__aeabi_idivmod>
 801364e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013650:	3130      	adds	r1, #48	; 0x30
 8013652:	7019      	strb	r1, [r3, #0]
 8013654:	0020      	movs	r0, r4
 8013656:	0029      	movs	r1, r5
 8013658:	9411      	str	r4, [sp, #68]	; 0x44
 801365a:	f7ec fe03 	bl	8000264 <__divsi3>
 801365e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013660:	0004      	movs	r4, r0
 8013662:	2b63      	cmp	r3, #99	; 0x63
 8013664:	dceb      	bgt.n	801363e <_svfprintf_r+0x7d6>
 8013666:	222a      	movs	r2, #42	; 0x2a
 8013668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801366a:	a81e      	add	r0, sp, #120	; 0x78
 801366c:	1e99      	subs	r1, r3, #2
 801366e:	1812      	adds	r2, r2, r0
 8013670:	2037      	movs	r0, #55	; 0x37
 8013672:	000b      	movs	r3, r1
 8013674:	3430      	adds	r4, #48	; 0x30
 8013676:	700c      	strb	r4, [r1, #0]
 8013678:	ac1e      	add	r4, sp, #120	; 0x78
 801367a:	1900      	adds	r0, r0, r4
 801367c:	4283      	cmp	r3, r0
 801367e:	d200      	bcs.n	8013682 <_svfprintf_r+0x81a>
 8013680:	e0b5      	b.n	80137ee <_svfprintf_r+0x986>
 8013682:	2300      	movs	r3, #0
 8013684:	4281      	cmp	r1, r0
 8013686:	d804      	bhi.n	8013692 <_svfprintf_r+0x82a>
 8013688:	aa1e      	add	r2, sp, #120	; 0x78
 801368a:	3339      	adds	r3, #57	; 0x39
 801368c:	189b      	adds	r3, r3, r2
 801368e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013690:	1a9b      	subs	r3, r3, r2
 8013692:	222a      	movs	r2, #42	; 0x2a
 8013694:	a91e      	add	r1, sp, #120	; 0x78
 8013696:	1852      	adds	r2, r2, r1
 8013698:	18d3      	adds	r3, r2, r3
 801369a:	aa28      	add	r2, sp, #160	; 0xa0
 801369c:	1a9b      	subs	r3, r3, r2
 801369e:	931e      	str	r3, [sp, #120]	; 0x78
 80136a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80136a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136a4:	4694      	mov	ip, r2
 80136a6:	4463      	add	r3, ip
 80136a8:	9309      	str	r3, [sp, #36]	; 0x24
 80136aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	dc01      	bgt.n	80136b4 <_svfprintf_r+0x84c>
 80136b0:	07f3      	lsls	r3, r6, #31
 80136b2:	d504      	bpl.n	80136be <_svfprintf_r+0x856>
 80136b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80136b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136b8:	4694      	mov	ip, r2
 80136ba:	4463      	add	r3, ip
 80136bc:	9309      	str	r3, [sp, #36]	; 0x24
 80136be:	2280      	movs	r2, #128	; 0x80
 80136c0:	4b60      	ldr	r3, [pc, #384]	; (8013844 <_svfprintf_r+0x9dc>)
 80136c2:	0052      	lsls	r2, r2, #1
 80136c4:	4033      	ands	r3, r6
 80136c6:	431a      	orrs	r2, r3
 80136c8:	2300      	movs	r3, #0
 80136ca:	001d      	movs	r5, r3
 80136cc:	9220      	str	r2, [sp, #128]	; 0x80
 80136ce:	9310      	str	r3, [sp, #64]	; 0x40
 80136d0:	9311      	str	r3, [sp, #68]	; 0x44
 80136d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d100      	bne.n	80136da <_svfprintf_r+0x872>
 80136d8:	e27b      	b.n	8013bd2 <_svfprintf_r+0xd6a>
 80136da:	231b      	movs	r3, #27
 80136dc:	aa1e      	add	r2, sp, #120	; 0x78
 80136de:	189b      	adds	r3, r3, r2
 80136e0:	222d      	movs	r2, #45	; 0x2d
 80136e2:	701a      	strb	r2, [r3, #0]
 80136e4:	2300      	movs	r3, #0
 80136e6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80136e8:	9319      	str	r3, [sp, #100]	; 0x64
 80136ea:	e52b      	b.n	8013144 <_svfprintf_r+0x2dc>
 80136ec:	9b08      	ldr	r3, [sp, #32]
 80136ee:	930c      	str	r3, [sp, #48]	; 0x30
 80136f0:	e6ea      	b.n	80134c8 <_svfprintf_r+0x660>
 80136f2:	2306      	movs	r3, #6
 80136f4:	e6d3      	b.n	801349e <_svfprintf_r+0x636>
 80136f6:	930d      	str	r3, [sp, #52]	; 0x34
 80136f8:	2300      	movs	r3, #0
 80136fa:	e6f4      	b.n	80134e6 <_svfprintf_r+0x67e>
 80136fc:	7010      	strb	r0, [r2, #0]
 80136fe:	e75e      	b.n	80135be <_svfprintf_r+0x756>
 8013700:	7018      	strb	r0, [r3, #0]
 8013702:	3301      	adds	r3, #1
 8013704:	1aca      	subs	r2, r1, r3
 8013706:	d5fb      	bpl.n	8013700 <_svfprintf_r+0x898>
 8013708:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801370a:	2300      	movs	r3, #0
 801370c:	3201      	adds	r2, #1
 801370e:	db01      	blt.n	8013714 <_svfprintf_r+0x8ac>
 8013710:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013712:	3301      	adds	r3, #1
 8013714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013716:	18d3      	adds	r3, r2, r3
 8013718:	9323      	str	r3, [sp, #140]	; 0x8c
 801371a:	e75e      	b.n	80135da <_svfprintf_r+0x772>
 801371c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801371e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013720:	2030      	movs	r0, #48	; 0x30
 8013722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013724:	1851      	adds	r1, r2, r1
 8013726:	e7ed      	b.n	8013704 <_svfprintf_r+0x89c>
 8013728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801372a:	2b46      	cmp	r3, #70	; 0x46
 801372c:	d006      	beq.n	801373c <_svfprintf_r+0x8d4>
 801372e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013730:	2b45      	cmp	r3, #69	; 0x45
 8013732:	d101      	bne.n	8013738 <_svfprintf_r+0x8d0>
 8013734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013736:	1c5d      	adds	r5, r3, #1
 8013738:	2302      	movs	r3, #2
 801373a:	e001      	b.n	8013740 <_svfprintf_r+0x8d8>
 801373c:	2303      	movs	r3, #3
 801373e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013740:	aa2a      	add	r2, sp, #168	; 0xa8
 8013742:	9204      	str	r2, [sp, #16]
 8013744:	aa27      	add	r2, sp, #156	; 0x9c
 8013746:	9203      	str	r2, [sp, #12]
 8013748:	aa26      	add	r2, sp, #152	; 0x98
 801374a:	9202      	str	r2, [sp, #8]
 801374c:	9300      	str	r3, [sp, #0]
 801374e:	0022      	movs	r2, r4
 8013750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013752:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013754:	9501      	str	r5, [sp, #4]
 8013756:	f000 feb7 	bl	80144c8 <_dtoa_r>
 801375a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801375c:	9008      	str	r0, [sp, #32]
 801375e:	2b47      	cmp	r3, #71	; 0x47
 8013760:	d103      	bne.n	801376a <_svfprintf_r+0x902>
 8013762:	07f3      	lsls	r3, r6, #31
 8013764:	d401      	bmi.n	801376a <_svfprintf_r+0x902>
 8013766:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013768:	e738      	b.n	80135dc <_svfprintf_r+0x774>
 801376a:	9b08      	ldr	r3, [sp, #32]
 801376c:	195b      	adds	r3, r3, r5
 801376e:	9311      	str	r3, [sp, #68]	; 0x44
 8013770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013772:	2b46      	cmp	r3, #70	; 0x46
 8013774:	d113      	bne.n	801379e <_svfprintf_r+0x936>
 8013776:	9b08      	ldr	r3, [sp, #32]
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	2b30      	cmp	r3, #48	; 0x30
 801377c:	d10a      	bne.n	8013794 <_svfprintf_r+0x92c>
 801377e:	2200      	movs	r2, #0
 8013780:	2300      	movs	r3, #0
 8013782:	0020      	movs	r0, r4
 8013784:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013786:	f7ec fe69 	bl	800045c <__aeabi_dcmpeq>
 801378a:	2800      	cmp	r0, #0
 801378c:	d102      	bne.n	8013794 <_svfprintf_r+0x92c>
 801378e:	2301      	movs	r3, #1
 8013790:	1b5d      	subs	r5, r3, r5
 8013792:	9526      	str	r5, [sp, #152]	; 0x98
 8013794:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013798:	4694      	mov	ip, r2
 801379a:	4463      	add	r3, ip
 801379c:	9311      	str	r3, [sp, #68]	; 0x44
 801379e:	2200      	movs	r2, #0
 80137a0:	2300      	movs	r3, #0
 80137a2:	0020      	movs	r0, r4
 80137a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80137a6:	f7ec fe59 	bl	800045c <__aeabi_dcmpeq>
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d001      	beq.n	80137b2 <_svfprintf_r+0x94a>
 80137ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137b0:	932a      	str	r3, [sp, #168]	; 0xa8
 80137b2:	2230      	movs	r2, #48	; 0x30
 80137b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80137b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80137b8:	4299      	cmp	r1, r3
 80137ba:	d9d4      	bls.n	8013766 <_svfprintf_r+0x8fe>
 80137bc:	1c59      	adds	r1, r3, #1
 80137be:	912a      	str	r1, [sp, #168]	; 0xa8
 80137c0:	701a      	strb	r2, [r3, #0]
 80137c2:	e7f7      	b.n	80137b4 <_svfprintf_r+0x94c>
 80137c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137c6:	2b46      	cmp	r3, #70	; 0x46
 80137c8:	d000      	beq.n	80137cc <_svfprintf_r+0x964>
 80137ca:	e718      	b.n	80135fe <_svfprintf_r+0x796>
 80137cc:	2201      	movs	r2, #1
 80137ce:	0033      	movs	r3, r6
 80137d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137d2:	4013      	ands	r3, r2
 80137d4:	430b      	orrs	r3, r1
 80137d6:	2d00      	cmp	r5, #0
 80137d8:	dd1c      	ble.n	8013814 <_svfprintf_r+0x9ac>
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d04f      	beq.n	801387e <_svfprintf_r+0xa16>
 80137de:	000a      	movs	r2, r1
 80137e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80137e2:	18eb      	adds	r3, r5, r3
 80137e4:	18d3      	adds	r3, r2, r3
 80137e6:	9309      	str	r3, [sp, #36]	; 0x24
 80137e8:	2366      	movs	r3, #102	; 0x66
 80137ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80137ec:	e039      	b.n	8013862 <_svfprintf_r+0x9fa>
 80137ee:	781c      	ldrb	r4, [r3, #0]
 80137f0:	3301      	adds	r3, #1
 80137f2:	7014      	strb	r4, [r2, #0]
 80137f4:	3201      	adds	r2, #1
 80137f6:	e741      	b.n	801367c <_svfprintf_r+0x814>
 80137f8:	222a      	movs	r2, #42	; 0x2a
 80137fa:	ab1e      	add	r3, sp, #120	; 0x78
 80137fc:	18d2      	adds	r2, r2, r3
 80137fe:	2800      	cmp	r0, #0
 8013800:	d104      	bne.n	801380c <_svfprintf_r+0x9a4>
 8013802:	2330      	movs	r3, #48	; 0x30
 8013804:	222b      	movs	r2, #43	; 0x2b
 8013806:	708b      	strb	r3, [r1, #2]
 8013808:	ab1e      	add	r3, sp, #120	; 0x78
 801380a:	18d2      	adds	r2, r2, r3
 801380c:	3430      	adds	r4, #48	; 0x30
 801380e:	1c53      	adds	r3, r2, #1
 8013810:	7014      	strb	r4, [r2, #0]
 8013812:	e742      	b.n	801369a <_svfprintf_r+0x832>
 8013814:	2b00      	cmp	r3, #0
 8013816:	d034      	beq.n	8013882 <_svfprintf_r+0xa1a>
 8013818:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801381a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801381c:	3301      	adds	r3, #1
 801381e:	e7e1      	b.n	80137e4 <_svfprintf_r+0x97c>
 8013820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013822:	429d      	cmp	r5, r3
 8013824:	db10      	blt.n	8013848 <_svfprintf_r+0x9e0>
 8013826:	07f3      	lsls	r3, r6, #31
 8013828:	d52f      	bpl.n	801388a <_svfprintf_r+0xa22>
 801382a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801382c:	18eb      	adds	r3, r5, r3
 801382e:	9309      	str	r3, [sp, #36]	; 0x24
 8013830:	2367      	movs	r3, #103	; 0x67
 8013832:	e7da      	b.n	80137ea <_svfprintf_r+0x982>
 8013834:	0801a938 	.word	0x0801a938
 8013838:	0801a949 	.word	0x0801a949
 801383c:	40300000 	.word	0x40300000
 8013840:	3fe00000 	.word	0x3fe00000
 8013844:	fffffbff 	.word	0xfffffbff
 8013848:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801384a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801384c:	4694      	mov	ip, r2
 801384e:	4463      	add	r3, ip
 8013850:	9309      	str	r3, [sp, #36]	; 0x24
 8013852:	2367      	movs	r3, #103	; 0x67
 8013854:	930f      	str	r3, [sp, #60]	; 0x3c
 8013856:	2d00      	cmp	r5, #0
 8013858:	dc03      	bgt.n	8013862 <_svfprintf_r+0x9fa>
 801385a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801385c:	1b58      	subs	r0, r3, r5
 801385e:	1c43      	adds	r3, r0, #1
 8013860:	9309      	str	r3, [sp, #36]	; 0x24
 8013862:	2380      	movs	r3, #128	; 0x80
 8013864:	0032      	movs	r2, r6
 8013866:	00db      	lsls	r3, r3, #3
 8013868:	401a      	ands	r2, r3
 801386a:	9211      	str	r2, [sp, #68]	; 0x44
 801386c:	2200      	movs	r2, #0
 801386e:	9210      	str	r2, [sp, #64]	; 0x40
 8013870:	421e      	tst	r6, r3
 8013872:	d100      	bne.n	8013876 <_svfprintf_r+0xa0e>
 8013874:	e72d      	b.n	80136d2 <_svfprintf_r+0x86a>
 8013876:	4295      	cmp	r5, r2
 8013878:	dc27      	bgt.n	80138ca <_svfprintf_r+0xa62>
 801387a:	9211      	str	r2, [sp, #68]	; 0x44
 801387c:	e729      	b.n	80136d2 <_svfprintf_r+0x86a>
 801387e:	9509      	str	r5, [sp, #36]	; 0x24
 8013880:	e7b2      	b.n	80137e8 <_svfprintf_r+0x980>
 8013882:	2366      	movs	r3, #102	; 0x66
 8013884:	9209      	str	r2, [sp, #36]	; 0x24
 8013886:	930f      	str	r3, [sp, #60]	; 0x3c
 8013888:	e7eb      	b.n	8013862 <_svfprintf_r+0x9fa>
 801388a:	9509      	str	r5, [sp, #36]	; 0x24
 801388c:	e7d0      	b.n	8013830 <_svfprintf_r+0x9c8>
 801388e:	42ab      	cmp	r3, r5
 8013890:	da0e      	bge.n	80138b0 <_svfprintf_r+0xa48>
 8013892:	1aed      	subs	r5, r5, r3
 8013894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013896:	785b      	ldrb	r3, [r3, #1]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d012      	beq.n	80138c2 <_svfprintf_r+0xa5a>
 801389c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801389e:	3301      	adds	r3, #1
 80138a0:	9311      	str	r3, [sp, #68]	; 0x44
 80138a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80138a4:	3301      	adds	r3, #1
 80138a6:	9312      	str	r3, [sp, #72]	; 0x48
 80138a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	2bff      	cmp	r3, #255	; 0xff
 80138ae:	d1ee      	bne.n	801388e <_svfprintf_r+0xa26>
 80138b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138b4:	189b      	adds	r3, r3, r2
 80138b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80138b8:	4353      	muls	r3, r2
 80138ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138bc:	189b      	adds	r3, r3, r2
 80138be:	9309      	str	r3, [sp, #36]	; 0x24
 80138c0:	e707      	b.n	80136d2 <_svfprintf_r+0x86a>
 80138c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138c4:	3301      	adds	r3, #1
 80138c6:	9310      	str	r3, [sp, #64]	; 0x40
 80138c8:	e7ee      	b.n	80138a8 <_svfprintf_r+0xa40>
 80138ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138cc:	9311      	str	r3, [sp, #68]	; 0x44
 80138ce:	e7eb      	b.n	80138a8 <_svfprintf_r+0xa40>
 80138d0:	0022      	movs	r2, r4
 80138d2:	ca08      	ldmia	r2!, {r3}
 80138d4:	920e      	str	r2, [sp, #56]	; 0x38
 80138d6:	06b2      	lsls	r2, r6, #26
 80138d8:	d508      	bpl.n	80138ec <_svfprintf_r+0xa84>
 80138da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80138dc:	601a      	str	r2, [r3, #0]
 80138de:	17d2      	asrs	r2, r2, #31
 80138e0:	605a      	str	r2, [r3, #4]
 80138e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80138e6:	9308      	str	r3, [sp, #32]
 80138e8:	f7ff fafa 	bl	8012ee0 <_svfprintf_r+0x78>
 80138ec:	06f2      	lsls	r2, r6, #27
 80138ee:	d502      	bpl.n	80138f6 <_svfprintf_r+0xa8e>
 80138f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80138f2:	601a      	str	r2, [r3, #0]
 80138f4:	e7f5      	b.n	80138e2 <_svfprintf_r+0xa7a>
 80138f6:	0672      	lsls	r2, r6, #25
 80138f8:	d502      	bpl.n	8013900 <_svfprintf_r+0xa98>
 80138fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80138fc:	801a      	strh	r2, [r3, #0]
 80138fe:	e7f0      	b.n	80138e2 <_svfprintf_r+0xa7a>
 8013900:	05b2      	lsls	r2, r6, #22
 8013902:	d5f5      	bpl.n	80138f0 <_svfprintf_r+0xa88>
 8013904:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013906:	701a      	strb	r2, [r3, #0]
 8013908:	e7eb      	b.n	80138e2 <_svfprintf_r+0xa7a>
 801390a:	2310      	movs	r3, #16
 801390c:	431e      	orrs	r6, r3
 801390e:	2320      	movs	r3, #32
 8013910:	0031      	movs	r1, r6
 8013912:	4019      	ands	r1, r3
 8013914:	421e      	tst	r6, r3
 8013916:	d00f      	beq.n	8013938 <_svfprintf_r+0xad0>
 8013918:	3b19      	subs	r3, #25
 801391a:	3407      	adds	r4, #7
 801391c:	439c      	bics	r4, r3
 801391e:	0022      	movs	r2, r4
 8013920:	ca18      	ldmia	r2!, {r3, r4}
 8013922:	9306      	str	r3, [sp, #24]
 8013924:	9407      	str	r4, [sp, #28]
 8013926:	920e      	str	r2, [sp, #56]	; 0x38
 8013928:	4bca      	ldr	r3, [pc, #808]	; (8013c54 <_svfprintf_r+0xdec>)
 801392a:	401e      	ands	r6, r3
 801392c:	2300      	movs	r3, #0
 801392e:	221b      	movs	r2, #27
 8013930:	a91e      	add	r1, sp, #120	; 0x78
 8013932:	1852      	adds	r2, r2, r1
 8013934:	2100      	movs	r1, #0
 8013936:	e4fc      	b.n	8013332 <_svfprintf_r+0x4ca>
 8013938:	1d23      	adds	r3, r4, #4
 801393a:	0032      	movs	r2, r6
 801393c:	930e      	str	r3, [sp, #56]	; 0x38
 801393e:	2310      	movs	r3, #16
 8013940:	401a      	ands	r2, r3
 8013942:	421e      	tst	r6, r3
 8013944:	d003      	beq.n	801394e <_svfprintf_r+0xae6>
 8013946:	6823      	ldr	r3, [r4, #0]
 8013948:	9306      	str	r3, [sp, #24]
 801394a:	9107      	str	r1, [sp, #28]
 801394c:	e7ec      	b.n	8013928 <_svfprintf_r+0xac0>
 801394e:	2340      	movs	r3, #64	; 0x40
 8013950:	0031      	movs	r1, r6
 8013952:	4019      	ands	r1, r3
 8013954:	421e      	tst	r6, r3
 8013956:	d004      	beq.n	8013962 <_svfprintf_r+0xafa>
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	b29b      	uxth	r3, r3
 801395c:	9306      	str	r3, [sp, #24]
 801395e:	9207      	str	r2, [sp, #28]
 8013960:	e7e2      	b.n	8013928 <_svfprintf_r+0xac0>
 8013962:	2380      	movs	r3, #128	; 0x80
 8013964:	0032      	movs	r2, r6
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	401a      	ands	r2, r3
 801396a:	421e      	tst	r6, r3
 801396c:	d002      	beq.n	8013974 <_svfprintf_r+0xb0c>
 801396e:	6823      	ldr	r3, [r4, #0]
 8013970:	b2db      	uxtb	r3, r3
 8013972:	e7e9      	b.n	8013948 <_svfprintf_r+0xae0>
 8013974:	6823      	ldr	r3, [r4, #0]
 8013976:	e7f1      	b.n	801395c <_svfprintf_r+0xaf4>
 8013978:	0023      	movs	r3, r4
 801397a:	cb04      	ldmia	r3!, {r2}
 801397c:	49b6      	ldr	r1, [pc, #728]	; (8013c58 <_svfprintf_r+0xdf0>)
 801397e:	9206      	str	r2, [sp, #24]
 8013980:	aa25      	add	r2, sp, #148	; 0x94
 8013982:	8011      	strh	r1, [r2, #0]
 8013984:	4ab5      	ldr	r2, [pc, #724]	; (8013c5c <_svfprintf_r+0xdf4>)
 8013986:	930e      	str	r3, [sp, #56]	; 0x38
 8013988:	2300      	movs	r3, #0
 801398a:	921f      	str	r2, [sp, #124]	; 0x7c
 801398c:	2278      	movs	r2, #120	; 0x78
 801398e:	9307      	str	r3, [sp, #28]
 8013990:	3302      	adds	r3, #2
 8013992:	431e      	orrs	r6, r3
 8013994:	920f      	str	r2, [sp, #60]	; 0x3c
 8013996:	e7ca      	b.n	801392e <_svfprintf_r+0xac6>
 8013998:	0023      	movs	r3, r4
 801399a:	cb04      	ldmia	r3!, {r2}
 801399c:	2400      	movs	r4, #0
 801399e:	930e      	str	r3, [sp, #56]	; 0x38
 80139a0:	231b      	movs	r3, #27
 80139a2:	9208      	str	r2, [sp, #32]
 80139a4:	aa1e      	add	r2, sp, #120	; 0x78
 80139a6:	189b      	adds	r3, r3, r2
 80139a8:	701c      	strb	r4, [r3, #0]
 80139aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ac:	3301      	adds	r3, #1
 80139ae:	d00e      	beq.n	80139ce <_svfprintf_r+0xb66>
 80139b0:	0021      	movs	r1, r4
 80139b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139b4:	9808      	ldr	r0, [sp, #32]
 80139b6:	f002 f821 	bl	80159fc <memchr>
 80139ba:	900c      	str	r0, [sp, #48]	; 0x30
 80139bc:	42a0      	cmp	r0, r4
 80139be:	d100      	bne.n	80139c2 <_svfprintf_r+0xb5a>
 80139c0:	e10a      	b.n	8013bd8 <_svfprintf_r+0xd70>
 80139c2:	9a08      	ldr	r2, [sp, #32]
 80139c4:	1a83      	subs	r3, r0, r2
 80139c6:	9309      	str	r3, [sp, #36]	; 0x24
 80139c8:	0023      	movs	r3, r4
 80139ca:	940c      	str	r4, [sp, #48]	; 0x30
 80139cc:	e516      	b.n	80133fc <_svfprintf_r+0x594>
 80139ce:	9808      	ldr	r0, [sp, #32]
 80139d0:	f7ec fba2 	bl	8000118 <strlen>
 80139d4:	9009      	str	r0, [sp, #36]	; 0x24
 80139d6:	e7f7      	b.n	80139c8 <_svfprintf_r+0xb60>
 80139d8:	2310      	movs	r3, #16
 80139da:	431e      	orrs	r6, r3
 80139dc:	2320      	movs	r3, #32
 80139de:	0031      	movs	r1, r6
 80139e0:	4019      	ands	r1, r3
 80139e2:	421e      	tst	r6, r3
 80139e4:	d009      	beq.n	80139fa <_svfprintf_r+0xb92>
 80139e6:	3b19      	subs	r3, #25
 80139e8:	3407      	adds	r4, #7
 80139ea:	439c      	bics	r4, r3
 80139ec:	0022      	movs	r2, r4
 80139ee:	ca18      	ldmia	r2!, {r3, r4}
 80139f0:	9306      	str	r3, [sp, #24]
 80139f2:	9407      	str	r4, [sp, #28]
 80139f4:	920e      	str	r2, [sp, #56]	; 0x38
 80139f6:	2301      	movs	r3, #1
 80139f8:	e799      	b.n	801392e <_svfprintf_r+0xac6>
 80139fa:	1d23      	adds	r3, r4, #4
 80139fc:	0032      	movs	r2, r6
 80139fe:	930e      	str	r3, [sp, #56]	; 0x38
 8013a00:	2310      	movs	r3, #16
 8013a02:	401a      	ands	r2, r3
 8013a04:	421e      	tst	r6, r3
 8013a06:	d003      	beq.n	8013a10 <_svfprintf_r+0xba8>
 8013a08:	6823      	ldr	r3, [r4, #0]
 8013a0a:	9306      	str	r3, [sp, #24]
 8013a0c:	9107      	str	r1, [sp, #28]
 8013a0e:	e7f2      	b.n	80139f6 <_svfprintf_r+0xb8e>
 8013a10:	2340      	movs	r3, #64	; 0x40
 8013a12:	0031      	movs	r1, r6
 8013a14:	4019      	ands	r1, r3
 8013a16:	421e      	tst	r6, r3
 8013a18:	d004      	beq.n	8013a24 <_svfprintf_r+0xbbc>
 8013a1a:	6823      	ldr	r3, [r4, #0]
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	9306      	str	r3, [sp, #24]
 8013a20:	9207      	str	r2, [sp, #28]
 8013a22:	e7e8      	b.n	80139f6 <_svfprintf_r+0xb8e>
 8013a24:	2380      	movs	r3, #128	; 0x80
 8013a26:	0032      	movs	r2, r6
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	401a      	ands	r2, r3
 8013a2c:	421e      	tst	r6, r3
 8013a2e:	d002      	beq.n	8013a36 <_svfprintf_r+0xbce>
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	e7e9      	b.n	8013a0a <_svfprintf_r+0xba2>
 8013a36:	6823      	ldr	r3, [r4, #0]
 8013a38:	e7f1      	b.n	8013a1e <_svfprintf_r+0xbb6>
 8013a3a:	4b89      	ldr	r3, [pc, #548]	; (8013c60 <_svfprintf_r+0xdf8>)
 8013a3c:	0031      	movs	r1, r6
 8013a3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8013a40:	2320      	movs	r3, #32
 8013a42:	4019      	ands	r1, r3
 8013a44:	421e      	tst	r6, r3
 8013a46:	d01a      	beq.n	8013a7e <_svfprintf_r+0xc16>
 8013a48:	3b19      	subs	r3, #25
 8013a4a:	3407      	adds	r4, #7
 8013a4c:	439c      	bics	r4, r3
 8013a4e:	0022      	movs	r2, r4
 8013a50:	ca18      	ldmia	r2!, {r3, r4}
 8013a52:	9306      	str	r3, [sp, #24]
 8013a54:	9407      	str	r4, [sp, #28]
 8013a56:	920e      	str	r2, [sp, #56]	; 0x38
 8013a58:	07f3      	lsls	r3, r6, #31
 8013a5a:	d50a      	bpl.n	8013a72 <_svfprintf_r+0xc0a>
 8013a5c:	9b06      	ldr	r3, [sp, #24]
 8013a5e:	9a07      	ldr	r2, [sp, #28]
 8013a60:	4313      	orrs	r3, r2
 8013a62:	d006      	beq.n	8013a72 <_svfprintf_r+0xc0a>
 8013a64:	2230      	movs	r2, #48	; 0x30
 8013a66:	ab25      	add	r3, sp, #148	; 0x94
 8013a68:	701a      	strb	r2, [r3, #0]
 8013a6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a6c:	705a      	strb	r2, [r3, #1]
 8013a6e:	2302      	movs	r3, #2
 8013a70:	431e      	orrs	r6, r3
 8013a72:	4b78      	ldr	r3, [pc, #480]	; (8013c54 <_svfprintf_r+0xdec>)
 8013a74:	401e      	ands	r6, r3
 8013a76:	2302      	movs	r3, #2
 8013a78:	e759      	b.n	801392e <_svfprintf_r+0xac6>
 8013a7a:	4b78      	ldr	r3, [pc, #480]	; (8013c5c <_svfprintf_r+0xdf4>)
 8013a7c:	e7de      	b.n	8013a3c <_svfprintf_r+0xbd4>
 8013a7e:	1d23      	adds	r3, r4, #4
 8013a80:	0032      	movs	r2, r6
 8013a82:	930e      	str	r3, [sp, #56]	; 0x38
 8013a84:	2310      	movs	r3, #16
 8013a86:	401a      	ands	r2, r3
 8013a88:	421e      	tst	r6, r3
 8013a8a:	d003      	beq.n	8013a94 <_svfprintf_r+0xc2c>
 8013a8c:	6823      	ldr	r3, [r4, #0]
 8013a8e:	9306      	str	r3, [sp, #24]
 8013a90:	9107      	str	r1, [sp, #28]
 8013a92:	e7e1      	b.n	8013a58 <_svfprintf_r+0xbf0>
 8013a94:	2340      	movs	r3, #64	; 0x40
 8013a96:	0031      	movs	r1, r6
 8013a98:	4019      	ands	r1, r3
 8013a9a:	421e      	tst	r6, r3
 8013a9c:	d004      	beq.n	8013aa8 <_svfprintf_r+0xc40>
 8013a9e:	6823      	ldr	r3, [r4, #0]
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	9306      	str	r3, [sp, #24]
 8013aa4:	9207      	str	r2, [sp, #28]
 8013aa6:	e7d7      	b.n	8013a58 <_svfprintf_r+0xbf0>
 8013aa8:	2380      	movs	r3, #128	; 0x80
 8013aaa:	0032      	movs	r2, r6
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	401a      	ands	r2, r3
 8013ab0:	421e      	tst	r6, r3
 8013ab2:	d002      	beq.n	8013aba <_svfprintf_r+0xc52>
 8013ab4:	6823      	ldr	r3, [r4, #0]
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	e7e9      	b.n	8013a8e <_svfprintf_r+0xc26>
 8013aba:	6823      	ldr	r3, [r4, #0]
 8013abc:	e7f1      	b.n	8013aa2 <_svfprintf_r+0xc3a>
 8013abe:	9b07      	ldr	r3, [sp, #28]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10b      	bne.n	8013adc <_svfprintf_r+0xc74>
 8013ac4:	9b06      	ldr	r3, [sp, #24]
 8013ac6:	2b09      	cmp	r3, #9
 8013ac8:	d808      	bhi.n	8013adc <_svfprintf_r+0xc74>
 8013aca:	20e7      	movs	r0, #231	; 0xe7
 8013acc:	ab1e      	add	r3, sp, #120	; 0x78
 8013ace:	18c0      	adds	r0, r0, r3
 8013ad0:	9b06      	ldr	r3, [sp, #24]
 8013ad2:	3330      	adds	r3, #48	; 0x30
 8013ad4:	7003      	strb	r3, [r0, #0]
 8013ad6:	9008      	str	r0, [sp, #32]
 8013ad8:	f000 fc38 	bl	801434c <_svfprintf_r+0x14e4>
 8013adc:	2480      	movs	r4, #128	; 0x80
 8013ade:	2300      	movs	r3, #0
 8013ae0:	00e4      	lsls	r4, r4, #3
 8013ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8013ae4:	a858      	add	r0, sp, #352	; 0x160
 8013ae6:	402c      	ands	r4, r5
 8013ae8:	1e43      	subs	r3, r0, #1
 8013aea:	9308      	str	r3, [sp, #32]
 8013aec:	220a      	movs	r2, #10
 8013aee:	9806      	ldr	r0, [sp, #24]
 8013af0:	9907      	ldr	r1, [sp, #28]
 8013af2:	2300      	movs	r3, #0
 8013af4:	f7ec fd1a 	bl	800052c <__aeabi_uldivmod>
 8013af8:	9b08      	ldr	r3, [sp, #32]
 8013afa:	3230      	adds	r2, #48	; 0x30
 8013afc:	701a      	strb	r2, [r3, #0]
 8013afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b00:	3301      	adds	r3, #1
 8013b02:	930d      	str	r3, [sp, #52]	; 0x34
 8013b04:	2c00      	cmp	r4, #0
 8013b06:	d01d      	beq.n	8013b44 <_svfprintf_r+0xcdc>
 8013b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d118      	bne.n	8013b44 <_svfprintf_r+0xcdc>
 8013b12:	2aff      	cmp	r2, #255	; 0xff
 8013b14:	d016      	beq.n	8013b44 <_svfprintf_r+0xcdc>
 8013b16:	9b07      	ldr	r3, [sp, #28]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <_svfprintf_r+0xcba>
 8013b1c:	9b06      	ldr	r3, [sp, #24]
 8013b1e:	2b09      	cmp	r3, #9
 8013b20:	d910      	bls.n	8013b44 <_svfprintf_r+0xcdc>
 8013b22:	9b08      	ldr	r3, [sp, #32]
 8013b24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013b26:	991d      	ldr	r1, [sp, #116]	; 0x74
 8013b28:	1a9b      	subs	r3, r3, r2
 8013b2a:	0018      	movs	r0, r3
 8013b2c:	9308      	str	r3, [sp, #32]
 8013b2e:	f7fe fa69 	bl	8012004 <strncpy>
 8013b32:	2200      	movs	r2, #0
 8013b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b36:	920d      	str	r2, [sp, #52]	; 0x34
 8013b38:	785b      	ldrb	r3, [r3, #1]
 8013b3a:	1e5a      	subs	r2, r3, #1
 8013b3c:	4193      	sbcs	r3, r2
 8013b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b40:	18d3      	adds	r3, r2, r3
 8013b42:	9312      	str	r3, [sp, #72]	; 0x48
 8013b44:	2300      	movs	r3, #0
 8013b46:	9806      	ldr	r0, [sp, #24]
 8013b48:	9907      	ldr	r1, [sp, #28]
 8013b4a:	220a      	movs	r2, #10
 8013b4c:	f7ec fcee 	bl	800052c <__aeabi_uldivmod>
 8013b50:	9b07      	ldr	r3, [sp, #28]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d104      	bne.n	8013b60 <_svfprintf_r+0xcf8>
 8013b56:	9b06      	ldr	r3, [sp, #24]
 8013b58:	2b09      	cmp	r3, #9
 8013b5a:	d801      	bhi.n	8013b60 <_svfprintf_r+0xcf8>
 8013b5c:	f000 fbf6 	bl	801434c <_svfprintf_r+0x14e4>
 8013b60:	9006      	str	r0, [sp, #24]
 8013b62:	9107      	str	r1, [sp, #28]
 8013b64:	9808      	ldr	r0, [sp, #32]
 8013b66:	e7bf      	b.n	8013ae8 <_svfprintf_r+0xc80>
 8013b68:	200f      	movs	r0, #15
 8013b6a:	ab58      	add	r3, sp, #352	; 0x160
 8013b6c:	9308      	str	r3, [sp, #32]
 8013b6e:	9b08      	ldr	r3, [sp, #32]
 8013b70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013b72:	3b01      	subs	r3, #1
 8013b74:	9308      	str	r3, [sp, #32]
 8013b76:	9b06      	ldr	r3, [sp, #24]
 8013b78:	4003      	ands	r3, r0
 8013b7a:	5cd3      	ldrb	r3, [r2, r3]
 8013b7c:	9a08      	ldr	r2, [sp, #32]
 8013b7e:	7013      	strb	r3, [r2, #0]
 8013b80:	9b07      	ldr	r3, [sp, #28]
 8013b82:	0719      	lsls	r1, r3, #28
 8013b84:	9b06      	ldr	r3, [sp, #24]
 8013b86:	091a      	lsrs	r2, r3, #4
 8013b88:	9b07      	ldr	r3, [sp, #28]
 8013b8a:	4311      	orrs	r1, r2
 8013b8c:	091b      	lsrs	r3, r3, #4
 8013b8e:	9307      	str	r3, [sp, #28]
 8013b90:	000b      	movs	r3, r1
 8013b92:	9a07      	ldr	r2, [sp, #28]
 8013b94:	9106      	str	r1, [sp, #24]
 8013b96:	4313      	orrs	r3, r2
 8013b98:	d1e9      	bne.n	8013b6e <_svfprintf_r+0xd06>
 8013b9a:	e3d7      	b.n	801434c <_svfprintf_r+0x14e4>
 8013b9c:	aa58      	add	r2, sp, #352	; 0x160
 8013b9e:	9208      	str	r2, [sp, #32]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d000      	beq.n	8013ba6 <_svfprintf_r+0xd3e>
 8013ba4:	e3d2      	b.n	801434c <_svfprintf_r+0x14e4>
 8013ba6:	07f3      	lsls	r3, r6, #31
 8013ba8:	d400      	bmi.n	8013bac <_svfprintf_r+0xd44>
 8013baa:	e3cf      	b.n	801434c <_svfprintf_r+0x14e4>
 8013bac:	20e7      	movs	r0, #231	; 0xe7
 8013bae:	ab1e      	add	r3, sp, #120	; 0x78
 8013bb0:	18c0      	adds	r0, r0, r3
 8013bb2:	2330      	movs	r3, #48	; 0x30
 8013bb4:	e78e      	b.n	8013ad4 <_svfprintf_r+0xc6c>
 8013bb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d100      	bne.n	8013bbe <_svfprintf_r+0xd56>
 8013bbc:	e38a      	b.n	80142d4 <_svfprintf_r+0x146c>
 8013bbe:	221b      	movs	r2, #27
 8013bc0:	a83f      	add	r0, sp, #252	; 0xfc
 8013bc2:	7003      	strb	r3, [r0, #0]
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	a91e      	add	r1, sp, #120	; 0x78
 8013bc8:	1852      	adds	r2, r2, r1
 8013bca:	7013      	strb	r3, [r2, #0]
 8013bcc:	940e      	str	r4, [sp, #56]	; 0x38
 8013bce:	f7ff fab0 	bl	8013132 <_svfprintf_r+0x2ca>
 8013bd2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013bd6:	e587      	b.n	80136e8 <_svfprintf_r+0x880>
 8013bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bda:	e40f      	b.n	80133fc <_svfprintf_r+0x594>
 8013bdc:	2010      	movs	r0, #16
 8013bde:	1812      	adds	r2, r2, r0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	922e      	str	r2, [sp, #184]	; 0xb8
 8013be4:	932d      	str	r3, [sp, #180]	; 0xb4
 8013be6:	2b07      	cmp	r3, #7
 8013be8:	dd08      	ble.n	8013bfc <_svfprintf_r+0xd94>
 8013bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013bee:	aa2c      	add	r2, sp, #176	; 0xb0
 8013bf0:	f002 fbd4 	bl	801639c <__ssprint_r>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d000      	beq.n	8013bfa <_svfprintf_r+0xd92>
 8013bf8:	e34b      	b.n	8014292 <_svfprintf_r+0x142a>
 8013bfa:	a92f      	add	r1, sp, #188	; 0xbc
 8013bfc:	000f      	movs	r7, r1
 8013bfe:	3c10      	subs	r4, #16
 8013c00:	f7ff fac3 	bl	801318a <_svfprintf_r+0x322>
 8013c04:	2010      	movs	r0, #16
 8013c06:	1812      	adds	r2, r2, r0
 8013c08:	6078      	str	r0, [r7, #4]
 8013c0a:	922e      	str	r2, [sp, #184]	; 0xb8
 8013c0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c0e:	2b07      	cmp	r3, #7
 8013c10:	dd08      	ble.n	8013c24 <_svfprintf_r+0xdbc>
 8013c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c16:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c18:	f002 fbc0 	bl	801639c <__ssprint_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d000      	beq.n	8013c22 <_svfprintf_r+0xdba>
 8013c20:	e337      	b.n	8014292 <_svfprintf_r+0x142a>
 8013c22:	a92f      	add	r1, sp, #188	; 0xbc
 8013c24:	000f      	movs	r7, r1
 8013c26:	3c10      	subs	r4, #16
 8013c28:	f7ff fb0f 	bl	801324a <_svfprintf_r+0x3e2>
 8013c2c:	2010      	movs	r0, #16
 8013c2e:	1812      	adds	r2, r2, r0
 8013c30:	6078      	str	r0, [r7, #4]
 8013c32:	922e      	str	r2, [sp, #184]	; 0xb8
 8013c34:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c36:	2b07      	cmp	r3, #7
 8013c38:	dd08      	ble.n	8013c4c <_svfprintf_r+0xde4>
 8013c3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c3e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c40:	f002 fbac 	bl	801639c <__ssprint_r>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d000      	beq.n	8013c4a <_svfprintf_r+0xde2>
 8013c48:	e323      	b.n	8014292 <_svfprintf_r+0x142a>
 8013c4a:	a92f      	add	r1, sp, #188	; 0xbc
 8013c4c:	000f      	movs	r7, r1
 8013c4e:	3c10      	subs	r4, #16
 8013c50:	f7ff fb1d 	bl	801328e <_svfprintf_r+0x426>
 8013c54:	fffffbff 	.word	0xfffffbff
 8013c58:	00007830 	.word	0x00007830
 8013c5c:	0801a938 	.word	0x0801a938
 8013c60:	0801a949 	.word	0x0801a949
 8013c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c66:	2b65      	cmp	r3, #101	; 0x65
 8013c68:	dc00      	bgt.n	8013c6c <_svfprintf_r+0xe04>
 8013c6a:	e258      	b.n	801411e <_svfprintf_r+0x12b6>
 8013c6c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013c6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013c70:	2200      	movs	r2, #0
 8013c72:	2300      	movs	r3, #0
 8013c74:	f7ec fbf2 	bl	800045c <__aeabi_dcmpeq>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d07c      	beq.n	8013d76 <_svfprintf_r+0xf0e>
 8013c7c:	4b80      	ldr	r3, [pc, #512]	; (8013e80 <_svfprintf_r+0x1018>)
 8013c7e:	603b      	str	r3, [r7, #0]
 8013c80:	2301      	movs	r3, #1
 8013c82:	607b      	str	r3, [r7, #4]
 8013c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c86:	3708      	adds	r7, #8
 8013c88:	3301      	adds	r3, #1
 8013c8a:	932e      	str	r3, [sp, #184]	; 0xb8
 8013c8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c8e:	9308      	str	r3, [sp, #32]
 8013c90:	3301      	adds	r3, #1
 8013c92:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c94:	2b07      	cmp	r3, #7
 8013c96:	dd08      	ble.n	8013caa <_svfprintf_r+0xe42>
 8013c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c9c:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c9e:	f002 fb7d 	bl	801639c <__ssprint_r>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d000      	beq.n	8013ca8 <_svfprintf_r+0xe40>
 8013ca6:	e2f4      	b.n	8014292 <_svfprintf_r+0x142a>
 8013ca8:	af2f      	add	r7, sp, #188	; 0xbc
 8013caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013cac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013cae:	4293      	cmp	r3, r2
 8013cb0:	db01      	blt.n	8013cb6 <_svfprintf_r+0xe4e>
 8013cb2:	07f3      	lsls	r3, r6, #31
 8013cb4:	d51d      	bpl.n	8013cf2 <_svfprintf_r+0xe8a>
 8013cb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013cb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013cba:	4694      	mov	ip, r2
 8013cbc:	603b      	str	r3, [r7, #0]
 8013cbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013cc0:	607b      	str	r3, [r7, #4]
 8013cc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	4463      	add	r3, ip
 8013cc8:	932e      	str	r3, [sp, #184]	; 0xb8
 8013cca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013ccc:	9308      	str	r3, [sp, #32]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	932d      	str	r3, [sp, #180]	; 0xb4
 8013cd2:	2b07      	cmp	r3, #7
 8013cd4:	dd08      	ble.n	8013ce8 <_svfprintf_r+0xe80>
 8013cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cda:	aa2c      	add	r2, sp, #176	; 0xb0
 8013cdc:	f002 fb5e 	bl	801639c <__ssprint_r>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d000      	beq.n	8013ce6 <_svfprintf_r+0xe7e>
 8013ce4:	e2d5      	b.n	8014292 <_svfprintf_r+0x142a>
 8013ce6:	af2f      	add	r7, sp, #188	; 0xbc
 8013ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cea:	2510      	movs	r5, #16
 8013cec:	1e5c      	subs	r4, r3, #1
 8013cee:	2c00      	cmp	r4, #0
 8013cf0:	dc2f      	bgt.n	8013d52 <_svfprintf_r+0xeea>
 8013cf2:	0773      	lsls	r3, r6, #29
 8013cf4:	d500      	bpl.n	8013cf8 <_svfprintf_r+0xe90>
 8013cf6:	e2ae      	b.n	8014256 <_svfprintf_r+0x13ee>
 8013cf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013cfa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	da00      	bge.n	8013d02 <_svfprintf_r+0xe9a>
 8013d00:	0013      	movs	r3, r2
 8013d02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013d04:	18d3      	adds	r3, r2, r3
 8013d06:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013d0a:	9308      	str	r3, [sp, #32]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d007      	beq.n	8013d20 <_svfprintf_r+0xeb8>
 8013d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d14:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d16:	f002 fb41 	bl	801639c <__ssprint_r>
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	d000      	beq.n	8013d20 <_svfprintf_r+0xeb8>
 8013d1e:	e2b8      	b.n	8014292 <_svfprintf_r+0x142a>
 8013d20:	2300      	movs	r3, #0
 8013d22:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d000      	beq.n	8013d2c <_svfprintf_r+0xec4>
 8013d2a:	e2ce      	b.n	80142ca <_svfprintf_r+0x1462>
 8013d2c:	af2f      	add	r7, sp, #188	; 0xbc
 8013d2e:	e5d8      	b.n	80138e2 <_svfprintf_r+0xa7a>
 8013d30:	3210      	adds	r2, #16
 8013d32:	607d      	str	r5, [r7, #4]
 8013d34:	922e      	str	r2, [sp, #184]	; 0xb8
 8013d36:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d38:	2b07      	cmp	r3, #7
 8013d3a:	dd08      	ble.n	8013d4e <_svfprintf_r+0xee6>
 8013d3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d40:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d42:	f002 fb2b 	bl	801639c <__ssprint_r>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	d000      	beq.n	8013d4c <_svfprintf_r+0xee4>
 8013d4a:	e2a2      	b.n	8014292 <_svfprintf_r+0x142a>
 8013d4c:	a92f      	add	r1, sp, #188	; 0xbc
 8013d4e:	000f      	movs	r7, r1
 8013d50:	3c10      	subs	r4, #16
 8013d52:	0039      	movs	r1, r7
 8013d54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d56:	484b      	ldr	r0, [pc, #300]	; (8013e84 <_svfprintf_r+0x101c>)
 8013d58:	9308      	str	r3, [sp, #32]
 8013d5a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	3108      	adds	r1, #8
 8013d60:	6038      	str	r0, [r7, #0]
 8013d62:	2c10      	cmp	r4, #16
 8013d64:	dce4      	bgt.n	8013d30 <_svfprintf_r+0xec8>
 8013d66:	607c      	str	r4, [r7, #4]
 8013d68:	18a4      	adds	r4, r4, r2
 8013d6a:	000f      	movs	r7, r1
 8013d6c:	942e      	str	r4, [sp, #184]	; 0xb8
 8013d6e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d70:	2b07      	cmp	r3, #7
 8013d72:	ddbe      	ble.n	8013cf2 <_svfprintf_r+0xe8a>
 8013d74:	e067      	b.n	8013e46 <_svfprintf_r+0xfde>
 8013d76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	dd00      	ble.n	8013d7e <_svfprintf_r+0xf16>
 8013d7c:	e084      	b.n	8013e88 <_svfprintf_r+0x1020>
 8013d7e:	4b40      	ldr	r3, [pc, #256]	; (8013e80 <_svfprintf_r+0x1018>)
 8013d80:	603b      	str	r3, [r7, #0]
 8013d82:	2301      	movs	r3, #1
 8013d84:	607b      	str	r3, [r7, #4]
 8013d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d88:	3708      	adds	r7, #8
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	932e      	str	r3, [sp, #184]	; 0xb8
 8013d8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d90:	9309      	str	r3, [sp, #36]	; 0x24
 8013d92:	3301      	adds	r3, #1
 8013d94:	932d      	str	r3, [sp, #180]	; 0xb4
 8013d96:	2b07      	cmp	r3, #7
 8013d98:	dd08      	ble.n	8013dac <_svfprintf_r+0xf44>
 8013d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d9e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013da0:	f002 fafc 	bl	801639c <__ssprint_r>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	d000      	beq.n	8013daa <_svfprintf_r+0xf42>
 8013da8:	e273      	b.n	8014292 <_svfprintf_r+0x142a>
 8013daa:	af2f      	add	r7, sp, #188	; 0xbc
 8013dac:	9926      	ldr	r1, [sp, #152]	; 0x98
 8013dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013db2:	430b      	orrs	r3, r1
 8013db4:	2101      	movs	r1, #1
 8013db6:	4031      	ands	r1, r6
 8013db8:	430b      	orrs	r3, r1
 8013dba:	d09a      	beq.n	8013cf2 <_svfprintf_r+0xe8a>
 8013dbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013dbe:	603b      	str	r3, [r7, #0]
 8013dc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013dc2:	607b      	str	r3, [r7, #4]
 8013dc4:	189a      	adds	r2, r3, r2
 8013dc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013dc8:	922e      	str	r2, [sp, #184]	; 0xb8
 8013dca:	9309      	str	r3, [sp, #36]	; 0x24
 8013dcc:	3301      	adds	r3, #1
 8013dce:	932d      	str	r3, [sp, #180]	; 0xb4
 8013dd0:	3708      	adds	r7, #8
 8013dd2:	2b07      	cmp	r3, #7
 8013dd4:	dd08      	ble.n	8013de8 <_svfprintf_r+0xf80>
 8013dd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013dd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013dda:	aa2c      	add	r2, sp, #176	; 0xb0
 8013ddc:	f002 fade 	bl	801639c <__ssprint_r>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d000      	beq.n	8013de6 <_svfprintf_r+0xf7e>
 8013de4:	e255      	b.n	8014292 <_svfprintf_r+0x142a>
 8013de6:	af2f      	add	r7, sp, #188	; 0xbc
 8013de8:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8013dea:	2c00      	cmp	r4, #0
 8013dec:	da1a      	bge.n	8013e24 <_svfprintf_r+0xfbc>
 8013dee:	0039      	movs	r1, r7
 8013df0:	2510      	movs	r5, #16
 8013df2:	4264      	negs	r4, r4
 8013df4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013df6:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8013df8:	9309      	str	r3, [sp, #36]	; 0x24
 8013dfa:	1c5a      	adds	r2, r3, #1
 8013dfc:	4b21      	ldr	r3, [pc, #132]	; (8013e84 <_svfprintf_r+0x101c>)
 8013dfe:	3708      	adds	r7, #8
 8013e00:	600b      	str	r3, [r1, #0]
 8013e02:	2c10      	cmp	r4, #16
 8013e04:	dc29      	bgt.n	8013e5a <_svfprintf_r+0xff2>
 8013e06:	604c      	str	r4, [r1, #4]
 8013e08:	1824      	adds	r4, r4, r0
 8013e0a:	942e      	str	r4, [sp, #184]	; 0xb8
 8013e0c:	922d      	str	r2, [sp, #180]	; 0xb4
 8013e0e:	2a07      	cmp	r2, #7
 8013e10:	dd08      	ble.n	8013e24 <_svfprintf_r+0xfbc>
 8013e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013e16:	aa2c      	add	r2, sp, #176	; 0xb0
 8013e18:	f002 fac0 	bl	801639c <__ssprint_r>
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	d000      	beq.n	8013e22 <_svfprintf_r+0xfba>
 8013e20:	e237      	b.n	8014292 <_svfprintf_r+0x142a>
 8013e22:	af2f      	add	r7, sp, #188	; 0xbc
 8013e24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e26:	9b08      	ldr	r3, [sp, #32]
 8013e28:	468c      	mov	ip, r1
 8013e2a:	603b      	str	r3, [r7, #0]
 8013e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e2e:	607b      	str	r3, [r7, #4]
 8013e30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013e32:	4463      	add	r3, ip
 8013e34:	932e      	str	r3, [sp, #184]	; 0xb8
 8013e36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013e38:	1c5a      	adds	r2, r3, #1
 8013e3a:	9308      	str	r3, [sp, #32]
 8013e3c:	922d      	str	r2, [sp, #180]	; 0xb4
 8013e3e:	2a07      	cmp	r2, #7
 8013e40:	dc01      	bgt.n	8013e46 <_svfprintf_r+0xfde>
 8013e42:	f7ff fa58 	bl	80132f6 <_svfprintf_r+0x48e>
 8013e46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013e4a:	aa2c      	add	r2, sp, #176	; 0xb0
 8013e4c:	f002 faa6 	bl	801639c <__ssprint_r>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d000      	beq.n	8013e56 <_svfprintf_r+0xfee>
 8013e54:	e21d      	b.n	8014292 <_svfprintf_r+0x142a>
 8013e56:	af2f      	add	r7, sp, #188	; 0xbc
 8013e58:	e74b      	b.n	8013cf2 <_svfprintf_r+0xe8a>
 8013e5a:	3010      	adds	r0, #16
 8013e5c:	604d      	str	r5, [r1, #4]
 8013e5e:	902e      	str	r0, [sp, #184]	; 0xb8
 8013e60:	922d      	str	r2, [sp, #180]	; 0xb4
 8013e62:	2a07      	cmp	r2, #7
 8013e64:	dd08      	ble.n	8013e78 <_svfprintf_r+0x1010>
 8013e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013e6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8013e6c:	f002 fa96 	bl	801639c <__ssprint_r>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d000      	beq.n	8013e76 <_svfprintf_r+0x100e>
 8013e74:	e20d      	b.n	8014292 <_svfprintf_r+0x142a>
 8013e76:	af2f      	add	r7, sp, #188	; 0xbc
 8013e78:	0039      	movs	r1, r7
 8013e7a:	3c10      	subs	r4, #16
 8013e7c:	e7ba      	b.n	8013df4 <_svfprintf_r+0xf8c>
 8013e7e:	46c0      	nop			; (mov r8, r8)
 8013e80:	0801a95a 	.word	0x0801a95a
 8013e84:	0801a96c 	.word	0x0801a96c
 8013e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e8a:	002c      	movs	r4, r5
 8013e8c:	429d      	cmp	r5, r3
 8013e8e:	dd00      	ble.n	8013e92 <_svfprintf_r+0x102a>
 8013e90:	001c      	movs	r4, r3
 8013e92:	2c00      	cmp	r4, #0
 8013e94:	dd15      	ble.n	8013ec2 <_svfprintf_r+0x105a>
 8013e96:	9b08      	ldr	r3, [sp, #32]
 8013e98:	607c      	str	r4, [r7, #4]
 8013e9a:	603b      	str	r3, [r7, #0]
 8013e9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e9e:	3708      	adds	r7, #8
 8013ea0:	18e3      	adds	r3, r4, r3
 8013ea2:	932e      	str	r3, [sp, #184]	; 0xb8
 8013ea4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ea8:	3301      	adds	r3, #1
 8013eaa:	932d      	str	r3, [sp, #180]	; 0xb4
 8013eac:	2b07      	cmp	r3, #7
 8013eae:	dd08      	ble.n	8013ec2 <_svfprintf_r+0x105a>
 8013eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013eb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013eb4:	aa2c      	add	r2, sp, #176	; 0xb0
 8013eb6:	f002 fa71 	bl	801639c <__ssprint_r>
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	d000      	beq.n	8013ec0 <_svfprintf_r+0x1058>
 8013ebe:	e1e8      	b.n	8014292 <_svfprintf_r+0x142a>
 8013ec0:	af2f      	add	r7, sp, #188	; 0xbc
 8013ec2:	43e3      	mvns	r3, r4
 8013ec4:	17db      	asrs	r3, r3, #31
 8013ec6:	401c      	ands	r4, r3
 8013ec8:	1b2c      	subs	r4, r5, r4
 8013eca:	2c00      	cmp	r4, #0
 8013ecc:	dd1a      	ble.n	8013f04 <_svfprintf_r+0x109c>
 8013ece:	0039      	movs	r1, r7
 8013ed0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013ed2:	48ca      	ldr	r0, [pc, #808]	; (80141fc <_svfprintf_r+0x1394>)
 8013ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013ed8:	3301      	adds	r3, #1
 8013eda:	3108      	adds	r1, #8
 8013edc:	6038      	str	r0, [r7, #0]
 8013ede:	2c10      	cmp	r4, #16
 8013ee0:	dd00      	ble.n	8013ee4 <_svfprintf_r+0x107c>
 8013ee2:	e08a      	b.n	8013ffa <_svfprintf_r+0x1192>
 8013ee4:	607c      	str	r4, [r7, #4]
 8013ee6:	18a4      	adds	r4, r4, r2
 8013ee8:	000f      	movs	r7, r1
 8013eea:	942e      	str	r4, [sp, #184]	; 0xb8
 8013eec:	932d      	str	r3, [sp, #180]	; 0xb4
 8013eee:	2b07      	cmp	r3, #7
 8013ef0:	dd08      	ble.n	8013f04 <_svfprintf_r+0x109c>
 8013ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ef4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013ef6:	aa2c      	add	r2, sp, #176	; 0xb0
 8013ef8:	f002 fa50 	bl	801639c <__ssprint_r>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d000      	beq.n	8013f02 <_svfprintf_r+0x109a>
 8013f00:	e1c7      	b.n	8014292 <_svfprintf_r+0x142a>
 8013f02:	af2f      	add	r7, sp, #188	; 0xbc
 8013f04:	9b08      	ldr	r3, [sp, #32]
 8013f06:	195d      	adds	r5, r3, r5
 8013f08:	0573      	lsls	r3, r6, #21
 8013f0a:	d50d      	bpl.n	8013f28 <_svfprintf_r+0x10c0>
 8013f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d000      	beq.n	8013f14 <_svfprintf_r+0x10ac>
 8013f12:	e085      	b.n	8014020 <_svfprintf_r+0x11b8>
 8013f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d000      	beq.n	8013f1c <_svfprintf_r+0x10b4>
 8013f1a:	e084      	b.n	8014026 <_svfprintf_r+0x11be>
 8013f1c:	9b08      	ldr	r3, [sp, #32]
 8013f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f20:	189b      	adds	r3, r3, r2
 8013f22:	429d      	cmp	r5, r3
 8013f24:	d900      	bls.n	8013f28 <_svfprintf_r+0x10c0>
 8013f26:	001d      	movs	r5, r3
 8013f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013f2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	db01      	blt.n	8013f34 <_svfprintf_r+0x10cc>
 8013f30:	07f3      	lsls	r3, r6, #31
 8013f32:	d518      	bpl.n	8013f66 <_svfprintf_r+0x10fe>
 8013f34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013f36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013f38:	4694      	mov	ip, r2
 8013f3a:	603b      	str	r3, [r7, #0]
 8013f3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013f3e:	607b      	str	r3, [r7, #4]
 8013f40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013f42:	3708      	adds	r7, #8
 8013f44:	4463      	add	r3, ip
 8013f46:	932e      	str	r3, [sp, #184]	; 0xb8
 8013f48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013f50:	2b07      	cmp	r3, #7
 8013f52:	dd08      	ble.n	8013f66 <_svfprintf_r+0x10fe>
 8013f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f58:	aa2c      	add	r2, sp, #176	; 0xb0
 8013f5a:	f002 fa1f 	bl	801639c <__ssprint_r>
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	d000      	beq.n	8013f64 <_svfprintf_r+0x10fc>
 8013f62:	e196      	b.n	8014292 <_svfprintf_r+0x142a>
 8013f64:	af2f      	add	r7, sp, #188	; 0xbc
 8013f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f68:	9b08      	ldr	r3, [sp, #32]
 8013f6a:	4694      	mov	ip, r2
 8013f6c:	4463      	add	r3, ip
 8013f6e:	1b58      	subs	r0, r3, r5
 8013f70:	0013      	movs	r3, r2
 8013f72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013f74:	1a9c      	subs	r4, r3, r2
 8013f76:	4284      	cmp	r4, r0
 8013f78:	dd00      	ble.n	8013f7c <_svfprintf_r+0x1114>
 8013f7a:	0004      	movs	r4, r0
 8013f7c:	2c00      	cmp	r4, #0
 8013f7e:	dd14      	ble.n	8013faa <_svfprintf_r+0x1142>
 8013f80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013f82:	603d      	str	r5, [r7, #0]
 8013f84:	18e3      	adds	r3, r4, r3
 8013f86:	932e      	str	r3, [sp, #184]	; 0xb8
 8013f88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013f8a:	607c      	str	r4, [r7, #4]
 8013f8c:	9308      	str	r3, [sp, #32]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	932d      	str	r3, [sp, #180]	; 0xb4
 8013f92:	3708      	adds	r7, #8
 8013f94:	2b07      	cmp	r3, #7
 8013f96:	dd08      	ble.n	8013faa <_svfprintf_r+0x1142>
 8013f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f9c:	aa2c      	add	r2, sp, #176	; 0xb0
 8013f9e:	f002 f9fd 	bl	801639c <__ssprint_r>
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	d000      	beq.n	8013fa8 <_svfprintf_r+0x1140>
 8013fa6:	e174      	b.n	8014292 <_svfprintf_r+0x142a>
 8013fa8:	af2f      	add	r7, sp, #188	; 0xbc
 8013faa:	43e3      	mvns	r3, r4
 8013fac:	17db      	asrs	r3, r3, #31
 8013fae:	401c      	ands	r4, r3
 8013fb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fb4:	2510      	movs	r5, #16
 8013fb6:	1a9b      	subs	r3, r3, r2
 8013fb8:	1b1c      	subs	r4, r3, r4
 8013fba:	2c00      	cmp	r4, #0
 8013fbc:	dc00      	bgt.n	8013fc0 <_svfprintf_r+0x1158>
 8013fbe:	e698      	b.n	8013cf2 <_svfprintf_r+0xe8a>
 8013fc0:	0039      	movs	r1, r7
 8013fc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013fc4:	488d      	ldr	r0, [pc, #564]	; (80141fc <_svfprintf_r+0x1394>)
 8013fc6:	9308      	str	r3, [sp, #32]
 8013fc8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013fca:	3301      	adds	r3, #1
 8013fcc:	3108      	adds	r1, #8
 8013fce:	6038      	str	r0, [r7, #0]
 8013fd0:	2c10      	cmp	r4, #16
 8013fd2:	dc00      	bgt.n	8013fd6 <_svfprintf_r+0x116e>
 8013fd4:	e6c7      	b.n	8013d66 <_svfprintf_r+0xefe>
 8013fd6:	3210      	adds	r2, #16
 8013fd8:	607d      	str	r5, [r7, #4]
 8013fda:	922e      	str	r2, [sp, #184]	; 0xb8
 8013fdc:	932d      	str	r3, [sp, #180]	; 0xb4
 8013fde:	2b07      	cmp	r3, #7
 8013fe0:	dd08      	ble.n	8013ff4 <_svfprintf_r+0x118c>
 8013fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013fe6:	aa2c      	add	r2, sp, #176	; 0xb0
 8013fe8:	f002 f9d8 	bl	801639c <__ssprint_r>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	d000      	beq.n	8013ff2 <_svfprintf_r+0x118a>
 8013ff0:	e14f      	b.n	8014292 <_svfprintf_r+0x142a>
 8013ff2:	a92f      	add	r1, sp, #188	; 0xbc
 8013ff4:	000f      	movs	r7, r1
 8013ff6:	3c10      	subs	r4, #16
 8013ff8:	e7e2      	b.n	8013fc0 <_svfprintf_r+0x1158>
 8013ffa:	2010      	movs	r0, #16
 8013ffc:	1812      	adds	r2, r2, r0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	922e      	str	r2, [sp, #184]	; 0xb8
 8014002:	932d      	str	r3, [sp, #180]	; 0xb4
 8014004:	2b07      	cmp	r3, #7
 8014006:	dd08      	ble.n	801401a <_svfprintf_r+0x11b2>
 8014008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801400a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801400c:	aa2c      	add	r2, sp, #176	; 0xb0
 801400e:	f002 f9c5 	bl	801639c <__ssprint_r>
 8014012:	2800      	cmp	r0, #0
 8014014:	d000      	beq.n	8014018 <_svfprintf_r+0x11b0>
 8014016:	e13c      	b.n	8014292 <_svfprintf_r+0x142a>
 8014018:	a92f      	add	r1, sp, #188	; 0xbc
 801401a:	000f      	movs	r7, r1
 801401c:	3c10      	subs	r4, #16
 801401e:	e756      	b.n	8013ece <_svfprintf_r+0x1066>
 8014020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014022:	2b00      	cmp	r3, #0
 8014024:	d061      	beq.n	80140ea <_svfprintf_r+0x1282>
 8014026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014028:	3b01      	subs	r3, #1
 801402a:	9310      	str	r3, [sp, #64]	; 0x40
 801402c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801402e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014030:	4694      	mov	ip, r2
 8014032:	603b      	str	r3, [r7, #0]
 8014034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014036:	607b      	str	r3, [r7, #4]
 8014038:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801403a:	3708      	adds	r7, #8
 801403c:	4463      	add	r3, ip
 801403e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014040:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014042:	9309      	str	r3, [sp, #36]	; 0x24
 8014044:	3301      	adds	r3, #1
 8014046:	932d      	str	r3, [sp, #180]	; 0xb4
 8014048:	2b07      	cmp	r3, #7
 801404a:	dd08      	ble.n	801405e <_svfprintf_r+0x11f6>
 801404c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801404e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014050:	aa2c      	add	r2, sp, #176	; 0xb0
 8014052:	f002 f9a3 	bl	801639c <__ssprint_r>
 8014056:	2800      	cmp	r0, #0
 8014058:	d000      	beq.n	801405c <_svfprintf_r+0x11f4>
 801405a:	e11a      	b.n	8014292 <_svfprintf_r+0x142a>
 801405c:	af2f      	add	r7, sp, #188	; 0xbc
 801405e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014060:	9b08      	ldr	r3, [sp, #32]
 8014062:	189b      	adds	r3, r3, r2
 8014064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014066:	1b5b      	subs	r3, r3, r5
 8014068:	7814      	ldrb	r4, [r2, #0]
 801406a:	429c      	cmp	r4, r3
 801406c:	dd00      	ble.n	8014070 <_svfprintf_r+0x1208>
 801406e:	001c      	movs	r4, r3
 8014070:	2c00      	cmp	r4, #0
 8014072:	dd14      	ble.n	801409e <_svfprintf_r+0x1236>
 8014074:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014076:	603d      	str	r5, [r7, #0]
 8014078:	18e3      	adds	r3, r4, r3
 801407a:	932e      	str	r3, [sp, #184]	; 0xb8
 801407c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801407e:	607c      	str	r4, [r7, #4]
 8014080:	9309      	str	r3, [sp, #36]	; 0x24
 8014082:	3301      	adds	r3, #1
 8014084:	932d      	str	r3, [sp, #180]	; 0xb4
 8014086:	3708      	adds	r7, #8
 8014088:	2b07      	cmp	r3, #7
 801408a:	dd08      	ble.n	801409e <_svfprintf_r+0x1236>
 801408c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801408e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014090:	aa2c      	add	r2, sp, #176	; 0xb0
 8014092:	f002 f983 	bl	801639c <__ssprint_r>
 8014096:	2800      	cmp	r0, #0
 8014098:	d000      	beq.n	801409c <_svfprintf_r+0x1234>
 801409a:	e0fa      	b.n	8014292 <_svfprintf_r+0x142a>
 801409c:	af2f      	add	r7, sp, #188	; 0xbc
 801409e:	43e3      	mvns	r3, r4
 80140a0:	17db      	asrs	r3, r3, #31
 80140a2:	401c      	ands	r4, r3
 80140a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	1b1c      	subs	r4, r3, r4
 80140aa:	2c00      	cmp	r4, #0
 80140ac:	dd19      	ble.n	80140e2 <_svfprintf_r+0x127a>
 80140ae:	0039      	movs	r1, r7
 80140b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80140b2:	4852      	ldr	r0, [pc, #328]	; (80141fc <_svfprintf_r+0x1394>)
 80140b4:	9309      	str	r3, [sp, #36]	; 0x24
 80140b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80140b8:	3301      	adds	r3, #1
 80140ba:	3108      	adds	r1, #8
 80140bc:	6038      	str	r0, [r7, #0]
 80140be:	2c10      	cmp	r4, #16
 80140c0:	dc1a      	bgt.n	80140f8 <_svfprintf_r+0x1290>
 80140c2:	607c      	str	r4, [r7, #4]
 80140c4:	18a4      	adds	r4, r4, r2
 80140c6:	000f      	movs	r7, r1
 80140c8:	942e      	str	r4, [sp, #184]	; 0xb8
 80140ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80140cc:	2b07      	cmp	r3, #7
 80140ce:	dd08      	ble.n	80140e2 <_svfprintf_r+0x127a>
 80140d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80140d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80140d6:	f002 f961 	bl	801639c <__ssprint_r>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d000      	beq.n	80140e0 <_svfprintf_r+0x1278>
 80140de:	e0d8      	b.n	8014292 <_svfprintf_r+0x142a>
 80140e0:	af2f      	add	r7, sp, #188	; 0xbc
 80140e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	18ed      	adds	r5, r5, r3
 80140e8:	e710      	b.n	8013f0c <_svfprintf_r+0x10a4>
 80140ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140ec:	3b01      	subs	r3, #1
 80140ee:	9312      	str	r3, [sp, #72]	; 0x48
 80140f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140f2:	3b01      	subs	r3, #1
 80140f4:	9311      	str	r3, [sp, #68]	; 0x44
 80140f6:	e799      	b.n	801402c <_svfprintf_r+0x11c4>
 80140f8:	2010      	movs	r0, #16
 80140fa:	1812      	adds	r2, r2, r0
 80140fc:	6078      	str	r0, [r7, #4]
 80140fe:	922e      	str	r2, [sp, #184]	; 0xb8
 8014100:	932d      	str	r3, [sp, #180]	; 0xb4
 8014102:	2b07      	cmp	r3, #7
 8014104:	dd08      	ble.n	8014118 <_svfprintf_r+0x12b0>
 8014106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014108:	980a      	ldr	r0, [sp, #40]	; 0x28
 801410a:	aa2c      	add	r2, sp, #176	; 0xb0
 801410c:	f002 f946 	bl	801639c <__ssprint_r>
 8014110:	2800      	cmp	r0, #0
 8014112:	d000      	beq.n	8014116 <_svfprintf_r+0x12ae>
 8014114:	e0bd      	b.n	8014292 <_svfprintf_r+0x142a>
 8014116:	a92f      	add	r1, sp, #188	; 0xbc
 8014118:	000f      	movs	r7, r1
 801411a:	3c10      	subs	r4, #16
 801411c:	e7c7      	b.n	80140ae <_svfprintf_r+0x1246>
 801411e:	003c      	movs	r4, r7
 8014120:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014122:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014126:	9309      	str	r3, [sp, #36]	; 0x24
 8014128:	3101      	adds	r1, #1
 801412a:	3301      	adds	r3, #1
 801412c:	3408      	adds	r4, #8
 801412e:	2a01      	cmp	r2, #1
 8014130:	dc03      	bgt.n	801413a <_svfprintf_r+0x12d2>
 8014132:	2201      	movs	r2, #1
 8014134:	4216      	tst	r6, r2
 8014136:	d100      	bne.n	801413a <_svfprintf_r+0x12d2>
 8014138:	e088      	b.n	801424c <_svfprintf_r+0x13e4>
 801413a:	9a08      	ldr	r2, [sp, #32]
 801413c:	912e      	str	r1, [sp, #184]	; 0xb8
 801413e:	603a      	str	r2, [r7, #0]
 8014140:	2201      	movs	r2, #1
 8014142:	932d      	str	r3, [sp, #180]	; 0xb4
 8014144:	607a      	str	r2, [r7, #4]
 8014146:	2b07      	cmp	r3, #7
 8014148:	dd08      	ble.n	801415c <_svfprintf_r+0x12f4>
 801414a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801414c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801414e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014150:	f002 f924 	bl	801639c <__ssprint_r>
 8014154:	2800      	cmp	r0, #0
 8014156:	d000      	beq.n	801415a <_svfprintf_r+0x12f2>
 8014158:	e09b      	b.n	8014292 <_svfprintf_r+0x142a>
 801415a:	ac2f      	add	r4, sp, #188	; 0xbc
 801415c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801415e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014160:	4694      	mov	ip, r2
 8014162:	6023      	str	r3, [r4, #0]
 8014164:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014166:	6063      	str	r3, [r4, #4]
 8014168:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801416a:	3408      	adds	r4, #8
 801416c:	4463      	add	r3, ip
 801416e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014170:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014172:	9309      	str	r3, [sp, #36]	; 0x24
 8014174:	3301      	adds	r3, #1
 8014176:	932d      	str	r3, [sp, #180]	; 0xb4
 8014178:	2b07      	cmp	r3, #7
 801417a:	dd08      	ble.n	801418e <_svfprintf_r+0x1326>
 801417c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801417e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014180:	aa2c      	add	r2, sp, #176	; 0xb0
 8014182:	f002 f90b 	bl	801639c <__ssprint_r>
 8014186:	2800      	cmp	r0, #0
 8014188:	d000      	beq.n	801418c <_svfprintf_r+0x1324>
 801418a:	e082      	b.n	8014292 <_svfprintf_r+0x142a>
 801418c:	ac2f      	add	r4, sp, #188	; 0xbc
 801418e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014190:	2200      	movs	r2, #0
 8014192:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014194:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014196:	1e5d      	subs	r5, r3, #1
 8014198:	2300      	movs	r3, #0
 801419a:	f7ec f95f 	bl	800045c <__aeabi_dcmpeq>
 801419e:	2800      	cmp	r0, #0
 80141a0:	d12e      	bne.n	8014200 <_svfprintf_r+0x1398>
 80141a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80141a4:	9808      	ldr	r0, [sp, #32]
 80141a6:	9309      	str	r3, [sp, #36]	; 0x24
 80141a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80141aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141ac:	1c59      	adds	r1, r3, #1
 80141ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80141b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141b2:	3001      	adds	r0, #1
 80141b4:	3b01      	subs	r3, #1
 80141b6:	189b      	adds	r3, r3, r2
 80141b8:	6020      	str	r0, [r4, #0]
 80141ba:	6065      	str	r5, [r4, #4]
 80141bc:	932e      	str	r3, [sp, #184]	; 0xb8
 80141be:	912d      	str	r1, [sp, #180]	; 0xb4
 80141c0:	3408      	adds	r4, #8
 80141c2:	2907      	cmp	r1, #7
 80141c4:	dd07      	ble.n	80141d6 <_svfprintf_r+0x136e>
 80141c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141ca:	aa2c      	add	r2, sp, #176	; 0xb0
 80141cc:	f002 f8e6 	bl	801639c <__ssprint_r>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d15e      	bne.n	8014292 <_svfprintf_r+0x142a>
 80141d4:	ac2f      	add	r4, sp, #188	; 0xbc
 80141d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80141d8:	ab28      	add	r3, sp, #160	; 0xa0
 80141da:	4694      	mov	ip, r2
 80141dc:	6023      	str	r3, [r4, #0]
 80141de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80141e0:	6063      	str	r3, [r4, #4]
 80141e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80141e4:	4463      	add	r3, ip
 80141e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80141e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80141ea:	9308      	str	r3, [sp, #32]
 80141ec:	3301      	adds	r3, #1
 80141ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80141f0:	2b07      	cmp	r3, #7
 80141f2:	dd00      	ble.n	80141f6 <_svfprintf_r+0x138e>
 80141f4:	e627      	b.n	8013e46 <_svfprintf_r+0xfde>
 80141f6:	3408      	adds	r4, #8
 80141f8:	0027      	movs	r7, r4
 80141fa:	e57a      	b.n	8013cf2 <_svfprintf_r+0xe8a>
 80141fc:	0801a96c 	.word	0x0801a96c
 8014200:	2710      	movs	r7, #16
 8014202:	2d00      	cmp	r5, #0
 8014204:	dde7      	ble.n	80141d6 <_svfprintf_r+0x136e>
 8014206:	0021      	movs	r1, r4
 8014208:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801420a:	4857      	ldr	r0, [pc, #348]	; (8014368 <_svfprintf_r+0x1500>)
 801420c:	9308      	str	r3, [sp, #32]
 801420e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014210:	3301      	adds	r3, #1
 8014212:	3108      	adds	r1, #8
 8014214:	6020      	str	r0, [r4, #0]
 8014216:	2d10      	cmp	r5, #16
 8014218:	dc07      	bgt.n	801422a <_svfprintf_r+0x13c2>
 801421a:	6065      	str	r5, [r4, #4]
 801421c:	000c      	movs	r4, r1
 801421e:	18ad      	adds	r5, r5, r2
 8014220:	952e      	str	r5, [sp, #184]	; 0xb8
 8014222:	932d      	str	r3, [sp, #180]	; 0xb4
 8014224:	2b07      	cmp	r3, #7
 8014226:	ddd6      	ble.n	80141d6 <_svfprintf_r+0x136e>
 8014228:	e7cd      	b.n	80141c6 <_svfprintf_r+0x135e>
 801422a:	3210      	adds	r2, #16
 801422c:	6067      	str	r7, [r4, #4]
 801422e:	922e      	str	r2, [sp, #184]	; 0xb8
 8014230:	932d      	str	r3, [sp, #180]	; 0xb4
 8014232:	2b07      	cmp	r3, #7
 8014234:	dd07      	ble.n	8014246 <_svfprintf_r+0x13de>
 8014236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014238:	980a      	ldr	r0, [sp, #40]	; 0x28
 801423a:	aa2c      	add	r2, sp, #176	; 0xb0
 801423c:	f002 f8ae 	bl	801639c <__ssprint_r>
 8014240:	2800      	cmp	r0, #0
 8014242:	d126      	bne.n	8014292 <_svfprintf_r+0x142a>
 8014244:	a92f      	add	r1, sp, #188	; 0xbc
 8014246:	000c      	movs	r4, r1
 8014248:	3d10      	subs	r5, #16
 801424a:	e7dc      	b.n	8014206 <_svfprintf_r+0x139e>
 801424c:	9808      	ldr	r0, [sp, #32]
 801424e:	912e      	str	r1, [sp, #184]	; 0xb8
 8014250:	c705      	stmia	r7!, {r0, r2}
 8014252:	932d      	str	r3, [sp, #180]	; 0xb4
 8014254:	e7e6      	b.n	8014224 <_svfprintf_r+0x13bc>
 8014256:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014258:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801425a:	2510      	movs	r5, #16
 801425c:	1a9c      	subs	r4, r3, r2
 801425e:	2c00      	cmp	r4, #0
 8014260:	dc00      	bgt.n	8014264 <_svfprintf_r+0x13fc>
 8014262:	e549      	b.n	8013cf8 <_svfprintf_r+0xe90>
 8014264:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014266:	4941      	ldr	r1, [pc, #260]	; (801436c <_svfprintf_r+0x1504>)
 8014268:	9308      	str	r3, [sp, #32]
 801426a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801426c:	3301      	adds	r3, #1
 801426e:	6039      	str	r1, [r7, #0]
 8014270:	2c10      	cmp	r4, #16
 8014272:	dc19      	bgt.n	80142a8 <_svfprintf_r+0x1440>
 8014274:	607c      	str	r4, [r7, #4]
 8014276:	1914      	adds	r4, r2, r4
 8014278:	942e      	str	r4, [sp, #184]	; 0xb8
 801427a:	932d      	str	r3, [sp, #180]	; 0xb4
 801427c:	2b07      	cmp	r3, #7
 801427e:	dc00      	bgt.n	8014282 <_svfprintf_r+0x141a>
 8014280:	e53a      	b.n	8013cf8 <_svfprintf_r+0xe90>
 8014282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014284:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014286:	aa2c      	add	r2, sp, #176	; 0xb0
 8014288:	f002 f888 	bl	801639c <__ssprint_r>
 801428c:	2800      	cmp	r0, #0
 801428e:	d100      	bne.n	8014292 <_svfprintf_r+0x142a>
 8014290:	e532      	b.n	8013cf8 <_svfprintf_r+0xe90>
 8014292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014294:	2b00      	cmp	r3, #0
 8014296:	d101      	bne.n	801429c <_svfprintf_r+0x1434>
 8014298:	f7ff f8ec 	bl	8013474 <_svfprintf_r+0x60c>
 801429c:	0019      	movs	r1, r3
 801429e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142a0:	f000 ff66 	bl	8015170 <_free_r>
 80142a4:	f7ff f8e6 	bl	8013474 <_svfprintf_r+0x60c>
 80142a8:	3210      	adds	r2, #16
 80142aa:	607d      	str	r5, [r7, #4]
 80142ac:	922e      	str	r2, [sp, #184]	; 0xb8
 80142ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80142b0:	3708      	adds	r7, #8
 80142b2:	2b07      	cmp	r3, #7
 80142b4:	dd07      	ble.n	80142c6 <_svfprintf_r+0x145e>
 80142b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80142bc:	f002 f86e 	bl	801639c <__ssprint_r>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d1e6      	bne.n	8014292 <_svfprintf_r+0x142a>
 80142c4:	af2f      	add	r7, sp, #188	; 0xbc
 80142c6:	3c10      	subs	r4, #16
 80142c8:	e7cc      	b.n	8014264 <_svfprintf_r+0x13fc>
 80142ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142ce:	f000 ff4f 	bl	8015170 <_free_r>
 80142d2:	e52b      	b.n	8013d2c <_svfprintf_r+0xec4>
 80142d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80142d6:	9306      	str	r3, [sp, #24]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d101      	bne.n	80142e0 <_svfprintf_r+0x1478>
 80142dc:	f7ff f8ca 	bl	8013474 <_svfprintf_r+0x60c>
 80142e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142e4:	aa2c      	add	r2, sp, #176	; 0xb0
 80142e6:	f002 f859 	bl	801639c <__ssprint_r>
 80142ea:	f7ff f8c3 	bl	8013474 <_svfprintf_r+0x60c>
 80142ee:	0035      	movs	r5, r6
 80142f0:	2a00      	cmp	r2, #0
 80142f2:	d101      	bne.n	80142f8 <_svfprintf_r+0x1490>
 80142f4:	f7ff f832 	bl	801335c <_svfprintf_r+0x4f4>
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d101      	bne.n	8014300 <_svfprintf_r+0x1498>
 80142fc:	f7ff fbdf 	bl	8013abe <_svfprintf_r+0xc56>
 8014300:	2b02      	cmp	r3, #2
 8014302:	d100      	bne.n	8014306 <_svfprintf_r+0x149e>
 8014304:	e430      	b.n	8013b68 <_svfprintf_r+0xd00>
 8014306:	2607      	movs	r6, #7
 8014308:	ab58      	add	r3, sp, #352	; 0x160
 801430a:	9308      	str	r3, [sp, #32]
 801430c:	9908      	ldr	r1, [sp, #32]
 801430e:	000b      	movs	r3, r1
 8014310:	3b01      	subs	r3, #1
 8014312:	9308      	str	r3, [sp, #32]
 8014314:	9b06      	ldr	r3, [sp, #24]
 8014316:	9a08      	ldr	r2, [sp, #32]
 8014318:	4033      	ands	r3, r6
 801431a:	3330      	adds	r3, #48	; 0x30
 801431c:	7013      	strb	r3, [r2, #0]
 801431e:	9a07      	ldr	r2, [sp, #28]
 8014320:	0754      	lsls	r4, r2, #29
 8014322:	9a06      	ldr	r2, [sp, #24]
 8014324:	08d0      	lsrs	r0, r2, #3
 8014326:	9a07      	ldr	r2, [sp, #28]
 8014328:	4304      	orrs	r4, r0
 801432a:	08d2      	lsrs	r2, r2, #3
 801432c:	9207      	str	r2, [sp, #28]
 801432e:	0022      	movs	r2, r4
 8014330:	9807      	ldr	r0, [sp, #28]
 8014332:	9406      	str	r4, [sp, #24]
 8014334:	4302      	orrs	r2, r0
 8014336:	d1e9      	bne.n	801430c <_svfprintf_r+0x14a4>
 8014338:	07ea      	lsls	r2, r5, #31
 801433a:	d507      	bpl.n	801434c <_svfprintf_r+0x14e4>
 801433c:	2b30      	cmp	r3, #48	; 0x30
 801433e:	d005      	beq.n	801434c <_svfprintf_r+0x14e4>
 8014340:	2330      	movs	r3, #48	; 0x30
 8014342:	9808      	ldr	r0, [sp, #32]
 8014344:	3801      	subs	r0, #1
 8014346:	7003      	strb	r3, [r0, #0]
 8014348:	1e8b      	subs	r3, r1, #2
 801434a:	9308      	str	r3, [sp, #32]
 801434c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434e:	9a08      	ldr	r2, [sp, #32]
 8014350:	9319      	str	r3, [sp, #100]	; 0x64
 8014352:	ab58      	add	r3, sp, #352	; 0x160
 8014354:	1a9b      	subs	r3, r3, r2
 8014356:	9309      	str	r3, [sp, #36]	; 0x24
 8014358:	2300      	movs	r3, #0
 801435a:	002e      	movs	r6, r5
 801435c:	930c      	str	r3, [sp, #48]	; 0x30
 801435e:	001d      	movs	r5, r3
 8014360:	9310      	str	r3, [sp, #64]	; 0x40
 8014362:	9311      	str	r3, [sp, #68]	; 0x44
 8014364:	f7fe feee 	bl	8013144 <_svfprintf_r+0x2dc>
 8014368:	0801a96c 	.word	0x0801a96c
 801436c:	0801a95c 	.word	0x0801a95c

08014370 <sysconf>:
 8014370:	2380      	movs	r3, #128	; 0x80
 8014372:	b510      	push	{r4, lr}
 8014374:	015b      	lsls	r3, r3, #5
 8014376:	2808      	cmp	r0, #8
 8014378:	d004      	beq.n	8014384 <sysconf+0x14>
 801437a:	f000 fe8b 	bl	8015094 <__errno>
 801437e:	2316      	movs	r3, #22
 8014380:	6003      	str	r3, [r0, #0]
 8014382:	3b17      	subs	r3, #23
 8014384:	0018      	movs	r0, r3
 8014386:	bd10      	pop	{r4, pc}

08014388 <register_fini>:
 8014388:	4b03      	ldr	r3, [pc, #12]	; (8014398 <register_fini+0x10>)
 801438a:	b510      	push	{r4, lr}
 801438c:	2b00      	cmp	r3, #0
 801438e:	d002      	beq.n	8014396 <register_fini+0xe>
 8014390:	4802      	ldr	r0, [pc, #8]	; (801439c <register_fini+0x14>)
 8014392:	f000 f805 	bl	80143a0 <atexit>
 8014396:	bd10      	pop	{r4, pc}
 8014398:	00000000 	.word	0x00000000
 801439c:	080150a1 	.word	0x080150a1

080143a0 <atexit>:
 80143a0:	2300      	movs	r3, #0
 80143a2:	b510      	push	{r4, lr}
 80143a4:	0001      	movs	r1, r0
 80143a6:	001a      	movs	r2, r3
 80143a8:	0018      	movs	r0, r3
 80143aa:	f002 f885 	bl	80164b8 <__register_exitproc>
 80143ae:	bd10      	pop	{r4, pc}

080143b0 <quorem>:
 80143b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143b2:	0006      	movs	r6, r0
 80143b4:	690d      	ldr	r5, [r1, #16]
 80143b6:	6933      	ldr	r3, [r6, #16]
 80143b8:	b087      	sub	sp, #28
 80143ba:	2000      	movs	r0, #0
 80143bc:	9102      	str	r1, [sp, #8]
 80143be:	42ab      	cmp	r3, r5
 80143c0:	db6b      	blt.n	801449a <quorem+0xea>
 80143c2:	000b      	movs	r3, r1
 80143c4:	3d01      	subs	r5, #1
 80143c6:	00ac      	lsls	r4, r5, #2
 80143c8:	3314      	adds	r3, #20
 80143ca:	9305      	str	r3, [sp, #20]
 80143cc:	191b      	adds	r3, r3, r4
 80143ce:	9303      	str	r3, [sp, #12]
 80143d0:	0033      	movs	r3, r6
 80143d2:	3314      	adds	r3, #20
 80143d4:	9301      	str	r3, [sp, #4]
 80143d6:	191c      	adds	r4, r3, r4
 80143d8:	9b03      	ldr	r3, [sp, #12]
 80143da:	6827      	ldr	r7, [r4, #0]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	0038      	movs	r0, r7
 80143e0:	9300      	str	r3, [sp, #0]
 80143e2:	3301      	adds	r3, #1
 80143e4:	0019      	movs	r1, r3
 80143e6:	9304      	str	r3, [sp, #16]
 80143e8:	f7eb feb2 	bl	8000150 <__udivsi3>
 80143ec:	9b04      	ldr	r3, [sp, #16]
 80143ee:	9000      	str	r0, [sp, #0]
 80143f0:	429f      	cmp	r7, r3
 80143f2:	d329      	bcc.n	8014448 <quorem+0x98>
 80143f4:	2300      	movs	r3, #0
 80143f6:	469c      	mov	ip, r3
 80143f8:	9801      	ldr	r0, [sp, #4]
 80143fa:	9f05      	ldr	r7, [sp, #20]
 80143fc:	9304      	str	r3, [sp, #16]
 80143fe:	cf08      	ldmia	r7!, {r3}
 8014400:	9a00      	ldr	r2, [sp, #0]
 8014402:	b299      	uxth	r1, r3
 8014404:	4351      	muls	r1, r2
 8014406:	0c1b      	lsrs	r3, r3, #16
 8014408:	4353      	muls	r3, r2
 801440a:	4461      	add	r1, ip
 801440c:	0c0a      	lsrs	r2, r1, #16
 801440e:	189b      	adds	r3, r3, r2
 8014410:	0c1a      	lsrs	r2, r3, #16
 8014412:	9305      	str	r3, [sp, #20]
 8014414:	6803      	ldr	r3, [r0, #0]
 8014416:	4694      	mov	ip, r2
 8014418:	b29a      	uxth	r2, r3
 801441a:	9b04      	ldr	r3, [sp, #16]
 801441c:	b289      	uxth	r1, r1
 801441e:	18d2      	adds	r2, r2, r3
 8014420:	6803      	ldr	r3, [r0, #0]
 8014422:	1a52      	subs	r2, r2, r1
 8014424:	0c19      	lsrs	r1, r3, #16
 8014426:	466b      	mov	r3, sp
 8014428:	8a9b      	ldrh	r3, [r3, #20]
 801442a:	1acb      	subs	r3, r1, r3
 801442c:	1411      	asrs	r1, r2, #16
 801442e:	185b      	adds	r3, r3, r1
 8014430:	1419      	asrs	r1, r3, #16
 8014432:	b292      	uxth	r2, r2
 8014434:	041b      	lsls	r3, r3, #16
 8014436:	431a      	orrs	r2, r3
 8014438:	9b03      	ldr	r3, [sp, #12]
 801443a:	9104      	str	r1, [sp, #16]
 801443c:	c004      	stmia	r0!, {r2}
 801443e:	42bb      	cmp	r3, r7
 8014440:	d2dd      	bcs.n	80143fe <quorem+0x4e>
 8014442:	6823      	ldr	r3, [r4, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d02e      	beq.n	80144a6 <quorem+0xf6>
 8014448:	0030      	movs	r0, r6
 801444a:	9902      	ldr	r1, [sp, #8]
 801444c:	f001 fd76 	bl	8015f3c <__mcmp>
 8014450:	2800      	cmp	r0, #0
 8014452:	db21      	blt.n	8014498 <quorem+0xe8>
 8014454:	0030      	movs	r0, r6
 8014456:	2400      	movs	r4, #0
 8014458:	9b00      	ldr	r3, [sp, #0]
 801445a:	9902      	ldr	r1, [sp, #8]
 801445c:	3301      	adds	r3, #1
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	3014      	adds	r0, #20
 8014462:	3114      	adds	r1, #20
 8014464:	6802      	ldr	r2, [r0, #0]
 8014466:	c908      	ldmia	r1!, {r3}
 8014468:	b292      	uxth	r2, r2
 801446a:	1914      	adds	r4, r2, r4
 801446c:	b29a      	uxth	r2, r3
 801446e:	1aa2      	subs	r2, r4, r2
 8014470:	6804      	ldr	r4, [r0, #0]
 8014472:	0c1b      	lsrs	r3, r3, #16
 8014474:	0c24      	lsrs	r4, r4, #16
 8014476:	1ae3      	subs	r3, r4, r3
 8014478:	1414      	asrs	r4, r2, #16
 801447a:	191b      	adds	r3, r3, r4
 801447c:	141c      	asrs	r4, r3, #16
 801447e:	b292      	uxth	r2, r2
 8014480:	041b      	lsls	r3, r3, #16
 8014482:	4313      	orrs	r3, r2
 8014484:	c008      	stmia	r0!, {r3}
 8014486:	9b03      	ldr	r3, [sp, #12]
 8014488:	428b      	cmp	r3, r1
 801448a:	d2eb      	bcs.n	8014464 <quorem+0xb4>
 801448c:	9a01      	ldr	r2, [sp, #4]
 801448e:	00ab      	lsls	r3, r5, #2
 8014490:	18d3      	adds	r3, r2, r3
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	2a00      	cmp	r2, #0
 8014496:	d010      	beq.n	80144ba <quorem+0x10a>
 8014498:	9800      	ldr	r0, [sp, #0]
 801449a:	b007      	add	sp, #28
 801449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d104      	bne.n	80144ae <quorem+0xfe>
 80144a4:	3d01      	subs	r5, #1
 80144a6:	9b01      	ldr	r3, [sp, #4]
 80144a8:	3c04      	subs	r4, #4
 80144aa:	42a3      	cmp	r3, r4
 80144ac:	d3f7      	bcc.n	801449e <quorem+0xee>
 80144ae:	6135      	str	r5, [r6, #16]
 80144b0:	e7ca      	b.n	8014448 <quorem+0x98>
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	2a00      	cmp	r2, #0
 80144b6:	d104      	bne.n	80144c2 <quorem+0x112>
 80144b8:	3d01      	subs	r5, #1
 80144ba:	9a01      	ldr	r2, [sp, #4]
 80144bc:	3b04      	subs	r3, #4
 80144be:	429a      	cmp	r2, r3
 80144c0:	d3f7      	bcc.n	80144b2 <quorem+0x102>
 80144c2:	6135      	str	r5, [r6, #16]
 80144c4:	e7e8      	b.n	8014498 <quorem+0xe8>
	...

080144c8 <_dtoa_r>:
 80144c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ca:	0014      	movs	r4, r2
 80144cc:	001d      	movs	r5, r3
 80144ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80144d0:	b09d      	sub	sp, #116	; 0x74
 80144d2:	940a      	str	r4, [sp, #40]	; 0x28
 80144d4:	950b      	str	r5, [sp, #44]	; 0x2c
 80144d6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80144d8:	9003      	str	r0, [sp, #12]
 80144da:	2900      	cmp	r1, #0
 80144dc:	d009      	beq.n	80144f2 <_dtoa_r+0x2a>
 80144de:	2301      	movs	r3, #1
 80144e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80144e2:	4093      	lsls	r3, r2
 80144e4:	604a      	str	r2, [r1, #4]
 80144e6:	608b      	str	r3, [r1, #8]
 80144e8:	f001 face 	bl	8015a88 <_Bfree>
 80144ec:	2300      	movs	r3, #0
 80144ee:	9a03      	ldr	r2, [sp, #12]
 80144f0:	6413      	str	r3, [r2, #64]	; 0x40
 80144f2:	2d00      	cmp	r5, #0
 80144f4:	da1f      	bge.n	8014536 <_dtoa_r+0x6e>
 80144f6:	2301      	movs	r3, #1
 80144f8:	6033      	str	r3, [r6, #0]
 80144fa:	006b      	lsls	r3, r5, #1
 80144fc:	085b      	lsrs	r3, r3, #1
 80144fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014500:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014502:	4bb9      	ldr	r3, [pc, #740]	; (80147e8 <_dtoa_r+0x320>)
 8014504:	003a      	movs	r2, r7
 8014506:	9318      	str	r3, [sp, #96]	; 0x60
 8014508:	401a      	ands	r2, r3
 801450a:	429a      	cmp	r2, r3
 801450c:	d116      	bne.n	801453c <_dtoa_r+0x74>
 801450e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014510:	4bb6      	ldr	r3, [pc, #728]	; (80147ec <_dtoa_r+0x324>)
 8014512:	6013      	str	r3, [r2, #0]
 8014514:	033a      	lsls	r2, r7, #12
 8014516:	0b12      	lsrs	r2, r2, #12
 8014518:	4314      	orrs	r4, r2
 801451a:	d101      	bne.n	8014520 <_dtoa_r+0x58>
 801451c:	f000 fda4 	bl	8015068 <_dtoa_r+0xba0>
 8014520:	48b3      	ldr	r0, [pc, #716]	; (80147f0 <_dtoa_r+0x328>)
 8014522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014524:	9005      	str	r0, [sp, #20]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d002      	beq.n	8014530 <_dtoa_r+0x68>
 801452a:	4bb2      	ldr	r3, [pc, #712]	; (80147f4 <_dtoa_r+0x32c>)
 801452c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801452e:	6013      	str	r3, [r2, #0]
 8014530:	9805      	ldr	r0, [sp, #20]
 8014532:	b01d      	add	sp, #116	; 0x74
 8014534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014536:	2300      	movs	r3, #0
 8014538:	6033      	str	r3, [r6, #0]
 801453a:	e7e1      	b.n	8014500 <_dtoa_r+0x38>
 801453c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801453e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014540:	9210      	str	r2, [sp, #64]	; 0x40
 8014542:	9311      	str	r3, [sp, #68]	; 0x44
 8014544:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014546:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014548:	2200      	movs	r2, #0
 801454a:	2300      	movs	r3, #0
 801454c:	f7eb ff86 	bl	800045c <__aeabi_dcmpeq>
 8014550:	1e06      	subs	r6, r0, #0
 8014552:	d00b      	beq.n	801456c <_dtoa_r+0xa4>
 8014554:	2301      	movs	r3, #1
 8014556:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014558:	6013      	str	r3, [r2, #0]
 801455a:	4ba7      	ldr	r3, [pc, #668]	; (80147f8 <_dtoa_r+0x330>)
 801455c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801455e:	9305      	str	r3, [sp, #20]
 8014560:	2a00      	cmp	r2, #0
 8014562:	d0e5      	beq.n	8014530 <_dtoa_r+0x68>
 8014564:	4aa5      	ldr	r2, [pc, #660]	; (80147fc <_dtoa_r+0x334>)
 8014566:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014568:	600a      	str	r2, [r1, #0]
 801456a:	e7e1      	b.n	8014530 <_dtoa_r+0x68>
 801456c:	ab1a      	add	r3, sp, #104	; 0x68
 801456e:	9301      	str	r3, [sp, #4]
 8014570:	ab1b      	add	r3, sp, #108	; 0x6c
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	9803      	ldr	r0, [sp, #12]
 8014576:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801457a:	f001 fe07 	bl	801618c <__d2b>
 801457e:	007b      	lsls	r3, r7, #1
 8014580:	9004      	str	r0, [sp, #16]
 8014582:	0d5b      	lsrs	r3, r3, #21
 8014584:	d100      	bne.n	8014588 <_dtoa_r+0xc0>
 8014586:	e07c      	b.n	8014682 <_dtoa_r+0x1ba>
 8014588:	9810      	ldr	r0, [sp, #64]	; 0x40
 801458a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801458c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801458e:	4c9c      	ldr	r4, [pc, #624]	; (8014800 <_dtoa_r+0x338>)
 8014590:	0312      	lsls	r2, r2, #12
 8014592:	0b12      	lsrs	r2, r2, #12
 8014594:	4314      	orrs	r4, r2
 8014596:	0021      	movs	r1, r4
 8014598:	4a9a      	ldr	r2, [pc, #616]	; (8014804 <_dtoa_r+0x33c>)
 801459a:	9616      	str	r6, [sp, #88]	; 0x58
 801459c:	189f      	adds	r7, r3, r2
 801459e:	2200      	movs	r2, #0
 80145a0:	4b99      	ldr	r3, [pc, #612]	; (8014808 <_dtoa_r+0x340>)
 80145a2:	f7ed fbe1 	bl	8001d68 <__aeabi_dsub>
 80145a6:	4a99      	ldr	r2, [pc, #612]	; (801480c <_dtoa_r+0x344>)
 80145a8:	4b99      	ldr	r3, [pc, #612]	; (8014810 <_dtoa_r+0x348>)
 80145aa:	f7ed f971 	bl	8001890 <__aeabi_dmul>
 80145ae:	4a99      	ldr	r2, [pc, #612]	; (8014814 <_dtoa_r+0x34c>)
 80145b0:	4b99      	ldr	r3, [pc, #612]	; (8014818 <_dtoa_r+0x350>)
 80145b2:	f7ec f9fd 	bl	80009b0 <__aeabi_dadd>
 80145b6:	0004      	movs	r4, r0
 80145b8:	0038      	movs	r0, r7
 80145ba:	000d      	movs	r5, r1
 80145bc:	f7ed ffba 	bl	8002534 <__aeabi_i2d>
 80145c0:	4a96      	ldr	r2, [pc, #600]	; (801481c <_dtoa_r+0x354>)
 80145c2:	4b97      	ldr	r3, [pc, #604]	; (8014820 <_dtoa_r+0x358>)
 80145c4:	f7ed f964 	bl	8001890 <__aeabi_dmul>
 80145c8:	0002      	movs	r2, r0
 80145ca:	000b      	movs	r3, r1
 80145cc:	0020      	movs	r0, r4
 80145ce:	0029      	movs	r1, r5
 80145d0:	f7ec f9ee 	bl	80009b0 <__aeabi_dadd>
 80145d4:	0004      	movs	r4, r0
 80145d6:	000d      	movs	r5, r1
 80145d8:	f7ed ff76 	bl	80024c8 <__aeabi_d2iz>
 80145dc:	2200      	movs	r2, #0
 80145de:	9002      	str	r0, [sp, #8]
 80145e0:	2300      	movs	r3, #0
 80145e2:	0020      	movs	r0, r4
 80145e4:	0029      	movs	r1, r5
 80145e6:	f7eb ff3f 	bl	8000468 <__aeabi_dcmplt>
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d00b      	beq.n	8014606 <_dtoa_r+0x13e>
 80145ee:	9802      	ldr	r0, [sp, #8]
 80145f0:	f7ed ffa0 	bl	8002534 <__aeabi_i2d>
 80145f4:	002b      	movs	r3, r5
 80145f6:	0022      	movs	r2, r4
 80145f8:	f7eb ff30 	bl	800045c <__aeabi_dcmpeq>
 80145fc:	4243      	negs	r3, r0
 80145fe:	4158      	adcs	r0, r3
 8014600:	9b02      	ldr	r3, [sp, #8]
 8014602:	1a1b      	subs	r3, r3, r0
 8014604:	9302      	str	r3, [sp, #8]
 8014606:	2301      	movs	r3, #1
 8014608:	9314      	str	r3, [sp, #80]	; 0x50
 801460a:	9b02      	ldr	r3, [sp, #8]
 801460c:	2b16      	cmp	r3, #22
 801460e:	d80f      	bhi.n	8014630 <_dtoa_r+0x168>
 8014610:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014612:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014614:	00da      	lsls	r2, r3, #3
 8014616:	4b83      	ldr	r3, [pc, #524]	; (8014824 <_dtoa_r+0x35c>)
 8014618:	189b      	adds	r3, r3, r2
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	f7eb ff23 	bl	8000468 <__aeabi_dcmplt>
 8014622:	2800      	cmp	r0, #0
 8014624:	d049      	beq.n	80146ba <_dtoa_r+0x1f2>
 8014626:	9b02      	ldr	r3, [sp, #8]
 8014628:	3b01      	subs	r3, #1
 801462a:	9302      	str	r3, [sp, #8]
 801462c:	2300      	movs	r3, #0
 801462e:	9314      	str	r3, [sp, #80]	; 0x50
 8014630:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014632:	1bdf      	subs	r7, r3, r7
 8014634:	2300      	movs	r3, #0
 8014636:	9309      	str	r3, [sp, #36]	; 0x24
 8014638:	003b      	movs	r3, r7
 801463a:	3b01      	subs	r3, #1
 801463c:	930d      	str	r3, [sp, #52]	; 0x34
 801463e:	d504      	bpl.n	801464a <_dtoa_r+0x182>
 8014640:	2301      	movs	r3, #1
 8014642:	1bdb      	subs	r3, r3, r7
 8014644:	9309      	str	r3, [sp, #36]	; 0x24
 8014646:	2300      	movs	r3, #0
 8014648:	930d      	str	r3, [sp, #52]	; 0x34
 801464a:	9b02      	ldr	r3, [sp, #8]
 801464c:	2b00      	cmp	r3, #0
 801464e:	db36      	blt.n	80146be <_dtoa_r+0x1f6>
 8014650:	9a02      	ldr	r2, [sp, #8]
 8014652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014654:	4694      	mov	ip, r2
 8014656:	4463      	add	r3, ip
 8014658:	930d      	str	r3, [sp, #52]	; 0x34
 801465a:	2300      	movs	r3, #0
 801465c:	9213      	str	r2, [sp, #76]	; 0x4c
 801465e:	930e      	str	r3, [sp, #56]	; 0x38
 8014660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014662:	2401      	movs	r4, #1
 8014664:	2b09      	cmp	r3, #9
 8014666:	d865      	bhi.n	8014734 <_dtoa_r+0x26c>
 8014668:	2b05      	cmp	r3, #5
 801466a:	dd02      	ble.n	8014672 <_dtoa_r+0x1aa>
 801466c:	2400      	movs	r4, #0
 801466e:	3b04      	subs	r3, #4
 8014670:	9322      	str	r3, [sp, #136]	; 0x88
 8014672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014674:	1e98      	subs	r0, r3, #2
 8014676:	2803      	cmp	r0, #3
 8014678:	d865      	bhi.n	8014746 <_dtoa_r+0x27e>
 801467a:	f7eb fd55 	bl	8000128 <__gnu_thumb1_case_uqi>
 801467e:	3629      	.short	0x3629
 8014680:	5934      	.short	0x5934
 8014682:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014684:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014686:	189e      	adds	r6, r3, r2
 8014688:	4b67      	ldr	r3, [pc, #412]	; (8014828 <_dtoa_r+0x360>)
 801468a:	18f2      	adds	r2, r6, r3
 801468c:	2a20      	cmp	r2, #32
 801468e:	dd0f      	ble.n	80146b0 <_dtoa_r+0x1e8>
 8014690:	2340      	movs	r3, #64	; 0x40
 8014692:	0038      	movs	r0, r7
 8014694:	1a9b      	subs	r3, r3, r2
 8014696:	4098      	lsls	r0, r3
 8014698:	4b64      	ldr	r3, [pc, #400]	; (801482c <_dtoa_r+0x364>)
 801469a:	18f3      	adds	r3, r6, r3
 801469c:	40dc      	lsrs	r4, r3
 801469e:	4320      	orrs	r0, r4
 80146a0:	f7ed ff78 	bl	8002594 <__aeabi_ui2d>
 80146a4:	2301      	movs	r3, #1
 80146a6:	4c62      	ldr	r4, [pc, #392]	; (8014830 <_dtoa_r+0x368>)
 80146a8:	1e77      	subs	r7, r6, #1
 80146aa:	1909      	adds	r1, r1, r4
 80146ac:	9316      	str	r3, [sp, #88]	; 0x58
 80146ae:	e776      	b.n	801459e <_dtoa_r+0xd6>
 80146b0:	2320      	movs	r3, #32
 80146b2:	0020      	movs	r0, r4
 80146b4:	1a9b      	subs	r3, r3, r2
 80146b6:	4098      	lsls	r0, r3
 80146b8:	e7f2      	b.n	80146a0 <_dtoa_r+0x1d8>
 80146ba:	9014      	str	r0, [sp, #80]	; 0x50
 80146bc:	e7b8      	b.n	8014630 <_dtoa_r+0x168>
 80146be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146c0:	9a02      	ldr	r2, [sp, #8]
 80146c2:	1a9b      	subs	r3, r3, r2
 80146c4:	9309      	str	r3, [sp, #36]	; 0x24
 80146c6:	4253      	negs	r3, r2
 80146c8:	930e      	str	r3, [sp, #56]	; 0x38
 80146ca:	2300      	movs	r3, #0
 80146cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80146ce:	e7c7      	b.n	8014660 <_dtoa_r+0x198>
 80146d0:	2300      	movs	r3, #0
 80146d2:	9312      	str	r3, [sp, #72]	; 0x48
 80146d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	dc39      	bgt.n	801474e <_dtoa_r+0x286>
 80146da:	2301      	movs	r3, #1
 80146dc:	001a      	movs	r2, r3
 80146de:	930c      	str	r3, [sp, #48]	; 0x30
 80146e0:	9308      	str	r3, [sp, #32]
 80146e2:	9223      	str	r2, [sp, #140]	; 0x8c
 80146e4:	e00d      	b.n	8014702 <_dtoa_r+0x23a>
 80146e6:	2301      	movs	r3, #1
 80146e8:	e7f3      	b.n	80146d2 <_dtoa_r+0x20a>
 80146ea:	2300      	movs	r3, #0
 80146ec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80146ee:	9312      	str	r3, [sp, #72]	; 0x48
 80146f0:	4694      	mov	ip, r2
 80146f2:	9b02      	ldr	r3, [sp, #8]
 80146f4:	4463      	add	r3, ip
 80146f6:	930c      	str	r3, [sp, #48]	; 0x30
 80146f8:	3301      	adds	r3, #1
 80146fa:	9308      	str	r3, [sp, #32]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	dc00      	bgt.n	8014702 <_dtoa_r+0x23a>
 8014700:	2301      	movs	r3, #1
 8014702:	2200      	movs	r2, #0
 8014704:	9903      	ldr	r1, [sp, #12]
 8014706:	644a      	str	r2, [r1, #68]	; 0x44
 8014708:	3204      	adds	r2, #4
 801470a:	0010      	movs	r0, r2
 801470c:	9903      	ldr	r1, [sp, #12]
 801470e:	3014      	adds	r0, #20
 8014710:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8014712:	4298      	cmp	r0, r3
 8014714:	d91f      	bls.n	8014756 <_dtoa_r+0x28e>
 8014716:	9803      	ldr	r0, [sp, #12]
 8014718:	f001 f98e 	bl	8015a38 <_Balloc>
 801471c:	9005      	str	r0, [sp, #20]
 801471e:	2800      	cmp	r0, #0
 8014720:	d11e      	bne.n	8014760 <_dtoa_r+0x298>
 8014722:	21d5      	movs	r1, #213	; 0xd5
 8014724:	0002      	movs	r2, r0
 8014726:	4b43      	ldr	r3, [pc, #268]	; (8014834 <_dtoa_r+0x36c>)
 8014728:	0049      	lsls	r1, r1, #1
 801472a:	4843      	ldr	r0, [pc, #268]	; (8014838 <_dtoa_r+0x370>)
 801472c:	f001 ff06 	bl	801653c <__assert_func>
 8014730:	2301      	movs	r3, #1
 8014732:	e7db      	b.n	80146ec <_dtoa_r+0x224>
 8014734:	2300      	movs	r3, #0
 8014736:	9412      	str	r4, [sp, #72]	; 0x48
 8014738:	9322      	str	r3, [sp, #136]	; 0x88
 801473a:	3b01      	subs	r3, #1
 801473c:	930c      	str	r3, [sp, #48]	; 0x30
 801473e:	9308      	str	r3, [sp, #32]
 8014740:	2200      	movs	r2, #0
 8014742:	3313      	adds	r3, #19
 8014744:	e7cd      	b.n	80146e2 <_dtoa_r+0x21a>
 8014746:	2301      	movs	r3, #1
 8014748:	9312      	str	r3, [sp, #72]	; 0x48
 801474a:	3b02      	subs	r3, #2
 801474c:	e7f6      	b.n	801473c <_dtoa_r+0x274>
 801474e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014750:	930c      	str	r3, [sp, #48]	; 0x30
 8014752:	9308      	str	r3, [sp, #32]
 8014754:	e7d5      	b.n	8014702 <_dtoa_r+0x23a>
 8014756:	9803      	ldr	r0, [sp, #12]
 8014758:	3101      	adds	r1, #1
 801475a:	6441      	str	r1, [r0, #68]	; 0x44
 801475c:	0052      	lsls	r2, r2, #1
 801475e:	e7d4      	b.n	801470a <_dtoa_r+0x242>
 8014760:	9b03      	ldr	r3, [sp, #12]
 8014762:	9a05      	ldr	r2, [sp, #20]
 8014764:	641a      	str	r2, [r3, #64]	; 0x40
 8014766:	9b08      	ldr	r3, [sp, #32]
 8014768:	2b0e      	cmp	r3, #14
 801476a:	d900      	bls.n	801476e <_dtoa_r+0x2a6>
 801476c:	e0df      	b.n	801492e <_dtoa_r+0x466>
 801476e:	2c00      	cmp	r4, #0
 8014770:	d100      	bne.n	8014774 <_dtoa_r+0x2ac>
 8014772:	e0dc      	b.n	801492e <_dtoa_r+0x466>
 8014774:	9b02      	ldr	r3, [sp, #8]
 8014776:	2b00      	cmp	r3, #0
 8014778:	dd62      	ble.n	8014840 <_dtoa_r+0x378>
 801477a:	001a      	movs	r2, r3
 801477c:	210f      	movs	r1, #15
 801477e:	4b29      	ldr	r3, [pc, #164]	; (8014824 <_dtoa_r+0x35c>)
 8014780:	400a      	ands	r2, r1
 8014782:	00d2      	lsls	r2, r2, #3
 8014784:	189b      	adds	r3, r3, r2
 8014786:	681d      	ldr	r5, [r3, #0]
 8014788:	685e      	ldr	r6, [r3, #4]
 801478a:	9b02      	ldr	r3, [sp, #8]
 801478c:	2702      	movs	r7, #2
 801478e:	111c      	asrs	r4, r3, #4
 8014790:	05db      	lsls	r3, r3, #23
 8014792:	d50a      	bpl.n	80147aa <_dtoa_r+0x2e2>
 8014794:	4b29      	ldr	r3, [pc, #164]	; (801483c <_dtoa_r+0x374>)
 8014796:	400c      	ands	r4, r1
 8014798:	6a1a      	ldr	r2, [r3, #32]
 801479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801479c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801479e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80147a0:	f7ec fc70 	bl	8001084 <__aeabi_ddiv>
 80147a4:	900a      	str	r0, [sp, #40]	; 0x28
 80147a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80147a8:	3701      	adds	r7, #1
 80147aa:	4b24      	ldr	r3, [pc, #144]	; (801483c <_dtoa_r+0x374>)
 80147ac:	9306      	str	r3, [sp, #24]
 80147ae:	2c00      	cmp	r4, #0
 80147b0:	d108      	bne.n	80147c4 <_dtoa_r+0x2fc>
 80147b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147b6:	002a      	movs	r2, r5
 80147b8:	0033      	movs	r3, r6
 80147ba:	f7ec fc63 	bl	8001084 <__aeabi_ddiv>
 80147be:	900a      	str	r0, [sp, #40]	; 0x28
 80147c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80147c2:	e058      	b.n	8014876 <_dtoa_r+0x3ae>
 80147c4:	2301      	movs	r3, #1
 80147c6:	421c      	tst	r4, r3
 80147c8:	d009      	beq.n	80147de <_dtoa_r+0x316>
 80147ca:	18ff      	adds	r7, r7, r3
 80147cc:	9b06      	ldr	r3, [sp, #24]
 80147ce:	0028      	movs	r0, r5
 80147d0:	681a      	ldr	r2, [r3, #0]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	0031      	movs	r1, r6
 80147d6:	f7ed f85b 	bl	8001890 <__aeabi_dmul>
 80147da:	0005      	movs	r5, r0
 80147dc:	000e      	movs	r6, r1
 80147de:	9b06      	ldr	r3, [sp, #24]
 80147e0:	1064      	asrs	r4, r4, #1
 80147e2:	3308      	adds	r3, #8
 80147e4:	e7e2      	b.n	80147ac <_dtoa_r+0x2e4>
 80147e6:	46c0      	nop			; (mov r8, r8)
 80147e8:	7ff00000 	.word	0x7ff00000
 80147ec:	0000270f 	.word	0x0000270f
 80147f0:	0801a97c 	.word	0x0801a97c
 80147f4:	0801a97f 	.word	0x0801a97f
 80147f8:	0801a95a 	.word	0x0801a95a
 80147fc:	0801a95b 	.word	0x0801a95b
 8014800:	3ff00000 	.word	0x3ff00000
 8014804:	fffffc01 	.word	0xfffffc01
 8014808:	3ff80000 	.word	0x3ff80000
 801480c:	636f4361 	.word	0x636f4361
 8014810:	3fd287a7 	.word	0x3fd287a7
 8014814:	8b60c8b3 	.word	0x8b60c8b3
 8014818:	3fc68a28 	.word	0x3fc68a28
 801481c:	509f79fb 	.word	0x509f79fb
 8014820:	3fd34413 	.word	0x3fd34413
 8014824:	0801ab00 	.word	0x0801ab00
 8014828:	00000432 	.word	0x00000432
 801482c:	00000412 	.word	0x00000412
 8014830:	fe100000 	.word	0xfe100000
 8014834:	0801a989 	.word	0x0801a989
 8014838:	0801a99a 	.word	0x0801a99a
 801483c:	0801aad8 	.word	0x0801aad8
 8014840:	9b02      	ldr	r3, [sp, #8]
 8014842:	2702      	movs	r7, #2
 8014844:	2b00      	cmp	r3, #0
 8014846:	d016      	beq.n	8014876 <_dtoa_r+0x3ae>
 8014848:	9810      	ldr	r0, [sp, #64]	; 0x40
 801484a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801484c:	425c      	negs	r4, r3
 801484e:	230f      	movs	r3, #15
 8014850:	4ad4      	ldr	r2, [pc, #848]	; (8014ba4 <_dtoa_r+0x6dc>)
 8014852:	4023      	ands	r3, r4
 8014854:	00db      	lsls	r3, r3, #3
 8014856:	18d3      	adds	r3, r2, r3
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	f7ed f818 	bl	8001890 <__aeabi_dmul>
 8014860:	2601      	movs	r6, #1
 8014862:	2300      	movs	r3, #0
 8014864:	900a      	str	r0, [sp, #40]	; 0x28
 8014866:	910b      	str	r1, [sp, #44]	; 0x2c
 8014868:	4dcf      	ldr	r5, [pc, #828]	; (8014ba8 <_dtoa_r+0x6e0>)
 801486a:	1124      	asrs	r4, r4, #4
 801486c:	2c00      	cmp	r4, #0
 801486e:	d000      	beq.n	8014872 <_dtoa_r+0x3aa>
 8014870:	e08d      	b.n	801498e <_dtoa_r+0x4c6>
 8014872:	2b00      	cmp	r3, #0
 8014874:	d1a3      	bne.n	80147be <_dtoa_r+0x2f6>
 8014876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014878:	2b00      	cmp	r3, #0
 801487a:	d100      	bne.n	801487e <_dtoa_r+0x3b6>
 801487c:	e092      	b.n	80149a4 <_dtoa_r+0x4dc>
 801487e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014880:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014882:	2200      	movs	r2, #0
 8014884:	0020      	movs	r0, r4
 8014886:	0029      	movs	r1, r5
 8014888:	4bc8      	ldr	r3, [pc, #800]	; (8014bac <_dtoa_r+0x6e4>)
 801488a:	f7eb fded 	bl	8000468 <__aeabi_dcmplt>
 801488e:	2800      	cmp	r0, #0
 8014890:	d100      	bne.n	8014894 <_dtoa_r+0x3cc>
 8014892:	e087      	b.n	80149a4 <_dtoa_r+0x4dc>
 8014894:	9b08      	ldr	r3, [sp, #32]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d100      	bne.n	801489c <_dtoa_r+0x3d4>
 801489a:	e083      	b.n	80149a4 <_dtoa_r+0x4dc>
 801489c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801489e:	2b00      	cmp	r3, #0
 80148a0:	dd41      	ble.n	8014926 <_dtoa_r+0x45e>
 80148a2:	9b02      	ldr	r3, [sp, #8]
 80148a4:	2200      	movs	r2, #0
 80148a6:	3b01      	subs	r3, #1
 80148a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80148aa:	0020      	movs	r0, r4
 80148ac:	0029      	movs	r1, r5
 80148ae:	4bc0      	ldr	r3, [pc, #768]	; (8014bb0 <_dtoa_r+0x6e8>)
 80148b0:	f7ec ffee 	bl	8001890 <__aeabi_dmul>
 80148b4:	900a      	str	r0, [sp, #40]	; 0x28
 80148b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80148b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80148ba:	3701      	adds	r7, #1
 80148bc:	0038      	movs	r0, r7
 80148be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80148c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80148c2:	f7ed fe37 	bl	8002534 <__aeabi_i2d>
 80148c6:	0022      	movs	r2, r4
 80148c8:	002b      	movs	r3, r5
 80148ca:	f7ec ffe1 	bl	8001890 <__aeabi_dmul>
 80148ce:	2200      	movs	r2, #0
 80148d0:	4bb8      	ldr	r3, [pc, #736]	; (8014bb4 <_dtoa_r+0x6ec>)
 80148d2:	f7ec f86d 	bl	80009b0 <__aeabi_dadd>
 80148d6:	900a      	str	r0, [sp, #40]	; 0x28
 80148d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80148da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148de:	9206      	str	r2, [sp, #24]
 80148e0:	9307      	str	r3, [sp, #28]
 80148e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148e4:	4ab4      	ldr	r2, [pc, #720]	; (8014bb8 <_dtoa_r+0x6f0>)
 80148e6:	189f      	adds	r7, r3, r2
 80148e8:	9707      	str	r7, [sp, #28]
 80148ea:	2e00      	cmp	r6, #0
 80148ec:	d15e      	bne.n	80149ac <_dtoa_r+0x4e4>
 80148ee:	2200      	movs	r2, #0
 80148f0:	0020      	movs	r0, r4
 80148f2:	0029      	movs	r1, r5
 80148f4:	4bb1      	ldr	r3, [pc, #708]	; (8014bbc <_dtoa_r+0x6f4>)
 80148f6:	f7ed fa37 	bl	8001d68 <__aeabi_dsub>
 80148fa:	003b      	movs	r3, r7
 80148fc:	9a06      	ldr	r2, [sp, #24]
 80148fe:	0004      	movs	r4, r0
 8014900:	000d      	movs	r5, r1
 8014902:	f7eb fdc5 	bl	8000490 <__aeabi_dcmpgt>
 8014906:	2800      	cmp	r0, #0
 8014908:	d000      	beq.n	801490c <_dtoa_r+0x444>
 801490a:	e2aa      	b.n	8014e62 <_dtoa_r+0x99a>
 801490c:	48ac      	ldr	r0, [pc, #688]	; (8014bc0 <_dtoa_r+0x6f8>)
 801490e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014910:	4684      	mov	ip, r0
 8014912:	4461      	add	r1, ip
 8014914:	000b      	movs	r3, r1
 8014916:	0020      	movs	r0, r4
 8014918:	0029      	movs	r1, r5
 801491a:	9a06      	ldr	r2, [sp, #24]
 801491c:	f7eb fda4 	bl	8000468 <__aeabi_dcmplt>
 8014920:	2800      	cmp	r0, #0
 8014922:	d000      	beq.n	8014926 <_dtoa_r+0x45e>
 8014924:	e29b      	b.n	8014e5e <_dtoa_r+0x996>
 8014926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014928:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801492a:	930a      	str	r3, [sp, #40]	; 0x28
 801492c:	940b      	str	r4, [sp, #44]	; 0x2c
 801492e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014930:	2b00      	cmp	r3, #0
 8014932:	da00      	bge.n	8014936 <_dtoa_r+0x46e>
 8014934:	e16a      	b.n	8014c0c <_dtoa_r+0x744>
 8014936:	9a02      	ldr	r2, [sp, #8]
 8014938:	2a0e      	cmp	r2, #14
 801493a:	dd00      	ble.n	801493e <_dtoa_r+0x476>
 801493c:	e166      	b.n	8014c0c <_dtoa_r+0x744>
 801493e:	4b99      	ldr	r3, [pc, #612]	; (8014ba4 <_dtoa_r+0x6dc>)
 8014940:	00d2      	lsls	r2, r2, #3
 8014942:	189b      	adds	r3, r3, r2
 8014944:	681e      	ldr	r6, [r3, #0]
 8014946:	685f      	ldr	r7, [r3, #4]
 8014948:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801494a:	2b00      	cmp	r3, #0
 801494c:	db00      	blt.n	8014950 <_dtoa_r+0x488>
 801494e:	e0d7      	b.n	8014b00 <_dtoa_r+0x638>
 8014950:	9b08      	ldr	r3, [sp, #32]
 8014952:	2b00      	cmp	r3, #0
 8014954:	dd00      	ble.n	8014958 <_dtoa_r+0x490>
 8014956:	e0d3      	b.n	8014b00 <_dtoa_r+0x638>
 8014958:	d000      	beq.n	801495c <_dtoa_r+0x494>
 801495a:	e27f      	b.n	8014e5c <_dtoa_r+0x994>
 801495c:	2200      	movs	r2, #0
 801495e:	0030      	movs	r0, r6
 8014960:	0039      	movs	r1, r7
 8014962:	4b96      	ldr	r3, [pc, #600]	; (8014bbc <_dtoa_r+0x6f4>)
 8014964:	f7ec ff94 	bl	8001890 <__aeabi_dmul>
 8014968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801496a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801496c:	f7eb fd9a 	bl	80004a4 <__aeabi_dcmpge>
 8014970:	9e08      	ldr	r6, [sp, #32]
 8014972:	0037      	movs	r7, r6
 8014974:	2800      	cmp	r0, #0
 8014976:	d000      	beq.n	801497a <_dtoa_r+0x4b2>
 8014978:	e256      	b.n	8014e28 <_dtoa_r+0x960>
 801497a:	9b05      	ldr	r3, [sp, #20]
 801497c:	9a05      	ldr	r2, [sp, #20]
 801497e:	3301      	adds	r3, #1
 8014980:	9306      	str	r3, [sp, #24]
 8014982:	2331      	movs	r3, #49	; 0x31
 8014984:	7013      	strb	r3, [r2, #0]
 8014986:	9b02      	ldr	r3, [sp, #8]
 8014988:	3301      	adds	r3, #1
 801498a:	9302      	str	r3, [sp, #8]
 801498c:	e251      	b.n	8014e32 <_dtoa_r+0x96a>
 801498e:	4234      	tst	r4, r6
 8014990:	d005      	beq.n	801499e <_dtoa_r+0x4d6>
 8014992:	682a      	ldr	r2, [r5, #0]
 8014994:	686b      	ldr	r3, [r5, #4]
 8014996:	f7ec ff7b 	bl	8001890 <__aeabi_dmul>
 801499a:	0033      	movs	r3, r6
 801499c:	3701      	adds	r7, #1
 801499e:	1064      	asrs	r4, r4, #1
 80149a0:	3508      	adds	r5, #8
 80149a2:	e763      	b.n	801486c <_dtoa_r+0x3a4>
 80149a4:	9b02      	ldr	r3, [sp, #8]
 80149a6:	9e08      	ldr	r6, [sp, #32]
 80149a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80149aa:	e787      	b.n	80148bc <_dtoa_r+0x3f4>
 80149ac:	4b7d      	ldr	r3, [pc, #500]	; (8014ba4 <_dtoa_r+0x6dc>)
 80149ae:	1e72      	subs	r2, r6, #1
 80149b0:	00d2      	lsls	r2, r2, #3
 80149b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80149b4:	189b      	adds	r3, r3, r2
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	2900      	cmp	r1, #0
 80149bc:	d04e      	beq.n	8014a5c <_dtoa_r+0x594>
 80149be:	2000      	movs	r0, #0
 80149c0:	4980      	ldr	r1, [pc, #512]	; (8014bc4 <_dtoa_r+0x6fc>)
 80149c2:	f7ec fb5f 	bl	8001084 <__aeabi_ddiv>
 80149c6:	9a06      	ldr	r2, [sp, #24]
 80149c8:	9b07      	ldr	r3, [sp, #28]
 80149ca:	f7ed f9cd 	bl	8001d68 <__aeabi_dsub>
 80149ce:	9b05      	ldr	r3, [sp, #20]
 80149d0:	900a      	str	r0, [sp, #40]	; 0x28
 80149d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80149d4:	9315      	str	r3, [sp, #84]	; 0x54
 80149d6:	18f3      	adds	r3, r6, r3
 80149d8:	9319      	str	r3, [sp, #100]	; 0x64
 80149da:	0020      	movs	r0, r4
 80149dc:	0029      	movs	r1, r5
 80149de:	f7ed fd73 	bl	80024c8 <__aeabi_d2iz>
 80149e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80149e4:	f7ed fda6 	bl	8002534 <__aeabi_i2d>
 80149e8:	0002      	movs	r2, r0
 80149ea:	000b      	movs	r3, r1
 80149ec:	0020      	movs	r0, r4
 80149ee:	0029      	movs	r1, r5
 80149f0:	f7ed f9ba 	bl	8001d68 <__aeabi_dsub>
 80149f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80149f8:	3301      	adds	r3, #1
 80149fa:	9306      	str	r3, [sp, #24]
 80149fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149fe:	3430      	adds	r4, #48	; 0x30
 8014a00:	701c      	strb	r4, [r3, #0]
 8014a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a06:	0006      	movs	r6, r0
 8014a08:	000f      	movs	r7, r1
 8014a0a:	f7eb fd2d 	bl	8000468 <__aeabi_dcmplt>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d16c      	bne.n	8014aec <_dtoa_r+0x624>
 8014a12:	0032      	movs	r2, r6
 8014a14:	003b      	movs	r3, r7
 8014a16:	2000      	movs	r0, #0
 8014a18:	4964      	ldr	r1, [pc, #400]	; (8014bac <_dtoa_r+0x6e4>)
 8014a1a:	f7ed f9a5 	bl	8001d68 <__aeabi_dsub>
 8014a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a22:	f7eb fd21 	bl	8000468 <__aeabi_dcmplt>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d000      	beq.n	8014a2c <_dtoa_r+0x564>
 8014a2a:	e0cf      	b.n	8014bcc <_dtoa_r+0x704>
 8014a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a2e:	9a06      	ldr	r2, [sp, #24]
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d100      	bne.n	8014a36 <_dtoa_r+0x56e>
 8014a34:	e777      	b.n	8014926 <_dtoa_r+0x45e>
 8014a36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	4b5c      	ldr	r3, [pc, #368]	; (8014bb0 <_dtoa_r+0x6e8>)
 8014a3e:	f7ec ff27 	bl	8001890 <__aeabi_dmul>
 8014a42:	4b5b      	ldr	r3, [pc, #364]	; (8014bb0 <_dtoa_r+0x6e8>)
 8014a44:	900a      	str	r0, [sp, #40]	; 0x28
 8014a46:	910b      	str	r1, [sp, #44]	; 0x2c
 8014a48:	2200      	movs	r2, #0
 8014a4a:	0030      	movs	r0, r6
 8014a4c:	0039      	movs	r1, r7
 8014a4e:	f7ec ff1f 	bl	8001890 <__aeabi_dmul>
 8014a52:	9b06      	ldr	r3, [sp, #24]
 8014a54:	0004      	movs	r4, r0
 8014a56:	000d      	movs	r5, r1
 8014a58:	9315      	str	r3, [sp, #84]	; 0x54
 8014a5a:	e7be      	b.n	80149da <_dtoa_r+0x512>
 8014a5c:	9806      	ldr	r0, [sp, #24]
 8014a5e:	9907      	ldr	r1, [sp, #28]
 8014a60:	f7ec ff16 	bl	8001890 <__aeabi_dmul>
 8014a64:	9f05      	ldr	r7, [sp, #20]
 8014a66:	900a      	str	r0, [sp, #40]	; 0x28
 8014a68:	910b      	str	r1, [sp, #44]	; 0x2c
 8014a6a:	19bb      	adds	r3, r7, r6
 8014a6c:	9315      	str	r3, [sp, #84]	; 0x54
 8014a6e:	0029      	movs	r1, r5
 8014a70:	0020      	movs	r0, r4
 8014a72:	f7ed fd29 	bl	80024c8 <__aeabi_d2iz>
 8014a76:	9006      	str	r0, [sp, #24]
 8014a78:	f7ed fd5c 	bl	8002534 <__aeabi_i2d>
 8014a7c:	000b      	movs	r3, r1
 8014a7e:	0002      	movs	r2, r0
 8014a80:	0029      	movs	r1, r5
 8014a82:	0020      	movs	r0, r4
 8014a84:	f7ed f970 	bl	8001d68 <__aeabi_dsub>
 8014a88:	9b06      	ldr	r3, [sp, #24]
 8014a8a:	0004      	movs	r4, r0
 8014a8c:	3330      	adds	r3, #48	; 0x30
 8014a8e:	703b      	strb	r3, [r7, #0]
 8014a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a92:	3701      	adds	r7, #1
 8014a94:	000d      	movs	r5, r1
 8014a96:	429f      	cmp	r7, r3
 8014a98:	d12b      	bne.n	8014af2 <_dtoa_r+0x62a>
 8014a9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a9e:	9b05      	ldr	r3, [sp, #20]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	199b      	adds	r3, r3, r6
 8014aa4:	9306      	str	r3, [sp, #24]
 8014aa6:	4b47      	ldr	r3, [pc, #284]	; (8014bc4 <_dtoa_r+0x6fc>)
 8014aa8:	f7eb ff82 	bl	80009b0 <__aeabi_dadd>
 8014aac:	0002      	movs	r2, r0
 8014aae:	000b      	movs	r3, r1
 8014ab0:	0020      	movs	r0, r4
 8014ab2:	0029      	movs	r1, r5
 8014ab4:	f7eb fcec 	bl	8000490 <__aeabi_dcmpgt>
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d000      	beq.n	8014abe <_dtoa_r+0x5f6>
 8014abc:	e086      	b.n	8014bcc <_dtoa_r+0x704>
 8014abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	493f      	ldr	r1, [pc, #252]	; (8014bc4 <_dtoa_r+0x6fc>)
 8014ac6:	f7ed f94f 	bl	8001d68 <__aeabi_dsub>
 8014aca:	0002      	movs	r2, r0
 8014acc:	000b      	movs	r3, r1
 8014ace:	0020      	movs	r0, r4
 8014ad0:	0029      	movs	r1, r5
 8014ad2:	f7eb fcc9 	bl	8000468 <__aeabi_dcmplt>
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	d100      	bne.n	8014adc <_dtoa_r+0x614>
 8014ada:	e724      	b.n	8014926 <_dtoa_r+0x45e>
 8014adc:	9b06      	ldr	r3, [sp, #24]
 8014ade:	001a      	movs	r2, r3
 8014ae0:	3a01      	subs	r2, #1
 8014ae2:	9206      	str	r2, [sp, #24]
 8014ae4:	7812      	ldrb	r2, [r2, #0]
 8014ae6:	2a30      	cmp	r2, #48	; 0x30
 8014ae8:	d0f8      	beq.n	8014adc <_dtoa_r+0x614>
 8014aea:	9306      	str	r3, [sp, #24]
 8014aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aee:	9302      	str	r3, [sp, #8]
 8014af0:	e046      	b.n	8014b80 <_dtoa_r+0x6b8>
 8014af2:	2200      	movs	r2, #0
 8014af4:	4b2e      	ldr	r3, [pc, #184]	; (8014bb0 <_dtoa_r+0x6e8>)
 8014af6:	f7ec fecb 	bl	8001890 <__aeabi_dmul>
 8014afa:	0004      	movs	r4, r0
 8014afc:	000d      	movs	r5, r1
 8014afe:	e7b6      	b.n	8014a6e <_dtoa_r+0x5a6>
 8014b00:	9b05      	ldr	r3, [sp, #20]
 8014b02:	9a05      	ldr	r2, [sp, #20]
 8014b04:	9309      	str	r3, [sp, #36]	; 0x24
 8014b06:	9b08      	ldr	r3, [sp, #32]
 8014b08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014b0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014b0c:	3b01      	subs	r3, #1
 8014b0e:	189b      	adds	r3, r3, r2
 8014b10:	930a      	str	r3, [sp, #40]	; 0x28
 8014b12:	0032      	movs	r2, r6
 8014b14:	003b      	movs	r3, r7
 8014b16:	0020      	movs	r0, r4
 8014b18:	0029      	movs	r1, r5
 8014b1a:	f7ec fab3 	bl	8001084 <__aeabi_ddiv>
 8014b1e:	f7ed fcd3 	bl	80024c8 <__aeabi_d2iz>
 8014b22:	9008      	str	r0, [sp, #32]
 8014b24:	f7ed fd06 	bl	8002534 <__aeabi_i2d>
 8014b28:	0032      	movs	r2, r6
 8014b2a:	003b      	movs	r3, r7
 8014b2c:	f7ec feb0 	bl	8001890 <__aeabi_dmul>
 8014b30:	0002      	movs	r2, r0
 8014b32:	000b      	movs	r3, r1
 8014b34:	0020      	movs	r0, r4
 8014b36:	0029      	movs	r1, r5
 8014b38:	f7ed f916 	bl	8001d68 <__aeabi_dsub>
 8014b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b3e:	001a      	movs	r2, r3
 8014b40:	3201      	adds	r2, #1
 8014b42:	9209      	str	r2, [sp, #36]	; 0x24
 8014b44:	9206      	str	r2, [sp, #24]
 8014b46:	9a08      	ldr	r2, [sp, #32]
 8014b48:	3230      	adds	r2, #48	; 0x30
 8014b4a:	701a      	strb	r2, [r3, #0]
 8014b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d14f      	bne.n	8014bf2 <_dtoa_r+0x72a>
 8014b52:	0002      	movs	r2, r0
 8014b54:	000b      	movs	r3, r1
 8014b56:	f7eb ff2b 	bl	80009b0 <__aeabi_dadd>
 8014b5a:	0032      	movs	r2, r6
 8014b5c:	003b      	movs	r3, r7
 8014b5e:	0004      	movs	r4, r0
 8014b60:	000d      	movs	r5, r1
 8014b62:	f7eb fc95 	bl	8000490 <__aeabi_dcmpgt>
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d12e      	bne.n	8014bc8 <_dtoa_r+0x700>
 8014b6a:	0032      	movs	r2, r6
 8014b6c:	003b      	movs	r3, r7
 8014b6e:	0020      	movs	r0, r4
 8014b70:	0029      	movs	r1, r5
 8014b72:	f7eb fc73 	bl	800045c <__aeabi_dcmpeq>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d002      	beq.n	8014b80 <_dtoa_r+0x6b8>
 8014b7a:	9b08      	ldr	r3, [sp, #32]
 8014b7c:	07db      	lsls	r3, r3, #31
 8014b7e:	d423      	bmi.n	8014bc8 <_dtoa_r+0x700>
 8014b80:	9803      	ldr	r0, [sp, #12]
 8014b82:	9904      	ldr	r1, [sp, #16]
 8014b84:	f000 ff80 	bl	8015a88 <_Bfree>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	9a06      	ldr	r2, [sp, #24]
 8014b8c:	9802      	ldr	r0, [sp, #8]
 8014b8e:	7013      	strb	r3, [r2, #0]
 8014b90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b92:	3001      	adds	r0, #1
 8014b94:	6018      	str	r0, [r3, #0]
 8014b96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d100      	bne.n	8014b9e <_dtoa_r+0x6d6>
 8014b9c:	e4c8      	b.n	8014530 <_dtoa_r+0x68>
 8014b9e:	601a      	str	r2, [r3, #0]
 8014ba0:	e4c6      	b.n	8014530 <_dtoa_r+0x68>
 8014ba2:	46c0      	nop			; (mov r8, r8)
 8014ba4:	0801ab00 	.word	0x0801ab00
 8014ba8:	0801aad8 	.word	0x0801aad8
 8014bac:	3ff00000 	.word	0x3ff00000
 8014bb0:	40240000 	.word	0x40240000
 8014bb4:	401c0000 	.word	0x401c0000
 8014bb8:	fcc00000 	.word	0xfcc00000
 8014bbc:	40140000 	.word	0x40140000
 8014bc0:	7cc00000 	.word	0x7cc00000
 8014bc4:	3fe00000 	.word	0x3fe00000
 8014bc8:	9b02      	ldr	r3, [sp, #8]
 8014bca:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bcc:	9b06      	ldr	r3, [sp, #24]
 8014bce:	9306      	str	r3, [sp, #24]
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	781a      	ldrb	r2, [r3, #0]
 8014bd4:	2a39      	cmp	r2, #57	; 0x39
 8014bd6:	d108      	bne.n	8014bea <_dtoa_r+0x722>
 8014bd8:	9a05      	ldr	r2, [sp, #20]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d1f7      	bne.n	8014bce <_dtoa_r+0x706>
 8014bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014be0:	9905      	ldr	r1, [sp, #20]
 8014be2:	3201      	adds	r2, #1
 8014be4:	920f      	str	r2, [sp, #60]	; 0x3c
 8014be6:	2230      	movs	r2, #48	; 0x30
 8014be8:	700a      	strb	r2, [r1, #0]
 8014bea:	781a      	ldrb	r2, [r3, #0]
 8014bec:	3201      	adds	r2, #1
 8014bee:	701a      	strb	r2, [r3, #0]
 8014bf0:	e77c      	b.n	8014aec <_dtoa_r+0x624>
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	4baa      	ldr	r3, [pc, #680]	; (8014ea0 <_dtoa_r+0x9d8>)
 8014bf6:	f7ec fe4b 	bl	8001890 <__aeabi_dmul>
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	0004      	movs	r4, r0
 8014c00:	000d      	movs	r5, r1
 8014c02:	f7eb fc2b 	bl	800045c <__aeabi_dcmpeq>
 8014c06:	2800      	cmp	r0, #0
 8014c08:	d083      	beq.n	8014b12 <_dtoa_r+0x64a>
 8014c0a:	e7b9      	b.n	8014b80 <_dtoa_r+0x6b8>
 8014c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c0e:	2a00      	cmp	r2, #0
 8014c10:	d100      	bne.n	8014c14 <_dtoa_r+0x74c>
 8014c12:	e08a      	b.n	8014d2a <_dtoa_r+0x862>
 8014c14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014c16:	2a01      	cmp	r2, #1
 8014c18:	dc6e      	bgt.n	8014cf8 <_dtoa_r+0x830>
 8014c1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014c1c:	2a00      	cmp	r2, #0
 8014c1e:	d067      	beq.n	8014cf0 <_dtoa_r+0x828>
 8014c20:	4aa0      	ldr	r2, [pc, #640]	; (8014ea4 <_dtoa_r+0x9dc>)
 8014c22:	189b      	adds	r3, r3, r2
 8014c24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014c26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c2a:	2101      	movs	r1, #1
 8014c2c:	18d2      	adds	r2, r2, r3
 8014c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8014c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c32:	9803      	ldr	r0, [sp, #12]
 8014c34:	18d3      	adds	r3, r2, r3
 8014c36:	930d      	str	r3, [sp, #52]	; 0x34
 8014c38:	f001 f808 	bl	8015c4c <__i2b>
 8014c3c:	0007      	movs	r7, r0
 8014c3e:	2c00      	cmp	r4, #0
 8014c40:	dd0e      	ble.n	8014c60 <_dtoa_r+0x798>
 8014c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	dd0b      	ble.n	8014c60 <_dtoa_r+0x798>
 8014c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c4a:	0023      	movs	r3, r4
 8014c4c:	4294      	cmp	r4, r2
 8014c4e:	dd00      	ble.n	8014c52 <_dtoa_r+0x78a>
 8014c50:	0013      	movs	r3, r2
 8014c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c54:	1ae4      	subs	r4, r4, r3
 8014c56:	1ad2      	subs	r2, r2, r3
 8014c58:	9209      	str	r2, [sp, #36]	; 0x24
 8014c5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c5c:	1ad3      	subs	r3, r2, r3
 8014c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8014c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d01e      	beq.n	8014ca4 <_dtoa_r+0x7dc>
 8014c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d062      	beq.n	8014d32 <_dtoa_r+0x86a>
 8014c6c:	2d00      	cmp	r5, #0
 8014c6e:	dd10      	ble.n	8014c92 <_dtoa_r+0x7ca>
 8014c70:	0039      	movs	r1, r7
 8014c72:	002a      	movs	r2, r5
 8014c74:	9803      	ldr	r0, [sp, #12]
 8014c76:	f001 f8af 	bl	8015dd8 <__pow5mult>
 8014c7a:	9a04      	ldr	r2, [sp, #16]
 8014c7c:	0001      	movs	r1, r0
 8014c7e:	0007      	movs	r7, r0
 8014c80:	9803      	ldr	r0, [sp, #12]
 8014c82:	f000 fff9 	bl	8015c78 <__multiply>
 8014c86:	0006      	movs	r6, r0
 8014c88:	9904      	ldr	r1, [sp, #16]
 8014c8a:	9803      	ldr	r0, [sp, #12]
 8014c8c:	f000 fefc 	bl	8015a88 <_Bfree>
 8014c90:	9604      	str	r6, [sp, #16]
 8014c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c94:	1b5a      	subs	r2, r3, r5
 8014c96:	42ab      	cmp	r3, r5
 8014c98:	d004      	beq.n	8014ca4 <_dtoa_r+0x7dc>
 8014c9a:	9904      	ldr	r1, [sp, #16]
 8014c9c:	9803      	ldr	r0, [sp, #12]
 8014c9e:	f001 f89b 	bl	8015dd8 <__pow5mult>
 8014ca2:	9004      	str	r0, [sp, #16]
 8014ca4:	2101      	movs	r1, #1
 8014ca6:	9803      	ldr	r0, [sp, #12]
 8014ca8:	f000 ffd0 	bl	8015c4c <__i2b>
 8014cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cae:	0006      	movs	r6, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	dd40      	ble.n	8014d36 <_dtoa_r+0x86e>
 8014cb4:	001a      	movs	r2, r3
 8014cb6:	0001      	movs	r1, r0
 8014cb8:	9803      	ldr	r0, [sp, #12]
 8014cba:	f001 f88d 	bl	8015dd8 <__pow5mult>
 8014cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014cc0:	0006      	movs	r6, r0
 8014cc2:	2500      	movs	r5, #0
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	dc3e      	bgt.n	8014d46 <_dtoa_r+0x87e>
 8014cc8:	2500      	movs	r5, #0
 8014cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ccc:	42ab      	cmp	r3, r5
 8014cce:	d136      	bne.n	8014d3e <_dtoa_r+0x876>
 8014cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cd2:	031b      	lsls	r3, r3, #12
 8014cd4:	42ab      	cmp	r3, r5
 8014cd6:	d132      	bne.n	8014d3e <_dtoa_r+0x876>
 8014cd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014cda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014cdc:	4213      	tst	r3, r2
 8014cde:	d02e      	beq.n	8014d3e <_dtoa_r+0x876>
 8014ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce2:	3501      	adds	r5, #1
 8014ce4:	3301      	adds	r3, #1
 8014ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8014ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cea:	3301      	adds	r3, #1
 8014cec:	930d      	str	r3, [sp, #52]	; 0x34
 8014cee:	e026      	b.n	8014d3e <_dtoa_r+0x876>
 8014cf0:	2336      	movs	r3, #54	; 0x36
 8014cf2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014cf4:	1a9b      	subs	r3, r3, r2
 8014cf6:	e795      	b.n	8014c24 <_dtoa_r+0x75c>
 8014cf8:	9b08      	ldr	r3, [sp, #32]
 8014cfa:	1e5d      	subs	r5, r3, #1
 8014cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cfe:	42ab      	cmp	r3, r5
 8014d00:	db08      	blt.n	8014d14 <_dtoa_r+0x84c>
 8014d02:	1b5d      	subs	r5, r3, r5
 8014d04:	9b08      	ldr	r3, [sp, #32]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	da0c      	bge.n	8014d24 <_dtoa_r+0x85c>
 8014d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d0c:	9a08      	ldr	r2, [sp, #32]
 8014d0e:	1a9c      	subs	r4, r3, r2
 8014d10:	2300      	movs	r3, #0
 8014d12:	e789      	b.n	8014c28 <_dtoa_r+0x760>
 8014d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d18:	1aeb      	subs	r3, r5, r3
 8014d1a:	18d3      	adds	r3, r2, r3
 8014d1c:	950e      	str	r5, [sp, #56]	; 0x38
 8014d1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d20:	2500      	movs	r5, #0
 8014d22:	e7ef      	b.n	8014d04 <_dtoa_r+0x83c>
 8014d24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d26:	9b08      	ldr	r3, [sp, #32]
 8014d28:	e77e      	b.n	8014c28 <_dtoa_r+0x760>
 8014d2a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014d2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d2e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014d30:	e785      	b.n	8014c3e <_dtoa_r+0x776>
 8014d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d34:	e7b1      	b.n	8014c9a <_dtoa_r+0x7d2>
 8014d36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014d38:	2500      	movs	r5, #0
 8014d3a:	2b01      	cmp	r3, #1
 8014d3c:	ddc4      	ble.n	8014cc8 <_dtoa_r+0x800>
 8014d3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d40:	2001      	movs	r0, #1
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d008      	beq.n	8014d58 <_dtoa_r+0x890>
 8014d46:	6933      	ldr	r3, [r6, #16]
 8014d48:	3303      	adds	r3, #3
 8014d4a:	009b      	lsls	r3, r3, #2
 8014d4c:	18f3      	adds	r3, r6, r3
 8014d4e:	6858      	ldr	r0, [r3, #4]
 8014d50:	f000 ff34 	bl	8015bbc <__hi0bits>
 8014d54:	2320      	movs	r3, #32
 8014d56:	1a18      	subs	r0, r3, r0
 8014d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d5a:	221f      	movs	r2, #31
 8014d5c:	1818      	adds	r0, r3, r0
 8014d5e:	0003      	movs	r3, r0
 8014d60:	4013      	ands	r3, r2
 8014d62:	4210      	tst	r0, r2
 8014d64:	d046      	beq.n	8014df4 <_dtoa_r+0x92c>
 8014d66:	3201      	adds	r2, #1
 8014d68:	1ad2      	subs	r2, r2, r3
 8014d6a:	2a04      	cmp	r2, #4
 8014d6c:	dd3f      	ble.n	8014dee <_dtoa_r+0x926>
 8014d6e:	221c      	movs	r2, #28
 8014d70:	1ad3      	subs	r3, r2, r3
 8014d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d74:	18e4      	adds	r4, r4, r3
 8014d76:	18d2      	adds	r2, r2, r3
 8014d78:	9209      	str	r2, [sp, #36]	; 0x24
 8014d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d7c:	18d3      	adds	r3, r2, r3
 8014d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8014d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	dd05      	ble.n	8014d92 <_dtoa_r+0x8ca>
 8014d86:	001a      	movs	r2, r3
 8014d88:	9904      	ldr	r1, [sp, #16]
 8014d8a:	9803      	ldr	r0, [sp, #12]
 8014d8c:	f001 f866 	bl	8015e5c <__lshift>
 8014d90:	9004      	str	r0, [sp, #16]
 8014d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	dd05      	ble.n	8014da4 <_dtoa_r+0x8dc>
 8014d98:	0031      	movs	r1, r6
 8014d9a:	001a      	movs	r2, r3
 8014d9c:	9803      	ldr	r0, [sp, #12]
 8014d9e:	f001 f85d 	bl	8015e5c <__lshift>
 8014da2:	0006      	movs	r6, r0
 8014da4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d026      	beq.n	8014df8 <_dtoa_r+0x930>
 8014daa:	0031      	movs	r1, r6
 8014dac:	9804      	ldr	r0, [sp, #16]
 8014dae:	f001 f8c5 	bl	8015f3c <__mcmp>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	da20      	bge.n	8014df8 <_dtoa_r+0x930>
 8014db6:	9b02      	ldr	r3, [sp, #8]
 8014db8:	220a      	movs	r2, #10
 8014dba:	3b01      	subs	r3, #1
 8014dbc:	9302      	str	r3, [sp, #8]
 8014dbe:	9904      	ldr	r1, [sp, #16]
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	9803      	ldr	r0, [sp, #12]
 8014dc4:	f000 fe6a 	bl	8015a9c <__multadd>
 8014dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014dca:	9004      	str	r0, [sp, #16]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d100      	bne.n	8014dd2 <_dtoa_r+0x90a>
 8014dd0:	e154      	b.n	801507c <_dtoa_r+0xbb4>
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	0039      	movs	r1, r7
 8014dd6:	220a      	movs	r2, #10
 8014dd8:	9803      	ldr	r0, [sp, #12]
 8014dda:	f000 fe5f 	bl	8015a9c <__multadd>
 8014dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014de0:	0007      	movs	r7, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	dc47      	bgt.n	8014e76 <_dtoa_r+0x9ae>
 8014de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014de8:	2b02      	cmp	r3, #2
 8014dea:	dc0d      	bgt.n	8014e08 <_dtoa_r+0x940>
 8014dec:	e043      	b.n	8014e76 <_dtoa_r+0x9ae>
 8014dee:	2a04      	cmp	r2, #4
 8014df0:	d0c6      	beq.n	8014d80 <_dtoa_r+0x8b8>
 8014df2:	0013      	movs	r3, r2
 8014df4:	331c      	adds	r3, #28
 8014df6:	e7bc      	b.n	8014d72 <_dtoa_r+0x8aa>
 8014df8:	9b08      	ldr	r3, [sp, #32]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	dc35      	bgt.n	8014e6a <_dtoa_r+0x9a2>
 8014dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e00:	2b02      	cmp	r3, #2
 8014e02:	dd32      	ble.n	8014e6a <_dtoa_r+0x9a2>
 8014e04:	9b08      	ldr	r3, [sp, #32]
 8014e06:	930c      	str	r3, [sp, #48]	; 0x30
 8014e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d10c      	bne.n	8014e28 <_dtoa_r+0x960>
 8014e0e:	0031      	movs	r1, r6
 8014e10:	2205      	movs	r2, #5
 8014e12:	9803      	ldr	r0, [sp, #12]
 8014e14:	f000 fe42 	bl	8015a9c <__multadd>
 8014e18:	0006      	movs	r6, r0
 8014e1a:	0001      	movs	r1, r0
 8014e1c:	9804      	ldr	r0, [sp, #16]
 8014e1e:	f001 f88d 	bl	8015f3c <__mcmp>
 8014e22:	2800      	cmp	r0, #0
 8014e24:	dd00      	ble.n	8014e28 <_dtoa_r+0x960>
 8014e26:	e5a8      	b.n	801497a <_dtoa_r+0x4b2>
 8014e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e2a:	43db      	mvns	r3, r3
 8014e2c:	9302      	str	r3, [sp, #8]
 8014e2e:	9b05      	ldr	r3, [sp, #20]
 8014e30:	9306      	str	r3, [sp, #24]
 8014e32:	2500      	movs	r5, #0
 8014e34:	0031      	movs	r1, r6
 8014e36:	9803      	ldr	r0, [sp, #12]
 8014e38:	f000 fe26 	bl	8015a88 <_Bfree>
 8014e3c:	2f00      	cmp	r7, #0
 8014e3e:	d100      	bne.n	8014e42 <_dtoa_r+0x97a>
 8014e40:	e69e      	b.n	8014b80 <_dtoa_r+0x6b8>
 8014e42:	2d00      	cmp	r5, #0
 8014e44:	d005      	beq.n	8014e52 <_dtoa_r+0x98a>
 8014e46:	42bd      	cmp	r5, r7
 8014e48:	d003      	beq.n	8014e52 <_dtoa_r+0x98a>
 8014e4a:	0029      	movs	r1, r5
 8014e4c:	9803      	ldr	r0, [sp, #12]
 8014e4e:	f000 fe1b 	bl	8015a88 <_Bfree>
 8014e52:	0039      	movs	r1, r7
 8014e54:	9803      	ldr	r0, [sp, #12]
 8014e56:	f000 fe17 	bl	8015a88 <_Bfree>
 8014e5a:	e691      	b.n	8014b80 <_dtoa_r+0x6b8>
 8014e5c:	2600      	movs	r6, #0
 8014e5e:	0037      	movs	r7, r6
 8014e60:	e7e2      	b.n	8014e28 <_dtoa_r+0x960>
 8014e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e64:	0037      	movs	r7, r6
 8014e66:	9302      	str	r3, [sp, #8]
 8014e68:	e587      	b.n	801497a <_dtoa_r+0x4b2>
 8014e6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d100      	bne.n	8014e72 <_dtoa_r+0x9aa>
 8014e70:	e0bc      	b.n	8014fec <_dtoa_r+0xb24>
 8014e72:	9b08      	ldr	r3, [sp, #32]
 8014e74:	930c      	str	r3, [sp, #48]	; 0x30
 8014e76:	2c00      	cmp	r4, #0
 8014e78:	dd05      	ble.n	8014e86 <_dtoa_r+0x9be>
 8014e7a:	0039      	movs	r1, r7
 8014e7c:	0022      	movs	r2, r4
 8014e7e:	9803      	ldr	r0, [sp, #12]
 8014e80:	f000 ffec 	bl	8015e5c <__lshift>
 8014e84:	0007      	movs	r7, r0
 8014e86:	0038      	movs	r0, r7
 8014e88:	2d00      	cmp	r5, #0
 8014e8a:	d01e      	beq.n	8014eca <_dtoa_r+0xa02>
 8014e8c:	6879      	ldr	r1, [r7, #4]
 8014e8e:	9803      	ldr	r0, [sp, #12]
 8014e90:	f000 fdd2 	bl	8015a38 <_Balloc>
 8014e94:	1e04      	subs	r4, r0, #0
 8014e96:	d10b      	bne.n	8014eb0 <_dtoa_r+0x9e8>
 8014e98:	0002      	movs	r2, r0
 8014e9a:	4b03      	ldr	r3, [pc, #12]	; (8014ea8 <_dtoa_r+0x9e0>)
 8014e9c:	4903      	ldr	r1, [pc, #12]	; (8014eac <_dtoa_r+0x9e4>)
 8014e9e:	e444      	b.n	801472a <_dtoa_r+0x262>
 8014ea0:	40240000 	.word	0x40240000
 8014ea4:	00000433 	.word	0x00000433
 8014ea8:	0801a989 	.word	0x0801a989
 8014eac:	000002ea 	.word	0x000002ea
 8014eb0:	0039      	movs	r1, r7
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	310c      	adds	r1, #12
 8014eb6:	1c9a      	adds	r2, r3, #2
 8014eb8:	0092      	lsls	r2, r2, #2
 8014eba:	300c      	adds	r0, #12
 8014ebc:	f7fc fe50 	bl	8011b60 <memcpy>
 8014ec0:	2201      	movs	r2, #1
 8014ec2:	0021      	movs	r1, r4
 8014ec4:	9803      	ldr	r0, [sp, #12]
 8014ec6:	f000 ffc9 	bl	8015e5c <__lshift>
 8014eca:	003d      	movs	r5, r7
 8014ecc:	0007      	movs	r7, r0
 8014ece:	9b05      	ldr	r3, [sp, #20]
 8014ed0:	9308      	str	r3, [sp, #32]
 8014ed2:	0031      	movs	r1, r6
 8014ed4:	9804      	ldr	r0, [sp, #16]
 8014ed6:	f7ff fa6b 	bl	80143b0 <quorem>
 8014eda:	0029      	movs	r1, r5
 8014edc:	0004      	movs	r4, r0
 8014ede:	900d      	str	r0, [sp, #52]	; 0x34
 8014ee0:	9804      	ldr	r0, [sp, #16]
 8014ee2:	f001 f82b 	bl	8015f3c <__mcmp>
 8014ee6:	003a      	movs	r2, r7
 8014ee8:	900e      	str	r0, [sp, #56]	; 0x38
 8014eea:	0031      	movs	r1, r6
 8014eec:	9803      	ldr	r0, [sp, #12]
 8014eee:	f001 f841 	bl	8015f74 <__mdiff>
 8014ef2:	68c3      	ldr	r3, [r0, #12]
 8014ef4:	3430      	adds	r4, #48	; 0x30
 8014ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ef8:	2301      	movs	r3, #1
 8014efa:	9309      	str	r3, [sp, #36]	; 0x24
 8014efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014efe:	9006      	str	r0, [sp, #24]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d104      	bne.n	8014f0e <_dtoa_r+0xa46>
 8014f04:	0001      	movs	r1, r0
 8014f06:	9804      	ldr	r0, [sp, #16]
 8014f08:	f001 f818 	bl	8015f3c <__mcmp>
 8014f0c:	9009      	str	r0, [sp, #36]	; 0x24
 8014f0e:	9803      	ldr	r0, [sp, #12]
 8014f10:	9906      	ldr	r1, [sp, #24]
 8014f12:	f000 fdb9 	bl	8015a88 <_Bfree>
 8014f16:	2301      	movs	r3, #1
 8014f18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f1c:	4018      	ands	r0, r3
 8014f1e:	9b08      	ldr	r3, [sp, #32]
 8014f20:	3301      	adds	r3, #1
 8014f22:	9306      	str	r3, [sp, #24]
 8014f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014f26:	4313      	orrs	r3, r2
 8014f28:	4303      	orrs	r3, r0
 8014f2a:	d109      	bne.n	8014f40 <_dtoa_r+0xa78>
 8014f2c:	2c39      	cmp	r4, #57	; 0x39
 8014f2e:	d021      	beq.n	8014f74 <_dtoa_r+0xaac>
 8014f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	dd01      	ble.n	8014f3a <_dtoa_r+0xa72>
 8014f36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014f38:	3431      	adds	r4, #49	; 0x31
 8014f3a:	9b08      	ldr	r3, [sp, #32]
 8014f3c:	701c      	strb	r4, [r3, #0]
 8014f3e:	e779      	b.n	8014e34 <_dtoa_r+0x96c>
 8014f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	db03      	blt.n	8014f4e <_dtoa_r+0xa86>
 8014f46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f48:	4313      	orrs	r3, r2
 8014f4a:	4303      	orrs	r3, r0
 8014f4c:	d11e      	bne.n	8014f8c <_dtoa_r+0xac4>
 8014f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	ddf2      	ble.n	8014f3a <_dtoa_r+0xa72>
 8014f54:	9904      	ldr	r1, [sp, #16]
 8014f56:	2201      	movs	r2, #1
 8014f58:	9803      	ldr	r0, [sp, #12]
 8014f5a:	f000 ff7f 	bl	8015e5c <__lshift>
 8014f5e:	0031      	movs	r1, r6
 8014f60:	9004      	str	r0, [sp, #16]
 8014f62:	f000 ffeb 	bl	8015f3c <__mcmp>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	dc02      	bgt.n	8014f70 <_dtoa_r+0xaa8>
 8014f6a:	d1e6      	bne.n	8014f3a <_dtoa_r+0xa72>
 8014f6c:	07e3      	lsls	r3, r4, #31
 8014f6e:	d5e4      	bpl.n	8014f3a <_dtoa_r+0xa72>
 8014f70:	2c39      	cmp	r4, #57	; 0x39
 8014f72:	d1e0      	bne.n	8014f36 <_dtoa_r+0xa6e>
 8014f74:	2339      	movs	r3, #57	; 0x39
 8014f76:	9a08      	ldr	r2, [sp, #32]
 8014f78:	7013      	strb	r3, [r2, #0]
 8014f7a:	9b06      	ldr	r3, [sp, #24]
 8014f7c:	9306      	str	r3, [sp, #24]
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	781a      	ldrb	r2, [r3, #0]
 8014f82:	2a39      	cmp	r2, #57	; 0x39
 8014f84:	d067      	beq.n	8015056 <_dtoa_r+0xb8e>
 8014f86:	3201      	adds	r2, #1
 8014f88:	701a      	strb	r2, [r3, #0]
 8014f8a:	e753      	b.n	8014e34 <_dtoa_r+0x96c>
 8014f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	dd03      	ble.n	8014f9a <_dtoa_r+0xad2>
 8014f92:	2c39      	cmp	r4, #57	; 0x39
 8014f94:	d0ee      	beq.n	8014f74 <_dtoa_r+0xaac>
 8014f96:	3401      	adds	r4, #1
 8014f98:	e7cf      	b.n	8014f3a <_dtoa_r+0xa72>
 8014f9a:	9b08      	ldr	r3, [sp, #32]
 8014f9c:	9a05      	ldr	r2, [sp, #20]
 8014f9e:	701c      	strb	r4, [r3, #0]
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	1a9b      	subs	r3, r3, r2
 8014fa4:	9a08      	ldr	r2, [sp, #32]
 8014fa6:	189b      	adds	r3, r3, r2
 8014fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d03e      	beq.n	801502c <_dtoa_r+0xb64>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	220a      	movs	r2, #10
 8014fb2:	9904      	ldr	r1, [sp, #16]
 8014fb4:	9803      	ldr	r0, [sp, #12]
 8014fb6:	f000 fd71 	bl	8015a9c <__multadd>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	9004      	str	r0, [sp, #16]
 8014fbe:	220a      	movs	r2, #10
 8014fc0:	0029      	movs	r1, r5
 8014fc2:	9803      	ldr	r0, [sp, #12]
 8014fc4:	42bd      	cmp	r5, r7
 8014fc6:	d106      	bne.n	8014fd6 <_dtoa_r+0xb0e>
 8014fc8:	f000 fd68 	bl	8015a9c <__multadd>
 8014fcc:	0005      	movs	r5, r0
 8014fce:	0007      	movs	r7, r0
 8014fd0:	9b06      	ldr	r3, [sp, #24]
 8014fd2:	9308      	str	r3, [sp, #32]
 8014fd4:	e77d      	b.n	8014ed2 <_dtoa_r+0xa0a>
 8014fd6:	f000 fd61 	bl	8015a9c <__multadd>
 8014fda:	0039      	movs	r1, r7
 8014fdc:	0005      	movs	r5, r0
 8014fde:	2300      	movs	r3, #0
 8014fe0:	220a      	movs	r2, #10
 8014fe2:	9803      	ldr	r0, [sp, #12]
 8014fe4:	f000 fd5a 	bl	8015a9c <__multadd>
 8014fe8:	0007      	movs	r7, r0
 8014fea:	e7f1      	b.n	8014fd0 <_dtoa_r+0xb08>
 8014fec:	9b08      	ldr	r3, [sp, #32]
 8014fee:	930c      	str	r3, [sp, #48]	; 0x30
 8014ff0:	2500      	movs	r5, #0
 8014ff2:	0031      	movs	r1, r6
 8014ff4:	9804      	ldr	r0, [sp, #16]
 8014ff6:	f7ff f9db 	bl	80143b0 <quorem>
 8014ffa:	9b05      	ldr	r3, [sp, #20]
 8014ffc:	3030      	adds	r0, #48	; 0x30
 8014ffe:	5558      	strb	r0, [r3, r5]
 8015000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015002:	3501      	adds	r5, #1
 8015004:	0004      	movs	r4, r0
 8015006:	42ab      	cmp	r3, r5
 8015008:	dd07      	ble.n	801501a <_dtoa_r+0xb52>
 801500a:	2300      	movs	r3, #0
 801500c:	220a      	movs	r2, #10
 801500e:	9904      	ldr	r1, [sp, #16]
 8015010:	9803      	ldr	r0, [sp, #12]
 8015012:	f000 fd43 	bl	8015a9c <__multadd>
 8015016:	9004      	str	r0, [sp, #16]
 8015018:	e7eb      	b.n	8014ff2 <_dtoa_r+0xb2a>
 801501a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801501c:	2001      	movs	r0, #1
 801501e:	2b00      	cmp	r3, #0
 8015020:	dd00      	ble.n	8015024 <_dtoa_r+0xb5c>
 8015022:	0018      	movs	r0, r3
 8015024:	2500      	movs	r5, #0
 8015026:	9b05      	ldr	r3, [sp, #20]
 8015028:	181b      	adds	r3, r3, r0
 801502a:	9306      	str	r3, [sp, #24]
 801502c:	9904      	ldr	r1, [sp, #16]
 801502e:	2201      	movs	r2, #1
 8015030:	9803      	ldr	r0, [sp, #12]
 8015032:	f000 ff13 	bl	8015e5c <__lshift>
 8015036:	0031      	movs	r1, r6
 8015038:	9004      	str	r0, [sp, #16]
 801503a:	f000 ff7f 	bl	8015f3c <__mcmp>
 801503e:	2800      	cmp	r0, #0
 8015040:	dc9b      	bgt.n	8014f7a <_dtoa_r+0xab2>
 8015042:	d101      	bne.n	8015048 <_dtoa_r+0xb80>
 8015044:	07e3      	lsls	r3, r4, #31
 8015046:	d498      	bmi.n	8014f7a <_dtoa_r+0xab2>
 8015048:	9b06      	ldr	r3, [sp, #24]
 801504a:	9306      	str	r3, [sp, #24]
 801504c:	3b01      	subs	r3, #1
 801504e:	781a      	ldrb	r2, [r3, #0]
 8015050:	2a30      	cmp	r2, #48	; 0x30
 8015052:	d0fa      	beq.n	801504a <_dtoa_r+0xb82>
 8015054:	e6ee      	b.n	8014e34 <_dtoa_r+0x96c>
 8015056:	9a05      	ldr	r2, [sp, #20]
 8015058:	429a      	cmp	r2, r3
 801505a:	d18f      	bne.n	8014f7c <_dtoa_r+0xab4>
 801505c:	9b02      	ldr	r3, [sp, #8]
 801505e:	3301      	adds	r3, #1
 8015060:	9302      	str	r3, [sp, #8]
 8015062:	2331      	movs	r3, #49	; 0x31
 8015064:	7013      	strb	r3, [r2, #0]
 8015066:	e6e5      	b.n	8014e34 <_dtoa_r+0x96c>
 8015068:	4b08      	ldr	r3, [pc, #32]	; (801508c <_dtoa_r+0xbc4>)
 801506a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801506c:	9305      	str	r3, [sp, #20]
 801506e:	4b08      	ldr	r3, [pc, #32]	; (8015090 <_dtoa_r+0xbc8>)
 8015070:	2a00      	cmp	r2, #0
 8015072:	d001      	beq.n	8015078 <_dtoa_r+0xbb0>
 8015074:	f7ff fa5a 	bl	801452c <_dtoa_r+0x64>
 8015078:	f7ff fa5a 	bl	8014530 <_dtoa_r+0x68>
 801507c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507e:	2b00      	cmp	r3, #0
 8015080:	dcb6      	bgt.n	8014ff0 <_dtoa_r+0xb28>
 8015082:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015084:	2b02      	cmp	r3, #2
 8015086:	dd00      	ble.n	801508a <_dtoa_r+0xbc2>
 8015088:	e6be      	b.n	8014e08 <_dtoa_r+0x940>
 801508a:	e7b1      	b.n	8014ff0 <_dtoa_r+0xb28>
 801508c:	0801a980 	.word	0x0801a980
 8015090:	0801a988 	.word	0x0801a988

08015094 <__errno>:
 8015094:	4b01      	ldr	r3, [pc, #4]	; (801509c <__errno+0x8>)
 8015096:	6818      	ldr	r0, [r3, #0]
 8015098:	4770      	bx	lr
 801509a:	46c0      	nop			; (mov r8, r8)
 801509c:	20000100 	.word	0x20000100

080150a0 <__libc_fini_array>:
 80150a0:	b570      	push	{r4, r5, r6, lr}
 80150a2:	4d07      	ldr	r5, [pc, #28]	; (80150c0 <__libc_fini_array+0x20>)
 80150a4:	4c07      	ldr	r4, [pc, #28]	; (80150c4 <__libc_fini_array+0x24>)
 80150a6:	1b64      	subs	r4, r4, r5
 80150a8:	10a4      	asrs	r4, r4, #2
 80150aa:	2c00      	cmp	r4, #0
 80150ac:	d102      	bne.n	80150b4 <__libc_fini_array+0x14>
 80150ae:	f002 fe49 	bl	8017d44 <_fini>
 80150b2:	bd70      	pop	{r4, r5, r6, pc}
 80150b4:	3c01      	subs	r4, #1
 80150b6:	00a3      	lsls	r3, r4, #2
 80150b8:	58eb      	ldr	r3, [r5, r3]
 80150ba:	4798      	blx	r3
 80150bc:	e7f5      	b.n	80150aa <__libc_fini_array+0xa>
 80150be:	46c0      	nop			; (mov r8, r8)
 80150c0:	0801ac40 	.word	0x0801ac40
 80150c4:	0801ac44 	.word	0x0801ac44

080150c8 <_malloc_trim_r>:
 80150c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150ca:	0004      	movs	r4, r0
 80150cc:	2008      	movs	r0, #8
 80150ce:	000d      	movs	r5, r1
 80150d0:	f7ff f94e 	bl	8014370 <sysconf>
 80150d4:	0006      	movs	r6, r0
 80150d6:	0020      	movs	r0, r4
 80150d8:	f7fc fd54 	bl	8011b84 <__malloc_lock>
 80150dc:	2203      	movs	r2, #3
 80150de:	4f21      	ldr	r7, [pc, #132]	; (8015164 <_malloc_trim_r+0x9c>)
 80150e0:	0031      	movs	r1, r6
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	4393      	bics	r3, r2
 80150e8:	1b58      	subs	r0, r3, r5
 80150ea:	3811      	subs	r0, #17
 80150ec:	1980      	adds	r0, r0, r6
 80150ee:	9301      	str	r3, [sp, #4]
 80150f0:	f7eb f82e 	bl	8000150 <__udivsi3>
 80150f4:	1e45      	subs	r5, r0, #1
 80150f6:	4375      	muls	r5, r6
 80150f8:	42ae      	cmp	r6, r5
 80150fa:	dd04      	ble.n	8015106 <_malloc_trim_r+0x3e>
 80150fc:	0020      	movs	r0, r4
 80150fe:	f7fc fd49 	bl	8011b94 <__malloc_unlock>
 8015102:	2000      	movs	r0, #0
 8015104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015106:	2100      	movs	r1, #0
 8015108:	0020      	movs	r0, r4
 801510a:	f7fc ff15 	bl	8011f38 <_sbrk_r>
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	9a01      	ldr	r2, [sp, #4]
 8015112:	189b      	adds	r3, r3, r2
 8015114:	4298      	cmp	r0, r3
 8015116:	d1f1      	bne.n	80150fc <_malloc_trim_r+0x34>
 8015118:	0020      	movs	r0, r4
 801511a:	4269      	negs	r1, r5
 801511c:	f7fc ff0c 	bl	8011f38 <_sbrk_r>
 8015120:	1c43      	adds	r3, r0, #1
 8015122:	d110      	bne.n	8015146 <_malloc_trim_r+0x7e>
 8015124:	2100      	movs	r1, #0
 8015126:	0020      	movs	r0, r4
 8015128:	f7fc ff06 	bl	8011f38 <_sbrk_r>
 801512c:	68ba      	ldr	r2, [r7, #8]
 801512e:	1a81      	subs	r1, r0, r2
 8015130:	290f      	cmp	r1, #15
 8015132:	dde3      	ble.n	80150fc <_malloc_trim_r+0x34>
 8015134:	4b0c      	ldr	r3, [pc, #48]	; (8015168 <_malloc_trim_r+0xa0>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	1ac0      	subs	r0, r0, r3
 801513a:	4b0c      	ldr	r3, [pc, #48]	; (801516c <_malloc_trim_r+0xa4>)
 801513c:	6018      	str	r0, [r3, #0]
 801513e:	2301      	movs	r3, #1
 8015140:	430b      	orrs	r3, r1
 8015142:	6053      	str	r3, [r2, #4]
 8015144:	e7da      	b.n	80150fc <_malloc_trim_r+0x34>
 8015146:	2601      	movs	r6, #1
 8015148:	9b01      	ldr	r3, [sp, #4]
 801514a:	68ba      	ldr	r2, [r7, #8]
 801514c:	1b5b      	subs	r3, r3, r5
 801514e:	4333      	orrs	r3, r6
 8015150:	6053      	str	r3, [r2, #4]
 8015152:	4b06      	ldr	r3, [pc, #24]	; (801516c <_malloc_trim_r+0xa4>)
 8015154:	0020      	movs	r0, r4
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	1b55      	subs	r5, r2, r5
 801515a:	601d      	str	r5, [r3, #0]
 801515c:	f7fc fd1a 	bl	8011b94 <__malloc_unlock>
 8015160:	0030      	movs	r0, r6
 8015162:	e7cf      	b.n	8015104 <_malloc_trim_r+0x3c>
 8015164:	20000530 	.word	0x20000530
 8015168:	20000938 	.word	0x20000938
 801516c:	2000654c 	.word	0x2000654c

08015170 <_free_r>:
 8015170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015172:	1e0d      	subs	r5, r1, #0
 8015174:	9001      	str	r0, [sp, #4]
 8015176:	d02d      	beq.n	80151d4 <_free_r+0x64>
 8015178:	f7fc fd04 	bl	8011b84 <__malloc_lock>
 801517c:	2301      	movs	r3, #1
 801517e:	0029      	movs	r1, r5
 8015180:	469c      	mov	ip, r3
 8015182:	3908      	subs	r1, #8
 8015184:	684f      	ldr	r7, [r1, #4]
 8015186:	4662      	mov	r2, ip
 8015188:	003b      	movs	r3, r7
 801518a:	4666      	mov	r6, ip
 801518c:	4393      	bics	r3, r2
 801518e:	18c8      	adds	r0, r1, r3
 8015190:	6845      	ldr	r5, [r0, #4]
 8015192:	3202      	adds	r2, #2
 8015194:	4395      	bics	r5, r2
 8015196:	4a4a      	ldr	r2, [pc, #296]	; (80152c0 <_free_r+0x150>)
 8015198:	4037      	ands	r7, r6
 801519a:	6896      	ldr	r6, [r2, #8]
 801519c:	4286      	cmp	r6, r0
 801519e:	d11a      	bne.n	80151d6 <_free_r+0x66>
 80151a0:	195b      	adds	r3, r3, r5
 80151a2:	2f00      	cmp	r7, #0
 80151a4:	d106      	bne.n	80151b4 <_free_r+0x44>
 80151a6:	6808      	ldr	r0, [r1, #0]
 80151a8:	1a09      	subs	r1, r1, r0
 80151aa:	688d      	ldr	r5, [r1, #8]
 80151ac:	181b      	adds	r3, r3, r0
 80151ae:	68c8      	ldr	r0, [r1, #12]
 80151b0:	60e8      	str	r0, [r5, #12]
 80151b2:	6085      	str	r5, [r0, #8]
 80151b4:	2001      	movs	r0, #1
 80151b6:	4318      	orrs	r0, r3
 80151b8:	6048      	str	r0, [r1, #4]
 80151ba:	6091      	str	r1, [r2, #8]
 80151bc:	4a41      	ldr	r2, [pc, #260]	; (80152c4 <_free_r+0x154>)
 80151be:	6812      	ldr	r2, [r2, #0]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d804      	bhi.n	80151ce <_free_r+0x5e>
 80151c4:	4b40      	ldr	r3, [pc, #256]	; (80152c8 <_free_r+0x158>)
 80151c6:	9801      	ldr	r0, [sp, #4]
 80151c8:	6819      	ldr	r1, [r3, #0]
 80151ca:	f7ff ff7d 	bl	80150c8 <_malloc_trim_r>
 80151ce:	9801      	ldr	r0, [sp, #4]
 80151d0:	f7fc fce0 	bl	8011b94 <__malloc_unlock>
 80151d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80151d6:	2600      	movs	r6, #0
 80151d8:	6045      	str	r5, [r0, #4]
 80151da:	42b7      	cmp	r7, r6
 80151dc:	d109      	bne.n	80151f2 <_free_r+0x82>
 80151de:	680f      	ldr	r7, [r1, #0]
 80151e0:	4c3a      	ldr	r4, [pc, #232]	; (80152cc <_free_r+0x15c>)
 80151e2:	1bc9      	subs	r1, r1, r7
 80151e4:	19db      	adds	r3, r3, r7
 80151e6:	688f      	ldr	r7, [r1, #8]
 80151e8:	42a7      	cmp	r7, r4
 80151ea:	d02c      	beq.n	8015246 <_free_r+0xd6>
 80151ec:	68cc      	ldr	r4, [r1, #12]
 80151ee:	60fc      	str	r4, [r7, #12]
 80151f0:	60a7      	str	r7, [r4, #8]
 80151f2:	1947      	adds	r7, r0, r5
 80151f4:	687c      	ldr	r4, [r7, #4]
 80151f6:	2701      	movs	r7, #1
 80151f8:	423c      	tst	r4, r7
 80151fa:	d10b      	bne.n	8015214 <_free_r+0xa4>
 80151fc:	195b      	adds	r3, r3, r5
 80151fe:	6885      	ldr	r5, [r0, #8]
 8015200:	2e00      	cmp	r6, #0
 8015202:	d122      	bne.n	801524a <_free_r+0xda>
 8015204:	4c31      	ldr	r4, [pc, #196]	; (80152cc <_free_r+0x15c>)
 8015206:	42a5      	cmp	r5, r4
 8015208:	d11f      	bne.n	801524a <_free_r+0xda>
 801520a:	003e      	movs	r6, r7
 801520c:	6151      	str	r1, [r2, #20]
 801520e:	6111      	str	r1, [r2, #16]
 8015210:	60cd      	str	r5, [r1, #12]
 8015212:	608d      	str	r5, [r1, #8]
 8015214:	2501      	movs	r5, #1
 8015216:	0028      	movs	r0, r5
 8015218:	4318      	orrs	r0, r3
 801521a:	6048      	str	r0, [r1, #4]
 801521c:	50cb      	str	r3, [r1, r3]
 801521e:	2e00      	cmp	r6, #0
 8015220:	d1d5      	bne.n	80151ce <_free_r+0x5e>
 8015222:	2080      	movs	r0, #128	; 0x80
 8015224:	0080      	lsls	r0, r0, #2
 8015226:	4283      	cmp	r3, r0
 8015228:	d213      	bcs.n	8015252 <_free_r+0xe2>
 801522a:	08d8      	lsrs	r0, r3, #3
 801522c:	095b      	lsrs	r3, r3, #5
 801522e:	409d      	lsls	r5, r3
 8015230:	6853      	ldr	r3, [r2, #4]
 8015232:	00c0      	lsls	r0, r0, #3
 8015234:	431d      	orrs	r5, r3
 8015236:	6055      	str	r5, [r2, #4]
 8015238:	1882      	adds	r2, r0, r2
 801523a:	6893      	ldr	r3, [r2, #8]
 801523c:	60ca      	str	r2, [r1, #12]
 801523e:	608b      	str	r3, [r1, #8]
 8015240:	6091      	str	r1, [r2, #8]
 8015242:	60d9      	str	r1, [r3, #12]
 8015244:	e7c3      	b.n	80151ce <_free_r+0x5e>
 8015246:	4666      	mov	r6, ip
 8015248:	e7d3      	b.n	80151f2 <_free_r+0x82>
 801524a:	68c0      	ldr	r0, [r0, #12]
 801524c:	60e8      	str	r0, [r5, #12]
 801524e:	6085      	str	r5, [r0, #8]
 8015250:	e7e0      	b.n	8015214 <_free_r+0xa4>
 8015252:	0a5d      	lsrs	r5, r3, #9
 8015254:	2d04      	cmp	r5, #4
 8015256:	d812      	bhi.n	801527e <_free_r+0x10e>
 8015258:	0998      	lsrs	r0, r3, #6
 801525a:	3038      	adds	r0, #56	; 0x38
 801525c:	00c6      	lsls	r6, r0, #3
 801525e:	18b6      	adds	r6, r6, r2
 8015260:	68b5      	ldr	r5, [r6, #8]
 8015262:	2703      	movs	r7, #3
 8015264:	42ae      	cmp	r6, r5
 8015266:	d125      	bne.n	80152b4 <_free_r+0x144>
 8015268:	2301      	movs	r3, #1
 801526a:	1080      	asrs	r0, r0, #2
 801526c:	4083      	lsls	r3, r0
 801526e:	6850      	ldr	r0, [r2, #4]
 8015270:	4303      	orrs	r3, r0
 8015272:	6053      	str	r3, [r2, #4]
 8015274:	60ce      	str	r6, [r1, #12]
 8015276:	608d      	str	r5, [r1, #8]
 8015278:	60b1      	str	r1, [r6, #8]
 801527a:	60e9      	str	r1, [r5, #12]
 801527c:	e7a7      	b.n	80151ce <_free_r+0x5e>
 801527e:	2d14      	cmp	r5, #20
 8015280:	d802      	bhi.n	8015288 <_free_r+0x118>
 8015282:	0028      	movs	r0, r5
 8015284:	305b      	adds	r0, #91	; 0x5b
 8015286:	e7e9      	b.n	801525c <_free_r+0xec>
 8015288:	2d54      	cmp	r5, #84	; 0x54
 801528a:	d802      	bhi.n	8015292 <_free_r+0x122>
 801528c:	0b18      	lsrs	r0, r3, #12
 801528e:	306e      	adds	r0, #110	; 0x6e
 8015290:	e7e4      	b.n	801525c <_free_r+0xec>
 8015292:	20aa      	movs	r0, #170	; 0xaa
 8015294:	0040      	lsls	r0, r0, #1
 8015296:	4285      	cmp	r5, r0
 8015298:	d802      	bhi.n	80152a0 <_free_r+0x130>
 801529a:	0bd8      	lsrs	r0, r3, #15
 801529c:	3077      	adds	r0, #119	; 0x77
 801529e:	e7dd      	b.n	801525c <_free_r+0xec>
 80152a0:	4e0b      	ldr	r6, [pc, #44]	; (80152d0 <_free_r+0x160>)
 80152a2:	207e      	movs	r0, #126	; 0x7e
 80152a4:	42b5      	cmp	r5, r6
 80152a6:	d8d9      	bhi.n	801525c <_free_r+0xec>
 80152a8:	0c98      	lsrs	r0, r3, #18
 80152aa:	307c      	adds	r0, #124	; 0x7c
 80152ac:	e7d6      	b.n	801525c <_free_r+0xec>
 80152ae:	68ad      	ldr	r5, [r5, #8]
 80152b0:	42ae      	cmp	r6, r5
 80152b2:	d003      	beq.n	80152bc <_free_r+0x14c>
 80152b4:	686a      	ldr	r2, [r5, #4]
 80152b6:	43ba      	bics	r2, r7
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d8f8      	bhi.n	80152ae <_free_r+0x13e>
 80152bc:	68ee      	ldr	r6, [r5, #12]
 80152be:	e7d9      	b.n	8015274 <_free_r+0x104>
 80152c0:	20000530 	.word	0x20000530
 80152c4:	2000093c 	.word	0x2000093c
 80152c8:	2000657c 	.word	0x2000657c
 80152cc:	20000538 	.word	0x20000538
 80152d0:	00000554 	.word	0x00000554

080152d4 <rshift>:
 80152d4:	0002      	movs	r2, r0
 80152d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152d8:	6907      	ldr	r7, [r0, #16]
 80152da:	3214      	adds	r2, #20
 80152dc:	0013      	movs	r3, r2
 80152de:	b085      	sub	sp, #20
 80152e0:	114e      	asrs	r6, r1, #5
 80152e2:	42b7      	cmp	r7, r6
 80152e4:	dd31      	ble.n	801534a <rshift+0x76>
 80152e6:	00b3      	lsls	r3, r6, #2
 80152e8:	18d3      	adds	r3, r2, r3
 80152ea:	251f      	movs	r5, #31
 80152ec:	9301      	str	r3, [sp, #4]
 80152ee:	000b      	movs	r3, r1
 80152f0:	00bc      	lsls	r4, r7, #2
 80152f2:	402b      	ands	r3, r5
 80152f4:	1914      	adds	r4, r2, r4
 80152f6:	9302      	str	r3, [sp, #8]
 80152f8:	4229      	tst	r1, r5
 80152fa:	d10c      	bne.n	8015316 <rshift+0x42>
 80152fc:	0015      	movs	r5, r2
 80152fe:	9901      	ldr	r1, [sp, #4]
 8015300:	428c      	cmp	r4, r1
 8015302:	d838      	bhi.n	8015376 <rshift+0xa2>
 8015304:	9901      	ldr	r1, [sp, #4]
 8015306:	2300      	movs	r3, #0
 8015308:	3903      	subs	r1, #3
 801530a:	428c      	cmp	r4, r1
 801530c:	d301      	bcc.n	8015312 <rshift+0x3e>
 801530e:	1bbb      	subs	r3, r7, r6
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	18d3      	adds	r3, r2, r3
 8015314:	e019      	b.n	801534a <rshift+0x76>
 8015316:	2120      	movs	r1, #32
 8015318:	9b02      	ldr	r3, [sp, #8]
 801531a:	9d01      	ldr	r5, [sp, #4]
 801531c:	1acb      	subs	r3, r1, r3
 801531e:	9303      	str	r3, [sp, #12]
 8015320:	cd02      	ldmia	r5!, {r1}
 8015322:	9b02      	ldr	r3, [sp, #8]
 8015324:	4694      	mov	ip, r2
 8015326:	40d9      	lsrs	r1, r3
 8015328:	9100      	str	r1, [sp, #0]
 801532a:	42ac      	cmp	r4, r5
 801532c:	d816      	bhi.n	801535c <rshift+0x88>
 801532e:	9d01      	ldr	r5, [sp, #4]
 8015330:	2300      	movs	r3, #0
 8015332:	3501      	adds	r5, #1
 8015334:	42ac      	cmp	r4, r5
 8015336:	d302      	bcc.n	801533e <rshift+0x6a>
 8015338:	1bbb      	subs	r3, r7, r6
 801533a:	009b      	lsls	r3, r3, #2
 801533c:	3b04      	subs	r3, #4
 801533e:	9900      	ldr	r1, [sp, #0]
 8015340:	18d3      	adds	r3, r2, r3
 8015342:	6019      	str	r1, [r3, #0]
 8015344:	2900      	cmp	r1, #0
 8015346:	d000      	beq.n	801534a <rshift+0x76>
 8015348:	3304      	adds	r3, #4
 801534a:	1a99      	subs	r1, r3, r2
 801534c:	1089      	asrs	r1, r1, #2
 801534e:	6101      	str	r1, [r0, #16]
 8015350:	4293      	cmp	r3, r2
 8015352:	d101      	bne.n	8015358 <rshift+0x84>
 8015354:	2300      	movs	r3, #0
 8015356:	6143      	str	r3, [r0, #20]
 8015358:	b005      	add	sp, #20
 801535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801535c:	682b      	ldr	r3, [r5, #0]
 801535e:	9903      	ldr	r1, [sp, #12]
 8015360:	408b      	lsls	r3, r1
 8015362:	9900      	ldr	r1, [sp, #0]
 8015364:	4319      	orrs	r1, r3
 8015366:	4663      	mov	r3, ip
 8015368:	c302      	stmia	r3!, {r1}
 801536a:	469c      	mov	ip, r3
 801536c:	cd02      	ldmia	r5!, {r1}
 801536e:	9b02      	ldr	r3, [sp, #8]
 8015370:	40d9      	lsrs	r1, r3
 8015372:	9100      	str	r1, [sp, #0]
 8015374:	e7d9      	b.n	801532a <rshift+0x56>
 8015376:	c908      	ldmia	r1!, {r3}
 8015378:	c508      	stmia	r5!, {r3}
 801537a:	e7c1      	b.n	8015300 <rshift+0x2c>

0801537c <__hexdig_fun>:
 801537c:	0002      	movs	r2, r0
 801537e:	3a30      	subs	r2, #48	; 0x30
 8015380:	0003      	movs	r3, r0
 8015382:	2a09      	cmp	r2, #9
 8015384:	d802      	bhi.n	801538c <__hexdig_fun+0x10>
 8015386:	3b20      	subs	r3, #32
 8015388:	b2d8      	uxtb	r0, r3
 801538a:	4770      	bx	lr
 801538c:	0002      	movs	r2, r0
 801538e:	3a61      	subs	r2, #97	; 0x61
 8015390:	2a05      	cmp	r2, #5
 8015392:	d801      	bhi.n	8015398 <__hexdig_fun+0x1c>
 8015394:	3b47      	subs	r3, #71	; 0x47
 8015396:	e7f7      	b.n	8015388 <__hexdig_fun+0xc>
 8015398:	001a      	movs	r2, r3
 801539a:	3a41      	subs	r2, #65	; 0x41
 801539c:	2000      	movs	r0, #0
 801539e:	2a05      	cmp	r2, #5
 80153a0:	d8f3      	bhi.n	801538a <__hexdig_fun+0xe>
 80153a2:	3b27      	subs	r3, #39	; 0x27
 80153a4:	e7f0      	b.n	8015388 <__hexdig_fun+0xc>
	...

080153a8 <__gethex>:
 80153a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153aa:	b08d      	sub	sp, #52	; 0x34
 80153ac:	930a      	str	r3, [sp, #40]	; 0x28
 80153ae:	4bbd      	ldr	r3, [pc, #756]	; (80156a4 <__gethex+0x2fc>)
 80153b0:	9005      	str	r0, [sp, #20]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	9109      	str	r1, [sp, #36]	; 0x24
 80153b6:	0018      	movs	r0, r3
 80153b8:	9202      	str	r2, [sp, #8]
 80153ba:	9307      	str	r3, [sp, #28]
 80153bc:	f7ea feac 	bl	8000118 <strlen>
 80153c0:	2202      	movs	r2, #2
 80153c2:	9b07      	ldr	r3, [sp, #28]
 80153c4:	4252      	negs	r2, r2
 80153c6:	181b      	adds	r3, r3, r0
 80153c8:	3b01      	subs	r3, #1
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	9003      	str	r0, [sp, #12]
 80153ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80153d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153d2:	6819      	ldr	r1, [r3, #0]
 80153d4:	1c8b      	adds	r3, r1, #2
 80153d6:	1a52      	subs	r2, r2, r1
 80153d8:	18d1      	adds	r1, r2, r3
 80153da:	9301      	str	r3, [sp, #4]
 80153dc:	9108      	str	r1, [sp, #32]
 80153de:	9901      	ldr	r1, [sp, #4]
 80153e0:	3301      	adds	r3, #1
 80153e2:	7808      	ldrb	r0, [r1, #0]
 80153e4:	2830      	cmp	r0, #48	; 0x30
 80153e6:	d0f7      	beq.n	80153d8 <__gethex+0x30>
 80153e8:	f7ff ffc8 	bl	801537c <__hexdig_fun>
 80153ec:	1e04      	subs	r4, r0, #0
 80153ee:	d13e      	bne.n	801546e <__gethex+0xc6>
 80153f0:	9a03      	ldr	r2, [sp, #12]
 80153f2:	9907      	ldr	r1, [sp, #28]
 80153f4:	9801      	ldr	r0, [sp, #4]
 80153f6:	f7fc fdf4 	bl	8011fe2 <strncmp>
 80153fa:	1e07      	subs	r7, r0, #0
 80153fc:	d000      	beq.n	8015400 <__gethex+0x58>
 80153fe:	e06f      	b.n	80154e0 <__gethex+0x138>
 8015400:	9b01      	ldr	r3, [sp, #4]
 8015402:	9a03      	ldr	r2, [sp, #12]
 8015404:	5c98      	ldrb	r0, [r3, r2]
 8015406:	189d      	adds	r5, r3, r2
 8015408:	f7ff ffb8 	bl	801537c <__hexdig_fun>
 801540c:	2301      	movs	r3, #1
 801540e:	9304      	str	r3, [sp, #16]
 8015410:	2800      	cmp	r0, #0
 8015412:	d034      	beq.n	801547e <__gethex+0xd6>
 8015414:	9501      	str	r5, [sp, #4]
 8015416:	9b01      	ldr	r3, [sp, #4]
 8015418:	7818      	ldrb	r0, [r3, #0]
 801541a:	2830      	cmp	r0, #48	; 0x30
 801541c:	d009      	beq.n	8015432 <__gethex+0x8a>
 801541e:	f7ff ffad 	bl	801537c <__hexdig_fun>
 8015422:	4243      	negs	r3, r0
 8015424:	4143      	adcs	r3, r0
 8015426:	9304      	str	r3, [sp, #16]
 8015428:	2301      	movs	r3, #1
 801542a:	002c      	movs	r4, r5
 801542c:	9308      	str	r3, [sp, #32]
 801542e:	9d01      	ldr	r5, [sp, #4]
 8015430:	e004      	b.n	801543c <__gethex+0x94>
 8015432:	9b01      	ldr	r3, [sp, #4]
 8015434:	3301      	adds	r3, #1
 8015436:	9301      	str	r3, [sp, #4]
 8015438:	e7ed      	b.n	8015416 <__gethex+0x6e>
 801543a:	3501      	adds	r5, #1
 801543c:	7828      	ldrb	r0, [r5, #0]
 801543e:	f7ff ff9d 	bl	801537c <__hexdig_fun>
 8015442:	1e07      	subs	r7, r0, #0
 8015444:	d1f9      	bne.n	801543a <__gethex+0x92>
 8015446:	0028      	movs	r0, r5
 8015448:	9a03      	ldr	r2, [sp, #12]
 801544a:	9907      	ldr	r1, [sp, #28]
 801544c:	f7fc fdc9 	bl	8011fe2 <strncmp>
 8015450:	2800      	cmp	r0, #0
 8015452:	d112      	bne.n	801547a <__gethex+0xd2>
 8015454:	2c00      	cmp	r4, #0
 8015456:	d107      	bne.n	8015468 <__gethex+0xc0>
 8015458:	9b03      	ldr	r3, [sp, #12]
 801545a:	18ed      	adds	r5, r5, r3
 801545c:	002c      	movs	r4, r5
 801545e:	7828      	ldrb	r0, [r5, #0]
 8015460:	f7ff ff8c 	bl	801537c <__hexdig_fun>
 8015464:	2800      	cmp	r0, #0
 8015466:	d106      	bne.n	8015476 <__gethex+0xce>
 8015468:	1b67      	subs	r7, r4, r5
 801546a:	00bf      	lsls	r7, r7, #2
 801546c:	e007      	b.n	801547e <__gethex+0xd6>
 801546e:	2300      	movs	r3, #0
 8015470:	001c      	movs	r4, r3
 8015472:	9304      	str	r3, [sp, #16]
 8015474:	e7db      	b.n	801542e <__gethex+0x86>
 8015476:	3501      	adds	r5, #1
 8015478:	e7f1      	b.n	801545e <__gethex+0xb6>
 801547a:	2c00      	cmp	r4, #0
 801547c:	d1f4      	bne.n	8015468 <__gethex+0xc0>
 801547e:	2220      	movs	r2, #32
 8015480:	782b      	ldrb	r3, [r5, #0]
 8015482:	002e      	movs	r6, r5
 8015484:	4393      	bics	r3, r2
 8015486:	2b50      	cmp	r3, #80	; 0x50
 8015488:	d11d      	bne.n	80154c6 <__gethex+0x11e>
 801548a:	786b      	ldrb	r3, [r5, #1]
 801548c:	2b2b      	cmp	r3, #43	; 0x2b
 801548e:	d02c      	beq.n	80154ea <__gethex+0x142>
 8015490:	2b2d      	cmp	r3, #45	; 0x2d
 8015492:	d02e      	beq.n	80154f2 <__gethex+0x14a>
 8015494:	2300      	movs	r3, #0
 8015496:	1c6e      	adds	r6, r5, #1
 8015498:	9306      	str	r3, [sp, #24]
 801549a:	7830      	ldrb	r0, [r6, #0]
 801549c:	f7ff ff6e 	bl	801537c <__hexdig_fun>
 80154a0:	1e43      	subs	r3, r0, #1
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	2b18      	cmp	r3, #24
 80154a6:	d82b      	bhi.n	8015500 <__gethex+0x158>
 80154a8:	3810      	subs	r0, #16
 80154aa:	0004      	movs	r4, r0
 80154ac:	7870      	ldrb	r0, [r6, #1]
 80154ae:	f7ff ff65 	bl	801537c <__hexdig_fun>
 80154b2:	1e43      	subs	r3, r0, #1
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	3601      	adds	r6, #1
 80154b8:	2b18      	cmp	r3, #24
 80154ba:	d91c      	bls.n	80154f6 <__gethex+0x14e>
 80154bc:	9b06      	ldr	r3, [sp, #24]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d000      	beq.n	80154c4 <__gethex+0x11c>
 80154c2:	4264      	negs	r4, r4
 80154c4:	193f      	adds	r7, r7, r4
 80154c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154c8:	601e      	str	r6, [r3, #0]
 80154ca:	9b04      	ldr	r3, [sp, #16]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d019      	beq.n	8015504 <__gethex+0x15c>
 80154d0:	2600      	movs	r6, #0
 80154d2:	9b08      	ldr	r3, [sp, #32]
 80154d4:	42b3      	cmp	r3, r6
 80154d6:	d100      	bne.n	80154da <__gethex+0x132>
 80154d8:	3606      	adds	r6, #6
 80154da:	0030      	movs	r0, r6
 80154dc:	b00d      	add	sp, #52	; 0x34
 80154de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154e0:	2301      	movs	r3, #1
 80154e2:	0027      	movs	r7, r4
 80154e4:	9d01      	ldr	r5, [sp, #4]
 80154e6:	9304      	str	r3, [sp, #16]
 80154e8:	e7c9      	b.n	801547e <__gethex+0xd6>
 80154ea:	2300      	movs	r3, #0
 80154ec:	9306      	str	r3, [sp, #24]
 80154ee:	1cae      	adds	r6, r5, #2
 80154f0:	e7d3      	b.n	801549a <__gethex+0xf2>
 80154f2:	2301      	movs	r3, #1
 80154f4:	e7fa      	b.n	80154ec <__gethex+0x144>
 80154f6:	230a      	movs	r3, #10
 80154f8:	435c      	muls	r4, r3
 80154fa:	1824      	adds	r4, r4, r0
 80154fc:	3c10      	subs	r4, #16
 80154fe:	e7d5      	b.n	80154ac <__gethex+0x104>
 8015500:	002e      	movs	r6, r5
 8015502:	e7e0      	b.n	80154c6 <__gethex+0x11e>
 8015504:	9b01      	ldr	r3, [sp, #4]
 8015506:	9904      	ldr	r1, [sp, #16]
 8015508:	1aeb      	subs	r3, r5, r3
 801550a:	3b01      	subs	r3, #1
 801550c:	2b07      	cmp	r3, #7
 801550e:	dc0a      	bgt.n	8015526 <__gethex+0x17e>
 8015510:	9805      	ldr	r0, [sp, #20]
 8015512:	f000 fa91 	bl	8015a38 <_Balloc>
 8015516:	1e04      	subs	r4, r0, #0
 8015518:	d108      	bne.n	801552c <__gethex+0x184>
 801551a:	0002      	movs	r2, r0
 801551c:	21de      	movs	r1, #222	; 0xde
 801551e:	4b62      	ldr	r3, [pc, #392]	; (80156a8 <__gethex+0x300>)
 8015520:	4862      	ldr	r0, [pc, #392]	; (80156ac <__gethex+0x304>)
 8015522:	f001 f80b 	bl	801653c <__assert_func>
 8015526:	3101      	adds	r1, #1
 8015528:	105b      	asrs	r3, r3, #1
 801552a:	e7ef      	b.n	801550c <__gethex+0x164>
 801552c:	0003      	movs	r3, r0
 801552e:	3314      	adds	r3, #20
 8015530:	9304      	str	r3, [sp, #16]
 8015532:	9309      	str	r3, [sp, #36]	; 0x24
 8015534:	2300      	movs	r3, #0
 8015536:	001e      	movs	r6, r3
 8015538:	9306      	str	r3, [sp, #24]
 801553a:	9b01      	ldr	r3, [sp, #4]
 801553c:	42ab      	cmp	r3, r5
 801553e:	d340      	bcc.n	80155c2 <__gethex+0x21a>
 8015540:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015542:	9b04      	ldr	r3, [sp, #16]
 8015544:	c540      	stmia	r5!, {r6}
 8015546:	1aed      	subs	r5, r5, r3
 8015548:	10ad      	asrs	r5, r5, #2
 801554a:	0030      	movs	r0, r6
 801554c:	6125      	str	r5, [r4, #16]
 801554e:	f000 fb35 	bl	8015bbc <__hi0bits>
 8015552:	9b02      	ldr	r3, [sp, #8]
 8015554:	016d      	lsls	r5, r5, #5
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	1a2e      	subs	r6, r5, r0
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	429e      	cmp	r6, r3
 801555e:	dd5a      	ble.n	8015616 <__gethex+0x26e>
 8015560:	1af6      	subs	r6, r6, r3
 8015562:	0031      	movs	r1, r6
 8015564:	0020      	movs	r0, r4
 8015566:	f000 febe 	bl	80162e6 <__any_on>
 801556a:	1e05      	subs	r5, r0, #0
 801556c:	d016      	beq.n	801559c <__gethex+0x1f4>
 801556e:	2501      	movs	r5, #1
 8015570:	211f      	movs	r1, #31
 8015572:	0028      	movs	r0, r5
 8015574:	1e73      	subs	r3, r6, #1
 8015576:	4019      	ands	r1, r3
 8015578:	4088      	lsls	r0, r1
 801557a:	0001      	movs	r1, r0
 801557c:	115a      	asrs	r2, r3, #5
 801557e:	9804      	ldr	r0, [sp, #16]
 8015580:	0092      	lsls	r2, r2, #2
 8015582:	5812      	ldr	r2, [r2, r0]
 8015584:	420a      	tst	r2, r1
 8015586:	d009      	beq.n	801559c <__gethex+0x1f4>
 8015588:	42ab      	cmp	r3, r5
 801558a:	dd06      	ble.n	801559a <__gethex+0x1f2>
 801558c:	0020      	movs	r0, r4
 801558e:	1eb1      	subs	r1, r6, #2
 8015590:	f000 fea9 	bl	80162e6 <__any_on>
 8015594:	3502      	adds	r5, #2
 8015596:	2800      	cmp	r0, #0
 8015598:	d100      	bne.n	801559c <__gethex+0x1f4>
 801559a:	2502      	movs	r5, #2
 801559c:	0031      	movs	r1, r6
 801559e:	0020      	movs	r0, r4
 80155a0:	f7ff fe98 	bl	80152d4 <rshift>
 80155a4:	19bf      	adds	r7, r7, r6
 80155a6:	9b02      	ldr	r3, [sp, #8]
 80155a8:	689b      	ldr	r3, [r3, #8]
 80155aa:	9303      	str	r3, [sp, #12]
 80155ac:	42bb      	cmp	r3, r7
 80155ae:	da42      	bge.n	8015636 <__gethex+0x28e>
 80155b0:	0021      	movs	r1, r4
 80155b2:	9805      	ldr	r0, [sp, #20]
 80155b4:	f000 fa68 	bl	8015a88 <_Bfree>
 80155b8:	2300      	movs	r3, #0
 80155ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80155bc:	26a3      	movs	r6, #163	; 0xa3
 80155be:	6013      	str	r3, [r2, #0]
 80155c0:	e78b      	b.n	80154da <__gethex+0x132>
 80155c2:	1e6b      	subs	r3, r5, #1
 80155c4:	9308      	str	r3, [sp, #32]
 80155c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155c8:	781b      	ldrb	r3, [r3, #0]
 80155ca:	4293      	cmp	r3, r2
 80155cc:	d014      	beq.n	80155f8 <__gethex+0x250>
 80155ce:	9b06      	ldr	r3, [sp, #24]
 80155d0:	2b20      	cmp	r3, #32
 80155d2:	d104      	bne.n	80155de <__gethex+0x236>
 80155d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155d6:	c340      	stmia	r3!, {r6}
 80155d8:	2600      	movs	r6, #0
 80155da:	9309      	str	r3, [sp, #36]	; 0x24
 80155dc:	9606      	str	r6, [sp, #24]
 80155de:	9b08      	ldr	r3, [sp, #32]
 80155e0:	7818      	ldrb	r0, [r3, #0]
 80155e2:	f7ff fecb 	bl	801537c <__hexdig_fun>
 80155e6:	230f      	movs	r3, #15
 80155e8:	4018      	ands	r0, r3
 80155ea:	9b06      	ldr	r3, [sp, #24]
 80155ec:	9d08      	ldr	r5, [sp, #32]
 80155ee:	4098      	lsls	r0, r3
 80155f0:	3304      	adds	r3, #4
 80155f2:	4306      	orrs	r6, r0
 80155f4:	9306      	str	r3, [sp, #24]
 80155f6:	e7a0      	b.n	801553a <__gethex+0x192>
 80155f8:	2301      	movs	r3, #1
 80155fa:	9a03      	ldr	r2, [sp, #12]
 80155fc:	1a9d      	subs	r5, r3, r2
 80155fe:	9b08      	ldr	r3, [sp, #32]
 8015600:	195d      	adds	r5, r3, r5
 8015602:	9b01      	ldr	r3, [sp, #4]
 8015604:	429d      	cmp	r5, r3
 8015606:	d3e2      	bcc.n	80155ce <__gethex+0x226>
 8015608:	0028      	movs	r0, r5
 801560a:	9907      	ldr	r1, [sp, #28]
 801560c:	f7fc fce9 	bl	8011fe2 <strncmp>
 8015610:	2800      	cmp	r0, #0
 8015612:	d1dc      	bne.n	80155ce <__gethex+0x226>
 8015614:	e791      	b.n	801553a <__gethex+0x192>
 8015616:	9b01      	ldr	r3, [sp, #4]
 8015618:	2500      	movs	r5, #0
 801561a:	429e      	cmp	r6, r3
 801561c:	dac3      	bge.n	80155a6 <__gethex+0x1fe>
 801561e:	1b9e      	subs	r6, r3, r6
 8015620:	0021      	movs	r1, r4
 8015622:	0032      	movs	r2, r6
 8015624:	9805      	ldr	r0, [sp, #20]
 8015626:	f000 fc19 	bl	8015e5c <__lshift>
 801562a:	0003      	movs	r3, r0
 801562c:	3314      	adds	r3, #20
 801562e:	0004      	movs	r4, r0
 8015630:	1bbf      	subs	r7, r7, r6
 8015632:	9304      	str	r3, [sp, #16]
 8015634:	e7b7      	b.n	80155a6 <__gethex+0x1fe>
 8015636:	9b02      	ldr	r3, [sp, #8]
 8015638:	685e      	ldr	r6, [r3, #4]
 801563a:	42be      	cmp	r6, r7
 801563c:	dd71      	ble.n	8015722 <__gethex+0x37a>
 801563e:	9b01      	ldr	r3, [sp, #4]
 8015640:	1bf6      	subs	r6, r6, r7
 8015642:	42b3      	cmp	r3, r6
 8015644:	dc38      	bgt.n	80156b8 <__gethex+0x310>
 8015646:	9b02      	ldr	r3, [sp, #8]
 8015648:	68db      	ldr	r3, [r3, #12]
 801564a:	2b02      	cmp	r3, #2
 801564c:	d026      	beq.n	801569c <__gethex+0x2f4>
 801564e:	2b03      	cmp	r3, #3
 8015650:	d02e      	beq.n	80156b0 <__gethex+0x308>
 8015652:	2b01      	cmp	r3, #1
 8015654:	d119      	bne.n	801568a <__gethex+0x2e2>
 8015656:	9b01      	ldr	r3, [sp, #4]
 8015658:	42b3      	cmp	r3, r6
 801565a:	d116      	bne.n	801568a <__gethex+0x2e2>
 801565c:	2b01      	cmp	r3, #1
 801565e:	d10d      	bne.n	801567c <__gethex+0x2d4>
 8015660:	9b02      	ldr	r3, [sp, #8]
 8015662:	2662      	movs	r6, #98	; 0x62
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	9301      	str	r3, [sp, #4]
 8015668:	9a01      	ldr	r2, [sp, #4]
 801566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566c:	601a      	str	r2, [r3, #0]
 801566e:	2301      	movs	r3, #1
 8015670:	9a04      	ldr	r2, [sp, #16]
 8015672:	6123      	str	r3, [r4, #16]
 8015674:	6013      	str	r3, [r2, #0]
 8015676:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015678:	601c      	str	r4, [r3, #0]
 801567a:	e72e      	b.n	80154da <__gethex+0x132>
 801567c:	9901      	ldr	r1, [sp, #4]
 801567e:	0020      	movs	r0, r4
 8015680:	3901      	subs	r1, #1
 8015682:	f000 fe30 	bl	80162e6 <__any_on>
 8015686:	2800      	cmp	r0, #0
 8015688:	d1ea      	bne.n	8015660 <__gethex+0x2b8>
 801568a:	0021      	movs	r1, r4
 801568c:	9805      	ldr	r0, [sp, #20]
 801568e:	f000 f9fb 	bl	8015a88 <_Bfree>
 8015692:	2300      	movs	r3, #0
 8015694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015696:	2650      	movs	r6, #80	; 0x50
 8015698:	6013      	str	r3, [r2, #0]
 801569a:	e71e      	b.n	80154da <__gethex+0x132>
 801569c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1f3      	bne.n	801568a <__gethex+0x2e2>
 80156a2:	e7dd      	b.n	8015660 <__gethex+0x2b8>
 80156a4:	0801aa64 	.word	0x0801aa64
 80156a8:	0801a989 	.word	0x0801a989
 80156ac:	0801a9f9 	.word	0x0801a9f9
 80156b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1d4      	bne.n	8015660 <__gethex+0x2b8>
 80156b6:	e7e8      	b.n	801568a <__gethex+0x2e2>
 80156b8:	1e77      	subs	r7, r6, #1
 80156ba:	2d00      	cmp	r5, #0
 80156bc:	d12f      	bne.n	801571e <__gethex+0x376>
 80156be:	2f00      	cmp	r7, #0
 80156c0:	d004      	beq.n	80156cc <__gethex+0x324>
 80156c2:	0039      	movs	r1, r7
 80156c4:	0020      	movs	r0, r4
 80156c6:	f000 fe0e 	bl	80162e6 <__any_on>
 80156ca:	0005      	movs	r5, r0
 80156cc:	231f      	movs	r3, #31
 80156ce:	117a      	asrs	r2, r7, #5
 80156d0:	401f      	ands	r7, r3
 80156d2:	3b1e      	subs	r3, #30
 80156d4:	40bb      	lsls	r3, r7
 80156d6:	9904      	ldr	r1, [sp, #16]
 80156d8:	0092      	lsls	r2, r2, #2
 80156da:	5852      	ldr	r2, [r2, r1]
 80156dc:	421a      	tst	r2, r3
 80156de:	d001      	beq.n	80156e4 <__gethex+0x33c>
 80156e0:	2302      	movs	r3, #2
 80156e2:	431d      	orrs	r5, r3
 80156e4:	9b01      	ldr	r3, [sp, #4]
 80156e6:	0031      	movs	r1, r6
 80156e8:	1b9b      	subs	r3, r3, r6
 80156ea:	2602      	movs	r6, #2
 80156ec:	0020      	movs	r0, r4
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	f7ff fdf0 	bl	80152d4 <rshift>
 80156f4:	9b02      	ldr	r3, [sp, #8]
 80156f6:	685f      	ldr	r7, [r3, #4]
 80156f8:	2d00      	cmp	r5, #0
 80156fa:	d041      	beq.n	8015780 <__gethex+0x3d8>
 80156fc:	9b02      	ldr	r3, [sp, #8]
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	2b02      	cmp	r3, #2
 8015702:	d010      	beq.n	8015726 <__gethex+0x37e>
 8015704:	2b03      	cmp	r3, #3
 8015706:	d012      	beq.n	801572e <__gethex+0x386>
 8015708:	2b01      	cmp	r3, #1
 801570a:	d106      	bne.n	801571a <__gethex+0x372>
 801570c:	07aa      	lsls	r2, r5, #30
 801570e:	d504      	bpl.n	801571a <__gethex+0x372>
 8015710:	9a04      	ldr	r2, [sp, #16]
 8015712:	6810      	ldr	r0, [r2, #0]
 8015714:	4305      	orrs	r5, r0
 8015716:	421d      	tst	r5, r3
 8015718:	d10c      	bne.n	8015734 <__gethex+0x38c>
 801571a:	2310      	movs	r3, #16
 801571c:	e02f      	b.n	801577e <__gethex+0x3d6>
 801571e:	2501      	movs	r5, #1
 8015720:	e7d4      	b.n	80156cc <__gethex+0x324>
 8015722:	2601      	movs	r6, #1
 8015724:	e7e8      	b.n	80156f8 <__gethex+0x350>
 8015726:	2301      	movs	r3, #1
 8015728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801572a:	1a9b      	subs	r3, r3, r2
 801572c:	9313      	str	r3, [sp, #76]	; 0x4c
 801572e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015730:	2b00      	cmp	r3, #0
 8015732:	d0f2      	beq.n	801571a <__gethex+0x372>
 8015734:	6923      	ldr	r3, [r4, #16]
 8015736:	2000      	movs	r0, #0
 8015738:	9303      	str	r3, [sp, #12]
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	9304      	str	r3, [sp, #16]
 801573e:	0023      	movs	r3, r4
 8015740:	9a04      	ldr	r2, [sp, #16]
 8015742:	3314      	adds	r3, #20
 8015744:	1899      	adds	r1, r3, r2
 8015746:	681a      	ldr	r2, [r3, #0]
 8015748:	1c55      	adds	r5, r2, #1
 801574a:	d01e      	beq.n	801578a <__gethex+0x3e2>
 801574c:	3201      	adds	r2, #1
 801574e:	601a      	str	r2, [r3, #0]
 8015750:	0023      	movs	r3, r4
 8015752:	3314      	adds	r3, #20
 8015754:	2e02      	cmp	r6, #2
 8015756:	d140      	bne.n	80157da <__gethex+0x432>
 8015758:	9a02      	ldr	r2, [sp, #8]
 801575a:	9901      	ldr	r1, [sp, #4]
 801575c:	6812      	ldr	r2, [r2, #0]
 801575e:	3a01      	subs	r2, #1
 8015760:	428a      	cmp	r2, r1
 8015762:	d10b      	bne.n	801577c <__gethex+0x3d4>
 8015764:	114a      	asrs	r2, r1, #5
 8015766:	211f      	movs	r1, #31
 8015768:	9801      	ldr	r0, [sp, #4]
 801576a:	0092      	lsls	r2, r2, #2
 801576c:	4001      	ands	r1, r0
 801576e:	2001      	movs	r0, #1
 8015770:	0005      	movs	r5, r0
 8015772:	408d      	lsls	r5, r1
 8015774:	58d3      	ldr	r3, [r2, r3]
 8015776:	422b      	tst	r3, r5
 8015778:	d000      	beq.n	801577c <__gethex+0x3d4>
 801577a:	2601      	movs	r6, #1
 801577c:	2320      	movs	r3, #32
 801577e:	431e      	orrs	r6, r3
 8015780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015782:	601c      	str	r4, [r3, #0]
 8015784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015786:	601f      	str	r7, [r3, #0]
 8015788:	e6a7      	b.n	80154da <__gethex+0x132>
 801578a:	c301      	stmia	r3!, {r0}
 801578c:	4299      	cmp	r1, r3
 801578e:	d8da      	bhi.n	8015746 <__gethex+0x39e>
 8015790:	9b03      	ldr	r3, [sp, #12]
 8015792:	68a2      	ldr	r2, [r4, #8]
 8015794:	4293      	cmp	r3, r2
 8015796:	db17      	blt.n	80157c8 <__gethex+0x420>
 8015798:	6863      	ldr	r3, [r4, #4]
 801579a:	9805      	ldr	r0, [sp, #20]
 801579c:	1c59      	adds	r1, r3, #1
 801579e:	f000 f94b 	bl	8015a38 <_Balloc>
 80157a2:	1e05      	subs	r5, r0, #0
 80157a4:	d103      	bne.n	80157ae <__gethex+0x406>
 80157a6:	0002      	movs	r2, r0
 80157a8:	2184      	movs	r1, #132	; 0x84
 80157aa:	4b1c      	ldr	r3, [pc, #112]	; (801581c <__gethex+0x474>)
 80157ac:	e6b8      	b.n	8015520 <__gethex+0x178>
 80157ae:	0021      	movs	r1, r4
 80157b0:	6923      	ldr	r3, [r4, #16]
 80157b2:	310c      	adds	r1, #12
 80157b4:	1c9a      	adds	r2, r3, #2
 80157b6:	0092      	lsls	r2, r2, #2
 80157b8:	300c      	adds	r0, #12
 80157ba:	f7fc f9d1 	bl	8011b60 <memcpy>
 80157be:	0021      	movs	r1, r4
 80157c0:	9805      	ldr	r0, [sp, #20]
 80157c2:	f000 f961 	bl	8015a88 <_Bfree>
 80157c6:	002c      	movs	r4, r5
 80157c8:	6923      	ldr	r3, [r4, #16]
 80157ca:	1c5a      	adds	r2, r3, #1
 80157cc:	6122      	str	r2, [r4, #16]
 80157ce:	2201      	movs	r2, #1
 80157d0:	3304      	adds	r3, #4
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	18e3      	adds	r3, r4, r3
 80157d6:	605a      	str	r2, [r3, #4]
 80157d8:	e7ba      	b.n	8015750 <__gethex+0x3a8>
 80157da:	6922      	ldr	r2, [r4, #16]
 80157dc:	9903      	ldr	r1, [sp, #12]
 80157de:	428a      	cmp	r2, r1
 80157e0:	dd09      	ble.n	80157f6 <__gethex+0x44e>
 80157e2:	2101      	movs	r1, #1
 80157e4:	0020      	movs	r0, r4
 80157e6:	f7ff fd75 	bl	80152d4 <rshift>
 80157ea:	9b02      	ldr	r3, [sp, #8]
 80157ec:	3701      	adds	r7, #1
 80157ee:	689b      	ldr	r3, [r3, #8]
 80157f0:	42bb      	cmp	r3, r7
 80157f2:	dac2      	bge.n	801577a <__gethex+0x3d2>
 80157f4:	e6dc      	b.n	80155b0 <__gethex+0x208>
 80157f6:	221f      	movs	r2, #31
 80157f8:	9d01      	ldr	r5, [sp, #4]
 80157fa:	9901      	ldr	r1, [sp, #4]
 80157fc:	2601      	movs	r6, #1
 80157fe:	4015      	ands	r5, r2
 8015800:	4211      	tst	r1, r2
 8015802:	d0bb      	beq.n	801577c <__gethex+0x3d4>
 8015804:	9a04      	ldr	r2, [sp, #16]
 8015806:	189b      	adds	r3, r3, r2
 8015808:	3b04      	subs	r3, #4
 801580a:	6818      	ldr	r0, [r3, #0]
 801580c:	f000 f9d6 	bl	8015bbc <__hi0bits>
 8015810:	2320      	movs	r3, #32
 8015812:	1b5d      	subs	r5, r3, r5
 8015814:	42a8      	cmp	r0, r5
 8015816:	dbe4      	blt.n	80157e2 <__gethex+0x43a>
 8015818:	e7b0      	b.n	801577c <__gethex+0x3d4>
 801581a:	46c0      	nop			; (mov r8, r8)
 801581c:	0801a989 	.word	0x0801a989

08015820 <L_shift>:
 8015820:	2308      	movs	r3, #8
 8015822:	b570      	push	{r4, r5, r6, lr}
 8015824:	2520      	movs	r5, #32
 8015826:	1a9a      	subs	r2, r3, r2
 8015828:	0092      	lsls	r2, r2, #2
 801582a:	1aad      	subs	r5, r5, r2
 801582c:	6843      	ldr	r3, [r0, #4]
 801582e:	6806      	ldr	r6, [r0, #0]
 8015830:	001c      	movs	r4, r3
 8015832:	40ac      	lsls	r4, r5
 8015834:	40d3      	lsrs	r3, r2
 8015836:	4334      	orrs	r4, r6
 8015838:	6004      	str	r4, [r0, #0]
 801583a:	6043      	str	r3, [r0, #4]
 801583c:	3004      	adds	r0, #4
 801583e:	4288      	cmp	r0, r1
 8015840:	d3f4      	bcc.n	801582c <L_shift+0xc>
 8015842:	bd70      	pop	{r4, r5, r6, pc}

08015844 <__match>:
 8015844:	b530      	push	{r4, r5, lr}
 8015846:	6803      	ldr	r3, [r0, #0]
 8015848:	780c      	ldrb	r4, [r1, #0]
 801584a:	3301      	adds	r3, #1
 801584c:	2c00      	cmp	r4, #0
 801584e:	d102      	bne.n	8015856 <__match+0x12>
 8015850:	6003      	str	r3, [r0, #0]
 8015852:	2001      	movs	r0, #1
 8015854:	bd30      	pop	{r4, r5, pc}
 8015856:	781a      	ldrb	r2, [r3, #0]
 8015858:	0015      	movs	r5, r2
 801585a:	3d41      	subs	r5, #65	; 0x41
 801585c:	2d19      	cmp	r5, #25
 801585e:	d800      	bhi.n	8015862 <__match+0x1e>
 8015860:	3220      	adds	r2, #32
 8015862:	3101      	adds	r1, #1
 8015864:	42a2      	cmp	r2, r4
 8015866:	d0ef      	beq.n	8015848 <__match+0x4>
 8015868:	2000      	movs	r0, #0
 801586a:	e7f3      	b.n	8015854 <__match+0x10>

0801586c <__hexnan>:
 801586c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801586e:	680b      	ldr	r3, [r1, #0]
 8015870:	b08b      	sub	sp, #44	; 0x2c
 8015872:	115c      	asrs	r4, r3, #5
 8015874:	00a4      	lsls	r4, r4, #2
 8015876:	9201      	str	r2, [sp, #4]
 8015878:	1912      	adds	r2, r2, r4
 801587a:	0019      	movs	r1, r3
 801587c:	9202      	str	r2, [sp, #8]
 801587e:	221f      	movs	r2, #31
 8015880:	4011      	ands	r1, r2
 8015882:	9008      	str	r0, [sp, #32]
 8015884:	9106      	str	r1, [sp, #24]
 8015886:	4213      	tst	r3, r2
 8015888:	d002      	beq.n	8015890 <__hexnan+0x24>
 801588a:	9b02      	ldr	r3, [sp, #8]
 801588c:	3304      	adds	r3, #4
 801588e:	9302      	str	r3, [sp, #8]
 8015890:	9b02      	ldr	r3, [sp, #8]
 8015892:	2500      	movs	r5, #0
 8015894:	1f1e      	subs	r6, r3, #4
 8015896:	0037      	movs	r7, r6
 8015898:	0034      	movs	r4, r6
 801589a:	9b08      	ldr	r3, [sp, #32]
 801589c:	6035      	str	r5, [r6, #0]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	9507      	str	r5, [sp, #28]
 80158a2:	9305      	str	r3, [sp, #20]
 80158a4:	9503      	str	r5, [sp, #12]
 80158a6:	9b05      	ldr	r3, [sp, #20]
 80158a8:	3301      	adds	r3, #1
 80158aa:	9309      	str	r3, [sp, #36]	; 0x24
 80158ac:	9b05      	ldr	r3, [sp, #20]
 80158ae:	785b      	ldrb	r3, [r3, #1]
 80158b0:	9304      	str	r3, [sp, #16]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d028      	beq.n	8015908 <__hexnan+0x9c>
 80158b6:	9804      	ldr	r0, [sp, #16]
 80158b8:	f7ff fd60 	bl	801537c <__hexdig_fun>
 80158bc:	2800      	cmp	r0, #0
 80158be:	d154      	bne.n	801596a <__hexnan+0xfe>
 80158c0:	9b04      	ldr	r3, [sp, #16]
 80158c2:	2b20      	cmp	r3, #32
 80158c4:	d819      	bhi.n	80158fa <__hexnan+0x8e>
 80158c6:	9b03      	ldr	r3, [sp, #12]
 80158c8:	9a07      	ldr	r2, [sp, #28]
 80158ca:	4293      	cmp	r3, r2
 80158cc:	dd12      	ble.n	80158f4 <__hexnan+0x88>
 80158ce:	42bc      	cmp	r4, r7
 80158d0:	d206      	bcs.n	80158e0 <__hexnan+0x74>
 80158d2:	2d07      	cmp	r5, #7
 80158d4:	dc04      	bgt.n	80158e0 <__hexnan+0x74>
 80158d6:	002a      	movs	r2, r5
 80158d8:	0039      	movs	r1, r7
 80158da:	0020      	movs	r0, r4
 80158dc:	f7ff ffa0 	bl	8015820 <L_shift>
 80158e0:	9b01      	ldr	r3, [sp, #4]
 80158e2:	2508      	movs	r5, #8
 80158e4:	429c      	cmp	r4, r3
 80158e6:	d905      	bls.n	80158f4 <__hexnan+0x88>
 80158e8:	1f27      	subs	r7, r4, #4
 80158ea:	2500      	movs	r5, #0
 80158ec:	003c      	movs	r4, r7
 80158ee:	9b03      	ldr	r3, [sp, #12]
 80158f0:	603d      	str	r5, [r7, #0]
 80158f2:	9307      	str	r3, [sp, #28]
 80158f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158f6:	9305      	str	r3, [sp, #20]
 80158f8:	e7d5      	b.n	80158a6 <__hexnan+0x3a>
 80158fa:	9b04      	ldr	r3, [sp, #16]
 80158fc:	2b29      	cmp	r3, #41	; 0x29
 80158fe:	d158      	bne.n	80159b2 <__hexnan+0x146>
 8015900:	9b05      	ldr	r3, [sp, #20]
 8015902:	9a08      	ldr	r2, [sp, #32]
 8015904:	3302      	adds	r3, #2
 8015906:	6013      	str	r3, [r2, #0]
 8015908:	9b03      	ldr	r3, [sp, #12]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d051      	beq.n	80159b2 <__hexnan+0x146>
 801590e:	42bc      	cmp	r4, r7
 8015910:	d206      	bcs.n	8015920 <__hexnan+0xb4>
 8015912:	2d07      	cmp	r5, #7
 8015914:	dc04      	bgt.n	8015920 <__hexnan+0xb4>
 8015916:	002a      	movs	r2, r5
 8015918:	0039      	movs	r1, r7
 801591a:	0020      	movs	r0, r4
 801591c:	f7ff ff80 	bl	8015820 <L_shift>
 8015920:	9b01      	ldr	r3, [sp, #4]
 8015922:	429c      	cmp	r4, r3
 8015924:	d935      	bls.n	8015992 <__hexnan+0x126>
 8015926:	001a      	movs	r2, r3
 8015928:	0023      	movs	r3, r4
 801592a:	cb02      	ldmia	r3!, {r1}
 801592c:	c202      	stmia	r2!, {r1}
 801592e:	429e      	cmp	r6, r3
 8015930:	d2fb      	bcs.n	801592a <__hexnan+0xbe>
 8015932:	9b02      	ldr	r3, [sp, #8]
 8015934:	1c61      	adds	r1, r4, #1
 8015936:	1eda      	subs	r2, r3, #3
 8015938:	2304      	movs	r3, #4
 801593a:	4291      	cmp	r1, r2
 801593c:	d805      	bhi.n	801594a <__hexnan+0xde>
 801593e:	9b02      	ldr	r3, [sp, #8]
 8015940:	3b04      	subs	r3, #4
 8015942:	1b1c      	subs	r4, r3, r4
 8015944:	08a4      	lsrs	r4, r4, #2
 8015946:	3401      	adds	r4, #1
 8015948:	00a3      	lsls	r3, r4, #2
 801594a:	9a01      	ldr	r2, [sp, #4]
 801594c:	18d4      	adds	r4, r2, r3
 801594e:	2300      	movs	r3, #0
 8015950:	c408      	stmia	r4!, {r3}
 8015952:	42a6      	cmp	r6, r4
 8015954:	d2fc      	bcs.n	8015950 <__hexnan+0xe4>
 8015956:	6833      	ldr	r3, [r6, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d104      	bne.n	8015966 <__hexnan+0xfa>
 801595c:	9b01      	ldr	r3, [sp, #4]
 801595e:	429e      	cmp	r6, r3
 8015960:	d125      	bne.n	80159ae <__hexnan+0x142>
 8015962:	2301      	movs	r3, #1
 8015964:	6033      	str	r3, [r6, #0]
 8015966:	2005      	movs	r0, #5
 8015968:	e024      	b.n	80159b4 <__hexnan+0x148>
 801596a:	9b03      	ldr	r3, [sp, #12]
 801596c:	3501      	adds	r5, #1
 801596e:	3301      	adds	r3, #1
 8015970:	9303      	str	r3, [sp, #12]
 8015972:	2d08      	cmp	r5, #8
 8015974:	dd06      	ble.n	8015984 <__hexnan+0x118>
 8015976:	9b01      	ldr	r3, [sp, #4]
 8015978:	429c      	cmp	r4, r3
 801597a:	d9bb      	bls.n	80158f4 <__hexnan+0x88>
 801597c:	2300      	movs	r3, #0
 801597e:	2501      	movs	r5, #1
 8015980:	3c04      	subs	r4, #4
 8015982:	6023      	str	r3, [r4, #0]
 8015984:	220f      	movs	r2, #15
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	4010      	ands	r0, r2
 801598a:	011b      	lsls	r3, r3, #4
 801598c:	4318      	orrs	r0, r3
 801598e:	6020      	str	r0, [r4, #0]
 8015990:	e7b0      	b.n	80158f4 <__hexnan+0x88>
 8015992:	9b06      	ldr	r3, [sp, #24]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d0de      	beq.n	8015956 <__hexnan+0xea>
 8015998:	2220      	movs	r2, #32
 801599a:	1ad2      	subs	r2, r2, r3
 801599c:	2301      	movs	r3, #1
 801599e:	425b      	negs	r3, r3
 80159a0:	40d3      	lsrs	r3, r2
 80159a2:	9c02      	ldr	r4, [sp, #8]
 80159a4:	3c04      	subs	r4, #4
 80159a6:	6822      	ldr	r2, [r4, #0]
 80159a8:	4013      	ands	r3, r2
 80159aa:	6023      	str	r3, [r4, #0]
 80159ac:	e7d3      	b.n	8015956 <__hexnan+0xea>
 80159ae:	3e04      	subs	r6, #4
 80159b0:	e7d1      	b.n	8015956 <__hexnan+0xea>
 80159b2:	2004      	movs	r0, #4
 80159b4:	b00b      	add	sp, #44	; 0x2c
 80159b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080159b8 <__locale_mb_cur_max>:
 80159b8:	2394      	movs	r3, #148	; 0x94
 80159ba:	4a02      	ldr	r2, [pc, #8]	; (80159c4 <__locale_mb_cur_max+0xc>)
 80159bc:	005b      	lsls	r3, r3, #1
 80159be:	5cd0      	ldrb	r0, [r2, r3]
 80159c0:	4770      	bx	lr
 80159c2:	46c0      	nop			; (mov r8, r8)
 80159c4:	20000948 	.word	0x20000948

080159c8 <_localeconv_r>:
 80159c8:	4800      	ldr	r0, [pc, #0]	; (80159cc <_localeconv_r+0x4>)
 80159ca:	4770      	bx	lr
 80159cc:	20000a38 	.word	0x20000a38

080159d0 <__retarget_lock_init_recursive>:
 80159d0:	4770      	bx	lr

080159d2 <__retarget_lock_close_recursive>:
 80159d2:	4770      	bx	lr

080159d4 <__retarget_lock_acquire_recursive>:
 80159d4:	4770      	bx	lr

080159d6 <__retarget_lock_release_recursive>:
 80159d6:	4770      	bx	lr

080159d8 <__ascii_mbtowc>:
 80159d8:	b082      	sub	sp, #8
 80159da:	2900      	cmp	r1, #0
 80159dc:	d100      	bne.n	80159e0 <__ascii_mbtowc+0x8>
 80159de:	a901      	add	r1, sp, #4
 80159e0:	1e10      	subs	r0, r2, #0
 80159e2:	d006      	beq.n	80159f2 <__ascii_mbtowc+0x1a>
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d006      	beq.n	80159f6 <__ascii_mbtowc+0x1e>
 80159e8:	7813      	ldrb	r3, [r2, #0]
 80159ea:	600b      	str	r3, [r1, #0]
 80159ec:	7810      	ldrb	r0, [r2, #0]
 80159ee:	1e43      	subs	r3, r0, #1
 80159f0:	4198      	sbcs	r0, r3
 80159f2:	b002      	add	sp, #8
 80159f4:	4770      	bx	lr
 80159f6:	2002      	movs	r0, #2
 80159f8:	4240      	negs	r0, r0
 80159fa:	e7fa      	b.n	80159f2 <__ascii_mbtowc+0x1a>

080159fc <memchr>:
 80159fc:	b2c9      	uxtb	r1, r1
 80159fe:	1882      	adds	r2, r0, r2
 8015a00:	4290      	cmp	r0, r2
 8015a02:	d101      	bne.n	8015a08 <memchr+0xc>
 8015a04:	2000      	movs	r0, #0
 8015a06:	4770      	bx	lr
 8015a08:	7803      	ldrb	r3, [r0, #0]
 8015a0a:	428b      	cmp	r3, r1
 8015a0c:	d0fb      	beq.n	8015a06 <memchr+0xa>
 8015a0e:	3001      	adds	r0, #1
 8015a10:	e7f6      	b.n	8015a00 <memchr+0x4>

08015a12 <memmove>:
 8015a12:	b510      	push	{r4, lr}
 8015a14:	4288      	cmp	r0, r1
 8015a16:	d902      	bls.n	8015a1e <memmove+0xc>
 8015a18:	188b      	adds	r3, r1, r2
 8015a1a:	4298      	cmp	r0, r3
 8015a1c:	d303      	bcc.n	8015a26 <memmove+0x14>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	e007      	b.n	8015a32 <memmove+0x20>
 8015a22:	5c8b      	ldrb	r3, [r1, r2]
 8015a24:	5483      	strb	r3, [r0, r2]
 8015a26:	3a01      	subs	r2, #1
 8015a28:	d2fb      	bcs.n	8015a22 <memmove+0x10>
 8015a2a:	bd10      	pop	{r4, pc}
 8015a2c:	5ccc      	ldrb	r4, [r1, r3]
 8015a2e:	54c4      	strb	r4, [r0, r3]
 8015a30:	3301      	adds	r3, #1
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d1fa      	bne.n	8015a2c <memmove+0x1a>
 8015a36:	e7f8      	b.n	8015a2a <memmove+0x18>

08015a38 <_Balloc>:
 8015a38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015a3a:	b570      	push	{r4, r5, r6, lr}
 8015a3c:	0006      	movs	r6, r0
 8015a3e:	000c      	movs	r4, r1
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d012      	beq.n	8015a6a <_Balloc+0x32>
 8015a44:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8015a46:	00a3      	lsls	r3, r4, #2
 8015a48:	18d3      	adds	r3, r2, r3
 8015a4a:	6818      	ldr	r0, [r3, #0]
 8015a4c:	2800      	cmp	r0, #0
 8015a4e:	d115      	bne.n	8015a7c <_Balloc+0x44>
 8015a50:	2101      	movs	r1, #1
 8015a52:	000d      	movs	r5, r1
 8015a54:	40a5      	lsls	r5, r4
 8015a56:	1d6a      	adds	r2, r5, #5
 8015a58:	0030      	movs	r0, r6
 8015a5a:	0092      	lsls	r2, r2, #2
 8015a5c:	f000 fd8c 	bl	8016578 <_calloc_r>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d009      	beq.n	8015a78 <_Balloc+0x40>
 8015a64:	6044      	str	r4, [r0, #4]
 8015a66:	6085      	str	r5, [r0, #8]
 8015a68:	e00a      	b.n	8015a80 <_Balloc+0x48>
 8015a6a:	2221      	movs	r2, #33	; 0x21
 8015a6c:	2104      	movs	r1, #4
 8015a6e:	f000 fd83 	bl	8016578 <_calloc_r>
 8015a72:	64f0      	str	r0, [r6, #76]	; 0x4c
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d1e5      	bne.n	8015a44 <_Balloc+0xc>
 8015a78:	2000      	movs	r0, #0
 8015a7a:	bd70      	pop	{r4, r5, r6, pc}
 8015a7c:	6802      	ldr	r2, [r0, #0]
 8015a7e:	601a      	str	r2, [r3, #0]
 8015a80:	2300      	movs	r3, #0
 8015a82:	6103      	str	r3, [r0, #16]
 8015a84:	60c3      	str	r3, [r0, #12]
 8015a86:	e7f8      	b.n	8015a7a <_Balloc+0x42>

08015a88 <_Bfree>:
 8015a88:	2900      	cmp	r1, #0
 8015a8a:	d006      	beq.n	8015a9a <_Bfree+0x12>
 8015a8c:	684b      	ldr	r3, [r1, #4]
 8015a8e:	009a      	lsls	r2, r3, #2
 8015a90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015a92:	189b      	adds	r3, r3, r2
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	600a      	str	r2, [r1, #0]
 8015a98:	6019      	str	r1, [r3, #0]
 8015a9a:	4770      	bx	lr

08015a9c <__multadd>:
 8015a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a9e:	000e      	movs	r6, r1
 8015aa0:	9001      	str	r0, [sp, #4]
 8015aa2:	000c      	movs	r4, r1
 8015aa4:	001d      	movs	r5, r3
 8015aa6:	2000      	movs	r0, #0
 8015aa8:	690f      	ldr	r7, [r1, #16]
 8015aaa:	3614      	adds	r6, #20
 8015aac:	6833      	ldr	r3, [r6, #0]
 8015aae:	3001      	adds	r0, #1
 8015ab0:	b299      	uxth	r1, r3
 8015ab2:	4351      	muls	r1, r2
 8015ab4:	0c1b      	lsrs	r3, r3, #16
 8015ab6:	4353      	muls	r3, r2
 8015ab8:	1949      	adds	r1, r1, r5
 8015aba:	0c0d      	lsrs	r5, r1, #16
 8015abc:	195b      	adds	r3, r3, r5
 8015abe:	0c1d      	lsrs	r5, r3, #16
 8015ac0:	b289      	uxth	r1, r1
 8015ac2:	041b      	lsls	r3, r3, #16
 8015ac4:	185b      	adds	r3, r3, r1
 8015ac6:	c608      	stmia	r6!, {r3}
 8015ac8:	4287      	cmp	r7, r0
 8015aca:	dcef      	bgt.n	8015aac <__multadd+0x10>
 8015acc:	2d00      	cmp	r5, #0
 8015ace:	d022      	beq.n	8015b16 <__multadd+0x7a>
 8015ad0:	68a3      	ldr	r3, [r4, #8]
 8015ad2:	42bb      	cmp	r3, r7
 8015ad4:	dc19      	bgt.n	8015b0a <__multadd+0x6e>
 8015ad6:	6863      	ldr	r3, [r4, #4]
 8015ad8:	9801      	ldr	r0, [sp, #4]
 8015ada:	1c59      	adds	r1, r3, #1
 8015adc:	f7ff ffac 	bl	8015a38 <_Balloc>
 8015ae0:	1e06      	subs	r6, r0, #0
 8015ae2:	d105      	bne.n	8015af0 <__multadd+0x54>
 8015ae4:	0002      	movs	r2, r0
 8015ae6:	21b5      	movs	r1, #181	; 0xb5
 8015ae8:	4b0c      	ldr	r3, [pc, #48]	; (8015b1c <__multadd+0x80>)
 8015aea:	480d      	ldr	r0, [pc, #52]	; (8015b20 <__multadd+0x84>)
 8015aec:	f000 fd26 	bl	801653c <__assert_func>
 8015af0:	0021      	movs	r1, r4
 8015af2:	6923      	ldr	r3, [r4, #16]
 8015af4:	310c      	adds	r1, #12
 8015af6:	1c9a      	adds	r2, r3, #2
 8015af8:	0092      	lsls	r2, r2, #2
 8015afa:	300c      	adds	r0, #12
 8015afc:	f7fc f830 	bl	8011b60 <memcpy>
 8015b00:	0021      	movs	r1, r4
 8015b02:	9801      	ldr	r0, [sp, #4]
 8015b04:	f7ff ffc0 	bl	8015a88 <_Bfree>
 8015b08:	0034      	movs	r4, r6
 8015b0a:	1d3b      	adds	r3, r7, #4
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	18e3      	adds	r3, r4, r3
 8015b10:	605d      	str	r5, [r3, #4]
 8015b12:	1c7b      	adds	r3, r7, #1
 8015b14:	6123      	str	r3, [r4, #16]
 8015b16:	0020      	movs	r0, r4
 8015b18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015b1a:	46c0      	nop			; (mov r8, r8)
 8015b1c:	0801a989 	.word	0x0801a989
 8015b20:	0801aa78 	.word	0x0801aa78

08015b24 <__s2b>:
 8015b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b26:	0006      	movs	r6, r0
 8015b28:	0018      	movs	r0, r3
 8015b2a:	000c      	movs	r4, r1
 8015b2c:	3008      	adds	r0, #8
 8015b2e:	2109      	movs	r1, #9
 8015b30:	9301      	str	r3, [sp, #4]
 8015b32:	0015      	movs	r5, r2
 8015b34:	f7ea fb96 	bl	8000264 <__divsi3>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	4283      	cmp	r3, r0
 8015b3e:	db0a      	blt.n	8015b56 <__s2b+0x32>
 8015b40:	0030      	movs	r0, r6
 8015b42:	f7ff ff79 	bl	8015a38 <_Balloc>
 8015b46:	1e01      	subs	r1, r0, #0
 8015b48:	d108      	bne.n	8015b5c <__s2b+0x38>
 8015b4a:	0002      	movs	r2, r0
 8015b4c:	4b19      	ldr	r3, [pc, #100]	; (8015bb4 <__s2b+0x90>)
 8015b4e:	481a      	ldr	r0, [pc, #104]	; (8015bb8 <__s2b+0x94>)
 8015b50:	31ce      	adds	r1, #206	; 0xce
 8015b52:	f000 fcf3 	bl	801653c <__assert_func>
 8015b56:	005b      	lsls	r3, r3, #1
 8015b58:	3101      	adds	r1, #1
 8015b5a:	e7ef      	b.n	8015b3c <__s2b+0x18>
 8015b5c:	9b08      	ldr	r3, [sp, #32]
 8015b5e:	6143      	str	r3, [r0, #20]
 8015b60:	2301      	movs	r3, #1
 8015b62:	6103      	str	r3, [r0, #16]
 8015b64:	2d09      	cmp	r5, #9
 8015b66:	dd18      	ble.n	8015b9a <__s2b+0x76>
 8015b68:	0023      	movs	r3, r4
 8015b6a:	3309      	adds	r3, #9
 8015b6c:	001f      	movs	r7, r3
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	1964      	adds	r4, r4, r5
 8015b72:	783b      	ldrb	r3, [r7, #0]
 8015b74:	220a      	movs	r2, #10
 8015b76:	0030      	movs	r0, r6
 8015b78:	3b30      	subs	r3, #48	; 0x30
 8015b7a:	f7ff ff8f 	bl	8015a9c <__multadd>
 8015b7e:	3701      	adds	r7, #1
 8015b80:	0001      	movs	r1, r0
 8015b82:	42a7      	cmp	r7, r4
 8015b84:	d1f5      	bne.n	8015b72 <__s2b+0x4e>
 8015b86:	002c      	movs	r4, r5
 8015b88:	9b00      	ldr	r3, [sp, #0]
 8015b8a:	3c08      	subs	r4, #8
 8015b8c:	191c      	adds	r4, r3, r4
 8015b8e:	002f      	movs	r7, r5
 8015b90:	9b01      	ldr	r3, [sp, #4]
 8015b92:	429f      	cmp	r7, r3
 8015b94:	db04      	blt.n	8015ba0 <__s2b+0x7c>
 8015b96:	0008      	movs	r0, r1
 8015b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015b9a:	2509      	movs	r5, #9
 8015b9c:	340a      	adds	r4, #10
 8015b9e:	e7f6      	b.n	8015b8e <__s2b+0x6a>
 8015ba0:	1b63      	subs	r3, r4, r5
 8015ba2:	5ddb      	ldrb	r3, [r3, r7]
 8015ba4:	220a      	movs	r2, #10
 8015ba6:	0030      	movs	r0, r6
 8015ba8:	3b30      	subs	r3, #48	; 0x30
 8015baa:	f7ff ff77 	bl	8015a9c <__multadd>
 8015bae:	3701      	adds	r7, #1
 8015bb0:	0001      	movs	r1, r0
 8015bb2:	e7ed      	b.n	8015b90 <__s2b+0x6c>
 8015bb4:	0801a989 	.word	0x0801a989
 8015bb8:	0801aa78 	.word	0x0801aa78

08015bbc <__hi0bits>:
 8015bbc:	0003      	movs	r3, r0
 8015bbe:	0c02      	lsrs	r2, r0, #16
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	4282      	cmp	r2, r0
 8015bc4:	d101      	bne.n	8015bca <__hi0bits+0xe>
 8015bc6:	041b      	lsls	r3, r3, #16
 8015bc8:	3010      	adds	r0, #16
 8015bca:	0e1a      	lsrs	r2, r3, #24
 8015bcc:	d101      	bne.n	8015bd2 <__hi0bits+0x16>
 8015bce:	3008      	adds	r0, #8
 8015bd0:	021b      	lsls	r3, r3, #8
 8015bd2:	0f1a      	lsrs	r2, r3, #28
 8015bd4:	d101      	bne.n	8015bda <__hi0bits+0x1e>
 8015bd6:	3004      	adds	r0, #4
 8015bd8:	011b      	lsls	r3, r3, #4
 8015bda:	0f9a      	lsrs	r2, r3, #30
 8015bdc:	d101      	bne.n	8015be2 <__hi0bits+0x26>
 8015bde:	3002      	adds	r0, #2
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	db03      	blt.n	8015bee <__hi0bits+0x32>
 8015be6:	3001      	adds	r0, #1
 8015be8:	005b      	lsls	r3, r3, #1
 8015bea:	d400      	bmi.n	8015bee <__hi0bits+0x32>
 8015bec:	2020      	movs	r0, #32
 8015bee:	4770      	bx	lr

08015bf0 <__lo0bits>:
 8015bf0:	6803      	ldr	r3, [r0, #0]
 8015bf2:	0002      	movs	r2, r0
 8015bf4:	2107      	movs	r1, #7
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	4008      	ands	r0, r1
 8015bfa:	420b      	tst	r3, r1
 8015bfc:	d00d      	beq.n	8015c1a <__lo0bits+0x2a>
 8015bfe:	3906      	subs	r1, #6
 8015c00:	2000      	movs	r0, #0
 8015c02:	420b      	tst	r3, r1
 8015c04:	d105      	bne.n	8015c12 <__lo0bits+0x22>
 8015c06:	3002      	adds	r0, #2
 8015c08:	4203      	tst	r3, r0
 8015c0a:	d003      	beq.n	8015c14 <__lo0bits+0x24>
 8015c0c:	40cb      	lsrs	r3, r1
 8015c0e:	0008      	movs	r0, r1
 8015c10:	6013      	str	r3, [r2, #0]
 8015c12:	4770      	bx	lr
 8015c14:	089b      	lsrs	r3, r3, #2
 8015c16:	6013      	str	r3, [r2, #0]
 8015c18:	e7fb      	b.n	8015c12 <__lo0bits+0x22>
 8015c1a:	b299      	uxth	r1, r3
 8015c1c:	2900      	cmp	r1, #0
 8015c1e:	d101      	bne.n	8015c24 <__lo0bits+0x34>
 8015c20:	2010      	movs	r0, #16
 8015c22:	0c1b      	lsrs	r3, r3, #16
 8015c24:	b2d9      	uxtb	r1, r3
 8015c26:	2900      	cmp	r1, #0
 8015c28:	d101      	bne.n	8015c2e <__lo0bits+0x3e>
 8015c2a:	3008      	adds	r0, #8
 8015c2c:	0a1b      	lsrs	r3, r3, #8
 8015c2e:	0719      	lsls	r1, r3, #28
 8015c30:	d101      	bne.n	8015c36 <__lo0bits+0x46>
 8015c32:	3004      	adds	r0, #4
 8015c34:	091b      	lsrs	r3, r3, #4
 8015c36:	0799      	lsls	r1, r3, #30
 8015c38:	d101      	bne.n	8015c3e <__lo0bits+0x4e>
 8015c3a:	3002      	adds	r0, #2
 8015c3c:	089b      	lsrs	r3, r3, #2
 8015c3e:	07d9      	lsls	r1, r3, #31
 8015c40:	d4e9      	bmi.n	8015c16 <__lo0bits+0x26>
 8015c42:	3001      	adds	r0, #1
 8015c44:	085b      	lsrs	r3, r3, #1
 8015c46:	d1e6      	bne.n	8015c16 <__lo0bits+0x26>
 8015c48:	2020      	movs	r0, #32
 8015c4a:	e7e2      	b.n	8015c12 <__lo0bits+0x22>

08015c4c <__i2b>:
 8015c4c:	b510      	push	{r4, lr}
 8015c4e:	000c      	movs	r4, r1
 8015c50:	2101      	movs	r1, #1
 8015c52:	f7ff fef1 	bl	8015a38 <_Balloc>
 8015c56:	2800      	cmp	r0, #0
 8015c58:	d106      	bne.n	8015c68 <__i2b+0x1c>
 8015c5a:	21a0      	movs	r1, #160	; 0xa0
 8015c5c:	0002      	movs	r2, r0
 8015c5e:	4b04      	ldr	r3, [pc, #16]	; (8015c70 <__i2b+0x24>)
 8015c60:	4804      	ldr	r0, [pc, #16]	; (8015c74 <__i2b+0x28>)
 8015c62:	0049      	lsls	r1, r1, #1
 8015c64:	f000 fc6a 	bl	801653c <__assert_func>
 8015c68:	2301      	movs	r3, #1
 8015c6a:	6144      	str	r4, [r0, #20]
 8015c6c:	6103      	str	r3, [r0, #16]
 8015c6e:	bd10      	pop	{r4, pc}
 8015c70:	0801a989 	.word	0x0801a989
 8015c74:	0801aa78 	.word	0x0801aa78

08015c78 <__multiply>:
 8015c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c7a:	690b      	ldr	r3, [r1, #16]
 8015c7c:	0014      	movs	r4, r2
 8015c7e:	6912      	ldr	r2, [r2, #16]
 8015c80:	000d      	movs	r5, r1
 8015c82:	b089      	sub	sp, #36	; 0x24
 8015c84:	4293      	cmp	r3, r2
 8015c86:	da01      	bge.n	8015c8c <__multiply+0x14>
 8015c88:	0025      	movs	r5, r4
 8015c8a:	000c      	movs	r4, r1
 8015c8c:	692f      	ldr	r7, [r5, #16]
 8015c8e:	6926      	ldr	r6, [r4, #16]
 8015c90:	6869      	ldr	r1, [r5, #4]
 8015c92:	19bb      	adds	r3, r7, r6
 8015c94:	9302      	str	r3, [sp, #8]
 8015c96:	68ab      	ldr	r3, [r5, #8]
 8015c98:	19ba      	adds	r2, r7, r6
 8015c9a:	4293      	cmp	r3, r2
 8015c9c:	da00      	bge.n	8015ca0 <__multiply+0x28>
 8015c9e:	3101      	adds	r1, #1
 8015ca0:	f7ff feca 	bl	8015a38 <_Balloc>
 8015ca4:	9001      	str	r0, [sp, #4]
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d106      	bne.n	8015cb8 <__multiply+0x40>
 8015caa:	215e      	movs	r1, #94	; 0x5e
 8015cac:	0002      	movs	r2, r0
 8015cae:	4b48      	ldr	r3, [pc, #288]	; (8015dd0 <__multiply+0x158>)
 8015cb0:	4848      	ldr	r0, [pc, #288]	; (8015dd4 <__multiply+0x15c>)
 8015cb2:	31ff      	adds	r1, #255	; 0xff
 8015cb4:	f000 fc42 	bl	801653c <__assert_func>
 8015cb8:	9b01      	ldr	r3, [sp, #4]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	3314      	adds	r3, #20
 8015cbe:	469c      	mov	ip, r3
 8015cc0:	19bb      	adds	r3, r7, r6
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	4463      	add	r3, ip
 8015cc6:	9303      	str	r3, [sp, #12]
 8015cc8:	4663      	mov	r3, ip
 8015cca:	9903      	ldr	r1, [sp, #12]
 8015ccc:	428b      	cmp	r3, r1
 8015cce:	d32c      	bcc.n	8015d2a <__multiply+0xb2>
 8015cd0:	002b      	movs	r3, r5
 8015cd2:	0022      	movs	r2, r4
 8015cd4:	3314      	adds	r3, #20
 8015cd6:	00bf      	lsls	r7, r7, #2
 8015cd8:	3214      	adds	r2, #20
 8015cda:	9306      	str	r3, [sp, #24]
 8015cdc:	00b6      	lsls	r6, r6, #2
 8015cde:	19db      	adds	r3, r3, r7
 8015ce0:	9304      	str	r3, [sp, #16]
 8015ce2:	1993      	adds	r3, r2, r6
 8015ce4:	9307      	str	r3, [sp, #28]
 8015ce6:	2304      	movs	r3, #4
 8015ce8:	9305      	str	r3, [sp, #20]
 8015cea:	002b      	movs	r3, r5
 8015cec:	9904      	ldr	r1, [sp, #16]
 8015cee:	3315      	adds	r3, #21
 8015cf0:	9200      	str	r2, [sp, #0]
 8015cf2:	4299      	cmp	r1, r3
 8015cf4:	d305      	bcc.n	8015d02 <__multiply+0x8a>
 8015cf6:	1b4b      	subs	r3, r1, r5
 8015cf8:	3b15      	subs	r3, #21
 8015cfa:	089b      	lsrs	r3, r3, #2
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	009b      	lsls	r3, r3, #2
 8015d00:	9305      	str	r3, [sp, #20]
 8015d02:	9b07      	ldr	r3, [sp, #28]
 8015d04:	9a00      	ldr	r2, [sp, #0]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d311      	bcc.n	8015d2e <__multiply+0xb6>
 8015d0a:	9b02      	ldr	r3, [sp, #8]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	dd06      	ble.n	8015d1e <__multiply+0xa6>
 8015d10:	9b03      	ldr	r3, [sp, #12]
 8015d12:	3b04      	subs	r3, #4
 8015d14:	9303      	str	r3, [sp, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d054      	beq.n	8015dc8 <__multiply+0x150>
 8015d1e:	9b01      	ldr	r3, [sp, #4]
 8015d20:	9a02      	ldr	r2, [sp, #8]
 8015d22:	0018      	movs	r0, r3
 8015d24:	611a      	str	r2, [r3, #16]
 8015d26:	b009      	add	sp, #36	; 0x24
 8015d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d2a:	c304      	stmia	r3!, {r2}
 8015d2c:	e7cd      	b.n	8015cca <__multiply+0x52>
 8015d2e:	9b00      	ldr	r3, [sp, #0]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	b298      	uxth	r0, r3
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d01c      	beq.n	8015d72 <__multiply+0xfa>
 8015d38:	4667      	mov	r7, ip
 8015d3a:	2400      	movs	r4, #0
 8015d3c:	9e06      	ldr	r6, [sp, #24]
 8015d3e:	ce02      	ldmia	r6!, {r1}
 8015d40:	683a      	ldr	r2, [r7, #0]
 8015d42:	b28b      	uxth	r3, r1
 8015d44:	4343      	muls	r3, r0
 8015d46:	0c09      	lsrs	r1, r1, #16
 8015d48:	4341      	muls	r1, r0
 8015d4a:	b292      	uxth	r2, r2
 8015d4c:	189b      	adds	r3, r3, r2
 8015d4e:	191b      	adds	r3, r3, r4
 8015d50:	000c      	movs	r4, r1
 8015d52:	683a      	ldr	r2, [r7, #0]
 8015d54:	0c11      	lsrs	r1, r2, #16
 8015d56:	1861      	adds	r1, r4, r1
 8015d58:	0c1c      	lsrs	r4, r3, #16
 8015d5a:	1909      	adds	r1, r1, r4
 8015d5c:	0c0c      	lsrs	r4, r1, #16
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	0409      	lsls	r1, r1, #16
 8015d62:	430b      	orrs	r3, r1
 8015d64:	c708      	stmia	r7!, {r3}
 8015d66:	9b04      	ldr	r3, [sp, #16]
 8015d68:	42b3      	cmp	r3, r6
 8015d6a:	d8e8      	bhi.n	8015d3e <__multiply+0xc6>
 8015d6c:	4663      	mov	r3, ip
 8015d6e:	9a05      	ldr	r2, [sp, #20]
 8015d70:	509c      	str	r4, [r3, r2]
 8015d72:	9b00      	ldr	r3, [sp, #0]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	0c1e      	lsrs	r6, r3, #16
 8015d78:	d020      	beq.n	8015dbc <__multiply+0x144>
 8015d7a:	4663      	mov	r3, ip
 8015d7c:	002c      	movs	r4, r5
 8015d7e:	4660      	mov	r0, ip
 8015d80:	2700      	movs	r7, #0
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	3414      	adds	r4, #20
 8015d86:	6822      	ldr	r2, [r4, #0]
 8015d88:	b29b      	uxth	r3, r3
 8015d8a:	b291      	uxth	r1, r2
 8015d8c:	4371      	muls	r1, r6
 8015d8e:	6802      	ldr	r2, [r0, #0]
 8015d90:	0c12      	lsrs	r2, r2, #16
 8015d92:	1889      	adds	r1, r1, r2
 8015d94:	19cf      	adds	r7, r1, r7
 8015d96:	0439      	lsls	r1, r7, #16
 8015d98:	430b      	orrs	r3, r1
 8015d9a:	6003      	str	r3, [r0, #0]
 8015d9c:	cc02      	ldmia	r4!, {r1}
 8015d9e:	6843      	ldr	r3, [r0, #4]
 8015da0:	0c09      	lsrs	r1, r1, #16
 8015da2:	4371      	muls	r1, r6
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	0c3f      	lsrs	r7, r7, #16
 8015da8:	18cb      	adds	r3, r1, r3
 8015daa:	9a04      	ldr	r2, [sp, #16]
 8015dac:	19db      	adds	r3, r3, r7
 8015dae:	0c1f      	lsrs	r7, r3, #16
 8015db0:	3004      	adds	r0, #4
 8015db2:	42a2      	cmp	r2, r4
 8015db4:	d8e7      	bhi.n	8015d86 <__multiply+0x10e>
 8015db6:	4662      	mov	r2, ip
 8015db8:	9905      	ldr	r1, [sp, #20]
 8015dba:	5053      	str	r3, [r2, r1]
 8015dbc:	9b00      	ldr	r3, [sp, #0]
 8015dbe:	3304      	adds	r3, #4
 8015dc0:	9300      	str	r3, [sp, #0]
 8015dc2:	2304      	movs	r3, #4
 8015dc4:	449c      	add	ip, r3
 8015dc6:	e79c      	b.n	8015d02 <__multiply+0x8a>
 8015dc8:	9b02      	ldr	r3, [sp, #8]
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	9302      	str	r3, [sp, #8]
 8015dce:	e79c      	b.n	8015d0a <__multiply+0x92>
 8015dd0:	0801a989 	.word	0x0801a989
 8015dd4:	0801aa78 	.word	0x0801aa78

08015dd8 <__pow5mult>:
 8015dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dda:	2303      	movs	r3, #3
 8015ddc:	0015      	movs	r5, r2
 8015dde:	0007      	movs	r7, r0
 8015de0:	000e      	movs	r6, r1
 8015de2:	401a      	ands	r2, r3
 8015de4:	421d      	tst	r5, r3
 8015de6:	d008      	beq.n	8015dfa <__pow5mult+0x22>
 8015de8:	491a      	ldr	r1, [pc, #104]	; (8015e54 <__pow5mult+0x7c>)
 8015dea:	3a01      	subs	r2, #1
 8015dec:	0092      	lsls	r2, r2, #2
 8015dee:	5852      	ldr	r2, [r2, r1]
 8015df0:	2300      	movs	r3, #0
 8015df2:	0031      	movs	r1, r6
 8015df4:	f7ff fe52 	bl	8015a9c <__multadd>
 8015df8:	0006      	movs	r6, r0
 8015dfa:	10ad      	asrs	r5, r5, #2
 8015dfc:	d027      	beq.n	8015e4e <__pow5mult+0x76>
 8015dfe:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8015e00:	2c00      	cmp	r4, #0
 8015e02:	d107      	bne.n	8015e14 <__pow5mult+0x3c>
 8015e04:	0038      	movs	r0, r7
 8015e06:	4914      	ldr	r1, [pc, #80]	; (8015e58 <__pow5mult+0x80>)
 8015e08:	f7ff ff20 	bl	8015c4c <__i2b>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	0004      	movs	r4, r0
 8015e10:	64b8      	str	r0, [r7, #72]	; 0x48
 8015e12:	6003      	str	r3, [r0, #0]
 8015e14:	2301      	movs	r3, #1
 8015e16:	421d      	tst	r5, r3
 8015e18:	d00a      	beq.n	8015e30 <__pow5mult+0x58>
 8015e1a:	0031      	movs	r1, r6
 8015e1c:	0022      	movs	r2, r4
 8015e1e:	0038      	movs	r0, r7
 8015e20:	f7ff ff2a 	bl	8015c78 <__multiply>
 8015e24:	0031      	movs	r1, r6
 8015e26:	9001      	str	r0, [sp, #4]
 8015e28:	0038      	movs	r0, r7
 8015e2a:	f7ff fe2d 	bl	8015a88 <_Bfree>
 8015e2e:	9e01      	ldr	r6, [sp, #4]
 8015e30:	106d      	asrs	r5, r5, #1
 8015e32:	d00c      	beq.n	8015e4e <__pow5mult+0x76>
 8015e34:	6820      	ldr	r0, [r4, #0]
 8015e36:	2800      	cmp	r0, #0
 8015e38:	d107      	bne.n	8015e4a <__pow5mult+0x72>
 8015e3a:	0022      	movs	r2, r4
 8015e3c:	0021      	movs	r1, r4
 8015e3e:	0038      	movs	r0, r7
 8015e40:	f7ff ff1a 	bl	8015c78 <__multiply>
 8015e44:	2300      	movs	r3, #0
 8015e46:	6020      	str	r0, [r4, #0]
 8015e48:	6003      	str	r3, [r0, #0]
 8015e4a:	0004      	movs	r4, r0
 8015e4c:	e7e2      	b.n	8015e14 <__pow5mult+0x3c>
 8015e4e:	0030      	movs	r0, r6
 8015e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015e52:	46c0      	nop			; (mov r8, r8)
 8015e54:	0801abc8 	.word	0x0801abc8
 8015e58:	00000271 	.word	0x00000271

08015e5c <__lshift>:
 8015e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e5e:	000c      	movs	r4, r1
 8015e60:	0017      	movs	r7, r2
 8015e62:	6923      	ldr	r3, [r4, #16]
 8015e64:	1155      	asrs	r5, r2, #5
 8015e66:	b087      	sub	sp, #28
 8015e68:	18eb      	adds	r3, r5, r3
 8015e6a:	9302      	str	r3, [sp, #8]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	9301      	str	r3, [sp, #4]
 8015e70:	6849      	ldr	r1, [r1, #4]
 8015e72:	68a3      	ldr	r3, [r4, #8]
 8015e74:	9004      	str	r0, [sp, #16]
 8015e76:	9a01      	ldr	r2, [sp, #4]
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	db11      	blt.n	8015ea0 <__lshift+0x44>
 8015e7c:	9804      	ldr	r0, [sp, #16]
 8015e7e:	f7ff fddb 	bl	8015a38 <_Balloc>
 8015e82:	0002      	movs	r2, r0
 8015e84:	2300      	movs	r3, #0
 8015e86:	3214      	adds	r2, #20
 8015e88:	0006      	movs	r6, r0
 8015e8a:	0011      	movs	r1, r2
 8015e8c:	9203      	str	r2, [sp, #12]
 8015e8e:	4298      	cmp	r0, r3
 8015e90:	d10d      	bne.n	8015eae <__lshift+0x52>
 8015e92:	21da      	movs	r1, #218	; 0xda
 8015e94:	0002      	movs	r2, r0
 8015e96:	4b27      	ldr	r3, [pc, #156]	; (8015f34 <__lshift+0xd8>)
 8015e98:	4827      	ldr	r0, [pc, #156]	; (8015f38 <__lshift+0xdc>)
 8015e9a:	31ff      	adds	r1, #255	; 0xff
 8015e9c:	f000 fb4e 	bl	801653c <__assert_func>
 8015ea0:	3101      	adds	r1, #1
 8015ea2:	005b      	lsls	r3, r3, #1
 8015ea4:	e7e7      	b.n	8015e76 <__lshift+0x1a>
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	0098      	lsls	r0, r3, #2
 8015eaa:	500a      	str	r2, [r1, r0]
 8015eac:	3301      	adds	r3, #1
 8015eae:	42ab      	cmp	r3, r5
 8015eb0:	dbf9      	blt.n	8015ea6 <__lshift+0x4a>
 8015eb2:	43eb      	mvns	r3, r5
 8015eb4:	17db      	asrs	r3, r3, #31
 8015eb6:	401d      	ands	r5, r3
 8015eb8:	9b03      	ldr	r3, [sp, #12]
 8015eba:	00ad      	lsls	r5, r5, #2
 8015ebc:	211f      	movs	r1, #31
 8015ebe:	0038      	movs	r0, r7
 8015ec0:	195d      	adds	r5, r3, r5
 8015ec2:	0023      	movs	r3, r4
 8015ec4:	6922      	ldr	r2, [r4, #16]
 8015ec6:	3314      	adds	r3, #20
 8015ec8:	0092      	lsls	r2, r2, #2
 8015eca:	4008      	ands	r0, r1
 8015ecc:	4684      	mov	ip, r0
 8015ece:	189a      	adds	r2, r3, r2
 8015ed0:	420f      	tst	r7, r1
 8015ed2:	d02a      	beq.n	8015f2a <__lshift+0xce>
 8015ed4:	3101      	adds	r1, #1
 8015ed6:	1a09      	subs	r1, r1, r0
 8015ed8:	9105      	str	r1, [sp, #20]
 8015eda:	2100      	movs	r1, #0
 8015edc:	9503      	str	r5, [sp, #12]
 8015ede:	4667      	mov	r7, ip
 8015ee0:	6818      	ldr	r0, [r3, #0]
 8015ee2:	40b8      	lsls	r0, r7
 8015ee4:	4301      	orrs	r1, r0
 8015ee6:	9803      	ldr	r0, [sp, #12]
 8015ee8:	c002      	stmia	r0!, {r1}
 8015eea:	cb02      	ldmia	r3!, {r1}
 8015eec:	9003      	str	r0, [sp, #12]
 8015eee:	9805      	ldr	r0, [sp, #20]
 8015ef0:	40c1      	lsrs	r1, r0
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d8f3      	bhi.n	8015ede <__lshift+0x82>
 8015ef6:	0020      	movs	r0, r4
 8015ef8:	3015      	adds	r0, #21
 8015efa:	2304      	movs	r3, #4
 8015efc:	4282      	cmp	r2, r0
 8015efe:	d304      	bcc.n	8015f0a <__lshift+0xae>
 8015f00:	1b13      	subs	r3, r2, r4
 8015f02:	3b15      	subs	r3, #21
 8015f04:	089b      	lsrs	r3, r3, #2
 8015f06:	3301      	adds	r3, #1
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	50e9      	str	r1, [r5, r3]
 8015f0c:	2900      	cmp	r1, #0
 8015f0e:	d002      	beq.n	8015f16 <__lshift+0xba>
 8015f10:	9b02      	ldr	r3, [sp, #8]
 8015f12:	3302      	adds	r3, #2
 8015f14:	9301      	str	r3, [sp, #4]
 8015f16:	9b01      	ldr	r3, [sp, #4]
 8015f18:	9804      	ldr	r0, [sp, #16]
 8015f1a:	3b01      	subs	r3, #1
 8015f1c:	0021      	movs	r1, r4
 8015f1e:	6133      	str	r3, [r6, #16]
 8015f20:	f7ff fdb2 	bl	8015a88 <_Bfree>
 8015f24:	0030      	movs	r0, r6
 8015f26:	b007      	add	sp, #28
 8015f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f2a:	cb02      	ldmia	r3!, {r1}
 8015f2c:	c502      	stmia	r5!, {r1}
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d8fb      	bhi.n	8015f2a <__lshift+0xce>
 8015f32:	e7f0      	b.n	8015f16 <__lshift+0xba>
 8015f34:	0801a989 	.word	0x0801a989
 8015f38:	0801aa78 	.word	0x0801aa78

08015f3c <__mcmp>:
 8015f3c:	6902      	ldr	r2, [r0, #16]
 8015f3e:	690b      	ldr	r3, [r1, #16]
 8015f40:	b530      	push	{r4, r5, lr}
 8015f42:	0004      	movs	r4, r0
 8015f44:	1ad0      	subs	r0, r2, r3
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d10d      	bne.n	8015f66 <__mcmp+0x2a>
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	3414      	adds	r4, #20
 8015f4e:	3114      	adds	r1, #20
 8015f50:	18e2      	adds	r2, r4, r3
 8015f52:	18c9      	adds	r1, r1, r3
 8015f54:	3a04      	subs	r2, #4
 8015f56:	3904      	subs	r1, #4
 8015f58:	6815      	ldr	r5, [r2, #0]
 8015f5a:	680b      	ldr	r3, [r1, #0]
 8015f5c:	429d      	cmp	r5, r3
 8015f5e:	d003      	beq.n	8015f68 <__mcmp+0x2c>
 8015f60:	2001      	movs	r0, #1
 8015f62:	429d      	cmp	r5, r3
 8015f64:	d303      	bcc.n	8015f6e <__mcmp+0x32>
 8015f66:	bd30      	pop	{r4, r5, pc}
 8015f68:	4294      	cmp	r4, r2
 8015f6a:	d3f3      	bcc.n	8015f54 <__mcmp+0x18>
 8015f6c:	e7fb      	b.n	8015f66 <__mcmp+0x2a>
 8015f6e:	4240      	negs	r0, r0
 8015f70:	e7f9      	b.n	8015f66 <__mcmp+0x2a>
	...

08015f74 <__mdiff>:
 8015f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f76:	000e      	movs	r6, r1
 8015f78:	0007      	movs	r7, r0
 8015f7a:	0011      	movs	r1, r2
 8015f7c:	0030      	movs	r0, r6
 8015f7e:	b087      	sub	sp, #28
 8015f80:	0014      	movs	r4, r2
 8015f82:	f7ff ffdb 	bl	8015f3c <__mcmp>
 8015f86:	1e05      	subs	r5, r0, #0
 8015f88:	d110      	bne.n	8015fac <__mdiff+0x38>
 8015f8a:	0001      	movs	r1, r0
 8015f8c:	0038      	movs	r0, r7
 8015f8e:	f7ff fd53 	bl	8015a38 <_Balloc>
 8015f92:	1e02      	subs	r2, r0, #0
 8015f94:	d104      	bne.n	8015fa0 <__mdiff+0x2c>
 8015f96:	4b40      	ldr	r3, [pc, #256]	; (8016098 <__mdiff+0x124>)
 8015f98:	4940      	ldr	r1, [pc, #256]	; (801609c <__mdiff+0x128>)
 8015f9a:	4841      	ldr	r0, [pc, #260]	; (80160a0 <__mdiff+0x12c>)
 8015f9c:	f000 face 	bl	801653c <__assert_func>
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	6145      	str	r5, [r0, #20]
 8015fa4:	6103      	str	r3, [r0, #16]
 8015fa6:	0010      	movs	r0, r2
 8015fa8:	b007      	add	sp, #28
 8015faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fac:	2301      	movs	r3, #1
 8015fae:	9301      	str	r3, [sp, #4]
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	db04      	blt.n	8015fbe <__mdiff+0x4a>
 8015fb4:	0023      	movs	r3, r4
 8015fb6:	0034      	movs	r4, r6
 8015fb8:	001e      	movs	r6, r3
 8015fba:	2300      	movs	r3, #0
 8015fbc:	9301      	str	r3, [sp, #4]
 8015fbe:	0038      	movs	r0, r7
 8015fc0:	6861      	ldr	r1, [r4, #4]
 8015fc2:	f7ff fd39 	bl	8015a38 <_Balloc>
 8015fc6:	1e02      	subs	r2, r0, #0
 8015fc8:	d103      	bne.n	8015fd2 <__mdiff+0x5e>
 8015fca:	2190      	movs	r1, #144	; 0x90
 8015fcc:	4b32      	ldr	r3, [pc, #200]	; (8016098 <__mdiff+0x124>)
 8015fce:	0089      	lsls	r1, r1, #2
 8015fd0:	e7e3      	b.n	8015f9a <__mdiff+0x26>
 8015fd2:	9b01      	ldr	r3, [sp, #4]
 8015fd4:	2700      	movs	r7, #0
 8015fd6:	60c3      	str	r3, [r0, #12]
 8015fd8:	6920      	ldr	r0, [r4, #16]
 8015fda:	3414      	adds	r4, #20
 8015fdc:	9401      	str	r4, [sp, #4]
 8015fde:	9b01      	ldr	r3, [sp, #4]
 8015fe0:	0084      	lsls	r4, r0, #2
 8015fe2:	191b      	adds	r3, r3, r4
 8015fe4:	0034      	movs	r4, r6
 8015fe6:	9302      	str	r3, [sp, #8]
 8015fe8:	6933      	ldr	r3, [r6, #16]
 8015fea:	3414      	adds	r4, #20
 8015fec:	0099      	lsls	r1, r3, #2
 8015fee:	1863      	adds	r3, r4, r1
 8015ff0:	9303      	str	r3, [sp, #12]
 8015ff2:	0013      	movs	r3, r2
 8015ff4:	3314      	adds	r3, #20
 8015ff6:	469c      	mov	ip, r3
 8015ff8:	9305      	str	r3, [sp, #20]
 8015ffa:	9b01      	ldr	r3, [sp, #4]
 8015ffc:	9304      	str	r3, [sp, #16]
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	cc02      	ldmia	r4!, {r1}
 8016002:	cb20      	ldmia	r3!, {r5}
 8016004:	9304      	str	r3, [sp, #16]
 8016006:	b2ab      	uxth	r3, r5
 8016008:	19df      	adds	r7, r3, r7
 801600a:	b28b      	uxth	r3, r1
 801600c:	1afb      	subs	r3, r7, r3
 801600e:	0c2d      	lsrs	r5, r5, #16
 8016010:	0c09      	lsrs	r1, r1, #16
 8016012:	1a69      	subs	r1, r5, r1
 8016014:	141d      	asrs	r5, r3, #16
 8016016:	1949      	adds	r1, r1, r5
 8016018:	140f      	asrs	r7, r1, #16
 801601a:	b29b      	uxth	r3, r3
 801601c:	0409      	lsls	r1, r1, #16
 801601e:	430b      	orrs	r3, r1
 8016020:	4661      	mov	r1, ip
 8016022:	c108      	stmia	r1!, {r3}
 8016024:	9b03      	ldr	r3, [sp, #12]
 8016026:	468c      	mov	ip, r1
 8016028:	42a3      	cmp	r3, r4
 801602a:	d8e8      	bhi.n	8015ffe <__mdiff+0x8a>
 801602c:	0031      	movs	r1, r6
 801602e:	9c03      	ldr	r4, [sp, #12]
 8016030:	3115      	adds	r1, #21
 8016032:	2304      	movs	r3, #4
 8016034:	428c      	cmp	r4, r1
 8016036:	d304      	bcc.n	8016042 <__mdiff+0xce>
 8016038:	1ba3      	subs	r3, r4, r6
 801603a:	3b15      	subs	r3, #21
 801603c:	089b      	lsrs	r3, r3, #2
 801603e:	3301      	adds	r3, #1
 8016040:	009b      	lsls	r3, r3, #2
 8016042:	9901      	ldr	r1, [sp, #4]
 8016044:	18cc      	adds	r4, r1, r3
 8016046:	9905      	ldr	r1, [sp, #20]
 8016048:	0026      	movs	r6, r4
 801604a:	18cb      	adds	r3, r1, r3
 801604c:	469c      	mov	ip, r3
 801604e:	9902      	ldr	r1, [sp, #8]
 8016050:	428e      	cmp	r6, r1
 8016052:	d310      	bcc.n	8016076 <__mdiff+0x102>
 8016054:	9e02      	ldr	r6, [sp, #8]
 8016056:	1ee5      	subs	r5, r4, #3
 8016058:	2100      	movs	r1, #0
 801605a:	42ae      	cmp	r6, r5
 801605c:	d304      	bcc.n	8016068 <__mdiff+0xf4>
 801605e:	0031      	movs	r1, r6
 8016060:	3103      	adds	r1, #3
 8016062:	1b09      	subs	r1, r1, r4
 8016064:	0889      	lsrs	r1, r1, #2
 8016066:	0089      	lsls	r1, r1, #2
 8016068:	185b      	adds	r3, r3, r1
 801606a:	3b04      	subs	r3, #4
 801606c:	6819      	ldr	r1, [r3, #0]
 801606e:	2900      	cmp	r1, #0
 8016070:	d00f      	beq.n	8016092 <__mdiff+0x11e>
 8016072:	6110      	str	r0, [r2, #16]
 8016074:	e797      	b.n	8015fa6 <__mdiff+0x32>
 8016076:	ce02      	ldmia	r6!, {r1}
 8016078:	b28d      	uxth	r5, r1
 801607a:	19ed      	adds	r5, r5, r7
 801607c:	0c0f      	lsrs	r7, r1, #16
 801607e:	1429      	asrs	r1, r5, #16
 8016080:	1879      	adds	r1, r7, r1
 8016082:	140f      	asrs	r7, r1, #16
 8016084:	b2ad      	uxth	r5, r5
 8016086:	0409      	lsls	r1, r1, #16
 8016088:	430d      	orrs	r5, r1
 801608a:	4661      	mov	r1, ip
 801608c:	c120      	stmia	r1!, {r5}
 801608e:	468c      	mov	ip, r1
 8016090:	e7dd      	b.n	801604e <__mdiff+0xda>
 8016092:	3801      	subs	r0, #1
 8016094:	e7e9      	b.n	801606a <__mdiff+0xf6>
 8016096:	46c0      	nop			; (mov r8, r8)
 8016098:	0801a989 	.word	0x0801a989
 801609c:	00000232 	.word	0x00000232
 80160a0:	0801aa78 	.word	0x0801aa78

080160a4 <__ulp>:
 80160a4:	4b0f      	ldr	r3, [pc, #60]	; (80160e4 <__ulp+0x40>)
 80160a6:	4019      	ands	r1, r3
 80160a8:	4b0f      	ldr	r3, [pc, #60]	; (80160e8 <__ulp+0x44>)
 80160aa:	18c9      	adds	r1, r1, r3
 80160ac:	2900      	cmp	r1, #0
 80160ae:	dd04      	ble.n	80160ba <__ulp+0x16>
 80160b0:	2200      	movs	r2, #0
 80160b2:	000b      	movs	r3, r1
 80160b4:	0010      	movs	r0, r2
 80160b6:	0019      	movs	r1, r3
 80160b8:	4770      	bx	lr
 80160ba:	4249      	negs	r1, r1
 80160bc:	2200      	movs	r2, #0
 80160be:	2300      	movs	r3, #0
 80160c0:	1509      	asrs	r1, r1, #20
 80160c2:	2913      	cmp	r1, #19
 80160c4:	dc04      	bgt.n	80160d0 <__ulp+0x2c>
 80160c6:	2080      	movs	r0, #128	; 0x80
 80160c8:	0300      	lsls	r0, r0, #12
 80160ca:	4108      	asrs	r0, r1
 80160cc:	0003      	movs	r3, r0
 80160ce:	e7f1      	b.n	80160b4 <__ulp+0x10>
 80160d0:	3914      	subs	r1, #20
 80160d2:	2001      	movs	r0, #1
 80160d4:	291e      	cmp	r1, #30
 80160d6:	dc02      	bgt.n	80160de <__ulp+0x3a>
 80160d8:	2080      	movs	r0, #128	; 0x80
 80160da:	0600      	lsls	r0, r0, #24
 80160dc:	40c8      	lsrs	r0, r1
 80160de:	0002      	movs	r2, r0
 80160e0:	e7e8      	b.n	80160b4 <__ulp+0x10>
 80160e2:	46c0      	nop			; (mov r8, r8)
 80160e4:	7ff00000 	.word	0x7ff00000
 80160e8:	fcc00000 	.word	0xfcc00000

080160ec <__b2d>:
 80160ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160ee:	0006      	movs	r6, r0
 80160f0:	6903      	ldr	r3, [r0, #16]
 80160f2:	3614      	adds	r6, #20
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	18f3      	adds	r3, r6, r3
 80160f8:	1f1d      	subs	r5, r3, #4
 80160fa:	682c      	ldr	r4, [r5, #0]
 80160fc:	000f      	movs	r7, r1
 80160fe:	0020      	movs	r0, r4
 8016100:	9301      	str	r3, [sp, #4]
 8016102:	f7ff fd5b 	bl	8015bbc <__hi0bits>
 8016106:	2320      	movs	r3, #32
 8016108:	1a1b      	subs	r3, r3, r0
 801610a:	491f      	ldr	r1, [pc, #124]	; (8016188 <__b2d+0x9c>)
 801610c:	603b      	str	r3, [r7, #0]
 801610e:	280a      	cmp	r0, #10
 8016110:	dc16      	bgt.n	8016140 <__b2d+0x54>
 8016112:	230b      	movs	r3, #11
 8016114:	0027      	movs	r7, r4
 8016116:	1a1b      	subs	r3, r3, r0
 8016118:	40df      	lsrs	r7, r3
 801611a:	4339      	orrs	r1, r7
 801611c:	469c      	mov	ip, r3
 801611e:	000b      	movs	r3, r1
 8016120:	2100      	movs	r1, #0
 8016122:	42ae      	cmp	r6, r5
 8016124:	d202      	bcs.n	801612c <__b2d+0x40>
 8016126:	9901      	ldr	r1, [sp, #4]
 8016128:	3908      	subs	r1, #8
 801612a:	6809      	ldr	r1, [r1, #0]
 801612c:	3015      	adds	r0, #21
 801612e:	4084      	lsls	r4, r0
 8016130:	4660      	mov	r0, ip
 8016132:	40c1      	lsrs	r1, r0
 8016134:	430c      	orrs	r4, r1
 8016136:	0022      	movs	r2, r4
 8016138:	0010      	movs	r0, r2
 801613a:	0019      	movs	r1, r3
 801613c:	b003      	add	sp, #12
 801613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016140:	2700      	movs	r7, #0
 8016142:	42ae      	cmp	r6, r5
 8016144:	d202      	bcs.n	801614c <__b2d+0x60>
 8016146:	9d01      	ldr	r5, [sp, #4]
 8016148:	3d08      	subs	r5, #8
 801614a:	682f      	ldr	r7, [r5, #0]
 801614c:	230b      	movs	r3, #11
 801614e:	425b      	negs	r3, r3
 8016150:	469c      	mov	ip, r3
 8016152:	4484      	add	ip, r0
 8016154:	280b      	cmp	r0, #11
 8016156:	d013      	beq.n	8016180 <__b2d+0x94>
 8016158:	4663      	mov	r3, ip
 801615a:	2020      	movs	r0, #32
 801615c:	409c      	lsls	r4, r3
 801615e:	1ac0      	subs	r0, r0, r3
 8016160:	003b      	movs	r3, r7
 8016162:	40c3      	lsrs	r3, r0
 8016164:	431c      	orrs	r4, r3
 8016166:	4321      	orrs	r1, r4
 8016168:	000b      	movs	r3, r1
 801616a:	2100      	movs	r1, #0
 801616c:	42b5      	cmp	r5, r6
 801616e:	d901      	bls.n	8016174 <__b2d+0x88>
 8016170:	3d04      	subs	r5, #4
 8016172:	6829      	ldr	r1, [r5, #0]
 8016174:	4664      	mov	r4, ip
 8016176:	40c1      	lsrs	r1, r0
 8016178:	40a7      	lsls	r7, r4
 801617a:	430f      	orrs	r7, r1
 801617c:	003a      	movs	r2, r7
 801617e:	e7db      	b.n	8016138 <__b2d+0x4c>
 8016180:	4321      	orrs	r1, r4
 8016182:	000b      	movs	r3, r1
 8016184:	e7fa      	b.n	801617c <__b2d+0x90>
 8016186:	46c0      	nop			; (mov r8, r8)
 8016188:	3ff00000 	.word	0x3ff00000

0801618c <__d2b>:
 801618c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801618e:	2101      	movs	r1, #1
 8016190:	0014      	movs	r4, r2
 8016192:	001e      	movs	r6, r3
 8016194:	9f08      	ldr	r7, [sp, #32]
 8016196:	f7ff fc4f 	bl	8015a38 <_Balloc>
 801619a:	1e05      	subs	r5, r0, #0
 801619c:	d105      	bne.n	80161aa <__d2b+0x1e>
 801619e:	0002      	movs	r2, r0
 80161a0:	4b26      	ldr	r3, [pc, #152]	; (801623c <__d2b+0xb0>)
 80161a2:	4927      	ldr	r1, [pc, #156]	; (8016240 <__d2b+0xb4>)
 80161a4:	4827      	ldr	r0, [pc, #156]	; (8016244 <__d2b+0xb8>)
 80161a6:	f000 f9c9 	bl	801653c <__assert_func>
 80161aa:	0333      	lsls	r3, r6, #12
 80161ac:	0076      	lsls	r6, r6, #1
 80161ae:	0b1b      	lsrs	r3, r3, #12
 80161b0:	0d76      	lsrs	r6, r6, #21
 80161b2:	d124      	bne.n	80161fe <__d2b+0x72>
 80161b4:	9301      	str	r3, [sp, #4]
 80161b6:	2c00      	cmp	r4, #0
 80161b8:	d027      	beq.n	801620a <__d2b+0x7e>
 80161ba:	4668      	mov	r0, sp
 80161bc:	9400      	str	r4, [sp, #0]
 80161be:	f7ff fd17 	bl	8015bf0 <__lo0bits>
 80161c2:	9c00      	ldr	r4, [sp, #0]
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d01e      	beq.n	8016206 <__d2b+0x7a>
 80161c8:	9b01      	ldr	r3, [sp, #4]
 80161ca:	2120      	movs	r1, #32
 80161cc:	001a      	movs	r2, r3
 80161ce:	1a09      	subs	r1, r1, r0
 80161d0:	408a      	lsls	r2, r1
 80161d2:	40c3      	lsrs	r3, r0
 80161d4:	4322      	orrs	r2, r4
 80161d6:	616a      	str	r2, [r5, #20]
 80161d8:	9301      	str	r3, [sp, #4]
 80161da:	9c01      	ldr	r4, [sp, #4]
 80161dc:	61ac      	str	r4, [r5, #24]
 80161de:	1e63      	subs	r3, r4, #1
 80161e0:	419c      	sbcs	r4, r3
 80161e2:	3401      	adds	r4, #1
 80161e4:	612c      	str	r4, [r5, #16]
 80161e6:	2e00      	cmp	r6, #0
 80161e8:	d018      	beq.n	801621c <__d2b+0x90>
 80161ea:	4b17      	ldr	r3, [pc, #92]	; (8016248 <__d2b+0xbc>)
 80161ec:	18f6      	adds	r6, r6, r3
 80161ee:	2335      	movs	r3, #53	; 0x35
 80161f0:	1836      	adds	r6, r6, r0
 80161f2:	1a18      	subs	r0, r3, r0
 80161f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161f6:	603e      	str	r6, [r7, #0]
 80161f8:	6018      	str	r0, [r3, #0]
 80161fa:	0028      	movs	r0, r5
 80161fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80161fe:	2280      	movs	r2, #128	; 0x80
 8016200:	0352      	lsls	r2, r2, #13
 8016202:	4313      	orrs	r3, r2
 8016204:	e7d6      	b.n	80161b4 <__d2b+0x28>
 8016206:	616c      	str	r4, [r5, #20]
 8016208:	e7e7      	b.n	80161da <__d2b+0x4e>
 801620a:	a801      	add	r0, sp, #4
 801620c:	f7ff fcf0 	bl	8015bf0 <__lo0bits>
 8016210:	2401      	movs	r4, #1
 8016212:	9b01      	ldr	r3, [sp, #4]
 8016214:	612c      	str	r4, [r5, #16]
 8016216:	616b      	str	r3, [r5, #20]
 8016218:	3020      	adds	r0, #32
 801621a:	e7e4      	b.n	80161e6 <__d2b+0x5a>
 801621c:	4b0b      	ldr	r3, [pc, #44]	; (801624c <__d2b+0xc0>)
 801621e:	18c0      	adds	r0, r0, r3
 8016220:	4b0b      	ldr	r3, [pc, #44]	; (8016250 <__d2b+0xc4>)
 8016222:	6038      	str	r0, [r7, #0]
 8016224:	18e3      	adds	r3, r4, r3
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	18eb      	adds	r3, r5, r3
 801622a:	6958      	ldr	r0, [r3, #20]
 801622c:	f7ff fcc6 	bl	8015bbc <__hi0bits>
 8016230:	0164      	lsls	r4, r4, #5
 8016232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016234:	1a24      	subs	r4, r4, r0
 8016236:	601c      	str	r4, [r3, #0]
 8016238:	e7df      	b.n	80161fa <__d2b+0x6e>
 801623a:	46c0      	nop			; (mov r8, r8)
 801623c:	0801a989 	.word	0x0801a989
 8016240:	0000030a 	.word	0x0000030a
 8016244:	0801aa78 	.word	0x0801aa78
 8016248:	fffffbcd 	.word	0xfffffbcd
 801624c:	fffffbce 	.word	0xfffffbce
 8016250:	3fffffff 	.word	0x3fffffff

08016254 <__ratio>:
 8016254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016256:	b085      	sub	sp, #20
 8016258:	000d      	movs	r5, r1
 801625a:	a902      	add	r1, sp, #8
 801625c:	0004      	movs	r4, r0
 801625e:	f7ff ff45 	bl	80160ec <__b2d>
 8016262:	9000      	str	r0, [sp, #0]
 8016264:	9101      	str	r1, [sp, #4]
 8016266:	9e00      	ldr	r6, [sp, #0]
 8016268:	9f01      	ldr	r7, [sp, #4]
 801626a:	0028      	movs	r0, r5
 801626c:	a903      	add	r1, sp, #12
 801626e:	f7ff ff3d 	bl	80160ec <__b2d>
 8016272:	6924      	ldr	r4, [r4, #16]
 8016274:	692d      	ldr	r5, [r5, #16]
 8016276:	0002      	movs	r2, r0
 8016278:	1b65      	subs	r5, r4, r5
 801627a:	016c      	lsls	r4, r5, #5
 801627c:	46a4      	mov	ip, r4
 801627e:	9d03      	ldr	r5, [sp, #12]
 8016280:	9c02      	ldr	r4, [sp, #8]
 8016282:	000b      	movs	r3, r1
 8016284:	1b64      	subs	r4, r4, r5
 8016286:	4464      	add	r4, ip
 8016288:	0525      	lsls	r5, r4, #20
 801628a:	2c00      	cmp	r4, #0
 801628c:	dd07      	ble.n	801629e <__ratio+0x4a>
 801628e:	9901      	ldr	r1, [sp, #4]
 8016290:	186f      	adds	r7, r5, r1
 8016292:	0030      	movs	r0, r6
 8016294:	0039      	movs	r1, r7
 8016296:	f7ea fef5 	bl	8001084 <__aeabi_ddiv>
 801629a:	b005      	add	sp, #20
 801629c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801629e:	1b4b      	subs	r3, r1, r5
 80162a0:	e7f7      	b.n	8016292 <__ratio+0x3e>

080162a2 <__copybits>:
 80162a2:	b570      	push	{r4, r5, r6, lr}
 80162a4:	0015      	movs	r5, r2
 80162a6:	6913      	ldr	r3, [r2, #16]
 80162a8:	3514      	adds	r5, #20
 80162aa:	009c      	lsls	r4, r3, #2
 80162ac:	0006      	movs	r6, r0
 80162ae:	002b      	movs	r3, r5
 80162b0:	3901      	subs	r1, #1
 80162b2:	1149      	asrs	r1, r1, #5
 80162b4:	3101      	adds	r1, #1
 80162b6:	0089      	lsls	r1, r1, #2
 80162b8:	1841      	adds	r1, r0, r1
 80162ba:	192c      	adds	r4, r5, r4
 80162bc:	429c      	cmp	r4, r3
 80162be:	d80d      	bhi.n	80162dc <__copybits+0x3a>
 80162c0:	0015      	movs	r5, r2
 80162c2:	3511      	adds	r5, #17
 80162c4:	2300      	movs	r3, #0
 80162c6:	42a5      	cmp	r5, r4
 80162c8:	d803      	bhi.n	80162d2 <__copybits+0x30>
 80162ca:	1aa3      	subs	r3, r4, r2
 80162cc:	3b11      	subs	r3, #17
 80162ce:	089b      	lsrs	r3, r3, #2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	18c0      	adds	r0, r0, r3
 80162d4:	2300      	movs	r3, #0
 80162d6:	4281      	cmp	r1, r0
 80162d8:	d803      	bhi.n	80162e2 <__copybits+0x40>
 80162da:	bd70      	pop	{r4, r5, r6, pc}
 80162dc:	cb20      	ldmia	r3!, {r5}
 80162de:	c620      	stmia	r6!, {r5}
 80162e0:	e7ec      	b.n	80162bc <__copybits+0x1a>
 80162e2:	c008      	stmia	r0!, {r3}
 80162e4:	e7f7      	b.n	80162d6 <__copybits+0x34>

080162e6 <__any_on>:
 80162e6:	0002      	movs	r2, r0
 80162e8:	6900      	ldr	r0, [r0, #16]
 80162ea:	b510      	push	{r4, lr}
 80162ec:	3214      	adds	r2, #20
 80162ee:	114b      	asrs	r3, r1, #5
 80162f0:	4298      	cmp	r0, r3
 80162f2:	db13      	blt.n	801631c <__any_on+0x36>
 80162f4:	dd0c      	ble.n	8016310 <__any_on+0x2a>
 80162f6:	241f      	movs	r4, #31
 80162f8:	0008      	movs	r0, r1
 80162fa:	4020      	ands	r0, r4
 80162fc:	4221      	tst	r1, r4
 80162fe:	d007      	beq.n	8016310 <__any_on+0x2a>
 8016300:	0099      	lsls	r1, r3, #2
 8016302:	588c      	ldr	r4, [r1, r2]
 8016304:	0021      	movs	r1, r4
 8016306:	40c1      	lsrs	r1, r0
 8016308:	4081      	lsls	r1, r0
 801630a:	2001      	movs	r0, #1
 801630c:	428c      	cmp	r4, r1
 801630e:	d104      	bne.n	801631a <__any_on+0x34>
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	18d3      	adds	r3, r2, r3
 8016314:	4293      	cmp	r3, r2
 8016316:	d803      	bhi.n	8016320 <__any_on+0x3a>
 8016318:	2000      	movs	r0, #0
 801631a:	bd10      	pop	{r4, pc}
 801631c:	0003      	movs	r3, r0
 801631e:	e7f7      	b.n	8016310 <__any_on+0x2a>
 8016320:	3b04      	subs	r3, #4
 8016322:	6819      	ldr	r1, [r3, #0]
 8016324:	2900      	cmp	r1, #0
 8016326:	d0f5      	beq.n	8016314 <__any_on+0x2e>
 8016328:	2001      	movs	r0, #1
 801632a:	e7f6      	b.n	801631a <__any_on+0x34>

0801632c <frexp>:
 801632c:	b570      	push	{r4, r5, r6, lr}
 801632e:	0014      	movs	r4, r2
 8016330:	2500      	movs	r5, #0
 8016332:	6025      	str	r5, [r4, #0]
 8016334:	4d10      	ldr	r5, [pc, #64]	; (8016378 <frexp+0x4c>)
 8016336:	004b      	lsls	r3, r1, #1
 8016338:	000a      	movs	r2, r1
 801633a:	085b      	lsrs	r3, r3, #1
 801633c:	42ab      	cmp	r3, r5
 801633e:	dc1a      	bgt.n	8016376 <frexp+0x4a>
 8016340:	001d      	movs	r5, r3
 8016342:	4305      	orrs	r5, r0
 8016344:	d017      	beq.n	8016376 <frexp+0x4a>
 8016346:	4d0d      	ldr	r5, [pc, #52]	; (801637c <frexp+0x50>)
 8016348:	4229      	tst	r1, r5
 801634a:	d109      	bne.n	8016360 <frexp+0x34>
 801634c:	2200      	movs	r2, #0
 801634e:	4b0c      	ldr	r3, [pc, #48]	; (8016380 <frexp+0x54>)
 8016350:	f7eb fa9e 	bl	8001890 <__aeabi_dmul>
 8016354:	2536      	movs	r5, #54	; 0x36
 8016356:	000a      	movs	r2, r1
 8016358:	004b      	lsls	r3, r1, #1
 801635a:	426d      	negs	r5, r5
 801635c:	085b      	lsrs	r3, r3, #1
 801635e:	6025      	str	r5, [r4, #0]
 8016360:	4d08      	ldr	r5, [pc, #32]	; (8016384 <frexp+0x58>)
 8016362:	151b      	asrs	r3, r3, #20
 8016364:	195b      	adds	r3, r3, r5
 8016366:	6825      	ldr	r5, [r4, #0]
 8016368:	18eb      	adds	r3, r5, r3
 801636a:	6023      	str	r3, [r4, #0]
 801636c:	4b06      	ldr	r3, [pc, #24]	; (8016388 <frexp+0x5c>)
 801636e:	401a      	ands	r2, r3
 8016370:	4b06      	ldr	r3, [pc, #24]	; (801638c <frexp+0x60>)
 8016372:	4313      	orrs	r3, r2
 8016374:	0019      	movs	r1, r3
 8016376:	bd70      	pop	{r4, r5, r6, pc}
 8016378:	7fefffff 	.word	0x7fefffff
 801637c:	7ff00000 	.word	0x7ff00000
 8016380:	43500000 	.word	0x43500000
 8016384:	fffffc02 	.word	0xfffffc02
 8016388:	800fffff 	.word	0x800fffff
 801638c:	3fe00000 	.word	0x3fe00000

08016390 <nan>:
 8016390:	2000      	movs	r0, #0
 8016392:	4901      	ldr	r1, [pc, #4]	; (8016398 <nan+0x8>)
 8016394:	4770      	bx	lr
 8016396:	46c0      	nop			; (mov r8, r8)
 8016398:	7ff80000 	.word	0x7ff80000

0801639c <__ssprint_r>:
 801639c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801639e:	6893      	ldr	r3, [r2, #8]
 80163a0:	b087      	sub	sp, #28
 80163a2:	000c      	movs	r4, r1
 80163a4:	0017      	movs	r7, r2
 80163a6:	9002      	str	r0, [sp, #8]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d065      	beq.n	8016478 <__ssprint_r+0xdc>
 80163ac:	6813      	ldr	r3, [r2, #0]
 80163ae:	9303      	str	r3, [sp, #12]
 80163b0:	2300      	movs	r3, #0
 80163b2:	9305      	str	r3, [sp, #20]
 80163b4:	9301      	str	r3, [sp, #4]
 80163b6:	9b01      	ldr	r3, [sp, #4]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d02d      	beq.n	8016418 <__ssprint_r+0x7c>
 80163bc:	68a6      	ldr	r6, [r4, #8]
 80163be:	42b3      	cmp	r3, r6
 80163c0:	d346      	bcc.n	8016450 <__ssprint_r+0xb4>
 80163c2:	2390      	movs	r3, #144	; 0x90
 80163c4:	89a2      	ldrh	r2, [r4, #12]
 80163c6:	00db      	lsls	r3, r3, #3
 80163c8:	421a      	tst	r2, r3
 80163ca:	d041      	beq.n	8016450 <__ssprint_r+0xb4>
 80163cc:	6921      	ldr	r1, [r4, #16]
 80163ce:	6823      	ldr	r3, [r4, #0]
 80163d0:	6965      	ldr	r5, [r4, #20]
 80163d2:	1a5b      	subs	r3, r3, r1
 80163d4:	9304      	str	r3, [sp, #16]
 80163d6:	2303      	movs	r3, #3
 80163d8:	435d      	muls	r5, r3
 80163da:	0feb      	lsrs	r3, r5, #31
 80163dc:	195d      	adds	r5, r3, r5
 80163de:	9b04      	ldr	r3, [sp, #16]
 80163e0:	9801      	ldr	r0, [sp, #4]
 80163e2:	3301      	adds	r3, #1
 80163e4:	181b      	adds	r3, r3, r0
 80163e6:	106d      	asrs	r5, r5, #1
 80163e8:	42ab      	cmp	r3, r5
 80163ea:	d900      	bls.n	80163ee <__ssprint_r+0x52>
 80163ec:	001d      	movs	r5, r3
 80163ee:	0553      	lsls	r3, r2, #21
 80163f0:	d546      	bpl.n	8016480 <__ssprint_r+0xe4>
 80163f2:	0029      	movs	r1, r5
 80163f4:	9802      	ldr	r0, [sp, #8]
 80163f6:	f7fb f991 	bl	801171c <_malloc_r>
 80163fa:	1e06      	subs	r6, r0, #0
 80163fc:	d116      	bne.n	801642c <__ssprint_r+0x90>
 80163fe:	230c      	movs	r3, #12
 8016400:	9a02      	ldr	r2, [sp, #8]
 8016402:	2001      	movs	r0, #1
 8016404:	6013      	str	r3, [r2, #0]
 8016406:	2340      	movs	r3, #64	; 0x40
 8016408:	89a2      	ldrh	r2, [r4, #12]
 801640a:	4240      	negs	r0, r0
 801640c:	4313      	orrs	r3, r2
 801640e:	81a3      	strh	r3, [r4, #12]
 8016410:	2300      	movs	r3, #0
 8016412:	60bb      	str	r3, [r7, #8]
 8016414:	607b      	str	r3, [r7, #4]
 8016416:	e031      	b.n	801647c <__ssprint_r+0xe0>
 8016418:	9b03      	ldr	r3, [sp, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	9305      	str	r3, [sp, #20]
 801641e:	9b03      	ldr	r3, [sp, #12]
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	9301      	str	r3, [sp, #4]
 8016424:	9b03      	ldr	r3, [sp, #12]
 8016426:	3308      	adds	r3, #8
 8016428:	9303      	str	r3, [sp, #12]
 801642a:	e7c4      	b.n	80163b6 <__ssprint_r+0x1a>
 801642c:	9a04      	ldr	r2, [sp, #16]
 801642e:	6921      	ldr	r1, [r4, #16]
 8016430:	f7fb fb96 	bl	8011b60 <memcpy>
 8016434:	89a3      	ldrh	r3, [r4, #12]
 8016436:	4a18      	ldr	r2, [pc, #96]	; (8016498 <__ssprint_r+0xfc>)
 8016438:	401a      	ands	r2, r3
 801643a:	2380      	movs	r3, #128	; 0x80
 801643c:	4313      	orrs	r3, r2
 801643e:	81a3      	strh	r3, [r4, #12]
 8016440:	9b04      	ldr	r3, [sp, #16]
 8016442:	6126      	str	r6, [r4, #16]
 8016444:	18f6      	adds	r6, r6, r3
 8016446:	6026      	str	r6, [r4, #0]
 8016448:	6165      	str	r5, [r4, #20]
 801644a:	9e01      	ldr	r6, [sp, #4]
 801644c:	1aed      	subs	r5, r5, r3
 801644e:	60a5      	str	r5, [r4, #8]
 8016450:	9b01      	ldr	r3, [sp, #4]
 8016452:	429e      	cmp	r6, r3
 8016454:	d900      	bls.n	8016458 <__ssprint_r+0xbc>
 8016456:	001e      	movs	r6, r3
 8016458:	0032      	movs	r2, r6
 801645a:	9905      	ldr	r1, [sp, #20]
 801645c:	6820      	ldr	r0, [r4, #0]
 801645e:	f7ff fad8 	bl	8015a12 <memmove>
 8016462:	68a3      	ldr	r3, [r4, #8]
 8016464:	9a01      	ldr	r2, [sp, #4]
 8016466:	1b9b      	subs	r3, r3, r6
 8016468:	60a3      	str	r3, [r4, #8]
 801646a:	6823      	ldr	r3, [r4, #0]
 801646c:	199e      	adds	r6, r3, r6
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	6026      	str	r6, [r4, #0]
 8016472:	1a9b      	subs	r3, r3, r2
 8016474:	60bb      	str	r3, [r7, #8]
 8016476:	d1cf      	bne.n	8016418 <__ssprint_r+0x7c>
 8016478:	2000      	movs	r0, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	b007      	add	sp, #28
 801647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016480:	002a      	movs	r2, r5
 8016482:	9802      	ldr	r0, [sp, #8]
 8016484:	f7fb fbb2 	bl	8011bec <_realloc_r>
 8016488:	1e06      	subs	r6, r0, #0
 801648a:	d1d9      	bne.n	8016440 <__ssprint_r+0xa4>
 801648c:	6921      	ldr	r1, [r4, #16]
 801648e:	9802      	ldr	r0, [sp, #8]
 8016490:	f7fe fe6e 	bl	8015170 <_free_r>
 8016494:	e7b3      	b.n	80163fe <__ssprint_r+0x62>
 8016496:	46c0      	nop			; (mov r8, r8)
 8016498:	fffffb7f 	.word	0xfffffb7f

0801649c <__ascii_wctomb>:
 801649c:	0003      	movs	r3, r0
 801649e:	1e08      	subs	r0, r1, #0
 80164a0:	d005      	beq.n	80164ae <__ascii_wctomb+0x12>
 80164a2:	2aff      	cmp	r2, #255	; 0xff
 80164a4:	d904      	bls.n	80164b0 <__ascii_wctomb+0x14>
 80164a6:	228a      	movs	r2, #138	; 0x8a
 80164a8:	2001      	movs	r0, #1
 80164aa:	601a      	str	r2, [r3, #0]
 80164ac:	4240      	negs	r0, r0
 80164ae:	4770      	bx	lr
 80164b0:	2001      	movs	r0, #1
 80164b2:	700a      	strb	r2, [r1, #0]
 80164b4:	e7fb      	b.n	80164ae <__ascii_wctomb+0x12>
	...

080164b8 <__register_exitproc>:
 80164b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164ba:	4f1e      	ldr	r7, [pc, #120]	; (8016534 <__register_exitproc+0x7c>)
 80164bc:	0004      	movs	r4, r0
 80164be:	6838      	ldr	r0, [r7, #0]
 80164c0:	0016      	movs	r6, r2
 80164c2:	9100      	str	r1, [sp, #0]
 80164c4:	9301      	str	r3, [sp, #4]
 80164c6:	f7ff fa85 	bl	80159d4 <__retarget_lock_acquire_recursive>
 80164ca:	4b1b      	ldr	r3, [pc, #108]	; (8016538 <__register_exitproc+0x80>)
 80164cc:	6819      	ldr	r1, [r3, #0]
 80164ce:	000b      	movs	r3, r1
 80164d0:	33fc      	adds	r3, #252	; 0xfc
 80164d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80164d4:	2a00      	cmp	r2, #0
 80164d6:	d103      	bne.n	80164e0 <__register_exitproc+0x28>
 80164d8:	000a      	movs	r2, r1
 80164da:	324d      	adds	r2, #77	; 0x4d
 80164dc:	32ff      	adds	r2, #255	; 0xff
 80164de:	64da      	str	r2, [r3, #76]	; 0x4c
 80164e0:	6853      	ldr	r3, [r2, #4]
 80164e2:	6838      	ldr	r0, [r7, #0]
 80164e4:	2b1f      	cmp	r3, #31
 80164e6:	dd04      	ble.n	80164f2 <__register_exitproc+0x3a>
 80164e8:	f7ff fa75 	bl	80159d6 <__retarget_lock_release_recursive>
 80164ec:	2001      	movs	r0, #1
 80164ee:	4240      	negs	r0, r0
 80164f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80164f2:	2c00      	cmp	r4, #0
 80164f4:	d014      	beq.n	8016520 <__register_exitproc+0x68>
 80164f6:	0099      	lsls	r1, r3, #2
 80164f8:	1851      	adds	r1, r2, r1
 80164fa:	000f      	movs	r7, r1
 80164fc:	3788      	adds	r7, #136	; 0x88
 80164fe:	603e      	str	r6, [r7, #0]
 8016500:	2701      	movs	r7, #1
 8016502:	0016      	movs	r6, r2
 8016504:	409f      	lsls	r7, r3
 8016506:	3685      	adds	r6, #133	; 0x85
 8016508:	36ff      	adds	r6, #255	; 0xff
 801650a:	6875      	ldr	r5, [r6, #4]
 801650c:	31fc      	adds	r1, #252	; 0xfc
 801650e:	433d      	orrs	r5, r7
 8016510:	6075      	str	r5, [r6, #4]
 8016512:	9d01      	ldr	r5, [sp, #4]
 8016514:	60cd      	str	r5, [r1, #12]
 8016516:	2c02      	cmp	r4, #2
 8016518:	d102      	bne.n	8016520 <__register_exitproc+0x68>
 801651a:	68b1      	ldr	r1, [r6, #8]
 801651c:	430f      	orrs	r7, r1
 801651e:	60b7      	str	r7, [r6, #8]
 8016520:	1c59      	adds	r1, r3, #1
 8016522:	6051      	str	r1, [r2, #4]
 8016524:	3302      	adds	r3, #2
 8016526:	9900      	ldr	r1, [sp, #0]
 8016528:	009b      	lsls	r3, r3, #2
 801652a:	5099      	str	r1, [r3, r2]
 801652c:	f7ff fa53 	bl	80159d6 <__retarget_lock_release_recursive>
 8016530:	2000      	movs	r0, #0
 8016532:	e7dd      	b.n	80164f0 <__register_exitproc+0x38>
 8016534:	20000940 	.word	0x20000940
 8016538:	0801a8d0 	.word	0x0801a8d0

0801653c <__assert_func>:
 801653c:	b530      	push	{r4, r5, lr}
 801653e:	0014      	movs	r4, r2
 8016540:	001a      	movs	r2, r3
 8016542:	4b09      	ldr	r3, [pc, #36]	; (8016568 <__assert_func+0x2c>)
 8016544:	0005      	movs	r5, r0
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	b085      	sub	sp, #20
 801654a:	68d8      	ldr	r0, [r3, #12]
 801654c:	4b07      	ldr	r3, [pc, #28]	; (801656c <__assert_func+0x30>)
 801654e:	2c00      	cmp	r4, #0
 8016550:	d101      	bne.n	8016556 <__assert_func+0x1a>
 8016552:	4b07      	ldr	r3, [pc, #28]	; (8016570 <__assert_func+0x34>)
 8016554:	001c      	movs	r4, r3
 8016556:	9301      	str	r3, [sp, #4]
 8016558:	9100      	str	r1, [sp, #0]
 801655a:	002b      	movs	r3, r5
 801655c:	4905      	ldr	r1, [pc, #20]	; (8016574 <__assert_func+0x38>)
 801655e:	9402      	str	r4, [sp, #8]
 8016560:	f000 f836 	bl	80165d0 <fiprintf>
 8016564:	f000 fe1e 	bl	80171a4 <abort>
 8016568:	20000100 	.word	0x20000100
 801656c:	0801abd4 	.word	0x0801abd4
 8016570:	0801ac0f 	.word	0x0801ac0f
 8016574:	0801abe1 	.word	0x0801abe1

08016578 <_calloc_r>:
 8016578:	b510      	push	{r4, lr}
 801657a:	4351      	muls	r1, r2
 801657c:	f7fb f8ce 	bl	801171c <_malloc_r>
 8016580:	1e04      	subs	r4, r0, #0
 8016582:	d01a      	beq.n	80165ba <_calloc_r+0x42>
 8016584:	0003      	movs	r3, r0
 8016586:	3b08      	subs	r3, #8
 8016588:	685a      	ldr	r2, [r3, #4]
 801658a:	2303      	movs	r3, #3
 801658c:	439a      	bics	r2, r3
 801658e:	3a04      	subs	r2, #4
 8016590:	2a24      	cmp	r2, #36	; 0x24
 8016592:	d819      	bhi.n	80165c8 <_calloc_r+0x50>
 8016594:	0003      	movs	r3, r0
 8016596:	2a13      	cmp	r2, #19
 8016598:	d90b      	bls.n	80165b2 <_calloc_r+0x3a>
 801659a:	2100      	movs	r1, #0
 801659c:	3308      	adds	r3, #8
 801659e:	6001      	str	r1, [r0, #0]
 80165a0:	6041      	str	r1, [r0, #4]
 80165a2:	2a1b      	cmp	r2, #27
 80165a4:	d905      	bls.n	80165b2 <_calloc_r+0x3a>
 80165a6:	6081      	str	r1, [r0, #8]
 80165a8:	60c1      	str	r1, [r0, #12]
 80165aa:	2a24      	cmp	r2, #36	; 0x24
 80165ac:	d007      	beq.n	80165be <_calloc_r+0x46>
 80165ae:	0003      	movs	r3, r0
 80165b0:	3310      	adds	r3, #16
 80165b2:	2200      	movs	r2, #0
 80165b4:	601a      	str	r2, [r3, #0]
 80165b6:	605a      	str	r2, [r3, #4]
 80165b8:	609a      	str	r2, [r3, #8]
 80165ba:	0020      	movs	r0, r4
 80165bc:	bd10      	pop	{r4, pc}
 80165be:	0003      	movs	r3, r0
 80165c0:	6101      	str	r1, [r0, #16]
 80165c2:	3318      	adds	r3, #24
 80165c4:	6141      	str	r1, [r0, #20]
 80165c6:	e7f4      	b.n	80165b2 <_calloc_r+0x3a>
 80165c8:	2100      	movs	r1, #0
 80165ca:	f7fb fad2 	bl	8011b72 <memset>
 80165ce:	e7f4      	b.n	80165ba <_calloc_r+0x42>

080165d0 <fiprintf>:
 80165d0:	b40e      	push	{r1, r2, r3}
 80165d2:	b503      	push	{r0, r1, lr}
 80165d4:	0001      	movs	r1, r0
 80165d6:	ab03      	add	r3, sp, #12
 80165d8:	4804      	ldr	r0, [pc, #16]	; (80165ec <fiprintf+0x1c>)
 80165da:	cb04      	ldmia	r3!, {r2}
 80165dc:	6800      	ldr	r0, [r0, #0]
 80165de:	9301      	str	r3, [sp, #4]
 80165e0:	f000 f83a 	bl	8016658 <_vfiprintf_r>
 80165e4:	b002      	add	sp, #8
 80165e6:	bc08      	pop	{r3}
 80165e8:	b003      	add	sp, #12
 80165ea:	4718      	bx	r3
 80165ec:	20000100 	.word	0x20000100

080165f0 <__sprint_r>:
 80165f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165f2:	b085      	sub	sp, #20
 80165f4:	9001      	str	r0, [sp, #4]
 80165f6:	6890      	ldr	r0, [r2, #8]
 80165f8:	000d      	movs	r5, r1
 80165fa:	0014      	movs	r4, r2
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d102      	bne.n	8016606 <__sprint_r+0x16>
 8016600:	6050      	str	r0, [r2, #4]
 8016602:	b005      	add	sp, #20
 8016604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016606:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8016608:	049b      	lsls	r3, r3, #18
 801660a:	d521      	bpl.n	8016650 <__sprint_r+0x60>
 801660c:	6817      	ldr	r7, [r2, #0]
 801660e:	2600      	movs	r6, #0
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	9302      	str	r3, [sp, #8]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	9300      	str	r3, [sp, #0]
 8016618:	089b      	lsrs	r3, r3, #2
 801661a:	9303      	str	r3, [sp, #12]
 801661c:	9b03      	ldr	r3, [sp, #12]
 801661e:	42b3      	cmp	r3, r6
 8016620:	dc0b      	bgt.n	801663a <__sprint_r+0x4a>
 8016622:	2303      	movs	r3, #3
 8016624:	9800      	ldr	r0, [sp, #0]
 8016626:	3708      	adds	r7, #8
 8016628:	4398      	bics	r0, r3
 801662a:	68a3      	ldr	r3, [r4, #8]
 801662c:	1a18      	subs	r0, r3, r0
 801662e:	60a0      	str	r0, [r4, #8]
 8016630:	d1ed      	bne.n	801660e <__sprint_r+0x1e>
 8016632:	2300      	movs	r3, #0
 8016634:	60a3      	str	r3, [r4, #8]
 8016636:	6063      	str	r3, [r4, #4]
 8016638:	e7e3      	b.n	8016602 <__sprint_r+0x12>
 801663a:	9902      	ldr	r1, [sp, #8]
 801663c:	00b3      	lsls	r3, r6, #2
 801663e:	58c9      	ldr	r1, [r1, r3]
 8016640:	002a      	movs	r2, r5
 8016642:	9801      	ldr	r0, [sp, #4]
 8016644:	f000 ff2c 	bl	80174a0 <_fputwc_r>
 8016648:	1c43      	adds	r3, r0, #1
 801664a:	d0f2      	beq.n	8016632 <__sprint_r+0x42>
 801664c:	3601      	adds	r6, #1
 801664e:	e7e5      	b.n	801661c <__sprint_r+0x2c>
 8016650:	9801      	ldr	r0, [sp, #4]
 8016652:	f000 ff4f 	bl	80174f4 <__sfvwrite_r>
 8016656:	e7ec      	b.n	8016632 <__sprint_r+0x42>

08016658 <_vfiprintf_r>:
 8016658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665a:	b0c3      	sub	sp, #268	; 0x10c
 801665c:	001c      	movs	r4, r3
 801665e:	001d      	movs	r5, r3
 8016660:	9006      	str	r0, [sp, #24]
 8016662:	9103      	str	r1, [sp, #12]
 8016664:	9207      	str	r2, [sp, #28]
 8016666:	2800      	cmp	r0, #0
 8016668:	d005      	beq.n	8016676 <_vfiprintf_r+0x1e>
 801666a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801666c:	9304      	str	r3, [sp, #16]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d101      	bne.n	8016676 <_vfiprintf_r+0x1e>
 8016672:	f000 fead 	bl	80173d0 <__sinit>
 8016676:	9b03      	ldr	r3, [sp, #12]
 8016678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801667a:	07db      	lsls	r3, r3, #31
 801667c:	d407      	bmi.n	801668e <_vfiprintf_r+0x36>
 801667e:	9b03      	ldr	r3, [sp, #12]
 8016680:	899b      	ldrh	r3, [r3, #12]
 8016682:	059b      	lsls	r3, r3, #22
 8016684:	d403      	bmi.n	801668e <_vfiprintf_r+0x36>
 8016686:	9b03      	ldr	r3, [sp, #12]
 8016688:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801668a:	f7ff f9a3 	bl	80159d4 <__retarget_lock_acquire_recursive>
 801668e:	9b03      	ldr	r3, [sp, #12]
 8016690:	220c      	movs	r2, #12
 8016692:	5e9a      	ldrsh	r2, [r3, r2]
 8016694:	2380      	movs	r3, #128	; 0x80
 8016696:	019b      	lsls	r3, r3, #6
 8016698:	421a      	tst	r2, r3
 801669a:	d107      	bne.n	80166ac <_vfiprintf_r+0x54>
 801669c:	4313      	orrs	r3, r2
 801669e:	9a03      	ldr	r2, [sp, #12]
 80166a0:	8193      	strh	r3, [r2, #12]
 80166a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80166a4:	4ba7      	ldr	r3, [pc, #668]	; (8016944 <_vfiprintf_r+0x2ec>)
 80166a6:	4013      	ands	r3, r2
 80166a8:	9a03      	ldr	r2, [sp, #12]
 80166aa:	6653      	str	r3, [r2, #100]	; 0x64
 80166ac:	9b03      	ldr	r3, [sp, #12]
 80166ae:	899b      	ldrh	r3, [r3, #12]
 80166b0:	071b      	lsls	r3, r3, #28
 80166b2:	d503      	bpl.n	80166bc <_vfiprintf_r+0x64>
 80166b4:	9b03      	ldr	r3, [sp, #12]
 80166b6:	691b      	ldr	r3, [r3, #16]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d118      	bne.n	80166ee <_vfiprintf_r+0x96>
 80166bc:	9903      	ldr	r1, [sp, #12]
 80166be:	9806      	ldr	r0, [sp, #24]
 80166c0:	f000 fd0c 	bl	80170dc <__swsetup_r>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d012      	beq.n	80166ee <_vfiprintf_r+0x96>
 80166c8:	9b03      	ldr	r3, [sp, #12]
 80166ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80166cc:	07db      	lsls	r3, r3, #31
 80166ce:	d505      	bpl.n	80166dc <_vfiprintf_r+0x84>
 80166d0:	2301      	movs	r3, #1
 80166d2:	425b      	negs	r3, r3
 80166d4:	9308      	str	r3, [sp, #32]
 80166d6:	9808      	ldr	r0, [sp, #32]
 80166d8:	b043      	add	sp, #268	; 0x10c
 80166da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166dc:	9b03      	ldr	r3, [sp, #12]
 80166de:	899b      	ldrh	r3, [r3, #12]
 80166e0:	059b      	lsls	r3, r3, #22
 80166e2:	d4f5      	bmi.n	80166d0 <_vfiprintf_r+0x78>
 80166e4:	9b03      	ldr	r3, [sp, #12]
 80166e6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80166e8:	f7ff f975 	bl	80159d6 <__retarget_lock_release_recursive>
 80166ec:	e7f0      	b.n	80166d0 <_vfiprintf_r+0x78>
 80166ee:	9b03      	ldr	r3, [sp, #12]
 80166f0:	899a      	ldrh	r2, [r3, #12]
 80166f2:	231a      	movs	r3, #26
 80166f4:	4013      	ands	r3, r2
 80166f6:	2b0a      	cmp	r3, #10
 80166f8:	d116      	bne.n	8016728 <_vfiprintf_r+0xd0>
 80166fa:	9b03      	ldr	r3, [sp, #12]
 80166fc:	210e      	movs	r1, #14
 80166fe:	5e5b      	ldrsh	r3, [r3, r1]
 8016700:	2b00      	cmp	r3, #0
 8016702:	db11      	blt.n	8016728 <_vfiprintf_r+0xd0>
 8016704:	9b03      	ldr	r3, [sp, #12]
 8016706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016708:	07db      	lsls	r3, r3, #31
 801670a:	d405      	bmi.n	8016718 <_vfiprintf_r+0xc0>
 801670c:	0593      	lsls	r3, r2, #22
 801670e:	d403      	bmi.n	8016718 <_vfiprintf_r+0xc0>
 8016710:	9b03      	ldr	r3, [sp, #12]
 8016712:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016714:	f7ff f95f 	bl	80159d6 <__retarget_lock_release_recursive>
 8016718:	0023      	movs	r3, r4
 801671a:	9a07      	ldr	r2, [sp, #28]
 801671c:	9903      	ldr	r1, [sp, #12]
 801671e:	9806      	ldr	r0, [sp, #24]
 8016720:	f000 fc98 	bl	8017054 <__sbprintf>
 8016724:	9008      	str	r0, [sp, #32]
 8016726:	e7d6      	b.n	80166d6 <_vfiprintf_r+0x7e>
 8016728:	2300      	movs	r3, #0
 801672a:	af19      	add	r7, sp, #100	; 0x64
 801672c:	9716      	str	r7, [sp, #88]	; 0x58
 801672e:	9318      	str	r3, [sp, #96]	; 0x60
 8016730:	9317      	str	r3, [sp, #92]	; 0x5c
 8016732:	930c      	str	r3, [sp, #48]	; 0x30
 8016734:	930d      	str	r3, [sp, #52]	; 0x34
 8016736:	930e      	str	r3, [sp, #56]	; 0x38
 8016738:	930f      	str	r3, [sp, #60]	; 0x3c
 801673a:	9308      	str	r3, [sp, #32]
 801673c:	9c07      	ldr	r4, [sp, #28]
 801673e:	7823      	ldrb	r3, [r4, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d002      	beq.n	801674a <_vfiprintf_r+0xf2>
 8016744:	2b25      	cmp	r3, #37	; 0x25
 8016746:	d000      	beq.n	801674a <_vfiprintf_r+0xf2>
 8016748:	e093      	b.n	8016872 <_vfiprintf_r+0x21a>
 801674a:	9b07      	ldr	r3, [sp, #28]
 801674c:	1ae3      	subs	r3, r4, r3
 801674e:	001e      	movs	r6, r3
 8016750:	9b07      	ldr	r3, [sp, #28]
 8016752:	429c      	cmp	r4, r3
 8016754:	d01a      	beq.n	801678c <_vfiprintf_r+0x134>
 8016756:	46b4      	mov	ip, r6
 8016758:	603b      	str	r3, [r7, #0]
 801675a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801675c:	607e      	str	r6, [r7, #4]
 801675e:	4463      	add	r3, ip
 8016760:	9318      	str	r3, [sp, #96]	; 0x60
 8016762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016764:	3708      	adds	r7, #8
 8016766:	9304      	str	r3, [sp, #16]
 8016768:	3301      	adds	r3, #1
 801676a:	9317      	str	r3, [sp, #92]	; 0x5c
 801676c:	2b07      	cmp	r3, #7
 801676e:	dd09      	ble.n	8016784 <_vfiprintf_r+0x12c>
 8016770:	9903      	ldr	r1, [sp, #12]
 8016772:	9806      	ldr	r0, [sp, #24]
 8016774:	aa16      	add	r2, sp, #88	; 0x58
 8016776:	f7ff ff3b 	bl	80165f0 <__sprint_r>
 801677a:	2800      	cmp	r0, #0
 801677c:	d001      	beq.n	8016782 <_vfiprintf_r+0x12a>
 801677e:	f000 fc00 	bl	8016f82 <_vfiprintf_r+0x92a>
 8016782:	af19      	add	r7, sp, #100	; 0x64
 8016784:	46b4      	mov	ip, r6
 8016786:	9b08      	ldr	r3, [sp, #32]
 8016788:	4463      	add	r3, ip
 801678a:	9308      	str	r3, [sp, #32]
 801678c:	7823      	ldrb	r3, [r4, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d101      	bne.n	8016796 <_vfiprintf_r+0x13e>
 8016792:	f000 fc1b 	bl	8016fcc <_vfiprintf_r+0x974>
 8016796:	2200      	movs	r2, #0
 8016798:	a914      	add	r1, sp, #80	; 0x50
 801679a:	70ca      	strb	r2, [r1, #3]
 801679c:	2101      	movs	r1, #1
 801679e:	1c63      	adds	r3, r4, #1
 80167a0:	0014      	movs	r4, r2
 80167a2:	4249      	negs	r1, r1
 80167a4:	9105      	str	r1, [sp, #20]
 80167a6:	9209      	str	r2, [sp, #36]	; 0x24
 80167a8:	1c5a      	adds	r2, r3, #1
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	9207      	str	r2, [sp, #28]
 80167ae:	0018      	movs	r0, r3
 80167b0:	3820      	subs	r0, #32
 80167b2:	285a      	cmp	r0, #90	; 0x5a
 80167b4:	d900      	bls.n	80167b8 <_vfiprintf_r+0x160>
 80167b6:	e37c      	b.n	8016eb2 <_vfiprintf_r+0x85a>
 80167b8:	f7e9 fcc0 	bl	800013c <__gnu_thumb1_case_uhi>
 80167bc:	037b0098 	.word	0x037b0098
 80167c0:	00a1037b 	.word	0x00a1037b
 80167c4:	037b037b 	.word	0x037b037b
 80167c8:	007d037b 	.word	0x007d037b
 80167cc:	037b037b 	.word	0x037b037b
 80167d0:	00ab00a3 	.word	0x00ab00a3
 80167d4:	00a9037b 	.word	0x00a9037b
 80167d8:	037b00af 	.word	0x037b00af
 80167dc:	00d500d3 	.word	0x00d500d3
 80167e0:	00d500d5 	.word	0x00d500d5
 80167e4:	00d500d5 	.word	0x00d500d5
 80167e8:	00d500d5 	.word	0x00d500d5
 80167ec:	00d500d5 	.word	0x00d500d5
 80167f0:	037b037b 	.word	0x037b037b
 80167f4:	037b037b 	.word	0x037b037b
 80167f8:	037b037b 	.word	0x037b037b
 80167fc:	037b037b 	.word	0x037b037b
 8016800:	00fe037b 	.word	0x00fe037b
 8016804:	037b01f9 	.word	0x037b01f9
 8016808:	037b037b 	.word	0x037b037b
 801680c:	037b037b 	.word	0x037b037b
 8016810:	037b037b 	.word	0x037b037b
 8016814:	037b037b 	.word	0x037b037b
 8016818:	0252037b 	.word	0x0252037b
 801681c:	037b037b 	.word	0x037b037b
 8016820:	0295037b 	.word	0x0295037b
 8016824:	02b1037b 	.word	0x02b1037b
 8016828:	037b037b 	.word	0x037b037b
 801682c:	037b02ec 	.word	0x037b02ec
 8016830:	037b037b 	.word	0x037b037b
 8016834:	037b037b 	.word	0x037b037b
 8016838:	037b037b 	.word	0x037b037b
 801683c:	037b037b 	.word	0x037b037b
 8016840:	00fe037b 	.word	0x00fe037b
 8016844:	037b01fb 	.word	0x037b01fb
 8016848:	037b037b 	.word	0x037b037b
 801684c:	01fb00e7 	.word	0x01fb00e7
 8016850:	037b00fa 	.word	0x037b00fa
 8016854:	037b00f3 	.word	0x037b00f3
 8016858:	0254023b 	.word	0x0254023b
 801685c:	00fa0287 	.word	0x00fa0287
 8016860:	0295037b 	.word	0x0295037b
 8016864:	02b3009f 	.word	0x02b3009f
 8016868:	037b037b 	.word	0x037b037b
 801686c:	037b005d 	.word	0x037b005d
 8016870:	009f      	.short	0x009f
 8016872:	3401      	adds	r4, #1
 8016874:	e763      	b.n	801673e <_vfiprintf_r+0xe6>
 8016876:	4a34      	ldr	r2, [pc, #208]	; (8016948 <_vfiprintf_r+0x2f0>)
 8016878:	0020      	movs	r0, r4
 801687a:	920c      	str	r2, [sp, #48]	; 0x30
 801687c:	2220      	movs	r2, #32
 801687e:	4010      	ands	r0, r2
 8016880:	4214      	tst	r4, r2
 8016882:	d100      	bne.n	8016886 <_vfiprintf_r+0x22e>
 8016884:	e288      	b.n	8016d98 <_vfiprintf_r+0x740>
 8016886:	3a19      	subs	r2, #25
 8016888:	3507      	adds	r5, #7
 801688a:	4395      	bics	r5, r2
 801688c:	0028      	movs	r0, r5
 801688e:	c806      	ldmia	r0!, {r1, r2}
 8016890:	9100      	str	r1, [sp, #0]
 8016892:	9201      	str	r2, [sp, #4]
 8016894:	9004      	str	r0, [sp, #16]
 8016896:	07e2      	lsls	r2, r4, #31
 8016898:	d509      	bpl.n	80168ae <_vfiprintf_r+0x256>
 801689a:	9a00      	ldr	r2, [sp, #0]
 801689c:	9901      	ldr	r1, [sp, #4]
 801689e:	430a      	orrs	r2, r1
 80168a0:	d005      	beq.n	80168ae <_vfiprintf_r+0x256>
 80168a2:	aa15      	add	r2, sp, #84	; 0x54
 80168a4:	2130      	movs	r1, #48	; 0x30
 80168a6:	7053      	strb	r3, [r2, #1]
 80168a8:	2302      	movs	r3, #2
 80168aa:	7011      	strb	r1, [r2, #0]
 80168ac:	431c      	orrs	r4, r3
 80168ae:	4b27      	ldr	r3, [pc, #156]	; (801694c <_vfiprintf_r+0x2f4>)
 80168b0:	401c      	ands	r4, r3
 80168b2:	2302      	movs	r3, #2
 80168b4:	e1e6      	b.n	8016c84 <_vfiprintf_r+0x62c>
 80168b6:	9806      	ldr	r0, [sp, #24]
 80168b8:	f7ff f886 	bl	80159c8 <_localeconv_r>
 80168bc:	6843      	ldr	r3, [r0, #4]
 80168be:	0018      	movs	r0, r3
 80168c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80168c2:	f7e9 fc29 	bl	8000118 <strlen>
 80168c6:	900e      	str	r0, [sp, #56]	; 0x38
 80168c8:	9806      	ldr	r0, [sp, #24]
 80168ca:	f7ff f87d 	bl	80159c8 <_localeconv_r>
 80168ce:	6883      	ldr	r3, [r0, #8]
 80168d0:	930d      	str	r3, [sp, #52]	; 0x34
 80168d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d010      	beq.n	80168fa <_vfiprintf_r+0x2a2>
 80168d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d00d      	beq.n	80168fa <_vfiprintf_r+0x2a2>
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00a      	beq.n	80168fa <_vfiprintf_r+0x2a2>
 80168e4:	2380      	movs	r3, #128	; 0x80
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	431c      	orrs	r4, r3
 80168ea:	e006      	b.n	80168fa <_vfiprintf_r+0x2a2>
 80168ec:	ab14      	add	r3, sp, #80	; 0x50
 80168ee:	78da      	ldrb	r2, [r3, #3]
 80168f0:	3303      	adds	r3, #3
 80168f2:	2a00      	cmp	r2, #0
 80168f4:	d101      	bne.n	80168fa <_vfiprintf_r+0x2a2>
 80168f6:	3220      	adds	r2, #32
 80168f8:	701a      	strb	r2, [r3, #0]
 80168fa:	9b07      	ldr	r3, [sp, #28]
 80168fc:	e754      	b.n	80167a8 <_vfiprintf_r+0x150>
 80168fe:	2301      	movs	r3, #1
 8016900:	e7f2      	b.n	80168e8 <_vfiprintf_r+0x290>
 8016902:	cd08      	ldmia	r5!, {r3}
 8016904:	9309      	str	r3, [sp, #36]	; 0x24
 8016906:	2b00      	cmp	r3, #0
 8016908:	daf7      	bge.n	80168fa <_vfiprintf_r+0x2a2>
 801690a:	425b      	negs	r3, r3
 801690c:	9309      	str	r3, [sp, #36]	; 0x24
 801690e:	2304      	movs	r3, #4
 8016910:	e7ea      	b.n	80168e8 <_vfiprintf_r+0x290>
 8016912:	222b      	movs	r2, #43	; 0x2b
 8016914:	ab14      	add	r3, sp, #80	; 0x50
 8016916:	70da      	strb	r2, [r3, #3]
 8016918:	e7ef      	b.n	80168fa <_vfiprintf_r+0x2a2>
 801691a:	9b07      	ldr	r3, [sp, #28]
 801691c:	1c5a      	adds	r2, r3, #1
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	2b2a      	cmp	r3, #42	; 0x2a
 8016922:	d015      	beq.n	8016950 <_vfiprintf_r+0x2f8>
 8016924:	2100      	movs	r1, #0
 8016926:	9105      	str	r1, [sp, #20]
 8016928:	0019      	movs	r1, r3
 801692a:	3930      	subs	r1, #48	; 0x30
 801692c:	9207      	str	r2, [sp, #28]
 801692e:	2909      	cmp	r1, #9
 8016930:	d900      	bls.n	8016934 <_vfiprintf_r+0x2dc>
 8016932:	e73c      	b.n	80167ae <_vfiprintf_r+0x156>
 8016934:	230a      	movs	r3, #10
 8016936:	9805      	ldr	r0, [sp, #20]
 8016938:	4358      	muls	r0, r3
 801693a:	1843      	adds	r3, r0, r1
 801693c:	9305      	str	r3, [sp, #20]
 801693e:	7813      	ldrb	r3, [r2, #0]
 8016940:	3201      	adds	r2, #1
 8016942:	e7f1      	b.n	8016928 <_vfiprintf_r+0x2d0>
 8016944:	ffffdfff 	.word	0xffffdfff
 8016948:	0801a938 	.word	0x0801a938
 801694c:	fffffbff 	.word	0xfffffbff
 8016950:	cd08      	ldmia	r5!, {r3}
 8016952:	9305      	str	r3, [sp, #20]
 8016954:	2b00      	cmp	r3, #0
 8016956:	da02      	bge.n	801695e <_vfiprintf_r+0x306>
 8016958:	2301      	movs	r3, #1
 801695a:	425b      	negs	r3, r3
 801695c:	9305      	str	r3, [sp, #20]
 801695e:	9207      	str	r2, [sp, #28]
 8016960:	e7cb      	b.n	80168fa <_vfiprintf_r+0x2a2>
 8016962:	2380      	movs	r3, #128	; 0x80
 8016964:	e7c0      	b.n	80168e8 <_vfiprintf_r+0x290>
 8016966:	2100      	movs	r1, #0
 8016968:	9a07      	ldr	r2, [sp, #28]
 801696a:	9109      	str	r1, [sp, #36]	; 0x24
 801696c:	200a      	movs	r0, #10
 801696e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016970:	3b30      	subs	r3, #48	; 0x30
 8016972:	4341      	muls	r1, r0
 8016974:	185b      	adds	r3, r3, r1
 8016976:	9309      	str	r3, [sp, #36]	; 0x24
 8016978:	0013      	movs	r3, r2
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	3201      	adds	r2, #1
 801697e:	0019      	movs	r1, r3
 8016980:	3930      	subs	r1, #48	; 0x30
 8016982:	9207      	str	r2, [sp, #28]
 8016984:	2909      	cmp	r1, #9
 8016986:	d9f1      	bls.n	801696c <_vfiprintf_r+0x314>
 8016988:	e711      	b.n	80167ae <_vfiprintf_r+0x156>
 801698a:	9b07      	ldr	r3, [sp, #28]
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	2b68      	cmp	r3, #104	; 0x68
 8016990:	d105      	bne.n	801699e <_vfiprintf_r+0x346>
 8016992:	9b07      	ldr	r3, [sp, #28]
 8016994:	3301      	adds	r3, #1
 8016996:	9307      	str	r3, [sp, #28]
 8016998:	2380      	movs	r3, #128	; 0x80
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	e7a4      	b.n	80168e8 <_vfiprintf_r+0x290>
 801699e:	2340      	movs	r3, #64	; 0x40
 80169a0:	e7a2      	b.n	80168e8 <_vfiprintf_r+0x290>
 80169a2:	9b07      	ldr	r3, [sp, #28]
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	2b6c      	cmp	r3, #108	; 0x6c
 80169a8:	d104      	bne.n	80169b4 <_vfiprintf_r+0x35c>
 80169aa:	9b07      	ldr	r3, [sp, #28]
 80169ac:	3301      	adds	r3, #1
 80169ae:	9307      	str	r3, [sp, #28]
 80169b0:	2320      	movs	r3, #32
 80169b2:	e799      	b.n	80168e8 <_vfiprintf_r+0x290>
 80169b4:	2310      	movs	r3, #16
 80169b6:	e797      	b.n	80168e8 <_vfiprintf_r+0x290>
 80169b8:	9504      	str	r5, [sp, #16]
 80169ba:	9a04      	ldr	r2, [sp, #16]
 80169bc:	ad29      	add	r5, sp, #164	; 0xa4
 80169be:	ca08      	ldmia	r2!, {r3}
 80169c0:	9204      	str	r2, [sp, #16]
 80169c2:	2200      	movs	r2, #0
 80169c4:	702b      	strb	r3, [r5, #0]
 80169c6:	ab14      	add	r3, sp, #80	; 0x50
 80169c8:	70da      	strb	r2, [r3, #3]
 80169ca:	2301      	movs	r3, #1
 80169cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80169ce:	9305      	str	r3, [sp, #20]
 80169d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169d2:	9a05      	ldr	r2, [sp, #20]
 80169d4:	930a      	str	r3, [sp, #40]	; 0x28
 80169d6:	4293      	cmp	r3, r2
 80169d8:	da00      	bge.n	80169dc <_vfiprintf_r+0x384>
 80169da:	920a      	str	r2, [sp, #40]	; 0x28
 80169dc:	ab14      	add	r3, sp, #80	; 0x50
 80169de:	3303      	adds	r3, #3
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	1e5a      	subs	r2, r3, #1
 80169e4:	4193      	sbcs	r3, r2
 80169e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169e8:	18d3      	adds	r3, r2, r3
 80169ea:	930a      	str	r3, [sp, #40]	; 0x28
 80169ec:	0022      	movs	r2, r4
 80169ee:	2302      	movs	r3, #2
 80169f0:	401a      	ands	r2, r3
 80169f2:	9210      	str	r2, [sp, #64]	; 0x40
 80169f4:	421c      	tst	r4, r3
 80169f6:	d002      	beq.n	80169fe <_vfiprintf_r+0x3a6>
 80169f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169fa:	3302      	adds	r3, #2
 80169fc:	930a      	str	r3, [sp, #40]	; 0x28
 80169fe:	2384      	movs	r3, #132	; 0x84
 8016a00:	0022      	movs	r2, r4
 8016a02:	401a      	ands	r2, r3
 8016a04:	9211      	str	r2, [sp, #68]	; 0x44
 8016a06:	421c      	tst	r4, r3
 8016a08:	d11f      	bne.n	8016a4a <_vfiprintf_r+0x3f2>
 8016a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a0e:	1a9b      	subs	r3, r3, r2
 8016a10:	1e1e      	subs	r6, r3, #0
 8016a12:	dd1a      	ble.n	8016a4a <_vfiprintf_r+0x3f2>
 8016a14:	0039      	movs	r1, r7
 8016a16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a18:	48c9      	ldr	r0, [pc, #804]	; (8016d40 <_vfiprintf_r+0x6e8>)
 8016a1a:	9312      	str	r3, [sp, #72]	; 0x48
 8016a1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a1e:	3301      	adds	r3, #1
 8016a20:	3108      	adds	r1, #8
 8016a22:	6038      	str	r0, [r7, #0]
 8016a24:	2e10      	cmp	r6, #16
 8016a26:	dd00      	ble.n	8016a2a <_vfiprintf_r+0x3d2>
 8016a28:	e251      	b.n	8016ece <_vfiprintf_r+0x876>
 8016a2a:	18b2      	adds	r2, r6, r2
 8016a2c:	607e      	str	r6, [r7, #4]
 8016a2e:	9218      	str	r2, [sp, #96]	; 0x60
 8016a30:	000f      	movs	r7, r1
 8016a32:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a34:	2b07      	cmp	r3, #7
 8016a36:	dd08      	ble.n	8016a4a <_vfiprintf_r+0x3f2>
 8016a38:	9903      	ldr	r1, [sp, #12]
 8016a3a:	9806      	ldr	r0, [sp, #24]
 8016a3c:	aa16      	add	r2, sp, #88	; 0x58
 8016a3e:	f7ff fdd7 	bl	80165f0 <__sprint_r>
 8016a42:	2800      	cmp	r0, #0
 8016a44:	d000      	beq.n	8016a48 <_vfiprintf_r+0x3f0>
 8016a46:	e29c      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016a48:	af19      	add	r7, sp, #100	; 0x64
 8016a4a:	ab14      	add	r3, sp, #80	; 0x50
 8016a4c:	1cda      	adds	r2, r3, #3
 8016a4e:	78db      	ldrb	r3, [r3, #3]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d017      	beq.n	8016a84 <_vfiprintf_r+0x42c>
 8016a54:	603a      	str	r2, [r7, #0]
 8016a56:	2201      	movs	r2, #1
 8016a58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a5a:	607a      	str	r2, [r7, #4]
 8016a5c:	9312      	str	r3, [sp, #72]	; 0x48
 8016a5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a62:	3201      	adds	r2, #1
 8016a64:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a66:	3301      	adds	r3, #1
 8016a68:	9218      	str	r2, [sp, #96]	; 0x60
 8016a6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a6c:	3708      	adds	r7, #8
 8016a6e:	2b07      	cmp	r3, #7
 8016a70:	dd08      	ble.n	8016a84 <_vfiprintf_r+0x42c>
 8016a72:	9903      	ldr	r1, [sp, #12]
 8016a74:	9806      	ldr	r0, [sp, #24]
 8016a76:	aa16      	add	r2, sp, #88	; 0x58
 8016a78:	f7ff fdba 	bl	80165f0 <__sprint_r>
 8016a7c:	2800      	cmp	r0, #0
 8016a7e:	d000      	beq.n	8016a82 <_vfiprintf_r+0x42a>
 8016a80:	e27f      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016a82:	af19      	add	r7, sp, #100	; 0x64
 8016a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d018      	beq.n	8016abc <_vfiprintf_r+0x464>
 8016a8a:	aa15      	add	r2, sp, #84	; 0x54
 8016a8c:	603a      	str	r2, [r7, #0]
 8016a8e:	2202      	movs	r2, #2
 8016a90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a92:	607a      	str	r2, [r7, #4]
 8016a94:	9310      	str	r3, [sp, #64]	; 0x40
 8016a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a9a:	3202      	adds	r2, #2
 8016a9c:	9312      	str	r3, [sp, #72]	; 0x48
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	9218      	str	r2, [sp, #96]	; 0x60
 8016aa2:	9317      	str	r3, [sp, #92]	; 0x5c
 8016aa4:	3708      	adds	r7, #8
 8016aa6:	2b07      	cmp	r3, #7
 8016aa8:	dd08      	ble.n	8016abc <_vfiprintf_r+0x464>
 8016aaa:	9903      	ldr	r1, [sp, #12]
 8016aac:	9806      	ldr	r0, [sp, #24]
 8016aae:	aa16      	add	r2, sp, #88	; 0x58
 8016ab0:	f7ff fd9e 	bl	80165f0 <__sprint_r>
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	d000      	beq.n	8016aba <_vfiprintf_r+0x462>
 8016ab8:	e263      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016aba:	af19      	add	r7, sp, #100	; 0x64
 8016abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016abe:	2b80      	cmp	r3, #128	; 0x80
 8016ac0:	d11f      	bne.n	8016b02 <_vfiprintf_r+0x4aa>
 8016ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ac6:	1a9b      	subs	r3, r3, r2
 8016ac8:	1e1e      	subs	r6, r3, #0
 8016aca:	dd1a      	ble.n	8016b02 <_vfiprintf_r+0x4aa>
 8016acc:	0039      	movs	r1, r7
 8016ace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ad0:	489c      	ldr	r0, [pc, #624]	; (8016d44 <_vfiprintf_r+0x6ec>)
 8016ad2:	9310      	str	r3, [sp, #64]	; 0x40
 8016ad4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	3108      	adds	r1, #8
 8016ada:	6038      	str	r0, [r7, #0]
 8016adc:	2e10      	cmp	r6, #16
 8016ade:	dd00      	ble.n	8016ae2 <_vfiprintf_r+0x48a>
 8016ae0:	e209      	b.n	8016ef6 <_vfiprintf_r+0x89e>
 8016ae2:	18b2      	adds	r2, r6, r2
 8016ae4:	607e      	str	r6, [r7, #4]
 8016ae6:	9218      	str	r2, [sp, #96]	; 0x60
 8016ae8:	000f      	movs	r7, r1
 8016aea:	9317      	str	r3, [sp, #92]	; 0x5c
 8016aec:	2b07      	cmp	r3, #7
 8016aee:	dd08      	ble.n	8016b02 <_vfiprintf_r+0x4aa>
 8016af0:	9903      	ldr	r1, [sp, #12]
 8016af2:	9806      	ldr	r0, [sp, #24]
 8016af4:	aa16      	add	r2, sp, #88	; 0x58
 8016af6:	f7ff fd7b 	bl	80165f0 <__sprint_r>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d000      	beq.n	8016b00 <_vfiprintf_r+0x4a8>
 8016afe:	e240      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016b00:	af19      	add	r7, sp, #100	; 0x64
 8016b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b04:	9a05      	ldr	r2, [sp, #20]
 8016b06:	1a9b      	subs	r3, r3, r2
 8016b08:	1e1e      	subs	r6, r3, #0
 8016b0a:	dd1a      	ble.n	8016b42 <_vfiprintf_r+0x4ea>
 8016b0c:	0039      	movs	r1, r7
 8016b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b10:	488c      	ldr	r0, [pc, #560]	; (8016d44 <_vfiprintf_r+0x6ec>)
 8016b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b16:	3301      	adds	r3, #1
 8016b18:	3108      	adds	r1, #8
 8016b1a:	6038      	str	r0, [r7, #0]
 8016b1c:	2e10      	cmp	r6, #16
 8016b1e:	dd00      	ble.n	8016b22 <_vfiprintf_r+0x4ca>
 8016b20:	e1fd      	b.n	8016f1e <_vfiprintf_r+0x8c6>
 8016b22:	18b2      	adds	r2, r6, r2
 8016b24:	607e      	str	r6, [r7, #4]
 8016b26:	9218      	str	r2, [sp, #96]	; 0x60
 8016b28:	000f      	movs	r7, r1
 8016b2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b2c:	2b07      	cmp	r3, #7
 8016b2e:	dd08      	ble.n	8016b42 <_vfiprintf_r+0x4ea>
 8016b30:	9903      	ldr	r1, [sp, #12]
 8016b32:	9806      	ldr	r0, [sp, #24]
 8016b34:	aa16      	add	r2, sp, #88	; 0x58
 8016b36:	f7ff fd5b 	bl	80165f0 <__sprint_r>
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	d000      	beq.n	8016b40 <_vfiprintf_r+0x4e8>
 8016b3e:	e220      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016b40:	af19      	add	r7, sp, #100	; 0x64
 8016b42:	9b05      	ldr	r3, [sp, #20]
 8016b44:	603d      	str	r5, [r7, #0]
 8016b46:	607b      	str	r3, [r7, #4]
 8016b48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b4a:	3708      	adds	r7, #8
 8016b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b50:	9b05      	ldr	r3, [sp, #20]
 8016b52:	4694      	mov	ip, r2
 8016b54:	4463      	add	r3, ip
 8016b56:	9318      	str	r3, [sp, #96]	; 0x60
 8016b58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b5a:	9305      	str	r3, [sp, #20]
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b60:	2b07      	cmp	r3, #7
 8016b62:	dd08      	ble.n	8016b76 <_vfiprintf_r+0x51e>
 8016b64:	9903      	ldr	r1, [sp, #12]
 8016b66:	9806      	ldr	r0, [sp, #24]
 8016b68:	aa16      	add	r2, sp, #88	; 0x58
 8016b6a:	f7ff fd41 	bl	80165f0 <__sprint_r>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	d000      	beq.n	8016b74 <_vfiprintf_r+0x51c>
 8016b72:	e206      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016b74:	af19      	add	r7, sp, #100	; 0x64
 8016b76:	0763      	lsls	r3, r4, #29
 8016b78:	d500      	bpl.n	8016b7c <_vfiprintf_r+0x524>
 8016b7a:	e1e4      	b.n	8016f46 <_vfiprintf_r+0x8ee>
 8016b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b80:	4293      	cmp	r3, r2
 8016b82:	da00      	bge.n	8016b86 <_vfiprintf_r+0x52e>
 8016b84:	0013      	movs	r3, r2
 8016b86:	9a08      	ldr	r2, [sp, #32]
 8016b88:	18d3      	adds	r3, r2, r3
 8016b8a:	9308      	str	r3, [sp, #32]
 8016b8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b8e:	9305      	str	r3, [sp, #20]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d007      	beq.n	8016ba4 <_vfiprintf_r+0x54c>
 8016b94:	9903      	ldr	r1, [sp, #12]
 8016b96:	9806      	ldr	r0, [sp, #24]
 8016b98:	aa16      	add	r2, sp, #88	; 0x58
 8016b9a:	f7ff fd29 	bl	80165f0 <__sprint_r>
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	d000      	beq.n	8016ba4 <_vfiprintf_r+0x54c>
 8016ba2:	e1ee      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	9d04      	ldr	r5, [sp, #16]
 8016ba8:	9317      	str	r3, [sp, #92]	; 0x5c
 8016baa:	af19      	add	r7, sp, #100	; 0x64
 8016bac:	e5c6      	b.n	801673c <_vfiprintf_r+0xe4>
 8016bae:	2310      	movs	r3, #16
 8016bb0:	431c      	orrs	r4, r3
 8016bb2:	06a3      	lsls	r3, r4, #26
 8016bb4:	d52b      	bpl.n	8016c0e <_vfiprintf_r+0x5b6>
 8016bb6:	2307      	movs	r3, #7
 8016bb8:	3507      	adds	r5, #7
 8016bba:	439d      	bics	r5, r3
 8016bbc:	0029      	movs	r1, r5
 8016bbe:	c90c      	ldmia	r1!, {r2, r3}
 8016bc0:	9200      	str	r2, [sp, #0]
 8016bc2:	9301      	str	r3, [sp, #4]
 8016bc4:	9104      	str	r1, [sp, #16]
 8016bc6:	9a01      	ldr	r2, [sp, #4]
 8016bc8:	2301      	movs	r3, #1
 8016bca:	2a00      	cmp	r2, #0
 8016bcc:	da09      	bge.n	8016be2 <_vfiprintf_r+0x58a>
 8016bce:	9d00      	ldr	r5, [sp, #0]
 8016bd0:	9e01      	ldr	r6, [sp, #4]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	4269      	negs	r1, r5
 8016bd6:	41b2      	sbcs	r2, r6
 8016bd8:	9100      	str	r1, [sp, #0]
 8016bda:	9201      	str	r2, [sp, #4]
 8016bdc:	212d      	movs	r1, #45	; 0x2d
 8016bde:	aa14      	add	r2, sp, #80	; 0x50
 8016be0:	70d1      	strb	r1, [r2, #3]
 8016be2:	9901      	ldr	r1, [sp, #4]
 8016be4:	9a00      	ldr	r2, [sp, #0]
 8016be6:	430a      	orrs	r2, r1
 8016be8:	9905      	ldr	r1, [sp, #20]
 8016bea:	3101      	adds	r1, #1
 8016bec:	d100      	bne.n	8016bf0 <_vfiprintf_r+0x598>
 8016bee:	e1fc      	b.n	8016fea <_vfiprintf_r+0x992>
 8016bf0:	2180      	movs	r1, #128	; 0x80
 8016bf2:	0020      	movs	r0, r4
 8016bf4:	4388      	bics	r0, r1
 8016bf6:	0006      	movs	r6, r0
 8016bf8:	2a00      	cmp	r2, #0
 8016bfa:	d000      	beq.n	8016bfe <_vfiprintf_r+0x5a6>
 8016bfc:	e1f9      	b.n	8016ff2 <_vfiprintf_r+0x99a>
 8016bfe:	9a05      	ldr	r2, [sp, #20]
 8016c00:	2a00      	cmp	r2, #0
 8016c02:	d100      	bne.n	8016c06 <_vfiprintf_r+0x5ae>
 8016c04:	e149      	b.n	8016e9a <_vfiprintf_r+0x842>
 8016c06:	2b01      	cmp	r3, #1
 8016c08:	d000      	beq.n	8016c0c <_vfiprintf_r+0x5b4>
 8016c0a:	e1f5      	b.n	8016ff8 <_vfiprintf_r+0x9a0>
 8016c0c:	e0ea      	b.n	8016de4 <_vfiprintf_r+0x78c>
 8016c0e:	1d2b      	adds	r3, r5, #4
 8016c10:	9304      	str	r3, [sp, #16]
 8016c12:	06e3      	lsls	r3, r4, #27
 8016c14:	d504      	bpl.n	8016c20 <_vfiprintf_r+0x5c8>
 8016c16:	682b      	ldr	r3, [r5, #0]
 8016c18:	9300      	str	r3, [sp, #0]
 8016c1a:	17db      	asrs	r3, r3, #31
 8016c1c:	9301      	str	r3, [sp, #4]
 8016c1e:	e7d2      	b.n	8016bc6 <_vfiprintf_r+0x56e>
 8016c20:	682b      	ldr	r3, [r5, #0]
 8016c22:	0662      	lsls	r2, r4, #25
 8016c24:	d501      	bpl.n	8016c2a <_vfiprintf_r+0x5d2>
 8016c26:	b21b      	sxth	r3, r3
 8016c28:	e7f6      	b.n	8016c18 <_vfiprintf_r+0x5c0>
 8016c2a:	05a2      	lsls	r2, r4, #22
 8016c2c:	d5f4      	bpl.n	8016c18 <_vfiprintf_r+0x5c0>
 8016c2e:	b25b      	sxtb	r3, r3
 8016c30:	e7f2      	b.n	8016c18 <_vfiprintf_r+0x5c0>
 8016c32:	cd08      	ldmia	r5!, {r3}
 8016c34:	06a2      	lsls	r2, r4, #26
 8016c36:	d504      	bpl.n	8016c42 <_vfiprintf_r+0x5ea>
 8016c38:	9a08      	ldr	r2, [sp, #32]
 8016c3a:	601a      	str	r2, [r3, #0]
 8016c3c:	17d2      	asrs	r2, r2, #31
 8016c3e:	605a      	str	r2, [r3, #4]
 8016c40:	e57c      	b.n	801673c <_vfiprintf_r+0xe4>
 8016c42:	06e2      	lsls	r2, r4, #27
 8016c44:	d502      	bpl.n	8016c4c <_vfiprintf_r+0x5f4>
 8016c46:	9a08      	ldr	r2, [sp, #32]
 8016c48:	601a      	str	r2, [r3, #0]
 8016c4a:	e577      	b.n	801673c <_vfiprintf_r+0xe4>
 8016c4c:	0662      	lsls	r2, r4, #25
 8016c4e:	d502      	bpl.n	8016c56 <_vfiprintf_r+0x5fe>
 8016c50:	9a08      	ldr	r2, [sp, #32]
 8016c52:	801a      	strh	r2, [r3, #0]
 8016c54:	e572      	b.n	801673c <_vfiprintf_r+0xe4>
 8016c56:	05a2      	lsls	r2, r4, #22
 8016c58:	d5f5      	bpl.n	8016c46 <_vfiprintf_r+0x5ee>
 8016c5a:	9a08      	ldr	r2, [sp, #32]
 8016c5c:	701a      	strb	r2, [r3, #0]
 8016c5e:	e56d      	b.n	801673c <_vfiprintf_r+0xe4>
 8016c60:	2310      	movs	r3, #16
 8016c62:	431c      	orrs	r4, r3
 8016c64:	2320      	movs	r3, #32
 8016c66:	0021      	movs	r1, r4
 8016c68:	4019      	ands	r1, r3
 8016c6a:	421c      	tst	r4, r3
 8016c6c:	d00d      	beq.n	8016c8a <_vfiprintf_r+0x632>
 8016c6e:	3b19      	subs	r3, #25
 8016c70:	3507      	adds	r5, #7
 8016c72:	439d      	bics	r5, r3
 8016c74:	0029      	movs	r1, r5
 8016c76:	c90c      	ldmia	r1!, {r2, r3}
 8016c78:	9200      	str	r2, [sp, #0]
 8016c7a:	9301      	str	r3, [sp, #4]
 8016c7c:	9104      	str	r1, [sp, #16]
 8016c7e:	4b32      	ldr	r3, [pc, #200]	; (8016d48 <_vfiprintf_r+0x6f0>)
 8016c80:	401c      	ands	r4, r3
 8016c82:	2300      	movs	r3, #0
 8016c84:	2100      	movs	r1, #0
 8016c86:	aa14      	add	r2, sp, #80	; 0x50
 8016c88:	e7aa      	b.n	8016be0 <_vfiprintf_r+0x588>
 8016c8a:	1d2b      	adds	r3, r5, #4
 8016c8c:	0022      	movs	r2, r4
 8016c8e:	9304      	str	r3, [sp, #16]
 8016c90:	2310      	movs	r3, #16
 8016c92:	401a      	ands	r2, r3
 8016c94:	421c      	tst	r4, r3
 8016c96:	d003      	beq.n	8016ca0 <_vfiprintf_r+0x648>
 8016c98:	682b      	ldr	r3, [r5, #0]
 8016c9a:	9300      	str	r3, [sp, #0]
 8016c9c:	9101      	str	r1, [sp, #4]
 8016c9e:	e7ee      	b.n	8016c7e <_vfiprintf_r+0x626>
 8016ca0:	2340      	movs	r3, #64	; 0x40
 8016ca2:	0021      	movs	r1, r4
 8016ca4:	4019      	ands	r1, r3
 8016ca6:	421c      	tst	r4, r3
 8016ca8:	d004      	beq.n	8016cb4 <_vfiprintf_r+0x65c>
 8016caa:	682b      	ldr	r3, [r5, #0]
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	9300      	str	r3, [sp, #0]
 8016cb0:	9201      	str	r2, [sp, #4]
 8016cb2:	e7e4      	b.n	8016c7e <_vfiprintf_r+0x626>
 8016cb4:	2380      	movs	r3, #128	; 0x80
 8016cb6:	0022      	movs	r2, r4
 8016cb8:	009b      	lsls	r3, r3, #2
 8016cba:	401a      	ands	r2, r3
 8016cbc:	421c      	tst	r4, r3
 8016cbe:	d002      	beq.n	8016cc6 <_vfiprintf_r+0x66e>
 8016cc0:	682b      	ldr	r3, [r5, #0]
 8016cc2:	b2db      	uxtb	r3, r3
 8016cc4:	e7e9      	b.n	8016c9a <_vfiprintf_r+0x642>
 8016cc6:	682b      	ldr	r3, [r5, #0]
 8016cc8:	e7f1      	b.n	8016cae <_vfiprintf_r+0x656>
 8016cca:	002b      	movs	r3, r5
 8016ccc:	cb04      	ldmia	r3!, {r2}
 8016cce:	491f      	ldr	r1, [pc, #124]	; (8016d4c <_vfiprintf_r+0x6f4>)
 8016cd0:	9304      	str	r3, [sp, #16]
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	9200      	str	r2, [sp, #0]
 8016cd6:	aa15      	add	r2, sp, #84	; 0x54
 8016cd8:	8011      	strh	r1, [r2, #0]
 8016cda:	4a1d      	ldr	r2, [pc, #116]	; (8016d50 <_vfiprintf_r+0x6f8>)
 8016cdc:	9301      	str	r3, [sp, #4]
 8016cde:	3302      	adds	r3, #2
 8016ce0:	431c      	orrs	r4, r3
 8016ce2:	920c      	str	r2, [sp, #48]	; 0x30
 8016ce4:	e7ce      	b.n	8016c84 <_vfiprintf_r+0x62c>
 8016ce6:	002b      	movs	r3, r5
 8016ce8:	2200      	movs	r2, #0
 8016cea:	cb20      	ldmia	r3!, {r5}
 8016cec:	9304      	str	r3, [sp, #16]
 8016cee:	ab14      	add	r3, sp, #80	; 0x50
 8016cf0:	70da      	strb	r2, [r3, #3]
 8016cf2:	9b05      	ldr	r3, [sp, #20]
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	d00d      	beq.n	8016d14 <_vfiprintf_r+0x6bc>
 8016cf8:	2100      	movs	r1, #0
 8016cfa:	0028      	movs	r0, r5
 8016cfc:	9a05      	ldr	r2, [sp, #20]
 8016cfe:	f7fe fe7d 	bl	80159fc <memchr>
 8016d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d100      	bne.n	8016d0a <_vfiprintf_r+0x6b2>
 8016d08:	e662      	b.n	80169d0 <_vfiprintf_r+0x378>
 8016d0a:	1b43      	subs	r3, r0, r5
 8016d0c:	9305      	str	r3, [sp, #20]
 8016d0e:	2300      	movs	r3, #0
 8016d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d12:	e65d      	b.n	80169d0 <_vfiprintf_r+0x378>
 8016d14:	0028      	movs	r0, r5
 8016d16:	f7e9 f9ff 	bl	8000118 <strlen>
 8016d1a:	9005      	str	r0, [sp, #20]
 8016d1c:	e7f7      	b.n	8016d0e <_vfiprintf_r+0x6b6>
 8016d1e:	2310      	movs	r3, #16
 8016d20:	431c      	orrs	r4, r3
 8016d22:	2320      	movs	r3, #32
 8016d24:	0021      	movs	r1, r4
 8016d26:	4019      	ands	r1, r3
 8016d28:	421c      	tst	r4, r3
 8016d2a:	d013      	beq.n	8016d54 <_vfiprintf_r+0x6fc>
 8016d2c:	3b19      	subs	r3, #25
 8016d2e:	3507      	adds	r5, #7
 8016d30:	439d      	bics	r5, r3
 8016d32:	0029      	movs	r1, r5
 8016d34:	c90c      	ldmia	r1!, {r2, r3}
 8016d36:	9200      	str	r2, [sp, #0]
 8016d38:	9301      	str	r3, [sp, #4]
 8016d3a:	9104      	str	r1, [sp, #16]
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	e7a1      	b.n	8016c84 <_vfiprintf_r+0x62c>
 8016d40:	0801ac10 	.word	0x0801ac10
 8016d44:	0801ac20 	.word	0x0801ac20
 8016d48:	fffffbff 	.word	0xfffffbff
 8016d4c:	00007830 	.word	0x00007830
 8016d50:	0801a938 	.word	0x0801a938
 8016d54:	1d2b      	adds	r3, r5, #4
 8016d56:	0022      	movs	r2, r4
 8016d58:	9304      	str	r3, [sp, #16]
 8016d5a:	2310      	movs	r3, #16
 8016d5c:	401a      	ands	r2, r3
 8016d5e:	421c      	tst	r4, r3
 8016d60:	d003      	beq.n	8016d6a <_vfiprintf_r+0x712>
 8016d62:	682b      	ldr	r3, [r5, #0]
 8016d64:	9300      	str	r3, [sp, #0]
 8016d66:	9101      	str	r1, [sp, #4]
 8016d68:	e7e8      	b.n	8016d3c <_vfiprintf_r+0x6e4>
 8016d6a:	2340      	movs	r3, #64	; 0x40
 8016d6c:	0021      	movs	r1, r4
 8016d6e:	4019      	ands	r1, r3
 8016d70:	421c      	tst	r4, r3
 8016d72:	d004      	beq.n	8016d7e <_vfiprintf_r+0x726>
 8016d74:	682b      	ldr	r3, [r5, #0]
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	9300      	str	r3, [sp, #0]
 8016d7a:	9201      	str	r2, [sp, #4]
 8016d7c:	e7de      	b.n	8016d3c <_vfiprintf_r+0x6e4>
 8016d7e:	2380      	movs	r3, #128	; 0x80
 8016d80:	0022      	movs	r2, r4
 8016d82:	009b      	lsls	r3, r3, #2
 8016d84:	401a      	ands	r2, r3
 8016d86:	421c      	tst	r4, r3
 8016d88:	d002      	beq.n	8016d90 <_vfiprintf_r+0x738>
 8016d8a:	682b      	ldr	r3, [r5, #0]
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	e7e9      	b.n	8016d64 <_vfiprintf_r+0x70c>
 8016d90:	682b      	ldr	r3, [r5, #0]
 8016d92:	e7f1      	b.n	8016d78 <_vfiprintf_r+0x720>
 8016d94:	4aad      	ldr	r2, [pc, #692]	; (801704c <_vfiprintf_r+0x9f4>)
 8016d96:	e56f      	b.n	8016878 <_vfiprintf_r+0x220>
 8016d98:	1d2a      	adds	r2, r5, #4
 8016d9a:	0021      	movs	r1, r4
 8016d9c:	9204      	str	r2, [sp, #16]
 8016d9e:	2210      	movs	r2, #16
 8016da0:	4011      	ands	r1, r2
 8016da2:	4214      	tst	r4, r2
 8016da4:	d003      	beq.n	8016dae <_vfiprintf_r+0x756>
 8016da6:	682a      	ldr	r2, [r5, #0]
 8016da8:	9200      	str	r2, [sp, #0]
 8016daa:	9001      	str	r0, [sp, #4]
 8016dac:	e573      	b.n	8016896 <_vfiprintf_r+0x23e>
 8016dae:	2240      	movs	r2, #64	; 0x40
 8016db0:	0020      	movs	r0, r4
 8016db2:	4010      	ands	r0, r2
 8016db4:	4214      	tst	r4, r2
 8016db6:	d004      	beq.n	8016dc2 <_vfiprintf_r+0x76a>
 8016db8:	682a      	ldr	r2, [r5, #0]
 8016dba:	b292      	uxth	r2, r2
 8016dbc:	9200      	str	r2, [sp, #0]
 8016dbe:	9101      	str	r1, [sp, #4]
 8016dc0:	e569      	b.n	8016896 <_vfiprintf_r+0x23e>
 8016dc2:	2280      	movs	r2, #128	; 0x80
 8016dc4:	0021      	movs	r1, r4
 8016dc6:	0092      	lsls	r2, r2, #2
 8016dc8:	4011      	ands	r1, r2
 8016dca:	4214      	tst	r4, r2
 8016dcc:	d002      	beq.n	8016dd4 <_vfiprintf_r+0x77c>
 8016dce:	682a      	ldr	r2, [r5, #0]
 8016dd0:	b2d2      	uxtb	r2, r2
 8016dd2:	e7e9      	b.n	8016da8 <_vfiprintf_r+0x750>
 8016dd4:	682a      	ldr	r2, [r5, #0]
 8016dd6:	e7f1      	b.n	8016dbc <_vfiprintf_r+0x764>
 8016dd8:	9b01      	ldr	r3, [sp, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d109      	bne.n	8016df2 <_vfiprintf_r+0x79a>
 8016dde:	9b00      	ldr	r3, [sp, #0]
 8016de0:	2b09      	cmp	r3, #9
 8016de2:	d806      	bhi.n	8016df2 <_vfiprintf_r+0x79a>
 8016de4:	25b7      	movs	r5, #183	; 0xb7
 8016de6:	ab14      	add	r3, sp, #80	; 0x50
 8016de8:	18ed      	adds	r5, r5, r3
 8016dea:	9b00      	ldr	r3, [sp, #0]
 8016dec:	3330      	adds	r3, #48	; 0x30
 8016dee:	702b      	strb	r3, [r5, #0]
 8016df0:	e125      	b.n	801703e <_vfiprintf_r+0x9e6>
 8016df2:	2380      	movs	r3, #128	; 0x80
 8016df4:	0032      	movs	r2, r6
 8016df6:	2400      	movs	r4, #0
 8016df8:	00db      	lsls	r3, r3, #3
 8016dfa:	401a      	ands	r2, r3
 8016dfc:	ad42      	add	r5, sp, #264	; 0x108
 8016dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8016e00:	220a      	movs	r2, #10
 8016e02:	9800      	ldr	r0, [sp, #0]
 8016e04:	9901      	ldr	r1, [sp, #4]
 8016e06:	2300      	movs	r3, #0
 8016e08:	f7e9 fb90 	bl	800052c <__aeabi_uldivmod>
 8016e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e0e:	3d01      	subs	r5, #1
 8016e10:	3230      	adds	r2, #48	; 0x30
 8016e12:	702a      	strb	r2, [r5, #0]
 8016e14:	3401      	adds	r4, #1
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d01a      	beq.n	8016e50 <_vfiprintf_r+0x7f8>
 8016e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	42a3      	cmp	r3, r4
 8016e20:	d116      	bne.n	8016e50 <_vfiprintf_r+0x7f8>
 8016e22:	2cff      	cmp	r4, #255	; 0xff
 8016e24:	d014      	beq.n	8016e50 <_vfiprintf_r+0x7f8>
 8016e26:	9b01      	ldr	r3, [sp, #4]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d102      	bne.n	8016e32 <_vfiprintf_r+0x7da>
 8016e2c:	9b00      	ldr	r3, [sp, #0]
 8016e2e:	2b09      	cmp	r3, #9
 8016e30:	d90e      	bls.n	8016e50 <_vfiprintf_r+0x7f8>
 8016e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e36:	1aed      	subs	r5, r5, r3
 8016e38:	001a      	movs	r2, r3
 8016e3a:	0028      	movs	r0, r5
 8016e3c:	f7fb f8e2 	bl	8012004 <strncpy>
 8016e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e42:	2400      	movs	r4, #0
 8016e44:	785b      	ldrb	r3, [r3, #1]
 8016e46:	1e5a      	subs	r2, r3, #1
 8016e48:	4193      	sbcs	r3, r2
 8016e4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e4c:	18d3      	adds	r3, r2, r3
 8016e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8016e50:	2300      	movs	r3, #0
 8016e52:	9800      	ldr	r0, [sp, #0]
 8016e54:	9901      	ldr	r1, [sp, #4]
 8016e56:	220a      	movs	r2, #10
 8016e58:	f7e9 fb68 	bl	800052c <__aeabi_uldivmod>
 8016e5c:	9b01      	ldr	r3, [sp, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d103      	bne.n	8016e6a <_vfiprintf_r+0x812>
 8016e62:	9b00      	ldr	r3, [sp, #0]
 8016e64:	2b09      	cmp	r3, #9
 8016e66:	d800      	bhi.n	8016e6a <_vfiprintf_r+0x812>
 8016e68:	e0e9      	b.n	801703e <_vfiprintf_r+0x9e6>
 8016e6a:	9000      	str	r0, [sp, #0]
 8016e6c:	9101      	str	r1, [sp, #4]
 8016e6e:	e7c7      	b.n	8016e00 <_vfiprintf_r+0x7a8>
 8016e70:	200f      	movs	r0, #15
 8016e72:	9b00      	ldr	r3, [sp, #0]
 8016e74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e76:	4003      	ands	r3, r0
 8016e78:	5cd3      	ldrb	r3, [r2, r3]
 8016e7a:	3d01      	subs	r5, #1
 8016e7c:	702b      	strb	r3, [r5, #0]
 8016e7e:	9b01      	ldr	r3, [sp, #4]
 8016e80:	0719      	lsls	r1, r3, #28
 8016e82:	9b00      	ldr	r3, [sp, #0]
 8016e84:	091a      	lsrs	r2, r3, #4
 8016e86:	9b01      	ldr	r3, [sp, #4]
 8016e88:	4311      	orrs	r1, r2
 8016e8a:	091b      	lsrs	r3, r3, #4
 8016e8c:	9301      	str	r3, [sp, #4]
 8016e8e:	000b      	movs	r3, r1
 8016e90:	9a01      	ldr	r2, [sp, #4]
 8016e92:	9100      	str	r1, [sp, #0]
 8016e94:	4313      	orrs	r3, r2
 8016e96:	d1ec      	bne.n	8016e72 <_vfiprintf_r+0x81a>
 8016e98:	e0d1      	b.n	801703e <_vfiprintf_r+0x9e6>
 8016e9a:	ad42      	add	r5, sp, #264	; 0x108
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d000      	beq.n	8016ea2 <_vfiprintf_r+0x84a>
 8016ea0:	e0cd      	b.n	801703e <_vfiprintf_r+0x9e6>
 8016ea2:	07e3      	lsls	r3, r4, #31
 8016ea4:	d400      	bmi.n	8016ea8 <_vfiprintf_r+0x850>
 8016ea6:	e0ca      	b.n	801703e <_vfiprintf_r+0x9e6>
 8016ea8:	25b7      	movs	r5, #183	; 0xb7
 8016eaa:	ab14      	add	r3, sp, #80	; 0x50
 8016eac:	18ed      	adds	r5, r5, r3
 8016eae:	2330      	movs	r3, #48	; 0x30
 8016eb0:	e79d      	b.n	8016dee <_vfiprintf_r+0x796>
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d100      	bne.n	8016eb8 <_vfiprintf_r+0x860>
 8016eb6:	e089      	b.n	8016fcc <_vfiprintf_r+0x974>
 8016eb8:	2100      	movs	r1, #0
 8016eba:	aa29      	add	r2, sp, #164	; 0xa4
 8016ebc:	7013      	strb	r3, [r2, #0]
 8016ebe:	ab14      	add	r3, sp, #80	; 0x50
 8016ec0:	70d9      	strb	r1, [r3, #3]
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	9504      	str	r5, [sp, #16]
 8016ec6:	9305      	str	r3, [sp, #20]
 8016ec8:	0015      	movs	r5, r2
 8016eca:	910b      	str	r1, [sp, #44]	; 0x2c
 8016ecc:	e580      	b.n	80169d0 <_vfiprintf_r+0x378>
 8016ece:	2010      	movs	r0, #16
 8016ed0:	1812      	adds	r2, r2, r0
 8016ed2:	6078      	str	r0, [r7, #4]
 8016ed4:	9218      	str	r2, [sp, #96]	; 0x60
 8016ed6:	9317      	str	r3, [sp, #92]	; 0x5c
 8016ed8:	2b07      	cmp	r3, #7
 8016eda:	dd07      	ble.n	8016eec <_vfiprintf_r+0x894>
 8016edc:	9903      	ldr	r1, [sp, #12]
 8016ede:	9806      	ldr	r0, [sp, #24]
 8016ee0:	aa16      	add	r2, sp, #88	; 0x58
 8016ee2:	f7ff fb85 	bl	80165f0 <__sprint_r>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d14b      	bne.n	8016f82 <_vfiprintf_r+0x92a>
 8016eea:	a919      	add	r1, sp, #100	; 0x64
 8016eec:	0033      	movs	r3, r6
 8016eee:	3b10      	subs	r3, #16
 8016ef0:	001e      	movs	r6, r3
 8016ef2:	000f      	movs	r7, r1
 8016ef4:	e58e      	b.n	8016a14 <_vfiprintf_r+0x3bc>
 8016ef6:	2010      	movs	r0, #16
 8016ef8:	1812      	adds	r2, r2, r0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	9218      	str	r2, [sp, #96]	; 0x60
 8016efe:	9317      	str	r3, [sp, #92]	; 0x5c
 8016f00:	2b07      	cmp	r3, #7
 8016f02:	dd07      	ble.n	8016f14 <_vfiprintf_r+0x8bc>
 8016f04:	9903      	ldr	r1, [sp, #12]
 8016f06:	9806      	ldr	r0, [sp, #24]
 8016f08:	aa16      	add	r2, sp, #88	; 0x58
 8016f0a:	f7ff fb71 	bl	80165f0 <__sprint_r>
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	d137      	bne.n	8016f82 <_vfiprintf_r+0x92a>
 8016f12:	a919      	add	r1, sp, #100	; 0x64
 8016f14:	0033      	movs	r3, r6
 8016f16:	3b10      	subs	r3, #16
 8016f18:	001e      	movs	r6, r3
 8016f1a:	000f      	movs	r7, r1
 8016f1c:	e5d6      	b.n	8016acc <_vfiprintf_r+0x474>
 8016f1e:	2010      	movs	r0, #16
 8016f20:	1812      	adds	r2, r2, r0
 8016f22:	6078      	str	r0, [r7, #4]
 8016f24:	9218      	str	r2, [sp, #96]	; 0x60
 8016f26:	9317      	str	r3, [sp, #92]	; 0x5c
 8016f28:	2b07      	cmp	r3, #7
 8016f2a:	dd07      	ble.n	8016f3c <_vfiprintf_r+0x8e4>
 8016f2c:	9903      	ldr	r1, [sp, #12]
 8016f2e:	9806      	ldr	r0, [sp, #24]
 8016f30:	aa16      	add	r2, sp, #88	; 0x58
 8016f32:	f7ff fb5d 	bl	80165f0 <__sprint_r>
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d123      	bne.n	8016f82 <_vfiprintf_r+0x92a>
 8016f3a:	a919      	add	r1, sp, #100	; 0x64
 8016f3c:	0033      	movs	r3, r6
 8016f3e:	3b10      	subs	r3, #16
 8016f40:	001e      	movs	r6, r3
 8016f42:	000f      	movs	r7, r1
 8016f44:	e5e2      	b.n	8016b0c <_vfiprintf_r+0x4b4>
 8016f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f4a:	2510      	movs	r5, #16
 8016f4c:	1a9c      	subs	r4, r3, r2
 8016f4e:	2c00      	cmp	r4, #0
 8016f50:	dc00      	bgt.n	8016f54 <_vfiprintf_r+0x8fc>
 8016f52:	e613      	b.n	8016b7c <_vfiprintf_r+0x524>
 8016f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f56:	483e      	ldr	r0, [pc, #248]	; (8017050 <_vfiprintf_r+0x9f8>)
 8016f58:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016f5a:	9305      	str	r3, [sp, #20]
 8016f5c:	1c5a      	adds	r2, r3, #1
 8016f5e:	6038      	str	r0, [r7, #0]
 8016f60:	2c10      	cmp	r4, #16
 8016f62:	dc22      	bgt.n	8016faa <_vfiprintf_r+0x952>
 8016f64:	607c      	str	r4, [r7, #4]
 8016f66:	190c      	adds	r4, r1, r4
 8016f68:	9418      	str	r4, [sp, #96]	; 0x60
 8016f6a:	9217      	str	r2, [sp, #92]	; 0x5c
 8016f6c:	2a07      	cmp	r2, #7
 8016f6e:	dc00      	bgt.n	8016f72 <_vfiprintf_r+0x91a>
 8016f70:	e604      	b.n	8016b7c <_vfiprintf_r+0x524>
 8016f72:	9903      	ldr	r1, [sp, #12]
 8016f74:	9806      	ldr	r0, [sp, #24]
 8016f76:	aa16      	add	r2, sp, #88	; 0x58
 8016f78:	f7ff fb3a 	bl	80165f0 <__sprint_r>
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	d100      	bne.n	8016f82 <_vfiprintf_r+0x92a>
 8016f80:	e5fc      	b.n	8016b7c <_vfiprintf_r+0x524>
 8016f82:	9b03      	ldr	r3, [sp, #12]
 8016f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f86:	07db      	lsls	r3, r3, #31
 8016f88:	d407      	bmi.n	8016f9a <_vfiprintf_r+0x942>
 8016f8a:	9b03      	ldr	r3, [sp, #12]
 8016f8c:	899b      	ldrh	r3, [r3, #12]
 8016f8e:	059b      	lsls	r3, r3, #22
 8016f90:	d403      	bmi.n	8016f9a <_vfiprintf_r+0x942>
 8016f92:	9b03      	ldr	r3, [sp, #12]
 8016f94:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8016f96:	f7fe fd1e 	bl	80159d6 <__retarget_lock_release_recursive>
 8016f9a:	9b03      	ldr	r3, [sp, #12]
 8016f9c:	899b      	ldrh	r3, [r3, #12]
 8016f9e:	065b      	lsls	r3, r3, #25
 8016fa0:	d401      	bmi.n	8016fa6 <_vfiprintf_r+0x94e>
 8016fa2:	f7ff fb98 	bl	80166d6 <_vfiprintf_r+0x7e>
 8016fa6:	f7ff fb93 	bl	80166d0 <_vfiprintf_r+0x78>
 8016faa:	3110      	adds	r1, #16
 8016fac:	607d      	str	r5, [r7, #4]
 8016fae:	9118      	str	r1, [sp, #96]	; 0x60
 8016fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016fb2:	3708      	adds	r7, #8
 8016fb4:	2a07      	cmp	r2, #7
 8016fb6:	dd07      	ble.n	8016fc8 <_vfiprintf_r+0x970>
 8016fb8:	9903      	ldr	r1, [sp, #12]
 8016fba:	9806      	ldr	r0, [sp, #24]
 8016fbc:	aa16      	add	r2, sp, #88	; 0x58
 8016fbe:	f7ff fb17 	bl	80165f0 <__sprint_r>
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d1dd      	bne.n	8016f82 <_vfiprintf_r+0x92a>
 8016fc6:	af19      	add	r7, sp, #100	; 0x64
 8016fc8:	3c10      	subs	r4, #16
 8016fca:	e7c3      	b.n	8016f54 <_vfiprintf_r+0x8fc>
 8016fcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016fce:	9300      	str	r3, [sp, #0]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d102      	bne.n	8016fda <_vfiprintf_r+0x982>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8016fd8:	e7d3      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016fda:	9903      	ldr	r1, [sp, #12]
 8016fdc:	9806      	ldr	r0, [sp, #24]
 8016fde:	aa16      	add	r2, sp, #88	; 0x58
 8016fe0:	f7ff fb06 	bl	80165f0 <__sprint_r>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	d0f5      	beq.n	8016fd4 <_vfiprintf_r+0x97c>
 8016fe8:	e7cb      	b.n	8016f82 <_vfiprintf_r+0x92a>
 8016fea:	0026      	movs	r6, r4
 8016fec:	2a00      	cmp	r2, #0
 8016fee:	d100      	bne.n	8016ff2 <_vfiprintf_r+0x99a>
 8016ff0:	e609      	b.n	8016c06 <_vfiprintf_r+0x5ae>
 8016ff2:	2b01      	cmp	r3, #1
 8016ff4:	d100      	bne.n	8016ff8 <_vfiprintf_r+0x9a0>
 8016ff6:	e6ef      	b.n	8016dd8 <_vfiprintf_r+0x780>
 8016ff8:	ad42      	add	r5, sp, #264	; 0x108
 8016ffa:	2b02      	cmp	r3, #2
 8016ffc:	d100      	bne.n	8017000 <_vfiprintf_r+0x9a8>
 8016ffe:	e737      	b.n	8016e70 <_vfiprintf_r+0x818>
 8017000:	2307      	movs	r3, #7
 8017002:	469c      	mov	ip, r3
 8017004:	4663      	mov	r3, ip
 8017006:	9900      	ldr	r1, [sp, #0]
 8017008:	002a      	movs	r2, r5
 801700a:	400b      	ands	r3, r1
 801700c:	9901      	ldr	r1, [sp, #4]
 801700e:	3d01      	subs	r5, #1
 8017010:	074c      	lsls	r4, r1, #29
 8017012:	9900      	ldr	r1, [sp, #0]
 8017014:	3330      	adds	r3, #48	; 0x30
 8017016:	08c8      	lsrs	r0, r1, #3
 8017018:	9901      	ldr	r1, [sp, #4]
 801701a:	4304      	orrs	r4, r0
 801701c:	08c9      	lsrs	r1, r1, #3
 801701e:	9101      	str	r1, [sp, #4]
 8017020:	0021      	movs	r1, r4
 8017022:	9801      	ldr	r0, [sp, #4]
 8017024:	702b      	strb	r3, [r5, #0]
 8017026:	9400      	str	r4, [sp, #0]
 8017028:	4301      	orrs	r1, r0
 801702a:	d1eb      	bne.n	8017004 <_vfiprintf_r+0x9ac>
 801702c:	0031      	movs	r1, r6
 801702e:	07c9      	lsls	r1, r1, #31
 8017030:	d505      	bpl.n	801703e <_vfiprintf_r+0x9e6>
 8017032:	2b30      	cmp	r3, #48	; 0x30
 8017034:	d003      	beq.n	801703e <_vfiprintf_r+0x9e6>
 8017036:	2330      	movs	r3, #48	; 0x30
 8017038:	3d01      	subs	r5, #1
 801703a:	702b      	strb	r3, [r5, #0]
 801703c:	1e95      	subs	r5, r2, #2
 801703e:	9b05      	ldr	r3, [sp, #20]
 8017040:	0034      	movs	r4, r6
 8017042:	930b      	str	r3, [sp, #44]	; 0x2c
 8017044:	ab42      	add	r3, sp, #264	; 0x108
 8017046:	1b5b      	subs	r3, r3, r5
 8017048:	9305      	str	r3, [sp, #20]
 801704a:	e4c1      	b.n	80169d0 <_vfiprintf_r+0x378>
 801704c:	0801a949 	.word	0x0801a949
 8017050:	0801ac10 	.word	0x0801ac10

08017054 <__sbprintf>:
 8017054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017056:	0015      	movs	r5, r2
 8017058:	2202      	movs	r2, #2
 801705a:	4c1e      	ldr	r4, [pc, #120]	; (80170d4 <__sbprintf+0x80>)
 801705c:	001f      	movs	r7, r3
 801705e:	898b      	ldrh	r3, [r1, #12]
 8017060:	44a5      	add	sp, r4
 8017062:	4393      	bics	r3, r2
 8017064:	466a      	mov	r2, sp
 8017066:	8193      	strh	r3, [r2, #12]
 8017068:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801706a:	0006      	movs	r6, r0
 801706c:	9319      	str	r3, [sp, #100]	; 0x64
 801706e:	89cb      	ldrh	r3, [r1, #14]
 8017070:	a816      	add	r0, sp, #88	; 0x58
 8017072:	81d3      	strh	r3, [r2, #14]
 8017074:	69cb      	ldr	r3, [r1, #28]
 8017076:	000c      	movs	r4, r1
 8017078:	9307      	str	r3, [sp, #28]
 801707a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801707c:	9309      	str	r3, [sp, #36]	; 0x24
 801707e:	ab1a      	add	r3, sp, #104	; 0x68
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	9304      	str	r3, [sp, #16]
 8017084:	2380      	movs	r3, #128	; 0x80
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	9302      	str	r3, [sp, #8]
 801708a:	9305      	str	r3, [sp, #20]
 801708c:	2300      	movs	r3, #0
 801708e:	9306      	str	r3, [sp, #24]
 8017090:	f7fe fc9e 	bl	80159d0 <__retarget_lock_init_recursive>
 8017094:	002a      	movs	r2, r5
 8017096:	003b      	movs	r3, r7
 8017098:	4669      	mov	r1, sp
 801709a:	0030      	movs	r0, r6
 801709c:	f7ff fadc 	bl	8016658 <_vfiprintf_r>
 80170a0:	1e05      	subs	r5, r0, #0
 80170a2:	db07      	blt.n	80170b4 <__sbprintf+0x60>
 80170a4:	4669      	mov	r1, sp
 80170a6:	0030      	movs	r0, r6
 80170a8:	f000 f91c 	bl	80172e4 <_fflush_r>
 80170ac:	2800      	cmp	r0, #0
 80170ae:	d001      	beq.n	80170b4 <__sbprintf+0x60>
 80170b0:	2501      	movs	r5, #1
 80170b2:	426d      	negs	r5, r5
 80170b4:	466b      	mov	r3, sp
 80170b6:	899a      	ldrh	r2, [r3, #12]
 80170b8:	2340      	movs	r3, #64	; 0x40
 80170ba:	421a      	tst	r2, r3
 80170bc:	d002      	beq.n	80170c4 <__sbprintf+0x70>
 80170be:	89a2      	ldrh	r2, [r4, #12]
 80170c0:	4313      	orrs	r3, r2
 80170c2:	81a3      	strh	r3, [r4, #12]
 80170c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80170c6:	f7fe fc84 	bl	80159d2 <__retarget_lock_close_recursive>
 80170ca:	0028      	movs	r0, r5
 80170cc:	4b02      	ldr	r3, [pc, #8]	; (80170d8 <__sbprintf+0x84>)
 80170ce:	449d      	add	sp, r3
 80170d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170d2:	46c0      	nop			; (mov r8, r8)
 80170d4:	fffffb94 	.word	0xfffffb94
 80170d8:	0000046c 	.word	0x0000046c

080170dc <__swsetup_r>:
 80170dc:	4b30      	ldr	r3, [pc, #192]	; (80171a0 <__swsetup_r+0xc4>)
 80170de:	b570      	push	{r4, r5, r6, lr}
 80170e0:	0005      	movs	r5, r0
 80170e2:	6818      	ldr	r0, [r3, #0]
 80170e4:	000c      	movs	r4, r1
 80170e6:	2800      	cmp	r0, #0
 80170e8:	d004      	beq.n	80170f4 <__swsetup_r+0x18>
 80170ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d101      	bne.n	80170f4 <__swsetup_r+0x18>
 80170f0:	f000 f96e 	bl	80173d0 <__sinit>
 80170f4:	230c      	movs	r3, #12
 80170f6:	5ee2      	ldrsh	r2, [r4, r3]
 80170f8:	b293      	uxth	r3, r2
 80170fa:	0711      	lsls	r1, r2, #28
 80170fc:	d423      	bmi.n	8017146 <__swsetup_r+0x6a>
 80170fe:	06d9      	lsls	r1, r3, #27
 8017100:	d407      	bmi.n	8017112 <__swsetup_r+0x36>
 8017102:	2309      	movs	r3, #9
 8017104:	2001      	movs	r0, #1
 8017106:	602b      	str	r3, [r5, #0]
 8017108:	3337      	adds	r3, #55	; 0x37
 801710a:	4313      	orrs	r3, r2
 801710c:	81a3      	strh	r3, [r4, #12]
 801710e:	4240      	negs	r0, r0
 8017110:	bd70      	pop	{r4, r5, r6, pc}
 8017112:	075b      	lsls	r3, r3, #29
 8017114:	d513      	bpl.n	801713e <__swsetup_r+0x62>
 8017116:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017118:	2900      	cmp	r1, #0
 801711a:	d008      	beq.n	801712e <__swsetup_r+0x52>
 801711c:	0023      	movs	r3, r4
 801711e:	3340      	adds	r3, #64	; 0x40
 8017120:	4299      	cmp	r1, r3
 8017122:	d002      	beq.n	801712a <__swsetup_r+0x4e>
 8017124:	0028      	movs	r0, r5
 8017126:	f7fe f823 	bl	8015170 <_free_r>
 801712a:	2300      	movs	r3, #0
 801712c:	6323      	str	r3, [r4, #48]	; 0x30
 801712e:	2224      	movs	r2, #36	; 0x24
 8017130:	89a3      	ldrh	r3, [r4, #12]
 8017132:	4393      	bics	r3, r2
 8017134:	81a3      	strh	r3, [r4, #12]
 8017136:	2300      	movs	r3, #0
 8017138:	6063      	str	r3, [r4, #4]
 801713a:	6923      	ldr	r3, [r4, #16]
 801713c:	6023      	str	r3, [r4, #0]
 801713e:	2308      	movs	r3, #8
 8017140:	89a2      	ldrh	r2, [r4, #12]
 8017142:	4313      	orrs	r3, r2
 8017144:	81a3      	strh	r3, [r4, #12]
 8017146:	6923      	ldr	r3, [r4, #16]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d10b      	bne.n	8017164 <__swsetup_r+0x88>
 801714c:	21a0      	movs	r1, #160	; 0xa0
 801714e:	2280      	movs	r2, #128	; 0x80
 8017150:	89a3      	ldrh	r3, [r4, #12]
 8017152:	0089      	lsls	r1, r1, #2
 8017154:	0092      	lsls	r2, r2, #2
 8017156:	400b      	ands	r3, r1
 8017158:	4293      	cmp	r3, r2
 801715a:	d003      	beq.n	8017164 <__swsetup_r+0x88>
 801715c:	0021      	movs	r1, r4
 801715e:	0028      	movs	r0, r5
 8017160:	f000 fb80 	bl	8017864 <__smakebuf_r>
 8017164:	220c      	movs	r2, #12
 8017166:	5ea3      	ldrsh	r3, [r4, r2]
 8017168:	2001      	movs	r0, #1
 801716a:	001a      	movs	r2, r3
 801716c:	b299      	uxth	r1, r3
 801716e:	4002      	ands	r2, r0
 8017170:	4203      	tst	r3, r0
 8017172:	d00f      	beq.n	8017194 <__swsetup_r+0xb8>
 8017174:	2200      	movs	r2, #0
 8017176:	60a2      	str	r2, [r4, #8]
 8017178:	6962      	ldr	r2, [r4, #20]
 801717a:	4252      	negs	r2, r2
 801717c:	61a2      	str	r2, [r4, #24]
 801717e:	2000      	movs	r0, #0
 8017180:	6922      	ldr	r2, [r4, #16]
 8017182:	4282      	cmp	r2, r0
 8017184:	d1c4      	bne.n	8017110 <__swsetup_r+0x34>
 8017186:	060a      	lsls	r2, r1, #24
 8017188:	d5c2      	bpl.n	8017110 <__swsetup_r+0x34>
 801718a:	2240      	movs	r2, #64	; 0x40
 801718c:	4313      	orrs	r3, r2
 801718e:	81a3      	strh	r3, [r4, #12]
 8017190:	3801      	subs	r0, #1
 8017192:	e7bd      	b.n	8017110 <__swsetup_r+0x34>
 8017194:	0788      	lsls	r0, r1, #30
 8017196:	d400      	bmi.n	801719a <__swsetup_r+0xbe>
 8017198:	6962      	ldr	r2, [r4, #20]
 801719a:	60a2      	str	r2, [r4, #8]
 801719c:	e7ef      	b.n	801717e <__swsetup_r+0xa2>
 801719e:	46c0      	nop			; (mov r8, r8)
 80171a0:	20000100 	.word	0x20000100

080171a4 <abort>:
 80171a4:	2006      	movs	r0, #6
 80171a6:	b510      	push	{r4, lr}
 80171a8:	f000 fbcc 	bl	8017944 <raise>
 80171ac:	2001      	movs	r0, #1
 80171ae:	f000 fdc1 	bl	8017d34 <_exit>
	...

080171b4 <__sflush_r>:
 80171b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171b6:	230c      	movs	r3, #12
 80171b8:	5eca      	ldrsh	r2, [r1, r3]
 80171ba:	000c      	movs	r4, r1
 80171bc:	0005      	movs	r5, r0
 80171be:	b291      	uxth	r1, r2
 80171c0:	0713      	lsls	r3, r2, #28
 80171c2:	d467      	bmi.n	8017294 <__sflush_r+0xe0>
 80171c4:	2380      	movs	r3, #128	; 0x80
 80171c6:	011b      	lsls	r3, r3, #4
 80171c8:	4313      	orrs	r3, r2
 80171ca:	6862      	ldr	r2, [r4, #4]
 80171cc:	81a3      	strh	r3, [r4, #12]
 80171ce:	2a00      	cmp	r2, #0
 80171d0:	dc04      	bgt.n	80171dc <__sflush_r+0x28>
 80171d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80171d4:	2a00      	cmp	r2, #0
 80171d6:	dc01      	bgt.n	80171dc <__sflush_r+0x28>
 80171d8:	2000      	movs	r0, #0
 80171da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80171dc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80171de:	2f00      	cmp	r7, #0
 80171e0:	d0fa      	beq.n	80171d8 <__sflush_r+0x24>
 80171e2:	2200      	movs	r2, #0
 80171e4:	2180      	movs	r1, #128	; 0x80
 80171e6:	682e      	ldr	r6, [r5, #0]
 80171e8:	602a      	str	r2, [r5, #0]
 80171ea:	001a      	movs	r2, r3
 80171ec:	0149      	lsls	r1, r1, #5
 80171ee:	400a      	ands	r2, r1
 80171f0:	420b      	tst	r3, r1
 80171f2:	d038      	beq.n	8017266 <__sflush_r+0xb2>
 80171f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80171f6:	89a3      	ldrh	r3, [r4, #12]
 80171f8:	075b      	lsls	r3, r3, #29
 80171fa:	d506      	bpl.n	801720a <__sflush_r+0x56>
 80171fc:	6863      	ldr	r3, [r4, #4]
 80171fe:	1ac0      	subs	r0, r0, r3
 8017200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017202:	2b00      	cmp	r3, #0
 8017204:	d001      	beq.n	801720a <__sflush_r+0x56>
 8017206:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017208:	1ac0      	subs	r0, r0, r3
 801720a:	0002      	movs	r2, r0
 801720c:	69e1      	ldr	r1, [r4, #28]
 801720e:	2300      	movs	r3, #0
 8017210:	0028      	movs	r0, r5
 8017212:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8017214:	47b8      	blx	r7
 8017216:	89a1      	ldrh	r1, [r4, #12]
 8017218:	1c43      	adds	r3, r0, #1
 801721a:	d106      	bne.n	801722a <__sflush_r+0x76>
 801721c:	682b      	ldr	r3, [r5, #0]
 801721e:	2b1d      	cmp	r3, #29
 8017220:	d835      	bhi.n	801728e <__sflush_r+0xda>
 8017222:	4a2e      	ldr	r2, [pc, #184]	; (80172dc <__sflush_r+0x128>)
 8017224:	40da      	lsrs	r2, r3
 8017226:	07d3      	lsls	r3, r2, #31
 8017228:	d531      	bpl.n	801728e <__sflush_r+0xda>
 801722a:	2200      	movs	r2, #0
 801722c:	4b2c      	ldr	r3, [pc, #176]	; (80172e0 <__sflush_r+0x12c>)
 801722e:	6062      	str	r2, [r4, #4]
 8017230:	400b      	ands	r3, r1
 8017232:	6922      	ldr	r2, [r4, #16]
 8017234:	b21b      	sxth	r3, r3
 8017236:	81a3      	strh	r3, [r4, #12]
 8017238:	6022      	str	r2, [r4, #0]
 801723a:	04db      	lsls	r3, r3, #19
 801723c:	d505      	bpl.n	801724a <__sflush_r+0x96>
 801723e:	1c43      	adds	r3, r0, #1
 8017240:	d102      	bne.n	8017248 <__sflush_r+0x94>
 8017242:	682b      	ldr	r3, [r5, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d100      	bne.n	801724a <__sflush_r+0x96>
 8017248:	6520      	str	r0, [r4, #80]	; 0x50
 801724a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801724c:	602e      	str	r6, [r5, #0]
 801724e:	2900      	cmp	r1, #0
 8017250:	d0c2      	beq.n	80171d8 <__sflush_r+0x24>
 8017252:	0023      	movs	r3, r4
 8017254:	3340      	adds	r3, #64	; 0x40
 8017256:	4299      	cmp	r1, r3
 8017258:	d002      	beq.n	8017260 <__sflush_r+0xac>
 801725a:	0028      	movs	r0, r5
 801725c:	f7fd ff88 	bl	8015170 <_free_r>
 8017260:	2000      	movs	r0, #0
 8017262:	6320      	str	r0, [r4, #48]	; 0x30
 8017264:	e7b9      	b.n	80171da <__sflush_r+0x26>
 8017266:	2301      	movs	r3, #1
 8017268:	0028      	movs	r0, r5
 801726a:	69e1      	ldr	r1, [r4, #28]
 801726c:	47b8      	blx	r7
 801726e:	1c43      	adds	r3, r0, #1
 8017270:	d1c1      	bne.n	80171f6 <__sflush_r+0x42>
 8017272:	682b      	ldr	r3, [r5, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d0be      	beq.n	80171f6 <__sflush_r+0x42>
 8017278:	2b1d      	cmp	r3, #29
 801727a:	d001      	beq.n	8017280 <__sflush_r+0xcc>
 801727c:	2b16      	cmp	r3, #22
 801727e:	d101      	bne.n	8017284 <__sflush_r+0xd0>
 8017280:	602e      	str	r6, [r5, #0]
 8017282:	e7a9      	b.n	80171d8 <__sflush_r+0x24>
 8017284:	2340      	movs	r3, #64	; 0x40
 8017286:	89a2      	ldrh	r2, [r4, #12]
 8017288:	4313      	orrs	r3, r2
 801728a:	81a3      	strh	r3, [r4, #12]
 801728c:	e7a5      	b.n	80171da <__sflush_r+0x26>
 801728e:	2340      	movs	r3, #64	; 0x40
 8017290:	430b      	orrs	r3, r1
 8017292:	e7fa      	b.n	801728a <__sflush_r+0xd6>
 8017294:	6927      	ldr	r7, [r4, #16]
 8017296:	2f00      	cmp	r7, #0
 8017298:	d09e      	beq.n	80171d8 <__sflush_r+0x24>
 801729a:	6823      	ldr	r3, [r4, #0]
 801729c:	6027      	str	r7, [r4, #0]
 801729e:	1bdb      	subs	r3, r3, r7
 80172a0:	9301      	str	r3, [sp, #4]
 80172a2:	2300      	movs	r3, #0
 80172a4:	078a      	lsls	r2, r1, #30
 80172a6:	d100      	bne.n	80172aa <__sflush_r+0xf6>
 80172a8:	6963      	ldr	r3, [r4, #20]
 80172aa:	60a3      	str	r3, [r4, #8]
 80172ac:	9b01      	ldr	r3, [sp, #4]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	dc00      	bgt.n	80172b4 <__sflush_r+0x100>
 80172b2:	e791      	b.n	80171d8 <__sflush_r+0x24>
 80172b4:	003a      	movs	r2, r7
 80172b6:	0028      	movs	r0, r5
 80172b8:	9b01      	ldr	r3, [sp, #4]
 80172ba:	69e1      	ldr	r1, [r4, #28]
 80172bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80172be:	47b0      	blx	r6
 80172c0:	2800      	cmp	r0, #0
 80172c2:	dc06      	bgt.n	80172d2 <__sflush_r+0x11e>
 80172c4:	2340      	movs	r3, #64	; 0x40
 80172c6:	2001      	movs	r0, #1
 80172c8:	89a2      	ldrh	r2, [r4, #12]
 80172ca:	4240      	negs	r0, r0
 80172cc:	4313      	orrs	r3, r2
 80172ce:	81a3      	strh	r3, [r4, #12]
 80172d0:	e783      	b.n	80171da <__sflush_r+0x26>
 80172d2:	9b01      	ldr	r3, [sp, #4]
 80172d4:	183f      	adds	r7, r7, r0
 80172d6:	1a1b      	subs	r3, r3, r0
 80172d8:	9301      	str	r3, [sp, #4]
 80172da:	e7e7      	b.n	80172ac <__sflush_r+0xf8>
 80172dc:	20400001 	.word	0x20400001
 80172e0:	fffff7ff 	.word	0xfffff7ff

080172e4 <_fflush_r>:
 80172e4:	b570      	push	{r4, r5, r6, lr}
 80172e6:	0005      	movs	r5, r0
 80172e8:	000c      	movs	r4, r1
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d004      	beq.n	80172f8 <_fflush_r+0x14>
 80172ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d101      	bne.n	80172f8 <_fflush_r+0x14>
 80172f4:	f000 f86c 	bl	80173d0 <__sinit>
 80172f8:	220c      	movs	r2, #12
 80172fa:	5ea3      	ldrsh	r3, [r4, r2]
 80172fc:	1e1e      	subs	r6, r3, #0
 80172fe:	d015      	beq.n	801732c <_fflush_r+0x48>
 8017300:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017302:	07d2      	lsls	r2, r2, #31
 8017304:	d404      	bmi.n	8017310 <_fflush_r+0x2c>
 8017306:	059b      	lsls	r3, r3, #22
 8017308:	d402      	bmi.n	8017310 <_fflush_r+0x2c>
 801730a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801730c:	f7fe fb62 	bl	80159d4 <__retarget_lock_acquire_recursive>
 8017310:	0021      	movs	r1, r4
 8017312:	0028      	movs	r0, r5
 8017314:	f7ff ff4e 	bl	80171b4 <__sflush_r>
 8017318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801731a:	0006      	movs	r6, r0
 801731c:	07db      	lsls	r3, r3, #31
 801731e:	d405      	bmi.n	801732c <_fflush_r+0x48>
 8017320:	89a3      	ldrh	r3, [r4, #12]
 8017322:	059b      	lsls	r3, r3, #22
 8017324:	d402      	bmi.n	801732c <_fflush_r+0x48>
 8017326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017328:	f7fe fb55 	bl	80159d6 <__retarget_lock_release_recursive>
 801732c:	0030      	movs	r0, r6
 801732e:	bd70      	pop	{r4, r5, r6, pc}

08017330 <std>:
 8017330:	2300      	movs	r3, #0
 8017332:	b510      	push	{r4, lr}
 8017334:	0004      	movs	r4, r0
 8017336:	6003      	str	r3, [r0, #0]
 8017338:	6043      	str	r3, [r0, #4]
 801733a:	6083      	str	r3, [r0, #8]
 801733c:	8181      	strh	r1, [r0, #12]
 801733e:	6643      	str	r3, [r0, #100]	; 0x64
 8017340:	0019      	movs	r1, r3
 8017342:	81c2      	strh	r2, [r0, #14]
 8017344:	6103      	str	r3, [r0, #16]
 8017346:	2208      	movs	r2, #8
 8017348:	6143      	str	r3, [r0, #20]
 801734a:	6183      	str	r3, [r0, #24]
 801734c:	305c      	adds	r0, #92	; 0x5c
 801734e:	f7fa fc10 	bl	8011b72 <memset>
 8017352:	0020      	movs	r0, r4
 8017354:	4b06      	ldr	r3, [pc, #24]	; (8017370 <std+0x40>)
 8017356:	61e4      	str	r4, [r4, #28]
 8017358:	6223      	str	r3, [r4, #32]
 801735a:	4b06      	ldr	r3, [pc, #24]	; (8017374 <std+0x44>)
 801735c:	3058      	adds	r0, #88	; 0x58
 801735e:	6263      	str	r3, [r4, #36]	; 0x24
 8017360:	4b05      	ldr	r3, [pc, #20]	; (8017378 <std+0x48>)
 8017362:	62a3      	str	r3, [r4, #40]	; 0x28
 8017364:	4b05      	ldr	r3, [pc, #20]	; (801737c <std+0x4c>)
 8017366:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017368:	f7fe fb32 	bl	80159d0 <__retarget_lock_init_recursive>
 801736c:	bd10      	pop	{r4, pc}
 801736e:	46c0      	nop			; (mov r8, r8)
 8017370:	08017985 	.word	0x08017985
 8017374:	080179ad 	.word	0x080179ad
 8017378:	080179e5 	.word	0x080179e5
 801737c:	08017a11 	.word	0x08017a11

08017380 <_cleanup_r>:
 8017380:	b510      	push	{r4, lr}
 8017382:	4902      	ldr	r1, [pc, #8]	; (801738c <_cleanup_r+0xc>)
 8017384:	f000 fa1c 	bl	80177c0 <_fwalk_reent>
 8017388:	bd10      	pop	{r4, pc}
 801738a:	46c0      	nop			; (mov r8, r8)
 801738c:	08017b3d 	.word	0x08017b3d

08017390 <__sfp_lock_acquire>:
 8017390:	b510      	push	{r4, lr}
 8017392:	4802      	ldr	r0, [pc, #8]	; (801739c <__sfp_lock_acquire+0xc>)
 8017394:	f7fe fb1e 	bl	80159d4 <__retarget_lock_acquire_recursive>
 8017398:	bd10      	pop	{r4, pc}
 801739a:	46c0      	nop			; (mov r8, r8)
 801739c:	20006a88 	.word	0x20006a88

080173a0 <__sfp_lock_release>:
 80173a0:	b510      	push	{r4, lr}
 80173a2:	4802      	ldr	r0, [pc, #8]	; (80173ac <__sfp_lock_release+0xc>)
 80173a4:	f7fe fb17 	bl	80159d6 <__retarget_lock_release_recursive>
 80173a8:	bd10      	pop	{r4, pc}
 80173aa:	46c0      	nop			; (mov r8, r8)
 80173ac:	20006a88 	.word	0x20006a88

080173b0 <__sinit_lock_acquire>:
 80173b0:	b510      	push	{r4, lr}
 80173b2:	4802      	ldr	r0, [pc, #8]	; (80173bc <__sinit_lock_acquire+0xc>)
 80173b4:	f7fe fb0e 	bl	80159d4 <__retarget_lock_acquire_recursive>
 80173b8:	bd10      	pop	{r4, pc}
 80173ba:	46c0      	nop			; (mov r8, r8)
 80173bc:	20006a83 	.word	0x20006a83

080173c0 <__sinit_lock_release>:
 80173c0:	b510      	push	{r4, lr}
 80173c2:	4802      	ldr	r0, [pc, #8]	; (80173cc <__sinit_lock_release+0xc>)
 80173c4:	f7fe fb07 	bl	80159d6 <__retarget_lock_release_recursive>
 80173c8:	bd10      	pop	{r4, pc}
 80173ca:	46c0      	nop			; (mov r8, r8)
 80173cc:	20006a83 	.word	0x20006a83

080173d0 <__sinit>:
 80173d0:	b510      	push	{r4, lr}
 80173d2:	0004      	movs	r4, r0
 80173d4:	f7ff ffec 	bl	80173b0 <__sinit_lock_acquire>
 80173d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80173da:	2a00      	cmp	r2, #0
 80173dc:	d002      	beq.n	80173e4 <__sinit+0x14>
 80173de:	f7ff ffef 	bl	80173c0 <__sinit_lock_release>
 80173e2:	bd10      	pop	{r4, pc}
 80173e4:	4b0e      	ldr	r3, [pc, #56]	; (8017420 <__sinit+0x50>)
 80173e6:	2103      	movs	r1, #3
 80173e8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80173ea:	23b8      	movs	r3, #184	; 0xb8
 80173ec:	009b      	lsls	r3, r3, #2
 80173ee:	50e2      	str	r2, [r4, r3]
 80173f0:	3304      	adds	r3, #4
 80173f2:	50e1      	str	r1, [r4, r3]
 80173f4:	3308      	adds	r3, #8
 80173f6:	18e1      	adds	r1, r4, r3
 80173f8:	3b04      	subs	r3, #4
 80173fa:	50e1      	str	r1, [r4, r3]
 80173fc:	6860      	ldr	r0, [r4, #4]
 80173fe:	2104      	movs	r1, #4
 8017400:	f7ff ff96 	bl	8017330 <std>
 8017404:	2201      	movs	r2, #1
 8017406:	2109      	movs	r1, #9
 8017408:	68a0      	ldr	r0, [r4, #8]
 801740a:	f7ff ff91 	bl	8017330 <std>
 801740e:	2202      	movs	r2, #2
 8017410:	2112      	movs	r1, #18
 8017412:	68e0      	ldr	r0, [r4, #12]
 8017414:	f7ff ff8c 	bl	8017330 <std>
 8017418:	2301      	movs	r3, #1
 801741a:	63a3      	str	r3, [r4, #56]	; 0x38
 801741c:	e7df      	b.n	80173de <__sinit+0xe>
 801741e:	46c0      	nop			; (mov r8, r8)
 8017420:	08017381 	.word	0x08017381

08017424 <__fputwc>:
 8017424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017426:	b085      	sub	sp, #20
 8017428:	000e      	movs	r6, r1
 801742a:	0015      	movs	r5, r2
 801742c:	9001      	str	r0, [sp, #4]
 801742e:	f7fe fac3 	bl	80159b8 <__locale_mb_cur_max>
 8017432:	0004      	movs	r4, r0
 8017434:	2801      	cmp	r0, #1
 8017436:	d119      	bne.n	801746c <__fputwc+0x48>
 8017438:	1e73      	subs	r3, r6, #1
 801743a:	2bfe      	cmp	r3, #254	; 0xfe
 801743c:	d816      	bhi.n	801746c <__fputwc+0x48>
 801743e:	ab02      	add	r3, sp, #8
 8017440:	711e      	strb	r6, [r3, #4]
 8017442:	2700      	movs	r7, #0
 8017444:	42a7      	cmp	r7, r4
 8017446:	d020      	beq.n	801748a <__fputwc+0x66>
 8017448:	ab03      	add	r3, sp, #12
 801744a:	5dd9      	ldrb	r1, [r3, r7]
 801744c:	68ab      	ldr	r3, [r5, #8]
 801744e:	3b01      	subs	r3, #1
 8017450:	60ab      	str	r3, [r5, #8]
 8017452:	2b00      	cmp	r3, #0
 8017454:	da04      	bge.n	8017460 <__fputwc+0x3c>
 8017456:	69aa      	ldr	r2, [r5, #24]
 8017458:	4293      	cmp	r3, r2
 801745a:	db19      	blt.n	8017490 <__fputwc+0x6c>
 801745c:	290a      	cmp	r1, #10
 801745e:	d017      	beq.n	8017490 <__fputwc+0x6c>
 8017460:	682b      	ldr	r3, [r5, #0]
 8017462:	1c5a      	adds	r2, r3, #1
 8017464:	602a      	str	r2, [r5, #0]
 8017466:	7019      	strb	r1, [r3, #0]
 8017468:	3701      	adds	r7, #1
 801746a:	e7eb      	b.n	8017444 <__fputwc+0x20>
 801746c:	002b      	movs	r3, r5
 801746e:	0032      	movs	r2, r6
 8017470:	9801      	ldr	r0, [sp, #4]
 8017472:	335c      	adds	r3, #92	; 0x5c
 8017474:	a903      	add	r1, sp, #12
 8017476:	f000 fb23 	bl	8017ac0 <_wcrtomb_r>
 801747a:	0004      	movs	r4, r0
 801747c:	1c43      	adds	r3, r0, #1
 801747e:	d1e0      	bne.n	8017442 <__fputwc+0x1e>
 8017480:	2340      	movs	r3, #64	; 0x40
 8017482:	0006      	movs	r6, r0
 8017484:	89aa      	ldrh	r2, [r5, #12]
 8017486:	4313      	orrs	r3, r2
 8017488:	81ab      	strh	r3, [r5, #12]
 801748a:	0030      	movs	r0, r6
 801748c:	b005      	add	sp, #20
 801748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017490:	002a      	movs	r2, r5
 8017492:	9801      	ldr	r0, [sp, #4]
 8017494:	f000 fac2 	bl	8017a1c <__swbuf_r>
 8017498:	1c43      	adds	r3, r0, #1
 801749a:	d1e5      	bne.n	8017468 <__fputwc+0x44>
 801749c:	0006      	movs	r6, r0
 801749e:	e7f4      	b.n	801748a <__fputwc+0x66>

080174a0 <_fputwc_r>:
 80174a0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80174a2:	b570      	push	{r4, r5, r6, lr}
 80174a4:	0005      	movs	r5, r0
 80174a6:	000e      	movs	r6, r1
 80174a8:	0014      	movs	r4, r2
 80174aa:	07db      	lsls	r3, r3, #31
 80174ac:	d405      	bmi.n	80174ba <_fputwc_r+0x1a>
 80174ae:	8993      	ldrh	r3, [r2, #12]
 80174b0:	059b      	lsls	r3, r3, #22
 80174b2:	d402      	bmi.n	80174ba <_fputwc_r+0x1a>
 80174b4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80174b6:	f7fe fa8d 	bl	80159d4 <__retarget_lock_acquire_recursive>
 80174ba:	230c      	movs	r3, #12
 80174bc:	5ee2      	ldrsh	r2, [r4, r3]
 80174be:	2380      	movs	r3, #128	; 0x80
 80174c0:	019b      	lsls	r3, r3, #6
 80174c2:	421a      	tst	r2, r3
 80174c4:	d104      	bne.n	80174d0 <_fputwc_r+0x30>
 80174c6:	431a      	orrs	r2, r3
 80174c8:	81a2      	strh	r2, [r4, #12]
 80174ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174cc:	4313      	orrs	r3, r2
 80174ce:	6663      	str	r3, [r4, #100]	; 0x64
 80174d0:	0028      	movs	r0, r5
 80174d2:	0022      	movs	r2, r4
 80174d4:	0031      	movs	r1, r6
 80174d6:	f7ff ffa5 	bl	8017424 <__fputwc>
 80174da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174dc:	0005      	movs	r5, r0
 80174de:	07db      	lsls	r3, r3, #31
 80174e0:	d405      	bmi.n	80174ee <_fputwc_r+0x4e>
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	059b      	lsls	r3, r3, #22
 80174e6:	d402      	bmi.n	80174ee <_fputwc_r+0x4e>
 80174e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174ea:	f7fe fa74 	bl	80159d6 <__retarget_lock_release_recursive>
 80174ee:	0028      	movs	r0, r5
 80174f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080174f4 <__sfvwrite_r>:
 80174f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174f6:	6893      	ldr	r3, [r2, #8]
 80174f8:	b087      	sub	sp, #28
 80174fa:	000c      	movs	r4, r1
 80174fc:	9002      	str	r0, [sp, #8]
 80174fe:	9203      	str	r2, [sp, #12]
 8017500:	9300      	str	r3, [sp, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d102      	bne.n	801750c <__sfvwrite_r+0x18>
 8017506:	2000      	movs	r0, #0
 8017508:	b007      	add	sp, #28
 801750a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801750c:	898b      	ldrh	r3, [r1, #12]
 801750e:	071b      	lsls	r3, r3, #28
 8017510:	d559      	bpl.n	80175c6 <__sfvwrite_r+0xd2>
 8017512:	690b      	ldr	r3, [r1, #16]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d056      	beq.n	80175c6 <__sfvwrite_r+0xd2>
 8017518:	9b03      	ldr	r3, [sp, #12]
 801751a:	2202      	movs	r2, #2
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	89a3      	ldrh	r3, [r4, #12]
 8017522:	001f      	movs	r7, r3
 8017524:	4017      	ands	r7, r2
 8017526:	4213      	tst	r3, r2
 8017528:	d173      	bne.n	8017612 <__sfvwrite_r+0x11e>
 801752a:	2201      	movs	r2, #1
 801752c:	0019      	movs	r1, r3
 801752e:	4011      	ands	r1, r2
 8017530:	4213      	tst	r3, r2
 8017532:	d100      	bne.n	8017536 <__sfvwrite_r+0x42>
 8017534:	e0a8      	b.n	8017688 <__sfvwrite_r+0x194>
 8017536:	0038      	movs	r0, r7
 8017538:	003e      	movs	r6, r7
 801753a:	9700      	str	r7, [sp, #0]
 801753c:	9205      	str	r2, [sp, #20]
 801753e:	9b00      	ldr	r3, [sp, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d100      	bne.n	8017546 <__sfvwrite_r+0x52>
 8017544:	e112      	b.n	801776c <__sfvwrite_r+0x278>
 8017546:	2800      	cmp	r0, #0
 8017548:	d10a      	bne.n	8017560 <__sfvwrite_r+0x6c>
 801754a:	001a      	movs	r2, r3
 801754c:	210a      	movs	r1, #10
 801754e:	0030      	movs	r0, r6
 8017550:	f7fe fa54 	bl	80159fc <memchr>
 8017554:	9b00      	ldr	r3, [sp, #0]
 8017556:	1c5f      	adds	r7, r3, #1
 8017558:	2800      	cmp	r0, #0
 801755a:	d001      	beq.n	8017560 <__sfvwrite_r+0x6c>
 801755c:	3001      	adds	r0, #1
 801755e:	1b87      	subs	r7, r0, r6
 8017560:	9b00      	ldr	r3, [sp, #0]
 8017562:	9704      	str	r7, [sp, #16]
 8017564:	429f      	cmp	r7, r3
 8017566:	d900      	bls.n	801756a <__sfvwrite_r+0x76>
 8017568:	9304      	str	r3, [sp, #16]
 801756a:	6820      	ldr	r0, [r4, #0]
 801756c:	6922      	ldr	r2, [r4, #16]
 801756e:	6963      	ldr	r3, [r4, #20]
 8017570:	4290      	cmp	r0, r2
 8017572:	d800      	bhi.n	8017576 <__sfvwrite_r+0x82>
 8017574:	e103      	b.n	801777e <__sfvwrite_r+0x28a>
 8017576:	68a2      	ldr	r2, [r4, #8]
 8017578:	189d      	adds	r5, r3, r2
 801757a:	9a04      	ldr	r2, [sp, #16]
 801757c:	42aa      	cmp	r2, r5
 801757e:	dc00      	bgt.n	8017582 <__sfvwrite_r+0x8e>
 8017580:	e0fd      	b.n	801777e <__sfvwrite_r+0x28a>
 8017582:	0031      	movs	r1, r6
 8017584:	002a      	movs	r2, r5
 8017586:	f7fe fa44 	bl	8015a12 <memmove>
 801758a:	6823      	ldr	r3, [r4, #0]
 801758c:	0021      	movs	r1, r4
 801758e:	195b      	adds	r3, r3, r5
 8017590:	9802      	ldr	r0, [sp, #8]
 8017592:	6023      	str	r3, [r4, #0]
 8017594:	f7ff fea6 	bl	80172e4 <_fflush_r>
 8017598:	2800      	cmp	r0, #0
 801759a:	d170      	bne.n	801767e <__sfvwrite_r+0x18a>
 801759c:	9805      	ldr	r0, [sp, #20]
 801759e:	1b7f      	subs	r7, r7, r5
 80175a0:	d105      	bne.n	80175ae <__sfvwrite_r+0xba>
 80175a2:	0021      	movs	r1, r4
 80175a4:	9802      	ldr	r0, [sp, #8]
 80175a6:	f7ff fe9d 	bl	80172e4 <_fflush_r>
 80175aa:	2800      	cmp	r0, #0
 80175ac:	d167      	bne.n	801767e <__sfvwrite_r+0x18a>
 80175ae:	9b00      	ldr	r3, [sp, #0]
 80175b0:	1976      	adds	r6, r6, r5
 80175b2:	1b5b      	subs	r3, r3, r5
 80175b4:	9300      	str	r3, [sp, #0]
 80175b6:	9b03      	ldr	r3, [sp, #12]
 80175b8:	689b      	ldr	r3, [r3, #8]
 80175ba:	1b5d      	subs	r5, r3, r5
 80175bc:	9304      	str	r3, [sp, #16]
 80175be:	9b03      	ldr	r3, [sp, #12]
 80175c0:	609d      	str	r5, [r3, #8]
 80175c2:	d1bc      	bne.n	801753e <__sfvwrite_r+0x4a>
 80175c4:	e79f      	b.n	8017506 <__sfvwrite_r+0x12>
 80175c6:	0021      	movs	r1, r4
 80175c8:	9802      	ldr	r0, [sp, #8]
 80175ca:	f7ff fd87 	bl	80170dc <__swsetup_r>
 80175ce:	2800      	cmp	r0, #0
 80175d0:	d0a2      	beq.n	8017518 <__sfvwrite_r+0x24>
 80175d2:	2001      	movs	r0, #1
 80175d4:	4240      	negs	r0, r0
 80175d6:	e797      	b.n	8017508 <__sfvwrite_r+0x14>
 80175d8:	9b01      	ldr	r3, [sp, #4]
 80175da:	681e      	ldr	r6, [r3, #0]
 80175dc:	685d      	ldr	r5, [r3, #4]
 80175de:	3308      	adds	r3, #8
 80175e0:	9301      	str	r3, [sp, #4]
 80175e2:	2d00      	cmp	r5, #0
 80175e4:	d0f8      	beq.n	80175d8 <__sfvwrite_r+0xe4>
 80175e6:	4a72      	ldr	r2, [pc, #456]	; (80177b0 <__sfvwrite_r+0x2bc>)
 80175e8:	002b      	movs	r3, r5
 80175ea:	4295      	cmp	r5, r2
 80175ec:	d900      	bls.n	80175f0 <__sfvwrite_r+0xfc>
 80175ee:	0013      	movs	r3, r2
 80175f0:	0032      	movs	r2, r6
 80175f2:	69e1      	ldr	r1, [r4, #28]
 80175f4:	9802      	ldr	r0, [sp, #8]
 80175f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80175f8:	47b8      	blx	r7
 80175fa:	2800      	cmp	r0, #0
 80175fc:	dd3f      	ble.n	801767e <__sfvwrite_r+0x18a>
 80175fe:	9b03      	ldr	r3, [sp, #12]
 8017600:	1836      	adds	r6, r6, r0
 8017602:	689b      	ldr	r3, [r3, #8]
 8017604:	1a2d      	subs	r5, r5, r0
 8017606:	9300      	str	r3, [sp, #0]
 8017608:	1a18      	subs	r0, r3, r0
 801760a:	9b03      	ldr	r3, [sp, #12]
 801760c:	6098      	str	r0, [r3, #8]
 801760e:	d1e8      	bne.n	80175e2 <__sfvwrite_r+0xee>
 8017610:	e779      	b.n	8017506 <__sfvwrite_r+0x12>
 8017612:	2600      	movs	r6, #0
 8017614:	0035      	movs	r5, r6
 8017616:	e7e4      	b.n	80175e2 <__sfvwrite_r+0xee>
 8017618:	9b01      	ldr	r3, [sp, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	9304      	str	r3, [sp, #16]
 801761e:	9b01      	ldr	r3, [sp, #4]
 8017620:	685b      	ldr	r3, [r3, #4]
 8017622:	9300      	str	r3, [sp, #0]
 8017624:	9b01      	ldr	r3, [sp, #4]
 8017626:	3308      	adds	r3, #8
 8017628:	9301      	str	r3, [sp, #4]
 801762a:	9b00      	ldr	r3, [sp, #0]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d0f3      	beq.n	8017618 <__sfvwrite_r+0x124>
 8017630:	2380      	movs	r3, #128	; 0x80
 8017632:	89a2      	ldrh	r2, [r4, #12]
 8017634:	009b      	lsls	r3, r3, #2
 8017636:	68a5      	ldr	r5, [r4, #8]
 8017638:	6820      	ldr	r0, [r4, #0]
 801763a:	421a      	tst	r2, r3
 801763c:	d064      	beq.n	8017708 <__sfvwrite_r+0x214>
 801763e:	9b00      	ldr	r3, [sp, #0]
 8017640:	429d      	cmp	r5, r3
 8017642:	d835      	bhi.n	80176b0 <__sfvwrite_r+0x1bc>
 8017644:	2390      	movs	r3, #144	; 0x90
 8017646:	00db      	lsls	r3, r3, #3
 8017648:	421a      	tst	r2, r3
 801764a:	d031      	beq.n	80176b0 <__sfvwrite_r+0x1bc>
 801764c:	2603      	movs	r6, #3
 801764e:	6963      	ldr	r3, [r4, #20]
 8017650:	6921      	ldr	r1, [r4, #16]
 8017652:	435e      	muls	r6, r3
 8017654:	1a47      	subs	r7, r0, r1
 8017656:	0ff0      	lsrs	r0, r6, #31
 8017658:	1986      	adds	r6, r0, r6
 801765a:	9800      	ldr	r0, [sp, #0]
 801765c:	1c7b      	adds	r3, r7, #1
 801765e:	181b      	adds	r3, r3, r0
 8017660:	1076      	asrs	r6, r6, #1
 8017662:	42b3      	cmp	r3, r6
 8017664:	d900      	bls.n	8017668 <__sfvwrite_r+0x174>
 8017666:	001e      	movs	r6, r3
 8017668:	0553      	lsls	r3, r2, #21
 801766a:	d53e      	bpl.n	80176ea <__sfvwrite_r+0x1f6>
 801766c:	0031      	movs	r1, r6
 801766e:	9802      	ldr	r0, [sp, #8]
 8017670:	f7fa f854 	bl	801171c <_malloc_r>
 8017674:	1e05      	subs	r5, r0, #0
 8017676:	d10a      	bne.n	801768e <__sfvwrite_r+0x19a>
 8017678:	230c      	movs	r3, #12
 801767a:	9a02      	ldr	r2, [sp, #8]
 801767c:	6013      	str	r3, [r2, #0]
 801767e:	2340      	movs	r3, #64	; 0x40
 8017680:	89a2      	ldrh	r2, [r4, #12]
 8017682:	4313      	orrs	r3, r2
 8017684:	81a3      	strh	r3, [r4, #12]
 8017686:	e7a4      	b.n	80175d2 <__sfvwrite_r+0xde>
 8017688:	9104      	str	r1, [sp, #16]
 801768a:	9100      	str	r1, [sp, #0]
 801768c:	e7cd      	b.n	801762a <__sfvwrite_r+0x136>
 801768e:	003a      	movs	r2, r7
 8017690:	6921      	ldr	r1, [r4, #16]
 8017692:	f7fa fa65 	bl	8011b60 <memcpy>
 8017696:	89a3      	ldrh	r3, [r4, #12]
 8017698:	4a46      	ldr	r2, [pc, #280]	; (80177b4 <__sfvwrite_r+0x2c0>)
 801769a:	401a      	ands	r2, r3
 801769c:	2380      	movs	r3, #128	; 0x80
 801769e:	4313      	orrs	r3, r2
 80176a0:	81a3      	strh	r3, [r4, #12]
 80176a2:	6125      	str	r5, [r4, #16]
 80176a4:	19ed      	adds	r5, r5, r7
 80176a6:	6025      	str	r5, [r4, #0]
 80176a8:	6166      	str	r6, [r4, #20]
 80176aa:	9d00      	ldr	r5, [sp, #0]
 80176ac:	1bf6      	subs	r6, r6, r7
 80176ae:	60a6      	str	r6, [r4, #8]
 80176b0:	9f00      	ldr	r7, [sp, #0]
 80176b2:	42bd      	cmp	r5, r7
 80176b4:	d900      	bls.n	80176b8 <__sfvwrite_r+0x1c4>
 80176b6:	003d      	movs	r5, r7
 80176b8:	002a      	movs	r2, r5
 80176ba:	9904      	ldr	r1, [sp, #16]
 80176bc:	6820      	ldr	r0, [r4, #0]
 80176be:	f7fe f9a8 	bl	8015a12 <memmove>
 80176c2:	68a3      	ldr	r3, [r4, #8]
 80176c4:	1b5b      	subs	r3, r3, r5
 80176c6:	60a3      	str	r3, [r4, #8]
 80176c8:	6823      	ldr	r3, [r4, #0]
 80176ca:	195d      	adds	r5, r3, r5
 80176cc:	6025      	str	r5, [r4, #0]
 80176ce:	9b04      	ldr	r3, [sp, #16]
 80176d0:	19db      	adds	r3, r3, r7
 80176d2:	9304      	str	r3, [sp, #16]
 80176d4:	9b00      	ldr	r3, [sp, #0]
 80176d6:	1bdb      	subs	r3, r3, r7
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	9b03      	ldr	r3, [sp, #12]
 80176dc:	689b      	ldr	r3, [r3, #8]
 80176de:	1bdf      	subs	r7, r3, r7
 80176e0:	9305      	str	r3, [sp, #20]
 80176e2:	9b03      	ldr	r3, [sp, #12]
 80176e4:	609f      	str	r7, [r3, #8]
 80176e6:	d1a0      	bne.n	801762a <__sfvwrite_r+0x136>
 80176e8:	e70d      	b.n	8017506 <__sfvwrite_r+0x12>
 80176ea:	0032      	movs	r2, r6
 80176ec:	9802      	ldr	r0, [sp, #8]
 80176ee:	f7fa fa7d 	bl	8011bec <_realloc_r>
 80176f2:	1e05      	subs	r5, r0, #0
 80176f4:	d1d5      	bne.n	80176a2 <__sfvwrite_r+0x1ae>
 80176f6:	6921      	ldr	r1, [r4, #16]
 80176f8:	9802      	ldr	r0, [sp, #8]
 80176fa:	f7fd fd39 	bl	8015170 <_free_r>
 80176fe:	2280      	movs	r2, #128	; 0x80
 8017700:	89a3      	ldrh	r3, [r4, #12]
 8017702:	4393      	bics	r3, r2
 8017704:	81a3      	strh	r3, [r4, #12]
 8017706:	e7b7      	b.n	8017678 <__sfvwrite_r+0x184>
 8017708:	6923      	ldr	r3, [r4, #16]
 801770a:	4283      	cmp	r3, r0
 801770c:	d303      	bcc.n	8017716 <__sfvwrite_r+0x222>
 801770e:	6967      	ldr	r7, [r4, #20]
 8017710:	9b00      	ldr	r3, [sp, #0]
 8017712:	429f      	cmp	r7, r3
 8017714:	d917      	bls.n	8017746 <__sfvwrite_r+0x252>
 8017716:	9b00      	ldr	r3, [sp, #0]
 8017718:	429d      	cmp	r5, r3
 801771a:	d900      	bls.n	801771e <__sfvwrite_r+0x22a>
 801771c:	001d      	movs	r5, r3
 801771e:	002a      	movs	r2, r5
 8017720:	9904      	ldr	r1, [sp, #16]
 8017722:	f7fe f976 	bl	8015a12 <memmove>
 8017726:	68a3      	ldr	r3, [r4, #8]
 8017728:	6822      	ldr	r2, [r4, #0]
 801772a:	1b5b      	subs	r3, r3, r5
 801772c:	1952      	adds	r2, r2, r5
 801772e:	002f      	movs	r7, r5
 8017730:	60a3      	str	r3, [r4, #8]
 8017732:	6022      	str	r2, [r4, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d1ca      	bne.n	80176ce <__sfvwrite_r+0x1da>
 8017738:	0021      	movs	r1, r4
 801773a:	9802      	ldr	r0, [sp, #8]
 801773c:	f7ff fdd2 	bl	80172e4 <_fflush_r>
 8017740:	2800      	cmp	r0, #0
 8017742:	d0c4      	beq.n	80176ce <__sfvwrite_r+0x1da>
 8017744:	e79b      	b.n	801767e <__sfvwrite_r+0x18a>
 8017746:	9a00      	ldr	r2, [sp, #0]
 8017748:	4b1b      	ldr	r3, [pc, #108]	; (80177b8 <__sfvwrite_r+0x2c4>)
 801774a:	0010      	movs	r0, r2
 801774c:	429a      	cmp	r2, r3
 801774e:	d900      	bls.n	8017752 <__sfvwrite_r+0x25e>
 8017750:	481a      	ldr	r0, [pc, #104]	; (80177bc <__sfvwrite_r+0x2c8>)
 8017752:	0039      	movs	r1, r7
 8017754:	f7e8 fd86 	bl	8000264 <__divsi3>
 8017758:	003b      	movs	r3, r7
 801775a:	9a04      	ldr	r2, [sp, #16]
 801775c:	4343      	muls	r3, r0
 801775e:	69e1      	ldr	r1, [r4, #28]
 8017760:	9802      	ldr	r0, [sp, #8]
 8017762:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017764:	47a8      	blx	r5
 8017766:	1e07      	subs	r7, r0, #0
 8017768:	dcb1      	bgt.n	80176ce <__sfvwrite_r+0x1da>
 801776a:	e788      	b.n	801767e <__sfvwrite_r+0x18a>
 801776c:	9b01      	ldr	r3, [sp, #4]
 801776e:	2000      	movs	r0, #0
 8017770:	681e      	ldr	r6, [r3, #0]
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	9300      	str	r3, [sp, #0]
 8017776:	9b01      	ldr	r3, [sp, #4]
 8017778:	3308      	adds	r3, #8
 801777a:	9301      	str	r3, [sp, #4]
 801777c:	e6df      	b.n	801753e <__sfvwrite_r+0x4a>
 801777e:	9a04      	ldr	r2, [sp, #16]
 8017780:	4293      	cmp	r3, r2
 8017782:	dc08      	bgt.n	8017796 <__sfvwrite_r+0x2a2>
 8017784:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017786:	0032      	movs	r2, r6
 8017788:	69e1      	ldr	r1, [r4, #28]
 801778a:	9802      	ldr	r0, [sp, #8]
 801778c:	47a8      	blx	r5
 801778e:	1e05      	subs	r5, r0, #0
 8017790:	dd00      	ble.n	8017794 <__sfvwrite_r+0x2a0>
 8017792:	e703      	b.n	801759c <__sfvwrite_r+0xa8>
 8017794:	e773      	b.n	801767e <__sfvwrite_r+0x18a>
 8017796:	9a04      	ldr	r2, [sp, #16]
 8017798:	0031      	movs	r1, r6
 801779a:	f7fe f93a 	bl	8015a12 <memmove>
 801779e:	9a04      	ldr	r2, [sp, #16]
 80177a0:	68a3      	ldr	r3, [r4, #8]
 80177a2:	0015      	movs	r5, r2
 80177a4:	1a9b      	subs	r3, r3, r2
 80177a6:	60a3      	str	r3, [r4, #8]
 80177a8:	6823      	ldr	r3, [r4, #0]
 80177aa:	189b      	adds	r3, r3, r2
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	e6f5      	b.n	801759c <__sfvwrite_r+0xa8>
 80177b0:	7ffffc00 	.word	0x7ffffc00
 80177b4:	fffffb7f 	.word	0xfffffb7f
 80177b8:	7ffffffe 	.word	0x7ffffffe
 80177bc:	7fffffff 	.word	0x7fffffff

080177c0 <_fwalk_reent>:
 80177c0:	23b8      	movs	r3, #184	; 0xb8
 80177c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177c4:	0006      	movs	r6, r0
 80177c6:	2700      	movs	r7, #0
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	9101      	str	r1, [sp, #4]
 80177cc:	18c4      	adds	r4, r0, r3
 80177ce:	6863      	ldr	r3, [r4, #4]
 80177d0:	68a5      	ldr	r5, [r4, #8]
 80177d2:	9300      	str	r3, [sp, #0]
 80177d4:	9b00      	ldr	r3, [sp, #0]
 80177d6:	3b01      	subs	r3, #1
 80177d8:	9300      	str	r3, [sp, #0]
 80177da:	d504      	bpl.n	80177e6 <_fwalk_reent+0x26>
 80177dc:	6824      	ldr	r4, [r4, #0]
 80177de:	2c00      	cmp	r4, #0
 80177e0:	d1f5      	bne.n	80177ce <_fwalk_reent+0xe>
 80177e2:	0038      	movs	r0, r7
 80177e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80177e6:	89ab      	ldrh	r3, [r5, #12]
 80177e8:	2b01      	cmp	r3, #1
 80177ea:	d908      	bls.n	80177fe <_fwalk_reent+0x3e>
 80177ec:	220e      	movs	r2, #14
 80177ee:	5eab      	ldrsh	r3, [r5, r2]
 80177f0:	3301      	adds	r3, #1
 80177f2:	d004      	beq.n	80177fe <_fwalk_reent+0x3e>
 80177f4:	0029      	movs	r1, r5
 80177f6:	0030      	movs	r0, r6
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	4798      	blx	r3
 80177fc:	4307      	orrs	r7, r0
 80177fe:	3568      	adds	r5, #104	; 0x68
 8017800:	e7e8      	b.n	80177d4 <_fwalk_reent+0x14>
	...

08017804 <__swhatbuf_r>:
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	000e      	movs	r6, r1
 8017808:	001d      	movs	r5, r3
 801780a:	230e      	movs	r3, #14
 801780c:	5ec9      	ldrsh	r1, [r1, r3]
 801780e:	0014      	movs	r4, r2
 8017810:	b096      	sub	sp, #88	; 0x58
 8017812:	2900      	cmp	r1, #0
 8017814:	da0b      	bge.n	801782e <__swhatbuf_r+0x2a>
 8017816:	2300      	movs	r3, #0
 8017818:	602b      	str	r3, [r5, #0]
 801781a:	89b1      	ldrh	r1, [r6, #12]
 801781c:	2280      	movs	r2, #128	; 0x80
 801781e:	0008      	movs	r0, r1
 8017820:	4010      	ands	r0, r2
 8017822:	4211      	tst	r1, r2
 8017824:	d117      	bne.n	8017856 <__swhatbuf_r+0x52>
 8017826:	2380      	movs	r3, #128	; 0x80
 8017828:	00db      	lsls	r3, r3, #3
 801782a:	6023      	str	r3, [r4, #0]
 801782c:	e016      	b.n	801785c <__swhatbuf_r+0x58>
 801782e:	466a      	mov	r2, sp
 8017830:	f000 f9e4 	bl	8017bfc <_fstat_r>
 8017834:	2800      	cmp	r0, #0
 8017836:	dbee      	blt.n	8017816 <__swhatbuf_r+0x12>
 8017838:	23f0      	movs	r3, #240	; 0xf0
 801783a:	9901      	ldr	r1, [sp, #4]
 801783c:	021b      	lsls	r3, r3, #8
 801783e:	4019      	ands	r1, r3
 8017840:	4b07      	ldr	r3, [pc, #28]	; (8017860 <__swhatbuf_r+0x5c>)
 8017842:	2080      	movs	r0, #128	; 0x80
 8017844:	18c9      	adds	r1, r1, r3
 8017846:	424b      	negs	r3, r1
 8017848:	4159      	adcs	r1, r3
 801784a:	2380      	movs	r3, #128	; 0x80
 801784c:	00db      	lsls	r3, r3, #3
 801784e:	6029      	str	r1, [r5, #0]
 8017850:	0100      	lsls	r0, r0, #4
 8017852:	6023      	str	r3, [r4, #0]
 8017854:	e002      	b.n	801785c <__swhatbuf_r+0x58>
 8017856:	2240      	movs	r2, #64	; 0x40
 8017858:	0018      	movs	r0, r3
 801785a:	6022      	str	r2, [r4, #0]
 801785c:	b016      	add	sp, #88	; 0x58
 801785e:	bd70      	pop	{r4, r5, r6, pc}
 8017860:	ffffe000 	.word	0xffffe000

08017864 <__smakebuf_r>:
 8017864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017866:	2602      	movs	r6, #2
 8017868:	898b      	ldrh	r3, [r1, #12]
 801786a:	0005      	movs	r5, r0
 801786c:	000c      	movs	r4, r1
 801786e:	4233      	tst	r3, r6
 8017870:	d006      	beq.n	8017880 <__smakebuf_r+0x1c>
 8017872:	0023      	movs	r3, r4
 8017874:	3343      	adds	r3, #67	; 0x43
 8017876:	6023      	str	r3, [r4, #0]
 8017878:	6123      	str	r3, [r4, #16]
 801787a:	2301      	movs	r3, #1
 801787c:	6163      	str	r3, [r4, #20]
 801787e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017880:	466a      	mov	r2, sp
 8017882:	ab01      	add	r3, sp, #4
 8017884:	f7ff ffbe 	bl	8017804 <__swhatbuf_r>
 8017888:	9900      	ldr	r1, [sp, #0]
 801788a:	0007      	movs	r7, r0
 801788c:	0028      	movs	r0, r5
 801788e:	f7f9 ff45 	bl	801171c <_malloc_r>
 8017892:	2800      	cmp	r0, #0
 8017894:	d108      	bne.n	80178a8 <__smakebuf_r+0x44>
 8017896:	220c      	movs	r2, #12
 8017898:	5ea3      	ldrsh	r3, [r4, r2]
 801789a:	059a      	lsls	r2, r3, #22
 801789c:	d4ef      	bmi.n	801787e <__smakebuf_r+0x1a>
 801789e:	2203      	movs	r2, #3
 80178a0:	4393      	bics	r3, r2
 80178a2:	431e      	orrs	r6, r3
 80178a4:	81a6      	strh	r6, [r4, #12]
 80178a6:	e7e4      	b.n	8017872 <__smakebuf_r+0xe>
 80178a8:	4b0f      	ldr	r3, [pc, #60]	; (80178e8 <__smakebuf_r+0x84>)
 80178aa:	63eb      	str	r3, [r5, #60]	; 0x3c
 80178ac:	2380      	movs	r3, #128	; 0x80
 80178ae:	89a2      	ldrh	r2, [r4, #12]
 80178b0:	6020      	str	r0, [r4, #0]
 80178b2:	4313      	orrs	r3, r2
 80178b4:	81a3      	strh	r3, [r4, #12]
 80178b6:	9b00      	ldr	r3, [sp, #0]
 80178b8:	6120      	str	r0, [r4, #16]
 80178ba:	6163      	str	r3, [r4, #20]
 80178bc:	9b01      	ldr	r3, [sp, #4]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d00d      	beq.n	80178de <__smakebuf_r+0x7a>
 80178c2:	0028      	movs	r0, r5
 80178c4:	230e      	movs	r3, #14
 80178c6:	5ee1      	ldrsh	r1, [r4, r3]
 80178c8:	f000 f9aa 	bl	8017c20 <_isatty_r>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d006      	beq.n	80178de <__smakebuf_r+0x7a>
 80178d0:	2203      	movs	r2, #3
 80178d2:	89a3      	ldrh	r3, [r4, #12]
 80178d4:	4393      	bics	r3, r2
 80178d6:	001a      	movs	r2, r3
 80178d8:	2301      	movs	r3, #1
 80178da:	4313      	orrs	r3, r2
 80178dc:	81a3      	strh	r3, [r4, #12]
 80178de:	89a0      	ldrh	r0, [r4, #12]
 80178e0:	4307      	orrs	r7, r0
 80178e2:	81a7      	strh	r7, [r4, #12]
 80178e4:	e7cb      	b.n	801787e <__smakebuf_r+0x1a>
 80178e6:	46c0      	nop			; (mov r8, r8)
 80178e8:	08017381 	.word	0x08017381

080178ec <_raise_r>:
 80178ec:	b570      	push	{r4, r5, r6, lr}
 80178ee:	0004      	movs	r4, r0
 80178f0:	000d      	movs	r5, r1
 80178f2:	291f      	cmp	r1, #31
 80178f4:	d904      	bls.n	8017900 <_raise_r+0x14>
 80178f6:	2316      	movs	r3, #22
 80178f8:	6003      	str	r3, [r0, #0]
 80178fa:	2001      	movs	r0, #1
 80178fc:	4240      	negs	r0, r0
 80178fe:	bd70      	pop	{r4, r5, r6, pc}
 8017900:	23b7      	movs	r3, #183	; 0xb7
 8017902:	009b      	lsls	r3, r3, #2
 8017904:	58c3      	ldr	r3, [r0, r3]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d004      	beq.n	8017914 <_raise_r+0x28>
 801790a:	008a      	lsls	r2, r1, #2
 801790c:	189b      	adds	r3, r3, r2
 801790e:	681a      	ldr	r2, [r3, #0]
 8017910:	2a00      	cmp	r2, #0
 8017912:	d108      	bne.n	8017926 <_raise_r+0x3a>
 8017914:	0020      	movs	r0, r4
 8017916:	f000 f831 	bl	801797c <_getpid_r>
 801791a:	002a      	movs	r2, r5
 801791c:	0001      	movs	r1, r0
 801791e:	0020      	movs	r0, r4
 8017920:	f000 f81a 	bl	8017958 <_kill_r>
 8017924:	e7eb      	b.n	80178fe <_raise_r+0x12>
 8017926:	2000      	movs	r0, #0
 8017928:	2a01      	cmp	r2, #1
 801792a:	d0e8      	beq.n	80178fe <_raise_r+0x12>
 801792c:	1c51      	adds	r1, r2, #1
 801792e:	d103      	bne.n	8017938 <_raise_r+0x4c>
 8017930:	2316      	movs	r3, #22
 8017932:	3001      	adds	r0, #1
 8017934:	6023      	str	r3, [r4, #0]
 8017936:	e7e2      	b.n	80178fe <_raise_r+0x12>
 8017938:	2400      	movs	r4, #0
 801793a:	0028      	movs	r0, r5
 801793c:	601c      	str	r4, [r3, #0]
 801793e:	4790      	blx	r2
 8017940:	0020      	movs	r0, r4
 8017942:	e7dc      	b.n	80178fe <_raise_r+0x12>

08017944 <raise>:
 8017944:	b510      	push	{r4, lr}
 8017946:	4b03      	ldr	r3, [pc, #12]	; (8017954 <raise+0x10>)
 8017948:	0001      	movs	r1, r0
 801794a:	6818      	ldr	r0, [r3, #0]
 801794c:	f7ff ffce 	bl	80178ec <_raise_r>
 8017950:	bd10      	pop	{r4, pc}
 8017952:	46c0      	nop			; (mov r8, r8)
 8017954:	20000100 	.word	0x20000100

08017958 <_kill_r>:
 8017958:	2300      	movs	r3, #0
 801795a:	b570      	push	{r4, r5, r6, lr}
 801795c:	4d06      	ldr	r5, [pc, #24]	; (8017978 <_kill_r+0x20>)
 801795e:	0004      	movs	r4, r0
 8017960:	0008      	movs	r0, r1
 8017962:	0011      	movs	r1, r2
 8017964:	602b      	str	r3, [r5, #0]
 8017966:	f000 f9b5 	bl	8017cd4 <_kill>
 801796a:	1c43      	adds	r3, r0, #1
 801796c:	d103      	bne.n	8017976 <_kill_r+0x1e>
 801796e:	682b      	ldr	r3, [r5, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d000      	beq.n	8017976 <_kill_r+0x1e>
 8017974:	6023      	str	r3, [r4, #0]
 8017976:	bd70      	pop	{r4, r5, r6, pc}
 8017978:	20006a8c 	.word	0x20006a8c

0801797c <_getpid_r>:
 801797c:	b510      	push	{r4, lr}
 801797e:	f000 f999 	bl	8017cb4 <_getpid>
 8017982:	bd10      	pop	{r4, pc}

08017984 <__sread>:
 8017984:	b570      	push	{r4, r5, r6, lr}
 8017986:	000c      	movs	r4, r1
 8017988:	250e      	movs	r5, #14
 801798a:	5f49      	ldrsh	r1, [r1, r5]
 801798c:	f000 f96e 	bl	8017c6c <_read_r>
 8017990:	2800      	cmp	r0, #0
 8017992:	db03      	blt.n	801799c <__sread+0x18>
 8017994:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017996:	181b      	adds	r3, r3, r0
 8017998:	6523      	str	r3, [r4, #80]	; 0x50
 801799a:	bd70      	pop	{r4, r5, r6, pc}
 801799c:	89a3      	ldrh	r3, [r4, #12]
 801799e:	4a02      	ldr	r2, [pc, #8]	; (80179a8 <__sread+0x24>)
 80179a0:	4013      	ands	r3, r2
 80179a2:	81a3      	strh	r3, [r4, #12]
 80179a4:	e7f9      	b.n	801799a <__sread+0x16>
 80179a6:	46c0      	nop			; (mov r8, r8)
 80179a8:	ffffefff 	.word	0xffffefff

080179ac <__swrite>:
 80179ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ae:	001f      	movs	r7, r3
 80179b0:	898b      	ldrh	r3, [r1, #12]
 80179b2:	0005      	movs	r5, r0
 80179b4:	000c      	movs	r4, r1
 80179b6:	0016      	movs	r6, r2
 80179b8:	05db      	lsls	r3, r3, #23
 80179ba:	d505      	bpl.n	80179c8 <__swrite+0x1c>
 80179bc:	230e      	movs	r3, #14
 80179be:	5ec9      	ldrsh	r1, [r1, r3]
 80179c0:	2200      	movs	r2, #0
 80179c2:	2302      	movs	r3, #2
 80179c4:	f000 f93e 	bl	8017c44 <_lseek_r>
 80179c8:	89a3      	ldrh	r3, [r4, #12]
 80179ca:	4a05      	ldr	r2, [pc, #20]	; (80179e0 <__swrite+0x34>)
 80179cc:	0028      	movs	r0, r5
 80179ce:	4013      	ands	r3, r2
 80179d0:	81a3      	strh	r3, [r4, #12]
 80179d2:	0032      	movs	r2, r6
 80179d4:	230e      	movs	r3, #14
 80179d6:	5ee1      	ldrsh	r1, [r4, r3]
 80179d8:	003b      	movs	r3, r7
 80179da:	f000 f889 	bl	8017af0 <_write_r>
 80179de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179e0:	ffffefff 	.word	0xffffefff

080179e4 <__sseek>:
 80179e4:	b570      	push	{r4, r5, r6, lr}
 80179e6:	000c      	movs	r4, r1
 80179e8:	250e      	movs	r5, #14
 80179ea:	5f49      	ldrsh	r1, [r1, r5]
 80179ec:	f000 f92a 	bl	8017c44 <_lseek_r>
 80179f0:	89a3      	ldrh	r3, [r4, #12]
 80179f2:	1c42      	adds	r2, r0, #1
 80179f4:	d103      	bne.n	80179fe <__sseek+0x1a>
 80179f6:	4a05      	ldr	r2, [pc, #20]	; (8017a0c <__sseek+0x28>)
 80179f8:	4013      	ands	r3, r2
 80179fa:	81a3      	strh	r3, [r4, #12]
 80179fc:	bd70      	pop	{r4, r5, r6, pc}
 80179fe:	2280      	movs	r2, #128	; 0x80
 8017a00:	0152      	lsls	r2, r2, #5
 8017a02:	4313      	orrs	r3, r2
 8017a04:	81a3      	strh	r3, [r4, #12]
 8017a06:	6520      	str	r0, [r4, #80]	; 0x50
 8017a08:	e7f8      	b.n	80179fc <__sseek+0x18>
 8017a0a:	46c0      	nop			; (mov r8, r8)
 8017a0c:	ffffefff 	.word	0xffffefff

08017a10 <__sclose>:
 8017a10:	b510      	push	{r4, lr}
 8017a12:	230e      	movs	r3, #14
 8017a14:	5ec9      	ldrsh	r1, [r1, r3]
 8017a16:	f000 f87f 	bl	8017b18 <_close_r>
 8017a1a:	bd10      	pop	{r4, pc}

08017a1c <__swbuf_r>:
 8017a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1e:	0006      	movs	r6, r0
 8017a20:	000d      	movs	r5, r1
 8017a22:	0014      	movs	r4, r2
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d004      	beq.n	8017a32 <__swbuf_r+0x16>
 8017a28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d101      	bne.n	8017a32 <__swbuf_r+0x16>
 8017a2e:	f7ff fccf 	bl	80173d0 <__sinit>
 8017a32:	69a3      	ldr	r3, [r4, #24]
 8017a34:	60a3      	str	r3, [r4, #8]
 8017a36:	89a3      	ldrh	r3, [r4, #12]
 8017a38:	071b      	lsls	r3, r3, #28
 8017a3a:	d52e      	bpl.n	8017a9a <__swbuf_r+0x7e>
 8017a3c:	6923      	ldr	r3, [r4, #16]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d02b      	beq.n	8017a9a <__swbuf_r+0x7e>
 8017a42:	230c      	movs	r3, #12
 8017a44:	5ee2      	ldrsh	r2, [r4, r3]
 8017a46:	2380      	movs	r3, #128	; 0x80
 8017a48:	019b      	lsls	r3, r3, #6
 8017a4a:	b2ef      	uxtb	r7, r5
 8017a4c:	b2ed      	uxtb	r5, r5
 8017a4e:	421a      	tst	r2, r3
 8017a50:	d02c      	beq.n	8017aac <__swbuf_r+0x90>
 8017a52:	6823      	ldr	r3, [r4, #0]
 8017a54:	6922      	ldr	r2, [r4, #16]
 8017a56:	1a98      	subs	r0, r3, r2
 8017a58:	6963      	ldr	r3, [r4, #20]
 8017a5a:	4283      	cmp	r3, r0
 8017a5c:	dc05      	bgt.n	8017a6a <__swbuf_r+0x4e>
 8017a5e:	0021      	movs	r1, r4
 8017a60:	0030      	movs	r0, r6
 8017a62:	f7ff fc3f 	bl	80172e4 <_fflush_r>
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d11d      	bne.n	8017aa6 <__swbuf_r+0x8a>
 8017a6a:	68a3      	ldr	r3, [r4, #8]
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	3b01      	subs	r3, #1
 8017a70:	60a3      	str	r3, [r4, #8]
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	1c5a      	adds	r2, r3, #1
 8017a76:	6022      	str	r2, [r4, #0]
 8017a78:	701f      	strb	r7, [r3, #0]
 8017a7a:	6963      	ldr	r3, [r4, #20]
 8017a7c:	4283      	cmp	r3, r0
 8017a7e:	d004      	beq.n	8017a8a <__swbuf_r+0x6e>
 8017a80:	89a3      	ldrh	r3, [r4, #12]
 8017a82:	07db      	lsls	r3, r3, #31
 8017a84:	d507      	bpl.n	8017a96 <__swbuf_r+0x7a>
 8017a86:	2d0a      	cmp	r5, #10
 8017a88:	d105      	bne.n	8017a96 <__swbuf_r+0x7a>
 8017a8a:	0021      	movs	r1, r4
 8017a8c:	0030      	movs	r0, r6
 8017a8e:	f7ff fc29 	bl	80172e4 <_fflush_r>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d107      	bne.n	8017aa6 <__swbuf_r+0x8a>
 8017a96:	0028      	movs	r0, r5
 8017a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a9a:	0021      	movs	r1, r4
 8017a9c:	0030      	movs	r0, r6
 8017a9e:	f7ff fb1d 	bl	80170dc <__swsetup_r>
 8017aa2:	2800      	cmp	r0, #0
 8017aa4:	d0cd      	beq.n	8017a42 <__swbuf_r+0x26>
 8017aa6:	2501      	movs	r5, #1
 8017aa8:	426d      	negs	r5, r5
 8017aaa:	e7f4      	b.n	8017a96 <__swbuf_r+0x7a>
 8017aac:	4313      	orrs	r3, r2
 8017aae:	81a3      	strh	r3, [r4, #12]
 8017ab0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ab2:	4b02      	ldr	r3, [pc, #8]	; (8017abc <__swbuf_r+0xa0>)
 8017ab4:	4013      	ands	r3, r2
 8017ab6:	6663      	str	r3, [r4, #100]	; 0x64
 8017ab8:	e7cb      	b.n	8017a52 <__swbuf_r+0x36>
 8017aba:	46c0      	nop			; (mov r8, r8)
 8017abc:	ffffdfff 	.word	0xffffdfff

08017ac0 <_wcrtomb_r>:
 8017ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017ac2:	001d      	movs	r5, r3
 8017ac4:	4b09      	ldr	r3, [pc, #36]	; (8017aec <_wcrtomb_r+0x2c>)
 8017ac6:	0004      	movs	r4, r0
 8017ac8:	33e0      	adds	r3, #224	; 0xe0
 8017aca:	681e      	ldr	r6, [r3, #0]
 8017acc:	002b      	movs	r3, r5
 8017ace:	2900      	cmp	r1, #0
 8017ad0:	d101      	bne.n	8017ad6 <_wcrtomb_r+0x16>
 8017ad2:	000a      	movs	r2, r1
 8017ad4:	a901      	add	r1, sp, #4
 8017ad6:	0020      	movs	r0, r4
 8017ad8:	47b0      	blx	r6
 8017ada:	1c43      	adds	r3, r0, #1
 8017adc:	d103      	bne.n	8017ae6 <_wcrtomb_r+0x26>
 8017ade:	2300      	movs	r3, #0
 8017ae0:	602b      	str	r3, [r5, #0]
 8017ae2:	338a      	adds	r3, #138	; 0x8a
 8017ae4:	6023      	str	r3, [r4, #0]
 8017ae6:	b004      	add	sp, #16
 8017ae8:	bd70      	pop	{r4, r5, r6, pc}
 8017aea:	46c0      	nop			; (mov r8, r8)
 8017aec:	20000948 	.word	0x20000948

08017af0 <_write_r>:
 8017af0:	b570      	push	{r4, r5, r6, lr}
 8017af2:	0004      	movs	r4, r0
 8017af4:	0008      	movs	r0, r1
 8017af6:	0011      	movs	r1, r2
 8017af8:	001a      	movs	r2, r3
 8017afa:	2300      	movs	r3, #0
 8017afc:	4d05      	ldr	r5, [pc, #20]	; (8017b14 <_write_r+0x24>)
 8017afe:	602b      	str	r3, [r5, #0]
 8017b00:	f000 f910 	bl	8017d24 <_write>
 8017b04:	1c43      	adds	r3, r0, #1
 8017b06:	d103      	bne.n	8017b10 <_write_r+0x20>
 8017b08:	682b      	ldr	r3, [r5, #0]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d000      	beq.n	8017b10 <_write_r+0x20>
 8017b0e:	6023      	str	r3, [r4, #0]
 8017b10:	bd70      	pop	{r4, r5, r6, pc}
 8017b12:	46c0      	nop			; (mov r8, r8)
 8017b14:	20006a8c 	.word	0x20006a8c

08017b18 <_close_r>:
 8017b18:	2300      	movs	r3, #0
 8017b1a:	b570      	push	{r4, r5, r6, lr}
 8017b1c:	4d06      	ldr	r5, [pc, #24]	; (8017b38 <_close_r+0x20>)
 8017b1e:	0004      	movs	r4, r0
 8017b20:	0008      	movs	r0, r1
 8017b22:	602b      	str	r3, [r5, #0]
 8017b24:	f000 f8b6 	bl	8017c94 <_close>
 8017b28:	1c43      	adds	r3, r0, #1
 8017b2a:	d103      	bne.n	8017b34 <_close_r+0x1c>
 8017b2c:	682b      	ldr	r3, [r5, #0]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d000      	beq.n	8017b34 <_close_r+0x1c>
 8017b32:	6023      	str	r3, [r4, #0]
 8017b34:	bd70      	pop	{r4, r5, r6, pc}
 8017b36:	46c0      	nop			; (mov r8, r8)
 8017b38:	20006a8c 	.word	0x20006a8c

08017b3c <_fclose_r>:
 8017b3c:	b570      	push	{r4, r5, r6, lr}
 8017b3e:	0005      	movs	r5, r0
 8017b40:	1e0c      	subs	r4, r1, #0
 8017b42:	d102      	bne.n	8017b4a <_fclose_r+0xe>
 8017b44:	2600      	movs	r6, #0
 8017b46:	0030      	movs	r0, r6
 8017b48:	bd70      	pop	{r4, r5, r6, pc}
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d004      	beq.n	8017b58 <_fclose_r+0x1c>
 8017b4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d101      	bne.n	8017b58 <_fclose_r+0x1c>
 8017b54:	f7ff fc3c 	bl	80173d0 <__sinit>
 8017b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b5a:	07db      	lsls	r3, r3, #31
 8017b5c:	d405      	bmi.n	8017b6a <_fclose_r+0x2e>
 8017b5e:	89a3      	ldrh	r3, [r4, #12]
 8017b60:	059b      	lsls	r3, r3, #22
 8017b62:	d402      	bmi.n	8017b6a <_fclose_r+0x2e>
 8017b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b66:	f7fd ff35 	bl	80159d4 <__retarget_lock_acquire_recursive>
 8017b6a:	220c      	movs	r2, #12
 8017b6c:	5ea3      	ldrsh	r3, [r4, r2]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d109      	bne.n	8017b86 <_fclose_r+0x4a>
 8017b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b74:	3301      	adds	r3, #1
 8017b76:	0016      	movs	r6, r2
 8017b78:	401e      	ands	r6, r3
 8017b7a:	421a      	tst	r2, r3
 8017b7c:	d1e2      	bne.n	8017b44 <_fclose_r+0x8>
 8017b7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b80:	f7fd ff29 	bl	80159d6 <__retarget_lock_release_recursive>
 8017b84:	e7df      	b.n	8017b46 <_fclose_r+0xa>
 8017b86:	0021      	movs	r1, r4
 8017b88:	0028      	movs	r0, r5
 8017b8a:	f7ff fb13 	bl	80171b4 <__sflush_r>
 8017b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017b90:	0006      	movs	r6, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d006      	beq.n	8017ba4 <_fclose_r+0x68>
 8017b96:	0028      	movs	r0, r5
 8017b98:	69e1      	ldr	r1, [r4, #28]
 8017b9a:	4798      	blx	r3
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	da01      	bge.n	8017ba4 <_fclose_r+0x68>
 8017ba0:	2601      	movs	r6, #1
 8017ba2:	4276      	negs	r6, r6
 8017ba4:	89a3      	ldrh	r3, [r4, #12]
 8017ba6:	061b      	lsls	r3, r3, #24
 8017ba8:	d503      	bpl.n	8017bb2 <_fclose_r+0x76>
 8017baa:	0028      	movs	r0, r5
 8017bac:	6921      	ldr	r1, [r4, #16]
 8017bae:	f7fd fadf 	bl	8015170 <_free_r>
 8017bb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017bb4:	2900      	cmp	r1, #0
 8017bb6:	d008      	beq.n	8017bca <_fclose_r+0x8e>
 8017bb8:	0023      	movs	r3, r4
 8017bba:	3340      	adds	r3, #64	; 0x40
 8017bbc:	4299      	cmp	r1, r3
 8017bbe:	d002      	beq.n	8017bc6 <_fclose_r+0x8a>
 8017bc0:	0028      	movs	r0, r5
 8017bc2:	f7fd fad5 	bl	8015170 <_free_r>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	6323      	str	r3, [r4, #48]	; 0x30
 8017bca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017bcc:	2900      	cmp	r1, #0
 8017bce:	d004      	beq.n	8017bda <_fclose_r+0x9e>
 8017bd0:	0028      	movs	r0, r5
 8017bd2:	f7fd facd 	bl	8015170 <_free_r>
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	6463      	str	r3, [r4, #68]	; 0x44
 8017bda:	f7ff fbd9 	bl	8017390 <__sfp_lock_acquire>
 8017bde:	2300      	movs	r3, #0
 8017be0:	81a3      	strh	r3, [r4, #12]
 8017be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017be4:	07db      	lsls	r3, r3, #31
 8017be6:	d402      	bmi.n	8017bee <_fclose_r+0xb2>
 8017be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bea:	f7fd fef4 	bl	80159d6 <__retarget_lock_release_recursive>
 8017bee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bf0:	f7fd feef 	bl	80159d2 <__retarget_lock_close_recursive>
 8017bf4:	f7ff fbd4 	bl	80173a0 <__sfp_lock_release>
 8017bf8:	e7a5      	b.n	8017b46 <_fclose_r+0xa>
	...

08017bfc <_fstat_r>:
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	b570      	push	{r4, r5, r6, lr}
 8017c00:	4d06      	ldr	r5, [pc, #24]	; (8017c1c <_fstat_r+0x20>)
 8017c02:	0004      	movs	r4, r0
 8017c04:	0008      	movs	r0, r1
 8017c06:	0011      	movs	r1, r2
 8017c08:	602b      	str	r3, [r5, #0]
 8017c0a:	f000 f84b 	bl	8017ca4 <_fstat>
 8017c0e:	1c43      	adds	r3, r0, #1
 8017c10:	d103      	bne.n	8017c1a <_fstat_r+0x1e>
 8017c12:	682b      	ldr	r3, [r5, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d000      	beq.n	8017c1a <_fstat_r+0x1e>
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	bd70      	pop	{r4, r5, r6, pc}
 8017c1c:	20006a8c 	.word	0x20006a8c

08017c20 <_isatty_r>:
 8017c20:	2300      	movs	r3, #0
 8017c22:	b570      	push	{r4, r5, r6, lr}
 8017c24:	4d06      	ldr	r5, [pc, #24]	; (8017c40 <_isatty_r+0x20>)
 8017c26:	0004      	movs	r4, r0
 8017c28:	0008      	movs	r0, r1
 8017c2a:	602b      	str	r3, [r5, #0]
 8017c2c:	f000 f84a 	bl	8017cc4 <_isatty>
 8017c30:	1c43      	adds	r3, r0, #1
 8017c32:	d103      	bne.n	8017c3c <_isatty_r+0x1c>
 8017c34:	682b      	ldr	r3, [r5, #0]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d000      	beq.n	8017c3c <_isatty_r+0x1c>
 8017c3a:	6023      	str	r3, [r4, #0]
 8017c3c:	bd70      	pop	{r4, r5, r6, pc}
 8017c3e:	46c0      	nop			; (mov r8, r8)
 8017c40:	20006a8c 	.word	0x20006a8c

08017c44 <_lseek_r>:
 8017c44:	b570      	push	{r4, r5, r6, lr}
 8017c46:	0004      	movs	r4, r0
 8017c48:	0008      	movs	r0, r1
 8017c4a:	0011      	movs	r1, r2
 8017c4c:	001a      	movs	r2, r3
 8017c4e:	2300      	movs	r3, #0
 8017c50:	4d05      	ldr	r5, [pc, #20]	; (8017c68 <_lseek_r+0x24>)
 8017c52:	602b      	str	r3, [r5, #0]
 8017c54:	f000 f846 	bl	8017ce4 <_lseek>
 8017c58:	1c43      	adds	r3, r0, #1
 8017c5a:	d103      	bne.n	8017c64 <_lseek_r+0x20>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d000      	beq.n	8017c64 <_lseek_r+0x20>
 8017c62:	6023      	str	r3, [r4, #0]
 8017c64:	bd70      	pop	{r4, r5, r6, pc}
 8017c66:	46c0      	nop			; (mov r8, r8)
 8017c68:	20006a8c 	.word	0x20006a8c

08017c6c <_read_r>:
 8017c6c:	b570      	push	{r4, r5, r6, lr}
 8017c6e:	0004      	movs	r4, r0
 8017c70:	0008      	movs	r0, r1
 8017c72:	0011      	movs	r1, r2
 8017c74:	001a      	movs	r2, r3
 8017c76:	2300      	movs	r3, #0
 8017c78:	4d05      	ldr	r5, [pc, #20]	; (8017c90 <_read_r+0x24>)
 8017c7a:	602b      	str	r3, [r5, #0]
 8017c7c:	f000 f83a 	bl	8017cf4 <_read>
 8017c80:	1c43      	adds	r3, r0, #1
 8017c82:	d103      	bne.n	8017c8c <_read_r+0x20>
 8017c84:	682b      	ldr	r3, [r5, #0]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d000      	beq.n	8017c8c <_read_r+0x20>
 8017c8a:	6023      	str	r3, [r4, #0]
 8017c8c:	bd70      	pop	{r4, r5, r6, pc}
 8017c8e:	46c0      	nop			; (mov r8, r8)
 8017c90:	20006a8c 	.word	0x20006a8c

08017c94 <_close>:
 8017c94:	2258      	movs	r2, #88	; 0x58
 8017c96:	2001      	movs	r0, #1
 8017c98:	4b01      	ldr	r3, [pc, #4]	; (8017ca0 <_close+0xc>)
 8017c9a:	4240      	negs	r0, r0
 8017c9c:	601a      	str	r2, [r3, #0]
 8017c9e:	4770      	bx	lr
 8017ca0:	20006a8c 	.word	0x20006a8c

08017ca4 <_fstat>:
 8017ca4:	2258      	movs	r2, #88	; 0x58
 8017ca6:	2001      	movs	r0, #1
 8017ca8:	4b01      	ldr	r3, [pc, #4]	; (8017cb0 <_fstat+0xc>)
 8017caa:	4240      	negs	r0, r0
 8017cac:	601a      	str	r2, [r3, #0]
 8017cae:	4770      	bx	lr
 8017cb0:	20006a8c 	.word	0x20006a8c

08017cb4 <_getpid>:
 8017cb4:	2258      	movs	r2, #88	; 0x58
 8017cb6:	2001      	movs	r0, #1
 8017cb8:	4b01      	ldr	r3, [pc, #4]	; (8017cc0 <_getpid+0xc>)
 8017cba:	4240      	negs	r0, r0
 8017cbc:	601a      	str	r2, [r3, #0]
 8017cbe:	4770      	bx	lr
 8017cc0:	20006a8c 	.word	0x20006a8c

08017cc4 <_isatty>:
 8017cc4:	2258      	movs	r2, #88	; 0x58
 8017cc6:	4b02      	ldr	r3, [pc, #8]	; (8017cd0 <_isatty+0xc>)
 8017cc8:	2000      	movs	r0, #0
 8017cca:	601a      	str	r2, [r3, #0]
 8017ccc:	4770      	bx	lr
 8017cce:	46c0      	nop			; (mov r8, r8)
 8017cd0:	20006a8c 	.word	0x20006a8c

08017cd4 <_kill>:
 8017cd4:	2258      	movs	r2, #88	; 0x58
 8017cd6:	2001      	movs	r0, #1
 8017cd8:	4b01      	ldr	r3, [pc, #4]	; (8017ce0 <_kill+0xc>)
 8017cda:	4240      	negs	r0, r0
 8017cdc:	601a      	str	r2, [r3, #0]
 8017cde:	4770      	bx	lr
 8017ce0:	20006a8c 	.word	0x20006a8c

08017ce4 <_lseek>:
 8017ce4:	2258      	movs	r2, #88	; 0x58
 8017ce6:	2001      	movs	r0, #1
 8017ce8:	4b01      	ldr	r3, [pc, #4]	; (8017cf0 <_lseek+0xc>)
 8017cea:	4240      	negs	r0, r0
 8017cec:	601a      	str	r2, [r3, #0]
 8017cee:	4770      	bx	lr
 8017cf0:	20006a8c 	.word	0x20006a8c

08017cf4 <_read>:
 8017cf4:	2258      	movs	r2, #88	; 0x58
 8017cf6:	2001      	movs	r0, #1
 8017cf8:	4b01      	ldr	r3, [pc, #4]	; (8017d00 <_read+0xc>)
 8017cfa:	4240      	negs	r0, r0
 8017cfc:	601a      	str	r2, [r3, #0]
 8017cfe:	4770      	bx	lr
 8017d00:	20006a8c 	.word	0x20006a8c

08017d04 <_sbrk>:
 8017d04:	4a05      	ldr	r2, [pc, #20]	; (8017d1c <_sbrk+0x18>)
 8017d06:	0003      	movs	r3, r0
 8017d08:	6811      	ldr	r1, [r2, #0]
 8017d0a:	2900      	cmp	r1, #0
 8017d0c:	d101      	bne.n	8017d12 <_sbrk+0xe>
 8017d0e:	4904      	ldr	r1, [pc, #16]	; (8017d20 <_sbrk+0x1c>)
 8017d10:	6011      	str	r1, [r2, #0]
 8017d12:	6810      	ldr	r0, [r2, #0]
 8017d14:	18c3      	adds	r3, r0, r3
 8017d16:	6013      	str	r3, [r2, #0]
 8017d18:	4770      	bx	lr
 8017d1a:	46c0      	nop			; (mov r8, r8)
 8017d1c:	20006580 	.word	0x20006580
 8017d20:	20006a90 	.word	0x20006a90

08017d24 <_write>:
 8017d24:	2258      	movs	r2, #88	; 0x58
 8017d26:	2001      	movs	r0, #1
 8017d28:	4b01      	ldr	r3, [pc, #4]	; (8017d30 <_write+0xc>)
 8017d2a:	4240      	negs	r0, r0
 8017d2c:	601a      	str	r2, [r3, #0]
 8017d2e:	4770      	bx	lr
 8017d30:	20006a8c 	.word	0x20006a8c

08017d34 <_exit>:
 8017d34:	e7fe      	b.n	8017d34 <_exit>
	...

08017d38 <_init>:
 8017d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d3a:	46c0      	nop			; (mov r8, r8)
 8017d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d3e:	bc08      	pop	{r3}
 8017d40:	469e      	mov	lr, r3
 8017d42:	4770      	bx	lr

08017d44 <_fini>:
 8017d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d46:	46c0      	nop			; (mov r8, r8)
 8017d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d4a:	bc08      	pop	{r3}
 8017d4c:	469e      	mov	lr, r3
 8017d4e:	4770      	bx	lr
